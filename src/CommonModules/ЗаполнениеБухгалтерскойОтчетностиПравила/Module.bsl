#Область Описание

// Модуль содержит прикладные правила заполнения бухгалтерской отчетности.
//
// Бухгалтерская отчетность включает в себя несколько разделов (отчетов),
// в составе которых содержатся показатели (их могут называть "строками"),
// которые объединяются в группы показателей.
//
// Как правило один показатель входит в одну группу, но может входить и в несколько -
// в этом случае должны быть описаны правила зачета показателя, то есть, включения их в конкретные группы.
// Например, финансовый результат от продажи основных средств может быть положительным - и тогда войдет в группу показателей с доходами -
// или отрицательным, и тогда войдет в группу с расходами.
//
// Состав показателей задается по умолчанию - см. ЗаполнитьНастройкиПоУмолчанию, может быть уточнен динамически по данным информационной базы,
// или настроен вручную.
//
// Заполнение отчета выполняется алгоритмами заполнения.
// Алгоритм обычно описывает некоторую часть отчета (набор показателей), опирающиеся на однотипные данные
// и сходным образом выводимые в отчет.
// Например, алгоритмом может быть информация о прочих доходах и расходах:
// она выбирается как обороты по счету 91 в разрезе одной и той же аналитики (статей, реализуемых объектов),
// имеет одинаковые правила зачета.
//
// Подробнее см. Описание в области АлгоритмыЗаполнения программного интерфейса.
//

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Содержит описание структуры отчета и правил его заполнения
//
// Параметры:
//  Процессор - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйПроцессорЗаполненияОтчета - заполняемая коллекция
//
Процедура ЗаполнитьНастройкиПоУмолчанию(Процессор) Экспорт
	
	Если Процессор.Раздел = "ОФР" Тогда
		ЗаполнитьНастройкиПоУмолчаниюОФР(Процессор);
	ИначеЕсли Процессор.Раздел = "ОДДС" Тогда
		ЗаполнитьНастройкиПоУмолчаниюОДДС(Процессор);
	КонецЕсли;
	
КонецПроцедуры

#Область АлгоритмыЗаполнения

#Область Описание

// Процедуры этой области представляют собой роутеры для алгоритмов заполнения.
// Каждый алгоритм заполнения должен быть в них описан - содержать вызовы методов алгоритма.
//
// Сам код алгоритмов размещен в служебной части модуля, см. область АлгоритмыЗаполнения.
//
// Алгоритм обеспечивает как собственно подготовку числовых данных отчета (извлечение из базы данных, численную обработку, описание порядка заполнения),
// так и возможности автоматической или пользовательской настройки.
//
// Часть алгоритмов основана на классификации в показателях отчета тех или иных объектов ("классифицируемых объектов") -
// например, статей расходов.
// С применением их может выполняться настройка показателей, их зачет, они же выводятся и в расшифровку.
//
// Работа с такими объектами должна быть описана в методах
// - ТипЗначенияКлассифицируемыхОбъектов
// - ПредставлениеТипаКлассифицируемыхОбъектовВинительныйПадеж
// - СоздатьКлассифицируемыеОбъекты
// - КлассифицируемыеОбъекты
//
// Показатели с одинаковым алгоритмом отличаются правилом заполнения, которое
// - как правило, включает в себя Отбор в терминах классифицируемых объектов (например, список статей или вид статьи, см. ДополнитьОтборАлгоритма)
// - может включать другие свойства - см. ИнициализироватьЗаполнениеПоказателя
//
// Состав и свойства выводимых в отчет показателей могут быть определены динамически, в зависимости от данных в периодах, выводимых в отчет.
// А именно, можно динамически
// - добавить показатели в группу показателей (т.е. детализировать показатель, представив его в виде группы) - см. ДетализироватьГруппуПоказателей
// - настроить свойства показателей, например их Вывод в отчет - см. НастроитьПоказатели
//
// Последовательность заполнения следующая:
// 1. Выбираются все однородные данные, т.е. данные всех показателей, например, все данные по счету 91 - см. ПолучитьДанныеУчета
// 2. При необходимости они зачитываются, т.е. значение показателя может быть распределено между группами, в которые он входит - см. ЗачестьПоказатели
// 3. Для каждого показателя определяется, как представлять эти данные - см. ОписатьПорядокЗаполненияПоказателя
// 4. Для каждого классифицируемого объекта может быть уточнено, как его представлять в расшифровке - см. ОписатьЗаполняемоеЗначение

#КонецОбласти

#Область ИдентификаторыАлгоритмов

// Для некоторых алгоритмов предполагается пользовательская настройка.
// В объектах, выполняющих такую настройку, может понадобиться их различать.
//
// Как правило, идентификаторы алгоритмов - перед методами, реализующими алгоритм.

// Определяет идентификатор алгоритма заполнения.
// 
// Возвращаемое значение:
//  ПланСчетовСсылка.Хозрасчетный
//
Функция ИдентификаторАлгоритмаПрочиеДоходыРасходы() Экспорт
	
	Возврат ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	
КонецФункции

#КонецОбласти

// Определяет тип значения классификатора, используемого алгоритмом.
// Может применяться при пользовательской настройке.
//
// Параметры:
//  Алгоритм - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения
// 
// Возвращаемое значение:
//  - ОписаниеТипов
//  - Неопределено - алгоритм не использует классификатор
//
Функция ТипЗначенияКлассифицируемыхОбъектов(Алгоритм) Экспорт
	
	Если Алгоритм = ИдентификаторАлгоритмаВыручка() Или Алгоритм = ИдентификаторАлгоритмаСебестоимостьПродаж() Тогда
		Возврат ТипЗначенияКлассифицируемыхОбъектовПродажи();
	ИначеЕсли Алгоритм = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		Возврат ТипЗначенияКлассифицируемыхОбъектовПрочиеДоходыРасходы();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет отбор правила заполнения исходя из списка классифицируемых объектов.
// Следует вызывать только, если отбор действительно нужен - то есть, когда этот список не пустой.
// Другими словами, не следует вызывать для показателей, используемых по умолчанию (основных).
//
// Параметры:
//  Отбор - Структура - заполняемый отбор; состав свойств определяется алгоритмом. Описывается в начале каждого раздела с алгоритмом
//  Алгоритм - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения
//  КлассифицируемыеОбъекты - Массив - тип объектов определяется алгоритмом (см. ТипЗначенияКлассифицируемыхОбъектов)
//
Процедура ЗаполнитьОтборКлассифицируемымиОбъектами(Отбор, Алгоритм, КлассифицируемыеОбъекты) Экспорт
	
	Если ЭтоАлгоритмПродажи(Алгоритм) Тогда
		ЗаполнитьОтборКлассифицируемымиОбъектамиПродажи(Отбор, КлассифицируемыеОбъекты);
	ИначеЕсли Алгоритм = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		ЗаполнитьОтборКлассифицируемымиОбъектамиПрочиеДоходыРасходы(Отбор, КлассифицируемыеОбъекты);
	КонецЕсли;
	
КонецПроцедуры

// Извлекает из информационной базы (помещает в создаваемые временные таблицы) информацию о значениях классификатора,
// используемого алгоритмом.
// Создаваемые таблицы далее используются в КлассифицируемыеОбъекты и ПолучитьДанныеУчета.
// Предполагается, что они содержат соответствие классифицируемых объектов (и, при необходимости, их свойств)
// и идентификаторов показателей, в которые включаются сведения об этих объектах.
// При этом в таблице должен быть полный перечень объектов.
// Для основных показателей считается допустимым значение NULL в поле с идентификатором показателя.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - для помещения создаваемых таблиц
//  Алгоритм - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения
//  Показатели - Массив из СтрокаТаблицыЗначений из БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела.Показатели - показатели с указанным алгоритмом
// 
Процедура СоздатьКлассифицируемыеОбъекты(МенеджерВременныхТаблиц, Алгоритм, Показатели) Экспорт
	
	Если ЭтоАлгоритмПродажи(Алгоритм) Тогда
		СоздатьКлассифицируемыеОбъектыПродажи(МенеджерВременныхТаблиц, Показатели);
	ИначеЕсли Алгоритм = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		СоздатьКлассифицируемыеОбъектыПрочиеДоходыРасходы(МенеджерВременныхТаблиц, Показатели);
	ИначеЕсли ЭтоАлгоритмДенежныхПотоков(Алгоритм) Тогда
		СоздатьКлассифицируемыеОбъектыДенежныхПотоков(МенеджерВременныхТаблиц, Показатели);
	КонецЕсли;
	
КонецПроцедуры

// Определяет объекты учета, составляющие каждый показатель алгоритма.
// Такие объекты используются при настройке и выводятся в расшифровку порядка заполнения.
// См. также ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.КлассифицируемыеОбъекты
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - см. СоздатьКлассифицируемыеОбъекты
//  Алгоритм - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения
// 
// Возвращаемое значение:
//  Соответствие:
//       * Ключ - идентификатор показателя
//       * Значение - СписокЗначений из ЛюбаяСсылка - объекты и их представления
//
Функция КлассифицируемыеОбъекты(МенеджерВременныхТаблиц, Алгоритм) Экспорт
	
	Если Алгоритм = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		Возврат КлассифицируемыеОбъектыПрочиеДоходыРасходы(МенеджерВременныхТаблиц);
	ИначеЕсли ЭтоАлгоритмПродажи(Алгоритм) Тогда
		Возврат КлассифицируемыеОбъектыПродажи(МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецФункции

// Инициализирует прикладную (определяемую алгоритмом заполнения) часть настройки заполнения показателя.
//
// Параметры:
//  НастройкиАлгоритма - Структура - для инициализации
//  Алгоритм - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения
//
Процедура ИнициализироватьЗаполнениеПоказателя(НастройкиАлгоритма, Алгоритм) Экспорт
	
	Если Алгоритм = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		ИнициализироватьЗаполнениеПоказателяПрочиеДоходыРасходы(НастройкиАлгоритма);
	ИначеЕсли ЭтоАлгоритмДенежныхПотоков(Алгоритм) Тогда
		ИнициализироватьЗаполнениеПоказателяДенежныеПотоки(НастройкиАлгоритма);
	КонецЕсли;
	
КонецПроцедуры

// Определяет состав динамических групп по умолчанию - на основании данных информационной базы.
// Такие группы первоначально (в ЗаполнитьНастройкиПоУмолчанию) описываются как группы из одного показателя ("имени себя").
// Перед заполнением или перед настройкой конкретного отчета такие группы могут динамически дополняться детализирующими показателями
// (исходный показатель останется на дне группы как основной).
// Ограничение: в каждой группе, объединенной общим алгоритмом, должен быть свой алгоритм заполнения.
//
// Параметры:
//  Шаблон      - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйШаблонДинамическойГруппы -
//                заполнение состава показателей выполняется опосредованно, через шаблон.
//                То есть, здесь, в прикладной части мы заполняем простой шаблон, не погружаясь в тонкости работы с коллекцией показателей.
//  ОбщийШаблон - Массив из Строка, ЛюбаяСсылка - массив из идентификаторов алгоритма заполнения;
//                позволяет указать (вернуть) набор алгоритмов, для которых нужно создать идентичный состав показателей.
//                Для указанных в параметре алгоритмов повторный вызов метода не выполняется.
//  Алгоритм    - Строка, ЛюбаяСсылка - идентификатор выполняемого алгоритма заполнения
//  Контекст    - см. БухгалтерскаяОтчетностьБРО.НовыйКонтекстОтчета
//  КодЯзыка    - Строка - код языка наименования показателей
//
Процедура ДетализироватьГруппуПоказателей(Шаблон, ОбщийШаблон, Алгоритм, Контекст, КодЯзыка) Экспорт
	
	Если Алгоритм = ИдентификаторАлгоритмаВыручка() Или Алгоритм = ИдентификаторАлгоритмаСебестоимостьПродаж() Тогда
		ОбщийШаблон.Добавить(ИдентификаторАлгоритмаВыручка());
		ОбщийШаблон.Добавить(ИдентификаторАлгоритмаСебестоимостьПродаж());
		ДетализироватьГруппуПоказателейПродажи(Шаблон, Контекст, КодЯзыка);
	КонецЕсли;
	
КонецПроцедуры

// Позволяет выполнить тонкую настройку свойств показателей при их установке по умолчанию
//
// Параметры:
//  Показатели  - Массив из СтрокаТаблицыЗначений из БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела.Показатели - модифицируемые показатели с указанным алгоритмом
//  Алгоритм    - Строка, ЛюбаяСсылка - идентификатор выполняемого алгоритма заполнения
//  Контекст    - см. БухгалтерскаяОтчетностьБРО.НовыйКонтекстОтчета
//
Процедура НастроитьПоказатели(Показатели, Алгоритм, Контекст) Экспорт
	
	Если Алгоритм = ИдентификаторАлгоритмаНалоги() Тогда
		
		НастроитьПоказателиНалоги(Показатели, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает все данные информационной базы, необходимые для определения значений показателей и описания порядка их определения.
//
// Параметры:
//  Процессор - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйПроцессорЗаполненияОтчета - дополняемая коллекция.
//
//   Метод должен выполнить основной запрос данных и поместить его результат в ДанныеУчета.
//   Запрос должен выбрать все данные, связанные с этим алгоритмом, то есть,
//   совокупность всех алгоритмов должна выбирать все данные без пропусков.
//   Данные выбираются в привязке к показателям. Если показатель определить не удается, то допустимо выбрать Null -
//   такие значения будут сопоставлены показателю по умолчанию.
//   Запрос должен содержать поля Показатель (идентификатор), Организация, Значение (числовое),
//   а также поля со значениями слагаемых, описанные в ОписатьПорядокЗаполненияПоказателя.
//   Для оптимизации получения представлений их можно получить в запросе - 
//   соответствующие поля должны иметь имена по шаблону из ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.ИмяПредставления.
//   Запрос должен содержать итоги по полю Показатель и полям, задаваемым в ОписатьПорядокЗаполненияПоказателя
//   В итоги включается сумма и представления, если последние не доступны на соответствующем уровне итогов.
//   Данные в запросе должны быть отсортированы для вывода пользователю.
//   
//   Метод может поместить в ДанныеАлгоритма произвольные данные для использования в
//   ЗачестьПоказатели, ОписатьПорядокЗаполненияПоказателя, ОписатьЗаполняемоеЗначение, ОписатьСуммирующиеПоказатели.
//   Этой возможностью следует пользоваться для оптимизации производительности - т.е. получать данные и их представления один раз,
//   исключать их получение в вызываемых циклично методах.
//
Процедура ПолучитьДанныеУчета(Процессор) Экспорт
	
	Если ЭтоАлгоритмПродажи(Процессор.Алгоритм) Тогда
		
		ПолучитьДанныеУчетаПродажи(Процессор);
		
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		
		ПолучитьДанныеУчетаПрочиеДоходыРасходы(Процессор);
		
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаНалоги() Тогда
		
		ПолучитьДанныеУчетаНалоги(Процессор);
		
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаРезультатПереоценкиВнеоборотныхАктивов() Тогда
		
		ПолучитьДанныеУчетаРезультатПереоценкиВнеоборотныхАктивов(Процессор);
		
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаДенежныеСредства() Тогда
		
		ПолучитьДанныеУчетаДенежныеСредства(Процессор);
		
	ИначеЕсли ЭтоАлгоритмДенежныхПотоков(Процессор.Алгоритм) Тогда
		
		ПолучитьДанныеУчетаДенежныеПотоки(Процессор);
		
	КонецЕсли;
	
КонецПроцедуры

// Описывает порядок заполнения показателя - как для пользователя, так и для вычисления состава слагаемых,
// в частности, описывает, как нужно поступить с запросом, выполненным в ПолучитьДанныеУчета.
//
// В общем случае значение показателя описывается набором значений - по субсчетам и/или по аналитике.
// Такие значения перед выводом в отчет так или иначе суммируются, поэтому их можно назвать "слагаемыми".
// 
// Параметры:
//  Описание - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйОписаниеПорядкаЗаполненияПоказателя - 
//             в него следует поместить тексты для пользователя, инструкции по использованию результата запроса и настройки отчета.
//             В частности
//             - следует заполнить Текст и можно заполнить Разъяснение
//             - координированно с текстом запроса следует дополнить ШагиРасчета, определив состав (иерархию) слагаемых.
//               Например, данные выбираем в разрезе счетов, далее статей расхода, далее - объектов реального мира.
//               Каждый шаг соответствует уровню иерархии прикладных данных в запросе из ПолучитьДанныеУчета.
//               Имя поля иерархии указывается в представлении списка значений.
//               Порядок шагов должен быть таким же как в запросе - при необходимости можно пропускать шаги, объявленные в запросе,
//               но нельзя менять взаимное положение.
//               В качестве значения можно указать перечень значений классификатора или плана счетов,
//               которые следует вывести в отчет обязательно (даже если запросом они не выбраны).
//             - можно заполнить шаблон для дальнейшей расшифровки слагаемых отчетом - см. Отчет
//  Показатель             - СтрокаТаблицыЗначений из БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела.Показатели
//  ЭтоОсновнойПоказатель  - Булево
//  Процессор - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйПроцессорЗаполненияОтчета - содержит, в частности,
//              ДанныеАлгоритма, полученные в ПолучитьДанныеУчета
//
Процедура ОписатьПорядокЗаполненияПоказателя(Описание, Показатель, ЭтоОсновнойПоказатель, Процессор) Экспорт

	Если ЭтоАлгоритмПродажи(Процессор.Алгоритм) Тогда
		ОписатьПорядокЗаполненияПоказателяПродажи(Описание, Показатель, ЭтоОсновнойПоказатель, Процессор.ДанныеАлгоритма, Процессор.КодЯзыка);
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		ОписатьПорядокЗаполненияПоказателяПрочиеДоходыРасходы(Описание, Показатель, ЭтоОсновнойПоказатель, Процессор);
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаНалоги() Тогда
		ОписатьПорядокЗаполненияПоказателяНалоги(Описание, Показатель, Процессор.ДанныеАлгоритма, Процессор.КодЯзыка);
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаРезультатПереоценкиВнеоборотныхАктивов() Тогда
		ОписатьПорядокЗаполненияПоказателяРезультатПереоценкиВнеоборотныхАктивов(Описание, Показатель, Процессор.ДанныеАлгоритма, Процессор.КодЯзыка);
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаДенежныеСредства() Тогда
		ОписатьПорядокЗаполненияПоказателяДенежныеСредства(Описание, Показатель, Процессор.ДанныеАлгоритма, Процессор.КодЯзыка);
	ИначеЕсли ЭтоАлгоритмДенежныхПотоков(Процессор.Алгоритм) Тогда
		ОписатьПорядокЗаполненияПоказателяДенежныеПотоки(Описание, Показатель, Процессор.ДанныеАлгоритма, Процессор.КодЯзыка);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет нетривиальный (отличающийся от порядка по умолчанию) порядок зачета показателей в случаях,
// когда показатель включается в несколько групп показателей и его значение "распределяется" между группами.
// Можно провести аналогию с вектором, где значение показателя - это модуль вектора, но его можно спроецировать на базис,
// образованный совокупностью групп.
// Подробнее см. комментарий в области ЗачетПоказателей модуля ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.
//
// Параметры:
//  КомпонентыЗачета   - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйКомпонентыЗачетаПоказателя - 
//                       в ней можно указать значения в разрезе групп, в которые входит показатель, снабдив пояснениями.
//  Показатель         - СтрокаТаблицыЗначений из БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела.Показатели - 
//                       "распределяемый" показатель
//  ЗначенияПоказателя - СтрокаДереваЗначений из  - вычисленные ранее значения показателя и его слагаемых
//  Процессор - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйПроцессорЗаполненияОтчета - содержит, в частности,
//              ДанныеАлгоритма, полученные в ПолучитьДанныеУчета
// 
// Возвращаемое значение:
//  Булево - Истина, если зачет выполнен; Ложь, если следует выполнить стандартный алгоритм.
//
Функция ЗачестьПоказатели(КомпонентыЗачета, Показатель, ЗначенияПоказателя, Процессор) Экспорт
	
	Если Процессор.Алгоритм = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		
		Возврат ЗачестьПрочиеДоходыРасходы(
			КомпонентыЗачета,
			Показатель.Заполнение.НастройкиАлгоритма.ЗачетПоказателей,
			ЗначенияПоказателя,
			Процессор.ДанныеАлгоритма,
			Процессор.КодЯзыка);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Позволяет детально описать для пользователя порядок расчета конкретных слагаемых, в частности, модифицировать описание и/или отчет.
// Описание, выполненное в ОписатьПорядокЗаполненияПоказателя, наследуется до всех слагаемых.
// В этом методе можно выполнить тонкую настройку.
//
// Параметры:
//  ЗаписьРасчет       - СтрокаДереваЗначений из ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйЗначенияПоказателей - 
//                                        описание значений "донастраиваемого" слагаемого
//  СоставШагаРасчета  - Структура - значения аналитики, доступной на уровне этого слагаемого, то есть, самого слагаемого и всех вышестоящих:
//                                       * Ключ - имя шага, как задано в ШагиРасчета в ОписатьПорядокЗаполненияПоказателя
//                                       * Значение - значение аналитики
//  КешПредставлений   - Структура - представления значений из СоставШагаРасчета:
//                                       * Ключ - имя шага, как задано в ШагиРасчета в ОписатьПорядокЗаполненияПоказателя
//                                       * Значение - представление значения
//  ОписаниеПорядкаЗаполненияПоказателя - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйОписаниеПорядкаЗаполненияПоказателя - заданное в ОписатьПорядокЗаполненияПоказателя
//  Процессор - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйПроцессорЗаполненияОтчета - содержит, в частности,
//              ДанныеАлгоритма, полученные в ПолучитьДанныеУчета
//
Процедура ОписатьЗаполняемоеЗначение(ЗаписьРасчет, СоставШагаРасчета, КешПредставлений, ОписаниеПорядкаЗаполненияПоказателя, Процессор) Экспорт

	Если Процессор.Алгоритм = ИдентификаторАлгоритмаНалоги() Тогда
		ОписатьЗаполняемоеЗначениеНалоги(ЗаписьРасчет, КешПредставлений, Процессор.КодЯзыка);
	ИначеЕсли Процессор.Алгоритм = ИдентификаторАлгоритмаРезультатПереоценкиВнеоборотныхАктивов() Тогда
		ОписатьЗаполняемоеЗначениеРезультатПереоценкиВнеоборотныхАктивов(ЗаписьРасчет, КешПредставлений, Процессор.КодЯзыка);
	ИначеЕсли ЭтоАлгоритмДенежныхПотоков(Процессор.Алгоритм) Тогда
		ОписатьЗаполняемоеЗначениеДенежныеПотоки(ЗаписьРасчет, СоставШагаРасчета, Процессор.ДанныеАлгоритма, Процессор.КодЯзыка);
	КонецЕсли;
	
КонецПроцедуры

// Позволяет описать алгоритм расчета суммирующих показателей - то есть, основанных не напрямую на выбранных данных,
// а на значениях других показателей.
// Суммирующие показатели следует применять в исключительных случаях, так как в обычных случаях суммирование обеспечивается механизмом авторасчета в БРО.
//
// Параметры:
//  СуммирующиеПоказатели - Соответствие - следует указать правила суммирования:
//           * Ключ - Число - идентификатор показателя, представляющего собой сумму других ("суммирующего")
//           * Значение - Массив из Число - идентификаторы показателей, выступающих как слагаемые ("суммируемых")
//  Алгоритм    - Строка, ЛюбаяСсылка - идентификатор выполняемого алгоритма заполнения
//  ДанныеАлгоритма - Структура - см. ПолучитьДанныеУчета
//
Процедура ОписатьСуммирующиеПоказатели(СуммирующиеПоказатели, Алгоритм, ДанныеАлгоритма) Экспорт
	
	Если Алгоритм = ИдентификаторАлгоритмаНалоги() Тогда
		ОписатьСуммирующиеПоказателиНалоги(СуммирующиеПоказатели, ДанныеАлгоритма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтруктураОтчета

// Методы этого раздела содержат высокоуровневое "методическое" описание порядка заполнения отчетов.

// Хранит описание настроек ОФР по умолчанию.
//
// Параметры:
//  Процессор - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйПроцессорОписанияЗаполняемыеПоказатели - управляющая коллекция
//
Процедура ЗаполнитьНастройкиПоУмолчаниюОФР(Процессор)
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка(); // Значения могут записываться в базу данных
	
	// Операционная деятельность:
	
	ДобавитьГруппу(Процессор, "2110");// Выручка
	УстановитьАлгоритм(Процессор, ПланыСчетов.Хозрасчетный.Выручка);
	
	ДобавитьГруппу(Процессор, "2120"); // Себестоимость продаж
	УстановитьАлгоритм(Процессор, ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	
	ДобавитьГруппу(Процессор, "2210"); // Коммерческие расходы
	УстановитьАлгоритм(Процессор, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	
	ДобавитьГруппу(Процессор, "2220"); // Управленческие расходы
	УстановитьАлгоритм(Процессор, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	
	// Инвестиционная и финансовая деятельность:
	
	НачатьАлгоритм(Процессор, ИдентификаторАлгоритмаПрочиеДоходыРасходы());
	
	ДобавитьГруппу(Процессор, "2310"); // Доходы от участия в других организациях
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	
	ДобавитьГруппу(Процессор, "2320"); // Проценты к получению
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);// За исключением процентных расходов, см. далее
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	
	ДобавитьГруппу(Процессор, "2330"); // Проценты к уплате
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	
	ДобавитьГруппу(Процессор, "2340"); // Прочие доходы
	ДобавитьГруппуОтрицательныхЗначений(Процессор, "2350"); // Прочие расходы
	
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Операции с инструментами финансового рынка';
										|en = 'Операции с инструментами финансового рынка'", КодЯзыка));
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	
	ДобавитьПоказатель(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	УстановитьЗачетПоказателейПрочиеДоходыРасходы(Процессор, "СтатьиОбъекты");
	
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Реализация и ликвидация внеоборотных активов';
										|en = 'Реализация и ликвидация внеоборотных активов'", КодЯзыка));
	УстановитьЗачетПоказателейПрочиеДоходыРасходы(Процессор, "СтатьиОбъекты");
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	
	ДобавитьПоказательРасходы(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	
	ДобавитьПоказательРасходы(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Реализация иного имущества, прав требования, прочих работ и услуг';
										|en = 'Реализация иного имущества, прав требования, прочих работ и услуг'", КодЯзыка));
	УстановитьЗачетПоказателейПрочиеДоходыРасходы(Процессор, "СтатьиОбъекты");
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Результаты инвентаризации';
										|en = 'Результаты инвентаризации'", КодЯзыка));
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации);
	// Выделенной статьи для недостач не предусмотрено. При существенности следует использовать отдельную статью и включить ее в этот показатель.
	
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Иная операционная деятельность';
										|en = 'Иная операционная деятельность'", КодЯзыка));
	УстановитьЗачетПоказателейПрочиеДоходыРасходы(Процессор, "СтатьиОбъекты");
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Курсовые разницы';
										|en = 'Курсовые разницы'", КодЯзыка));
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ДополнитьОтбор(Процессор, Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	
	ДобавитьОсновнойПоказатель(Процессор, НСтр("ru = 'Статьи, не включенные ни в один другой показатель отчета';
												|en = 'Статьи, не включенные ни в один другой показатель отчета'", КодЯзыка));
	УстановитьЗачетПоказателейПрочиеДоходыРасходы(Процессор, "СтатьиОбъекты");
	
	// Налоги на доход (прибыль):
	
	НачатьАлгоритм(Процессор, ИдентификаторАлгоритмаНалоги());
	
	ДобавитьГруппу(Процессор, "2410"); // Налог на прибыль организаций
	ДополнитьОтбор(Процессор, ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль);
	
	ДобавитьГруппу(Процессор, "2411"); // Текущий налог на прибыль организаций
	ДобавитьГруппу(Процессор, "2412"); // Отложенный налог на прибыль организаций
	ДополнитьОтбор(Процессор, ПланыСчетов.Хозрасчетный.ОтложенныйНалогНаПрибыль);
	
	ДобавитьГруппу(Процессор, "2410", НСтр("ru = 'Налог при упрощенной системе налогообложения';
											|en = 'Налог при упрощенной системе налогообложения'", КодЯзыка));
	ДополнитьОтбор(Процессор, ПланыСчетов.Хозрасчетный.ЕНприУСН);
	
	ДобавитьГруппу(Процессор, "2410", НСтр("ru = 'Налог при Автоматизированной упрощенной системе налогообложения';
											|en = 'Налог при Автоматизированной упрощенной системе налогообложения'", КодЯзыка));
	ДополнитьОтбор(Процессор, ПланыСчетов.Хозрасчетный.ЕНПриАУСН);
	
	ДобавитьГруппу(Процессор, "2410", НСтр("ru = 'НДФЛ индивидуального предпринимателя';
											|en = 'НДФЛ индивидуального предпринимателя'", КодЯзыка));
	ДополнитьОтбор(Процессор, ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя);
	
	// Прекращаемая деятельность:
	
	ДобавитьГруппу(Процессор, "2420"); // Прибыль (убыток) от прекращаемой деятельности (за вычетом относящегося к ней налога на прибыль организаций)
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Прибыль (убыток) от прекращаемой деятельности';
										|en = 'Прибыль (убыток) от прекращаемой деятельности'", КодЯзыка));
	УстановитьАлгоритм(Процессор, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Налог на прибыль, относящийся к прекращаемой деятельности';
										|en = 'Налог на прибыль, относящийся к прекращаемой деятельности'", КодЯзыка));
	УстановитьАлгоритм(Процессор, Неопределено);// Пока не умеем определять
	
	// Не включаемые в чистую прибыль:
	
	НачатьАлгоритм(Процессор, ИдентификаторАлгоритмаРезультатПереоценкиВнеоборотныхАктивов());
	
	ДобавитьГруппу(Процессор, "2510"); // Результат переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток)
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Прирост стоимости основных средств';
										|en = 'Прирост стоимости основных средств'", КодЯзыка));
	ДополнитьОтбор(Процессор, ПланыСчетов.Хозрасчетный.ПриростСтоимостиИмуществаПоПереоценке);
	ДобавитьПоказатель(Процессор, НСтр("ru = 'Прирост стоимости нематериальных активов';
										|en = 'Прирост стоимости нематериальных активов'", КодЯзыка));
	ДополнитьОтбор(Процессор, ПланыСчетов.Хозрасчетный.ПриростСтоимостиНМАПоПереоценке);
	ДобавитьОсновнойПоказатель(Процессор, НСтр("ru = 'Прирост стоимости прочих активов';
												|en = 'Прирост стоимости прочих активов'", КодЯзыка));
	
	ДобавитьГруппу(Процессор, "2530"); // Налог на прибыль организаций, относящийся к результатам переоценки внеоборотных активов и прочих операций, не включаемых в чистую прибыль (убыток)
	ДополнитьОтбор(Процессор, "ОтложенныйНалог");
	
КонецПроцедуры

// Хранит описание настроек ОДДС по умолчанию.
//
// Параметры:
//  Процессор - ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйПроцессорОписанияЗаполняемыеПоказатели - управляющая коллекция
//
Процедура ЗаполнитьНастройкиПоУмолчаниюОДДС(Процессор)
	
	// См. ПБУ 23, IAS 7
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка(); // Значения могут записываться в базу данных
	
	// ОСТАТКИ
	ДобавитьГруппу(Процессор, "4450");// Остаток денежных средств и денежных эквивалентов на начало периода
	УстановитьАлгоритм(Процессор, ИдентификаторАлгоритмаДенежныеСредства());
	
	// ОБОРОТЫ
	НачатьАлгоритм(Процессор, ИдентификаторАлгоритмаДенежныеПотоки());
	ДобавитьСворачиваемыйДенежныйПоток(Процессор, "НДС"); // подп. 16(б) ПБУ 23; по умолчанию применяем везде
	
	// Операционная деятельность
	// - Поступления
	
	ДобавитьГруппу(Процессор, "4111");// От продажи продукции, товаров, работ и услуг
	ДобавитьПоказатель(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков);
	// подп. 16(а) ПБУ 23:
	// -- деньги от комитента на закупку условно считаем ушедшими продавцам товаров транзитом
	ДобавитьСворачиваемыйДенежныйПоток(Процессор, "АгентПокупателя");

	// -- платежи комитенту условно считаем полученными от покупателей - они тоже транзитные
	ДобавитьПоказательСвернутогоДенежногоПотока(Процессор, "АгентПродавца", НСтр("ru = 'Исключены суммы продаж в интересах комитента';
																				|en = 'Исключены суммы продаж в интересах комитента'"));
	
	ДобавитьГруппу(Процессор, "4112");// Арендных платежей, лицензионных платежей, роялти, комиссионных и иных аналогичных платежей
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.АрендныеПлатежиРоялтиЛицензионныеПлатежиГонорарыКомиссионные);
	
	ДобавитьГруппу(Процессор, "4113"); // От перепродажи финансовых вложений
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтПерепродажиФинансовыхВложений);
	
	ДобавитьГруппу(Процессор, "4114"); // Процентов по дебиторской задолженности покупателей
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПоступлениеПроцентовПоДебиторскойЗадолженностиПокупателей);
	
	ДобавитьГруппу(Процессор, "4119"); // Прочие поступления
	ДобавитьПоказатель(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности);
	НачатьДобавлениеПоказателейПоложительныхЗначений(Процессор);// См. ДополнитьГруппуОтрицательныхЗначений
	ДобавитьПоказательСвернутогоДенежногоПотока(Процессор, "ОбменВалют", НСтр("ru = 'Выгоды и потери от валютно-обменных операций';
																				|en = 'Выгоды и потери от валютно-обменных операций'"));
	ДобавитьОсновнойПоказатель(Процессор, НСтр("ru = 'Статьи, не включенные ни в один другой показатель отчета';
												|en = 'Статьи, не включенные ни в один другой показатель отчета'", КодЯзыка));
	ДобавитьСворачиваемыйДенежныйПоток(Процессор, "КурсовыеРазницы");
	
	// - Платежи
	
	ДобавитьГруппу(Процессор, "4121"); // Поставщикам (подрядчикам) за сырье, материалы, работы, услуги
	ДобавитьПоказатель(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов);
	// подп. 16(а) ПБУ 23:
	// -- платежи комитенту условно считаем полученными от покупателей
	ДобавитьСворачиваемыйДенежныйПоток(Процессор, "АгентПродавца");
	// -- деньги от комитента на закупку условно считаем ушедшими продавцам товаров
	ДобавитьПоказательСвернутогоДенежногоПотока(Процессор, "АгентПокупателя", НСтр("ru = 'Исключены суммы приобретений в интересах комитента';
																					|en = 'Исключены суммы приобретений в интересах комитента'"));
	
	ДобавитьГруппу(Процессор, "4122"); // В связи с оплатой труда работников
	ДобавитьПоказатель(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТруда);
	ОграничитьСворачиваемыйДенежныйПоток(Процессор, "НДС");
	ДобавитьПоказательРаспределенногоДенежногоПотока(
		Процессор,
		"ЕНС",
		НалоговыеПлатежиНДФЛОплатыТруда(),
		НСтр("ru = 'НДФЛ с оплаты труда, зачисленный на единый налоговый счет';
			|en = 'НДФЛ с оплаты труда, зачисленный на единый налоговый счет'", КодЯзыка));
	ДобавитьПоказательРаспределенногоДенежногоПотока(
		Процессор,
		"ЕНС",
		Перечисления.ВидыНалогов.НалоговыеПлатежиСтраховыеВзносыОплатыТруда(),
		НСтр("ru = 'Страховые взносы с оплаты труда, зачисленные на единый налоговый счет';
			|en = 'Страховые взносы с оплаты труда, зачисленные на единый налоговый счет'", КодЯзыка));
	
	ДобавитьГруппу(Процессор, "4123"); // Процентов по долговым обязательствам
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовПоДолговымОбязательствам);
	
	ДобавитьГруппу(Процессор, "4124"); // Налога на прибыль организаций
	ДобавитьПоказатель(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.НалогНаПрибыль);
	ОграничитьСворачиваемыйДенежныйПоток(Процессор, "НДС");
	ДобавитьПоказательРаспределенногоДенежногоПотока(
		Процессор,
		"ЕНС",
		Перечисления.ВидыНалогов.НалоговыеПлатежиНалогНаПрибыль(),
		НСтр("ru = 'Налог на прибыль, зачисленный на единый налоговый счет';
			|en = 'Налог на прибыль, зачисленный на единый налоговый счет'", КодЯзыка));
	
	ДобавитьГруппу(Процессор, "4129"); // Прочие платежи
	ДобавитьПоказатель(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности);
	// Пока поток по НДС отражаем только в платежах, чтобы сальдировался с платежом на ЕНС
	ДобавитьПоказательСвернутогоДенежногоПотока(Процессор, "НДС", НСтр("ru = 'НДС, представленный свернуто';
																		|en = 'НДС, представленный свернуто'"));
	РаспределитьДенежныйПоток(
		Процессор,
		"ЕНС",
		НСтр("ru = 'Исключены суммы налогов, уплаченные на единый налоговый счет, входящие в состав других показателей';
			|en = 'Исключены суммы налогов, уплаченные на единый налоговый счет, входящие в состав других показателей'",
		КодЯзыка));
	ДополнитьГруппуОтрицательныхЗначений(Процессор);
	
	// Инвестиционная деятельность
	// - Поступления
	ДобавитьГруппу(Процессор, "4211"); // От продажи внеоборотных активов (кроме финансовых вложений)
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ВыручкаОтПродажиВнеоборотныхАктивовКромеФинансовых);
	
	ДобавитьГруппу(Процессор, "4212"); // От продажи акций других организаций (долей участия)
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтПродажиАкцийДругихОрганизаций);
	
	ДобавитьГруппу(Процессор, "4213"); // От возврата предоставленных займов, от продажи долговых ценных бумаг (прав требования денежных средств к другим лицам)
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтПогашенияЗаймовПродажиДолговыхЦенныхБумаг);
	
	ДобавитьГруппу(Процессор, "4214"); // Дивидендов, процентов по долговым финансовым вложениям и аналогичных поступлений от долевого участия в других организациях
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПоступлениеОтДивидендовПроцентовПоДолговымФинансовымВложениям);
	
	ДобавитьГруппу(Процессор, "4219"); // Прочие поступления
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоИнвестиционнойДеятельности);
	
	// - Платежи
	ДобавитьГруппу(Процессор, "4221"); // В связи с приобретением, созданием, модернизацией, реконструкцией и подготовкой к использованию внеоборотных активов
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеСозданиеМодернизацияРеконструкцияВнеоборотныхАктивов);
	
	ДобавитьГруппу(Процессор, "4222"); // В связи с приобретением акций других организаций (долей участия)
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеАкцийДругихОрганизаций);
	
	ДобавитьГруппу(Процессор, "4223"); // В связи с приобретением долговых ценных бумаг (прав требования денежных средств к другим лицам), предоставление займов другим лицам
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеДолговыхЦенныхБумагПредоставлениеЗаймов);
	
	ДобавитьГруппу(Процессор, "4224"); // Процентов по долговым обязательствам, включаемым в стоимость инвестиционного актива
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовВСвязиСоСтроительством);
	
	ДобавитьГруппу(Процессор, "4229"); // Прочие платежи
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоИнвестиционнойДеятельности);

	// Финансовая деятельность
	// - Поступления
	ДобавитьГруппу(Процессор, "4311"); // Получение кредитов и займов
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями);
	
	ДобавитьГруппу(Процессор, "4312"); // Денежных вкладов собственников (участников)
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПоступлениеДенежныхВкладовСобственников);
	
	ДобавитьГруппу(Процессор, "4313"); // От выпуска акций, увеличения долей участия
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтЭмиссииАкций);
	
	ДобавитьГруппу(Процессор, "4314"); // От выпуска облигаций, векселей и других долговых ценных бумаг
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ВыпускДолговыхИнструментов);
	
	ДобавитьГруппу(Процессор, "4319"); // Прочие поступления
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоФинансовойДеятельности);
	
	// - Платежи
	ДобавитьГруппу(Процессор, "4321"); // Собственникам (участникам) в связи с выкупом у них акций (долей участия) организации или их выходом из состава участников
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПлатежиСобственникамВСвязиСВыкупомАкцийИлиПриВыходеИзСоставаУчастников);
	
	ДобавитьГруппу(Процессор, "4322"); // На уплату дивидендов и иных платежей по распределению прибыли в пользу собственников (участников)
	ДобавитьПоказатель(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДивидендов);
	ДобавитьПоказательРаспределенногоДенежногоПотока(
		Процессор,
		"ЕНС",
		Перечисления.ВидыНалогов.НалоговыеПлатежиНалогНаПрибыльДивидендов(),
		НСтр("ru = 'Налог на прибыль, удержанный при выплате дивидендов';
			|en = 'Налог на прибыль, удержанный при выплате дивидендов'", КодЯзыка));
	ДобавитьПоказательРаспределенногоДенежногоПотока(
		Процессор,
		"ЕНС",
		НалоговыеПлатежиНДФЛДивидендов(),
		НСтр("ru = 'НДФЛ, удержанный при выплате дивидендов';
			|en = 'НДФЛ, удержанный при выплате дивидендов'", КодЯзыка));
	
	ДобавитьГруппу(Процессор, "4323"); // В связи с погашением (выкупом) векселей и других долговых ценных бумаг, возврат кредитов и займов
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПогашениеДолговыйЦенныхБумагВозвратКредитовИЗаймов);
	
	ДобавитьГруппу(Процессор, "4329"); // Прочие платежи
	ДополнитьОтбор(Процессор, Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоФинансовойДеятельности);
	
	// Величина влияния изменения курса иностранной валюты по отношению к рублю
	ДобавитьГруппу(Процессор, "4490");
	ДобавитьПоказательСвернутогоДенежногоПотока(Процессор, "КурсовыеРазницы", НСтр("ru = 'Изменения курса иностранной валюты по отношению к рублю';
																					|en = 'Изменения курса иностранной валюты по отношению к рублю'"));
	
КонецПроцедуры

#КонецОбласти

#Область АлгоритмыЗаполнения

#Область Продажи

// Набор схожих алгоритмов

// В описаниях показателей с этим алгоритмом свойство Заполнение.Отбор может содержать следующие ключи:
//   * НоменклатурнаяГруппа - Массив Из СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры

Функция ИдентификаторыАлгоритмовПродажи()
	
	Алгоритмы = Новый Массив;
	
	Алгоритмы.Добавить(ИдентификаторАлгоритмаВыручка());
	Алгоритмы.Добавить(ИдентификаторАлгоритмаСебестоимостьПродаж());
	Алгоритмы.Добавить(ИдентификаторАлгоритмаРасходыНаПродажу());
	Алгоритмы.Добавить(ИдентификаторАлгоритмаУправленческиеРасходы());
	
	Возврат Алгоритмы;
	
КонецФункции

Функция ИдентификаторАлгоритмаВыручка()
	
	Возврат ПланыСчетов.Хозрасчетный.Выручка;
	
КонецФункции

Функция ИдентификаторАлгоритмаСебестоимостьПродаж()
	
	Возврат ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	
КонецФункции

Функция ИдентификаторАлгоритмаРасходыНаПродажу()
	
	Возврат ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу;
	
КонецФункции

Функция ИдентификаторАлгоритмаУправленческиеРасходы()
	
	Возврат ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы;
	
КонецФункции

Функция ЭтоАлгоритмПродажи(Алгоритм)
	
	АлгоритмыПродажи = ИдентификаторыАлгоритмовПродажи();
	
	Возврат АлгоритмыПродажи.Найти(Алгоритм) <> Неопределено;
	
КонецФункции

Функция ТипЗначенияКлассифицируемыхОбъектовПродажи()
	
	Возврат Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	
КонецФункции

Процедура ЗаполнитьОтборКлассифицируемымиОбъектамиПродажи(Отбор, КлассифицируемыеОбъекты)
	
	Отбор.Вставить("НоменклатурнаяГруппа", ОбщегоНазначения.СкопироватьРекурсивно(КлассифицируемыеОбъекты));
	
КонецПроцедуры

Процедура СоздатьКлассифицируемыеОбъектыПродажи(МенеджерВременныхТаблиц, Показатели)
	
	НоменклатурныеГруппы = Новый ТаблицаЗначений;
	НоменклатурныеГруппы.Колонки.Добавить("НоменклатурнаяГруппа",  Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры"));
	НоменклатурныеГруппы.Колонки.Добавить("Показатель",            Новый ОписаниеТипов("Число"));
	
	Для Каждого ОписаниеПоказателя Из Показатели Цикл
		
		ИндексПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(ОписаниеПоказателя);
		Если ОписаниеПоказателя.Заполнение.Отбор.Свойство("НоменклатурнаяГруппа") Тогда
			Для Каждого НоменклатурнаяГруппа Из ОписаниеПоказателя.Заполнение.Отбор.НоменклатурнаяГруппа Цикл
				НовыйЭлемент = НоменклатурныеГруппы.Добавить();
				НовыйЭлемент.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				НовыйЭлемент.Показатель           = ИндексПоказателя;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", НоменклатурныеГруппы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатурныеГруппы.НоменклатурнаяГруппа КАК Значение,
	|	НоменклатурныеГруппы.Показатель КАК Показатель
	|ПОМЕСТИТЬ Настройки_Объект
	|ИЗ
	|	&НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объекты.Ссылка КАК Объект,
	|	МАКСИМУМ(Настройки.Показатель) КАК Показатель
	|ПОМЕСТИТЬ НастройкиОбъектов
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК Объекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Настройки_Объект КАК Настройки
	|		ПО Объекты.Ссылка = Настройки.Значение
	|ГДЕ
	|	НЕ Объекты.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	Объекты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Настройки_Объект";

	Запрос.Выполнить();

КонецПроцедуры

Функция КлассифицируемыеОбъектыПродажи(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объекты.Показатель КАК Показатель,
	|	Объекты.Объект КАК Объект,
	|	ПРЕДСТАВЛЕНИЕ(Объекты.Объект) КАК Представление,
	|	Объекты.Объект.Наименование КАК ПорядокОбъектов,
	|	НЕ Объекты.Объект.ПометкаУдаления КАК Активный
	|ИЗ
	|	НастройкиОбъектов КАК Объекты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатель,
	|	Активный УБЫВ,
	|	ПорядокОбъектов,
	|	Объект
	|ИТОГИ ПО
	|	Показатель";
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ПараметрыДетализацииПродажи()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЛимитКоличестваПоказателей", 10);
	Параметры.Вставить("МаксимальныйОхват",        0.95);
	Возврат Параметры;
	
КонецФункции

Процедура ДетализироватьГруппуПоказателейПродажи(Шаблон, Контекст, КодЯзыка)
	
	ПараметрыДетализации = ПараметрыДетализацииПродажи();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаВыручки",  СчетаПродажи(ИдентификаторАлгоритмаВыручка()));
	Запрос.УстановитьПараметр("НачалоПериода", Контекст.ОтчетныйПериод.Начало);
	Запрос.УстановитьПараметр("КонецПериода",  Контекст.ОтчетныйПериод.Конец);
	Запрос.УстановитьПараметр("Организации",   БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Контекст.Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Выручка.Субконто1 КАК Справочник.ГруппыФинансовогоУчетаНоменклатуры), ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)) КАК Объект,
	|	СУММА(ВЫБОР
	|			КОГДА Выручка.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА -Выручка.СуммаОборотДт
	|			КОГДА Выручка.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ТОГДА Выручка.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма
	|ПОМЕСТИТЬ Выручка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаВыручки), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы), Организация В (&Организации), , ) КАК Выручка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Выручка.Субконто1 КАК Справочник.ГруппыФинансовогоУчетаНоменклатуры), ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатурныеГруппы.Объект КАК Объект,
	|	НоменклатурныеГруппы.Объект.Наименование КАК Представление,
	|	НоменклатурныеГруппы.Сумма КАК Сумма
	|ИЗ
	|	Выручка КАК НоменклатурныеГруппы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сумма УБЫВ,
	|	Представление,
	|	Объект
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаИтог.Следующий() Тогда
		
		Итог  = ВыборкаИтог.Сумма;
		Охват = 0;
		ВыборкаПоказатель = ВыборкаИтог.Выбрать();
		Пока ВыборкаПоказатель.Следующий() Цикл
			
			ШаблонПоказателя = Шаблон.ДетальныеПоказатели.Добавить();
			ШаблонПоказателя.Наименование = ВыборкаПоказатель.Представление;
			ШаблонПоказателя.Отбор.Вставить("НоменклатурнаяГруппа", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаПоказатель.Объект));
			
			Охват = Охват + ВыборкаПоказатель.Сумма;
			
			Если Охват / Итог >= ПараметрыДетализации.МаксимальныйОхват Тогда
				Прервать;
			КонецЕсли;
			
			Если Шаблон.ДетальныеПоказатели.Количество() >= ПараметрыДетализации.ЛимитКоличестваПоказателей Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Шаблон.НаименованиеОсновногоПоказателя = НСтр("ru = 'Номенклатурные группы, не приведенные выше';
													|en = 'Номенклатурные группы, не приведенные выше'", КодЯзыка);
	
КонецПроцедуры

Функция СчетаПродажи(Алгоритм)
	
	Если Алгоритм = ИдентификаторАлгоритмаВыручка() Тогда
		Возврат СубсчетаОсновногоСчетаПродаж(Алгоритм, ВидСчета.Активный);
	ИначеЕсли Алгоритм = ИдентификаторАлгоритмаСебестоимостьПродаж() Тогда
		Возврат СубсчетаОсновногоСчетаПродаж(Алгоритм, ВидСчета.Пассивный);
	Иначе
		Возврат СубсчетаОсновногоСчетаПродаж(Алгоритм, Неопределено);
	КонецЕсли;
	
КонецФункции

Функция СубсчетаОсновногоСчетаПродаж(Алгоритм, Знач ВидРегулирующихСчетов)
	
	Запрос = Новый Запрос;
	
	ИсключаемыеСчета = ИдентификаторыАлгоритмовПродажи();
	ИсключаемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
	
	ЗаданВидРегулирующихСчетов = Истина;
	Если Не ЗначениеЗаполнено(ВидРегулирующихСчетов) Тогда
		ЗаданВидРегулирующихСчетов = Ложь;
		ВидРегулирующихСчетов = ВидСчета.АктивноПассивный; // Для обеспечения совместимости типов в запросе
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВедущийСчет",                Алгоритм);
	Запрос.УстановитьПараметр("ЗаданВидРегулирующихСчетов", ЗаданВидРегулирующихСчетов);
	Запрос.УстановитьПараметр("ВидРегулирующихСчетов",      ВидРегулирующихСчетов);
	Запрос.УстановитьПараметр("ИсключаемыеСчета",           ИсключаемыеСчета);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновнойСчет.Ссылка КАК Счет,
	|	ОсновнойСчет.Порядок КАК Порядок
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ОсновнойСчет
	|ГДЕ
	|	ОсновнойСчет.Ссылка В ИЕРАРХИИ(&ВедущийСчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегулирующиеСчета.Ссылка,
	|	РегулирующиеСчета.Порядок
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК РегулирующиеСчета
	|ГДЕ
	|	&ЗаданВидРегулирующихСчетов
	|	И РегулирующиеСчета.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи))
	|	И НЕ РегулирующиеСчета.Ссылка В ИЕРАРХИИ (&ИсключаемыеСчета)
	|	И РегулирующиеСчета.Вид = &ВидРегулирующихСчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Счет";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

Функция ОбязательныеСчетаПродажи()
	
	ОбязательныеСчета = Новый Массив;
	
	ОбязательныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	ОбязательныеСчета.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	ОбязательныеСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	ОбязательныеСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
	ОбязательныеСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
	
	Возврат СоответствиеИзМассива(ОбязательныеСчета);
	
КонецФункции

Процедура ПолучитьДанныеУчетаПродажи(Процессор)
	
	Процессор.ДанныеАлгоритма.Вставить("НоменклатурныеГруппы", Новый Соответствие);
	ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.ЗаполнитьКлассифицируемыеОбъектыАлгоритма(
		Процессор.ДанныеАлгоритма.НоменклатурныеГруппы,
		Процессор.МенеджерВременныхТаблиц,
		Процессор.Алгоритм,
		Процессор.ОсновнойПоказатель);
		
	Если Процессор.ДанныеАлгоритма.НоменклатурныеГруппы.Количество() = 1 Тогда
		// В тривиальном случае детализация не важна
		Процессор.ДанныеАлгоритма.НоменклатурныеГруппы.Очистить();
	КонецЕсли;
	
	Процессор.ДанныеАлгоритма.Вставить("Счета", СчетаПродажи(Процессор.Алгоритм));
	
	ОписаниеСчетов = ОписаниеСчетовУчета(Процессор.ДанныеАлгоритма.Счета, ОбязательныеСчетаПродажи());
	Процессор.ДанныеАлгоритма.Вставить("ОписаниеСчетов",      ОписаниеСчетов);
	Процессор.ДанныеАлгоритма.Вставить("ПредставлениеСчетов", ПредставлениеСпискаСчетов(ОписаниеСчетов));
	
	Аналитика = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	Процессор.ДанныеАлгоритма.Вставить("СчетаДетально", СчетаПрименяетсяАналитика(Процессор.ДанныеАлгоритма.Счета, Аналитика));
	
	СчетаСводно = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Процессор.ДанныеАлгоритма.Счета, Процессор.ДанныеАлгоритма.СчетаДетально);
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("СчетаСводно",   СчетаСводно);
	Запрос.УстановитьПараметр("СчетаДетально", Процессор.ДанныеАлгоритма.СчетаДетально);
	Запрос.УстановитьПараметр("Аналитика",     Аналитика);
	
	// Поскольку речь о доходах и расходах, суммы кредитового оборота представляются положительными (доход), дебетового - отрицательными (расход)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ОборотыДетально.Субконто1 КАК Справочник.ГруппыФинансовогоУчетаНоменклатуры), ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)) КАК Объект,
	|	ОборотыДетально.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ОборотыДетально.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА -ОборотыДетально.СуммаОборотДт
	|		КОГДА ОборотыДетально.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА ОборотыДетально.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ОборотыДетально.Организация КАК Организация
	|ПОМЕСТИТЬ ОборотыПродажи
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаДетально), &Аналитика, Организация В (&Организации), , ) КАК ОборотыДетально
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка),
	|	ОборотыСводно.Счет,
	|	ВЫБОР
	|		КОГДА ОборотыСводно.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА -ОборотыСводно.СуммаОборотДт
	|		КОГДА ОборотыСводно.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА ОборотыСводно.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ОборотыСводно.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаСводно), , Организация В (&Организации), , ) КАК ОборотыСводно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объекты.Показатель КАК Показатель,
	|	Объекты.Объект КАК НоменклатурнаяГруппа,
	|	ПРЕДСТАВЛЕНИЕ(Объекты.Объект) КАК НоменклатурнаяГруппаПредставление,
	|	Объекты.Объект.Наименование КАК НоменклатурнаяГруппаПорядок,
	|	Обороты.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Обороты.Организация) КАК ОрганизацияПредставление,
	|	Обороты.Организация.Наименование КАК ОрганизацияПорядок,
	|	Обороты.Счет КАК Счет,
	|	Обороты.Счет.Код КАК СчетПредставление,
	|	Обороты.Счет.Порядок КАК СчетПорядок,
	|	Обороты.Сумма КАК Значение
	|ИЗ
	|	ОборотыПродажи КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОбъектов КАК Объекты
	|		ПО Обороты.Объект = Объекты.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПорядок,
	|	СчетПорядок,
	|	Счет,
	|	Значение УБЫВ,
	|	НоменклатурнаяГруппаПорядок
	|ИТОГИ
	|	СУММА(Значение)
	|ПО
	|	Показатель,
	|	Организация,
	|	Счет,
	|	НоменклатурнаяГруппа";
	
	Процессор.ДанныеУчета = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОписатьПорядокЗаполненияПоказателяПродажи(Описание, Показатель, ЭтоОсновнойПоказатель, ДанныеАлгоритма, КодЯзыка)
	
	ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
	
	Описание.ШагиРасчета.Добавить(ДанныеАлгоритма.ОписаниеСчетов, "Счет"); // Счет идет первым, чтобы и при отсутствии оборотов он выводился для расшифровки отчетом
	
	Субсчета = ДанныеАлгоритма.ОписаниеСчетов.ВыгрузитьЗначения();
	
	ДетализироватьНоменклатурныеГруппыОписания    = Ложь;
	ДетализироватьНоменклатурныеГруппыРасшифровки = Ложь;
	ДетализироватьНоменклатурныеГруппыОтчета      = Ложь;
	
	ОтборНоменклатурныеГруппы = Неопределено;
	
	Если Не БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
		
		ОтборНоменклатурныеГруппы = ДанныеАлгоритма.НоменклатурныеГруппы[ИдентификаторПоказателя];
		
		Если ЭтоОсновнойПоказатель Тогда
			
			Для Каждого Субсчет Из Субсчета Цикл
				ДетализироватьНоменклатурныеГруппыОтчета = (ДанныеАлгоритма.СчетаДетально.Найти(Субсчет) <> Неопределено);
				Если ДетализироватьНоменклатурныеГруппыОтчета Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ДетализироватьНоменклатурныеГруппыРасшифровки = ДетализироватьНоменклатурныеГруппыОтчета;
			
		Иначе
			
			ДетализироватьНоменклатурныеГруппыОтчета      = ОтборНоменклатурныеГруппы <> Неопределено;
			ДетализироватьНоменклатурныеГруппыОписания    = ДетализироватьНоменклатурныеГруппыОтчета;
			ДетализироватьНоменклатурныеГруппыРасшифровки = ДетализироватьНоменклатурныеГруппыОтчета И ОтборНоменклатурныеГруппы.Количество() > 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализироватьНоменклатурныеГруппыРасшифровки Тогда
		ВыводНоменклатурныеГруппы = Неопределено;
		Если ДетализироватьНоменклатурныеГруппыОписания Тогда
			ВыводНоменклатурныеГруппы = ОтборНоменклатурныеГруппы;
		КонецЕсли;
		Описание.ШагиРасчета.Добавить(ВыводНоменклатурныеГруппы, "НоменклатурнаяГруппа");
	КонецЕсли;
	
	СловаОписания = Новый Структура;
	ТекстСчета = "";
	Если ДанныеАлгоритма.ПредставлениеСчетов.Количество = 1 Тогда
		ТекстСчета = СтрШаблон("счету %1", ДанныеАлгоритма.ПредставлениеСчетов.Текст);
	Иначе
		ТекстСчета = СтрШаблон("счетам %1", ДанныеАлгоритма.ПредставлениеСчетов.Текст);
	КонецЕсли;
	СловаОписания.Вставить("Счету", ТекстСчета);
	
	ШаблонОписания = НСтр("ru = 'Оборот по [Счету]';
							|en = 'Оборот по [Счету]'", КодЯзыка);
	Если ДетализироватьНоменклатурныеГруппыОписания Тогда
		
		МаркированныйСписок = Ложь;
		Если ОтборНоменклатурныеГруппы.Количество() > 1 Тогда
			ШаблонОписания = НСтр("ru = 'Оборот по [Счету] по номенклатурной группе из списка:
                                   |[НоменклатурныеГруппы]';
                                   |en = 'Оборот по [Счету] по номенклатурной группе из списка:
                                   |[НоменклатурныеГруппы]'", КодЯзыка);
			МаркированныйСписок = Истина;
		Иначе
			ШаблонОписания = НСтр("ru = 'Оборот по [Счету] по номенклатурной группе [НоменклатурныеГруппы]';
									|en = 'Оборот по [Счету] по номенклатурной группе [НоменклатурныеГруппы]'", КодЯзыка);
		КонецЕсли;
		
		СловаОписания.Вставить("НоменклатурныеГруппы", ПредставлениеСпискаЗначений(ОтборНоменклатурныеГруппы, МаркированныйСписок));
		
	КонецЕсли;
	
	Описание.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонОписания, СловаОписания);
	
	// Отчет
	Описание.Отчет.ВидОтчета  = "ОборотыСчета";
	Описание.Отчет.СчетГруппа = ПланыСчетов.Хозрасчетный.Продажи;
	Описание.Отчет.Субсчета   = Субсчета;
	
	Если ДетализироватьНоменклатурныеГруппыОтчета Тогда
		
		Описание.Отчет.Субконто.Вставить("НоменклатурнаяГруппа", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
		Если ОтборНоменклатурныеГруппы <> Неопределено Тогда
			Описание.Отчет.ОтборыПоказателя.Вставить("НоменклатурнаяГруппа", ОтборНоменклатурныеГруппы.ВыгрузитьЗначения());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СчетаПрименяетсяАналитика(Счета, Аналитика)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета",     Счета);
	Запрос.УстановитьПараметр("Аналитика", Аналитика);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&Счета)
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = &Аналитика И ХозрасчетныйВидыСубконто.Суммовой";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

#КонецОбласти

#Область ПрочиеДоходыРасходы

// В описаниях показателей с этим алгоритмом свойство Заполнение.Отбор может содержать следующие ключи:
//   * ВидСтатьи - ПеречислениеСсылка.ВидыПрочихДоходовИРасходов
//   * Статья - Массив Из СправочникСсылка.ПрочиеДоходыИРасходы
// Предполагается, что указан или ВидСтатьи или Статья.
// Если указаны оба, то приоритет имеет ВидСтатьи.

#Область ОписаниеПоказателей

Процедура ИнициализироватьЗаполнениеПоказателяПрочиеДоходыРасходы(НастройкиАлгоритма)
	
	НастройкиАлгоритма.Вставить("ЗачетПоказателей", ""); // Нет, СтатьиОбъекты, Показатель
	// Пустую строку следует указывать для показателей, которые включаются в одну группу.
	// Она соответствует поведению по умолчанию - "Показатель", т.е. полный зачет.
	
КонецПроцедуры

Процедура УстановитьЗачетПоказателейПрочиеДоходыРасходы(Процессор, ВариантЗачета)
	
	Если Процессор.КонтекстЗаполнения.Алгоритм <> ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		Возврат;
	КонецЕсли;
	
	Процессор.КонтекстЗаполнения.Показатель.Заполнение.НастройкиАлгоритма.ЗачетПоказателей = ВариантЗачета;
КонецПроцедуры

Процедура ДобавитьОтборПрочиеДоходыРасходы(Заполнение, ЗначениеОтбора)
	
	ИмяСвойства = "ВидСтатьи";
	ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов")
			Или  ТипЗначенияОтбора = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")Тогда
		ИмяСвойства = "Статья";
	ИначеЕсли ТипЗначенияОтбора <> Тип("ПеречислениеСсылка.ВидыПрочихДоходовИРасходов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Заполнение.Отбор.Свойство(ИмяСвойства) Тогда
		ЗначенияОтбора = Заполнение.Отбор[ИмяСвойства];
	Иначе
		ЗначенияОтбора = Новый Массив;
		Заполнение.Отбор.Вставить(ИмяСвойства, ЗначенияОтбора);
	КонецЕсли;
	
	ЗначенияОтбора.Добавить(ЗначениеОтбора);
	
	Если Заполнение.Отбор.Свойство("Статья") И Заполнение.Отбор.Свойство("ВидСтатьи") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидыСтатей", Заполнение.Отбор.ВидСтатьи);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрочиеДоходыИРасходы.Ссылка КАК Статья
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК ПрочиеДоходыИРасходы
		|ГДЕ
		|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В(&ВидыСтатей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрочиеДоходыИРасходы.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиДоходов КАК ПрочиеДоходыИРасходы
		|ГДЕ
		|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В(&ВидыСтатей)";
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Заполнение.Отбор.Статья, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья"));
		Заполнение.Отбор.Удалить("ВидСтатьи");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ТипЗначенияКлассифицируемыхОбъектовПрочиеДоходыРасходы()
	
	ТипыЗначения = Новый Массив;
	ТипыЗначения.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов"));
	ТипыЗначения.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	
	Возврат Новый ОписаниеТипов(ТипыЗначения);
	
КонецФункции

Процедура ЗаполнитьОтборКлассифицируемымиОбъектамиПрочиеДоходыРасходы(Отбор, КлассифицируемыеОбъекты)
	
	Отбор.Удалить("ВидСтатьи");
	Отбор.Вставить("Статья", ОбщегоНазначения.СкопироватьРекурсивно(КлассифицируемыеОбъекты));
	
КонецПроцедуры

Процедура СоздатьКлассифицируемыеОбъектыПрочиеДоходыРасходы(МенеджерВременныхТаблиц, Показатели)
	
	// Создаваемые таблицы - полные, то есть, содержат все классифицируемые объекты, в том числе, не участвующие в настройках получения данных.
	
	ВидыСтатей = Новый ТаблицаЗначений;
	ВидыСтатей.Колонки.Добавить("ВидСтатьи",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПрочихДоходовИРасходов"));
	ВидыСтатей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Число"));
	
	Статьи = Новый ТаблицаЗначений;
	Статьи.Колонки.Добавить("Статья",     ТипЗначенияКлассифицируемыхОбъектовПрочиеДоходыРасходы());
	Статьи.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Число"));
	
	Для Каждого ОписаниеПоказателя Из Показатели Цикл
		
		ИндексПоказателя = ОписаниеПоказателя.Владелец().Индекс(ОписаниеПоказателя);
		Если ОписаниеПоказателя.Заполнение.Отбор.Свойство("ВидСтатьи") Тогда
			Для Каждого ВидСтатьи Из ОписаниеПоказателя.Заполнение.Отбор.ВидСтатьи Цикл
				НовыйЭлемент = ВидыСтатей.Добавить();
				НовыйЭлемент.ВидСтатьи  = ВидСтатьи;
				НовыйЭлемент.Показатель = ИндексПоказателя;
			КонецЦикла;
		ИначеЕсли ОписаниеПоказателя.Заполнение.Отбор.Свойство("Статья") Тогда
			Для Каждого Статья Из ОписаниеПоказателя.Заполнение.Отбор.Статья Цикл
				НовыйЭлемент = Статьи.Добавить();
				НовыйЭлемент.Статья     = Статья;
				НовыйЭлемент.Показатель = ИндексПоказателя;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидыСтатей", ВидыСтатей);
	Запрос.УстановитьПараметр("Статьи",     Статьи);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСтатей.ВидСтатьи КАК ВидСтатьи,
	|	ВидыСтатей.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_ВидыСтатейНастройки
	|ИЗ
	|	&ВидыСтатей КАК ВидыСтатей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСтатьи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статьи.Статья КАК Статья,
	|	Статьи.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_СтатьиНастройки
	|ИЗ
	|	&Статьи КАК Статьи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыПрочихДоходовИРасходов.Ссылка КАК ВидСтатьи,
	|	МАКСИМУМ(ВидыСтатей.Показатель) КАК Показатель
	|ПОМЕСТИТЬ ВидыСтатей
	|ИЗ
	|	Перечисление.ВидыПрочихДоходовИРасходов КАК ВидыПрочихДоходовИРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыСтатейНастройки КАК ВидыСтатей
	|		ПО ВидыПрочихДоходовИРасходов.Ссылка = ВидыСтатей.ВидСтатьи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыПрочихДоходовИРасходов.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСтатьи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Статья,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидСтатьи,
	|	МАКСИМУМ(СтатьиНастройки.Показатель) КАК Показатель
	|ПОМЕСТИТЬ СтатьиЯвнаяНастройка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК ПрочиеДоходыИРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиНастройки КАК СтатьиНастройки
	|		ПО ПрочиеДоходыИРасходы.Ссылка = СтатьиНастройки.Статья
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеДоходыИРасходы.Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Статья,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидСтатьи,
	|	МАКСИМУМ(СтатьиНастройки.Показатель) КАК Показатель
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК ПрочиеДоходыИРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиНастройки КАК СтатьиНастройки
	|		ПО ПрочиеДоходыИРасходы.Ссылка = СтатьиНастройки.Статья
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеДоходыИРасходы.Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСтатьи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статьи.ВидСтатьи КАК ВидСтатьи,
	|	Статьи.Статья КАК Статья,
	|	Статьи.Показатель КАК СтатьяПоказатель
	|ПОМЕСТИТЬ Исключения
	|ИЗ
	|	СтатьиЯвнаяНастройка КАК Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыСтатей КАК ВидыСтатей
	|		ПО Статьи.ВидСтатьи = ВидыСтатей.ВидСтатьи
	|ГДЕ
	|	Статьи.Показатель ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСтатьи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статьи.Статья КАК Статья,
	|	Статьи.ВидСтатьи КАК ВидСтатьи,
	|	ЕСТЬNULL(Статьи.Показатель, ВидыСтатей.Показатель) КАК Показатель
	|ПОМЕСТИТЬ Статьи
	|ИЗ
	|	СтатьиЯвнаяНастройка КАК Статьи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыСтатей КАК ВидыСтатей
	|		ПО Статьи.ВидСтатьи = ВидыСтатей.ВидСтатьи
	|			И (ВидыСтатей.Показатель ЕСТЬ НЕ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВидыСтатейНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиНастройки";
	
	Запрос.Выполнить();

КонецПроцедуры

Функция КлассифицируемыеОбъектыПрочиеДоходыРасходы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статьи.Показатель КАК Показатель,
	|	Статьи.Статья КАК Объект,
	|	ПРЕДСТАВЛЕНИЕ(Статьи.Статья) КАК Представление,
	|	Статьи.Статья.РеквизитДопУпорядочивания КАК ПорядокСтатей,
	|	НЕ Статьи.Статья.ПометкаУдаления КАК Активный
	|ИЗ
	|	Статьи КАК Статьи
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатель,
	|	ПорядокСтатей,
	|	Объект
	|ИТОГИ ПО
	|	Показатель";
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Процедура СоздатьОборотыПрочихДоходовРасходов(Процессор, СчетаДоходыРасходы, СчетаРасходы)
	
	ВидыСубконтоДоходовРасходов = Новый Массив;
	ВидыСубконтоДоходовРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ВидыСубконтоДоходовРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	
	Запрос = НачатьЗапрос(Процессор);
	
	Запрос.УстановитьПараметр("СчетаДоходовРасходов",         СчетаДоходыРасходы);
	Запрос.УстановитьПараметр("СчетаРасходы",                 СчетаРасходы);
	Запрос.УстановитьПараметр("ВидыСубконтоДоходовРасходов",  ВидыСубконтоДоходовРасходов);
	
	Запрос.УстановитьПараметр(
		"СчетаЧрезвычайныхРасходов",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль));
	
	// Поскольку речь о доходах и расходах, суммы кредитового оборота представляются положительными (доход), дебетового - отрицательными (расход)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Организация КАК Организация,
	|	Данные.Счет КАК Счет,
	|	Данные.Статья КАК Статья,
	|	Данные.РеализуемыйАктив КАК РеализуемыйАктив,
	|	СУММА(Данные.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ОборотыПрочихДоходовРасходов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Счет91.Организация КАК Организация,
	|		Счет91.Счет КАК Счет,
	|		ЕСТЬNULL(Счет91.Субконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)) КАК Статья,
	|		Счет91.Субконто2 КАК РеализуемыйАктив,
	|		ВЫБОР
	|			КОГДА Счет91.Счет В (&СчетаРасходы)
	|				ТОГДА -Счет91.СуммаОборотДт
	|			ИНАЧЕ Счет91.СуммаОборотКт
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаДоходовРасходов), &ВидыСубконтоДоходовРасходов, Организация В (&Организации), , ) КАК Счет91
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Счет99.Организация,
	|		Счет99.Счет,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка),
	|		НЕОПРЕДЕЛЕНО,
	|		-Счет99.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В (&СчетаЧрезвычайныхРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|				Организация В (&Организации)
	|					И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы),
	|				,
	|				) КАК Счет99) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Организация,
	|	Данные.Счет,
	|	Данные.Статья,
	|	Данные.РеализуемыйАктив
	|
	|ИМЕЮЩИЕ
	|	СУММА(Данные.Сумма) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьДанныеУчетаПрочиеДоходыРасходы(Процессор)
	
	// Счета учета
	Процессор.ДанныеАлгоритма.Вставить("Счета", Новый Структура);
	Процессор.ДанныеАлгоритма.Счета.Вставить("Группа",     ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Процессор.ДанныеАлгоритма.Счета.Вставить("Субсчета",   Новый Массив);
	Процессор.ДанныеАлгоритма.Счета.Вставить("Доходы",     Новый Массив);
	Процессор.ДанныеАлгоритма.Счета.Вставить("Расходы",    Новый Массив);
	Процессор.ДанныеАлгоритма.Счета.Вставить("Назначение", Новый Соответствие); // Ключ - счет, Значение - "Доходы", "Расходы"
	
	ВсяГруппаСчетов = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	ВидыСчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсяГруппаСчетов, "Вид");
	Для Каждого Субсчет Из ВсяГруппаСчетов Цикл
		
		Если Субсчет = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов Тогда
			// Закрывающий
			Продолжить;
		КонецЕсли;
		
		ВидСубсчета = ВидыСчетов[Субсчет];
		Если ВидСубсчета = ВидСчета.Пассивный Тогда
			Процессор.ДанныеАлгоритма.Счета.Доходы.Добавить(Субсчет);
			Процессор.ДанныеАлгоритма.Счета.Назначение.Вставить(Субсчет, "Доходы");
		ИначеЕсли ВидСубсчета = ВидСчета.Активный Тогда
			Процессор.ДанныеАлгоритма.Счета.Расходы.Добавить(Субсчет);
			Процессор.ДанныеАлгоритма.Счета.Назначение.Вставить(Субсчет, "Расходы");
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Процессор.ДанныеАлгоритма.Счета.Субсчета, Процессор.ДанныеАлгоритма.Счета.Доходы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Процессор.ДанныеАлгоритма.Счета.Субсчета, Процессор.ДанныеАлгоритма.Счета.Расходы);
	
	ОписаниеСчетовДоходы  = ОписаниеСчетовУчета(Процессор.ДанныеАлгоритма.Счета.Доходы);
	ОписаниеСчетовРасходы = ОписаниеСчетовУчета(Процессор.ДанныеАлгоритма.Счета.Расходы);
	
	Процессор.ДанныеАлгоритма.Вставить("ПредставлениеСубсчетовДоходы",  ПредставлениеСпискаСчетов(ОписаниеСчетовДоходы));
	Процессор.ДанныеАлгоритма.Вставить("ПредставлениеСубсчетовРасходы", ПредставлениеСпискаСчетов(ОписаниеСчетовРасходы));
	
	Процессор.ДанныеАлгоритма.Вставить(
		"ПредставлениеСубсчетовДоходыДательныйПадеж",
		ПредставлениеСубсчетовДательныйПадеж(Процессор.ДанныеАлгоритма.ПредставлениеСубсчетовДоходы, Процессор.КодЯзыка));
	
	Процессор.ДанныеАлгоритма.Вставить(
		"ПредставлениеСубсчетовРасходыДательныйПадеж",
		ПредставлениеСубсчетовДательныйПадеж(Процессор.ДанныеАлгоритма.ПредставлениеСубсчетовРасходы, Процессор.КодЯзыка));
		
	ОсновноеРазъяснениеПланСчетов = НСтр(
		"ru = 'Доходы отражаются на пассивных субсчетах (по кредиту), расходы - на активных субсчетах (по дебету).';
		|en = 'Доходы отражаются на пассивных субсчетах (по кредиту), расходы - на активных субсчетах (по дебету).'",
		Процессор.КодЯзыка);
		
	ШаблонРазъясненияЗачетПоказателей = НСтр(
		"ru = 'Поэтому для расчета показателя определяется кредитовый оборот по %1 за вычетом дебетового оборота по %2.';
		|en = 'Поэтому для расчета показателя определяется кредитовый оборот по %1 за вычетом дебетового оборота по %2.'",
		Процессор.КодЯзыка);
	РазъяснениеЗачетПоказателей = СтрШаблон(
		ШаблонРазъясненияЗачетПоказателей,
		Процессор.ДанныеАлгоритма.ПредставлениеСубсчетовДоходыДательныйПадеж,
		Процессор.ДанныеАлгоритма.ПредставлениеСубсчетовРасходыДательныйПадеж);
	
	Процессор.ДанныеАлгоритма.Вставить("РазъяснениеПланСчетовБезЗачета", ОсновноеРазъяснениеПланСчетов);
	РазъяснениеПланСчетовЗачетПоказателей = Новый Массив;
	РазъяснениеПланСчетовЗачетПоказателей.Добавить(ОсновноеРазъяснениеПланСчетов);
	РазъяснениеПланСчетовЗачетПоказателей.Добавить(РазъяснениеЗачетПоказателей);
	Процессор.ДанныеАлгоритма.Вставить(
		"РазъяснениеПланСчетовЗачетПоказателей",
		СтрСоединить(РазъяснениеПланСчетовЗачетПоказателей, Символы.ПС));
	
	// Аналитика
	Процессор.ДанныеАлгоритма.Вставить("Статьи", Новый Соответствие);
	ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.ЗаполнитьКлассифицируемыеОбъектыАлгоритма(
		Процессор.ДанныеАлгоритма.Статьи,
		Процессор.МенеджерВременныхТаблиц,
		Процессор.Алгоритм,
		Процессор.ОсновнойПоказатель);
		
	Процессор.ДанныеАлгоритма.Вставить("ВидыСтатей", ПрименяемыеВидыСтатейПрочиеДоходыРасходы(Процессор.МенеджерВременныхТаблиц));
	
	// Обороты
	СоздатьОборотыПрочихДоходовРасходов(Процессор, Процессор.ДанныеАлгоритма.Счета.Субсчета, Процессор.ДанныеАлгоритма.Счета.Расходы);
	
	ПоказателиРеализуемыйАктив = Новый Массив;
	Для Каждого Правило Из Процессор.ПравилаПолученияДанных Цикл
		Если Правило.Заполнение.НастройкиАлгоритма.ЗачетПоказателей = "СтатьиОбъекты" Тогда
			ПоказателиРеализуемыйАктив.Добавить(БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Правило));
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("БезПоказателя",              Процессор.ОсновнойПоказатель);
	Запрос.УстановитьПараметр("ПоказателиРеализуемыйАктив", ПоказателиРеализуемыйАктив);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статьи.Показатель КАК Показатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Статьи.Показатель, &БезПоказателя) В (&ПоказателиРеализуемыйАктив)
	|			ТОГДА Обороты.РеализуемыйАктив
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК РеализуемыйАктив,
	|	ПРЕДСТАВЛЕНИЕ(Обороты.РеализуемыйАктив) КАК РеализуемыйАктивПредставление,
	|	Обороты.Счет КАК Счет,
	|	Обороты.Счет.Порядок КАК ПорядокСчета,
	|	Обороты.Счет.Код КАК СчетПредставление,
	|	Обороты.Счет.Вид КАК ВидСчета,
	|	Обороты.Сумма КАК Значение,
	|	0 КАК ЗначениеМодуль,
	|	Обороты.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Обороты.Организация) КАК ОрганизацияПредставление
	|ИЗ
	|	ОборотыПрочихДоходовРасходов КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Статьи КАК Статьи
	|		ПО Обороты.Статья = Статьи.Статья
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатель,
	|	ПорядокСчета,
	|	Счет,
	|	ЗначениеМодуль УБЫВ,
	|	Значение УБЫВ,
	|	РеализуемыйАктив
	|ИТОГИ
	|	МАКСИМУМ(РеализуемыйАктивПредставление),
	|	СУММА(Значение),
	|	ВЫБОР
	|		КОГДА СУММА(Значение) < 0
	|			ТОГДА -СУММА(Значение)
	|		ИНАЧЕ СУММА(Значение)
	|	КОНЕЦ КАК ЗначениеМодуль
	|ПО
	|	Показатель,
	|	Организация,
	|	РеализуемыйАктив,
	|	Счет";
	
	Процессор.ДанныеУчета = Запрос.Выполнить();
	
КонецПроцедуры

Функция ПрименяемыеВидыСтатейПрочиеДоходыРасходы(МенеджерВременныхТаблиц)
	
	ВидыСтатей = Новый ТаблицаЗначений;
	ВидыСтатей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Число"));
	ВидыСтатей.Колонки.Добавить("ВидыСтатей", Новый ОписаниеТипов("СписокЗначений")); // из ПеречислениеСсылка.ВидыПрочихДоходовИРасходов и его представлений
	ВидыСтатей.Колонки.Добавить("Исключения", Новый ОписаниеТипов("Соответствие")); // Ключ - идентификатор показателя, Значение - список значений из статей и их представлений
	// После заполнения индексируется по Показатель
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСтатей.Показатель КАК Показатель,
	|	ВидыСтатей.ВидСтатьи КАК ВидСтатьи,
	|	ПРЕДСТАВЛЕНИЕ(ВидыСтатей.ВидСтатьи) КАК ВидСтатьиПредставление,
	|	Исключения.СтатьяПоказатель КАК ПоказательИсключений,
	|	Исключения.Статья КАК Статья,
	|	ПРЕДСТАВЛЕНИЕ(Исключения.Статья) КАК СтатьяПредставление
	|ИЗ
	|	ВидыСтатей КАК ВидыСтатей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Исключения КАК Исключения
	|		ПО ВидыСтатей.ВидСтатьи = Исключения.ВидСтатьи
	|ГДЕ
	|	ВидыСтатей.Показатель ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыСтатей.ВидСтатьи.Порядок,
	|	Исключения.Статья.РеквизитДопУпорядочивания,
	|	Исключения.Статья
	|ИТОГИ ПО
	|	Показатель,
	|	ВидСтатьи,
	|	ПоказательИсключений";
	
	ВыборкаПоказатель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоказатель.Следующий() Цикл
		
		ОписаниеПоказателя = ВидыСтатей.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, ВыборкаПоказатель);
		
		ВыборкаВидСтатьи = ВыборкаПоказатель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидСтатьи.Следующий() Цикл
			
			ОписаниеПоказателя.ВидыСтатей.Добавить(ВыборкаВидСтатьи.ВидСтатьи, ВыборкаВидСтатьи.ВидСтатьиПредставление);
			
			ВыборкаПоказательИсключений = ВыборкаВидСтатьи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоказательИсключений.Следующий() Цикл
				
				Если ВыборкаПоказательИсключений.ПоказательИсключений = Null Тогда
					Продолжить;
				КонецЕсли;
				
				СтатьиИсключения = ОписаниеПоказателя.Исключения[ВыборкаПоказательИсключений.ПоказательИсключений];
				Если СтатьиИсключения = Неопределено Тогда
					СтатьиИсключения = Новый СписокЗначений;
					ОписаниеПоказателя.Исключения.Вставить(ВыборкаПоказательИсключений.ПоказательИсключений, СтатьиИсключения);
				КонецЕсли;
				
				ВыборкаСтатья = ВыборкаПоказательИсключений.Выбрать();
				Пока ВыборкаСтатья.Следующий() Цикл
					СтатьиИсключения.Добавить(ВыборкаСтатья.Статья, ВыборкаСтатья.СтатьяПредставление);
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ВидыСтатей.Индексы.Добавить("Показатель");
	Возврат ВидыСтатей;
	
КонецФункции

Процедура ОписатьПорядокЗаполненияПоказателяПрочиеДоходыРасходы(Описание, Показатель, ЭтоОсновнойПоказатель, Процессор)
	
	ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
	
	СодержимоеПоказателя  = Процессор.ДанныеАлгоритма.Статьи[ИдентификаторПоказателя];
	СодержимоеШагаРасчета = Неопределено;
	Если Не ЭтоОсновнойПоказатель Тогда
		СодержимоеШагаРасчета = СодержимоеПоказателя;
	КонецЕсли;
	
	ЗачетПоказателей = Показатель.Заполнение.НастройкиАлгоритма.ЗачетПоказателей;
	
	Если ЗачетПоказателей = "Нет" Тогда
		Описание.Разъяснение = Процессор.ДанныеАлгоритма.РазъяснениеПланСчетовБезЗачета;
	Иначе
		Описание.Разъяснение = Процессор.ДанныеАлгоритма.РазъяснениеПланСчетовЗачетПоказателей;
	КонецЕсли;
	
	ОписаниеЗачетПоказателей = "";
	Если ЗачетПоказателей = "СтатьиОбъекты" Тогда
		
		Описание.ШагиРасчета.Добавить(, "РеализуемыйАктив");
		ОписаниеЗачетПоказателей = НСтр(
			"ru = 'По каждому реализованному объекту раздельно определяются доходы (сумма положительных значений) и расходы (сумма отрицательных значений)';
			|en = 'По каждому реализованному объекту раздельно определяются доходы (сумма положительных значений) и расходы (сумма отрицательных значений)'",
			Процессор.КодЯзыка);
		Описание.Отчет.ВидОтчета = "АнализСубконто"; // Нельзя использовать ОборотыСчета: данные выбираются с разных субсчетов счета 91 в разрезе РеализуемыйАктив, но на самом счете 91 такое субконто не определено
		
	Иначе
		
		Описание.ШагиРасчета.Добавить(, "Счет");
		Описание.Отчет.ВидОтчета = "ОборотыСчета";
		
		Если ЗачетПоказателей = "Показатель" Тогда
			ОписаниеЗачетПоказателей = НСтр("ru = 'Положительная итоговая сумма включается в доходы, отрицательная - в расходы';
											|en = 'Положительная итоговая сумма включается в доходы, отрицательная - в расходы'", Процессор.КодЯзыка);
		ИначеЕсли ЗачетПоказателей = "Нет" Тогда
			ОписаниеЗачетПоказателей = НСтр("ru = 'Суммы, учтенные по кредиту, включаются в доходы; по дебету - в расходы';
											|en = 'Суммы, учтенные по кредиту, включаются в доходы; по дебету - в расходы'", Процессор.КодЯзыка);
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Отчет
	Описание.Отчет.СчетГруппа = Процессор.ДанныеАлгоритма.Счета.Группа;

	Описание.Отчет.Субконто.Вставить("Статья", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Описание.Отчет.Субконто.Вставить("РеализуемыйАктив", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	
	// Текст и отбор отчета.
	// Недостаточно полагаться на заданные правила заполнения, так как могут быть исключения
	// (для одного показателя указаны виды, для другого - статьи того же вида)
	ЕдинственныйПоказатель = (Процессор.ПравилаПолученияДанных.Количество() = 1);
	
	ОписаниеВидаСтатей = Процессор.ДанныеАлгоритма.ВидыСтатей.Найти(ИдентификаторПоказателя, "Показатель");
	
	СловаТекста = Новый Структура;
	
	ШаблонТекста = "";
	Если ЭтоОсновнойПоказатель И ЕдинственныйПоказатель Тогда
		ШаблонТекста = СтрШаблон(НСтр("ru = 'Оборот по счету %1.';
										|en = 'Оборот по счету %1.'", Процессор.КодЯзыка), Процессор.ДанныеАлгоритма.Счета.Группа);
	ИначеЕсли ОписаниеВидаСтатей <> Неопределено Тогда
		
		ШаблонТекста = СтрШаблон(
			НСтр("ru = 'Оборот по счету %1 по статьям [ВидСтатьи].';
				|en = 'Оборот по счету %1 по статьям [ВидСтатьи].'", Процессор.КодЯзыка),
			Процессор.ДанныеАлгоритма.Счета.Группа);
		ВидСтатьи = "";
		Если ОписаниеВидаСтатей.ВидыСтатей.Количество() > 1 Тогда
			ВидСтатьи = СтрШаблон(
				НСтр("ru = 'видов
                      |%1';
                      |en = 'видов
                      |%1'", Процессор.КодЯзыка),
				ПредставлениеСпискаЗначений(ОписаниеВидаСтатей.ВидыСтатей, Истина));
		Иначе
			ВидСтатьи = СтрШаблон(
				НСтр("ru = 'вида %1';
					|en = 'вида %1'", Процессор.КодЯзыка),
				ПредставлениеСпискаЗначений(ОписаниеВидаСтатей.ВидыСтатей, Ложь));
		КонецЕсли;
		СловаТекста.Вставить("ВидСтатьи", ВидСтатьи);
		
		Если Не ЗначениеЗаполнено(ОписаниеВидаСтатей.Исключения) Или Не ЗначениеЗаполнено(СодержимоеПоказателя) Тогда
			
			ОтборЧерезТочку = Новый Соответствие;
			ОтборЧерезТочку.Вставить("ВидПрочихДоходовИРасходов", ОписаниеВидаСтатей.ВидыСтатей.ВыгрузитьЗначения());
			Описание.Отчет.ОтборыПоказателя.Вставить("Статья", ОтборЧерезТочку);
			
		Иначе
			
			Описание.Отчет.ОтборыПоказателя.Вставить("Статья", СодержимоеПоказателя.ВыгрузитьЗначения());
			
			ШаблонТекста = СтрШаблон(
				НСтр("ru = 'Оборот по счету %1 по статьям [ВидСтатьи].
                      |Исключения - статьи, входящие в состав других показателей:
                      |[Исключения]';
                      |en = 'Оборот по счету %1 по статьям [ВидСтатьи].
                      |Исключения - статьи, входящие в состав других показателей:
                      |[Исключения]'", Процессор.КодЯзыка),
				Процессор.ДанныеАлгоритма.Счета.Группа);
			ШаблонИсключения = " * %1 - %2"; // Наименование показателя, Наименования статей
			
			ПорядокИсключений = Новый ТаблицаЗначений;
			ПорядокИсключений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Число"));
			Для Каждого ОписаниеИсключения Из ОписаниеВидаСтатей.Исключения Цикл
				ПорядокИсключений.Добавить().Показатель = ОписаниеИсключения.Ключ;
			КонецЦикла;
			ПорядокИсключений.Сортировать("Показатель");
			
			ПредложенияИсключений = Новый Массив;
			Для Каждого ИдентификаторПоказателяИсключений Из ПорядокИсключений.ВыгрузитьКолонку("Показатель") Цикл
				
				ПредставленияСтатейИсключений = ПредставлениеСпискаЗначений(ОписаниеВидаСтатей.Исключения[ИдентификаторПоказателяИсключений], Ложь);
				
				ПоказательИсключений = БухгалтерскаяОтчетностьБРО.Показатель(ИдентификаторПоказателяИсключений, Процессор.ЗаполняемыеПоказатели);
				ПредложенияИсключений.Добавить(СтрШаблон(
					ШаблонИсключения,
					ПоказательИсключений.Наименование,
					ПредставленияСтатейИсключений));
					
			КонецЦикла;
				
			СловаТекста.Вставить("Исключения", СтрСоединить(ПредложенияИсключений, Символы.ПС));
		
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(СодержимоеПоказателя) Тогда
		// Предполагается, что таких быть не должно
		ШаблонТекста = НСтр("ru = 'Порядок заполнения не определен';
							|en = 'Порядок заполнения не определен'", Процессор.КодЯзыка);
	Иначе
		
		Описание.Отчет.ОтборыПоказателя.Вставить("Статья", СодержимоеПоказателя.ВыгрузитьЗначения());
		ШаблонТекста = СтрШаблон(
			НСтр("ru = 'Оборот по счету %1 по статьям из списка:
                  |[Статьи]';
                  |en = 'Оборот по счету %1 по статьям из списка:
                  |[Статьи]'", Процессор.КодЯзыка),
			Процессор.ДанныеАлгоритма.Счета.Группа);
		
		СловаТекста.Вставить("Статьи", ПредставлениеСпискаЗначений(СодержимоеПоказателя, Истина));
		
	КонецЕсли;
	
	Текст = Новый Массив;
	Текст.Добавить(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, СловаТекста));
	Если ЭтоОсновнойПоказатель Тогда
		Текст.Добавить(НСтр("ru = 'Дополнительно включается оборот по счету 99.01 с видом убытка ""Чрезвычайные доходы (расходы)"".';
							|en = 'Дополнительно включается оборот по счету 99.01 с видом убытка ""Чрезвычайные доходы (расходы)"".'", Процессор.КодЯзыка));
	КонецЕсли;
	Если Не ПустаяСтрока(ОписаниеЗачетПоказателей) Тогда
		Текст.Добавить(ОписаниеЗачетПоказателей);
	КонецЕсли;
	
	Описание.Текст = СтрСоединить(Текст, Символы.ПС);
	
КонецПроцедуры

Функция ЗачестьПрочиеДоходыРасходы(КомпонентыЗачета, ВариантЗачета, ЗначенияПоказателя, ДанныеАлгоритма, КодЯзыка)
	
	Если ВариантЗачета = "Показатель" Тогда
		// Стандартное поведение
		Возврат Ложь;
	КонецЕсли;
	
	ПоложительноеЗначение = ЗначенияПоказателя.Значение;
	ОтрицательноеЗначение = 0;
	
	КомпонентыЗачета.Положительный.Пояснение = НСтр("ru = 'положительные значения (доход)';
													|en = 'положительные значения (доход)'",  КодЯзыка);
	КомпонентыЗачета.Отрицательный.Пояснение = НСтр("ru = 'отрицательные значения (расход)';
													|en = 'отрицательные значения (расход)'", КодЯзыка);
	
	Если ВариантЗачета = "СтатьиОбъекты" Тогда
		ДополнитьРазвернутоеЗначениеСтатьиОбъекты(ПоложительноеЗначение, ОтрицательноеЗначение, ЗначенияПоказателя);
	Иначе
		
		ДополнитьРазвернутоеЗначениеВидСчета(
			ПоложительноеЗначение,
			ОтрицательноеЗначение,
			ЗначенияПоказателя,
			ДанныеАлгоритма.Счета.Назначение);
			
		КомпонентыЗачета.Положительный.Пояснение = СтрШаблон(
			НСтр("ru = 'обороты по %1 (доход)';
				|en = 'обороты по %1 (доход)'", КодЯзыка),
			ДанныеАлгоритма.ПредставлениеСубсчетовДоходыДательныйПадеж);
		КомпонентыЗачета.Отрицательный.Пояснение = СтрШаблон(
			НСтр("ru = 'обороты по %1 (расход)';
				|en = 'обороты по %1 (расход)'", КодЯзыка),
			ДанныеАлгоритма.ПредставлениеСубсчетовРасходыДательныйПадеж);
		
	КонецЕсли;
	
	Если ПоложительноеЗначение <> 0 Тогда
		КомпонентыЗачета.Положительный.Значение  = ПоложительноеЗначение;
	КонецЕсли;

	Если ОтрицательноеЗначение <> 0 Тогда
		КомпонентыЗачета.Отрицательный.Значение  = ОтрицательноеЗначение;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьРазвернутоеЗначениеСтатьиОбъекты(ПоложительноеЗначение, ОтрицательноеЗначение, ЗначенияПоказателя)
	Если ЗначениеЗаполнено(ЗначенияПоказателя.Строки) Тогда
		Для Каждого РазвернутоеЗначение Из ЗначенияПоказателя.Строки Цикл
			ДополнитьРазвернутоеЗначениеСтатьиОбъекты(ПоложительноеЗначение, ОтрицательноеЗначение, РазвернутоеЗначение);
		КонецЦикла;
	ИначеЕсли ЗначенияПоказателя.Значение >= 0 Тогда
		Возврат;
	Иначе
		ОтрицательноеЗначение = ОтрицательноеЗначение + ЗначенияПоказателя.Значение;
		ПоложительноеЗначение = ПоложительноеЗначение - ЗначенияПоказателя.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьРазвернутоеЗначениеВидСчета(ПоложительноеЗначение, ОтрицательноеЗначение, ЗначенияПоказателя, НазначениеСчетов)
	
	Если ЗначенияПоказателя.ТипЗаписи <> "Счет" Тогда
		Для Каждого РазвернутоеЗначение Из ЗначенияПоказателя.Строки Цикл
			ДополнитьРазвернутоеЗначениеВидСчета(ПоложительноеЗначение, ОтрицательноеЗначение, РазвернутоеЗначение, НазначениеСчетов);
		КонецЦикла;
	ИначеЕсли НазначениеСчетов[ЗначенияПоказателя.ПредметЗаписи] = "Доходы" Тогда
		Возврат;
	Иначе
		ОтрицательноеЗначение = ОтрицательноеЗначение + ЗначенияПоказателя.Значение;
		ПоложительноеЗначение = ПоложительноеЗначение - ЗначенияПоказателя.Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Налоги

// Данные на счете 99 обрабатываются как этим алгоритмом, так и (в незначительной части) определяемом ИдентификаторАлгоритмаПрочиеДоходыРасходы

// В описаниях показателей с этим алгоритмом свойство Заполнение.Отбор может содержать следующие ключи:
//   * КорСчетНалога - ПланСчетовСсылка.Хозрасчетный - для показателей текущего налога
//   * ОтложенныйНалог - Булево, Истина, если речь идет о показателе отложенного налога
//   * ИтогНалогНаПрибыль - Булево, Истина, если речь идет об итоговом показателе расхода по налогу
// Предполагается, что указано одно из свойств.

Функция ИдентификаторАлгоритмаНалоги()
	
	Возврат ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль;
	
КонецФункции

Процедура ДобавитьОтборНалогНаПрибыль(Заполнение, ЗначениеОтбора)
	
	Если ЗначениеОтбора = ПланыСчетов.Хозрасчетный.ОтложенныйНалогНаПрибыль Тогда
		Заполнение.Отбор.Вставить("ОтложенныйНалог", Истина);
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(ЗначениеОтбора, ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
		Заполнение.Отбор.Вставить("КорСчетНалога", ЗначениеОтбора);
	ИначеЕсли ЗначениеОтбора = ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль Тогда
		Заполнение.Отбор.Вставить("ИтогНалогНаПрибыль", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьПоказателиНалоги(Показатели, Контекст)
	
	НачалоПериодаОтчета = Контекст.ОтчетныйПериод.Начало;
	Если Контекст.СравнительныйПериод.Заполнен Тогда
		НачалоПериодаОтчета = Контекст.СравнительныйПериод.Начало;
	КонецЕсли;
	
	Для Каждого Показатель Из Показатели Цикл
		
		КорСчетНалога = "";
		Если Не Показатель.Заполнение.Отбор.Свойство("КорСчетНалога", КорСчетНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КорСчетНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН Тогда
			Показатель.Вывод = УчетнаяПолитикаПереопределяемый.ПрименяетсяУСНЗаПериод(Контекст.Организация, НачалоПериодаОтчета, Контекст.ОтчетныйПериод.КонецДата);
		ИначеЕсли КорСчетНалога = ПланыСчетов.Хозрасчетный.ЕНПриАУСН Тогда
			Показатель.Вывод = УчетнаяПолитикаПереопределяемый.ПрименяетсяАУСН(Контекст.Организация, Контекст.ОтчетныйПериод.КонецДата)
				ИЛИ УчетнаяПолитикаПереопределяемый.ПрименяетсяАУСН(Контекст.Организация, НачалоПериодаОтчета);
		ИначеЕсли КорСчетНалога = ПланыСчетов.Хозрасчетный.НДФЛПредпринимателя Тогда
			Показатель.Вывод = Ложь; // Для ERP этот показатель всегда выключен
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеУчетаНалоги(Процессор)
	
	// Сложность этого алгоритма связана с тем, что в программе есть три разных схемы учета расхода в виде налога на прибыль -
	// сокращенная (только расход по налогу) и два варианта полной (расход по налогу раскладывается на текущий и отложенный;
	// одна схема устаревшая, со счетом 68.04.2, вторая - разработанная БМЦ с буквенными субсчетами на 99).
	
	// 1. Показатели
	Процессор.ДанныеАлгоритма.Вставить("Показатели", Новый Структура);
	Процессор.ДанныеАлгоритма.Показатели.Вставить("ИтогНалогНаПрибыль", Неопределено);
	Процессор.ДанныеАлгоритма.Показатели.Вставить("ТекущийНалог",       Процессор.ОсновнойПоказатель);
	Процессор.ДанныеАлгоритма.Показатели.Вставить("ОтложенныйНалог",    Null); // Тип Null, так как если не будет уточнен ниже, должен быть неотличим в запросе от основного показателя
	Процессор.ДанныеАлгоритма.Показатели.Вставить("ПрочиеНалоги",       Новый Соответствие);// Ключ - идентификатор, значение - счет учета обязательств по налогу
	
	ПрочиеНалоги = Новый ТаблицаЗначений;
	ПрочиеНалоги.Колонки.Добавить("Показатель",    Новый ОписаниеТипов("Число"));
	ПрочиеНалоги.Колонки.Добавить("КорСчетНалога", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Показатель Из Процессор.ПравилаПолученияДанных Цикл
		Если Не Показатель.Вывод Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторПоказателя = Показатель.Владелец().Индекс(Показатель);
		Если Показатель.Заполнение.Отбор.Свойство("КорСчетНалога") Тогда
			ОписаниеНалога = ПрочиеНалоги.Добавить();
			ОписаниеНалога.Показатель    = ИдентификаторПоказателя;
			ОписаниеНалога.КорСчетНалога = Показатель.Заполнение.Отбор.КорСчетНалога;
			Процессор.ДанныеАлгоритма.Показатели.ПрочиеНалоги.Вставить(ИдентификаторПоказателя, ОписаниеНалога.КорСчетНалога);
		ИначеЕсли Показатель.Заполнение.Отбор.Свойство("ОтложенныйНалог") И Показатель.Заполнение.Отбор.ОтложенныйНалог Тогда
			Процессор.ДанныеАлгоритма.Показатели.ОтложенныйНалог = ИдентификаторПоказателя;
		ИначеЕсли Показатель.Заполнение.Отбор.Свойство("ИтогНалогНаПрибыль") И Показатель.Заполнение.Отбор.ИтогНалогНаПрибыль Тогда
			Процессор.ДанныеАлгоритма.Показатели.ИтогНалогНаПрибыль = ИдентификаторПоказателя;
		КонецЕсли;
	КонецЦикла;
	
	
	// 2. Счета учета
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("ПолнаяСхемаУчета",       Новый Массив);
	СчетаУчета.Вставить("ОтложенныйНалог",        БалансовыеСчетаОтложенногоНалога());
	СчетаУчета.Вставить("Закрывающие",            Новый Массив);
	СчетаУчета.Вставить("СокращеннаяСхемаУчета",  Новый Массив);
	СчетаУчета.Вставить("ОбязательстваПоНалогам", Новый Массив);
	
	// Полная схема подразумевает, что выделяется текущий и отложенный налог
	СчетаУчета.ПолнаяСхемаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль);
	СчетаУчета.ПолнаяСхемаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	
	// Сокращенная схема подразумевает, что текущий и отложенный налог не выделяется
	// Поскольку используемые в этом случае счета имеют и другие назначения, обороты по ним выбираем только в корреспонденции со счетами обязательств
	СчетаУчета.СокращеннаяСхемаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
	СчетаУчета.СокращеннаяСхемаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчета.Закрывающие, СчетаУчета.ПолнаяСхемаУчета);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчета.Закрывающие, СчетаУчета.СокращеннаяСхемаУчета);
	
	СчетаУчета.ОбязательстваПоНалогам.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	
	
	Субсчета = Новый Структура;
	Для Каждого ОписаниеСчетов Из СчетаУчета Цикл
		Субсчета.Вставить(ОписаниеСчетов.Ключ, ВсеСубсчета(ОписаниеСчетов.Значение));
	КонецЦикла;
	// Устраним пересечение счетов обязательств (68.04) и счетов расходов (68.04.2)
	Субсчета.ОбязательстваПоНалогам = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Субсчета.ОбязательстваПоНалогам, Субсчета.ПолнаяСхемаУчета);
	
	ПредставленияСчетов = Новый Структура;
	
	ВсеСчета = Новый Массив;
	Для Каждого ОписаниеСчетов Из СчетаУчета Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, ОписаниеСчетов.Значение);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, Субсчета.ОбязательстваПоНалогам);

	КодыСчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеСчета, "Код");
	Для Каждого ОписаниеСчетов Из СчетаУчета Цикл
		КодыСчетовЭтогоВида = Новый Массив;
		Для Каждого Счет Из ОписаниеСчетов.Значение Цикл
			КодыСчетовЭтогоВида.Добавить(КодыСчетов[Счет]);
		КонецЦикла;
		ПредставленияСчетов.Вставить(ОписаниеСчетов.Ключ, ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(КодыСчетовЭтогоВида));
	КонецЦикла;
	
	ПредставленияСчетов.Вставить("Все", КодыСчетов);
	
	Процессор.ДанныеАлгоритма.Вставить("ПредставленияСчетов", ПредставленияСчетов);
	Процессор.ДанныеАлгоритма.Вставить("ОсновнойСчетОтчета",  СчетаУчета.ПолнаяСхемаУчета[0]);
	
	// 3. Обороты
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("ПоказательТекущийНалог",    Процессор.ДанныеАлгоритма.Показатели.ТекущийНалог);
	Запрос.УстановитьПараметр("ПоказательОтложенныйНалог", Процессор.ДанныеАлгоритма.Показатели.ОтложенныйНалог);
	Запрос.УстановитьПараметр("ПрочиеНалоги",              ПрочиеНалоги);
	Для Каждого ОписаниеСубсчетов Из Субсчета Цикл
		Запрос.УстановитьПараметр(СтрШаблон("Счета%1", ОписаниеСубсчетов.Ключ),  ОписаниеСубсчетов.Значение);
	КонецЦикла;
	
	РазъяснениеПланСчетов = НСтр(
		"ru = 'Расходы отражаются по дебету счетов учета, поэтому для расчета показателя определяется кредитовый оборот по счету за вычетом дебетового оборота.';
		|en = 'Расходы отражаются по дебету счетов учета, поэтому для расчета показателя определяется кредитовый оборот по счету за вычетом дебетового оборота.'",
		Процессор.КодЯзыка);
	Процессор.ДанныеАлгоритма.Вставить("РазъяснениеПланСчетов", РазъяснениеПланСчетов);
	
	// Расходы (дебетовый оборот) представляются в ОФР отрицательным числом
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сокращенная.Организация КАК Организация,
	|	""Сокращенная"" КАК СхемаУчета,
	|	Сокращенная.Счет КАК Счет,
	|	Сокращенная.КорСчет КАК КорСчет,
	|	ЛОЖЬ КАК ОтложенныйНалог,
	|	-Сокращенная.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ ОборотыНалоги
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаСокращеннаяСхемаУчета), , Организация В (&Организации), КорСчет В (&СчетаОбязательстваПоНалогам), ) КАК Сокращенная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Полная.Организация,
	|	""Полная"",
	|	Полная.Счет,
	|	Полная.КорСчет,
	|	Полная.КорСчет В (&СчетаОтложенныйНалог),
	|	-Полная.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаПолнаяСхемаУчета), , Организация В (&Организации), НЕ КорСчет В (&СчетаЗакрывающие), ) КАК Полная
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КорСчет,
	|	СхемаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеНалоги.Показатель КАК Показатель,
	|	ПрочиеНалоги.КорСчетНалога КАК КорСчетНалога
	|ПОМЕСТИТЬ ПрочиеНалоги
	|ИЗ
	|	&ПрочиеНалоги КАК ПрочиеНалоги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КорСчетНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОборотыНалоги.СхемаУчета = ""Сокращенная""
	|			ТОГДА ЕСТЬNULL(ПрочиеНалоги.Показатель, &ПоказательТекущийНалог)
	|		КОГДА ОборотыНалоги.ОтложенныйНалог
	|			ТОГДА &ПоказательОтложенныйНалог
	|		ИНАЧЕ &ПоказательТекущийНалог
	|	КОНЕЦ КАК Показатель,
	|	ОборотыНалоги.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ОборотыНалоги.Организация) КАК ОрганизацияПредставление,
	|	ОборотыНалоги.Организация.Наименование КАК ОрганизацияПорядок,
	|	ОборотыНалоги.Счет КАК Счет,
	|	ОборотыНалоги.КорСчет КАК КорСчет,
	|	ОборотыНалоги.Сумма КАК Значение,
	|	ОборотыНалоги.Счет.Порядок КАК СчетПорядок,
	|	ОборотыНалоги.КорСчет.Порядок КАК КорСчетПорядок,
	|	ОборотыНалоги.Счет.Код КАК СчетПредставление,
	|	ОборотыНалоги.КорСчет.Код КАК КорСчетПредставление
	|ИЗ
	|	ОборотыНалоги КАК ОборотыНалоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрочиеНалоги КАК ПрочиеНалоги
	|		ПО ОборотыНалоги.КорСчет = ПрочиеНалоги.КорСчетНалога
	|			И (ОборотыНалоги.СхемаУчета = ""Сокращенная"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПорядок,
	|	СчетПорядок,
	|	Счет,
	|	КорСчетПорядок,
	|	КорСчет
	|ИТОГИ
	|	СУММА(Значение)
	|ПО
	|	Показатель,
	|	Организация,
	|	Счет,
	|	КорСчет";
	
	Процессор.ДанныеУчета = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОписатьПорядокЗаполненияПоказателяНалоги(Описание, Показатель, ДанныеАлгоритма, КодЯзыка)
	
	Если Не Показатель.Вывод Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПоказателя = Показатель.Владелец().Индекс(Показатель);
	Если ИдентификаторПоказателя = ДанныеАлгоритма.Показатели.ИтогНалогНаПрибыль Тогда
		// См. СуммироватьЗначенияПоказателейНалоги
		Возврат;
	КонецЕсли;
	
	Описание.ШагиРасчета.Добавить(, "Счет");
	Описание.ШагиРасчета.Добавить(, "КорСчет");
	
	СчетОтчета = ДанныеАлгоритма.ОсновнойСчетОтчета;
	
	Если ИдентификаторПоказателя = ДанныеАлгоритма.Показатели.ОтложенныйНалог Тогда
		Описание.Текст = СтрШаблон(
			НСтр("ru = 'Оборот по счетам %1 в корреспонденции со счетами %2';
				|en = 'Оборот по счетам %1 в корреспонденции со счетами %2'", КодЯзыка),
			ДанныеАлгоритма.ПредставленияСчетов.ПолнаяСхемаУчета,
			ДанныеАлгоритма.ПредставленияСчетов.ОтложенныйНалог);
	Иначе
		СчетНалога = ДанныеАлгоритма.Показатели.ПрочиеНалоги[ИдентификаторПоказателя];
		Если СчетНалога <> Неопределено Тогда
			Описание.Текст = СтрШаблон(
				НСтр("ru = 'Оборот по счетам %1 в корреспонденции со счетом %2';
					|en = 'Оборот по счетам %1 в корреспонденции со счетом %2'", КодЯзыка),
				ДанныеАлгоритма.ПредставленияСчетов.СокращеннаяСхемаУчета,
				ДанныеАлгоритма.ПредставленияСчетов.Все[СчетНалога]);
			СчетОтчета = СчетНалога;
		Иначе
			ШаблонТекста = НСтр("ru = 'Оборот по счетам
                                |- %1 - в корреспонденции со счетом %2, кроме включенных в другие строки
                                |- %3, кроме
                                |  -- закрывающих оборотов
                                |  -- оборотов в корреспонденции со счетами отложенного налога (%4)';
                                |en = 'Оборот по счетам
                                |- %1 - в корреспонденции со счетом %2, кроме включенных в другие строки
                                |- %3, кроме
                                |  -- закрывающих оборотов
                                |  -- оборотов в корреспонденции со счетами отложенного налога (%4)'",
								КодЯзыка);
			Описание.Текст = СтрШаблон(
				ШаблонТекста,
				ДанныеАлгоритма.ПредставленияСчетов.СокращеннаяСхемаУчета,
				ДанныеАлгоритма.ПредставленияСчетов.ОбязательстваПоНалогам,
				ДанныеАлгоритма.ПредставленияСчетов.ПолнаяСхемаУчета,
				ДанныеАлгоритма.ПредставленияСчетов.ОтложенныйНалог);
		КонецЕсли;
	КонецЕсли;
	
	Описание.Разъяснение = ДанныеАлгоритма.РазъяснениеПланСчетов;
	
	// Отчет
	Описание.Отчет.ВидОтчета  = "АнализСчета";
	Описание.Отчет.СчетГруппа = СчетОтчета;
	
КонецПроцедуры

Процедура ОписатьЗаполняемоеЗначениеНалоги(ЗаписьРасчет, КешПредставлений, КодЯзыка)
	
	ОписатьЗаполняемоеЗначениеОборотыМеждуСчетами(ЗаписьРасчет, КешПредставлений, КодЯзыка);
	
КонецПроцедуры

Процедура ОписатьСуммирующиеПоказателиНалоги(СуммирующиеПоказатели, ДанныеАлгоритма)
	
	СуммирующиеПоказатели = Новый Соответствие;
	
	Если ДанныеАлгоритма.Показатели.ИтогНалогНаПрибыль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СлагаемыеИтогНалогНаПрибыль = Новый Массив;
	СлагаемыеИтогНалогНаПрибыль.Добавить(ДанныеАлгоритма.Показатели.ТекущийНалог);
	Если ТипЗнч(ДанныеАлгоритма.Показатели.ОтложенныйНалог) = Тип("Число") Тогда
		СлагаемыеИтогНалогНаПрибыль.Добавить(ДанныеАлгоритма.Показатели.ОтложенныйНалог);
	КонецЕсли;
	
	СуммирующиеПоказатели.Вставить(ДанныеАлгоритма.Показатели.ИтогНалогНаПрибыль, СлагаемыеИтогНалогНаПрибыль);
	
КонецПроцедуры

#КонецОбласти

#Область РезультатПереоценкиВнеоборотныхАктивов

// В описаниях показателей с этим алгоритмом свойство Заполнение.Отбор может содержать следующие ключи:
//   * Счет - ПланСчетовСсылка.Хозрасчетный - субсчет счета 83, соответствующий виду переоцениваемых объектов
//   * ОтложенныйНалог - Булево, Истина, если речь идет о показателе отложенного налога
// Предполагается, что указано одно из свойств.

Функция ИдентификаторАлгоритмаРезультатПереоценкиВнеоборотныхАктивов()
	
	// В качестве идентификатора нельзя использовать код счета,
	// так как план счетов Минфина не предусматривает динамического счета для соответствующих показателей ОФР
	Возврат "РезультатПереоценкиВнеоборотныхАктивов";
	
КонецФункции

Процедура ДобавитьОтборРезультатПереоценкиВнеоборотныхАктивов(Заполнение, ЗначениеОтбора)
	
	Если ЗначениеОтбора = "ОтложенныйНалог" Тогда
		Заполнение.Отбор.Вставить("ОтложенныйНалог", Истина);
	Иначе
		Заполнение.Отбор.Вставить("Счет", ЗначениеОтбора);
	КонецЕсли;
	
КонецПроцедуры

Функция СчетаВнеоборотныхАктивов()
	
	Перем СчетаАктивов;
	
	СчетаАктивов = Новый Массив;
	СчетаАктивов.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаАктивов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	СчетаАктивов.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	СчетаАктивов.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаАктивов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	СчетаАктивов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	СчетаАктивов.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	Возврат СчетаАктивов;

КонецФункции

Процедура ПолучитьДанныеУчетаРезультатПереоценкиВнеоборотныхАктивов(Процессор)

	// 1. Счет учета
	Процессор.ДанныеАлгоритма.Вставить("Счет",     ПланыСчетов.Хозрасчетный.ПриростСтоимостиПоПереоценке);
	Процессор.ДанныеАлгоритма.Вставить("Субсчета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Процессор.ДанныеАлгоритма.Счет));
	
	Процессор.ДанныеАлгоритма.Вставить("ОписаниеСчетов", ОписаниеСчетовУчета(Процессор.ДанныеАлгоритма.Субсчета));
	
	// 2. Показатели
	Процессор.ДанныеАлгоритма.Вставить("Показатели", Новый Структура);
	Процессор.ДанныеАлгоритма.Показатели.Вставить("ОтложенныйНалог", Null);
	Процессор.ДанныеАлгоритма.Показатели.Вставить("ВидыАктивов",     Новый Соответствие);// Ключ - идентификатор, значение - субсчет счета капитала
	
	ВидыАктивов = Новый ТаблицаЗначений;
	ВидыАктивов.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Число"));
	ВидыАктивов.Колонки.Добавить("Субсчет",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	ОтложенныйНалог = Ложь;
	Для Каждого Показатель Из Процессор.ПравилаПолученияДанных Цикл
		ИдентификаторПоказателя = Показатель.Владелец().Индекс(Показатель);
		Если Показатель.Заполнение.Отбор.Свойство("Счет", Счет) Тогда
			Если Процессор.ДанныеАлгоритма.Субсчета.Найти(Счет) <> Неопределено Тогда
				ОписаниеВидаАктивов = ВидыАктивов.Добавить();
				ОписаниеВидаАктивов.Показатель = ИдентификаторПоказателя;
				ОписаниеВидаАктивов.Субсчет    = Счет;
				Процессор.ДанныеАлгоритма.Показатели.ВидыАктивов.Вставить(ИдентификаторПоказателя, Счет);
			КонецЕсли;
		ИначеЕсли Показатель.Заполнение.Отбор.Свойство("ОтложенныйНалог", ОтложенныйНалог) И ОтложенныйНалог Тогда
			Процессор.ДанныеАлгоритма.Показатели.ОтложенныйНалог = ИдентификаторПоказателя;
		КонецЕсли;
	КонецЦикла;
	
	// 3. Счета прочих видов активов
	ОписаниеСчетовПрочие = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(Процессор.ДанныеАлгоритма.ОписаниеСчетов);
	СчетаГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОписаниеСчетовПрочие.ВыгрузитьЗначения(), "ЗапретитьИспользоватьВПроводках");
	Для Каждого СчетГруппа Из СчетаГруппы Цикл
		Если СчетГруппа.Значение = Истина Тогда
			УдалитьЗначенияИзСписка(ОписаниеСчетовПрочие, СчетГруппа.Ключ);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ОписаниеВидаАктивов Из ВидыАктивов Цикл
		УдалитьЗначенияИзСписка(ОписаниеСчетовПрочие, ОписаниеВидаАктивов.Субсчет);
	КонецЦикла;
	
	ПредставлениеСубсчетовПрочие = ПредставлениеСпискаСчетов(ОписаниеСчетовПрочие);
	Если ПредставлениеСубсчетовПрочие.Количество = 1 Тогда
		ШаблонСчетовПрочие = НСтр("ru = 'субсчету %1';
									|en = 'субсчету %1'", Процессор.КодЯзыка);
	Иначе
		ШаблонСчетовПрочие = НСтр("ru = 'субсчетам %1';
									|en = 'субсчетам %1'", Процессор.КодЯзыка);
	КонецЕсли;
		
	Процессор.ДанныеАлгоритма.Вставить("СубсчетаПрочие", ОписаниеСчетовПрочие.ВыгрузитьЗначения());
	Процессор.ДанныеАлгоритма.Вставить("ПредставлениеСубсчетовПрочие", СтрШаблон(ШаблонСчетовПрочие, ПредставлениеСубсчетовПрочие.Текст));
	
	// 4. Кор.счета

	Процессор.ДанныеАлгоритма.Вставить("СчетаАктивов", СчетаВнеоборотныхАктивов());
	Процессор.ДанныеАлгоритма.Вставить("ПредставлениеСчетовАктивов", ПредставлениеСчетовГрупп(Процессор.ДанныеАлгоритма.СчетаАктивов));
	
	СчетаОтложенногоНалога = БалансовыеСчетаОтложенногоНалога();
	Процессор.ДанныеАлгоритма.Вставить("СчетаОтложенногоНалога",               ВсеСубсчета(СчетаОтложенногоНалога));
	Процессор.ДанныеАлгоритма.Вставить("ПредставлениеСчетовОтложенногоНалога", ПредставлениеСчетовГрупп(СчетаОтложенногоНалога));
		
	// 5. Обороты
	КорСчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчета, Процессор.ДанныеАлгоритма.СчетаАктивов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчета, Процессор.ДанныеАлгоритма.СчетаОтложенногоНалога);
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("Субсчета",                  Процессор.ДанныеАлгоритма.Субсчета);
	Запрос.УстановитьПараметр("ПоказательОтложенныйНалог", Процессор.ДанныеАлгоритма.Показатели.ОтложенныйНалог);
	Запрос.УстановитьПараметр("СчетаОтложенногоНалога",    Процессор.ДанныеАлгоритма.СчетаОтложенногоНалога);
	Запрос.УстановитьПараметр("ВидыАктивов",               ВидыАктивов);
	Запрос.УстановитьПараметр("КорСчета",                  ВсеСубсчета(КорСчета));
	
	РазъяснениеПланСчетов = НСтр(
		"ru = 'Увеличение капитала отражается по кредиту счетов капитала, поэтому определяется кредитовый оборот по счету за вычетом дебетового оборота.';
		|en = 'Увеличение капитала отражается по кредиту счетов капитала, поэтому определяется кредитовый оборот по счету за вычетом дебетового оборота.'",
		Процессор.КодЯзыка);
	Процессор.ДанныеАлгоритма.Вставить("РазъяснениеПланСчетов", РазъяснениеПланСчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Обороты.Организация КАК Организация,
	|	Обороты.Счет КАК Счет,
	|	Обороты.КорСчет КАК КорСчет,
	|	-Обороты.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ ОборотыПереоценкаВнеоборотныхАктивов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&Субсчета), , Организация В (&Организации), КорСчет В (&КорСчета), ) КАК Обороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыАктивов.Показатель КАК Показатель,
	|	ВидыАктивов.Субсчет КАК Субсчет
	|ПОМЕСТИТЬ ВидыАктивов
	|ИЗ
	|	&ВидыАктивов КАК ВидыАктивов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Обороты.КорСчет В (&СчетаОтложенногоНалога)
	|			ТОГДА &ПоказательОтложенныйНалог
	|		ИНАЧЕ ВидыАктивов.Показатель
	|	КОНЕЦ КАК Показатель,
	|	Обороты.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Обороты.Организация) КАК ОрганизацияПредставление,
	|	Обороты.Организация.Наименование КАК ОрганизацияПорядок,
	|	Обороты.Счет КАК Счет,
	|	Обороты.КорСчет КАК КорСчет,
	|	Обороты.Сумма КАК Значение,
	|	Обороты.Счет.Порядок КАК СчетПорядок,
	|	Обороты.КорСчет.Порядок КАК КорСчетПорядок,
	|	Обороты.Счет.Код КАК СчетПредставление,
	|	Обороты.КорСчет.Код КАК КорСчетПредставление
	|ИЗ
	|	ОборотыПереоценкаВнеоборотныхАктивов КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыАктивов КАК ВидыАктивов
	|		ПО Обороты.Счет = ВидыАктивов.Субсчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПорядок,
	|	СчетПорядок,
	|	Счет,
	|	КорСчетПорядок,
	|	КорСчет
	|ИТОГИ
	|	СУММА(Значение)
	|ПО
	|	Показатель,
	|	Организация,
	|	Счет,
	|	КорСчет";
	
	Процессор.ДанныеУчета = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОписатьПорядокЗаполненияПоказателяРезультатПереоценкиВнеоборотныхАктивов(Описание, Показатель, ДанныеАлгоритма, КодЯзыка)
	
	Описание.ШагиРасчета.Добавить(, "Счет");
	Описание.ШагиРасчета.Добавить(, "КорСчет");
	
	СчетОтчета = ДанныеАлгоритма.Счет;
	ОтборСчетов = Неопределено;
	
	ИдентификаторПоказателя = Показатель.Владелец().Индекс(Показатель);
	Если ИдентификаторПоказателя = ДанныеАлгоритма.Показатели.ОтложенныйНалог Тогда
		Описание.Текст = СтрШаблон(
			НСтр("ru = 'Оборот по счету %1 в корреспонденции со счетами отложенного налога (%2)';
				|en = 'Оборот по счету %1 в корреспонденции со счетами отложенного налога (%2)'", КодЯзыка),
			ДанныеАлгоритма.Счет,
			ДанныеАлгоритма.ПредставлениеСчетовОтложенногоНалога);
	Иначе
		Субсчет = ДанныеАлгоритма.Показатели.ВидыАктивов[ИдентификаторПоказателя];
		Если Субсчет <> Неопределено Тогда
			Описание.Текст = СтрШаблон(
				НСтр("ru = 'Оборот по счету %1 в корреспонденции со счетами внеоборотных активов (%2)';
					|en = 'Оборот по счету %1 в корреспонденции со счетами внеоборотных активов (%2)'", КодЯзыка),
				Субсчет,
				ДанныеАлгоритма.ПредставлениеСчетовАктивов);
			СчетОтчета = Субсчет;
		Иначе
			Описание.Текст = СтрШаблон(
				НСтр("ru = 'Оборот по %1 в корреспонденции со счетами внеоборотных активов (%2)';
					|en = 'Оборот по %1 в корреспонденции со счетами внеоборотных активов (%2)'", КодЯзыка),
				ДанныеАлгоритма.ПредставлениеСубсчетовПрочие,
				ДанныеАлгоритма.ПредставлениеСчетовАктивов);
			Если ДанныеАлгоритма.СубсчетаПрочие.Количество() = 1 Тогда
				СчетОтчета = ДанныеАлгоритма.СубсчетаПрочие[0];
			Иначе
				ОтборСчетов = ДанныеАлгоритма.СубсчетаПрочие;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Описание.Разъяснение = ДанныеАлгоритма.РазъяснениеПланСчетов;
	
	// Отчет
	Описание.Отчет.ВидОтчета  = "АнализСчета";
	Описание.Отчет.СчетГруппа = СчетОтчета;
	Если ОтборСчетов <> Неопределено Тогда
		Описание.Отчет.Субсчета = ОтборСчетов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписатьЗаполняемоеЗначениеРезультатПереоценкиВнеоборотныхАктивов(ЗаписьРасчет, КешПредставлений, КодЯзыка)
	
	ОписатьЗаполняемоеЗначениеОборотыМеждуСчетами(ЗаписьРасчет, КешПредставлений, КодЯзыка);
	
КонецПроцедуры

#КонецОбласти

#Область ДенежныеСредства

// При реализации баланса этот код предполагается унифицировать

Функция ИдентификаторАлгоритмаДенежныеСредства()
	Возврат "ДенежныеСредства";
КонецФункции

Функция ПредопределенныеСчетаДенег(ДанныеАлгоритма)
	
	СчетаДенег = Новый Массив;
	
	Если ДанныеАлгоритма.ПереопределяемыеСчета <> Неопределено Тогда
		СчетаДенег = ДанныеАлгоритма.ПереопределяемыеСчета;
	Иначе
		СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.Касса);
		СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
		СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
		СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
	КонецЕсли;
	
	Возврат СчетаДенег;
	
КонецФункции

Функция ПредопределенныеСчетаДенежныхИнструментов()
	
	// Активы, учитываемые на счетах денег, но не относящиеся к денежным эквивалентам
	// (недостаточно высоколиквидные, имеющие законодательные ограничения и т.п.)
	
	СчетаДенег = Новый Массив;
	
	СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);
	СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);
	СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчета);
	СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал);
	
	Возврат СчетаДенег;
	
КонецФункции

Функция ПредопределенныеСчетаОбменВалют()
	
	СчетаДенег = Новый Массив;
	
	СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
	СчетаДенег.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
	
	Возврат СчетаДенег;
	
КонецФункции

Процедура УстановитьСчетаДенежныеСредства(ДанныеАлгоритма)
	
	ДанныеАлгоритма.Вставить("Счета", Новый Структура);
	ДанныеАлгоритма.Счета.Вставить("Описание",         Новый СписокЗначений);
	ДанныеАлгоритма.Счета.Вставить("Деньги",           Новый Массив);
	ДанныеАлгоритма.Счета.Вставить("ДеньгиСводно",     Новый Массив);
	ДанныеАлгоритма.Счета.Вставить("ДеньгиДетально",   Новый Массив);
	ДанныеАлгоритма.Счета.Вставить("ДеньгиОбменВалют", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаДенег",                ПредопределенныеСчетаДенег(ДанныеАлгоритма));
	Запрос.УстановитьПараметр("СчетаДенежныхИнструментов", ПредопределенныеСчетаДенежныхИнструментов());
	Запрос.УстановитьПараметр("СчетаОбменВалют",           ПредопределенныеСчетаОбменВалют());
	Запрос.УстановитьПараметр("МультивалютныйУчет",        БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка,
	|	Хозрасчетный.Представление КАК Представление,
	|	Хозрасчетный.Порядок КАК Порядок,
	|	НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|		И (&МультивалютныйУчет
	|			ИЛИ НЕ Хозрасчетный.Валютный) КАК Активный,
	|	&МультивалютныйУчет
	|		И Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаОбменВалют) КАК ВалютноОбменный
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаДенег)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаДенежныхИнструментов)
	|	И НЕ Хозрасчетный.Забалансовый
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеАлгоритма.Счета.Описание.Добавить(Выборка.Ссылка, Выборка.Представление, Выборка.Активный);
		Если Выборка.ВалютноОбменный Тогда
			ДанныеАлгоритма.Счета.ДеньгиОбменВалют.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеАлгоритма.Счета.Деньги = ДанныеАлгоритма.Счета.Описание.ВыгрузитьЗначения();
	
	Аналитика = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	ДанныеАлгоритма.Счета.ДеньгиДетально = СчетаПрименяетсяАналитика(ДанныеАлгоритма.Счета.Деньги, Аналитика);
	
	ДанныеАлгоритма.Счета.ДеньгиСводно = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
	ДанныеАлгоритма.Счета.Деньги,
	ДанныеАлгоритма.Счета.ДеньгиДетально);

КонецПроцедуры

Процедура ПолучитьДанныеУчетаДенежныеСредства(Процессор)
	
	УстановитьСчетаДенежныеСредства(Процессор.ДанныеАлгоритма);
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("СчетаДенег",  Процессор.ДанныеАлгоритма.Счета.Деньги);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачальноеСальдо.Счет КАК Счет,
	|	НачальноеСальдо.Организация КАК Организация,
	|	НачальноеСальдо.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ ВТ_Деньги
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаДенег), , Организация В (&Организации)) КАК НачальноеСальдо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	NULL КАК Показатель,
	|	Деньги.Счет КАК Счет,
	|	Деньги.Счет.Порядок КАК ПорядокСчета,
	|	Деньги.Счет.Код КАК СчетПредставление,
	|	Деньги.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Деньги.Организация) КАК ОрганизацияПредставление,
	|	Деньги.Сумма КАК Значение
	|ИЗ
	|	ВТ_Деньги КАК Деньги
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСчета,
	|	Счет,
	|	Организация
	|ИТОГИ
	|	СУММА(Значение)
	|ПО
	|	Показатель,
	|	Организация,
	|	Счет";
	
	Процессор.ДанныеУчета = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОписатьПорядокЗаполненияПоказателяДенежныеСредства(Описание, Показатель, ДанныеАлгоритма, КодЯзыка)
	
	Описание.ШагиРасчета.Добавить(ДанныеАлгоритма.Счета.Описание, "Счет");
	
	Описание.Текст = НСтр("ru = 'Сальдо по счетам денежных средств и денежных эквивалентов, перечисленных ниже.';
							|en = 'Сальдо по счетам денежных средств и денежных эквивалентов, перечисленных ниже.'", КодЯзыка);
	Описание.Отчет.ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
	
КонецПроцедуры

#КонецОбласти

#Область ДенежныеПотоки // См. ПБУ 23, IAS 7

// В описаниях показателей с этим алгоритмом свойство Заполнение.Отбор может содержать следующие ключи:
//   * ВидСтатьи - Массив Из ПеречислениеСсылка.СтатьиДвиженияДенежныхСредств
//   * Свернутый - Строка, имя свернутого потока; см. УстановитьСворачиваемыйДенежныйПоток и ДобавитьПоказательСвернутогоДенежногоПотока;
//                 Перечень сворачиваемых потоков определяется в СоздатьКорректировкиДенежныхПотоков и ПредставленияСворачиваемыхДенежныхПотоков
//   * РаспределениеИсточник - строка, имя распределенного потока; см. РаспределитьДенежныйПоток
//   * РаспределениеПриемник - КлючИЗначение, где Ключ - имя распределенного потока, Значение - Массив значений отбора
//                             (для потока "ЕНС" - из СправочникСсылка.ВидыНалоговИПлатежейВБюджет или ПеречислениеСсылка.ВидыНалогов);
//                             см. ДобавитьПоказательРаспределенногоДенежногоПотока
// Предполагается, что указан один ключ.

Функция ИдентификаторАлгоритмаДенежныеПотоки()
	Возврат "ДенежныеПотоки";
КонецФункции

#Область ОписаниеПоказателей

// Здесь Процессор - это ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйПроцессорОписанияЗаполняемыеПоказатели

Процедура ИнициализироватьЗаполнениеПоказателяДенежныеПотоки(НастройкиАлгоритма)
	
	// Определяет суммы, представляемые на нетто-основе (IAS 7.22, п. 16 ПБУ 23).
	// Например, организация получает НДС от покупателей в составе их платежей,
	// и уплачивает НДС поставщикам (в составе платежей им) и в бюджет (для простоты - разницу).
	// В отчете мы показываем поступления от покупателей и платежи поставщикам без НДС.
	// Сооответственно, корректируем и платежи в бюджет (размещаем сальдированное значение поступления НДС от покупателей и платежей НДС поставщикам).
	// В результате отражаемая на нетто-основе сумма платежа в бюджет будет околонулевой
	// (в частном случае за счет некоторых налоговых правил может оказаться ненулевой).
	//
	// Ключ - имя сворачиваемого потока (см. ПредставленияСворачиваемыхДенежныхПотоков); Значение - Неопределено
	НастройкиАлгоритма.Вставить("Сворачиваемые", Новый Структура);
	
КонецПроцедуры

Процедура ДобавитьСворачиваемыйДенежныйПоток(Процессор, ИмяСворачиваемогоПотока)
	
	Если Процессор.КонтекстЗаполнения.Группа = Неопределено И Процессор.КонтекстЗаполнения.Алгоритм <> Неопределено Тогда
		
		Если Процессор.КонтекстЗаполнения.ОбщиеСвойстваАлгоритма.Свойство("СворачиваемыеПотоки") Тогда
			СворачиваемыеПотоки = Процессор.КонтекстЗаполнения.ОбщиеСвойстваАлгоритма.СворачиваемыеПотоки;
		Иначе
			СворачиваемыеПотоки = Новый Структура;
			Процессор.КонтекстЗаполнения.ОбщиеСвойстваАлгоритма.Вставить("СворачиваемыеПотоки", СворачиваемыеПотоки);
		КонецЕсли;
		
		СворачиваемыеПотоки.Вставить(ИмяСворачиваемогоПотока); // См. УстановитьОбщийСворачиваемыйДенежныйПоток
		
	ИначеЕсли Процессор.КонтекстЗаполнения.Показатель <> Неопределено Тогда
		
		УстановитьСворачиваемыйДенежныйПоток(
			Процессор.КонтекстЗаполнения.Показатель.Заполнение.НастройкиАлгоритма,
			ИмяСворачиваемогоПотока);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОбщийСворачиваемыйДенежныйПоток(Заполнение, Алгоритм, ОбщиеСвойстваАлгоритма)
	
	Если Не ЭтоАлгоритмДенежныхПотоков(Алгоритм) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщиеСвойстваАлгоритма.Свойство("СворачиваемыеПотоки") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеСворачиваемогоПотока Из ОбщиеСвойстваАлгоритма.СворачиваемыеПотоки Цикл
		УстановитьСворачиваемыйДенежныйПоток(Заполнение.НастройкиАлгоритма, ОписаниеСворачиваемогоПотока.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСворачиваемыйДенежныйПоток(НастройкиАлгоритма, ИмяСворачиваемогоПотока)
	
	НастройкиАлгоритма.Сворачиваемые.Вставить(ИмяСворачиваемогоПотока);
	
КонецПроцедуры

Процедура ОграничитьСворачиваемыйДенежныйПоток(Процессор, ИмяСворачиваемогоПотока)
	
	Процессор.КонтекстЗаполнения.Показатель.Заполнение.НастройкиАлгоритма.Сворачиваемые.Удалить(ИмяСворачиваемогоПотока);
	
КонецПроцедуры

Процедура ДобавитьПоказательСвернутогоДенежногоПотока(Процессор, ИмяСворачиваемогоПотока, НаименованиеПоказателя)
	
	Показатель = ДобавитьПоказатель(Процессор, НаименованиеПоказателя);
	ДобавитьОтборДенежныеПотоки(Показатель.Заполнение, Новый Структура("Свернутый", ИмяСворачиваемогоПотока));
	
КонецПроцедуры

Процедура ДобавитьПоказательРаспределенногоДенежногоПотока(Процессор, ИмяРаспределенногоПотока, Отбор, НаименованиеПоказателя)
	
	Показатель = ДобавитьПоказатель(Процессор, НаименованиеПоказателя);
	
	ОписаниеРаспределения = НовыйКлючИЗначение(ИмяРаспределенногоПотока, Отбор);
	
	ДобавитьОтборДенежныеПотоки(Показатель.Заполнение, Новый Структура("РаспределениеПриемник", ОписаниеРаспределения));
	
КонецПроцедуры

Процедура РаспределитьДенежныйПоток(Процессор, ИмяРаспределенногоПотока, НаименованиеПоказателя)
	
	Показатель = ДобавитьПоказатель(Процессор, НаименованиеПоказателя);
	ДобавитьОтборДенежныеПотоки(Показатель.Заполнение, Новый Структура("РаспределениеИсточник", ИмяРаспределенногоПотока));
	
КонецПроцедуры

Функция НовыйКлючИЗначение(Ключ, Значение)
	
	Фабрика = Новый Структура;
	Фабрика.Вставить(Ключ, Значение);
	Для Каждого КлючИЗначение Из Фабрика Цикл
		Возврат КлючИЗначение;
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьОтборДенежныеПотоки(Заполнение, ЗначениеОтбора)
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Структура") Тогда
		
		ДопустимыеСвойства = СтрРазделить("Свернутый,РаспределениеПриемник,РаспределениеИсточник", ",");
		Для Каждого ИмяСвойства Из ДопустимыеСвойства Цикл
			Если ЗначениеОтбора.Свойство(ИмяСвойства) Тогда
				Заполнение.Отбор.Вставить(ИмяСвойства, ЗначениеОтбора[ИмяСвойства]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("ПеречислениеСсылка.ВидыДвиженийДенежныхСредств") Тогда
	
		ИмяСвойства = "ВидСтатьи";
		
		Если Заполнение.Отбор.Свойство(ИмяСвойства) Тогда
			ЗначенияОтбора = Заполнение.Отбор[ИмяСвойства];
		Иначе
			ЗначенияОтбора = Новый Массив;
			Заполнение.Отбор.Вставить(ИмяСвойства, ЗначенияОтбора);
		КонецЕсли;
		
		ЗначенияОтбора.Добавить(ЗначениеОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПотокиЕдиногоНалоговогоСчета

Функция НалоговыеПлатежиНДФЛОплатыТруда()
	
	// Одинаковый элемент Перечисления.ВидыНалогов.НДФЛ для удобства используется для всего агентского НДФЛ -
	// как связанного с выплатами сотрудникам, так и нет (см. дивиденды).
	// Поэтому здесь не получится опираться на него, нужно опираться на некие "коды".
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.НалоговыеПлатежиНДФЛОплатыТруда();
	
КонецФункции

Функция НалоговыеПлатежиНДФЛДивидендов()

	// Одинаковый элемент Перечисления.ВидыНалогов.НДФЛ для удобства используется для всего агентского НДФЛ -
	// как связанного дивидендами, так и с выплатами сотрудникам.
	// Поэтому здесь не получится опираться на него, нужно опираться на некие "коды".
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.НалоговыеПлатежиНДФЛДивиденды();
	
КонецФункции

#КонецОбласти

Процедура СоздатьКлассифицируемыеОбъектыДенежныхПотоков(МенеджерВременныхТаблиц, Показатели)
	
	// Создаваемые таблицы - полные, то есть, содержат все классифицируемые объекты, в том числе, не участвующие в настройках получения данных.
	
	ВидыСтатей = Новый ТаблицаЗначений;
	ВидыСтатей.Колонки.Добавить("ВидСтатьи",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийДенежныхСредств"));
	ВидыСтатей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("Число"));
	
	Для Каждого ОписаниеПоказателя Из Показатели Цикл
		
		ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(ОписаниеПоказателя);
		Если ОписаниеПоказателя.Заполнение.Отбор.Свойство("ВидСтатьи") Тогда
			Для Каждого ВидСтатьи Из ОписаниеПоказателя.Заполнение.Отбор.ВидСтатьи Цикл
				НовыйЭлемент = ВидыСтатей.Добавить();
				НовыйЭлемент.ВидСтатьи  = ВидСтатьи;
				НовыйЭлемент.Показатель = ИдентификаторПоказателя;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидыСтатей", ВидыСтатей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыСтатей.ВидСтатьи КАК ВидСтатьи,
	|	ВидыСтатей.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_ВидыСтатейНастройки
	|ИЗ
	|	&ВидыСтатей КАК ВидыСтатей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСтатьи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСтатьи.Ссылка КАК Статья,
	|	ВсеСтатьи.ВидДвиженияДенежныхСредств КАК ВидСтатьи,
	|	МАКСИМУМ(ВидыСтатейНастройки.Показатель) КАК Показатель
	|ПОМЕСТИТЬ Статьи
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК ВсеСтатьи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыСтатейНастройки КАК ВидыСтатейНастройки
	|		ПО ВсеСтатьи.ВидДвиженияДенежныхСредств = ВидыСтатейНастройки.ВидСтатьи
	|ГДЕ
	|	НЕ ВсеСтатьи.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСтатьи.Ссылка,
	|	ВсеСтатьи.ВидДвиженияДенежныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВидыСтатейНастройки";
	
	Запрос.Выполнить();

КонецПроцедуры

#Область ДанныеУчета

Процедура ПолучитьДанныеУчетаДенежныеПотоки(Процессор)
	
	УстановитьСчетаДенежныеСредства(Процессор.ДанныеАлгоритма);
	СоздатьДенежныеПотоки(Процессор);
	
	// Полученные данные корректируются:
	// - некоторые потоки показываются свернуто
	// - поток платежей через ЕНС - развернуто
	СоздатьКорректировкиДенежныхПотоков(Процессор);
	
	Процессор.ДанныеАлгоритма.Вставить(
		"ПредставленияСворачиваемыхДенежныхПотоков",
		ПредставленияСворачиваемыхДенежныхПотоков(Процессор.КодЯзыка));
		
	Запрос = НачатьЗапрос(Процессор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статьи.Показатель КАК Показатель,
	|	Потоки.Статья КАК Статья,
	|	ВЫРАЗИТЬ(Потоки.Счет КАК ПланСчетов.Хозрасчетный) КАК Счет,
	|	Потоки.Организация КАК Организация,
	|	"""" КАК ВидКорректировки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПустаяСсылка) КАК ВидНалога,
	|	Потоки.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ДенежныеПотокиСкорректированные
	|ИЗ
	|	ДенежныеПотоки КАК Потоки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Статьи КАК Статьи
	|		ПО Потоки.Статья = Статьи.Статья
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Корректировки.ПоказательИсточник,
	|	Корректировки.Статья,
	|	Корректировки.Счет,
	|	Корректировки.Организация,
	|	Корректировки.Вид,
	|	Корректировки.ВидНалога,
	|	-Корректировки.Сумма
	|ИЗ
	|	КорректировкиДенежныхПотоков КАК Корректировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Корректировки.ПоказательПриемник,
	|	Корректировки.Статья,
	|	Корректировки.Счет,
	|	Корректировки.Организация,
	|	Корректировки.Вид,
	|	Корректировки.ВидНалога,
	|	Корректировки.Сумма
	|ИЗ
	|	КорректировкиДенежныхПотоков КАК Корректировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Потоки.Показатель КАК Показатель,
	|	Потоки.Статья КАК Статья,
	|	ПРЕДСТАВЛЕНИЕ(Потоки.Статья) КАК СтатьяПредставление,
	|	Потоки.Счет КАК Счет,
	|	Потоки.Счет.Порядок КАК ПорядокСчета,
	|	Потоки.Счет.Код КАК СчетПредставление,
	|	Потоки.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Потоки.Организация) КАК ОрганизацияПредставление,
	|	Потоки.ВидКорректировки КАК ВидКорректировки,
	|	Потоки.ВидНалога КАК ВидНалога,
	|	ПРЕДСТАВЛЕНИЕ(Потоки.ВидНалога) КАК ВидНалогаПредставление,
	|	Потоки.Сумма КАК Значение
	|ИЗ
	|	ВТ_ДенежныеПотокиСкорректированные КАК Потоки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатель,
	|	ПорядокСчета,
	|	Счет,
	|	Статья,
	|	ВидКорректировки,
	|	ВидНалога
	|ИТОГИ
	|	СУММА(Значение)
	|ПО
	|	Показатель,
	|	Организация,
	|	Счет,
	|	Статья,
	|	ВидКорректировки,
	|	ВидНалога";
	
	Процессор.ДанныеУчета = Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьДенежныеПотоки(Процессор)
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("СчетаДенег",         Процессор.ДанныеАлгоритма.Счета.Деньги);
	Запрос.УстановитьПараметр("СчетаДенегДетально", Процессор.ДанныеАлгоритма.Счета.ДеньгиДетально);
	Запрос.УстановитьПараметр("СчетаДенегСводно",   Процессор.ДанныеАлгоритма.Счета.ДеньгиСводно);
	// Аналогичный запрос повторяется в методах получения корректирующих потоков (СоздатьДенежныеПотокиОбменВалют, СоздатьДенежныеПотокиКурсовыеРазницы)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетПоСтатьям.Организация КАК Организация,
	|	УчетПоСтатьям.Счет КАК Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(УчетПоСтатьям.Субконто1 КАК Справочник.СтатьиДвиженияДенежныхСредств), ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) КАК Статья,
	|	УчетПоСтатьям.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ ДенежныеПотоки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаДенегДетально), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств), Организация В (&Организации), НЕ КорСчет В (&СчетаДенег), ) КАК УчетПоСтатьям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетПоСтатьям.Организация КАК Организация,
	|	УчетПоСтатьям.Счет КАК Счет,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента) КАК Статья,
	|	УчетПоСтатьям.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДоговорыЭквайринга), Организация В (&Организации), НЕ КорСчет В (&СчетаДенег), ) КАК УчетПоСтатьям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетБезСтатей.Организация,
	|	УчетБезСтатей.Счет,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка),
	|	УчетБезСтатей.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаДенегСводно) И НЕ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)), , Организация В (&Организации), НЕ КорСчет В (&СчетаДенег), ) КАК УчетБезСтатей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья";
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьДенежныеПотокиКонтрагентов(Процессор)
	
	// Особенность - что берем данные из табличных частей.
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("СчетаДенег",    Процессор.ДанныеАлгоритма.Счета.Деньги);
	Запрос.УстановитьПараметр("ВалютаРегУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Процессор.Контекст.Организации[0]));
	
	ОперацииСписания = Новый Массив;
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);

	Запрос.УстановитьПараметр("ОперацииСписания", ОперацииСписания);

	// В потоках НДС не учитываем агентский НДС, чтобы избежать двойного счета.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДенежныеПотоки.Организация КАК Организация,
	|	ДенежныеПотоки.Статья,
	|	ДенежныеПотоки.Счет,
	|	СУММА(ДенежныеПотоки.НДС) КАК НДС,
	|	СУММА(ДенежныеПотоки.АгентПокупателя) КАК АгентПокупателя,
	|	СУММА(ДенежныеПотоки.АгентПокупателя) КАК АгентПродавца
	|ПОМЕСТИТЬ ВТ_ДенежныеПотоки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.Регистратор,
	|		ДанныеРегистра.СтатьяДвиженияДенежныхСредств КАК Статья,
	|		ВЫБОР
	|			КОГДА НЕ ПорядокОтраженияДенежныхСредств.СчетУчета ЕСТЬ NULL
	|				ТОГДА ПорядокОтраженияДенежныхСредств.СчетУчета
	|			КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.КассыККМ)
	|				ТОГДА ВЫБОР
	|					КОГДА ДанныеРегистра.ВалютаПлатежа = &ВалютаРегУчета
	|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
	|				КОНЕЦ
	|		КОНЕЦ КАК Счет,
	|		ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииСписания) ТОГДА -1 ИНАЧЕ 1 КОНЕЦ
	|			* ДанныеРегистра.СуммаНДСРеглОборот КАК НДС,
	|		ВЫБОР КОГДА ДанныеРегистра.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
	|				И ДанныеРегистра.ОбъектРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И (ОбъектРасчетов.Объект.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером)
	|					ИЛИ (ОбъектРасчетов.Объект.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомитентомНаЗакупку)
	|					И ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности)))
	|			ТОГДА ДанныеРегистра.СуммаОплатыРеглОборот - ДанныеРегистра.СуммаНДСРеглОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК АгентПокупателя,
	|		ВЫБОР КОГДА ДанныеРегистра.ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
	|				И ДанныеРегистра.ОбъектРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ОбъектРасчетов.Объект.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомитентом)
	|			ТОГДА -(ДанныеРегистра.СуммаОплатыРеглОборот - ДанныеРегистра.СуммаНДСРеглОборот)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК АгентПродавца
	|	ИЗ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(&НачалоПериода, &КонецПериодаДата, Регистратор,
	|			Организация В (&Организации)) КАК ДанныеРегистра
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияДенежныхСредств
	|			ПО ПорядокОтраженияДенежныхСредств.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПродажиПоЭквайрингу))
	|			И ПорядокОтраженияДенежныхСредств.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И ПорядокОтраженияДенежныхСредств.АналитикаУчета = ДанныеРегистра.ДенежныеСредства
	|			И ПорядокОтраженияДенежныхСредств.МестоУчета = НЕОПРЕДЕЛЕНО
	|	ГДЕ
	|		НЕ ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ NULL
	|		И ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.Регистратор,
	|		ДанныеРегистра.СтатьяДвиженияДенежныхСредств КАК Статья,
	|		ЕСТЬNULL(ПорядокОтраженияДенежныхСредств.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК Счет,
	|		ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииСписания) ТОГДА -1 ИНАЧЕ 1 КОНЕЦ
	|			* ДанныеРегистра.СуммаНДСРеглОборот КАК НДС,
	|		0 КАК АгентПокупателя,
	|		0 КАК АгентПродавца
	|	ИЗ
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(&НачалоПериода, &КонецПериодаДата, Регистратор,
	|			Организация В (&Организации)) КАК ДанныеРегистра
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияДенежныхСредств
	|			ПО ПорядокОтраженияДенежныхСредств.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПродажиПоЭквайрингу))
	|			И ПорядокОтраженияДенежныхСредств.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И ПорядокОтраженияДенежныхСредств.АналитикаУчета = ДанныеРегистра.ДенежныеСредства
	|			И ПорядокОтраженияДенежныхСредств.МестоУчета = НЕОПРЕДЕЛЕНО
	|	ГДЕ
	|		НЕ ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ NULL
	|		И
	|			ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)) КАК
	|		ДенежныеПотоки
	|ГДЕ
	|	ДенежныеПотоки.Счет В (&СчетаДенег)
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеПотоки.Организация,
	|	ДенежныеПотоки.Статья,
	|	ДенежныеПотоки.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""НДС"" КАК Вид,
	|	Потоки.Организация КАК Организация,
	|	Потоки.Счет КАК Счет,
	|	Потоки.Статья КАК Статья,
	|	Потоки.НДС КАК Сумма
	|ПОМЕСТИТЬ ДенежныеПотокиКонтрагентов
	|ИЗ
	|	ВТ_ДенежныеПотоки КАК Потоки
	|ГДЕ
	|	Потоки.НДС <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""АгентПокупателя"",
	|	Потоки.Организация КАК Организация,
	|	Потоки.Счет,
	|	Потоки.Статья,
	|	Потоки.АгентПокупателя
	|ИЗ
	|	ВТ_ДенежныеПотоки КАК Потоки
	|ГДЕ
	|	Потоки.АгентПокупателя <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""АгентПродавца"",
	|	Потоки.Организация КАК Организация,
	|	Потоки.Счет,
	|	Потоки.Статья,
	|	Потоки.АгентПродавца
	|ИЗ
	|	ВТ_ДенежныеПотоки КАК Потоки
	|ГДЕ
	|	Потоки.АгентПродавца <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДенежныеПотоки";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить()
	
КонецПроцедуры

Процедура СоздатьДенежныеПотокиЕНС(Процессор)
	
	ДенежныеПотокиЕНС = Новый ТаблицаЗначений;
	ДенежныеПотокиЕНС.Колонки.Добавить("Показатель",                  Новый ОписаниеТипов("Число"));
	ДенежныеПотокиЕНС.Колонки.Добавить("Организация",                 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДенежныеПотокиЕНС.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ДенежныеПотокиЕНС.Колонки.Добавить("ВидНалога",                   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	ДенежныеПотокиЕНС.Колонки.Добавить("Сумма",                       БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	ОпределитьДенежныеПотокиЕНС(ДенежныеПотокиЕНС, Процессор);
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("ДенежныеПотокиЕНС", ДенежныеПотокиЕНС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Показатель КАК Показатель,
	|	Данные.Организация КАК Организация,
	|	Данные.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Данные.ВидНалога КАК ВидНалога,
	|	Данные.Сумма КАК Сумма
	|ПОМЕСТИТЬ ДенежныеПотокиЕНС
	|ИЗ
	|	&ДенежныеПотокиЕНС КАК Данные";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОпределитьДенежныеПотокиЕНС(ДенежныеПотокиЕНС, Процессор)
	
	Если Не ВозможноРаспределениеЕНС(Процессор) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеПоказателя Из Процессор.ЗаполняемыеПоказатели.Показатели Цикл
		
		Если Не ЭтоАлгоритмДенежныхПотоков(ОписаниеПоказателя.Заполнение.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОписаниеПоказателя.Заполнение.Отбор.Свойство("РаспределениеПриемник")
			Или ОписаниеПоказателя.Заполнение.Отбор.РаспределениеПриемник.Ключ <> "ЕНС" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Организация Из Процессор.Контекст.Организации Цикл
			
			Уплаты = ЗачтенныеУплатыНалоговЗаПериод(
				Процессор.Контекст.Период.Начало,
				Процессор.Контекст.Период.КонецДата,
				Организация,
				ОписаниеПоказателя.Заполнение.Отбор.РаспределениеПриемник.Значение);
			
			Для Каждого Уплата Из Уплаты Цикл
				Слагаемое = ДенежныеПотокиЕНС.Добавить();
				ЗаполнитьЗначенияСвойств(Слагаемое, Уплата);
				Слагаемое.Показатель = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(ОписаниеПоказателя);
				Слагаемое.Сумма = -Слагаемое.Сумма; // Уплата налогов - это отрицательный денежный поток
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВозможноРаспределениеЕНС(Процессор)
	
	ЛимитПоложительногоСальдо = 1000;
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("ЛимитПоложительногоСальдо", ЛимитПоложительногоСальдо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК Возможно
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет), , Организация В (&Организации)) КАК ХозрасчетныйОстатки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) <= &ЛимитПоложительногоСальдо";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЗачтенныеУплатыНалоговЗаПериод(НачалоПериода, КонецПериода, Организация, ВидыНалогов)

	Возврат ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговЗаПериод(
		Организация,
		НачалоПериода,
		КонецПериода,
		ВидыНалогов);

КонецФункции

Процедура СоздатьДенежныеПотокиОбменВалют(Процессор)
	
	// Потери и выгоды в результате обмена валют ПБУ 23 предписывает отражать свернуто:
	// 17. Денежные потоки отражаются в отчете о движении денежных средств свернуто в случаях,
	// когда они отличаются быстрым оборотом, большими суммами и короткими сроками возврата
	//
	// Часть таких потоков можно идентифицировать по использованию специальных субсчетов счета 57.
	// Другую часть - только по аналитике счета расходов (так называемую "продажу валюты",
	// в этом случае на счете доходов отражается полученная от обмена сумма рублей).
	//
	// Также п. 6 стандарта отмечает, что 
	// "Денежными потоками организации не являются:
	// в) валютно-обменные операции (за исключением потерь или выгод от операции)".
	// Это требование выполняется "автоматически", за счет того, что исключаются внутренние обороты между счетами денег.
	
	Процессор.ДанныеАлгоритма.Вставить(
		"СтатьяДоходовОбменВалют",
		ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты"));
	Процессор.ДанныеАлгоритма.Счета.Вставить(
		"ДоходыОбменВалют",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы));
	
	ДеньгиДетальноБезОбменВалют = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		Процессор.ДанныеАлгоритма.Счета.ДеньгиДетально,
		Процессор.ДанныеАлгоритма.Счета.ДеньгиОбменВалют);
	
	ДеньгиСводноБезОбменВалют = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		Процессор.ДанныеАлгоритма.Счета.ДеньгиСводно,
		Процессор.ДанныеАлгоритма.Счета.ДеньгиОбменВалют);
		
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("СчетаУчетаОбменВалют", Процессор.ДанныеАлгоритма.Счета.ДеньгиОбменВалют);
	Запрос.УстановитьПараметр("СчетаДенегДетально",   ДеньгиДетальноБезОбменВалют);
	Запрос.УстановитьПараметр("СчетаДенегСводно",     ДеньгиСводноБезОбменВалют);
	Запрос.УстановитьПараметр("СчетаДоходов",         Процессор.ДанныеАлгоритма.Счета.ДоходыОбменВалют);
	Запрос.УстановитьПараметр("СтатьяДоходов",        Процессор.ДанныеАлгоритма.СтатьяДоходовОбменВалют);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Потоки.Организация КАК Организация,
	|	Потоки.Счет КАК Счет,
	|	Потоки.Статья КАК Статья,
	|	Потоки.Сумма КАК Сумма
	|ПОМЕСТИТЬ ДенежныеПотокиОбменВалют
	|ИЗ
	|	ДенежныеПотоки КАК Потоки
	|ГДЕ
	|	Потоки.Счет В(&СчетаУчетаОбменВалют)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетПоСтатьям.Организация,
	|	УчетПоСтатьям.Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(УчетПоСтатьям.Субконто1 КАК Справочник.СтатьиДвиженияДенежныхСредств), ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)),
	|	УчетПоСтатьям.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаДенегДетально),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств),
	|			Организация В (&Организации)
	|				И КорСубконто1 В (&СтатьяДоходов),
	|			КорСчет В (&СчетаДоходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)) КАК УчетПоСтатьям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетБезСтатей.Организация,
	|	УчетБезСтатей.Счет,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка),
	|	УчетБезСтатей.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаДенегСводно),
	|			,
	|			Организация В (&Организации)
	|				И КорСубконто1 В (&СтатьяДоходов),
	|			КорСчет В (&СчетаДоходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)) КАК УчетБезСтатей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьДенежныеПотокиКурсовыеРазницы(Процессор)
	
	// П. 19 ПБУ 23: Разница, возникающая в связи с пересчетом денежных потоков организации и остатков
	// денежных средств и денежных эквивалентов в иностранной валюте по курсам на разные даты,
	// отражается в отчете о движении денежных средств отдельно от текущих, инвестиционных и финансовых денежных потоков организации
	// как влияние изменений курса иностранной валюты по отношению к рублю.
	
	Процессор.ДанныеАлгоритма.Вставить("ВидДоходовРасходовКурсовыеРазницы", Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	СчетаДоходыРасходы = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаДоходыРасходы,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаДоходыРасходы,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("СчетаУчетаОбменВалют", Процессор.ДанныеАлгоритма.Счета.ДеньгиОбменВалют);
	Запрос.УстановитьПараметр("СчетаДенегДетально",   Процессор.ДанныеАлгоритма.Счета.ДеньгиДетально);
	Запрос.УстановитьПараметр("СчетаДенегСводно",     Процессор.ДанныеАлгоритма.Счета.ДеньгиСводно);
	Запрос.УстановитьПараметр("СчетаДоходыРасходы",   СчетаДоходыРасходы);
	Запрос.УстановитьПараметр("ВидКурсовыеРазницы",   Процессор.ДанныеАлгоритма.ВидДоходовРасходовКурсовыеРазницы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Статья
	|ПОМЕСТИТЬ ВТ_СтатьиКурсовыеРазницы
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = &ВидКурсовыеРазницы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Статья
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = &ВидКурсовыеРазницы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетПоСтатьям.Организация КАК Организация,
	|	УчетПоСтатьям.Счет КАК Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(УчетПоСтатьям.Субконто1 КАК Справочник.СтатьиДвиженияДенежныхСредств), ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) КАК Статья,
	|	УчетПоСтатьям.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ ДенежныеПотокиКурсовыеРазницы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаДенегДетально),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств),
	|			Организация В (&Организации)
	|				И КорСубконто1 В
	|					(ВЫБРАТЬ
	|						Статьи.Статья
	|					ИЗ
	|						ВТ_СтатьиКурсовыеРазницы КАК Статьи),
	|			КорСчет В (&СчетаДоходыРасходы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)) КАК УчетПоСтатьям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетБезСтатей.Организация,
	|	УчетБезСтатей.Счет,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка),
	|	УчетБезСтатей.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаДенегСводно),
	|			,
	|			Организация В (&Организации)
	|				И КорСубконто1 В
	|					(ВЫБРАТЬ
	|						Статьи.Статья
	|					ИЗ
	|						ВТ_СтатьиКурсовыеРазницы КАК Статьи),
	|			КорСчет В (&СчетаДоходыРасходы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)) КАК УчетБезСтатей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиКурсовыеРазницы";

	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьКорректировкиДенежныхПотоков(Процессор)
	
	СоздатьДенежныеПотокиКонтрагентов(Процессор);
	СоздатьДенежныеПотокиЕНС(Процессор);
	СоздатьДенежныеПотокиОбменВалют(Процессор);
	СоздатьДенежныеПотокиКурсовыеРазницы(Процессор);
	
	Запрос = НачатьЗапрос(Процессор);
	Запрос.УстановитьПараметр("КорректировочныеПоказатели", КорректировочныеПоказателиДенежныхПотоков(Процессор.ЗаполняемыеПоказатели));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировочныеПоказатели.Вид КАК Вид,
	|	КорректировочныеПоказатели.Направление КАК Направление,
	|	КорректировочныеПоказатели.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_КорректировочныеПоказатели
	|ИЗ
	|	&КорректировочныеПоказатели КАК КорректировочныеПоказатели
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КорректировочныеПоказатели.Вид,
	|	КорректировочныеПоказатели.Направление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статьи.Показатель КАК ПоказательИсточник,
	|	КорректировочныеПоказатели.Показатель КАК ПоказательПриемник,
	|	Корректировки.Вид КАК Вид,
	|	Корректировки.Организация КАК Организация,
	|	Корректировки.Счет КАК Счет,
	|	Корректировки.Статья КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПустаяСсылка) КАК ВидНалога,
	|	Корректировки.Сумма КАК Сумма
	|ПОМЕСТИТЬ КорректировкиДенежныхПотоков
	|ИЗ
	|	ДенежныеПотокиКонтрагентов КАК Корректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Статьи КАК Статьи
	|		ПО Корректировки.Статья = Статьи.Статья
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КорректировочныеПоказатели КАК КорректировочныеПоказатели
	|		ПО Корректировки.Вид = КорректировочныеПоказатели.Вид
	|			И (КорректировочныеПоказатели.Направление = ""Сворачивание"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировочныеПоказатели.Показатель,
	|	Корректировки.Показатель,
	|	КорректировочныеПоказатели.Вид,
	|	Корректировки.Организация,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка),
	|	Корректировки.ВидНалога,
	|	Корректировки.Сумма
	|ИЗ
	|	ДенежныеПотокиЕНС КАК Корректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КорректировочныеПоказатели КАК КорректировочныеПоказатели
	|		ПО (КорректировочныеПоказатели.Вид = ""ЕНС"")
	|			И (КорректировочныеПоказатели.Направление = ""РаспределениеИсточник"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Статьи.Показатель,
	|	КорректировочныеПоказатели.Показатель,
	|	КорректировочныеПоказатели.Вид,
	|	Корректировки.Организация,
	|	Корректировки.Счет,
	|	Корректировки.Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПустаяСсылка),
	|	Корректировки.Сумма
	|ИЗ
	|	ДенежныеПотокиОбменВалют КАК Корректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Статьи КАК Статьи
	|		ПО Корректировки.Статья = Статьи.Статья
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КорректировочныеПоказатели КАК КорректировочныеПоказатели
	|		ПО (КорректировочныеПоказатели.Вид = ""ОбменВалют"")
	|			И (КорректировочныеПоказатели.Направление = ""Сворачивание"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Статьи.Показатель,
	|	КорректировочныеПоказатели.Показатель,
	|	КорректировочныеПоказатели.Вид,
	|	Корректировки.Организация,
	|	Корректировки.Счет,
	|	Корректировки.Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПустаяСсылка),
	|	Корректировки.Сумма
	|ИЗ
	|	ДенежныеПотокиКурсовыеРазницы КАК Корректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Статьи КАК Статьи
	|		ПО Корректировки.Статья = Статьи.Статья
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КорректировочныеПоказатели КАК КорректировочныеПоказатели
	|		ПО (КорректировочныеПоказатели.Вид = ""КурсовыеРазницы"")
	|			И (КорректировочныеПоказатели.Направление = ""Сворачивание"")";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция КорректировочныеПоказателиДенежныхПотоков(ЗаполняемыеПоказатели)
	
	КорректировочныеПоказатели = Новый ТаблицаЗначений;
	КорректировочныеПоказатели.Колонки.Добавить("Вид",         ОбщегоНазначения.ОписаниеТипаСтрока(255));
	КорректировочныеПоказатели.Колонки.Добавить("Направление", ОбщегоНазначения.ОписаниеТипаСтрока(255)); // Сворачивание, РаспределениеПриемник, РаспределениеИсточник
	КорректировочныеПоказатели.Колонки.Добавить("Показатель",  Новый ОписаниеТипов("Число"));
	
	Для Каждого ОписаниеПоказателя Из ЗаполняемыеПоказатели.Показатели Цикл
		
		Если Не ЭтоАлгоритмДенежныхПотоков(ОписаниеПоказателя.Заполнение.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Вид         = Неопределено;
		Направление = Неопределено;
		
		Если ОписаниеПоказателя.Заполнение.Отбор.Свойство("Свернутый") Тогда
			Вид         = ОписаниеПоказателя.Заполнение.Отбор.Свернутый;
			Направление = "Сворачивание";
		ИначеЕсли ОписаниеПоказателя.Заполнение.Отбор.Свойство("РаспределениеПриемник") Тогда
			Вид         = ОписаниеПоказателя.Заполнение.Отбор.РаспределениеПриемник.Ключ;
			Направление = "РаспределениеПриемник";
		ИначеЕсли ОписаниеПоказателя.Заполнение.Отбор.Свойство("РаспределениеИсточник") Тогда
			Вид         = ОписаниеПоказателя.Заполнение.Отбор.РаспределениеИсточник;
			Направление = "РаспределениеИсточник";
		КонецЕсли;
		
		Если Вид <> Неопределено Тогда
			
			Корректировка = КорректировочныеПоказатели.Добавить();
			Корректировка.Вид         = Вид;
			Корректировка.Направление = Направление;
			Корректировка.Показатель  = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(ОписаниеПоказателя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КорректировочныеПоказатели;
	
КонецФункции

#КонецОбласти

Процедура ОписатьПорядокЗаполненияПоказателяДенежныеПотоки(Описание, Показатель, ДанныеАлгоритма, КодЯзыка)
	
	Если Показатель.Заполнение.Отбор.Свойство("Свернутый") Тогда
		Если Показатель.Заполнение.Отбор.Свернутый = "АгентПродавца" Тогда
			Описание.Разъяснение = НСтр(
				"ru = 'Условно считаем, что суммы, выплаченные комитентам, агент в полном объеме получил от покупателей';
				|en = 'Условно считаем, что суммы, выплаченные комитентам, агент в полном объеме получил от покупателей'",
				КодЯзыка);
		ИначеЕсли Показатель.Заполнение.Отбор.Свернутый = "АгентПокупателя" Тогда
			Описание.Разъяснение = НСтр(
				"ru = 'Условно считаем, что сумму, полученную от комитента для приобретения чего-либо, агент в полном объеме заплатил поставщикам.
                 |При этом предполагается, что суммы, полученные для платежей поставщикам отражаются на счетах прочих расчетов, а комиссионного вознаграждения - на счетах расчетов с покупателями.';
                 |en = 'Условно считаем, что сумму, полученную от комитента для приобретения чего-либо, агент в полном объеме заплатил поставщикам.
                 |При этом предполагается, что суммы, полученные для платежей поставщикам отражаются на счетах прочих расчетов, а комиссионного вознаграждения - на счетах расчетов с покупателями.'",
				КодЯзыка);
		Иначе
			// Пока ограничиваемся наименованием
		КонецЕсли;
	ИначеЕсли Показатель.Заполнение.Отбор.Свойство("РаспределениеПриемник") Тогда
		Если Показатель.Заполнение.Отбор.РаспределениеПриемник.Ключ = "ЕНС" Тогда
			Описание.ШагиРасчета.Добавить(, "ВидНалога");
			ШаблонТекста = НСтр(
				"ru = 'Сведения суммах, зачисленных на единый налоговый счет, и отнесенных налоговым органом к следующим видам платежей: %1';
				|en = 'Сведения суммах, зачисленных на единый налоговый счет, и отнесенных налоговым органом к следующим видам платежей: %1'",
				КодЯзыка);
			Если Показатель.Заполнение.Отбор.РаспределениеПриемник.Значение.Количество() = 1 Тогда
				ШаблонТекста = НСтр(
					"ru = 'Сведения суммах, зачисленных на единый налоговый счет, и отнесенных налоговым органом к платежу вида ""%1""';
					|en = 'Сведения суммах, зачисленных на единый налоговый счет, и отнесенных налоговым органом к платежу вида ""%1""'",
					КодЯзыка);
			КонецЕсли;
			Описание.Текст = СтрШаблон(
				ШаблонТекста,
				ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(Показатель.Заполнение.Отбор.РаспределениеПриемник.Значение, "И", "; "));
			Описание.Разъяснение = НСтр(
				"ru = 'Показатель включается в отчет только если положительное сальдо единого налогового счета отсутствует или незначительно';
				|en = 'Показатель включается в отчет только если положительное сальдо единого налогового счета отсутствует или незначительно'",
				КодЯзыка);
		КонецЕсли;
	ИначеЕсли Показатель.Заполнение.Отбор.Свойство("РаспределениеИсточник") Тогда
		Если Показатель.Заполнение.Отбор.РаспределениеИсточник = "ЕНС" Тогда
			Описание.Разъяснение = НСтр(
				"ru = 'Показатель включается в отчет только если положительное сальдо единого налогового счета отсутствует или незначительно';
				|en = 'Показатель включается в отчет только если положительное сальдо единого налогового счета отсутствует или незначительно'",
				КодЯзыка);
		КонецЕсли;
	Иначе
		
		Описание.ШагиРасчета.Добавить(ДанныеАлгоритма.Счета.Описание, "Счет");
		Описание.ШагиРасчета.Добавить(, "Статья");
		Описание.ШагиРасчета.Добавить(, "ВидКорректировки");
		
		Предложения = Новый Массив;
		
		ШаблонТекста = НСтр("ru = 'Оборот по счетам денежных средств и денежных эквивалентов %1.
                             |Список счетов приведен ниже.';
                             |en = 'Оборот по счетам денежных средств и денежных эквивалентов %1.
                             |Список счетов приведен ниже.'", КодЯзыка);
		ОписаниеСтатей = "";
		Если Не Показатель.Заполнение.Отбор.Свойство("ВидСтатьи") Тогда
			ОписаниеСтатей = НСтр("ru = 'по статьям, не включенным в другие показатели';
									|en = 'по статьям, не включенным в другие показатели'", КодЯзыка);
		ИначеЕсли Показатель.Заполнение.Отбор.ВидСтатьи.Количество() = 1 Тогда
			ОписаниеСтатей = СтрШаблон(
				НСтр("ru = 'по статьям вида ""%1""';
					|en = 'по статьям вида ""%1""'", КодЯзыка),
				Показатель.Заполнение.Отбор.ВидСтатьи[0]);
		Иначе
			ОписаниеСтатей = СтрШаблон(
				НСтр("ru = 'по статьям видов %1';
					|en = 'по статьям видов %1'", КодЯзыка),
				ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(Показатель.Заполнение.Отбор.ВидСтатьи, "И", "; "));
		КонецЕсли;
		Предложения.Добавить(СтрШаблон(ШаблонТекста, ОписаниеСтатей));
		
		Сворачиваемые = Новый Массив;
		Для Каждого ОписаниеПотока Из ДанныеАлгоритма.ПредставленияСворачиваемыхДенежныхПотоков Цикл
			Если Не Показатель.Заполнение.НастройкиАлгоритма.Сворачиваемые.Свойство(ОписаниеПотока.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Сворачиваемые.Добавить(ОписаниеПотока.Представление);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Сворачиваемые) Тогда
			Предложения.Добавить(НСтр("ru = 'Исключаются обороты между счетами денежных средств и денежных эквивалентов.';
										|en = 'Исключаются обороты между счетами денежных средств и денежных эквивалентов.'", КодЯзыка));
		Иначе
			Предложения.Добавить(НСтр("ru = 'Исключаются:
                                       |- обороты между счетами денежных средств и денежных эквивалентов
                                       |- денежные потоки, отображаемые в отчете свернуто.';
                                       |en = 'Исключаются:
                                       |- обороты между счетами денежных средств и денежных эквивалентов
                                       |- денежные потоки, отображаемые в отчете свернуто.'", КодЯзыка));
			ШаблонТекста = НСтр("ru = 'Свернуто отражаются %1.';
								|en = 'Свернуто отражаются %1.'", КодЯзыка);
			Если Сворачиваемые.Количество() = 1 Тогда
				НСтр("ru = 'Свернуто отражается %1.';
					|en = 'Свернуто отражается %1.'", КодЯзыка)
			КонецЕсли;
			Союз = НСтр("ru = ', а также ';
						|en = ', а также '");// используем нестандартный союз, так как описания сворачиваемых потоков уже содержат союз "и"
			Предложения.Добавить(СтрШаблон(ШаблонТекста, ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(Сворачиваемые, Союз, "; ")));
		КонецЕсли;
		
		Описание.Текст = СтрСоединить(Предложения, Символы.ПС);
		
		// Отчет
		Описание.Отчет.ВидОтчета  = "ОборотыСчета";
		
		Если Показатель.Заполнение.Отбор.Свойство("ВидСтатьи") Тогда
			Описание.Отчет.Субконто.Вставить("Статья", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
			ОтборЧерезТочку = Новый Соответствие;
			ОтборЧерезТочку.Вставить("ВидДвиженияДенежныхСредств", Показатель.Заполнение.Отбор.ВидСтатьи);
			Описание.Отчет.ОтборыПоказателя.Вставить("Статья", ОтборЧерезТочку);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписатьЗаполняемоеЗначениеДенежныеПотоки(ЗаписьРасчет, СоставШагаРасчета, ДанныеАлгоритма, КодЯзыка)
	
	Если ЗаписьРасчет.ТипЗаписи = "ВидКорректировки" Тогда
		Если Не ЗначениеЗаполнено(СоставШагаРасчета.ВидКорректировки) Тогда
			ЗаписьРасчет.Описание = НСтр("ru = 'Всего';
										|en = 'Всего'", КодЯзыка);
		Иначе
			ОписаниеКорректировки = ДанныеАлгоритма.ПредставленияСворачиваемыхДенежныхПотоков.НайтиПоЗначению(СоставШагаРасчета.ВидКорректировки);
			Если ОписаниеКорректировки <> Неопределено Тогда
				ЗаписьРасчет.Описание = СтрШаблон(
					НСтр("ru = 'Исключены %1';
						|en = 'Исключены %1'", КодЯзыка),
					ОписаниеКорректировки.Представление);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставленияСворачиваемыхДенежныхПотоков(КодЯзыка)
	
	Представления = Новый СписокЗначений;
	
	Представления.Добавить("НДС", НСтр("ru = 'суммы НДС';
										|en = 'суммы НДС'", КодЯзыка));
	
	Представления.Добавить("АгентПокупателя", НСтр("ru = 'поступления и платежи, относящиеся к деятельности агента при покупках в интересах комитента';
													|en = 'поступления и платежи, относящиеся к деятельности агента при покупках в интересах комитента'", КодЯзыка));

	Представления.Добавить("АгентПродавца", НСтр("ru = 'поступления и платежи, относящиеся к деятельности агента при продажах в интересах комитента';
												|en = 'поступления и платежи, относящиеся к деятельности агента при продажах в интересах комитента'", КодЯзыка));
	
	Если БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
		Представления.Добавить("ОбменВалют",      НСтр("ru = 'выгоды и потери от валютно-обменных операций';
														|en = 'выгоды и потери от валютно-обменных операций'", КодЯзыка));
		Представления.Добавить("КурсовыеРазницы", НСтр("ru = 'последствия изменений курсов валют';
														|en = 'последствия изменений курсов валют'", КодЯзыка));
	КонецЕсли;
	
	Возврат Представления;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПрикладныеДанные

Функция БалансовыеСчетаОтложенногоНалога()
	
	СчетаОтложенногоНалога = Новый Массив;
	СчетаОтложенногоНалога.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	СчетаОтложенногоНалога.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	Возврат СчетаОтложенногоНалога;

КонецФункции

#КонецОбласти

#Область ВспомогательныеМетоды

Функция ОписаниеСчетовУчета(Счета, ОбязательныеСчета = Неопределено)
	
	ОписаниеСчетов = Новый СписокЗначений;
	
	КодыСчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Счета, "Код");
	Для Каждого Счет Из Счета Цикл
		ОписаниеСчетов.Добавить(Счет, КодыСчетов[Счет], ОбязательныеСчета = Неопределено Или ОбязательныеСчета[Счет] <> Неопределено);
	КонецЦикла;
	
	Возврат ОписаниеСчетов;
	
КонецФункции

Функция ПредставлениеСпискаСчетов(ОписаниеСчетовУчета)
	
	Представление = Новый Структура;
	Представление.Вставить("Количество", 0);
	Представление.Вставить("Текст",      "");
	
	СчетаГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОписаниеСчетовУчета.ВыгрузитьЗначения(), "ЗапретитьИспользоватьВПроводках");
	
	ПредставленияОсновных = Новый Массив;
	Для Каждого ОписаниеСчета Из ОписаниеСчетовУчета Цикл
		Если СчетаГруппы[ОписаниеСчета.Значение] = Ложь Тогда
			ПредставленияОсновных.Добавить(ОписаниеСчета.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Представление.Количество = ПредставленияОсновных.Количество();
	Представление.Текст      = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ПредставленияОсновных);
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеСубсчетовДательныйПадеж(ПредставлениеСубсчетов, КодЯзыка)
	
	Шаблон = НСтр("ru = 'субсчету %1';
					|en = 'субсчету %1'", КодЯзыка);
	Если ПредставлениеСубсчетов.Количество > 1 Тогда
		Шаблон = НСтр("ru = 'субсчетам %1';
						|en = 'субсчетам %1'", КодЯзыка);
	КонецЕсли;
	
	Возврат СтрШаблон(Шаблон, ПредставлениеСубсчетов.Текст);
	
КонецФункции

Функция ВсеСубсчета(ПредопределенныеСчета)
	
	Субсчета = Новый Массив;
	Для Каждого Счет Из ПредопределенныеСчета Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Субсчета, БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	КонецЦикла;
	Возврат Субсчета;
	
КонецФункции

Функция ПредставлениеСчетовГрупп(СчетаГруппы)

	КодыСчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СчетаГруппы, "Код");
	Представления = Новый Массив;
	Для Каждого Счет Из СчетаГруппы Цикл
		Представления.Добавить(КодыСчетов[Счет]);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ",");

КонецФункции

Функция ПредставлениеСпискаЗначений(СписокЗначений, Маркированный)
	
	Представления = Новый Массив;
	Для Каждого ОписаниеЗначения Из СписокЗначений Цикл
		Если Маркированный Тогда
			ПредставлениеЗначения = СтрШаблон(" - %1", ОписаниеЗначения.Представление);
		Иначе
			ПредставлениеЗначения = СтрШаблон("""%1""", ОписаниеЗначения.Представление);
		КонецЕсли;
		Представления.Добавить(ПредставлениеЗначения);
	КонецЦикла;
	
	Если Маркированный Тогда
		Возврат СтрСоединить(Представления, Символы.ПС);
	Иначе
		Возврат ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(Представления);
	КонецЕсли; 
	
КонецФункции

Процедура УдалитьЗначенияИзСписка(СписокЗначений, Значение)
	
	Пока Истина Цикл
		ЭлементСписка = СписокЗначений.НайтиПоЗначению(Значение);
		Если ЭлементСписка = Неопределено Тогда
			Прервать;
		КонецЕсли;
		СписокЗначений.Удалить(ЭлементСписка);
	КонецЦикла;

КонецПроцедуры

Функция СоответствиеИзМассива(Массив)
	
	Соответствие = Новый Соответствие;
	Для Каждого Элемент Из Массив Цикл
		Соответствие.Вставить(Элемент, Истина);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция НачатьЗапрос(Процессор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода",    Процессор.Контекст.Период.Начало);
	Запрос.УстановитьПараметр("КонецПериода",     Процессор.Контекст.Период.Конец);
	Запрос.УстановитьПараметр("КонецПериодаДата", Процессор.Контекст.Период.КонецДата);
	Запрос.УстановитьПараметр("Организации",      Процессор.Контекст.Организации);
	
	Возврат Запрос;
	
КонецФункции

Процедура ОписатьЗаполняемоеЗначениеОборотыМеждуСчетами(ЗаписьРасчет, КешПредставлений, КодЯзыка)
	
	Если ЗаписьРасчет.ТипЗаписи = "Счет" Тогда
		ЗаписьРасчет.Описание = СтрШаблон(
			НСтр("ru = 'Оборот по счету %1';
				|en = 'Оборот по счету %1'", КодЯзыка),
			КешПредставлений.Счет);
	ИначеЕсли ЗаписьРасчет.ТипЗаписи = "КорСчет" Тогда
		ЗаписьРасчет.Описание = СтрШаблон(
			НСтр("ru = 'Оборот по счету %1 в корреспонденции со счетом %2';
				|en = 'Оборот по счету %1 в корреспонденции со счетом %2'", КодЯзыка),
			КешПредставлений.Счет,
			КешПредставлений.КорСчет);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеСтруктурыОтчета

// Методы для лаконичного описания структуры отчета - коллекции НовыйЗаполняемыеПоказателиРаздела

Функция НовыйКонтекстЗаполнения()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Раздел", ""); // Из БухгалтерскаяОтчетностьБРО.РазделыОтчета
	Контекст.Вставить("Группа"); // Ссылка на строку ГруппыПоказателей (положительных значений при наличии ГруппаОтрицательных)
	// Есть два способа описать заполнение группы положительных значений:
	// - параллельное: объявляем группу положительных и сразу группу отрицательных; далее добавляем показатели сразу в две группы.
	//                 Позволяет описать последовательные группы, в которых вперемешку идут как включаемые в обе группы, так и в одну из них (как в ОФР)
	//                 При использовании этого способа в ГруппаОтрицательных помещается ссылка на строку ГруппыПоказателей (отрицательных значений)
	// - последовательный: отмечаем показатели, которые должны войти в группу отрицательных; 
	//                 потом в группе отрицательных отмечаем место, где нужно разместить включаемые в обе группы.
	//                 Позволяет описать группы, которые не размещены последовательно (как в ОДДС).
	//                 В этом случае в ГруппаОтрицательных помещается Соответствие (Ключ - индекс группы положительных; Значение - массив идентификаторов показателей).
	// В тех случаях, когда нет "активных" показателей, включаемых в две группы, содержит значение Неопределено.
	Контекст.Вставить("ГруппаОтрицательных");
	Контекст.Вставить("Показатель"); // Ссылка на строку Показатели
	Контекст.Вставить("Алгоритм");
	Контекст.Вставить("ОбщиеСвойстваАлгоритма", Новый Структура);
	Возврат Контекст;
	
КонецФункции

Процедура ИнициализироватьКонтекстЗаполнения(Процессор);
	Процессор.КонтекстЗаполнения = НовыйКонтекстЗаполнения();
	Процессор.Раздел = Процессор.Раздел;
КонецПроцедуры

Процедура ДобавитьГруппу(Процессор, КодСтроки, Знач Наименование = "")
	
	Если Не ЗначениеЗаполнено(Процессор.КонтекстЗаполнения) Тогда
		ИнициализироватьКонтекстЗаполнения(Процессор);
	Иначе
		
		Если Процессор.КонтекстЗаполнения.Группа <> Неопределено Тогда
			// Для завершения инициализации группы без показателей
			РедактируемыйПоказатель(Процессор);
		КонецЕсли;
		
		Если ТипЗнч(Процессор.КонтекстЗаполнения.ГруппаОтрицательных) <> Тип("Соответствие") Тогда
			Процессор.КонтекстЗаполнения.ГруппаОтрицательных = Неопределено;
		КонецЕсли;
		Процессор.КонтекстЗаполнения.Показатель = Неопределено;
		
	КонецЕсли;
	
	УстановитьНаименованиеГруппыПоКодуСтроки(Наименование, КодСтроки, Процессор);
	
	Процессор.КонтекстЗаполнения.Группа = Процессор.ЗаполняемыеПоказатели.ГруппыПоказателей.Добавить();
	Процессор.КонтекстЗаполнения.Группа.Наименование = Наименование;
	Процессор.КонтекстЗаполнения.Группа.КодСтроки    = КодСтроки;
	
КонецПроцедуры

Процедура УстановитьНаименованиеГруппыПоКодуСтроки(Наименование, КодСтроки, Процессор)
	
	Если Не ПустаяСтрока(Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеПоКоду = Процессор.НаименованияКодовСтрок[КодСтроки];
	Если НаименованиеПоКоду = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Наименование = НаименованиеПоКоду;
	
КонецПроцедуры

Процедура НачатьАлгоритм(Процессор, Алгоритм)
	
	Если Не ЗначениеЗаполнено(Процессор.КонтекстЗаполнения) Тогда
		ИнициализироватьКонтекстЗаполнения(Процессор);
	КонецЕсли;
	
	Процессор.КонтекстЗаполнения.Группа     = Неопределено;
	Процессор.КонтекстЗаполнения.Показатель = Неопределено;
	Процессор.КонтекстЗаполнения.ОбщиеСвойстваАлгоритма.Очистить();
	
	Процессор.КонтекстЗаполнения.Алгоритм = Алгоритм;
	
КонецПроцедуры

Процедура УстановитьАлгоритм(Процессор, Алгоритм)
	
	Показатель = РедактируемыйПоказатель(Процессор);
	Показатель.Заполнение = ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйАлгоритмЗаполнения(Алгоритм);
	
КонецПроцедуры

Процедура ДобавитьГруппуОтрицательныхЗначений(Процессор, КодСтроки, Знач Наименование = "")
	
	ГруппаПоложительных = Процессор.КонтекстЗаполнения.Группа;
	Если Не ЗначениеЗаполнено(ГруппаПоложительных) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНаименованиеГруппыПоКодуСтроки(Наименование, КодСтроки, Процессор);

	Если ПустаяСтрока(Наименование) Тогда
		Наименование = ГруппаПоложительных.Наименование;
	КонецЕсли;
	
	ГруппаОтрицательных = Процессор.ЗаполняемыеПоказатели.ГруппыПоказателей.Добавить();
	ГруппаОтрицательных.Наименование = Наименование;
	ГруппаОтрицательных.КодСтроки    = КодСтроки;
	
	Процессор.КонтекстЗаполнения.ГруппаОтрицательных = ГруппаОтрицательных;
	
КонецПроцедуры

Функция НачатьДобавлениеПоказателя(Процессор, Наименование)
	
	Процессор.КонтекстЗаполнения.Показатель = ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.ДобавитьПоказатель(
		Процессор.ЗаполняемыеПоказатели,
		Наименование,
		Процессор.КонтекстЗаполнения.Алгоритм);
		
	УстановитьОбщийСворачиваемыйДенежныйПоток(
		Процессор.КонтекстЗаполнения.Показатель.Заполнение,
		Процессор.КонтекстЗаполнения.Алгоритм,
		Процессор.КонтекстЗаполнения.ОбщиеСвойстваАлгоритма);
		
	Возврат Процессор.КонтекстЗаполнения.Показатель;
	
КонецФункции

Функция ДобавитьПоказатель(Процессор, Содержимое)
	
	Показатель = НачатьДобавлениеПоказателя(Процессор, Строка(Содержимое));
	
	Если ТипЗнч(Содержимое) <> Тип("Строка") Тогда
		ДополнитьОтбор(Процессор, Содержимое);
	КонецЕсли;
	
	ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
	
	Если Процессор.КонтекстЗаполнения.Группа <> Неопределено Тогда
		Процессор.КонтекстЗаполнения.Группа.Состав.Добавить(ИдентификаторПоказателя);
	
		Если Процессор.КонтекстЗаполнения.ГруппаОтрицательных <> Неопределено Тогда
			
			ТипГруппаОтрицательных = ТипЗнч(Процессор.КонтекстЗаполнения.ГруппаОтрицательных);
			Если ТипГруппаОтрицательных = Тип("Соответствие") Тогда
				ОбъявитьПоказательГруппыПоложительных(Процессор, ИдентификаторПоказателя, Ложь);
			Иначе
				Процессор.КонтекстЗаполнения.ГруппаОтрицательных.Состав.Добавить(ИдентификаторПоказателя);
				УстановитьЗачетПоказателейПрочиеДоходыРасходы(Процессор, "Показатель");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Показатель;
	
КонецФункции

Процедура ДобавитьПоказательРасходы(Процессор, Содержимое)
	
	ГруппаРасходы = Процессор.КонтекстЗаполнения.ГруппаОтрицательных;
	Процессор.КонтекстЗаполнения.ГруппаОтрицательных = Неопределено;
	
	ГруппаДоходы = Процессор.КонтекстЗаполнения.Группа;
	Процессор.КонтекстЗаполнения.Группа = ГруппаРасходы;
	
	ДобавитьПоказатель(Процессор, Содержимое);
	
	Процессор.КонтекстЗаполнения.Группа              = ГруппаДоходы;
	Процессор.КонтекстЗаполнения.ГруппаОтрицательных = ГруппаРасходы;
	
КонецПроцедуры

Процедура ДополнитьОтбор(Процессор, ЗначениеОтбора)
	
	Показатель = РедактируемыйПоказатель(Процессор);
	ДополнитьОтборАлгоритма(Показатель.Заполнение, ЗначениеОтбора);
	
КонецПроцедуры

Процедура ДополнитьОтборАлгоритма(Заполнение, ЗначениеОтбора)
	
	Если Заполнение.Идентификатор = ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		ДобавитьОтборПрочиеДоходыРасходы(Заполнение, ЗначениеОтбора);
	ИначеЕсли Заполнение.Идентификатор = ИдентификаторАлгоритмаНалоги() Тогда
		ДобавитьОтборНалогНаПрибыль(Заполнение, ЗначениеОтбора);
	ИначеЕсли Заполнение.Идентификатор = ИдентификаторАлгоритмаРезультатПереоценкиВнеоборотныхАктивов() Тогда
		ДобавитьОтборРезультатПереоценкиВнеоборотныхАктивов(Заполнение, ЗначениеОтбора);
	ИначеЕсли ЭтоАлгоритмДенежныхПотоков(Заполнение.Идентификатор) Тогда
		ДобавитьОтборДенежныеПотоки(Заполнение, ЗначениеОтбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОсновнойПоказатель(Процессор, НаименованиеПоказателя)
	
	Показатель = ДобавитьПоказатель(Процессор, НаименованиеПоказателя);
	
	Показатель.Заполнение.Отбор.Очистить();
	Показатель.Вывод = Ложь;
	
КонецПроцедуры

Функция РедактируемыйПоказатель(Процессор)
	
	Показатель = Процессор.КонтекстЗаполнения.Показатель;
	
	Если Не ЗначениеЗаполнено(Показатель) Тогда
		
		Показатель = НачатьДобавлениеПоказателя(Процессор, Процессор.КонтекстЗаполнения.Группа.Наименование);
		
		Процессор.КонтекстЗаполнения.Группа.Наименование = "";
		Процессор.КонтекстЗаполнения.Группа.Показатель = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
		Процессор.КонтекстЗаполнения.Группа.Состав.Очистить();
		
	КонецЕсли;
	
	Возврат Показатель;
	
КонецФункции

Функция ГруппаПоложительных(Процессор, РазрешеноНачинатьГруппуПоложительных = Ложь)
	
	ИдентификаторГруппы = Процессор.ЗаполняемыеПоказатели.ГруппыПоказателей.Индекс(Процессор.КонтекстЗаполнения.Группа);
	ГруппаПоложительных = Процессор.КонтекстЗаполнения.ГруппаОтрицательных[ИдентификаторГруппы];
	Если ГруппаПоложительных <> Неопределено Тогда
		Возврат ГруппаПоложительных;
	КонецЕсли;
		
	Если Не РазрешеноНачинатьГруппуПоложительных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГруппаПоложительных = Новый Массив;
	Процессор.КонтекстЗаполнения.ГруппаОтрицательных.Вставить(ИдентификаторГруппы, ГруппаПоложительных);
	
	Возврат ГруппаПоложительных;
	
КонецФункции

Процедура ОбъявитьПоказательГруппыПоложительных(Процессор, ИдентификаторПоказателя, РазрешеноНачинатьГруппуПоложительных)
	
	ГруппаПоложительных = ГруппаПоложительных(Процессор);
	Если ГруппаПоложительных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаПоложительных.Добавить(ИдентификаторПоказателя);
	
КонецПроцедуры

Процедура НачатьДобавлениеПоказателейПоложительныхЗначений(Процессор)
	
	Если Процессор.КонтекстЗаполнения.ГруппаОтрицательных = Неопределено Тогда
		Процессор.КонтекстЗаполнения.ГруппаОтрицательных = Новый Соответствие;
	ИначеЕсли ТипЗнч(Процессор.КонтекстЗаполнения.ГруппаОтрицательных) <> Тип("Соответствие") Тогда
		// Не допускаем сочетание параллельного и последовательного порядка заполнения
		Возврат;
	КонецЕсли;
	
	ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Процессор.КонтекстЗаполнения.Показатель);
	ГруппаПоложительных(Процессор, Истина);
	
КонецПроцедуры

Процедура ДополнитьГруппуОтрицательныхЗначений(Процессор)
	
	Если ТипЗнч(Процессор.КонтекстЗаполнения.ГруппаОтрицательных) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ГруппаПоложительных Из Процессор.КонтекстЗаполнения.ГруппаОтрицательных Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Процессор.КонтекстЗаполнения.Группа.Состав, ГруппаПоложительных.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоАлгоритмДенежныхПотоков(Алгоритм)
	
	Возврат Лев(Алгоритм,14) = ИдентификаторАлгоритмаДенежныеПотоки();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьГруппуВстроенная(Процессор, КодСтроки, Знач Наименование = "") Экспорт
	
	ДобавитьГруппу(Процессор, КодСтроки, Наименование);
	
КонецПроцедуры

Процедура ДобавитьПоказательВстроенная(Процессор, Содержимое) Экспорт
	
	ДобавитьПоказатель(Процессор, Содержимое);
	
КонецПроцедуры

Процедура ДополнитьОтборВстроенная(Процессор, ЗначениеОтбора) Экспорт
	
	ДополнитьОтбор(Процессор, ЗначениеОтбора);
	
КонецПроцедуры

Процедура ДобавитьСворачиваемыйДенежныйПотокВстроенная(Процессор, ИмяСворачиваемогоПотока) Экспорт
	
	ДобавитьСворачиваемыйДенежныйПоток(Процессор, ИмяСворачиваемогоПотока);
	
КонецПроцедуры

Процедура ДобавитьПоказательСвернутогоДенежногоПотокаВстроенная(Процессор, ИмяСворачиваемогоПотока, НаименованиеПоказателя) Экспорт
	
	ДобавитьПоказательСвернутогоДенежногоПотока(Процессор, ИмяСворачиваемогоПотока, НаименованиеПоказателя);
	
КонецПроцедуры

Процедура НачатьДобавлениеПоказателейПоложительныхЗначенийВстроенная(Процессор) Экспорт
	
	НачатьДобавлениеПоказателейПоложительныхЗначений(Процессор);
	
КонецПроцедуры

Процедура ДобавитьОсновнойПоказательВстроенная(Процессор, НаименованиеПоказателя) Экспорт
	
	ДобавитьОсновнойПоказатель(Процессор, НаименованиеПоказателя);
	
КонецПроцедуры

Процедура ОграничитьСворачиваемыйДенежныйПотокВстроенная(Процессор, ИмяСворачиваемогоПотока) Экспорт
	
	ОграничитьСворачиваемыйДенежныйПоток(Процессор, ИмяСворачиваемогоПотока);
	
КонецПроцедуры

Процедура ДобавитьПоказательРаспределенногоДенежногоПотокаВстроенная(Процессор, ИмяРаспределенногоПотока, Отбор, НаименованиеПоказателя) Экспорт
	
	ДобавитьПоказательРаспределенногоДенежногоПотока(Процессор, ИмяРаспределенногоПотока, Отбор, НаименованиеПоказателя);
	
КонецПроцедуры

Процедура РаспределитьДенежныйПотокВстроенная(Процессор, ИмяРаспределенногоПотока, НаименованиеПоказателя) Экспорт
	
	РаспределитьДенежныйПоток(Процессор, ИмяРаспределенногоПотока, НаименованиеПоказателя);
	
КонецПроцедуры

Процедура ДополнитьГруппуОтрицательныхЗначенийВстроенная(Процессор) Экспорт
	
	ДополнитьГруппуОтрицательныхЗначений(Процессор);
	
КонецПроцедуры

Процедура УстановитьАлгоритмВстроенная(Процессор, Алгоритм) Экспорт
	
	УстановитьАлгоритм(Процессор, Алгоритм);
	
КонецПроцедуры

Процедура НачатьАлгоритмВстроенная(Процессор, Алгоритм) Экспорт
	
	НачатьАлгоритм(Процессор, Алгоритм);
	
КонецПроцедуры

#КонецОбласти
