#Область ПрограммныйИнтерфейс

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	СоответствиеСсылокСвойствам = Новый Соответствие;
	ДокументыРеестрыСведений = Новый Массив;
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка)  = Тип("ДокументСсылка.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам") Тогда
			ДокументыРеестрыСведений.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыРеестрыСведений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыРеестрыСведений", ДокументыРеестрыСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Ссылка,
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Дата КАК ДатаСоздания,
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Организация,
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Организация.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.МесяцНачисления, ДЕНЬ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.МесяцНачисления, ДЕНЬ) КАК ДатаОкончания,
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Комментарий
	|ИЗ
	|	Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам КАК РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам
	|ГДЕ
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Ссылка В(&ДокументыРеестрыСведений)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
		ЗапрашиваемыеДанные.ВариантОтчета = "-";
	КонецЦикла;
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность.
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'Реестр стимулирующих выплат медицинским работникам';
													|en = 'Incentive payments registry to medical workers'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = Неопределено;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам;
		
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область Должности

Процедура ДополнитьФормуЭлементаСправочникаДолжности(Форма, ТолькоПросмотр = Ложь) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяРаботаСКоронавирусом") Тогда
					
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"КатегорияПолучателяСтимулирующихВыплатФСС",
			"ТолькоПросмотр",
			Форма.ТолькоПросмотр ИЛИ ТолькоПросмотр);
				
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"КатегорияПолучателяСтимулирующихВыплатФСС",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжности(Форма, Должность, ЗначениеКопирования = Неопределено) Экспорт	
		
	Если (ПолучитьФункциональнуюОпцию("ИспользуетсяРаботаСКоронавирусом") ИЛИ ПолучитьФункциональнуюОпцию("ИспользуютсяСоциальныеВыплатыОтдельнымКатегориямМедРаботников"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС) Тогда
		МенеджерЗаписи = РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Должность = Должность;
		МенеджерЗаписи.Прочитать();
		
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			Выборка = РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.Выбрать(Новый Структура("Должность", ЗначениеКопирования));
			Если Выборка.Следующий() Тогда 
				МенеджерЗаписи.КатегорияПолучателяСтимулирующихВыплатФСС = Выборка.КатегорияПолучателяСтимулирующихВыплатФСС;
				МенеджерЗаписи.ОтдельнаяКатегорияМедицинскихРаботников = Выборка.ОтдельнаяКатегорияМедицинскихРаботников;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС);
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеДолжности(Форма, Ссылка) Экспорт
	
	Если (ПолучитьФункциональнуюОпцию("ИспользуетсяРаботаСКоронавирусом") ИЛИ ПолучитьФункциональнуюОпцию("ИспользуютсяСоциальныеВыплатыОтдельнымКатегориямМедРаботников"))
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС) Тогда
		МенеджерЗаписи = РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Форма.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС);
		МенеджерЗаписи.Должность = Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Организации

Процедура ПрочитатьДополнительныеДанныеОрганизации(Форма, Организация, ЗначениеКопирования = Неопределено) Экспорт	
		
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяРаботаСКоронавирусом")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ТерриторииОрганизацийПоКоронавирусу) Тогда
		МенеджерЗаписи = РегистрыСведений.ТерриторииОрганизацийПоКоронавирусу.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			Выборка = РегистрыСведений.ТерриторииОрганизацийПоКоронавирусу.Выбрать(Новый Структура("Организация", ЗначениеКопирования));
			Если Выборка.Следующий() Тогда 
				МенеджерЗаписи.Территория = Выборка.Территория;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.ТерриторииОрганизацийПоКоронавирусу);
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеОрганизации(Форма, Ссылка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяРаботаСКоронавирусом")
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ТерриторииОрганизацийПоКоронавирусу) Тогда
		МенеджерЗаписи = РегистрыСведений.ТерриторииОрганизацийПоКоронавирусу.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Форма.ТерриторииОрганизацийПоКоронавирусу);
		МенеджерЗаписи.Организация = Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	СписокОбъектов.Добавить(Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "fa3d93e9-146b-11eb-80cc-1831bf523c70", Метаданные.Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам, Истина);
	Списки.Вставить(Метаданные.Справочники.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникамПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.СтимулирующиеВыплатыФСС
	Описание = Описание + "
	|Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Чтение.ГруппыФизическихЛиц
	|Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Чтение.Организации
	|Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Изменение.ГруппыФизическихЛиц
	|Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Изменение.Организации
	|Справочник.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникамПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникамПрисоединенныеФайлы.Чтение.Организации
	|Справочник.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникамПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникамПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.СтимулирующиеВыплатыФСС
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам",
		"Дата",
		"Зарплата",
		"Организация");
	
КонецПроцедуры

#КонецОбласти

// Процедура обеспечивает сбор сведений о хранении данных,
// относящихся к персональным.
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации,
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КатегорииПолучателейСтимулирующихВыплатФСС) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.17.9";
		Обработчик.Процедура = "Справочники.КатегорииПолучателейСтимулирующихВыплатФСС.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.9";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eb8f7768-1834-11eb-80cc-1831bf523c70");
	Обработчик.Процедура = "РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.ОбновитьПодключаемыеХарактеристики";
	Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик';
									|en = 'Updating connected characteristics'");
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.9";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("615e325d-2d58-11eb-80ce-1831bf523c70");
	Обработчик.Процедура       = "СтимулирующиеВыплатыФСС.ДобавитьРолиРеестраСтимулирующихВыплатФССВПользовательскиеПрофили";
	Обработчик.Комментарий     = НСтр("ru = 'Добавление ролей реестра стимулирующих выплат ФСС в непоставляемые (пользовательские) профили групп доступа.';
										|en = 'Add SSF incentive payments registry roles to non-deliverable (custom) access group profiles.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ТерриторииСПовышающимКоэффициентомПоКоронавирусу) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.17.9";
		Обработчик.Процедура = "Справочники.ТерриторииСПовышающимКоэффициентомПоКоронавирусу.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.10";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("6df38bd3-2e8b-11eb-80ce-1831bf523c70");
	Обработчик.Процедура       = "Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ЗаполнитьБанкИЛицевойСчет";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение банковских реквизитов в реестре стимулирующих выплат ФСС';
										|en = 'Fill in bank details in the SSF incentive payments register'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КатегорииПолучателейСтимулирующихВыплатФСС) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.17.15";
		Обработчик.Процедура = "Справочники.КатегорииПолучателейСтимулирующихВыплатФСС.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КатегорииПолучателейСтимулирующихВыплатФСС) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.17.42";
		Обработчик.Процедура = "Справочники.КатегорииПолучателейСтимулирующихВыплатФСС.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.42";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("b2df409e-3626-11eb-80cf-1831bf523c70");
	Обработчик.Процедура       = "РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.ОчиститьПустыеСоответствия";
	Обработчик.Комментарий     = НСтр("ru = 'Очистка неактуальных элементов классификатора категорий получателей ФСС';
										|en = 'Clearing irrelevant elements of the SSF recipients category classifier'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.42";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9f87eda9-3a1b-11eb-80cf-1831bf523c70");
	Обработчик.Процедура       = "Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ЗаполнитьДатыНачалаИОкончания";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение периодов формирования в реестре стимулирующих выплат ФСС';
										|en = 'Populating generation periods in the SSF incentive payments register'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.45";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a35ae7a6-787f-4b18-bedb-655507549051");
	Обработчик.Процедура = "Документы.ПереводНаРаботуСКоронавирусом.ЗаполнитьСотрудников";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет сотрудников.';
									|en = 'Populates employees.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КатегорииПолучателейСтимулирующихВыплатФСС) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.25.17";
		Обработчик.Процедура = "Справочники.КатегорииПолучателейСтимулирующихВыплатФСС.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КатегорииПолучателейСтимулирующихВыплатФСС) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.27.80";
		Обработчик.Процедура = "Справочники.КатегорииПолучателейСтимулирующихВыплатФСС.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КатегорииПолучателейСтимулирующихВыплатФСС) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.29.36";
		Обработчик.Процедура = "Справочники.КатегорииПолучателейСтимулирующихВыплатФСС.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.29.72";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("0ebbb14c-25a7-4ff2-a186-7d55910fc484");
	Обработчик.Процедура       = "РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.ОбновитьПодключаемыеХарактеристики";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление подключаемых характеристик классификатора категорий получателей ФСС';
										|en = 'Updating characteristics of the SSF recipient category classifier'");

КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковПереходаСДругойПрограммы.
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	ИмяПроцедуры = "Справочники.КатегорииПолучателейСтимулирующихВыплатФСС.НачальноеЗаполнение";
	ОбщиеДанные  = Истина;
	ОбновлениеБЗК.ДобавитьОбработчикПерехода(Обработчики, ИмяПроцедуры, ОбщиеДанные, Истина, Ложь);
	
	ИмяПроцедуры = "Справочники.ТерриторииСПовышающимКоэффициентомПоКоронавирусу.НачальноеЗаполнение";
	ОбщиеДанные  = Истина;
	ОбновлениеБЗК.ДобавитьОбработчикПерехода(Обработчики, ИмяПроцедуры, ОбщиеДанные, Истина, Ложь);
	
КонецПроцедуры

Процедура ДобавитьРолиРеестраСтимулирующихВыплатФССВПользовательскиеПрофили(ПараметрыОбновления = Неопределено) Экспорт
	Контекст = УправлениеДоступомБЗК.КонтекстДобавляемыхРолей("СтимулирующиеВыплатыФСС.ДобавитьРолиРеестраСтимулирующихВыплатФССВПользовательскиеПрофили");
	
	// ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеНачисленнойЗарплаты", "ЧтениеРеестровСтимулирующихВыплат");
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеНачисленнойЗарплаты", "ДобавлениеИзменениеРеестровСтимулирующихВыплат");
	// Конец ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования", "ЧтениеРеестровСтимулирующихВыплат");
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования", "ДобавлениеИзменениеРеестровСтимулирующихВыплат");
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
			
	УправлениеДоступомБЗК.ДобавитьРолиВНепоставляемыеПрофили(Контекст);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область МетодыОбщихМеханизмов

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных)
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	Типы.Добавить(Метаданные.Справочники.КатегорииПолучателейСтимулирующихВыплатФСС);
	Типы.Добавить(Метаданные.Справочники.ТерриторииСПовышающимКоэффициентомПоКоронавирусу);

КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента.
Функция ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам") Тогда
		
		Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура УточнитьПараметрыВыбораФормыКатегорияПолучателяСтимулирующихВыплатФСС(ПараметрыВыбора) Экспорт
	
	НастройкиКадровогоУчета = КадровыйУчет.НастройкиКадровогоУчета();
	
	ПараметрыВыбораОтбор = Новый Массив;
	ПараметрыВыбораОтбор.Добавить(Новый ПараметрВыбора("Отбор.ПолучательСтимулирующихВыплатФСС",
		НастройкиКадровогоУчета.ПолучательСтимулирующихВыплатФСС));
	ПараметрыВыбораОтбор.Добавить(Новый ПараметрВыбора("Отбор.ОтдельнаяКатегорияМедицинскихРаботников",
		Ложь));
	ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОтбор);
	
КонецПроцедуры

Функция ПоследниеКартыМИРСотрудников(Сотрудники, Дата, Ссылка, ИмяТЧ="") Экспорт
	КартыМирСотрудников = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументКартыМир.Сотрудник КАК Сотрудник,
	|	ДокументКартыМир.Ссылка.Дата КАК Дата,
	|	ДокументКартыМир.СпособВыплатыПособия КАК СпособВыплатыПособия,
	|	ДокументКартыМир.КартаМИР КАК КартаМИР
	|ПОМЕСТИТЬ ВТКартыМИРСотрудников
	|ИЗ
	|	Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Сотрудники КАК ДокументКартыМир
	|ГДЕ
	|	ДокументКартыМир.Сотрудник В(&Сотрудники)
	|	И ДокументКартыМир.Ссылка.Дата <= &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыМИРСотрудников.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КартыМИРСотрудников.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТКартыМИРСотрудниковСрез
	|ИЗ
	|	ВТКартыМИРСотрудников КАК КартыМИРСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	КартыМИРСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыМИРСотрудниковСрез.Сотрудник КАК Сотрудник,
	|	КартыМИРСотрудниковСрез.Дата КАК Дата,
	|	КартыМИРСотрудников.СпособВыплатыПособия КАК СпособВыплатыПособия,
	|	КартыМИРСотрудников.КартаМИР КАК КартаМИР
	|ИЗ
	|	ВТКартыМИРСотрудниковСрез КАК КартыМИРСотрудниковСрез
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКартыМИРСотрудников КАК КартыМИРСотрудников
	|		ПО (КартыМИРСотрудников.Сотрудник = КартыМИРСотрудниковСрез.Сотрудник)
	|			И (КартыМИРСотрудников.Дата = КартыМИРСотрудниковСрез.Дата)
	|ГДЕ
	|	КартыМИРСотрудников.СпособВыплатыПособия = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПособия.НаКартуМИР)";
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Если Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("Дата", Новый МоментВремени(Дата, Ссылка));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Дата <=", "МоментВремени <");
	КонецЕсли;
	
	МетаданныеДокумента = Ссылка.Метаданные();
	ПутьКДаннымКарты = МетаданныеДокумента.Имя+?(ЗначениеЗаполнено(ИмяТЧ),"."+ИмяТЧ,"");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявлениеСотрудникаНаВыплатуПособия", ПутьКДаннымКарты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КартыМирСотрудников.Вставить(Выборка.Сотрудник, Выборка.КартаМИР);
	КонецЦикла;
	
	Возврат КартыМирСотрудников;
	
КонецФункции

#КонецОбласти
