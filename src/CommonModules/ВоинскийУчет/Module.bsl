
#Область СлужебныйПрограммныйИнтерфейс

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.БронированиеГражданПребывающихВЗапасе",			"Дата",		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтменаБронированияГражданПребывающихВЗапасе",	"Дата",		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СведенияОПриемеПереводеИУвольненииДляВоенкомата","Дата",		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СверкаСВоеннымКомиссариатом",					"Дата",		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СверкаСДокументамиВоинскогоУчета",				"Дата",		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ХодатайствоОБронированииГражданПребывающихВЗапасе","Дата",	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ВоинскийУчет", 							"Период", 	"КадровыйУчет", "");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ВоинскийУчет
	Списки.Вставить(Метаданные.Документы.БронированиеГражданПребывающихВЗапасе, Истина);
	Списки.Вставить(Метаданные.Справочники.БронированиеГражданПребывающихВЗапасеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЛистокСообщенияДляВоенкомата, Истина);
	Списки.Вставить(Метаданные.Справочники.ЛистокСообщенияДляВоенкоматаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтменаБронированияГражданПребывающихВЗапасе, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтменаБронированияГражданПребывающихВЗапасеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПриказОБронированииРаботников, Истина);
	Списки.Вставить(Метаданные.Справочники.ПриказОБронированииРаботниковПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПриказОПрекращенииБронирования, Истина);
	Списки.Вставить(Метаданные.Справочники.ПриказОПрекращенииБронированияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ХодатайствоОБронированииГражданПребывающихВЗапасе, Истина);
	Списки.Вставить(Метаданные.Справочники.ХодатайствоОБронированииГражданПребывающихВЗапасеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.СведенияОПриемеПереводеИУвольненииДляВоенкомата, Истина);
	Списки.Вставить(Метаданные.Справочники.СведенияОПриемеПереводеИУвольненииДляВоенкоматаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.СверкаСВоеннымКомиссариатом, Истина);
	Списки.Вставить(Метаданные.Справочники.СверкаСВоеннымКомиссариатомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.СверкаСДокументамиВоинскогоУчета, Истина);
	Списки.Вставить(Метаданные.Справочники.СверкаСДокументамиВоинскогоУчетаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.БронированиеГражданПребывающихВЗапасе, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.СверкаКарточекВоинскогоУчета, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВоинскийУчет, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ВоинскийУчет
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ВоинскийУчет
	Описание = Описание + "
	|Документ.БронированиеГражданПребывающихВЗапасе.Чтение.ГруппыФизическихЛиц
	|Документ.БронированиеГражданПребывающихВЗапасе.Чтение.Организации
	|Документ.БронированиеГражданПребывающихВЗапасе.Изменение.ГруппыФизическихЛиц
	|Документ.БронированиеГражданПребывающихВЗапасе.Изменение.Организации
	|Справочник.БронированиеГражданПребывающихВЗапасеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.БронированиеГражданПребывающихВЗапасеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.БронированиеГражданПребывающихВЗапасеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.БронированиеГражданПребывающихВЗапасеПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЛистокСообщенияДляВоенкомата.Чтение.ГруппыФизическихЛиц
	|Документ.ЛистокСообщенияДляВоенкомата.Чтение.Организации
	|Документ.ЛистокСообщенияДляВоенкомата.Изменение.ГруппыФизическихЛиц
	|Документ.ЛистокСообщенияДляВоенкомата.Изменение.Организации
	|Справочник.ЛистокСообщенияДляВоенкоматаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЛистокСообщенияДляВоенкоматаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЛистокСообщенияДляВоенкоматаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЛистокСообщенияДляВоенкоматаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОтменаБронированияГражданПребывающихВЗапасе.Чтение.ГруппыФизическихЛиц
	|Документ.ОтменаБронированияГражданПребывающихВЗапасе.Чтение.Организации
	|Документ.ОтменаБронированияГражданПребывающихВЗапасе.Изменение.ГруппыФизическихЛиц
	|Документ.ОтменаБронированияГражданПребывающихВЗапасе.Изменение.Организации
	|Справочник.ОтменаБронированияГражданПребывающихВЗапасеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОтменаБронированияГражданПребывающихВЗапасеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОтменаБронированияГражданПребывающихВЗапасеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОтменаБронированияГражданПребывающихВЗапасеПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПриказОБронированииРаботников.Чтение.ГруппыФизическихЛиц
	|Документ.ПриказОБронированииРаботников.Чтение.Организации
	|Документ.ПриказОБронированииРаботников.Изменение.ГруппыФизическихЛиц
	|Документ.ПриказОБронированииРаботников.Изменение.Организации
	|Справочник.ПриказОБронированииРаботниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПриказОБронированииРаботниковПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПриказОБронированииРаботниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПриказОБронированииРаботниковПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПриказОПрекращенииБронирования.Чтение.ГруппыФизическихЛиц
	|Документ.ПриказОПрекращенииБронирования.Чтение.Организации
	|Документ.ПриказОПрекращенииБронирования.Изменение.ГруппыФизическихЛиц
	|Документ.ПриказОПрекращенииБронирования.Изменение.Организации
	|Справочник.ПриказОПрекращенииБронированияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПриказОПрекращенииБронированияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПриказОПрекращенииБронированияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПриказОПрекращенииБронированияПрисоединенныеФайлы.Изменение.Организации
	|Документ.СведенияОПриемеПереводеИУвольненииДляВоенкомата.Чтение.ГруппыФизическихЛиц
	|Документ.СведенияОПриемеПереводеИУвольненииДляВоенкомата.Чтение.Организации
	|Документ.СведенияОПриемеПереводеИУвольненииДляВоенкомата.Изменение.ГруппыФизическихЛиц
	|Документ.СведенияОПриемеПереводеИУвольненииДляВоенкомата.Изменение.Организации
	|Справочник.СведенияОПриемеПереводеИУвольненииДляВоенкоматаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СведенияОПриемеПереводеИУвольненииДляВоенкоматаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СведенияОПриемеПереводеИУвольненииДляВоенкоматаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СведенияОПриемеПереводеИУвольненииДляВоенкоматаПрисоединенныеФайлы.Изменение.Организации
	|Документ.СверкаСВоеннымКомиссариатом.Чтение.ГруппыФизическихЛиц
	|Документ.СверкаСВоеннымКомиссариатом.Чтение.Организации
	|Документ.СверкаСВоеннымКомиссариатом.Изменение.ГруппыФизическихЛиц
	|Документ.СверкаСВоеннымКомиссариатом.Изменение.Организации
	|Справочник.СверкаСВоеннымКомиссариатомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СверкаСВоеннымКомиссариатомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СверкаСВоеннымКомиссариатомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СверкаСВоеннымКомиссариатомПрисоединенныеФайлы.Изменение.Организации
	|Документ.СверкаСДокументамиВоинскогоУчета.Чтение.ГруппыФизическихЛиц
	|Документ.СверкаСДокументамиВоинскогоУчета.Чтение.Организации
	|Документ.СверкаСДокументамиВоинскогоУчета.Изменение.ГруппыФизическихЛиц
	|Документ.СверкаСДокументамиВоинскогоУчета.Изменение.Организации
	|Справочник.СверкаСДокументамиВоинскогоУчетаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СверкаСДокументамиВоинскогоУчетаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СверкаСДокументамиВоинскогоУчетаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СверкаСДокументамиВоинскогоУчетаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ХодатайствоОБронированииГражданПребывающихВЗапасе.Чтение.ГруппыФизическихЛиц
	|Документ.ХодатайствоОБронированииГражданПребывающихВЗапасе.Чтение.Организации
	|Документ.ХодатайствоОБронированииГражданПребывающихВЗапасе.Изменение.ГруппыФизическихЛиц
	|Документ.ХодатайствоОБронированииГражданПребывающихВЗапасе.Изменение.Организации
	|Справочник.ХодатайствоОБронированииГражданПребывающихВЗапасеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ХодатайствоОБронированииГражданПребывающихВЗапасеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ХодатайствоОБронированииГражданПребывающихВЗапасеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ХодатайствоОБронированииГражданПребывающихВЗапасеПрисоединенныеФайлы.Изменение.Организации
	|ЖурналДокументов.БронированиеГражданПребывающихВЗапасе.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.БронированиеГражданПребывающихВЗапасе.Чтение.Организации
	|ЖурналДокументов.СверкаКарточекВоинскогоУчета.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.СверкаКарточекВоинскогоУчета.Чтение.Организации
	|РегистрСведений.ВоинскийУчет.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ВоинскийУчет.Изменение.ГруппыФизическихЛиц";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ВоинскийУчет
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Справочники.СоставыВоеннослужащих);
	СписокОбъектов.Добавить(Документы.БронированиеГражданПребывающихВЗапасе);
	СписокОбъектов.Добавить(Документы.ЛистокСообщенияДляВоенкомата);
	СписокОбъектов.Добавить(Документы.ОтменаБронированияГражданПребывающихВЗапасе);
	СписокОбъектов.Добавить(Документы.ПриказОБронированииРаботников);
	СписокОбъектов.Добавить(Документы.ПриказОПрекращенииБронирования);
	СписокОбъектов.Добавить(Документы.СведенияОПриемеПереводеИУвольненииДляВоенкомата);
	СписокОбъектов.Добавить(Документы.СверкаСВоеннымКомиссариатом);
	СписокОбъектов.Добавить(Документы.СверкаСДокументамиВоинскогоУчета);
	СписокОбъектов.Добавить(Документы.ХодатайствоОБронированииГражданПребывающихВЗапасе);
	
КонецПроцедуры

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ВоинскийУчет
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfa8-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.БронированиеГражданПребывающихВЗапасе);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf5f-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЛистокСообщенияДляВоенкомата);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf7e-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтменаБронированияГражданПребывающихВЗапасе);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "25288a3f-d90b-4ae0-a16a-1b29146c87c7", Метаданные.Документы.ПриказОБронированииРаботников);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "248a58d8-6de4-4c43-b724-e178d966e961", Метаданные.Документы.ПриказОПрекращенииБронирования);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "644f651f-129e-45d5-abad-c77bed9f820a", Метаданные.Документы.СведенияОПриемеПереводеИУвольненииДляВоенкомата);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "b8b4e31f-6c35-4df7-9371-5d45facf6d40", Метаданные.Документы.СверкаСВоеннымКомиссариатом);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "efa2f515-5f75-4566-9ab7-5d215f4d1d16", Метаданные.Документы.СверкаСДокументамиВоинскогоУчета);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf54-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ХодатайствоОБронированииГражданПребывающихВЗапасе);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf9d-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Военкоматы);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbeeb-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ЗванияГражданскогоВоинскогоУчета);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf97-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.СоставыВоеннослужащих);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ВоинскийУчет
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных, ИсключаемыеПоля = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоинскийУчет") Тогда
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетВоенкомат";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.Военкоматы.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.Военкомат";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетВУС";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ВУС";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетГодность";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ГодностьКВоеннойСлужбе.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.Годность";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетПериодРегистрации";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ДатаВнесенияСведений";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетЗвание";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ЗванияГражданскогоВоинскогоУчета.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.Звание";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетКатегорияЗапаса";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.КатегорииЗапасаВоеннообязанных.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.КатегорияЗапаса";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетНаличиеМобпредписания";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ИСТИНА";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.НаличиеМобпредписания";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетНомерКомандыПартии";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.НомерКомандыПартии";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетОтношениеКВоинскойОбязанности";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ОтношениеКВоинскойОбязанности.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ОтношениеКВоинскойОбязанности";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетОтношениеКВоинскомуУчету";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ОтношениеКВоинскомуУчету.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ОтношениеКВоинскомуУчету";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетПунктПеречня";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ПереченьДолжностейДляБронированияГраждан.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ПунктПеречня";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетСостав";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СоставыВоеннослужащих.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.Состав";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетЗабронированОрганизациейПериодРегистрации";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ДатаБронирования";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетЗабронированОрганизацией";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ЗабронированОрганизацией";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетДатаСнятияСВоинскогоУчета";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ДатаСнятияСВоинскогоУчета";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетДатаОформленияОтсрочки";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ДатаОформленияОтсрочки";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетСерияУдостоверенияОбОтсрочке";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.СерияУдостоверенияОбОтсрочке";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетНомерУдостоверенияОбОтсрочке";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.НомерУдостоверенияОбОтсрочке";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетДатаСписка";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ДатаСписка";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетИсходящийНомерСписка";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ИсходящийНомерСписка";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетПринадлежностьККазачеству";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ПринадлежностьККазачеству";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетАдминистративныеВзыскания";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.АдминистративныеВзыскания";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетДопускКонтрольныхОрганов";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ДопускКонтрольныхОрганов";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетПрохождениеВоенныхСборов";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ПрохождениеВоенныхСборов";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетКонтрактНаПребываниеВРезерве";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.КонтрактНаПребываниеВРезерве";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
		ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
		ОписаниеПоля.ИмяПоля = "ВоинскийУчетДополнительныеСведенияКарточки";
		ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
		ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВоинскийУчет.ДополнительныеСведенияКарточки";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
		
	КонецЕсли;
	
КонецПроцедуры

// Сведения о воинском учете

Функция ДобавитьПолеСведенийОВоинскомУчетеФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОВоинскомУчетеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОВоинскомУчетеФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОВоинскомУчетеФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОВоинскомУчетеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОВоинскомУчетеФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОВоинскомУчетеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОВоинскомУчетеФизическихЛиц КАК ВоинскийУчет
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ВоинскийУчет.ФизическоеЛицо
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ВоинскийУчет.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОВоинскомУчетеФизическихЛиц");
	
КонецПроцедуры

Функция НеобходимыСведенияОВоинскомУчетеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации")
		Или ИмяПоля = ВРег("ВоинскийУчетКатегорияЗапаса")
		Или ИмяПоля = ВРег("ВоинскийУчетЗвание")
		Или	ИмяПоля = ВРег("ВоинскийУчетСостав")
		Или	ИмяПоля = ВРег("ВоинскийУчетВУС")
		Или	ИмяПоля = ВРег("ВоинскийУчетГодность")
		Или	ИмяПоля = ВРег("ВоинскийУчетВоенкомат")
		Или	ИмяПоля = ВРег("ВоинскийУчетНомерКомандыПартии")
		Или	ИмяПоля = ВРег("ВоинскийУчетПунктПеречня")
		Или	ИмяПоля = ВРег("ВоинскийУчетНаличиеМобпредписания")
		Или	ИмяПоля = ВРег("ВоинскийУчетДатаСнятияСВоинскогоУчета")
		Или	ИмяПоля = ВРег("ВоинскийУчетДатаОформленияОтсрочки")
		Или	ИмяПоля = ВРег("ВоинскийУчетСерияУдостоверенияОбОтсрочке")
		Или	ИмяПоля = ВРег("ВоинскийУчетНомерУдостоверенияОбОтсрочке")
		Или	ИмяПоля = ВРег("ВоинскийУчетДатаСписка")
		Или	ИмяПоля = ВРег("ВоинскийУчетИсходящийНомерСписка")
		Или	ИмяПоля = ВРег("ВоинскийУчетПринадлежностьККазачеству")
		Или	ИмяПоля = ВРег("ВоинскийУчетАдминистративныеВзыскания")
		Или	ИмяПоля = ВРег("ВоинскийУчетДопускКонтрольныхОрганов")
		Или	ИмяПоля = ВРег("ВоинскийУчетПрохождениеВоенныхСборов")
		Или	ИмяПоля = ВРег("ВоинскийУчетКонтрактНаПребываниеВРезерве")
		Или	ИмяПоля = ВРег("ВоинскийУчетДополнительныеСведенияКарточки")
		Или ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскойОбязанности")
		Или ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскомуУчету");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОВоинскомУчетеФизическихЛиц(КритерииПоиска, УсловиеПоиска) Экспорт
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОВоинскомУчетеФизическихЛиц(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			Иначе
				
				УсловиеПоиска.ЛевоеЗначение = Сред(ИмяПоля, СтрДлина("ВоинскийУчет") + 1);
				
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ВоинскийУчет", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОВоинскомУчетеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации") Тогда
		ПутьКДанным = "	ВоинскийУчет.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетКатегорияЗапаса") Тогда
		ПутьКДанным = "	ВоинскийУчет.КатегорияЗапаса";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗвание") Тогда
		ПутьКДанным = "	ВоинскийУчет.Звание";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетСостав") Тогда
		ПутьКДанным = "	ВоинскийУчет.Состав";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетВУС") Тогда
		ПутьКДанным = "	ВоинскийУчет.ВУС";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетГодность") Тогда
		ПутьКДанным = "	ВоинскийУчет.Годность";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетВоенкомат") Тогда
		ПутьКДанным = "	ВоинскийУчет.Военкомат";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетНомерКомандыПартии") Тогда
		ПутьКДанным = "	ВоинскийУчет.НомерКомандыПартии";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетПунктПеречня") Тогда
		ПутьКДанным = "	ВоинскийУчет.ПунктПеречня";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетНаличиеМобпредписания") Тогда
		ПутьКДанным = "	ВоинскийУчет.НаличиеМобпредписания";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетДатаСнятияСВоинскогоУчета") Тогда
		ПутьКДанным = "	ВоинскийУчет.ДатаСнятияСВоинскогоУчета";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетДатаОформленияОтсрочки") Тогда
		ПутьКДанным = "	ВоинскийУчет.ДатаОформленияОтсрочки";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетСерияУдостоверенияОбОтсрочке") Тогда
		ПутьКДанным = "	ВоинскийУчет.СерияУдостоверенияОбОтсрочке";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетНомерУдостоверенияОбОтсрочке") Тогда
		ПутьКДанным = "	ВоинскийУчет.НомерУдостоверенияОбОтсрочке";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетДатаСписка") Тогда
		ПутьКДанным = "	ВоинскийУчет.ДатаСписка";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетИсходящийНомерСписка") Тогда
		ПутьКДанным = "	ВоинскийУчет.ИсходящийНомерСписка";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетПринадлежностьККазачеству") Тогда
		ПутьКДанным = "	ВоинскийУчет.ПринадлежностьККазачеству";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетАдминистративныеВзыскания") Тогда
		ПутьКДанным = "	ВоинскийУчет.АдминистративныеВзыскания";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетДопускКонтрольныхОрганов") Тогда
		ПутьКДанным = "	ВоинскийУчет.ДопускКонтрольныхОрганов";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетПрохождениеВоенныхСборов") Тогда
		ПутьКДанным = "	ВоинскийУчет.ПрохождениеВоенныхСборов";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетКонтрактНаПребываниеВРезерве") Тогда
		ПутьКДанным = "	ВоинскийУчет.КонтрактНаПребываниеВРезерве";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетДополнительныеСведенияКарточки") Тогда
		ПутьКДанным = "	ВоинскийУчет.ДополнительныеСведенияКарточки";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскойОбязанности") Тогда
		ПутьКДанным = "	ВоинскийУчет.ОтношениеКВоинскойОбязанности";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскомуУчету") Тогда
		ПутьКДанным = "	ВоинскийУчет.ОтношениеКВоинскомуУчету";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о бронировании

Функция ДобавитьПолеСведенийОБронированииСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОБронированииСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОБронированииСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОБронированииСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОБронированииСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОБронированииСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросВТ = ЗапросВТСведенияОБронированииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБронированииСотрудников КАК БронированиеСотрудников
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = БронированиеСотрудников.ФизическоеЛицо
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = БронированиеСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОБронированииСотрудников");
	
КонецПроцедуры

Функция НеобходимыСведенияОБронированииСотрудников(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации")
		Или ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизациейРегистратор")
		Или ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизацией")
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОБронированииГражданОрганизациями(КритерииПоиска, УсловиеПоиска) Экспорт
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОБронированииСотрудников(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
			
			Если ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
			ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизацией") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Организация";
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.БронированиеСотрудников", УсловиеПоиска);
		
	КонецЕсли;
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОБронированииСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации") Тогда
		ПутьКДанным = "	БронированиеСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейРегистратор") Тогда
		ПутьКДанным = "	БронированиеСотрудников.Регистратор";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизацией") Тогда
		ПутьКДанным = "	БронированиеСотрудников.Организация";
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

// Предназначена для получения настроек подсистемы.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиВоинскогоУчета() Экспорт
	
	НастройкиВоинскогоУчета = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
	НастройкиВоинскогоУчета.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиВоинскогоУчета, Метаданные.РегистрыСведений.НастройкиВоинскогоУчета);
	
	Если НастройкиВоинскогоУчета.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьВоинскийУчет", Ложь);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьМобилизационныеПредписания", Ложь);
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ЗапросВТСведенияОВоинскомУчетеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОВоинскомУчетеФизическихЛиц = "ВТСведенияОВоинскомУчетеФизическихЛиц") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ВоинскийУчет", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ВоинскийУчет", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОВоинскомУчетеФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОБронированииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОБронированииСотрудников = "ВТСведенияОБронированииСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("БронированиеСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"БронированиеСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОБронированииСотрудников);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура НачальноеЗаполнениеВоинскихСоставовИЗваний() Экспорт
	
	Справочники.СоставыВоеннослужащих.НачальноеЗаполнение();
	Справочники.ЗванияГражданскогоВоинскогоУчета.НачальноеЗаполнение();
	
КонецПроцедуры

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных.
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ВоинскийУчет;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ВУС.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.НомерКомандыПартии.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДатаСнятияСВоинскогоУчета.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДатаОформленияОтсрочки.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.СерияУдостоверенияОбОтсрочке.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.НомерУдостоверенияОбОтсрочке.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДатаСписка.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ИсходящийНомерСписка.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ПринадлежностьККазачеству.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.АдминистративныеВзыскания.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДопускКонтрольныхОрганов.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ПрохождениеВоенныхСборов.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.КонтрактНаПребываниеВРезерве.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Ресурсы.ДополнительныеСведенияКарточки.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "ВоинскийУчет";
	
КонецПроцедуры

#КонецОбласти

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт

	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ВоинскийУчетБронирование);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ВоинскийУчетОбщий);
	
КонецПроцедуры

Функция ДополнитьКоллекциюМакетовВариантовОтчетовПечатныхФорм(МакетыВариантовОтчетов) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВоинскийУчет") Тогда
		
		МакетыВариантовОтчетов.Вставить("Отчет.ВоинскийУчетОбщий.ИзвещениеОПриемеУвольнении", 
			"Отчет.ВоинскийУчетОбщий.ПФ_MXL_ИзвещениеОПриемеУвольнении2017");
		
		МакетыВариантовОтчетов.Вставить("Отчет.ВоинскийУчетОбщий.СписокГражданПодлежащихПостановкеНаВоинскийУчет", 
			"Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокГражданПодлежащихПостановкеНаВоинскийУчет2017");
		
		МакетыВариантовОтчетов.Вставить("Отчет.ВоинскийУчетОбщий.СписокЮношейДляОВК", 
			"Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокЮношейДляОВК2017");
		
		МакетыВариантовОтчетов.Вставить("Отчет.ВоинскийУчетОбщий.СписокДляСверкиСВоенкоматом", 
			"Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокДляСверкиСВоенкоматом2021");
		
		МакетыВариантовОтчетов.Вставить("Отчет.ВоинскийУчетОбщий.КарточкаГражданинаПодлежащегоВоинскомуУчету", 
			"Отчет.ВоинскийУчетОбщий.ПФ_MXL_КарточкаГражданинаПодлежащегоВоинскомуУчету");
		
	КонецЕсли;
	
КонецФункции

#Область РаботаСДополнительнымиФормами

Процедура СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ, ТекущийОбъект) Экспорт
	
	Если ИмяФормы = "Справочник.ФизическиеЛица.Форма.ВоинскийУчет" Тогда
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(Форма, "ВоинскийУчет", Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияДанных

Процедура ДляРегламентированныхДанных(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенныйСинхронизацияДанных");
		МодульНастройкиОбработчиков.ДляРегламентированныхДанных(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДляСправочникаПрисоединенныхФайлов(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенныйСинхронизацияДанных");
		МодульНастройкиОбработчиков.ДляСправочникаПрисоединенныхФайлов(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДляОтбораПоОрганизации(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенныйСинхронизацияДанных");
		МодульНастройкиОбработчиков.ДляОтбораПоОрганизации(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДляОбъектаСПрисоединеннымиФайлами(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенныйСинхронизацияДанных");
		МодульНастройкиОбработчиков.ДляОбъектаСПрисоединеннымиФайлами(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДляРегистраПодчиненногоРегистратору(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенныйСинхронизацияДанных");
		МодульНастройкиОбработчиков.ДляРегистраПодчиненногоРегистратору(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДляНезависимогоРегистра(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенныйСинхронизацияДанных");
		МодульНастройкиОбработчиков.ДляНезависимогоРегистра(Настройки, "ФизическоеЛицо",
			"РегламентированныеДанные");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбъединениеДублей

// Параметры:
//  ОписанияРегистров - Массив из Структура
Процедура ДополнитьОписанияРегистровСведенийПриОбъединенииДублей(ОписанияРегистров) Экспорт
	
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(Метаданные.РегистрыСведений.ВоинскийУчет.Имя));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ВоинскийУчет.НачальноеЗаполнениеВоинскихСоставовИЗваний";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.2";
	Обработчик.Процедура = "ВоинскийУчет.ЗаполнитьСоставСотрудниковДокументовВоинскогоУчета";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("edb60159-bd79-417c-9544-b72374ec548b");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра Физические лица документов.';
									|en = 'Fill in the ""Document individuals"" register.'");
	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.206";
	Обработчик.Процедура = "ВоинскийУчет.ЗаполнитьНаименованиеПеречняДолжностейДляБронированияГраждан";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d60b6762-d329-4c31-883d-346de276c518");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение справочника Перечень должностей для бронирования.';
									|en = 'Fill in the Position list for reservation catalog.'");
	
КонецПроцедуры

Процедура ЗаполнитьСоставСотрудниковДокументовВоинскогоУчета(ПараметрыОбновления = Неопределено) Экспорт
	
	ТипыДокументовФизическихЛиц = Новый Массив;
	ТипыДокументовФизическихЛиц.Добавить(Тип("ДокументСсылка.БронированиеГражданПребывающихВЗапасе"));
	ТипыДокументовФизическихЛиц.Добавить(Тип("ДокументСсылка.ОтменаБронированияГражданПребывающихВЗапасе"));
	ТипыДокументовФизическихЛиц.Добавить(Тип("ДокументСсылка.ХодатайствоОБронированииГражданПребывающихВЗапасе"));
	
	Пока Истина Цикл
		
		КоличествоКОбработке = 1000;
		Запрос = Новый Запрос;
		ЧастиЗапроса = Новый Массив;
		МассивДокументов = Новый Массив;
		
		Для Каждого ТипДокумента Из ТипыДокументовФизическихЛиц Цикл
			
			Если КоличествоКОбработке <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Документ = Метаданные.НайтиПоТипу(ТипДокумента);
			
			ОписаниеДокумента = Документы[Документ.Имя].ОписаниеСоставаОбъекта();
			
			Запрос = Новый Запрос;
			Запрос.Текст = ЗапросДокументовКОбработке(Документ.Имя, ОписаниеДокумента, КоличествоКОбработке);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументыКОбработке = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов, ДокументыКОбработке);
			КоличествоКОбработке = КоличествоКОбработке - ДокументыКОбработке.Количество();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧастиЗапроса, ЧастиЗапросаПоТаблицамДокумента(Документ.Имя, ОписаниеДокумента));
			
		КонецЦикла;
		
		Если МассивДокументов.Количество() = 0 Тогда
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
			Возврат;
		Иначе
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		КонецЕсли;
		
		Разделитель = "
			|ОБЪЕДИНИТЬ
			|";
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Разделитель);
		Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ДокументФизическогоЛица";
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("ДокументФизическогоЛица") Цикл
				
			НаборЗаписейФизическиеЛицаДокумента = РегистрыСведений.ФизическиеЛицаДокументов.СоздатьНаборЗаписей();
			ФизическиеЛицаОграниченияДоступа = Новый Соответствие;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.Сотрудник)
					И Не ЗначениеЗаполнено(Выборка.ФизическоеЛицо) Тогда
					
					Продолжить;
				КонецЕсли;
				
				Если Выборка.ИспользоватьОграничениеДоступа 
					И ФизическиеЛицаОграниченияДоступа[Выборка.ФизическоеЛицо] = Неопределено Тогда
					
					ЗаполнитьЗначенияСвойств(НаборЗаписейФизическиеЛицаДокумента.Добавить(), Выборка);
					ФизическиеЛицаОграниченияДоступа.Вставить(Выборка.ФизическоеЛицо, Истина);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписейФизическиеЛицаДокумента.Количество() > 0 Тогда
				НаборЗаписейФизическиеЛицаДокумента.Отбор.ДокументФизическогоЛица.Установить(Выборка.ДокументФизическогоЛица);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейФизическиеЛицаДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыОбновления <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеПеречняДолжностейДляБронированияГраждан(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПереченьДолжностейДляБронированияГраждан.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПереченьДолжностейДляБронированияГраждан КАК ПереченьДолжностейДляБронированияГраждан
		|ГДЕ
		|	ПереченьДолжностейДляБронированияГраждан.Код <> """"
		|	И ПереченьДолжностейДляБронированияГраждан.Наименование = """"";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ПереченьДолжностейДляБронированияГраждан", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ПунктПеречня = Выборка.Ссылка.ПолучитьОбъект();
		ПунктПеречня.Наименование = ПунктПеречня.Код;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПунктПеречня);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросДокументовКОбработке(ИмяДокумента, ОписаниеДокумента, КоличествоКОбработке)
	
	ТекстЗапросаДокументов = 
		"ВЫБРАТЬ
		|	ДокументФизическихЛиц.Ссылка
		|ПОМЕСТИТЬ ПустыеДокументы
		|ИЗ
		|	#ДокументФизическихЛиц КАК ДокументФизическихЛиц
		|ГДЕ
		|	&УсловиеПустыхФизическихЛиц
		|;
		|/////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДокументКОбработке.Ссылка
		|ИЗ
		|	#ДокументФизическихЛиц КАК ДокументКОбработке
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДокументов КАК ФизическиеЛицаДокументов
		|		ПО ДокументКОбработке.Ссылка = ФизическиеЛицаДокументов.ДокументФизическогоЛица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПустыеДокументы КАК ПустыеДокументы
		|		ПО ДокументКОбработке.Ссылка = ПустыеДокументы.Ссылка
		|ГДЕ
		|	ФизическиеЛицаДокументов.ДокументФизическогоЛица ЕСТЬ NULL
		|	И ПустыеДокументы.Ссылка ЕСТЬ NULL";
		
	
	ТекстЗапросаДокументов = СтрЗаменить(ТекстЗапросаДокументов, "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(КоличествоКОбработке, "ЧГ=0"));
	ТекстЗапросаДокументов = СтрЗаменить(ТекстЗапросаДокументов, "#ДокументФизическихЛиц", "Документ." + ИмяДокумента);
	УсловиеТаблицы = "
		|	НЕ 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				#ТаблицаДокумент КАК ТаблицаДокумент
		|			ГДЕ
		|				ТаблицаДокумент.Ссылка = ДокументФизическихЛиц.Ссылка
		|				И _ПолеФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
	
	Разделитель = "
		|	И ";
	ЧастиЗапроса = ЧастиЗапросаПоШаблонуОписаниюДокумента(УсловиеТаблицы, ИмяДокумента, ОписаниеДокумента);
	УсловиеПустыхФизическихЛиц = СтрСоединить(ЧастиЗапроса, Разделитель);
	ТекстЗапросаДокументов = СтрЗаменить(ТекстЗапросаДокументов, "&УсловиеПустыхФизическихЛиц", УсловиеПустыхФизическихЛиц);
	
	Возврат ТекстЗапросаДокументов;
	
КонецФункции
	
Функция ЧастиЗапросаПоТаблицамДокумента(ИмяДокумента, ОписаниеДокумента)
	
	ТекстШаблонаЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокумент.Ссылка КАК ДокументФизическогоЛица,
		|	_ПолеСотрудник КАК Сотрудник,
		|	_ПолеГоловнойСотрудник КАК ГоловнойСотрудник,
		|	_ПолеФизическоеЛицо КАК ФизическоеЛицо,
		|	_ЗаполнятьСоставДокументов КАК ЗаполнятьСоставДокументов,
		|	_ИспользоватьОграничениеДоступа КАК ИспользоватьОграничениеДоступа
		|ИЗ
		|	#ТаблицаДокумент КАК ТаблицаДокумент
		|ГДЕ
		|	ТаблицаДокумент.Ссылка В (&МассивДокументов)";
	
	Возврат ЧастиЗапросаПоШаблонуОписаниюДокумента(ТекстШаблонаЗапроса, ИмяДокумента, ОписаниеДокумента);
	
КонецФункции

Функция ЧастиЗапросаПоШаблонуОписаниюДокумента(ШаблонЧастиЗапроса, ИмяДокумента, ОписаниеДокумента)
	
	ЧастиЗапроса = Новый Массив;
	Для Каждого ОписаниеСостава Из ОписаниеДокумента.ОписаниеХраненияСотрудниковФизическихЛиц Цикл
		
		ТекстЧастиЗапроса = ШаблонЧастиЗапроса;
		ИмяТаблицыДокумента = ИмяДокумента;
		Если ОписаниеСостава.ИмяТаблицы <> Неопределено Тогда
			ИмяТаблицыДокумента = ИмяТаблицыДокумента + "." + ОписаниеСостава.ИмяТаблицы;
		КонецЕсли;
		ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "#ТаблицаДокумент", "Документ." + ИмяТаблицыДокумента);
		
		Если ОписаниеСостава.ПолеФизическоеЛицо <> Неопределено Тогда
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ПолеФизическоеЛицо", "ТаблицаДокумент." + ОписаниеСостава.ПолеФизическоеЛицо);
		ИначеЕсли ОписаниеСостава.ПолеСотрудник <> Неопределено Тогда
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ПолеФизическоеЛицо", "ТаблицаДокумент." + ОписаниеСостава.ПолеСотрудник + ".ФизическоеЛицо");
		Иначе
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ПолеФизическоеЛицо", "НЕОПРЕДЕЛЕНО");
		КонецЕсли;
		
		Если ОписаниеСостава.ПолеСотрудник <> Неопределено Тогда
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ПолеСотрудник", "ТаблицаДокумент." + ОписаниеСостава.ПолеСотрудник);
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ПолеГоловнойСотрудник", "ТаблицаДокумент." + ОписаниеСостава.ПолеСотрудник + ".ГоловнойСотрудник");
		Иначе
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ПолеСотрудник", "НЕОПРЕДЕЛЕНО");
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ПолеГоловнойСотрудник", "НЕОПРЕДЕЛЕНО");
		КонецЕсли;
		
		Если ОписаниеДокумента.ЗаполнятьСоставДокументов Тогда
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ЗаполнятьСоставДокументов", "ИСТИНА");
		Иначе
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ЗаполнятьСоставДокументов", "ЛОЖЬ");
		КонецЕсли;
		
		Если ОписаниеДокумента.ИспользоватьОграничениеДоступа Тогда
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ИспользоватьОграничениеДоступа", "ИСТИНА");
		Иначе
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "_ИспользоватьОграничениеДоступа", "ЛОЖЬ");
		КонецЕсли;
		
		ЧастиЗапроса.Добавить(ТекстЧастиЗапроса);
		
	КонецЦикла;
	
	Возврат ЧастиЗапроса;
	
КонецФункции

Процедура ПечатьКарточкиГражданинаПодлежащегоВоинскомуУчету(МассивОбъектов, КоллекцияПечатныхФорм) Экспорт 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	Карточка = Отчеты.ВоинскийУчетОбщий.Создать();
	Карточка.ИнициализироватьОтчет();
	Карточка.КомпоновщикНастроек.ЗагрузитьНастройки(Карточка.СхемаКомпоновкиДанных.ВариантыНастроек.КарточкаГражданинаПодлежащегоВоинскомуУчету.Настройки);
	
	Отбор = Карточка.КомпоновщикНастроек.Настройки.Отбор;
	
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, МассивОбъектов);
	
	Карточка.СкомпоноватьРезультат(ДокументРезультат);
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_КарточкаГражданинаПодлежащегоВоинскомуУчету", НСтр("ru = 'Карточка гражданина, подлежащего воинскому учету';
																	|en = 'Card of a citizen subject to military registration'"),
		ДокументРезультат);
	
КонецПроцедуры

Процедура ИнициализироватьОтчетТ2(ОтчетОбъект) Экспорт
	
	Для Каждого НаборДанных Из ОтчетОбъект.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление",
				"ЗНАЧЕНИЕ(Перечисление.КатегорииЗапасаВоеннообязанных.ПустаяСсылка) КАК ВоинскийУчетКатегорияЗапаса,
				|	ЗНАЧЕНИЕ(Справочник.ЗванияГражданскогоВоинскогоУчета.ПустаяСсылка) КАК ВоинскийУчетЗвание,
				|	ЗНАЧЕНИЕ(Справочник.СоставыВоеннослужащих.ПустаяСсылка) КАК ВоинскийУчетСостав,
				|	"""" КАК ВоинскийУчетВУС,
				|	ЗНАЧЕНИЕ(Перечисление.ГодностьКВоеннойСлужбе.ПустаяСсылка) КАК ВоинскийУчетГодность,
				|	ЗНАЧЕНИЕ(Справочник.Военкоматы.ПустаяСсылка) КАК ВоинскийУчетВоенкомат,
				|	"""" КАК ВоинскийУчетНомерКомандыПартии,
				|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ВоинскийУчетЗабронированОрганизацией,
				|	ЗНАЧЕНИЕ(Перечисление.ОтношениеКВоинскойОбязанности.ПустаяСсылка) КАК ВоинскийУчетОтношениеКВоинскойОбязанности,
				|	ЗНАЧЕНИЕ(Перечисление.ОтношениеКВоинскомуУчету.ПустаяСсылка) КАК ВоинскийУчетОтношениеКВоинскомуУчету,
				|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление");
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетКатегорияЗапаса,",
				"КадровыеДанныеСотрудников.ВоинскийУчетКатегорияЗапаса КАК ВоинскийУчетКатегорияЗапаса,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетЗвание,",
				"КадровыеДанныеСотрудников.ВоинскийУчетЗвание КАК ВоинскийУчетЗвание,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетСостав,",
				"КадровыеДанныеСотрудников.ВоинскийУчетСостав КАК ВоинскийУчетСостав,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетВУС,",
				"КадровыеДанныеСотрудников.ВоинскийУчетВУС КАК ВоинскийУчетВУС,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетГодность,",
				"КадровыеДанныеСотрудников.ВоинскийУчетГодность КАК ВоинскийУчетГодность,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетВоенкомат,",
				"КадровыеДанныеСотрудников.ВоинскийУчетВоенкомат КАК ВоинскийУчетВоенкомат,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетНомерКомандыПартии,",
				"КадровыеДанныеСотрудников.ВоинскийУчетНомерКомандыПартии КАК ВоинскийУчетНомерКомандыПартии,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетОтношениеКВоинскойОбязанности,",
				"КадровыеДанныеСотрудников.ВоинскийУчетОтношениеКВоинскойОбязанности КАК ВоинскийУчетОтношениеКВоинскойОбязанности,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетОтношениеКВоинскомуУчету,",
				"КадровыеДанныеСотрудников.ВоинскийУчетОтношениеКВоинскомуУчету КАК ВоинскийУчетОтношениеКВоинскомуУчету,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетОтметкаОСнятиеСУчета,",
				"	ВЫБОР
				|			КОГДА КадровыеДанныеСотрудников.ВоинскийУчетОтношениеКВоинскомуУчету В (ЗНАЧЕНИЕ(Перечисление.ОтношениеКВоинскомуУчету.СнятПоВозрасту), ЗНАЧЕНИЕ(Перечисление.ОтношениеКВоинскомуУчету.СнятПоСостояниюЗдоровья))
				|				ТОГДА КадровыеДанныеСотрудников.ВоинскийУчетОтношениеКВоинскомуУчету
				|			ИНАЧЕ """"
				|	КОНЕЦ КАК ВоинскийУчетОтметкаОСнятиеСУчета,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВоинскийУчетЗабронированОрганизацией,",
				"КадровыеДанныеСотрудников.ВоинскийУчетЗабронированОрганизацией КАК ВоинскийУчетЗабронированОрганизацией,");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Обработчики.Добавить(ВоинскийУчет);
	
КонецПроцедуры

Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоинскийУчет") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеВоинскогоУчета", , Ложь)
		Или Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ИзменениеСведенийФизическихЛиц) Тогда
		Возврат;
	КонецЕсли;
	
	Раздел = НСтр("ru = 'Воинский учет';
					|en = 'Military registration'");
	
	СКД = Отчеты.АнализИзмененийЛичныхДанныхСотрудников.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИсточникДоступныхНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.ВариантыНастроек["АнализИзмененийЛичныхДанныхСотрудников"].Настройки);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиОтчета.Структура.Очистить();
	НастройкиОтчета.Выбор.Элементы.Очистить();
	
	ДатаОкончания = ТекущаяДатаСеанса();
	ПериодОтчета = Новый СтандартныйПериод(ДатаОкончания - 86400 * 14, ДатаОкончания);
	
	ПараметрПериодОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	Если ПараметрПериодОтчета <> Неопределено Тогда
		ПараметрПериодОтчета.Значение.ДатаНачала = ПериодОтчета.ДатаНачала;
		ПараметрПериодОтчета.Значение.ДатаОкончания  = ПериодОтчета.ДатаОкончания;
		ПараметрПериодОтчета.Использование = Истина;
	КонецЕсли;
	
	ПараметрПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ПараметрПериод <> Неопределено Тогда
		ПараметрПериод.Значение = ПериодОтчета.ДатаОкончания;
		ПараметрПериод.Использование = Истина;
	КонецЕсли;	
	
	Группировка = НастройкиОтчета.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.ПоляГруппировки.Элементы.Очистить();
	Группировка.Выбор.Элементы.Очистить();
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "Период");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "Организация");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "Сотрудник");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "КатегорияСведений");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "ПрежнееЗначение");
	ОтчетыСервер.ДобавитьВыбранноеПоле(НастройкиОтчета.Выбор, "УстановленноеЗначение");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СКД));
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СКД, НастройкиОтчета);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ИзменениеЛичныхДанных = Новый ТаблицаЗначений;
	ИзменениеЛичныхДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзменениеЛичныхДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзменениеЛичныхДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда 
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ИзменениеЛичныхДанных.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИзменениеЛичныхДанных", ИзменениеЛичныхДанных);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзменениеЛичныхДанных.Период КАК Период,
		|	ИзменениеЛичныхДанных.Организация КАК Организация,
		|	ИзменениеЛичныхДанных.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИзменениеЛичныхДанных КАК ИзменениеЛичныхДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсходныеДанные.Организация КАК Организация,
		|	ИсходныеДанные.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистокСообщенияДляВоенкомата КАК ЛистокСообщенияДляВоенкомата
		|		ПО ИсходныеДанные.Сотрудник = ЛистокСообщенияДляВоенкомата.Сотрудник
		|			И ИсходныеДанные.Период <= ЛистокСообщенияДляВоенкомата.Дата
		|			И (ЛистокСообщенияДляВоенкомата.Проведен)
		|ГДЕ
		|	ЛистокСообщенияДляВоенкомата.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизаций = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Организация = Выборка.Организация;
		Сотрудники = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Сотрудники.Добавить(Выборка.Сотрудник); 
		КонецЦикла;
		ДанныеОрганизаций.Вставить(Организация, Сотрудники);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеОрганизаций Цикл 
		
		Организация = КлючИЗначение.Ключ;
		Сотрудники = КлючИЗначение.Значение;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЛистокСообщенияДляВоенкомата" + СтрЗаменить(Организация.УникальныйИдентификатор(), "-", "");
		Дело.ЕстьДела       = Истина;
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Сформировать листки сообщения по сотрудникам';
									|en = 'Generate notification slips by employees'") + ", " + Строка(Организация);
		Дело.Количество     = Сотрудники.Количество();
		Дело.Подсказка      =
			НСтр("ru = 'При изменениях семейного положения, образования, подразделения, должности, места жительства или места пребывания, состояния здоровья граждан, состоящих на воинском учете, требуется заполнить и вручить гражданину листок сообщения для военкомата.';
				|en = 'In case of changes in marital status, education, business unit, job title, place of permanent or temporary residence, health status of citizens registered with military authorities, fill in and hand over a notification slip for the military registration and enlistment office to a citizen.'");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ПериодОтчета, Организация, Сотрудник", ПериодОтчета, Организация, Сотрудники));
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Дело.ПараметрыФормы = ПараметрыФормы;
		Дело.Форма          = "Отчет.АнализИзмененийЛичныхДанныхСотрудников.Форма";
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
