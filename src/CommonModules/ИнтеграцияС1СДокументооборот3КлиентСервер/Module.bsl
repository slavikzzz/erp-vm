////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3КлиентСервер: клиент, сервер
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Возвращает варианты установки срока исполнения.
//
// Возвращаемое значение:
//   Структура:
//     * ТочныйСрок - Строка
//     * ОтносительныйСрок - Строка
//
Функция ВариантыУстановкиСрокаИсполнения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТочныйСрок", "ExactDate");
	Результат.Вставить("ОтносительныйСрок", "RelativeDate");
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей данные обработки.
//
// Параметры:
//   ПредметID - Строка - идентификатор предмета обработки.
//   ПредметТип - Строка - XDTO-тип предмета обработки.
//   ТекущееСостояние - Строка - текущее состояние обработки. Перечисление типа DMObjectProcessingState.
//   ПричинаПрерывания - Строка - причина прерывания обработки.
//
// Возвращаемое значение:
//   Структура:
//     * ПредметID - Строка
//     * ПредметТип - Строка
//     * ТекущееСостояние - Строка
//     * ПричинаПрерывания - Строка
//     * ТребуемоеИнтерактивноеДействие - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ТребуемоеИнтерактивноеДействие
//
Функция ДанныеОбработки(ПредметID, ПредметТип, ТекущееСостояние = "", ПричинаПрерывания = "") Экспорт
	
	ДанныеОбработки = Новый Структура;
	ДанныеОбработки.Вставить("ПредметID", ПредметID);
	ДанныеОбработки.Вставить("ПредметТип", ПредметТип);
	ДанныеОбработки.Вставить("ТекущееСостояние", ТекущееСостояние);
	ДанныеОбработки.Вставить("ПричинаПрерывания", ПричинаПрерывания);
	ДанныеОбработки.Вставить("ТребуемоеИнтерактивноеДействие", ТребуемоеИнтерактивноеДействие());
	
	Возврат ДанныеОбработки;
	
КонецФункции

// Конструктор структуры, описывающей задачу.
//
// Параметры:
//   ID - Строка - идентификатор задачи Документооборота.
//   Тип - Строка - XDTO-тип задачи Документооборота.
//   Заголовок - Строка - заголовок задачи.
//   НавигационнаяСсылка - Строка - навигационная ссылка на объект ДО.
//
// Возвращаемое значение:
//   Структура:
//     * ДействиеЗадачи - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * Новое - Булево
//     * Просрочено - Булево
//     * ПредставлениеHTML - Строка
//     * АдресДополнительныхДанных - Строка
//     * Флаг - Строка
//     * РезультатДействия - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * РезультатДействияТекстом - Строка
//     * ВерсияДанныхДействияЗадачи - Строка
//     * ТребуемоеИнтерактивноеДействие - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ТребуемоеИнтерактивноеДействие
//
Функция ДанныеПоЗадаче(ID, Тип, Заголовок = "", НавигационнаяСсылка = "") Экспорт
	
	ДанныеПоЗадаче = Новый Структура;
	ДанныеПоЗадаче.Вставить("ДействиеЗадачи",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
			ID,
			Тип,
			Заголовок,,
			НавигационнаяСсылка));
	ДанныеПоЗадаче.Вставить("Новое", Ложь);
	ДанныеПоЗадаче.Вставить("Просрочено", Ложь);
	ДанныеПоЗадаче.Вставить("ПредставлениеHTML", "");
	ДанныеПоЗадаче.Вставить("АдресДополнительныхДанных", "");
	ДанныеПоЗадаче.Вставить("Флаг", "");
	ДанныеПоЗадаче.Вставить("РезультатДействия",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО("", ""));
	ДанныеПоЗадаче.Вставить("РезультатДействияТекстом", "");
	ДанныеПоЗадаче.Вставить("ВерсияДанныхДействияЗадачи", "");
	ДанныеПоЗадаче.Вставить("ТребуемоеИнтерактивноеДействие", ТребуемоеИнтерактивноеДействие());
	
	Возврат ДанныеПоЗадаче;
	
КонецФункции

// Определяет является ли идентификатор пустым или заполненным.
//
// Параметры:
//   СтрокаИдентификатора - Строка - строковое представление идентификатора.
//
// Возвращаемое значение:
//   Булево
//
Функция ИдентификаторЗаполнен(СтрокаИдентификатора) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаИдентификатора)
		И СтрокаИдентификатора <> "00000000-0000-0000-0000-000000000000";
	
КонецФункции

// Список колонок таблицы "Быстрый поиск", подлежащие заполнению.
//
// Возвращаемое значение:
//   Строка
//
Функция КолонкиБыстрогоПоиска() Экспорт
	
	Возврат "Параметр, Значение, ЗначениеID, ЗначениеТип, ПредставлениеПараметра, Тип, ПредставлениеЗначения,
		|Фиксированный, ЗначениеПоУмолчанию, ЗначениеПоУмолчаниюID, ЗначениеПоУмолчаниюТип";
	
КонецФункции

// Перерисовывает на форме список кнопок переключения страниц динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   ТекущаяСтраница - Число - номер текущей страницы.
//   ВсегоСтраниц - Число - максимальное количество страниц.
//
Процедура ОбновитьКнопкиДинамическогоСписка(Форма, ТекущаяСтраница, ВсегоСтраниц) Экспорт
	
	Если ТекущаяСтраница > ВсегоСтраниц Тогда
		ТекущаяСтраница = ВсегоСтраниц;
	КонецЕсли;
	
	Если ВсегоСтраниц = 1 Тогда
		Форма.Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
	Иначе
		Форма.Элементы.ПереключениеСтраниц.Видимость = Истина;
	КонецЕсли;
	
	Если (ВсегоСтраниц > 1) И (ВсегоСтраниц < 9) Тогда
		
		Для НомерКнопки = 1 По ВсегоСтраниц Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Истина;
		КонецЦикла;
		Для НомерКнопки = (ВсегоСтраниц + 1) По 9 Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Ложь;
		КонецЦикла;
		
	Иначе
		
		Для НомерКнопки = 1 По 9 Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьПревышение = (ВсегоСтраниц > 9);
	ЕстьЛеваяКнопкаВыбора = ЕстьПревышение И (ТекущаяСтраница > 5);
	ЕстьПраваяКнопкаВыбора = ЕстьПревышение И (ТекущаяСтраница < (ВсегоСтраниц - 4));
	
	Если ЕстьЛеваяКнопкаВыбора Тогда
		Форма.Элементы.Страница2.Заголовок = "...";
	Иначе
		Форма.Элементы.Страница2.Заголовок = "2";
	КонецЕсли;
	
	Если ЕстьЛеваяКнопкаВыбора И ЕстьПраваяКнопкаВыбора Тогда
		
		ТекущаяКнопка = 5;
		Форма.Элементы.Страница3.Заголовок = ТекущаяСтраница - 2;
		Форма.Элементы.Страница4.Заголовок = ТекущаяСтраница - 1;
		Форма.Элементы.Страница5.Заголовок = ТекущаяСтраница;
		Форма.Элементы.Страница6.Заголовок = ТекущаяСтраница + 1;
		Форма.Элементы.Страница7.Заголовок = ТекущаяСтраница + 2;
		
	ИначеЕсли ЕстьЛеваяКнопкаВыбора Тогда
		
		ТекущаяКнопка = 9 - (ВсегоСтраниц - ТекущаяСтраница);
		Форма.Элементы.Страница3.Заголовок = ВсегоСтраниц - 6;
		Форма.Элементы.Страница4.Заголовок = ВсегоСтраниц - 5;
		Форма.Элементы.Страница5.Заголовок = ВсегоСтраниц - 4;
		Форма.Элементы.Страница6.Заголовок = ВсегоСтраниц - 3;
		Форма.Элементы.Страница7.Заголовок = ВсегоСтраниц - 2;
		Форма.Элементы.Страница8.Заголовок = ВсегоСтраниц - 1;
		
	Иначе
		
		ТекущаяКнопка = ТекущаяСтраница;
		Форма.Элементы.Страница3.Заголовок = "3";
		Форма.Элементы.Страница4.Заголовок = "4";
		Форма.Элементы.Страница5.Заголовок = "5";
		Форма.Элементы.Страница6.Заголовок = "6";
		Форма.Элементы.Страница7.Заголовок = "7";
		Форма.Элементы.Страница8.Заголовок = "8";
		
	КонецЕсли;
	
	Если ЕстьПраваяКнопкаВыбора Тогда
		Форма.Элементы.Страница8.Заголовок = "...";
	КонецЕсли;
	
	Форма.Элементы.Страница9.Заголовок = ВсегоСтраниц;
	
	Для НомерКнопки = 1 По 9 Цикл
		Форма.Элементы["Страница" + НомерКнопки].Пометка = (НомерКнопки = ТекущаяКнопка);
	КонецЦикла;
	
	Форма.Элементы.Назад.Доступность = (ТекущаяСтраница > 1);
	Форма.Элементы.Вперед.Доступность = (ТекущаяСтраница < ВсегоСтраниц);
	
КонецПроцедуры

// Конструктор структуры, описывающей параметры изменения срока по представлению.
//
// Возвращаемое значение:
//   Структура:
//     * ТекстСообщенияПредупреждения - Строка - возвращаемый текст сообщения/предупреждения в случае ошибки.
//     * Исполнитель - Строка
//     * ИсполнительID - Строка
//     * ИсполнительТип - Строка
//     * ОсновнойОбъектАдресацииИсполнитель - Строка
//     * ОсновнойОбъектАдресацииИсполнительID - Строка
//     * ОсновнойОбъектАдресацииИсполнительТип - Строка
//     * ДополнительныйОбъектАдресацииИсполнитель - Строка
//     * ДополнительныйОбъектАдресацииИсполнительID - Строка
//     * ДополнительныйОбъектАдресацииИсполнительТип - Строка
//
Функция ПараметрыИзмененияСрокаПоПредставлению() Экспорт
	
	ПараметрыИзмененияСрока = Новый Структура;
	ПараметрыИзмененияСрока.Вставить("ТекстСообщенияПредупреждения", "");
	ПараметрыИзмененияСрока.Вставить("Исполнитель", "");
	ПараметрыИзмененияСрока.Вставить("ИсполнительID", "");
	ПараметрыИзмененияСрока.Вставить("ИсполнительТип", "");
	ПараметрыИзмененияСрока.Вставить("ОсновнойОбъектАдресацииИсполнитель", "");
	ПараметрыИзмененияСрока.Вставить("ОсновнойОбъектАдресацииИсполнительID", "");
	ПараметрыИзмененияСрока.Вставить("ОсновнойОбъектАдресацииИсполнительТип", "");
	ПараметрыИзмененияСрока.Вставить("ДополнительныйОбъектАдресацииИсполнитель", "");
	ПараметрыИзмененияСрока.Вставить("ДополнительныйОбъектАдресацииИсполнительID", "");
	ПараметрыИзмененияСрока.Вставить("ДополнительныйОбъектАдресацииИсполнительТип", "");
	
	Возврат ПараметрыИзмененияСрока;
	
КонецФункции

// Конструктор структуры, описывающей параметры формы списка задач.
//
// Возвращаемое значение:
//   Структура:
//     * ТекущаяСтраница - Число
//     * РазмерСтраницыДинамическогоСписка - Число
//     * ПолеДляСортировки - Строка
//     * НаправлениеСортировкиПоля - Строка
//     * Фильтры - СписокЗначений
//     * БыстрыйПоиск - ТаблицаЗначений
//     * ОтображениеКарточкиЗадачи - ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения
//
Функция ПараметрыФормыСпискаЗадач() Экспорт
	
	ПараметрыФормыСпискаЗадач = Новый Структура;
	ПараметрыФормыСпискаЗадач.Вставить("ТекущаяСтраница", 0);
	ПараметрыФормыСпискаЗадач.Вставить("РазмерСтраницыДинамическогоСписка", 0);
	ПараметрыФормыСпискаЗадач.Вставить("ПолеДляСортировки", "");
	ПараметрыФормыСпискаЗадач.Вставить("НаправлениеСортировкиПоля", Ложь);
	ПараметрыФормыСпискаЗадач.Вставить("Фильтры", Новый СписокЗначений);
	ПараметрыФормыСпискаЗадач.Вставить("БыстрыйПоиск", Неопределено);
	ПараметрыФормыСпискаЗадач.Вставить("ОтображениеКарточкиЗадачи",
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.ПустаяСсылка"));
	
	Возврат ПараметрыФормыСпискаЗадач;
	
КонецФункции

// Возвращает представление срока исполнения в виде дата (длительность) или длительность (дата).
//
// Параметры:
//   Дата - Дата - срок исполнения датой.
//   Дни - Число - длительность, дней.
//   Часы - Число - длительность, часов.
//   Минуты - Число - длительность, минут.
//   ИспользоватьДатуИВремяВСроках - Булево - признак использования даты и времени в сроках.
//   ВариантУстановкиСрока - Строка - вариант установки срока исполнения.
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеСрокаИсполнения(Дата, Дни, Часы, Минуты,
		ИспользоватьДатуИВремяВСроках, ВариантУстановкиСрока) Экспорт
	
	Представление = "";
	
	ЗаполненТочныйСрок = ЗначениеЗаполнено(Дата);
	
	ЗаполненОтносительныйСрок = Дни > 0
		Или (ИспользоватьДатуИВремяВСроках И (Часы > 0 Или Минуты > 0));
	
	Если Не ЗаполненТочныйСрок И Не ЗаполненОтносительныйСрок Тогда
		Возврат Представление;
	КонецЕсли;
	
	ФормаДаты = ФорматДатыСроков(ИспользоватьДатуИВремяВСроках);
	
	Если ЗаполненТочныйСрок И ЗаполненОтносительныйСрок Тогда
		
		ВариантыУстановкиСрока = ВариантыУстановкиСрокаИсполнения();
		
		Если ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
			ПерваяЧастьПредставления = Формат(Дата, ФормаДаты);
			Если ИспользоватьДатуИВремяВСроках Тогда
				ВтораяЧастьПредставления = ПредставлениеДлительности(Дни, Часы, Минуты);
			Иначе
				ВтораяЧастьПредставления = ПредставлениеДлительности(Дни, 0, 0);
			КонецЕсли;
		Иначе
			ВтораяЧастьПредставления = Формат(Дата, ФормаДаты);
			Если ИспользоватьДатуИВремяВСроках Тогда
				ПерваяЧастьПредставления = ПредставлениеДлительности(Дни, Часы, Минуты);
			Иначе
				ПерваяЧастьПредставления = ПредставлениеДлительности(Дни, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
		Представление = СтрШаблон("%1 (%2)",
			ПерваяЧастьПредставления,
			ВтораяЧастьПредставления);
		
	ИначеЕсли ЗаполненТочныйСрок Тогда
		Представление = Формат(Дата, ФормаДаты);
	Иначе
		Представление = ПредставлениеДлительности(Дни, Часы, Минуты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает представление типа объекта XDTO Документооборота по имени типа.
//
// Параметры:
//   ТипXDTO - Строка - имя типа объекта XDTO.
//   Режим - Строка - принимает значения: "ЕдинственноеЧисло", "МножественноеЧисло", "ЗаголовокФормыВыбора".
//
// Возвращаемое значение:
//   Строка - представление типа объекта XDTO Документооборота по имени типа.
//
Функция ПредставлениеТипаОбъектаXDTO(ТипXDTO, Режим = "МножественноеЧисло") Экспорт
	
	ПредставленияТипов = Новый Соответствие;
	
	ДобавитьПредставленияСправочников(Режим, ПредставленияТипов);
	ДобавитьПредставленияПеречислений(Режим, ПредставленияТипов);
	
	ПредставлениеТипа = ПредставленияТипов.Получить(ТипXDTO);
	
	Если ЗначениеЗаполнено(ПредставлениеТипа) Тогда
		Возврат ПредставлениеТипа;
	Иначе
		Возврат ТипXDTO;
	КонецЕсли;
	
КонецФункции

// Формирует представление порядка выполнения этапа действия.
//
// Параметры:
//   ПорядокXDTO - Строка - перечисление типа DMOrderOfExecutionActionStage.
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеПорядкаВыполненияЭтапаДействия(ПорядокXDTO) Экспорт
	
	Если ПорядокXDTO = "" Тогда
		Возврат "";
	ИначеЕсли ПорядокXDTO = "AllAtOnce" Тогда
		Возврат НСтр("ru = 'Все сразу';
					|en = 'All at once'");
	ИначеЕсли ПорядокXDTO = "OneByOne" Тогда
		Возврат НСтр("ru = 'Один за другим';
					|en = 'One by one'");
	КонецЕсли;
	
КонецФункции

// Формирует представление участника действия.
//
// Параметры:
//   СтрокаУчастника - ДанныеФормыЭлементДерева - строка дерева значений Участники в форме действия.
//   ДополнительноеОписание - Строка - дополнительное описание участника.
//   ПрефиксСтроки - Строка - префикс строки участника.
//
// Возвращаемое значение:
//   Строка - представление участника действия.
//
Функция ПредставлениеУчастника(СтрокаУчастника, ДополнительноеОписание = "", ПрефиксСтроки = "") Экспорт
	
	ПредставлениеСтрокиМассив = Новый Массив;
	Если ЗначениеЗаполнено(ПрефиксСтроки) Тогда
		ПредставлениеСтрокиМассив.Добавить(ПрефиксСтроки);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУчастника.УчастникID) Тогда
		ПредставлениеСтрокиМассив.Добавить(СтрокаУчастника.УчастникПредставление);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУчастника.УчастникID) И ЗначениеЗаполнено(ДополнительноеОписание) Тогда
		ПредставлениеСтрокиМассив.Добавить(ДополнительноеОписание);
	Иначе
		ПредставлениеСтрокиМассив.Добавить("                              ");
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставлениеСтрокиМассив);
	
КонецФункции

// Конструктор структуры, описывающей тип операции над задачей.
//
// Возвращаемое значение:
//   Структура:
//     * Начать - Булево
//     * Прервать - Булево
//     * Остановить - Булево
//     * Продолжить - Булево
//     * Заполнить - Булево
//     * Перезапустить - Булево
//
Функция ТипОперацииСОбработкой() Экспорт
	
	ТипОперации = Новый Структура;
	ТипОперации.Вставить("Начать", Ложь);
	ТипОперации.Вставить("Прервать", Ложь);
	ТипОперации.Вставить("Остановить", Ложь);
	ТипОперации.Вставить("Продолжить", Ложь);
	ТипОперации.Вставить("Заполнить", Ложь);
	ТипОперации.Вставить("Перезапустить", Ложь);
	
	Возврат ТипОперации;
	
КонецФункции

// Конструктор структуры, описывающей требуемое интерактивное действие.
//
// Возвращаемое значение:
//   Структура:
//     * ВернутьсяКЗадаче - Булево
//     * ВыбратьИсполнителяЗадачи - Булево
//     * ЗадатьПроизвольныйВопрос - Булево
//     * ИзменитьПараметрыПроцесса - Булево
//     * Контекст - Структура, Строка - Произвольные данные, необходимые для выполнения интерактивного действия.
//         Например, список возможных исполнителей задачи, или ссылка на процесс, параметры которого
//         требуется изменить. Также может содержать результат интерактивного действия.
//         Например, может содержать выбранного фактического исполнителя задачи, или параметры измененного процесса.
//                - Неопределено - если контекст для выполнения интерактивного действия не требуется.
//     * КешПредыдущихРезультатов - Строка
//
Функция ТребуемоеИнтерактивноеДействие() Экспорт
	
	ТребуемоеИнтерактивноеДействие = Новый Структура;
	ТребуемоеИнтерактивноеДействие.Вставить("ВернутьсяКЗадаче", Ложь);
	ТребуемоеИнтерактивноеДействие.Вставить("ВыбратьИсполнителяЗадачи", Ложь);
	ТребуемоеИнтерактивноеДействие.Вставить("ЗадатьПроизвольныйВопрос", Ложь);
	ТребуемоеИнтерактивноеДействие.Вставить("ИзменитьПараметрыПроцесса", Ложь);
	ТребуемоеИнтерактивноеДействие.Вставить("Контекст", Неопределено);
	ТребуемоеИнтерактивноеДействие.Вставить("КешПредыдущихРезультатов", "");
	
	Возврат ТребуемоеИнтерактивноеДействие;
	
КонецФункции

#КонецОбласти

#Область Задачи

// Возвращает строку документа из дерева приложений задачи, соответствующего текущей строке.
//
// Параметры:
//   ТекущаяСтрока - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - текущая строка в дереве приложений на форме.
//
// Возвращаемое значение:
//   ДанныеФормыЭлементДерева
//   СтрокаДереваЗначений
//   Неопределено - если текущая строка не относится ни к какому документу.
//
Функция СтрокаДокументаВДеревеПриложений(Знач ТекущаяСтрока) Экспорт
	
	Пока ТекущаяСтрока <> Неопределено И НРег(ТекущаяСтрока.ПриложениеТип) <> "dmdocument" Цикл
		Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
			ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("СтрокаДереваЗначений") Тогда
			ТекущаяСтрока = ТекущаяСтрока["Родитель"];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

#КонецОбласти

#Область Действия

// Проверяет наличие хотя бы одного защищенного участника в переданном этапе действия.
//
// Параметры:
//   Этап - ДанныеФормыЭлементДерева - строка этапа из дерева участников обработки.
//
// Возвращаемое значение:
//   Булево - есть защищенные участники.
//
Функция ЕстьЗащищенныеУчастникиДействия(Этап) Экспорт
	
	Результат = Ложь;
	
	Участники = Этап.ПолучитьЭлементы();
	Для Каждого Участник Из Участники Цикл
		Если Участник.Защищенный Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие этапов действия.
//
// Параметры:
//   Участники - ДанныеФормыДерево - дерево с участниками.
//   ИдентификаторЭтапа - Строка - предопределенный идентификатор участника действия, который мы не учитываем.
//   ИдентификаторОбрабатывающегоРезультат - Строка - предопределенный идентификатор обрабатывающего результат действия,
//     который мы не учитываем.
//
// Возвращаемое значение:
//   Булево - есть защищенные участники.
//
Функция ЕстьЭтапыДействия(Участники, ИдентификаторЭтапа, ИдентификаторОбрабатывающегоРезультат) Экспорт
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	ЕстьЭтапы = Ложь;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапа
				Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЭтапы = Истина;
		Прервать;
	КонецЦикла;
	
	Возврат ЕстьЭтапы;
	
КонецФункции

// Возвращает имена полей таблицы участников действия на форме.
//
// Возвращаемое значение:
//   Строка
//
Функция ИменаПолейТаблицыУчастниковДействия() Экспорт
	
	ИменаПолей = "УчастникID,УчастникТип,ОсновнойОбъектАдресацииУчастникID,ОсновнойОбъектАдресацииУчастникТип,
		|ДополнительныйОбъектАдресацииУчастникID,ДополнительныйОбъектАдресацииУчастникТип,Идентификатор";
	
	Возврат СтрЗаменить(ИменаПолей, Символы.ПС, "");
	
КонецФункции

// Устанавливает описание, подсказку и отображение задержки начала выполнения действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ПредставлениеЗапуска - Строка - описание задержки запуска.
//   ОчиститьЗадержкуПодсказка - Строка - неявно возвращаемое значение, подсказка команды формы ОчиститьЗадержку.
//   ОписаниеОтложенногоНачалаВыполненияПодсказка - Строка - неявно возвращаемое значение, подсказка элемента
//     формы ОписаниеОтложенногоНачалаВыполнения.
//
Процедура НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма, ПредставлениеЗапуска = "",
		ОчиститьЗадержкуПодсказка = "", ОписаниеОтложенногоНачалаВыполненияПодсказка = "") Экспорт
	
	ОтложенноеНачалоВыполненияДни = Форма.ОтложенноеНачалоВыполненияДни;
	ОтложенноеНачалоВыполненияЧасы = Форма.ОтложенноеНачалоВыполненияЧасы;
	Элементы = Форма.Элементы;
	Элементы.ОчиститьЗадержку.Видимость = Истина;
	Элементы.ОписаниеОтложенногоНачалаВыполнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	Элементы.ОписаниеОтложенногоНачалаВыполнения.ВысотаЗаголовка = 1;
	
	Если Элементы.Найти("ОтложенноеДействие") <> Неопределено Тогда
		Элементы.ОтложенноеДействие.Видимость = Ложь;
	КонецЕсли;
	ОчиститьЗадержкуПодсказка = НСтр("ru = 'Очистить отложенное начало выполнения действия';
									|en = 'Clear the deferred action start'");
	
	Если ЗначениеЗаполнено(ПредставлениеЗапуска) Тогда
		
		Форма.ОписаниеОтложенногоНачалаВыполнения = ПредставлениеЗапуска;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка =
			НСтр("ru = 'Выполнение действия начнется в указанное время';
				|en = 'Action execution will start at the specified time'");
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 20;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Если Элементы.Найти("ОтложенноеДействие") <> Неопределено Тогда
			Элементы.ОтложенноеДействие.Видимость = Истина;
		КонецЕсли;
		ОчиститьЗадержкуПодсказка = НСтр("ru = 'Начать выполнение действия немедленно';
										|en = 'Start the action execution immediately'");
		Возврат;
		
	Иначе
		
		Если ЗначениеЗаполнено(Форма.ОтложенноеВыполнениеДата) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = 'на %1';
					|en = 'as of %1'"),
				Формат(Форма.ОтложенноеВыполнениеДата, НСтр("ru = 'ДФ=''HH:mm dd.MM.yyyy''';
															|en = 'DF=''HH:mm MM/dd/yyyy'''")));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 15;
			
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияДни) И ЗначениеЗаполнено(ОтложенноеНачалоВыполненияЧасы) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2 и %3 %4';
					|en = '%1 %2 and %3 %4'"),
				Строка(ОтложенноеНачалоВыполненияДни),
				ПодписьККоличествуДней(ОтложенноеНачалоВыполненияДни),
				Строка(ОтложенноеНачалоВыполненияЧасы),
				ПодписьККоличествуЧасов(ОтложенноеНачалоВыполненияЧасы));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 11;
			
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияДни) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2';
					|en = '%1 %2'"),
				Строка(ОтложенноеНачалоВыполненияДни),
				ПодписьККоличествуДней(ОтложенноеНачалоВыполненияДни));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 5;
			
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияЧасы) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2';
					|en = '%1 %2'"),
				Строка(ОтложенноеНачалоВыполненияЧасы),
				ПодписьККоличествуЧасов(ОтложенноеНачалоВыполненияЧасы));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 5;
			
		Иначе
			Форма.ОписаниеОтложенногоНачалаВыполнения = НСтр("ru = 'не настроено';
															|en = 'not configured'");
			Элементы.ОчиститьЗадержку.Видимость = Ложь;
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 9;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОтложенногоНачалаВыполненияПодсказка =
		НСтр("ru = 'Если задано, то выполнение действия произойдет в указанное время или через указанное количество календарных дней/часов';
			|en = 'If set, the action will be performed at the specified time or after a specified number of calendar days/hours'");
	
КонецПроцедуры

// Возвращает номер картинки из КоллекцияРезультатыВыполненияДействий.
//
// Параметры:
//   Результат - Строка - результат действия.
//   Состояние - Строка - состояние действия.
//   ЕстьЗаявкаОтказа - Булево
//
// Возвращаемое значение:
//   Число
//
Функция НомерКартинкиРезультатаВыполненияДействия(Результат, Состояние = Неопределено, ЕстьЗаявкаОтказа = Ложь) Экспорт
	
	Если ЕстьЗаявкаОтказа Тогда
		Возврат 5; // Отказ.
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Если ЗначениеЗаполнено(Состояние) И (Состояние = "Performing" Или Состояние = "DelayedStart") Тогда
			Возврат 6;
			
		ИначеЕсли ЗначениеЗаполнено(Состояние) И Состояние = "InTheExecutionQueue" Тогда
			Возврат 7;
			
		ИначеЕсли ЗначениеЗаполнено(Состояние) И Состояние = "Skipped" Тогда
			Возврат 8;
			
		ИначеЕсли ЗначениеЗаполнено(Состояние) И Состояние = "OnPause" Тогда
			Возврат 11;
			
		ИначеЕсли ЗначениеЗаполнено(Состояние) И Состояние = "Completed" Тогда
			Возврат 1;
			
		КонецЕсли;
	КонецЕсли;
	
	Ранг = РангРезультатаДействия(Результат);
	
	Если Ранг = 0 Тогда
		Возврат 0; // Пусто.
		
	ИначеЕсли Ранг = 1 Тогда
		Возврат 5; // Отказ.
		
	ИначеЕсли Ранг = 4 Тогда
		Возврат 1; // Выполнено.
		
	ИначеЕсли Ранг = 2 Тогда
		Возврат 2; // Выполнено с отрицательным результатом.
		
	ИначеЕсли Ранг = 3 Тогда
		Возврат 3; // Выполнено положительно с замечаниями.
		
	ИначеЕсли Ранг = 5 Тогда
		Возврат 4; // Выполнено положительно.
		
	Иначе
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Возвращает общий результат двух результатов участников действия.
//
//
// Параметры:
//   Результат1 - Строка - результат действия.
//   Результат2 - Строка - результат действия.
//
// Возвращаемое значение:
//   Строка
//
Функция ОбщийРезультатДействия(Результат1, Результат2) Экспорт
	
	ДляВыбораМинимального = Ложь;
	Если Результат1 = "NotApproved" Или Результат2 = "NotApproved" Тогда
		ДляВыбораМинимального = Истина;
	КонецЕсли;
	Если Результат1 = "NotSigned" Или Результат2 = "NotSigned" Тогда
		ДляВыбораМинимального = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат1)
			Или Результат1 = Результат2
			Или РангРезультатаДействия(Результат1, ДляВыбораМинимального)
				>= РангРезультатаДействия(Результат2, ДляВыбораМинимального) Тогда
		Возврат Результат2;
		
	Иначе
		Возврат Результат1;
		
	КонецЕсли;
	
КонецФункции

// Возвращает общее состояние двух участников действия.
//
// Параметры:
//   Состояние1 - Строка - состояние действия.
//   Состояние2 - Строка - состояние действия.
//
// Возвращаемое значение:
//   Строка
//
Функция ОбщееСостояниеДействия(Состояние1, Состояние2) Экспорт
	
	Если Не ЗначениеЗаполнено(Состояние1)
			Или Состояние1 = Состояние2
			Или РангСостоянияДействия(Состояние1, Истина) >= РангСостоянияДействия(Состояние2, Истина) Тогда
		Возврат Состояние2;
		
	Иначе
		Возврат Состояние1;
		
	КонецЕсли;
	
КонецФункции

// Проверяет факт изменения участников в карточке действия.
// Работает в паре с процедурой ИнтеграцияС1СДокументооборот3.ЗаполнитьТаблицуУчастниковДействия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
// Возвращаемое значение:
//   Булево
//
Функция УчастникиДействияИзмененыВКарточке(Форма) Экспорт
	
	КоличествоЗаписей = Форма.УчастникиПриОткрытии.Количество();
	ЕстьОтличия = КоличествоЗаписей <> Форма.УчастникиПередЗаписью.Количество();
	
	Если Не ЕстьОтличия Тогда
		
		ПоляДляСравнения = СтрРазделить(ИменаПолейТаблицыУчастниковДействия(), ",");
		Для Сч = 0 По КоличествоЗаписей - 1 Цикл
			Для Каждого ИмяПоля Из ПоляДляСравнения Цикл
				Если Форма.УчастникиПриОткрытии[Сч][ИмяПоля] <> Форма.УчастникиПередЗаписью[Сч][ИмяПоля] Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьОтличия;
	
КонецФункции

// Возвращает Истина, если указанное действие является действием исполнения.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеИсполнения(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionPerformance";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием согласования.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеСогласования(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionApproval";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием ознакомления.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеОзнакомления(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionExamination";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием подписания.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеПодписания(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionSigning";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием регистрации.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеРегистрации(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionRegistration";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием утверждения.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеУтверждения(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionConfirmation";
	
КонецФункции

// Возвращает Истина, если параметр является функцией участника, обрабатывающего результат.
//
// Параметры:
//   ФункцияУчастника - Строка - функция участника действия.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоФункцияОбработатьРезультат(ФункцияУчастника) Экспорт
	
	Если ФункцияУчастника = "PerformanceResultProcessor"
			Или ФункцияУчастника = "ProcessingResolution"
			Или ФункцияУчастника = "SigningResultProcessor"
			Или ФункцияУчастника = "RegistrationResultProcessor"
			Или ФункцияУчастника = "ApprovalResultProcessor"
			Или ФункцияУчастника = "ConfirmationResultProcessor" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПредставленияПеречислений(Режим, ПредставленияТипов)
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Тип ответа';
							|en = 'Response type'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор типа ответа';
							|en = 'Select a response type'");
	Иначе
		Представление = НСтр("ru = 'Типы ответа';
							|en = 'Response types'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMEMailAnswerType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Вид вопросов выполнения задач';
							|en = 'Question kind of task execution'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор вида вопросов выполнения задач';
							|en = 'Select a question kind of task execution'");
	Иначе
		Представление = НСтр("ru = 'Виды вопросов выполнения задач';
							|en = 'Issue kinds of task execution'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMIssueType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Порядок продления';
							|en = 'Extension procedure'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор порядка продления';
							|en = 'Select an extension procedure'");
	Иначе
		Представление = НСтр("ru = 'Порядки продления';
							|en = 'Extension procedures'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMProlongationProcedure", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Состояние документа';
							|en = 'Document state'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор состояния документа';
							|en = 'Select document state'");
	Иначе
		Представление = НСтр("ru = 'Состояния документов';
							|en = 'Document states'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDocumentStatus", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Состояние мероприятия';
							|en = 'Event state'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор состояния мероприятия';
							|en = 'Select event state'");
	Иначе
		Представление = НСтр("ru = 'Состояния мероприятий';
							|en = 'Event states'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeetingStatus", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Состояние протокола мероприятия';
							|en = 'Event protocol state'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор состояния протокола мероприятия';
							|en = 'Select an event protocol state'");
	Иначе
		Представление = НСтр("ru = 'Состояния протоколов мероприятий';
							|en = 'Event protocol states'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeetingMinutesItemStatus", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Юридическое\физическое лицо';
							|en = 'Business entity\person'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор юр\физ лица';
							|en = 'Select a legal entity\person'");
	Иначе
		Представление = НСтр("ru = 'Юридическое\физическое лица';
							|en = 'Legal entity\person'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMLegalPrivatePerson", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Ставка НДС';
							|en = 'VAT rate'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор ставки НДС';
							|en = 'Select a VAT rate'");
	Иначе
		Представление = НСтр("ru = 'Ставки НДС';
							|en = 'VAT rates'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMVATRate", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Вариант подписания';
							|en = 'How to sign'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор варианта подписания';
							|en = 'Select how to sign'");
	Иначе
		Представление = НСтр("ru = 'Варианты подписания';
							|en = 'How to sign'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMSignatureOption", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Тип контактной информации';
							|en = 'Contact information type'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор типа контактной информации';
							|en = 'Select a contact information type'");
	Иначе
		Представление = НСтр("ru = 'Типы контактной информации';
							|en = 'Contact information types'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMContactInformationType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Категория дел';
							|en = 'Case category'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор категории дел';
							|en = 'Select a case category'");
	Иначе
		Представление = НСтр("ru = 'Категории дел';
							|en = 'Case categories'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMCategoriesOfCases", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'День недели';
							|en = 'Week day'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор дня недели';
							|en = 'Select a week day'");
	Иначе
		Представление = НСтр("ru = 'Дни недели';
							|en = 'Week days'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDaysOfTheWeek", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Вид дня';
							|en = 'Day type'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор вида дня';
							|en = 'Select a day kind'");
	Иначе
		Представление = НСтр("ru = 'Виды дней';
							|en = 'Day kinds'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMKindsOfDays", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Политика учета рабочего времени';
							|en = 'Working hours tracking policy'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор политики учета рабочего времени';
							|en = 'Select a working hours tracking policy'");
	Иначе
		Представление = НСтр("ru = 'Политики учета рабочего времени';
							|en = 'Working hours tracking policies'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMTimeTrackingPolicy", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Тип ответа';
							|en = 'Response type'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор типа ответа';
							|en = 'Select a response type'");
	Иначе
		Представление = НСтр("ru = 'Типы ответа';
							|en = 'Response types'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMIncomingEMailAnswerType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Состояние приглашения';
							|en = 'Invitation state'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор состояния приглашения';
							|en = 'Select an invitation state'");
	Иначе
		Представление = НСтр("ru = 'Состояния приглашения';
							|en = 'Invitation states'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMInvitationStatus", Представление);
	
КонецПроцедуры

Процедура ДобавитьПредставленияСправочников(Режим, ПредставленияТипов)
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Контрагент, Организация, Пользователь';
							|en = 'Counterparty, Company, User'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор стороны';
							|en = 'Select a party'");
	Иначе
		Представление = НСтр("ru = 'Контрагенты, Организации, Пользователи';
							|en = 'Counterparties, Companies, Users'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMParty", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Проект';
							|en = 'Project'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор проекта';
							|en = 'Select project '");
	Иначе
		Представление = НСтр("ru = 'Проекты';
							|en = 'Projects'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMProject", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Проектная задача';
							|en = 'Project task'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор проектной задачи';
							|en = 'Select project task'");
	Иначе
		Представление = НСтр("ru = 'Проектные задачи';
							|en = 'Project tasks'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMProjectTask", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Тема обсуждения';
							|en = 'Discussion topic'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор темы обсуждений';
							|en = 'Select a discussion topic'");
	Иначе
		Представление = НСтр("ru = 'Темы обсуждений';
							|en = 'Discussion topics'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDiscussionTopic", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Сообщение обсуждения';
							|en = 'Discussion message'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор сообщения обсуждений';
							|en = 'Select a discussion message'");
	Иначе
		Представление = НСтр("ru = 'Сообщения обсуждений';
							|en = 'Discussion messages'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDiscussionMessage", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Файл';
							|en = 'File'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор файла';
							|en = 'Select file'");
	Иначе
		Представление = НСтр("ru = 'Файлы';
							|en = 'Files'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMFile", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Папка файлов';
							|en = 'File folder'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор папки файлов';
							|en = 'Select file folder'");
	Иначе
		Представление = НСтр("ru = 'Папки файлов';
							|en = 'File folders'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMFileFolder", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Папка документов';
							|en = 'Document folder'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор папки документов';
							|en = 'Select a document folder'");
	Иначе
		Представление = НСтр("ru = 'Папки документов';
							|en = 'Document folders'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDocumentFolder", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Папка мероприятий';
							|en = 'Event folder'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор папки мероприятий';
							|en = 'Select an event folder'");
	Иначе
		Представление = НСтр("ru = 'Папки мероприятий';
							|en = 'Event folders'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeetingFolder", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Пользователь';
							|en = 'User'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор пользователя';
							|en = 'Select user'");
	Иначе
		Представление = НСтр("ru = 'Пользователи';
							|en = 'Users'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMUser", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Группа пользователей';
							|en = 'User group'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор группы пользователей';
							|en = 'Select user group'");
	Иначе
		Представление = НСтр("ru = 'Группы пользователей';
							|en = 'User groups'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMUserGroup", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Сотрудник';
							|en = 'Employee'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор сотрудника';
							|en = 'Select an employee'");
	Иначе
		Представление = НСтр("ru = 'Сотрудники';
							|en = 'Employees'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMEmployee", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Вопрос деятельности';
							|en = 'Activity issue'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор вопроса деятельности';
							|en = 'Select activity issue'");
	Иначе
		Представление = НСтр("ru = 'Вопросы деятельности';
							|en = 'Activity issues'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMActivityMatter", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Валюта';
							|en = 'Currency'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор валюты';
							|en = 'Select currency '");
	Иначе
		Представление = НСтр("ru = 'Валюты';
							|en = 'Currencies'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMCurrency", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Документ';
							|en = 'Document'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор документа';
							|en = 'Select document'");
	Иначе
		Представление = НСтр("ru = 'Документы';
							|en = 'Documents'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDocument", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Мероприятие';
							|en = 'Activity'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор мероприятия';
							|en = 'Select an activity'");
	Иначе
		Представление = НСтр("ru = 'Мероприятия';
							|en = 'Activities'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeeting", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Организация';
							|en = 'Company'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор организации';
							|en = 'Select company'");
	Иначе
		Представление = НСтр("ru = 'Организации';
							|en = 'Companies'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMOrganization", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Контрагент';
							|en = 'Counterparty'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор контрагента';
							|en = 'Select a counterparty'");
	Иначе
		Представление = НСтр("ru = 'Контрагенты';
							|en = 'Counterparties'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMCorrespondent", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Контактное лицо';
							|en = 'Contact person'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор контактного лица';
							|en = 'Select contact person'");
	Иначе
		Представление = НСтр("ru = 'Контактные лица';
							|en = 'Contact persons'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMContactPerson", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Гриф доступа';
							|en = 'Access label'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор грифа доступа';
							|en = 'Select access label'");
	Иначе
		Представление = НСтр("ru = 'Грифы доступа';
							|en = 'Access labels'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMAccessLevel", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Способ доставки';
							|en = 'Delivery method'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор способа доставки';
							|en = 'Select delivery method'");
	Иначе
		Представление = НСтр("ru = 'Способы доставки';
							|en = 'Delivery methods'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDeliveryMethod", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Подразделение';
							|en = 'Business unit'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор подразделения';
							|en = 'Select business unit'");
	Иначе
		Представление = НСтр("ru = 'Подразделения';
							|en = 'Business units'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMSubdivision", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Вид документа';
							|en = 'Document kind'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор вида документов';
							|en = 'Select a document kind'");
	Иначе
		Представление = НСтр("ru = 'Виды документов';
							|en = 'Document kinds'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDocumentType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Вид мероприятия';
							|en = 'Event type'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор вида мероприятия';
							|en = 'Select an event type'");
	Иначе
		Представление = НСтр("ru = 'Виды мероприятий';
							|en = 'Event types'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeetingType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Вид работ';
							|en = 'Activity kind'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор вида работ';
							|en = 'Select activity kind'");
	Иначе
		Представление = НСтр("ru = 'Виды работ';
							|en = 'Activity kinds'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMWorkType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Тип связей';
							|en = 'Link type'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор типа связей';
							|en = 'Select a link type'");
	Иначе
		Представление = НСтр("ru = 'Типы связей';
							|en = 'Link types'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMRelationType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Значение свойств объектов';
							|en = 'Object property value'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор значения свойств объектов';
							|en = 'Select an object property value'");
	Иначе
		Представление = НСтр("ru = 'Значения свойств объектов';
							|en = 'Object property values'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMObjectPropertyValue", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Физическое лицо';
							|en = 'Person'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор физического лица';
							|en = 'Select person'");
	Иначе
		Представление = НСтр("ru = 'Физические лица';
							|en = 'Persons'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMPrivatePerson", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Условие маршрутизации';
							|en = 'Routing condition'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор условия маршрутизации';
							|en = 'Select a routing condition'");
	Иначе
		Представление = НСтр("ru = 'Условия маршрутизации';
							|en = 'Routing conditions'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMRoutingCondition", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Личный адресат';
							|en = 'Personal addressee'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор личного адресата';
							|en = 'Select a personal addressee'");
	Иначе
		Представление = НСтр("ru = 'Личные адресаты';
							|en = 'Personal addressees'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMPersonalRecipient", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Группа личных адресатов';
							|en = 'Personal addressees group'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор группы личных адресатов';
							|en = 'Select personal addressees group'");
	Иначе
		Представление = НСтр("ru = 'Группы личных адресатов';
							|en = 'Personal addressee groups'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMPersonalRecipientGroup", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Роль исполнителя';
							|en = 'Business role'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор роли исполнителей';
							|en = 'Select a business role'");
	Иначе
		Представление = НСтр("ru = 'Роли исполнителей';
							|en = 'Assignee roles'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMBusinessProcessExecutorRole", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Статья движения денежных средств';
							|en = 'Cash flow item'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор статьи движения денежных средств';
							|en = 'Select a cash flow item'");
	Иначе
		Представление = НСтр("ru = 'Статьи движения денежных средств';
							|en = 'Cash flow items'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMCashFlowItem", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Единица измерения';
							|en = 'Unit'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор единицы измерения';
							|en = 'Select a unit'");
	Иначе
		Представление = НСтр("ru = 'Единицы измерения';
							|en = 'Units of measure'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeasurementUnit", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Товар, услуга';
							|en = 'Good, service'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор номенклатуры';
							|en = 'Select items'");
	Иначе
		Представление = НСтр("ru = 'Товары и услуги';
							|en = 'Goods and services'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMProduct", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru = 'Дополнительный реквизит / сведение';
							|en = 'Additional attribute or information record'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru = 'Выбор дополнительного реквизита';
							|en = 'Select an additional attribute'");
	Иначе
		Представление = НСтр("ru = 'Дополнительные реквизиты и сведения';
							|en = 'Additional attributes and information'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMAdditionalProperty", Представление);
	
КонецПроцедуры

// Подпись к количеству дней по склонениям.
//
// Параметры:
//   ЧислоДней - Число - количество дней.
//
// Возвращаемое значение:
//   Строка
//
Функция ПодписьККоличествуДней(ЧислоДней)
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней';
						|en = 'days'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней';
							|en = 'days'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'дней';
							|en = 'days'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'день';
								|en = 'Day'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня';
								|en = 'day'");
			Иначе
				Подпись = НСтр("ru = 'дней';
								|en = 'days'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству часов по склонениям.
//
// Параметры:
//   ЧислоЧасов - Число - количество часов.
//
// Возвращаемое значение:
//   Строка
//
Функция ПодписьККоличествуЧасов(ЧислоЧасов)
	
	Если ЧислоЧасов > 10 И ЧислоЧасов < 20 Тогда
		Подпись = НСтр("ru = 'часов';
						|en = 'hours'");
	Иначе
		ПоследниеДвеЦифры = ЧислоЧасов - Цел(ЧислоЧасов / 100) * 100;
		ПоследняяЦифра = ЧислоЧасов - Цел(ЧислоЧасов / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'часов';
							|en = 'hours'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = НСтр("ru = 'часов';
							|en = 'hours'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'час';
								|en = 'hour'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'часа';
								|en = 'hours'");
			Иначе
				Подпись = НСтр("ru = 'часов';
								|en = 'hours'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Возвращает представление длительности.
//
// Параметры:
//   Дни - Число - длительность, дней.
//   Часы - Число - длительность, часов.
//   Минуты - Число - длительность, минут.
//
// Возвращаемое значение:
//   Строка - представление длительности строкой.
//
Функция ПредставлениеДлительности(Дни, Часы, Минуты)
	
	Если Дни = 0 И Часы = 0 И Минуты = 0 Тогда
		Возврат НСтр("ru = 'не определен';
					|en = 'undefined'");
	КонецЕсли;
	
	ПредставлениеМассив = Новый Массив;
	
	ЕстьДни = ЗначениеЗаполнено(Дни);
	ЕстьЧасы = ЗначениеЗаполнено(Часы);
	ЕстьМинуты = ЗначениеЗаполнено(Минуты);
	
	Если ЕстьДни Тогда
		
		Если ЕстьЧасы И ЕстьМинуты Тогда
			ПредставлениеМассив.Добавить(СтрШаблон(НСтр("ru = '%1 дн.';
														|en = '%1 days'"), Дни));
		Иначе
			ПредставлениеМассив.Добавить(
				СтрокаСЧислом(
					НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня';
						|en = ';%1 day;;%1 day;%1 days;%1 day'"),
					Дни,
					ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьЧасы Тогда
		
		Если ЕстьДни И ЕстьМинуты Тогда
			ПредставлениеМассив.Добавить(СтрШаблон(НСтр("ru = '%1 ч.';
														|en = '%1 h.'"), Часы));
		Иначе
			ПредставлениеМассив.Добавить(
				СтрокаСЧислом(
					НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа';
						|en = ';%1 hour;;%1 hour;%1 hours;%1 hour'"),
					Часы,
					ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьМинуты Тогда
		
		Если ЕстьДни И ЕстьЧасы Тогда
			ПредставлениеМассив.Добавить(СтрШаблон(НСтр("ru = '%1 мин.';
														|en = '%1 min'"), Минуты));
		Иначе
			ПредставлениеМассив.Добавить(
				СтрокаСЧислом(
					НСтр("ru = ';%1 минута;;%1 минуты;%1 минут;%1 минуты';
						|en = ';%1 minute;;;;%1 minutes'"),
					Минуты,
					ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставлениеМассив, " ");
	
КонецФункции

// Преобразует все результаты действий к единой числовой шкале по степени успешности.
//
// Параметры:
//   Результат - Строка - результат действия.
//   ДляВыбораМинимального - Булево - режим отсечения не значащих значений более высоким рангом.
//
// Возвращаемое значение:
//   Число - от 0 до 9.
//
Функция РангРезультатаДействия(Результат, ДляВыбораМинимального = Ложь)
	
	Если Результат = "" Тогда
		Возврат ?(ДляВыбораМинимального, 8, 0);
		
	ИначеЕсли Результат = "Signed" Или Результат = "Received"
			Или Результат = "Confirmed" Или Результат = "Approved"
			Или Результат = "Registered" Тогда
		Возврат 5;
		
	ИначеЕсли Результат = "Performed" Или Результат = "Completed"
			Или Результат = "Reviewed" Или Результат = "Examined" Тогда
		Возврат 4;
		
	ИначеЕсли Результат = "ApprovedWithReservations" Тогда
		Возврат 3;
		
	ИначеЕсли Результат = "NotApproved" Или Результат = "NotConfirmed"
			Или Результат = "NotSigned" Или Результат = "NotAccepted"
			Или Результат = "NotRegistered" Тогда
		Возврат 2;
		
	ИначеЕсли Результат = "RefusalOfExamination" Или Результат = "RefusalOfPerformance"
			Или Результат = "RefusalOfReview" Тогда
		Возврат ?(ДляВыбораМинимального, 9, 1);
		
	Иначе
		Возврат 4;
		
	КонецЕсли;
	
КонецФункции

// Преобразует состояние действия к единой числовой шкале по степени успешности.
//
// Параметры:
//   Состояние - Строка - состояние действия.
//   ДляВыбораМинимального - Булево
//
// Возвращаемое значение:
//   Число - от 0 до 5.
//
Функция РангСостоянияДействия(Состояние, ДляВыбораМинимального = Ложь)
	
	Если Состояние = "" Тогда
		Возврат ?(ДляВыбораМинимального, 5, 0);
		
	ИначеЕсли Состояние = "Completed" Или Состояние = "OnPause" Тогда
		Возврат 3;
		
	ИначеЕсли Состояние = "InTheExecutionQueue" Тогда
		Возврат 1;
	Иначе
		Возврат 2;
		
	КонецЕсли;
	
КонецФункции

// Возвращает формат даты для сроков в зависимости от использования времени в сроках.
//
// Параметры:
//   ИспользоватьДатуИВремяВСроках - Булево
//
// Возвращаемое значение:
//   Строка
//
Функция ФорматДатыСроков(ИспользоватьДатуИВремяВСроках)
	
	Если ИспользоватьДатуИВремяВСроках Тогда
		Шаблон = "ДФ='dd.MM.yy HH:mm'; ДП='%1'";
	Иначе
		Шаблон = "ДФ='dd.MM.yy'; ДП='%1'";
	КонецЕсли;
	
	Возврат СтрШаблон(Шаблон, НСтр("ru = 'не определен';
									|en = 'undefined'"));
	
КонецФункции

#КонецОбласти