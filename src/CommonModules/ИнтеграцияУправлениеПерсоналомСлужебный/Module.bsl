
#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаФизическихЛиц

Процедура ЗагрузитьФизическоеЛицо(Объект, ИдентификаторСсылка) Экспорт
	
	Идентификатор = Объект.ФизическоеЛицо;
	
	ДанныеОбъекта = Новый Структура("
	|Фамилия,
	|Имя,
	|Отчество,
	|Пол,
	|ДатаРождения,
	|ИНН,
	|СтраховойНомерПФР,
	|МестоРожденияПредставление,
	|ДокументУдостоверяющийЛичность,
	|ТелефонМобильныйПредставление,
	|EMailПредставление,
	|Фотография");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.Настройки();
	ВидКИМобильныйТелефон = Настройки.ВидКИМобильныйТелефон;
	ВидКИАдресЭлектроннойПочты = Настройки.ВидКИАдресЭлектроннойПочты;
	
	ФизическоеЛицоОбъект = Неопределено;
	
	Ссылка = ИдентификаторСсылка[Идентификатор];
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ФизическоеЛицоОбъект = Ссылка.ПолучитьОбъект();
	Иначе
		
		СсылкаНаОбъект = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
			Ссылка = СсылкаНаОбъект;
		Иначе
			
			Запрос = Новый Запрос;
			// поиск по СтраховойНомерПФР
			Если ЗначениеЗаполнено(ДанныеОбъекта.СтраховойНомерПФР) Тогда
				Запрос.УстановитьПараметр("СтраховойНомерПФР", ДанныеОбъекта.СтраховойНомерПФР);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР";
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					Ссылка = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			// поиск по ИНН
			Если Не ЗначениеЗаполнено(Ссылка) И ЗначениеЗаполнено(ДанныеОбъекта.ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ДанныеОбъекта.ИНН);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.ИНН = &ИНН";
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					Ссылка = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			ФизическоеЛицоОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Записывать = Ложь;
	Если ФизическоеЛицоОбъект = Неопределено Тогда
		
		Записывать = Истина;
		
		ФИО = Новый Структура("Фамилия,Имя,Отчество");
		ЗаполнитьЗначенияСвойств(ФИО, ДанныеОбъекта);
		
		АдресФотографии = "";
		Если ЗначениеЗаполнено(ДанныеОбъекта.Фотография) Тогда
			АдресФотографии = ПоместитьВоВременноеХранилище(ДанныеОбъекта.Фотография.ДвоичныеДанные);
		КонецЕсли;
		
		КонтактнаяИнформация = Новый Массив;
		Если ЗначениеЗаполнено(ДанныеОбъекта.ТелефонМобильныйПредставление) Тогда
			ОписаниеКонтактнойИнформации = КадровыйУчет.НоваяКонтактнаяИнформация();
			ОписаниеКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ДанныеОбъекта.ТелефонМобильныйПредставление, ВидКИМобильныйТелефон);
			ОписаниеКонтактнойИнформации.Вставить("ВидИнформации", ВидКИМобильныйТелефон);
			ОписаниеКонтактнойИнформации.Вставить("ТипИнформации", Перечисления.ТипыКонтактнойИнформации.Телефон);
			КонтактнаяИнформация.Добавить(ОписаниеКонтактнойИнформации); 
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеОбъекта.EMailПредставление) Тогда
			ОписаниеКонтактнойИнформации = КадровыйУчет.НоваяКонтактнаяИнформация();
			ОписаниеКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ДанныеОбъекта.EMailПредставление, ВидКИАдресЭлектроннойПочты);
			ОписаниеКонтактнойИнформации.Вставить("ВидИнформации", ВидКИАдресЭлектроннойПочты);
			ОписаниеКонтактнойИнформации.Вставить("ТипИнформации", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			КонтактнаяИнформация.Добавить(ОписаниеКонтактнойИнформации);
		КонецЕсли;
		
		ДанныеФизическогоЛица = КадровыйУчет.НовыеДанныеФизическогоЛица();
		ЗаполнитьЗначенияСвойств(ДанныеФизическогоЛица, ДанныеОбъекта);
		ДанныеФизическогоЛица.МестоРождения 		= ДанныеОбъекта.МестоРожденияПредставление;
		ДанныеФизическогоЛица.КонтактнаяИнформация 	= КонтактнаяИнформация;
		ДанныеФизическогоЛица.АдресФотографии 		= АдресФотографии;
		
		ФизическоеЛицоОбъект = КадровыйУчет.НовоеФизическоеЛицо(ФИО, ДанныеФизическогоЛица,,Ложь);
		
		СсылкаНового = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		ФизическоеЛицоОбъект.УстановитьСсылкуНового(СсылкаНового);
		
	Иначе
		
		// Ссылка может существовать, но объект будет пустой, в случае
		// загрузки, например Оффера, раньше загрузки объекта ФизическоеЛицо.
		
		СвязанныеОбъекты = Новый Структура;
		
		Наименование = ДанныеОбъекта.Фамилия;
		Если ЗначениеЗаполнено(ДанныеОбъекта.Имя) Тогда
			Наименование = СтрШаблон("%1 %2", Наименование, ДанныеОбъекта.Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеОбъекта.Отчество) Тогда
			Наименование = СтрШаблон("%1 %2", Наименование, ДанныеОбъекта.Отчество);
		КонецЕсли;
		
		// Заполняем пустые свойства физического лица.
		Если ПустаяСтрока(ФизическоеЛицоОбъект.Наименование) Тогда
			ФизическоеЛицоОбъект.Наименование = Наименование;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.ДатаРождения) И ЗначениеЗаполнено(ДанныеОбъекта.ДатаРождения) Тогда
			ФизическоеЛицоОбъект.ДатаРождения = ДанныеОбъекта.ДатаРождения;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.Пол) И ЗначениеЗаполнено(ДанныеОбъекта.Пол) Тогда
			ФизическоеЛицоОбъект.Пол = ДанныеОбъекта.Пол;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.ИНН) И ЗначениеЗаполнено(ДанныеОбъекта.ИНН) Тогда
			ФизическоеЛицоОбъект.ИНН = ДанныеОбъекта.ИНН;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.СтраховойНомерПФР) И ЗначениеЗаполнено(ДанныеОбъекта.СтраховойНомерПФР) Тогда
			ФизическоеЛицоОбъект.СтраховойНомерПФР = ДанныеОбъекта.СтраховойНомерПФР;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.ФИО) Тогда
			ФизическоеЛицоОбъект.ФИО = Наименование;
			ФизическоеЛицоОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены", Истина); 
			ФИО = Новый Структура("Фамилия,Имя,Отчество");
			ЗаполнитьЗначенияСвойств(ФИО, ДанныеОбъекта);
			ДанныеФИО = Новый Структура;
			ДанныеФИО.Вставить("ФИО", ФИО);
			ДанныеФИО.Вставить("Период", Неопределено);
			СвязанныеОбъекты.Вставить("ФИО", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеФИО));
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.Пол) Тогда
			ФизическоеЛицоОбъект.Пол = ДанныеОбъекта.Пол;
			Записывать = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвязанныеОбъекты) Тогда
			ФизическоеЛицоОбъект.ДополнительныеСвойства.Вставить("СвязанныеОбъекты", СвязанныеОбъекты);
		КонецЕсли;
		
		КонтактнаяИнформация = ИнтеграцияУправлениеПерсоналом.КонтактнаяИнформацияФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
		
		МобильныйТелефон = КонтактнаяИнформация.МобильныеТелефоны[Ссылка];
		Если Не ЗначениеЗаполнено(МобильныйТелефон) И ЗначениеЗаполнено(ДанныеОбъекта.ТелефонМобильныйПредставление) Тогда
			Записывать = Истина;
			ОписаниеКонтактнойИнформации = КадровыйУчет.НоваяКонтактнаяИнформация();
			ОписаниеКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ДанныеОбъекта.ТелефонМобильныйПредставление, ВидКИМобильныйТелефон);
			ОписаниеКонтактнойИнформации.Вставить("ВидИнформации", ВидКИМобильныйТелефон);
			ОписаниеКонтактнойИнформации.Вставить("ТипИнформации", Перечисления.ТипыКонтактнойИнформации.Телефон);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ФизическоеЛицоОбъект,
					ОписаниеКонтактнойИнформации.ЗначенияПолей, ОписаниеКонтактнойИнформации.ВидИнформации,
					ОписаниеКонтактнойИнформации.ТипИнформации);
		КонецЕсли;
		
		АдресПочты = КонтактнаяИнформация.АдресаПочты[Ссылка];
		Если Не ЗначениеЗаполнено(АдресПочты) И ЗначениеЗаполнено(ДанныеОбъекта.EMailПредставление) Тогда
			Записывать = Истина;
			ОписаниеКонтактнойИнформации = КадровыйУчет.НоваяКонтактнаяИнформация();
			ОписаниеКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ДанныеОбъекта.EMailПредставление, ВидКИАдресЭлектроннойПочты);
			ОписаниеКонтактнойИнформации.Вставить("ВидИнформации", ВидКИАдресЭлектроннойПочты);
			ОписаниеКонтактнойИнформации.Вставить("ТипИнформации", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ФизическоеЛицоОбъект,
					ОписаниеКонтактнойИнформации.ЗначенияПолей, ОписаниеКонтактнойИнформации.ВидИнформации,
					ОписаниеКонтактнойИнформации.ТипИнформации);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Записывать Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ФизическиеЛица");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
				Блокировка.Заблокировать();
			КонецЕсли;
			
			ФизическоеЛицоОбъект.Записать();
			Если Не ЗначениеЗаполнено(Ссылка) Тогда
				МенеджерЗаписи = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Идентификатор 	= Идентификатор;
				МенеджерЗаписи.Ссылка 			= ФизическоеЛицоОбъект.Ссылка;
				МенеджерЗаписи.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаОфферов

Функция ОфферИдентификаторДокументаСсылка(Идентификаторы) Экспорт
	
	ИдентификаторДокументаСсылка = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оффер.Ссылка КАК Ссылка,
	|	Оффер.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	Документ.Оффер КАК Оффер
	|ГДЕ
	|	Оффер.ИдентификаторДокумента В(&Идентификаторы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторДокументаСсылка.Вставить(Выборка.ИдентификаторДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ИдентификаторДокументаСсылка;

КонецФункции

Процедура ЗагрузитьОффер(Объект) Экспорт

	СтруктураЗаполнения = Документы.Оффер.СтруктураЗаполнения();
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Объект);
	ДокументОбъект = Документы.Оффер.НовыйДокумент(СтруктураЗаполнения);
	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаявок

Функция НовоеОписаниеЗаявки(ДокументМенеджер)

	СписокОбщихПолей = "Дата,ИдентификаторЗаявки,ИдентификаторЭлектронногоДокумента,ДатаСоздания,ТипОбъекта,
	|Организация,ФизическоеЛицо,Сотрудник,КомментарийСотрудника,
	|ВариантФормированияФайлаОтвета,КоличествоЭкземпляров,ОтправлятьEmail,АдресEmail,
	|Вложения,ЭлектронныйДокумент,СрокИсполнения,
	|ОтменяемаяЗаявка,ИдентификаторОтменяемойЗаявки,ИдентификаторОтменяемогоЭлектронногоДокумента,
	|ВариантИсправления";
	
	Возврат ДокументМенеджер.ОписаниеДокументаДляЗаявки(СписокОбщихПолей);

КонецФункции

Функция ПараметрыРегистрацииНовыхЗаявок(ТаблицаЗаявок) Экспорт

	Возврат ЗаявкиСотрудников.ПараметрыРегистрацииЗаявок(ТаблицаЗаявок);

КонецФункции

Процедура ЗарегистрироватьНовуюЗаявку(ДанныеЗаявки, ПараметрыЗаявок) Экспорт
	
	Объект 		= ДанныеЗаявки.Объект;
	ТипОбъекта 	= ДанныеЗаявки.ТипОбъекта;
	
	ДокументМенеджер = ЗаявкиСотрудников.ДокументМенеджерНовойЗаявки(ТипОбъекта, Объект, ДанныеЗаявки.ОтменяемаяЗаявка);
	ОписаниеЗаявки = НовоеОписаниеЗаявки(ДокументМенеджер);
	
	// Заполнение "общих" полей и совпадающих по именам.
	ЗаполнитьЗначенияСвойств(ОписаниеЗаявки, Объект);
	ОписаниеЗаявки.ОтменяемаяЗаявка 		= ДанныеЗаявки.ОтменяемаяЗаявка;
	ОписаниеЗаявки.Вложения 				= ДанныеЗаявки.Вложения;
	ОписаниеЗаявки.ТипОбъекта 				= ТипОбъекта;
	ОписаниеЗаявки.ЭлектронныйДокумент 		= ДанныеЗаявки.ЭлектронныйДокумент;
	ОписаниеЗаявки.КомментарийСотрудника 	= ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Объект, "Комментарий");
	
	// Заполнение дополнительных свойств объектов, если они есть.
	Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправки2НДФЛ Тогда
		
		Если Объект.Назначение2НДФЛ = "ПодтверждениеДоходов" Тогда
			ОписаниеЗаявки.СпособФормирования 	= Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно;
		Иначе
			ОписаниеЗаявки.СпособФормирования 	= Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО;
		КонецЕсли; 
	
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНаОтпуск
		Или ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаПереносОтпуска Тогда
		
		ОписаниеЗаявки.ДатаНачала 		= Объект.ДатаНачала;
		ОписаниеЗаявки.ДатаОкончания 	= Объект.ДатаОкончания;
		
		Если Не Объект.ЗаСвойСчет Тогда
			
			ОписаниеЗаявки.ПредоставитьМатериальнуюПомощьПриОтпуске 	= Объект.МатериальнаяПомощь;
			ОписаниеЗаявки.ПредоставитьЕдиновременнуюВыплатуКОтпуску 	= Объект.ЕдиновременнаяВыплата;
			ОписаниеЗаявки.ПредоставитьКомпенсациюОтпуска = (Объект.КомпенсироватьОтпуск = Истина);
			Если ОписаниеЗаявки.ПредоставитьКомпенсациюОтпуска Тогда
				ОписаниеЗаявки.КоличествоДнейКомпенсацииОтпуска = Объект.КоличествоДнейКомпенсации;
			КонецЕсли;
			ДетализацияПоВидамОтпусков = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Объект, "ДетализацияПоВидамОтпусков");
			Если ДетализацияПоВидамОтпусков <> Неопределено Тогда
				Для каждого ДанныеПоВидуОтпуска Из ДетализацияПоВидамОтпусков Цикл
					НоваяСтрока = ОписаниеЗаявки.ДанныеПоВидамОтпусков.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоВидуОтпуска);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаПереносОтпуска Тогда
			ОписаниеЗаявки.ВариантИсправления = Перечисления.ВариантыИсправленияЗаявокКабинетСотрудника.Перенос;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНаКомпенсациюОтпуска Тогда
		
		ОписаниеЗаявки.КоличествоДнейКомпенсацииОтпуска = Объект.КоличествоДнейКомпенсации;
		ДетализацияПоВидамОтпусков = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Объект, "ДетализацияПоВидамОтпусков");
		Если ДетализацияПоВидамОтпусков <> Неопределено Тогда
			Для каждого ДанныеПоВидуОтпуска Из ДетализацияПоВидамОтпусков Цикл
				НоваяСтрока = ОписаниеЗаявки.ДанныеПоВидамОтпусков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоВидуОтпуска);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаИзменениеЛичныхДанных Тогда
		
		Если Объект.ИзменитьДокумент = Истина Тогда
			ОписаниеДокумента = Объект.ДокументУдостоверяющийЛичность;
			Если ЗначениеЗаполнено(ОписаниеДокумента.ВидДокумента) Тогда
				ОписаниеЗаявки.ДокументВид = ОписаниеДокумента.ВидДокумента;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеДокумента.Серия) Тогда
				ОписаниеЗаявки.ДокументСерия = ОписаниеДокумента.Серия; 
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеДокумента.Номер) Тогда
				ОписаниеЗаявки.ДокументНомер = ОписаниеДокумента.Номер;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеДокумента.ДатаВыдачи) Тогда
				ОписаниеЗаявки.ДокументДатаВыдачи = ОписаниеДокумента.ДатаВыдачи;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеДокумента.КемВыдан) Тогда
				ОписаниеЗаявки.ДокументКемВыдан = ОписаниеДокумента.КемВыдан;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеДокумента.КодПодразделения) Тогда
				ОписаниеЗаявки.ДокументКодПодразделения = ОписаниеДокумента.КодПодразделения;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ИзменитьНомерТелефона = Истина Тогда
			Если ЗначениеЗаполнено(Объект.ЛичныйНомерТелефона) Тогда
				ОписаниеЗаявки.НомерМобильногоТелефона = Объект.ЛичныйНомерТелефона;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Свойство("ИзменитьФотографию") И Объект.ИзменитьФотографию = Истина Тогда
			Если ЗначениеЗаполнено(Объект.Фотография) Тогда
				ОписаниеЗаявки.ИзменитьФотографию 	= Объект.ИзменитьФотографию;
				ОписаниеЗаявки.Фотография 			= Объект.Фотография;
				СжатьФотографию(ОписаниеЗаявки.Фотография);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНалоговыйВычет Тогда
				
		Если Объект.ЭтоЛичныйВычет = Истина Тогда
			ОписаниеЗаявки.ВидВычета = Перечисления.ВидыНалоговыхВычетовКабинетСотрудника.Личный;
		ИначеЕсли Объект.ЭтоВычетНаДетей = Истина Тогда
			ОписаниеЗаявки.ВидВычета = Перечисления.ВидыНалоговыхВычетовКабинетСотрудника.НаДетей;
			Для каждого ВычетНаРебенка Из Объект.ВычетыНаДетей Цикл
				НовыйВычет = ОписаниеЗаявки.ДанныеВычетовНаДетей.Добавить();
				НовыйВычет.ДействуетДо 		= ВычетНаРебенка.ДатаОкончания - 86400;
				НовыйВычет.ОписаниеВычета 	= ОписаниеВычетаНаРебенка(ВычетНаРебенка);
			КонецЦикла;
		ИначеЕсли Объект.ЭтоВычетНаНедвижимость = Истина Тогда
			ОписаниеЗаявки.ВидВычета = Перечисления.ВидыНалоговыхВычетовКабинетСотрудника.Недвижимость;
		ИначеЕсли Объект.ЭтоВычетНаЛечение = Истина Тогда
			ОписаниеЗаявки.ВидВычета = Перечисления.ВидыНалоговыхВычетовКабинетСотрудника.НаЛечение;
		ИначеЕсли Объект.ЭтоВычетНаОбучение = Истина Тогда
			ОписаниеЗаявки.ВидВычета = Перечисления.ВидыНалоговыхВычетовКабинетСотрудника.НаОбучение;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Отсутствие Тогда
		
		Если ДанныеЗаявки.ПричинаОтсутствия <> Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
			ОписаниеЗаявки.ОтсутствиеВесьДень = Объект.ВесьДень;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОбращениеСотрудника Тогда
		
		РеквизитыДокумента = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Объект, "РеквизитыДокумента");
		Если ЗначениеЗаполнено(РеквизитыДокумента) Тогда
			Для каждого ОписаниеРеквизита Из РеквизитыДокумента Цикл
				ЗаполнитьЗначенияСвойств(ОписаниеЗаявки.РеквизитыОбращения.Добавить(), ОписаниеРеквизита);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаДСВ Тогда
		
		ОписаниеЗаявки.СпособРасчета 			= Объект.СпособРасчетаУдержанияДСВ;
		ОписаниеЗаявки.РазмерУдержанияПроцент 	= Объект.Процент;
		ОписаниеЗаявки.РазмерУдержанияСумма 	= Объект.Сумма;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправкиСМестаРаботы Тогда
		
		ОписаниеЗаявки.НазначениеСправки = Объект.НазначениеСправкиСРаботыСтрока;
		
		ВидСправки = Неопределено;
		Если Объект.Свойство("ВидСправки", ВидСправки) Тогда
			ОписаниеЗаявки.ВидСправки = ВидСправки;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаОстаткиОтпусков Тогда
		// Не требуется дополнительная обработка.
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОтменаЗаявки Тогда
		
		ОписаниеЗаявки.ВариантИсправления = Перечисления.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена;
		
	КонецЕсли;
	
	ЗаявкиСотрудников.ЗарегистрироватьНовуюЗаявку(ДокументМенеджер, ОписаниеЗаявки, ПараметрыЗаявок);

КонецПроцедуры

Функция ОписаниеВычетаНаРебенка(ОписаниеВычета)
	
	ТекстВычета = НСтр("ru = 'Вычет на';
						|en = 'Вычет на'");
	
	СтаршинствоРебенка = "первого";
	Если ОписаниеВычета.СтаршинствоРебенка = 1 Тогда
		СтаршинствоРебенка = НСтр("ru = 'первого';
									|en = 'первого'");
	ИначеЕсли ОписаниеВычета.СтаршинствоРебенка = 2 Тогда
		СтаршинствоРебенка =  НСтр("ru = 'второго';
									|en = 'второго'");
	ИначеЕсли ОписаниеВычета.СтаршинствоРебенка = 3 Тогда
		СтаршинствоРебенка =  НСтр("ru = 'третьего или последующего';
									|en = 'третьего или последующего'");
	КонецЕсли;
			
	Возврат (ТекстВычета + " " + СтаршинствоРебенка + " " + НСтр("ru = 'ребенка';
																|en = 'ребенка'") 
						 + ?(ОписаниеВычета.РебенокИнвалид, НСтр("ru = '-инвалида';
																|en = '-инвалида'"), "")
						 + " " + ?(ОписаниеВычета.ЗаявительОпекун, НСтр("ru = 'опекуну';
																		|en = 'опекуну'"), НСтр("ru = 'родителю';
																								|en = 'родителю'")) 
						 + ?(ОписаниеВычета.РодительОдиночка, " " + НСтр("ru = 'в двойном размере';
																		|en = 'в двойном размере'"), ""));
	
КонецФункции

Процедура СжатьФотографию(ОписаниеФайла)

	ДвоичныеДанные = ОписаниеФайла.ДвоичныеДанные;
	РазмерФайла = ДвоичныеДанные.Размер();
	МаксимальныйРазмерПринимаемогоФайла = ИнтеграцияУправлениеПерсоналомКлиентСервер.МаксимальныйРазмерПринимаемогоФайла();
	Если РазмерФайла > МаксимальныйРазмерПринимаемогоФайла Тогда
		// Пытаемся сжать файл картинки.
		ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(Новый Картинка(ДвоичныеДанные));
		Картинка = ОбрабатываемаяКартинка.ПолучитьКартинку();
		РазмерФайла = Картинка.РазмерФайла();
		Если РазмерФайла > МаксимальныйРазмерПринимаемогоФайла Тогда
			Коэффициент = МаксимальныйРазмерПринимаемогоФайла / РазмерФайла *100;
			ОбрабатываемаяКартинка.Масштабировать(Коэффициент);
			Картинка = ОбрабатываемаяКартинка.ПолучитьКартинку();
		КонецЕсли;
		ОписаниеФайла.ДвоичныеДанные = Картинка.ПолучитьДвоичныеДанные();
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьЗаявкуЗарплатаСразу(ДанныеЗаявки) Экспорт
	
	Объект = ДанныеЗаявки.Объект;
	
	НачатьТранзакцию();
	Попытка
		
		СсылкаНового = Документы.ДокументКадровогоЭДО.ПолучитьСсылку();
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеЗаявки.ЭлектронныйДокумент.ДвоичныеДанные);
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Вложение");
		ПараметрыФайла.ВладелецФайлов 				= СсылкаНового;
		ПараметрыФайла.ИмяБезРасширения 			= ДанныеЗаявки.ЭлектронныйДокумент.ИмяФайла;
		ПараметрыФайла.РасширениеБезТочки 			= ДанныеЗаявки.ЭлектронныйДокумент.РасширениеФайла;
		ПараметрыФайла.ВремяИзмененияУниверсальное 	= ТекущаяУниверсальнаяДата();
		ЭлектронныйДокумент = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);

		Если ДанныеЗаявки.ЭлектронныйДокумент.Свойство("ОригиналВMXL") Тогда
			РегистрыСведений.ПодписанныеПечатныеФормы.ЗарегистрироватьПечатнуюФорму(
				ДанныеЗаявки.ЭлектронныйДокумент.ОригиналВMXL,
				СсылкаНового,
				ЭлектронныйДокумент,
				Объект.Организация,
				Объект.ФизическоеЛицо,
				"ЗаявкаЗарплатаСразу",
				ДанныеЗаявки.ЭлектронныйДокумент.ИмяФайла);
		КонецЕсли;
		
		
		ОписаниеДокумента = Документы.ДокументКадровогоЭДО.СвойстваДокумента(
			ЭлектронныйДокумент, Объект.Организация, Объект.ФизическоеЛицо,
			СсылкаНового,
			Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника,
			Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
		
		ОписаниеДокумента.Дата									= Объект.ДатаСоздания;
		ОписаниеДокумента.ИдентификаторЗаявкиКабинетСотрудника 	= Объект.ИдентификаторЗаявки;
		ОписаниеДокумента.ИдентификаторДокумента				= Объект.ИдентификаторЗаявки;
		
		ОписаниеДокумента.ДополнительныеСвойства = Новый Структура("СсылкаНового", СсылкаНового);
		
		ДокументОбъект = Документы.ДокументКадровогоЭДО.НовыйДокумент(ОписаниеДокумента);
		ДокументОбъект.Комментарий = Объект.Комментарий;
		
		ДокументОбъект.Записать();
		КадровыйЭДО.ЗарегистрироватьДокументКЭДОКПересчетуСостояний(ДокументОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СборГрафиковОтпусковПодразделения

Функция ДокументыСборГрафиковОтпусковПоИдентификаторам(Идентификаторы) Экспорт
	
	ИдентификаторДокумент = Новый Соответствие;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков") Тогда
		МодульСборГрафиковОтпусков = ОбщегоНазначения.ОбщийМодуль("СборГрафиковОтпусков");
		ИдентификаторДокумент = МодульСборГрафиковОтпусков.ДокументыПоИдентификаторам(Идентификаторы);
	КонецЕсли;
	
	Возврат ИдентификаторДокумент;

КонецФункции

Процедура ЗагрузитьСборГрафиковОтпусковПодразделения(Объект, ИдентификаторДокумент) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков") Тогда
		
		МодульСборГрафиковОтпусков = ОбщегоНазначения.ОбщийМодуль("СборГрафиковОтпусков");
		
		ОписаниеДокумента = МодульСборГрафиковОтпусков.ОписаниеДокументаГрафикПодразделения();
		ОписаниеДокумента.Год 								= Объект.Год;
		ОписаниеДокумента.Подразделение 					= Объект.Подразделение;
		ОписаниеДокумента.ИдентификаторДокумента 			= Объект.ИдентификаторДокумента;
		ОписаниеДокумента.СостояниеСбораГрафиковОтпусков 	= Объект.Состояние;
		ОписаниеДокумента.ОтветственныйЗаСбор 				= Объект.Ответственный;
		Если Объект.Свойство("Периоды") И ЗначениеЗаполнено(Объект.Периоды) Тогда
			Для каждого ЗаписьПериода Из Объект.Периоды Цикл
				НоваяСтрока = ОписаниеДокумента.Периоды.Добавить();
				НоваяСтрока.ФизическоеЛицо 	= ЗаписьПериода.ФизическоеЛицо;
				НоваяСтрока.ДатаНачала 		= ЗаписьПериода.ДатаНачала;
				НоваяСтрока.ДатаОкончания 	= ЗаписьПериода.ДатаОкончания;
			КонецЦикла;
		КонецЕсли;
		
		МодульСборГрафиковОтпусков.ОбработатьНовыйГрафикПодразделения(ОписаниеДокумента, ИдентификаторДокумент);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьСборГрафиковОтпусковПредприятия(Объект, ИдентификаторДокумент) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков") Тогда
		МодульСборГрафиковОтпусков = ОбщегоНазначения.ОбщийМодуль("СборГрафиковОтпусков");
		ОписаниеДокумента = МодульСборГрафиковОтпусков.ОписаниеДокументаГрафикПредприятия();
		ОписаниеДокумента.Год 								= Объект.Год;
		ОписаниеДокумента.ИдентификаторДокумента 			= Объект.ИдентификаторДокумента;
		ОписаниеДокумента.СостояниеСбораГрафиковОтпусков 	= Объект.Состояние;
		ОписаниеДокумента.Инициатор 						= Объект.ИнициаторСбора;
		МодульСборГрафиковОтпусков.ОбработатьНовыйГрафикПредприятия(ОписаниеДокумента, ИдентификаторДокумент);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегистрацияДокументовНаПодпись

Процедура ЗарегистрироватьДокументыНаПодпись(ВызыватьИсключение = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданияКИсполнению = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
		Ложь, Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокФайлов = ЗаданияКИсполнению.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	Если СписокФайлов <> Неопределено Тогда
		ЗарегистрироватьИзмененияДокументовКадровогоЭДО(СписокФайлов, ВызыватьИсключение);
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗарегистрироватьИзмененияДокументовКадровогоЭДО(СписокФайлов, ВызыватьИсключение)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФайлов", СписокФайлов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись) КАК ТипОбъекта
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент В(&СписокФайлов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбработанныеФайлы = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбработанныеФайлы.Добавить(Выборка.ЭлектронныйДокумент);
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
				МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
				МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработки(
							ОбработанныеФайлы,
							Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Если ВызыватьИсключение Тогда
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегистрацияРезультатовСогласования

Функция ДанныеДляОбработкиРезультатовСогласования(ИдентификаторыДокументов) Экспорт
	
	Данные = Новый Структура("
	|ДокументыКЭДО,
	|РасчетныеЛистки,
	|Согласия,
	|ИспользуетсяКЭДО");
	
	Данные.ИспользуетсяКЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ДокументКадровогоЭДО.ОснованиеДокумента КАК ОснованиеДокумента
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)
	|	И НЕ ДокументКадровогоЭДО.ПометкаУдаления";
	Данные.ДокументыКЭДО = Запрос.Выполнить().Выгрузить();
	
	ДокументыКЭДО = Данные.ДокументыКЭДО.ВыгрузитьКолонку("Ссылка");
	Данные.Согласия = КадровыйЭДО.ДокументыКЭДОСогласиеНаПрисоединениеККЭДО(ДокументыКЭДО);
	
	Запрос.УстановитьПараметр("ДокументыКЭДО", ДокументыКЭДО);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетныеЛисткиКабинетСотрудника.Организация КАК Организация,
	|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛисткиКабинетСотрудника.Месяц КАК Месяц,
	|	РасчетныеЛисткиКабинетСотрудника.ПерваяПоловинаМесяца КАК ПерваяПоловинаМесяца,
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
	|ГДЕ
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО В(&ДокументыКЭДО)";
	Данные.РасчетныеЛистки = Запрос.Выполнить().Выгрузить();
	
	Возврат Данные;

КонецФункции

Процедура ЗарегистрироватьРезультатСогласования(РезультатСогласования, ДанныеДокументаКЭДО, ДанныеДляОбработки) Экспорт
	
	ИспользуетсяКЭДО 				= ДанныеДляОбработки.ИспользуетсяКЭДО;
	ДокументыКЭДОРасчетныеЛистки 	= ДанныеДляОбработки.РасчетныеЛистки;
	ДокументыКЭДОСогласия 			= ДанныеДляОбработки.Согласия;
	
	РолиПодписантов = РолиПодписантовРезультатаСогласования(РезультатСогласования);
	
	НачатьТранзакцию();
	Попытка
		
		ДанныеПодписи = ДанныеПодписиРезультатаСогласования(РезультатСогласования);
		
		Если Перечисления.РолиПодписантовКЭДО.ЭтоПодписьРуководителя(РолиПодписантов) Тогда
			
			// Обработка записи ЭП
			Если ИспользуетсяКЭДО И ЗначениеЗаполнено(ДанныеПодписи.ЭлектроннаяПодпись) Тогда
				СохранитьЭлектроннуюПодписьРезультатаСогласования(ДанныеДокументаКЭДО.ЭлектронныйДокумент, РезультатСогласования, ДанныеПодписи);
			КонецЕсли;
			
		ИначеЕсли Перечисления.РолиПодписантовКЭДО.ЭтоПодписьСотрудника(РолиПодписантов) Тогда
			
			ОбновитьПредставление = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(РезультатСогласования, "ОбновитьПредставление");
			ОбновитьПредставлениеПодписи = ИспользуетсяКЭДО И ЗначениеЗаполнено(ДанныеПодписи.ЭлектроннаяПодпись)
						И ?(ОбновитьПредставление = Неопределено, Ложь, ОбновитьПредставление);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
			ЭлементБлокировки.УстановитьЗначение("Объект", ДанныеДокументаКЭДО.Ссылка);
			ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", РезультатСогласования.Подписант);
			
			СтрокаТЗРасчетныйЛисток = ДокументыКЭДОРасчетныеЛистки.Найти(ДанныеДокументаКЭДО.Ссылка, "ДокументКадровогоЭДО");
			Если ЗначениеЗаполнено(СтрокаТЗРасчетныйЛисток) Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("Организация", 			СтрокаТЗРасчетныйЛисток.Организация);
				ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо",			СтрокаТЗРасчетныйЛисток.ФизическоеЛицо);
				ЭлементБлокировки.УстановитьЗначение("Месяц", 					СтрокаТЗРасчетныйЛисток.Месяц);
				ЭлементБлокировки.УстановитьЗначение("ПерваяПоловинаМесяца", 	СтрокаТЗРасчетныйЛисток.ПерваяПоловинаМесяца);
			КонецЕсли;
			
			СтрокаТЗСогласие = ДокументыКЭДОСогласия.Найти(ДанныеДокументаКЭДО.Ссылка, "ДокументКадровогоЭДО");
			Если ЗначениеЗаполнено(СтрокаТЗСогласие) Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеСогласияНаПрисоединениеККЭДО");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТЗСогласие.Ссылка);
			КонецЕсли;
			
			Если ОбновитьПредставлениеПодписи Тогда 
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеДокументаКЭДО.Ссылка);
				ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись);
			КонецЕсли;
			
			Блокировка.Заблокировать();
			
			Если ЗначениеЗаполнено(СтрокаТЗРасчетныйЛисток) Тогда
				МенеджерЗаписи = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗРасчетныйЛисток, "Организация,ФизическоеЛицо,Месяц,ПерваяПоловинаМесяца");
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			// Обработка записи ЭП
			Отпечаток = "";
			Если ИспользуетсяКЭДО И ЗначениеЗаполнено(ДанныеПодписи.ЭлектроннаяПодпись) Тогда
				СохранитьЭлектроннуюПодписьРезультатаСогласования(ДанныеДокументаКЭДО.ЭлектронныйДокумент, РезультатСогласования, ДанныеПодписи, Отпечаток);
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект 				= ДанныеДокументаКЭДО.Ссылка;
			МенеджерЗаписи.ФизическоеЛицо 		= РезультатСогласования.Подписант;
			МенеджерЗаписи.Отпечаток 			= Отпечаток;
			МенеджерЗаписи.ДатаПодписи 			= ДанныеПодписи.ДатаПодписи;
			МенеджерЗаписи.РезультатСогласования = РезультатСогласования.РезультатСогласования;
			МенеджерЗаписи.Записать();
			
			Если ЗначениеЗаполнено(РезультатСогласования.Комментарий) Тогда
				РегистрыСведений.КомментарииФайловДокументовКЭДО.ДобавитьКомментарийФайла(
					ДанныеДокументаКЭДО.ЭлектронныйДокумент, РезультатСогласования.Комментарий, РезультатСогласования.Подписант);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЗСогласие) Тогда
				Состояние = ?(РезультатСогласования.РезультатСогласования = Перечисления.РезультатыСогласованияБЗК.Согласовано,
					Перечисления.СостоянияСогласийНаПрисоединениеККЭДО.Согласие,
					Перечисления.СостоянияСогласийНаПрисоединениеККЭДО.Отказ);
				Подтвержден = ЗначениеЗаполнено(Отпечаток);
				РегистрыСведений.СостояниеСогласияНаПрисоединениеККЭДО.УстановитьСостояние(СтрокаТЗСогласие.Ссылка, Состояние, Подтвержден);
			КонецЕсли;
			
			Если ОбновитьПредставлениеПодписи Тогда
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка 		= ДанныеДокументаКЭДО.Ссылка;
				МенеджерЗаписи.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
				МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаявкиСотрудников.ЗарегистрироватьРезультатСогласованияЗаявки(ДанныеДокументаКЭДО.ОснованиеДокумента, РезультатСогласования);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура СохранитьЭлектроннуюПодписьРезультатаСогласования(ЭлектронныйДокумент, РезультатСогласования, ДанныеПодписи, Отпечаток = "")

	РолиПодписантов = РолиПодписантовРезультатаСогласования(РезультатСогласования);
	Если Не Перечисления.РолиПодписантовКЭДО.ЭтоПодписьСервиса(РолиПодписантов) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаРольПодписанта = КабинетСотрудника.СтрокаРольПодписантаДляЭП(РолиПодписантов[0]);
	Подпись = Base64Значение(ДанныеПодписи.ЭлектроннаяПодпись);
	
	Подписи = ЭлектроннаяПодписьКЭДО.УстановленныеПодписи(ЭлектронныйДокумент);
	ПодписиКУдалению = Новый Массив;
	Для каждого СвойстваПодписи Из Подписи Цикл
		Если СвойстваПодписи.Подпись = Подпись Тогда
			ПодписиКУдалению.Добавить(СвойстваПодписи.ПорядковыйНомер);
		КонецЕсли;
	КонецЦикла;
	Если ПодписиКУдалению.Количество() > 0 Тогда
		ЭлектроннаяПодпись.УдалитьПодпись(ЭлектронныйДокумент, ПодписиКУдалению);
	КонецЕсли;
	
	Сертификат = Неопределено;
	Если ЗначениеЗаполнено(ДанныеПодписи.СертификатЭП) Тогда
		Сертификат = Base64Значение(ДанныеПодписи.СертификатЭП);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(Сертификат);
		Отпечаток = ПолучитьBase64СтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма);
	КонецЕсли;
	
	СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
	СвойстваПодписи.Вставить("Подпись", 			Подпись);
	СвойстваПодписи.Вставить("Сертификат", 			Сертификат);
	СвойстваПодписи.Вставить("Отпечаток", 			Отпечаток);
	СвойстваПодписи.Вставить("КомуВыданСертификат", РезультатСогласования.ИмяПодписанта);
	СвойстваПодписи.Вставить("Комментарий", 		СтрокаРольПодписанта);
	СвойстваПодписи.Вставить("ДатаПодписи", 		ДанныеПодписи.ДатаПодписи);
	СвойстваПодписи.ИдентификаторПодписи = Новый УникальныйИдентификатор;
	
	ЭлектроннаяПодпись.ДобавитьПодпись(ЭлектронныйДокумент, СвойстваПодписи);
	
	РезультатПодписания = Новый Структура;
	РезультатПодписания.Вставить("Объект", ЭлектронныйДокумент);
	РезультатПодписания.Вставить("СвойстваПодписи", СвойстваПодписи);
	РезультатПодписания.Вставить("ИдентификаторПодписи", СвойстваПодписи.ИдентификаторПодписи);
	
	ДанныеПодписейКЭДО = Новый Массив;
	ДанныеПодписейКЭДО.Добавить(Новый Структура("МЧД,РольПодписанта", Неопределено, РезультатСогласования.РольПодписанта));
	
	КадровыйЭДОВызовСервера.ПриДобавленииПодписи(РезультатПодписания, ДанныеПодписейКЭДО);

КонецПроцедуры

Функция РолиПодписантовРезультатаСогласования(РезультатСогласования)
	
	РолиПодписантов = Новый Массив;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатСогласования, "НаборСвойствПодписиКЭДО") Тогда
		Если ЗначениеЗаполнено(РезультатСогласования.НаборСвойствПодписиКЭДО) Тогда
			Для Каждого ДанныеСвойств Из РезультатСогласования.НаборСвойствПодписиКЭДО Цикл
				РолиПодписантов.Добавить(ДанныеСвойств.РольПодписанта);
			КонецЦикла;
		КонецЕсли;
	Иначе
		РолиПодписантов.Добавить(РезультатСогласования.РольПодписанта);
	КонецЕсли;
	
	Возврат РолиПодписантов;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПравилСогласования

Функция ЗагруженныеПравилаСогласования(Идентификаторы) Экспорт

	ЗагруженныеПравила = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат ЗагруженныеПравила;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаСогласования.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ПравилаСогласования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаСогласованияЗаявокКабинетСотрудника КАК ПравилаСогласования
	|ГДЕ
	|	ПравилаСогласования.ИдентификаторПравила В(&Идентификаторы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагруженныеПравила.Вставить(Выборка.ИдентификаторПравила, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ЗагруженныеПравила;

КонецФункции

Процедура ЗагрузитьПравилоСогласования(Объект, ЗагруженныеПравила) Экспорт

	ПравилоСогласования = ЗагруженныеПравила[Объект.ИдентификаторПравила];
	Если ПравилоСогласования = Неопределено И Объект.ПометкаУдаления = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если ПравилоСогласования = Неопределено Тогда
			ПравилоОбъект = Справочники.ПравилаСогласованияЗаявокКабинетСотрудника.СоздатьЭлемент();
		Иначе
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ПравилаСогласованияЗаявокКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПравилоСогласования);
			Блокировка.Заблокировать();
			ПравилоОбъект = ПравилоСогласования.ПолучитьОбъект();
		КонецЕсли;
		
		Если Объект.ПометкаУдаления = Истина Тогда
			ПравилоОбъект.ПометкаУдаления = Истина;
		Иначе
			ПравилоОбъект.ТипЗаявки 			= Объект.ТипЗаявки;
			ПравилоОбъект.Подразделение 		= Объект.Подразделение;
			ПравилоОбъект.ФизическоеЛицо 		= Объект.ФизическоеЛицо;
			ПравилоОбъект.ИдентификаторПравила 	= Объект.ИдентификаторПравила;
			ПравилоОбъект.ШаблонДокумента 		= ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Объект, "ШаблонДокумента");
			ПравилоОбъект.ШагиПравилаСогласования.Очистить();
			Если ЗначениеЗаполнено(Объект.ШагиСогласования) Тогда
				Для Каждого ШагПравила Из Объект.ШагиСогласования Цикл
					НоваяСтрока = ПравилоОбъект.ШагиПравилаСогласования.Добавить();
					НоваяСтрока.ШагСогласования 	= ШагПравила.НомерШага;
					НоваяСтрока.ТипШага 			= ШагПравила.ТипШага;
					НоваяСтрока.РольПодписанта 		= ШагПравила.РольПодписанта;
					НоваяСтрока.Подписант 			= ШагПравила.ФизическоеЛицо;
					НоваяСтрока.ТребуемаяПодпись 	= ШагПравила.ВидТребуемойПодписи;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ПравилоОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

Функция ПрименяемыеВычеты(ФизическиеЛица, ДатаАктуальности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерВычетовНДФЛСрезПоследних.КодВычета КАК КодВычета,
	|	РазмерВычетовНДФЛСрезПоследних.Размер КАК Размер
	|ИЗ
	|	РегистрСведений.РазмерВычетовНДФЛ.СрезПоследних(&ДатаАктуальности, ) КАК РазмерВычетовНДФЛСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	РазмерыВычетов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыВычетов.Вставить(Выборка.КодВычета, Выборка.Размер);
	КонецЦикла;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10)));
	Таблица.Колонки.Добавить("ОписаниеВычета", Новый ОписаниеТипов("Строка"));
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ДатаАктуальности));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.Сотрудник КАК ФизическоеЛицо,
	|	ИмущественныеВычетыНДФЛ.ПрименятьВычетыС КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ИмущественныеВычетыНДФЛ.ПрименятьВычетыС, ГОД) КАК ДатаОкончания,
	|	СУММА(ИмущественныеВычетыНДФЛ.РасходыНаСтроительствоПриобретение) КАК РасходыНаСтроительствоПриобретение,
	|	СУММА(ИмущественныеВычетыНДФЛ.ПроцентыПоКредитам) КАК ПроцентыПоКредитам,
	|	СУММА(ИмущественныеВычетыНДФЛ.ПроцентыПриПерекредитовании) КАК ПроцентыПриПерекредитовании,
	|	СУММА(ИмущественныеВычетыНДФЛ.РасходыНаСвоеОбучение) КАК РасходыНаСвоеОбучение,
	|	СУММА(ИмущественныеВычетыНДФЛ.РасходыНаОбучениеДетей) КАК РасходыНаОбучениеДетей,
	|	СУММА(ИмущественныеВычетыНДФЛ.РасходыНаЛечение) КАК РасходыНаЛечение,
	|	СУММА(ИмущественныеВычетыНДФЛ.СтраховыеВзносыНаМедУслуги) КАК СтраховыеВзносыНаМедУслуги,
	|	СУММА(ИмущественныеВычетыНДФЛ.РасходыНаДорогостоящееЛечение) КАК РасходыНаДорогостоящееЛечение,
	|	СУММА(ИмущественныеВычетыНДФЛ.ВзносыНаДобровольноеСтрахованиеЖизни) КАК ВзносыНаДобровольноеСтрахованиеЖизни,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация
	|ИЗ
	|	Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИмущественныеВычетыНДФЛ.Организация = Организации.Ссылка
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.Сотрудник В(&ФизическиеЛица)
	|	И ИмущественныеВычетыНДФЛ.ПрименятьВычетыС МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ИмущественныеВычетыНДФЛ.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ,
	|	ИмущественныеВычетыНДФЛ.Сотрудник,
	|	ИмущественныеВычетыНДФЛ.ПрименятьВычетыС,
	|	КОНЕЦПЕРИОДА(ИмущественныеВычетыНДФЛ.ПрименятьВычетыС, ГОД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕжегодныеСтандартныеВычеты.Сотрудник КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	ЕжегодныеСтандартныеВычеты.ПрименятьВычетыС КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ЕжегодныеСтандартныеВычеты.ПрименятьВычетыС, ГОД) КАК ДатаОкончания,
	|	ЕжегодныеСтандартныеВычеты.РазмерВычета КАК РазмерВычета
	|ИЗ
	|	Документ.ЕжегодныеСтандартныеВычеты КАК ЕжегодныеСтандартныеВычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ЕжегодныеСтандартныеВычеты.Организация = Организации.Ссылка
	|ГДЕ
	|	ЕжегодныеСтандартныеВычеты.Сотрудник В(&ФизическиеЛица)
	|	И ЕжегодныеСтандартныеВычеты.ПрименятьВычетыС МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЕжегодныеСтандартныеВычеты.Проведен";
	РезультатыЗапроса = Запрос.ВыполнитьПакет(); 
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.РасходыНаСтроительствоПриобретение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаСтроительствоПриобретение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на жилье';
												|en = 'Accommodation expenses'");
		КонецЕсли;
		
		Если Выборка.ПроцентыПоКредитам > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ПроцентыПоКредитам;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Проценты по кредитам';
												|en = 'Credit interest'");
		КонецЕсли;
		
		Если Выборка.ПроцентыПриПерекредитовании > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ПроцентыПриПерекредитовании;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Проценты при перекредитовании';
												|en = 'Refinancing interest'");
		КонецЕсли;
		
		Если Выборка.РасходыНаСвоеОбучение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаСвоеОбучение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на свое обучение';
												|en = 'Training expenses'");
		КонецЕсли;
		
		Если Выборка.РасходыНаОбучениеДетей > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаОбучениеДетей;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на обучение детей';
												|en = 'Children''s education expenses'");
		КонецЕсли;
		
		Если Выборка.РасходыНаЛечение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаЛечение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на лечение';
												|en = 'Treatment expenses'");
		КонецЕсли;
		
		Если Выборка.СтраховыеВзносыНаМедУслуги > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.СтраховыеВзносыНаМедУслуги;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Страховые взносы на медицинские услуги';
												|en = 'Insurance contributions for medical services'");
		КонецЕсли;
		
		Если Выборка.РасходыНаДорогостоящееЛечение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаДорогостоящееЛечение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на дорогостоящее лечение';
												|en = 'Expensive treatment expenses'");
		КонецЕсли;
		
		Если Выборка.ВзносыНаДобровольноеСтрахованиеЖизни > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ВзносыНаДобровольноеСтрахованиеЖизни;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Взносы на добровольное страхование жизни';
												|en = 'Voluntary life insurance contributions'");
		КонецЕсли;
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.РазмерВычета > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РазмерВычета;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Вычет ГТО';
												|en = 'Вычет ГТО'");
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрименениеВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрименениеВычетов.ГоловнаяОрганизация КАК Организация
	|ПОМЕСТИТЬ ВТПрименениеВычетов
	|ИЗ
	|	РегистрСведений.ПрименениеСтандартныхВычетовПоНДФЛ.СрезПоследних(&ДатаАктуальности, ФизическоеЛицо В (&ФизическиеЛица)) КАК ПрименениеВычетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТПоследнийМесяцВычетовНаДетей
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации <= &ДатаАктуальности
	|	И СтандартныеВычетыНаДетейНДФЛ.ДействуетДо >= &ДатаАктуальности
	|	И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вычеты.МесяцРегистрации КАК ДатаНачала,
	|	Вычеты.ДействуетДо КАК ДатаОкончания,
	|	Вычеты.КодВычета КАК КодВычета,
	|	Вычеты.КоличествоДетей КАК КоличествоДетей,
	|	ВидыВычетов.ПолноеНаименование КАК ПолноеНаименование,
	|	ПрименениеВычетов.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК Вычеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийМесяцВычетовНаДетей КАК ПоследнийМесяцВычетов
	|		ПО Вычеты.МесяцРегистрации = ПоследнийМесяцВычетов.МесяцРегистрации
	|			И Вычеты.ФизическоеЛицо = ПоследнийМесяцВычетов.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетов
	|		ПО Вычеты.КодВычета = ВидыВычетов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрименениеВычетов КАК ПрименениеВычетов
	|		ПО Вычеты.ФизическоеЛицо = ПрименениеВычетов.ФизическоеЛицо
	|ГДЕ
	|	Вычеты.КоличествоДетей > 0";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ТекстРубли = НСтр("ru = 'р';
						|en = 'r'");
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		РазмерВычета = РазмерыВычетов[Выборка.КодВычета];
		ОписаниеВычета = СтрШаблон("%1 %2. %3", РазмерВычета, ТекстРубли, Выборка.ПолноеНаименование);
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.РазмерВычета 	= РазмерВычета;
		НоваяСтрока.ОписаниеВычета 	= ОписаниеВычета;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрименениеВычетов.Организация КАК Организация,
	|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вычеты.КодВычетаЛичный КАК КодВычета,
	|	ВидыВычетов.ПолноеНаименование КАК ПолноеНаименование,
	|	Вычеты.Период КАК ДатаНачала
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ.СрезПоследних(&ДатаАктуальности, ФизическоеЛицо В (&ФизическиеЛица)) КАК Вычеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрименениеВычетов КАК ПрименениеВычетов
	|		ПО Вычеты.ФизическоеЛицо = ПрименениеВычетов.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетов
	|		ПО Вычеты.КодВычетаЛичный = ВидыВычетов.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		РазмерВычета = РазмерыВычетов[Выборка.КодВычета];
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.РазмерВычета 	= РазмерВычета;
		НоваяСтрока.ОписаниеВычета 	= Выборка.ПолноеНаименование;
	КонецЦикла;
	
	Результат = Таблица.Скопировать(, "Организация, ФизическоеЛицо");
	Результат.Свернуть("Организация, ФизическоеЛицо");
	Результат.Колонки.Добавить("ИнформацияОВычетах", Новый ОписаниеТипов("ТаблицаЗначений"));
	Для Каждого СтрокаТаблицы  Из Результат Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтрокаТаблицы.Организация);
		Отбор.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		ТаблицаИнформацияОВычетах = НоваяТаблицаИнформацияОВычетах();
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаИнформацияОВычетах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;
		СтрокаТаблицы.ИнформацияОВычетах = ТаблицаИнформацияОВычетах;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

Функция НоваяТаблицаИнформацияОВычетах()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаНачала", 		Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаОкончания", 	Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("РазмерВычета", 		Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ОписаниеВычета", 	Новый ОписаниеТипов("Строка"));
	Возврат Результат;
	
КонецФункции

Функция ДанныеСправок2НДФЛ(ДокументыКЭДО) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки", ДокументыКЭДО);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКЭДО.Ссылка КАК ДокументКЭДО,
	|	ДокументыКЭДО.ОснованиеДокумента КАК Справка2НДФЛ,
	|	ДокументыКЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДокументыКЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументыКЭДО
	|ГДЕ
	|	ДокументыКЭДО.Ссылка В(&Ссылки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКЭДО.Справка2НДФЛ КАК Ссылка
	|ПОМЕСТИТЬ ВТСсылки
	|ИЗ
	|	ВТДокументы КАК ДокументыКЭДО";
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТДанныеСправок2НДФЛДляПубликации(Запрос.МенеджерВременныхТаблиц);
	БизнесПроцессыЗаявокСотрудников.СоздатьВТСправки2НДФЛПоЗаявкам(Запрос.МенеджерВременныхТаблиц);
	ЗаявкиСотрудников.СоздатьВТСправки2НДФЛЗаявок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявки.Заявка КАК Заявка,
	|	Заявки.СправкаНДФЛ КАК СправкаНДФЛ,
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Заявки.ОтветПоЗаявке КАК ОтветПоЗаявке,
	|	Заявки.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	Заявки.РезультатВыполнения КАК РезультатВыполнения
	|ПОМЕСТИТЬ ВТЗаявки
	|ИЗ
	|	ВТСправки2НДФЛЗаявок КАК Заявки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заявки.Заявка,
	|	Заявки.СправкаНДФЛ,
	|	Заявки.ИдентификаторЗаявки,
	|	Заявки.ОтветПоЗаявке,
	|	Заявки.ВариантФормированияФайлаОтвета,
	|	Заявки.РезультатВыполнения
	|ИЗ
	|	ВТСправки2НДФЛПоЗаявкам КАК Заявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКЭДО.ДокументКЭДО КАК ДокументКЭДО,
	|	ДокументыКЭДО.Справка2НДФЛ КАК Справка2НДФЛ,
	|	ДокументыКЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ДокументыКЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ЕСТЬNULL(Заявки.ИдентификаторЗаявки, """") КАК ИдентификаторЗаявки,
	|	ЕСТЬNULL(Заявки.ОтветПоЗаявке, """") КАК Комментарий,
	|	ЕСТЬNULL(Заявки.Заявка, НЕОПРЕДЕЛЕНО) КАК Заявка,
	|	ЕСТЬNULL(Заявки.ВариантФормированияФайлаОтвета, НЕОПРЕДЕЛЕНО) КАК ВариантФормированияФайлаОтвета,
	|	ЕСТЬNULL(Заявки.РезультатВыполнения, НЕОПРЕДЕЛЕНО) КАК РезультатВыполнения,
	|	ДанныеСправок2НДФЛ.Организация КАК Организация,
	|	ДанныеСправок2НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеСправок2НДФЛ.ДатаСоздания КАК ДатаСоздания,
	|	ДанныеСправок2НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
	|	ДанныеСправок2НДФЛ.СуммаДохода КАК СуммаДохода,
	|	ДанныеСправок2НДФЛ.СуммаНалога КАК СуммаНалога
	|ИЗ
	|	ВТДокументы КАК ДокументыКЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявки КАК Заявки
	|		ПО ДокументыКЭДО.Справка2НДФЛ = Заявки.СправкаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСправок2НДФЛДляПубликации КАК ДанныеСправок2НДФЛ
	|		ПО ДокументыКЭДО.Справка2НДФЛ = ДанныеСправок2НДФЛ.Ссылка";
	
	ДанныеСправок = Запрос.Выполнить().Выгрузить();
	ДанныеСправок.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	
	ДанныеЭлектронныхДокументов = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		ДанныеЭлектронныхДокументов = ДанныеЭлектронныхДокументовЗаявок(ДанныеСправок);
	Иначе
		Отбор = Новый Структура("ВариантФормированияФайлаОтвета", Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		НайденныеСтроки = ДанныеСправок.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			ДанныеЭлектронныхДокументов = ДанныеЭлектронныхДокументовЗаявок(НайденныеСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЭлектронныхДокументов) Тогда
		Для каждого СтрокаТЗ Из ДанныеСправок Цикл
			СтрокаТЗ.ДанныеЭлектронногоДокумента = ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеСправок;

КонецФункции

Функция ДанныеДокументовНаПодпись(ДокументыКЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ДокументыКЭДО);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКЭДО.Ссылка КАК ДокументКЭДО,
	|	ДокументыКЭДО.ОснованиеДокумента КАК ОснованиеДокумента,
	|	ДокументыКЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДокументыКЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ДокументыКЭДО.Организация КАК Организация,
	|	ДокументыКЭДО.ВнешниеПодписанты.(
	|		ФизическоеЛицо КАК ФизическоеЛицо
	|	) КАК ВнешниеПодписанты,
	|	ВЫБОР
	|		КОГДА ДокументыКЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетныйЛисток,
	|	ДокументыКЭДО.ВариантПодписания КАК ВариантПодписания,
	|	ДокументыКЭДО.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументыКЭДО
	|ГДЕ
	|	ДокументыКЭДО.Ссылка В(&Ссылки)";
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();

	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("ДокументКЭДО");
	Данные.Колонки.Добавить("ЭлектронныйДокумент");
	Данные.Колонки.Добавить("ИдентификаторДокумента");
	Данные.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	Данные.Колонки.Добавить("Организация");
	Данные.Колонки.Добавить("ФизическиеЛица");
	Данные.Колонки.Добавить("ДатаДокумента");
	Данные.Колонки.Добавить("НазваниеДокумента");
	Данные.Колонки.Добавить("ВозможноОбновлениеПредставлений");
	Данные.Колонки.Добавить("РасчетныйЛисток", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("ВариантПодписания", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыПодписанияДокументовКЭДО"));
	
	ЭлектронныеДокументы = ДанныеДокументов.ВыгрузитьКолонку("ЭлектронныйДокумент");
	ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
	
	Для каждого СтрокаТЗ Из ДанныеДокументов Цикл
	
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.ДокументКЭДО 			= СтрокаТЗ.ДокументКЭДО;
		НоваяСтрока.ЭлектронныйДокумент 	= СтрокаТЗ.ЭлектронныйДокумент;
		НоваяСтрока.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.Организация 			= СтрокаТЗ.Организация;
		НоваяСтрока.ФизическиеЛица 			= СтрокаТЗ.ВнешниеПодписанты.ВыгрузитьКолонку("ФизическоеЛицо");
		НоваяСтрока.РасчетныйЛисток 		= СтрокаТЗ.РасчетныйЛисток;
		НоваяСтрока.ВариантПодписания 		= СтрокаТЗ.ВариантПодписания;
		НоваяСтрока.ДанныеЭлектронногоДокумента 	= ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
		НоваяСтрока.ВозможноОбновлениеПредставлений = НоваяСтрока.ДанныеЭлектронногоДокумента <> Неопределено;
		
		НазваниеДокумента 	= "";
		ДатаДокумента = "";
		Если ЗначениеЗаполнено(НоваяСтрока.ДанныеЭлектронногоДокумента) Тогда
			НазваниеДокумента 	= НоваяСтрока.ДанныеЭлектронногоДокумента.Оригинал.ИмяФайлаСРасширением;
			ДатаДокумента 		= НоваяСтрока.ДанныеЭлектронногоДокумента.Оригинал.Дата;
		Иначе
			НазваниеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.ОснованиеДокумента, "Представление");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = СтрокаТЗ.ДатаДокумента;
		КонецЕсли;
		НоваяСтрока.НазваниеДокумента 	= НазваниеДокумента;
		НоваяСтрока.ДатаДокумента 		= ДатаДокумента;
	
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеСправокСРаботы(ДокументыКЭДО) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки", ДокументыКЭДО);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКЭДО.Ссылка КАК ДокументКЭДО,
	|	ДокументыКЭДО.ОснованиеДокумента КАК Заявка,
	|	ДокументыКЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДокументыКЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументыКЭДО
	|ГДЕ
	|	ДокументыКЭДО.Ссылка В(&Ссылки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Заявка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаявки
	|ИЗ
	|	ВТДокументы КАК Документы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаявок.Заявка КАК Заявка,
	|	ДанныеЗаявок.Организация КАК Организация,
	|	ДанныеЗаявок.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеЗаявок.ОтветПоЗаявке КАК ОтветПоЗаявке,
	|	ДанныеЗаявок.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	ДанныеЗаявок.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	ДанныеЗаявок.РезультатВыполнения КАК РезультатВыполнения
	|ПОМЕСТИТЬ ВТДанныеЗаявок
	|ИЗ
	|	РегистрСведений.ДанныеЗаявокКабинетСотрудника КАК ДанныеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаявки КАК Заявки
	|		ПО ДанныеЗаявок.Заявка = Заявки.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заявки.Ссылка,
	|	ДанныеЗаявок.Организация,
	|	ДанныеЗаявок.ФизическоеЛицо,
	|	ДанныеЗаявок.ОтветПоЗаявке,
	|	ДанныеЗаявок.ИдентификаторЗаявки,
	|	ДанныеЗаявок.ВариантФормированияФайлаОтвета,
	|	ДанныеЗаявок.РезультатВыполнения
	|ИЗ
	|	ВТЗаявки КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК ЗаявкаПрежняяВерсия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаявокКабинетСотрудника КАК ДанныеЗаявок
	|			ПО ЗаявкаПрежняяВерсия.Ссылка = ДанныеЗаявок.Заявка
	|		ПО Заявки.Ссылка = ЗаявкаПрежняяВерсия.Задание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.ДокументКЭДО КАК ДокументКЭДО,
	|	Документы.Заявка КАК Заявка,
	|	Документы.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	Документы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ДанныеЗаявок.Организация КАК Организация,
	|	ДанныеЗаявок.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеЗаявок.ОтветПоЗаявке КАК Комментарий,
	|	ДанныеЗаявок.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	ДанныеЗаявок.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	ДанныеЗаявок.РезультатВыполнения КАК РезультатВыполнения
	|ИЗ
	|	ВТДокументы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеЗаявок КАК ДанныеЗаявок
	|		ПО Документы.Заявка = ДанныеЗаявок.Заявка";
	ДанныеСправок = Запрос.Выполнить().Выгрузить();

	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("ДокументКЭДО");
	Данные.Колонки.Добавить("ИдентификаторДокумента");
	Данные.Колонки.Добавить("Заявка");
	Данные.Колонки.Добавить("РезультатВыполнения");
	Данные.Колонки.Добавить("ИдентификаторЗаявки");
	Данные.Колонки.Добавить("Организация");
	Данные.Колонки.Добавить("ФизическоеЛицо");
	Данные.Колонки.Добавить("ЭлектронныйДокумент");
	Данные.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	Данные.Колонки.Добавить("ВариантФормированияФайлаОтвета");
	Данные.Колонки.Добавить("Комментарий"); 

	ДанныеЭлектронныхДокументов = Новый Соответствие;
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		ДанныеЭлектронныхДокументов = ДанныеЭлектронныхДокументовЗаявок(ДанныеСправок);
	Иначе
		Отбор = Новый Структура("ВариантФормированияФайлаОтвета", Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		НайденныеСтроки = ДанныеСправок.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			ДанныеЭлектронныхДокументов = ДанныеЭлектронныхДокументовЗаявок(ДанныеСправок);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ДанныеСправок Цикл
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.ДокументКЭДО 					= СтрокаТЗ.ДокументКЭДО;
		НоваяСтрока.ИдентификаторДокумента 			= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.Заявка 							= СтрокаТЗ.Заявка;
		НоваяСтрока.ЭлектронныйДокумент 			= СтрокаТЗ.ЭлектронныйДокумент;
		НоваяСтрока.ИдентификаторЗаявки 			= СтрокаТЗ.ИдентификаторЗаявки;
		НоваяСтрока.Организация 					= СтрокаТЗ.Организация;
		НоваяСтрока.ФизическоеЛицо 					= СтрокаТЗ.ФизическоеЛицо;
		НоваяСтрока.Комментарий 					= СтрокаТЗ.Комментарий;
		НоваяСтрока.РезультатВыполнения 			= СтрокаТЗ.РезультатВыполнения;
		НоваяСтрока.ВариантФормированияФайлаОтвета 	= СтрокаТЗ.ВариантФормированияФайлаОтвета;
		НоваяСтрока.ДанныеЭлектронногоДокумента 	= ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

Функция ДанныеСогласийКЭДО(ДокументыКЭДО) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки", ДокументыКЭДО);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКЭДО.Ссылка КАК ДокументКЭДО,
	|	ДокументыКЭДО.ОснованиеДокумента КАК Согласие,
	|	ДокументыКЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДокументыКЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументыКЭДО
	|ГДЕ
	|	ДокументыКЭДО.Ссылка В(&Ссылки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Согласия.Ссылка КАК Ссылка,
	|	Согласия.Организация КАК Организация,
	|	Согласия.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Согласия.Дата КАК ДатаСоздания
	|ПОМЕСТИТЬ ВТСогласия
	|ИЗ
	|	Документ.СогласиеНаПрисоединениеККЭДО КАК Согласия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК Документы
	|		ПО Согласия.Ссылка = Документы.Согласие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.ДокументКЭДО КАК ДокументКЭДО,
	|	Документы.Согласие КАК Согласие,
	|	Документы.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	Документы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	Согласия.Организация КАК Организация,
	|	Согласия.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Согласия.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	ВТДокументы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСогласия КАК Согласия
	|		ПО Документы.Согласие = Согласия.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РезультатыВыполненияЗаявок(ТаблицаИзменений) Экспорт
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Заявка");
	Данные.Колонки.Добавить("ИдентификаторЗаявки");
	Данные.Колонки.Добавить("ФизическоеЛицо");
	Данные.Колонки.Добавить("Комментарий");
	Данные.Колонки.Добавить("ЗаявкаПодписывается");
	Данные.Колонки.Добавить("Исполнитель");
	Данные.Колонки.Добавить("ВариантФормированияФайлаОтвета");
	Данные.Колонки.Добавить("ДокументыКЭДО");
	Данные.Колонки.Добавить("ЭлектронныйДокумент");
	Данные.Колонки.Добавить("ИдентификаторДокумента");
	Данные.Колонки.Добавить("ФайлЗаявки");
	Данные.Колонки.Добавить("РезультатВыполнения");
	Данные.Колонки.Добавить("ЭтоСогласованнаяСправкаОбОстаткеОтпуска");
	Данные.Колонки.Добавить("Аннулирована", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявки", ТаблицаИзменений.ВыгрузитьКолонку("Ссылка"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКЭДО.Ссылка КАК ДокументыКЭДО,
	|	ДокументыКЭДО.ОснованиеДокумента КАК Заявка,
	|	ДокументыКЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ВЫБОР
	|		КОГДА ДокументыКЭДО.ИдентификаторЗаявкиКабинетСотрудника <> ДокументыКЭДО.ИдентификаторДокумента
	|			ТОГДА ДокументыКЭДО.ИдентификаторДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИдентификаторДокумента
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументыКЭДО
	|ГДЕ
	|	ДокументыКЭДО.ОснованиеДокумента В(&Заявки)
	|	И НЕ ДокументыКЭДО.ПометкаУдаления
	|	И ДокументыКЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника)";
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	ТипыДанных = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ТипДанных", Истина);
	ОтборПоТипуДанных = Новый Структура("ТипДанных");
	ЗаявкиПоТипуДанных = Новый Соответствие;
	ЗаявкиКОбработке = Новый Массив;
	Для каждого ТипДанных Из ТипыДанных Цикл
		Если ТипДанных = Тип("Неопределено") Тогда
			Продолжить;
		КонецЕсли;
		ОтборПоТипуДанных.ТипДанных = ТипДанных;
		Заявки = ТаблицаИзменений.Скопировать(ОтборПоТипуДанных, "Ссылка").ВыгрузитьКолонку("Ссылка");
		Если ОбщегоНазначения.ЭтоДокумент(Метаданные.НайтиПоТипу(ТипДанных)) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗаявкиКОбработке, Заявки);
		Иначе
			ЗаявкиПоТипуДанных.Вставить(ТипДанных, Заявки);
		КонецЕсли;
	КонецЦикла;
	
	// Обработка заявок - документов.
	РезультатВыполненияПоРезультату = Новый Соответствие;
	РезультатВыполненияПоРезультату.Вставить(Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена, Перечисления.РезультатыСогласованияБЗК.Согласовано);
	РезультатВыполненияПоРезультату.Вставить(Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена, Перечисления.РезультатыСогласованияБЗК.Отклонено);

	ДанныеЗаявок 	= ЗаявкиСотрудников.ДанныеЗаявокДляВыгрузки(ЗаявкиКОбработке);
	ФайлыЗаявок 	= ЗаявкиСотрудников.ФайлыОтветаЗаявокДляВыгрузки(ЗаявкиКОбработке, ТипДанных);
	Отбор = Новый Структура("Заявка");
	Для каждого СтрокаТЗ Из ДанныеЗаявок Цикл
		
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.Заявка 							= СтрокаТЗ.Заявка;
		НоваяСтрока.ИдентификаторЗаявки 			= СтрокаТЗ.ИдентификаторЗаявки;
		НоваяСтрока.ФизическоеЛицо 					= СтрокаТЗ.ФизическоеЛицо;
		НоваяСтрока.ЗаявкаПодписывается 			= СтрокаТЗ.ЗаявкаПодписывается;
		НоваяСтрока.Исполнитель 					= СтрокаТЗ.Исполнитель;
		НоваяСтрока.ВариантФормированияФайлаОтвета 	= СтрокаТЗ.ВариантФормированияФайлаОтвета;
		НоваяСтрока.Аннулирована = (СтрокаТЗ.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована);
		
		СтрокаВложений = ФайлыЗаявок.Найти(СтрокаТЗ.Заявка, "Заявка");
		Если ЗначениеЗаполнено(СтрокаВложений) Тогда
			НоваяСтрока.ФайлЗаявки = СтрокаВложений.ФайлЗаявки;
		КонецЕсли;
		
		ДанныеДокумента = ДанныеДокументов.Найти(СтрокаТЗ.Заявка, "Заявка");
		Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
			НоваяСтрока.ДокументыКЭДО 			= ДанныеДокумента.ДокументыКЭДО;
			НоваяСтрока.ЭлектронныйДокумент 	= ДанныеДокумента.ЭлектронныйДокумент;
			НоваяСтрока.ИдентификаторДокумента 	= ДанныеДокумента.ИдентификаторДокумента;
		КонецЕсли;
		
		НоваяСтрока.РезультатВыполнения = РезультатВыполненияПоРезультату[СтрокаТЗ.РезультатВыполнения];
		
		// Комментарий передаем, если отказ по заявке
		// или это не заявки на справку с места работы или 2-НДФЛ,
		// для этих справок комментарий публикуется со справкой.
		Если НоваяСтрока.РезультатВыполнения = Перечисления.РезультатыСогласованияБЗК.Отклонено
			Или СтрокаТЗ.ТипОбъекта <> Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправки2НДФЛ И СтрокаТЗ.ТипОбъекта <> Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправкиСМестаРаботы 
			Или СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде Тогда
			НоваяСтрока.Комментарий = СтрокаТЗ.Комментарий;
		КонецЕсли;
		
		НоваяСтрока.ЭтоСогласованнаяСправкаОбОстаткеОтпуска = СтрокаТЗ.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаОстаткиОтпусков
			И НоваяСтрока.РезультатВыполнения = Перечисления.РезультатыСогласованияБЗК.Согласовано;
		
	КонецЦикла;
	
	// Обработка заявок бизнес-процессов.
	РезультатВыполненияПоСостоянию = Новый Соответствие;
	РезультатВыполненияПоСостоянию.Вставить(Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена, Перечисления.РезультатыСогласованияБЗК.Согласовано);
	РезультатВыполненияПоСостоянию.Вставить(Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ, Перечисления.РезультатыСогласованияБЗК.Отклонено);
	Для каждого КлючИЗначение Из ЗаявкиПоТипуДанных Цикл
	
		ТипДанных 	= КлючИЗначение.Ключ;
		Заявки 		= КлючИЗначение.Значение;
		
		ДанныеЗаявок 	= БизнесПроцессыЗаявокСотрудников.ТаблицаЗаявокСотрудника(Заявки, ТипДанных);
		ФайлыЗаявок 	= БизнесПроцессыЗаявокСотрудников.ТаблицаФайловОтветаЗаявокСотрудника(Заявки, ТипДанных);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Задания", Заявки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Заявка.Задание КАК Задание
		|ИЗ
		|	Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
		|ГДЕ
		|	Заявка.Задание В(&Задания)
		|	И Заявка.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована)";
		АннулированныеЗаявки = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задание"));
		
		Отбор = Новый Структура("Заявка");
		Для каждого СтрокаТЗ Из ДанныеЗаявок Цикл
			
			НоваяСтрока = Данные.Добавить();
			НоваяСтрока.Заявка 							= СтрокаТЗ.Заявка;
			НоваяСтрока.ИдентификаторЗаявки 			= СтрокаТЗ.ИдентификаторЗаявки;
			НоваяСтрока.ФизическоеЛицо 					= СтрокаТЗ.ФизическоеЛицо;
			НоваяСтрока.ЗаявкаПодписывается 			= СтрокаТЗ.ЗаявкаПодписывается;
			НоваяСтрока.Исполнитель 					= СтрокаТЗ.Исполнитель;
			НоваяСтрока.ВариантФормированияФайлаОтвета 	= СтрокаТЗ.ВариантФормированияФайлаОтвета;
			НоваяСтрока.Аннулирована = (АннулированныеЗаявки[СтрокаТЗ.Заявка] = Истина);
			
			СтрокаВложений = ФайлыЗаявок.Найти(СтрокаТЗ.Заявка, "Заявка");
			Если ЗначениеЗаполнено(СтрокаВложений) Тогда
				НоваяСтрока.ФайлЗаявки = СтрокаВложений.ФайлЗаявки;
			КонецЕсли;
			
			ДанныеДокумента = ДанныеДокументов.Найти(СтрокаТЗ.Заявка, "Заявка");
			Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
				НоваяСтрока.ДокументыКЭДО 			= ДанныеДокумента.ДокументыКЭДО;
				НоваяСтрока.ЭлектронныйДокумент 	= ДанныеДокумента.ЭлектронныйДокумент;
				НоваяСтрока.ИдентификаторДокумента 	= ДанныеДокумента.ИдентификаторДокумента;
			КонецЕсли;
			
			НоваяСтрока.РезультатВыполнения = РезультатВыполненияПоСостоянию[СтрокаТЗ.СостояниеЗаявки];
			// Комментарий передаем, если отказ по заявке
			// или это не заявки на справку с места работы или 2-НДФЛ,
			// для этих справок комментарий публикуется со справкой.
			Если НоваяСтрока.РезультатВыполнения = Перечисления.РезультатыСогласованияБЗК.Отклонено
				Или СтрокаТЗ.ТипЗаявкиКабинетСотрудника <> Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ И СтрокаТЗ.ТипЗаявкиКабинетСотрудника <> Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы 
				Или СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде Тогда
				НоваяСтрока.Комментарий = СтрокаТЗ.Комментарий;
			КонецЕсли;
			
			НоваяСтрока.ЭтоСогласованнаяСправкаОбОстаткеОтпуска = СтрокаТЗ.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска
				И НоваяСтрока.РезультатВыполнения = Перечисления.РезультатыСогласованияБЗК.Согласовано;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеМЧД(МЧД) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МЧД", МЧД);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК МЧД,
	|	ТаблицаОбъекта.Наименование КАК Наименование,
	|	ТаблицаОбъекта.ФайлДоверенности КАК ФайлДоверенности,
	|	ТаблицаОбъекта.ДатаВыдачи КАК ДатаВыдачи
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенности КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.Ссылка В(&МЧД)
	|	И ТаблицаОбъекта.ФайлДоверенности <> ЗНАЧЕНИЕ(Справочник.МашиночитаемыеДоверенностиПрисоединенныеФайлы.ПустаяСсылка)
	|	И НЕ ТаблицаОбъекта.ПометкаУдаления";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("Доверенность", Новый ОписаниеТипов());
	ТаблицаДанных.Колонки.Добавить("Данные", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	
	НеПолныеДанные = Новый Массив;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(СтрокаДанных.ФайлДоверенности);
		СтрокаДанных.Доверенность = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Если СтрокаДанных.Доверенность = Неопределено Тогда
			НеПолныеДанные.Добавить(СтрокаДанных);
			Продолжить;
		КонецЕсли;
		СтрокаДанных.Наименование = ДанныеФайла.Наименование;
		СтрокаДанных.Данные = Base64Строка(СтрокаДанных.Доверенность);
		СтрокаДанных.Размер = СтрокаДанных.Доверенность.Размер();
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из НеПолныеДанные Цикл
		ТаблицаДанных.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции

Функция ДанныеВидовПредоставляемыхСотрудникамСправок(ВидыСправок) Экспорт

	ДанныеВидовСправок = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		ДанныеВидовСправок = МодульСамообслуживаниеСотрудников.ДанныеВидовСправокПредоставляемыхСотрудникам(ВидыСправок);
	КонецЕсли;
	
	Возврат ДанныеВидовСправок;

КонецФункции

Функция ДанныеОбОтпусках(ФизическиеЛица, ДетализацияПоСотрудникам) Экспорт
	
	ДанныеОбОтпусках = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков") Тогда
		МодульОстаткиОтпусков = ОбщегоНазначения.ОбщийМодуль("ОстаткиОтпусков");
		Если ДетализацияПоСотрудникам Тогда
			ДанныеОбОтпусках = МодульОстаткиОтпусков.СведенияОбОтпускахСотрудниковДляПубликацииВСервисе(ФизическиеЛица, НачалоДня(ТекущаяДатаСеанса()));
		Иначе
			ДанныеОбОтпусках = МодульОстаткиОтпусков.СведенияОбОтпускахДляПубликацииВСервисе(ФизическиеЛица, НачалоДня(ТекущаяДатаСеанса()));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОбОтпусках) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Новый Структура("ИнформацияОбОтпусках,ПрогнозируемыеНеиспользованныеДниОтпуска,ТекущиеОстаткиОтпусков,АктуальностьИнформацииОбОтпусках");
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ФизическоеЛицоДатаОстатков = Новый Соответствие;
	Если ДанныеОбОтпусках.БудущиеПериоды <> Неопределено Тогда
		Для Каждого СтрокаТЗ Из ДанныеОбОтпусках.БудущиеПериоды Цикл
			Если СтрокаТЗ.Период <= ТекущаяДата Тогда 
				Продолжить;
			КонецЕсли;
			ДатаОстатка = ФизическоеЛицоДатаОстатков[СтрокаТЗ.ФизическоеЛицо];
			Если ДатаОстатка <> Неопределено И ДатаОстатка <= СтрокаТЗ.Период Тогда 
				Продолжить;
			КонецЕсли;
			ФизическоеЛицоДатаОстатков.Вставить(СтрокаТЗ.ФизическоеЛицо, СтрокаТЗ.Период);
		КонецЦикла;
	КонецЕсли;
	
	ИнформацияОбОтпусках = Новый ТаблицаЗначений;
	ИнформацияОбОтпусках.Колонки.Добавить("ФизическоеЛицо");
	ИнформацияОбОтпусках.Колонки.Добавить("Сотрудник");
	ИнформацияОбОтпусках.Колонки.Добавить("ДнейКомпенсации", Новый ОписаниеТипов("Число"));
	ИнформацияОбОтпусках.Колонки.Добавить("ОстатокОтпуска", Новый ОписаниеТипов("Число"));
	ИнформацияОбОтпусках.Колонки.Добавить("ДопустимаяПродолжительностьОтпуска", Новый ОписаниеТипов("Число"));
	ИнформацияОбОтпусках.Колонки.Добавить("ИнформацияОПредыдущемОтпуске");
	ИнформацияОбОтпусках.Колонки.Добавить("ИнформацияОСледующемОтпуске");
	
	АктуальностьИнформацииОбОтпусках = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("АктуальностьИнформацииОбОтпусках");

	ПоляИнформацияОбОтпуске = "ДатаНачала,ДатаОкончания,КоличествоДней";
	Если ДанныеОбОтпусках.ИнформацияОбИспользованииОтпуска <> Неопределено Тогда
		Для каждого СтрокаТЗ Из ДанныеОбОтпусках.ИнформацияОбИспользованииОтпуска Цикл
			
			НоваяСтрока = ИнформацияОбОтпусках.Добавить();
			Если ДетализацияПоСотрудникам Тогда
				НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
			КонецЕсли;
			НоваяСтрока.ФизическоеЛицо 						= СтрокаТЗ.ФизическоеЛицо;
			НоваяСтрока.ДнейКомпенсации 					= СтрокаТЗ.ДнейКомпенсации;
			НоваяСтрока.ОстатокОтпуска 						= СтрокаТЗ.ОстатокОтпуска;
			НоваяСтрока.ДопустимаяПродолжительностьОтпуска 	= СтрокаТЗ.ДопустимаяПродолжительностьОтпуска;
			
			ПредыдущийОтпуск = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаНачалаПредыдущегоОтпуска) И ЗначениеЗаполнено(СтрокаТЗ.ДатаОкончанияПредыдущегоОтпуска) Тогда
				ПредыдущийОтпуск = Новый Структура(ПоляИнформацияОбОтпуске);
				ПредыдущийОтпуск.ДатаНачала 		= СтрокаТЗ.ДатаНачалаПредыдущегоОтпуска;
				ПредыдущийОтпуск.ДатаОкончания 		= СтрокаТЗ.ДатаОкончанияПредыдущегоОтпуска;
				ПредыдущийОтпуск.КоличествоДней 	= СтрокаТЗ.КоличествоДнейПредыдущегоОтпуска;
			КонецЕсли;
			НоваяСтрока.ИнформацияОПредыдущемОтпуске = ПредыдущийОтпуск;
			
			СледующийОтпуск = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаНачалаСледующегоОтпуска) И ЗначениеЗаполнено(СтрокаТЗ.ДатаОкончанияСледующегоОтпуска) Тогда
				СледующийОтпуск = Новый Структура(ПоляИнформацияОбОтпуске);
				СледующийОтпуск.ДатаНачала 		= СтрокаТЗ.ДатаНачалаСледующегоОтпуска;
				СледующийОтпуск.ДатаОкончания 	= СтрокаТЗ.ДатаОкончанияСледующегоОтпуска;
				СледующийОтпуск.КоличествоДней 	= СтрокаТЗ.КоличествоДнейСледующегоОтпуска;
			КонецЕсли;
			НоваяСтрока.ИнформацияОСледующемОтпуске = СледующийОтпуск;
			
			ДатаАктуальностиОстатков = СтрокаТЗ.ДатаНачалаСледующегоОтпуска;
			ДатаОстатка = ФизическоеЛицоДатаОстатков[СтрокаТЗ.ФизическоеЛицо];
			Если ДатаОстатка <> Неопределено Тогда
				ДатаАктуальностиОстатков = ?(ЗначениеЗаполнено(ДатаАктуальностиОстатков), 
				Мин(ДатаАктуальностиОстатков, КонецДня(ДатаОстатка) + 1), КонецДня(ДатаОстатка) + 1);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаАктуальностиОстатков) Тогда 
				НоваяСтрока = АктуальностьИнформацииОбОтпусках.Добавить();
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.ДатаАктуальности 	= ДатаАктуальностиОстатков;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Данные.ИнформацияОбОтпусках 					= ИнформацияОбОтпусках;
	Данные.ПрогнозируемыеНеиспользованныеДниОтпуска = ДанныеОбОтпусках.ПрогнозируемыеНеиспользованныеДниОтпуска;
	Данные.АктуальностьИнформацииОбОтпусках 		= АктуальностьИнформацииОбОтпусках;
	Если ДетализацияПоСотрудникам Тогда
		Данные.ТекущиеОстаткиОтпусков = ДанныеОбОтпусках.ТекущиеОстаткиОтпусков;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеГрафиковОтпусков(Сотрудники) Экспорт
	
	МодульОстаткиОтпусков = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков") Тогда
		МодульОстаткиОтпусков = ОбщегоНазначения.ОбщийМодуль("ОстаткиОтпусков");
	КонецЕсли;
	
	Если МодульОстаткиОтпусков = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОтборГрафиковОтпусков
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)";
	Запрос.Выполнить(); 
	
	МодульОстаткиОтпусков.СоздатьВТГрафикОтпусковДляЛичныхКабинетов(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ГрафикОтпусков.ДатаНачала КАК ДатаНачала,
	|	ГрафикОтпусков.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТГрафикОтпусков КАК ГрафикОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	ДатаНачала";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	ДанныеГрафиков = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		ПериодыГрафика = Новый Массив;
		ЭлементГрафика = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДатаНачала) И ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Если ЭлементГрафика <> Неопределено 
					И Выборка.ДатаНачала = ЭлементГрафика.ДатаОкончания + 86400 Тогда
					ЭлементГрафика.ДатаОкончания = Выборка.ДатаОкончания;
					Продолжить;
				КонецЕсли;
				ЭлементГрафика = Новый Структура("ДатаНачала, ДатаОкончания", Выборка.ДатаНачала, Выборка.ДатаОкончания);
				ПериодыГрафика.Добавить(ЭлементГрафика);
			КонецЕсли;
		КонецЦикла;
		ДанныеГрафиков.Вставить(Выборка.ФизическоеЛицо, ПериодыГрафика);
	КонецЦикла;
	
	Возврат ДанныеГрафиков;

КонецФункции

Функция ДанныеГрафиковОтпусковПредприятия(Ссылки) Экспорт
	
	Данные = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков") Тогда
		МодульСборГрафиковОтпусков = ОбщегоНазначения.ОбщийМодуль("СборГрафиковОтпусков");
		Данные = МодульСборГрафиковОтпусков.ДанныеСборовГрафиковОтпусковДляСервисаКабинетСотрудника(Ссылки);
	КонецЕсли;
	
	Возврат Данные;

КонецФункции

Функция ДанныеГрафиковРаботы(ТаблицаИзменений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ГрафикРаботы КАК ГрафикРаботы,
	|	Изменения.Год КАК Год,
	|	Изменения.ДатаНачала КАК ДатаНачала,
	|	Изменения.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТГрафикиОтбор
	|ИЗ
	|	&ТаблицаИзменений КАК Изменения";
	Запрос.Выполнить();
	
	ДанныеГрафиков = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.УчетРабочегоВремениРасширенная") Тогда
		МодульУчетРабочегоВремениРасширенный = ОбщегоНазначения.ОбщийМодуль("УчетРабочегоВремениРасширенный");
		ДанныеГрафиков = МодульУчетРабочегоВремениРасширенный.ДанныеГрафиковДляСервисаКабинетСотрудника(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Возврат ДанныеГрафиков;

КонецФункции

Функция ДанныеПраздничныеДниГрафикаРаботы(ГрафикиРаботыДляОбработки) Экспорт

	ДанныеПраздничныеДни = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.УчетРабочегоВремениРасширенная") Тогда
		МодульУчетРабочегоВремениРасширенный = ОбщегоНазначения.ОбщийМодуль("УчетРабочегоВремениРасширенный");
		ДанныеПраздничныеДни = МодульУчетРабочегоВремениРасширенный.ДанныеПраздничныеДниГрафикаРаботы(ГрафикиРаботыДляОбработки);
	КонецЕсли;
	
	Возврат ДанныеПраздничныеДни;

КонецФункции

Функция ДанныеПлановыхУдержаний(ТаблицаИзменений) Экспорт
	
	МодульРасчетЗарплатыРасширенный = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.УчетРабочегоВремениРасширенная") Тогда
		МодульРасчетЗарплатыРасширенный = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыРасширенный");
	КонецЕсли;
	
	Если МодульРасчетЗарплатыРасширенный = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаАктуальности = ТекущаяДатаСеанса(); 
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "Организация", Истина);
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Организация");
	Данные.Колонки.Добавить("ФизическоеЛицо");
	Данные.Колонки.Добавить("ПлановыеУдержания"); 
	
	ПлановыеУдержания = Новый ТаблицаЗначений;
	ПлановыеУдержания.Колонки.добавить("ПредставлениеУдержания");
	ПлановыеУдержания.Колонки.добавить("ДатаОкончания");
	
	СвойстваУдержаний = Новый Соответствие;
	Отбор = Новый Структура("Организация");
	Для каждого Организация Из Организации Цикл
		
		Отбор.Организация = Организация;
		ИзмененияПоОрганизации = ТаблицаИзменений.Скопировать(Отбор, "Организация,ФизическоеЛицо,КатегорияУдержания");
		ПлановыеУдержанияФизическихЛиц = ПлановыеУдержанияФизическихЛиц(МодульРасчетЗарплатыРасширенный, ИзмененияПоОрганизации, ДатаАктуальности);
		Если ПлановыеУдержанияФизическихЛиц.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФизическиеЛица = ИзмененияПоОрганизации.ВыгрузитьКолонку("ФизическоеЛицо");
		ОтборФизическихЛиц = Новый Структура("ФизическоеЛицо");
		
		Удержания = ОбщегоНазначения.ВыгрузитьКолонку(ПлановыеУдержанияФизическихЛиц, "Удержание", Истина);
		ЗаполнитьСведенияОбУдержаниях(Удержания, СвойстваУдержаний);
		
		Для каждого СтрокаТЗ Из ПлановыеУдержанияФизическихЛиц Цикл
			
			ПлановыеУдержанияФизическогоЛица = ПлановыеУдержания.СкопироватьКолонки();
			
			ОтборФизическихЛиц.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			НайденныеСтроки = ПлановыеУдержанияФизическихЛиц.НайтиСтроки(ОтборФизическихЛиц);
			Для каждого СтрокаПоФизическомуЛицу Из НайденныеСтроки Цикл
				НоваяСтрока = ПлановыеУдержанияФизическогоЛица.Добавить();
				Если ЗначениеЗаполнено(СтрокаПоФизическомуЛицу.ДатаОкончания) Тогда
					НоваяСтрока.ДатаОкончания = СтрокаПоФизическомуЛицу.ДатаОкончания;
				КонецЕсли;
				НоваяСтрока.ПредставлениеУдержания = СвойстваУдержаний[СтрокаПоФизическомуЛицу.Удержание].Представление;
			КонецЦикла;
			
			НоваяСтрока = Данные.Добавить();
			НоваяСтрока.Организация 		= Организация;
			НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
			НоваяСтрока.ПлановыеУдержания 	= ПлановыеУдержанияФизическогоЛица;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция ПлановыеУдержанияФизическихЛиц(МодульРасчетЗарплатыРасширенный, ИсходныеДанные, ДатаАктуальности)

	ПлановыеУдержания = Новый ТаблицаЗначений;
	ПлановыеУдержания.Колонки.Добавить("Организация");
	ПлановыеУдержания.Колонки.Добавить("ФизическоеЛицо");
	ПлановыеУдержания.Колонки.Добавить("Удержание");
	ПлановыеУдержания.Колонки.Добавить("ДатаОкончания");
	
	ИсходныеДанные.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.ЗаполнитьЗначения(ДатаАктуальности,"Период");
	
	ДействующиеПлановыеУдержания = МодульРасчетЗарплатыРасширенный.ДействующиеПлановыеУдержания(ИсходныеДанные);
	
	Если ДействующиеПлановыеУдержания.Количество() > 0 Тогда
		
		ОбрабатываемыеУдержания = Новый Соответствие;
		
		КатегорииУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(ИсходныеДанные, "КатегорияУдержания", Истина);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КатегорииУдержаний", КатегорииУдержаний);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.Ссылка КАК Ссылка,
		|	Удержания.КатегорияУдержания КАК КатегорияУдержания
		|ИЗ
		|	ПланВидовРасчета.Удержания КАК Удержания
		|ГДЕ
		|	Удержания.КатегорияУдержания В(&КатегорииУдержаний)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбрабатываемыеУдержания.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДействующиеПлановыеУдержания Цикл
			Если ОбрабатываемыеУдержания[СтрокаТЗ.Удержание] <> Неопределено Тогда
				НоваяСтрока = ПлановыеУдержания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПлановыеУдержания;

КонецФункции

Процедура ЗаполнитьСведенияОбУдержаниях(Удержания, СвойстваУдержаний)

	УдержанияДляОбработки = Новый Массив;
	
	Для каждого Удержание Из Удержания Цикл
		Если СвойстваУдержаний[Удержание] = Неопределено Тогда
			УдержанияДляОбработки.Добавить(Удержание);
		КонецЕсли;
	КонецЦикла;
	
	Если УдержанияДляОбработки.Количество()>0 Тогда
		РеквизитыУдержаний = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(УдержанияДляОбработки, "Наименование,КраткоеНаименование");
		Для каждого Удержание Из УдержанияДляОбработки Цикл
			СвойстваУдержания = Новый Структура("Представление");
			ПредставлениеУдержания = РеквизитыУдержаний[Удержание].КраткоеНаименование;
			Если ПустаяСтрока(ПредставлениеУдержания) Тогда
				ПредставлениеУдержания = РеквизитыУдержаний[Удержание].Наименование;
			КонецЕсли;
			СвойстваУдержания.Представление = ПредставлениеУдержания;
			СвойстваУдержаний.Вставить(Удержание, СвойстваУдержания);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ДанныеШаблоновДокументов(Ссылки) Экспорт
	
	Возврат Справочники.ШаблоныДокументов.ДанныеШаблоновДокументовДляПубликации(Ссылки);
	
КонецФункции

Функция ДанныеВидыОтпусков(Ссылки) Экспорт

	МодульИнтеграцияКабинетСотрудникаРасширенный = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная") Тогда
		МодульИнтеграцияКабинетСотрудникаРасширенный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияКабинетСотрудникаРасширенный");
		Возврат МодульИнтеграцияКабинетСотрудникаРасширенный.ДанныеВидыОтпусков(Ссылки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ДанныеРабочихМестОхраныТруда(РабочиеМеста) Экспорт
	
	МодульРабочиеМестаОхраныТруда = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		Возврат МодульРабочиеМестаОхраныТруда.ДанныеРабочихМестОхраныТрудаИнтеграцияУправлениеПерсоналом(РабочиеМеста);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РабочиеМестаОхранаТрудаДляОбновления() Экспорт

	МодульРабочиеМестаОхраныТруда = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		Возврат МодульРабочиеМестаОхраныТруда.ДанныеРабочихМестОхраныТрудаИнтеграцияУправлениеПерсоналом();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхРасчетныхЛистков

Функция ДанныеРасчетныхЛистовДляПубликации(ПараметрыВыгрузки) Экспорт
	
	ДанныеДляРасчетныхЛистков = ДанныеРасчетныхЛистовДляПубликацииВариантовПоВарианту(ПараметрыВыгрузки, ПараметрыВыгрузки.ВариантОтчета);
	Если ПараметрыВыгрузки.ФормироватьРасчетныеЛистыОтдельнымЗапросом Тогда
		Данные = ДанныеРасчетныхЛистовДляПубликацииВариантовПоВарианту(ПараметрыВыгрузки);
	Иначе
		Данные = ДанныеДляРасчетныхЛистков;
	КонецЕсли;
	
	Результат = Новый Структура("
	|ДанныеРасчетныхЛистков,
	|РасчетныеЛистыДокументы,
	|ОписаниеСоставныхЧастейЗарплаты,
	|ВидыМестВыплатыРегистраторов,
	|ФизическиеЛицаИменаФайлов,
	|ДокументыКЭДО");
	
	Если ЗначениеЗаполнено(Данные.ДанныеРасчетныхЛистков) Тогда
		Результат.ДанныеРасчетныхЛистков  			= Данные.ДанныеРасчетныхЛистков.ДанныеРасчетныхЛистков;
		Результат.РасчетныеЛистыДокументы 			= РасчетныеЛистыДокументы(ДанныеДляРасчетныхЛистков.ДокументРезультат);
		Результат.ОписаниеСоставныхЧастейЗарплаты 	= ОписаниеСоставныхЧастейЗарплаты(Результат.ДанныеРасчетныхЛистков);
		Результат.ВидыМестВыплатыРегистраторов 		= ВидыМестВыплатыРегистраторов(Результат.ДанныеРасчетныхЛистков);
		Результат.ФизическиеЛицаИменаФайлов 		= ФизическиеЛицаИменаФайловРЛ(ПараметрыВыгрузки);
		Результат.ДокументыКЭДО 					= ДокументыКЭДОРасчетныхЛистков(ПараметрыВыгрузки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеРасчетныхЛистовДляПубликацииВариантовПоВарианту(ПараметрыВыгрузки, ВариантОтчета = Неопределено)
	
	Организация 			= ПараметрыВыгрузки.Организация;
	Месяц 					= ПараметрыВыгрузки.Месяц;
	СписокФизическихЛиц 	= ПараметрыВыгрузки.СписокФизическихЛиц;
	ПерваяПоловинаМесяца 	= ПараметрыВыгрузки.ПерваяПоловинаМесяца;
	
	Если ПерваяПоловинаМесяца Тогда
		ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛистокЗаПервуюПоловинуМесяца(ВариантОтчета);
	Иначе
		ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток(ВариантОтчета);
	КонецЕсли;
	
	Возврат ЗарплатаКадрыОтчеты.ДанныеРасчетныхЛистков(СписокФизическихЛиц, Организация, НачалоМесяца(Месяц), КонецМесяца(Месяц), ОтчетРасчетныйЛисток);
	
КонецФункции

Функция РасчетныеЛистыДокументы(ДокументРезультат)
	
	Результат = Новый Соответствие;
	
	Для Каждого Область Из ДокументРезультат.Области Цикл
		
		Если Не СтрНачинаетсяС(Область.Имя, "payslip_") Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = Сред(Область.Имя, СтрНайти(Область.Имя, "_", , , 3) + 1);
		Идентификатор = Лев(Идентификатор, СтрНайти(Идентификатор, "_") - 1);
		
		ИдентификаторФизлица = Новый УникальныйИдентификатор(
			Лев(Идентификатор, 8)
			+ "-"
			+ Сред(Идентификатор, 9, 4)
			+ "-"
			+ Сред(Идентификатор, 13, 4)
			+ "-"
			+ Сред(Идентификатор, 17, 4)
			+ "-"
			+ Прав(Идентификатор, 12));
		
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(ИдентификаторФизлица);
		Если Не ФизическоеЛицо.Пустая() Тогда
			РасчетныйЛист = ДокументРезультат.ПолучитьОбласть(Область.Имя);
			ЗаполнитьЗначенияСвойств(РасчетныйЛист, ДокументРезультат, "АвтоМасштаб,ПолеСверху,ПолеСнизу,ПолеСлева,ПолеСправа,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу");
			Результат.Вставить(ФизическоеЛицо, РасчетныйЛист);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВидыМестВыплатыРегистраторов(ДанныеРасчетныхЛистов)

	Отбор = Новый Структура("Группа", Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено);
	СтрокиВыплат = ДанныеРасчетныхЛистов.Скопировать(Отбор);
	РегистраторыВыплаты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиВыплат, "РегистраторВыплаты", Истина);
	
	ВидыМестВыплатыРегистраторов = Новый Соответствие;
	ПрочиеРегистраторы = Новый Массив;
	Для каждого РегистраторВыплаты Из РегистраторыВыплаты Цикл
		Если ЗначениеЗаполнено(РегистраторВыплаты) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(РегистраторВыплаты)) Тогда
			ВидМестаВыплаты = ВедомостьНаВыплатуЗарплаты.ВидМестаВыплатыПоДокументу(РегистраторВыплаты);
			Если ЗначениеЗаполнено(ВидМестаВыплаты) Тогда
				ВидыМестВыплатыРегистраторов.Вставить(РегистраторВыплаты, ВидМестаВыплаты);
			Иначе
				ПрочиеРегистраторы.Добавить(РегистраторВыплаты);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КабинетСотрудникаПереопределяемый.ДополнитьВидыМестВыплатыРегистраторов(ВидыМестВыплатыРегистраторов, ПрочиеРегистраторы);
	
	Возврат ВидыМестВыплатыРегистраторов;

КонецФункции

Функция ОписаниеСоставныхЧастейЗарплаты(ДанныеРасчетныхЛистов)
	
	СоставныеЧасти = Новый Соответствие;
	МенеджерПеречисления = Перечисления.ГруппыНачисленияУдержанияВыплаты;
	ИменаСвойств = "Идентификатор,Группа,Наименование,Вид,Приоритет,ТипНачисления";
	
	// incomingEmployerDebt - Долг сотрудника на начало.
	Описание = Новый Структура(ИменаСвойств);
	Описание.Идентификатор 	= "2f576597-ec81-482e-a504-202004ac75c4";
	Описание.Группа 		= "incomingBalance";
	Описание.Наименование 	= НСтр("ru = 'Долг сотрудника на начало';
									|en = 'Employee debt as of the start'");
	Описание.Вид 			= "incomingEmployerDebt";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.НачальноеСальдо) + 1 )* 10000000;
	СоставныеЧасти.Вставить("ДолгСотрудникаНаНачало", Описание);
	
	// incomingEmployeeDebt - Долг предприятия на начало.
	Описание = Новый Структура(ИменаСвойств);
	Описание.Идентификатор 	= "a51bf7db-9fd5-451e-a3e4-7c4613b0a11b";
	Описание.Группа 		= "incomingBalance";
	Описание.Наименование 	= НСтр("ru = 'Долг предприятия на начало';
									|en = 'Enterprise debt at the beginning'");
	Описание.Вид 			= "incomingEmployeeDebt";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.НачальноеСальдо) + 1 )* 10000000;
	СоставныеЧасти.Вставить("ДолгОрганизацииНаНачало", Описание);
	
	// outgoingEmployerDebt - Долг сотрудника на конец.
	Описание = Новый Структура(ИменаСвойств);
	Описание.Идентификатор 	= "a110f6ae-17cf-4f8a-8545-6c86f3d45ac6";
	Описание.Группа 		= "outgoingBalance";
	Описание.Наименование 	= НСтр("ru = 'Долг сотрудника на конец';
									|en = 'Employee''s debt at the end'");
	Описание.Вид 			= "outgoingEmployerDebt"; 
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.КонечноеСальдо) + 1 )* 10000000;
	СоставныеЧасти.Вставить("ДолгСотрудникаНаКонец", Описание);
	
	// outgoingEmployerDebt - Долг предприятия на конец.
	Описание = Новый Структура(ИменаСвойств);
	Описание.Идентификатор 	= "375922cb-9d6a-4614-be5b-46e2cd2e1f12";
	Описание.Группа 		= "outgoingBalance";
	Описание.Наименование 	= НСтр("ru = 'Долг предприятия на конец';
									|en = 'Enterprise debt at the end'");
	Описание.Вид 			= "outgoingEmployeeDebt";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.КонечноеСальдо) + 1 )* 10000000;
	СоставныеЧасти.Вставить("ДолгОрганизацииНаКонец", Описание);
	
	// bankPayment - Выплата на карту
	Описание = Новый Структура(ИменаСвойств);
	Описание.Идентификатор 	= "dd587525-ff57-4ebc-9ef7-5c0f9d515d08";
	Описание.Группа 		= "payouts";
	Описание.Наименование 	= НСтр("ru = 'Выплата на карту';
									|en = 'Payment to card'");
	Описание.Вид 			= "bankPayment";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.Выплачено) + 1 )* 10000000;
	СоставныеЧасти.Вставить("ВыплатаНаКарту", Описание);
	
	// bankPayment - Выплата на счет
	Описание = Новый Структура(ИменаСвойств);
	Описание.Идентификатор 	= "669dbc3b-fcab-11ea-8106-4cedfb95099a";
	Описание.Группа 		= "payouts";
	Описание.Наименование 	= НСтр("ru = 'Выплата на счет';
									|en = 'Payment to account'");
	Описание.Вид 			= "bankPayment";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.Выплачено) + 1 )* 10000000;
	СоставныеЧасти.Вставить("ВыплатаНаСчет", Описание);
	
	// bankPayment - Выплата наличными
	Описание = Новый Структура(ИменаСвойств);
	Описание.Идентификатор 	= "2a1c604e-8c6a-4b6c-a8d9-e984984f1c57";
	Описание.Группа 		= "payouts";
	Описание.Наименование 	= НСтр("ru = 'Выплата наличными';
									|en = 'Payment in cash'");
	Описание.Вид 			= "cashPayment";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.Выплачено) + 1 )* 10000000;
	СоставныеЧасти.Вставить("ВыплатаНаличными", Описание);
	
	ВидыРасчетов = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеРасчетныхЛистов,"ВидРасчета", Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыРасчетов", ВидыРасчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&ВидыРасчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.Ссылка,
	|	Удержания.РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка В(&ВидыРасчетов)";
	ТаблицаВР = Запрос.Выполнить().Выгрузить();
	ПриоритетыВР = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТаблицаВР Цикл
		ПриоритетыВР.Вставить(СтрокаТЗ.Ссылка, СтрокаТЗ.РеквизитДопУпорядочивания);
	КонецЦикла;
	
	НачислениеТип = НачислениеТип(ДанныеРасчетныхЛистов);
	Для каждого СтрокаТЗ Из ДанныеРасчетныхЛистов Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ВидРасчета) Или Не ЗначениеЗаполнено(СтрокаТЗ.Группа)
			Или СоставныеЧасти[СтрокаТЗ.ВидРасчета] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Приоритет = (МенеджерПеречисления.Индекс(СтрокаТЗ.Группа) + 1 )* 10000000;
		Описание = Новый Структура(ИменаСвойств);
		
		Если СтрокаТЗ.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
			
			Если ТипЗнч(СтрокаТЗ.ВидРасчета) = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") Тогда
				
				Описание.Идентификатор 	= ИдентификаторЗначенияПеречисления(СтрокаТЗ.ВидРасчета);
				Описание.Группа 		= "accruals";
				Описание.Наименование 	= Строка(СтрокаТЗ.ВидРасчета);
				Описание.Приоритет 		= Приоритет + 99 + Перечисления.ВидыОсобыхНачисленийИУдержаний.Индекс(СтрокаТЗ.ВидРасчета);
				Описание.ТипНачисления 	= "variable";
				
				Если СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа
					Или СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги Тогда
					Описание.Вид = "civilContractAcrual";
				ИначеЕсли СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты Тогда
					Описание.Вид = "salaryDelayCompensation";
				ИначеЕсли СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности
					Или СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка
					Или СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение
					Или СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику Тогда
					Описание.Вид = "allowance";
				КонецЕсли;
				
			Иначе
				
				ПриоритетВР = ПриоритетыВР[СтрокаТЗ.ВидРасчета];
				
				Описание.Идентификатор 	= Строка(СтрокаТЗ.ВидРасчета.УникальныйИдентификатор());
				Описание.Группа 		= "accruals";
				Описание.Наименование 	= ?(ПустаяСтрока(СтрокаТЗ.ВидРасчетаКраткоеНаименование), Строка(СтрокаТЗ.ВидРасчета), СтрокаТЗ.ВидРасчетаКраткоеНаименование);
				Описание.Приоритет 		= Приоритет + ПриоритетВР;
				Описание.ТипНачисления 	= НачислениеТип[СтрокаТЗ.ВидРасчета];
				
			КонецЕсли;
			СоставныеЧасти.Вставить(СтрокаТЗ.ВидРасчета, Описание);
			
		ИначеЕсли СтрокаТЗ.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано Тогда
			
			Если ТипЗнч(СтрокаТЗ.ВидРасчета) = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") Тогда
				
				Описание.Идентификатор 	= ИдентификаторЗначенияПеречисления(СтрокаТЗ.ВидРасчета);
				Описание.Группа 		= "deductions";
				Описание.Наименование 	= Строка(СтрокаТЗ.ВидРасчета);
				Описание.Приоритет 		= Приоритет + 99 + Перечисления.ВидыОсобыхНачисленийИУдержаний.Индекс(СтрокаТЗ.ВидРасчета);
				
				Если СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму Тогда
					Описание.Вид = "loanInterestRepayment";
				ИначеЕсли СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты Тогда
					Описание.Вид = "loanRepayment";
				ИначеЕсли СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ Тогда
					Описание.Вид = "tax";
				КонецЕсли;
				
			Иначе
				
				ПриоритетВР = ПриоритетыВР[СтрокаТЗ.ВидРасчета];
				
				Описание.Идентификатор 	= Строка(СтрокаТЗ.ВидРасчета.УникальныйИдентификатор());
				Описание.Группа 		= "deductions";
				Описание.Наименование 	= ?(ПустаяСтрока(СтрокаТЗ.ВидРасчетаКраткоеНаименование), Строка(СтрокаТЗ.ВидРасчета), СтрокаТЗ.ВидРасчетаКраткоеНаименование);
				Описание.Приоритет 		= Приоритет + ПриоритетВР;
				
			КонецЕсли;
			СоставныеЧасти.Вставить(СтрокаТЗ.ВидРасчета, Описание);
			
		ИначеЕсли СтрокаТЗ.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно Тогда
			
			Если ТипЗнч(СтрокаТЗ.ВидРасчета) = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") Тогда
				Описание.Идентификатор 	= ИдентификаторЗначенияПеречисления(СтрокаТЗ.ВидРасчета);
				Описание.Группа 		= "additionalInfo";
				Описание.Наименование 	= Строка(СтрокаТЗ.ВидРасчета);
				Описание.Приоритет 		= Приоритет + 99 + Перечисления.ВидыОсобыхНачисленийИУдержаний.Индекс(СтрокаТЗ.ВидРасчета);
			Иначе
				ПриоритетВР = ПриоритетыВР[СтрокаТЗ.ВидРасчета];
				Описание.Идентификатор 	= Строка(СтрокаТЗ.ВидРасчета.УникальныйИдентификатор());
				Описание.Группа 		= "additionalInfo";
				Описание.Наименование 	= ?(ПустаяСтрока(СтрокаТЗ.ВидРасчетаКраткоеНаименование), Строка(СтрокаТЗ.ВидРасчета), СтрокаТЗ.ВидРасчетаКраткоеНаименование);
				Описание.Приоритет 		= Приоритет + ПриоритетВР;
			КонецЕсли;
			СоставныеЧасти.Вставить(СтрокаТЗ.ВидРасчета, Описание);
			
		ИначеЕсли СтрокаТЗ.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы Тогда
			
			Если ТипЗнч(СтрокаТЗ.ВидРасчета) = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") Тогда
				Описание.Идентификатор 	= ИдентификаторЗначенияПеречисления(СтрокаТЗ.ВидРасчета);
				Описание.Группа 		= "benefits";
				Описание.Наименование 	= Строка(СтрокаТЗ.ВидРасчета);
				Описание.Приоритет 		= Приоритет + 99 + Перечисления.ВидыОсобыхНачисленийИУдержаний.Индекс(СтрокаТЗ.ВидРасчета);
			Иначе
				ПриоритетВР = ПриоритетыВР[СтрокаТЗ.ВидРасчета];
				Описание.Идентификатор 	= Строка(СтрокаТЗ.ВидРасчета.УникальныйИдентификатор());
				Описание.Группа 		= "benefits";
				Описание.Наименование 	= ?(ПустаяСтрока(СтрокаТЗ.ВидРасчетаКраткоеНаименование), Строка(СтрокаТЗ.ВидРасчета), СтрокаТЗ.ВидРасчетаКраткоеНаименование);
				Описание.Приоритет 		= Приоритет + ПриоритетВР;
			КонецЕсли;
			СоставныеЧасти.Вставить(СтрокаТЗ.ВидРасчета, Описание);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СоставныеЧасти;

КонецФункции

Функция ИдентификаторЗначенияПеречисления(Знач Значение)
	
	Если Не Метаданные.Перечисления.Содержит(Значение.Метаданные()) Тогда
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение НСтр("ru = 'Значение не является значением перечисления.';
								|en = 'The value is not an enumeration value.'");
	КонецЕсли;
	
	Значение = ЗначениеВСтрокуВнутр(Значение);
	Значение = Сред(Значение, СтрНайти(Значение, ":") + 1, 32);
	Значение =
		Лев(Значение, 8)+ "-"
		+ Сред(Значение, 9, 4) + "-"
		+ Сред(Значение, 13, 4) + "-"
		+ Сред(Значение, 17, 4) + "-"
		+ Прав(Значение, 12);
	
	Возврат Значение;
	
КонецФункции

Функция НачислениеТип(ДанныеРасчетныхЛистов)

	НачислениеТип = Новый Соответствие;
	
	Отбор = Новый Структура("Группа", Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	Начисления = ДанныеРасчетныхЛистов.Скопировать(Отбор, "ВидРасчета");
	Начисления.Свернуть("ВидРасчета");
	
	НачисленияТарифнойСтавки = РасчетЗарплаты.НачисленияТарифнойСтавки();
	НачисленияПоТарифнойСтавке = Новый Соответствие;
	Для каждого Начисление Из НачисленияТарифнойСтавки Цикл
		НачисленияПоТарифнойСтавке.Вставить(Начисление);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из Начисления Цикл
		Если НачисленияПоТарифнойСтавке[СтрокаТЗ.ВидРасчета] <> Неопределено Тогда
			ТипНачисления = "permanent";
		Иначе
			ТипНачисления = "variable";
		КонецЕсли;
		НачислениеТип.Вставить(СтрокаТЗ.ВидРасчета, ТипНачисления);
	КонецЦикла;
	
	Возврат НачислениеТип;

КонецФункции

Функция ФизическиеЛицаИменаФайловРЛ(ПараметрыВыгрузки)
	
	СписокФизическихЛиц 	= ПараметрыВыгрузки.СписокФизическихЛиц;
	Месяц 					= ПараметрыВыгрузки.Месяц;
	ПерваяПоловинаМесяца 	= ПараметрыВыгрузки.ПерваяПоловинаМесяца;
	
	ФизическиеЛицаИменаФайлов = Новый Соответствие;
	
	Если ПерваяПоловинаМесяца Тогда
		ШаблонИмяФайла = НСтр("ru = '%1 Расчетный лист (аванс). %2';
								|en = '%1 Payslip (advance payment). %2'");
	Иначе
		ШаблонИмяФайла = НСтр("ru = '%1 Расчетный лист. %2';
								|en = '%1 Payslip. %2'");
	КонецЕсли;
	ПериодСтрокой = Формат(Месяц, "ДФ='MMMM yyyy'");
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокФизическихЛиц, "Фамилия,Инициалы");
	
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		ФИО = СтрШаблон("%1 %2", РеквизитыОбъектов[ФизическоеЛицо]["Фамилия"], СтрЗаменить(РеквизитыОбъектов[ФизическоеЛицо]["Инициалы"]," ",""));
		ФизическиеЛицаИменаФайлов.Вставить(ФизическоеЛицо, СтрШаблон(ШаблонИмяФайла, ФИО, ПериодСтрокой));
	КонецЦикла;
	
	Возврат ФизическиеЛицаИменаФайлов;

КонецФункции

// Получает существующие документы ДокументКадровогоЭДО расчетных листков.
//
// 	Параметры:
// 		ПараметрыВыгрузки - Структура
//
// 	Возвращаемое значение:
// 		Соответствие
// 			* Ключ - СправочникСсылка.ФизическиеЛица
// 			* Значение - ДокументСсылка.ДокументКадровогоЭДО
//
Функция ДокументыКЭДОРасчетныхЛистков(ПараметрыВыгрузки)

	ДокументыКЭДО = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыВыгрузки.Организация);
	Запрос.УстановитьПараметр("Период", ПараметрыВыгрузки.Месяц);
	Запрос.УстановитьПараметр("ФизическиеЛица", ПараметрыВыгрузки.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ПерваяПоловинаМесяца", ПараметрыВыгрузки.ПерваяПоловинаМесяца);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО,
	|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
	|ГДЕ
	|	РасчетныеЛисткиКабинетСотрудника.Организация = &Организация
	|	И РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо В(&ФизическиеЛица)
	|	И РасчетныеЛисткиКабинетСотрудника.Месяц = &Период
	|	И РасчетныеЛисткиКабинетСотрудника.ПерваяПоловинаМесяца = &ПерваяПоловинаМесяца
	|	И РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО <> ЗНАЧЕНИЕ(Документ.ДокументКадровогоЭДО.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыКЭДО.Вставить(Выборка.ФизическоеЛицо, Выборка.ДокументКадровогоЭДО);
	КонецЦикла;
	
	Возврат ДокументыКЭДО;

КонецФункции

Функция НовыйДокументКЭДОРасчетныйЛисток(СсылкаНового, Организация, ФизическоеЛицо) Экспорт
	
	ОписаниеДокумента = Документы.ДокументКадровогоЭДО.СвойстваДокумента(
		Неопределено, Организация, ФизическоеЛицо,
		СсылкаНового, Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток, Перечисления.СодержимоеДокументов.СодержитЗарплату);
		
	ОписаниеДокумента.ДополнительныеСвойства 	= Новый Структура("СсылкаНового", СсылкаНового);
	ОписаниеДокумента.Дата 						= ТекущаяДатаСеанса();
	ОписаниеДокумента.ИдентификаторДокумента 	= Строка(Новый УникальныйИдентификатор);
	
	ДокументОбъект = Документы.ДокументКадровогоЭДО.НовыйДокумент(ОписаниеДокумента);
	
	Возврат ДокументОбъект;

КонецФункции

Функция ДанныеФайлаРасчетногоЛистка(Организация, ФизическоеЛицо, ДокументКЭДОСсылка, РасчетныйЛистДокумент, ИмяФайла, РасширениеФайлаPDF) Экспорт
	
	// Создаем присоединенный файл расчетного листка
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.ВладелецФайлов 		= ДокументКЭДОСсылка;
	ПараметрыФайла.ИмяБезРасширения 	= ИмяФайла;
	ПараметрыФайла.РасширениеБезТочки 	= РасширениеФайлаPDF;
	ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	
	Поток = Новый ПотокВПамяти();
	РасчетныйЛистДокумент.Записать(Поток, КадровыйЭДОВызовСервера.ТипФайлаЭлектронногоДокумента());
	ДвоичныеДанные =  Поток.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерФайла = ДвоичныеДанные.Размер();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ФайлРасчетногоЛистка = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
	
	ДанныеПечатнойФормы = КадровыйЭДО.ДанныеПечатнойФормы();
	ДанныеПечатнойФормы.Владелец                   = ДокументКЭДОСсылка;
	ДанныеПечатнойФормы.Организация                = Организация;
	ДанныеПечатнойФормы.ФизическоеЛицо             = ФизическоеЛицо;
	ДанныеПечатнойФормы.ПечатнаяФорма              = РасчетныйЛистДокумент;
	ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = "РасчетныйЛисток";
	ДанныеПечатнойФормы.Название                   = ИмяФайла;
	ДанныеПечатнойФормы.ИмяФайла                   = ИмяФайла;
	ДанныеПечатнойФормы.ФайлОбъекта                = ФайлРасчетногоЛистка;
	РегистрыСведений.ПодписанныеПечатныеФормы.ДобавитьПечатнуюФорму(ДанныеПечатнойФормы, РасчетныйЛистДокумент, ТекущаяДатаСеанса());
			
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("ФайлРасчетногоЛистка", 	ФайлРасчетногоЛистка);
	ДанныеФайла.Вставить("ДвоичныеДанные", 			ДвоичныеДанные);
	ДанныеФайла.Вставить("РазмерФайла", 			РазмерФайла);
	
	Возврат ДанныеФайла;
	
КонецФункции

#КонецОбласти

#Область Прочие

Функция РолиИсполнителейЗадач() Экспорт

	РолиИсполнителейЗадач = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗадач();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РолиИсполнителейЗадач", РолиИсполнителейЗадач);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Ссылка В(&РолиИсполнителейЗадач)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ДанныеПодписантаИзПодписи(Приложение, Подпись) Экспорт

	Данные = Новый Структура("Подписант,ИмяПодписанта");
	
	Подписант = "";
	ИмяПодписанта = "";
	Если ЗначениеЗаполнено(Подпись.УстановившийПодпись) Тогда
		Подписант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подпись.УстановившийПодпись, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(Подписант) И ИнтеграцияУправлениеПерсоналом.СсылкуНаФизическоеЛицоМожноВыгружать(Приложение, Подписант) Тогда
			ИмяПодписанта = Строка(Подписант);
		Иначе
			Подписант = "";
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Подписант) И ЗначениеЗаполнено(Подпись.КомуВыданСертификат) Тогда
		ИмяПодписанта = Подпись.КомуВыданСертификат;
	КонецЕсли;
	
	Данные.Подписант 		= Подписант;
	Данные.ИмяПодписанта 	= ИмяПодписанта;
	
	Возврат Данные;

КонецФункции

Функция ДанныеПодписантаПоИсполнителюЗаявки(Приложение, Исполнитель) Экспорт

	Данные = Новый Структура("Подписант,ИмяПодписанта");
	
	Подписант = "";
	ИмяПодписанта = "";
	Если ЗначениеЗаполнено(Исполнитель) 
		И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") 
		И Исполнитель <> Пользователи.СсылкаНеуказанногоПользователя(Ложь) Тогда
		Подписант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнитель, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(Подписант) И ИнтеграцияУправлениеПерсоналом.СсылкуНаФизическоеЛицоМожноВыгружать(Приложение, Подписант) Тогда
			ИмяПодписанта = Строка(Подписант);
		Иначе
			Подписант = "";
			ИмяПодписанта = Строка(Исполнитель);
		КонецЕсли;
	КонецЕсли;
	
	Данные.Подписант 		= Подписант;
	Данные.ИмяПодписанта 	= ИмяПодписанта;
	
	Возврат Данные;

КонецФункции

Функция ЭтоПодписьИзПриложения(Подпись) Экспорт
	
	РолиПодписантов = Новый Массив;
	
	НаборСвойствПодписиКЭДО = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Подпись, "НаборСвойствПодписиКЭДО");
	Если ЗначениеЗаполнено(НаборСвойствПодписиКЭДО) Тогда
		Для Каждого ДанныеСвойств Из НаборСвойствПодписиКЭДО Цикл
			РолиПодписантов.Добавить(ДанныеСвойств.РольПодписанта);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Перечисления.РолиПодписантовКЭДО.ЭтоПодписьСервиса(РолиПодписантов);

КонецФункции

Функция ДанныеЭлектронныхДокументовЗаявок(КоллекцияДанных)
	
	ДанныеЭлектронныхДокументов = Новый Соответствие;
	
	ЭлектронныеДокументы = Новый Массив;
	Для каждого СтрокаТЗ Из КоллекцияДанных Цикл
		Если СтрокаТЗ.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена 
			И ЗначениеЗаполнено(СтрокаТЗ.ЭлектронныйДокумент) Тогда
			ЭлектронныеДокументы.Добавить(СтрокаТЗ.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЭлектронныеДокументы) Тогда
		ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
	КонецЕсли;
	
	Возврат ДанныеЭлектронныхДокументов;

КонецФункции

Функция ДанныеПодписиРезультатаСогласования(РезультатСогласования)
	
	ДанныеПодписи = ИнтеграцияКабинетСотрудникаОбмен.НовоеОписаниеЭлектроннаяПодпись();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатСогласования, "Подпись") Тогда
		Если ЗначениеЗаполнено(РезультатСогласования.Подпись) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПодписи, РезультатСогласования.Подпись);
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеПодписи, РезультатСогласования);
	КонецЕсли;
	
	Возврат ДанныеПодписи;
	
КонецФункции

#КонецОбласти

#КонецОбласти