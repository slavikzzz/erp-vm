#Область СлужебныйПрограммныйИнтерфейс

#Область ФормаБизнесПроцесса

#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	ОбновитьДоступностьКомандОстановки(Форма);
	
КонецПроцедуры

Процедура ОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора) Экспорт
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборРолиИсполнителя") Тогда
		
		Если КонтекстВыбора = "ИсполнительПриИзменении" Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
				Форма.Объект.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
			КонецЕсли;
			
		ИначеЕсли КонтекстВыбора = "ПроверяющийПриИзменении" Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
				Форма.Объект.Проверяющий = ВыбранноеЗначение.РольИсполнителя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	Если ИмяСобытия = "ИзмененаНастройкаОтложенногоСтарта" Тогда
		Форма.Отложен = ((Параметр.Отложен И Параметр.Состояние) =
							ПредопределенноеЗначение("Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту"));
		Форма.ДатаОтложенногоСтарта = Параметр.ДатаОтложенногоСтарта;
		БизнесПроцессыЗаявокСотрудниковКлиентСервер.УстановитьСвойстваЭлементовФормы(ЭтотОбъект);
		Если Форма.Элементы.ГруппаСостояние.Видимость Тогда
			Форма.ИнфоНадписьЗаголовок = 
				СтроковыеФункцииКлиент.ФорматированнаяСтрока(
					БизнесПроцессыЗаявокСотрудниковКлиентСервер.СообщениеОСтатусеЗадания(Форма));
			Форма.Элементы.ИнфоНадписьЗаголовок.Высота = ?(СтрДлина(Форма.ИнфоНадписьЗаголовок) > 80, 2, 1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	Оповестить("Запись_Задание", ПараметрыЗаписи, Форма.Объект.Ссылка);
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыЗаписи, Неопределено);
	ОбновитьФорму(Форма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ПредметНажатие(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Форма.Объект.Предмет);
	
КонецПроцедуры

Процедура ИнфоНадписьЗаголовокОбработкаНавигационнойСсылки(Форма, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	ОткрытьНастройкуОтложенногоСтарта(Форма);
КонецПроцедуры

Процедура ИсполнительНачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ВыбратьИсполнителя(Элемент, Форма.Объект.Исполнитель);
	
КонецПроцедуры

Процедура ИсполнительПриИзменении(Форма, ОткрытаФормаВыбораИсполнителя, КонтекстВыбора, ИспользуетсяСОбъектамиАдресации) Экспорт
	
	Если ОткрытаФормаВыбораИсполнителя = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	Если ИспользуетсяСОбъектамиАдресации Тогда 
			
		КонтекстВыбора = "ИсполнительПриИзменении";
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РольИсполнителя", Форма.Объект.Исполнитель);
		ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
		ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
		ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, Форма);
			
		Возврат;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсполнительОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ОткрытаФормаВыбораИсполнителя) Экспорт
	
	ОткрытаФормаВыбораИсполнителя = ТипЗнч(ВыбранноеЗначение) = Тип("Структура");
	Если ОткрытаФормаВыбораИсполнителя Тогда
		СтандартнаяОбработка = Ложь;
		Форма.Объект.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		Форма.Объект.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Форма.Объект.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсполнительАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура СрокИсполненияПриИзменении(Форма, Элемент) Экспорт
	Если Форма.Объект.СрокИсполнения = НачалоДня(Форма.Объект.СрокИсполнения) Тогда
		Форма.Объект.СрокИсполнения = КонецДня(Форма.Объект.СрокИсполнения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура ЗаписатьИЗакрыть(Форма) Экспорт
	
	ОчиститьСообщения();
	Если Не Форма.ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	Форма.Записать();
	Форма.Закрыть();
	
КонецПроцедуры

Процедура Остановить(Форма) Экспорт
	
	БизнесПроцессыИЗадачиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(Форма);
	ОбновитьДоступностьКомандОстановки(Форма);
	
КонецПроцедуры

Процедура ПродолжитьБизнесПроцесс(Форма) Экспорт
	
	БизнесПроцессыИЗадачиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(Форма);
	ОбновитьДоступностьКомандОстановки(Форма);
	
КонецПроцедуры

Процедура НастроитьОтложенныйСтарт(Форма) Экспорт
	ОткрытьНастройкуОтложенногоСтарта(Форма);
КонецПроцедуры

#КонецОбласти

Процедура УстановитьДокументОбращенияСотрудника(УправляемаяФорма) Экспорт
	Если УправляемаяФорма.ОбращенияСотрудника.ВысотаТаблицы = 0 Тогда
		ПечатнаяФормаСоШтампами = БизнесПроцессыЗаявокСотрудниковВызовСервера.ОбращенияСотрудникаСоШтампами(
			УправляемаяФорма.ЭлектронныйДокумент);
		Если ПечатнаяФормаСоШтампами = Неопределено Тогда
			УправляемаяФорма.ОбращенияСотрудника.Очистить();
		Иначе
			УправляемаяФорма.ОбращенияСотрудника = ПечатнаяФормаСоШтампами;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФормаЗадачиБизнесПроцесса

#Область ОбработчикиКомандФормы

Процедура ПринятьЗадачуКИсполнению(Форма, ТекущийПользователь) Экспорт
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачуКИсполнению(Форма, ТекущийПользователь);
	Форма.Прочитать();
КонецПроцедуры

Процедура ПодписатьЭПФайлыОтвета(Форма, ОписаниеОповещения, МассивФайлов, ЭтоФайлПечатнойФормы = Ложь) Экспорт
	Если ЭтоФайлПечатнойФормы Тогда	
		КадровыйЭДОКлиент.ОткрытьФормуПодписанияПечатныхФорм(МассивФайлов,
															 Форма,
															 ОписаниеОповещения,
															 ,
															 ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"),
															 Истина);
	Иначе
		Если Форма.ИспользуетсяКадровыйЭДО Тогда
			КадровыйЭДОКлиент.ПодписатьФайлы(
				КадровыйЭДОВызовСервера.ДанныеФайловНаПодпись(МассивФайлов, Форма.УникальныйИдентификатор),
				ОписаниеОповещения,
				Форма,
				ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
		Иначе
			Для Каждого Файл Из МассивФайлов Цикл
				
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Файл, Форма.УникальныйИдентификатор);
				
				ОписаниеДанных = Новый Структура;
				
				ОписаниеДанных.Вставить("Операция",            	НСтр("ru = 'Подписание файла';
																		|en = 'Sign file'"));
				ОписаниеДанных.Вставить("ЗаголовокДанных",     	НСтр("ru = 'Файл';
																		|en = 'File'"));
				ОписаниеДанных.Вставить("Данные",              	ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ОписаниеДанных.Вставить("Представление",       	ДанныеФайла.ИмяФайла);
				ОписаниеДанных.Вставить("Объект",				Файл);
				
				ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, Форма, ОписаниеОповещения);
							
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодписатьЗаявкуЭП(Форма, ИмяПроцедуры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедуры, Форма);
	
	ФайлЗаявки = БизнесПроцессыЗаявокСотрудниковВызовСервера.ФайлЗаявки(Форма.Задание.Ссылка);
	Если ФайлЗаявки = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		Возврат;
	КонецЕсли;	
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлЗаявки, Форма.УникальныйИдентификатор);
	
	ОписаниеДанных = Новый Структура;
	
	ОписаниеДанных.Вставить("Операция",            	НСтр("ru = 'Подписание файла';
															|en = 'Sign file'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     	НСтр("ru = 'Файл';
															|en = 'File'"));
	ОписаниеДанных.Вставить("Данные",              	ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ОписаниеДанных.Вставить("Представление",       	ДанныеФайла.ИмяФайла);
	ОписаниеДанных.Вставить("Объект",				ФайлЗаявки);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, Форма, ОписаниеОповещения);
	
КонецПроцедуры

Процедура СохранитьШаблонОтвета(Форма) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекстОтвета", Форма.Задание.ОтветПоЗаявке);
	ПараметрыОткрытия.Вставить("ТипЗаявки", Форма.Задание.ТипЗаявкиКабинетСотрудника);
	ПараметрыОткрытия.Вставить("Ключ", Форма.ШаблонОтвета);
	
	ОткрытьФорму("Справочник.ТиповыеОтветыНаЗаявкиКабинетСотрудника.ФормаОбъекта", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область  СлужебныеПроцедурыИФункции

Процедура ОткрытьПрисоединенныйФайл(Форма, ПрисоединенныйФайл) Экспорт
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ПрисоединенныйФайл, Форма.УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
КонецПроцедуры

Процедура ВыбратьФайлОтветаПослеПомещенияФайла(Форма, ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ПомещенныйФайл.Имя;
	
	МассивПути = СтрРазделить(ИмяФайла, "\");
	ИмяФайла = МассивПути[МассивПути.Количество()-1];
	
	МассивИмениФайла = СтрРазделить(ИмяФайла, ".");
	МассивИмениФайлаКоличество = МассивИмениФайла.Количество();
	ИмяФайлаОтветаБезРасширения = "";
	РасширениеФайлаОтветаБезТочки = "";
	
	Если МассивИмениФайлаКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 0 По МассивИмениФайлаКоличество-1 Цикл
		Если МассивИмениФайлаКоличество > 1 И Индекс = МассивИмениФайлаКоличество-1 Тогда
			Прервать;
		КонецЕсли;
		ИмяФайлаОтветаБезРасширения = ИмяФайлаОтветаБезРасширения + МассивИмениФайла[Индекс] + ".";
	КонецЦикла;
	ИмяФайлаОтветаБезРасширения = Лев(ИмяФайлаОтветаБезРасширения, СтрДлина(ИмяФайлаОтветаБезРасширения) - 1);
	
	Если МассивИмениФайлаКоличество > 1 Тогда
		РасширениеФайлаОтветаБезТочки = МассивИмениФайла[МассивИмениФайлаКоличество-1];
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	
	Если Данные.Размер() > ИнтеграцияУправлениеПерсоналомКлиентСервер.МаксимальныйРазмерПринимаемогоФайла() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сервис не может принять файлы размером более 5Мб. Выберите другой файл.';
										|en = 'The service cannot accept files larger than 5MB. Choose another file.'"));
		Возврат;
	КонецЕсли;
	
	Форма.ИмяФайлаОтветаБезРасширения = ИмяФайлаОтветаБезРасширения;
	Форма.РасширениеФайлаОтветаБезТочки = РасширениеФайлаОтветаБезТочки;
	Форма.ПредставлениеФайлаОтвета = СтрШаблон("%1 (%2)", ИмяФайла, 
										 БизнесПроцессыЗаявокСотрудниковКлиентСервер.РазмерФайлаСтрокой(Данные.Размер()));
	Форма.АдресХранилищаФайлаОтвета = ПомещенныйФайл.Хранение;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

Процедура ВыполненоВыполнитьЗавершение(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		 И Результат.Свойство("Отказ")
		 И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыЗаявокСотрудниковВызовСервера.ВыполненоВыполнить(
		Форма.Задание.Ссылка,
		Форма.СостояниеЗапроса,
		Форма.Исполнитель);
	
	Если ЗначениеЗаполнено(Форма.Комментарий) Тогда
		Форма.Объект.РезультатВыполнения = Форма.Комментарий;
	Иначе
		Форма.Объект.РезультатВыполнения = НСтр("ru = 'Выполнен';
												|en = 'Completed'");
	КонецЕсли;
	
	ЗаданиеВыполнено = Истина;
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(Форма, Истина);
	
КонецПроцедуры

Процедура ОтказатьЗавершение(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		 И Результат.Свойство("Отказ")
		 И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	БизнесПроцессыЗаявокСотрудниковВызовСервера.Отказать(
		Форма.Задание.Ссылка,
		Форма.СостояниеЗапроса,
		Форма.Исполнитель);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Комментарий) Тогда
		Форма.Объект.РезультатВыполнения = Форма.Комментарий;
	Иначе
		Форма.Объект.РезультатВыполнения = НСтр("ru = 'Отказ';
												|en = 'Cancel'");
	КонецЕсли;
	
	ЗаданиеВыполнено = Истина;
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(Форма, Истина);
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

Процедура ПоказатьОснованиеДокументаКадровогоЭДО(ОснованиеДокумента, СтандартнаяОбработка) Экспорт
	Если БизнесПроцессыЗаявокСотрудниковВызовСервера.ЭтоЗаявкаСотрудника(ОснованиеДокумента) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = БизнесПроцессыЗаявокСотрудниковВызовСервера.ФормаОткрытияТекущейЗадачиБизнесПроцесса(ОснованиеДокумента);
		ОткрытьФорму(ПараметрыФормы.ИмяФормы, ПараметрыФормы.ПараметрыФормы);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьФорму(Форма)
	БизнесПроцессыЗаявокСотрудниковКлиентСервер.УстановитьСвойстваЭлементовФормы(Форма);
	Если Форма.Элементы.ГруппаСостояние.Видимость Тогда
		Форма.ИнфоНадписьЗаголовок = 
			СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				БизнесПроцессыЗаявокСотрудниковКлиентСервер.СообщениеОСтатусеЗадания(Форма));
		Форма.Элементы.ИнфоНадписьЗаголовок.Высота = ?(СтрДлина(Форма.ИнфоНадписьЗаголовок) > 80, 2, 1);
	КонецЕсли;
	ОбновитьДоступностьКомандОстановки(Форма);
КонецПроцедуры

Процедура ОбновитьДоступностьКомандОстановки(Форма)
	
	Если Форма.Объект.Завершен Тогда
		
		Форма.Элементы.ФормаОстановить.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжить.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен") Тогда
		Форма.Элементы.ФормаОстановить.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжить.Видимость = Истина;
	Иначе
		Форма.Элементы.ФормаОстановить.Видимость = Форма.Объект.Стартован;
		Форма.Элементы.ФормаПродолжить.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьНастройкуОтложенногоСтарта(Форма)

	Если КлючевыеРеквизитыФормыЗаполнены(Форма) Тогда
		БизнесПроцессыИЗадачиКлиент.НастроитьОтложенныйСтарт(Форма.Объект.Ссылка, Форма.Объект.СрокИсполнения);
	КонецЕсли;

КонецПроцедуры

Функция КлючевыеРеквизитыФормыЗаполнены(Форма)

	Если Форма.Объект.Стартован Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РеквизитыФормыЗаполнены = Истина;
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Исполнитель"" не заполнено.';
														|en = 'Assignee is required.'"),,
			"Исполнитель", "Объект.Исполнитель");
		РеквизитыФормыЗаполнены = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Наименование) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Задание"" не заполнено.';
														|en = 'Duty is required.'"),,
			"Исполнитель", "Объект.Наименование");
		РеквизитыФормыЗаполнены = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Форма.Объект.СрокИсполнения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Срок"" исполнения не заполнено.';
														|en = 'Due date is required.'"),,
			"СрокИсполнения", "Объект.СрокИсполнения");
		РеквизитыФормыЗаполнены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыФормыЗаполнены;
	
КонецФункции

#КонецОбласти
