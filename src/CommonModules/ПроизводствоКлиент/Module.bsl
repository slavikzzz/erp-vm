////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Производство"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Трудозатраты

// Открывает форму выбора исполнителя трудозатрат в производстве. В зависимости от параметров переданного
// подразделения в форме могут быть выбраны бригады и/или физические лица.
//
// Параметры:
//  Организация			 - СправочникСсылка.Организации - значение для отбора исполнителей.
//  Подразделение		 - СправочникСсылка.СтруктураПредприятия - определяет состав исполнителей, доступных для выбора.
//  Исполнитель			 - СправочникСсылка.Бригады, СправочникСсылка.ФизическиеЛица - используется для позиционирования строки
//							на выбранном ранее значении.
//  Дата				 - Дата - используется для определения режима открытия формы: по сотрудникам или физлицам.
//  ТолькоРаботники		 - Булево - ограничивает выбор бригад.
//  ОписаниеОповещения	 - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана при закрытии формы.
//
Процедура ОткрытьФормуВыбораИсполнителя(Организация, Подразделение, Исполнитель, Дата, ТолькоРаботники = Ложь, ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Подразделение", Подразделение);
	ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
	ПараметрыФормы.Вставить("Дата", Дата);
	ПараметрыФормы.Вставить("ТолькоРаботники", ТолькоРаботники);
	
	ОткрытьФорму("ОбщаяФорма.ВыборИсполнителя", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область Продукция

// Открывает форму выбора получателя в производстве. В зависимости от типа номенклатуры выбранных строк
// в форме можно выбрать подразделение (структура предприятия) или склад
//
// Параметры:
//  Форма			     - ФормаКлиентскогоПриложения   - Обрабатываемая форма
//  Объект               - ДанныеФормыСтруктура - по типу объекта
//  ПараметрыТЧ		     - Структура          - содержит имена (представление) ТЧ: 
//											    ИмяТЧФорма      - имя таблицы формы
//                                              ИмяТЧОбъект     - имя табличной части объекта
//                                              ПредставлениеТЧ - представление табличной части для выводимых текстов
//  ТипыНоменклатуры     - Массив             - массив значений перечисления ТипыНоменклатуры для которых открывается форма,
//                                              если неопределено, тогда ограничения по типам не устанавливается
//  ОписаниеОповещения	 - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана при закрытии формы
//
Процедура ОткрытьФормуВыбораПолучателя(Форма, Объект, ПараметрыТЧ, ТипыНоменклатуры = Неопределено, ОписаниеОповещения) Экспорт
	
	ИмяТЧФорма       = ПараметрыТЧ.ИмяТЧФорма;
	ИмяТЧОбъект      = ПараметрыТЧ.ИмяТЧОбъект;
	ПредставлениеТЧ  = ПараметрыТЧ.ПредставлениеТЧ;
	
	Элементы         = Форма.Элементы;
	ВыделенныеСтроки = Элементы[ИмяТЧФорма].ВыделенныеСтроки;
	
	Если Объект[ИмяТЧОбъект].Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'В список ""%1"" не введено ни одной строки.';
							|en = 'No lines entered in the ""%1"" list.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеТЧ);
		
		ПоказатьПредупреждение(, ТекстОшибки, 45);
		Возврат;
		
	Иначе
		
		ТипНоменклатурыРабота   = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
		
		НаличиеЗапрещенногоТипа = Ложь;
		ВыборПодразделение      = Ложь;
		ВыборСклада             = Ложь;
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Объект[ИмяТЧОбъект].НайтиПоИдентификатору(Строка);
			
			Если ТипыНоменклатуры <> Неопределено 
				И ТипыНоменклатуры.Найти(ДанныеСтроки.ТипНоменклатуры) = Неопределено Тогда
				НаличиеЗапрещенногоТипа = Истина;
				Прервать;
			КонецЕсли;
			
			Если ДанныеСтроки.Свойство("СписатьНаРасходы")
					И ДанныеСтроки.СписатьНаРасходы
				Или ДанныеСтроки.ТипНоменклатуры = ТипНоменклатурыРабота Тогда
				ВыборПодразделение = Истина;
			Иначе
				ВыборСклада        = Истина;
			КонецЕсли;
			
			Если ВыборПодразделение И ВыборСклада Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаличиеЗапрещенногоТипа Тогда
			
			ТекстОшибки = НСтр("ru = 'Для выбранной номенклатуры (тип ""%1"") операция не может быть выполнена.';
								|en = 'Operation cannot be executed for the selected items (type ""%1"").'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСтроки.ТипНоменклатуры));
			
			ПоказатьПредупреждение(, ТекстОшибки, 45);
			Возврат;
			
		КонецЕсли;
		
		Если ВыборПодразделение И ВыборСклада Тогда
			
			ТекстОшибки = НСтр("ru = 'Выбраны строки с разными типами номенклатуры. Операция не может быть выполнена.';
								|en = 'Rows with different item types are selected. Cannot perform the operation.'");
			
			ПоказатьПредупреждение(, ТекстОшибки, 45);
			Возврат;
			
		КонецЕсли;
		
		Если ВыборСклада
			И ПараметрыТЧ.Свойство("СкладВШапке")
			И ПараметрыТЧ.СкладВШапке Тогда
			
			ТекстОшибки = НСтр("ru = 'Склад для товаров списка ""%1"" указывается в шапке документа.';
								|en = 'Warehouse for the ""%1"" list goods is specified in the document header.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеТЧ);
			
			ПоказатьПредупреждение(, ТекстОшибки, 45);
			Возврат;
			
		КонецЕсли;
		
		Если ВыборСклада
			И ПараметрыТЧ.Свойство("ОставитьИзделияУПереработчика")
			И ПараметрыТЧ.ОставитьИзделияУПереработчика Тогда
			
			ТекстОшибки = НСтр("ru = 'Изделия остаются для последующей обработки. Склад указывать не требуется.';
								|en = 'Products remain for further processing. The warehouse does not need to be specified.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеТЧ);
			
			ПоказатьПредупреждение(, ТекстОшибки, 45);
			Возврат;
			
		КонецЕсли;
		
		Если ВыборСклада Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
			
			Если ПараметрыТЧ.Свойство("Отбор") Тогда
				ПараметрыФормы.Вставить("Отбор", ПараметрыТЧ.Отбор);
			КонецЕсли;
			
			Если ПараметрыТЧ.Свойство("ГруппаСкладов") Тогда
				ПараметрыФормы.Вставить("ГруппаСкладов", ПараметрыТЧ.ГруппаСкладов);
			КонецЕсли;
			
			ОткрытьФорму(
				"Справочник.Склады.ФормаВыбора",
				ПараметрыФормы, Форма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
		Если ВыборПодразделение Тогда
			
			ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора",, Форма,,,,
						  ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область РасчетДолейСтоимости

// Функция проверяет необходимость обновления процента распределения затрат на выходные изделия.
//
// Параметры:
//  ТабличнаяЧасть				 - ТаблицаФормы	 - таблица формы, отображающая ТЧ;
//  ПараметрыРаспределенияЗатрат - Структура	 - структура параметров расчета, см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия
//  КэшированныеЗначения		 - Структура	 - структура кеша реквизитов текущей строки.
//  ДобавлениеУдаление			 - Булево		 - признак, что проверка вызывается при добавлении/удалении строки ТЧ.
// 
// Возвращаемое значение:
//  Булево - истина, если нужно ли обновить служебные реквизиты.
//
Функция НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(ТабличнаяЧасть, ПараметрыРаспределенияЗатрат, КэшированныеЗначения = Неопределено, ДобавлениеУдаление = Ложь) Экспорт
	
	ДанныеСтроки = ТабличнаяЧасть.ТекущиеДанные;
	
	Если ДобавлениеУдаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		СпособРаспределенияЗатратНаВыходныеИзделия = ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия;
	Иначе
		СпособРаспределенияЗатратНаВыходныеИзделия = ДанныеСтроки[ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыеПоля = Новый Массив;
	ПроверяемыеПоля.Добавить("ДоляСтоимости");
	ПроверяемыеПоля.Добавить(ПараметрыРаспределенияЗатрат.ПоляСвязи);
	
	Если ЗначениеЗаполнено(ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат) Тогда
		ПроверяемыеПоля.Добавить(ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат);
	КонецЕсли;
	
	Если СпособРаспределенияЗатратНаВыходныеИзделия = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости")
		И ДанныеСтроки <> Неопределено
		И ДанныеСтроки.ДоляСтоимости = 0 Тогда
		ПроверяемыеПоля.Добавить("Количество");
	КонецЕсли;
	
	Если ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено Тогда
		ПроверяемыеПоля.Добавить("Отменено");
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено
		И КэшированныеЗначения <> Неопределено
		И ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(
			КэшированныеЗначения,
			ДанныеСтроки,
			СтрСоединить(ПроверяемыеПоля,",")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Предназначена для проверки заполнения полей перед выполнением команды по вводу доли стоимости.
//
// Параметры:
//  ДанныеСтроки				 - ДанныеФормыСтруктура	 - данные строки, в которой осуществляется ввод доли стоимости.
//  ПараметрыРаспределенияЗатрат - Структура			 - структура параметров расчета, см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия
//  ИмяОбъекта					 - Строка				 - имя основного реквизита формы, связанного с редактируемым объектом.
// 
// Возвращаемое значение:
//  Булево - истина, если проверка заполнения выполнена успешно, ложь - в противном случае.
//
Функция ПроверитьЗаполнениеПередВводомДолиСтоимости(ДанныеСтроки, ПараметрыРаспределенияЗатрат, ИмяОбъекта = "Объект") Экспорт
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ошибки = Новый Массив();
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номенклатура';
																								|en = 'Items'"));
		Ошибка = Новый Структура("Поле, Текст", "Номенклатура", Текст);
		Ошибки.Добавить(Ошибка);
	КонецЕсли;
	
	Если (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "КоличествоУпаковок")
			И ДанныеСтроки.КоличествоУпаковок = 0
			ИЛИ ДанныеСтроки.Количество = 0)
		И (НЕ ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации
			ИЛИ ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации И НЕ ДанныеСтроки.РасчетПоФормуле) Тогда
		
		Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Количество';
																								|en = 'Quantity'"));
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "КоличествоУпаковок") Тогда
			Ошибка = Новый Структура("Поле, Текст", "КоличествоУпаковок", Текст);
		Иначе
			Ошибка = Новый Структура("Поле, Текст", "Количество", Текст);
		КонецЕсли;
		
		Ошибки.Добавить(Ошибка);
		
	КонецЕсли;
	
	Если Не ДоступнаРасшифровкаРасчетаДолиСтоимости(ДанныеСтроки, ПараметрыРаспределенияЗатрат) Тогда
		Текст = НСтр("ru = 'Недостаточно прав доступа для открытия формы расшифровки расчета доли стоимости.';
					|en = 'Insufficient access rights to open the cost share calculation drill-down form.'");
		Ошибка = Новый Структура("Поле, Текст", "ДоляСтоимости", Текст);
		Ошибки.Добавить(Ошибка);
	КонецЕсли;
	
	ОшибкиПользователю = Неопределено;

	Для каждого Ошибка Из Ошибки Цикл
		Поле = СтрШаблон(ИмяОбъекта + ".%1[%2].%3", ПараметрыРаспределенияЗатрат.ИмяТЧ, Формат(ДанныеСтроки.НомерСтроки - 1, "ЧН=0; ЧГ=0"), Ошибка.Поле);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Ошибка.Текст, "");
	КонецЦикла;

	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю);

	Возврат Ошибки.Количество() = 0;

КонецФункции

#КонецОбласти

#Область ПроизводствоБезЗаказов

// Оформить производство без заказа на основании.
// 
// Параметры:
//  МассивСсылок - Массив Из ДокументСсылка
//  ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ОформитьПроизводствоБезЗаказаНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ПроизводствоКлиент.ОформитьПроизводствоБезЗаказаНаОсновании");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыДокументов = ПроизводствоКлиентСервер.ПараметрыФормированияДокументовПроизводстваБезЗаказов();
	ПараметрыДокументов.ПериодРегистрации = Дата(3999,12,31);
	ПараметрыДокументов.ЗаполнятьАвтоматически = Истина;
	
	ПараметрыДокументов.ПереченьДанных.Добавить("ВозвратныеОтходы");
	ПараметрыДокументов.ПереченьДанных.Добавить("МатериалыИУслуги");
	ПараметрыДокументов.ПереченьДанных.Добавить("Трудозатраты");
	
	ФормаДокумента = ПолучитьФорму("Документ.ПроизводствоБезЗаказа.ФормаОбъекта",, ПараметрыВыполненияКоманды.Источник);
	ПараметрыДокументов.ОбъектыФормы.Вставить("ПроизводствоБезЗаказа", ФормаДокумента.Объект);
	
	Результат = ПроизводствоВызовСервера.ОформитьПроизводствоБезЗаказаНаОсновании(МассивСсылок, ПараметрыДокументов);
	ОбработатьСформированныеДокументы(ПараметрыВыполненияКоманды.Источник, Результат, Ложь);
	
КонецПроцедуры

// Обработать сформированные документы производства без заказа.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Результат - Структура
//  ОповещатьОЗакрытии - Булево - оповещать о закрытии
//  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - оповещение о закрытии
//
Процедура ОбработатьСформированныеДокументы(Форма, Результат, ОповещатьОЗакрытии = Истина, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	ОписаниеОповещения = Неопределено;
	Если ОповещатьОЗакрытии
		И ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДанныеСписков", Форма);
	ИначеЕсли ОповещатьОЗакрытии Тогда
		ОписаниеОповещения = ОписаниеОповещенияОЗакрытии;
	КонецЕсли;
	
	Если Не Результат.ОбъектФормы = Неопределено Тогда
		
		ФормаДокумента = ПолучитьФорму("Документ." + Результат.ТипДокумента + ".ФормаОбъекта", Результат, Форма);
		КопироватьДанныеФормы(Результат.ОбъектФормы, ФормаДокумента.Объект);
		ФормаДокумента.ОбновитьПриОткрытии = Истина;
		ФормаДокумента.Модифицированность = Истина;
		ФормаДокумента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаДокумента.Открыть();
		
	ИначеЕсли Результат.СписокДокументов.Количество() > 1 Тогда
		
		ОткрытьФорму(
			"Обработка.ОформлениеПроизводстваБезЗаказов.Форма.ФормаСпискаНовыхДокументов",
			Результат,
			Форма,,,,
			ОписаниеОповещения);
			
	Иначе
		
		Если Результат.МассивОшибок.Количество() = 1 Тогда
			ПоказатьПредупреждение(,Результат.МассивОшибок[0].Текст);
		Иначе
			Для Каждого ТекущаяОшибка Из Результат.МассивОшибок Цикл
				ТекущаяОшибка.Сообщить();
			КонецЦикла;
			ПоказатьПредупреждение(,НСтр("ru = 'Не сформировано ни одного документа.';
										|en = 'No document is generated.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетДолейСтоимости

Функция ДоступнаРасшифровкаРасчетаДолиСтоимости(ДанныеСтроки, ПараметрыРаспределенияЗатрат) Экспорт
	
	Если ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		СпособРаспределенияЗатратНаВыходныеИзделия = ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия;
	Иначе
		СпособРаспределенияЗатратНаВыходныеИзделия = ДанныеСтроки[ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия];
	КонецЕсли;
	
	Если СпособРаспределенияЗатратНаВыходныеИзделия = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости") Тогда
		ЕстьДоступ = ПроизводствоВызовСервера.ДоступнаРасшифровкаРасчетаДолиСтоимости(СпособРаспределенияЗатратНаВыходныеИзделия);
	Иначе
		ЕстьДоступ = Истина;
	КонецЕсли;
	
	Возврат ЕстьДоступ;
	
КонецФункции

#КонецОбласти

#Область ДвижениеПродукцииИМатериалов

// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьВыпускПродукцииНаОсновании".
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок
//  ПараметрыВыполнения - Структура:
//                         * ОписаниеКоманды - Структура:
//                            ** Идентификатор           - Строка  - Идентификатор команды.
//                            ** Представление           - Строка  - Представление команды в форме.
//                            ** ДополнительныеПараметры - Структура - Дополнительные параметры команды.
//                            ** МножественныйВыбор      - Булево - признак множественного выбора.
//                        * Форма           - ФормаКлиентскогоПриложения - Форма, из которой вызвана команда.
//                        * ЭтоФормаОбъекта - Булево - Истина, если команда вызвана из формы объекта.
//                        * Источник        - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция СоздатьПередачуПродукцииИзКладовойНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт

	Массив = Новый Массив;
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		Массив.Добавить(МассивСсылок);
	Иначе
		Массив = МассивСсылок;
	КонецЕсли;
	
	ПараметрыВыполнения.ОписаниеКоманды.Вставить("ОбъектыОснований", Массив);
	СоздатьДвижениеПродукцииИМатериаловНаОсновании(
		ПараметрыВыполнения.ОписаниеКоманды, 
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой"));
	
КонецФункции

// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьПередачуМатериаловНаОсновании".
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок
//  ПараметрыВыполнения - Структура:
//                         * ОписаниеКоманды - Структура:
//                            ** Идентификатор           - Строка  - Идентификатор команды.
//                            ** Представление           - Строка  - Представление команды в форме.
//                            ** ДополнительныеПараметры - Структура - Дополнительные параметры команды.
//                            ** МножественныйВыбор      - Булево - признак множественного выбора.
//                        * Форма           - ФормаКлиентскогоПриложения - Форма, из которой вызвана команда.
//                        * ЭтоФормаОбъекта - Булево - Истина, если команда вызвана из формы объекта.
//                        * Источник        - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция СоздатьПередачуМатериаловВКладовуюНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	Массив = Новый Массив;
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		Массив.Добавить(МассивСсылок);
	Иначе
		Массив = МассивСсылок;
	КонецЕсли;
	
	ПараметрыВыполнения.ОписаниеКоманды.Вставить("ОбъектыОснований", Массив);
	СоздатьДвижениеПродукцииИМатериаловНаОсновании(
		ПараметрыВыполнения.ОписаниеКоманды, 
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую"));
	
КонецФункции

Процедура СоздатьДвижениеПродукцииИМатериаловНаОсновании(ОписаниеКоманды, ХозяйственнаяОперация)
	
	ПараметрыОткрытия = ПроизводствоВызовСервера.ПараметрыСозданияДвиженияПродукцииИМатериаловНаОсновании(
		ОписаниеКоманды.ОбъектыОснований, ХозяйственнаяОперация);
	
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
		
		ОткрытьФорму(
			"Документ.ДвижениеПродукцииИМатериалов.ФормаОбъекта",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды ввода на основании "ПроизводствоСервер.ДобавитьКомандуСоздатьВыпускПродукцииБезЗаказаНаОсновании".
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок
//  ПараметрыВыполнения - Структура:
//                         * ОписаниеКоманды - Структура:
//                            ** Идентификатор           - Строка  - Идентификатор команды.
//                            ** Представление           - Строка  - Представление команды в форме.
//                            ** ДополнительныеПараметры - Структура - Дополнительные параметры команды.
//                            ** МножественныйВыбор      - Булево - признак множественного выбора.
//                        * Форма           - ФормаКлиентскогоПриложения - Форма, из которой вызвана команда.
//                        * ЭтоФормаОбъекта - Булево - Истина, если команда вызвана из формы объекта.
//                        * Источник        - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция СоздатьВыпускПродукцииБезЗаказаНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт

	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ПроизводствоКлиент.СоздатьВыпускПродукцииБезЗаказаНаОсновании");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Массив = Новый Массив;
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		Массив.Добавить(МассивСсылок);
	Иначе
		Массив = МассивСсылок;
	КонецЕсли;
	
	ПараметрыВыполнения.ОписаниеКоманды.Вставить("ОбъектыОснований", Массив);
	ПараметрыДокументов = Новый Структура;
	ПараметрыДокументов.Вставить("ОбъектыОснований", Массив);
	
	ФормаДокумента = ПолучитьФорму("Документ.ДвижениеПродукцииИМатериалов.ФормаОбъекта",,, ПараметрыВыполнения.Форма,);
	ПараметрыДокументов.Вставить("ОбъектФормы", ФормаДокумента.Объект);
	
	ИдентификаторФормы = Строка(ПараметрыВыполнения.Форма.УникальныйИдентификатор);
	ПараметрыДокументов.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Результат = ПроизводствоВызовСервера.ДокументыДвиженияПродукцииИМатериаловПоПараметрам(ПараметрыДокументов);
	
	Если Результат.Свойство("ОткрытьФормуНового") Тогда
		
		КопироватьДанныеФормы(ПараметрыДокументов.ОбъектФормы, ФормаДокумента.Объект);
		ФормаДокумента.ОбновитьПриОткрытии = Истина;
		ФормаДокумента.Модифицированность = Истина;
		ФормаДокумента.Открыть();
		
	ИначеЕсли Результат.КоличествоСозданныхДокументов > 1 Тогда
		
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(Результат, ПараметрыВыполнения.Форма);
		
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не сформировано ни одного документа. Отсутствует продукция, требующая передачи на склад.';
									|en = 'No document was generated. Products that require transfer to the warehouse are missing.'"));
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Заполнение

// Заполняет служебные реквизиты в строке на основании выбранного склада
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  Параметры			 - Структура - вспомогательные параметры для заполнения.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьПризнакЦеховаяКладовая(ТекущаяСтрока, Параметры, КэшированныеЗначения) Экспорт
	
	ИмяПоляСклад = "Склад";
	ЗначениеСклада = Неопределено;
	ЗаполнитьПодразделение = Ложь;
	
	Если Параметры <> Неопределено Тогда
		
		Если Параметры.Свойство("ИмяПоляСклад") Тогда
			ИмяПоляСклад = Параметры.ИмяПоляСклад;	
		КонецЕсли;
			
		Если Параметры.Свойство("ЗаполнитьПодразделение") Тогда
			ЗаполнитьПодразделение = Параметры.ЗаполнитьПодразделение;	
		КонецЕсли;		
		
		Параметры.Свойство("ЗначениеСклада", ЗначениеСклада);
		
	КонецЕсли;
	
	Если ЗначениеСклада = Неопределено Тогда
		ЗначениеСклада = ТекущаяСтрока[ИмяПоляСклад];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСклада) И ТипЗнч(ЗначениеСклада) = Тип("СправочникСсылка.Склады") Тогда
		
		СвойстваСклада = КэшированныеЗначения.СвойстваСкладов.Получить(ЗначениеСклада);
		
		Если СвойстваСклада = Неопределено Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'Попытка заполнения служебных реквизитов на основании выбранного склада на клиенте.';
					|en = 'Attempt to fill in service attributes based on the selected warehouse on client.'");
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;	
		
		ЦеховаяКладовая = СвойстваСклада.ЦеховаяКладовая;
		Подразделение = СвойстваСклада.Подразделение;
		
	Иначе
		
		ЦеховаяКладовая = Ложь;
		Подразделение = Неопределено;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЦеховаяКладовая = ЦеховаяКладовая;
	
	Если ЗаполнитьПодразделение И ТекущаяСтрока.ЦеховаяКладовая Тогда
		ТекущаяСтрока.Подразделение = Подразделение;
	КонецЕсли;
	
	Если ТекущаяСтрока.Свойство("НужноОкруглять") Тогда
		ТекущаяСтрока.НужноОкруглять = Не ТекущаяСтрока.ЦеховаяКладовая;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Типы затрат для выбора статьи калькуляции.
// 
// Параметры:
//  ИмяТЧ - Строка
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыЗатрат
Функция ТипыЗатратДляВыбораСтатьиКалькуляции(ИмяТЧ) Экспорт
	
	ТипыЗатрат = Новый Массив;
	
	Если ИмяТЧ = "МатериалыИУслуги"
		ИЛИ ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
		ИЛИ ИмяТЧ = "РасходМатериаловИРабот" Тогда
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"));
	ИначеЕсли ИмяТЧ ="Трудозатраты" Тогда
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда"));
	ИначеЕсли ИмяТЧ = "ВозвратныеОтходы"
		ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"));
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ВозвратныеОтходы"));
	КонецЕсли; 
	
	Возврат ТипыЗатрат;
	
КонецФункции

// Обработчик команды ввода на основании "Документ.АктВыполненныхВнутреннихРабот.СозданиеАктаВыполненныхВнутреннихРабот".
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок
//  ПараметрыВыполнения - Структура:
//                         * ОписаниеКоманды - Структура:
//                            ** Идентификатор           - Строка  - Идентификатор команды.
//                            ** Представление           - Строка  - Представление команды в форме.
//                            ** ДополнительныеПараметры - Структура - Дополнительные параметры команды.
//                            ** МножественныйВыбор      - Булево - признак множественного выбора.
//                        * Форма           - ФормаКлиентскогоПриложения - Форма, из которой вызвана команда.
//                        * ЭтоФормаОбъекта - Булево - Истина, если команда вызвана из формы объекта.
//                        * Источник        - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция СоздатьАктВыполненныхВнутреннихРаботНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ПроизводствоКлиент.СоздатьАктВыполненныхВнутреннихРаботНаОсновании");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ОчиститьСообщения();
	
	РезультатПроверки = ПроизводствоВызовСервера.СоздатьАктВыполненныхВнутреннихРаботПроверкаОснований(МассивСсылок);
	Если РезультатПроверки.Свойство("ЕстьОшибки") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстОшибки);
	Иначе
		ПараметрыОснование = Новый Структура;
		ПараметрыОснование.Вставить("ОбъектыОснований",	МассивСсылок);
		ПараметрыОснование.Вставить("РеквизитыШапки",	РезультатПроверки.РеквизитыШапки);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Основание", ПараметрыОснование);
		
		ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
		
		ИмяФормы = "Документ.АктВыполненныхВнутреннихРабот.ФормаОбъекта";
		ОткрытьФорму(
				ИмяФормы,
				ПараметрыОткрытия,
				ПараметрыВыполненияКоманды.Источник,
				ПараметрыВыполненияКоманды.Уникальность,
				ПараметрыВыполненияКоманды.Окно,
				ПараметрыВыполненияКоманды.НавигационнаяСсылка);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
