
#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника
//
//	Параметры:
//		ВыполняетсяНачальнаяНастройка - Булево.
//
Процедура ОбработатьИзменениеВыполняетсяНачальнаяНастройка(ВыполняетсяНачальнаяНастройка) Экспорт

	ПоказыватьПриглашение = Не (ВыполняетсяНачальнаяНастройка Или ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника"));
	Если ПоказыватьПриглашение <> Константы.ПоказыватьПриглашениеКабинетСотрудника.Получить() Тогда
		Константы.ПоказыватьПриглашениеКабинетСотрудника.Установить(ПоказыватьПриглашение);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступноИспользованиеСборГрафиковОтпусков() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("1.1");

КонецФункции

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.85";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "ИнтеграцияКабинетСотрудникаРасширенный.ПереносИзмененияДляОбменаКабинетСотрудника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.131";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "ИнтеграцияКабинетСотрудникаРасширенный.ПеренестиЗаработанныеПраваНаОтпуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.131";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "ИнтеграцияКабинетСотрудникаРасширенный.ПеренестиАктуальностьИнформацииОбОтпусках";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске.ИмяМетода);
	
КонецПроцедуры

// Процедура регламентного задания ПроверкаАктуальностиИнформацииОбОтпуске
//
Процедура ПроверитьАктуальностьИнформацииОбОтпуске() Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Выгружается
	|ИЗ
	|	РегистрСведений.АктуальностьИнформацииОбОтпусках КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Таблица.ФизическоеЛицо = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	Таблица.ДатаАктуальности <= &ТекущаяДата";	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Выгружается Тогда
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Выборка.ФизическоеЛицо;
			МенеджерЗаписи.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.АктуальностьИнформацииОбОтпусках.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементыБлокировкиПриСохраненииПравилВыгрузки(Блокировка) Экспорт

	Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");

КонецПроцедуры

Процедура ЗаписатьОбъектыДляОбменаПриСохраненииПравилВыгрузки(ОбъектыДляРегистрации) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектыДляРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененияДанныхГрафика = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДанныхГрафика", ИзмененияДанныхГрафика);
	Если ЗначениеЗаполнено(ИзмененияДанныхГрафика) Тогда
		НаборЗаписей = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ИзмененияДанныхГрафика Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТЗ);
		КонецЦикла;
		НаборЗаписей.Записать(); 
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьБлокировкуРегистрацияОбъектовДляОбмена(Блокировка, ОбъектыДляРегистрации) Экспорт

	ИзмененияДанныхГрафика = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДанныхГрафика", ИзмененияДанныхГрафика);
	Если ЗначениеЗаполнено(ИзмененияДанныхГрафика) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДанныхГрафика;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрафикРаботы", "ГрафикРаботы");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Год", "Год");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОбъектыДляОбмена(ОбъектыДляРегистрации) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектыДляРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененияДанныхГрафика = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДанныхГрафика", ИзмененияДанныхГрафика);
	Если ЗначениеЗаполнено(ИзмененияДанныхГрафика) Тогда
		Для каждого СтрокаТЗ Из ИзмененияДанныхГрафика Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция РассчитатьИзмененияДанныхГрафика(ГрафикиРаботыСотрудников) Экспорт
	
	Если Не ЗначениеЗаполнено(ГрафикиРаботыСотрудников) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ТекущиеВыгружаемыеГрафикиРаботы = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаютсяВПриложение(ГрафикиРаботыСотрудников, Приложение);
	НовыеГрафикиРаботы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ГрафикиРаботыСотрудников, ТекущиеВыгружаемыеГрафикиРаботы); 
	
	ИзмененияДанныхГрафика = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ИзмененияДанныхГрафикаКабинетСотрудника");
	ТекущийГод = Год(ТекущаяДатаСеанса());
	Для каждого ГрафикРаботы Из НовыеГрафикиРаботы Цикл
		НоваяСтрока = ИзмененияДанныхГрафика.Добавить();
		НоваяСтрока.ГрафикРаботы 	= ГрафикРаботы;
		НоваяСтрока.Год 			= ТекущийГод;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	Возврат ИзмененияДанныхГрафика;
	
КонецФункции

Процедура ОчиститьДанныеПриОтключенииПриложения() Экспорт

	РегистрыСведений.АктуальностьИнформацииОбОтпусках.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();

КонецПроцедуры

Процедура ТипыОбъектовДляРучнойРегистрацииИзменений(ТипыОбъектов) Экспорт
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.Сотрудники.ПустаяСсылка());
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Если КабинетСотрудника.ИспользоватьФормат50375() Тогда
		ИмяОпции = "ИспользоватьЗапросыСправокСотрудником";
		ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
		Если ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции) Тогда
			ТипЗначения = ИнтеграцияУправлениеПерсоналом.ТипВидПредоставляемойСотрудникамСправкиСсылка();
			Если ЗначениеЗаполнено(ТипЗначения) Тогда
				ИмяТаблицы = Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя();
				НоваяСтрока = ТипыОбъектов.Добавить();
				НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидПредоставляемойСотрудникамСправки;
				НоваяСтрока.ИмяТаблицы 	= ИмяТаблицы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("3.0") Тогда
		НоваяСтрока = ТипыОбъектов.Добавить();
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидОтпуска;
		НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ВидыОтпусков.ПустаяСсылка());
		Если ИнтеграцияКабинетСотрудника.ИспользоватьРабочиеМестаОхраныТруда() Тогда
			ТипЗначения = ИнтеграцияУправлениеПерсоналомРасширенный.ТипРабочиеМестаОхраныТрудаСсылка();
			Если ТипЗначения <> Тип("Неопределено") Тогда
				НоваяСтрока = ТипыОбъектов.Добавить();
				НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РабочееМестоОхраныТруда;
				НоваяСтрока.ИмяТаблицы = Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиРасчетаЗарплаты() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();

КонецФункции

Процедура ВключитьСборГрафиковОтпусков() Экспорт

	СборГрафиковОтпусков.УстановитьЗначениеИспользоватьСборГрафиковОтпусков(Истина);

КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПлановыхУдержаний() Экспорт
	
	ИмяОбработчика = ИнтеграцияКабинетСотрудника.ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ФизическиеЛица
	|	И НЕ ВыгружаемыеОбъекты.УсловноВыгружается";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	Если ФизическиеЛица.Количество() = 0 Тогда
		ИнтеграцияКабинетСотрудника.ОтключитьОбработчикОбмена(ИмяОбработчика);
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолучения.КадровыеДанные = "Организация";
	ДанныеДляРегистрации = ИнтеграцияУправлениеПерсоналом.КадровыеДанныеСотрудников(ПараметрыПолучения);
	ДанныеДляРегистрации.Свернуть("Организация,ФизическоеЛицо");
	ДанныеДляРегистрации.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	ДанныеДляРегистрации.ЗаполнитьЗначения(Перечисления.КатегорииУдержаний.ДСВ,"КатегорияУдержания");
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеДляРегистрации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КатегорияУдержания", "КатегорияУдержания");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ДанныеДляРегистрации Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация 			= СтрокаТЗ.Организация;
			МенеджерЗаписи.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
			МенеджерЗаписи.КатегорияУдержания 	= СтрокаТЗ.КатегорияУдержания;
			МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ИнтеграцияКабинетСотрудника.ОтключитьОбработчикОбмена(ИмяОбработчика);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьАктуальностьИнформацииОбОтпусках(ФизическиеЛица, АктуальностьИнформацииОбОтпусках) Экспорт
	
	ФизическиеЛицаКОбработке = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ФизическиеЛица);
	
	ТаблицаАктуальности = АктуальностьИнформацииОбОтпусках.СкопироватьКолонки();
	Для каждого СтрокаТЗ Из АктуальностьИнформацииОбОтпусках Цикл
		Если ФизическиеЛицаКОбработке[СтрокаТЗ.ФизическоеЛицо] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТаблицаАктуальности.Добавить(), СтрокаТЗ);
	КонецЦикла; 
	
	Если Не ЗначениеЗаполнено(ТаблицаАктуальности) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.АктуальностьИнформацииОбОтпусках");
		ЭлементБлокировки.ИсточникДанных = ТаблицаАктуальности;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаАктуальности Цикл
			МенеджерЗаписи = РегистрыСведений.АктуальностьИнформацииОбОтпусках.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

Функция ТаблицаВидовОтпусковДляОбновления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидОтпуска) КАК ТипОбъекта
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	НЕ ВидыОтпусков.ПометкаУдаления
	|	И НЕ ВидыОтпусков.Недействителен";
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеВидыОтпусков(Ссылки) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК Ссылка,
	|	ВидыОтпусков.Наименование КАК Наименование,
	|	ВидыОтпусков.ОсновнойОтпуск КАК ОсновнойОтпуск
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.Ссылка В(&Ссылки)";
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ДоступноИспользованиеРабочихМестОхраныТруда() Экспорт
	
	Возврат РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются();

КонецФункции

#Область ПолучениеИзменений

Функция ИзмененияДанныхГрафиковРаботы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ГрафикРаботы КАК ГрафикРаботы,
	|	Изменения.Год КАК Год,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, Изменения.Год - 1), ГОД) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, Изменения.Год - 1), ГОД) КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВПравилах,
	|	ЕСТЬNULL(ВыгруженныеОбъекты.Выгружался, ЛОЖЬ) КАК ГрафикВыгружался
	|ИЗ
	|	РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Изменения.ГрафикРаботы = ВыгружаемыеОбъекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|		ПО Изменения.ГрафикРаботы = ВыгруженныеОбъекты.Ссылка
	|			И (ВыгруженныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы))
	|			И (ВыгруженныеОбъекты.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|			И (ВыгруженныеОбъекты.Выгружался)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ИзмененияПлановыхУдержаний() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	Изменения.Организация КАК Организация,
	|	Изменения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Изменения.КатегорияУдержания КАК КатегорияУдержания,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеФизическиеЛица.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВыгружаемыеОрганизации.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВПравилах
	|ИЗ
	|	РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеФизическиеЛица
	|		ПО Изменения.ФизическоеЛицо = ВыгружаемыеФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОрганизации
	|		ПО Изменения.Организация = ВыгружаемыеОрганизации.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеФизическиеЛица
	|		ПО Изменения.ФизическоеЛицо = ВыгруженныеФизическиеЛица.Ссылка
	|			И (ВыгруженныеФизическиеЛица.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо))
	|			И (ВыгруженныеФизическиеЛица.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|			И (ВыгруженныеФизическиеЛица.Выгружался)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОрганизации
	|		ПО Изменения.Организация = ВыгруженныеОрганизации.Ссылка
	|			И (ВыгруженныеОрганизации.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация))
	|			И (ВыгруженныеОрганизации.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|			И (ВыгруженныеОрганизации.Выгружался)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область ОтменаРегистрацииИзменений

Процедура ОтменитьРегистрациюИзмененийДанныхГрафиковРаботы(ОтменитьРегистрацию) Экспорт

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ОтменитьРегистрацию;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрафикРаботы", "ГрафикРаботы");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Год", "Год");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОтменитьРегистрацию", ОтменитьРегистрацию);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ГрафикРаботы КАК ГрафикРаботы,
		|	ТаблицаИзменений.Год КАК Год,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ОтменитьРегистрацию
		|ИЗ
		|	&ОтменитьРегистрацию КАК ТаблицаИзменений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьРегистрацию.ГрафикРаботы КАК ГрафикРаботы,
		|	ОтменитьРегистрацию.Год КАК Год
		|ИЗ
		|	ОтменитьРегистрацию КАК ОтменитьРегистрацию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК Изменения
		|		ПО ОтменитьРегистрацию.ГрафикРаботы = Изменения.ГрафикРаботы
		|			И ОтменитьРегистрацию.Год = Изменения.Год
		|			И ОтменитьРегистрацию.ВерсияДанных = Изменения.ВерсияДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ГрафикРаботы = Выборка.ГрафикРаботы;
			МенеджерЗаписи.Год = Выборка.Год;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка отмены регистрации изменений данных графиков работы.
			|%1';
			|en = 'An error occurred when canceling the registration of changes to work schedule data.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).Обмен;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОтменитьРегистрациюИзмененийПлановыхУдержаний(ОтменитьРегистрацию) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ОтменитьРегистрацию;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КатегорияУдержания", "КатегорияУдержания");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОтменитьРегистрацию", ОтменитьРегистрацию);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтменитьРегистрацию.Организация КАК Организация,
		|	ОтменитьРегистрацию.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтменитьРегистрацию.КатегорияУдержания КАК КатегорияУдержания,
		|	ОтменитьРегистрацию.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВТОтменитьРегистрацию
		|ИЗ
		|	&ОтменитьРегистрацию КАК ОтменитьРегистрацию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьРегистрацию.Организация КАК Организация,
		|	ОтменитьРегистрацию.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтменитьРегистрацию.КатегорияУдержания КАК КатегорияУдержания
		|ИЗ
		|	ВТОтменитьРегистрацию КАК ОтменитьРегистрацию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника КАК ИзмененияПлановыхУдержаний
		|		ПО ОтменитьРегистрацию.Организация = ИзмененияПлановыхУдержаний.Организация
		|			И ОтменитьРегистрацию.ФизическоеЛицо = ИзмененияПлановыхУдержаний.ФизическоеЛицо
		|			И ОтменитьРегистрацию.КатегорияУдержания = ИзмененияПлановыхУдержаний.КатегорияУдержания
		|			И ОтменитьРегистрацию.ВерсияДанных = ИзмененияПлановыхУдержаний.ВерсияДанных";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация 			= Выборка.Организация;
			МенеджерЗаписи.ФизическоеЛицо 		= Выборка.ФизическоеЛицо;
			МенеджерЗаписи.КатегорияУдержания 	= Выборка.КатегорияУдержания;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка отмены регистрации изменений Плановых удержаний.
			|%1';
			|en = 'An error occurred when canceling the registration of changes to Planned deductions.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).Обмен;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

#Область ПереносДанных

Процедура ПереносИзмененияДляОбменаКабинетСотрудника() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененияДляОбмена = ИнтеграцияКабинетСотрудника.НоваяТаблицаИзмененияДляОбмена();
	
	Запрос = Новый Запрос;
	// СотрудникиДляОбновленияПубликацииГрафикаОтпусков
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Сотрудник КАК Ссылка
	|ИЗ
	|	РегистрСведений.УдалитьСотрудникиДляОбновленияПубликацииГрафикаОтпусков КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков;
	КонецЦикла;
		
	// СотрудникиДляОбновленияПубликацииПравНаОтпуск
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК Ссылка
	|ИЗ
	|	РегистрСведений.УдалитьСотрудникиДляОбновленияПубликацииПравНаОтпуск КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Таблица.Сотрудник = Сотрудники.Ссылка";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 		= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
	КонецЦикла;
	
	ИзмененияДляОбмена.Свернуть("Ссылка,ТипОбъекта");
	
	Для каждого СтрокаТЗ Из ИзмененияДляОбмена Цикл
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(СтрокаТЗ.Ссылка); 
		НаборЗаписей.Отбор.ТипОбъекта.Установить(СтрокаТЗ.ТипОбъекта);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка 		= СтрокаТЗ.Ссылка;
		ЗаписьНабора.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
		ЗаписьНабора.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей); 
		
	КонецЦикла;
	
	РегистрыСведений.УдалитьСотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.УдалитьСотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьНаборЗаписей().Записать();
	
КонецПроцедуры

#КонецОбласти

Процедура ПеренестиЗаработанныеПраваНаОтпуск() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Изменения.Ссылка = Сотрудники.Ссылка
	|ГДЕ
	|	Изменения.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеИзменения = РезультатЗапроса.Выгрузить();
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ТекущиеИзменения, "ФизическоеЛицо", Истина);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого СтрокаТЗ Из ТекущиеИзменения Цикл
			НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(СтрокаТЗ.Ссылка);
			НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъекта);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
		
		Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
			НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(ФизическоеЛицо);
			НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъекта);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Ссылка = ФизическоеЛицо;
			ЗаписьНабора.ТипОбъекта = ТипОбъекта;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ПеренестиАктуальностьИнформацииОбОтпусках() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МИНИМУМ(Таблица.ДатаАктуальности) КАК ДатаАктуальности
	|ИЗ
	|	РегистрСведений.УдалитьАктуальностьИнформацииОбОтпуске КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Таблица.Сотрудник = Сотрудники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.ФизическоеЛицо";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.АктуальностьИнформацииОбОтпусках.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			ЗаписьНабора.ДатаАктуальности 	= Выборка.ДатаАктуальности;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.УдалитьАктуальностьИнформацииОбОтпуске.СоздатьНаборЗаписей();
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

