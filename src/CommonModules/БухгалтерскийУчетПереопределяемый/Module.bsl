#Область ПрограммныйИнтерфейс

#Область СвойстваСправочников

//++ НЕ УТ

#Область СвойстваДоговора

// Функция возвращает организацию по договору.
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Организация, заключившая договор.
//
Функция ПолучитьОрганизациюПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация");
	
КонецФункции // ПолучитьОрганизациюПоДоговору()

// Функция возвращает контрагента по договору.
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор.
//
// Возвращаемое значение:
//	СправочникСсылка.Контрагенты - Контрагент договора.
//
Функция ПолучитьКонтрагентаПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, 
		БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
	
КонецФункции // ПолучитьКонтрагентаПоДоговору()

// Функция возвращает валюту договора.
//
// Параметры:
// 	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор.
//
// Возвращаемое значение:
// СправочникСсылка.Валюты - Валюта договора.
//
Функция ВалютаВзаиморасчетов(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
КонецФункции // ВалютаВзаиморасчетов()

// Функция возвращает признак расчетов в условных единицах.
//
// Параметры:
//	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на договор.
//
// Возвращаемое значение:
// Булево - ИСТИНА - если расчеты ведутся в условных единицах.
//
Функция РасчетыВУсловныхЕдиницах(ДоговорКонтрагента) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов,ОплатаВВалюте");
	
	Возврат ВалютаРегламентированногоУчета <> ДанныеДоговора.ВалютаВзаиморасчетов И НЕ ДанныеДоговора.ОплатаВВалюте;
	
КонецФункции // РасчетыВУсловныхЕдиницах()

// Функция возвращает пустое значение договора.
//
// Возвращаемое значение:
//	СправочникСсылка.ДоговорКонтрагентов - Пустой договор.
//
Функция ПолучитьПустоеЗначениеДоговора() Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции // ПолучитьПустоеЗначениеДоговора()

// Функция возвращает текст, для получения свойства ВидДоговора в запросе.
//
// Параметры:
//	ИмяПоля - Строка - Выражение для получения ссылки на договор.
//
// Возвращаемое значение:
//	Строка - Выражение для получения вида договора.
//
Функция ТекстЗапросаВидДоговора(ИмяПоля) Экспорт
	
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов)." + ИмяРеквизитаВидДоговора, "ПолеДоговор", ИмяПоля); 
	
КонецФункции // ТекстЗапросаВидДоговора()

// Функция возвращает текст, для получения свойства РасчетыВУсловныхЕдиницах в запросе.
//
// Параметры:
//	ИмяПоля - Строка - Выражение для получения ссылки на договор.
//
// Возвращаемое значение:
//	Строка - Выражение для получения признака расчетов по договору в условных единицах.
//
Функция ТекстЗапросаРасчетыВУЕ(ИмяПоля) Экспорт
	
	Возврат СтрЗаменить("ВЫБОР 
						|	КОГДА ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях)
						|		ТОГДА ИСТИНА
						|	ИНАЧЕ ЛОЖЬ
						|КОНЕЦ", "ПолеДоговор", ИмяПоля);
	
КонецФункции // ТекстЗапросаРасчетыВУЕ()

// Функция ТекстЗапросаУчетАгентскогоНДС возвращает текст для получения свойства 
// УчетАгентскогоНДС для договора.
//
// Параметры:
//	ИмяПоля - Строка - Выражение для получения ссылки на договор.
//
// Возвращаемое значение:
//	Строка - Выражение для получения признака учет агентского НДС по договору.
//
Функция ТекстЗапросаУчетАгентскогоНДС(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС";

КонецФункции // ТекстЗапросаУчетАгентскогоНДС()

// Функция ТекстЗапросаВидАгентскогоДоговора возвращает текст запроса для получения
// свойства договора ВидАгентскогоДоговора.
//
// Параметры:
//	ИмяПоля - Строка - Выражение для получения ссылки на договор.
//
// Возвращаемое значение:
//	Строка - Выражение для получения вида агентского договора.
//
Функция ТекстЗапросаВидАгентскогоДоговора(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора";

КонецФункции // ТекстЗапросаВидАгентскогоДоговора()

// Функция ЭтоВидДоговораСПоставщиком возвращает ИСТИНА, 
// если договор с таким видом является договором с поставщиком.
//
// Параметры:
//	ВидДоговораХозОперация - ПеречисленияСсылка.ХозяйственныеОперации - Характер операции по договору.
//
// Возвращаемое значение:
//	Булево - Истина, если договор является договором с поставщиком.
//
Функция ЭтоВидДоговораСПоставщиком(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
				ИЛИ ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
				ИЛИ ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;

КонецФункции // ЭтоВидДоговораСПоставщиком()

// Функция ЭтоВидДоговораСПокупателем возвращает ИСТИНА, 
// если договор с таким видом является договором с покупателем.
//
// Параметры:
//	ВидДоговораХозОперация - ПеречисленияСсылка.ХозяйственныеОперации - Характер операции по договору.
//
// Возвращаемое значение:
//	Булево - Истина, если договор является договором с покупателем.
//
Функция ЭтоВидДоговораСПокупателем(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ТипыДоговоров.СПокупателем;

КонецФункции // ЭтоВидДоговораСПокупателем()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
// Параметры:
//	ВидДоговораХозОперация - ПеречисленияСсылка.ХозяйственныеОперации - Характер операции по договору.
//
// Возвращаемое значение:
//	Булево - Истина, если договор является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентом(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
// Параметры:
//	ВидДоговораХозОперация - ПеречисленияСсылка.ХозяйственныеОперации - Характер операции по договору.
//
// Возвращаемое значение:
//	Булево - Истина, если договор является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионером(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСПоставщиком возвращает значение вида договоров, 
// которые используются при расчетах с поставщиками.
//
// Возвращаемое значение:
//	ПеречисленияСсылка.ХозяйственныеОперации - Значение вида договора.
//
Функция ПолучитьВидДоговораСПоставщиком() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;

КонецФункции // ПолучитьВидДоговораСПоставщиком()

// Функция ПолучитьВидДоговораСПокупателем возвращает значение вида договоров, 
// которые используются при расчетах с покупателями.
//
// Возвращаемое значение:
//	ПеречисленияСсылка.ХозяйственныеОперации - Значение вида договора.
//
Функция ПолучитьВидДоговораСПокупателем() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.РеализацияКлиенту;

КонецФункции // ПолучитьВидДоговораСПокупателем()

// Функция ПолучитьВидДоговораСКомиссионером возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами.
//
// Возвращаемое значение:
//	ПеречисленияСсылка.ХозяйственныеОперации - Значение вида договора.
//
Функция ПолучитьВидДоговораСКомиссионером() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

КонецФункции // ПолучитьВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСКомитентом возвращает значение вида договоров, 
// которые используются при расчетах с комитентами.
//
// Возвращаемое значение:
//	ПеречисленияСсылка.ХозяйственныеОперации - Значение вида договора.
//
Функция ПолучитьВидДоговораСКомитентом() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - Договор, реквизиты которого
//		требуется получить.
//
// Возвращаемое значение:
//  Структура:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ТипыДоговоров  (УП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		УчетАгентскогоНДС	 - Булево.
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров.
//		РасчетыВУсловныхЕдиницах - Булево.
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Контрагент,
																		|Организация,
																		|ХозяйственнаяОперация,
																		|УчетАгентскогоНДС,
																		|ВидАгентскогоДоговора");
																		
		СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",	РасчетыВУсловныхЕдиницах(ДоговорКонтрагента));
		СтруктураРеквизиты.Вставить("Владелец", 				СтруктураРеквизиты.Контрагент);
		СтруктураРеквизиты.Вставить("ВидДоговора", 				СтруктураРеквизиты.ХозяйственнаяОперация);
		СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",			Ложь);
		
	Иначе
		
		СтруктураРеквизиты = Новый Структура;
		СтруктураРеквизиты.Вставить("Ссылка",  					Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",		Справочники.Валюты.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("Владелец",					Справочники.Контрагенты.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("Организация",				Справочники.Организации.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ВидДоговора",				Перечисления.ХозяйственныеОперации.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("УчетАгентскогоНДС",		Ложь);
		СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",			Ложь);
		СтруктураРеквизиты.Вставить("ВидАгентскогоДоговора",	Неопределено);
		СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",	Ложь);
		
	КонецЕсли;
	
	СтруктураРеквизиты.Вставить("ТипЦен", Неопределено);
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка.
//
// Параметры:
//  ВладелецДоговора	-	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить.
//  ОрганизацияДоговора	-	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить.
//  СписокВидовДоговора	-	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ТипыДоговоров> 
//							Нужные виды договора.
//  СтруктураПараметров	-	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура.
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно.
//
// Возвращаемое значение:
//   Булево - Истина, если договор был установлен, иначе Ложь.
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Ссылка = &ОсновнойДоговорКонтрагента 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	Запрос.УстановитьПараметр("ОсновнойДоговорКонтрагента", ДоговорКонтрагента); // В УП у контрагентов нет реквизита ОсновнойДоговорКонтрагента.
	
	ИмяРеквизитаКонтрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
	 ИЛИ РеквизитыДоговора[ИмяРеквизитаКонтрагент] <> ВладелецДоговора
	 ИЛИ РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора Тогда
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

#КонецОбласти

#Область СвойстваНоменклатуры

// Функция возвращает структуру со свойствами номенклатуры.
//
// Параметры:
// 	Номенклатура - СправочникСсылка.Номенклатура
//	Параметры контекста - структура содержащая поля
//		Дата 				- обязательный
//		Организация 		- обязательный
//		Склад		 		- не обязательный
//		ТипЦен 			- не обязательный
//		ВалютаДокумента	- не обязательный
//		Курс	 			- не обязательный
//		Кратность			- не обязательный
//		СуммаВключаетНДС	- не обязательный
//		СтавкаНДС			- не обязательный (Если параметр передан, то будет использована переданная ставка, иначе ставка из номенклатуры).
//
// Возвращаемое значение:
//	- Структура:
//		Номенклатура		- СправочникСсылка.Номенклатура
//		Наименование		- Строка
//		СтавкаНДС			- ПеречислениеСсылка.СтавкиНДС
//		ЕдиницаИзмерения	- СправочникСсылка.КлассификаторЕдиницИзмерения (БП) или СправочникСсылка.ЕдиницыИзмерения (УП).
//		НоменклатурнаяГруппа- СправочникСсылка.НоменклатурныеГруппы (БП) или СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры (УП).
//		СтранаПроисхождения	- СправочникСсылка.СтраныМира (заполняется только в БП).
//		НомерГТД			- СправочникСсылка.НомераГТД (заполняется только в БП).
//		Код					- Строка
//		Артикул				- Строка
//		Услуга				- Булево
//		Цена				- Число
//		ЦенаВРознице		- Число (заполняется только в БП).
//		СчетаУчета			- Структура со счетами учета.
//		ОтражениеВУСН		- ПеречислениеСсылка.ОтражениеВУСН.
//		Комиссионный		- Булево
//		ДоходЕНВД			- Булево, признак того, что доход относится к ЕНВД.
//		Субконто			- Субконто учета дохода от реализации номенклатуры (Номенклатурная группа).
Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыКонтекста) Экспорт

	// Не используется в ERP.
	
	СведенияОНоменклатуре = Новый Структура();

	Возврат СведенияОНоменклатуре;

КонецФункции

// Функция возвращает Истина, если переданная номенклатура является услугой.
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура.
// 
// Возвращаемое значение:
//  Булево - Номенклатура является услугой.
Функция НоменклатураЯвляетсяУслугой(Номенклатура) Экспорт

	// Не используется в ERP.
	
	Возврат Ложь;

КонецФункции // НоменклатураЯвляетсяУслугой()

// Функция возвращает выражение на языке запросов для получения признака услуги 
// Параметры:
//  ПолеНоменклатура - Строка.
// 
// Возвращаемое значение:
//  Строка.
Функция ТекстЗапросаЭтоУслуга(ПолеНоменклатура) Экспорт

	// Не используется в ERP.
	
	Возврат "ЕСТЬNULL(ВЫРАЗИТЬ(" + ПолеНоменклатура + " КАК Справочник.Номенклатура).Услуга, ЛОЖЬ)";

КонецФункции // ТекстЗапросаЭтоУслуга

#КонецОбласти

#Область ИнформацияОНоменклатуре

// Функция возвращает сведения о ценах номенклатуры.
//
// Параметры:
//	СтруктураПараметров - Структура - Содержит ключи:
//		* Период - Дата - Дата, на которую получаются данные.
//		* ТипЦен - СправочникСсылка.ВидыЦен - Вид цены.
//		* Валюта - СправочникСсылка.Валюты - Валюта.
//		* Курс - Число - Курс валюты.
//		* Кратность - Число - Кратность валюты. 
//		* Номенклатура - Массив, СписокЗначений - Список номенклатуры.
//
// Возвращаемое значение:
//	Соответствие - Ключ - Номенклатура, Значение - Цена.
//
Функция ПодготовитьСоответствиеНоменклатураЦена(СтруктураПараметров) Экспорт
	
	Период       = СтруктураПараметров.Период;
	ТипЦен       = СтруктураПараметров.ТипЦен;
	Валюта       = СтруктураПараметров.Валюта;
	Курс         = СтруктураПараметров.Курс;
	Кратность    = СтруктураПараметров.Кратность;
	Номенклатура = СтруктураПараметров.Номенклатура;

	СоответствиеНоменклатураЦена = Новый Соответствие;
	
	Возврат СоответствиеНоменклатураЦена;

КонецФункции // ПодготовитьСоответствиеНоменклатураЦена()

// Получает сумму списания активов для заполнения печатных форм документов.
//
// Параметры:
//	МассивРегистраторов - Массив - Ссылки на документы, для которых рассчитываются суммы.
//	ДатаНач - Дата - Дата начала периода.
//	ДатаКон - Дата - Дата окончания периода.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Содержит колонки:
//		* Регистратор - ДокументСсылка.* - Документ-регистратор.
//		* Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//		* Количество - Число - Количество списанной номенклатуры.
//		* Сумма - Число - Стоимость списанной номенклатуры.
//
Функция ПолучитьСуммуСписанияАктивов(МассивРегистраторов, ДатаНач, ДатаКон) Экспорт
	
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Регистратор", 	Документы.ТипВсеСсылки());
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСуммСписания.Колонки.Добавить("Количество", 		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаСуммСписания.Колонки.Добавить("Сумма", 			ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	Запрос.УстановитьПараметр("СчетГТД", ПланыСчетов.Хозрасчетный.ГТД);

	МассивВидовСубконтоНоменклатураСклад = Новый Массив;
	МассивВидовСубконтоНоменклатураСклад.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	МассивВидовСубконтоНоменклатураСклад.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("МассивВидовСубконтоНоменклатураСклад", МассивВидовСубконтоНоменклатураСклад);

	// Количество выбираем из движений самого документа, стоимость - определяем среднюю за месяц по счету, номенклатуре, складу, подразделению.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт.УчетПоПодразделениям
	|			ТОГДА ХозрасчетныйДвиженияССубконто.ПодразделениеКт
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ХозрасчетныйДвиженияССубконто.Период,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйДвиженияССубконто.Период, МЕСЯЦ) КАК МесяцСписания,
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|			ТОГДА ИСТИНА
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|			ТОГДА ИСТИНА
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСубконтоСклад,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.Номенклатура)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.Номенклатура)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.Склады)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.Склады)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.Склады)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Склад,
	|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоПоДокументу,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК СуммаПоДокументу
	|ПОМЕСТИТЬ ВТ_ДанныеПоРегистраторам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор В (&МассивРегистраторов)
	|				И НЕ СчетКт = &СчетГТД
	|				И (ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|					ИЛИ ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|					ИЛИ ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СчетКт.УчетПоПодразделениям
	|			ТОГДА ХозрасчетныйДвиженияССубконто.ПодразделениеКт
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйДвиженияССубконто.Период,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйДвиженияССубконто.Период, МЕСЯЦ),
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|			ТОГДА ИСТИНА
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|			ТОГДА ИСТИНА
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.Номенклатура)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.Номенклатура)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.Склады)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК Справочник.Склады)
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК Справочник.Склады)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеПоРегистраторам.Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	ВТ_ДанныеПоРегистраторам КАК ВТ_ДанныеПоРегистраторам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_ДанныеПоРегистраторам.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеПоРегистраторам.СчетУчета,
	|	ВТ_ДанныеПоРегистраторам.ЕстьСубконтоСклад
	|ПОМЕСТИТЬ ВТ_СчетаУчета
	|ИЗ
	|	ВТ_ДанныеПоРегистраторам КАК ВТ_ДанныеПоРегистраторам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК МесяцСписания,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.УчетПоПодразделениям
	|			ТОГДА ХозрасчетныйОбороты.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
	|ПОМЕСТИТЬ ВТ_СписаноЗаМесяцНеСгруппировано
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			НАЧАЛОПЕРИОДА(&ДатаНач, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ДатаКон, МЕСЯЦ),
	|			МЕСЯЦ,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаУчета.СчетУчета
	|				ИЗ
	|					ВТ_СчетаУчета
	|				ГДЕ
	|					ВТ_СчетаУчета.ЕстьСубконтоСклад = ЛОЖЬ),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
	|			Субконто1 В
	|				(ВЫБРАТЬ
	|					ВТ_Номенклатура.Номенклатура
	|				ИЗ
	|					ВТ_Номенклатура),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.УчетПоПодразделениям
	|			ТОГДА ХозрасчетныйОбороты.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Номенклатура),
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Склады),
	|	ХозрасчетныйОбороты.СуммаОборотКт,
	|	ХозрасчетныйОбороты.КоличествоОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			НАЧАЛОПЕРИОДА(&ДатаНач, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ДатаКон, МЕСЯЦ),
	|			МЕСЯЦ,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаУчета.СчетУчета
	|				ИЗ
	|					ВТ_СчетаУчета
	|				ГДЕ
	|					ВТ_СчетаУчета.ЕстьСубконтоСклад = ИСТИНА),
	|			&МассивВидовСубконтоНоменклатураСклад,
	|			Субконто1 В
	|				(ВЫБРАТЬ
	|					ВТ_Номенклатура.Номенклатура
	|				ИЗ
	|					ВТ_Номенклатура),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписаноЗаМесяцНеСгруппировано.МесяцСписания,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Организация,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.СчетУчета,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Подразделение,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Номенклатура,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Склад,
	|	СУММА(ВТ_СписаноЗаМесяцНеСгруппировано.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ВТ_СписаноЗаМесяцНеСгруппировано.КоличествоОборотКт) КАК КоличествоОборотКт
	|ПОМЕСТИТЬ ВТ_СписаноЗаМесяц
	|ИЗ
	|	ВТ_СписаноЗаМесяцНеСгруппировано КАК ВТ_СписаноЗаМесяцНеСгруппировано
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СписаноЗаМесяцНеСгруппировано.МесяцСписания,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Организация,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.СчетУчета,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Подразделение,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Номенклатура,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Номенклатура,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.СчетУчета,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Подразделение,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Склад,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.МесяцСписания,
	|	ВТ_СписаноЗаМесяцНеСгруппировано.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеПоРегистраторам.Организация,
	|	ВТ_ДанныеПоРегистраторам.Период,
	|	ВТ_ДанныеПоРегистраторам.Регистратор,
	|	ВТ_ДанныеПоРегистраторам.МесяцСписания,
	|	ВТ_ДанныеПоРегистраторам.СчетУчета,
	|	ВТ_ДанныеПоРегистраторам.Подразделение,
	|	ВТ_ДанныеПоРегистраторам.Номенклатура,
	|	ВТ_ДанныеПоРегистраторам.Склад,
	|	ВТ_ДанныеПоРегистраторам.КоличествоПоДокументу,
	|	ВТ_ДанныеПоРегистраторам.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТ_СписаноЗаМесяц.КоличествоОборотКт, 0) КАК КоличествоСписаноЗаМесяц,
	|	ЕСТЬNULL(ВТ_СписаноЗаМесяц.СуммаОборотКт, 0) КАК СуммаСписаноЗаМесяц
	|ИЗ
	|	ВТ_ДанныеПоРегистраторам КАК ВТ_ДанныеПоРегистраторам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписаноЗаМесяц КАК ВТ_СписаноЗаМесяц
	|		ПО ВТ_ДанныеПоРегистраторам.Номенклатура = ВТ_СписаноЗаМесяц.Номенклатура
	|			И ВТ_ДанныеПоРегистраторам.СчетУчета = ВТ_СписаноЗаМесяц.СчетУчета
	|			И ВТ_ДанныеПоРегистраторам.Подразделение = ВТ_СписаноЗаМесяц.Подразделение
	|			И ВТ_ДанныеПоРегистраторам.Склад = ВТ_СписаноЗаМесяц.Склад
	|			И ВТ_ДанныеПоРегистраторам.МесяцСписания = ВТ_СписаноЗаМесяц.МесяцСписания
	|			И ВТ_ДанныеПоРегистраторам.Организация = ВТ_СписаноЗаМесяц.Организация
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		СуммаПоДокументу = 0;
	
		Если Выборка.КоличествоПоДокументу = Выборка.КоличествоСписаноЗаМесяц Тогда
			// Все количество за месяц было списано текущим документом, относим на него всю стоимость.
			СуммаПоДокументу = Выборка.СуммаСписаноЗаМесяц;
		
		ИначеЕсли Выборка.СуммаПоДокументу <> 0 Тогда
			// Проводки по списанию привязаны к самому документу, берем сумму из них.
			СуммаПоДокументу = Выборка.СуммаПоДокументу;

		ИначеЕсли Выборка.КоличествоСписаноЗаМесяц <> 0 Тогда
		
			СуммаПоДокументу = Окр(Выборка.КоличествоПоДокументу * Выборка.СуммаСписаноЗаМесяц / Выборка.КоличествоСписаноЗаМесяц, 2);
		
		КонецЕсли;
	
		Строка = ТаблицаСуммСписания.Добавить();
		Строка.Регистратор 	= Выборка.Регистратор;
		Строка.Номенклатура = Выборка.Номенклатура;
		Строка.Количество   = Выборка.КоличествоПоДокументу;
		Строка.Сумма        = СуммаПоДокументу;
		
	КонецЦикла;
	ТаблицаСуммСписания.Свернуть("Регистратор, Номенклатура","Количество, Сумма");
	
	Возврат  ТаблицаСуммСписания;

КонецФункции // ПолучитьСуммуСписанияАктивов()

#КонецОбласти

//-- НЕ УТ

#Область СвойстваПодразделения

// Функция возвращает ссылку на пустое подразделение.
//
// Возвращаемое значение:
//	СправочникСсылка.СтруктураПредприятия - пустая ссылка подразделения.
//
Функция ПустоеПодразделение() Экспорт

	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()

//++ НЕ УТ

// Функция возвращает Истина, если переданное подразделение может быть выбрано для 
// указанной организации.
//
// Параметры:
//	Подразделение - СправочникСсылка.СтруктураПредприятия - Проверяемое подразделение.
//	Организация - СправочникСсылка.Организации - Проверяемая организация.
//
// Возвращаемое значение:
//	Булево - Результат проверки.
//                         
Функция ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаВладелец = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
		Если ЗначениеЗаполнено(ИмяРеквизитаВладелец) Тогда
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаВладелец);
			Результат = (РеквизитыПодразделения[ИмяРеквизитаВладелец] = Организация);
		Иначе
			// Если для подразделения нет явно указанного владельца, то считаем, что любое подразделение может 
			// принадлежать любой организации.
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПодразделениеПринадлежитОрганизации()

// Функция возвращает организацию, соответствующую переданному подразделению.
// Если передан параметр ТекущаяВыбраннаяОрганизация и его значение не противоречит 
// соответствию подразделения и организации, то возвращает значение параметра ТекущаяВыбраннаяОрганизация.
//
// Параметры:
//	Подразделение - СправочникСсылка.СтруктураПредприятия - Проверяемое подразделение.
//	ТекущаяВыбраннаяОрганизация - СправочникСсылка.Организация - Проверяемая организация.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Найденная организация для подразделения.
//
Функция ОрганизацияПодразделения(Подразделение, ТекущаяВыбраннаяОрганизация = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
		// Если нет явно заданного владельца, то оставляем текущую организацию.
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
	Если ЗначениеЗаполнено(ТекущаяВыбраннаяОрганизация) 
		И РеквизитыПодразделения[ИмяРеквизитаОрганизации] = ТекущаяВыбраннаяОрганизация Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПодразделения[ИмяРеквизитаОрганизации]) Тогда
		Возврат РеквизитыПодразделения[ИмяРеквизитаОрганизации];
	Иначе
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;

КонецФункции // ОрганизацияПодразделения()

// Функция возвращает текст запроса для получения таблицы с колонками:
//
// 	Организация
//	Подразделение
//	РегистрацияВНалоговомОргане
//	ОбособленноеПодразделение - Булево.
//	КПП - Строка.
//
// Параметры:
//	ИмяПараметраОтбораПоОрганизации - Строка - Имя параметра в запроса для отбора по организации.
//										Если не задан, то отбор по организациям не устанавливается.
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы, в которую поместить результат запроса.
//							Если не задан, то в тексте запроса временная таблица не используется.
//
// Возвращаемое значение:
//	Строка - Текст запроса.
//	
Функция ТекстЗапросаРегистрацииПодразделенийВНалоговомОргане(ИмяПараметраОтбораПоОрганизации, ИмяВременнойТаблицы) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Подразделение,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Организация.ОбособленноеПодразделение, ЛОЖЬ) КАК ОбособленноеПодразделение,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Организация.КПП, """") КАК КПП
	|ПОМЕСТИТЬ ВТ_РегистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних КАК РегистрацииВНалоговомОргане
	|		ПО СтруктураПредприятия.Ссылка = РегистрацииВНалоговомОргане.Подразделение
	|";
	
	Если ЗначениеЗаполнено(ИмяПараметраОтбораПоОрганизации) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В(&" + ИмяПараметраОтбораПоОрганизации + ")
		|	ИЛИ (РегистрацииВНалоговомОргане.Организация ЕСТЬ NULL)
		|";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_РегистрацииВНалоговомОргане", ИмяВременнойТаблицы);
		ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация
		|";
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТ_РегистрацииВНалоговомОргане", "");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРегистрацииПодразделенийВНалоговомОргане()

// Функция строит текст запроса для получения полного наименования подразделения.
//
// Параметры:
//	ПолеПодразделение - Строка - Имя поля со ссылкой на подразделение.
//
// Возвращаемое значение:
//	Строка - Выражение для получения полного наименования подразделения.
// 
Функция ТекстЗапросаПолноеНаименованиеПодразделения(ПолеПодразделение) Экспорт

	Возврат ПолеПодразделение + ".Наименование";

КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область СвойстваОрганизации

// Функция возвращает значение головной организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Исходная организация.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Ссылка на головную организацию.
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	РеквизитГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Возврат ?(ЗначениеЗаполнено(РеквизитГоловнаяОрганизация), РеквизитГоловнаяОрганизация, Организация);
	
КонецФункции // ГоловнаяОрганизация()

//++ НЕ УТ

// Функция возвращает признак того, что организация является обособленным
// подразделением выделенным на отдельный баланс
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, которая может быть обособленным подразделением
// 
// Возвращаемое значение:
//  Булево - Истина, если запись справочника предназначена для учета операций филиала
//           (обособленного подразделения, выделенного на отдельный баланс)
//
Функция ОбособленноеПодразделение(Организация) Экспорт
	
	ЭтоОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение");
	
	Если ЭтоОбособленноеПодразделение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭтоОбособленноеПодразделение;
	
КонецФункции // ОбособленноеПодразделение()

// Формирует список головных организаций предприятия
//
// Возвращаемое значение:
//	СписокЗначений - Список головных организаций в справочнике.
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка,
	                      |	Организации.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
						  |ГДЕ
						  |	Организации.ГоловнаяОрганизация = Организации.Ссылка
						  | ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
						  |	И Организации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизаций.Действует)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

// Формирует список обособленных структурных подразделений организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется список.
//
// Возвращаемое значение:
//	СписокЗначений - Список обособленных подразделений организации, выделенных на отдельный баланс.
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|	И Организации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизаций.Действует)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты - Требуется для единообразия с БРУ и УП.
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчетаОрганизаций, СправочникСсылка.БанковскиеСчетаКонтрагентов - Основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо, Валюта);
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта);
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()

// Функция СтруктураОрганизации возвращает структуру с реквизитами организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Проверяемая организация.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Тип - Строка - Содержит значение "ОП", если организация является обособленным подразделением
//						 другой организации, или "Простая", если организация является самостоятельным юр.лицом.
//		* Организация - СписокЗначений - Список обособленных подразделений.
//		* ГоловнаяОрганизация - СписокЗначений - Ссылка на головную организацию.
//
Функция СтруктураОрганизации(Организация) Экспорт

	СписокОП = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Скопировать();
	ОрганизацияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"Ссылка");
	СписокОП.Добавить(ОрганизацияСсылка);

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация, ОбособленноеПодразделение");
	
	СписокГО = Новый СписокЗначений;
	СписокГО.Добавить(РеквизитыОрганизации.ГоловнаяОрганизация);
	
	Если РеквизитыОрганизации.ОбособленноеПодразделение Тогда
		ТипОрганизации = "ОП";
	Иначе
		ТипОрганизации = "Простая";
	КонецЕсли;
		
	СвойстваОрганизации = Новый Структура("Тип, Организация, ГоловнаяОрганизация", ТипОрганизации, СписокОП, СписокГО);
	
	Возврат СвойстваОрганизации;
	
КонецФункции // СтруктураОрганизации()

//-- НЕ УТ

// Возвращает перечень (массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// В перечень входят только те организации, данные по которым доступны текущему пользователю.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Исходная организация.
//
// Возвращаемое значение:
//	Массив - Головная организация и все ее обособленные подразделения, выделенные на отдельный баланс.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

КонецФункции

// Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов справочников, которые зависят от организации.
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Результат = Новый ОписаниеТипов();
	//++ НЕ УТ
	Результат = НастройкаСчетовУчетаСервер.ТипыСвязанныеСОрганизацией();
	//-- НЕ УТ
	Возврат Результат;
	
КонецФункции // ТипыСвязанныеСОрганизацией()

// Функция строит текст запроса для получения наименования организации для печатных форм.
//
// Параметры:
//	ПолеОрганизация - Строка - Выражение языка запросов для выбора ссылки на организацию.
//
// Возвращаемое значение:
//	Строка - Выражение для получения полного наименования организации.
//
Функция ТекстЗапросаВариантНаименованияОрганизацииДляПечатныхФорм(ПолеОрганизация) Экспорт

	Возврат СтрЗаменить("Организация.НаименованиеПолное",
						"Организация",
						ПолеОрганизация);

КонецФункции // ТекстЗапросаВариантНаименованияОрганизацииДляПечатныхФорм()

//++ НЕ УТ

// Функция возвращает ставку налога на прибыль.
// 
// Параметры:
//	СтруктураШапкиДокумента - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация.
//		* Дата - Дата - Дата, на которую получается ставка.
//	ИФНС - СправочникСсылка.РегистрацииВНалоговомОргане - Налоговый орган.
//	СтавкаФБ - Число - Возвращается доля ставки (%) налога в федеральный бюджет.
//	СтавкаРФ - Число - Возвращается доля ставки (%) налога в бюджет субъекта федерации.
//	СтавкаМестный- Число - Возвращается доля ставки (%) налога в местный бюджет.
//
// Возвращаемое значение:
//	Число - Суммарная ставка налога на прибыль.
//
Функция ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента, ИФНС = Неопределено, СтавкаФБ = 0, СтавкаРФ = 0, СтавкаМестный = 0) Экспорт

	СтавкаФБ = НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация);
	СтавкаРФ = НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(СтруктураШапкиДокумента.Дата,
		СтруктураШапкиДокумента.Организация,,, ИФНС);
	
	СтавкаНалога = СтавкаФБ + СтавкаРФ;
	
	Возврат СтавкаНалога;

КонецФункции // ПолучитьСтавкуНалогаНаПрибыль()

//-- НЕ УТ

#КонецОбласти

#Область СведенияОбОрганизацииИлиКонтрагенте

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Лицо, о котором собираются сведения.
//  Период - Дата - Дата, на которую выбираются сведения о ЮрФизЛице.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций, СправочникСсылка.БанковскиеСчетаКонтрагентов - счет, 
//					реквизиты которого выводятся.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, Период = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		 Период = ТекущаяДатаСеанса();
	КонецЕсли;	 

	Возврат ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, Период, Истина, БанковскийСчет);

КонецФункции // СведенияОЮрФизЛице()

// Функция возвращает ссылку на вид контактной информации EMAILКонтрагента.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - ссылка на вид контактной информации EMAILКонтрагента.
//
Функция ВидКонтактнойИнформацииEMAILКонтрагента() Экспорт
	
	Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	
КонецФункции

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры:
//  СписокСведений - СписокЗначений - Список значений со значениями параметров организации.
//   СписокСведений формируется функцией СведенияОЮрФизЛице.
//  Список         - Строка - Список запрашиваемых параметров организации.
//  СПрефиксом     - Булево - Признак выводить или нет префикс параметра организации.
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);
	
КонецФункции // ОписаниеОрганизации()

// Возвращает текстовое описание свидетельства о государственной регистрации в налоговой:
//  - налогоплательщик зарегистрирован до 01.01.2017 г.: серия, номер и дата выдачи свидетельства/уведомления о постановке на учет
//  - налогоплательщик зарегистрирован с 01.01.2017 г.: ОГРН и дата регистрации.
//
// Параметры:
//   РеквизитыОрганизации - Структура - см. НовыйРеквизитыКомпании() - Коллекция общепринятых реквизитов компании
//
// Возвращаемое значение:
//   Строка
Функция СвидетельствоОРегистрации(РеквизитыОрганизации) Экспорт
	
	ДатаРегистрации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыОрганизации, "ДатаРегистрации");
	ЮридическоеФизическоеЛицо = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыОрганизации, "ЮридическоеФизическоеЛицо");
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЭтоФизЛицо = Истина;
	Иначе
		ЭтоФизЛицо = Ложь;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации >= '20170101' Тогда
		// Выводим сведения из выписки из Единого государственного реестра налогоплательщиков
		// Письмо Минфина России от 27.04.2017 N 03-07-09/25676
		// Письмо ФНС России от 04.04.17 № ЕД-4-15/6283
		Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
			ДатаРегистрацииСтрокой = Формат(ДатаРегистрации, "ДЛФ=DD");
		Иначе
			ДатаРегистрацииСтрокой = НСтр("ru = '"" __ "" ______________ 20__ г.';
											|en = '"" __ "" ______________ 20__ г.'");
		КонецЕсли;
		
		Если ЭтоФизЛицо Тогда
			Результат = СтрШаблон(НСтр("ru = 'ОГРНИП %1, дата регистрации %2';
										|en = 'ОГРНИП %1, дата регистрации %2'"),
				СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыОрганизации, "ОГРН")),
				ДатаРегистрацииСтрокой);
		Иначе
			Результат = СтрШаблон(НСтр("ru = 'ОГРН %1, дата регистрации %2';
										|en = 'ОГРН %1, дата регистрации %2'"),
				СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыОрганизации, "ОГРН")),
				ДатаРегистрацииСтрокой);
		КонецЕсли;
	Иначе
		Результат = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(РеквизитыОрганизации, "Свидетельство,");
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаНеобходимостиПроведенияДокументов

//++ НЕ УТ

// Функция возвращает признак необходимости контроля отрицальных остатков товаров при списании.
//
// Возвращаемое значение:
//  Булево - Отключить контроль отрицательных остатков
Функция ОтключитьКонтрольОтрицательныхОстатков() Экспорт
	
	Возврат Ложь;
	
КонецФункции // ОтключитьКонтрольОтрицательныхОстатков()

// Функция возвращает 1, если ведется кадровый учет, иначе 0.
//
// Возвращаемое значение:
//	Число - Признак ведения кадрового учета.
//
Функция ВедетсяКадровыйУчет() Экспорт
	
	Возврат 0;

КонецФункции // ВедетсяКадровыйУчет()

// Процедура устанавливает настройки для ведения кадрового учета
//
// Параметры:
//	ВестиКадровыйУчет - Булево - Признак ведения кадрового учета.
//	УчетЗарплатыИКадровСредствамиБухгалтерии - Булево - Признак учета зарплаты в программе.
//
Процедура УстановитьНастройкиКадровогоУчета(ВестиКадровыйУчет, УчетЗарплатыИКадровСредствамиБухгалтерии) Экспорт

	// В БРУ ничего не делаем
	
КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает 1, если используется учет зарплаты ведется во внешней программе, иначе 0.
//
// Возвращаемое значение:
//	Число - Признак учета зарплаты и кадров во внешней программе.
//
Функция УчетЗарплатыИКадровВоВнешнейПрограмме() Экспорт
	
	Возврат ?(Константы.ИспользоватьНачислениеЗарплаты.Получить(), 0, 1);

КонецФункции // УчетЗарплатыИКадровВоВнешнейПрограмме()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево - Признак ведения учета зарплаты во внешней программе.
//
Процедура УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт

	// В БРУ ничего не делаем

КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает Истина, если используется учет зарплаты ведется сводно, иначе Ложь.
//
// Возвращаемое значение:
//	Булево - Признак ведения расчетов по зарплате без субконто работники.
//
Функция ВедетсяУчетРасчетовПоЗарплатеСводно() Экспорт
	
	БУ = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	ВидыСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БУ,"ВидыСубконто").Выгрузить();
	Возврат ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") <> Неопределено;

КонецФункции // ВедетсяУчетРасчетовПоЗарплатеСводно()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВедетсяУчетРасчетовПоЗарплатеСводно - Булево - Признак ведения расчетов по зарплате сводно.
//
Процедура УстановитьПараметрыУчетаРасчетовПоЗарплате(ВедетсяУчетРасчетовПоЗарплатеСводно) Экспорт

	// в БРУ ничего не выполняем.

КонецПроцедуры // УстановитьПараметрыУчетаРасчетовПоЗарплате()

// Функция возвращает Истина, если в конфигурации поддерживается отгрузка без перехода права собственности.
//
// Возвращаемое значение:
//  Булево - Поддерживается отгрузка без перехода права собственности
Функция ПоддерживаетсяОтгрузкаБезПереходаПраваСобственности() Экспорт

	Возврат Истина; 

КонецФункции // ПоддерживаетсяОтгрузкаБезПереходаПраваСобственности()

// Функция возвращает Истина, если в конфигурации ведется учет по валютам.
//
// Возвращаемое значение:
//	Булево - Признак использования валютного учета.
//
Функция ИспользоватьВалютныйУчет() Экспорт

	Возврат Истина;

КонецФункции // ИспользоватьВалютныйУчет()

//-- НЕ УТ

// Функция возвращает ИСТИНА, если в конфигурации поддерживается учет по подразделениями.
//
// Возвращаемое значение:
//	Булево - Признак ведения учета по подразделениям.
//
Функция ВестиУчетПоПодразделениям() Экспорт

	Возврат Истина;

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации поддерживается учет по договорам.
//
// Возвращаемое значение:
//	Булево - Признак учета по договорам.
//
Функция ВестиУчетПоДоговорам() Экспорт

	Возврат Истина;

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используются направления деятельности.
//
// Возвращаемое значение:
//	Булево - Истина, если направления деятельности используются.
//
Функция ИспользоватьНаправленияДеятельности() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат")
		И (ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности")
//++ НЕ УТ
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетВнеоборотныхАктивовПоНаправлениямДеятельности")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиПоКорреспонденции")
//-- НЕ УТ
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиРаздельно")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"));

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используется управленческая организация.
//
// Возвращаемое значение:
//	Булево - Признак использования управленческой организации.
//
Функция ИспользоватьУправленческуюОрганизацию() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");

КонецФункции

// Функция возвращает ИСТИНА, если документ считается проведенным.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.* - Ссылка на документ.
//
// Возвращаемое значение:
//	Булево - Истина, если документ проведен.
//
Функция ДокументПроведен(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	//++ НЕ УТ
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух") Тогда
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПометкаУдаления");
		Возврат НЕ РеквизитыДокумента.ПометкаУдаления;

	Иначе
	//-- НЕ УТ
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен");
		Возврат РеквизитыДокумента.Проведен;
	//++ НЕ УТ
	КонецЕсли;	
	//-- НЕ УТ	
	
КонецФункции // ДокументПроведен()

// Функция возвращает ИСТИНА, если в конфигурации используются подразделения.
//
// Возвращаемое значение:
//	Булево - Признак использования подразделений.
//
Функция ИспользоватьПодразделения() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации поддерживается формирование проводок
// по нескольким организациям одним документом.
//
// Возвращаемое значение:
//	Булево.
Функция ВозможныеПроводкиОдногоРегистратораПоНесколькимОрганизациям() Экспорт

	Возврат Ложь;

КонецФункции

// Функция возвращает признак использования одной номенклатурной группы.
//
// Возвращаемое значение:
//	Булево - Признак использования одной номенклатурной группы.
//
Функция ИспользоватьОднуНоменклатурнуюГруппу() Экспорт

	// Совместимость с БП.
	Возврат Ложь;

КонецФункции

// Функция возвращает признак использования в базе комиссионных схем в хозяйственной деятельности.
//
// Возвращаемое значение:
//	Булево - Истина, если комиссионные схемы используются.
//
Функция ИспользуютсяКомиссионныеСхемы() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах");

КонецФункции

#КонецОбласти

//++ НЕ УТ

#Область СчетаУчета

// Функция возвращает возможные счета учета расчетов с контрагентом.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой выполняется поиск.
//  Контрагент  - СправочникСсылка.Контрагенты - Контрагент, по которому выполняется поиск.
//  Договор     - СправочникСсылка.ДоговорыКонтрагентов - Договор, по которому выполняется поиск.
//
// Возвращаемое значение:
//  Структура - Структура, содержащая счета учета расчетов.
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач Договор) Экспорт

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	Результат = Новый Структура;

	Результат.Вставить("СчетРасчетов", 	ПустойСчет);
	Результат.Вставить("СчетАвансов", 	ПустойСчет);
	Результат.Вставить("СчетРасчетовПокупателя", 	ПустойСчет);
	Результат.Вставить("СчетАвансовПокупателя", 	ПустойСчет);
	Результат.Вставить("СчетРасчетовПоПретензиям", 	ПустойСчет);
	Результат.Вставить("СчетРасчетовСКомитентом", 	ПустойСчет);
	Результат.Вставить("СчетУчетаТары", 			ПустойСчет);
	Результат.Вставить("СчетУчетаТарыПокупателя", 	ПустойСчет);

	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(Договор);

	Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
	
		Результат.Вставить("СчетРасчетов", 	ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);		 	// 60.31
		Результат.Вставить("СчетАвансов", 	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ); 		// 60.32
		Результат.Вставить("СчетРасчетовПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ); 			// 62.31
		Результат.Вставить("СчетАвансовПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); 	// 62.32
		Результат.Вставить("СчетРасчетовПоПретензиям", 	ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ); 			// 76.32
		Результат.Вставить("СчетРасчетовСКомитентом", 	ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);// 76.39
		Результат.Вставить("СчетУчетаТары", 	ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);			// 76.35
		Результат.Вставить("СчетУчетаТарыПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);	// 76.36
	
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов)
		И РеквизитыДоговора.ВалютаВзаиморасчетов <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
	
		Результат.Вставить("СчетРасчетов", 	ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);		 	// 60.21
		Результат.Вставить("СчетАвансов", 	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); 		// 60.22
		Результат.Вставить("СчетРасчетовПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал); 			// 62.21
		Результат.Вставить("СчетАвансовПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); 	// 62.22
		Результат.Вставить("СчетРасчетовПоПретензиям", 	ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал); 			// 76.22
		Результат.Вставить("СчетРасчетовСКомитентом", 	ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал);	// 76.29
		Результат.Вставить("СчетУчетаТары", 	ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);				// 76.25
		Результат.Вставить("СчетУчетаТарыПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);		// 76.26
	
	Иначе

		Результат.Вставить("СчетРасчетов", 	ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);		 	// 60.01
		Результат.Вставить("СчетАвансов", 	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным); 	// 60.02
		Результат.Вставить("СчетРасчетовПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыСПокупателями); 		// 62.01
		Результат.Вставить("СчетАвансовПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); 	// 62.02
		Результат.Вставить("СчетРасчетовПоПретензиям", 	ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям); 			// 76.02
		Результат.Вставить("СчетРасчетовСКомитентом", 	ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);	// 76.09
		Результат.Вставить("СчетУчетаТары", 	ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);				// 76.05
		Результат.Вставить("СчетУчетаТарыПокупателя", 	ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);		// 76.06
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой определяются счета учета.
//  Склад - СправочникСсылка.Склады - Место хранения, по которому определяются счета учета.
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура, по которой определяются счета учета.
//  Дата - Дата - Дата, на которую определяются счета учета.
//  ОсобыйПорядокНалогообложения - Булево - Признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД).
//
// Возвращаемое значение:
//  Структура - Структура содержащая счета учета расчетов.
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено, Дата = Неопределено, ОсобыйПорядокНалогообложения = Ложь) Экспорт

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("СчетУчета", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаЯвляетсяЗабалансовым", Ложь);
	СтруктураВозврата.Вставить("СчетУчетаНДС", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаНДСПродажи", 	ПустойСчет);
	СтруктураВозврата.Вставить("СчетНДСТаможни", 		ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаДавСырья", 	ПустойСчет);
	СтруктураВозврата.Вставить("СчетПередачи", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаДоп", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетПередачиЗаб", 		ПустойСчет);
	СтруктураВозврата.Вставить("СчетДоходов", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетРасходов", 			ПустойСчет);
	СтруктураВозврата.Вставить("Субконто1", 			Неопределено);
	СтруктураВозврата.Вставить("Субконто2", 			Неопределено);
	СтруктураВозврата.Вставить("Субконто3", 			Неопределено);

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

// Функция возвращает счета учета по выбранному объекту строительства.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой выполняется поиск.
//  Объект      - СправочникСсылка.ОбъектыЭксплуатации - Объект строительства, по которому выполняется поиск.
//
// Возвращаемое значение:
//  Структура - структура, содержащая счета учета объекта строительства.
// 
Функция СчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	Результат = Новый Структура("СчетУчета, СчетУчетаНДС");

	Результат.СчетУчета 	= ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
	Результат.СчетУчетаНДС 	= ПланыСчетов.Хозрасчетный.НДСПриСтроительствеОсновныхСредств;

	Возврат Результат;

КонецФункции //СчетаУчетаОбъектовСтроительства()

// Функция возвращает субсчета 90, на которых учитывается выручка по ЕНВД.
// В других модулях необходимо использовать эту функцию из общего модуля БухгалтерскийУчетВызовСервераПовтИсп.
//
// Возвращаемое значение:
//	Массив - Счета выручки по деятельности, относящейся к ЕНВД.
//
Функция СчетаВыручкиЕНВД() Экспорт

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);

	Возврат МассивСчетов;

КонецФункции // СчетаВыручкиЕНВД()

// Функция возвращает субсчета 90, на которых учитывается выручка, кроме ЕНВД.
// В других модулях необходимо использовать эту функцию из общего модуля БухгалтерскийУчетВызовСервераПовтИсп.
//
// Возвращаемое значение:
//	Массив - Счета выручки по деятельности, не относящейся к ЕНВД.
//
Функция СчетаВыручкиНеЕНВД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета90_01", ПланыСчетов.Хозрасчетный.Выручка);
	Запрос.УстановитьПараметр("Счета90_01_ЕНВД", СчетаВыручкиЕНВД());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счета90_01)
	|	И НЕ Хозрасчетный.Ссылка В (&Счета90_01_ЕНВД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
		
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

// Функция возвращает субсчета 90, на которых учитывается расходы по ЕНВД.
// В других модулях необходимо использовать эту функцию из общего модуля БухгалтерскийУчетВызовСервераПовтИсп.
//
// Возвращаемое значение:
//	Массив - Содержит счета расходов ЕНВД.
//
Функция СчетаРасходовЕНВД() Экспорт

	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);           // 90.02.2
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);      // 90.07.2
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД); // 90.08.2

	Возврат Массив;

КонецФункции // СчетаРасходовЕНВД()

Функция ДокументЯвляетсяРазукомплектацией(СсылкаНаДокумент) Экспорт

	Возврат Ложь; 

КонецФункции

// Функция возвращает массив счетов, подлежащих переоценке.
//
// Возвращаемое значение:
//	Массив - Счета, подлежащие переоценке.
//
Функция СчетаПодлежащиеПереоценке() Экспорт
	
	// Валютные счета, подлежащие переоценке:
	// - Все балансовые валютные счета;
	// - Счета, переоцениваемые в особом порядке, исключаются.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции // СчетаПодлежащиеПереоценке()

// Функция возвращает Истина, если переданный счет является счетом капитализации
// расходов по объектам внеоборотных активов.
//
// Параметры:
//	Счет - ПланСчетовСсылка.Хозрасчетный - Проверяемый счет.
//
// Возвращаемое значение:
//	Булево - Истина, если счет предназначен для учета внеоборотных активов.
//
Функция ЭтоСчетКапитализацииРасходовПоВНА(Счет) Экспорт
	
	Результат = 
		(Счет = ПланыСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию
		ИЛИ Счет = ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков
		ИЛИ Счет = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования
		ИЛИ Счет = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств
		ИЛИ Счет = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов
		ИЛИ Счет = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР);
		
	Возврат Результат;
КонецФункции

// Установка типов значений субконто, связанных с именами реквизитов.
//
// Параметры:
//  СвязанныеСубконто  - Соответствие - ключ - имя реквизита, значение - описание типов связанных значений субконто.
//
Процедура УстановитьТипыСвязанныхСубконто(СвязанныеСубконто) Экспорт
	
	ТипыСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора();
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, Документы.ТипВсеСсылки().Типы());
	СвязанныеСубконто.Вставить("Контрагент", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("ДоговорКонтрагента", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("Номенклатура", ТипыСубконто);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТ

#Область НастройкиПользователей

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить.
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя.
//
// Возвращаемое значение:
//  Произвольный - Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;

	Если НастройкаВРег = ВРег("ОсновнаяОрганизация") Тогда
		Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	ИначеЕсли НастройкаВРег = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		ПустоеЗначение = ПустоеПодразделение();
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойСклад") Тогда
		ПустоеЗначение = Справочники.Склады.ПустаяСсылка();
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("РабочаяДата") Тогда
		// Для совместимости с предыдущими версиями.
		Возврат ОбщегоНазначения.РабочаяДатаПользователя(Пользователь);
	ИначеЕсли НастройкаВРег = ВРег("Подпись") Тогда
		ПустоеЗначение = НоваяПодпись();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, Пользователь);

	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);

КонецФункции // ПолучитьЗначениеПоУмолчанию()

//++ НЕ УТ

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - Вид настройки.
//  Значение     - Произвольный - Значение настройки.
//  Пользователь - СправочникСсылка.Пользователи - текущий пользователь программы, для которого устанавливается настройка.
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация")
		ИЛИ ВРег(Настройка) = ВРег("ОсновноеПодразделениеОрганизации")
		ИЛИ ВРег(Настройка) = ВРег("ОсновнойСклад") Тогда

		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, Пользователь);

	КонецЕсли;

КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

//-- НЕ УТ

// Анализирует результат формирования отчета: была ли зафиксирована проблема с итогами.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - куда выводится отчет.
//  РезультатВыполнения - Структура - см. БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет() .
//
Процедура ОбработатьРезультатПроверкиИтогов(Форма, РезультатВыполнения) Экспорт

КонецПроцедуры

#КонецОбласти

// Возвращает настройки учета для переданного счета плана счетов.
// Параметры:
//  Счет - ПланСчетовСсылка.Хозрасчетный - Счет, для которого получаются настройки.
// 
// Возвращаемое значение:
//  Структура - см. РеглУчетСервер.ПолучитьСвойстваСчета.
Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт
	
	Возврат РеглУчетСервер.ПолучитьСвойстваСчета(Счет);
	
КонецФункции

#Область СообщенияПользователю

// Процедура формирует сообщение пользователю при возникновении ошибок 
// в процессе проведения регламентированных операций.
//
// Параметры:
//	ТекстСообщения - Строка - Текст сообщения пользователю.
//	СсылкаНаОшибочныйОбъект - Произвольный - Ссылка на объект, содержащий ошибку.
//	Отказ - Булево - Признак отказа.
//	РегОперация - ДокументСсылка.РегламентнаяОперация - Документ, связанный с ошибкой.
//
Процедура СообщитьОбОшибкеРегОперацииСНавигацией(Знач ТекстСообщения, СсылкаНаОшибочныйОбъект = Неопределено, Отказ = Истина, РегОперация = Неопределено) Экспорт
	
	Отказ = Истина;
	Если ТипЗнч(СсылкаНаОшибочныйОбъект) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОшибочныйОбъект,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОбОшибкеРегОперацииСНавигацией()

#КонецОбласти

#Область ПервичныеДокументы

// Определяет в целом для сеанса работы, может ли потребоваться рассчитывать,
// заполнять и отображать пользователю суммы НУ в проводках.
// 
// Обращение к функции следует выполнять через кеш повтоно используемых значений -
// см. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// Она единообразно работает и с ПР/ВР, и с НУ.
// 
// Возвращаемое значение:
//  Булево - Истина, если может потребоваться использовать суммы НУ в проводках.
//
Функция ПользователюДоступныСуммыНУ() Экспорт
	
	Результат = Ложь;
	//++ НЕ УТ
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль";
	Результат = Не Запрос.Выполнить().Пустой();
	
	//-- НЕ УТ
	
	Возврат Результат;

КонецФункции

// Настраивает видимость полей НУ, ПР и ВР на форме
//
// Параметры:
//  ПоляНалогНаПрибыль - Соответствие - ключ = поле формы, в том числе - заголовки строк; значение = вид учета НУ/ПР/ВР
//  Период         - Дата - основной период набора записей
//  Организация    - СправочникСсылка.Организации - организация набора записей
//                 - Неопределено - организация набора записей не может быть определена
//  ВидИспользованияСумм - Строка - возможные значения см. ИспользоватьСуммыНалогНаПрибыль()
//  ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль - Булево - только для ERP, вывести суммы разниц, если организация ведет учет ПБУ 18/02 простым балансовым методом 
//
Процедура НастроитьВидимостьПолейНалоговогоУчетаИРазниц(ПоляНалогНаПрибыль, Период, Организация = Неопределено, ВидИспользованияСумм = "",
	ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль = Ложь) Экспорт
	
	ВидимостьПоУмолчанию = Ложь;
	
	Для Каждого Поле Из ПоляНалогНаПрибыль Цикл
		Поле.Ключ.Видимость = ВидимостьПоУмолчанию;
	КонецЦикла;
	
	//++ НЕ УТ
	
	Если НЕ ЗначениеЗаполнено(ВидИспользованияСумм) Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ВидИспользованияСумм = "НеИспользовать";
		Иначе
			ВидИспользованияСумм = ИспользоватьСуммыНалогНаПрибыль(Организация, Период);
		КонецЕсли;
	КонецЕсли;

	Для Каждого Поле Из ПоляНалогНаПрибыль Цикл

		Поле.Ключ.Видимость = ?(Поле.Значение = "НУ",
			БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ВидИспользованияСумм),
			БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм));
			
		//Принудительный вывод сумм разниц, по умолчанию скрыты
		Если ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль 
			И Поле.Значение <> "НУ" И ВидИспользованияСумм = "ПлательщикНалогаНаПрибыль" Тогда
		    Поле.Ключ.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ

// Определяет в контексте отдельных операций, отчетов и т.п., нужно ли рассчитывать,
// заполнять и отображать пользователю суммы разниц в проводках.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Период      - Дата - дата, на которую проверяется значение настройки;
//                если не заполнена, то проверяется наиболее поздняя
//  ДоступныйВидИспользованияСумм - Строка - максимально возможный.
//                                  См. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// 
// Возвращаемое значение:
//   Строка - варианты использования разниц. См. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
//
Функция ИспользоватьСуммыНалогНаПрибыль(Организация, Период, ДоступныйВидИспользованияСумм = "") Экспорт
	
	// Никакие суммы кроме БУ не нужны ни одной организации из базы согласно типу учета.
	Если Не НалоговыйУчет.ТребуетсяНалоговыйУчет() Тогда
		Возврат "НеИспользовать";
	КонецЕсли;
	
	Если ПустаяСтрока(ДоступныйВидИспользованияСумм) Тогда
		ДоступныйВидИспользованияСумм = БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль();
	КонецЕсли;
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ДоступныйВидИспользованияСумм) Тогда
		// Никакие суммы кроме БУ не нужны ни одной организации из базы согласно системе налогообложения.
		Возврат "НеИспользовать";
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) Тогда
		// Никакие суммы кроме БУ не нужны данной организации согласно ее системе налогообложения.
		Возврат "НеИспользовать";
	КонецЕсли;
	
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ДоступныйВидИспользованияСумм) Тогда
		// В базе нет ни одной организации, для которой требовалось бы учитывать ПР/ВР.
		Возврат "ПлательщикНалогаНаПрибыль";
	КонецЕсли;
	
	Если УчетнаяПолитика.ВедетсяУчетПостоянныхИВременныхРазниц(Организация, Период) Тогда
		// Нужно учитывать постоянные и временные разницы для данной организации.
		Возврат "ПоддержкаПБУ18";
	Иначе
		// Нужно отдельно учитывать суммы НУ для данной организации.
		Возврат "ПлательщикНалогаНаПрибыль";
	КонецЕсли;
	
КонецФункции

// Настраивает поля учета разниц в форме, отображающей набор записей регистра Хозрасчетный.
//
// Параметры:
//  ПоляНалогНаПрибыль - Соответствие - ключ = поле формы, в том числе - заголовки строк; значение = вид учета НУ/ПР/ВР
//  ПоляЗаголовков - Структура - поля формы, отображающие заголовки колонок, содержащих показатели НУ, ПР, ВР:
//                    * Дт - ПолеФормы, ГруппаФормы -
//                    * Кт - ПолеФормы, ГруппаФормы -
//  Период         - Дата - основной период набора записей
//  Организация    - СправочникСсылка.Организации - организация набора записей
//                 - Неопределено - организация набора записей не может быть определена
//  ВалютаРУ       - СправочникСсылка.Валюты - Валюта регл. учета
//  ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль - Булево - только для ERP, вывести суммы разниц, если организация ведет учет ПБУ 18/02 простым балансовым методом 
//
Процедура НастроитьПоляУчетаРазниц(ПоляНалогНаПрибыль, ПоляЗаголовков, Период, Организация = Неопределено, ВалютаРУ = Неопределено,
	ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ВидИспользованияСумм = "НеИспользовать";
	Иначе
		ВидИспользованияСумм = ИспользоватьСуммыНалогНаПрибыль(Организация, Период);
	КонецЕсли;
	
	НастроитьВидимостьПолейНалоговогоУчетаИРазниц(ПоляНалогНаПрибыль, Период, Организация, ВидИспользованияСумм,
		ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль);
	
	Если БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм) Тогда
		ШаблонЗаголовкаКолонокНалоговыйУчет = НСтр("ru = 'Сумма %1 (%2)';
													|en = 'Amount %1 (%2)'");
	Иначе
		ШаблонЗаголовкаКолонокНалоговыйУчет = НСтр("ru = 'Сумма НУ %1 (%2)';
													|en = 'Tax accounting amount %1 (%2)'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаРУ) Тогда
		ВалютаРУ = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	ПоляЗаголовков.Дт.Заголовок = СтрШаблон(ШаблонЗаголовкаКолонокНалоговыйУчет, НСтр("ru = 'Дт';
																						|en = 'Dr'"), ВалютаРУ);
	ПоляЗаголовков.Кт.Заголовок = СтрШаблон(ШаблонЗаголовкаКолонокНалоговыйУчет, НСтр("ru = 'Кт';
																						|en = 'Cr'"), ВалютаРУ);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяПодпись()
	
	Подпись = НСтр("ru = 'С уважением%1';
					|en = 'Yours faithfully%1'");
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АвторизованныйПользователь, "Наименование, Служебный");
	Если ДанныеПользователя.Служебный Тогда
		ПредставлениеПользователя = ".";
		
	Иначе
		ПредставлениеПользователя = ", " + ДанныеПользователя.Наименование + ".";
		
	КонецЕсли;
	
	Подпись = СтрШаблон(Подпись, ПредставлениеПользователя);
	
	Возврат Подпись;
	
КонецФункции

// Возвращает описание типов для суммового показателя.
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов для суммового показателя.
//
Функция ТипСумма() Экспорт
	
	Возврат РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля();
	
КонецФункции

#КонецОбласти
