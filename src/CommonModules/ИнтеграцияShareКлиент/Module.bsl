
#Область ПрограммныйИнтерфейс

// Открывает форму с ссылкой для скачивания публикуемого электронного документа.
// При открытии формы выполняется публикация электронного документа в сервис 1С:Share.
// Перед публикацией может быть выведена форма для выбора присоединенных файлов к публикуемому документу.
// Может вызываться из подключаемых команд.
// 
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка, СправочникСсылка - ссылка на формируемый электронный документ для скачивания.
//  ПараметрыВыполненияКоманды - Структура - дополнительные параметры команды.
//
Процедура ПоделитьсяДокументом(СсылкаНаДокумент, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	ОчиститьСообщения();
	Если СсылкаНаДокумент = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Команда не может быть выполнена для указанного объекта.';
								|en = 'Cannot run the command for the object.'",
			ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	КонецЕсли;
	
	ПараметрыОбъектаУчета = ИнтеграцияShareВызовСервера.ПараметрыОбъектаУчетаКПубликации(СсылкаНаДокумент);
	
	Если ПараметрыОбъектаУчета.ЯвляетсяГруппой Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данная функция недоступна для группы.';
										|en = 'This function is unavailable for the group.'",
			ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаКПубликации();
	ПараметрыДокумента.ЭлектронныйДокумент = СсылкаНаДокумент;
	ПараметрыДокумента.ФайлыДокумента      = ПараметрыОбъектаУчета.ДанныеФайлов;
	
	Если ПараметрыВыполненияКоманды = Неопределено Тогда
		ФормаВладельца = Неопределено;
	Иначе
		ФормаВладельца = ПараметрыВыполненияКоманды.Источник;
	КонецЕсли;
	
	ОткрытьФормуВыбораФайловДокументаКПубликации(ПараметрыДокумента, ФормаВладельца);
	
КонецПроцедуры

// Открывает форму для загрузки документа по ссылке из сервиса 1С:Share.
//
Процедура ОткрытьФормуЗагрузитьДокументПоСсылке() Экспорт
	
	ОткрытьФорму("Обработка.СервисShare.Форма.ЗагрузитьДокументПоСсылке");
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// Выполняется поиск короткой ссылки электронного документа при глобальном поиске.
//
// Параметры:
//  СтрокаПоиска          - Строка - введенная строка в поле глобального поиска.
//  ПланГлобальногоПоиска - ПланГлобальногоПоиска - виды поиска.
//
Процедура ПриГлобальномПоиске(СтрокаПоиска, ПланГлобальногоПоиска) Экспорт
	
	Если ЭтоДоменСервисаКороткихСсылокShare(СтрокаПоиска) Тогда
		ПланГлобальногоПоиска.Очистить();
		ПланГлобальногоПоиска.Добавить("ЗаполнитьРезультатГлобальногоПоискаДокумента", "ИнтеграцияShareКлиент", Ложь, Истина);
	КонецЕсли;

КонецПроцедуры

// Выполняется при выборе результата глобального поиска по короткой ссылке электронного документа.
//
// Параметры:
//  ЭлементРезультата    - ЭлементРезультатаГлобальногоПоиска - выбранная строка результата поиска.
//  СтандартнаяОбработка - Булево - признак обработки по умолчанию.
//
Процедура ПриВыбореРезультатаГлобальногоПоиска(ЭлементРезультата, СтандартнаяОбработка) Экспорт
	
	Если ЭлементРезультата.Описание = ИмяРезультатаГлобальногоПоискаПросмотрДокумента() Тогда
		ПерейтиПоНавигационнойСсылке(ЭлементРезультата.Значение);
		Возврат;
	ИначеЕсли ЭлементРезультата.Описание <> ИмяРезультатаГлобальногоПоискаЗагрузкиДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеДокумента = ЭлементРезультата.Значение;
	ИдентификаторДокументаСервиса = ДанныеДокумента.ИдентификаторЭлектронногоДокумента;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьЭлектронныйДокументПродолжение", ЭтотОбъект);
	
	ЗагрузитьЭлектронныйДокумент(Неопределено, УникальныйИдентификатор, ИдентификаторДокументаСервиса, Оповещение);
	
	ТекстСообщения = НСтр("ru = 'Загружается документ:';
							|en = 'Importing the document:'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ТекстПояснения = СтрШаблон("%1 от %2", ДанныеДокумента.ПредставлениеДокумента, ДанныеДокумента.НаименованиеОрганизации);
	ПоказатьОповещениеПользователя(ТекстСообщения, , ТекстПояснения, БиблиотекаКартинок.ДиалогИнформация);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПубликацияДокумента

Процедура ОпубликоватьЭлектронныйДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Статус") И Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыДокумента = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);

	Если Не (ЗначениеЗаполнено(ПараметрыДокумента) И ТипЗнч(ПараметрыДокумента) = Тип("Структура")) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПараметрыДокумента.РезультатПроверкиПакета;
	
	Если ЗначениеЗаполнено(ПараметрыДокумента.ДанныеОпубликованногоДокумента)
		И ЗначениеЗаполнено(ПараметрыДокумента.ДанныеОпубликованногоДокумента.СсылкаДляСкачиванияДокумента) Тогда
		ОткрытьФормуПоделитьсяДокументом(ПараметрыДокумента, ДополнительныеПараметры.ФормаВладельца);
	ИначеЕсли РезультатПроверки.ПревышенРазмерПакета Тогда
		Если ЗначениеЗаполнено(РезультатПроверки.ДанныеФайловКПубликации) Тогда
			ОткрытьФормуВыбораФайловДокументаКПубликации(ПараметрыДокумента, ДополнительныеПараметры.ФормаВладельца);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Размер электронного документа ""%1"" (%2 МБ)
				|превышает допустимый размер (%3 МБ)';
				|en = 'The size of the ""%1"" electronic document (%2 MB)
				|exceeds the limit (%3 MB).'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
				Строка(ПараметрыДокумента.ЭлектронныйДокумент),
				ИнтеграцияShareКлиентСервер.РазмерФайлаИзБайтовВМегабайты(РезультатПроверки.РазмерПакетаБезПрисоединенныхФайлов),
				ИнтеграцияShareКлиентСервер.РазмерФайлаИзБайтовВМегабайты(РезультатПроверки.МаксимальныйРазмерПакета));

			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборФайловДокументаКПубликации(РезультатВыбораФайловКПубликации, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбораФайловКПубликации) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаКПубликации();
	ПараметрыДокумента.ЭлектронныйДокумент     = ДополнительныеПараметры.ЭлектронныйДокумент;
	ПараметрыДокумента.ФайлыДокумента          = ДополнительныеПараметры.ФайлыДокумента;
	ПараметрыДокумента.РезультатПроверкиПакета = ИнтеграцияShareКлиентСервер.НовыйРезультатПроверкиПакета();
	ПараметрыДокумента.РезультатПроверкиПакета.ДанныеФайловКПубликации = РезультатВыбораФайловКПубликации;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	Оповещение = Новый ОписаниеОповещения("ОпубликоватьЭлектронныйДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОпубликоватьЭлектронныйДокумент(Неопределено, УникальныйИдентификатор, ПараметрыДокумента, Оповещение);
	
	ТекстСообщения = НСтр("ru = 'Формируется ссылка для скачивания:';
							|en = 'Generating the download link:'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ПоказатьОповещениеПользователя(ТекстСообщения, , ПараметрыДокумента.ЭлектронныйДокумент, БиблиотекаКартинок.ДиалогИнформация);
	
КонецПроцедуры
	
#КонецОбласти

#Область ЗагрузкаДокумента

// Параметры:
//  КороткаяСсылкаНаДокумент - Строка - ссылка для скачивания документа.
//
// Возвращаемое значение:
//  Булево - признак короткой ссылки сформированной в сервисе 1С:Share.
Функция ЭтоДоменСервисаКороткихСсылокShare(КороткаяСсылкаНаДокумент) Экспорт
	
	ДанныеРесурса = ОбщегоНазначенияКлиентСервер.СтруктураURI(КороткаяСсылкаНаДокумент);
	
	ИмяСервераКороткойСсылки = НРег(ДанныеРесурса.ИмяСервера);
	
	Возврат ИмяСервераКороткойСсылки = ИнтеграцияShareКлиентСервер.АдресСервиса()
		Или ИмяСервераКороткойСсылки = АдресСервисаНовый();
	
КонецФункции

// Заполняет результат глобального поиска.
// 
// Параметры:
//  СсылкаДляСкачивания     - Строка - ссылка на скачивание электронного документа. 
//  РезультатыПоиска        - РезультатГлобальногоПоиска - содержит результаты поиска.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ЗаполнитьРезультатГлобальногоПоискаДокумента(СсылкаДляСкачивания, РезультатыПоиска, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();
	РезультатыПоиска.Очистить();

	Отказ           = Ложь;
	ДанныеДокумента = Неопределено;
	ИнтеграцияShareВызовСервера.ЗагрузитьКраткиеДанныеДокументаПоПубличнойСсылке(СсылкаДляСкачивания, ДанныеДокумента, Отказ);

	Если Отказ Или ДанныеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) Тогда
		РезультатыПоиска.Добавить(ДанныеДокумента.ДокументУчета, ДанныеДокумента.ЗаголовокДокумента,
			БиблиотекаКартинок.ЗагрузитьShare);
	Иначе
		РезультатыПоиска.Добавить(ДанныеДокумента, ДанныеДокумента.ЗаголовокДокумента,
			БиблиотекаКартинок.ЗагрузитьShare, , ИмяРезультатаГлобальногоПоискаЗагрузкиДокумента());
	КонецЕсли;

КонецПроцедуры

// Загружает электронный документ из сервиса 1С:Share в информационную базу в фоне.
//
// Параметры:
//  ПубличнаяСсылка         - Строка - ссылка для скачивания электронного документа в сервисе 1С:Share.
//  ДополнительныеПараметры - Структура из см. НовоеОписаниеПараметровПроцедурыВыполненияВФоне
//
Процедура ЗагрузитьДанныеДокументаПоПубличнойСсылкеВФоне(Знач ПубличнаяСсылка, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовоеОписаниеПараметровПроцедурыВыполненияВФоне();
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = '1С:Share. Загрузка электронного документа по публичной ссылке.';
								|en = '1С:Share. Import an electronic document via a public link.'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ИмяПроцедуры        = ИнтеграцияShareКлиентСервер.ИмяПроцедурыЗагрузитьЭлектронныйДокументаПоПубличнойСсылкеИзСервиса();

	ДлительнаяОперация = ИнтеграцияShareВызовСервера.ДлительнаяОперацияВФоне(НаименованиеЗадания, ИмяПроцедуры,
		ДополнительныеПараметры.УникальныйИдентификатор, ПубличнаяСсылка);
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ДополнительныеПараметры.ВладелецФормы);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПараметрыОжидания) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ДополнительныеПараметры.ПараметрыОжидания);
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ДополнительныеПараметры.ОписаниеПриЗавершении, ПараметрыОжидания);

КонецПроцедуры

// Загружает электронный документ в объект учета прикладной базы в фоне.
//
// Параметры:
//  ДанныеДокумента         - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//  ДополнительныеПараметры - Структура из см. НовоеОписаниеПараметровПроцедурыВыполненияВФоне
//
Процедура ЗагрузитьЭлектронныйДокументВОбъектУчетаВФоне(Знач ДанныеДокумента, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовоеОписаниеПараметровПроцедурыВыполненияВФоне();
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = '1С:Share. Загрузка электронного документа в объект учета.';
								|en = '1С:Share. Import an electronic document to the accounting object.'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ИмяПроцедуры        = ИнтеграцияShareКлиентСервер.ИмяПроцедурыЗагрузитьЭлектронныйДокументВОбъектУчета();

	ДлительнаяОперация = ИнтеграцияShareВызовСервера.ДлительнаяОперацияВФоне(НаименованиеЗадания, ИмяПроцедуры,
		ДополнительныеПараметры.УникальныйИдентификатор, ДанныеДокумента);
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ДополнительныеПараметры.ВладелецФормы);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПараметрыОжидания) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОжидания, ДополнительныеПараметры.ПараметрыОжидания);
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ДополнительныеПараметры.ОписаниеПриЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Функция РезультатОперацииВФоне(Знач Результат) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Свойство("Статус") И Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Свойство("Сообщения") И Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Свойство("АдресРезультата") И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ОткрытьФормуСопоставленияНоменклатурыПриЗагрузкиДокумента(Знач ДанныеДокумента, Знач Оповещение) Экспорт

	Настройки  = Новый Структура("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(
		ДанныеДокумента.НоменклатураСопоставления, Настройки, Оповещение);

КонецПроцедуры

// Создает электронный документ в информационной базе
//
// Параметры:
//  ВладелецФормы           - ФормаКлиентскогоПриложения, Неопределено - владелец открываемой формы,
//                            которому будет отправлено оповещение о выборе.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор.
//  ДанныеДокумента         - См. ИнтеграцияShare.НовыеДанныеЭлектронногоДокументаДляЗагрузки
//  ОписаниеПриЗавершении   - ОписаниеОповещения - оповещение,
//                            которое необходимо вызвать после завершения метода.
//
Процедура СоздатьВУчетеЭлектронныйДокумент(Знач ВладелецФормы, Знач УникальныйИдентификатор,
	Знач ДанныеДокумента, Знач ОписаниеПриЗавершении = Неопределено) Экспорт
	
	НаименованиеЗадания = НСтр("ru = '1С:Share. Создание учетного документа.';
								|en = '1С:Share. Create an accounting document.'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ИмяПроцедуры = ИнтеграцияShareКлиентСервер.ИмяПроцедурыСоздатьВУчетеЭлектронныйДокумент();

	ДлительнаяОперация = ИнтеграцияShareВызовСервера.ДлительнаяОперацияВФоне(НаименованиеЗадания, ИмяПроцедуры,
		УникальныйИдентификатор, ДанныеДокумента);
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ВладелецФормы);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеПриЗавершении, ПараметрыОжидания);

КонецПроцедуры

// Переопределяет действия после загрузки документа по ссылке.
//
// Параметры:
//  ДанныеДокумента - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
Процедура ПослеЗагрузкиДокументаПоСсылке(Знач ДанныеДокумента) Экспорт
	
	ДанныеЗагруженногоДокумента = ИнтеграцияShareКлиентСервер.НовыеДанныеЗагруженногоДокумента();
	ЗаполнитьЗначенияСвойств(ДанныеЗагруженногоДокумента, ДанныеДокумента);
	ДанныеЗагруженногоДокумента.ОбъектУчета = ДанныеДокумента.ДокументУчета;

	ИнтеграцияShareКлиентПереопределяемый.ПослеЗагрузкиДокументаПоСсылке(ДанныеЗагруженногоДокумента);

КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Возвращаемое значение:
//  ВладелецФормы           - ФормаКлиентскогоПриложения
//                          - Неопределено - владелец открываемой формы, которому будет отправлено оповещение о выборе.
//  ОписаниеПриЗавершении   - ОписаниеОповещения
//                            Неопределено - оповещение, которое необходимо вызвать после завершения процедуры.
//  ПараметрыОжидания       - см. ДлительныеОперацииКлиент.ПараметрыОжидания, Неопределено
//  УникальныйИдентификатор - УникальныйИдентификатор
//                          - Неопределено - уникальный идентификатор формы, во временное хранилище которой 
//                                           необходимо поместить результат выполнения процедуры.
//
Функция НовоеОписаниеПараметровПроцедурыВыполненияВФоне() Экспорт
	
	ОписаниеПараметров = Новый Структура;
	ОписаниеПараметров.Вставить("ВладелецФормы");
	ОписаниеПараметров.Вставить("ОписаниеПриЗавершении");
	ОписаниеПараметров.Вставить("ПараметрыОжидания");
	ОписаниеПараметров.Вставить("УникальныйИдентификатор");
	
	Возврат ОписаниеПараметров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПубликацияДокумента

// Открывается форма для выбора файлов документов перед публикацией в сервис.
//
// Параметры:
//  ПараметрыДокумента - см. ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаКПубликации
//  ФормаВладельца - ФормаКлиентскогоПриложения
//
Процедура ОткрытьФормуВыбораФайловДокументаКПубликации(ПараметрыДокумента, ФормаВладельца)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайловДокументаКПубликации",
		ЭтотОбъект, Новый Структура("ЭлектронныйДокумент, ФормаВладельца, ФайлыДокумента",
			ПараметрыДокумента.ЭлектронныйДокумент, ФормаВладельца, ПараметрыДокумента.ФайлыДокумента));
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияShareКлиентПереопределяемый.ПриОткрытииФормыВыбораФайловДокументаКПубликации(
		ОписаниеОповещения, ПараметрыДокумента.ЭлектронныйДокумент, ПараметрыДокумента.РезультатПроверкиПакета,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыДокумента.ФайлыДокумента) Тогда
		// Нет присоединенных файлов для выбора к публикации.
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Массив);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СервисShare.Форма.ВыборФайловКПубликации", ПараметрыДокумента,,,,, ОписаниеОповещения);
	
КонецПроцедуры

// Открывает форму "Поделиться документом" для вывода ссылки на скачивание опубликованного электронного документа
// в сервисе 1С:Share. 
// 
// Параметры:
//  ПараметрыДокумента - см. ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаКПубликации
//  ФормаВладельца - ФормаКлиентскогоПриложения
//
Процедура ОткрытьФормуПоделитьсяДокументом(ПараметрыДокумента, ФормаВладельца)
	
	ОткрытьФорму("Обработка.СервисShare.Форма.ПоделитьсяДокументом",
		Новый Структура("ПараметрыДокумента", ПараметрыДокумента), ФормаВладельца);
	
КонецПроцедуры

Процедура ОпубликоватьЭлектронныйДокумент(Знач ВладелецФормы, Знач УникальныйИдентификатор,
	Знач ПараметрыДокумента, Знач ОписаниеПриЗавершении = Неопределено)
	
	НаименованиеЗадания = НСтр("ru = '1С:Share. Опубликовать электронный документ.';
								|en = '1С:Share. Publish an electronic document.'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ИмяПроцедуры        = ИнтеграцияShareКлиентСервер.ИмяПроцедурыОпубликоватьЭлектронныйДокумент();

	ДлительнаяОперация = ИнтеграцияShareВызовСервера.ДлительнаяОперацияВФоне(НаименованиеЗадания, ИмяПроцедуры,
		УникальныйИдентификатор, ПараметрыДокумента);
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ВладелецФормы);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеПриЗавершении, ПараметрыОжидания);

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДокумента

Функция АдресСервисаНовый()

	Возврат "sh.1c.ru";
	
КонецФункции

Функция ИмяРезультатаГлобальногоПоискаЗагрузкиДокумента()
	
	Возврат "ДокументДляЗагрузкиИзСервисаShare";
	
КонецФункции

Функция ИмяРезультатаГлобальногоПоискаПросмотрДокумента()
	
	Возврат "ДокументДляПросмотраИзСервисаShare";
	
КонецФункции

// Загружает электронный документ из сервиса 1С:Share в информационную базу
//
// Параметры:
//  ВладелецФормы                 - ФормаКлиентскогоПриложения, Неопределено - владелец открываемой формы,
//                                   которому будет отправлено оповещение о выборе.
//  УникальныйИдентификатор       - УникальныйИдентификатор - уникальный идентификатор.
//  ИдентификаторДокументаСервиса - Строка - идентификатор электронного документа в сервисе.
//  ОписаниеПриЗавершении         - ОписаниеОповещения - оповещение,
//                                   которое необходимо вызвать после завершения метода. 
//
Процедура ЗагрузитьЭлектронныйДокумент(Знач ВладелецФормы, Знач УникальныйИдентификатор,
	Знач ИдентификаторДокументаСервиса, Знач ОписаниеПриЗавершении = Неопределено)
	
	НаименованиеЗадания = НСтр("ru = '1С:Share. Загрузка электронного документа по идентификатору документа.';
								|en = '1С:Share. Import an electronic document by document ID.'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	ИмяПроцедуры        = ИнтеграцияShareКлиентСервер.ИмяПроцедурыЗагрузитьЭлектронныйДокументПоИдентификаторуДокумента();

	ДлительнаяОперация = ИнтеграцияShareВызовСервера.ДлительнаяОперацияВФоне(НаименованиеЗадания, ИмяПроцедуры,
		УникальныйИдентификатор, ИдентификаторДокументаСервиса);
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ВладелецФормы);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеПриЗавершении, ПараметрыОжидания);

КонецПроцедуры

Процедура ЗагрузитьЭлектронныйДокументПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДокумента = РезультатОперацииВФоне(Результат);

	Если ДанныеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияShareКлиентПереопределяемый.ПриЗагрузкеДокументаПоСсылке(ДанныеДокумента, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ДанныеЗагрузкиДокумента)
		И ЗначениеЗаполнено(ДанныеДокумента.ДанныеЗагрузкиДокумента.ОбъектУчета) Тогда
		ПоказатьЗначение(Неопределено, ДанныеДокумента.ДанныеЗагрузкиДокумента.ОбъектУчета);
		Возврат;
	КонецЕсли;
	
	ОписаниеПараметров = НовоеОписаниеПараметровПроцедурыВыполненияВФоне();
	ОписаниеПараметров.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	ОписаниеПараметров.ОписаниеПриЗавершении   = Новый ОписаниеОповещения("ЗагрузитьЭлектронныйДокументЗавершение",
		ЭтотОбъект, ДанныеДокумента);

	ЗагрузитьЭлектронныйДокументВОбъектУчетаВФоне(ДанныеДокумента, ОписаниеПараметров);
	
КонецПроцедуры

Процедура ЗагрузитьЭлектронныйДокументПослеСопоставления(СопоставлениеНоменклатуры, ДополнительныеПараметры) Экспорт
	
	Если СопоставлениеНоменклатуры = Неопределено И ДополнительныеПараметры.ЕстьФормаВладелец = Истина Тогда
		// В случае наличия формы владельца требуется вернуть пустой результат, чтобы изменить интерфейсы на форме.
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
		Возврат;
	ИначеЕсли СопоставлениеНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ДополнительныеПараметры.ДанныеДокумента);
	
КонецПроцедуры

Процедура ЗагрузитьЭлектронныйДокументЗавершение(Результат, Знач ДополнительныеПараметры) Экспорт
	
	ДанныеДокумента = РезультатОперацииВФоне(Результат);

	Если ДанныеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузитьЭлектронныйДокументЗавершение", ЭтотОбъект);
	
	Если ДанныеДокумента.ТребуетсяСопоставлениеНоменклатуры Тогда
		
		ДанныеДокумента.ТребуетсяСопоставлениеНоменклатуры = Ложь;

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеДокумента", ДанныеДокумента);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ЕстьФормаВладелец", Ложь);
		
		Оповещение= Новый ОписаниеОповещения("ЗагрузитьЭлектронныйДокументПослеСопоставления", ЭтотОбъект, ДополнительныеПараметры);

		ОткрытьФормуСопоставленияНоменклатурыПриЗагрузкиДокумента(ДанныеДокумента, Оповещение);
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ДокументУчета) Тогда
		ПослеЗагрузкиДокументаПоСсылке(ДанныеДокумента);
		ПоказатьЗначение(Неопределено, ДанныеДокумента.ДокументУчета);
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	СоздатьВУчетеЭлектронныйДокумент(Неопределено, УникальныйИдентификатор, ДанныеДокумента, ОповещениеПриЗавершении);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
