////////////////////////////////////////////////////////////////////////////////
// Подсистема "Статистика персонала".
// Процедуры и функции, предназначенные для форм статистической отчетности.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область БазовыйКонтракт

// П-4

Процедура ДобавитьПоказателиФормыП4_2013Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П0001002В1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П0001002А1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000202", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000203", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000204", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000205", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000206", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000208", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000209", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000210", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010000211", Истина, Ложь);
	
КонецПроцедуры

Процедура ДобавитьПоказателиФормыП4_2025Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001001000207", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001001000209", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001001000202", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001001000203", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001001000204", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001001000205", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001001000206", Истина, Ложь); 
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001002000201", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001002000203", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001002000207", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001002000208", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001002000209", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001002000210", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П001002000211", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	П0001002В1 = "";
	П0001002А1 = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	// Исключение данных обособленных подразделений
	ИсключитьДанныеОбособленныхПодразделений = Ложь;
	ИсключаемыеПодразделения = Новый Массив;
	
	Если ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений")
		И ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Истина Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.ОбособленноеПодразделение";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ИсключитьДанныеОбособленныхПодразделений = Истина;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ИсключаемыеПодразделения.Добавить(Выборка.Подразделение);
				
				Запрос.УстановитьПараметр("Родитель", Выборка.Подразделение);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ПодразделенияОрганизаций.Ссылка
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
					|ГДЕ
					|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)";
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ИсключаемыеПодразделения, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные по обособленному подразделению
	ОбособленноеПодразделение = Неопределено;
	ПодразделенияОбособленного = Новый Массив;
	
	Если ПараметрыОтчета.Свойство("ОбособленноеПодразделение")
		И ПараметрыОтчета.ОбособленноеПодразделение <> Неопределено Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.ОбособленноеПодразделение, "ОбособленноеПодразделение") Тогда
			
			ОбособленноеПодразделение = ПараметрыОтчета.ОбособленноеПодразделение;
			
			ПодразделенияОбособленного.Добавить(ОбособленноеПодразделение);
			
			Запрос.УстановитьПараметр("Родитель", ОбособленноеПодразделение);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)";
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ПодразделенияОбособленного, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.КодОКВЭД КАК КодОКВЭД,
		|	Организации.НаименованиеОКВЭД КАК НаименованиеОКВЭД
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		П0001002В1 = Выборка.КодОКВЭД;
		П0001002А1 = Выборка.НаименованиеОКВЭД;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоГода", 				НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", 		КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаУвольнения", "<>", "ДАТАВРЕМЯ(1,1,1)");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаПриема", "<=", КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	
	ТекущиеКадровыеДанные = "ТекущаяОрганизация,ДатаУвольнения";
	
	Если ИсключитьДанныеОбособленныхПодразделений
		Или ОбособленноеПодразделение <> Неопределено Тогда
		
		ТекущиеКадровыеДанные = ТекущиеКадровыеДанные + ",ТекущееПодразделение";
		
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, Ложь, Отборы, ТекущиеКадровыеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК КоличествоСотрудников
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL )
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		
		Запрос.УстановитьПараметр("ИсключаемыеПодразделения", ИсключаемыеПодразделения);
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ИсключаемыеПодразделения)";
		
	ИначеЕсли ОбособленноеПодразделение <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ПодразделенияОбособленного", ПодразделенияОбособленного);
		Запрос.Текст = Запрос.Текст + "
			|	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ПодразделенияОбособленного)";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	Иначе
		
		ЗаполнятьП010000205ИП010000206 = Ложь;
		
		Если КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) = КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			ЗаполнятьП010000205ИП010000206 = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах = ПараметрыДляСведенийОЧисленностиИВыплатах();
		
	ПараметрыСведенийОЧисленностиИВыплатах.Организация = ПараметрыОтчета.Организация;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключитьДанныеОбособленныхПодразделений = ИсключитьДанныеОбособленныхПодразделений;
	ПараметрыСведенийОЧисленностиИВыплатах.ПодразделенияОбособленного = ПодразделенияОбособленного;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключаемыеПодразделения = ИсключаемыеПодразделения;
	
	ОкончаниеИнтервала = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	Если НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета) = НачалоМесяца(ОкончаниеИнтервала) Тогда
		НачалоИнтервала = НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Иначе
		НачалоИнтервала = НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаНачала = НачалоИнтервала;
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаОкончания = ОкончаниеИнтервала;
		
	СведенияОЧисленностиИВыплатах = СведенияОЧисленностиИВыплатах();

	ЗаполнитьСведенияОЧисленностиИВыплатах(СведенияОЧисленностиИВыплатах, ПараметрыСведенийОЧисленностиИВыплатах);
	
	П010000202 = 0;
	П010000203 = 0;
	П010000204 = 0;
	Для Каждого СтрокаЧисленности Из СведенияОЧисленностиИВыплатах.СведенияОЧисленности Цикл
		П010000202 = П010000202 + СтрокаЧисленности.СреднесписочнаяЧисленностьСотрудников;
		П010000203 = П010000203 + СтрокаЧисленности.СреднесписочнаяЧисленностьВнешнихСовместителей;
		П010000204 = П010000204 + СтрокаЧисленности.СредняяЧисленностьДоговорников;
	КонецЦикла;
	
	П010000211 = 0;
	Для Каждого СтрокаВыплатСоциальногоХарактера Из СведенияОЧисленностиИВыплатах.СведенияОВыплатахСоциальногоХарактера Цикл
		П010000211 = П010000211 + СтрокаВыплатСоциальногоХарактера.ВыплатыСоциальногоХарактера;
	КонецЦикла;
	
	П010000205 = 0;
	П010000206 = 0;
	П010000208 = 0;
	П010000209 = 0;
	П0100002 = 0;
	
	Для Каждого СтрокаВыплат Из СведенияОЧисленностиИВыплатах.СведенияОВыплатах Цикл
		
		Если ЗаполнятьП010000205ИП010000206 Тогда
			П010000205 = П010000205 + СтрокаВыплат.ОтработаноЧасов;
			П010000206 = П010000206 + СтрокаВыплат.ОтработаноЧасовВнешнимиСовместителями;
		КонецЕсли;
		
		П010000208 = П010000208 + СтрокаВыплат.ФондНачисленнойЗаработнойПлаты;
		П010000209 = П010000209 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыСовместителей;
		П010000210 = П010000210 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыДоговорников;
				
	КонецЦикла;
	
	ПоляОтчета = Контейнер.ПолеТабличногоДокументаФормаОтчета;
	
	ПоляОтчета.П0001002В1 = П0001002В1;
	ПоляОтчета.П0001002А1 = П0001002А1;
	
	ПоляОтчета.П010000202 = Цел(П010000202);
	ПоляОтчета.П010000203 = Цел(П010000203 * 10) / 10;
	ПоляОтчета.П010000204 = Цел(П010000204 * 10) / 10;
	
	ПоляОтчета.П010000205 = П010000205;
	ПоляОтчета.П010000206 = П010000206;
	ПоляОтчета.П010000211 = П010000211;
	ПоляОтчета.П010000205 = П010000205;
	ПоляОтчета.П010000206 = П010000206;
	ПоляОтчета.П010000208 = П010000208;
	ПоляОтчета.П010000209 = П010000209;
	ПоляОтчета.П010000210 = П010000210;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	П0001002В1 = "";
	П0001002А1 = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	// Исключение данных обособленных подразделений
	ИсключитьДанныеОбособленныхПодразделений = Ложь;
	ИсключаемыеПодразделения = Новый Массив;
	
	Если ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений")
		И ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Истина Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.ОбособленноеПодразделение";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ИсключитьДанныеОбособленныхПодразделений = Истина;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ИсключаемыеПодразделения.Добавить(Выборка.Подразделение);
				
				Запрос.УстановитьПараметр("Родитель", Выборка.Подразделение);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ПодразделенияОрганизаций.Ссылка
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
					|ГДЕ
					|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)";
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ИсключаемыеПодразделения, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные по обособленному подразделению
	ОбособленноеПодразделение = Неопределено;
	ПодразделенияОбособленного = Новый Массив;
	
	Если ПараметрыОтчета.Свойство("ОбособленноеПодразделение")
		И ПараметрыОтчета.ОбособленноеПодразделение <> Неопределено Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.ОбособленноеПодразделение, "ОбособленноеПодразделение") Тогда
			
			ОбособленноеПодразделение = ПараметрыОтчета.ОбособленноеПодразделение;
			
			ПодразделенияОбособленного.Добавить(ОбособленноеПодразделение);
			
			Запрос.УстановитьПараметр("Родитель", ОбособленноеПодразделение);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)";
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ПодразделенияОбособленного, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.КодОКВЭД2 КАК КодОКВЭД,
		|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		П0001002В1 = Выборка.КодОКВЭД;
		П0001002А1 = Выборка.НаименованиеОКВЭД;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоГода", 				НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", 		КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаУвольнения", "<>", "ДАТАВРЕМЯ(1,1,1)");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаПриема", "<=", КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	
	ТекущиеКадровыеДанные = "ТекущаяОрганизация,КоличествоСтавок";
	
	Если ИсключитьДанныеОбособленныхПодразделений
		Или ОбособленноеПодразделение <> Неопределено Тогда
		
		ТекущиеКадровыеДанные = ТекущиеКадровыеДанные + ",ТекущееПодразделение";
		
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, Ложь, Отборы, ТекущиеКадровыеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ * ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок,0)) КАК КоличествоСотрудников
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL)";
	
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		
		Запрос.УстановитьПараметр("ИсключаемыеПодразделения", ИсключаемыеПодразделения);
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ИсключаемыеПодразделения)";
		
	ИначеЕсли ОбособленноеПодразделение <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ПодразделенияОбособленного", ПодразделенияОбособленного);
		Запрос.Текст = Запрос.Текст + "
			|	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ПодразделенияОбособленного)";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	Иначе
		
		ЗаполнятьП010000205ИП010000206 = Ложь;
		ЗаполнятьП010000211 = Ложь;
		
		Если КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) = КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			ЗаполнятьП010000205ИП010000206 = Истина;
			ЗаполнятьП010000211 = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах = ПараметрыДляСведенийОЧисленностиИВыплатах();
		
	ПараметрыСведенийОЧисленностиИВыплатах.Организация = ПараметрыОтчета.Организация;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключитьДанныеОбособленныхПодразделений = ИсключитьДанныеОбособленныхПодразделений;
	ПараметрыСведенийОЧисленностиИВыплатах.ПодразделенияОбособленного = ПодразделенияОбособленного;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключаемыеПодразделения = ИсключаемыеПодразделения;
	
	ОкончаниеИнтервала = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	Если НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета) = НачалоМесяца(ОкончаниеИнтервала) Тогда
		НачалоИнтервала = НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Иначе
		НачалоИнтервала = НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаНачала = НачалоИнтервала;
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаОкончания = ОкончаниеИнтервала;

	СведенияОЧисленностиИВыплатах = СведенияОЧисленностиИВыплатах();

	ЗаполнитьСведенияОЧисленностиИВыплатах(СведенияОЧисленностиИВыплатах, ПараметрыСведенийОЧисленностиИВыплатах);

	П010000202 = 0;
	П010000203 = 0;
	П010000204 = 0;
	Для Каждого СтрокаЧисленности Из СведенияОЧисленностиИВыплатах.СведенияОЧисленности Цикл
		П010000202 = П010000202 + СтрокаЧисленности.СреднесписочнаяЧисленностьСотрудников;
		П010000203 = П010000203 + СтрокаЧисленности.СреднесписочнаяЧисленностьВнешнихСовместителей;
		П010000204 = П010000204 + СтрокаЧисленности.СредняяЧисленностьДоговорников;
	КонецЦикла;
	
	Если ЗаполнятьП010000211 Тогда
		П010000211 = 0;
		Для Каждого СтрокаВыплатСоциальногоХарактера Из СведенияОЧисленностиИВыплатах.СведенияОВыплатахСоциальногоХарактера Цикл
			П010000211 = П010000211 + СтрокаВыплатСоциальногоХарактера.ВыплатыСоциальногоХарактера;
		КонецЦикла;
	КонецЕсли;
	
	П010000205 = 0;
	П010000206 = 0;
	П010000208 = 0;
	П010000209 = 0;
	П010000210 = 0;
	
	Для Каждого СтрокаВыплат Из СведенияОЧисленностиИВыплатах.СведенияОВыплатах Цикл
		
		Если ЗаполнятьП010000205ИП010000206 Тогда
			П010000205 = П010000205 + СтрокаВыплат.ОтработаноЧасов;
			П010000206 = П010000206 + СтрокаВыплат.ОтработаноЧасовВнешнимиСовместителями;
		КонецЕсли;
		
		П010000208 = П010000208 + СтрокаВыплат.ФондНачисленнойЗаработнойПлаты;
		П010000209 = П010000209 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыВнешнихСовместителей;
		П010000210 = П010000210 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыДоговорников;
		
	КонецЦикла;
	
	Попытка
	
		ПоляОтчета = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		
		ПоляОтчета.П0001002В1 = П0001002В1;
		ПоляОтчета.П0001002А1 = П0001002А1;
		
		ПоляОтчета.П010000202 = Цел(П010000202 * 10) / 10;
		ПоляОтчета.П010000203 = Цел(П010000203 * 10) / 10;
		ПоляОтчета.П010000204 = Цел(П010000204 * 10) / 10;
		ПоляОтчета.П010000205 = П010000205;
		ПоляОтчета.П010000206 = П010000206;
		ПоляОтчета.П010000211 = П010000211;
		ПоляОтчета.П010000205 = П010000205;
		ПоляОтчета.П010000206 = П010000206;
		ПоляОтчета.П010000208 = П010000208;
		ПоляОтчета.П010000209 = П010000209;
		ПоляОтчета.П010000210 = П010000210;
			
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1';
																						|en = 'Report filling procedure is outdated, it is recommended that you update configuration.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.';
												|en = 'Report is not filled in.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4_2022Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	П0001002В1 = "";
	П0001002А1 = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	// Исключение данных обособленных подразделений
	ИсключитьДанныеОбособленныхПодразделений = Ложь;
	ИсключаемыеПодразделения = Новый Массив;
	
	Если ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений")
		И ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Истина Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.ОбособленноеПодразделение";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ИсключитьДанныеОбособленныхПодразделений = Истина;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ИсключаемыеПодразделения.Добавить(Выборка.Подразделение);
				
				Запрос.УстановитьПараметр("Родитель", Выборка.Подразделение);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ПодразделенияОрганизаций.Ссылка
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
					|ГДЕ
					|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)";
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ИсключаемыеПодразделения, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные по обособленному подразделению
	ОбособленноеПодразделение = Неопределено;
	ПодразделенияОбособленного = Новый Массив;
	
	Если ПараметрыОтчета.Свойство("ОбособленноеПодразделение")
		И ПараметрыОтчета.ОбособленноеПодразделение <> Неопределено Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.ОбособленноеПодразделение, "ОбособленноеПодразделение") Тогда
			
			ОбособленноеПодразделение = ПараметрыОтчета.ОбособленноеПодразделение;
			
			ПодразделенияОбособленного.Добавить(ОбособленноеПодразделение);
			
			Запрос.УстановитьПараметр("Родитель", ОбособленноеПодразделение);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)";
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ПодразделенияОбособленного, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.КодОКВЭД2 КАК КодОКВЭД,
		|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		П0001002В1 = Выборка.КодОКВЭД;
		П0001002А1 = Выборка.НаименованиеОКВЭД;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоГода", 				НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", 		КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаУвольнения", "<>", "ДАТАВРЕМЯ(1,1,1)");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаПриема", "<=", КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	
	ТекущиеКадровыеДанные = "ТекущаяОрганизация,КоличествоСтавок";
	
	Если ИсключитьДанныеОбособленныхПодразделений
		Или ОбособленноеПодразделение <> Неопределено Тогда
		
		ТекущиеКадровыеДанные = ТекущиеКадровыеДанные + ",ТекущееПодразделение";
		
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, Ложь, Отборы, ТекущиеКадровыеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ * ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок,0)) КАК КоличествоСотрудников
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL)";
	
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		
		Запрос.УстановитьПараметр("ИсключаемыеПодразделения", ИсключаемыеПодразделения);
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ИсключаемыеПодразделения)";
		
	ИначеЕсли ОбособленноеПодразделение <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ПодразделенияОбособленного", ПодразделенияОбособленного);
		Запрос.Текст = Запрос.Текст + "
			|	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ПодразделенияОбособленного)";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах = ПараметрыДляСведенийОЧисленностиИВыплатах();
		
	ПараметрыСведенийОЧисленностиИВыплатах.Организация = ПараметрыОтчета.Организация;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключитьДанныеОбособленныхПодразделений = ИсключитьДанныеОбособленныхПодразделений;
	ПараметрыСведенийОЧисленностиИВыплатах.ПодразделенияОбособленного = ПодразделенияОбособленного;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключаемыеПодразделения = ИсключаемыеПодразделения;
	ПараметрыСведенийОЧисленностиИВыплатах.ЧасыСНачалаГода = Ложь;
	
	ОкончаниеИнтервала = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	Если НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета) = НачалоМесяца(ОкончаниеИнтервала) Тогда
		НачалоИнтервала = НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Иначе
		НачалоИнтервала = НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаНачала = НачалоИнтервала;
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаОкончания = ОкончаниеИнтервала;

	СведенияОЧисленностиИВыплатах = СведенияОЧисленностиИВыплатах();

	ЗаполнитьСведенияОЧисленностиИВыплатах(СведенияОЧисленностиИВыплатах, ПараметрыСведенийОЧисленностиИВыплатах);

	П010000202 = 0;
	П010000203 = 0;
	П010000204 = 0;
	Для Каждого СтрокаЧисленности Из СведенияОЧисленностиИВыплатах.СведенияОЧисленности Цикл
		П010000202 = П010000202 + СтрокаЧисленности.СреднесписочнаяЧисленностьСотрудников;
		П010000203 = П010000203 + СтрокаЧисленности.СреднесписочнаяЧисленностьВнешнихСовместителей;
		П010000204 = П010000204 + СтрокаЧисленности.СредняяЧисленностьДоговорников;
	КонецЦикла;
	
	П010000211 = 0;
	Для Каждого СтрокаВыплатСоциальногоХарактера Из СведенияОЧисленностиИВыплатах.СведенияОВыплатахСоциальногоХарактера Цикл
		П010000211 = П010000211 + СтрокаВыплатСоциальногоХарактера.ВыплатыСоциальногоХарактера;
	КонецЦикла;
	
	П010000205 = 0;
	П010000206 = 0;
	П010000208 = 0;
	П010000209 = 0;
	П010000210 = 0;
	
	Для Каждого СтрокаВыплат Из СведенияОЧисленностиИВыплатах.СведенияОВыплатах Цикл
		
		П010000205 = П010000205 + СтрокаВыплат.ОтработаноЧасов;
		П010000206 = П010000206 + СтрокаВыплат.ОтработаноЧасовВнешнимиСовместителями;
	
		П010000208 = П010000208 + СтрокаВыплат.ФондНачисленнойЗаработнойПлаты;
		П010000209 = П010000209 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыВнешнихСовместителей;
		П010000210 = П010000210 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыДоговорников;
		
	КонецЦикла;
	
	Попытка
	
		ПоляОтчета = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		
		ПоляОтчета.П0001002В1 = П0001002В1;
		ПоляОтчета.П0001002А1 = П0001002А1;
		
		ПоляОтчета.П010000202 = Цел(П010000202 * 10) / 10;
		ПоляОтчета.П010000203 = Цел(П010000203 * 10) / 10;
		ПоляОтчета.П010000204 = Цел(П010000204 * 10) / 10;
		ПоляОтчета.П010000205 = П010000205;
		ПоляОтчета.П010000206 = П010000206;
		ПоляОтчета.П010000211 = П010000211;
		ПоляОтчета.П010000205 = П010000205;
		ПоляОтчета.П010000206 = П010000206;
		ПоляОтчета.П010000208 = П010000208;
		ПоляОтчета.П010000209 = П010000209;
		ПоляОтчета.П010000210 = П010000210;
			
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1';
																						|en = 'Report filling procedure is outdated, it is recommended that you update configuration.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.';
												|en = 'Report is not filled in.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4_2023Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	П0001002В1 = "";
	П0001002А1 = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Если РегистрацииВОрганеСтатистикиВызовСервера.ВыбранаРегистрацияРеспондента(ПараметрыОтчета) Тогда
		КритерииОтбораТОСП = КритерииОтбораПоРегистрацииРеспондента(ПараметрыОтчета);
		ИсключитьДанныеОбособленныхПодразделений = КритерииОтбораТОСП.ИсключаемыеПодразделения.Количество() > 0;
		ИсключаемыеПодразделения = КритерииОтбораТОСП.ИсключаемыеПодразделения;
		ВключаемыеПодразделения = КритерииОтбораТОСП.ВключаемыеПодразделения;
		ЭтоОбособленноеПодразделение = ВключаемыеПодразделения.Количество() > 0;
	Иначе
		ОбособленноеПодразделение = Неопределено;
		ЭтоОбособленноеПодразделение = ПараметрыОтчета.Свойство("ОбособленноеПодразделение", ОбособленноеПодразделение);
		КритерииОтбораТОСП = КритерииОтбораПоОбособленномуПодразделению(ОбособленноеПодразделение, ПараметрыОтчета);
		ИсключитьДанныеОбособленныхПодразделений = КритерииОтбораТОСП.ИсключаемыеПодразделения.Количество() > 0;
		ИсключаемыеПодразделения = КритерииОтбораТОСП.ИсключаемыеПодразделения;
		ВключаемыеПодразделения = КритерииОтбораТОСП.ВключаемыеПодразделения;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.КодОКВЭД2 КАК КодОКВЭД,
		|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		П0001002В1 = Выборка.КодОКВЭД;
		П0001002А1 = Выборка.НаименованиеОКВЭД;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоГода", 				НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", 		КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаУвольнения", "<>", "ДАТАВРЕМЯ(1,1,1)");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаПриема", "<=", КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	
	ТекущиеКадровыеДанные = "ТекущаяОрганизация,КоличествоСтавок";
	
	Если ИсключитьДанныеОбособленныхПодразделений Или ЭтоОбособленноеПодразделение Тогда
		ТекущиеКадровыеДанные = ТекущиеКадровыеДанные + ",ТекущееПодразделение";
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, Ложь, Отборы, ТекущиеКадровыеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ * ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок,0)) КАК КоличествоСотрудников
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL)";
	
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		
		Запрос.УстановитьПараметр("ИсключаемыеПодразделения", ИсключаемыеПодразделения);
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ИсключаемыеПодразделения)";
		
	ИначеЕсли ЭтоОбособленноеПодразделение Тогда
		
		Запрос.УстановитьПараметр("ВключаемыеПодразделения", ВключаемыеПодразделения);
		Запрос.Текст = Запрос.Текст + "
			|	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ВключаемыеПодразделения)";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах = ПараметрыДляСведенийОЧисленностиИВыплатах();
		
	ПараметрыСведенийОЧисленностиИВыплатах.Организация = ПараметрыОтчета.Организация;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключитьДанныеОбособленныхПодразделений = ИсключитьДанныеОбособленныхПодразделений;
	ПараметрыСведенийОЧисленностиИВыплатах.ПодразделенияОбособленного = ВключаемыеПодразделения;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключаемыеПодразделения = ИсключаемыеПодразделения;
	ПараметрыСведенийОЧисленностиИВыплатах.ЧасыСНачалаГода = Ложь;
	
	ОкончаниеИнтервала = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	Если НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета) = НачалоМесяца(ОкончаниеИнтервала) Тогда
		НачалоИнтервала = НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Иначе
		НачалоИнтервала = НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаНачала = НачалоИнтервала;
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаОкончания = ОкончаниеИнтервала;

	СведенияОЧисленностиИВыплатах = СведенияОЧисленностиИВыплатах(2);

	ЗаполнитьСведенияОЧисленностиИВыплатах(СведенияОЧисленностиИВыплатах, ПараметрыСведенийОЧисленностиИВыплатах);

	П010000202 = 0;
	П010000203 = 0;
	П010000204 = 0;
	Для Каждого СтрокаЧисленности Из СведенияОЧисленностиИВыплатах.СведенияОЧисленности Цикл
		П010000202 = П010000202 + СтрокаЧисленности.СреднесписочнаяЧисленностьСотрудников;
		П010000203 = П010000203 + СтрокаЧисленности.СреднесписочнаяЧисленностьВнешнихСовместителей;
		П010000204 = П010000204 + СтрокаЧисленности.СредняяЧисленностьДоговорников;
	КонецЦикла;
	
	П010000211 = 0;
	Для Каждого СтрокаВыплатСоциальногоХарактера Из СведенияОЧисленностиИВыплатах.СведенияОВыплатахСоциальногоХарактера Цикл
		П010000211 = П010000211 + СтрокаВыплатСоциальногоХарактера.ВыплатыСоциальногоХарактера;
	КонецЦикла;
	
	П010000205 = 0;
	П010000206 = 0;
	П010000208 = 0;
	П010000209 = 0;
	П010000210 = 0;
	
	Для Каждого СтрокаВыплат Из СведенияОЧисленностиИВыплатах.СведенияОВыплатах Цикл
		
		П010000205 = П010000205 + СтрокаВыплат.ОтработаноЧасов;
		П010000206 = П010000206 + СтрокаВыплат.ОтработаноЧасовВнешнимиСовместителями;
	
		П010000208 = П010000208 + СтрокаВыплат.ФондНачисленнойЗаработнойПлаты;
		П010000209 = П010000209 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыВнешнихСовместителей;
		П010000210 = П010000210 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыДоговорников;
		
	КонецЦикла;
	
	Попытка
	
		ПоляОтчета = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		
		ПоляОтчета.П0001002В1 = П0001002В1;
		ПоляОтчета.П0001002А1 = П0001002А1;
		
		ПоляОтчета.П010000202 = П010000202;
		ПоляОтчета.П010000203 = П010000203;
		ПоляОтчета.П010000204 = П010000204;
		ПоляОтчета.П010000205 = П010000205;
		ПоляОтчета.П010000206 = П010000206;
		ПоляОтчета.П010000211 = П010000211;
		ПоляОтчета.П010000205 = П010000205;
		ПоляОтчета.П010000206 = П010000206;
		ПоляОтчета.П010000208 = П010000208;
		ПоляОтчета.П010000209 = П010000209;
		ПоляОтчета.П010000210 = П010000210;
			
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1';
																						|en = 'Report filling procedure is outdated, it is recommended that you update configuration.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.';
												|en = 'Report is not filled in.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4_2025Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	П001001000207 = "";
	П001001000209 = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Если РегистрацииВОрганеСтатистикиВызовСервера.ВыбранаРегистрацияРеспондента(ПараметрыОтчета) Тогда
		КритерииОтбораТОСП = КритерииОтбораПоРегистрацииРеспондента(ПараметрыОтчета);
		ИсключитьДанныеОбособленныхПодразделений = КритерииОтбораТОСП.ИсключаемыеПодразделения.Количество() > 0;
		ИсключаемыеПодразделения = КритерииОтбораТОСП.ИсключаемыеПодразделения;
		ВключаемыеПодразделения = КритерииОтбораТОСП.ВключаемыеПодразделения;
		ЭтоОбособленноеПодразделение = ВключаемыеПодразделения.Количество() > 0;
	Иначе
		ОбособленноеПодразделение = Неопределено;
		ЭтоОбособленноеПодразделение = ПараметрыОтчета.Свойство("ОбособленноеПодразделение", ОбособленноеПодразделение);
		КритерииОтбораТОСП = КритерииОтбораПоОбособленномуПодразделению(ОбособленноеПодразделение, ПараметрыОтчета);
		ИсключитьДанныеОбособленныхПодразделений = КритерииОтбораТОСП.ИсключаемыеПодразделения.Количество() > 0;
		ИсключаемыеПодразделения = КритерииОтбораТОСП.ИсключаемыеПодразделения;
		ВключаемыеПодразделения = КритерииОтбораТОСП.ВключаемыеПодразделения;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.КодОКВЭД2 КАК КодОКВЭД,
		|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		П001001000209 = Выборка.КодОКВЭД;
		П001001000207 = Выборка.НаименованиеОКВЭД;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоГода", 				НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", 		КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаУвольнения", "<>", "ДАТАВРЕМЯ(1,1,1)");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаПриема", "<=", КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	
	ТекущиеКадровыеДанные = "ТекущаяОрганизация,КоличествоСтавок";
	
	Если ИсключитьДанныеОбособленныхПодразделений Или ЭтоОбособленноеПодразделение Тогда
		ТекущиеКадровыеДанные = ТекущиеКадровыеДанные + ",ТекущееПодразделение";
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, Ложь, Отборы, ТекущиеКадровыеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ * ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок,0)) КАК КоличествоСотрудников
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL)";
	
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		
		Запрос.УстановитьПараметр("ИсключаемыеПодразделения", ИсключаемыеПодразделения);
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ИсключаемыеПодразделения)";
		
	ИначеЕсли ЭтоОбособленноеПодразделение Тогда
		
		Запрос.УстановитьПараметр("ВключаемыеПодразделения", ВключаемыеПодразделения);
		Запрос.Текст = Запрос.Текст + "
			|	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ВключаемыеПодразделения)";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах = ПараметрыДляСведенийОЧисленностиИВыплатах();
		
	ПараметрыСведенийОЧисленностиИВыплатах.Организация = ПараметрыОтчета.Организация;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключитьДанныеОбособленныхПодразделений = ИсключитьДанныеОбособленныхПодразделений;
	ПараметрыСведенийОЧисленностиИВыплатах.ПодразделенияОбособленного = ВключаемыеПодразделения;
	ПараметрыСведенийОЧисленностиИВыплатах.ИсключаемыеПодразделения = ИсключаемыеПодразделения;
	ПараметрыСведенийОЧисленностиИВыплатах.ЧасыСНачалаГода = Ложь;
	
	ОкончаниеИнтервала = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	Если НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета) = НачалоМесяца(ОкончаниеИнтервала) Тогда
		НачалоИнтервала = НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Иначе
		НачалоИнтервала = НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаНачала = НачалоИнтервала;
	ПараметрыСведенийОЧисленностиИВыплатах.ДатаОкончания = ОкончаниеИнтервала;

	СведенияОЧисленностиИВыплатах = СведенияОЧисленностиИВыплатах(2);

	ЗаполнитьСведенияОЧисленностиИВыплатах(СведенияОЧисленностиИВыплатах, ПараметрыСведенийОЧисленностиИВыплатах);

	П001001000202 = 0;
	П001001000203 = 0;
	П001001000204 = 0;
	Для Каждого СтрокаЧисленности Из СведенияОЧисленностиИВыплатах.СведенияОЧисленности Цикл
		П001001000202 = П001001000202 + СтрокаЧисленности.СреднесписочнаяЧисленностьСотрудников;
		П001001000203 = П001001000203 + СтрокаЧисленности.СреднесписочнаяЧисленностьВнешнихСовместителей;
		П001001000204 = П001001000204 + СтрокаЧисленности.СредняяЧисленностьДоговорников;
	КонецЦикла;
	
	П001002000211 = 0;
	Для Каждого СтрокаВыплатСоциальногоХарактера Из СведенияОЧисленностиИВыплатах.СведенияОВыплатахСоциальногоХарактера Цикл
		П001002000211 = П001002000211 + СтрокаВыплатСоциальногоХарактера.ВыплатыСоциальногоХарактера;
	КонецЦикла;
	
	П001001000205 = 0;
	П001001000206 = 0;
	П001002000208 = 0;
	П001002000209 = 0;
	П001002000210 = 0;
	Для Каждого СтрокаВыплат Из СведенияОЧисленностиИВыплатах.СведенияОВыплатах Цикл
		
		П001001000205 = П001001000205 + СтрокаВыплат.ОтработаноЧасов;
		П001001000206 = П001001000206 + СтрокаВыплат.ОтработаноЧасовВнешнимиСовместителями;
	
		П001002000208 = П001002000208 + СтрокаВыплат.ФондНачисленнойЗаработнойПлаты;
		П001002000209 = П001002000209 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыВнешнихСовместителей;
		П001002000210 = П001002000210 + СтрокаВыплат.ФондНачисленнойЗаработнойПлатыДоговорников;
		
	КонецЦикла;
	
	Попытка
	
		ПоляОтчета1 = Контейнер.ПолеТабличногоДокументаФормаОтчета_ДанныеДопСтрок1[0];
		
		ПоляОтчета1.П001001000207 = П001001000207;
		ПоляОтчета1.П001001000209 = П001001000209;
		ПоляОтчета1.П001001000202 = П001001000202;
		ПоляОтчета1.П001001000203 = П001001000203;
		ПоляОтчета1.П001001000204 = П001001000204;
		ПоляОтчета1.П001001000205 = П001001000205;
		ПоляОтчета1.П001001000206 = П001001000206;
		
		ПоляОтчета2 = Контейнер.ПолеТабличногоДокументаФормаОтчета_ДанныеДопСтрок2[0];
		
		ПоляОтчета2.П001002000201 = П001001000207;
		ПоляОтчета2.П001002000203 = П001001000209;
		ПоляОтчета2.П001002000208 = П001002000208;
		ПоляОтчета2.П001002000209 = П001002000209;
		ПоляОтчета2.П001002000210 = П001002000210;
		ПоляОтчета2.П001002000211 = П001002000211;
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1';
																						|en = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.';
												|en = 'Отчет не заполнен.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

// П-4 (НЗ)

Процедура ДобавитьПоказателиФормыП4НЗ_2015Кв1(ПоказателиОтчета) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4НЗ_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
КонецПроцедуры

Процедура ДобавитьПоказателиФормыП4НЗ_2021Кв1(ПоказателиОтчета) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4НЗ_2021Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
КонецПроцедуры

Процедура ДобавитьПоказателиФормыП4НЗ_2022Кв1(ПоказателиОтчета) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4НЗ_2022Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыП4НЗ_2023Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЧисленностиИВыплат

// Заполняет переданную структуру сведениями о численности и выплатах сотрудников
//
// Параметры:
//  СведенияОЧисленностиИВыплатах                - см. СведенияОЧисленностиИВыплатах()
//  ПараметрыДляСведенийОЧисленностиИВыплатах    - см. ПараметрыДляСведенийОЧисленностиИВыплатах()
//
Процедура ЗаполнитьСведенияОЧисленностиИВыплатах(СведенияОЧисленностиИВыплатах, Знач ПараметрыДляСведенийОЧисленностиИВыплатах)
	
	ПараметрыЧисленности = ПараметрыДляСведенийОЧисленности();
	ЗаполнитьЗначенияСвойств(ПараметрыЧисленности, ПараметрыДляСведенийОЧисленностиИВыплатах);
	ЗаполнитьСведенияОЧисленности(СведенияОЧисленностиИВыплатах.СведенияОЧисленности, ПараметрыЧисленности);
	
	ПараметрыВыплат = ПараметрыДляСведенийОВыплатах();
	ЗаполнитьЗначенияСвойств(ПараметрыВыплат, ПараметрыДляСведенийОЧисленностиИВыплатах);
	ЗаполнитьСведенияОВыплатах(СведенияОЧисленностиИВыплатах.СведенияОВыплатах, 
		СведенияОЧисленностиИВыплатах.СведенияОВыплатахСоциальногоХарактера, ПараметрыВыплат);
	
КонецПроцедуры

// Заполняет переданные таблицы значений сведениями о социальных и обычных выплатах сотрудников
//
// Параметры:
//  СведенияОВыплатах                        - см. СведенияОВыплатах()
//  СведенияОВыплатахСоциальногоХарактера    - см. СведенияОВыплатахСоциальногоХарактера()
//  ПараметрыДляСведенийОВыплатах            - см. ПараметрыДляСведенийОВыплатах()
//
Процедура ЗаполнитьСведенияОВыплатах(СведенияОВыплатах, СведенияОВыплатахСоциальногоХарактера, Знач ПараметрыДляСведенийОВыплатах)
	
	РезультатВыплат = ДанныеВыплат(ПараметрыДляСведенийОВыплатах);
	
	СведенияОСоциальныхВыплатах = РезультатВыплат[0].Выбрать();
	Пока СведенияОСоциальныхВыплатах.Следующий() Цикл
		НоваяСтрока = СведенияОВыплатахСоциальногоХарактера.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СведенияОСоциальныхВыплатах);
	КонецЦикла;
		
	СведенияОЗаработнойПлате = РезультатВыплат[1].Выбрать();
	Пока СведенияОЗаработнойПлате.Следующий() Цикл
		НоваяСтрока = СведенияОВыплатах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СведенияОЗаработнойПлате);
	КонецЦикла;
	
	Если Не ПараметрыДляСведенийОВыплатах.ПоПодразделениям Тогда
		СведенияОВыплатахСоциальногоХарактера.Свернуть("Организация",
			СписокКолонокДляСуммированияПоказателей(СведенияОВыплатахСоциальногоХарактера.Колонки));
		СведенияОВыплатах.Свернуть("Организация",
			СписокКолонокДляСуммированияПоказателей(СведенияОВыплатах.Колонки));
	КонецЕсли;
	
КонецПроцедуры

// См. СтатистикаПерсонала.ЗаполнитьСведенияОЧисленности.
Процедура ЗаполнитьСведенияОЧисленности(СведенияОЧисленности, Знач ПараметрыДляСведенийОЧисленности) Экспорт
	
	РезультатЧисленности = ДанныеЧисленности(ПараметрыДляСведенийОЧисленности);
	СведенияОЧисленностиРаботников = РезультатЧисленности.Выбрать();
	Пока СведенияОЧисленностиРаботников.Следующий() Цикл
		НоваяСтрока = СведенияОЧисленности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СведенияОЧисленностиРаботников);
	КонецЦикла;
	
	// Если группировка по подразделениям не требуется, то ТЗ будет свернута по организации, числовые показатели суммируются.
	Если Не ПараметрыДляСведенийОЧисленности.ПоПодразделениям Тогда
		СведенияОЧисленности.Свернуть("Организация",СписокКолонокДляСуммированияПоказателей(СведенияОЧисленности.Колонки));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для СведенияОЧисленностиИВыплатах
// 
// Возвращаемое значение:
//   Структура - Содержит ключи:
//      * Организация                                - СправочникСсылка.Организации - организация для получения сведений.
//      * ДатаНачала                                 - Дата - дата начала отчетного периода.
//      * ДатаКонца                                  - Дата - дата окончания отчетного периода.
//      * ИсключитьДанныеОбособленныхПодразделений   - Булево - признак исключения сведений по обособленным подразделениям организации.
//      * ИсключаемыеПодразделения                   - Массив - массив обособленных подразделений, данные по которым требуется исключить из расчета.
//                                                     Имеет смысл, если отчет заполняется по организации без обособленных подразделений
//                                                     (ИсключитьДанныеОбособленныхПодразделений = Истина)
//      * ПодразделенияОбособленного                 - Массив - массив обособленных подразделений, данные по которым включаются в расчет.
//                                                     Имеет смысл, если отчет заполняется по обособленному подразделению.
//                                                     (ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Ложь).
//      * ОтбиратьПоГоловнойОрганизации              - Булево - если Истина, то отбор по головной организации.
//      * ДелитьНа1000                               - Булево - признак деления денежных показателей на 1000.
//      * ПоПодразделениям                           - Булево - если Истина, то данные вернутся сгруппированными по подразделениям, 
//                                                     если Ложь, то будут свернуты по организации.
//
Функция ПараметрыДляСведенийОЧисленностиИВыплатах()
	ПараметрыДляПолученияЧисленностиИВыплат = ПараметрыДляСведенийОЧисленности();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		ПараметрыДляПолученияЧисленностиИВыплат,
		ПараметрыДляСведенийОВыплатах(),
		Истина);
		
	Возврат ПараметрыДляПолученияЧисленностиИВыплат;
КонецФункции

// Возвращает структуру параметров для СведенияОВыплатах
// 
// Возвращаемое значение:
//   Структура - Содержит ключи:
//      * Организация                                - СправочникСсылка.Организации - организация для получения сведений.
//      * ДатаНачала                                 - Дата - дата начала отчетного периода.
//      * ДатаКонца                                  - Дата - дата окончания отчетного периода.
//      * ИсключитьДанныеОбособленныхПодразделений   - Булево - признак исключения сведений по обособленным подразделениям организации.
//      * ИсключаемыеПодразделения                   - Массив - массив обособленных подразделений, данные по которым требуется исключить из расчета.
//                                                     Имеет смысл, если отчет заполняется по организации без обособленных подразделений
//                                                     (ИсключитьДанныеОбособленныхПодразделений = Истина)
//      * ПодразделенияОбособленного                 - Массив - массив обособленных подразделений, данные по которым включаются в расчет.
//                                                     Имеет смысл, если отчет заполняется по обособленному подразделению.
//                                                     (ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Ложь).
//      * ОтбиратьПоГоловнойОрганизации              - Булево - если Истина, то отбор по головной организации.
//      * ДелитьНа1000                               - Булево - признак деления денежных показателей на 1000.
//      * ПоПодразделениям                           - Булево - если Истина, то данные вернутся сгруппированными по подразделениям, 
//                                                     если Ложь, то будут свернуты по организации.
//
Функция ПараметрыДляСведенийОВыплатах()

	ПараметрыДляПолученияВыплат = Новый Структура("Организация, ДатаНачала, ДатаОкончания");
	ПараметрыДляПолученияВыплат.Вставить("ИсключитьДанныеОбособленныхПодразделений", Ложь);
	ПараметрыДляПолученияВыплат.Вставить("ПодразделенияОбособленного", Новый Массив);
	ПараметрыДляПолученияВыплат.Вставить("ИсключаемыеПодразделения", Новый Массив);
	ПараметрыДляПолученияВыплат.Вставить("ПоГоловнойОрганизации", Ложь);
	ПараметрыДляПолученияВыплат.Вставить("ДелитьНа1000", Ложь);
	ПараметрыДляПолученияВыплат.Вставить("ПоПодразделениям", Ложь);
	ПараметрыДляПолученияВыплат.Вставить("ЧасыСНачалаГода", Истина);
	
	Возврат ПараметрыДляПолученияВыплат;
	
КонецФункции

// Возвращает структуру параметров для СведенияОЧисленности
// 
// Возвращаемое значение:
//   Структура - Содержит ключи:
//      * Организация                                - СправочникСсылка.Организации - организация для получения сведений.
//      * ДатаНачала                                 - Дата - дата начала отчетного периода.
//      * ДатаКонца                                  - Дата - дата окончания отчетного периода.
//      * ИсключитьДанныеОбособленныхПодразделений   - Булево - признак исключения сведений по обособленным подразделениям организации.
//      * ИсключаемыеПодразделения                   - Массив - массив обособленных подразделений, данные по которым требуется исключить из расчета.
//                                                     Имеет смысл, если отчет заполняется по организации без обособленных подразделений
//                                                     (ИсключитьДанныеОбособленныхПодразделений = Истина)
//      * ПодразделенияОбособленного                 - Массив - массив обособленных подразделений, данные по которым включаются в расчет.
//                                                     Имеет смысл, если отчет заполняется по обособленному подразделению.
//                                                     (ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Ложь).
//      * ОтбиратьПоГоловнойОрганизации              - Булево - если Истина, то отбор по головной организации.
//      * ПоПодразделениям                           - Булево - если Истина, то данные вернутся сгруппированными по подразделениям, 
//                                                     если Ложь, то будут свернуты по организации.
//
Функция ПараметрыДляСведенийОЧисленности() Экспорт
	
	ПараметрыДляПолученияЧисленности = Новый Структура("Организация, ДатаНачала, ДатаОкончания");
	ПараметрыДляПолученияЧисленности.Вставить("ИсключитьДанныеОбособленныхПодразделений", Ложь);
	ПараметрыДляПолученияЧисленности.Вставить("ПодразделенияОбособленного",               Новый Массив);
	ПараметрыДляПолученияЧисленности.Вставить("ИсключаемыеПодразделения",                 Новый Массив);
	ПараметрыДляПолученияЧисленности.Вставить("ПоГоловнойОрганизации",                    Ложь);
	ПараметрыДляПолученияЧисленности.Вставить("ПоПодразделениям",                         Ложь);
	
	Возврат ПараметрыДляПолученияЧисленности;
	
КонецФункции

// Возвращает объект для хранения сведений о численности и выплатах
// 
// Параметры:
//  РазрядностьПоказателей                    - Число - Точность числовых показателей численности, по-умолчанию равно 1
// Возвращаемое значение:
//   Структура - Содержит ключи:
//    * СведенияОЧисленности                  - ТаблицаЗначений - см. СведенияОЧисленности().
//    * СведенияОВыплатахСоциальногоХарактера - ТаблицаЗначений - см. СведенияОВыплатахСоциальногоХарактера().
//    * СведенияОВыплатах                     - ТаблицаЗначений - см. СведенияОВыплатах().
//
Функция СведенияОЧисленностиИВыплатах(ТочностьЧисленности = 1)

	Сведения = Новый Структура;
	Сведения.Вставить("СведенияОЧисленности", СведенияОЧисленности(ТочностьЧисленности));
	Сведения.Вставить("СведенияОВыплатах", СведенияОВыплатах()); 
	Сведения.Вставить("СведенияОВыплатахСоциальногоХарактера", СведенияОВыплатахСоциальногоХарактера());
	
	Возврат Сведения;
	
КонецФункции

// Возвращает таблицу значений для хранения сведений о выплатах
// 
// Возвращаемое значение:
//   ТаблицаЗначений с колонками:
//    * Организация                                        - СправочникСсылка.Организации
//    * Подразделение                                      - СправочникСсылка.Подразделения
//    * ОтработаноЧасов                                    - Число
//    * ОтработаноЧасовВнешнимиСовместителями              - Число
//    * ФондНачисленнойЗаработнойПлаты                     - Число
//    * ФондНачисленнойЗаработнойПлатыВнешнихСовместителей - Число
//    * ФондНачисленнойЗаработнойПлатыДоговорников         - Число
//
Функция СведенияОВыплатах()
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	
	ТаблицаСведений.Колонки.Добавить(
		"Организация",                                        Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСведений.Колонки.Добавить(
		"Подразделение",                                      Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСведений.Колонки.Добавить(
		"ОтработаноЧасов",                                    ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСведений.Колонки.Добавить(
		"ОтработаноЧасовВнешнимиСовместителями",              ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСведений.Колонки.Добавить(
		"ФондНачисленнойЗаработнойПлаты",                     ОбщегоНазначения.ОписаниеТипаЧисло(17,2));
	ТаблицаСведений.Колонки.Добавить(
		"ФондНачисленнойЗаработнойПлатыВнешнихСовместителей", ОбщегоНазначения.ОписаниеТипаЧисло(17,2));
	ТаблицаСведений.Колонки.Добавить(
		"ФондНачисленнойЗаработнойПлатыДоговорников",         ОбщегоНазначения.ОписаниеТипаЧисло(17,2));
	Возврат ТаблицаСведений;
	
КонецФункции

// Возвращает таблицу значений для хранения сведений о выплатах социального характера
// 
// Возвращаемое значение:
//   ТаблицаЗначений с колонками:
//    * Организация                                        - СправочникСсылка.Организации
//    * Подразделение                                      - СправочникСсылка.Подразделения
//    * ВыплатыСоциальногоХарактера                        - Число
//
Функция СведенияОВыплатахСоциальногоХарактера()
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	
	ТаблицаСведений.Колонки.Добавить("Организация",                 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСведений.Колонки.Добавить("Подразделение",               Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСведений.Колонки.Добавить("ВыплатыСоциальногоХарактера", ОбщегоНазначения.ОписаниеТипаЧисло(17,2));
	
	Возврат ТаблицаСведений;
	
КонецФункции

// Возвращает таблицу значений для хранения сведений о численности
//
// Параметры:
//  РазрядностьПоказателей                - Число - Точность числовых показателей численности, по-умолчанию равно двум
//
// Возвращаемое значение:
//   ТаблицаЗначений с колонками:
//    * Организация                                     - СправочникСсылка.Организации
//    * Подразделение                                   - СправочникСсылка.Подразделения
//    * СреднесписочнаяЧисленностьСотрудников           - Число
//    * СреднесписочнаяЧисленностьВнешнихСовместителей  - Число
//    * СредняяЧисленностьДоговорников                  - Число
//    * СреднесписочнаяЧисленностьЖенщин                - Число
//    * СреднесписочнаяЧисленностьИнвалидов             - Число
//    * ЧисленностьСотрудников                          - Число
//    * ЧисленностьВнешнихСовместителей                 - Число
//    * ЧисленностьЖенщин                               - Число
//    * ЧисленностьИнвалидов                            - Число
//    * ЧисленностьДоговорников                         - Число
//
Функция СведенияОЧисленности(РазрядностьПоказателей = 2) Экспорт
	
	ТаблицаСведений = Новый ТаблицаЗначений;

	ТаблицаСведений.Колонки.Добавить(
		"Организация",                                    Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСведений.Колонки.Добавить(
		"Подразделение",                                  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСведений.Колонки.Добавить(
		"СреднесписочнаяЧисленностьСотрудников",          ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"СреднесписочнаяЧисленностьВнешнихСовместителей", ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"СреднесписочнаяЧисленностьЖенщин",               ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"СреднесписочнаяЧисленностьИнвалидов",            ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"СредняяЧисленностьДоговорников",                 ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьСотрудников",                         ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьВнешнихСовместителей",                ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьЖенщин",                              ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьИнвалидов",                           ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьДоговорников",                        ОбщегоНазначения.ОписаниеТипаЧисло(17,РазрядностьПоказателей));
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ДанныеЧисленности(Знач ПараметрыСведений)
	
	Если ПараметрыСведений.ПоГоловнойОрганизации Тогда
		Организации = ВсяОрганизация(ПараметрыСведений.Организация, Истина);
	Иначе
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСведений.Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НачалоИнтервала =    НачалоМесяца(ПараметрыСведений.ДатаНачала);
	ОкончаниеИнтервала = КонецМесяца(ПараметрыСведений.ДатаОкончания);
	
	Запрос.УстановитьПараметр("Организации",        Организации);
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", ОкончаниеИнтервала);
	Запрос.УстановитьПараметр("НачалоИнтервала",    НачалоИнтервала);
	
	// Создание таблицы дней
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
		Запрос.МенеджерВременныхТаблиц,
		НачалоИнтервала,
		ОкончаниеИнтервала,
		"ДЕНЬ",
		"Дата",
		"Календарь");
		
	// Получение сотрудников организации
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация = ПараметрыСведений.Организация;
	ПараметрыПолучения.НачалоПериода = НачалоИнтервала;
	ПараметрыПолучения.ОкончаниеПериода = ОкончаниеИнтервала;
	ПараметрыПолучения.КадровыеДанные = "ТекущаяОрганизация,ДатаПриема,ДатаУвольнения,Подразделение";
	ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = ПараметрыСведений.ПоГоловнойОрганизации;
	ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;

	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ПараметрыПолучения);
	
	// Получение кадровых данных по дням периода
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизацииПоОсновномуМестуРаботы.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизацииПоОсновномуМестуРаботы.ДатаПриема КАК ДатаПриема,
		|	СотрудникиОрганизацииПоОсновномуМестуРаботы.ДатаУвольнения КАК ДатаУвольнения,
		|	СписокДат.Дата КАК Дата,
		|	СотрудникиОрганизацииПоОсновномуМестуРаботы.Подразделение КАК Подразделение,
		|	СотрудникиОрганизацииПоОсновномуМестуРаботы.ТекущаяОрганизация КАК ТекущаяОрганизация
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	Календарь КАК СписокДат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизацииПоОсновномуМестуРаботы
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(СотрудникиОрганизацииПоОсновномуМестуРаботы.ТекущаяОрганизация В (&Организации)
		|			ИЛИ СотрудникиОрганизацииПоОсновномуМестуРаботы.ТекущаяОрганизация ЕСТЬ NULL)";
	
	Запрос.Выполнить();
	
	// Получение договорников
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.Организация = ПараметрыСведений.Организация;
		ПараметрыПолучения.НачалоПериода = НачалоИнтервала;
		ПараметрыПолучения.ОкончаниеПериода = ОкончаниеИнтервала;
		ПараметрыПолучения.КадровыеДанные = "ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = ПараметрыСведений.ПоГоловнойОрганизации;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
			
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ПараметрыПолучения,
			"ВТСотрудникиОрганизацииПоДоговорамГПХ");
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриема,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаУвольнения,
		|	NULL КАК Подразделение,
		|	NULL КАК Организация
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииПоДоговорамГПХ";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТСотрудникиОрганизацииПоДоговорамГПХ.Сотрудник КАК Сотрудник,
	|	&НачалоПериода КАК НачалоПериода,
	|	&ОкончаниеПериода КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТСотрудникиОрганизацииПоДоговорамГПХ КАК ВТСотрудникиОрганизацииПоДоговорамГПХ";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоИнтервала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеИнтервала);
	запрос.Выполнить();
	
	ПараметрыПоВременнойТаблице = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
		"ВТСотрудникиПериоды", "Сотрудник", "НачалоПериода", "ОкончаниеПериода");
	ПараметрыПоВременнойТаблице.РаботникиПоДоговорамГПХ = Истина;
	ПараметрыПоВременнойТаблице.РаботникиПоТрудовымДоговорам = Ложь;
	ПараметрыПоВременнойТаблице.ОтбиратьПоГоловнойОрганизации = ПараметрыСведений.ПоГоловнойОрганизации;
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Ложь, 
		ПараметрыПоВременнойТаблице, "ВТРабочиеМестаСотрудниковГПХ");
		
	// Получение кадровых данных по дням периода
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТРабочиеМестаСотрудниковГПХ.Сотрудник КАК Сотрудник,
		|	СписокДат.Дата КАК Дата,
		|	ВТРабочиеМестаСотрудниковГПХ.Подразделение КАК Подразделение,
		|	ВТРабочиеМестаСотрудниковГПХ.Организация КАК Организация,
		|	ДоговорРаботыУслуги.ДатаНачала КАК ДатаПриема,
		|	ДоговорРаботыУслуги.ДатаОкончания КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТСотрудникиПоДоговорамГПХДаты
		|ИЗ
		|	Календарь КАК СписокДат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудниковГПХ КАК ВТРабочиеМестаСотрудниковГПХ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
		|			ПО ВТРабочиеМестаСотрудниковГПХ.ДокументОснование = ДоговорРаботыУслуги.Ссылка
		|		ПО (ИСТИНА)";
	
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиДаты",
		"Сотрудник,Дата");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "Организация,ФизическоеЛицо,Подразделение,ВидЗанятости,КоличествоСтавок");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Организация КАК Организация,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиДаты.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(СотрудникиДаты.Дата, МЕСЯЦ) КАК Месяц,
		|	СотрудникиДаты.Дата КАК Период,
		|	ЛОЖЬ КАК Совместитель,
		|	ЛОЖЬ КАК СотрудникПоДоговоруГПХ,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ПОМЕСТИТЬ ВТДатыИСотрудники
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО СотрудникиДаты.Дата = КадровыеДанныеСотрудников.Период
		|			И СотрудникиДаты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И (КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
		|			И (СотрудникиДаты.Дата >= СотрудникиДаты.ДатаПриема)
		|			И (СотрудникиДаты.Дата <= СотрудникиДаты.ДатаУвольнения
		|					И СотрудникиДаты.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СотрудникиДаты.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник,
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	СотрудникиДаты.Дата,
		|	НАЧАЛОПЕРИОДА(СотрудникиДаты.Дата, МЕСЯЦ),
		|	СотрудникиДаты.Дата,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	КадровыеДанныеСотрудников.Подразделение,
		|	КадровыеДанныеСотрудников.КоличествоСтавок
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО СотрудникиДаты.Дата = КадровыеДанныеСотрудников.Период
		|			И СотрудникиДаты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И (КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
		|			И (СотрудникиДаты.Дата >= СотрудникиДаты.ДатаПриема)
		|			И (СотрудникиДаты.Дата <= СотрудникиДаты.ДатаУвольнения
		|					И СотрудникиДаты.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СотрудникиДаты.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|			И СотрудникиДаты.Подразделение = КадровыеДанныеСотрудников.Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиПоДоговорамГПХДаты.Сотрудник,
		|	СотрудникиПоДоговорамГПХДаты.Организация,
		|	СотрудникиПоДоговорамГПХДаты.Сотрудник.ФизическоеЛицо,
		|	СотрудникиПоДоговорамГПХДаты.Дата,
		|	НАЧАЛОПЕРИОДА(СотрудникиПоДоговорамГПХДаты.Дата, МЕСЯЦ),
		|	СотрудникиПоДоговорамГПХДаты.Дата,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	СотрудникиПоДоговорамГПХДаты.Подразделение,
		|	1
		|ИЗ
		|	ВТСотрудникиПоДоговорамГПХДаты КАК СотрудникиПоДоговорамГПХДаты
		|ГДЕ
		|	СотрудникиПоДоговорамГПХДаты.Дата >= СотрудникиПоДоговорамГПХДаты.ДатаПриема
		|	И СотрудникиПоДоговорамГПХДаты.Дата <= СотрудникиПоДоговорамГПХДаты.ДатаУвольнения";
	
	Если ПараметрыСведений.ИсключитьДанныеОбособленныхПодразделений 
		И ПараметрыСведений.ИсключаемыеПодразделения.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ИсключаемыеПодразделения", ПараметрыСведений.ИсключаемыеПодразделения);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО СотрудникиДаты.Дата = КадровыеДанныеСотрудников.Период",
			"ПО СотрудникиДаты.Дата = КадровыеДанныеСотрудников.Период
			|	И НЕ КадровыеДанныеСотрудников.Подразделение В (&ИсключаемыеПодразделения)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиПоДоговорамГПХДаты.Дата <= СотрудникиПоДоговорамГПХДаты.ДатаУвольнения",
			"И СотрудникиПоДоговорамГПХДаты.Дата <= СотрудникиПоДоговорамГПХДаты.ДатаУвольнения
			|	И НЕ СотрудникиПоДоговорамГПХДаты.Подразделение В (&ИсключаемыеПодразделения)");
		
	ИначеЕсли ПараметрыСведений.ПодразделенияОбособленного.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ПодразделенияОбособленного", ПараметрыСведений.ПодразделенияОбособленного);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО СотрудникиДаты.Дата = КадровыеДанныеСотрудников.Период",
			"ПО СотрудникиДаты.Дата = КадровыеДанныеСотрудников.Период
			|	И КадровыеДанныеСотрудников.Подразделение В (&ПодразделенияОбособленного)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиПоДоговорамГПХДаты.Дата <= СотрудникиПоДоговорамГПХДаты.ДатаУвольнения",
			"И СотрудникиПоДоговорамГПХДаты.Дата <= СотрудникиПоДоговорамГПХДаты.ДатаУвольнения
			|	И СотрудникиПоДоговорамГПХДаты.Подразделение В (&ПодразделенияОбособленного)");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СведенияОбИнвалидностиФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДатыИСотрудники",
			"ФизическоеЛицо"),
		ПараметрыПостроения);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И НЕ СписокДат.СотрудникПоДоговоруГПХ
		|					И НЕ СписокДат.Совместитель
		|				ТОГДА 1 * СписокДат.КоличествоСтавок
		|		КОНЕЦ) КАК КоличествоСотрудников,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И НЕ СписокДат.СотрудникПоДоговоруГПХ
		|					И СписокДат.Совместитель
		|				ТОГДА 1 * СписокДат.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоСовместителей,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И СписокДат.Сотрудник.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
		|					И НЕ СписокДат.СотрудникПоДоговоруГПХ
		|					И НЕ СписокДат.Совместитель
		|				ТОГДА 1 * СписокДат.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЖенщин,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И НЕ СписокДат.СотрудникПоДоговоруГПХ
		|					И НЕ СписокДат.Совместитель
		|					И ЕСТЬNULL(ДанныеОбИнвалидности.Инвалидность, ЛОЖЬ)
		|				ТОГДА 1 * СписокДат.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоИнвалидов,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И СписокДат.СотрудникПоДоговоруГПХ
		|				ТОГДА 1 * СписокДат.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоСотрудниковПоДоговоруГПХ,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И СписокДат.СотрудникПоДоговоруГПХ
		|					И СписокДат.Дата = &КонецПериода
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоСотрудниковПоДоговоруГПХНаКонецПериода,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И НЕ СписокДат.СотрудникПоДоговоруГПХ
		|					И НЕ СписокДат.Совместитель
		|					И СписокДат.Дата = &КонецПериода
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоСотрудниковНаКонецПериода,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И НЕ СписокДат.СотрудникПоДоговоруГПХ
		|					И СписокДат.Совместитель
		|					И СписокДат.Дата = &КонецПериода
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоСовместителейНаКонецПериода,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И СписокДат.Дата = &КонецПериода
		|					И СписокДат.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
		|					И НЕ СписокДат.СотрудникПоДоговоруГПХ
		|					И НЕ СписокДат.Совместитель
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЖенщинНаКонецПериода,
		|	СУММА(ВЫБОР
		|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
		|					И СписокДат.Дата = &КонецПериода
		|					И ЕСТЬNULL(ДанныеОбИнвалидности.Инвалидность, ЛОЖЬ)
		|					И НЕ СписокДат.СотрудникПоДоговоруГПХ
		|					И НЕ СписокДат.Совместитель
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоИнвалидовНаКонецПериода,
		|	ДЕНЬ(КОНЕЦПЕРИОДА(СписокДат.Дата, МЕСЯЦ)) КАК ДнейВМесяце,
		|	СписокДат.Месяц КАК Месяц,
		|	СписокДат.Подразделение КАК Подразделение,
		|	СписокДат.Организация КАК Организация
		|ПОМЕСТИТЬ ВТСредняяЧисленностьПоМесяцам
		|ИЗ
		|	ВТДатыИСотрудники КАК СписокДат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбИнвалидностиФизическихЛицСрезПоследних КАК ДанныеОбИнвалидности
		|		ПО СписокДат.Период = ДанныеОбИнвалидности.Период
		|			И СписокДат.ФизическоеЛицо = ДанныеОбИнвалидности.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ДЕНЬ(КОНЕЦПЕРИОДА(СписокДат.Дата, МЕСЯЦ)),
		|	СписокДат.Месяц,
		|	СписокДат.Подразделение,
		|	СписокДат.Организация";

	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(ОкончаниеИнтервала));
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце) / (РАЗНОСТЬДАТ(&НачалоИнтервала, &ОкончаниеИнтервала, МЕСЯЦ) + 1), 0) КАК СреднесписочнаяЧисленностьСотрудников,
		|	ЕСТЬNULL(СУММА(СредняяЧисленностьПоМесяцам.КоличествоСовместителей / СредняяЧисленностьПоМесяцам.ДнейВМесяце) / (РАЗНОСТЬДАТ(&НачалоИнтервала, &ОкончаниеИнтервала, МЕСЯЦ) + 1), 0) КАК СреднесписочнаяЧисленностьВнешнихСовместителей,
		|	ЕСТЬNULL(СУММА(СредняяЧисленностьПоМесяцам.КоличествоЖенщин / СредняяЧисленностьПоМесяцам.ДнейВМесяце) / (РАЗНОСТЬДАТ(&НачалоИнтервала, &ОкончаниеИнтервала, МЕСЯЦ) + 1), 0) КАК СреднесписочнаяЧисленностьЖенщин,
		|	ЕСТЬNULL(СУММА(СредняяЧисленностьПоМесяцам.КоличествоИнвалидов / СредняяЧисленностьПоМесяцам.ДнейВМесяце) / (РАЗНОСТЬДАТ(&НачалоИнтервала, &ОкончаниеИнтервала, МЕСЯЦ) + 1), 0) КАК СреднесписочнаяЧисленностьИнвалидов,
		|	ЕСТЬNULL(СУММА(СредняяЧисленностьПоМесяцам.КоличествоСотрудниковПоДоговоруГПХ / СредняяЧисленностьПоМесяцам.ДнейВМесяце) / (РАЗНОСТЬДАТ(&НачалоИнтервала, &ОкончаниеИнтервала, МЕСЯЦ) + 1), 0) КАК СредняяЧисленностьДоговорников,
		|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоСотрудниковНаКонецПериода, 0)) КАК ЧисленностьСотрудников,
		|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоЖенщинНаКонецПериода, 0)) КАК ЧисленностьЖенщин,
		|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоИнвалидовНаКонецПериода, 0)) КАК ЧисленностьИнвалидов,
		|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоСотрудниковПоДоговоруГПХНаКонецПериода, 0)) КАК ЧисленностьДоговорников,
		|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоСовместителейНаКонецПериода, 0)) КАК ЧисленностьВнешнихСовместителей,
		|	СредняяЧисленностьПоМесяцам.Подразделение КАК Подразделение,
		|	СредняяЧисленностьПоМесяцам.Организация КАК Организация
		|ИЗ
		|	ВТСредняяЧисленностьПоМесяцам КАК СредняяЧисленностьПоМесяцам
		|
		|СГРУППИРОВАТЬ ПО
		|	СредняяЧисленностьПоМесяцам.Подразделение,
		|	СредняяЧисленностьПоМесяцам.Организация";
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ДанныеВыплат(Знач ПараметрыСведений)
	
	ВидыВыплатСоциальногоХарактера = Новый Массив;
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп12_1ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп16ст255);
	ВидыВыплатСоциальногоХарактера.Добавить("2710");
	ВидыВыплатСоциальногоХарактера.Добавить("2720");
	ВидыВыплатСоциальногоХарактера.Добавить("2760");
	ВидыВыплатСоциальногоХарактера.Добавить("2762");
	ВидыВыплатСоциальногоХарактера.Добавить("2510");
	
	ВидыИсключаемыхВыплат = Новый Массив;
	ВидВыплаты = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС");
	
	Если ВидВыплаты <> Неопределено Тогда
		ВидыИсключаемыхВыплат.Добавить(ВидВыплаты);
	КонецЕсли;
	
	ВидВыплаты = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС_НС");
	Если ВидВыплаты <> Неопределено Тогда
		ВидыИсключаемыхВыплат.Добавить(ВидВыплаты);
	КонецЕсли;
	
	ВидыИсключаемыхВыплат.Добавить("2300");
	
	ИсключаемыеКатегорииНачислений = Новый Массив;
	ИсключаемыеКатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	ИсключаемыеКатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	ИсключаемыеКатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	ИсключаемыеКатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	
	Если ПараметрыСведений.ПоГоловнойОрганизации Тогда
		Организации = ВсяОрганизация(ПараметрыСведений.Организация, Истина);
	Иначе
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСведений.Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организации",					Организации);
	Запрос.УстановитьПараметр("ВидыВыплатСоциальногоХарактера",	ВидыВыплатСоциальногоХарактера);
	Запрос.УстановитьПараметр("ВидыИсключаемыхВыплат",			ВидыИсключаемыхВыплат);
	Запрос.УстановитьПараметр("ИсключаемыеКатегорииНачислений", ИсключаемыеКатегорииНачислений);
	Запрос.УстановитьПараметр("ДелительСумм", ?(ПараметрыСведений.ДелитьНа1000, 1000, 1));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала",				ПараметрыСведений.ДатаОкончания);
	Запрос.УстановитьПараметр("НачалоИнтервала",				ПараметрыСведений.ДатаНачала);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТВидыИсключаемыхВыплат
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	(Начисления.ВидНачисленияДляНУ В (&ВидыИсключаемыхВыплат)
		|			ИЛИ Начисления.КодДоходаНДФЛ.Код В (&ВидыИсключаемыхВыплат)
		|			ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&ИсключаемыеКатегорииНачислений)
		|			ИЛИ Начисления.ОсновнойВидРасчета.ВидНачисленияДляНУ В (&ВидыИсключаемыхВыплат)
		|			ИЛИ Начисления.ОсновнойВидРасчета.КодДоходаНДФЛ.Код В (&ВидыИсключаемыхВыплат)
		|			ИЛИ Начисления.ОсновнойВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&ИсключаемыеКатегорииНачислений))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТВидыНачисленийСоциальногоХарактера
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	(Начисления.ВидНачисленияДляНУ В (&ВидыВыплатСоциальногоХарактера)
		|			ИЛИ Начисления.КодДоходаНДФЛ.Код В (&ВидыВыплатСоциальногоХарактера))";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА &ЧасыСНачалаГода
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|						ТОГДА 0
		|					ИНАЧЕ ОтработанноеВремяПоСотрудникам.ОтработаноЧасов
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НачисленияУдержанияПоСотрудникам.Период >= &НачалоИнтервала
		|					ТОГДА ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|								ТОГДА 0
		|							ИНАЧЕ ОтработанноеВремяПоСотрудникам.ОтработаноЧасов
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ОтработаноЧасов,
		|	НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) КАК МесяцНачисления,
		|	КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) КАК ДатаКадровыхДанных,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.Период >= &НачалоИнтервала
		|			ТОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|	КОНЕЦ КАК Начисление,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.Период >= &НачалоИнтервала
		|			ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Результат,
		|	НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
		|	НачисленияУдержанияПоСотрудникам.Организация КАК Организация
		|ПОМЕСТИТЬ ВТНачислениеЗарплаты
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = ОтработанноеВремяПоСотрудникам.Регистратор
		|			И НачисленияУдержанияПоСотрудникам.Сотрудник = ОтработанноеВремяПоСотрудникам.Сотрудник
		|			И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ОтработанноеВремяПоСотрудникам.Начисление
		|			И НачисленияУдержанияПоСотрудникам.ПериодДействия = ОтработанноеВремяПоСотрудникам.ПериодДействия
		|			И НачисленияУдержанияПоСотрудникам.ДатаНачала = ОтработанноеВремяПоСотрудникам.ДатаНачала
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоИнтервала, ГОД) И &ОкончаниеИнтервала
		|	И НачисленияУдержанияПоСотрудникам.Организация В(&Организации)
		|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НЕ НачисленияУдержанияПоСотрудникам.НачислениеУдержание В
		|				(ВЫБРАТЬ
		|					ВТВидыИсключаемыхВыплат.Начисление
		|				ИЗ
		|					ВТВидыИсключаемыхВыплат КАК ВТВидыИсключаемыхВыплат)";
	
	Запрос.УстановитьПараметр("ЧасыСНачалаГода", ПараметрыСведений.ЧасыСНачалаГода);
	Если ПараметрыСведений.ИсключитьДанныеОбособленныхПодразделений 
		И ПараметрыСведений.ИсключаемыеПодразделения.Количество() > 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ НачисленияУдержанияПоСотрудникам.Подразделение В (&ИсключаемыеПодразделения)";
		Запрос.УстановитьПараметр("ИсключаемыеПодразделения", ПараметрыСведений.ИсключаемыеПодразделения);
		
	ИначеЕсли ПараметрыСведений.ПодразделенияОбособленного.Количество() > 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	И НачисленияУдержанияПоСотрудникам.Подразделение В (&ПодразделенияОбособленного)";
		Запрос.УстановитьПараметр("ПодразделенияОбособленного", ПараметрыСведений.ПодразделенияОбособленного);
		
	КонецЕсли;
		
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТНачислениеЗарплаты", "Сотрудник,ДатаКадровыхДанных");
		
	ОписательТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковНачислений";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "ВидЗанятости,Подразделение,Организация");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Период КАК Период,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.ВидЗанятости КАК ВидЗанятости,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Организация КАК Организация
		|ПОМЕСТИТЬ ВТДанныеСотрудниковНачислений
		|ИЗ
		|	ВТКадровыеДанныеСотрудниковНачислений КАК КадровыеДанные
		|ГДЕ
		|	КадровыеДанные.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыеДанные.Период,
		|	КадровыеДанные.Сотрудник,
		|	КадровыеДанныеОсновных.ВидЗанятости,
		|	КадровыеДанныеОсновных.Подразделение,
		|	КадровыеДанныеОсновных.Организация
		|ИЗ
		|	ВТКадровыеДанныеСотрудниковНачислений КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудниковНачислений КАК КадровыеДанныеОсновных
		|		ПО КадровыеДанные.Период = КадровыеДанныеОсновных.Период
		|			И КадровыеДанные.ФизическоеЛицо = КадровыеДанныеОсновных.ФизическоеЛицо
		|			И (КадровыеДанныеОсновных.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
		|ГДЕ
		|	НЕ КадровыеДанные.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))";

	Запрос.Выполнить();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.Организация = ПараметрыСведений.Организация;
		ПараметрыПолучения.НачалоПериода = ПараметрыСведений.ДатаНачала;
		ПараметрыПолучения.ОкончаниеПериода = ПараметрыСведений.ДатаОкончания;
		ПараметрыПолучения.КадровыеДанные = "ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = ПараметрыСведений.ПоГоловнойОрганизации;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
			
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ПараметрыПолучения,
			"ВТСотрудникиОрганизацииПоДоговорамГПХ");
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриема,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаУвольнения,
		|	NULL КАК Подразделение,
		|	NULL КАК Организация
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииПоДоговорамГПХ";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТСотрудникиОрганизацииПоДоговорамГПХ.Сотрудник КАК Сотрудник,
	|	&НачалоПериода КАК НачалоПериода,
	|	&ОкончаниеПериода КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТСотрудникиОрганизацииПоДоговорамГПХ КАК ВТСотрудникиОрганизацииПоДоговорамГПХ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыСведений.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ПараметрыСведений.ДатаОкончания);
	запрос.Выполнить();
	
	ПараметрыПоВременнойТаблице = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
		"ВТСотрудникиПериоды", "Сотрудник", "НачалоПериода", "ОкончаниеПериода");
	ПараметрыПоВременнойТаблице.РаботникиПоДоговорамГПХ = Истина;
	ПараметрыПоВременнойТаблице.РаботникиПоТрудовымДоговорам = Ложь;
	ПараметрыПоВременнойТаблице.ОтбиратьПоГоловнойОрганизации = ПараметрыСведений.ПоГоловнойОрганизации;
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Ложь, 
		ПараметрыПоВременнойТаблице, "ВТРабочиеМестаСотрудниковГПХ");
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Подразделение,
	|	Организация,
	|	Сотрудник
	|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудниковГПХ
	|ИЗ
	|	ВТРабочиеМестаСотрудниковГПХ";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(НачислениеЗарплаты.ОтработаноЧасов, 0)) КАК ОтработаноЧасов,
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(НачислениеЗарплаты.Результат, 0) / &ДелительСумм КАК ЧИСЛО(15, 1))) КАК Результат,
	|	0 КАК ОтработаноЧасовСовместителями,
	|	0 КАК РезультатСовместитель,
	|	ЛОЖЬ КАК Совместитель,
	|	ЛОЖЬ КАК Договорник,
	|	0 КАК РезультатДоговорник,
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Организация КАК Организация
	|ПОМЕСТИТЬ ВТВыплаты
	|ИЗ
	|	ВТНачислениеЗарплаты КАК НачислениеЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСотрудниковНачислений КАК КадровыеДанные
	|		ПО НачислениеЗарплаты.Сотрудник = КадровыеДанные.Сотрудник
	|		И (КОНЕЦПЕРИОДА(НачислениеЗарплаты.МесяцНачисления, МЕСЯЦ) = КадровыеДанные.Период)
	|ГДЕ
	|	КадровыеДанные.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|СГРУППИРОВАТЬ ПО
	|	КадровыеДанные.Подразделение,
	|	КадровыеДанные.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(ЕСТЬNULL(НачислениеЗарплаты.ОтработаноЧасов, 0)),
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(НачислениеЗарплаты.Результат, 0) / &ДелительСумм КАК ЧИСЛО(15, 1))),
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	0,
	|	КадровыеДанные.Подразделение,
	|	КадровыеДанные.Организация
	|ИЗ
	|	ВТНачислениеЗарплаты КАК НачислениеЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСотрудниковНачислений КАК КадровыеДанные
	|		ПО НачислениеЗарплаты.Сотрудник = КадровыеДанные.Сотрудник
	|		И (КОНЕЦПЕРИОДА(НачислениеЗарплаты.МесяцНачисления, МЕСЯЦ) = КадровыеДанные.Период)
	|ГДЕ
	|	КадровыеДанные.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
	|СГРУППИРОВАТЬ ПО
	|	КадровыеДанные.Подразделение,
	|	КадровыеДанные.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(НачислениеЗарплаты.Результат, 0) / &ДелительСумм КАК ЧИСЛО(15, 1))),
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Организация КАК Организация
	|ИЗ
	|	ВТНачислениеЗарплаты КАК НачислениеЗарплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудниковГПХ КАК КадровыеДанные
	|		ПО НачислениеЗарплаты.Сотрудник = КадровыеДанные.Сотрудник
	|СГРУППИРОВАТЬ ПО
	|	КадровыеДанные.Подразделение,
	|	КадровыеДанные.Организация";
	
	
	Запрос.Выполнить();
	
	// формирование результатов
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(НачислениеЗарплаты.Результат, 0) / &ДелительСумм КАК ЧИСЛО(15, 1)) КАК ВыплатыСоциальногоХарактера,
		|	НачислениеЗарплаты.Подразделение КАК Подразделение,
		|	НачислениеЗарплаты.Организация КАК Организация
		|ИЗ
		|	ВТНачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Начисление В
		|		(ВЫБРАТЬ
		|			ВидыНачисленийСоциальногоХарактера.Начисление КАК Начисление
		|		ИЗ
		|			ВТВидыНачисленийСоциальногоХарактера КАК ВидыНачисленийСоциальногоХарактера)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТВыплаты.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(ВТВыплаты.Результат) КАК ФондНачисленнойЗаработнойПлаты,
		|	СУММА(ВТВыплаты.ОтработаноЧасовСовместителями) КАК ОтработаноЧасовВнешнимиСовместителями,
		|	СУММА(ВТВыплаты.РезультатСовместитель) КАК ФондНачисленнойЗаработнойПлатыВнешнихСовместителей,
		|	СУММА(ВТВыплаты.РезультатДоговорник) КАК ФондНачисленнойЗаработнойПлатыДоговорников,
		|	ВТВыплаты.Подразделение КАК Подразделение,
		|	ВТВыплаты.Организация КАК Организация
		|ИЗ
		|	ВТВыплаты КАК ВТВыплаты
		|СГРУППИРОВАТЬ ПО
		|	ВТВыплаты.Организация,
		|	ВТВыплаты.Подразделение";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

#КонецОбласти

Функция ВсяОрганизация(Знач ГоловнаяОрганизация, Знач ВыбратьРазрешенные)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		
	Если Не ВыбратьРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

Функция СписокКолонокДляСуммированияПоказателей(КолонкиТаблицыЗначений)
	
	КолонкиСуммирования = Новый Массив;
	Для ИндексКолонки = 0 По КолонкиТаблицыЗначений.Количество()-1 Цикл
		Если КолонкиТаблицыЗначений[ИндексКолонки].Имя <> "Организация" 
			И КолонкиТаблицыЗначений[ИндексКолонки].Имя <> "Подразделение" Тогда
			КолонкиСуммирования.Добавить(КолонкиТаблицыЗначений[ИндексКолонки].Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(КолонкиСуммирования,",");
	
КонецФункции

// См. СтатистикаПерсонала.СреднесписочнаяЧисленностьРаботающих.
Функция СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода, ПоГоловнойОрганизации = Ложь) Экспорт 
	
	Если ПоГоловнойОрганизации Тогда
		Организации = ВсяОрганизация(Организация, Ложь);
	Иначе
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организации);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, НачалоПериода, КонецПериода, "ДЕНЬ", "Дата", "Календарь");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение сотрудников организации
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация                   = Организация;
	ПараметрыПолучения.НачалоПериода                 = НачалоПериода;
	ПараметрыПолучения.ОкончаниеПериода              = КонецПериода;
	ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = ПоГоловнойОрганизации;
	ПараметрыПолучения.КадровыеДанные                = "ТекущаяОрганизация,ДатаПриема,ДатаУвольнения";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ПараметрыПолучения);
	
	// Получение кадровых данных по дням периода
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизацииПоОсновномуМестуРаботы.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизацииПоОсновномуМестуРаботы.ДатаПриема КАК ДатаПриема,
		|	СотрудникиОрганизацииПоОсновномуМестуРаботы.ДатаУвольнения КАК ДатаУвольнения,
		|	СписокДат.Дата КАК Дата
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	Календарь КАК СписокДат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизацииПоОсновномуМестуРаботы
		|		ПО СписокДат.Дата >= СотрудникиОрганизацииПоОсновномуМестуРаботы.ДатаПриема
		|			И (СписокДат.Дата <= СотрудникиОрганизацииПоОсновномуМестуРаботы.ДатаУвольнения
		|					И СотрудникиОрганизацииПоОсновномуМестуРаботы.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СотрудникиОрганизацииПоОсновномуМестуРаботы.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	(СотрудникиОрганизацииПоОсновномуМестуРаботы.ТекущаяОрганизация В (&Организация)
		|			ИЛИ СотрудникиОрганизацииПоОсновномуМестуРаботы.ТекущаяОрганизация ЕСТЬ NULL)";
	
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиДаты",
		"Сотрудник,Дата");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "Организация,ФизическоеЛицо,ВидЗанятости,КоличествоСтавок");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиДаты.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиДаты.Дата КАК Дата,
	|	СотрудникиДаты.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(СотрудникиДаты.Дата, МЕСЯЦ) КАК Месяц,
	|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
	|ПОМЕСТИТЬ ВТДатыИСотрудники
	|ИЗ
	|	ВТСотрудникиДаты КАК СотрудникиДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО СотрудникиДаты.Дата = КадровыеДанныеСотрудников.Период
	|			И СотрудникиДаты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И (КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	|			И (СотрудникиДаты.Дата >= СотрудникиДаты.ДатаПриема)";

	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СведенияОбИнвалидностиФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДатыИСотрудники",
			"ФизическоеЛицо"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|				ТОГДА 1 * СписокДат.КоличествоСтавок
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСотрудников,
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|					И СписокДат.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				ТОГДА 1 * СписокДат.КоличествоСтавок
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЖенщин,
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|					И ЕСТЬNULL(ДанныеОбИнвалидности.Инвалидность, ЛОЖЬ)
	|				ТОГДА 1 * СписокДат.КоличествоСтавок
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИнвалидов,
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|					И СписокДат.Дата = &КонецПериода
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСотрудниковНаКонецПериода,
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|					И СписокДат.Дата = &КонецПериода
	|					И СписокДат.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЖенщинНаКонецПериода,
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|					И СписокДат.Дата = &КонецПериода
	|					И ЕСТЬNULL(ДанныеОбИнвалидности.Инвалидность, ЛОЖЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИнвалидовНаКонецПериода,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокДат.Дата) КАК ДнейВМесяце,
	|	СписокДат.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТСредняяЧисленностьПоМесяцам
	|ИЗ
	|	ВТДатыИСотрудники КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбИнвалидностиФизическихЛицСрезПоследних КАК ДанныеОбИнвалидности
	|		ПО СписокДат.Период = ДанныеОбИнвалидности.Период
	|			И СписокДат.ФизическоеЛицо = ДанныеОбИнвалидности.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокДат.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце, 0)) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц) КАК СреднесписочнаяЧисленность,
	|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоЖенщин / СредняяЧисленностьПоМесяцам.ДнейВМесяце, 0)) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц) КАК СреднесписочнаяЧисленностьЖенщин,
	|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоИнвалидов / СредняяЧисленностьПоМесяцам.ДнейВМесяце, 0)) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц) КАК СреднесписочнаяЧисленностьИнвалидов,
	|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоСотрудниковНаКонецПериода, 0)) КАК ЧисленностьНаКонецПериода,
	|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоЖенщинНаКонецПериода, 0)) КАК ЧисленностьЖенщинНаКонецПериода,
	|	СУММА(ЕСТЬNULL(СредняяЧисленностьПоМесяцам.КоличествоИнвалидовНаКонецПериода, 0)) КАК ЧисленностьИнвалидовНаКонецПериода
	|ИЗ
	|	ВТСредняяЧисленностьПоМесяцам КАК СредняяЧисленностьПоМесяцам";
	
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(КонецПериода));
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЧисленности = СтатистикаПерсонала.ДанныеОЧисленности();
	Если Выборка.Следующий() Тогда
		ДанныеЧисленности.СреднесписочнаяЧисленностьРаботников = Окр(Выборка.СреднесписочнаяЧисленность);
		ДанныеЧисленности.СреднесписочнаяЧисленностьЖенщин = Окр(Выборка.СреднесписочнаяЧисленностьЖенщин); 
		ДанныеЧисленности.СреднесписочнаяЧисленностьИнвалидов = Окр(Выборка.СреднесписочнаяЧисленностьИнвалидов); 
		ДанныеЧисленности.ЧисленностьРаботников = Выборка.ЧисленностьНаКонецПериода;
		ДанныеЧисленности.ЧисленностьЖенщин = Выборка.ЧисленностьЖенщинНаКонецПериода;
		ДанныеЧисленности.ЧисленностьИнвалидов = Выборка.ЧисленностьИнвалидовНаКонецПериода;
	КонецЕсли;
	
	Возврат ДанныеЧисленности;
	
КонецФункции

Функция КритерииОтбораТОСП()
	
	Результат = Новый Структура;
	Результат.Вставить("ВключаемыеПодразделения",  Новый Массив);
	Результат.Вставить("ИсключаемыеПодразделения", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция КритерииОтбораПоОбособленномуПодразделению(ОбособленноеПодразделение, ПараметрыОтчета)
	
	Результат = КритерииОтбораТОСП();
	
	// Исключение данных обособленных подразделений.
	Если ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений")
		И ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Истина Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.ОбособленноеПодразделение");
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Результат.ИсключаемыеПодразделения.Добавить(Выборка.Подразделение);
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ПодразделенияОрганизаций.Ссылка
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
					|ГДЕ
					|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)";
				
				Запрос.УстановитьПараметр("Родитель", Выборка.Подразделение);
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					Результат.ИсключаемыеПодразделения, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные по обособленному подразделению.
	Если ОбособленноеПодразделение <> Неопределено Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.ОбособленноеПодразделение, "ОбособленноеПодразделение") Тогда
			
			Результат.ВключаемыеПодразделения.Добавить(ОбособленноеПодразделение);
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)");
			
			Запрос.УстановитьПараметр("Родитель", ОбособленноеПодразделение);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Результат.ВключаемыеПодразделения, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КритерииОтбораПоРегистрацииРеспондента(ПараметрыОтчета)
	
	// Если респондент:
	// - Организация без ТОСП, то берем все подразделения организации в полном составе.
	// - Организация имеющая ТОСП, то берем:
	//		* Если флаг "Исключать данные обособленных подразделений" не установлен то берем все подразделения;
	//		* Если флаг "Исключать данные обособленных подразделений" установлен
	//		   * Все подразделения кроме ТОСП;
	//		   * ТОСП использующие регистрацию организации или с не выбранной регистрацией;
	// - ТОСП, то берем:
	//		* Само это подразделение;
	//		* Все подразделения использующие эту же регистрацию (включая подчиненные);
	
	Результат = КритерииОтбораТОСП();
	
	СвойстваРеспондента = РегистрацииВОрганеСтатистикиВызовСервера.СвойстваРеспондентаПоРегистрации(ПараметрыОтчета.РегистрацияРеспондента);
	Если СвойстваРеспондента.ЭтоОрганизация Тогда
		
		ИсключитьДанныеОбособленныхПодразделений = Ложь;
		ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
		
		Если Не(СвойстваРеспондента.ИмеетТОСП И ИсключитьДанныеОбособленныхПодразделений) Тогда
			Возврат Результат;
		КонецЕсли;
			
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РегистрацииВОрганеСтатистики.Ссылка КАК Регистрация
			|ИЗ
			|	Справочник.РегистрацииВОрганеСтатистики КАК РегистрацииВОрганеСтатистики
			|ГДЕ
			|	РегистрацииВОрганеСтатистики.Владелец = &Организация
			|	И РегистрацииВОрганеСтатистики.Ссылка <> &РегистрацияРеспондента");
		
		Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
		Запрос.УстановитьПараметр("РегистрацияРеспондента", ПараметрыОтчета.РегистрацияРеспондента);
		
		РезультатЗапроса = Запрос.Выполнить();
		ИсключаемыеРегистрации = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Регистрация");
		ИсключаемыеПодразделения = Новый Массив;
		Для Каждого Регистрация Из ИсключаемыеРегистрации Цикл
			Подразделения = РегистрацииВОрганеСтатистикиВызовСервера.СтруктурныеЕдиницыПоРегистрации(Регистрация, ПараметрыОтчета.ДатаНачалаПериодаОтчета);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеПодразделения, Подразделения, Истина);
		КонецЦикла;
		
		Результат.ИсключаемыеПодразделения = ИсключаемыеПодразделения;
		
	Иначе
		
		Результат.ВключаемыеПодразделения = РегистрацииВОрганеСтатистикиВызовСервера.СтруктурныеЕдиницыПоРегистрации(ПараметрыОтчета.РегистрацияРеспондента, ПараметрыОтчета.ДатаНачалаПериодаОтчета);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти