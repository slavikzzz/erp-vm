////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции, используемые при отражения документов
//  в международном учете.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - см. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет")
			Или Документ.ДополнительныеСвойства.Свойство("НеРегистрироватьКОтражениюВМеждународномУчете")
				И Документ.ДополнительныеСвойства.НеРегистрироватьКОтражениюВМеждународномУчете Тогда
			Возврат Параметры;
		КонецЕсли;
		
		ТипыДокументовСНепосредственнымФормированиемПроводок = МеждународныйУчетПоДаннымДокументов.ТипыДокументовКОтражению();
		Если ТипыДокументовСНепосредственнымФормированиемПроводок[ТипЗнч(Документ.Ссылка)] <> Неопределено Тогда
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыБухгалтерии.Международный);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете);
		КонецЕсли;
		
		Параметры.ЕстьПроизводныеДвижения = Истина;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыСторно.Ссылка  КАК Регистратор,
		|	ДокументыСторно.Дата КАК Период,
		|	ОтражениеДокументовВМеждународномУчете.ПланСчетов КАК ПланСчетов,
		|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(ДокументыСторно.Дата, ДЕНЬ) КАК ДатаОтражения,
		|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация
		|ИЗ
		|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		&ИмяДокумента КАК ДокументыСторно
		|	ПО
		|		ОтражениеДокументовВМеждународномУчете.Регистратор = ДокументыСторно.СторнируемыйДокумент
		|		И ДокументыСторно.Ссылка В (&Ссылка)
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
		
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ТекстЗапроса);
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам международного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Или Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыМеждународный = "Таблица" + "Международный";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицыМеждународный) Тогда // без отложенных движений
		
		Если ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицыМеждународный]) Тогда
			
			Движения.Международный.Записывать = Истина;
			Движения.Международный.Загрузить(ТаблицыДляДвижений[ИмяТаблицыМеждународный]);
			
		КонецЕсли;
		
	Иначе // пробросим таблицы данных для последующего отражения после записи движений документа
		
		Если ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
			
			ИмяТаблицы = "Таблица" + "ОтражениеДокументовВРеглУчете";
			
			Если ТаблицыДляДвижений.Свойство(ИмяТаблицы) Тогда
				Движения.ОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства.Вставить(
					ИмяТаблицы,
					ТаблицыДляДвижений[ИмяТаблицы]);
			КонецЕсли;
			
			Если ТаблицыДляДвижений.Свойство("ТаблицаВыборочнойРегистрацииКОтражению") Тогда
				Движения.ОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства.Вставить(
					"ТаблицаВыборочнойРегистрацииКОтражению",
					ТаблицыДляДвижений.ТаблицаВыборочнойРегистрацииКОтражению);
			КонецЕсли;
		КонецЕсли;
		
		ИмяТаблицы = "Таблица" + "ОтражениеДокументовВМеждународномУчете";
		
		Если ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям")
			И ТаблицыДляДвижений.Свойство(ИмяТаблицы) Тогда
				Движения.ОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства.Вставить(
					ИмяТаблицы,
					ТаблицыДляДвижений[ИмяТаблицы]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//                                                      который используется для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//                                                      который используется для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	ЗарегистрироватьКОтражению(Документ, Документ.ДополнительныеСвойства, Документ.Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияДокументовКОтражениюВМеждународномУчете

// Возвращает документы к отражению в международном учете для заданных периодов отражения
//
// Параметры:
// 	ДокументыКОтражению -   ТаблицаЗначений, 
// 							МенеджерВременныхТаблиц - Таблица документов, которые надо вернуть к отражению, 
// 													  или менеджер временных таблиц имеющий таблицу ДокументыКОтражению
// 													  Таблица должна иметь колонки Документ, Организация, ДатаОтражения. 
//
Процедура ВернутьДокументыКОтражению(ДокументыКОтражению) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "МеждународныйУчет.ВозвратДокументовКОтражению";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	КоличествоДокументов = 0;
	
	МенеджерВременныхТаблиц = ИнициализироватьМенеджерДляВозвратаКОтражению(ДокументыКОтражению);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Отбор = Новый Структура("Период, Регистратор",'00010101',Неопределено);
		Пока Истина Цикл
			
			ДанныеКОтражению = ДанныеДляВозвратаКОтражениюВУчете(МенеджерВременныхТаблиц, Отбор);
			
			ВыборкаПоДокументам = ДанныеКОтражению.Регистраторы;
			Если ВыборкаПоДокументам.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ДанныеРегистра = ДанныеКОтражению.ДанныеРегистра;
			Отбор = Новый Структура("Период, Регистратор",'00010101',Неопределено);
			Пока ВыборкаПоДокументам.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей - 
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Регистратор);
				ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоДокументам);
				НайденныеСтроки = ДанныеРегистра.Скопировать(Отбор);
				Если НайденныеСтроки <> Неопределено Тогда
					Для Каждого НовыеДанные Из НайденныеСтроки Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, НовыеДанные);
					КонецЦикла;
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЦикла;
			КоличествоДокументов = КоличествоДокументов + ВыборкаПоДокументам.Количество();
		КонецЦикла;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДокументов);
	
КонецПроцедуры

// Формирует движения по регистру ОтражениеДокументовВМеждународномУчете, выполняет очистку неактуальных записей в Международный.
// Для документов отражаемых в международном учете по данным оборотных регистров и регл. учета.
//
// Параметры:
//  Объект - ДокументОбъект, Структура - документ регистрируемый к отражению.
//  ДополнительныеСвойства - Структура - дополнительные свойства документа инициализированные при проведении документа.
//  Движения - КоллекцияДвижений - наборы записей регистров записываемые документом.
//                                 На момент вызова метода все наборы должны быть записаны.
//  Отказ - Булево - признак отказа в проведении.
//
Процедура ЗарегистрироватьКОтражению(Объект, ДополнительныеСвойства, Движения, Отказ = Ложь) Экспорт
	
	Если Отказ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НеРегистрироватьКОтражениюВМеждународномУчете") 
		 И ДополнительныеСвойства.НеРегистрироватьКОтражениюВМеждународномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		
		Если НЕ Объект.Свойство("Дата") Тогда
			ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Дата");
			Объект.Вставить("Дата", ДатаДокумента);
		КонецЕсли;
		
		Если НЕ Движения.Свойство("Международный") Тогда
			Международный = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
			Международный.Отбор.Регистратор.Установить(Объект.Ссылка);
			Движения.Вставить("Международный", Международный);
		КонецЕсли;
		
		Если НЕ Движения.Свойство("ОтражениеДокументовВМеждународномУчете") Тогда
			ОтражениеДокументовВМеждународномУчете = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			ОтражениеДокументовВМеждународномУчете.Отбор.Регистратор.Установить(Объект.Ссылка);
			Движения.Вставить("ОтражениеДокументовВМеждународномУчете", ОтражениеДокументовВМеждународномУчете);
		КонецЕсли;
		
	КонецЕсли;
	
	ДвиженияМеждународный = Движения.Международный;
	ДвиженияМеждународный.ДополнительныеСвойства.Вставить("НеВыполнятьДопОбработкуПроводок", Истина);
	
	ДвиженияОтражениеДокументовВМеждународномУчете = Движения.ОтражениеДокументовВМеждународномУчете;
	
	ТаблицаРегистрации = Новый ТаблицаЗначений;
	ТаблицаРегистрации.Колонки.Добавить("Период",        Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРегистрации.Колонки.Добавить("ДатаОтражения", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаРегистрации.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	
	ВыборочнаяРегистрация = Ложь;
	ТаблицаВыборочнойРегистрации = Новый ТаблицаЗначений;
	ТаблицаВыборочнойРегистрации.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаВыборочнойРегистрации.Колонки.Добавить("ДатаОтражения", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	МеждународныйУчетПоДаннымОперативногоУчета.ДополнитьТаблицыРегистрацииКОтражению(
		Объект, ДвиженияОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства, ТаблицаРегистрации);
	МеждународныйУчетПоДаннымФинансовыхРегистров.ДополнитьТаблицыРегистрацииКОтражению(
		Объект, ДвиженияОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства, ТаблицаРегистрации);
	МеждународныйУчетПоДаннымРеглУчета.ДополнитьТаблицыРегистрацииКОтражению(
		Объект, ДополнительныеСвойства, ДвиженияОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства, ТаблицаРегистрации, ВыборочнаяРегистрация, ТаблицаВыборочнойРегистрации);
	МеждународныйУчетПоДаннымДокументов.ДополнитьТаблицыРегистрацииКОтражению(
		Объект, ДвиженияОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства, ТаблицаРегистрации);
	
	ТаблицаРегистрации.ЗаполнитьЗначения(Объект.Дата, "Период");
	ТаблицаРегистрации.Свернуть("Период, Организация, ДатаОтражения, ХозяйственнаяОперация");
	
	ДобавитьНастройкуФормированияПроводокИСтатус(ТаблицаРегистрации, Объект.Ссылка);
	
	Если НЕ ВыборочнаяРегистрация Тогда
		Если ТаблицаРегистрации.Количество() > 0 Тогда
			ТаблицаРегистрации.Сортировать("Период, ДатаОтражения");
			ДвиженияОтражениеДокументовВМеждународномУчете.Загрузить(ТаблицаРегистрации);
			ДвиженияОтражениеДокументовВМеждународномУчете.Записывать = Истина;
		Иначе
			ДвиженияОтражениеДокументовВМеждународномУчете.Прочитать();
			Если ДвиженияОтражениеДокументовВМеждународномУчете.Количество() > 0 Тогда
				ДвиженияОтражениеДокументовВМеждународномУчете.Очистить();
				ДвиженияОтражениеДокументовВМеждународномУчете.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	#Область ТекстЗапросаНовыхСтатусовРегистрации
	ТекстЗапросаНовыхСтатусов =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Период          КАК Период,
	|	ТаблицаДанных.ПланСчетов      КАК ПланСчетов,
	|	ТаблицаДанных.Организация     КАК Организация,
	|	ТаблицаДанных.ДатаОтражения   КАК ДатаОтражения,
	|	ТаблицаДанных.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ НоваяРегистрация
	|ИЗ
	|	&ТаблицаДанные КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВыборочнойРегистрации.Организация   КАК Организация,
	|	ТаблицаВыборочнойРегистрации.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ВыборочнаяРегистрация
	|ИЗ
	|	&ТаблицаВыборочнойРегистрации КАК ТаблицаВыборочнойРегистрации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументов.Период          КАК Период,
	|	ОтражениеДокументов.ПланСчетов      КАК ПланСчетов,
	|	ОтражениеДокументов.Организация     КАК Организация,
	|	ВЫБОР КОГДА ОтражениеДокументов.ДатаОтражения = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА НАЧАЛОПЕРИОДА(ОтражениеДокументов.Период, ДЕНЬ)
	|		ИНАЧЕ ОтражениеДокументов.ДатаОтражения
	|	КОНЕЦ КАК ДатаОтражения,
	|	ОтражениеДокументов.Статус          КАК Статус,
	|	ОтражениеДокументов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОтражениеДокументов.Комментарий     КАК Комментарий
	|ПОМЕСТИТЬ ТекущаяРегистрация
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Регистратор = &Ссылка
	|	И ОтражениеДокументов.НастройкаФормированияПроводок <> ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоваяРегистрация.Период КАК Период,
	|	НоваяРегистрация.ПланСчетов КАК ПланСчетов,
	|	НоваяРегистрация.Организация КАК Организация,
	|	НоваяРегистрация.ДатаОтражения КАК ДатаОтражения,
	|	ВЫБОР
	|		КОГДА ВыборочнаяРегистрация.ДатаОтражения ЕСТЬ NULL И НЕ ТекущаяРегистрация.Статус ЕСТЬ NULL
	|			ТОГДА ТекущаяРегистрация.Статус
	|		КОГДА ЕСТЬNULL(ТекущаяРегистрация.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА &КОтражениюВУчетеВручную
	|		ИНАЧЕ
	|			&КОтражениюВУчете
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА ВыборочнаяРегистрация.ДатаОтражения ЕСТЬ NULL
	|			ТОГДА ТекущаяРегистрация.Комментарий
	|		КОГДА ЕСТЬNULL(ТекущаяРегистрация.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА ТекущаяРегистрация.Комментарий
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Комментарий,
	|	НоваяРегистрация.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ НовыеСтатусы
	|ИЗ
	|	НоваяРегистрация КАК НоваяРегистрация
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТекущаяРегистрация КАК ТекущаяРегистрация
	|	ПО 
	|		НоваяРегистрация.ПланСчетов = ТекущаяРегистрация.ПланСчетов
	|		И НоваяРегистрация.Организация = ТекущаяРегистрация.Организация
	|		И НоваяРегистрация.ДатаОтражения = ТекущаяРегистрация.ДатаОтражения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ВыборочнаяРегистрация КАК ВыборочнаяРегистрация
	|	ПО 
	|		НоваяРегистрация.Организация = ВыборочнаяРегистрация.Организация	
	|		И НоваяРегистрация.ДатаОтражения = ВыборочнаяРегистрация.ДатаОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ПланСчетов КАК ПланСчетов,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ИзмененияСтатусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ПланСчетов КАК ПланСчетов,
	|		Таблица.ДатаОтражения КАК ДатаОтражения,
	|		Таблица.Организация КАК Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВУчете
	|				ТОГДА 1
	|			КОГДА Таблица.Статус = &ОтраженоВУчете
	|				ТОГДА 2
	|		КОНЕЦ КАК Статус
	|	ИЗ
	|		НовыеСтатусы КАК Таблица
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВУчете, &ОтраженоВУчете)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.ПланСчетов КАК ПланСчетов,
	|		Таблица.ДатаОтражения,
	|		Таблица.Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВУчете
	|				ТОГДА -1
	|			КОГДА Таблица.Статус = &ОтраженоВУчете
	|				ТОГДА -2
	|		КОНЕЦ
	|	ИЗ
	|		ТекущаяРегистрация КАК Таблица
	|
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВУчете, &ОтраженоВУчете)) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ПланСчетов,
	|	Таблица.ДатаОтражения,
	|	Таблица.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Статус) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеСтатусы.Период          КАК Период,
	|	НовыеСтатусы.ПланСчетов      КАК ПланСчетов,
	|	НовыеСтатусы.Организация     КАК Организация,
	|	НовыеСтатусы.ДатаОтражения   КАК ДатаОтражения,
	|	НовыеСтатусы.Статус          КАК Статус,
	|	НовыеСтатусы.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НовыеСтатусы.Комментарий     КАК Комментарий
	|ИЗ
	|	НовыеСтатусы КАК НовыеСтатусы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Международный.Период                                       КАК Период,
	|	Международный.ПланСчетов                                   КАК ПланСчетов,
	|	Международный.Организация                                  КАК Организация,
	|	
	|	Международный.ПодразделениеДт                              КАК ПодразделениеДт,
	|	Международный.СчетДт                                       КАК СчетДт,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт1, &ПустойВидСубконто) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(Международный.СубконтоДт1, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт2, &ПустойВидСубконто) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(Международный.СубконтоДт2, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт3, &ПустойВидСубконто) КАК ВидСубконтоДт3,
	|	ЕСТЬNULL(Международный.СубконтоДт3, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт3,
	|	Международный.ВалютаДт                                     КАК ВалютаДт,
	|	Международный.ВалютнаяСуммаДт                              КАК ВалютнаяСуммаДт,
	|	Международный.КоличествоДт                                 КАК КоличествоДт,
	|	
	|	Международный.ПодразделениеКт                              КАК ПодразделениеКт,
	|	Международный.СчетКт                                       КАК СчетКт,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт1, &ПустойВидСубконто) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(Международный.СубконтоКт1, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт2, &ПустойВидСубконто) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(Международный.СубконтоКт2, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт3, &ПустойВидСубконто) КАК ВидСубконтоКт3,
	|	ЕСТЬNULL(Международный.СубконтоКт3, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт3,
	|	Международный.ВалютаКт                                     КАК ВалютаКт,
	|	Международный.ВалютнаяСуммаКт                              КАК ВалютнаяСуммаКт,
	|	Международный.КоличествоКт                                 КАК КоличествоКт,
	|	
	|	Международный.Сумма                                        КАК Сумма,
	|	Международный.СуммаПредставления                           КАК СуммаПредставления,
	|	
	|	Международный.Содержание                                   КАК Содержание,
	|	Международный.ШаблонПроводки                               КАК ШаблонПроводки,
	|	Международный.ТипПроводки                                  КАК ТипПроводки
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(,,Регистратор = &Ссылка,,) КАК Международный
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИзмененияСтатусов КАК ИзмененияСтатусов
	|	ПО
	|		Международный.ПланСчетов = ИзмененияСтатусов.ПланСчетов
	|		И Международный.Организация = ИзмененияСтатусов.Организация
	|		И НАЧАЛОПЕРИОДА(Международный.Период, ДЕНЬ) = ИзмененияСтатусов.ДатаОтражения
	|ГДЕ
	|	ИзмененияСтатусов.Организация ЕСТЬ NULL";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапросаНовыхСтатусов);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДанные",     ТаблицаРегистрации);
	Запрос.УстановитьПараметр("Ссылка",            Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустойВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ОтраженоВУчете",      Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
	Запрос.УстановитьПараметр("КОтражениюВУчете",    Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете);
	Запрос.УстановитьПараметр("ОтраженоВУчетеВручную",   Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную);
	Запрос.УстановитьПараметр("КОтражениюВУчетеВручную", Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
	
	Запрос.УстановитьПараметр("ТаблицаВыборочнойРегистрации", ТаблицаВыборочнойРегистрации);
	
	Результат = Запрос.ВыполнитьПакет();
	Количество = Результат.Количество();
	
	Международный = Результат[Количество - 1].Выгрузить();
	ДвиженияМеждународный.Загрузить(Международный);
	ДвиженияМеждународный.Записывать = Истина;
	
	ТаблицаРегистрация = Результат[Количество - 2].Выгрузить();
	ДвиженияОтражениеДокументовВМеждународномУчете.Загрузить(ТаблицаРегистрация);
	ДвиженияОтражениеДокументовВМеждународномУчете.Записывать = Истина;
	
	ОчиститьДвижения = ТаблицаРегистрация.Количество() = 0;// документ распровели
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		Если ДвиженияМеждународный.Количество() > 0 ИЛИ ОчиститьДвижения Тогда
			ДвиженияМеждународный.Записать();
		КонецЕсли;
		Если ДвиженияОтражениеДокументовВМеждународномУчете.Количество() > 0 ИЛИ ОчиститьДвижения Тогда
			ДвиженияОтражениеДокументовВМеждународномУчете.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует документы расчетов с партнерами к отражению в международном учете.
//
// Параметры:
//	ТаблицаРасчетов - ТаблицаЗначений - Таблица изменений по расчетам с партнерами:
//	                      * Регистратор - ДокументСсылка - Документ-регистратор движений
//	                      * Период - Дата - Период движений
//	                      * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика учета.
//
Процедура ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВМеждународномУчете(ТаблицаРасчетов) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	МассивТекстовЗапроса = Новый Массив;
	Если ТипЗнч(ТаблицаРасчетов) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРасчетов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыКОтражению.Регистратор КАК Регистратор,
		|	ДокументыКОтражению.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДокументыКОтражению.Период КАК Период
		|ПОМЕСТИТЬ РасчетыКОтражениюВУчете
		|ИЗ
		|	&ДокументыКОтражению КАК ДокументыКОтражению
		|ГДЕ
		|	ДокументыКОтражению.Регистратор <> НЕОПРЕДЕЛЕНО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам";
		Запрос.УстановитьПараметр("ДокументыКОтражению", ТаблицаРасчетов);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	Иначе
		Запрос.МенеджерВременныхТаблиц = ТаблицаРасчетов;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Период КАК Период,
	|	ТаблицаДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаДокументов.Регистратор КАК Документ,
	|	ТаблицаДокументов.Организация КАК Организация
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаДокументов.Период КАК Период,
	|		ТаблицаДокументов.Период КАК ДатаОтражения,
	|		ТаблицаДокументов.Регистратор КАК Регистратор,
	|		Аналитика.Организация КАК Организация
	|	ИЗ
	|		РасчетыКОтражениюВУчете КАК ТаблицаДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ТаблицаДокументов.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ТаблицаДокументов.Регистратор) <> ТИП(Документ.РегистраторРасчетов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РегистраторРасчетов.Дата КАК Период,
	|		ТаблицаДокументов.Период КАК ДатаОтражения,
	|		ТаблицаДокументов.Регистратор КАК Регистратор,
	|		Аналитика.Организация КАК Организация
	|	ИЗ
	|		РасчетыКОтражениюВУчете КАК ТаблицаДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|			ПО ТаблицаДокументов.Регистратор = РегистраторРасчетов.Ссылка
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ТаблицаДокументов.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаДокументов.Период,
	|		ТаблицаДокументов.Период,
	|		ТаблицаДокументов.Регистратор,
	|		Аналитика.Контрагент
	|	ИЗ
	|		РасчетыКОтражениюВУчете КАК ТаблицаДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ТаблицаДокументов.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	ГДЕ
	|		Аналитика.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И ТИПЗНАЧЕНИЯ(ТаблицаДокументов.Регистратор) В (
	|			ТИП(Документ.ВозвратТоваровМеждуОрганизациями),
	|			ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|			ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании),
	|			ТИП(Документ.ПередачаТоваровМеждуОрганизациями))
	|
	|	) КАК ТаблицаДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Период,
	|	ТаблицаДокументов.ДатаОтражения,
	|	ТаблицаДокументов.Регистратор,
	|	ТаблицаДокументов.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Документ,
	|	Организация,
	|	ДатаОтражения";
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.ВыполнитьПакет();
	
	ВернутьДокументыКОтражению(Запрос.МенеджерВременныхТаблиц);
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, "ДокументыКОтражению");
	
КонецПроцедуры

// Записывает движения по регистру ОтражениеДокументаВМеждународномУчете, выполняет очистку неактуальных записей в Международный.
// Вызывается из оффлайновых общих модулей НДС.
//
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, имеющий таблицы
// 		ТаблицаТекущейРегистрации и ТаблицаВыборочнойРегистрации.
// 		Таблицы должны иметь колонки Документ, Организация, ДатаОтражения.
// 	КоличествоОбработанных - Число - Параметр, в котором необходимо вернуть количество возвращенных к отражению документов.
//
Процедура ВернутьДокументыКОтражениюВыборочноПакетно(МенеджерВременныхТаблиц, КоличествоОбработанных = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
	 	Возврат;
	КонецЕсли;

	ПолучитьНастройкуФормированияПроводокИСтатус(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТекущейРегистрации.Документ КАК Документ
	|ПОМЕСТИТЬ ТолькоДокументыКОтражению
	|ИЗ
	|	ТаблицаТекущейРегистрации КАК ТаблицаТекущейРегистрации
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТекущейРегистрации.Период КАК Период,
	|	ТаблицаТекущейРегистрации.Документ КАК Документ,
	|	ТаблицаТекущейРегистрации.ПланСчетов КАК ПланСчетов,
	|	ТаблицаТекущейРегистрации.Организация КАК Организация,
	|	ТаблицаТекущейРегистрации.ДатаОтражения КАК ДатаОтражения,
	|	ДопСвойства.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДопСвойства.Статус КАК Статус
	|ПОМЕСТИТЬ ТаблицаТекущейРегистрацииСвернуто
	|ИЗ
	|	ТаблицаТекущейРегистрации КАК ТаблицаТекущейРегистрации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаФормированияПроводокИСтатус КАК ДопСвойства
	|	ПО 
	|		ТаблицаТекущейРегистрации.ПланСчетов = ДопСвойства.ПланСчетов
	|		И ТаблицаТекущейРегистрации.Организация = ДопСвойства.Организация
	|		И ТаблицаТекущейРегистрации.ДатаОтражения = ДопСвойства.ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВыборочнойРегистрации.Документ КАК Документ,
	|	ТаблицаВыборочнойРегистрации.Организация КАК Организация,
	|	ТаблицаВыборочнойРегистрации.ДатаОтражения КАК ДатаОтражения,
	|	ДопСвойства.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДопСвойства.Статус КАК Статус
	|ПОМЕСТИТЬ ТаблицаВыборочнойРегистрацииСвернуто
	|ИЗ
	|	ТаблицаВыборочнойРегистрации КАК ТаблицаВыборочнойРегистрации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаФормированияПроводокИСтатус КАК ДопСвойства
	|	ПО ТаблицаВыборочнойРегистрации.Организация = ДопСвойства.Организация
	|		И ТаблицаВыборочнойРегистрации.ДатаОтражения = ДопСвойства.ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументов.Период КАК Период,
	|	ОтражениеДокументов.Регистратор КАК Документ,
	|	ОтражениеДокументов.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументов.Организация КАК Организация,
	|	ОтражениеДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументов.Статус КАК Статус,
	|	ОтражениеДокументов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОтражениеДокументов.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ТекущиеСтатусы
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТолькоДокументыКОтражению КАК ТолькоДокументыКОтражению
	|		ПО ОтражениеДокументов.Регистратор = ТолькоДокументыКОтражению.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыборочнойРегистрации.Документ КАК Документ,
	|	МИНИМУМ(ТаблицаВыборочнойРегистрации.ДатаОтражения) КАК ДатаОтражения
	|ПОМЕСТИТЬ НачалоИзмененийВыборочнойРегистрации
	|ИЗ
	|	ТаблицаВыборочнойРегистрацииСвернуто КАК ТаблицаВыборочнойРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыборочнойРегистрации.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТекущиеСтатусы.Период, ТаблицаТекущейРегистрации.Период) КАК Период,
	|	ТаблицаТекущейРегистрации.Документ КАК Документ,
	|	ТаблицаТекущейРегистрации.ПланСчетов КАК ПланСчетов,
	|	ТаблицаТекущейРегистрации.Организация КАК Организация,
	|	ТаблицаТекущейРегистрации.ДатаОтражения КАК ДатаОтражения,
	|	ВЫБОР
	|		КОГДА ТаблицаВыборочнойРегистрации.ДатаОтражения ЕСТЬ NULL
	|				И НЕ ТекущиеСтатусы.Статус ЕСТЬ NULL
	|			ТОГДА ТекущиеСтатусы.Статус
	|		КОГДА ЕСТЬNULL(ТекущиеСтатусы.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА &КОтражениюВУчетеВручную
	|		ИНАЧЕ &КОтражениюВУчете
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА ТаблицаВыборочнойРегистрации.ДатаОтражения ЕСТЬ NULL
	|			ТОГДА ТекущиеСтатусы.Комментарий
	|		КОГДА ЕСТЬNULL(ТекущиеСтатусы.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА ТекущиеСтатусы.Комментарий
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Комментарий,
	|	ТаблицаТекущейРегистрации.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ НовыеСтатусы
	|ИЗ
	|	ТаблицаТекущейРегистрацииСвернуто КАК ТаблицаТекущейРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеСтатусы КАК ТекущиеСтатусы
	|		ПО ТаблицаТекущейРегистрации.Документ = ТекущиеСтатусы.Документ
	|			И ТаблицаТекущейРегистрации.ПланСчетов = ТекущиеСтатусы.ПланСчетов
	|			И ТаблицаТекущейРегистрации.Организация = ТекущиеСтатусы.Организация
	|			И ТаблицаТекущейРегистрации.ДатаОтражения = ТекущиеСтатусы.ДатаОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВыборочнойРегистрацииСвернуто КАК ТаблицаВыборочнойРегистрации
	|		ПО ТаблицаТекущейРегистрации.Документ = ТаблицаВыборочнойРегистрации.Документ
	|			И ТаблицаТекущейРегистрации.Организация = ТаблицаВыборочнойРегистрации.Организация
	|			И ТаблицаТекущейРегистрации.ДатаОтражения = ТаблицаВыборочнойРегистрации.ДатаОтражения
	|ГДЕ
	|	ТаблицаВыборочнойРегистрации.ДатаОтражения ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Документ КАК Документ,
	|	Таблица.ПланСчетов КАК ПланСчетов,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ИзмененияСтатусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Документ КАК Документ,
	|		Таблица.ПланСчетов КАК ПланСчетов,
	|		Таблица.ДатаОтражения КАК ДатаОтражения,
	|		Таблица.Организация КАК Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВУчете
	|				ТОГДА 1
	|			КОГДА Таблица.Статус = &ОтраженоВУчете
	|				ТОГДА 2
	|		КОНЕЦ КАК Статус
	|	ИЗ
	|		НовыеСтатусы КАК Таблица
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВУчете, &ОтраженоВУчете)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Документ,
	|		Таблица.ПланСчетов КАК ПланСчетов,
	|		Таблица.ДатаОтражения,
	|		Таблица.Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВУчете
	|				ТОГДА -1
	|			КОГДА Таблица.Статус = &ОтраженоВУчете
	|				ТОГДА -2
	|		КОНЕЦ
	|	ИЗ
	|		ТекущиеСтатусы КАК Таблица
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВУчете, &ОтраженоВУчете)) КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачалоИзмененийВыборочнойРегистрации КАК НачалоИзменений
	|		ПО Таблица.Документ = НачалоИзменений.Документ
	|ГДЕ
	|	Таблица.ДатаОтражения >= ЕСТЬNULL(НАЧАЛОПЕРИОДА(НачалоИзменений.ДатаОтражения, МЕСЯЦ), ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Документ,
	|	Таблица.ПланСчетов,
	|	Таблица.ДатаОтражения,
	|	Таблица.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Статус) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеСтатусы.Период КАК Период,
	|	НовыеСтатусы.Документ КАК Документ,
	|	НовыеСтатусы.ПланСчетов КАК ПланСчетов,
	|	НовыеСтатусы.Организация КАК Организация,
	|	НовыеСтатусы.ДатаОтражения КАК ДатаОтражения,
	|	НовыеСтатусы.Статус КАК Статус,
	|	НовыеСтатусы.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НовыеСтатусы.Комментарий КАК Комментарий
	|ИЗ
	|	НовыеСтатусы КАК НовыеСтатусы
    |
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ,
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|
	|ИТОГИ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Международный.Период КАК Период,
	|	Международный.Регистратор КАК Регистратор,
	|	Международный.ПланСчетов КАК ПланСчетов,
	|	Международный.Организация КАК Организация,
	|	Международный.ПодразделениеДт КАК ПодразделениеДт,
	|	Международный.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	Международный.СчетДт КАК СчетДт,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт1, &ПустойВидСубконто) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(Международный.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт2, &ПустойВидСубконто) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(Международный.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт3, &ПустойВидСубконто) КАК ВидСубконтоДт3,
	|	ЕСТЬNULL(Международный.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	Международный.ВалютаДт КАК ВалютаДт,
	|	Международный.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	Международный.ПодразделениеКт КАК ПодразделениеКт,
	|	Международный.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	Международный.СчетКт КАК СчетКт,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт1, &ПустойВидСубконто) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(Международный.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт2, &ПустойВидСубконто) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(Международный.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт3, &ПустойВидСубконто) КАК ВидСубконтоКт3,
	|	ЕСТЬNULL(Международный.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	Международный.ВалютаКт КАК ВалютаКт,
	|	Международный.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	Международный.Сумма КАК Сумма,
	|	Международный.СуммаПредставления КАК СуммаПредставления,
	|	Международный.Содержание КАК Содержание
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор В (ВЫБРАТЬ Т.Документ ИЗ ТолькоДокументыКОтражению КАК Т),
	|			,
	|		) КАК Международный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененияСтатусов КАК ИзмененияСтатусов
	|		ПО Международный.Регистратор = ИзмененияСтатусов.Документ
	|			И Международный.ПланСчетов = ИзмененияСтатусов.ПланСчетов
	|			И Международный.Организация = ИзмененияСтатусов.Организация
	|			И (НАЧАЛОПЕРИОДА(Международный.Период, ДЕНЬ) = ИзмененияСтатусов.ДатаОтражения)
	|ГДЕ
	|	ИзмененияСтатусов.Организация ЕСТЬ NULL";
	#КонецОбласти

	Запрос.УстановитьПараметр("ПустойВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка());

	Запрос.УстановитьПараметр("ОтраженоВУчете",      Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
	Запрос.УстановитьПараметр("КОтражениюВУчете",    Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете);
	Запрос.УстановитьПараметр("ОтраженоВУчетеВручную",   Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную);
	Запрос.УстановитьПараметр("КОтражениюВУчетеВручную", Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);

	Результат = Запрос.ВыполнитьПакет();
	Количество = Результат.Количество();

	ИзмененияСтатусов = Запрос.МенеджерВременныхТаблиц.Таблицы.Получить("ИзмененияСтатусов").ПолучитьДанные().Выгрузить();
	
	РезультатМеждународный = Результат[Количество - 1]; // РезультатЗапроса - 
	Международный = РезультатМеждународный.Выгрузить();
	Международный.Индексы.Добавить("Регистратор");
	
	РезультатПоДокументам = Результат[Количество - 2]; // РезультатЗапроса -
	ВыборкаПоДокументам = РезультатПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТипыДокументовКОтражению = Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СтандартныеРеквизиты.Регистратор.Тип;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ДвиженияМеждународный = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
		ДвиженияМеждународный.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Документ);
		ДвиженияМеждународный.Записывать = Истина;

		МеждународныйПоДокументу = Международный.СкопироватьКолонки();
		НайденныеСтроки = Международный.НайтиСтроки(Новый Структура("Регистратор", ВыборкаПоДокументам.Документ));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = МеждународныйПоДокументу.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;

		ДвиженияМеждународный.Загрузить(МеждународныйПоДокументу);
		ДвиженияМеждународный.Записать();

		ЕстьИзменения = Не ИзмененияСтатусов.Найти(ВыборкаПоДокументам.Документ, "Документ") = Неопределено;
		Если ТипыДокументовКОтражению.СодержитТип(ТипЗнч(ВыборкаПоДокументам.Документ)) И ЕстьИзменения Тогда
			НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Документ);

			Выборка = ВыборкаПоДокументам.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			КонецЦикла;

			НаборЗаписей.Записать();
			Если ТипЗнч(КоличествоОбработанных) = Тип("Число") Тогда
				КоличествоОбработанных = КоличествоОбработанных + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	СписокТаблицДляУничтожения = 
		"ТаблицаТекущейРегистрацииСвернуто,
		|ТаблицаВыборочнойРегистрацииСвернуто,
		|ТолькоДокументыКОтражению,
		|НачалоИзмененийВыборочнойРегистрации,
		|НастройкаФормированияПроводокИСтатус,
		|ТекущиеСтатусы,
		|НовыеСтатусы,
		|ИзмененияСтатусов";
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, СписокТаблицДляУничтожения);

КонецПроцедуры

#КонецОбласти

#Область ФормированиеПроводок

// Возвращает параметры отражения в международном учете
// 
// Возвращаемое значение:
// 	Структура - Параметры отражения:
// 		* Документы - ДокументСсылка, Массив Из ДокументСсылка - Отбор по конкретным документам, Если Неопределено, то все.
// 		* Организации - СправочникСсылка.Организации, Массив Из СправочникСсылка.Организации - Отбор по организациям. Если Неопределено, то все.
// 		* ДатаОкончания - Дата - Отбор документов к отражению по дате. По умолчанию все документы.
// 		* ЗаписыватьПроводки - Булево - Записывать проводки, получившиеся в результате отражения.
// 		* ВыполнитьПересчеты - Булево - Выполнять офлайновые операции перед формированием проводок.
// 		* ПроверятьСтатусОтражения - Булево - Выполнять отражение для документов с определенными значениями статуса в регистре ОтражениеДокументовВМеждународномУчете.
// 		* ПланыСчетовСКорреспонденцией - Массив из СправочникСсылка.ПланыСчетовМеждународногоУчета - Планы счетов с поддержкой корреспонденции
// 		* ПланыСчетовБезКорреспонденции - Массив из СправочникСсылка.ПланыСчетовМеждународногоУчета - Планы счетов без поддержки корреспонденции
// 		* ПрогнозныеПараметры - см. ПрогнозныеПараметрыОтраженияВМеждународномУчете.
// 		* ПроводокДляПереходаВФон - Число - Количество формируемых проводок, начиная с которого отражение выполняется в фоновом задании при интерактивном запуске.
// 		* МинимальныйРазмерПорции - Число - Количество формируемых проводок, начиная с которого отражение выполняется в несколько потоков, если возможно.
// 		* КоличествоПотоков - Число - Количество сеансов отражения документов, выполняющихся одновременно.
// 		* КоличествоПопыток - Число - Количество попыток обработки одной порции документов.
// 		* ИспользованиеТекущихИтогов - Булево - Сохраняет состояние использования текущих итогов в регистрах бухгалтерии перед отражением в многопоточном режиме.
// 		* МаксимальныйПериодИтогов - Дата - Сохраняет максимальный хранимый период итогов в регистрах бухгалтерии перед отражением в многопоточном режиме.
// 		* МинимальныйПериодИтогов - Дата - Сохраняет минимальный хранимый период итогов в регистрах бухгалтерии перед отражением в многопоточном режиме.
// 		* ВосстановитьСостояниеИтогов - Булево - Сохраняет необходимость восстановления состояния итогов регистров бухгалтерии после отражения в многопоточном режиме.
// 
Функция ПараметрыОтраженияВМеждународномУчете() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Документы", Неопределено);
	Параметры.Вставить("Организации", Неопределено);
	Параметры.Вставить("ДатаОкончания", '00010101');
	Параметры.Вставить("ЗаписыватьПроводки", Истина);
	Параметры.Вставить("ВыполнитьПересчеты", Истина);
	Параметры.Вставить("ПроверятьСтатусОтражения", Истина);
	Параметры.Вставить("ПланыСчетовСКорреспонденцией", Новый Массив());
	Параметры.Вставить("ПланыСчетовБезКорреспонденции", Новый Массив());
	Параметры.Вставить("ПрогнозныеПараметры", Неопределено);
	Параметры.Вставить("ПроводокДляПереходаВФон", 100);
	Параметры.Вставить("МинимальныйРазмерПорции", 2000);
	Параметры.Вставить("КоличествоПотоков", КоличествоПотоковОтраженияВМеждународномУчете());
	Параметры.Вставить("КоличествоПопыток", 3);
	Параметры.Вставить("ИспользованиеТекущихИтогов", Ложь);
	Параметры.Вставить("МаксимальныйПериодИтогов", '00010101');
	Параметры.Вставить("МинимальныйПериодИтогов", '00010101');
	Параметры.Вставить("ВосстановитьСостояниеИтогов", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Обработчик вызываемый регламентным заданием ОтражениеДокументовВМеждународномУчете.
//
Процедура ОтразитьВМеждународномУчетеРегламентнымЗаданием() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтражениеДокументовВМеждународномУчете);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтражения = ПараметрыОтраженияВМеждународномУчете();
	ОтразитьВМеждународномУчете(ПараметрыОтражения);

КонецПроцедуры

// Начинает отражение документов в международном учете в длительной операции.
//
// Параметры:
//	ПараметрыОтраженияВМеждународномУчете - См. ПараметрыОтраженияВМеждународномУчете
//	ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы, из которой запущено отражение документов в учете
//
// Возвращаемое значение:
//	См. ДлительныеОперации.ВыполнитьФункцию
//
Функция НачатьОтражениеВМеждународномУчете(ПараметрыОтраженияВМеждународномУчете, ИдентификаторФормы) Экспорт
	
	ВыполняемаяФункция = "МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отражение документов в международном учете';
															|en = 'Record documents in financial accounting'");
	
	Если ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры = Неопределено Тогда
		ЗаполнитьПрогнозныеПараметры(ПараметрыОтраженияВМеждународномУчете);
	КонецЕсли;
	
	КоличествоПроводок = ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры.КоличествоПроводок;
	
	Если КоличествоПроводок < ПараметрыОтраженияВМеждународномУчете.ПроводокДляПереходаВФон Тогда
		ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ВыполняемаяФункция, ПараметрыОтраженияВМеждународномУчете);
	
КонецФункции

// Выполняет отражение документов в международном учете.
//
// Параметры:
//	ПараметрыОтраженияВМеждународномУчете - см. ПараметрыОтраженияВМеждународномУчете
//	НомерИтерации - Число - Текущий номер повтора выполнения
//
// Возвращаемое значение:
//	см. ТаблицаПроводок
//
Функция ОтразитьВМеждународномУчете(ПараметрыОтраженияВМеждународномУчете, Знач НомерИтерации = 0) Экспорт
	
	НомерИтерации = НомерИтерации + 1;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОтраженияВМеждународномУчете.ВыполнитьПересчеты Тогда
		ВыполнитьОффлайновыеРасчеты(
			ПараметрыОтраженияВМеждународномУчете.Организации,
			ПараметрыОтраженияВМеждународномУчете.ДатаОкончания,
			ПараметрыОтраженияВМеждународномУчете.Документы);
	КонецЕсли;
	
	Если НомерИтерации = 1 Тогда
		ЗамерДлительнойОперации = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("МеждународныйУчет.ОтражениеВМеждународномУчете");
	КонецЕсли;
	
	Если ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры = Неопределено Тогда
		ЗаполнитьПрогнозныеПараметры(ПараметрыОтраженияВМеждународномУчете);
	КонецЕсли;
	
	КоличествоПорций = ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры.КоличествоПорций;
	
	Если КоличествоПорций <= 1 Тогда
		КоличествоПотоков = 1;
	Иначе
		КоличествоПотоков = ПараметрыОтраженияВМеждународномУчете.КоличествоПотоков;
	КонецЕсли;
	
	Если КоличествоПотоков > 1 Тогда
		ПорцииРазныхТипов = КоличествоПорций >= КоличествоПотоков;
		ПараметрыФормированияПроводок = Неопределено;
	Иначе
		ПорцииРазныхТипов = Ложь;
		ПараметрыФормированияПроводок = ПараметрыФормированияПроводок(ПараметрыОтраженияВМеждународномУчете);
	КонецЕсли;
	
	Если НомерИтерации = 1
	   И РекомендуетсяВыключениеИтоговРегистров(ПараметрыОтраженияВМеждународномУчете) Тогда
		ВыключитьИтогиМеждународныхРегистров(ПараметрыОтраженияВМеждународномУчете);
	КонецЕсли;
	
	ТаблицаПроводок = ТаблицаПроводок();
	ТаблицаУправленияПотоками = ТаблицаУправленияПотоками();
	ТаблицаУправленияПорциями = ТаблицаУправленияПорциями(ПараметрыОтраженияВМеждународномУчете, ПорцииРазныхТипов);
	
	ИндексПорции = 0;
	
	Пока ТаблицаУправленияПорциями.Количество() > 0 Цикл
		Если ИндексПорции >= ТаблицаУправленияПорциями.Количество() Тогда
			ИндексПорции = 0;
		КонецЕсли;
		
		Если ТаблицаУправленияПорциями.Количество() < КоличествоПотоков Тогда
			ПорцииРазныхТипов = Ложь;
		КонецЕсли;
		
		ПараметрыПорции = ТаблицаУправленияПорциями[ИндексПорции];
		
		Если ПорцииРазныхТипов И ТаблицаУправленияПотоками.Найти(ПараметрыПорции.НомерПорции, "НомерПорции") <> Неопределено Тогда
			ИндексПорции = ИндексПорции + 1;
			Продолжить;
		КонецЕсли;
		
		Если КоличествоПотоков = 1
		 ИЛИ ПараметрыПорции.КоличествоПорций > 1
		 ИЛИ ЗначениеЗаполнено(ПараметрыОтраженияВМеждународномУчете.Документы) Тогда
			ДокументыКОтражениюВУчете = ДокументыКОтражениюВУчете(
				ПараметрыОтраженияВМеждународномУчете,
				ПараметрыФормированияПроводок,
				ПараметрыПорции);
		Иначе
			ДополнитьПараметрыЕдинственнойПорции(ПараметрыПорции);
		КонецЕсли;
		
		Если ПараметрыПорции.ПоследняяПорция
		   И ПараметрыПорции.НачальныйМоментВремени = ПараметрыПорции.КонечныйМоментВремени Тогда
			ТаблицаУправленияПорциями.Удалить(ПараметрыПорции);
			Продолжить;
		КонецЕсли;
		
		Если КоличествоПотоков = 1 Тогда
			ПорцияПроводок = ОтразитьПорциюДокументовТекущимПотоком(
				ДокументыКОтражениюВУчете,
				ПараметрыОтраженияВМеждународномУчете,
				ПараметрыФормированияПроводок);
			
			Если НЕ ПараметрыОтраженияВМеждународномУчете.ЗаписыватьПроводки Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПорцияПроводок, ТаблицаПроводок);
			КонецЕсли;
		Иначе
			ПараметрыПотока = ТаблицаУправленияПотоками.Добавить();
			ЗаполнитьЗначенияСвойств(ПараметрыПотока, ПараметрыПорции);
			
			Если ТипЗнч(ПараметрыОтраженияВМеждународномУчете.Документы) = Тип("Массив") Тогда
				Пока ДокументыКОтражениюВУчете.Следующий() Цикл
					ПараметрыПотока.Документы.Добавить(ДокументыКОтражениюВУчете.МоментВремени.Ссылка);
				КонецЦикла;
			КонецЕсли;
			
			ЭтоПоследняяПорция = ПараметрыПорции.ПоследняяПорция И ТаблицаУправленияПорциями.Количество() = 1;
			
			НачатьОтражениеПорцииДокументовНовымПотоком(ПараметрыОтраженияВМеждународномУчете,
				ПараметрыПотока, ЭтоПоследняяПорция);
			
			Если ЭтоПоследняяПорция Тогда
				Если НЕ ПараметрыОтраженияВМеждународномУчете.ЗаписыватьПроводки Тогда
					ПорцияПроводок = ПолучитьИзВременногоХранилища(ПараметрыПотока.АдресРезультата);
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПорцияПроводок, ТаблицаПроводок);
				КонецЕсли;
				
				ТаблицаУправленияПотоками.Удалить(ПараметрыПотока);
				ОжидатьЗавершенияВыполнения = Истина;
			Иначе
				ОжидатьЗавершенияВыполнения = ТаблицаУправленияПотоками.Количество() >= КоличествоПотоков;
			КонецЕсли;
			
			Если ОжидатьЗавершенияВыполнения Тогда
				ОжидатьЗавершенияПотоковОтражения(ПараметрыОтраженияВМеждународномУчете,
					ТаблицаУправленияПотоками, ТаблицаПроводок, ЭтоПоследняяПорция);
				ИндексПорции = 0;
			ИначеЕсли НЕ ПараметрыПорции.ПоследняяПорция Тогда
				ИндексПорции = ИндексПорции + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПорции.ПоследняяПорция Тогда
			ТаблицаУправленияПорциями.Удалить(ПараметрыПорции);
		КонецЕсли;
		
		Если ПараметрыФормированияПроводок <> Неопределено Тогда
			УничтожитьВременныеТаблицы(ПараметрыФормированияПроводок.МенеджерВременныхТаблиц);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаУправленияПотоками.Количество() > 0 Тогда
		ОжидатьЗавершенияПотоковОтражения(ПараметрыОтраженияВМеждународномУчете,
			ТаблицаУправленияПотоками, ТаблицаПроводок, Истина);
	КонецЕсли;
	
	КоличествоДокументов = ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры.КоличествоДокументов;
	
	Если ПараметрыОтраженияВМеждународномУчете.ПроверятьСтатусОтражения
	   И НомерИтерации < ПараметрыОтраженияВМеждународномУчете.КоличествоПопыток Тогда
		ЗаполнитьПрогнозныеПараметры(ПараметрыОтраженияВМеждународномУчете);
		Если ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры.КоличествоДокументов > 0 Тогда
			ПорцияПроводок = ОтразитьВМеждународномУчете(ПараметрыОтраженияВМеждународномУчете, НомерИтерации);
			Если НЕ ПараметрыОтраженияВМеждународномУчете.ЗаписыватьПроводки Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПорцияПроводок, ТаблицаПроводок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерИтерации = 1 Тогда
		Если ПараметрыОтраженияВМеждународномУчете.ВосстановитьСостояниеИтогов Тогда
			ВключитьИтогиМеждународныхРегистров(ПараметрыОтраженияВМеждународномУчете);
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерДлительнойОперации, КоличествоДокументов);
	КонецЕсли;
	
	Возврат ТаблицаПроводок;
	
КонецФункции

// По передаваемой в качестве параметра таблице проводок, возвращает таблицу проводок, удовлетворяющих условиям записи.
//
// Параметры:
//	ПроводкиДокумента - см. ТаблицаПроводок
//	ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета, Массив из СправочникСсылка.ПланыСчетовМеждународногоУчета - отбор по плану счетов
//	ОтбиратьПоПлануСчетов - Булево - необходимость выполнения отбора по плану счетов
//
// Возвращаемое значение:
//	 см. ТаблицаПроводок
//
Функция ЗаписываемыеПроводки(ПроводкиДокумента, ПланСчетов, Знач ОтбиратьПоПлануСчетов = Истина) Экспорт
	
	Если НЕ ОтбиратьПоПлануСчетов Тогда
		ЗаписываемыеПроводки = ПроводкиДокумента.Скопировать();
	Иначе
		Если ТипЗнч(ПланСчетов) <> Тип("Массив") Тогда
			ОтборПоПлануСчетов = ПланСчетов;
		ИначеЕсли ПланСчетов.Количество() = 1 Тогда
			ОтборПоПлануСчетов = ПланСчетов[0];
		Иначе
			ОтборПоПлануСчетов = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПоПлануСчетов) Тогда
			ОтбиратьПоПлануСчетов = Ложь;
			ЗаписываемыеПроводки = ПроводкиДокумента.Скопировать(Новый Структура("ПланСчетов", ОтборПоПлануСчетов));
		Иначе
			ЗаписываемыеПроводки = ПроводкиДокумента.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	ИсключаемыеПроводки = Новый Массив;
	
	Для каждого Проводка Из ЗаписываемыеПроводки Цикл
		Если Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
			И Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную
			И Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
			ИсключаемыеПроводки.Добавить(Проводка);
		ИначеЕсли Проводка.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
			И Не ЗначениеЗаполнено(Проводка.СчетДт) 
			И Не ЗначениеЗаполнено(Проводка.СчетКт) Тогда
			// Запись добавлена для отметки отработки документа, если по документу не было данных к отражению.
			ИсключаемыеПроводки.Добавить(Проводка);
		ИначеЕсли ОтбиратьПоПлануСчетов И ПланСчетов.Найти(Проводка.ПланСчетов) = Неопределено Тогда
			ИсключаемыеПроводки.Добавить(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Проводка Из ИсключаемыеПроводки Цикл
		ЗаписываемыеПроводки.Удалить(Проводка);
	КонецЦикла;
	
	Возврат ЗаписываемыеПроводки;

КонецФункции

// Проверяет равенство идентификаторов статусов отражения, считанных в момент начала формирования проводок
// и перед записью сформированных проводок. При совпадении идентификаторов обновляет статус отражения
// документа в международном учете и комментарий на основе статусов сформированных проводок.
//
// Параметры:
//	Документ - ДокументСсылка - ссылка на документ.
//	Измерения - ТаблицаЗначений - Таблица измерений, по которым нужно обновить статус отражения. Колонки таблицы:
//			* ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов для обновления статуса
//			* Организация - СправочникСсылка.Организации - Организация для обновления статуса
//			* ДатаОтражения - Дата - Дата отражения, накоторую нужно обновить статус
//			* ИдентификаторСтатуса - УникальныйИдентификатор - Значение идентификатора, считанное в момент начала формирования проводок
//	ПроводкиДокумента - ТаблицаЗначений - Таблица проводок документа, на основании которой обновляется статус. Колонки таблицы:
//			* Период - Дата - Период проводки
//			* ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов для отметки статуса
//			* Организация - СправочникСсылка.Организации - Организация для отметки статуса
//			* Статус - ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете - Статус отражения
//			* Комментарий - Строка - Комментарий к статусу отражения
//	ВозвращатьКОтражениюДокументСторно - Булево - Возвращать к отражению сторнирующий документ.
//
// Возвращаемое значение:
//	Булево - Истина если идентификаторы статусов отражения не изменились с момента начала формирования проводок
//		и новые значения статусов записаны в регистр сведений ОтражениеДокументовВМеждународномУчете
//
Функция ОбновитьСтатусОтраженияДокумента(Документ, Измерения, ПроводкиДокумента) Экспорт
	
	ЗаписиОтраженияДокумента = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
	ЗаписиОтраженияДокумента.Отбор.Регистратор.Установить(Документ);
	ЗаписиОтраженияДокумента.Прочитать();
	
	ИдентификаторыСтатусовСовпадают = ЗаписиОтраженияДокумента.Количество() >= Измерения.Количество();
	
	Для каждого Запись Из ЗаписиОтраженияДокумента Цикл
		Отбор = Новый Структура("ПланСчетов, Организация, ДатаОтражения",
			Запись.ПланСчетов, Запись.Организация, Запись.ДатаОтражения);
		ТекущиеИзмерения = Измерения.НайтиСтроки(Отбор);
		
		Если ТекущиеИзмерения.Количество() = 0 Тогда
			Продолжить;
		Иначе
			Для Каждого ТекущееИзмерение Из ТекущиеИзмерения Цикл
				Если ТекущееИзмерение.ИдентификаторСтатуса <> Запись.ИдентификаторСтатуса Тогда
					ИдентификаторыСтатусовСовпадают = Ложь;
				Иначе
					Измерения.Удалить(ТекущееИзмерение);
				КонецЕсли;
			КонецЦикла;
			Если НЕ ИдентификаторыСтатусовСовпадают Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Отбор = Новый Структура("ПланСчетов, Организация", Запись.ПланСчетов, Запись.Организация);
		ПроводкиОрганизации = ПроводкиДокумента.НайтиСтроки(Отбор);
		
		Если ПроводкиДокумента.Количество() > 0 Тогда
			Статус = Неопределено;
			Комментарий = "";
			УникальныеЗначения = Новый Соответствие;
			
			Для Каждого Проводка Из ПроводкиОрганизации Цикл
				Если НЕ ЗначениеЗаполнено(Проводка.Период) ИЛИ НачалоДня(Проводка.Период) = Запись.ДатаОтражения Тогда
					Статус = МеждународныйУчетСерверПовтИсп.ОпределитьСтатус(Статус, Проводка.Статус);
					ЗаполнитьКомментарий(Комментарий, Проводка, УникальныеЗначения);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Статус) Тогда
				Запись.Статус = Статус;
				Запись.Комментарий = Комментарий;
			Иначе
				Запись.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
				Запись.Комментарий = "";
			КонецЕсли;
		Иначе
			Запись.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
			Запись.Комментарий = "";
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыСтатусовСовпадают = ИдентификаторыСтатусовСовпадают И Измерения.Количество() = 0;
	
	Если ИдентификаторыСтатусовСовпадают Тогда
		ЗаписиОтраженияДокумента.Записать();
	КонецЕсли;
	
	Возврат ИдентификаторыСтатусовСовпадают;
	
КонецФункции

// Записывает новый статус отражения в учете.
// 
// Параметры:
//  МассивДокументов - Массив из ДокументСсылка - Массив документов.
//  НовыйСтатусОтражения - ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете - Новый статус отражения.
//  СтарыеСтатусыОтражения - Массив из ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете - Старые статусы отражения.
Процедура ЗаписатьНовыйСтатусОтражения(МассивДокументов, НовыйСтатусОтражения, СтарыеСтатусыОтражения) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных();
	Для каждого ДокументРегистратор Из МассивДокументов Цикл
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОтражениеДокументовВМеждународномУчете.НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументРегистратор);
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеДокументовВМеждународномУчете.Период,
		|	ОтражениеДокументовВМеждународномУчете.Регистратор,
		|	ОтражениеДокументовВМеждународномУчете.ПланСчетов,
		|	ОтражениеДокументовВМеждународномУчете.Организация,
		|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения,
		|	ВЫБОР
		|		КОГДА ОтражениеДокументовВМеждународномУчете.Статус В (&СтарыеСтатусыОтражения)
		|			ТОГДА &НовыйСтатус
		|		ИНАЧЕ ОтражениеДокументовВМеждународномУчете.Статус
		|	КОНЕЦ КАК Статус,
		|	ОтражениеДокументовВМеждународномУчете.Комментарий
		|ИЗ
		|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
		|ГДЕ
		|	ОтражениеДокументовВМеждународномУчете.Регистратор В (&МассивДокументов)
		|ИТОГИ
		|ПО
		|	Регистратор";
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Запрос.УстановитьПараметр("НовыйСтатус", НовыйСтатусОтражения);
		Запрос.УстановитьПараметр("СтарыеСтатусыОтражения", СтарыеСтатусыОтражения);
		
		ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
			
			Выборка = ВыборкаДокументов.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ЗаписьОтражения = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьОтражения, Выборка);
			
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Операция изменения статуса отражения не выполнена по причине:
								|%1';
								|en = 'Cannot change the recording status due to:
								|%1'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена';
										|en = 'Transaction is not executed'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки;
	
КонецПроцедуры

// Отменяет отражение документов в учете.
// 
// Параметры:
//  МассивДокументов - Массив из ДокументСсылка - Массив документов.
Процедура ОтменитьОтражениеДокументовВУчете(МассивДокументов) Экспорт
	
	СтатусыОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете;
	СтатусыОтбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтатусыОтражения.ОтраженоВУчете);
	СтатусыОтбора.Добавить(СтатусыОтражения.КОтражениюВУчетеВручную);
	СтатусыОтбора.Добавить(СтатусыОтражения.ОтраженоВУчетеВручную);
	
	ЗаписатьНовыйСтатусОтражения(МассивДокументов, СтатусыОтражения.КОтражениюВУчете, СтатусыОтбора);
	
КонецПроцедуры

// Возвращает к отражению сторнирующие документы при изменении проводок сторнируемых документов.
// 
// Параметры:
//  ПараметрыФормированияПроводок - см. ПараметрыФормированияПроводок
//  Документы - ДокументСсылка, Массив из ДокументСсылка - сторнируемые документы, у которых изменились проводки.
Процедура ВернутьКОтражениюДокументыСторно(ПараметрыФормированияПроводок = Неопределено, Документы = Неопределено) Экспорт
	
	ЕстьМенеджерТаблиц = ПараметрыФормированияПроводок <> Неопределено;
	ЕстьДокументы = Документы <> Неопределено;
	
	Если НЕ ЕстьМенеджерТаблиц И НЕ ЕстьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	ТекстыЗапросов = Новый Массив();
	
	Если ЕстьМенеджерТаблиц Тогда
		Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыКОтражению.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ Регистраторы
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению");
	КонецЕсли;
	
	Если ЕстьДокументы Тогда
		МассивДокументов = ОбщегоНазначенияУТКлиентСервер.Массив(Документы);
		ТаблицаДокументов = Новый ТаблицаЗначений();
		ТипыДокументов = Новый ОписаниеТипов();
		
		Для Каждого Документ Из МассивДокументов Цикл
			ТипДокумента = ТипЗнч(Документ);
			Если НЕ ТипыДокументов.СодержитТип(ТипДокумента) Тогда
				ДобавляяемыеТипы = Новый Массив();
				ДобавляяемыеТипы.Добавить(ТипДокумента);
				ТипыДокументов = Новый ОписаниеТипов(ТипыДокументов, ДобавляяемыеТипы);
			КонецЕсли;
			ТаблицаДокументов.Добавить();
		КонецЦикла;
		
		ТаблицаДокументов.Колонки.Добавить("Регистратор", ТипыДокументов);
		ТаблицаДокументов.ЗагрузитьКолонку(МассивДокументов, "Регистратор");
		Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ Регистраторы
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов");
		
		ИндексТекста = ТекстыЗапросов.ВГраница();
		Если ИндексТекста > 0 Тогда
			ТекстыЗапросов[ИндексТекста] = СтрЗаменить(ТекстыЗапросов[ИндексТекста], "ПОМЕСТИТЬ Регистраторы", ""); //@Query-part
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Регистратор   КАК Регистратор,
	|	ОтражениеДокументовВМеждународномУчете.Период        КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.ПланСчетов    КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация   КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
	|	ВЫБОР
	|		КОГДА ОтражениеДокументовВМеждународномУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	КОНЕЦ КАК Статус,
	|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Регистраторы КАК Регистраторы
	|	ПО
	|		РеестрДокументов.СторнируемыйДокумент = Регистраторы.Регистратор
	|		И РеестрДокументов.СторноИсправление
	|		И РеестрДокументов.Проведен
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|	ПО
	|		РеестрДокументов.Ссылка = ОтражениеДокументовВМеждународномУчете.Регистратор
	|ГДЕ
	|	НЕ (РеестрДокументов.Ссылка) В 
	|		(ВЫБРАТЬ
	|			Регистраторы.Регистратор
	|		ИЗ
	|			Регистраторы КАК Регистраторы)
	|ИТОГИ ПО
	|	Регистратор
	|;
	|
	|//////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Регистраторы";
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРегистратор.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
		Выборка = ВыборкаРегистратор.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьОффлайновыеРасчеты(Знач Организации = Неопределено, Знач ДатаОкончания = Неопределено, Знач Документы = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	НачалоМесяца = НачалоМесяца(ДатаОкончания);
	КонецМесяца = КонецМесяца(ДатаОкончания);
	ОкончаниеРасчета = КонецМесяца(ДатаОкончания)+1;

	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Если Документы = Неопределено Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОтражениеДокументов.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
			|ГДЕ
			|	ОтражениеДокументов.Период <= &ДатаОкончания
			|	И ОтражениеДокументов.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете))
			|	И &ОтборПоОрганизациям
			|";
			
			Если ЗначениеЗаполнено(Организации) Тогда
				ОтборПоОрганизациям = "ОтражениеДокументов.Организация В (&Организации)";
				Запрос.УстановитьПараметр("Организации", Организации);
			Иначе
				ОтборПоОрганизациям = "ИСТИНА";
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоОрганизациям", ОтборПоОрганизациям);
			
			Запрос.Текст = ТекстЗапроса;
			Результат = Запрос.Выполнить();
			ДокументыКРасчету = Результат.Выгрузить().ВыгрузитьКолонку("Регистратор");
			
		Иначе
			ДокументыКРасчету = ОбщегоНазначенияУТКлиентСервер.Массив(Документы);
		КонецЕсли;
		
	Иначе
		
		Если Документы = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДатаОкончания) Тогда
				КонецРасчета = КонецМесяца(ДатаОкончания)+1;
			Иначе
				КонецРасчета = КонецМесяца(ТекущаяДатаСеанса())+1;
			КонецЕсли;
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			Если ЗначениеЗаполнено(Организации) Тогда
				АналитикиРасчета.Организации = ОбщегоНазначенияУТКлиентСервер.Массив(Организации);
			КонецЕсли;
			РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе(КонецРасчета, АналитикиРасчета);
			
			Возврат;
			
		Иначе
			ДокументыКРасчету = ОбщегоНазначенияУТКлиентСервер.Массив(Документы);
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|ГДЕ
		|	Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Расчеты.Регистратор В (&ДокументыКОтражению)
		|	И Расчеты.Активность
		|");
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца);
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца);
		Запрос.УстановитьПараметр("ДокументыКОтражению", Документы);
		МассивАналитикПоставщиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		
		Если МассивАналитикПоставщиков.Количество() > 0 Тогда
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикПоставщиков;
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ОкончаниеРасчета, АналитикиРасчета);
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|ГДЕ
		|	Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Расчеты.Регистратор В (&ДокументыКОтражению)
		|	И Расчеты.Активность
		|");
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца);
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца);
		Запрос.УстановитьПараметр("ДокументыКОтражению", Документы);
		МассивАналитикКлиентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		
		Если МассивАналитикКлиентов.Количество() > 0 Тогда
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикКлиентов;
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ОкончаниеРасчета, АналитикиРасчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументыКРасчету.Количество() > 0 Тогда
		ПараметрыВыполнения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыВыполненияОффлайновыхРасчетов();
		ПараметрыВыполнения.ДатаОкончания = ДатаОкончания;
		ПараметрыВыполнения.ДокументыКРасчету = ДокументыКРасчету;
		ПараметрыВыполнения.КоличествоПотоков = КоличествоПотоковОтраженияВМеждународномУчете();
		ПараметрыВыполнения.ПересчитатьРегистрыОборотов = ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ВыполнитьОффлайновыеРасчеты(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает прогнозные параметры отражения в международном учете сводно и в разрезе типов документов
// 
// Возвращаемое значение:
// 	Структура - Прогнозные параметры отражения:
// 		* ДатаПервойПроводки - Дата - Дата самой ранней формируемой проводки
// 		* КоличествоДокументов - Число - Общее количество отражаемых документов.
// 		* КоличествоПроводок - Число - Общее количество фомируемых проводок.
// 		* ПроводокНаПорцию - Число - Количество проводок, формируемых в одном потоке.
// 		* КоличествоПорций - Число - Количество порций документов.
// 		* ПоТипамДокументов - Массив из Структура - аналогичные данные по типам документов. Свойства структуры:
// 			** ТипДокумента - Тип - Тип документа
// 			** КоличествоДокументов - Число - Общее количество отражаемых документов данного типа
// 			** КоличествоПроводок - Число - Общее количество фомируемых проводок по документам данного типа
// 	
Функция ПрогнозныеПараметрыОтраженияВМеждународномУчете() Экспорт
	
	ПрогнозныеПараметры = Новый Структура();
	ПрогнозныеПараметры.Вставить("ДатаПервойПроводки", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), 1));
	ПрогнозныеПараметры.Вставить("КоличествоДокументов", 0);
	ПрогнозныеПараметры.Вставить("КоличествоПроводок", 0);
	ПрогнозныеПараметры.Вставить("ПроводокНаПорцию", 0);
	ПрогнозныеПараметры.Вставить("КоличествоПорций", 0);
	ПрогнозныеПараметры.Вставить("ПоТипамДокументов", Новый Массив());
	
	Возврат ПрогнозныеПараметры;
	
КонецФункции

Функция ПроводкиРегламентнойОперации(ДанныеОперации) Экспорт
	
	ТаблицаПроводок = ТаблицаПроводок();

	Если НЕ ПолучитьФункциональнуюОпцию("ПроводкиМеждународногоУчетаПоДаннымОперативного")
	 ИЛИ НЕ ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат ТаблицаПроводок;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = МеждународныйУчетПоДаннымФинансовыхРегистров.ДанныеРеклассификацииДолгосрочныхАктивовОбязательств(
		ДанныеОперации.Организация, ДанныеОперации.Дата);
	
	Если МенеджерВременныхТаблиц.Таблицы.Количество() = 0 Тогда
		Возврат ТаблицаПроводок;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив();
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ПланыСчетовОрганизаций.Период КАК Период,
	|	ПланыСчетовОрганизаций.Организация КАК Организация,
	|	ПланыСчетовОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ПланыСчетовОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ПланыСчетовМеждународногоУчетаОрганизаций
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(&ДатаОперации,
	|		Организация = &Организация И ПланСчетов = &ПланСчетов) КАК ПланыСчетовОрганизаций
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	&ДатаОперации КАК Период,
	|	НАЧАЛОПЕРИОДА(&ДатаОперации, ДЕНЬ) КАК ДатаОтражения,
	|	&Регистратор КАК Регистратор,
	|	ПланыСчетовОрганизаций.Организация КАК Организация,
	|	ПланыСчетовОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ПланыСчетовОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовОрганизаций
	|");
	
	МеждународныйУчетПоДаннымФинансовыхРегистров.ДобавитьТекстыЗапросовРеклассификацииДолгосрочныхАктивовОбязательств(
		ТекстыЗапросов, МенеджерВременныхТаблиц);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстыЗапросов.Очистить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", ДанныеОперации.Ссылка);
	Запрос.УстановитьПараметр("ПланСчетов", ДанныеОперации.ПланСчетов);
	Запрос.УстановитьПараметр("Организация", ДанныеОперации.Организация);
	Запрос.УстановитьПараметр("ДатаОперации", ДанныеОперации.Дата);
	Запрос.Выполнить();
	
	ПараметрыОтражения = ПараметрыОтраженияВМеждународномУчете();
	ПараметрыОтражения.Организации = ДанныеОперации.Организация;
	ПараметрыОтражения.ДатаОкончания = КонецМесяца(ДанныеОперации.Дата);
	ПараметрыОтражения.Документы = ДанныеОперации.Ссылка;
	ПараметрыОтражения.ЗаписыватьПроводки = Ложь;
	ПараметрыОтражения.ВыполнитьПересчеты = Ложь;
	
	ПараметрыФормированияПроводок = ПараметрыФормированияПроводок(ПараметрыОтражения);
	ПараметрыФормированияПроводок.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	МеждународныйУчетПоДаннымФинансовыхРегистров.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
	
	ПересчитатьТаблицуПроводокПоКурсу(ПараметрыФормированияПроводок, ТаблицаПроводок);
	СвернутьТаблицуПроводок(ПараметрыФормированияПроводок, ТаблицаПроводок);
	УдалитьПроводкиБезСуммИКоличеств(ТаблицаПроводок);
	УдалитьНезначащиеПроводки(ПараметрыФормированияПроводок, ТаблицаПроводок);
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Процедура ЗаполнитьСтатусПроводки(Проводка, Статус) Экспорт

	Проводка.Статус = МеждународныйУчетСерверПовтИсп.ОпределитьСтатус(Проводка.Статус, Статус);

КонецПроцедуры

// Параметры:
// 	Проводка - Структура - Описание проводки:
//   * МассивОшибок - Массив из Строка - текст ошибки
// 	ТекстОшибки - Строка - 
Процедура ДобавитьОшибкуПроводки(Проводка, ТекстОшибки) Экспорт

	Проводка.МассивОшибок.Добавить(ТекстОшибки);

КонецПроцедуры

// Параметры:
// 	ТаблицаПроводок - ТаблицаЗначений - 
// 	Проводка - Структура - 
Процедура ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка) Экспорт

	СтрокаТаблицы = ТаблицаПроводок.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Проводка);
	
	ЗаполнитьСтатусВТаблицеПроводок(СтрокаТаблицы, Проводка);
	
	ЗаполнитьКомментарийВТаблицеПроводок(СтрокаТаблицы, Проводка);

КонецПроцедуры

// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - 
// 	Настройка - Структура - 
// Возвращаемое значение:
// 	Строка - 
Функция ВыражениеЗаполненияСубконтоПоНастройке(СхемаКомпоновкиДанных, Настройка) Экспорт
	
	ВыражениеВычисляемогоПоля = "Неопределено";
	Если Настройка.ЗаполнятьИзИсточника Тогда
		ВыражениеНастройки = Настройка.Выражение;
		Если Найти(ВыражениеНастройки, "СчетДт.") > 0 Тогда
			ВыражениеНастройки = СтрЗаменить(ВыражениеНастройки, "СчетДт.", "");
		ИначеЕсли Найти(ВыражениеНастройки, "СчетКт.") > 0 Тогда
			ВыражениеНастройки = СтрЗаменить(ВыражениеНастройки, "СчетКт.", "");
		ИначеЕсли ПустаяСтрока(ВыражениеНастройки) Тогда
			ВыражениеНастройки = "Неопределено";
		КонецЕсли;
		ВыражениеВычисляемогоПоля = ВыражениеНастройки;
	Иначе
		ИмяПараметра = "УказанноеЗначение_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		Параметр.Имя = ИмяПараметра;
		Параметр.Значение = Настройка.УказанноеЗначение;
		ВыражениеВычисляемогоПоля = "&" + ИмяПараметра;
	КонецЕсли;
	
	Возврат ВыражениеВычисляемогоПоля;
	
КонецФункции

Функция ТипыНепереотражаемыхДокументов() Экспорт
	
	ТипыДокументов = Новый Массив();
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОперацияМеждународный"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РегламентнаяОперацияМеждународныйУчет"));
	
	Если ПолучитьФункциональнуюОпцию("ПроводкиМеждународногоУчетаПоДаннымОперативного")
		И ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		ИменаНеиспользуемыхДокументов = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИменаНеиспользуемыхДокументов();
		
		Для Каждого ИмяДокумента Из ИменаНеиспользуемыхДокументов Цикл
			ТипыДокументов.Добавить(Тип(СтрШаблон("ДокументСсылка.%1", ИмяДокумента)));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТипыДокументов;
	
КонецФункции

// Возвращает общие параметры формирования проводок
//
// Возвращаемое значение:
// 	Структура - Содержит параметры:
// 		* СтруктураПроводки - См. СтруктураПроводки
// 		* КоличествоСубконто - Число - максимальное количество субконто плана счетов Международный
// 		* БалансовыеИзмерения - Массив из Строка - имена полей регистра бухгалтерии Международный
// 		* НебалансовыеИзмерения - Массив из Строка - имена полей регистра бухгалтерии Международный
// 		* БалансовыеРесурсы - Массив из Строка - имена полей регистра бухгалтерии Международный
// 		* НебалансовыеРесурсы - Массив из Строка - имена полей регистра бухгалтерии Международный
// 		* Реквизиты - Массив из Строка - имена полей регистра бухгалтерии Международный
// 		* ИнвертируемыеПоля - Массив из Строка - имена полей регистра бухгалтерии Международный
// 		* ИнвертируемыеРесурсы - Массив из Строка - имена полей регистра бухгалтерии Международный
// 		* СвернутьТаблицуПроводок - Булево - признак необходимости свертки проводок перед записью
// 		* УдалитьНезначащиеПроводки - Булево - признак необходимости удаления проводок с одинаковыми значениями Дт и Кт
//
Функция НовыеПараметрыФормированияПроводок() Экспорт
	
	ПараметрыФормированияПроводок = Новый Структура;
	ПараметрыФормированияПроводок.Вставить("СтруктураПроводки", СтруктураПроводки());
	ПараметрыФормированияПроводок.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц());
	
	ОписаниеПолейРегистра = РегистрыБухгалтерии.Международный.ОписаниеПолейРегистра();
	
	ПараметрыФормированияПроводок.Вставить("КоличествоСубконто",    ОписаниеПолейРегистра.КоличествоСубконто);
	ПараметрыФормированияПроводок.Вставить("БалансовыеИзмерения",   ОписаниеПолейРегистра.БалансовыеИзмерения);
	ПараметрыФормированияПроводок.Вставить("НебалансовыеИзмерения", ОписаниеПолейРегистра.НебалансовыеИзмерения);
	ПараметрыФормированияПроводок.Вставить("БалансовыеРесурсы",     ОписаниеПолейРегистра.БалансовыеРесурсы);
	ПараметрыФормированияПроводок.Вставить("НебалансовыеРесурсы",   ОписаниеПолейРегистра.НебалансовыеРесурсы);
	ПараметрыФормированияПроводок.Вставить("Реквизиты",             ОписаниеПолейРегистра.Реквизиты);
	
	ПараметрыФормированияПроводок.Вставить("ИнвертируемыеПоля",    РегистрыБухгалтерии.Международный.ИнвертируемыеПоля(ОписаниеПолейРегистра));
	ПараметрыФормированияПроводок.Вставить("ИнвертируемыеРесурсы", РегистрыБухгалтерии.Международный.ИнвертируемыеРесурсы(ОписаниеПолейРегистра));
	
	ПараметрыФормированияПроводок.Вставить("СвернутьТаблицуПроводок", Ложь);
	ПараметрыФормированияПроводок.Вставить("УдалитьНезначащиеПроводки", Ложь);
	
	Возврат ПараметрыФормированияПроводок;
	
КонецФункции

// Параметры:
//  ТаблицаПроводок - см. ТаблицаПроводок
//  ПараметрыПроводок - см. НовыеПараметрыФормированияПроводок
//
Процедура УдалитьКорреспонденцииПроводок(ТаблицаПроводок, ПараметрыПроводок) Экспорт
	
	ТаблицаПроводок.Колонки.Добавить("ВидДвижения", Новый ОписаниеТипов("ВидДвиженияБухгалтерии"));
	КоличествоСтрок = ТаблицаПроводок.Количество();
	УдаляемыеСтроки = Новый Массив();
	
	Для Индекс = 0 По КоличествоСтрок - 1 Цикл
		ТекущаяСтрока = ТаблицаПроводок[Индекс];
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.СчетДт) Тогда
			ТекущаяСтрока.ВидДвижения = ВидДвиженияБухгалтерии.Дебет;
		Иначе
			УдаляемыеСтроки.Добавить(ТекущаяСтрока);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.СчетКт) Тогда
			НоваяСтрока = ТаблицаПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.ВидДвижения = ВидДвиженияБухгалтерии.Кредит;
			
			Для Каждого ИмяПоля Из ПараметрыПроводок.ИнвертируемыеПоля Цикл
				Если ИмяПоля = "Субконто" ИЛИ ИмяПоля = "ВидСубконто" Тогда
					Для НомерСубконто = 1 По ПараметрыПроводок.КоличествоСубконто Цикл
						НоваяСтрока[ИмяПоля + "Дт" + НомерСубконто] = ТекущаяСтрока[ИмяПоля + "Кт" + НомерСубконто];
					КонецЦикла;
				Иначе
					НоваяСтрока[ИмяПоля + "Дт"] = ТекущаяСтрока[ИмяПоля + "Кт"];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПроводок.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ПараметрыПроводок.ИнвертируемыеПоля Цикл
		Если ИмяПоля = "Субконто" ИЛИ ИмяПоля = "ВидСубконто" Тогда
			Для НомерСубконто = 1 По ПараметрыПроводок.КоличествоСубконто Цикл
				ТаблицаПроводок.Колонки.Удалить(ИмяПоля + "Кт" + НомерСубконто);
				ТаблицаПроводок.Колонки[ИмяПоля + "Дт" + НомерСубконто].Имя = ИмяПоля + НомерСубконто;
			КонецЦикла;
		Иначе
			ТаблицаПроводок.Колонки.Удалить(ИмяПоля + "Кт");
			ТаблицаПроводок.Колонки[ИмяПоля + "Дт"].Имя = ИмяПоля;
		КонецЕсли;
	КонецЦикла;
	
	СвернутьТаблицуПроводокБезКорреспонденций(ПараметрыПроводок, ТаблицаПроводок);
	СвернутьОборотыПроводокБезКорреспонденций(ПараметрыПроводок, ТаблицаПроводок);
	УдалитьПроводкиБезРесурсовБезКорреспонденций(ПараметрыПроводок, ТаблицаПроводок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеПроводок

// Возвращает общие параметры формирования проводок
//
// Параметры:
// 	ПараметрыОтраженияВМеждународномУчете - см. ПараметрыОтраженияВМеждународномУчете
// 	
// Возвращаемое значение:
// 	Структура - Содержит параметры:
// 		* СтруктураПроводки - См. НовыеПараметрыФормированияПроводок
// 		* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
Функция ПараметрыФормированияПроводок(ПараметрыОтраженияВМеждународномУчете) Экспорт
	
	ПараметрыФормированияПроводок = НовыеПараметрыФормированияПроводок();
	
	МеждународныйУчетПоДаннымОперативногоУчета.ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок);
	МеждународныйУчетПоДаннымФинансовыхРегистров.ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок);
	МеждународныйУчетПоДаннымРеглУчета.ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок);
	
	Возврат ПараметрыФормированияПроводок;
	
КонецФункции

Функция КоличествоПотоковОтраженияВМеждународномУчете()
	
	КоличествоПотоковСРазделением = 1;
	КоличествоПотоковБезРазделения = 6;
	
	Если НЕ ВозможноМногопоточноеОтражение() Тогда
		КоличествоПотоков = 1;
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда
		КоличествоПотоков = КоличествоПотоковСРазделением;
	Иначе
		КоличествоПотоков = КоличествоПотоковБезРазделения;
	КонецЕсли;
	
	Возврат КоличествоПотоков;
	
КонецФункции

Функция ВозможноМногопоточноеОтражение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ ОбщегоНазначения.РежимОтладки()
		И НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И РегистрыБухгалтерии.Международный.ПолучитьРежимРазделенияИтогов()
		И РегистрыБухгалтерии.МеждународныйБезКорреспонденции.ПолучитьРежимРазделенияИтогов();
	
КонецФункции

Функция КоличествоПроводокНаПорцию(КоличествоПотоков = 1)
	
	Если КоличествоПотоков > 10 Тогда
		ПроводокНаПорцию = 2000;
	ИначеЕсли КоличествоПотоков > 3 Тогда
		ПроводокНаПорцию = 3000;
	ИначеЕсли КоличествоПотоков > 1 Тогда
		ПроводокНаПорцию = 4000;
	Иначе
		ПроводокНаПорцию = 10000;
	КонецЕсли;
	
	Возврат ПроводокНаПорцию;
	
КонецФункции

Процедура ЗаполнитьПрогнозныеПараметры(ПараметрыОтраженияВМеждународномУчете)
	
	ПрогнозныеПараметры = ПрогнозныеПараметрыОтраженияВМеждународномУчете();
	
	МесяцевСтатистики = 1;
	КоличествоПроводокБезСтатистики = 10;
	РассчитыватьПрогнозныеПараметры = Истина;
	
	Если ПараметрыОтраженияВМеждународномУчете.ПроверятьСтатусОтражения Тогда
	ИначеЕсли ПараметрыОтраженияВМеждународномУчете.Документы = Неопределено Тогда
	ИначеЕсли ТипЗнч(ПараметрыОтраженияВМеждународномУчете.Документы) <> Тип("Массив")
		ИЛИ ПараметрыОтраженияВМеждународномУчете.Документы.Количество() = 1 Тогда
		ПрогнозныеПараметры.КоличествоДокументов = 1;
		РассчитыватьПрогнозныеПараметры = Ложь;
	КонецЕсли;
	
	Если РассчитыватьПрогнозныеПараметры Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(ОтражениеДокументовВУчете.Регистратор) КАК ТипРегистратора,
		|	МИНИМУМ(ОтражениеДокументовВУчете.ДатаОтражения) КАК ДатаНачала,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументовВУчете.Регистратор) КАК КоличествоДокументов
		|ИЗ
		|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВУчете
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПроверкаДокументовПереопределяемый КАК ПроверкаДокументовПереопределяемый
		|		ПО ОтражениеДокументовВУчете.Регистратор = ПроверкаДокументовПереопределяемый.Документ
		|		 И ОтражениеДокументовВУчете.Организация = ПроверкаДокументовПереопределяемый.Организация
		|		 И &ОтражатьВУчетеТолькоПроверенныеДокументы
		|ГДЕ
		|	ОтражениеДокументовВУчете.ДатаОтражения <= &ДатаОкончания
		|	И &ОтборПоДокументам
		|	И &ОтборПоОрганизациям
		|	И &ОтборПоСтатусамОтражения
		|	И &ДокументПроверен
		|СГРУППИРОВАТЬ ПО
		|	ТИПЗНАЧЕНИЯ(ОтражениеДокументовВУчете.Регистратор)
		|ИТОГИ
		|	МИНИМУМ(ДатаНачала) КАК ДатаНачала,
		|	СУММА(КоличествоДокументов) КАК КоличествоДокументов
		|ПО
		|	ОБЩИЕ
		|";
		
		ПроверкаДокументовСервер.ПереопределитьВТекстеЗапросаСтатусыПроверкиСУчетомИсключений(Запрос.Текст, "ОтражениеДокументовВУчете.Регистратор");
		УстановитьОтборДокументовПоПараметрамОтражения(Запрос, ПараметрыОтраженияВМеждународномУчете);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДокументыОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДокументыОбщийИтог.Следующий();
		
		Если ЗначениеЗаполнено(ВыборкаДокументыОбщийИтог.КоличествоДокументов) Тогда
			ПрогнозныеПараметры.ДатаПервойПроводки = ВыборкаДокументыОбщийИтог.ДатаНачала;
			ПрогнозныеПараметры.КоличествоДокументов = ВыборкаДокументыОбщийИтог.КоличествоДокументов;
			
			Запрос.УстановитьПараметр("ДатаНачалаСтатистики", ДобавитьМесяц(НачалоМесяца(ВыборкаДокументыОбщийИтог.ДатаНачала), -МесяцевСтатистики));
			Запрос.УстановитьПараметр("ДатаОкончанияСтатистики", НачалоМесяца(ВыборкаДокументыОбщийИтог.ДатаНачала) - 1);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ТИПЗНАЧЕНИЯ(Международный.Регистратор) КАК ТипРегистратора,
			|	ВЫРАЗИТЬ(КОЛИЧЕСТВО(Международный.Регистратор) / КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Международный.Регистратор) КАК ЧИСЛО(31,2)) КАК КоличествоПроводок
			|ПОМЕСТИТЬ СтатистикаПроводок
			|ИЗ
			|	РегистрБухгалтерии.Международный КАК Международный
			|ГДЕ
			|	Международный.Период МЕЖДУ &ДатаНачалаСтатистики И &ДатаОкончанияСтатистики
			|	И &ОтборПоТипамДокументов
			|	И &ОтборПоОрганизациям
			|СГРУППИРОВАТЬ ПО
			|	ТИПЗНАЧЕНИЯ(Международный.Регистратор)
			|	
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТИПЗНАЧЕНИЯ(Международный.Регистратор) КАК ТипРегистратора,
			|	ВЫРАЗИТЬ(КОЛИЧЕСТВО(Международный.Регистратор) / (2 * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Международный.Регистратор)) КАК ЧИСЛО(31,2)) КАК КоличествоПроводок
			|ИЗ
			|	РегистрБухгалтерии.МеждународныйБезКорреспонденции КАК Международный
			|ГДЕ
			|	Международный.Период МЕЖДУ &ДатаНачалаСтатистики И &ДатаОкончанияСтатистики
			|	И &ОтборПоТипамДокументов
			|	И &ОтборПоОрганизациям
			|СГРУППИРОВАТЬ ПО
			|	ТИПЗНАЧЕНИЯ(Международный.Регистратор)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтатистикаПроводок.ТипРегистратора КАК ТипРегистратора,
			|	СУММА(СтатистикаПроводок.КоличествоПроводок) КАК КоличествоПроводок
			|ИЗ
			|	СтатистикаПроводок КАК СтатистикаПроводок
			|СГРУППИРОВАТЬ ПО
			|	СтатистикаПроводок.ТипРегистратора
			|ИТОГИ
			|	ВЫРАЗИТЬ(СРЕДНЕЕ(КоличествоПроводок) КАК ЧИСЛО(31,2)) КАК КоличествоПроводок
			|ПО
			|	ОБЩИЕ
			|";
			
			ВыборкаДокументы = ВыборкаДокументыОбщийИтог.Выбрать();
			
			Если ПараметрыОтраженияВМеждународномУчете.Документы <> Неопределено Тогда
				ТипыРегистраторов = Новый Массив();
				Пока ВыборкаДокументы.Следующий() Цикл
					ТипыРегистраторов.Добавить(ВыборкаДокументы.ТипРегистратора);
				КонецЦикла;
				ОтборПоТипамДокументов = "ТИПЗНАЧЕНИЯ(Международный.Регистратор) В (&ТипыРегистраторов)";
				Запрос.УстановитьПараметр("ТипыРегистраторов", ТипыРегистраторов);
			Иначе
				ОтборПоТипамДокументов = "ИСТИНА";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыОтраженияВМеждународномУчете.Организации) Тогда
				ОтборПоОрганизациям = "Международный.Организация В (&Организации)";
			Иначе
				ОтборПоОрганизациям = "ИСТИНА";
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоТипамДокументов", ОтборПоТипамДокументов);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизациям", ОтборПоОрганизациям);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаПроводкиОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаПроводкиОбщийИтог.Следующий();
			
			ВыборкаПроводки = ВыборкаПроводкиОбщийИтог.Выбрать();
			ВыборкаДокументы.Сбросить();
			
			Пока ВыборкаДокументы.Следующий() Цикл
				ВыборкаПроводки.Сбросить();
				СтруктураПоиска = Новый Структура("ТипРегистратора", ВыборкаДокументы.ТипРегистратора);
				
				Если ВыборкаПроводки.НайтиСледующий(СтруктураПоиска) Тогда
					УдельноеКоличествоПроводок = ВыборкаПроводки.КоличествоПроводок;
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПроводкиОбщийИтог.КоличествоПроводок) Тогда
					УдельноеКоличествоПроводок = ВыборкаПроводкиОбщийИтог.КоличествоПроводок;
				Иначе
					УдельноеКоличествоПроводок = КоличествоПроводокБезСтатистики;
				КонецЕсли;
				
				КоличествоПроводок = Окр(УдельноеКоличествоПроводок * ВыборкаДокументы.КоличествоДокументов, 0);
				ПрогнозныеПараметры.КоличествоПроводок = ПрогнозныеПараметры.КоличествоПроводок + КоличествоПроводок;
				
				Если ПараметрыОтраженияВМеждународномУчете.КоличествоПотоков > 1 Тогда
					ПараметрыПоДокументу = Новый Структура("ТипДокумента,КоличествоДокументов,КоличествоПроводок",
						ВыборкаДокументы.ТипРегистратора, ВыборкаДокументы.КоличествоДокументов, КоличествоПроводок);
					ПрогнозныеПараметры.ПоТипамДокументов.Добавить(ПараметрыПоДокументу);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ПрогнозныеПараметры.КоличествоПроводок = КоличествоПроводокБезСтатистики * ПрогнозныеПараметры.КоличествоДокументов;
	КонецЕсли;
	
	Если ПрогнозныеПараметры.КоличествоДокументов > 0 Тогда
		ПроводокНаПорцию = КоличествоПроводокНаПорцию(ПараметрыОтраженияВМеждународномУчете.КоличествоПотоков);
		
		Если ПараметрыОтраженияВМеждународномУчете.КоличествоПотоков = 1 Тогда
		ИначеЕсли ПрогнозныеПараметры.КоличествоПроводок >= ПроводокНаПорцию * ПараметрыОтраженияВМеждународномУчете.КоличествоПотоков Тогда
		Иначе
			ПроводокНаПорцию = Окр(ПрогнозныеПараметры.КоличествоПроводок / ПараметрыОтраженияВМеждународномУчете.КоличествоПотоков, 0);
			ПроводокНаПорцию = Макс(ПроводокНаПорцию, ПараметрыОтраженияВМеждународномУчете.МинимальныйРазмерПорции);
		КонецЕсли;
		
		ПрогнозныеПараметры.ПроводокНаПорцию = ПроводокНаПорцию;
		ПрогнозныеПараметры.КоличествоПорций = 1 + Цел(ПрогнозныеПараметры.КоличествоПроводок / ПроводокНаПорцию);
	КонецЕсли;
	
	Если ПрогнозныеПараметры.КоличествоПорций <= 1 Тогда
		ПрогнозныеПараметры.ПоТипамДокументов.Очистить();
	КонецЕсли;
	
	ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры = ПрогнозныеПараметры;
	
КонецПроцедуры

Функция РекомендуетсяВыключениеИтоговРегистров(ПараметрыОтраженияВМеждународномУчете)
	
	ПрогнозныеПараметры = ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры;
	
	Возврат НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И ПараметрыОтраженияВМеждународномУчете.ЗаписыватьПроводки
		И ПрогнозныеПараметры.КоличествоДокументов > 0
		И ПрогнозныеПараметры.КоличествоПроводок >= ПрогнозныеПараметры.ПроводокНаПорцию;
	
КонецФункции

Процедура ВыключитьИтогиМеждународныхРегистров(ПараметрыОтраженияВМеждународномУчете)
	
	ИспользованиеТекущихИтогов = РегистрыБухгалтерии.Международный.ПолучитьИспользованиеТекущихИтогов()
		ИЛИ РегистрыБухгалтерии.МеждународныйБезКорреспонденции.ПолучитьИспользованиеТекущихИтогов();
	
	МаксимальныйПериодИтогов = Макс(РегистрыБухгалтерии.Международный.ПолучитьМаксимальныйПериодРассчитанныхИтогов(),
		РегистрыБухгалтерии.МеждународныйБезКорреспонденции.ПолучитьМаксимальныйПериодРассчитанныхИтогов());
	
	МинимальныйПериодИтогов = Макс(РегистрыБухгалтерии.Международный.ПолучитьМинимальныйПериодРассчитанныхИтогов(),
		РегистрыБухгалтерии.МеждународныйБезКорреспонденции.ПолучитьМинимальныйПериодРассчитанныхИтогов());
	
	ПараметрыОтраженияВМеждународномУчете.ИспользованиеТекущихИтогов = ИспользованиеТекущихИтогов;
	ПараметрыОтраженияВМеждународномУчете.МаксимальныйПериодИтогов = МаксимальныйПериодИтогов;
	ПараметрыОтраженияВМеждународномУчете.МинимальныйПериодИтогов = МинимальныйПериодИтогов;
	
	КоличествоПопытокОтключенияИтогов = ПараметрыОтраженияВМеждународномУчете.КоличествоПопыток * 2;
	РегистрыБухгалтерииМетаданные = Метаданные.РегистрыБухгалтерии;
	
	Если ИспользованиеТекущихИтогов Тогда
		Для НомерПопытки = 1 По КоличествоПопытокОтключенияИтогов Цикл
			Попытка
				РегистрыБухгалтерии.Международный.УстановитьИспользованиеТекущихИтогов(Ложь);
				ПараметрыОтраженияВМеждународномУчете.ВосстановитьСостояниеИтогов = Истина;
				Прервать;
			Исключение
				Если НомерПопытки = КоличествоПопытокОтключенияИтогов Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						РегистрыБухгалтерииМетаданные.Международный.Имя,,
						НСтр("ru = 'Выключение использования текущих итогов завершилось с ошибкой.';
							|en = 'An error occurred when disabling the current totals.'")
							+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		
		Для НомерПопытки = 1 По КоличествоПопытокОтключенияИтогов Цикл
			Попытка
				РегистрыБухгалтерии.МеждународныйБезКорреспонденции.УстановитьИспользованиеТекущихИтогов(Ложь);
				ПараметрыОтраженияВМеждународномУчете.ВосстановитьСостояниеИтогов = Истина;
				Прервать;
			Исключение
				Если НомерПопытки = КоличествоПопытокОтключенияИтогов Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						РегистрыБухгалтерииМетаданные.МеждународныйБезКорреспонденции.Имя,,
						НСтр("ru = 'Выключение использования текущих итогов завершилось с ошибкой.';
							|en = 'An error occurred when disabling the current totals.'")
							+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	ДатаПервойПроводки = ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры.ДатаПервойПроводки;
	ПериодОтключения = ДобавитьМесяц(НачалоМесяца(ДатаПервойПроводки), -1);
	
	МаксимальныйПериодОтключения = Мин(МаксимальныйПериодИтогов, КонецМесяца(ПериодОтключения));
	МинимальныйПериодОтключения = Мин(МинимальныйПериодИтогов, ПериодОтключения);
	
	Если МаксимальныйПериодОтключения <> МаксимальныйПериодИтогов
	 ИЛИ МинимальныйПериодОтключения <> МинимальныйПериодИтогов Тогда
		Для НомерПопытки = 1 По КоличествоПопытокОтключенияИтогов Цикл
			Попытка
				РегистрыБухгалтерии.Международный.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(
					МинимальныйПериодОтключения, МаксимальныйПериодОтключения);
				ПараметрыОтраженияВМеждународномУчете.ВосстановитьСостояниеИтогов = Истина;
				Прервать;
			Исключение
				Если НомерПопытки = КоличествоПопытокОтключенияИтогов Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						РегистрыБухгалтерииМетаданные.Международный.Имя,,
						НСтр("ru = 'Сдвиг хранимых периодов итогов перед отражением завершился с ошибкой.';
							|en = 'An error occurred when shifting stored total periods before recording.'")
							+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		
		Для НомерПопытки = 1 По КоличествоПопытокОтключенияИтогов Цикл
			Попытка
				РегистрыБухгалтерии.МеждународныйБезКорреспонденции.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(
					МинимальныйПериодОтключения, МаксимальныйПериодОтключения);
				ПараметрыОтраженияВМеждународномУчете.ВосстановитьСостояниеИтогов = Истина;
				Прервать;
			Исключение
				Если НомерПопытки = КоличествоПопытокОтключенияИтогов Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						РегистрыБухгалтерииМетаданные.МеждународныйБезКорреспонденции.Имя,,
						НСтр("ru = 'Сдвиг хранимых периодов итогов перед отражением завершился с ошибкой.';
							|en = 'An error occurred when shifting stored total periods before recording.'")
							+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьИтогиМеждународныхРегистров(ПараметрыОтраженияВМеждународномУчете)
	
	КоличествоПопытокВосстановленияИтогов = ПараметрыОтраженияВМеждународномУчете.КоличествоПопыток * 2;
	РегистрыБухгалтерииМетаданные = Метаданные.РегистрыБухгалтерии;
	
	Если ПараметрыОтраженияВМеждународномУчете.ИспользованиеТекущихИтогов
		<> РегистрыБухгалтерии.Международный.ПолучитьИспользованиеТекущихИтогов() Тогда
		Для НомерПопытки = 1 По КоличествоПопытокВосстановленияИтогов Цикл
			Попытка
				РегистрыБухгалтерии.Международный.УстановитьИспользованиеТекущихИтогов(
					ПараметрыОтраженияВМеждународномУчете.ИспользованиеТекущихИтогов);
				Прервать;
			Исключение
				Если НомерПопытки = КоличествоПопытокВосстановленияИтогов Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						РегистрыБухгалтерииМетаданные.Международный.Имя,,
						НСтр("ru = 'Включение использования текущих итогов завершилось с ошибкой.';
							|en = 'An error occurred when enabling the current totals.'")
							+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
	Если ПараметрыОтраженияВМеждународномУчете.ИспользованиеТекущихИтогов
		<> РегистрыБухгалтерии.МеждународныйБезКорреспонденции.ПолучитьИспользованиеТекущихИтогов() Тогда
		Для НомерПопытки = 1 По КоличествоПопытокВосстановленияИтогов Цикл
			Попытка
				РегистрыБухгалтерии.МеждународныйБезКорреспонденции.УстановитьИспользованиеТекущихИтогов(
					ПараметрыОтраженияВМеждународномУчете.ИспользованиеТекущихИтогов);
				Прервать;
			Исключение
				Если НомерПопытки = КоличествоПопытокВосстановленияИтогов Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						РегистрыБухгалтерииМетаданные.МеждународныйБезКорреспонденции.Имя,,
						НСтр("ru = 'Включение использования текущих итогов завершилось с ошибкой.';
							|en = 'An error occurred when enabling the current totals.'")
							+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если (ПараметрыОтраженияВМеждународномУчете.МаксимальныйПериодИтогов
		<> РегистрыБухгалтерии.Международный.ПолучитьМаксимальныйПериодРассчитанныхИтогов())
	 ИЛИ (ПараметрыОтраженияВМеждународномУчете.МинимальныйПериодИтогов
		<> РегистрыБухгалтерии.Международный.ПолучитьМинимальныйПериодРассчитанныхИтогов()) Тогда
		Для НомерПопытки = 1 По КоличествоПопытокВосстановленияИтогов Цикл
			Попытка
				РегистрыБухгалтерии.Международный.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(
					ПараметрыОтраженияВМеждународномУчете.МинимальныйПериодИтогов,
					ПараметрыОтраженияВМеждународномУчете.МаксимальныйПериодИтогов);
				Прервать;
			Исключение
				Если НомерПопытки = КоличествоПопытокВосстановленияИтогов Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						РегистрыБухгалтерииМетаданные.Международный.Имя,,
						НСтр("ru = 'Восстановление хранимых периодов итогов после отражения завершилось с ошибкой.';
							|en = 'An error occurred when restoring stored total periods after recording.'")
							+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если (ПараметрыОтраженияВМеждународномУчете.МаксимальныйПериодИтогов
		<> РегистрыБухгалтерии.МеждународныйБезКорреспонденции.ПолучитьМаксимальныйПериодРассчитанныхИтогов())
	 ИЛИ (ПараметрыОтраженияВМеждународномУчете.МинимальныйПериодИтогов
		<> РегистрыБухгалтерии.МеждународныйБезКорреспонденции.ПолучитьМинимальныйПериодРассчитанныхИтогов()) Тогда
		Для НомерПопытки = 1 По КоличествоПопытокВосстановленияИтогов Цикл
			Попытка
				РегистрыБухгалтерии.МеждународныйБезКорреспонденции.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(
					ПараметрыОтраженияВМеждународномУчете.МинимальныйПериодИтогов,
					ПараметрыОтраженияВМеждународномУчете.МаксимальныйПериодИтогов);
				Прервать;
			Исключение
				Если НомерПопытки = КоличествоПопытокВосстановленияИтогов Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						РегистрыБухгалтерииМетаданные.МеждународныйБезКорреспонденции.Имя,,
						НСтр("ru = 'Восстановление хранимых периодов итогов после отражения завершилось с ошибкой.';
							|en = 'An error occurred when restoring stored total periods after recording.'")
							+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаУправленияПорциями(ПараметрыОтраженияВМеждународномУчете, ПорцииРазныхТипов)
	
	ТаблицаУправления = Новый ТаблицаЗначений();
	ТаблицаУправления.Колонки.Добавить("НомерПорции", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаУправления.Колонки.Добавить("ТипыДокументов", Новый ОписаниеТипов("Массив"));
	ТаблицаУправления.Колонки.Добавить("КоличествоДокументов", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаУправления.Колонки.Добавить("КоличествоПроводок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	ТаблицаУправления.Колонки.Добавить("КоличествоПорций", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаУправления.Колонки.Добавить("НачальныйМоментВремени", Новый ОписаниеТипов("МоментВремени"));
	ТаблицаУправления.Колонки.Добавить("КонечныйМоментВремени", Новый ОписаниеТипов("МоментВремени"));
	ТаблицаУправления.Колонки.Добавить("ПоследняяПорция", Новый ОписаниеТипов("Булево"));
	
	ПрогнозныеПараметры = ПараметрыОтраженияВМеждународномУчете.ПрогнозныеПараметры;
	
	Если ПрогнозныеПараметры.КоличествоДокументов = 0 Тогда
	ИначеЕсли ПорцииРазныхТипов Тогда
		Для Каждого ПараметрыТипа Из ПрогнозныеПараметры.ПоТипамДокументов Цикл
			ДобавитьНовуюСтроку = Истина;
			
			Если ПараметрыТипа.КоличествоПроводок < ПрогнозныеПараметры.ПроводокНаПорцию Тогда
				Для Каждого ПараметрыПорции Из ТаблицаУправления Цикл
					Если (ПараметрыПорции.КоличествоПроводок + ПараметрыТипа.КоличествоПроводок) <= ПрогнозныеПараметры.ПроводокНаПорцию Тогда
						ПараметрыПорции.КоличествоДокументов = ПараметрыПорции.КоличествоДокументов + ПараметрыТипа.КоличествоДокументов;
						ПараметрыПорции.КоличествоПроводок = ПараметрыПорции.КоличествоПроводок + ПараметрыТипа.КоличествоПроводок;
						ПараметрыПорции.ТипыДокументов.Добавить(ПараметрыТипа.ТипДокумента);
						ДобавитьНовуюСтроку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ДобавитьНовуюСтроку Тогда
				ПараметрыПорции = ТаблицаУправления.Добавить();
				ЗаполнитьЗначенияСвойств(ПараметрыПорции, ПараметрыТипа);
				ПараметрыПорции.ТипыДокументов.Добавить(ПараметрыТипа.ТипДокумента);
				ПараметрыПорции.КоличествоПорций = 1 + Цел(ПараметрыПорции.КоличествоПроводок / ПрогнозныеПараметры.ПроводокНаПорцию);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаУправления.Сортировать("КоличествоПроводок УБЫВ");
	Иначе
		ПараметрыПорции = ТаблицаУправления.Добавить();
		ЗаполнитьЗначенияСвойств(ПараметрыПорции, ПрогнозныеПараметры);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьИдентификаторСтрокВТаблицу(ТаблицаУправления, "НомерПорции");
	
	Возврат ТаблицаУправления;
	
КонецФункции

Функция ТаблицаУправленияПотоками()
	
	ТаблицаУправления = Новый ТаблицаЗначений();
	ТаблицаУправления.Колонки.Добавить("НомерПорции", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаУправления.Колонки.Добавить("НачальныйМоментВремени", Новый ОписаниеТипов("МоментВремени"));
	ТаблицаУправления.Колонки.Добавить("КонечныйМоментВремени", Новый ОписаниеТипов("МоментВремени"));
	ТаблицаУправления.Колонки.Добавить("ТипыДокументов", Новый ОписаниеТипов("Массив"));
	ТаблицаУправления.Колонки.Добавить("Документы", Новый ОписаниеТипов("Массив"));
	ТаблицаУправления.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаУправления.Колонки.Добавить("АдресРезультата", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаУправления.Колонки.Добавить("КоличествоПопыток", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	
	Возврат ТаблицаУправления;
	
КонецФункции

Функция ДокументыКОтражениюВУчете(ПараметрыОтраженияВМеждународномУчете, ПараметрыФормированияПроводок, ПараметрыПорции)
	
	ФормированиеПорции = ТипЗнч(ПараметрыПорции) = Тип("СтрокаТаблицыЗначений");
	ФормированиеПроводок = ПараметрыФормированияПроводок <> Неопределено;
	
	Запрос = Новый Запрос();
	
	Если ФормированиеПроводок Тогда
		Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОтражениеДокументовВУчете.МоментВремени КАК МоментВремени,
	|	1 КАК Количество
	|ПОМЕСТИТЬ МоментыВремени
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВУчете
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПроверкаДокументовПереопределяемый КАК ПроверкаДокументовПереопределяемый
	|		ПО ОтражениеДокументовВУчете.Регистратор = ПроверкаДокументовПереопределяемый.Документ
	|		 И ОтражениеДокументовВУчете.Организация = ПроверкаДокументовПереопределяемый.Организация
	|		 И &ОтражатьВУчетеТолькоПроверенныеДокументы
	|ГДЕ
	|	ОтражениеДокументовВУчете.ДатаОтражения <= &ДатаОкончания
	|	И &ОтборПоНачальномуМоментуВремени
	|	И &ОтборПоКонечномуМоментуВремени
	|	И &ОтборПоТипамДокументов
	|	И &ОтборПоДокументам
	|	И &ОтборПоОрганизациям
	|	И &ОтборПоСтатусамОтражения
	|	И &ДокументПроверен
	|СГРУППИРОВАТЬ ПО
	|	ОтражениеДокументовВУчете.МоментВремени";
	
	ПроверкаДокументовСервер.ПереопределитьВТекстеЗапросаСтатусыПроверкиСУчетомИсключений(Запрос.Текст, "ОтражениеДокументовВУчете.Регистратор");
	
	Если ФормированиеПорции Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ОтражениеДокументовВУчете.МоментВремени";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Если ФормированиеПроводок Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОтражениеДокументовВУчете.Период КАК Период,
		|	ОтражениеДокументовВУчете.Регистратор КАК Регистратор,
		|	ОтражениеДокументовВУчете.ПланСчетов КАК ПланСчетов,
		|	ОтражениеДокументовВУчете.Организация КАК Организация,
		|	ОтражениеДокументовВУчете.ДатаОтражения КАК ДатаОтражения,
		|	ОтражениеДокументовВУчете.ИдентификаторСтатуса КАК ИдентификаторСтатуса,
		|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК ПериодНастройкиФормированияПроводок
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВУчете
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ МоментыВремени КАК МоментыВремени
		|		ПО ОтражениеДокументовВУчете.МоментВремени = МоментыВремени.МоментВремени
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
		|		ПО ОтражениеДокументовВУчете.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
		|		 И ОтражениеДокументовВУчете.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
		|		 И ОтражениеДокументовВУчете.ДатаОтражения >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПроверкаДокументовПереопределяемый КАК ПроверкаДокументовПереопределяемый
		|		ПО ОтражениеДокументовВУчете.Регистратор = ПроверкаДокументовПереопределяемый.Документ
		|		 И ОтражениеДокументовВУчете.Организация = ПроверкаДокументовПереопределяемый.Организация
		|		 И &ОтражатьВУчетеТолькоПроверенныеДокументы
		|ГДЕ
		|	ОтражениеДокументовВУчете.ДатаОтражения <= &ДатаОкончания
		|	И &ОтборПоОрганизациям
		|	И &ОтборПоСтатусамОтражения
		|	И &ДокументПроверен
		|СГРУППИРОВАТЬ ПО
		|	ОтражениеДокументовВУчете.Период,
		|	ОтражениеДокументовВУчете.Регистратор,
		|	ОтражениеДокументовВУчете.ПланСчетов,
		|	ОтражениеДокументовВУчете.Организация,
		|	ОтражениеДокументовВУчете.ДатаОтражения,
		|	ОтражениеДокументовВУчете.ИдентификаторСтатуса
		|ИНДЕКСИРОВАТЬ ПО
		|	ПланСчетов,
		|	Организация,
		|	ПериодНастройкиФормированияПроводок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Период КАК Период,
		|	ТаблицаДокументов.Регистратор КАК Регистратор,
		|	ТаблицаДокументов.ПланСчетов КАК ПланСчетов,
		|	ТаблицаДокументов.Организация КАК Организация,
		|	ТаблицаДокументов.ДатаОтражения КАК ДатаОтражения,
		|	ТаблицаДокументов.ИдентификаторСтатуса КАК ИдентификаторСтатуса,
		|	ЕСТЬNULL(ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок, НЕОПРЕДЕЛЕНО) КАК НастройкаФормированияПроводок
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
		|		ПО ТаблицаДокументов.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
		|		 И ТаблицаДокументов.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
		|		 И ТаблицаДокументов.ПериодНастройкиФормированияПроводок = ПланыСчетовМеждународногоУчетаОрганизаций.Период
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	ПланСчетов,
		|	Организация,
		|	ДатаОтражения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
		|	ДокументыКОтражению.ПланСчетов.ПроводкиСКорреспонденцией КАК ПроводкиСКорреспонденцией,
		|	ДокументыКОтражению.ПланСчетов.ПроводкиБезКорреспонденции КАК ПроводкиБезКорреспонденции
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению
		|СГРУППИРОВАТЬ ПО
		|	ДокументыКОтражению.ПланСчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрБухгалтерии.Международный КАК МеждународныйСКорреспонденцией
		|ГДЕ
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ДокументыКОтражению КАК ДокументыКОтражению
		|		ГДЕ
		|			ДокументыКОтражению.Регистратор = МеждународныйСКорреспонденцией.Регистратор
		|			И ДокументыКОтражению.ПланСчетов = МеждународныйСКорреспонденцией.ПланСчетов
		|			И ДокументыКОтражению.Организация = МеждународныйСКорреспонденцией.Организация
		|			И МеждународныйСКорреспонденцией.ПланСчетов.ПроводкиБезКорреспонденции
		|		)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрБухгалтерии.МеждународныйБезКорреспонденции КАК МеждународныйБезКорреспонденции
		|ГДЕ
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ДокументыКОтражению КАК ДокументыКОтражению
		|		ГДЕ
		|			ДокументыКОтражению.Регистратор = МеждународныйБезКорреспонденции.Регистратор
		|			И ДокументыКОтражению.ПланСчетов = МеждународныйБезКорреспонденции.ПланСчетов
		|			И ДокументыКОтражению.Организация = МеждународныйБезКорреспонденции.Организация
		|			И МеждународныйБезКорреспонденции.ПланСчетов.ПроводкиСКорреспонденцией
		|		)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыКОтражению.Регистратор КАК Регистратор,
		|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
		|	ДокументыКОтражению.Организация КАК Организация,
		|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
		|	ДокументыКОтражению.ИдентификаторСтатуса КАК ИдентификаторСтатуса
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению
		|ИТОГИ
		|ПО
		|	Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////";
		ПроверкаДокументовСервер.ПереопределитьВТекстеЗапросаСтатусыПроверкиСУчетомИсключений(ТекстЗапроса, "ОтражениеДокументовВУчете.Регистратор");
		Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	КонецЕсли;
	
	Если ФормированиеПорции Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ ПЕРВЫЕ 1111
		|	МоментыВремени.МоментВремени КАК МоментВремени
		|ИЗ
		|	МоментыВремени КАК МоментыВремени
		|УПОРЯДОЧИТЬ ПО
		|	МоментыВремени.МоментВремени УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(МоментыВремени.Количество) КАК Количество
		|ИЗ
		|	МоментыВремени КАК МоментыВремени
		|ИМЕЮЩИЕ
		|	СУММА(МоментыВремени.Количество) = &КоличествоДокументов
		|;
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|УНИЧТОЖИТЬ МоментыВремени
	|";
	
	Если ФормированиеПорции Тогда
		Если НЕ ФормированиеПроводок И ТипЗнч(ПараметрыОтраженияВМеждународномУчете.Документы) = Тип("Массив") Тогда
			Первые1111 = "";
		Иначе
			Первые1111 = "ПЕРВЫЕ 1";//@Query-part-1
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1111", Первые1111);//@Query-part-1
		
		ДокументовНаПорцию = ПараметрыПорции.КоличествоДокументов / ПараметрыПорции.КоличествоПорций;
		ОкруглитьПорциюДо = Мин(10, Цел(ДокументовНаПорцию / 10) + 1);
		ДокументовНаПорцию = ОкруглитьПорциюДо * (Цел(ДокументовНаПорцию / ОкруглитьПорциюДо) + 1);
		
		Первые1000 = "ПЕРВЫЕ " + Формат(ДокументовНаПорцию, "ЧДЦ=0; ЧГ=0");//@Query-part-1
		ОтборПоНачальномуМоментуВремени = "ОтражениеДокументовВУчете.МоментВремени > &МоментВремени";
		ОтборПоКонечномуМоментуВремени = "ИСТИНА";
		
		Запрос.УстановитьПараметр("КоличествоДокументов", ДокументовНаПорцию);
		Запрос.УстановитьПараметр("МоментВремени", ПараметрыПорции.КонечныйМоментВремени);
	ИначеЕсли ФормированиеПроводок Тогда
		Первые1000 = "";
		ОтборПоНачальномуМоментуВремени = "ОтражениеДокументовВУчете.МоментВремени > &НачальныйМоментВремени";
		ОтборПоКонечномуМоментуВремени = "ОтражениеДокументовВУчете.МоментВремени <= &КонечныйМоментВремени"; 
		
		Запрос.УстановитьПараметр("НачальныйМоментВремени", ПараметрыПорции.НачальныйМоментВремени);
		Запрос.УстановитьПараметр("КонечныйМоментВремени", ПараметрыПорции.КонечныйМоментВремени);
	КонецЕсли;
	
	Если ПараметрыПорции.ТипыДокументов.Количество() > 0 Тогда
		ОтборПоТипамДокументов = "ТИПЗНАЧЕНИЯ(ОтражениеДокументовВУчете.Регистратор) В (&ТипыДокументов)";
		Запрос.УстановитьПараметр("ТипыДокументов", ПараметрыПорции.ТипыДокументов);
	Иначе
		ОтборПоТипамДокументов = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", Первые1000);//@Query-part-1
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоНачальномуМоментуВремени", ОтборПоНачальномуМоментуВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКонечномуМоментуВремени", ОтборПоКонечномуМоментуВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоТипамДокументов", ОтборПоТипамДокументов);
	
	УстановитьОтборДокументовПоПараметрамОтражения(Запрос, ПараметрыОтраженияВМеждународномУчете);
	
	Результаты = Запрос.ВыполнитьПакет();
	МаксИндекс = Результаты.ВГраница();
	
	Если ФормированиеПорции Тогда
		РезультатМоментВремени = Результаты[МаксИндекс - 2];
		РезультатПолнаяПорция = Результаты[МаксИндекс - 1];
		
		ВыборкаМоментВремени = РезультатМоментВремени.Выбрать();
		Если ВыборкаМоментВремени.Следующий() Тогда
			КонечныйМоментВремени = ВыборкаМоментВремени.МоментВремени;
		Иначе
			КонечныйМоментВремени = ПараметрыПорции.КонечныйМоментВремени;
		КонецЕсли;
		
		ПараметрыПорции.НачальныйМоментВремени = ПараметрыПорции.КонечныйМоментВремени;
		ПараметрыПорции.КонечныйМоментВремени = КонечныйМоментВремени;
		ПараметрыПорции.ПоследняяПорция = РезультатПолнаяПорция.Пустой();
		
		ДокументыКОтражениюВУчете = ВыборкаМоментВремени;
		ДокументыКОтражениюВУчете.Сбросить();
		
		СмещениеИндекса = 3;
	Иначе
		СмещениеИндекса = 1;
	КонецЕсли;
	
	Если ФормированиеПроводок Тогда
		РезультатПланыСчетов = Результаты[МаксИндекс - СмещениеИндекса - 2];
		РезультатНедопустимыеПроводки = Результаты[МаксИндекс - СмещениеИндекса - 1];
		РезультатДокументыКОтражению = Результаты[МаксИндекс - СмещениеИндекса];
		
		ПараметрыОтраженияВМеждународномУчете.ПланыСчетовСКорреспонденцией.Очистить();
		ПараметрыОтраженияВМеждународномУчете.ПланыСчетовБезКорреспонденции.Очистить();
		
		ВыборкаПланыСчетов = РезультатПланыСчетов.Выбрать();
		Пока ВыборкаПланыСчетов.Следующий() Цикл
			Если ВыборкаПланыСчетов.ПроводкиСКорреспонденцией Тогда
				ПараметрыОтраженияВМеждународномУчете.ПланыСчетовСКорреспонденцией.Добавить(ВыборкаПланыСчетов.ПланСчетов);
			КонецЕсли;
			Если ВыборкаПланыСчетов.ПроводкиБезКорреспонденции Тогда
				ПараметрыОтраженияВМеждународномУчете.ПланыСчетовБезКорреспонденции.Добавить(ВыборкаПланыСчетов.ПланСчетов);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ РезультатНедопустимыеПроводки.Пустой() Тогда
			Если ПараметрыОтраженияВМеждународномУчете.ПланыСчетовСКорреспонденцией.Количество() = 0 Тогда
				ПараметрыОтраженияВМеждународномУчете.ПланыСчетовСКорреспонденцией.Добавить(Справочники.ПланыСчетовМеждународногоУчета.ПустаяСсылка());
			КонецЕсли;
			Если ПараметрыОтраженияВМеждународномУчете.ПланыСчетовБезКорреспонденции.Количество() = 0 Тогда
				ПараметрыОтраженияВМеждународномУчете.ПланыСчетовБезКорреспонденции.Добавить(Справочники.ПланыСчетовМеждународногоУчета.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
		ДокументыКОтражениюВУчете = РезультатДокументыКОтражению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	Возврат ДокументыКОтражениюВУчете;
	
КонецФункции

Процедура УстановитьОтборДокументовПоПараметрамОтражения(Запрос, ПараметрыОтраженияВМеждународномУчете)
	
	Если ЗначениеЗаполнено(ПараметрыОтраженияВМеждународномУчете.Документы) Тогда
		ОтборПоДокументам = "ОтражениеДокументовВУчете.Регистратор В (&Документы)";
		Запрос.УстановитьПараметр("Документы", ПараметрыОтраженияВМеждународномУчете.Документы);
	Иначе
		ОтборПоДокументам = "ИСТИНА";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтраженияВМеждународномУчете.Организации) Тогда
		ОтборПоОрганизациям = "ОтражениеДокументовВУчете.Организация В (&Организации)";
		Запрос.УстановитьПараметр("Организации",  ПараметрыОтраженияВМеждународномУчете.Организации);
	Иначе
		ОтборПоОрганизациям = "ИСТИНА";
	КонецЕсли;
	
	Если ПараметрыОтраженияВМеждународномУчете.ПроверятьСтатусОтражения Тогда
		ОтборПоСтатусамОтражения = "ОтражениеДокументовВУчете.Статус В (
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете),
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете))";
	Иначе
		ОтборПоСтатусамОтражения = "ИСТИНА";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтраженияВМеждународномУчете.Документы)
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов")
		И ПолучитьФункциональнуюОпцию("ОтражатьВМеждународномУчетеТолькоПроверенныеДокументы") Тогда
		ДокументПроверен = "ЕСТЬNULL(ПроверкаДокументовПереопределяемый.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)) 
			|	= ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)";
	Иначе
		ДокументПроверен = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоДокументам", ОтборПоДокументам);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизациям", ОтборПоОрганизациям);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтатусамОтражения", ОтборПоСтатусамОтражения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументПроверен", ДокументПроверен);
	
	Запрос.УстановитьПараметр("ОтражатьВУчетеТолькоПроверенныеДокументы",
		ПолучитьФункциональнуюОпцию("ОтражатьВМеждународномУчетеТолькоПроверенныеДокументы"));
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(
		ПараметрыОтраженияВМеждународномУчете.ДатаОкончания <> '00010101',
		ПараметрыОтраженияВМеждународномУчете.ДатаОкончания,
		'39991231235959'));
	
КонецПроцедуры

Процедура ДополнитьПараметрыЕдинственнойПорции(ПараметрыПорции)
	
	ПараметрыПорции.КонечныйМоментВремени = Новый МоментВремени('39991231235959');
	ПараметрыПорции.ПоследняяПорция = Истина;
	
КонецПроцедуры

Функция ОтразитьПорциюДокументовТекущимПотоком(ДокументыКОтражениюВУчете, ПараметрыОтраженияВМеждународномУчете, ПараметрыФормированияПроводок)
	
	Для НомерПопытки = 1 По ПараметрыОтраженияВМеждународномУчете.КоличествоПопыток Цикл
		Попытка
			ТаблицаПроводок = ОтразитьПорциюДокументов(ДокументыКОтражениюВУчете, ПараметрыОтраженияВМеждународномУчете, ПараметрыФормированияПроводок);
			Прервать;
		Исключение
			Если НомерПопытки < ПараметрыОтраженияВМеждународномУчете.КоличествоПопыток Тогда
				УничтожитьВременныеТаблицы(ПараметрыФормированияПроводок.МенеджерВременныхТаблиц, Истина);
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Процедура НачатьОтражениеПорцииДокументовНовымПотоком(ПараметрыОтраженияВМеждународномУчете, ПараметрыПотока, ЭтоПоследняяПорция)
	
	ПараметрыОтражения = ПараметрыОтраженияВМеждународномУчете();
	ЗаполнитьЗначенияСвойств(ПараметрыОтражения, ПараметрыОтраженияВМеждународномУчете,
		"Организации,ДатаОкончания,ЗаписыватьПроводки,ВыполнитьПересчеты,ПроверятьСтатусОтражения");
	
	Если ПараметрыПотока.Документы.Количество() > 0 Тогда
		ПараметрыОтражения.Документы = ПараметрыПотока.Документы;
	КонецЕсли;
	
	ПараметрыПорции = Новый Структура("НачальныйМоментВремени,КонечныйМоментВремени,ТипыДокументов");
	ЗаполнитьЗначенияСвойств(ПараметрыПорции, ПараметрыПотока);
	
	Если НЕ ПараметрыОтраженияВМеждународномУчете.ЗаписыватьПроводки Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
		ПараметрыПотока.АдресРезультата = АдресХранилища;
	Иначе
		АдресХранилища = "";
	КонецЕсли;
	
	Если ЭтоПоследняяПорция Тогда
		Для НомерПопытки = 1 По ПараметрыОтраженияВМеждународномУчете.КоличествоПопыток Цикл
			Попытка
				ОтразитьПорциюДокументовНовымПотоком(ПараметрыОтражения, ПараметрыПорции, АдресХранилища);
				Прервать;
			Исключение
				Если НомерПопытки = ПараметрыОтраженияВМеждународномУчете.КоличествоПопыток Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	Иначе
		ИмяМетода = "МеждународныйУчетПроведениеСервер.ОтразитьПорциюДокументовНовымПотоком";
		Наименование = НСтр("ru = 'Отражение документов в международном учете';
							|en = 'Record documents in financial accounting'");
		
		ПараметрыВыполнения = Новый Массив();
		ПараметрыВыполнения.Добавить(ПараметрыОтражения);
		ПараметрыВыполнения.Добавить(ПараметрыПорции);
		ПараметрыВыполнения.Добавить(АдресХранилища);
		
		НовоеЗадание = ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыВыполнения,, Наименование);
		ПараметрыПотока.Идентификатор = НовоеЗадание.УникальныйИдентификатор;
		ПараметрыПотока.КоличествоПопыток = ПараметрыПотока.КоличествоПопыток + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьПорциюДокументовНовымПотоком(ПараметрыОтраженияВМеждународномУчете, ПараметрыПорции, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФормированияПроводок = ПараметрыФормированияПроводок(ПараметрыОтраженияВМеждународномУчете);
	
	ДокументыКОтражениюВУчете = ДокументыКОтражениюВУчете(
		ПараметрыОтраженияВМеждународномУчете,
		ПараметрыФормированияПроводок,
		ПараметрыПорции);
	
	ТаблицаПроводок = ОтразитьПорциюДокументов(ДокументыКОтражениюВУчете, ПараметрыОтраженияВМеждународномУчете, ПараметрыФормированияПроводок);
	
	Если НЕ ПараметрыОтраженияВМеждународномУчете.ЗаписыватьПроводки Тогда
		ПоместитьВоВременноеХранилище(ТаблицаПроводок, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтразитьПорциюДокументов(ДокументыКОтражениюВУчете, ПараметрыОтраженияВМеждународномУчете, ПараметрыФормированияПроводок)
	
	ТаблицаПроводок = ТаблицаПроводок();
	
	МеждународныйУчетПоДаннымОперативногоУчета.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
	МеждународныйУчетПоДаннымФинансовыхРегистров.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
	МеждународныйУчетПоДаннымРеглУчета.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
	МеждународныйУчетПоДаннымДокументов.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
	
	ПересчитатьТаблицуПроводокПоКурсу(ПараметрыФормированияПроводок, ТаблицаПроводок);
	СвернутьТаблицуПроводок(ПараметрыФормированияПроводок, ТаблицаПроводок);
	
	УдалитьПроводкиБезСуммИКоличеств(ТаблицаПроводок);
	
	УдалитьНезначащиеПроводки(ПараметрыФормированияПроводок, ТаблицаПроводок);
	
	ДобавитьПроводкиСторно(ПараметрыФормированияПроводок, ТаблицаПроводок);
	ДобавитьПроводкиПоДругимОрганизациямПериодам(ПараметрыОтраженияВМеждународномУчете, ПараметрыФормированияПроводок, ТаблицаПроводок);
	
	Если ПараметрыОтраженияВМеждународномУчете.ЗаписыватьПроводки Тогда
		ДокументыКОтражениюВУчете.Сбросить();
		ЗаписатьПроводки(ТаблицаПроводок,
			ДокументыКОтражениюВУчете,
			ПараметрыОтраженияВМеждународномУчете,
			ПараметрыФормированияПроводок);
		ВернутьКОтражениюДокументыСторно(ПараметрыФормированияПроводок);
		ТаблицаПроводок.Очистить();
	КонецЕсли;
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Процедура ОжидатьЗавершенияПотоковОтражения(ПараметрыОтраженияВМеждународномУчете,
	ТаблицаУправленияПотоками, ТаблицаПроводок, ЗавершениеВсехПотоков)
	
	ВремяОжидания = 60;
	АктивныеЗадания = Новый Массив();
	АварийныеЗадания = Новый Массив();
	ЗавершенныеЗадания = Новый Массив();
	
	Для Каждого ПараметрыПотока Из ТаблицаУправленияПотоками Цикл
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ПараметрыПотока.Идентификатор);
		Если ФоновоеЗадание = Неопределено Тогда
			АварийныеЗадания.Добавить(ПараметрыПотока.Идентификатор);
		ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			АктивныеЗадания.Добавить(ФоновоеЗадание);
		ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			ЗавершенныеЗадания.Добавить(ПараметрыПотока.Идентификатор);
		Иначе
			АварийныеЗадания.Добавить(ПараметрыПотока.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Пока (ЗавершенныеЗадания.Количество() = 0 ИЛИ ЗавершениеВсехПотоков) И АктивныеЗадания.Количество() > 0 Цикл
		АктивныеЗадания = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(АктивныеЗадания, ВремяОжидания);
		КоличествоЗаданий = АктивныеЗадания.Количество();
		
		Для НомерЗадания = 1 По КоличествоЗаданий Цикл
			ОбратныйИндекс = КоличествоЗаданий - НомерЗадания;
			ФоновоеЗадание = АктивныеЗадания[ОбратныйИндекс];
			
			Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
				Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					ЗавершенныеЗадания.Добавить(ФоновоеЗадание.УникальныйИдентификатор);
				Иначе
					АварийныеЗадания.Добавить(ФоновоеЗадание.УникальныйИдентификатор);
				КонецЕсли;
				АктивныеЗадания.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЗавершенноеЗадание Из ЗавершенныеЗадания Цикл
		ПараметрыПотока = ТаблицаУправленияПотоками.Найти(ЗавершенноеЗадание, "Идентификатор");
		Если ПараметрыПотока <> Неопределено Тогда
			Если НЕ ПараметрыОтраженияВМеждународномУчете.ЗаписыватьПроводки Тогда
				ПорцияПроводок = ПолучитьИзВременногоХранилища(ПараметрыПотока.АдресРезультата);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПорцияПроводок, ТаблицаПроводок);
			КонецЕсли;
			ТаблицаУправленияПотоками.Удалить(ПараметрыПотока);
		КонецЕсли;
	КонецЦикла;
	
	Если АварийныеЗадания.Количество() > 0 Тогда
		ТекстыСообщений = Новый Массив();
		
		Для Каждого АварийноеЗадание Из АварийныеЗадания Цикл
			ПараметрыПотока = ТаблицаУправленияПотоками.Найти(АварийноеЗадание, "Идентификатор");
			
			Если ПараметрыПотока = Неопределено Тогда
			ИначеЕсли ПараметрыПотока.КоличествоПопыток < ПараметрыОтраженияВМеждународномУчете.КоличествоПопыток Тогда
				НачатьОтражениеПорцииДокументовНовымПотоком(ПараметрыОтраженияВМеждународномУчете, ПараметрыПотока, Ложь);
			Иначе
				ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(АварийноеЗадание);
				Если ФоновоеЗадание = Неопределено Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 не найдено.';
													|en = 'A background job with the %1 ID is not found.'"), АварийноеЗадание);
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 отменено администратором.';
													|en = 'The background job with the %1 ID is canceled by the administrator.'"), АварийноеЗадание);
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 завершено аварийно.';
													|en = 'The background job with the %1 ID crashed.'"), АварийноеЗадание)
						+ Символы.ПС + КраткоеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 не выполнено.';
													|en = 'The background job with the %1 ID is not performed.'"), АварийноеЗадание);
				КонецЕсли;
				
				ТекстыСообщений.Добавить(ТекстСообщения);
				
				Если ФоновоеЗадание = Неопределено ИЛИ ФоновоеЗадание.ИнформацияОбОшибке = Неопределено Тогда
					ПредставлениеОшибки = ТекстСообщения;
				Иначе
					ПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 завершено аварийно.';
														|en = 'The background job with the %1 ID crashed.'"), АварийноеЗадание)
						+ Символы.ПС + ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Отражение документов в международном учете';
						|en = 'Record documents in financial accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПредставлениеОшибки);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекстыСообщений.Количество() > 0 Тогда
			ТекстыСообщений.Вставить(0, НСтр("ru = 'Отражение документов в международном учете завершилось с ошибкой.';
											|en = 'An error occurred when recording documents in financial accounting.'"));
			ТекстСообщения = СтрСоединить(ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТекстыСообщений), Символы.ПС);
			ВызватьИсключение ТекстСообщения;
		ИначеЕсли ЗавершенныеЗадания.Количество() = 0 ИЛИ ЗавершениеВсехПотоков Тогда
			ОжидатьЗавершенияПотоковОтражения(ПараметрыОтраженияВМеждународномУчете,
				ТаблицаУправленияПотоками, ТаблицаПроводок, ЗавершениеВсехПотоков);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, АварийноеЗавершение = Ложь)
	
	ИменаВременныхТаблиц = Новый Массив();
	ИмяТаблицыДокументов = "ДокументыКОтражению";
	
	Если АварийноеЗавершение Тогда
		Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
			ИмяТаблицы = ВременнаяТаблица.ПолноеИмя;
			Если ИмяТаблицы <> ИмяТаблицыДокументов Тогда
				ИменаВременныхТаблиц.Добавить(ИмяТаблицы);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИменаВременныхТаблиц.Добавить(ИмяТаблицыДокументов);
	КонецЕсли;
	
	Если ИменаВременныхТаблиц.Количество() > 0 Тогда
		СтрокиЗапроса = Новый Массив();
		
		Для Каждого ИмяТаблицы Из ИменаВременныхТаблиц Цикл
			СтрокиЗапроса.Добавить("УНИЧТОЖИТЬ " + ИмяТаблицы);
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = СтрСоединить(СтрокиЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПроводки(ТаблицаПроводок, ДокументыКОтражениюВУчете, ПараметрыОтражения, ПараметрыПроводок)
	
	ТаблицаПроводок.Индексы.Добавить("Регистратор");
	
	ОтбиратьПоПланамСчетов = ПараметрыОтражения.ПланыСчетовСКорреспонденцией.Количество() > 0
		И ПараметрыОтражения.ПланыСчетовБезКорреспонденции.Количество() > 0;
	
	ИзмеренияРегистра = Новый ТаблицаЗначений();
	ИзмеренияРегистра.Колонки.Добавить("ПланСчетов");
	ИзмеренияРегистра.Колонки.Добавить("Организация");
	ИзмеренияРегистра.Колонки.Добавить("ДатаОтражения");
	ИзмеренияРегистра.Колонки.Добавить("ИдентификаторСтатуса");
	
	Пока ДокументыКОтражениюВУчете.Следующий() Цикл
		Регистратор = ДокументыКОтражениюВУчете.Регистратор;
		ИзмеренияРегистра.Очистить();
		
		ВыборкаПоИзмерениям = ДокументыКОтражениюВУчете.Выбрать();
		Пока ВыборкаПоИзмерениям.Следующий() Цикл
			НоваяСтрока = ИзмеренияРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоИзмерениям);
		КонецЦикла;
		
		ПроводкиДокумента = ТаблицаПроводок.Скопировать(Новый Структура("Регистратор", Регистратор));
		
		НачатьТранзакцию();
		
		Попытка
		
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОтражениеДокументовВМеждународномУчете.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
		
			Если НЕ ОбновитьСтатусОтраженияДокумента(Регистратор, ИзмеренияРегистра, ПроводкиДокумента) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыОтражения.ПланыСчетовСКорреспонденцией.Количество() > 0 Тогда
				ЗаписываемыеПроводки = ЗаписываемыеПроводки(ПроводкиДокумента,
					ПараметрыОтражения.ПланыСчетовСКорреспонденцией, ОтбиратьПоПланамСчетов);
				ЗаписатьПроводкиДокумента(Регистратор, ЗаписываемыеПроводки, ПараметрыПроводок);
			КонецЕсли;
			
			Если ПараметрыОтражения.ПланыСчетовБезКорреспонденции.Количество() > 0 Тогда
				ЗаписываемыеПроводки = ЗаписываемыеПроводки(ПроводкиДокумента,
					ПараметрыОтражения.ПланыСчетовБезКорреспонденции, ОтбиратьПоПланамСчетов);
				ЗаписатьПроводкиДокумента(Регистратор, ЗаписываемыеПроводки, ПараметрыПроводок, Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать проводки международного учета по причине';
									|en = 'Cannot generate financial accounting entries. Reason:'") + ":"
				+ Символы.ПС + "%1";
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ТекстСообщения);
			
			ВызватьИсключение ТекстСообщения;
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьПроводкиДокумента(Регистратор, ТаблицаПроводок, ПараметрыПроводок, БезКорреспонденции = Ложь)
	
	Если БезКорреспонденции Тогда
		НаборЗаписей = РегистрыБухгалтерии.МеждународныйБезКорреспонденции.СоздатьНаборЗаписей();
		УдалитьКорреспонденцииПроводок(ТаблицаПроводок, ПараметрыПроводок);
	Иначе
		НаборЗаписей = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ЗаписыватьПустойНабор", Истина);
	
	ТаблицаПроводок.Сортировать("ПланСчетов, Сторно Убыв, Период, Организация");
	
	Для Каждого Проводка Из ТаблицаПроводок Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Проводка);
		
		Если БезКорреспонденции Тогда
			НаборЗаписей.УстановитьСубконто(НоваяЗапись, Проводка);
		Иначе
			НаборЗаписей.УстановитьСубконто(НоваяЗапись, Проводка, "Дт");
			НаборЗаписей.УстановитьСубконто(НоваяЗапись, Проводка, "Кт");
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПересчитатьТаблицуПроводокПоКурсу(ПараметрыОтражения, ТаблицаПроводок)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПроводок.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(ТаблицаПроводок.Период, ДЕНЬ) КАК ДатаПроводки,
	|	ТаблицаПроводок.Организация КАК Организация,
	|	ТаблицаПроводок.ПланСчетов КАК ПланСчетов,
	|	&ТекстВыборкиОстальныхКолонок,
	|	ВЫБОР КОГДА ТаблицаПроводок.Сумма = НЕОПРЕДЕЛЕНО
	|		ТОГДА 0
	|		ИНАЧЕ ТаблицаПроводок.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ТаблицаПроводок.СуммаПредставления = НЕОПРЕДЕЛЕНО
	|		ТОГДА 0
	|		ИНАЧЕ ТаблицаПроводок.СуммаПредставления
	|	КОНЕЦ КАК СуммаПредставления,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной КАК ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления КАК ВалютаХраненияСуммыПредставления,
	|	ТаблицаПроводок.ВалютаФункциональная КАК ВалютаФункциональная,
	|	ТаблицаПроводок.ВалютаПредставления КАК ВалютаПредставления
	|ПОМЕСТИТЬ ТаблицаПроводок
	|ИЗ
	|	&ТаблицаПроводок КАК ТаблицаПроводок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВалютаХраненияСуммыФункциональной,
	|	ВалютаХраненияСуммыПредставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ТаблицаПроводок.ДатаПроводки КАК ДатаПроводки,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной КАК ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления КАК ВалютаХраненияСуммыПредставления,
	|	ТаблицаПроводок.ВалютаФункциональная КАК ВалютаФункциональная,
	|	ТаблицаПроводок.ВалютаПредставления КАК ВалютаПредставления
	|ПОМЕСТИТЬ Валюты
	|ИЗ
	|	ТаблицаПроводок КАК ТаблицаПроводок
	|ГДЕ
	|	(ТаблицаПроводок.ВалютаХраненияСуммыФункциональной <> ТаблицаПроводок.ВалютаФункциональная
	|			ИЛИ ТаблицаПроводок.ВалютаХраненияСуммыПредставления <> ТаблицаПроводок.ВалютаПредставления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	КурсыВалют.ДатаПроводки КАК ДатаПроводки,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.ПериодКурса) КАК ПериодКурса
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	(ВЫБРАТЬ
	|		Валюты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Валюты.ДатаПроводки КАК ДатаПроводки,
	|		Валюты.ВалютаХраненияСуммыФункциональной КАК Валюта,
	|		КурсыВалют.Период КАК ПериодКурса
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Валюты.ДатаПроводки >= КурсыВалют.Период
	|				И КурсыВалют.Валюта = Валюты.ВалютаХраненияСуммыФункциональной
	|				И КурсыВалют.БазоваяВалюта = Валюты.ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Валюты.ДатаПроводки,
	|		Валюты.ВалютаХраненияСуммыПредставления,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Валюты.ДатаПроводки >= КурсыВалют.Период
	|				И КурсыВалют.Валюта = Валюты.ВалютаХраненияСуммыПредставления
	|				И КурсыВалют.БазоваяВалюта = Валюты.ВалютаРегламентированногоУчета
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Валюты.ДатаПроводки,
	|		Валюты.ВалютаФункциональная,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Валюты.ДатаПроводки >= КурсыВалют.Период
	|				И КурсыВалют.Валюта = Валюты.ВалютаФункциональная
	|				И КурсыВалют.БазоваяВалюта = Валюты.ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Валюты.ДатаПроводки,
	|		Валюты.ВалютаПредставления,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Валюты.ДатаПроводки >= КурсыВалют.Период
	|				И КурсыВалют.Валюта = Валюты.ВалютаПредставления
	|				И КурсыВалют.БазоваяВалюта = Валюты.ВалютаРегламентированногоУчета) КАК КурсыВалют
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалют.ДатаПроводки,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.ВалютаРегламентированногоУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроводки,
	|	Валюта,
	|	БазоваяВалюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсовВалют.БазоваяВалюта КАК БазоваяВалюта,
	|	ПериодыКурсовВалют.ДатаПроводки КАК ДатаПроводки,
	|	ПериодыКурсовВалют.Валюта КАК Валюта,
	|	КурсыВалют.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалют.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсовВалют.ПериодКурса = КурсыВалют.Период
	|			И ПериодыКурсовВалют.Валюта = КурсыВалют.Валюта
	|			И ПериодыКурсовВалют.БазоваяВалюта = КурсыВалют.БазоваяВалюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроводки,
	|	Валюта,
	|	БазоваяВалюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВалютыБезКурсов.ДатаПроводки) КАК ДатаПроводки,
	|	ВалютыБезКурсов.БазоваяВалюта КАК БазоваяВалюта,
	|	ВалютыБезКурсов.Валюта КАК Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		Валюты.ДатаПроводки КАК ДатаПроводки,
	|		Валюты.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|		Валюты.ВалютаФункциональная	КАК Валюта	
	|	ИЗ
	|		Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ПО
	|			Валюты.ДатаПроводки = ПериодыКурсовВалют.ДатаПроводки 
	|			И Валюты.ВалютаФункциональная = ПериодыКурсовВалют.Валюта
	|			И Валюты.ВалютаРегламентированногоУчета = ПериодыКурсовВалют.БазоваяВалюта
	|	ГДЕ
	|		ПериодыКурсовВалют.ПериодКурса ЕСТЬ NULL
	|		И Валюты.ВалютаРегламентированногоУчета <> Валюты.ВалютаФункциональная
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Валюты.ДатаПроводки КАК ДатаПроводки,
	|		Валюты.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|		Валюты.ВалютаПредставления КАК Валюта	
	|	ИЗ
	|		Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ПО
	|			Валюты.ДатаПроводки = ПериодыКурсовВалют.ДатаПроводки 
	|			И Валюты.ВалютаПредставления = ПериодыКурсовВалют.Валюта
	|			И Валюты.ВалютаРегламентированногоУчета = ПериодыКурсовВалют.БазоваяВалюта
	|	ГДЕ
	|		ПериодыКурсовВалют.ПериодКурса ЕСТЬ NULL
	|		И Валюты.ВалютаРегламентированногоУчета <> Валюты.ВалютаПредставления
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Валюты.ДатаПроводки КАК ДатаПроводки,
	|		Валюты.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|		Валюты.ВалютаХраненияСуммыФункциональной КАК Валюта	
	|	ИЗ
	|		Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ПО
	|			Валюты.ДатаПроводки = ПериодыКурсовВалют.ДатаПроводки 
	|			И Валюты.ВалютаХраненияСуммыФункциональной = ПериодыКурсовВалют.Валюта
	|			И Валюты.ВалютаРегламентированногоУчета = ПериодыКурсовВалют.БазоваяВалюта
	|	ГДЕ
	|		ПериодыКурсовВалют.ПериодКурса ЕСТЬ NULL
	|		И Валюты.ВалютаРегламентированногоУчета <> Валюты.ВалютаХраненияСуммыФункциональной
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.ДатаПроводки КАК ДатаПроводки,
	|		Валюты.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|		Валюты.ВалютаХраненияСуммыПредставления КАК Валюта	
	|	ИЗ
	|		Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ПО
	|			Валюты.ДатаПроводки = ПериодыКурсовВалют.ДатаПроводки 
	|			И Валюты.ВалютаХраненияСуммыПредставления = ПериодыКурсовВалют.Валюта
	|			И Валюты.ВалютаРегламентированногоУчета = ПериодыКурсовВалют.БазоваяВалюта
	|	ГДЕ
	|		ПериодыКурсовВалют.ПериодКурса ЕСТЬ NULL
	|		И Валюты.ВалютаРегламентированногоУчета <> Валюты.ВалютаХраненияСуммыПредставления) КАК ВалютыБезКурсов
	|СГРУППИРОВАТЬ ПО
	|	ВалютыБезКурсов.БазоваяВалюта,
	|	ВалютыБезКурсов.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроводок.Период КАК Период,
	|	ТаблицаПроводок.Организация,
	|	ТаблицаПроводок.ПланСчетов,
	|	&ТекстВыборкиОстальныхКолонок,
	|	ВЫРАЗИТЬ(ТаблицаПроводок.Сумма 
	|		* (ЕСТЬNULL(КурсыВалютХраненияСуммыФункциональной.КурсЧислитель, 1) * ЕСТЬNULL(КурсыФункциональнойВалюты.КурсЗнаменатель, 1))
	|		/ (ЕСТЬNULL(КурсыВалютХраненияСуммыФункциональной.КурсЗнаменатель, 1) *  ЕСТЬNULL(КурсыФункциональнойВалюты.КурсЧислитель, 1))
	|	КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы)) КАК Сумма,
	|	ВЫРАЗИТЬ(ТаблицаПроводок.СуммаПредставления 
	|		* (ЕСТЬNULL(КурсыВалютХраненияСуммыПредставления.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютыПредставления.КурсЗнаменатель, 1))
	|		/ (ЕСТЬNULL(КурсыВалютХраненияСуммыПредставления.КурсЗнаменатель, 1) *  ЕСТЬNULL(КурсыВалютыПредставления.КурсЧислитель, 1))
	|	КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы)) КАК СуммаПредставления,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления,
	|	ТаблицаПроводок.ВалютаФункциональная,
	|	ТаблицаПроводок.ВалютаПредставления
	|ИЗ
	|	ТаблицаПроводок КАК ТаблицаПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютХраненияСуммыФункциональной
	|		ПО ТаблицаПроводок.ДатаПроводки = КурсыВалютХраненияСуммыФункциональной.ДатаПроводки
	|			И ТаблицаПроводок.ВалютаХраненияСуммыФункциональной = КурсыВалютХраненияСуммыФункциональной.Валюта
	|			И ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета = КурсыВалютХраненияСуммыФункциональной.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютХраненияСуммыПредставления
	|		ПО ТаблицаПроводок.ДатаПроводки = КурсыВалютХраненияСуммыПредставления.ДатаПроводки
	|			И ТаблицаПроводок.ВалютаХраненияСуммыПредставления = КурсыВалютХраненияСуммыПредставления.Валюта
	|			И ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета = КурсыВалютХраненияСуммыПредставления.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыФункциональнойВалюты
	|		ПО ТаблицаПроводок.ДатаПроводки = КурсыФункциональнойВалюты.ДатаПроводки
	|			И ТаблицаПроводок.ВалютаФункциональная = КурсыФункциональнойВалюты.Валюта
	|			И ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета = КурсыФункциональнойВалюты.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютыПредставления
	|		ПО ТаблицаПроводок.ДатаПроводки = КурсыВалютыПредставления.ДатаПроводки
	|			И ТаблицаПроводок.ВалютаПредставления  = КурсыВалютыПредставления.Валюта
	|			И ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета = КурсыВалютыПредставления.БазоваяВалюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПроводок.ПланСчетов,
	|	ТаблицаПроводок.Организация,
	|	ТаблицаПроводок.Период";
	
	КвалификаторыДенежнойСуммы = Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип.КвалификаторыЧисла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаСуммы", КвалификаторыДенежнойСуммы.Разрядность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТочностьСуммы", КвалификаторыДенежнойСуммы.РазрядностьДробнойЧасти);
	
	СтруктураКолонокИсключений = Новый Структура("МоментВремени, Период, Сумма, СуммаПредставления, Организация, ПланСчетов,
	                                             |ВалютаХраненияСуммыФункциональной, ВалютаХраненияСуммыПредставления,
	                                             |ВалютаФункциональная, ВалютаПредставления");
	МассивПолейВыборки = Новый Массив;
	Для каждого Колонка Из ТаблицаПроводок.Колонки Цикл
		Если СтруктураКолонокИсключений.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейВыборки.Добавить(СтрШаблон("ТаблицаПроводок.%1", Колонка.Имя));
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиОстальныхКолонок", СтрСоединить(МассивПолейВыборки, "," + Символы.ПС));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПроводок", ТаблицаПроводок);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	МассивОшибок = Новый Массив;
	РезультатПроверкиКурсов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока РезультатПроверкиКурсов.Следующий() Цикл
		ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Не определен курс валюты %1 относительно валюты %2 на %3.';
							|en = 'The %1 exchange rate relative to the %2 currency for %3 is not defined.'"),
						РезультатПроверкиКурсов.Валюта,
						РезультатПроверкиКурсов.БазоваяВалюта,
						Формат(РезультатПроверкиКурсов.ДатаПроводки, "ДЛФ=D"));
		МассивОшибок.Добавить(ТекстСообщения);
	КонецЦикла;
	Если МассивОшибок.Количество() Тогда
		ВызватьИсключение СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	ТаблицаПроводок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить();
	
КонецПроцедуры

Процедура ДобавитьПроводкиПоДругимОрганизациямПериодам(ПараметрыОтражения, ПараметрыФормированияПроводок, ТаблицаПроводок)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОтражениеДокументовВУчете.Регистратор КАК Регистратор,
	|	ОтражениеДокументовВУчете.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументовВУчете.Организация КАК Организация,
	|	ОтражениеДокументовВУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВУчете.ПланСчетов.ПроводкиСКорреспонденцией КАК ПроводкиСКорреспонденцией,
	|	ОтражениеДокументовВУчете.ПланСчетов.ПроводкиБезКорреспонденции КАК ПроводкиБезКорреспонденции
	|ПОМЕСТИТЬ ДокументыМножественногоОтражения
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВУчете
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		ГДЕ
	|			ДокументыКОтражению.Регистратор = ОтражениеДокументовВУчете.Регистратор
	|		)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		ГДЕ
	|			ДокументыКОтражению.Регистратор = ОтражениеДокументовВУчете.Регистратор
	|			И ДокументыКОтражению.ПланСчетов = ОтражениеДокументовВУчете.ПланСчетов
	|			И ДокументыКОтражению.Организация = ОтражениеДокументовВУчете.Организация
	|			И ДокументыКОтражению.ДатаОтражения = ОтражениеДокументовВУчете.ДатаОтражения
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения,
	|	ПроводкиСКорреспонденцией,
	|	ПроводкиБезКорреспонденции
	|";
	
	Если ПараметрыОтражения.ПланыСчетовСКорреспонденцией.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
		|ВЫБРАТЬ
		|	Проводки.Период КАК Период,
		|	Проводки.Регистратор КАК Регистратор,
		|	Проводки.НомерСтроки КАК НомерСтроки,
		|	Проводки.СчетДт КАК СчетДт,
		|	Проводки.СчетКт КАК СчетКт,
		|	Проводки.ПланСчетов КАК ПланСчетов,
		|	Проводки.Организация КАК Организация,
		|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
		|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
		|	Проводки.ВалютаДт КАК ВалютаДт,
		|	Проводки.ВалютаКт КАК ВалютаКт,
		|	Проводки.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
		|	Проводки.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
		|	Проводки.Сумма КАК Сумма,
		|	Проводки.СуммаПредставления КАК СуммаПредставления,
		|	Проводки.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	Проводки.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	Проводки.КоличествоДт КАК КоличествоДт,
		|	Проводки.КоличествоКт КАК КоличествоКт,
		|	Проводки.СубконтоДт1 КАК СубконтоДт1,
		|	ЕСТЬNULL(Проводки.ВидСубконтоДт1, 
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт1,
		|	Проводки.СубконтоДт2 КАК СубконтоДт2,
		|	ЕСТЬNULL(Проводки.ВидСубконтоДт2, 
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт2,
		|	Проводки.СубконтоДт3 КАК СубконтоДт3,
		|	ЕСТЬNULL(Проводки.ВидСубконтоДт3, 
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт3,
		|	Проводки.СубконтоКт1 КАК СубконтоКт1,
		|	ЕСТЬNULL(Проводки.ВидСубконтоКт1, 
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт1,
		|	Проводки.СубконтоКт2 КАК СубконтоКт2,
		|	ЕСТЬNULL(Проводки.ВидСубконтоКт2, 
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт2,
		|	Проводки.СубконтоКт3 КАК СубконтоКт3,
		|	ЕСТЬNULL(Проводки.ВидСубконтоКт3, 
		|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт3,
		|	Проводки.Содержание КАК Содержание,
		|	Проводки.ШаблонПроводки КАК ШаблонПроводки,
		|	Проводки.ТипПроводки КАК ТипПроводки,
		|	Проводки.СоответствиеСчетаДт КАК СоответствиеСчетаДт,
		|	Проводки.СоответствиеСчетаКт КАК СоответствиеСчетаКт,
		|	Проводки.СоответствиеОборотов КАК СоответствиеОборотов,
		|	Проводки.Сторно КАК Сторно,
		|	Проводки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	Проводки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
		|		,
		|		,
		|		(Регистратор, ПланСчетов, Организация) В (
		|			ВЫБРАТЬ
		|				ДокументыКОтражению.Регистратор,
		|				ДокументыКОтражению.ПланСчетов,
		|				ДокументыКОтражению.Организация
		|			ИЗ
		|				ДокументыМножественногоОтражения КАК ДокументыКОтражению
		|			ГДЕ
		|				ДокументыКОтражению.ПроводкиСКорреспонденцией
		|		),
		|		,
		|	) КАК Проводки
		|ГДЕ
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ДокументыМножественногоОтражения КАК ДокументыКОтражению
		|		ГДЕ
		|			
		|			ДокументыКОтражению.Регистратор = Проводки.Регистратор
		|			И ДокументыКОтражению.ПланСчетов = Проводки.ПланСчетов
		|			И ДокументыКОтражению.Организация = Проводки.Организация
		|			И ДокументыКОтражению.ДатаОтражения = НАЧАЛОПЕРИОДА(Проводки.Период, ДЕНЬ)
		|			И ДокументыКОтражению.ПроводкиСКорреспонденцией
		|		)
		|";
		
		Если ПараметрыОтражения.ПланыСчетовБезКорреспонденции.Количество() > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтражения.ПланыСчетовБезКорреспонденции.Количество() > 0 Тогда
		Если ПараметрыОтражения.ПланыСчетовСКорреспонденцией.Количество() = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Проводки.Период КАК Период,
		|	Проводки.Регистратор КАК Регистратор,
		|	Проводки.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.Счет
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
		|	КОНЕЦ КАК СчетДт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
		|		ИНАЧЕ Проводки.Счет
		|	КОНЕЦ КАК СчетКт,
		|	Проводки.ПланСчетов КАК ПланСчетов,
		|	Проводки.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.Подразделение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеДт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|		ИНАЧЕ Проводки.Подразделение
		|	КОНЕЦ КАК ПодразделениеКт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.Валюта
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|	КОНЕЦ КАК ВалютаДт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|		ИНАЧЕ Проводки.Валюта
		|	КОНЕЦ КАК ВалютаКт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.НаправлениеДеятельности
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК НаправлениеДеятельностиДт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|		ИНАЧЕ Проводки.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельностиКт,
		|	Проводки.Сумма КАК Сумма,
		|	Проводки.СуммаПредставления КАК СуммаПредставления,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.ВалютнаяСумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА 0
		|		ИНАЧЕ Проводки.ВалютнаяСумма
		|	КОНЕЦ КАК ВалютнаяСуммаКт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоДт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА 0
		|		ИНАЧЕ Проводки.Количество
		|	КОНЕЦ КАК КоличествоКт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.Субконто1
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоДт1,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЕСТЬNULL(Проводки.ВидСубконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
		|	КОНЕЦ КАК ВидСубконтоДт1,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.Субконто2
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоДт2,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЕСТЬNULL(Проводки.ВидСубконто2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
		|	КОНЕЦ КАК ВидСубконтоДт2,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоДт3,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЕСТЬNULL(Проводки.ВидСубконто3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
		|	КОНЕЦ КАК ВидСубконтоДт3,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Проводки.Субконто1
		|	КОНЕЦ КАК СубконтоКт1,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(Проводки.ВидСубконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
		|	КОНЕЦ КАК ВидСубконтоКт1,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Проводки.Субконто2
		|	КОНЕЦ КАК СубконтоКт2,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(Проводки.ВидСубконто2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
		|	КОНЕЦ КАК ВидСубконтоКт2,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Проводки.Субконто3
		|	КОНЕЦ КАК СубконтоКт3,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(Проводки.ВидСубконто3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
		|	КОНЕЦ КАК ВидСубконтоКт3,
		|	Проводки.Содержание КАК Содержание,
		|	Проводки.ШаблонПроводки КАК ШаблонПроводки,
		|	Проводки.ТипПроводки КАК ТипПроводки,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА Проводки.СоответствиеСчета
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СоответствиеСчетаДт,
		|	ВЫБОР
		|		КОГДА Проводки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Проводки.СоответствиеСчета
		|	КОНЕЦ КАК СоответствиеСчетаКт,
		|	Проводки.СоответствиеОборотов КАК СоответствиеОборотов,
		|	Проводки.Сторно КАК Сторно,
		|	Проводки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	Проводки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
		|ИЗ
		|	РегистрБухгалтерии.МеждународныйБезКорреспонденции.ДвиженияССубконто(
		|		,
		|		,
		|		(Регистратор, ПланСчетов, Организация) В (
		|			ВЫБРАТЬ
		|				ДокументыКОтражению.Регистратор,
		|				ДокументыКОтражению.ПланСчетов,
		|				ДокументыКОтражению.Организация
		|			ИЗ
		|				ДокументыМножественногоОтражения КАК ДокументыКОтражению
		|			ГДЕ
		|				ДокументыКОтражению.ПроводкиБезКорреспонденции
		|		),
		|		,
		|	) КАК Проводки
		|ГДЕ
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ДокументыМножественногоОтражения КАК ДокументыКОтражению
		|		ГДЕ
		|			
		|			ДокументыКОтражению.Регистратор = Проводки.Регистратор
		|			И ДокументыКОтражению.ПланСчетов = Проводки.ПланСчетов
		|			И ДокументыКОтражению.Организация = Проводки.Организация
		|			И ДокументыКОтражению.ДатаОтражения = НАЧАЛОПЕРИОДА(Проводки.Период, ДЕНЬ)
		|			И ДокументыКОтражению.ПроводкиБезКорреспонденции
		|		)
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|УНИЧТОЖИТЬ ДокументыМножественногоОтражения
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Проводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
		ЗаполнитьЗначенияСвойств(Проводка, Выборка);
		ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПроводкиСторно(ПараметрыФормированияПроводок, ТаблицаПроводок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	РеестрДокументов.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДокументыКОтражению.ПланСчетов.ПроводкиСКорреспонденцией КАК ПроводкиСКорреспонденцией,
	|	ДокументыКОтражению.ПланСчетов.ПроводкиБезКорреспонденции КАК ПроводкиБезКорреспонденции,
	|	НЕ ДокументыКОтражениюСторнируемыйДокумент.Регистратор ЕСТЬ NULL КАК СторнируемыйДокументКОтражению,
	|	ВЫБОР
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|			= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаменитьСторноРеверсом
	|ПОМЕСТИТЬ ДокументыСторно
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ПО 
	|		ДокументыКОтражению.Регистратор = РеестрДокументов.Ссылка
	|		И РеестрДокументов.СторноИсправление
	|		И РеестрДокументов.Проведен
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражениюСторнируемыйДокумент
	|	ПО 
	|		РеестрДокументов.СторнируемыйДокумент = ДокументыКОтражениюСторнируемыйДокумент.Регистратор
	|		И ДокументыКОтражению.ПланСчетов = ДокументыКОтражениюСторнируемыйДокумент.ПланСчетов
	|		И ДокументыКОтражению.Организация = ДокументыКОтражениюСторнируемыйДокумент.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО
	|		ДокументыКОтражению.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|		И ДокументыКОтражению.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДокументыКОтражению.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|	И ВЫБОР
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПланыСчетовМеждународногоУчетаОрганизаций.Период В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ПланыСчетовОрганизаций.Период)
	|			ИЗ
	|				РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовОрганизаций
	|			ГДЕ
	|				ПланыСчетовОрганизаций.ПланСчетов = ДокументыКОтражению.ПланСчетов
	|				И ПланыСчетовОрганизаций.Организация = ДокументыКОтражению.Организация
	|				И ПланыСчетовОрганизаций.Период <= ДокументыКОтражению.ДатаОтражения
	|			)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СторнируемыйДокумент,
	|	ПланСчетов,
	|	Организация,
	|	ПроводкиСКорреспонденцией,
	|	ПроводкиБезКорреспонденции,
	|	СторнируемыйДокументКОтражению
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСторно.Период КАК Период,
	|	ДокументыСторно.Регистратор КАК Регистратор,
	|	ДокументыСторно.ЗаменитьСторноРеверсом КАК ЗаменитьСторноРеверсом,
	|	Международный.ПланСчетов КАК ПланСчетов,
	|	Международный.Организация КАК Организация,
	|	Международный.ПодразделениеДт КАК ПодразделениеДт,
	|	Международный.ВалютаДт КАК ВалютаДт,
	|	Международный.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	Международный.СчетДт КАК СчетДт,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт1, 
	|	Международный.СубконтоДт1 КАК СубконтоДт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт2,
	|	Международный.СубконтоДт2 КАК СубконтоДт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт3,
	|	Международный.СубконтоДт3 КАК СубконтоДт3,
	|	-Международный.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	-Международный.КоличествоДт КАК КоличествоДт,
	|	Международный.ПодразделениеКт КАК ПодразделениеКт,
	|	Международный.ВалютаКт КАК ВалютаКт,
	|	Международный.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	Международный.СчетКт КАК СчетКт,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт1,
	|	Международный.СубконтоКт1 КАК СубконтоКт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт2,
	|	Международный.СубконтоКт2 КАК СубконтоКт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт3,
	|	Международный.СубконтоКт3 КАК СубконтоКт3,
	|	-Международный.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	-Международный.КоличествоКт КАК КоличествоКт,
	|	-Международный.Сумма КАК Сумма,
	|	-Международный.СуммаПредставления КАК СуммаПредставления,
	|	Международный.Содержание КАК Содержание,
	|	Международный.ШаблонПроводки КАК ШаблонПроводки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПроводокМеждународныйУчет.Сторно) КАК ТипПроводки,
	|	Международный.СоответствиеСчетаДт КАК СоответствиеСчетаДт,
	|	Международный.СоответствиеСчетаКт КАК СоответствиеСчетаКт,
	|	Международный.СоответствиеОборотов КАК СоответствиеОборотов,
	|	ИСТИНА КАК Сторно,
	|	Международный.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Международный.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
	|		,
	|		,
	|		(Регистратор, ПланСчетов, Организация) В (
	|			ВЫБРАТЬ
	|				ДокументыСторно.СторнируемыйДокумент,
	|				ДокументыСторно.ПланСчетов,
	|				ДокументыСторно.Организация
	|			ИЗ
	|				ДокументыСторно КАК ДокументыСторно
	|			ГДЕ
	|				ДокументыСторно.ПроводкиСКорреспонденцией
	|				И НЕ ДокументыСторно.СторнируемыйДокументКОтражению
	|		),
	|		,
	|	) КАК Международный
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыСторно КАК ДокументыСторно
	|	ПО
	|		Международный.Регистратор = ДокументыСторно.СторнируемыйДокумент
	|		И Международный.ПланСчетов = ДокументыСторно.ПланСчетов
	|		И Международный.Организация = ДокументыСторно.Организация
	|		И ДокументыСторно.ПроводкиСКорреспонденцией
	|		И НЕ ДокументыСторно.СторнируемыйДокументКОтражению
	|ГДЕ
	|	НЕ Международный.Сторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыСторно.Период КАК Период,
	|	ДокументыСторно.Регистратор КАК Регистратор,
	|	ДокументыСторно.ЗаменитьСторноРеверсом КАК ЗаменитьСторноРеверсом,
	|	Международный.ПланСчетов КАК ПланСчетов,
	|	Международный.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК ПодразделениеДт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.Валюта
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельностиДт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.Счет
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЕСТЬNULL(Международный.ВидСубконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ (ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
	|	КОНЕЦ КАК ВидСубконтоДт1, 
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.Субконто1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЕСТЬNULL(Международный.ВидСубконто2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ (ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
	|	КОНЕЦ КАК ВидСубконтоДт2, 
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.Субконто2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоДт2,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЕСТЬNULL(Международный.ВидСубконто3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ (ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
	|	КОНЕЦ КАК ВидСубконтоДт3, 
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоДт3,
	|	-ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.ВалютнаяСумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВалютнаяСуммаДт,
	|	-ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ Международный.Подразделение
	|	КОНЕЦ КАК ПодразделениеКт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		ИНАЧЕ Международный.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		ИНАЧЕ Международный.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиКт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|		ИНАЧЕ Международный.Счет
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЗНАЧЕНИЕ (ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(Международный.ВидСубконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
	|	КОНЕЦ КАК ВидСубконтоКт1,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Международный.Субконто1
	|	КОНЕЦ КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЗНАЧЕНИЕ (ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(Международный.ВидСубконто2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
	|	КОНЕЦ КАК ВидСубконтоКт2,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Международный.Субконто2
	|	КОНЕЦ КАК СубконтоКт2,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА ЗНАЧЕНИЕ (ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(Международный.ВидСубконто3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка))
	|	КОНЕЦ КАК ВидСубконтоКт3,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Международный.Субконто3
	|	КОНЕЦ КАК СубконтоКт3,
	|	-ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА 0
	|		ИНАЧЕ Международный.ВалютнаяСумма
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	-ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА 0
	|		ИНАЧЕ Международный.Количество
	|	КОНЕЦ КАК КоличествоКт,
	|	-Международный.Сумма КАК Сумма,
	|	-Международный.СуммаПредставления КАК СуммаПредставления,
	|	Международный.Содержание КАК Содержание,
	|	Международный.ШаблонПроводки КАК ШаблонПроводки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПроводокМеждународныйУчет.Сторно) КАК ТипПроводки,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА Международный.СоответствиеСчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СоответствиеСчетаДт,
	|	ВЫБОР
	|		КОГДА Международный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Международный.СоответствиеСчета
	|	КОНЕЦ КАК СоответствиеСчетаКт,
	|	Международный.СоответствиеОборотов КАК СоответствиеОборотов,
	|	ИСТИНА КАК Сторно,
	|	Международный.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Международный.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	РегистрБухгалтерии.МеждународныйБезКорреспонденции.ДвиженияССубконто(
	|		,
	|		,
	|		(Регистратор, ПланСчетов, Организация) В (
	|			ВЫБРАТЬ
	|				ДокументыСторно.СторнируемыйДокумент,
	|				ДокументыСторно.ПланСчетов,
	|				ДокументыСторно.Организация
	|			ИЗ
	|				ДокументыСторно КАК ДокументыСторно
	|			ГДЕ
	|				ДокументыСторно.ПроводкиБезКорреспонденции
	|				И НЕ ДокументыСторно.СторнируемыйДокументКОтражению
	|		),
	|		,
	|	) КАК Международный
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыСторно КАК ДокументыСторно
	|	ПО
	|		Международный.Регистратор = ДокументыСторно.СторнируемыйДокумент
	|		И Международный.ПланСчетов = ДокументыСторно.ПланСчетов
	|		И Международный.Организация = ДокументыСторно.Организация
	|		И ДокументыСторно.ПроводкиБезКорреспонденции
	|		И НЕ ДокументыСторно.СторнируемыйДокументКОтражению
	|ГДЕ
	|	НЕ Международный.Сторно
	|;
	|
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСторно.Период КАК Период,
	|	ДокументыСторно.Регистратор КАК Регистратор,
	|	ДокументыСторно.ПланСчетов КАК ПланСчетов,
	|	ДокументыСторно.Организация КАК Организация,
	|	ДокументыСторно.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДокументыСторно.ЗаменитьСторноРеверсом КАК ЗаменитьСторноРеверсом
	|ИЗ
	|	ДокументыСторно КАК ДокументыСторно
	|ГДЕ
	|	ДокументыСторно.СторнируемыйДокументКОтражению
	|;
	|
	|///////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыСторно
	|";
	РезультатЗапросов = Запрос.ВыполнитьПакет();
	
	РезультатСторноПроводки = РезультатЗапросов[1];
	РезультатСторноДокументы = РезультатЗапросов[2];
	
	ТаблицаРеверсивныхПроводок = ТаблицаПроводок.СкопироватьКолонки();
	
	Выборка = РезультатСторноПроводки.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
		
		УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(НоваяПроводка.ПланСчетов, НоваяПроводка.Организация);
		НоваяПроводка.ВалютаФункциональная = УчетныеВалютыНаПланеСчетов.Функциональная;
		НоваяПроводка.ВалютаПредставления = УчетныеВалютыНаПланеСчетов.Представления;
			
		Если Выборка.ЗаменитьСторноРеверсом Тогда
			ДобавитьПроводкуВТаблицуПроводок(ТаблицаРеверсивныхПроводок, НоваяПроводка);
		Иначе
			ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Регистратор,ПланСчетов,Организация,Сторно");
	СтруктураПоиска.Сторно = Ложь;
	
	Если Не РезультатСторноДокументы.Пустой() Тогда
		ТаблицаПроводок.Индексы.Добавить("Регистратор,ПланСчетов,Организация,Сторно");
		
		Выборка = РезультатСторноДокументы.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска.Регистратор = Выборка.СторнируемыйДокумент;
			СтруктураПоиска.ПланСчетов = Выборка.ПланСчетов;
			СтруктураПоиска.Организация = Выборка.Организация;
			
			СторнируемыеПроводки = ТаблицаПроводок.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Проводка Из СторнируемыеПроводки Цикл
				Если Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
				   И Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
				ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
				НоваяПроводка.Регистратор = Выборка.Регистратор;
				НоваяПроводка.Период = Выборка.Период;
				НоваяПроводка.Сторно = Истина;                                                          
				НоваяПроводка.ТипПроводки = Перечисления.ТипыПроводокМеждународныйУчет.Сторно;
				Если НоваяПроводка.КоличествоДт <> Неопределено Тогда
					НоваяПроводка.КоличествоДт = -НоваяПроводка.КоличествоДт;
				КонецЕсли;
				Если НоваяПроводка.КоличествоКт <> Неопределено Тогда
					НоваяПроводка.КоличествоКт = -НоваяПроводка.КоличествоКт;
				КонецЕсли;
				Если НоваяПроводка.ВалютнаяСуммаДт <> Неопределено Тогда
					НоваяПроводка.ВалютнаяСуммаДт = -НоваяПроводка.ВалютнаяСуммаДт;
				КонецЕсли;
				Если НоваяПроводка.ВалютнаяСуммаКт <> Неопределено Тогда
					НоваяПроводка.ВалютнаяСуммаКт = -НоваяПроводка.ВалютнаяСуммаКт;
				КонецЕсли;
				Если НоваяПроводка.Сумма <> Неопределено Тогда
					НоваяПроводка.Сумма = -НоваяПроводка.Сумма;
				КонецЕсли;
				Если НоваяПроводка.СуммаПредставления <> Неопределено Тогда
					НоваяПроводка.СуммаПредставления = -НоваяПроводка.СуммаПредставления;
				КонецЕсли;
				
				Если Выборка.ЗаменитьСторноРеверсом Тогда
					ДобавитьПроводкуВТаблицуПроводок(ТаблицаРеверсивныхПроводок, НоваяПроводка);
				Иначе
					ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаРеверсивныхПроводок.Количество() > 0 Тогда
		ТаблицаПоиска = ТаблицаРеверсивныхПроводок.Скопировать(, "Регистратор,ПланСчетов,Организация");
		ТаблицаПоиска.Свернуть("Регистратор,ПланСчетов,Организация");
		
		Если ТаблицаПроводок.Индексы.Количество() = 0 Тогда
			ТаблицаПроводок.Индексы.Добавить("Регистратор,ПланСчетов,Организация,Сторно");
		КонецЕсли;
		
		УдаляемыеПроводки = Новый Массив();
		
		Для Каждого СтрокаПоиска Из ТаблицаПоиска Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоиска);
			ИсправительныеПроводки = ТаблицаПроводок.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Проводка Из ИсправительныеПроводки Цикл
				Если Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
				   И Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
					Продолжить;
				КонецЕсли;
				
				УдаляемыеПроводки.Добавить(Проводка);
				
				НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
				ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
				ДобавитьПроводкуВТаблицуПроводок(ТаблицаРеверсивныхПроводок, НоваяПроводка);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Проводка Из УдаляемыеПроводки Цикл
			ТаблицаПроводок.Удалить(Проводка);
		КонецЦикла;
		
		ТаблицаПоиска = Неопределено;
		ВсеИзмерения = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.БалансовыеИзмерения);
		
		Для Каждого ИмяИзмерения Из ПараметрыФормированияПроводок.НебалансовыеИзмерения Цикл
			ВсеИзмерения.Добавить(ИмяИзмерения + "Дт");
			ВсеИзмерения.Добавить(ИмяИзмерения + "Кт");
		КонецЦикла;
		
		Для НомерСубконто = 1 По ПараметрыФормированияПроводок.КоличествоСубконто Цикл
			ВсеИзмерения.Добавить("СубконтоДт" + НомерСубконто);
			ВсеИзмерения.Добавить("СубконтоКт" + НомерСубконто);
		КонецЦикла;
		
		Для Каждого Проводка Из ТаблицаРеверсивныхПроводок Цикл
			Для Каждого ИмяИзмерения Из ВсеИзмерения Цикл
				Если НЕ ЗначениеЗаполнено(Проводка[ИмяИзмерения]) Тогда
					Проводка[ИмяИзмерения] = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаСвертки = ТаблицаРеверсивныхПроводок.Скопировать();
			
		Для Каждого Проводка Из ТаблицаСвертки Цикл
			Для Каждого ИмяРеквизита Из ПараметрыФормированияПроводок.Реквизиты Цикл
				Проводка[ИмяРеквизита] = Неопределено;
			КонецЦикла;
			
			Проводка.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
			Проводка.ВалютаХраненияСуммыПредставления = Проводка.ВалютаПредставления;
			Проводка.ВалютаХраненияСуммыФункциональной = Проводка.ВалютаФункциональная;
		КонецЦикла;
		
		ЗначениеПараметраСвернутьТаблицуПроводок = ПараметрыФормированияПроводок.СвернутьТаблицуПроводок;
		ПараметрыФормированияПроводок.СвернутьТаблицуПроводок = Истина;
		
		СвернутьТаблицуПроводок(ПараметрыФормированияПроводок, ТаблицаСвертки);
		
		ПараметрыФормированияПроводок.СвернутьТаблицуПроводок = ЗначениеПараметраСвернутьТаблицуПроводок;

		ВсеИзмерения.Добавить("Период");
		ВсеИзмерения.Добавить("Регистратор");
		ВсеИзмерения.Добавить("Сторно");
		ВсеИзмерения.Добавить("СчетДт");
		ВсеИзмерения.Добавить("СчетКт");
		
		СтруктураПоиска = Новый Структура(СтрСоединить(ВсеИзмерения, ","));
		ТаблицаРеверсивныхПроводок.Индексы.Добавить(СтрСоединить(ВсеИзмерения, ","));
		
		Для Каждого Проводка Из ТаблицаСвертки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Проводка);
			СтруктураПоиска.Сторно = Ложь;
			ИсходныеПроводки = ТаблицаРеверсивныхПроводок.НайтиСтроки(СтруктураПоиска);
			
			Если ИсходныеПроводки.Количество() = 0 Тогда
				СтруктураПоиска.Сторно = Истина;
				ИсходныеПроводки = ТаблицаРеверсивныхПроводок.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если ИсходныеПроводки.Количество() > 0 Тогда
				ИсходнаяПроводка = ИсходныеПроводки[0];
				Для Каждого ИмяРеквизита Из ПараметрыФормированияПроводок.Реквизиты Цикл
					Проводка[ИмяРеквизита] = ИсходнаяПроводка[ИмяРеквизита];
				КонецЦикла;
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(Проводка.Сумма) И Проводка.Сумма < 0)
			 ИЛИ (ЗначениеЗаполнено(Проводка.СуммаПредставления) И Проводка.СуммаПредставления < 0) Тогда
				РегистрыБухгалтерии.Международный.ИнвертироватьПроводку(
					Проводка,
					ПараметрыФормированияПроводок.ИнвертируемыеПоля,
					ПараметрыФормированияПроводок.ИнвертируемыеРесурсы,
					ПараметрыФормированияПроводок.КоличествоСубконто);
				Проводка.ТипПроводки = Перечисления.ТипыПроводокМеждународныйУчет.Реверс;
			КонецЕсли;
			
			НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
			ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
			ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПроводок.Индексы.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьКомментарий(Комментарий, Проводка, УникальныеЗначения)

	Если УникальныеЗначения[Проводка.Комментарий] = Неопределено Тогда
		Комментарий = ?(Не ПустаяСтрока(Комментарий), Комментарий + Символы.ПС, Комментарий);
		Комментарий = Комментарий + Проводка.Комментарий;
		УникальныеЗначения.Вставить(Проводка.Комментарий, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтатусВТаблицеПроводок(СтрокаТаблицы, Проводка)

	Если ЗначениеЗаполнено(СтрокаТаблицы.Статус) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОшибок = Проводка.МассивОшибок.Количество();
	Если КоличествоОшибок > 0 Тогда
		СтрокаТаблицы.Статус = Проводка.Статус;
	Иначе
		СтрокаТаблицы.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКомментарийВТаблицеПроводок(СтрокаТаблицы, Проводка)

	МассивОшибок = Проводка.МассивОшибок;
	КоличествоОшибок = МассивОшибок.Количество();
	Если КоличествоОшибок > 0 Тогда
		
		Если ЗначениеЗаполнено(Проводка.ШаблонПроводки) Тогда
			ТекстШаблонПроводки = НСтр("ru = 'Шаблон проводки ""%ШаблонПроводки%""';
										|en = 'Posting template ""%ШаблонПроводки%""'") + Символы.ПС;
			ТекстШаблонПроводки = СтрЗаменить(ТекстШаблонПроводки, "%ШаблонПроводки%", Проводка.ШаблонПроводки);
			ТекстКоличествоОшибок = НСтр("ru = 'Обнаружены ошибки (%КоличествоОшибок%):';
										|en = 'Errors are detected (%КоличествоОшибок%):'");
			ТекстКоличествоОшибок = СтрЗаменить(ТекстКоличествоОшибок, "%КоличествоОшибок%", КоличествоОшибок);
			ОписаниеОшибок = ТекстШаблонПроводки + ТекстКоличествоОшибок;
			Для К = 1 По КоличествоОшибок Цикл
				ОписаниеОшибки = НСтр("ru = '%НомерОшибки%. %ТекстОшибки%';
										|en = '%НомерОшибки%. %ТекстОшибки%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%НомерОшибки%", К);
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ТекстОшибки%", МассивОшибок[К - 1]);
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ОписаниеОшибки;
			КонецЦикла;
		Иначе
			ОписаниеОшибок = СтрСоединить(Проводка.МассивОшибок, Символы.ПС);
		КонецЕсли;
		
		СтрокаТаблицы.Комментарий = ОписаниеОшибок;
		
	КонецЕсли;

КонецПроцедуры

Функция СтруктураПроводки()

	Проводка = Новый Структура;
	СтруктураНабораЗаписей = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Для каждого Колонка Из СтруктураНабораЗаписей.Колонки Цикл
		Если Колонка.Имя <> "Активность" Тогда
			Проводка.Вставить(Колонка.Имя); 
		КонецЕсли;
	КонецЦикла;
	Проводка.Вставить("Статус");
	Проводка.Вставить("ШаблонПроводки");
	Проводка.Вставить("МассивОшибок", Новый Массив);
	Проводка.Вставить("ВалютаХраненияСуммыПредставления");
	Проводка.Вставить("ВалютаХраненияСуммыФункциональной");
	
	Проводка.Вставить("ВалютаФункциональная");
	Проводка.Вставить("ВалютаПредставления");

	Возврат Проводка;

КонецФункции

Функция ТаблицаПроводок()

	ТаблицаПроводок = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ТаблицаПроводок.Колонки.Удалить("Активность");
	
	ТаблицаПроводок.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете"));
	ТаблицаПроводок.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	ТаблицаПроводок.Колонки.Добавить("ВалютаФункциональная", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПроводок.Колонки.Добавить("ВалютаПредставления", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	// Валюты-источники исходных данных для суммы представления и суммы функциональной.
	ТаблицаПроводок.Колонки.Добавить("ВалютаХраненияСуммыПредставления", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПроводок.Колонки.Добавить("ВалютаХраненияСуммыФункциональной", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Процедура СвернутьТаблицуПроводок(ПараметрыФормированияПроводок, ТаблицаПроводок)
	
	Если НЕ ПараметрыФормированияПроводок.СвернутьТаблицуПроводок Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("Статус", Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
	
	СтрокиОтраженыВУчете = ТаблицаПроводок.НайтиСтроки(ОтборСтрок);
	
	Если СтрокиОтраженыВУчете.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляГруппировки = Новый Массив();
	ПоляГруппировки.Добавить("Период");
	ПоляГруппировки.Добавить("Регистратор");
	ПоляГруппировки.Добавить("СчетДт");
	ПоляГруппировки.Добавить("СчетКт");
	ПоляГруппировки.Добавить("Статус");
	ПоляГруппировки.Добавить("ВалютаФункциональная");
	ПоляГруппировки.Добавить("ВалютаПредставления");
	ПоляГруппировки.Добавить("ВалютаХраненияСуммыПредставления");
	ПоляГруппировки.Добавить("ВалютаХраненияСуммыФункциональной");
	
	Для НомерСубконто = 1 По ПараметрыФормированияПроводок.КоличествоСубконто Цикл
		ПоляГруппировки.Добавить("ВидСубконтоДт" + НомерСубконто);
		ПоляГруппировки.Добавить("ВидСубконтоКт" + НомерСубконто);
		ПоляГруппировки.Добавить("СубконтоДт" + НомерСубконто);
		ПоляГруппировки.Добавить("СубконтоКт" + НомерСубконто);
	КонецЦикла;
	
	Для Каждого ИмяИзмерения Из ПараметрыФормированияПроводок.БалансовыеИзмерения Цикл
		ПоляГруппировки.Добавить(ИмяИзмерения);
	КонецЦикла;
	
	Для Каждого ИмяИзмерения Из ПараметрыФормированияПроводок.НебалансовыеИзмерения Цикл
		ПоляГруппировки.Добавить(ИмяИзмерения + "Дт");
		ПоляГруппировки.Добавить(ИмяИзмерения + "Кт");
	КонецЦикла;
	
	Для Каждого ИмяРеквизита Из ПараметрыФормированияПроводок.Реквизиты Цикл
		ПоляГруппировки.Добавить(ИмяРеквизита);
	КонецЦикла;
	
	ПоляСуммирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.БалансовыеРесурсы);
	
	Для Каждого ИмяРесурса Из ПараметрыФормированияПроводок.НебалансовыеРесурсы Цикл
		ПоляСуммирования.Добавить(ИмяРесурса + "Дт");
		ПоляСуммирования.Добавить(ИмяРесурса + "Кт");
	КонецЦикла;
	
	СтрокаГруппировки = СтрСоединить(ПоляГруппировки, ",");
	СтрокаСуммирования = СтрСоединить(ПоляСуммирования, ",");
	
	ТаблицаОтраженыВУчете = ТаблицаПроводок.Скопировать(ОтборСтрок);
	ТаблицаОтраженыВУчете.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	
	Если ТаблицаОтраженыВУчете.Количество() <> СтрокиОтраженыВУчете.Количество() Тогда
		Для Каждого СтрокаТаблицыПроводок Из СтрокиОтраженыВУчете Цикл
			ТаблицаПроводок.Удалить(СтрокаТаблицыПроводок);
		КонецЦикла;
		
		Для Каждого СвернутаяСтрока Из ТаблицаОтраженыВУчете Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПроводок.Добавить(), СвернутаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПроводкиБезСуммИКоличеств(ПроводкиДокумента)
	
	ПроводкиКУдалению = Новый Массив;
	Для каждого Проводка Из ПроводкиДокумента Цикл
		Если (Проводка.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
				ИЛИ Проводка.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
			И Проводка.Сумма = 0
			И Проводка.СуммаПредставления = 0
			И Проводка.КоличествоДт = 0 
			И Проводка.КоличествоКт = 0 Тогда
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Проводка Из ПроводкиКУдалению Цикл
		ПроводкиДокумента.Удалить(Проводка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНезначащиеПроводки(ПараметрыФормированияПроводок, ТаблицаПроводок)

	Если НЕ ПараметрыФормированияПроводок.УдалитьНезначащиеПроводки Тогда
		Возврат;
	КонецЕсли;
	
	ПоляПроводки = Новый Структура();
	ПоляПроводки.Вставить("СчетДт", "СчетКт");
	
	Для НомерСубконто = 1 По ПараметрыФормированияПроводок.КоличествоСубконто Цикл
		ПоляПроводки.Вставить("СубконтоДт" + НомерСубконто, "СубконтоКт" + НомерСубконто);
	КонецЦикла;
	
	Для Каждого ИмяИзмерения Из ПараметрыФормированияПроводок.НебалансовыеИзмерения Цикл
		ПоляПроводки.Вставить(ИмяИзмерения + "Дт", ИмяИзмерения + "Кт");
	КонецЦикла;
	
	Для Каждого ИмяРесурса Из ПараметрыФормированияПроводок.НебалансовыеРесурсы Цикл
		ПоляПроводки.Вставить(ИмяРесурса + "Дт", ИмяРесурса + "Кт");
	КонецЦикла;
	
	УдаляемыеПроводки = Новый Массив();
	
	Для Каждого СтрокаТаблицыПроводок Из ТаблицаПроводок Цикл
		Если СтрокаТаблицыПроводок.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляДтРавныПолямКт = Истина;
		Для Каждого ИмяПоля Из ПоляПроводки Цикл
			Если СтрокаТаблицыПроводок[ИмяПоля.Ключ] <> СтрокаТаблицыПроводок[ИмяПоля.Значение] Тогда
				ПоляДтРавныПолямКт = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПоляДтРавныПолямКт Тогда
			УдаляемыеПроводки.Добавить(СтрокаТаблицыПроводок);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыПроводок Из УдаляемыеПроводки Цикл
		ТаблицаПроводок.Удалить(СтрокаТаблицыПроводок);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьТаблицуПроводокБезКорреспонденций(ПараметрыФормированияПроводок, ТаблицаПроводок)
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("Статус", Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
	
	СтрокиОтраженыВУчете = ТаблицаПроводок.НайтиСтроки(ОтборСтрок);
	
	Если СтрокиОтраженыВУчете.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляГруппировки = Новый Массив();
	ПоляГруппировки.Добавить("ВидДвижения");
	ПоляГруппировки.Добавить("Период");
	ПоляГруппировки.Добавить("Регистратор");
	ПоляГруппировки.Добавить("Счет");
	ПоляГруппировки.Добавить("Статус");
	
	Для НомерСубконто = 1 По ПараметрыФормированияПроводок.КоличествоСубконто Цикл
		ПоляГруппировки.Добавить("ВидСубконто" + НомерСубконто);
		ПоляГруппировки.Добавить("Субконто" + НомерСубконто);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляГруппировки, ПараметрыФормированияПроводок.БалансовыеИзмерения);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляГруппировки, ПараметрыФормированияПроводок.НебалансовыеИзмерения);
	
	Для Каждого ИмяРеквизита Из ПараметрыФормированияПроводок.Реквизиты Цикл
		Если ИмяРеквизита = "СоответствиеСчетаДт" Тогда
		ИначеЕсли ИмяРеквизита = "СоответствиеСчетаКт" Тогда
			ПоляГруппировки.Добавить("СоответствиеСчета");
		Иначе
			ПоляГруппировки.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	ПоляСуммирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.БалансовыеРесурсы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляСуммирования, ПараметрыФормированияПроводок.НебалансовыеРесурсы);
	
	СтрокаГруппировки = СтрСоединить(ПоляГруппировки, ",");
	СтрокаСуммирования = СтрСоединить(ПоляСуммирования, ",");
	
	ТаблицаОтраженыВУчете = ТаблицаПроводок.Скопировать(ОтборСтрок);
	ТаблицаОтраженыВУчете.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	
	Если ТаблицаОтраженыВУчете.Количество() <> СтрокиОтраженыВУчете.Количество() Тогда
		Для Каждого СтрокаТаблицыПроводок Из СтрокиОтраженыВУчете Цикл
			ТаблицаПроводок.Удалить(СтрокаТаблицыПроводок);
		КонецЦикла;
		
		Для Каждого СвернутаяСтрока Из ТаблицаОтраженыВУчете Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПроводок.Добавить(), СвернутаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СвернутьОборотыПроводокБезКорреспонденций(ПараметрыФормированияПроводок, ТаблицаПроводок)
	
	ПоляИзмерений = Новый Массив();
	ПоляИзмерений.Добавить("Период");
	ПоляИзмерений.Добавить("Счет");
	
	Для НомерСубконто = 1 По ПараметрыФормированияПроводок.КоличествоСубконто Цикл
		ПоляИзмерений.Добавить("Субконто" + НомерСубконто);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляИзмерений, ПараметрыФормированияПроводок.БалансовыеИзмерения);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляИзмерений, ПараметрыФормированияПроводок.НебалансовыеИзмерения);
	
	ПоляИзмерений.Добавить("Сторно");
	ПоляИзмерений.Добавить("ТипПроводки");
	
	ПоляРесурсов = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.БалансовыеРесурсы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРесурсов, ПараметрыФормированияПроводок.НебалансовыеРесурсы);
	
	ПоляСортировки = Новый Массив();
	ПоляСортировки.Добавить("ВидДвижения");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляСортировки, ПоляРесурсов); 
	
	ТаблицаПроводок.Сортировать(СтрСоединить(ПоляСортировки, ","));
	
	ЭтапыУчетаСодержанияПроводок = Новый Массив();
	ЭтапыУчетаСодержанияПроводок.Добавить(Истина);
	ЭтапыУчетаСодержанияПроводок.Добавить(Ложь);
	ЭтапыУчетаЗнакаПроводок = ОбщегоНазначения.СкопироватьРекурсивно(ЭтапыУчетаСодержанияПроводок);
	
	КоличествоСтрок = ТаблицаПроводок.Количество();
	
	Для Каждого УчитыватьСодержание Из ЭтапыУчетаСодержанияПроводок Цикл
		Если УчитыватьСодержание Тогда
			ПоляИзмерений.Добавить("Содержание");
		Иначе
			ИндексПоля = ПоляИзмерений.Найти("Содержание");
			Если ИндексПоля <> Неопределено Тогда
				ПоляИзмерений.Удалить(ИндексПоля);
			КонецЕсли;
		КонецЕсли;
		
		ЕстьОборотыПротивоположныхЗнаков = Ложь;
		
		Для Каждого УчитыватьЗнак Из ЭтапыУчетаЗнакаПроводок Цикл
			Если НЕ УчитыватьЗнак И НЕ ЕстьОборотыПротивоположныхЗнаков Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаДебет Из ТаблицаПроводок Цикл
				Если СтрокаДебет.ВидДвижения <> ВидДвиженияБухгалтерии.Дебет
				 ИЛИ СтрокаДебет.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
				 ИЛИ ВсеРесурсыРавныНулю(СтрокаДебет, ПоляРесурсов) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Индекс = 0 По КоличествоСтрок - 1 Цикл
					СтрокаКредит = ТаблицаПроводок[Индекс];
					
					Если СтрокаКредит.ВидДвижения <> ВидДвиженияБухгалтерии.Кредит
					 ИЛИ СтрокаКредит.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
					 ИЛИ ВсеРесурсыРавныНулю(СтрокаКредит, ПоляРесурсов) Тогда
						Продолжить;
					КонецЕсли;
					
					ИзмеренияДтРавныИзмерениямКт = Истина;
					Для Каждого ИмяПоля Из ПоляИзмерений Цикл
						Если СтрокаДебет[ИмяПоля] <> СтрокаКредит[ИмяПоля] Тогда
							ИзмеренияДтРавныИзмерениямКт = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ИзмеренияДтРавныИзмерениямКт Тогда
						Продолжить;
					КонецЕсли;
				
					Если УчитыватьЗнак Тогда
						ЗнакОборотовДтРавенЗнакуОборотовКт = Истина;
						Для Каждого ИмяПоля Из ПоляРесурсов Цикл
							Если СтрокаДебет[ИмяПоля] < 0 И СтрокаКредит[ИмяПоля] >= 0
							 ИЛИ СтрокаДебет[ИмяПоля] >= 0 И СтрокаКредит[ИмяПоля] < 0 Тогда
								ЗнакОборотовДтРавенЗнакуОборотовКт = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если НЕ ЗнакОборотовДтРавенЗнакуОборотовКт Тогда
							ЕстьОборотыПротивоположныхЗнаков = Истина;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если ВсеРесурсыРавныНулю(СтрокаДебет, ПараметрыФормированияПроводок.БалансовыеРесурсы)
					   И ВсеРесурсыРавныНулю(СтрокаКредит, ПараметрыФормированияПроводок.БалансовыеРесурсы) Тогда
						КонтрольныеРесурсы = ПараметрыФормированияПроводок.НебалансовыеРесурсы;
					Иначе
						КонтрольныеРесурсы = ПараметрыФормированияПроводок.БалансовыеРесурсы;
					КонецЕсли;
					
					ОборотыДтБольшеОборотовКт = Истина;
					
					Для Каждого ИмяПоля Из КонтрольныеРесурсы Цикл
						МодульОборотаДт = ?(СтрокаДебет[ИмяПоля] < 0, -СтрокаДебет[ИмяПоля], СтрокаДебет[ИмяПоля]);
						МодульОборотаКт = ?(СтрокаКредит[ИмяПоля] < 0, -СтрокаКредит[ИмяПоля], СтрокаКредит[ИмяПоля]);
						
						Если МодульОборотаДт < МодульОборотаКт Тогда
							ОборотыДтБольшеОборотовКт = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ИмяПоля Из ПоляРесурсов Цикл
						Если ОборотыДтБольшеОборотовКт Тогда
							СтрокаДебет[ИмяПоля] = СтрокаДебет[ИмяПоля] - СтрокаКредит[ИмяПоля];
							СтрокаКредит[ИмяПоля] = 0;
						Иначе
							СтрокаКредит[ИмяПоля] = СтрокаКредит[ИмяПоля] - СтрокаДебет[ИмяПоля];
							СтрокаДебет[ИмяПоля] = 0;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ОборотыДтБольшеОборотовКт Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПроводкиБезРесурсовБезКорреспонденций(ПараметрыФормированияПроводок, ТаблицаПроводок)

	ПоляРесурсов = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.БалансовыеРесурсы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРесурсов, ПараметрыФормированияПроводок.НебалансовыеРесурсы);
	
	УдаляемыеПроводки = Новый Массив();
	
	Для Каждого СтрокаТаблицыПроводок Из ТаблицаПроводок Цикл
		Если СтрокаТаблицыПроводок.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВсеРесурсыРавныНулю(СтрокаТаблицыПроводок, ПоляРесурсов) Тогда
			УдаляемыеПроводки.Добавить(СтрокаТаблицыПроводок);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыПроводок Из УдаляемыеПроводки Цикл
		ТаблицаПроводок.Удалить(СтрокаТаблицыПроводок);
	КонецЦикла;
	
КонецПроцедуры

Функция ВсеРесурсыРавныНулю(Проводка, ПоляРесурсов)
	
	ВсеРесурсыРавныНулю = Истина;
	
	Для Каждого ИмяПоля Из ПоляРесурсов Цикл
		Если Проводка[ИмяПоля] <> 0 Тогда
			ВсеРесурсыРавныНулю = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеРесурсыРавныНулю;
	
КонецФункции

#КонецОбласти

#Область РегистрацияДокументовКОтражениюВМеждународномУчете

Процедура ДобавитьНастройкуФормированияПроводокИСтатус(ТаблицаОтражения, Регистратор)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОтражения.Период          КАК Период,
	|	ТаблицаОтражения.Организация     КАК Организация,
	|	ТаблицаОтражения.ДатаОтражения   КАК ДатаОтражения,
	|	ТаблицаОтражения.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ТаблицаДанные
	|ИЗ
	|	&ТаблицаОтражения КАК ТаблицаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанные.Период КАК Период,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ТаблицаДанные.Организация КАК Организация,
	|	ТаблицаДанные.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаДанные.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК Месяц
	|ПОМЕСТИТЬ ПериодыНастроекФормированияПроводок
	|ИЗ
	|	ТаблицаДанные КАК ТаблицаДанные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО ТаблицаДанные.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ТаблицаДанные.ДатаОтражения >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанные.Период,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов,
	|	ТаблицаДанные.Организация,
	|	ТаблицаДанные.ДатаОтражения,
	|	ТаблицаДанные.ХозяйственнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыНастроекФормированияПроводок.Период КАК Период,
	|	ПериодыНастроекФормированияПроводок.ПланСчетов КАК ПланСчетов,
	|	ПериодыНастроекФормированияПроводок.Организация КАК Организация,
	|	ПериодыНастроекФормированияПроводок.ДатаОтражения КАК ДатаОтражения,
	|	ПериодыНастроекФормированияПроводок.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	ПериодыНастроекФормированияПроводок КАК ПериодыНастроекФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО	
	|		ПериодыНастроекФормированияПроводок.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|		И ПериодыНастроекФормированияПроводок.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ПериодыНастроекФормированияПроводок.Месяц = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|ГДЕ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок <> ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКОтражению.Период КАК Период,
	|	ТаблицаКОтражению.ПланСчетов КАК ПланСчетов,
	|	ТаблицаКОтражению.Организация КАК Организация,
	|	ТаблицаКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА ТаблицаКОтражению.Статус = 1 ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходнаяТаблица.Период КАК Период,
	|		ИсходнаяТаблица.ПланСчетов КАК ПланСчетов,
	|		ИсходнаяТаблица.Организация КАК Организация,
	|		ИсходнаяТаблица.ДатаОтражения КАК ДатаОтражения,
	|		ИсходнаяТаблица.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|		МИНИМУМ (ВЫБОР
	|			КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
	|				ИЛИ ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ) КАК Статус
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|		ПО
	|			ИсходнаяТаблица.ПланСчетов = ОтражениеДокументов.ПланСчетов
	|			И ИсходнаяТаблица.Организация = ОтражениеДокументов.Организация
	|			И ОтражениеДокументов.Регистратор = &Регистратор
	|
	|	СГРУППИРОВАТЬ ПО
	|		ИсходнаяТаблица.Период,
	|		ИсходнаяТаблица.ПланСчетов,
	|		ИсходнаяТаблица.Организация,
	|		ИсходнаяТаблица.ДатаОтражения,
	|		ИсходнаяТаблица.НастройкаФормированияПроводок
	|	) КАК ТаблицаКОтражению
	|");
	
	Запрос.УстановитьПараметр("ТаблицаОтражения", ТаблицаОтражения);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	ТаблицаОтражения = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьНастройкуФормированияПроводокИСтатус(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Документ        КАК Документ,
	|	ВложенныйЗапрос.Организация     КАК Организация,
	|	ВложенныйЗапрос.ДатаОтражения   КАК ДатаОтражения,
	|	ВложенныйЗапрос.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ТаблицаДанные
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаОтражения.Документ        КАК Документ,
	|		ТаблицаОтражения.Организация     КАК Организация,
	|		ТаблицаОтражения.ДатаОтражения   КАК ДатаОтражения,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
	|	ИЗ
	|		ТаблицаТекущейРегистрации КАК ТаблицаОтражения
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаОтражения.Документ        КАК Документ,
	|		ТаблицаОтражения.Организация     КАК Организация,
	|		ТаблицаОтражения.ДатаОтражения   КАК ДатаОтражения,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
	|	ИЗ
	|		ТаблицаВыборочнойРегистрации КАК ТаблицаОтражения
	|) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанные.Организация КАК Организация,
	|	ТаблицаДанные.ДатаОтражения КАК ДатаОтражения,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК Месяц
	|ПОМЕСТИТЬ ПериодыНастройкиФормированияПроводок
	|ИЗ
	|	ТаблицаДанные КАК ТаблицаДанные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО ТаблицаДанные.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ТаблицаДанные.ДатаОтражения >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанные.Организация,
	|	ТаблицаДанные.ДатаОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДатаОтражения,
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанные.Документ КАК Документ,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ТаблицаДанные.Организация КАК Организация,
	|	ТаблицаДанные.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаДанные.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	ТаблицаДанные КАК ТаблицаДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыНастройкиФормированияПроводок КАК ПериодыНастройкиФормированияПроводок
	|	ПО ТаблицаДанные.Организация = ПериодыНастройкиФормированияПроводок.Организация
	|		И ТаблицаДанные.ДатаОтражения = ПериодыНастройкиФормированияПроводок.ДатаОтражения
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО ПериодыНастройкиФормированияПроводок.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ПериодыНастройкиФормированияПроводок.Месяц = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПравилаОтражения.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	МАКСИМУМ(ШаблоныПроводок.РучноеУточнениеПроводки) КАК РучноеУточнениеПроводки
	|ПОМЕСТИТЬ ПравилаОтражения
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО
	|		ШаблоныПроводок.Операция = НастройкиХозяйственныхОпераций.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтражения
	|	ПО
	|		ШаблоныПроводок.Ссылка = ПравилаОтражения.ШаблонПроводки
	|СГРУППИРОВАТЬ ПО
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация,
	|	ПравилаОтражения.НастройкаФормированияПроводок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКОтражению.Документ КАК Документ,
	|	ТаблицаКОтражению.ПланСчетов КАК ПланСчетов,
	|	ТаблицаКОтражению.Организация КАК Организация,
	|	ТаблицаКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА ТаблицаКОтражению.Статус = 1 ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ НастройкаФормированияПроводокИСтатус
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходнаяТаблица.Документ КАК Документ,
	|		ИсходнаяТаблица.ПланСчетов КАК ПланСчетов,
	|		ИсходнаяТаблица.Организация КАК Организация,
	|		ИсходнаяТаблица.ДатаОтражения КАК ДатаОтражения,
	|		ИсходнаяТаблица.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|		МИНИМУМ (ВЫБОР
	|			КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
	|				ИЛИ ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|				ИЛИ ПравилаОтражения.РучноеУточнениеПроводки
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ) КАК Статус
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПравилаОтражения КАК ПравилаОтражения
	|		ПО
	|			ИсходнаяТаблица.НастройкаФормированияПроводок = ПравилаОтражения.НастройкаФормированияПроводок
	|			И ИсходнаяТаблица.ХозяйственнаяОперация = ПравилаОтражения.ХозяйственнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|		ПО
	|			ИсходнаяТаблица.Организация = ОтражениеДокументов.Организация
	|			И ИсходнаяТаблица.Документ = ОтражениеДокументов.Регистратор
	|
	|	СГРУППИРОВАТЬ ПО
	|		ИсходнаяТаблица.Документ,
	|		ИсходнаяТаблица.ПланСчетов,
	|		ИсходнаяТаблица.Организация,
	|		ИсходнаяТаблица.ДатаОтражения,
	|		ИсходнаяТаблица.НастройкаФормированияПроводок
	|	) КАК ТаблицаКОтражению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДанные;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыНастройкиФормированияПроводок;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходнаяТаблица;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПравилаОтражения;
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ИнициализироватьМенеджерДляВозвратаКОтражению(ДокументыКОтражению)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ТипЗнч(ДокументыКОтражению) = Тип("ТаблицаЗначений") Тогда
		Если ДокументыКОтражению.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыКОтражению.Период КАК Период,
		|	ДокументыКОтражению.Документ КАК Документ,
		|	ДокументыКОтражению.Организация КАК Организация,
		|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	&ДокументыКОтражению КАК ДокументыКОтражению
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Документ,
		|	Организация,
		|	ДатаОтражения
		|;
		|/////////////////////////////////////////////////
		|");
		Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКОтражению);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	Иначе
		МенеджерВременныхТаблиц = ДокументыКОтражению;
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ДанныеДляВозвратаКОтражениюВУчете(ДокументыКОтражению, Отбор)

	#Область ТекстЗапросаТаблицаОтраженияДокументовВМеждународномУчете
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	МИНИМУМ(ДокументыКОтражению.Период) КАК Период,
	|	ДокументыКОтражению.Документ КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ) КАК ДатаОтражения
	|ПОМЕСТИТЬ ЗаписиКОтражению
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДокументыКОтражению.Документ) <> ТИП(Документ.КорректировкаРегистров)
	|	И ДокументыКОтражению.Период >= &Период
	|	И (ДокументыКОтражению.Документ > &Регистратор ИЛИ &Регистратор = Неопределено)
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКОтражению.Документ,
	|	ДокументыКОтражению.Организация,
	|	НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКОтражению.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТолькоДокументыКОтражению
	|ИЗ
	|	ЗаписиКОтражению КАК ЗаписиКОтражению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ДатаОтражения КАК ДатаОтражения,
	|	ДанныеРегистра.Статус,
	|	ДанныеРегистра.НастройкаФормированияПроводок,
	|	ДанныеРегистра.Комментарий
	|ПОМЕСТИТЬ ВсеЗаписиРегистратора
	|ИЗ
	|	ТолькоДокументыКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|		ПО ДокументыКОтражению.Регистратор = ДанныеРегистра.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ПериодыРегистратора
	|ИЗ
	|	ВсеЗаписиРегистратора КАК ДанныеРегистра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ДатаОтражения КАК ДатаОтражения,
	|	ДанныеРегистра.Статус КАК Статус,
	|	ДанныеРегистра.НастройкаФормированияПроводок,
	|	ДанныеРегистра.Комментарий
	|ПОМЕСТИТЬ ВременнаяТаблицаРегистра
	|ИЗ
	|	ЗаписиКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|		ПО ДокументыКОтражению.Регистратор = ДанныеРегистра.Регистратор
	|		И ДокументыКОтражению.Организация = ДанныеРегистра.Организация
	|		И НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаОтражения, ДЕНЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Если регистрации не было, то надо зарегистрировать.
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	НЕОПРЕДЕЛЕНО КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете) КАК Статус,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаФормированияПроводок,
	|	"""" КАК Комментарий
	|ИЗ
	|	ЗаписиКОтражению КАК ДокументыКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|		ПО ДокументыКОтражению.Регистратор = ДанныеРегистра.Регистратор
	|		И ДокументыКОтражению.Организация = ДанныеРегистра.Организация
	|		И НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаОтражения, ДЕНЬ)
	|ГДЕ
	|	ДанныеРегистра.Регистратор ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ МесяцОтражения
	|ИЗ
	|	ЗаписиКОтражению КАК ДокументыКОтражению
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаОтражения, МЕСЯЦ) КАК Период
	|ИЗ
	|	ВременнаяТаблицаРегистра КАК ДанныеРегистра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Организация,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК Период,
	|	МесяцОтражения.Период КАК ПериодРегистрации
	|ПОМЕСТИТЬ ПериодыНастройкиФормированияПроводок
	|ИЗ
	|	МесяцОтражения КАК МесяцОтражения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО МесяцОтражения.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И МесяцОтражения.Период >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация,
	|	МесяцОтражения.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Организация,
	|	ПериодыНастройкиФормированияПроводок.ПериодРегистрации КАК Период,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК Настройка
	|ПОМЕСТИТЬ ПланыСчетовМеждународногоУчетаОрганизаций
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыНастройкиФормированияПроводок
	|	ПО ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов = ПериодыНастройкиФормированияПроводок.ПланСчетов
	|		И ПланыСчетовМеждународногоУчетаОрганизаций.Организация = ПериодыНастройкиФормированияПроводок.Организация
	|		И ПланыСчетовМеждународногоУчетаОрганизаций.Период = ПериодыНастройкиФормированияПроводок.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПериодыРегистратора.Период, ОтражениеДокументовВМеждународномУчете.Период) КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов, ОтражениеДокументовВМеждународномУчете.ПланСчетов) КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВМеждународномУчете.Статус,
	|	ЕСТЬNULL(ПланыСчетовМеждународногоУчетаОрганизаций.Настройка, ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок) КАК НастройкаФормированияПроводок,
	|	ОтражениеДокументовВМеждународномУчете.Комментарий
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	ВременнаяТаблицаРегистра КАК ОтражениеДокументовВМеждународномУчете
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО
	|		(ВЫБОР
	|			КОГДА ОтражениеДокументовВМеждународномУчете.ПланСчетов <> НЕОПРЕДЕЛЕНО
	|				ТОГДА ОтражениеДокументовВМеждународномУчете.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ)
	|		И ОтражениеДокументовВМеждународномУчете.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И НАЧАЛОПЕРИОДА(ОтражениеДокументовВМеждународномУчете.ДатаОтражения, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПланыСчетовМеждународногоУчетаОрганизаций.Период, МЕСЯЦ)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПериодыРегистратора КАК ПериодыРегистратора
	|	ПО 
	|		ОтражениеДокументовВМеждународномУчете.Регистратор = ПериодыРегистратора.Регистратор
	|ГДЕ
	|	НЕ (ПланыСчетовМеждународногоУчетаОрганизаций.Настройка ЕСТЬ NULL
	|		ИЛИ ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок = ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МесяцОтражения;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыНастройкиФормированияПроводок;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаРегистра;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыРегистратора;
	|
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Период КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор КАК Регистратор,
	|	ОтражениеДокументовВМеждународномУчете.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВМеждународномУчете.Статус КАК Статус,
	|	ОтражениеДокументовВМеждународномУчете.Комментарий КАК Комментарий,
	|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ втОстальныеЗаписиРегистратора
	|ИЗ
	|	ВсеЗаписиРегистратора КАК ОтражениеДокументовВМеждународномУчете
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаписиКОтражению КАК ДокументыКОтражению
	|	ПО ДокументыКОтражению.Регистратор = ОтражениеДокументовВМеждународномУчете.Регистратор
	|		И ДокументыКОтражению.Организация = ОтражениеДокументовВМеждународномУчете.Организация
	|		И НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ) = ОтражениеДокументовВМеждународномУчете.ДатаОтражения
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО ОтражениеДокументовВМеждународномУчете.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|		И ОтражениеДокументовВМеждународномУчете.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И НАЧАЛОПЕРИОДА(ОтражениеДокументовВМеждународномУчете.ДатаОтражения, МЕСЯЦ) = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|ГДЕ
	|	ДокументыКОтражению.Регистратор ЕСТЬ NULL
	|	И НЕ (ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок ЕСТЬ NULL
	|		ИЛИ ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок = ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Период         КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор    КАК Регистратор,
	|	ОтражениеДокументовВМеждународномУчете.ПланСчетов     КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация    КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения  КАК ДатаОтражения,
	|	ВЫБОР 
	|		КОГДА НЕ ДокументыКОтражению.Организация ЕСТЬ NULL ТОГДА
	|			ВЫБОР КОГДА ОтражениеДокументовВМеждународномУчете.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ОтражениеДокументовВМеждународномУчете.Статус
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыКОтражению.Организация ЕСТЬ NULL ТОГДА
	|			ВЫБОР КОГДА ОтражениеДокументовВМеждународномУчете.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную))
	|				ТОГДА ОтражениеДокументовВМеждународномУчете.Комментарий
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|		ИНАЧЕ ОтражениеДокументовВМеждународномУчете.Комментарий
	|	КОНЕЦ КАК Комментарий,
	|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ НовыеДанныеРегистра
	|ИЗ
	|	ТаблицаРегистра КАК ОтражениеДокументовВМеждународномУчете
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЗаписиКОтражению КАК ДокументыКОтражению
	|	ПО
	|		НАЧАЛОПЕРИОДА(ОтражениеДокументовВМеждународномУчете.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДокументыКОтражению.Период, ДЕНЬ)
	|		И НАЧАЛОПЕРИОДА(ОтражениеДокументовВМеждународномУчете.ДатаОтражения, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ)
	|		И ОтражениеДокументовВМеждународномУчете.Организация = ДокументыКОтражению.Организация
	|		И ОтражениеДокументовВМеждународномУчете.Регистратор = ДокументыКОтражению.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Период КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор КАК Регистратор,
	|	ОтражениеДокументовВМеждународномУчете.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВМеждународномУчете.Статус КАК Статус,
	|	ОтражениеДокументовВМеждународномУчете.Комментарий КАК Комментарий,
	|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	втОстальныеЗаписиРегистратора КАК ОтражениеДокументовВМеждународномУчете
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеДанныеРегистра.Период КАК Период,
	|	НовыеДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	НовыеДанныеРегистра КАК НовыеДанныеРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеДанныеРегистра.Период КАК Период,
	|	НовыеДанныеРегистра.Регистратор КАК Регистратор,
	|	НовыеДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	НовыеДанныеРегистра.Организация КАК Организация,
	|	НовыеДанныеРегистра.ДатаОтражения КАК ДатаОтражения,
	|	НовыеДанныеРегистра.Статус КАК Статус,
	|	НовыеДанныеРегистра.Комментарий КАК Комментарий,
	|	НовыеДанныеРегистра.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	НовыеДанныеРегистра КАК НовыеДанныеРегистра
	|
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗаписиКОтражению;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТолькоДокументыКОтражению;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПланыСчетовМеждународногоУчетаОрганизаций;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НовыеДанныеРегистра;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРегистра;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстальныеЗаписиРегистратора;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВсеЗаписиРегистратора;
	|";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДокументыКОтражению;
	Запрос.УстановитьПараметр("Период", Отбор.Период);
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();  
	
	ДанныеРегистра = РезультатЗапроса[16].Выгрузить(); // ТаблицаЗначений - 
	ДанныеРегистра.Индексы.Добавить("Период,Регистратор");
	
	Результат = Новый Структура("Регистраторы, ДанныеРегистра");
	Результат.Регистраторы = РезультатЗапроса[15].Выбрать();
	Результат.ДанныеРегистра = ДанныеРегистра;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Возвращает составной комментарий к документу
//
// Параметры:
// 	Документ - ДокументСсылка - Документ, по которому необходимо получить комментарий
// 	Организация - СправочникСсылка.Организации, Массив Из СправочникСсылка.Организации - Дополнительный отбор, если необходимо получить комментарий отражения по конкретной организации
// Возвращаемое значение:
// 	 Строка - составной комментарий к неотраженному в учете документу.
//
Функция СводныйКомментарийПоДокументу(Документ, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Записи.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК Записи
	|ГДЕ
	|	Записи.Регистратор = &Документ
	|	И (Записи.Организация В (&Организация )
	|		ИЛИ &ВсеОрганизации)
	|";
	Запрос.УстановитьПараметр("Документ",       Документ);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ВсеОрганизации", НЕ ЗначениеЗаполнено(Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Подстроки = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Комментарий = "" Тогда
			Продолжить;
		КонецЕсли;
		Если Подстроки.Найти(Выборка.Комментарий) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Подстроки.Добавить(Выборка.Комментарий);
	КонецЦикла;
	
	Результат = СтрСоединить(Подстроки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
