
#Область ПрограммныйИнтерфейс

// Конструктор специальных параметров навигационной ссылки.
// 
// Возвращаемое значение:
//  Структура - Новые специальные параметры навигационной ссылки:
// * Выполнено - Булево -
//
Функция НовыеСпециальныеПараметрыНавигационнойСсылки() Экспорт
	
	СпециальныеПараметрыНавигационнойСсылки = Новый Структура;
	// В специальных свойствах всегда есть флаг Выполнено, 
	// но могут добавляться и другие параметры.
	СпециальныеПараметрыНавигационнойСсылки.Вставить("Выполнено", Ложь);
	
	Возврат СпециальныеПараметрыНавигационнойСсылки;
	
КонецФункции	

// Инициализирует реквизит формы ПараметрыНавигационныхСсылок, который используется для выполнения переходов по ссылкам,
// а также для расчета статуса действий, с которыми связаны навигационные ссылки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма должна содержать реквизит ПараметрыНавигационныхСсылок
//  Организация - СправочникСсылка.Организации 
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов
//  НалоговыйПериод - Дата
//  КодыНалоговыхОрганов - Массив из Строка - коды налоговых органов, в которых зарегистрированы объекты, попавшие в сверку.
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - Регистрация в ИФНС.
//  Сообщение - Неопределено - входящее сообщение от ФНС с расчетом налога.
Процедура ИнициализироватьПараметрыНавигационныхСсылок(Форма, Организация, Налог, НалоговыйПериод, КодыНалоговыхОрганов, 
														РегистрацияВНалоговомОргане, Сообщение = Неопределено) Экспорт 
	
	ПараметрыНавигационныхСсылок = НовыеПараметрыНавигационныхСсылок();
	ОбщиеПараметры = ПараметрыНавигационныхСсылок.ОбщиеПараметры;
	ОбщиеПараметры.Организация = Организация;
	ОбщиеПараметры.Налог = Налог; 
	
	ТипНалога = Перечисления.ТипыНалогов.ПустаяСсылка();
	Если Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		ТипНалога = Перечисления.ТипыНалогов.НалогНаИмущество;
	ИначеЕсли Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог Тогда
		ТипНалога = Перечисления.ТипыНалогов.ЗемельныйНалог;
	ИначеЕсли Налог = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог Тогда
		ТипНалога = Перечисления.ТипыНалогов.ТранспортныйНалог;
	КонецЕсли;
	ОбщиеПараметры.ТипНалога = ТипНалога;
	
	ОбщиеПараметры.ЭтоТранспортныйНалог = 
		(Налог = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог);
	ОбщиеПараметры.ЭтоЗемельныйНалог = 
		(Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог);
	ОбщиеПараметры.ЭтоНалогНаИмущество = 
		(Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество);
	ОбщиеПараметры.НалоговыйПериод = НалоговыйПериод;
	ОбщиеПараметры.КодыНалоговыхОрганов = КодыНалоговыхОрганов;
	ОбщиеПараметры.ИФНС = РегистрацияВНалоговомОргане;
	ОбщиеПараметры.КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РегистрацияВНалоговомОргане, "Код");
	ОбщиеПараметры.Сообщение = Сообщение;
	Если ЗначениеЗаполнено(Сообщение) Тогда 
		РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сообщение, "НомерДокумента, ДатаДокумента");
		ОбщиеПараметры.НомерСообщения = РеквизитыСообщения.НомерДокумента;
		ОбщиеПараметры.ДатаСообщения = РеквизитыСообщения.ДатаДокумента;
	КонецЕсли;
	
	ПрочитатьУсловияВыполненияДействийПоСсылкам(ОбщиеПараметры);
	Форма.ПараметрыНавигационныхСсылок = ПараметрыНавигационныхСсылок;
	
КонецПроцедуры

// Инициализировать параметры сверки.
// 
// Параметры:
//  Форма - Форма
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - Регистрация в налоговом органе
//  РегистрацияВНалоговомОрганеОтправителе - СправочникСсылка.РегистрацииВНалоговомОргане, Неопределено -  Регистрация в налоговом органе отправителе
//  КодОтправителя - Строка, Неопределено -  Код отправителя
//  КодыНалоговыхОрганов - Строка, Неопределено -  Коды налоговых органов
//  Сообщение - Неопределено -  Сообщение
Процедура ИнициализироватьПараметрыСверки(Форма,
											РегистрацияВНалоговомОргане,
											РегистрацияВНалоговомОрганеОтправителе = Неопределено,
											КодОтправителя = Неопределено,
											КодыНалоговыхОрганов = Неопределено,
											Сообщение = Неопределено) Экспорт

	Параметры = Форма.Параметры;
	
	ПараметрыСверки = Новый Структура;
	ПараметрыСверки.Вставить("КодОтправителя", КодОтправителя);
	ПараметрыСверки.Вставить("РегистрацияВНалоговомОргане");
	ПараметрыСверки.Вставить("Сообщение", Сообщение);
	ПараметрыСверки.Вставить("КодыНалоговыхОрганов", КодыНалоговыхОрганов);
	// Для более понятного использования в коде применяем текстовые состояния вместо чисел.
	// Таким образом, получается "локальное" перечисление состояний сверки.
	ПараметрыСверки.Вставить("СостоянияСверки", СостоянияСверки());
	ПараметрыСверки.Вставить("СостояниеСверки"); // одно из значений СостоянияСверки
	ПараметрыСверки.Вставить("Цвета", Новый Структура); // цвета текста результата
	
	КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");
	
	Если Не ЗначениеЗаполнено(КодОтправителя) Или Не ЗначениеЗаполнено(Сообщение) Тогда
		СведенияОСообщении = РегистрыСведений.СообщенияСРасчетомИмущественныхНалогов.СведенияОСообщении(
			Параметры.Организация,
			Параметры.Налог,
			Параметры.НалоговыйПериод,
			КодНалоговогоОргана,
			КодОтправителя);
		ЗаполнитьЗначенияСвойств(ПараметрыСверки, СведенияОСообщении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОрганеОтправителе) Тогда
		ПараметрыСверки.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОрганеОтправителе;
	ИначеЕсли КодНалоговогоОргана = ПараметрыСверки.КодОтправителя Тогда
		ПараметрыСверки.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	Иначе
		// Ищем регистрацию, которая соответствует коду отправителя
		ПараметрыСверки.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
			Параметры.Организация,
			,
			ПараметрыСверки.КодОтправителя);
		// Если регистрация не найдена, то оставляем ту, что передана	
		Если Не ЗначениеЗаполнено(ПараметрыСверки.РегистрацияВНалоговомОргане) Тогда
			ПараметрыСверки.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодыНалоговыхОрганов) Тогда
		ПараметрыСверки.КодыНалоговыхОрганов = РегистрыСведений.СообщенияСРасчетомИмущественныхНалогов.КодыНалоговыхОрганов(
			Параметры.Организация,
			Параметры.Налог,
			Параметры.НалоговыйПериод,
			ПараметрыСверки.КодОтправителя);
	КонецЕсли;

	ПараметрыСверки.Цвета.Вставить("РасчетыСошлись", ЦветаСтиля.РезультатУспехЦвет);
	ПараметрыСверки.Цвета.Вставить("РасчетыНеСошлись", ЦветаСтиля.РезультатПроблемаЦвет);
	ПараметрыСверки.Цвета.Вставить("РучнаяСверка", Новый Цвет);
	ПараметрыСверки.Цвета.Вставить("РасчетОтсутствует", ЦветаСтиля.РезультатПроблемаЦвет);
	ПараметрыСверки.Цвета.Вставить("ЦветФонаАктивнойКнопки", ЦветаСтиля.БыстрыеОтборыФонГруппы);
	ПараметрыСверки.Цвета.Вставить("ЦветПоУмолчанию", Новый Цвет);
	
	Форма.ПараметрыСверки = ПараметрыСверки;
	
КонецПроцедуры

// Суммы налога.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов - Налог
//  НалоговыйПериод - Дата - Налоговый период
//  КодыНалоговыхОрганов - Массив из Строка - Коды налоговых органов
// 
// Возвращаемое значение:
//  Структура -  Суммы налога:
// * СуммаНалогаНачислено - Число - 
Функция СуммыНалога(Организация, Налог, НалоговыйПериод, КодыНалоговыхОрганов) Экспорт
	
	СуммыНалога = Новый Структура;
	
	СуммыНалога.Вставить("СуммаНалогаНачислено", 0);
	
	// Сумма налога начисленная, с учетом корректировок документами Перерасчет имущественных налогов.
	Запрос = Новый Запрос;
	ТекстыЗапросаОбъединение = Новый Массив;
	
	Если Налог = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог Тогда
		Запрос.УстановитьПараметр("ХозОперацияДоначисленияНалога", Перечисления.ХозяйственныеОперации.ДоначислениеТранспортногоНалога);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате + РасчетТранспортногоНалога.СуммаАвансовыхПлатежей1Кв +
		|		РасчетТранспортногоНалога.СуммаАвансовыхПлатежей2Кв + РасчетТранспортногоНалога.СуммаАвансовыхПлатежей3Кв) КАК
		|		СуммаНалога,
		|	0 КАК ВычитаемаяСуммаНалога
		|ИЗ
		|	РегистрСведений.РасчетТранспортногоНалога КАК РасчетТранспортногоНалога
		|ГДЕ
		|	РасчетТранспортногоНалога.Организация = &Организация
		|	И РасчетТранспортногоНалога.ПериодРасчета = &ПериодРасчета
		|	И РасчетТранспортногоНалога.ИФНС.Код В (&КодыНалоговыхОрганов)";
	
	ИначеЕсли Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог Тогда 
		Запрос.УстановитьПараметр("ХозОперацияДоначисленияНалога", Перечисления.ХозяйственныеОперации.ДоначислениеЗемельногоНалога);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате + РасчетЗемельногоНалога.СуммаАвансовыхПлатежей) КАК СуммаНалога,
		|	0 КАК ВычитаемаяСуммаНалога
		|ИЗ
		|	РегистрСведений.РасчетЗемельногоНалога КАК РасчетЗемельногоНалога
		|ГДЕ
		|	РасчетЗемельногоНалога.Организация = &Организация
		|	И РасчетЗемельногоНалога.ПериодРасчета = &ПериодРасчета
		|	И РасчетЗемельногоНалога.ИФНС.Код В (&КодыНалоговыхОрганов)";
		
	ИначеЕсли Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество 
		 И (КонецГода(НалоговыйПериод) < РасчетИмущественныхНалогов.НачалоПримененияНовогоРасчетаНалогаНаИмущество()
		 Или РасчетИмущественныхНалоговПереопределяемый.ИспользоватьПрежнийРасчетНалогаНаИмуществоВПереходныйПериод(Организация, КонецГода(НалоговыйПериод))) Тогда 
		 
		Запрос.УстановитьПараметр("ХозОперацияДоначисленияНалога", Перечисления.ХозяйственныеОперации.ДоначислениеНалогаНаИмущество);
		 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате + РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей) КАК СуммаНалога,
		|	0 КАК ВычитаемаяСуммаНалога
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
		|ГДЕ
		|	РасчетНалогаНаИмущество.Организация = &Организация
		|	И РасчетНалогаНаИмущество.ПериодРасчета = &ПериодРасчета
		|	И РасчетНалогаНаИмущество.ИФНС.Код В(&КодыНалоговыхОрганов)
		|	И РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0 КАК СуммаНалога,
		|	СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате + РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей) КАК ВычитаемаяСуммаНалога
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
		|ГДЕ
		|	РасчетНалогаНаИмущество.Организация = &Организация
		|	И РасчетНалогаНаИмущество.ПериодРасчета = &ПериодРасчета
		|	И РасчетНалогаНаИмущество.ИФНС.Код В(&КодыНалоговыхОрганов)
		|	И РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)";
		 
	ИначеЕсли Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда 
		Запрос.УстановитьПараметр("ХозОперацияДоначисленияНалога", Перечисления.ХозяйственныеОперации.ДоначислениеНалогаНаИмущество);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СУММА(РасчетНалогаНаИмуществоПоКадастровойСтоимости.СуммаНалога) КАК СуммаНалога,
		|	0 КАК ВычитаемаяСуммаНалога
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмуществоПоКадастровойСтоимости
		|ГДЕ
		|	РасчетНалогаНаИмуществоПоКадастровойСтоимости.Организация = &Организация
		|	И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ПериодРасчета = &ПериодРасчета
		|	И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ИФНС.Код В(&КодыНалоговыхОрганов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0 КАК СуммаНалога,
		|	СУММА(РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.СуммаНалога) КАК ВычитаемаяСуммаНалога
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетНалогаНаИмуществоПоСреднегодовойСтоимости
		|ГДЕ
		|	РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.Организация = &Организация
		|	И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ПериодРасчета = &ПериодРасчета
		|	И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ИФНС.Код В(&КодыНалоговыхОрганов)";

	КонецЕсли;
	
	ТекстыЗапросаОбъединение.Добавить(ТекстЗапроса);
	
	Если Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		// Учтем корректировки по основным средствам с налоговой базой кадастровая стоимость.
		// Отдельно посчитаем корректировки по объектам со среднегодовой стоимостью.
		ТекстЗапросаКорректировки =
		"ВЫБРАТЬ
		|	СУММА(ПрочиеРасходы.СуммаРегл) КАК СуммаКорректировок,
		|	0 КАК СуммаВычитаемыхКорректировок
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодРасчета, ГОД), Организация = &Организация) КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
		|		ПО (ВЫРАЗИТЬ(ПрочиеРасходы.Регистратор КАК Документ.ПерерасчетИмущественныхНалогов).ОсновноеСредство = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство)
		|			И ПрочиеРасходы.Организация = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.Организация
		|ГДЕ
		|	ПрочиеРасходы.Организация = &Организация
		|	И ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ПрочиеРасходы.Регистратор ССЫЛКА Документ.ПерерасчетИмущественныхНалогов
		|	И ПрочиеРасходы.ХозяйственнаяОперация = &ХозОперацияДоначисленияНалога
		|	И ПрочиеРасходы.РегистрацияВНалоговомОргане.Код В(&КодыНалоговыхОрганов)
		|	И ВЫРАЗИТЬ(ПрочиеРасходы.Регистратор КАК Документ.ПерерасчетИмущественныхНалогов).НачалоПериода МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРасчета, ГОД) И КОНЕЦПЕРИОДА(&ПериодРасчета, ГОД)
		|	И ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0 КАК СуммаКорректировок,
		|	СУММА(ПрочиеРасходы.СуммаРегл)  КАК СуммаВычитаемыхКорректировок
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодРасчета, ГОД), Организация = &Организация) КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
		|		ПО (ВЫРАЗИТЬ(ПрочиеРасходы.Регистратор КАК Документ.ПерерасчетИмущественныхНалогов).ОсновноеСредство = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство)
		|			И ПрочиеРасходы.Организация = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.Организация
		|ГДЕ
		|	ПрочиеРасходы.Организация = &Организация
		|	И ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ПрочиеРасходы.Регистратор ССЫЛКА Документ.ПерерасчетИмущественныхНалогов
		|	И ПрочиеРасходы.ХозяйственнаяОперация = &ХозОперацияДоначисленияНалога
		|	И ПрочиеРасходы.РегистрацияВНалоговомОргане.Код В(&КодыНалоговыхОрганов)
		|	И ВЫРАЗИТЬ(ПрочиеРасходы.Регистратор КАК Документ.ПерерасчетИмущественныхНалогов).НачалоПериода МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРасчета, ГОД) И КОНЕЦПЕРИОДА(&ПериодРасчета, ГОД)
		|	И ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)";
		
	Иначе
		// Учтем корректировки по основным средствам.
		ТекстЗапросаКорректировки =
		"ВЫБРАТЬ
		|		СУММА(ПрочиеРасходы.СуммаРегл) КАК СуммаКорректировок,
		|		0 КАК СуммаВычитаемыхКорректировок
		|	ИЗ
		|		РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|	ГДЕ
		|		ПрочиеРасходы.Организация = &Организация
		|		И ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		И ПрочиеРасходы.Регистратор ССЫЛКА Документ.ПерерасчетИмущественныхНалогов
		|		И ПрочиеРасходы.ХозяйственнаяОперация = &ХозОперацияДоначисленияНалога
		|		И ПрочиеРасходы.РегистрацияВНалоговомОргане.Код В(&КодыНалоговыхОрганов)
		|		И ВЫРАЗИТЬ(ПрочиеРасходы.Регистратор КАК Документ.ПерерасчетИмущественныхНалогов).НачалоПериода
		|				МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРасчета, ГОД) И КОНЕЦПЕРИОДА(&ПериодРасчета, ГОД)";
	КонецЕсли;
	
	ТекстыЗапросаОбъединение.Добавить(ТекстЗапросаКорректировки);
	
	ТекстСКорректировками = СтрСоединить(ТекстыЗапросаОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(НачисленияСКорректировками.СуммаНалога) КАК СуммаНалога,
	|	СУММА(НачисленияСКорректировками.ВычитаемаяСуммаНалога) КАК ВычитаемаяСуммаНалога
	|ИЗ
	|	&НачисленияСКорректировками КАК НачисленияСКорректировками";  
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
								"&НачисленияСКорректировками",
								СтрШаблон("( %1 )", ТекстСКорректировками));

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ПериодРасчетаНалога(НалоговыйПериод));
	Запрос.УстановитьПараметр("КодыНалоговыхОрганов", КодыНалоговыхОрганов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); // в выборке 1 запись
	
	СуммыНалога.СуммаНалогаНачислено = Выборка.СуммаНалога;
	
	Возврат СуммыНалога;
	
КонецФункции	

// Возвращает структуру с именами полей строк детального расчета в программе и расчета ФНС.
// Порядок полей в массиве-результате соответствует порядку полей в бумажной форме расчета ФНС.
// Дополнительно в расчетах сравнивается поле СуммаЛьгот, но это общая сумма по объекту,
// поэтому сравнивается отдельно, и здесь не упоминается.
//
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов
//  НалоговыйПериод - Дата - любая дата за налоговый период
// 
// Возвращаемое значение:
//  Массив из Строка - наименования полей расчета для конкретного налога за конкретный период
//
Функция ПоляСтрокРасчета(Налог, НалоговыйПериод) Экспорт

	ПоляСтрокРасчета = Новый Массив;
	
	ПоляСтрокРасчета.Добавить("НалоговаяБаза");
	
	Если Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		ПоляСтрокРасчета.Добавить("ДоляВПравеЧислитель");
		ПоляСтрокРасчета.Добавить("ДоляВПравеЗнаменатель");
	ИначеЕсли Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог Тогда
		ПоляСтрокРасчета.Добавить("ДоляВПравеЧислитель");
		ПоляСтрокРасчета.Добавить("ДоляВПравеЗнаменатель");
		Если НалоговыйПериод < '20220101' Тогда
			ПоляСтрокРасчета.Добавить("НалоговыйВычет");
		КонецЕсли;
	КонецЕсли;
	
	ПоляСтрокРасчета.Добавить("НалоговаяСтавка");
	ПоляСтрокРасчета.Добавить("КоличествоМесяцевВладения");
	
	Если Налог = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог Тогда
		ПоляСтрокРасчета.Добавить("ПовышающийКоэффициент");
	ИначеЕсли Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог Тогда
		ПоляСтрокРасчета.Добавить("ПовышающийКоэффициент");
	КонецЕсли;

	Возврат ПоляСтрокРасчета;

КонецФункции

// Сравнить расчеты по объекту.
// 
// Параметры:
//  Расчет - ТаблицаЗначений, ДанныеФормыКоллекция - строки расчета по объекту в программе
//  РасчетФНС - ТаблицаЗначений, ДанныеФормыКоллекция - строки расчета по объекту в ФНС
//  СуммаЛьгот - Число - сумма налоговых льгот по объекту в расчете программы
//  СуммаЛьготФНС - Число - сумма налоговых льгот по объекту в расчете ФНС
//  СуммаНалога - Число - сумма исчисленного налога по объекту в программе
//  СуммаНалогаФНС - Число - сумма исчисленного налога по объекту в сообщении ФНС
//  СверяемыеПоляСтрокРасчета - Массив из Строка - см. ПоляСтрокРасчета()
// 
// Возвращаемое значение:
//  Строка - список полей через запятую, значения в которых расходятся в двух расчетах. Если расходятся все показатели
//  или в расчетах разное количество строк, то вернется значение "Все".
Функция СравнитьРасчетыПоОбъекту(Расчет, РасчетФНС, СуммаЛьгот, СуммаЛьготФНС, СуммаНалога, СуммаНалогаФНС, СверяемыеПоляСтрокРасчета) Экспорт 

	ПоляРасхождений = "";
	
	Сравнение = Новый ТаблицаЗначений;
	
	Сравнение.Колонки.Добавить("СтрокаРасчета");
	Сравнение.Колонки.Добавить("ИндексСтрокиРасчета", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	Сравнение.Колонки.Добавить("СтрокаРасчетаФНС");
	Сравнение.Колонки.Добавить("ИндексСтрокиРасчетаФНС", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для каждого ПолеРасчета Из СверяемыеПоляСтрокРасчета Цикл
		Сравнение.Колонки.Добавить(ПолеРасчета, 
			ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный)); // 0- значения не сходится, 1 - сходятся
	КонецЦикла; 
	
	Сравнение.Колонки.Добавить("ВсегоСошлось",
		ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный)); // показателей расчета меньше 10
		
	// Каждую строку расчета в программе сравниваем с каждой строкой расчета ФНС.
	// Результат этого сравнения  - количество сошедшихся показателей в каждой паре.
	Для каждого СтрокаРасчета Из Расчет Цикл

		СтрокаРасчета.ПоляРасхождений = "Все"; // ниже уточняется

		Для каждого СтрокаРасчетаФНС Из РасчетФНС Цикл
			
			СтрокаРасчетаФНС.ПоляРасхождений = "Все"; // ниже уточняется
			
			НоваяСтрокаСравнения = Сравнение.Добавить();
			НоваяСтрокаСравнения.СтрокаРасчета = СтрокаРасчета;
			НоваяСтрокаСравнения.ИндексСтрокиРасчета = Расчет.Индекс(СтрокаРасчета);
			НоваяСтрокаСравнения.СтрокаРасчетаФНС = СтрокаРасчетаФНС;
			НоваяСтрокаСравнения.ИндексСтрокиРасчетаФНС = РасчетФНС.Индекс(СтрокаРасчетаФНС);
			Для каждого ПолеРасчета Из СверяемыеПоляСтрокРасчета Цикл
				НоваяСтрокаСравнения[ПолеРасчета] = 
					?(СтрокаРасчета[ПолеРасчета] = СтрокаРасчетаФНС[ПолеРасчета], 1, 0);
				НоваяСтрокаСравнения.ВсегоСошлось = НоваяСтрокаСравнения.ВсегоСошлось + НоваяСтрокаСравнения[ПолеРасчета];
			КонецЦикла;
			
		КонецЦикла;

	КонецЦикла; 
	
	Сравнение.Сортировать("ИндексСтрокиРасчета, ВсегоСошлось Убыв, ИндексСтрокиРасчетаФНС");
	ВсегоПоказателей = СверяемыеПоляСтрокРасчета.Количество();
	ПоляРасхожденийРасчет = Новый Массив; // в целом по объекту - для передачи в список объектов
	
	// Для каждой строки расчета программы подбираем наиболее подходящую строку расчета ФНС (максимум совпадений показателей).
	// Учитывая сортировку таблицы Сравнение (см. выше), первая строка - это и есть наиболее подходящая пара.
	// После выбора пары записываем в строки расчетов, какие поля расходятся, и удаляем из сравнения все строки со ссылками
	// на сопоставленные строки расчетов.
	// Сравнение завершается, когда в таблице сравнения не остается строк. При этом могут остаться несопоставленные строки -
	// по ним считаем, что все показатели не сошлись (значение "Все" - установлено выше).
	Пока Сравнение.Количество() > 0 Цикл

		ИндексСтрокиРасчета = Сравнение[0].ИндексСтрокиРасчета;
		ИндексСтрокиРасчетаФНС = Сравнение[0].ИндексСтрокиРасчетаФНС;

		Если ВсегоПоказателей > Сравнение[0].ВсегоСошлось Тогда
			ПоляРасхожденийПоСтроке = Новый Массив;
			Для каждого ПолеРасчета Из СверяемыеПоляСтрокРасчета Цикл
				Если Сравнение[0][ПолеРасчета] = 0 Тогда
					ПоляРасхожденийПоСтроке.Добавить(ПолеРасчета);
				КонецЕсли;
			КонецЦикла;
			Сравнение[0].СтрокаРасчета.ПоляРасхождений = СтрСоединить(ПоляРасхожденийПоСтроке, ",");
			Сравнение[0].СтрокаРасчетаФНС.ПоляРасхождений = СтрСоединить(ПоляРасхожденийПоСтроке, ",");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасхожденийРасчет, ПоляРасхожденийПоСтроке, Истина);
		ИначеЕсли ВсегоПоказателей = Сравнение[0].ВсегоСошлось Тогда
			Сравнение[0].СтрокаРасчета.ПоляРасхождений = "";
			Сравнение[0].СтрокаРасчетаФНС.ПоляРасхождений = "";
		КонецЕсли;
		
		СтрокиКУдалению = Сравнение.НайтиСтроки(Новый Структура("ИндексСтрокиРасчета", ИндексСтрокиРасчета));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			Сравнение.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		СтрокиКУдалению = Сравнение.НайтиСтроки(Новый Структура("ИндексСтрокиРасчетаФНС", ИндексСтрокиРасчетаФНС));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			Сравнение.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЦикла;

	СтрокиБезСопоставления = Расчет.НайтиСтроки(Новый Структура("ПоляРасхождений", "Все"));
	СтрокиФНСБезСопоставления = РасчетФНС.НайтиСтроки(Новый Структура("ПоляРасхождений", "Все"));
	
	Если СтрокиБезСопоставления.Количество() > 0 Или СтрокиФНСБезСопоставления.Количество() > 0 Тогда
		// По объекту нельзя сказать, что проблема в каких-то отдельных показателях - расчет в целом другой.
		ПоляРасхождений = "Все";
	Иначе
		Если СуммаЛьгот <> СуммаЛьготФНС Тогда
			ПоляРасхожденийРасчет.Добавить("СуммаЛьгот");
		КонецЕсли;
		
		// В расчете может быть техногенная ошибка, когда показатели сходятся, а сумма налога различается. 
		// Чтобы корректно обработать такую ситуацию, запишем, что расхождение в производном поле суммы:
		Если ПоляРасхожденийРасчет.Количество() = 0 И СуммаНалога <> СуммаНалогаФНС Тогда
			ПоляРасхожденийРасчет.Добавить("СуммаНалога");
		КонецЕсли;
		
		ПоляРасхождений = СтрСоединить(ПоляРасхожденийРасчет, ",");
	КонецЕсли;
	
	Возврат ПоляРасхождений;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Новые параметры навигационных ссылок.
// 
// Возвращаемое значение:
//  Структура - Новые параметры навигационных ссылок:
// * ОбщиеПараметры - Структура -
// * СпециальныеПараметры - Структура -
Функция НовыеПараметрыНавигационныхСсылок() Экспорт
	
	ПараметрыНавигационныхСсылок = Новый Структура;
	ПараметрыНавигационныхСсылок.Вставить("ОбщиеПараметры", Новый Структура);
	
	ОбщиеПараметры = ПараметрыНавигационныхСсылок.ОбщиеПараметры;
	ОбщиеПараметры.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ОбщиеПараметры.Вставить("Налог", Перечисления.ВидыИмущественныхНалогов.ПустаяСсылка());
	ОбщиеПараметры.Вставить("ТипНалога", Перечисления.ТипыНалогов.ПустаяСсылка());
	ОбщиеПараметры.Вставить("ЭтоТранспортныйНалог", Ложь);
	ОбщиеПараметры.Вставить("ЭтоЗемельныйНалог", Ложь);
	ОбщиеПараметры.Вставить("ЭтоНалогНаИмущество", Ложь);
	ОбщиеПараметры.Вставить("НалоговыйПериод", '00010101');
	ОбщиеПараметры.Вставить("КодыНалоговыхОрганов", Новый Массив);
	ОбщиеПараметры.Вставить("ИФНС", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ОбщиеПараметры.Вставить("КодИФНС", "");
	ОбщиеПараметры.Вставить("Сообщение");
	ОбщиеПараметры.Вставить("НомерСообщения", "");
	ОбщиеПараметры.Вставить("ДатаСообщения", '00010101');
	ОбщиеПараметры.Вставить("УсловияПоВидуУведомления", Новый Соответствие);
	ОбщиеПараметры.Вставить("ПрочиеУсловия", Новый Соответствие);
	
	ПараметрыНавигационныхСсылок.Вставить("СпециальныеПараметры", Новый Структура);
	
	Возврат ПараметрыНавигационныхСсылок;
	
КонецФункции	

Процедура ПрочитатьУсловияВыполненияДействийПоСсылкам(ОбщиеПараметрыНавигационныхСсылок)
	
	МакетШаблонов = Документы.СверкаСФНСПоИмущественнымНалогам.ПолучитьМакет("ДействияИНавигационныеСсылки");
	
	ОбластьМакета = МакетШаблонов.ПолучитьОбласть("НавигационныеСсылки");
	КоличествоШаблонов = ОбластьМакета.ВысотаТаблицы;
	
	Для НомерСтроки = 1 По КоличествоШаблонов Цикл
		
		НавигационнаяСсылка = ОбластьМакета.Область(НомерСтроки, 1).Текст;
		ВидУведомленияСтрокой = ОбластьМакета.Область(НомерСтроки, 2).Текст;
		ПрочееУсловие = ОбластьМакета.Область(НомерСтроки, 3).Текст;
		
		Если Не ПустаяСтрока(ВидУведомленияСтрокой) Тогда
			ОбщиеПараметрыНавигационныхСсылок.УсловияПоВидуУведомления.Вставить(
				НавигационнаяСсылка, 
				Перечисления.ВидыУведомленийОСпецрежимахНалогообложения[ВидУведомленияСтрокой]);
		КонецЕсли;	
	
		Если Не ПустаяСтрока(ПрочееУсловие) Тогда
			ОбщиеПараметрыНавигационныхСсылок.ПрочиеУсловия.Вставить(
				НавигационнаяСсылка, 
				ПрочееУсловие);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция СостоянияСверки()

	СостоянияСверки = Новый Структура;
	СостоянияСверки.Вставить("ОтсутствуетДоКрайнегоСрока", 0);
	СостоянияСверки.Вставить("ОтсутствуетПослеКрайнегоСрока", 1);
	СостоянияСверки.Вставить("АвтоматическаяСверкаРасчетыСошлись", 2);
	СостоянияСверки.Вставить("АвтоматическаяСверкаРасчетыНеСошлись", 3);
	СостоянияСверки.Вставить("РучнаяСверка", 4);
	
	Возврат СостоянияСверки;

КонецФункции

#КонецОбласти
