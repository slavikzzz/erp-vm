
////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для форм статистической отчетности.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗагрузкаСправочниковШаблонаСтатистическогоОтчетаВРегистр

Процедура ДополнитьРеквизитыСтатистическогоОтчетаДляЗагрузкиСправочников(Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтруктураИнформацияСправочников", Новый ОписаниеТипов()));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Форма.СтруктураИнформацияСправочников = Новый Структура;
	
	ДопАтрибуты = СформироватьСтруктуруДопАтрибутов(Форма.ИмяФормы, Форма.СтруктураРеквизитовФормы["ИмяМакетаАтрибутовВыгрузки"]);
	ИсточникОтчета = СформироватьСтрокуИсточникОтчета(ДопАтрибуты);
	
	СтруктураИнформацияЗагруженныхСправочников = ИнформацияЗагруженныхСправочников(ИсточникОтчета);
	Форма.СтруктураИнформацияСправочников.Вставить("РегистрИмя", СтруктураИнформацияЗагруженныхСправочников.РегистрИмя);
	Форма.СтруктураИнформацияСправочников.Вставить("ИсточникОтчета", ИсточникОтчета);
	Форма.СтруктураИнформацияСправочников.Вставить("СправочникиЗагружены", СтруктураИнформацияЗагруженныхСправочников.СправочникиЗагружены);
	Форма.СтруктураИнформацияСправочников.Вставить("ЗагрузитьСправочники", ?(ПолучитьВерсиюФорматаВыгрузки(Форма) <> Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС, Ложь, Истина));
	
КонецПроцедуры

Функция СформироватьСтрокуИсточникОтчета(ДопАтрибуты) Экспорт
	
	ВерсияШаблона1С = ?(ДопАтрибуты.Свойство("version1C"), "_" + ДопАтрибуты.version1C, "");
	Возврат (ДопАтрибуты.OKUD + "_" + ДопАтрибуты.code + "_" + ДопАтрибуты.version + ВерсияШаблона1С);
	
КонецФункции

Функция ИнформацияЗагруженныхСправочников(ИсточникОтчета) Экспорт
	
	СтруктураЗагруженныеСправочники = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОбщиеСправочникиШаблоновОтчетовСтатистики.ИсточникОтчета КАК ИсточникОтчета
	               |ИЗ
	               |	РегистрСведений.ОбщиеСправочникиШаблоновОтчетовСтатистики КАК ОбщиеСправочникиШаблоновОтчетовСтатистики
	               |ГДЕ
	               |	ОбщиеСправочникиШаблоновОтчетовСтатистики.ИсточникОтчета = &ИсточникОтчета";
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		СтруктураЗагруженныеСправочники.Вставить("РегистрИмя", "ОбщиеСправочникиШаблоновОтчетовСтатистики");
		СтруктураЗагруженныеСправочники.Вставить("СправочникиЗагружены", Истина);
		Возврат СтруктураЗагруженныеСправочники;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СправочникиШаблоновОтчетовСтатистики.ИсточникОтчета КАК ИсточникОтчета
	               |ИЗ
	               |	РегистрСведений.СправочникиШаблоновОтчетовСтатистики КАК СправочникиШаблоновОтчетовСтатистики
	               |ГДЕ
	               |	СправочникиШаблоновОтчетовСтатистики.ИсточникОтчета = &ИсточникОтчета";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СтруктураЗагруженныеСправочники.Вставить("РегистрИмя", "СправочникиШаблоновОтчетовСтатистики");
		СтруктураЗагруженныеСправочники.Вставить("СправочникиЗагружены", Истина);
		Возврат СтруктураЗагруженныеСправочники;
	КонецЕсли;
	
	СтруктураЗагруженныеСправочники.Вставить("РегистрИмя", "СправочникиШаблоновОтчетовСтатистики");
	СтруктураЗагруженныеСправочники.Вставить("СправочникиЗагружены", Ложь);
	Возврат СтруктураЗагруженныеСправочники;
	
КонецФункции

Процедура ЗагрузитьСправочникиШаблонаВРегистр(ИмяФормы, ИсточникОтчета, МакетШаблона, ВНеразделенныйРегистр = Ложь) Экспорт
	
	Если ТипЗнч(МакетШаблона) = Тип("Строка") Тогда
		МодульОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы);
		ИтоговоеИмяШаблона = МакетШаблона;
		Для Каждого Мкт Из МодульОтчета.Метаданные().Макеты Цикл
			Если СтрНачинаетсяС(Мкт.Имя, "EF_")
				И СтрЗаканчиваетсяНа(Мкт.Имя, МакетШаблона) Тогда
				ИтоговоеИмяШаблона = Мкт.Имя;
			КонецЕсли;
		КонецЦикла;
		ИмяВременногоКаталога = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
		СоздатьКаталог(ИмяВременногоКаталога);
		ЧтениеZip = Новый ЧтениеZipФайла(Новый ПотокВПамяти(ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(МодульОтчета.ПолучитьМакет(ИтоговоеИмяШаблона))));
		ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0], ИмяВременногоКаталога, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ИтоговыйФайл = ИмяВременногоКаталога + ЧтениеZip.Элементы[0].Имя;
		ЧтениеZip.Закрыть();
		ДокументШаблон = ЗагрузитьФайлXML(ИтоговыйФайл);
		УдалитьФайлы(ИмяВременногоКаталога);
	ИначеЕсли ТипЗнч(МакетШаблона) = Тип("ДвоичныеДанные") Тогда
		ИтоговыйФайл = ПолучитьИмяВременногоФайла("xml");
		МакетШаблона.Записать(ИтоговыйФайл);
		ДокументШаблон = ЗагрузитьФайлXML(ИтоговыйФайл);
		УдалитьФайлы(ИтоговыйФайл);
	Иначе
		Возврат;
	КонецЕсли;
	
	КорневойУзел = ДокументШаблон.ДочерниеУзлы[0];
	СправочникиШаблона = КорневойУзел.ПолучитьЭлементыПоИмени("dics")[0].ПолучитьЭлементыПоИмени("dic");
	
	ИмяРегистра = ?(ВНеразделенныйРегистр, "ОбщиеСправочникиШаблоновОтчетовСтатистики", "СправочникиШаблоновОтчетовСтатистики");
	
	НачатьТранзакцию();
	Попытка
		ЗаписиРегистра = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		ЗаписиРегистра.Отбор["ИсточникОтчета"].Установить(ИсточникОтчета);
		ЗаписиРегистра.Прочитать();
		ЗаписиРегистра.Очистить();
		Для Каждого УзелСправочник Из СправочникиШаблона Цикл
			ЗагрузитьСправочникВРегистр(ИсточникОтчета, УзелСправочник, ЗаписиРегистра);
		КонецЦикла;
		КоррекцияНабораЗаписей(ЗаписиРегистра);
		ЗаписиРегистра.Записать(Истина);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииВыгрузки

Функция СформироватьСтруктуруДопАтрибутов(ИмяФормы, ИмяМакета) Экспорт
	
	ДопАтрибуты = Новый Структура;
	
	Если ТипЗнч(ИмяФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы.ИмяФормы).ПолучитьМакет(ИмяМакета);
	Иначе
		Макет = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
		АтрКлюч = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
		Если НЕ ПустаяСтрока(АтрКлюч) Тогда
			АтрКлюч = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(".- ", АтрКлюч, "___");
			ДопАтрибуты.Вставить(АтрКлюч, СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст));
		КонецЕсли;
	КонецЦикла;
	
	Если ДопАтрибуты.Свойство("OKUD")
		И ТипЗнч(ДопАтрибуты.OKUD) = Тип("Строка")
		И СтрДлина(ДопАтрибуты.OKUD) <= 6 Тогда
		
		ДопАтрибуты.OKUD = Прав("0000000" + ДопАтрибуты.OKUD, 7);
	КонецЕсли;
	
	Возврат ДопАтрибуты;
	
КонецФункции

#КонецОбласти

Функция ПараметрыПроверкиКонтрольныхСоотношений(Форма) Экспорт
	ПараметрыПроверкиКонтрольныхСоотношений = Новый Структура;
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ШаблонРосстата", Форма.СтруктураРеквизитовФормы["ИмяМакетаШаблона"]);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("Атрибуты", Форма.СтруктураРеквизитовФормы["ИмяМакетаАтрибутовВыгрузки"]);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("СхемаВыгрузки", Форма.СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ИмяФормы", Форма.ИмяФормы);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ПрошлыйПериод", Ложь);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ТекстВыгрузки", "");
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("Ссылка", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ДоступноФормированиеТекстаВыгрузкиБезКонтекстаФормы", Ложь);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ТиповойСпособФормированияТекстаВыгрузки", Истина);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("АдресХранилища", Форма.АдресХранилища);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ИдентификаторЗадания", Неопределено);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ДополнятьРасшифровкой",
													 Форма.СтруктураРеквизитовФормы["КонтрольныеСоотношенияДополнятьРасшифровкой"]);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ВыполнятьСинхронно", Ложь);
	Возврат ПараметрыПроверкиКонтрольныхСоотношений;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВерсиюФорматаВыгрузки(Форма) Экспорт
	
	Перем ВерсияФорматаВыгрузки;
	
	Разложение = СтрРазделить(Форма.ИмяФормы, ".");
	мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(Форма.ИмяФормы);
	Если СтрНайти(Форма.ИмяФормы, "Внешний") <> 0 Тогда
		ВерсияФорматаВыгрузки = мОбъектОтчета.ВерсияФорматаВыгрузки(
			Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, Разложение[3]);
	Иначе
		ВерсияФорматаВыгрузки = Отчеты[Разложение[1]].ВерсияФорматаВыгрузки(
			Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, Разложение[3]);
	КонецЕсли;
	
	Макеты = мОбъектОтчета.Метаданные().Макеты;
	Макет = "";
	Если (Форма.СтруктураРеквизитовФормы.Свойство("ИмяМакетаСхемыВыгрузки", Макет) И Макеты.Найти(Макет) = Неопределено)
		Или (Форма.СтруктураРеквизитовФормы.Свойство("ИмяМакетаАтрибутовВыгрузки", Макет) И Макеты.Найти(Макет) = Неопределено)
		Или (Форма.СтруктураРеквизитовФормы.Свойство("ИмяМакетаШаблона", Макет) И Макеты.Найти(Макет) = Неопределено) Тогда
		ВерсияФорматаВыгрузки = Неопределено;
	КонецЕсли;
	
	//В случае принудительно установленного запрета выгрузки в макете
	Если Форма.СтруктураРеквизитовФормы.Свойство("ИмяМакетаАтрибутовВыгрузки", Макет) И Макеты.Найти(Макет) <> Неопределено Тогда
		ДопАтрибуты = СформироватьСтруктуруДопАтрибутов(Форма.ИмяФормы, Макет);
		Если УстановленЗапретВыгрузкиВМакетеАтрибутов(ДопАтрибуты) Тогда
			ВерсияФорматаВыгрузки = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВерсияФорматаВыгрузки;
	
КонецФункции

Функция УстановленЗапретВыгрузкиВМакетеАтрибутов(ДопАтрибуты) Экспорт
	
	Выгрузка = "";
	УстановленЗапрет = Ложь;
	
	Если ДопАтрибуты.Свойство("upload", Выгрузка) И Выгрузка = "false" Тогда
		УстановленЗапрет = Истина;
	КонецЕсли;
	
	Возврат УстановленЗапрет;
	
КонецФункции

#Область ЗагрузкаДлинныхСписковВРегистр

Процедура КоррекцияНабораЗаписей(ЗаписиРегистра)
	
	СуществующиеКлючи = Новый Соответствие;
	ЗаписиКУдалению = Новый Соответствие;
	Измерения = Метаданные.РегистрыСведений.СправочникиШаблоновОтчетовСтатистики.Измерения;
	Для Каждого Запись Из ЗаписиРегистра Цикл
		Ключ = "";
		Для Каждого Измерение Из Измерения Цикл
			Ключ = Ключ + "@" + Запись[Измерение.Имя] + "$";
		КонецЦикла;
		Если СуществующиеКлючи[Ключ] = Истина Тогда
			ЗаписиКУдалению.Вставить(Запись);
		КонецЕсли;
		СуществующиеКлючи.Вставить(Ключ, Истина);
	КонецЦикла;
	
	Для Каждого КЗ Из ЗаписиКУдалению Цикл
		ЗаписиРегистра.Удалить(КЗ.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСправочникВРегистр(ИсточникОтчета, УзелСправочник, ЗаписиРегистра)
	
	ИдентификаторСпр = УзелСправочник.ПолучитьАтрибут("id");
	УзлыЭлементыСправочника = УзелСправочник.ПолучитьЭлементыПоИмени("term");
	
	Для Каждого УзелЭлементСправочника Из УзлыЭлементыСправочника Цикл
		НовЗапись = ЗаписиРегистра.Добавить();
		НовЗапись.ИсточникОтчета = ИсточникОтчета;
		НовЗапись.Справочник = ИдентификаторСпр;
		
		ТекстЭлемента = СокрЛП(УзелЭлементСправочника.ТекстовоеСодержимое);
		НовЗапись.Наименование = ТекстЭлемента;
		
		Для ИндексАтрибута = 0 По УзелЭлементСправочника.Атрибуты.Количество() - 1 Цикл
			УзелАтрибута = УзелЭлементСправочника.Атрибуты[ИндексАтрибута];
			ИмяАтрибута = НРег(УзелАтрибута.Имя);
			
			Если ИмяАтрибута = "id" Тогда
				НовЗапись.Код = УзелАтрибута.Значение;
			Иначе
				НовЗапись.Фильтр = УзелАтрибута.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НовЗапись = ЗаписиРегистра.Добавить();
	НовЗапись.ИсточникОтчета = ИсточникОтчета;
	НовЗапись.Справочник = ИдентификаторСпр;
	НовЗапись.Наименование = "Пустое значение";
	
КонецПроцедуры

Функция ЗагрузитьФайлXML(ИмяФайла)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

#КонецОбласти

#КонецОбласти
