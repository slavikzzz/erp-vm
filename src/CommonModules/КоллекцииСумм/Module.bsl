#Область ОписаниеКоллекции

// Конструктор описания коллекции
// 
// Пример:
//  Описание = НовыйОписаниеКоллекцииСумм();
//  ДобавитьНаборСумм(Описание, "БухгалтерскийНалоговыйУчет", "Сумма,СуммаНУ");
//  ДобавитьНаборСумм(Описание, "ЭлементыЗатрат");
//
Функция НовыйОписаниеКоллекцииСумм() Экспорт
	
	ОписаниеКоллекции = Новый Структура;
	ОписаниеКоллекции.Вставить("НаборыСумм",                 Новый Структура);
	ОписаниеКоллекции.Вставить("ЗначенияПоУмолчанию",        Новый Структура);
	ОписаниеКоллекции.Вставить("ИменаВсехСвойствСтрокой",    "");
	// Фиксированные наборы
	ОписаниеКоллекции.Вставить("ИменаСвойств",               Новый Массив);
	ОписаниеКоллекции.Вставить("ИменаСвойствСтрокой",        "");
	// Переменные наборы
	ОписаниеКоллекции.Вставить("ИменаПеременныхНаборовСумм", Новый Массив);
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

// Добавляет в описание коллекции сумм описание набора.
//
// Параметры:
//  ОписаниеКоллекции - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
//
//  ИмяНабора         - Строка
//
//  СоставНабора      - Строка - для набора с фиксированным составом: имена свойств коллекции, разделенные запятыми
//                    - Неопределено - указывает, что состав набора переменный.
//
Процедура ДобавитьНаборСумм(ОписаниеКоллекции, ИмяНабора, СоставНабора = Неопределено) Экспорт
	
	ОписаниеНабора = Новый Структура;
	ОписаниеНабора.Вставить("ФиксированныйСостав", Ложь);
	
	Если Не ПустаяСтрока(ОписаниеКоллекции.ИменаВсехСвойствСтрокой) Тогда
		ОписаниеКоллекции.ИменаВсехСвойствСтрокой = ОписаниеКоллекции.ИменаВсехСвойствСтрокой + ",";
	КонецЕсли;
	
	Если СоставНабора = Неопределено Тогда
		// Переменный состав
		
		ОписаниеКоллекции.ИменаПеременныхНаборовСумм.Добавить(ИмяНабора);
		ОписаниеКоллекции.ЗначенияПоУмолчанию.Вставить(ИмяНабора, НовыйПеременныйНаборСумм());
		ОписаниеКоллекции.ИменаВсехСвойствСтрокой = ОписаниеКоллекции.ИменаВсехСвойствСтрокой + ИмяНабора;
		
	Иначе // Фиксированный состав
		
		
		ИменаСвойств = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СоставНабора, ",", Ложь, Истина);
		Для Каждого ИмяСвойства Из ИменаСвойств Цикл
			ОписаниеКоллекции.ИменаСвойств.Добавить(ИмяСвойства);
			ОписаниеКоллекции.ЗначенияПоУмолчанию.Вставить(ИмяСвойства, 0);
		КонецЦикла;
		
		ОписаниеКоллекции.ИменаВсехСвойствСтрокой = ОписаниеКоллекции.ИменаВсехСвойствСтрокой + СоставНабора;
		
		Если ПустаяСтрока(ОписаниеКоллекции.ИменаСвойствСтрокой) Тогда
			ОписаниеКоллекции.ИменаСвойствСтрокой = СоставНабора;
		Иначе
			ОписаниеКоллекции.ИменаСвойствСтрокой = ОписаниеКоллекции.ИменаСвойствСтрокой + "," + СоставНабора;
		КонецЕсли;
		
		ОписаниеНабора.ФиксированныйСостав = Истина;
		ОписаниеНабора.Вставить("ИменаСвойств",        ИменаСвойств);
		ОписаниеНабора.Вставить("ИменаСвойствСтрокой", СоставНабора);
		
		
	КонецЕсли;
	
	ОписаниеКоллекции.НаборыСумм.Вставить(ИмяНабора, ОписаниеНабора);
	
КонецПроцедуры

// Проверяет наличие набора в описании коллекции сумм.
//
// Параметры:
//  ОписаниеКоллекции - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
//
//  ИмяНабора         - Строка
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьНаборСумм(ОписаниеКоллекции, ИмяНабора) Экспорт
	
	Возврат ОписаниеКоллекции.НаборыСумм.Свойство(ИмяНабора);
	
КонецФункции

// Определяет перечень свойств фиксированных наборов коллекции сумм.
//
// Параметры:
//  ОписаниеКоллекции - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
//
// Возвращаемое значение:
//  Строка - перечень имен свойств, разделенных запятыми.
//
Функция ИменаСвойствСтрокой(ОписаниеКоллекции) Экспорт
	
	Возврат ОписаниеКоллекции.ИменаСвойствСтрокой;
	
КонецФункции

// Определяет перечень свойств фиксированных наборов коллекции сумм.
//
// Параметры:
//  ОписаниеКоллекции - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
//
// Возвращаемое значение:
//  Массив - элементы массива - строки, имена свойств.
//
Функция ИменаСвойств(ОписаниеСумм) Экспорт
	
	Возврат ОписаниеСумм.ИменаСвойств;
	
КонецФункции

#КонецОбласти

#Область СозданиеКоллекции

// Конструктор коллекции сумм.
//
// Параметры:
//  ОписаниеКоллекции - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм()
//  ДляЗаполнения - Булево - Истина, если коллекция следом будет неминуемо заполнена.
//                  Передача параметра пропускает заполнение значениями по умолчанию
//                  и тем самым позволяет оптимизировать время выполнения.
//
Функция НовыйКоллекцияСумм(ОписаниеКоллекции, ДляЗаполнения = Ложь) Экспорт
	
	Если ПустаяСтрока(ОписаниеКоллекции.ИменаВсехСвойствСтрокой) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	// Создадим элементы для фиксированных наборов
	Коллекция = Новый Структура(ОписаниеКоллекции.ИменаВсехСвойствСтрокой);
	Если Не ДляЗаполнения Тогда
		Заполнить(Коллекция, ОписаниеКоллекции.ЗначенияПоУмолчанию, ОписаниеКоллекции);
	КонецЕсли;
		
	Возврат Коллекция;
	
КонецФункции

// Заполняет коллекцию сумм на основании другой коллекции сумм.
//
// Параметры:
//  Коллекция         - Заполняемая коллекция - должна соответствовать ОписаниеКоллекций.
//
//  Основание         - Коллекция сумм - должна соответствовать ОписаниеКоллекций
//
//  ОписаниеКоллекций - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
//
//  СоответствиеИмен  - Соответствие - (необязательный) правила соответствия имен свойств коллекции-основания и
//                      заполняемой коллекции. В ключе элемента соответствия - имя свойства заполняемой коллекции,
//                      в значении - имя свойства коллекции-основания.
//
Процедура Заполнить(Коллекция, Основание, ОписаниеКоллекций, СоответствиеИмен = Неопределено) Экспорт
	
	// Фиксированные наборы
	Если СоответствиеИмен = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Коллекция, Основание, ОписаниеКоллекций.ИменаСвойствСтрокой);
	Иначе // С учетом соответствия имен
		Для Каждого ИмяСвойства Из ОписаниеКоллекций.ИменаСвойств Цикл
			ИмяСвойстваОснования = СоответствиеИмен[ИмяСвойства];
			Если ИмяСвойстваОснования = Неопределено Тогда
				Коллекция[ИмяСвойства] = Основание[ИмяСвойства];
			Иначе
				Коллекция[ИмяСвойства] = Основание[ИмяСвойстваОснования];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполним переменные наборы
	Для Каждого ИмяНабора Из ОписаниеКоллекций.ИменаПеременныхНаборовСумм Цикл
		Коллекция[ИмяНабора] = Основание[ИмяНабора].Скопировать();
	КонецЦикла;
	
КонецПроцедуры

// Позволяет работать со строками таблицы значений как с коллекциями сумм.
// Перед первым изменением переменного набора сумм в каждой из строк,
// следует инициализировать этот набор - см. ИнициализироватьПеременныйНаборСумм.
//
// Параметры:
//  Результат         - ТаблицаЗначений - дополняемая таблица значений (коллекция коллекций сумм).
//
//  ОписаниеКоллекции - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
//                      Таблица значений приводится к этому описанию.
//
Процедура ДополнитьТаблицуЗначенийКолонкамиСумм(Результат, ОписаниеКоллекции) Экспорт
	
	Для Каждого ИмяСвойства Из ОписаниеКоллекции.ИменаСвойств Цикл
		Результат.Колонки.Добавить(ИмяСвойства, ТипСумма());
	КонецЦикла;
	
	Для Каждого ИмяНабора Из ОписаниеКоллекции.ИменаПеременныхНаборовСумм Цикл
		// При первом обращении на изменение следует инициализировать 
		// - см. ИнициализироватьПеременныйНаборСумм.
		Результат.Колонки.Добавить(ИмяНабора, Новый ОписаниеТипов("ТаблицаЗначений"));
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПеременныйНаборСумм()
	
	КоллекцияСумм = Новый ТаблицаЗначений;
	КоллекцияСумм.Колонки.Добавить("Индекс", ТипИдентификатораВершины());
	КоллекцияСумм.Колонки.Добавить("Сумма",  ТипСумма());
	КоллекцияСумм.Индексы.Добавить("Индекс");
	Возврат КоллекцияСумм;
	
КонецФункции

// Позволяет изменять переменный набор сумм, входящий в коллекцию, 
// созданную без использования конструктора НовыйКоллекцияСумм().
//
// Параметры:
//  Коллекция - Заполняемая коллекция - должна включать переменный набор сумм с именем ИмяНабора.
//
//  ИмяНабора - Строка - имя инициализируемого набора
//
// Возвращаемое значение:
//  ТаблицаЗначений - переменный набор сумм.
//
Функция ИнициализироватьПеременныйНаборСумм(Коллекция, ИмяНабора) Экспорт
	
	НаборСумм = Коллекция[ИмяНабора];
	Если НаборСумм.Колонки.Количество() = 0 Тогда
		Коллекция[ИмяНабора] = НовыйПеременныйНаборСумм();
	КонецЕсли;
	
	Возврат Коллекция[ИмяНабора];
	
КонецФункции

Функция ТипСумма()
	
	Возврат ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	
КонецФункции

Функция ТипИдентификатораВершины()
	
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(10, 0);
	
КонецФункции

#КонецОбласти

#Область ОперацииНадКоллекциями

// Прибавляет к каждой из сумм, входящей в коллекцию А, соответствующую сумму, входящую в коллекцию Б.
// 
// Параметры:
//  КоллекцияА        - первое слагаемое, модифицируемая коллекция, должна соответствовать ОписаниеКоллекций.
//
//  КоллекцияБ        - второе слагаемое, не изменяется, должна соответствовать ОписаниеКоллекций.
//
//  ОписаниеКоллекций - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
// 
Процедура Сложить(КоллекцияА, КоллекцияБ, ОписаниеКоллекций) Экспорт
	
	Для Каждого ИмяСвойства Из ОписаниеКоллекций.ИменаСвойств Цикл
		
		ЗначениеБ = КоллекцияБ[ИмяСвойства];
		Если ЗначениеБ <> 0 Тогда
			КоллекцияА[ИмяСвойства] = КоллекцияА[ИмяСвойства] + ЗначениеБ;
		КонецЕсли;
					
	КонецЦикла;
	
	Для Каждого ИмяНабора Из ОписаниеКоллекций.ИменаПеременныхНаборовСумм Цикл
				
		НаборСуммБ = КоллекцияБ[ИмяНабора];
		
		Если НаборСуммБ.Количество() > 0 Тогда
			
			НаборСуммА = ИнициализироватьПеременныйНаборСумм(КоллекцияА, ИмяНабора);
			
			Для Каждого СтрокаБ Из НаборСуммБ Цикл
				СтрокаА = НаборСуммА.Добавить();
				СтрокаА.Индекс = СтрокаБ.Индекс;
				СтрокаА.Сумма  = СтрокаБ.Сумма;
			КонецЦикла;
			
			НаборСуммА.Свернуть("Индекс", "Сумма");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вычитает из каждой из сумм, входящей в коллекцию А, соответствующую сумму, входящую в коллекцию Б.
// 
// Параметры:
//  КоллекцияА        - уменьшаемое, модифицируемая коллекция, должна соответствовать ОписаниеКоллекций.
//
//  КоллекцияБ        - вычитаемое, не изменяется, должна соответствовать ОписаниеКоллекций.
//
//  ОписаниеКоллекций - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
// 
Процедура Вычесть(КоллекцияА, КоллекцияБ, ОписаниеКоллекций) Экспорт
	
	Для Каждого ИмяСвойства Из ОписаниеКоллекций.ИменаСвойств Цикл
		
		ЗначениеБ = КоллекцияБ[ИмяСвойства];
		Если ЗначениеБ <> 0 Тогда
			КоллекцияА[ИмяСвойства] = КоллекцияА[ИмяСвойства] - ЗначениеБ;
		КонецЕсли;
					
	КонецЦикла;
	
	Для Каждого ИмяНабора Из ОписаниеКоллекций.ИменаПеременныхНаборовСумм Цикл
				
		НаборСуммБ = КоллекцияБ[ИмяНабора];
		
		Если НаборСуммБ.Количество() > 0 Тогда
			
			НаборСуммА = ИнициализироватьПеременныйНаборСумм(КоллекцияА, ИмяНабора);
			
			Для Каждого СтрокаБ Из НаборСуммБ Цикл
				СтрокаА = НаборСуммА.Добавить();
				СтрокаА.Индекс = СтрокаБ.Индекс;
				СтрокаА.Сумма  = - СтрокаБ.Сумма;
			КонецЦикла;
			
			НаборСуммА.Свернуть("Индекс", "Сумма");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет коллекцию сумм на тривиальность.
// 
// Параметры:
//  Коллекция - проверяемая коллекция сумм, должна соответствовать ОписаниеКоллекции.
//
//  ОписаниеКоллекции - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
//
// Возвращаемое значение:
//  Булево - Истина, если все суммы в коллекции не заполнены (равны нулю).
// 
Функция Пустая(Коллекция, ОписаниеКоллекции) Экспорт
	
	Для Каждого ИмяСвойства Из ОписаниеКоллекции.ИменаСвойств Цикл
		
		Если ЗначениеЗаполнено(Коллекция[ИмяСвойства]) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяНабора Из ОписаниеКоллекции.ИменаПеременныхНаборовСумм Цикл
		
		Для Каждого ЭлементНабораСумм Из Коллекция[ИмяНабора] Цикл
			
			Если ЗначениеЗаполнено(ЭлементНабораСумм.Сумма) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

// Обеспечивает, что все суммы фиксированных наборов коллекции Суммы 
// будут меньше или равны соответствующим суммам в коллекции Ограничения.
//
// Параметры:
//  Суммы        - контролируемая (модифицируемая) коллекция, должна соответствовать ОписаниеКоллекций.
//
//  Ограничения  - не изменяется, должна соответствовать ОписаниеКоллекций
//
//  ОписаниеКоллекций - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
// 
Процедура Ограничить(Суммы, Ограничения, ОписаниеКоллекций) Экспорт
	
	// Не умеет работать с переменными наборами
	
	Для Каждого ИмяСвойства Из ОписаниеКоллекций.ИменаСвойств Цикл
		
		Сумма       = Суммы[ИмяСвойства];
		Ограничение = Макс(0, Ограничения[ИмяСвойства]);
		
		Если Ограничение > Сумма Тогда
			// В пределах
			Продолжить;
		КонецЕсли;
		
		Суммы[ИмяСвойства] = Ограничение;
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает долю для каждого элемента коллекции сумм.
// Результат помещает в новую коллекцию.
//
// Параметры:
//  Коллекция         - коллекция сумм, доли которых надо рассчитать; должна соответствовать ОписаниеКоллекций.
//
//  ОписаниеКоллекции - описание, сконструированное функцией НовыйОписаниеКоллекцииСумм().
//
//  Числитель         - Число
//
//  Знаменатель       - Число
//
// Возвращаемое значение:
//  Коллекция, сконструированная функцией НовыйКоллекцияСумм(), содержит доли от переданных сумм.
// 
Функция Доля(Коллекция, ОписаниеКоллекции, Числитель, Знаменатель) Экспорт
	
 	Результат = НовыйКоллекцияСумм(ОписаниеКоллекции);
	
	Если Числитель = Знаменатель Или Знаменатель = 0 Тогда
		
		Заполнить(Результат, Коллекция, ОписаниеКоллекции);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Для Каждого ИмяСвойства Из ОписаниеКоллекции.ИменаСвойств Цикл
		Результат[ИмяСвойства] = ДоляСуммы(Коллекция[ИмяСвойства], Числитель, Знаменатель);
	КонецЦикла;
	
	Для Каждого ИмяНабора Из ОписаниеКоллекции.ИменаПеременныхНаборовСумм Цикл
		НаборСумм = ИнициализироватьПеременныйНаборСумм(Результат, ИмяНабора);
		Для Каждого ЭлементНабораСумм Из Коллекция[ИмяНабора] Цикл
			ДобавитьВПеременныйНаборСумм(НаборСумм, ЭлементНабораСумм.Индекс, ЭлементНабораСумм.Сумма);
		КонецЦикла;
	КонецЦикла;
			
	Возврат Результат;
	
КонецФункции

Функция ДоляСуммы(Знач Сумма, Знач Числитель, Знач Знаменатель) Экспорт
	
	Если Числитель = Знаменатель Или Знаменатель = 0 Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Цена  = Сумма / Знаменатель;
	Возврат Окр(Цена * Числитель, 2);
	
КонецФункции

Функция ЭлементПеременногоНабораСумм(Коллекция, ИмяНабора, Индекс) Экспорт
	
	НаборСумм = ИнициализироватьПеременныйНаборСумм(Коллекция, ИмяНабора);
	
	Элемент = НаборСумм.Найти(Индекс, "Индекс");
	
	Если Элемент = Неопределено Тогда
		Элемент = НаборСумм.Добавить();
		Элемент.Индекс = Индекс;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьВПеременныйНаборСумм(НаборСумм, Индекс, Сумма) Экспорт
	
	// Допускается использовать только для первоначального заполнения коллекции уникальными значениями
	// Перед использованием следует инициализировать переменный набор.
	НоваяСтрока = НаборСумм.Добавить();
	НоваяСтрока.Индекс = Индекс;
	НоваяСтрока.Сумма  = Сумма;
	
КонецФункции

Функция ИтогПеременногоНабораСумм(Коллекция, ИмяНабора) Экспорт
	
	НаборСумм = Коллекция[ИмяНабора];
	Если НаборСумм.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат НаборСумм.Итог("Сумма");
	
КонецФункции

#КонецОбласти
