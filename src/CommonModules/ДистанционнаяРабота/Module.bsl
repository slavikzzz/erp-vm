////////////////////////////////////////////////////////////////////////////////
// Подсистема "Дистанционная работа"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//										общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.56";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ДистанционнаяРабота.ЗаполнитьДистанционнуюРаботуСотрудников";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d3e990e9-e111-494e-9b49-5622b9e0a2e8");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение дистанционной работы сотрудников.';
									|en = 'Fill remote work of employees.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.57";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("691ba19b-7d92-4671-b8c0-74a51e05f7ce");
	Обработчик.Процедура = "ДистанционнаяРабота.ВключитьИспользованиеДистанционнойРаботы";
	Обработчик.Комментарий = НСтр("ru = 'Включение константы Использовать дистанционную работу.';
									|en = 'Enable the Use remote work constant.'");
	
КонецПроцедуры

Процедура ЗаполнитьДистанционнуюРаботуСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДистанционнаяРаботаСотрудников.Регистратор
		|ИЗ
		|	РегистрСведений.ДистанционнаяРаботаСотрудников КАК ДистанционнаяРаботаСотрудников";
	
	РезультатЗапроса = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
	
	РезультатЗапроса = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ЭтоГоловнойСотрудник", "=", Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидДоговора", "В", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровКромеВоеннойСлужбы());
	
	ВидыСобытий = Новый Массив;
	ВидыСобытий.Добавить(Перечисления.ВидыКадровыхСобытий.Прием);
	ВидыСобытий.Добавить(Перечисления.ВидыКадровыхСобытий.НачальныеДанные);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "В", ВидыСобытий);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя,
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды", "ФизическоеЛицо"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.РегистраторЗаписи КАК Регистратор,
		|	КадроваяИсторияСотрудников.Период КАК Период
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников";
	
	РезультатЗапроса = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОписаниеБлокировки = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОписаниеБлокируемыхДанных(Метаданные.РегистрыСведений.ДистанционнаяРаботаСотрудников);
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		ОписаниеБлокировки.ПоляБлокировки.Регистратор = Выборка.Регистратор;
		Если ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
			Набор = РегистрыСведений.ДистанционнаяРаботаСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Если Не ЗначениеЗаполнено(Набор.Отбор.Регистратор.Значение) Тогда
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				Продолжить;
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				Если Не (ЗначениеЗаполнено(Выборка.Сотрудник) И ЗначениеЗаполнено(Выборка.ГоловнаяОрганизация) И ЗначениеЗаполнено(Выборка.ФизическоеЛицо)) Тогда
					Продолжить;
				КонецЕсли;
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, , , Истина);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПереносДанных") Тогда
				ОписаниеБлокировкиПереносаДанных = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОписаниеБлокируемыхДанных(
					Метаданные.Документы.ПереносДанных);
				ОписаниеБлокировкиПереносаДанных.ПоляБлокировки.Ссылка = Выборка.Регистратор;
				Если ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.НачатьОбновлениеДанных(ОписаниеБлокировкиПереносаДанных, ПараметрыОбновления) Тогда
					ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
					НовыйРегистр = ДокументОбъект.ТаблицаРегистров.Добавить();
					НовыйРегистр.Имя = "ДистанционнаяРаботаСотрудников";
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
					ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьИспользованиеДистанционнойРаботы(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Если ИспользуетсяДистанционнаяРабота() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДистанционнаяРаботаСотрудников.Регистратор
		|ИЗ
		|	РегистрСведений.ДистанционнаяРаботаСотрудников КАК ДистанционнаяРаботаСотрудников
		|ГДЕ
		|	ДистанционнаяРаботаСотрудников.РаботаетДистанционно";
	
	РезультатЗапроса = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	Если Не ОбновлениеИБ.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Константа.ИспользоватьДистанционнуюРаботу", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		МенеджерКонстанты = Константы.ИспользоватьДистанционнуюРаботу.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЕсли;
	
	ОбновлениеИБ.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	// Метаданные.РегистрыСведений.ДистанционнаяРаботаСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ДистанционнаяРаботаСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ДистанционнаяРаботаСотрудниковИнтервальный;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеДанныеПослеСозданияНовогоУзла(ПараметрыОбновления) Экспорт
	
	РегистрыСведений.ДистанционнаяРаботаСотрудников.ЗаполнитьИнтервальныйРегистр(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьДокументов

Процедура ДобавитьКомандыПечатиПереводаНаДистанционнуюРаботу(КомандыПечати, ЭтоКадровыйПеревод = Ложь, ИдентификаторыПФ = Неопределено) Экспорт
	
	Если Не ИспользуетсяДистанционнаяРабота() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоКадровыйПеревод Тогда
		ДобавитьКомандуПечатиДопСоглашенияКТрудовомуДоговоруПриПереводеНаДистанционнуюРаботу(КомандыПечати, ИдентификаторыПФ);
	КонецЕсли;
	
	ДобавитьКомандуПечатиЗаявленияОПереводеНаДистанционнуюРаботу(КомандыПечати, ЭтоКадровыйПеревод, ИдентификаторыПФ);
	
КонецПроцедуры

Процедура ДобавитьУсловиеВидимостиКоманды(КомандаПечати, ЗначениеУсловия, ИмяУсловия = "РаботаетДистанционно") Экспорт
	
	Если ИмяУсловия = "РаботаетДистанционно" И ЗначениеУсловия = Истина Тогда
		КомандаПечати.ФункциональныеОпции = "ИспользоватьДистанционнуюРаботу";
	КонецЕсли;
	
	Если Не ИспользуетсяДистанционнаяРабота() Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, ИмяУсловия, ЗначениеУсловия);
	
КонецПроцедуры

#КонецОбласти

#Область РассылкаДокументов

Процедура ДобавитьКомандыРассылки(Команды) Экспорт
	
	Если Не ИспользуетсяДистанционнаяРабота() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКомандуРассылкиДокументовПриПереводеНаДистанционнуюРаботу(Команды, "ПриемНаРаботу");
	ДобавитьКомандуРассылкиДокументовПриПереводеНаДистанционнуюРаботу(Команды, "ПриемНаРаботуСписком");
	ДобавитьКомандуРассылкиДокументовПриПереводеНаДистанционнуюРаботу(Команды, "КадровыйПеревод", Истина);
	ДобавитьКомандуРассылкиДокументовПриПереводеНаДистанционнуюРаботу(Команды, "КадровыйПереводСписком", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонстантамиИФункциональнымиОпциями

Функция ИспользуетсяДистанционнаяРабота() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьДистанционнуюРаботу");
КонецФункции

Процедура УстановитьИспользованиеДистанционнойРаботы(Использовать) Экспорт
	Константы.ИспользоватьДистанционнуюРаботу.Установить(Использовать);
КонецПроцедуры

#КонецОбласти

#Область КадровыеДанныеСотрудников

Функция ДобавитьПолеСведенийОДистанционнойРаботеСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОДистанционнойРаботеСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОДистанционнойРаботеСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОДистанционнойРаботеСотрудников(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОДистанционнойРаботеСотрудников(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОДистанционнойРаботеСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("РаботаетДистанционноПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("РаботаетДистанционноРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ДистанционнаяРаботаСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля) Экспорт
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РаботаетДистанционно";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЛОЖЬ";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".РаботаетДистанционно";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РаботаетДистанционноПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".РаботаетДистанционноДатаРегистрации";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВТСведенияОДистанционнойРаботеСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОДистанционнойРаботеСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОДистанционнойРаботеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОДистанционнойРаботеСотрудников КАК СведенияОДистанционнойРаботеСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОДистанционнойРаботеСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОДистанционнойРаботеСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОДистанционнойРаботеСотрудников");
	
КонецПроцедуры

Процедура ДобавитьПризнакДистанционнойРаботыВЗапросНабораДанныхПечатнойФормыТ1(ОбъектОтчета) Экспорт
	
	Для Каждого НаборДанных Из ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			Если СтрНайти(НаборДанных.Запрос, "Представления_КадровыеДанныеСотрудников") = 0 Тогда
				Продолжить;
			КонецЕсли;
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(НаборДанных.Запрос);
			
			ДобавитьПолеЗапроса(СхемаЗапроса, "Представления_КадровыеДанныеСотрудников", "ЛОЖЬ", "РаботаетДистанционно");
			
			НаборДанных.Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "НЕОПРЕДЕЛЕНО КАК РаботаетДистанционно",
				"Представления_КадровыеДанныеСотрудников.РаботаетДистанционно КАК РаботаетДистанционно");
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПризнакДистанционнойРаботыВЗапросНабораДанныхПечатнойФормыТ5(ОбъектОтчета) Экспорт
	
	Для Каждого НаборДанных Из ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			Если СтрНайти(НаборДанных.Запрос, "Представления_КадровыеДанныеСотрудников") = 0 Тогда
				Продолжить;
			КонецЕсли;
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(НаборДанных.Запрос);
			
			ПервыйЗапросПакета = СхемаЗапроса.ПакетЗапросов[0];
			Для Каждого Оператор Из ПервыйЗапросПакета.Операторы Цикл
				ПервыйИсточник = Оператор.Источники[0];
				ПсевдонимПервогоИсточника = ПервыйИсточник.Источник.Псевдоним;
				
				Если ПсевдонимПервогоИсточника = "ПеремещениеВДругоеПодразделениеСотрудники" Тогда
					Продолжить;
				КонецЕсли;
				
				ДистанционнаяРаботаСотрудников = Оператор.Источники.Добавить("РегистрСведений.ДистанционнаяРаботаСотрудников", "ДистанционнаяРаботаСотрудников");
				ДистанционнаяРаботаСотрудников.Соединения.Очистить();
				
				УсловиеСоединения = ПсевдонимПервогоИсточника + ".Ссылка = ДистанционнаяРаботаСотрудников.Регистратор";
				ПервыйИсточник.Соединения.Добавить(ДистанционнаяРаботаСотрудников.Источник.Псевдоним, УсловиеСоединения);
				УсловиеСоединения = ПсевдонимПервогоИсточника + ".Сотрудник = ДистанционнаяРаботаСотрудников.Сотрудник";
				ПервыйИсточник.Соединения.Добавить(ДистанционнаяРаботаСотрудников.Источник.Псевдоним, УсловиеСоединения);
				УсловиеСоединения = ПсевдонимПервогоИсточника + ".ДатаНачала = НАЧАЛОПЕРИОДА(ДистанционнаяРаботаСотрудников.Период, ДЕНЬ)";
				ПервыйИсточник.Соединения.Добавить(ДистанционнаяРаботаСотрудников.Источник.Псевдоним, УсловиеСоединения);
			КонецЦикла;
	
			ДобавитьПолеЗапроса(СхемаЗапроса, "Представления_КадровыеДанныеСотрудников", "ЛОЖЬ", "РаботаетДистанционно");			
			ДобавитьПолеЗапроса(СхемаЗапроса, "Представления_КадровыеДанныеСотрудников_Прежние", "ЛОЖЬ", "РаботаетДистанционно");
			
			НаборДанных.Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "ЕСТЬNULL(КадроваяИсторияСотрудников.Период, КОНЕЦПЕРИОДА(КадровыйПеревод",
				"ЕСТЬNULL(КадроваяИсторияСотрудников.Период, ЕСТЬNULL(ДистанционнаяРаботаСотрудников.Период, КОНЕЦПЕРИОДА(КадровыйПеревод");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "ДатаНачала, ДЕНЬ))", "ДатаНачала, ДЕНЬ)))");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "НЕОПРЕДЕЛЕНО КАК РаботаетДистанционно,",
				"КадровыеДанныеСотрудников.РаботаетДистанционно КАК РаботаетДистанционно,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "НЕОПРЕДЕЛЕНО КАК РаботаетДистанционноПрежняя,",
				"КадровыеДанныеСотрудниковПрежние.РаботаетДистанционно КАК РаботаетДистанционноПрежняя,");
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.ДистанционнаяРаботаСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДистанционнаяРаботаСотрудниковИнтервальный, Истина);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет") Тогда
		ОбщегоНазначения.ДобавитьПереименование(Итог,
			"3.1.28.57",
			"Подсистема.ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.ДистанционнаяРабота",
			"Подсистема.ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота");
	КонецЕсли;
	
КонецПроцедуры

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СотрудникиНаДистанционнойРаботе);
	
КонецПроцедуры

#КонецОбласти

// Заполняет наборы записей регистра ДистанционнаяРаботаСотрудников.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		ДанныеДляПроведения - Структура данных для проведения документа, в которую добавляются данные по испытательному сроку.
//
Процедура СформироватьДвиженияПоДистанционнойРаботе(Движения, ДанныеДляПроведения) Экспорт
	
	Если Не ДанныеДляПроведения.Свойство("ДистанционнаяРаботаСотрудников")
		Или Не ЗначениеЗаполнено(ДанныеДляПроведения.ДистанционнаяРаботаСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДанныхДляПроведения Из ДанныеДляПроведения.ДистанционнаяРаботаСотрудников Цикл
		СтрокаДвижений = Движения.ДистанционнаяРаботаСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаДанныхДляПроведения);
	КонецЦикла;
	
	Если Движения.ДистанционнаяРаботаСотрудников.Количество() > 0 Тогда
		Движения.ДистанционнаяРаботаСотрудников.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает таблицу для проведения документов ПриемНаРаботу/ПриемНаРаботуСписком.
//
// Параметры:
//		ДанныеДляПроведения - Структура, в которую добавляются данные по испытательному сроку.
//		ДокументСсылка - Ссылка на документ, для которого требуется подготовить таблицу для проведения.
//
//
Процедура ПриемНаРаботуСведенияОДистанционнойРаботе(ДанныеДляПроведения, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПриемНаРаботу.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриемНаРаботу.РаботаетДистанционно КАК РаботаетДистанционно
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗЛИЧНЫЕ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
	КонецЕсли;
	
	// Набор сведений для проведения по дистанционной работе сотрудников
	СведенияОДистанционнойРаботеСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДистанционнаяРаботаСотрудников", СведенияОДистанционнойРаботеСотрудников);
	
КонецПроцедуры

// Подготавливает таблицу для проведения документов КадровыйПеревод/КадровыйПереводСписком.
//
// Параметры:
//		ДанныеДляПроведения - Структура, в которую добавляются данные по испытательному сроку.
//		ДокументСсылка - Ссылка на документ, для которого требуется подготовить таблицу для проведения.
//
//
Процедура КадровыйПереводСведенияОДистанционнойРаботе(ДанныеДляПроведения, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.РаботаетДистанционно КАК РаботаетДистанционно,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо
		|ИЗ
		|	Документ.КадровыйПеревод КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка
		|	И Сотрудники.ИзменитьДистанционнуюРаботу";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗЛИЧНЫЕ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком.Сотрудники");
	КонецЕсли;
		
	// Набор сведений для проведения по дистанционной работе сотрудников
	СведенияОДистанционнойРаботеСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДистанционнаяРаботаСотрудников", СведенияОДистанционнойРаботеСотрудников);
		
КонецПроцедуры

// Подготавливает таблицу для проведения документа НачальнаяШтатнаяРасстановка.
//
// Параметры:
//		ДанныеДляПроведения - Структура, в которую добавляются данные по испытательному сроку.
//		ДокументСсылка - Ссылка на документ, для которого требуется подготовить таблицу для проведения.
//
//
Процедура НачальнаяШтатнаяРасстановкаСведенияОДистанционнойРаботе(ДанныеДляПроведения, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачальнаяШтатнаяРасстановка.Ссылка.Месяц КАК Период,
		|	НачальнаяШтатнаяРасстановка.Сотрудник КАК Сотрудник,
		|	НачальнаяШтатнаяРасстановка.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НачальнаяШтатнаяРасстановка.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЛОЖЬ КАК РаботаетДистанционно
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановка
		|ГДЕ
		|	НачальнаяШтатнаяРасстановка.Ссылка = &Ссылка";
	
	// Набор сведений для проведения по дистанционной работе сотрудников
	СведенияОДистанционнойРаботеСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДистанционнаяРаботаСотрудников", СведенияОДистанционнойРаботеСотрудников);
	
КонецПроцедуры

Процедура ПеремещениеВДругоеПодразделениеСведенияОДистанционнойРаботе(ДанныеДляПроведения, Запрос) Экспорт
	
	Если Не ИспользуетсяДистанционнаяРабота() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения КАК Период,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник КАК Сотрудник,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПеремещениеВДругоеПодразделениеСотрудники.РаботаетДистанционно КАК РаботаетДистанционно
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
		|ГДЕ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка = &Ссылка";
	
	// Набор сведений для проведения по дистанционной работе сотрудников
	СведенияОДистанционнойРаботеСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДистанционнаяРаботаСотрудников", СведенияОДистанционнойРаботеСотрудников);
	
КонецПроцедуры

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьДокументовДляПереводаНаДистанционнуюРаботу.Макеты.ПФ_MXL_ДопСоглашениеКТрудовомуДоговоруПриПереводеНаДистанционнуюРаботу,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КадровыеДанныеСотрудников

Функция ЗапросВТСведенияОДистанционнойРаботеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОДистанционнойРаботеСотрудников = "ВТСведенияОДистанционнойРаботеСотрудников")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ДистанционнаяРаботаСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ДистанционнаяРаботаСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОДистанционнойРаботеСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция НеобходимыСведенияОДистанционнойРаботеСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РаботаетДистанционноПериодРегистрации")
		Или ИмяПоля = ВРег("РаботаетДистанционноРегистратор")
		Или ИмяПоля = ВРег("РаботаетДистанционно");
		
КонецФункции

Функция ПутьКДаннымСведенийОДистанционнойРаботеСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("РаботаетДистанционноПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОДистанционнойРаботеСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РаботаетДистанционноРегистратор") Тогда
		ПутьКДанным = "	СведенияОДистанционнойРаботеСотрудников.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РаботаетДистанционно") Тогда
		ПутьКДанным = "	СведенияОДистанционнойРаботеСотрудников.РаботаетДистанционно";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

#КонецОбласти

#Область ПечатьДокументов

Процедура ДобавитьКомандуПечатиДопСоглашенияКТрудовомуДоговоруПриПереводеНаДистанционнуюРаботу(КомандыПечати, ИдентификаторыПФ = Неопределено)
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.ПечатьДокументовДляПереводаНаДистанционнуюРаботу) Тогда
		Возврат;
	КонецЕсли;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьДокументовДляПереводаНаДистанционнуюРаботу";
	КомандаПечати.Идентификатор = "ПФ_MXL_ДопСоглашениеКТрудовомуДоговоруПриПереводеНаДистанционнуюРаботу";
	КомандаПечати.Представление = НСтр("ru = 'Доп. соглашение к трудовому договору при переводе на дистанционную работу';
										|en = 'Supplement agreement to the employment contract when transferring to remote work'");
	КомандаПечати.Порядок = 120;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "Сотрудник");
	
	ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Истина);
	ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Истина, "ИзменитьДистанционнуюРаботу");
	
	Если ИдентификаторыПФ <> Неопределено Тогда
		ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьКомандуПечатиЗаявленияОПереводеНаДистанционнуюРаботу(КомандыПечати, ЭтоКадровыйПеревод, ИдентификаторыПФ = Неопределено)
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.ПечатьДокументовДляПереводаНаДистанционнуюРаботу) Тогда
		Возврат;
	КонецЕсли;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьДокументовДляПереводаНаДистанционнуюРаботу";
	КомандаПечати.Идентификатор = "ПФ_MXL_ЗаявлениеОПереводеНаДистанционнуюРаботу";
	КомандаПечати.Представление = НСтр("ru = 'Заявление о переводе на дистанционную работу';
										|en = 'Application for transfer to remote work'");
	КомандаПечати.Порядок = 130;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Истина);
	Если ЭтоКадровыйПеревод Тогда
		ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Истина, "ИзменитьДистанционнуюРаботу");
	КонецЕсли;
	
	Если ИдентификаторыПФ <> Неопределено Тогда
		ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
	КонецЕсли;     
	
КонецПроцедуры

#КонецОбласти

#Область РассылкаДокументов

Процедура ДобавитьКомандуРассылкиДокументовПриПереводеНаДистанционнуюРаботу(Команды, ИмяДокумента, ЭтоКадровыйПеревод = Ложь)
	
	Команда = Команды.Добавить();
	Команда.ТипПараметра = Новый ОписаниеТипов("ДокументСсылка." + ИмяДокумента);
	Команда.Представление = НСтр("ru = 'Рассылка документов для перевода на дистанционную работу';
								|en = 'Send documents for transfer to remote work'");
	Команда.Назначение = РассылкаДокументов.ВидыНазначенияКомандыРассылки().ДляСписка;
	Команда.РежимЗаписи = РассылкаДокументов.РежимыЗаписиОбъектаПередВыполнениемКомандыРассылки().Проводить;
	Команда.ТемаПисьма = НСтр("ru = 'Документы для перевода на дистанционную работу';
								|en = 'Documents for transfer to remote work'");
	// АПК:374-выкл. Восклицательный знак в тексте письма, а не сообщению пользователю.
	Команда.ТекстПисьма = 
		НСтр("ru = 'Добрый день!
			 |
			 |Во вложении комплект документов для оформления перевода на дистанционную работу.
			 |Пожалуйста, распечатайте его, поставьте свою подпись в обозначенных местах и пришлите нам фотографию или скан-копию в ответ на это письмо.
			 |
			 |С уважением, Администрация.';
			 |en = 'Good afternoon!
			 |
			 |Please, find the attached document set to register a transfer to remote work.
			 |Please print it, put your signature in the indicated fields and send us a photo or scanned copy in response to this letter.
			 |
			 |Best regards, Administration.'");
	// АПК:374-вкл

	Команда.ПечатныеФормы = Новый Массив;
	
	Команда.ПечатныеФормы.Вставить(0, РассылкаДокументовКлиентСервер.НоваяПечатнаяФорма());
	Команда.ПечатныеФормы[0].ОбработчикПолученияДанных =
		"Обработки.ПечатьДокументовДляПереводаНаДистанционнуюРаботу.ТаблицаДанныхПечатиЗаявленияОПереводеНаДистанционнуюРаботу";
	Команда.ПечатныеФормы[0].Идентификатор = "ПФ_MXL_ЗаявлениеОПереводеНаДистанционнуюРаботу";
	ДобавитьУсловиеВидимостиКоманды(Команда, Истина);
	
	Если Не ЭтоКадровыйПеревод Тогда
		Возврат;
	КонецЕсли;
	
	Команда.ПечатныеФормы.Вставить(1, РассылкаДокументовКлиентСервер.НоваяПечатнаяФорма());
	Команда.ПечатныеФормы[1].ОбработчикПолученияДанных =
		"Обработки.ПечатьДокументовДляПереводаНаДистанционнуюРаботу.ТаблицаДанныхПечатиДопСоглашенияПриПереводеДистанционнуюРаботу";
	Команда.ПечатныеФормы[1].Идентификатор = "ПФ_MXL_ДопСоглашениеКТрудовомуДоговоруПриПереводеНаДистанционнуюРаботу";
	ДобавитьУсловиеВидимостиКоманды(Команда, Истина, "ИзменитьДистанционнуюРаботу");
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьПолеЗапроса(Схема, ИмяВТ, ЗначениеПоля, Псевдоним)
	
	Для НомерЗапроса = 1 По Схема.ПакетЗапросов.Количество() Цикл	
		ЗапросПакета = Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество() - НомерЗапроса];
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда			
			Если ЗапросПакета.ТаблицаДляПомещения = ИмяВТ Тогда
				ЗапросПакета.Операторы[0].ВыбираемыеПоля.Добавить(ЗначениеПоля);
				ЗапросПакета.Колонки[ЗапросПакета.Колонки.Количество()-1].Псевдоним = Псевдоним;		
				Прервать;
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

