////////////////////////////////////////////////////////////////////////////////
// УправлениеШтатнымРасписанием:
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет наборы записей регистров ИсторииИспользованияШтатногоРасписания, 
// ИсторияНачисленийПоШтатномуРасписанию, ИсторияПоказателейПоШтатномуРасписанию
// по регистратору.
//
// Параметры:
//			Регистратор - ДокументОбъект
//			ДанныеПозиций - Структура, содержащая ключи с именами регистров и
//					выборками из запросов содержащих движения.
//
Процедура СформироватьДвиженияИсторииПозицийШтатногоРасписания(Регистратор, ДанныеПозиций) Экспорт
	
	ЗаполнитьНаборЗаписейИстории(
		Регистратор.Ссылка,
		Регистратор.Движения.ИсторияИспользованияШтатногоРасписания,
		ДанныеПозиций.ИсторииИспользованияШтатногоРасписания);
	
	ЗаполнитьНаборЗаписейИстории(
		Регистратор.Ссылка,
		Регистратор.Движения.ИсторияНачисленийПоШтатномуРасписанию,
		ДанныеПозиций.ИсторияНачисленийПоШтатномуРасписанию);
	
	ЗаполнитьНаборЗаписейИстории(
		Регистратор.Ссылка,
		Регистратор.Движения.ИсторияПоказателейПоШтатномуРасписанию,
		ДанныеПозиций.ИсторияПоказателейПоШтатномуРасписанию);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.СформироватьДвиженияИсторииПозицийШтатногоРасписания(Регистратор, ДанныеПозиций);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет движения видами специальностей по штатному расписанию
//		ИсторияСпециальностейПоШтатномуРасписанию.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ДатаСобытия			- дата, на которые будут сделаны движения.
//	Специальности - таблица значений с полями:
//		ДатаСобытия
//		ПозицияШтатногоРасписания
//		Специальность
//
Процедура СформироватьДвиженияСпециальностейПоШтатномуРасписанию(Движения, ДатаСобытия, Специальности) Экспорт
	
	Движения.ИсторияСпециальностейПоШтатномуРасписанию.Записывать = Истина;
	Пока Специальности.Следующий() Цикл
		НоваяСтрока = Движения.ИсторияСпециальностейПоШтатномуРасписанию.Добавить();
		НоваяСтрока.Дата						= ДатаСобытия;
		НоваяСтрока.ПозицияШтатногоРасписания	= Специальности.ПозицияШтатногоРасписания;
		НоваяСтрока.Специальность				= Специальности.Специальность;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет набор записей регистра КлассыУсловийТрудаПоДолжностям по регистратору.
//
// Параметры:
//			Организация
//			ДатаВступленияВСилу - дата, на которую будут сделаны движения.
//			Регистратор - ДокументОбъект
//			Позиции - таблица значений
//
Процедура СформироватьДвиженияКлассовУсловийТрудаПоШтатномуРасписанию(Организация, ДатаВступленияВСилу, Регистратор, Позиции) Экспорт
	
	Для каждого СтрокаПозицииОбъекта Из Позиции Цикл
			
		ДатаРегистрацииИзменений = ?(ЗначениеЗаполнено(СтрокаПозицииОбъекта.КлассУсловийТрудаДатаРегистрацииИзменений), 
			НачалоМесяца(СтрокаПозицииОбъекта.КлассУсловийТрудаДатаРегистрацииИзменений),
			НачалоМесяца(ДатаВступленияВСилу));
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Позиция", СтрокаПозицииОбъекта.Позиция);
		Запрос.УстановитьПараметр("Период", ДатаВступленияВСилу);
		Запрос.УстановитьПараметр("КлассУсловийТруда", СтрокаПозицииОбъекта.КлассУсловийТруда);
		Запрос.УстановитьПараметр("ДатаРегистрацииИзменений", ДатаРегистрацииИзменений);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда
		|ИЗ
		|	РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&Период, Должность = &Позиция) КАК КлассыУсловийТрудаПоДолжностям
		|ГДЕ
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда = &КлассУсловийТруда
		|	И КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений = &ДатаРегистрацииИзменений";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			// Данные не изменились
			Продолжить;
		КонецЕсли;
		
		ЗаписатьКлассыУсловийТруда = Истина;
		Если Не ЗначениеЗаполнено(СтрокаПозицииОбъекта.КлассУсловийТруда) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Позиция", СтрокаПозицииОбъекта.Позиция);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда
			|ИЗ
			|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
			|ГДЕ
			|	КлассыУсловийТрудаПоДолжностям.Должность = &Позиция
			|	И КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда <> ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка)";
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				ЗаписатьКлассыУсловийТруда = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		КлассыУсловийТрудаДоступныДляИзменения = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
			МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
			КлассыУсловийТрудаДоступныДляИзменения = МодульОхранаТруда.КлассыУсловийТрудаДоступныДляИзменения(Организация);
		КонецЕсли;
		Если Не КлассыУсловийТрудаДоступныДляИзменения Тогда
			ЗаписатьКлассыУсловийТруда = Ложь;
		КонецЕсли;
		
		Если ЗаписатьКлассыУсловийТруда Тогда
			НаборЗаписейКлассовУсловийТруда = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
			НаборЗаписейКлассовУсловийТруда.ДополнительныеСвойства.Вставить("ОбновитьНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда", Ложь);
			НаборЗаписейКлассовУсловийТруда.Отбор.Должность.Установить(СтрокаПозицииОбъекта.Позиция);
			НаборЗаписейКлассовУсловийТруда.Отбор.Период.Установить(ДатаВступленияВСилу);
			НоваяЗаписьНабораЗаписей = НаборЗаписейКлассовУсловийТруда.Добавить();
			НоваяЗаписьНабораЗаписей.Должность = СтрокаПозицииОбъекта.Позиция;
			НоваяЗаписьНабораЗаписей.Основание = Регистратор;
			НоваяЗаписьНабораЗаписей.КлассУсловийТруда = СтрокаПозицииОбъекта.КлассУсловийТруда;
			НоваяЗаписьНабораЗаписей.Период = ДатаВступленияВСилу;
			НоваяЗаписьНабораЗаписей.ДатаРегистрацииИзменений = ДатаРегистрацииИзменений;
			НаборЗаписейКлассовУсловийТруда.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ОтборПоОрганизациям = Новый Массив;
	ОтборПоОрганизациям.Добавить(Организация);
	УчетСтраховыхВзносов.УстановитьФункциональныеОпцииИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ОтборПоОрганизациям);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d7-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеШтатногоРасписания);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbff1-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИндексацияШтатногоРасписания);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4e2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УтверждениеШтатногоРасписания);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbff6-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ШтатноеРасписание);
	
КонецПроцедуры

#КонецОбласти

// Формирует сторно записи отменяющие движения исправленного документа по регистрам подсистемы.
//
// Параметры:
//  Движения			 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  Записывать			 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, Записывать = Ложь) Экспорт
	
	ТолькоИзолироватьНаборы = Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	ИмяУчета = "УправлениеШтатнымРасписанием";
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	Набор = Неопределено;
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		ИмяРегистра = МетаданныеРегистра.Имя;
		
		Если ДвиженияВСтруктуре Тогда 
			Движения.Свойство(ИмяРегистра, Набор);
		Иначе 
			Набор = Движения.Найти(ИмяРегистра);
		КонецЕсли;
		
		Если Набор = Неопределено Или Не ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Или ТолькоИзолироватьНаборы Тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыПостроенияВТШтатноеРасписание(Знач ДатаАктуальности = Неопределено, Знач Организация = Неопределено, Знач Подразделение = Неопределено, Знач ПозицияШтатногоРасписания = Неопределено) Экспорт
	
	ПараметрыПостроения = ОбщиеПараметрыПостроенияВТШтатноеРасписание();
	
	Если ДатаАктуальности = Неопределено Тогда
		ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПараметрыПостроения.Вставить("ДатаАктуальности", ДатаАктуальности);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Организация", "В", Организация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Подразделение", "В ИЕРАРХИИ", Подразделение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПозицияШтатногоРасписания) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "ПозицияШтатногоРасписания", "В", ПозицияШтатногоРасписания);
		
	КонецЕсли;
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра(ИмяВТФильтраПозиций, ИмяПоляПериод = "Период", ИмяПоляПозицияШтатногоРасписания = "ПозицияШтатногоРасписания") Экспорт
	
	ПараметрыПостроения = ОбщиеПараметрыПостроенияВТШтатноеРасписание();
	
	ПараметрыПостроения.Вставить("ИмяВТФильтраПозиций", ИмяВТФильтраПозиций);
	ПараметрыПостроения.Вставить("ИмяПоляПериод", ИмяПоляПериод);
	ПараметрыПостроения.Вставить("ИмяПоляПозицияШтатногоРасписания", ИмяПоляПозицияШтатногоРасписания);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция СоздатьВТШтатноеРасписание(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, Знач ИменаСведений = Неопределено, ИмяВТШтатноеРасписание = "ВТШтатноеРасписание") Экспорт
	
	Запрос = ЗапросВТШтатноеРасписание(ТолькоРазрешенные, ПараметрыПостроения, ИменаСведений, ИмяВТШтатноеРасписание);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить();
	
КонецФункции

// Включает или отключает использование штатного расписания.
//
// Параметры:
//	ИспользоватьШтатноеРасписание	- Булево
//
Процедура УстановитьИспользованиеШтатногоРасписания(ИспользоватьШтатноеРасписание = Истина) Экспорт
	
	Настройки = НастройкиШтатногоРасписания();
	Настройки.ИспользоватьШтатноеРасписание = ИспользоватьШтатноеРасписание;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Настройки);
	
	ЗаписатьНастройкиШтатногоРасписания(МенеджерЗаписи);
	
КонецПроцедуры

Функция ЗанятостьПозицийШтатногоРасписания(Позиции = Неопределено, ДатаСведений = '39991231') Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятостьПозицийШтатногоРасписанияИнтервальный.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	СУММА(ЗанятостьПозицийШтатногоРасписанияИнтервальный.КоличествоСтавок) КАК КоличествоСтавок
		|ИЗ
		|	РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозицийШтатногоРасписанияИнтервальный
		|ГДЕ
		|	&ДатаСведений МЕЖДУ ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДатаНачала И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДатаОкончания
		|	И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|	И &ДополнительныйОтбор
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗанятостьПозицийШтатногоРасписанияИнтервальный.ПозицияШтатногоРасписания";
	
	Если Позиции <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("Позиции", Позиции);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДополнительныйОтбор",
			"И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ПозицияШтатногоРасписания В (&Позиции)");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДополнительныйОтбор", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ПроверитьВозможностьПроведенияВременногоОсвобожденияСтавок(СсылкаНаДокумент, Проведен, Сотрудники, ДатаНачала, ДатаОкончания, Отказ, ИсправленныйДокумент, ИменаРеквизитов = "Сотрудник,ДатаНачала,ДатаОкончания") Экспорт
	
	Если Не ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		СотрудникиПериоды = КадровыйУчетРасширенный.ТаблицаЗначенийСотрудникиПериоды(Сотрудники, ДатаНачала, ДатаОкончания);
		ПроверитьВозможностьПроведенияВременногоОсвобожденияСтавокПоТаблицеЗначений(СсылкаНаДокумент, Проведен, СотрудникиПериоды, Отказ, ИсправленныйДокумент, ИменаРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьОтменыПроведения(СсылкаНаДокумент, Сотрудники, ДатаНачала, ДатаОкончания, Отказ) Экспорт
	
	Если Не ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		СотрудникиПериоды = КадровыйУчетРасширенный.ТаблицаЗначенийСотрудникиПериоды(Сотрудники, ДатаНачала, ДатаОкончания);
		ПроверитьВозможностьОтменыПроведенияПоТаблицеЗначений(СсылкаНаДокумент, СотрудникиПериоды, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Создает позиции штатного расписания в ИБ в которых оно не ведется, но
// используется сервис 1С: Кабинет сотрудника
//
Процедура СоздатьПозицииОрганизации(Организация) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьСтруктуруШтатногоРасписания = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация = Организация;
	ПараметрыПолучения.НачалоПериода = ТекущаяДатаСеанса();
	ПараметрыПолучения.ОкончаниеПериода = ПараметрыПолучения.НачалоПериода;
	ПараметрыПолучения.КадровыеДанные = "Подразделение,Должность";
	ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ПараметрыПолучения,
		"ВТСотрудникиОрганизацииДляСозданияПозиций");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.Подразделение КАК Подразделение,
		|	СотрудникиОрганизации.Должность КАК Должность,
		|	ШтатноеРасписание.Ссылка КАК Позиция
		|ИЗ
		|	ВТСотрудникиОрганизацииДляСозданияПозиций КАК СотрудникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО СотрудникиОрганизации.Подразделение = ШтатноеРасписание.Подразделение
		|			И СотрудникиОрганизации.Должность = ШтатноеРасписание.Должность
		|ГДЕ
		|	ЕСТЬNULL(СотрудникиОрганизации.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И ЕСТЬNULL(СотрудникиОрганизации.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|	И ЕСТЬNULL(ШтатноеРасписание.Утверждена, ЛОЖЬ) = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ОбновитьСтруктуруШтатногоРасписания = Истина;
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Позиция) Тогда
				ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
			Иначе
				
				ПозицияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
				
				ПозицияОбъект.Владелец = Организация;
				ЗаполнитьЗначенияСвойств(ПозицияОбъект, Выборка);
				
				ДополнительныеПараметры = Новый Структура("ПолноеНаименованиеДолжности, ПолноеНаименованиеПодразделения", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияОбъект.Должность, "НаименованиеДляЗаписейОТрудовойДеятельности"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияОбъект.Подразделение, "НаименованиеДляЗаписейОТрудовойДеятельности"));
				НаименованиеПозиции = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
					ПозицияОбъект.Подразделение, ПозицияОбъект.Должность, ДополнительныеПараметры);
				ПозицияОбъект.Наименование = НаименованиеПозиции.Наименование;
				ПозицияОбъект.НаименованиеПолное = НаименованиеПозиции.НаименованиеПолное;
				
			КонецЕсли;
			
			ПозицияОбъект.Утверждена = Истина;
			ПозицияОбъект.ДатаУтверждения = ТекущаяДатаСеанса();
			
			ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
			ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
			ОтключитьОбновлениеНастройкиПубликации(ПозицияОбъект);
			
			ПозицияОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтатноеРасписание.Ссылка КАК Позиция
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизацииДляСозданияПозиций КАК СотрудникиОрганизации
		|		ПО ШтатноеРасписание.Подразделение = СотрудникиОрганизации.Подразделение
		|			И ШтатноеРасписание.Должность = СотрудникиОрганизации.Должность
		|ГДЕ
		|	НЕ ШтатноеРасписание.ГруппаПозицийПодразделения
		|	И ШтатноеРасписание.Утверждена
		|	И СотрудникиОрганизации.Должность ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ОбновитьСтруктуруШтатногоРасписания = Истина;
		Пока Выборка.Следующий() Цикл
			
			ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
			
			ПозицияОбъект.Утверждена = Ложь;
			ПозицияОбъект.ДатаУтверждения = '00010101';
			
			ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
			ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
			ОтключитьОбновлениеНастройкиПубликации(ПозицияОбъект);
			
			ПозицияОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбновитьСтруктуруШтатногоРасписания Тогда
		
		// Обновление структуры справочника ШтатноеРасписание.
		Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписания();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запросы по начислениям позиций штатного расписания.

Процедура СоздатьВТНачисленияШтатногоРасписания(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, ИмяВТНачисленияПозицийШтатногоРасписания = "ВТНачисленияПозицийШтатногоРасписания") Экспорт
	
	Запрос = ЗапросВТНачисленияШтатногоРасписания(ТолькоРазрешенные, ПараметрыПостроения, ИмяВТНачисленияПозицийШтатногоРасписания);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ФорматКоличестваСтавок() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРаботуНаНеполнуюСтавку") Тогда
		Возврат "ЧДЦ=2";
	Иначе
		Возврат "ЧДЦ=0";
	КонецЕсли;
	
КонецФункции

Функция РезультатЗаполненияПоТекущейКадровойРасстановке(ПараметрыВыполнения) Экспорт
	
	Позиции = ПараметрыВыполнения.Позиции; 
	Начисления = ПараметрыВыполнения.Начисления; 
	Показатели = ПараметрыВыполнения.Показатели;
	ЕжегодныеОтпуска = ПараметрыВыполнения.ЕжегодныеОтпуска;
	Специальности = ПараметрыВыполнения.Специальности;
		
	Если Показатели.Колонки.Найти("ИдентификаторСтрокиПозиции") = Неопределено Тогда
		
		Показатели.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
		СоответствиеИдентификаторов = Новый Соответствие;
		
		Для каждого СтрокаПоказателя Из Показатели Цикл
			
			ИдентификаторСтрокиВидаРасчета = СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета;
			
			ИдентификаторСтрокиПозиции = СоответствиеИдентификаторов.Получить(ИдентификаторСтрокиВидаРасчета);
			Если ИдентификаторСтрокиПозиции = Неопределено Тогда
				
				НайденныеСтроки = Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", ИдентификаторСтрокиВидаРасчета));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИдентификаторСтрокиПозиции = НайденныеСтроки[0].ИдентификаторСтрокиПозиции;
					СоответствиеИдентификаторов.Вставить(ИдентификаторСтрокиВидаРасчета, ИдентификаторСтрокиПозиции);
				КонецЕсли; 
			
			КонецЕсли; 
			
			Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
				СтрокаПоказателя.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КолонкаНомерСтроки = Позиции.Колонки.Найти("LineNumber");
	Если КолонкаНомерСтроки <> Неопределено Тогда
		КолонкаНомерСтроки.Имя = "НомерСтроки";
	КонецЕсли; 
	
	СтандартнаяОбработка = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
		МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
		РезультатЗапросаПоДаннымЗаполнения = МодульКадровоеПланирование.ЗапросПоОтклонениюШтатногоРасписания(
			ПараметрыВыполнения, Позиции.Скопировать(), СтандартнаяОбработка);
	КонецЕсли;
	Если СтандартнаяОбработка Тогда
		РезультатЗапросаПоДаннымЗаполнения = СформироватьЗапросПоОтклонениюШтатногоРасписания(
			ПараметрыВыполнения.Организация,
			ПараметрыВыполнения.ДатаВступленияВСилу,
			Позиции.Скопировать(),
			ПараметрыВыполнения.Подразделение);
	КонецЕсли;
	ДанныеЗаполнения = РезультатЗапросаПоДаннымЗаполнения.Выбрать(); 
	
	МассивСтрокДляЗаполненияНачислений = Новый Массив;
	ИзмененныеПозиции = Новый Массив;
	
	ИдентификаторСтрокиПозицииМакс = МаксимальныйИдентификаторСтроки(Позиции, "ИдентификаторСтрокиПозиции");
	Пока ДанныеЗаполнения.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Позиция) Тогда
			СтруктураПоиска.Вставить("Позиция", ДанныеЗаполнения.Позиция);
		Иначе
			СтруктураПоиска.Вставить("Подразделение", ДанныеЗаполнения.Подразделение);
			СтруктураПоиска.Вставить("Должность", ДанныеЗаполнения.Должность);
		КонецЕсли;
		
		НайденныеСтроки = Позиции.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаПозиция = Позиции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПозиция, ДанныеЗаполнения);
			
			Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Позиция) Тогда
				СтрокаПозиция.Действие = Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию;
			Иначе
				ИзмененныеПозиции.Добавить(ДанныеЗаполнения.Позиция);
			КонецЕсли; 
			
			ИдентификаторСтрокиПозицииМакс = ИдентификаторСтрокиПозицииМакс + 1;
			СтрокаПозиция.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозицииМакс;
			
			МассивСтрокДляЗаполненияНачислений.Добавить(СтрокаПозиция);
			
		Иначе
			СтрокаПозиция = НайденныеСтроки[0];
			СтрокаПозиция.КоличествоСтавок = ДанныеЗаполнения.КоличествоСтавок;
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
				МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
				МодульКадровоеПланирование.ЗаполнитьПозициюКадровогоПлана(СтрокаПозиция, ДанныеЗаполнения, СтандартнаяОбработка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ИдентификаторСтрокиВидаРасчетаМакс = МаксимальныйИдентификаторСтроки(Начисления, "ИдентификаторСтрокиВидаРасчета");
	Если МассивСтрокДляЗаполненияНачислений.Количество() > 0 Тогда
		
		ДанныеДляПолученияКадровыхДанных = Позиции.Скопировать(МассивСтрокДляЗаполненияНачислений, "Подразделение,Должность,ИдентификаторСтрокиПозиции");
		ТекущиеДанныеПозиций = ТекущиеКадровыеДанныеПозиций(ПараметрыВыполнения.Организация, ДанныеДляПолученияКадровыхДанных, ПараметрыВыполнения.ДатаВступленияВСилу);
		ДанныеИзмененныхПозиций = ДанныеПозицийШтатногоРасписания(Истина, ИзмененныеПозиции, ПараметрыВыполнения.ДатаВступленияВСилу);
		
		Для каждого СтрокаДляЗаполнения Из МассивСтрокДляЗаполненияНачислений Цикл
			
			Если ЗначениеЗаполнено(СтрокаДляЗаполнения.Позиция) И СтрокаДляЗаполнения.Позиция.Утверждена Тогда
				ДанныеПоСтроке = ДанныеИзмененныхПозиций.Получить(СтрокаДляЗаполнения.Позиция);
			Иначе
				ДанныеПоСтроке = ТекущиеДанныеПозиций.Получить(СтрокаДляЗаполнения.ИдентификаторСтрокиПозиции);
			КонецЕсли;
			
			СтруктураОтбораНачислений = Новый Структура("ИдентификаторСтрокиПозиции", ИдентификаторСтрокиПозиции);
			СтрокиНачислений = Начисления.НайтиСтроки(СтруктураОтбораНачислений);
			Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
				
				СтруктураОтбораПоказателей = Новый Структура("ИдентификаторСтрокиПозиции,ИдентификаторСтрокиВидаРасчета",
					ИдентификаторСтрокиПозиции, СтрокаНачислений.ИдентификаторСтрокиВидаРасчета);
				
				СтрокиПоказателей = Показатели.НайтиСтроки(СтруктураОтбораПоказателей);
				Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
					Показатели.Удалить(СтрокаПоказателей);
				КонецЦикла;
				
				Начисления.Удалить(СтрокаНачислений);
				
			КонецЦикла;
			
			Если ДанныеПоСтроке <> Неопределено Тогда
				
				Для каждого ДанныеНачисления Из ДанныеПоСтроке.Начисления Цикл
					
					ИдентификаторСтрокиВидаРасчетаМакс = ИдентификаторСтрокиВидаРасчетаМакс + 1;
					
					СтрокаНачислений = Начисления.Добавить();
					СтрокаНачислений.Начисление = ДанныеНачисления.Начисление;
					СтрокаНачислений.ИдентификаторСтрокиПозиции = СтрокаДляЗаполнения.ИдентификаторСтрокиПозиции;
					СтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчетаМакс;
					СтрокаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
					
					Для каждого ДанныеПоказателя Из ДанныеНачисления.Показатели Цикл
						
						Если ЗначениеЗаполнено(ДанныеПоказателя.Показатель) Тогда
							
							СтрокаПоказателей = Показатели.Добавить();
							СтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчетаМакс;
							СтрокаПоказателей.ИдентификаторСтрокиПозиции = СтрокаНачислений.ИдентификаторСтрокиПозиции;
							СтрокаПоказателей.Показатель = ДанныеПоказателя.Показатель;
							
							Если ДанныеПоказателя.Свойство("Значение") Тогда
								СтрокаПоказателей.Значение = ДанныеПоказателя.Значение;
							КонецЕсли;
							
							Если ДанныеПоказателя.Свойство("МинимальноеЗначение") Тогда
								СтрокаПоказателей.ЗначениеМин = ДанныеПоказателя.МинимальноеЗначение;
							КонецЕсли;
							
							Если ДанныеПоказателя.Свойство("МаксимальноеЗначение") Тогда
								СтрокаПоказателей.ЗначениеМакс = ДанныеПоказателя.МаксимальноеЗначение;
							КонецЕсли;
						
							Если ДанныеПоказателя.Свойство("ЗначениеМин") Тогда
								СтрокаПоказателей.ЗначениеМин = ДанныеПоказателя.ЗначениеМин;
							КонецЕсли;
							
							Если ДанныеПоказателя.Свойство("ЗначениеМакс") Тогда
								СтрокаПоказателей.ЗначениеМакс = ДанныеПоказателя.ЗначениеМакс;
							КонецЕсли;
							
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого ДанныеПоОтпускам Из ДанныеПоСтроке.ЕжегодныеОтпуска Цикл
					
					СтрокаОтпусков = ЕжегодныеОтпуска.Добавить();
					СтрокаОтпусков.ИдентификаторСтрокиПозиции = СтрокаДляЗаполнения.ИдентификаторСтрокиПозиции;
					ЗаполнитьЗначенияСвойств(СтрокаОтпусков, ДанныеПоОтпускам);
					
					СтрокаОтпусков.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить;
					
				КонецЦикла;
				
				Для каждого ДанныеПоСпециальностям Из ДанныеПоСтроке.Специальности Цикл
					
					СтрокаСпециальности = Специальности.Добавить();
					СтрокаСпециальности.ИдентификаторСтрокиПозиции = СтрокаДляЗаполнения.ИдентификаторСтрокиПозиции;
					ЗаполнитьЗначенияСвойств(СтрокаСпециальности, ДанныеПоСпециальностям);
					
				КонецЦикла;
		
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	УпорядочитьСписокПозиций(Позиции);
	
	РезультатСозданияПозиций = Новый Структура("Организация,ДатаВступленияВСилу");
	ЗаполнитьЗначенияСвойств(РезультатСозданияПозиций, ПараметрыВыполнения);
	
	РезультатСозданияПозиций.Вставить("Позиции", Позиции);
	РезультатСозданияПозиций.Вставить("Начисления", Начисления);
	РезультатСозданияПозиций.Вставить("Показатели", Показатели);
	РезультатСозданияПозиций.Вставить("ЕжегодныеОтпуска", ЕжегодныеОтпуска);
	РезультатСозданияПозиций.Вставить("Специальности", Специальности);
	
	РассчитатьФОТНесколькихПозиций(РезультатСозданияПозиций);

	Возврат РезультатСозданияПозиций;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запросы к позициям штатного расписания.

Процедура СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, Знач ИменаСведений = Неопределено, ИмяВТПозицииШтатногоРасписания = "ВТПозицииШтатногоРасписания") Экспорт
	
	Запрос = ЗапросВТШтатноеРасписание(ТолькоРазрешенные, ПараметрыПостроения, ИменаСведений, ИмяВТПозицииШтатногоРасписания);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТШтатноеРасписание(ТолькоРазрешенные, ПараметрыПостроения, Знач ИменаСведений = Неопределено, Знач ИмяВТШтатноеРасписание = "ВТШтатноеРасписание") Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыПостроения.Свойство("ИмяВТФильтраПозиций") Тогда
		
		ПостроениеПоТаблицеФильтра = Истина;
		
	Иначе
		
		ПостроениеПоТаблицеФильтра = Ложь;
		Если ТипЗнч(ПараметрыПостроения.ДатаАктуальности) <> Тип("Строка")
			Или Лев(ПараметрыПостроения.ДатаАктуальности, 1) <> "&" Тогда
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ПараметрыПостроения.ДатаАктуальности);
			
			Если ЗначениеЗаполнено(ПараметрыПостроения.ДатаАктуальности) Тогда
				Запрос.УстановитьПараметр("ОтборПоДатеАктуальности", ПараметрыПостроения.ДатаАктуальности);
			Иначе
				Запрос.УстановитьПараметр("ОтборПоДатеАктуальности", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеИсточников = ОписаниеИсточниковСведенийОШтатномРасписании(ПостроениеПоТаблицеФильтра);
	
	Если ИменаСведений = Неопределено Тогда
		
		Сведения = Новый Массив;
		Для Каждого ОписаниеИсточника Из ОписаниеИсточников.ИсточникиДанных Цикл
			
			Для Каждого ОписаниеСведений Из ОписаниеИсточника.Значение.ДанныеПозиции Цикл
				Сведения.Добавить(ОписаниеСведений.Значение.Имя);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИменаСведений) = Тип("Строка") Тогда
		
		Если ПустаяСтрока(ИменаСведений) Тогда
			Сведения = Новый Массив;
		Иначе
			Сведения = СтрРазделить(ИменаСведений, ",");
		КонецЕсли;
		
	Иначе
		Сведения = ИменаСведений;
	КонецЕсли;
	
	Если ПараметрыПостроения.Отборы.Количество() > 0 Тогда
		
		НеобходимыеСведения = ОбщегоНазначения.СкопироватьРекурсивно(Сведения);
		ИндексыИсключаемыхОтборов = Новый Массив;
		
		Для ИндексОтбора = 0 По ПараметрыПостроения.Отборы.Количество() - 1 Цикл
			
			ОписаниеОтбора = ПараметрыПостроения.Отборы[ИндексОтбора];
			Если НеобходимыеСведения.Найти(ОписаниеОтбора.ЛевоеЗначение) = Неопределено Тогда
				
				Если Не ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания
					И ВРег(ОписаниеОтбора.ЛевоеЗначение) = ВРег("Регистратор") Тогда
					ИндексыИсключаемыхОтборов.Вставить(0, ИндексОтбора);
				Иначе
					НеобходимыеСведения.Добавить(ОписаниеОтбора.ЛевоеЗначение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ИндексИсключаемогоОтбора Из ИндексыИсключаемыхОтборов Цикл
			ПараметрыПостроения.Отборы.Удалить(ИндексИсключаемогоОтбора);
		КонецЦикла;
		
	Иначе
		НеобходимыеСведения = Сведения;
	КонецЕсли;
	
	Если ПараметрыПостроения.ДополнитьОписаниемНачислений
		И ПараметрыПостроения.ПолноеОписаниеНачислений Тогда
		
		ДополнитьСоставЗапрашиваемыхДанныхИменамиДанныхНачислений(НеобходимыеСведения);
		
	КонецЕсли;
	
	ЗапросыВспомогательныхТаблиц = Новый ТаблицаЗначений;
	ЗапросыВспомогательныхТаблиц.Колонки.Добавить("ИдентификаторИсточника");
	ЗапросыВспомогательныхТаблиц.Колонки.Добавить("Запрос");
	ЗапросыВспомогательныхТаблиц.Колонки.Добавить("Соединение");
	ЗапросыВспомогательныхТаблиц.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ЗапросыВспомогательныхТаблиц.Колонки.Добавить("ВедущиеТаблицы");
	
	Если ПостроениеПоТаблицеФильтра Тогда
		ДобавитьЗапросВспомогательныхТаблиц(ОписаниеИсточников, ЗапросыВспомогательныхТаблиц, ВРег("ВТОтборПозицийШтатногоРасписания"));
	КонецЕсли;
	
	НеобходимыеИсточники = Новый Структура;
	Для Каждого ИмяСведений Из НеобходимыеСведения Цикл
		
		ИмяСведений = СокрЛП(ИмяСведений);
		ИмяСведенийВРег = ВРег(ИмяСведений);
		
		Если ИмяСведенийВРег = ВРег("ПозицияШтатногоРасписания") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеИсточников.ИдентификаторыИсточников.Свойство(ИмяСведенийВРег) Тогда
			ИмяИсточника = ОписаниеИсточников.ИдентификаторыИсточников[ИмяСведенийВРег];
		Иначе
			ВызватьИсключение НСтр("ru = 'Не найдено сведений штатного расписания с именем';
									|en = 'No information of headcount with name'") + " - """ + ИмяСведений + """";
		КонецЕсли;
		
		Если НеобходимыеИсточники.Свойство(ИмяИсточника) Тогда
			ОписаниеИсточника = НеобходимыеИсточники[ИмяИсточника];
		Иначе
			
			ОписаниеИсточника = Новый Массив;
			НеобходимыеИсточники.Вставить(ИмяИсточника, ОписаниеИсточника);
			ДобавитьЗапросВспомогательныхТаблиц(ОписаниеИсточников, ЗапросыВспомогательныхТаблиц, ИмяИсточника);
			
		КонецЕсли;
		
		ОписаниеИсточника.Добавить(ИмяСведений);
		
	КонецЦикла;
	
	УстановитьПорядокЗапросовВспомогательныхТаблиц(ЗапросыВспомогательныхТаблиц);
	
	ЕстьТаблицаОтборов = Ложь;
	Если ЗапросыВспомогательныхТаблиц.Количество() > 0 Тогда
		
		ЗапросВспомогательнойТаблицы = ЗапросыВспомогательныхТаблиц[0];
		ЕстьТаблицаОтборов = (ЗапросВспомогательнойТаблицы.ИдентификаторИсточника = ВРег("ВТОтборПозицийШтатногоРасписания"));
		
	КонецЕсли;
	
	ПоляЗапроса = Новый Массив;
	Если ЕстьТаблицаОтборов Тогда
		
		ПоляЗапроса.Вставить(0, "НАЧАЛОПЕРИОДА(ОтборПозицийШтатногоРасписания.Период, ДЕНЬ) КАК Период");
		ПоляЗапроса.Вставить(1, "ОтборПозицийШтатногоРасписания.Дата КАК Дата");
		ПоляЗапроса.Вставить(2, "ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания");
		
	Иначе
		
		Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			ПоляЗапроса.Вставить(0, "&ДатаАктуальности КАК Период");
			ПоляЗапроса.Вставить(1, "РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата КАК Дата");
			ПоляЗапроса.Вставить(2, "РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания");
		Иначе
			ПоляЗапроса.Вставить(0, "&ДатаАктуальности КАК Период");
			ПоляЗапроса.Вставить(1, "СправочникШтатноеРасписание.ДатаУтверждения КАК Дата");
			ПоляЗапроса.Вставить(2, "СправочникШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ОписаниеНеобходимогоИсточника Из НеобходимыеИсточники Цикл
		
		ОписаниеИсточника = ОписаниеИсточников.ИсточникиДанных[ОписаниеНеобходимогоИсточника.Ключ];
		Для Каждого ИмяСведений Из ОписаниеНеобходимогоИсточника.Значение Цикл
			
			ОписаниеПоля = ОписаниеИсточника.ДанныеПозиции[ИмяСведений];
			ПоляЗапроса.Добавить(ОписаниеПоля.ПутьКДанным + " КАК " + ОписаниеПоля.Имя);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить("ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	ТекстыЗапроса.Добавить(СтрСоединить(ПоляЗапроса, "," + Символы.ПС + Символы.Таб));
	ТекстыЗапроса.Добавить("ПОМЕСТИТЬ ВТШтатноеРасписание");
	
	Если ЕстьТаблицаОтборов Тогда
		
		ТекстыЗапроса.Добавить("ИЗ
			|	ВТОтборПозицийШтатногоРасписания КАК ОтборПозицийШтатногоРасписания");
		
		Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			
			Если ПараметрыПостроения.ВключаяЗакрытые = Истина Тогда
				ТекстыЗапроса.Добавить("
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК РегистрСведенийИсторияИспользованияШтатногоРасписания
					|	ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
					|		И ОтборПозицийШтатногоРасписания.Дата = РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата");
			ИначеЕсли ТипЗнч(ПараметрыПостроения.ВключаяЗакрытые) = Тип("Строка") И Не ПустаяСтрока(ПараметрыПостроения.ВключаяЗакрытые) Тогда
				ТекстСоединения = СтрЗаменить("
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК РегистрСведенийИсторияИспользованияШтатногоРасписания
					|	ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
					|		И ОтборПозицийШтатногоРасписания.Дата = РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата
					|		И (РегистрСведенийИсторияИспользованияШтатногоРасписания.Используется ИЛИ &ВключаяЗакрытые)", "&ВключаяЗакрытые", ПараметрыПостроения.ВключаяЗакрытые);
				ТекстыЗапроса.Добавить(ТекстСоединения);
			Иначе
				ТекстыЗапроса.Добавить("
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК РегистрСведенийИсторияИспользованияШтатногоРасписания
					|	ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
					|		И ОтборПозицийШтатногоРасписания.Дата = РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата
					|		И (РегистрСведенийИсторияИспользованияШтатногоРасписания.Используется)");
			КонецЕсли;
			
		Иначе
			
			ТекстыЗапроса.Добавить("
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК СправочникШтатноеРасписание
				|	ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = СправочникШтатноеРасписание.Ссылка");
			
		КонецЕсли;
		
	Иначе
		
		Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			
			ТекстыЗапроса.Добавить("ИЗ
				|	 РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК РегистрСведенийИсторияИспользованияШтатногоРасписания");
			
		Иначе
			
			ТекстыЗапроса.Добавить("ИЗ
				|	Справочник.ШтатноеРасписание КАК СправочникШтатноеРасписание");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подготовка запросов вспомогательных таблиц
	МассивТекстовЗапросов = Новый Массив;
	Для Каждого ЗапросВспомогательнойТаблицы Из ЗапросыВспомогательныхТаблиц Цикл
		
		Если ЗапросВспомогательнойТаблицы.Запрос <> Неопределено Тогда
			МассивТекстовЗапросов.Добавить(ЗапросВспомогательнойТаблицы.Запрос.Текст);
			ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВспомогательнойТаблицы.Запрос);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ЗапросВспомогательнойТаблицы.Соединение) Тогда
			ТекстыЗапроса.Добавить(ЗапросВспомогательнойТаблицы.Соединение);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивТекстовЗапросов.Добавить(СтрСоединить(ТекстыЗапроса, Символы.ПС));
	
	Если Не ПустаяСтрока(ИмяВТШтатноеРасписание) Тогда
		ДобавитьЗапросыУничтоженияВспомогательныхТаблиц(МассивТекстовЗапросов, ОписаниеИсточников, ЗапросыВспомогательныхТаблиц);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	Если Не ЕстьТаблицаОтборов Тогда
		
		Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания",
				"РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания",
				"СправочникШтатноеРасписание.Ссылка");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПостроения.Отборы) Тогда
		ПрименитьОтборыКЗапросуВТШтатноеРасписание(Запрос, "ВТШтатноеРасписание", ПараметрыПостроения.Отборы, ОписаниеИсточников);
	КонецЕсли;
	
	Если ПостроениеПоТаблицеФильтра Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФильтрПозиций", ПараметрыПостроения.ИмяВТФильтраПозиций);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФильтрПозиций.ПозицияШтатногоРасписания", "ФильтрПозиций." + ПараметрыПостроения.ИмяПоляПозицияШтатногоРасписания);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФильтрПозиций.Период", "ФильтрПозиций." + ПараметрыПостроения.ИмяПоляПериод);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Если ПараметрыПостроения.ДополнитьОписаниемНачислений Тогда
		
		Если ЕстьТаблицаОтборов Тогда
			
			ПараметрыПостроенияДляПрисоединенияНачислений = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПостроения);
			Если ПараметрыПостроенияДляПрисоединенияНачислений.Свойство("ИмяПоляПозицияШтатногоРасписания") Тогда
				ПараметрыПостроенияДляПрисоединенияНачислений.ИмяПоляПозицияШтатногоРасписания = "ПозицияШтатногоРасписания";
			КонецЕсли;
			
		Иначе
			ПараметрыПостроенияДляПрисоединенияНачислений = ПараметрыПостроения;
		КонецЕсли;
		
		ДополнитьЗапросВТШтатноеРасписаниеНачислениями(Запрос, "ВТШтатноеРасписание", ПараметрыПостроенияДляПрисоединенияНачислений, ОписаниеИсточников);
		
	КонецЕсли;
	
	Если Не ПостроениеПоТаблицеФильтра Тогда
		
		Если ТипЗнч(ПараметрыПостроения.ДатаАктуальности) = Тип("Строка")
			Или Лев(ПараметрыПостроения.ДатаАктуальности, 1) = "&" Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоДатеАктуальности", ПараметрыПостроения.ДатаАктуальности);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", ПараметрыПостроения.ДатаАктуальности);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТШтатноеРасписание", ИмяВТШтатноеРасписание);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаборыЗначенийДоступа(ДокументОбъект, Таблица, УчитыватьПодразделенияНеСозданныхПозиций = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументОбъект.Организация КАК ЗначениеДоступа
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания КАК ДокументОбъект
		|ГДЕ
		|	ДокументОбъект.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументОбъект.Позиция.Подразделение
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания.Позиции КАК ДокументОбъект
		|ГДЕ
		|	ДокументОбъект.Ссылка = &Ссылка
		|	И НЕ ДокументОбъект.Позиция.Подразделение ЕСТЬ NULL ";
		
	Если УчитыватьПодразделенияНеСозданныхПозиций Тогда
		
		Запрос.Текст = Запрос.Текст
			+ "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"
			+ "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументОбъект.Подразделение
			|ИЗ
			|	Документ.УтверждениеШтатногоРасписания.Позиции КАК ДокументОбъект
			|ГДЕ
			|	ДокументОбъект.Ссылка = &Ссылка
			|	И ДокументОбъект.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|	И ДокументОбъект.Подразделение <> ЕСТЬNULL(ДокументОбъект.Позиция.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))";
		
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	Если ИмяДокумента <> "УтверждениеШтатногоРасписания" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УтверждениеШтатногоРасписания", ИмяДокумента);
	КонецЕсли;
	
	ТЧПозиции = МетаданныеДокумента.ТабличныеЧасти.Найти("Позиции");
	Если ТЧПозиции.Реквизиты.Найти("Позиция") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Позиция", "ПозицияШтатногоРасписания");
	КонецЕсли; 
		
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), Таблица);
	
КонецПроцедуры

// Процедуры и функции модулей объектов документов УтверждениеШтатногоРасписания и ИзменениеШтатногоРасписания.

Процедура ДокументыОбработкаПроверкиЗаполнения(Объект, Отказ, ДатаВступленияВСилу, ИмяЭлемента, ПроверятьВсеПозиции) Экспорт
	
	РезультатПроверки = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.ПроверитьВозможностьВнесенияИзменений(
		Объект.Ссылка, Объект.Позиции.ВыгрузитьКолонку("Позиция"), ДатаВступленияВСилу);
	
	МожноИзменятьШтатноеРасписание = РезультатПроверки.ИзмененияВозможны;
	
	Если НЕ МожноИзменятьШтатноеРасписание Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата последнего изменения штатного расписания больше даты, с которой вступит в силу этот документ.';
								|en = 'Date of the last headcount change is greater than the date this document will become effective. '");
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'См. %1, позиция - ""%2""';
				|en = 'See %1, position - ""%2""'"),
			РезультатПроверки.РегистраторПредставление,
			РезультатПроверки.Позиция);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ИмяЭлемента, ,Отказ);
		Возврат;
		
	КонецЕсли;
	
	Подразделение = Неопределено;
	Если Объект.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		Подразделение = Объект.Подразделение;
	КонецЕсли; 
	
	Для Каждого СтрокаПозиции Из Объект.Позиции Цикл
		Если СтрокаПозиции.КоличествоСтавок = 0
			И СтрокаПозиции.Действие <> Перечисления.ДействияСПозициямиШтатногоРасписания.ЗакрытьПозицию Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У позиции в строке %1 не задано количество ставок';
																							|en = 'The item in line %1 does not have the number of rates specified'"), СтрокаПозиции.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(СтрокаПозиции.НомерСтроки - 1, "ЧГ=0") + "].КоличествоСтавок", , Отказ);	
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляПроверки = СформироватьЗапросДляПроверкиДокумента(Объект.Ссылка, Объект.Организация, Подразделение, Объект.Позиции, Объект.Начисления, Объект.Показатели, ДатаВступленияВСилу).Выбрать();
	
	Пока ДанныеДляПроверки.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		Если ДанныеДляПроверки.ОшибкаНоваяПозиция Тогда	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для создаваемой позиции в строке %1 установлено действие отличное от ""Создать новую"".';
																							|en = 'Action other than ""Create new"" is set for the position being created in the %1 line. '"), ДанныеДляПроверки.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(ДанныеДляПроверки.НомерСтроки - 1, "ЧГ=0") + "].Должность", , Отказ);
		КонецЕсли;
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания", , Ложь) Тогда
			
			Если ЗначениеЗаполнено(ДанныеДляПроверки.НачислениеНомерСтроки) Тогда
				
				Пока ДанныеДляПроверки.СледующийПоЗначениюПоля("НачислениеНомерСтроки") Цикл	
					
					Если ДанныеДляПроверки.ОшибкаНачислениеДубль Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У позиции в строке %1 начисление %2 присутствует в документе дважды.';
																										|en = 'Accrual %2 exists in the document twice in line %1 of the position.'"), ДанныеДляПроверки.НомерСтроки, ДанныеДляПроверки.НачислениеНаименование);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(ДанныеДляПроверки.НомерСтроки - 1, "ЧГ=0") + "].Должность", , Отказ);	
					ИначеЕсли ДанныеДляПроверки.ОшибкаЗачетОтработанногоВремениДубль Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У позиции в строке %1 присутствуют несколько начислений с зачетом отработанного времени.';
																										|en = 'Several accruals with hours worked are in line %1 for the position.'"), ДанныеДляПроверки.НомерСтроки);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(ДанныеДляПроверки.НомерСтроки - 1, "ЧГ=0") + "].Должность", , Отказ);	
					КонецЕсли;
					
					Если ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда 
						Если ДанныеДляПроверки.РазныеМинЗначенияПоказателя Тогда
							ТекстСообщения = НСтр("ru = 'У позиции показателю %1 назначены разные минимальные значения';
													|en = 'Different minimum values are assigned for indicator %1 in position'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеДляПроверки.РазныеМинЗначенияПоказателяПоказатель);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Строка(ДанныеДляПроверки.НомерСтроки - 1) + "].Должность", , Отказ);
						КонецЕсли;
						Если ДанныеДляПроверки.РазныеМаксЗначенияПоказателя Тогда
							ТекстСообщения = НСтр("ru = 'У позиции показателю %1 назначены разные максимальные значения';
													|en = 'Different maximum values are assigned for indicator %1 in position'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеДляПроверки.РазныеМаксЗначенияПоказателяПоказатель);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Строка(ДанныеДляПроверки.НомерСтроки - 1) + "].Должность", , Отказ);
						КонецЕсли;
					Иначе
						Если ДанныеДляПроверки.РазныеЗначенияПоказателя Тогда 
							ТекстСообщения = НСтр("ru = 'У позиции показателю %1 назначены разные значения';
													|en = 'Different values are assigned for indicator %1 in position'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеДляПроверки.РазныеЗначенияПоказателяПоказатель);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Строка(ДанныеДляПроверки.НомерСтроки - 1) + "].Должность", , Отказ);
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеДляПроверки.ПоказательНомерСтроки) Тогда
						Пока ДанныеДляПроверки.СледующийПоЗначениюПоля("ПоказательНомерСтроки") Цикл
							Если ДанныеДляПроверки.ОшибкаЗначения Тогда
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У позиции в строке %1 для начисления %2 минимальное значение показателя %3 не может быть больше максимального.';
																												|en = 'Minimum value of indicator %3 of the position in line %1 cannot be bigger than the maximum value for accrual %2.'"), ДанныеДляПроверки.НомерСтроки, ДанныеДляПроверки.НачислениеНаименование, ДанныеДляПроверки.ПоказательНаименование);
								ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Позиции[" + Формат(ДанныеДляПроверки.НомерСтроки - 1, "ЧГ=0") + "].Должность", , Отказ);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ПроверятьВсеПозиции Тогда
		
		ДанныеДляПроверки.Сбросить();
		Пока ДанныеДляПроверки.НайтиСледующий(Истина, "ОшибкаАктуальнаяПозиция") Цикл 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Актуальная позиция %1 не включена в данный документ.';
					|en = 'The current position %1 is not included in the document.'"),
				ДанныеДляПроверки.ОшибкаАктуальностиПозицияНаименование);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеДляПроверки.ОшибкаАктуальностиПозиция, , , Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляПроверки.Сбросить();
	Пока ДанныеДляПроверки.НайтиСледующий(Истина, "ОшибкаЗакрытаяПозиция") Цикл 
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ранее закрытая позиция %1 включена в данный документ.';
				|en = 'Earlier closed position %1 is included in this document.'"),
			ДанныеДляПроверки.ОшибкаАктуальностиПозицияНаименование);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеДляПроверки.ОшибкаАктуальностиПозиция, , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументыПередЗаписью(ДокументШтатногоРасписанияОбъект, Отказ, РежимЗаписи, РежимПроведения, ДатаВступленияВСилу, ИмяЭлемента) Экспорт
	
	СинхронизироватьРеквизитыПозиций(ДокументШтатногоРасписанияОбъект);
	
	СведенияОНаименованиях = Неопределено;
	ДокументШтатногоРасписанияОбъект.ДополнительныеСвойства.Свойство("СведенияОНаименованиях", СведенияОНаименованиях);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ДокументШтатногоРасписанияОбъект) Тогда
			ПроверитьВозможностьИзменитьШтатноеРасписание(
				ДокументШтатногоРасписанияОбъект.Позиции.ВыгрузитьКолонку("Позиция"),
				ДатаВступленияВСилу,
				ДокументШтатногоРасписанияОбъект.Ссылка,
				РежимЗаписи,
				Отказ,
				ИмяЭлемента);
		КонецЕсли;
		
		СтрокиСозданныхПозиций = Новый Массив;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ОбновитьШтатноеРасписаниеПоДаннымДокумента(
				ДокументШтатногоРасписанияОбъект.Организация,
				ДатаВступленияВСилу,
				ДокументШтатногоРасписанияОбъект.Позиции,
				ДокументШтатногоРасписанияОбъект.ЕжегодныеОтпуска,
				СтрокиСозданныхПозиций,
				СведенияОНаименованиях);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
				МодульТарификационнаяОтчетностьУчрежденийФМБА = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
				МодульТарификационнаяОтчетностьУчрежденийФМБА.ПередЗаписьюДокументовИзмененияШтатногоРасписания(ДокументШтатногоРасписанияОбъект);
			КонецЕсли;
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
				МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
				МодульКадровоеПланирование.ПередЗаписьюДокументовИзмененияШтатногоРасписания(ДокументШтатногоРасписанияОбъект);
			КонецЕсли;
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала") Тогда
				МодульХарактеристикиПерсонала = ОбщегоНазначения.ОбщийМодуль("ХарактеристикиПерсонала");
				МодульХарактеристикиПерсонала.ПередЗаписьюДокументовИзмененияШтатногоРасписания(ДокументШтатногоРасписанияОбъект);
			КонецЕсли;
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
				МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
				МодульЛьготыСотрудников.ПередЗаписьюДокументовИзмененияШтатногоРасписания(ДокументШтатногоРасписанияОбъект);
			КонецЕсли;
			
			СтатистикаПерсоналаРасширенный.ПередЗаписьюДокументовИзмененияШтатногоРасписания(СтрокиСозданныхПозиций);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументШтатногоРасписанияОбъект.Ссылка) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	КлассыУсловийТрудаПоДолжностям.Период КАК Период,
				|	КлассыУсловийТрудаПоДолжностям.Должность КАК Должность
				|ИЗ
				|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
				|ГДЕ
				|	КлассыУсловийТрудаПоДолжностям.Основание = &Основание";
			Запрос.УстановитьПараметр("Основание", ДокументШтатногоРасписанияОбъект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписейКлассовУсловийТруда = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
				НаборЗаписейКлассовУсловийТруда.ДополнительныеСвойства.Вставить("ОбновитьНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда", Ложь);
				НаборЗаписейКлассовУсловийТруда.Отбор.Должность.Установить(Выборка.Должность);
				НаборЗаписейКлассовУсловийТруда.Отбор.Период.Установить(Выборка.Период);
				НаборЗаписейКлассовУсловийТруда.Записать();
			КонецЦикла;
			
			Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				ОтборПоОрганизациям = Новый Массив;
				ОтборПоОрганизациям.Добавить(ДокументШтатногоРасписанияОбъект.Организация);
				УчетСтраховыхВзносов.УстановитьФункциональныеОпцииИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ОтборПоОрганизациям);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие")
		И СведенияОНаименованиях.Количество() > 0 Тогда
		
		ПозицииКОбновлению = Новый Массив;
		СоответствиеПозицийИдентификаторам = Новый Соответствие;
		Для каждого СведениеОНаименовании Из СведенияОНаименованиях Цикл
			
			СтрокиПозиции = ДокументШтатногоРасписанияОбъект.Позиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СведениеОНаименовании.Ключ));
			Если СтрокиПозиции.Количество() > 0 Тогда
				ПозицииКОбновлению.Добавить(СтрокиПозиции[0].Позиция);
				СоответствиеПозицийИдентификаторам.Вставить(СведениеОНаименовании.Ключ, СтрокиПозиции[0].Позиция);
			КонецЕсли;
			
		КонецЦикла;
		
		НаименованияПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПозицииКОбновлению, "Наименование");
		Для каждого СведениеОНаименовании Из СведенияОНаименованиях Цикл
			
			Позиция = СоответствиеПозицийИдентификаторам.Получить(СведениеОНаименовании.Ключ);
			Если ЗначениеЗаполнено(Позиция) Тогда
				Если ТипЗнч(СведениеОНаименовании.Значение) = Тип("Структура") Тогда
					СведениеОНаименованииНаименование = СведениеОНаименовании.Значение.Наименование;
				Иначе
					СведениеОНаименованииНаименование = СведениеОНаименовании.Значение;
				КонецЕсли;
				
				Если НаименованияПозиций.Получить(Позиция) <> СведениеОНаименованииНаименование Тогда
					
					ПозицияОбъект = Позиция.ПолучитьОбъект();
					
					Попытка 
						ПозицияОбъект.Заблокировать();
					Исключение
						
						ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось изменить наименование ""%1"".
							|Возможно, данные позиции редактируются другим пользователем';
							|en = 'Cannot change the ""%1"" name.
							|Maybe, these positions are being edited by another user'"),
							СведениеОНаименованииНаименование);
							
						ВызватьИсключение ТекстИсключенияЗаписи;
						
					КонецПопытки;
					
					ПозицияОбъект.Наименование = СведениеОНаименованииНаименование;
					ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
					ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
					
					ПозицияОбъект.Записать();
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДокументыОбработкаПроведения(ДокументШтатногоРасписанияОбъект, Отказ, РежимПроведения, ДатаВступленияВСилу) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументШтатногоРасписанияОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу);
	
	СформироватьДвиженияИсторииПозицийШтатногоРасписания(ДокументШтатногоРасписанияОбъект, ДанныеДляПроведения);
	
	ОстаткиОтпусков.СформироватьДвиженияЕжегодныхОтпусковПоШтатномуРасписанию(
		ДокументШтатногоРасписанияОбъект.Движения, ДатаВступленияВСилу, ДанныеДляПроведения.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию);
		
	СформироватьДвиженияСпециальностейПоШтатномуРасписанию(
			ДокументШтатногоРасписанияОбъект.Движения, ДатаВступленияВСилу, ДанныеДляПроведения.ИсторияСпециальностейПоШтатномуРасписанию);
			
	СформироватьДвиженияКлассовУсловийТрудаПоШтатномуРасписанию(
			ДокументШтатногоРасписанияОбъект.Организация, ДатаВступленияВСилу, ДокументШтатногоРасписанияОбъект.Ссылка, ДокументШтатногоРасписанияОбъект.Позиции);
		
КонецПроцедуры

// Прочие процедуры модулей объектов документов УтверждениеШтатногоРасписания и ИзменениеШтатногоРасписания.

Процедура АвтозаполнениеТекущимиДаннымиШтатногоРасписания(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу, ПроверятьЗаполненностьПодразделения = Ложь) Экспорт
	
	Подразделение = Неопределено;
	Если ДокументШтатногоРасписанияОбъект.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		
		Если Не ПроверятьЗаполненностьПодразделения Или ЗначениеЗаполнено(ДокументШтатногоРасписанияОбъект.Подразделение) Тогда
			Подразделение = ДокументШтатногоРасписанияОбъект.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗапросаДанныхДляЗаполнения = СформироватьЗапросПоТекущемуСостояниюШтатногоРасписания(
		ДокументШтатногоРасписанияОбъект.Ссылка, 
		ДокументШтатногоРасписанияОбъект.Организация, 
		ДатаВступленияВСилу, 
		Подразделение);
	
	ДанныеДляЗаполнения = РезультатЗапросаДанныхДляЗаполнения.Выбрать();
	
	ИдентификаторСтрокиПозиции = МаксимальныйИдентификаторСтроки(ДокументШтатногоРасписанияОбъект.Позиции, "ИдентификаторСтрокиПозиции") + 1;
	ИдентификаторСтрокиВидаРасчета = МаксимальныйИдентификаторСтроки(ДокументШтатногоРасписанияОбъект.Начисления, "ИдентификаторСтрокиВидаРасчета") + 1;
	ИдентификаторСтрокиУправленческогоВидаРасчета = МаксимальныйИдентификаторСтроки(ДокументШтатногоРасписанияОбъект.УправленческиеНачисления, "ИдентификаторСтрокиВидаРасчета") + 1;
	
	Пока ДанныеДляЗаполнения.СледующийПоЗначениюПоля("Позиция") Цикл
		
		СтруктураПоиска = Новый Структура("Позиция", ДанныеДляЗаполнения.Позиция);
		
		СтрокиПозиции = ДокументШтатногоРасписанияОбъект.Позиции.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПозиции.Количество() = 0 Тогда
			
			ПозицияШР = ДокументШтатногоРасписанияОбъект.Позиции.Добавить();
			
			ПозицияШР.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции + 1;
			
			ЗаполнитьЗначенияСвойств(ПозицияШР, ДанныеДляЗаполнения);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ДанныеДляЗаполнения.ДатаУтверждения) Тогда
				Продолжить;
			КонецЕсли;
			
			ПозицияШР = СтрокиПозиции[0];
			
		КонецЕсли;
		
		Пока ДанныеДляЗаполнения.СледующийПоЗначениюПоля("Начисление") Цикл
			
			НезависимыйПоказатель = Не ЗначениеЗаполнено(ДанныеДляЗаполнения.Начисление);
			
			Если Не НезависимыйПоказатель Тогда
				
				Если ДанныеДляЗаполнения.ПлановыеНачисления = Истина Тогда
					НачислениеПоШР = ДокументШтатногоРасписанияОбъект.Начисления.Добавить();
				Иначе
					НачислениеПоШР = ДокументШтатногоРасписанияОбъект.УправленческиеНачисления.Добавить();
				КонецЕсли;
				
				НачислениеПоШР.ИдентификаторСтрокиПозиции = ПозицияШР.ИдентификаторСтрокиПозиции;
				ЗаполнитьЗначенияСвойств(НачислениеПоШР, ДанныеДляЗаполнения);
				
				Если ДанныеДляЗаполнения.ПлановыеНачисления = Истина Тогда
					НачислениеПоШР.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				Иначе
					НачислениеПоШР.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиУправленческогоВидаРасчета;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляЗаполнения.Показатель) Тогда 
				
					Пока ДанныеДляЗаполнения.СледующийПоЗначениюПоля("Показатель") Цикл
						
					Если ДанныеДляЗаполнения.ПлановыеНачисления = Истина Тогда
						ПоказательНачисления = ДокументШтатногоРасписанияОбъект.Показатели.Добавить();
					Иначе
						ПоказательНачисления = ДокументШтатногоРасписанияОбъект.УправленческиеПоказатели.Добавить();
					КонецЕсли;
					
					ПоказательНачисления.ИдентификаторСтрокиВидаРасчета = ?(НезависимыйПоказатель, 0, НачислениеПоШР.ИдентификаторСтрокиВидаРасчета);
					ПоказательНачисления.ИдентификаторСтрокиПозиции = ПозицияШР.ИдентификаторСтрокиПозиции;
					ЗаполнитьЗначенияСвойств(ПоказательНачисления, ДанныеДляЗаполнения);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не НезависимыйПоказатель Тогда
				Если ДанныеДляЗаполнения.ПлановыеНачисления = Истина Тогда
					ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				Иначе
					ИдентификаторСтрокиУправленческогоВидаРасчета = ИдентификаторСтрокиУправленческогоВидаРасчета + 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОстаткиОтпусков.ЗаполнитьЕжегоднымиОтпускамиШтатногоРасписания(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу);
	
	ЗаполнитьСпециальностямиШтатногоРасписания(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура ЗаполнитьСпециальностямиШтатногоРасписания(Объект, ДатаВступленияВСилу)
	
	СпециальностиПозиций = СпециальностиПозицииШтатногоРасписания(Объект.Позиции.Выгрузить(, "Позиция"), ДатаВступленияВСилу, Объект.Ссылка);
	
	Для Каждого СтрокаПозиции Из Объект.Позиции Цикл
		
		СпециальностиПозиции = СпециальностиПозиций.НайтиСтроки(Новый Структура("ПозицияШтатногоРасписания", СтрокаПозиции.Позиция));
		Для Каждого СтрокаСпециальностиПоПозиции Из СпециальностиПозиции Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции);
			СтруктураПоиска.Вставить("Специальность", СтрокаСпециальностиПоПозиции.Специальность);
			
			СтрокиСпециальностей = Объект.Специальности.НайтиСтроки(СтруктураПоиска);
			Если СтрокиСпециальностей.Количество() = 0 Тогда
				
				СтрокаСпециальности = Объект.Специальности.Добавить();
				СтрокаСпециальности.ИдентификаторСтрокиПозиции = СтрокаПозиции.ИдентификаторСтрокиПозиции;
				СтрокаСпециальности.Специальность = СтрокаСпециальностиПоПозиции.Специальность;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейИстории(Регистратор, НаборЗаписей, ВыборкаДвижений) Экспорт
	
	Если ВыборкаДвижений.Количество() > 0  Тогда
		
		НаборЗаписей.Записывать = Истина;
		Пока ВыборкаДвижений.Следующий() Цикл
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ВыборкаДвижений);
			ЗаписьНабора.Регистратор = Регистратор;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляПроведения(ДокументШтатногоРасписанияОбъект, ДатаВступленияВСилу)
	
	ДанныеПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументШтатногоРасписанияОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументШтатногоРасписанияПозиции.*
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания.Позиции КАК ДокументШтатногоРасписанияПозиции
		|ГДЕ
		|	ДокументШтатногоРасписанияПозиции.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ИдентификаторСтрокиПозиции";
	
	ИмяТаблицы = ДокументШтатногоРасписанияОбъект.Метаданные().Имя;
	Если ИмяТаблицы <> "УтверждениеШтатногоРасписания" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".УтверждениеШтатногоРасписания.", "." + ИмяТаблицы + ".");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ВЫБОР
		|		КОГДА Позиции.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСПозициямиШтатногоРасписания.ЗакрытьПозицию)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	Позиции.*
		|ИЗ
		|	ВТПозиции КАК Позиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияНачисления.Начисление КАК Начисление,
		|	ДокументШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ДокументШтатногоРасписанияНачисления.Размер КАК Размер,
		|	ДокументШтатногоРасписанияНачисления.РазмерМин КАК РазмерМин,
		|	ДокументШтатногоРасписанияНачисления.РазмерМакс КАК РазмерМакс
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Начисления КАК ДокументШтатногоРасписанияНачисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияНачисления.Ссылка
		|			И (ДокументШтатногоРасписанияНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ДокументШтатногоРасписанияПоказатели.Показатель КАК Показатель,
		|	ДокументШтатногоРасписанияПоказатели.Значение КАК Значение,
		|	ДокументШтатногоРасписанияПоказатели.ЗначениеМин КАК ЗначениеМин,
		|	ДокументШтатногоРасписанияПоказатели.ЗначениеМакс КАК ЗначениеМакс
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Показатели КАК ДокументШтатногоРасписанияПоказатели
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияПоказатели.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ДокументШтатногоРасписанияЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.ЕжегодныеОтпуска КАК ДокументШтатногоРасписанияЕжегодныеОтпуска
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияЕжегодныеОтпуска.Ссылка
		|			И (ДокументШтатногоРасписанияЕжегодныеОтпуска.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу,
		|	Позиции.Позиция,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка),
		|	0
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.ЕжегодныеОтпуска КАК ДокументШтатногоРасписанияЕжегодныеОтпуска
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияЕжегодныеОтпуска.Ссылка
		|			И (ДокументШтатногоРасписанияЕжегодныеОтпуска.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить))
		|
		|СГРУППИРОВАТЬ ПО
		|	Позиции.Позиция
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументШтатногоРасписанияЕжегодныеОтпуска.ВидЕжегодногоОтпуска) = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияСпециальности.Специальность КАК Специальность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Специальности КАК ДокументШтатногоРасписанияСпециальности
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияСпециальности.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияСпециальности.Ссылка";
	
	ИмяТаблицы = ДокументШтатногоРасписанияОбъект.Метаданные().Имя;
	Если ИмяТаблицы <> "УтверждениеШтатногоРасписания" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".УтверждениеШтатногоРасписания.", "." + ИмяТаблицы + ".");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.Количество();
	
	ДанныеПроведения.Вставить("ИсторииИспользованияШтатногоРасписания", РезультатЗапроса[КоличествоРезультатов - 5].Выбрать());
	ДанныеПроведения.Вставить("ИсторияНачисленийПоШтатномуРасписанию", РезультатЗапроса[КоличествоРезультатов - 4].Выбрать());
	ДанныеПроведения.Вставить("ИсторияПоказателейПоШтатномуРасписанию", РезультатЗапроса[КоличествоРезультатов - 3].Выбрать());
	ДанныеПроведения.Вставить("ИсторияЕжегодныхОтпусковПоШтатномуРасписанию", РезультатЗапроса[КоличествоРезультатов - 2].Выбрать());
	ДанныеПроведения.Вставить("ИсторияСпециальностейПоШтатномуРасписанию", РезультатЗапроса[КоличествоРезультатов - 1].Выбрать());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.ДополнитьДанныеДляПроведения(Запрос.МенеджерВременныхТаблиц, ДатаВступленияВСилу, ДанныеПроведения, ИмяТаблицы);
	КонецЕсли;
	
	Возврат ДанныеПроведения;
	
КонецФункции

Процедура СинхронизироватьРеквизитыПозиций(Объект) Экспорт
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Для каждого СтрокаТЧПозиции Из Объект.Позиции Цикл
		СинхронизироватьРеквизитыПозиции(СтрокаТЧПозиции, ФОИспользоватьВилкуСтавокВШтатномРасписании);
	КонецЦикла;
	
	СинхронизироватьРеквизитыНачислений(Объект, ФОИспользоватьВилкуСтавокВШтатномРасписании);
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзменитьШтатноеРасписание(Позиции, Дата, Регистратор, РежимЗаписи, Отказ, ИмяЭлемента) Экспорт
	
	РезультатПроверки = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.ПроверитьВозможностьВнесенияИзменений(
		Регистратор, Позиции, Дата);
	МожноИзменятьШтатноеРасписание = РезультатПроверки.ИзмененияВозможны;
	
	Если НЕ МожноИзменятьШтатноеРасписание Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Дата последнего изменения штатного расписания больше даты, с которой вступит в силу этот документ. Проведение невозможно.';
									|en = 'Date of the last headcount change is greater than the date this document will become effective. Cannot post.'");
				
		Иначе
			ТекстСообщения = НСтр("ru = 'Дата последнего изменения штатного расписания больше даты, с которой вступит в силу этот документ. Отмена проведения невозможна.';
									|en = 'Date the headcount was changed last is later than the effective date of this document. Cannot cancel posting. '");
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'См. %1, позиция - ""%2""';
				|en = 'See %1, position - ""%2""'"),
			РезультатПроверки.РегистраторПредставление,
			РезультатПроверки.Позиция);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Регистратор, ИмяЭлемента, ,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьШтатноеРасписаниеПоДаннымДокумента(Организация, ДатаВступленияВСилу, Позиции, ЕжегодныеОтпуска, СтрокиСНовымиПозициями, СведенияОНаименованиях)
	
	ФОИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании =
		ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании");
	
	Для каждого СтрокаПозиции Из Позиции Цикл
		
		ПозицияШтатногоРасписанияОбъект = Неопределено;
		СозданаПозиция = Ложь;
		
		Наименование = Неопределено;
		Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие") Тогда
			Наименование = СведенияОНаименованиях.Получить(СтрокаПозиции.ИдентификаторСтрокиПозиции);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПозиции.Позиция) Тогда
			
			Если Наименование = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПозицияШтатногоРасписанияОбъект = СтрокаПозиции.Позиция.ПолучитьОбъект();
			
		КонецЕсли;
		
		Если ПозицияШтатногоРасписанияОбъект = Неопределено Тогда
			
			СозданаПозиция = Истина;
			ПозицияШтатногоРасписанияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
			ПозицияШтатногоРасписанияОбъект.Владелец = Организация;
			ПозицияШтатногоРасписанияОбъект.Утверждена = Истина;
			ПозицияШтатногоРасписанияОбъект.ДатаУтверждения = ДатаВступленияВСилу;
			
			СтрокиОтпусков = ЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			Для Каждого СтрокаОтпуска Из СтрокиОтпусков Цикл
				
				Если ЗначениеЗаполнено(СтрокаОтпуска.ВидЕжегодногоОтпуска) И СтрокаОтпуска.КоличествоДнейВГод > 0 Тогда
					ЗаполнитьЗначенияСвойств(ПозицияШтатногоРасписанияОбъект.ЕжегодныеОтпуска.Добавить(), СтрокаОтпуска);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПозицияШтатногоРасписанияОбъект, СтрокаПозиции);
		
		Если Наименование <> Неопределено Тогда
			Если ТипЗнч(Наименование) = Тип("Структура") Тогда
				ПозицияШтатногоРасписанияОбъект.Наименование = Наименование.Наименование;
				ПозицияШтатногоРасписанияОбъект.НаименованиеПолное = Наименование.НаименованиеПолное;
			Иначе
				ПозицияШтатногоРасписанияОбъект.Наименование = Наименование;
			КонецЕсли;
			СведенияОНаименованиях.Удалить(СтрокаПозиции.ИдентификаторСтрокиПозиции);
			
		Иначе
			
			ДополнительныеПараметры = Новый Структура("ПолноеНаименованиеДолжности, ПолноеНаименованиеПодразделения", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПозиции.Должность, "НаименованиеДляЗаписейОТрудовойДеятельности"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПозиции.Подразделение, "НаименованиеДляЗаписейОТрудовойДеятельности"));
			Если ФОИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании Тогда
				ДополнительныеПараметры.Вставить("РазрядКатегория", СтрокаПозиции.РазрядКатегория);
			КонецЕсли;
			
			НаименованиеПозиции = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				СтрокаПозиции.Подразделение,
				СтрокаПозиции.Должность,
				ДополнительныеПараметры);
				
			ПозицияШтатногоРасписанияОбъект.Наименование = НаименованиеПозиции.Наименование;
			ПозицияШтатногоРасписанияОбъект.НаименованиеПолное = НаименованиеПозиции.НаименованиеПолное;
			
			
		КонецЕсли;
		
		ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияШтатногоРасписанияОбъект);
		ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияШтатногоРасписанияОбъект);
		ПозицияШтатногоРасписанияОбъект.Записать();
		
		ПозицияШтатногоРасписания = ПозицияШтатногоРасписанияОбъект.Ссылка;
		
		СтрокаТЧПозиции = Позиции.Найти(СтрокаПозиции.НомерСтроки, "НомерСтроки");
		
		Если СтрокаТЧПозиции <> Неопределено Тогда
			СтрокаТЧПозиции.Позиция = ПозицияШтатногоРасписания;
		КонецЕсли;
		
		Если СозданаПозиция Тогда
			СтрокиСНовымиПозициями.Добавить(СтрокаТЧПозиции);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьЗапросПоТекущемуСостояниюШтатногоРасписания(Регистратор, Организация, Дата, Подразделение = Неопределено) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписание(Дата, Организация, Подразделение);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	СоздатьВТШтатноеРасписание(
		Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, , "ВТАктуальныеПозицииШтатногоРасписания");
	
	ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТАктуальныеПозицииШтатногоРасписания");
	ПараметрыПостроения.ИмяПоляПериод = "Дата";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		ПараметрыПостроения.УправленческиеНачисления = МодульУправленческаяЗарплата.ИспользоватьУправленческуюЗарплату();
	КонецЕсли;
	
	СоздатьВТНачисленияШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, "ВТАктуальныеНачисленияПозиций");
	
	РасчетЗарплатыРасширенный.СоздатьВТНачисленияСПоказателямиТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктуальныеНачисленияПозиций.ПозицияШтатногоРасписания,
		|	МАКСИМУМ(АктуальныеНачисленияПозиций.Значение) КАК ОкладТариф,
		|	МАКСИМУМ(АктуальныеНачисленияПозиций.ЗначениеМин) КАК ОкладТарифМин,
		|	МИНИМУМ(АктуальныеНачисленияПозиций.ЗначениеМакс) КАК ОкладТарифМакс
		|ПОМЕСТИТЬ ВТЗначенияТарифа
		|ИЗ
		|	ВТАктуальныеНачисленияПозиций КАК АктуальныеНачисленияПозиций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателямиТарифныхСтавок КАК НачислениеПоказатели
		|		ПО АктуальныеНачисленияПозиций.Начисление = НачислениеПоказатели.Начисление
		|			И АктуальныеНачисленияПозиций.Показатель = НачислениеПоказатели.Показатель
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальныеНачисленияПозиций.ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК Позиция,
		|	АктуальныеПозицииШтатногоРасписания.ДатаУтверждения,
		|	АктуальныеНачисленияПозиций.Начисление КАК Начисление,
		|	АктуальныеНачисленияПозиций.ПлановыеНачисления КАК ПлановыеНачисления,
		|	АктуальныеНачисленияПозиций.Показатель,
		|	АктуальныеНачисленияПозиций.Размер,
		|	АктуальныеНачисленияПозиций.РазмерМин,
		|	АктуальныеНачисленияПозиций.РазмерМакс,
		|	АктуальныеНачисленияПозиций.Значение КАК Значение,
		|	АктуальныеНачисленияПозиций.ЗначениеМин КАК ЗначениеМин,
		|	АктуальныеНачисленияПозиций.ЗначениеМакс КАК ЗначениеМакс,
		|	ЗначенияТарифа.ОкладТариф,
		|	ЗначенияТарифа.ОкладТарифМин,
		|	ЗначенияТарифа.ОкладТарифМакс,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК КлассУсловийТрудаДатаРегистрацииИзменений,
		|	АктуальныеПозицииШтатногоРасписания.*
		|ИЗ
		|	ВТАктуальныеПозицииШтатногоРасписания КАК АктуальныеПозицииШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеНачисленияПозиций КАК АктуальныеНачисленияПозиций
		|		ПО АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания = АктуальныеНачисленияПозиций.ПозицияШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияТарифа КАК ЗначенияТарифа
		|		ПО АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ЗначенияТарифа.ПозицияШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&ДатаАктуальности, ) КАК КлассыУсловийТрудаПоДолжностям
		|		ПО АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания = КлассыУсловийТрудаПоДолжностям.Должность
		|ГДЕ
		|	АктуальныеПозицииШтатногоРасписания.Дата <> АктуальныеПозицииШтатногоРасписания.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Позиция,
		|	Начисление"; 
	
	Если ПараметрыПостроения.УправленческиеНачисления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АктуальныеНачисленияПозиций.ПлановыеНачисления КАК ПлановыеНачисления,",
			"АктуальныеНачисленияПозиций.ПлановыеНачисления КАК ПлановыеНачисления, АктуальныеНачисленияПозиций.УправленческиеНачисления КАК УправленческиеНачисления,");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Регистратор", Регистратор);

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписание.Ссылка КАК Позиция,
		|	&Реквизиты
		|ПОМЕСТИТЬ ВТТекущиеПозицииШР
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Владелец = &Организация
		|	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения
		|	И (&Подразделение = НЕОПРЕДЕЛЕНО
		|			ИЛИ ШтатноеРасписание.Подразделение В ИЕРАРХИИ (&Подразделение))
		|	И (НЕ ШтатноеРасписание.Закрыта
		|			ИЛИ ШтатноеРасписание.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				И ШтатноеРасписание.ДатаЗакрытия > &Дата)";
		
		ТекстыЗапросаРеквизитов = Новый Массив;
		Для Каждого Реквизит Из Метаданные.Справочники.ШтатноеРасписание.Реквизиты Цикл
			
			Если ЗарплатаКадрыОбщиеНаборыДанных.ИмяНеИспользуется(Реквизит.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстыЗапросаРеквизитов.Добавить("ШтатноеРасписание." + Реквизит.Имя + " КАК " + Реквизит.Имя);
			
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Реквизиты", СтрСоединить(ТекстыЗапросаРеквизитов, "," + Символы.ПС));
		
		Запрос.Выполнить();
		
		СоздатьВТМестоПозицииВСтруктуреПредприятия(Запрос.МенеджерВременныхТаблиц, "ВТТекущиеПозицииШР", "Позиция");
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписаниеНачисления.Начисление КАК Начисление,
		|	ИСТИНА КАК ПлановыеНачисления,
		|	МестоПозицииВСтруктуреПредприятия.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия,
		|	ШтатноеРасписаниеПоказатели.Показатель КАК Показатель,
		|	ШтатноеРасписаниеПоказатели.Значение КАК Значение,
		|	ШтатноеРасписаниеПоказатели.ЗначениеМин КАК ЗначениеМин,
		|	ШтатноеРасписаниеПоказатели.ЗначениеМакс КАК ЗначениеМакс,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК КлассУсловийТрудаДатаРегистрацииИзменений,
		|	ТекущиеПозицииШР.Позиция КАК Позиция,
		|	ТекущиеПозицииШР.*
		|ИЗ
		|	ВТТекущиеПозицииШР КАК ТекущиеПозицииШР
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Начисления КАК ШтатноеРасписаниеНачисления
		|		ПО ТекущиеПозицииШР.Позиция = ШтатноеРасписаниеНачисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Показатели КАК ШтатноеРасписаниеПоказатели
		|		ПО (ШтатноеРасписаниеНачисления.Ссылка = ШтатноеРасписаниеПоказатели.Ссылка)
		|			И (ШтатноеРасписаниеНачисления.ИдентификаторСтрокиВидаРасчета = ШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета)
		|			И (ШтатноеРасписаниеПоказатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка))
		|			И НЕ (ШтатноеРасписаниеПоказатели.Показатель.ЗначениеРассчитываетсяАвтоматически)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&ДатаАктуальности, ) КАК КлассыУсловийТрудаПоДолжностям
		|		ПО ТекущиеПозицииШР.Позиция = КлассыУсловийТрудаПоДолжностям.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМестоПозицииВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
		|		ПО ТекущиеПозицииШР.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка),
		|	ИСТИНА КАК ПлановыеНачисления,
		|	МестоПозицииВСтруктуреПредприятия.МестоВСтруктуреПредприятия,
		|	ШтатноеРасписаниеПоказатели.Показатель,
		|	ШтатноеРасписаниеПоказатели.Значение,
		|	ШтатноеРасписаниеПоказатели.ЗначениеМин,
		|	ШтатноеРасписаниеПоказатели.ЗначениеМакс,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений,
		|	ТекущиеПозицииШР.Позиция КАК Позиция,
		|	ТекущиеПозицииШР.*
		|ИЗ
		|	ВТТекущиеПозицииШР КАК ТекущиеПозицииШР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Показатели КАК ШтатноеРасписаниеПоказатели
		|		ПО ТекущиеПозицииШР.Позиция = ШтатноеРасписаниеПоказатели.Ссылка
		|			И (ШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета = 0)
		|			И (ШтатноеРасписаниеПоказатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка))
		|			И НЕ (ШтатноеРасписаниеПоказатели.Показатель.ЗначениеРассчитываетсяАвтоматически)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(&ДатаАктуальности, ) КАК КлассыУсловийТрудаПоДолжностям
		|		ПО ТекущиеПозицииШР.Позиция = КлассыУсловийТрудаПоДолжностям.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМестоПозицииВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
		|		ПО ТекущиеПозицииШР.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
		|
		|УПОРЯДОЧИТЬ ПО
		|	Позиция,
		|	Начисление,
		|	Показатель";
		
	
	Если ПараметрыПостроения.УправленческиеНачисления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА КАК ПлановыеНачисления,",
			"ИСТИНА КАК ПлановыеНачисления, ЛОЖЬ КАК УправленческиеНачисления,");
	КонецЕсли;
	
		Возврат Запрос.Выполнить();
		
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция СформироватьЗапросДляПроверкиДокумента(Регистратор, Организация, Подразделение, Позиции, Начисления, Показатели, ДатаВступленияВСилу)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("НеОтбиратьПоПодразделению", Не ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.УстановитьПараметр("Показатели", Показатели);
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УтверждениеШтатногоРасписанияПозиции.НомерСтроки КАК НомерСтроки,
		|	УтверждениеШтатногоРасписанияПозиции.Должность КАК Должность,
		|	УтверждениеШтатногоРасписанияПозиции.Подразделение КАК Подразделение,
		|	УтверждениеШтатногоРасписанияПозиции.Позиция КАК Позиция,
		|	УтверждениеШтатногоРасписанияПозиции.Действие КАК Действие,
		|	УтверждениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	&Позиции КАК УтверждениеШтатногоРасписанияПозиции
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УтверждениеШтатногоРасписанияНачисления.НомерСтроки КАК НомерСтроки,
		|	УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	УтверждениеШтатногоРасписанияНачисления.Начисление КАК Начисление,
		|	УтверждениеШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	УтверждениеШтатногоРасписанияНачисления.Действие КАК Действие
		|ПОМЕСТИТЬ ВТТаблицаНачисления
		|ИЗ
		|	&Начисления КАК УтверждениеШтатногоРасписанияНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтрокиВидаРасчета,
		|	ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УтверждениеШтатногоРасписанияПоказатели.НомерСтроки КАК НомерСтроки,
		|	УтверждениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	УтверждениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	УтверждениеШтатногоРасписанияПоказатели.Показатель КАК Показатель,
		|	УтверждениеШтатногоРасписанияПоказатели.Значение КАК Значение,
		|	УтверждениеШтатногоРасписанияПоказатели.ЗначениеМин КАК ЗначениеМин,
		|	УтверждениеШтатногоРасписанияПоказатели.ЗначениеМакс КАК ЗначениеМакс
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	&Показатели КАК УтверждениеШтатногоРасписанияПоказатели
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтрокиВидаРасчета,
		|	ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаНачисления.Начисление КАК Начисление,
		|	ТаблицаНачисления.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	ТаблицаНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ТаблицаНачисления.НомерСтроки КАК НомерСтроки,
		|	ТаблицаНачисления.Действие КАК Действие,
		|	Начисления.Наименование КАК Наименование,
		|	Начисления.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени
		|ПОМЕСТИТЬ ВТДанныеНачислений
		|ИЗ
		|	ВТТаблицаНачисления КАК ТаблицаНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО ТаблицаНачисления.Начисление = Начисления.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТЗачетОтработанногоВремениДубль
		|ИЗ
		|	ВТДанныеНачислений КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеНачислений КАК НачисленияДубльЗачетВремени
		|		ПО (Начисления.ЗачетОтработанногоВремени)
		|			И (НачисленияДубльЗачетВремени.ЗачетОтработанногоВремени)
		|			И Начисления.НомерСтроки > НачисленияДубльЗачетВремени.НомерСтроки
		|			И Начисления.ИдентификаторСтрокиПозиции = НачисленияДубльЗачетВремени.ИдентификаторСтрокиПозиции
		|			И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = НачисленияДубльЗачетВремени.ОбозначениеВТабелеУчетаРабочегоВремени
		|			И (НачисленияДубльЗачетВремени.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|ГДЕ
		|	Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНачисленияДубль
		|ИЗ
		|	ВТДанныеНачислений КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеНачислений КАК НачисленияДубль
		|		ПО Начисления.ИдентификаторСтрокиПозиции = НачисленияДубль.ИдентификаторСтрокиПозиции
		|			И Начисления.Начисление = НачисленияДубль.Начисление
		|			И Начисления.НомерСтроки > НачисленияДубль.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.НомерСтроки КАК НомерСтроки,
		|	ТаблицаНачисления.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	ТаблицаНачисления.Начисление КАК Начисление,
		|	Показатели.Показатель КАК Показатель,
		|	Показатели.Значение КАК Значение,
		|	Показатели.ЗначениеМин КАК ЗначениеМин,
		|	Показатели.ЗначениеМакс КАК ЗначениеМакс
		|ПОМЕСТИТЬ ВТНачисленияПоказатели
		|ИЗ
		|	ВТТаблицаНачисления КАК ТаблицаНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО ТаблицаНачисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|			И ТаблицаНачисления.ИдентификаторСтрокиПозиции = Показатели.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	ТаблицаНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.НомерСтроки КАК НомерСтроки,
		|	НачисленияПоказателиДубль.НомерСтроки КАК НомерСтроки1,
		|	НачисленияПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТОшибкиЗначенийПоказателей
		|ИЗ
		|	ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказателиДубль
		|		ПО НачисленияПоказатели.ИдентификаторСтрокиПозиции = НачисленияПоказателиДубль.ИдентификаторСтрокиПозиции
		|			И НачисленияПоказатели.Показатель = НачисленияПоказателиДубль.Показатель
		|			И НачисленияПоказатели.НомерСтроки > НачисленияПоказателиДубль.НомерСтроки
		|			И НачисленияПоказатели.Значение <> НачисленияПоказателиДубль.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.НомерСтроки КАК НомерСтроки,
		|	НачисленияПоказателиДубль.НомерСтроки КАК НомерСтроки1,
		|	НачисленияПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТОшибкиМинЗначенийПоказателей
		|ИЗ
		|	ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказателиДубль
		|		ПО НачисленияПоказатели.ИдентификаторСтрокиПозиции = НачисленияПоказателиДубль.ИдентификаторСтрокиПозиции
		|			И НачисленияПоказатели.Показатель = НачисленияПоказателиДубль.Показатель
		|			И НачисленияПоказатели.НомерСтроки > НачисленияПоказателиДубль.НомерСтроки
		|			И НачисленияПоказатели.ЗначениеМин <> НачисленияПоказателиДубль.ЗначениеМин
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.НомерСтроки КАК НомерСтроки,
		|	НачисленияПоказателиДубль.НомерСтроки КАК НомерСтроки1,
		|	НачисленияПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТОшибкиМаксЗначенийПоказателей
		|ИЗ
		|	ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказателиДубль
		|		ПО НачисленияПоказатели.ИдентификаторСтрокиПозиции = НачисленияПоказателиДубль.ИдентификаторСтрокиПозиции
		|			И НачисленияПоказатели.Показатель = НачисленияПоказателиДубль.Показатель
		|			И НачисленияПоказатели.НомерСтроки > НачисленияПоказателиДубль.НомерСтроки
		|			И НачисленияПоказатели.ЗначениеМакс <> НачисленияПоказателиДубль.ЗначениеМакс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ЗачетОтработанногоВремениДубль.НомерСтроки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаЗачетОтработанногоВремениДубль,
		|	ВЫБОР
		|		КОГДА НачисленияДубль.НомерСтроки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНачислениеДубль,
		|	ВЫБОР
		|		КОГДА НЕ Показатели.Показатель ЕСТЬ NULL
		|				И ЕСТЬNULL(Показатели.ЗначениеМакс, 0) <> 0
		|				И ЕСТЬNULL(Показатели.ЗначениеМин, 0) <> 0
		|				И ЕСТЬNULL(Показатели.ЗначениеМин, 0) > ЕСТЬNULL(Показатели.ЗначениеМакс, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаЗначения,
		|	ВЫБОР
		|		КОГДА ОшибкиЗначенийПоказателей.НомерСтроки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазныеЗначенияПоказателя,
		|	ОшибкиЗначенийПоказателей.Показатель КАК РазныеЗначенияПоказателяПоказатель,
		|	ВЫБОР
		|		КОГДА ОшибкиМинЗначенийПоказателей.НомерСтроки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазныеМинЗначенияПоказателя,
		|	ОшибкиМинЗначенийПоказателей.Показатель КАК РазныеМинЗначенияПоказателяПоказатель,
		|	ВЫБОР
		|		КОГДА ОшибкиМаксЗначенийПоказателей.НомерСтроки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазныеМаксЗначенияПоказателя,
		|	ОшибкиМаксЗначенийПоказателей.Показатель КАК РазныеМаксЗначенияПоказателяПоказатель,
		|	Начисления.Наименование КАК НачислениеНаименование,
		|	ПРЕДСТАВЛЕНИЕ(Показатели.Показатель) КАК ПоказательНаименование,
		|	Начисления.НомерСтроки КАК НачислениеНомерСтроки,
		|	Показатели.НомерСтроки КАК ПоказательНомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоказателей
		|ИЗ
		|	ВТДанныеНачислений КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО Начисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗачетОтработанногоВремениДубль КАК ЗачетОтработанногоВремениДубль
		|		ПО Начисления.НомерСтроки = ЗачетОтработанногоВремениДубль.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДубль КАК НачисленияДубль
		|		ПО Начисления.НомерСтроки = НачисленияДубль.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиЗначенийПоказателей КАК ОшибкиЗначенийПоказателей
		|		ПО Начисления.НомерСтроки = ОшибкиЗначенийПоказателей.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиМинЗначенийПоказателей КАК ОшибкиМинЗначенийПоказателей
		|		ПО Начисления.НомерСтроки = ОшибкиМинЗначенийПоказателей.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиМаксЗначенийПоказателей КАК ОшибкиМаксЗначенийПоказателей
		|		ПО Начисления.НомерСтроки = ОшибкиМаксЗначенийПоказателей.НомерСтроки
		|ГДЕ
		|	(ВЫБОР
		|				КОГДА ЗачетОтработанногоВремениДубль.НомерСтроки ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА НачисленияДубль.НомерСтроки ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА ОшибкиЗначенийПоказателей.НомерСтроки ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА ОшибкиМинЗначенийПоказателей.НомерСтроки ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА ОшибкиМаксЗначенийПоказателей.НомерСтроки ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА НЕ Показатели.Показатель ЕСТЬ NULL
		|						И ЕСТЬNULL(Показатели.ЗначениеМакс, 0) <> 0
		|						И ЕСТЬNULL(Показатели.ЗначениеМин, 0) <> 0
		|						И ЕСТЬNULL(Показатели.ЗначениеМин, 0) > ЕСТЬNULL(Показатели.ЗначениеМакс, 0)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТШтатноеРасписаниеАктуальное
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|ГДЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец = &Организация
		|	И ИсторияИспользованияШтатногоРасписания.Дата <= &ДатаВступленияВСилу
		|	И ИсторияИспользованияШтатногоРасписания.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК Позиция,
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Наименование КАК ПозицияШтатногоРасписанияНаименование,
		|	ИсторияИспользованияШтатногоРасписания.Используется КАК Используется
		|ПОМЕСТИТЬ ВТАктуальностьПозиций
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТШтатноеРасписаниеАктуальное КАК ШтатноеРасписаниеАктуальное
		|		ПО ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = ШтатноеРасписаниеАктуальное.ПозицияШтатногоРасписания
		|			И ИсторияИспользованияШтатногоРасписания.Дата = ШтатноеРасписаниеАктуальное.Дата
		|ГДЕ
		|	(&НеОтбиратьПоПодразделению
		|			ИЛИ ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение = &Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Позиции.Позиция = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|				И Позиции.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаНоваяПозиция,
		|	ОшибкиПоказателей.Начисление КАК Начисление,
		|	ЕСТЬNULL(ОшибкиПоказателей.ОшибкаЗачетОтработанногоВремениДубль, ЛОЖЬ) КАК ОшибкаЗачетОтработанногоВремениДубль,
		|	ЕСТЬNULL(ОшибкиПоказателей.ОшибкаНачислениеДубль, ЛОЖЬ) КАК ОшибкаНачислениеДубль,
		|	ЕСТЬNULL(ОшибкиПоказателей.ОшибкаЗначения, ЛОЖЬ) КАК ОшибкаЗначения,
		|	ЕСТЬNULL(ОшибкиПоказателей.РазныеЗначенияПоказателя, ЛОЖЬ) КАК РазныеЗначенияПоказателя,
		|	ОшибкиПоказателей.РазныеЗначенияПоказателяПоказатель КАК РазныеЗначенияПоказателяПоказатель,
		|	ЕСТЬNULL(ОшибкиПоказателей.РазныеМинЗначенияПоказателя, ЛОЖЬ) КАК РазныеМинЗначенияПоказателя,
		|	ОшибкиПоказателей.РазныеМинЗначенияПоказателяПоказатель КАК РазныеМинЗначенияПоказателяПоказатель,
		|	ЕСТЬNULL(ОшибкиПоказателей.РазныеМаксЗначенияПоказателя, ЛОЖЬ) КАК РазныеМаксЗначенияПоказателя,
		|	ОшибкиПоказателей.РазныеМаксЗначенияПоказателяПоказатель КАК РазныеМаксЗначенияПоказателяПоказатель,
		|	ЕСТЬNULL(ОшибкиПоказателей.НачислениеНаименование, """") КАК НачислениеНаименование,
		|	ЕСТЬNULL(ОшибкиПоказателей.ПоказательНаименование, """") КАК ПоказательНаименование,
		|	Позиции.НомерСтроки КАК НомерСтроки,
		|	ОшибкиПоказателей.НачислениеНомерСтроки КАК НачислениеНомерСтроки,
		|	ОшибкиПоказателей.ПоказательНомерСтроки КАК ПоказательНомерСтроки,
		|	ЛОЖЬ КАК ОшибкаАктуальнаяПозиция,
		|	ЛОЖЬ КАК ОшибкаЗакрытаяПозиция,
		|	"""" КАК ОшибкаАктуальностиПозицияНаименование,
		|	ВЫРАЗИТЬ(NULL КАК БУЛЕВО) КАК ОшибкаАктуальностиПозиция
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиПоказателей КАК ОшибкиПоказателей
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ОшибкиПоказателей.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	(ВЫБОР
		|				КОГДА Позиции.Позиция = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|						И Позиции.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА Позиции.НомерСтроки ЕСТЬ NULL
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ИЛИ ОшибкиПоказателей.ОшибкаЗачетОтработанногоВремениДубль
		|			ИЛИ ОшибкиПоказателей.ОшибкаНачислениеДубль
		|			ИЛИ ОшибкиПоказателей.ОшибкаЗначения
		|			ИЛИ ОшибкиПоказателей.РазныеЗначенияПоказателя
		|			ИЛИ ОшибкиПоказателей.РазныеМинЗначенияПоказателя
		|			ИЛИ ОшибкиПоказателей.РазныеМаксЗначенияПоказателя)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	NULL,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	NULL,
		|	ЛОЖЬ,
		|	NULL,
		|	ЛОЖЬ,
		|	NULL,
		|	"""",
		|	"""",
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВЫБОР
		|		КОГДА Позиции.НомерСтроки ЕСТЬ NULL
		|				И АктуальностьПозиций.Используется
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ Позиции.НомерСтроки ЕСТЬ NULL
		|				И НЕ АктуальностьПозиций.Используется
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	АктуальностьПозиций.Позиция.Наименование,
		|	АктуальностьПозиций.Позиция
		|ИЗ
		|	ВТАктуальностьПозиций КАК АктуальностьПозиций
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
		|		ПО АктуальностьПозиций.Позиция = Позиции.Позиция
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Позиции.НомерСтроки ЕСТЬ NULL
		|					И АктуальностьПозиций.Используется
		|				ТОГДА ИСТИНА
		|			КОГДА НЕ Позиции.НомерСтроки ЕСТЬ NULL
		|					И НЕ АктуальностьПозиций.Используется
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОшибкаАктуальнаяПозиция,
		|	НомерСтроки,
		|	НачислениеНомерСтроки,
		|	ПоказательНомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Погашает настройку использования вилки ставок в штатном расписании если расчет зарплаты не используется.
//
// Параметры:
//	- ИспользоватьРасчетЗарплаты - булево, признак использования расчета зарплаты.
//
Процедура ЗаполнитьНастройкиШтатногоРасписания(ИспользоватьРасчетЗарплаты) Экспорт
	
	Настройка = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	Настройка.Прочитать();
	
	Если Не Настройка.Выбран() Тогда
		ЗначенияПоУмолчанию = НастройкиШтатногоРасписанияПоУмолчанию();
		Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
			Настройка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплаты Тогда
		Настройка.НеИспользоватьВилкуСтавокВШтатномРасписании = Не Настройка.ИспользоватьВилкуСтавокВШтатномРасписании;
	Иначе
		Настройка.ИспользоватьВилкуСтавокВШтатномРасписании = Ложь;
		Настройка.НеИспользоватьВилкуСтавокВШтатномРасписании = Ложь;
	КонецЕсли;
	
	Настройка.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запросы по начислениям позиций штатного расписания.

Функция ЗапросВТНачисленияШтатногоРасписания(ТолькоРазрешенные, ПараметрыПостроения, ИмяВТНачисленияПозицийШтатногоРасписания = "ВТНачисленияПозицийШтатногоРасписания") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПозицииШтатногоРасписания.Период КАК Период,
		|	ПозицииШтатногоРасписания.Дата КАК Дата,
		|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК Справочник.ШтатноеРасписание).Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТНачисленияПозицийШтатногоРасписания
		|ИЗ
		|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания";
	
	ДополнитьЗапросВТШтатноеРасписаниеНачислениями(Запрос, "ВТНачисленияПозицийШтатногоРасписания", ПараметрыПостроения);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПозицииШтатногоРасписания.Период", "ПозицииШтатногоРасписания." + ПараметрыПостроения.ИмяПоляПериод);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПозицииШтатногоРасписания.ПозицияШтатногоРасписания", "ПозицииШтатногоРасписания." + ПараметрыПостроения.ИмяПоляПозицияШтатногоРасписания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПозицииШтатногоРасписания", ПараметрыПостроения.ИмяВТФильтраПозиций);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТНачисленияПозицийШтатногоРасписания", ИмяВТНачисленияПозицийШтатногоРасписания);
	
	Возврат Запрос;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запросы по ежегодным отпускам позиций штатного расписания.

Процедура СоздатьВТЕжегодныеОтпускаПозицийШтатногоРасписания(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяПоляДата = "Дата", ИмяПоляПозицияШтатногоРасписания = "ПозицияШтатногоРасписания", ИмяВТЕжегодныеОтпускаПозицийШтатногоРасписания = "ВТЕжегодныеОтпускаПозицийШтатногоРасписания") Экспорт
	
	Запрос = ЗапросВТЕжегодныеОтпускаПозицийШтатногоРасписания(
		ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяПоляДата, ИмяПоляПозицияШтатногоРасписания, ИмяВТЕжегодныеОтпускаПозицийШтатногоРасписания);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ЗапросВТЕжегодныеОтпускаПозицийШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяПоляДата, ИмяПоляПозицияШтатногоРасписания, ИмяВТЕжегодныеОтпускаПозицийШтатногоРасписания)
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата) КАК Дата,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТПоследниеДатыИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|ИЗ
			|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|			И ПозицииШтатногоРасписания.Дата >= ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТЕжегодныеОтпускаПозицийШтатногоРасписания
			|ИЗ
			|	ВТПоследниеДатыИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ПозицииШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|			И ПозицииШтатногоРасписания.Дата = ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата
			|ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
			|{ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания.Владелец.* КАК Организация,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания.Подразделение.* КАК Подразделение,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания.Должность.* КАК Должность,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания.*}
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПоследниеДатыИсторияЕжегодныхОтпусковПоШтатномуРасписанию";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
		|	ЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТЕжегодныеОтпускаПозицийШтатногоРасписания
		|ИЗ
		|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ЕжегодныеОтпуска
		|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ЕжегодныеОтпуска.Ссылка
		|{ГДЕ
		|	ЕжегодныеОтпуска.Ссылка.Владелец.* КАК Организация,
		|	ЕжегодныеОтпуска.Ссылка.Подразделение.*,
		|	ЕжегодныеОтпуска.Ссылка.Должность.*,
		|	ЕжегодныеОтпуска.Ссылка.Ссылка.* КАК ПозицияШтатногоРасписания}";
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.ПозицияШтатногоРасписания", "ПозицииШтатногоРасписания." + ИмяПоляПозицияШтатногоРасписания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.Дата", "ПозицииШтатногоРасписания." + ИмяПоляДата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЕжегодныеОтпускаПозицийШтатногоРасписания", ИмяВТЕжегодныеОтпускаПозицийШтатногоРасписания);
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных позиции штатного расписания.

Функция ОписаниеПозицииШтатногоРасписания() Экспорт
	
	ДанныеПозиции = Новый Структура();
	ДанныеПозиции.Вставить("Дата", '00010101');
	ДанныеПозиции.Вставить("ДатаУтверждения", '00010101');
	ДанныеПозиции.Вставить("ДатаЗакрытия", '00010101');
	ДанныеПозиции.Вставить("ПозицияШтатногоРасписания");
	ДанныеПозиции.Вставить("Наименование", "");
	ДанныеПозиции.Вставить("НаименованиеПолное", "");
	ДанныеПозиции.Вставить("Организация");
	ДанныеПозиции.Вставить("Подразделение");
	ДанныеПозиции.Вставить("МестоВСтруктуреПредприятия");
	ДанныеПозиции.Вставить("Должность");
	ДанныеПозиции.Вставить("РазрядКатегория");
	ДанныеПозиции.Вставить("РазрядКатегорияНадбавки");
	ДанныеПозиции.Вставить("ГрафикРаботыСотрудников");
	ДанныеПозиции.Вставить("КоличествоСтавок", 0);
	ДанныеПозиции.Вставить("ОкладТариф", 0);
	ДанныеПозиции.Вставить("ОкладТарифМин", 0);
	ДанныеПозиции.Вставить("ОкладТарифМакс", 0);
	ДанныеПозиции.Вставить("ФОТ", 0);
	ДанныеПозиции.Вставить("ФОТМин", 0);
	ДанныеПозиции.Вставить("ФОТМакс", 0);
	ДанныеПозиции.Вставить("НадбавкаЗаВредностьРазмер", 0);
	ДанныеПозиции.Вставить("НадбавкаЗаВредностьРазмерМин", 0);
	ДанныеПозиции.Вставить("НадбавкаЗаВредностьРазмерМакс", 0);
	ДанныеПозиции.Вставить("РайонныйКоэффициентРазмер", 0);
	ДанныеПозиции.Вставить("РайонныйКоэффициентРазмерМин", 0);
	ДанныеПозиции.Вставить("РайонныйКоэффициентРазмерМакс", 0);
	ДанныеПозиции.Вставить("СевернаяНадбавкаРазмер", 0);
	ДанныеПозиции.Вставить("СевернаяНадбавкаРазмерМин", 0);
	ДанныеПозиции.Вставить("СевернаяНадбавкаРазмерМакс", 0);
	ДанныеПозиции.Вставить("УсловияПриема", "");
	ДанныеПозиции.Вставить("Начисления", Новый Массив);
	ДанныеПозиции.Вставить("НезависимыеПоказатели", Новый Массив);
	ДанныеПозиции.Вставить("ЕжегодныеОтпуска", Новый Массив);
	ДанныеПозиции.Вставить("Специальности", Новый Массив);
	ДанныеПозиции.Вставить("ПрименятьСевернуюНадбавку", Ложь);
	ДанныеПозиции.Вставить("ПроцентСевернойНадбавки", 0);
	ДанныеПозиции.Вставить("РайонныйКоэффициент", 1);
	ДанныеПозиции.Вставить("СпособОтраженияЗарплатыВБухучете");
	ДанныеПозиции.Вставить("ОтношениеКЕНВД");
	ДанныеПозиции.Вставить("СтатьяФинансирования");
	ДанныеПозиции.Вставить("ТарифнаяСетка");
	ДанныеПозиции.Вставить("ТарифнаяСеткаНадбавки");
	ДанныеПозиции.Вставить("ВыплачиваетсяНадбавкаЗаВредность", Ложь);
	ДанныеПозиции.Вставить("ПроцентНадбавкиЗаВредность", 0);
	ДанныеПозиции.Вставить("ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией");
	ДанныеПозиции.Вставить("ОснованиеДосрочногоНазначенияПенсии");
	ДанныеПозиции.Вставить("ОсобыеУсловияТрудаПФР");
	ДанныеПозиции.Вставить("КодПозицииСпискаПФР");
	ДанныеПозиции.Вставить("ХарактерВыполняемыхРаботПФР");
	ДанныеПозиции.Вставить("ПервичныеДокументыПФР");
	ДанныеПозиции.Вставить("ТрудоваяФункция");
	ДанныеПозиции.Вставить("КлассУсловийТруда");
	ДанныеПозиции.Вставить("КлассУсловийТрудаПериод");
	ДанныеПозиции.Вставить("КлассУсловийТрудаДатаРегистрацииИзменений");
	ДанныеПозиции.Вставить("КатегорияПерсонала");
	ДанныеПозиции.Вставить("ВидСтажаЛетныхЭкипажей");
	ДанныеПозиции.Вставить("ВидСтажаШахтеров");
	
	ДанныеПозиции.Вставить("Занято", 0);
	ДанныеПозиции.Вставить("ЗанятаПостоянно", 0);
	ДанныеПозиции.Вставить("ЗанятаВременно", 0);
	ДанныеПозиции.Вставить("ПодработкаПостоянно", 0);
	ДанныеПозиции.Вставить("ПодработкаВременно", 0);
	ДанныеПозиции.Вставить("СовмещенаПостоянно", 0);
	ДанныеПозиции.Вставить("СовмещенаВременно", 0);
	ДанныеПозиции.Вставить("Забронирована", 0);
	ДанныеПозиции.Вставить("ВременноОсвобождена", 0);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.ДополнитьОписаниеПозицииШтатногоРасписания(ДанныеПозиции);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
		МодульТарификационнаяОтчетностьУчрежденийФМБА = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
		МодульТарификационнаяОтчетностьУчрежденийФМБА.ДополнитьОписаниеПозицииШтатногоРасписания(ДанныеПозиции);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала") Тогда
		МодульХарактеристикиПерсонала = ОбщегоНазначения.ОбщийМодуль("ХарактеристикиПерсонала");
		МодульХарактеристикиПерсонала.ДополнитьОписаниеПозицииШтатногоРасписания(ДанныеПозиции);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульЛьготыСотрудников.ДополнитьОписаниеПозицииШтатногоРасписания(ДанныеПозиции);
	КонецЕсли;
	
	Возврат ДанныеПозиции;
	
КонецФункции

Функция ОписаниеНачисленияПозицииШтатногоРасписания() Экспорт
	
	СтруктураНачисления = Новый Структура;
	СтруктураНачисления.Вставить("ИдентификаторСтрокиВидаРасчета", 0);
	СтруктураНачисления.Вставить("Размер", 0);
	СтруктураНачисления.Вставить("РазмерМин", 0);
	СтруктураНачисления.Вставить("РазмерМакс", 0);
	СтруктураНачисления.Вставить("Начисление", ПланыВидовРасчета.Начисления.ПустаяСсылка());
	СтруктураНачисления.Вставить("Показатели", Новый Массив);
	Возврат СтруктураНачисления;
	
КонецФункции

Функция ОписаниеПоказателяШтатногоРасписания() Экспорт
	
	СтруктураПоказателя = Новый Структура;
	СтруктураПоказателя.Вставить("ИдентификаторСтрокиВидаРасчета", 0);
	СтруктураПоказателя.Вставить("Значение", 0);
	СтруктураПоказателя.Вставить("ЗначениеМин", 0);
	СтруктураПоказателя.Вставить("ЗначениеМакс", 0);
	СтруктураПоказателя.Вставить("Показатель", Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка());
	Возврат СтруктураПоказателя;
	
КонецФункции

Функция ОписаниеЕжегодногоОтпускаПозицииШтатногоРасписания()
	
	СтруктураОтпуска = Новый Структура("КоличествоДнейВГод", 0);
	СтруктураОтпуска.Вставить("ВидЕжегодногоОтпуска", Справочники.ВидыОтпусков.ПустаяСсылка());
	Возврат СтруктураОтпуска;
	
КонецФункции

Функция ОписаниеСпециальностиПозицииШтатногоРасписания()
	
	СтруктураСпециальности = Новый Структура("Специальность", Справочники.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка());
	
	Возврат СтруктураСпециальности;

КонецФункции

Функция ДанныеПозицииШтатногоРасписания(Позиция, ДатаПозиции = '00010101', ЗаполнятьОписаниеНачислений = Истина, ПолноеОписаниеНачислений = Истина, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	ДанныеПозиций = ДанныеПозицийШтатногоРасписания(Истина, Позиция, ДатаПозиции, ЗаполнятьОписаниеНачислений, ПолноеОписаниеНачислений, ИсключаемыйРегистратор);
	ДанныеПозиции = ДанныеПозиций.Получить(Позиция);
	
	Если ДанныеПозиции = Неопределено Тогда
		
		ДанныеПозиции = ОписаниеПозицииШтатногоРасписания();
		
		СвойстваПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Позиция, "Владелец,Подразделение,Должность,Наименование");
		
		ДанныеПозиции.ПозицияШтатногоРасписания = Позиция;
		ДанныеПозиции.Организация = СвойстваПозиции.Владелец;
		ДанныеПозиции.Подразделение = СвойстваПозиции.Подразделение;
		ДанныеПозиции.Должность = СвойстваПозиции.Должность;
		ДанныеПозиции.Наименование = СвойстваПозиции.Наименование;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			ДанныеПозиции.МестоВСтруктуреПредприятия = МодульОрганизационнаяСтруктура.МестоПозицииВСтруктуреПредприятия(Позиция);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПозиции;
	
КонецФункции

Функция ДанныеПозицийШтатногоРасписания(ТолькоРазрешенные, Позиции = Неопределено, ДатаАктуальности = '00010101', ЗаполнятьОписаниеНачислений = Истина, ПолноеОписаниеНачислений = Истина, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	СоответствиеДанныхПозициям = Новый Соответствие;
	
	Если ТипЗнч(Позиции) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		СписокПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Позиции);
	Иначе
		СписокПозиций = Позиции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписание(ДатаАктуальности, , , Позиции);
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыйРегистратор);
		
	КонецЕсли;
	
	ПараметрыПостроения.ВключаяЗакрытые = Истина;
	
	СоздатьВТШтатноеРасписание(
		Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ Т.* ИЗ ВТШтатноеРасписание КАК Т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеПозиции = ОписаниеПозицииШтатногоРасписания();
		ЗаполнитьЗначенияСвойств(ДанныеПозиции, Выборка);
		СоответствиеДанныхПозициям.Вставить(Выборка.ПозицияШтатногоРасписания, ДанныеПозиции);
	КонецЦикла;
	
	Если СписокПозиций <> Неопределено Тогда
		
		ПозицииБезДанных = Новый Массив;
		Для каждого Позиция Из СписокПозиций Цикл
			
			Если СоответствиеДанныхПозициям.Получить(Позиция) = Неопределено Тогда
				ПозицииБезДанных.Добавить(Позиция);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПозицииБезДанных.Количество() > 0 Тогда
			
			СвойстваПозиций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПозицииБезДанных, "Владелец,Подразделение,Должность,Наименование");
			Для каждого Позиция Из ПозицииБезДанных Цикл
				
				ДанныеПозиции = ОписаниеПозицииШтатногоРасписания();
				
				СвойстваПозиции = СвойстваПозиций.Получить(Позиция);
				
				ДанныеПозиции.ПозицияШтатногоРасписания = Позиция;
				ДанныеПозиции.Организация = СвойстваПозиции.Владелец;
				ДанныеПозиции.Подразделение = СвойстваПозиции.Подразделение;
				ДанныеПозиции.Должность = СвойстваПозиции.Должность;
				ДанныеПозиции.Наименование = СвойстваПозиции.Наименование;
				
				СоответствиеДанныхПозициям.Вставить(Позиция, ДанныеПозиции);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнятьОписаниеНачислений Тогда
	
		// Начисления позиций
		ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТШтатноеРасписание");
		ПараметрыПостроения.ДополнитьОписаниемНачислений = Истина;
		ПараметрыПостроения.ПолноеОписаниеНачислений = ПолноеОписаниеНачислений;
		
		Если ИсключаемыйРегистратор <> Неопределено Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыйРегистратор);
			
		КонецЕсли;
		
		СоздатьВТНачисленияШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, "ВТНачисленияПозицийШтатногоРасписания");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Начисление КАК Начисление,
			|	НачисленияПозицийШтатногоРасписания.Размер КАК Размер,
			|	НачисленияПозицийШтатногоРасписания.РазмерМин КАК РазмерМин,
			|	НачисленияПозицийШтатногоРасписания.РазмерМакс КАК РазмерМакс,
			|	НачисленияПозицийШтатногоРасписания.Показатель КАК Показатель,
			|	НачисленияПозицийШтатногоРасписания.Значение КАК Значение,
			|	НачисленияПозицийШтатногоРасписания.ЗначениеМин КАК ЗначениеМин,
			|	НачисленияПозицийШтатногоРасписания.ЗначениеМакс КАК ЗначениеМакс,
			|	НачисленияПозицийШтатногоРасписания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
			|ИЗ
			|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|ГДЕ
			|	НачисленияПозицийШтатногоРасписания.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
			|	И ЕСТЬNULL(НачисленияПозицийШтатногоРасписания.ПлановыеНачисления, ЛОЖЬ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания
			|ИТОГИ
			|	МАКСИМУМ(Размер),
			|	МАКСИМУМ(РазмерМин),
			|	МАКСИМУМ(РазмерМакс),
			|	МАКСИМУМ(ИдентификаторСтрокиВидаРасчета)
			|ПО
			|	ПозицияШтатногоРасписания,
			|	Начисление";
		
		ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПозициям.Следующий() Цикл
			
			ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
			
			ВыборкаПоНачислениям = ВыборкаПоПозициям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				
				СтруктураНачисления = ОписаниеНачисленияПозицииШтатногоРасписания();
				ЗаполнитьЗначенияСвойств(СтруктураНачисления, ВыборкаПоНачислениям);
				
				ИнформацияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВыборкаПоНачислениям.Начисление);
				
				ВыборкаПоПоказателям = ВыборкаПоНачислениям.Выбрать();
				Пока ВыборкаПоПоказателям.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
						
						ДобавитьПоказатель = Ложь;
						Для каждого СтруктураПоказателя Из ИнформацияОНачислении.Показатели Цикл
							
							Если СтруктураПоказателя.Показатель = ВыборкаПоПоказателям.Показатель Тогда
								ДобавитьПоказатель = СтруктураПоказателя.ЗапрашиватьПриВводе;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Если НЕ ДобавитьПоказатель Тогда
							Продолжить;
						КонецЕсли;
						
						СтруктураПоказателя = ОписаниеПоказателяШтатногоРасписания();
						ЗаполнитьЗначенияСвойств(СтруктураПоказателя, ВыборкаПоПоказателям);
						СтруктураНачисления.Показатели.Добавить(СтруктураПоказателя);
						
					КонецЕсли;
					
				КонецЦикла;
				
				ДанныеПозиции.Начисления.Добавить(СтруктураНачисления);
				
			КонецЦикла;
			
			СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
			
		КонецЦикла;
		
		// Независимые показатели позиций.
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Показатель КАК Показатель,
			|	НачисленияПозицийШтатногоРасписания.Значение КАК Значение,
			|	НачисленияПозицийШтатногоРасписания.ЗначениеМин КАК ЗначениеМин,
			|	НачисленияПозицийШтатногоРасписания.ЗначениеМакс КАК ЗначениеМакс,
			|	НачисленияПозицийШтатногоРасписания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
			|ИЗ
			|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|ГДЕ
			|	НачисленияПозицийШтатногоРасписания.Начисление = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
			|	И ЕСТЬNULL(НачисленияПозицийШтатногоРасписания.ПлановыеНачисления, ЛОЖЬ)
			|ИТОГИ ПО
			|	ПозицияШтатногоРасписания";
		
		ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПозициям.Следующий() Цикл
			
			ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
			
			ВыборкаПоПоказателям = ВыборкаПоПозициям.Выбрать();
			Пока ВыборкаПоПоказателям.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
					
					СтруктураПоказателя = ОписаниеПоказателяШтатногоРасписания();
					ЗаполнитьЗначенияСвойств(СтруктураПоказателя, ВыборкаПоПоказателям);
					ДанныеПозиции.НезависимыеПоказатели.Добавить(СтруктураПоказателя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
			
		КонецЦикла;
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			МодульУправленческаяЗарплата.ДанныеУправленческихНачисленийПозицийШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, "ВТШтатноеРасписание", СоответствиеДанныхПозициям);
		КонецЕсли;
		
	КонецЕсли;
	
	// Ежегодные отпуска позиций
	
	СоздатьВТЕжегодныеОтпускаПозицийШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, "ВТШтатноеРасписание");
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжегодныеОтпускаПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ЕжегодныеОтпускаПозицийШтатногоРасписания.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпускаПозицийШтатногоРасписания.КоличествоДнейВГод КАК КоличествоДнейВГод
		|ИЗ
		|	ВТЕжегодныеОтпускаПозицийШтатногоРасписания КАК ЕжегодныеОтпускаПозицийШтатногоРасписания
		|ИТОГИ ПО
		|	ПозицияШтатногоРасписания";
	
	ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПозициям.Следующий() Цикл
		
		ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
		
		ВыборкаПоОтпускам = ВыборкаПоПозициям.Выбрать();
		Пока ВыборкаПоОтпускам.Следующий() Цикл
			
			СтруктураОтпуска = ОписаниеЕжегодногоОтпускаПозицииШтатногоРасписания();
			ЗаполнитьЗначенияСвойств(СтруктураОтпуска, ВыборкаПоОтпускам);
			ДанныеПозиции.ЕжегодныеОтпуска.Добавить(СтруктураОтпуска);
			
		КонецЦикла;
		
		СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
		
	КонецЦикла;
	
	// Специальности
	СоздатьВТСпециальностиПозицийШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, "ВТШтатноеРасписание");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпециальностиПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	СпециальностиПозицийШтатногоРасписания.Специальность КАК Специальность
		|ИЗ
		|	ВТСпециальностиПозицийШтатногоРасписания КАК СпециальностиПозицийШтатногоРасписания
		|ИТОГИ ПО
		|	ПозицияШтатногоРасписания";
	
	ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПозициям.Следующий() Цикл
		
		ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
		
		ВыборкаПоСпециальностям = ВыборкаПоПозициям.Выбрать();
		Пока ВыборкаПоСпециальностям.Следующий() Цикл
			
			СтруктураСпециальности = ОписаниеСпециальностиПозицииШтатногоРасписания();
			ЗаполнитьЗначенияСвойств(СтруктураСпециальности, ВыборкаПоСпециальностям);
			ДанныеПозиции.Специальности.Добавить(СтруктураСпециальности);
			
		КонецЦикла;
		
		СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
		
	КонецЦикла;
	
	Возврат СоответствиеДанныхПозициям;
	
КонецФункции

Функция ЗапросПредставленияШтатноеРасписание(ТолькоРазрешенные, ДатаАктуальности, ИменаСведений = Неопределено, ИмяВТПредставления_ШтатноеРасписание = "Представления_ШтатноеРасписание", ВключаяЗакрытые = Ложь, ВключатьНачисления = Истина, ИмяВТОтбораПозицийШтатногоРасписания = "") Экспорт
	
	Если ВключатьНачисления Тогда
		ИмяВТПозицииШтатногоРасписания = "ВТПозицииШтатногоРасписания";
	Иначе
		ИмяВТПозицииШтатногоРасписания = ИмяВТПредставления_ШтатноеРасписание;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяВТОтбораПозицийШтатногоРасписания) Тогда
		ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра(ИмяВТОтбораПозицийШтатногоРасписания);
	Иначе
		ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписание(ДатаАктуальности);
	КонецЕсли;
	ПараметрыПостроения.ВключаяЗакрытые = ВключаяЗакрытые;
	
	Запрос = ЗапросВТШтатноеРасписание(
		ТолькоРазрешенные, ПараметрыПостроения, , ИмяВТПозицииШтатногоРасписания);
	
	Если ВключатьНачисления Тогда
		
		ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра(ИмяВТПозицииШтатногоРасписания);
		ПараметрыПостроения.ДополнитьОписаниемНачислений = Истина;
		ПараметрыПостроения.ПолноеОписаниеНачислений = Истина;
		
		ЗапросПоНачислениям = ЗапросВТНачисленияШтатногоРасписания(
			ТолькоРазрешенные, ПараметрыПостроения, "ВТНачисленияПозицийШтатногоРасписания");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросПоНачислениям);
		
		ТекстСводногоЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НачисленияПозицийШтатногоРасписания.Период КАК Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Начисление КАК Начисление,
			|	ВЫБОР
			|		КОГДА НачисленияПозицийШтатногоРасписания.Начисление.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоТарифнаяСтавка
			|ПОМЕСТИТЬ ВТНачисленияСПризнакомТарифнойСтавки
			|ИЗ
			|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	ПозицияШтатногоРасписания,
			|	Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НачисленияПозицийШтатногоРасписания.Период КАК Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Начисление КАК Начисление,
			|	МАКСИМУМ(ПоказателиЗависящиеОтСтажа.Показатель) КАК Показатель,
			|	МАКСИМУМ(ЕСТЬNULL(ШкалаОценкиСтажа.ЗначениеПоказателя, 0)) КАК Значение
			|ПОМЕСТИТЬ ВТНачисленияСПоказателямиЗависящимиОтСтажа
			|ИЗ
			|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиЗависящиеОтСтажа
			|		ПО НачисленияПозицийШтатногоРасписания.Начисление = ПоказателиЗависящиеОтСтажа.Ссылка
			|			И (ПоказателиЗависящиеОтСтажа.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
			|		ПО (ПоказателиЗависящиеОтСтажа.Показатель = ШкалаОценкиСтажа.Ссылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияПозицийШтатногоРасписания.Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания,
			|	НачисленияПозицийШтатногоРасписания.Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НачисленияПозицийШтатногоРасписания.Период КАК Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	МИНИМУМ(ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания) КАК ЗначениеРеквизитаДопУпорядочивания
			|ПОМЕСТИТЬ ВТПорядокОсновныхНачислений
			|ИЗ
			|	ВТНачисленияСПризнакомТарифнойСтавки КАК НачисленияПозицийШтатногоРасписания
			|ГДЕ
			|	НачисленияПозицийШтатногоРасписания.ЭтоТарифнаяСтавка
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияПозицийШтатногоРасписания.Период,
			|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	ПозицияШтатногоРасписания,
			|	ЗначениеРеквизитаДопУпорядочивания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НачисленияСПризнакомТарифнойСтавки.Период КАК Период,
			|	НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияСПризнакомТарифнойСтавки.Начисление КАК Начисление,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияСПризнакомТарифнойСтавки.ЭтоТарифнаяСтавка, ЛОЖЬ)
			|				И ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания = ПорядокОсновныхНачислений.ЗначениеРеквизитаДопУпорядочивания
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоТарифнаяСтавка,
			|	ЕСТЬNULL(НачисленияПозицийШтатногоРасписания.Показатель, НачисленияСПризнакомТарифнойСтавки.Начисление) КАК Показатель,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ЕСТЬNULL(НачисленияПоказатели.ОсновнойПоказатель, ИСТИНА)
			|				ТОГДА НачисленияПозицийШтатногоРасписания.Размер
			|			ИНАЧЕ 0
			|		КОНЕЦ, 0) КАК Размер,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ЕСТЬNULL(НачисленияПоказатели.ОсновнойПоказатель, ИСТИНА)
			|				ТОГДА НачисленияПозицийШтатногоРасписания.РазмерМин
			|			ИНАЧЕ 0
			|		КОНЕЦ, 0) КАК РазмерМин,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ЕСТЬNULL(НачисленияПоказатели.ОсновнойПоказатель, ИСТИНА)
			|				ТОГДА НачисленияПозицийШтатногоРасписания.РазмерМакс
			|			ИНАЧЕ 0
			|		КОНЕЦ, 0) КАК РазмерМакс,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
			|				ТОГДА ПозицииШтатногоРасписания.ПроцентСевернойНадбавки
			|			КОГДА НЕ НачисленияСПоказателямиЗависящимиОтСтажа.Показатель ЕСТЬ NULL
			|				ТОГДА НачисленияСПоказателямиЗависящимиОтСтажа.Значение
			|			ИНАЧЕ НачисленияПозицийШтатногоРасписания.Значение
			|		КОНЕЦ, 0) КАК Значение,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
			|				ТОГДА ПозицииШтатногоРасписания.ПроцентСевернойНадбавки
			|			КОГДА НЕ НачисленияСПоказателямиЗависящимиОтСтажа.Показатель ЕСТЬ NULL
			|				ТОГДА НачисленияСПоказателямиЗависящимиОтСтажа.Значение
			|			ИНАЧЕ НачисленияПозицийШтатногоРасписания.ЗначениеМин
			|		КОНЕЦ, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
			|				ТОГДА ПозицииШтатногоРасписания.ПроцентСевернойНадбавки
			|			КОГДА НЕ НачисленияСПоказателямиЗависящимиОтСтажа.Показатель ЕСТЬ NULL
			|				ТОГДА НачисленияСПоказателямиЗависящимиОтСтажа.Значение
			|			ИНАЧЕ НачисленияПозицийШтатногоРасписания.ЗначениеМакс
			|		КОНЕЦ, 0) КАК ЗначениеМакс
			|ПОМЕСТИТЬ ВТНачисленияСПоказателями
			|ИЗ
			|	ВТНачисленияСПризнакомТарифнойСтавки КАК НачисленияСПризнакомТарифнойСтавки
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|			ПО НачисленияПозицийШтатногоРасписания.Начисление = НачисленияПоказатели.Ссылка
			|				И (ЕСТЬNULL(НачисленияПозицийШтатногоРасписания.Показатель, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) = ЕСТЬNULL(НачисленияПоказатели.Показатель, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)))
			|		ПО НачисленияСПризнакомТарифнойСтавки.Период = НачисленияПозицийШтатногоРасписания.Период
			|			И НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания = НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания
			|			И НачисленияСПризнакомТарифнойСтавки.Начисление = НачисленияПозицийШтатногоРасписания.Начисление}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокОсновныхНачислений КАК ПорядокОсновныхНачислений
			|		ПО НачисленияСПризнакомТарифнойСтавки.Период = ПорядокОсновныхНачислений.Период
			|			И НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания = ПорядокОсновныхНачислений.ПозицияШтатногоРасписания
			|			И (ВЫРАЗИТЬ(НачисленияСПризнакомТарифнойСтавки.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания = ПорядокОсновныхНачислений.ЗначениеРеквизитаДопУпорядочивания)}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
			|		ПО НачисленияСПризнакомТарифнойСтавки.Период = ПозицииШтатногоРасписания.Период
			|			И НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания = ПозицииШтатногоРасписания.ПозицияШтатногоРасписания}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателямиЗависящимиОтСтажа КАК НачисленияСПоказателямиЗависящимиОтСтажа
			|		ПО НачисленияСПризнакомТарифнойСтавки.Период = НачисленияСПоказателямиЗависящимиОтСтажа.Период
			|			И НачисленияСПризнакомТарифнойСтавки.ПозицияШтатногоРасписания = НачисленияСПоказателямиЗависящимиОтСтажа.ПозицияШтатногоРасписания
			|			И НачисленияСПризнакомТарифнойСтавки.Начисление = НачисленияСПоказателямиЗависящимиОтСтажа.Начисление}
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПозицияШтатногоРасписания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПозицииШтатногоРасписания.Период КАК Период,
			|	ПозицииШтатногоРасписания.Организация КАК Организация,
			|	ПозицииШтатногоРасписания.Подразделение КАК Подразделение,
			|	ПозицииШтатногоРасписания.Должность КАК Должность,
			|	ПозицииШтатногоРасписания.ТарифнаяСетка КАК ТарифнаяСетка,
			|	ПозицииШтатногоРасписания.РазрядКатегория КАК РазрядКатегория,
			|	ПозицииШтатногоРасписания.ТарифнаяСеткаНадбавки КАК ТарифнаяСеткаНадбавки,
			|	ПозицииШтатногоРасписания.РазрядКатегорияНадбавки КАК РазрядКатегорияНадбавки,
			|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ПозицииШтатногоРасписания.ГрафикРаботыСотрудников КАК ГрафикРаботы,
			|	ПозицииШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок,
			|	ПозицииШтатногоРасписания.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	ПозицииШтатногоРасписания.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	ПозицииШтатногоРасписания.СтатьяФинансирования КАК СтатьяФинансирования,
			|	ЕСТЬNULL(НачисленияСПоказателями.Размер, 0) КАК ФОТ,
			|	ЕСТЬNULL(НачисленияСПоказателями.РазмерМин, 0) КАК ФОТМин,
			|	ЕСТЬNULL(НачисленияСПоказателями.РазмерМакс, 0) КАК ФОТМакс,
			|	ПозицииШтатногоРасписания.ОкладТариф КАК ОкладТариф,
			|	ПозицииШтатногоРасписания.ОкладТарифМин КАК ОкладТарифМин,
			|	ПозицииШтатногоРасписания.ОкладТарифМакс КАК ОкладТарифМакс,
			|	ПозицииШтатногоРасписания.ФОТ КАК ФОТПозиции,
			|	ПозицииШтатногоРасписания.ФОТМин КАК ФОТПозицииМин,
			|	ПозицииШтатногоРасписания.ФОТМакс КАК ФОТПозицииМакс,
			|	ПозицииШтатногоРасписания.ФОТПозиции КАК ФОТПоПозиции,
			|	ПозицииШтатногоРасписания.ФОТПозицииМин КАК ФОТПоПозицииМин,
			|	ПозицииШтатногоРасписания.ФОТПозицииМакс КАК ФОТПоПозицииМакс,
			|	ПозицииШтатногоРасписания.РайонныйКоэффициент КАК РайонныйКоэффициент,
			|	ВЫБОР
			|		КОГДА ПозицииШтатногоРасписания.РайонныйКоэффициент > 1
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПрименятьРайонныйКоэффициент,
			|	ЕСТЬNULL(НачисленияСПоказателями.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК Начисление,
			|	ЕСТЬNULL(НачисленияСПоказателями.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
			|	ЕСТЬNULL(НачисленияСПоказателями.ЭтоТарифнаяСтавка, ЛОЖЬ) КАК ЭтоТарифнаяСтавка,
			|	ЕСТЬNULL(НачисленияСПоказателями.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(НачисленияСПоказателями.ЗначениеМин, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(НачисленияСПоказателями.ЗначениеМакс, 0) КАК ЗначениеМакс
			|ПОМЕСТИТЬ Представления_ШтатноеРасписание
			|ИЗ
			|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
			|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателями КАК НачисленияСПоказателями
			|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = НачисленияСПоказателями.ПозицияШтатногоРасписания
			|			И ПозицииШтатногоРасписания.Период = НачисленияСПоказателями.Период}
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНачисленияСПризнакомТарифнойСтавки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНачисленияСПоказателямиЗависящимиОтСтажа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПорядокОсновныхНачислений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНачисленияСПоказателями";
		
		ТекстСводногоЗапроса = СтрЗаменить(ТекстСводногоЗапроса, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
		ТекстСводногоЗапроса = СтрЗаменить(ТекстСводногоЗапроса, "Представления_ШтатноеРасписание", ИмяВТПредставления_ШтатноеРасписание);
		
		Если НЕ ТолькоРазрешенные Тогда
			ТекстСводногоЗапроса = СтрЗаменить(ТекстСводногоЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстСводногоЗапроса);
		
		ОбновитьЗапросПоСхеме = Ложь;
		
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(Запрос.Текст);
		
		ЗапросПредставления = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросСхемыФормирующийВТ(Схема, "Представления_ШтатноеРасписание");
		Если ЗапросПредставления <> Неопределено Тогда
			
			Для Каждого ИмяСведений Из ИменаСведений Цикл
				
				Если ЗапросПредставления.Колонки.Найти(ИмяСведений) = Неопределено Тогда
					
					ОбновитьЗапросПоСхеме = Истина;
					ЗапросПредставления.Операторы[0].ВыбираемыеПоля.Добавить("ПозицииШтатногоРасписания." + ИмяСведений);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОбновитьЗапросПоСхеме Тогда
			Запрос.Текст = Схема.ПолучитьТекстЗапроса();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции


#Область РаботаСНастройкамиШтатногоРасписания

// Предназначена для получения настроек системы.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиШтатногоРасписания() Экспорт
	
	НастройкиШтатногоРасписания = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	НастройкиШтатногоРасписания.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиШтатногоРасписания, Метаданные.РегистрыСведений.НастройкиШтатногоРасписания);
	
	Если НастройкиШтатногоРасписания.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	
	ЗначенияПоУмолчанию = НастройкиШтатногоРасписанияПоУмолчанию();
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Записывает настройки штатного расписания и применяет к базе данных их изменение.
//
// Параметры:
//			Настройки - РегистрыСведений.НастройкиШтатногоРасписания.МенеджерЗаписи
//
Процедура ЗаписатьНастройкиШтатногоРасписания(Настройки) Экспорт
	
	ТекущиеНастройки = НастройкиШтатногоРасписания();
	
	ВключениеИспользованияШтатногоРасписания =
		Настройки.ИспользоватьШтатноеРасписание
		И ТекущиеНастройки.ИспользоватьШтатноеРасписание <> Настройки.ИспользоватьШтатноеРасписание;
	
	ВключениеИспользованияИсторииШтатногоРасписания =
		Настройки.ИспользоватьИсториюИзмененияШтатногоРасписания
		И ТекущиеНастройки.ИспользоватьИсториюИзмененияШтатногоРасписания <> Настройки.ИспользоватьИсториюИзмененияШтатногоРасписания;
	
	ОтключениеИспользованияИсторииШтатногоРасписания =
		НЕ Настройки.ИспользоватьИсториюИзмененияШтатногоРасписания
		И ТекущиеНастройки.ИспользоватьИсториюИзмененияШтатногоРасписания <> Настройки.ИспользоватьИсториюИзмененияШтатногоРасписания;
	
	Попытка
		
		Если ОтключениеИспользованияИсторииШтатногоРасписания Тогда
			ПеренестиСведенияОПозицияхВСправочник();
			Настройки.Записать();
		Иначе
			
			Настройки.Записать();
			
			Если ВключениеИспользованияШтатногоРасписания Или ВключениеИспользованияИсторииШтатногоРасписания Тогда
				ПрименитьИзменениеНастроекШтатногоРасписания(ВключениеИспользованияИсторииШтатногоРасписания);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ТекстИсключения = НСтр("ru = 'Не удалось применить изменение настроек использования штатного расписания.';
								|en = 'Cannot apply change of headcount use settings.'") + " " + ПодробноеПредставлениеОшибки(ОписаниеОшибки);
		
		ЗаполнитьЗначенияСвойств(Настройки, ТекущиеНастройки);
		Настройки.Записать();
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

Функция НастройкиШтатногоРасписанияПоУмолчанию() Экспорт 

	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьШтатноеРасписание", Истина);
	ЗначенияПоУмолчанию.Вставить("НеИспользоватьШтатноеРасписание", Ложь);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьИсториюИзмененияШтатногоРасписания", Ложь);
	ЗначенияПоУмолчанию.Вставить("НеИспользоватьИсториюИзмененияШтатногоРасписания", Истина);
	ЗначенияПоУмолчанию.Вставить("ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически", Ложь);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьВилкуСтавокВШтатномРасписании", Ложь);
	ЗначенияПоУмолчанию.Вставить("НеИспользоватьВилкуСтавокВШтатномРасписании", Истина);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании", Ложь);
	ЗначенияПоУмолчанию.Вставить("ПредставлениеТарифовИНадбавок", Перечисления.ПредставлениеТарифовИНадбавок.МесячныйРазмерВРублях);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьБронированиеПозиций", Истина);
	ЗначенияПоУмолчанию.Вставить("ДнейСохраненияБрони", 14);
	
	Возврат ЗначенияПоУмолчанию;

КонецФункции

Процедура ПрименитьИзменениеНастроекШтатногоРасписания(ВключениеИспользованияИсторииШтатногоРасписания)
	
	Если ВключениеИспользованияИсторииШтатногоРасписания Тогда
		
		// Создание документов, утверждающих штатное расписание
		СоздатьУтверждениеШтатногоРасписания();
		
	КонецЕсли;
	
	// Создание недостающих позиций.
	СоздатьПозицииШтатногоРасписания(ВключениеИспользованияИсторииШтатногоРасписания);
	
	// Заполнение позиций в кадровых приказах.
	ЗаполнитьПозицииВКадровыхПриказах();
	
	// Заполнение движений регистров.
	ЗаполнитьПозицииВДвиженияхРегистров();
	
КонецПроцедуры

Процедура СоздатьПозицииШтатногоРасписания(ВключениеИспользованияИстории)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтатноеРасписание.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Утверждена";
	
	УтверждатьВновьСозданныеПозиции = Запрос.Выполнить().Пустой();
	
	Запрос.УстановитьПараметр("УтверждатьВновьСозданныеПозиции", УтверждатьВновьСозданныеПозиции);
	
	КадровыйУчетРасширенный.СоздатьВТТекущаяКадроваяРасстановка(Запрос.МенеджерВременныхТаблиц);
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "<>", Перечисления.ВидыКадровыхСобытий.НеподтвержденныеДанные);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(КадроваяИсторияСотрудниковПредыдущиеСобытия.Период) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПериодыПредыдущихСобытий
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПредыдущиеСобытия
		|		ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковПредыдущиеСобытия.Сотрудник
		|			И КадроваяИсторияСотрудников.Период > КадроваяИсторияСотрудниковПредыдущиеСобытия.Период
		|ГДЕ
		|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Организация КАК Организация,
		|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.Должность КАК Должность,
		|	КадроваяИсторияСотрудников.Период КАК Период
		|ПОМЕСТИТЬ ВТСтавкиОсвобожденныеПеремещениями
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПредыдущихСобытий КАК ПериодыПредыдущихСобытий
		|		ПО КадроваяИсторияСотрудников.Период = ПериодыПредыдущихСобытий.ПериодПредыдущий
		|			И КадроваяИсторияСотрудников.Сотрудник = ПериодыПредыдущихСобытий.Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Организация КАК Организация,
		|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|			ТОГДА -КадроваяИсторияСотрудников.КоличествоСтавок
		|		ИНАЧЕ КадроваяИсторияСотрудников.КоличествоСтавок
		|	КОНЕЦ КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.Должность КАК Должность,
		|	КадроваяИсторияСотрудников.Период КАК Период
		|ПОМЕСТИТЬ ВТТаблицаКадровойИстории
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтавкиОсвобожденныеПеремещениями.Регистратор,
		|	СтавкиОсвобожденныеПеремещениями.Организация,
		|	СтавкиОсвобожденныеПеремещениями.Подразделение,
		|	СтавкиОсвобожденныеПеремещениями.ВидСобытия,
		|	СтавкиОсвобожденныеПеремещениями.ДолжностьПоШтатномуРасписанию,
		|	-СтавкиОсвобожденныеПеремещениями.КоличествоСтавок,
		|	СтавкиОсвобожденныеПеремещениями.Должность,
		|	СтавкиОсвобожденныеПеремещениями.Период
		|ИЗ
		|	ВТСтавкиОсвобожденныеПеремещениями КАК СтавкиОсвобожденныеПеремещениями";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаКадровойИстории.Подразделение КАК Подразделение,
		|	ТаблицаКадровойИстории.Должность КАК Должность,
		|	ЕСТЬNULL(ШтатноеРасписание.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)) КАК Позиция
		|ПОМЕСТИТЬ ВТНедостающиеПозицииПоПодразделениямИДолжностям
		|ИЗ
		|	ВТТаблицаКадровойИстории КАК ТаблицаКадровойИстории
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаКадровойИстории.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаКадровойИстории.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаКадровойИстории.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКадровойИстории.Организация КАК Организация,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение КАК Подразделение,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Должность КАК Должность,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Позиция КАК Позиция,
		|	СУММА(ТаблицаКадровойИстории.КоличествоСтавок) КАК КоличествоСтавок,
		|	ВЫБОР
		|		КОГДА НедостающиеПозицииПоПодразделениямИДолжностям.Позиция = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|			ТОГДА &УтверждатьВновьСозданныеПозиции
		|		ИНАЧЕ НедостающиеПозицииПоПодразделениямИДолжностям.Позиция.Утверждена
		|	КОНЕЦ КАК Утверждена,
		|	МИНИМУМ(ТаблицаКадровойИстории.Период) КАК ДатаУтверждения,
		|	ВЫБОР
		|		КОГДА ТекущаяКадроваяРасстановка.Подразделение ЕСТЬ NULL
		|			ТОГДА НедостающиеПозицииПоПодразделениямИДолжностям.Позиция.Закрыта
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Закрыта,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТекущаяКадроваяРасстановка.Подразделение ЕСТЬ NULL
		|					И НедостающиеПозицииПоПодразделениямИДолжностям.Позиция.Закрыта
		|				ТОГДА ТаблицаКадровойИстории.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаЗакрытия,
		|	ЕСТЬNULL(ТекущаяКадроваяРасстановка.ГрафикРаботыСотрудников, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) КАК ГрафикРаботыСотрудников
		|ПОМЕСТИТЬ ВТСоздаваемыеПозицииПредварительно
		|ИЗ
		|	ВТНедостающиеПозицииПоПодразделениямИДолжностям КАК НедостающиеПозицииПоПодразделениямИДолжностям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаКадровойИстории КАК ТаблицаКадровойИстории
		|		ПО НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение = ТаблицаКадровойИстории.Подразделение
		|			И НедостающиеПозицииПоПодразделениямИДолжностям.Должность = ТаблицаКадровойИстории.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущаяКадроваяРасстановка КАК ТекущаяКадроваяРасстановка
		|		ПО НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение = ТекущаяКадроваяРасстановка.Подразделение
		|			И НедостающиеПозицииПоПодразделениямИДолжностям.Должность = ТекущаяКадроваяРасстановка.Должность
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаКадровойИстории.Организация,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Подразделение,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Должность,
		|	НедостающиеПозицииПоПодразделениямИДолжностям.Позиция,
		|	ВЫБОР
		|		КОГДА ТекущаяКадроваяРасстановка.Подразделение ЕСТЬ NULL
		|			ТОГДА НедостающиеПозицииПоПодразделениямИДолжностям.Позиция.Закрыта
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЕСТЬNULL(ТекущаяКадроваяРасстановка.ГрафикРаботыСотрудников, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)),
		|	ВЫБОР
		|		КОГДА НедостающиеПозицииПоПодразделениямИДолжностям.Позиция = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|			ТОГДА &УтверждатьВновьСозданныеПозиции
		|		ИНАЧЕ НедостающиеПозицииПоПодразделениямИДолжностям.Позиция.Утверждена
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоздаваемыеПозицииПредварительно.Организация КАК Организация,
		|	СоздаваемыеПозицииПредварительно.Подразделение КАК Подразделение,
		|	СоздаваемыеПозицииПредварительно.Должность КАК Должность,
		|	Должности.ТарифнаяСетка КАК ТарифнаяСетка,
		|	Должности.ТарифнаяСеткаНадбавки КАК ТарифнаяСеткаНадбавки,
		|	Должности.РазрядКатегория КАК РазрядКатегория,
		|	Должности.РазрядКатегорияНадбавки КАК РазрядКатегорияНадбавки,
		|	Должности.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией КАК ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
		|	Должности.ОснованиеДосрочногоНазначенияПенсии КАК ОснованиеДосрочногоНазначенияПенсии,
		|	Должности.ОсобыеУсловияТрудаПФР КАК ОсобыеУсловияТрудаПФР,
		|	Должности.ПроцентНадбавкиЗаВредность КАК ПроцентНадбавкиЗаВредность,
		|	Должности.ВыплачиваетсяНадбавкаЗаВредность КАК ВыплачиваетсяНадбавкаЗаВредность,
		|	Должности.КоличествоДнейДополнительногоОтпускаВГод КАК КоличествоДнейДополнительногоОтпускаВГод,
		|	Должности.КодПозицииСпискаПФР КАК КодПозицииСпискаПФР,
		|	Должности.ХарактерВыполняемыхРаботПФР КАК ХарактерВыполняемыхРаботПФР,
		|	Должности.ПервичныеДокументыПФР КАК ПервичныеДокументыПФР,
		|	Должности.ВидСтажаЛетныхЭкипажей КАК ВидСтажаЛетныхЭкипажей,
		|	Должности.ВидСтажаШахтеров КАК ВидСтажаШахтеров,
		|	Должности.ТрудоваяФункция КАК ТрудоваяФункция,
		|	СоздаваемыеПозицииПредварительно.КоличествоСтавок КАК КоличествоСтавок,
		|	СоздаваемыеПозицииПредварительно.Утверждена КАК Утверждена,
		|	СоздаваемыеПозицииПредварительно.ДатаУтверждения КАК ДатаУтверждения,
		|	СоздаваемыеПозицииПредварительно.Закрыта КАК Закрыта,
		|	СоздаваемыеПозицииПредварительно.ДатаЗакрытия КАК ДатаЗакрытия,
		|	СоздаваемыеПозицииПредварительно.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
		|	СоздаваемыеПозицииПредварительно.Позиция КАК Позиция
		|ИЗ
		|	ВТСоздаваемыеПозицииПредварительно КАК СоздаваемыеПозицииПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
		|		ПО СоздаваемыеПозицииПредварительно.Должность = Должности.Ссылка
		|ГДЕ
		|	СоздаваемыеПозицииПредварительно.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СоздаваемыеПозицииПредварительно.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И СоздаваемыеПозицииПредварительно.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|ИТОГИ ПО
		|	Организация";
	
	СоответствиеПозицийОрганизациям = Новый Соответствие;
	ДолжностиПозицийШтатногоРасписания = Новый Соответствие;
	
	ВыборкаПоОрганизациям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		СозданныеПозиции = Новый Массив;
		
		Выборка = ВыборкаПоОрганизациям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ИсключаемыеСвойства = "";
			Если Не ЗначениеЗаполнено(Выборка.Позиция) Тогда
				ПозицияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
			Иначе
				ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
				ИсключаемыеСвойства = "КоличествоСтавок";
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПозицияОбъект, Выборка, , ИсключаемыеСвойства);
			ПозицияОбъект.Владелец = Выборка.Организация;
			ДополнительныеПараметры = Новый Структура("ПолноеНаименованиеДолжности,ПолноеНаименованиеПодразделения", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Должность, "НаименованиеДляЗаписейОТрудовойДеятельности"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Подразделение, "НаименованиеДляЗаписейОТрудовойДеятельности"));
			
			НаименованиеПозиции = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				Выборка.Подразделение, Выборка.Должность, ДополнительныеПараметры);
			ПозицияОбъект.Наименование = НаименованиеПозиции.Наименование;
			ПозицияОбъект.НаименованиеПолное = НаименованиеПозиции.НаименованиеПолное;
			
			ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
			ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
			ПозицияОбъект.Записать();
			
			ДолжностиПозиций = ДолжностиПозицийШтатногоРасписания.Получить(ПозицияОбъект.Должность);
			Если ДолжностиПозиций = Неопределено Тогда
				
				ДолжностиПозиций = Новый Массив;
				ДолжностиПозицийШтатногоРасписания.Вставить(ПозицияОбъект.Должность, ДолжностиПозиций);
				
			КонецЕсли;
			
			ДолжностиПозиций.Добавить(ПозицияОбъект.Ссылка);
			
			Если НЕ ПозицияОбъект.Закрыта Тогда
				СозданныеПозиции.Добавить(ПозицияОбъект.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СозданныеПозиции.Количество() > 0 Тогда
			СоответствиеПозицийОрганизациям.Вставить(ВыборкаПоОрганизациям.Организация, СозданныеПозиции);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ВключениеИспользованияИстории Тогда
		
		Для каждого СоответствиеПозицийОрганизации Из СоответствиеПозицийОрганизациям Цикл
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Позиции", СоответствиеПозицийОрганизации.Значение);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ДанныеДляЗаполнения.Подразделение,
				|	ДанныеДляЗаполнения.Должность,
				|	ДанныеДляЗаполнения.Ссылка КАК ИдентификаторСтрокиПозиции
				|ИЗ
				|	Справочник.ШтатноеРасписание КАК ДанныеДляЗаполнения
				|ГДЕ
				|	ДанныеДляЗаполнения.Ссылка В(&Позиции)";
			
			ДанныеДляПолученияКадровыхДанных = Запрос.Выполнить().Выгрузить();
			
			ДанныеДляЗаполнения = ТекущиеКадровыеДанныеПозиций(
				СоответствиеПозицийОрганизации.Ключ, ДанныеДляПолученияКадровыхДанных, ТекущаяДатаСеанса());
			
			Для каждого ДанныеПозиции Из ДанныеДляЗаполнения Цикл
				
				ПозицияОбъект = ДанныеПозиции.Ключ.ПолучитьОбъект();
				ПозицияОбъект.Начисления.Очистить();
				ПозицияОбъект.Показатели.Очистить();
				
				ИдентификаторСтрокиВидаРасчета = 1;
				
				Для каждого ДанныеНачисления Из ДанныеПозиции.Значение.Начисления Цикл
					
					СтрокаНовогоНачисления = ПозицияОбъект.Начисления.Добавить();
					СтрокаНовогоНачисления.Начисление = ДанныеНачисления.Начисление;
					СтрокаНовогоНачисления.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					
					Для каждого ДанныеПоказателя Из ДанныеНачисления.Показатели Цикл
						
						СтрокаНовогоПоказателя = ПозицияОбъект.Показатели.Добавить();
						СтрокаНовогоПоказателя.Показатель = ДанныеПоказателя.Показатель;
						
						Если ДанныеПоказателя.Свойство("Значение") Тогда
							СтрокаНовогоПоказателя.Значение = ДанныеПоказателя.Значение;
						КонецЕсли;
						
						Если ДанныеПоказателя.Свойство("МинимальноеЗначение") Тогда
							СтрокаНовогоПоказателя.ЗначениеМин = ДанныеПоказателя.МинимальноеЗначение;
						КонецЕсли;
						
						Если ДанныеПоказателя.Свойство("МаксимальноеЗначение") Тогда
							СтрокаНовогоПоказателя.ЗначениеМакс = ДанныеПоказателя.МаксимальноеЗначение;
						КонецЕсли;
						
						СтрокаНовогоПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
						
					КонецЦикла;
					
					ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
					
				КонецЦикла;
				
				Для каждого ДанныеОтпуска Из ДанныеПозиции.Значение.ЕжегодныеОтпуска Цикл
					
					НоваяСтрокаОтпуска = ПозицияОбъект.ЕжегодныеОтпуска.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОтпуска, ДанныеОтпуска);
					
				КонецЦикла;
				
				Для каждого ДанныеСпециальности Из ДанныеПозиции.Значение.Специальности Цикл
					
					НоваяСтрокаСпециальности = ПозицияОбъект.Специальности.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСпециальности, ДанныеСпециальности);
					
				КонецЦикла;
				
				ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
				ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
				ОтключитьОбновлениеНастройкиПубликации(ПозицияОбъект);
				ПозицияОбъект.Записать();
				
			КонецЦикла;
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	НЕОПРЕДЕЛЕНО КАК Действие,
				|	ШтатноеРасписание.Ссылка КАК Позиция,
				|	ШтатноеРасписание.Владелец КАК Организация,
				|	ШтатноеРасписание.Подразделение КАК Подразделение,
				|	ШтатноеРасписание.Должность КАК Должность,
				|	ШтатноеРасписание.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
				|	ШтатноеРасписание.ОкладТариф КАК ОкладТариф,
				|	ШтатноеРасписание.ОкладТарифМин КАК ОкладТарифМин,
				|	ШтатноеРасписание.ОкладТарифМакс КАК ОкладТарифМакс,
				|	ШтатноеРасписание.ФОТ КАК ФОТ,
				|	ШтатноеРасписание.ФОТМин КАК ФОТМин,
				|	ШтатноеРасписание.ФОТМакс КАК ФОТМакс,
				|	ШтатноеРасписание.НадбавкаЗаВредностьРазмер КАК НадбавкаЗаВредностьРазмер,
				|	ШтатноеРасписание.НадбавкаЗаВредностьРазмерМин КАК НадбавкаЗаВредностьРазмерМин,
				|	ШтатноеРасписание.НадбавкаЗаВредностьРазмерМакс КАК НадбавкаЗаВредностьРазмерМакс,
				|	ШтатноеРасписание.РайонныйКоэффициентРазмер КАК РайонныйКоэффициентРазмер,
				|	ШтатноеРасписание.РайонныйКоэффициентРазмерМин КАК РайонныйКоэффициентРазмерМин,
				|	ШтатноеРасписание.РайонныйКоэффициентРазмерМакс КАК РайонныйКоэффициентРазмерМакс,
				|	ШтатноеРасписание.СевернаяНадбавкаРазмер КАК СевернаяНадбавкаРазмер,
				|	ШтатноеРасписание.СевернаяНадбавкаРазмерМин КАК СевернаяНадбавкаРазмерМин,
				|	ШтатноеРасписание.СевернаяНадбавкаРазмерМакс КАК СевернаяНадбавкаРазмерМакс,
				|	ШтатноеРасписание.ВыплачиваетсяНадбавкаЗаВредность КАК ВыплачиваетсяНадбавкаЗаВредность,
				|	ШтатноеРасписание.ПроцентНадбавкиЗаВредность КАК ПроцентНадбавкиЗаВредность
				|ПОМЕСТИТЬ ВТПозицииПредварительно
				|ИЗ
				|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
				|ГДЕ
				|	ШтатноеРасписание.Ссылка В(&РассчитываемыеСсылки)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПозицииПредварительноМеньшие.Позиция) КАК ИдентификаторСтрокиПозиции,
				|	ПозицииПредварительно.Действие КАК Действие,
				|	ПозицииПредварительно.Позиция КАК Позиция,
				|	ПозицииПредварительно.Организация КАК Организация,
				|	ПозицииПредварительно.Подразделение КАК Подразделение,
				|	ПозицииПредварительно.Должность КАК Должность,
				|	ПозицииПредварительно.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
				|	ПозицииПредварительно.ОкладТариф КАК ОкладТариф,
				|	ПозицииПредварительно.ОкладТарифМин КАК ОкладТарифМин,
				|	ПозицииПредварительно.ОкладТарифМакс КАК ОкладТарифМакс,
				|	ПозицииПредварительно.ФОТ КАК ФОТ,
				|	ПозицииПредварительно.ФОТМин КАК ФОТМин,
				|	ПозицииПредварительно.ФОТМакс КАК ФОТМакс,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмер КАК НадбавкаЗаВредностьРазмер,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмерМин КАК НадбавкаЗаВредностьРазмерМин,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмерМакс КАК НадбавкаЗаВредностьРазмерМакс,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмер КАК РайонныйКоэффициентРазмер,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмерМин КАК РайонныйКоэффициентРазмерМин,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмерМакс КАК РайонныйКоэффициентРазмерМакс,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмер КАК СевернаяНадбавкаРазмер,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмерМин КАК СевернаяНадбавкаРазмерМин,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмерМакс КАК СевернаяНадбавкаРазмерМакс,
				|	ПозицииПредварительно.ВыплачиваетсяНадбавкаЗаВредность КАК ВыплачиваетсяНадбавкаЗаВредность,
				|	ПозицииПредварительно.ПроцентНадбавкиЗаВредность КАК ПроцентНадбавкиЗаВредность
				|ПОМЕСТИТЬ ВТПозиции
				|ИЗ
				|	ВТПозицииПредварительно КАК ПозицииПредварительно
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПозицииПредварительно КАК ПозицииПредварительноМеньшие
				|		ПО ПозицииПредварительно.Позиция > ПозицииПредварительноМеньшие.Позиция
				|
				|СГРУППИРОВАТЬ ПО
				|	ПозицииПредварительно.Действие,
				|	ПозицииПредварительно.Позиция,
				|	ПозицииПредварительно.Организация,
				|	ПозицииПредварительно.Подразделение,
				|	ПозицииПредварительно.Должность,
				|	ПозицииПредварительно.ГрафикРаботыСотрудников,
				|	ПозицииПредварительно.ОкладТариф,
				|	ПозицииПредварительно.ОкладТарифМин,
				|	ПозицииПредварительно.ОкладТарифМакс,
				|	ПозицииПредварительно.ФОТ,
				|	ПозицииПредварительно.ФОТМин,
				|	ПозицииПредварительно.ФОТМакс,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмер,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмерМин,
				|	ПозицииПредварительно.НадбавкаЗаВредностьРазмерМакс,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмер,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмерМин,
				|	ПозицииПредварительно.РайонныйКоэффициентРазмерМакс,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмер,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмерМин,
				|	ПозицииПредварительно.СевернаяНадбавкаРазмерМакс,
				|	ПозицииПредварительно.ВыплачиваетсяНадбавкаЗаВредность,
				|	ПозицииПредварительно.ПроцентНадбавкиЗаВредность
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Позиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
				|	Позиции.Действие КАК Действие,
				|	Позиции.Позиция КАК Позиция,
				|	Позиции.Организация КАК Организация,
				|	Позиции.Подразделение КАК Подразделение,
				|	Позиции.Должность КАК Должность,
				|	Позиции.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
				|	Позиции.ОкладТариф КАК ОкладТариф,
				|	Позиции.ОкладТарифМин КАК ОкладТарифМин,
				|	Позиции.ОкладТарифМакс КАК ОкладТарифМакс,
				|	Позиции.ФОТ КАК ФОТ,
				|	Позиции.ФОТМин КАК ФОТМин,
				|	Позиции.ФОТМакс КАК ФОТМакс,
				|	Позиции.НадбавкаЗаВредностьРазмер КАК НадбавкаЗаВредностьРазмер,
				|	Позиции.НадбавкаЗаВредностьРазмерМин КАК НадбавкаЗаВредностьРазмерМин,
				|	Позиции.НадбавкаЗаВредностьРазмерМакс КАК НадбавкаЗаВредностьРазмерМакс,
				|	Позиции.РайонныйКоэффициентРазмер КАК РайонныйКоэффициентРазмер,
				|	Позиции.РайонныйКоэффициентРазмерМин КАК РайонныйКоэффициентРазмерМин,
				|	Позиции.РайонныйКоэффициентРазмерМакс КАК РайонныйКоэффициентРазмерМакс,
				|	Позиции.СевернаяНадбавкаРазмер КАК СевернаяНадбавкаРазмер,
				|	Позиции.СевернаяНадбавкаРазмерМин КАК СевернаяНадбавкаРазмерМин,
				|	Позиции.СевернаяНадбавкаРазмерМакс КАК СевернаяНадбавкаРазмерМакс,
				|	Позиции.ВыплачиваетсяНадбавкаЗаВредность КАК ВыплачиваетсяНадбавкаЗаВредность,
				|	Позиции.ПроцентНадбавкиЗаВредность КАК ПроцентНадбавкиЗаВредность
				|ИЗ
				|	ВТПозиции КАК Позиции
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Позиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
				|	ШтатноеРасписаниеНачисления.Начисление КАК Начисление,
				|	ШтатноеРасписаниеНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
				|	НЕОПРЕДЕЛЕНО КАК Действие,
				|	ШтатноеРасписаниеНачисления.Размер КАК Размер,
				|	ШтатноеРасписаниеНачисления.РазмерМин КАК РазмерМин,
				|	ШтатноеРасписаниеНачисления.РазмерМакс КАК РазмерМакс
				|ИЗ
				|	Справочник.ШтатноеРасписание.Начисления КАК ШтатноеРасписаниеНачисления
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
				|		ПО ШтатноеРасписаниеНачисления.Ссылка = Позиции.Позиция
				|ГДЕ
				|	ШтатноеРасписаниеНачисления.Ссылка В(&РассчитываемыеСсылки)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Позиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
				|	ШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
				|	ШтатноеРасписаниеПоказатели.Показатель КАК Показатель,
				|	ШтатноеРасписаниеПоказатели.Значение КАК Значение,
				|	ШтатноеРасписаниеПоказатели.ЗначениеМин КАК ЗначениеМин,
				|	ШтатноеРасписаниеПоказатели.ЗначениеМакс КАК ЗначениеМакс
				|ИЗ
				|	Справочник.ШтатноеРасписание.Показатели КАК ШтатноеРасписаниеПоказатели
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
				|		ПО ШтатноеРасписаниеПоказатели.Ссылка = Позиции.Позиция
				|ГДЕ
				|	ШтатноеРасписаниеПоказатели.Ссылка В(&РассчитываемыеСсылки)";
			
			Запрос.УстановитьПараметр("РассчитываемыеСсылки", ДанныеДляПолученияКадровыхДанных.ВыгрузитьКолонку("ИдентификаторСтрокиПозиции"));
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ОписаниеПозиций = Новый Структура;
			ОписаниеПозиций.Вставить("Организация", СоответствиеПозицийОрганизации.Ключ);
			ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ТекущаяДатаСеанса());
			ОписаниеПозиций.Вставить("Позиции", РезультатЗапроса[РезультатЗапроса.Количество() - 3].Выгрузить());
			ОписаниеПозиций.Вставить("Начисления", РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить());
			ОписаниеПозиций.Вставить("Показатели", РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить());
			
			РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
			
			Для каждого СтруктураПозиции Из ОписаниеПозиций.Позиции Цикл
				
				ПозицияОбъект = СтруктураПозиции.Позиция.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ПозицияОбъект, СтруктураПозиции, СвойстваПозицииСРезультатамиРасчетаФОТ());
				
				СтрокиНачислений = ОписаниеПозиций.Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтруктураПозиции.ИдентификаторСтрокиПозиции));
				Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
					СтрокиПозиции = ПозицияОбъект.Начисления.НайтиСтроки(Новый Структура("Начисление", СтрокаНачислений.Начисление));
					Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
						ЗаполнитьЗначенияСвойств(СтрокаПозиции, СтрокаНачислений, "Размер,РазмерМин,РазмерМакс");
					КонецЦикла;
				КонецЦикла;
				
				ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
				ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
				ОтключитьОбновлениеНастройкиПубликации(ПозицияОбъект);
				ПозицияОбъект.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДолжностиПозицийШтатногоРасписания.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("СписокДолжностей", ОбщегоНазначения.ВыгрузитьКолонку(ДолжностиПозицийШтатногоРасписания, "Ключ"));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КлассыУсловийТрудаПоДолжностям.Период КАК Период,
			|	КлассыУсловийТрудаПоДолжностям.Должность КАК Должность,
			|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
			|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений,
			|	КлассыУсловийТрудаПоДолжностям.Основание
			|ИЗ
			|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
			|ГДЕ
			|	КлассыУсловийТрудаПоДолжностям.Должность В(&СписокДолжностей)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Должность,
			|	Период";
		
		ВыборкаРегистра = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРегистра.СледующийПоЗначениюПоля("Должность") Цикл
			
			ТаблицаРегистра = Новый ТаблицаЗначений;
			ТаблицаРегистра.Колонки.Добавить("Период");
			ТаблицаРегистра.Колонки.Добавить("Должность");
			ТаблицаРегистра.Колонки.Добавить("КлассУсловийТруда");
			ТаблицаРегистра.Колонки.Добавить("ДатаРегистрацииИзменений");
			ТаблицаРегистра.Колонки.Добавить("Основание");
			
			Пока ВыборкаРегистра.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаРегистра.Добавить(), ВыборкаРегистра);
			КонецЦикла;
			
			Если ТаблицаРегистра.Количество() > 0 Тогда
				
				ПозицииДолжности = ДолжностиПозицийШтатногоРасписания.Получить(ВыборкаРегистра.Должность);
				Для каждого ПозицияДолжности Из ПозицииДолжности Цикл
					
					НаборЗаписей = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Должность.Установить(ПозицияДолжности);
					
					Для каждого СтрокаТаблицыРегистра Из ТаблицаРегистра Цикл
						
						Запись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицыРегистра);
						Запись.Должность = ПозицияДолжности;
						
					КонецЦикла;
					
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
					НаборЗаписей.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Обновление структуры справочника ШтатноеРасписание.
	Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписания();
	
КонецПроцедуры

Процедура ЗаполнитьПозицииВКадровыхПриказах()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	Документ.КадровыйПеревод КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.ДатаНачала >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка)))
		|ИЗ
		|	Документ.ПереводКДругомуРаботодателю КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.ДатаПриема >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка)))
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.ДатаПриема >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		
		Запрос.Текст = 	Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"
			+ 	"ВЫБРАТЬ
			  	|	ТаблицаДокумента.Ссылка КАК Ссылка,
			  	|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) КАК ДолжностьПоШтатномуРасписанию
			  	|ИЗ
			  	|	Документ.НазначениеПодработки КАК ТаблицаДокумента
			  	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			  	|		ПО ТаблицаДокумента.Организация = ШтатноеРасписание.Владелец
			  	|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
			  	|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
			  	|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
			  	|			И (ШтатноеРасписание.Утверждена)
			  	|			И ТаблицаДокумента.ДатаНачала >= ШтатноеРасписание.ДатаУтверждения
			  	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
			  	|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеУтвержденные.Владелец
			  	|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
			  	|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
			  	|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
			  	|			И (ШтатноеРасписание.Утверждена)
			  	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
			  	|		ПО ТаблицаДокумента.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
			  	|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
			  	|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
			  	|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
			  	|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
			  	|ГДЕ
			  	|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
			  	|
			  	|СГРУППИРОВАТЬ ПО
			  	|	ТаблицаДокумента.Ссылка
			  	|
			  	|ИМЕЮЩИЕ
			  	|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДолжностьПоШтатномуРасписанию = Выборка.ДолжностьПоШтатномуРасписанию;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении позиций в кадровых приказах не удалось записать %1, этот документ необходимо обработать в ручном режиме.';
						|en = 'Cannot save %1 while populating positions in personnel orders, this document should be processed manually.'"),
					ДокументОбъект.Ссылка);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ДокументОбъект.Ссылка);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.Ссылка.Месяц >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.НомерСтроки
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.НомерСтроки,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка)))
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Ссылка.ПодразделениеНовое = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.Ссылка.ДатаПеремещения >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Ссылка.ПодразделениеНовое = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Ссылка.ПодразделениеНовое = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.НомерСтроки
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.НомерСтроки,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка)))
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.ДатаПриема >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.НомерСтроки
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.НомерСтроки,
		|	ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка)))
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписание.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписание.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписание.Должность
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.Утверждена)
		|			И ТаблицаДокумента.ДатаНачала >= ШтатноеРасписание.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеУтвержденные
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписаниеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеУтвержденные.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписаниеУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписаниеНеУтвержденные
		|		ПО ТаблицаДокумента.Ссылка.Организация = ШтатноеРасписаниеНеУтвержденные.Владелец
		|			И ТаблицаДокумента.Подразделение = ШтатноеРасписаниеНеУтвержденные.Подразделение
		|			И ТаблицаДокумента.Должность = ШтатноеРасписаниеНеУтвержденные.Должность
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.ГруппаПозицийПодразделения)
		|			И (НЕ ШтатноеРасписаниеНеУтвержденные.Утверждена)
		|ГДЕ
		|	ТаблицаДокумента.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.НомерСтроки
		|
		|ИМЕЮЩИЕ
		|	НЕ ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписание.Ссылка), ЕСТЬNULL(МАКСИМУМ(ШтатноеРасписаниеУтвержденные.Ссылка), МАКСИМУМ(ШтатноеРасписаниеНеУтвержденные.Ссылка))) ЕСТЬ NULL
		|ИТОГИ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
			
			ВыборкаПоНомерамСтрок = ВыборкаПоДокументам.Выбрать();
			Пока ВыборкаПоНомерамСтрок.Следующий() Цикл
				
				СтрокаДокумента = ДокументОбъект.Сотрудники.Найти(ВыборкаПоНомерамСтрок.НомерСТроки, "НомерСтроки");
				Если СтрокаДокумента <> Неопределено Тогда
					СтрокаДокумента.ДолжностьПоШтатномуРасписанию = ВыборкаПоНомерамСтрок.ДолжностьПоШтатномуРасписанию;
				КонецЕсли;
				
			КонецЦикла;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении позиций в кадровых приказах не удалось записать %1, этот документ необходимо обработать в ручном режиме.';
						|en = 'Cannot save %1 while populating positions in personnel orders, this document should be processed manually.'"),
					ДокументОбъект.Ссылка);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ДокументОбъект.Ссылка);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ЗаполнитьПозицииВКадровыхПриказах(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПозицииВДвиженияхРегистров()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Восстановление движений по регистру сведений КадроваяИсторияСотрудников.
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|	И КадроваяИсторияСотрудников.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Организация КАК Организация,
		|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
		|	ВЫБОР
		|		КОГДА КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(МАКСИМУМ(Позиции.Ссылка), ЕСТЬNULL(МАКСИМУМ(ПозицииУтвержденные.Ссылка), МАКСИМУМ(ПозицииНеУтвержденные.Ссылка)))
		|		ИНАЧЕ КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию
		|	КОНЕЦ КАК ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	КадроваяИсторияСотрудников.Должность КАК Должность,
		|	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо,
		|	КадроваяИсторияСотрудников.ВидДоговора КАК ВидДоговора,
		|	КадроваяИсторияСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник КАК ЭтоГоловнойСотрудник
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК Позиции
		|		ПО КадроваяИсторияСотрудников.Подразделение = Позиции.Подразделение
		|			И КадроваяИсторияСотрудников.Должность = Позиции.Должность
		|			И (НЕ Позиции.ГруппаПозицийПодразделения)
		|			И (Позиции.Утверждена)
		|			И КадроваяИсторияСотрудников.Период >= Позиции.ДатаУтверждения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицииУтвержденные
		|		ПО КадроваяИсторияСотрудников.Подразделение = ПозицииУтвержденные.Подразделение
		|			И КадроваяИсторияСотрудников.Должность = ПозицииУтвержденные.Должность
		|			И (НЕ ПозицииУтвержденные.ГруппаПозицийПодразделения)
		|			И (ПозицииУтвержденные.Утверждена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицииНеУтвержденные
		|		ПО КадроваяИсторияСотрудников.Подразделение = ПозицииНеУтвержденные.Подразделение
		|			И КадроваяИсторияСотрудников.Должность = ПозицииНеУтвержденные.Должность
		|			И (НЕ ПозицииНеУтвержденные.ГруппаПозицийПодразделения)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО КадроваяИсторияСотрудников.Регистратор = Регистраторы.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию,
		|	КадроваяИсторияСотрудников.ВидСобытия,
		|	КадроваяИсторияСотрудников.КоличествоСтавок,
		|	КадроваяИсторияСотрудников.Должность,
		|	КадроваяИсторияСотрудников.ДействуетДо,
		|	КадроваяИсторияСотрудников.ВидДоговора,
		|	КадроваяИсторияСотрудников.ГоловнойСотрудник,
		|	КадроваяИсторияСотрудников.ЭтоГоловнойСотрудник
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		ВыборкаПоЗаписям = ВыборкаПоРегистраторам.Выбрать();
		Пока ВыборкаПоЗаписям.Следующий() Цикл
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаПоЗаписям);
			
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	// Восстановление движений по интервальному регистру КадроваяИсторияСотрудников 
	ЗарплатаКадрыПериодическиеРегистры.ОбновитьРесурсыИнтервальногоРегистра("КадроваяИсторияСотрудников");
	
	// Восстановление движений по регистру сведений ЗанятостьПозицийШтатногоРасписания
	ЗаполнитьПозицииВДвиженияхРегистраСведенийЗанятостьПозицийШтатногоРасписания();
	
	// Восстановление движений по регистру сведений ПараметрыПериодовСтажаПФР.
	ЗаполнитьПозицииВДвиженияхРегистраСведенийПараметрыПериодовСтажаПФР();
	
	// Заполнение данных для подбора сотрудников
	КадровыйУчетРасширенный.ЗаполнитьДанныеДляПодбораСотрудников();
	
КонецПроцедуры

Процедура ЗаполнитьПозицииВДвиженияхРегистраСведенийЗанятостьПозицийШтатногоРасписания()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗанятостьПозицийШтатногоРасписания.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗанятостьПозицийШтатногоРасписания.Период КАК Период,
		|	ЗанятостьПозицийШтатногоРасписания.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ЗанятостьПозицийШтатногоРасписания.Регистратор = Регистраторы.Регистратор
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)";
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Ложь, "ДолжностьПоШтатномуРасписанию", , Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятостьПозицийШтатногоРасписания.Период КАК Период,
		|	ЗанятостьПозицийШтатногоРасписания.Регистратор КАК Регистратор,
		|	ЗанятостьПозицийШтатногоРасписания.Сотрудник КАК Сотрудник,
		|	ЗанятостьПозицийШтатногоРасписания.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗанятостьПозицийШтатногоРасписания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗанятостьПозицийШтатногоРасписания.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|			ТОГДА КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию
		|		ИНАЧЕ ЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания
		|	КОНЕЦ КАК ПозицияШтатногоРасписания,
		|	ЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции КАК ВидЗанятостиПозиции,
		|	ЗанятостьПозицийШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятостьПозицийШтатногоРасписания.ДействуетДо КАК ДействуетДо,
		|	ЗанятостьПозицийШтатногоРасписания.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник,
		|	ЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения КАК ПланируемаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ЗанятостьПозицийШтатногоРасписания.Период = КадровыеДанныеСотрудников.Период
		|			И ЗанятостьПозицийШтатногоРасписания.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ЗанятостьПозицийШтатногоРасписания.Регистратор = Регистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	ЗарплатаКадрыПериодическиеРегистры.ОбновитьРесурсыИнтервальногоРегистра("ЗанятостьПозицийШтатногоРасписания");
	
КонецПроцедуры

Процедура ЗаполнитьПозицииВДвиженияхРегистраСведенийПараметрыПериодовСтажаПФР(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ПараметрыПериодовСтажаПФР.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыКОбновлению
		|ИЗ
		|	РегистрСведений.ПараметрыПериодовСтажаПФР КАК ПараметрыПериодовСтажаПФР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ПараметрыПериодовСтажаПФР.Регистратор = КадроваяИсторияСотрудников.Регистратор
		|			И ПараметрыПериодовСтажаПФР.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|ГДЕ
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Перечисление.ЗначениеРесурсаРегистровСостоянийСотрудника.Установлено)
		|	И ПараметрыПериодовСтажаПФР.ДолжностьПоШтатномуРасписанию <> ЕСТЬNULL(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию, ПараметрыПериодовСтажаПФР.ДолжностьПоШтатномуРасписанию)
		|	И ПараметрыПериодовСтажаПФР.Начало = НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыПериодовСтажаПФР.Регистратор КАК Регистратор,
		|	ПараметрыПериодовСтажаПФР.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПараметрыПериодовСтажаПФР.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПараметрыПериодовСтажаПФР.ТипДоговора КАК ТипДоговора,
		|	ПараметрыПериодовСтажаПФР.Начало КАК Начало,
		|	ПараметрыПериодовСтажаПФР.Окончание КАК Окончание,
		|	ПараметрыПериодовСтажаПФР.Приоритет КАК Приоритет,
		|	ПараметрыПериодовСтажаПФР.Сторно КАК Сторно,
		|	ПараметрыПериодовСтажаПФР.ДокументОснование КАК ДокументОснование,
		|	ПараметрыПериодовСтажаПФР.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ПараметрыПериодовСтажаПФР.Сотрудник КАК Сотрудник,
		|	ПараметрыПериодовСтажаПФР.ВидСтажаПФР КАК ВидСтажаПФР,
		|	ПараметрыПериодовСтажаПФР.Должность КАК Должность,
		|	ПараметрыПериодовСтажаПФР.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Перечисление.ЗначениеРесурсаРегистровСостоянийСотрудника.Установлено)
		|				И НЕ КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию ЕСТЬ NULL
		|			ТОГДА КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию
		|		ИНАЧЕ ПараметрыПериодовСтажаПФР.ДолжностьПоШтатномуРасписанию
		|	КОНЕЦ КАК ДолжностьПоШтатномуРасписанию,
		|	ПараметрыПериодовСтажаПФР.ГрафикРаботы КАК ГрафикРаботы,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаВидСтажаПФР КАК ИспользованиеРесурсаВидСтажаПФР,
		|	ПараметрыПериодовСтажаПФР.КоличествоСтавок КАК КоличествоСтавок,
		|	ПараметрыПериодовСтажаПФР.Территория КАК Территория,
		|	ПараметрыПериодовСтажаПФР.УсловияТруда КАК УсловияТруда,
		|	ПараметрыПериодовСтажаПФР.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ПараметрыПериодовСтажаПФР.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ПараметрыПериодовСтажаПФР.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаОрганизация КАК ИспользованиеРесурсаОрганизация,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаПодразделение КАК ИспользованиеРесурсаПодразделение,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаДолжность КАК ИспользованиеРесурсаДолжность,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаДолжностьПоШтатномуРасписанию КАК ИспользованиеРесурсаДолжностьПоШтатномуРасписанию,
		|	ПараметрыПериодовСтажаПФР.Организация КАК Организация,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаГрафикРаботы КАК ИспользованиеРесурсаГрафикРаботы,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаКоличествоСтавок КАК ИспользованиеРесурсаКоличествоСтавок,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаТерритория КАК ИспользованиеРесурсаТерритория,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаУсловияТруда КАК ИспользованиеРесурсаУсловияТруда,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаТерриториальныеУсловия КАК ИспользованиеРесурсаТерриториальныеУсловия,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаОсобыеУсловияТруда КАК ИспользованиеРесурсаОсобыеУсловияТруда,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаОснованиеВыслугиЛет КАК ИспользованиеРесурсаОснованиеВыслугиЛет,
		|	ПараметрыПериодовСтажаПФР.ВнутреннееСовместительство КАК ВнутреннееСовместительство,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаВнутреннееСовместительство КАК ИспользованиеРесурсаВнутреннееСовместительство,
		|	ПараметрыПериодовСтажаПФР.ТерриториальныеУсловияДополнительные КАК ТерриториальныеУсловияДополнительные,
		|	ПараметрыПериодовСтажаПФР.ИспользованиеРесурсаТерриториальныеУсловияДополнительные КАК ИспользованиеРесурсаТерриториальныеУсловияДополнительные
		|ПОМЕСТИТЬ ВТДанныеРегистра
		|ИЗ
		|	ВТРегистраторыКОбновлению КАК РегистраторыКОбновлению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыПериодовСтажаПФР КАК ПараметрыПериодовСтажаПФР
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ПО ПараметрыПериодовСтажаПФР.Регистратор = КадроваяИсторияСотрудников.Регистратор
		|				И ПараметрыПериодовСтажаПФР.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|				И (ПараметрыПериодовСтажаПФР.Начало = НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ))
		|		ПО РегистраторыКОбновлению.Регистратор = ПараметрыПериодовСтажаПФР.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистра.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДанныеРегистра.ТипДоговора КАК ТипДоговора,
		|	ДанныеРегистра.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(ДанныеРегистра.Начало) КАК Начало,
		|	МАКСИМУМ(ДанныеРегистра.Окончание) КАК Окончание
		|ПОМЕСТИТЬ ВТКлючиИзменившихсяДанных
		|ИЗ
		|	ВТДанныеРегистра КАК ДанныеРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра.ГоловнаяОрганизация,
		|	ДанныеРегистра.ТипДоговора,
		|	ДанныеРегистра.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистра.Регистратор КАК Регистратор,
		|	ДанныеРегистра.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДанныеРегистра.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеРегистра.ТипДоговора КАК ТипДоговора,
		|	ДанныеРегистра.Начало КАК Начало,
		|	ДанныеРегистра.Окончание КАК Окончание,
		|	ДанныеРегистра.Приоритет КАК Приоритет,
		|	ДанныеРегистра.Сторно КАК Сторно,
		|	ДанныеРегистра.ДокументОснование КАК ДокументОснование,
		|	ДанныеРегистра.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ДанныеРегистра.Сотрудник КАК Сотрудник,
		|	ДанныеРегистра.ВидСтажаПФР КАК ВидСтажаПФР,
		|	ДанныеРегистра.Должность КАК Должность,
		|	ДанныеРегистра.Подразделение КАК Подразделение,
		|	ДанныеРегистра.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ДанныеРегистра.ГрафикРаботы КАК ГрафикРаботы,
		|	ДанныеРегистра.ИспользованиеРесурсаВидСтажаПФР КАК ИспользованиеРесурсаВидСтажаПФР,
		|	ДанныеРегистра.КоличествоСтавок КАК КоличествоСтавок,
		|	ДанныеРегистра.Территория КАК Территория,
		|	ДанныеРегистра.УсловияТруда КАК УсловияТруда,
		|	ДанныеРегистра.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ДанныеРегистра.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ДанныеРегистра.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ДанныеРегистра.ИспользованиеРесурсаОрганизация КАК ИспользованиеРесурсаОрганизация,
		|	ДанныеРегистра.ИспользованиеРесурсаПодразделение КАК ИспользованиеРесурсаПодразделение,
		|	ДанныеРегистра.ИспользованиеРесурсаДолжность КАК ИспользованиеРесурсаДолжность,
		|	ДанныеРегистра.ИспользованиеРесурсаДолжностьПоШтатномуРасписанию КАК ИспользованиеРесурсаДолжностьПоШтатномуРасписанию,
		|	ДанныеРегистра.Организация КАК Организация,
		|	ДанныеРегистра.ИспользованиеРесурсаГрафикРаботы КАК ИспользованиеРесурсаГрафикРаботы,
		|	ДанныеРегистра.ИспользованиеРесурсаКоличествоСтавок КАК ИспользованиеРесурсаКоличествоСтавок,
		|	ДанныеРегистра.ИспользованиеРесурсаТерритория КАК ИспользованиеРесурсаТерритория,
		|	ДанныеРегистра.ИспользованиеРесурсаУсловияТруда КАК ИспользованиеРесурсаУсловияТруда,
		|	ДанныеРегистра.ИспользованиеРесурсаТерриториальныеУсловия КАК ИспользованиеРесурсаТерриториальныеУсловия,
		|	ДанныеРегистра.ИспользованиеРесурсаОсобыеУсловияТруда КАК ИспользованиеРесурсаОсобыеУсловияТруда,
		|	ДанныеРегистра.ИспользованиеРесурсаОснованиеВыслугиЛет КАК ИспользованиеРесурсаОснованиеВыслугиЛет,
		|	ДанныеРегистра.ВнутреннееСовместительство КАК ВнутреннееСовместительство,
		|	ДанныеРегистра.ИспользованиеРесурсаВнутреннееСовместительство КАК ИспользованиеРесурсаВнутреннееСовместительство,
		|	ДанныеРегистра.ТерриториальныеУсловияДополнительные КАК ТерриториальныеУсловияДополнительные,
		|	ДанныеРегистра.ИспользованиеРесурсаТерриториальныеУсловияДополнительные КАК ИспользованиеРесурсаТерриториальныеУсловияДополнительные
		|ИЗ
		|	ВТДанныеРегистра КАК ДанныеРегистра
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
	Иначе
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
		
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, "РегистрСведений.ПараметрыПериодовСтажаПФР.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПараметрыПериодовСтажаПФР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
		ИзмеренияОтбора = Новый Массив;
		ИзмеренияОтбора.Добавить("ФизическоеЛицо");
		ИзмеренияОтбора.Добавить("ГоловнаяОрганизация");
		ИзмеренияОтбора.Добавить("ТипДоговора");
		
		УчетСтажаПФР.ОбновитьДанныеВторичногоРегистра(Запрос.МенеджерВременныхТаблиц, ИзмеренияОтбора, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУтверждениеШтатногоРасписания()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания КАК УтверждениеШтатногоРасписания
		|		ПО Организации.Ссылка = УтверждениеШтатногоРасписания.Организация
		|			И (УтверждениеШтатногоРасписания.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания КАК ИзменениеШтатногоРасписания
		|		ПО Организации.Ссылка = ИзменениеШтатногоРасписания.Организация
		|			И (ИзменениеШтатногоРасписания.Проведен)
		|ГДЕ
		|	УтверждениеШтатногоРасписания.Ссылка ЕСТЬ NULL
		|	И ИзменениеШтатногоРасписания.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Организация КАК Организация,
		|	МИНИМУМ(ЕСТЬNULL(ШтатноеРасписание.ДатаУтверждения, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаУтверждения
		|ПОМЕСТИТЬ ВТОрганизацииПериоды
		|ИЗ
		|	ВТОрганизации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО Организации.Организация = ШтатноеРасписание.Владелец
		|			И (НЕ ШтатноеРасписание.Закрыта)
		|			И (НЕ ШтатноеРасписание.ГруппаПозицийПодразделения)
		|			И (ШтатноеРасписание.ДатаУтверждения <> ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	Организации.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрганизацииПериоды.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(ОрганизацииПериоды.ДатаУтверждения, МЕСЯЦ) КАК МесяцВступленияВСилу
		|ИЗ
		|	ВТОрганизацииПериоды КАК ОрганизацииПериоды";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументУтверждение = Документы.УтверждениеШтатногоРасписания.СоздатьДокумент();
		ДокументУтверждение.Организация = Выборка.Организация;
		ДокументУтверждение.Ответственный = Пользователи.ТекущийПользователь();
		
		ДокументУтверждение.МесяцВступленияВСилу = Выборка.МесяцВступленияВСилу;
		
		ПараметрыВыполнения = Новый Структура("Организация,Подразделение,ДатаВступленияВСилу");
		ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ДокументУтверждение);
		ПараметрыВыполнения.ДатаВступленияВСилу = ТекущаяДатаСеанса();
		
		ДокументУтверждение.АвтозаполнениеТекущимиДаннымиШР();
		
		ПараметрыВыполнения.Вставить("Позиции", ДокументУтверждение.Позиции.Выгрузить());
		ПараметрыВыполнения.Вставить("Начисления", ДокументУтверждение.Начисления.Выгрузить());
		ПараметрыВыполнения.Вставить("Показатели", ДокументУтверждение.Показатели.Выгрузить());
		ПараметрыВыполнения.Вставить("ЕжегодныеОтпуска", ДокументУтверждение.ЕжегодныеОтпуска.Выгрузить());
		ПараметрыВыполнения.Вставить("Специальности", ДокументУтверждение.Специальности.Выгрузить());
		
		ДанныеЗаполнения = РезультатЗаполненияПоТекущейКадровойРасстановке(ПараметрыВыполнения);
		
		ЗаполнитьДокументПоДаннымЗаполнения(ДокументУтверждение, ДанныеЗаполнения);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Позиции.Должность КАК Должность,
			|	Позиции.Подразделение КАК Подразделение
			|ПОМЕСТИТЬ ВТПозиции
			|ИЗ
			|	&Позиции КАК Позиции
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	КадроваяИсторияСотрудников.Период КАК Период
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
			|		ПО КадроваяИсторияСотрудников.Должность = Позиции.Должность
			|			И КадроваяИсторияСотрудников.Подразделение = Позиции.Подразделение
			|			И (КадроваяИсторияСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НеподтвержденныеДанные))
			|ГДЕ
			|	КадроваяИсторияСотрудников.Организация = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
		
		Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		Запрос.УстановитьПараметр("Позиции", ДокументУтверждение.Позиции);
		
		ВыборкаПоРаннимДатам = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоРаннимДатам.Следующий() Тогда
			
			Если Не ЗначениеЗаполнено(ДокументУтверждение.МесяцВступленияВСилу)
				Или ЗначениеЗаполнено(ВыборкаПоРаннимДатам.Период)
					И ВыборкаПоРаннимДатам.Период < ДокументУтверждение.МесяцВступленияВСилу Тогда
				
				ДокументУтверждение.МесяцВступленияВСилу = НачалоМесяца(ВыборкаПоРаннимДатам.Период);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументУтверждение.МесяцВступленияВСилу) Тогда
			ДокументУтверждение.МесяцВступленияВСилу = НачалоМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		ЗаполнитьПодписантовДокумента(ДокументУтверждение, ДокументУтверждение.МесяцВступленияВСилу);
		
		ДокументУтверждение.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		ДокументУтверждение.Дата = ДокументУтверждение.МесяцВступленияВСилу;
		
		Если ДокументУтверждение.Позиции.Количество() > 0 Тогда
			ДокументУтверждение.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиСведенияОПозицияхВСправочник()
	
	ДанныеПозиций = ДанныеПозицийШтатногоРасписания(Ложь, , ТекущаяДатаСеанса(), , Ложь);
	
	Для каждого ОписаниеПозиции Из ДанныеПозиций Цикл
		
		ПозицияОбъект = ОписаниеПозиции.Ключ.ПолучитьОбъект();
		
		ЗаполнитьОбъектСправочникаСведениямиОПозиции(ПозицияОбъект, ОписаниеПозиции);
		
		ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПозицияОбъект);
		ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(ПозицияОбъект);
		ОтключитьОбновлениеНастройкиПубликации(ПозицияОбъект);
		ПозицияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектСправочникаСведениямиОПозиции(ПозицияОбъект, ОписанияПозиции)
	
	ЗаполнитьЗначенияСвойств(ПозицияОбъект, ОписанияПозиции.Значение, , "Подразделение,Должность,Начисления,ЕжегодныеОтпуска,Специальности");
	
	// Сведения о начислениях
	Начисления = ПозицияОбъект.Начисления;
	Начисления.Очистить();
	
	Показатели = ПозицияОбъект.Показатели;
	Показатели.Очистить();
	
	Для каждого ОписаниеНачисления Из ОписанияПозиции.Значение.Начисления Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), ОписаниеНачисления);
		Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
			ЗаполнитьЗначенияСвойств(Показатели.Добавить(), ОписаниеПоказателя);
		КонецЦикла;
	КонецЦикла;
	
	// Сведения о независимых показателях.
	Для каждого ОписаниеПоказателя Из ОписанияПозиции.Значение.НезависимыеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(Показатели.Добавить(), ОписаниеПоказателя);
	КонецЦикла;
	
	// Ежегодные отпуска
	ЕжегодныеОтпуска = ПозицияОбъект.ЕжегодныеОтпуска;
	ЕжегодныеОтпуска.Очистить();
	Для каждого ОписаниеОтпуска Из ОписанияПозиции.Значение.ЕжегодныеОтпуска Цикл
		ЗаполнитьЗначенияСвойств(ЕжегодныеОтпуска.Добавить(), ОписаниеОтпуска);
	КонецЦикла;
	
	// Специальности
	Специальности = ПозицияОбъект.Специальности;
	Специальности.Очистить();
	Для каждого ОписаниеСпециальности Из ОписанияПозиции.Значение.Специальности Цикл
		ЗаполнитьЗначенияСвойств(Специальности.Добавить(), ОписаниеСпециальности);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьОтчетовПоШтатномуРасписанию(Настройки) Экспорт
	
	// Варианты отчетов для функциональной опции "ИспользоватьВилкуСтавокВШтатномРасписании".
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления, "ШтатноеРасписаниеКроссТаблицаИспользуетсяВилкаСтавок");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления, "НачисленияПозицийШтатногоРасписанияИспользуетсяВилкаСтавок");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьВилкуСтавокВШтатномРасписании");

	// Варианты отчетов для функциональной опции "НеИспользоватьВилкуСтавокВШтатномРасписании".
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления, "ШтатноеРасписаниеКроссТаблица");
	Вариант.ФункциональныеОпции.Добавить("НеИспользоватьВилкуСтавокВШтатномРасписании");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления, "НачисленияПозицийШтатногоРасписания");
	Вариант.ФункциональныеОпции.Добавить("НеИспользоватьВилкуСтавокВШтатномРасписании");
	
КонецПроцедуры

#КонецОбласти


#Область РасчетФОТПозицийШтатногоРасписания

Процедура РассчитатьФОТВФормеСОднойПозицией(Форма, ДанныеПозиции, Знач Организация, Знач ДатаРасчета, Знач ОписаниеТаблицыВидовРасчета, СохранитьИтоговыеЗначения = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаРасчета) Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	КоллекцияПозиций = ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ();
	КоллекцияНачислений = ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ();
	КоллекцияПоказателей = ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ();
	
	ПересчетТолькоЗависимыхНачислений = Ложь;
	Если Форма.НачисленияФиксРасчет <> Неопределено Тогда
		
		СоответствиеФиксРасчет = Новый Соответствие(Форма.НачисленияФиксРасчет);
		ПересчетТолькоЗависимыхНачислений = СоответствиеФиксРасчет.Количество() > 0;
		
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(КоллекцияПозиций.Добавить(), ДанныеПозиции);
	
	// Начисления с показателями
	МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета);
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
	
	МассивНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеНачислений, "Начисление", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	
	Для каждого СтрокаНачислений Из ДанныеНачислений Цикл
		
		Если СтрокаНачислений.Свойство("Действие")
			И СтрокаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			
			МодульУправленческаяЗарплатаФормы = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
			Если МодульУправленческаяЗарплатаФормы.НачислениеДополняетФОТРегламентированныхНачислений(Форма, СтрокаНачислений.Начисление) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
		
		Если ИнфоОВидеРасчета.Рассчитывается Тогда
			Размер = СтрокаНачислений.Размер;
			РазмерМин = СтрокаНачислений.РазмерМин;
			РазмерМакс = СтрокаНачислений.РазмерМакс;
		Иначе
			Если СтрокаНачислений.Свойство("Значение1") Тогда
				Размер = СтрокаНачислений.Значение1;
				РазмерМин = СтрокаНачислений.Значение1;
				РазмерМакс = СтрокаНачислений.Значение1;
			ИначеЕсли СтрокаНачислений.Свойство("МинимальноеЗначение1") И СтрокаНачислений.Свойство("МаксимальноеЗначение1") Тогда 
				Размер = СтрокаНачислений.МаксимальноеЗначение1;
				РазмерМин = СтрокаНачислений.МинимальноеЗначение1;
				РазмерМакс = СтрокаНачислений.МаксимальноеЗначение1;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеНачисления = КоллекцияНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеНачисления, СтрокаНачислений);
		
		ОписаниеНачисления.Размер = Размер;
		ОписаниеНачисления.РазмерМин = РазмерМин;
		ОписаниеНачисления.РазмерМакс = РазмерМакс;
		
		Если ПересчетТолькоЗависимыхНачислений
			И (СоответствиеФиксРасчет.Получить(СтрокаНачислений.Начисление) = Истина
				ИЛИ Не ИнфоОВидеРасчета.ТребуетсяРасчетБазы) Тогда
				
			ОписаниеНачисления.ФиксРасчет = Истина;
			
		КонецЕсли; 
		
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
			
			Показатель = СтрокаНачислений["Показатель" + НомерПоказателя];
			Если НЕ ЗначениеЗаполнено(Показатель) Тогда
				Прервать;
			КонецЕсли; 
			
			ОписаниеПоказателя = КоллекцияПоказателей.Добавить();
			ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = ОписаниеНачисления.ИдентификаторСтрокиВидаРасчета;
			ОписаниеПоказателя.Показатель = Показатель;
			
			ПутьКЗначению = "Значение" + НомерПоказателя;
			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
				ОписаниеПоказателя.Значение = СтрокаНачислений[ПутьКЗначению];
			КонецЕсли; 
			
			ПутьКЗначению = "МинимальноеЗначение" + НомерПоказателя;
			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
				ОписаниеПоказателя.ЗначениеМин = СтрокаНачислений[ПутьКЗначению];
			КонецЕсли; 
			
			ПутьКЗначению = "МаксимальноеЗначение" + НомерПоказателя;
			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
				ОписаниеПоказателя.ЗначениеМакс = СтрокаНачислений[ПутьКЗначению];
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Доп. тарифы коэффициенты
	ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей);
	СтрокиДопПоказателей = ДанныеПоказателей.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
	Для каждого СтрокаПоказателя Из СтрокиДопПоказателей Цикл
		
		ОписаниеПоказателя = КоллекцияПоказателей.Добавить();
		ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = 0;
		ОписаниеПоказателя.Показатель = СтрокаПоказателя.Показатель;
			
		ПутьКЗначению = "Значение";
		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
			ОписаниеПоказателя.Значение = СтрокаПоказателя[ПутьКЗначению];
		КонецЕсли; 
		
		ПутьКЗначению = "ЗначениеМин";
		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
			ОписаниеПоказателя.ЗначениеМин = СтрокаПоказателя[ПутьКЗначению];
		КонецЕсли; 
		
		ПутьКЗначению = "ЗначениеМакс";
		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
			ОписаниеПоказателя.ЗначениеМакс = СтрокаПоказателя[ПутьКЗначению];
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеПозиций = Новый Структура;
	ОписаниеПозиций.Вставить("Организация", Организация);
	ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ДатаРасчета);
	ОписаниеПозиций.Вставить("Позиции", КоллекцияПозиций);
	ОписаниеПозиций.Вставить("Начисления", КоллекцияНачислений);
	ОписаниеПозиций.Вставить("Показатели", КоллекцияПоказателей);
	
	РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
	
	Если СохранитьИтоговыеЗначения Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПозиции, ОписаниеПозиций.Позиции[0], СвойстваПозицииСРезультатамиРасчетаФОТ());
	КонецЕсли;
	
	Для каждого РассчитанноеНачисление Из ОписаниеПозиций.Начисления Цикл
		
		СтрокиНачислений = ДанныеНачислений.НайтиСтроки(
			Новый Структура("Начисление,ИдентификаторСтрокиВидаРасчета",
				РассчитанноеНачисление.Начисление, РассчитанноеНачисление.ИдентификаторСтрокиВидаРасчета));
		Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, РассчитанноеНачисление, "Размер,РазмерМин,РазмерМакс");
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.НачисленияФиксРасчет = Неопределено;
	
КонецПроцедуры

Процедура РассчитатьФОТНесколькихПозиций(ОписаниеПозиций) Экспорт
	
	Организация = ОписаниеПозиций.Организация;
	ДатаРасчета = ОписаниеПозиций.ДатаВступленияВСилу;
	
	ТаблицаПозиций = ОписаниеПозиций.Позиции.Скопировать();
	ТаблицаПозиций.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПозиций.Колонки.Добавить("СотрудникМин", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПозиций.Колонки.Добавить("СотрудникМакс", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПозиций.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	СоответствиеПозицийСотрудникам = Новый Соответствие;
	СоответствиеПозицийСотрудникамМин = Новый Соответствие;
	СоответствиеПозицийСотрудникамМакс = Новый Соответствие;
	
	Для каждого СтрокаТаблицаПозиций Из ТаблицаПозиций Цикл
		
		СтрокаТаблицаПозиций.Сотрудник = Справочники.Сотрудники.ПолучитьСсылку();
		СтрокаТаблицаПозиций.СотрудникМин = Справочники.Сотрудники.ПолучитьСсылку();
		СтрокаТаблицаПозиций.СотрудникМакс = Справочники.Сотрудники.ПолучитьСсылку();
		
		СтрокаТаблицаПозиций.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
		
		СоответствиеПозицийСотрудникам.Вставить(СтрокаТаблицаПозиций.Сотрудник, СтрокаТаблицаПозиций.ИдентификаторСтрокиПозиции);
		СоответствиеПозицийСотрудникамМин.Вставить(СтрокаТаблицаПозиций.СотрудникМин, СтрокаТаблицаПозиций.ИдентификаторСтрокиПозиции);
		СоответствиеПозицийСотрудникамМакс.Вставить(СтрокаТаблицаПозиций.СотрудникМакс, СтрокаТаблицаПозиций.ИдентификаторСтрокиПозиции);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
	Запрос.УстановитьПараметр("Позиции", ТаблицаПозиций);
	
	ТаблицаНачислений = ОписаниеПозиций.Начисления.Скопировать();
	Если ТаблицаНачислений.Колонки.Найти("ФиксРасчет") = Неопределено Тогда
		ТаблицаНачислений.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	Запрос.УстановитьПараметр("Начисления", ТаблицаНачислений);
	
	Запрос.УстановитьПараметр("Показатели", ОписаниеПозиций.Показатели.Скопировать());
	
	Запрос.УстановитьПараметр("ИспользоватьВилкуСтавокВШтатномРасписании", ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании"));
	
	ВРНадбавкаЗаВредность = ПланыВидовРасчета.Начисления.НачислениеНадбавкаЗаВредность();
	Запрос.УстановитьПараметр("ВРНадбавкаЗаВредность", ВРНадбавкаЗаВредность);
	Запрос.УстановитьПараметр("ПоказательПроцентНадбавкиЗаВредность", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность"));
	
	ВРРайонныйКоэффициент = ПланыВидовРасчета.Начисления.НачислениеРайонныйКоэффициент();
	Запрос.УстановитьПараметр("ВРРайонныйКоэффициент", ВРРайонныйКоэффициент);
	Запрос.УстановитьПараметр("ПоказательРайонныйКоэффициент", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
	
	ВРСевернаяНабавка = ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка();
	Запрос.УстановитьПараметр("ВРСевернаяНадбавка", ВРСевернаяНабавка);
	Запрос.УстановитьПараметр("ПоказательПроцентСевернойНадбавки", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	
	Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	
	Запрос.УстановитьПараметр("ВремяВДнях", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	Запрос.УстановитьПараметр("ОтработаноДней", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"));
	Запрос.УстановитьПараметр("НормаДнейПоГрафикуПолногоРабочегоВремени", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	Запрос.УстановитьПараметр("НормаДней", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));

	Запрос.УстановитьПараметр("ВремяВЧасах", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	Запрос.УстановитьПараметр("ОтработаноЧасов", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"));
	Запрос.УстановитьПараметр("НормаЧасов", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"));
	
	Запрос.УстановитьПараметр("НачисленияВходящиеВФОТ", РасчетЗарплатыРасширенный.НачисленияВходящиеВСоставФОТ());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаРасчета КАК Период,
		|	ПозицииДокумента.Позиция,
		|	ПозицииДокумента.ИдентификаторСтрокиПозиции,
		|	&Организация КАК Организация,
		|	ПозицииДокумента.Должность,
		|	ПозицииДокумента.Подразделение КАК СтруктурнаяЕдиница,
		|	ВЫРАЗИТЬ(ПозицииДокумента.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
		|	ПозицииДокумента.ГрафикРаботыСотрудников КАК ГрафикРаботы,
		|	ПозицииДокумента.ОкладТариф,
		|	ПозицииДокумента.ОкладТарифМин,
		|	ПозицииДокумента.ОкладТарифМакс,
		|	ПозицииДокумента.ФОТ,
		|	ПозицииДокумента.ФОТМин,
		|	ПозицииДокумента.ФОТМакс,
		|	ПозицииДокумента.НадбавкаЗаВредностьРазмер,
		|	ПозицииДокумента.НадбавкаЗаВредностьРазмерМин,
		|	ПозицииДокумента.НадбавкаЗаВредностьРазмерМакс,
		|	ПозицииДокумента.РайонныйКоэффициентРазмер,
		|	ПозицииДокумента.РайонныйКоэффициентРазмерМин,
		|	ПозицииДокумента.РайонныйКоэффициентРазмерМакс,
		|	ПозицииДокумента.СевернаяНадбавкаРазмер,
		|	ПозицииДокумента.СевернаяНадбавкаРазмерМин,
		|	ПозицииДокумента.СевернаяНадбавкаРазмерМакс,
		|	ПозицииДокумента.ВыплачиваетсяНадбавкаЗаВредность,
		|	ПозицииДокумента.ПроцентНадбавкиЗаВредность,
		|	ПозицииДокумента.Сотрудник,
		|	ПозицииДокумента.СотрудникМин,
		|	ПозицииДокумента.СотрудникМакс,
		|	ПозицииДокумента.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПозицииПредварительно
		|ИЗ
		|	&Позиции КАК ПозицииДокумента";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТПозицииПредварительно",
			"СтруктурнаяЕдиница"));
			
	// Таблицы периодических показателей организации.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТПозицииПредварительно",
			"Организация"),
		,
		"ВТЗначенияПериодическихПоказателейОрганизаций");
	
	// Таблицы периодических показателей подразделения.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТПозицииПредварительно",
			"Подразделение"),
		,
		"ВТЗначенияПериодическихПоказателейПодразделений");
	
	РасчетЗарплатыРасширенный.СоздатьВТНачисленияСПоказателямиТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Позиции.Период КАК Период,
		|	Позиции.Позиция КАК Позиция,
		|	Позиции.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	Позиции.Организация КАК Организация,
		|	Позиции.Должность КАК Должность,
		|	Позиции.Подразделение КАК Подразделение,
		|	Позиции.ГрафикРаботы КАК ГрафикРаботы,
		|	Позиции.ОкладТариф КАК ОкладТариф,
		|	Позиции.ОкладТарифМин КАК ОкладТарифМин,
		|	Позиции.ОкладТарифМакс КАК ОкладТарифМакс,
		|	Позиции.ФОТ КАК ФОТ,
		|	Позиции.ФОТМин КАК ФОТМин,
		|	Позиции.ФОТМакс КАК ФОТМакс,
		|	Позиции.НадбавкаЗаВредностьРазмер КАК НадбавкаЗаВредностьРазмер,
		|	Позиции.НадбавкаЗаВредностьРазмерМин КАК НадбавкаЗаВредностьРазмерМин,
		|	Позиции.НадбавкаЗаВредностьРазмерМакс КАК НадбавкаЗаВредностьРазмерМакс,
		|	Позиции.РайонныйКоэффициентРазмер КАК РайонныйКоэффициентРазмер,
		|	Позиции.РайонныйКоэффициентРазмерМин КАК РайонныйКоэффициентРазмерМин,
		|	Позиции.РайонныйКоэффициентРазмерМакс КАК РайонныйКоэффициентРазмерМакс,
		|	Позиции.СевернаяНадбавкаРазмер КАК СевернаяНадбавкаРазмер,
		|	Позиции.СевернаяНадбавкаРазмерМин КАК СевернаяНадбавкаРазмерМин,
		|	Позиции.СевернаяНадбавкаРазмерМакс КАК СевернаяНадбавкаРазмерМакс,
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность КАК ВыплачиваетсяНадбавкаЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность КАК ПроцентНадбавкиЗаВредность,
		|	Позиции.Сотрудник КАК Сотрудник,
		|	Позиции.СотрудникМин КАК СотрудникМин,
		|	Позиции.СотрудникМакс КАК СотрудникМакс,
		|	Позиции.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА Позиции.Подразделение.РайонныйКоэффициент > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПрименятьРайонныйКоэффициент,
		|	ЕСТЬNULL(ТерриториальныеУсловия.ПрименятьСевернуюНадбавку, ЛОЖЬ) КАК ПрименятьСевернуюНадбавку
		|ПОМЕСТИТЬ ВТПозиции
		|ИЗ
		|	ВТПозицииПредварительно КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия
		|		ПО Позиции.Период = ТерриториальныеУсловия.Период
		|			И Позиции.Подразделение = ТерриториальныеУсловия.СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов) КАК СреднемесячноеЧислоЧасов,
		|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
		|	ЕСТЬNULL(СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников.СреднемесячноеЧислоДней, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней) КАК СреднемесячноеЧислоДней,
		|	1 КАК ДоляНеполногоРабочегоВремени
		|ПОМЕСТИТЬ ВТСреднемесячныеЗначенияНормыВремени
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|			И (СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год = ГОД(&ДатаРасчета))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников
		|		ПО (ВЫРАЗИТЬ(Позиции.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников.ГрафикРаботыСотрудников)
		|			И (СреднемесячныеНормыВремениПолногоГрафиковРаботыСотрудников.Год = ГОД(&ДатаРасчета))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПозиций.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	НачисленияПозиций.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ВЫРАЗИТЬ(НачисленияПозиций.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	НачисленияПозиций.Размер КАК Размер,
		|	НачисленияПозиций.РазмерМин КАК РазмерМин,
		|	НачисленияПозиций.РазмерМакс КАК РазмерМакс,
		|	НачисленияПозиций.ФиксРасчет КАК ФиксРасчет
		|ПОМЕСТИТЬ ВТНачисленияПредварительно
		|ИЗ
		|	&Начисления КАК НачисленияПозиций
		|ГДЕ
		|	НачисленияПозиций.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|	И НачисленияПозиций.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПозиций.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	НачисленияПозиций.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	НачисленияПозиций.Начисление КАК Начисление,
		|	ВЫБОР
		|		КОГДА НачисленияПозиций.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА НачисленияПозиций.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Размер,
		|	ВЫБОР
		|		КОГДА НачисленияПозиций.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА НачисленияПозиций.РазмерМин
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерМин,
		|	ВЫБОР
		|		КОГДА НачисленияПозиций.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА НачисленияПозиций.РазмерМакс
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерМакс,
		|	ВЫБОР
		|		КОГДА НачисленияПозиций.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА НачисленияПозиций.ФиксРасчет
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ФиксРасчет,
		|	ЕСТЬNULL(НачисленияСПоказателямиТарифныхСтавок.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательТарифнойСтавки
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТНачисленияПредварительно КАК НачисленияПозиций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСПоказателямиТарифныхСтавок КАК НачисленияСПоказателямиТарифныхСтавок
		|		ПО НачисленияПозиций.Начисление = НачисленияСПоказателямиТарифныхСтавок.Начисление
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.ИдентификаторСтрокиПозиции * 100002,
		|	&ВРНадбавкаЗаВредность,
		|	0,
		|	0,
		|	0,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность
		|	И &ВРНадбавкаЗаВредность <> НЕОПРЕДЕЛЕНО
		|	И &ВРНадбавкаЗаВредность В (&НачисленияВходящиеВФОТ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.ИдентификаторСтрокиПозиции * 100000,
		|	&ВРРайонныйКоэффициент,
		|	0,
		|	0,
		|	0,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьРайонныйКоэффициент
		|	И &ВРРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|	И &ВРРайонныйКоэффициент В (&НачисленияВходящиеВФОТ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.ИдентификаторСтрокиПозиции * 100001,
		|	&ВРСевернаяНадбавка,
		|	0,
		|	0,
		|	0,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьСевернуюНадбавку
		|	И &ВРСевернаяНадбавка <> НЕОПРЕДЕЛЕНО
		|	И &ВРСевернаяНадбавка В (&НачисленияВходящиеВФОТ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиНачислений.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	ПоказателиНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ПоказателиНачислений.Показатель КАК Показатель,
		|	ПоказателиНачислений.Значение КАК Значение,
		|	ПоказателиНачислений.ЗначениеМин КАК ЗначениеМин,
		|	ПоказателиНачислений.ЗначениеМакс КАК ЗначениеМакс
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	&Показатели КАК ПоказателиНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка КАК Показатель,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя, 0)) КАК Значение
		|ПОМЕСТИТЬ ВТПоказателиЗависящиеОтСтажа
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
		|ГДЕ
		|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Позиции.Позиция КАК Позиция,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	Позиции.Организация КАК Организация,
		|	Позиции.Подразделение КАК Подразделение,
		|	Позиции.Сотрудник КАК Сотрудник,
		|	Позиции.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Позиции.ГрафикРаботы КАК ГрафикРаботы,
		|	Позиции.ОкладТариф КАК ОкладТариф,
		|	Позиции.ФОТ КАК ФОТ,
		|	Позиции.РайонныйКоэффициентРазмер КАК РайонныйКоэффициентРазмер,
		|	Позиции.СевернаяНадбавкаРазмер КАК СевернаяНадбавкаРазмер,
		|	ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	Начисления.Размер КАК Размер,
		|	Начисления.ФиксРасчет КАК ФиксРасчет,
		|	НЕОПРЕДЕЛЕНО КАК РасчетПоМакс,
		|	Начисления.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	Позиции.НадбавкаЗаВредностьРазмер КАК НадбавкаЗаВредностьРазмер
		|ПОМЕСТИТЬ ВТПолныйСписокПозицийСНачислениями
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Позиция,
		|	Начисления.ИдентификаторСтрокиВидаРасчета,
		|	Позиции.Организация,
		|	Позиции.Подразделение,
		|	Позиции.СотрудникМин,
		|	Позиции.ФизическоеЛицо,
		|	Позиции.ГрафикРаботы,
		|	Позиции.ОкладТарифМин,
		|	Позиции.ФОТМин,
		|	Позиции.РайонныйКоэффициентРазмерМин,
		|	Позиции.СевернаяНадбавкаРазмерМин,
		|	Начисления.Начисление,
		|	Начисления.РазмерМин,
		|	Начисления.ФиксРасчет,
		|	ЛОЖЬ,
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.НадбавкаЗаВредностьРазмерМин
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Позиция,
		|	Начисления.ИдентификаторСтрокиВидаРасчета,
		|	Позиции.Организация,
		|	Позиции.Подразделение,
		|	Позиции.СотрудникМакс,
		|	Позиции.ФизическоеЛицо,
		|	Позиции.ГрафикРаботы,
		|	Позиции.ОкладТарифМакс,
		|	Позиции.ФОТМакс,
		|	Позиции.РайонныйКоэффициентРазмерМакс,
		|	Позиции.СевернаяНадбавкаРазмерМакс,
		|	Начисления.Начисление,
		|	Начисления.РазмерМакс,
		|	Начисления.ФиксРасчет,
		|	ИСТИНА,
		|	Позиции.ИдентификаторСтрокиПозиции,
		|	Позиции.НадбавкаЗаВредностьРазмерМакс
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПолныйСписокПозицийСНачислениями.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПолныйСписокПозицийСНачислениями.Начисление.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
		|				ТОГДА ПолныйСписокПозицийСНачислениями.Начисление.РеквизитДопУпорядочивания
		|			ИНАЧЕ 99999
		|		КОНЕЦ) КАК Порядок,
		|	ПолныйСписокПозицийСНачислениями.РасчетПоМакс КАК РасчетПоМакс,
		|	ПолныйСписокПозицийСНачислениями.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТМинимальныйПорядокОсновныхНачислений
		|ИЗ
		|	ВТПолныйСписокПозицийСНачислениями КАК ПолныйСписокПозицийСНачислениями
		|
		|СГРУППИРОВАТЬ ПО
		|	ПолныйСписокПозицийСНачислениями.Сотрудник,
		|	ПолныйСписокПозицийСНачислениями.РасчетПоМакс,
		|	ПолныйСписокПозицийСНачислениями.ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолныйСписокПозицийСНачислениями.Сотрудник КАК Сотрудник,
		|	Показатели.Показатель КАК Показатель,
		|	ВЫБОР
		|		КОГДА ПолныйСписокПозицийСНачислениями.РасчетПоМакс = ИСТИНА
		|			ТОГДА Показатели.ЗначениеМакс
		|		КОГДА ПолныйСписокПозицийСНачислениями.РасчетПоМакс = ЛОЖЬ
		|			ТОГДА Показатели.ЗначениеМин
		|		ИНАЧЕ Показатели.Значение
		|	КОНЕЦ КАК Значение
		|ПОМЕСТИТЬ ВТВсеПоказатели
		|ИЗ
		|	ВТПолныйСписокПозицийСНачислениями КАК ПолныйСписокПозицийСНачислениями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО ПолныйСписокПозицийСНачислениями.ИдентификаторСтрокиПозиции = Показатели.ИдентификаторСтрокиПозиции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизаций КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Организация = Показатели.Организация
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизаций КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Организация = Показатели.Организация
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизаций КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Организация = Показатели.Организация
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделений КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Подразделение = Показатели.Подразделение
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделений КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Подразделение = Показатели.Подразделение
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделений КАК Показатели
		|		ПО Позиции.Период = Показатели.Период
		|			И Позиции.Подразделение = Показатели.Подразделение
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И Показатели.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ДоляНеполногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ДоляНеполногоРабочегоВремени, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ДоляНеполногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ДоляНеполногоРабочегоВремени, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ДоляНеполногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ДоляНеполногоРабочегоВремени, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДнейПоГрафикуПолногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДнейПоГрафикуПолногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаДнейПоГрафикуПолногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВДнях <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВДнях <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВДнях <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ОтработаноДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ОтработаноДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ОтработаноДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ПоказательПроцентНадбавкиЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность
		|	И НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентНадбавкиЗаВредность <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ПоказательПроцентНадбавкиЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентНадбавкиЗаВредность <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ПоказательПроцентНадбавкиЗаВредность,
		|	Позиции.ПроцентНадбавкиЗаВредность
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ВыплачиваетсяНадбавкаЗаВредность
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентНадбавкиЗаВредность <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ПоказательРайонныйКоэффициент,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).РайонныйКоэффициент
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьРайонныйКоэффициент
		|	И НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ПоказательРайонныйКоэффициент,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).РайонныйКоэффициент
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьРайонныйКоэффициент
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ПоказательРайонныйКоэффициент,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).РайонныйКоэффициент
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьРайонныйКоэффициент
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ПоказательПроцентСевернойНадбавки,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).ПроцентСевернойНадбавки
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьСевернуюНадбавку
		|	И НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентСевернойНадбавки <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ПоказательПроцентСевернойНадбавки,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).ПроцентСевернойНадбавки
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьСевернуюНадбавку
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентСевернойНадбавки <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ПоказательПроцентСевернойНадбавки,
		|	ВЫРАЗИТЬ(Позиции.Подразделение КАК Справочник.ПодразделенияОрганизаций).ПроцентСевернойНадбавки
		|ИЗ
		|	ВТПозиции КАК Позиции
		|ГДЕ
		|	Позиции.ПрименятьСевернуюНадбавку
		|	И &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ПоказательПроцентСевернойНадбавки <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&НормаЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&НормаЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&НормаЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &НормаЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ВремяВЧасах,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВЧасах <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ВремяВЧасах,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВЧасах <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ВремяВЧасах,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ВремяВЧасах <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	&ОтработаноЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	&ОтработаноЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	&ОтработаноЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, 1)
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО Позиции.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|	И &ОтработаноЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.Сотрудник,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ &ИспользоватьВилкуСтавокВШтатномРасписании
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМин,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Позиции.СотрудникМакс,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.Значение
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО (ИСТИНА)
		|ГДЕ
		|	&ИспользоватьВилкуСтавокВШтатномРасписании";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МинимальныйПорядокОсновныхНачислений.ИдентификаторСтрокиПозиции,
		|	СУММА(ВЫБОР
		|			КОГДА МинимальныйПорядокОсновныхНачислений.РасчетПоМакс = НЕОПРЕДЕЛЕНО
		|				ТОГДА ЕСТЬNULL(Показатели.Значение, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОкладТариф,
		|	СУММА(ВЫБОР
		|			КОГДА МинимальныйПорядокОсновныхНачислений.РасчетПоМакс = ИСТИНА
		|				ТОГДА ЕСТЬNULL(Показатели.ЗначениеМакс, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОкладТарифМакс,
		|	СУММА(ВЫБОР
		|			КОГДА МинимальныйПорядокОсновныхНачислений.РасчетПоМакс = ЛОЖЬ
		|				ТОГДА ЕСТЬNULL(Показатели.ЗначениеМин, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОкладТарифМин
		|ИЗ
		|	ВТМинимальныйПорядокОсновныхНачислений КАК МинимальныйПорядокОсновныхНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|			ПО Начисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|				И Начисления.ИдентификаторСтрокиПозиции = Показатели.ИдентификаторСтрокиПозиции
		|				И Начисления.ПоказательТарифнойСтавки = Показатели.Показатель
		|		ПО МинимальныйПорядокОсновныхНачислений.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции
		|			И МинимальныйПорядокОсновныхНачислений.Порядок = Начисления.Начисление.РеквизитДопУпорядочивания
		|
		|СГРУППИРОВАТЬ ПО
		|	МинимальныйПорядокОсновныхНачислений.ИдентификаторСтрокиПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПоказатели.Сотрудник,
		|	ВсеПоказатели.Показатель,
		|	ВсеПоказатели.Значение
		|ИЗ
		|	ВТВсеПоказатели КАК ВсеПоказатели
		|ГДЕ
		|	ВсеПоказатели.Показатель <> НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(ВсеПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВсеПоказатели.Сотрудник,
		|	ВсеПоказатели.Показатель,
		|	ВсеПоказатели.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолныйСписокПозицийСНачислениями.Организация,
		|	ПолныйСписокПозицийСНачислениями.Подразделение,
		|	ПолныйСписокПозицийСНачислениями.Сотрудник КАК Сотрудник,
		|	ПолныйСписокПозицийСНачислениями.ФизическоеЛицо,
		|	ПолныйСписокПозицийСНачислениями.ГрафикРаботы,
		|	ПолныйСписокПозицийСНачислениями.Начисление КАК Начисление,
		|	ВЫБОР
		|		КОГДА ПолныйСписокПозицийСНачислениями.Начисление = &ВРНадбавкаЗаВредность
		|			ТОГДА ЛОЖЬ
		|		КОГДА ПолныйСписокПозицийСНачислениями.Начисление = &ВРРайонныйКоэффициент
		|			ТОГДА ЛОЖЬ
		|		КОГДА ПолныйСписокПозицийСНачислениями.Начисление = &ВРСевернаяНадбавка
		|			ТОГДА ЛОЖЬ
		|		КОГДА НЕ ПолныйСписокПозицийСНачислениями.Начисление В (&НачисленияВходящиеВФОТ)
		|			ТОГДА ИСТИНА
		|		КОГДА ПолныйСписокПозицийСНачислениями.Размер = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ПолныйСписокПозицийСНачислениями.ФиксРасчет
		|	КОНЕЦ КАК ФиксРасчет,
		|	ИСТИНА КАК ФиксРасчетВремени,
		|	ПолныйСписокПозицийСНачислениями.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	0 КАК Значение1,
		|	ПолныйСписокПозицийСНачислениями.Размер КАК Результат,
		|	НАЧАЛОПЕРИОДА(&ДатаРасчета, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(&ДатаРасчета, МЕСЯЦ) КАК ДатаОкончания,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1) КАК ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1) КАК НормаДнейПоГрафикуПолногоРабочегоВремени
		|ИЗ
		|	ВТПолныйСписокПозицийСНачислениями КАК ПолныйСписокПозицийСНачислениями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ПолныйСписокПозицийСНачислениями.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботыСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Начисление";
	
	ТекстЗапросовПоказателей = "";
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		ТекстЗапросовПоказателей = ТекстЗапросовПоказателей + Символы.ПС + "0 КАК Значение" + НомерПоказателя + ",";
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "0 КАК Значение1,", СокрЛП(ТекстЗапросовПоказателей));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОкладов = РезультатЗапроса[РезультатЗапроса.Количество() - 3].Выгрузить();
	Для Каждого СтрокаПозиции Из ОписаниеПозиций.Позиции Цикл
		НайденныеСтрокиТаблицыОкладов = ТаблицаОкладов.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
		Если НайденныеСтрокиТаблицыОкладов.Количество() = 0 Тогда
			СтрокаПозиции.ОкладТариф = 0;
			СтрокаПозиции.ОкладТарифМакс = 0;
			СтрокаПозиции.ОкладТарифМин = 0;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаПозиции, НайденныеСтрокиТаблицыОкладов[0], "ОкладТариф,ОкладТарифМакс,ОкладТарифМин");
		КонецЕсли;
	КонецЦикла;
	
	ИзвестныеЗначенияПоказателей = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить();
	
	// Получение таблицы начислений со всеми показателями.
	РассчитываемаяТаблица = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	Выборка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РассчитываемаяТаблица.Добавить(), Выборка);
	КонецЦикла;
	
	// Заполним результат не рассчитываемых начислений.
	МассивНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ОписаниеПозиций.Начисления, "Начисление", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	
	ЗначенияРеквизитаРассчитывается = Новый Соответствие;
	Если МассивНачислений.Количество() > 0 Тогда 
		ЗначенияРеквизитаРассчитывается = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНачислений, "Рассчитывается");
	КонецЕсли;
	
	Для Каждого РассчитаннаяСтрока Из РассчитываемаяТаблица Цикл
		
		НачислениеРассчитывается = ЗначенияРеквизитаРассчитывается[РассчитаннаяСтрока.Начисление];
		Если НачислениеРассчитывается = Ложь Тогда 
			
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(РассчитаннаяСтрока.Начисление);
			
			Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
				
				ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникам.Получить(РассчитаннаяСтрока.Сотрудник);
				Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции, Начисление", ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление);
					СтрокиНачислений = ОписаниеПозиций.Начисления.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНачислений.Количество() > 0 Тогда 
						РассчитаннаяСтрока.Результат = СтрокиНачислений[0].Размер;
					КонецЕсли;
				КонецЕсли;
				
				ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникамМин.Получить(РассчитаннаяСтрока.Сотрудник);
				Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции, Начисление", ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление);
					СтрокиНачислений = ОписаниеПозиций.Начисления.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНачислений.Количество() > 0 Тогда 
						РассчитаннаяСтрока.Результат = СтрокиНачислений[0].РазмерМин;
					КонецЕсли;
				КонецЕсли;
				
				ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникамМакс.Получить(РассчитаннаяСтрока.Сотрудник);
				Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции, Начисление", ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление);
					СтрокиНачислений = ОписаниеПозиций.Начисления.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНачислений.Количество() > 0 Тогда 
						РассчитаннаяСтрока.Результат = СтрокиНачислений[0].РазмерМакс;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Расчет ФОТ
	ДанныеПлановыхНачислений = ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ИзвестныеПоказатели = ПлановыеНачисленияСотрудников.ТаблицаИзвестныеПоказатели();
	КадровыеДанные = ПлановыеНачисленияСотрудников.СоздатьТаблицаКадровыхДанных();
	
	Для Каждого СтрокаТаблицаПозиций Из ТаблицаПозиций Цикл

		СтрокаКадровыеДанные = КадровыеДанные.Добавить();   		
		СтрокаКадровыеДанные.Период = ДатаРасчета;
		СтрокаКадровыеДанные.Сотрудник = СтрокаТаблицаПозиций.Сотрудник;
		СтрокаКадровыеДанные.Организация = Организация;
		СтрокаКадровыеДанные.Подразделение = СтрокаТаблицаПозиций.Подразделение;
		СтрокаКадровыеДанные.ГрафикРаботы = СтрокаТаблицаПозиций.ГрафикРаботыСотрудников;  
								
	КонецЦикла;
	
	Для Каждого СтрокаНачисления Из РассчитываемаяТаблица Цикл
			
		СтрокаДанныеПлановыхНачислений = ДанныеПлановыхНачислений.Добавить();
		СтрокаДанныеПлановыхНачислений.Период = ДатаРасчета;
		СтрокаДанныеПлановыхНачислений.Сотрудник = СтрокаНачисления.Сотрудник;
		СтрокаДанныеПлановыхНачислений.ГоловнаяОрганизация = Организация;
		СтрокаДанныеПлановыхНачислений.Начисление = СтрокаНачисления.Начисление;
		СтрокаДанныеПлановыхНачислений.Размер = СтрокаНачисления.Результат;
		СтрокаДанныеПлановыхНачислений.ИдентификаторСтрокиВидаРасчета = СтрокаНачисления.ИдентификаторСтрокиВидаРасчета;
	
	КонецЦикла;  

	Для Каждого СтрокаПоказатели Из ИзвестныеЗначенияПоказателей Цикл
		
		СтрокаИзвестныеПоказатели = ИзвестныеПоказатели.Добавить();
		СтрокаИзвестныеПоказатели.Период = ДатаРасчета;
		СтрокаИзвестныеПоказатели.Сотрудник = СтрокаПоказатели.Сотрудник;
		СтрокаИзвестныеПоказатели.ГоловнаяОрганизация = Организация;
		СтрокаИзвестныеПоказатели.Показатель = СтрокаПоказатели.Показатель;
		СтрокаИзвестныеПоказатели.Значение = СтрокаПоказатели.Значение;
		
	КонецЦикла;		

	РассчитанныеДанные = ПлановыеНачисленияСотрудников.РассчитатьВторичныеДанныеПлановыхНачислений(ДанныеПлановыхНачислений, ИзвестныеПоказатели, КадровыеДанные);
			
	УстановитьПривилегированныйРежим(Ложь);
	
	СоответствиеФОТПозиции = Новый Соответствие;
	СоответствиеФОТПозицииМин = Новый Соответствие;
	СоответствиеФОТПозицииМакс = Новый Соответствие;
	
	Для каждого СтрокаРассчитываемаяТаблица Из РассчитанныеДанные.ПлановыйФОТ Цикл
		
		ЗаполнитьРазмерСтрокНачислений(ОписаниеПозиций.Начисления, СтрокаРассчитываемаяТаблица, "Размер", СоответствиеПозицийСотрудникам, СоответствиеФОТПозиции);
		ЗаполнитьРазмерСтрокНачислений(ОписаниеПозиций.Начисления, СтрокаРассчитываемаяТаблица, "РазмерМин", СоответствиеПозицийСотрудникамМин, СоответствиеФОТПозицииМин);
		ЗаполнитьРазмерСтрокНачислений(ОписаниеПозиций.Начисления, СтрокаРассчитываемаяТаблица, "РазмерМакс", СоответствиеПозицийСотрудникамМакс, СоответствиеФОТПозицииМакс);
		
	КонецЦикла;
	
	ЗаполнитьФОТНесколькихПозиций(ОписаниеПозиций.Позиции, СоответствиеФОТПозиции, "ФОТ");
	ЗаполнитьФОТНесколькихПозиций(ОписаниеПозиций.Позиции, СоответствиеФОТПозицииМин, "ФОТМин");
	ЗаполнитьФОТНесколькихПозиций(ОписаниеПозиций.Позиции, СоответствиеФОТПозицииМакс, "ФОТМакс");
	
	СтрокиНадбавкиЗаВредность = РассчитанныеДанные.ПлановыйФОТ.НайтиСтроки(Новый Структура("Начисление", ВРНадбавкаЗаВредность));
	Для каждого СтрокаНадбавкиЗаВредность Из СтрокиНадбавкиЗаВредность Цикл
		
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаНадбавкиЗаВредность, СоответствиеПозицийСотрудникам, "НадбавкаЗаВредностьРазмер", "ФОТ");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаНадбавкиЗаВредность, СоответствиеПозицийСотрудникамМин, "НадбавкаЗаВредностьРазмерМин", "ФОТМин");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаНадбавкиЗаВредность, СоответствиеПозицийСотрудникамМакс, "НадбавкаЗаВредностьРазмерМакс", "ФОТМакс");
		
	КонецЦикла;
	
	СтрокиРайонногоКоэффициента = РассчитанныеДанные.ПлановыйФОТ.НайтиСтроки(Новый Структура("Начисление", ВРРайонныйКоэффициент));
	Для каждого СтрокаСРайоннымКоэффициентом Из СтрокиРайонногоКоэффициента Цикл
		
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСРайоннымКоэффициентом, СоответствиеПозицийСотрудникам, "РайонныйКоэффициентРазмер", "ФОТ");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСРайоннымКоэффициентом, СоответствиеПозицийСотрудникамМин, "РайонныйКоэффициентРазмерМин", "ФОТМин");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСРайоннымКоэффициентом, СоответствиеПозицийСотрудникамМакс, "РайонныйКоэффициентРазмерМакс", "ФОТМакс");
		
	КонецЦикла;
	
	СтрокиСевернойНадбавки = РассчитанныеДанные.ПлановыйФОТ.НайтиСтроки(Новый Структура("Начисление", ВРСевернаяНабавка));
	Для каждого СтрокаСевернойНадбавкой Из СтрокиСевернойНадбавки Цикл
		
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСевернойНадбавкой, СоответствиеПозицийСотрудникам, "СевернаяНадбавкаРазмер", "ФОТ");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСевернойНадбавкой, СоответствиеПозицийСотрудникамМин, "СевернаяНадбавкаРазмерМин", "ФОТМин");
		ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(
			ОписаниеПозиций.Позиции, СтрокаСевернойНадбавкой, СоответствиеПозицийСотрудникамМакс, "СевернаяНадбавкаРазмерМакс", "ФОТМакс");
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаНачисленийДляРасчетаВторичныхДанных()
	ДанныеПлановыхНачислений = ПлановыеНачисленияСотрудников.ТаблицаНачисленийДляРасчетаВторичныхДанных();
	ДанныеПлановыхНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	Возврат ДанныеПлановыхНачислений;
КонецФункции

Процедура ЗаполнитьРазмерыРайонногоКоэффициентаИСевернойНадбавки(ТЧПозиции, СтрокаСНачислением, СоответствиеПозицийСотрудникам, ИдентификаторКолонкиРазмер, ИдентификаторКолонкиФОТ, ПерезаполнитьРазмер = Истина)
	
	ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникам.Получить(СтрокаСНачислением.Сотрудник);
	СтрокиПозиции = ТЧПозиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", ИдентификаторСтрокиПозиции));
	Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
		Если ПерезаполнитьРазмер Тогда
			СтрокаПозиции[ИдентификаторКолонкиРазмер] = СтрокаСНачислением.ВкладВФОТ;
		КонецЕсли; 
		СтрокаПозиции[ИдентификаторКолонкиФОТ] = СтрокаПозиции[ИдентификаторКолонкиФОТ] + СтрокаПозиции[ИдентификаторКолонкиРазмер];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРазмерСтрокНачислений(ТЧНачисления, РассчитаннаяСтрока, ИдентификаторКолонкиРазмер, СоответствиеПозицийСотрудникам, СоответствиеФОТПозиции)
	
	ИдентификаторСтрокиПозиции = СоответствиеПозицийСотрудникам.Получить(РассчитаннаяСтрока.Сотрудник);
	Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции, Начисление, ИдентификаторСтрокиВидаРасчета",
			ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление, РассчитаннаяСтрока.ИдентификаторСтрокиВидаРасчета);
		СтрокиНачислений = ТЧНачисления.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрокаНачислений Из СтрокиНачислений Цикл
			
			НайденнаяСтрокаНачислений[ИдентификаторКолонкиРазмер] = РассчитаннаяСтрока.ВкладВФОТ;
			
			ЗначениеФОТ = СоответствиеФОТПозиции.Получить(ИдентификаторСтрокиПозиции);
			Если ЗначениеФОТ = Неопределено Тогда
				ЗначениеФОТ = 0;
			КонецЕсли; 
			
			СоответствиеФОТПозиции.Вставить(ИдентификаторСтрокиПозиции, ЗначениеФОТ + НайденнаяСтрокаНачислений[ИдентификаторКолонкиРазмер]);
			
		КонецЦикла;
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьФОТНесколькихПозиций(ТЧПозиции, СоответствиеФОТПозиции, ИдентификаторКолонкиФОТ)
	
	Для каждого СтрокаПозиции Из ТЧПозиции Цикл
		СтрокаПозиции[ИдентификаторКолонкиФОТ] = 0;
		СтрокаПозиции["НадбавкаЗаВредностьРазмер" + Сред(ИдентификаторКолонкиФОТ, 4)] = 0;
		СтрокаПозиции["РайонныйКоэффициентРазмер" + Сред(ИдентификаторКолонкиФОТ, 4)] = 0;
		СтрокаПозиции["СевернаяНадбавкаРазмер" + Сред(ИдентификаторКолонкиФОТ, 4)] = 0;
	КонецЦикла;
	
	Для каждого ЭлементСоответствия Из СоответствиеФОТПозиции Цикл
		
		СтрокиПозиции = ТЧПозиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", ЭлементСоответствия.Ключ));
		Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
			СтрокаПозиции[ИдентификаторКолонкиФОТ] = ЭлементСоответствия.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИтогФОТПоРеквизиту(ТаблицаНачислений, ИмяРеквизита)
	
	ИтогФОТ = 0;
	
	Для каждого СтрокаТаблицаНачислений Из ТаблицаНачислений Цикл
		
		Если ТипЗнч(ТаблицаНачислений) = Тип("ТаблицаЗначений") Тогда
			Если ТаблицаНачислений.Колонки.Найти("Действие") <> Неопределено
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		Иначе
			Если СтрокаТаблицаНачислений.Свойство("Действие")
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаТаблицаНачислений.Начисление);
		Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
			ИтогФОТ = ИтогФОТ + СтрокаТаблицаНачислений[ИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтогФОТ;
	
КонецФункции

Процедура РассчитатьИтогиФОТПоПозиции(Форма, ДанныеТекущейПозиции, ТаблицаНачислений, ОписаниеТаблицыНачислений) Экспорт
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
		
		ДанныеТекущейПозиции.ФОТМин =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "РазмерМин")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмерМин
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмерМин
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмерМин;
		
		ДанныеТекущейПозиции.ФОТМакс =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "РазмерМакс")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмерМакс
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмерМакс
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмерМакс;
		
		ДанныеТекущейПозиции.ФОТ = ДанныеТекущейПозиции.ФОТМакс;
		
	Иначе
		
		ДанныеТекущейПозиции.ФОТ =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "Размер")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмер
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмер
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмер;
		
		ДанныеТекущейПозиции.ФОТМин = ДанныеТекущейПозиции.ФОТ;
		ДанныеТекущейПозиции.ФОТМакс = ДанныеТекущейПозиции.ФОТ;
		
	КонецЕсли;
	
	Если ДанныеТекущейПозиции.Свойство("Комментарий") Тогда
		
		ДанныеТекущейПозиции.Комментарий = УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
			ДанныеТекущейПозиции, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьФОТПозицийШтатногоРасписания(Объект, ДатаВступленияВСилу, СписокПозиций = Неопределено) Экспорт
	
	ОписаниеПозиций = Новый Структура;
	ОписаниеПозиций.Вставить("Организация", Объект.Организация);
	ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	КоллекцияПозиций = ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ();
	КоллекцияНачислений = ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ();
	КоллекцияПоказателей = ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ();
	
	Если СписокПозиций = Неопределено Тогда
		ПересчитываемыеПозиции = Объект.Позиции.ВыгрузитьКолонку("Позиция");
	Иначе
		ПересчитываемыеПозиции = СписокПозиций;
	КонецЕсли;
	
	Для каждого ПересчитываемаяПозиция Из ПересчитываемыеПозиции Цикл
		
		СтрокиПозиции = Объект.Позиции.Выгрузить(Новый Структура("Позиция", ПересчитываемаяПозиция));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПозиции, КоллекцияПозиций);
		
		Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
			
			СтрокиНачислений = Объект.Начисления.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиНачислений, КоллекцияНачислений);
			
			СтрокиПоказателей = Объект.Показатели.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПоказателей, КоллекцияПоказателей);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОписаниеПозиций.Вставить("Позиции", КоллекцияПозиций);
	ОписаниеПозиций.Вставить("Начисления", КоллекцияНачислений);
	ОписаниеПозиций.Вставить("Показатели", КоллекцияПоказателей);
	
	РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
	
	Для каждого СтрокаПозиции Из КоллекцияПозиций Цикл
		
		СтрокиПозицииДокумента = Объект.Позиции.НайтиСтроки(Новый Структура("Позиция", СтрокаПозиции.Позиция));
		Если СтрокиПозицииДокумента.Количество() > 0 Тогда
			
			СтрокаПозицииДокумента = СтрокиПозицииДокумента[0];
			ЗаполнитьЗначенияСвойств(СтрокаПозицииДокумента, СтрокаПозиции, СвойстваПозицииСРезультатамиРасчетаФОТ());
			
			РассчитанныеСтрокиНачислений = КоллекцияНачислений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			Для каждого РассчитаннаяСтрока Из РассчитанныеСтрокиНачислений Цикл
				
				СтрокиНачисленийДокумента = Объект.Начисления.НайтиСтроки(
					Новый Структура("ИдентификаторСтрокиПозиции,Начисление", РассчитаннаяСтрока.ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление));
					
				Для каждого СтрокаНачисленийДокумента Из СтрокиНачисленийДокумента Цикл
					ЗаполнитьЗначенияСвойств(СтрокаНачисленийДокумента, РассчитаннаяСтрока, "Размер,РазмерМин,РазмерМакс");
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьФОТПозицийСправочника(Организация, ДатаРасчета, ПозицииОбъекты) Экспорт
	
	ОписаниеПозиций = Новый Структура;
	ОписаниеПозиций.Вставить("Организация", Организация);
	ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ДатаРасчета);
	
	КоллекцияПозиций = ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ();
	КоллекцияНачислений = ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ();
	КоллекцияПоказателей = ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ();
	
	СоответствиеСсылокОбъектам = Новый Соответствие;
	
	ИдентификаторСтрокиПозиции = 1;
	Для каждого ПозицияОбъект Из ПозицииОбъекты Цикл
		
		СоответствиеСсылокОбъектам.Вставить(ПозицияОбъект.Ссылка, ПозицияОбъект);
		
		СтрокаПозиции = КоллекцияПозиций.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПозиции, ПозицияОбъект);
		СтрокаПозиции.Позиция = ПозицияОбъект.Ссылка;
		СтрокаПозиции.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
		
		Для каждого НачислениеПозиции Из ПозицияОбъект.Начисления Цикл
			
			СтрокаНачислений = КоллекцияНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, НачислениеПозиции);
			СтрокаНачислений.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			
		КонецЦикла;
		
		Для каждого ПоказательПозиции Из ПозицияОбъект.Показатели Цикл
			
			СтрокаПоказателя = КоллекцияПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ПоказательПозиции);
			СтрокаПоказателя.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			
		КонецЦикла;
		
		ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции + 1;
		
	КонецЦикла;
	
	ОписаниеПозиций.Вставить("Позиции", КоллекцияПозиций);
	ОписаниеПозиций.Вставить("Начисления", КоллекцияНачислений);
	ОписаниеПозиций.Вставить("Показатели", КоллекцияПоказателей);
	
	РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
	
	Для каждого СтрокаПозиции Из КоллекцияПозиций Цикл
		
		ПозицияОбъект = СоответствиеСсылокОбъектам.Получить(СтрокаПозиции.Позиция);
		Если ПозицияОбъект <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ПозицияОбъект, СтрокаПозиции, СвойстваПозицииСРезультатамиРасчетаФОТ());
			
			РассчитанныеСтрокиНачислений = КоллекцияНачислений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			Для каждого РассчитаннаяСтрока Из РассчитанныеСтрокиНачислений Цикл
				
				СтрокиНачисленийПозиции = ПозицияОбъект.Начисления.НайтиСтроки(
					Новый Структура("Начисление", РассчитаннаяСтрока.Начисление));
					
				Для каждого СтрокаНачисленийПозиции Из СтрокиНачисленийПозиции Цикл
					ЗаполнитьЗначенияСвойств(СтрокаНачисленийПозиции, РассчитаннаяСтрока, "Размер,РазмерМин,РазмерМакс");
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ() Экспорт
	
	КоллекцияПозиций = Новый ТаблицаЗначений;
	КоллекцияПозиций.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	КоллекцияПозиций.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КоллекцияПозиций.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КоллекцияПозиций.Колонки.Добавить("ГрафикРаботыСотрудников", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.РежимыРаботыСотрудников"));
	КоллекцияПозиций.Колонки.Добавить("ТарифнаяСетка", Новый ОписаниеТипов("СправочникСсылка.ТарифныеСетки"));
	КоллекцияПозиций.Колонки.Добавить("ОкладТариф", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ОкладТарифМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ОкладТарифМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ФОТ", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ФОТМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ФОТМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("НадбавкаЗаВредностьРазмер", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("НадбавкаЗаВредностьРазмерМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("НадбавкаЗаВредностьРазмерМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("РайонныйКоэффициентРазмер", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("РайонныйКоэффициентРазмерМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("РайонныйКоэффициентРазмерМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("СевернаяНадбавкаРазмер", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("СевернаяНадбавкаРазмерМин", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("СевернаяНадбавкаРазмерМакс", Новый ОписаниеТипов("Число"));
	КоллекцияПозиций.Колонки.Добавить("ВыплачиваетсяНадбавкаЗаВредность", Новый ОписаниеТипов("Булево"));
	КоллекцияПозиций.Колонки.Добавить("ПроцентНадбавкиЗаВредность", Новый ОписаниеТипов("Число"));
	
	Возврат КоллекцияПозиций;
	
КонецФункции

Функция ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ() Экспорт
	
	КоллекцияНачислений = Новый ТаблицаЗначений;
	КоллекцияНачислений.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	КоллекцияНачислений.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
	КоллекцияНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("РазмерМин", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("РазмерМакс", Новый ОписаниеТипов("Число"));
	КоллекцияНачислений.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	
	Возврат КоллекцияНачислений;
	
КонецФункции

Функция ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ()  Экспорт
	
	КоллекцияПоказателей = Новый ТаблицаЗначений;
	КоллекцияПоказателей.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
	КоллекцияПоказателей.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	КоллекцияПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	КоллекцияПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	КоллекцияПоказателей.Колонки.Добавить("ЗначениеМин", Новый ОписаниеТипов("Число"));
	КоллекцияПоказателей.Колонки.Добавить("ЗначениеМакс", Новый ОписаниеТипов("Число"));
	
	Возврат КоллекцияПоказателей;
	
КонецФункции

Функция СвойстваПозицииСРезультатамиРасчетаФОТ()
	
	Возврат
		"ОкладТариф,
		|ОкладТарифМин,
		|ОкладТарифМакс,
		|ФОТ,
		|ФОТМин,
		|ФОТМакс,
		|НадбавкаЗаВредностьРазмер,
		|НадбавкаЗаВредностьРазмерМин,
		|НадбавкаЗаВредностьРазмерМакс,
		|РайонныйКоэффициентРазмер,
		|РайонныйКоэффициентРазмерМин,
		|РайонныйКоэффициентРазмерМакс,
		|СевернаяНадбавкаРазмер,
		|СевернаяНадбавкаРазмерМин,
		|СевернаяНадбавкаРазмерМакс";
	
КонецФункции

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает результат запроса, содержащий информацию об изменениях позиций штатного расписания
// оформленных на дату вступления в силу, переданную в качестве параметра, позиции которого Содержат
// ссылки на тарифную сетку.
//
// Параметры:
//		ТарифнаяСетка 			- СправочникСсылка.ТарифныеСетки
//		ДатаВступленияВСилу		- Дата
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц, если параметр зада, менеджер должен содержать
//								временную таблицу ВТТарифы, содержащую данные на дату вступления в силу, с колонками
//									* РазрядКатегория
//									* Тариф
//
// Возвращаемое значение:
//		РезультатЗапроса
//
Функция РезультатЗапросаПоИзменениямПозицийШтатногоРасписания(ТарифнаяСетка, Организация, ДатаВступленияВСилу) Экспорт
	
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Если ФОИспользоватьШтатноеРасписание Тогда
		
		Запрос = Новый Запрос;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		РазрядыКатегорииДолжностей.СоздатьВТТарифы(ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц);

		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

		УстановитьПривилегированныйРежим(Истина);

		ВидТарифнойСетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТарифнаяСетка, "ВидТарифнойСетки");

		// Получение позиций штатного расписания в которых используется тарифная группа
		ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписание(ДатаВступленияВСилу, Организация);
		ПараметрыПостроения.ДополнитьОписаниемНачислений = Истина;
		ПараметрыПостроения.ПолноеОписаниеНачислений = Истина;

		ПолеОтбора = ?(ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф, "ТарифнаяСетка", "ТарифнаяСеткаНадбавки");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, ПолеОтбора, "=", ТарифнаяСетка);

		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТНачисленияПозицийШтатногоРасписания", Истина);
		СоздатьВТШтатноеРасписание(
			Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения, "Организация,Подразделение,Должность,РазрядКатегория,РазрядКатегорияНадбавки", "ВТНачисленияПозицийШтатногоРасписания");

		ПоказателиТарифнойСетки = РазрядыКатегорииДолжностей.ПоказателиТарифнойСетки(ТарифнаяСетка, Истина);
		Запрос.УстановитьПараметр("Показатели", ПоказателиТарифнойСетки);
		Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	НачисленияПозицийШтатногоРасписания.Организация КАК Организация,
				|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
				|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Должность КАК Справочник.Должности) КАК Должность,
				|	НачисленияПозицийШтатногоРасписания.РазрядКатегория КАК РазрядКатегория,
				|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
				|	НачисленияПозицийШтатногоРасписания.Показатель КАК Показатель,
				|	НачисленияПозицийШтатногоРасписания.Значение КАК Значение,
				|	Тарифы.Тариф КАК Тариф,
				|	МИНИМУМ(ТарифыМаксимальныеМинимальные.Тариф) КАК ТарифМин,
				|	МАКСИМУМ(ТарифыМаксимальныеМинимальные.Тариф) КАК ТарифМакс
				|ПОМЕСТИТЬ ВТПозицииСИзменениями
				|ИЗ
				|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифы КАК Тарифы
				|		ПО НачисленияПозицийШтатногоРасписания.РазрядКатегория = Тарифы.РазрядКатегория
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифы КАК ТарифыМаксимальныеМинимальные
				|		ПО (ИСТИНА)
				|ГДЕ
				|	НачисленияПозицийШтатногоРасписания.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
				|	И НачисленияПозицийШтатногоРасписания.Показатель В(&Показатели)
				|	И (НачисленияПозицийШтатногоРасписания.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
				|			ИЛИ НЕ Тарифы.Тариф ЕСТЬ NULL)
				|
				|СГРУППИРОВАТЬ ПО
				|	НачисленияПозицийШтатногоРасписания.Организация,
				|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания,
				|	НачисленияПозицийШтатногоРасписания.Показатель,
				|	НачисленияПозицийШтатногоРасписания.РазрядКатегория,
				|	Тарифы.Тариф,
				|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Подразделение КАК Справочник.ПодразделенияОрганизаций),
				|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Должность КАК Справочник.Должности),
				|	НачисленияПозицийШтатногоРасписания.Значение
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПозицииСИзменениями.Организация КАК Организация,
				|	ПозицииСИзменениями.Подразделение КАК Подразделение,
				|	ПозицииСИзменениями.Должность КАК Должность,
				|	ПозицииСИзменениями.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
				|	ПозицииСИзменениями.РазрядКатегория КАК РазрядКатегория,
				|	ПозицииСИзменениями.Показатель КАК Показатель,
				|	ПозицииСИзменениями.Тариф КАК Тариф,
				|	ПозицииСИзменениями.ТарифМин КАК ТарифМин,
				|	ПозицииСИзменениями.ТарифМакс КАК ТарифМакс
				|ИЗ
				|	ВТПозицииСИзменениями КАК ПозицииСИзменениями
				|
				|УПОРЯДОЧИТЬ ПО
				|	Организация,
				|	ПозицииСИзменениями.Подразделение.РеквизитДопУпорядочиванияИерархического,
				|	ПозицииСИзменениями.Должность.РеквизитДопУпорядочивания";
			
		Иначе
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	НачисленияПозицийШтатногоРасписания.Организация КАК Организация,
				|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
				|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Должность КАК Справочник.Должности) КАК Должность,
				|	НачисленияПозицийШтатногоРасписания.РазрядКатегория КАК РазрядКатегория,
				|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
				|	НачисленияПозицийШтатногоРасписания.Показатель КАК Показатель,
				|	НачисленияПозицийШтатногоРасписания.Значение КАК Значение,
				|	Тарифы.Тариф КАК Тариф,
				|	МИНИМУМ(ТарифыМаксимальныеМинимальные.Тариф) КАК ТарифМин,
				|	МАКСИМУМ(ТарифыМаксимальныеМинимальные.Тариф) КАК ТарифМакс
				|ПОМЕСТИТЬ ВТПозицииСИзменениями
				|ИЗ
				|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифы КАК Тарифы
				|		ПО НачисленияПозицийШтатногоРасписания.РазрядКатегория = Тарифы.РазрядКатегория
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифы КАК ТарифыМаксимальныеМинимальные
				|		ПО (ИСТИНА)
				|ГДЕ
				|	НачисленияПозицийШтатногоРасписания.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
				|	И НачисленияПозицийШтатногоРасписания.Показатель В(&Показатели)
				|	И (НачисленияПозицийШтатногоРасписания.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
				|			ИЛИ НЕ Тарифы.Тариф ЕСТЬ NULL)
				|
				|СГРУППИРОВАТЬ ПО
				|	НачисленияПозицийШтатногоРасписания.Организация,
				|	НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания,
				|	НачисленияПозицийШтатногоРасписания.Показатель,
				|	НачисленияПозицийШтатногоРасписания.РазрядКатегория,
				|	НачисленияПозицийШтатногоРасписания.Значение,
				|	Тарифы.Тариф,
				|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Подразделение КАК Справочник.ПодразделенияОрганизаций),
				|	ВЫРАЗИТЬ(НачисленияПозицийШтатногоРасписания.Должность КАК Справочник.Должности)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПозицииСИзменениями.Организация КАК Организация,
				|	ПозицииСИзменениями.Подразделение КАК Подразделение,
				|	ПозицииСИзменениями.Должность КАК Должность,
				|	ПозицииСИзменениями.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
				|	NULL КАК ИзменениеШтатногоРасписания,
				|	ПозицииСИзменениями.РазрядКатегория КАК РазрядКатегория,
				|	ПозицииСИзменениями.Показатель КАК Показатель,
				|	ПозицииСИзменениями.Тариф КАК Тариф,
				|	ПозицииСИзменениями.ТарифМин КАК ТарифМин,
				|	ПозицииСИзменениями.ТарифМакс КАК ТарифМакс
				|ИЗ
				|	ВТПозицииСИзменениями КАК ПозицииСИзменениями
				|
				|УПОРЯДОЧИТЬ ПО
				|	Организация,
				|	ПозицииСИзменениями.Подразделение.РеквизитДопУпорядочиванияИерархического,
				|	ПозицииСИзменениями.Должность.РеквизитДопУпорядочивания";
			
		КонецЕсли;
		
		Если ВидТарифнойСетки <> Перечисления.ВидыТарифныхСеток.Тариф Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПозицииШтатногоРасписания.РазрядКатегория", "ПозицииШтатногоРасписания.РазрядКатегорияНадбавки");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат РезультатЗапроса;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьОбъектИзменениямиПозицийШтатногоРасписания(Объект, ТаблицаПозицийКИзменению, ТарифнаяСетка) Экспорт
	
	ДанныеПозиций = ДанныеПозицийШтатногоРасписания(
		Истина, ТаблицаПозицийКИзменению.ВыгрузитьКолонку("ПозицияШтатногоРасписания"), Объект.ДатаВступленияВСилу, , Ложь);
	
	ИдентификаторСтрокиПозиции = 0;
	ИдентификаторСтрокиВидаРасчета = 0;
		
	ИзмененныеПозиции = Новый Массив;
		
	Для каждого СтрокаПозиции Из ТаблицаПозицийКИзменению Цикл
		
		ДанныеПозиции = ДанныеПозиций.Получить(СтрокаПозиции.ПозицияШтатногоРасписания);
		Если ДанныеПозиции = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ТекущиеДанные = Новый Структура("ТекущийФОТ,ТекущееКоличествоСтавок");
		ТекущиеДанные.ТекущийФОТ = ДанныеПозиции.ФОТ;
		ТекущиеДанные.ТекущееКоличествоСтавок = ДанныеПозиции.КоличествоСтавок;
		
		СтрокиПозицииДокумента = Объект.Позиции.НайтиСтроки(Новый Структура("Позиция", СтрокаПозиции.ПозицияШтатногоРасписания));
		Если СтрокиПозицииДокумента.Количество() = 0 Тогда
			
			ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции + 1;
			
			СтрокаПозицииДокумента = Объект.Позиции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПозицииДокумента, ДанныеПозиции);
			
			СтрокаПозицииДокумента.Позиция = СтрокаПозиции.ПозицияШтатногоРасписания;
			СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
			
			ЗаполнитьЗначенияСвойств(СтрокаПозицииДокумента, ТекущиеДанные);
			
			Если ДанныеПозиции.Начисления <> Неопределено Тогда
				
				Для каждого ОписаниеНачисления Из ДанныеПозиции.Начисления Цикл
					
					ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
					
					СтрокаНачисленийДокумента = Объект.Начисления.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНачисленийДокумента, ОписаниеНачисления);
					
					СтрокаНачисленийДокумента.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
					СтрокаНачисленийДокумента.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					
					Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
						
						Если ЗначениеЗаполнено(ОписаниеПоказателя.Показатель) Тогда
							
							СтрокаПоказателяДокумента = Объект.Показатели.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаПоказателяДокумента, ОписаниеПоказателя);
							
							СтрокаПоказателяДокумента.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
							СтрокаПоказателяДокумента.ИдентификаторСтрокиВидаРасчета= СтрокаНачисленийДокумента.ИдентификаторСтрокиВидаРасчета;
							
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НезависимыеПоказатели = ДанныеПозиции.НезависимыеПоказатели;
			Если НезависимыеПоказатели <> Неопределено Тогда
				
				Для Каждого ОписаниеПоказателя Из НезависимыеПоказатели Цикл 
					
					СтрокаПоказателяДокумента = Объект.Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоказателяДокумента, ОписаниеПоказателя);
					
					СтрокаПоказателяДокумента.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ЕжегодныеОтпускаПозиции = ДанныеПозиции.ЕжегодныеОтпуска;
			Если ЕжегодныеОтпускаПозиции <> Неопределено Тогда
				
				Для каждого ОписаниеЕжегодногоОтпуска Из ЕжегодныеОтпускаПозиции Цикл
					
					СтрокаЕжегодныеОтпуска = Объект.ЕжегодныеОтпуска.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЕжегодныеОтпуска, ОписаниеЕжегодногоОтпуска);
					
					СтрокаЕжегодныеОтпуска.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СпециальностиПозиции = ДанныеПозиции.Специальности;
			Если СпециальностиПозиции <> Неопределено Тогда
				
				Для каждого ОписаниеСпециальности Из СпециальностиПозиции Цикл
					
					СтрокаСпециальности = Объект.Специальности.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСпециальности, ОписаниеСпециальности);
					
					СтрокаСпециальности.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
					
				КонецЦикла;
				
			КонецЕсли;
		Иначе
			СтрокаПозицииДокумента = СтрокиПозицииДокумента[0];
		КонецЕсли;
		
		ИзмененныеПозиции.Добавить(СтрокаПозицииДокумента.Позиция);
		
		СтрокиПоказателей = Объект.Показатели.НайтиСтроки( Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции));
		ЗаполнитьЗначенияПоказателейПозиции(ДанныеПозиции, СтрокиПоказателей, СтрокаПозиции, ТарифнаяСетка);
		
	КонецЦикла;
	
	РассчитатьФОТПозицийШтатногоРасписания(Объект, Объект.ДатаВступленияВСилу, ИзмененныеПозиции);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейПозиции(ДанныеПозиции, СтрокиПоказателей, СтрокаСДанными, ТарифнаяСетка)
	
	Для каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
		
		Если СтрокаПоказателя.Показатель = СтрокаСДанными.Показатель Тогда
			
			РазрядКатегорияЗадан = Ложь;
			Если ТарифнаяСетка = ДанныеПозиции.ТарифнаяСетка
				И ЗначениеЗаполнено(ДанныеПозиции.РазрядКатегория) Тогда
				
				РазрядКатегорияЗадан = Истина;
				
			ИначеЕсли ТарифнаяСетка = ДанныеПозиции.ТарифнаяСеткаНадбавки
				И ЗначениеЗаполнено(ДанныеПозиции.РазрядКатегорияНадбавки)Тогда
				
				РазрядКатегорияЗадан = Истина;
				
			КонецЕсли;
			
			Если РазрядКатегорияЗадан Тогда
				
				СтрокаПоказателя.Значение = СтрокаСДанными.Тариф;
				СтрокаПоказателя.ЗначениеМин = СтрокаСДанными.Тариф;
				СтрокаПоказателя.ЗначениеМакс = СтрокаСДанными.Тариф;
				
			Иначе
				
				СтрокаПоказателя.Значение = СтрокаСДанными.ТарифМакс;
				СтрокаПоказателя.ЗначениеМин = СтрокаСДанными.ТарифМин;
				СтрокаПоказателя.ЗначениеМакс = СтрокаСДанными.ТарифМакс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоДаннымЗаполнения(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("Позиции") Тогда
		ДокументОбъект.Позиции.Загрузить(ДанныеЗаполнения.Позиции);
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("Начисления") Тогда
		ДокументОбъект.Начисления.Загрузить(ДанныеЗаполнения.Начисления);
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("Показатели") Тогда
		ДокументОбъект.Показатели.Загрузить(ДанныеЗаполнения.Показатели);
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("ЕжегодныеОтпуска") Тогда
		ДокументОбъект.ЕжегодныеОтпуска.Загрузить(ДанныеЗаполнения.ЕжегодныеОтпуска);
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("Специальности") Тогда
		ДокументОбъект.Специальности.Загрузить(ДанныеЗаполнения.Специальности);
	КонецЕсли; 

КонецПроцедуры

Процедура УпорядочитьСписокПозиций(Позиции) Экспорт
	
	Если ТипЗнч(Позиции) = Тип("ТаблицаЗначений") Тогда
		ТаблицаПозиций = Позиции.Скопировать();
	Иначе
		ТаблицаПозиций = Позиции.Выгрузить();
	КонецЕсли;
	
	ЕстьРазрядКатегория = Ложь;
	Для каждого Колонка Из ТаблицаПозиций.Колонки Цикл
		Если НЕ ЕстьРазрядКатегория И ВРег(Колонка.Имя) = ВРег("РазрядКатегория") Тогда
			ЕстьРазрядКатегория = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПозиций.Колонки.Добавить("ПодразделениеРеквизитДопУпорядочивания");
	ДанныеПодразделений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТаблицаПозиций.ВыгрузитьКолонку("Подразделение"), "РеквизитДопУпорядочиванияИерархического");
	ТаблицаПозиций.Колонки.Добавить("ДолжностьРеквизитДопУпорядочивания");
	ДанныеДолжностей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТаблицаПозиций.ВыгрузитьКолонку("Должность"), "РеквизитДопУпорядочивания");
	СтрокаСортировки = "ПодразделениеРеквизитДопУпорядочивания, ДолжностьРеквизитДопУпорядочивания";
	Если ЕстьРазрядКатегория Тогда
		ТаблицаПозиций.Колонки.Добавить("РазрядКатегорияРеквизитДопУпорядочивания");
		ДанныеРазрядовКатегорий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ТаблицаПозиций.ВыгрузитьКолонку("РазрядКатегория"), "РеквизитДопУпорядочивания");
		СтрокаСортировки = СтрокаСортировки + ", РазрядКатегорияРеквизитДопУпорядочивания";
	КонецЕсли;
	
	Для каждого СтрокаТаблицыПозиций Из ТаблицаПозиций Цикл
		ДанныеПодразделения = ДанныеПодразделений.Получить(СтрокаТаблицыПозиций.Подразделение);
		Если ДанныеПодразделения <> Неопределено Тогда
			СтрокаТаблицыПозиций.ПодразделениеРеквизитДопУпорядочивания = ДанныеПодразделения.РеквизитДопУпорядочиванияИерархического;
		КонецЕсли;
		ДанныеДолжности = ДанныеДолжностей.Получить(СтрокаТаблицыПозиций.Должность);
		Если ДанныеДолжности <> Неопределено Тогда
			СтрокаТаблицыПозиций.ДолжностьРеквизитДопУпорядочивания = ДанныеДолжности.РеквизитДопУпорядочивания;
		КонецЕсли;
		Если ЕстьРазрядКатегория Тогда
			ДанныеРазрядаКатегорий = ДанныеРазрядовКатегорий.Получить(СтрокаТаблицыПозиций.Должность);
			Если ДанныеРазрядаКатегорий <> Неопределено Тогда
				СтрокаТаблицыПозиций.РазрядКатегорияРеквизитДопУпорядочивания = ДанныеРазрядаКатегорий.РеквизитДопУпорядочивания;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПозиций.Сортировать(СтрокаСортировки);
	ТаблицаПозиций.Колонки.Удалить("ПодразделениеРеквизитДопУпорядочивания");
	ТаблицаПозиций.Колонки.Удалить("ДолжностьРеквизитДопУпорядочивания");
	ТаблицаПозиций.Колонки.Удалить("РазрядКатегорияРеквизитДопУпорядочивания");
	
	Если ТипЗнч(Позиции) = Тип("ТаблицаЗначений") Тогда
		Позиции = ТаблицаПозиций.Скопировать();
	Иначе
		Позиции.Загрузить(ТаблицаПозиций);
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальныйИдентификаторСтроки(КоллекцияСтрокПозиций, ИдентификаторРеквизита) Экспорт
	
	ИдентификаторСтрокиМакс = 0;	
	
	Для Каждого СтрокаПозиции Из КоллекцияСтрокПозиций Цикл
		Если СтрокаПозиции[ИдентификаторРеквизита] > ИдентификаторСтрокиМакс Тогда
			ИдентификаторСтрокиМакс = СтрокаПозиции[ИдентификаторРеквизита];
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ИдентификаторСтрокиМакс;
	
КонецФункции

Функция ПараметрыВыбораКатегорииНачислений() Экспорт
	
	МассивКатегорийНачислений = КадровыйУчетРасширенный.ПараметрыВыбораКатегорииНачислений();
	Возврат МассивКатегорийНачислений;
	
КонецФункции

Функция ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат МодульГосударственнаяСлужба.ЗначениеПараметраВыбораНачисленийВПозицииШтатногоРасписанияПоОтношениюКДенежномуСодержанию(Форма);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

Функция ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат МодульГосударственнаяСлужба.ЗначениеПараметраВыбораНачисленийВПозицииШтатногоРасписанияПоОтношениюКДенежномуДовольствию(Форма);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

Процедура СинхронизироватьРеквизитыПозиции(Объект, ФОИспользоватьВилкуСтавокВШтатномРасписании, СинхронизироватьНачисления = Ложь) Экспорт
	
	Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
		
		Объект.ОкладТариф = Объект.ОкладТарифМакс;
		Объект.ФОТ = Объект.ФОТМакс;
		Объект.НадбавкаЗаВредностьРазмер = Объект.НадбавкаЗаВредностьРазмерМакс;
		Объект.РайонныйКоэффициентРазмер = Объект.РайонныйКоэффициентРазмерМакс;
		Объект.СевернаяНадбавкаРазмер = Объект.СевернаяНадбавкаРазмерМакс;
			
	Иначе
			
		Объект.ОкладТарифМин = Объект.ОкладТариф;
		Объект.ФОТМин = Объект.ФОТ;
		Объект.НадбавкаЗаВредностьРазмерМин = Объект.НадбавкаЗаВредностьРазмер;
		Объект.РайонныйКоэффициентРазмерМин = Объект.РайонныйКоэффициентРазмер;
		Объект.СевернаяНадбавкаРазмерМин = Объект.СевернаяНадбавкаРазмер;
		
		Объект.ОкладТарифМакс = Объект.ОкладТариф;
		Объект.ФОТМакс = Объект.ФОТ;
		Объект.НадбавкаЗаВредностьРазмерМакс = Объект.НадбавкаЗаВредностьРазмер;
		Объект.РайонныйКоэффициентРазмерМакс = Объект.РайонныйКоэффициентРазмер;
		Объект.СевернаяНадбавкаРазмерМакс = Объект.СевернаяНадбавкаРазмер;
		
	КонецЕсли;
	
	Если СинхронизироватьНачисления Тогда
		СинхронизироватьРеквизитыНачислений(Объект, ФОИспользоватьВилкуСтавокВШтатномРасписании);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СинхронизироватьРеквизитыНачислений(Объект, ФОИспользоватьВилкуСтавокВШтатномРасписании)
	
	Для каждого СтрокаТЧНачисления Из Объект.Начисления Цикл
		
		Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
			СтрокаТЧНачисления.Размер = СтрокаТЧНачисления.РазмерМакс;
		Иначе
			СтрокаТЧНачисления.РазмерМин = СтрокаТЧНачисления.Размер;
			СтрокаТЧНачисления.РазмерМакс = СтрокаТЧНачисления.Размер;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧПоказатели Из Объект.Показатели Цикл
		
		Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
			СтрокаТЧПоказатели.Значение = СтрокаТЧПоказатели.ЗначениеМакс;
		Иначе
			СтрокаТЧПоказатели.ЗначениеМин = СтрокаТЧПоказатели.Значение;
			СтрокаТЧПоказатели.ЗначениеМакс = СтрокаТЧПоказатели.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьОбновленияСтруктурыШтатногоРасписания(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеСтруктурыШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли;
	
	// Не обрабатываются группы-подразделения штатного расписания
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ШтатноеРасписание")
		И Источник.ГруппаПозицийПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	// Не обрабатываются новые подразделения
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ПодразделенияОрганизаций")
		И Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		
		ИменаКонтролируемыхПолей =
			"Подразделение,
			|Утверждена,
			|ДатаУтверждения,
			|Закрыта,
			|ДатаЗакрытия";
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		
		ИменаКонтролируемыхПолей =
			"Наименование,
			|Родитель";
		
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		// Для новых позиций формируется структура с пустыми значениями ключей
		ПрежниеДанныеОбъекта = Новый Структура(ИменаКонтролируемыхПолей);
	Иначе
		ПрежниеДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, ИменаКонтролируемыхПолей);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПрежниеДанныеОбъекта", ПрежниеДанныеОбъекта);
	
КонецПроцедуры

// Обработчик события ПриЗаписи, инициирует обновление структуры списка справочника ШтатноеРасписание.
//
Процедура ОбновитьСтруктуруШтатногоРасписанияПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеСтруктурыШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли;
	
	ПрежниеДанныеОбъекта = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПрежниеДанныеОбъекта", ПрежниеДанныеОбъекта);
	Если ПрежниеДанныеОбъекта <> Неопределено Тогда
		
		ОбновитьСтруктуруШтатногоРасписания = Ложь;
		Для Каждого КлючиЗначение Из ПрежниеДанныеОбъекта Цикл
			
			Если КлючиЗначение.Значение <> Источник[КлючиЗначение.Ключ] Тогда
				ОбновитьСтруктуруШтатногоРасписания = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбновитьСтруктуруШтатногоРасписания Тогда
			
			ПодразделенияПозиции = Новый Массив;
			ОбновитьСтруктуруПоДаннымПодразделений = Ложь;
			ОбновитьСтруктуруПоДаннымПозиций = Ложь;
			
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
				
				Если ЗначениеЗаполнено(ПрежниеДанныеОбъекта.Подразделение) Тогда
					ПодразделенияПозиции.Добавить(ПрежниеДанныеОбъекта.Подразделение);
				КонецЕсли;
				
				Если ПрежниеДанныеОбъекта.Подразделение <> Источник.Подразделение Тогда
					ПодразделенияПозиции.Добавить(Источник.Подразделение);
					ОбновитьСтруктуруПоДаннымПодразделений = Истина;
				КонецЕсли;
				
				ОбновитьСтруктуруПоДаннымПозиций = Истина;
				
			Иначе
				
				Если ЗначениеЗаполнено(ПрежниеДанныеОбъекта.Родитель) И ПрежниеДанныеОбъекта.Родитель <> Источник.Родитель Тогда
					ПодразделенияПозиции.Добавить(ПрежниеДанныеОбъекта.Родитель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Источник.Родитель) Тогда
					ПодразделенияПозиции.Добавить(Источник.Родитель);
				КонецЕсли;
				
				ПодразделенияПозиции.Добавить(Источник.Ссылка);
				ОбновитьСтруктуруПоДаннымПодразделений = Истина;
				ОбновитьСтруктуруПоДаннымПозиций = Истина;
				
			КонецЕсли;
			
			Если ОбновитьСтруктуруПоДаннымПодразделений Тогда
				Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписанияПоДаннымПодразделений(Источник.Владелец, ПодразделенияПозиции);
			КонецЕсли;
			
			Если ОбновитьСтруктуруПоДаннымПозиций Тогда
				Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписанияПоДаннымПозиций(Источник.Владелец, ПодразделенияПозиции);
			КонецЕсли;
			
			Если ОбновитьСтруктуруПоДаннымПодразделений Тогда
				УправлениеШтатнымРасписанием.ОбновитьСведенияПодразделений(ПодразделенияПозиции);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьОбновлениеСтруктурыШтатногоРасписания(Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтруктурыШтатногоРасписания", Истина);
	
КонецПроцедуры

Процедура ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ОбновитьНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда", Ложь);
	
КонецПроцедуры

Функция ТекущиеКадровыеДанныеПозиций(Организация, ДанныеДляПолученияКадровыхДанных, ДатаДанных) Экспорт
	
	СтруктураПараметров = Новый Структура("Организация,Период", Организация, ДатаДанных);
	
	ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассы = 
		ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании", СтруктураПараметров);
		
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
		
	ДанныеПозиций = Новый Соответствие;
	Для каждого ИсходныеДанные Из ДанныеДляПолученияКадровыхДанных Цикл
		ДанныеПозиций.Вставить(ИсходныеДанные.ИдентификаторСтрокиПозиции, Новый Структура("Начисления,ЕжегодныеОтпуска,Специальности", Новый Массив, Новый Массив, Новый Массив));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДанныеДляПолученияКадровыхДанных", ДанныеДляПолученияКадровыхДанных);

	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаДанных;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаДанных;
	ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение,Должность,ДолжностьПоШтатномуРасписанию";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДляЗаполнения.Подразделение,
		|	ДанныеДляЗаполнения.Должность,
		|	ДанныеДляЗаполнения.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТДанныеДляЗаполнения
		|ИЗ
		|	&ДанныеДляПолученияКадровыхДанных КАК ДанныеДляЗаполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиОрганизации.Период,
		|	СотрудникиОрганизации.Сотрудник,
		|	ДанныеДляЗаполнения.ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТСотрудникиСИдентификаторами
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляЗаполнения КАК ДанныеДляЗаполнения
		|		ПО СотрудникиОрганизации.Подразделение = ДанныеДляЗаполнения.Подразделение
		|			И СотрудникиОрганизации.Должность = ДанныеДляЗаполнения.Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСотрудникиСИдентификаторами.Сотрудник,
		|	ВТСотрудникиСИдентификаторами.Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиСИдентификаторами КАК ВТСотрудникиСИдентификаторами";
		
	Запрос.Выполнить();
		
	// Заполнение начислений
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудники", "Сотрудник");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,
		"Начисление.СпособВыполненияНачисления",
		"=",
		"ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете)");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
			
	Запрос.УстановитьПараметр("КатегорииНачисленияИлиНеоплаченногоВремени", ПараметрыВыбораКатегорииНачислений());
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	ЕСТЬNULL(НачисленияПоказатели.Показатель, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачисленияСПоказателями.Начисление,
		|	ВТНачисленияСПоказателями.Показатель,
		|	ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение, 0) КАК Значение,
		|	ВТСотрудникиСИдентификаторами.ИдентификаторСтрокиПозиции
		|ПОМЕСТИТЬ ВТИдентификаторыСтрокСНачислениями
		|ИЗ
		|	ВТНачисленияСПоказателями КАК ВТНачисленияСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник = ВТНачисленияСПоказателями.Сотрудник)
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель = ВТНачисленияСПоказателями.Показатель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСИдентификаторами КАК ВТСотрудникиСИдентификаторами
		|		ПО ВТНачисленияСПоказателями.Сотрудник = ВТСотрудникиСИдентификаторами.Сотрудник
		|ГДЕ
		|	ВТНачисленияСПоказателями.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачисленияИлиНеоплаченногоВремени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИдентификаторыСтрокСНачислениями.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции,
		|	ВТИдентификаторыСтрокСНачислениями.Начисление КАК Начисление,
		|	ВТИдентификаторыСтрокСНачислениями.Показатель,
		|	МИНИМУМ(ВТИдентификаторыСтрокСНачислениями.Значение) КАК МинимальноеЗначение,
		|	МАКСИМУМ(ВТИдентификаторыСтрокСНачислениями.Значение) КАК МаксимальноеЗначение
		|ИЗ
		|	ВТИдентификаторыСтрокСНачислениями КАК ВТИдентификаторыСтрокСНачислениями
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТИдентификаторыСтрокСНачислениями.Начисление,
		|	ВТИдентификаторыСтрокСНачислениями.Показатель,
		|	ВТИдентификаторыСтрокСНачислениями.ИдентификаторСтрокиПозиции
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ВТИдентификаторыСтрокСНачислениями.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	ИдентификаторСтрокиПозиции,
		|	Начисление";
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторСтрокиПозиции");
		Пока Выборка.Следующий() Цикл
			
			ДанныеПозиции = ДанныеПозиций.Получить(Выборка.ИдентификаторСтрокиПозиции);
			
			СтрокиНачислений = ДанныеПозиции.Начисления;
			
			ВыборкаПоНачислениям = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Начисление");
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				
				СтруктураНачисления = Новый Структура("Начисление,Показатели");
				СтруктураНачисления.Вставить("Начисление", ВыборкаПоНачислениям.Начисление);
				СтруктураНачисления.Вставить("Показатели", Новый Массив);
				
				ВыборкаПоПоказателям = ВыборкаПоНачислениям.Выбрать();
				Пока ВыборкаПоПоказателям.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
						
						СтруктураПоказателя = Новый Структура;
						СтруктураПоказателя.Вставить("Показатель", ВыборкаПоПоказателям.Показатель);
						
						Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
							СтруктураПоказателя.Вставить("МинимальноеЗначение", ВыборкаПоПоказателям.МинимальноеЗначение);
							СтруктураПоказателя.Вставить("МаксимальноеЗначение", ВыборкаПоПоказателям.МаксимальноеЗначение);
						Иначе
							СтруктураПоказателя.Вставить("Значение", ВыборкаПоПоказателям.МаксимальноеЗначение);
						КонецЕсли;
						
						СтруктураНачисления.Показатели.Добавить(СтруктураПоказателя);
						
					КонецЕсли; 
					
				КонецЦикла;
				
				СтрокиНачислений.Добавить(СтруктураНачисления);
					
			КонецЦикла;
				
		КонецЦикла;
			
	КонецЕсли; 
	
	// Заполнение дополнительных отпусков.
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"ПоложенныеВидыЕжегодныхОтпусков",
	Запрос.МенеджерВременныхТаблиц,
	Истина,
	ОписаниеФильтра);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
	|	СотрудникиСИдентификаторами.ИдентификаторСтрокиПозиции
	|ПОМЕСТИТЬ ВТИдентификаторыПозицийСОтпусками
	|ИЗ
	|	ВТПоложенныеВидыЕжегодныхОтпусковСрезПоследних КАК ПоложенныеВидыЕжегодныхОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСИдентификаторами КАК СотрудникиСИдентификаторами
	|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = СотрудникиСИдентификаторами.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПозицийСОтпусками.ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(ИдентификаторыПозицийСОтпусками.КоличествоДнейВГод) КАК КоличествоДнейВГод,
	|	ИдентификаторыПозицийСОтпусками.ИдентификаторСтрокиПозиции КАК ИдентификаторСтрокиПозиции
	|ИЗ
	|	ВТИдентификаторыПозицийСОтпусками КАК ИдентификаторыПозицийСОтпусками
	|
	|СГРУППИРОВАТЬ ПО
	|	ИдентификаторыПозицийСОтпусками.ВидЕжегодногоОтпуска,
	|	ИдентификаторыПозицийСОтпусками.ИдентификаторСтрокиПозиции
	|ИТОГИ ПО
	|	ИдентификаторСтрокиПозиции";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоПозициям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторСтрокиПозиции");
		Пока ВыборкаПоПозициям.Следующий() Цикл
			
			ДанныеПозиции = ДанныеПозиций.Получить(ВыборкаПоПозициям.ИдентификаторСтрокиПозиции);
			
			СтрокиОтпусков = ДанныеПозиции.ЕжегодныеОтпуска;
			
			ВыборкаПоОтпускам = ВыборкаПоПозициям.Выбрать();
			Пока ВыборкаПоОтпускам.Следующий() Цикл
				
				СтруктураОтпуска = Новый Структура;
				СтруктураОтпуска.Вставить("ВидЕжегодногоОтпуска", ВыборкаПоОтпускам.ВидЕжегодногоОтпуска);
				СтруктураОтпуска.Вставить("КоличествоДнейВГод", ВыборкаПоОтпускам.КоличествоДнейВГод);
				
				СтрокиОтпусков.Добавить(СтруктураОтпуска);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ДанныеПозиций;
	
КонецФункции

Функция СформироватьЗапросПоОтклонениюШтатногоРасписания(Организация, Дата, ТекущиеПозиции, Подразделение = Неопределено)
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущиеПозиции", ТекущиеПозиции);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("НеОтбиратьПоПодразделению", Не ЗначениеЗаполнено(Подразделение));
	
	Запрос.УстановитьПараметр("ИспользоватьРазрядыКатегорииКлассыДолжностей",
		ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании"));
	
	КадровыйУчетРасширенный.СоздатьВТТекущаяКадроваяРасстановка(Запрос.МенеджерВременныхТаблиц, Организация, Дата);
	
	ПараметрыПостроения = ПараметрыПостроенияВТШтатноеРасписание(Дата, Организация, Подразделение);
	
	СоздатьВТШтатноеРасписание(
		Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, "Подразделение,Должность,КоличествоСтавок");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеПозиции.Должность КАК Должность,
	|	ТекущиеПозиции.Подразделение КАК Подразделение,
	|	ТекущиеПозиции.КоличествоСтавок КАК КоличествоСтавок,
	|	ТекущиеПозиции.Позиция КАК Позиция,
	|	ТекущиеПозиции.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТТекущиеПозиции
	|ИЗ
	|	&ТекущиеПозиции КАК ТекущиеПозиции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Позиция,
	|	Подразделение,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТекущиеПозиции.Должность, ПозицииШтатногоРасписания.Должность) КАК Должность,
	|	ЕСТЬNULL(ТекущиеПозиции.Подразделение, ПозицииШтатногоРасписания.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ТекущиеПозиции.Позиция, ПозицииШтатногоРасписания.ПозицияШтатногоРасписания) КАК Позиция,
	|	ЕСТЬNULL(ТекущиеПозиции.КоличествоСтавок, ПозицииШтатногоРасписания.КоличествоСтавок) КАК КоличествоСтавок
	|ПОМЕСТИТЬ ВТТекущиеПозицииСгруппированныеДанные
	|ИЗ
	|	ВТТекущиеПозиции КАК ТекущиеПозиции
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТШтатноеРасписание КАК ПозицииШтатногоРасписания
	|		ПО ТекущиеПозиции.Позиция = ПозицииШтатногоРасписания.ПозицияШтатногоРасписания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Позиция,
	|	Подразделение,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Подразделение ЕСТЬ NULL
	|			ТОГДА ТекущаяКадроваяРасстановка.Подразделение
	|		ИНАЧЕ ТекущиеПозиции.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТекущиеПозиции.Должность ЕСТЬ NULL
	|				ТОГДА ТекущаяКадроваяРасстановка.Должность
	|			ИНАЧЕ ТекущиеПозиции.Должность
	|		КОНЕЦ КАК Справочник.Должности) КАК Должность,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТекущиеПозиции.Позиция, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
	|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL
	|			ТОГДА ШтатноеРасписание.Ссылка
	|		ИНАЧЕ ТекущиеПозиции.Позиция
	|	КОНЕЦ КАК ПозицияШтатногоРасписания,
	|	ТекущаяКадроваяРасстановка.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
	|	ЕСТЬNULL(ТекущиеПозиции.КоличествоСтавок, 0) КАК ШтатноеРасписаниеКоличествоСтавок,
	|	ЕСТЬNULL(ТекущаяКадроваяРасстановка.КоличествоСтавок, 0) КАК НовоеКоличествоСтавок
	|ПОМЕСТИТЬ ВТИзмененияШтатногоРасписания
	|ИЗ
	|	ВТТекущаяКадроваяРасстановка КАК ТекущаяКадроваяРасстановка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеПозицииСгруппированныеДанные КАК ТекущиеПозиции
	|		ПО ТекущаяКадроваяРасстановка.Подразделение = ТекущиеПозиции.Подразделение
	|			И ТекущаяКадроваяРасстановка.Должность = ТекущиеПозиции.Должность
	|			И ТекущаяКадроваяРасстановка.ДолжностьПоШтатномуРасписанию = ТекущиеПозиции.Позиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО ТекущаяКадроваяРасстановка.Подразделение = ШтатноеРасписание.Подразделение
	|			И ТекущаяКадроваяРасстановка.Должность = ШтатноеРасписание.Должность
	|			И ТекущаяКадроваяРасстановка.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
	|			И (НЕ ШтатноеРасписание.Закрыта)
	|ГДЕ
	|	ТекущаяКадроваяРасстановка.КоличествоСтавок > ЕСТЬNULL(ТекущиеПозиции.КоличествоСтавок, 0)
	|	И (&НеОтбиратьПоПодразделению
	|			ИЛИ ВЫБОР
	|				КОГДА ТекущиеПозиции.Подразделение ЕСТЬ NULL
	|					ТОГДА ТекущаяКадроваяРасстановка.Подразделение
	|				ИНАЧЕ ТекущиеПозиции.Подразделение
	|			КОНЕЦ = &Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Должность ЕСТЬ NULL
	|			ТОГДА ИзмененияШтатногоРасписания.Должность
	|		ИНАЧЕ ТекущиеПозиции.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Подразделение ЕСТЬ NULL
	|			ТОГДА ИзмененияШтатногоРасписания.Подразделение
	|		ИНАЧЕ ТекущиеПозиции.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ИзмененияШтатногоРасписания.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
	|	ЕСТЬNULL(ТекущиеПозиции.КоличествоСтавок, 0) + ЕСТЬNULL(ИзмененияШтатногоРасписания.НовоеКоличествоСтавок, 0) КАК КоличествоСтавок,
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.Позиция ЕСТЬ NULL
	|			ТОГДА ИзмененияШтатногоРасписания.ПозицияШтатногоРасписания
	|		ИНАЧЕ ТекущиеПозиции.Позиция
	|	КОНЕЦ КАК Позиция,
	|	ВЫБОР
	|		КОГДА ТекущиеПозиции.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НоваяСтрока,
	|	ЕСТЬNULL(ТекущиеПозиции.НомерСтроки, 9999999) КАК НомерСтрокиПорядок,
	|	ИзмененияШтатногоРасписания.Должность.ТарифнаяСетка КАК ТарифнаяСетка,
	|	ИзмененияШтатногоРасписания.Должность.ТарифнаяСеткаНадбавки КАК ТарифнаяСеткаНадбавки,
	|	ИзмененияШтатногоРасписания.Должность.РазрядКатегория КАК РазрядКатегория,
	|	ИзмененияШтатногоРасписания.Должность.РазрядКатегорияНадбавки КАК РазрядКатегорияНадбавки,
	|	ИзмененияШтатногоРасписания.Должность.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией КАК ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
	|	ИзмененияШтатногоРасписания.Должность.ОснованиеДосрочногоНазначенияПенсии КАК ОснованиеДосрочногоНазначенияПенсии,
	|	ИзмененияШтатногоРасписания.Должность.ОсобыеУсловияТрудаПФР КАК ОсобыеУсловияТрудаПФР,
	|	ИзмененияШтатногоРасписания.Должность.ПроцентНадбавкиЗаВредность КАК ПроцентНадбавкиЗаВредность,
	|	ИзмененияШтатногоРасписания.Должность.ВыплачиваетсяНадбавкаЗаВредность КАК ВыплачиваетсяНадбавкаЗаВредность,
	|	ИзмененияШтатногоРасписания.Должность.КоличествоДнейДополнительногоОтпускаВГод КАК КоличествоДнейДополнительногоОтпускаВГод,
	|	ИзмененияШтатногоРасписания.Должность.КодПозицииСпискаПФР КАК КодПозицииСпискаПФР,
	|	ИзмененияШтатногоРасписания.Должность.ХарактерВыполняемыхРаботПФР КАК ХарактерВыполняемыхРаботПФР,
	|	ИзмененияШтатногоРасписания.Должность.ПервичныеДокументыПФР КАК ПервичныеДокументыПФР,
	|	ИзмененияШтатногоРасписания.Должность.ВидСтажаЛетныхЭкипажей КАК ВидСтажаЛетныхЭкипажей,
	|	ИзмененияШтатногоРасписания.Должность.ВидСтажаШахтеров КАК ВидСтажаШахтеров,
	|	ИзмененияШтатногоРасписания.Должность.ТрудоваяФункция КАК ТрудоваяФункция
	|ИЗ
	|	ВТТекущиеПозиции КАК ТекущиеПозиции
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТИзмененияШтатногоРасписания КАК ИзмененияШтатногоРасписания
	|		ПО ТекущиеПозиции.Подразделение = ИзмененияШтатногоРасписания.Подразделение
	|			И ТекущиеПозиции.Должность = ИзмененияШтатногоРасписания.Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПорядок";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ЗаполнитьПодписантовДокумента(ДокументОбъект, Знач ДатаСведений, Знач ВключаяГлавногоБухгалтера = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", ДокументОбъект.Организация);
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя");
	
	ЗаполняемыеПоля = "Руководитель,ДолжностьРуководителя,РуководительКадровойСлужбы,ДолжностьРуководителяКадровойСлужбы";
	
	Если ВключаяГлавногоБухгалтера Тогда
		ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер");
		ЗаполняемыеПоля = ЗаполняемыеПоля + ",ГлавныйБухгалтер";
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения.Вставить("РуководительКадровойСлужбы");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителяКадровойСлужбы");
	
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗапрашиваемыеЗначения, ДатаСведений);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗапрашиваемыеЗначения, ЗаполняемыеПоля);
	
КонецПроцедуры

Функция ЗапросВТМестоПозицииВСтруктуреПредприятия(ИмяВТ = "ВТВсеПозицииНаДатуАктуальности", ИмяПоляПозицияШтатногоРасписания = "ПозицияШтатногоРасписания")
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Запрос = МодульОрганизационнаяСтруктура.ЗапросВТМестоПозицииВСтруктуреПредприятия(ИмяВТ, ИмяПоляПозицияШтатногоРасписания);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ВЫРАЗИТЬ(NULL КАК Справочник.ШтатноеРасписание) КАК Позиция,
			|	ВЫРАЗИТЬ(NULL КАК Справочник.ПодразделенияОрганизаций) КАК МестоВСтруктуреПредприятия
			|ПОМЕСТИТЬ ВТМестоПозицииВСтруктуреПредприятия";
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТМестоПозицииВСтруктуреПредприятия(МенеджерВременныхТаблиц, ИмяВТ, ИмяПоляПозицияШтатногоРасписания = "ПозицияШтатногоРасписания")
	
	Запрос = ЗапросВТМестоПозицииВСтруктуреПредприятия(ИмяВТ, ИмяПоляПозицияШтатногоРасписания);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция МетаданныеРегистровПодсистемы()
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыСведений.ЗанятостьПозицийШтатногоРасписания);
	
	Возврат Регистры;
КонецФункции

Функция ДополнительныеПоляОтчетаШтатноеРасписание(ДобавлятьПоляИсточниковФинансирования = Истина) Экспорт
	
	СоответствиеДополнительныхПолейПредставлениям = Новый Структура;
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			МодульОрганизационнаяСтруктура.ДополнитьДополнительныеПоляОтчетаШтатноеРасписание(СоответствиеДополнительныхПолейПредставлениям);
		КонецЕсли;
		
		Если ДобавлятьПоляИсточниковФинансирования Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
				МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
				МодульУчетБюджетныхУчреждений.ДополнитьДополнительныеПоляОтчетаШтатноеРасписание(СоответствиеДополнительныхПолейПредставлениям);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СоответствиеДополнительныхПолейПредставлениям.Количество() > 0 Тогда
		Возврат СоответствиеДополнительныхПолейПредставлениям;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПроверитьИсключенияПроверкиЗапретаИзменения(Объект, ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта) Экспорт
	
	Если ПроверкаЗапретаИзменения Тогда
		
		Если ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ЗанятостьПозицийШтатногоРасписания") Тогда
			
			// Обход запрета изменения, в случае исправления документа без изменения
			// занятых ставок в прошлых периодах
			
			РегистраторНабора = Объект.Отбор.Регистратор.Значение;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ИсправленныйДокумент", РегистраторНабора.Метаданные()) Тогда
				
				ИсправленныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистраторНабора, "ИсправленныйДокумент");
				Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Регистратор", РегистраторНабора);
					Запрос.Текст =
						"ВЫБРАТЬ
						|	НАЧАЛОПЕРИОДА(ЗанятостьПозиций.ПериодИзмерение, ДЕНЬ) КАК Период,
						|	ЗанятостьПозиций.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
						|	ЗанятостьПозиций.Сотрудник КАК Сотрудник,
						|	ЗанятостьПозиций.ДокументОснование КАК ДокументОснование,
						|	ЗанятостьПозиций.ВидЗанятостиПозиции КАК ВидЗанятостиПозиции,
						|	СУММА(ЗанятостьПозиций.КоличествоСтавок) КАК КоличествоСтавок
						|ИЗ
						|	РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИспр КАК ЗанятостьПозиций
						|ГДЕ
						|	ЗанятостьПозиций.РегистраторИзмерение = &Регистратор
						|
						|СГРУППИРОВАТЬ ПО
						|	ЗанятостьПозиций.ПериодИзмерение,
						|	ЗанятостьПозиций.ПозицияШтатногоРасписания,
						|	ЗанятостьПозиций.Сотрудник,
						|	ЗанятостьПозиций.ДокументОснование,
						|	ЗанятостьПозиций.ВидЗанятостиПозиции";
					
					РезультатЗапроса = Запрос.Выполнить();
					Если Не РезультатЗапроса.Пустой() Тогда
						
						ПроверкаЗапретаИзменения = Ложь;
						ТаблицаНабора = РезультатЗапроса.Выгрузить();
						
						ТаблицаОбъекта = Объект.Выгрузить();
						ТаблицаОбъекта.Свернуть("Период,ПозицияШтатногоРасписания,Сотрудник,ДокументОснование,ВидЗанятостиПозиции", "КоличествоСтавок");
						Для Каждого СтрокаТаблицаОбъекта Из ТаблицаОбъекта Цикл
							СтрокаТаблицаОбъекта.Период = НачалоДня(СтрокаТаблицаОбъекта.Период);
						КонецЦикла;
						
						Если Не ОбщегоНазначения.КоллекцииИдентичны(ТаблицаНабора, ТаблицаОбъекта) Тогда
							ПроверкаЗапретаИзменения = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСведенияПодразделений(ОбновляемыеПодразделения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли;
	
	Пока ОбновляемыеПодразделения.Количество() > 0 Цикл
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбновляемыеПодразделения", ОбновляемыеПодразделения);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
			|ПОМЕСТИТЬ ВТОбновляемыеПодразделения
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.Ссылка В(&ОбновляемыеПодразделения)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбновляемыеПодразделения.Подразделение КАК Подразделение,
			|	МИНИМУМ(ПодразделенияОрганизаций.ДатаСоздания) КАК ДатаСоздания,
			|	МИНИМУМ(ПодразделенияОрганизаций.Расформировано) КАК Расформировано,
			|	МАКСИМУМ(ПодразделенияОрганизаций.ДатаРасформирования) КАК ДатаРасформирования
			|ПОМЕСТИТЬ ВТСведенияПодчиненныхПодразделений
			|ИЗ
			|	ВТОбновляемыеПодразделения КАК ОбновляемыеПодразделения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|		ПО ОбновляемыеПодразделения.Подразделение = ПодразделенияОрганизаций.Родитель
			|			И (ПодразделенияОрганизаций.ДатаСоздания > ДАТАВРЕМЯ(1, 1, 1))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбновляемыеПодразделения.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбновляемыеПодразделения.Подразделение КАК Подразделение,
			|	МИНИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТМинимальныеДатыИспользованияПодразделений
			|ИЗ
			|	ВТОбновляемыеПодразделения КАК ОбновляемыеПодразделения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделений
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|			ПО ПодчиненностьПодразделений.Подразделение = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение
			|				И (ИсторияИспользованияШтатногоРасписания.Используется)
			|		ПО ОбновляемыеПодразделения.Подразделение = ПодчиненностьПодразделений.ВышестоящееПодразделение
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбновляемыеПодразделения.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбновляемыеПодразделения.Подразделение КАК Подразделение,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТМаксимальныеДатыИзменений
			|ИЗ
			|	ВТОбновляемыеПодразделения КАК ОбновляемыеПодразделения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделений
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|			ПО ПодчиненностьПодразделений.Подразделение = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение
			|		ПО ОбновляемыеПодразделения.Подразделение = ПодчиненностьПодразделений.ВышестоящееПодразделение
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания,
			|	ОбновляемыеПодразделения.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МаксимальныеДатыИзменений.Подразделение КАК Подразделение,
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Используется) КАК Используется
			|ПОМЕСТИТЬ ВТПоследниеИспользованияПодразделений
			|ИЗ
			|	ВТМаксимальныеДатыИзменений КАК МаксимальныеДатыИзменений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|		ПО МаксимальныеДатыИзменений.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|			И МаксимальныеДатыИзменений.Дата = ИсторияИспользованияШтатногоРасписания.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	МаксимальныеДатыИзменений.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоследниеИспользованияПодразделений.Подразделение КАК Подразделение,
			|	МАКСИМУМ(МаксимальныеДатыИзменений.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТДатыЗакрытияПодразделения
			|ИЗ
			|	ВТМаксимальныеДатыИзменений КАК МаксимальныеДатыИзменений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеИспользованияПодразделений КАК ПоследниеИспользованияПодразделений
			|		ПО МаксимальныеДатыИзменений.Подразделение = ПоследниеИспользованияПодразделений.Подразделение
			|			И (НЕ ПоследниеИспользованияПодразделений.Используется)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоследниеИспользованияПодразделений.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбновляемыеПодразделения.Подразделение КАК Подразделение,
			|	ВЫБОР
			|		КОГДА МинимальныеДатыИспользованияПодразделений.Дата ЕСТЬ NULL
			|			ТОГДА NULL
			|		КОГДА МинимальныеДатыИспользованияПодразделений.Дата = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Сформировано,
			|	МинимальныеДатыИспользованияПодразделений.Дата КАК ДатаСоздания,
			|	ВЫБОР
			|		КОГДА МинимальныеДатыИспользованияПодразделений.Дата ЕСТЬ NULL
			|			ТОГДА NULL
			|		КОГДА ДатыЗакрытияПодразделения.Дата ЕСТЬ NULL
			|			ТОГДА NULL
			|		КОГДА МинимальныеДатыИспользованияПодразделений.Дата = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ ДатыЗакрытияПодразделения.Дата = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Расформировано,
			|	ВЫБОР
			|		КОГДА МинимальныеДатыИспользованияПодразделений.Дата ЕСТЬ NULL
			|			ТОГДА NULL
			|		КОГДА ДатыЗакрытияПодразделения.Дата ЕСТЬ NULL
			|			ТОГДА NULL
			|		КОГДА МинимальныеДатыИспользованияПодразделений.Дата = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ ДатыЗакрытияПодразделения.Дата
			|	КОНЕЦ КАК ДатаРасформирования
			|ПОМЕСТИТЬ ВТСформированностьПодразделенийПредварительно
			|ИЗ
			|	ВТОбновляемыеПодразделения КАК ОбновляемыеПодразделения
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальныеДатыИспользованияПодразделений КАК МинимальныеДатыИспользованияПодразделений
			|		ПО ОбновляемыеПодразделения.Подразделение = МинимальныеДатыИспользованияПодразделений.Подразделение
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыЗакрытияПодразделения КАК ДатыЗакрытияПодразделения
			|		ПО ОбновляемыеПодразделения.Подразделение = ДатыЗакрытияПодразделения.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СформированностьПодразделений.Подразделение КАК Подразделение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СведенияПодчиненныхПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЕСТЬNULL(СформированностьПодразделений.Сформировано, ЛОЖЬ)
			|	КОНЕЦ КАК Сформировано,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СведенияПодчиненныхПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1)) <= ЕСТЬNULL(СформированностьПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1))
			|					И ЕСТЬNULL(СведенияПодчиненныхПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ СформированностьПодразделений.ДатаСоздания ЕСТЬ NULL
			|			ТОГДА ЕСТЬNULL(СведенияПодчиненныхПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1))
			|		КОГДА ЕСТЬNULL(СведенияПодчиненныхПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(СформированностьПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1))
			|					И ЕСТЬNULL(СформированностьПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ СведенияПодчиненныхПодразделений.ДатаСоздания ЕСТЬ NULL
			|			ТОГДА ЕСТЬNULL(СформированностьПодразделений.ДатаСоздания, ДАТАВРЕМЯ(1, 1, 1))
			|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|	КОНЕЦ КАК ДатаСоздания,
			|	ВЫБОР
			|		КОГДА ПоследниеИспользованияПодразделений.Используется = ИСТИНА
			|			ТОГДА ЛОЖЬ
			|		КОГДА СформированностьПодразделений.Расформировано = ИСТИНА
			|				И СведенияПодчиненныхПодразделений.Расформировано ЕСТЬ NULL
			|			ТОГДА ИСТИНА
			|		КОГДА СведенияПодчиненныхПодразделений.Расформировано = ИСТИНА
			|				И СформированностьПодразделений.Расформировано ЕСТЬ NULL
			|			ТОГДА ИСТИНА
			|		КОГДА СведенияПодчиненныхПодразделений.Расформировано = ИСТИНА
			|				И СформированностьПодразделений.Расформировано = ИСТИНА
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Расформировано,
			|	ВЫБОР
			|		КОГДА ПоследниеИспользованияПодразделений.Используется = ИСТИНА
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		КОГДА СформированностьПодразделений.Расформировано = ИСТИНА
			|				И СведенияПодчиненныхПодразделений.Расформировано ЕСТЬ NULL
			|			ТОГДА ЕСТЬNULL(СформированностьПодразделений.ДатаРасформирования, ДАТАВРЕМЯ(1, 1, 1))
			|		КОГДА СведенияПодчиненныхПодразделений.Расформировано = ИСТИНА
			|				И СформированностьПодразделений.Расформировано ЕСТЬ NULL
			|			ТОГДА ЕСТЬNULL(СведенияПодчиненныхПодразделений.ДатаРасформирования, ДАТАВРЕМЯ(1, 1, 1))
			|		КОГДА СведенияПодчиненныхПодразделений.Расформировано = ИСТИНА
			|				И СформированностьПодразделений.Расформировано = ИСТИНА
			|			ТОГДА ЕСТЬNULL(ВЫБОР
			|						КОГДА СформированностьПодразделений.ДатаРасформирования >= СведенияПодчиненныхПодразделений.ДатаРасформирования
			|							ТОГДА СформированностьПодразделений.ДатаРасформирования
			|						ИНАЧЕ СведенияПодчиненныхПодразделений.ДатаРасформирования
			|					КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1))
			|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|	КОНЕЦ КАК ДатаРасформирования
			|ПОМЕСТИТЬ ВТСформированностьПодразделений
			|ИЗ
			|	ВТСформированностьПодразделенийПредварительно КАК СформированностьПодразделений
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияПодчиненныхПодразделений КАК СведенияПодчиненныхПодразделений
			|		ПО СформированностьПодразделений.Подразделение = СведенияПодчиненныхПодразделений.Подразделение
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеИспользованияПодразделений КАК ПоследниеИспользованияПодразделений
			|		ПО СформированностьПодразделений.Подразделение = ПоследниеИспользованияПодразделений.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СформированностьПодразделений.Подразделение КАК Подразделение,
			|	СформированностьПодразделений.Сформировано КАК Сформировано,
			|	СформированностьПодразделений.ДатаСоздания КАК ДатаСоздания,
			|	СформированностьПодразделений.Расформировано КАК Расформировано,
			|	СформированностьПодразделений.ДатаРасформирования КАК ДатаРасформирования,
			|	СформированностьПодразделений.Подразделение.Родитель КАК Родитель
			|ИЗ
			|	ВТСформированностьПодразделений КАК СформированностьПодразделений
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|		ПО СформированностьПодразделений.Подразделение = ПодразделенияОрганизаций.Ссылка
			|ГДЕ
			|	(СформированностьПодразделений.Сформировано <> ПодразделенияОрганизаций.Сформировано
			|			ИЛИ СформированностьПодразделений.ДатаСоздания <> ПодразделенияОрганизаций.ДатаСоздания
			|			ИЛИ СформированностьПодразделений.Расформировано <> ПодразделенияОрганизаций.Расформировано
			|			ИЛИ СформированностьПодразделений.ДатаРасформирования <> ПодразделенияОрганизаций.ДатаРасформирования)";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		Иначе
			
			ОбновляемыеПодразделения.Очистить();
			ТекущиеРодители = Новый Массив;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ПодразделениеОбъект = Выборка.Подразделение.ПолучитьОбъект();
				
				Попытка
					ПодразделениеОбъект.Заблокировать();
				Исключение
					
					ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось изменить подразделение ""%1"".
						|Возможно, подразделение редактируется другим пользователем';
						|en = 'Cannot change the ""%1"" business unit.
						|Maybe, the business unit is being edited by another user'"),
						ПодразделениеОбъект.Наименование);
						
					ВызватьИсключение ТекстИсключенияЗаписи;
					
				КонецПопытки;
				
				ЗаполнитьЗначенияСвойств(ПодразделениеОбъект, Выборка);
				
				Если НЕ ПодразделениеОбъект.Расформировано И ПодразделениеОбъект.ПометкаУдаления Тогда
					ПодразделениеОбъект.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				ОтключитьОбновлениеСтруктурыШтатногоРасписания(ПодразделениеОбъект);
				
				ПодразделениеОбъект.Записать();
				
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
					ТекущиеРодители.Добавить(Выборка.Родитель);
				КонецЕсли;
				
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбновляемыеПодразделения, ТекущиеРодители, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#Область ЗапросыПоСпециальностямПозицийШтатногоРасписания

// Функция возвращает список специальностей, действующих на дату события для указанного списка позиций штатного
// расписания.
//
Функция СпециальностиПозицииШтатногоРасписания(СписокПозиций, ДатаСобытия, Регистратор = Неопределено) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПозиций",	СписокПозиций);
	Запрос.УстановитьПараметр("ДатаСобытия",	ДатаСобытия);
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата,
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
		|ПОМЕСТИТЬ ВТСрезПоследних
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|ГДЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания В(&СписокПозиций)
		|	И ИсторияИспользованияШтатногоРасписания.Дата < &ДатаСобытия
		|	И ИсторияИспользованияШтатногоРасписания.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ИсторияСпециальностейПоШтатномуРасписанию.Специальность КАК Специальность
		|ИЗ
		|	РегистрСведений.ИсторияСпециальностейПоШтатномуРасписанию КАК ИсторияСпециальностейПоШтатномуРасписанию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезПоследних КАК СрезПоследних
		|		ПО ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания = СрезПоследних.ПозицияШтатногоРасписания
		|			И ИсторияСпециальностейПоШтатномуРасписанию.Дата = СрезПоследних.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Специальность";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтатноеРасписаниеСпециальности.Ссылка КАК ПозицияШтатногоРасписания,
		|	ШтатноеРасписаниеСпециальности.Специальность КАК Специальность
		|ИЗ
		|	Справочник.ШтатноеРасписание.Специальности КАК ШтатноеРасписаниеСпециальности
		|ГДЕ
		|	ШтатноеРасписаниеСпециальности.Ссылка В(&СписокПозиций)
		|	И НЕ ШтатноеРасписаниеСпециальности.Ссылка.ГруппаПозицийПодразделения
		|	И ШтатноеРасписаниеСпециальности.Ссылка.Утверждена
		|	И ШтатноеРасписаниеСпециальности.Ссылка.ДатаУтверждения <= &ДатаСобытия
		|	И (НЕ ШтатноеРасписаниеСпециальности.Ссылка.Закрыта
		|			ИЛИ ШтатноеРасписаниеСпециальности.Ссылка.ДатаЗакрытия >= &ДатаСобытия
		|			ИЛИ ШтатноеРасписаниеСпециальности.Ссылка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Специальность";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТСпециальностиПозицийШтатногоРасписания(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяПоляДата = "Дата", ИмяПоляПозицияШтатногоРасписания = "ПозицияШтатногоРасписания", ИмяВТСпециальностиПозицийШтатногоРасписания = "ВТСпециальностиПозицийШтатногоРасписания")
	
	Запрос = ЗапросВТСпециальностиПозицийШтатногоРасписания(
		ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяПоляДата, ИмяПоляПозицияШтатногоРасписания, ИмяВТСпециальностиПозицийШтатногоРасписания);
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ЗапросВТСпециальностиПозицийШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяПоляДата, ИмяПоляПозицияШтатногоРасписания, ИмяВТСпециальностиПозицийШтатногоРасписания)
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
		|	ИсторияСпециальностейПоШтатномуРасписанию.Специальность КАК Специальность
		|ПОМЕСТИТЬ ВТСпециальностиПозицийШтатногоРасписания
		|ИЗ
		|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСпециальностейПоШтатномуРасписанию КАК ИсторияСпециальностейПоШтатномуРасписанию
		|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания
		|			И ПозицииШтатногоРасписания.Дата = ИсторияСпециальностейПоШтатномуРасписанию.Дата
		|{ГДЕ
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания.Владелец.* КАК Организация,
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания.Подразделение.* КАК Подразделение,
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания.Должность.* КАК Должность,
		|	ИсторияСпециальностейПоШтатномуРасписанию.ПозицияШтатногоРасписания.*}";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
		|	Специальности.Специальность КАК Специальность
		|ПОМЕСТИТЬ ВТСпециальностиПозицийШтатногоРасписания
		|ИЗ
		|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.Специальности КАК Специальности
		|		ПО ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = Специальности.Ссылка
		|{ГДЕ
		|	Специальности.Ссылка.Владелец.* КАК Организация,
		|	Специальности.Ссылка.Подразделение.*,
		|	Специальности.Ссылка.Должность.*,
		|	Специальности.Ссылка.Ссылка.* КАК ПозицияШтатногоРасписания}";
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.ПозицияШтатногоРасписания", "ПозицииШтатногоРасписания." + ИмяПоляПозицияШтатногоРасписания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПозицииШтатногоРасписания.Дата", "ПозицииШтатногоРасписания." + ИмяПоляДата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСпециальностиПозицийШтатногоРасписания", ИмяВТСпециальностиПозицийШтатногоРасписания);
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.СинхронизироватьИспользованиеШтатногоРасписания";
	Обработчик.ОбщиеДанные = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.4";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("089a2fce-3027-4cb9-9b5b-3fb152b7e129");
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ЗаполнитьПозицииВДвиженияхРегистраСведенийПараметрыПериодовСтажаПФР";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение позиций штатного расписания в регистре сведений ""Параметры периодов стажа ПФР"".';
									|en = 'Populating headcount positions in ""Parameters of PF service periods"" information register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c378bfe8-19cb-4b71-911b-ca97175cf080");
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ЗаполнитьДвиженияБронированийЗанятостиПозицийШтатногоРасписания";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет движения по регистру сведений ""Занятость позиций штатного расписания"".';
									|en = 'Populates ""Occupied positions of headcount"" information register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.32";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("58a3908d-439f-4997-a7bb-99b291b07237");
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ЗаполнитьОснованиеКлассовУсловийТрудаПоДолжностям";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение оснований изменений классов условий труда по документам штатного расписания.';
									|en = 'Populating changes in labor condition classes as per headcount documents'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.106";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f870399c-103c-4df3-a195-a81647beabe1");
	Обработчик.Процедура = "РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.ПерезаполнитьИнтервальныйРегистр";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение регистра сведлений ""Занятость позиций штатного расписания"".';
									|en = 'Refill the ""Occupied positions of headcount"" information register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d1045c06-920e-4d3d-949a-4873a718cb46");
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ЗаполнитьВШтатномРасписанииВидСтажаСЗВ_ДСО";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов справочника ""Штатное расписание"".';
									|en = 'Fill attributes of the ""Headcount"" catalog.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.8";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8fa9db96-5543-4c16-a2ce-2868f0e8b3be");
	Обработчик.Процедура = "УправлениеШтатнымРасписанием.ЗаполнитьВИсторииШтатногоРасписанияВидСтажаСЗВ_ДСО";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов регистра сведений ""История использования штатного расписания"".';
									|en = 'Fill attributes of the ""Staff list use history"" information register.'");
	
КонецПроцедуры

Процедура СинхронизироватьИспользованиеШтатногоРасписания() Экспорт
	
	НастройкиШтатногоРасписания = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	НастройкиШтатногоРасписания.Прочитать();
	
	ЗаписыватьНастройки = Ложь;
	Если НастройкиШтатногоРасписания.Выбран() Тогда
	
		Если НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание = НастройкиШтатногоРасписания.НеИспользоватьШтатноеРасписание Тогда
			НастройкиШтатногоРасписания.НеИспользоватьШтатноеРасписание = Не НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание;
			ЗаписыватьНастройки = Истина;
		КонецЕсли;
		Если НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания = НастройкиШтатногоРасписания.НеИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			НастройкиШтатногоРасписания.НеИспользоватьИсториюИзмененияШтатногоРасписания = Не НастройкиШтатногоРасписания.ИспользоватьИсториюИзмененияШтатногоРасписания;
			ЗаписыватьНастройки = Истина;
		КонецЕсли;
		Если НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании = НастройкиШтатногоРасписания.НеИспользоватьВилкуСтавокВШтатномРасписании Тогда
			НастройкиШтатногоРасписания.НеИспользоватьВилкуСтавокВШтатномРасписании = Не НастройкиШтатногоРасписания.ИспользоватьВилкуСтавокВШтатномРасписании;
			ЗаписыватьНастройки = Истина;
		КонецЕсли;
		
	Иначе
		
		ЗначенияПоУмолчанию = НастройкиШтатногоРасписанияПоУмолчанию();
		Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
			НастройкиШтатногоРасписания[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		ЗаписыватьНастройки = Истина;
		
	КонецЕсли;
	
	Если ЗаписыватьНастройки Тогда
		НастройкиШтатногоРасписания.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияБронированийЗанятостиПозицийШтатногоРасписания(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.УдалитьЗанятыеПозицииШтатногоРасписания КАК УдалитьЗанятыеПозицииШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|		ПО УдалитьЗанятыеПозицииШтатногоРасписания.Регистратор = ЗанятостьПозицийШтатногоРасписания.Регистратор
		|ГДЕ
		|	УдалитьЗанятыеПозицииШтатногоРасписания.БронированиеПозиции
		|	И ЗанятостьПозицийШтатногоРасписания.Период ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	МассивРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	Если МассивРегистраторов.Количество() = 0 Тогда
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	НастройкиШтатногоРасписания = НастройкиШтатногоРасписания();
	Запрос.УстановитьПараметр("ДнейСохраненияБрони", НастройкиШтатногоРасписания.ДнейСохраненияБрони);
	
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Период КАК Период,
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Регистратор КАК Регистратор,
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Сотрудник КАК Сотрудник,
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(УдалитьЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания) КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Забронирована) КАК ВидЗанятостиПозиции,
		|	МАКСИМУМ(УдалитьЗанятыеПозицииШтатногоРасписания.КоличествоСтавок) КАК КоличествоСтавок,
		|	ДОБАВИТЬКДАТЕ(УдалитьЗанятыеПозицииШтатногоРасписания.Период, ДЕНЬ, &ДнейСохраненияБрони) КАК ДействуетДо
		|ИЗ
		|	РегистрНакопления.УдалитьЗанятыеПозицииШтатногоРасписания КАК УдалитьЗанятыеПозицииШтатногоРасписания
		|ГДЕ
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Регистратор В(&МассивРегистраторов)
		|	И УдалитьЗанятыеПозицииШтатногоРасписания.БронированиеПозиции
		|
		|СГРУППИРОВАТЬ ПО
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Период,
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Регистратор,
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Сотрудник,
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Сотрудник.ГоловнаяОрганизация,
		|	УдалитьЗанятыеПозицииШтатногоРасписания.Сотрудник.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗанятостьПозицийШтатногоРасписания.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.СформироватьДвиженияИнтервальногоРегистраПоМассивуРегистраторов(
		МассивРегистраторов, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьОснованиеКлассовУсловийТрудаПоДолжностям(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассыУсловийТрудаПоДолжностям.Период КАК Период,
		|	КлассыУсловийТрудаПоДолжностям.Должность КАК Должность,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК ДатаРегистрацииИзменений,
		|	ИзменениеШтатногоРасписанияПозиции.Ссылка КАК Основание
		|ИЗ
		|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.Позиции КАК ИзменениеШтатногоРасписанияПозиции
		|		ПО КлассыУсловийТрудаПоДолжностям.Должность = ИзменениеШтатногоРасписанияПозиции.Позиция
		|			И КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда = ИзменениеШтатногоРасписанияПозиции.КлассУсловийТруда
		|			И (КлассыУсловийТрудаПоДолжностям.Период = НАЧАЛОПЕРИОДА(ИзменениеШтатногоРасписанияПозиции.Ссылка.ДатаВступленияВСилу, МЕСЯЦ))
		|ГДЕ
		|	КлассыУсловийТрудаПоДолжностям.Основание = НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлассыУсловийТрудаПоДолжностям.Период,
		|	КлассыУсловийТрудаПоДолжностям.Должность,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений,
		|	УтверждениеШтатногоРасписанияПозиции.Ссылка
		|ИЗ
		|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Позиции КАК УтверждениеШтатногоРасписанияПозиции
		|		ПО КлассыУсловийТрудаПоДолжностям.Должность = УтверждениеШтатногоРасписанияПозиции.Позиция
		|			И КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда = УтверждениеШтатногоРасписанияПозиции.КлассУсловийТруда
		|			И КлассыУсловийТрудаПоДолжностям.Период = УтверждениеШтатногоРасписанияПозиции.Ссылка.МесяцВступленияВСилу
		|ГДЕ
		|	КлассыУсловийТрудаПоДолжностям.Основание = НЕОПРЕДЕЛЕНО";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Должность.Установить(Выборка.Должность);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьВШтатномРасписанииВидСтажаСЗВ_ДСО(ПараметрыОбновления = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ШтатноеРасписание.Ссылка КАК Ссылка,
		|	Должности.ВидСтажаЛетныхЭкипажей КАК ВидСтажаЛетныхЭкипажей,
		|	Должности.ВидСтажаШахтеров КАК ВидСтажаШахтеров
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
		|		ПО ШтатноеРасписание.Должность = Должности.Ссылка
		|			И (ШтатноеРасписание.ВидСтажаЛетныхЭкипажей = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаЛетныхЭкипажей.ПустаяСсылка))
		|			И (ШтатноеРасписание.ВидСтажаШахтеров = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаШахтеров.ПустаяСсылка))
		|			И (НЕ ШтатноеРасписание.ПометкаУдаления)
		|			И (Должности.ВидСтажаЛетныхЭкипажей <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаЛетныхЭкипажей.ПустаяСсылка)
		|				ИЛИ Должности.ВидСтажаШахтеров <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаШахтеров.ПустаяСсылка))";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ШтатноеРасписание", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ВидСтажаЛетныхЭкипажей = Выборка.ВидСтажаЛетныхЭкипажей;
		СправочникОбъект.ВидСтажаШахтеров = Выборка.ВидСтажаШахтеров;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВИсторииШтатногоРасписанияВидСтажаСЗВ_ДСО(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Ссылка,
		|	ШтатноеРасписание.ВидСтажаЛетныхЭкипажей КАК ВидСтажаЛетныхЭкипажей,
		|	ШтатноеРасписание.ВидСтажаШахтеров КАК ВидСтажаШахтеров
		|ПОМЕСТИТЬ ВТПозицииШтатногоРасписания
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	НЕ ШтатноеРасписание.ПометкаУдаления
		|	И (ШтатноеРасписание.ВидСтажаЛетныхЭкипажей <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаЛетныхЭкипажей.ПустаяСсылка)
		|			ИЛИ ШтатноеРасписание.ВидСтажаШахтеров <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаШахтеров.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТПоследниеДаты
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|		ПО ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = ПозицииШтатногоРасписания.Ссылка
		|			И (ТИПЗНАЧЕНИЯ(ИсторияИспользованияШтатногоРасписания.Регистратор) В (ТИП(Документ.ИзменениеШтатногоРасписания), ТИП(Документ.УтверждениеШтатногоРасписания)))
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ИсторияИспользованияШтатногоРасписания.Регистратор КАК Регистратор
		|ИЗ
		|	ВТПоследниеДаты КАК ПоследниеДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|		ПО ПоследниеДаты.Дата = ИсторияИспользованияШтатногоРасписания.Дата
		|			И ПоследниеДаты.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
		|			И (ТИПЗНАЧЕНИЯ(ИсторияИспользованияШтатногоРасписания.Регистратор) В (ТИП(Документ.ИзменениеШтатногоРасписания), ТИП(Документ.УтверждениеШтатногоРасписания)))
		|			И (ИсторияИспользованияШтатногоРасписания.ВидСтажаЛетныхЭкипажей = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаЛетныхЭкипажей.ПустаяСсылка))
		|			И (ИсторияИспользованияШтатногоРасписания.ВидСтажаШахтеров = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаШахтеров.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПозицииШтатногоРасписания.Ссылка КАК Ссылка,
		|	ПозицииШтатногоРасписания.ВидСтажаЛетныхЭкипажей КАК ВидСтажаЛетныхЭкипажей,
		|	ПозицииШтатногоРасписания.ВидСтажаШахтеров КАК ВидСтажаШахтеров
		|ИЗ
		|	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();			   
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество()-2];
	
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	ВидыСтажаПозиций = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	ВидыСтажаПозиций.Индексы.Добавить("Ссылка");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МетаданныеДокумента = Выборка.Регистратор.Метаданные();
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, МетаданныеДокумента.ПолноеИмя(), "Ссылка", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Для Каждого СтрокаПозиции Из ДокументОбъект.Позиции Цикл
			ДанныеВидаСтажа = ВидыСтажаПозиций.Найти(СтрокаПозиции.Позиция, "Ссылка");
			Если ДанныеВидаСтажа <> Неопределено Тогда
				СтрокаПозиции.ВидСтажаЛетныхЭкипажей = ДанныеВидаСтажа.ВидСтажаЛетныхЭкипажей;
				СтрокаПозиции.ВидСтажаШахтеров = ДанныеВидаСтажа.ВидСтажаШахтеров;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИсторияИспользованияШтатногоРасписания.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаПозиции Из НаборЗаписей Цикл
			ДанныеВидаСтажа = ВидыСтажаПозиций.Найти(СтрокаПозиции.ПозицияШтатногоРасписания, "Ссылка");
			Если ДанныеВидаСтажа <> Неопределено Тогда
				СтрокаПозиции.ВидСтажаЛетныхЭкипажей = ДанныеВидаСтажа.ВидСтажаЛетныхЭкипажей;
				СтрокаПозиции.ВидСтажаШахтеров = ДанныеВидаСтажа.ВидСтажаШахтеров;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ПолучениеСведенийШтатногоРасписания

Процедура ДополнитьСоставЗапрашиваемыхДанныхИменамиДанныхНачислений(ИменаСведений) Экспорт
	
	Если ИменаСведений = Неопределено Тогда
		ИменаСведений = Новый Массив;
	ИначеЕсли ТипЗнч(ИменаСведений) = Тип("Строка") Тогда
		ИменаСведений = СтрРазделить(ИменаСведений, ",");
	КонецЕсли;
	
	ОбязательныеДанныеНачислений = Новый Структура;
	ОбязательныеДанныеНачислений.Вставить("Подразделение", Ложь);
	ОбязательныеДанныеНачислений.Вставить("РайонныйКоэффициент", Ложь);
	ОбязательныеДанныеНачислений.Вставить("РайонныйКоэффициентРазмер", Ложь);
	ОбязательныеДанныеНачислений.Вставить("РайонныйКоэффициентРазмерМин", Ложь);
	ОбязательныеДанныеНачислений.Вставить("РайонныйКоэффициентРазмерМакс", Ложь);
	ОбязательныеДанныеНачислений.Вставить("ПрименятьСевернуюНадбавку", Ложь);
	ОбязательныеДанныеНачислений.Вставить("СевернаяНадбавкаРазмер", Ложь);
	ОбязательныеДанныеНачислений.Вставить("СевернаяНадбавкаРазмерМин", Ложь);
	ОбязательныеДанныеНачислений.Вставить("СевернаяНадбавкаРазмерМакс", Ложь);
	ОбязательныеДанныеНачислений.Вставить("ВыплачиваетсяНадбавкаЗаВредность", Ложь);
	ОбязательныеДанныеНачислений.Вставить("ПроцентНадбавкиЗаВредность", Ложь);
	ОбязательныеДанныеНачислений.Вставить("НадбавкаЗаВредностьРазмер", Ложь);
	ОбязательныеДанныеНачислений.Вставить("НадбавкаЗаВредностьРазмерМин", Ложь);
	ОбязательныеДанныеНачислений.Вставить("НадбавкаЗаВредностьРазмерМакс", Ложь);
	
	Для Каждого ИмяСведений Из ИменаСведений Цикл
		
		Если ОбязательныеДанныеНачислений.Свойство(ИмяСведений) Тогда
			ОбязательныеДанныеНачислений.Вставить(ИмяСведений, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОписаниеНеобходимогоИмени Из ОбязательныеДанныеНачислений Цикл
		
		Если Не ОписаниеНеобходимогоИмени.Значение Тогда
			ИменаСведений.Добавить(ОписаниеНеобходимогоИмени.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ДополнитьЗапросВТШтатноеРасписаниеНачислениями(Запрос, ИмяВТШтатноеРасписание, ПараметрыПостроения, ОписаниеИсточников = Неопределено)
	
	Если ОписаниеИсточников = Неопределено Тогда
		ОписаниеИсточников = ОписаниеИсточниковСведенийОШтатномРасписании();
	КонецЕсли;
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ОписаниеИсточниковНачислений = ОписаниеИсточниковСведенийОНачисленияхШтатногоРасписания(
		ПараметрыПостроения, ОписаниеИсточников, Схема, ИмяВТШтатноеРасписание);
	
	ПоследнийЗапрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросСхемыФормирующийВТ(Схема, ИмяВТШтатноеРасписание);
	
	Источник = ПоследнийЗапрос.Операторы[0].Источники[0].Источник;
	Если ТипЗнч(Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		
		// Назначение типа полю временной таблицы
		ПолеПозицияШтатногоРасписания = Источник.ДоступныеПоля.Найти("ПозицияШтатногоРасписания");
		Если Не ПолеПозицияШтатногоРасписания.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ШтатноеРасписание")) Тогда
			
			Источник.ДоступныеПоля.Удалить(Источник.ДоступныеПоля.Индекс(ПолеПозицияШтатногоРасписания));
			Источник.ДоступныеПоля.Добавить("ПозицияШтатногоРасписания", Тип("СправочникСсылка.ШтатноеРасписание"));
			
			ПоследнийЗапрос.Операторы[0].ВыбираемыеПоля.Добавить(Источник.ДоступныеПоля.Найти("ПозицияШтатногоРасписания"));
			
		КонецЕсли;
		
		ПолеПодразделение = Источник.ДоступныеПоля.Найти("Подразделение");
		Если ПолеПодразделение = Неопределено Тогда
			Источник.ДоступныеПоля.Добавить("Подразделение", Тип("СправочникСсылка.ПодразделенияОрганизаций"));
		КонецЕсли;
		
		// Добавление обязательных полей, которые должна содержать временная таблица со сведениями позиций.
		Для Каждого ОписаниеИсточникаНачисленийКлючИЗначение Из ОписаниеИсточниковНачислений Цикл
			
			Для Каждого ОписаниеИсточникаКлючИЗначение Из ОписаниеИсточникаНачисленийКлючИЗначение.ИсточникиДанных Цикл
				
				ОписаниеИсточника = ОписаниеИсточникаКлючИЗначение.Значение;
				Для Каждого ИмяПоля Из ОписаниеИсточника.ПоляВременныхТаблиц Цикл
					
					Если Источник.ДоступныеПоля.Найти(ИмяПоля) = Неопределено Тогда
						Источник.ДоступныеПоля.Добавить(ИмяПоля);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавление операторов запросов для источников начислений, по количеству описаний источников сведений о начислениях.
	Для ИндексОператора = 1 По ОписаниеИсточниковНачислений.Количество() - 1 Цикл
		ПоследнийЗапрос.Операторы.Добавить(ПоследнийЗапрос.Операторы[0]);
	КонецЦикла;
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		ПсевдонимТаблицыПутиКДанным = "РегистрСведенийИсторияИспользованияШтатногоРасписания";
	Иначе
		ПсевдонимТаблицыПутиКДанным = "СправочникШтатноеРасписание";
	КонецЕсли;
	
	ИндексОператора = 0;
	Для Каждого ОписаниеИсточника Из ОписаниеИсточниковНачислений Цикл
		
		ОператорНачислений = ПоследнийЗапрос.Операторы[ИндексОператора];
		ИмяИсточникаСведений = ОператорНачислений.Источники[0].Источник.ИмяТаблицы;
		ПсевдонимИсточникаСведений = ОператорНачислений.Источники[0].Источник.Псевдоним;
		
		Для Каждого ИсточникДанных Из ОписаниеИсточника.ИсточникиДанных Цикл
			
			Если ПараметрыПостроения.Свойство("ИмяПоляПозицияШтатногоРасписания")
				И ПсевдонимИсточникаСведений <> ПсевдонимТаблицыПутиКДанным Тогда
				
				ПерестроитьУсловияСоединений(ИсточникДанных.Значение.Соединения, ПсевдонимТаблицыПутиКДанным, ПсевдонимИсточникаСведений, ПараметрыПостроения.ИмяПоляПозицияШтатногоРасписания);
				
			КонецЕсли;
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьСоединенияСТаблицейИсточников(ОператорНачислений, ИмяИсточникаСведений, ИсточникДанных.Значение.Соединения);
			
			Для Каждого ОписаниеДанных Из ИсточникДанных.Значение.ДанныеПозиции Цикл
				
				Если ОператорНачислений.Источники.НайтиПоПсевдониму(ПсевдонимТаблицыПутиКДанным) = Неопределено Тогда
					ПутьКДанным = СтрЗаменить(ОписаниеДанных.Значение.ПутьКДанным, ПсевдонимТаблицыПутиКДанным + ".", ПсевдонимИсточникаСведений + ".");
				Иначе
					ПутьКДанным = ОписаниеДанных.Значение.ПутьКДанным;
				КонецЕсли;
				
				Колонка = ПоследнийЗапрос.Колонки.Найти(ОписаниеДанных.Ключ);
				Если Колонка = Неопределено Тогда
					
					Если ИндексОператора = 0 Тогда
						ОператорНачислений.ВыбираемыеПоля.Добавить(ПутьКДанным);
					Иначе
						ПоследнийЗапрос.Операторы[0].ВыбираемыеПоля.Добавить("NULL");
					КонецЕсли;
					
					ИндексКолонки = ПоследнийЗапрос.Колонки.Количество() - 1;
					ПоследнийЗапрос.Колонки[ИндексКолонки].Псевдоним = ОписаниеДанных.Значение.Имя;
					
					Если ИндексОператора > 0 Тогда
						ОператорНачислений.ВыбираемыеПоля.Добавить(ПутьКДанным, ИндексКолонки);
					КонецЕсли;
					
				Иначе
					ИндексКолонки = ПоследнийЗапрос.Колонки.Индекс(Колонка);
					ОператорНачислений.ВыбираемыеПоля.Добавить(ПутьКДанным, ИндексКолонки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИсточникДанных.Значение.ЗапросВспомогательныхТаблиц <> Неопределено Тогда
				ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ИсточникДанных.Значение.ЗапросВспомогательныхТаблиц);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИсточникДанных.Значение.ДополнительныеУсловия) Тогда
				
				Если ОператорНачислений.Источники.НайтиПоПсевдониму(ПсевдонимТаблицыПутиКДанным) = Неопределено Тогда
					ДополнительныеУсловия = СтрЗаменить(ИсточникДанных.Значение.ДополнительныеУсловия, ПсевдонимТаблицыПутиКДанным + ".", ПсевдонимИсточникаСведений + ".");
				Иначе
					ДополнительныеУсловия = ИсточникДанных.Значение.ДополнительныеУсловия;
				КонецЕсли;
				
				ОператорНачислений.Отбор.Добавить(ДополнительныеУсловия);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИндексОператора = ИндексОператора + 1;
		
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура ПерестроитьУсловияСоединений(Соединения, ПсевдонимТаблицыПутиКДанным, ПсевдонимИсточникаСведений, ИмяПоляПозицияШтатногоРасписания)
	
	Для Каждого ОписаниеСоединения Из Соединения Цикл
		
		Если Не ПустаяСтрока(ОписаниеСоединения.Условие) Тогда
			
			Если ПсевдонимТаблицыПутиКДанным = "СправочникШтатноеРасписание" Тогда
				ПутьКПозиции = "СправочникШтатноеРасписание.Ссылка";
			Иначе
				ПутьКПозиции = ПсевдонимТаблицыПутиКДанным + "." + "ПозицияШтатногоРасписания";
			КонецЕсли;
			
			ОписаниеСоединения.Условие = СтрЗаменить(ОписаниеСоединения.Условие, ПутьКПозиции, ПсевдонимИсточникаСведений + "." + ИмяПоляПозицияШтатногоРасписания);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоОтборТаблицыОтборов(ОписаниеИсточников, ОписаниеОтбора)
	
	ОтборТаблицыОтборов = Истина;
	
	ЛевоеЗначениеВРег = ВРег(ОписаниеОтбора.ЛевоеЗначение);
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		Если ЛевоеЗначениеВРег <> ВРег("ПозицияШтатногоРасписания")
			И ЛевоеЗначениеВРег <> ВРег("Регистратор")
			И ОписаниеИсточников.ИдентификаторыИсточников[ЛевоеЗначениеВРег] <> ВРег("СправочникШтатноеРасписание") Тогда
		
			ОтборТаблицыОтборов = Ложь;
		
		КонецЕсли;
		
	Иначе
		
		Если ЛевоеЗначениеВРег <> ВРег("ПозицияШтатногоРасписания")
			И ОписаниеИсточников.ИдентификаторыИсточников[ЛевоеЗначениеВРег] <> ВРег("СправочникШтатноеРасписание") Тогда
			
			ОтборТаблицыОтборов = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтборТаблицыОтборов;
	
КонецФункции

Процедура ПрименитьОтборыКЗапросуВТШтатноеРасписание(Запрос, ИмяВТШтатноеРасписание, Отборы, ОписаниеИсточников)
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ЗапросТаблицыОтборов = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросСхемыФормирующийВТ(Схема, "ВТОтборПозицийШтатногоРасписания");
	ПоследнийЗапросПакета = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросСхемыФормирующийВТ(Схема, ИмяВТШтатноеРасписание);
	
	НомерПараметра = 1;
	Для Каждого ОписаниеОтбора Из Отборы Цикл
		
		ОтборТаблицыОтборов = ЭтоОтборТаблицыОтборов(ОписаниеИсточников, ОписаниеОтбора);
		ЛевоеЗначениеВРег = ВРег(ОписаниеОтбора.ЛевоеЗначение);
		
		Если ЗапросТаблицыОтборов <> Неопределено И ОтборТаблицыОтборов Тогда
			ЗапросПакета = ЗапросТаблицыОтборов;
		Иначе
			ЗапросПакета = ПоследнийЗапросПакета;
		КонецЕсли;
		
		Для Каждого Оператор Из ЗапросПакета.Операторы Цикл
			
			ПсевдонимТаблицы = Оператор.Источники.ПолучитьКорневыеИсточники()[0].Источник.Псевдоним;
			
			Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
				ИмяРеквизитаПозиция = "ПозицияШтатногоРасписания";
			Иначе
				ИмяРеквизитаПозиция = "";
			КонецЕсли;
			
			Если ЛевоеЗначениеВРег = ВРег("Организация") Тогда
				
				Если ПустаяСтрока(ИмяРеквизитаПозиция) Тогда
					ЛевоеЗначение = ПсевдонимТаблицы + ".Владелец";
				Иначе
					ЛевоеЗначение = ПсевдонимТаблицы + "." + ИмяРеквизитаПозиция + ".Владелец";
				КонецЕсли;
				
			ИначеЕсли ЛевоеЗначениеВРег = ВРег("ПозицияШтатногоРасписания") Тогда
				
				Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
					ЛевоеЗначение = ПсевдонимТаблицы + ".ПозицияШтатногоРасписания";
				Иначе
					ЛевоеЗначение = ПсевдонимТаблицы + ".Ссылка";
				КонецЕсли;
				
			ИначеЕсли ЛевоеЗначениеВРег = ВРег("Регистратор") Тогда
				ЛевоеЗначение = ПсевдонимТаблицы + ".Регистратор";
			ИначеЕсли ОтборТаблицыОтборов Тогда
				
				Если ПустаяСтрока(ИмяРеквизитаПозиция) Тогда
					ЛевоеЗначение = ПсевдонимТаблицы + "." + ОписаниеОтбора.ЛевоеЗначение;
				Иначе
					ЛевоеЗначение = ПсевдонимТаблицы + "." + ИмяРеквизитаПозиция + "." + ОписаниеОтбора.ЛевоеЗначение;
				КонецЕсли;
				
			Иначе
				
				ОписаниеИсточника = ОписаниеИсточников.ИсточникиДанных[ОписаниеИсточников.ИдентификаторыИсточников[ОписаниеОтбора.ЛевоеЗначение]];
				ЛевоеЗначение = ОписаниеИсточника.ДанныеПозиции[ОписаниеОтбора.ЛевоеЗначение].ПутьКДанным;
				
			КонецЕсли;
			
			Если ТипЗнч(ОписаниеОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ПравоеЗначение = ОписаниеОтбора.ПравоеЗначение;
			Иначе
				
				ИмяПараметра = ЗарплатаКадрыПериодическиеРегистры.УникальноеИмяПараметраЗапроса("", НомерПараметра);
				ПравоеЗначение = "&" + ИмяПараметра;
				
				Запрос.УстановитьПараметр(ИмяПараметра, ОписаниеОтбора.ПравоеЗначение);
				
			КонецЕсли;
			
			Оператор.Отбор.Добавить("(" + ЛевоеЗначение
				+ " " + ОписаниеОтбора.ВидСравнения + " " + "(" +ПравоеЗначение + "))");
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура ДобавитьЗапросВспомогательныхТаблиц(ОписаниеИсточников, ЗапросыВспомогательныхТаблиц, Знач ИдентификаторИсточника)
	
	ДобавитьОписание = ЗапросыВспомогательныхТаблиц.Найти(ИдентификаторИсточника, "ИдентификаторИсточника") = Неопределено;
	Если ДобавитьОписание Тогда
		
		ОписаниеИсточника = ОписаниеИсточников.ИсточникиДанных[ИдентификаторИсточника];
		
		НоваяСтрока = ЗапросыВспомогательныхТаблиц.Добавить();
		НоваяСтрока.ИдентификаторИсточника = ИдентификаторИсточника;
		
		НоваяСтрока.Запрос = ОписаниеИсточника.ЗапросВспомогательныхТаблиц;
		НоваяСтрока.Соединение = ОписаниеИсточника.ТекстСоединений;
		НоваяСтрока.Порядок = ОписаниеИсточника.Порядок;
		
		Если ЗначениеЗаполнено(ОписаниеИсточника.ЗависимостьОтИсточников) Тогда
			
			НоваяСтрока.ВедущиеТаблицы = ОписаниеИсточника.ЗависимостьОтИсточников;
			
			Для Каждого ИмяВедущейТаблицы Из ОписаниеИсточника.ЗависимостьОтИсточников Цикл
				ДобавитьЗапросВспомогательныхТаблиц(ОписаниеИсточников, ЗапросыВспомогательныхТаблиц, ВРег(ИмяВедущейТаблицы));
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПорядокЗапросовВспомогательныхТаблиц(ЗапросыВспомогательныхТаблиц)
	
	Для НомерПопытки = 1 По ЗапросыВспомогательныхТаблиц.Количество() Цикл
		
		ПрерватьРасчетПорядков = Истина;
		Для Каждого СтрокаЗапроса Из ЗапросыВспомогательныхТаблиц Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаЗапроса.ВедущиеТаблицы) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИмяВедущейТаблицы Из СтрокаЗапроса.ВедущиеТаблицы Цикл
				
				СтрокаВедущейТаблицы = ЗапросыВспомогательныхТаблиц.Найти(ВРег(ИмяВедущейТаблицы), "ИдентификаторИсточника");
				Если СтрокаЗапроса.Порядок <= СтрокаВедущейТаблицы.Порядок Тогда
					
					ПрерватьРасчетПорядков = Ложь;
					СтрокаЗапроса.Порядок = СтрокаВедущейТаблицы.Порядок + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ПрерватьРасчетПорядков Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросыВспомогательныхТаблиц.Сортировать("Порядок");
	
КонецПроцедуры

Процедура ДобавитьЗапросыУничтоженияВспомогательныхТаблиц(МассивТекстовЗапросов, ОписаниеИсточников, ЗапросыВспомогательныхТаблиц)
	
	Для Каждого СтрокаЗапросыВспомогательныхТаблиц Из ЗапросыВспомогательныхТаблиц Цикл
		
		ОписаниеИсточника = ОписаниеИсточников.ИсточникиДанных[СтрокаЗапросыВспомогательныхТаблиц.ИдентификаторИсточника];
		Если ЗначениеЗаполнено(ОписаниеИсточника.ИменаВТКУничтожению) Тогда
			
			Для Каждого ИмяВТ Из ОписаниеИсточника.ИменаВТКУничтожению Цикл
				МассивТекстовЗапросов.Добавить("УНИЧТОЖИТЬ " + ИмяВТ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбщиеПараметрыПостроенияВТШтатноеРасписание()
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("Отборы", Новый Массив);
	
	ПараметрыПостроения.Вставить("ДополнитьОписаниемНачислений", Ложь);
	
	ПараметрыПостроения.Вставить("ПлановыеНачисления", Истина);
	ПараметрыПостроения.Вставить("ПолноеОписаниеНачислений", Ложь);
	
	ПараметрыПостроения.Вставить("Льготы", Ложь);
	ПараметрыПостроения.Вставить("УправленческиеНачисления", Ложь);
	
	ПараметрыПостроения.Вставить("ВключаяЗакрытые", Ложь);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

#Область ОписаниеИсточниковСведенийОШтатномРасписании

Функция ОписаниеИсточниковСведенийОШтатномРасписании(ПостроениеПоТаблицеФильтра = Ложь) Экспорт
	
	ОписаниеИсточников = ПустоеОписаниеИсточников();
	
	Если ПостроениеПоТаблицеФильтра Тогда
		ДобавитьОписаниеИсточникаСведенийОтборПозицийШтатногоРасписанияПоТаблицеФильтра(ОписаниеИсточников);
	Иначе
		ДобавитьОписаниеИсточникаСведенийОтборПозицийШтатногоРасписания(ОписаниеИсточников);
	КонецЕсли;
	
	ДобавитьОписаниеСведенийСправочника(ОписаниеИсточников);
	ДобавитьОписаниеСведенийИсторииИзменений(ОписаниеИсточников);
	ДобавитьОписаниеСведенийТерриториальныхУсловийПФР(ОписаниеИсточников);
	ДобавитьОписаниеСведенийКлассовУсловийТрудаПоДолжностям(ОписаниеИсточников);
	ДобавитьОписаниеСведенийОЗанятости(ОписаниеИсточников);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников);
	Иначе
		ДобавитьПустоеОписаниеСведенийМестаВСтруктуреПредприятия(ОписаниеИсточников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
		МодульТарификационнаяОтчетностьУчрежденийФМБА = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
		МодульТарификационнаяОтчетностьУчрежденийФМБА.ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		МодульМедицина.ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		МодульОбразовательныеУчреждения.ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников);
	КонецЕсли;
	
	Возврат ОписаниеИсточников;
	
КонецФункции


Процедура ДобавитьОписаниеИсточникаСведенийОтборПозицийШтатногоРасписания(ОписаниеИсточников) Экспорт
	
	ИдентификаторИсточника = "ВТОтборПозицийШтатногоРасписания";
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	ОписаниеИсточника.Порядок = 0;
	
	Запрос = Новый Запрос;
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&ДатаАктуальности КАК Период,
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец КАК Организация,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение КАК Подразделение,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность КАК Должность,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТОтборПозицийШтатногоРасписания
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|ГДЕ
			|	ИсторияИспользованияШтатногоРасписания.Дата <= &ОтборПоДатеАктуальности
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&ДатаАктуальности КАК Период,
			|	&ДатаАктуальности КАК Дата,
			|	СправочникШтатноеРасписание.Владелец КАК Организация,
			|	СправочникШтатноеРасписание.Подразделение КАК Подразделение,
			|	СправочникШтатноеРасписание.Должность КАК Должность,
			|	СправочникШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТОтборПозицийШтатногоРасписания
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК СправочникШтатноеРасписание
			|ГДЕ
			|	СправочникШтатноеРасписание.Утверждена
			|	И СправочникШтатноеРасписание.ДатаУтверждения <= &ОтборПоДатеАктуальности
			|	И ВЫБОР
			|			КОГДА СправочникШтатноеРасписание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ НЕ СправочникШтатноеРасписание.Закрыта
			|					ИЛИ СправочникШтатноеРасписание.ДатаЗакрытия > &ОтборПоДатеАктуальности
			|		КОНЕЦ
			|	И НЕ СправочникШтатноеРасписание.ГруппаПозицийПодразделения";
		
	КонецЕсли;
	
	ОписаниеИсточника.ЗапросВспомогательныхТаблиц = Запрос;
	ОписаниеИсточника.ИменаВТКУничтожению.Добавить("ВТОтборПозицийШтатногоРасписания");
	
КонецПроцедуры

Процедура ДобавитьОписаниеИсточникаСведенийОтборПозицийШтатногоРасписанияПоТаблицеФильтра(ОписаниеИсточников) Экспорт
	
	ИдентификаторИсточника = "ВТОтборПозицийШтатногоРасписания";
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	Запрос = Новый Запрос;
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(ФильтрПозиций.Период, ДЕНЬ) КАК Период,
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец КАК Организация,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение КАК Подразделение,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность КАК Должность,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТОтборПозицийШтатногоРасписания
			|ИЗ
			|	ВТФильтрПозиций КАК ФильтрПозиций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|		ПО ФильтрПозиций.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|			И ФильтрПозиций.Период >= ИсторияИспользованияШтатногоРасписания.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(ФильтрПозиций.Период, ДЕНЬ),
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(ФильтрПозиций.Период, ДЕНЬ) КАК Период,
			|	ШтатноеРасписание.ДатаУтверждения КАК Дата,
			|	ШтатноеРасписание.Владелец КАК Организация,
			|	ШтатноеРасписание.Подразделение КАК Подразделение,
			|	ШтатноеРасписание.Должность КАК Должность,
			|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТОтборПозицийШтатногоРасписания
			|ИЗ
			|	ВТФильтрПозиций КАК ФильтрПозиций
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО ФильтрПозиций.ПозицияШтатногоРасписания = ШтатноеРасписание.Ссылка
			|ГДЕ
			|	ШтатноеРасписание.Утверждена
			|	И ШтатноеРасписание.ДатаУтверждения <= ФильтрПозиций.Период
			|	И ВЫБОР
			|			КОГДА ШтатноеРасписание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ НЕ ШтатноеРасписание.Закрыта
			|					ИЛИ ШтатноеРасписание.ДатаЗакрытия > ФильтрПозиций.Период
			|		КОНЕЦ
			|	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
		
	КонецЕсли;
	
	ОписаниеИсточника.ЗапросВспомогательныхТаблиц = Запрос;
	ОписаниеИсточника.ИменаВТКУничтожению.Добавить("ВТОтборПозицийШтатногоРасписания");
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийСправочника(ОписаниеИсточников)
	
	ИдентификаторИсточника = "СправочникШтатноеРасписание";
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	ОписаниеИсточника.Порядок = 999;
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		ПсевдонимТаблицы = "РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания";
	Иначе
		ПсевдонимТаблицы = "СправочникШтатноеРасписание";
	КонецЕсли;
	
	ИмяДанныхШР = "Наименование";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + ".Наименование");
	
	ИмяДанныхШР = "НаименованиеПолное";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + ".НаименованиеПолное");
		
	ИмяДанныхШР = "Организация";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + ".Владелец");
	
	ИмяДанныхШР = "Подразделение";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + "." + ИмяДанныхШР);
	
	ИмяДанныхШР = "РайонныйКоэффициент";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ВЫРАЗИТЬ(" + ПсевдонимТаблицы + ".Подразделение КАК Справочник.ПодразделенияОрганизаций)." + ИмяДанныхШР);
	
	ИмяДанныхШР = "Должность";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + "." + ИмяДанныхШР);
	
	ИмяДанныхШР = "Утверждена";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + "." + ИмяДанныхШР);
	
	ИмяДанныхШР = "ДатаУтверждения";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + "." + ИмяДанныхШР);
	
	ИмяДанныхШР = "Закрыта";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + "." + ИмяДанныхШР);
	
	ИмяДанныхШР = "ДатаЗакрытия";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + "." + ИмяДанныхШР);
	
	ИмяДанныхШР = "Описание";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		ПсевдонимТаблицы + "." + ИмяДанныхШР);
	
	Если Не ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		ДобавитьОписаниеВерсионируемыхДанныхШтатногоРасписания(ОписаниеИсточников, ИдентификаторИсточника);
	Иначе
		ОписаниеИсточника.ЗависимостьОтИсточников.Добавить("ВТОтборПозицийШтатногоРасписания");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийИсторииИзменений(ОписаниеИсточников)
	
	Если Не ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИсточника = "РегистрСведенийИсторияИспользованияШтатногоРасписания";
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	ОписаниеИсточника.Порядок = 999;
	
	ИмяДанныхШР = "Регистратор";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ОписаниеИсточника.ЗависимостьОтИсточников.Добавить("ВТОтборПозицийШтатногоРасписания");
	ДобавитьОписаниеВерсионируемыхДанныхШтатногоРасписания(ОписаниеИсточников, ИдентификаторИсточника);
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийТерриториальныхУсловийПФР(ОписаниеИсточников)
	
	ИдентификаторИсточника = "РегистрСведенийТерриториальныеУсловияПФР";
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ПрименятьСевернуюНадбавку";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"	ЕСТЬNULL(РегистрСведенийТерриториальныеУсловияПФР.ПрименятьСевернуюНадбавку, ЛОЖЬ)");
	
	ИмяДанныхШР = "ПроцентСевернойНадбавки";
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
			"	ВЫБОР
			|		КОГДА ЕСТЬNULL(РегистрСведенийТерриториальныеУсловияПФР.ПрименятьСевернуюНадбавку, ЛОЖЬ)
			|			ТОГДА ОтборПозицийШтатногоРасписания.Подразделение.ПроцентСевернойНадбавки
			|		ИНАЧЕ 0
			|	КОНЕЦ");
		
	Иначе
		
		ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
			"	ВЫБОР
			|		КОГДА ЕСТЬNULL(РегистрСведенийТерриториальныеУсловияПФР.ПрименятьСевернуюНадбавку, ЛОЖЬ)
			|			ТОГДА СправочникШтатноеРасписание.Подразделение.ПроцентСевернойНадбавки
			|		ИНАЧЕ 0
			|	КОНЕЦ");
		
	КонецЕсли;
	
	ОписаниеИсточника.ЗависимостьОтИсточников.Добавить("ВТОтборПозицийШтатногоРасписания");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборПозицийШтатногоРасписания", "СтруктурнаяЕдиница");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("СтруктурнаяЕдиница", "Подразделение");
	
	ОписаниеИсточника.ЗапросВспомогательныхТаблиц = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ТерриториальныеУсловияПФР",
		Истина,
		ОписаниеФильтра,
		,
		Истина,
		"ВТТерриториальныеУсловияПФРСрезПоследних");
	
	ОписаниеИсточника.ТекстСоединений = "
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК РегистрСведенийТерриториальныеУсловияПФР
		|		ПО ОтборПозицийШтатногоРасписания.Подразделение = РегистрСведенийТерриториальныеУсловияПФР.СтруктурнаяЕдиница
		|			И ОтборПозицийШтатногоРасписания.Период = РегистрСведенийТерриториальныеУсловияПФР.Период}";
	
	ОписаниеИсточника.ИменаВТКУничтожению.Добавить("ВТТерриториальныеУсловияПФРСрезПоследних");
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийКлассовУсловийТрудаПоДолжностям(ОписаниеИсточников)
	
	ИдентификаторИсточника = "РегистрСведенийКлассыУсловийТрудаПоДолжностям";
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "КлассУсловийТруда";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "КлассУсловийТрудаПериод";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"РегистрСведенийКлассыУсловийТрудаПоДолжностям.Период");
	
	ИмяДанныхШР = "КлассУсловийТрудаДатаРегистрацииИзменений";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"РегистрСведенийКлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений");
	
	ОписаниеИсточника.ЗависимостьОтИсточников.Добавить("ВТОтборПозицийШтатногоРасписания");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборПозицийШтатногоРасписания", "Должность");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Должность", "ПозицияШтатногоРасписания");
	
	ОписаниеИсточника.ЗапросВспомогательныхТаблиц = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КлассыУсловийТрудаПоДолжностям",
		Истина,
		ОписаниеФильтра,
		,
		Истина,
		"ВТКлассыУсловийТрудаПоДолжностямСрезПоследних");
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		ОписаниеИсточника.ТекстСоединений = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТКлассыУсловийТрудаПоДолжностямСрезПоследних КАК РегистрСведенийКлассыУсловийТрудаПоДолжностям
			|		ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийКлассыУсловийТрудаПоДолжностям.Должность
			|			И ОтборПозицийШтатногоРасписания.Период = РегистрСведенийКлассыУсловийТрудаПоДолжностям.Период}";
		
	Иначе
		
		ОписаниеИсточника.ТекстСоединений = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТКлассыУсловийТрудаПоДолжностямСрезПоследних КАК РегистрСведенийКлассыУсловийТрудаПоДолжностям
			|		ПО СправочникШтатноеРасписание.Ссылка = РегистрСведенийКлассыУсловийТрудаПоДолжностям.Должность}";
		
	КонецЕсли;
	
	ОписаниеИсточника.ИменаВТКУничтожению.Добавить("ВТКлассыУсловийТрудаПоДолжностямСрезПоследних");
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийОЗанятости(ОписаниеИсточников)
	
	ИдентификаторИсточника = "РегистрСведенийЗанятостьПозицийШтатногоРасписания";
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "Занято";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.Занято, 0)");
	
	ИмяДанныхШР = "ЗанятаПостоянно";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ЗанятаПостоянно, 0)");
	
	ИмяДанныхШР = "ЗанятаВременно";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ЗанятаВременно, 0)");
	
	ИмяДанныхШР = "ПодработкаПостоянно";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПодработкаПостоянно, 0)");
	
	ИмяДанныхШР = "ПодработкаВременно";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПодработкаВременно, 0)");
	
	ИмяДанныхШР = "СовмещенаПостоянно";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.СовмещенаПостоянно, 0)");
	
	ИмяДанныхШР = "СовмещенаВременно";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.СовмещенаВременно, 0)");
	
	ИмяДанныхШР = "Забронирована";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.Забронирована, 0)");
	
	ИмяДанныхШР = "ВременноОсвобождена";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЕСТЬNULL(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВременноОсвобождена, 0)");
	
	ОписаниеИсточника.ЗависимостьОтИсточников.Добавить("ВТОтборПозицийШтатногоРасписания");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтборПозицийШтатногоРасписания.Период КАК Период,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаНачала, ДЕНЬ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания < КОНЕЦПЕРИОДА(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания, ДЕНЬ)
		|				ТОГДА ДОБАВИТЬКДАТЕ(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания, ДЕНЬ, -1)
		|			ИНАЧЕ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания
		|		КОНЕЦ, ДЕНЬ) КАК ДатаОкончания,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДокументОснование КАК ДокументОснование,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПериодЗаписи КАК ПериодЗаписи,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.Год КАК Год,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции КАК ВидЗанятостиПозиции,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо КАК ДействуетДо,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ЗамещаемыйСотрудник КАК ЗамещаемыйСотрудник,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения КАК ПланируемаяДатаЗавершения,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.РегистраторЗаписи КАК РегистраторЗаписи,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.РегистраторСобытия КАК РегистраторСобытия,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПустойИнтервал КАК ПустойИнтервал
		|ПОМЕСТИТЬ ВТРегистрСведенийЗанятостьПозицийШтатногоРасписанияПредварительно
		|ИЗ
		|	ВТОтборПозицийШтатногоРасписания КАК ОтборПозицийШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК РегистрСведенийЗанятостьПозицийШтатногоРасписания
		|		ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания
		|			И (ОтборПозицийШтатногоРасписания.Период МЕЖДУ НАЧАЛОПЕРИОДА(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(ВЫБОР
		|					КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания < КОНЕЦПЕРИОДА(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания, ДЕНЬ)
		|						ТОГДА ДОБАВИТЬКДАТЕ(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания, ДЕНЬ, -1)
		|					ИНАЧЕ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания
		|				КОНЕЦ, ДЕНЬ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборПозицийШтатногоРасписания.Период,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.Сотрудник,
		|	НАЧАЛОПЕРИОДА(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаНачала, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания < КОНЕЦПЕРИОДА(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания, ДЕНЬ)
		|				ТОГДА ДОБАВИТЬКДАТЕ(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания, ДЕНЬ, -1)
		|			ИНАЧЕ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания
		|		КОНЕЦ, ДЕНЬ),
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ГоловнаяОрганизация,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ФизическоеЛицо,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДокументОснование,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПериодЗаписи,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.Год,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПериодПредыдущейЗаписи,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписанияПредыдущие.ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна),
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ЗамещаемыйСотрудник,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.РегистраторЗаписи,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.РегистраторСобытия,
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПустойИнтервал
		|ИЗ
		|	ВТОтборПозицийШтатногоРасписания КАК ОтборПозицийШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК РегистрСведенийЗанятостьПозицийШтатногоРасписания
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК РегистрСведенийЗанятостьПозицийШтатногоРасписанияПредыдущие
		|			ПО РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПериодПредыдущейЗаписи = РегистрСведенийЗанятостьПозицийШтатногоРасписанияПредыдущие.ПериодЗаписи
		|				И РегистрСведенийЗанятостьПозицийШтатногоРасписания.Сотрудник = РегистрСведенийЗанятостьПозицийШтатногоРасписанияПредыдущие.Сотрудник
		|		ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания
		|			И (ОтборПозицийШтатногоРасписания.Период МЕЖДУ НАЧАЛОПЕРИОДА(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(ВЫБОР
		|					КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания < КОНЕЦПЕРИОДА(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания, ДЕНЬ)
		|						ТОГДА ДОБАВИТЬКДАТЕ(РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания, ДЕНЬ, -1)
		|					ИНАЧЕ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания
		|				КОНЕЦ, ДЕНЬ))
		|ГДЕ
		|	РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята)
		|	И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтборПозицийШтатногоРасписания.Период КАК Период,
		|	ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|				ТОГДА ВЫБОР
		|						КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|								И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|						КОГДА (РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо < &Сегодня
		|								ИЛИ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо >= ОтборПозицийШтатногоРасписания.Период)
		|								И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|						КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|								И (РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения < &Сегодня
		|									ИЛИ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения >= ОтборПозицийШтатногоРасписания.Период)
		|							ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Занято,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята)
		|					И (РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|						И (РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения < &Сегодня
		|							ИЛИ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения < ОтборПозицийШтатногоРасписания.Период))
		|				ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗанятаПостоянно,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Занята)
		|					И (РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения >= ОтборПозицийШтатногоРасписания.Период
		|							И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения >= &Сегодня)
		|				ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗанятаВременно,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Подработка)
		|					И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПодработкаПостоянно,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Подработка)
		|					И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПодработкаВременно,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Совмещена)
		|					И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СовмещенаПостоянно,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Совмещена)
		|					И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СовмещенаВременно,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Забронирована)
		|					И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Забронирована,
		|	СУММА(ВЫБОР
		|			КОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
		|					И (РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПланируемаяДатаЗавершения >= ОтборПозицийШтатногоРасписания.Период)
		|				ТОГДА РегистрСведенийЗанятостьПозицийШтатногоРасписания.КоличествоСтавок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВременноОсвобождена
		|ПОМЕСТИТЬ ВТРегистрСведенийЗанятостьПозицийШтатногоРасписания
		|ИЗ
		|	ВТОтборПозицийШтатногоРасписания КАК ОтборПозицийШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистрСведенийЗанятостьПозицийШтатногоРасписанияПредварительно КАК РегистрСведенийЗанятостьПозицийШтатногоРасписания
		|		ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания
		|			И (ОтборПозицийШтатногоРасписания.Период МЕЖДУ РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаНачала И РегистрСведенийЗанятостьПозицийШтатногоРасписания.ДатаОкончания)
		|			И ОтборПозицийШтатногоРасписания.Период = РегистрСведенийЗанятостьПозицийШтатногоРасписания.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборПозицийШтатногоРасписания.Период,
		|	ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания";
	
	// АПК:1367-выкл Локализация формата даты не нужна - это построение текста запроса
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сегодня", "ДАТАВРЕМЯ(" + Формат(ТекущаяДатаСеанса(), "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")");
	// АПК:1367-вкл
	
	ОписаниеИсточника.ЗапросВспомогательныхТаблиц = Запрос;
	
	ОписаниеИсточника.ТекстСоединений = "
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрСведенийЗанятостьПозицийШтатногоРасписания КАК РегистрСведенийЗанятостьПозицийШтатногоРасписания
		|		ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания
		|			И ОтборПозицийШтатногоРасписания.Период = РегистрСведенийЗанятостьПозицийШтатногоРасписания.Период}";
	
	ОписаниеИсточника.ИменаВТКУничтожению.Добавить("ВТРегистрСведенийЗанятостьПозицийШтатногоРасписанияПредварительно");
	ОписаниеИсточника.ИменаВТКУничтожению.Добавить("ВТРегистрСведенийЗанятостьПозицийШтатногоРасписания");
	
КонецПроцедуры

Процедура ДобавитьПустоеОписаниеСведенийМестаВСтруктуреПредприятия(ОписаниеИсточников)
	
	ИдентификаторИсточника = "ПустоеМестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "МестоВСтруктуреПредприятия";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника, "NULL");
	
КонецПроцедуры


Процедура ДобавитьОписаниеВерсионируемыхДанныхШтатногоРасписания(ОписаниеИсточников, ИдентификаторИсточника)
	
	ИмяДанныхШР = "УсловияПриема";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "КоличествоСтавок";
	Если ИдентификаторИсточника = "РегистрСведенийИсторияИспользованияШтатногоРасписания" Тогда
		ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
			"ВЫБОР
			|	КОГДА РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Закрыта
			|		И РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата >= РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.ДатаЗакрытия
			|		ТОГДА 0
			|	ИНАЧЕ РегистрСведенийИсторияИспользованияШтатногоРасписания.КоличествоСтавок
			|КОНЕЦ");
	Иначе
		ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	КонецЕсли;
	
	ИмяДанныхШР = "ГрафикРаботыСотрудников";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ТарифнаяСетка";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "РазрядКатегория";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ТарифнаяСеткаНадбавки";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "РазрядКатегорияНадбавки";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "СпособОтраженияЗарплатыВБухучете";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ОтношениеКЕНВД";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "СтатьяФинансирования";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ОснованиеДосрочногоНазначенияПенсии";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ОсобыеУсловияТрудаПФР";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "КодПозицииСпискаПФР";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ТрудоваяФункция";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ХарактерВыполняемыхРаботПФР";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ПервичныеДокументыПФР";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ВидСтажаЛетныхЭкипажей";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ВидСтажаШахтеров";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ВыплачиваетсяНадбавкаЗаВредность";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ПроцентНадбавкиЗаВредность";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ОкладТарифМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ОкладТарифМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ФОТМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ФОТМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ФОТПозицииМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"		" + ИдентификаторИсточника + ".ФОТМин * " + ИдентификаторИсточника + ".КоличествоСтавок");
	
	ИмяДанныхШР = "ФОТПозицииМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"		" + ИдентификаторИсточника + ".ФОТМакс * " + ИдентификаторИсточника + ".КоличествоСтавок");
	
	ИмяДанныхШР = "РайонныйКоэффициентРазмерМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "РайонныйКоэффициентРазмерМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "СевернаяНадбавкаРазмерМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "СевернаяНадбавкаРазмерМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "НадбавкаЗаВредностьРазмерМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "НадбавкаЗаВредностьРазмерМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ОкладТариф";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ФОТ";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ФОТПозиции";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"		" + ИдентификаторИсточника + ".ФОТ * " + ИдентификаторИсточника + ".КоличествоСтавок");
	
	ИмяДанныхШР = "РайонныйКоэффициентРазмер";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "СевернаяНадбавкаРазмер";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "НадбавкаЗаВредностьРазмер";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, Знач ИмяСведений, Знач ИдентификаторИсточника, Знач ПутьКДанным = "", Знач ПутьКДаннымПоиска = "") Экспорт
	
	ИдентификаторИсточникаВВерхнемРегистре = ВРег(ИдентификаторИсточника);
	ИмяСведенийВВерхнемРегистре = ВРег(ИмяСведений);
	
	ОписаниеИсточников.ИдентификаторыИсточников.Вставить(ИмяСведенийВВерхнемРегистре, ИдентификаторИсточникаВВерхнемРегистре);
	ОписаниеИсточника = ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ОписаниеСведений = Новый Структура;
	ОписаниеИсточника.ДанныеПозиции.Вставить(ИмяСведенийВВерхнемРегистре, ОписаниеСведений);
	
	ОписаниеСведений.Вставить("Имя", ИмяСведений);
	
	Если Не ЗначениеЗаполнено(ПутьКДанным) Тогда
		ПутьКДанным = ИдентификаторИсточника + "." + ИмяСведений;
	КонецЕсли;
	
	ОписаниеСведений.Вставить("ПутьКДанным", ПутьКДанным);
	
	Если ПустаяСтрока(ПутьКДаннымПоиска) Тогда
		ПутьКДаннымПоиска = ПутьКДанным;
	КонецЕсли;
	
	ОписаниеСведений.Вставить("ПутьКДаннымПоиска", ПутьКДаннымПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникСведенийОНачисленияхШтатногоРасписания

Функция ОписаниеИсточниковСведенийОНачисленияхШтатногоРасписания(ПараметрыПостроения, ОписаниеИсточниковШтатногоРасписания, Схема, ИмяВТШтатноеРасписание)
	
	ПсевдонимыИсточников = ЗарплатаКадрыОбщиеНаборыДанных.ПсевдонимыИсточниковСхемыЗапроса(Схема, ИмяВТШтатноеРасписание);
	ОписанияИсточниковНачислений = Новый Массив;
	
	Если ПараметрыПостроения.ПлановыеНачисления Тогда
		
		ДобавитьОписаниеСведенийОНачислениях(ОписанияИсточниковНачислений, ПсевдонимыИсточников);
		ДобавитьОписаниеСведенийОДополнительныхПоказателях(ОписанияИсточниковНачислений, ПсевдонимыИсточников);
		
		Если ПараметрыПостроения.ПолноеОписаниеНачислений Тогда
			ДобавитьОписаниеСведенийОНачисленииРайонногоКоэффициента(ОписанияИсточниковНачислений, ОписаниеИсточниковШтатногоРасписания);
			ДобавитьОписаниеСведенийОНачисленииСевернойНадбавки(ОписанияИсточниковНачислений, ОписаниеИсточниковШтатногоРасписания, ПсевдонимыИсточников);
			ДобавитьОписаниеСведенийОНачисленииНадбавкиЗаВредность(ОписанияИсточниковНачислений, ОписаниеИсточниковШтатногоРасписания);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульЛьготыСотрудников.ДобавитьОписаниеСведенийОЛьготахСотрудникамПозицийШтатногоРасписания(ПараметрыПостроения, ОписанияИсточниковНачислений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.ДобавитьОписаниеСведенийОбУправленческихНачислениях(ПараметрыПостроения, ОписанияИсточниковНачислений);
	КонецЕсли;
	
	Возврат ОписанияИсточниковНачислений;
	
КонецФункции

Процедура ДобавитьОписаниеСведенийОНачислениях(ОписанияИсточниковНачислений, ПсевдонимыИсточников)
	
	ОписаниеИсточников = ПустоеОписаниеИсточников();
	ОписанияИсточниковНачислений.Добавить(ОписаниеИсточников);
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		ИдентификаторИсточникаНачислений = "РегистрСведенийИсторияНачисленийПоШтатномуРасписанию";
		ИдентификаторИсточникаПоказателей = "РегистрСведенийИсторияПоказателейПоШтатномуРасписанию";
	Иначе
		ИдентификаторИсточникаНачислений = "СправочникШтатноеРасписаниеНачисления";
		ИдентификаторИсточникаПоказателей = "СправочникШтатноеРасписаниеПоказатели";
	КонецЕсли;
	
	ОписаниеИсточника = ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаНачислений);
	ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаПоказателей);
	
	ИмяДанныхШР = "ПлановыеНачисления";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"ИСТИНА");
	
	ИмяДанныхШР = "Начисление";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "Показатель";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		"ЕСТЬNULL(" + ИдентификаторИсточникаПоказателей + "." + ИмяДанныхШР + ", ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка))");
	
	ИмяДанныхШР = "ИдентификаторСтрокиВидаРасчета";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "РазмерМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "РазмерМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "ЗначениеМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		"ЕСТЬNULL(" + ИдентификаторИсточникаПоказателей + "." + ИмяДанныхШР + ", 0)");
	
	ИмяДанныхШР = "ЗначениеМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		"ЕСТЬNULL(" + ИдентификаторИсточникаПоказателей + "." + ИмяДанныхШР + ", 0)");
	
	ИмяДанныхШР = "Размер";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "Значение";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		"ЕСТЬNULL(" + ИдентификаторИсточникаПоказателей + "." + ИмяДанныхШР + ", 0)");
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		Соединение = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
		Соединение.Источник = "РегистрСведений.ИсторияНачисленийПоШтатномуРасписанию";
		Соединение.Псевдоним = "РегистрСведенийИсторияНачисленийПоШтатномуРасписанию";
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
		Соединение.Условие =
			"РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|	И РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата = РегистрСведенийИсторияНачисленийПоШтатномуРасписанию.Дата";
		
		Соединение.ПсевдонимИсточникаСвязи = "РегистрСведенийИсторияИспользованияШтатногоРасписания";
		
		СоединениеСПоказателями = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
		СоединениеСПоказателями.Источник = "РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию";
		СоединениеСПоказателями.Псевдоним = "РегистрСведенийИсторияПоказателейПоШтатномуРасписанию";
		СоединениеСПоказателями.Условие =
			"РегистрСведенийИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания = РегистрСведенийИсторияПоказателейПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|	И РегистрСведенийИсторияНачисленийПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета = РегистрСведенийИсторияПоказателейПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета
			|	И РегистрСведенийИсторияНачисленийПоШтатномуРасписанию.Дата = РегистрСведенийИсторияПоказателейПоШтатномуРасписанию.Дата";
		
		Соединение.Соединения.Добавить(СоединениеСПоказателями);
		ОписаниеИсточника.Соединения.Добавить(Соединение);
		
	Иначе
		
		Соединение = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
		Соединение.Источник = "Справочник.ШтатноеРасписание.Начисления";
		Соединение.Псевдоним = "СправочникШтатноеРасписаниеНачисления";
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
		Если ПсевдонимыИсточников.Свойство("СправочникШтатноеРасписание")
			И Не ПсевдонимыИсточников.Свойство("ОтборПозицийШтатногоРасписания") Тогда
			
			Соединение.ПсевдонимИсточникаСвязи = "СправочникШтатноеРасписание";
			Соединение.Условие = "СправочникШтатноеРасписание.Ссылка = СправочникШтатноеРасписаниеНачисления.Ссылка";
			
		Иначе
			
			Соединение.ПсевдонимИсточникаСвязи = "ОтборПозицийШтатногоРасписания";
			Соединение.Условие = "ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = СправочникШтатноеРасписаниеНачисления.Ссылка";
			
		КонецЕсли;
		
		СоединениеСПоказателями = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
		СоединениеСПоказателями.Источник = "Справочник.ШтатноеРасписание.Показатели";
		СоединениеСПоказателями.Псевдоним = "СправочникШтатноеРасписаниеПоказатели";
		
		СоединениеСПоказателями.Условие =
			"СправочникШтатноеРасписаниеНачисления.Ссылка = СправочникШтатноеРасписаниеПоказатели.Ссылка
			|	И СправочникШтатноеРасписаниеНачисления.ИдентификаторСтрокиВидаРасчета = СправочникШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета";
		
		Соединение.Соединения.Добавить(СоединениеСПоказателями);
		ОписаниеИсточника.Соединения.Добавить(Соединение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийОДополнительныхПоказателях(ОписанияИсточниковНачислений, ПсевдонимыИсточников)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИсточников = ПустоеОписаниеИсточников();
	ОписанияИсточниковНачислений.Добавить(ОписаниеИсточников);
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		ИдентификаторИсточника = "РегистрСведенийИсторияПоказателейПоШтатномуРасписанию";
	Иначе
		ИдентификаторИсточника = "СправочникШтатноеРасписаниеПоказатели";
	КонецЕсли;
	
	ОписаниеИсточника = ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ПлановыеНачисления";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ИСТИНА");
	
	ИмяДанныхШР = "Начисление";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)");
	
	ИмяДанныхШР = "Показатель";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ИдентификаторСтрокиВидаРасчета";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"0");
	
	ИмяДанныхШР = "РазмерМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"0");
	
	ИмяДанныхШР = "РазмерМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"0");
	
	ИмяДанныхШР = "ЗначениеМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ЗначениеМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "Размер";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
		"0");
	
	ИмяДанныхШР = "Значение";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		Соединение = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
		Соединение.Источник = "РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию";
		Соединение.Псевдоним = "РегистрСведенийИсторияПоказателейПоШтатномуРасписанию";
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
		Соединение.Условие =
			"РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийИсторияПоказателейПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|	И РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата = РегистрСведенийИсторияПоказателейПоШтатномуРасписанию.Дата
			|	И (РегистрСведенийИсторияПоказателейПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета = 0)";
		
		Соединение.ПсевдонимИсточникаСвязи = "РегистрСведенийИсторияИспользованияШтатногоРасписания";
		ОписаниеИсточника.Соединения.Добавить(Соединение);
		
	Иначе
		
		Соединение = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
		Соединение.Источник = "Справочник.ШтатноеРасписание.Показатели";
		Соединение.Псевдоним = "СправочникШтатноеРасписаниеПоказатели";
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
		Если ПсевдонимыИсточников.Свойство("СправочникШтатноеРасписание")
			И Не ПсевдонимыИсточников.Свойство("ОтборПозицийШтатногоРасписания") Тогда
			
			Соединение.ПсевдонимИсточникаСвязи = "СправочникШтатноеРасписание";
			Соединение.Условие =
				"СправочникШтатноеРасписание.Ссылка = СправочникШтатноеРасписаниеПоказатели.Ссылка
				|	И (СправочникШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета = 0)";
			
		Иначе
			
			Соединение.ПсевдонимИсточникаСвязи = "ОтборПозицийШтатногоРасписания";
			Соединение.Условие =
				"ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = СправочникШтатноеРасписаниеПоказатели.Ссылка
				|	И (СправочникШтатноеРасписаниеПоказатели.ИдентификаторСтрокиВидаРасчета = 0)";
			
		КонецЕсли;
		
		ОписаниеИсточника.Соединения.Добавить(Соединение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийОНачисленииРайонногоКоэффициента(ОписанияИсточниковНачислений, ОписаниеИсточниковШтатногоРасписания)
	
	Если Не ПолучитьФункциональнуюОпцию("ПрименятьРайонныйКоэффициент") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИсточников = ПустоеОписаниеИсточников();
	ОписанияИсточниковНачислений.Добавить(ОписаниеИсточников);
	
	ИдентификаторИсточникаНачислений = "НачислениеРайонногоКоэффициента";
	ОписаниеИсточника = ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаНачислений);
	
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("РайонныйКоэффициент");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("РайонныйКоэффициентРазмер");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("РайонныйКоэффициентРазмерМин");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("РайонныйКоэффициентРазмерМакс");
	
	ПутьКДаннымРайонныйКоэффициент = ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "РайонныйКоэффициент");
	
	ИмяДанныхШР = "ПлановыеНачисления";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"ИСТИНА");
	
	ИмяДанныхШР = "Начисление";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"&НачислениеРайонныйКоэффициент");
	
	ИмяДанныхШР = "Показатель";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"&ПоказательРайонныйКоэффициент");
	
	ИмяДанныхШР = "ИдентификаторСтрокиВидаРасчета";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"99999");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачислениеРайонныйКоэффициент", ПланыВидовРасчета.Начисления.НачислениеРайонныйКоэффициент());
	Запрос.УстановитьПараметр("ПоказательРайонныйКоэффициент", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
	
	ОписаниеИсточника.ЗапросВспомогательныхТаблиц = Запрос;
	
	ОписаниеИсточника.ДополнительныеУсловия = ПутьКДаннымРайонныйКоэффициент + " > 1
		|	И &НачислениеРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО
		|	И &ПоказательРайонныйКоэффициент <> НЕОПРЕДЕЛЕНО";
	
	ИмяДанныхШР = "РазмерМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "РайонныйКоэффициентРазмерМин"));
	
	ИмяДанныхШР = "РазмерМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "РайонныйКоэффициентРазмерМакс"));
	
	ИмяДанныхШР = "ЗначениеМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымРайонныйКоэффициент);
	
	ИмяДанныхШР = "ЗначениеМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымРайонныйКоэффициент);
	
	ИмяДанныхШР = "Размер";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "РайонныйКоэффициентРазмер"));
	
	ИмяДанныхШР = "Значение";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымРайонныйКоэффициент);
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийОНачисленииСевернойНадбавки(ОписанияИсточниковНачислений, ОписаниеИсточниковШтатногоРасписания, ПсевдонимыИсточников)
	
	Если Не ПолучитьФункциональнуюОпцию("ПрименятьСевернуюНадбавку") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИсточников = ПустоеОписаниеИсточников();
	ОписанияИсточниковНачислений.Добавить(ОписаниеИсточников);
	
	ИдентификаторИсточникаНачислений = "НачислениеСевернойНадбавки";
	ОписаниеИсточника = ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаНачислений);
	
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("ПрименятьСевернуюНадбавку");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("СевернаяНадбавкаРазмер");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("СевернаяНадбавкаРазмерМин");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("СевернаяНадбавкаРазмерМакс");
	
	ИмяДанныхШР = "ПлановыеНачисления";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"ИСТИНА");
	
	ИмяДанныхШР = "Начисление";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"&НачислениеСевернаяНадбавка");
	
	ИмяДанныхШР = "Показатель";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)");
	
	ИмяДанныхШР = "ИдентификаторСтрокиВидаРасчета";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"99998");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачислениеСевернаяНадбавка", ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка());
	
	ОписаниеИсточника.ЗапросВспомогательныхТаблиц = Запрос;
	
	Если ПсевдонимыИсточников.Свойство("РегистрСведенийТерриториальныеУсловияПФР") Тогда
		
		ПутьКДаннымПрименятьСевернуюНадбавку = ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "ПрименятьСевернуюНадбавку");
		ОписаниеИсточника.ДополнительныеУсловия = ПутьКДаннымПрименятьСевернуюНадбавку + "
			| И &НачислениеСевернаяНадбавка <> НЕОПРЕДЕЛЕНО";
		
	Иначе
		
		Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			ПсевдонимТаблицыПутиКДанным = "РегистрСведенийИсторияИспользованияШтатногоРасписания";
		Иначе
			ПсевдонимТаблицыПутиКДанным = "СправочникШтатноеРасписание";
		КонецЕсли;
		
		ОписаниеИсточника.ДополнительныеУсловия = ПсевдонимТаблицыПутиКДанным + ".ПрименятьСевернуюНадбавку
			| И &НачислениеСевернаяНадбавка <> НЕОПРЕДЕЛЕНО";
		
	КонецЕсли;
	
	ИмяДанныхШР = "РазмерМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "СевернаяНадбавкаРазмерМин"));
	
	ИмяДанныхШР = "РазмерМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "СевернаяНадбавкаРазмерМакс"));
	
	ИмяДанныхШР = "ЗначениеМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"0");
	
	ИмяДанныхШР = "ЗначениеМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"0");
	
	ИмяДанныхШР = "Размер";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "СевернаяНадбавкаРазмер"));
	
	ИмяДанныхШР = "Значение";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"0");
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийОНачисленииНадбавкиЗаВредность(ОписанияИсточниковНачислений, ОписаниеИсточниковШтатногоРасписания)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНадбавкуЗаВредность") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИсточников = ПустоеОписаниеИсточников();
	ОписанияИсточниковНачислений.Добавить(ОписаниеИсточников);
	
	ИдентификаторИсточникаНачислений = "НачислениеНадбавкиЗаВредность";
	ОписаниеИсточника = ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаНачислений);
	
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("ВыплачиваетсяНадбавкаЗаВредность");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("ПроцентНадбавкиЗаВредность");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("НадбавкаЗаВредностьРазмер");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("НадбавкаЗаВредностьРазмерМин");
	ОписаниеИсточника.ПоляВременныхТаблиц.Добавить("НадбавкаЗаВредностьРазмерМакс");
	
	ИмяДанныхШР = "ПлановыеНачисления";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"ИСТИНА");
	
	ИмяДанныхШР = "Начисление";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"&НачислениеНадбавкаЗаВредность");
	
	ИмяДанныхШР = "Показатель";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"&ПоказательПроцентНадбавкиЗаВредность");
	
	ИмяДанныхШР = "ИдентификаторСтрокиВидаРасчета";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"99997");
	
	Запрос = Новый Запрос;
	
	НачислениеНадбавкаЗаВредность = ПланыВидовРасчета.Начисления.НачислениеНадбавкаЗаВредность();
	ПоказательПроцентНадбавкиЗаВредность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
	
	Запрос.УстановитьПараметр("НачислениеНадбавкаЗаВредность", НачислениеНадбавкаЗаВредность);
	Запрос.УстановитьПараметр("ПоказательПроцентНадбавкиЗаВредность", ПоказательПроцентНадбавкиЗаВредность);
	
	ОписаниеИсточника.ЗапросВспомогательныхТаблиц = Запрос;
	
	ОписаниеИсточника.ДополнительныеУсловия = ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "ВыплачиваетсяНадбавкаЗаВредность") + "
		| И &НачислениеНадбавкаЗаВредность <> НЕОПРЕДЕЛЕНО
		| И &ПоказательПроцентНадбавкиЗаВредность <> НЕОПРЕДЕЛЕНО";
	
	ПутьКДаннымПроцентНадбавкиЗаВредность = ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "ПроцентНадбавкиЗаВредность");
	
	ИмяДанныхШР = "РазмерМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "НадбавкаЗаВредностьРазмерМин"));
	
	ИмяДанныхШР = "РазмерМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "НадбавкаЗаВредностьРазмерМакс"));
	
	ИмяДанныхШР = "ЗначениеМин";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПроцентНадбавкиЗаВредность);
	
	ИмяДанныхШР = "ЗначениеМакс";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПроцентНадбавкиЗаВредность);
	
	ИмяДанныхШР = "Размер";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточниковШтатногоРасписания, "НадбавкаЗаВредностьРазмер"));
	
	ИмяДанныхШР = "Значение";
	ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		ПутьКДаннымПроцентНадбавкиЗаВредность);
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыОписанийИсточниковСведенийОШтатномРасписании

Функция ПустоеОписаниеИсточников() Экспорт
	
	ОписаниеИсточников = Новый Структура;
	
	ОписаниеИсточников.Вставить("ЗначенияОпций", Новый Структура);
	ОписаниеИсточников.Вставить("ИдентификаторыИсточников", Новый Структура);
	ОписаниеИсточников.Вставить("ИсточникиДанных", Новый Структура);
	
	ЗаполнитьЗначенияОпцийШтатногоРасписания(ОписаниеИсточников);
	
	Возврат ОписаниеИсточников;
	
КонецФункции

Функция ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника) Экспорт
	
	Описание = Неопределено;
	
	ИдентификаторИсточникаВВерхнемРегистре = ВРег(ИдентификаторИсточника);
	Если Не ОписаниеИсточников.ИсточникиДанных.Свойство(ИдентификаторИсточникаВВерхнемРегистре, Описание) Тогда
		
		Описание = ПустоеОписаниеИсточникаСведений(ИдентификаторИсточника);
		ОписаниеИсточников.ИсточникиДанных.Вставить(ИдентификаторИсточникаВВерхнемРегистре, Описание);
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточника) Экспорт
	
	Описание = Неопределено;
	
	ИдентификаторИсточникаВВерхнемРегистре = ВРег(ИдентификаторИсточника);
	Если Не ОписаниеИсточников.ИсточникиДанных.Свойство(ИдентификаторИсточникаВВерхнемРегистре, Описание) Тогда
		
		Описание = ПустоеОписаниеИсточникаСведенийНачислений(ИдентификаторИсточника);
		ОписаниеИсточников.ИсточникиДанных.Вставить(ИдентификаторИсточникаВВерхнемРегистре, Описание);
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Процедура ЗаполнитьЗначенияОпцийШтатногоРасписания(ОписаниеИсточников)
	
	ИмяФО = "ИспользоватьИсториюИзмененияШтатногоРасписания";
	ОписаниеИсточников.ЗначенияОпций.Вставить(ИмяФО, ПолучитьФункциональнуюОпцию(ИмяФО));
	
	ИмяФО = "ИспользоватьВилкуСтавокВШтатномРасписании";
	ОписаниеИсточников.ЗначенияОпций.Вставить(ИмяФО, ПолучитьФункциональнуюОпцию(ИмяФО));
	
КонецПроцедуры

Функция ПустоеОписаниеИсточникаСведений(ИдентификаторИсточника)
	
	Описание = Новый Структура;
	Описание.Вставить("Имя", ИдентификаторИсточника);
	Описание.Вставить("ДанныеПозиции", Новый Структура);
	
	Описание.Вставить("ЗапросВспомогательныхТаблиц");
	Описание.Вставить("ТекстСоединений", "");
	Описание.Вставить("ЗависимостьОтИсточников", Новый Массив);
	Описание.Вставить("Порядок", 1);
	Описание.Вставить("ИменаВТКУничтожению", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Функция ПустоеОписаниеИсточникаСведенийНачислений(ИдентификаторИсточника)
	
	Описание = Новый Структура;
	Описание.Вставить("Имя", ИдентификаторИсточника);
	Описание.Вставить("ДанныеПозиции", Новый Структура);
	
	Описание.Вставить("ЗапросВспомогательныхТаблиц");
	Описание.Вставить("ДополнительныеУсловия");
	
	Описание.Вставить("ПоляВременныхТаблиц", Новый Массив);
	
	Описание.Вставить("Соединения", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Функция ПутьКДаннымПоОписаниюИсточников(ОписаниеИсточников, ИмяДанных)
	
	ИдентификаторИсточника = ОписаниеИсточников.ИдентификаторыИсточников[ИмяДанных];
	ДанныеПозиции = ОписаниеИсточников.ИсточникиДанных[ИдентификаторИсточника].ДанныеПозиции;
	
	Возврат ДанныеПозиции[ИмяДанных].ПутьКДанным;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// СтандартныеПодсистемы.КонтрольВеденияУчета

Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверокКонтрольВеденияКадровогоУчета = КадровыйУчет.ГруппаПроверокКонтрольВеденияКадровогоУчета(ГруппыПроверок);
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Проверки соответствия штатному расписанию';
															|en = 'Check compliance with headcount'");
	ГруппаПроверок.ИдентификаторГруппы			= ГруппаПроверокКонтрольВеденияКадровогоУчета.Идентификатор;
	ГруппаПроверок.Идентификатор				= "КонтрольШтатногоРасписания";
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= "КонтрольШтатногоРасписания";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Проверка превышения количества ставок';
													|en = 'Check excessive positions quantity'");
	Проверка.Причины						= НСтр("ru = 'Занято ставок больше, чем запланировано';
													|en = 'Employed positions exceed the planned ones'");
	Проверка.Рекомендация					= НСтр("ru = 'Проверить даты и корректность оформленных документов';
													|en = 'Check dates and correct registration of documents'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаПревышенияКоличестваСтавок";
	Проверка.ОбработчикПроверки				= "Обработки.КонтрольШтатногоРасписания.ПроверкаПревышенияКоличестваСтавок";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

Процедура ПроверитьВозможностьПроведенияСрочныхКадровыхПереводов(КадровыйПеревод, ДанныеПереводов, Отказ) Экспорт
	
	Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСотрудники = Новый ТаблицаЗначений;
	ПроверяемыеСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПроверяемыеСотрудники.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ПроверяемыеСотрудники.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ПроверяемыеСотрудники.Колонки.Добавить("ДанныеОкончания", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ДанныеПеревода Из ДанныеПереводов Цикл
		
		Если ЗначениеЗаполнено(ДанныеПеревода.ДатаОкончания) Тогда
			
			ЗаполнитьЗначенияСвойств(ПроверяемыеСотрудники.Добавить(), ДанныеПеревода);
			
			ДанныеОкончания = ПроверяемыеСотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеОкончания, ДанныеПеревода);
			ДанныеОкончания.ДатаНачала = КонецДня(ДанныеПеревода.ДатаОкончания) + 1 ;
			ДанныеОкончания.ДанныеОкончания = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверяемыеСотрудники.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПроверяемыеСотрудники", ПроверяемыеСотрудники);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроверяемыеСотрудники.Сотрудник КАК Сотрудник,
			|	ПроверяемыеСотрудники.ДатаНачала КАК ДатаНачала,
			|	ПроверяемыеСотрудники.НомерСтроки КАК НомерСтроки,
			|	ПроверяемыеСотрудники.ДанныеОкончания КАК ДанныеОкончания
			|ПОМЕСТИТЬ ВТПроверяемыеСотрудники
			|ИЗ
			|	&ПроверяемыеСотрудники КАК ПроверяемыеСотрудники
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеСотрудники.НомерСтроки КАК НомерСтроки,
			|	ПроверяемыеСотрудники.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(ПроверяемыеСотрудники.ДанныеОкончания) КАК ДанныеОкончания
			|ИЗ
			|	ВТПроверяемыеСотрудники КАК ПроверяемыеСотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозицийШтатногоРасписанияИнтервальный
			|		ПО ПроверяемыеСотрудники.Сотрудник = ЗанятостьПозицийШтатногоРасписанияИнтервальный.Сотрудник
			|			И (ПроверяемыеСотрудники.ДатаНачала МЕЖДУ ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДатаНачала И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДатаОкончания)
			|ГДЕ
			|	ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДокументОснование = НЕОПРЕДЕЛЕНО
			|	И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
			|	И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроверяемыеСотрудники.НомерСтроки,
			|	ПроверяемыеСотрудники.Сотрудник
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПроверяемыеСотрудники.НомерСтроки,
			|	ПроверяемыеСотрудники.Сотрудник,
			|	МАКСИМУМ(ПроверяемыеСотрудники.ДанныеОкончания)
			|ИЗ
			|	ВТПроверяемыеСотрудники КАК ПроверяемыеСотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозицийШтатногоРасписанияИнтервальный
			|		ПО ПроверяемыеСотрудники.Сотрудник = ЗанятостьПозицийШтатногоРасписанияИнтервальный.Сотрудник
			|			И (ПроверяемыеСотрудники.ДатаНачала МЕЖДУ ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДатаНачала И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДатаОкончания)
			|ГДЕ
			|	ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДокументОснование = НЕОПРЕДЕЛЕНО
			|	И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ВидЗанятостиПозиции = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
			|	И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ПланируемаяДатаЗавершения > ДАТАВРЕМЯ(1, 1, 1)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроверяемыеСотрудники.НомерСтроки,
			|	ПроверяемыеСотрудники.Сотрудник
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ДанныеОкончания Тогда
					
					Если Не ЗначениеЗаполнено(Выборка.НомерСтроки) Тогда
						ТекстСообщения = 
							НСтр("ru = 'Не поддерживается срочный кадровый перевод в период временного освобождения позиции';
								|en = 'Urgent personnel transfer is not supported during the period of temporary position vacancy'");
						ПутьКПолю = "ДатаОкончания";
					Иначе
						ТекстСообщения = 
							СтрШаблон(
								НСтр("ru = 'Не поддерживается срочный кадровый перевод сотрудника %1 в период временного освобождения позиции';
									|en = 'Urgent employee %1 personnel transfer is not supported during the period of temporary position vacancy'"), 
								Выборка.Сотрудник);
						ПутьКПолю = СтрШаблон("Сотрудники[%1].ДатаОкончания", Формат(Выборка.НомерСтроки - 1, "ЧГ=0"));
					КонецЕсли;
					
				Иначе
					
					Если Не ЗначениеЗаполнено(Выборка.НомерСтроки) Тогда
						ТекстСообщения = 
							НСтр("ru = 'Не поддерживается срочный кадровый перевод в период временного освобождения позиции';
								|en = 'Urgent personnel transfer is not supported during the period of temporary position vacancy'");
						ПутьКПолю = "ДатаОкончания";
					Иначе
						ТекстСообщения = 
							СтрШаблон(
								НСтр("ru = 'Не поддерживается срочный кадровый перевод сотрудника %1 в период временного освобождения позиции';
									|en = 'Urgent employee %1 personnel transfer is not supported during the period of temporary position vacancy'"), 
								Выборка.Сотрудник);
						ПутьКПолю = СтрШаблон("Сотрудники[%1].ДатаОкончания", Формат(Выборка.НомерСтроки - 1, "ЧГ=0"));
					КонецЕсли;
					
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КадровыйПеревод, ПутьКПолю, "Объект", Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПроведенияВременногоОсвобожденияСтавокПоТаблицеЗначений(СсылкаНаДокумент, Проведен, СотрудникиПериоды, Отказ, ИсправленныйДокумент ,ИменаРеквизитов = "Сотрудник,ДатаНачала,ДатаОкончания", ИмяТабличнойЧасти = "") Экспорт
	
	Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("СотрудникиПериоды", СотрудникиПериоды);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(СотрудникиПериоды.ДатаОкончания, ДЕНЬ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&СотрудникиПериоды КАК СотрудникиПериоды";
	
	Запрос.Выполнить();
	Если Не Проведен Тогда
		ПроверитьДвиженияВоВремяПериодаОсвобожденияСтавок = Истина;
	Иначе
		
		ТаблицаДокумента = СсылкаНаДокумент.Метаданные().ПолноеИмя();
		Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			ТаблицаДокумента = ТаблицаДокумента + "." + ИмяТабличнойЧасти;
		КонецЕсли;
		
		МассивИменРеквизитов = СтрРазделить(ИменаРеквизитов, ",");
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК Поле
			|ИЗ
			|	&ТаблицаДокумента КАК ТаблицаДокумента
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ПО ТаблицаДокумента.Сотрудник = СотрудникиПериоды.Сотрудник
			|			И ТаблицаДокумента.ДатаНачала = СотрудникиПериоды.ДатаНачала
			|			И ТаблицаДокумента.ДатаОкончания = СотрудникиПериоды.ДатаОкончания
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &СсылкаНаДокумент
			|	И (СотрудникиПериоды.Сотрудник ЕСТЬ NULL
			|			ИЛИ ТаблицаДокумента.Сотрудник ЕСТЬ NULL)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента.Сотрудник", "ТаблицаДокумента." + МассивИменРеквизитов[0]);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента.ДатаНачала", "ТаблицаДокумента." + МассивИменРеквизитов[1]);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента.ДатаОкончания", "ТаблицаДокумента." + МассивИменРеквизитов[2]);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокумента", ТаблицаДокумента);
		
		ПроверитьДвиженияВоВремяПериодаОсвобожденияСтавок = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Если ПроверитьДвиженияВоВремяПериодаОсвобожденияСтавок Тогда
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "ДокументОснование", "=", Неопределено);
		
		Если Не Проведен Тогда
			Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсправленныйДокумент);
			КонецЕсли;
		Иначе
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.Отборы, "Регистратор", "<>", СсылкаНаДокумент);
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			"ЗанятостьПозицийШтатногоРасписания",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"),
			ПараметрыПостроения);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
			|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
			|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания,
			|	ЗанятостьПозиций.Регистратор КАК Регистратор
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозиций
			|		ПО СотрудникиПериоды.Сотрудник = ЗанятостьПозиций.Сотрудник
			|			И (ЗанятостьПозиций.ПериодЗаписи МЕЖДУ ДОБАВИТЬКДАТЕ(СотрудникиПериоды.ДатаНачала, ДЕНЬ, 1) И СотрудникиПериоды.ДатаОкончания)
			|ГДЕ
			|	ЗанятостьПозиций.КоличествоСтавок > 0
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.ДатаНачала,
			|	СотрудникиПериоды.ДатаОкончания,
			|	ЗанятостьПозиций.Регистратор
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозиций
			|		ПО СотрудникиПериоды.Сотрудник = ЗанятостьПозиций.Сотрудник
			|			И (СотрудникиПериоды.ДатаНачала МЕЖДУ ЗанятостьПозиций.ПериодЗаписи И ЗанятостьПозиций.ПериодВозвратногоСобытия)
			|ГДЕ
			|	ЗанятостьПозиций.КоличествоСтавок > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	ДатаНачала";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'По сотруднику %1 в периоде %2-%3 зарегистрировано изменение занятости позиции (%4).
					|Невозможно зарегистрировать временное освобождение ставок.';
					|en = 'A change in the position occupancy (%4) was registered for employee %1 in period %2-%3.
					|Registering a temporary vacation of rates is not available.'"),
				Выборка.Сотрудник,
				Формат(Выборка.ДатаНачала, "ДЛФ=D"),
				Формат(Выборка.ДатаОкончания, "ДЛФ=D"),
				Выборка.Регистратор);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаДокумент, "Сотрудник", "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьОтменыПроведенияПоТаблицеЗначений(СсылкаНаДокумент, СотрудникиПериоды, Отказ) Экспорт
	
	Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Если СотрудникиПериоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиПериоды", СотрудникиПериоды);
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаДокумент);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериодыДокумента
		|ИЗ
		|	&СотрудникиПериоды КАК СотрудникиПериоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	ВремяРегистрацииДокументовПлановыхНачислений.ВремяРегистрации КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериодыДокумента КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументовПлановыхНачислений
		|		ПО СотрудникиПериоды.Сотрудник = ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник
		|			И СотрудникиПериоды.ДатаНачала = ВремяРегистрацииДокументовПлановыхНачислений.Дата
		|			И (ВремяРегистрацииДокументовПлановыхНачислений.Документ = &Регистратор)";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ДокументОснование", "=", "НЕОПРЕДЕЛЕНО");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Регистратор", "<>", СсылкаНаДокумент);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗанятостьПозицийШтатногоРасписания",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания,
		|	ЗанятостьПозиций.Регистратор КАК Регистратор
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозиций
		|		ПО СотрудникиПериоды.Сотрудник = ЗанятостьПозиций.Сотрудник
		|			И (ЗанятостьПозиций.ПериодЗаписи МЕЖДУ СотрудникиПериоды.ДатаНачала И СотрудникиПериоды.ДатаОкончания)
		|ГДЕ
		|	ЗанятостьПозиций.КоличествоСтавок > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ДатаНачала";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'По сотруднику %1 в периоде %2-%3 зарегистрировано изменение занятости позиции (%4).
				|Невозможно отменить проведение с временным освобождением ставок.';
				|en = 'A change in the position occupancy (%4) was registered for employee %1 in period %2-%3.
				|Cannot unpost with temporary vacation of rates.'"),
			Выборка.Сотрудник,
			Формат(Выборка.ДатаНачала, "ДЛФ=D"),
			Формат(Выборка.ДатаОкончания, "ДЛФ=D"),
			Выборка.Регистратор);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаДокумент, "Сотрудник", "Объект", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьОбновлениеНастройкиПубликации(Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеНастройкиПубликации", Истина);
	
КонецПроцедуры

#КонецОбласти