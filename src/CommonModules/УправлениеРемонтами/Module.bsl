////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы управления ремонтами.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПериодыАктуальностиОбъектовЭксплуатации);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПланРемонтов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РемонтыРабочихЦентров);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам управления ремонтами.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПериодыАктуальностиОбъектовЭксплуатации");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланРемонтов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РемонтыРабочихЦентров");
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// Заполняет массив структур, которые будут использованы для начального заполнения и восстановления начального заполнения профилей.
//
// Параметры:
//  ОписанияПрофилей - Массив из см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
//  ПараметрыОбновления - Структура:
//   * ОбновлятьИзмененныеПрофили - Булево - начальное значение Истина.
//   * ЗапретитьИзменениеПрофилей - Булево - начальное значение Истина.
//       Если установить Ложь, тогда поставляемые профили можно не только просматривать, но и редактировать.
//   * ОбновлятьГруппыДоступа     - Булево - начальное значение Истина.
//   * ОбновлятьГруппыДоступаСУстаревшимиНастройками - Булево - начальное значение Ложь.
//       Если установить Истина, то настройки значений, выполненные администратором для
//       вида доступа, который был удален из профиля, будут также удалены из групп доступа.
//
Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	// Папка профилей "Управление ремонтами".
	ОписаниеПапки = УправлениеДоступом.НовоеОписаниеПапкиПрофилейГруппДоступа();
	ОписаниеПапки.Имя           = "УправлениеРемонтами";
	ОписаниеПапки.Идентификатор = "be8dcb85-eb81-11eb-81dc-4cedfb6825bf";
	ОписаниеПапки.Наименование  =
		НСтр("ru = 'Управление ремонтами';
			|en = 'R&M management'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписанияПрофилей.Добавить(ОписаниеПапки);
	
	ДобавитьПрофильОтветственныйЗаВедениеНСИУР(ОписанияПрофилей);
	ДобавитьПрофильЭксплуатационник(ОписанияПрофилей);
	ДобавитьПрофильРемонтник(ОписанияПрофилей);
	ДобавитьПрофильПланировщикРемонтов(ОписанияПрофилей);
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если ТипВладелецФайла = Тип("ДокументСсылка.ВводИнформацииОПрошлыхРемонтах")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.РегистрацияДефекта")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.УстановкаЗначенийНаработки") Тогда
		
		ИменаСправочников.Вставить("ДокументыРемонтыПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Определяет список объектов конфигурации, в модулях менеджеров которых предусмотрена процедура 
// ДобавитьКомандыСозданияНаОсновании, формирующая команды создания на основании объектов.
// Синтаксис процедуры ДобавитьКомандыСозданияНаОсновании см. в документации.
//
// Параметры:
//   Объекты - Массив - объекты метаданных (ОбъектМетаданных) с командами создания на основании.
//
// Пример:
//	Объекты.Добавить(Метаданные.Справочники.Организации);
//   
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Документы.ЗаказНаРемонт);
	Объекты.Добавить(Метаданные.Документы.РегистрацияДефекта);
	Объекты.Добавить(Метаданные.Документы.УстановкаЗначенийНаработки);
	Объекты.Добавить(Метаданные.Справочники.УзлыОбъектовЭксплуатации);

КонецПроцедуры

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт

	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Справочник_ВидыРемонтов";
	Набор.Идентификатор = Новый УникальныйИдентификатор("7ba176d4-92ec-4b1e-923f-d72dae040d2f");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами");

	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Справочник_КлассыОбъектовЭксплуатации";
	Набор.Идентификатор = Новый УникальныйИдентификатор("2e3f58f0-21e9-4246-9a7f-ae919ba2e145");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами");

	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Справочник_ПодклассыОбъектовЭксплуатации";
	Набор.Идентификатор = Новый УникальныйИдентификатор("8195ab63-ba10-4b63-9667-924a13b1c6b9");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами");

	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ВводИнформацииОПрошлыхРемонтах";
	Набор.Идентификатор = Новый УникальныйИдентификатор("ac3bc6e2-0ce0-44b6-8439-f71d7a78bf88");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами");

	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_РегистрацияДефекта";
	Набор.Идентификатор = Новый УникальныйИдентификатор("53d7e79b-fd7f-499f-a402-288043527252");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами");

КонецПроцедуры

// Вызывается из переопределяемого модуля.
// Содержит описание таблиц и полей объектов для проверки запретов изменения данных.
//   Вызывается из процедуры ИзменениеЗапрещено общего модуля ДатыЗапретаИзменения,
//   используемой в подписке на событие ПередЗаписью объекта для проверки наличия
//   запретов и отказа от изменений запрещенного объекта.
//
// Параметры:
//  ИсточникиДанных - ТаблицаЗначений - с колонками:
//   * Таблица     - Строка - полное имя объекта метаданных,
//                   например, Метаданные.Документы.ПриходнаяНакладная.ПолноеИмя().
//   * ПолеДаты    - Строка - имя реквизита объекта или табличной части,
//                   например "Дата", "Товары.ДатаОтгрузки".
//   * Раздел      - Строка - имя предопределенного элемента
//                   "ПланВидовХарактеристикСсылка.РазделыДатЗапрета".
//   * ПолеОбъекта - Строка - имя реквизита объекта или реквизита табличной части,
//                   например "Организация", "Товары.Склад".
//
//  Для добавления строки имеется процедура ДобавитьСтроку в общем модуле ДатыЗапретаИзменения.
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВводИнформацииОПрошлыхРемонтах", "Дата", "УправлениеРемонтами", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РегистрацияДефекта", "Дата", "УправлениеРемонтами", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УстановкаЗначенийНаработки", "Дата", "УправлениеРемонтами", "Организация");
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ОпределитьОбъектыСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ВводИнформацииОПрошлыхРемонтах);
	СписокОбъектов.Добавить(Документы.ЗаказНаРемонт);
	СписокОбъектов.Добавить(Документы.РегистрацияДефекта);
	СписокОбъектов.Добавить(Документы.УстановкаЗначенийНаработки);
	СписокОбъектов.Добавить(Справочники.УзлыОбъектовЭксплуатации);
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//  Объекты - Массив - объекты метаданных (ОбъектМетаданных) с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Документы.ВводИнформацииОПрошлыхРемонтах);
	Объекты.Добавить(Метаданные.Документы.ЗаказНаРемонт);
	Объекты.Добавить(Метаданные.Документы.РегистрацияДефекта);
	Объекты.Добавить(Метаданные.Документы.УстановкаЗначенийНаработки);
	
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовТОиР);
	
	Объекты.Добавить(Метаданные.Справочники.УзлыОбъектовЭксплуатации);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Функция возвращает текстовое представление остаточного ресурса
//
// Параметры:
// 		КоличествоДней - Число - Количество дней.
//
// Возвращаемое значение:
// 		Строка - Строковое представление количества дней.
//
Функция ОстаточныйРесурсПоВремениСтрокой(КоличествоДней) Экспорт
	
	Исчисление = "";
	Количество = 0;
	
	Если Не ЗначениеЗаполнено(КоличествоДней) Или КоличествоДней <= 0 Тогда
		Возврат "";
	ИначеЕсли КоличествоДней > 370 Тогда
		Исчисление = НСтр("ru = 'год,года,лет';
							|en = 'year, year, years'");
		Количество = Окр(КоличествоДней/365, 1);
	ИначеЕсли КоличествоДней > 31 Тогда
		Исчисление = НСтр("ru = 'месяц,месяца,месяцев';
							|en = 'month, month, months'");
		Количество = Окр(КоличествоДней/31, 1);
	Иначе
		Исчисление = НСтр("ru = 'день,дня,дней';
							|en = 'day,day,days'");
		Количество = Окр(КоличествоДней, 1);
	КонецЕсли;
	
	СтруктураИсчисления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Исчисление);
	
	ЧислоПервыхДвухЗнаков = Цел(Количество) - Цел(Количество/100)*100;
	ЧислоПервогоЗнака = Цел(Количество) - Цел(Количество/10)*10;
	
	Если (ЧислоПервыхДвухЗнаков>10 И ЧислоПервыхДвухЗнаков<15)
		Или ЧислоПервогоЗнака=0 Или ЧислоПервогоЗнака>4 Тогда
		
		Возврат Формат(Количество, "ЧДЦ=1") + " " + СтруктураИсчисления[2];
		
	ИначеЕсли ЧислоПервогоЗнака=1 Тогда
		
		Возврат Формат(Количество, "ЧДЦ=1") + " " + СтруктураИсчисления[0];
		
	КонецЕсли;
	
	Возврат Формат(Количество, "ЧДЦ=1") + " " + СтруктураИсчисления[1];
	
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт

	#Область СостояниеОбъектовЭксплуатации
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеОбъектовЭксплуатации);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьУправлениеРемонтами");

	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Когда были выполнены последние ремонты? 
		|Каковы текущие и плановые показателей наработок?
		|Каков остаточный ресурс в величине показателя и срока службы?';
		|en = 'Check when the last repair/maintenance was performed.
		|View the current and planned operating time.
		|Take an overview of the residual lifetime in the amount of value and service life.'");
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеОбъектовЭксплуатации");
	ОписаниеВарианта.Описание = НСтр("ru = 'Когда были выполнены последние ремонты? 
		|Каковы текущие и плановые показателей наработок?
		|Каков остаточный ресурс в величине показателя и срока службы?';
		|en = 'Check when the last repair/maintenance was performed.
		|View the current and planned operating time.
		|Take an overview of the residual lifetime in the amount of value and service life.'");
	#КонецОбласти

	#Область СостояниеУзловОбъектовЭксплуатации
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеУзловОбъектовЭксплуатации);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьУзлыОбъектовЭксплуатации");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какой статус?
									 |Какая наработка?
									 |Какие виды ремонтов проводились и когда?
									 |Какие дефекты были зарегистрированы?
									 |Когда были выполнены последние ремонты?
									 |Какие текущие и плановые показатели наработок?
									 |Какой остаточный ресурс в величине показателя и срока службы?';
									 |en = 'Check the sub-asset status.
									 |Verify the operating time.
									 |See what R&M works were carried out and when.
									 |Check what defects were registered.
									 |See the last R&M performed.
									 |Take an overview of the current and planned operating time units.
									 |Track the residual lifetime in terms of unit and service life.'");
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеУзловОбъектовЭксплуатации");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какой статус?
									 |Какая наработка?
									 |Какие виды ремонтов проводились и когда?
									 |Какие дефекты были зарегистрированы?
									 |Когда были выполнены последние ремонты?
									 |Какие текущие и плановые показатели наработок?
									 |Какой остаточный ресурс в величине показателя и срока службы?';
									 |en = 'Check the sub-asset status.
									 |Verify the operating time.
									 |See what R&M works were carried out and when.
									 |Check what defects were registered.
									 |See the last R&M performed.
									 |Take an overview of the current and planned operating time units.
									 |Track the residual lifetime in terms of unit and service life.'");
	#КонецОбласти

	#Область СостояниеУзловОбъектовЭксплуатацииКонтекст
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеУзловОбъектовЭксплуатацииКонтекст);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьУзлыОбъектовЭксплуатации");
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти

	#Область ДефектыУзловОбъектовЭксплуатации
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДефектыУзловОбъектовЭксплуатации);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьУзлыОбъектовЭксплуатации");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие дефекты были зарегистрированы?';
									|en = 'View the registered defects.'");
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДефектыУзловОбъектовЭксплуатации");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие дефекты были зарегистрированы?';
									|en = 'View the registered defects.'");
	#КонецОбласти

КонецПроцедуры

// Находит узлы объектов эксплуатации по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора.
// 
// Возвращаемое значение:
//  Структура - содержит:
//    * МассивОбъектов - Массив из СправочникСсылка.УзлыОбъектовЭксплуатации - найденные узлы
//    * НеНайдены - Массив из Строка - штрихкоды, по которым не удалось найти узлы
//    * НеПодходят - Массив из СправочникСсылка.УзлыОбъектовЭксплуатации - Узлы, которые не подходят по параметрам подбора.
//
Функция НайтиУзлыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("МассивОбъектов", Новый Массив);
	Результат.Вставить("НеПодходят", Новый Массив);
	Результат.Вставить("НеНайдены", Новый Массив);
	
	МассивШтрихкодов = ВнеоборотныеАктивы.МассивШтрихкодов(ДанныеШтрихкодов);
	
	Если МассивШтрихкодов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивШтрихкодов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УзлыОбъектовЭксплуатации.Ссылка КАК Ссылка,
	|	УзлыОбъектовЭксплуатации.Штрихкод КАК Штрихкод,
	|	(УзлыОбъектовЭксплуатации.Ссылка В (&ДоступныеДляВыбораУзлы) 
	|		ИЛИ НЕ &ИспользоватьДоступныеДляВыбораУзлы) КАК Подходит
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
	|ГДЕ
	|	УзлыОбъектовЭксплуатации.Штрихкод В(&МассивШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УзлыОбъектовЭксплуатации.Наименование,
	|	УзлыОбъектовЭксплуатации.Штрихкод";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
	
	Если ПараметрыПодбора <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДоступныеДляВыбораУзлы", ДоступныеДляВыбораУзлы(ПараметрыПодбора));
		Запрос.УстановитьПараметр("ИспользоватьДоступныеДляВыбораУзлы", Истина);
	Иначе
		Запрос.УстановитьПараметр("ДоступныеДляВыбораУзлы", Новый Массив);
		Запрос.УстановитьПараметр("ИспользоватьДоступныеДляВыбораУзлы", Ложь);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивОбъектов = Новый Массив;
	НеПодходят = Новый Массив;
	Для Каждого Выборка Из РезультатЗапроса Цикл
		Если Выборка.Подходит Тогда
			МассивОбъектов.Добавить(Выборка.Ссылка);
		Иначе
			НеПодходят.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	НеНайдены = Новый Массив;
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		Если РезультатЗапроса.Найти(Штрихкод, "Штрихкод") = Неопределено Тогда
			НеНайдены.Добавить(Штрихкод);
		КонецЕсли; 
	КонецЦикла; 
	
	Результат.МассивОбъектов = МассивОбъектов;
	Результат.НеПодходят = НеПодходят;
	Результат.НеНайдены = НеНайдены;

	Возврат Результат;

КонецФункции

// Находит объекты эксплуатации или узлы по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора.
// 
// Возвращаемое значение:
//  Структура - содержит:
//    * МассивОбъектов - Массив из СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.УзлыОбъектовЭксплуатации - найденные объекты
//    * НеНайдены - Массив из Строка - штрихкоды, по которым не удалось найти
//    * НеПодходят - Массив из СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.УзлыОбъектовЭксплуатации - Объекты, которые не подходят по параметрам подбора.
//
Функция НайтиОбъектыЭксплуатацииИлиУзлыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт
	
	МассивШтрихкодов = ВнеоборотныеАктивы.МассивШтрихкодов(ДанныеШтрихкодов);
	
	Если МассивШтрихкодов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли; 
	
	Результат = Новый Структура;
	Результат.Вставить("МассивОбъектов", Новый Массив);
	Результат.Вставить("НеПодходят", Новый Массив);
	Результат.Вставить("НеНайдены", Новый Массив);

	РезультатПоиска = ВнеоборотныеАктивы.НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.МассивОбъектов, РезультатПоиска.МассивОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НеПодходят, РезультатПоиска.НеПодходят);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НеНайдены, РезультатПоиска.НеНайдены);
	
	РезультатПоиска = НайтиУзлыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.МассивОбъектов, РезультатПоиска.МассивОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НеПодходят, РезультатПоиска.НеПодходят);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НеНайдены, РезультатПоиска.НеНайдены);
	
	Возврат Результат;

КонецФункции

// Добавляет в табличную часть узлы по штрихкоду и заполняет объект эксплуатации, если он не заполнен.
// 
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
// 	Объект - ДанныеФормыСтруктура - 
// 	ТаблицаУзлов - ДанныеФормыКоллекция - 
// 	ИмяРеквизита - Строка -
// 	ОбъектЭксплуатации - СправочникСсылка.ОбъектыЭксплуатации -
// 	ПараметрыПодбора - Структура -  
// 	
// Возвращаемое значение:
// 	Массив - Добавленные строки.
//  Неопределено - Если не удалось найти узлы. 
Функция ДобавитьУзлыПоШтрихкоду(ДанныеШтрихкодов, Объект, ТаблицаУзлов, ИмяРеквизита, ОбъектЭксплуатации = Неопределено, ПараметрыПодбора = Неопределено) Экспорт

	Результат = НайтиУзлыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	Если Результат.МассивОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Узлы.Ссылка,
	|	Узлы.Владелец
	|ПОМЕСТИТЬ ВсеУзлы
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК Узлы
	|ГДЕ
	|	Узлы.Ссылка В (&Узлы)
	|	И (Узлы.Владелец = &Владелец
	|		ИЛИ &Владелец = ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|		ИЛИ &Владелец = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеУзлы.Владелец
	|ПОМЕСТИТЬ ОдинВладелец
	|ИЗ
	|	ВсеУзлы КАК ВсеУзлы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеУзлы.Ссылка,
	|	ВсеУзлы.Владелец
	|ИЗ
	|	ВсеУзлы КАК ВсеУзлы
	|ГДЕ
	|	ВсеУзлы.Владелец В
	|		(ВЫБРАТЬ
	|			ОдинВладелец.Владелец
	|		ИЗ
	|			ОдинВладелец)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Узлы", Результат.МассивОбъектов);
	Запрос.УстановитьПараметр("Владелец", ОбъектЭксплуатации);
	
	Если ПараметрыПодбора <> Неопределено И ПараметрыПодбора.Свойство("РегистрацияНаработки") Тогда
		Запрос.УстановитьПараметр("РегистрацияНаработки", ПараметрыПодбора.РегистрацияНаработки);
	Иначе
		Запрос.УстановитьПараметр("РегистрацияНаработки", Неопределено);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДобавленныеСтроки = Новый Массив;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ОбъектЭксплуатации) Тогда
			ОбъектЭксплуатации = Выборка.Владелец;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаУзлов.Добавить();
		НоваяСтрока[ИмяРеквизита] = Выборка.Ссылка;
		
		ДобавленныеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;

	Возврат ДобавленныеСтроки;
	
КонецФункции

// Возвращает доступные для выбора узлы в соответствии с параметрами выбора.
// 
// Параметры:
// 	Параметры - Структура - 
// 	
// Возвращаемое значение:
// 	Массив - Доступные для выбора узлы
Функция ДоступныеДляВыбораУзлы(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр(
		"РегистрацияНаработки",
		Параметры.Свойство("РегистрацияНаработки") И Параметры.РегистрацияНаработки);
		
	Запрос.УстановитьПараметр(
		"УстановкаНаработки",
		Параметры.Свойство("УстановкаНаработки") И Параметры.УстановкаНаработки);
		
	Запрос.УстановитьПараметр(
		"ИсточникПоказателяНаработки",
		Параметры.Свойство("ИсточникПоказателяНаработки") И Параметры.ИсточникПоказателяНаработки);
		
	Запрос.УстановитьПараметр(
		"ПоказательНаработки",
		?(Параметры.Свойство("ПоказательНаработки"), Параметры.ПоказательНаработки, Неопределено));
		
	Запрос.УстановитьПараметр(
		"ПотребительНаработки",
		?(Параметры.Свойство("ПотребительНаработки"), Параметры.ПотребительНаработки, Неопределено));
	
	Если Параметры.Свойство("Отбор")
		И Параметры.Отбор.Свойство("Владелец")
		И (ЗначениеЗаполнено(Параметры.Отбор.Владелец)
			ИЛИ НЕ Параметры.Свойство("ДоступенВыборБезВладельца")) Тогда
		Запрос.УстановитьПараметр("Владелец", Параметры.Отбор.Владелец);
		Запрос.УстановитьПараметр("ИспользоватьОтборПоВладельцу", Истина);
	Иначе
		Запрос.УстановитьПараметр("Владелец", Неопределено);
		Запрос.УстановитьПараметр("ИспользоватьОтборПоВладельцу", Ложь);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыПоказателейКласса.Ссылка
	|ПОМЕСТИТЬ Классы
	|ИЗ
	|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПараметрыПоказателейКласса
	|ГДЕ
	|	НЕ ПараметрыПоказателейКласса.Ссылка.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &РегистрацияНаработки
	|				ТОГДА НЕ ПараметрыПоказателейКласса.РегистрироватьОтИсточника
	|			КОГДА &УстановкаНаработки
	|				ТОГДА ИСТИНА
	|			КОГДА &ИсточникПоказателяНаработки
	|				ТОГДА ПараметрыПоказателейКласса.ПоказательНаработки = &ПоказательНаработки
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Узлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК Узлы
	|ГДЕ
	|	Узлы.Ссылка <> &ПотребительНаработки
	|
	|	И (Узлы.Владелец = &Владелец
	|		ИЛИ НЕ &ИспользоватьОтборПоВладельцу)
	|
	|	И (НЕ &РегистрацияНаработки
	|			И НЕ &УстановкаНаработки
	|			И НЕ &ИсточникПоказателяНаработки
	|
	|		ИЛИ Узлы.Класс В
	|			(ВЫБРАТЬ
	|				Классы.Ссылка
	|			ИЗ
	|				Классы КАК Классы))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Генерирует новый штрихкод узла объекта эксплуатации.
// 
// Возвращаемое значение:
// 	Строка - Новый штрихкод
Функция НовыйШтрихкодУзла() Экспорт
	
	ШтрихкодЧисло = ТекущийМаксимальныйШтрихкодУзла();
	Возврат ПолучитьШтрихкодУзлаПоКоду(ШтрихкодЧисло + 1);
	
КонецФункции

// Определяет максимальный штрихкод в виде числа.
// 
// Возвращаемое значение:
// 	Число - Максимальный штрихкод в виде числа.
Функция ТекущийМаксимальныйШтрихкодУзла() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПОДСТРОКА(УзлыОбъектовЭксплуатации.Штрихкод, 1, 9) КАК КодСтрока
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
	|ГДЕ
	|	УзлыОбъектовЭксплуатации.Штрихкод ПОДОБНО ""[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]""
	|УПОРЯДОЧИТЬ ПО
	|	УзлыОбъектовЭксплуатации.Штрихкод УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОписаниеТипаЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(9, 0);
		Штрихкод = ОписаниеТипаЧисла.ПривестиЗначение(Выборка.КодСтрока);
	Иначе	
		Штрихкод = 0;
	КонецЕсли;

	Возврат Штрихкод;
	
КонецФункции

// Формирует штрихкод по числовому коду.
// 
// Параметры:
// 	Код - Число
// 	
// Возвращаемое значение:
// 	Строка - Штрихкод
Функция ПолучитьШтрихкодУзлаПоКоду(Код) Экспорт
	
	Возврат Формат(Код, "ЧЦ=9; ЧВН=; ЧГ=;");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Планирование

// Добавляет к дате время в указанной единице измерения с учетом графика работы. 
// 
// Параметры:
// 	ТекущаяДата - Дата - Дата, к которой нужно добавить время.
// 	Время - Число - Время.
// 	ЕдиницаИзмеренияВремени - ПеречислениеСсылка.ЕдиницыИзмеренияВремени - Единица времени, поддерживается Сутки, День, Месяц, Год.
// 	ГрафикРаботы - СправочникСсылка.Календари - График работы.
// 	
// Возвращаемое значение:
// 	Дата - 
Функция ДобавитьКДатеВремяСУчетомГрафикаРаботы(ТекущаяДата, Время, ЕдиницаИзмеренияВремени, ГрафикРаботы) Экспорт
	
	НоваяДата = '00010101000000';
	
	Если ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Месяц
		ИЛИ ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Год Тогда
		
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
			ПараметрыПолученияБлижайшихДатПоГрафику = ГрафикиРаботы.ПараметрыПолученияБлижайшихДатПоГрафику();
			ПараметрыПолученияБлижайшихДатПоГрафику.ВызыватьИсключение = Ложь;
			
			НачальныеДаты = Новый Массив;
			НачальныеДаты.Добавить(ОбщегоНазначенияУТКлиентСервер.ДобавитьКДатеВремя(ТекущаяДата, Время, ЕдиницаИзмеренияВремени));
			БлижайшиеДаты = ГрафикиРаботы.БлижайшиеДатыВключенныеВГрафик(
				ГрафикРаботы, НачальныеДаты, ПараметрыПолученияБлижайшихДатПоГрафику);
				
			Если БлижайшиеДаты <> Неопределено Тогда
				НоваяДата = БлижайшиеДаты.Получить(НачальныеДаты[0]);
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Сутки
		ИЛИ ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.День Тогда
		
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
			НоваяДата = ГрафикиРаботы.ДатаПоГрафику(ГрафикРаботы, ТекущаяДата, Время, Ложь);
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Ошибка при вызове функции - не поддерживаемое значение единицы времени';
								|en = 'Function call error - time unit value is not supported'");

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяДата) Тогда
		НоваяДата = ОбщегоНазначенияУТКлиентСервер.ДобавитьКДатеВремя(ТекущаяДата, Время, ЕдиницаИзмеренияВремени);
	КонецЕсли;
		
	Возврат НоваяДата;
	
КонецФункции

// Добавляет к дате время в указанной единице измерения с учетом расписания работы. 
// 
// Параметры:
// 	ТекущаяДата - Дата - Дата, к которой нужно добавить время.
// 	Время - Число - Время.
// 	ЕдиницаИзмеренияВремени - ПеречислениеСсылка.ЕдиницыИзмеренияВремени - Единица времени, поддерживается Минута, Час.
// 	ГрафикРаботы - СправочникСсылка.Календари - График работы.
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Должна содержать таблицу ВТ_ГрафикРаботыПоМинутам.
// 	
// Возвращаемое значение:
// 	Дата - Описание
Функция ДобавитьКДатеВремяСУчетомРасписанияРаботы(ТекущаяДата, Время, ЕдиницаИзмеренияВремени, ГрафикРаботы, МенеджерВременныхТаблиц) Экспорт

	Если ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Минута Тогда
		КоличествоМинут = Время;
	ИначеЕсли ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
		КоличествоМинут = Время * 60;
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка при вызове функции - не поддерживаемое значение единицы времени';
								|en = 'Function call error - time unit value is not supported'");
	КонецЕсли;
	
	НоваяДата = '00010101000000';

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СледующаяДата.ДатаГрафика, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаГрафика,
	|	ЕСТЬNULL(СледующаяДата.НачалоМинуты, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоМинуты
	|ИЗ
	|	ВТ_ГрафикРаботыПоМинутам КАК ТекущаяДата
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикРаботыПоМинутам КАК СледующаяДата
	|		ПО СледующаяДата.ГрафикРаботы = &ГрафикРаботы
	|			И СледующаяДата.МинутаВключенаВГрафик
	|			И СледующаяДата.МинутОтДатыНачала
	|				= ТекущаяДата.МинутОтДатыНачала
	|					+ &КоличествоМинут
	|					+ ВЫБОР
	|						КОГДА ТекущаяДата.МинутаВключенаВГрафик ТОГДА 0
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|
	|ГДЕ
	|	ТекущаяДата.ГрафикРаботы = &ГрафикРаботы
	|	И ТекущаяДата.ДатаГрафика = &ТекущаяДата
	|	И ТекущаяДата.НачалоМинуты = &НачалоМинуты";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("НачалоМинуты", Дата(1, 1, 1, Час(ТекущаяДата), Минута(ТекущаяДата), 0));
	Запрос.УстановитьПараметр("КоличествоМинут", КоличествоМинут);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоваяДата = Выборка.ДатаГрафика + Час(Выборка.НачалоМинуты) * 3600 + Минута(Выборка.НачалоМинуты) * 60;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяДата) Тогда
		НоваяДата = ОбщегоНазначенияУТКлиентСервер.ДобавитьКДатеВремя(ТекущаяДата, Время, ЕдиницаИзмеренияВремени);
	КонецЕсли;
	
	Возврат НоваяДата;

КонецФункции

// Приводит дату к концу рабочего дня с учетом расписания работы. 
// 
// Параметры:
// 	ТекущаяДата - Дата - Дата, к которой нужно добавить время.
// 	ГрафикРаботы - СправочникСсылка.Календари - График работы.
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Должна содержать таблицу ВТ_ГрафикРаботыПоМинутам.
// 	
// Возвращаемое значение:
// 	Дата - 
Функция КонецРабочегоДня(ТекущаяДата, ГрафикРаботы, МенеджерВременныхТаблиц) Экспорт
	
	НоваяДата = '00010101000000';
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикРаботыПоМинутам.НачалоМинуты
	|ИЗ
	|	ВТ_ГрафикРаботыПоМинутам КАК ГрафикРаботыПоМинутам
	|ГДЕ
	|	ГрафикРаботыПоМинутам.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикРаботыПоМинутам.ДатаГрафика = &ТекущаяДата
	|	И ГрафикРаботыПоМинутам.МинутаВключенаВГрафик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботыПоМинутам.НачалоМинуты УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоваяДата = ТекущаяДата + Час(Выборка.НачалоМинуты) * 3600 + Минута(Выборка.НачалоМинуты) * 60;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяДата) Тогда
		НоваяДата = КонецДня(ТекущаяДата);
	КонецЕсли;

	Возврат КонецЧаса(НоваяДата);
	
КонецФункции

Процедура СоздатьГрафикРаботыПоМинутам(МенеджерВременныхТаблиц, Графики, ДатаНачала, ДатаОкончания) Экспорт

	ИспользуемыеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	
	ГрафикиРаботы.СоздатьВТРасписанияРаботыНаПериод(МенеджерВременныхТаблиц, Графики, ДатаНачала, ДатаОкончания);
	
	СписокМинут = Новый ТаблицаЗначений;
	СписокМинут.Колонки.Добавить("НачалоМинуты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	НачалоМинуты = '00010101000000';
	Для НомерМинуты = 1 По 1440 Цикл
		НоваяСтрока = СписокМинут.Добавить();
		НоваяСтрока.НачалоМинуты = НачалоМинуты + (НомерМинуты - 1) * 60;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписокМинут.НачалоМинуты КАК НачалоМинуты
	|ПОМЕСТИТЬ СписокМинут
	|ИЗ
	|	&СписокМинут КАК СписокМинут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныеГрафики.Календарь КАК ГрафикРаботы,
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|	ЕСТЬNULL(СписокМинут.НачалоМинуты, ДАТАВРЕМЯ(1,1,1)) КАК НачалоМинуты,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ВТРасписанияРаботы.ДатаГрафика ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК МинутаВключенаВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокМинут КАК СписокМинут
	|		ПО ИСТИНА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ПО ВТРасписанияРаботы.ГрафикРаботы = КалендарныеГрафики.Календарь
	|			И ВТРасписанияРаботы.ДатаГрафика = КалендарныеГрафики.ДатаГрафика
	|			И ВТРасписанияРаботы.ВремяНачала <= СписокМинут.НачалоМинуты
	|			И ВТРасписанияРаботы.ВремяОкончания >= СписокМинут.НачалоМинуты
	|ГДЕ
	|	КалендарныеГрафики.Календарь В (&Графики)
	|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	КалендарныеГрафики.Календарь,
	|	КалендарныеГрафики.ДатаГрафика,
	|	ЕСТЬNULL(СписокМинут.НачалоМинуты, ДАТАВРЕМЯ(1,1,1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботы,
	|	ДатаГрафика,
	|	НачалоМинуты";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокМинут", СписокМинут);
	Запрос.УстановитьПараметр("Графики", Графики);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Результат = Запрос.Выполнить();

	ГрафикРаботыПоМинутам = Новый ТаблицаЗначений;
	ГрафикРаботыПоМинутам.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	ГрафикРаботыПоМинутам.Колонки.Добавить("МинутаВключенаВГрафик", Новый ОписаниеТипов("Булево"));
	ГрафикРаботыПоМинутам.Колонки.Добавить("ДатаГрафика", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ГрафикРаботыПоМинутам.Колонки.Добавить("НачалоМинуты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	ГрафикРаботыПоМинутам.Колонки.Добавить("МинутОтДатыНачала", ОбщегоНазначения.ОписаниеТипаЧисло(15));

	ТекущийГрафикРаботы = Неопределено;
	МинутОтДатыНачала = 0;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ГрафикРаботы <> ТекущийГрафикРаботы Тогда
			ТекущийГрафикРаботы = Выборка.ГрафикРаботы;
			МинутОтДатыНачала = 0;
		КонецЕсли;
		
		НоваяСтрока = ГрафикРаботыПоМинутам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.МинутОтДатыНачала = МинутОтДатыНачала + ?(НоваяСтрока.МинутаВключенаВГрафик, 0, -1);
		
		Если Выборка.МинутаВключенаВГрафик Тогда
			МинутОтДатыНачала = МинутОтДатыНачала + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикРаботыПоМинутам.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикРаботыПоМинутам.ДатаГрафика КАК ДатаГрафика,
	|	ГрафикРаботыПоМинутам.МинутаВключенаВГрафик КАК МинутаВключенаВГрафик,
	|	ГрафикРаботыПоМинутам.НачалоМинуты КАК НачалоМинуты,
	|	ГрафикРаботыПоМинутам.МинутОтДатыНачала КАК МинутОтДатыНачала
	|ПОМЕСТИТЬ ВТ_ГрафикРаботыПоМинутам
	|ИЗ
	|	&ГрафикРаботыПоМинутам КАК ГрафикРаботыПоМинутам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы,
	|	МинутаВключенаВГрафик,
	|	МинутОтДатыНачала,
	|	ДатаГрафика";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ГрафикРаботыПоМинутам", ГрафикРаботыПоМинутам);
	Запрос.Выполнить();
	
	ИспользуемыеТаблицы.Добавить("ВТ_ГрафикРаботыПоМинутам");
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

Процедура ДобавитьПрофильОтветственныйЗаВедениеНСИУР(ОписанияПрофилей)

	// Профиль "Ответственный за ведение НСИ управления ремонтами".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ОтветственныйЗаВедениеНСИУР";
	ОписаниеПрофиля.Идентификатор = "aa7f3ae5-3b21-498c-bd3a-3d9a005f2eaf";
	ОписаниеПрофиля.Родитель      = "УправлениеРемонтами";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Ответственный за ведение НСИ управления ремонтами';
										|en = 'Employee responsible for master data of R&M management'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	УправлениеДоступомУП.ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля);
	
	// Чтение общей НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНоменклатуре");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЛогистическихПараметров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеШаблоновЭтикетокИЦенников");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНормативноСправочнойИнформации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАссортимента");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОрганизацийИБанковскихСчетовОрганизаций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКасс");
	
	// Настройка НСИ управления производством.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеМаршрутныхКарт");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтруктурыРабочихЦентров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРаботСотрудников");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРесурсныхСпецификаций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОсновныхМаршрутныхКарт");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеМоделейФормированияСтоимости");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПроизводственныхУчастков");
	
	// Настройка НСИ управления ремонтами
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВидовДефектов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВидовРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбщихВидовРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПоказателейНаработки");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУстановкиНаработки");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНаработок");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРемонтов");
	
	// Отчеты
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаСостояниеОбъектовЭксплуатации");
	
	// КИ
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаОбслуживаниеИРемонт");
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаПроизводство");
	ОписаниеПрофиля.Роли.Добавить("РазделПроизводствоПроизводствоНаСтороне");
	
	// Виды доступа.
	ОписаниеПрофиля.ВидыДоступа.Добавить("Подразделения", "ВначалеВсеРазрешены");
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр(
		"ru = 'Под профилем выполняются задачи:
		|1. Ведение справочника объектов эксплуатации и ремонтной деятельности
		|2. Разработка и ведение технологической и нормативной документации управления ремонтами
		|3. Анализ существующих, доработка и разработка новых маршрутных карт ремонтных работ
		|4. Расчет производственной мощности оборудования, расходования сырья и материалов.';
		|en = 'Use this profile to:
		|1. Maintain the ""Assets"" and ""R&M activities"" catalogs
		|2. Develop and maintain the manufacturing and standard documents related to R&M management
		|3. Develop, analyze, and enhance R&M route sheets
		|4. Calculate the equipment production capacity, consumption of raw and consumable materials.'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильЭксплуатационник(ОписанияПрофилей)
	
	// Профиль "Эксплуатационник".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "Эксплуатационник";
	ОписаниеПрофиля.Идентификатор = "3be46362-d57a-494a-a0af-4fcf2d5268c9";
	ОписаниеПрофиля.Родитель      = "УправлениеРемонтами";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Эксплуатационник';
										|en = 'Operator'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	УправлениеДоступомУП.ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля);
	
	// Чтение общей НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНоменклатуре");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЛогистическихПараметров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеШаблоновЭтикетокИЦенников");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНормативноСправочнойИнформации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАссортимента");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОрганизацийИБанковскихСчетовОрганизаций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКасс");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРаботСотрудников");
	
	// Настройка управления ремонтами
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКлассовОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПоказателейНаработки");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовДефектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбщихВидовРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУзловОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНаработок");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРегистрацийДефектов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНаработкиОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрисоединенныхФайловДокументовРемонты");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДефектов");
	
	// Отчеты и обработки
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовТОиР");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаСостояниеОбъектовЭксплуатации");
	
	// КИ
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаОбслуживаниеИРемонт");
	
	// Виды доступа.
	ОписаниеПрофиля.ВидыДоступа.Добавить("Подразделения", "ВначалеВсеРазрешены");
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр(
		"ru = 'Под профилем выполняются задачи:
		|1. Ведение дефектной ведомости и устранение дефектов
		|2. Регистрация наработок объектов эксплуатации';
		|en = 'The following tasks are performed under the profile:
		|1. Keeping of the defect list and defect elimination
		|2. Registration of the assets activity records'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильРемонтник(ОписанияПрофилей)
	
	// Профиль "Ремонтник".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "Ремонтник";
	ОписаниеПрофиля.Идентификатор = "a8aa578d-c4f7-49a7-b4b2-0a19e46bce0e";
	ОписаниеПрофиля.Родитель      = "УправлениеРемонтами";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Ремонтник';
										|en = 'Repairman'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	УправлениеДоступомУП.ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля);
	
	// Чтение общей НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАссортимента");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНоменклатуре");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЛогистическихПараметров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКасс");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНазначений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНормативноСправочнойИнформации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОрганизацийИБанковскихСчетовОрганизаций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеШаблоновЭтикетокИЦенников");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПриоритетов");
	
	// Настройка управления ремонтами
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВводаИнформацииОПрошлыхРемонтах");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВнутреннихПотребленийТоваров");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаказовНаРемонт");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПеремещенийТоваров");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрочихОприходованийТоваров");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРасходныхОрдеровНаТовары");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРегистрацийДефектов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСборокТоваров");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеТранспортныхНакладных");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрисоединенныхФайловДокументовРемонты");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовДефектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКлассовОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНаработок");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбщихВидовРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковЗаказовНаВнутреннееПотребление");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПоказателейНаработки");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУзловОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУпаковочныхЛистов");
	//++ Устарело_Производство21
	ОписаниеПрофиля.Роли.Добавить("ЧтениеБракаВПроизводстве");
	//-- Устарело_Производство21
	
	// Оперативное планирование производства.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеБригад");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРаботСотрудников");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДоступностиВидовРабочихЦентров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаказовНаПроизводство2_2");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеМоделейФормированияСтоимости");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПроизводственныхУчастков");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРесурсныхСпецификаций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтруктурыРабочихЦентров");
	//++ Устарело_Производство21
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаказовНаПроизводство");	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафикаПроизводства2_1");	
	//-- Устарело_Производство21
	
	// Учет производства.
	//++ Устарело_Производство21
	ОписаниеПрофиля.Роли.Добавить("ЧтениеМаршрутныхЛистовПроизводства");	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВыпускаПродукции");
	//-- Устарело_Производство21
	
	// Регистры, чтение
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковДоступныхТоваров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковТоваровКПоступлению");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковТоваровНаСкладах");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковТоваровКОтгрузке");
	
	//++ Устарело_Производство21
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЭтаповПроизводства");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПотреблениеМатериаловИУслугВПроизводстве");
	//-- Устарело_Производство21
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафикаПроизводства");
	
	// Отчеты и обработки
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовВнутреннегоТовародвижения");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовТОиР");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрКомандыСостояниеОбеспеченияЗаказов");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаСостояниеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаТоварыСИстекающимиСертификатами");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаХодРемонтныхМероприятий");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыИОбработкиРемонтника");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЗапросКоличестваИСерий");
	
	// КИ
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаОбслуживаниеИРемонт");
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаПроизводство");
	ОписаниеПрофиля.Роли.Добавить("РазделПроизводствоПроизводствоНаСтороне");
	
	// Виды доступа.
	ОписаниеПрофиля.ВидыДоступа.Добавить("Подразделения", "ВначалеВсеРазрешены");
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр(
		"ru = 'Под профилем выполняются задачи:
		|1. Ведение дефектной ведомости и устранение дефектов
		|2. Выполнение ремонтных работ';
		|en = 'The following tasks are performed under the profile::
		|1. Keeping of the defect list and defect elimination
		|2. Execution of R&M activities'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильПланировщикРемонтов(ОписанияПрофилей)
	
	// Профиль "Планировщик ремонтов".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ПланировщикРемонтов";
	ОписаниеПрофиля.Идентификатор = "21f44963-d50c-4cf5-ba7d-4eea317974a9";
	ОписаниеПрофиля.Родитель      = "УправлениеРемонтами";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Планировщик ремонтов';
										|en = 'R&M scheduler'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	УправлениеДоступомУП.ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля);
	
	// Чтение общей НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАссортимента");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНоменклатуре");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЛогистическихПараметров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКасс");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНазначений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНормативноСправочнойИнформации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОрганизацийИБанковскихСчетовОрганизаций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеШаблоновЭтикетокИЦенников");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПриоритетов");
	
	// Настройка управления ремонтами
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВводаИнформацииОПрошлыхРемонтах");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаказовНаРемонт");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовДефектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДефектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКлассовОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНаработок");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбщихВидовРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковЗаказовНаВнутреннееПотребление");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПоказателейНаработки");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРемонтов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУзловОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрисоединенныхФайловДокументовРемонты");
	
	// Оперативное планирование производства.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеБригад");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРаботСотрудников");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДоступностиВидовРабочихЦентров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПроизводственныхУчастков");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтруктурыРабочихЦентров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафикаПроизводства");
	//++ Устарело_Производство21
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафикаПроизводства2_1");
	//-- Устарело_Производство21	
	
	// Отчеты и обработки
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовТОиР");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеПланированияРемонтныхРабот");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрКомандыСостояниеОбеспеченияЗаказов");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаСостояниеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаХодРемонтныхМероприятий");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыИОбработкиПланировщикаРемонтов");
	
	// Регистры, чтение
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковДоступныхТоваров");
	
	// КИ
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаОбслуживаниеИРемонт");
	
	// Виды доступа.
	ОписаниеПрофиля.ВидыДоступа.Добавить("Подразделения", "ВначалеВсеРазрешены");
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр(
		"ru = 'Под профилем выполняются задачи:
		|1. Разработка программ и календарных графиков ремонтных работ по предприятию и его подразделениям, их корректировка в течение планируемого периода
		|2. Осуществляется руководство разработкой и внедрением нормативов для планирования ремонтной деятельности.';
		|en = 'The following tasks are performed under the profile:
		|1. Development of programs and schedules of repair activities for the company and its business units, their adjustment during the planned period
		|2. Management of development and implementation of standards for planning repair activities.'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти