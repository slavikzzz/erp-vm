#Область ПрограммныйИнтерфейс

// Описывает контекст, в котором выполняется расчет показателей декларации -
// организацию, период и т.п.
//
// Параметры:
//  Организация                      - СправочникСсылка.Организации - налогоплательщик
//  КонецПериода					 - Дата - характеризует отчетный период; дата из последнего месяца отчетного периода
//	ПоМесту							 - Строка - код места представления декларации
//  ДатаПодписи						 - Дата - дата подписи декларации
//  КППОбособленногоПодразделения	 - Строка - 
// 		* пустая строка, если декларация представляется по месту нахождения организации
//		* КПП обособленного подразделения, если декларация представляется по месту нахождения обособленного подразделения
//	Периодичность					 - ПеречислениеСсылка.Периодичность - характеризует отчетный период.
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - в указанном периоде организация не существовала.
//
Функция НовыйКонтекстРасчета(Организация, КонецПериода, ПоМесту, ДатаПодписи = '0001-01-01', КППОбособленногоПодразделения = "", Периодичность = Неопределено) Экспорт
	
	НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(КонецПериода, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстРасчета = Новый Структура; 
	КонтекстРасчета.Вставить("НачалоПериода",                 НачалоНалоговогоПериода);
	КонтекстРасчета.Вставить("КонецПериода",                  КонецМесяца(КонецПериода));
	КонтекстРасчета.Вставить("Организация",                   Организация);
	КонтекстРасчета.Вставить("Организации",                   ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	КонтекстРасчета.Вставить("ДатаПодписи",                   ?(ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, ТекущаяДатаСеанса()));
	КонтекстРасчета.Вставить("КППОбособленногоПодразделения", КППОбособленногоПодразделения);
	КонтекстРасчета.Вставить("Периодичность",                 Периодичность);
	КонтекстРасчета.Вставить("НомерКвартала",                 0); // 0 - для декларации за периоды 1,2,4,5,7,8,10,11 месяцев
	КонтекстРасчета.Вставить("ПоМесту",                       ?(ЗначениеЗаполнено(ПоМесту), ПоМесту, "214"));
	КонтекстРасчета.Вставить("ОсновнойВариантНО",
		РаздельныйУчетПоНалогуНаПрибыль.ОсновнойВариантНалогообложенияПрибыли(Организация, КонецПериода));
	
	Если Не ЗначениеЗаполнено(КонтекстРасчета.Периодичность) Тогда
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"НастройкиУчетаНалогаНаПрибыль",
			Организация,
			КонецПериода,
			Ложь);
		ПорядокУплатыАвансовПоНалогуНаПрибыль = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыУчетнойПолитики, "ПорядокУплатыАвансовПоНалогуНаПрибыль");
		Если ПорядокУплатыАвансовПоНалогуНаПрибыль = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли Тогда
			КонтекстРасчета.Периодичность = Перечисления.Периодичность.Месяц;
		Иначе
			КонтекстРасчета.Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетныйМесяц = Месяц(КонтекстРасчета.КонецПериода);
	ЭтоКвартал    = (ОтчетныйМесяц % 3 = 0);
	Если ЭтоКвартал Тогда
		КонтекстРасчета.НомерКвартала = ОтчетныйМесяц / 3;
	КонецЕсли;
	
	Возврат КонтекстРасчета;
	
КонецФункции

// Рассчитывает данные декларации и помещает их в контейнер, поставляемый БРО
//
// Параметры:
//  Контейнер       - см. РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет()
//  Расшифровка     - см. ОбщаяФорма.РасшифровкаПоказателейРегламентированныхОтчетов.ПриСозданииНаСервере()
//  ИмяРедакции     - Строка - Имя редакции отчета в терминах БРО
//  КонтекстРасчета - см. НовыйКонтекстРасчета() - содержит сведения о том, какая декларация заполняется: по какой
//                                                 организации, за какой период и т.п.
//
Процедура ЗаполнитьРегламентированныйОтчет(Контейнер, Расшифровка, ИмяРедакции, КонтекстРасчета) Экспорт
	
	СхемаРасчета        = СхемаРасчета(КонтекстРасчета, РасчетНалогаНаПрибыль.ОписаниеСуммНалоговыйУчет());
	ОписаниеФормыОтчета = ОписаниеФормыОтчета(ИмяРедакции, СхемаРасчета);
	
	Отбор = НовыйОтборРасчета();
	Для Каждого ПоказательОтчета Из ОписаниеФормыОтчета Цикл
		ЗаполнитьЗначенияСвойств(Отбор.Добавить(), ПоказательОтчета);
	КонецЦикла;
	
	РезультатРасчета    = Рассчитать(СхемаРасчета, Отбор);
	СокращенныйПротокол = СократитьПротоколРасчетаДляРасшифровкиДекларации(РезультатРасчета.Протокол, СхемаРасчета);
	
	ТаблицаСтраницВариантовНО = ПолучитьСоответствиеСтраницДекларацииИВариантовНО(СхемаРасчета.ВариантыНО, КонтекстРасчета, ИмяРедакции);
	
	ПередатьРассчитанныеЗначенияБРО(
		Контейнер,
		РезультатРасчета,
		ОписаниеФормыОтчета,
		ИмяРедакции,
		СхемаРасчета,
		ТаблицаСтраницВариантовНО);
		
	ПередатьПротоколРасчетаБРО(
		Расшифровка,
		СокращенныйПротокол,
		РезультатРасчета.РассчитанныеЗначения,
		ОписаниеФормыОтчета,
		ИмяРедакции,
		СхемаРасчета,
		ТаблицаСтраницВариантовНО);
	
	// Показатели Приложения 5 к Листу 02 рассчитываем обособленно.
	// Этот расчет имеет ряд особенностей:
	// - формируется в отношении неопределенного количества показателей - по числу обособленных подразделений
	// - размещается на неопределенном числе страниц
	// - использует несуммовые показатели
	// - использует ячейки со специальными номерами
	// - не требуется сопоставление данных бухгалтерского и налогового учета
	// В одной из следующих версий предполагается использование здесь функционала списков.
	Если НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
		
		РасчетРаспределенияНалога = НовыйРасчетРаспределенияНалога();
		НалоговыйУчетОбособленныхПодразделений.ПолучитьРаспределениеНалогаДляЗаполненияДекларации(РасчетРаспределенияНалога, КонтекстРасчета, СхемаРасчета.ВариантыНО);
		
		Если ЗначениеЗаполнено(РасчетРаспределенияНалога) Тогда
		
			Для Каждого СтрокаСоответствия Из ТаблицаСтраницВариантовНО Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаСоответствия.НомерСтраницы) Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыОтбора = Новый Структура("ВариантНалогообложенияПрибыли", СтрокаСоответствия.ВариантНО);
				РасчетРаспределенияПоВариантуНО = РасчетРаспределенияНалога.Скопировать(ПараметрыОтбора);
				
				Если РасчетРаспределенияПоВариантуНО.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НалоговаяБаза = СуммаНУПоказателя(РезультатРасчета.РассчитанныеЗначения, "НалоговаяБаза", СтрокаСоответствия.ВариантНО); // одинаковая для всех обособленных подразделений
				
				РасчетРаспределенияПоВариантуНО.ЗаполнитьЗначения(НалоговаяБаза, "НалоговаяБаза");
				НалоговаяБазаЗакрытыхПодразделений = Неопределено;
				НалоговыйУчетОбособленныхПодразделений.ОпределитьНалоговуюБазуЗакрытыхПодразделений(НалоговаяБазаЗакрытыхПодразделений, КонтекстРасчета);
				Если НалоговаяБазаЗакрытыхПодразделений = Неопределено Тогда
					// Приказ ФНС от 19 октября 2016 г. N ММВ-7-3/572@
					// Порядок заполнения декларации
					// 10.2. ... по строке 031 указывается  ... при закрытии обособленных подразделений ... в течение налогового периода
					// Т.е. НалоговаяБазаБезЗакрытыхПодразделений не заполняется, если закрытых подразделений нет
					НалоговаяБазаБезЗакрытыхПодразделений = 0;
				Иначе
					НалоговаяБазаБезЗакрытыхПодразделений = НалоговаяБаза - НалоговаяБазаЗакрытыхПодразделений;
				КонецЕсли;
				РасчетРаспределенияПоВариантуНО.ЗаполнитьЗначения(
					НалоговаяБазаБезЗакрытыхПодразделений,
					"НалоговаяБазаБезЗакрытыхПодразделений");
				
				ИндексСтраницы = СтрокаСоответствия.НомерСтраницы - 1;
				ПередатьРасчетРаспределенияНалогаБРО(Контейнер, РасчетРаспределенияПоВариантуНО, ИмяРедакции, КонтекстРасчета, ИндексСтраницы, СтрокаСоответствия.ПризнакНалогоплательщика);
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет перечень ячеек отчета (в терминах БРО), данные для заполнения которых предоставляются прикладным решением.
//
// Параметры:
//  ИмяРедакции - Строка - Имя редакции отчета в терминах БРО
//  Организация  - СправочникСсылка.Организации
//  КонецПериода - Дата - характеризует отчетный период. Отчетный период всегда начинается с начала года.
//
Функция ЗаполняемыеЯчейкиРегламентированногоОтчета(ИмяРедакции, Организация, КонецПериода) Экспорт
	
	Ячейки = Новый Массив;
	
	КонтекстРасчета = НовыйКонтекстРасчета(Организация, КонецПериода, "214");
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат Новый ФиксированныйМассив(Ячейки);
	КонецЕсли;
	
	СхемаРасчета        = СхемаРасчета(КонтекстРасчета, РасчетНалогаНаПрибыль.ОписаниеСуммНалоговыйУчет());
	ОписаниеФормыОтчета = ОписаниеФормыОтчета(ИмяРедакции, СхемаРасчета);
	
	Для Каждого ПоказательОтчета Из ОписаниеФормыОтчета Цикл
		Ячейки.Добавить(НомерПоказателяБРО(ПоказательОтчета, ИмяРедакции));
	КонецЦикла;
	
	// Также прикладное решение заполняет служебные ячейки, по которым бро определяет, есть на листе данные или нет.
	СлужебныеЯчейки = Новый Массив; // используем отдельный массив, чтобы исключить дубли элементов в Ячейки
	Для Каждого ПоказательОтчета Из ОписаниеФормыОтчета Цикл
		НомерСлужебнойЯчейки = РегламентированныйОтчетПрибыль.НомерСлужебнойЯчейкиПризнакНалогоплательщика(
			ПоказательОтчета.НомерЛиста,
			ПоказательОтчета.НомерПриложения,
			ИмяРедакции);
		СлужебныеЯчейки.Добавить(НомерСлужебнойЯчейки);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ячейки, СлужебныеЯчейки, Истина);
	
	Возврат Новый ФиксированныйМассив(Ячейки);
	
КонецФункции

// Определяет, нужно ли заполнять детальные строки торгового сбора в декларации по налогу на прибыль.
//
// Параметры:
//  КонецПериода - Дата - характеризует отчетный период, за который представляется декларация.
//
Функция ЗаполнятьДетальнуюИнформациюПоТорговомуСборуВДекларации(КонецПериода) Экспорт
	
	Возврат КонецПериода >= '2016-12-31'; // Приказ ФНС от 19 октября 2016 г. N ММВ-7-3/572@
	
КонецФункции	

// Федеральный закон от 08.08.2024 N 259-ФЗ внес изменения в п. 10 ст. 286 НК РФ:
// п. 38 ст. 2: в абзаце первом пункта 10 статьи 286 слова "на сумму торгового сбора, фактически уплаченного
// с начала налогового периода до даты уплаты налога (авансового платежа)" заменить словами "на сумму исчисленного торгового сбора,
// период обложения которым относится к соответствующему отчетному (налоговому) периоду";
// п. 13 ст. 19: Действие положений ... пункта 10 статьи 286 Налогового кодекса Российской Федерации
// (в редакции настоящего Федерального закона) распространяется на правоотношения, возникшие с 1 января 2024 года.
//
// Параметры:
//   Период - Дата -  конец отчетного периода
//
// Возвращаемое значение:
//   Булево
//
Функция ЗадолженностьПоТорговомуСборуОпределяетсяПоНачислению(Период) Экспорт
	Возврат Период > '2024-01-01';
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Отбирает строки переданной таблицы расшифровки по номеру страницы и подменяет переданную таблицу на новую.
//
// Параметры:
//   ПараметрыОтчета - Структура - структура параметров отчета, необходимых для формирования расшифровки.
//
Процедура ОтобратьРасшифровкуПоказателейПоСтранице(ПараметрыОтчета) Экспорт

	АдресТаблицыРасшифровки = ПараметрыОтчета.АдресВременногоХранилищаРасшифровки;
	ИсходнаяТаблицаРасшифровки = ПолучитьИзВременногоХранилища(АдресТаблицыРасшифровки); // ТаблицаЗначений
	Если ПараметрыОтчета.Свойство("КоординатыСтраницыРаздела") И ЗначениеЗаполнено(ПараметрыОтчета.КоординатыСтраницыРаздела) Тогда
		НомерСтраницы = ПараметрыОтчета.КоординатыСтраницыРаздела[0]; // Массив координат. Первым элементом всегда идет номер страницы
	Иначе
		НомерСтраницы = 0; // Для обратной совместимости
	КонецЕсли;
	
	НоваяТаблицаРасшифровки = ИсходнаяТаблицаРасшифровки.СкопироватьКолонки();
	
	Для Каждого ИсходнаяСтрока Из ИсходнаяТаблицаРасшифровки Цикл
		Если ТипЗнч(ИсходнаяСтрока.ДополнительныеПараметры) = Тип("Структура")
			И ИсходнаяСтрока.ДополнительныеПараметры.Свойство("НомерСтраницы")
			И ИсходнаяСтрока.ДополнительныеПараметры.НомерСтраницы <> НомерСтраницы Тогда
			
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяТаблицаРасшифровки.Добавить(), ИсходнаяСтрока);
	КонецЦикла;
	
	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(НоваяТаблицаРасшифровки, Новый УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти

#Область ПорядокЗаполненияДекларации

#Область СхемаРасчета

// Описывает в общем (прикладном) виде порядок расчета налога на прибыль.
// Порядок расчета включает в себя описание:
// - данных, которые нужно получить из информационной базы
// - арифметических действий, которые нужно с этими данными выполнить.
//
// Параметры:
//  КонтекстРасчета - см. НовыйКонтекстРасчета() - содержит сведения о том, какая декларация заполняется: по какой
//                                                 организации, за какой период и т.п.
//  ОписаниеСумм - см. КоллекцииСумм.НовыйОписаниеКоллекцииСумм() - набор сумм, которые нужно рассчитать в соответствии
//                                                                  со схемой.
//
// Возвращаемое значение:
//  см. НовыйСхемаРасчета
//
Функция СхемаРасчета(КонтекстРасчета, ОписаниеСумм)
	
	СхемаРасчета = НовыйСхемаРасчета(КонтекстРасчета, ОписаниеСумм);
	
	// АПК:1297-выкл - это комментарий разметки кода, отключающий требования локализации строк для средства автоматической проверки кода - см. v8.1c.ru/acc
	// Для текстов, приведенных в схеме расчета, локализация не требуется, так как в схеме описано содержимое формы декларации,
	// применяемое в конкретной стране и не подлежащее переводу на язык пользователя или язык его юрисдикции.
	
	#Область РасчетНалога
	
	ДобавитьРасчет(СхемаРасчета, "НалоговаяБаза");
	ДобавитьОписание(СхемаРасчета,   "02", "", "120", "Налоговая база для исчисления налога");
	ДобавитьСлагаемое(СхемаРасчета,  "Прибыль");
	ДобавитьОписание(СхемаРасчета,   "02", "", "100", "Налоговая база");
	ДобавитьВычитаемое(СхемаРасчета, "УбыткиПрошлыхЛет"); // Ст. 283 НК РФ
	ДобавитьОписание(СхемаРасчета,   "02", "", "110", "Сумма убытка, уменьшающего налоговую базу за отчетный период"); 
	
	ДобавитьРасчет(СхемаРасчета, "НалоговаяБаза.Прибыль", Ложь);
	ДобавитьСлагаемое(СхемаРасчета,  "Прибыль");
	
	ДобавитьРасчет(СхемаРасчета, "НалоговаяБаза.УбыткиПрошлыхЛет", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "УбыткиПрошлыхЛет.НаТекущийПериод");  // Приложение 4 к Листу 02
	
	ДобавитьРасчет(СхемаРасчета, "Прибыль", Ложь);
	ДобавитьСлагаемое(СхемаРасчета,  "ПрибыльУбыток");
	ДобавитьОграничение(СхемаРасчета, 0, "Снизу", "Сумма убытка исключена из расчета");
	
	ДобавитьРасчет(СхемаРасчета, "Убыток", Ложь);
	ДобавитьВычитаемое(СхемаРасчета, "ПрибыльУбыток");
	ДобавитьОграничение(СхемаРасчета, 0, "Снизу", "Сумма прибыли исключена из расчета");
	
	ДобавитьРасчет(СхемаРасчета, "ПрибыльУбыток", Ложь);
	ДобавитьОписание(СхемаРасчета,   "02", "", "060", "Прибыль (убыток)");
	ДобавитьСлагаемое(СхемаРасчета,  "Доходы");  // Приложение 1 к Листу 02
	ДобавитьВычитаемое(СхемаРасчета, "Расходы"); // Приложение 2 к Листу 02
	ДобавитьСлагаемое(СхемаРасчета,  "ПрочиеУбытки.НеПризнаютсяДляЦелейНалогообложения"); // Приложение 3 к Листу 02
	
	// В декларации на Листе 02 приводится специфичная группировка основных показателей прибыли (убытка)
	ГруппировкаПрибыли = НовыйОписаниеГруппировки(СхемаРасчета, "ПрибыльУбыток", "02", "");
	ДобавитьПоказательГруппировки(
		ГруппировкаПрибыли,
		"Доходы.Реализация",
		"010",
		"Доходы от реализации");
	ДобавитьПоказательГруппировки(
		ГруппировкаПрибыли,
		"Доходы.Внереализационные",
		"020",
		"Внереализационные доходы");
	ДобавитьПоказательГруппировки(
		ГруппировкаПрибыли,
		"Расходы.ПроизводствоРеализация",
		"030",
		"Расходы, уменьшающие сумму доходов от реализации");
	ДобавитьПоказательГруппировки(
		ГруппировкаПрибыли,
		"Расходы.Внереализационные",
		"040",
		"Внереализационные расходы");
	ДобавитьПоказательГруппировки(
		ГруппировкаПрибыли,
		"ПрочиеУбытки.НеПризнаютсяДляЦелейНалогообложения",
		"050",
		"Убытки по операциям, отраженным в Приложении 3 к Листу 02");
	
	Если ТорговыйСбор.УплачиваетсяТорговыйСбор(КонтекстРасчета.Организация, КонтекстРасчета.КонецПериода) Тогда
		// п. 10 ст. 286
		// налогоплательщик вправе уменьшить сумму налога (авансового платежа), исчисленного по итогам налогового (отчетного) периода, 
		// зачисляемую в консолидированный бюджет субъекта Российской Федерации ...
		// на сумму торгового сбора, фактически уплаченного с начала налогового периода до даты уплаты налога (авансового платежа).
		ДобавитьРасчет(СхемаРасчета, "УменьшениеНалогаНаТорговыйСбор");
		Если ЗаполнятьДетальнуюИнформациюПоТорговомуСборуВДекларации(КонтекстРасчета.КонецПериода) Тогда 
			ДобавитьОписание(СхемаРасчета,  "02", "", "267", "Сумма торгового сбора, на которую уменьшен налог за текущий отчетный (налоговый) период");
		Иначе
			ДобавитьОписание(СхемаРасчета,  "02", "", "260", "Сумма торгового сбора"); // Письмо ФНС от 12 августа 2015 г. N ГД-4-3/14174@
		КонецЕсли;
		
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ТорговыйСбор");
		ИсточникДанных.ОтборДанных.Показатель = "УменьшениеНалогаНаТорговыйСбор";   // Сумма, на которую уменьшен налог в текущем периоде
		
		Если ЗаполнятьДетальнуюИнформациюПоТорговомуСборуВДекларации(КонтекстРасчета.КонецПериода) Тогда
		
			ДобавитьРасчет(СхемаРасчета, "УменьшениеНалогаНаТорговыйСборПрошлогоПериода");
			ДобавитьОписание(СхемаРасчета,  "02", "", "266", "Сумма торгового сбора, на которую уменьшен налог за прошлый отчетный период");
			ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ТорговыйСбор");
			ИсточникДанных.ОтборДанных.Показатель = "УменьшениеНалогаНаТорговыйСборПрошлогоПериода";   // Сумма, на которую уменьшен налог в прошлом периоде
			
			ДобавитьРасчет(СхемаРасчета, "ТорговыйСборУплаченный");

			// С 2025 года меняется название строки
			Если ЭтоРедакцияДекларации2025год(КонтекстРасчета.КонецПериода) Тогда
				ДобавитьОписание(СхемаРасчета,  "02", "", "265", "Сумма торгового сбора, исчисленная с начала налогового периода");
			Иначе
				ДобавитьОписание(СхемаРасчета,  "02", "", "265", "Фактически уплаченная сумма торгового сбора с начала налогового периода");
			КонецЕсли;

			ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ТорговыйСбор");
			ИсточникДанных.ОтборДанных.Показатель = "ТорговыйСборУплаченный";   // Сумма фактически уплаченного торгового сбора в текущем периоде
			
		КонецЕсли;
		
				
	КонецЕсли;
	#КонецОбласти
	
	#Область Доходы
	
	ДобавитьРасчет(СхемаРасчета, "Доходы");
	ДобавитьСлагаемое(СхемаРасчета, "Реализация");
	ДобавитьОписание(СхемаРасчета,  "02", "1", "040", "Сумма доходов от реализации"); // Ст. 249
	ДобавитьСлагаемое(СхемаРасчета, "Внереализационные");
	ДобавитьОписание(СхемаРасчета,  "02", "1", "100", "Внереализационные доходы"); // Ст. 250
	
	#Область Реализация
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Реализация");
	ДобавитьСлагаемое(СхемаРасчета, "Выручка");
	ДобавитьОписание(СхемаРасчета,  "02", "1", "010", "Выручка от реализации");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочаяРеализация.ЦенныеБумаги"); // Строка 020, описание см. ниже
	ДобавитьСлагаемое(СхемаРасчета, "ОсобыйПорядокПризнанияУбытков");
	ДобавитьОписание(СхемаРасчета,  "02", "1", "030", "Выручка по операциям, отраженным в Приложении 3 Листа 02");
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Реализация.Выручка");
	ДобавитьСлагаемое(СхемаРасчета, "ОбычныеВидыДеятельности");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочаяРеализация");
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Реализация.Выручка.ОбычныеВидыДеятельности");
	ДобавитьСлагаемое(СхемаРасчета, "РеализацияПродукцииУслуг");
	ДобавитьОписание(СхемаРасчета,  "02", "1", "011", "Выручка от реализации товаров (работ, услуг) собственного производства");
	ДобавитьСлагаемое(СхемаРасчета, "ПокупныеТовары");
	ДобавитьОписание(СхемаРасчета,  "02", "1", "012", "Выручка от реализации покупных товаров");
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Реализация.Выручка.ОбычныеВидыДеятельности.ПокупныеТовары", Ложь);
	// Следующее слагаемое "альтернативное": не участвует в расчете вышестоящих показателей, поэтому в имени содержит ":".
	// В расчете участвует Доходы.Реализация.Выручка.ОбычныеВидыДеятельности, которое должно давать арифметически тождественный результат,
	// однако из-за особенностей построения декларации не включается ни в декларацию, ни в расшифровки.
	ДобавитьСлагаемое(СхемаРасчета,  "Доходы:ВыручкаОбычныеВидыДеятельности");
	ДобавитьИсточникДанных(СхемаРасчета, "ВыручкаОбычныеВидыДеятельности");
	ДобавитьВычитаемое(СхемаРасчета, "Доходы.Реализация.Выручка.ОбычныеВидыДеятельности.РеализацияПродукцииУслуг");
	// Логика заполнения декларации предписывает обратный порядок: из общей суммы выручки следует вычитать доходы по торговым операциям.
	// Однако, здесь подстраиваемся под имеющиеся в 1С:Бухгалтерии настройки
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Реализация.Выручка.ОбычныеВидыДеятельности.РеализацияПродукцииУслуг");
	ДобавитьСлагаемое(СхемаРасчета,  "ПродукцияПоНастройке");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ВыручкаОбычныеВидыДеятельности");
	ИсточникДанных.ОтборДанных.Раздел = "ПродукцияПоНастройке";
	ДобавитьСлагаемое(СхемаРасчета,  "УслугиБезНастройки");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ВыручкаОбычныеВидыДеятельности");
	ИсточникДанных.ОтборДанных.Раздел = "УслугиБезНастройки";
	
	// За исключением доходов и расходов по операциям, отражаемым в Приложении 3 к Листу 02
	ПрочаяРеализация = Новый Структура;
	// подп. 2.1 п.1 ст. 268
	ПрочаяРеализация.Вставить("ИмущественныеПрава", Новый Массив);
	ПрочаяРеализация.ИмущественныеПрава.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ПрочаяРеализация.ИмущественныеПрава.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	Если НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(КонтекстРасчета.НачалоПериода) Тогда
		// Письмо ФНС от 25 июня 2015 г. N ГД-4-3/11053@
		// "Начиная с первого отчетного периода 2015 года в налоговой декларации по налогу на прибыль организаций ...
		// выручка от реализации права требования долга после наступления срока платежа
		// отражается по строке 013 Приложения 1 к Листу 02,
		// а стоимость реализованного товара (работ, услуг) - по строке 059 Приложения N 2 к Листу 02 налоговой декларации.
		// Таким образом, доходы и расходы от уступки права требования долга после наступления срока платежа
		// учитываются для целей налогообложения независимо от полученного финансового результата."
		ПрочаяРеализация.ИмущественныеПрава.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	КонецЕсли;
	// подп. 2 п.1 ст. 268
	ПрочаяРеализация.Вставить("ПрочееИмущество", Новый Массив);
	ПрочаяРеализация.ПрочееИмущество.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ПрочаяРеализация.ПрочееИмущество.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ПрочаяРеализация.Вставить("ЦенныеБумаги", Новый Массив);
	ПрочаяРеализация.ЦенныеБумаги.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Реализация.Выручка.ПрочаяРеализация");
	// см. также формулу в Доходы.Внереализационные - там перечислены все слагаемые
	// см. также строку 059 в Приложении 2 к Листу 02
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"ИмущественныеПрава",
		"013",
		"Выручка от реализации имущественных прав, кроме учитываемых в особом порядке в Приложении 3 к Листу 02",
		ПрочаяРеализация);
	// см. также строку 060 в Приложении 2 к Листу 02
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"ПрочееИмущество",
		"014",
		"Выручка от реализации прочего имущества",
		ПрочаяРеализация);
	// Налоговым кодексом не урегулирован четко порядок признания доходов и расходов при возврате товаров поставщику.
	// Есть мнение, что при возврате товаров поставщику следует применять правила ст. 268 НК РФ,
	// однако оно не является общепринятым и не поддержано разъяснениями Минфина.
	// Поэтому при возврате товаров поставщику в строке 014 выручка от реализации прочего имущества не отражается,
	// однако в строке 100 могут быть отражены внереализационные доходы или расходы,
	// связанные с различиями в определении цены приобретения возвращаемых товаров
	// (различия между ценой в первичном документе и рассчитанной по правилам п. 8 ст. 254).
	// Другими словами, во внереализационных доходах (расходах) отражается корректировка стоимости ранее выбывших одноименных товаров,
	// уточненная в связи с возвратом части таких товаров поставщику.
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Реализация.ПрочаяРеализация"); // Не включается в показатель "Выручка от реализации" (Доходы.Реализация.Выручка)
	// см. также строку 070 в Приложении 2 к Листу 02
	// см. также формулу в Доходы.Внереализационные - там перечислены все слагаемые
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"ЦенныеБумаги",
		"020",
		"Выручка от реализации ценных бумаг профессиональных участников рынка ценных бумаг",
		ПрочаяРеализация);
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Реализация.ОсобыйПорядокПризнанияУбытков", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.Выручка");// см. Приложение 3 к Листу 02
	
	#КонецОбласти
	
	#Область Внереализационные
	
	ДобавитьРасчет(СхемаРасчета, "Доходы.Внереализационные", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "Доходы.Внереализационные.ПрочиеДоходы");
	ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеДоходы");
	ДобавитьВычитаемое(СхемаРасчета, "Доходы.Реализация.Выручка.ПрочаяРеализация");
	ДобавитьВычитаемое(СхемаРасчета, "Доходы.Реализация.ПрочаяРеализация");
	ДобавитьВычитаемое(СхемаРасчета, "Доходы.Реализация.ОсобыйПорядокПризнанияУбытков");
	
	// Строки 101-107 Приложения 01 расшифровывают строку 100,
	// однако содержат значения только отдельных компонентов внереализационных доходов.
	// То есть, суммарно данные строк 101-107 могут быть меньше, чем строка 100.
	// Поэтому ниже объявляем "альтернативный" показатель, не участвующий в расчете вышестоящих показателей (содержащий ":" в имени).
	// Суть этого показателя: сумма той части внереализационных доходов, по которым налоговые органы хотят получить детальные данные.
	ДобавитьРасчет(СхемаРасчета, "Доходы.Внереализационные:Детализация");
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"ДоходПрошлыхЛет",
		"101",
		"Доход прошлых лет, выявленный в отчетном (налоговом) периоде",
		Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
		
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"ЛиквидацияОсновныхСредств",
		"102",
		"Стоимость имущества, полученного при демонтаже или ликвидации выводимых из эксплуатации основных средств, при ремонте, модернизации, реконструкции и т.п.",
		Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);

	ЗаголовокБезвозмездноПолученные = "Стоимость безвозмездно полученного имущества (имущественных прав)";
	БезвозмездноПолученные = Новый Массив;
	БезвозмездноПолученные.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	
	// В версии декларации 2025 года излишки, выявленные при инвентаризации отражаются в строке 103.
	Если ЭтоРедакцияДекларации2025год(КонтекстРасчета.КонецПериода) Тогда
		ЗаголовокБезвозмездноПолученные = "Стоимость безвозмездно полученного имущества (имущественных прав) и излишков, выявленных в результате инвентаризации";
		БезвозмездноПолученные.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации);
	КонецЕсли;
		
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"БезвозмездноПолученные",
		"103",
		ЗаголовокБезвозмездноПолученные,
		БезвозмездноПолученные);
		
	Если РежимСовместимостиИзлишкиПриИнвентаризации(КонтекстРасчета.КонецПериода) Тогда
		// Вид статья прочих доходов "ИзлишкиПриИнвентаризации" появился не сразу.
		// Ранее излишки могли отражаться по статье с видом ПрочиеВнереализационныеДоходыРасходы.
		// Поэтому в старых периодах, для совместимости, получаем данные по обеим статьям.
		
		ДобавитьСлагаемое(СхемаРасчета, "ИзлишкиПриИнвентаризации");
		ДобавитьОписание(СхемаРасчета, "2", "1", "104", "Стоимость излишков, выявленных в результате инвентаризации");
	
	ИначеЕсли Не ЭтоРедакцияДекларации2025год(КонтекстРасчета.КонецПериода) Тогда
		
		ДобавитьСлагаемоеПрочиеДоходы(
			СхемаРасчета,
			"ИзлишкиПриИнвентаризации",
			"104",
			"Стоимость излишков, выявленных в результате инвентаризации",
			Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации);
	Иначе
	
		ШтрафыПени = Новый Массив;
		ШтрафыПени.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
		ШтрафыПени.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
		
		ДобавитьСлагаемоеПрочиеДоходы(
			СхемаРасчета,
			"ШтрафыПени",
			"104",
			"Штрафы, пени и иные санкции за нарушение договорных или долговых обязательств, суммы возмещения причиненного ущерба",
			ШтрафыПени);
			
	КонецЕсли;
		
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"ВосстановлениеАмортизационнойПремии",
		"105",
		"Сумма восстановленной амортизационной премии (абз. четвертый п. 9 ст. 258 НК РФ)",
		Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии);
	
	// Данных для заполнения строки 106 в программе нет
	
	Если КонтекстРасчета.НачалоПериода < '2017-01-01' Тогда
		
		// Существует неопределенность, с какого периода применяется формат декларации,
		// утвержденный приказом ФНС России от 26.11.2014 N ММВ-7-3/600@.
		// С отчетности за отчетные периоды 2017 года точно применяется новый формат,
		// который не содержит строки 107.
		// В период неопределенности предоставляем в БРО данные для заполнения показателя 107;
		// будет он фактически заполняться или нет, определяется БРО.
		
		ДобавитьСлагаемоеПрочиеДоходы(
			СхемаРасчета,
			"КорректировкаПрибылиДоРыночныхЦен",
			"107",
			"Сумма самостоятельной корректировки прибыли исходя из рыночных цен",
			Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен);
		
	КонецЕсли;
	
	Если РежимСовместимостиИзлишкиПриИнвентаризации(КонтекстРасчета.КонецПериода) Тогда
		
		ДобавитьРасчет(СхемаРасчета, "Доходы.Внереализационные:Детализация.ИзлишкиПриИнвентаризации");
		
		ДобавитьСлагаемое(СхемаРасчета, "ИзлишкиПриИнвентаризации");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеДоходы");
		ИсточникДанных.ОтборДанных.ВидСтатьи = Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации;
		
		ДобавитьСлагаемое(СхемаРасчета, "ПрочиеВнереализационныеДоходыРасходы");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ИзлишкиПриИнвентаризацииДляСовместимости");
		
	КонецЕсли;

	Проценты = Новый Массив;
	Проценты.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	Проценты.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"Проценты",
		"108",
		"Доходы в виде процентов по долговым обязательствам",
		Проценты);
	
	КурсовыеРазницы = Новый Массив;
	КурсовыеРазницы.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	КурсовыеРазницы.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	
	ДобавитьСлагаемоеПрочиеДоходы(
		СхемаРасчета,
		"КурсовыеРазницы",
		"109",
		"Доходы в виде положительной курсовой разницы (пункт 11 статьи 250 Кодекса)",
		КурсовыеРазницы);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область Расходы
	
	ДобавитьРасчет(СхемаРасчета, "Расходы");
	ДобавитьСлагаемое(СхемаРасчета, "ПроизводствоРеализация");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "130", "Расходы, связанные с производством и реализацией"); // Ст. 253
	ДобавитьСлагаемое(СхемаРасчета, "Внереализационные"); // Ст. 265
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация");
	ДобавитьСлагаемое(СхемаРасчета, "Прямые");
	ДобавитьСлагаемое(СхемаРасчета, "Косвенные");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "040", "Косвенные расходы");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочаяРеализация");
	ДобавитьСлагаемое(СхемаРасчета, "ОсобыйПорядокПризнанияУбытков");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные");
	ДобавитьСлагаемое(СхемаРасчета, "Затраты");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "200", "Внереализационные расходы"); // п. 1 ст. 265
	ДобавитьСлагаемое(СхемаРасчета, "Убытки");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "300", "Убытки, приравниваемые к внереализационным расходам"); // п. 2 ст. 265
	
	#Область РасходыПрямые
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые");
	ДобавитьСлагаемое(СхемаРасчета, "РеализацияПродукцииУслуг");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "010", "Прямые расходы, относящиеся к реализованным товарам (продукции), работам, услугам"); // Ст. 318
	ДобавитьСлагаемое(СхемаРасчета, "ТорговыеОперации");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "020", "Прямые расходы по торговым операциям"); // Ст. 320
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.РеализацияПродукцииУслуг", Ложь);
	ДобавитьСлагаемое(СхемаРасчета,  "Расходы:СебестоимостьПродаж");
	ДобавитьИсточникДанных(СхемаРасчета, "ПрямыеРасходы");
	ДобавитьВычитаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации");
	ДобавитьСлагаемое(СхемаРасчета, "ПокупныеТовары");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "030", "Стоимость реализованных покупных товаров");
	ДобавитьСлагаемое(СхемаРасчета, "ТранспортныеРасходы");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары");
	ДобавитьСлагаемое(СхемаРасчета, "ЧерезСклады");
	ДобавитьСлагаемое(СхемаРасчета, "НДСПодлежащийВосстановлению");
	ДобавитьСлагаемое(СхемаРасчета, "Транзитом");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ТранспортныеРасходы");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "КосвенныеРасходы");
	ИсточникДанных.ОтборДанных.Счет        = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу; // в отличие от других косвенных расходов, здесь только один счет
	ИсточникДанных.ОтборДанных.ВидРасходов = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы;
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары.ЧерезСклады");
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.Товары);
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
	
	// Стоимость товаров может быть скорректирована в связи с появлением обязанности восстановить суммы НДС
	// при реализации товаров в рамках деятельности, не облагаемой НДС - ст. 170 НК
	// В учете нельзя различить корректировку при реализации стоимости покупных товаров и стоимости иных запасов
	// Однако, большинство фактов восстановления НДС относятся к торговле покупными товарами,
	// поэтому всю сумму корректировки относим к таким операциям
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары.НДСПодлежащийВосстановлению");
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
	
	// См. Приказ Минсельхоза от 13.06.2001 № 654
	// "организации на счете 90 отражают также операции по продаже товаров транзитом с участием в расчетах за эти товары: 
	// по дебету счета 90 отражают стоимость товаров согласно расчетным документам поставщиков 
	// (в корреспонденции со счетом 60 "Расчеты с поставщиками и подрядчиками").
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары.Транзитом");
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
		
	#КонецОбласти
	
	#Область РасходыКосвенные
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные", Ложь);
	ДобавитьСлагаемое(СхемаРасчета,  "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности");
	ДобавитьВычитаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ТранспортныеРасходы");
	ДобавитьСлагаемое(СхемаРасчета,  "Расходы.ПроизводствоРеализация.Косвенные.Прочие");
	
	// Косвенные.ОбычныеВидыДеятельности
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности");
	Для Каждого Счет Из СчетаКосвенныхРасходов() Цикл
		ДобавитьСлагаемое(СхемаРасчета, Счет.ИмяПредопределенныхДанных);
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "КосвенныеРасходы");
		ИсточникДанных.ОтборДанных.Счет = Счет;
	КонецЦикла;
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие");
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.СтраховыеВзносы);
	ДобавитьСлагаемое(СхемаРасчета, "АмортизационнаяПремия.НеБолее10");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "042", "Расходы на капитальные вложения в соответствии с абз. вторым пункта 9 ст. 258 (""амортизационная премия"") - не более 10%");
	ДобавитьСлагаемое(СхемаРасчета, "АмортизационнаяПремия.НеБолее30");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "043", "Расходы на капитальные вложения в соответствии с абз. вторым пункта 9 ст. 258 (""амортизационная премия"") - не более 30%");
	
	Если ЭтоРедакцияДекларации2025год(КонтекстРасчета.КонецПериода) Тогда
		ДобавитьСлагаемое(СхемаРасчета, "ПриобретениеКомпьютерныхЛицензийСПрименениемПовышающегоКоэффициента");
		ДобавитьОписание(СхемаРасчета,  "02", "2", "045", "Расходы, учтенные в отчетном (налоговом) периоде с применением повышающего коэффициента в соответствии с подпунктом 26 пункта 1 статьи 264 Кодекса");
	КонецЕсли;
	
	ДобавитьСлагаемое(СхемаРасчета, "ИсследованияРазработки");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "052", "Расходы на НИОКР");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.АмортизационнаяПремия.Всего");
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.АмортизационнаяПремия);
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.АмортизационнаяПремия.НеБолее30", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.АмортизационнаяПремия.Всего");
	ДобавитьВычитаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.АмортизационнаяПремия.НеБолее10");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "КапитальныеВложения");
	ИсточникДанных.ОтборДанных.ВерхнийЛимитПроцента = 10;
	
	Если ЭтоРедакцияДекларации2025год(КонтекстРасчета.КонецПериода) Тогда
		ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.ПриобретениеКомпьютерныхЛицензийСПрименениемПовышающегоКоэффициента");
		ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.РасходыНаКомпьютерныеЛицензииСПовышающимКоэффициентом);
	КонецЕсли;
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.ИсследованияРазработки");
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.НИОКР);
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "054", "Расходы на НИОКР в соответствии с п. 7 ст. 262 (по перечню, установленному Правительством)");
	
	// Косвенные.Прочие
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.Прочие");
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	
	// Косвенные.НалогиИСборы
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.НалогиИСборы", Ложь);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "041", "Суммы налогов и сборов, за исключением перечисленных в ст. 270");
	ДобавитьСлагаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.НалогиИСборы");
	Если КонтекстРасчета.НачалоПериода >= УчетСтраховыхВзносов.ДатаПередачиАдминистрированияВзносовФНС() Тогда
		// В соответствии с Приказом ФНС России от 19.10.2016 N ММВ-7-3/572@
		// в строке 041 отражаются, в том числе, суммы страховых взносов, установленных законодательством о налогах и сборах.
		// До перехода администрирования страховых взносов в ФНС они не были установлены законодательством о налогах и сборах.
		ДобавитьСлагаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.СтраховыеВзносы");
	КонецЕсли;
	ДобавитьСлагаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.Прочие.НалогиИСборы");
	
	#КонецОбласти
	
	#Область РасходыПрочаяРеализация
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ПрочаяРеализация");
	ДобавитьСлагаемое(СхемаРасчета, "ИмущественныеПрава"); // см. также строку 013 в Приложении 1 к Листу 02
	ДобавитьОписание(СхемаРасчета, "02", "2", "059", "Стоимость реализованных имущественных прав, кроме учитываемых в особом порядке в Приложении 3 к Листу 02");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочееИмущество");    // см. также строку 014 в Приложении 1 к Листу 02
	ДобавитьОписание(СхемаРасчета, "02", "2", "060", "Цена приобретения реализованного прочего имущества и расходы, связанные с его реализацией");// подп. 2 п.1 ст. 268
	ДобавитьСлагаемое(СхемаРасчета, "ЦенныеБумаги");       // см. также строку 020 в Приложении 1 к Листу 02
	ДобавитьОписание(СхемаРасчета, "02", "2", "070", "Расходы профессиональных участников рынка ценных бумаг, связанные с реализацией ценных бумаг");
	






	Для Каждого ВидРеализуемогоАктива Из ПрочаяРеализация Цикл
		ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ПрочаяРеализация." + ВидРеализуемогоАктива.Ключ);
		Для Каждого ВидСтатьи Из ВидРеализуемогоАктива.Значение Цикл
			ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, ВидСтатьи);
		КонецЦикла;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область РасходыОсобыйПорядокПризнанияУбытков
	// См. также ПрочиеУбытки
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ОсобыйПорядокПризнанияУбытков");
	ДобавитьСлагаемое(СхемаРасчета, "РасходыТекущегоПериода");   // расходы по операциям, убытки по которым не признаются для целей налогообложения в текущем периоде, но могут быть частично признаны в следующих периодах в составе УбыткиПредыдущихПериодов
	ДобавитьОписание(СхемаРасчета,  "02", "2", "080", "Расходы по операциям, отраженным в Приложении 3 к Листу 02");
	ДобавитьСлагаемое(СхемаРасчета, "УбыткиПредыдущихПериодов"); // в предыдущих периодах соответствующие операции были отражены в составе РасходыТекущегоПериода
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ОсобыйПорядокПризнанияУбытков.РасходыТекущегоПериода", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.Расходы");// см. Приложение 3 к Листу 02
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ОсобыйПорядокПризнанияУбытков.УбыткиПредыдущихПериодов");
	ДобавитьСлагаемое(СхемаРасчета, "ОбслуживающиеПроизводства");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "090", "Сумма убытка обслуживающих производств и хозяйств, признаваемая расходами текущего периода");
	ДобавитьСлагаемое(СхемаРасчета, "РеализацияАмортизируемогоИмущества");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "100", "Сумма убытка от реализации амортизируемого имущества, признаваемая расходами текущего периода");
	
	// Для исключения преждевременного округления, ранее рассчитанные значения расходов не используем непосредственно
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ОсобыйПорядокПризнанияУбытков.УбыткиПредыдущихПериодов.ОбслуживающиеПроизводства", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.ОбслуживающиеПроизводства.Расходы.ПризнанныеПослеПолученияУбытка");// ст. 275.1
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ОсобыйПорядокПризнанияУбытков.УбыткиПредыдущихПериодов.РеализацияАмортизируемогоИмущества", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы.ПризнанныеПослеРеализации");//п.3 ст. 268
	
	#КонецОбласти
	
	#Область РасходыВнереализационные
	
	// Расходы.Внереализационные.Затраты
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Затраты");
	
	// подп. 1 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	// подп. 2 п. 1 ст. 265 - см. также Расходы.Внереализационные.Затраты.Проценты
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	// подп. 5 и 6 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	// подп. 7 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	// подп. 8 п. 1 ст. 265 - см. также Расходы.Внереализационные.Затраты.РасходыНаЛиквидациюОсновныхСредств
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	// подп. 13 п. 1 ст. 265 - см. также Расходы.Внереализационные.Затраты.Нарушения
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	// подп. 14 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	// подп. 15 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	// подп. 18 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	// подп. 19.1 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	// Подп. 20 п. 1 ст. 265
	// - классификация для целей, связанных с налогом на прибыль.
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	// - классификация для целей, не связанных с налогом на прибыль
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	// - статьи доходов, приведенные для полноты списка
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен);
	// - пустая статья
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеРасходыПоПустойСтатье");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
	ИсточникДанных.ОтборДанных.ВидСтатьи = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка();
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Затраты.Проценты");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "201", "Проценты по долговым обязательствам (кредитам, займам, ценным бумагам, в связи с реструктуризацией задолженности по налогам и др.)"); 
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ДобавитьОписание(СхемаРасчета, , , , "Проценты, признаваемые исходя из фактических ставок"); 
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);

	Если ЭтоРедакцияДекларации2025год(КонтекстРасчета.КонецПериода) Тогда
		ДобавитьОписание(СхемаРасчета, "02", "2", "202", "Проценты, возникшие в результате контролируемых сделок - признаются в пределах лимитов, установленных ст. 269");
	Иначе
		ДобавитьОписание(СхемаРасчета, , , , "Проценты, возникшие в результате контролируемых сделок - признаются в пределах лимитов, установленных ст. 269");
	КонецЕсли;
		
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Затраты.РасходыНаЛиквидациюОсновныхСредств");
	ДобавитьОписание(СхемаРасчета, "02", "2", "204", "Расходы на ликвидацию выводимых из эксплуатации основных средств, списание нематериальных активов, демонтаж, разборку, вывоз разобранного имущества, охрану недр и т.п.");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
	ИсточникДанных.ОтборДанных.ВидСтатьи = Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств;
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Затраты.Нарушения");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "205", "Штрафы, пени и иные санкции за нарушение договорных или долговых обязательств, расходы на возмещение причиненного ущерба"); 
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ДобавитьОписание(СхемаРасчета, , , , "Штрафы, пени и иные санкции за нарушение договорных или долговых обязательств"); 
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	ДобавитьОписание(СхемаРасчета, , , , "Расходы на возмещение причиненного ущерба"); 
	
	Если ЭтоРедакцияДекларации2025год(КонтекстРасчета.КонецПериода) Тогда
		ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Затраты.ОтрицательнаяКурсоваяРазница");
		ДобавитьОписание(СхемаРасчета,  "02", "2", "208", "Расходы в виде отрицательной курсовой разницы (подпункт 5 пункта 1 статьи 265 Кодекса)"); 
		ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
		ДобавитьОписание(СхемаРасчета, , , , "Курсовые разницы"); 
		ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
		ДобавитьОписание(СхемаРасчета, , , , "Курсовые разницы по расчетам в у.е."); 
	КонецЕсли;
		
	// Расходы.Внереализационные.Убытки
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Убытки");
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "301", "Убытки прошлых налоговых периодов, выявленные в отчетном периоде"); // подп. 1 п. 2 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "302", "Суммы безнадежных долгов"); // подп. 2 п. 2 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам); // подп. 3-7 п. 2 ст. 265
	
	#КонецОбласти
	
	#Область Амортизация
	
	// По строкам 131 - 134 отражается сумма начисленной амортизации за отчетный период
	// По строке 135 указывается метод начисления амортизации, отраженный в учетной политике для целей налогообложения.
	// Показатели этой группы строк приводятся справочно: не участвуют в расчете суммы налога.
	
	// Данные об амортизации в декларации детализируются по двум основаниям:
	// 1. виду актива - ОсновныеСредства, НематериальныеАктивы
	// 2. методу амортизации - Линейный, Нелинейный.
	// Для показателей первого вида используется разделитель ".", второго - ":".
	
	// Порядок расчета существенно отличается в зависимости от выбранного метода амортизации
	МетодАмортизации = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(КонтекстРасчета.Организация, КонтекстРасчета.КонецПериода);
	
	ДобавитьРасчет(СхемаРасчета, "Амортизация");
	
	ДобавитьСлагаемое(СхемаРасчета, "ОсновныеСредства");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "Амортизация");
	ИсточникДанных.ОтборДанных.ВидАктива = "ОсновныеСредства";
	
	ДобавитьСлагаемое(СхемаРасчета, "НематериальныеАктивы");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "Амортизация");
	ИсточникДанных.ОтборДанных.ВидАктива = "НематериальныеАктивы";
	
	ДобавитьРасчет(СхемаРасчета, "Амортизация:ЛинейныйМетод");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "131", "Сумма амортизации, начисленная линейным методом");
	
	ДобавитьРасчет(СхемаРасчета, "Амортизация:ЛинейныйМетод.НематериальныеАктивы");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "132", "Сумма амортизации по нематериальным активам, начисленная линейным методом");
	
	ДобавитьРасчет(СхемаРасчета, "Амортизация:НелинейныйМетод");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "133", "Сумма амортизации, начисленная нелинейным методом");
	
	ДобавитьРасчет(СхемаРасчета, "Амортизация:НелинейныйМетод.НематериальныеАктивы");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "134", "Сумма амортизации по нематериальным активам, начисленная нелинейным методом");
	
	ДобавитьРасчет(СхемаРасчета, "Амортизация:МетодАмортизации");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "135", "Метод начисления амортизации, отраженный в учетной политике");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "МетодАмортизации");
	ИсточникДанных.ОтборДанных.МетодАмортизации = МетодАмортизации;
	
	Если МетодАмортизации <> Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
		
		ДобавитьРасчет(СхемаРасчета, "Амортизация:ЛинейныйМетод", Ложь);
		ДобавитьСлагаемое(СхемаРасчета, "Амортизация");
		
		ДобавитьРасчет(СхемаРасчета, "Амортизация:ЛинейныйМетод.НематериальныеАктивы", Ложь);
		ДобавитьСлагаемое(СхемаРасчета, "Амортизация.НематериальныеАктивы");
		
	Иначе
		
		// При нелинейном методе есть исключение: по отдельным объектам начисление амортизации выполняется линейным методом - см. ИсключенияНелинейногоМетода
		ДобавитьРасчет(СхемаРасчета, "Амортизация:НелинейныйМетод", Ложь);
		ДобавитьСлагаемое(СхемаРасчета, "Амортизация");
		ДобавитьВычитаемое(СхемаРасчета, "Амортизация:ЛинейныйМетод");
		
		ДобавитьРасчет(СхемаРасчета, "Амортизация:НелинейныйМетод.НематериальныеАктивы", Ложь);
		ДобавитьСлагаемое(СхемаРасчета, "Амортизация.НематериальныеАктивы");
		ДобавитьВычитаемое(СхемаРасчета, "Амортизация:ЛинейныйМетод.НематериальныеАктивы");
		
		ДобавитьРасчет(СхемаРасчета, "Амортизация:ЛинейныйМетод");
		
		ДобавитьСлагаемое(СхемаРасчета, "ОсновныеСредства");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "Амортизация");
		ИсточникДанных.ОтборДанных.ВидАктива                   = "ОсновныеСредства";
		ИсточникДанных.ОтборДанных.ИсключенияНелинейногоМетода = Истина;
	
		ДобавитьСлагаемое(СхемаРасчета, "НематериальныеАктивы");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "Амортизация");
		ИсточникДанных.ОтборДанных.ВидАктива                   = "НематериальныеАктивы";
		ИсточникДанных.ОтборДанных.ИсключенияНелинейногоМетода = Истина;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ПрочиеУбытки
	
	// Прочими убытками называем те, которые для целей налогообложения учитываются с учетом ограничений,
	// установленных ст. 268, 275.1, 276, 279, 323.
	// Прочими мы их называем потому, что соответствующие доходы и расходы отражаются на счете 91.
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.НеПризнаютсяДляЦелейНалогообложения", Ложь);
	ДобавитьОписание(СхемаРасчета, "02", "3", "360", "Убытки по операциям, отраженным в Приложении 3 Листа 02");
	
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества");
	ДобавитьОписание(СхемаРасчета, "02", "3", "060", "Убытки от реализации амортизируемого имущества", "Убыток"); // п. 9 ст. 262, ст. 268, ст. 323
	
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ДоСрокаПлатежа");
	ДобавитьОписание(СхемаРасчета, "02", "3", "150", "Убыток от реализации права требования долга до наступления срока платежа", "Убыток"); // п. 1 ст. 279 НК
	
	Если Не НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(КонтекстРасчета.НачалоПериода) Тогда
		ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа");
		ДобавитьОписание(СхемаРасчета, "02", "3", "160", "Убыток от реализации права требования долга после наступления срока платежа", "Убыток"); // п. 2 ст. 279 НК
	КонецЕсли;
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.ОбслуживающиеПроизводства"); // Не включается в расчет строки 360
	ДобавитьОписание(СхемаРасчета, "02", "3", "200", "Убытки обслуживающих производств и хозяйств", "Убыток"); // ст. 275.1
	
	// Убыток от реализации некоторого имущества не учитывается для целей налогообложения - ст. 262 (пункт 9).
	// 
	// В тех случаях, когда учитывается, то п. 3. ст. 268:
	// "Полученный убыток включается в состав прочих расходов налогоплательщика равными долями в течение срока, 
	// определяемого как разница между сроком полезного использования этого имущества и фактическим сроком его 
	// эксплуатации до момента реализации.".
	//
	// Включение в состав прочих расходов отражается по строке 100 приложения 2 к листу 02.
	//
	// А в периоде получения убытка он исключается из расчета налогооблагаемой базы (ст. 323) 
	// и отражается в приложении 3 к листу 02 в следующем порядке:
	// "Налогоплательщик определяет прибыль (убыток) от реализации или выбытия амортизируемого имущества 
	// на основании аналитического учета по каждому объекту на дату признания дохода (расхода)".
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "Убыток"); // Рассчитывается по каждому объекту обособленно как "Выручка минус Расходы.ПриРеализации"
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.КоличествоВсего");
	ДобавитьОписание(СхемаРасчета,  "02", "3", "010", "Количество реализованных объектов амортизируемого имущества");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "КоличествоВсего");
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.КоличествоУбыток");
	ДобавитьОписание(СхемаРасчета,  "02", "3", "020", "Количество объектов амортизируемого имущества, реализованных с убытком");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "КоличествоУбыток");
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Выручка");
	ДобавитьОписание(СхемаРасчета,  "02", "3", "030", "Выручка от реализации амортизируемого имущества");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "Выручка");

	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы");
	ДобавитьОписание(СхемаРасчета,  "02", "3", "040", "Расходы, связанные с реализацией амортизируемого имущества (включая остаточную стоимость)");
	// см. также ДобавитьРасчетПрочегоУбытка()
	ДобавитьСлагаемое(СхемаРасчета, "ВключаяПризнанныеПослеРеализации");
	ДобавитьВычитаемое(СхемаРасчета, "ПризнанныеПослеРеализации");
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы.ВключаяПризнанныеПослеРеализации");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "Расходы");
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы.ПризнанныеПослеРеализации");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "РасходыПослеРеализации");
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Прибыль", Ложь);
	ДобавитьОписание(СхемаРасчета,  "02", "3", "050", "Прибыль от реализации амортизируемого имущества");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Выручка");
	ДобавитьВычитаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества");
	
	// П.1 ст. 279 НК
	// Уступка продавцом права требования до наступления срока платежа.
	// Убыток от такой реализации для целей налогообложения признается только в пределах,
	// суммы процентов, которые налогоплательщик уплатил бы исходя из ставки процента, определенной в соответствии с п. 1
	// ст. 279. С 2015 года п. 1 ст. 279 предоставляет выбор налогоплательщику, как определять эту ставку:
	// - либо исходя из публикуемых индексных ставок (п. 1.2 ст. 269)
	// - либо методами, установленными разделом V.1
	// Таким образом, для расчета этого предела в программе нет данных.
	// Здесь рассчитаем только общую сумму убытка и осторожно не признаем ее для целей налогообложения.
	
	ДобавитьРасчетПрочегоУбытка(
		СхемаРасчета,
		"ПрочиеУбытки.УступкаПраваТребования.ДоСрокаПлатежа",
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа,
		"100", "Выручка от реализации права требования долга до наступления срока платежа",
		"120", "Стоимость реализованного права требования долга до наступления срока платежа");
	
	// п.2 ст. 279 НК
	
	// Уступка продавцом права требования после наступления срока платежа.
	// До 2015 года убыток от такой операции принимался в целях налогообложения в следующем порядке:
	// - 50 процентов от суммы убытка подлежат включению в состав внереализационных расходов на дату уступки права требования;
	// - 50 процентов от суммы убытка подлежат включению в состав внереализационных расходов по истечении 45 календарных дней 
	//   с даты уступки права требования.
	// Расчет "старения" суммы убытка в программе не реализован,
	// поэтому всю сумму убытка осторожно не признаем в составе внереализационных расходов текущего периода.
	
	Если Не НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(КонтекстРасчета.НачалоПериода) Тогда
		
		// См. также "Расходы.ПроизводствоРеализация.ПрочаяРеализация.ИмущественныеПрава"
		
		ДобавитьРасчетПрочегоУбытка(
			СхемаРасчета,
			"ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа",
			Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа,
			"110", "Выручка от реализации права требования долга после наступления срока платежа",
			"130", "Стоимость реализованного права требования долга	после наступления срока платежа");
			
	КонецЕсли;
			
	// Ст. 275.1
	// Убыток от деятельности, связанной с использованием объектов обслуживающих производств и хозяйств
	// признается для целей налогообложения при соблюдении ряда условий.
	// Если не выполняется хотя бы одно из этих условий,
	// то налогоплательщик вправе перенести убыток на срок, не превышающий десять лет,
	// и направить на его погашение только прибыль, полученную при осуществлении указанных видов деятельности.
	// Здесь рассчитываем только полную сумму убытка, так как не можем определить, выполняются ли эти условия.
	
	ДобавитьРасчетПрочегоУбытка(
		СхемаРасчета,
		"ПрочиеУбытки.ОбслуживающиеПроизводства",
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств,
		"180", "Выручка обслуживающих производств и хозяйств",
		"190", "Расходы обслуживающих производств и хозяйств",
		Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств);
	
	// Итоги по выручке и расходам
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.Выручка", Ложь);
	ДобавитьОписание(СхемаРасчета, "02", "3", "340", "Выручка по операциям, отраженным в Приложении 3 к Листу 02");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Выручка");           // 030
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ДоСрокаПлатежа.Выручка");        // 100
	Если Не НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(КонтекстРасчета.НачалоПериода) Тогда
		ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа.Выручка"); // 110
	КонецЕсли;
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.ОбслуживающиеПроизводства.Выручка");                    // 180
	//210-211
	//240
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.Расходы", Ложь);
	ДобавитьОписание(СхемаРасчета, "02", "3", "350", "Расходы по операциям, отраженным в Приложении 3 к Листу 02");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы");               // 040
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ДоСрокаПлатежа.Расходы");            // 120
	Если Не НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(КонтекстРасчета.НачалоПериода) Тогда
		ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа.Расходы");     // 130
	КонецЕсли;
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.ОбслуживающиеПроизводства.Расходы");                        // 190
	//220-221
	//250
	
	#КонецОбласти
	
	#Область УбыткиПрошлыхЛет
	// Приложение 4 к Листу 02, ст. 283 НК РФ

	
	ДобавитьРасчет(СхемаРасчета, "УбыткиПрошлыхЛет");
	ДобавитьОписание(СхемаРасчета, "02", "4", "010", "Остаток неперенесенного убытка на начало налогового периода");
	
	// Расшифровка суммы убытка по периодам образования приводится в списке,
	// см. описание элемента ОстУбытНачПерГод в формате декларации - Приказ ФНС России от 23.09.2019 N ММВ-7-3/475@
	СписокУбыткиПрошлыхЛет = ДобавитьСписок(СхемаРасчета, "УбыткиПрошлыхЛет.ПериодыОбразования", "02", "4", "ОстУбытНачПерГод");
	
	ДобавитьКолонкуСписка(
		СписокУбыткиПрошлыхЛет,
		"ВариантНО",
		"",
		"Вариант налогообложения прибыли, к которому относится убыток",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	
	ДобавитьКолонкуСписка(
		СписокУбыткиПрошлыхЛет,
		"ПериодВозникновения",
		"",
		"Год образования убытка",
		Новый ОписаниеТипов("Дата"));
		
	ДобавитьКолонкуСписка(
		СписокУбыткиПрошлыхЛет,
		"НомерГодаСтрокой",
		"Год",
		"Год образования убытка",
		Новый ОписаниеТипов("Строка"));
		
	ДобавитьКолонкуСписка(
		СписокУбыткиПрошлыхЛет,
		"НомерГодаЧислом",
		"",
		"Год образования убытка");// См. ЗаписатьНомерГода
		
	ДобавитьКолонкуСписка(
		СписокУбыткиПрошлыхЛет,
		"Сумма",
		"ОстУбыт",
		"Остаток неперенесенного убытка на начало налогового периода, по годам образования");
	
	ДобавитьСлагаемое(СхемаРасчета, "ПериодыОбразования");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ДанныеСписка");
	ИсточникДанных.ОтборДанных.Список     = "УбыткиПрошлыхЛет.ПериодыОбразования";
	ИсточникДанных.ОтборДанных.Показатель = "Сумма";
	
	// Форма предусматривает ровно 10 строк для детализации суммы остатка по периодам образования - 040..130 с шагом 10
	НомерПервойСтроки = 40;
	КоличествоСтрок   = 10;
	ШагКодовСтрок     = 10;
	ДлинаКодаСтроки   = 3; // дополняется нулями слева
	
	// Непоместившиеся строки включаем в первую, так как порядок заполнения запрещает помещать в последнюю
	КудаДетьНепоместившиесяСтроки = 0;
	
	ШаблонСуммаУбытка = "УбыткиПрошлыхЛет.ПериодыОбразования.Сумма.%1";
	ШаблонНомерГода   = "УбыткиПрошлыхЛет.ПериодыОбразования.НомерГода.%1";
	СуффиксСлужебногоНомераСтрокГода = "01";
	
	Для ИндексПериода = 0 По КоличествоСтрок - 1 Цикл
		
		ИдентификаторПериода = XMLСтрока(ИндексПериода);
		ИмяСуммаУбытка = СтрШаблон(ШаблонСуммаУбытка, ИдентификаторПериода);
		ИмяНомерГода   = СтрШаблон(ШаблонНомерГода,   ИдентификаторПериода);
		
		ЧисловойНомерСтроки = НомерПервойСтроки + ИндексПериода * ШагКодовСтрок;
		НомерСтроки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(XMLСтрока(ЧисловойНомерСтроки), ДлинаКодаСтроки, "0");
		
		ДобавитьРасчет(СхемаРасчета, ИмяСуммаУбытка);
		ДобавитьОписание(СхемаРасчета, "02", "4", НомерСтроки, "Остаток неперенесенного убытка на начало налогового периода, по годам образования");
		
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ДанныеСписка");
		ИсточникДанных.ОтборДанных.Список          = "УбыткиПрошлыхЛет.ПериодыОбразования";
		ИсточникДанных.ОтборДанных.Показатель      = "Сумма";
		ИсточникДанных.ОтборДанных.ИндексСтроки    = ИндексПериода;
		Если ИндексПериода = КудаДетьНепоместившиесяСтроки Тогда
			ИсточникДанных.ОтборДанных.НепоместившиесяСтроки = КоличествоСтрок;
		КонецЕсли;
		
		ДобавитьРасчет(СхемаРасчета, ИмяНомерГода);
		СлужебныйНомерСтроки = НомерСтроки + СуффиксСлужебногоНомераСтрокГода;
		ДобавитьОписание(СхемаРасчета, "02", "4", "", "Год образования убытка", "НомерГода", СлужебныйНомерСтроки);
		
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ДанныеСписка");
		ИсточникДанных.ОтборДанных.Список          = "УбыткиПрошлыхЛет.ПериодыОбразования";
		ИсточникДанных.ОтборДанных.Показатель      = "НомерГодаЧислом";
		ИсточникДанных.ОтборДанных.ИндексСтроки    = ИндексПериода;
		Если ИндексПериода = КудаДетьНепоместившиесяСтроки Тогда
			ИсточникДанных.ОтборДанных.НепоместившиесяСтроки = КоличествоСтрок;
		КонецЕсли;
		
	КонецЦикла;
		
	ДобавитьРасчет(СхемаРасчета, "УбыткиПрошлыхЛет.НалоговаяБазаОтчетногоПериода", Ложь);
	ДобавитьОписание(СхемаРасчета, "02", "4", "140", "Налоговая база за отчетный период", "ВторичныеДанные");
	ДобавитьСлагаемое(СхемаРасчета,  "Прибыль");
	
	ДобавитьРасчет(СхемаРасчета, "УбыткиПрошлыхЛет.НаТекущийПериод");
	ДобавитьОписание(СхемаРасчета, "02", "4", "150", "Сумма убытка, уменьшающего налоговую базу за отчетный период");
	ДобавитьИсточникДанных(СхемаРасчета, "ПереносУбытковПрошлыхЛет");
	
	Если КонтекстРасчета.КонецПериода = КонецГода(КонтекстРасчета.КонецПериода) Тогда
		// Перенос на будущий период выполняется по итогам налогового периода:
		// 9.5. Строки 160, 161 заполняются при составлении Декларации за налоговый период.
		ДобавитьРасчет(СхемаРасчета, "УбыткиПрошлыхЛет.НаБудущийПериод", Ложь);
		ДобавитьОписание(СхемаРасчета, "02", "4", "160", "Остаток неперенесенного убытка на конец налогового периода");
		ДобавитьСлагаемое(СхемаРасчета,  "УбыткиПрошлыхЛет");
		ДобавитьВычитаемое(СхемаРасчета, "УбыткиПрошлыхЛет.НаТекущийПериод");
		ДобавитьСлагаемое(СхемаРасчета,  "Убыток"); // убыток текущего периода
	КонецЕсли;
	
	#КонецОбласти
	
	// Дополнительные показатели, которые не участвуют в расчете суммы налога, но нужны в декларации,
	// см. в ОписаниеФормыРасчетаРаспределенияНалога()
	
	// АПК:1297-вкл - это комментарий разметки кода. См. комментарий с таким же номером в начале процедуры.
	
	Возврат СхемаРасчета;
	
КонецФункции

#КонецОбласти

#Область РедакцииФормыДекларации

// Описывает состав декларации: какие листы (приложения) включаются в текущем периоде,
// в т.ч. в зависимости от наличия в них данных
//
// Параметры:
//  КонтекстРасчета - см. НовыйКонтекстРасчета - контекст, в котором рассчитывается налог (организация, период и т.п.)
//
// Возвращаемое значение:
//  см. НовыйСоставДекларации
//
Функция СоставДекларации(КонтекстРасчета)
	
	СоставДекларации = НовыйСоставДекларации();
	
	// Порядок заполнения декларации - приказ ФНС от 19 октября 2016 г. N ММВ-7-3/572@
	//
	// 1.1. В состав Декларации обязательно включаются ... Лист 02,Приложения N 1 и N 2 к Листу 02, если иное не установлено настоящим Порядком.
	//      Приложение N 4 к Листу 02 включается в состав Декларации только за I квартал и налоговый период.
	//
	// 1.3. Организации, уплачивающие авансовые платежи ежемесячно, исходя из фактически полученной прибыли нарастающим итогом с начала года,
	//      представляют Декларации в указанном в пункте 1.1 настоящего Порядка объеме за отчетный период (I квартал, полугодие, 9 месяцев)
	//      и налоговый период (год).
	//      По итогам других отчетных периодов (за месяц, два, четыре, пять, семь, восемь, десять и одиннадцать месяцев)
	//      такие организации представляют Декларацию в объеме ... Листа 02.
	//      При ... наличии обособленных подразделений в состав Деклараций включаются ... Приложение N 5 к Листу 02
	
	ДобавитьПриложение(СоставДекларации, "02", "",  Истина);
	ДобавитьПриложение(СоставДекларации, "02", "5", Ложь);
	
	Если ЗначениеЗаполнено(КонтекстРасчета.НомерКвартала) Тогда
		
		ДобавитьПриложение(СоставДекларации, "02", "1", Истина);
		ДобавитьПриложение(СоставДекларации, "02", "2", Истина);
		ДобавитьПриложение(СоставДекларации, "02", "3", Ложь);
		
		Если КонтекстРасчета.НомерКвартала = 1 Или КонтекстРасчета.НомерКвартала = 4 Тогда
			ДобавитьПриложение(СоставДекларации, "02", "4", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоставДекларации;
	
КонецФункции

// Составляет перечень показателей, размещенных в форме декларации, 
// с указанием актуальных для редакции этой декларации номеров строк.
//
// Параметры:
//  ИмяРедакции  - Строка - Имя редакции отчета в терминах БРО
//  СхемаРасчета - см. СхемаРасчета() - схема, на основании которой составляется описание
// Возвращаемое значение:
//  см. НовыйОписаниеФормыОтчета().
//
Функция ОписаниеФормыОтчета(ИмяРедакции, СхемаРасчета)
	
	// Поддерживаются редакции КНД 1151006:
	// 1. ФНС РФ, приказ № ММВ-7-3/600@ от 26 ноября 2014 г.                     - "ФормаОтчета2015Кв1"
	// 2. ФНС РФ, приказ N ММВ-7-3/174@ от 22 марта 2012 г. в ред. от 14.11.2013 - "ФормаОтчета2013Кв4".
	// 3. ФНС РФ, приказ N ММВ-7-3/475@ от 23.09.2019                            - "ФормаОтчета2019Кв4"
	// 4. ФНС РФ, приказ N ЕД-7-3/830@  от 02.10.2025                            - "ФормаОтчета2025Кв1"
	//
	// См. также РегламентированныйОтчетПрибыль.НомерЯчейки
	
	ОписаниеФормыОтчета = НовыйОписаниеФормыОтчета();
	
	Для Каждого Показатель Из СхемаРасчета.Показатели Цикл
		Если ЗначениеЗаполнено(Показатель.НомерСтроки) Или ЗначениеЗаполнено(Показатель.СлужебныйНомерСтроки) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеФормыОтчета.Добавить(), Показатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Список Из СхемаРасчета.Списки Цикл
		
		Если Не ЗначениеЗаполнено(Список.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КолонкаСписка Из Список.Колонки Цикл
			
			Если Не ЗначениеЗаполнено(КолонкаСписка.Значение.ИмяФНС) Тогда
				Продолжить;
			КонецЕсли;
			
			Показатель = ОписаниеФормыОтчета.Добавить();
			ЗаполнитьЗначенияСвойств(Показатель, Список);
			Показатель.ОсобенностьПредставления = "Список";
			Показатель.Имя = ИмяПоказателяКолонкаСписка(Список.Имя, КолонкаСписка.Ключ);
			
			Показатель.СлужебныйНомерСтроки = РегламентированныйОтчетПрибыль.СлужебныйНомерКолонкиМногострочнойЧасти(
				Список.КодФНС,
				КолонкаСписка.Значение.ИмяФНС,
				ИмяРедакции);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Префикс = ПрефиксИмениРаспределениеНалога();
	Для Каждого Показатель Из ОписаниеФормыРасчетаРаспределенияНалога(СхемаРасчета.КонтекстРасчета, ИмяРедакции) Цикл
		НоваяСтрока = ОписаниеФормыОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Показатель);
		// При помещении в общую коллекцию дополним имя префиксом
		НоваяСтрока.Имя = Префикс + НоваяСтрока.Имя;
	КонецЦикла;
	
	ОписаниеФормыОтчета.Индексы.Добавить("Имя");
	
	Возврат ОписаниеФормыОтчета;
	
КонецФункции

Функция РежимСовместимостиИзлишкиПриИнвентаризации(Период)
	
	Возврат Период < '2019-01-01';
	
КонецФункции

// С 1 января 2025 года в декларацию вносятся изменения Приказом ФНС России от 02.10.2024 N ЕД-7-3/830@ "Об утверждении формы,
// порядка заполнения (представления) и формата представления в электронной форме налоговой декларации по налогу на прибыль
// организаций, а также о внесении изменений в приложение к приказу ФНС России от 29.02.2024 N ЕД-7-3/164@".
// Изменения, в частности, касаются заполнения строк 103, 104, 108, 109 Приложения №1 к Листу 02, строки 208 Приложения №2 к Листу 02.
//
Функция ЭтоРедакцияДекларации2025год(Период)
	Возврат Период > '2025-01-01';
КонецФункции

#КонецОбласти

#Область ЭтапыРасчета

Функция ЭтапыРасчета(ПрименяютсяСпециальныеРежимы)
	
	// Для лучшей иллюстративности расчета, каждый показатель рассчитываем в следующем порядке:
	// - сначала берем полную сумму, отраженную для показателя, скажем оборот по счету 91 по определенным статьям
	// - затем вычитаем
	// -- 1. не учитываемые для целей исчисления налога на прибыль
	// -- 2. относящиеся к специальным режимам налогообложения
	// -- 3. часть распределяемых (для расходов).
	
	ЭтапыРасчета = Новый Массив;
	ЭтапыРасчета.Добавить("Все");
	ЭтапыРасчета.Добавить("НеУчитываемые");
	Если ПрименяютсяСпециальныеРежимы Тогда
		ЭтапыРасчета.Добавить("ОтнесенныеНаСпециальныеРежимы");
		ЭтапыРасчета.Добавить("РаспределенныеНаСпециальныеРежимы");
	КонецЕсли;
	
	Возврат ЭтапыРасчета;
	
КонецФункции

Функция ЭтапРасчетаСпециальныеРежимы(ЭтапРасчета)
	
	Возврат ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Или ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы";
	
КонецФункции

Функция ОператорЭтапаРасчета(ЭтапРасчета)
	
	// См. комментарий в ЭтапыРасчета()
	
	Если ЭтапРасчета = "НеУчитываемые" 
		Или ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы"
		Или ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
		Возврат "-";
	Иначе
		Возврат "+";
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеЭтапаРасчета(ЭтапРасчета)
	
	Если ЭтапРасчета = "НеУчитываемые" Тогда
		Представление = НСтр("ru = 'в части, не учитываемой для целей налогообложения';
							|en = 'in a section which is not taken into account for taxation purposes'");
	ИначеЕсли ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
		Представление = НСтр("ru = 'в части, относящейся к видам деятельности с особым порядком налогообложения';
							|en = 'in a section which is related to the activities with special taxation procedure'");
	ИначеЕсли ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
		Представление = НСтр("ru = 'в части расходов, распределенных на виды деятельности с особым порядком налогообложения';
							|en = 'in the expense section allocated to activity categories with a special taxation procedure'");
	Иначе
		Представление = НСтр("");
	КонецЕсли;
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат Представление;
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '
                                |- %1';
                                |en = '
                                |- %1'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, Представление);
	
КонецФункции

Процедура ОтключитьОтображениеЭтапаРасчетаНеУчитываемые(ЗаписьПротокола, ЭтапРасчета, ОписаниеСумм)
	
	// В отличие от показателей, определяемых на других этапах расчета, не учитываемые для целей налогообложения,
	// как правило, не отражаются в налоговом учете.
	// Исключением могут быть операции, в которых пользователь ошибочно вручную указал сумму НУ.
	// Поэтому, не следует всегда показывать пользователю строки протокола про не учитываемые для целей налогообложения
	// доходы и расходы.
	
	Если ЭтапРасчета <> "НеУчитываемые" Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваОписанияСумм = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	Если СвойстваОписанияСумм.Количество() <> 1 Или СвойстваОписанияСумм[0] <> "СуммаНУ" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеИсточниковДанных

Процедура ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, КорСчет)
	
	ИмяСлагаемого = КорСчет.ИмяПредопределенныхДанных;
	ДобавитьСлагаемое(СхемаРасчета, ИмяСлагаемого);
	
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрямыеРасходы");
	ИсточникДанных.ОтборДанных.КорСчет = КорСчет;
	
КонецПроцедуры

Функция СчетаКосвенныхРасходов()
	
	СчетаКосвенныхРасходов = Новый Массив;
	СчетаКосвенныхРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	СчетаКосвенныхРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	
	Возврат Новый ФиксированныйМассив(СчетаКосвенныхРасходов);
	
КонецФункции

Процедура ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, ВидСтатьиРасходов)
	
	ИмяСлагаемого = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидСтатьиРасходов);
	ДобавитьСлагаемое(СхемаРасчета, ИмяСлагаемого);
	
	ПолноеИмяПоказателя = ПолноеИмяЗаполняемогоПоказателя(СхемаРасчета);
	
	ТочкаОстановки = ОстановитьПостроениеДерева(СхемаРасчета);
	
	ДобавитьРасчет(СхемаРасчета, ПолноеИмяПоказателя);
	
	Для Каждого Счет Из СчетаКосвенныхРасходов() Цикл
		
		ДобавитьСлагаемое(СхемаРасчета, Счет.ИмяПредопределенныхДанных);
		
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "КосвенныеРасходы");
		ИсточникДанных.ОтборДанных.ВидРасходов = ВидСтатьиРасходов;
		ИсточникДанных.ОтборДанных.Счет        = Счет;
		
	КонецЦикла;
	
	ПродолжитьПостроениеДерева(СхемаРасчета, ТочкаОстановки);
	
КонецПроцедуры

Процедура ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, ВидСтатьиРасходов)
	
	ИмяСлагаемого = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидСтатьиРасходов);
	ДобавитьСлагаемое(СхемаРасчета, ИмяСлагаемого);
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
	ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьиРасходов;
	
КонецПроцедуры

Процедура ДобавитьРасчетПрочегоУбытка(СхемаРасчета, Имя, ВидСтатьи, НомерСтрокиВыручки, ОписаниеВыручки, НомерСтрокиРасходов, ОписаниеРасходов, СпособПереносаУбытка = Неопределено)
	
	НомерЛиста      = "02";
	НомерПриложения = "3";
	
	ДобавитьРасчет(СхемаРасчета, Имя);
	
	// Здесь повторяем формулу, которая приведена для подобных показателей в инструкциях по заполнению,
	// а именно - "-Выручка+Расходы".
	// Это позволит формировать расшифровку в том же стиле, что и текст в инструкции по заполнению.
	
	ДобавитьВычитаемое(СхемаРасчета,  "Выручка");
	ДобавитьОписание(СхемаРасчета,  НомерЛиста, НомерПриложения, НомерСтрокиВыручки, ОписаниеВыручки);
	
	ДобавитьСлагаемое(СхемаРасчета,   "Расходы");
	ДобавитьОписание(СхемаРасчета,  НомерЛиста, НомерПриложения, НомерСтрокиРасходов, ОписаниеРасходов);
	
	ДобавитьОграничение(СхемаРасчета, 0, "Снизу", "Сумма прибыли исключена из расчета");
	
	ДобавитьРасчет(СхемаРасчета, Имя + ".Выручка");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеДоходы");
	ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьи;
	
	ДобавитьРасчет(СхемаРасчета, Имя + ".Расходы");
	Если СпособПереносаУбытка = Неопределено Тогда
		// не может быть перенесен
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
		ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьи;
	Иначе
		ДобавитьСлагаемое(СхемаРасчета,  "ВключаяПризнанныеПослеПолученияУбытка");
		ДобавитьВычитаемое(СхемаРасчета, "ПризнанныеПослеПолученияУбытка");
		
		ДобавитьРасчет(СхемаРасчета, Имя + ".Расходы.ВключаяПризнанныеПослеПолученияУбытка");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
		ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьи;
		
		ДобавитьРасчет(СхемаРасчета, Имя + ".Расходы.ПризнанныеПослеПолученияУбытка");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходыПризнанныеПослеПолученияУбытка");
		ИсточникДанных.ОтборДанных.ВидСтатьи            = ВидСтатьи;
		ИсточникДанных.ОтборДанных.СпособПереносаУбытка = СпособПереносаУбытка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, ИмяПоказателя)
	
	ВидыИмущества = Новый Структура;
	ВидыИмущества.Вставить("ОсновныеСредства",     Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВидыИмущества.Вставить("НематериальныеАктивы", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	
	Для Каждого ВидИмущества Из ВидыИмущества Цикл
		
		ДобавитьСлагаемое(СхемаРасчета, ВидИмущества.Ключ);
		
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "РеализацияАмортизируемогоИмущества");
		ИсточникДанных.ОтборДанных.Показатель = ИмяПоказателя;
		ИсточникДанных.ОтборДанных.ВидСтатьи  = ВидИмущества.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных // и описание порядка получения данных

// Процедура-маршрутизатор: вызывает конкретные алгоритмы получения данных информационной базы.
// Сами алгоритмы размещены в областях внутри области ПолучениеДанных.
//
// Параметры:
//  ПроцессорПолученияДанных - см. НовыйПроцессорПолученияДанных() - структура, определяющая, что нужно сделать.
//                             Результат выполнения - полученные данные - записывается в список задач внутри процессора.
Процедура ПолучитьДанныеИнформационнойБазы(ПроцессорПолученияДанных)
	
	Алгоритм = ПроцессорПолученияДанных.ИмяАлгоритма;
	
	Если Алгоритм = "ВыручкаОбычныеВидыДеятельности" Тогда
		
		ПолучитьВыручкаОбычныеВидыДеятельности(ПроцессорПолученияДанных);
		
	ИначеЕсли Алгоритм = "ПрямыеРасходы" Тогда
		
		ПолучитьПрямыеРасходы(ПроцессорПолученияДанных);
		
	ИначеЕсли Алгоритм = "КосвенныеРасходы" Тогда
		
		ПолучитьКосвенныеРасходы(ПроцессорПолученияДанных);
			
	ИначеЕсли Алгоритм = "ПрочиеДоходы" Или Алгоритм = "ПрочиеРасходы" Тогда
		
		ПолучитьПрочиеДоходыРасходы(ПроцессорПолученияДанных, Алгоритм);
				
	ИначеЕсли Алгоритм = "ПрочиеРасходыПризнанныеПослеПолученияУбытка" Тогда
		// См. также ПолучитьРеализацияАмортизируемогоИмущества()
		ПолучитьПрочиеРасходыПризнанныеПослеПолученияУбытка(ПроцессорПолученияДанных);
			
	ИначеЕсли Алгоритм = "РеализацияАмортизируемогоИмущества" Тогда
		
		ПолучитьРеализацияАмортизируемогоИмущества(ПроцессорПолученияДанных);
		
	ИначеЕсли Алгоритм = "ТорговыйСбор" Тогда
		
		ПолучитьТорговыйСбор(ПроцессорПолученияДанных);
				
	ИначеЕсли Алгоритм = "КапитальныеВложения" Тогда
		
		ПолучитьКапитальныеВложения(ПроцессорПолученияДанных);
				
	ИначеЕсли Алгоритм = "Амортизация" Тогда
		
		ПолучитьАмортизация(ПроцессорПолученияДанных);
		
	ИначеЕсли Алгоритм = "МетодАмортизации" Тогда
		
		ПолучитьМетодАмортизации(ПроцессорПолученияДанных);
		
	ИначеЕсли Алгоритм = "ИзлишкиПриИнвентаризацииДляСовместимости" Тогда
		
		ПолучитьИзлишкиПриИнвентаризацииДляСовместимости(ПроцессорПолученияДанных);
		
	ИначеЕсли Алгоритм = "УбыткиПрошлыхЛет.ПериодыОбразования" Тогда
		
		ПолучитьУбыткиПрошлыхЛет(ПроцессорПолученияДанных);
		
	ИначеЕсли Алгоритм = "ПереносУбытковПрошлыхЛет" Тогда
		
		ПолучитьПереносУбытковПрошлыхЛет(ПроцессорПолученияДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор коллекции, содержащей отбор данных информационной базы, с помощью которого можно параметризовать алгоритм
// получения данных. То есть, отбор содержит те поля, с помощью которых можно управлять тем, какие именно данные будут получены.
// Конкретный набор полей и их семантика определяется алгоритмом.
//
// Параметры:
//  ИмяАлгоритма - Строка
// Возвращаемое значение:
//  Структура - Ключ - имя поля, по которому выполняется отбор, Значение - значение отбора.
Функция НовыйОтборДанных(ИмяАлгоритма)
	
	ОтборДанных = Новый Структура;
	
	Если ИмяАлгоритма = "ДанныеСписка" Тогда
		
		ОтборДанных.Вставить("Список",                "");
		ОтборДанных.Вставить("Показатель",            "");
		ОтборДанных.Вставить("ИндексСтроки",          -1); // Отрицательное значение = данные всех строк
		// Форма может предусматривать ограниченное количество строк.
		// Данные строк, не поместившихся на форме, могут быть включены в одну из строк.
		// Для такой строки следует указать количество строк, предусмотренных на форме.
		ОтборДанных.Вставить("НепоместившиесяСтроки", -1);
	
	ИначеЕсли ИмяАлгоритма = "ВыручкаОбычныеВидыДеятельности" Тогда
		ОтборДанных.Вставить("Раздел", ""); // "ПродукцияПоНастройке", "УслугиБезНастройки"; пустая строка означает "все разделы"
	ИначеЕсли ИмяАлгоритма = "ПрямыеРасходы" Тогда
		ОтборДанных.Вставить("КорСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка()); // пустая ссылка означает "по всем корсчетам"
	ИначеЕсли ИмяАлгоритма = "КосвенныеРасходы" Тогда
		ОтборДанных.Вставить("Счет",        ПланыСчетов.Хозрасчетный.ПустаяСсылка()); // 90.07 или 90.08
		ОтборДанных.Вставить("ВидРасходов", Перечисления.ВидыРасходовНУ.ПустаяСсылка()); // пустая ссылка означает "по всем видам расходов"
	ИначеЕсли ИмяАлгоритма = "ПрочиеДоходы" Или ИмяАлгоритма = "ПрочиеРасходы" Тогда
		ОтборДанных.Вставить("ВидСтатьи",   Неопределено); // Неопределено означает "по всем видам расходов", пустая ссылка - отбор по пустой строке
	ИначеЕсли ИмяАлгоритма = "РеализацияАмортизируемогоИмущества" Тогда
		ОтборДанных.Вставить("Показатель",           ""); // См. РассчитываемыеПоказатели в РеализацияАмортизируемогоИмущества()
		ОтборДанных.Вставить("ВидСтатьи",            Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "ПрочиеРасходыПризнанныеПослеПолученияУбытка" Тогда
		ОтборДанных.Вставить("ВидСтатьи",            Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка());
		ОтборДанных.Вставить("СпособПереносаУбытка", Перечисления.ВидыРБП.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "ТорговыйСбор" Тогда
		ОтборДанных.Вставить("Показатель", "");
	ИначеЕсли ИмяАлгоритма = "КапитальныеВложения" Тогда
		ОтборДанных.Вставить("ВерхнийЛимитПроцента", 0);
	ИначеЕсли ИмяАлгоритма = "Амортизация" Тогда
		ОтборДанных.Вставить("ВидАктива",                   "");      // "ОсновныеСредства", "НематериальныеАктивы"
		ОтборДанных.Вставить("ИсключенияНелинейногоМетода", Ложь);
	ИначеЕсли ИмяАлгоритма = "МетодАмортизации" Тогда
		ОтборДанных.Вставить("МетодАмортизации", Перечисления.МетодыНачисленияАмортизации.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ОтборДанных;
	
КонецФункции

// Конструктор коллекции, содержащей условия, в соответствии с которым были получены данные информационной базы.
// Включает в себя 
// - (всегда) - отбор - см. НовыйОтборДанных()
// - (всегда) - счет, по которому получены данные, заданный алгоритмом "жестко"
// - (когда данные получаются из информационной базы с большей детализацией) - другие поля 
// Конкретный набор полей и их семантика определяется алгоритмом.
//
// Параметры:
//  ИмяАлгоритма - Строка
//  СхемаРасчета - см. НовыйСхемаРасчета
// Возвращаемое значение:
//  Структура - Ключ - имя поля, по которому выполняется отбор, Значение - значение отбора.
Функция НовыйУсловиеПолученияДанныхИнформационнойБазы(ИмяАлгоритма)
	
	Условие = НовыйОтборДанных(ИмяАлгоритма);
	
	Если ИмяАлгоритма = "ВыручкаОбычныеВидыДеятельности" Тогда
		Условие.Вставить("Счет",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Условие.Вставить("Настройка", Новый Массив);
	ИначеЕсли ИмяАлгоритма = "ПрямыеРасходы" Тогда
		Условие.Вставить("Счет",        ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "ПрочиеДоходы" Или ИмяАлгоритма = "ПрочиеРасходы" Тогда
		Условие.Вставить("Счет",        ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "РеализацияАмортизируемогоИмущества" Тогда
		Условие.Вставить("ВсеРеализованныеОбъекты", Ложь);
		Условие.Вставить("РеализованныйОбъект",     Неопределено); // Справочник.ОсновныеСредства, Справочник.НематериальныеАктивы
		Условие.Вставить("СчетДоходовРасходов",     ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Условие.Вставить("СчетУбытков",             ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Условие.Вставить("СпособПереносаУбытка",    Перечисления.ВидыРБП.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "ПрочиеРасходыПризнанныеПослеПолученияУбытка" Тогда
		Условие.Вставить("СчетРасходов",         ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Условие.Вставить("СчетУбытков",          ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "ТорговыйСбор" Тогда
		Условие.Вставить("КонецПериода", '0001-01-01'); // Используется для показателя УменьшениеНалогаНаТорговыйСборПрошлогоПериода
	ИначеЕсли ИмяАлгоритма = "КапитальныеВложения" Тогда
		Условие.Вставить("ОсновноеСредство", Справочники.ОбъектыЭксплуатации.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "УбыткиПрошлыхЛет.ПериодыОбразования" Тогда
		Условие.Вставить("ПериодВозникновения", '0001-01-01');
	КонецЕсли;
	
	Возврат Условие;
	
КонецФункции

// Процедура-маршрутизатор: вызывает конкретные алгоритмы подготовки настроек стандартного отчета,
// с помощью которого можно проиллюстрировать шаг расчета.
// Сами алгоритмы размещены в областях внутри области ПолучениеДанных.
//
// Параметры:
//  ЗаписьПротокола	 - см. НовыйПротоколРасчета() - иллюстрируемая запись протокола расчета
//  СхемаРасчета	 - см. НовыйСхемаРасчета()    - общая схема иллюстрируемого расчета
// Возвращаемое значение:
//  см. ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии - 
//     настройки отчета в формате, понятном форме РасшифровкаПоказателейРегламентированныхОтчетов.
Функция НастройкиОтчетаРасшифровкаЗначения(ЗаписьПротокола, СхемаРасчета)
	
	Настройки = Неопределено;
	
	Если ЗаписьПротокола.ТипЗаписи = "ВыручкаОбычныеВидыДеятельности" Тогда
		
		Настройки = НастройкиОтчетаВыручкаОбычныеВидыДеятельности(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Счет,
			ЗаписьПротокола.Условие.Раздел,
			ЗаписьПротокола.Условие.Настройка,
			СхемаРасчета);
			
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "ПрямыеРасходы" Тогда
		
		Настройки = НастройкиОтчетаПрямыеРасходы(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Счет,
			ЗаписьПротокола.Условие.КорСчет,
			СхемаРасчета);
			
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "КосвенныеРасходы" Тогда
		
		Настройки = НастройкиОтчетаКосвенныеРасходы(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Счет,
			ЗаписьПротокола.Условие.ВидРасходов,
			СхемаРасчета);
	
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "ПрочиеДоходы" Или ЗаписьПротокола.ТипЗаписи = "ПрочиеРасходы" Тогда
		
		Настройки = НастройкиОтчетаПрочиеДоходыРасходы(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Счет,
			ЗаписьПротокола.Условие.ВидСтатьи,
			СхемаРасчета);
			
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "ПрочиеРасходыПризнанныеПослеПолученияУбытка" Тогда
		
		Настройки = НастройкиОтчетаПрочиеРасходыПризнанныеПослеПолученияУбытка(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.СчетРасходов,
			ЗаписьПротокола.Условие.ВидСтатьи,
			ЗаписьПротокола.Условие.СчетУбытков,
			ЗаписьПротокола.Условие.СпособПереносаУбытка,
			СхемаРасчета);
		
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "РеализацияАмортизируемогоИмущества" Тогда
		
		Настройки = НастройкиОтчетаРеализацияАмортизируемогоИмущества(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Показатель,
			ЗаписьПротокола.Условие.ВсеРеализованныеОбъекты,
			ЗаписьПротокола.Условие.РеализованныйОбъект,
			ЗаписьПротокола.Условие.СчетДоходовРасходов,
			ЗаписьПротокола.Условие.ВидСтатьи,
			ЗаписьПротокола.Условие.СчетУбытков,
			ЗаписьПротокола.Условие.СпособПереносаУбытка,
			СхемаРасчета);
			
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "ТорговыйСбор" Тогда
		
		Если ЗаписьПротокола.Условие.Показатель = "ТорговыйСборУплаченный" Тогда
			Настройки = НастройкиОтчетаПоСуммамНалога(СхемаРасчета, ПланыСчетов.Хозрасчетный.ТорговыйСбор);
		Иначе
			Настройки = НастройкиОтчетаУменьшениеНалогаНаТорговыйСбор(СхемаРасчета, ЗаписьПротокола.Условие);
		КонецЕсли;
			
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "КапитальныеВложения" Тогда
		
		Настройки = НастройкиОтчетаКапитальныеВложения(СхемаРасчета, ЗаписьПротокола.Условие.ОсновноеСредство);
		
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "Амортизация" Тогда
		
		Если ЗаписьПротокола.ЭтапРасчета = "НеУчитываемые" Тогда
			Настройки = НастройкиОтчетаАмортизацияНеУчитываемые(
				ЗаписьПротокола.Условие.ВидАктива,
				ЗаписьПротокола.Условие.ИсключенияНелинейногоМетода,
				СхемаРасчета);
		Иначе
			Настройки = НастройкиОтчетаАмортизация(
				ЗаписьПротокола.Условие.ВидАктива,
				ЗаписьПротокола.Условие.ИсключенияНелинейногоМетода,
				ЗаписьПротокола.ЭтапРасчета,
				СхемаРасчета);
		КонецЕсли;
		
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "УбыткиПрошлыхЛет.ПериодыОбразования" Тогда
		
		Настройки = НастройкиОтчетаУбыткиПрошлыхЛет(ЗаписьПротокола.Условие.ПериодВозникновения, СхемаРасчета);
		
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "ПереносУбытковПрошлыхЛет" Тогда
		
		Настройки = НастройкиОтчетаПереносУбытковПрошлыхЛет(СхемаРасчета);
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#Область ОбщиеДанные

Процедура СоздатьВременнуюТаблицуСчетаУчета(СчетаУчета, ПроцессорПолученияДанных)
	
	// Это локальная временная таблица - она должна жить только до конца процедуры, в которой создана.
	
	Если ТипЗнч(СчетаУчета) = Тип("Массив") Или ТипЗнч(СчетаУчета) = Тип("ФиксированныйМассив") Тогда
		СчетаУчетаМассив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаУчета);
	Иначе
		СчетаУчетаМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СчетаУчета);
	КонецЕсли;
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	Если СчетаУчетаМассив.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Ссылка
		|ПОМЕСТИТЬ СчетаУчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	Иначе
		
		СхемаЗапроса = Новый СхемаЗапроса;
		
		ЗапросВыбора = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ЗапросВыбора.ТаблицаДляПомещения = "СчетаУчета";
		
		Для Индекс = 0 По СчетаУчетаМассив.ВГраница() Цикл
			
			// Шаблон см. выше в ветке с пустым массивом счетов
			
			ИмяПараметра = "ИмяСчета" + Формат(Индекс + 1, "ЧГ=0");
			
			ОператорЗапроса = ЗапросВыбора.Операторы.Добавить();
			ОператорЗапроса.ТипОбъединения = ТипОбъединенияСхемыЗапроса.Объединить;
			ОператорЗапроса.Источники.Добавить("ПланСчетов.Хозрасчетный", "Хозрасчетный");
			ОператорЗапроса.ВыбираемыеПоля.Добавить("&" + ИмяПараметра);
			ОператорЗапроса.ВыбираемыеПоля.Добавить("Хозрасчетный.Ссылка");
			ОператорЗапроса.Отбор.Добавить("Хозрасчетный.Ссылка В ИЕРАРХИИ(&" + ИмяПараметра + ")");
			
			Запрос.УстановитьПараметр(ИмяПараметра, СчетаУчетаМассив[Индекс]);
			
		КонецЦикла;
		
		ЗапросВыбора.Колонки[0].Псевдоним = "Счет";
		ЗапросВыбора.Колонки[1].Псевдоним = "Ссылка";
		ЗапросВыбора.Индекс.Добавить(ЗапросВыбора.Колонки[1]);
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
		
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
КонецПроцедуры

Процедура СоздатьВременнуюТаблицуДолиСпециальныеРежимы(ПроцессорПолученияДанных)
	
	// Это глобальная временная таблица - будет существовать до уничтожения процессора
	
	ИмяТаблицы = "ДолиСпециальныеРежимы";
	
	Если ПроцессорПолученияДанных.ВременныеТаблицы.Менеджер.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		// Уже создана
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст = НалоговыйУчет.ТекстЗапросаСоздатьВременнуюТаблицуДолиСпециальныеРежимы();
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы, ИмяТаблицы);
	
КонецПроцедуры

Функция НовыйОтборПоЭтапуРасчета(ЭтапРасчета)
	
	Отбор = Новый Структура;
	
	Если ЭтапРасчета = "Все" Тогда
		// дополнительный отбор не требуется по определению
	ИначеЕсли ЭтапРасчета = "НеУчитываемые" Тогда
		Отбор.Вставить("Учитываются",     Ложь);
	ИначеЕсли ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
		Отбор.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
		Отбор.Вставить("Учитываются",     Истина);
	ИначеЕсли ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
		Отбор.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
		Отбор.Вставить("Учитываются",     Истина);
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти

#Область Выручка

Процедура ПолучитьВыручкаОбычныеВидыДеятельности(ПроцессорПолученияДанных)
	
	// Единственный разделитель системы налогообложения в части выручки - субсчета.
	// При этом не бывает доходов, распределяемых между видами деятельности.
	// Поэтому здесь показатели выручки выводим "прямым счетом" - по перечню субсчетов,
	// соответствующих видам деятельности, облагаемым налогом на прибыль.
	// Для расчета и расшифровки других показателей обычно принят такой подход:
	// выводится итоговая сумма, из которой вычитается сумма ЕНВД.
	// Здесь его не применяем.
	
	// В общем случае из сумм выручки нужно вычитать НДС и акцизы,
	// если на соответствующих счетах ведется налоговый учет.
	// В то же время, в конфигурации принято учитывать суммы выручки в оценке без косвенных налогов,
	// на счетах НДС и акцизов не ведется налоговый учет и недостаточно аналитики для разделения выручки по разделам.
	
	// Поэтому, в отличие от других показателей, получение оценки выручки по бухгалтерскому учету здесь не обеспечивается
	// (до появления реальной необходимости получать такие значения).
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаРаздельныйНУ))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.Ссылка";
	СчетаВыручки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// 1. Получим сводные данные
	ШаблонТекстаЗапроса =
	// Запрос модифицируется схемой запроса - добавляются колонки сумм
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ГруппыФинансовогоУчетаНоменклатуры), ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	|	&АналитикаПродукции КАК АналитикаПродукции,
	|	&ПолеВариантНО КАК ВариантНО
	|ПОМЕСТИТЬ ВТ_Выручка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В (&СчетаВыручки), &СубконтоВыручки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ГруппыФинансовогоУчетаНоменклатуры), ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)),
	|	&АналитикаПродукции,
	|	&ПолеВариантНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатурнаяГруппа,
	|	АналитикаПродукции,
	|	ВариантНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Выручка.Регистратор КАК Регистратор,
	|	Выручка.Регистратор КАК ДокументРеализации
	|ПОМЕСТИТЬ ДокументыРеализации
	|ИЗ
	|	ВТ_Выручка КАК Выручка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Выручка.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(Выручка.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК ДокументРеализации
	|ИЗ
	|	ВТ_Выручка КАК Выручка
	|ГДЕ
	|	Выручка.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыРеализации.Регистратор КАК Регистратор,
	|	&ПолеСвязиРегистраторовПродукции КАК АналитикаПродукции,
	|	ВЫБОР 
	|		КОГДА ДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ВариантыНалогообложенияПрибыли
	|			ТОГДА ДвиженияССубконто.СубконтоДт1
	|		КОГДА ДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ВариантыНалогообложенияПрибыли
	|			ТОГДА ДвиженияССубконто.СубконтоДт2
	|		КОГДА ДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ВариантыНалогообложенияПрибыли
	|			ТОГДА ДвиженияССубконто.СубконтоДт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)
	|	КОНЕЦ КАК ВариантНО
	|ПОМЕСТИТЬ РегистраторыРеализацииПродукции
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация В (&Организации)
	|				И СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД))
	|				И СчетКт В (&СчетаУчетаПродукции),
	|			,
	|			) КАК ДвиженияССубконто
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыРеализации КАК ДокументыРеализации
	|	ПО
	|		ДвиженияССубконто.Регистратор = ДокументыРеализации.ДокументРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	АналитикаПродукции,
	|	ВариантНО
	|;
	|";
	
	ИспользуетсяРаздельныйУчет = РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(
		ПроцессорПолученияДанных.КонтекстРасчета.Организация,
		ПроцессорПолученияДанных.КонтекстРасчета.НачалоПериода);
	
	Если ИспользуетсяРаздельныйУчет Тогда
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&АналитикаПродукции",
			"ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ГруппыФинансовогоУчетаНоменклатуры), ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка))");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ПолеВариантНО",
			"ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли), ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка))");
		ПолеСвязиРегистраторовПродукции = 
		"ВЫБОР 
		|		КОГДА ДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ГруппыФинансовогоУчетаНоменклатуры
		|			ТОГДА ДвиженияССубконто.СубконтоДт1
		|		КОГДА ДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ГруппыФинансовогоУчетаНоменклатуры
		|			ТОГДА ДвиженияССубконто.СубконтоДт2
		|		КОГДА ДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ГруппыФинансовогоУчетаНоменклатуры
		|			ТОГДА ДвиженияССубконто.СубконтоДт3
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ";
		
		ДобавитьВТекстЗапросаТаблицуРегистраторовСебестоимости(ШаблонТекстаЗапроса);
		
	Иначе
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&АналитикаПродукции",
			"ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))");
		ПолеСвязиРегистраторовПродукции = 
		"ВЫБОР 
		|		КОГДА ДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ДвиженияССубконто.СубконтоКт1
		|		КОГДА ДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ДвиженияССубконто.СубконтоКт2              
		|		КОГДА ДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Номенклатура 
		|			ТОГДА ДвиженияССубконто.СубконтоКт3
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	КОНЕЦ";
	КонецЕсли;
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ПолеСвязиРегистраторовПродукции", ПолеСвязиРегистраторовПродукции);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	
	ДобавитьКолонкиСумм(СхемаЗапроса, "ХозрасчетныйОбороты.%ОборотКт", ПроцессорПолученияДанных.ОписаниеСумм);
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета);
	
	СубконтоВыручки = Новый Массив;
	СубконтоВыручки.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	Если ИспользуетсяРаздельныйУчет Тогда
		СубконтоВыручки.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
	
	    СубконтоСебестоимости = Новый Массив;
	    СубконтоСебестоимости.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	    СубконтоСебестоимости.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
	    Запрос.УстановитьПараметр("СубконтоСебестоимости", СубконтоСебестоимости);
	  
	  	СчетаУчетаСебестоимостиРабот = Новый Массив;
		СчетаУчетаСебестоимостиРабот.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство); //20
		СчетаУчетаСебестоимостиРабот.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);    //23
				
	    Запрос.УстановитьПараметр("СчетаУчетаСебестоимостиРабот", СчетаУчетаСебестоимостиРабот);
	
	Иначе
		СубконтоВыручки.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("ПолеВариантНО", Справочники.ВариантыНалогообложенияПрибыли.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетаВыручки",   СчетаВыручки);
	Запрос.УстановитьПараметр("СубконтоВыручки", СубконтоВыручки);
	
	СчетаУчетаПродукции = Новый Массив;
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция); //43
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);    //21
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная); //45.02
	Запрос.УстановитьПараметр("СчетаУчетаПродукции", СчетаУчетаПродукции);
	
	ИспользоватьГруппыФинансовогоУчетаНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	Запрос.УстановитьПараметр("ИспользоватьГруппыФинансовогоУчетаНоменклатуры", ИспользоватьГруппыФинансовогоУчетаНоменклатуры);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	// 2. Получим нужное подмножество данных для отдельных задач, детально по субсчетам
	//
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Задача.ЭтапРасчета <> "Все" Тогда
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		Для Каждого Счет Из СчетаВыручки Цикл
		
			Если ПустаяСтрока(Задача.ОтборДанных.Раздел) Тогда
				
				ШаблонТекстаЗапроса =
				// Запрос модифицируется схемой запроса - добавляются колонки сумм
				"ВЫБРАТЬ
				|	ИСТИНА КАК СлужебноеПолеШаблона
				|ИЗ
				|	ВТ_Выручка КАК Выручка
				|ГДЕ
				|	Выручка.Счет = &Счет
				|	И Выручка.ВариантНО = &ВариантНО";
				
				ШаблонОписанияРаздела   = НСтр("ru = 'Оборот по кредиту счета %1';
												|en = '%1 account credit turnover'");
				РасшифроватьПоСубсчетам = Ложь;
				
			ИначеЕсли Задача.ОтборДанных.Раздел = "ПродукцияПоНастройке" Тогда
				
				ШаблонТекстаЗапроса =
				// Запрос модифицируется схемой запроса - добавляются колонки сумм
				"ВЫБРАТЬ
				|	ИСТИНА КАК СлужебноеПолеШаблона
				|ИЗ
				|	ВТ_Выручка КАК Выручка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыРеализацииПродукции КАК РеализацияПродукции
				|		ПО Выручка.Регистратор = РеализацияПродукции.Регистратор
				|			И Выручка.АналитикаПродукции = РеализацияПродукции.АналитикаПродукции
				|			И Выручка.ВариантНО = РеализацияПродукции.ВариантНО
				|ГДЕ
				|	Выручка.Счет = &Счет
				|	И Выручка.ВариантНО = &ВариантНО";
				
				ШаблонОписанияРаздела   = НСтр("ru = 'Реализация продукции: оборот по кредиту счета %1 по номенклатурным позициям продукции';
												|en = 'Manufactured products sales: %1 account credit turnover by product items'");
				РасшифроватьПоСубсчетам = Истина; // для расшифровки стандартными отчетами по аналитике
				
			ИначеЕсли Задача.ОтборДанных.Раздел = "УслугиБезНастройки" Тогда
				
				ШаблонТекстаЗапроса =
				// Запрос модифицируется схемой запроса - добавляются колонки сумм
				"ВЫБРАТЬ
				|	ИСТИНА КАК СлужебноеПолеШаблона
				|ИЗ
				|	ВТ_Выручка КАК Выручка
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыРеализацииПродукции КАК РеализацияПродукции
				|		ПО Выручка.Регистратор = РеализацияПродукции.Регистратор
				|			И Выручка.АналитикаПродукции = РеализацияПродукции.АналитикаПродукции
				|			И Выручка.ВариантНО = РеализацияПродукции.ВариантНО
				|ГДЕ
				|	Выручка.Счет = &Счет
				|	И Выручка.ВариантНО = &ВариантНО
				|	И РеализацияПродукции.Регистратор ЕСТЬ NULL
				|	И &УсловиеУслугаРабота";
				
				Если ИспользуетсяРаздельныйУчет Тогда
					УсловиеУслугаРабота = "ИСТИНА";  					
					ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "РегистраторыРеализацииПродукции", "РегистраторыРеализацииТоваровПродукции");
				Иначе
					УсловиеУслугаРабота = "Выручка.АналитикаПродукции.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
				КонецЕсли;
				ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&УсловиеУслугаРабота", УсловиеУслугаРабота);
				
				ШаблонОписанияРаздела   = НСтр("ru = 'Выполнение работ, оказание услуг: оборот по кредиту счета %1 по номенклатурным позициям работ, услуг';
												|en = 'Conduction of works, rendering services: %1 account credit turnover by works, services product items'");
				РасшифроватьПоСубсчетам = Истина; // для расшифровки стандартными отчетами по аналитике
				
			КонецЕсли;
			
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
			
			ДобавитьКолонкиСумм(СхемаЗапроса, "Выручка.%", ПроцессорПолученияДанных.ОписаниеСумм);
			
			Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета);
			Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
			Запрос.УстановитьПараметр("Счет", Счет);
			Запрос.УстановитьПараметр("ВариантНО", Задача.ВариантНО);
			РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
			
				ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, Выборка);
				ЗаписьПротокола.Условие.Счет      = Счет;
				ЗаписьПротокола.Условие.Раздел    = Задача.ОтборДанных.Раздел;
				ЗаписьПротокола.Условие.Настройка = Новый Массив;
				ЗаписьПротокола.Описание          = СтрШаблон(ШаблонОписанияРаздела, Счет);
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВТекстЗапросаТаблицуРегистраторовСебестоимости(ШаблонТекстаЗапроса)
		
	ТекстЗапросаТаблицы = 

	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК АналитикаПродукции,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ВариантНО
	|ПОМЕСТИТЬ РегистраторыРеализацииТоваровПродукции
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|	&НачалоПериода, &КонецПериода, Регистратор, СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)), 
	|	&СубконтоСебестоимости, НЕ СчетКт В ИЕРАРХИИ (&СчетаУчетаСебестоимостиРабот), , Организация В (&Организации)) КАК ХозрасчетныйОборотыДтКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыРеализации КАК ДокументыРеализации
	|		ПО ХозрасчетныйОборотыДтКт.Регистратор = ДокументыРеализации.ДокументРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	АналитикаПродукции,
	|	ВариантНО
	|;
	|";
	
	ШаблонТекстаЗапроса = ШаблонТекстаЗапроса + ТекстЗапросаТаблицы;
	
КонецПроцедуры

Функция НастройкиОтчетаВыручкаОбычныеВидыДеятельности(ЭтапРасчета, Счет, Раздел, НастройкаУчетаПроизводства, СхемаРасчета)
	
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотноСальдоваяВедомостьПоСчету",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		Счет,
		СхемаРасчета.ОписаниеСумм);
		
	ОписаниеПоляНоменклатурнаяГруппа = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		"Субконто",
		Счет,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		
	Если ОписаниеПоляНоменклатурнаяГруппа <> Неопределено Тогда
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеПоляНоменклатурнаяГруппа.Имя,
			ОписаниеПоляНоменклатурнаяГруппа.Представление);
		
		Если Раздел = "ПродукцияПоНастройке" Тогда
		
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
				Настройки,
				ОписаниеПоляНоменклатурнаяГруппа.Имя,
				НастройкаУчетаПроизводства,
				ВидСравненияКомпоновкиДанных.ВСписке);
		
		ИначеЕсли Раздел = "УслугиБезНастройки" Тогда
			
			Если ЗначениеЗаполнено(НастройкаУчетаПроизводства) Тогда
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
					Настройки,
					ОписаниеПоляНоменклатурнаяГруппа.Имя,
					НастройкаУчетаПроизводства,
					ВидСравненияКомпоновкиДанных.НеВСписке);
					
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
		
	Если Раздел = "УслугиБезНастройки" Тогда
		
		ОписаниеПоляНоменклатура = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
			"Субконто",
			Счет,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
			
		Если ОписаниеПоляНоменклатура <> Неопределено Тогда
			
			ПолеВидНоменклатуры = ОписаниеПоляНоменклатура.Имя + ".ВидНоменклатуры";
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
				Настройки,
				ПолеВидНоменклатуры,
				НСтр("ru = 'Вид номенклатуры';
					|en = 'Item kind'"));
				
			ПолеУслуга = ОписаниеПоляНоменклатура.Имя + ".ТипНоменклатуры";
			
			РаботыУслуги = Новый СписокЗначений;
			РаботыУслуги.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
			РаботыУслуги.Добавить(Перечисления.ТипыНоменклатуры.Работа);
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
				Настройки,
				ПолеУслуга,
				РаботыУслуги,
				ВидСравненияКомпоновкиДанных.ВСписке);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ПрочиеДоходы

Процедура ДобавитьСлагаемоеПрочиеДоходы(СхемаРасчета, ИмяПоказателя, НомерСтроки, Описание, СтатьиДоходов)
	
	ДобавитьСлагаемое(СхемаРасчета, ИмяПоказателя);
	ДобавитьОписание(СхемаРасчета, "02", "1", НомерСтроки, Описание);
	
	Если Не ЗначениеЗаполнено(СтатьиДоходов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтатьиДоходов) = Тип("Структура") Тогда
		Если Не СтатьиДоходов.Свойство(ИмяПоказателя) Тогда
			Возврат;
		Иначе
			ВидыСтатейДоходов = СтатьиДоходов[ИмяПоказателя];
			Если Не ЗначениеЗаполнено(ВидыСтатейДоходов) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтатьиДоходов) = Тип("Массив") Тогда
		ВидыСтатейДоходов = СтатьиДоходов;
	ИначеЕсли ТипЗнч(СтатьиДоходов) = Тип("ПеречислениеСсылка.ВидыПрочихДоходовИРасходов") Тогда
		ВидыСтатейДоходов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтатьиДоходов);
	КонецЕсли;
	
	Если ВидыСтатейДоходов.Количество() = 1 Тогда
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеДоходы");
		ИсточникДанных.ОтборДанных.ВидСтатьи = ВидыСтатейДоходов[0];
	Иначе
		
		ПолноеИмяПоказателя = ПолноеИмяЗаполняемогоПоказателя(СхемаРасчета);
		
		ТочкаОстановки = ОстановитьПостроениеДерева(СхемаРасчета);
		
		ДобавитьРасчет(СхемаРасчета, ПолноеИмяПоказателя);
		
		Для Каждого ВидСтатьиДоходов Из ВидыСтатейДоходов Цикл
			
			ИмяСтатьиДоходов = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидСтатьиДоходов);
			
			ДобавитьСлагаемое(СхемаРасчета, ИмяСтатьиДоходов);
			
			ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеДоходы");
			ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьиДоходов;
			
		КонецЦикла;
		
		ПродолжитьПостроениеДерева(СхемаРасчета, ТочкаОстановки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИзлишкиПриИнвентаризацииДляСовместимости(ПроцессорПолученияДанных)
	
	// Вид статья прочих доходов "ИзлишкиПриИнвентаризации" появился не сразу.
	// Ранее излишки могли отражаться по статье с видом ПрочиеВнереализационныеДоходыРасходы.
	// Поэтому в старых периодах, для совместимости, получаем данные по обеим статьям.
	
	// Расшифровка этого показателя стандартным отчетом не обеспечивается.
	// Суммы, облагаемые ЕНВД, не учитываются
	
	ЗадачиЭтапВсе = Новый Массив;
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Задача.ЭтапРасчета <> "Все" Тогда
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		ЗадачиЭтапВсе.Добавить(Задача);
		
	КонецЦикла;
	
	Если ЗадачиЭтапВсе.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СчетаЗапасов = Новый Массив;
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	
	СчетаЗапасов = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаЗапасов);
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = &Счет,
	|			&МассивСубконто,
	|			Организация В (&Организации)
	|				И Субконто1.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы),
	|			КорСчет В (&СчетаЗапасов),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка))";
	
	ШаблонСумм = "ХозрасчетныйОбороты.%ОборотКт";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	
	ДобавитьКолонкиСумм(СхемаЗапроса, ШаблонСумм, ПроцессорПолученияДанных.ОписаниеСумм);
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("СчетаЗапасов",   СчетаЗапасов);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого ЗадачаЭтапВсе Из ЗадачиЭтапВсе Цикл
		
		Отбор = Новый Структура("ВариантНО", ЗадачаЭтапВсе.ВариантНО);
		Пока Выборка.НайтиСледующий(Отбор) Цикл
			КоллекцииСумм.Сложить(ЗадачаЭтапВсе, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
		КонецЦикла;
		
		ШаблонОписания = НСтр(
			"ru = 'Оборот по кредиту счета %1 в корреспонденции со счетами запасов; по статьям вида ""%2""';
			|en = '%1 account credit turnover in correspondence with the inventory accounts; by items of ""%2"" type'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, ЗадачаЭтапВсе);
		ЗаписьПротокола.Описание = СтрШаблон(
			ШаблонОписания,
			ПланыСчетов.Хозрасчетный.ПрочиеДоходы,
			Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрямыеРасходы

Процедура ПолучитьПрямыеРасходы(ПроцессорПолученияДанных)
	
	// варианты алгоритма
	Варианты = Новый ТаблицаЗначений;
	Варианты.Колонки.Добавить("ОтборПоКорСчетам", Новый ОписаниеТипов("Булево"));
	Варианты.Колонки.Добавить("Задачи",           Новый ОписаниеТипов("Массив"));
	Варианты.Колонки.Добавить("КорСчета",         Новый ОписаниеТипов("Массив"));
	Варианты.Колонки.Добавить("ШаблонОписания",   Новый ОписаниеТипов("Строка"));
	
	// 1. сводно
	Вариант = Варианты.Добавить();
	Вариант.ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет][ЭтапРасчета]';
									|en = 'Account debit turnover [Счет][ЭтапРасчета]'");
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если Не ЗначениеЗаполнено(Задача.ОтборДанных.КорСчет) Тогда
			Вариант.Задачи.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	// 2. по корсчетам
	Вариант = Варианты.Добавить();
	Вариант.ОтборПоКорСчетам = Истина;
	Вариант.ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет] в корреспонденции со счетом [КорСчет][ЭтапРасчета]';
									|en = 'Account debit turnover [Счет] in correspondence with account [КорСчет][ЭтапРасчета]'");
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если ЗначениеЗаполнено(Задача.ОтборДанных.КорСчет) Тогда
			Вариант.Задачи.Добавить(Задача);
			Вариант.КорСчета.Добавить(Задача.ОтборДанных.КорСчет);
		КонецЕсли;
	КонецЦикла;
	
	// общие параметры получения данных
	СчетСебестоимостиПродаж = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Счет", СчетСебестоимостиПродаж); // может быть уточнен
	ПараметрыОписания.Вставить("КорСчет");
	ПараметрыОписания.Вставить("ЭтапРасчета");
	
	Для Каждого Вариант Из Варианты Цикл
		
		Если Не ЗначениеЗаполнено(Вариант.Задачи) Тогда
			Продолжить;
		КонецЕсли;
		
		// получение данных из регистра бухгалтерии
		ШаблонТекстаЗапроса = // модифицируется при помощи СхемаЗапроса с небезопасным обращением к элементам запроса по индексу
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
		|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО
		|ПОМЕСТИТЬ ВТ_Обороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Счет В (&СчетаСебестоимостиПродаж),
		|			,
		|			Организация В (&Организации),
		|			КорСчет В
		|				(ВЫБРАТЬ
		|					СчетаУчета.Ссылка
		|				ИЗ
		|					СчетаУчета),
		|			) КАК ХозрасчетныйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.КорСчет,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
		|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КорСчет";
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
		
		Если Вариант.ОтборПоКорСчетам Тогда
			СоздатьВременнуюТаблицуСчетаУчета(Вариант.КорСчета, ПроцессорПолученияДанных);
		Иначе
			// избавимся от условия по кор.счету
			ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
			ОператорВыбрать = ПакетЗапросов.Операторы[0];
			ОператорВыбрать.Источники[0].Источник.Параметры[6].Выражение = Новый ВыражениеСхемыЗапроса("");// УсловиеКорСчета
			ОператорВыбрать.ВыбираемыеПоля.Удалить(1); // КорСчет. Автоматически будет удален индекс
			ПакетЗапросов.Индекс.Добавить("Счет");
		КонецЕсли;
	
		ДобавитьКолонкиСумм(СхемаЗапроса, "ХозрасчетныйОбороты.%ОборотДт", ПроцессорПолученияДанных.ОписаниеСумм);
	
		Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
		Запрос.УстановитьПараметр("СчетаСебестоимостиПродаж", БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетСебестоимостиПродаж));
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
		ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы); // создана ВТ_Обороты
		
		// Группировка данных регистра бухгалтерии отличается для разных этапов расчета.
		ШаблонТекстаЗапросов = // модифицируется при помощи СхемаЗапроса с небезопасным обращением к элементам запроса по индексу
		"ВЫБРАТЬ
		|	КорСчета.Счет КАК КорСчет,
		|	Обороты.ВариантНО КАК ВариантНО,
		|	Обороты.Счет КАК Счет
		|ИЗ
		|	ВТ_Обороты КАК Обороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК КорСчета
		|		ПО Обороты.КорСчет = КорСчета.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаЕН КАК СчетаДоходовИРасходовЕНВД
		|		ПО Обороты.Счет = СчетаДоходовИРасходовЕНВД.Счет
		|СГРУППИРОВАТЬ ПО
		|	КорСчета.Счет,
		|	Обороты.ВариантНО,
		|	Обороты.Счет
		|";
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапросов);
		
		Если Не Вариант.ОтборПоКорСчетам Тогда
			// избавимся от соединения с КорСчета
			ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
			ОператорВыбрать = ПакетЗапросов.Операторы[0];
			ОператорВыбрать.Источники.Удалить(1); // КорСчета. Поле и группировка будут удалены автоматически
		КонецЕсли;
	
		ДобавитьКолонкиСумм(СхемаЗапроса, "Обороты.%", ПроцессорПолученияДанных.ОписаниеСумм);

		
		ТекстыЗапросовЭтаповРасчета = Новый Структура;   // Здесь можем идентифицировать только два этапа, остальные будем пропускать.
		ТекстыЗапросовЭтаповРасчета.Вставить("Все", ""); // ниже определим из той же СхемаЗапроса, убрав информацию о счетах специальных режимов
		ТекстыЗапросовЭтаповРасчета.Вставить("ОтнесенныеНаСпециальныеРежимы", СхемаЗапроса.ПолучитьТекстЗапроса());
		
		ИсточникиЗапроса  = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники;
		ИсточникиЗапроса.Удалить(ИсточникиЗапроса.Количество() - 1); // последний - с СчетаДоходовИРасходовЕНВД; автоматически будет удалено и поле Счет
		ТекстыЗапросовЭтаповРасчета.Все = СхемаЗапроса.ПолучитьТекстЗапроса();
		СхемаЗапроса = Неопределено; // использование этого экземпляра ниже может привести к ошибкам
		
		Выборки = Новый Соответствие;
		Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
		Для Каждого ЭтапРасчета Из ПроцессорПолученияДанных.ЭтапыРасчета Цикл
			Если ТекстыЗапросовЭтаповРасчета.Свойство(ЭтапРасчета) Тогда
				Запрос.Текст = ТекстыЗапросовЭтаповРасчета[ЭтапРасчета];
				Запрос.Текст = НалоговыйУчет.ДобавитьТекстЗапросаСчетаЕНВД(Запрос);
				РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
				Выборки.Вставить(ЭтапРасчета, РезультатЗапроса.Выбрать());
			КонецЕсли;
		КонецЦикла;
	
		// Запишем результат
		Для Каждого Задача Из Вариант.Задачи Цикл
			
			Если Выборки.Получить(Задача.ЭтапРасчета) = Неопределено Тогда
				// не можем идентифицировать такие расходы
				ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
				Продолжить;
			КонецЕсли;
			
			// описание
			ПараметрыОписания.КорСчет     = Задача.ОтборДанных.КорСчет;
			ПараметрыОписания.ЭтапРасчета = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
				
			// расчет 
			Отбор = Новый Структура;
			Отбор.Вставить("ВариантНО", Задача.ВариантНО);
			Если Вариант.ОтборПоКорСчетам Тогда
				Отбор.Вставить("КорСчет", Задача.ОтборДанных.КорСчет);
			КонецЕсли;
			
			Выборка = Выборки[Задача.ЭтапРасчета];
			Выборка.Сбросить(); // Используем обход выборки, чтобы сохранить порядок, выбранный запросом
			
			Пока Выборка.НайтиСледующий(Отбор) Цикл
				
				КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
				
				// протокол - детально по субсчетам
				Если Задача.ЭтапРасчета <> "Все" Тогда
					
					ПараметрыОписанияДетально = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОписания);
					ПараметрыОписанияДетально.Вставить("Счет",        Выборка.Счет);
					ПараметрыОписанияДетально.Вставить("ЭтапРасчета", ""); // и так понятно из номера счета
					
					ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, Выборка);
					ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						Вариант.ШаблонОписания,
						ПараметрыОписанияДетально);
					ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Выборка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// протокол - сводно
			Если Не Задача.ПротоколЗаполнен Тогда
				ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
				ЗаписьПротокола.Описание        = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Вариант.ШаблонОписания, ПараметрыОписания);
				ЗаписьПротокола.Условие.Счет    = СчетСебестоимостиПродаж;
				ЗаписьПротокола.Условие.КорСчет = Задача.ОтборДанных.КорСчет;
			КонецЕсли;
			
		КонецЦикла; // Задачи
	КонецЦикла; // Варианты
	
КонецПроцедуры

Функция НастройкиОтчетаПрямыеРасходы(ЭтапРасчета, Счет, КорСчет, СхемаРасчета)
		
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотыСчета",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		Счет,
		СхемаРасчета.ОписаниеСумм);
		
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.НастроитьОборотыСчета(Настройки, "Дт");
	
	Если ЗначениеЗаполнено(КорСчет) Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			"КорСчетОтбор",
			КорСчет,
			ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	
	// состав субконто - по умолчанию
	ОписаниеСубконто = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета("Субконто", Счет, 1);
	Если ОписаниеСубконто <> Неопределено Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеСубконто.Имя,
			ОписаниеСубконто.Представление);
	КонецЕсли;
	

	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область КосвенныеРасходы

Процедура ПолучитьКосвенныеРасходы(ПроцессорПолученияДанных)
	
	// варианты алгоритма
	Варианты = Новый ТаблицаЗначений;
	Варианты.Колонки.Добавить("ОтборПоВидамРасходов", Новый ОписаниеТипов("Булево"));
	Варианты.Колонки.Добавить("Задачи",               Новый ОписаниеТипов("Массив"));
	Варианты.Колонки.Добавить("ВидыРасходов",         Новый ОписаниеТипов("Массив"));
	Варианты.Колонки.Добавить("ШаблонОписания",       Новый ОписаниеТипов("Строка"));
	
	// 1. сводно
	Вариант = Варианты.Добавить();
	Вариант.ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет][ЭтапРасчета]';
									|en = 'Account debit turnover [Счет][ЭтапРасчета]'");
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если Не ЗначениеЗаполнено(Задача.ОтборДанных.ВидРасходов) Тогда
			Вариант.Задачи.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	// 2. по видам расходов
	Вариант = Варианты.Добавить();
	Вариант.ОтборПоВидамРасходов = Истина;
	Вариант.ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет] в корреспонденции со счетами затрат по статьям вида ""[ВидРасходов]""[ЭтапРасчета]';
									|en = 'Account debit turnover [Счет] in correspondence with cost accounts by items of kind ""[ВидРасходов]""[ЭтапРасчета]'");
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если ЗначениеЗаполнено(Задача.ОтборДанных.ВидРасходов) Тогда
			Вариант.Задачи.Добавить(Задача);
			Вариант.ВидыРасходов.Добавить(Задача.ОтборДанных.ВидРасходов);
		КонецЕсли;
	КонецЦикла;
	
	// общие параметры получения данных
	СчетаУчета   = Новый Массив;
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		СчетаУчета.Добавить(Задача.ОтборДанных.Счет);
	КонецЦикла;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Счет");        // 90.07, 90.08 или их субсчета
	ПараметрыОписания.Вставить("ВидРасходов");
	ПараметрыОписания.Вставить("ЭтапРасчета");
	
	// Получение данных регистра бухгалтерии
	СоздатьВременнуюТаблицуСчетаУчета(СчетаУчета, ПроцессорПолученияДанных);
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Движения.СчетДт КАК Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Движения.СубконтоДт1 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО,
	|	ВЫБОР
	|		КОГДА Движения.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт1
	|		КОГДА Движения.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт2
	|		КОГДА Движения.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	СУММА(Движения.Сумма) КАК Сумма,
	|	СУММА(Движения.СуммаНУДт) КАК СуммаНУ,
	|	СУММА(Движения.СуммаПРДт) КАК СуммаПР,
	|	СУММА(Движения.СуммаВРДт) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация В (&Организации)
	|				И Активность
	|				И СчетДт В
	|					(ВЫБРАТЬ
	|						СчетаУчета.Ссылка
	|					ИЗ
	|						СчетаУчета),
	|			,
	|			) КАК Движения
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.СчетДт,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Движения.СубконтоДт1 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА Движения.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт1
	|		КОГДА Движения.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт2
	|		КОГДА Движения.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат";
	
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы); // Создана ВТ_Обороты
	
	// Для группировки нужна информация о статьях затрат
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходов КАК ВидРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА СтатьиЗатрат.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Учитываются
	|ПОМЕСТИТЬ ВТ_СтатьиЗатрат
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	// Группировка данных регистра бухгалтерии отличается для разных вариантов и этапов расчета.
	// Всего пять вариантов группировки: два для этапа "Все" (с отбором и без) и по одному для остальных этапов.
	ТекстыЗапросовЭтаповРасчета = Новый Структура;
	// 1a - Все, без отбора
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	Обороты.ВариантНО КАК ВариантНО
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	Обороты.ВариантНО";
	ТекстыЗапросовЭтаповРасчета.Вставить("Все_БезОтбора", ТекстЗапроса);
	
	// 1b - Все, с отбором
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	Обороты.ВариантНО КАК ВариантНО,
	|	СтатьиЗатрат.ВидРасходов КАК ВидРасходов
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Обороты.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	Обороты.ВариантНО,
	|	СтатьиЗатрат.ВидРасходов";
	ТекстыЗапросовЭтаповРасчета.Вставить("Все", ТекстЗапроса);
		
	// 2 - НеУчитываемые
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	Обороты.ВариантНО КАК ВариантНО,
	|	СтатьиЗатрат.ВидРасходов КАК ВидРасходов
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Обороты.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|			И (НЕ СтатьиЗатрат.Учитываются)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	Обороты.ВариантНО,
	|	СтатьиЗатрат.ВидРасходов";
	ТекстыЗапросовЭтаповРасчета.Вставить("НеУчитываемые", ТекстЗапроса);
	
	// 3 - ОтнесенныеНаСпециальныеРежимы
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	Обороты.ВариантНО КАК ВариантНО,
	|	СчетаДоходовИРасходовЕНВД.Счет КАК СчетСпециальныеРежимы,
	|	ЕСТЬNULL(СтатьиЗатрат.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)) КАК ВидРасходов
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаЕН КАК СчетаДоходовИРасходовЕНВД
	|		ПО Обороты.Счет = СчетаДоходовИРасходовЕНВД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Обороты.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(СтатьиЗатрат.ВидДеятельности, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)) <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|	И ЕСТЬNULL(СтатьиЗатрат.Учитываются, ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	Обороты.ВариантНО,
	|	СчетаДоходовИРасходовЕНВД.Счет,
	|	ЕСТЬNULL(СтатьиЗатрат.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка))";
	ТекстыЗапросовЭтаповРасчета.Вставить("ОтнесенныеНаСпециальныеРежимы", ТекстЗапроса);
	
	// 4 - РаспределенныеНаСпециальныеРежимы
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	Обороты.ВариантНО КАК ВариантНО,
	|	СчетаДоходовИРасходовЕНВД.Счет КАК СчетСпециальныеРежимы,
	|	СтатьиЗатрат.ВидРасходов КАК ВидРасходов
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаЕН КАК СчетаДоходовИРасходовЕНВД
	|		ПО Обороты.Счет = СчетаДоходовИРасходовЕНВД.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Обороты.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|			И (СтатьиЗатрат.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты))
	|			И (СтатьиЗатрат.Учитываются)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	Обороты.ВариантНО,
	|	СчетаДоходовИРасходовЕНВД.Счет,
	|	СтатьиЗатрат.ВидРасходов";
	ТекстыЗапросовЭтаповРасчета.Вставить("РаспределенныеНаСпециальныеРежимы", ТекстЗапроса);
		
	Выборки = Новый Структура;
	Запрос  = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	СхемаЗапроса = Новый СхемаЗапроса;
	Для Каждого ОписаниеТекстаЗапроса Из ТекстыЗапросовЭтаповРасчета Цикл
		Если ОписаниеТекстаЗапроса.Ключ = "Все_БезОтбора" Тогда
			ЭтапРасчета = "Все";
		Иначе
			ЭтапРасчета = ОписаниеТекстаЗапроса.Ключ;
		КонецЕсли;
		Если ПроцессорПолученияДанных.ЭтапыРасчета.Найти(ЭтапРасчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СхемаЗапроса.УстановитьТекстЗапроса(ОписаниеТекстаЗапроса.Значение);
		ДобавитьКолонкиСумм(СхемаЗапроса, "Обороты.%", ПроцессорПолученияДанных.ОписаниеСумм);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.Текст = НалоговыйУчет.ДобавитьТекстЗапросаСчетаЕНВД(Запрос);
		РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
		Выборки.Вставить(ОписаниеТекстаЗапроса.Ключ, РезультатЗапроса.Выбрать());
	КонецЦикла;
	
	Для Каждого Вариант Из Варианты Цикл
		
		// Запишем результат
		Для Каждого Задача Из Вариант.Задачи Цикл
			
			Если Задача.ЭтапРасчета = "Все" Тогда
				ИмяВыборки = ?(Вариант.ОтборПоВидамРасходов, "Все", "Все_БезОтбора");
			Иначе
				ИмяВыборки = Задача.ЭтапРасчета;
			КонецЕсли;
			
			Если Не Выборки.Свойство(ИмяВыборки) Тогда
				// не можем идентифицировать такие расходы
				ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
				Продолжить;
			КонецЕсли;
			
			Если Задача.ЭтапРасчета = "НеУчитываемые"
				И Вариант.ОтборПоВидамРасходов
				И Задача.ОтборДанных.ВидРасходов <> Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				// заведомо бессмысленный шаг
				ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
				Продолжить;
			КонецЕсли;
			
			Выборка = Выборки[ИмяВыборки];
			
			// описание
			ЗаполнитьЗначенияСвойств(ПараметрыОписания, Задача.ОтборДанных);
			ПараметрыОписания.ЭтапРасчета = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
			
			// расчет 
			Отбор = Новый Структура;
			Отбор.Вставить("Счет", Задача.ОтборДанных.Счет);
			Отбор.Вставить("ВариантНО", Задача.ВариантНО);
			Если Вариант.ОтборПоВидамРасходов Тогда
				Отбор.Вставить("ВидРасходов",  Задача.ОтборДанных.ВидРасходов);
			КонецЕсли;
			
			Выборка.Сбросить();
			Пока Выборка.НайтиСледующий(Отбор) Цикл // по счетам учета
				
				КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
				
				// протокол - детально по субсчетам
				Если ЭтапРасчетаСпециальныеРежимы(Задача.ЭтапРасчета) Тогда
					
					ПараметрыОписанияДетально = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОписания);
					ПараметрыОписанияДетально.Вставить("Счет", Выборка.СчетСпециальныеРежимы);
					
					ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, Выборка);
					ЗаписьПротокола.Описание     = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						Вариант.ШаблонОписания,
						ПараметрыОписанияДетально);
					ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Выборка);
					ЗаписьПротокола.Условие.Счет = Выборка.СчетСпециальныеРежимы;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// протокол - сводно
			Если Не Задача.ПротоколЗаполнен Тогда
				ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
				ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Вариант.ШаблонОписания, ПараметрыОписания);
				ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Задача.ОтборДанных);
			КонецЕсли;
			
		КонецЦикла; // Задачи
	КонецЦикла; // Варианты
	
КонецПроцедуры

Функция НастройкиОтчетаКосвенныеРасходы(ЭтапРасчета, Счет, ВидРасходов, СхемаРасчета)
		
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотыСчета",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		Счет,
		СхемаРасчета.ОписаниеСумм);
		
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.НастроитьОборотыСчета(Настройки, "Дт");
	
	Отбор = Настройки.Отчет.ПользовательскиеНастройки.Элементы.Найти("Отбор");
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
		Настройки,
		"КорСубконто1",
		НСтр("ru = 'Кор. Субконто1';
			|en = 'Corr. Extra dimension1'"));

	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(Настройки, "ВидРасходов", ВидРасходов);
	КонецЕсли;
	
	Если ЭтапРасчета = "НеУчитываемые" Тогда
		
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(
			Настройки,
			"ВидРасходов",
			Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);
		
	ИначеЕсли ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
			
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(
			Настройки,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат",
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты,
			ВидСравненияКомпоновкиДанных.Равно);
			
	ИначеЕсли ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
		
		// Расходы идентифицируются по счету учета в качестве связанных с видами деятельности, облагаемых налогом в рамках
		// специальных режимов
		// (далее - "связанных со специальными режимами").
		// Однако, среди этих расходов следует выделить расходы, сразу отнесенные на специальные режимы или распределенные позднее.
		// То есть "связанные = отнесенные + распределенные".
		// Для разделения на "отнесенные" и "распределенные" используем свойство корреспондирующей статьи.
		// Так как в общем случае это свойство недостаточно надежный признак, то расходами, отнесенными на специальные режимы
		// считаем все, связанные со специальными режимами, кроме распределенных на специальные режимы.
		
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(
			Настройки,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат",
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты,
			ВидСравненияКомпоновкиДанных.НеРавно);
			
	КонецЕсли;
		
	Возврат Настройки;
	
КонецФункции

Процедура ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(Настройки, ИмяСвойства, ЗначениеОтбора, ВидСравненияОтбора = Неопределено)
	
	Отбор = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОтборНастроекОтчета(Настройки);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаИЛИ = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Для НомерСубконто = 1 По 3 Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ГруппаИЛИ,
			"КорСубконто" + НомерСубконто + "." + ИмяСвойства,
			ЗначениеОтбора,
			ВидСравненияОтбора,
			,       // Использование
			Истина);// В пользовательские настройки
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПрочиеДоходыРасходы

// ИмяПоказателя - Строка - "ПрочиеДоходы" или "ПрочиеРасходы"
Процедура ПолучитьПрочиеДоходыРасходы(ПроцессорПолученияДанных, ИмяПоказателя)
	
	// Поддерживаем только предопределенные субсчета 91.01 и 91.02.
	// Не поддерживаем "самодельные" субсчета 91 счета.
	
	// Виды статей
	ВидыСтатей = Новый Массив;
	Для Каждого ОписаниеЗначения Из Метаданные.Перечисления.ВидыПрочихДоходовИРасходов.ЗначенияПеречисления Цикл
		ВидыСтатей.Добавить(Перечисления.ВидыПрочихДоходовИРасходов[ОписаниеЗначения.Имя]);
	КонецЦикла;
	ВидыСтатей.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка());
	СоздатьВременнуюТаблицуСтатьиПрочихДоходовРасходов(ВидыСтатей, ПроцессорПолученияДанных);
	
	// Выполним запрос
	ХарактеристикиДоходовРасходов = ХарактеристикиПрочиеДоходыРасходы(ИмяПоказателя, Ложь);
	РезультатЗапроса = РезультатЗапросаПрочиеДоходыРасходы(ХарактеристикиДоходовРасходов, ПроцессорПолученияДанных);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Запишем результат
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Не СтатьяПрочихДоходовРасходовПрименима(Задача.ОтборДанных.ВидСтатьи, ИмяПоказателя, Задача.ЭтапРасчета) Тогда
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		// описание
		ШаблонОписания = "";
		Если Задача.ОтборДанных.ВидСтатьи = Неопределено Тогда
			ШаблонОписания = ХарактеристикиДоходовРасходов.ШаблонОписанияБезОтбора;
		ИначеЕсли Не ЗначениеЗаполнено(Задача.ОтборДанных.ВидСтатьи) Тогда
			ШаблонОписания = ХарактеристикиДоходовРасходов.ШаблонОписанияБезСтатьи;
		Иначе
			ШаблонОписания = ХарактеристикиДоходовРасходов.ШаблонОписания;
		КонецЕсли;
		ХарактеристикиДоходовРасходов.ПараметрыОписания.ВидСтатьи   = Задача.ОтборДанных.ВидСтатьи;
		ХарактеристикиДоходовРасходов.ПараметрыОписания.ЭтапРасчета = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
		
		// расчет
		Если Задача.ОтборДанных.ВидСтатьи = Неопределено Тогда
			ВидыСтатейРасчета = ВидыСтатей; // Все
		Иначе
			ВидыСтатейРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача.ОтборДанных.ВидСтатьи);
		КонецЕсли;
		
		Для Каждого ВидСтатьи Из ВидыСтатейРасчета Цикл
		
			Отбор = НовыйОтборПрочихДоходовРасходов(Задача.ЭтапРасчета, ВидСтатьи);
			Отбор.Вставить("ВариантНО", Задача.ВариантНО);
			
			Выборка.Сбросить();
			Пока Выборка.НайтиСледующий(Отбор) Цикл
				
				Если Задача.ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" И ИмяПоказателя = "ПрочиеРасходы" Тогда
					// Учтем долю специальных режимов
					СуммаСпециальныеРежимы = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
					Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ПроцессорПолученияДанных.ОписаниеСумм) Цикл
						СуммаСпециальныеРежимы[ИмяСвойства] = Выборка[ИмяСвойства] * Выборка.ДоляСпециальныеРежимы;
					КонецЦикла;
					КоллекцииСумм.Сложить(Задача, СуммаСпециальныеРежимы, ПроцессорПолученияДанных.ОписаниеСумм);
				Иначе
					КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// протокол
		ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
		ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			ШаблонОписания,
			ХарактеристикиДоходовРасходов.ПараметрыОписания);
		ЗаписьПротокола.Условие.Счет      = ХарактеристикиДоходовРасходов.Счет;
		ЗаписьПротокола.Условие.ВидСтатьи = Задача.ОтборДанных.ВидСтатьи;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ХарактеристикиПрочиеДоходыРасходы(ИмяПоказателя, ДетализироватьПоРеализованнымОбъектам)
	
	Параметры = Новый Структура;
	
	// счета учета
	Параметры.Вставить("Счет", ПланыСчетов.Хозрасчетный[ИмяПоказателя]);
	Если ИмяПоказателя = "ПрочиеРасходы" Тогда
		Параметры.Вставить("СторонаСчета", "Дебет");
	Иначе
		Параметры.Вставить("СторонаСчета", "Кредит");
	КонецЕсли;
	
	// детализация
	Параметры.Вставить("ДетализироватьПоРеализованнымОбъектам", ДетализироватьПоРеализованнымОбъектам);
	Параметры.Вставить("УчитыватьДолиСпециальныеРежимы", (ИмяПоказателя = "ПрочиеРасходы" И Не ДетализироватьПоРеализованнымОбъектам));
	
	// описание расчета
	// [ЭтапРасчета] выводится в отдельной строке - см. ПредставлениеЭтапаРасчета()
	Если Параметры.СторонаСчета = "Кредит" Тогда
		ШаблонОписания          = НСтр("ru = 'Оборот по кредиту счета [Счет] по статьям вида ""[ВидСтатьи]""[ЭтапРасчета]';
										|en = 'Credit turnover of account [Счет] by items of kind ""[ВидСтатьи]""[ЭтапРасчета]'");
		ШаблонОписанияБезСтатьи = НСтр("ru = 'Оборот по кредиту счета [Счет] без указания статьи доходов[ЭтапРасчета]';
										|en = '[Счет] account credit turnover without specifying income item [ЭтапРасчета]'");
		ШаблонОписанияБезОтбора = НСтр("ru = 'Оборот по кредиту счета [Счет][ЭтапРасчета]';
										|en = 'Account credit turnover [Счет][ЭтапРасчета]'");
	Иначе
		ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет] по статьям вида ""[ВидСтатьи]""[ЭтапРасчета]';
								|en = 'Account debit turnover [Счет] by items of kind ""[ВидСтатьи]""[ЭтапРасчета]'");
		ШаблонОписанияБезСтатьи = НСтр("ru = 'Оборот по дебету счета [Счет] без указания статьи расходов[ЭтапРасчета]';
										|en = '[Счет] account debit turnover without specifying expense item [ЭтапРасчета]'");
		ШаблонОписанияБезОтбора = НСтр("ru = 'Оборот по дебету счета [Счет][ЭтапРасчета]';
										|en = 'Account debit turnover [Счет][ЭтапРасчета]'");
	КонецЕсли;
	Параметры.Вставить("ШаблонОписания",          ШаблонОписания);
	Параметры.Вставить("ШаблонОписанияБезСтатьи", ШаблонОписанияБезСтатьи);
	Параметры.Вставить("ШаблонОписанияБезОтбора", ШаблонОписанияБезОтбора);
	Параметры.Вставить("ПараметрыОписания", Новый Структура);
	Параметры.ПараметрыОписания.Вставить("Счет", Параметры.Счет);
	Параметры.ПараметрыОписания.Вставить("ВидСтатьи");   // должен быть установлен при подготовке текста описания
	Параметры.ПараметрыОписания.Вставить("ЭтапРасчета"); // должен быть установлен при подготовке текста описания
	
	Возврат Параметры;
	
КонецФункции

Функция РезультатЗапросаПрочиеДоходыРасходы(ХарактеристикиДоходовРасходов, ПроцессорПолученияДанных)
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
	Если ХарактеристикиДоходовРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	КонецЕсли;
	
	// Данные регистра бухгалтерии
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса с небезопасным обращением к элементам запроса по индексу
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяДоходов,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&Счет),
	|			&ВидыСубконто,
	|			Организация В (&Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиПрочихДоходовРасходов.Ссылка
	|					ИЗ
	|						СтатьиПрочихДоходовРасходов),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяДоходов";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ХарактеристикиДоходовРасходов.СторонаСчета = "Кредит" Тогда
		ШаблонСумм = "ХозрасчетныйОбороты.%ОборотКт";
	Иначе
		ШаблонСумм = "ХозрасчетныйОбороты.%ОборотДт";
	КонецЕсли;
	ДобавитьКолонкиСумм(СхемаЗапроса, ШаблонСумм, ПроцессорПолученияДанных.ОписаниеСумм);
	
	Если ХарактеристикиДоходовРасходов.УчитыватьДолиСпециальныеРежимы Тогда
		// Нужна детализация по месяцам, так как в разных месяцах может быть разная доля специальных режимов.
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Параметры[2].Выражение = Новый ВыражениеСхемыЗапроса("Месяц");
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "Период", "Месяц", Истина);
	КонецЕсли;
	
	Если ХарактеристикиДоходовРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "ХозрасчетныйОбороты.Субконто3", "РеализованныйОбъект", Истина);
	КонецЕсли;
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр("Счет",         БухгалтерскийУчетПовтИсп.СчетаВИерархии(ХарактеристикиДоходовРасходов.Счет));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	// Группировка данных регистра бухгалтерии
	
	// Соединение с временной таблицей ДолиСпециальныеРежимы используется для расходов.
	// В этом запросе группируем по ДоляСпециальныеРежимы, чтобы избежать ошибок округления:
	// сначала просуммируем по статьям, затем (вне запроса) будем умножать на долю.
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СтатьиПрочихДоходовРасходов.ВидСтатьи КАК ВидСтатьи,
	|	СтатьиПрочихДоходовРасходов.ВидДеятельности КАК ВидДеятельности,
	|	СтатьиПрочихДоходовРасходов.Учитываются КАК Учитываются,
	|	ЕСТЬNULL(ДолиСпециальныеРежимы.Доля, 0) КАК ДоляСпециальныеРежимы,
	|	Обороты.ВариантНО КАК ВариантНО
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПрочихДоходовРасходов КАК СтатьиПрочихДоходовРасходов
	|		ПО Обороты.СтатьяДоходов = СтатьиПрочихДоходовРасходов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиСпециальныеРежимы КАК ДолиСпециальныеРежимы
	|		ПО Обороты.Месяц = ДолиСпециальныеРежимы.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ДолиСпециальныеРежимы.Доля, 0),
	|	СтатьиПрочихДоходовРасходов.ВидСтатьи,
	|	СтатьиПрочихДоходовРасходов.ВидДеятельности,
	|	СтатьиПрочихДоходовРасходов.Учитываются,
	|	Обороты.ВариантНО
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ХарактеристикиДоходовРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "Обороты.РеализованныйОбъект", "РеализованныйОбъект", Истина);
	КонецЕсли;
	
	ДобавитьКолонкиСумм(СхемаЗапроса, "Обороты.%", ПроцессорПолученияДанных.ОписаниеСумм);
		
	Если ХарактеристикиДоходовРасходов.УчитыватьДолиСпециальныеРежимы Тогда
		
		СоздатьВременнуюТаблицуДолиСпециальныеРежимы(ПроцессорПолученияДанных);
		
	Иначе // Удалим соединение с ДолиСпециальныеРежимы
		
		Источники = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники;
		КоличествоИсточников = Источники.Количество();
		Для НомерСКонца = 1 По КоличествоИсточников Цикл
			Индекс = КоличествоИсточников - НомерСКонца;
			Если Источники[Индекс].Источник.Псевдоним = "ДолиСпециальныеРежимы" Тогда
				Источники.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Выполним запрос
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиОтчетаПрочиеДоходыРасходы(ЭтапРасчета, Счет, ВидСтатьи, СхемаРасчета)
	
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотноСальдоваяВедомостьПоСчету",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		Счет,
		СхемаРасчета.ОписаниеСумм);
	
	ОписаниеПоляСтатьяДоходовРасходов = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		"Субконто",
		Счет,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		
	Если ОписаниеПоляСтатьяДоходовРасходов <> Неопределено Тогда
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеПоляСтатьяДоходовРасходов.Имя,
			ОписаниеПоляСтатьяДоходовРасходов.Представление);
			
		ДобавитьОтборПрочихДоходовРасходовВНастройкиОтчета(Настройки, ОписаниеПоляСтатьяДоходовРасходов.Имя, ЭтапРасчета, ВидСтатьи, Счет);
			
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ДанныеПоСчетуПрочиеРасходыМожноПолучитьОтчетомОборотыСчета()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ         
	|	Счета.Ссылка 
	|ИЗ
	|	Счета КАК Счета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Счета КАК Счета
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = Счета.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";

	Результат = Запрос.ВыполнитьПакет();
	
	// субсчетов не должно быть
	Если Результат[1].Выбрать().Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// субконто должны быть следующими (в том же порядке):
	ПотребныеСубконто = Новый Массив;
	ПотребныеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ПотребныеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	
	Выборка = Результат[2].Выбрать();
	Для Каждого ВидСубконто Из ПотребныеСубконто Цикл
		Если Не Выборка.Следующий() Или Выборка.ВидСубконто <> ВидСубконто Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Процедура СоздатьВременнуюТаблицуСтатьиПрочихДоходовРасходов(ВидыДоходовРасходов, ПроцессорПолученияДанных)
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр("ВидыДоходовРасходов", ВидыДоходовРасходов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиПрочихРасходов.Ссылка КАК Ссылка,
	|	СтатьиПрочихРасходов.ВидПрочихДоходовИРасходов КАК ВидСтатьи,
	|	СтатьиПрочихРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельности,
	|	СтатьиПрочихРасходов.ПринятиеКналоговомуУчету КАК Учитываются
	|ПОМЕСТИТЬ СтатьиПрочихДоходовРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиПрочихРасходов
	|ГДЕ
	|	СтатьиПрочихРасходов.ВидПрочихДоходовИРасходов В(&ВидыДоходовРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатьиПрочихДоходов.Ссылка,
	|	СтатьиПрочихДоходов.ВидПрочихДоходовИРасходов,
	|	СтатьиПрочихДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	СтатьиПрочихДоходов.ПринятиеКналоговомуУчету
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиПрочихДоходов
	|ГДЕ
	|	СтатьиПрочихДоходов.ВидПрочихДоходовИРасходов В(&ВидыДоходовРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка),
	|	ИСТИНА
	|ГДЕ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка) В (&ВидыДоходовРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка),
	|	ИСТИНА
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка) В (&ВидыДоходовРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
		
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
КонецПроцедуры

Функция НовыйОтборПрочихДоходовРасходов(ЭтапРасчета, ВидСтатьи)
	

	Отбор = НовыйОтборПоЭтапуРасчета(ЭтапРасчета);
	Отбор.Вставить("ВидСтатьи", ВидСтатьи);
	
	Возврат Отбор;
	
КонецФункции

Процедура ДобавитьОтборПрочихДоходовРасходовВНастройкиОтчета(Настройки, ИмяИлиОписаниеПоля, ЭтапРасчета, ВидСтатьи, Счет = Неопределено)
	
	// См. также НовыйОтборПрочихДоходовРасходов(), НастройкиОтчетаПрочиеДоходыРасходы().
	
	Если ТипЗнч(ИмяИлиОписаниеПоля) = Тип("Структура") Тогда
		ИмяПоля = ИмяИлиОписаниеПоля.Имя;
	Иначе
		ИмяПоля = ИмяИлиОписаниеПоля;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяПоля) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидСтатьи) Тогда
		// Отбор по виду статьи
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ИмяПоля + "." + "ВидПрочихДоходовИРасходов",
			ВидСтатьи);
	ИначеЕсли ВидСтатьи <> Неопределено Тогда
		// Отбор по незаполненной статье
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ИмяПоля,
			ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка(),
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		// Отбор по свойствам, зависящим от этапа не имеет смысла
		Возврат;
	КонецЕсли;
	
	Если ЭтапРасчета = "НеУчитываемые" Тогда
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ИмяПоля + "." + "ПринятиеКНалоговомуУчету",
			Ложь);
		
	ИначеЕсли ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки, 
			ИмяПоля + "." + "ВидДеятельностиДляНалоговогоУчетаЗатрат",
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ИмяПоля + "." + "ПринятиеКНалоговомуУчету",
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтатьяПрочихДоходовРасходовПрименима(ВидСтатьи, Показатель, ЭтапРасчета)
	
	Если ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
		
		Если Показатель = "ПрочиеДоходы"
			Или ВидСтатьи = Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств
			Или ВидСтатьи = Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов Тогда 
			// доходы не могут быть распределяемыми
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПрочиеРасходыПризнанныеПослеПолученияУбытка

Процедура ПолучитьПрочиеРасходыПризнанныеПослеПолученияУбытка(ПроцессорПолученияДанных)
	
	ХарактеристикиРасходов = ХарактеристикиРасходыПризнанныеПослеПолученияУбытка(Ложь);
	
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		ЗаполнитьЗначенияСвойств(ХарактеристикиРасходов.ВидыСтатей.Добавить(), Задача.ОтборДанных);
	КонецЦикла;
	
	СоздатьВременнуюТаблицуСтатьиПрочихДоходовРасходов(
		ХарактеристикиРасходов.ВидыСтатей.ВыгрузитьКолонку("ВидСтатьи"),
		ПроцессорПолученияДанных);
	
	РезультатЗапроса = РезультатЗапросаРасходыПризнанныеПослеПолученияУбытка(ХарактеристикиРасходов, ПроцессорПолученияДанных);
		
	Выборка = РезультатЗапроса.Выбрать();
	
	// Запишем результат
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Не СтатьяПрочихДоходовРасходовПрименима(Задача.ОтборДанных.ВидСтатьи, "ПрочиеРасходы", Задача.ЭтапРасчета) Тогда
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		// описание
		ХарактеристикиРасходов.ПараметрыОписания.ВидСтатьи            = Задача.ОтборДанных.ВидСтатьи;
		ХарактеристикиРасходов.ПараметрыОписания.СпособПереносаУбытка = Задача.ОтборДанных.СпособПереносаУбытка;
		ХарактеристикиРасходов.ПараметрыОписания.ЭтапРасчета          = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
		
		// расчет
		Отбор = НовыйОтборПрочихДоходовРасходов(Задача.ЭтапРасчета, Задача.ОтборДанных.ВидСтатьи);
		Отбор.Вставить("ВариантНО", Задача.ВариантНО);
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(Отбор) Цикл
			КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
		КонецЦикла;
		
		// протокол - сводно
		Если Не Задача.ПротоколЗаполнен Тогда
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
			ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ХарактеристикиРасходов.ШаблонОписания,
				ХарактеристикиРасходов.ПараметрыОписания);
			ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ХарактеристикиРасходов);
			ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Задача.ОтборДанных);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ХарактеристикиРасходыПризнанныеПослеПолученияУбытка(ДетализироватьПоРеализованнымОбъектам)

	Параметры = Новый Структура;
	// счета учета
	Параметры.Вставить("СчетРасходов", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Параметры.Вставить("СчетУбытков",  ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	// аналитика на этих счетах
	Параметры.Вставить("ДетализироватьПоРеализованнымОбъектам",   ДетализироватьПоРеализованнымОбъектам);
	Параметры.Вставить("ВидыСтатей",                              Новый ТаблицаЗначений);
	Параметры.ВидыСтатей.Колонки.Добавить("ВидСтатьи",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПрочихДоходовИРасходов"));
	Параметры.ВидыСтатей.Колонки.Добавить("СпособПереносаУбытка", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРБП"));
	// описание расчета
	Параметры.Вставить(
		"ШаблонОписания",
		НСтр("ru = 'Оборот по дебету счета [СчетРасходов] по статьям вида ""[ВидСтатьи]"" в корреспонденции со счетом [СчетУбытков] по статьям вида ""[СпособПереносаУбытка]""[ЭтапРасчета]';
			|en = 'Account debit turnover [СчетРасходов] by items of kind ""[ВидСтатьи]"" in correspondence with account [СчетУбытков] by items of kind ""[СпособПереносаУбытка]""[ЭтапРасчета]'"));
	Параметры.Вставить("ПараметрыОписания", Новый Структура);
	Параметры.ПараметрыОписания.Вставить("СчетРасходов", Параметры.СчетРасходов);
	Параметры.ПараметрыОписания.Вставить("СчетУбытков",  Параметры.СчетУбытков);
	Параметры.ПараметрыОписания.Вставить("ВидСтатьи");            // должен быть установлен при подготовке текста описания
	Параметры.ПараметрыОписания.Вставить("СпособПереносаУбытка"); // должен быть установлен при подготовке текста описания
	Параметры.ПараметрыОписания.Вставить("ЭтапРасчета");          // должен быть установлен при подготовке текста описания

	Возврат Параметры;
		
КонецФункции

Функция РезультатЗапросаРасходыПризнанныеПослеПолученияУбытка(ХарактеристикиРасходов, ПроцессорПолученияДанных)
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр("ВидыСтатей", ХарактеристикиРасходов.ВидыСтатей);
	
	// Получим списки статей переданных видов
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыСтатей.ВидСтатьи КАК ВидСтатьи,
	|	ВидыСтатей.СпособПереносаУбытка КАК СпособПереносаУбытка
	|ПОМЕСТИТЬ ВТ_ВидыСтатей
	|ИЗ
	|	&ВидыСтатей КАК ВидыСтатей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Статья
	|ПОМЕСТИТЬ ВТ_РасходыБудущихПериодов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК РасходыБудущихПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыСтатей КАК ВидыСтатей
	|		ПО РасходыБудущихПериодов.ВидРБП = ВидыСтатей.СпособПереносаУбытка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходыБудущихПериодов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиПрочихДоходовРасходов.Ссылка КАК Статья
	|ПОМЕСТИТЬ ВТ_ПрочиеДоходыРасходы
	|ИЗ
	|	СтатьиПрочихДоходовРасходов КАК СтатьиПрочихДоходовРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыСтатей КАК ВидыСтатей
	|		ПО СтатьиПрочихДоходовРасходов.ВидСтатьи = ВидыСтатей.ВидСтатьи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья";
	
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы); // ВТ_ВидыСтатей, ВТ_РасходыБудущихПериодов, ВТ_ПрочиеДоходыРасходы
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр(
		"СчетаРасходов",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ХарактеристикиРасходов.СчетРасходов));
	ВидыСубконтоСчетаРасходов = Новый Массив;
	ВидыСубконтоСчетаРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ВидыСубконтоСчетаРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
	Если ХарактеристикиРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ВидыСубконтоСчетаРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконтоСчетаРасходов", ВидыСубконтоСчетаРасходов);
	Запрос.УстановитьПараметр(
		"СчетаРасходовБудущихПериодов",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ХарактеристикиРасходов.СчетУбытков));
		
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяДоходов,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаРасходов),
	|			&ВидыСубконтоСчетаРасходов,
	|			Организация В (&Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						Статьи.Статья
	|					ИЗ
	|						ВТ_ПрочиеДоходыРасходы КАК Статьи)
	|				И КорСубконто1 В
	|					(ВЫБРАТЬ
	|						Статьи.Статья
	|					ИЗ
	|						ВТ_РасходыБудущихПериодов КАК Статьи),
	|			КорСчет В (&СчетаРасходовБудущихПериодов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка))";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ДобавитьКолонкиСумм(СхемаЗапроса, "ХозрасчетныйОбороты.%ОборотДт", ПроцессорПолученияДанных.ОписаниеСумм);
	
	Если ХарактеристикиРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "ХозрасчетныйОбороты.Субконто3", "РеализованныйОбъект", Истина);
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы); // ВТ_Обороты
	
	// Группировка данных регистра бухгалтерии
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СтатьиПрочихДоходовРасходов.ВидСтатьи КАК ВидСтатьи,
	|	СтатьиПрочихДоходовРасходов.ВидДеятельности КАК ВидДеятельности,
	|	СтатьиПрочихДоходовРасходов.Учитываются КАК Учитываются,
	|	Обороты.ВариантНО КАК ВариантНО
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПрочихДоходовРасходов КАК СтатьиПрочихДоходовРасходов
	|		ПО Обороты.СтатьяДоходов = СтатьиПрочихДоходовРасходов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиПрочихДоходовРасходов.ВидСтатьи,
	|	СтатьиПрочихДоходовРасходов.ВидДеятельности,
	|	СтатьиПрочихДоходовРасходов.Учитываются,
	|	Обороты.ВариантНО";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ХарактеристикиРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "Обороты.РеализованныйОбъект", "РеализованныйОбъект", Истина);
	КонецЕсли;
	ДобавитьКолонкиСумм(СхемаЗапроса, "Обороты.%", ПроцессорПолученияДанных.ОписаниеСумм);
		
	// Выполним запрос
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция НастройкиОтчетаПрочиеРасходыПризнанныеПослеПолученияУбытка(ЭтапРасчета, СчетРасходов, ВидСтатьиРасходов, СчетУбытков, ВидСтатьиУбытков, СхемаРасчета)
	
	ОписанияСчетов = Новый Структура;
	ОписанияСчетов.Вставить("СчетУбытков", Новый Структура);
	ОписанияСчетов.СчетУбытков.Вставить("Префикс",                      ""); // основной счет
	ОписанияСчетов.СчетУбытков.Вставить("Счет",                         СчетУбытков);
	ОписанияСчетов.СчетУбытков.Вставить("ВидСубконто",                  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	ОписанияСчетов.СчетУбытков.Вставить("ШаблонПредставленияСубконто",  НСтр("ru = 'Субконто%1';
																			|en = 'Extra dimension%1'"));
	ОписанияСчетов.Вставить("СчетРасходов", Новый Структура);
	ОписанияСчетов.СчетРасходов.Вставить("Префикс",                     "Кор");
	ОписанияСчетов.СчетРасходов.Вставить("Счет",                        СчетРасходов);
	ОписанияСчетов.СчетРасходов.Вставить("ВидСубконто",                 ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ОписанияСчетов.СчетРасходов.Вставить("ШаблонПредставленияСубконто", НСтр("ru = 'Кор. Субконто%1';
																			|en = 'Corr. Extra dimension%1'"));
	
	Для Каждого ОписаниеСчета Из ОписанияСчетов Цикл
		ПрефиксИмениСубконто = ОписаниеСчета.Значение.Префикс + "Субконто";
		ОписаниеПоля = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
			ПрефиксИмениСубконто,
			ОписаниеСчета.Значение.Счет,
			ОписаниеСчета.Значение.ВидСубконто);
		ОписаниеСчета.Значение.Вставить("ИмяПоляСубконто",           "");
		ОписаниеСчета.Значение.Вставить("ПредставлениеПоляСубконто", "");
		ОписаниеСчета.Значение.Вставить("НомерСубконто",             "");
		Если ОписаниеПоля <> Неопределено Тогда
			ОписаниеСчета.Значение.ИмяПоляСубконто           = ОписаниеПоля.Имя;
			ОписаниеСчета.Значение.ПредставлениеПоляСубконто = ОписаниеПоля.Представление;
			ОписаниеСчета.Значение.НомерСубконто             = ОписаниеПоля.Номер;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПоСчетуПрочиеРасходыМожноПолучитьОтчетомОборотыСчета() Тогда
		
		Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
			"ОборотыСчета",
			СхемаРасчета.КонтекстРасчета.Организация,
			СхемаРасчета.КонтекстРасчета.НачалоПериода,
			СхемаРасчета.КонтекстРасчета.КонецПериода,
			ОписанияСчетов.СчетУбытков.Счет,
			СхемаРасчета.ОписаниеСумм);
			
		// Выводятся данные о сальдо, так как убыток может быть понесен в прошлых годах и зачтен в будущих
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.НастроитьОборотыСчета(Настройки, "Дт", Истина, Истина);
	
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			"КорСчетОтбор",
			ОписанияСчетов.СчетРасходов.Счет,
			ВидСравненияКомпоновкиДанных.ВИерархии);

		
		Для Каждого ОписаниеСчета Из ОписанияСчетов Цикл
			
			Если ПустаяСтрока(ОписаниеСчета.Значение.ИмяПоляСубконто) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ОписаниеСчета.Значение.Префикс) Тогда
				Представление = ОписаниеСчета.Значение.ПредставлениеПоляСубконто;
			Иначе
				Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОписаниеСчета.Значение.ШаблонПредставленияСубконто,
					ОписаниеСчета.Значение.НомерСубконто);
			КонецЕсли;
		
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
				Настройки,
				ОписаниеСчета.Значение.ИмяПоляСубконто,
				Представление);
			
		КонецЦикла;
		
		ИмяПоляСубконтоСчетУбытков  = ОписанияСчетов.СчетУбытков.ИмяПоляСубконто;
		ИмяПоляСубконтоСчетРасходов = ОписанияСчетов.СчетРасходов.ИмяПоляСубконто;
		
	Иначе
		
		Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
			"ОборотыМеждуСубконто",
			СхемаРасчета.КонтекстРасчета.Организация,
			СхемаРасчета.КонтекстРасчета.НачалоПериода,
			СхемаРасчета.КонтекстРасчета.КонецПериода,
			Неопределено,
			СхемаРасчета.ОписаниеСумм);
			
		СвойстваОтчета = Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства;
		
		СхемаОтчета = Новый Структура;
		СхемаОтчета.Вставить("СчетУбытков",  "");
		СхемаОтчета.Вставить("СчетРасходов", "Кор");
		
		ИмяПоляСубконтоСчетУбытков  = "Субконто1";
		ИмяПоляСубконтоСчетРасходов = "КорСубконто1";
		
		Для Каждого ЭлементОтчета Из СхемаОтчета Цикл
			
			Суффикс = ЭлементОтчета.Значение;
			ИмяСпискаВидовСубконто = "СписокВидов" + Суффикс + "Субконто";
			ИмяОтбораПоСчету       = Суффикс + "Счет";
			
			ОписаниеСчета = ОписанияСчетов[ЭлементОтчета.Ключ];
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
				Настройки,
				ИмяОтбораПоСчету,
				ОписаниеСчета.Счет,
				ВидСравненияКомпоновкиДанных.ВИерархии);
			
			СвойстваОтчета[ИмяСпискаВидовСубконто].Добавить(ОписаниеСчета.ВидСубконто, ОписаниеСчета.ПредставлениеПоляСубконто);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьОтборПрочихДоходовРасходовВНастройкиОтчета(Настройки, ИмяПоляСубконтоСчетРасходов, ЭтапРасчета, ВидСтатьиРасходов);
	
	Если ЗначениеЗаполнено(ИмяПоляСубконтоСчетУбытков) Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ИмяПоляСубконтоСчетУбытков + "." + "ВидРБП",
			ВидСтатьиУбытков);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область РеализацияАмортизируемогоИмущества

Процедура ПолучитьРеализацияАмортизируемогоИмущества(ПроцессорПолученияДанных)
	
	// Значения части показателей получаются (выбираются) из информационной базы в разрезе реализованных объектов.
	// Это три показателя, суммы доходов и расходов.
	// Данные из базы выбираются с учетом видов статей (и в разрезе видов статей).
	ВидыСтатей = Новый Массив;
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		ВидыСтатей.Добавить(Задача.ОтборДанных.ВидСтатьи);
	КонецЦикла;
	СоздатьВременнуюТаблицуСтатьиПрочихДоходовРасходов(ВидыСтатей, ПроцессорПолученияДанных);
	
	// Остальные показатели рассчитываются на основе первых трех.
	// Всего для расчета нужно выполнить шесть шагов.
	ШагиРасчета = Новый ТаблицаЗначений;
	ШагиРасчета.Колонки.Добавить("Имя",        ТипИмя());
	ШагиРасчета.Колонки.Добавить("ПоДаннымИБ", Новый ОписаниеТипов("Булево"));
	ШагиРасчета.Колонки.Добавить("Выборка");
	ШагиРасчета.Колонки.Добавить("ШаблонОписания",    Новый ОписаниеТипов("Строка"));
	ШагиРасчета.Колонки.Добавить("ПараметрыОписания");// ссылка на структуру - параметры текста описания
	ШагиРасчета.Колонки.Добавить("Условие",           Новый ОписаниеТипов("Структура"));// для записи в протокол - та часть условия, что одинакова для всех задач
	ШагиРасчета.Колонки.Добавить("Задачи",            Новый ОписаниеТипов("Массив"));
	ШагиРасчета.Индексы.Добавить("Имя");
	
	// 1. Выручка
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "Выручка";
	ШагРасчета.ПоДаннымИБ        = Истина;
	
	ХарактеристикиДоходов = ХарактеристикиПрочиеДоходыРасходы("ПрочиеДоходы", Истина);
	РезультатЗапроса      = РезультатЗапросаПрочиеДоходыРасходы(ХарактеристикиДоходов, ПроцессорПолученияДанных);
	
	ШагРасчета.Выборка           = РезультатЗапроса.Выбрать();;
	ШагРасчета.ШаблонОписания    = ХарактеристикиДоходов.ШаблонОписания;
	ШагРасчета.ПараметрыОписания = ХарактеристикиДоходов.ПараметрыОписания;
	ШагРасчета.Условие.Вставить("СчетДоходовРасходов", ХарактеристикиДоходов.Счет);
	СчетВыручки = ХарактеристикиДоходов.Счет;
	
	// 2. Расходы
	
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "Расходы";
	ШагРасчета.ПоДаннымИБ        = Истина;
	
	ХарактеристикиРасходов = ХарактеристикиПрочиеДоходыРасходы("ПрочиеРасходы", Истина);
	РезультатЗапроса       = РезультатЗапросаПрочиеДоходыРасходы(ХарактеристикиРасходов, ПроцессорПолученияДанных);
	
	ШагРасчета.Выборка           = РезультатЗапроса.Выбрать();
	ШагРасчета.ШаблонОписания    = ХарактеристикиРасходов.ШаблонОписания;
	ШагРасчета.ПараметрыОписания = ХарактеристикиРасходов.ПараметрыОписания;
	ШагРасчета.Условие.Вставить("СчетДоходовРасходов", ХарактеристикиРасходов.Счет);
	СчетРасходов = ХарактеристикиРасходов.Счет;
	
	// 3. Расходы после реализации
	// Расходы могут отражаться по счету 91 дважды:
	// - первый раз - в периоде реализации, в корреспонденции со счетами 01, 04   (при реализации)
	// - второй раз - в периоде признания убытков, в корреспонденции со счетом 97 (после реализации, в будущих периодах).
	// При расчете убытка следует использовать расходы в периоде реализации - т.е. исключить из общей величины расходов
	// расходы после реализации.
	
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "РасходыПослеРеализации";
	ШагРасчета.ПоДаннымИБ        = Истина;
	
	СпособПереносаУбытка = Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества; // аналитика на счете 97
	
	ХарактеристикиРасходов = ХарактеристикиРасходыПризнанныеПослеПолученияУбытка(Истина);
	Для Каждого ВидСтатьи Из ВидыСтатей Цикл
		НоваяСтрока = ХарактеристикиРасходов.ВидыСтатей.Добавить();
		НоваяСтрока.ВидСтатьи            = ВидСтатьи;
		НоваяСтрока.СпособПереносаУбытка = СпособПереносаУбытка;
	КонецЦикла;
	РезультатЗапроса = РезультатЗапросаРасходыПризнанныеПослеПолученияУбытка(ХарактеристикиРасходов, ПроцессорПолученияДанных);
	
	ШагРасчета.Выборка           = РезультатЗапроса.Выбрать();
	ШагРасчета.ШаблонОписания    = ХарактеристикиРасходов.ШаблонОписания;
	ШагРасчета.ПараметрыОписания = ХарактеристикиРасходов.ПараметрыОписания;
	ШагРасчета.ПараметрыОписания.СпособПереносаУбытка = СпособПереносаУбытка;
	ШагРасчета.Условие.Вставить("СчетДоходовРасходов",  ХарактеристикиРасходов.СчетРасходов);
	ШагРасчета.Условие.Вставить("СчетУбытков",          ХарактеристикиРасходов.СчетУбытков);
	ШагРасчета.Условие.Вставить("СпособПереносаУбытка", СпособПереносаУбытка);
	
	// 4. Количество реализованных объектов
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя            = "КоличествоВсего";
	ШагРасчета.ШаблонОписания = НСтр("ru = 'Количество объектов имущества, реализация которого отражена по кредиту счета [СчетВыручки] по статьям вида ""[ВидСтатьи]""';
									|en = 'Number of property assets which sales are recorded according to the account credit [СчетВыручки] and articles of the ""[ВидСтатьи]"" kind'");
	ШагРасчета.ПараметрыОписания = Новый Структура;
	ШагРасчета.ПараметрыОписания.Вставить("СчетВыручки",  СчетВыручки);
	ШагРасчета.ПараметрыОписания.Вставить("СчетРасходов", СчетРасходов);
	ШагРасчета.ПараметрыОписания.Вставить("ВидСтатьи");    // заполняется при обходе показателей
	ШагРасчета.ПараметрыОписания.Вставить("ЭтапРасчета");  // для унификации кода, фактически не используется
	ПараметрыОписанияУбытка = ШагРасчета.ПараметрыОписания; // для остальных шагов - те же параметры
	
	// 5. Убыток 
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "Убыток";
	ШагРасчета.ШаблонОписания    = НСтр("ru = 'Убыток, определенный по оборотам счетов [СчетВыручки] и [СчетРасходов] по статьям вида ""[ВидСтатьи]"" по каждому реализованному объекту раздельно';
										|en = 'Loss defined according to account turnovers [СчетВыручки] and [СчетРасходов] and items of the ""[ВидСтатьи]"" kind for each sold object separately'");
	ШагРасчета.ПараметрыОписания = ПараметрыОписанияУбытка;
	
	// 6. Количество объектов, реализованных с убытком
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "КоличествоУбыток";
	ШагРасчета.ШаблонОписания    = НСтр("ru = 'Количество объектов имущества, убыток от реализации которого определен по оборотам счетов [СчетВыручки] и [СчетРасходов] по статьям вида ""[ВидСтатьи]""';
										|en = 'Number of property assets which sales loss is defined according to turnovers of accounts [СчетВыручки] and [СчетРасходов] and items of the  ""[ВидСтатьи]"" kind'");
	ШагРасчета.ПараметрыОписания = ПараметрыОписанияУбытка;
	
	ШаблонОписанияДетализации = НСтр("ru = '%1
      |Реализованный объект - ""%2""';
      |en = '%1
      |Sold object - ""%2""'");
	  
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		ШагРасчета = ШагиРасчета.Найти(Задача.ОтборДанных.Показатель, "Имя");
		Если ШагРасчета <> Неопределено Тогда
			ШагРасчета.Задачи.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	// "Налогоплательщик определяет убыток ... по каждому объекту"
	// Чтобы это обеспечить, собираем данные о доходах и расходах по каждому объекту в коллекции Убытки
	// Затем по данным этой коллекции рассчитываем остальные показатели.
	Убытки = Новый ТаблицаЗначений;
	Убытки.Колонки.Добавить("ВидСтатьи",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПрочихДоходовИРасходов"));
	Убытки.Колонки.Добавить("РеализованныйОбъект",  Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.НематериальныеАктивы"));
	Убытки.Колонки.Добавить("ВариантНО",            Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	Убытки.Колонки.Добавить("Выручка");             // КоллекцияСумм - используется для расчета КоличествоВсего
	Убытки.Колонки.Добавить("Результат");           // КоллекцияСумм - используется для расчета Убыток
	Убытки.Колонки.Добавить("Убыток");              // КоллекцияСумм - используется для расчета КоличествоУбыток
	Убытки.Колонки.Добавить("Протокол",             Новый ОписаниеТипов("ТаблицаЗначений")); // см. ИнициализироватьПротоколРасчетаУбыткаРеализацияАмортизируемогоИмущества()
	
	ПоляОтбора = "ВидСтатьи, РеализованныйОбъект, ВариантНО";
	Убытки.Индексы.Добавить(ПоляОтбора);
	ОтборУбыток = Новый Структура(ПоляОтбора);
	
	Для Каждого ШагРасчета Из ШагиРасчета Цикл
	
		Для Каждого Задача Из ШагРасчета.Задачи Цикл
			
			Если Не СтатьяПрочихДоходовРасходовПрименима(Задача.ОтборДанных.ВидСтатьи, "ПрочиеРасходы", Задача.ЭтапРасчета) Тогда
				ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
				Продолжить;
			КонецЕсли;
			
			// Подготовим описание
			ШагРасчета.ПараметрыОписания.ВидСтатьи   = Задача.ОтборДанных.ВидСтатьи;
			ШагРасчета.ПараметрыОписания.ЭтапРасчета = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
			
			Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШагРасчета.ШаблонОписания, ШагРасчета.ПараметрыОписания); // Может быть уточнено ниже - см. ШаблонОписанияДетализации
			
			Если ШагРасчета.ПоДаннымИБ Тогда
				
				// это шаги, на которых в таблице Убытки заполняется колонка Результат
				
				ОтборВыборки = НовыйОтборПоЭтапуРасчета(Задача.ЭтапРасчета);
				ОтборВыборки.Вставить("ВидСтатьи");
				ЗаполнитьЗначенияСвойств(ОтборВыборки, Задача.ОтборДанных);
				ОтборВыборки.Вставить("ВариантНО", Задача.ВариантНО);
				
				ШагРасчета.Выборка.Сбросить();
				ПротоколПоказателя = Новый Массив;
				Пока ШагРасчета.Выборка.НайтиСледующий(ОтборВыборки) Цикл// по реализованным объектам
					
					ЗаполнитьЗначенияСвойств(ОтборУбыток, ШагРасчета.Выборка);
					Убыток = Убытки.НайтиСтроки(ОтборУбыток);
					Если Убыток.Количество() > 0 Тогда
						Убыток = Убыток[0];
					Иначе
						Убыток = Убытки.Добавить();
						ЗаполнитьЗначенияСвойств(Убыток, ОтборУбыток);
						Убыток.Выручка   = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						Убыток.Результат = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						Убыток.Убыток    = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						ИнициализироватьПротоколРасчетаУбыткаРеализацияАмортизируемогоИмущества(Убыток.Протокол);
					КонецЕсли;
					
					// Запишем значение показателя
					КоллекцииСумм.Сложить(Задача, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
					
					// Рассчитаем финансовый результат - с учетом знака этапа расчета.
					ОператорЭтапаРасчета = ОператорЭтапаРасчета(Задача.ЭтапРасчета);
					ОператорШагаРасчета  = ОператорШагаРасчетаРеализацияАмортизируемогоИмущества(ШагРасчета.Имя);
					ОператорРасчетаРезультата = РаскрытьСкобки(ОператорЭтапаРасчета, ОператорШагаРасчета);
					
					Если ОператорРасчетаРезультата = "-" Тогда
						КоллекцииСумм.Вычесть(Убыток.Результат, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
						Если ШагРасчета.Имя = "Выручка" Тогда
							КоллекцииСумм.Вычесть(Убыток.Выручка, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
						КонецЕсли;
					Иначе
						КоллекцииСумм.Сложить(Убыток.Результат, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
						Если ШагРасчета.Имя = "Выручка" Тогда
							КоллекцииСумм.Сложить(Убыток.Выручка, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
						КонецЕсли;
					КонецЕсли;
					
					// запишем порядок расчета - в разрезе объектов
					ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, ШагРасчета.Выборка);
					ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонОписанияДетализации,
						Описание,
						Убыток.РеализованныйОбъект); // "пустое" наименование объекта не всегда уместно выводить, поэтому ниже описание может быть заменено
					ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ШагРасчета.Выборка);
					ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ШагРасчета.Условие);
					ЗаписьПротокола.Условие.Показатель = ШагРасчета.Имя;
					ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
					
					// ниже - вне цикла - можем модифицировать описание в записи протокола
					ПротоколПоказателя.Добавить(ЗаписьПротокола);
					
					// для того, чтобы позднее вывести детальный протокол расчета убытка
					ЗаписьПротоколаОбъекта = Убыток.Протокол.Добавить();
					ЗаписьПротоколаОбъекта.Оператор   = ОператорРасчетаРезультата;
					ЗаписьПротоколаОбъекта.Запись     = ЗаписьПротокола;
					ЗаписьПротоколаОбъекта.ШагРасчета = ШагРасчета.Имя;
					
				КонецЦикла;
				
				Если ПротоколПоказателя.Количество() = 1 И Не ЗначениеЗаполнено(ПротоколПоказателя[0].Условие.РеализованныйОбъект) Тогда
					ПротоколПоказателя[0].Описание = Описание; // нет смысла упоминать реализованный объект
				КонецЕсли;
				
			Иначе
				
				// Рассчитываем показатели по данным таблицы Убытки.
				// Так как в таблице убытки - сводные данные по всем этапам расчета, то пропускаем все промежуточные этапы расчета.
				
				Если Задача.ЭтапРасчета <> "Все" Тогда
					ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
					Продолжить;
				КонецЕсли;
				
				Для Каждого Убыток Из Убытки Цикл
					
					Если Убыток.ВидСтатьи <> Задача.ОтборДанных.ВидСтатьи Или Убыток.ВариантНО <> Задача.ВариантНО Тогда
						Продолжить;
					КонецЕсли;
					
					Если ШагРасчета.Имя = "Убыток" Тогда
						
						Значение = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						
						// убыток - это отрицательный финансовый результат, но с противоположным знаком
						КоллекцииСумм.Заполнить(Убыток.Убыток, Убыток.Результат, ПроцессорПолученияДанных.ОписаниеСумм);
						
						// 1. отсекаем положительный результат
						ОграничитьСверху(Убыток.Убыток, Значение, ПроцессорПолученияДанных.ОписаниеСумм);
						
						// 2. меняем знак
						КоллекцииСумм.Вычесть(Значение, Убыток.Убыток, ПроцессорПолученияДанных.ОписаниеСумм);
						КоллекцииСумм.Заполнить(Убыток.Убыток, Значение, ПроцессорПолученияДанных.ОписаниеСумм);
						
					Иначе // количества
						
						Если Не ЗначениеЗаполнено(Убыток.РеализованныйОбъект) Тогда
							Значение = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						ИначеЕсли ШагРасчета.Имя = "КоличествоВсего" Тогда
							Значение = КоличествоНенулевыхЗначений(Убыток.Выручка, ПроцессорПолученияДанных.ОписаниеСумм);
						Иначе // КоличествоУбыток
							Значение = КоличествоНенулевыхЗначений(Убыток.Убыток, ПроцессорПолученияДанных.ОписаниеСумм);
						КонецЕсли;
						
					КонецЕсли;
					
					КоллекцииСумм.Сложить(Задача, Значение, ПроцессорПолученияДанных.ОписаниеСумм);
					
					// Подготовим протокол расчета
					СуммыДляПротокола = Новый Структура;
					Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ПроцессорПолученияДанных.ОписаниеСумм) Цикл
						Если Значение[ИмяСвойства] <> 0 Тогда
							СуммыДляПротокола.Вставить(ИмяСвойства);
						КонецЕсли;
					КонецЦикла;
					
					Если СуммыДляПротокола.Количество() > 0 Тогда
						Если ШагРасчета.Имя <> "Убыток" Тогда
							
							Если ШагРасчета.Имя = "КоличествоУбыток" Тогда
								// только те суммы, по которым есть убыток
								ЗаполнитьЗначенияСвойств(СуммыДляПротокола, Значение);
							Иначе
								СуммыДляПротокола = Значение;
							КонецЕсли;
							
							// просто перечень реализованных объектов
							ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, СуммыДляПротокола);
							ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОписанияДетализации,
								Описание,
								Убыток.РеализованныйОбъект);
							ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Убыток);
							ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ШагРасчета.Условие);
							ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
							
						Иначе // "Убыток"
							
							// Детальный протокол расчета - включает все шаги расчета
							// Показываем его только тогда, когда есть убыток - см. СуммыДляПротокола.
							
							Для Каждого ЗаписьПротоколаОбъекта Из Убыток.Протокол Цикл
								
								ЗаполнитьЗначенияСвойств(СуммыДляПротокола, ЗаписьПротоколаОбъекта.Запись);// только те суммы, по которым есть убыток
								
								Оператор = РаскрытьСкобки(ЗаписьПротоколаОбъекта.Оператор, ЗаписьПротоколаОбъекта.Запись.Оператор);
								Оператор = РаскрытьСкобки("-", Оператор); // протокол объекта содержит расчет финансового результата; а здесь нужен расчет убытка
								
								ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, СуммыДляПротокола);
								ЗаписьПротокола.Описание = ЗаписьПротоколаОбъекта.Запись.Описание;
								ЗаписьПротокола.Оператор = Оператор;
								ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ЗаписьПротоколаОбъекта.Запись.Условие);
								ЗаписьПротокола.Условие.Показатель = ЗаписьПротоколаОбъекта.ШагРасчета;
								ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
								
							КонецЦикла;
							
						КонецЕсли; // детальный протокол расчета убытка
						
					КонецЕсли; // определены суммы для протокола
					
				КонецЦикла;
				
			КонецЕсли; // ШагРасчета.ПоДаннымИБ
			
			// протокол - сводно
			Если Не Задача.ПротоколЗаполнен Тогда
				ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
				ЗаписьПротокола.Описание = Описание;
				ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ШагРасчета.Условие);
				ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Задача.ОтборДанных);
				ЗаписьПротокола.Условие.ВсеРеализованныеОбъекты = Истина;
			КонецЕсли;
			
		КонецЦикла; // По Задачи
	КонецЦикла; // По РассчитываемыеПоказатели
		
КонецПроцедуры

Функция ОператорШагаРасчетаРеализацияАмортизируемогоИмущества(ИмяШага)
	
	// Результат = Выручка - (Расходы - РасходыПослеРеализации) = Выручка - Расходы + РасходыПослеРеализации;
	Если ИмяШага = "Расходы" Тогда
		Возврат "-";
	Иначе // Выручка, РасходыПослеРеализации
		Возврат "+"; 
	КонецЕсли;
	
КонецФункции

Функция ИнициализироватьПротоколРасчетаУбыткаРеализацияАмортизируемогоИмущества(Протокол)
	
	// Протокол содержит ссылки на строки протокола получения данных.
	// В совокупности они иллюстрируют ход расчета финансового результата по конкретному реализованному объекту.
	
	Протокол.Колонки.Добавить("Запись");    // ссылка на запись протокола
	Протокол.Колонки.Добавить("Оператор",   ТипОператорФормулы()); // оператор, который нужно применить записи протокола, чтобы получить финансовый результат
	Протокол.Колонки.Добавить("ШагРасчета", ТипИмя());
	
КонецФункции

Функция НастройкиОтчетаРеализацияАмортизируемогоИмущества(ЭтапРасчета, ИмяПоказателя, ВсеРеализованныеОбъекты, РеализованныйОбъект, СчетДоходовРасходов, ВидСтатьиРасходов, СчетУбытков, ВидСтатьиУбытков, СхемаРасчета)
	
	Если ИмяПоказателя = "РасходыПослеРеализации" Тогда
		
		Настройки = НастройкиОтчетаПрочиеРасходыПризнанныеПослеПолученияУбытка(
			ЭтапРасчета,
			СчетДоходовРасходов,
			ВидСтатьиРасходов,
			СчетУбытков,
			ВидСтатьиУбытков,
			СхемаРасчета);
		
		// Отбор и группировка по реализованным объектам
		ОписаниеПоля = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
			"КорСубконто",
			СчетДоходовРасходов,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
		
		Если ОписаниеПоля <> Неопределено Тогда
			
			СвойстваОтчета = Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства;
			Если СвойстваОтчета.Свойство("СписокВидовКорСубконто") Тогда
				// "ОборотыМеждуСубконто"
				ПредставлениеПоля = ОписаниеПоля.Представление;
				СвойстваОтчета.СписокВидовКорСубконто.Добавить(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы,
					ПредставлениеПоля);
				НомерСубконтоВОтчете = СвойстваОтчета.СписокВидовКорСубконто.Количество();
				ИмяПоля = "КорСубконто" + НомерСубконтоВОтчете;
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(Настройки, ИмяПоля, ПредставлениеПоля);
				Если Не ВсеРеализованныеОбъекты Тогда
					ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(Настройки, ИмяПоля, РеализованныйОбъект);
				КонецЕсли;
			Иначе
				// "ОборотыСчета"
				ПредставлениеПоля = НСтр("ru = 'Кор. Субконто2';
										|en = 'Corr. Extra dimension2'");// см. ДанныеПоСчетуПрочиеРасходыМожноПолучитьОтчетомОборотыСчета()
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(Настройки, ОписаниеПоля.Имя, ПредставлениеПоля);
				Если Не ВсеРеализованныеОбъекты Тогда
					ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(Настройки, ОписаниеПоля.Имя, РеализованныйОбъект);
				КонецЕсли;
			КонецЕсли;
		
			
		КонецЕсли;
	
	ИначеЕсли ИмяПоказателя = "Выручка" Или ИмяПоказателя = "Расходы" Тогда
		
		Настройки = НастройкиОтчетаПрочиеДоходыРасходы(ЭтапРасчета, СчетДоходовРасходов, ВидСтатьиРасходов, СхемаРасчета);
		
		// дополним настройки отчета детализацией и отборами по реализованным объектам
		
		ОписаниеПоля = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
			"Субконто",
			СчетДоходовРасходов,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
			
		Если ОписаниеПоля <> Неопределено Тогда
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
				Настройки,
				ОписаниеПоля.Имя,
				ОписаниеПоля.Представление);
				
			Если Не ВсеРеализованныеОбъекты Тогда
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(Настройки, ОписаниеПоля.Имя, РеализованныйОбъект);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Настройки;
			
КонецФункции

#КонецОбласти

#Область ТорговыйСбор

Процедура ПолучитьТорговыйСбор(ПроцессорПолученияДанных)
	
	// Используется только один этап
	МассивЗадач = ПроцессорПолученияДанных.Задачи.НайтиСтроки(Новый Структура("ЭтапРасчета", "Все"));
	Если Не ЗначениеЗаполнено(МассивЗадач) Тогда
		Возврат;
	КонецЕсли;
	
	// Рассчитываем только СуммаНУ, потому что величина уменьшения налога не имеет смысла для налога,
	// рассчитанного по данным бухгалтерского учета.
	ИменаСвойств = КоллекцииСумм.ИменаСвойств(ПроцессорПолученияДанных.ОписаниеСумм);
	Если ИменаСвойств.Найти("СуммаНУ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// В соответствии с п. 10 ст. 286 налог может быть уменьшен только на суммы сбора,
	// фактически уплаченные в бюджет до даты уплаты налога.
	// Предполагаем, что декларация заполняется ранее даты уплаты налога.
	// Поэтому, если на дату подписи декларации сбор не уплачен (есть любая задолженность),
	// то сумму налога не уменьшаем и показатели торгового сбора не заполняем.
		
	Если Не ЗадолженностьПоТорговомуСборуОпределяетсяПоНачислению(ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода) Тогда
		
		ЕстьЗадолженностьПоТорговомуСбору = РасчетНалогаНаПрибыль.ЕстьЗадолженностьПоТорговомуСбору(
			ПроцессорПолученияДанных.КонтекстРасчета.Организация,
			ПроцессорПолученияДанных.КонтекстРасчета.ДатаПодписи);
								
		Если ЕстьЗадолженностьПоТорговомуСбору Тогда
			
			Для каждого Задача Из МассивЗадач Цикл
				
				Если Задача.ВариантНО <> ПроцессорПолученияДанных.КонтекстРасчета.ОсновнойВариантНО Тогда
					ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
					Продолжить; // Торговый сбор будет учитываться только на основном варианте налогообложения прибыли
				КонецЕсли;
				
				Задача.ПротоколЗаполнен = Истина;
				
				ЗаписьПротокола = ДобавитьЗаписьПротокола(
					ПроцессорПолученияДанных.РезультатРасчета,
					Задача.Показатель,
					Задача.ЭтапРасчета,
					"ПропуститьТорговыйСбор",
					Задача.ВариантНО);
				
				ЗаписьПротокола.Описание = СтрШаблон(
					НСтр("ru = 'Показатель не заполняется при наличии кредитового сальдо по счету %1 на дату подписи декларации (%2)';
						|en = 'The indicator is not filled in if there is a credit balance on %1 account at the date of signing the tax declaration (%2)'"),
					ПланыСчетов.Хозрасчетный.ТорговыйСбор,
					Формат(ПроцессорПолученияДанных.КонтекстРасчета.ДатаПодписи, "ДЛФ=D"));
				
			КонецЦикла;	
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Предполагаем, что каждый конкретный показатель рассчитывается только в одной задаче
	// Поэтому группировка по показателям не требуется.
	Для каждого Задача Из МассивЗадач Цикл
		
		Если Задача.ВариантНО <> ПроцессорПолученияДанных.КонтекстРасчета.ОсновнойВариантНО Тогда
			Продолжить; // Торговый сбор будет учитываться только на основном варианте налогообложения прибыли
		КонецЕсли;
		
		Показатель = Задача.ОтборДанных.Показатель;
		
		Если Показатель = "УменьшениеНалогаНаТорговыйСбор" Тогда
			
			// Заполним данные об уменьшении
			УменьшениеНалога = РасчетНалогаНаПрибыль.НалогФактическиУменьшенныйНаСуммыТорговогоСбора(
				ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода,
				ПроцессорПолученияДанных.КонтекстРасчета.Организация);
			
			Задача.СуммаНУ = УменьшениеНалога.Итог("Сумма");
			
			ШаблонОписания = НСтр("ru = 'Оборот по дебету счета %1 в части регионального бюджета, с видом платежа в бюджет ""Налог"" в корреспонденции со счетом %2 %3';
									|en = '%1 account debit turnover in part of regional budget with the ""Tax"" payment kind to budget in correspondence with account %2 %3'");
			ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				ПроцессорПолученияДанных.КонтекстРасчета.НачалоПериода,
				ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода);
				
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
			ЗаписьПротокола.Описание = СтрШаблон(
				ШаблонОписания, 
				ПланыСчетов.Хозрасчетный.РасчетыСБюджетом, 
				ПланыСчетов.Хозрасчетный.ТорговыйСбор,
				ПредставлениеПериода);
			ЗаписьПротокола.Условие.Показатель = Показатель;
			
		ИначеЕсли Показатель = "УменьшениеНалогаНаТорговыйСборПрошлогоПериода" Тогда
			
			// Для прошлого периода сдвинем конец периода назад на шаг периодичности
			КонецПрошлогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
				ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода, 
				ПроцессорПолученияДанных.КонтекстРасчета.Периодичность, 
				-1);
			КонецПрошлогоПериода = КонецМесяца(КонецПрошлогоПериода);	
				
			// Если текущий отчетный период является первым, то торговый сбор прошлого периода не рассчитывается.
			Если КонецПрошлогоПериода > ПроцессорПолученияДанных.КонтекстРасчета.НачалоПериода Тогда
				
				УменьшениеНалога = РасчетНалогаНаПрибыль.НалогФактическиУменьшенныйНаСуммыТорговогоСбора(
					КонецПрошлогоПериода,
					ПроцессорПолученияДанных.КонтекстРасчета.Организация);
			
				Задача.СуммаНУ = УменьшениеНалога.Итог("Сумма");
				
				ШаблонОписания = НСтр("ru = 'Оборот по дебету счета %1 в части регионального бюджета, с видом платежа в бюджет ""Налог"" в корреспонденции со счетом %2 %3';
										|en = '%1 account debit turnover in part of regional budget with the ""Tax"" payment kind to budget in correspondence with account %2 %3'");
				ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
					ПроцессорПолученияДанных.КонтекстРасчета.НачалоПериода,
					КонецПрошлогоПериода);
					
				ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
				ЗаписьПротокола.Описание = СтрШаблон(
					ШаблонОписания, 
					ПланыСчетов.Хозрасчетный.РасчетыСБюджетом, 
					ПланыСчетов.Хозрасчетный.ТорговыйСбор,
					ПредставлениеПериода);
				ЗаписьПротокола.Условие.Показатель = Показатель;
				ЗаписьПротокола.Условие.КонецПериода = КонецПрошлогоПериода;
				
			Иначе
				
				Задача.ПротоколЗаполнен = Истина;
				
				ЗаписьПротокола = ДобавитьЗаписьПротокола(
					ПроцессорПолученияДанных.РезультатРасчета,
					Задача.Показатель,
					Задача.ЭтапРасчета,
					"ПропуститьТорговыйСбор",
					Задача.ВариантНО);
				
				ЗаписьПротокола.Описание = НСтр("ru = 'Показатель не заполняется в первом отчетном периоде';
												|en = 'The indicator is not filled in the first accounting period'");
										
			КонецЕсли;	
		
		ИначеЕсли Показатель = "ТорговыйСборУплаченный" Тогда
			
			// Заполним данные о фактически уплаченном торговом сборе
			
			Задача.СуммаНУ = РасчетНалогаНаПрибыль.СуммаНачисленногоТорговогоСбора(
				ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода, 
				ПроцессорПолученияДанных.КонтекстРасчета.Организация);
			
			ШаблонОписания = НСтр("ru = 'Оборот по кредиту счета %1 с видом платежа в бюджет ""Налог"" %2';
									|en = '%1 account credit turnover with the ""Tax"" payment kind to budget %2'");
			ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				ПроцессорПолученияДанных.КонтекстРасчета.НачалоПериода,
				ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода);
			
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
			ЗаписьПротокола.Описание = СтрШаблон(
				ШаблонОписания, 
				ПланыСчетов.Хозрасчетный.ТорговыйСбор,
				ПредставлениеПериода);
			ЗаписьПротокола.Условие.Показатель = Показатель;
			
		КонецЕсли; 
				
	КонецЦикла; 
			
КонецПроцедуры

Функция НастройкиОтчетаПоСуммамНалога(СхемаРасчета, СчетНалога, Знач КонецПериода = Неопределено)
	
	// Для этого показателя используем только суммы бухгалтерского учета
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "БухгалтерскийУчет", "Сумма");
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = СхемаРасчета.КонтекстРасчета.КонецПериода;
	КонецЕсли;
	
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"АнализСчета",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		КонецПериода,
		СчетНалога,
		ОписаниеСумм);
		
	// Отбор по виду платежа 
	ОписаниеПоляВидПлатежа = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		"Субконто",
		СчетНалога,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		
	Если ОписаниеПоляВидПлатежа <> Неопределено Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ОписаниеПоляВидПлатежа.Имя,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция НастройкиОтчетаУменьшениеНалогаНаТорговыйСбор(СхемаРасчета, Условие)
	
	СчетНалога = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
	Настройки = НастройкиОтчетаПоСуммамНалога(СхемаРасчета, СчетНалога, Условие.КонецПериода);
	
	// Отбор по уровню бюджета платежа 
	ОписаниеПоляУровеньБюджета = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		"Субконто",
		СчетНалога,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
		
	Если ОписаниеПоляУровеньБюджета <> Неопределено Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ОписаниеПоляУровеньБюджета.Имя,
			Перечисления.УровниБюджетов.РегиональныйБюджет);
	КонецЕсли;
	
	// Группировка по регистрации в налоговом органе
	ВидыСубконто = Новый Массив;
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Если ЗначениеЗаполнено(ВидыСубконто) Тогда
		ОписаниеПоляРегистрацияВНалоговомОргане = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
			"Субконто",
			ПланыСчетов.Хозрасчетный.РасчетыСБюджетом,
			ВидыСубконто[0]);
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеПоляРегистрацияВНалоговомОргане.Имя,
			ОписаниеПоляРегистрацияВНалоговомОргане.Представление);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти // ТорговыйСбор

#Область КапитальныеВложения

Процедура ПолучитьКапитальныеВложения(ПроцессорПолученияДанных)
	
	// На счете КВ есть только данные о суммах НУ
	ИменаСвойств = КоллекцииСумм.ИменаСвойств(ПроцессорПолученияДанных.ОписаниеСумм);
	Если ИменаСвойств.Найти("СуммаНУ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии);
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	ТекстыЗапросов = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.ПодразделениеКт КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.НаправлениеДеятельностиКт КАК НаправлениеДеятельности,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК ОсновноеСредство,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК ДокументАмортизационнойПремии,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаНУОборотКт) КАК Сумма
	|ПОМЕСТИТЬ РасходыНаКапитальныеВложения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода, 
	|			&КонецПериода,,,, 
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения), 
	|			&ВидыСубконто, 
	|			Организация В (&Организации)) КАК ХозрасчетныйОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.ПодразделениеКт,
	|	ХозрасчетныйОборотыДтКт.НаправлениеДеятельностиКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументАмортизационнойПремии,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыНаКапитальныеВложения.ОсновноеСредство
	|ПОМЕСТИТЬ ДокументыМодернизации
	|ИЗ
	|	РасходыНаКапитальныеВложения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии) = ТИП(Документ.МодернизацияОС)
	|		ИЛИ ТИПЗНАЧЕНИЯ(РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии) = ТИП(Документ.МодернизацияОС2_4)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Подразделение КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Ссылка,
	|	ХозрасчетныйОборотыДтКт.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаМодернизации) КАК СуммаМодернизации
	|ПОМЕСТИТЬ ПараметрыМодернизацииОС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.ПодразделениеКт КАК Подразделение,
	|		ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|		ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК ОсновноеСредство,
	|		ХозрасчетныйОборотыДтКт.СуммаНУОборотКт КАК СуммаМодернизации
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,,,
	|				СчетКт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию), 
	|							ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков), 
	|							ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования), 
	|							ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств)),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|				Организация В (&Организации)
	|					И СубконтоКт1 В
	|						(ВЫБРАТЬ
	|							ДокументыМодернизации.ОсновноеСредство
	|						ИЗ
	|							ДокументыМодернизации КАК ДокументыМодернизации)) КАК ХозрасчетныйОборотыДтКт
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.ПодразделениеКт КАК Подразделение,
	|		ХозрасчетныйОборотыДтКт.Регистратор,
	|		ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|		ХозрасчетныйОборотыДтКт.СуммаНУОборотКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,,,
	|				СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства),
	|				Организация В (&Организации)
	|					И СубконтоДт1 В
	|						(ВЫБРАТЬ
	|							ДокументыМодернизации.ОсновноеСредство
	|						ИЗ
	|							ДокументыМодернизации КАК ДокументыМодернизации)) КАК ХозрасчетныйОборотыДтКт
	|
	|	) КАК ХозрасчетныйОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыДтКт.Подразделение,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	СуммыАмортизационнойПремии.Подразделение КАК Подразделение,
	|	СуммыАмортизационнойПремии.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СуммыАмортизационнойПремии.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(СуммыАмортизационнойПремии.Сумма) КАК СуммаНУ
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходыНаКапитальныеВложения.Подразделение КАК Подразделение,
	|		РасходыНаКапитальныеВложения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		РасходыНаКапитальныеВложения.ОсновноеСредство КАК ОсновноеСредство,
	|		РасходыНаКапитальныеВложения.Сумма КАК Сумма,
	|		ВЫБОР
	|			КОГДА НЕ ПринятиеКУчету.Ссылка ЕСТЬ NULL
	|				ТОГДА ПринятиеКУчету.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ
	|
	|			КОГДА НЕ ПринятиеКУчету2_4.Ссылка ЕСТЬ NULL
	|				ТОГДА ПринятиеКУчету2_4.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ
	|
	|			КОГДА НЕ МодернизацияОС2_4.Ссылка ЕСТЬ NULL
	|				ТОГДА МодернизацияОС2_4.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ
	|
	|			КОГДА НЕ ВводОстатков.Ссылка ЕСТЬ NULL
	|					И ВводОстатков.ПервоначальнаяСтоимостьНУ <> 0
	|				ТОГДА ВЫРАЗИТЬ(ВводОстатков.СуммаКапитальныхВложенийВключаемыхВРасходыНУ / ВводОстатков.ПервоначальнаяСтоимостьНУ * 100 КАК ЧИСЛО(4, 2))
	|
	|			КОГДА НЕ ВводОстатков2_4.Ссылка ЕСТЬ NULL
	|					И ВводОстатков2_4.ПервоначальнаяСтоимостьНУ <> 0
	|				ТОГДА ВЫРАЗИТЬ(ВводОстатков2_4.СуммаКапитальныхВложенийВключаемыхВРасходыНУ / ВводОстатков2_4.ПервоначальнаяСтоимостьНУ * 100 КАК ЧИСЛО(4, 2))
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Процент
	|	ИЗ
	|		РасходыНаКапитальныеВложения КАК РасходыНаКапитальныеВложения
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС КАК ПринятиеКУчету
	|			ПО РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии = ПринятиеКУчету.Ссылка
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4 КАК ПринятиеКУчету2_4
	|			ПО (РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии = ПринятиеКУчету2_4.Ссылка)
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.МодернизацияОС2_4.ОС КАК МодернизацияОС2_4
	|			ПО (РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии = МодернизацияОС2_4.Ссылка)
	|				И РасходыНаКапитальныеВложения.ОсновноеСредство = МодернизацияОС2_4.ОсновноеСредство
	|				И МодернизацияОС2_4.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ <> 0
	|				И МодернизацияОС2_4.Ссылка.АмортизационнаяПремияУказанаВПроцентах
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов.ОС КАК ВводОстатков
	|			ПО РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии = ВводОстатков.Ссылка
	|				И РасходыНаКапитальныеВложения.ОсновноеСредство = ВводОстатков.ОсновноеСредство
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ВводОстатков2_4
	|			ПО (РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии = ВводОстатков2_4.Ссылка)
	|				И (РасходыНаКапитальныеВложения.ОсновноеСредство = ВводОстатков2_4.ОсновноеСредство)
	|	ГДЕ
	|		НЕ(ПринятиеКУчету.Ссылка ЕСТЬ NULL
	|				И ПринятиеКУчету2_4.Ссылка ЕСТЬ NULL
	|				И МодернизацияОС2_4.Ссылка ЕСТЬ NULL
	|				И ВводОстатков.Ссылка ЕСТЬ NULL
	|				И ВводОстатков2_4.Ссылка ЕСТЬ NULL)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасходыНаКапитальныеВложения.Подразделение КАК Подразделение,
	|		РасходыНаКапитальныеВложения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		РасходыНаКапитальныеВложения.ОсновноеСредство КАК ОсновноеСредство,
	|		РасходыНаКапитальныеВложения.Сумма КАК Сумма,
	|		ВЫБОР
	|			КОГДА ПараметрыМодернизацииОС.СуммаМодернизации <> 0
	|				ТОГДА РасходыНаКапитальныеВложения.Сумма / ПараметрыМодернизацииОС.СуммаМодернизации * 100
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Процент
	|	ИЗ
	|		РасходыНаКапитальныеВложения КАК РасходыНаКапитальныеВложения
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыМодернизацииОС КАК ПараметрыМодернизацииОС
	|			ПО РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии = ПараметрыМодернизацииОС.Ссылка
	|				И РасходыНаКапитальныеВложения.ОсновноеСредство = ПараметрыМодернизацииОС.ОсновноеСредство
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.МодернизацияОС.ОС КАК МодернизацияОС
	|			ПО РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии = МодернизацияОС.Ссылка
	|				И РасходыНаКапитальныеВложения.ОсновноеСредство = МодернизацияОС.ОсновноеСредство
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.МодернизацияОС2_4.ОС КАК МодернизацияОС2_4
	|			ПО РасходыНаКапитальныеВложения.ДокументАмортизационнойПремии = МодернизацияОС2_4.Ссылка
	|				И РасходыНаКапитальныеВложения.ОсновноеСредство = МодернизацияОС2_4.ОсновноеСредство
	|				И НЕ МодернизацияОС2_4.Ссылка.АмортизационнаяПремияУказанаВПроцентах
	|	ГДЕ
	|		НЕ(МодернизацияОС.Ссылка ЕСТЬ NULL
	|			И МодернизацияОС2_4.Ссылка ЕСТЬ NULL)
	|
	|	) КАК СуммыАмортизационнойПремии
	|
	|ГДЕ
	|	СуммыАмортизационнойПремии.Процент <= &ВерхнийЛимитПроцента
	|	И СуммыАмортизационнойПремии.Процент <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыАмортизационнойПремии.Подразделение,
	|	СуммыАмортизационнойПремии.НаправлениеДеятельности,
	|	СуммыАмортизационнойПремии.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	НаправлениеДеятельности";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Если РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(
			ПроцессорПолученияДанных.КонтекстРасчета.Организация, ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода) Тогда
		
		ПараметрыПолученияНалогообложенияПрибыли = РаздельныйУчетПоНалогуНаПрибыль.НовыйПараметрыПолученияТаблицыНастроекНалогообложенияПрибыли();
		ПараметрыПолученияНалогообложенияПрибыли.ИмяТаблицы = "ПодготовленныеДанные";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Организация = "Организация";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Подразделение = "Подразделение";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_НаправлениеДеятельности = "НаправлениеДеятельности";
		ТекстЗапроса = РаздельныйУчетПоНалогуНаПрибыль.ТекстЗапроса_НастройкиНалогообложенияПрибыли(ПараметрыПолученияНалогообложенияПрибыли);
	
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	NULL КАК ВариантНалогообложенияПрибыли,
		|	NULL КАК Организация,
		|	NULL КАК Подразделение,
		|	NULL КАК НаправлениеДеятельности
		|ПОМЕСТИТЬ РаздельныйУчет_НастройкиНалогообложенияПрибыли";
	КонецЕсли;
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНалогообложенияПрибыли.ВариантНалогообложенияПрибыли,
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО,
	|	Таблица.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(Таблица.СуммаНУ) КАК СуммаНУ
	|ИЗ
	|	ПодготовленныеДанные КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаздельныйУчет_НастройкиНалогообложенияПрибыли КАК ТаблицаНалогообложенияПрибыли
	|		ПО ТаблицаНалогообложенияПрибыли.Организация = Таблица.Организация
	|		И ТаблицаНалогообложенияПрибыли.Подразделение = Таблица.Подразделение
	|		И ТаблицаНалогообложенияПрибыли.НаправлениеДеятельности = Таблица.НаправлениеДеятельности
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ТаблицаНалогообложенияПрибыли.ВариантНалогообложенияПрибыли,
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)),
	|	Таблица.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаНУ УБЫВ";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Период", ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода);
	
	// Алгоритм получения данных сложно проиллюстрировать отчетом.
	// Поэтому покажем расшифровку по каждому объекту.
	ШаблонДетальногоОписания = НСтр("ru = '%1
	|Объект основных средств: %2';
	|en = '%1
	|Fixed asset: %2'");
	
	ШаблонОписания = НСтр("ru = 'Оборот по кредиту счета %1 по документам амортизационной премии с указанным процентом не более %2%%';
							|en = '%1 account credit turnover by depreciation premium documents with the specified rate of not more than %2%%'");
	
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Задача.ЭтапРасчета <> "Все" Тогда
			// Используется только один этап
			Продолжить;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВерхнийЛимитПроцента", Задача.ОтборДанных.ВерхнийЛимитПроцента);
		РезультатЗапроса = Запрос.Выполнить();
		
		ОбщееОписание = СтрШаблон(
			ШаблонОписания, 
			ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения,
			Задача.ОтборДанных.ВерхнийЛимитПроцента);
		
		Если РезультатЗапроса.Пустой() Тогда
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
			ЗаписьПротокола.Описание = ОбщееОписание;
			Продолжить;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Отбор = Новый Структура("ВариантНО", Задача.ВариантНО);
		Пока Выборка.НайтиСледующий(Отбор) Цикл
			
			Задача.СуммаНУ = Задача.СуммаНУ + Выборка.СуммаНУ;
			
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, Выборка);
			ЗаписьПротокола.Описание = СтрШаблон(
				ШаблонДетальногоОписания, 
				ОбщееОписание,
				Выборка.ОсновноеСредство);
			ЗаписьПротокола.Условие.ОсновноеСредство = Выборка.ОсновноеСредство;
			ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
				
		КонецЦикла;
		
		Выборка.Сбросить();
		
	КонецЦикла;
			
КонецПроцедуры

Функция НастройкиОтчетаКапитальныеВложения(СхемаРасчета, ОсновноеСредство)
	
	Счет = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
	
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотноСальдоваяВедомостьПоСчету",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		Счет,
		СхемаРасчета.ОписаниеСумм);
		
	ОписаниеПоляОсновныеСредства = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		"Субконто",
		Счет,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		
	Если ОписаниеПоляОсновныеСредства <> Неопределено Тогда
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеПоляОсновныеСредства.Имя,
			ОписаниеПоляОсновныеСредства.Представление);
	
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ОписаниеПоляОсновныеСредства.Имя,
			ОсновноеСредство,
			ВидСравненияКомпоновкиДанных.Равно);
			
	КонецЕсли;
	
	ОписаниеПоляДокументыАмортизационнойПремии = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		"Субконто",
		Счет,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии);
		
	Если ОписаниеПоляДокументыАмортизационнойПремии <> Неопределено Тогда
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеПоляДокументыАмортизационнойПремии.Имя,
			ОписаниеПоляДокументыАмортизационнойПремии.Представление);
	
	КонецЕсли;
	
	Возврат Настройки;
		
КонецФункции

#КонецОбласти

#Область Амортизация

Процедура ПолучитьАмортизация(ПроцессорПолученияДанных)
	
	// Поскольку данные не участвуют в расчете, практически полезны только суммы НУ
	ИменаСвойств = КоллекцииСумм.ИменаСвойств(ПроцессорПолученияДанных.ОписаниеСумм);
	Если ИменаСвойств.Найти("СуммаНУ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Основной запрос
	ПредопределенныеСчетаУчета = СчетаУчетаАмортизации();
	
	СчетаУчета = Новый Структура;
	Для Каждого КлючИЗначение Из ПредопределенныеСчетаУчета Цикл
		СчетаУчета.Вставить(КлючИЗначение.Ключ, БухгалтерскийУчетПовтИсп.СчетаВИерархии(КлючИЗначение.Значение));
	КонецЦикла;
	
	ТекстыЗапросов = Новый Массив;
	ТекстЗапроса = // Может модифицироваться схемой запроса в СуммыАмортизацииИсключенияНелинейногоМетода, СуммыАмортизацииСпециальныеНалоговыеРежимы
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеСредства.ПодразделениеКт КАК Подразделение,
	|	ОсновныеСредства.НаправлениеДеятельностиКт КАК НаправлениеДеятельности,
	|	""ОсновныеСредства"" КАК ВидАктива,
	|	ЕСТЬNULL(ОсновныеСредства.СуммаНУОборотКт, 0) КАК Все,
	|	ЕСТЬNULL(ОсновныеСредства.СуммаНУОборотКт, 0) - ЕСТЬNULL(ОсновныеСредства.СуммаНУОборотДт, 0) КАК НеУчитываемые
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , НЕ СчетДт В (&СчетаОсновныеСредства), , СчетКт В (&СчетаОсновныеСредства), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация В (&Организации)) КАК ОсновныеСредства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	НематериальныеАктивы.ПодразделениеКт КАК Подразделение,
	|	НематериальныеАктивы.НаправлениеДеятельностиКт КАК НаправлениеДеятельности,
	|	""НематериальныеАктивы"",
	|	ЕСТЬNULL(НематериальныеАктивы.СуммаНУОборотКт, 0),
	|	ЕСТЬNULL(НематериальныеАктивы.СуммаНУОборотКт, 0) - ЕСТЬNULL(НематериальныеАктивы.СуммаНУОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , НЕ СчетДт В (&СчетаНематериальныеАктивы), , СчетКт В (&СчетаНематериальныеАктивы), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы), Организация В (&Организации)) КАК НематериальныеАктивы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	НаправлениеДеятельности";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Если РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(
			ПроцессорПолученияДанных.КонтекстРасчета.Организация, ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода) Тогда
		
		ПараметрыПолученияНалогообложенияПрибыли = РаздельныйУчетПоНалогуНаПрибыль.НовыйПараметрыПолученияТаблицыНастроекНалогообложенияПрибыли();
		ПараметрыПолученияНалогообложенияПрибыли.ИмяТаблицы = "ПодготовленныеДанные";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Организация = "Организация";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Подразделение = "Подразделение";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_НаправлениеДеятельности = "НаправлениеДеятельности";
		ТекстЗапроса = РаздельныйУчетПоНалогуНаПрибыль.ТекстЗапроса_НастройкиНалогообложенияПрибыли(ПараметрыПолученияНалогообложенияПрибыли);
	
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	NULL КАК ВариантНалогообложенияПрибыли,
		|	NULL КАК Организация,
		|	NULL КАК Подразделение,
		|	NULL КАК НаправлениеДеятельности
		|ПОМЕСТИТЬ РаздельныйУчет_НастройкиНалогообложенияПрибыли";
	КонецЕсли;
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНалогообложенияПрибыли.ВариантНалогообложенияПрибыли,
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО,
	|	Таблица.ВидАктива КАК ВидАктива,
	|	СУММА(Таблица.Все) КАК Все,
	|	СУММА(Таблица.НеУчитываемые) КАК НеУчитываемые
	|ИЗ
	|	ПодготовленныеДанные КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаздельныйУчет_НастройкиНалогообложенияПрибыли КАК ТаблицаНалогообложенияПрибыли
	|		ПО ТаблицаНалогообложенияПрибыли.Организация = Таблица.Организация
	|		И ТаблицаНалогообложенияПрибыли.Подразделение = Таблица.Подразделение
	|		И ТаблицаНалогообложенияПрибыли.НаправлениеДеятельности = Таблица.НаправлениеДеятельности
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ТаблицаНалогообложенияПрибыли.ВариантНалогообложенияПрибыли,
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)),
	|	Таблица.ВидАктива";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ШаблонЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ЭлементыОписания = Новый Структура;
	ЭлементыОписания.Вставить(
		"ОсновнойТекст",
		НСтр("ru = 'Оборот по кредиту счета %1';
			|en = '%1 account credit turnover'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ЭлементыОписания.Вставить(
		"НеУчитываемые",
		НСтр("ru = 'с незаполненной суммой проводок по дебету';
			|en = 'with empty amount of postings in debit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ЭлементыОписания.Вставить(
		"Исключения",
		НСтр("ru = 'по объектам, для которых линейный метод амортизации применяется вне зависимости от установленного налогоплательщиком';
			|en = 'for assets for which the linear depreciation method is applied regardless of the one established by taxpayer'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ШаблоныОписания = Новый Структура;
	ШаблоныОписания.Вставить("Всего", Новый Структура);
	ШаблоныОписания.Всего.Вставить("Все", СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		НСтр("ru = '[ОсновнойТекст]';
			|en = '[ОсновнойТекст]'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ЭлементыОписания));
	ШаблоныОписания.Всего.Вставить("НеУчитываемые", СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		НСтр("ru = '[ОсновнойТекст] [НеУчитываемые]';
			|en = '[ОсновнойТекст] [НеУчитываемые]'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ЭлементыОписания));
	
	СуммыАмортизации = Новый Структура;
	СуммыАмортизации.Вставить("Всего", СуммыАмортизации(ШаблонЗапроса, СчетаУчета, ПроцессорПолученияДанных));
	
	ЕстьИсключенияНелинейногоМетода = ЕстьИсключенияНелинейногоМетода(ПроцессорПолученияДанных.Задачи);
	Если ЕстьИсключенияНелинейногоМетода Тогда
		
		ШаблоныОписания.Вставить("Исключения", Новый Структура);
		ШаблоныОписания.Исключения.Вставить("Все", СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = '[ОсновнойТекст] - [Исключения]';
				|en = '[ОсновнойТекст] - [Исключения]'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ЭлементыОписания));
		ШаблоныОписания.Исключения.Вставить("НеУчитываемые", СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = '[ОсновнойТекст] [НеУчитываемые] - [Исключения]';
				|en = '[ОсновнойТекст] [НеУчитываемые] - [Исключения]'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ЭлементыОписания));
			
		
		СуммыИсключенияНелинейногоМетода = СуммыАмортизацииИсключенияНелинейногоМетода(
			ШаблонЗапроса,
			СчетаУчета,
			ПроцессорПолученияДанных);
			
		СуммыАмортизации.Вставить("Исключения", СуммыИсключенияНелинейногоМетода);
		
	КонецЕсли;
	
	// При наличии специальных налоговых режимов могут потребоваться данные с дополнительной детализацией
	СуммыАмортизацииСпециальныеНалоговыеРежимы = СуммыАмортизацииСпециальныеНалоговыеРежимы(
		ШаблонЗапроса,
		ЕстьИсключенияНелинейногоМетода,
		СчетаУчета,
		ПроцессорПолученияДанных);
		
	// Скомпонуем полученные данные
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Не ЗначениеЗаполнено(Задача.ОтборДанных.ВидАктива) Тогда
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		Ресурс = "Все";
		Если Задача.ЭтапРасчета = "Все" Тогда
			Данные = СуммыАмортизации;
		ИначеЕсли Задача.ЭтапРасчета = "НеУчитываемые" Тогда
			Данные = СуммыАмортизации;
			Ресурс = "НеУчитываемые";
		ИначеЕсли Задача.ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
			Данные = СуммыАмортизацииСпециальныеНалоговыеРежимы.Отнесенные;
		ИначеЕсли Задача.ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
			Данные = СуммыАмортизацииСпециальныеНалоговыеРежимы.Распределенные;
		Иначе
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		Если Не Задача.ОтборДанных.ИсключенияНелинейногоМетода Тогда
			ИмяЭлементаДанных = "Всего";
		Иначе
			ИмяЭлементаДанных = "Исключения";
		КонецЕсли;
			
		Задача.СуммаНУ = Данные[ИмяЭлементаДанных][Задача.ОтборДанных.ВидАктива][Ресурс][Задача.ВариантНО];
		
		ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
		ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Задача.ОтборДанных);
		
		ЗаписьПротокола.Описание = СтрШаблон(
			ШаблоныОписания[ИмяЭлементаДанных][Ресурс],
			ПредопределенныеСчетаУчета[Задача.ОтборДанных.ВидАктива]);
			
		Если ЭтапРасчетаСпециальныеРежимы(Задача.ЭтапРасчета) Тогда
			ЗаписьПротокола.Описание = ЗаписьПротокола.Описание + ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СчетаУчетаАмортизации()
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("ОсновныеСредства",     ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	СчетаУчета.Вставить("НематериальныеАктивы", ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	Возврат СчетаУчета;
	
КонецФункции

Функция СуммыАмортизации(ТекстЗапроса, СчетаУчета, ПроцессорПолученияДанных)
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Для Каждого ОписаниеВидаАктивов Из СчетаУчета Цикл
		Запрос.УстановитьПараметр("Счета" + ОписаниеВидаАктивов.Ключ, ОписаниеВидаАктивов.Значение);
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	
	Если Не Запрос.Параметры.Свойство("Период") Тогда
		Запрос.УстановитьПараметр("Период", ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода);
	КонецЕсли;
	
	СуммыАмортизации = Новый Структура;
	СуммыАмортизации.Вставить("ОсновныеСредства",     Новый Структура);
	СуммыАмортизации.Вставить("НематериальныеАктивы", Новый Структура);
	
	Ресурсы = СтрРазделить("Все,НеУчитываемые", ",");
	
	Для Каждого КлючИЗначение Из СуммыАмортизации Цикл
		Для Каждого Ресурс Из Ресурсы Цикл
			СуммыАмортизации[КлючИЗначение.Ключ].Вставить(Ресурс, Новый Соответствие);
		КонецЦикла;
	КонецЦикла;
	
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы, , Истина);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммыПоВидуАктива = СуммыАмортизации[Выборка.ВидАктива];
		Для Каждого Ресурс Из Ресурсы Цикл
			СуммыПоРесурсу = СуммыПоВидуАктива[Ресурс];
			Если СуммыПоРесурсу[Выборка.ВариантНО] = Неопределено Тогда
				СуммыПоРесурсу.Вставить(Выборка.ВариантНО, 0);
			КонецЕсли;
			СуммыПоРесурсу[Выборка.ВариантНО] = СуммыПоРесурсу[Выборка.ВариантНО] + Выборка[Ресурс];
		КонецЦикла;
	КонецЦикла;
	
	Возврат СуммыАмортизации;
	
КонецФункции

Функция ИсключенияНелинейногоМетода()
	
	// 1. ст. 259 НК РФ:
	// "3. Вне зависимости от установленного налогоплательщиком в учетной политике для целей налогообложения метода начисления амортизации
	// линейный метод начисления амортизации применяется в отношении зданий, сооружений, передаточных устройств, нематериальных активов,
	// входящих в восьмую - десятую амортизационные группы"
	//
	// 2. линейный метод всегда применяется для объектов, выделенных в отдельную амортизационную группу - см. письмо Минфина России от 08.12.2008 № 03-03-06/1/681
	
	Исключения = Новый Структура;
	Исключения.Вставить("ОтдельнаяГруппа",                  Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа); // Исключается всегда
	Исключения.Вставить("ИсключаемыеАмортизационныеГруппы", Новый Массив); // Исключаются для ОС, входящих в исключаемые виды, и для всех НМА
	Исключения.ИсключаемыеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	Исключения.ИсключаемыеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	Исключения.ИсключаемыеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	Исключения.Вставить("ИсключаемыеВидыОсновныхСредств", Новый Массив);
	Исключения.ИсключаемыеВидыОсновныхСредств.Добавить(Перечисления.ГруппыОС.Здания);
	Исключения.ИсключаемыеВидыОсновныхСредств.Добавить(Перечисления.ГруппыОС.Сооружения);
	
	Возврат Исключения;
	
	
КонецФункции

Процедура СоздатьПеречниОбъектовИсключенияНелинейногоМетода(МенеджерВременныхТаблиц)
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ИсключаемыеОсновныеСредства") <> Неопределено
		Или МенеджерВременныхТаблиц.Таблицы.Найти("ИсключаемыеНематериальныеАктивы") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Для Каждого ОписаниеИсключения Из ИсключенияНелинейногоМетода() Цикл
		Запрос.УстановитьПараметр(ОписаниеИсключения.Ключ, ОписаниеИсключения.Значение);
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИсключаемыеОсновныеСредства
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО ПорядокУчетаОСБУ.ОсновноеСредство = ОсновныеСредства.Ссылка
	|ГДЕ
	|	ПорядокУчетаОСБУ.АмортизационнаяГруппа = &ОтдельнаяГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО ПорядокУчетаОСБУ.ОсновноеСредство = ОсновныеСредства.Ссылка
	|ГДЕ
	|	ПорядокУчетаОСБУ.АмортизационнаяГруппа В (&ИсключаемыеАмортизационныеГруппы)
	|	И ОсновныеСредства.ГруппаОС В (&ИсключаемыеВидыОсновныхСредств)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИсключаемыеНематериальныеАктивы
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.АмортизационнаяГруппа В (&ИсключаемыеАмортизационныеГруппы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.АмортизационнаяГруппа = &ОтдельнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СуммыАмортизацииИсключенияНелинейногоМетода(ШаблонЗапроса, СчетаУчета, ПроцессорПолученияДанных)
	
	СоздатьПеречниОбъектовИсключенияНелинейногоМетода(ПроцессорПолученияДанных.ВременныеТаблицы.Менеджер);
	
	ШаблонУсловия = "СубконтоКт1 В (ВЫБРАТЬ Исключения.Ссылка ИЗ %1 КАК Исключения)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонЗапроса);
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0]; // Запрос к виртуальным таблицам ОборотыДтКт регистра бухгалтерии
		
	Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
		
		Отбор = "";
		
		Источник = ОператорЗапроса.Источники[0].Источник;
		Если Источник.Псевдоним = "ОсновныеСредства" Тогда
			Отбор = "ИсключаемыеОсновныеСредства";
		ИначеЕсли Источник.Псевдоним = "НематериальныеАктивы" Тогда
			Отбор = "ИсключаемыеНематериальныеАктивы";
		КонецЕсли;
		
		Если ПустаяСтрока(Отбор) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьУсловиеВиртуальнойТаблицыОборотыДтКт(Источник.Параметры, СтрШаблон(ШаблонУсловия, Отбор));
		
	КонецЦикла;
	
	СуммыИсключенияНелинейногоМетода = СуммыАмортизации(
		СхемаЗапроса.ПолучитьТекстЗапроса(),
		СчетаУчета,
		ПроцессорПолученияДанных);
	
	Возврат СуммыИсключенияНелинейногоМетода;
		
КонецФункции

Функция СуммыАмортизацииСпециальныеНалоговыеРежимы(ШаблонЗапроса, ЕстьИсключенияНелинейногоМетода, СчетаУчета, ПроцессорПолученияДанных)
	
	СпециальныеНалоговыеРежимы = Ложь;
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если ЭтапРасчетаСпециальныеРежимы(Задача.ЭтапРасчета) Тогда
			СпециальныеНалоговыеРежимы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СпециальныеНалоговыеРежимы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СуммыАмортизации = Новый Структура;
	СуммыАмортизации.Вставить("Отнесенные",     Новый Структура);
	СуммыАмортизации.Отнесенные.Вставить("Всего", 0);
	СуммыАмортизации.Вставить("Распределенные", Новый Структура);
	СуммыАмортизации.Распределенные.Вставить("Всего", 0);
	
	Если ЕстьИсключенияНелинейногоМетода Тогда
		СуммыАмортизации.Отнесенные.Вставить("Исключения",     0);
		СуммыАмортизации.Распределенные.Вставить("Исключения", 0);
	КонецЕсли;
	
	// Отнесенные на специальные режимы
	ТекстЗапросаСтатьиРасходов =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СтатьиРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ВидДеятельности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатьиДоходов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ВидДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст = ТекстЗапросаСтатьиРасходов;
	Запрос.УстановитьПараметр("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонЗапроса);
	
	ИндексПараметраСубконтоДт = 4; // параметр виртуальной таблицы ОборотыДтКт
	
	УсловиеСтатьиРасходов = "СубконтоДт1 В (ВЫБРАТЬ СтатьиРасходов.Ссылка ИЗ ВТ_СтатьиРасходов КАК СтатьиРасходов)";
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0]; // Запрос к виртуальным таблицам ОборотыДтКт регистра бухгалтерии
		
	// Разделим каждый из двух запросов (по ОС и НМА) по видам статей (затрат и прочих расходов).
	// Разделенные запросы будут отличаться видом субконто:
	// в отбор виртуальной таблицы каждого из запросов добавим вид субконто и отбор по таблице с перечнем аналитики, созданной выше.
	// То есть, получится четыре запроса:
	// 1. Основные средства с детализацией до статей затрат
	// 2. Нематериальные активы с детализацией до статей затрат
	// 3. Основные средства с детализацией до статей прочих расходов
	// 4. Нематериальные активы с детализацией до статей прочих расходов
	Для ИндексОператора = 0 По ОписаниеЗапроса.Операторы.Количество() - 1 Цикл
		
		// Существующий оператор - Статьи затрат
		ОператорСтатьиЗатрат = ОписаниеЗапроса.Операторы[ИндексОператора];
		
		ПараметрыВиртуальнойТаблицы = ОператорСтатьиЗатрат.Источники[0].Источник.Параметры;
		ПараметрыВиртуальнойТаблицы[ИндексПараметраСубконтоДт].Выражение =
			Новый ВыражениеСхемыЗапроса("ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)");
		
		ДобавитьУсловиеВиртуальнойТаблицыОборотыДтКт(ПараметрыВиртуальнойТаблицы, УсловиеСтатьиРасходов);
		
		// Новый оператор - Прочие расходы
		ОператорПрочиеРасходы = ОписаниеЗапроса.Операторы.Добавить(ОператорСтатьиЗатрат);
		
		ПараметрыВиртуальнойТаблицы = ОператорПрочиеРасходы.Источники[0].Источник.Параметры;
		ПараметрыВиртуальнойТаблицы[ИндексПараметраСубконтоДт].Выражение =
			Новый ВыражениеСхемыЗапроса("ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)");
		
		// Поскольку для метода Добавить не специфицировано, в какую позицию будет помещена копия запроса,
		// принудительно подвинем ее в конец
		ОписаниеЗапроса.Операторы.Переместить(ОператорПрочиеРасходы, ОписаниеЗапроса.Операторы.Количество() - 1);
		
	КонецЦикла;
	
	ШаблонЗапросаСпециальныеНалоговыеРежимы = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	СуммыАмортизации.Отнесенные.Всего = СуммыАмортизации(
		ШаблонЗапросаСпециальныеНалоговыеРежимы,
		СчетаУчета,
		ПроцессорПолученияДанных);
		
	Если ЕстьИсключенияНелинейногоМетода Тогда
		СуммыАмортизации.Отнесенные.Исключения = СуммыАмортизацииИсключенияНелинейногоМетода(
			ШаблонЗапросаСпециальныеНалоговыеРежимы,
			СчетаУчета,
			ПроцессорПолученияДанных);
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(ПроцессорПолученияДанных.ВременныеТаблицы, "ВТ_СтатьиРасходов");
	
	// Распределенные на специальные режимы
	// Используем полученный на прошлом шаге шаблон, детализируя данные по месяцам
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст = ТекстЗапросаСтатьиРасходов;
	Запрос.УстановитьПараметр("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	СоздатьВременнуюТаблицуДолиСпециальныеРежимы(ПроцессорПолученияДанных);
	
	ИндексПараметраПериодичность = 2;// параметр виртуальной таблицы ОборотыДтКт
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0]; // Запрос к виртуальным таблицам ОборотыДтКт регистра бухгалтерии
		
	КолонкаМесяц = Неопределено;
	
	Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
		
		Источник = ОператорЗапроса.Источники[0].Источник;
		
		ПараметрыВиртуальнойТаблицы = Источник.Параметры;
		ПараметрыВиртуальнойТаблицы[ИндексПараметраПериодичность].Выражение = Новый ВыражениеСхемыЗапроса("Месяц");
		
		ВыражениеПоля = СтрШаблон("%1.Период", Источник.Псевдоним);
		Если КолонкаМесяц <> Неопределено Тогда
			ОператорЗапроса.ВыбираемыеПоля.Добавить(ВыражениеПоля, ОписаниеЗапроса.Колонки.Индекс(КолонкаМесяц));
		Иначе
			ОператорЗапроса.ВыбираемыеПоля.Добавить(ВыражениеПоля);
			КолонкаМесяц = ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество()-1];
			КолонкаМесяц.Псевдоним = "Месяц";
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1]; // Запрос к результирующей таблице с Вариантами н/о
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	ОператорЗапроса.ВыбираемыеПоля.Добавить("Таблица.Месяц");
	КолонкаМесяц = ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество()-1];
	КолонкаМесяц.Псевдоним = "Месяц";
	
	ОператорЗапроса.Группировка.Добавить("Таблица.Месяц");
	
	ОписаниеЗапроса.ТаблицаДляПомещения = "ВТ_ОборотыПоМесяцам";
	ОписаниеЗапроса.Индекс.Добавить("Месяц");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Обороты.ВариантНО КАК ВариантНО,
	|	Обороты.ВидАктива КАК ВидАктива,
	|	СУММА(Обороты.Все * ДолиСпециальныеРежимы.Доля) КАК Все,
	|	0 КАК НеУчитываемые
	|ИЗ
	|	ВТ_ОборотыПоМесяцам КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиСпециальныеРежимы КАК ДолиСпециальныеРежимы
	|		ПО Обороты.Месяц = ДолиСпециальныеРежимы.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.ВариантНО,
	|	Обороты.ВидАктива";
	
	СхемаЗапроса.ПакетЗапросов.Добавить().УстановитьТекстЗапроса(ТекстЗапроса);
	
	ШаблонЗапросаСпециальныеНалоговыеРежимы = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	СуммыАмортизации.Распределенные.Всего = СуммыАмортизации(
		ШаблонЗапросаСпециальныеНалоговыеРежимы,
		СчетаУчета,
		ПроцессорПолученияДанных);
		
	Если ЕстьИсключенияНелинейногоМетода Тогда
		СуммыАмортизации.Распределенные.Исключения = СуммыАмортизацииИсключенияНелинейногоМетода(
			ШаблонЗапросаСпециальныеНалоговыеРежимы,
			СчетаУчета,
			ПроцессорПолученияДанных);
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(ПроцессорПолученияДанных.ВременныеТаблицы, "ВТ_СтатьиРасходов");
	
	Возврат СуммыАмортизации;
	
КонецФункции

Процедура ДобавитьУсловиеВиртуальнойТаблицыОборотыДтКт(ПараметрыВиртуальнойТаблицы, ТекстУсловия)
	
	ИндексПараметраУсловие = 7;// параметр виртуальной таблицы ОборотыДтКт
	
	Условия = Новый Массив;
	Условия.Добавить("(" + ПараметрыВиртуальнойТаблицы[ИндексПараметраУсловие].Выражение + ")");
	Условия.Добавить(ТекстУсловия);
	
	ПараметрыВиртуальнойТаблицы[ИндексПараметраУсловие].Выражение = Новый ВыражениеСхемыЗапроса(СтрСоединить(Условия, " И "));

КонецПроцедуры

Функция ЕстьИсключенияНелинейногоМетода(Задачи)
	
	Для Каждого Задача Из Задачи Цикл
		Если Задача.ОтборДанных.ИсключенияНелинейногоМетода Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НастройкиОтчетаАмортизация(ВидАктива, ИсключенияНелинейногоМетода, ЭтапРасчета, СхемаРасчета)
	
	СчетаУчета = СчетаУчетаАмортизации();
	
	Если Не СчетаУчета.Свойство(ВидАктива) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СчетУчета = СчетаУчета[ВидАктива];
	
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"АнализСчета",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		СчетУчета,
		СхемаРасчета.ОписаниеСумм);
		
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
		Настройки,
		"КорСчет",
		СчетУчета,
		ВидСравненияКомпоновкиДанных.НеВИерархии);
	
	Если ИсключенияНелинейногоМетода Тогда
		
		НастроитьОтчетИсключенияНелинейногоМетодаАмортизации(Настройки, "Субконто", ВидАктива, СчетУчета);
		
	КонецЕсли;
	
	Если ЭтапРасчетаСпециальныеРежимы(ЭтапРасчета) Тогда
		
		Если ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
			ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты;
		Иначе
			ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения;
		КонецЕсли;
			
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(
			Настройки,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат",
			ВидДеятельности,
			ВидСравненияКомпоновкиДанных.Равно);
			
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция НастройкиОтчетаАмортизацияНеУчитываемые(ВидАктива, ИсключенияНелинейногоМетода, СхемаРасчета)
	
	СчетаУчета = СчетаУчетаАмортизации();
	
	Если Не СчетаУчета.Свойство(ВидАктива) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СчетУчета = СчетаУчета[ВидАктива];
	
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОтчетПоПроводкам",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		СчетУчета,
		СхемаРасчета.ОписаниеСумм);
		
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
		Настройки,
		"СчетКт",
		СчетУчета,
		ВидСравненияКомпоновкиДанных.ВИерархии);
		
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
		Настройки,
		"Суммы.НУДт",
		Неопределено,
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Если ИсключенияНелинейногоМетода Тогда
		
		НастроитьОтчетИсключенияНелинейногоМетодаАмортизации(Настройки, "СубконтоКт", ВидАктива, СчетУчета);
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Процедура НастроитьОтчетИсключенияНелинейногоМетодаАмортизации(Настройки, ПолеВиртуальнойТаблицы, ВидАктива, СчетУчета)
	
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ВидАктива];
	
	ОписаниеПоляОбъект = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		ПолеВиртуальнойТаблицы,
		СчетУчета,
		ВидСубконто);
	
	Если ОписаниеПоляОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДобавитьОтборИсключенияНелинейногоМетодаАмортизации(Настройки, ОписаниеПоляОбъект.Имя, ВидСубконто);
		
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
		Настройки,
		ОписаниеПоляОбъект.Имя,
		ОписаниеПоляОбъект.Представление);
		
КонецПроцедуры

Процедура ДобавитьОтборИсключенияНелинейногоМетодаАмортизации(Настройки, ИмяПоля, ВидСубконто)
	
	ПараметрыИсключений = ИсключенияНелинейногоМетода();
	
	Отбор = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОтборНастроекОтчета(Настройки);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ИмяПоляАмортизационнаяГруппа = ИмяПоля + ".АмортизационнаяГруппа"; // Есть как у ОС, так и у НМА
	
	ГруппаАмортизационныеГруппы = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаАмортизационныеГруппы.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	// Исключается для активов обоих типов
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ГруппаАмортизационныеГруппы,
		ИмяПоляАмортизационнаяГруппа,
		ПараметрыИсключений.ОтдельнаяГруппа);
		
	// Применение остальных исключений зависит от вида активов
	ГруппаВидыОсновныхСредств = ГруппаАмортизационныеГруппы.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаВидыОсновныхСредств.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		ГруппаВидыОсновныхСредств,
		ИмяПоляАмортизационнаяГруппа,
		ПараметрыИсключений.ИсключаемыеАмортизационныеГруппы,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства Тогда
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ГруппаВидыОсновныхСредств,
			ИмяПоля + ".ГруппаОС",
			ПараметрыИсключений.ИсключаемыеВидыОсновныхСредств,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьМетодАмортизации(ПроцессорПолученияДанных)
	
	// Данные не участвуют в расчете, практически полезны только суммы НУ
	ИменаСвойств = КоллекцииСумм.ИменаСвойств(ПроцессорПолученияДанных.ОписаниеСумм);
	Если ИменаСвойств.Найти("СуммаНУ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
	
		Если Задача.ЭтапРасчета <> "Все" Тогда
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		// Коды указаны на форме декларации: 1 - линейный, 2 - нелинейный
		Код = 1;
		Если Задача.ОтборДанных.МетодАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
			Код = 2;
		КонецЕсли;
		
		Задача.СуммаНУ = Код;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УбыткиПрошлыхЛет

// Это алгоритм получения данных списка

Процедура ПолучитьУбыткиПрошлыхЛет(ПроцессорПолученияДанных)
	
	Если Не ПроцессорПолученияДанных.ЭтоСписок Тогда
		Возврат;
	КонецЕсли;
	
	// Об учете убытков прошлых лет см. комментарий в НалогНаПрибыльУбыткиПрошлыхЛет.ПорядокУчетаУбытковПрошлыхЛет().

	ПорядокУчета = ПорядокУчетаУбытковПрошлыхЛет(ПроцессорПолученияДанных.ОписаниеСумм);
	
	Если ПорядокУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Налоговым кодексом предусмотрены ограничения по срокам переноса убытков.
	// Убытки, возникшие в 2007 году и позднее, можно переносить в любые последующие годы.
	// Убытки, возникшие ранее, можно переносить только в течение 10 лет с даты возникновения.
	// В декларацию не выводим убытки, которые перенести нельзя.
	
	ОграничениеСрокаПереноса = 10;           // п. 2 ст. 283 НК РФ в ред., действующей до 2017 года
	ПериодОтменыОграничения  = '2007-01-01'; // п. 16 Закона N 401-ФЗ от 30.11.2016 (внесение изменений в п. 2 ст. 283 НК РФ)
	КоличествоМесяцевГода    = 12;           // п. 1 ст. 4 Закона N 107-ФЗ от 03.06.2011 "Об исчислении времени"
	
	НачалоПериодаУбытков = НачалоГода(ДобавитьМесяц(
		ПроцессорПолученияДанных.КонтекстРасчета.КонецПериода,
		-ОграничениеСрокаПереноса * КоличествоМесяцевГода));
		
	Если НачалоПериодаУбытков > ПериодОтменыОграничения Тогда
		НачалоПериодаУбытков = ПериодОтменыОграничения;
	КонецЕсли;
	
	НачалоПериодаПереноса = КонецГода(НачалоПериодаУбытков) + 1;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета);
	Запрос.УстановитьПараметр("СчетаУчетаУбытков",     ПорядокУчета.СчетаУчетаУбытков);
	Запрос.УстановитьПараметр("НачалоПериодаПереноса", НачалоПериодаПереноса);
	Запрос.УстановитьПараметр("МассивСубконто",        МассивСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УбыткиПрошлыхЛет.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(УбыткиПрошлыхЛет.ДатаНачалаСписания, ГОД, -1), ГОД) КАК ПериодВозникновения
	|ПОМЕСТИТЬ ВТ_СтатьиПеренесенныеУбытки
	|ИЗ
	|	Справочник.УбыткиПрошлыхЛет КАК УбыткиПрошлыхЛет
	|ГДЕ
	|	УбыткиПрошлыхЛет.ДатаНачалаСписания >= &НачалоПериодаПереноса
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Убытки.Субконто1 КАК СтатьяУбытка,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Убытки.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО,
	|	СУММА(Убытки.СуммаНУОстатокДт) КАК СуммаНУ
	|ПОМЕСТИТЬ ВТ_СуммыУбытка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаУчетаУбытков),
	|			&МассивСубконто,
	|			Организация В (&Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиУбытка.Ссылка
	|					ИЗ
	|						ВТ_СтатьиПеренесенныеУбытки КАК СтатьиУбытка)) КАК Убытки
	|
	|СГРУППИРОВАТЬ ПО
	|	Убытки.Субконто1,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Убытки.Субконто2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиУбытка.ПериодВозникновения КАК ПериодВозникновения,
	|	СуммыУбытка.ВариантНО КАК ВариантНО,
	|	СУММА(СуммыУбытка.СуммаНУ) КАК СуммаНУ
	|ИЗ
	|	ВТ_СуммыУбытка КАК СуммыУбытка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиПеренесенныеУбытки КАК СтатьиУбытка
	|		ПО СуммыУбытка.СтатьяУбытка = СтатьиУбытка.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиУбытка.ПериодВозникновения,
	|	СуммыУбытка.ВариантНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодВозникновения";
	
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы, , Истина);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// Опишем порядок заполнения в итоговых показателях
		
		ШаблоныОписаний = Новый Структура;
		ШаблоныОписаний.Вставить(
			"НомерГода",
			НСтр(
				"ru = 'Годы, в которых возник убыток, начиная с %1.
		         |Перечень лет, выводимых в отчет, определяется данными учета.
		         |Анализируется начальное сальдо по дебету счета %2 по статьям вида ""%3"" и периодом начала списания %4 или более поздним';
		         |en = 'Years, in which the loss occurred, starting from %1.
		         |The list of years displayed in the report is determined by accounting data.
		         |The opening balance of the %2 account debit is analyzed for items of ""%3"" kind and write-off beginning period %4 or later'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
				
		ШаблоныОписаний.Вставить(
			"Сумма",
			НСтр(
				"ru = 'Убытки, возникшие с %1 года: начальное сальдо по дебету счета %2 по статьям вида ""%3"" и периодом начала списания %4 или более поздним';
				|en = 'Loss occurred since %1: opening balance of %2 account debit for items of ""%3"" kind and write-off beginning period %4 or later'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
				
		
		Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
			
			Если Задача.ОтборДанных.ИндексСтроки >= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ШаблоныОписаний.Свойство(Задача.ОтборДанных.Показатель) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
			ЗаписьПротокола.Описание = СтрШаблон(
				ШаблоныОписаний[Задача.ОтборДанных.Показатель],
				ПредставлениеНомераГода(НачалоПериодаУбытков),
				ПорядокУчета.ПредставлениеСчетаУбытков,
				ПорядокУчета.ПредставлениеВидаСтатьи,
				Формат(НачалоПериодаПереноса, "ДЛФ=D"));
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблонДетальногоОписания = НСтр(
		"ru = 'Убыток, возникший в %1 году: начальное сальдо по дебету счета %2 по статьям вида ""%3"" и периодом начала списания, следующим за годом возникновения убытка';
		|en = 'Loss occurred in %1: opening balance of %2 account debit for items of ""%3"" kind and write-off beginning period following the year of loss occurrence'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ВариантыНО = ПроцессорПолученияДанных.Задачи.ВыгрузитьКолонку("ВариантНО");
	ВариантыНО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВариантыНО);
	
	Для Каждого ВариантНО Из ВариантыНО Цикл
		
		Отбор = Новый Структура("ВариантНО", ВариантНО);
		Пока Выборка.НайтиСледующий(Отбор) Цикл
			
			СтрокаСписка = ПроцессорПолученияДанных.ДанныеСписка.Добавить();
			СтрокаСписка.ВариантНО           = ВариантНО;
			СтрокаСписка.ПериодВозникновения = Выборка.ПериодВозникновения;
			СтрокаСписка.НомерГодаСтрокой    = ПредставлениеНомераГода(СтрокаСписка.ПериодВозникновения);
			СтрокаСписка.Сумма               = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм, Истина);
			КоллекцииСумм.Заполнить(СтрокаСписка.Сумма, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
			
			СтрокаСписка.НомерГодаЧислом = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
			ЗаписатьНомерГода(
				СтрокаСписка.НомерГодаЧислом,
				СтрокаСписка.ПериодВозникновения,
				ПроцессорПолученияДанных.ОписаниеСумм);
				
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(
				ПроцессорПолученияДанных,
				Выборка,
				СтрокаСписка,
				"Сумма");
			ЗаписьПротокола.Описание = СтрШаблон(
				ШаблонДетальногоОписания,
				ПредставлениеНомераГода(Выборка.ПериодВозникновения),
				ПорядокУчета.ПредставлениеСчетаУбытков,
				ПорядокУчета.ПредставлениеВидаСтатьи);
			ЗаписьПротокола.Условие.ПериодВозникновения = Выборка.ПериодВозникновения;
			
		КонецЦикла;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиОтчетаУбыткиПрошлыхЛет(ПериодВозникновенияУбытка, СхемаРасчета)
	
	ПорядокУчета = ПорядокУчетаУбытковПрошлыхЛет(СхемаРасчета.ОписаниеСумм);
	Если ПорядокУчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотноСальдоваяВедомостьПоСчету",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		ПорядокУчета.СчетУчетаУбытков,
		СхемаРасчета.ОписаниеСумм);
	
	ОписаниеПоляСтатьяУбытка = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		"Субконто",
		ПорядокУчета.СчетУчетаУбытков,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
		
	КоличествоМесяцевВГоду = 12;
	
	Если ОписаниеПоляСтатьяУбытка <> Неопределено Тогда
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеПоляСтатьяУбытка.Имя,
			ОписаниеПоляСтатьяУбытка.Представление);
			
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ОписаниеПоляСтатьяУбытка.Имя + "." + "ВидРБП",
			ПорядокУчета.ВидСтатьиРБП);
		
		ПервыйГодСписания = ДобавитьМесяц(ПериодВозникновенияУбытка, КоличествоМесяцевВГоду);
		ПолеДатаСписания  = ОписаниеПоляСтатьяУбытка.Имя + "." + "ДатаНачалаСписания";
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ПолеДатаСписания,
			НачалоГода(ПервыйГодСписания),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ПолеДатаСписания,
			КонецГода(ПервыйГодСписания),
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
			
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Процедура ПолучитьПереносУбытковПрошлыхЛет(ПроцессорПолученияДанных)
	
	// Об учете убытков прошлых лет см. комментарий в ПолучитьУбыткиПрошлыхЛет.
	
	// Уменьшение прибыли на сумму убытков прошлых лет отражается проводкой Дт 99.01.1 Кт 97,
	// где на счете 97 используются статьи особого вида.
	
	ПорядокУчета = ПорядокУчетаУбытковПрошлыхЛет(ПроцессорПолученияДанных.ОписаниеСумм);
	Если ПорядокУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета);
	Запрос.УстановитьПараметр("СчетУчетаПрибыли",  ПорядокУчета.СчетУчетаПрибыли);
	Запрос.УстановитьПараметр("СчетаУчетаУбытков", ПорядокУчета.СчетаУчетаУбытков);
	Запрос.УстановитьПараметр("МассивСубконто",    МассивСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УменьшениеПрибыли.СубконтоКт1 КАК СтатьяУбытка,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(УменьшениеПрибыли.СубконтоКт2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО,
	|	СУММА(УменьшениеПрибыли.СуммаНУОборотДт) КАК СуммаНУ
	|ПОМЕСТИТЬ СуммыУбытка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода,, СчетДт = &СчетУчетаПрибыли,, СчетКт В
	|	(&СчетаУчетаУбытков), &МассивСубконто, Организация В (&Организации)) КАК УменьшениеПрибыли
	|СГРУППИРОВАТЬ ПО
	|	УменьшениеПрибыли.СубконтоКт1,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(УменьшениеПрибыли.СубконтоКт2 КАК Справочник.ВариантыНалогообложенияПрибыли),
	|		ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыУбытка.ВариантНО,
	|	ЕСТЬNULL(СУММА(СуммыУбытка.СуммаНУ), 0) КАК СуммаНУ
	|ИЗ
	|	СуммыУбытка КАК СуммыУбытка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УбыткиПрошлыхЛет КАК УбыткиПрошлыхЛет
	|		ПО СуммыУбытка.СтатьяУбытка = УбыткиПрошлыхЛет.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	СуммыУбытка.ВариантНО";
	
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы, , Истина);
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблонОписания = НСтр(
		"ru = 'Оборот по дебету счета %1 в корреспонденции со счетом %2 по статьям вида ""%3""';
		|en = '%1 account debit turnover in correspondence with %2 account by items of ""%3"" type'",
		ОбщегоНазначения.КодОсновногоЯзыка());
			
	ТекстОписания = СтрШаблон(
		ШаблонОписания,
		ПорядокУчета.ПредставлениеСчетаПрибыли,
		ПорядокУчета.ПредставлениеСчетаУбытков,
		ПорядокУчета.ПредставлениеВидаСтатьи);
	
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Задача.ЭтапРасчета <> "Все" Тогда
			// Поскольку речь не идет о доходах и расходах, другие этапы не применимы
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ВариантНО", Задача.ВариантНО);
		
		Пока Выборка.НайтиСледующий(Отбор) Цикл
			ЗаполнитьЗначенияСвойств(Задача, Выборка);
			
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
			ЗаписьПротокола.Описание = ТекстОписания;
		КонецЦикла;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиОтчетаПереносУбытковПрошлыхЛет(СхемаРасчета)
	
	ПорядокУчета = ПорядокУчетаУбытковПрошлыхЛет(СхемаРасчета.ОписаниеСумм);
	Если ПорядокУчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотыСчета",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		ПорядокУчета.СчетУчетаПрибыли,
		СхемаРасчета.ОписаниеСумм);
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.НастроитьОборотыСчета(Настройки, "Дт");
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
		Настройки,
		"КорСчетОтбор",
		ПорядокУчета.СчетУчетаУбытков,
		ВидСравненияКомпоновкиДанных.ВИерархии);
	
	ОписаниеСубконтоСтатьиУбытка = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоСчета(
		"КорСубконто",
		ПорядокУчета.СчетУчетаУбытков,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
		
	Если ОписаниеСубконтоСтатьиУбытка <> Неопределено Тогда
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеСубконтоСтатьиУбытка.Имя,
			ОписаниеСубконтоСтатьиУбытка.Представление);
			
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Настройки,
			ОписаниеСубконтоСтатьиУбытка.Имя + "." + "ВидРБП",
			ПорядокУчета.ВидСтатьиРБП);
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ПорядокУчетаУбытковПрошлыхЛет(ОписаниеСумм)
	
	ИменаСвойств = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	Если ИменаСвойств.Найти("СуммаНУ") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НалогНаПрибыльУбыткиПрошлыхЛет.ПорядокУчетаУбытковПрошлыхЛет();
	
КонецФункции

Функция ПредставлениеНомераГода(Период)
	
	Возврат Формат(Период, "ДФ=yyyy");
	
КонецФункции

Процедура ЗаписатьНомерГода(ХранилищеСумм, Период, ОписаниеСумм)
	
	// Показатели декларации означают суммы.
	// В общем случае это может быть несколько сумм - бухгалтерского, налогового учета.
	// В частном случае сумма налогового учета может отсутствовать.
	// Для хранения номера года также используем свойство для хранения суммы - первое по очереди.
	
	ИменаСвойств = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	Если Не ЗначениеЗаполнено(ИменаСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеСумм[ИменаСвойств[0]] = Год(Период);
	
КонецПроцедуры

Функция ПрочитатьНомерГода(ХранилищеСумм, ОписаниеСумм)
	
	// См. также ЗаписатьНомерГода
	
	ИменаСвойств = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	Если Не ЗначениеЗаполнено(ИменаСвойств) Тогда
		Возврат '0001-01-01';
	КонецЕсли;
	
	НомерГода = ХранилищеСумм[ИменаСвойств[0]];
	Если Не ЗначениеЗаполнено(НомерГода) Тогда
		Возврат '0001-01-01';
	КонецЕсли;
	
	МаксимальноДопустимыйНомерГода = 3999;
	Если НомерГода > МаксимальноДопустимыйНомерГода Тогда
		Возврат '0001-01-01';
	КонецЕсли;
	
	Возврат Дата(НомерГода, 1, 1);
	
КонецФункции

#КонецОбласти

#КонецОбласти // ПолучениеДанных

#КонецОбласти // ПорядокЗаполненияДекларации

#Область РаспределениеНалога

// распределение налога между обособленными подразделениями

Функция ОписаниеФормыРасчетаРаспределенияНалога(КонтекстРасчета, ИмяРедакции)
	
	// Раздельно по каждой регистрации в налоговом органе (КПП)
	// - по месту нахождения организации
	// - по месту нахождения каждого обособленного подразделения
	
	// В форме декларации некоторые из этих показателей показаны относящимися только к обособленным подразделениям.
	// Но в формате ее представления в электронной форме отмечены безусловно обязательными 
	// Наименование, КПП и исполнение обязанности по уплате налогов.
	// Поэтому заполняем их не только для обособленных подразделений, но и по месту нахождения организации.
	
	// Имена см. также в РассчитатьРаспределениеНалога()
	// При помещении списка показателей в более общую коллекцию может использоваться префикс
	// - см. ПрефиксИмениРаспределениеНалога().
	
	КодСпискаФНС = "РаспрНалСубРФТип";
	
	ОписаниеФормыОтчета = НовыйОписаниеФормыОтчета();
	
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "КПП";
	Показатель.Представление        = "КПП, в отношении которого представляется расчет";
	Показатель.СлужебныйНомерСтроки = РегламентированныйОтчетПрибыль.КодМножественногоЭлемента(
		КодСпискаФНС,
		"КППОП",
		ИмяРедакции);
	
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "МестоНахожденияНалоговогоОргана";
	Показатель.Представление        = "Код причины, по которой расчет представляется в конкретный налоговый орган";
	Показатель.СлужебныйНомерСтроки = РегламентированныйОтчетПрибыль.КодМножественногоЭлемента(
		КодСпискаФНС,
		"ОбРасч",
		ИмяРедакции);
	
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "ВозложенаОбязанностьУплатыНалога";
	Показатель.Представление        = "На обособленное подразделение возложена обязанность по уплате налога";
	Показатель.СлужебныйНомерСтроки = РегламентированныйОтчетПрибыль.КодМножественногоЭлемента(
		КодСпискаФНС,
		"ОбязУплНалОП",
		ИмяРедакции);
	
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "НаименованиеПодразделения";
	Показатель.Представление        = "Наименование обособленного подразделения";
	Показатель.СлужебныйНомерСтроки = РегламентированныйОтчетПрибыль.КодМножественногоЭлемента(
		КодСпискаФНС,
		"НаимОП",
		ИмяРедакции);
	
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "НалоговаяБаза";
	Показатель.НомерСтроки          = "030";
	Показатель.Представление        = "Налоговая база в целом по организации";
	
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "НалоговаяБазаБезЗакрытыхПодразделений";
	Показатель.НомерСтроки          = "031";
	Показатель.Представление        = "Налоговая база в целом по организации без учета закрытых в течение текущего налогового периода обособленных подразделений";
	
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "ДоляНалоговойБазы";
	Показатель.НомерСтроки          = "040";
	Показатель.Представление        = "Доля налоговой базы обособленного подразделения (%)";
	
	// Налоговая база обособленного подразделения
	// Для закрытых обособленных подразделений налоговая база не соответствует текущей общей налоговой базе и доле подразделения,
	// т.к. доля подразделения и база налога переносятся из прошлых периодов
	// Для действующих подразделений расчет налоговой базы выполняется механизмами БРО на основании налоговой базы по все организации и доли подразделения
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "НалоговаяБазаПодразделения";
	Показатель.НомерСтроки          = "050";
	Показатель.Представление        = "Налоговая база подразделения, исходя из его доли";
	
	Показатель = ОписаниеФормыОтчета.Добавить();
	Показатель.Имя                  = "СтавкаНалогаРегиональныйБюджет";
	Показатель.НомерСтроки          = "060";
	Показатель.Представление        = "Ставка налога в бюджет субъекта Российской Федерации";
	
	Если ТорговыйСбор.УплачиваетсяТорговыйСбор(КонтекстРасчета.Организация, КонтекстРасчета.КонецПериода) Тогда
		// Налог может быть уменьшен на суммы торгового сбора
		Показатель = ОписаниеФормыОтчета.Добавить();
		Показатель.Имя                  = "УменьшениеНалогаНаТорговыйСбор";
		Если ЗаполнятьДетальнуюИнформациюПоТорговомуСборуВДекларации(КонтекстРасчета.КонецПериода) Тогда
			Показатель.НомерСтроки          = "097";
		Иначе
			Показатель.НомерСтроки          = "090"; // Письмо ФНС от 12 августа 2015 г. N ГД-4-3/14174@ - до публикации новой формы отчета использовать строку 090
		КонецЕсли;	
		Показатель.Представление        = "Сумма торгового сбора, на которую уменьшен налог за текущий отчетный (налоговый) период";
		
		Если ЗаполнятьДетальнуюИнформациюПоТорговомуСборуВДекларации(КонтекстРасчета.КонецПериода) Тогда // Приказ ФНС от 19 октября 2016 г. N ММВ-7-3/572@
		
			Показатель = ОписаниеФормыОтчета.Добавить();
			Показатель.Имя                  = "УменьшениеНалогаНаТорговыйСборПрошлогоПериода";
			Показатель.НомерСтроки          = "096";
			Показатель.Представление        = "Сумма торгового сбора, на которую уменьшен налог за прошлый отчетный период";
			
			Показатель = ОписаниеФормыОтчета.Добавить();
			Показатель.Имя                  = "ТорговыйСборУплаченный";
			Показатель.НомерСтроки          = "095";
			Показатель.Представление        = "Сумма фактически уплаченного торгового сбора с начала налогового периода";
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Все показатели расчета размещены на страницах одного и того же листа.
	// На этом основана работа ПередатьРасчетРаспределенияНалогаБРО()
	ОписаниеФормыОтчета.ЗаполнитьЗначения("02", "НомерЛиста");
	ОписаниеФормыОтчета.ЗаполнитьЗначения("5",  "НомерПриложения");
	
	Возврат ОписаниеФормыОтчета;
	
КонецФункции

Функция ПрефиксИмениРаспределениеНалога()
	// Символ "*" в имени показателей указывает,
	// что соответствующие показатели могут быть при расчете "размножены" (по числу КПП).
	Возврат "РаспределениеНалога*.";
КонецФункции

Функция НовыйРасчетРаспределенияНалога()
	
	Расчет = Новый ТаблицаЗначений;
	// Имена колонок соответствуют именам в ОписаниеФормыРасчетаРаспределенияНалога()
	// Ограничение разрядности определено в формате представления в электронном виде - 
	// Приказ ФНС России от 19.10.2016 №ММВ-7-3/572@ (таблица 4.82).
	//
	// Дополнительно Письмом ФНС России от 29.05.2017 №3-2-15/013@ (СППФД, sppfd169)
	// доведена xsd-схема версии 05 - NO_PRIB_1_002_00_05_07_05.xsd,
	// в которой для показателей ставки в региональный бюджет допускается бОльшая точность,
	// чем предусмотрена нормативным документом: <xs:totalDigits value="5"/><xs:fractionDigits value="3"/>.
	// Это связано с тем, что известны региональные законодатели, устанавливающие ставки с тремя знаками после запятой.
	Расчет.Колонки.Добавить("РегистрацияВНалоговомОргане",      Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Расчет.Колонки.Добавить("КПП",                              ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Расчет.Колонки.Добавить("МестоНахожденияНалоговогоОргана",  ОбщегоНазначения.ОписаниеТипаСтрока(1));
	Расчет.Колонки.Добавить("ВозложенаОбязанностьУплатыНалога", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	Расчет.Колонки.Добавить("ВариантНалогообложенияПрибыли",    Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));

	Расчет.Колонки.Добавить("НаименованиеПодразделения",        ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Расчет.Колонки.Добавить("НалоговаяБаза",                    ОбщегоНазначения.ОписаниеТипаЧисло(15,  0, ДопустимыйЗнак.Неотрицательный));
	Расчет.Колонки.Добавить("НалоговаяБазаПодразделения",       ОбщегоНазначения.ОписаниеТипаЧисло(15,  0, ДопустимыйЗнак.Неотрицательный));// С учетом доли подразделения
	Расчет.Колонки.Добавить("НалоговаяБазаБезЗакрытыхПодразделений",
	                                                            ОбщегоНазначения.ОписаниеТипаЧисло(15,  0, ДопустимыйЗнак.Неотрицательный));
	Расчет.Колонки.Добавить("ДоляНалоговойБазы",                ОбщегоНазначения.ОписаниеТипаЧисло(18, 15, ДопустимыйЗнак.Неотрицательный));
	Расчет.Колонки.Добавить("СтавкаНалогаРегиональныйБюджет",   Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.Ресурсы.СтавкаСубъектРФ.Тип); // Точность выше, чем в нормативном документе
	Расчет.Колонки.Добавить("УменьшениеНалогаНаТорговыйСбор",   ОбщегоНазначения.ОписаниеТипаЧисло(15,  0, ДопустимыйЗнак.Неотрицательный));
	Расчет.Колонки.Добавить("УменьшениеНалогаНаТорговыйСборПрошлогоПериода", 
	                                                            ОбщегоНазначения.ОписаниеТипаЧисло(15,  0, ДопустимыйЗнак.Неотрицательный));
	Расчет.Колонки.Добавить("ТорговыйСборУплаченный", 			ОбщегоНазначения.ОписаниеТипаЧисло(15,  0, ДопустимыйЗнак.Неотрицательный));
	
	Расчет.Индексы.Добавить("РегистрацияВНалоговомОргане");
	Расчет.Индексы.Добавить("ВариантНалогообложенияПрибыли");
	
	Возврат Расчет;
	
КонецФункции

Процедура ПередатьРасчетРаспределенияНалогаБРО(Контейнер, Расчет, ИмяРедакции, КонтекстРасчета, ИндексСтраницы, ПризнакНалогоплательщика)
	
	ОписаниеФормы = ОписаниеФормыРасчетаРаспределенияНалога(КонтекстРасчета, ИмяРедакции);
	Если Не ЗначениеЗаполнено(ОписаниеФормы) Тогда
		Возврат;
	КонецЕсли;
		
	// Все показатели расчета размещены на страницах одного и того же листа.
	ЗаполняемыйРаздел = ОписаниеФормы[0];
	
	СоставДекларации = СоставДекларации(КонтекстРасчета);
	СоставДекларацииРаспределениеНалога = НовыйСоставДекларации();
	ОтборРазделов = Новый Структура("НомерЛиста, НомерПриложения");
	ЗаполнитьЗначенияСвойств(ОтборРазделов, ЗаполняемыйРаздел);
	РазделыРаспределения = СоставДекларации.НайтиСтроки(ОтборРазделов);
	Если Не ЗначениеЗаполнено(РазделыРаспределения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СоставДекларацииРаспределениеНалога.Добавить(), РазделыРаспределения[0]);
	
	РазделыКонтейнера = РазделыКонтейнера(Контейнер, СоставДекларацииРаспределениеНалога, ИмяРедакции, ИндексСтраницы);
	
	Если Не ЗначениеЗаполнено(РазделыКонтейнера) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РазделБРО Из РазделыКонтейнера Цикл
		// Используем первый раздел
		РазделБРО = РазделБРО.Значение;
		Прервать;
	КонецЦикла;
	
	СформироватьСтраницыБРО(РазделБРО, ОписаниеФормы, ИмяРедакции, Расчет.Количество());
	
	// Заполним страницы
	Для Каждого ЗаписьРасчета Из Расчет Цикл
		
		СтраницаБРО = РазделБРО[Расчет.Индекс(ЗаписьРасчета)];
		
		РегламентированныйОтчетПрибыль.ВключитьСтраницу(
			СтраницаБРО,
			ЗаполняемыйРаздел.НомерЛиста,
			ЗаполняемыйРаздел.НомерПриложения,
			ИмяРедакции,
			ПризнакНалогоплательщика);
		
		Для Каждого Показатель Из ОписаниеФормы Цикл
			
			НомерЯчейкиБРО = НомерПоказателяБРО(Показатель, ИмяРедакции);
			Значение       = ЗаписьРасчета[Показатель.Имя];
			РегламентированныйОтчетПрибыль.ПоместитьЗначениеПоказателяНаСтраницу(СтраницаБРО, НомерЯчейкиБРО, Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСтраницыБРО(РазделБРО, ОписаниеФормы, ИмяРедакции, КоличествоСтраницНужно)
	
	// Обеспечим нужное количество страниц:
	КоличествоСтраницСейчас = РазделБРО.Количество();
	
	Если КоличествоСтраницНужно = 0 Тогда
		// - удалим все данные: очистим первую страницу и удалим все остальные
		
		СтраницаБРО = РазделБРО[0];
		
		Для Каждого Показатель Из ОписаниеФормы Цикл
			НомерЯчейкиБРО = НомерПоказателяБРО(Показатель, ИмяРедакции);
			РегламентированныйОтчетПрибыль.ПоместитьЗначениеПоказателяНаСтраницу(СтраницаБРО, НомерЯчейкиБРО, Неопределено);
		КонецЦикла;
		
		Для НомерСтраницы = 2 По КоличествоСтраницСейчас Цикл
			РазделБРО.Удалить(1);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	// - удалим лишние
	Для НомерСтраницы = 1 По КоличествоСтраницСейчас - КоличествоСтраницНужно Цикл
		// a. КоличествоСтраницНужно - это меньше, чем сейчас
		// b. этот индекс на 1 больше, чем наибольший индекс нужной страницы
		РазделБРО.Удалить(КоличествоСтраницНужно);
	КонецЦикла;
	// - добавим недостающие
	Для НомерСтраницы = 1 По КоличествоСтраницНужно - КоличествоСтраницСейчас Цикл
		РегламентированныйОтчетПрибыль.ДобавитьСтраницу(РазделБРО, ИмяРедакции);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Расчет

Функция Рассчитать(СхемаРасчета, Отбор)
	
	// Сначала составим план расчета:
	// - получим список показателей, для которых нужно получить данные информационной базы
	// - составим перечень операций для расчета каждого производного показателя ("формул").
	// 
	// Составление списка показателей отделено от собственно расчета,
	// так как это позволит использовать более эффективные запросы к базе данных.
	// 
	// Для составления плана расчета рекурсивно обойдем все показатели, попавшие в отбор.
	// Рекурсия нужна, потому что 
	// - показатели могут быть формульными - для их расчета могут потребоваться другие показатели
	// - для расчета показателей, попавших в отбор, могут понадобиться значения показателей, не попавших в отбор.
	//
	// Списки рассчитываются всегда и в план расчета не включаются
	
	ПланРасчета = Новый Структура;
	ПланРасчета.Вставить("ДанныеИнформационнойБазы", Новый ТаблицаЗначений);
	ПланРасчета.Вставить("Формулы",                  Новый ТаблицаЗначений);
	
	ПланРасчета.ДанныеИнформационнойБазы.Колонки.Добавить("Имя",         ТипИмя());
	ПланРасчета.ДанныеИнформационнойБазы.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	ПланРасчета.ДанныеИнформационнойБазы.Колонки.Добавить("Показатель"); // Ссылка на показатель из схемы расчета
	ПланРасчета.ДанныеИнформационнойБазы.Индексы.Добавить("Имя, ЭтапРасчета");
	
	ПланРасчета.Формулы.Колонки.Добавить("Имя",                       ТипИмя());
	ПланРасчета.Формулы.Колонки.Добавить("ЭтапРасчета",               ТипИмя());
	ПланРасчета.Формулы.Колонки.Добавить("Показатель");               // Ссылка на показатель из схемы расчета
	ПланРасчета.Формулы.Колонки.Добавить("ЭлементФормулыИмя",         ТипИмя());
	ПланРасчета.Формулы.Колонки.Добавить("ЭлементФормулыЭтапРасчета", ТипИмя());
	ПланРасчета.Формулы.Колонки.Добавить("Оператор",                  ТипОператорФормулы()); // "+", "-" или "="
	ПланРасчета.Формулы.Индексы.Добавить("Имя, ЭтапРасчета");
	
	Для Каждого Показатель Из СхемаРасчета.Показатели Цикл
		
		ЭтапыРасчетаПоказателя = Отбор.НайтиСтроки(Новый Структура("Имя", Показатель.Имя));
		
		Для Каждого ЭтапРасчета Из ЭтапыРасчетаПоказателя Цикл
			
			ДополнитьПланРасчетаРекурсивно(
				ПланРасчета,
				Показатель,
				ЭтапРасчета.ЭтапРасчета,
				СхемаРасчета,
				СхемаРасчета.ЭтапыРасчета);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = НовыйРезультатРасчета(СхемаРасчета.ОписаниеСумм);
	
	// Получим данные информационной базы.
	
	ВременныеТаблицы = НовыйРасширенныйМенеджерВременныхТаблиц();
	
	// Как правило, оптимально получать данные информационной базы так, чтобы один алгоритм получения данных 
	// выполнялся один раз (или небольшое число раз), получая за один "проход" данные всех (или большого числа) показателей.
	// Поэтому сгруппируем показатели, требующие получения данных информационной базы, по алгоритмам получения данных.
	// Затем каждый алгоритм будет выполнен отдельным "процессором".
	
	ПроцессорыПолученияДанных = Новый Соответствие; // Ключ - имя алгоритма, Значение - процессор получения данных
	Для Каждого Показатель Из ПланРасчета.ДанныеИнформационнойБазы Цикл
		
		ИмяАлгоритма  = Показатель.Показатель.АлгоритмПолученияДанных;
		ЭтоСписок = (ИмяАлгоритма = "ДанныеСписка");
		Если ЭтоСписок Тогда
			ИмяАлгоритма  = Показатель.Показатель.ОтборДанных.Список;
		КонецЕсли;
		
		ПроцессорПолученияДанных = ПроцессорыПолученияДанных[ИмяАлгоритма];
		Если ПроцессорПолученияДанных = Неопределено Тогда
			ПроцессорПолученияДанных = НовыйПроцессорПолученияДанных(
				ИмяАлгоритма,
				ЭтоСписок,
				ВременныеТаблицы,
				СхемаРасчета,
				Результат);
			ПроцессорыПолученияДанных.Вставить(ИмяАлгоритма, ПроцессорПолученияДанных);
		КонецЕсли;
		
		Для Каждого ВариантНО Из СхемаРасчета.ВариантыНО Цикл
			ЗадачаПолученияДанных = ПроцессорПолученияДанных.Задачи.Добавить();
			ЗадачаПолученияДанных.Показатель  = Показатель.Имя;
			ЗадачаПолученияДанных.ЭтапРасчета = Показатель.ЭтапРасчета;
			ЗадачаПолученияДанных.ОтборДанных = Показатель.Показатель.ОтборДанных;
			ЗадачаПолученияДанных.ВариантНО   = ВариантНО;
		КонецЦикла;
		
	КонецЦикла;
	
	// Выполним алгоритмы, запишем результат
	
	Для Каждого Алгоритм Из ПроцессорыПолученияДанных Цикл
		
		ПроцессорПолученияДанных = Алгоритм.Значение;
		
		ЭтапыРасчета = ПроцессорПолученияДанных.Задачи.ВыгрузитьКолонку("ЭтапРасчета");
		ПроцессорПолученияДанных.ЭтапыРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЭтапыРасчета);
		
		ПолучитьДанныеИнформационнойБазы(ПроцессорПолученияДанных);
		
		УстановитьРезультатРасчетаСписок(ПроцессорПолученияДанных);
		
		Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
			УстановитьРассчитанноеЗначение(Результат, Задача.Показатель, Задача.ЭтапРасчета, Задача.ВариантНО, Задача);
		КонецЦикла;
		
	КонецЦикла;
	
	ПроцессорыПолученияДанных = Неопределено;
	
	// Вычислим значения производных показателей (применим формулы)
	
	Для Каждого ШагРасчета Из ПланРасчета.Формулы Цикл
		
		Если Не ЗначениеЗаполнено(ШагРасчета.Оператор) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ВариантНО Из СхемаРасчета.ВариантыНО Цикл
			// В качестве элементов формул можно использовать только суммы.
			// При выполнении этого условия в Значение и ЗначениеЭлементаФормулы будет коллекция сумм.
			
			Значение = РассчитанноеЗначение(Результат.РассчитанныеЗначения, ШагРасчета.Имя, ВариантНО, ШагРасчета.ЭтапРасчета);
			Если Значение <> Неопределено Тогда
				ЗначениеТочное = Значение.Точное;
			Иначе
				Значение       = КоллекцииСумм.НовыйКоллекцияСумм(СхемаРасчета.ОписаниеСумм);
				ЗначениеТочное = Истина;
			КонецЕсли;
			
			Округлено = Ложь;
			
			// Показатели декларации исчисляются в целых рублях.
			// Поэтому округлим те показатели, что включаются в декларацию.
			Если ШагРасчета.Оператор = "="
				И ПустаяСтрока(ШагРасчета.ЭтапРасчета)
				И Не ПустаяСтрока(ШагРасчета.Показатель.НомерСтроки) Тогда
				
				Если ОкруглитьСуммы(Значение, СхемаРасчета.ОписаниеСумм) Тогда
					Округлено = Истина;
					УстановитьРассчитанноеЗначение(Результат, ШагРасчета.Имя, ШагРасчета.ЭтапРасчета, ВариантНО, Значение, Округлено);
				КонецЕсли;
				
				ЗаписьПротокола = ДобавитьЗаписьПротокола(
					Результат,
					ШагРасчета.Имя,
					ШагРасчета.ЭтапРасчета,
					"Округление",
					ВариантНО);
				
			КонецЕсли;
			
			Если ПроверитьОграничение(Результат, Значение, ШагРасчета, ВариантНО, СхемаРасчета) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЭлементаФормулы = РассчитанноеЗначение(
				Результат.РассчитанныеЗначения,
				ШагРасчета.ЭлементФормулыИмя,
				ВариантНО,
				ШагРасчета.ЭлементФормулыЭтапРасчета);
				
			Если ЗначениеЭлементаФормулы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ШагРасчета.Оператор = "-" Тогда
				Если ЗначениеТочное И Не ЗначениеЭлементаФормулы.Точное Тогда
					// Для того, чтобы избежать накопления ошибок округления,
					// перед вычитанием приведем значения к одинаковой точности:
					// если вычитаем округленное число, то и уменьшаемое округлим.
					Округлено = Округлено Или ОкруглитьСуммы(Значение, СхемаРасчета.ОписаниеСумм);
				КонецЕсли;
				КоллекцииСумм.Вычесть(Значение, ЗначениеЭлементаФормулы, СхемаРасчета.ОписаниеСумм);
			ИначеЕсли ШагРасчета.Оператор = "+" Тогда
				КоллекцииСумм.Сложить(Значение, ЗначениеЭлементаФормулы, СхемаРасчета.ОписаниеСумм);
			Иначе
				Продолжить;
			КонецЕсли;
			
			УстановитьРассчитанноеЗначение(Результат, ШагРасчета.Имя, ШагРасчета.ЭтапРасчета, ВариантНО, Значение, Округлено);
			
			ЗаписьПротокола = ДобавитьЗаписьПротокола(
				Результат,
				ШагРасчета.Имя,
				ШагРасчета.ЭтапРасчета,
				"Формула",
				ВариантНО,
				ЗначениеЭлементаФормулы);
				
	
			ЗаписьПротокола.Оператор            = ШагРасчета.Оператор;
			ЗаписьПротокола.Условие.Имя         = ШагРасчета.ЭлементФормулыИмя;
			ЗаписьПротокола.Условие.ЭтапРасчета = ШагРасчета.ЭлементФормулыЭтапРасчета;
			ЗаписьПротокола.Условие.ВариантНО   = ВариантНО;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор служебной коллекции, используемой для получения данных конкретным алгоритмом.
// Она нужна, чтобы сократить описание процедур, непосредственно получающих данные: передавать один параметр, а не набор
// параметров.
//
// Процессор содержит
// - описание данных, которые нужно получить ("задачи")
// - особенности получения данных (контекст - организация, период; этапы расчета; состав рассчитываемых сумм)
// - полученные данные
// - объекты, используемые в ходе всего расчета (менеджер временных таблиц, ссылку на протокол).
//
// Параметры:
//  ИмяАлгоритма	 - Строка - имя алгоритма, с помощью которого будут получены данные
//  ВременныеТаблицы - см. НовыйРасширенныйМенеджерВременныхТаблиц() - менеджер временных таблиц, используемых в ходе
//                                                                     получения данных
//  СхемаРасчета	 - см. НовыйСхемаРасчета() - общая схема расчета
//  РезультатРасчета - см. НовыйРезультатРасчета() - коллекция, хранящая протокол расчета (протокол будет дополняться в
//                                                   ходе расчета).
Функция НовыйПроцессорПолученияДанных(ИмяАлгоритма, ЭтоСписок, ВременныеТаблицы, СхемаРасчета, РезультатРасчета)
	
	Процессор = Новый Структура;
	Процессор.Вставить("ИмяАлгоритма",     ИмяАлгоритма);
	Процессор.Вставить("ЭтоСписок",        ЭтоСписок);
	Процессор.Вставить("КонтекстРасчета",  СхемаРасчета.КонтекстРасчета);
	Процессор.Вставить("ВременныеТаблицы", ВременныеТаблицы);
	Процессор.Вставить("ОписаниеСумм",     СхемаРасчета.ОписаниеСумм);
	Процессор.Вставить("Задачи",           Новый ТаблицаЗначений);
	Процессор.Вставить("ЭтапыРасчета",     Новый Массив);     // Те, что упоминаются в Задачи
	Процессор.Вставить("РезультатРасчета", РезультатРасчета); // В ходе получения данных в результате заполняется только протокол
	
	Процессор.Задачи.Колонки.Добавить("Показатель",  ТипИмя());
	Процессор.Задачи.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	Процессор.Задачи.Колонки.Добавить("ВариантНО",   Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	Процессор.Задачи.Колонки.Добавить("ПротоколЗаполнен", Новый ОписаниеТипов("Булево"));
	Процессор.Задачи.Колонки.Добавить("ОтборДанных"); // см. НовыйОтборДанных()
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Процессор.Задачи, Процессор.ОписаниеСумм);
	
	Если ЭтоСписок Тогда
		
		Процессор.Вставить("ДанныеСписка",   Новый ТаблицаЗначений);
		Процессор.Вставить("ПротоколСписка", Новый Соответствие); // Ключ - см. ИмяЗаписиПротоколаСтрокаСписка; Значения - массив ссылок на протокол
		Процессор.Вставить("КолонкиСумм",    Новый Массив);
		
		ОписаниеСписка = СхемаРасчета.Списки.Найти(ИмяАлгоритма, "Имя");
		
		Для Каждого ОписаниеКолонки Из ОписаниеСписка.Колонки Цикл
			
			Если ОписаниеКолонки.Значение.Свойство("Тип") Тогда
				Процессор.ДанныеСписка.Колонки.Добавить(ОписаниеКолонки.Ключ, ОписаниеКолонки.Значение.Тип);
			Иначе
				Процессор.ДанныеСписка.Колонки.Добавить(ОписаниеКолонки.Ключ);
				Процессор.КолонкиСумм.Добавить(ОписаниеКолонки.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Процессор;
	
КонецФункции

Функция ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, Значение = Неопределено, ИмяКолонки = "")
	
	// Для списков в Значение следует передавать строку (запись) списка
	// Допускается записывать в протокол только суммовые показатели
	// Протокол списка здесь помещается во временную коллекцию процессора,
	// тиражирование в основную коллекцию - в УстановитьРезультатРасчетаСписок
	
	Если Не ПроцессорПолученияДанных.ЭтоСписок Или Значение = Неопределено Тогда
		ИмяПоказателя = Задача.Показатель;
		ЭтапРасчета   = Задача.ЭтапРасчета;
		Задача.ПротоколЗаполнен = Истина;
		Если Значение = Неопределено Тогда
			ЗначениеПоказателя = Задача;
		Иначе
			ЗначениеПоказателя = Значение;
		КонецЕсли;
		ЗаписиПоказателя = Неопределено;
	Иначе
		ИмяПоказателя      = ИмяПоказателяКолонкаСписка(ПроцессорПолученияДанных.ИмяАлгоритма, ИмяКолонки);
		ИмяЗаписи          = ИмяЗаписиПротоколаСтрокаСписка(ПроцессорПолученияДанных.ИмяАлгоритма, ИмяКолонки, Значение);
		ЗначениеПоказателя = Значение[ИмяКолонки];
		ЭтапРасчета        = "";// Для списков используется один этап, а неявные формулы не выполняются - см. ЭтапРасчетаПоказателейСписка
		ЗаписиПоказателя = ПроцессорПолученияДанных.ПротоколСписка[ИмяКолонки];
		Если ЗаписиПоказателя = Неопределено Тогда
			ЗаписиПоказателя = Новый Массив;
			ПроцессорПолученияДанных.ПротоколСписка.Вставить(ИмяЗаписи, ЗаписиПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьПротокола = ДобавитьЗаписьПротокола(
		ПроцессорПолученияДанных.РезультатРасчета,
		ИмяПоказателя,
		ЭтапРасчета,
		ПроцессорПолученияДанных.ИмяАлгоритма,
		Задача.ВариантНО,
		ЗначениеПоказателя);
		
	Если ПроцессорПолученияДанных.ЭтоСписок И Значение <> Неопределено Тогда
		ЗаписьПротокола.Индекс = Значение.Владелец().Индекс(Значение);
	КонецЕсли;
		
	ОтключитьОтображениеЭтапаРасчетаНеУчитываемые(ЗаписьПротокола, ЭтапРасчета, ПроцессорПолученияДанных.ОписаниеСумм);
	
	Если ЗаписиПоказателя <> Неопределено Тогда
		ЗаписиПоказателя.Добавить(ЗаписьПротокола);
	КонецЕсли;
	
	Возврат ЗаписьПротокола;
	
КонецФункции

Процедура ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача)
	
	ДобавитьЗаписьПротокола(
		ПроцессорПолученияДанных.РезультатРасчета,
		Задача.Показатель,
		Задача.ЭтапРасчета,
		"Пропустить",
		Задача.ВариантНО);
		
	Задача.ПротоколЗаполнен = Истина;
	
КонецПроцедуры

Функция ПроверитьОграничение(Результат, Значение, ШагРасчета, ВариантНО, СхемаРасчета)
		
	Если ШагРасчета.Оператор <> "=" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Это последний шаг расчета показателя. На этом шаге проверим ограничение
	Ограничение = СхемаРасчета.Ограничения.Найти(ШагРасчета.Имя, "Показатель"); // См. НовыйОграничения()
	Если Ограничение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Границы = Новый Структура;
	Границы.Вставить("Сумма",   Ограничение.Граница);
	Границы.Вставить("СуммаНУ", Ограничение.Граница);
	
	ОграничениеКоллекцияСумм = КоллекцииСумм.НовыйКоллекцияСумм(СхемаРасчета.ОписаниеСумм, Истина);
	КоллекцииСумм.Заполнить(ОграничениеКоллекцияСумм, Границы, СхемаРасчета.ОписаниеСумм);
	
	ЗначениеДоОграничения = КоллекцииСумм.НовыйКоллекцияСумм(СхемаРасчета.ОписаниеСумм, Истина);
	КоллекцииСумм.Заполнить(ЗначениеДоОграничения, Значение, СхемаРасчета.ОписаниеСумм);
	
	Если Ограничение.Тип = "Сверху" Тогда
		ОграничитьСверху(Значение, ОграничениеКоллекцияСумм, СхемаРасчета.ОписаниеСумм);
	Иначе
		ОграничитьСнизу(Значение, ОграничениеКоллекцияСумм, СхемаРасчета.ОписаниеСумм);
	КонецЕсли;
	
	УстановитьРассчитанноеЗначение(Результат, ШагРасчета.Имя, ШагРасчета.ЭтапРасчета, ВариантНО, Значение);
	
	РезультатПримененияОграничения = КоллекцииСумм.НовыйКоллекцияСумм(СхемаРасчета.ОписаниеСумм, Истина);
	КоллекцииСумм.Заполнить(РезультатПримененияОграничения, Значение, СхемаРасчета.ОписаниеСумм);
	КоллекцииСумм.Вычесть(РезультатПримененияОграничения, ЗначениеДоОграничения, СхемаРасчета.ОписаниеСумм);
	
	ЗаписьПротокола = ДобавитьЗаписьПротокола(
		Результат,
		ШагРасчета.Имя,
		ШагРасчета.ЭтапРасчета,
		"Ограничение",
		,
		РезультатПримененияОграничения);
	ЗаписьПротокола.Описание = Ограничение.Представление;
	ЗаписьПротокола.Оператор = "=";
	ЗаписьПротокола.Условие  = Ограничение.Тип;
	
	Возврат Истина;
	
КонецФункции

Функция НовыйОтборРасчета()
	
	Отбор = Новый ТаблицаЗначений;
	Отбор.Колонки.Добавить("Имя",         ТипИмя());
	Отбор.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	
	Отбор.Индексы.Добавить("Имя");
	
	Возврат Отбор;
	
КонецФункции

Процедура ДополнитьПланРасчетаРекурсивно(ПланРасчета, Показатель, ЭтапРасчета, СхемаРасчета, ЭтапыРасчета)
	
	// План включает элементы разных типов:
	// - "неявные" формулы, определенные логикой этапов расчета (из общей суммы вычитаем непринимаемые и спец. режимы)
	// - формулы, описанные явно в схеме расчета
	// - получение данных из списков, описанное в схеме расчета
	// - получение данных информационной базы
	
	// Для того, чтобы исключить показатели, уже включенные в план
	Отбор = Новый Структура;
	Отбор.Вставить("Имя",         Показатель.Имя);
	Отбор.Вставить("ЭтапРасчета", ЭтапРасчета);
	
	Если Не ПустаяСтрока(Показатель.АлгоритмПолученияДанных) И Не ПустаяСтрока(ЭтапРасчета) Тогда
		
		// Следует получить данные информационной базы
		Если ПланРасчета.ДанныеИнформационнойБазы.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока = ПланРасчета.ДанныеИнформационнойБазы.Добавить();
			НоваяСтрока.Имя         = Показатель.Имя;
			НоваяСтрока.ЭтапРасчета = ЭтапРасчета;
			НоваяСтрока.Показатель  = Показатель;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
		
	Если ПланРасчета.Формулы.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	Формула = Формула(СхемаРасчета, Показатель.Имя);
	
	Если Формула <> Неопределено Тогда
		
		// Применим явную формулу
		Для Каждого ЭлементФормулы Из Формула Цикл
			
			НоваяСтрока = ПланРасчета.Формулы.Добавить();
			НоваяСтрока.Имя                       = Показатель.Имя;
			НоваяСтрока.ЭтапРасчета               = ЭтапРасчета;
			НоваяСтрока.Показатель                = Показатель;
			НоваяСтрока.ЭлементФормулыИмя         = ЭлементФормулы.ЭлементФормулы;
			НоваяСтрока.ЭлементФормулыЭтапРасчета = ЭтапРасчета;
			НоваяСтрока.Оператор                  = ЭлементФормулы.Оператор;
			
			ДополнитьПланРасчетаРекурсивно(
				ПланРасчета,
				ПоказательСхемыРасчета(СхемаРасчета, ЭлементФормулы.ЭлементФормулы),
				ЭтапРасчета,
				СхемаРасчета,
				ЭтапыРасчета);
				
			// Для того, чтобы план можно было выполнить последовательно, все строки, добавленные при вызове ДополнитьПланРасчетаРекурсивно()
			// должны быть раньше, чем строка для рассчитываемого показателя.
			// В то же время, добавлять новые строки нужно до рекурсивного вызова, чтобы избежать повторного включения показателя в план 
			// (в т.ч. зацикливания).
			СдвинутьВКонец(НоваяСтрока);
			
		КонецЦикла;
			
	ИначеЕсли ПустаяСтрока(ЭтапРасчета) Тогда
	
		// Применим неявную формулу - пройдем все этапы расчета
		Для Каждого ВложенныйЭтапРасчета Из ЭтапыРасчета Цикл
			
			НоваяСтрока = ПланРасчета.Формулы.Добавить();
			НоваяСтрока.Имя                       = Показатель.Имя;
			НоваяСтрока.ЭтапРасчета               = ЭтапРасчета;
			НоваяСтрока.Показатель                = Показатель;
			НоваяСтрока.ЭлементФормулыИмя         = Показатель.Имя;
			НоваяСтрока.ЭлементФормулыЭтапРасчета = ВложенныйЭтапРасчета;
			НоваяСтрока.Оператор                  = ОператорЭтапаРасчета(ВложенныйЭтапРасчета);
			
			ДополнитьПланРасчетаРекурсивно(ПланРасчета, Показатель, ВложенныйЭтапРасчета, СхемаРасчета, ЭтапыРасчета);
			
			СдвинутьВКонец(НоваяСтрока);
			
		КонецЦикла;
	Иначе
		
		// Порядок расчета показателя не определен
		НоваяСтрока = ПланРасчета.Формулы.Добавить();
		НоваяСтрока.Имя         = Показатель.Имя;
		НоваяСтрока.ЭтапРасчета = ЭтапРасчета;
		НоваяСтрока.Показатель  = Показатель;
		
	КонецЕсли;
	
	// Отметим, где нужно применить ограничение или округлить
	Если ПустаяСтрока(ЭтапРасчета) Тогда
		НоваяСтрока = ПланРасчета.Формулы.Добавить();
		НоваяСтрока.Имя         = Показатель.Имя;
		НоваяСтрока.ЭтапРасчета = ЭтапРасчета;
		НоваяСтрока.Показатель  = Показатель;
		НоваяСтрока.Оператор    = "=";
	КонецЕсли;
	
КонецПроцедуры

Процедура СдвинутьВКонец(СтрокаТаблицыЗначений)
	
	ТаблицаЗначений = СтрокаТаблицыЗначений.Владелец();
	КоличествоПозиций = ТаблицаЗначений.Количество() - ТаблицаЗначений.Индекс(СтрокаТаблицыЗначений) - 1;
	Если КоличествоПозиций = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаЗначений.Сдвинуть(СтрокаТаблицыЗначений, КоличествоПозиций);
	
КонецПроцедуры

Функция ТипОператорФормулы()
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(1); // Допускаются "+", "-" и "=" ("=" означает конец расчета; в этот момент может потребоваться проверить ограничение или округлить)
КонецФункции

Функция Формула(СхемаРасчета, ИмяПоказателя)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Результат", ИмяПоказателя);
	ЭлементыФормулы = СхемаРасчета.Формулы.НайтиСтроки(Отбор);
	Если ЭлементыФормулы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		
		// Упорядочим записи для понятного представления в протоколе
		Формула = СхемаРасчета.Формулы.СкопироватьКолонки();
		Формула.Колонки.Добавить("Упорядочивание", Новый ОписаниеТипов("Число"));
		Для Каждого ЭлементФормулы Из ЭлементыФормулы Цикл
			НоваяСтрока = Формула.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементФормулы);
			НоваяСтрока.Упорядочивание = СхемаРасчета.Формулы.Индекс(ЭлементФормулы);
		КонецЦикла;
		
		Возврат Формула;
		
	КонецЕсли;
	
КонецФункции

Функция ОкруглитьСуммы(Значение, ОписаниеСумм)
	
	Округлено = Ложь;
	Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ОписаниеСумм) Цикл
		
		ДоОкругления = Значение[ИмяСвойства];
		Округленное  = Окр(Значение[ИмяСвойства], 0);
		
		Если ДоОкругления <> Округленное Тогда
			Значение[ИмяСвойства] = Округленное;
			Округлено = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Округлено;
	
КонецФункции

#КонецОбласти

#Область РезультатРасчета

Функция НовыйРезультатРасчета(ОписаниеСумм)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОписаниеСумм",         ОписаниеСумм);
	Результат.Вставить("РассчитанныеЗначения", Новый ТаблицаЗначений);
	Результат.Вставить("Списки",               Новый Соответствие);
	Результат.Вставить("Протокол",             НовыйПротоколРасчета(ОписаниеСумм));
	
	Результат.РассчитанныеЗначения.Колонки.Добавить("Имя",         ТипИмя());
	Результат.РассчитанныеЗначения.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	Результат.РассчитанныеЗначения.Колонки.Добавить("ВариантНО",   Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Результат.РассчитанныеЗначения, ОписаниеСумм);
	Результат.РассчитанныеЗначения.Колонки.Добавить("Точное",      Новый ОписаниеТипов("Булево")); 
	// Значение может быть округлено до целых рублей в соответствии с порядком заполнения декларации,
	// если оно включается в декларацию отдельной строкой.
	// После округления значение будет неточным.
	// Это нужно учитывать при дальнейших арифметических операциях:
	// все значения, при расчете которых использовалось неточное значение, также будут неточными,
	// даже если формально имеют больше знаков после запятой.
	
	Результат.РассчитанныеЗначения.Индексы.Добавить("Имя,ЭтапРасчета,ВариантНО"); // См. РассчитанноеЗначение()
	Результат.РассчитанныеЗначения.Индексы.Добавить("ВариантНО");
	
	Возврат Результат;
	
КонецФункции

Функция РассчитанноеЗначение(РассчитанныеЗначения, ИмяПоказателя, ВариантНО = Неопределено, ЭтапРасчета = "")
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя",           ИмяПоказателя);
	Отбор.Вставить("ЭтапРасчета",   ЭтапРасчета);
	Если ВариантНО <> Неопределено Тогда
		Отбор.Вставить("ВариантНО", ВариантНО);
	КонецЕсли;
	
	НайденныеСтроки = РассчитанныеЗначения.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьРассчитанноеЗначение(РезультатРасчета, ИмяПоказателя, ЭтапРасчета, ВариантНО, Значение, Округлено = Ложь)
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = РассчитанноеЗначение(РезультатРасчета.РассчитанныеЗначения, ИмяПоказателя, ВариантНО, ЭтапРасчета);
	Если Строка = Неопределено Тогда
		Строка = РезультатРасчета.РассчитанныеЗначения.Добавить();
		Строка.Имя         = ИмяПоказателя;
		Строка.ЭтапРасчета = ЭтапРасчета;
		Строка.ВариантНО   = ВариантНО;
		Строка.Точное      = Истина;
	КонецЕсли;
	
	КоллекцииСумм.Заполнить(Строка, Значение, РезультатРасчета.ОписаниеСумм);
	Если Округлено Тогда
		Строка.Точное = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколРасчета

Функция НовыйПротоколРасчета(ОписаниеСумм)
	
	Протокол = Новый ТаблицаЗначений;
	
	Протокол.Колонки.Добавить("Показатель",  ТипИмя());
	Протокол.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	Протокол.Колонки.Добавить("ТипЗаписи",   ТипИмя());
	Протокол.Колонки.Добавить("Описание",    ОбщегоНазначения.ОписаниеТипаСтрока(0)); // Для вывода пользователю
	Протокол.Колонки.Добавить("Оператор",    ТипОператорФормулы());
	Протокол.Колонки.Добавить("ВариантНО",   Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол, ОписаниеСумм);
	Протокол.Колонки.Добавить("Условие",     Новый ОписаниеТипов("Структура")); // Состав определяется типом записи
	Протокол.Колонки.Добавить("Индекс",      Новый ОписаниеТипов("Число"));     // Индекс строки списка (для записей типа "Список")
	Протокол.Колонки.Добавить("ПоказыватьПользователюТолькоЕслиСуммаЗаполнена",
	                                         Новый ОписаниеТипов("Булево"));
	
	Возврат Протокол;
	
КонецФункции

Функция ДобавитьЗаписьПротокола(РезультатРасчета, Показатель, ЭтапРасчета, ТипЗаписи, ВариантНО = Неопределено, Значение = Неопределено)
	
	Запись = РезультатРасчета.Протокол.Добавить();
	Запись.Показатель  = Показатель;
	Запись.ЭтапРасчета = ЭтапРасчета;
	Запись.ТипЗаписи   = ТипЗаписи;
	Запись.Условие     = НовыйУсловиеЗаписиПротокола(ТипЗаписи);
	Запись.Оператор    = "+";
	Если ВариантНО <> Неопределено Тогда
		Запись.ВариантНО   = ВариантНО;
	КонецЕсли;
	Если Значение <> Неопределено Тогда
		КоллекцииСумм.Заполнить(Запись, Значение, РезультатРасчета.ОписаниеСумм);
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

Функция НовыйУсловиеЗаписиПротокола(ТипЗаписи)
	
	Условие = Неопределено;
	
	Если ТипЗаписи = "Формула" Тогда
		
		Условие = Новый Структура();
		Условие.Вставить("Имя");
		Условие.Вставить("ЭтапРасчета");
		Условие.Вставить("ВариантНО");
		
	ИначеЕсли ТипЗаписи = "ДанныеСписка" Тогда
		
		Условие = Новый Структура();
		Условие.Вставить("Список",                "");
		Условие.Вставить("Показатель",            "");
		Условие.Вставить("ИндексСтроки",          -1); // Отрицательное значение = данные всех строк
		// Форма может предусматривать ограниченное количество строк.
		// Данные строк, не поместившихся на форме, могут быть включены в одну из строк.
		// Для такой строки следует указать количество строк, предусмотренных на форме.
		Условие.Вставить("НепоместившиесяСтроки", -1);
		
	ИначеЕсли ТипЗаписи = "Ограничение" Тогда
		
		Условие = ""; // "Сверху" или "Снизу"
		
	ИначеЕсли ТипЗаписи = "Округление" Тогда
		
		Условие = Неопределено; // Не используется
		
	Иначе // Прикладные алгоритмы
		
		Условие = НовыйУсловиеПолученияДанныхИнформационнойБазы(ТипЗаписи);
		
	КонецЕсли;
	
	Возврат Условие;
	
КонецФункции

#КонецОбласти

#Область КоллекцияСхемаРасчета

Функция НовыйСхемаРасчета(КонтекстРасчета, ОписаниеСумм)
	
	СхемаРасчета = Новый Структура;
	СхемаРасчета.Вставить("Показатели",   НовыйПоказатели());
	СхемаРасчета.Вставить("Формулы",      НовыйФормулы());
	СхемаРасчета.Вставить("Ограничения",  НовыйОграничения());
	СхемаРасчета.Вставить("Списки",       НовыйСписки());
	СхемаРасчета.Вставить("ЭтапыРасчета", Новый Массив); // Этапы, которые допустимы в данном контексте расчета. Заполняется ниже
	СхемаРасчета.Вставить("ВариантыНО",   Новый Массив); // Варианты н/о, которые допустимы в данном контексте расчета. Заполняется ниже
	
	КодМестаУчета = Неопределено;
	Если КонтекстРасчета.ПоМесту <> "220" Тогда // Для декларации по ОП будем брать все варианты н/о
		КодМестаУчета = КонтекстРасчета.ПоМесту;
	КонецЕсли;
	
	ВариантыНалогообложенияПрибыли = НастройкиНалоговУчетныхПолитикЛокализация.ВариантыНалогообложенияПрибыли(
		КонтекстРасчета.Организация,
		КонтекстРасчета.КонецПериода,
		КодМестаУчета);
	
	Если ВариантыНалогообложенияПрибыли = Неопределено Тогда
		СхемаРасчета.ВариантыНО.Добавить(КонтекстРасчета.ОсновнойВариантНО);
	Иначе
		СхемаРасчета.ВариантыНО = ВариантыНалогообложенияПрибыли;
	КонецЕсли;
	
	СхемаРасчета.Вставить("ОписаниеСумм", ОписаниеСумм);
	
	СхемаРасчета.Вставить("КонтекстРасчета", КонтекстРасчета);
	
	ПрименяютсяСпециальныеРежимы = УчетнаяПолитикаПереопределяемый.ПлательщикЕНВДЗаПериод(
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода);
		
	СхемаРасчета.ЭтапыРасчета = ЭтапыРасчета(ПрименяютсяСпециальныеРежимы);
		
	СхемаРасчета.Вставить("КонтекстЗаполнения", Новый Структура); // Служебная, используется в ходе заполнения коллекции
	СхемаРасчета.КонтекстЗаполнения.Вставить("Показатель",            Неопределено); // Крайняя добавленная строка
	СхемаРасчета.КонтекстЗаполнения.Вставить("Коллекция",             Неопределено); // Крайняя добавленная коллекция
	СхемаРасчета.КонтекстЗаполнения.Вставить("КраткаяФормаИмен",      Истина);       // При добавлении элементов коллекции указывается часть имени элемента, дополняющая имя коллекции
	
	Возврат СхемаРасчета;
	
КонецФункции

Функция НовыйПоказатели()
	
	Показатели = НовыйОписаниеФормыОтчета();
	Показатели.Колонки.Добавить("ЭтапРасчета",             ТипИмя());
	Показатели.Колонки.Добавить("АлгоритмПолученияДанных", ТипИмя());
	Показатели.Колонки.Добавить("ОтборДанных");            // см. НовыйОтборДанных()
	
	Показатели.Индексы.Добавить("Имя");

	
	Возврат Показатели;
	
КонецФункции

Функция НовыйОписаниеФормыОтчета()
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя",                      ТипИмя());
	Показатели.Колонки.Добавить("НомерЛиста",               ОбщегоНазначения.ОписаниеТипаСтрока(2));
	Показатели.Колонки.Добавить("НомерПриложения",          ОбщегоНазначения.ОписаниеТипаСтрока(1));
	Показатели.Колонки.Добавить("НомерСтроки",              ОбщегоНазначения.ОписаниеТипаСтрока(3));
	Показатели.Колонки.Добавить("Представление",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	// Некоторые показатели могут иметь особенности представления в форме:
	// - "Убыток"          - в расшифровке привычнее видеть отрицательное значение убытка,
	//                       а в декларации он представляется положительным персонажем.
	// - "НомерГода"       - в отличие от других показателей, это число - не сумма, а порядковый номер года (2019).
	//                       Это, в частности, требует особого форматирования при выводе.
	// - "ВторичныеДанные" - данные такого показателя первично выводятся на других страницах.
	//                       Поэтому наличие вторичных данных на странице
	//                       само по себе не должно приводить к включению этой страницы в декларацию.
	// - "Список"          - этот показатель представляет собой колонку некоторого списка, см. НовыйСписки()
	Показатели.Колонки.Добавить("ОсобенностьПредставления", ТипИмя());
	// Служебный номер строки присваивается разработчиками программы для тех строк,
	// которым разработчик формы не присвоил адекватные номера.
	Показатели.Колонки.Добавить("СлужебныйНомерСтроки",     ОбщегоНазначения.ОписаниеТипаСтрока(7));
	
	Возврат Показатели;
	
КонецФункции

// Описывает состав листов (приложений), представляемых в составе декларации.
//
Функция НовыйСоставДекларации()
	
	СоставДекларации = Новый ТаблицаЗначений;
	СоставДекларации.Колонки.Добавить("НомерЛиста",      ОбщегоНазначения.ОписаниеТипаСтрока(2));
	СоставДекларации.Колонки.Добавить("НомерПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	СоставДекларации.Колонки.Добавить("Обязательный",    Новый ОписаниеТипов("Булево")); // необязательные представляются при наличии данных
	
	СоставДекларации.Индексы.Добавить("НомерЛиста, НомерПриложения");
	
	Возврат СоставДекларации;
	
КонецФункции

Функция НовыйФормулы()
	
	Формулы = Новый ТаблицаЗначений;
	Формулы.Колонки.Добавить("Результат",      ТипИмя());
	Формулы.Колонки.Добавить("ЭлементФормулы", ТипИмя());
	Формулы.Колонки.Добавить("Оператор",       ТипОператорФормулы());
	Формулы.Индексы.Добавить("Результат");
	
	Возврат Формулы;
	
КонецФункции

Функция НовыйОграничения()
	
	Ограничения = Новый ТаблицаЗначений;
	Ограничения.Колонки.Добавить("Показатель",    ТипИмя());
	Ограничения.Колонки.Добавить("Тип",           ТипИмя()); // "Сверху" или "Снизу"
	Ограничения.Колонки.Добавить("Граница",       Новый ОписаниеТипов("Число"));
	Ограничения.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Ограничения.Индексы.Добавить("Показатель");
	
	Возврат Ограничения;
	
КонецФункции

Функция ТипИмя()
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(255);
КонецФункции

Функция ПоказательСхемыРасчета(СхемаРасчета, ИмяПоказателя)
	
	Возврат СхемаРасчета.Показатели.Найти(ИмяПоказателя, "Имя");
	
КонецФункции

#Область ОписаниеЭлементовСхемыРасчета

Процедура ДобавитьПриложение(СоставДекларации, НомерЛиста, НомерПриложения, Обязательный)
	
	ОписаниеРаздела = СоставДекларации.Добавить();
	ОписаниеРаздела.НомерЛиста      = НомерЛиста;
	ОписаниеРаздела.НомерПриложения = НомерПриложения;
	ОписаниеРаздела.Обязательный    = Обязательный;
	
КонецПроцедуры

Функция ДобавитьПоказатель(СхемаРасчета, ПолноеИмяПоказателя)
	
	Показатель = СхемаРасчета.Показатели.Найти(ПолноеИмяПоказателя, "Имя");
	Если Показатель = Неопределено Тогда
		Показатель = СхемаРасчета.Показатели.Добавить();
		Показатель.Имя        = ПолноеИмяПоказателя;
	КонецЕсли;
	
	СхемаРасчета.КонтекстЗаполнения.Показатель = Показатель;
	
	Возврат Показатель;
	
КонецФункции

Процедура ДобавитьРасчет(СхемаРасчета, ПолноеИмяПоказателя, КраткаяФормаИмен = Истина)
	
	НоваяСтрока = ДобавитьПоказатель(СхемаРасчета, ПолноеИмяПоказателя);
	
	СхемаРасчета.КонтекстЗаполнения.Коллекция        = НоваяСтрока;
	СхемаРасчета.КонтекстЗаполнения.КраткаяФормаИмен = КраткаяФормаИмен;
	
КонецПроцедуры

Процедура ДобавитьОписание(СхемаРасчета, НомерЛиста = "", НомерПриложения = "", НомерСтроки = "", Представление = "", ОсобенностьПредставления = "", СлужебныйНомерСтроки = "")
	
	ТекущаяСтрока = СхемаРасчета.КонтекстЗаполнения.Показатель;
	ТекущаяСтрока.НомерЛиста               = НомерЛиста;
	ТекущаяСтрока.НомерПриложения          = НомерПриложения;
	ТекущаяСтрока.НомерСтроки              = НомерСтроки;
	ТекущаяСтрока.Представление            = Представление;
	ТекущаяСтрока.ОсобенностьПредставления = ОсобенностьПредставления;
	ТекущаяСтрока.СлужебныйНомерСтроки     = СлужебныйНомерСтроки;
	
КонецПроцедуры

Процедура ДобавитьСлагаемое(СхемаРасчета, ИмяПоказателя, Оператор = "+")
	
	ИмяВладельца = СхемаРасчета.КонтекстЗаполнения.Коллекция.Имя;
	Если СхемаРасчета.КонтекстЗаполнения.КраткаяФормаИмен Тогда
		ПолноеИмяПоказателя = ИмяВладельца + "." + ИмяПоказателя;
	Иначе
		ПолноеИмяПоказателя = ИмяПоказателя;
	КонецЕсли;
	
	ДобавитьПоказатель(СхемаРасчета, ПолноеИмяПоказателя);
	
	Элемент = СхемаРасчета.Формулы.Добавить();
	Элемент.Результат      = ИмяВладельца;
	Элемент.ЭлементФормулы = ПолноеИмяПоказателя;
	Элемент.Оператор       = Оператор;
	
КонецПроцедуры

Процедура ДобавитьВычитаемое(СхемаРасчета, ИмяПоказателя)
	
	ДобавитьСлагаемое(СхемаРасчета, ИмяПоказателя, "-");
	
КонецПроцедуры

Функция ДобавитьИсточникДанных(СхемаРасчета, Знач АлгоритмПолученияДанных = "")
	
	ТекущаяСтрока = СхемаРасчета.КонтекстЗаполнения.Показатель;
	
	Если Не ПустаяСтрока(АлгоритмПолученияДанных) Тогда
		ТекущаяСтрока.АлгоритмПолученияДанных = АлгоритмПолученияДанных;
	Иначе
		ТекущаяСтрока.АлгоритмПолученияДанных = ТекущаяСтрока.Имя;
	КонецЕсли;
	ТекущаяСтрока.ОтборДанных = НовыйОтборДанных(ТекущаяСтрока.АлгоритмПолученияДанных);
	
	Возврат ТекущаяСтрока; // для установки отбора данных
	
КонецФункции

Процедура ДобавитьОграничение(СхемаРасчета, Граница, Тип, Представление)
	
	ИмяВладельца = СхемаРасчета.КонтекстЗаполнения.Коллекция.Имя;
	
	Ограничение = СхемаРасчета.Ограничения.Добавить();
	Ограничение.Показатель    = ИмяВладельца;
	Ограничение.Тип           = Тип;
	Ограничение.Граница       = Граница;
	Ограничение.Представление = Представление;
	
КонецПроцедуры

Функция ПолноеИмяЗаполняемогоПоказателя(СхемаРасчета)
	
	Показатель = СхемаРасчета.КонтекстЗаполнения.Показатель;
	Если Показатель = Неопределено Тогда
		Возврат Неопределено;
	Иначе
	 	Возврат Показатель.Имя;
	КонецЕсли;
	
КонецФункции

Функция ОстановитьПостроениеДерева(СхемаРасчета)
	
	Возврат ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СхемаРасчета.КонтекстЗаполнения);
	
КонецФункции

Процедура ПродолжитьПостроениеДерева(СхемаРасчета, ТочкаОстановки)
	
	ЗаполнитьЗначенияСвойств(СхемаРасчета.КонтекстЗаполнения, ТочкаОстановки);
	
КонецПроцедуры

Функция ДобавитьСписок(СхемаРасчета, ИмяАлгоритма, НомерЛиста, НомерПриложения, КодФНС)
	
	Список = СхемаРасчета.Списки.Добавить();
	
	Список.Имя             = ИмяАлгоритма;
	Список.НомерЛиста      = НомерЛиста;
	Список.НомерПриложения = НомерПриложения;
	Список.КодФНС          = КодФНС;
	
	Возврат Список;
	
КонецФункции

Процедура ДобавитьКолонкуСписка(Список, ИмяКолонки, ИмяФНС, Представление, Тип = Неопределено)
	
	ОписаниеКолонкиСписка = Новый Структура;
	ОписаниеКолонкиСписка.Вставить("Имя",           ИмяКолонки);
	ОписаниеКолонкиСписка.Вставить("ИмяФНС",        ИмяФНС);// в соответствии с форматом представления в электронном виде
	ОписаниеКолонкиСписка.Вставить("Представление", Представление);
	
	// Если тип не указан, то хранятся суммовые значения (коллекция сумм)
	// При этом предполагается, что эти суммы соответствуют этапу расчета "Все" - см. ЭтапРасчетаПоказателейСписка
	Если Тип <> Неопределено Тогда
		ОписаниеКолонкиСписка.Вставить("Тип", Тип);
	КонецЕсли;
	
	Список.Колонки.Вставить(ИмяКолонки, ОписаниеКолонкиСписка);
	
КонецПроцедуры

Функция НовыйОписаниеГруппировки(СхемаРасчета, Имя, НомерЛиста, НомерПриложения)
	
	ОписаниеГруппировки = Новый Структура;
	
	ОписаниеГруппировки.Вставить("СхемаРасчета",    СхемаРасчета);
	ОписаниеГруппировки.Вставить("Имя",             Имя);
	ОписаниеГруппировки.Вставить("НомерЛиста",      НомерЛиста);
	ОписаниеГруппировки.Вставить("НомерПриложения", НомерПриложения);
	
	Возврат ОписаниеГруппировки;
	
КонецФункции

Процедура ДобавитьПоказательГруппировки(ОписаниеГруппировки, ИмяИсходногоПоказателя, НомерСтроки, Представление)
	
	// Показатели группировки - "альтернативные": не участвуют в расчете вышестоящих показателей, поэтому в имени содержит ":".
	ПолноеИмяПоказателя = ОписаниеГруппировки.Имя + ":" + ИмяИсходногоПоказателя;
	
	ДобавитьРасчет(ОписаниеГруппировки.СхемаРасчета, ПолноеИмяПоказателя, Ложь);
	
	ДобавитьОписание(
		ОписаниеГруппировки.СхемаРасчета,
		ОписаниеГруппировки.НомерЛиста,
		ОписаниеГруппировки.НомерПриложения,
		НомерСтроки,
		Представление);
		
	ДобавитьСлагаемое(ОписаниеГруппировки.СхемаРасчета, ИмяИсходногоПоказателя);
	
КонецПроцедуры

#КонецОбласти

Функция НовыйСписки()
	
	Списки = Новый ТаблицаЗначений;
	Списки.Колонки.Добавить("Имя",             ТипИмя());
	Списки.Колонки.Добавить("КодФНС",          ТипИмя());
	Списки.Колонки.Добавить("НомерЛиста",      ОбщегоНазначения.ОписаниеТипаСтрока(2));
	Списки.Колонки.Добавить("НомерПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	Списки.Колонки.Добавить("Колонки",         Новый ОписаниеТипов("Структура")); // См. ДобавитьКолонкуСписка
	Списки.Индексы.Добавить("Имя");
	
	Возврат Списки;
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросами

// Инициализирует запрос в контексте заполнения декларации
//
// Параметры:
//  КонтекстРасчета  - см. НовыйКонтекстРасчета() - коллекция, содержащая значения для заполнения параметров запроса
//  ВременныеТаблицы - см. НовыйРасширенныйМенеджерВременныхТаблиц() - менеджер временных таблиц
// Возвращаемое значение:
//  Запрос 
Функция НовыйЗапрос(КонтекстРасчета, ВременныеТаблицы = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", КонтекстРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация",   КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("Организации",   КонтекстРасчета.Организации);
	
	Если ВременныеТаблицы <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы.Менеджер;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Конструктор коллекции, используемой для выполнения многоэтапных программ обработки данных,
// подразумевающих последовательное выполнение запросов с использованием одних и тех же данных.
//
// Содержит МенеджерВременныхТаблиц и коллекции, из которых можно получить список временных таблиц, которые содержатся в
// Менеджере.
//
// Временные таблицы, управляемые с помощью менеджера, включают в себя локальные и глобальные.
// Локальные временные таблицы могут многократно создаваться и уничтожаться в ходе обработки данных.
// Как правило, такие временные таблицы следует использовать внутри одной процедуры или функции.
// Глобальные временные таблицы уничтожаются, когда потребные для обработки данные получены - при уничтожении менеджера.
// 
// Список глобальных временных таблиц можно получить, если таблицы создаются методом ВыполнитьЗапрос()


//
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйРасширенныйМенеджерВременныхТаблиц()
	
	ВременныеТаблицы = Новый Структура;
	ВременныеТаблицы.Вставить("Менеджер",           Новый МенеджерВременныхТаблиц);
	ВременныеТаблицы.Вставить("ГлобальныеТаблицы",  Новый Массив); // Имена таблиц

	
	Возврат ВременныеТаблицы;
	
КонецФункции

// Выполняет запрос с использованием временных таблиц, управление которых выполняется с помощью НовыйРасширенныйМенеджерВременныхТаблиц().
// Перед выполнением запроса уничтожаются временные таблицы, если их существование не позволяет выполнить запрос.
//
// Параметры:
//  Запрос								 - Запрос - запрос с установленным текстом и параметрами
//  ВременныеТаблицы					 - см. НовыйРасширенныйМенеджерВременныхТаблиц() 
//  ИменаГлобальныхТаблиц				 - Строка,Массив - перечень имен временных таблиц, 
//                                                         которые создаются запросом 
//                                                         и не должны уничтожаться в течение жизни менеджера временных таблиц.
//                                                         Если запрос не создает таблицу, имя которой указано в ИменаГлобальныхТаблиц, 
//                                                         то вызывается исключение.
//  УничтожитьЛокальныеВременныеТаблицы	 - Булево - позволяет уничтожить все временные таблицы, созданные в этом запросе,
//                                                  за исключением перечисленных в ИменаГлобальныхТаблиц
// Возвращаемое значение:
//  РезультатЗапроса
Функция ВыполнитьЗапрос(Запрос, ВременныеТаблицы, Знач ИменаГлобальныхТаблиц = Неопределено, УничтожитьЛокальныеВременныеТаблицы = Ложь)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	НовыеТаблицы         = Новый Массив; // Сначала поместим туда все таблицы, а потом удалим глобальные - останутся вновь добавленные локальные.
	ТаблицыКПересозданию = Новый Массив; // Возможно, какие-то таблицы уже созданы. В этом случае предварительно удалим их.
	Для Каждого ЗапросСхемыЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросСхемыЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗапросСхемыЗапроса.ТаблицаДляПомещения) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеТаблицы.Добавить(ЗапросСхемыЗапроса.ТаблицаДляПомещения);
		
		Если ВременныеТаблицы.Менеджер.Таблицы.Найти(ЗапросСхемыЗапроса.ТаблицаДляПомещения) <> Неопределено Тогда
			ТаблицыКПересозданию.Добавить(ЗапросСхемыЗапроса.ТаблицаДляПомещения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТаблицыКПересозданию) Тогда
		УничтожитьВременныеТаблицы(ВременныеТаблицы, ТаблицыКПересозданию);
	КонецЕсли;
	
	Если ТипЗнч(ИменаГлобальныхТаблиц) = Тип("Строка") Тогда
		ИменаГлобальныхТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаГлобальныхТаблиц,,Истина,Истина);
	КонецЕсли;
	
	Если ТипЗнч(ИменаГлобальныхТаблиц) = Тип("Массив") Тогда
		Для Каждого ИмяТаблицы Из ИменаГлобальныхТаблиц Цикл
			
			ИндексТаблицы = НовыеТаблицы.Найти(ИмяТаблицы);
			
			Если ИндексТаблицы = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверно задано имя временной таблицы %1';
																								|en = '%1 temporary table name is specified incorrectly'"), ИмяТаблицы);
			КонецЕсли;
			
			НовыеТаблицы.Удалить(ИндексТаблицы);
			ВременныеТаблицы.ГлобальныеТаблицы.Добавить(ИмяТаблицы);
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы.Менеджер;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если УничтожитьЛокальныеВременныеТаблицы Тогда
		// Удалим локальные таблицы, созданные в этой процедуре
		УничтожитьВременныеТаблицы(ВременныеТаблицы, НовыеТаблицы);

	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Уничтожает временные таблицы, управление которыми выполняется с помощью НовыйРасширенныйМенеджерВременныхТаблиц().
//
// Параметры:
//  ВременныеТаблицы - см. НовыйРасширенныйМенеджерВременныхТаблиц()
//  КУничтожению	 - Массив - перечень имен временных таблиц к уничтожению
//                   - Строка - перечень имен временных таблиц к уничтожению с разделителем ","
Процедура УничтожитьВременныеТаблицы(ВременныеТаблицы, ПараметрКУничтожению)
	
	Если ТипЗнч(ПараметрКУничтожению) = Тип("Массив") Тогда
		КУничтожению = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрКУничтожению);

	Иначе
		КУничтожению = СтрРазделить(ПараметрКУничтожению, ",");
	КонецЕсли;
		
	СхемаЗапроса = Новый СхемаЗапроса;
	ВыполнитьЗапрос = Ложь;
	Для Каждого ИмяТаблицы Из КУничтожению Цикл

		
		Если ВременныеТаблицы.Менеджер.Таблицы.Найти(ИмяТаблицы) = Неопределено Тогда
			Продолжить;

		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВременныеТаблицы.ГлобальныеТаблицы, ИмяТаблицы);
		
		ВыполнитьЗапрос = Истина;
		
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ОписаниеЗапроса.ИмяТаблицы = ИмяТаблицы;
		
	КонецЦикла;

	
	Если Не ВыполнитьЗапрос Тогда
		Возврат;
	КонецЕсли;
	

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы.Менеджер;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Выполнить();
	
КонецПроцедуры


// Добавляет в текст запроса выбора поля для суммовых значений, в соответствии с переданным описанием сумм.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - содержит модифицируемый текст запроса
//  ШаблонСумм	 - Строка - описание выражения; может содержать символ %, который будет заменен на значение псевдонима поля 
//  ОписаниеСумм - см. НовыйОписаниеКоллекцииСумм()	- описание сумм, которые нужно получить с помощью запроса.
Процедура ДобавитьКолонкиСумм(СхемаЗапроса, ШаблонСумм, ОписаниеСумм)
	
	ШаблонВыражения = "ЕСТЬNULL(СУММА(%), 0)";
	// Пояснение по ЕСТЬNULL: как правило, запрос выполняется к регистру бухгалтерии,
	// где в зависимости от видов учета те или иные ресурсы могут принимать значение NULL.
	
	Выражения = Новый Структура;
	Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ОписаниеСумм) Цикл
		ПолеСуммы = СтрЗаменить(ШаблонСумм, "%", ИмяСвойства);
		Выражения.Вставить(ИмяСвойства, СтрЗаменить(ШаблонВыражения, "%", ПолеСуммы));
	КонецЦикла;
	
	ДобавитьПоляСхемыЗапроса(СхемаЗапроса, Выражения);
	
КонецПроцедуры

// Добавляет поле в текст запроса выбора. 
// Модифицируется первый запрос в первом пакете запросов. Модифицируемый запрос не должен содержать объединений.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - содержит модифицируемый текст запроса
//  Выражение	 - Строка - выражение, выбираемое запросом
//  Псевдоним	 - Строка - псевдоним, назначаемый новому полю
//  Группировать - Булево - Истина, если добавленное поле должно входить в состав группировок.
Процедура ДобавитьПолеСхемыЗапроса(СхемаЗапроса, Выражение, Псевдоним, Группировать = Ложь)
	
	Выражения = Новый Структура;
	Выражения.Вставить(Псевдоним, Выражение);
	
	ДобавитьПоляСхемыЗапроса(СхемаЗапроса, Выражения, Группировать);
	
КонецПроцедуры

// Добавляет несколько полей в текст запроса выбора
// Модифицируется первый запрос в первом пакете запросов. Модифицируемый запрос не должен содержать объединений.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - содержит модифицируемый текст запроса
//  Выражения	 - Структура - Ключ: псевдоним поля; Значение: выражение выбора
//  Группировать - Булево - Истина, если добавленные поля должны входить в состав группировок.
Процедура ДобавитьПоляСхемыЗапроса(СхемаЗапроса, Выражения, Группировать = Ложь)
	
	ЗапросВыбора         = СхемаЗапроса.ПакетЗапросов[0];
	ОператорСхемыЗапроса = ЗапросВыбора.Операторы[0];
	
	// В версии 8.3.5 СхемаЗапроса не позволяет просто добавить выражение с полем, отсутствующим в доступных полях - 
	// т.е. таким, которое выбирается из временной таблицы, созданной другим запросом.
	// Поэтому для модификации запроса используем не только СхемаЗапроса, но и средства работы со строками:
	// - в СхемаЗапроса опишем выражения, в которых будет параметр с уникальным именем
	// - средствами работы с текстами заменим такие параметры на выражения
	// - модифицированным текстом инициализируем СхемуЗапроса.
	
	// Но если в запросе уже есть группировки и в ходе вызова этой функции добавляются выражения без агрегатных функций,
	// то установить получившийся текст схеме не получится, так как
	// - выражения в виде временных параметров нельзя поместить в группировку
	// - после замены параметров на выражения появятся поля, не входящие в группировки.
	// Поэтому: 
	// - добавим такие группировки, которые будут включать и временный параметр, и уже существующее в схеме поле
	// - заменим в тексте запроса эти группировки на выражения.
	
	ВременныеПараметры   = Новый Соответствие;
	
	УжеЕстьГруппировки = ОператорСхемыЗапроса.Группировка.Количество() > 0;
	Если Группировать И УжеЕстьГруппировки Тогда
		СлужебноеПолеГруппировок = "" + ОператорСхемыЗапроса.Группировка[0];
	Иначе
		СлужебноеПолеГруппировок = Неопределено;
	КонецЕсли;
	
	Для Каждого Выражение Из Выражения Цикл
		
		ВременныйПараметр = "&Поле" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		ВременныеПараметры.Вставить(ВременныйПараметр, Выражение.Значение);
		
		ОператорСхемыЗапроса.ВыбираемыеПоля.Добавить(ВременныйПараметр);
		Индекс = ОператорСхемыЗапроса.ВыбираемыеПоля.Количество() - 1;
		ЗапросВыбора.Колонки[Индекс].Псевдоним = Выражение.Ключ;
		
		Если Группировать И СлужебноеПолеГруппировок <> Неопределено Тогда
			ВременныйПараметр = "&Группировка" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			ВременнаяГруппировка = "ЕСТЬNULL(" + ВременныйПараметр + ", " + СлужебноеПолеГруппировок + ")";
			ВременныеПараметры.Вставить(ВременнаяГруппировка, Выражение.Значение);
			ОператорСхемыЗапроса.Группировка.Добавить(ВременнаяГруппировка);
		КонецЕсли;
		
	КонецЦикла;

	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Для Каждого ВременныйПараметр Из ВременныеПараметры Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ВременныйПараметр.Ключ, ВременныйПараметр.Значение);
	КонецЦикла;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если Группировать И Не УжеЕстьГруппировки Тогда
		ЗапросВыбора         = СхемаЗапроса.ПакетЗапросов[0];
		ОператорСхемыЗапроса = ЗапросВыбора.Операторы[0];
		Для Каждого Выражение Из Выражения Цикл
			ОператорСхемыЗапроса.Группировка.Добавить(Выражение.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсБРО

Процедура ПередатьРассчитанныеЗначенияБРО(Контейнер, РезультатРасчета, ОписаниеФормыОтчета, ИмяРедакции, СхемаРасчета, ТаблицаСтраницВариантовНО)
	
	СоставДекларации = СоставДекларации(СхемаРасчета.КонтекстРасчета);
	
	// Представим состав декларации в именах БРО
	РазделыДекларации = Новый Соответствие;
	Для Каждого ОписаниеРаздела Из СоставДекларации Цикл
		ИмяРаздела = ИмяРазделаБРО(ОписаниеРаздела);
		РазделыДекларации.Вставить(ИмяРаздела, ОписаниеРаздела.Обязательный);
	КонецЦикла;
	
	ВерсияКонтейнера = РегламентированныйОтчетПрибыль.ВерсияКонтейнера(ИмяРедакции);
	
	Если ВерсияКонтейнера >= '2019-10-01' Тогда
		КоличествоСтраницЛиста02 = Контейнер.Лист02.Строки.Количество();
	Иначе
		КоличествоСтраницЛиста02 = Контейнер.Лист02.Количество();
	КонецЕсли;
	
	НомерЯчейки = РегламентированныйОтчетПрибыль.НомерСлужебнойЯчейкиПризнакНалогоплательщика(2, 0, ИмяРедакции);
	
	Для ИндексСтраницы = 0 По КоличествоСтраницЛиста02 - 1 Цикл
		
		Если ВерсияКонтейнера >= '2019-10-01' Тогда
			ДанныеЛиста02 = Контейнер.Лист02.Строки[ИндексСтраницы].Данные;
		Иначе
			ДанныеЛиста02 = Контейнер.Лист02[ИндексСтраницы].Данные;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЛиста02) = Тип("СписокЗначений") Тогда
			ДанныеЛиста02 = ДанныеЛиста02[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = ДанныеЛиста02[НомерЯчейки];
		
		ПараметрыОтбора = Новый Структура("ПризнакНалогоплательщика, НомерСтраницы", ПризнакНалогоплательщика, 0);
		СтрокиСоответствия = ТаблицаСтраницВариантовНО.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиСоответствия.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантНО = СтрокиСоответствия[0].ВариантНО;
		СтрокиСоответствия[0].НомерСтраницы = ИндексСтраницы + 1;

		ЗаполненныеСтраницы = Новый Соответствие; // Ключ - имя раздела БРО, значение - описание произвольного показателя этого раздела
		
		// Поместим значения в контейнер
		// В разных редакциях формы разделы контейнера могут храниться по-разному.
		РазделыКонтейнера = РазделыКонтейнера(Контейнер, ОписаниеФормыОтчета, ИмяРедакции, ИндексСтраницы);
		
		// Списки включаем вне зависимости от ссылок на них в данных формы
		ПередатьСпискиБРО(РазделыКонтейнера, РезультатРасчета.Списки, СхемаРасчета.Списки, ИмяРедакции, ВариантНО);
		
		// Регулярные показатели
		Для Каждого Показатель Из ОписаниеФормыОтчета Цикл
			
			ИмяРазделаБРО = ИмяРазделаБРО(Показатель);
			
			Если Не РазделыКонтейнера.Свойство(ИмяРазделаБРО) Тогда
				Продолжить;
			КонецЕсли;
	
			РазделБРО = РазделыКонтейнера[ИмяРазделаБРО];
			
			// Значение - в контейнер
			Если Показатель.ОсобенностьПредставления = "НомерГода" Тогда
				
				Значение = РассчитанноеЗначение(РезультатРасчета.РассчитанныеЗначения, Показатель.Имя, ВариантНО);
				Если Значение <> Неопределено Тогда
					Значение = ПрочитатьНомерГода(Значение, СхемаРасчета.ОписаниеСумм);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Значение) Тогда
					Значение = "";
				Иначе
					Значение = ПредставлениеНомераГода(Значение);
				КонецЕсли;
				
			Иначе
				Значение = СуммаНУПоказателя(РезультатРасчета.РассчитанныеЗначения, Показатель.Имя, ВариантНО);
			КонецЕсли;
			
			Если РазделыДекларации[ИмяРазделаБРО] = Неопределено Тогда
				// Этот раздел в этом периоде не представляется.
				// Для разных приложений в разных редакциях могут действовать разные соглашения с БРО:
				// данные таких листов
				// - либо должны передаваться в полном объеме (а затем БРО их консолидирует - переносит на Лист 02)
				// - либо не должны передаваться
				Если Не ЭтоКонсолидируемыйРазделБРО(Показатель, ИмяРедакции) Тогда
					Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			НомерЯчейкиБРО = НомерПоказателяБРО(Показатель, ИмяРедакции);
			
			ЗаполняемаяСтраница = ЗаполняемаяСтраницаБРО(РазделБРО);
			
			РегламентированныйОтчетПрибыль.ПоместитьЗначениеПоказателяНаСтраницу(ЗаполняемаяСтраница, НомерЯчейкиБРО, Значение);
			
			// Отметим, что страница содержит данные
			Если ЗначениеЗаполнено(Значение)
				И ЗаполненныеСтраницы[ИмяРазделаБРО] = Неопределено
				И Показатель.ОсобенностьПредставления <> "ВторичныеДанные" Тогда
				
				ЗаполненныеСтраницы.Вставить(ИмяРазделаБРО, Показатель);
				
			КонецЕсли;
			
		КонецЦикла;
	
		// Отметим страницы, включаемые в декларацию.
		Для Каждого ОписаниеРаздела Из СоставДекларации Цикл
			
			ИмяРаздела = ИмяРазделаБРО(ОписаниеРаздела);
			
			Если Не ОписаниеРаздела.Обязательный И ЗаполненныеСтраницы[ИмяРаздела] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РазделБРО = РазделыКонтейнера[ИмяРаздела];
			Если РазделБРО = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполняемаяСтраница = ЗаполняемаяСтраницаБРО(РазделБРО);
			
			РегламентированныйОтчетПрибыль.ВключитьСтраницу(
				ЗаполняемаяСтраница,
				ОписаниеРаздела.НомерЛиста,
				ОписаниеРаздела.НомерПриложения,
				ИмяРедакции,
				ПризнакНалогоплательщика);
			
		КонецЦикла;
		
		ВключитьКонсолидируемыеРазделыБРО(РазделыКонтейнера, ЗаполненныеСтраницы, СхемаРасчета.КонтекстРасчета, ИмяРедакции);
		
		ОчиститьВторичныеДанныеБРО(РазделыКонтейнера, ЗаполненныеСтраницы, СоставДекларации, ОписаниеФормыОтчета, ИмяРедакции);
	
	КонецЦикла;
	
КонецПроцедуры

// Представляет протокол расчета отдельных показателей в линейном виде, "раскрывая скобки" формул, из которых состоит расчет.
// При этом в сокращенный протокол включаются
// - ссылки на показатели отчета, выводимые в отчет непосредственно
// - ссылки на получение данных из информационной базы
// - арифметические операции над перечисленными выше элементами.
// Промежуточные шаги расчета ("Формула") в сокращенном протоколе опускаются.
// Также опускаются записи расчета показателей с незаполненными суммами (если это требование отмечено в протоколе).
//
// Параметры:
//  ПротоколРасчета - Структура - см. НовыйПротоколРасчета, данные о промежуточных операциях расчета, собранные в ходе расчета
//  СхемаРасчета    - Структура - см. НовыйСхемаРасчета, общая схема иллюстрируемого расчета
//
Функция СократитьПротоколРасчетаДляРасшифровкиДекларации(ПротоколРасчета, СхемаРасчета)
	
	СокращенныйПротокол = Новый ТаблицаЗначений;
	СокращенныйПротокол.Колонки.Добавить("Имя",         ТипИмя());
	СокращенныйПротокол.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	СокращенныйПротокол.Колонки.Добавить("ВариантНО",   Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	СокращенныйПротокол.Колонки.Добавить("Протокол",    Новый ОписаниеТипов("Массив"));
	СокращенныйПротокол.Индексы.Добавить("Имя, ЭтапРасчета");
	// В сокращенный протокол могут быть включены:
	// - строки протокола как есть
	// - строки схемы расчета, если элемент протокола выводится в декларацию
	// - структура со свойствами Оператор и Запись, если для этой записи нужно инвертировать знак по отношению к исходному протоколу
	
	СсылкиПоляОтчета = Новый Соответствие;
	Для Каждого ПолеОтчета Из СхемаРасчета.Показатели Цикл
		
		Если Не ЗначениеЗаполнено(ПолеОтчета.НомерСтроки)
			И Не ЗначениеЗаполнено(ПолеОтчета.СлужебныйНомерСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		СсылкиПоляОтчета.Вставить(ПолеОтчета.Имя, ПолеОтчета);
		
	КонецЦикла;
	
	Отбор = Новый Структура("Имя, ЭтапРасчета, ВариантНО");
	
	Для Каждого ЗаписьПротокола Из ПротоколРасчета Цикл
		
		Если ЗаписьПротокола.ТипЗаписи = "Пропустить" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена
			И КоллекцииСумм.Пустая(ЗаписьПротокола, СхемаРасчета.ОписаниеСумм) Тогда
			Продолжить;
		КонецЕсли;
		
		// Инициализируем расчет показателя
		Отбор.Имя         = ЗаписьПротокола.Показатель;
		Отбор.ЭтапРасчета = ЗаписьПротокола.ЭтапРасчета;
		Отбор.ВариантНО   = ЗаписьПротокола.ВариантНО;
		
		РасчетПоказателя = СокращенныйПротокол.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(РасчетПоказателя) Тогда
			РасчетПоказателя = РасчетПоказателя[0];
		Иначе
			РасчетПоказателя = СокращенныйПротокол.Добавить();
			ЗаполнитьЗначенияСвойств(РасчетПоказателя, Отбор);
		КонецЕсли;
		
		Если ЗаписьПротокола.ТипЗаписи <> "Формула" Тогда
			// Включаем как есть
			РасчетПоказателя.Протокол.Добавить(ЗаписьПротокола);
			Продолжить;
		КонецЕсли;
		
		// Если данные этой записи включаются как показатель декларации, то ссылаемся на него
		Если ПустаяСтрока(ЗаписьПротокола.Условие.ЭтапРасчета) Тогда
			
			ПолеОтчета = СсылкиПоляОтчета[ЗаписьПротокола.Условие.Имя];
			Если ПолеОтчета <> Неопределено Тогда
				ДобавитьЭлементФормулыСокращенногоПротокола(РасчетПоказателя, ЗаписьПротокола.Оператор, ПолеОтчета);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Остальные элементы формулы раскрываем до предыдущего уровня.
		
		// Поскольку в протоколе данные записаны по мере их расчета,
		// то к моменту обработки записи обработаны все элементы ее формулы
		Отбор.Имя         = ЗаписьПротокола.Условие.Имя;
		Отбор.ЭтапРасчета = ЗаписьПротокола.Условие.ЭтапРасчета;
		Отбор.ВариантНО   = ЗаписьПротокола.Условие.ВариантНО;
		РасчетЭлементаФормулы = СокращенныйПротокол.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(РасчетЭлементаФормулы) Тогда
			РасчетПоказателя.Протокол.Добавить(ЗаписьПротокола);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементФормулы Из РасчетЭлементаФормулы[0].Протокол Цикл
			
			ДобавитьЭлементФормулыСокращенногоПротокола(РасчетПоказателя, ЗаписьПротокола.Оператор, ЭлементФормулы);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СокращенныйПротокол;
	
КонецФункции

Процедура ДобавитьЭлементФормулыСокращенногоПротокола(РасчетПоказателя, Оператор, ЭлементФормулы)
	
	Если Оператор <> "-" Тогда
		// Включаем "как есть"
		РасчетПоказателя.Протокол.Добавить(ЭлементФормулы);
		Возврат;
	КонецЕсли;
	
	// Инвертируем знак
	
	// Для сохранения информации о том, что в сокращенный показатель элемент формулы должен войти с противоположным знаком,
	// используется такой прием:
	// это элемент формулы "оборачивается" в структуру, которая кроме элемента формулу хранит оператор инверсии ("-")
	
	Если ТипЗнч(ЭлементФормулы) = Тип("Структура")
		И ЭлементФормулы.Оператор = "-" Тогда
		
		// Элемент формулы был инвертирован ранее.
		// Поэтому очередная инверсия приведет к восстановлению исходного знака.
		// Чтобы это показать, структура уже не нужна - включим элемент формулы "как есть",
		// без оператора инверсии
		
		РасчетПоказателя.Протокол.Добавить(ЭлементФормулы.Запись);
		Возврат;
	КонецЕсли;
	
	ОтрицательныйЭлементФормулы = Новый Структура;
	ОтрицательныйЭлементФормулы.Вставить("Оператор", "-");
	ОтрицательныйЭлементФормулы.Вставить("Запись",   ЭлементФормулы);
	
	РасчетПоказателя.Протокол.Добавить(ОтрицательныйЭлементФормулы);
	
КонецПроцедуры

Процедура ПередатьПротоколРасчетаБРО(Контейнер, СокращенныйПротокол, РассчитанныеЗначения, ОписаниеФормыОтчета, ИмяРедакции, СхемаРасчета, ТаблицаСтраницВариантовНО)
	
	// Контейнер инициализируется при первом вызове ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки()
	
	ПредставленияПоказателейСписков = ПредставленияПоказателейСписков(СхемаРасчета);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя",         "");
	Отбор.Вставить("ЭтапРасчета", ""); // ЭтапРасчета не заполнен - в декларацию выводятся только итоговые данные налогового учета
	
	Для Каждого Показатель Из ОписаниеФормыОтчета Цикл
		
		Отбор.Имя = Показатель.Имя;
		РасчетыПоказателя = СокращенныйПротокол.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(РасчетыПоказателя) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого РасчетПоказателя Из РасчетыПоказателя Цикл
			
			ПараметрыОтбора = Новый Структура("ВариантНО", РасчетПоказателя.ВариантНО);
			СтрокиСоответствия = ТаблицаСтраницВариантовНО.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиСоответствия.Количество() = 0 Или СтрокиСоответствия[0].НомерСтраницы = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтраницы       = СтрокиСоответствия[0].НомерСтраницы;
			НомерЯчейки         = НомерПоказателяБРО(Показатель, ИмяРедакции);
			ИмяРазделаБРО       = ИмяРазделаБРО(Показатель);
			ПредставлениеСтроки = ПредставлениеСтрокиДекларации(Показатель);
			
			Для Каждого ЭлементРасшифровкиПоказателя Из РасчетПоказателя.Протокол Цикл
				
				Если ТипЗнч(ЭлементРасшифровкиПоказателя) = Тип("Структура") Тогда
					ИнвертироватьЗнак = (ЭлементРасшифровкиПоказателя.Оператор = "-");
					ЗаписьПротокола   = ЭлементРасшифровкиПоказателя.Запись;
				Иначе
					ИнвертироватьЗнак = Ложь;
					ЗаписьПротокола   = ЭлементРасшифровкиПоказателя;
				КонецЕсли;
				
				Если Показатель.ОсобенностьПредставления = "Убыток" Тогда
					// Обычно выручка - положительная, а расходы - отрицательные.
					// Сложение величин дает положительный результат при прибыли и отрицательный при убытке.
					// Но для показателей убытка все наоборот: при убытке в декларации положительное число.
					//
					// Несмотря на это, в расшифровке таких показателей выручку показываем привычно - положительным числом.
					// Соответственно, расходы - отрицательным.
					// Таким образом, итог расшифровки показателя убытка будет всегда отрицательным.
					//
					// Опыт показал, что отрицательный итог расшифровки, не совпадающий по знаку с данными в строке декларации,
					// понятен для пользователей: убыток же.
					// И наоборот: вычитание выручки из расходов вызывало недоумение.
					ИнвертироватьЗнак = Не ИнвертироватьЗнак;
				ИначеЕсли Показатель.ОсобенностьПредставления = "Список" Тогда
					НомерЯчейки         = НомерМногострочногоПоказателяБРО(Показатель, ЗаписьПротокола.Индекс, ИмяРедакции);
					ПредставлениеСтроки = ПредставлениеМногострочнойСтрокиДекларации(Показатель, ЗаписьПротокола.Индекс, ПредставленияПоказателейСписков);
				КонецЕсли;
				
				ЭтоСсылкаНаДругуюСтроку = Не (СхемаРасчета.Показатели.Индекс(ЗаписьПротокола) < 0);
				Если ЭтоСсылкаНаДругуюСтроку Тогда
					ТипЗаписи = "Переход";
					Оператор  = "+";
					Сумма     = СуммаНУПоказателя(РассчитанныеЗначения, ЗаписьПротокола.Имя, РасчетПоказателя.ВариантНО);
				Иначе
					ТипЗаписи = "Расшифровка";
					Оператор  = ЗаписьПротокола.Оператор;
					Сумма     = ЗаписьПротокола.СуммаНУ; // См. РасчетНалогаНаПрибыль.ОписаниеСуммНалоговыйУчет()
				КонецЕсли;
				
				Если Оператор <> "-" Тогда
					Оператор = "+";
				КонецЕсли;
				
				Если ИнвертироватьЗнак Тогда
					Если Оператор = "-" Тогда
						Оператор = "+";
					Иначе
						Оператор = "-";
					КонецЕсли;
				КонецЕсли;
				
				Если Оператор = "-" Тогда
					Сумма = - Сумма;
				КонецЕсли;
				
				Если ТипЗаписи = "Переход" Тогда
					Расшифровка = ОписаниеПереходаПоказателяБРО(Показатель, ЗаписьПротокола, ИмяРедакции);
				ИначеЕсли ТипЗаписи = "Расшифровка" Тогда
					Расшифровка = ОписаниеРасшифровкиПоказателяБРО(ЗаписьПротокола, СхемаРасчета);
				КонецЕсли;
					
				Если Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Расшифровка.Действие = Неопределено Тогда
					Расшифровка.Действие = Новый Структура;
				КонецЕсли;
				Расшифровка.Действие.Вставить("НомерСтраницы", НомерСтраницы);
				
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
					Контейнер,
					НомерЯчейки,
					ПредставлениеСтроки,
					Оператор,
					Расшифровка.Представление,
					Сумма,
					ИмяРазделаБРО,
					Расшифровка.Действие);
					
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяРазделаБРО(ОписаниеПоказателя)
	
	Возврат РегламентированныйОтчетПрибыль.ИмяРаздела(ОписаниеПоказателя.НомерЛиста, ОписаниеПоказателя.НомерПриложения);
	
КонецФункции

Функция НомерПоказателяБРО(ОписаниеПоказателя, ИмяРедакции)
	
	Если ПустаяСтрока(ОписаниеПоказателя.СлужебныйНомерСтроки) Тогда
		НомерСтроки = ОписаниеПоказателя.НомерСтроки;
		НомерГрафы  = "03"; // в печатной форме отчета колонки понумерованы; номер 3 - сумма в рублях
	Иначе
		// Служебный номер включает и номер строки и номер графы
		НомерСтроки = "";
		НомерГрафы  = "";
		ДлинаСлужебногоНомера = СтрДлина(ОписаниеПоказателя.СлужебныйНомерСтроки);
		
		ДлинаНомераГрафы = 2;
		
		Если ДлинаСлужебногоНомера <= ДлинаНомераГрафы Тогда
			НомерГрафы = ОписаниеПоказателя.СлужебныйНомерСтроки;
		Иначе
			НомерГрафы  = Прав(ОписаниеПоказателя.СлужебныйНомерСтроки, ДлинаНомераГрафы);
			НомерСтроки = Лев(ОписаниеПоказателя.СлужебныйНомерСтроки, ДлинаСлужебногоНомера - ДлинаНомераГрафы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РегламентированныйОтчетПрибыль.НомерЯчейки(
		ОписаниеПоказателя.НомерЛиста,
		ОписаниеПоказателя.НомерПриложения,
		НомерСтроки,
		НомерГрафы,
		ИмяРедакции);
	
КонецФункции

Функция ЭтоКонсолидируемыйРазделБРО(ОписаниеПоказателя, ИмяРедакции)
	
	// Консолидация разделов - это устаревшая технология, которая в актуальных редакциях формы не используется
	Если РегламентированныйОтчетПрибыль.ВерсияКонтейнера(ИмяРедакции) >= '2019-10-01' Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Под "консолидируемыми" понимаются страницы, для которых БРО ожидает получить данные заполнения,
	// несмотря на то, что в состав декларации они входить не должны.
	// Данные этих страниц в БРО будут просуммированы на Лист 02, а затем - очищены.
	
	// См. АвторасчетПослеАвтозаполнения в формах декларации
	
	Если ОписаниеПоказателя.НомерЛиста <> "02" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОписаниеПоказателя.НомерПриложения = "1"
		Или ОписаниеПоказателя.НомерПриложения = "2"
		Или ОписаниеПоказателя.НомерПриложения = "3";
	
КонецФункции

Процедура ВключитьКонсолидируемыеРазделыБРО(РазделыКонтейнера, ЗаполненныеСтраницы, КонтекстРасчета, ИмяРедакции)
	
	// Обход ошибки БРО: не везде учтено, что приложение 3 к Листу 02 - консолидируемый раздел.
	// При заполнении декларации по налогу на прибыль за некратное кварталу количество месяцев (например, за январь-август) 
	// не учитываются некоторые данные Приложения 3 к Листу 02.
	//
	// В таких декларациях "поверх" логики автозаполнения срабатывает и логика авторасчета, которая переносит данные с приложений к листу 02 на сам лист 02.
	// Это связано с тем, что приложения в состав декларации за такой период не включаются - включается только сам Лист 02.
	// См. комментарий в ЭтоКонсолидируемыйРазделБРО
	//
	// Код в ФормаОтчета2016Кв4 в ходе расчета устанавливает и снимает признак налогоплательщика для всех консолидируемых приложений
	// (см. РасчетВСтруктуре, ЗаполнитьАвтоНаСервере формы).
	// Однако, признак не заполняется корректно.
	// Это связано с тем, что
	// - данные Приложения 3 к Листу 02 включаются как в сам Лист 02, так и в Приложения 1 и 2 к Листу 02
	// - в БРО поддерживается ручное заполнение Приложений к Листу 02 в тех месяцах, когда эти приложения в состав декларации не включаются.
	//
	// Проблема устранена в следующих редакциях формы - см. ЭтоКонсолидируемыйРазделБРО
	
	Если ИмяРедакции <> "ФормаОтчета2016Кв4" Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстРасчета.НомерКвартала <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеРаздела Из ЗаполненныеСтраницы Цикл
		
		Если Не ЭтоКонсолидируемыйРазделБРО(ОписаниеРаздела.Значение, ИмяРедакции) Тогда
			Продолжить;
		КонецЕсли;
		
		РазделБРО = РазделыКонтейнера[ОписаниеРаздела.Ключ];
		ЗаполняемаяСтраница = ЗаполняемаяСтраницаБРО(РазделБРО);
		
		РегламентированныйОтчетПрибыль.ВключитьСтраницу(
			ЗаполняемаяСтраница,
			ОписаниеРаздела.Значение.НомерЛиста,
			ОписаниеРаздела.Значение.НомерПриложения,
			ИмяРедакции);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СуммаНУПоказателя(РассчитанныеЗначения, ИмяПоказателя, ВариантНО = Неопределено, ЭтапРасчета = "")
	
	Значение = РассчитанноеЗначение(РассчитанныеЗначения, ИмяПоказателя, ВариантНО, ЭтапРасчета);
	Если Значение = Неопределено Тогда
		Возврат Неопределено; // Нужно отличать показатели, для которых нет значения, от нуля
	Иначе
		Возврат Значение.СуммаНУ; // См. РасчетНалогаНаПрибыль.ОписаниеСуммНалоговыйУчет()
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеСтрокиДекларации(ОписаниеПоказателя, Краткое = Ложь)
	
	Если Краткое Тогда
		Шаблон = НСтр("ru = 'Строка %1 - ""%4""';
						|en = 'Line %1 - ""%4""'");
	ИначеЕсли ПустаяСтрока(ОписаниеПоказателя.НомерПриложения) Тогда
		Шаблон = НСтр("ru = 'Строка %1 листа %3 - ""%4""';
						|en = 'Line %1 of sheet %3 - ""%4""'");
	Иначе
		Шаблон = НСтр("ru = 'Строка %1 приложения %2 к листу %3 - ""%4""';
						|en = 'Line %1 of annex %2 to sheet %3 - ""%4""'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шаблон,
		ОписаниеПоказателя.НомерСтроки,
		ОписаниеПоказателя.НомерПриложения,
		ОписаниеПоказателя.НомерЛиста,
		ОписаниеПоказателя.Представление);
	
КонецФункции

Функция НовыйОписаниеРасшифровкиПоказателяБРО()

	
	Описание = Новый Структура;
	Описание.Вставить("Представление", "");
	Описание.Вставить("Действие",      Неопределено);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеПереходаПоказателяБРО(Откуда, Куда, ИмяРедакции)
	
	КраткоеПредставление =(Откуда.НомерЛиста = Куда.НомерЛиста И Откуда.НомерПриложения = Куда.НомерПриложения);
	
	Описание = НовыйОписаниеРасшифровкиПоказателяБРО();
	Описание.Представление = ПредставлениеСтрокиДекларации(Куда, КраткоеПредставление);
	Описание.Действие      = Новый Структура;
	Описание.Действие.Вставить("Отчет", Новый Структура);
	Описание.Действие.Отчет.Вставить("ИмяОтчета",      "ОбщаяФорма.РасшифровкаПоказателейРегламентированныхОтчетов");
	Описание.Действие.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	Описание.Действие.Отчет.ПараметрыФормы.Вставить(
		"ИДИменПоказателей",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НомерПоказателяБРО(Куда, ИмяРедакции)));
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеРасшифровкиПоказателяБРО(ЗаписьПротокола, СхемаРасчета)

	
	Если ЗаписьПротокола.ТипЗаписи = "Формула" Тогда
		
		// Эти показатели должны быть раскрыты - см. СократитьПротоколРасчетаДляРасшифровкиДекларации
		Возврат Неопределено;
		
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "Пропустить" Тогда

		
		// Должны быть уже пропущены - см. СократитьПротоколРасчетаДляРасшифровкиДекларации
		Возврат Неопределено;


		
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "Ограничение" Тогда
		
		// Это нетривиальная арифметическая операция, поэтому запись о ней выводим,
		// только если она фактически повлияла на результат расчета

		
		СуммаОграничения = ЗаписьПротокола.СуммаНУ;// См. РасчетНалогаНаПрибыль.ОписаниеСуммНалоговыйУчет()
		Если СуммаОграничения = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Описание = НовыйОписаниеРасшифровкиПоказателяБРО();
		Описание.Представление = ЗаписьПротокола.Описание;
		Возврат Описание;
		
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "Округление" Тогда
		
		// Это очевидная операция, которая по общему правилу выполняется.
		// Поэтому данные об округлении пропускаем, так, чтобы в итоге расшифровки было видно значение до округления.
		// Это позволит бухгалтеру убедиться, что округлено корректно.
		Возврат Неопределено;
		
	Иначе
		
		// "прикладные" типы записей
		Описание = НовыйОписаниеРасшифровкиПоказателяБРО();
		Описание.Представление = ЗаписьПротокола.Описание;
		Описание.Действие      = НастройкиОтчетаРасшифровкаЗначения(ЗаписьПротокола, СхемаРасчета);
		
		Возврат Описание;
		
	КонецЕсли;
	
КонецФункции

Функция РаскрытьСкобки(ОператорЗаСкобкой, ОператорВнутриСкобки)
	
	Если ОператорЗаСкобкой <> "-" Тогда
		Возврат ОператорВнутриСкобки;
	КонецЕсли;
	
	Если ОператорВнутриСкобки = "-" Тогда
		Возврат "+";
	Иначе
		Возврат "-";
	КонецЕсли;
	
КонецФункции

Процедура ПередатьСпискиБРО(РазделыКонтейнера, ДанныеСписков, СхемаСписков, ИмяРедакции, ВариантНО)
	
	Если РегламентированныйОтчетПрибыль.ВерсияКонтейнера(ИмяРедакции) < '2019-10-01' Тогда
		// Списки не поддерживаются в устаревших редакциях
		Возврат;

	КонецЕсли;
	
	Для Каждого ОписаниеСписка Из СхемаСписков Цикл
		
		ИмяРазделаБРО = РегламентированныйОтчетПрибыль.ИмяРаздела(
			ОписаниеСписка.НомерЛиста,
			ОписаниеСписка.НомерПриложения);
		
		Если Не РазделыКонтейнера.Свойство(ИмяРазделаБРО) Тогда
			Возврат;
		КонецЕсли;
		
		РазделБРО = РазделыКонтейнера[ИмяРазделаБРО];
		ЗаполняемаяСтраница = ЗаполняемаяСтраницаБРО(РазделБРО);
		
		ТаблицаДанных = ДанныеСписков[ОписаниеСписка.Имя];
		
		Если ТаблицаДанных.Колонки.Найти("ВариантНО") <> Неопределено Тогда
			ПараметрыОтбора = Новый Структура("ВариантНО", ВариантНО);
			ДанныеЗаполнения = ТаблицаДанных.Скопировать(ПараметрыОтбора);
		Иначе
			ДанныеЗаполнения = ТаблицаДанных;
		КонецЕсли;
		
		ДанныеМногострочнойЧасти = ДанныеМногострочнойЧасти(ДанныеЗаполнения, ОписаниеСписка);
		
		РегламентированныйОтчетПрибыль.УстановитьДанныеМногострочнойЧасти(
			ЗаполняемаяСтраница,
			ОписаниеСписка.КодФНС,
			ДанныеМногострочнойЧасти,
			ИмяРедакции);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеСтраницДекларацииИВариантовНО(ВариантыНО, КонтекстРасчета, ИмяРедакции)
	
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ВариантНО", Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	ТаблицаСоответствия.Колонки.Добавить("ПризнакНалогоплательщика", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаСоответствия.Колонки.Добавить("НомерСтраницы",            ОбщегоНазначения.ОписаниеТипаЧисло(2));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВариантыНалогообложенияПрибыли.Ссылка КАК ВариантНО,
		|	ВариантыНалогообложенияПрибыли.ПризнакНалогоплательщика КАК ПризнакНалогоплательщика
		|ИЗ
		|	Справочник.ВариантыНалогообложенияПрибыли КАК ВариантыНалогообложенияПрибыли
		|ГДЕ
		|	ВариантыНалогообложенияПрибыли.Ссылка В (&ВариантыНО)";
	
	Запрос.УстановитьПараметр("ВариантыНО", ВариантыНО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтрокаСоответствия = ТаблицаСоответствия.Добавить();
		СтрокаСоответствия.ПризнакНалогоплательщика = ?(РегламентированныйОтчетПрибыль.ВерсияКонтейнера(ИмяРедакции) < '2019-10-01', "1", "01");
		СтрокаСоответствия.ВариантНО                = КонтекстРасчета.ОсновнойВариантНО;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСоответствия.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСоответствия;
	
КонецФункции

Функция ЗаполняемаяСтраницаБРО(РазделБРО)
	
	Если ТипЗнч(РазделБРО) = Тип("СтрокаДереваЗначений") Или ТипЗнч(РазделБРО) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат РазделБРО;
	Иначе
		Возврат РазделБРО[0];
	КонецЕсли;
	
КонецФункции

Функция РазделыКонтейнера(Контейнер, ОписаниеФормыОтчета, ИмяРедакции, ИндексКомплектаСтраниц = 0)
	
	РазделыКонтейнера = Новый Структура;
	
	Для Каждого ОписаниеПоказателя Из ОписаниеФормыОтчета Цикл
		
		ИмяРазделаБРО = ИмяРазделаБРО(ОписаниеПоказателя);
		Если РазделыКонтейнера.Свойство(ИмяРазделаБРО) Тогда
			Продолжить;
		КонецЕсли;
		
		СтраницыРазделаКонтейнера = РегламентированныйОтчетПрибыль.СтраницыРазделаКонтейнера(
			Контейнер,
			ОписаниеПоказателя.НомерЛиста,
			ОписаниеПоказателя.НомерПриложения,
			ИндексКомплектаСтраниц,
			ИмяРедакции);
			
		Если СтраницыРазделаКонтейнера = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеПоказателя.НомерПриложения) Тогда
			РазделыКонтейнера.Вставить(ИмяРазделаБРО, СтраницыРазделаКонтейнера);
		Иначе
			РазделыКонтейнера.Вставить(ИмяРазделаБРО, СтраницыРазделаКонтейнера[ИндексКомплектаСтраниц]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазделыКонтейнера;
	
КонецФункции

Функция ДанныеМногострочнойЧасти(ДанныеСписка, ОписаниеСписка)
	
	ДанныеМногострочнойЧасти = Новый ТаблицаЗначений;
	
	// Инициализируем колонки
	
	ОписаниеКолонокМногострочнойЧасти = Новый Структура;
	Для Каждого ОписаниеКолонкиСписка Из ОписаниеСписка.Колонки Цикл
		
		Если ПустаяСтрока(ОписаниеКолонкиСписка.Значение.ИмяФНС) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеКолонкиСписка.Значение.Свойство("Тип") Тогда
			ЭтоСумма   = Ложь;
			ТипКолонки = ОписаниеКолонкиСписка.Значение.Тип;
		Иначе
			ЭтоСумма   = Истина;
			ТипКолонки = Новый ОписаниеТипов("Число");
		КонецЕсли;
		
		ДанныеМногострочнойЧасти.Колонки.Добавить(ОписаниеКолонкиСписка.Значение.ИмяФНС, ТипКолонки);
		
		ОписаниеКолонкиМногострочнойЧасти = Новый Структура;
		ОписаниеКолонкиМногострочнойЧасти.Вставить("ИмяФНС",   ОписаниеКолонкиСписка.Значение.ИмяФНС);
		ОписаниеКолонкиМногострочнойЧасти.Вставить("ЭтоСумма", ЭтоСумма);
		
		ОписаниеКолонокМногострочнойЧасти.Вставить(ОписаниеКолонкиСписка.Значение.Имя, ОписаниеКолонкиМногострочнойЧасти);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеСписка) Тогда
		Возврат ДанныеМногострочнойЧасти;
	КонецЕсли;
	
	// Копируем строки
	Для Каждого ДанныеСтроки Из ДанныеСписка Цикл
		
		НоваяСтрока = ДанныеМногострочнойЧасти.Добавить();
		
		Для Каждого ОписаниеКолонкиСписка Из ОписаниеКолонокМногострочнойЧасти Цикл
			
			Значение = ДанныеСтроки[ОписаниеКолонкиСписка.Ключ];
			
			Если ОписаниеКолонкиСписка.Значение.ЭтоСумма Тогда
				Значение = Значение.СуммаНУ; // См. РасчетНалогаНаПрибыль.ОписаниеСуммНалоговыйУчет()
			КонецЕсли;
			
			НоваяСтрока[ОписаниеКолонкиСписка.Значение.ИмяФНС] = Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеМногострочнойЧасти;
	
КонецФункции

Функция НомерМногострочногоПоказателяБРО(Показатель, ИндексСтроки, ИмяРедакции)

	ПрефиксНомера = НомерПоказателяБРО(Показатель, ИмяРедакции);
	Возврат СтрШаблон("%1_%2", ПрефиксНомера, XMLСтрока(ИндексСтроки + 1));
	
КонецФункции

Функция ПредставленияПоказателейСписков(СхемаРасчета)
	
	Представления = Новый Соответствие;
	
	Для Каждого ОписаниеСписка Из СхемаРасчета.Списки Цикл
		Для Каждого ОписаниеКолонки Из ОписаниеСписка.Колонки Цикл
			ИмяПоказателя = ИмяПоказателяКолонкаСписка(ОписаниеСписка.Имя, ОписаниеКолонки.Ключ);
			Представления.Вставить(ИмяПоказателя, ОписаниеКолонки.Значение.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Представления;
	
КонецФункции

Функция ПредставлениеМногострочнойСтрокиДекларации(Показатель, ИндексСтроки, ПредставленияПоказателейСписков)
	
	Представление = ПредставленияПоказателейСписков[Показатель.Имя];
	Если Представление = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Процедура ОчиститьВторичныеДанныеБРО(РазделыКонтейнера, ЗаполненныеСтраницы, СоставДекларации, ОписаниеФормыОтчета, ИмяРедакции)
	
	Если РегламентированныйОтчетПрибыль.ВерсияКонтейнера(ИмяРедакции) >= '2019-10-01' Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим вторичные данные на незаполненных страницах, не включаемых в состав декларации.
	// Это важно для БРО - в некоторых редакциях формы может привести к некорректному сообщению об ошибке
	ПоискРаздела = Новый Структура("НомерЛиста, НомерПриложения");
	Для Каждого Показатель Из ОписаниеФормыОтчета Цикл
		
		Если Показатель.ОсобенностьПредставления <> "ВторичныеДанные" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПоискРаздела, Показатель);
		ОписанияРазделов = СоставДекларации.НайтиСтроки(ПоискРаздела);
		Если Не ЗначениеЗаполнено(ОписанияРазделов) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРаздела = ОписанияРазделов[0];
		
		ИмяРазделаБРО = ИмяРазделаБРО(Показатель);
		
		Если ОписаниеРаздела.Обязательный Или ЗаполненныеСтраницы[ИмяРазделаБРО] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НомерЯчейкиБРО = НомерПоказателяБРО(Показатель, ИмяРедакции);
		РазделБРО = РазделыКонтейнера[ИмяРазделаБРО];
		ЗаполняемаяСтраница = ЗаполняемаяСтраницаБРО(РазделБРО);
		
		РегламентированныйОтчетПрибыль.ПоместитьЗначениеПоказателяНаСтраницу(ЗаполняемаяСтраница, НомерЯчейкиБРО, Неопределено);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область КоллекцииСумм

Процедура ОграничитьСверху(Суммы, Ограничения, ОписаниеКоллекций)
	// Min(Суммы,Ограничения)
	
	КоллекцииСумм.Ограничить(Суммы, Ограничения, ОписаниеКоллекций);
	
КонецПроцедуры

Процедура ОграничитьСнизу(Суммы, Ограничения, ОписаниеКоллекций)
	// Max(Суммы, Ограничения)
	
	// Для ограничения "снизу" применим ОграничитьСверху(), но поменяем знаки чисел.
	// Max(A,  B) = - (Min(-A,-B))
	// e.g.
	// Max(-2, 0) = - (Min(2,  0)) = - (0)  = 0
	// Max(2,  5) = - (Min(-2,-5)) = - (-5) = 5
	МинусЗначение = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекций);
	КоллекцииСумм.Вычесть(МинусЗначение, Суммы, ОписаниеКоллекций);
	
	МинусОграничение = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекций);
	КоллекцииСумм.Вычесть(МинусОграничение, Ограничения, ОписаниеКоллекций);
	
	КоллекцииСумм.Ограничить(МинусЗначение, МинусОграничение, ОписаниеКоллекций);
	
	Результат = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекций);
	КоллекцииСумм.Вычесть(Результат, МинусЗначение, ОписаниеКоллекций);
	
	КоллекцииСумм.Заполнить(Суммы, Результат, ОписаниеКоллекций);
	
КонецПроцедуры

Функция КоличествоНенулевыхЗначений(Коллекция, ОписаниеКоллекции)
	
	Результат = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекции);
	
	Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ОписаниеКоллекции) Цикл
		Если Коллекция[ИмяСвойства] <> 0 Тогда
			Результат[ИмяСвойства] = 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Списки

Функция ИмяПоказателяКолонкаСписка(ИмяСписка, ИмяПоказателя)
	
	Возврат СтрШаблон("[%1|%2]", ИмяСписка, ИмяПоказателя);
	
КонецФункции

Функция ИмяЗаписиПротоколаСтрокаСписка(ИмяСписка, ИмяКолонки, СтрокаСписка)
	
	ИмяПоказателя = ИмяПоказателяКолонкаСписка(ИмяСписка, ИмяКолонки);
	
	ИндексСтрокиСписка = СтрокаСписка.Владелец().Индекс(СтрокаСписка);
	Возврат СтрШаблон("%1[%2]", ИмяПоказателя, XMLСтрока(ИндексСтрокиСписка));
	
КонецФункции

Функция ЭтапРасчетаПоказателейСписка()
	
	Возврат "Все";
	
КонецФункции

Процедура УстановитьРезультатРасчетаСписок(ПроцессорПолученияДанных)
	
	Если Не ПроцессорПолученияДанных.ЭтоСписок Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессорПолученияДанных.РезультатРасчета.Списки.Вставить(
		ПроцессорПолученияДанных.ИмяАлгоритма,
		ПроцессорПолученияДанных.ДанныеСписка);
	
	КоличествоСтрокСписка = ПроцессорПолученияДанных.ДанныеСписка.Количество();
	
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		ИмяПоказателя = Задача.ОтборДанных.Показатель;
		
		Если ПроцессорПолученияДанных.КолонкиСумм.Найти(ИмяПоказателя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Задача.ОтборДанных.ИндексСтроки < 0 Тогда
			СтрокиСпискаПоЗадаче = ПроцессорПолученияДанных.ДанныеСписка;
		Иначе
			
			СтрокиСпискаПоЗадаче = Новый Массив;
			
			Если Задача.ОтборДанных.ИндексСтроки < КоличествоСтрокСписка Тогда
				СтрокиСпискаПоЗадаче.Добавить(ПроцессорПолученияДанных.ДанныеСписка[Задача.ОтборДанных.ИндексСтроки]);
			КонецЕсли;
				
			// Может потребоваться дополнить непоместившимися строками
			Если Задача.ОтборДанных.НепоместившиесяСтроки >= 0 Тогда
				Для ИндексСтроки = Задача.ОтборДанных.НепоместившиесяСтроки По КоличествоСтрокСписка - 1 Цикл
					СтрокиСпискаПоЗадаче.Добавить(ПроцессорПолученияДанных.ДанныеСписка[ИндексСтроки]);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокиСпискаПоЗадаче) Тогда
			Продолжить;
		КонецЕсли;
		
		Задача.ПротоколЗаполнен = Истина;
		
		Для Каждого СтрокаСписка Из СтрокиСпискаПоЗадаче Цикл
			
			Если Задача.ЭтапРасчета <> ЭтапРасчетаПоказателейСписка() Тогда
				// Сейчас все колонки списков могут использоваться только для одного этапа
				Продолжить;
			КонецЕсли;
			
			КоллекцииСумм.Сложить(Задача, СтрокаСписка[ИмяПоказателя], ПроцессорПолученияДанных.ОписаниеСумм);
			
			// Запись протокола
			
			ИмяЗаписиСтрокаСписка = ИмяЗаписиПротоколаСтрокаСписка(ПроцессорПолученияДанных.ИмяАлгоритма, ИмяПоказателя, СтрокаСписка);
			ПротоколПоказателя = ПроцессорПолученияДанных.ПротоколСписка[ИмяЗаписиСтрокаСписка];
			
			Если ПротоколПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ОбщаяЗаписьПротокола Из ПротоколПоказателя Цикл
				ЗаписьПротоколаЗадачи = ДобавитьЗаписьПротокола(
					ПроцессорПолученияДанных.РезультатРасчета,
					Задача.Показатель,
					Задача.ЭтапРасчета,
					ОбщаяЗаписьПротокола.ТипЗаписи,
					Задача.ВариантНО);
				ЗаполнитьЗначенияСвойств(ЗаписьПротоколаЗадачи, ОбщаяЗаписьПротокола, , "Показатель, ЭтапРасчета");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
