
////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПоказатьИнформациюоСроках() Экспорт
	
	ОткрытьФорму(
		"Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов.Форма.ФормаСрокиПредставления"
		,
		,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
Процедура ИзменитьСрокТребования(ТребованиеСсылка, ОповещениеЗавершения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура("Требование", ТребованиеСсылка);
	ОткрытьФорму(
		"Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов.Форма.ИзменениеСрокаТребования", 
		ПараметрыФормы, 
		, 
		Истина,
		,
		,
		ОповещениеЗавершения);
		
	
КонецПроцедуры

Процедура ОткрытьКалендарь(СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Календарь = ТребованияФНСВызовСервера.ПроизводственныйКалендарь();
	ПоказатьЗначение(, Календарь);
	
КонецПроцедуры

Процедура ПодтвердитьПриемНескольких(Сейчас, КонтекстЭДОКлиент, Организация = Неопределено ) Экспорт
	
	Есть = ТребованияФНСВызовСервера.ЕстьТребующиеПодтверждения(Организация)
		ИЛИ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЕстьТребующиеПодтвержденияТребованияСФР(
			Организация);
	
	Если Есть Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Сейчас", Сейчас);
		
		ОткрытьФорму(
			КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ГрупповоеПодтверждениеПриема",
			ПараметрыФормы,,,,,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Текст = НСтр("ru = 'По организаци %1 отсутствуют требования, прием которых нужно подтвердить';
						|en = 'По организаци %1 отсутствуют требования, прием которых нужно подтвердить'");
			Текст = СтрШаблон(Текст, Организация);
		Иначе
			Текст = НСтр("ru = 'Отсутствуют требования, прием которых нужно подтвердить';
						|en = 'Отсутствуют требования, прием которых нужно подтвердить'");
		КонецЕсли;
		ПоказатьПредупреждение(, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьСканыВОтветНаТребование(КонтекстЭДОКлиент, УникальныйИдентификатор, ОповещениеЗавершения, МножественныйВыбор = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьСканыВОтветНаТребование_ПослеВыбора", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПараметрыДобавления = ТребованияФНСКлиентСервер.ПараметрыВыбораФайловВОтветНаТребованиеДокументов(МножественныйВыбор);
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(
		ОписаниеОповещения, 
		УникальныйИдентификатор,
		,
		ПараметрыДобавления);
	
КонецПроцедуры

Процедура ДобавитьСканыВОтветНаТребованиеПоОписаниюФайлов(
		КонтекстЭДОКлиент, 
		УникальныйИдентификатор, 
		ОписаниеФайлов, 
		ОповещениеЗавершения) Экспорт
		
	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		ОписаниеФайла.Имя = ПроверитьИмяФайлаНаСимволы(КонтекстЭДОКлиент, ОписаниеФайла.Имя);
	КонецЦикла;
	
	ОбработкаФайловPDFВызовСервера.ОпределитьСвойстваPDFФайлов(ОписаниеФайлов);
	
	ОчиститьСообщения();
	ФайлыКОбработке = Новый Массив;
	Для каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		Если ОписаниеФайла.ЭтоPDFa3 
			И ТребованияФНСКлиентСервер.ЭтоФормат_ON_DOCNPNO_1_886_00_05_02() Тогда
			СообщитьОНедопустимостиЗагрузкиPDFA3ВСканы(ОписаниеФайла.Имя);
		Иначе
			ФайлыКОбработке.Добавить(ОписаниеФайла);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ФайлыКОбработке.Количество() = 0 Тогда
		НеВыполнено = ДокументооборотСКОКлиентСервер.НеВыполнено();
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, НеВыполнено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ДополнительныеПараметры.Вставить("ФайлыДоОбработки", ФайлыКОбработке);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьСканыВОтветНаТребование_ПослеОбработкиКартинок", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Требования = ТребованияФНСКлиентСервер.ТребованияКИзображениямОтветаНаТребованиеДокументов();
	
	ОперацииСФайламиЭДКОСлужебныйКлиент.ОбработатьКартинки(
		ОписаниеОповещения, 
		ФайлыКОбработке, 
		Требования, 
		УникальныйИдентификатор);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыбратьСканыВОтветНаТребование_ПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		НеВыполнено = ДокументооборотСКОКлиентСервер.НеВыполнено();
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеЗавершения, НеВыполнено);
		Возврат;
	КонецЕсли;
	
	ОписаниеФайлов = Результат.ОписанияФайлов;
	
	ДобавитьСканыВОтветНаТребованиеПоОписаниюФайлов(
		ВходящийКонтекст.КонтекстЭДОКлиент, 
		ВходящийКонтекст.УникальныйИдентификатор, 
		ОписаниеФайлов, 
		ВходящийКонтекст.ОповещениеЗавершения);
	
КонецПроцедуры
	
Функция ПроверитьИмяФайлаНаСимволы(КонтекстЭДОКлиент, ТекущееИмяФайла) Экспорт
	
	ИзмененоИмя = Ложь;
	НовоеИмя = ТекущееИмяФайла;
	
	РезультатПроверки = КонтекстЭДОКлиент.ПроверитьНеДопустимыеСимволыИмениФайла(ТекущееИмяФайла, "windows-1251");
	Если НЕ РезультатПроверки.Пройдена Тогда
		НовоеИмя = РезультатПроверки.НовоеИмя;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'В имени файла недопустимые символы.';
				|en = 'В имени файла недопустимые символы.'"), , 
			НСтр("ru = 'Произведена замена недопустимых символов.';
				|en = 'Произведена замена недопустимых символов.'"), , 
			СтатусОповещенияПользователя.Информация);
	КонецЕсли;
	
Возврат НовоеИмя;
	
КонецФункции

Процедура ВыбратьСканыВОтветНаТребование_ПослеОбработкиКартинок(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		НеВыполнено = ДокументооборотСКОКлиентСервер.НеВыполнено();
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеЗавершения, НеВыполнено);
		Возврат;
	КонецЕсли;
	
	ТребованияФНСВызовСервера.ВосстановитьСвойстваФайлов(Результат.ОписанияФайлов, ВходящийКонтекст.ФайлыДоОбработки);
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеЗавершения, Результат);
	
КонецПроцедуры

Процедура СообщитьОНедопустимостиЗагрузкиPDFA3ВСканы(Имя) Экспорт
	
	Ошибка = НСтр("ru = 'Файл ""%1"" имеет формат PDF/A-3 и, в соответствии с Приказом ФНС от 19 апреля 2023 г. №ЕД-7-26/263@, не может быть загружен и отправлен как сканированный документ.
                   |Для загрузки файла как сканированного документа сконвертируйте его в другой формат, например, сторонними программами. Разрешенные форматы: TIF, JPG, PNG, PDF (но не PDF/A-3).
                   |Если вы загружаете документы 1С-ЭДО, в форме ответа воспользуйтесь одним из пунктов:
                   |1. Если документы хранятся в текущей базе, то ""Выбрать из базы"" - ""Электронные документы 1С-ЭДО, 1С-Такском"".
                   |2. Если документы хранятся в другой базе, то ""Загрузить с диска"" - ""Документы из другой базы"". Предварительно выгрузите их из архива 1С-ЭДО другой базы по инструкции https://its.1c.ru/bmk/clientedodoc2/exp2fns.';
                   |en = 'Файл ""%1"" имеет формат PDF/A-3 и, в соответствии с Приказом ФНС от 19 апреля 2023 г. №ЕД-7-26/263@, не может быть загружен и отправлен как сканированный документ.
                   |Для загрузки файла как сканированного документа сконвертируйте его в другой формат, например, сторонними программами. Разрешенные форматы: TIF, JPG, PNG, PDF (но не PDF/A-3).
                   |Если вы загружаете документы 1С-ЭДО, в форме ответа воспользуйтесь одним из пунктов:
                   |1. Если документы хранятся в текущей базе, то ""Выбрать из базы"" - ""Электронные документы 1С-ЭДО, 1С-Такском"".
                   |2. Если документы хранятся в другой базе, то ""Загрузить с диска"" - ""Документы из другой базы"". Предварительно выгрузите их из архива 1С-ЭДО другой базы по инструкции https://its.1c.ru/bmk/clientedodoc2/exp2fns.'");
	
	Ошибка = СтрШаблон(Ошибка, Имя);
	ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Ошибка);
	
КонецПроцедуры

// Используется при вставке 1. значений в пояснение и 2. параметров в шаблон пояснения
Процедура ВставитьПараметр(Форма, Имя, Знач Значение) Экспорт
	
	ЭлементФормы  = Форма.Элементы[Имя];
	РеквизитФормы = Форма[Имя];
	
	ЗакладкаНачала = Неопределено;
	ЗакладкаОкончания = Неопределено;
	ЭлементФормы.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);

	ПозицияНачала    = РеквизитФормы.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
	ПозицияОкончания = РеквизитФормы.ПолучитьПозициюПоЗакладке(ЗакладкаОкончания);
	
	УдалитьВыделенныйЭлементДокумента(Форма, Имя, ЗакладкаНачала, ЗакладкаОкончания);
	Текст = СоздатьНовыйЭлементДокумента(РеквизитФормы, ЗакладкаНачала, Значение);
	
	ПозицияОкончания  = ПозицияНачала + СтрДлина(Текст);
	ЗакладкаОкончания = РеквизитФормы.ПолучитьЗакладкуПоПозиции(ПозицияОкончания);
	ЭлементФормы.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура УдалитьВыделенныйЭлементДокумента(Форма, Имя, ЗакладкаНачала, ЗакладкаОкончания) Экспорт
	
	ЭлементФормы  = Форма.Элементы[Имя];
	РеквизитФормы = Форма[Имя];
	
	Если ЗакладкаНачала <> ЗакладкаОкончания Тогда 
		РеквизитФормы.Удалить(ЗакладкаНачала, ЗакладкаОкончания);
		ЭлементФормы.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаНачала);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВставляемогоПараметра(Значение)
	
	Результат = Новый Структура();
	Результат.Вставить("Текст", "");
	Результат.Вставить("ЦветФона", Новый Цвет);
	
	Если ЗначениеЗаполнено(Значение.Значение) Тогда
		Результат.Текст = Значение.Значение;
		Результат.ЦветФона = Значение.ЦветФонаЗначения;
	ИначеЕсли ЗначениеЗаполнено(Значение.Замена) Тогда
		Результат.Текст = Значение.Замена;
		Результат.ЦветФона = Значение.ЦветФонаЗамены;
	Иначе
		// Обход ошибки платформы 60010487
		// 60010487 ФорматированныйДокумент.Вставить вернул Неопределено
		Результат.Текст = ТребованияФНСКлиентСервер.Подчерк();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СоздатьНовыйЭлементДокумента(РеквизитФормы, ЗакладкаНачала, Значение) Экспорт
	
	Результат   = ЗначениеВставляемогоПараметра(Значение);
	ТипЭлемента = Тип("ТекстФорматированногоДокумента");
	
	Если РеквизитФормы.Элементы.Количество() = 0 Тогда
		НовыйЭлементДокумента = РеквизитФормы.Добавить(Результат.Текст, ТипЭлемента);
	Иначе
		НовыйЭлементДокумента = РеквизитФормы.Вставить(ЗакладкаНачала, Результат.Текст, ТипЭлемента);
	КонецЕсли;
	
	НовыйЭлементДокумента.Шрифт = Новый Шрифт(НовыйЭлементДокумента.Шрифт, , , Истина, , );
	НовыйЭлементДокумента.ЦветФона = ТребованияФНСКлиентСервер.Оранжевый();
	
	Возврат Результат.Текст;
	
КонецФункции

Процедура ПересчитатьИтог(Форма, Таблица, ИмяКолонки, ИмяПоляИтога) Экспорт
	
	Итог = 0;
	Для каждого Строка Из Таблица Цикл
		Итог = Итог + Строка[ИмяКолонки];
	КонецЦикла;
	
	Форма[ИмяПоляИтога] = Итог;

КонецПроцедуры

Процедура ВставитьПериод(ОповещениеЗавершения) Экспорт
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = ТекущаяДата();
	Диалог.Период.ДатаОкончания = ТекущаяДата();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВставитьПериод_Завершение", 
		ЭтотОбъект, 
		ОповещениеЗавершения);
		
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВставитьПериод_Завершение(Период, ОповещениеЗавершения) Экспорт
	
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ФинансовыйПериод = РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(
		Период.ДатаНачала, 
		Период.ДатаОкончания);
		
	ФинансовыйПериод = НРег(ФинансовыйПериод);
	
	ВыполнитьОбработкуОповещения(ОповещениеЗавершения, ФинансовыйПериод);
	
КонецПроцедуры

Процедура ВыбратьИзСправочника(Форма, Элемент) Экспорт
	
	ИмяФормы  = ДлительнаяОтправкаКлиентСервер.ИмяФормыПоПолномуИмени(Форма.ИмяФормы);
	ИмяМакета = ИмяФормы + "_" + Элемент.Родитель.Имя;
	
	ВыбратьИзСправочникаПоМакету(Элемент, ИмяМакета);
		
КонецПроцедуры
	
Процедура ВыбратьИзСправочникаПоМакету(Элемент, ИмяМакета) Экспорт
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяПоля", Элемент.Имя);
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьИзСправочника_ПослеВыбора", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяМакета", ИмяМакета);
	
	ОткрытьФорму(
		"Справочник.ШаблоныПоясненийДляФНС.Форма.ВыборИзСправочника",
		ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
Процедура ВыбратьИзСправочника_ПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ВходящийКонтекст.ТекущиеДанные[ВходящийКонтекст.ИмяПоля] = Результат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоПометкаПриИзменении(ЭлементДерево) Экспорт
	
	СтрокаДерева = ЭлементДерево.ТекущиеДанные;
	
	ТребованияФНСКлиентСервер.ДеревоПометкаПриИзмененииПоСтроке(СтрокаДерева);
	
КонецПроцедуры

#КонецОбласти
