
#Область ПрограммныйИнтерфейс

// Процедура выполняет завершение редактирование элемента бюджетного отчета
//
// Параметры:
//  Форма - РасширениеУправляемойФормыДляОбъектов - форма элемента.
//  ДополнительныеСведения - Структура - дополнительные сведения для возврата в форму-владельца.
//
Процедура ЗавершитьРедактированиеЭлементаОтчета(Форма, ДополнительныеСведения = Неопределено) Экспорт
	
	Если Форма.ПроверитьЗаполнение() Тогда
		Если НЕ Форма.ТолькоПросмотр Тогда
			Форма.Записать();
			Форма.Модифицированность = Ложь;
		КонецЕсли;
		Структура = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
		ЗаполнитьЗначенияСвойств(Структура, Форма.Объект, , "ОперандыФормулы, РеквизитыВидаЭлемента");
		Если ЗначениеЗаполнено(ДополнительныеСведения) Тогда
			Для Каждого КлючИЗначение Из ДополнительныеСведения Цикл
				Структура.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		Форма.Закрыть(Структура);
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет новые операнды в текст формулы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма конструктора формул
//  НовыеОперанды - Массив из ДанныеФормыЭлементКоллекции - массив добавленных строк таблицы операндов:
//   *Идентификатор - Строка - Идентификатор операнда.
//
Процедура ДобавитьТекстФормулы(Форма, НовыеОперанды) Экспорт
	
	Для Каждого Операнд Из НовыеОперанды Цикл
		
		Идентификатор = Операнд.Идентификатор;
		
		Форма.Элементы.Формула.ВыделенныйТекст = "[" + Идентификатор + "]";
		
		НачалоСтроки = Неопределено; НачалоКолонки = Неопределено;
		КонецСтроки = Неопределено; КонецКолонки = Неопределено;
		Форма.Элементы.Формула.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ПозицияСтрокаНачало = Неопределено; ПозицияКолонкаНачало = Неопределено;
		ПозицияСтрокаКонец = Неопределено; ПозицияКолонкаКонец = Неопределено;
		Если ЕстьОткрывающийТэг(Форма.Формула, НачалоСтроки, НачалоКолонки, ПозицияСтрокаНачало, ПозицияКолонкаНачало)
			И ЕстьЗакрывающийТэг(Форма.Формула, НачалоСтроки, НачалоКолонки, ПозицияСтрокаКонец, ПозицияКолонкаКонец) Тогда
			
			НоваяФормула = "";
			
			ВыделитьСтрокаНачало = Неопределено; ВыделитьКолонкаНачало = Неопределено;
			ВыделитьСтрокаКонец = Неопределено; ВыделитьКолонкаКонец = Неопределено;
			Для Сч = 1 По СтрЧислоСтрок(Форма.Формула) Цикл
				Если Сч > 1 Тогда
					НоваяФормула = НоваяФормула + Символы.ПС;
				КонецЕсли;
				СтрокаФормулы = СтрПолучитьСтроку(Форма.Формула, Сч);
				Если Сч < ПозицияСтрокаНачало Тогда
					НоваяФормула = НоваяФормула + СтрокаФормулы;
				ИначеЕсли Сч = ПозицияСтрокаНачало Тогда
					НоваяФормула = НоваяФормула + 
									Лев(СтрокаФормулы, ПозицияКолонкаНачало - 1) + 
									"[" + Идентификатор + "]";
					ВыделитьСтрокаНачало = Сч;
					ВыделитьКолонкаНачало = ПозицияКолонкаНачало;
					ВыделитьКолонкаКонец = ПозицияКолонкаНачало + СтрДлина(Идентификатор);
				КонецЕсли;
				Если Сч > ПозицияСтрокаКонец Тогда
					НоваяФормула = НоваяФормула + СтрокаФормулы;
				ИначеЕсли Сч = ПозицияСтрокаКонец Тогда
					НоваяФормула = НоваяФормула + Сред(СтрокаФормулы, ПозицияКолонкаКонец + 1);
					ВыделитьСтрокаКонец = Сч;
				КонецЕсли;
			КонецЦикла;
			
			Форма.Формула = НоваяФормула;
			Форма.Элементы.Формула.УстановитьГраницыВыделения(ВыделитьСтрокаНачало, ВыделитьКолонкаНачало, ВыделитьСтрокаКонец, ВыделитьКолонкаКонец);
			
		КонецЕсли;
		
		Если НЕ Форма.Модифицированность Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ

// Возвращает структуру параметров установки нового родителя.
//
// Возвращаемое значение:
// 	Структура - Структура параметров установки нового родителя.
//
Функция ШаблонПараметровУстановкиНовогоРодителя() Экспорт
	
	ШаблонПараметров = Новый Структура;
	ШаблонПараметров.Вставить("ЭтоСохраненные", Ложь);
	ШаблонПараметров.Вставить("КонтрольЗацикливания", Истина);
	ШаблонПараметров.Вставить("ИдентификаторФормы", Неопределено);
	ШаблонПараметров.Вставить("Копирование", Ложь);
	ШаблонПараметров.Вставить("ПараметрыИдентификаторов", Неопределено);
	
	Возврат ШаблонПараметров;
	
КонецФункции

// Переносит строку и все ее подчиненные элементы в новую ветку дерева.
//
//	Параметры:
//		ТекущаяСтрока - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - строка дерева элементов отчета
//		НовыйРодитель - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - новая родительская ветка дерева элементов отчета
//		ПараметрыУстановкиРодителя - Структура - Структура параметров со свойствами:
//			*ЭтоСохраненные - Булево - флаг показывающий, что это строки дерева сохраненных элементов
//			*КонтрольЗацикливания - Булево - флаг определяющий выполнение контроля зацикливания строк
//			*ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы во временной хранилище 
//			                                               которой необходимо поместить данные элемента.
//			*Копирование - Булево - Флаг копирования элемента.
//			*ПараметрыИдентификаторов - Структура - Структура, содержащая параметры идентификаторов.
//
Процедура УстановитьНовогоРодителяЭлементаФормы(ТекущаяСтрока, НовыйРодитель, ПараметрыУстановкиРодителя) Экспорт
	
	ЭтоСохраненные = ПараметрыУстановкиРодителя.ЭтоСохраненные;
	КонтрольЗацикливания = ПараметрыУстановкиРодителя.КонтрольЗацикливания;
	ИдентификаторФормы = ПараметрыУстановкиРодителя.ИдентификаторФормы;
	Копирование = ПараметрыУстановкиРодителя.Копирование;
	ПараметрыИдентификаторов = ПараметрыУстановкиРодителя.ПараметрыИдентификаторов;
	
	Если КонтрольЗацикливания Тогда
		Родитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(НовыйРодитель);
		Пока Родитель <> Неопределено Цикл
			Если ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") И Родитель.ПолучитьИдентификатор() = ТекущаяСтрока.ПолучитьИдентификатор()
				ИЛИ ЗначениеЗаполнено(Родитель.ЭлементОтчета) И Родитель.ЭлементОтчета = ТекущаяСтрока.ЭлементОтчета
				ИЛИ ЗначениеЗаполнено(Родитель.АдресСтруктурыЭлемента) И Родитель.АдресСтруктурыЭлемента = ТекущаяСтрока.АдресСтруктурыЭлемента Тогда
				Возврат;
			КонецЕсли;
			Родитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(Родитель);
		КонецЦикла;
	КонецЕсли;
	
	СтрокиРодителя = ПодчиненныеСтрокиЭлементаФормы(НовыйРодитель);
	Если ЭтоСохраненные Тогда
		НоваяСтрока = СтрокиРодителя.Добавить();
	Иначе
		Индекс = ФинансоваяОтчетностьКлиентСервер.ИндексНовойСтроки(СтрокиРодителя);//если в конце группы есть итог по группе, то новая строка должна встать перед ним
		НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	Если ПараметрыИдентификаторов <> Неопределено Тогда
		СоответствиеИдентификаторов = ПараметрыИдентификаторов.СоответствиеИдентификаторов;
		Если ПараметрыИдентификаторов.Режим = "Запомнить" Тогда
			СоответствиеИдентификаторов.Вставить(ТекущаяСтрока.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор());
		ИначеЕсли ПараметрыИдентификаторов.Режим = "Восстановить" Тогда
			НоваяСтрока.ИндексСтрокиЭлементовОтчета = СоответствиеИдентификаторов[НоваяСтрока.ИндексСтрокиЭлементовОтчета];
			Для Сч = 2 По ПараметрыИдентификаторов.КоличествоИдентификаторов Цикл
				Если НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = 
					СоответствиеИдентификаторов[НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч]];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторФормы <> Неопределено Тогда
		Если Копирование Тогда
			
			Если ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента) Тогда
				НоваяСтрока.АдресСтруктурыЭлемента = 
					ФинансоваяОтчетностьВызовСервера.СкопироватьЭлементПоАдресу(
						НоваяСтрока.АдресСтруктурыЭлемента, ИдентификаторФормы);
						
			ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента)
					И ЗначениеЗаполнено(НоваяСтрока.ЭлементОтчета) Тогда
			
				НоваяСтрока.АдресСтруктурыЭлемента = 
					ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
						НоваяСтрока.ЭлементОтчета, ИдентификаторФормы, Истина);
			КонецЕсли;
			
			НоваяСтрока.ЭлементОтчета = Неопределено;
		
		ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента)
			И ЗначениеЗаполнено(НоваяСтрока.ЭлементОтчета) Тогда
			
			НоваяСтрока.АдресСтруктурыЭлемента = 
				ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
					НоваяСтрока.ЭлементОтчета, ИдентификаторФормы);
		
		КонецЕсли;
	КонецЕсли;
	
	СтрокиТекущейСтроки = ПодчиненныеСтрокиЭлементаФормы(ТекущаяСтрока);
	Сч = СтрокиТекущейСтроки.Количество();
	
	Пока Сч > 0 Цикл
		
		НомерСтроки = СтрокиТекущейСтроки.Количество() - Сч;
		Подстрока = СтрокиТекущейСтроки[НомерСтроки];
		ПараметрыУстановкиРодителя = ШаблонПараметровУстановкиНовогоРодителя();
		ПараметрыУстановкиРодителя.ЭтоСохраненные = ЭтоСохраненные;
		ПараметрыУстановкиРодителя.КонтрольЗацикливания = Ложь;
		ПараметрыУстановкиРодителя.ИдентификаторФормы = ИдентификаторФормы;
		ПараметрыУстановкиРодителя.Копирование = Копирование;
		ПараметрыУстановкиРодителя.ПараметрыИдентификаторов = ПараметрыИдентификаторов;
		УстановитьНовогоРодителяЭлементаФормы(Подстрока, НоваяСтрока, ПараметрыУстановкиРодителя);
		Сч = Сч - 1;
		
	КонецЦикла;
	
	Если Не Копирование Тогда
		ТекущийРодитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(ТекущаяСтрока);
		Если ТекущийРодитель <> Неопределено Тогда
			ТекущаяКоллекцияСтрок = ПодчиненныеСтрокиЭлементаФормы(ТекущийРодитель);
			ТекущаяКоллекцияСтрок.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Находит ближайший вверх по иерархии родительский элемент заданного вида.
// Параметры:
//	Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева - элемент дерева для которого необходимо определить родительский элемент
//					если заданно дерево то результат будет определяться среди подчиненных строк первого уровня.
//	ВидКорневогоЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - вид родителя.
//
//	Возвращаемое значение:
//		ДанныеФормыЭлементДерева - корневой элемент.
//		СтрокаДереваЗначений - корневой элемент.
//
Функция КорневойЭлементЭлементаФормы(Дерево, ВидКорневогоЭлемента = Неопределено) Экспорт
	
	Если ВидКорневогоЭлемента = Неопределено Тогда
		ВидКорневогоЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка");
	КонецЕсли;
	
	КорневойЭлемент = Неопределено;
	Если ТипЗнч(Дерево) = Тип("ДанныеФормыДерево") Тогда
		ПодчиненныеСтроки = ПодчиненныеСтрокиЭлементаФормы(Дерево);
		Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
			Если СтрокаДерева.ВидЭлемента = ВидКорневогоЭлемента Тогда
				КорневойЭлемент = СтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(Дерево);
		Пока КорневойЭлемент <> Неопределено Цикл
			Если КорневойЭлемент.ВидЭлемента = ВидКорневогоЭлемента Тогда
				Прервать;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(КорневойЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КорневойЭлемент;
	
КонецФункции

//-- НЕ УТ

// Возвращает в зависимости от типа, коллекцию подчиненных элементов первого уровня переданной строки дерева элементов отчета.
//
//	Параметры:
//		СтрокаДерева - ДанныеФормыЭлементДерева, СтрокаДереваЗначений, КоллекцияСтрокДереваЗначений, ДанныеФормыДерево - строка дерева элементов отчета.
//
//	Возвращаемое значение:
//		ДанныеФормыКоллекцияЭлементовДерева - коллекция подчиненных строк.
//		КоллекцияСтрокДереваЗначений - коллекция подчиненных строк.
//
Функция ПодчиненныеСтрокиЭлементаФормы(СтрокаДерева) Экспорт
	
	ТипСтрокиДерева = ТипЗнч(СтрокаДерева);
	ЭтоКоллекцияСтрок = ТипСтрокиДерева = Тип("ДанныеФормыКоллекцияЭлементовДерева");
	
	Если ЭтоКоллекцияСтрок Тогда
		ПодчиненныеСтроки = СтрокаДерева;
	Иначе
		Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
			ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
			ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПодчиненныеСтроки;
	
КонецФункции

// Находит ближайший вниз по иерархии элемент по значению заданного реквизита.
//
// Параметры:
//	Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева - элемент дерева или строка дерева в котором необходимо произвести поиск
//	ИмяРеквизита - Строка - имя реквизита дерева значение которого сравнивается с заданным для поиска
//	ЗначениеРеквизита - Произвольный - значение реквизита дерева которое необходимо найти.
//
// Возвращаемое значение:
//	ДанныеФормыЭлементДерева, СтрокаДереваЗначений - подчиненный элемент.
//
Функция ПодчиненныйЭлементЭлементаФормы(Дерево, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	ПодчиненныйЭлемент = Неопределено;
	ПодчиненныеСтроки = ПодчиненныеСтрокиЭлементаФормы(Дерево);
	Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
		Если СтрокаДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда
			ПодчиненныйЭлемент = СтрокаДерева;
			Прервать;
		КонецЕсли;
		ПодчиненныйЭлемент = ПодчиненныйЭлементЭлементаФормы(СтрокаДерева, ИмяРеквизита, ЗначениеРеквизита);
		Если ПодчиненныйЭлемент <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодчиненныйЭлемент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьОткрывающийТэг(Формула, НомерСтроки, НомерКолонки, НовыйНомерСтроки = Неопределено, НовыйНомерКолонки = Неопределено)
	
	ЕстьОткрывающийТэг = Ложь;
	Для СчетчикСтрок = 1 По НомерСтроки Цикл
		СтрокаПоНомеру = СтрПолучитьСтроку(Формула, СчетчикСтрок);
		Если СчетчикСтрок = НомерСтроки Тогда
			Конец = НомерКолонки;
		Иначе
			Конец = СтрДлина(СтрокаПоНомеру);
		КонецЕсли;
		Для СчетчикКолонок = 1 По Конец Цикл
			Если Сред(СтрокаПоНомеру, СчетчикКолонок, 1) = "<" Тогда
				ЕстьОткрывающийТэг = Истина;
				НовыйНомерСтроки = СчетчикСтрок;
				НовыйНомерКолонки = СчетчикКолонок;
			КонецЕсли;
			Если Сред(СтрокаПоНомеру, СчетчикКолонок, 1) = ">" Тогда
				ЕстьОткрывающийТэг = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЕстьОткрывающийТэг;
			
КонецФункции

Функция ЕстьЗакрывающийТэг(Формула, НомерСтроки, НомерКолонки, НовыйНомерСтроки = Неопределено, НовыйНомерКолонки = Неопределено)
	
	Для НовыйНомерСтроки = НомерСтроки По СтрЧислоСтрок(Формула) Цикл
		СтрокаПоНомеру = СтрПолучитьСтроку(Формула, НовыйНомерСтроки);
		Если НовыйНомерСтроки = НомерСтроки Тогда
			Начало = НомерКолонки;
		Иначе
			Начало = 1;
		КонецЕсли;
		Для НовыйНомерКолонки = Начало По СтрДлина(СтрокаПоНомеру) Цикл
			Строка = СтрокаПоНомеру;
			Если Сред(Строка, НовыйНомерКолонки, 1) = "<" Тогда
				Возврат Ложь; // ищем первый закрывающий тэг
			КонецЕсли;
			Если Сред(Строка, НовыйНомерКолонки, 1) = ">" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
			
КонецФункции

#КонецОбласти

