// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ФормыДокументовИС

Процедура ПослеЗаписиВФормеОбъектаДокументаИС(Форма, Объект, ИмяПодсистемы, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Свойство("ПредыдущийДокументОснование")
	 И ПараметрыЗаписи.ПредыдущийДокументОснование <> Объект.ДокументОснование Тогда
		
		ПараметрыЗаписи.Вставить("Основание", ПараметрыЗаписи.ПредыдущийДокументОснование);
		
		Оповестить(
			ОбменДаннымиИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма),
			ПараметрыЗаписи,
			Объект.Ссылка);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДокументОснование") Тогда
		ПараметрыЗаписи.Вставить("Основание", Объект.ДокументОснование);
	КонецЕсли;
	
	Оповестить(
		ОбменДаннымиИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма),
		ПараметрыЗаписи,
		Объект.Ссылка);
	
КонецПроцедуры

Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки) Экспорт
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СброситьСохраненныеДанныеВыбораПоМаркируемойПродукции" Тогда
		
		Форма.СохраненВыборПоМаркируемойПродукции = Ложь;
		Форма.ДанныеВыбораПоМаркируемойПродукции  = Неопределено;
		ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
		Форма.Модифицированность = Истина;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНоменклатуру" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Номенклатура);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьХарактеристику" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Характеристика);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСерию" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Серия);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьШаблонЭтикетки" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.ШаблонЭтикетки);
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуУказанияНоменклатуры(ФормаВладелец, ОповещениеОЗавершении, ВидыПродукцииИС) Экспорт
	
	ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.БазовыеПараметрыСканирования();
	ПараметрыСканирования.ДопустимыеВидыПродукции = ВидыПродукцииИС;
	ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара = Ложь;
	ПараметрыОткрытияФормыУточненияДанных.ПараметрыСканирования = ПараметрыСканирования;
	ОткрытьФорму(
		"ОбщаяФорма.ФормаУточненияДанныхИС",
		ПараметрыОткрытияФормыУточненияДанных, ФормаВладелец,,,,
		ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ФормыДокументовОснований

Функция ОбработкаОповещенияВФормеДокументаОснования(Форма, Объект, ИмяСобытия, Параметр, Источник) Экспорт
	
	СобытиеОбработано = Ложь;
	ИнтегрируемыеПодсистемы = ИнтеграцияИСКлиентСервер.ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма);
	
	Если НЕ ЗначениеЗаполнено(ИнтегрируемыеПодсистемы) Тогда
		Возврат СобытиеОбработано;
	КонецЕсли;
	
	// Вызовем обработки оповещения всех подсистем.
	Для Каждого КлючИЗначение Из ИнтегрируемыеПодсистемы Цикл
		
		ИмяПодсистемы = КлючИЗначение.Ключ;
		
		Если НЕ ИнтеграцияИСКлиентСервер.ЭтоИмяСобытияОповещения(ИмяСобытия, ИмяПодсистемы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодсистемаСуществует(ИмяПодсистемы) Тогда
			
			МодульИнтеграцииКлиент = ОбщийМодуль(ИмяПодсистемы);
			
			МестоВызова = Новый Структура;
			МестоВызова.Вставить("Форма", Форма);
			МестоВызова.Вставить("Объект", Объект);
			
			Событие = Новый Структура;
			Событие.Вставить("Имя",        ИмяПодсистемы);
			Событие.Вставить("Параметр",   Параметр);
			Событие.Вставить("Источник",   Источник);
			Событие.Вставить("Обработано", Ложь);
			
			МодульИнтеграцииКлиент.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие);
			
		КонецЕсли;
		
		Если Событие.Обработано Тогда
			СобытиеОбработано = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СобытиеОбработано;
	
КонецФункции

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснования(Форма, Объект,
			Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СобытиеОбработано = Ложь;
	ИнтегрируемыеПодсистемы = ИнтеграцияИСКлиентСервер.ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма);
	
	Если НЕ ЗначениеЗаполнено(ИнтегрируемыеПодсистемы) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим имя подсистемы по имени элемента управления.
	//  Поскольку элемент управления есть и ведет сюда считаем что подсистема установлена
	ИмяПодсистемы = ИмяИнтегрируемойПодсистемыПоИмениЭлементаФормы(ИнтегрируемыеПодсистемы, Элемент);
	
	Если НЕ ИнтеграцияИСКлиентСервер.ЭтоИмяКомандыНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, ИмяПодсистемы) Тогда
		
		// Имя команды сформировано не функцией ИнтеграцияИСКлиентСервер.ИмяКоманды...()
		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное имя команды навигационной ссылки: ""%1""';
				|en = 'Некорректное имя команды навигационной ссылки: ""%1""'"),
			НавигационнаяСсылкаФорматированнойСтроки);
		
		ВызватьИсключение ОбщегоНазначенияИСКлиентСервер.ТекстОшибки(ПредставлениеПодсистемы(ИмяПодсистемы), УточнениеОшибки); // некорректное имя команды навигационной ссылки
		
	КонецЕсли;
	
	// Вызовем обработку навигационной ссылки подсистемы.
	МодульИнтеграцииКлиент = ОбщийМодуль(ИмяПодсистемы);
	МодульИнтеграцииКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		Форма,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		СобытиеОбработано);
	
КонецПроцедуры

Процедура ОбновитьПолеИнтеграцииВФормеДокументаОснования(Форма, Подсистема) Экспорт
	
	ИмяРеквизитаОбъект = Форма.ПараметрыИнтеграцииГосИС.Получить(Подсистема.Имя).ИмяРеквизитаФормыОбъект;
	
	ТекстНадписи = "";
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(СтрШаблон("%1.ДокументОснование", Подсистема.Имя));
	Если ПараметрыИнтеграции <> Неопределено И ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяРеквизитаФормы) Тогда
		ИмяРеквизитаФормы = ПараметрыИнтеграции.ИмяРеквизитаФормы;
		ТекстНадписи = Подсистема.МодульВызовСервера.ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Форма[ИмяРеквизитаОбъект].Ссылка);
		Форма[ИмяРеквизитаФормы] = ТекстНадписи;
		Если ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяЭлементаФормы) Тогда
			Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормы].Видимость = ЗначениеЗаполнено(ТекстНадписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// Функция проверяет необходимость обновления статусов серий в строке.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма документа, в которой инициировано указание серий;
//  Элемент                - ТаблицаФормы     - таблица формы, отображающая ТЧ товаров;
//  КэшированныеЗначения   - Произвольный     - кэшированные значения формы;
//  ПараметрыУказанияСерий - Структура        - параметры указания серий таблицы;
//  Удаление               - Булево           - признак удаления строки
// 
// Возвращаемое значение:
//  Булево - необходимо обновить статусы серий.
//
Функция НеобходимоОбновитьСтатусыСерий(Форма, Элемент, КэшированныеЗначения, ПараметрыУказанияСерий = "", Удаление = Ложь) Экспорт
	
	Обновить = Ложь;
	ИнтеграцияИСКлиентПереопределяемый.УстановитьОбновитьСтатусыСерий(Обновить, Форма, Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Удаление);
	Возврат Обновить;
	
КонецФункции

Процедура ОткрытьПодборСерий(Форма, ПараметрыУказанияСерий = "", Текст, СтандартнаяОбработка, ТекущиеДанные = Неопределено) Экспорт
	
	ПодборНеВыполнен = Ложь;

	ИнтеграцияИСКлиентПереопределяемый.ЗаполнитьДляУказанияСерийНуженСерверныйВызов(
		ПодборНеВыполнен,
		Форма,
		?(ПараметрыУказанияСерий = "",Форма.ПараметрыУказанияСерий, ПараметрыУказанияСерий),
		Текст,
		ТекущиеДанные,
		СтандартнаяОбработка);
	
	Если ПодборНеВыполнен Тогда
		
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - 
			| в этом документе для указания серий нужен контекстный серверный вызов.';
			|en = 'Ошибка при попытке указать серии - 
			| в этом документе для указания серий нужен контекстный серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Возвращает Истина если источник выбора - форма указания серии. Переводит выбранное значение в вид Структура, с ключем
//  Значение содержащим серию
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - проверяемая форма
//  ВыбранноеЗначение - Произвольный - результат указания серии до модификации
// 
// Возвращаемое значение:
//  Булево - Это форма указания серий
Функция ЭтоФормаУказанияСерий(Форма, ВыбранноеЗначение) Экспорт
	
	ЭтоФормаУказанияСерий = Ложь;
	ИнтеграцияИСКлиентПереопределяемый.ЗаполнитьЭтоФормаУказанияСерий(ЭтоФормаУказанияСерий, Форма, ВыбранноеЗначение);
	Возврат ЭтоФормаУказанияСерий;
	
КонецФункции

// Возвращает параметры указания серий формы конфигурации.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо получить параметры указания серий
// 
// Возвращаемое значение:
//  Произвольный - параметры указания серий формы
Функция ПараметрыУказанияСерий(Форма) Экспорт
	
	ПараметрыУказанияСерий = Неопределено;
	ИнтеграцияИСКлиентПереопределяемый.ПриПолученииПараметровУказанияСерий(ПараметрыУказанияСерий, Форма);
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Показывает оповещение пользователя об окончании заполнения серий.
//
// Параметры:
//	СерииЗаполнены - Булево - Признак успешного заполнения серий (Истина).
//	СписокОшибок   - Массив Из см. ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю.Ошибки, Неопределено	- Список ошибок.
//
Процедура ОповеститьОбОкончанииЗаполненияСерийВДокументе(СерииЗаполнены, СписокОшибок) Экспорт
	
	ОчиститьСообщения();
	
	Если СерииЗаполнены Тогда
		Текст     = НСтр("ru = 'Серии заполнены';
						|en = 'Серии заполнены'");
		Пояснение = НСтр("ru = 'Серии заполнены';
						|en = 'Серии заполнены'");
		
		ПоказатьОповещениеПользователя(Текст, , Пояснение, БиблиотекаКартинок.Информация32ГосИС);
	Иначе
		Текст     = НСтр("ru = 'Серии не заполнены';
						|en = 'Серии не заполнены'");
		Пояснение = НСтр("ru = 'Не удалось заполнить серии';
						|en = 'Не удалось заполнить серии'");
		
		ПоказатьОповещениеПользователя(Текст, , Пояснение, БиблиотекаКартинок.Информация32ГосИС);
		
		Если СписокОшибок = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'В табличной части нет товаров, по которым нужно заполнить серии.';
										|en = 'В табличной части нет товаров, по которым нужно заполнить серии.'");
			
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВСпискахДокументов

// Заполняет массив распоряжений по которым должен быть установлен архивный статус оформления и отдает для архивирования
//
// Параметры:
//   Форма              - ФормаКлиентскогоПриложения - источник данных команды
//   ДинамическийСписок - ТаблицаФормы     - динамический список распоряжений на форме
//   МодульОбработки    - ОбщийМодуль      - обработчик архивирования
//   ПустаяСсылка       - ДокументСсылка   - пустой документ ГосИС (источник данных "Документ")
//   Колонка            - Строка           - имя колонки "Документ-основание" (источник данных "Основание")
//
Процедура АрхивироватьРаспоряжения(Форма, ДинамическийСписок, МодульОбработки, ПустаяСсылка, Колонка = "ДокументОснование") Экспорт
	
	ОчиститьСообщения();
	
	Если Не ОбщегоНазначенияИСКлиент.ВыборСтрокиСпискаКорректен(ДинамическийСписок) Тогда
		Возврат;
	КонецЕсли;
	
	Распоряжения = ОбщегоНазначенияИСКлиент.ВыделенныеЭлементыСпискаБезГрупп(ДинамическийСписок, Колонка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Распоряжения", Распоряжения);
	ДополнительныеПараметры.Вставить("ПустаяСсылка", ПустаяСсылка);
	// Используется в механизме оповещений
	ДополнительныеПараметры.Вставить("Контекст",                ДинамическийСписок);
	ДополнительныеПараметры.Вставить("ДальнейшееДействие",      НСтр("ru = 'Архивирование распоряжений на оформление';
																	|en = 'Архивирование распоряжений на оформление'"));
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
	ДополнительныеПараметры.Вставить("ИдентификаторВладельца",  Форма.УникальныйИдентификатор);
	
	//@skip-warning одноименные обработчики архивирования ГосИС
	ПоказатьВопрос(
		Новый ОписаниеОповещения("АрхивироватьРаспоряжения", МодульОбработки, ДополнительныеПараметры),
		НСтр("ru = 'Подтвердите действие: по выделенным документам не требуется оформление документов';
			|en = 'Подтвердите действие: по выделенным документам не требуется оформление документов'"),
		РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

// Открывает распоряжение из списка документов к оформлению
//
// Параметры:
//   ДинамическийСписок   - ТаблицаФормы - динамический список распоряжений на форме
//   СтандартнаяОбработка - Булево       - признак стандартной обработки выбора
//   Колонка              - Строка       - имя колонки "Документ-основание" (источник данных "Основание")
//
Процедура ОткрытьРаспоряжение(ДинамическийСписок, СтандартнаяОбработка, Колонка = "ДокументОснование") Экспорт
	
	ОчиститьСообщения();
	
	Если Не ОбщегоНазначенияИСКлиент.ВыборСтрокиСпискаКорректен(ДинамическийСписок, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = ДинамическийСписок.ТекущиеДанные;
	ПоказатьЗначение( ,ТекущиеДанные[Колонка]);
	
КонецПроцедуры

// Открывает отчет о расхождениях при оформлении распоряжение из списка документов к оформлению
//
// Параметры:
//   ДинамическийСписок   - ТаблицаФормы - динамический список распоряжений на форме
//   ИмяОтчета            - Строка       - имя открываемого отчета
//   Колонка              - Строка       - имя колонки "Документ-основание" (источник данных "Основание")
//
Процедура ОткрытьОтчетОРасхожденияхИзРаспоряжений(ДинамическийСписок, ИмяОтчета, Колонка = "ДокументОснование") Экспорт
	
	ОчиститьСообщения();
	
	Если Не ОбщегоНазначенияИСКлиент.ВыборСтрокиСпискаКорректен(ДинамическийСписок) Тогда
		Возврат;
	КонецЕсли;
	
	Распоряжения = ОбщегоНазначенияИСКлиент.ВыделенныеЭлементыСпискаБезГрупп(ДинамическийСписок, Колонка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ДокументОснование", Распоряжения));
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму(СтрШаблон("Отчет.%1.Форма", ИмяОтчета), ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаКодовМаркировки

// Открывает форму загрузки кодов маркировки из таблицы.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма источник события.
// 	ДоступнаИерархия - Булево - Признак доступности иерархии.
// 	Заголовок - Строка - Заголовок открываемой формы.
//
Процедура ОткрытьФормуЗагрузкиКодовМаркировки(Форма, ДоступнаИерархия, Заголовок) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",               Заголовок);
	ПараметрыОткрытия.Вставить("ИспользоватьКодУпаковки", ДоступнаИерархия);
	
	ОткрытьФорму("ОбщаяФорма.ЗагрузкаКодовМаркировкиИС", ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Возвращает признак того, что владелец формы является формой загрузки кодов маркировки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма-источник события.
// 	Владелец - ФормаКлиентскогоПриложения - владелец формы для проверки.
// Возвращаемое значение:
// 	Булево - Признак формы загрузки кодов маркировки.
//
Функция ЭтоЗагрузкаКодовМаркировки(Форма, Владелец) Экспорт
	
	Возврат ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения")
		И Форма.ИмяФормы = "ОбщаяФорма.ЗагрузкаКодовМаркировкиИС"
		И Форма.ВладелецФормы = Владелец;
	
КонецФункции

#КонецОбласти

#Область НастройкаНоменклатуры

// Параметры открытия формы настройки частичного выбытия.
// 
// Возвращаемое значение:
//  Структура - Параметры открытия формы настройки частичного выбытия:
// * ФормаВладелец                   - Неопределено, ФормаКлиентскогоПриложения - Обязательный. Форма-владелец настройки.
// * РежимПросмотра                  - Булево                     - Открывает форму только для просмотра
// * Номенклатура                    - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура для настройки соответствий.
// * ВидПродукции                    - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
// * ЕдиницаХранения                 - Неопределено, ОпределяемыйТип.Упаковка     - Базовая единица хранения.
// * НаборУпаковок                   - Неопределено, ОпределяемыйТип.НаборУпаковокНоменклатурыИС - Набор упаковок, если используется.
// * УпаковкиВключены                - Булево  - Для номенклатуры упаковки используются и включены.
// * ДопустимоИспользованиеУпаковок         - Булево  - В конфигурации присутствует механизм упаковок.
// * ДопустимыУпаковкиМеньшеЕдиницыХранения - Булево  - Коэффициент упаковки может быть менее 1.
// * КарточкаТовараСодержитВесовойПризнак   - Булево  - Карточка товара содержит признак весового товара.
// * ДопустимаНастройкаЛогистическойЕдиницы - Булево  - Разрешена настройка логистической единицы.
Функция ПараметрыОткрытияФормыНастройкиНоменклатуры() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	// Состояние
	ВозвращаемоеЗначение.Вставить("ФормаВладелец",      Неопределено);
	ВозвращаемоеЗначение.Вставить("РежимПросмотра",     Ложь);
	// Источник данных
	ВозвращаемоеЗначение.Вставить("Номенклатура",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ЕдиницаХранения",    Неопределено);
	ВозвращаемоеЗначение.Вставить("НаборУпаковок",      Неопределено);
	ВозвращаемоеЗначение.Вставить("УпаковкиВключены",   Ложь);
	// Параметры конфигурации
	ВозвращаемоеЗначение.Вставить("ДопустимоИспользованиеУпаковок",         Истина);
	ВозвращаемоеЗначение.Вставить("ДопустимыУпаковкиМеньшеЕдиницыХранения", Истина);
	ВозвращаемоеЗначение.Вставить("КарточкаТовараСодержитВесовойПризнак",   Истина);
	ВозвращаемоеЗначение.Вставить("ДопустимаНастройкаЛогистическойЕдиницы", Истина);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработка действия гиперссылки настройки параметров номенклатуры.
// 
// Параметры:
//  ОповещениеОЗавершении      - ОписаниеОповещения - Оповещение о завершении настройки.
//  ПараметрыОбработкиДействия - см. ПараметрыОткрытияФормыНастройкиНоменклатуры.
Процедура ОбработкаДействияНастройкиНоменклатуры(ОповещениеОЗавершении, ПараметрыОбработкиДействия) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОбработкиДействия.Номенклатура) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Настройка возможна только для сохраненной номенклатуры.';
										|en = 'Настройка возможна только для сохраненной номенклатуры.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыОбработкиДействия);
	ПараметрыОткрытия.Удалить("ФормаВладелец");
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаНастройкиНоменклатурыИС",
		ПараметрыОткрытия,
		ПараметрыОбработкиДействия.ФормаВладелец,,,,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтегрируемыеПодсистемы

Процедура ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование = Неопределено, Владелец = Неопределено, ОписаниеОповещения = Неопределено, КорректировочныйДокумент = Ложь) Экспорт
	
	Если КорректировочныйДокумент Тогда
		ПараметрыФормы = Новый Структура("Основание", Новый Структура("Основание, Корректировочный", ДокументОснование, КорректировочныйДокумент));
	Иначе
		ПараметрыФормы = Новый Структура("Основание", ДокументОснование);
	КонецЕсли;
	
	ОткрытьФорму(
		ПолноеИмяДокумента + ".Форма.ФормаДокумента",
		ПараметрыФормы,
		Владелец,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьФормуСозданияДокументаСДополнительнымиПараметрами(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ИмяФильтра",      ДополнительныеПараметры.ИмяФильтра);
	Основание.Вставить("ЗначениеФильтра", ВыбранныйЭлемент.Значение);
	Основание.Вставить("Основание",       ДополнительныеПараметры.ДокументОснование);
	
	Если ДополнительныеПараметры.Свойство("Корректировочный") И ДополнительныеПараметры.Корректировочный Тогда
		Основание.Вставить("Корректировочный", ДополнительныеПараметры.Корректировочный);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		ДополнительныеПараметры.ПолноеИмяДокумента + ".Форма.ФормаДокумента",
		ПараметрыФормы,
		ДополнительныеПараметры.Владелец,,,,
		ДополнительныеПараметры.ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВыбратьИзСпискаИОткрытьФормуСозданияДокумента(ПараметрыВыбораИзСписка, КорректировочныйДокумент = Ложь) Экспорт
	
	СписокДляВыбора = Новый СписокЗначений;
	СписокДляВыбора.ЗагрузитьЗначения(ПараметрыВыбораИзСписка.ОбъектыДляВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолноеИмяДокумента", ПараметрыВыбораИзСписка.ПолноеИмяДокумента);
	ДополнительныеПараметры.Вставить("ДокументОснование",  ПараметрыВыбораИзСписка.ДокументОснование);
	ДополнительныеПараметры.Вставить("Владелец",           ПараметрыВыбораИзСписка.Владелец);
	ДополнительныеПараметры.Вставить("ИмяФильтра",         ПараметрыВыбораИзСписка.ИмяФильтра);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ПараметрыВыбораИзСписка.ОписаниеОповещения);
	
	Если КорректировочныйДокумент Тогда
		ДополнительныеПараметры.Вставить("Корректировочный", КорректировочныйДокумент);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуСозданияДокументаСДополнительнымиПараметрами",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПараметрыВыбораИзСписка.Владелец.ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДляВыбора);
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаЗемельныхУчастков(ВладелецФормы) Экспорт
	
	Если ИнтеграцияИСКлиентСерверПовтИсп.ЗемельныйУчастокИСПереопределен() Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОткрытьФормуСпискаЗемельныхУчастков(ВладелецФормы);
	Иначе
		ОткрытьФорму("Справочник.ЗемельныеУчасткиИС.ФормаСписка",, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСМетаданными

Функция ПодсистемаСуществует(КраткоеИмяПодсистемы)
	
	ПолноеИмяПодсистемы = ОбщегоНазначенияИСКлиентСервер.ПолноеИмяПодсистемы(КраткоеИмяПодсистемы);
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(ПолноеИмяПодсистемы);
	
КонецФункции

Функция ОбщийМодуль(КраткоеИмяПодсистемы)
	
	ИмяМодуля = ОбщегоНазначенияИСКлиентСервер.МодульКлиент(КраткоеИмяПодсистемы);
	Возврат ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля);
	
КонецФункции

Функция ПредставлениеПодсистемы(ИмяПодсистемы)
	
	Если НЕ ЗначениеЗаполнено(ИмяПодсистемы) Тогда
		Представление = НСтр("ru = '<Интеграция>';
							|en = '<Интеграция>'");
	Иначе
		ИмяМодуля = ОбщегоНазначенияИСКлиентСервер.МодульКлиентСервер(ИмяПодсистемы);
		Представление = ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля).ПредставлениеПодсистемы();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ИмяИнтегрируемойПодсистемыПоИмениЭлементаФормы(ИнтегрируемыеПодсистемы, Элемент)
	
	ИмяПодсистемы = "";
	
	Для Каждого КлючИЗначение Из ИнтегрируемыеПодсистемы Цикл
		
		Если Элемент.Имя = ИнтеграцияИСКлиентСервер.ИмяПоляИнтеграцииВФормеДокументаОснования(КлючИЗначение.Ключ) Тогда
			ИмяПодсистемы = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИмяПодсистемы) Тогда
		
		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось определить имя интегрируемой подсистемы по имени элемента формы ""%1""';
				|en = 'Не удалось определить имя интегрируемой подсистемы по имени элемента формы ""%1""'"),
			Элемент.Имя);
			
		ВызватьИсключение ОбщегоНазначенияИСКлиентСервер.ТекстОшибки(, УточнениеОшибки); // неизвестное имя интегрируемой подсистемы
		
	КонецЕсли;
	
	Возврат ИмяПодсистемы;
	
КонецФункции

#КонецОбласти

#КонецОбласти