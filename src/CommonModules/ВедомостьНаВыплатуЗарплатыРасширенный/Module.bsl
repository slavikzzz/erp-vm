#Область СлужебныйПрограммныйИнтерфейс

Функция МенеджерДокументаПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	
	МенеджерДокументаПоМестуВыплаты = Неопределено;
	
	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыПеречислением
	Иначе
		МенеджерДокументаПоМестуВыплаты = 
			ВедомостьНаВыплатуЗарплатыБазовый.МенеджерДокументаПоВидуМестаВыплаты(ВидМестаВыплаты)
	КонецЕсли;	
		
	Возврат МенеджерДокументаПоМестуВыплаты
	
КонецФункции

Функция СтатьяФинансированияИспользуется() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата")
КонецФункции

Функция СтатьяФинансированияОбязательна() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях")
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный")
КонецФункции

Функция СтатьяРасходовОбязательна() Экспорт
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Возврат ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеСпособаРасчетовВВедомостях")
	ИначеЕсли ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда	
		Возврат ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях")
	Иначе
		Возврат Ложь
	КонецЕсли;	
КонецФункции

Функция ПредставлениеРеквизитаСтатьяРасходов() Экспорт
	Возврат	
		?(ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации"),
		НСтр("ru = 'Способ расчетов с персоналом';
			|en = 'Payroll statement method'"),
		Метаданные.Справочники.СтатьиРасходовЗарплата.ПредставлениеОбъекта)
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриИзмененииБанковскогоСчета(БанковскийСчет, РеквизитыСчета) Экспорт
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет,
		"Банк,НомерСчета");
	
	РеквизитыСчета.Вставить("БИК", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыСчета.Банк, "Код"));
	
КонецПроцедуры

/// Печать

Процедура ДобавитьКомандыПечатиПриВыплатеНаКарточки(КомандыПечати) Экспорт
	
	ВедомостьНаВыплатуЗарплатыБазовый.ДобавитьКомандыПечатиПриВыплатеНаКарточки(КомандыПечати);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВедомостьНаВыплатуЗарплатыБюджетныхУчреждений");
		Модуль.ДобавитьКомандыПечатиПриВыплатеНаКарточки(КомандыПечати);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати)
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПечатьПриВыплатеНаКарточки(
		МассивОбъектов, 
		ПараметрыПечати, 
		КоллекцияПечатныхФорм, 
		ОбъектыПечати, 
		ПараметрыВывода) Экспорт
	
	ВедомостьНаВыплатуЗарплатыБазовый.ПечатьПриВыплатеНаКарточки(
		МассивОбъектов, 
		ПараметрыПечати, 
		КоллекцияПечатныхФорм, 
		ОбъектыПечати, 
		ПараметрыВывода);	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВедомостьНаВыплатуЗарплатыБюджетныхУчреждений");
		Модуль.ПечатьПриВыплатеНаКарточки(
			МассивОбъектов, 
			ПараметрыПечати, 
			КоллекцияПечатныхФорм, 
			ОбъектыПечати, 
			ПараметрыВывода);
	КонецЕсли;
	
	Если УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(
			КоллекцияПечатныхФорм, 
			МассивОбъектов, 
			ОбъектыПечати);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандыПечатиПриВыплатеНаличными(КомандыПечати) Экспорт
	
	// Расчетно-платежная ведомость (Т-49).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т49";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость (Т-49)';
										|en = 'Pay statement (T-49) '");
	КомандаПечати.Порядок = 30;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции = "РаботаВХозрасчетнойОрганизации";
	
	// Платежная ведомость (Т-53)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т53";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость (Т-53)';
										|en = 'Paysheet (T-53)'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВедомостьНаВыплатуЗарплатыБюджетныхУчреждений");
		Модуль.ДобавитьКомандыПечатиПриВыплатеНаличными(КомандыПечати);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати)
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПечатьПриВыплатеНаличными(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Т49") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Т49",
			НСтр("ru = 'Расчетно-платежная ведомость (Т-49)';
				|en = 'Pay statement (T-49) '"), ПечатьТ49(МассивОбъектов, ОбъектыПечати));
		
	Иначе
		ВедомостьНаВыплатуЗарплатыБазовый.ПечатьПриВыплатеНаличными(
			МассивОбъектов, 
			ПараметрыПечати, 
			КоллекцияПечатныхФорм, 
			ОбъектыПечати, 
			ПараметрыВывода);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВедомостьНаВыплатуЗарплатыБюджетныхУчреждений");
		Модуль.ПечатьПриВыплатеНаличными(
			МассивОбъектов, 
			ПараметрыПечати, 
			КоллекцияПечатныхФорм, 
			ОбъектыПечати, 
			ПараметрыВывода);
	КонецЕсли;
	
	Если УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(
			КоллекцияПечатныхФорм, 
			МассивОбъектов, 
			ОбъектыПечати);	
	КонецЕсли;

КонецПроцедуры

Функция ПечатьТ49(МассивОбъектов, ОбъектыПечати)
	
	СпособыВыплатыВедомостей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "СпособВыплаты");
	ПорядокВыплаты = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ОбщегоНазначения.ВыгрузитьКолонку(СпособыВыплатыВедомостей, "Значение", Истина), 
			"ХарактерВыплаты");
	ФинансированиеВедомостей = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			МассивОбъектов, 
			"СтатьяФинансирования, СтатьяРасходов"); 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Если ПорядокВыплаты[СпособыВыплатыВедомостей[ДокументСсылка]] = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
			ПечатнаяФормаДокумента = 
				Отчеты.АнализНачисленийИУдержанийАвансом.ПечатьТ49(ДокументСсылка, ФинансированиеВедомостей[ДокументСсылка]);
		Иначе
			ПечатнаяФормаДокумента = 
				Отчеты.АнализНачисленийИУдержаний.ПечатьТ49(ДокументСсылка, ФинансированиеВедомостей[ДокументСсылка]);
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ДокументРезультат = ПечатнаяФормаДокумента;
			НомерСтрокиНачало = 1;
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			// Добавим очередную ведомость к результирующему табличному документу
			ДокументРезультат.Вывести(ПечатнаяФормаДокумента);
		КонецЕсли;
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

/// Места выплаты

Функция МестоВыплатыКасса(Ведомость) Экспорт
	
	МестоВыплаты = ВедомостьНаВыплатуЗарплаты.МестоВыплаты();
	
	СтандартнаяОбработка = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиУправленческий");
		Модуль.ПриПолученииМестаВыплатыВедомостиВКассу(Ведомость, МестоВыплаты, СтандартнаяОбработка);
	КонецЕсли;
	Если Не СтандартнаяОбработка Тогда
		Возврат МестоВыплаты
	КонецЕсли;
	
	МестоВыплаты.Вид      = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	МестоВыплаты.Значение = Ведомость.Касса;
	
	Возврат МестоВыплаты
	
КонецФункции

Процедура УстановитьМестоВыплатыКасса(Ведомость, Значение) Экспорт
	Ведомость.Касса = Значение;
КонецПроцедуры

//// Заполнение и расчет документа.

Функция МожноЗаполнитьЗарплату(Ведомость) Экспорт
	
	МожноЗаполнитьЗарплату = ВедомостьНаВыплатуЗарплатыБазовый.МожноЗаполнитьЗарплату(Ведомость);

	ПравилаПроверки = Новый Структура;
	ПравилаПроверки.Вставить("ПроцентВыплаты", НСтр("ru = 'Не задан размер выплаты в параметрах расчета';
													|en = 'Payment amount is not specified in the settlement parameters'"));
	
	Если СтатьяФинансированияОбязательна() Тогда
		ПравилаПроверки.Вставить(
			"СтатьяФинансирования", 
			НСтр("ru = 'Не указана статья финансирования';
				|en = 'Financing item is not specified'"));
	КонецЕсли;
	Если СтатьяРасходовОбязательна() Тогда	
		ПравилаПроверки.Вставить("СтатьяРасходов",
			?(ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации"),
			НСтр("ru = 'Не указан способ расчетов с персоналом';
				|en = 'Payroll statement method is not specified'"),
			НСтр("ru = 'Не указана статья расходов';
				|en = 'Expense item is not specified'")));
	КонецЕсли;
		
	МожноЗаполнитьЗарплату = 
		ЗарплатаКадры.СвойстваЗаполнены(Ведомость, ПравилаПроверки)
		И МожноЗаполнитьЗарплату;

	ВидДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ВидДокументаОснования");
	Если ЗначениеЗаполнено(ВидДокументаОснования) И Ведомость.Основания.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбраны документы-основания';
				|en = 'Base documents are not selected'"), 
			Ведомость, 
			"Основания");
		МожноЗаполнитьЗарплату = Ложь;	
	КонецЕсли;	
	
	Возврат МожноЗаполнитьЗарплату;

КонецФункции

Функция ПараметрыЗаполненияПоОбъекту(Объект) Экспорт
	ПараметрыЗаполнения = ВедомостьНаВыплатуЗарплатыБазовый.ПараметрыЗаполненияПоОбъекту(Объект);
	
	ПараметрыЗаполнения.ОписаниеОперации.ДокументыОснования = 
		Объект.Основания.Выгрузить(, "Документ").ВыгрузитьКолонку("Документ");	
		
	ПараметрыЗаполнения.ОтборСотрудников.ВидыДоговоров = Объект.СпособВыплаты.ГруппаВидовДоговоров;
	ПараметрыЗаполнения.ОтборСотрудников.СпособВыплаты = Объект.СпособВыплаты;
	
	ПараметрыЗаполнения.ПараметрыРасчетаЗарплаты.ПроцентВыплаты = Объект.ПроцентВыплаты;
	
	ПараметрыЗаполнения.Финансирование.СтатьяФинансирования = Объект.СтатьяФинансирования;	
	ПараметрыЗаполнения.Финансирование.СтатьяРасходов       = Объект.СтатьяРасходов;	
	
	Возврат ПараметрыЗаполнения
КонецФункции

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников) Экспорт
	
	ИменаПромежуточныхВТ = Новый Массив;
	ИмяВТСотрудники = "";
	
	// Отбор сотрудников по документам-основаниям.
	СоздатьВТСотрудникиДляВедомостиПоОснованиям(МенеджерВременныхТаблиц, ОписаниеОперации, ИмяВТСотрудники);
	ИменаПромежуточныхВТ.Добавить(ИмяВТСотрудники);
	
	// Отбор сотрудников по организации и подразделению.
	СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники);
	ИменаПромежуточныхВТ.Добавить(ИмяВТСотрудники);
	
	// Отбор по месту выплаты зарплаты.
	СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники);
	ИменаПромежуточныхВТ.Добавить(ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДляКадровыхДанных", ОписаниеОперации.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаДляКадровыхДанных КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляВедомости
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаПромежуточныхВТ, Истина);
	
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоОснованиям(МенеджерВременныхТаблиц, ОписаниеОперации, ИмяВТСотрудники = "") Экспорт
	
	Если ОписаниеОперации.ДокументыОснования.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Основания", ОписаниеОперации.ДокументыОснования);	

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоОснованию
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.Регистратор В(&Основания)";
		
		Запрос.Выполнить();
		
		ИмяВТСотрудники	= "ВТСотрудникиПоОснованию"
		
	Иначе
		
		ИмяВТСотрудники	= ""
		
	КонецЕсли
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники) Экспорт
	
	ПараметрыПолученияСотрудников = ПараметрыПолученияСотрудниковПоШапкеВедомости(ОписаниеОперации, ОтборСотрудников);

	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиПоМестуРаботыПоШапкеВедомости");
		
	ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиПоМестуРаботыПоШапкеВедомости";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	// КадровыйУчет.СоздатьВТСотрудникиОрганизации возвращает всех сотрудников, работавших когда-либо
	// по переданному в параметрах подразделению. Сотрудники, работающие по договорам ГПХ
	// возвращаются без указания подразделения.
	// Поэтому необходимо дополнить сотрудников ГПХ подразделением и отобрать тех сотрудников,
	// которые работают в нужном подразделении на конец периода.
	Если ЗначениеЗаполнено(ПараметрыПолученияСотрудников.Подразделение) Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТСотрудникиОрганизацииПоДоговорамГПХ.Сотрудник КАК Сотрудник,
		|	&НачалоПериода КАК НачалоПериода,
		|	&ОкончаниеПериода КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПоМестуРаботыПоШапкеВедомости КАК ВТСотрудникиОрганизацииПоДоговорамГПХ
		|ГДЕ
		|	ВТСотрудникиОрганизацииПоДоговорамГПХ.Подразделение ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("НачалоПериода", ОписаниеОперации.ПериодРегистрации);
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(ОписаниеОперации.ПериодРегистрации));
		Запрос.Выполнить();
		
		ПараметрыПоВременнойТаблице = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
			"ВТСотрудникиПериоды", "Сотрудник", "НачалоПериода", "ОкончаниеПериода");
		ПараметрыПоВременнойТаблице.РаботникиПоДоговорамГПХ = Истина;
		ПараметрыПоВременнойТаблице.РаботникиПоТрудовымДоговорам = Неопределено;
		
		КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Ложь, 
			ПараметрыПоВременнойТаблице, "ВТРабочиеМестаСотрудниковГПХ");
			
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПоМестуРаботыПоШапкеВедомости.Сотрудник КАК Сотрудник,
		|	СотрудникиПоМестуРаботыПоШапкеВедомости.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА СотрудникиПоМестуРаботыПоШапкеВедомости.Подразделение ЕСТЬ NULL
		|			ТОГДА РабочиеМестаСотрудниковГПХ.Подразделение
		|		ИНАЧЕ СотрудникиПоМестуРаботыПоШапкеВедомости.Подразделение
		|	КОНЕЦ КАК Подразделение
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботыСГПХ
		|ИЗ
		|	ВТСотрудникиПоМестуРаботыПоШапкеВедомости КАК СотрудникиПоМестуРаботыПоШапкеВедомости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудниковГПХ КАК РабочиеМестаСотрудниковГПХ
		|		ПО СотрудникиПоМестуРаботыПоШапкеВедомости.Сотрудник = РабочиеМестаСотрудниковГПХ.Сотрудник
		|			И СотрудникиПоМестуРаботыПоШапкеВедомости.ФизическоеЛицо = РабочиеМестаСотрудниковГПХ.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПериоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПоМестуРаботыПоШапкеВедомости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудниковГПХ";
		
		Запрос.Выполнить();
		
		ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиПоМестуРаботыСГПХ";

		Запрос.УстановитьПараметр("Подразделение", ПараметрыПолученияСотрудников.Подразделение);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТСотрудникиОтносящиесяКПодразделению
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Подразделение В ИЕРАРХИИ(&Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиОтносящиесяКПодразделению";
		
	КонецЕсли;	
	
	// если передан список сотрудников, берем только присутствующих в нем
	Если ЗначениеЗаполнено(ИмяВТСотрудники) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТВходящиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТСотрудники КАК ВходящиеСотрудники
		|		ПО Сотрудники.Сотрудник = ВходящиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТВходящиеСотрудникиПоМестуРаботы";
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Подразделение
	|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботы
	|ИЗ
	|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуРаботы"
	
КонецПроцедуры

Процедура ОграничитьЗарплатыСотрудниковПоСпособуМестуВыплат(Зарплата, Регистратор, СпособВыплаты, ВидМестаВыплаты, МестоВыплаты, Округление) Экспорт
	
	Если Зарплата.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(МестоВыплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Зарплата",	Зарплата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Зарплата.Сотрудник КАК Сотрудник,
	|	Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Зарплата.Подразделение КАК Подразделение,
	|	Зарплата.ПериодВзаиморасчетов КАК Период,
	|	Зарплата.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	Зарплата.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов КАК СтатьяРасходов,
	|	Зарплата.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	Зарплата.ДокументОснование КАК ДокументОснование,
	|	Зарплата.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	&Зарплата КАК Зарплата";
	
	Запрос.Выполнить();
	
	ВедомостьНаВыплатуЗарплатыРасширенный.СоздатьВТДетализацияМестВыплат(Запрос.МенеджерВременныхТаблиц, "ВТЗарплатаКВыплате", Регистратор.Организация, СпособВыплаты);
	
	Запрос.УстановитьПараметр("Регистратор",Регистратор);
	Запрос.УстановитьПараметр("ПоОснованиям",Регистратор.Основания.Количество()>0);
	Запрос.УстановитьПараметр("Основания",Регистратор.Основания.ВыгрузитьКолонку("Документ"));
	Запрос.УстановитьПараметр("МестоВыплаты",	МестоВыплаты);
	Запрос.УстановитьПараметр("СпособВыплаты",	СпособВыплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДетализацияМестВыплат.Сотрудник КАК Сотрудник,
	|	ДетализацияМестВыплат.МестоВыплаты КАК МестоВыплаты,
	|	ВЫБОР
	|		КОГДА ДетализацияМестВыплат.МестоВыплаты ЕСТЬ НЕ NULL 
	|			И ДетализацияМестВыплат.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|			И (ДетализацияМестВыплат.ВидМестаВыплаты = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет)
	|			ИЛИ ДетализацияМестВыплат.ВидМестаВыплаты = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект))
	|				ТОГДА ДетализацияМестВыплат.МестоВыплаты.Банк
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|	КОНЕЦ КАК Банк,
	|	ДетализацияМестВыплат.ПоУмолчанию КАК ПоУмолчанию,
	|	ЕСТЬNULL(ДетализацияМестВыплат.СпособОграниченияВыплаты, ЗНАЧЕНИЕ(Перечисление.СпособОграниченияВыплаты.ПустаяСсылка)) КАК СпособОграниченияВыплаты,
	|	ДетализацияМестВыплат.Размер КАК Размер
	|ПОМЕСТИТЬ ВТОграниченияПоСотрудникам
	|ИЗ
	|	ВТДетализацияМестВыплат КАК ДетализацияМестВыплат
	|ГДЕ
	|	ЕСТЬNULL(ДетализацияМестВыплат.СпособОграниченияВыплаты, ЗНАЧЕНИЕ(Перечисление.СпособОграниченияВыплаты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СпособОграниченияВыплаты.ПустаяСсылка)
	|	И ДетализацияМестВыплат.Размер <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	СУММА(ЗарплатаКВыплате.КВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТСотрудникиСОграничениями
	|ИЗ
	|	ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Сотрудник В
	|			(ВЫБРАТЬ
	|				Сотрудники.Сотрудник
	|			ИЗ
	|				ВТОграниченияПоСотрудникам КАК Сотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выплачено.Регистратор КАК Регистратор,
	|	Выплачено.Сотрудник КАК Сотрудник,
	|	Выплачено.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	Выплачено.СуммаКВыплате КАК Выплачено
	|ПОМЕСТИТЬ ВТВыплатыПоРегистраторам
	|ИЗ
	|	ВТСотрудникиСОграничениями КАК СотрудникиСОграничениями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗарплатаКВыплате КАК Выплачено
	|		ПО (Выплачено.Сотрудник = СотрудникиСОграничениями.Сотрудник)
	|			И (Выплачено.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|			И (Выплачено.ПериодВзаиморасчетов = СотрудникиСОграничениями.ПериодВзаиморасчетов)
	|			И (Выплачено.Регистратор <> &Регистратор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособМестоВыплатыРегистратора.Регистратор КАК Регистратор,
	|	СпособМестоВыплатыРегистратора.СпособВыплаты КАК СпособВыплаты,
	|	СпособМестоВыплатыРегистратора.МестоВыплаты КАК МестоВыплаты
	|ПОМЕСТИТЬ ВТСпособМестоВыплатыРегистратора
	|ИЗ
	|(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыплатыПоРегистраторам.Регистратор КАК Регистратор,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка.СпособВыплаты КАК СпособВыплаты,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка.ЗарплатныйПроект КАК МестоВыплаты
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК ВыплатыПоРегистраторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Основания КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО (ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ВыплатыПоРегистраторам.Регистратор)
	|			И (&ПоОснованиям)
	|			И (ВедомостьНаВыплатуЗарплатыВБанк.Документ В (&Основания))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыплатыПоРегистраторам.Регистратор,
	|	ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК ВыплатыПоРегистраторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО (ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ВыплатыПоРегистраторам.Регистратор)
	|			И (НЕ &ПоОснованиям)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыплатыПоРегистраторам.Регистратор,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка.СпособВыплаты,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка.Касса
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК ВыплатыПоРегистраторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВКассу.Основания КАК ВедомостьНаВыплатуЗарплатыВКассу
	|		ПО (ВедомостьНаВыплатуЗарплатыВКассу.Ссылка = ВыплатыПоРегистраторам.Регистратор)
	|			И (&ПоОснованиям)
	|			И (ВедомостьНаВыплатуЗарплатыВКассу.Документ В (&Основания))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыплатыПоРегистраторам.Регистратор,
	|	ВедомостьНаВыплатуЗарплатыВКассу.СпособВыплаты,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Касса
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК ВыплатыПоРегистраторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|		ПО (ВедомостьНаВыплатуЗарплатыВКассу.Ссылка = ВыплатыПоРегистраторам.Регистратор)
	|			И (НЕ &ПоОснованиям)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыплатыПоРегистраторам.Регистратор,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка.СпособВыплаты,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка.Банк
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК ВыплатыПоРегистраторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Основания КАК ВедомостьНаВыплатуЗарплатыПеречислением
	|		ПО (ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка = ВыплатыПоРегистраторам.Регистратор)
	|			И (&ПоОснованиям)
	|			И (ВедомостьНаВыплатуЗарплатыПеречислением.Документ В (&Основания))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыплатыПоРегистраторам.Регистратор,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.СпособВыплаты,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Банк
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК ВыплатыПоРегистраторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ВедомостьНаВыплатуЗарплатыПеречислением
	|		ПО (ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка = ВыплатыПоРегистраторам.Регистратор)
	|			И (НЕ &ПоОснованиям)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыплатыПоРегистраторам.Регистратор,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка.СпособВыплаты,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка.Раздатчик
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК ВыплатыПоРегистраторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Основания КАК ВедомостьНаВыплатуЗарплатыРаздатчиком
	|		ПО (ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка = ВыплатыПоРегистраторам.Регистратор)
	|			И (&ПоОснованиям)
	|			И (ВедомостьНаВыплатуЗарплатыРаздатчиком.Документ В (&Основания))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыплатыПоРегистраторам.Регистратор,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.СпособВыплаты,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Раздатчик
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК ВыплатыПоРегистраторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК ВедомостьНаВыплатуЗарплатыРаздатчиком
	|		ПО (ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка = ВыплатыПоРегистраторам.Регистратор)
	|			И (НЕ &ПоОснованиям)
	|) КАК СпособМестоВыплатыРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	СпособМестоВыплатыРегистратора.СпособВыплаты КАК СпособВыплаты,
	|	СпособМестоВыплатыРегистратора.МестоВыплаты КАК МестоВыплаты,
	|	СУММА(Выплаты.Выплачено) КАК Выплачено
	|ПОМЕСТИТЬ ВТВыплачено
	|ИЗ
	|	ВТВыплатыПоРегистраторам КАК Выплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпособМестоВыплатыРегистратора КАК СпособМестоВыплатыРегистратора
	|		ПО (СпособМестоВыплатыРегистратора.Регистратор = Выплаты.Регистратор)
	|			И (СпособМестоВыплатыРегистратора.СпособВыплаты = &СпособВыплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов,
	|	СпособМестоВыплатыРегистратора.СпособВыплаты,
	|	СпособМестоВыплатыРегистратора.МестоВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыплаченоПоСпособу.Сотрудник КАК Сотрудник,
	|	ВыплаченоПоСпособу.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ВыплаченоПоСпособу.СпособВыплаты КАК СпособВыплаты,
	|	СУММА(ВыплаченоПоСпособу.Выплачено) КАК Выплачено
	|ПОМЕСТИТЬ ВТВыплаченоПоСпособу
	|ИЗ
	|	ВТВыплачено КАК ВыплаченоПоСпособу
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыплаченоПоСпособу.Сотрудник,
	|	ВыплаченоПоСпособу.ПериодВзаиморасчетов,
	|	ВыплаченоПоСпособу.СпособВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиСОграничениями.Сотрудник КАК Сотрудник,
	|	СотрудникиСОграничениями.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	СотрудникиСОграничениями.КВыплате КАК КВыплате,
	|	ОграниченияПоСотрудникам.СпособОграниченияВыплаты КАК СпособОграниченияВыплаты,
	|	ОграниченияПоСотрудникам.МестоВыплаты КАК МестоВыплаты,
	|	ОграниченияПоСотрудникам.Банк КАК Банк,
	|	ОграниченияПоСотрудникам.Размер КАК Размер,
	|	ОграниченияПоСотрудникам.ПоУмолчанию КАК ПоУмолчанию,
	|	ВыплаченоПоМесту.Выплачено КАК ВыплаченоПоМесту,
	|	ВыплаченоПоСпособу.Выплачено КАК ВыплаченоПоСпособу,
	|	ВЫБОР
	|		КОГДА ОграниченияПоСотрудникам.СпособОграниченияВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособОграниченияВыплаты.Процентом)
	|			ТОГДА (ВЫРАЗИТЬ((СотрудникиСОграничениями.КВыплате + ЕСТЬNULL(ВыплаченоПоСпособу.Выплачено, 0)) * ОграниченияПоСотрудникам.Размер / 100 КАК ЧИСЛО(15, 2))) - ЕСТЬNULL(ВыплаченоПоМесту.Выплачено, 0)
	|		КОГДА ОграниченияПоСотрудникам.СпособОграниченияВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособОграниченияВыплаты.ФиксированнойСуммой)
	|			ТОГДА ОграниченияПоСотрудникам.Размер - ЕСТЬNULL(ВыплаченоПоМесту.Выплачено, 0)
	|	КОНЕЦ КАК ОстатокРаспределения
	|ИЗ
	|	ВТСотрудникиСОграничениями КАК СотрудникиСОграничениями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОграниченияПоСотрудникам КАК ОграниченияПоСотрудникам
	|		ПО (ОграниченияПоСотрудникам.Сотрудник = СотрудникиСОграничениями.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплачено КАК ВыплаченоПоМесту
	|		ПО СотрудникиСОграничениями.Сотрудник = ВыплаченоПоМесту.Сотрудник
	|			И СотрудникиСОграничениями.ПериодВзаиморасчетов = ВыплаченоПоМесту.ПериодВзаиморасчетов
	|			И ((ВыплаченоПоМесту.МестоВыплаты = ОграниченияПоСотрудникам.МестоВыплаты)
	|				ИЛИ (ОграниченияПоСотрудникам.МестоВыплаты ССЫЛКА Справочник.БанковскиеСчетаКонтрагентов
	|				И ВыплаченоПоМесту.МестоВыплаты = ОграниченияПоСотрудникам.Банк))
	|			И (ВыплаченоПоМесту.СпособВыплаты = &СпособВыплаты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченоПоСпособу КАК ВыплаченоПоСпособу
	|		ПО СотрудникиСОграничениями.Сотрудник = ВыплаченоПоСпособу.Сотрудник
	|			И СотрудникиСОграничениями.ПериодВзаиморасчетов = ВыплаченоПоСпособу.ПериодВзаиморасчетов
	|			И (ВыплаченоПоСпособу.СпособВыплаты = &СпособВыплаты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиСОграничениями.Сотрудник,
	|	СотрудникиСОграничениями.ПериодВзаиморасчетов,
	|	ОграниченияПоСотрудникам.ПоУмолчанию УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РазмерыОграничений = РезультатЗапроса.Выгрузить();
	ОграниченнаяЗарплата = Зарплата.СкопироватьКолонки();
	ОграниченнаяЗарплата.Колонки.Добавить("МестоВыплаты", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников.Ресурсы.МестоВыплаты.Тип);
	ОграниченнаяЗарплата.Колонки.Добавить("Банк",	Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	
	// Получаем способ округления
	СпособОкругления = Округление.ПолучитьОбъект();
	Если СпособОкругления = Неопределено Тогда
		СпособОкругления = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию().ПолучитьОбъект();
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Сотрудник,ПериодВзаиморасчетов");
	УдаляемыеСтроки = Новый Массив();
	Для Каждого РазмерОграниченийСотрудника из РазмерыОграничений Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора,РазмерОграниченийСотрудника);
		ЗарплатаПоСотруднику = Зарплата.НайтиСтроки(СтруктураОтбора);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдаляемыеСтроки, ЗарплатаПоСотруднику, Истина);
		Если РазмерОграниченийСотрудника.ОстатокРаспределения = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаЗарплатаПоСотруднику Из ЗарплатаПоСотруднику Цикл
			Если СтрокаЗарплатаПоСотруднику.КВыплате = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаЗарплатыСотрудника = ОграниченнаяЗарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗарплатыСотрудника,СтрокаЗарплатаПоСотруднику);
			ЗаполнитьЗначенияСвойств(СтрокаЗарплатыСотрудника,РазмерОграниченийСотрудника,"МестоВыплаты,Банк");
			
			СтрокаЗарплатыСотрудника.КВыплате = СпособОкругления.Округлить(МИН(СтрокаЗарплатаПоСотруднику.КВыплате, РазмерОграниченийСотрудника.ОстатокРаспределения));
			РазмерОграниченийСотрудника.ОстатокРаспределения = РазмерОграниченийСотрудника.ОстатокРаспределения - СтрокаЗарплатыСотрудника.КВыплате;
			СтрокаЗарплатаПоСотруднику.КВыплате = СтрокаЗарплатаПоСотруднику.КВыплате - СтрокаЗарплатыСотрудника.КВыплате;
		КонецЦикла;
	КонецЦикла;
	
	РаспределитьОстатокУмолчанию(ОграниченнаяЗарплата,УдаляемыеСтроки,РазмерыОграничений);

	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Зарплата.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	МестоВыплатыСтрокой = ?(ТипЗнч(МестоВыплаты) = Тип("СправочникСсылка.КлассификаторБанков"),"Банк","МестоВыплаты");
	ЗарплатаСотрудниковПоМестуВыплаты = ОграниченнаяЗарплата.Скопировать(Новый Структура(МестоВыплатыСтрокой,МестоВыплаты));
	ЗарплатаСотрудниковПоМестуВыплаты.Свернуть("Сотрудник","КВыплате");
	Для Каждого ИтогПоСотруднику из ЗарплатаСотрудниковПоМестуВыплаты Цикл
		Если ИтогПоСотруднику.КВыплате > 0 Тогда
			ЗарплатаПоМестуВыплаты = ОграниченнаяЗарплата.НайтиСтроки(Новый Структура(МестоВыплатыСтрокой + ",Сотрудник",МестоВыплаты, ИтогПоСотруднику.Сотрудник));
			Для Каждого СтрокаЗарплатыСотрудника Из ЗарплатаПоМестуВыплаты Цикл
				ЗаполнитьЗначенияСвойств(Зарплата.Добавить(),СтрокаЗарплатыСотрудника);
			КонецЦикла
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьОстатокУмолчанию(Зарплата, ЗарплатаКРаспределению, РазмерыОграничений) Экспорт
	
	СтрокаСвертки = "";
	СтрокаМестаВыплаты = "МестоВыплаты";
	Для Каждого Колонка Из Зарплата.Колонки Цикл
		Если Колонка.Имя = "КВыплате" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "ВидМестаВыплаты"
			ИЛИ Колонка.Имя = "Банк" Тогда
			СтрокаМестаВыплаты = СтрокаМестаВыплаты + ","+Колонка.Имя;
		КонецЕсли;
		СтрокаСвертки = СтрокаСвертки + Колонка.Имя+ ",";
	КонецЦикла;
	СтрокаСвертки = Лев(СтрокаСвертки,СтрДлина(СтрокаСвертки)-1);
	
	СтруктураОтбора = Новый Структура("ПоУмолчанию, Сотрудник", Истина);
	Для каждого ОстатокПоСотруднику Из ЗарплатаКРаспределению Цикл
		Если ОстатокПоСотруднику.КВыплате > 0 Тогда
			СтруктураОтбора.Сотрудник = ОстатокПоСотруднику.Сотрудник;
			ОграниченияПоУмолчанию = РазмерыОграничений.НайтиСтроки(СтруктураОтбора);
			Если ОграниченияПоУмолчанию.Количество() > 0 Тогда
				СтрокаЗарплатыСотрудника = Зарплата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗарплатыСотрудника,ОстатокПоСотруднику);
				ЗаполнитьЗначенияСвойств(СтрокаЗарплатыСотрудника,ОграниченияПоУмолчанию[0], СтрокаМестаВыплаты);
				ОстатокПоСотруднику.КВыплате = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Зарплата.Свернуть(СтрокаСвертки,"КВыплате");
	
КонецПроцедуры

Процедура СоздатьВТДетализацияМестВыплат(МенеджерВременныхТаблиц, ИмяВТСотрудники, Организация, СпособВыплаты = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			ИмяВТСотрудники);
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц, Истина, 
		"Подразделение");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияЗадана", ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("СпособВыплаты",СпособВыплаты);
	Запрос.УстановитьПараметр("ВсеСпособыВыплаты",НЕ ЗначениеЗаполнено(СпособВыплаты));

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &ОрганизацияЗадана
	|			ТОГДА &Организация
	|		ИНАЧЕ Сотрудники.Организация
	|	КОНЕЦ КАК Организация,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Подразделение КАК Подразделение,
	|	СпособыВыплатыЗарплаты.Ссылка КАК СпособВыплаты,
	|	ВЫБОР
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Вид ЕСТЬ НЕ NULL
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Вид
	|		КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.Вид ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыСотрудниковДетализация.Вид
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудников.Вид ЕСТЬ НЕ NULL
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудников.Вид
	|		КОГДА МестаВыплатыЗарплатыПодразделенийДетализация.Вид ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыПодразделенийДетализация.Вид
	|		КОГДА МестаВыплатыЗарплатыОрганизацийДетализация.Вид ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыОрганизацийДетализация.Вид
	|		КОГДА МестаВыплатыЗарплатыСотрудников.Вид ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыСотрудников.Вид
	|		КОГДА МестаВыплатыЗарплатыПодразделений.Вид ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыПодразделений.Вид
	|		КОГДА МестаВыплатыЗарплатыОрганизаций.Вид ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыОрганизаций.Вид
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)
	|	КОНЕЦ КАК ВидМестаВыплаты,
	|	ВЫБОР
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ КАК МестоВыплаты,
	|	ВЫБОР
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА Сотрудники.Сотрудник
	|		КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА Сотрудники.Сотрудник
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА Сотрудники.Сотрудник
	|		КОГДА МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА Сотрудники.Подразделение
	|		КОГДА МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА &ОрганизацияЗадана
	|						ТОГДА &Организация
	|					ИНАЧЕ Сотрудники.Организация
	|				КОНЕЦ
	|		КОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА Сотрудники.Сотрудник
	|		КОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА Сотрудники.Подразделение
	|		КОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА &ОрганизацияЗадана
	|						ТОГДА &Организация
	|					ИНАЧЕ Сотрудники.Организация
	|				КОНЕЦ
	|	КОНЕЦ КАК Источник,
	|	ВЫБОР
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ""По распределению способа выплаты сотрудника""
	|		КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ""По способу выплаты сотрудника""
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ""По умолчанию распределение для сотрудника""
	|		КОГДА МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ""По способу выплаты подразделения""
	|		КОГДА МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ""По способу выплаты организации""
	|		КОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ""По умолчанию для сотрудника""
	|		КОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ""По умолчанию для подразделения""
	|		КОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ""По умолчанию для организации""
	|		ИНАЧЕ ""Касса""
	|	КОНЕЦ КАК ИсточникПредставление,
	|	ВЫБОР
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.СпособОграниченияВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.СпособОграниченияВыплаты
	|		КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособОграниченияВыплаты.ПустаяССылка)
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудников.СпособОграниченияВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудников.СпособОграниченияВыплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособОграниченияВыплаты.ПустаяССылка)
	|	КОНЕЦ КАК СпособОграниченияВыплаты,
	|	ВЫБОР
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Размер ЕСТЬ НЕ NULL
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Размер
	|		КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL
	|			ТОГДА 0
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудников.Размер ЕСТЬ НЕ NULL
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудников.Размер
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер,
	|	ВЫБОР
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL 
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL 
	|			ТОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты
	|		КОГДА РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL 
	|			ТОГДА РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты ЕСТЬ НЕ NULL 
	|			ТОГДА МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты ЕСТЬ НЕ NULL 
	|			ТОГДА МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL 
	|			ТОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты ЕСТЬ НЕ NULL 
	|			ТОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты
	|		КОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты ЕСТЬ НЕ NULL 
	|			ТОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ = ЕСТЬNULL(МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты,МестаВыплатыЗарплатыСотрудников.МестоВыплаты) КАК ПоУмолчанию
	|ПОМЕСТИТЬ ВТДетализацияМестВыплат
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|		ПО СпособыВыплатыЗарплаты.Ссылка = &СпособВыплаты
	|		ИЛИ (&ВсеСпособыВыплаты И НЕ СпособыВыплатыЗарплаты.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
	|		ПО (МестаВыплатыЗарплатыОрганизаций.Организация = 
	|				ВЫБОР
	|					КОГДА &ОрганизацияЗадана
	|						ТОГДА &Организация
	|					ИНАЧЕ Сотрудники.Организация
	|				КОНЕЦ)
	|			И (МестаВыплатыЗарплатыОрганизаций.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизацийДетализация
	|		ПО (МестаВыплатыЗарплатыОрганизацийДетализация.Организация = 
	|				ВЫБОР
	|					КОГДА &ОрганизацияЗадана
	|						ТОГДА &Организация
	|					ИНАЧЕ Сотрудники.Организация
	|				КОНЕЦ)
	|			И (МестаВыплатыЗарплатыОрганизацийДетализация.СпособВыплаты = СпособыВыплатыЗарплаты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
	|		ПО (МестаВыплатыЗарплатыПодразделений.Подразделение = Сотрудники.Подразделение)
	|			И (МестаВыплатыЗарплатыПодразделений.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделенийДетализация
	|		ПО (МестаВыплатыЗарплатыПодразделенийДетализация.Подразделение = Сотрудники.Подразделение)
	|			И (МестаВыплатыЗарплатыПодразделенийДетализация.СпособВыплаты = СпособыВыплатыЗарплаты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|		ПО (МестаВыплатыЗарплатыСотрудников.Сотрудник = Сотрудники.Сотрудник)
	|			И (МестаВыплатыЗарплатыСотрудников.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудниковДетализация
	|		ПО (МестаВыплатыЗарплатыСотрудниковДетализация.Сотрудник = Сотрудники.Сотрудник)
	|			И (МестаВыплатыЗарплатыСотрудниковДетализация.СпособВыплаты = СпособыВыплатыЗарплаты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеМестВыплатЗарплатыСотрудников КАК РаспределениеМестВыплатЗарплатыСотрудников
	|		ПО (РаспределениеМестВыплатЗарплатыСотрудников.Сотрудник = Сотрудники.Сотрудник)
	|		И РаспределениеМестВыплатЗарплатыСотрудников.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)
	|		И РаспределениеМестВыплатЗарплатыСотрудников.Размер > 0
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеМестВыплатЗарплатыСотрудников КАК РаспределениеМестВыплатЗарплатыСотрудниковДетализация
	|		ПО (РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Сотрудник = Сотрудники.Сотрудник)
	|		И РаспределениеМестВыплатЗарплатыСотрудниковДетализация.СпособВыплаты = &СпособВыплаты
	|		И РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Размер > 0";
	
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников, ИмяВТСотрудники)
	
	МестоВыплаты = ОтборСотрудников.МестоВыплаты;
	
	Если НЕ ЗначениеЗаполнено(МестоВыплаты.Вид) Тогда
		Возврат
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",	ОписаниеОперации.Организация);
	Запрос.УстановитьПараметр("ВидМестаВыплаты",МестоВыплаты.Вид);
	Запрос.УстановитьПараметр("ВсеМестаВыплаты",НЕ ЗначениеЗаполнено(МестоВыплаты.Значение));
	Запрос.УстановитьПараметр("МестоВыплаты",	МестоВыплаты.Значение);
	Запрос.УстановитьПараметр("СпособВыплаты",	ОтборСотрудников.СпособВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Подразделение
	|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
	|		ПО (МестаВыплатыЗарплатыОрганизаций.Организация = &Организация)
	|		И МестаВыплатыЗарплатыОрганизаций.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизацийДетализация
	|		ПО (МестаВыплатыЗарплатыОрганизацийДетализация.Организация = &Организация)
	|		И МестаВыплатыЗарплатыОрганизацийДетализация.СпособВыплаты = &СпособВыплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
	|		ПО (МестаВыплатыЗарплатыПодразделений.Подразделение = Сотрудники.Подразделение)
	|		И МестаВыплатыЗарплатыПодразделений.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделенийДетализация
	|		ПО (МестаВыплатыЗарплатыПодразделенийДетализация.Подразделение = Сотрудники.Подразделение)
	|		И МестаВыплатыЗарплатыПодразделенийДетализация.СпособВыплаты = &СпособВыплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|		ПО (МестаВыплатыЗарплатыСотрудников.Сотрудник = Сотрудники.Сотрудник)
	|		И МестаВыплатыЗарплатыСотрудников.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудниковДетализация
	|		ПО (МестаВыплатыЗарплатыСотрудниковДетализация.Сотрудник = Сотрудники.Сотрудник)
	|		И МестаВыплатыЗарплатыСотрудниковДетализация.СпособВыплаты = &СпособВыплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеМестВыплатЗарплатыСотрудников КАК РаспределениеМестВыплатЗарплатыСотрудников
	|		ПО (РаспределениеМестВыплатЗарплатыСотрудников.Сотрудник = Сотрудники.Сотрудник)
	|		И РаспределениеМестВыплатЗарплатыСотрудников.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)
	|		И РаспределениеМестВыплатЗарплатыСотрудников.Размер > 0
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеМестВыплатЗарплатыСотрудников КАК РаспределениеМестВыплатЗарплатыСотрудниковДетализация
	|		ПО (РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Сотрудник = Сотрудники.Сотрудник)
	|		И РаспределениеМестВыплатЗарплатыСотрудниковДетализация.СпособВыплаты = &СпособВыплаты
	|		И РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Размер > 0
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Вид
	|			КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыСотрудниковДетализация.Вид
	|			КОГДА РаспределениеМестВыплатЗарплатыСотрудников.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА РаспределениеМестВыплатЗарплатыСотрудников.Вид
	|			КОГДА МестаВыплатыЗарплатыПодразделенийДетализация.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыПодразделенийДетализация.Вид
	|			КОГДА МестаВыплатыЗарплатыОрганизацийДетализация.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыОрганизацийДетализация.Вид
	|			КОГДА МестаВыплатыЗарплатыСотрудников.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыСотрудников.Вид
	|			КОГДА МестаВыплатыЗарплатыПодразделений.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыПодразделений.Вид
	|			КОГДА МестаВыплатыЗарплатыОрганизаций.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Вид
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)
	|		КОНЕЦ = &ВидМестаВыплаты
	|	И (&ВсеМестаВыплаты
	|			ИЛИ ВЫБОР
	|				КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет)
	|								ТОГДА РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты.Банк
	|							ИНАЧЕ РаспределениеМестВыплатЗарплатыСотрудниковДетализация.МестоВыплаты
	|						КОНЕЦ
	|				КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА МестаВыплатыЗарплатыСотрудниковДетализация.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет)
	|								ТОГДА МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты.Банк
	|							ИНАЧЕ МестаВыплатыЗарплатыСотрудниковДетализация.МестоВыплаты
	|						КОНЕЦ
	|				КОГДА РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА РаспределениеМестВыплатЗарплатыСотрудников.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет)
	|								ТОГДА РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты.Банк
	|							ИНАЧЕ РаспределениеМестВыплатЗарплатыСотрудников.МестоВыплаты
	|						КОНЕЦ
	|				КОГДА МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА МестаВыплатыЗарплатыПодразделенийДетализация.МестоВыплаты
	|				КОГДА МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА МестаВыплатыЗарплатыОрганизацийДетализация.МестоВыплаты
	|				КОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыСотрудников.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА МестаВыплатыЗарплатыСотрудников.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет)
	|								ТОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты.Банк
	|							ИНАЧЕ МестаВыплатыЗарплатыСотрудников.МестоВыплаты
	|						КОНЕЦ
	|				КОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыПодразделений.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты
	|				КОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыОрганизаций.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
	|			КОНЕЦ = &МестоВыплаты)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуВыплаты"
		
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, ФизическиеЛица, ОписаниеОперации, ОтборСотрудников) Экспорт
	
	ПараметрыПолученияСотрудников = ПараметрыПолученияСотрудниковПоШапкеВедомости(ОписаниеОперации, ОтборСотрудников);
	
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиДляВедомости");
		
КонецПроцедуры	

Функция ПараметрыПолученияСотрудниковПоШапкеВедомости(ОписаниеОперации, ОтборСотрудников)
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	// сотрудники, операции по которым завершены - не нужны
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПолученияСотрудников.Отборы, 
		"ВАрхиве", "=", Ложь);
	
	Перечисления.ГруппыВидовДоговоровССотрудникамиДляВыплатыЗарплаты.ЗаполнитьПараметрыПолученияСотрудниковОрганизаций(
		ПараметрыПолученияСотрудников,
		ОтборСотрудников.ВидыДоговоров);
	
	Если ОписаниеОперации.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		// аванс - только работающим на дату ведомости
		НачалоПериода 		= НачалоДня(ОписаниеОперации.Дата);
		ОкончаниеПериода	= КонецДня(ОписаниеОперации.Дата);
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Неопределено;
	ИначеЕсли ОписаниеОперации.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда 
		НачалоПериода 		=  '00010101';
		ОкончаниеПериода	=  МИН(КонецМесяца(ОписаниеОперации.ПериодРегистрации), ОписаниеОперации.Дата);
	Иначе
		НачалоПериода 		=  '00010101';
		ОкончаниеПериода	=  КонецМесяца(ОписаниеОперации.ПериодРегистрации);
	КонецЕсли;	
	
	ПараметрыПолученияСотрудников.Организация   = ОписаниеОперации.Организация;
	ПараметрыПолученияСотрудников.Подразделение = ОтборСотрудников.Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода    = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПериода;
	
	ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение";	
	
	КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников
	
КонецФункции

///// Обработчики событий модуля объекта документов Ведомости.

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверяемыеКолонки   = Новый Соответствие;
	
	// Когда в документе заполнена статья, дополнительно контролируем, 
	// что в таблице зарплаты используются только указанные статьи из шапки.
	
	Если ЗначениеЗаполнено(ДокументОбъект.СтатьяФинансирования) Тогда 
		ПроверяемыеКолонки.Вставить(
			"СтатьяФинансирования", 
			НРег(Метаданные.Справочники.СтатьиФинансированияЗарплата.ПредставлениеОбъекта));
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДокументОбъект.СтатьяРасходов) Тогда 
		ПроверяемыеКолонки.Вставить(
			"СтатьяРасходов",
			НРег(ПредставлениеРеквизитаСтатьяРасходов()));
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПроверяемыеКолонки) Тогда
		
		Колонки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ИдентификаторСтроки");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Колонки, 
			ОбщегоНазначения.ВыгрузитьКолонку(ПроверяемыеКолонки, "Ключ"));
		Колонки = СтрСоединить(Колонки, ",");
		Зарплата = ДокументОбъект.Зарплата.Выгрузить(, Колонки);
		Зарплата.Свернуть(Колонки);
		Зарплата.Индексы.Добавить("ИдентификаторСтроки");
		
		Для Каждого СтрокаСостава Из ДокументОбъект.Состав Цикл
			ЗарплатаСтроки = 
				Зарплата.Скопировать(
					Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
			ОшибкаФинансированияСтроки = Ложь;
			Для Каждого ПроверяемаяКолонка Из ПроверяемыеКолонки Цикл
				СтатьиСтроки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗарплатаСтроки.ВыгрузитьКолонку(ПроверяемаяКолонка.Ключ));
				Если СтатьиСтроки.Количество() > 1 Или СтатьиСтроки[0] <> ДокументОбъект[ПроверяемаяКолонка.Ключ] Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'У сотрудника %1 %2 не совпадает с ведомостью.';
								|en = 'Employee %1 %2 does not correspond to one in the paysheet.'"), 
							СтрокаСостава.ФизическоеЛицо,
							ПроверяемаяКолонка.Значение), 
						ДокументОбъект, 
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Состав", СтрокаСостава.НомерСтроки, "ФизическоеЛицо"),,
						Отказ);
				КонецЕсли	
			КонецЦикла;	
		КонецЦикла;
		
	КонецЕсли;	
	
	// Заполнение статей контролируем, только когда включена проверка обязательности.
	ИсключаемыеРеквизиты = Новый Массив;
	Если Не СтатьяФинансированияОбязательна() Тогда
		ИсключаемыеРеквизиты.Добавить("СтатьяФинансирования");
	КонецЕсли;
	Если Не СтатьяРасходовОбязательна() Тогда	
		ИсключаемыеРеквизиты.Добавить("СтатьяРасходов");
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИсключаемыеРеквизиты) Тогда
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		Если НачалоДня(ДокументОбъект.Дата) > ВедомостьНаВыплатуЗарплатыКлиентСервер.ДатаВыплаты(ДокументОбъект) Тогда
			ТекстОшибки = НСтр("ru = 'Дата выплаты не может быть меньше даты документа';
								|en = 'Payment date cannot be less than the document date'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "ДатаВыплаты",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ВедомостьНаВыплатуЗарплатыБазовый.ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплатуВУчетеНДФЛ(Ведомость, Отказ) Экспорт
	
	// Регистрация выдачи зарплаты.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		
		ЗарегистрироватьВыданнуюЗарплату(Ведомость, Отказ);
		
		ЗарегистрироватьУдержанныеНалоги(Ведомость, Отказ);
		
		Если Ведомость.ПеречислениеНДФЛВыполнено Тогда
			ЗарегистрироватьПеречислениеНДФЛ(Ведомость, Отказ);
		КонецЕсли;
		
	Иначе
		
		ВедомостьНаВыплатуЗарплаты.ЗарегистрироватьНДФЛКПеречислению(
			Ведомость, Отказ, 
			ЗарплатаКадры.НаборыЗаписейРегистратора(Ведомость.Метаданные()));
		
	КонецЕсли
	
КонецПроцедуры

Процедура ЗарегистрироватьВыданнуюЗарплату(Ведомость, Отказ = Ложь)
	
	// Выданную зарплату берем по движениям в р.н. ВзаиморасчетыССотрудниками
	Зарплата = ВзаиморасчетыССотрудниками.НоваяТаблицаВыданнойЗарплаты();
	Для Каждого Запись Из Ведомость.Движения.ВзаиморасчетыССотрудниками Цикл
		СтрокаЗарплаты = Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, Запись);
		СтрокаЗарплаты.Сумма = Запись.СуммаВзаиморасчетов
	КонецЦикла;	
	
	ПорядокВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьВыданнуюЗарплату(
		Ведомость.Движения, 
		Отказ, 
		Ведомость.Организация, 
		ВедомостьНаВыплатуЗарплатыКлиентСервер.ДатаВыплаты(Ведомость), Зарплата, ПорядокВыплаты); 
	
КонецПроцедуры
	
Процедура ЗарегистрироватьУдержанныеНалоги(Ведомость, Отказ = Ложь)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(
		МенеджерВременныхТаблиц, 
		Ведомость.НДФЛ, 
		ВедомостьНаВыплатуЗарплатыКлиентСервер.ДатаВыплаты(Ведомость)); 
	
	ВедомостьНаВыплатуЗарплаты.СоздатьВТСписокСотрудниковПоТаблицеЗарплат(
		МенеджерВременныхТаблиц, 
		Ведомость.Зарплата, 
		Ведомость.Организация, 
		Ведомость.ПериодРегистрации, 
		Ведомость.Ссылка,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ОкончательныйРасчетНДФЛ"));
		
	МежрасчетныеВыплаты = ВедомостьНаВыплатуЗарплаты.МежрасчетныеВыплатыДляНФДЛПоДокументу(Ведомость);
	
	УчетНДФЛ.ЗарегистрироватьУдержанныйНалогПриВыплате(
		Ведомость.Движения, Отказ, 
		Ведомость.Организация, Ведомость.Дата, 
		ВедомостьНаВыплатуЗарплатыКлиентСервер.ДатаВыплаты(Ведомость), 
		МенеджерВременныхТаблиц, 
		Ведомость.Ссылка, 
		МежрасчетныеВыплаты);
		
КонецПроцедуры

Процедура ЗарегистрироватьПеречислениеНДФЛ(Ведомость, Отказ = Ложь)
	
	УчетНДФЛРасширенный.ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(
		Ведомость.Движения, 
		Отказ, 
		Ведомость.Организация, 
		ВедомостьНаВыплатуЗарплатыКлиентСервер.ДатаВыплаты(Ведомость), 
		Ведомость.ПеречислениеНДФЛРеквизиты);
	УчетНДФЛ.СформироватьНДФЛПеречисленный(Ведомость.Движения, Отказ);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		Модуль.РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛПеречисленный(Ведомость.Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание обработки ПлатежиПоРезультатамРасчетаЗарплаты.

// Возвращает список проведенных ведомостей, у которых сумма к выплате не равна нулю.
//
// Параметры:
//		Организации - Массив - содержит ссылки на организации (СправочникСсылка.Организации)
//								по которым получается список ведомостей.
//		МесяцНачисления - Дата 
//		ШаблонСпискаВедомостей - ТаблицаЗначений, пустая таблица, используется как шаблон для выходных данных.
//
// Возвращаемое значение:
//		Структура
//			*Касса - таблица значений, колонки таблицы соответствуют таблице ШаблонСпискаВедомостей
//				** Организация 		- СправочникСсылка.Организации
//				** МестоВыплаты 	- Строка или СправочникСсылка.Кассы
//				** СпособВыплаты 	- СправочникСсылка.СпособыВыплатыЗарплаты
//				** Сумма 			- Число
//				** Ведомость 		- Строка
//				** СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//				** СтатьяРасходов 		- СправочникСсылка.СтатьиРасходовЗарплата
//			*Банк - таблица значений
//				** Организация 		- СправочникСсылка.Организации
//				** МестоВыплаты 	- Строка или СправочникСсылка.ЗарплатныеПроекты или СправочникСсылка.КлассификаторБанков
//				** СпособВыплаты 	- СправочникСсылка.СпособыВыплатыЗарплаты
//				** Сумма 			- Число
//				** Ведомость 		- Строка
//				** СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//				** СтатьяРасходов 		- СправочникСсылка.СтатьиРасходовЗарплата
//
Функция ВедомостиОрганизацийЗаМесяцДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления, ШаблонСпискаВедомостей) Экспорт
	
	ВедомостиЗаМесяц = Новый Структура("Касса,Банк");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("КассаНеУказана", "<" + НСтр("ru = 'Касса не указана';
															|en = 'Cash account is not specified'") + ">");
	Запрос.УстановитьПараметр("ЗарплатныйПроектНеУказан", "<" + НСтр("ru = 'Зарплатный проект не указан';
																	|en = 'Payroll card program is not specified'") + ">");
	Запрос.УстановитьПараметр("БанкНеУказан", "<" + НСтр("ru = 'Банк не указан';
														|en = 'Bank is not specified'") + ">");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ведомость.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Ведомость.Касса = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|			ТОГДА &КассаНеУказана
	|		ИНАЧЕ Ведомость.Касса
	|	КОНЕЦ КАК МестоВыплаты,
	|	Ведомость.СпособВыплаты КАК СпособВыплаты,
	|	Ведомость.СуммаПоДокументу КАК Сумма,
	|	ПРЕДСТАВЛЕНИЕ(Ведомость.Ссылка) КАК Ведомость,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Ведомость.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК Ведомость
	|ГДЕ
	|	Ведомость.ПериодРегистрации = &ПериодРегистрации
	|	И Ведомость.Организация В(&Организации)
	|	И Ведомость.Проведен
	|	И Ведомость.СуммаПоДокументу <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Организация,
	|	Ведомость.Раздатчик,
	|	Ведомость.СпособВыплаты,
	|	Ведомость.СуммаПоДокументу,
	|	ПРЕДСТАВЛЕНИЕ(Ведомость.Ссылка),
	|	Ведомость.Дата,
	|	Ведомость.Ссылка,
	|	Ведомость.СтатьяФинансирования,
	|	Ведомость.СтатьяРасходов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК Ведомость
	|ГДЕ
	|	Ведомость.ПериодРегистрации = &ПериодРегистрации
	|	И Ведомость.Организация В(&Организации)
	|	И Ведомость.Проведен
	|	И Ведомость.СуммаПоДокументу <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	Дата,
	|	МестоВыплаты,
	|	СпособВыплаты,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ведомость.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Ведомость.ЗарплатныйПроект = ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка)
	|			ТОГДА &ЗарплатныйПроектНеУказан
	|		ИНАЧЕ Ведомость.ЗарплатныйПроект
	|	КОНЕЦ КАК МестоВыплаты,
	|	Ведомость.СпособВыплаты КАК СпособВыплаты,
	|	Ведомость.СуммаПоДокументу КАК Сумма,
	|	ПРЕДСТАВЛЕНИЕ(Ведомость.Ссылка) КАК Ведомость,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Ведомость.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК Ведомость
	|ГДЕ
	|	Ведомость.ПериодРегистрации = &ПериодРегистрации
	|	И Ведомость.Организация В(&Организации)
	|	И Ведомость.Проведен
	|	И Ведомость.СуммаПоДокументу <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Организация,
	|	ВЫБОР
	|		КОГДА Ведомость.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|			ТОГДА &БанкНеУказан
	|		ИНАЧЕ Ведомость.Банк
	|	КОНЕЦ,
	|	Ведомость.Ссылка.СпособВыплаты,
	|	Ведомость.СуммаПоДокументу,
	|	ПРЕДСТАВЛЕНИЕ(Ведомость.Ссылка),
	|	Ведомость.Дата,
	|	Ведомость.Ссылка,
	|	Ведомость.СтатьяФинансирования,
	|	Ведомость.СтатьяРасходов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК Ведомость
	|ГДЕ
	|	Ведомость.ПериодРегистрации = &ПериодРегистрации
	|	И Ведомость.Организация В(&Организации)
	|	И Ведомость.Проведен
	|	И Ведомость.СуммаПоДокументу <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	Дата,
	|	МестоВыплаты,
	|	СпособВыплаты,
	|	Ссылка";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВедомостиКасса = ШаблонСпискаВедомостей.СкопироватьКолонки();
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВедомостиКасса.Добавить(), Выборка);
	КонецЦикла;
	ВедомостиЗаМесяц.Касса = ВедомостиКасса;
	
	ВедомостиБанк = ШаблонСпискаВедомостей.СкопироватьКолонки();
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВедомостиБанк.Добавить(), Выборка);
	КонецЦикла;
	ВедомостиЗаМесяц.Банк = ВедомостиБанк;
	
	Возврат ВедомостиЗаМесяц;
	
КонецФункции

#КонецОбласти
