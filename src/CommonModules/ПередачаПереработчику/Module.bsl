////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы "Переработка на стороне"
// связанные с хозяйственной операцией "Передача переработчику".
// 
////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область УнифицированныеМетоды

#Область Заполнение

// Возвращает текст запроса заполнения документа на основание заказа переработчику.
//
// Возвращаемое значение:
//  Строка -
//
Функция ТекстЗапросаЗаполненияНаОснованияЗаказа() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Заказ.Ссылка                                                  КАК ЗаказКлиента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПереработчику2_5) КАК ХозяйственнаяОперация,
	|	Заказ.Статус                                                  КАК СтатусДокумента,
	|	Заказ.Партнер                                                 КАК Партнер,
	|	Заказ.Контрагент                                              КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) КАК БанковскийСчетКонтрагента,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)        КАК Соглашение,
	|	Заказ.Организация                                             КАК Организация,
	|	Заказ.БанковскийСчет                                          КАК БанковскийСчетОрганизации,
	|	Заказ.Договор                                                 КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                      КАК Склад,
	|	ЛОЖЬ                                                          КАК ОрдернаяСхемаПриОтгрузке,
	|	ЛОЖЬ                                                          КАК ЗапрещеноВыбиратьГруппуСкладов,
	|	Заказ.Валюта                                                  КАК Валюта,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)                 КАК Грузоотправитель,
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) КАК БанковскийСчетГрузоотправителя,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)                 КАК Грузополучатель,
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) КАК БанковскийСчетГрузополучателя,
	|	Заказ.ДатаОтгрузки                                            КАК ДатаОтгрузки,
	|	Заказ.НеОтгружатьЧастями                                      КАК НеОтгружатьЧастями,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА Заказ.СпособДоставки
	|	КОНЕЦ                                                         КАК СпособДоставки,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА Заказ.ПеревозчикПартнер
	|	КОНЕЦ                                                         КАК ПеревозчикПартнер,
	|	Заказ.АдресДоставки                                           КАК АдресДоставки,
	|	Заказ.АдресДоставкиЗначенияПолей                              КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА Заказ.ЗонаДоставки
	|	КОНЕЦ                                                         КАК ЗонаДоставки,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА Заказ.ВремяДоставкиС
	|	КОНЕЦ                                                         КАК ВремяДоставкиС,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА Заказ.ВремяДоставкиПо
	|	КОНЕЦ                                                         КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА Заказ.ДополнительнаяИнформацияПоДоставке
	|	КОНЕЦ                                                         КАК ДополнительнаяИнформацияПоДоставке,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА Заказ.ОсобыеУсловияПеревозки
	|	КОНЕЦ                                                         КАК ОсобыеУсловияПеревозки,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА Заказ.ОсобыеУсловияПеревозкиОписание
	|	КОНЕЦ                                                         КАК ОсобыеУсловияПеревозкиОписание,
	|	Заказ.Сделка                                                  КАК Сделка,
	|	Заказ.Подразделение                                           КАК Подразделение,
	|	Заказ.КонтактноеЛицо                                          КАК КонтактноеЛицо,
	|	Заказ.НаправлениеДеятельности                                 КАК НаправлениеДеятельности,
	|	Заказ.ЦенаВключаетНДС                                         КАК ЦенаВключаетНДС,
	|	ЛОЖЬ                                                          КАК ВернутьМногооборотнуюТару,
	|	0                                                             КАК СрокВозвратаМногооборотнойТары,
	|	ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)   КАК КалендарьВозвратаТары,
	|	ЛОЖЬ                                                          КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	ЛОЖЬ                                                          КАК ЭтоЗаказКакСчет,
	|	НЕ Заказ.Проведен                                             КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказПереработчику2_5 КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ДокументОснование
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыОстатки.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ДокументОснование) КАК ЗаказыОстатки";

	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает список реквизитов, по которым можно сгруппировать распоряжения в пределах одной накладной.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятыми.
//
Функция КлючевыеПоляШапкиРаспоряжения() Экспорт
	
	Возврат "Партнер, Контрагент, Договор, Организация, Сделка, Валюта, НаправлениеДеятельности";
	
КонецФункции

// Возвращает структуру необходимую для дальнейшего использования при заполнении документа.
//
// Возвращаемое значение:
//   Структура - структура параметров заполнения документа.
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ДокументОснование",   Неопределено);
	ПараметрыЗаполнения.Вставить("РеквизитыШапки",      Неопределено);
	
	ПараметрыЗаполнения.Вставить("Склад",               Неопределено);
	ПараметрыЗаполнения.Вставить("СкладОтгрузки",       Неопределено);
	
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру",   Неопределено);
	ПараметрыЗаполнения.Вставить("ПараметрыОформления", Новый Структура("ПоЗаказам, ПоОрдерам"));
	
	ПараметрыЗаполнения.Вставить("КлючевыеПоля",        "Номенклатура, Характеристика, Серия, Назначение, НазначениеОтправителя, Склад");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Производит инициализацию структуры параметров заполнения по реквизитам шапки и по заказам.
//
// Параметры:
//  ПараметрыЗаполнения	 - см. ПередачаПереработчику.ПараметрыЗаполненияДокумента
//  РеквизитыШапки		 - Структура - Содержит ключи на основании которых будет происходить заполнение
//  МассивЗаказов		 - Массив - Ссылки на заказы по которым будет происходить заполнение.
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.ДокументОснование = МассивЗаказов;
	ПараметрыЗаполнения.РеквизитыШапки	  = РеквизитыШапки;
	
	ПараметрыЗаполнения.СкладОтгрузки     =
		?(ЗначениеЗаполнено(ПараметрыЗаполнения.Склад), ПараметрыЗаполнения.Склад, РеквизитыШапки.Склад);
	
	Если ПараметрыЗаполнения.ПараметрыОформления.ПоОрдерам = Неопределено Тогда
		
		Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру = Неопределено Тогда
			
			ПараметрыЗаполнения.ПараметрыОформления.ПоОрдерам = 
				НакладныеСервер.ЗаполнятьПоОрдеру(ПараметрыЗаполнения.СкладОтгрузки);
			
		Иначе
			
			ПараметрыЗаполнения.ПараметрыОформления.ПоОрдерам = ПараметрыЗаполнения.ЗаполнятьПоОрдеру;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПараметрыОформления.ПоЗаказам = Неопределено Тогда
		
		ПараметрыЗаполнения.ПараметрыОформления.ПоЗаказам = Не ПараметрыЗаполнения.ПараметрыОформления.ПоОрдерам;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру для создания документа по заказам
//  Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
//  МассивСсылок - Массив - заказы на внутреннее потребление, по которым необходимо ввести накладную.
//  СвойстваЗаказов - Структура, Неопределено - 
//
// Возвращаемое значение:
//  Структура - структура, в которую будут помещены реквизиты шапки из массива заказов.
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов = Неопределено) Экспорт
	
	РеквизитыШапки = Новый Структура;
	
	ПродолжитьФормирование = ПереработкаНаСторонеВызовСервера.СформироватьДанныеЗаполненияПередачиСырья(
					МассивСсылок, Метаданные.Документы.ПередачаТоваровХранителю.Имя, РеквизитыШапки, СвойстваЗаказов);
	
	Если Не ПродолжитьФормирование Тогда
		
		Сообщения = Новый Массив;
		
		Для Каждого ТекущееСообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
			Сообщения.Добавить(ТекущееСообщение.Текст);
		КонецЦикла;
		
		ВызватьИсключение СтрСоединить(Сообщения, Символы.ПС);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыШапки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РеквизитыШапки;
	
КонецФункции

#КонецОбласти

#Область Проведение

// Возвращает параметры заполнения видов запасов для документа "Передача товаров хранителю".
// 
// Параметры:
// 	Объект - ДокументОбъект.ПередачаТоваровХранителю
// Возвращаемое значение:
// 	см. ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов
//
Функция ПараметрыЗаполненияВидовЗапасов(Объект) Экспорт
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.СторнируемыйДокумент = Объект.СторнируемыйДокумент;
	
	ОтборыВидовЗапасов = ПараметрыЗаполнения.ОтборыВидовЗапасов;
	
	ДоступныеТипыЗапасов = Новый Массив;
	ДоступныеТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.Товар);
	ДоступныеТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи);
	//++ НЕ УТКА
	ДоступныеТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.МатериалДавальца);
	ДоступныеТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.ПолуфабрикатДавальца);
	ДоступныеТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.ПродукцияДавальца);
	//-- НЕ УТКА
	
	ОтборыВидовЗапасов.ТипЗапасов = ДоступныеТипыЗапасов;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Отражает состояние заказа в регистре СостоянияЗаказовКлиентов
//
// Параметры:
//  Объект - ДокументОбъект - 
//  Отказ - Булево - 
//
Процедура ОтразитьСостояниеЗаказаКлиентов(Объект, Отказ) Экспорт
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Объект, Отказ, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Округление

// Заполняет признаки ЦеховаяКладовая и НужноОкруглять в строках таблицы
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - 
//  ПересчитатьКоличествоЕдиниц - Булево - 
//  Строки - Массив, Неопределено - массив обрабатываемых строк
//  
Процедура ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект, ПересчитатьКоличествоЕдиниц, Строки = Неопределено) Экспорт
	
	ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.Товары,,, Строки);
	
	Если ПересчитатьКоличествоЕдиниц Тогда
		ПересчитатьКоличествоЕдиниц(Объект);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество единиц
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - 
//
Процедура ПересчитатьКоличествоЕдиниц(Объект) Экспорт
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействиеПересчитатьКоличествоЕдиниц(СтруктураДействий);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Добавляет действия "ЗаполнитьПризнакЦеховаяКладовая" и "ПересчитатьКоличествоЕдиниц"
//
// Параметры:
//  СтруктураДействий - Структура - 
//
Процедура ДобавитьДействиеЗаполнитьПризнакЦеховаяКладовая(СтруктураДействий) Экспорт
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	
КонецПроцедуры

// Добавляет действие "ПересчитатьКоличествоЕдиниц"
//
// Параметры:
//  СтруктураДействий - Структура - 
//
Процедура ДобавитьДействиеПересчитатьКоличествоЕдиниц(СтруктураДействий) Экспорт
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц());
	
КонецПроцедуры

// Возвращает параметры перерасчета клиента единиц
//
// Возвращаемое значение:
//  Структура - см. ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц
//
Функция ПараметрыПересчетаКоличестваЕдиниц() Экспорт
	
	Возврат ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц();
	
КонецФункции

// Признак необходимости пересчета количество единиц
//
// Возвращаемое значение:
//  Булево - 
//
Функция НеобходимПересчетКоличествоЕдиниц() Экспорт

	Возврат Истина;

КонецФункции

// Возвращает параметры для округления
// 
// Возвращаемое значение:
//  Структура - элементы содержат структуру параметров округления:
//   *Товары - см. НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров
// 
Функция ПараметрыТЧДляОкругления() Экспорт
	
	ПараметрыТЧ = Новый Структура;
	
	ИмяТЧ = "Товары";
	ИмяПоляСклад = "Склад";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	Возврат ПараметрыТЧ;

КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

#Область ТекстыЗапросовЗаполненияСпискаРаспоряжений

// Возвращает текст запроса распоряжений доступных в накладной.
// 
// Параметры:
//  ПараметрыТекстаЗапроса - см. ОбщегоНазначенияУТ.ПараметрыТекстаЗапросаРаспоряженийНакладных
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаРаспоряженияНакладной(ПараметрыТекстаЗапроса) Экспорт
	
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
		ПараметрыТекстаЗапроса.Отбор,
		"ИСТИНА",
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЗаказПереработчику2_5.ОбеспечениеМатериаламиИРаботами КАК ТаблицаОбеспечениеМатериаламиИРаботами
		|ГДЕ
		|	ТаблицаОбеспечениеМатериаламиИРаботами.Ссылка = ТаблицаРаспоряжений.Ссылка
		|	И ТаблицаОбеспечениеМатериаламиИРаботами.Склад В ИЕРАРХИИ (&Склад)",
		"В");
	
	Возврат Документы.ЗаказПереработчику2_5.ТекстЗапросаРаспоряженийНакладных(ПараметрыТекстаЗапроса);
	
КонецФункции

#КонецОбласти

// Редактирует текст запроса пересчета в валюту документа
//
// Параметры:
//  ТекстЗапроса - Строка - редактируемый текст запроса.
//
Процедура РедактироватьТекстЗапросаПересчетаВВалютуДокумента(ТекстЗапроса) Экспорт
	
	ЗаменитьИсточникТаблицыЗаказов(ТекстЗапроса);
	
КонецПроцедуры

// Редактирует текст запроса по остаткам заказов
//
// Параметры:
//  ТекстЗапроса - Строка - редактируемый текст запроса.
//
Процедура РедактироватьТекстЗапросаПоОстаткамЗаказов(ТекстЗапроса) Экспорт
	
	//Источники
	ЗаменитьИсточникТаблицыТоваровЗаказов(ТекстЗапроса);
	ЗаменитьИсточникТаблицыЗаказов(ТекстЗапроса);
	
	// Таблица ЗаказКлиента
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказКлиентаСоглашение",                "&Соглашение");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказКлиентаВернутьМногооборотнуюТару", "ЛОЖЬ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказКлиентаНазначениеОтправителя",     "ЗаказТовары.Назначение");
	
	//++ НЕ УТКА
	ТекстЗапроса =
		СтрЗаменить(
			ТекстЗапроса,
			"&ЗаказКлиентаНазначениеЭтап",
			"ВЫБОР
			|	КОГДА НЕ ЗаказТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПереданРанее)
			|		И НЕ ЗаказТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|		И ЗаказТовары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5)
			|		ТОГДА ЗаказТовары.Назначение
			|	КОГДА ЗаказТовары.Ссылка.ЗаказПереработчику.ПередачаПереработчикуПоНазначениюЗаказа
			|		ТОГДА ЗаказТовары.Ссылка.ЗаказПереработчику.НазначениеПередачи
			|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|КОНЕЦ");
	//-- НЕ УТКА
	
	ТекстЗапроса =
		СтрЗаменить(
			ТекстЗапроса,
			"&ЗаказКлиентаНазначение",
			"ВЫБОР
			//++ НЕ УТКА
			|	КОГДА НЕ ЗаказТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПереданРанее)
			|		И НЕ ЗаказТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|		И ЗаказТовары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5)
			|		ТОГДА ЗаказТовары.Назначение
			//-- НЕ УТКА
			|	КОГДА ЗаказТовары.Ссылка.ПередачаПереработчикуПоНазначениюЗаказа
			|		ТОГДА ЗаказТовары.Ссылка.НазначениеПередачи
			|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|КОНЕЦ");
	
	// Таблица ТоварыЗаказа
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТоварыЗаказаСуммаСНДС", "ТоварыЗаказа.Сумма");
	
	// Таблица ЗаказТовары
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказТоварыНоменклатураНабора",   "ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказТоварыХарактеристикаНабора", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказТоварыВидЦены",              "ЗаказТовары.Ссылка.ВидЦены");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОстаткиСумма",             "ТаблицаОстатки.Количество * ЗаказТовары.Цена");
	
КонецПроцедуры

// Заменяет источник заказов с "Документ.ЗаказКлиента" на "Документ.ЗаказПереработчику2_5".
//
// Параметры:
//  ТекстЗапроса - Строка - 
//
Процедура ЗаменитьИсточникТаблицыЗаказов(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказКлиента", "Документ.ЗаказПереработчику2_5");
	
КонецПроцедуры

// Заменяет источник товаров заказов с "Документ.ЗаказКлиента.Товары" на "Документ.ЗаказПереработчику2_5.ОбеспечениеМатериаламиИРаботами".
//
// Параметры:
//  ТекстЗапроса - Строка - 
//
Процедура ЗаменитьИсточникТаблицыТоваровЗаказов(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказКлиента.Товары", "Документ.ЗаказПереработчику2_5.ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

#КонецОбласти

#Область ДокументЗаказ

// Возвращает право доступа заказа переработчику.
//
// Параметры:
//  ИмяПраво - Строка - имя проверяемого права.
//
// Возвращаемое значение:
//  Булево - 
//
Функция ПравоДоступаЗаказа(ИмяПраво) Экспорт
	
	Возврат ПравоДоступа(ИмяПраво, Метаданные.Документы.ЗаказПереработчику2_5);
	
КонецФункции

// Возвращает менеджер документа заказ переработчику (2.5)
//
// Возвращаемое значение:
//  ДокументМенеджер.ЗаказКлиента - 
//
Функция МенеджерЗаказа() Экспорт
	
	Возврат Документы.ЗаказПереработчику2_5;
	
КонецФункции

// Возвращает описание типа для заказа переработчику
// 
// Возвращаемое значение:
//  ОписаниеТипов - 
//
Функция ОписаниеТипаЗаказа() Экспорт
	
	Возврат Новый ОписаниеТипов("ДокументСсылка.ЗаказПереработчику2_5");
	
КонецФункции

// Возвращает типа для заказа переработчику
// 
// Возвращаемое значение:
//  Тип - 
//
Функция ТипЗаказа() Экспорт
	
	Возврат Тип("ДокументСсылка.ЗаказПереработчику2_5");
	
КонецФункции

// Возвращает синоним заказа.
//
// Возвращаемое значение:
//  Строка - синоним заказа.
//
Функция СинонимЗаказа() Экспорт
	
	Возврат НСтр("ru = 'Заказ переработчику';
				|en = 'Subcontracting purchase order'");
	
КонецФункции

#КонецОбласти

#Область АктОРасхождениях

// Возвращает тип основания акта о расхождении
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОснованияАктаОРасхождении
//
Функция ТипОснованияАкта() Экспорт
	
	Возврат Перечисления.ТипыОснованияАктаОРасхождении.ПередачаТоваровПереработчику;
	
КонецФункции

// Возвращает признак оформления документа возврата через документ акта о расхождении
//
// Возвращаемое значение:
//  Булево - 
//
Функция ОформитьВозвратАкта() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает постфикс имени акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПостфиксИмениАкта() Экспорт
	
	Возврат НСтр("ru = 'после передачи сырья переработчику';
				|en = 'following ""Goods issue — Subcontracting services received""'");
	
КонецФункции

// Возвращает заголовок формы акта о расхождении при создании
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыСозданияАкта() Экспорт
	
	Возврат НСтр("ru = 'Акт о расхождениях после передачи сырья переработчику (Создание)';
				|en = 'Subcontractor stock fill-up discrepancy report (Create)'");
	
КонецФункции

// Возвращает заголовок формы акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыАкта() Экспорт
	
	Возврат НСтр("ru = 'Акты о расхождениях после передачи сырья переработчику';
				|en = 'Subcontractor stock fill-up discrepancy reports'");
	
КонецФункции

// Возвращает заголовок партнера акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокПартнераАкта() Экспорт
	
	Возврат НСтр("ru = 'Переработчик';
				|en = 'Subcontractor'");
	
КонецФункции

// Возвращает заголовок документа основания акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокДокументаОснованияАкта() Экспорт
	
	Возврат НСтр("ru = 'Передача переработчику';
				|en = 'Customer stock fill-up'");
	
КонецФункции

// Возвращает подсказку договора акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПодсказкаДоговораАкта() Экспорт
	
	Возврат НСтр("ru = 'Договор, в рамках которого оформлена передача';
				|en = 'Contract under which transfer is registered'");
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

// Возвращает хозяйственную операцию документа.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперация() Экспорт
	
	Возврат Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5;
	
КонецФункции

// Возвращает хозяйственную операцию договора.
//
// Параметры:
//  ЭтоПроизводствоВЕАЭС - Булево - признак производства у переработчика в странах ЕАЭС.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперацияДоговора(ЭтоПроизводствоВЕАЭС = Ложь) Экспорт
	
	Возврат ПереработкаНаСтороне.ХозяйственнаяОперацияДоговора(ЭтоПроизводствоВЕАЭС);
	
КонецФункции

// Возвращает массив хозяйственных операции распоряжений.
//
// Параметры:
//  ЭтоПроизводствоВЕАЭС - Булево - признак производства у переработчика в странах ЕАЭС.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ХозяйственныеОперации -
//
Функция ХозяйственныеОперацииРаспоряжений(ЭтоПроизводствоВЕАЭС = Ложь) Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(ХозяйственнаяОперацияДоговора(ЭтоПроизводствоВЕАЭС));
	
	Возврат МассивОпераций;
	
КонецФункции

#КонецОбласти

#Область ФункциональныеОпции

// Возвращает признак применяемости соглашений с клиентами
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСКлиентамиПрименимы() Экспорт
	
	Возврат ПереработкаНаСтороне.СоглашенияСКлиентамиПрименимы();
	
КонецФункции

// Возвращает признак использование соглашений с клиентами
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьСоглашенияСКлиентами() Экспорт
	
	Возврат ПереработкаНаСтороне.ИспользоватьСоглашенияСКлиентами();

КонецФункции

// Возвращает признак использование расширенных возможностей заказа клиента
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьРасширенныеВозможностиЗаказаКлиента() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак использование заказов клиентов
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьЗаказыКлиентов() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПереработчикам2_5");

КонецФункции

// Возвращает признак использование реализации по нескольким заказов.
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьРеализациюПоНесколькимЗаказам() Экспорт

	Возврат Истина;

КонецФункции

// Возвращает признак реализации сверх заказа.
// 
// Возвращаемое значение:
// 	Булево
//
Функция РеализацияСверхЗаказа() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак отклонения от условий продаж.
// 
// Возвращаемое значение:
// 	Булево
//
Функция ОтклонениеОтУсловийПродаж() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОснованиеДляПечати

// Возвращает структуру основания по данными документа
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура, ДокументОбъект.ПередачаСырьяПереработчику - Объект документа, по которому необходимо
// 																			   получить текст основания.
// 	
// Возвращаемое значение:
//  Структура - Описание:
//   * Основание - Строка - представление
//   * ОснованиеДата - Дата - дата
//   * ОснованиеНомер - Строка - номер
//
Функция СтруктураОснованияДляПечати(Объект) Экспорт
	
	СтруктураОснования = СтруктураОснования(Объект);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "Дата, Номер");
	КонецЕсли;
	
	ТекстОснование = "";
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			ТекстОснование = НСтр("ru = 'в переработку на давальческой основе по договору №%1 от %2';
									|en = 'subcontracting services under agreement No.%1, %2'");
			ТекстОснование = СтрШаблон(
								ТекстОснование,
								Строка(РеквизитыДоговора.Номер),
								Формат(РеквизитыДоговора.Дата, "ДЛФ=DD"));
			
		Иначе
			ТекстОснование = НСтр("ru = 'в переработку на давальческой основе';
									|en = 'To tolling'");
		КонецЕсли;
		
	    ТекстОснование = СтруктураОснования.Основание + ", " + ТекстОснование;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			ТекстОснование = НСтр("ru = 'В переработку на давальческой основе по договору №%1 от %2';
									|en = 'subcontracting services under agreement No.%1, %2'");
			ТекстОснование = СтрШаблон(
								ТекстОснование,
								Строка(РеквизитыДоговора.Номер),
								Формат(РеквизитыДоговора.Дата, "ДЛФ=DD"));
		Иначе
			ТекстОснование = НСтр("ru = 'В переработку на давальческой основе';
									|en = 'To tolling'");
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОснования.Основание = ТекстОснование;
	
	Возврат СтруктураОснования;
	
КонецФункции

// Возвращает таблицу значений по умолчанию для реквизита "Основание"
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура, ДокументОбъект.ВозвратТоваровПоставщику - Объект документа, по которому необходимо
// 																			 получить список выбора.
// 	
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//  * Основание - Строка - представление
//  * ОснованиеДата - Дата - дата
//  * ОснованиеНомер - Строка - номер
//
Функция ТаблицаОснованийДляПечати(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "Дата, Номер");
	КонецЕсли;
	
	ТаблицаОснований = Новый ТаблицаЗначений;
	ТаблицаОснований.Колонки.Добавить("Основание",      Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ТаблицаОснований.Колонки.Добавить("ОснованиеДата",  Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата))); 
	ТаблицаОснований.Колонки.Добавить("ОснованиеНомер", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(128)));
	
	СтруктураОснования = СтруктураОснования(Объект, Истина);
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			СтруктураОснования.Основание = 
					СтруктураОснования.Основание 
					+ ", " 
					+ СтрШаблон(НСтр("ru = 'в переработку на давальческой основе по договору №%1 от %2';
									|en = 'subcontracting services under agreement No.%1, %2'"), 
							Строка(РеквизитыДоговора.Номер), 
							Формат(РеквизитыДоговора.Дата, "ДЛФ=DD"));
		Иначе
			СтруктураОснования.Основание = 
					СтруктураОснования.Основание 
					+ ", " 
					+ НСтр("ru = 'в переработку на давальческой основе';
							|en = 'to tolling'");
		КонецЕсли; 
				
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
	КонецЕсли;
	
	СтруктураОснования = СтруктураОснования(Объект, Ложь);
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		
		Если ТаблицаОснований.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				СтруктураОснования.Основание = СтруктураОснования.Основание 
						+ ", " 
						+ СтрШаблон(НСтр("ru = 'в переработку на давальческой основе по договору №%1 от %2';
										|en = 'subcontracting services under agreement No.%1, %2'"), 
							Строка(РеквизитыДоговора.Номер), 
							Формат(РеквизитыДоговора.Дата, "ДЛФ=DD"));
			Иначе
				СтруктураОснования.Основание = СтруктураОснования.Основание 
						+ ", " 
						+ НСтр("ru = 'в переработку на давальческой основе';
								|en = 'to tolling'");
			КонецЕсли;
		КонецЕсли;
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
		
	КонецЕсли;
	
	Если ТаблицаОснований.Количество() = 0 Тогда
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			ДобавленнаяСтрока.Основание = СтрШаблон(НСтр("ru = 'В переработку на давальческой основе по договору №%1 от %2';
														|en = 'subcontracting services under agreement No.%1, %2'"), 
															Строка(РеквизитыДоговора.Номер), 
															Формат(РеквизитыДоговора.Дата, "ДЛФ=DD"));
		Иначе
			ДобавленнаяСтрока.Основание = НСтр("ru = 'В переработку на давальческой основе';
												|en = 'To tolling'");
		КонецЕсли;
														
		ДобавленнаяСтрока.ОснованиеДата = ?(ЗначениеЗаполнено(Объект.Договор), РеквизитыДоговора.Дата, ""); 
		ДобавленнаяСтрока.ОснованиеНомер = ?(ЗначениеЗаполнено(Объект.Договор), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДоговора.Номер), ""); 
	КонецЕсли;
	
	Возврат ТаблицаОснований;
	
КонецФункции

#КонецОбласти

#Область Форма

//Получает договор по умолчанию.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - 
//  ОтборПоВалюте - Булево - 
//  ОтборПоНаправлениюДеятельности - Булево - 
//
// Возвращаемое значение:
//  СправочникСсылка.ДоговорыКонтрагентов - 
//
Функция ПолучитьДоговорПоУмолчанию(Объект, ОтборПоВалюте = Истина, ОтборПоНаправлениюДеятельности = Истина) Экспорт
	
	Возврат ПереработкаНаСтороне.ПолучитьДоговорПоУмолчанию(Объект);
	
КонецФункции

// Устанавливает доступность элемента договор.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//  Договор - СправочникСсылка.ДоговорыКонтрагентов, Неопределено -
//
Процедура УстановитьДоступностьДоговора(Форма, Объект, Договор = Неопределено) Экспорт
	
	ПереработкаНаСтороне.УстановитьДоступностьДоговора(Форма, Объект, Договор);

КонецПроцедуры

// Настраивает форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - содержит:
//           * Элементы - ВсеЭлементыФормы - содержит:
//              ** Партнер - ПолеВвода - содержит:
//                  *** Заголовок - Строка - 
//              ** ТоварыЗаказКлиента - ПолеВвода - содержит:
//                  *** Заголовок - Строка -
//              ** ЗакрытьЗаказ - КнопкаКоманднойПанели - содержит:
//                  *** Доступность - Булево - 
//              ** ЗакрытьЗаказы - КнопкаКоманднойПанели - содержит:
//                  *** Доступность - Булево - 
//  Номер - Число - 
//  Дата  - Дата - 
//
Процедура НастроитьФорму(Форма, Номер, Дата) Экспорт
	
	Элементы  = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок     = ЗаголовокФормыДокумента(Не ЗначениеЗаполнено(Параметры.Ключ), Номер, Дата);

	Элементы.Партнер.Заголовок            = НСтр("ru = 'Переработчик';
												|en = 'Subcontractor'");
	Элементы.ТоварыЗаказКлиента.Заголовок = НСтр("ru = 'Заказ переработчику';
												|en = 'Subcontracting purchase order'");
	
	ПравоНаИзменениеЗаказов = ПравоДоступаЗаказа("Изменение");
	Элементы.ЗакрытьЗаказ.Доступность  = ПравоНаИзменениеЗаказов;
	Элементы.ЗакрытьЗаказы.Доступность = ПравоНаИзменениеЗаказов;
	
	Элементы.Соглашение.Видимость = ИспользоватьСоглашенияСКлиентами();
	Элементы.ТоварыЗаполнитьЦеныПоСоглашению.Видимость = Элементы.Соглашение.Видимость;
	Элементы.ТоварыЗаполнитьЦеныПоДоговору.Видимость   = Ложь;
	
КонецПроцедуры

// Настраивает параметры выбора и связи параметров выбора реквизитов формы.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//
Процедура НастроитьПараметрыВыбораЭлементов(Форма, Объект) Экспорт
	
	ПереработкаНаСтороне.НастроитьПараметрыВыбораЭлементов(Форма, Объект);
	
	Элементы = Форма.Элементы;
	
	// Вид цены
	Если Не Элементы.Найти("ТоварыВидЦены") = Неопределено Тогда
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьПриВыпускеПродукции", Истина));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВыводитьПроизвольныйВидЦены", Истина));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует));
		
		Элементы.ТоварыВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок формы документа передача товаров хранителю.
//
// Параметры:
//  НовыйДокумент - Булево - 
//  Номер - Число - 
//  Дата - Дата - 
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыДокумента(НовыйДокумент, Номер, Дата) Экспорт
	
	Если НовыйДокумент Тогда
		Заголовок = СтрШаблон(НСтр("ru = '%1 (создание)';
									|en = '%1 (Create)'"), ПредставлениеОбъекта());
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = '%1 %2 от %3';
									|en = '%1 %2 dated %3'"), ПредставлениеОбъекта(), Номер, Дата);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Возвращает представление документа передача товаров хранителю.
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПредставлениеОбъекта() Экспорт
	
	Возврат НСтр("ru = 'Передача сырья переработчику';
				|en = 'Goods issue — Subcontracting services received'");
	
КонецФункции

// Возвращает признак, что склад является группой и группы можно использовать в документах передачи.
// 
// Параметры:
//  Склад - СправочникСсылка.Склады
// 
// Возвращаемое значение:
//  Булево - Это группа складов
//
Функция ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Склад) Экспорт
	
	Возврат Справочники.Склады.ЭтоГруппа(Склад);
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурнале

// Возвращает текст гиперссылки перехода из журнала документов в рабочее место оформления.
// 
// Параметры:
// 	Параметры - Структура - параметры формирования текста гиперссылки.
// Возвращаемое значение:
// 	ФорматированнаяСтрока, Неопределено - текст гиперссылки перехода в рабочее место оформления передач.
//
Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПраваНаЧтение = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов)
						И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
	
	Если Не ЕстьПраваНаЧтение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Передача сырья';
							|en = 'Components transfer'");
	ТекстСсылки = "Обработка.ЖурналДокументовПередачиВПереработку2_5.Форма.КОформлениюНакладных/СтраницаПередачиСырья";
	
	ЕстьДокументыКОформлению = Обработки.ЖурналДокументовПередачиВПереработку2_5.ЕстьДокументыКОформлению(
									Параметры, Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5);
	
	ЦветГиперссылки = ?(ЕстьДокументыКОформлению, Неопределено, ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,, ЦветГиперссылки,, ТекстСсылки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текст основания по данным документа и указанному порядку расчетов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ПередачаТоваровХранителю - Объект документа, по которому необходимо
//																			   получить текст основания.
//	ПоДоговору - Булево - текст оснвоания строится на основании договора, иначе на основании заказа
//						  (если неопределено, то в зависимости заполненных реквизитов).
//
// Возвращаемое значение:
//  Структура - Описание:
//  * Основание - Строка - представление
//  * ОснованиеДата - Дата - дата
//  * ОснованиеНомер - Строка - номер
//
Функция СтруктураОснования(Объект, ПоДоговору = Неопределено)
	
	СтруктураОснование = Новый Структура;
	СтруктураОснование.Вставить("Основание");
	СтруктураОснование.Вставить("ОснованиеНомер");
	СтруктураОснование.Вставить("ОснованиеДата");
	
	Если Не ПоДоговору = Ложь И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.НаименованиеДляПечати КАК Основание,
		|	ДоговорыКонтрагентов.Дата КАК ОснованиеДата,
		|	ДоговорыКонтрагентов.Номер КАК ОснованиеНомер
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Объект.Договор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтруктураОснование.Основание = СокрЛП(Выборка.Основание);
			СтруктураОснование.ОснованиеДата = Выборка.ОснованиеДата;
			СтруктураОснование.ОснованиеНомер = СокрЛП(Выборка.ОснованиеНомер);
		КонецЕсли;
		
	ИначеЕсли Не ПоДоговору = Истина И Объект.ПередачаПоЗаказам Тогда
		
		МассивЗаказов = Неопределено;
		Если ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
			
			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(Объект.ЗаказКлиента);
			
		ИначеЕсли Объект.Товары.Количество() <> 0 Тогда
			
			Если ТипЗнч(Объект) = Тип("Структура") Тогда
				МассивЗаказов = Объект.Товары.ВыгрузитьКолонку("ЗаказКлиента");
			Иначе
				МассивЗаказов = Объект.Товары.Выгрузить(, "ЗаказКлиента").ВыгрузитьКолонку("ЗаказКлиента");
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивЗаказов <> Неопределено Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыКлиентов.НомерПоДаннымПартнера КАК НомерПоДаннымПартнера,
			|	ЗаказыКлиентов.ДатаПоДаннымПартнера  КАК ДатаПоДаннымПартнера,
			|	ЗаказыКлиентов.Номер                 КАК Номер,
			|	ЗаказыКлиентов.Дата                  КАК Дата,
			|	&СинонимЗаказа                       КАК Синоним
			|ИЗ
			|	Документ.ЗаказПереработчику2_5 КАК ЗаказыКлиентов
			|ГДЕ
			|	ЗаказыКлиентов.Ссылка В(&МассивЗаказов)");
			
			Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
			Запрос.УстановитьПараметр("СинонимЗаказа", СинонимЗаказа());
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТекстПоЗаказам = "";
			ОдноОснование = Выборка.Количество() = 1;
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.НомерПоДаннымПартнера) И ЗначениеЗаполнено(Выборка.ДатаПоДаннымПартнера) Тогда
					
					ИнформацияОЗаказе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 № %2 от %3';
							|en = '%1 No. %2 from %3'"),                    // Строка с параметрами
						Выборка.Синоним,                                 // 1 параметр
						Выборка.НомерПоДаннымПартнера,                   // 2 параметр
						Формат(Выборка.ДатаПоДаннымПартнера, "ДЛФ=DD")); // 3 параметр
					ДатаПоЗаказам  = Выборка.ДатаПоДаннымПартнера;
					НомерПоЗаказам = Выборка.НомерПоДаннымПартнера;
				Иначе
					
					ИнформацияОЗаказе = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Выборка, Выборка.Синоним);
					ДатаПоЗаказам  = Выборка.Дата;
					НомерПоЗаказам = Выборка.Номер;
				КонецЕсли;
				
				ТекстПоЗаказам = ТекстПоЗаказам + ", " + ИнформацияОЗаказе;
				
			КонецЦикла;
			
			СтруктураОснование.Основание      = СокрЛП(Сред(ТекстПоЗаказам, 3));
			СтруктураОснование.ОснованиеДата  = ?(ОдноОснование, ДатаПоЗаказам, "");
			СтруктураОснование.ОснованиеНомер = ?(ОдноОснование,ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерПоЗаказам),"");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОснование; // Возврат значения по умолчанию
	
КонецФункции

#КонецОбласти