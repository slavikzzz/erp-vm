
#Область ПрограммныйИнтерфейс

// Открывает расшифровку статического отчета.
//
// Параметры:
//	ИмяОтчета - Строка - Имя отчета.
//	ИмяФормы - Строка - Имя формы отчета.
//	ИмяПоля - Строка - Имя поля формы отчета.
//	Параметры - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация.
//		* мДатаНачалаПериодаОтчета - Дата - Дата начала периода отчета.
//		* мДатаКонцаПериодаОтчета - Дата - Дата окончания периода отчета.
//		* НомерСтроки - Число - Номер строки.
//		* АдресВременногоХранилищаРасшифровки - Строка - Адрес временного хранилища с расшифровкой отчета.
//
Процедура ОткрытьРасшифровкуСтатистики(ИмяОтчета, ИмяФормы, ИмяПоля, Параметры)  Экспорт
	
	Перем Организация, НачалоПериода, КонецПериода, НомерСтроки, АдресВременногоХранилищаРасшифровки;
	
	Если ТипЗнч(ИмяПоля) = Тип("Массив") Тогда
		
		Если ИмяПоля.Количество() > 0 Тогда
			ИмяПоля = ИмяПоля[0];	
		КонецЕсли;
		
	КонецЕсли;	
	
	Параметры.Свойство("Организация", 				Организация);
	Параметры.Свойство("мДатаНачалаПериодаОтчета", 	НачалоПериода);
	Параметры.Свойство("мДатаКонцаПериодаОтчета", 	КонецПериода);
	Параметры.Свойство("НомерСтроки", 				НомерСтроки);
	Параметры.Свойство("АдресВременногоХранилищаРасшифровки", АдресВременногоХранилищаРасшифровки);
		
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("Организация", 	Организация);
	ПараметрыОтчета.Вставить("НачалоПериода", 	НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода", 	КонецПериода);
	ПараметрыОтчета.Вставить("ИмяПоля", 		ИмяПоля);
	ПараметрыОтчета.Вставить("ИмяФормы", 		ИмяФормы);
	ПараметрыОтчета.Вставить("ИмяОтчета", 		ИмяОтчета);
	ПараметрыОтчета.Вставить("НомерСтроки", 	НомерСтроки);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", 	АдресВременногоХранилищаРасшифровки);
	
	Если ОткрытьФорму("Отчет.РасшифровкаСтатистики.Форма.ФормаОтчета", ПараметрыОтчета,,Истина) = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Для выбранной ячейки расшифровка не существует.';
									|en = 'Drill-down is not available for the selected cell.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли; 
		
КонецПроцедуры

// Вызывается из обработчика события НачалоВыбора для поля отбора.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ПолеФормы - Поле в колонке табличной части Отбор, для которой вызван обработчик.
//	ДанныеВыбора - СписокЗначений - Список значений для выбора.
//	СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки.
//	СписокПараметров - Структура - Содержит 
//		* Ключ - Имя поля, по которому ограничивается список доступных для выбора значений.
//		* Значение - Значение поля, по которому ограничивается список доступных для выбора значений.
//
Процедура ОтборыПравоеЗначениеНачалоВыбора(КомпоновщикНастроек, Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	Элементы = Форма.Элементы;
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	Если Элементы.Отборы.ТекущиеДанные <> Неопределено Тогда
		Поле         = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
		Значение     = Элементы.Отборы.ТекущиеДанные.ПравоеЗначение;
		
		ВидСравненияСтрока = Элементы.Отборы.ТекущиеДанные.ВидСравнения;
		
		ТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
		
		// Принятая в конфигурации обработка работает только для равенства/неравенства.
		Если Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
			ИЛИ Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно) Тогда
			
			Для Каждого СтрокаОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
						ЗначениеОтбора = Неопределено;
						Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
							Если СтрокаОтбора.ПравоеЗначение.Количество() > 0 Тогда
								ЗначениеОтбора = СтрокаОтбора.ПравоеЗначение[0].Значение;
							КонецЕсли;
						Иначе
							ЗначениеОтбора = СтрокаОтбора.ПравоеЗначение;
						КонецЕсли;
						ТипЗначенияПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, СтрокаОтбора.ЛевоеЗначение, "Тип");
						
						Если ТипЗначенияПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
							СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Склад Тогда
							СписокПараметров.Вставить("Склад", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
							СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
							СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			БухгалтерскиеОтчетыКлиент.ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти