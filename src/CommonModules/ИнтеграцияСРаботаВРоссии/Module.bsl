#Область ПрограммныйИнтерфейс

// Возвращает текущую настройку использования передачи на портале Работа в России.
//
// Возвращаемое значение:
//  Булево - если Истина, передача доступна.
//
Функция ДоступнаПередачаДокументовНаРаботаВРоссии() Экспорт
	
	// Не всем потребителям требуются базовые роли БЗК.
	Если ПравоДоступа("Чтение", Метаданные.Константы.ИспользоватьИнтеграциюСРаботаВРоссии) Тогда
		Возврат Константы.ИспользоватьИнтеграциюСРаботаВРоссии.Получить();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Производит передачу на портал присоединенного файла.
//
// Параметры:
//   ПрисоединенныйФайл - Справочник, ссылка на присоединенный файл.
//
Процедура ПередатьНаПортал(ПрисоединенныйФайл) Экспорт
	
	ИдентификаторДокумента = РегистрыСведений.ИдентификаторыДокументовНаРаботаВРоссии.ИдентификаторДокумента(ПрисоединенныйФайл);
	Если ИдентификаторДокумента <> Неопределено Тогда
		
		Организация = ОрганизацияПрисоединенногоФайла(ПрисоединенныйФайл);
		Настройки = НастройкиАвторизации(Организация);
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
		ПередатьПодписи(Настройки, ИдентификаторДокумента, Строка(ПрисоединенныйФайл), УстановленныеПодписи);
		
		УдалитьФайлИзОбработки(ПрисоединенныйФайл);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = Новый УникальныйИдентификатор;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры);
	Если ВРег(ДанныеФайла.Расширение) <> "PDF" Тогда
		УдалитьФайлИзОбработки(ПрисоединенныйФайл);
		ВызватьИсключение ТекстОшибки(НСтр("ru = 'Допускается передача только документов в формате Adobe Acrobat (с расширением - .pdf).';
											|en = 'Only documents in Adobe Acrobat format (with the pdf extension) can be transmitted.'"));
	КонецЕсли;
	
	Если ДанныеФайла.Размер > МаксимальныйРазмерДокумента() Тогда
		УдалитьФайлИзОбработки(ПрисоединенныйФайл);
		ВызватьИсключение ТекстОшибки(СтрШаблон(НСтр("ru = 'Не допускается передача документов размером более %Мб.';
													|en = 'Cannot transmit documents larger than %MB.'"),
			Формат(МаксимальныйРазмерДокумента() / 1024 / 1024, "ЧДЦ=1; ЧГ=")));
	КонецЕсли;
	
	Организация = ОрганизацияПрисоединенногоФайла(ПрисоединенныйФайл);
	
	Если ПередатьПрисоединенныйФайл(Организация, ДанныеФайла) Тогда
		УдалитьФайлИзОбработки(ПрисоединенныйФайл);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет в фоновом режиме передачу готовых для этого печатных форм.
//
Процедура ВыполнитьПередачуПечатныхФорм() Экспорт
	
	Если Не ДоступнаПередачаДокументовНаРаботаВРоссии() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданияКИсполнению = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
		Ложь, Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьНаРаботаВРоссии);
	
	СписокЗаданий = ЗаданияКИсполнению.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьНаРаботаВРоссии);
	Если СписокЗаданий <> Неопределено Тогда
		
		Для Каждого ЭлементСписка Из СписокЗаданий Цикл
			ПередатьНаПортал(ЭлементСписка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область НастройкиАвторизации

// Возвращает настройки авторизации на портале, сохраненные в безопасном хранилище.
//
// Возвращаемое значение:
//  Структура - с ключами:
//   * Пароль        - Строка
//   * Логин         - Строка
//   * Идентификатор - Строка
//
Функция НастройкиАвторизации(Знач Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючиНастроек = "Пароль,Логин,Идентификатор,Токен,ИспользоватьТокен";
	
	Настройки = Новый Структура(КлючиНастроек);
	Настройки.Вставить("Организация");
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(Настройки);
	КонецЕсли;
	
	СохраненныеНастройки = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, КлючНастроекОрганизации());
	Если СохраненныеНастройки = Неопределено Или (СохраненныеНастройки.Токен = Неопределено И СохраненныеНастройки.Логин = Неопределено) Тогда
		Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ИспользоватьИнтеграциюСРаботаВРоссии");
		СохраненныеНастройки = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, КлючиНастроек);
	Иначе
		ЗаполнитьЗначенияСвойств(Настройки, СохраненныеНастройки);
		Настройки.Организация = Организация;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Настройки, СохраненныеНастройки);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает признак использования ПРР Организацией.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Проверяемая организация.
// 
// Возвращаемое значение:
//   Булево - Если Истина, то ПРР используется организацией.
//
Функция ОрганизацияИспользуетПРР(Организация) Экспорт
	
	Настройки = НастройкиАвторизации(Организация);
	Возврат Настройки.Организация = Организация;
	
КонецФункции
	
// Сохраняет настройки авторизации на портале в безопасном хранилище.
//
// Параметры:
//  Пароль        - Строка
//  Логин         - Строка
//  Идентификатор - Строка
//
Процедура ЗапомнитьНастройкиАвторизации(Организация, Логин, Пароль, Идентификатор, Токен, ИспользоватьТокен) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Организация <> Неопределено Тогда
		Владелец = Организация;
	Иначе
		Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Константы.ИспользоватьИнтеграциюСРаботаВРоссии.ПолноеИмя());
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("Логин", Логин);
	Настройки.Вставить("Пароль", Пароль);
	Настройки.Вставить("Идентификатор", Идентификатор);
	Настройки.Вставить("Токен", Токен);
	Настройки.Вставить("ИспользоватьТокен", ИспользоватьТокен);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Настройки, КлючНастроекОрганизации());
	
КонецПроцедуры

Процедура УдалитьНастройкиАвторизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Организация <> Неопределено Тогда
		Владелец = Организация;
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, КлючНастроекОрганизации());
	Иначе
		Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Константы.ИспользоватьИнтеграциюСРаботаВРоссии.ПолноеИмя());
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, "Логин, Пароль, Идентификатор, Токен");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания ПолучениеДокументовРаботаВРоссии
//
Процедура ПолучениеДокументовРаботаВРоссии() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеДокументовРаботаВРоссии);
	Если ЕстьАктивныеФоновыеЗаданияПолучениеДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	БылиОшибки = ПолучитьАрхивыДокументов();
	
	Если БылиОшибки Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,,
			НСтр("ru = 'Получение архивов документов завершено с ошибками.';
				|en = 'Получение архивов документов завершено с ошибками.'"));
	КонецЕсли;
	
КонецПроцедуры

Функция КомандаПодписатьФормыПечатьДокументов(Форма) Экспорт
	Возврат Форма.Команды.Найти(ИмяКомандыПодписатьФормыПечатьДокументов());
КонецФункции

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ДоступнаПередачаДокументовНаРаботаВРоссии() Тогда
		
		Если Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм") Тогда
			
			КомандаФормы = КомандаПодписатьФормыПечатьДокументов(Форма);
			Если КомандаФормы = Неопределено Тогда
				
				СвойстваКоманды = СвойстваКомандыПередачиНаПорталРаботаВРоссии();
				
				КомандаФормы = Форма.Команды.Добавить(ИмяКомандыПодписатьФормыПечатьДокументов());
				КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
				КомандаФормы.Заголовок = СвойстваКоманды.Заголовок;
				КомандаФормы.Подсказка = СвойстваКоманды.Подсказка;
				КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
				КомандаФормы.Картинка = СвойстваКоманды.Картинка;
				
				КнопкаФормы = КадровыйЭДО.РазместитьКомандуНаФормеПечатьДокументов(Форма, КомандаФормы);
				Если КнопкаФормы <> Неопределено Тогда
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
					КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриСозданииФормыСпискаФайлов
//
Процедура ПриСозданииФормыСпискаФайлов(Форма) Экспорт
	
	Если ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки("Справочник." + Форма.ИмяСправочникаХранилищаФайлов) Тогда
		
		Если ДоступнаПередачаДокументовНаРаботаВРоссии() Тогда
			
			КнопкаПередатьНаРаботаВРоссии = Форма.Элементы.Найти("ПередатьНаРаботаВРоссии");
			Если КнопкаПередатьНаРаботаВРоссии <> Неопределено Тогда
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьНаПорталДокументыПоОписаниямПечатныхФорм(ОписанияПечатныхФорм) Экспорт
	
	Для Каждого ОписаниеПечатнойФормы Из ОписанияПечатныхФорм Цикл
		
		Организация = Неопределено;
		
		Настройки = НастройкиАвторизации(Организация);
		
		ИдентификаторДокумента = ОтправитьДокумент(Настройки, ОписаниеПечатнойФормы.Название, ОписаниеПечатнойФормы.ИмяФайла,
			ПолучитьИзВременногоХранилища(ОписаниеПечатнойФормы.АдресВХранилище),, Истина);

		Если ИдентификаторДокумента = Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		УстановленныеПодписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеПечатнойФормы.СвойстваПодписи);
		
		Если ЗначениеЗаполнено(УстановленныеПодписи) Тогда
			ПередатьПодписи(Настройки, ИдентификаторДокумента, ОписаниеПечатнойФормы.ИмяФайла, УстановленныеПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваКомандыПередачиНаПорталРаботаВРоссии() Экспорт
	Возврат Новый Структура("Заголовок,Подсказка,Картинка",
		НСтр("ru = 'Передать на ""Работа в России""';
			|en = 'Pass to ""Work in Russia""'"),
		НСтр("ru = 'Подписать и передать на портал ""Работа в России""';
			|en = 'Sign and pass to ""Work in Russia""'"),
		БиблиотекаКартинок.ПередатьНаРаботаВРоссии);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиАвторизации

Функция КлючНастроекОрганизации()
	
	Возврат "НастройкиИнтеграцииСРаботаВРоссии";
	
КонецФункции

Функция НастройкиАвторизацииЗаданы(Настройки, ВызыватьИсключение = Ложь)
	
	Если Настройки = Неопределено Тогда
		НастройкиЗаданы = Ложь;
	ИначеЕсли Настройки.ИспользоватьТокен = Истина Тогда
		НастройкиЗаданы = ЗначениеЗаполнено(Настройки.Токен)
	Иначе
		НастройкиЗаданы = ЗначениеЗаполнено(Настройки.Пароль)
			И ЗначениеЗаполнено(Настройки.Логин)
			И ЗначениеЗаполнено(Настройки.Идентификатор);
	КонецЕсли;
	
	Если Не НастройкиЗаданы Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Не заданы параметры авторизации';
								|en = 'Не заданы параметры авторизации'", ОбщегоНазначения.КодОсновногоЯзыка());
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстОшибки(ОписаниеОшибки);
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиЗаданы;
	
КонецФункции

#КонецОбласти

#Область РеализацияAPI

Функция ОтправитьДокумент(Настройки, Наименование, ИмяФайла, ДвоичныеДанныеФайла, ПрисоединенныйФайл = Неопределено, ВызыватьИсключение = Ложь)
	
	Если Не НастройкиАвторизацииЗаданы(Настройки, ВызыватьИсключение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		ДанныеПечатнойФормы = РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайлаПечатнойФормы(ПрисоединенныйФайл);
	Иначе
		ДанныеПечатнойФормы = Неопределено;
	КонецЕсли;
	
	ЗаписьДанных = Новый ЗаписьJSON;
	ЗаписьДанных.УстановитьСтроку();
	
	ЗаписьДанных.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("userId");
	ЗаписьДанных.ЗаписатьЗначение(ИДПользователя());
	
	ЗаписьДанных.ЗаписатьИмяСвойства("name");
	ЗаписьДанных.ЗаписатьЗначение(Наименование);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("fileName");
	ЗаписьДанных.ЗаписатьЗначение(ИмяФайла);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("file");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеВBase64(ДвоичныеДанныеФайла));
	
	Если ДанныеПечатнойФормы <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеПечатнойФормы.Дата) Тогда
			ЗаписьДанных.ЗаписатьИмяСвойства("docEffectiveDate");
			ЗаписьДанных.ЗаписатьЗначение(УниверсальноеВремя(ДанныеПечатнойФормы.Дата) - '19700101');
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечатнойФормы.Номер) Тогда
			ЗаписьДанных.ЗаписатьИмяСвойства("docNumber");
			ЗаписьДанных.ЗаписатьЗначение(ДанныеПечатнойФормы.Номер);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьДанных.ЗаписатьИмяСвойства("comment");
	ЗаписьДанных.ЗаписатьЗначение("");
	
	ЗаписьДанных.ЗаписатьИмяСвойства("groupId");
	ЗаписьДанных.ЗаписатьЗначение("ETD.LoadingFiles");
	
	ЗаписьДанных.ЗаписатьИмяСвойства("docKindId");
	ЗаписьДанных.ЗаписатьЗначение("ETD.OtherDoc");
	
	ЗаписьДанных.ЗаписатьИмяСвойства("notificationURL");
	ЗаписьДанных.ЗаписатьЗначение(Неопределено);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("informationSystem");
	ЗаписьДанных.ЗаписатьЗначение(Метаданные.Имя);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("docEndDate");
	ЗаписьДанных.ЗаписатьЗначение(Неопределено);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("parentDocId");
	ЗаписьДанных.ЗаписатьЗначение(Неопределено);
	
	ЗаписьДанных.ЗаписатьКонецОбъекта();
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка отправки документа: %1';
							|en = 'Ошибка отправки документа: %1'");
	
	Попытка
		
		ОтветСервиса = СоединениеСПорталом().ОтправитьДляОбработки(
			ЗапросHttp(
				Настройки,
				"/docs",
				ЗаписьДанных.Закрыть()));
		
		Если ОтветСервиса.КодСостояния <> 200 Тогда
			ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
			ВызватьИсключение СтрШаблон(ЗаголовокОшибки,
				СтрШаблон(НСтр("ru = '(Код: %1 <%2>) %3';
								|en = '(Код: %1 <%2>) %3'"), ОтветСервиса.КодСостояния, ПолучитьОписаниеОшибки(ОтветСервиса.КодСостояния), ТекстОтвета));
		КонецЕсли;
		
		ЗаписьДанных = Новый ЧтениеJSON;
		ЗаписьДанных.УстановитьСтроку(ОтветСервиса.ПолучитьТелоКакСтроку());
		КлючиРезультата = ПрочитатьJSON(ЗаписьДанных);
		
		ИдентификаторДокумента = Неопределено;
		Если Не КлючиРезультата.Свойство("documentId", ИдентификаторДокумента) Или Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			ВызватьИсключение СтрШаблон(
				ЗаголовокОшибки, НСтр("ru = 'Портал не сообщил идентификатор документа';
										|en = 'Портал не сообщил идентификатор документа'"));
		КонецЕсли;
		
		Возврат ИдентификаторДокумента;
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ПодробноеПредставлениеОшибки(Ошибка);
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, Ошибка.Описание);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецПопытки;
	
КонецФункции

Функция ОтправитьПодпись(Настройки, ИдентификаторДокумента, ИмяФайла, ОписаниеПодписи)
	
	Если Не НастройкиАвторизацииЗаданы(Настройки) Тогда
		Возврат Ложь;
	КонецЕсли;

	ЗаписьДанных = Новый ЗаписьJSON;
	ЗаписьДанных.УстановитьСтроку();
	
	ЗаписьДанных.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("userId");
	ЗаписьДанных.ЗаписатьЗначение(ИДПользователя());
	
	ЗаписьДанных.ЗаписатьИмяСвойства("signatureFormat");
	ЗаписьДанных.ЗаписатьЗначение("CADESBES");
	
	ЗаписьДанных.ЗаписатьИмяСвойства("signature");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеВBase64(ОписаниеПодписи.Подпись));
	
	Если ЗначениеЗаполнено(ОписаниеПодписи.ИмяФайлаПодписи) Тогда
		ИмяФайлаПодписи = ОписаниеПодписи.ИмяФайлаПодписи;
	Иначе
		ИмяФайлаПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.ИмяФайлаПодписи(ИмяФайла,
			"", ЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи, Ложь);
	КонецЕсли;
	
	ЗаписьДанных.ЗаписатьИмяСвойства("signatureFileName");
	ЗаписьДанных.ЗаписатьЗначение(ИмяФайлаПодписи);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("certificate");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеВBase64(ОписаниеПодписи.Сертификат.Получить()));
	
	ЗаписьДанных.ЗаписатьИмяСвойства("noVerify");
	ЗаписьДанных.ЗаписатьЗначение(Ложь); // Если ЭЦП тестовая, нужно передать Истина, что бы портал принял документ.
	
	ЗаписьДанных.ЗаписатьКонецОбъекта();
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка отправки ЭЦП к документу ИД: %1 %2';
							|en = 'Ошибка отправки ЭЦП к документу ИД: %1 %2'");
	
	Попытка
		
		ОтветСервиса = СоединениеСПорталом().ОтправитьДляОбработки(
			ЗапросHttp(
				Настройки,
				СтрШаблон("/docs/%1/storeSign", ИдентификаторДокумента),
				ЗаписьДанных.Закрыть()));
		
		Если ОтветСервиса.КодСостояния <> 200 Тогда
			ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
			
			ОписаниеОшибки = СтрШаблон(ЗаголовокОшибки,
				ИдентификаторДокумента,
				СтрШаблон(НСтр("ru = '(Код: %1 <%2>) %3';
								|en = '(Код: %1 <%2>) %3'"), ОтветСервиса.КодСостояния, ПолучитьОписаниеОшибки(ОтветСервиса.КодСостояния), ТекстОтвета));
			
			Если СтрНайти(ТекстОтвета, "Запрещено повторное подписание") Тогда
				ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, ОписаниеОшибки);
			Иначе
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
		КонецЕсли;
		
		ЧтениеДанных = Новый ЧтениеJSON;
		ЧтениеДанных.УстановитьСтроку(ОтветСервиса.ПолучитьТелоКакСтроку());
		КлючиРезультата = ПрочитатьJSON(ЧтениеДанных);
		
		ВерсияAPI = Неопределено;
		Если Не КлючиРезультата.Свойство("apiVersion", ВерсияAPI) Или Не ЗначениеЗаполнено(ВерсияAPI) Тогда
			ВызватьИсключение СтрШаблон(ЗаголовокОшибки,
				ИдентификаторДокумента,
				НСтр("ru = 'Портал не сообщил версию API';
					|en = 'Портал не сообщил версию API'"));
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, Ошибка.Описание);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ОтправитьДокументРаботнику(Настройки, ИдентификаторДокумента, СНИЛС)

	Если Не НастройкиАвторизацииЗаданы(Настройки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписьДанных = Новый ЗаписьJSON;
	ЗаписьДанных.УстановитьСтроку();
	
	ЗаписьДанных.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("userId");
	ЗаписьДанных.ЗаписатьЗначение(ИДПользователя());
	
	ЗаписьДанных.ЗаписатьИмяСвойства("snils");
	ЗаписьДанных.ЗаписатьЗначение(СНИЛС);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("email");
	ЗаписьДанных.ЗаписатьЗначение("");
	
	ЗаписьДанных.ЗаписатьИмяСвойства("migrate");
	ЗаписьДанных.ЗаписатьЗначение(Неопределено);
	
	ЗаписьДанных.ЗаписатьКонецОбъекта();
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка оправки документа ИД: %1 работнику СНИЛС: %2 %3';
							|en = 'Ошибка оправки документа ИД: %1 работнику СНИЛС: %2 %3'");
	
	Попытка
		
		ОтветСервиса = СоединениеСПорталом().ОтправитьДляОбработки(
			ЗапросHttp(
				Настройки,
				СтрШаблон("/docs/%1/send", ИдентификаторДокумента),
				ЗаписьДанных.Закрыть()));
		
		Если ОтветСервиса.КодСостояния <> 200 Тогда
			ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
			ВызватьИсключение СтрШаблон(ЗаголовокОшибки,
				ИдентификаторДокумента,
				СНИЛС,
				СтрШаблон(НСтр("ru = '(Код: %1 <%2>) %3';
								|en = '(Код: %1 <%2>) %3'"), ОтветСервиса.КодСостояния, ПолучитьОписаниеОшибки(ОтветСервиса.КодСостояния), ТекстОтвета));
		КонецЕсли;
			
		ЧтениеДанных = Новый ЧтениеJSON;
		ЧтениеДанных.УстановитьСтроку(ОтветСервиса.ПолучитьТелоКакСтроку());
		КлючиРезультата = ПрочитатьJSON(ЧтениеДанных);
		
		Если КлючиРезультата.error = "" Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
			ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,,
				СтрШаблон(ЗаголовокОшибки,
					ИдентификаторДокумента,
					СНИЛС,
					КлючиРезультата.message));
		КонецЕсли;
		
		Возврат Результат;
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, Ошибка.Описание);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьАрхивДокумента(Настройки, ИдентификаторДокумента)
	
	Если Не НастройкиАвторизацииЗаданы(Настройки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка получения архива документа ИД: %1 %2';
							|en = 'Ошибка получения архива документа ИД: %1 %2'");
	
	Попытка
		
		ОтветСервиса = СоединениеСПорталом().Получить(
			ЗапросHttp(
				Настройки,
				СтрШаблон("/docs/%1/signedFile?userId=%2", ИдентификаторДокумента, ИДПользователя())));
		
		Если ОтветСервиса.КодСостояния <> 200 Тогда
			ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
			ВызватьИсключение СтрШаблон(ЗаголовокОшибки,
				ИдентификаторДокумента,
				СтрШаблон(НСтр("ru = '(Код: %1 <%2>) %3';
								|en = '(Код: %1 <%2>) %3'"), ОтветСервиса.КодСостояния, ПолучитьОписаниеОшибки(ОтветСервиса.КодСостояния), ТекстОтвета));
		КонецЕсли;
		
		ЧтениеДанных = Новый ЧтениеJSON;
		ЧтениеДанных.УстановитьСтроку(ОтветСервиса.ПолучитьТелоКакСтроку());
		КлючиРезультата = ПрочитатьJSON(ЧтениеДанных);
		
		ИмяФайла = ПолучитьИмяВременногоФайла("zip");
		
		ДанныеФайла = Base64Значение(КлючиРезультата.file);
		ДанныеФайла.Записать(ИмяФайла);
		
		Возврат ИмяФайла;
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, Ошибка.Описание);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьГруппыДокументов(Настройки, ВызыватьИсключение = Ложь)
	
	Если Не НастройкиАвторизацииЗаданы(Настройки, ВызыватьИсключение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка получения групп документов: %1';
							|en = 'Ошибка получения групп документов: %1'");
	
	Попытка
		
		ОтветСервиса = СоединениеСПорталом().Получить(
			ЗапросHttp(
				Настройки,
				"/docs/getDocGroupList?userRole=Employer"));
		
		Если ОтветСервиса.КодСостояния <> 200 Тогда
			ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
			ВызватьИсключение СтрШаблон(ЗаголовокОшибки,
				СтрШаблон(НСтр("ru = '(Код: %1 <%2>) %3';
								|en = '(Код: %1 <%2>) %3'"), ОтветСервиса.КодСостояния, ПолучитьОписаниеОшибки(ОтветСервиса.КодСостояния), ТекстОтвета));
		КонецЕсли;
		
		ЧтениеДанных = Новый ЧтениеJSON;
		ЧтениеДанных.УстановитьСтроку(ОтветСервиса.ПолучитьТелоКакСтроку());
		КлючиРезультата = ПрочитатьJSON(ЧтениеДанных);
		
		Если ТипЗнч(КлючиРезультата.success) <> Тип("Массив") Тогда
			ВызватьИсключение СтрШаблон(ЗаголовокОшибки,
				НСтр("ru = 'Сервер вернул не ожидаемый тип данных';
					|en = 'Сервер вернул не ожидаемый тип данных'"));
		КонецЕсли;
		
		Возврат КлючиРезультата.success;
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ПодробноеПредставлениеОшибки(Ошибка);
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, Ошибка.Описание);
			Возврат Ложь;
		КонецЕсли;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СоединениеСПорталом

Функция АдресСервера()
	
	Возврат "ekd-integration-v2.trudvsem.ru";
	
КонецФункции

Функция ИДПользователя()
	
	// Вероятно, это рудимент, по этому передаем произвольный GUID.
	Возврат "b878492c-c5a4-49fd-8fa5-e7296df53177";
	
КонецФункции

Функция СоединениеСПорталом()
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	
	Возврат Новый HTTPСоединение(АдресСервера(), , , , ИнтернетПрокси, 120, ЗащищенноеСоединение);
	
КонецФункции

Функция ЗапросHttp(Настройки, ПутьКМетоду, ТелоЗапроса = Неопределено)
	
	Запрос = Новый HTTPЗапрос(ПутьКМетоду, ЗаголовкиЗапроса(Настройки));
	Если ТелоЗапроса <> Неопределено Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗаголовкиЗапроса(Настройки)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/json, */*; q=0.01");
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Если Настройки.ИспользоватьТокен = Истина Тогда
		Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен(Настройки)));
	Иначе
		Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", Токен(Настройки)));
	КонецЕсли;
	
	Возврат Заголовки;
	
КонецФункции

Функция Токен(Настройки)
	
	Если Настройки.ИспользоватьТокен = Истина Тогда
		Возврат Настройки.Токен;
	Иначе
		Возврат ДанныеВBase64(СтрШаблон(
			"%1:%2",
			СокрЛП(Настройки.Логин),
			СокрЛП(Настройки.Пароль)));
	КонецЕсли;
	
КонецФункции

Функция КодыВозвратаПРР()
	
	Результат = Новый Соответствие;
	Результат.Вставить("200", НСтр("ru = 'Запрос выполнен успешно';
									|en = 'Запрос выполнен успешно'"));
	Результат.Вставить("400", НСтр("ru = 'Не переданы необходимые параметры или возникла иная ошибка клиента';
									|en = 'Не переданы необходимые параметры или возникла иная ошибка клиента'"));
	Результат.Вставить("401", НСтр("ru = 'Неавторизированный запрос';
									|en = 'Неавторизированный запрос'"));
	Результат.Вставить("403", НСтр("ru = 'Неверный токен авторизации';
									|en = 'Неверный токен авторизации'"));
	Результат.Вставить("404", НСтр("ru = 'Запрашиваемый ресурс не найден';
									|en = 'Запрашиваемый ресурс не найден'"));
	Результат.Вставить("415", НСтр("ru = 'Тип передаваемых данных не соответствует ожидаемому';
									|en = 'Тип передаваемых данных не соответствует ожидаемому'"));
	Результат.Вставить("500", НСтр("ru = 'Внутренняя ошибка сервера';
									|en = 'Внутренняя ошибка сервера'"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ОрганизацияПрисоединенногоФайла(ПрисоединенныйФайл)
	
	Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла");
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "Организация") Тогда
		Документ = ПолучитьДокументКЭДО(ПрисоединенныйФайл);
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
	
КонецФункции

Функция ПолучитьДокументКЭДО(ЭлектронныйДокумент)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И ДокументКадровогоЭДО.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;	
	КонецЕсли;
	
КонецФункции

Функция ПроверитьАвторизацию(Организация, АдресСервера, ОписаниеОшибки) Экспорт
	
	Настройки = НастройкиАвторизации(Организация);
	
	АдресСервера = АдресСервера();
	
	Попытка
		ПолучитьГруппыДокументов(Настройки, Истина);
		ОписаниеОшибкиПРР = Неопределено;
		Возврат Истина;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ОписаниеОшибки = ВыделитьТекстОшибки(Ошибка.Описание);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ВыделитьТекстОшибки(ОписаниеОшибки)
	
	СтрокаПоиска = "(Код: ";
	Позиция = СтрНайти(ОписаниеОшибки, СтрокаПоиска);
	Если Позиция <> 0 Тогда
		Строка = Сред(ОписаниеОшибки, Позиция);
		Строка = Лев(Строка, СтрНайти(Строка, ")"));
		Текст = СтрЗаменить(Строка, СтрокаПоиска, "");
		Текст = СтрЗаменить(Текст, ")", "");
		Возврат Текст;
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция ПередатьПодписи(Настройки, ИдентификаторДокумента, ИмяФайла, УстановленныеПодписи)
	
	Результат = Истина;
	
	Если Не НастройкиАвторизацииЗаданы(Настройки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ОписаниеПодписи Из УстановленныеПодписи Цикл
		
		Если Не ОтправитьПодпись(Настройки, ИдентификаторДокумента, ИмяФайла, ОписаниеПодписи) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат Тогда
		
		Получатели = ПолучитьСНИЛСВнешнихПодписантов(ИдентификаторДокумента);
		Для Каждого Строка Из Получатели Цикл
			ОтправитьДокументРаботнику(Настройки, ИдентификаторДокумента, Строка.СНИЛС)
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАрхивыДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыДокументовНаРаботаВРоссии.Идентификатор КАК Идентификатор,
		|	ДокументКадровогоЭДО.Организация КАК Организация,
		|	&ТекущаяДата > ДОБАВИТЬКДАТЕ(ИдентификаторыДокументовНаРаботаВРоссии.ДатаОтправки, МЕСЯЦ, 1) КАК Устарело
		|ИЗ
		|	РегистрСведений.ИдентификаторыДокументовНаРаботаВРоссии КАК ИдентификаторыДокументовНаРаботаВРоссии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|		ПО (ДокументКадровогоЭДО.ЭлектронныйДокумент = ИдентификаторыДокументовНаРаботаВРоссии.ПрисоединенныйФайл)
		|ГДЕ
		|	ИдентификаторыДокументовНаРаботаВРоссии.ТребуетсяПодпись";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяУниверсальнаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки = Ложь;
	ЗаголовокОшибки = НСтр("ru = 'Ошибка получения архива документа: %1';
							|en = 'Ошибка получения архива документа: %1'");
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Настройки = НастройкиАвторизации(Выборка.Организация);
		
		Если Настройки.Организация = Неопределено Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Информация,,,
				СтрШаблон(ЗаголовокОшибки, СтрШаблон(НСтр("ru = 'Организация ""%1"" не использует интеграцию';
															|en = 'Организация ""%1"" не использует интеграцию'"), Выборка.Организация)));
			ОрганизацияИспользуетИнтеграцию = Ложь;
		Иначе
			ОрганизацияИспользуетИнтеграцию = Истина;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Устарело Тогда
				РегистрыСведений.ИдентификаторыДокументовНаРаботаВРоссии.ЗапомнитьПолучениеПодписиСотрудика(Выборка.Идентификатор);
				Продолжить;
			КонецЕсли;
			
			Если Не ОрганизацияИспользуетИнтеграцию Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяФайла = ПолучитьАрхивДокумента(Настройки, Выборка.Идентификатор);
			Если ИмяФайла = Неопределено Тогда
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли;
			
			Попытка
				ДанныеПодписи = ПолучитьПодписьРаботникаИзАрхива(ИмяФайла, Выборка.Идентификатор);
				Если ДанныеПодписи = Неопределено Тогда
					ЕстьОшибки = Истина;
				Иначе
					СохранитьПодписьРаботника(ДанныеПодписи, Выборка.Идентификатор);
				КонецЕсли;
			Исключение
				ЕстьОшибки = Истина;
			КонецПопытки;
			УдалитьФайлы(ИмяФайла);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ПолучитьПодписьРаботникаИзАрхива(ИмяФайла, ИдентификаторДокумента)
	
	ФайлыКУдалению = Новый Массив;

	Архиватор = Новый ЧтениеZipФайла(ИмяФайла);
	КаталогРаспаковки = ПолучитьИмяВременногоФайла() + "\";
	СоздатьКаталог(КаталогРаспаковки);
	ФайлыКУдалению.Добавить(КаталогРаспаковки);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка разбора архива документа: %1 %2';
							|en = 'Ошибка разбора архива документа: %1 %2'");
	
	ИмяФайлаОписания = "WREDC_DATA.XML";
	ЭлементАрхива = Архиватор.Элементы.Найти(ИмяФайлаОписания);
	
	Попытка
		Если ЭлементАрхива = Неопределено Тогда
			
			ИмяФайлаВложенногоАрхива = Неопределено;
			Для Каждого Элемент Из Архиватор.Элементы Цикл
				Если Элемент.Расширение = "zip" Тогда
					Архиватор.Извлечь(Элемент, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
					ИмяФайлаВложенногоАрхива = КаталогРаспаковки + Элемент.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИмяФайлаВложенногоАрхива <> Неопределено Тогда
				Архиватор.Закрыть();
				Архиватор.Открыть(ИмяФайлаВложенногоАрхива);
				ЭлементАрхива = Архиватор.Элементы.Найти(ИмяФайлаОписания);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭлементАрхива = Неопределено Тогда
			
			ЧастиСообщения = Новый Массив;
			ЧастиСообщения.Добавить(НСтр("ru = 'Элементы архива:';
										|en = 'Элементы архива:'"));
			Для Каждого Элемент Из Архиватор.Элементы Цикл
				ЧастиСообщения.Добавить(Элемент.Имя);
			КонецЦикла;
			
			ОписаниеОшибки = СтрШаблон(ЗаголовокОшибки,
				ИдентификаторДокумента,
				СтрШаблон(НСтр("ru = 'Не обнаружен файл %1:
					|%2';
					|en = 'Не обнаружен файл %1:
					|%2'"), ИмяФайлаОписания, СтрСоединить(ЧастиСообщения, Символы.ПС)));
					
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Архиватор.Извлечь(ЭлементАрхива, КаталогРаспаковки);
		
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, Ошибка.Описание);
		УдалитьВременныеФайлы(ФайлыКУдалению);	
		Возврат Неопределено;
	КонецПопытки;
		
	ИмяФайлаОписания = КаталогРаспаковки + ЭлементАрхива.Имя;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОписания);
	Описание = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Результат = Новый Структура("Подпись, ДатаПодписи, СНИЛС");
	
	Попытка
		ДанныеОПодписиСотрудника = Описание.content.docinfo.employeeinfo.signature;
		ИмяФайлаПодписи = ДанныеОПодписиСотрудника.x509.file;
		Если Описание.id <> ИдентификаторДокумента Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В архиве документ с другим ИД: %1';
											|en = 'В архиве документ с другим ИД: %1'"), Описание.id);
		КонецЕсли;
		Результат.СНИЛС = ДанныеОПодписиСотрудника.snils;
		Результат.ДатаПодписи = ПолучитьДатуИзСтроки(ДанныеОПодписиСотрудника.date);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		УдалитьВременныеФайлы(ФайлыКУдалению);
		ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(ЗаголовокОшибки,
				ИдентификаторДокумента,
				Ошибка.Описание));
		Возврат Неопределено;
	КонецПопытки;
	
	ЭлементАрхива = Архиватор.Элементы.Найти(ИмяФайлаПодписи);
	Если ЭлементАрхива = Неопределено Тогда
		УдалитьВременныеФайлы(ФайлыКУдалению);
		ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(ЗаголовокОшибки,
				ИдентификаторДокумента,
				НСтр("ru = 'Не найден файл подписи работника';
					|en = 'Не найден файл подписи работника'")));
		Возврат Неопределено;
	КонецЕсли;
	
	Архиватор.Извлечь(ЭлементАрхива, КаталогРаспаковки);
	
	Результат.Подпись = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
	
	УдалитьВременныеФайлы(ФайлыКУдалению);
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьПодписьРаботника(ДанныеПодписи, ИдентификаторДокумента)
	
	СвойстваПодписи = ЭлектроннаяПодпись.СвойстваПодписи(ДанныеПодписи.Подпись, Истина);
	Если СвойстваПодписи.Успех = Ложь Тогда
		ВызватьИсключение СвойстваПодписи.ТекстОшибки;
	КонецЕсли;
	НовыеСвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
	ЗаполнитьЗначенияСвойств(НовыеСвойстваПодписи, СвойстваПодписи);
	НовыеСвойстваПодписи.Подпись = ДанныеПодписи.Подпись;
	НовыеСвойстваПодписи.ДатаПодписи = ДанныеПодписи.ДатаПодписи;

	Документ = РегистрыСведений.ИдентификаторыДокументовНаРаботаВРоссии.ДокументПоИдентификатору(ИдентификаторДокумента);
	
	ДокументКЭДО = КадровыйЭДОПовтИсп.ДокументКЭДОЭлектронногоДокумента(Документ);
	
	ЭлектроннаяПодпись.ДобавитьПодпись(Документ, НовыеСвойстваПодписи);
	
	ДанныеФизлица = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(ДанныеПодписи.СНИЛС, "", "", "");
	Если Не ЗначениеЗаполнено(ДанныеФизлица.ФизическоеЛицо) Тогда
		ВызватьИсключение ДанныеФизлица.ТекстОшибки;
	КонецЕсли;
	
	СохранитьПодписьДокументаКЭДО(ДокументКЭДО, ДанныеФизлица.ФизическоеЛицо, НовыеСвойстваПодписи.Отпечаток, ДанныеПодписи.ДатаПодписи);
	
	РегистрыСведений.ИдентификаторыДокументовНаРаботаВРоссии.ЗапомнитьПолучениеПодписиСотрудика(ИдентификаторДокумента, ДанныеПодписи.ДатаПодписи, Документ);

КонецПроцедуры

Процедура СохранитьПодписьДокументаКЭДО(ДокументКЭДО, ФизическоеЛицо, Отпечаток, ДатаПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = ДокументКЭДО;
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	МенеджерЗаписи.Отпечаток = Отпечаток;
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.РезультатСогласования = Перечисления.РезультатыСогласованияБЗК.Согласовано;
	МенеджерЗаписи.Записать();
	
	КадровыйЭДО.ЗарегистрироватьДокументыКЭДОКПересчетуСостояний(ДокументКЭДО);
	
КонецПроцедуры

Функция ПолучитьДатуИзСтроки(СтрокаДаты)
	
	Если ПустаяСтрока(СтрокаДаты) Тогда
		ПеремДата = Дата(1,1,1);
	Иначе
		Попытка
			ПеремДата = Дата(СтрЗаменить
								(СтрЗаменить
									(СтрЗаменить
										(СтрЗаменить
											(СтрокаДаты,
											".",
											""),
										"-",
										""),
									" ",
									""),
								":",
								""));
		Исключение
			ПеремДата = Дата(1,1,1);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПеремДата;
	
КонецФункции

Процедура УдалитьВременныеФайлы(ИменаФайлов)
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		УдалитьФайлы(ИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСНИЛСВнешнихПодписантов(ИдентификаторДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВнешниеПодписанты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВнешниеПодписанты.ФизическоеЛицо.СтраховойНомерПФР КАК СНИЛС
		|ИЗ
		|	Документ.ДокументКадровогоЭДО.ВнешниеПодписанты КАК ВнешниеПодписанты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыДокументовНаРаботаВРоссии КАК ИдентификаторыДокументовНаРаботаВРоссии
		|		ПО (ИдентификаторыДокументовНаРаботаВРоссии.Идентификатор = &ИдентификаторДокументаРПП)
		|			И (ИдентификаторыДокументовНаРаботаВРоссии.ПрисоединенныйФайл = ВнешниеПодписанты.Ссылка.ЭлектронныйДокумент)";
	Запрос.УстановитьПараметр("ИдентификаторДокументаРПП", ИдентификаторДокумента);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

Функция ПередатьПрисоединенныйФайл(Организация, ДанныеФайла)
	
	Настройки = НастройкиАвторизации(Организация);
	
	ИдентификаторДокумента = ОтправитьДокумент(Настройки, ДанныеФайла.Наименование, ДанныеФайла.ИмяФайла,
		ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла), ДанныеФайла.Ссылка);
	
	Если ИдентификаторДокумента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РегистрыСведений.ИдентификаторыДокументовНаРаботаВРоссии.ЗапомнитьИдентификатор(ДанныеФайла.Ссылка, ИдентификаторДокумента);
	
	Результат = Истина;
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеФайла.Ссылка);
	
	Если ЗначениеЗаполнено(УстановленныеПодписи) Тогда
		Результат = ПередатьПодписи(Настройки, ИдентификаторДокумента, ДанныеФайла.ИмяФайла, УстановленныеПодписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьФайлИзОбработки(ПрисоединенныйФайл)
	
	РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработки(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрисоединенныйФайл),
		Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьНаРаботаВРоссии);
	
КонецПроцедуры

Функция ДанныеВBase64(Данные, УдалятьПереводыСтрок = Истина)
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		КодируемыеДанные = ПолучитьДвоичныеДанныеИзСтроки(Данные);
	Иначе
		КодируемыеДанные = Данные;
	КонецЕсли;
	
	СтрокаBase64 = Base64Строка(КодируемыеДанные);
	
	Если УдалятьПереводыСтрок Тогда
		СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
		СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	КонецЕсли;
	
	Возврат СтрокаBase64;
	
КонецФункции

Функция МаксимальныйРазмерДокумента()
	Возврат 15 * 1024 * 1024;
КонецФункции

Функция ИмяКомандыПодписатьФормыПечатьДокументов()
	
	Возврат "ПередатьПодписанныеPDFНаРаботаВРоссии";
	
КонецФункции

Функция ИмяСобытия()
	
	Возврат НСтр("ru = 'Интеграция с ""Работа в России""';
				|en = 'Интеграция с ""Работа в России""'");
	
КонецФункции

Функция ТекстОшибки(Текст)
	
	Возврат СтрШаблон("%1: %2", ИмяСобытия(), Текст);
	
КонецФункции

Функция ПолучитьОписаниеОшибки(КодОшибки)
	
	Коды = КодыВозвратаПРР();
	ОписаниеОшибки = Коды[Строка(КодОшибки)];
	Если ОписаниеОшибки = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Не известный код ошибки';
								|en = 'Не известный код ошибки'");
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

#Область РегламентныеЗадания

Функция ЕстьАктивныеФоновыеЗаданияПолучениеДокументов()

	Возврат ЕстьАктивныеФоновыеЗадания(Метаданные.РегламентныеЗадания.ПолучениеДокументовРаботаВРоссии.Ключ);

КонецФункции

Функция ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗадания)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат (АктивныеФоновыеЗадания.Количество() > 0);
	
КонецФункции

Функция ПроверитьРегламентныеЗадания(Включить = Ложь) Экспорт
	
	ИспользуемыеЗадания = Новый Массив;
	ИспользуемыеЗадания.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСостоянийДокументовКЭДО);
	ИспользуемыеЗадания.Добавить(Метаданные.РегламентныеЗадания.ОбработкаДокументовПечатныхФорм);
	ИспользуемыеЗадания.Добавить(Метаданные.РегламентныеЗадания.ПолучениеДокументовРаботаВРоссии);
	
	Результат = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого МетаданныеЗадания Из ИспользуемыеЗадания Цикл
		
		Состояние = Новый Структура("Включено, ИмяЗадания", Ложь, Строка(МетаданныеЗадания));
		
		Если РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(МетаданныеЗадания) Тогда
			Состояние.Включено = Истина;
		ИначеЕсли Включить Тогда
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ПериодПовтораДней = 1;
			Расписание.ПериодПовтораВТечениеДня = 900;
			
			ОбщегоНазначенияБЗК.ВключитьПредопределенноеЗадание(
				МетаданныеЗадания,
				Расписание)
			
		КонецЕсли;
		
		Результат.Добавить(Состояние);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти