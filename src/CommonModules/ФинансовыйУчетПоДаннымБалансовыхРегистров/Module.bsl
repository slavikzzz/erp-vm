#Область ПрограммныйИнтерфейс

// Возвращает структуру параметров отражения записей регистров накопления в финансовом учете.
// Если какой-либо параметр является выражением языка запросов, то описания полей в нем должны содержать 
// псевдоним источника данных, переданный через параметр ПсевдонимИсточникаДанных. Если параметр является 
// только именем поля, в том числе разыменованным через точку, его можно указывать без псевдонима источника данных.
// 
// Параметры:
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  * ИнверсияДвижений - Булево - Признак несоответствия движений регистра правилу Приход = Дебет, Расход = Кредит
//  * ПутьКДаннымОрганизация - Строка - Путь выборки значения организации из данных регистра
//  * ПутьКДаннымРегистратор - Строка - Путь выборки значения документа движения из данных регистра
//  * ПутьКДаннымИдентификаторФинЗаписи - Строка - Путь выборки значения идентификатора записи регистра
//  * ПутьКДаннымНастройкаХозОперации - Строка - Путь выборки значения настройки хозяйственной операции
//  * ПутьКДаннымНаправлениеДеятельности - Строка - Путь выборки значения направления деятельности из данных регистра
//  * ПутьКДаннымИдентификаторСтроки - Строка - Путь выборки значения идентификатора строки из данных регистра. Может быть переопределено в описании объектов бух.учета
//  * ПутьКДаннымВидДеятельностиНДС - Строка - Путь выборки значения вида деятельности по учету НДС из данных регистра
//  * ПутьКДаннымПодразделение - Строка - Путь выборки значения подразделения из данных регистра
//  * ПутьКДаннымВалюта - Строка - Путь выборки значения валюты из данных регистра, пустая строка если в регистре не ведется валютный учет
//  * ПутьКДаннымСторно - Строка - Путь выборки признака исправительной записи корректирующего документа
//  * ЭтоРегистрУчетаНДС - Булево - Признак учета входящего или исходящего НДС.
//  * РесурсыУпр - Массив из Строка - Массив строк с именами всех используемых ресурсов, хранящих сумму операции в валюте управленческого учета. Может быть переопределено в описании объектов бух.учета. Может быть пустым при отсутствии упр. учета в регистре
//  * РесурсыРегл - Массив из Строка - Массив строк с именами всех используемых ресурсов, хранящих сумму операции в валюте регламентированного учета. Может быть переопределено в описании объектов бух.учета. Может быть пустым при отсутствии регл. учета в регистре
//  * РесурсыВал - Массив из Строка - Массив строк с именами всех используемых ресурсов, хранящих валютную сумму операции, если в регистре ведется валютный учет. Может быть переопределено в описании объектов бух.учета. Может быть пустым при отсутствии вал. учета в регистре
//  * РесурсыКоличество - Массив из Строка - Массив строк с именами ресурсов, хранящих количество операции. Может быть пустым при отсутствии количественного учета в регистре
//  * УсловиеДебет - Строка - Условие на языке запросов для определения признака дебета движения в некоторых оборотных регистрах и остаточных регистрах со сложной логикой
//  * УсловиеКредит - Строка - Условие на языке запросов для определения признака кредита движения в некоторых оборотных регистрах и остаточных регистрах со сложной логикой
//  * ДополнительныйОтбор - Строка - Условие на языке запросов для дополнительного отбора данных регистра.
//  * ПсевдонимИсточникаДанных - Строка - псевдоним источника данных, используемый в параметрах, являющимися выражениями языка запросов.
// 
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = Новый Структура();
	ПараметрыОтражения.Вставить("ПутьКДаннымОрганизация", "Организация");
	ПараметрыОтражения.Вставить("ПутьКДаннымРегистратор", "Регистратор");
	ПараметрыОтражения.Вставить("ПсевдонимИсточникаДанных", ПсевдонимИсточникаДанныхПоУмолчанию());
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.Вставить("ИнверсияДвижений", Ложь);
	ПараметрыОтражения.Вставить("ПутьКДаннымИдентификаторФинЗаписи", "ИдентификаторФинЗаписи");
	ПараметрыОтражения.Вставить("ПутьКДаннымНастройкаХозОперации", "НастройкаХозяйственнойОперации");
	ПараметрыОтражения.Вставить("ПутьКДаннымНаправлениеДеятельности", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымИдентификаторСтроки", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымВидДеятельностиНДС", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымПодразделение", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымВалюта", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымСторно", "");
	ПараметрыОтражения.Вставить("РесурсыУпр", Новый Массив());
	ПараметрыОтражения.Вставить("РесурсыРегл", Новый Массив());
	ПараметрыОтражения.Вставить("РесурсыВал", Новый Массив());
	ПараметрыОтражения.Вставить("РесурсыКоличество", Новый Массив());
	ПараметрыОтражения.Вставить("УсловиеДебет", "");
	ПараметрыОтражения.Вставить("УсловиеКредит", "");
	ПараметрыОтражения.Вставить("ДополнительныйОтбор", "");
	
	//++ НЕ УТКА
	МеждународныйУчетПоДаннымФинансовыхРегистров.ДополнитьПараметрыОтраженияДвиженийВФинансовомУчете(ПараметрыОтражения);
	//-- НЕ УТКА
	
	ФактическиеДанныеБюджетированияСервер.ДополнитьПараметрыОтраженияДвиженийВФинансовомУчете(ПараметрыОтражения);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

// Заполняет параметры отражения движений в фин.учете по метаданным регистра накопления
//
// Параметры:
//  ПараметрыОтражения - см. ПараметрыОтраженияДвиженийВФинансовомУчете
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//	НедоступныеПоля - Массив - Массив имен полей, которые не доступны в качестве источников заполнения субконто
//
Процедура ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра, НедоступныеПоля = Неопределено) Экспорт
	
	Если МетаданныеРегистра.Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено Тогда
		ПараметрыОтражения.ПутьКДаннымИдентификаторСтроки = "ИдентификаторСтроки";
	КонецЕсли;
	
	Если ПараметрыОтражения.РесурсыВал.Количество() > 0
		И МетаданныеРегистра.Измерения.Найти("ВидДеятельностиНДС") <> Неопределено Тогда
		ПараметрыОтражения.ПутьКДаннымВидДеятельностиНДС = "ВидДеятельностиНДС";
	КонецЕсли;
	
	Если МетаданныеРегистра.Реквизиты.Найти("Сторно") <> Неопределено Тогда
		ПараметрыОтражения.ПутьКДаннымСторно = "Сторно";
	КонецЕсли;

	//++ НЕ УТКА
	МеждународныйУчетПоДаннымФинансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра, НедоступныеПоля);
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для передачи в процедуру выполнения оффлайновых расчетов.
// 
// Возвращаемое значение:
//  Структура - Описание:
//   * ДатаОкончания - Дата - Конечная дата выполнения расчетов
//   * ДокументыКРасчету - Массив из ДокументСсылка - Документы, движения которых необходимо доформировать оффлайн
//   * КоличествоПотоков - Число - Количество сеансов обработки документов, выполняющихся одновременно
//   * ПересчитатьРегистрыОборотов - Булево - Признак необходимости перерасчета движений оборотных регистров
//
Функция ПараметрыВыполненияОффлайновыхРасчетов() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ДатаОкончания", '00010101');
	Параметры.Вставить("ДокументыКРасчету", Новый Массив());
	Параметры.Вставить("КоличествоПотоков", 1);
	Параметры.Вставить("ПересчитатьРегистрыОборотов", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Выполняет запуск процедур доформирования движений документов по регистрам
// 
// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияОффлайновыхРасчетов
//
Процедура ВыполнитьОффлайновыеРасчеты(ПараметрыВыполнения) Экспорт
	
	ПроцедурыРасчетов = Новый ТаблицаЗначений();
	ПроцедурыРасчетов.Колонки.Добавить("ИмяМетода", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ПроцедурыРасчетов.Колонки.Добавить("МногопоточноеВыполнение", Новый ОписаниеТипов("Булево"));
	ПроцедурыРасчетов.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	ПроцедураРасчета = ПроцедурыРасчетов.Добавить();
	ПроцедураРасчета.ИмяМетода = "РассчитатьСуммыДокументовВВалютахУчета";
	ПроцедураРасчета.МногопоточноеВыполнение = Истина;
	ПроцедураРасчета.ДополнительныеПараметры.Вставить("ПересчитатьРегистрыОборотов", ПараметрыВыполнения.ПересчитатьРегистрыОборотов);
	
	ПроцедураРасчета = ПроцедурыРасчетов.Добавить();
	ПроцедураРасчета.ИмяМетода = "СформироватьДвиженияПоВНА";
	ПроцедураРасчета.МногопоточноеВыполнение = Ложь;
	
	ПроцедураРасчета = ПроцедурыРасчетов.Добавить();
	ПроцедураРасчета.ИмяМетода = "ОтразитьДокументыВУчетеНДС";
	ПроцедураРасчета.МногопоточноеВыполнение = Истина;
	
	Для Каждого ПроцедураРасчета Из ПроцедурыРасчетов Цикл
		ВыполнитьОффлайновыйРасчет(ПараметрыВыполнения, ПроцедураРасчета);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку условия на языке запросов на основании описания отбора, переданного в виде структуры, соответствия,
// массива или фиксированного массива. Элементы отбора, переданные в структуре или соответствии, складываются в условии по "И".
// Элементы отбора, переданные в массиве или фиксированном массиве, складываются в условии по "ИЛИ".
// 
// Параметры:
//  ОтборДанных - Структура, Соответствие из КлючИЗначение, Массив, ФиксированныйМассив - Описание:
//  	* Ключ - Строка - Путь к данным, на которые накладывается отбор
//  	* Значение - Значение или Массив - Значение накладываемого отбора
//  ПараметрыЗапроса - Структура - параметры запроса, в которые будут добавлены значения отбора, которые невозможно описать языком запросов
//  ПсевдонимИсточника - Строка - псевдоним источника данных в запросе
//
// Возвращаемое значение:
//  Строка - текст условия отбора на языке запросов, заключенный в скобки
//
Функция СтрокаУсловияВыборкиДанных(ОтборДанных, ПараметрыЗапроса = Неопределено, ПсевдонимИсточника = Неопределено) Экспорт
	
	Если ТипЗнч(ОтборДанных) = Тип("Структура")
	 ИЛИ ТипЗнч(ОтборДанных) = Тип("Соответствие") Тогда
	
		СтрокиИ = Новый Массив();
		Для Каждого УсловиеОтбора Из ОтборДанных Цикл
			СтрокаВыборкиЗначения = СтрокаВыборкиЗначения(УсловиеОтбора.Значение);
			ЭтоПараметр = СтрНачинаетсяС(СтрокаВыборкиЗначения, "Параметр");
			ЭтоМассив = ТипЗнч(УсловиеОтбора.Значение) = Тип("Массив");
			Если ЭтоПараметр Тогда
				Если ПараметрыЗапроса <> Неопределено Тогда
					ПараметрыЗапроса.Вставить(СтрокаВыборкиЗначения, УсловиеОтбора.Значение);
				Иначе
					ТекстыИсключения = Новый Массив();
					ТекстыИсключения.Добавить(НСтр("ru = 'Значение не может быть преобразовано в выражение запроса.';
													|en = 'The value cannot be converted to a query expression.'"));
					ТекстыИсключения.Добавить(НСтр("ru = 'Требуется передача параметров запроса.';
													|en = 'Pass the query parameters.'"));
					ТекстыИсключения.Добавить(СтрШаблон("(%1)", УсловиеОтбора.Значение));
					ВызватьИсключение СтрСоединить(ТекстыИсключения, " ");
				КонецЕсли;
			КонецЕсли;
			ЧастиСтроки = Новый Массив();
			ЧастиСтроки.Добавить(ПутьКДаннымСПсевдонимомИсточника(УсловиеОтбора.Ключ, ПсевдонимИсточника));
			ЧастиСтроки.Добавить(?(ЭтоМассив, " В (", " = "));
			ЧастиСтроки.Добавить(?(ЭтоПараметр, "&", ""));
			ЧастиСтроки.Добавить(СтрокаВыборкиЗначения);
			ЧастиСтроки.Добавить(?(ЭтоМассив, ")", ""));
			СтрокиИ.Добавить(СтрСоединить(ЧастиСтроки));
		КонецЦикла;
		СтрокаУсловия = СтрСоединить(СтрокиИ, " И ");
		
	ИначеЕсли ТипЗнч(ОтборДанных) = Тип("Массив")
	 ИЛИ ТипЗнч(ОтборДанных) = Тип("ФиксированныйМассив") Тогда
		
		СтрокиИли = Новый Массив();
		Для Каждого УсловиеОтбора Из ОтборДанных Цикл
			СтрокиИли.Добавить(СтрокаУсловияВыборкиДанных(УсловиеОтбора, ПараметрыЗапроса, ПсевдонимИсточника));
		КонецЦикла;
		СтрокаУсловия = СтрСоединить(СтрокиИли, " ИЛИ ");
		
	КонецЕсли;
	
	Возврат "(" + СтрокаУсловия + ")";
	
КонецФункции

// Возвращает псевдоним источника данных в запросе по умолчанию.
// Указание псевдонимов источников обязательно при выборке из временных таблиц.
// 
// Возвращаемое значение:
// 	Строка - псевдоним источника данных в запросе
//
Функция ПсевдонимИсточникаДанныхПоУмолчанию() Экспорт
	
	Возврат "ТаблицаРегистра";
	
КонецФункции

// Возвращает массив имен документов, не используемых при трансляции проводок МФУ и получении фактических данных по статьям бюджетов по данным финансовых регистров
// 
// Возвращаемое значение:
// 	Массив из Строка - имена неиспользуемых документов
//
Функция ИменаНеиспользуемыхДокументов() Экспорт
	
	ИменаДокументов = Новый Массив();
	МетаданныеДокументы = Метаданные.Документы;
	
	ИменаДокументов.Добавить(МетаданныеДокументы.ВводОстатков.Имя);
	ИменаДокументов.Добавить(МетаданныеДокументы.КорректировкаРегистров.Имя);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистровЛокализация.ДополнитьИменаНеиспользуемыхДокументов(ИменаДокументов);
	
	Возврат ИменаДокументов;
	
КонецФункции

// Возвращает массив имен регистров накопления, в корреспонденции которых всегда учитываются показатели
//
// Возвращаемое значение:
//  Массив Из Строка - имена регистров накопления
//
Функция РегистрыСОтборомПоПоказателям() Экспорт
	
	ИменаРегистров = Новый Массив();
	ИменаРегистров.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);
	ИменаРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	
	Возврат ИменаРегистров;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеВыполнениемОффлайновыхРасчетов

Процедура РассчитатьСуммыДокументовВВалютахУчета(ДатаОкончания, МассивДокументов, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	РегистрыСведений.СуммыДокументовВВалютахУчета.РассчитатьСуммыДокументовВВалютахУчета(МассивДокументов);
	
	Если ДополнительныеПараметры.ПересчитатьРегистрыОборотов Тогда
		УправленческийУчетПроведениеСервер.ОбновитьДвиженияПоОборотнымРегистрам(МассивДокументов);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоВНА(ДатаОкончания, МассивДокументов, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ОтложенноеФормированиеДвиженийВНА.ВыполнитьОперациюПоДокументам(МассивДокументов);
	РасчетСтоимостиВНА.ВыполнитьОперациюПоДокументам(МассивДокументов);
	ЗакрытиеРасходовОтВыбытияОС.ВыполнитьОперациюПоДокументам(МассивДокументов);
	
КонецПроцедуры

Процедура ОтразитьДокументыВУчетеНДС(ДатаОкончания, МассивДокументов, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПериодРасчетаНДС = КонецМесяца(ДатаОкончания);
	УчетНДСУП.ОтразитьДокументыВУчетеНДС(ПериодРасчетаНДС, МассивДокументов);
	
КонецПроцедуры

Процедура ВыполнитьОффлайновыйРасчет(ПараметрыВыполнения, ПроцедураРасчета)
	
	ДокументовНаПорцию = 1000;
	КоличествоДокументов = ПараметрыВыполнения.ДокументыКРасчету.Количество();
	
	Если НЕ ПроцедураРасчета.МногопоточноеВыполнение Тогда
		КоличествоПотоков = 1;
	ИначеЕсли КоличествоДокументов <= ДокументовНаПорцию Тогда
		КоличествоПотоков = 1;
	Иначе
		КоличествоПотоков = ПараметрыВыполнения.КоличествоПотоков;
	КонецЕсли;
	
	Если КоличествоПотоков = 1 Тогда
		ВыполнитьОффлайновыйРасчетТекущимПотоком(ПараметрыВыполнения, ПроцедураРасчета);
	Иначе
		ТаблицаУправленияПотоками = Новый ТаблицаЗначений();
		ТаблицаУправленияПотоками.Колонки.Добавить("ИмяМетода", ОбщегоНазначения.ОписаниеТипаСтрока(250));
		ТаблицаУправленияПотоками.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ТаблицаУправленияПотоками.Колонки.Добавить("ДокументыКРасчету", Новый ОписаниеТипов("Массив"));
		ТаблицаУправленияПотоками.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
		ТаблицаУправленияПотоками.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаУправленияПотоками.Колонки.Добавить("КоличествоПопыток", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
		
		КоличествоПорций = Цел(КоличествоДокументов / ДокументовНаПорцию) + 1;
		
		Для НомерПорции = 1 По КоличествоПорций Цикл
			ПорцияДокументов = Новый Массив();
			
			Для НомерДокумента = 1 По ДокументовНаПорцию Цикл
				ИндексДокумента = (НомерПорции - 1) * ДокументовНаПорцию + НомерДокумента - 1;
				Если ИндексДокумента < КоличествоДокументов Тогда
					ПорцияДокументов.Добавить(ПараметрыВыполнения.ДокументыКРасчету[ИндексДокумента]);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПорцияДокументов.Количество() > 0 Тогда
				ПараметрыПотока = ТаблицаУправленияПотоками.Добавить();
				ПараметрыПотока.ИмяМетода = ПроцедураРасчета.ИмяМетода;
				ПараметрыПотока.ДатаОкончания = ПараметрыВыполнения.ДатаОкончания;
				ПараметрыПотока.ДокументыКРасчету = ПорцияДокументов;
				ПараметрыПотока.ДополнительныеПараметры = ПроцедураРасчета.ДополнительныеПараметры;
				
				НачатьВыполнениеОффлайновогоРасчетаНовымПотоком(ПараметрыПотока);
				
				Если ТаблицаУправленияПотоками.Количество() >= КоличествоПотоков Тогда
					ОжидатьЗавершенияОффлайновогоРасчета(ТаблицаУправленияПотоками, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаУправленияПотоками.Количество() > 0 Тогда
			ОжидатьЗавершенияОффлайновогоРасчета(ТаблицаУправленияПотоками, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОффлайновыйРасчетТекущимПотоком(ПараметрыРасчета, ПроцедураРасчета)
	
	ОбщийМодуль = "ФинансовыйУчетПоДаннымБалансовыхРегистров";
	ПолноеИмяМетода = ОбщийМодуль + "." + ПроцедураРасчета.ИмяМетода;
	
	ПараметрыВыполнения = Новый Массив();
	ПараметрыВыполнения.Добавить(ПараметрыРасчета.ДатаОкончания);
	ПараметрыВыполнения.Добавить(ПараметрыРасчета.ДокументыКРасчету);
	ПараметрыВыполнения.Добавить(ПроцедураРасчета.ДополнительныеПараметры);
	
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(ПолноеИмяМетода, ПараметрыВыполнения);
	
КонецПроцедуры

Процедура НачатьВыполнениеОффлайновогоРасчетаНовымПотоком(ПараметрыПотока)
	
	ОбщийМодуль = "ФинансовыйУчетПоДаннымБалансовыхРегистров";
	ПолноеИмяМетода = ОбщийМодуль + "." + ПараметрыПотока.ИмяМетода;
	
	Наименование = НСтр("ru = 'Доформирование движений документов в регистрах финансового учета';
						|en = 'Finalize the generation of document register records in financial accounting registers'");
	
	ПараметрыВыполнения = Новый Массив();
	ПараметрыВыполнения.Добавить(ПараметрыПотока.ДатаОкончания);
	ПараметрыВыполнения.Добавить(ПараметрыПотока.ДокументыКРасчету);
	ПараметрыВыполнения.Добавить(ПараметрыПотока.ДополнительныеПараметры);
	
	НовоеЗадание = ФоновыеЗадания.Выполнить(ПолноеИмяМетода, ПараметрыВыполнения,, Наименование);
	ПараметрыПотока.Идентификатор = НовоеЗадание.УникальныйИдентификатор;
	ПараметрыПотока.КоличествоПопыток = ПараметрыПотока.КоличествоПопыток + 1;
	
КонецПроцедуры

Процедура ОжидатьЗавершенияОффлайновогоРасчета(ТаблицаУправленияПотоками, ЗавершениеВсехПотоков)
	
	ВремяОжидания = 60;
	КоличествоПопыток = 3;
	
	АктивныеЗадания = Новый Массив();
	АварийныеЗадания = Новый Массив();
	ЗавершенныеЗадания = Новый Массив();
	
	Для Каждого ПараметрыПотока Из ТаблицаУправленияПотоками Цикл
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ПараметрыПотока.Идентификатор);
		Если ФоновоеЗадание = Неопределено Тогда
			АварийныеЗадания.Добавить(ПараметрыПотока.Идентификатор);
		ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			АктивныеЗадания.Добавить(ФоновоеЗадание);
		ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			ЗавершенныеЗадания.Добавить(ПараметрыПотока.Идентификатор);
		Иначе
			АварийныеЗадания.Добавить(ПараметрыПотока.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Пока (ЗавершенныеЗадания.Количество() = 0 ИЛИ ЗавершениеВсехПотоков) И АктивныеЗадания.Количество() > 0 Цикл
		АктивныеЗадания = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(АктивныеЗадания, ВремяОжидания);
		КоличествоЗаданий = АктивныеЗадания.Количество();
		
		Для НомерЗадания = 1 По КоличествоЗаданий Цикл
			ОбратныйИндекс = КоличествоЗаданий - НомерЗадания;
			ФоновоеЗадание = АктивныеЗадания[ОбратныйИндекс];
			
			Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
				Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					ЗавершенныеЗадания.Добавить(ФоновоеЗадание.УникальныйИдентификатор);
				Иначе
					АварийныеЗадания.Добавить(ФоновоеЗадание.УникальныйИдентификатор);
				КонецЕсли;
				АктивныеЗадания.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЗавершенноеЗадание Из ЗавершенныеЗадания Цикл
		ПараметрыПотока = ТаблицаУправленияПотоками.Найти(ЗавершенноеЗадание, "Идентификатор");
		Если ПараметрыПотока <> Неопределено Тогда
			ТаблицаУправленияПотоками.Удалить(ПараметрыПотока);
		КонецЕсли;
	КонецЦикла;
	
	Если АварийныеЗадания.Количество() > 0 Тогда
		ТекстыСообщений = Новый Массив();
		
		Для Каждого АварийноеЗадание Из АварийныеЗадания Цикл
			ПараметрыПотока = ТаблицаУправленияПотоками.Найти(АварийноеЗадание, "Идентификатор");
			
			Если ПараметрыПотока = Неопределено Тогда
			ИначеЕсли ПараметрыПотока.КоличествоПопыток < КоличествоПопыток Тогда
				НачатьВыполнениеОффлайновогоРасчетаНовымПотоком(ПараметрыПотока);
			Иначе
				ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(АварийноеЗадание);
				Если ФоновоеЗадание = Неопределено Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 не найдено.';
													|en = 'A background job with the %1 ID is not found.'"), АварийноеЗадание);
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 отменено администратором.';
													|en = 'The background job with the %1 ID is canceled by the administrator.'"), АварийноеЗадание);
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 завершено аварийно.';
													|en = 'The background job with the %1 ID crashed.'"), АварийноеЗадание)
						+ Символы.ПС + КраткоеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 не выполнено.';
													|en = 'The background job with the %1 ID is not performed.'"), АварийноеЗадание);
				КонецЕсли;
				
				ТекстыСообщений.Добавить(ТекстСообщения);
				
				Если ФоновоеЗадание = Неопределено ИЛИ ФоновоеЗадание.ИнформацияОбОшибке = Неопределено Тогда
					ПредставлениеОшибки = ТекстСообщения;
				Иначе
					ПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Фоновое задание с идентификатором %1 завершено аварийно.';
														|en = 'The background job with the %1 ID crashed.'"), АварийноеЗадание)
						+ Символы.ПС + ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Доформирование движений документов в регистрах финансового учета';
						|en = 'Finalize the generation of document register records in financial accounting registers'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПредставлениеОшибки);
			КонецЕсли;
		КонецЦикла;
		
		Если ТекстыСообщений.Количество() > 0 Тогда
			ТекстыСообщений.Вставить(0, НСтр("ru = 'Доформирование движений документов в регистрах финансового учета завершилось с ошибкой.';
											|en = 'Errors occurred when finalizing the generation of document register records in financial accounting registers.'"));
			ТекстСообщения = СтрСоединить(ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТекстыСообщений), Символы.ПС);
			ВызватьИсключение ТекстСообщения;
		ИначеЕсли ЗавершенныеЗадания.Количество() = 0 ИЛИ ЗавершениеВсехПотоков Тогда
			ОжидатьЗавершенияОффлайновогоРасчета(ТаблицаУправленияПотоками, ЗавершениеВсехПотоков);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовФормированияКорреспонденций

// Возвращает запрос, использующийся в формировании корреспонденций балансовых регистров
//
// Параметры:
//  ПараметрыЗапроса - Структура - исходные параметры запроса
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//
// Возвращаемое значение:
//  Запрос
//
Функция ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого КлючИЗначение Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ИсходныеВременныеТаблицы = Новый Массив();
	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		ИсходныеВременныеТаблицы.Добавить(ВременнаяТаблица.ПолноеИмя);
	КонецЦикла;
	Запрос.УстановитьПараметр("ИсходныеВременныеТаблицы", ИсходныеВременныеТаблицы);
	
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета());
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ХозОперацииБезУчетаВВалюте", ХозяйственныеОперацииБезУчетаВВалюте());
	Запрос.УстановитьПараметр("ТипыНалогообложенияБезУчетаНДС", ТипыНалогообложенияБезУчетаНДС());
	Запрос.УстановитьПараметр("ТипыДокументовВводаОстатков", ТипыДокументовВводаОстатков());
	Запрос.УстановитьПараметр("ТипыДокументовРозничныхПродаж", ТипыДокументовРозничныхПродаж());
	Запрос.УстановитьПараметр("ТипыДокументовРозничныхВозвратов", ТипыДокументовРозничныхВозвратов());
	Запрос.УстановитьПараметр("ТипыДокументовВзаимозачетаЗадолженности", ТипыДокументовВзаимозачетаЗадолженности());
	
	ТипыРегистраторовСлужебныхОбъектовУчета = ОбщегоНазначения.СкопироватьРекурсивно(Запрос.Параметры.ТипыДокументовВводаОстатков);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыРегистраторовСлужебныхОбъектовУчета, Запрос.Параметры.ТипыДокументовРозничныхПродаж);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыРегистраторовСлужебныхОбъектовУчета, Запрос.Параметры.ТипыДокументовРозничныхВозвратов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыРегистраторовСлужебныхОбъектовУчета, Запрос.Параметры.ТипыДокументовВзаимозачетаЗадолженности);
	Запрос.УстановитьПараметр("ТипыРегистраторовСлужебныхОбъектовУчета", ТипыРегистраторовСлужебныхОбъектовУчета);
	Запрос.УстановитьПараметр("ИмяРегистраСлужебныхОбъектовУчета", ИмяРегистраСлужебныхОбъектовУчета());
	
	КорИсточникиДанных = Новый ТаблицаЗначений();
	//++ НЕ УТКА
	КорИсточникиДанных.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	//-- НЕ УТКА
	КорИсточникиДанных.Колонки.Добавить("КорИсточникДанных", ОбщегоНазначения.ОписаниеТипаСтрока(150)); // имя регистра, корреспондирующего с объектом учета
	КорИсточникиДанных.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50)); // идентификатор всех регистров, корреспондирующих с объектом учета
	КорИсточникиДанных.Колонки.Добавить("КорИдентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50)); // идентификатор для группировки всех корреспондирующих регистров
	Запрос.УстановитьПараметр("КорИсточникиДанных", КорИсточникиДанных);
	
	Запрос.УстановитьПараметр("РегистрыБезСуммыУпр", Новый Массив());
	Запрос.УстановитьПараметр("РегистрыБезСуммыРегл", Новый Массив());
	Запрос.УстановитьПараметр("РегистрыВыборкиАналитики", Новый Структура());
	Запрос.УстановитьПараметр("ВсеВыраженияСубконто", Новый Соответствие());
	Запрос.УстановитьПараметр("ВсеВидыСубконто", Новый Соответствие());
	
	Запрос.УстановитьПараметр("Дт", "Дт");
	Запрос.УстановитьПараметр("Кт", "Кт");
	
	Запрос.УстановитьПараметр("СложныеПроводкиСУказаниемКорИсточников", Ложь);
	
	Запрос.УстановитьПараметр("ВосстановитьРасчетыПоСторно", Ложь);
	
	ИмяРегистраПрочиеАктивыПассивы = Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	Запрос.УстановитьПараметр("ИмяРегистраПрочиеАктивыПассивы", ИмяРегистраПрочиеАктивыПассивы);
	
	Запрос.УстановитьПараметр("РегистрыЗаменыРеверсаНаСторно", Новый Массив());
	Запрос.УстановитьПараметр("ТаблицаКорреспонденцийДвиженийРегистров", "втДвиженияРегистровДебетКредит");
	Запрос.УстановитьПараметр("ТаблицаДетальныхДвиженийСИтогамиДебет", "втДетальныеДвиженияСИтогамиДебет");
	Запрос.УстановитьПараметр("ТаблицаДетальныхДвиженийСИтогамиКредит", "втДетальныеДвиженияСИтогамиКредит");
	
	Возврат Запрос;
	
КонецФункции

Процедура УничтожитьВременныеТаблицы(Запрос, ТекстыЗапросов) Экспорт
	
	ИсходныеВременныеТаблицы = Запрос.Параметры.ИсходныеВременныеТаблицы; // Массив -
	
	Для Каждого ВременнаяТаблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		ИмяВременнойТаблицы = ВременнаяТаблица.ПолноеИмя;
		Если ИсходныеВременныеТаблицы.Найти(ИмяВременнойТаблицы) = Неопределено Тогда
			ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяВременнойТаблицы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовОбщегоНазначения

Процедура ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицы) Экспорт
	
	Если ТипЗнч(ИмяТаблицы) = Тип("Массив") Тогда
		Для Каждого УдаляемаяТаблица Из ИмяТаблицы Цикл
			ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемаяТаблица);
		КонецЦикла;
	Иначе
		ТекстыЗапросов.Добавить("
		|УНИЧТОЖИТЬ " + ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов, ИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	&ИмяТаблицы КАК ВременнаяТаблица
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	Возврат НЕ Результаты[Результаты.ВГраница()].Пустой();
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовВосстановленияРасчетовПоСторно

Функция РегистрыВосстановленияРасчетовПоСторно() Экспорт
	
	ИменаРегистров = Новый Массив();
	ИменаРегистров.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя);
	ИменаРегистров.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя);
	
	Возврат ИменаРегистров;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовРаспределенияСуммИКоличеств

Процедура ДобавитьТаблицуОшибокОкругленияСуммы(ТекстыЗапросов, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.НомерЗаписи КАК НомерЗаписи,
	|	РаспределениеНебалансовых.НомерСложнойЗаписи КАК НомерСложнойЗаписи,
	|	МАКСИМУМ(РаспределениеНебалансовых.РаспределяемыйРесурс) - СУММА(РаспределениеНебалансовых.РаспределенныйРесурс) КАК ОшибкаОкругления,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА РаспределениеНебалансовых.ЕстьРаспределениеСуммы
	|			ТОГДА РаспределениеНебалансовых.РаспределенныйРесурс
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК МаксимальныйРаспределенныйРесурс
	|ПОМЕСТИТЬ втОшибкиОкругления
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|ГДЕ
	|	РаспределениеНебалансовых.СложнаяПроводка
	|	И РаспределениеНебалансовых.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНебалансовых.НомерЗаписи,
	|	РаспределениеНебалансовых.НомерСложнойЗаписи
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(РаспределениеНебалансовых.ЕстьРаспределениеСуммы) = ИСТИНА
	|	И МАКСИМУМ(РаспределениеНебалансовых.РаспределяемыйРесурс) <> СУММА(РаспределениеНебалансовых.РаспределенныйРесурс)
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	НомерСложнойЗаписи
	|";
	
	ВыполнитьЗаменуИменТаблицИРесурсовРаспределения(ТекстЗапроса, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс);
	ВыполнитьЗаменуИменНебалансовыхПолейРаспределения(ТекстЗапроса, РаспределенныйРесурс);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОшибкиОкругления.НомерЗаписи КАК НомерЗаписи,
	|	ОшибкиОкругления.ОшибкаОкругления КАК ОшибкаОкругления,
	|	МИНИМУМ(РаспределениеНебалансовых.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДляПомещения
	|ИЗ
	|	втОшибкиОкругления КАК ОшибкиОкругления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|		ПО ОшибкиОкругления.НомерЗаписи = РаспределениеНебалансовых.НомерЗаписи
	|		 И ОшибкиОкругления.НомерСложнойЗаписи = РаспределениеНебалансовых.НомерСложнойЗаписи
	|		 И ОшибкиОкругления.МаксимальныйРаспределенныйРесурс = РаспределениеНебалансовых.РаспределенныйРесурс
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиОкругления.НомерЗаписи,
	|	ОшибкиОкругления.ОшибкаОкругления
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	НомерСтроки
	|";
	
	ВыполнитьЗаменуИменТаблицИРесурсовРаспределения(ТекстЗапроса, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс);
	ВыполнитьЗаменуИменНебалансовыхПолейРаспределения(ТекстЗапроса, РаспределенныйРесурс);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиОкругления");
	
КонецПроцедуры

Процедура ДобавитьТаблицуОшибокОкругленияКоличества(ТекстыЗапросов, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.НомерЗаписи КАК НомерЗаписи,
	|	РаспределениеНебалансовых.НомерСложнойЗаписи КАК НомерСложнойЗаписи,
	|	МАКСИМУМ(РаспределениеНебалансовых.РаспределяемыйРесурс) - СУММА(РаспределениеНебалансовых.РаспределенныйРесурс) КАК ОшибкаОкругления,
	|	МАКСИМУМ(РаспределениеНебалансовых.РаспределенныйРесурс) КАК МаксимальныйРаспределенныйРесурс
	|ПОМЕСТИТЬ втОшибкиОкругления
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|ГДЕ
	|	РаспределениеНебалансовых.ЕстьРаспределениеКоличества
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНебалансовых.НомерЗаписи,
	|	РаспределениеНебалансовых.НомерСложнойЗаписи
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(РаспределениеНебалансовых.РаспределяемыйРесурс) <> СУММА(РаспределениеНебалансовых.РаспределенныйРесурс)
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	НомерСложнойЗаписи
	|";
	
	ВыполнитьЗаменуИменТаблицИРесурсовРаспределения(ТекстЗапроса, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс);
	ВыполнитьЗаменуИменНебалансовыхПолейРаспределения(ТекстЗапроса, РаспределенныйРесурс);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОшибкиОкругления.НомерЗаписи КАК НомерЗаписи,
	|	ОшибкиОкругления.ОшибкаОкругления КАК ОшибкаОкругления,
	|	МИНИМУМ(РаспределениеНебалансовых.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДляПомещения
	|ИЗ
	|	втОшибкиОкругления КАК ОшибкиОкругления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|		ПО ОшибкиОкругления.НомерЗаписи = РаспределениеНебалансовых.НомерЗаписи
	|		 И ОшибкиОкругления.НомерСложнойЗаписи = РаспределениеНебалансовых.НомерСложнойЗаписи
	|		 И ОшибкиОкругления.МаксимальныйРаспределенныйРесурс = РаспределениеНебалансовых.РаспределенныйРесурс
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиОкругления.НомерЗаписи,
	|	ОшибкиОкругления.ОшибкаОкругления
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	НомерСтроки
	|";
	
	ВыполнитьЗаменуИменТаблицИРесурсовРаспределения(ТекстЗапроса, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс);
	ВыполнитьЗаменуИменНебалансовыхПолейРаспределения(ТекстЗапроса, РаспределенныйРесурс);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиОкругления");
	
КонецПроцедуры

Процедура ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РаспределениеПоДатамПогашения.НомерЗаписи КАК НомерЗаписи,
	|	МАКСИМУМ(РаспределениеПоДатамПогашения.РаспределяемыйРесурс) - СУММА(РаспределениеПоДатамПогашения.РаспределенныйРесурс) КАК ОшибкаОкругления,
	|	МАКСИМУМ(РаспределениеПоДатамПогашения.РаспределенныйРесурс) КАК МаксимальныйРаспределенныйРесурс
	|ПОМЕСТИТЬ втОшибкиОкругления
	|ИЗ
	|	втРаспределениеПоДатамПогашения КАК РаспределениеПоДатамПогашения
	|ГДЕ
	|	РаспределениеПоДатамПогашения.ЕстьРаспределение
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеПоДатамПогашения.НомерЗаписи
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(РаспределениеПоДатамПогашения.РаспределяемыйРесурс) <> СУММА(РаспределениеПоДатамПогашения.РаспределенныйРесурс)
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи
	|";
	
	ВыполнитьЗаменуИменТаблицИРесурсовРаспределения(ТекстЗапроса, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОшибкиОкругления.НомерЗаписи КАК НомерЗаписи,
	|	ОшибкиОкругления.ОшибкаОкругления КАК ОшибкаОкругления,
	|	МИНИМУМ(РаспределениеПоДатамПогашения.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДляПомещения
	|ИЗ
	|	втОшибкиОкругления КАК ОшибкиОкругления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРаспределениеПоДатамПогашения КАК РаспределениеПоДатамПогашения
	|		ПО ОшибкиОкругления.НомерЗаписи = РаспределениеПоДатамПогашения.НомерЗаписи
	|		 И ОшибкиОкругления.МаксимальныйРаспределенныйРесурс = РаспределениеПоДатамПогашения.РаспределенныйРесурс
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиОкругления.НомерЗаписи,
	|	ОшибкиОкругления.ОшибкаОкругления
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	НомерСтроки
	|";
	
	ВыполнитьЗаменуИменТаблицИРесурсовРаспределения(ТекстЗапроса, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиОкругления");
	
КонецПроцедуры

Процедура ВыполнитьЗаменуИменТаблицИРесурсовРаспределения(ТекстЗапроса, ТаблицаДляПомещения, РаспределяемыйРесурс, РаспределенныйРесурс) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДляПомещения",  ТаблицаДляПомещения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РаспределяемыйРесурс", РаспределяемыйРесурс);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РаспределенныйРесурс", РаспределенныйРесурс);
	
КонецПроцедуры

Процедура ВыполнитьЗаменуИменНебалансовыхПолейРаспределения(ТекстЗапроса, РаспределенныйРесурс) Экспорт
	
	Если РаспределенныйРесурс = "СуммаУпрДт"
	 ИЛИ РаспределенныйРесурс = "СуммаВалДт"
	 ИЛИ РаспределенныйРесурс = "СуммаРеглДт"
	 ИЛИ РаспределенныйРесурс = "КоличествоДт" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НомерЗаписи", "НомерЗаписиДт");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СложнаяПроводка", "СложнаяПроводкаДт");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Валюта", "ВалютаДт");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЕстьРаспределениеСуммы", "ЕстьРаспределениеСуммыДт");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЕстьРаспределениеКоличества", "ЕстьРаспределениеКоличестваДт");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НомерЗаписи", "НомерЗаписиКт");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СложнаяПроводка", "СложнаяПроводкаКт");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Валюта", "ВалютаКт");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЕстьРаспределениеСуммы", "ЕстьРаспределениеСуммыКт");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЕстьРаспределениеКоличества", "ЕстьРаспределениеКоличестваКт");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииФормированияПараметровЗапроса

Процедура ЗаполнитьКорИсточникиДанных(ПараметрыЗапроса, СтрокаОбъектаУчета) Экспорт
	
	Если СтрокаОбъектаУчета.КорИсточникиДанных.Количество() > 0 Тогда
		КорИсточникиДанных = ПараметрыЗапроса.КорИсточникиДанных; // ТаблицаЗначений -
		ИдентификаторИсточников = ХешСуммаИсточниковДанных(СтрокаОбъектаУчета.КорИсточникиДанных, ХешФункция.SHA256);
		КорИдентификаторИсточников = ХешСуммаИсточниковДанных(СтрокаОбъектаУчета.КорИсточникиДанных, ХешФункция.SHA1);
		
		Для Каждого КорИсточникДанных Из СтрокаОбъектаУчета.КорИсточникиДанных Цикл
			НоваяСтрока = КорИсточникиДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъектаУчета);
			НоваяСтрока.КорИсточникДанных = КорИсточникДанных;
			НоваяСтрока.Идентификатор = ИдентификаторИсточников;
			НоваяСтрока.КорИдентификатор = КорИдентификаторИсточников;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ХешСуммаИсточниковДанных(ИсточникиДанных, ТипХешФункции)
	
	ТаблицаИсточников = Новый ТаблицаЗначений();
	ТаблицаИсточников.Колонки.Добавить("ИсточникДанных", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		НоваяСтрока = ТаблицаИсточников.Добавить();
		НоваяСтрока.ИсточникДанных = ИсточникДанных;
	КонецЦикла;
	
	ТаблицаИсточников.Свернуть("ИсточникДанных");
	ТаблицаИсточников.Сортировать("ИсточникДанных");
	
	ХешированиеДанных = Новый ХешированиеДанных(ТипХешФункции);
	ХешированиеДанных.Добавить(СтрСоединить(ТаблицаИсточников.ВыгрузитьКолонку("ИсточникДанных")));
	
	Возврат Base64Строка(ХешированиеДанных.ХешСумма);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииФормированияТекстовЗапросов

Процедура ИзменитьСоставПолейВыборки(ТекстЗапроса, УдаляемыеПоля = Неопределено, ПоляИндекса = Неопределено, ТаблицаДляПомещения = "") Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса();
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	ПакетЗапросов.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если УдаляемыеПоля <> Неопределено Тогда
		Для Каждого ПсевдонимПоля Из УдаляемыеПоля Цикл
			Колонка = ПакетЗапросов.Колонки.Найти(ПсевдонимПоля);
			Если Колонка <> Неопределено Тогда
				ИндексКолонки = ПакетЗапросов.Колонки.Индекс(Колонка);
				ПакетЗапросов.Колонки.Удалить(ИндексКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоляИндекса <> Неопределено Тогда
		Для Каждого ПсевдонимПоля Из ПоляИндекса Цикл
			ПакетЗапросов.Индекс.Добавить(ПсевдонимПоля);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТаблицаДляПомещения) Тогда
		ПакетЗапросов.ТаблицаДляПомещения = ТаблицаДляПомещения;
	ИначеЕсли НЕ ПустаяСтрока(ПакетЗапросов.ТаблицаДляПомещения) Тогда
		ПакетЗапросов.ТаблицаДляПомещения = "";
	КонецЕсли;

	ТекстЗапроса = ПакетЗапросов.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция ПоляИндексаТаблицЗаменыРеверсаНаСторно() Экспорт
	
	ПоляИндекса = Новый Массив();
	ПоляИндекса.Добавить("Период");
	ПоляИндекса.Добавить("Регистратор");
	ПоляИндекса.Добавить("ИдентификаторФинЗаписи");
	ПоляИндекса.Добавить("Организация");
	
	Возврат ПоляИндекса;
	
КонецФункции

Функция ПутьКДаннымСПсевдонимомИсточника(ПутьКДанным, ПсевдонимИсточника = Неопределено) Экспорт
	
	Если ПсевдонимИсточника = Неопределено Тогда
		ПсевдонимИсточника = ПсевдонимИсточникаДанныхПоУмолчанию();
	КонецЕсли;
	
	Если ПутьКДанным = "НЕОПРЕДЕЛЕНО"
	 ИЛИ ПустаяСтрока(ПсевдонимИсточника)
	 ИЛИ СтрНачинаетсяС(ПутьКДанным, "&")
	 ИЛИ СтрНачинаетсяС(ПутьКДанным, "ЗНАЧЕНИЕ")
	 ИЛИ СтрНачинаетсяС(ПутьКДанным, ПсевдонимИсточника)
	 ИЛИ СтрНайти(ПутьКДанным, " ") > 0
	 ИЛИ СтрНайти(ПутьКДанным, Символы.ПС) > 0 Тогда
		Возврат ПутьКДанным;
	Иначе
		Возврат ПсевдонимИсточника + "." + ПутьКДанным;
	КонецЕсли;
	
КонецФункции

Функция СтрокаВыборкиЗначения(ЗначениеВыборки) Экспорт
	
	ТипЗначенияВыборки = ТипЗнч(ЗначениеВыборки);
	
	Если ТипЗначенияВыборки = Тип("Неопределено") Тогда
		СтрокаВыборки = "НЕОПРЕДЕЛЕНО";
	ИначеЕсли ТипЗначенияВыборки = Тип("Число") Тогда
		СтрокаВыборки = Формат(ЗначениеВыборки, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли ТипЗначенияВыборки = Тип("Дата") Тогда
		СтрокаВыборки = "ДАТАВРЕМЯ(" + Формат(ЗначениеВыборки, "ДФ=yyyy,MM,dd; ДП=0001,01,01") + ")";
	ИначеЕсли ТипЗначенияВыборки = Тип("Строка") Тогда
		СтрокаВыборки = """" + ЗначениеВыборки + """";
	ИначеЕсли ТипЗначенияВыборки = Тип("Булево") Тогда
		СтрокаВыборки = Формат(ЗначениеВыборки, "БЛ=ЛОЖЬ; БИ=ИСТИНА");
	ИначеЕсли ТипЗначенияВыборки = Тип("Тип") Тогда
		СтрокаВыборки = "ТИП(" + ПолноеИмяТипа(ЗначениеВыборки) + ")";
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки) Тогда
		СтрокаВыборки = "ЗНАЧЕНИЕ(" + ПолноеИмяЗначенияПеречисления(ЗначениеВыборки) + ")";
	ИначеЕсли (Справочники.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки))
		И (ЗначениеВыборки.Предопределенный ИЛИ ЗначениеВыборки.Пустая()) Тогда
		СтрокаВыборки = "ЗНАЧЕНИЕ(" + ПолноеИмяПредопределенногоЗначения(ЗначениеВыборки) + ")";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки)
		И ЗначениеВыборки.Пустая() Тогда
		СтрокаВыборки = "ЗНАЧЕНИЕ(" + ПолноеИмяПредопределенногоЗначения(ЗначениеВыборки) + ")";
	ИначеЕсли ТипЗначенияВыборки = Тип("Массив") Тогда
		СтрокиВыборкиЭлементов = Новый Массив();
		Для Каждого ЭлементВыборки Из ЗначениеВыборки Цикл
			СтрокаВыборкиЭлемента = СтрокаВыборкиЗначения(ЭлементВыборки);
			Если СтрНачинаетсяС(СтрокаВыборкиЭлемента, "Параметр") Тогда
				СтрокиВыборкиЭлементов.Очистить();
				Прервать;
			Иначе
				СтрокиВыборкиЭлементов.Добавить(СтрокаВыборкиЭлемента);
			КонецЕсли;
		КонецЦикла;
		Если СтрокиВыборкиЭлементов.Количество() > 0 Тогда
			Разделитель = "," + Символы.ПС + Символы.Таб + Символы.Таб;
			СтрокаВыборки = СтрСоединить(СтрокиВыборкиЭлементов, Разделитель);
		Иначе
			СтрокаВыборки = "Параметр" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
		КонецЕсли;
	Иначе
		СтрокаВыборки = "Параметр" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиРесурса(СоставРесурса) Экспорт
	
	Если СоставРесурса.Количество() = 0 Тогда
		СтрокаВыборки = "0";
	Иначе
		ПутиКДанным = Новый Массив();
		
		Для Каждого ПолеРесурса Из СоставРесурса Цикл
			Если ПолеРесурса = "0" Тогда
				ПутиКДанным.Добавить(ПолеРесурса);
			ИначеЕсли СтрНачинаетсяС(ПолеРесурса, "-") Тогда
				ПутиКДанным.Добавить("-" + ПутьКДаннымСПсевдонимомИсточника(Сред(ПолеРесурса, 2)));
			Иначе
				ПутиКДанным.Добавить(ПутьКДаннымСПсевдонимомИсточника(ПолеРесурса));
			КонецЕсли;
		КонецЦикла;
		
		СтрокаВыборки = СтрСоединить(ПутиКДанным, " + ");
		
		Если ПутиКДанным.Количество() > 1 Тогда
			СтрокаВыборки = "(" + СтрокаВыборки + ")";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиСуммыРесурса(СтрокаВыборкиРесурса, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль) Экспорт
	
	Если СтрокаВыборкиРесурса = "0" Тогда
		СтрокаВыборкиСуммы = "0";
	Иначе
		СтрокаВыборкиСуммы = СтрЗаменить(ШаблонВыборкиСуммы, "&Ресурс", СтрокаВыборкиРесурса);
	КонецЕсли;
	
	Если СтрокаВыборкиРесурса <> "0" Тогда
		УсловияСторно.Добавить(СтрокаВыборкиРесурса + " < 0");
	КонецЕсли;
	
	Если СтрокаВыборкиРесурса <> "0" Тогда
		УсловияНеНоль.Добавить(СтрокаВыборкиРесурса + " <> 0");
	КонецЕсли;
	
	Возврат СтрокаВыборкиСуммы;
	
КонецФункции

Функция СтрокаВыбораЗначенияПоля(СтрокиВыборкиПоля) Экспорт
	
	Если СтрокиВыборкиПоля.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из СтрокиВыборкиПоля Цикл
			СтрокаВыбораЗначения = КлючИЗначение.Ключ;
			Прервать;
		КонецЦикла;
	Иначе
		ЧастотнаяСтрокаВыборки = "";
		КоличествоИспользований = 0;
		
		Для Каждого КлючИЗначение Из СтрокиВыборкиПоля Цикл
			Если КлючИЗначение.Значение.Количество() > КоличествоИспользований Тогда
				ЧастотнаяСтрокаВыборки = КлючИЗначение.Ключ;
				КоличествоИспользований = КлючИЗначение.Значение.Количество();
			КонецЕсли;
		КонецЦикла;
		
		СтрокиВыбора = Новый Массив();
		
		Для Каждого КлючИЗначение Из СтрокиВыборкиПоля Цикл
			Если КлючИЗначение.Ключ = ЧастотнаяСтрокаВыборки Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючИЗначение.Значение.Количество() = 1 Тогда
				ЗначениеОтбора = КлючИЗначение.Значение[0];
			Иначе
				ЗначениеОтбора = КлючИЗначение.Значение;
			КонецЕсли;
			
			УсловиеОтбора = Новый Структура("НомерПовтора", ЗначениеОтбора);
			
			СтрокиКогда = Новый Массив();
			СтрокиКогда.Добавить(Символы.Таб);
			СтрокиКогда.Добавить("КОГДА"); //@Query-part
			СтрокиКогда.Добавить(СтрокаУсловияВыборкиДанных(УсловиеОтбора,, "Повторитель"));
			
			СтрокиТогда = Новый Массив();
			СтрокиТогда.Добавить(Символы.Таб);
			СтрокиТогда.Добавить("ТОГДА"); //@Query-part
			СтрокиТогда.Добавить(КлючИЗначение.Ключ);
			
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
		КонецЦикла;
		
		СтрокиИначе = Новый Массив();
		СтрокиИначе.Добавить(Символы.Таб);
		СтрокиИначе.Добавить("ИНАЧЕ"); //@Query-part
		СтрокиИначе.Добавить(ЧастотнаяСтрокаВыборки);
		
		СтрокиКонец = Новый Массив();
		СтрокиКонец.Добавить(Символы.Таб);
		СтрокиКонец.Добавить("КОНЕЦ"); //@Query-part
		
		СтрокиВыбора.Вставить(0, "ВЫБОР"); //@Query-part
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиИначе, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКонец, ""));
		
		СтрокаВыбораЗначения = СтрСоединить(СтрокиВыбора, Символы.ПС);
	КонецЕсли;
	
	Возврат СтрокаВыбораЗначения;
	
КонецФункции

Функция РесурсОтсутствуетИлиМожетБытьПустым(СоставРесурса) Экспорт
	
	Если СоставРесурса.Количество() = 0 Тогда
		РесурсОтсутствует = Истина;
		РесурсМожетБытьПустым = Истина;
	Иначе
		РесурсОтсутствует = Ложь;
		РесурсМожетБытьПустым = СоставРесурса[0] = "0";
	КонецЕсли;
	
	Возврат РесурсОтсутствует ИЛИ РесурсМожетБытьПустым;
	
КонецФункции

Процедура ДобавитьПовторительВИсточникДанных(ИсточникДанных, КоличествоПовторов) Экспорт
	
	СтрокиВыборки = Новый Массив();
	ШаблонВыборки = "
	|	ВЫБРАТЬ
	|		&НомерПовтора КАК НомерПовтора"; //@Query-part
	
	Для НомерПовтора = 1 По КоличествоПовторов Цикл
		СтрокиВыборки.Добавить(СтрЗаменить(ШаблонВыборки, "&НомерПовтора", СтрокаВыборкиЗначения(НомерПовтора)));
	КонецЦикла;
	
	Разделитель = "
	|	ОБЪЕДИНИТЬ ВСЕ"; //@Query-part
	
	ИсточникДанных = ИсточникДанных + СтрШаблон("
		|	,
		|	(%1) КАК Повторитель",
		СтрСоединить(СтрокиВыборки, Разделитель));
	
КонецПроцедуры

Процедура ДобавитьПовторительВПоляГруппировки(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"СГРУППИРОВАТЬ ПО",
		"СГРУППИРОВАТЬ ПО
		|	Повторитель.НомерПовтора,");
	
КонецПроцедуры

// Возвращает фрагмент текста запроса с условием на поле Период
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры запроса, в том числе:
//   * ДатаНачала - Дата - начало периода
//   * ДатаОкончания - Дата - конец периода
//
// Возвращаемое значение:
//  Строка - фрагмент текста запроса
//
Функция СтрокаУсловияПериод(ПараметрыЗапроса) Экспорт
	
	СтрокиУсловия = Новый Массив();
	
	Если ПараметрыЗапроса.ДатаНачала > '00010101' Тогда
		СтрокиУсловия.Добавить("&Период >= &ДатаНачала");
	КонецЕсли;
	
	Если ПараметрыЗапроса.ДатаОкончания > '00010101' Тогда
		СтрокиУсловия.Добавить("&Период <= &ДатаОкончания");
	КонецЕсли;
	
	Если СтрокиУсловия.Количество() = 0 Тогда
		Возврат "ИСТИНА";
	Иначе
		Возврат СтрСоединить(СтрокиУсловия, Символы.ПС + Символы.Таб + "И ");
	КонецЕсли;
	
КонецФункции

// Возвращает фрагмент текста запроса с условием на поле Регистратор
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры запроса, в том числе:
//   * Регистратор - ДокументСсылка - ссылка на регистратор
//
// Возвращаемое значение:
//  Строка - фрагмент текста запроса
//
Функция СтрокаУсловияРегистратор(ПараметрыЗапроса) Экспорт
	
	Если ТипЗнч(ПараметрыЗапроса.Регистратор) = Тип("Массив") Тогда
		Возврат "&Регистратор В (&ПараметрЗапросаРегистратор)";
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Регистратор) Тогда
		Возврат "&Регистратор = &ПараметрЗапросаРегистратор";
	Иначе
		Возврат "ИСТИНА";
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияУдаляемыеДокументы(МетаданныеРегистра) Экспорт
	
	ДокументыМетаданные = Метаданные.Документы;
	СтрокиУсловия = Новый Массив();
	
	Для Каждого ИмяДокумента Из ИменаНеиспользуемыхДокументов() Цикл
		Если ДокументыМетаданные[ИмяДокумента].Движения.Содержит(МетаданныеРегистра) Тогда
			СтрокиУсловия.Добавить("НЕ &Регистратор ССЫЛКА Документ." + ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиУсловия.Количество() = 0 Тогда
		Возврат "ИСТИНА";
	Иначе
		Возврат СтрСоединить(СтрокиУсловия, Символы.ПС + Символы.Таб + "И ");
	КонецЕсли;
	
КонецФункции

Функция СтрокаДополнительныйОтбор(ПараметрыОтраженияДвижений) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтраженияДвижений.ДополнительныйОтбор) Тогда
		Возврат ПараметрыОтраженияДвижений.ДополнительныйОтбор;
	Иначе
		Возврат "ИСТИНА";
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияРеквизитСторно() Экспорт
	
	Возврат "&РеквизитСторно = ЛОЖЬ";
	
КонецФункции

Функция ПолноеИмяТипа(ЗначениеТипа) Экспорт
	
	Если ЗначениеТипа = Тип("Дата") Тогда
		Возврат "ДАТА";
	ИначеЕсли ЗначениеТипа = Тип("Число") Тогда
		Возврат "ЧИСЛО";
	ИначеЕсли ЗначениеТипа = Тип("Строка") Тогда
		Возврат "СТРОКА";
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ЗначениеТипа);
		Если ОбъектМетаданных <> Неопределено Тогда
			Возврат ОбъектМетаданных.ПолноеИмя();
		Иначе
			Возврат "БУЛЕВО";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолноеИмяЗначенияПеречисления(ЗначениеПеречисления)
	
	ОбъектМетаданных = ЗначениеПеречисления.Метаданные();
	
	Если ЗначениеПеречисления.Пустая() Тогда
		ИмяЗначения = "ПустаяСсылка";
	Иначе
		ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(ЗначениеПеречисления);
		ИмяЗначения = ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	КонецЕсли;
	
	Возврат ОбъектМетаданных.ПолноеИмя() + "." + ИмяЗначения;
	
КонецФункции

Функция ПолноеИмяПредопределенногоЗначения(ПредопределенноеЗначение)
	
	ОбъектМетаданных = ПредопределенноеЗначение.Метаданные();
	
	Если ПредопределенноеЗначение.Пустая() Тогда
		ИмяЗначения = "ПустаяСсылка";
	Иначе
		ИмяЗначения = ПредопределенноеЗначение.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	Возврат ОбъектМетаданных.ПолноеИмя() + "." + ИмяЗначения;
	
КонецФункции

Функция ТипыДокументовВводаОстатков()
	
	ТипыДокументов = Новый Массив();
	
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковВзаиморасчетов"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковВзаиморасчетовПоАренде"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковДенежныхСредств"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковИнвестицииВАренду"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковОПродажахЗаПрошлыеПериоды"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковПоФинансовымИнструментам"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковПрочиеРасходы"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковПрочихАктивовПассивов"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковРасчетовПоЭквайрингу"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковСПодотчетниками"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковТоваров"));
	
	ФинансовыйУчетПоДаннымБалансовыхРегистровЛокализация.ДополнитьТипыДокументовВводаОстатков(ТипыДокументов);
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция ТипыДокументовРозничныхПродаж()
	
	ТипыДокументов = Новый Массив();
	
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияПодарочныхСертификатов"));
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция ТипыДокументовРозничныхВозвратов()
	
	ТипыДокументов = Новый Массив();
	
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхВозвратах"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВозвратПодарочныхСертификатов"));
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция ТипыДокументовВзаимозачетаЗадолженности()
	
	ТипыДокументов = Новый Массив();
	
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция ИмяРегистраСлужебныхОбъектовУчета() Экспорт
	
	Возврат "ДвиженияСлужебныхОбъектовУчета";
	
КонецФункции

Функция ХозяйственныеОперацииБезУчетаВВалюте()
	
	БезУчетаВВалюте = Новый Массив();
	
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыАрендаПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыАрендаУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыДепозитыПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыДепозитыУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыДСПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыДСУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыЗаймыВыданныеПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыЗаймыВыданныеУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКредитыИЗаймыПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКредитыИЗаймыУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыРезервыПоДолгамПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыРезервыПоДолгамУбыток);
	
	Возврат БезУчетаВВалюте;
	
КонецФункции

Функция ТипыНалогообложенияБезУчетаНДС()
	
	БезУчетаНДС = Новый Массив();
	
	БезУчетаНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	БезУчетаНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	
	Возврат БезУчетаНДС;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПроводок

Функция ПроверкаРавенстваБалансовыхРесурсов(ВыборкаДвижения, СтрокиАналитики, ПараметрыЗапроса, ДтКт) Экспорт
	
	Если СтрокиАналитики.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяРегистра = ВыборкаДвижения["ИмяРегистра" + ДтКт];
	
	Если ИмяРегистра = ИмяРегистраСлужебныхОбъектовУчета() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СуммаУпр = 0;
	СуммаРегл = 0;
	
	Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
		СуммаУпр = СуммаУпр + СтрокаАналитики.СуммаУпр;
		СуммаРегл = СуммаРегл + СтрокаАналитики.СуммаРегл;
	КонецЦикла;
	
	Если ПараметрыЗапроса.РегистрыБезСуммыУпр.Найти(ИмяРегистра) <> Неопределено Тогда
		СуммаДвиженияУпрРавнаСуммеУпрАналитики = Истина;
	Иначе
		СуммаДвиженияУпрРавнаСуммеУпрАналитики = ВыборкаДвижения["СуммаДвиженияУпр" + ДтКт] = СуммаУпр;
	КонецЕсли;
	
	Если ПараметрыЗапроса.РегистрыБезСуммыРегл.Найти(ИмяРегистра) <> Неопределено Тогда
		СуммаДвиженияРеглРавнаСуммеРеглАналитики = Истина;
	Иначе
		СуммаДвиженияРеглРавнаСуммеРеглАналитики = ВыборкаДвижения["СуммаДвиженияРегл" + ДтКт] = СуммаРегл;
	КонецЕсли;
	
	Возврат СуммаДвиженияУпрРавнаСуммеУпрАналитики И СуммаДвиженияРеглРавнаСуммеРеглАналитики;
	
КонецФункции

Функция ВалютыОперативногоУчета(Организация) Экспорт
	
	ВалютыОперативногоУчета = Новый Структура();
	ВалютыОперативногоУчета.Вставить("ВалютаУпр", ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета());
	ВалютыОперативногоУчета.Вставить("ВалютаРегл", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Возврат ВалютыОперативногоУчета;
	
КонецФункции

Функция ПересчитанныеРесурсыМногихАналитик(ВыборкаДвижения, МногоАналитик, ПараметрыФормированияПроводок) Экспорт
	
	ОписаниеСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыФормированияПроводок.ДлинаСуммы, ПараметрыФормированияПроводок.ТочностьСуммы);
	ОписаниеКоличества = ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыФормированияПроводок.ДлинаКоличества, ПараметрыФормированияПроводок.ТочностьКоличества);
	
	ТаблицаРесурсов = Новый ТаблицаЗначений();
	ТаблицаРесурсов.Колонки.Добавить("СуммаУпр", ОписаниеСуммы);
	ТаблицаРесурсов.Колонки.Добавить("СуммаРегл", ОписаниеСуммы);
	ТаблицаРесурсов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаРесурсов.Колонки.Добавить("СуммаВал", ОписаниеСуммы);
	ТаблицаРесурсов.Колонки.Добавить("Количество", ОписаниеКоличества);
	
	ПересчитатьБаланс = ВыборкаДвижения["СложнаяПроводка" + МногоАналитик.ДтКт];
	ПересчитатьСуммыВал = ПересчитатьБаланс
		И ВыборкаДвижения["Валютный" + МногоАналитик.ДтКт]
		И ВыборкаДвижения["СуммаВал" + МногоАналитик.ДтКт] <> 0;
	ПересчитатьКоличества = ПересчитатьБаланс
		И ВыборкаДвижения["Количественный" + МногоАналитик.ДтКт]
		И ВыборкаДвижения["Количество" + МногоАналитик.ДтКт] <> 0;
	
	СуммыУпр = Новый Массив();
	СуммыРегл = Новый Массив();
	СуммыВал = Новый Массив();
	Количества = Новый Массив();
	
	Для Каждого СтрокаАналитики Из МногоАналитик.СтрокиАналитики Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		НоваяСтрока.Валюта = ВыборкаДвижения["Валюта" + МногоАналитик.ДтКт];
		
		Если ПересчитатьБаланс Тогда
			СуммыУпр.Добавить(СтрокаАналитики.СуммаУпр);
			СуммыРегл.Добавить(СтрокаАналитики.СуммаРегл);
			Если ПересчитатьСуммыВал Тогда
				СуммыВал.Добавить(СтрокаАналитики.СуммаВал);
			КонецЕсли;
			Если ПересчитатьКоличества Тогда
				Количества.Добавить(СтрокаАналитики.Количество);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАналитики, "СуммаУпр,СуммаРегл,СуммаВал,Количество");
		КонецЕсли;
	КонецЦикла;
	
	Если ПересчитатьБаланс Тогда
		РаспределениеСуммыУпр = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ВыборкаДвижения.СуммаУпр, СуммыУпр, ПараметрыФормированияПроводок.ТочностьСуммы);
		Если РаспределениеСуммыУпр <> Неопределено Тогда
			ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеСуммыУпр, "СуммаУпр");
		КонецЕсли;
		
		РаспределениеСуммыРегл = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ВыборкаДвижения.СуммаРегл, СуммыРегл, ПараметрыФормированияПроводок.ТочностьСуммы);
		Если РаспределениеСуммыРегл <> Неопределено Тогда
			ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеСуммыРегл, "СуммаРегл");
		КонецЕсли;
		
		Если ПересчитатьСуммыВал Тогда
			РаспределениеСуммыВал = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				ВыборкаДвижения["СуммаВал" + МногоАналитик.ДтКт], СуммыВал, ПараметрыФормированияПроводок.ТочностьСуммы);
			Если РаспределениеСуммыВал <> Неопределено Тогда
				ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеСуммыВал, "СуммаВал");
			КонецЕсли;
		КонецЕсли;
		
		Если ПересчитатьКоличества Тогда
			РаспределениеКоличества = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				ВыборкаДвижения["Количество" + МногоАналитик.ДтКт], Количества, ПараметрыФормированияПроводок.ТочностьКоличества);
			Если РаспределениеКоличества <> Неопределено Тогда
				ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеКоличества, "Количество");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаРесурсов;
	
КонецФункции

Функция РаспределенныеРесурсыОднойАналитики(ВыборкаДвижения, ОднаАналитика, РесурсыМногихАналитик, ПараметрыФормированияПроводок) Экспорт
	
	ОписаниеСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыФормированияПроводок.ДлинаСуммы, ПараметрыФормированияПроводок.ТочностьСуммы);
	ОписаниеКоличества = ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыФормированияПроводок.ДлинаКоличества, ПараметрыФормированияПроводок.ТочностьКоличества);
	
	ТаблицаРесурсов = Новый ТаблицаЗначений();
	ТаблицаРесурсов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаРесурсов.Колонки.Добавить("СуммаВал", ОписаниеСуммы);
	ТаблицаРесурсов.Колонки.Добавить("Количество", ОписаниеКоличества);
	
	РаспределитьСуммуВал = ВыборкаДвижения["Валютный" + ОднаАналитика.ДтКт]
		И ВыборкаДвижения["СуммаВал" + ОднаАналитика.ДтКт] <> 0;
	РаспределитьКоличество = ВыборкаДвижения["Количественный" + ОднаАналитика.ДтКт]
		И ВыборкаДвижения["Количество" + ОднаАналитика.ДтКт] <> 0;
	
	СуммыУпр = Новый Массив();
	СуммыРегл = Новый Массив();
	
	ВсеСуммыУпрРавныНулю = Истина;
	ВсеСуммыУпрНеРавныНулю = Истина;
	ВсеСуммыРеглРавныНулю = Истина;
	ВсеСуммыРеглНеРавныНулю = Истина;
	
	Для Каждого СтрокаРесурсовМногих Из РесурсыМногихАналитик Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		НоваяСтрока.Валюта = ВыборкаДвижения["Валюта" + ОднаАналитика.ДтКт];
		
		Если РаспределитьСуммуВал ИЛИ РаспределитьКоличество Тогда
			СуммыУпр.Добавить(СтрокаРесурсовМногих.СуммаУпр);
			СуммыРегл.Добавить(СтрокаРесурсовМногих.СуммаРегл);
			Если СтрокаРесурсовМногих.СуммаУпр = 0 Тогда
				ВсеСуммыУпрНеРавныНулю = Ложь;
			Иначе
				ВсеСуммыУпрРавныНулю = Ложь;
			КонецЕсли;
			Если СтрокаРесурсовМногих.СуммаРегл = 0 Тогда
				ВсеСуммыРеглНеРавныНулю = Ложь;
			Иначе
				ВсеСуммыРеглРавныНулю = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеСуммыУпрНеРавныНулю Тогда
		Коэффициенты = СуммыУпр;
	ИначеЕсли ВсеСуммыРеглНеРавныНулю Тогда
		Коэффициенты = СуммыРегл;
	ИначеЕсли НЕ ВсеСуммыУпрРавныНулю Тогда
		Коэффициенты = СуммыУпр;
	ИначеЕсли НЕ ВсеСуммыРеглРавныНулю Тогда
		Коэффициенты = СуммыРегл;
	Иначе
		Возврат ТаблицаРесурсов;
	КонецЕсли;
	
	Если РаспределитьСуммуВал Тогда
		РаспределениеСуммыВал = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ВыборкаДвижения["СуммаВал" + ОднаАналитика.ДтКт], Коэффициенты, ПараметрыФормированияПроводок.ТочностьСуммы);
		Если РаспределениеСуммыВал <> Неопределено Тогда
			ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеСуммыВал, "СуммаВал");
		КонецЕсли;
	КонецЕсли;
	
	Если РаспределитьКоличество Тогда
		РаспределениеКоличества = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ВыборкаДвижения["Количество" + ОднаАналитика.ДтКт], Коэффициенты, ПараметрыФормированияПроводок.ТочностьКоличества);
		Если РаспределениеКоличества <> Неопределено Тогда
			ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеКоличества, "Количество");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаРесурсов;
	
КонецФункции

// Возвращает строковое выражение массива полей, по которым идентифицируется корреспонденция балансовых регистров.
//
// Возвращаемое значение:
//  Строка - строковое выражение массива полей
//
Функция ПоляПоискаКорреспонденцииРегистров() Экспорт
	
	Возврат "Период,Регистратор,Организация,ИдентификаторФинЗаписи";
	
КонецФункции

#КонецОбласти

#КонецОбласти