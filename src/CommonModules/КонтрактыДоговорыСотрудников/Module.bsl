////////////////////////////////////////////////////////////////////////////////
// КонтрактыДоговорыСотрудников: Процедуры и функции подсистемы учета договоров и контрактов сотрудников.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет движения документа
//		СведенияКонтрактаДоговораСотрудника.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	СведенияКонтрактаДоговораСотрудника - таблица значений с полями аналогичными структуре регистра сведений
//	                                      СведенияКонтрактаДоговораСотрудника.
// 		
Процедура СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах, ЗаписыватьОсновныеДанные = Истина) Экспорт
	
	Если ЗаписыватьОсновныеДанные Тогда
		СформироватьДвиженияОсновныхДанныхОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах);
	КонецЕсли;
	
	СформироватьДвиженияСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах);
	
КонецПроцедуры

// Возвращает структуру описывающую временную таблицу отборов для получения сведений
// о контрактах и договорах сотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ИмяВТОтборов			- Строка
//
// Возвращаемое значение:
//		Структура - содержит ключи:
//			* МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц.
//			* ИмяВТОтборов				- Строка.
//
Функция ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников(МенеджерВременныхТаблиц, ИмяВТОтборов = "ВТСотрудникиПериоды") Экспорт
	
	ОписательВТ = Новый Структура;
	
	ОписательВТ.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВТ.Вставить("ИмяВТОтборов", 			ИмяВТОтборов);
	
	Возврат ОписательВТ;
	
КонецФункции

// Создает временную таблицу, содержащую записи регистра сведений ОсновныеДанныеКонтрактаДоговораСотрудника и 
// СведенияКонтрактаДоговораСотрудника по отбору переданному во временной таблице, содержащейся в
// МенеджереВременныхТаблиц.
//
// Параметры:
//		ТолькоРазрешенные						- Булево
//		ОписательВременныхТаблиц				- Структура (см.
//		                              ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников).
//
// Возвращаемое значение:
//		РезультатЗапроса
//
Процедура СоздатьВТСведенияОКонтрактахДоговорахСотрудников(ТолькоРазрешенные, ОписательВременныхТаблиц) Экспорт
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ОсновныеДанныеКонтрактаДоговораСотрудника",
		ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписательВременныхТаблиц.ИмяВТОтборов, "Сотрудник"),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СведенияКонтрактаДоговораСотрудника",
		ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписательВременныхТаблиц.ИмяВТОтборов, "Сотрудник"),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Период,
		|	СотрудникиПериоды.Сотрудник,";
	
	ОсновныеДанныеДоговораКонтракта = ОсновныеДанныеДоговораКонтракта();
	Для каждого Поле Из ОсновныеДанныеДоговораКонтракта Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
			|	ОсновныеДанныеКонтрактаДоговора." + Поле + ",";
		
	КонецЦикла;
	
	СведенияОДоговореКонтракте = СведенияОДоговореКонтракте();
	Для каждого Поле Из СведенияОДоговореКонтракте Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
			|	СведенияОДоговореКонтракте." + Поле + ",";
		
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапроса + "
		|ПОМЕСТИТЬ ВТСведенияОКонтрактахДоговорахСотрудников
		|ИЗ
		|	 " + ОписательВременныхТаблиц.ИмяВТОтборов + " КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних КАК ОсновныеДанныеКонтрактаДоговора
		|		ПО СотрудникиПериоды.Сотрудник = ОсновныеДанныеКонтрактаДоговора.Сотрудник
		|			И СотрудникиПериоды.Период = ОсновныеДанныеКонтрактаДоговора.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияКонтрактаДоговораСотрудникаСрезПоследних КАК СведенияОДоговореКонтракте
		|		ПО СотрудникиПериоды.Сотрудник = СведенияОДоговореКонтракте.Сотрудник
		|			И СотрудникиПериоды.Период = СведенияОДоговореКонтракте.Период";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру содержащую сведения о договоре или контракте сотрудника.
//
// Параметры:
//		Период		- Дата
//		Сотрудник 	- СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//		Структура (см. ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников).
//
Функция СведенияОКонтрактеДоговореСотрудника(Период, Сотрудник) Экспорт
	СведенияОКонтрактеДоговореСотрудника = СтруктураСведенийОДоговореКонтракте();
	
	Фильтр = НовыйФильтрПолученияСведенийОКонтрактахДоговорах();
	
	СтрокаФильтра = Фильтр.Добавить();
	СтрокаФильтра.Сотрудник = Сотрудник;
	СтрокаФильтра.Период = Период;
	
	Сведения = СведенияОКонтрактахДоговорахСотрудников(Фильтр);
	
	ЗаполнитьЗначенияСвойств(СведенияОКонтрактеДоговореСотрудника, Сведения[0]);

	Возврат СведенияОКонтрактеДоговореСотрудника;	
КонецФункции

Функция НовыйФильтрПолученияСведенийОКонтрактахДоговорах() Экспорт
	Фильтр = Новый ТаблицаЗначений();
	Фильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Фильтр.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Возврат Фильтр;
КонецФункции	

Функция СведенияОКонтрактахДоговорахСотрудников(Фильтр, Знач НеобходимыеДанные = Неопределено) Экспорт
	Если ТипЗнч(НеобходимыеДанные) = Тип("Строка") Тогда
		НеобходимыеДанные = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НеобходимыеДанные, ",",,Истина);
	КонецЕсли;	
	
	СведенияОКонтрактахДоговорахСотрудников = НовыйСведенияОКонтрактахДоговорахСотрудников(НеобходимыеДанные);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
		Фильтр,
		"Сотрудник",
		"",
		МенеджерВременныхТаблиц,
		"ВТФильтр");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ИсточникиДанных = НеобходимыеИсточникиДанныхПоЗаказаннымПолям(НеобходимыеДанные);
	
	Если ИсточникиДанных.ОсновныеДанныеКонтрактаДоговораСотрудника Тогда
		ОсновныеДанные = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраСрезПоследних(
			"ОсновныеДанныеКонтрактаДоговораСотрудника",
			МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения);
			
		ОсновныеДанные.Индексы.Добавить("Сотрудник, Период");
	КонецЕсли;
				
	Если ИсточникиДанных.СведенияКонтрактаДоговораСотрудника Тогда
		ДополнительныеДанные = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраСрезПоследних(
			"СведенияКонтрактаДоговораСотрудника",
			МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения);	
		
		ДополнительныеДанные.Индексы.Добавить("Сотрудник, Период");
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("Сотрудник, Период");
	
	Для Каждого СтрокаФильтра Из Фильтр Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаФильтра);
		
		СтрокаРезультат = СведенияОКонтрактахДоговорахСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаФильтра);
		
		Если ИсточникиДанных.ОсновныеДанныеКонтрактаДоговораСотрудника Тогда
			СтрокиОсновныхДанных = ОсновныеДанные.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОсновныхДанных.Количество() > 0  Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокиОсновныхДанных[0]);
			КонецЕсли;
		КонецЕсли;	
			
		Если ИсточникиДанных.СведенияКонтрактаДоговораСотрудника Тогда
			СтрокиДополнительныхДанных = ДополнительныеДанные.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДополнительныхДанных.Количество() > 0  Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокиДополнительныхДанных[0]);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
			
	Возврат СведенияОКонтрактахДоговорахСотрудников;
КонецФункции	

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.19.71";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияПриостановленияТрудовыхДоговоровКонтрактов) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.24.19";
		Обработчик.Процедура = "Справочники.ОснованияПриостановленияТрудовыхДоговоровКонтрактов.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.4";
	Обработчик.Процедура = "Документы.ПриостановлениеТрудовыхДоговоровКонтрактов.ЗаполнитьИдентификаторыСтрок";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("55c81076-72cd-4c08-91d8-23809d59fde5");
	Обработчик.Комментарий =
		НСтр("ru = 'Заполнение реквизита ""Идентификатор строки"" в документах ""Приостановление трудовых договоров"".';
			|en = 'Fills the ""Line ID"" attribute in the ""Employment contract suspension"" documents.'");
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеКлассификаторовОснованийПриемаУвольненияСотрудников

// Процедура - Заполнить справочник из макета классификатора
//
// Параметры:
//  ИмяСправочника	 				- Строка - Имя объекта метаданных классификатор которого надо получить, например: "ОснованияЗаключенияСрочныхТрудовыхДоговоров"
//  ИмяМакетаСКлассификатором		- Строка - Имя макета, содержащего классификатор справочника в XML формате
//  СоответствиеПолей			 	- Соответствие - ключ - имя реквизита справочника, значение - имя поля данных классификатора  
//  КлючиПоиска						- Структура с ключами:
//										* КлючиПоискаСправочника
//										* КлючиПоискаМакета
//
Процедура ЗаполнитьСправочникИзМакетаКлассификатора(ИмяСправочника, ИмяМакетаСКлассификатором, СоответствиеПолей, КлючиПоиска, Перезаполнить = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКлассификатора.Ссылка КАК Ссылка,
		|	&КлючПоискаСправочника КАК КлючПоискаСправочника
		|ИЗ
		|	Справочник.ОснованияЗаключенияСрочныхТрудовыхДоговоров КАК ТаблицаКлассификатора";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КлючПоискаСправочника", "ТаблицаКлассификатора." + КлючиПоиска.КлючиПоискаСправочника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОснованияЗаключенияСрочныхТрудовыхДоговоров", ИмяСправочника);
	
	ЗначенияПоискаСправочника = Запрос.Выполнить().Выгрузить();
	
	КлассификаторСправочника = КлассификаторСправочникаИзМакета(ИмяСправочника, ИмяМакетаСКлассификатором);
	ИспользоватьПредопределенныеЭлементы =
		(КлассификаторСправочника.Колонки.Найти("ID") <> Неопределено);
	ИспользоватьДокументыОснования =
		(КлассификаторСправочника.Колонки.Найти("Document") <> Неопределено);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяСправочника);
	
	Для Каждого СтрокаКлассификатора Из КлассификаторСправочника Цикл
		
		ДокументОснование = Неопределено;
		Если ИспользоватьДокументыОснования Тогда
			Если Не ПустаяСтрока(СтрокаКлассификатора.Document) Тогда
				ДокументОснование = Перечисления.НормативныеДокументыОснованийКадровыхПриказов[СтрокаКлассификатора.Document];
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьПредопределенныеЭлементы И ЗначениеЗаполнено(СтрокаКлассификатора.ID) Тогда
			
			Попытка
				
				СсылкаСправочника = ПредопределенноеЗначение("Справочник." + ИмяСправочника + "." + СтрокаКлассификатора.ID);
				СправочникОбъект = СсылкаСправочника.ПолучитьОбъект();
				
			Исключение
				
				СправочникОбъект = Менеджер.СоздатьЭлемент();
				СправочникОбъект.ИмяПредопределенныхДанных = СтрокаКлассификатора.ID;
				
			КонецПопытки;
			
		Иначе
			
			НайденныйЭлемент = ЗначенияПоискаСправочника.Найти(СтрокаКлассификатора[КлючиПоиска.КлючиПоискаМакета], "КлючПоискаСправочника");
			Если Перезаполнить Тогда
				
				Если НайденныйЭлемент <> Неопределено Тогда
					СправочникОбъект = НайденныйЭлемент.Ссылка.ПолучитьОбъект();
				Иначе
					СправочникОбъект = Менеджер.СоздатьЭлемент();
				КонецЕсли;
				
			Иначе
				
				Если НайденныйЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СправочникОбъект = Менеджер.СоздатьЭлемент();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого Поле Из СоответствиеПолей Цикл
			СправочникОбъект[Поле.Ключ] = СтрокаКлассификатора[Поле.Значение];
		КонецЦикла;
		Если ИспользоватьДокументыОснования
			И ЗначениеЗаполнено(ДокументОснование) Тогда
			
			СправочникОбъект.ДокументОснование = ДокументОснование;
		КонецЕсли;
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получает классификатор справочника из XML-классификатора хранимого в макете.
//
// Параметры:
//  ИмяСправочника	 - Строка - Имя объекта метаданных классификатор которого надо получить, например: "ОснованияЗаключенияСрочныхТрудовыхДоговоров"
//  ИмяМакетаСКлассификатором		 - Строка - Имя макета, содержащего классификатор справочника в XML формате.
// 
// Возвращаемое значение:
//  Данные - таблица значений, содержащая данные из XML-классификатора хранимого в макете.
//
Функция КлассификаторСправочникаИзМакета(ИмяСправочника, ИмяМакетаСКлассификатором) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяСправочника);
	
	Макет = Менеджер.ПолучитьМакет(ИмяМакетаСКлассификатором);	
	
	КлассификаторXML = Макет.ПолучитьТекст();
	
	Возврат ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
КонецФункции

// Функция - Справочник заполнен
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, заполненность которого надо проверить.
// 
// Возвращаемое значение:
//  Булево - Истина, если справочник содержит хотя бы один элемент.
//
Функция СправочникЗаполнен(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	&ИмяСправочника КАК Справочник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПустаяЗаписьПриостановленияТрудовыхДоговоровКонтрактов() Экспорт
	
	Возврат Новый Структура(
		"Период,
		|ФизическоеЛицо,
		|Сотрудник,
		|Организация,
		|Приостановлен,
		|ДействуетДо,
		|ОснованиеПриостановления,
		|НомерПриказа,
		|ДатаПриказа,
		|ПланируемаяДатаЗавершения");
	
КонецФункции

Процедура СформироватьДвиженияПриостановленияТрудовыхДоговоровКонтрактов(Движения, ДанныеДляПроведения) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеДляПроведения Цикл
		Запись = Движения.ПриостановленияТрудовыхДоговоровКонтрактов.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
	КонецЦикла;
	
	Если Движения.ПриостановленияТрудовыхДоговоровКонтрактов.Количество() > 0 Тогда
		Движения.ПриостановленияТрудовыхДоговоровКонтрактов.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ПродлениеКонтрактаДоговора, Истина);
	Списки.Вставить(Метаданные.Документы.ПриостановлениеТрудовыхДоговоровКонтрактов, Истина);
	Списки.Вставить(Метаданные.Документы.ВозобновлениеТрудовыхДоговоровКонтрактов, Истина);
	Списки.Вставить(Метаданные.Справочники.ПродлениеКонтрактаДоговораПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ПриостановлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ВозобновлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОсновныеДанныеКонтрактаДоговораСотрудника, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияКонтрактаДоговораСотрудника, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПриостановленияТрудовыхДоговоровКонтрактов, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.ПродлениеКонтрактаДоговора.Чтение.ГруппыФизическихЛиц
	|Документ.ПродлениеКонтрактаДоговора.Чтение.Организации
	|Документ.ПродлениеКонтрактаДоговора.Изменение.ГруппыФизическихЛиц
	|Документ.ПродлениеКонтрактаДоговора.Изменение.Организации
	|Документ.ПриостановлениеТрудовыхДоговоровКонтрактов.Чтение.ГруппыФизическихЛиц
	|Документ.ПриостановлениеТрудовыхДоговоровКонтрактов.Чтение.Организации
	|Документ.ПриостановлениеТрудовыхДоговоровКонтрактов.Изменение.ГруппыФизическихЛиц
	|Документ.ПриостановлениеТрудовыхДоговоровКонтрактов.Изменение.Организации
	|Документ.ВозобновлениеТрудовыхДоговоровКонтрактов.Чтение.ГруппыФизическихЛиц
	|Документ.ВозобновлениеТрудовыхДоговоровКонтрактов.Чтение.Организации
	|Документ.ВозобновлениеТрудовыхДоговоровКонтрактов.Изменение.ГруппыФизическихЛиц
	|Документ.ВозобновлениеТрудовыхДоговоровКонтрактов.Изменение.Организации
	|Справочник.ПродлениеКонтрактаДоговораПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПродлениеКонтрактаДоговораПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПродлениеКонтрактаДоговораПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПродлениеКонтрактаДоговораПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ПриостановлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПриостановлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПриостановлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПриостановлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ВозобновлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВозобновлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВозобновлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВозобновлениеТрудовыхДоговоровКонтрактовПрисоединенныеФайлы.Изменение.Организации
	|РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника.Чтение.Организации
	|РегистрСведений.СведенияКонтрактаДоговораСотрудника.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияКонтрактаДоговораСотрудника.Чтение.Организации
	|РегистрСведений.ПриостановленияТрудовыхДоговоровКонтрактов.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПриостановленияТрудовыхДоговоровКонтрактов.Чтение.Организации
	|РегистрСведений.ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПродлениеКонтрактаДоговора", 						"ДатаПродления", 	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриостановлениеТрудовыхДоговоровКонтрактов", 		"ДатаСобытия", 		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозобновлениеТрудовыхДоговоровКонтрактов", 			"ДатаСобытия", 		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПриостановленияТрудовыхДоговоровКонтрактов", 	"Период", 			"КадровыйУчет", "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ПродлениеКонтрактаДоговора);
	СписокОбъектов.Добавить(Документы.ПриостановлениеТрудовыхДоговоровКонтрактов);
	СписокОбъектов.Добавить(Документы.ВозобновлениеТрудовыхДоговоровКонтрактов);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf96-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПродлениеКонтрактаДоговора);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "96b6c3c1-89fb-428a-ad29-584898b59681", Метаданные.Документы.ПриостановлениеТрудовыхДоговоровКонтрактов);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "33194f62-c871-4f76-a964-6636d2a85fea", Метаданные.Документы.ВозобновлениеТрудовыхДоговоровКонтрактов);
	
КонецПроцедуры

#КонецОбласти

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаПриостановлениеТрудовогоДоговора.Макеты.ПФ_MXL_ПриостановлениеМобилизация,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаПриостановлениеТрудовогоДоговора.Макеты.ПФ_MXL_ПриостановлениеКонтракт,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаПриостановлениеТрудовогоДоговора.Макеты.ПФ_MXL_ПриостановлениеСодействие,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаПриостановлениеТрудовогоДоговора.Макеты.ПФ_MXL_ПриостановлениеГражданскиеСлужащиеМобилизация,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаПриостановлениеТрудовогоДоговора.Макеты.ПФ_MXL_ПриостановлениеГражданскиеСлужащиеКонтракт,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаПриостановлениеТрудовогоДоговора.Макеты.ПФ_MXL_ПриостановлениеГражданскиеСлужащиеСодействие,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьПриостановленияТрудовыхДоговоров(ТаблицаПриостановлений, ТолькоРазрешенные, ТаблицаОтбора, Отбор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОтбора.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТаблицаОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаОтбора.НачалоПериода КАК НачалоПериода,
		|	ТаблицаОтбора.ОкончаниеПериода КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТТаблицаОтбора
		|ИЗ
		|	&ТаблицаОтбора КАК ТаблицаОтбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтбора.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТаблицаОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаОтбора.НачалоПериода КАК НачалоПериода,
		|	ТаблицаОтбора.ОкончаниеПериода КАК ОкончаниеПериода,
		|	ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ДатаНачала < ТаблицаОтбора.НачалоПериода
		|			ТОГДА ТаблицаОтбора.НачалоПериода
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ДатаНачала, ДЕНЬ)
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ДатаОкончания > ТаблицаОтбора.ОкончаниеПериода
		|			ТОГДА ТаблицаОтбора.ОкончаниеПериода
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ДатаОкончания, ДЕНЬ)
		|	КОНЕЦ КАК ДатаОкончания,
		|	ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ОснованиеПриостановления КАК Основание,
		|	ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ОснованиеПриостановления.ИмяПредопределенныхДанных КАК ОснованиеИмяПредопределенныхДанных,
		|	ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ОснованиеПриостановления.ДокументОснование КАК ОснованиеДокументОснование
		|ПОМЕСТИТЬ ВТПриостановленияБезКадровыхДанных
		|ИЗ
		|	ВТТаблицаОтбора КАК ТаблицаОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный КАК ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный
		|		ПО ТаблицаОтбора.ГоловнаяОрганизация = ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.Организация.ГоловнаяОрганизация
		|			И ТаблицаОтбора.ФизическоеЛицо = ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ФизическоеЛицо
		|			И (ТаблицаОтбора.ОкончаниеПериода >= НАЧАЛОПЕРИОДА(ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ДатаНачала, ДЕНЬ))
		|			И (ТаблицаОтбора.НачалоПериода <= НАЧАЛОПЕРИОДА(ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ДатаОкончания, ДЕНЬ))
		|ГДЕ
		|	&УстановленныеОтборы
		|	И ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.Приостановлен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриостановленияБезКадровыхДанных.Сотрудник КАК Сотрудник,
		|	ПриостановленияБезКадровыхДанных.ДатаОкончания КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	ВТПриостановленияБезКадровыхДанных КАК ПриостановленияБезКадровыхДанных";
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		
		ОснованиеДокументОснование = Неопределено;
		Отбор.Свойство("ОснованиеДокументОснование", ОснованиеДокументОснование);
		Если ЗначениеЗаполнено(ОснованиеДокументОснование) Тогда
			Запрос.УстановитьПараметр("ОснованиеДокументОснование", ОснованиеДокументОснование);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УстановленныеОтборы", "ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный.ОснованиеПриостановления.ДокументОснование В (&ОснованиеДокументОснование)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УстановленныеОтборы", "(ИСТИНА)");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДаты");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, ТолькоРазрешенные, "ВидЗанятости");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриостановленияБезКадровыхДанных.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПриостановленияБезКадровыхДанных.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриостановленияБезКадровыхДанных.НачалоПериода КАК НачалоПериода,
		|	ПриостановленияБезКадровыхДанных.ОкончаниеПериода КАК ОкончаниеПериода,
		|	ПриостановленияБезКадровыхДанных.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	ПриостановленияБезКадровыхДанных.ДатаНачала КАК ДатаНачала,
		|	ПриостановленияБезКадровыхДанных.ДатаОкончания КАК ДатаОкончания,
		|	ПриостановленияБезКадровыхДанных.Основание КАК Основание,
		|	ПриостановленияБезКадровыхДанных.ОснованиеИмяПредопределенныхДанных КАК ОснованиеИмяПредопределенныхДанных,
		|	ПриостановленияБезКадровыхДанных.ОснованиеДокументОснование КАК ОснованиеДокументОснование
		|ИЗ
		|	ВТПриостановленияБезКадровыхДанных КАК ПриостановленияБезКадровыхДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ПриостановленияБезКадровыхДанных.ДатаОкончания = КадровыеДанныеСотрудников.Период
		|			И ПриостановленияБезКадровыхДанных.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПриостановлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьОтчетТ2(ОтчетОбъект) Экспорт
	
	Для Каждого НаборДанных Из ОтчетОбъект.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление",
				""""" КАК ТрудовойДоговорНомер,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоговораКонтракта,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
				|	ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка) КАК ТекущийВидДоговора,
				|	ЛОЖЬ КАК СрочныйДоговор,
				|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление");
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ТрудовойДоговорНомер,",
				"КадровыеДанныеСотрудников.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ТрудовойДоговорДата,",
				"КадровыеДанныеСотрудников.ДатаДоговораКонтракта КАК ТрудовойДоговорДата,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ТекущийВидДоговора,",
				"КадровыеДанныеСотрудников.ТекущийВидДоговора КАК ТекущийВидДоговора,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ДатаОкончания,",
				"КадровыеДанныеСотрудников.ДатаОкончания КАК ДатаОкончания,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК СрочныйДоговор,",
				"КадровыеДанныеСотрудников.СрочныйДоговор КАК СрочныйДоговор,");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураСведенийОДоговореКонтракте()
	
	СтруктураСведений = Новый Структура;
	
	ОсновныеДанныеДоговораКонтракта = ОсновныеДанныеДоговораКонтракта();
	Для каждого Поле Из ОсновныеДанныеДоговораКонтракта Цикл
		СтруктураСведений.Вставить(Поле);
	КонецЦикла;
	
	СведенияОДоговореКонтракте = СведенияОДоговореКонтракте();
	Для каждого Поле Из СведенияОДоговореКонтракте Цикл
		СтруктураСведений.Вставить(Поле);
	КонецЦикла;
	
	Возврат СтруктураСведений;
	
КонецФункции 

Функция ОсновныеДанныеДоговораКонтракта()
	
	ОсновныеДанные = Новый Массив;
	
	ОсновныеДанные.Добавить("ДатаДоговораКонтракта");
	ОсновныеДанные.Добавить("НомерДоговораКонтракта");
	ОсновныеДанные.Добавить("ДатаНачала");
	ОсновныеДанные.Добавить("ПоступлениеНаСлужбуВпервые");
	
	Возврат ОсновныеДанные;
	
КонецФункции

Функция СведенияОДоговореКонтракте()
	
	Сведения = Новый Массив;
	
	Сведения.Добавить("ПредставительНанимателя");
	Сведения.Добавить("ДолжностьПредставителяНанимателя");
	Сведения.Добавить("ОснованиеПредставителяНанимателя");
	Сведения.Добавить("ОборудованиеРабочегоМеста");
	Сведения.Добавить("ИныеУсловияДоговора");
	Сведения.Добавить("ВидАктаГосоргана");
	Сведения.Добавить("СрочныйДоговор");
	Сведения.Добавить("СезонныйДоговор");
	Сведения.Добавить("ДатаОкончания");
	Сведения.Добавить("СрокЗаключенияДоговора");
	Сведения.Добавить("ОснованиеСрочногоДоговора");
	
	Возврат Сведения; 
	
КонецФункции

Процедура СформироватьДвиженияОсновныхДанныхОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах)
	
	Если СведенияОКонтрактахДоговорах.Количество() > 0 Тогда
		Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаДанных Из СведенияОКонтрактахДоговорах Цикл
		ДобавитьДвижениеОсновныхДанныхКонтрактаДоговораСотрудника(Движения, СтрокаДанных);
	КонецЦикла;
	
	Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записать();
	Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записывать = Ложь;
	
КонецПроцедуры

Процедура ДобавитьДвижениеОсновныхДанныхКонтрактаДоговораСотрудника(Движения, ДанныеДоговора)
	
	НоваяСтрока = Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДоговора);
	
КонецПроцедуры

Процедура СформироватьДвиженияСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах)
	
	Если СведенияОКонтрактахДоговорах.Количество() > 0 Тогда
		Движения.СведенияКонтрактаДоговораСотрудника.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаСведений Из СведенияОКонтрактахДоговорах Цикл
		ДобавитьДвижениеСведенийКонтрактаДоговораСотрудника(Движения, СтрокаСведений);
	КонецЦикла;
	
	Движения.СведенияКонтрактаДоговораСотрудника.Записать();
	Движения.СведенияКонтрактаДоговораСотрудника.Записывать = Ложь;
	
КонецПроцедуры

Процедура ДобавитьДвижениеСведенийКонтрактаДоговораСотрудника(Движения, ДанныеДоговора)
	
	Если ДанныеДоговора.СрочныйДоговор Тогда
		ИсключаемыеСвойства = "";
	Иначе
		ИсключаемыеСвойства = "СрочныйДоговор,СезонныйДоговор,ДатаОкончания,СрокЗаключенияДоговора,ОснованиеСрочногоДоговора";
	КонецЕсли;
	
	НоваяСтрока = Движения.СведенияКонтрактаДоговораСотрудника.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДоговора, , ИсключаемыеСвойства);
	
КонецПроцедуры

Процедура УточнитьВидЗанятостиВПриказеОПриемеНаРаботуПоВидуДоговора(ПриказОПриемеНаРаботу) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УточнитьВидЗанятостиВПриказеОПриемеНаРаботуПоВидуДоговора(ПриказОПриемеНаРаботу);
	КонецЕсли;
КонецПроцедуры
	
Функция НеобходимыеИсточникиДанныхПоЗаказаннымПолям(НеобходимыеДанные = Неопределено)
	НеобходимыеИсточникиДанных = Новый Структура();
	НеобходимыеИсточникиДанных.Вставить("ОсновныеДанныеКонтрактаДоговораСотрудника", Ложь);
	НеобходимыеИсточникиДанных.Вставить("СведенияКонтрактаДоговораСотрудника", Ложь);
	
	Если НеобходимыеДанные = Неопределено Тогда
		
		НеобходимыеИсточникиДанных.ОсновныеДанныеКонтрактаДоговораСотрудника = Истина;
		НеобходимыеИсточникиДанных.СведенияКонтрактаДоговораСотрудника = Истина;
		
		Возврат НеобходимыеИсточникиДанных;
	ИначеЕсли НеобходимыеДанные.Количество() = 0 Тогда 
		ВызватьИсключение НСтр("ru = 'Не выбраны поля сведений о контрактах договорах.';
								|en = 'Fields of contract information are not selected.'");
	КонецЕсли;		
		
	ОсновныеДанныеДоговораКонтракта = ОсновныеДанныеДоговораКонтракта();
	СведенияОДоговореКонтракте = СведенияОДоговореКонтракте();
	Для Каждого Поле Из НеобходимыеДанные Цикл
		Если ОсновныеДанныеДоговораКонтракта.Найти(Поле) <> Неопределено Тогда
			НеобходимыеИсточникиДанных.ОсновныеДанныеКонтрактаДоговораСотрудника = Истина;
		ИначеЕсли СведенияОДоговореКонтракте.Найти(Поле) Тогда 		
			НеобходимыеИсточникиДанных.СведенияКонтрактаДоговораСотрудника = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестное поле сведений о контрактах договорах.';
									|en = 'Unknown field of contract information.'");
		КонецЕсли;
	КонецЦикла; 
	
	Возврат НеобходимыеИсточникиДанных;
КонецФункции		

Функция НовыйСведенияОКонтрактахДоговорахСотрудников(НеобходимыеДанные = Неопределено)
	СведенияОКонтрактахДоговорахСотрудников = Новый ТаблицаЗначений();	
	СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ПредставительНанимателя") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ПредставительНанимателя", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;	
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ДолжностьПредставителяНанимателя") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ДолжностьПредставителяНанимателя", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КонецЕсли;
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ОснованиеПредставителяНанимателя") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ОснованиеПредставителяНанимателя", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ВидАктаГосоргана") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ВидАктаГосоргана", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ДатаОкончания") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	КонецЕсли;	
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("СрочныйДоговор") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("СрочныйДоговор", Новый ОписаниеТипов("Булево"));
	КонецЕсли;	
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("СезонныйДоговор") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("СезонныйДоговор", Новый ОписаниеТипов("Булево"));
	КонецЕсли;	
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("СрокЗаключенияДоговора") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("СрокЗаключенияДоговора", Новый ОписаниеТипов("Строка"));
	КонецЕсли;	
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ОснованиеСрочногоДоговора") <> Неопределено Тогда
				
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ОснованиеСрочногоДоговора");
	КонецЕсли;	
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ИныеУсловияДоговора") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ИныеУсловияДоговора", Новый ОписаниеТипов("Строка"));
	КонецЕсли;		
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ДатаДоговораКонтракта") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ДатаДоговораКонтракта", Новый ОписаниеТипов("Дата"));
	КонецЕсли;		
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("НомерДоговораКонтракта") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("НомерДоговораКонтракта", Новый ОписаниеТипов("Строка"));
	КонецЕсли;	
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ДатаНачала") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	Если НеобходимыеДанные = Неопределено 
		Или НеобходимыеДанные.Найти("ОборудованиеРабочегоМеста") <> Неопределено Тогда
		
		СведенияОКонтрактахДоговорахСотрудников.Колонки.Добавить("ОборудованиеРабочегоМеста", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
		
	Возврат СведенияОКонтрактахДоговорахСотрудников;
КонецФункции		
	
#КонецОбласти 

