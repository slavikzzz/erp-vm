////////////////////////////////////////////////////////////////////////////////
// Содержит служебные процедуры и функции подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкиУчета

Функция ЕстьУчетВнеоборотныхАктивов2_4() Экспорт

	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.МестонахождениеОС КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАУУ КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСУУ КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК Таблица";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаЕстьУчетВнеоборотныхАктивов2_4(СписокЗапросовОбъединение);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();

КонецФункции

Функция ЕстьУчетВнеоборотныхАктивов() Экспорт

	СписокЗапросовОбъединение = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаЕстьУчетВнеоборотныхАктивов(СписокЗапросовОбъединение);
	
	Если СписокЗапросовОбъединение.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();

КонецФункции

Процедура ПроверитьВозможностьПринятияКУчетуОС(Объект, Отказ) Экспорт

	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьВозможностьПринятияКУчетуОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка,
		|	ОбъектыЭксплуатации.Представление,
		|	ОбъектыЭксплуатации.ДокументСнятияСУчетаУУ,
		|	ОбъектыЭксплуатации.УжеПринятоКУчету
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|		ОбъектыЭксплуатации.Представление КАК Представление,
		|
		|		ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчетаУУ,
		|
		|		&ОтражатьВУпрУчете
		|			И ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК УжеПринятоКУчету
		|
		|	ИЗ
		|		Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|						И Организация = &Организация
		|						И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|			ПО (ПервоначальныеСведенияОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|						И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|			ПО (МестонахождениеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|						И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|			ПО (ПорядокУчетаОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|				И (ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)
		|	ГДЕ
		|		ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|	
		|	) КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.УжеПринятоКУчету";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуОС2_4") Тогда
		Запрос.УстановитьПараметр("МОЛ", Объект.МОЛ);
		Запрос.УстановитьПараметр("Местонахождение", Объект.Местонахождение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОбъединениеОС") Тогда
		Запрос.УстановитьПараметр("МОЛ", Объект.МОЛ);
		Запрос.УстановитьПараметр("Местонахождение", Объект.Подразделение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Объект.Местонахождение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РазукомплектацияОС") Тогда
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Объект.Подразделение);
	Иначе
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОбъединениеОС") Тогда
		ОсновноеСредствоВШапке = Истина;
		Запрос.УстановитьПараметр("СписокОС", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ОсновноеСредство));
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
		ОсновноеСредствоВШапке = Ложь;
		Запрос.УстановитьПараметр("СписокОС", Объект.КомпонентыАмортизации.ВыгрузитьКолонку("КомпонентАмортизации"));
	Иначе
		ОсновноеСредствоВШапке = Ложь;
		Запрос.УстановитьПараметр("СписокОС", Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	КонецЕсли;
	
	МестонахождениеВТабличнойЧасти =
		ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС;
	Запрос.УстановитьПараметр("МестонахождениеВТабличнойЧасти", МестонахождениеВТабличнойЧасти);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуОС2_4") Тогда
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВБУ);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВНУ);
	Иначе
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВРеглУчете);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВРеглУчете);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЭтоВводОстатков = ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		ИмяРеквизитаДляСообщения = "НомерСтроки";
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
		ИмяРеквизитаДляСообщения = "КомпонентАмортизации";
	Иначе
		ИмяРеквизитаДляСообщения = "ОсновноеСредство";
	КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл
		
		Если ОсновноеСредствоВШапке Тогда
			Путь = "Объект";
			ДанныеСтроки = Неопределено;
		Иначе
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
				ДанныеСтроки = Объект.КомпонентыАмортизации.Найти(Выборка.Ссылка, "КомпонентАмортизации");
				Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("КомпонентыАмортизации", ДанныеСтроки.НомерСтроки, ИмяРеквизитаДляСообщения);
			Иначе
				ДанныеСтроки = Объект.ОС.Найти(Выборка.Ссылка, "ОсновноеСредство");
				Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, ИмяРеквизитаДляСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.УжеПринятоКУчету Тогда
			Если ЗначениеЗаполнено(Выборка.ДокументСнятияСУчетаУУ) Тогда
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" было снято с учета в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.';
										|en = 'The ""%1"" fixed asset was derecognized in the %2 company. Cannot recognize it in the same company twice.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
			ИначеЕсли ЭтоВводОстатков Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По основному средству ""%1"" уже введены остатки.';
												|en = 'Balance is already entered by the ""%1"" fixed asset.'"), Выборка.Представление);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" уже принято к учету.';
												|en = 'The ""%1"" fixed asset is already recognized.'"), Выборка.Представление);
			КонецЕсли; 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		КонецЕсли;
		
		ВнеоборотныеАктивыЛокализация.ПроверитьВозможностьПринятияКУчетуОС(
			Выборка, Объект, ДанныеСтроки, МестонахождениеВТабличнойЧасти, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет реквизиты ОС при принятии их к учету.
// 
// Параметры:
//  Объект - ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4, ДокументОбъект.ОбъединениеОС, ДокументОбъект.ПринятиеКУчетуОС2_4, ДокументОбъект.РазукомплектацияОС -
//  ИмяТЧ - Строка - Имя табличной части документа.
//  Отказ - Булево - 
Процедура ПроверитьРеквизитыОСПриПринятииКУчету(Объект, ИмяТЧ, Отказ) Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьРеквизитыОСПриПринятииКУчету(Запрос, Объект);
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|	ОбъектыЭксплуатации.Представление КАК Представление,
		|	ИСТИНА КАК НеЗаполненИнвентарныйНомер
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|	И ОбъектыЭксплуатации.ИнвентарныйНомер = """"
		|	И ОбъектыЭксплуатации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации)";
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СписокОС", ?(ИмяТЧ <> Неопределено, Объект[ИмяТЧ].ВыгрузитьКолонку("ОсновноеСредство"), Объект.ОсновноеСредство));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Путь = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если ИмяТЧ <> Неопределено Тогда
			ДанныеСтроки = Объект[ИмяТЧ].Найти(Выборка.Ссылка, "ОсновноеСредство"); // СтрокаТабличнойЧасти - 
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
		КонецЕсли;
		
		Если Выборка.НеЗаполненИнвентарныйНомер Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В карточке основного средства ""%1"" необходимо заполнить инвентарный номер.';
											|en = 'Fill in the inventory number in the card of the ""%1"" fixed asset.'"), Выборка.Представление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, "ИнвентарныйНомер",, Отказ);
		КонецЕсли;
		
		ВнеоборотныеАктивыЛокализация.ПроверитьРеквизитыОСПриПринятииКУчету(Выборка, Объект, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПринятияКУчетуНМА(Объект, Отказ, НМАВШапке = Ложь) Экспорт
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьВозможностьПринятияКУчетуНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыУчета.Ссылка,
		|	ОбъектыУчета.Представление,
		|	ОбъектыУчета.ВидОбъектаУчета,
		|	ОбъектыУчета.ТекущаяОрганизация,
		|	ОбъектыУчета.ТекущееПодразделение,
		|	ОбъектыУчета.ДокументСписания,
		|	ОбъектыУчета.УжеПринятоКУчету
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыУчета.Ссылка КАК Ссылка,
		|		ОбъектыУчета.Представление КАК Представление,
		|		ОбъектыУчета.ВидОбъектаУчета КАК ВидОбъектаУчета,
		|		МестоУчетаНМА.Организация КАК ТекущаяОрганизация,
		|		МестоУчетаНМА.Подразделение КАК ТекущееПодразделение,
		|		ЕСТЬNULL(ПервоначальныеСведения.ДокументСписания, НЕОПРЕДЕЛЕНО) КАК ДокументСписания,
		|
		|		&ОтражатьВУпрУчете
		|				И ЕСТЬNULL(ПервоначальныеСведения.ДокументПринятияКУчетуУУ, НЕОПРЕДЕЛЕНО) <> &Ссылка
		|				И ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК УжеПринятоКУчету
		|
		|	ИЗ
		|		Справочник.НематериальныеАктивы КАК ОбъектыУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И Организация = &Организация
		|						И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведения
		|			ПО (ПервоначальныеСведения.НематериальныйАктив = ОбъектыУчета.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И НематериальныйАктив В (&СписокНМА)) КАК МестоУчетаНМА
		|			ПО (МестоУчетаНМА.НематериальныйАктив = ОбъектыУчета.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАУУ
		|			ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
		|				И (ПорядокУчетаНМАУУ.Организация = МестоУчетаНМА.Организация)
		|	ГДЕ
		|		ОбъектыУчета.Ссылка В(&СписокНМА)) КАК ОбъектыУчета
		|ГДЕ
		|	ОбъектыУчета.УжеПринятоКУчету";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если НМАВШапке Тогда
		Запрос.УстановитьПараметр("СписокНМА", Объект.НематериальныйАктив);
	Иначе
		Запрос.УстановитьПараметр("СписокНМА", Объект.НМА.ВыгрузитьКолонку("НематериальныйАктив"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуНМА2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Местонахождение);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуНМА2_4") Тогда
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВБУ);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВНУ);
	Иначе
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВРеглУчете);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВРеглУчете);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		ИмяРеквизитаДляСообщения = "НомерСтроки";
	Иначе
		ИмяРеквизитаДляСообщения = "НематериальныйАктив";
	КонецЕсли; 
	
	ЭтоВводОстатков =  ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4");
	
	Пока Выборка.Следующий() Цикл
		
		Если НМАВШапке Тогда
			Путь = "НематериальныйАктив";
		Иначе
			ДанныеСтроки = Объект.НМА.Найти(Выборка.Ссылка, "НематериальныйАктив");
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НМА", ДанныеСтроки.НомерСтроки, ИмяРеквизитаДляСообщения);
		КонецЕсли;
			
		Если Выборка.УжеПринятоКУчету Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				Если ЗначениеЗаполнено(Выборка.ДокументСписания) Тогда
					ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" были списаны в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.';
											|en = 'The ""%1"" R&D expenses were written off in the %2 company. Cannot recognize it in the same company twice.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
				ИначеЕсли ЭтоВводОстатков Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'По расходам на НИОКР ""%1"" уже введены остатки.';
													|en = 'Balance is already entered by ""%1"" R&D expenses.'"), Выборка.Представление);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Расходы на НИОКР ""%1"" уже приняты к учету.';
													|en = 'The ""%1"" R&D expenses are already recognized.'"), Выборка.Представление);
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Выборка.ДокументСписания) Тогда
					ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" был списан в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.';
											|en = 'The ""%1"" intangible asset was written off in the %2 company. Cannot recognize it in the same company twice.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
				ИначеЕсли ЭтоВводОстатков Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'По нематериальному активу ""%1"" уже введены остатки.';
													|en = 'Balance is already entered by the ""%1"" intangible asset.'"), Выборка.Представление);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" уже принят к учету.';
													|en = 'The ""%1"" intangible asset is already recognized.'"), Выборка.Представление);
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
			
		КонецЕсли; 
		
		ВнеоборотныеАктивыЛокализация.ПроверитьВозможностьПринятияКУчетуНМА(Выборка, Объект, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что основные средства приняты к учету.
// 
// Параметры:
// 	Объект - ДокументОбъект - 
// 	Отказ - Булево -
// 
Процедура ПроверитьЧтоОСПринятыКУчету(Объект, Отказ) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	СостоянияПринят = Новый Массив;
	СостоянияПринят.Добавить(Перечисления.СостоянияОС.ПринятоКУчету);
	СостоянияПринят.Добавить(Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету);
	
	ТипДокумента = ТипЗнч(Объект);
	
	Если ТипДокумента = Тип("ДокументОбъект.ПеремещениеОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ПодготовкаКПередачеОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ИзменениеУсловийДоговораАренды")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ВозвратОСИзАренды2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ПередачаОСВАренду2_4") Тогда
			
		ЕстьВыборУчета = Ложь;
		
	Иначе
		
		ЕстьВыборУчета = НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо(
			Объект.Организация, КонецМесяца(?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса())));
			
	КонецЕсли; 
	
	ЕстьВыборНУ = Ложь;
	//++ Локализация
	ЕстьВыборНУ = 
		ТипДокумента = Тип("ДокументОбъект.ИзменениеПараметровОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ПодготовкаКПередачеОС2_4");
	//-- Локализация
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьЧтоОСПринятыКУчету(Объект);
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|	ОбъектыЭксплуатации.Представление КАК Представление,
		|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
		|	&ОтражатьВБУ КАК ОтражатьВБУ,
		|	&ОтражатьВНУ КАК ОтражатьВНУ,
		|	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеБУ,
		|	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеНУ,
		|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
		|	МестонахождениеОС.Организация КАК МестонахождениеОрганизация,	
		|	МестонахождениеОС.Организация.Представление КАК МестонахождениеОрганизацияПредставление,	
		|	МестонахождениеОС.Местонахождение КАК МестонахождениеПодразделение,
		|	МестонахождениеОС.Местонахождение.Представление КАК МестонахождениеПодразделениеПредставление,
		|	МестонахождениеОС.МОЛ КАК МестонахождениеМОЛ,
		|	МестонахождениеОС.МОЛ.Представление КАК МестонахождениеМОЛПредставление 
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(
		|				&Период,
		|				Регистратор <> &Ссылка
		|					И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ПО (МестонахождениеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|				&Период,
		|				Регистратор <> &Ссылка
		|					И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСБУ
		|		ПО (ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация)
		|			И (ПорядокУчетаОСБУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				&Период,
		|				Регистратор <> &Ссылка
		|					И ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|		ПО (ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)
		|			И (ПорядокУчетаОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|
		|	И (&ОтражатьВУпрУчете И &ЕстьВыборУчета
		|				И НЕ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В (&СостоянияПринят)
		|
		|			ИЛИ &ОтражатьВБУ И &ЕстьВыборУчета
		|				И НЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В (&СостоянияПринят)
		|
		|			ИЛИ НЕ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В (&СостоянияПринят)
		|				И НЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В (&СостоянияПринят)
		|
		|			ИЛИ МестонахождениеОС.Организация <> &Организация	
		|			ИЛИ МестонахождениеОС.Местонахождение <> &Подразделение
		|					И &Подразделение <> НЕОПРЕДЕЛЕНО
		|			ИЛИ МестонахождениеОС.МОЛ <> &МОЛ 
		|					И &МОЛ <> НЕОПРЕДЕЛЕНО
		|		)";
		
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("СостоянияПринят", СостоянияПринят);
	Запрос.УстановитьПараметр("ЕстьВыборУчета", ЕстьВыборУчета);
	
	Если ТипДокумента = Тип("ДокументОбъект.ИзменениеУсловийДоговораАренды")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ВыкупАрендованныхОС") Тогда
			
		Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Истина);
		Запрос.УстановитьПараметр("ОтражатьВБУ", Истина);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Истина);
		
	ИначеЕсли ЕстьВыборНУ Тогда
			
		Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВБУ);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВНУ);
		
	Иначе
				
		Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВРеглУчете);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВРеглУчете);
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС 
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе Тогда
			ИмяРеквизитаПодразделение = Неопределено;
		Иначе
			ИмяРеквизитаПодразделение = "Местонахождение";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ИзменениеПараметровОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ИзменениеУсловийДоговораАренды")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ВыкупАрендованныхОС") Тогда
		ИмяРеквизитаПодразделение = Неопределено;
	Иначе
		ИмяРеквизитаПодразделение = "Подразделение";
	КонецЕсли;
	
	Если ИмяРеквизитаПодразделение <> Неопределено Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект[ИмяРеквизитаПодразделение]);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Неопределено);
	КонецЕсли;

	ЕстьРеквизитМОЛ = (ТипДокумента = Тип("ДокументОбъект.ПеремещениеОС2_4"));
	Если ЕстьРеквизитМОЛ Тогда
		Запрос.УстановитьПараметр("МОЛ", Объект.МОЛ);
	Иначе
		Запрос.УстановитьПараметр("МОЛ", Неопределено);
	КонецЕсли;

	ОсновноеСредствоВШапке = (ТипДокумента = Тип("ДокументОбъект.РазукомплектацияОС"));
	
	Если ТипДокумента = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСЗаБалансом
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом) Тогда
		ИмяТЧ = "АрендованныеОС";
	Иначе
		ИмяТЧ = "ОС";
	КонецЕсли;
	
	ОсновноеСредствоВШапке = (ТипДокумента = Тип("ДокументОбъект.РазукомплектацияОС"));
	
	Если ОсновноеСредствоВШапке Тогда
		Запрос.УстановитьПараметр("СписокОС", Объект.ОсновноеСредство);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ИзменениеУсловийДоговораАренды") Тогда
		Запрос.УстановитьПараметр("СписокОС", Документы.ИзменениеУсловийДоговораАренды.СписокПроверяемыхОС(Объект));
	Иначе
		Запрос.УстановитьПараметр("СписокОС", Объект[ИмяТЧ].ВыгрузитьКолонку("ОсновноеСредство"));
	КонецЕсли;
	
	ЭтоПеремещениеУзлов = ТипДокумента = Тип("ДокументОбъект.ПеремещениеОС2_4")
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеУзлов;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ОсновноеСредствоВШапке Тогда
			ТабличнаяЧасть = Объект[ИмяТЧ]; // ТабличнаяЧасть - 
			ИмяПоляОС = "ОсновноеСредство";
			ДанныеСтроки = ТабличнаяЧасть.Найти(Выборка.Ссылка, ИмяПоляОС);
			Если ДанныеСтроки = Неопределено И ЭтоПеремещениеУзлов Тогда
				ИмяПоляОС = "ОсновноеСредствоВладелец";
				ДанныеСтроки = ТабличнаяЧасть.Найти(Выборка.Ссылка, ИмяПоляОС);
			КонецЕсли;
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, ИмяПоляОС);
		КонецЕсли; 
		
		ЕстьОшибкиМестонахождения = Ложь;
		
		Если СостоянияПринят.Найти(Выборка.СостояниеБУ) <> Неопределено
			ИЛИ СостоянияПринят.Найти(Выборка.СостояниеУУ) <> Неопределено Тогда
			
			Если Выборка.МестонахождениеОрганизация <> Объект.Организация Тогда
	
				ЕстьОшибкиМестонахождения = Истина;
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" числится в другой организации ""%2"".';
										|en = 'Fixed asset ""%1"" is in another company ""%2"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.МестонахождениеОрганизацияПредставление);
				СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
					
			КонецЕсли;
			
			Если ИмяРеквизитаПодразделение <> Неопределено
				И Выборка.МестонахождениеПодразделение <> Объект[ИмяРеквизитаПодразделение] Тогда
	
				ЕстьОшибкиМестонахождения = Истина;
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" числится в другом подразделении ""%2"".';
										|en = 'Fixed asset ""%1"" is in another business unit ""%2"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.МестонахождениеПодразделениеПредставление);
				СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
					
			КонецЕсли;

			Если ЕстьРеквизитМОЛ 
				И Выборка.МестонахождениеМОЛ <> Объект.МОЛ Тогда
	
				ЕстьОшибкиМестонахождения = Истина;
				
				Если ЗначениеЗаполнено(Выборка.МестонахождениеМОЛ) Тогда
					ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" числится за другим МОЛ ""%2"".';
											|en = 'Fixed asset ""%1"" is registered with the other financially liable person ""%2"".'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.МестонахождениеМОЛПредставление);
				Иначе
					ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не числится за МОЛ.';
											|en = 'Fixed asset ""%1"" is not registered with the financially liable person.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление);
				КонецЕсли;

				СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
					
			КонецЕсли;

		КонецЕсли;
				
		Если НЕ ЕстьОшибкиМестонахождения
			И НЕ ТипДокумента = Тип("ДокументОбъект.ВыкупАрендованныхОС") Тогда
				
			// Если местонахождение указано неверно, то нет смысла сообщать о состоянии.
			Если ЕстьВыборУчета Тогда
				
				Если Выборка.ОтражатьВУпрУчете
					И СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено Тогда

					ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2 в управленческом учете.';
											|en = 'The ""%1"" fixed asset is not recognized in management accounting as of %2.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
					СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
					
				КонецЕсли;
				
				Если ЕстьВыборНУ Тогда
					
					Если Выборка.ОтражатьВБУ
						И СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено Тогда
	
						ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2 в бухгалтерском учете.';
												|en = 'The ""%1"" fixed asset is not recognized in local accounting as of %2.'");						
						ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
						СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
						
					КонецЕсли;
				
					Если Выборка.ОтражатьВНУ
						И СостоянияПринят.Найти(Выборка.СостояниеНУ) = Неопределено Тогда
	
						ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2 в налоговом учете.';
												|en = 'The ""%1"" fixed asset is not recognized in tax accounting as of %2.'");						
						ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
						СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
						
					КонецЕсли;
				
				Иначе
					
					Если Выборка.ОтражатьВБУ
						И СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено
						И СостоянияПринят.Найти(Выборка.СостояниеНУ) = Неопределено Тогда
	
						ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2 в регламентированном учете.';
												|en = 'The ""%1"" fixed asset is not recognized in local accounting as of %2.'");						
						ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
						СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено
				И СостоянияПринят.Найти(Выборка.СостояниеНУ) = Неопределено
				И СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено Тогда
				
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2.';
										|en = 'The ""%1"" fixed asset is not recognized as of %2.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
				СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
				
			КонецЕсли; 
		
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что ОС получены в аренду.
// 
// Параметры:
// 	Объект - ДокументОбъект.КорректировкаСтоимостиИАмортизацииОС - 
// 	Отказ - Булево -
Процедура ПроверитьЧтоОСПолученыВАрендуЗаБалансом(Объект, Отказ) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
	|	ОбъектыЭксплуатации.Представление КАК Представление
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(&Период, Регистратор <> &Ссылка И ОсновноеСредство В (&СписокОС)) КАК АрендованныеОС
	|		ПО АрендованныеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка
	|			И АрендованныеОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|ГДЕ
	|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)
	|	И АрендованныеОС.ОсновноеСредство ЕСТЬ NULL";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("СписокОС", Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не поступало в аренду (забалансовый учет) на %2.';
								|en = 'Fixed asset ""%1"" was not leased (off-balance accounting) at %2.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		ДанныеСтроки = Объект.ОС.Найти(Выборка.Ссылка, "ОсновноеСредство");
		Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что ОС не получены в аренду (забалансовый учет).
// 
// Параметры:
// 	Объект - ДокументОбъект.ПоступлениеАрендованныхОС - 
// 	Отказ - Булево -
Процедура ПроверитьЧтоОСНеПолученыВАрендуЗаБалансом(Объект, Отказ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(АрендованныеОС.Регистратор) КАК ПредставлениеДокумента,
	|	АрендованныеОС.ОсновноеСредство КАК СсылкаНаОС,
	|	АрендованныеОС.ОсновноеСредство.Представление КАК ПредставлениеОС
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И ОсновноеСредство В (&СписокОС)) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("СписокОС", Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" уже поступало в аренду (забалансовый учет). См. %2';
								|en = 'Основное средство ""%1"" уже поступало в аренду (забалансовый учет). См. %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ПредставлениеОС, Выборка.ПредставлениеДокумента);
			
		ДанныеСтроки = Объект.ОС.Найти(Выборка.СсылкаНаОС, "ОсновноеСредство");
		Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что ОС не получены в аренду на баланс.
// 
// Параметры:
// 	Объект - ДокументОбъект.СписаниеОС2_4, ДокументОбъект.ОбъединениеОС, ДокументОбъект.РазукомплектацияОС - 
// 	Отказ - Булево -
Процедура ПроверитьЧтоОСНеПолученыВАрендуНаБаланс(Объект, Отказ) Экспорт
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК Ссылка,
	|	АрендованныеОС.ОсновноеСредство.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(&Период, Регистратор <> &Ссылка И ОсновноеСредство В (&СписокОС)) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ЗаключенДоговорАренды),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде))";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	ДанныеВШапке = (ТипЗнч(Объект) = Тип("ДокументОбъект.РазукомплектацияОС"));
	
	Если ДанныеВШапке Тогда
		
		СписокОС = Новый Массив;
		СписокОС.Добавить(Объект.ОсновноеСредство);
	
	Иначе
		
		СписокОС = Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОбъединениеОС")
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрисоединениеОС
			И ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
			СписокОС.Добавить(Объект.ОсновноеСредство);
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Оформление документа не поддерживается для основного средства ""%1"", поступившего в аренду.';
								|en = 'Document registration is not supported for leased fixed asset ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление);
		
		Если ДанныеВШапке Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ОсновноеСредство",, Отказ);
		Иначе
			ДанныеСтроки = Объект.ОС.Найти(Выборка.Ссылка, "ОсновноеСредство");
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что ОС не переданы в фин. аренду.
// 
// Параметры:
// 	Объект - ДокументОбъект.СписаниеОС2_4, ДокументОбъект.ПодготовкаКПередачеОС2_4, ДокументОбъект.РазукомплектацияОС, ДокументОбъект.ОбъединениеОС, ДокументОбъект.МодернизацияОС2_4 - 
// 	Отказ - Булево -
Процедура ПроверитьЧтоОСНеПереданыВФинАренду(Объект, Отказ) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПереданныеВАрендуОС.ОсновноеСредство КАК Ссылка,
	|	ПереданныеВАрендуОС.ОсновноеСредство.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(
	|		&Период, 
	|		Регистратор <> &Ссылка 
	|			И ОсновноеСредство В (&СписокОС)) КАК ПереданныеВАрендуОС
	|
	|ГДЕ
	|	ПереданныеВАрендуОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПереданоВАренду)
	|	И ВЫРАЗИТЬ(ПереданныеВАрендуОС.Договор КАК Справочник.ДоговорыКонтрагентов).ТипДоговора В (&ТипыДоговоровПоФСБУ25)
	|";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("ТипыДоговоровПоФСБУ25", УчетАрендованныхОСКлиентСервер.ТипыДоговоровДоходнойАренды());
	
	ДанныеВШапке = (ТипЗнч(Объект) = Тип("ДокументОбъект.РазукомплектацияОС"));
	
	Если ДанныеВШапке Тогда
		
		СписокОС = Новый Массив;
		СписокОС.Добавить(Объект.ОсновноеСредство);
	
	Иначе
		
		СписокОС = Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОбъединениеОС")
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрисоединениеОС
			И ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
			СписокОС.Добавить(Объект.ОсновноеСредство);
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Оформление документа не поддерживается для основного средства ""%1"" переданного в аренду.
							  |Перед оформлением документа, основное средство необходимо вернуть из аренды.';
							  |en = 'Cannot register the document for the %1 fixed asset provided to the lessee.
							  |Before you register the document, return the fixed asset from the lessee.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление);
		
		Если ДанныеВШапке Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ОсновноеСредство",, Отказ);
			
		Иначе
			
			ДанныеСтроки = Объект.ОС.Найти(Выборка.Ссылка, "ОсновноеСредство");
			Если ДанныеСтроки <> Неопределено Тогда
				
				Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
			
			ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОбъединениеОС")
				И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрисоединениеОС
				И Объект.ОсновноеСредство = Выборка.Ссылка Тогда
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ОсновноеСредство",, Отказ);
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что на основании договора аренды можно заполнить документ.
// 
// Параметры:
// 	Договор - СправочникСсылка.ДоговорыАренды -
// 	
// Возвращаемое значение:
// 		Структура - содержит реквизиты договора:
//			* Организация - СправочникСсылка.Организации -
//			* Партнер - СправочникСсылка.Партнеры - 
//			* Контрагент - СправочникСсылка.Контрагенты -
//			* ВалютаВзаиморасчетов - СправочникСсылка.Валюты -
//			* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
//			* ЕстьВыкупПредметовАренды - Булево -
//		Неопределено - 		
Функция ПроверитьРеквизитыДоговораАренды(Договор) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыАренды.Организация,
	|	ДоговорыАренды.Партнер,
	|	ДоговорыАренды.Контрагент,
	|	ДоговорыАренды.ВалютаВзаиморасчетов,
	|	ДоговорыАренды.ЕстьВыкупПредметовАренды,
	|	ДоговорыАренды.ПометкаУдаления,
	|	ДоговорыАренды.НалогообложениеНДС,
	|	ЕСТЬNULL(УсловияДоговоровАренды.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды.СрезПоследних(&Дата, Договор = &Договор) КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.Договор = &Договор
	|ГДЕ
	|	ДоговорыАренды.Ссылка = &Договор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru = 'Договор помечен на удаление, создание документа недоступно';
							|en = 'The contract is marked for deletion, document creation is not available'");
		ВызватьИсключение ТекстОшибки
	ИначеЕсли Выборка.Состояние <> Перечисления.СостоянияДоговоровКонтрагентов.Действует Тогда
		ТекстОшибки = НСтр("ru = 'Не оформлено заключение договора или договор не действует, создание документа недоступно';
							|en = 'The contract signing is not registered or the contract is not valid, creation of document is not available'");
		ВызватьИсключение ТекстОшибки
	КонецЕсли;
	
	РеквизитыДоговора = Новый Структура;
	РеквизитыДоговора.Вставить("Организация", Выборка.Организация);
	РеквизитыДоговора.Вставить("Партнер", Выборка.Партнер);
	РеквизитыДоговора.Вставить("Контрагент", Выборка.Контрагент);
	РеквизитыДоговора.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	РеквизитыДоговора.Вставить("ЕстьВыкупПредметовАренды", Выборка.ЕстьВыкупПредметовАренды);
	РеквизитыДоговора.Вставить("НалогообложениеНДС", Выборка.НалогообложениеНДС);
	
	Возврат РеквизитыДоговора;
	
КонецФункции

Процедура ПроверитьЧтоНМАПринятыКУчету(Объект, Отказ) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Объект);
	
	РеквизитыДокумента = Новый Структура("Организация,Подразделение");
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Объект);
	
	ЕстьВыборНУ = Ложь;
	
	//++ Локализация
	ЕстьВыборНУ = 
		ТипДокумента = Тип("ДокументОбъект.ИзменениеПараметровНМА2_4");
	//-- Локализация
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьЧтоНМАПринятыКУчету();
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НематериальныеАктивы.Ссылка КАК Ссылка,
		|	НематериальныеАктивы.Представление КАК Представление,
		|	НематериальныеАктивы.ВидОбъектаУчета КАК ВидОбъектаУчета,
		|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
		|	&ОтражатьВБУ КАК ОтражатьВБУ,
		|	&ОтражатьВНУ КАК ОтражатьВНУ,
		|	ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеБУ,
		|	ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеНУ,
		|	ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеУУ,
		|	МестоУчетаНМА.Организация КАК Организация,
		|	МестоУчетаНМА.Организация.Представление КАК ОрганизацияПредставление,
		|	МестоУчетаНМА.Подразделение КАК Подразделение,
		|	МестоУчетаНМА.Подразделение.Представление КАК ПодразделениеПредставление
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И Регистратор <> &Ссылка
		|					И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАУУ
		|		ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И Регистратор <> &Ссылка
		|					И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАБУ
		|		ПО (ПорядокУчетаНМАБУ.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
		|				&Период,
		|				Регистратор <> &Ссылка
		|					И НематериальныйАктив В (&СписокНМА)) КАК МестоУчетаНМА
		|		ПО (МестоУчетаНМА.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|ГДЕ
		|	НематериальныеАктивы.Ссылка В(&СписокНМА)
		|
		|	И (&ОтражатьВУпрУчете
		|			И НЕ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В (&СостоянияПринят)
		|
		|		ИЛИ &ОтражатьВБУ
		|			И НЕ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В (&СостоянияПринят)
		|
		|		ИЛИ НЕ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В (&СостоянияПринят)
		|			И НЕ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В (&СостоянияПринят)
		|
		// Проверка места учета НМА
		|		ИЛИ (
		|				(НЕ &ОтражатьВУпрУчете ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, НЕОПРЕДЕЛЕНО) В (&СостоянияПринят))
		|				И (ЕСТЬNULL(МестоУчетаНМА.Организация, НЕОПРЕДЕЛЕНО) <> &Организация
		|						И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(МестоУчетаНМА.Подразделение, НЕОПРЕДЕЛЕНО) <> &Подразделение
		|						И &Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			)
		|		)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНМА", Объект.НМА.ВыгрузитьКолонку("НематериальныйАктив"));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ЕстьВыборНУ Тогда
			
		Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВБУ);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВНУ);
		
	Иначе
				
		Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВРеглУчете);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВРеглУчете);
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументОбъект.ИзменениеПараметровНМА2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Местонахождение);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	СостоянияПринят = Новый Массив;
	СостоянияПринят.Добавить(Перечисления.СостоянияНМА.ПринятКУчету);
	Запрос.УстановитьПараметр("СостоянияПринят", СостоянияПринят);
	
	Если ТипДокумента = Тип("ДокументОбъект.ПеремещениеНМА2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ПодготовкаКПередачеНМА2_4") Тогда
		ЕстьВыборУчета = Ложь;
	Иначе
		ЕстьВыборУчета = НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо(
			Объект.Организация, КонецМесяца(?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса())));
	КонецЕсли; 
	Запрос.УстановитьПараметр("ЕстьВыборУчета", ЕстьВыборУчета);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеСтроки = Объект.НМА.Найти(Выборка.Ссылка, "НематериальныйАктив");
		
		Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НМА", ДанныеСтроки.НомерСтроки, "НематериальныйАктив");
		
		Если ЕстьВыборУчета Тогда
			
			Если Выборка.ОтражатьВУпрУчете
				И СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено Тогда

				Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
					ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" не приняты к учету на %2 в управленческом учете.';
											|en = '%1 R&D expenses are not recognized in management accounting as of %2.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету на %2 в управленческом учете.';
											|en = 'The ""%1"" intangible asset is not recognized in management accounting as of %2.'");
				КонецЕсли; 
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
				
			КонецЕсли;
			
			Если ЕстьВыборНУ Тогда
				
				Если Выборка.ОтражатьВБУ
					И СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено Тогда

					Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
						ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" не приняты к учету на %2 в бухгалтерском учете.';
												|en = 'The ""%1"" R&D expenses are not recognized in local accounting as of %2.'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету на %2 в бухгалтерском учете.';
												|en = 'The ""%1"" intangible asset is not recognized in local accounting as of %2.'");
					КонецЕсли; 
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
					
				КонецЕсли;
			
				Если Выборка.ОтражатьВНУ
					И СостоянияПринят.Найти(Выборка.СостояниеНУ) = Неопределено Тогда

					Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
						ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" не приняты к учету на %2 в налоговом учете.';
												|en = 'The ""%1"" R&D expenses are not recognized in tax accounting as of %2.'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету на %2 в налоговом учете.';
												|en = 'The ""%1"" intangible asset is not recognized in tax accounting as of %2.'");
					КонецЕсли; 
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
					
				КонецЕсли;
			
			Иначе
				
				Если Выборка.ОтражатьВБУ
					И СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено
					И СостоянияПринят.Найти(Выборка.СостояниеНУ) = Неопределено Тогда

					Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
						ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" не приняты к учету на %2 в регламентированном учете.';
												|en = '%1 R&D expenses are not recognized in local accounting as of %2.'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету на %2 в регламентированном учете.';
												|en = 'The ""%1"" intangible asset is not recognized in local accounting as of %2.'");
					КонецЕсли; 
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено
			И СостоянияПринят.Найти(Выборка.СостояниеНУ) = Неопределено
			И СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено Тогда
				
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" не приняты к учету на %2.';
										|en = '%1 R&D expenses are not recognized as of %2.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету на %2.';
										|en = 'The ""%1"" intangible asset is recognized as of %2.'");
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
			
		КонецЕсли;
			
		Если СостоянияПринят.Найти(Выборка.СостояниеБУ) <> Неопределено
			ИЛИ СостоянияПринят.Найти(Выборка.СостояниеНУ) <> Неопределено
			ИЛИ СостоянияПринят.Найти(Выборка.СостояниеУУ) <> Неопределено Тогда
			
			Если Выборка.Организация <> Объект.Организация
				И ЗначениеЗаполнено(Объект.Организация) Тогда
				
				Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
					ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" приняты к учету в другой организации %2.';
											|en = '%1 R&D expenses are recognized in another company %2.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" принят к учету в другой организации %2.';
											|en = '%1 intangible asset is recognized in another company %2.'");
				КонецЕсли; 
				
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.ОрганизацияПредставление);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
				
			КонецЕсли; 
			
			Если Выборка.Подразделение <> РеквизитыДокумента.Подразделение
				И ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
				
				Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
					ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" приняты к учету в другое подразделение %2.';
											|en = '%1 R&D expenses are recognized in another business unit %2.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" принят к учету в другое подразделение %2.';
											|en = '%1 intangible asset is recognized in another business unit %2.'");
				КонецЕсли; 
				
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.ПодразделениеПредставление);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
				
			КонецЕсли; 
			
		КонецЕсли;	

	КонецЦикла;
	
КонецПроцедуры

// Проверить, что ОС принято к учету и сообщить, если не принято.
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации - Основное средство
//  Дата - Дата - Дата
// 
// Возвращаемое значение:
//  см. Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения
Функция СообщитьЕслиОСНеПринятоКУчету(ОсновноеСредство, Дата) Экспорт

	ПервоначальныеСведения = Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения(ОсновноеСредство, Дата);
	Если ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.НеПринятоКУчету
		И ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.НеПринятоКУчету Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" не принято к учету.';
										|en = 'The ""%1"" fixed asset is not recognized.'"), Строка(ОсновноеСредство));
		ВызватьИсключение ТекстСообщения;
		
	ИначеЕсли ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" снято с учета.';
										|en = 'The ""%1"" fixed asset is derecognized.'"), Строка(ОсновноеСредство));
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли; 

	Возврат ПервоначальныеСведения;
	
КонецФункции

Функция СообщитьЕслиНМАНеПринятКУчету(НематериальныйАктив, Дата) Экспорт

	ПервоначальныеСведения = Справочники.НематериальныеАктивы.ПервоначальныеСведения(НематериальныйАктив, Дата);
	Если ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияНМА.НеПринятКУчету
		И ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияНМА.НеПринятКУчету Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету.';
										|en = 'The ""%1"" intangible asset is not recognized.'"), Строка(НематериальныйАктив));
		ВызватьИсключение ТекстСообщения;
		
	ИначеЕсли ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияНМА.Списан
		ИЛИ ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияНМА.Списан Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" снят с учета.';
										|en = 'The ""%1"" intangible asset is derecognized.'"), Строка(НематериальныйАктив));
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли; 

	Возврат ПервоначальныеСведения;
	
КонецФункции
 
#КонецОбласти

#Область РасчетАмортизации

Процедура ДополнитьПараметрамиУчетаВнеоборотныхАктивов(Знач ПараметрыРасчета) Экспорт

	ВнеоборотныеАктивыЛокализация.ДополнитьПараметрамиУчетаВнеоборотныхАктивов(ПараметрыРасчета);
	
КонецПроцедуры

Функция ТекстПоляФактическийСрокИспользования(ПолеНачалаПериода) Экспорт

	ТекстПоля = 
	"((ГОД(&НачалоМесяца) - ГОД(НАЧАЛОПЕРИОДА(&ПолеНачалаПериода, МЕСЯЦ))) * 12 
		|				+ МЕСЯЦ(&НачалоМесяца) 
		|				- МЕСЯЦ(НАЧАЛОПЕРИОДА(&ПолеНачалаПериода, МЕСЯЦ)))";
	
	Возврат СтрЗаменить(ТекстПоля, "&ПолеНачалаПериода", ПолеНачалаПериода);
	
КонецФункции
 
Процедура УничтожитьВременныеТаблицыПослеЗаписиРасчетаАмортизации(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ПараметрыРасчета.ИспользуемыеТаблицы);
	
КонецПроцедуры

// Формирует текст запроса, получающий данные из регистра
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра
//  ИмяТаблицы - Строка - Имя таблицы
//  ОбъектУчета - Строка - Объект учета
//  СписокЗапросов - Массив из Строка -
//  ВычислениеПолей - Структура, Неопределено - Вычисление полей
Процедура ТекстЗапросаПараметрыРасчетаАмортизации(ИмяРегистра, ИмяТаблицы, ОбъектУчета, СписокЗапросов, ВычислениеПолей = Неопределено) Экспорт

	Если ВычислениеПолей = Неопределено Тогда
		ВычислениеПолей = Новый Структура;
	КонецЕсли;
	
	РегистрПоддерживаетИсправление = РегистрПоддерживаетИсправление(ИмяРегистра);
	
	СписокЗапросовЛокальный = Новый Массив;
	
	Если РегистрПоддерживаетИсправление Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаРегистра.Период) КАК Период,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ)) КАК ПериодНачалоДня,
		|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
		|	ТаблицаРегистра.ПолеОбъектУчета КАК ОбъектУчета
		|
		|ПОМЕСТИТЬ ДанныеРегистра_СрезПериод
		|
		|ИЗ
		|	ТаблицаРегистраИсточник КАК ТаблицаРегистра
		|
		|ГДЕ
		|	ТаблицаРегистра.Период < &НачалоМесяца
		|	И ТаблицаРегистра.ДатаИсправления <= &КонецМесяца
		|	И ТаблицаРегистра.Активность
		|	И (ТаблицаРегистра.ПолеОбъектУчета) В
		|			(ВЫБРАТЬ
		|				СписокОбъектовУчета.ПолеОбъектУчета
		|			ИЗ
		|				СписокОбъектовУчета КАК СписокОбъектовУчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРегистра.ПолеОрганизация,
		|	ТаблицаРегистра.ПолеОбъектУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодНачалоДня,
		|	ОбъектУчета,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистра.ДатаИсправления, ДЕНЬ), ДАТАВРЕМЯ(1,1,1))) КАК ДатаИсправления,
		|
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистра.ДатаИсправления, ДЕНЬ), ДАТАВРЕМЯ(1,1,1))) <> ДАТАВРЕМЯ(1,1,1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеРегистра_СрезПериод.Период, ДЕНЬ)
		|		ИНАЧЕ ДанныеРегистра_СрезПериод.Период 
		|	КОНЕЦ КАК Период,
		|
		|	ДанныеРегистра_СрезПериод.Организация КАК Организация,
		|	ДанныеРегистра_СрезПериод.ОбъектУчета КАК ОбъектУчета
		|
		|ПОМЕСТИТЬ ДанныеРегистра_СрезПериодИсправления
		|
		|ИЗ
		|	ДанныеРегистра_СрезПериод КАК ДанныеРегистра_СрезПериод
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистраИсточник КАК ТаблицаРегистра
		|		ПО ТаблицаРегистра.Период = ДанныеРегистра_СрезПериод.ПериодНачалоДня
		|			И ТаблицаРегистра.ПолеОрганизация = ДанныеРегистра_СрезПериод.Организация
		|			И ТаблицаРегистра.ПолеОбъектУчета = ДанныеРегистра_СрезПериод.ОбъектУчета
		|			И ТаблицаРегистра.ДатаИсправления <= &КонецМесяца
		|			И ТаблицаРегистра.ДатаИсправления <> ДАТАВРЕМЯ(1,1,1)
		|			И ТаблицаРегистра.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра_СрезПериод.Период,
		|	ДанныеРегистра_СрезПериод.Организация,
		|	ДанныеРегистра_СрезПериод.ОбъектУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ОбъектУчета,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаРегистра.Регистратор) КАК Регистратор,
		|	ДанныеРегистра_СрезПериодИсправления.Период КАК Период,
		|	ДанныеРегистра_СрезПериодИсправления.Организация КАК Организация,
		|	ДанныеРегистра_СрезПериодИсправления.ОбъектУчета КАК ОбъектУчета
		|
		|ПОМЕСТИТЬ ДанныеРегистра_СрезРегистратор
		|
		|ИЗ
		|	ДанныеРегистра_СрезПериодИсправления КАК ДанныеРегистра_СрезПериодИсправления
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистраИсточник КАК ТаблицаРегистра
		|		ПО ТаблицаРегистра.ПолеОрганизация = ДанныеРегистра_СрезПериодИсправления.Организация
		|			И ТаблицаРегистра.ПолеОбъектУчета = ДанныеРегистра_СрезПериодИсправления.ОбъектУчета
		|			И ТаблицаРегистра.Период = ДанныеРегистра_СрезПериодИсправления.Период
		|			И ТаблицаРегистра.ДатаИсправления = ДанныеРегистра_СрезПериодИсправления.ДатаИсправления
		|			И ТаблицаРегистра.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра_СрезПериодИсправления.Период,
		|	ДанныеРегистра_СрезПериодИсправления.Организация,
		|	ДанныеРегистра_СрезПериодИсправления.ОбъектУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&НачалоМесяца КАК НачалоМесяца,
		|	&КонецПредыдущегоМесяца КАК ПериодПараметров,
		|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
		|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
		|
		|	&ТекстПолей
		|
		|ПОМЕСТИТЬ ТаблицаРегистра_СрезПоследних
		|
		|ИЗ
		|	ДанныеРегистра_СрезРегистратор КАК ДанныеРегистра_СрезРегистратор
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистраИсточник КАК ТаблицаРегистра
		|		ПО ТаблицаРегистра.Регистратор = ДанныеРегистра_СрезРегистратор.Регистратор
		|			И ТаблицаРегистра.Период = ДанныеРегистра_СрезРегистратор.Период
		|			И ТаблицаРегистра.ПолеОрганизация = ДанныеРегистра_СрезРегистратор.Организация
		|			И ТаблицаРегистра.ПолеОбъектУчета = ДанныеРегистра_СрезРегистратор.ОбъектУчета
		|			И ТаблицаРегистра.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&НачалоПредыдущегоМесяца КАК НачалоМесяца,
		|	&КонецПозапрошлогоМесяца КАК ПериодПараметров,
		|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
		|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
		|
		|	&ТекстПолей
		|
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|		&КонецПозапрошлогоМесяца,
		|		(ПолеОбъектУчета) В
		|			(ВЫБРАТЬ
		|				СписокОбъектовУчета.ПолеОбъектУчета
		|			ИЗ
		|				СписокОбъектовУчета_Доначисление_Все КАК СписокОбъектовУчета)) КАК ТаблицаРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеРегистра_СрезПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеРегистра_СрезПериодИсправления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеРегистра_СрезРегистратор
		|";
		
		СписокЗапросовЛокальный.Добавить(ТекстЗапроса);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&НачалоМесяца КАК НачалоМесяца,
		|	&КонецПредыдущегоМесяца КАК ПериодПараметров,
		|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
		|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
		|
		|	&ТекстПолей
		|
		|ПОМЕСТИТЬ ТаблицаРегистра_СрезПоследних
		|
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|		&КонецПредыдущегоМесяца,
		|		(ПолеОбъектУчета) В
		|			(ВЫБРАТЬ
		|				СписокОбъектовУчета.ПолеОбъектУчета
		|			ИЗ
		|				СписокОбъектовУчета КАК СписокОбъектовУчета)) КАК ТаблицаРегистра
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&НачалоПредыдущегоМесяца КАК НачалоМесяца,
		|	&КонецПозапрошлогоМесяца КАК ПериодПараметров,
		|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
		|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
		|
		|	&ТекстПолей
		|
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|		&КонецПозапрошлогоМесяца,
		|		(ПолеОбъектУчета) В
		|			(ВЫБРАТЬ
		|				СписокОбъектовУчета.ПолеОбъектУчета
		|			ИЗ
		|				СписокОбъектовУчета_Доначисление_Все КАК СписокОбъектовУчета)) КАК ТаблицаРегистра
		|";
		
		СписокЗапросовЛокальный.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРегистра.НачалоМесяца КАК НачалоМесяца,
	|	ТаблицаРегистра.ПериодПараметров КАК ПериодПараметров,
	|	ТаблицаРегистра.Организация КАК Организация,
	|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
	|
	|	&ТекстПолей
	|
	|ПОМЕСТИТЬ ВТ_ИмяРегистра
	|
	|ИЗ
	|	ТаблицаРегистра_СрезПоследних КАК ТаблицаРегистра
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоМесяца КАК НачалоМесяца,
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК ПериодПараметров,
	|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
	|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
	|
	|	&ТекстПолей
	|
	|ИЗ
	|	ТаблицаРегистраИсточник КАК ТаблицаРегистра
	|
	|ГДЕ
	|	ТаблицаРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ТаблицаРегистра.Активность
	|
	|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ТипПринятиеКУчету)
	|
	|	И (ТаблицаРегистра.ПолеОбъектУчета) В
	|			(ВЫБРАТЬ
	|				СписокОбъектовУчета.ПолеОбъектУчета
	|			ИЗ
	|				СписокОбъектовУчета КАК СписокОбъектовУчета
	|			ГДЕ
	|				СписокОбъектовУчета.АмортизацияНачисляетсяСДатыПринятияКУчету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоМесяца КАК НачалоМесяца,
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК ПериодПараметров,
	|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
	|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
	|
	|	&ТекстПолей
	|
	|ИЗ
	|	ТаблицаРегистраИсточник КАК ТаблицаРегистра
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК РазукомплектацияОС
	|		ПО (РазукомплектацияОС.Ссылка = ТаблицаРегистра.Регистратор)
	|
	|ГДЕ
	|	ТаблицаРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ТаблицаРегистра.Активность
	|
	|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|	И ТаблицаРегистра.ПолеОбъектУчета <> РазукомплектацияОС.ОсновноеСредство
	|
	|	И (ТаблицаРегистра.ПолеОбъектУчета) В
	|			(ВЫБРАТЬ
	|				СписокОбъектовУчета.ПолеОбъектУчета
	|			ИЗ
	|				СписокОбъектовУчета КАК СписокОбъектовУчета
	|			ГДЕ
	|				СписокОбъектовУчета.АмортизацияНачисляетсяСДатыПринятияКУчету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоМесяца КАК НачалоМесяца,
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК ПериодПараметров,
	|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
	|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
	|
	|	&ТекстПолей
	|
	|ИЗ
	|	ТаблицаРегистраИсточник КАК ТаблицаРегистра
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбъединениеОС КАК ОбъединениеОС
	|		ПО (ОбъединениеОС.Ссылка = ТаблицаРегистра.Регистратор)
	|
	|ГДЕ
	|	ТаблицаРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ТаблицаРегистра.Активность
	|
	|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) = ТИП(Документ.ОбъединениеОС)
	|	И ТаблицаРегистра.ПолеОбъектУчета = ОбъединениеОС.ОсновноеСредство
	|	И ОбъединениеОС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОбъединениеОС)
	|
	|	И (ТаблицаРегистра.ПолеОбъектУчета) В
	|			(ВЫБРАТЬ
	|				СписокОбъектовУчета.ПолеОбъектУчета
	|			ИЗ
	|				СписокОбъектовУчета КАК СписокОбъектовУчета
	|			ГДЕ
	|				СписокОбъектовУчета.АмортизацияНачисляетсяСДатыПринятияКУчету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоПредыдущегоМесяца КАК НачалоМесяца,
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК ПериодПараметров,
	|	ТаблицаРегистра.ПолеОрганизация КАК Организация,
	|	ТаблицаРегистра.ПолеОбъектУчета КАК ПолеОбъектУчета,
	|
	|	&ТекстПолей
	|
	|ИЗ
	|	ТаблицаРегистраИсточник КАК ТаблицаРегистра
	|
	|ГДЕ
	|	ТаблицаРегистра.Период МЕЖДУ &НачалоПредыдущегоМесяца И &КонецПредыдущегоМесяца
	|	И ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ТаблицаРегистра.Активность
	|
	|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ТипПринятиеКУчету)
	|
	|	И (ТаблицаРегистра.ПолеОбъектУчета) В
	|			(ВЫБРАТЬ
	|				СписокОбъектовУчета.ПолеОбъектУчета
	|			ИЗ
	|				СписокОбъектовУчета_Доначисление_Все КАК СписокОбъектовУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолеОбъектУчета,
	|	ПериодПараметров,
	|	НачалоМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРегистра_СрезПоследних
	|";
	СписокЗапросовЛокальный.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовЛокальный, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	НеДобавлятьПоля = Новый Массив;
	НеДобавлятьПоля.Добавить(ВРег(ОбъектУчета));
	НеДобавлятьПоля.Добавить(ВРег("Организация"));
	
	ТекстПолей = ТекстПолейРегистра(ИмяРегистра, ВычислениеПолей, НеДобавлятьПоля);
	
	Если ВРегистреЕстьОрганизация(ИмяРегистра) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(ПолеОбъектУчета)", "(ПолеОбъектУчета, Организация)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(ТаблицаРегистра.ПолеОбъектУчета)", "(ТаблицаРегистра.ПолеОбъектУчета, ТаблицаРегистра.Организация)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокОбъектовУчета.ПолеОбъектУчета", "СписокОбъектовУчета.ПолеОбъектУчета, СписокОбъектовУчета.Организация");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.ПолеОрганизация", "ТаблицаРегистра.Организация");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.ПолеОрганизация", "НЕОПРЕДЕЛЕНО");
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолеОбъектУчета", ОбъектУчета);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокУчетаОС", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистраИсточник", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ИмяРегистра", ?(ИмяТаблицы <> "", ИмяТаблицы, ИмяРегистра));

	Если НЕ РегистрПоддерживаетИсправление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаИсправления = ДАТАВРЕМЯ(1,1,1)", "ИСТИНА");
	КонецЕсли;

	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Формирует текст запроса, отражающий начисленную амортизацию в регистре ПрочиеРасходы.
// Используется в документах, которые могут начислять амортизацию.
// 
// Параметры:
//	ДопПоля - Строка -
//	
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПрочихРасходах(ДопПоля = "") Экспорт

	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПрочихРасходах(ДопПоля);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРасходы.ПериодРасчета                      КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
		|	ТаблицаРасходы.Организация                        КАК Организация,
		|	ТаблицаРасходы.КорПодразделение                   КАК Подразделение,
		|	ТаблицаРасходы.СтатьяРасходов                     КАК СтатьяРасходов,
		|	ТаблицаРасходы.АналитикаРасходов                  КАК АналитикаРасходов,
		|	ТаблицаРасходы.КорНаправлениеДеятельности         КАК НаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                      КАК ВидДеятельностиНДС,
		|	ТаблицаРасходы.СуммаУУ                            КАК СуммаСНДС,
		|	ТаблицаРасходы.СуммаУУ                            КАК СуммаБезНДС,
		|	ТаблицаРасходы.СуммаУУ                            КАК СуммаБезНДСУпр,
		|	ТаблицаРасходы.СуммаБУ                            КАК СуммаСНДСРегл,
		|	ТаблицаРасходы.СуммаБУ                            КАК СуммаБезНДСРегл,
		|	0                                                 КАК ПостояннаяРазница,
		|	0                                                 КАК ВременнаяРазница,
		|
		|	ВЫБОР 
		|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
		|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОСизДругойОрганизации)
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияНМАИзДругойОрганизации)
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыНИОКРИзДругойОрганизации)
		|				КОНЕЦ
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОС)
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияНМА)
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыНИОКР)
		|
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|
		|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
		|	
		|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
		|
		|	ВЫБОР 
		|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
		|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОСизДругойОрганизации)
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМАИзДругойОрганизации)
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНаРасходыНИОКРИзДругойОрганизации)
		|				КОНЕЦ
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОС)
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМА)
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНаРасходыНИОКР)
		|
		|	КОНЕЦ КАК НастройкаХозяйственнойОперации
		|
		|	,&ДополнительныеПоля
		|
		|ИЗ
		|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленнаяАмортизация КАК ТаблицаРасходы
		|		ПО ТаблицаРасходы.Организация = ДанныеДокумента.Организация
		|			И ТаблицаРасходы.НомерПакета = ДанныеДокумента.НомерПакета
		|
		|ГДЕ
		|	НЕ ТаблицаРасходы.НачислятьИзнос
		|	И (ТаблицаРасходы.СуммаУУ <> 0
		|		ИЛИ ТаблицаРасходы.СуммаБУ <> 0)
		|";
		
		ЗаменитьДополнительныеПоляВЗапросе(ТекстЗапроса, ДопПоля);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// Формирует текст запроса, отражающий начисленную амортизацию в регистре ПартииПрочихРасходов.
// Используется в документах, которые могут начислять амортизацию.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПартияхПрочихРасходов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                      КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|			ТОГДА ТаблицаРасходы.ОрганизацияПолучательРасходов
	|		ИНАЧЕ ТаблицаРасходы.Организация
	|	КОНЕЦ                                                       КАК Организация,
	|	ТаблицаРасходы.КорПодразделение                             КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов                               КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов                            КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаАктивовПассивов,
	|	ДанныеДокумента.Ссылка                                      КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаРасходы.КорНаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                КАК ВидДеятельностиНДС,
	|
	|	ТаблицаРасходы.СуммаУУ                                      КАК Стоимость,
	|	ТаблицаРасходы.СуммаУУ                                      КАК СтоимостьБезНДС,
	|	0                                                           КАК НДСУпр,
	|	ТаблицаРасходы.СуммаБУ + ТаблицаРасходы.СуммаЦФ             КАК СтоимостьРегл,
	|	0                                                           КАК НДСРегл,
	|	ТаблицаРасходы.СуммаПР + ТаблицаРасходы.СуммаПРЦФ           КАК ПостояннаяРазница,
	|	ТаблицаРасходы.СуммаВР + ТаблицаРасходы.СуммаВРЦФ           КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияНМАИзДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыНИОКР)
	|
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМАИзДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНаРасходыНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНаРасходыНИОКР)
	|
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленнаяАмортизация КАК ТаблицаРасходы
	|		ПО ТаблицаРасходы.Организация = ДанныеДокумента.Организация
	|			И ТаблицаРасходы.НомерПакета = ДанныеДокумента.НомерПакета
	|
	|ГДЕ
	|	НЕ ТаблицаРасходы.НачислятьИзнос
	|
	|	И (ТаблицаРасходы.СуммаУУ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаБУ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаНУ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаПР <> 0
	|		ИЛИ ТаблицаРасходы.СуммаВР <> 0
	|		ИЛИ ТаблицаРасходы.СуммаЦФ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаНУЦФ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаПРЦФ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаВРЦФ <> 0)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса, отражающий обесценение в регистре ПрочиеРасходы.
// Используется в документах, которые могут начислять амортизацию.
// 
// Параметры:
//  ДополнительныеПоля - Строка - Список дополнительный полей.
//  
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеОбесцененияВПрочихРасходах(ДополнительныеПоля = "") Экспорт
	
	#Область СторноОбесценения // Дт Расходы - Кт Обесценение (сторно)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасходы.ПериодРасчета                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
	|	ТаблицаРасходы.Организация                        КАК Организация,
	|	ТаблицаРасходы.КорПодразделение                   КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов                     КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов                  КАК АналитикаРасходов,
	|	ТаблицаРасходы.КорНаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                      КАК ВидДеятельностиНДС,
	|
	|	-ТаблицаРасходы.ОбесценениеУУ                     КАК СуммаСНДС,
	|	-ТаблицаРасходы.ОбесценениеУУ                     КАК СуммаБезНДС,
	|	-ТаблицаРасходы.ОбесценениеУУ                     КАК СуммаБезНДСУпр,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ТаблицаРасходы.ОбесценениеЦФ)   КАК СуммаСНДСРегл,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ТаблицаРасходы.ОбесценениеЦФ)   КАК СуммаБезНДСРегл,
	|	0                                                 КАК ПостояннаяРазница,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ТаблицаРасходы.ОбесценениеЦФ)   КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНМАИзДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНИОКР)
	|
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНМАИзДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНИОКР)
	|
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленнаяАмортизация КАК ТаблицаРасходы
	|		ПО ТаблицаРасходы.Организация = ДанныеДокумента.Организация
	|			И ТаблицаРасходы.НомерПакета = ДанныеДокумента.НомерПакета
	|
	|ГДЕ
	|	ТаблицаРасходы.ВариантПроводокПоОбесценениюВНА = &СторнироватьКорректировкуОбесценения
	|
	|	И (ТаблицаРасходы.ОбесценениеУУ <> 0
	|		ИЛИ ТаблицаРасходы.ОбесценениеБУ <> 0
	|		ИЛИ ТаблицаРасходы.ОбесценениеЦФ <> 0)
	|";
	#КонецОбласти
	
	ЗаменитьДополнительныеПоляВЗапросе(ТекстЗапроса, ДополнительныеПоля);	

	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса, отражающий обесценение в регистре ПартииПрочихРасходов.
// Используется в документах, которые могут начислять амортизацию.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеОбесцененияВПартияхПрочихРасходах() Экспорт
	
	#Область СторноОбесценения // Дт Расходы - Кт Обесценение (сторно)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                      КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|			ТОГДА ТаблицаРасходы.ОрганизацияПолучательРасходов
	|		ИНАЧЕ ТаблицаРасходы.Организация
	|	КОНЕЦ                                                       КАК Организация,
	|	ТаблицаРасходы.КорПодразделение                             КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов                               КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов                            КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаАктивовПассивов,
	|	ДанныеДокумента.Ссылка                                      КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаРасходы.КорНаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                КАК ВидДеятельностиНДС,
	|
	|	-ТаблицаРасходы.ОбесценениеУУ                               КАК Стоимость,
	|	-ТаблицаРасходы.ОбесценениеУУ                               КАК СтоимостьБезНДС,
	|	0                                                           КАК НДСУпр,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ТаблицаРасходы.ОбесценениеЦФ) КАК СтоимостьРегл,
	|	0                                                           КАК НДСРегл,
	|	0                                                           КАК ПостояннаяРазница,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ТаблицаРасходы.ОбесценениеЦФ) КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНМАИзДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНИОКР)
	|
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНМАИзДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНИОКР)
	|
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачисленнаяАмортизация КАК ТаблицаРасходы
	|		ПО ТаблицаРасходы.Организация = ДанныеДокумента.Организация
	|			И ТаблицаРасходы.НомерПакета = ДанныеДокумента.НомерПакета
	|
	|ГДЕ
	|	НЕ ТаблицаРасходы.НачислятьИзнос
	|	И ТаблицаРасходы.ВариантПроводокПоОбесценениюВНА = &СторнироватьКорректировкуОбесценения
	|
	|	И (ТаблицаРасходы.ОбесценениеУУ <> 0
	|		ИЛИ ТаблицаРасходы.ОбесценениеБУ <> 0
	|		ИЛИ ТаблицаРасходы.ОбесценениеЦФ <> 0)
	|";
	#КонецОбласти
	
	Возврат ТекстЗапроса;
	
КонецФункции

// 
// Возвращаемое значение:
//  Число -
Функция МинимальнаяОстаточнаяСтоимостьРегл() Экспорт

	ЗначениеПараметра = 0;
	
	//++ Локализация
	ЗначениеПараметра = 5;
	//-- Локализация
							
	Возврат ЗначениеПараметра;

КонецФункции

// 
// Возвращаемое значение:
//  Число -
Функция МинимальнаяОстаточнаяСтоимостьУпр() Экспорт

	ЗначениеПараметра = 0;
	
	//++ Локализация
	ЗначениеПараметра = 5;
	//-- Локализация
							
	Возврат ЗначениеПараметра;

КонецФункции
 
#КонецОбласти

#Область ПереоценкаОС_НМА

// Добавляет тексты запросов для проведения при переоценке ОС и НМА.
//
// Параметры:
//  Запрос			 - Запрос - Запрос который используется при проведении.
//  ТекстыЗапроса	 - СписокЗначений - Список запросов.
//  ВидОбъектовУчета - Строка - "ОС" или "НМА".
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//
Процедура ТекстыЗапросаПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, Регистры) Экспорт
	
	ИмяДокумента = ?(ВидОбъектовУчета = "ОС", "Документ.ПереоценкаОС2_4", "Документ.ПереоценкаНМА2_4");
	
	ТекстЗапросаТаблицаСтоимостьПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры);
	ТекстЗапросаТаблицаАмортизацияПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры);
	ТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходовПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры);
	ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры);
	
КонецПроцедуры

#КонецОбласти

#Область ВыбытиеОС

// Формирует текст запроса для отражения списания стоимости ОС в регистре "СтоимостьОС".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 	
// Возвращаемое значение:
//	Строка -  
Функция ТекстЗапросаСписанияСтоимостиОС(ТекстыЗапроса) Экспорт
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Списание стоимости
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                 КАК Регистратор,
	|	ДанныеДокумента.Период                 КАК Период,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ТаблицаОС.Местонахождение              КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьНУ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьНУ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьПР 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА ДанныеДокумента.ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.СтоимостьНУ + ТаблицаОС.СтоимостьПР
	|			ИНАЧЕ 0 
	|		КОНЕЦ КАК СтоимостьВР,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьНУЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьНУЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьПРЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА ДанныеДокумента.ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.СтоимостьНУЦФ + ТаблицаОС.СтоимостьПРЦФ
	|			ИНАЧЕ 0 
	|		КОНЕЦ КАК СтоимостьВРЦФ,
	|
	|	0                                      КАК ПредварительнаяСтоимость,
	|	0                                      КАК ПредварительнаяСтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизационнаяПремия 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК АмортизационнаяПремия,
	|
	|	0                                      КАК РезервПереоценкиСтоимости,
	|	0                                      КАК РезервПереоценкиСтоимостиРегл,
	|	0                                      КАК ПриростСтоимости,
	|	0                                      КАК ПриростСтоимостиРегл,
	|	0                                      КАК НеУчитываемаяСтоимостьНУ,
	|	0                                      КАК ЗалоговаяСтоимость,
	|	
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                    КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                           КАК КорКонтрагент,
	|
	|	&ХО_СписаниеСтоимостиОС                КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ОтражатьВРеглУчете     КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете      КАК ОтражатьВУпрУчете,
	|	
	|	ТаблицаОС.ИдентификаторСтроки          КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеСтоимостиОС       КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание резерва переоценки
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                 КАК Регистратор,
	|	ДанныеДокумента.Период                 КАК Период,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ТаблицаОС.Местонахождение              КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьРегл,
	|	0                                      КАК СтоимостьНУ,
	|	0                                      КАК СтоимостьПР,
	|	0                                      КАК СтоимостьВР,
	|	0                                      КАК СтоимостьЦФ,
	|	0                                      КАК СтоимостьНУЦФ,
	|	0                                      КАК СтоимостьПРЦФ,
	|	0                                      КАК СтоимостьВРЦФ,
	|
	|	0                                      КАК ПредварительнаяСтоимость,
	|	0                                      КАК ПредварительнаяСтоимостьРегл,
	|	0                                      КАК АмортизационнаяПремия,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0                                      КАК ПриростСтоимости,
	|	0                                      КАК ПриростСтоимостиРегл,
	|
	|	0                                      КАК НеУчитываемаяСтоимостьНУ,
	|	0                                      КАК ЗалоговаяСтоимость,
	|	
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                    КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                           КАК КорКонтрагент,
	|
	|	&ХО_СписаниеРезерваПереоценкиСтоимостиОС КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ОтражатьВБУ            КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете      КАК ОтражатьВУпрУчете,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                           КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.РезервПереоценкиСтоимости <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И ТаблицаОС.РезервПереоценкиСтоимостиРегл <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                 КАК Регистратор,
	|	ДанныеДокумента.Период                 КАК Период,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	НЕОПРЕДЕЛЕНО                           КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьРегл,
	|	0                                      КАК СтоимостьНУ,
	|	0                                      КАК СтоимостьПР,
	|	0                                      КАК СтоимостьВР,
	|	0                                      КАК СтоимостьЦФ,
	|	0                                      КАК СтоимостьНУЦФ,
	|	0                                      КАК СтоимостьПРЦФ,
	|	0                                      КАК СтоимостьВРЦФ,
	|
	|	0                                      КАК ПредварительнаяСтоимость,
	|	0                                      КАК ПредварительнаяСтоимостьРегл,
	|	0                                      КАК АмортизационнаяПремия,
	|
	|	0                                      КАК РезервПереоценкиСтоимости,
	|	0                                      КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ПриростСтоимости 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ПриростСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	0                                      КАК НеУчитываемаяСтоимостьНУ,
	|	0                                      КАК ЗалоговаяСтоимость,
	|	
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                    КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                           КАК КорКонтрагент,
	|
	|	&ХО_СписаниеРезерваПереоценкиСтоимостиОС КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ОтражатьВБУ            КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете      КАК ОтражатьВУпрУчете,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                           КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.ПриростСтоимости <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И ТаблицаОС.ПриростСтоимостиРегл <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание предварительной стоимости
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                 КАК Регистратор,
	|	ДанныеДокумента.Период                 КАК Период,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ТаблицаОС.Местонахождение              КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьРегл,
	|	0                                      КАК СтоимостьНУ,
	|	0                                      КАК СтоимостьПР,
	|	0                                      КАК СтоимостьВР,
	|	0                                      КАК СтоимостьЦФ,
	|	0                                      КАК СтоимостьНУЦФ,
	|	0                                      КАК СтоимостьПРЦФ,
	|	0                                      КАК СтоимостьВРЦФ,
	|
	|	ТаблицаОС.ПредварительнаяСтоимость     КАК ПредварительнаяСтоимость,
	|	ТаблицаОС.ПредварительнаяСтоимостьРегл КАК ПредварительнаяСтоимостьРегл,
	|
	|	0                                      КАК АмортизационнаяПремия,
	|	0                                      КАК РезервПереоценкиСтоимости,
	|	0                                      КАК РезервПереоценкиСтоимостиРегл,
	|	0                                      КАК ПриростСтоимости,
	|	0                                      КАК ПриростСтоимостиРегл,
	|	0                                      КАК НеУчитываемаяСтоимостьНУ,
	|	0                                      КАК ЗалоговаяСтоимость,
	|	
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                    КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                           КАК КорКонтрагент,
	|
	|	ДанныеДокумента.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ОтражатьВРеглУчете     КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете      КАК ОтражатьВУпрУчете,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                           КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|	И ДанныеДокумента.ОтражатьВУпрУчете
	|	И (ТаблицаОС.ПредварительнаяСтоимость <> 0
	|		ИЛИ ТаблицаОС.ПредварительнаяСтоимостьРегл <> 0)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для отражения списания амортизации ОС в регистре "АмортизацияОС".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 	
// Возвращаемое значение:
//	Строка - 
Функция ТекстЗапросаСписанияАмортизацииОС(ТекстыЗапроса) Экспорт

	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Списание амортизации
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                       КАК Регистратор,
	|	ДанныеДокумента.Период                       КАК Период,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|	ТаблицаОС.Местонахождение                    КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияНУ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияНУ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияПР 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА ДанныеДокумента.ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.АмортизацияНУ + ТаблицаОС.АмортизацияПР
	|			ИНАЧЕ 0 
	|		КОНЕЦ КАК АмортизацияВР,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияНУЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияНУЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияПРЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА ДанныеДокумента.ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.АмортизацияНУЦФ + ТаблицаОС.АмортизацияПРЦФ
	|			ИНАЧЕ 0 
	|		КОНЕЦ                                    КАК АмортизацияВРЦФ,
	|
	|	0                                            КАК РезервПереоценкиАмортизации,
	|	0                                            КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	&ХО_СписаниеАмортизацииОС                    КАК ХозяйственнаяОперация,
	|	ТаблицаОС.НачислятьИзнос                     КАК НачислятьИзнос,
	|
	|	ТаблицаОС.ИдентификаторСтроки                КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеАмортизацииОС           КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеАмортизацииОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.Амортизация <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И (ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ) <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВНУ И (ТаблицаОС.АмортизацияНУ + ТаблицаОС.АмортизацияНУЦФ) <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВНУ И (ТаблицаОС.АмортизацияПР + ТаблицаОС.АмортизацияПРЦФ) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание резерва переоценки
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                       КАК Регистратор,
	|	ДанныеДокумента.Период                       КАК Период,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|	ТаблицаОС.Местонахождение                    КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
	|
	|	0                                            КАК Амортизация,
	|	0                                            КАК АмортизацияРегл,
	|	0                                            КАК АмортизацияНУ,
	|	0                                            КАК АмортизацияПР,
	|	0                                            КАК АмортизацияВР,
	|	0                                            КАК АмортизацияЦФ,
	|	0                                            КАК АмортизацияНУЦФ,
	|	0                                            КАК АмортизацияПРЦФ,
	|	0                                            КАК АмортизацияВРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	&ХО_СписаниеРезерваПереоценкиАмортизацииОС   КАК ХозяйственнаяОперация,
	|	ТаблицаОС.НачислятьИзнос                     КАК НачислятьИзнос,
	|
	|	&ИдентификаторНеиспользуемойФинЗаписи        КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                                 КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеАмортизацииОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка
	|  
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.РезервПереоценкиАмортизации <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И ТаблицаОС.РезервПереоценкиАмортизацииРегл <> 0)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

/// Формирует текст запроса для отражения списания обесценения ОС в регистре "ОбесценениеВНА".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 	
// Возвращаемое значение:
//	Строка - 
Функция ТекстЗапросаСписанияОбесцененияОС(ТекстыЗапроса) Экспорт

	ТекстЗапросаТаблицаВтСписаниеОбесцененияОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Списание обесценения
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                       КАК Регистратор,
	|	ДанныеДокумента.Период                       КАК Период,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|	ТаблицаОС.Местонахождение                    КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство                   КАК ВнеоборотныйАктив,
	|	ТаблицаОС.ЕГДС                               КАК ЕГДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ОбесценениеУпр 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ОбесценениеУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ОбесценениеРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ОбесценениеРегл,
	|
	|
	|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	&ХО_СписаниеОбесцененияОС                    КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеОбесцененияОС           КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписаниеОбесцененияОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.ОбесценениеУпр <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И (ТаблицаОС.ОбесценениеРегл) <> 0)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для отражения выбытия ОС в регистре "ДвиженияДоходыРасходыПрочиеАктивыПассивы".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВыбытияОСДвиженияДоходыРасходыПрочиеАктивыПассивы(ТекстыЗапроса) Экспорт

	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);

	ТекстЗапроса =
	// Списание стоимости Дт 01.09 - Кт 01.01
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Регистратор,
	|	ДанныеДокумента.Период            КАК Период,
	|	&ХО_СписаниеСтоимостиОС           КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация       КАК Организация,
	|
	|	ДанныеДокумента.Подразделение     КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                      КАК Статья,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаРасходов,
	|	ТаблицаОС.ОсновноеСредство        КАК АналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение     КАК КорПодразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	&СтатьяВыбытияОС                  КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаДоходов,
	|	ТаблицаОС.ОсновноеСредство        КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                      КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.Стоимость <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И (ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Списание амортизации Дт 02.01 - Кт 01.09
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Регистратор,
	|	ДанныеДокумента.Период            КАК Период,
	|	&ХО_СписаниеАмортизацииОС         КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация       КАК Организация,
	|
	|	ДанныеДокумента.Подразделение     КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяВыбытияОС                  КАК Статья,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаДоходов,
	|	ТаблицаОС.ОсновноеСредство        КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                      КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение     КАК КорПодразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                      КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаРасходов,
	|	ТаблицаОС.ОсновноеСредство        КАК КорАналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета  КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеАмортизацииОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.Амортизация <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И (ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание резерва переоценки амортизации ОС
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Регистратор,
	|	ДанныеДокумента.Период                        КАК Период,
	|	&ХО_СписаниеРезерваПереоценкиАмортизацииОС    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                   КАК Организация,
	|
	|	ДанныеДокумента.Подразделение                 КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности             КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                                  КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                  КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                  КАК АналитикаРасходов,
	|	ТаблицаОС.ОсновноеСредство                    КАК АналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета              КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение                 КАК КорПодразделение,
	|	ТаблицаОС.НаправлениеДеятельности             КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбытки                       КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                  КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                  КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                  КАК КорАналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета              КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВРеглУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеАмортизацииОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.РезервПереоценкиАмортизации <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И ТаблицаОС.РезервПереоценкиАмортизацииРегл <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание резерва переоценки стоимости ОС
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_СписаниеРезерваПереоценкиСтоимостиОС   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности          КАК НаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбытки                    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета           КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаОС.НаправлениеДеятельности          КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	ТаблицаОС.ОсновноеСредство                 КАК КорАналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета           КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВРеглУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете И ТаблицаОС.РезервПереоценкиСтоимости <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ И ТаблицаОС.РезервПереоценкиСтоимостиРегл <> 0)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для отражения выбытия ОС в регистре "ДвиженияПоПрочимАктивамПассивам".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВыбытияОСДвиженияПоПрочимАктивамПассивам(ТекстыЗапроса) Экспорт
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);

	ТекстЗапроса =
	// Резерв переоценки амортизации
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Регистратор,
	|	ДанныеДокумента.Период            КАК Период,
	|	ДанныеДокумента.Организация       КАК Организация,
	|	ДанныеДокумента.Подразделение     КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                      КАК Статья,
	|	ТаблицаОС.ОсновноеСредство        КАК Аналитика,
	|
	|	ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка) КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеРезерваПереоценкиАмортизацииОС КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеАмортизацииОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете
	|			И ТаблицаОС.РезервПереоценкиАмортизации <> 0 
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ
	|			И ТаблицаОС.РезервПереоценкиАмортизацииРегл <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Резерв переоценки стоимости
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Регистратор,
	|	ДанныеДокумента.Период            КАК Период,
	|	ДанныеДокумента.Организация       КАК Организация,
	|	ДанныеДокумента.Подразделение     КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                      КАК Статья,
	|	ТаблицаОС.ОсновноеСредство        КАК Аналитика,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка) КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеРезерваПереоценкиСтоимостиОС КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|ГДЕ
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|			И ТаблицаОС.РезервПереоценкиСтоимости <> 0
	|		ИЛИ ДанныеДокумента.ОтражатьВБУ
	|			И ТаблицаОС.РезервПереоценкиСтоимостиРегл <> 0
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для отражения выбытия ОС в регистре "ПрочиеРасходы".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходыПриВыбытииОС(ТекстыЗапроса) Экспорт
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);
	
	СписокЗапросовОбъединение = Новый Массив;

	#Область СписаниеСтоимостиОС // Дт 01.09 - Кт 01.01
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                          КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)          КАК ВидДвижения,
	|	ДанныеДокумента.Организация                     КАК Организация,
	|	ТаблицаОС.Местонахождение                       КАК Подразделение,
	|	&СтатьяВыбытияОС                                КАК СтатьяРасходов,
	|
	|	ВЫБОР
	|		КОГДА СтрокаВладельца.ОСВладелец = ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|			ТОГДА ТаблицаОС.ОсновноеСредство
	|		ИНАЧЕ СтрокаВладельца.ОСВладелец
	|	КОНЕЦ                                           КАК АналитикаРасходов,
	|
	|	ТаблицаОС.НаправлениеДеятельности               КАК НаправлениеДеятельности,
	|
	|	НЕОПРЕДЕЛЕНО                                    КАК ВидДеятельностиНДС,
	|	
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьПР + ТаблицаОС.СтоимостьПРЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА ДанныеДокумента.ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.СтоимостьНУ + ТаблицаОС.СтоимостьНУЦФ + ТаблицаОС.СтоимостьПР + ТаблицаОС.СтоимостьПРЦФ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеСтоимостиОС                         КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                    КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                   КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеСтоимостиОС                КАК НастройкаХозяйственнойОперации
	|
	|	,ДанныеДокумента.Ссылка КАК Регистратор
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО ТаблицаОС.ОсновноеСредство = СтрокаВладельца.ОсновноеСредство
	|";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область СписаниеАмортизацииОС // Дт 02.01 - Кт 01.09
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                          КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
	|	ДанныеДокумента.Организация                     КАК Организация,
	|	ТаблицаОС.Местонахождение                       КАК Подразделение,
	|	&СтатьяВыбытияОС                                КАК СтатьяРасходов,
	|
	|	ВЫБОР
	|		КОГДА СтрокаВладельца.ОСВладелец = ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|			ТОГДА ТаблицаОС.ОсновноеСредство
	|		ИНАЧЕ СтрокаВладельца.ОСВладелец
	|	КОНЕЦ                                           КАК АналитикаРасходов,
	|
	|	ТаблицаОС.НаправлениеДеятельности               КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                    КАК ВидДеятельностиНДС,
	|	
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияПР + ТаблицаОС.АмортизацияПРЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА ДанныеДокумента.ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.АмортизацияНУ + ТаблицаОС.АмортизацияНУЦФ + ТаблицаОС.АмортизацияПР + ТаблицаОС.АмортизацияПРЦФ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеАмортизацииОС                       КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                    КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                   КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеАмортизацииОС              КАК НастройкаХозяйственнойОперации
	|
	|	,ДанныеДокумента.Ссылка КАК Регистратор
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеАмортизацииОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО ТаблицаОС.ОсновноеСредство = СтрокаВладельца.ОсновноеСредство
	|";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	#КонецОбласти
		
	#Область СписаниеОбесцененияОС // Дт 02.04 - Кт 01.09
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                          КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
	|	ДанныеДокумента.Организация                     КАК Организация,
	|	ТаблицаОС.Местонахождение                       КАК Подразделение,
	|	&СтатьяВыбытияОС                                КАК СтатьяРасходов,
	|
	|	ВЫБОР
	|		КОГДА СтрокаВладельца.ОСВладелец = ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|			ТОГДА ТаблицаОС.ОсновноеСредство
	|		ИНАЧЕ СтрокаВладельца.ОСВладелец
	|	КОНЕЦ КАК АналитикаРасходов,
	|
	|	ТаблицаОС.НаправлениеДеятельности               КАК НаправлениеДеятельности,
	|
	|	НЕОПРЕДЕЛЕНО                                    КАК ВидДеятельностиНДС,
	|	
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ОбесценениеУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ОбесценениеУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ОбесценениеУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ОбесценениеРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ОбесценениеРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ОбесценениеРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеОбесцененияОС          КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                       КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаОС.ИдентификаторСтроки      КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеОбесцененияОС КАК НастройкаХозяйственнойОперации
	|
	|	,ДанныеДокумента.Ссылка КАК Регистратор
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписаниеОбесцененияОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО ТаблицаОС.ОсновноеСредство = СтрокаВладельца.ОсновноеСредство
	|";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	#КонецОбласти
		
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтОстаточнаяСтоимостьОС(ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втОстаточнаяСтоимостьОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Остаточная стоимость при полном списании
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                    КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство                                КАК ОсновноеСредство,
	|
	|	ЕСТЬNULL(СтоимостьОС.Стоимость, 0) - ЕСТЬNULL(АмортизацияОС.Амортизация, 0)         КАК Стоимость,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) КАК СтоимостьРегл,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0)     КАК СтоимостьНУ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0)     КАК СтоимостьПР,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0)     КАК СтоимостьВР,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)     КАК СтоимостьЦФ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияНУЦФ, 0) КАК СтоимостьНУЦФ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияПРЦФ, 0) КАК СтоимостьПРЦФ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьВРЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияВРЦФ, 0) КАК СтоимостьВРЦФ,
	|
	|	ЕСТЬNULL(СтоимостьОС.АмортизационнаяПремия, 0)            КАК АмортизационнаяПремия,
	|	
	|	ТаблицаОС.Местонахождение                                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета                          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности                         КАК НаправлениеДеятельности,
	|	ТаблицаОС.СтатьяДоходов                                   КАК СтатьяДоходов,
	|	ТаблицаОС.АналитикаДоходов                                КАК АналитикаДоходов,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                             КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ втОстаточнаяСтоимостьОС
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК ТаблицаОС
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьОС
	|		ПО ТаблицаОС.ОсновноеСредство = СтоимостьОС.ОбъектУчета
	|		И СтоимостьОС.Ссылка = ТаблицаОС.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияОС
	|		ПО ТаблицаОС.ОсновноеСредство = АмортизацияОС.ОбъектУчета
	|			И АмортизацияОС.Ссылка = ТаблицаОС.Ссылка
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|	И (ЕСТЬNULL(СтоимостьОС.Стоимость, 0) - ЕСТЬNULL(АмортизацияОС.Амортизация, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияНУЦФ, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияПРЦФ, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьВРЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияВРЦФ, 0) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Остаточная стоимость при частичном списании
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                  КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство                              КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Стоимость - ЕСТЬNULL(АмортизацияОС.Амортизация, 0)         КАК Стоимость,
	|	ТаблицаОС.СтоимостьРегл - ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) КАК СтоимостьРегл,
	|	ТаблицаОС.СтоимостьНУ - ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0)     КАК СтоимостьНУ,
	|	ТаблицаОС.СтоимостьПР - ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0)     КАК СтоимостьПР,
	|	ТаблицаОС.СтоимостьВР - ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0)     КАК СтоимостьВР,
	|	ТаблицаОС.СтоимостьЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)     КАК СтоимостьЦФ,
	|	ТаблицаОС.СтоимостьНУЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияНУЦФ, 0) КАК СтоимостьНУЦФ,
	|	ТаблицаОС.СтоимостьПРЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияПРЦФ, 0) КАК СтоимостьПРЦФ,
	|	ТаблицаОС.СтоимостьВРЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияВРЦФ, 0) КАК СтоимостьВРЦФ,
	|
	|	ТаблицаОС.АмортизационнаяПремия                         КАК АмортизационнаяПремия,
	|	
	|	ТаблицаОС.Местонахождение                               КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета                        КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности                       КАК НаправлениеДеятельности,
	|	ТаблицаОС.СтатьяДоходов                                 КАК СтатьяДоходов,
	|	ТаблицаОС.АналитикаДоходов                              КАК АналитикаДоходов,
	|
	|	ТаблицаОС.ИдентификаторСтроки                           КАК ИдентификаторСтроки
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК ТаблицаОС
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСписаниеАмортизацииОС КАК АмортизацияОС
	|			ПО ТаблицаОС.Ссылка = АмортизацияОС.Ссылка
	|				И ТаблицаОС.ОсновноеСредство = АмортизацияОС.ОсновноеСредство
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|	И (ТаблицаОС.Стоимость - ЕСТЬNULL(АмортизацияОС.Амортизация, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьРегл - ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьНУ - ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьПР - ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьВР - ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьНУЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияНУЦФ, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьПРЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияПРЦФ, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьВРЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияВРЦФ, 0) <> 0)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втСписаниеСтоимостиОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"// Полное списание стоимости
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка                      КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство            КАК ОсновноеСредство,
	|
	|	СтоимостьОС.Стоимость                 КАК Стоимость,
	|	СтоимостьОС.СтоимостьРегл             КАК СтоимостьРегл,
	|	СтоимостьОС.СтоимостьНУ               КАК СтоимостьНУ,
	|	СтоимостьОС.СтоимостьПР               КАК СтоимостьПР,
	|	СтоимостьОС.СтоимостьВР               КАК СтоимостьВР,
	|	СтоимостьОС.СтоимостьЦФ               КАК СтоимостьЦФ,
	|	СтоимостьОС.СтоимостьНУЦФ             КАК СтоимостьНУЦФ,
	|	СтоимостьОС.СтоимостьПРЦФ             КАК СтоимостьПРЦФ,
	|	СтоимостьОС.СтоимостьВРЦФ             КАК СтоимостьВРЦФ,
	|
	|	СтоимостьОС.АмортизационнаяПремия         КАК АмортизационнаяПремия,
	|	СтоимостьОС.РезервПереоценкиСтоимости     КАК РезервПереоценкиСтоимости,
	|	СтоимостьОС.РезервПереоценкиСтоимостиРегл КАК РезервПереоценкиСтоимостиРегл,
	|	СтоимостьОС.ПриростСтоимости              КАК ПриростСтоимости,
	|	СтоимостьОС.ПриростСтоимостиРегл          КАК ПриростСтоимостиРегл,
	|	СтоимостьОС.ПредварительнаяСтоимость      КАК ПредварительнаяСтоимость,
	|	СтоимостьОС.ПредварительнаяСтоимостьРегл  КАК ПредварительнаяСтоимостьРегл,
	|	СтоимостьОС.ЗалоговаяСтоимость            КАК ЗалоговаяСтоимость,
	|
	|	1                                     КАК ДоляСписания,
	|	1                                     КАК ДоляСписанияБУ,
	|	1                                     КАК ДоляСписанияЦФ,
	|	1                                     КАК ДоляСписанияНУ,
	|	1                                     КАК ДоляСписанияНУЦФ,
	|	1                                     КАК ДоляСписанияПР,
	|	1                                     КАК ДоляСписанияПРЦФ,
	|	
	|	ТаблицаОС.Местонахождение             КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета      КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                   КАК Арендатор,
	|	ТаблицаОС.НачислятьИзнос              КАК НачислятьИзнос,
	|	ТаблицаОС.СтатьяДоходов               КАК СтатьяДоходов,
	|	ТаблицаОС.АналитикаДоходов            КАК АналитикаДоходов,
	|	
	|	ТаблицаОС.ИдентификаторСтроки         КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ втСписаниеСтоимостиОС
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьОС
	|		ПО ТаблицаОС.ОсновноеСредство = СтоимостьОС.ОбъектУчета
	|			И СтоимостьОС.Ссылка = ТаблицаОС.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Частичное списание стоимости
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка           КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|
	|	ТаблицаОС.СуммаСписанияУУ  КАК Стоимость,
	|	ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ КАК СтоимостьРегл,
	|	ТаблицаОС.СуммаСписанияНУ - ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ КАК СтоимостьНУ,
	|	ТаблицаОС.СуммаСписанияПР - ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР КАК СтоимостьПР,
	|
	|	ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ) КАК ЧИСЛО(31,2))
	|	- ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияНУ - ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ) КАК ЧИСЛО(31,2))
	|	- ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияПР - ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР) КАК ЧИСЛО(31,2)) КАК СтоимостьВР,
	|
	|	ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ КАК СтоимостьЦФ,
	|	ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ КАК СтоимостьНУЦФ,
	|	ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР КАК СтоимостьПРЦФ,
	|
	|	ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ) КАК ЧИСЛО(31,2))
	|	- ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ) КАК ЧИСЛО(31,2))
	|	- ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР) КАК ЧИСЛО(31,2)) КАК СтоимостьВРЦФ,
	|
	|	СтоимостьОС.АмортизационнаяПремия КАК АмортизационнаяПремия,
	|
	|	СтоимостьОС.РезервПереоценкиСтоимости
	|	* ВЫБОР КОГДА СтоимостьОС.Стоимость ЕСТЬ NULL ИЛИ СтоимостьОС.Стоимость = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияУУ КАК ЧИСЛО(31, 10)) 
	|				/ СтоимостьОС.Стоимость КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|
	|	СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|	* ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ КАК ЧИСЛО(31, 10)) 
	|				/ СтоимостьОС.СтоимостьРегл КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	СтоимостьОС.ПриростСтоимости
	|	* ВЫБОР КОГДА СтоимостьОС.Стоимость ЕСТЬ NULL ИЛИ СтоимостьОС.Стоимость = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияУУ КАК ЧИСЛО(31, 10)) 
	|				/ СтоимостьОС.Стоимость КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	СтоимостьОС.ПриростСтоимостиРегл
	|	* ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ КАК ЧИСЛО(31, 10)) 
	|				/ СтоимостьОС.СтоимостьРегл КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	0 КАК ПредварительнаяСтоимость,
	|	0 КАК ПредварительнаяСтоимостьРегл,
	|	0 КАК ЗалоговаяСтоимость,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.Стоимость, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияУУ КАК ЧИСЛО(31, 10)) 
	|						/ СтоимостьОС.Стоимость КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписания,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ КАК ЧИСЛО(31, 10)) 
	|						/ СтоимостьОС.СтоимостьРегл КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияБУ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ КАК ЧИСЛО(31, 10)) 
	|						/ СтоимостьОС.СтоимостьЦФ КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияЦФ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияНУ - ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ КАК ЧИСЛО(31, 10)) 
	|						/ СтоимостьОС.СтоимостьНУ КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияНУ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ КАК ЧИСЛО(31, 10)) 
	|						/ СтоимостьОС.СтоимостьНУЦФ КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияНУЦФ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияПР - ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР КАК ЧИСЛО(31, 10)) 
	|						/ СтоимостьОС.СтоимостьПР КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияПР,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР КАК ЧИСЛО(31, 10)) 
	|						/ СтоимостьОС.СтоимостьПРЦФ КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияПРЦФ,
	|
	|	ТаблицаОС.Местонахождение             КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета      КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                   КАК Арендатор,
	|	ТаблицаОС.НачислятьИзнос              КАК НачислятьИзнос,
	|	ТаблицаОС.СтатьяДоходов               КАК СтатьяДоходов,
	|	ТаблицаОС.АналитикаДоходов            КАК АналитикаДоходов,
	|	
	|	ТаблицаОС.ИдентификаторСтроки         КАК ИдентификаторСтроки
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьОС
	|		ПО СтоимостьОС.Ссылка = ТаблицаОС.Ссылка
	|			И СтоимостьОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство 
	|
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втСписаниеАмортизацииОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Полное списание амортизации
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка                          КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство                КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Местонахождение                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	ТаблицаОС.НачислятьИзнос                  КАК НачислятьИзнос,
	|	
	|	ТаблицаОС.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|
	|	АмортизацияОС.Амортизация                 КАК Амортизация,
	|	АмортизацияОС.АмортизацияРегл             КАК АмортизацияРегл,
	|	АмортизацияОС.АмортизацияНУ               КАК АмортизацияНУ,
	|	АмортизацияОС.АмортизацияПР               КАК АмортизацияПР,
	|	АмортизацияОС.АмортизацияВР               КАК АмортизацияВР,
	|	АмортизацияОС.АмортизацияЦФ               КАК АмортизацияЦФ,
	|	АмортизацияОС.АмортизацияНУЦФ             КАК АмортизацияНУЦФ,
	|	АмортизацияОС.АмортизацияПРЦФ             КАК АмортизацияПРЦФ,
	|	АмортизацияОС.АмортизацияВРЦФ             КАК АмортизацияВРЦФ,
	|	АмортизацияОС.РезервПереоценкиАмортизации     КАК РезервПереоценкиАмортизации,
	|	АмортизацияОС.РезервПереоценкиАмортизацииРегл КАК РезервПереоценкиАмортизацииРегл
	|
	|ПОМЕСТИТЬ втСписаниеАмортизацииОС
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияОС
	|		ПО АмортизацияОС.Ссылка = ТаблицаОС.Ссылка
	|			И АмортизацияОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Частичное списание амортизации
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                    КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство                КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Местонахождение                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	ТаблицаОС.НачислятьИзнос                  КАК НачислятьИзнос,
	|	
	|	ТаблицаОС.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|
	// Амортизация
	|	ВЫБОР
	|		КОГДА АмортизацияОС.Амортизация = ЕСТЬNULL(СтоимостьОС.Стоимость, 0)
	|			ТОГДА СписаниеСтоимостиОС.Стоимость
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * СписаниеСтоимостиОС.ДоляСписания КАК ЧИСЛО(31,2))     
	|	КОНЕЦ КАК Амортизация,
	|
	// АмортизацияРегл
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияРегл = ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьРегл
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * СписаниеСтоимостиОС.ДоляСписанияБУ КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	// АмортизацияНУ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияНУ = ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьНУ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУ * СписаниеСтоимостиОС.ДоляСписанияНУ КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияНУ,
	|
	// АмортизацияПР
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияПР = ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьПР
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияПР * СписаниеСтоимостиОС.ДоляСписанияПР КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияПР,
	|
	// АмортизацияВР
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияРегл = ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьРегл
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * СписаниеСтоимостиОС.ДоляСписанияБУ КАК ЧИСЛО(31,2))
	|	КОНЕЦ
	|		- ВЫБОР
	|				КОГДА АмортизацияОС.АмортизацияНУ = ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0)
	|					ТОГДА СписаниеСтоимостиОС.СтоимостьНУ
	|				ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУ * СписаниеСтоимостиОС.ДоляСписанияНУ КАК ЧИСЛО(31,2))
	|			КОНЕЦ
	|		- ВЫБОР
	|				КОГДА АмортизацияОС.АмортизацияПР = ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0)
	|					ТОГДА СписаниеСтоимостиОС.СтоимостьПР
	|				ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияПР * СписаниеСтоимостиОС.ДоляСписанияПР КАК ЧИСЛО(31,2))
	|			КОНЕЦ КАК АмортизацияВР,
	|
	// АмортизацияЦФ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьЦФ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияЦФ  * СписаниеСтоимостиОС.ДоляСписанияЦФ  КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияЦФ,
	|
	// АмортизацияНУЦФ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьЦФ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУЦФ * СписаниеСтоимостиОС.ДоляСписанияНУЦФ  КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияНУЦФ,
	|
	// АмортизацияПРЦФ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияПРЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьПРЦФ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияПРЦФ * СписаниеСтоимостиОС.ДоляСписанияПРЦФ  КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|
	// АмортизацияВРЦФ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьЦФ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияЦФ  * СписаниеСтоимостиОС.ДоляСписанияЦФ  КАК ЧИСЛО(31,2))
	|	КОНЕЦ
	|		- ВЫБОР
	|				КОГДА АмортизацияОС.АмортизацияЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0)
	|					ТОГДА СписаниеСтоимостиОС.СтоимостьЦФ
	|				ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУЦФ * СписаниеСтоимостиОС.ДоляСписанияНУЦФ  КАК ЧИСЛО(31,2))
	|			КОНЕЦ
	|		- ВЫБОР
	|				КОГДА АмортизацияОС.АмортизацияПРЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0)
	|					ТОГДА СписаниеСтоимостиОС.СтоимостьПРЦФ
	|				ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияПРЦФ * СписаниеСтоимостиОС.ДоляСписанияПРЦФ  КАК ЧИСЛО(31,2))
	|			КОНЕЦ КАК АмортизацияВРЦФ,
	|
	|	ВЫРАЗИТЬ(АмортизацияОС.РезервПереоценкиАмортизации * СписаниеСтоимостиОС.ДоляСписания КАК ЧИСЛО(31,2)) КАК РезервПереоценкиАмортизации,
	|	ВЫРАЗИТЬ(АмортизацияОС.РезервПереоценкиАмортизацииРегл * СписаниеСтоимостиОС.ДоляСписанияБУ КАК ЧИСЛО(31,2)) КАК РезервПереоценкиАмортизацииРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка  
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияОС
	|		ПО АмортизацияОС.Ссылка = ТаблицаОС.Ссылка
	|			И АмортизацияОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСписаниеСтоимостиОС КАК СписаниеСтоимостиОС
	|		ПО СписаниеСтоимостиОС.Ссылка = ТаблицаОС.Ссылка
	|			И СписаниеСтоимостиОС.ОсновноеСредство = ТаблицаОС.ОсновноеСредство 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьОС
	|		ПО СтоимостьОС.Ссылка = ТаблицаОС.Ссылка
	|			И СтоимостьОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтСписаниеОбесцененияОС(ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втСписаниеОбесцененияОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"// Полное списание обесценения ОС.
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                    КАК Ссылка,
	|	ЕСТЬNULL(СтрокаВладельца.ОсновноеСредство, ТаблицаОС.ОсновноеСредство) КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Местонахождение                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	
	|	ТаблицаОС.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|	
	|	ОбесценениеОС.ЕГДС                        КАК ЕГДС,
	|
	|	ОбесценениеОС.ОбесценениеУпр              КАК ОбесценениеУпр,
	|	ОбесценениеОС.ОбесценениеРегл             КАК ОбесценениеРегл
	|
	|ПОМЕСТИТЬ втСписаниеОбесцененияОС
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО СтрокаВладельца.Ссылка = ТаблицаОС.Ссылка
	|			И СтрокаВладельца.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
	|			И СтрокаВладельца.ОсновноеСредство.ТипОС В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС)) 
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОбесценениеВНА КАК ОбесценениеОС
	|		ПО ОбесценениеОС.Ссылка = ТаблицаОС.Ссылка
	|			И ОбесценениеОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Частичное списание обесценения ОС.
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                    КАК Ссылка,
	|	ЕСТЬNULL(СтрокаВладельца.ОсновноеСредство, ТаблицаОС.ОсновноеСредство) КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Местонахождение                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	
	|	ТаблицаОС.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|	
	|	ОбесценениеОС.ЕГДС                        КАК ЕГДС,
	|
	|	ОбесценениеОС.ОбесценениеУпр 
	|		* втСписаниеСтоимостиОС.ДоляСписания    КАК ОбесценениеУпр,
	|
	|	ОбесценениеОС.ОбесценениеРегл 
	|		* втСписаниеСтоимостиОС.ДоляСписанияБУ  КАК ОбесценениеРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО СтрокаВладельца.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
	|			И СтрокаВладельца.ОсновноеСредство.ТипОС В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС)) 
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОбесценениеВНА КАК ОбесценениеОС
	|		ПО ОбесценениеОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|			И ОбесценениеОС.Ссылка = ТаблицаОС.Ссылка
	|		
	|			ЛЕВОЕ СОЕДИНЕНИЕ втСписаниеСтоимостиОС КАК втСписаниеСтоимостиОС
	|			ПО ОбесценениеОС.ОбъектУчета  = втСписаниеСтоимостиОС.ОсновноеСредство
	|				И втСписаниеСтоимостиОС.Ссылка = ОбесценениеОС.Ссылка
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Объединяет в отчете подчиненные ячейки.
// Используется в отчетах, которые вертикально выводят показатели БУ, НУ, ПУ, ВП, УУ.
//
// Параметры:
//  ТабДок					 - ТабличныйДокумент - Табличный документ отчета.
//  СписокГруппЯчеек		 - Массив			 - Список групп ячеек.
//  СписокПодчиненныхЯчеек	 - Массив			 - Список ячеек, которые будут объединены с группой ячеек.
//
Процедура ОбъединитьПодчиненныеЯчейки(ТабДок, СписокГруппЯчеек, СписокПодчиненныхЯчеек) Экспорт
	
	ШапкаНайдена = Ложь;
		
	Для индСтр = 1 По ТабДок.ВысотаТаблицы Цикл
		
		Для КолонкаНачалаШапки = 1 По ТабДок.ШиринаТаблицы Цикл
			
			ОбластьЯчейки = ТабДок.Область(индСтр, КолонкаНачалаШапки);
			ШапкаНайдена = СписокГруппЯчеек.Найти(ОбластьЯчейки.Текст) <> Неопределено;
			Если ШапкаНайдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		Если ШапкаНайдена Тогда
			
			Для индКол = КолонкаНачалаШапки По ТабДок.ШиринаТаблицы Цикл
				
				Смещение = 0;
				
				Для Сч = 0 По 5 Цикл
					
					ОбластьЯчейки = ТабДок.Область(индСтр + Сч, индКол);
					
					Если СписокГруппЯчеек.Найти(ОбластьЯчейки.Текст) <> Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					Смещение = Смещение + 1;
					
				КонецЦикла;
				
				ОбластьЯчейки = ТабДок.Область(
									индСтр + Смещение, 
									индКол, 
									индСтр + Смещение, 
									индКол);
									
				ТекстЗаголовка = ОбластьЯчейки.Текст;
				
				ВысотаШапки = 0;
				Для Индекс = 1 По 10 Цикл
					
					ОбластьЯчейки = ТабДок.Область(
											индСтр+Индекс+Смещение, 
											индКол, 
											индСтр+Индекс+Смещение, 
											индКол);
											
					СледующаяЯчейка = ОбластьЯчейки.Текст;
					
					Если СписокПодчиненныхЯчеек.Найти(СледующаяЯчейка) = Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					ВысотаШапки = ВысотаШапки + 1;
					
				КонецЦикла;
				
				ОбъединяемаяОбласть = ТабДок.Область(индСтр+Смещение, индКол, индСтр + ВысотаШапки + Смещение, индКол);
				ОбъединяемаяОбласть.Объединить();
				ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
				ОбъединяемаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
			КонецЦикла; 
				
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что отчет формируется начиная с даты начала учета версии 2.4.
//
// Параметры:
//  НачалоПериода	 - Дата - Начало периода отчета.
//  ОкончаниеПериода - Дата - Окончание периода отчета.
//  ШаблонСообщения	 - Строка - Шаблон сообщения об ошибке.
//  Отказ			 - Булево - Признак отказа.
// 
// Возвращаемое значение:
//  Булево - Ложь, если отчет формируется до даты начала учета версии 2.4.
//
Функция ПроверитьПериодОтчетаВерсии24(НачалоПериода, ОкончаниеПериода, ШаблонСообщения, Отказ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаНачалаУчета = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
	
	Если ЗначениеЗаполнено(НачалоПериода)
			И НачалоПериода < ДатаНачалаУчета
		ИЛИ ЗначениеЗаполнено(ОкончаниеПериода)
			И ОкончаниеПериода < ДатаНачалаУчета Тогда
			
		Отказ = Истина;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции
 
#КонецОбласти

#Область ТекстыЗапросов

// Формирует текст запроса таблицы ВТ_СтоимостьВНА.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  Запрос - Запрос -
//  ИмяТаблицы - Неопределено - 
Процедура ТекстЗапросаПустаяТаблицаСтоимостьВНА(Запрос, ТекстыЗапроса, ИмяТаблицы = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВТ_СтоимостьВНА";
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено
		И Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL КАК Ссылка,
	|	NULL КАК Дата,
	|	NULL КАК Организация,
	|	NULL КАК ОбъектУчета,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьНУ,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьВР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьНУЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК СтоимостьВРЦФ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	0 КАК ПредварительнаяСтоимость,
	|	0 КАК ПредварительнаяСтоимостьРегл,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|	0 КАК ДоляЦФБУ,
	|	0 КАК ДоляЦФНУ,
	|
	|	"""" КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВТ_АмортизацияВНА.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  Запрос - Запрос -
//  ИмяТаблицы - Строка, Неопределено - 
Процедура ТекстЗапросаПустаяТаблицаАмортизацияВНА(Запрос, ТекстыЗапроса, ИмяТаблицы = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВТ_АмортизацияВНА";
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено
		И Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL КАК Ссылка,
	|	NULL КАК Дата,
	|	NULL КАК Организация,
	|	NULL КАК ОбъектУчета,
	|
	|	0 КАК Амортизация,
	|	0 КАК АмортизацияРегл,
	|	0 КАК АмортизацияНУ,
	|	0 КАК АмортизацияПР,
	|	0 КАК АмортизацияВР,
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияНУЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|	0 КАК АмортизацияВРЦФ,
	|
	|	0 КАК РезервПереоценкиАмортизации,
	|	0 КАК РезервПереоценкиАмортизацииРегл,
	|	ЛОЖЬ КАК НачислятьИзнос
	|
	|ПОМЕСТИТЬ ВТ_АмортизацияВНА";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтСтоимостьВНАСгруппированная.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаВтСтоимостьВНАСгруппированная(Запрос, ТекстыЗапроса) Экспорт

	ИмяТаблицы = "ВтСтоимостьВНАСгруппированная";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаПустаяТаблицаСтоимостьВНА(Запрос, ТекстыЗапроса);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(СтоимостьВНА.Стоимость)          КАК Стоимость,
	|	СУММА(СтоимостьВНА.СтоимостьРегл)      КАК СтоимостьРегл,
	|	СУММА(СтоимостьВНА.СтоимостьНУ)        КАК СтоимостьНУ,
	|	СУММА(СтоимостьВНА.СтоимостьПР)        КАК СтоимостьПР,
	|	СУММА(СтоимостьВНА.СтоимостьВР)        КАК СтоимостьВР,
	|	СУММА(СтоимостьВНА.СтоимостьЦФ)        КАК СтоимостьЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьНУЦФ)      КАК СтоимостьНУЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьПРЦФ)      КАК СтоимостьПРЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьВРЦФ)      КАК СтоимостьВРЦФ
	|ПОМЕСТИТЬ ВтСтоимостьВНАСгруппированная
	|ИЗ
	|	ВТ_СтоимостьВНА КАК СтоимостьВНА
	|ГДЕ
	|	СтоимостьВНА.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтАмортизацияВНАСгруппированная.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаВтАмортизацияВНАСгруппированная(Запрос, ТекстыЗапроса) Экспорт

	ИмяТаблицы = "ВтАмортизацияВНАСгруппированная";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаПустаяТаблицаАмортизацияВНА(Запрос, ТекстыЗапроса);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(АмортизацияВНА.Амортизация)          КАК Амортизация,
	|	СУММА(АмортизацияВНА.АмортизацияРегл)      КАК АмортизацияРегл,
	|	СУММА(АмортизацияВНА.АмортизацияНУ)        КАК АмортизацияНУ,
	|	СУММА(АмортизацияВНА.АмортизацияПР)        КАК АмортизацияПР,
	|	СУММА(АмортизацияВНА.АмортизацияВР)        КАК АмортизацияВР,
	|	СУММА(АмортизацияВНА.АмортизацияЦФ)        КАК АмортизацияЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияНУЦФ)      КАК АмортизацияНУЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияПРЦФ)      КАК АмортизацияПРЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияВРЦФ)      КАК АмортизацияВРЦФ
	|ПОМЕСТИТЬ ВтАмортизацияВНАСгруппированная
	|ИЗ
	|	ВТ_АмортизацияВНА КАК АмортизацияВНА
	|ГДЕ
	|	АмортизацияВНА.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтРасчетРасходов.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаПустаяВтРасчетРасходов(Запрос, ТекстыЗапроса) Экспорт

	ИмяТаблицы = "ВтРасчетРасходов";
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено
		И Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрочиеРасходы.СтатьяРасходов             КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов          КАК АналитикаРасходов,
	|	ПрочиеРасходы.Подразделение              КАК Подразделение,
	|	ПрочиеРасходы.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	0                                        КАК Сумма,
	|	0                                        КАК СуммаБезНДС,
	|	0                                        КАК СуммаУпр,
	|	0                                        КАК СуммаРегл,
	|	0                                        КАК ПостояннаяРазница,
	|	0                                        КАК ВременнаяРазница,
	|	0                                        КАК СуммаНДД,
	|	0                                        КАК НомерСтроки,
	|	ПрочиеРасходы.Регистратор                КАК Ссылка,
	|	""""                                     КАК ИдентификаторСтроки,
	|	""""                                     КАК ИдентификаторСтрокиБУ,
	|	""""                                     КАК ИдентификаторСтрокиНУ,
	|	НЕОПРЕДЕЛЕНО                             КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ ВтРасчетРасходов
	| 
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|
	|ГДЕ
	|	ЛОЖЬ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтСписокОС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//	ДопПоля - Строка -
Процедура ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ДопПоля = "") Экспорт
	
	ИмяТаблицы = "ВтСписокОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|	,&ДополнительныеПоля
	|
	|ПОМЕСТИТЬ ВтСписокОС
	|
	|ИЗ
	|	ДанныеДокументаТаблицаОС КАК ТаблицаОС
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|";
	
	Если ЗначениеЗаполнено(ДопПоля) Тогда
		
		ТекстДополнительныеПоля = "";
		ЧастьЗапросаКак = " КАК "; // @query-part
		СписокПолей = СтрРазделить(ДопПоля, ",");
		Для каждого ИмяПоля Из СписокПолей Цикл
			ТекстДополнительныеПоля = ТекстДополнительныеПоля + "
			|	, " + "ДанныеДокумента" + "." + ИмяПоля + ЧастьЗапросаКак + ИмяПоля;
		КонецЦикла; 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДополнительныеПоля", ТекстДополнительныеПоля); 
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДополнительныеПоля", "");
	КонецЕсли; 

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаТаблицаОС", ИмяТаблицыОбъектовУчета);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПараметрыУчетаОС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка - Тексты запроса.
//  ИмяТаблицыОбъектовУчета - Строка - Полное имя документа.
//  ИмяВременнойТаблицы - Строка, Неопределено - Имя временной таблицы.
Процедура ТекстЗапросаТаблицаВтПараметрыУчетаОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ИмяВременнойТаблицы = Неопределено) Экспорт

	ИмяТаблицы = ?(ИмяВременнойТаблицы <> Неопределено, ИмяВременнойТаблицы, "ВтПараметрыУчетаОС");
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтПервоначальныеСведенияОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	ТекстЗапросаТаблицаВтПорядокУчетаОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	ТекстЗапросаТаблицаВтМестонахождениеОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка                            КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство                  КАК ОсновноеСредство,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета         КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности        КАК НаправлениеДеятельности,
	|	ПорядокУчета.ПоказательНаработки            КАК ПоказательНаработки,
	|	ПорядокУчета.ОбъемНаработки                 КАК ОбъемНаработки,
	|
	|	МестонахождениеОС.Организация               КАК Организация,
	|	МестонахождениеОС.Арендатор                 КАК Арендатор,
	|	МестонахождениеОС.МОЛ                       КАК МОЛ,
	|	МестонахождениеОС.Местонахождение           КАК Местонахождение,
	|	МестонахождениеОС.ПодразделениеАрендатора   КАК ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора             КАК МОЛАрендатора,
	|
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВРеглУчете,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВУпрУчете
	|	
	|ПОМЕСТИТЬ ВтПараметрыУчетаОС
	|
	|ИЗ
	|	Документ.ПеремещениеОС2_4.ОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПервоначальныеСведенияОС КАК ПервоначальныеСведения
	|		ПО ТаблицаОС.Ссылка = ПервоначальныеСведения.Ссылка
	|			И ТаблицаОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаОС КАК ПорядокУчета
	|		ПО ТаблицаОС.Ссылка = ПорядокУчета.Ссылка
	|			И ТаблицаОС.ОсновноеСредство = ПорядокУчета.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождениеОС КАК МестонахождениеОС
	|		ПО ТаблицаОС.Ссылка = МестонахождениеОС.Ссылка
	|			И ТаблицаОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4.ОС", ИмяТаблицыОбъектовУчета);
	
	Если ИмяВременнойТаблицы <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтПараметрыУчетаОС", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПервоначальныеСведенияОС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//  ИмяТаблицы - Строка -
//	УчестьИсправления - Булево -
Процедура ТекстЗапросаТаблицаВтПервоначальныеСведенияОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ИмяТаблицы = "", УчестьИсправления = Ложь) Экспорт

	Если ИмяТаблицы = "" Тогда
		ИмяТаблицы = "втПервоначальныеСведенияОС";
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПервоначальныеСведенияОС", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса,, УчестьИсправления);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПорядокУчетаОС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//  ИмяТаблицы - Строка -
//	УчестьИсправления - Булево -
Процедура ТекстЗапросаТаблицаВтПорядокУчетаОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ИмяТаблицы = "", УчестьИсправления = Ложь) Экспорт

	Если ИмяТаблицы = "" Тогда
		ИмяТаблицы = "втПорядокУчетаОС";
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПорядокУчетаОС", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса,, УчестьИсправления);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПорядокУчетаОСБУ.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//  ИмяТаблицы - Строка -
//	УчестьИсправления - Булево -
Процедура ТекстЗапросаТаблицаВтПорядокУчетаОСБУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ИмяТаблицы = "", УчестьИсправления = Ложь) Экспорт

	Если ИмяТаблицы = "" Тогда
		ИмяТаблицы = "втПорядокУчетаОСБУ";
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПорядокУчетаОСБУ", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса,, УчестьИсправления);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПараметрыАмортизацииОСБУ.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//  ИмяТаблицы - Строка -
//	УчестьИсправления - Булево -
Процедура ТекстЗапросаТаблицаВтПараметрыАмортизацииОСБУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ИмяТаблицы = "", УчестьИсправления = Ложь) Экспорт

	Если ИмяТаблицы = "" Тогда
		ИмяТаблицы = "втПараметрыАмортизацииОСБУ";
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПараметрыАмортизацииОСБУ", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса,, УчестьИсправления);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПорядокУчетаОСУУ.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//  ИмяТаблицы - Строка -
//	УчестьИсправления - Булево -
Процедура ТекстЗапросаТаблицаВтПорядокУчетаОСУУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ИмяТаблицы = "", УчестьИсправления = Ложь) Экспорт

	Если ИмяТаблицы = "" Тогда
		ИмяТаблицы = "втПорядокУчетаОСУУ";
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);

	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПорядокУчетаОСУУ", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса,, УчестьИсправления);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПараметрыАмортизацииОСУУ.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//  ИмяТаблицы - Строка -
//	УчестьИсправления - Булево -
Процедура ТекстЗапросаТаблицаВтПараметрыАмортизацииОСУУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ИмяТаблицы = "", УчестьИсправления = Ложь) Экспорт

	Если ИмяТаблицы = "" Тогда
		ИмяТаблицы = "втПараметрыАмортизацииОСУУ";
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПараметрыАмортизацииОСУУ", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса,, УчестьИсправления);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтМестонахождениеОС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтМестонахождениеОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС") Экспорт

	ИмяТаблицы = "втМестонахождениеОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"МестонахождениеОС", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтАрендованныеОС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтАрендованныеОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС") Экспорт

	ИмяТаблицы = "втАрендованныеОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"АрендованныеОС", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПереданныеВАрендуОС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//  ИмяТаблицы - Строка -
//	УчестьИсправления - Булево -
Процедура ТекстЗапросаТаблицаВтПереданныеВАрендуОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС", ИмяТаблицы = "", УчестьИсправления = Ложь) Экспорт

	Если ИмяТаблицы = "" Тогда
		ИмяТаблицы = "втПереданныеВАрендуОС";
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПереданныеВАрендуОС", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса,, УчестьИсправления);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтУсловияДоговоровАренды.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаТаблицаВтУсловияДоговоровАренды(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втУсловияДоговоровАренды";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"УсловияДоговоровАренды", ИмяТаблицы, "ДанныеДокументаРеквизиты", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтНаработкиОбъектовЭксплуатации.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтНаработкиОбъектовЭксплуатации(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС") Экспорт

	ИмяТаблицы = "ВтНаработкиОбъектовЭксплуатации";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтПорядокУчетаОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ) КАК Период,
	|	ВтПорядокУчетаОС.ОсновноеСредство КАК ОбъектЭксплуатации,
	|	ВтПорядокУчетаОС.ПоказательНаработки КАК ПоказательНаработки
	|
	|ПОМЕСТИТЬ ВтПоказателиНаработки
	|
	|ИЗ
	|	ВтПорядокУчетаОС КАК ВтПорядокУчетаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ВтПорядокУчетаОС.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектЭксплуатации,
	|	ПоказательНаработки,
	|	Период
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"НаработкиОбъектовЭксплуатации", ИмяТаблицы, "ВтПоказателиНаработки", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтУзлыКомпонентыАмортизации.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка -
//
Процедура ТекстЗапросаТаблицаВтУзлыКомпонентыАмортизации(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС") Экспорт
	
	ИмяТаблицы = "ВтУзлыКомпонентыАмортизации";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтУзлыКомпонентыАмортизацииЗаВесьПериод(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"УзлыКомпонентыАмортизации", ИмяТаблицы, "ВтУзлыКомпонентыАмортизацииЗаВесьПериод", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПервоначальныеСведенияНМА.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтПервоначальныеСведенияНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт

	ИмяТаблицы = "втПервоначальныеСведенияНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПервоначальныеСведенияНМА", ИмяТаблицы, "ВтСписокНМА", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПараметрыУчетаНМА.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
//  ИмяВременнойТаблицы - Неопределено - Имя временной таблицы
Процедура ТекстЗапросаТаблицаВтПараметрыУчетаНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА", ИмяВременнойТаблицы = Неопределено) Экспорт

	ИмяТаблицы = ?(ИмяВременнойТаблицы <> Неопределено, ИмяВременнойТаблицы, "ВтПараметрыУчетаНМА");
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	ТекстЗапросаТаблицаВтПервоначальныеСведенияНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	ТекстЗапросаТаблицаВтПорядокУчетаНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	ТекстЗапросаТаблицаВтМестоУчетаНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНМА.Ссылка                     КАК Ссылка,
	|	ТаблицаНМА.НематериальныйАктив        КАК НематериальныйАктив,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	ПорядокУчета.ОбъемНаработки           КАК ОбъемНаработки,
	|
	|	МестоУчета.Организация                КАК Организация,
	|	МестоУчета.Подразделение              КАК Подразделение,
	|
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВРеглУчете,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВУпрУчете
	|
	|ПОМЕСТИТЬ ВтПараметрыУчетаНМА
	|
	|ИЗ
	|	ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПервоначальныеСведенияНМА КАК ПервоначальныеСведения
	|		ПО ПервоначальныеСведения.Ссылка = ТаблицаНМА.Ссылка
	|			И ПервоначальныеСведения.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПорядокУчетаНМА КАК ПорядокУчета
	|		ПО ПорядокУчета.Ссылка = ТаблицаНМА.Ссылка
	|			И ПорядокУчета.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтМестоУчетаНМА КАК МестоУчета
	|		ПО МестоУчета.Ссылка = ТаблицаНМА.Ссылка
	|			И МестоУчета.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НематериальныйАктив
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеНМА2_4.НМА", ИмяТаблицыОбъектовУчета);
	
	Если ИмяВременнойТаблицы <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтПараметрыУчетаНМА", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПорядокУчетаНМА.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтПорядокУчетаНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт

	ИмяТаблицы = "втПорядокУчетаНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПорядокУчетаНМА", ИмяТаблицы, "ВтСписокНМА", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПорядокУчетаНМАУУ.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтПорядокУчетаНМАУУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт

	ИмяТаблицы = "втПорядокУчетаНМАУУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПорядокУчетаНМАУУ", ИмяТаблицы, "ВтСписокНМА", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПорядокУчетаНМАБУ.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтПорядокУчетаНМАБУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт

	ИмяТаблицы = "втПорядокУчетаНМАБУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПорядокУчетаНМАБУ", ИмяТаблицы, "ВтСписокНМА", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПараметрыАмортизацииНМАБУ.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтПараметрыАмортизацииНМАБУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт

	ИмяТаблицы = "втПараметрыАмортизацииНМАБУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПараметрыАмортизацииНМАБУ", ИмяТаблицы, "ВтСписокНМА", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтПараметрыАмортизацииНМАУУ.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтПараметрыАмортизацииНМАУУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт

	ИмяТаблицы = "втПараметрыАмортизацииНМАУУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПараметрыАмортизацииНМАУУ", ИмяТаблицы, "ВтСписокНМА", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтМестоУчетаНМА.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтМестоУчетаНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт

	ИмяТаблицы = "втМестоУчетаНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"МестоУчетаНМА", ИмяТаблицы, "ВтСписокНМА", ТекстыЗапроса);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтВыработкаНМА.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов
Процедура ТекстЗапросаТаблицаВтВыработкаНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт
	
	ИмяТаблицы = "втВыработкаНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втСписокНМА.Ссылка КАК Ссылка,
	|	ВыработкаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|
	|	СУММА(ВыработкаНМА.Количество) КАК Количество
	|
	|ПОМЕСТИТЬ втВыработкаНМА
	|
	|ИЗ
	|	втСписокНМА КАК втСписокНМА
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаНМА КАК ВыработкаНМА
	|		ПО ВыработкаНМА.Организация = втСписокНМА.Организация
	|			И ВыработкаНМА.НематериальныйАктив = втСписокНМА.НематериальныйАктив
	|				И ВыработкаНМА.Период <= КОНЕЦПЕРИОДА(втСписокНМА.Период, МЕСЯЦ)
	|				И ВыработкаНМА.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	втСписокНМА.Ссылка,
	|	ВыработкаНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НематериальныйАктив
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтСписокНМА.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка - Имя таблицы объектов учета.
Процедура ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаНМА") Экспорт
	
	ИмяТаблицы = "втСписокНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|
	|ПОМЕСТИТЬ втСписокНМА
	|
	|ИЗ
	|	ДанныеДокументаТаблицаНМА КАК ТаблицаНМА
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаНМА.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	Организация
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаТаблицаНМА", ИмяТаблицыОбъектовУчета);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтУзлыКомпонентыАмортизацииЗаВесьПериод.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка -
//
Процедура ТекстЗапросаТаблицаВтУзлыКомпонентыАмортизацииЗаВесьПериод(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС") Экспорт
	
	ИмяТаблицы = "ВтУзлыКомпонентыАмортизацииЗаВесьПериод";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
	|
	|ПОМЕСТИТЬ ВтУзлыКомпонентыАмортизацииЗаВесьПериод
	|
	|ИЗ
	|	ДанныеДокументаТаблицаОС КАК ТаблицаОС
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпоненты
	|		ПО УзлыКомпоненты.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УзелКомпонент
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаТаблицаОС", ИмяТаблицыОбъектовУчета);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);

КонецПроцедуры

// Формирует текст запроса таблицы ВтРасширеннаяТаблицаОС.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаТаблицаВтРасширеннаяТаблицаОС(ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтРасширеннаяТаблицаОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяРегистра, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтУзлыКомпонентыАмортизации(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка              КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство    КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка) КАК ОСВладелец,
	|	ТаблицаОС.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВтРасширеннаяТаблицаОС
	|
	|ИЗ
	|	ДанныеДокументаТаблицаОС КАК ТаблицаОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка              КАК Ссылка,
	|	УзлыКомпоненты.УзелКомпонент  КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство    КАК ОСВладелец,
	|	УзлыКомпоненты.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКомпонентыАмортизации КАК УзлыКомпоненты
	|		ПО УзлыКомпоненты.Ссылка = ТаблицаОС.Ссылка
	|			И УзлыКомпоненты.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеУзлов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|";	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтУчетнаяПолитикаФинансовогоУчета
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаТаблицаВтУчетнаяПолитикаФинансовогоУчета(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "ВтУчетнаяПолитикаФинансовогоУчета";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеИзмерений = Новый Структура;
	СоответствиеИзмерений.Вставить("Организация", "ГоловнаяОрганизация");
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"УчетнаяПолитикаФинансовогоУчета", ИмяТаблицы, "ДанныеДокументаРеквизиты", ТекстыЗапроса, СоответствиеИзмерений);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтНалогообложениеНДС
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка - 
// 	ИмяТаблицыОбъектовУчета - Строка -
Процедура ТекстЗапросаТаблицаВтНалогообложениеНДС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС") Экспорт

	ИмяТаблицы = "ВтНалогообложениеНДС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтПорядокУчетаОСБУ(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаОСБУ.Ссылка             КАК Ссылка,
	|	ПорядокУчетаОСБУ.ОсновноеСредство   КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.НалогообложениеНДС КАК НалогообложениеНДС
	|
	|ПОМЕСТИТЬ ВтНалогообложениеНДС
	|
	|ИЗ
	|	ВтПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы ВтСоставЕГДС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицыОбъектовУчета - Строка -
//
Процедура ТекстЗапросаТаблицаВтСоставЕГДС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета = "ДанныеДокументаТаблицаОС") Экспорт
	
	ИмяТаблицы = "ВтСоставЕГДС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяТаблицыОбъектовУчета);
	
	СоответствиеИзмерений = Новый Структура("ВнеоборотныйАктив", "ОсновноеСредство");
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"СоставЕГДС", ИмяТаблицы, "ВтСписокОС", ТекстыЗапроса, СоответствиеИзмерений);
	
КонецПроцедуры

// Формирует текст запроса таблицы втПустаяТаблицаОС.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтПустаяТаблицаОС(ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втПустаяТаблицаОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	NULL КАК Ссылка,
	|	NULL КАК ОсновноеСредство
	|
	|ПОМЕСТИТЬ втПустаяТаблицаОС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса, получающий срез последних регистра по документам.
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра, для которого необходимо получить срез последних.
//  ИмяТаблицыСрезПоследних - Строка - Имя временной таблицы, которая будет содержать срез последних.
//  ИмяТаблицыОбъектов - Строка - Имя временной таблицы, содержащей документы (обязательные поля: Регистратор, ОсновноеСредство, Дата).
//
// Возвращаемое значение:
// 	Строка - Текст запроса.
//
Функция ТекстЗапросаСрезПоследнихРегистраОС(ИмяРегистра, ИмяТаблицыСрезПоследних, ИмяТаблицыОбъектов) Экспорт

	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ЕстьОрганизация = Ложь;
	
	СписокПолей = Новый Массив;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		Если МетаданныеИзмерения.Имя = "Организация" Тогда
			ЕстьОрганизация = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Ресурсы Цикл
		ПутьКПолю = "	ТаблицаРегистра." + МетаданныеИзмерения.Имя;
		СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеИзмерения.Имя);
	КонецЦикла; 
	
	РазделительПолей = ",
	|	";
	ТекстПолей = СтрСоединить(СписокПолей, РазделительПолей);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втТаблицаОС.Регистратор КАК Регистратор,
	|	втТаблицаОС.Организация КАК Организация,
	|	втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(ТаблицаРегистра.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ИмяРегистра_Период
	|ИЗ
	|	ВТ_ТаблицаОС КАК втТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
	|		ПО ТаблицаРегистра.Организация = втТаблицаОС.Организация
	|			И ТаблицаРегистра.ОсновноеСредство = втТаблицаОС.ОсновноеСредство
	|			И ТаблицаРегистра.Период <= втТаблицаОС.Дата
	|			И ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|			И ТаблицаРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаОС.Регистратор,
	|	втТаблицаОС.Организация,
	|	втТаблицаОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистраПериод.Регистратор КАК Регистратор,
	|	ТаблицаРегистраПериод.Период КАК ПериодТаблицыРегистра,
	|	ТаблицаРегистраПериод.Организация КАК Организация,
	|	ТаблицаРегистраПериод.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(ТаблицаРегистра.Регистратор) КАК РегистраторТаблицыРегистра
	|ПОМЕСТИТЬ ВТ_ИмяРегистра_Регистратор
	|ИЗ
	|	ВТ_ИмяРегистра_Период КАК ТаблицаРегистраПериод
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
	|		ПО ТаблицаРегистраПериод.Организация = ТаблицаРегистра.Организация
	|			И ТаблицаРегистраПериод.ОсновноеСредство = ТаблицаРегистра.ОсновноеСредство
	|			И ТаблицаРегистраПериод.Период = ТаблицаРегистра.Период
	|			И ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|			И ТаблицаРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистраПериод.Регистратор,
	|	ТаблицаРегистраПериод.Период,
	|	ТаблицаРегистраПериод.Организация,
	|	ТаблицаРегистраПериод.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ПериодТаблицыРегистра,
	|	Организация,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистраРегистратор.Регистратор КАК Регистратор,
	|	ТаблицаРегистраРегистратор.ОсновноеСредство КАК ОсновноеСредство,
	|	&ТекстПолей
	|
	|ПОМЕСТИТЬ ВТ_СрезПоследнихРегистра
	|
	|ИЗ
	|	ВТ_ИмяРегистра_Регистратор КАК ТаблицаРегистраРегистратор
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
	|		ПО ТаблицаРегистра.Организация = ТаблицаРегистраРегистратор.Организация
	|			И ТаблицаРегистра.ОсновноеСредство = ТаблицаРегистраРегистратор.ОсновноеСредство
	|			И ТаблицаРегистра.Период = ТаблицаРегистраРегистратор.ПериодТаблицыРегистра
	|			И ТаблицаРегистра.Регистратор = ТаблицаРегистраРегистратор.РегистраторТаблицыРегистра
	|			И ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|			И ТаблицаРегистра.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОсновноеСредство";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ИмяРегистра", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ТаблицаОС", ИмяТаблицыОбъектов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПервоначальныеСведенияОС", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_СрезПоследнихРегистра", ИмяТаблицыСрезПоследних);
	
	Если НЕ ЕстьОрганизация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.Организация = втТаблицаОС.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистраПериод.Организация = ТаблицаРегистра.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.Организация = ТаблицаРегистраРегистратор.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втТаблицаОС.Организация", "НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистраПериод.Организация", "НЕОПРЕДЕЛЕНО");
	КонецЕсли; 
		
	Если НЕ РегистрПоддерживаетИсправление(ИмяРегистра) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)", "ИСТИНА");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗарегистрироватьПроблемуВыполненияРасчета(Операция, Период, Организация, ОписаниеПроблемы, ГруппаПроблем = "", Объект = Неопределено, Отказ = Ложь) Экспорт

	Отказ = Истина;
	
	ТекстОшибки = ?(
		ЗначениеЗаполнено(ОписаниеПроблемы), 
		ОписаниеПроблемы, 
		НСтр("ru = 'При выполнении операции зарегистрированы ошибки';
			|en = 'Errors are registered while executing the operation:'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		Операция,
		Организация,
		НачалоМесяца(Период));
		
	Если НЕ ЗначениеЗаполнено(ГруппаПроблем) Тогда
		ГруппаПроблем = НСтр("ru = 'При выполнении операции зарегистрированы ошибки';
							|en = 'Errors are registered while executing the operation:'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ГруппаПроблем,
		Перечисления.ВажностьПроблемыУчета.Ошибка,
		ТекстОшибки,
		Объект);
	
КонецПроцедуры

Процедура ЗарегистрироватьПредупреждениеВыполненияРасчета(ЭтапРасчета, Период, Организация, ОписаниеПредупреждения, ГруппаПредупреждений = "", Объект = Неопределено, Отказ = Ложь) Экспорт

	Отказ = Истина;
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		ЭтапРасчета,
		Организация,
		Период);
		
	Если НЕ ЗначениеЗаполнено(ГруппаПредупреждений) Тогда
		ГруппаПредупреждений = НСтр("ru = 'При выполнении операции возникли предупреждения';
									|en = 'Warnings occurred while executing the operation'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ГруппаПредупреждений,
		Перечисления.ВажностьПроблемыУчета.ПолезныйСовет,
		ОписаниеПредупреждения,
		Объект);
	
КонецПроцедуры

// Добавляет описание ошибки.
// 
// Параметры:
//  ОписаниеПроблемы - Строка -
//  Объект - Произвольный - Объект
//  Организация - СправочникСсылка.Организации - 
//  СписокОшибок - Массив -
Процедура ДобавитьОписаниеОшибки(ОписаниеПроблемы, Объект, Организация, СписокОшибок) Экспорт

	Если СписокОшибок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("ОписаниеПроблемы", ОписаниеПроблемы);
	ОписаниеОшибки.Вставить("Организация", Организация);
	ОписаниеОшибки.Вставить("Объект", Объект);
	
	СписокОшибок.Добавить(ОписаниеОшибки);
	
КонецПроцедуры
 
// Определяет возможность ведения раздельного учета ВНА.
//
// Возвращаемое значение:
//  Булево - Истина, если доступен раздельный учет ВНА.
//
Функция ВедетсяРегламентированныйУчетВНА() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("РегламентированныйУчетВНА");
	
КонецФункции
 
// Заполняет информацию о документе в другом учете.
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура - со свойствами:
// 	           * Ссылка - ДокументСсылка -
// 	           * ОтражатьВУпрУчете - Булево -
// 	           * ОтражатьВРеглУчете - Булево -
// 	           * ДокументВДругомУчете - ДокументСсылка -
// 	Элементы - ВсеЭлементыФормы:
//              * ИнформацияОДокументеВДругомУчете - ДекорацияФормы -  
//              * ДекорацияИнформацияОДокументеВДругомУчете - ДекорацияФормы -  
Процедура ЗаполнитьИнформациюОДокументеВДругомУчете(Объект, Элементы) Экспорт

	ЗаголовокНадписи = ИнформацияОДокументеВДругомУчете(Объект);
	
	Если ЗаголовокНадписи.Количество() <> 0 Тогда
		Элементы.ИнформацияОДокументеВДругомУчете.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.ДекорацияИнформацияОДокументеВДругомУчете.Видимость = Истина;
		Элементы.ИнформацияОДокументеВДругомУчете.Видимость = Истина;
	Иначе
		Элементы.ДекорацияИнформацияОДокументеВДругомУчете.Видимость = Ложь;
		Элементы.ИнформацияОДокументеВДругомУчете.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

// Описание
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура - со свойствами:
// 	           * Ссылка - ДокументСсылка -
// 	           * ОтражатьВУпрУчете - Булево -
// 	           * ОтражатьВРеглУчете - Булево -
// 	           * ДокументВДругомУчете - ДокументСсылка -
// 	ПоказатьИнформациюЕслиНеСоздан - Булево - 
// Возвращаемое значение:
// 	Массив - Описание
Функция ИнформацияОДокументеВДругомУчете(Объект, ПоказатьИнформациюЕслиНеСоздан = Истина) Экспорт

	ЗаголовокНадписи = Новый Массив;
	
	Если Объект.ОтражатьВУпрУчете 
		И Объект.ОтражатьВРеглУчете Тогда
		Возврат ЗаголовокНадписи;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ДокументВДругомУчете) Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									Объект.ДокументВДругомУчете, 
									"ОтражатьВРеглУчете,ОтражатьВУпрУчете,Проведен,ПометкаУдаления,Номер,Дата,Ссылка");
									
		Если НЕ РеквизитыДокумента.ПометкаУдаления Тогда
			ЗаголовокНадписи = ЗаголовокНадписиОДокументеВДругомУчете(РеквизитыДокумента);
		Иначе
			ЗаголовокНадписи = НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан);
		КонецЕсли; 
		
	Иначе
		
		ЗаголовокНадписи = НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан);
		
	КонецЕсли;
	
	Возврат ЗаголовокНадписи;
	
КонецФункции

Функция ПолучитьРегламентныйДокумент(СсылкаПроведен, СсылкаНеПроведен, СсылкаУдален, ДокументМенеджер) Экспорт

	Если НЕ ЗначениеЗаполнено(СсылкаПроведен)
		И НЕ ЗначениеЗаполнено(СсылкаНеПроведен)
		И НЕ ЗначениеЗаполнено(СсылкаУдален) Тогда
		
		ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаПроведен) Тогда
		
		ДокументОбъект = СсылкаПроведен.ПолучитьОбъект();
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаНеПроведен) Тогда
		
		ДокументОбъект = СсылкаНеПроведен.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
		
	Иначе
		
		ДокументОбъект = СсылкаУдален.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
		
	КонецЕсли; 

	Возврат ДокументОбъект;
	
КонецФункции

// Заполняет признаки отражения в учете.
// Используется в документах, которые не содержат выбор отражения в учете.
//
// Параметры:
//  Объект			 - ДокументОбъект	 - Документ, в котором нужно заполнить признаки отражения в учете.
//  СписокАктивов	 - Массив			 - Список внеоборотных активов.
//
Процедура ЗаполнитьОтражениеВУчете(Объект, СписокАктивов) Экспорт
	
	Объект.ОтражатьВУпрУчете = Ложь;
	Объект.ОтражатьВРеглУчете = Ложь;
	
	Если СписокАктивов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ПринятоКУчету.ОтражатьВУпрУчете) > 0, ЛОЖЬ) КАК ОтражатьВУпрУчете,
	|	ЕСТЬNULL(СУММА(ПринятоКУчету.ОтражатьВРеглУчете) > 0, ЛОЖЬ) КАК ОтражатьВРеглУчете
	|
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		0 КАК ОтражатьВРеглУчете,
	|		1 КАК ОтражатьВУпрУчете
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОС
	|	ГДЕ
	|		ПорядокУчетаОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|		И ПорядокУчетаОС.ОсновноеСредство В(&СписокАктивов)
	|		И ПорядокУчетаОС.Организация = &Организация
	|		И ПорядокУчетаОС.Регистратор <> &Регистратор
	|		И ПорядокУчетаОС.Период <= &Дата
	|		И ПорядокУчетаОС.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		1 КАК ОтражатьВРеглУчете,
	|		0 КАК ОтражатьВУпрУчете
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОС
	|	ГДЕ
	|		(ПорядокУчетаОС.СостояниеБУ В (
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету), 
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету))
	|
	|			ИЛИ ПорядокУчетаОС.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
	|
	|		И ПорядокУчетаОС.ОсновноеСредство В(&СписокАктивов)
	|		И ПорядокУчетаОС.Организация = &Организация
	|		И ПорядокУчетаОС.Регистратор <> &Регистратор
	|		И ПорядокУчетаОС.Период <= &Дата
	|		И ПорядокУчетаОС.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		0 КАК ОтражатьВРеглУчете,
	|		1 КАК ОтражатьВУпрУчете
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМА
	|	ГДЕ
	|		ПорядокУчетаНМА.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету)
	|		И ПорядокУчетаНМА.НематериальныйАктив В(&СписокАктивов)
	|		И ПорядокУчетаНМА.Организация = &Организация
	|		И ПорядокУчетаНМА.Регистратор <> &Регистратор
	|		И ПорядокУчетаНМА.Период <= &Дата
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		1 КАК ОтражатьВРеглУчете,
	|		0 КАК ОтражатьВУпрУчете
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаНМАБУ КАК ПорядокУчетаНМА
	|	ГДЕ
	|		(ПорядокУчетаНМА.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету)
	|			ИЛИ ПорядокУчетаНМА.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету))
	|
	|		И ПорядокУчетаНМА.НематериальныйАктив В(&СписокАктивов)
	|		И ПорядокУчетаНМА.Организация = &Организация
	|		И ПорядокУчетаНМА.Регистратор <> &Регистратор
	|		И ПорядокУчетаНМА.Период <= &Дата
	|
	|	) КАК ПринятоКУчету";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокАктивов", СписокАктивов);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата", ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление элементов, относящихся с целевому финансированию.
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - 
// 	Элементы - ВсеЭлементыФормы:
//				* ЦелевоеФинансированиеСубконто1 - ПолеФормы -  
//				* ЦелевоеФинансированиеСубконто2 - ПолеФормы -  
//				* ЦелевоеФинансированиеСубконто3 - ПолеФормы -  
Процедура УстановитьУсловноеОформлениеЦелевогоФинансирования(УсловноеОформление, Элементы) Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто3.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто3.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

Функция ФиксированныйМассивВСписок(ФиксированныйМассив) Экспорт

	Список = Новый СписокЗначений;
	Для каждого ЗначениеМассива Из ФиксированныйМассив Цикл
		Список.Добавить(ЗначениеМассива);
	КонецЦикла; 
	
	Возврат Список;

КонецФункции

// Описание
// 
// Параметры:
// 	ХозяйственныеОперацииИДокументы - См. ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы
Процедура ИнициализироватьХозяйственныеОперацииИДокументыВнеоборотныхАктивов(ХозяйственныеОперацииИДокументы) Экспорт

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВнутреннееПотребление.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВнутренниеПотребления";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'внутренние потребления';
												|en = 'inventory consumptions'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПриобретениеУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ЗакупкаУПоставщика";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'приобретение услуг и прочих активов';
												|en = 'Vendor invoice — Services and Assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РеализацияВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'реализация услуг и прочих активов';
												|en = 'Customer invoice — Services and Assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
КонецПроцедуры

Процедура ДобавитьРезультатПроверкиЗаполнения(Объект, ПредставлениеРеквизита, ИмяТЧ, НомерСтроки, ОбъектПроблемы) Экспорт

	Если НЕ Объект.ДополнительныеСвойства.Свойство("РезультатыПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения = Неопределено Тогда
		Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения = Новый Массив;
	КонецЕсли; 
	
	РезультатыПроверкиЗаполнения = Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения; // Массив -
	
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("Объект", ОбъектПроблемы);
	ПараметрыОшибки.Вставить("ПредставлениеРеквизита", ПредставлениеРеквизита);
	ПараметрыОшибки.Вставить("ИмяТЧ", ИмяТЧ);
	ПараметрыОшибки.Вставить("НомерСтроки", НомерСтроки);
	
	РезультатыПроверкиЗаполнения.Добавить(ПараметрыОшибки);
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствВНА24() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьВнеоборотныеАктивы2_2 = Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить();
	ИспользоватьВнеоборотныеАктивы2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
										
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ИспользоватьВнеоборотныеАктивы2_4;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеПараметровНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеПараметровОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_МодернизацияОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПеремещениеОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПодготовкаКПередачеОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуУзловКомпонентовАмортизации", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_УлучшениеНМА", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = 
		ИспользоватьВнеоборотныеАктивы2_2
		ИЛИ ИспользоватьВнеоборотныеАктивы2_4;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НематериальныеАктивы", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = 
		ИспользоватьВнеоборотныеАктивы2_2
		ИЛИ ИспользоватьВнеоборотныеАктивы2_4
		ИЛИ Константы.ИспользоватьУправлениеРемонтами.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ОбъектыЭксплуатации_Общие", ПараметрыНабора);
	
КонецПроцедуры

Процедура УстановитьЗначенияПараметровПроведенияПриПеремещении(Реквизиты, ЗначенияПараметровПроведения) Экспорт

	Если Реквизиты = Неопределено Тогда
		Возврат
	КонецЕсли; 
		
	// ИнформацияПоОтправителю
	ШаблонСтроки = "ru = 'Перемещение из ""%1""';
					|en = 'Transfer from ""%1""'"; // @НСтр
	Если Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс
		ИЛИ Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.Подразделение)
			ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.Организация) Тогда
			ИнформацияПоОтправителю = "";
		ИначеЕсли Реквизиты.Подразделение <> Реквизиты.ПодразделениеПолучатель Тогда
			ШаблонСтроки = "ru = 'Перемещение из организации ""%1"" и подразделения ""%2""';
							|en = 'Transfer from the ""%1"" company and the ""%2"" business unit'"; // @НСтр
			ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Организация, Реквизиты.Подразделение);
		Иначе
			ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Организация);
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
		ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Подразделение);
	Иначе
		ИнформацияПоОтправителю = "";
	КонецЕсли;
	ЗначенияПараметровПроведения.Вставить("ИнформацияПоОтправителю", ИнформацияПоОтправителю);
	
	// ИнформацияПоПолучателю
	ШаблонСтроки = "ru = 'Перемещение в ""%1""';
					|en = 'Transfer to ""%1""'"; // @НСтр
	Если Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс
		ИЛИ Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.ПодразделениеПолучатель)
			ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.ОрганизацияПолучатель) Тогда
			ИнформацияПоПолучателю = "";
		ИначеЕсли Реквизиты.Подразделение <> Реквизиты.ПодразделениеПолучатель Тогда
			ШаблонСтроки = "ru = 'Перемещение в организацию ""%1"" и подразделение ""%2""';
							|en = 'Transfer to the ""%1"" company and the ""%2"" business unit'"; // @НСтр
			ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ОрганизацияПолучатель, Реквизиты.ПодразделениеПолучатель);
		Иначе
			ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ОрганизацияПолучатель);
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.ПодразделениеПолучатель) Тогда
		ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ПодразделениеПолучатель);
	Иначе
		ИнформацияПоПолучателю = "";
	КонецЕсли;
	ЗначенияПараметровПроведения.Вставить("ИнформацияПоПолучателю", ИнформацияПоПолучателю);
	
КонецПроцедуры

// Возвращает список организаций, доступных пользователю.
// 
// Возвращаемое значение:
//  Массив - Список организаций, доступных пользователю.
//
Функция СписокРазрешенныхОрганизаций() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизаций.Действует)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокОрганизаций;

КонецФункции

Функция ПредставлениеРеквизита(ИмяРеквизита, ИмяТЧ, ПредставлениеРеквизитов, МетаданныеОбъекта) Экспорт

	Если ПредставлениеРеквизитов = Неопределено Тогда
		ПредставлениеРеквизитов = Новый Соответствие;
		Для каждого МетаданныеРеквизита Из МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			ПредставлениеРеквизитов.Вставить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Синоним);
		КонецЦикла;
	КонецЕсли;

	Возврат ПредставлениеРеквизитов.Получить(ИмяРеквизита);
	
КонецФункции

Процедура УстановитьВидимостьКомандыВводаНаОсновании(Элементы, ИмяДокумента, ТаблицаКоманд, ВидимостьКоманды) Экспорт

	ТекСтрока = ТаблицаКоманд.Найти("Документ." + ИмяДокумента, "Менеджер");
	Если ТекСтрока <> Неопределено Тогда
		Элементы[ТекСтрока.ИмяВФорме].Видимость = ВидимостьКоманды;
	КонецЕсли;

КонецПроцедуры

// Заполняет значение реквизита или очищает его.
// 
// Параметры:
//  Объект - ДокументОбъект - 
//  ИмяРеквизита - Строка - Имя реквизита
//  Действие - Строка - 
//  Значение - Произвольный -
//  ПустоеЗначение - Произвольный -
//  ИзмененныеРеквизиты - Массив из Строка -
Процедура ЗаполнитьОчиститьРеквизит(Объект, ИмяРеквизита, Действие, Значение, ПустоеЗначение, ИзмененныеРеквизиты) Экспорт

	Если Действие = "Заполнить" 
		И (НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита])
			ИЛИ Объект[ИмяРеквизита] = Ложь И Значение = Истина) Тогда
		Объект[ИмяРеквизита] = Значение;
	ИначеЕсли Действие = "Очистить" Тогда
		Объект[ИмяРеквизита] = ПустоеЗначение;
	КонецЕсли;
	
	ИзмененныеРеквизиты.Добавить(ИмяРеквизита);
	
КонецПроцедуры

// Добавляет тип объекта метаданных по его имени.
// 
// Параметры:
//  ИмяДокумента - Строка - Имя документа
//  ПроверитьНаличиеПрав - Булево - Проверить наличие прав
//  СписокОбъектов - Массив -
Процедура ДобавитьТипОбъектаМетаданных(ИмяДокумента, ПроверитьНаличиеПрав, СписокОбъектов) Экспорт

	Если НЕ ПроверитьНаличиеПрав ИЛИ ПравоДоступа("Проведение", Метаданные.Документы[ИмяДокумента]) Тогда
		СписокОбъектов.Добавить(Тип("ДокументСсылка." + ИмяДокумента));
	КонецЕсли; 
	
КонецПроцедуры

Функция ЕстьПраваНаЧтениеСостоянияОС() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) 
		И ВнеоборотныеАктивыЛокализация.ЕстьПраваНаЧтениеСостоянияОС();

КонецФункции

Функция ЕстьПраваНаЧтениеСостоянияНМА() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ) 
		И ВнеоборотныеАктивыЛокализация.ЕстьПраваНаЧтениеСостоянияНМА();

КонецФункции

Функция ПредставлениеСуммы(Сумма, ЗаголовокСуммы, Валюта) Экспорт

	СуммаСтрокой = Формат(Сумма, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
	
	ПредставлениеСуммы = Новый Массив;
	
	Если Сумма > 0 Тогда
		
		Текст = СтрШаблон("%1 %2 %3", ЗаголовокСуммы, СуммаСтрокой, Валюта);
		ПредставлениеСуммы.Добавить(Текст);
		
	ИначеЕсли Сумма < 0 Тогда
		
		ПредставлениеСуммы.Добавить(ЗаголовокСуммы);
		ПредставлениеСуммы.Добавить(" ");
		ПредставлениеСуммы.Добавить(Новый ФорматированнаяСтрока(СуммаСтрокой,, ЦветаСтиля.ЦветОтрицательногоЧисла));
		ПредставлениеСуммы.Добавить(" ");
		ПредставлениеСуммы.Добавить(Строка(Валюта));
		
	Иначе
		
		ПредставлениеСуммы.Добавить(ЗаголовокСуммы + " -");
		
	КонецЕсли; 

	Возврат Новый ФорматированнаяСтрока(ПредставлениеСуммы);
	
КонецФункции

Процедура УстановитьСвойствоСтруктуры(ИмяСвойства, ЗначениеСвойства, Приемник) Экспорт

	Если ТипЗнч(Приемник) = Тип("ФиксированнаяСтруктура")
		ИЛИ Приемник = Неопределено Тогда
		НовыеСвойства = Новый Структура(Приемник);
		НовыеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
		Приемник = Новый ФиксированнаяСтруктура(НовыеСвойства);
	Иначе
		Приемник.Вставить(ИмяСвойства, ЗначениеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступенВыборОбъектовЭксплуатации2_4(Параметры) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Контекст") 
		И СтрНайти(Параметры.Контекст, "УУ") = 0
		И СтрНайти(Параметры.Контекст, "УР") = 0 Тогда
		
		ДоступенВыбор = Ложь;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
	
		ДатаНачалаУчета = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
		
		// Если в параметрах выбора есть МФУ, то форма поддерживает выбор 2.2 и 2.4.
		// Нужно по дате сведений определить какая форма требуется. 
		// Если в параметрах выбора нет МФУ, то форма поддерживает только выбор 2.4.
		ДоступенВыбор = 
			Параметры.Свойство("Контекст") 
				И СтрНайти(Параметры.Контекст, "МФУ") = 0
			ИЛИ НЕ Параметры.Свойство("ДатаСведений")
				И ТекущаяДатаСеанса() >= ДатаНачалаУчета 
			ИЛИ Параметры.Свойство("ДатаСведений")
				И Параметры.ДатаСведений >= ДатаНачалаУчета;
	Иначе
		ДоступенВыбор = Истина;
	КонецЕсли;
			
	Если НЕ ДоступенВыбор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("БУСостояние") Тогда
			Параметры.Отбор.Вставить("Состояние", Параметры.Отбор.БУСостояние);
		КонецЕсли; 
		Если Параметры.Отбор.Свойство("БУОрганизация") Тогда
			Параметры.Отбор.Вставить("Организация", Параметры.Отбор.БУОрганизация);
		КонецЕсли; 
		Если Параметры.Отбор.Свойство("БУПодразделение") Тогда
			Параметры.Отбор.Вставить("Подразделение", Параметры.Отбор.БУПодразделение);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

Процедура ПроверитьСоответствиеСтатьиРасходовПорядкуУчетаНУ(Форма) Экспорт

	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяРасходовНУ) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовРаспределения = ВнеоборотныеАктивыКлиентСервер.ДоступныеВариантыРаспределенияРасходов(Объект.ПорядокУчетаНУ);
		
	Если МассивВариантовРаспределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВариантРаспределенияРасходовРегл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовНУ, "ВариантРаспределенияРасходовНУ");
	
	Если МассивВариантовРаспределения.Найти(ВариантРаспределенияРасходовРегл) = Неопределено Тогда
		Объект.СтатьяРасходовНУ = Неопределено;
		Объект.АналитикаРасходовНУ = Неопределено;
		Форма.АналитикаРасходовНУОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты шапки документа по местонахождению основных средств.
// 
// Параметры:
// 	СписокИлиСтруктураРеквизитов	- Строка, Структура	-	Реквизиты, которые нужно заполнить.
// 															В ключе структуры хранится имя реквизита документа.
// 															В значении хранится
// 	ТабличнаяЧасть	-	ДанныеФормыКоллекция	-	Табличная часть в которой указаны основные средства.
// 	Объект	-	ДанныеФормыСтруктура	- Данные документа.
// 	ИзмененныеРеквизиты	-	Строка	-	Список измененных реквизитов.
//
Процедура ЗаполнитьШапкуПоВыбраннымОС(СписокИлиСтруктураРеквизитов, ТабличнаяЧасть, Объект, ИзмененныеРеквизиты = Неопределено) Экспорт
	
	Если ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() = 0
		ИЛИ ТабличнаяЧасть = Неопределено И НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СписокИлиСтруктураРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(СписокИлиСтруктураРеквизитов);
	Иначе
		СтруктураРеквизитов = СписокИлиСтруктураРеквизитов;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	
	ЕстьНезаполненныеРеквизиты = Ложь;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ЕстьНезаполненныеРеквизиты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьНезаполненныеРеквизиты Тогда
		Возврат;
	КонецЕсли;

	ОсновноеСредство = Неопределено;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда
				ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОсновноеСредство = Объект.ОсновноеСредство;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	МестонахождениеОС = ВнеоборотныеАктивы.МестонахождениеОС(ОсновноеСредство);
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизитыМассив = СтрРазделить(ИзмененныеРеквизиты, ",");
	Иначе
		ИзмененныеРеквизитыМассив = Новый Массив;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = МестонахождениеОС.Организация;
		ИзмененныеРеквизитыМассив.Добавить("Организация");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = МестонахождениеОС.Местонахождение;
		ИзмененныеРеквизитыМассив.Добавить("Подразделение");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("МОЛ")
		И НЕ ЗначениеЗаполнено(Объект.МОЛ) Тогда
		Объект.МОЛ = МестонахождениеОС.МОЛ;
		ИзмененныеРеквизитыМассив.Добавить("МОЛ");
	КонецЕсли;
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизиты = СтрСоединить(ИзмененныеРеквизитыМассив, ",");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты шапки документа по местонахождению основных средств.
// 
// Параметры:
// 	СписокИлиСтруктураРеквизитов	- Строка, Структура	-	Реквизиты, которые нужно заполнить.
// 															В ключе структуры хранится имя реквизита документа.
// 															В значении хранится
// 	ТабличнаяЧасть	-	ДанныеФормыКоллекция	-	Табличная часть в которой указаны основные средства.
// 	Объект	-	ДанныеФормыСтруктура	- Данные документа.
// 	ИзмененныеРеквизиты	-	Строка	-	Список измененных реквизитов.
//
Процедура ЗаполнитьШапкуПоВыбраннымНМА(СписокИлиСтруктураРеквизитов, ТабличнаяЧасть, Объект, ИзмененныеРеквизиты = Неопределено) Экспорт
	
	Если ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() = 0
		ИЛИ ТабличнаяЧасть = Неопределено И НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СписокИлиСтруктураРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(СписокИлиСтруктураРеквизитов);
	Иначе
		СтруктураРеквизитов = СписокИлиСтруктураРеквизитов;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	
	ЕстьНезаполненныеРеквизиты = Ложь;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ЕстьНезаполненныеРеквизиты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьНезаполненныеРеквизиты Тогда
		Возврат;
	КонецЕсли;

	НематериальныйАктив = Неопределено;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.НематериальныйАктив) Тогда
				НематериальныйАктив = ДанныеСтроки.НематериальныйАктив;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НематериальныйАктив = Объект.НематериальныйАктив;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НематериальныйАктив) Тогда
		Возврат;
	КонецЕсли;
	
	МестоУчетаНМА = ВнеоборотныеАктивы.МестоУчетаНМА(НематериальныйАктив);
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизитыМассив = СтрРазделить(ИзмененныеРеквизиты, ",");
	Иначе
		ИзмененныеРеквизитыМассив = Новый Массив;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = МестоУчетаНМА.Организация;
		ИзмененныеРеквизитыМассив.Добавить("Организация");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = МестоУчетаНМА.Подразделение;
		ИзмененныеРеквизитыМассив.Добавить("Подразделение");
	КонецЕсли;
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизиты = СтрСоединить(ИзмененныеРеквизитыМассив, ",");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты шапки документа по местонахождению арендованных основных средств.
// 
// Параметры:
// 	СписокРеквизитов - Строка - Реквизиты, которые нужно заполнить.
// 	ТабличнаяЧасть - ДанныеФормыКоллекция - Табличная часть в которой указаны основные средства.
// 	Объект - ДанныеФормыСтруктура - Данные документа.
// 	ИзмененныеРеквизиты	- Строка - Список измененных реквизитов.
//
Процедура ЗаполнитьШапкуПоАрендованнымОС(СписокРеквизитов, ТабличнаяЧасть, Объект, ИзмененныеРеквизиты = Неопределено) Экспорт
	
	Если ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() = 0
		ИЛИ ТабличнаяЧасть = Неопределено И НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	
	ЕстьНезаполненныеРеквизиты = Ложь;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ЕстьНезаполненныеРеквизиты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьНезаполненныеРеквизиты Тогда
		Возврат;
	КонецЕсли;

	ОсновноеСредство = Неопределено;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда
				ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОсновноеСредство = Объект.ОсновноеСредство;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	МестонахождениеОС = ВнеоборотныеАктивы.МестонахождениеИАрендодательОС(ОсновноеСредство);
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизитыМассив = СтрРазделить(ИзмененныеРеквизиты, ",");
	Иначе
		ИзмененныеРеквизитыМассив = Новый Массив;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = МестонахождениеОС.Организация;
		ИзмененныеРеквизитыМассив.Добавить("Организация");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Партнер")
		И НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер = МестонахождениеОС.Партнер;
		ИзмененныеРеквизитыМассив.Добавить("Партнер");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Контрагент")
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = МестонахождениеОС.Контрагент;
		ИзмененныеРеквизитыМассив.Добавить("Контрагент");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Договор")
		И НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = МестонахождениеОС.Договор;
		ИзмененныеРеквизитыМассив.Добавить("Договор");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = МестонахождениеОС.Местонахождение;
		ИзмененныеРеквизитыМассив.Добавить("Подразделение");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("МОЛ")
		И НЕ ЗначениеЗаполнено(Объект.МОЛ) Тогда
		Объект.МОЛ = МестонахождениеОС.МОЛ;
		ИзмененныеРеквизитыМассив.Добавить("МОЛ");
	КонецЕсли;
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизиты = СтрСоединить(ИзмененныеРеквизитыМассив, ",");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет дату начала действия параметров.
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ, для которого проверяется дата.
// 	Отказ - Булево - Истина, если проверка не прошла.
Процедура ПроверитьНачалоДействияПараметров(Объект, Отказ) Экспорт
	
	Если НЕ Объект.ПараметрыДействуютСПрошлойДаты
		ИЛИ НЕ ЗначениеЗаполнено(Объект.НачалоДействия) Тогда
		Возврат
	КонецЕсли;
	
	Если Объект.НачалоДействия >= НачалоМесяца(Объект.Дата)
		И ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru = 'Начало действия параметров должно быть раньше начала месяца, в котором оформлен документ';
								|en = 'The parameter start must be earlier than the beginning of the month in which the document is created'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "НачалоДействия",, Отказ);
	ИначеЕсли НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.НачалоДействия) Тогда
		ТекстСообщения = НСтр("ru = 'Начало действия параметров должно быть не раньше начала учета внеоборотных активов версии 2.4';
								|en = 'The financial details start must not be earlier than the start of fixed and intangible assets accounting version 2.4'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "НачалоДействия",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПринятиеКУчету

// 
// Параметры:
//  ЗапросыРегистра - Массив из Строка - 
Процедура ТекстЗапросаПрочиеРасходыПринятияКУчету(ЗапросыРегистра) Экспорт
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПрочиеРасходыПринятияКУчету();
	
	Если ТекстЗапроса <> Неопределено Тогда
		ЗапросыРегистра.Добавить(ТекстЗапроса);
		Возврат;
	КонецЕсли;
		
	#Область ПринятиеКУчету // - Кт 08
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|   РасчетРасходов.Подразделение                 КАК Подразделение,
	|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
	|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
	|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|			ТОГДА 0
	|		ИНАЧЕ РасчетРасходов.Сумма
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|			ТОГДА 0
	|		ИНАЧЕ РасчетРасходов.СуммаБезНДС
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|			ТОГДА 0
	|		ИНАЧЕ РасчетРасходов.СуммаУпр
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
	|				ИЛИ ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|			ТОГДА 0
	|		ИНАЧЕ РасчетРасходов.СуммаРегл
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
	|				ИЛИ ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|			ТОГДА 0
	|		ИНАЧЕ РасчетРасходов.СуммаРегл
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ДанныеДокумента.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|	                                                                             
	|	РасчетРасходов.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
	|	ДанныеДокумента.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|
	|	ДанныеДокумента.Ссылка КАК Регистратор
	|
	//++ НЕ УТКА
	|	,0 КАК СуммаНДД
	//-- НЕ УТКА
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетРасходов КАК РасчетРасходов
	|		ПО РасчетРасходов.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	(ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|		ИЛИ ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
	|			И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы))
	|";
	ЗапросыРегистра.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область НеПриниматьКУчетуВключитьВРасходы // Дт 91 - Кт 08
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|   РасчетРасходов.Подразделение                 КАК Подразделение,
	|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
	|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
	|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|
	|	РасчетРасходов.Сумма КАК СуммаСНДС,
	|	РасчетРасходов.СуммаБезНДС КАК СуммаБезНДС,
	|	РасчетРасходов.СуммаУпр КАК СуммаБезНДСУпр,
	|
	|	0 КАК СуммаСНДСРегл,
	|	0 КАК СуммаБезНДСРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|	                                                                             
	|	РасчетРасходов.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК НастройкаХозяйственнойОперации,
	|
	|	ДанныеДокумента.Ссылка КАК Регистратор
	//++ НЕ УТКА
	|	,0 КАК СуммаНДД
	//-- НЕ УТКА
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетРасходов КАК РасчетРасходов
	|		ПО РасчетРасходов.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Период                       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|   РасчетРасходов.Подразделение                 КАК Подразделение,
	|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
	|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
	|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаБезНДСУпр,
	|
	|	РасчетРасходов.СуммаРегл КАК СуммаСНДСРегл,
	|	РасчетРасходов.СуммаРегл КАК СуммаБезНДСРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|	                                                                             
	|	РасчетРасходов.ИдентификаторСтрокиБУ         КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК НастройкаХозяйственнойОперации,
	|
	|	ДанныеДокумента.Ссылка КАК Регистратор
	//++ НЕ УТКА
	|	,0 КАК СуммаНДД
	//-- НЕ УТКА
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетРасходов КАК РасчетРасходов
	|		ПО РасчетРасходов.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	(ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
	|		ИЛИ ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Период                       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|   ДанныеДокумента.Местонахождение              КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходовУУ             КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовУУ          КАК АналитикаРасходов,
	|	ДанныеДокумента.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|
	|	РасчетРасходов.Сумма КАК СуммаСНДС,
	|	РасчетРасходов.СуммаБезНДС КАК СуммаБезНДС,
	|	РасчетРасходов.СуммаУпр КАК СуммаБезНДСУпр,
	|
	|	0 КАК СуммаСНДСРегл,
	|	0 КАК СуммаБезНДСРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|	                                                                             
	|	РасчетРасходов.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК НастройкаХозяйственнойОперации,
	|
	|	ДанныеДокумента.Ссылка КАК Регистратор
	//++ НЕ УТКА
	|	,0 КАК СуммаНДД
	//-- НЕ УТКА
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетРасходов КАК РасчетРасходов
	|		ПО РасчетРасходов.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Период                       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|   ДанныеДокумента.Местонахождение              КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходовБУ             КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовБУ          КАК АналитикаРасходов,
	|	ДанныеДокумента.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаБезНДСУпр,
	|
	|	РасчетРасходов.СуммаРегл КАК СуммаСНДСРегл,
	|	РасчетРасходов.СуммаРегл КАК СуммаБезНДСРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|	                                                                             
	|	РасчетРасходов.ИдентификаторСтрокиБУ         КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК НастройкаХозяйственнойОперации,
	|
	|	ДанныеДокумента.Ссылка КАК Регистратор
	//++ НЕ УТКА
	|	,0 КАК СуммаНДД
	//-- НЕ УТКА
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетРасходов КАК РасчетРасходов
	|		ПО РасчетРасходов.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокУчетаБУ В (
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы),
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы))
	|";
	ЗапросыРегистра.Добавить(ТекстЗапроса);
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗначенияПараметровПроведенияПринятияКУчету(ЗначенияПараметровПроведения) Экспорт
	
	ЗначенияПараметровПроведения.Вставить(
		"ХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету", 
		Перечисления.ХозяйственныеОперации.СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету);
	
	ЗначенияПараметровПроведения.Вставить(
		"НастройкаХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету", 
		Справочники.НастройкиХозяйственныхОпераций.СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету);
	
	СписокРазрешенныхВариантовРаспределенияРасходов = Новый Массив;
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	СписокРазрешенныхВариантовРаспределенияРасходов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	ЗначенияПараметровПроведения.Вставить("СписокРазрешенныхВариантовРаспределенияРасходов", СписокРазрешенныхВариантовРаспределенияРасходов);
	
	ЗначенияПараметровПроведения.Вставить("СтатьяАП", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства);

	ЗначенияПараметровПроведения.Вставить("НомерПакета", 0);
	
КонецПроцедуры

#КонецОбласти

// 
// Параметры:
//  ЗапросыРегистра - Массив из Строка - 
Процедура ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивыПринятияКУчету(ЗапросыРегистра) Экспорт
	
	#Область ПринятиеКУчету // - Кт 08
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                       КАК Регистратор,
	|	ДанныеДокумента.Период                       КАК Период,
	|	ДанныеДокумента.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|
	|	РасчетСтоимости.КорПодразделение             КАК Подразделение,
	|	РасчетСтоимости.КорНаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетСтоимости.КорСтатьяРасходов            КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетСтоимости.КорАналитикаРасходов         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Местонахождение              КАК КорПодразделение,
	|	ДанныеДокумента.НаправлениеДеятельности      КАК КорНаправлениеДеятельности,
	|	&СтатьяАП                                    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
	|	РасчетСтоимости.ОбъектУчета                  КАК КорАналитикаАктивовПассивов,
	|	ДанныеДокумента.ГруппаФинансовогоУчета       КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                  КАК КорОрганизация,
	|
	|	РасчетСтоимости.Сумма                        КАК Сумма,
	|
	|	РасчетСтоимости.СтоимостьРегл 
	|		+ РасчетСтоимости.СтоимостьЦФ            КАК СуммаРегл,
	|
	|	РасчетСтоимости.Стоимость                    КАК СуммаУпр
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
	|		ПО РасчетСтоимости.Ссылка = ДанныеДокумента.Ссылка
	|";
	ЗапросыРегистра.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область НеПриниматьКУчетуВключитьВРасходы
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                       КАК Регистратор,
	|	ДанныеДокумента.Период                       КАК Период,
	|	&ХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|
	|	РасчетРасходов.Подразделение                 КАК Подразделение,
	|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	РасчетРасходов.СтатьяРасходов                КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Местонахождение              КАК КорПодразделение,
	|	ДанныеДокумента.НаправлениеДеятельности      КАК КорНаправлениеДеятельности,
	|	ДанныеДокумента.СтатьяРасходовУУ             КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходовУУ          КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                                 КАК КорОрганизация,
	|
	|	РасчетРасходов.Сумма                         КАК Сумма,
	|	0                                            КАК СуммаРегл,
	|	РасчетРасходов.Сумма                         КАК СуммаУпр
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетРасходов КАК РасчетРасходов
	|		ПО РасчетРасходов.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
	|	И РасчетРасходов.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                       КАК Регистратор,
	|	ДанныеДокумента.Период                       КАК Период,
	|	&ХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|
	|	РасчетРасходов.Подразделение                 КАК Подразделение,
	|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	РасчетРасходов.СтатьяРасходов                КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Местонахождение              КАК КорПодразделение,
	|	ДанныеДокумента.НаправлениеДеятельности      КАК КорНаправлениеДеятельности,
	|	ДанныеДокумента.СтатьяРасходовБУ             КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходовБУ          КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                  КАК КорОрганизация,
	|
	|	0                                            КАК Сумма,
	|	РасчетРасходов.СуммаРегл                     КАК СуммаРегл,
	|	0                                            КАК СуммаУпр
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРасчетРасходов КАК РасчетРасходов
	|		ПО РасчетРасходов.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
	|	И РасчетРасходов.СуммаРегл <> 0
	|";
	ЗапросыРегистра.Добавить(ТекстЗапроса);
	#КонецОбласти
	
КонецПроцедуры

#Область РасчетАмортизации

// 
// Параметры:
//  ПолеМесяц - Строка - Поле месяц
// 
// Возвращаемое значение:
//  Строка - 
Функция ТекстПоляКоэффициентПериода(ПолеМесяц) Экспорт
	
	ТекстПоля =
	"	ВЫБОР
	|		КОГДА ГодовыеГрафикиАмортизацииОС.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ГодовыеГрафикиАмортизацииОС.Коэффициент1 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент2 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент3 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент4 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент5 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент6 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент7 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент8 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент9 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент10 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент11 
	|			+ ГодовыеГрафикиАмортизацииОС.Коэффициент12 <> 0
	|		ТОГДА 
	|			ВЫБОР МЕСЯЦ(&НачалоМесяца)
	|				КОГДА 1 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент1, 0)
	|				КОГДА 2 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент2, 0) 
	|				КОГДА 3 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент3, 0)
	|				КОГДА 4 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент4, 0) 
	|				КОГДА 5 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент5, 0)
	|				КОГДА 6 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент6, 0)
	|				КОГДА 7 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент7, 0)
	|				КОГДА 8 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент8, 0)
	|				КОГДА 9 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент9, 0)
	|				КОГДА 10 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент10, 0)
	|				КОГДА 11 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент11, 0)
	|				КОГДА 12 ТОГДА ЕСТЬNULL(ГодовыеГрафикиАмортизацииОС.Коэффициент12, 0)
	|			КОНЕЦ / (ГодовыеГрафикиАмортизацииОС.Коэффициент1 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент2 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент3 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент4 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент5 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент6 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент7 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент8 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент9 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент10 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент11 
	|						+ ГодовыеГрафикиАмортизацииОС.Коэффициент12)
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	ТекстПоля = СтрЗаменить(ТекстПоля, "&НачалоМесяца", ПолеМесяц);
	
	Возврат ТекстПоля;
		
КонецФункции

#КонецОбласти

#Область ПереоценкаОС_НМА

Процедура ТекстЗапросаТаблицаСтоимостьПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры)
	
	ИмяРегистра = ?(ВидОбъектовУчета = "ОС", "СтоимостьОС", "СтоимостьНМА");
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВтТаблицаПереоценки(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	ТекстЗапросаТаблицаВтПустаяТаблицаОС(ТекстыЗапроса);
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область Дооценка_УвеличениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Период                      КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	&Арендатор                                  КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	ДанныеДокумента.ОтражатьВРеглУчете          КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете           КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	&ХО_УвеличениеСтоимости                   КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УвеличениеСтоимости          КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождениеОС КАК МестонахождениеОС
	|		ПО МестонахождениеОС.Ссылка = ТаблицаПереоценки.Ссылка
	|			И МестонахождениеОС.ОсновноеСредство = &ОсновноеСредство
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0)";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Период                      КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	&Арендатор                                  КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	ДанныеДокумента.ОтражатьВРеглУчете          КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете           КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	&ХО_УменьшениеВеличиныДооценкиСтоимости          КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиСтоимости КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождениеОС КАК МестонахождениеОС
	|		ПО МестонахождениеОС.Ссылка = ТаблицаПереоценки.Ссылка
	|			И МестонахождениеОС.ОсновноеСредство = &ОсновноеСредство
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Период                      КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	&Арендатор                                  КАК Арендатор,
	|	ДанныеДокумента.СтатьяРасходов              КАК КорСтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов           КАК КорАналитикаРасходов,
	|	ДанныеДокумента.ОтражатьВРеглУчете          КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете           КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&ХО_УменьшениеСтоимости                  КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УменьшениеСтоимости         КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождениеОС КАК МестонахождениеОС
	|		ПО МестонахождениеОС.Ссылка = ТаблицаПереоценки.Ссылка
	|			И МестонахождениеОС.ОсновноеСредство = &ОсновноеСредство
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Период                      КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	&Арендатор                                  КАК Арендатор,
	|	ДанныеДокумента.СтатьяРасходов              КАК КорСтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов           КАК КорАналитикаРасходов,
	|	ДанныеДокумента.ОтражатьВРеглУчете          КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете           КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	&ХО_УменьшениеВеличиныДооценкиСтоимости          КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиСтоимости КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождениеОС КАК МестонахождениеОС
	|		ПО МестонахождениеОС.Ссылка = ТаблицаПереоценки.Ссылка
	|			И МестонахождениеОС.ОсновноеСредство = &ОсновноеСредство
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПриростСтоимости_УвеличениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Период                      КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	ДанныеДокумента.ОтражатьВРеглУчете          КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете           КАК ОтражатьВУпрУчете,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	&ХО_УвеличениеСтоимости                   КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УвеличениеСтоимости          КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0)";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПриростСтоимости_УвеличениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Период                      КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	ДанныеДокумента.ОтражатьВРеглУчете          КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете           КАК ОтражатьВУпрУчете,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи     КАК ИдентификаторФинЗаписи,
	|	&ХО_УвеличениеНакопленнойАмортизации            КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УвеличениеНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0
	|			И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область ПриростСтоимости_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Период                      КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	ДанныеДокумента.ОтражатьВРеглУчете          КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете           КАК ОтражатьВУпрУчете,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	&ХО_УменьшениеВеличиныДооценкиСтоимости          КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиСтоимости КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПриростСтоимости_УменьшениеВеличиныДооценкиНакопленнойАмортизации 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Период                      КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	ДанныеДокумента.ОтражатьВРеглУчете          КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете           КАК ОтражатьВУпрУчете,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&ХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаАмортизацияПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры)

	ИмяРегистра = ?(ВидОбъектовУчета = "ОС", "АмортизацияОС", "АмортизацияНМА");
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВтТаблицаПереоценки(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область Дооценка_УвеличениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                 КАК Регистратор,
	|	ДанныеДокумента.Период                 КАК Период,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ДанныеДокумента.Подразделение          КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&ХО_УвеличениеНакопленнойАмортизации   КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                           КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                           КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи      КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УвеличениеНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ТаблицаПереоценки.Ссылка = ДанныеДокумента.Ссылка 
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Дооценка_УменьшениеВеличиныДооценкиАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                 КАК Регистратор,
	|	ДанныеДокумента.Период                 КАК Период,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ДанныеДокумента.Подразделение          КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&ХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяРасходов         КАК КорСтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов      КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ТаблицаПереоценки.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                 КАК Регистратор,
	|	ДанныеДокумента.Период                 КАК Период,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ДанныеДокумента.Подразделение          КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&ХО_УменьшениеНакопленнойАмортизации   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяРасходов         КАК КорСтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов      КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи      КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ТаблицаПереоценки.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                 КАК Регистратор,
	|	ДанныеДокумента.Период                 КАК Период,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ДанныеДокумента.Подразделение          КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&ХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяРасходов         КАК КорСтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов      КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ТаблицаПереоценки.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры)

	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапросаВтТаблицаПереоценки(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область ДооценкаВосстановительнойСтоимостиИзУценки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)         КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                         КАК Регистратор,
	|	ДанныеДокумента.Период                         КАК Период,
	|	ДанныеДокумента.Организация                    КАК Организация,
	|	ДанныеДокумента.Подразделение                  КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&ХО_УменьшениеВеличиныДооценкиСтоимости        КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяДоходов                  КАК СтатьяДоходов,
	|	ДанныеДокумента.АналитикаДоходов               КАК АналитикаДоходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	
	|	ВЫБОР 
	|		КОГДА НЕ ЕСТЬNULL(ПараметрыПартионногоУчета.УправленческийУчетОрганизаций, ЛОЖЬ)
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	ВЫБОР 
	|		КОГДА НЕ ЕСТЬNULL(ПараметрыПартионногоУчета.ИспользоватьУчетПрочихДоходовРасходовРегл, ЛОЖЬ)
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиСтоимости КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ТаблицаПереоценки.Ссылка = ДанныеДокумента.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ПараметрыПартионногоУчета
	|		ПО ПараметрыПартионногоУчета.Период = НАЧАЛОПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ)
	|			И ПараметрыПартионногоУчета.Организация = ДанныеДокумента.Организация
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область УценкаНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)         КАК ВидДвижения,
	|	ДанныеДокумента.Ссылка                         КАК Регистратор,
	|	ДанныеДокумента.Период                         КАК Период,
	|	ДанныеДокумента.Организация                    КАК Организация,
	|	ДанныеДокумента.Подразделение                  КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&ХО_УменьшениеНакопленнойАмортизации           КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяДоходов                  КАК СтатьяДоходов,
	|	ДанныеДокумента.АналитикаДоходов               КАК АналитикаДоходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА НЕ ЕСТЬNULL(ПараметрыПартионногоУчета.УправленческийУчетОрганизаций, ЛОЖЬ)
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА НЕ ЕСТЬNULL(ПараметрыПартионногоУчета.ИспользоватьУчетПрочихДоходовРасходовРегл, ЛОЖЬ)
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ + ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ) > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ 
	|					+ ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|					- ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи      КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ТаблицаПереоценки.Ссылка = ДанныеДокумента.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ПараметрыПартионногоУчета
	|		ПО ПараметрыПартионногоУчета.Период = НАЧАЛОПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ)
	|			И ПараметрыПартионногоУчета.Организация = ДанныеДокумента.Организация
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(ТекстыТекущегоЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции
 
Функция ТекстЗапросаТаблицаПрочиеРасходыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры) 
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ДопПоля = "Регистратор";

	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, ДопПоля);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы(ДопПоля, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, ДопПоля)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, ДопПоля);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы(ДопПоля, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, ДопПоля)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";

	ТекстЗапросаВтТаблицаПереоценки(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы(ДопПоля);
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() +
	// Уценка восстановительной стоимости
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходов              КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов           КАК АналитикаРасходов,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                  КАК АналитикаУчетаНоменклатуры,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеСтоимости КАК НастройкаХозяйственнойОперации
	|
	|	,ДанныеДокумента.Ссылка КАК Регистратор
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|		ПО ДанныеДокумента.СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0)
	|	И НЕ ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Дооценка накопленной амортизации из уценки
	|ВЫБРАТЬ
	|	ДанныеДокумента.Период                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходов              КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов           КАК АналитикаРасходов,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                  КАК АналитикаУчетаНоменклатуры,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|
	|	,ДанныеДокумента.Ссылка КАК Регистратор
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|		ПО ДанныеДокумента.СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ НЕ ТаблицаПереоценки.НачислятьИзнос 
	|				И ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0)
	|	И НЕ ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))";
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходовПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры) Экспорт
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ДопПоля = "Регистратор";

	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходовПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, ДопПоля);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов(ДопПоля);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходовПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, ДопПоля)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходовПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, ДопПоля);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов(ДопПоля, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходовПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, ДопПоля)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	ТекстЗапросаВтТаблицаПереоценки(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);

	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстОписаниеВтИсходныеПартииПрочихРасходов(ДопПоля);
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() +
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходов              КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов           КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаАктивовПассивов,
	|	ДанныеДокумента.Ссылка                      КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьБезНДС,
	|
	|	0 КАК НДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	0 КАК НДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеСтоимости КАК НастройкаХозяйственнойОперации
	|
	|	,ДанныеДокумента.Ссылка КАК Регистратор
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|		ПО ДанныеДокумента.СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0)
	|	И ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Период                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходов              КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов           КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаАктивовПассивов,
	|	ДанныеДокумента.Ссылка                      КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьБезНДС,
	|
	|	0 КАК НДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	0 КАК НДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|
	|	,ДанныеДокумента.Ссылка КАК Регистратор
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|		ПО ДанныеДокумента.СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ НЕ ТаблицаПереоценки.НачислятьИзнос 
	|				И ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0)
	|	И ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|";
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаВтТаблицаПереоценки(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента) Экспорт
	
	ИмяТаблицы = "ТаблицаПереоценки";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаПустаяТаблицаСтоимостьВНА(Запрос, ТекстыЗапроса);
	ТекстЗапросаПустаяТаблицаАмортизацияВНА(Запрос, ТекстыЗапроса);
	
	Если ВидОбъектовУчета = "ОС" Тогда
		ТекстЗапросаТаблицаВтПорядокУчетаОС(ТекстыЗапроса);
		ТекстЗапросаТаблицаВтМестонахождениеОС(ТекстыЗапроса);
	Иначе
		ТекстЗапросаТаблицаВтПорядокУчетаНМА(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                              КАК Ссылка,
	|	&ОсновноеСредство                                   КАК ОсновноеСредство,
	|	ТаблицаПереоценки.СтоимостьУУ                       КАК СтоимостьУУ,
	|	ТаблицаПереоценки.СтоимостьБУ                       КАК СтоимостьБУ,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|
	|	ЕСТЬNULL(АмортизацияВНА.НачислятьИзнос, ЛОЖЬ)       КАК НачислятьИзнос,
	|
	|	ЕСТЬNULL(АмортизацияВНА.Амортизация, 0)             КАК НакопленнаяАмортизацияУУ,
	|
	|	ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0)
	|		+ ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0)     КАК НакопленнаяАмортизацияБУ,
	|
	|	ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0)           КАК НакопленнаяАмортизацияЦФ,
	|	ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)               КАК ТекущаяСтоимостьЦФ,
	|
		// Дооценка стоимости УУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|			ТОГДА ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиСтоимостиУУ,
	|
		// Дооценка стоимости БУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиСтоимостиБУ,
	|	
		// Уценка стоимости УУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиУУ,
	|
		// Уценка стоимости БУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ >= 0
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиБУ,
	|	
		// Уценка стоимости ЦФ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|					И ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) > ТаблицаПереоценки.СтоимостьБУ
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиЦФ,
	|	
		// РезервПереоценкиСтоимости
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) < -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) >= -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ) < ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ) >= ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|
		// РезервПереоценкиСтоимостиРегл
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) < -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) >= -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ) < ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ) >= ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
		// Дооценка амортизации УУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) = ЕСТЬNULL(АмортизацияВНА.Амортизация, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|			ТОГДА ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) 
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.Амортизация, 0) <> 0
	|			ТОГДА -АмортизацияВНА.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияВНА.Амортизация * (ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиАмортизацииУУ,
	|
		// Дооценка амортизации БУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) = (ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) + ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0))
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|			ТОГДА ТаблицаПереоценки.СтоимостьБУ - (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) 
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|				И (ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) + ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0)) <> 0
	|			ТОГДА -(АмортизацияВНА.АмортизацияРегл + АмортизацияВНА.АмортизацияЦФ) 
	|					+ ВЫРАЗИТЬ((АмортизацияВНА.АмортизацияРегл + АмортизацияВНА.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиАмортизацииБУ,
	|	
		// Дооценка амортизации НУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА &ТаблицаПереоценкиСтоимостьНУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) = ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) <> 0
	|			ТОГДА &ТаблицаПереоценкиСтоимостьНУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) 
	|		КОГДА &ТаблицаПереоценкиСтоимостьНУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0) <> 0
	|			ТОГДА -АмортизацияВНА.АмортизацияНУ 
	|					+ ВЫРАЗИТЬ(АмортизацияВНА.АмортизацияНУ
	|									* (&ТаблицаПереоценкиСтоимостьНУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиАмортизацииНУ,
	|	
		// Уценка амортизации УУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) = ЕСТЬNULL(АмортизацияВНА.Амортизация, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ 
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|			ТОГДА АмортизацияВНА.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияВНА.Амортизация * (ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииУУ,
	|
		// Уценка амортизации БУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) = (ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) + ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0))
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) 
	|					- ТаблицаПереоценки.СтоимостьБУ 
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|			ТОГДА (АмортизацияВНА.АмортизацияРегл + АмортизацияВНА.АмортизацияЦФ) 
	|					- ВЫРАЗИТЬ((АмортизацияВНА.АмортизацияРегл + АмортизацияВНА.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииБУ,
	|
		// Уценка амортизации НУ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА &ТаблицаПереоценкиСтоимостьНУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) = ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) <> 0
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) - &ТаблицаПереоценкиСтоимостьНУ 
	|		КОГДА &ТаблицаПереоценкиСтоимостьНУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) <> 0
	|			ТОГДА АмортизацияВНА.АмортизацияНУ 
	|					- ВЫРАЗИТЬ(АмортизацияВНА.АмортизацияНУ
	|									* (&ТаблицаПереоценкиСтоимостьНУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииНУ,
	|
		// Уценка амортизации ЦФ
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|				ИЛИ (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) = 0
	|				ИЛИ ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА 0
	|		КОГДА (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) = (ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) + ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0))
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0) > ТаблицаПереоценки.СтоимостьБУ
	|			ТОГДА АмортизацияВНА.АмортизацияЦФ - ТаблицаПереоценки.СтоимостьБУ 
	|		КОГДА АмортизацияВНА.АмортизацияЦФ > ВЫРАЗИТЬ((АмортизацияВНА.АмортизацияРегл + АмортизацияВНА.АмортизацияЦФ)
	|												* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2))
	|			ТОГДА АмортизацияВНА.АмортизацияЦФ 
	|					- ВЫРАЗИТЬ((АмортизацияВНА.АмортизацияРегл + АмортизацияВНА.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииЦФ,
	|
		// Резерв переоценки амортизации
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|
			// Дооценка и резерв > дооценки: Резерв = Дооценка
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0) < 0
	|				И (-АмортизацияВНА.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияВНА.Амортизация
	|						* (ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) КАК ЧИСЛО(31,2))) < -ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА -АмортизацияВНА.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияВНА.Амортизация * (ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) КАК ЧИСЛО(31,2))
	|
			// Дооценка и резерв <= дооценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0) < 0
	|				И (-АмортизацияВНА.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияВНА.Амортизация
	|							* (ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) КАК ЧИСЛО(31,2))) >= -ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0)
	|
			// Уценка и резерв > уценки: Резерв = Уценка
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0) > 0
	|				И (АмортизацияВНА.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияВНА.Амортизация 
	|								* (ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) КАК ЧИСЛО(31,2))) < ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА АмортизацияВНА.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияВНА.Амортизация * (ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) КАК ЧИСЛО(31,2))
	|
			// Уценка и резерв <= уценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0) > 0
	|				И (АмортизацияВНА.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияВНА.Амортизация 
	|								* (ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) КАК ЧИСЛО(31,2))) >= ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|
		// Резерв переоценки амортизации (регл)
	|	ВЫБОР 
	|		КОГДА НЕ ДанныеДокумента.ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|
			// Дооценка и резерв > дооценки: Резерв = Дооценка
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0) < 0
	|				И (-АмортизацияВНА.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияВНА.АмортизацияРегл 
	|								* (ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) КАК ЧИСЛО(31,2))) < -ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА -АмортизацияВНА.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияВНА.АмортизацияРегл * (ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) КАК ЧИСЛО(31,2))
	|
			// Дооценка и резерв <= дооценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0) < 0
	|				И (-АмортизацияВНА.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияВНА.АмортизацияРегл 
	|								* (ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) КАК ЧИСЛО(31,2))) >= -ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0)
	|
			// Уценка и резерв > уценки: Резерв = Уценка
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0) > 0
	|				И (АмортизацияВНА.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияВНА.АмортизацияРегл 
	|								* (ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) КАК ЧИСЛО(31,2))) < ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА АмортизацияВНА.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияВНА.АмортизацияРегл * (ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) КАК ЧИСЛО(31,2))
	|
			// Уценка и резерв <= уценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0) > 0
	|				И (АмортизацияВНА.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияВНА.АмортизацияРегл 
	|								* (ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) КАК ЧИСЛО(31,2))) >= ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторСтроки КАК ИдентификаторФинЗаписи
	|
	|ПОМЕСТИТЬ ТаблицаПереоценки
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаТаблица КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьВНА
	|		ПО СтоимостьВНА.Ссылка = ТаблицаПереоценки.Ссылка
	|			И СтоимостьВНА.ОбъектУчета = &ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияВНА
	|		ПО АмортизацияВНА.Ссылка = ТаблицаПереоценки.Ссылка
	|			И АмортизацияВНА.ОбъектУчета = &ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаОС КАК ПорядокУчета
	|		ПО ПорядокУчета.Ссылка = ТаблицаПереоценки.Ссылка
	|			И ПорядокУчета.ОсновноеСредство = &ОсновноеСредство
	|";
			
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
			
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивыПриПереоценке(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВтТаблицаПереоценки(Запрос, ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);

	ТекстыТекущегоЗапроса = Новый Массив;

	#Область Дооценка_УвеличениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_УвеличениеСтоимости                    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0)";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_УменьшениеВеличиныДооценкиСтоимости    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	ДанныеДокумента.СтатьяДоходов              КАК Статья,
	|	ДанныеДокумента.АналитикаДоходов           КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_УменьшениеСтоимости                    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	ДанныеДокумента.СтатьяРасходов             КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходов          КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_УменьшениеВеличиныДооценкиСтоимости    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УвеличениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_УвеличениеНакопленнойАмортизации       КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	ДанныеДокумента.СтатьяРасходов             КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходов          КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_УменьшениеНакопленнойАмортизации       КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	ДанныеДокумента.СтатьяДоходов              КАК Статья,
	|	ДанныеДокумента.АналитикаДоходов           КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                               КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеВеличиныДооценкиНакопленнойАмортизации 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                     КАК Регистратор,
	|	ДанныеДокумента.Период                     КАК Период,
	|	&ХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                КАК Организация,
	|
	|	ДанныеДокумента.Подразделение              КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Подразделение              КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	ДанныеДокумента.Организация                КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереоценки КАК ТаблицаПереоценки
	|		ПО ДанныеДокумента.Ссылка = ТаблицаПереоценки.Ссылка
	|
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры
 
Процедура ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента)

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ПрибыльУбыток", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки)");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПереоценкаОС2_4.ОС", ИмяДокумента + "." + ВидОбъектовУчета);
	
	Если ИмяДокумента = "Документ.ИзменениеУсловийДоговораАренды" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаПереоценкиСтоимостьНУ", "ТаблицаПереоценки.СтоимостьНУ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаПереоценкиСтоимостьНУ", "0");
	КонецЕсли;
	
	Если ВидОбъектовУчета = "ОС" Тогда 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаТаблица", "ДанныеДокументаТаблицаОС");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОсновноеСредство", "ТаблицаПереоценки.ОсновноеСредство");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Арендатор", "МестонахождениеОС.Арендатор");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХО_УвеличениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УвеличениеСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХО_УменьшениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХО_УвеличениеСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УвеличениеСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХО_УменьшениеСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеСтоимостиОС)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХО_УменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХО_УменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеВеличиныДооценкиСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ОС", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаИсправления", "ДатаИсправления = ДАТАВРЕМЯ(1,1,1)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаТаблица", "ДанныеДокументаТаблицаНМА");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОсновноеСредство", "ТаблицаПереоценки.НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ОсновноеСредство", "КАК НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втПорядокУчетаОС", "втПорядокУчетаНМА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПорядокУчета.ОсновноеСредство", "ПорядокУчета.НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втМестонахождениеОС", "втПустаяТаблицаОС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Арендатор", "НЕОПРЕДЕЛЕНО");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХО_УвеличениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УвеличениеСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХО_УменьшениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХО_УвеличениеСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УвеличениеСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХО_УменьшениеСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеСтоимостиНМА)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХО_УменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХО_УменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеВеличиныДооценкиСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХО_УменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ОС", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НематериальныеАктивы)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаИсправления", "");
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область МеждународныйУчет

Функция ИсточникиУточненияСчетаАмортизация(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивов,
		Новый Структура(СвойстваИсточника, "ГФУВнеоборотныеАктивы"));
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов,
		Новый Структура(СвойстваИсточника, "ГФУДоходовРасходов"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

Функция ИсточникиУточненияСчетаСтоимость(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивов,
		Новый Структура(СвойстваИсточника, "ГФУВнеоборотныеАктивы"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельности, "НаправлениеДеятельности");
	Результат.Вставить(ИсточникиНаправлений.КорНаправлениеДеятельности, "КорНаправлениеДеятельности");

	Возврат Результат;
	
КонецФункции

Функция ИсточникиПодразделенийАмортизация() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.Подразделение, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.КорПодразделение, "КорПодразделение");
	
	Возврат ИсточникиПодразделений;

КонецФункции

Функция ИсточникиПодразделенийСтоимость() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");

	Возврат ИсточникиПодразделений;

КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область Проведение

// Записывает движения из таблицы движений.
// 
// Параметры:
//  ТаблицыДляДвижений - Структура - Таблицы для движений.
//  Документ - ДокументОбъект - Документ.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
//  ВернутьДокументыКОтражению - Булево -
//  ИмяОперации - Строка - Операция в рамках которой выполняется запись движений.
//  ВидИсточника - ПеречислениеСсылка.ВидыИсточниковДвижений - Вид источника.
//	Период - Дата - Период записи движений.
//	
// Возвращаемое значение:
//  Число - количество обработанных данных
//
Функция ЗаписатьТаблицыДвижений(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, ВернутьДокументыКОтражению, ИмяОперации = Неопределено, ВидИсточника = Неопределено, Период = Неопределено) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ВнеоборотныеАктивыСлужебный.ЗаписатьТаблицыДвижений");

	ЗамещатьЗаписи = ВидИсточника = Неопределено;
	
	КоличествоДанных = 0;
	
	Для Каждого КлючИЗначение Из ТаблицыДляДвижений Цикл
		
		ИмяРегистра = ИмяРегистраПоИмениТаблицыДвижений(КлючИЗначение.Ключ);
		
		ТаблицаРегистра = КлючИЗначение.Значение; // ТаблицаЗначений
		Если ТаблицаРегистра.Колонки.Найти("Регистратор") <> Неопределено Тогда
			ЗаписиДокумента = ТаблицаРегистра.Скопировать(Новый Структура("Регистратор", Документ.Ссылка));
		Иначе
			ЗаписиДокумента = ТаблицаРегистра;
		КонецЕсли;
		
		Если ВРег(ИмяРегистра) = Врег("ОтражениеДокументовВРеглУчете") Тогда
			
			Если ВернутьДокументыКОтражению Тогда
				//++ Локализация
				РеглУчетПроведениеСервер.ВернутьДокументыКОтражению(ЗаписиДокумента);
				//-- Локализация
			КонецЕсли;
			
		//++ НЕ УТКА
		ИначеЕсли ВРег(ИмяРегистра) = Врег("ОтражениеДокументовВМеждународномУчете") Тогда
			
			Если ВернутьДокументыКОтражению Тогда
				МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению(ЗаписиДокумента);
			КонецЕсли;
		//-- НЕ УТКА
		
		Иначе
			Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
				ПространствоБлокировки = "РегистрСведений." + ИмяРегистра + ".НаборЗаписей";
			ИначеЕсли Метаданные.РегистрыНакопления.Найти(ИмяРегистра) <> Неопределено Тогда
				НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
				ПространствоБлокировки = "РегистрНакопления." + ИмяРегистра + ".НаборЗаписей";
			Иначе
				Продолжить;
			КонецЕсли;
			
			РазделятьЗаписиПоВидуИсточника = ВидИсточника <> Неопределено 
					И НаборЗаписей.Метаданные().Реквизиты.Найти("ВидИсточника") <> Неопределено;
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей.Отбор.Регистратор.Установить(Документ.Ссылка);
			
			Если РазделятьЗаписиПоВидуИсточника Тогда
				
				// Удаление записей с указанным видом источника
				НаборЗаписей.Прочитать();
				Для ИндексЗаписи = -НаборЗаписей.Количество() + 1 По 0 Цикл
					ЗаписьРегистра = НаборЗаписей[-ИндексЗаписи];
					Если ЗаписьРегистра.ВидИсточника = ВидИсточника
						И (Период = Неопределено
							ИЛИ ЗаписьРегистра.Период >= НачалоМесяца(Период) 
								И ЗаписьРегистра.Период <= КонецМесяца(Период)) Тогда
						НаборЗаписей.Удалить(-ИндексЗаписи);
					КонецЕсли;
					КоличествоДанных = КоличествоДанных + 1;
				КонецЦикла;
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
				НаборЗаписей.Очистить();
				НаборЗаписей.ДополнительныеСвойства.Удалить("ПроверкаДатыЗапретаИзменения");
				
			КонецЕсли;
			
			ПроведениеДокументов.УстановитьДопСвойстваРегистра(НаборЗаписей, Документ, МенеджерВременныхТаблиц, Истина);
	
			Если ИмяОперации <> Неопределено Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяОперации, Истина);
			КонецЕсли;
			
			Для Каждого ДанныеСтроки Из ЗаписиДокумента Цикл
				
				ЗаписьРегистра = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ДанныеСтроки);
				
				Если РазделятьЗаписиПоВидуИсточника Тогда
					ЗаписьРегистра.ВидИсточника = ВидИсточника;
				КонецЕсли;
				
				КоличествоДанных = КоличествоДанных + 1;
				
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Записать(ЗамещатьЗаписи Или Не РазделятьЗаписиПоВидуИсточника);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	Возврат КоличествоДанных;
	
КонецФункции

// Имя регистра по имени таблицы движений.
// 
// Параметры:
//  ИмяТаблицыДвижений - Строка -  Имя таблицы движений
// 
// Возвращаемое значение:
//  Строка - Имя регистра
Функция ИмяРегистраПоИмениТаблицыДвижений(ИмяТаблицыДвижений) Экспорт
	
	СлужебноеИмяТаблицы = ВРег("ТАБЛИЦА");
	ДлинаИмениТаблицы = СтрДлина(СлужебноеИмяТаблицы);
	
	ИмяРегистра = ИмяТаблицыДвижений;
	Если ВРег(Лев(ИмяРегистра, ДлинаИмениТаблицы)) = СлужебноеИмяТаблицы Тогда
		ИмяРегистра = Прав(ИмяРегистра, СтрДлина(ИмяРегистра) - ДлинаИмениТаблицы);
	КонецЕсли;
	
	Возврат ИмяРегистра;
	
КонецФункции

// Заменяет дополнительные поля в запросе.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ДополнительныеПоля - Строка - Дополнительные поля запроса
Процедура ЗаменитьДополнительныеПоляВЗапросе(ТекстЗапроса, ДополнительныеПоля) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПоля) Тогда
		
		ТекстДополнительныеПоля = "";
		
		СписокПолей = СтрРазделить(ДополнительныеПоля, ",");
		Для каждого ИмяПоля Из СписокПолей Цикл
			ТекстДополнительныеПоля = ТекстДополнительныеПоля + "
			|	, 0 КАК " + ИмяПоля;
		КонецЦикла; 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДополнительныеПоля", ТекстДополнительныеПоля); 
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДополнительныеПоля", "");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтразитьВУправленческомБалансе(ТаблицыДвижений, МенеджерВременныхТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицыУпрБаланса = Новый Структура;
	Для Каждого Таблица Из ТаблицыДвижений Цикл
		Для Каждого Элемент Из Таблица.Значение Цикл
			ТаблицыУпрБаланса.Вставить(Элемент.Ключ);
		КонецЦикла;
	КонецЦикла;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка
	|ИЗ
	|	ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ДокументыКОтражению = Новый Массив;
	ОтражениеДокумента = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипДокумента = ТипЗнч(Выборка.Ссылка);
		ДокументОтражаетсяВУпрБалансе = ОтражениеДокумента.Получить(ТипДокумента);
		Если ДокументОтражаетсяВУпрБалансе = Неопределено Тогда
			МетаданныеДокумента = Выборка.Ссылка.Метаданные();
			ДокументОтражаетсяВУпрБалансе = МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы);
			ОтражениеДокумента.Вставить(ТипДокумента, ДокументОтражаетсяВУпрБалансе);
		КонецЕсли;
		
		Если ДокументОтражаетсяВУпрБалансе Тогда
			ДокументыКОтражению.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Обработки.ДвиженияАктивовПассивов.ОтразитьДокументыВУправленческомБалансе(ДокументыКОтражению, ТаблицыУпрБаланса);
	
КонецПроцедуры

//++ НЕ УТКА

// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений - Тексты запроса
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
Процедура ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "ОтражениеДокументовВМеждународномУчете";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.Ссылка КАК Документ,
	|	ДанныеДокумента.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеДокумента.Период, ДЕНЬ) КАК ДатаОтражения,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Прочее

Процедура ВернутьДокументыКОтражению(Ссылка, Организация, Дата, ТаблицыДляДвижений) Экспорт
	
	ВнеоборотныеАктивыЛокализация.ВернутьДокументыКОтражению(Ссылка, Организация, Дата, ТаблицыДляДвижений);
	
	//++ НЕ УТКА
	Если Ссылка.Метаданные().Движения.Содержит(Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете) Тогда
		
		ИмяТаблицыОтражениеДокументовВМеждународномУчете = "Таблица" + "ОтражениеДокументовВМеждународномУчете";
		
		Если ТаблицыДляДвижений.Свойство(ИмяТаблицыОтражениеДокументовВМеждународномУчете) Тогда
			ТаблицаОтражениеДокументовВУчете = ТаблицыДляДвижений[ИмяТаблицыОтражениеДокументовВМеждународномУчете];
		ИначеЕсли ТаблицыДляДвижений.Свойство("ОтражениеДокументовВМеждународномУчете") Тогда
			ТаблицаОтражениеДокументовВУчете = ТаблицыДляДвижений.ОтражениеДокументовВМеждународномУчете;
		Иначе
			ТаблицаОтражениеДокументовВУчете = ТаблицаОтражениеДокументов(Ссылка, Организация, Дата);
		КонецЕсли;
		
		МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению(ТаблицаОтражениеДокументовВУчете);

	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ОбновитьДвиженияАктивовПассивов(Ссылка) Экспорт

	МетаданныеДокумента = Ссылка.Метаданные();
	Если НЕ МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы) Тогда
		Возврат;
	КонецЕсли;

	СписокРегистровДокумента = Новый Массив;

	БалансовыеРегистры = Обработки.ДвиженияАктивовПассивов.БалансовыеРегистры();
	Для Каждого Источник Из БалансовыеРегистры Цикл
		Если ВРег(Источник.Ключ) <> ВРег("ПрочиеАктивыПассивы")
			И МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления[Источник.Ключ]) Тогда
			СписокРегистровДокумента.Добавить(Источник.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеАктивыПассивы.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Для Каждого ИмяРегистра Из СписокРегистровДокумента Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления." + ИмяРегистра + ".НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	ДвиженияУпрБаланса = Новый Структура;

	ПрочиеАктивыПассивы = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
	ПрочиеАктивыПассивы.Отбор.Регистратор.Установить(Ссылка);
	ПрочиеАктивыПассивы.Прочитать();
	ДвиженияУпрБаланса.Вставить("ПрочиеАктивыПассивы", ПрочиеАктивыПассивы.Выгрузить());
	
	Для Каждого ИмяРегистра Из СписокРегистровДокумента Цикл
		Движения = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		Движения.Отбор.Регистратор.Установить(Ссылка);
		Движения.Прочитать();
		ДвиженияУпрБаланса.Вставить(ИмяРегистра, Движения.Выгрузить());
	КонецЦикла;
	
	УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивов(Ссылка, ДвиженияУпрБаланса);
	
	ПрочиеАктивыПассивы.Загрузить(ДвиженияУпрБаланса.ПрочиеАктивыПассивы);
	
	ПрочиеАктивыПассивы.Записать();
	
КонецПроцедуры

Функция ТаблицаОтражениеДокументов(ДокументСсылка, Организация, ДатаОтражения) Экспорт

	ТаблицаОтражениеДокументов = Новый ТаблицаЗначений;
	ТаблицаОтражениеДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ДокументСсылка))));
	ТаблицаОтражениеДокументов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтражениеДокументов.Колонки.Добавить("ДатаОтражения", Новый ОписаниеТипов("Дата"));
	ТаблицаОтражениеДокументов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ТаблицаОтражениеДокументов.Добавить();
	НоваяСтрока.Документ = ДокументСсылка;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.ДатаОтражения = НачалоДня(ДатаОтражения);
	НоваяСтрока.Период = НачалоДня(ДатаОтражения);

	Возврат ТаблицаОтражениеДокументов;
	
КонецФункции

Процедура ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
		ТекстОтборы = ТекстОтборы + "
			|" + ?(ТекстОтборы <> "", "И (","(") + ТекстУсловия + ")";
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокНадписиОДокументеВДругомУчете(РеквизитыДокумента)

	ЗаголовокНадписи = Новый Массив;
	Если РеквизитыДокумента.ПометкаУдаления 
		ИЛИ РеквизитыДокумента.ОтражатьВУпрУчете 
			И РеквизитыДокумента.ОтражатьВРеглУчете Тогда						
		// Гиперссылка о док-те  в другом учете не выводится, если другой документ отражается в обоих учетах.
		Возврат ЗаголовокНадписи;
	КонецЕсли; 
	
	МетаданныеДокумента = РеквизитыДокумента.Ссылка.Метаданные();
	ПредставлениеДокумента = ПредставлениеДокумента(МетаданныеДокумента.Синоним);
	ТекстПринятУУ = СтрШаблон(НСтр("ru = 'В управленческом учете создан документ %1';
									|en = 'The %1 document is created in management accounting'"), ПредставлениеДокумента);
	ТекстПринятБУ = СтрШаблон(НСтр("ru = 'В регламентированном учете создан документ %1';
									|en = 'The %1 document is created in local accounting'"), ПредставлениеДокумента);
		
	Если РеквизитыДокумента.ОтражатьВУпрУчете Тогда
		ЗаголовокНадписи.Добавить(ТекстПринятУУ);
	Иначе
		ЗаголовокНадписи.Добавить(ТекстПринятБУ);
	КонецЕсли;
	ЗаголовокНадписи.Добавить(" ");
	
	ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№%1 от %2';
										|en = 'No. %1 from %2'"), 
								ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
										РеквизитыДокумента.Номер, Ложь, Истина),
								Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	
	ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаказа,,,, ПолучитьНавигационнуюСсылку(РеквизитыДокумента.Ссылка)));
	
	Если НЕ РеквизитыДокумента.Проведен Тогда
		ЗаголовокНадписи.Добавить(" ");
		ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(
									НСтр("ru = 'не проведен';
										|en = 'not posted'"),, ЦветаСтиля.ЦветОсобогоТекста));
	КонецЕсли;
		
	Возврат ЗаголовокНадписи;
	
КонецФункции

Функция НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан)
	
	ЗаголовокНадписи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЗаголовокНадписи;
	КонецЕсли;
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ПредставлениеДокумента = ПредставлениеДокумента(МетаданныеДокумента.Синоним);
	ТекстНеПринятУУ = СтрШаблон(НСтр("ru = 'В управленческом учете не создан документ %1';
									|en = 'The %1 document is not created in management accounting'"), ПредставлениеДокумента);
	ТекстНеПринятБУ = СтрШаблон(НСтр("ru = 'В регламентированном учете не создан документ %1';
									|en = 'The %1 document is not created in local accounting'"), ПредставлениеДокумента);
	ТекстОформить = НСтр("ru = 'Создать';
						|en = 'Create'");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ПометкаУдаления,
	|	ДанныеДокумента.Проведен,
	|	ДанныеДокумента.ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|ИЗ
	|	ИмяДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументВДругомУчете = &Ссылка
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	2,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ПометкаУдаления,
	|	ДанныеДокумента.Проведен,
	|	ДанныеДокумента.ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|ИЗ
	|	ИмяДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументВДругомУчете = &Ссылка
	|	И НЕ ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяДокумента", "Документ." + ИмяДокумента);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаголовокНадписи = ЗаголовокНадписиОДокументеВДругомУчете(Выборка);
		
	ИначеЕсли (НЕ Объект.ОтражатьВУпрУчете ИЛИ НЕ Объект.ОтражатьВРеглУчете) И ПоказатьИнформациюЕслиНеСоздан Тогда
		
		Если НЕ Объект.ОтражатьВУпрУчете Тогда
			ЗаголовокНадписи.Добавить(ТекстНеПринятУУ);
		Иначе
			ЗаголовокНадписи.Добавить(ТекстНеПринятБУ);
		КонецЕсли;
		
		Если ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы[ИмяДокумента]) Тогда
			ЗаголовокНадписи.Добавить(" ");
			ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстОформить,,,, "#СоздатьДокумент"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаголовокНадписи;

КонецФункции

Функция ПредставлениеДокумента(СинонимДокумента)

	ПредставлениеДокумента = СинонимДокумента;
	
	Если СтрЗаканчиваетсяНа(СинонимДокумента, НСтр("ru = 'ОС';
													|en = 'Fixed assets'")) Тогда
		ПредставлениеДокумента = СокрЛП(Лев(СинонимДокумента, СтрДлина(СинонимДокумента) - 2));
	ИначеЕсли СтрЗаканчиваетсяНа(СинонимДокумента, НСтр("ru = 'НМА';
														|en = 'Intangible assets'")) Тогда
		ПредставлениеДокумента = СокрЛП(Лев(СинонимДокумента, СтрДлина(СинонимДокумента) - 3));
	КонецЕсли; 

	Возврат ПредставлениеДокумента;
	
КонецФункции

Процедура СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ)
	
	Если ОсновноеСредствоВШапке Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ОсновноеСредство",, Отказ);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция РегистрПоддерживаетИсправление(ИмяРегистра) Экспорт
	
	СписокРегистров = Новый Массив;
	СписокРегистров.Добавить(ВРег("МестонахождениеОС"));
	СписокРегистров.Добавить(ВРег("ПараметрыАмортизацииОСБУ"));
	СписокРегистров.Добавить(ВРег("ПараметрыАмортизацииОСУУ"));
	СписокРегистров.Добавить(ВРег("ПервоначальныеСведенияОС"));
	СписокРегистров.Добавить(ВРег("ПорядокУчетаОС"));
	СписокРегистров.Добавить(ВРег("ПорядокУчетаОСБУ"));
	СписокРегистров.Добавить(ВРег("ПорядокУчетаОСУУ"));

	ВнеоборотныеАктивыЛокализация.ДополнитьРегистрыПоддерживающиеИсправления(СписокРегистров);
		
	Возврат СписокРегистров.Найти(ВРег(ИмяРегистра)) <> Неопределено;
	
КонецФункции

Процедура ПроверитьВыполнениеОбработчика(ПроблемныхОбъектов, ОбъектовОбработано, ПолноеИмяОбъекта) Экспорт

 	Если ПроблемныхОбъектов <> 0 И ОбъектовОбработано = 0 Тогда
		ТекстСообщения = 
			СтрШаблон(НСтр("ru = 'Не удалось выполнить обработчик обновления объекта метаданных ""%1"".
						   |Подробности в журнале регистрации.';
						   |en = 'The metadata object update handler ""%1"" failed.
						   |Details in the event log.'"),
						ПолноеИмяОбъекта);
 		
		ВызватьИсключение ТекстСообщения;
 	КонецЕсли;
	
КонецПроцедуры

// 
// Параметры:
//  СведенияОбУчете - Структура - Сведения об учете
//  ПредставлениеСведений - Структура - Представление сведений
Процедура ПредставлениеСведенийОДатеПринятияКУчету(СведенияОбУчете, ПредставлениеСведений) Экспорт
	
	Если СведенияОбУчете = Неопределено Тогда
		ПредставлениеСведений.Вставить("СведенияПринятКУчету1", Неопределено);
		ПредставлениеСведений.Вставить("СведенияПринятКУчету2", Неопределено);
		ПредставлениеСведений.Вставить("СведенияПринятКУчету3", Неопределено);
		Возврат;	
	КонецЕсли;
	
	ПараметрыСведений = ПараметрыСведений();
	ПараметрыСведений.ИмяСведений = "СведенияПринятКУчету";
	ПараметрыСведений.Значение1 = СведенияОбУчете.ДатаВводаВЭксплуатациюБУ;
	ПараметрыСведений.Значение2 = СведенияОбУчете.ДатаВводаВЭксплуатациюНУ;
	ПараметрыСведений.Значение3 = СведенияОбУчете.ДатаВводаВЭксплуатациюУУ;
	ПараметрыСведений.Документ1 = СведенияОбУчете.ДокументВводаВЭксплуатациюБУ;
	ПараметрыСведений.Документ2 = СведенияОбУчете.ДокументВводаВЭксплуатациюНУ;
	ПараметрыСведений.Документ3 = СведенияОбУчете.ДокументВводаВЭксплуатациюУУ;

	Если СведенияОбУчете <> Неопределено
		И (СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
			ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету) Тогда
				
		ПараметрыСведений.Заголовок = НСтр("ru = 'Дата принятия к забалансовому учету:';
											|en = 'Date of entering in off-balance accounting:'");
	Иначе
		ПараметрыСведений.Заголовок = НСтр("ru = 'Дата принятия к учету:';
											|en = 'Date of recognition:'");
		ПараметрыСведений.Заголовок1 = НСтр("ru = 'Дата принятия в бух. учете:';
											|en = 'Date of recognition in accounting:'");
		ПараметрыСведений.Заголовок2 = НСтр("ru = 'Дата принятия в нал. учете:';
											|en = 'Date of recognition in tax accounting:'");
		ПараметрыСведений.Заголовок3 = НСтр("ru = 'Дата принятия в упр. учете:';
											|en = 'Date of recognition in manag. accounting:'");
	КонецЕсли;

	ПараметрыСведений.Действие1 = Новый ФорматированнаяСтрока(НСтр("ru = 'Принять к учету';
																	|en = 'Recognize'"),,,, "#Создать");
	
	ПредставлениеСведений(ПараметрыСведений, СведенияОбУчете, ПредставлениеСведений);
	
КонецПроцедуры

// 
// Параметры:
//  СведенияОбУчете - Структура - 
//  ПредставлениеСведений - Структура -
Процедура ПредставлениеСведенийОСрокеИспользования(СведенияОбУчете, ПредставлениеСведений) Экспорт
	
	Если СведенияОбУчете = Неопределено Тогда
		ПредставлениеСведений.Вставить("СведенияСрокИспользования1", Неопределено);
		ПредставлениеСведений.Вставить("СведенияСрокИспользования2", Неопределено);
		ПредставлениеСведений.Вставить("СведенияСрокИспользования3", Неопределено);
		Возврат;	
	КонецЕсли;

	ПараметрыСведений = ПараметрыСведений();
	ПараметрыСведений.ИмяСведений = "СведенияСрокИспользования";
	ПараметрыСведений.Значение1 = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СведенияОбУчете.СрокИспользованияБУ, Ложь);
	ПараметрыСведений.Значение2 = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СведенияОбУчете.СрокИспользованияНУ, Ложь);
	ПараметрыСведений.Значение3 = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СведенияОбУчете.СрокИспользованияУУ, Ложь);
	
	Если СведенияОбУчете.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		ПараметрыСведений.Заголовок = НСтр("ru = 'Срок списания:';
											|en = 'Write-off period:'");
		ПараметрыСведений.Заголовок1 = НСтр("ru = 'Срок списания (БУ):';
											|en = 'Write-off period (AC):'");
		ПараметрыСведений.Заголовок2 = НСтр("ru = 'Срок списания (НУ):';
											|en = 'Write-off period (TA):'");
		ПараметрыСведений.Заголовок3 = НСтр("ru = 'Срок списания (УУ):';
											|en = 'Write-off period (MA):'");
	Иначе
		ПараметрыСведений.Заголовок = НСтр("ru = 'Срок использования:';
											|en = 'Useful life:'");
		ПараметрыСведений.Заголовок1 = НСтр("ru = 'Срок использования (БУ):';
											|en = 'Useful life (AC):'");
		ПараметрыСведений.Заголовок2 = НСтр("ru = 'Срок использования (НУ):';
											|en = 'Useful life (TA):'");
		ПараметрыСведений.Заголовок3 = НСтр("ru = 'Срок использования (УУ):';
											|en = 'Useful life (MA):'");
	КонецЕсли; 
	
	ПредставлениеСведений(ПараметрыСведений, СведенияОбУчете, ПредставлениеСведений);
	
КонецПроцедуры

// 
// Параметры:
//  СведенияОбУчете - Структура - 
//  ПредставлениеСведений - Структура -
Процедура ПредставлениеСведенийОДатеСписания(СведенияОбУчете, ПредставлениеСведений) Экспорт

	Если СведенияОбУчете = Неопределено Тогда
		ПредставлениеСведений.Вставить("СведенияСнятСУчета1", Неопределено);
		ПредставлениеСведений.Вставить("СведенияСнятСУчета2", Неопределено);
		ПредставлениеСведений.Вставить("СведенияСнятСУчета3", Неопределено);
		Возврат;	
	КонецЕсли;

	ПараметрыСведений = ПараметрыСведений();
	ПараметрыСведений.ИмяСведений = "СведенияСнятСУчета";
	ПараметрыСведений.Значение1 = СведенияОбУчете.ДатаСнятияСУчетаБУ;
	ПараметрыСведений.Значение2 = СведенияОбУчете.ДатаСнятияСУчетаНУ;
	ПараметрыСведений.Значение3 = СведенияОбУчете.ДатаСнятияСУчетаУУ;
	ПараметрыСведений.Документ1 = СведенияОбУчете.ДокументСнятияСУчетаБУ;
	ПараметрыСведений.Документ2 = СведенияОбУчете.ДокументСнятияСУчетаНУ;
	ПараметрыСведений.Документ3 = СведенияОбУчете.ДокументСнятияСУчетаУУ;
	ПараметрыСведений.Заголовок = НСтр("ru = 'Дата снятия с учета:';
										|en = 'Deregistration date:'");
	ПараметрыСведений.Заголовок1 = НСтр("ru = 'Дата снятия в бух. учете:';
										|en = 'Derecognition in accounting date:'");
	ПараметрыСведений.Заголовок2 = НСтр("ru = 'Дата снятия в нал. учете:';
										|en = 'Derecognition in tax accounting date:'");
	ПараметрыСведений.Заголовок3 = НСтр("ru = 'Дата снятия в упр. учете:';
										|en = 'Derecognition in manag. accounting date:'");
	
	ПредставлениеСведений(ПараметрыСведений, СведенияОбУчете, ПредставлениеСведений);
	
КонецПроцедуры

// 
// Параметры:
//  СведенияОбУчете - Структура - 
//  ПредставлениеСведений - Структура -
Процедура ПредставлениеСведенийОЛиквидационнойСтоимости(СведенияОбУчете, ПредставлениеСведений) Экспорт
	
	Если СведенияОбУчете = Неопределено
		ИЛИ СведенияОбУчете.ЛиквидационнаяСтоимость = 0
			И СведенияОбУчете.ЛиквидационнаяСтоимостьРегл = 0 Тогда
		ПредставлениеСведений.Вставить("СведенияЛиквидационнаяСтоимость", Неопределено);
		ПредставлениеСведений.Вставить("СведенияЛиквидационнаяСтоимостьРегл", Неопределено);
		Возврат;
	КонецЕсли;
	
	Если СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету
		ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияНМА.ПринятКУчету
		ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
		ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияНМА.ПринятКУчету
		ИЛИ СведенияОбУчете.СостояниеНУ = Перечисления.СостоянияОС.ПринятоКУчету
		ИЛИ СведенияОбУчете.СостояниеНУ = Перечисления.СостоянияНМА.ПринятКУчету
		ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияНМА.Списан
		ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияНМА.Списан
		ИЛИ СведенияОбУчете.СостояниеНУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ СведенияОбУчете.СостояниеНУ = Перечисления.СостоянияНМА.Списан Тогда
		
		ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СведенияОбУчете.Организация);
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		
		ВалютаРеглПредставление = Строка(ВалютаРегл);
		ВалютаУпрПредставление = Строка(ВалютаУпр);
		
		НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо();
		
		Если СведенияОбУчете.ЛиквидационнаяСтоимость = СведенияОбУчете.ЛиквидационнаяСтоимостьРегл
			И ВалютаРегл = ВалютаУпр
			И НЕ НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо() Тогда
			
			ПредставлениеСведенийПоСумме(
				"СведенияЛиквидационнаяСтоимость", 
				НСтр("ru = 'Ликвидационная стоимость:';
					|en = 'Residual value:'"), 
				СведенияОбУчете.ЛиквидационнаяСтоимость, 
				ВалютаУпрПредставление, 
				ПредставлениеСведений); 
		
			ПредставлениеСведений.Вставить("СведенияЛиквидационнаяСтоимостьРегл", Неопределено);
		
		Иначе
		
			ПредставлениеСведенийПоСумме(
				"СведенияЛиквидационнаяСтоимость", 
				НСтр("ru = 'Ликвидационная стоимость (упр):';
					|en = 'Residual value (manag.):'"), 
				СведенияОбУчете.ЛиквидационнаяСтоимость, 
				ВалютаУпрПредставление, 
				ПредставлениеСведений); 
			
			ПредставлениеСведенийПоСумме(
				"СведенияЛиквидационнаяСтоимостьРегл", 
				НСтр("ru = 'Ликвидационная стоимость (регл):';
					|en = 'Residual value (local):'"), 
				СведенияОбУчете.ЛиквидационнаяСтоимостьРегл, 
				ВалютаРеглПредставление, 
				ПредставлениеСведений); 
				
		КонецЕсли;
		
	Иначе
		ПредставлениеСведений.Вставить("СведенияЛиквидационнаяСтоимость", Неопределено);
		ПредставлениеСведений.Вставить("СведенияЛиквидационнаяСтоимостьРегл", Неопределено);
	КонецЕсли;
		
КонецПроцедуры

// 
// Параметры:
//  ИмяСведений - Строка - 
//  Заголовок - Строка - 
//  Сумма - Число - 
//  ПредставлениеВалюты - Строка - 
//  ПредставлениеСведений - Структура - 
Процедура ПредставлениеСведенийПоСумме(ИмяСведений, Заголовок, Сумма, ПредставлениеВалюты, ПредставлениеСведений) Экспорт

	Результат = Новый Массив;
	Результат.Добавить(Заголовок);
	Результат.Добавить(" ");
	Результат.Добавить(Строка(Сумма));
	Результат.Добавить(" ");
	Результат.Добавить(ПредставлениеВалюты);

	ПредставлениеСведений.Вставить(ИмяСведений, Результат);
	
КонецПроцедуры

// 
// Параметры:
//  ИмяСведений - Строка - Имя сведений
//  Заголовок - Строка - Заголовок
//  Ссылка - ЛюбаяСсылка - 
//  ПредставлениеСсылки - Строка - 
//  ПредставлениеСведений - Структура - 
Процедура ПредставлениеСведенийПоСсылке(ИмяСведений, Заголовок, Ссылка, ПредставлениеСсылки, ПредставлениеСведений) Экспорт
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Результат.Добавить(Заголовок);
		Результат.Добавить(" ");
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(Ссылка);
		Иначе
			СсылкаНаОбъект = Неопределено;
		КонецЕсли;
		Результат.Добавить(Новый ФорматированнаяСтрока(ПредставлениеСсылки,,,, СсылкаНаОбъект));
		Результат.Добавить(" ");
	КонецЕсли;
			
	ПредставлениеСведений.Вставить(ИмяСведений, Результат);
	
КонецПроцедуры

Процедура ПредставлениеСведений(ПараметрыСведений, СведенияОбУчете, ПредставлениеСведений)
	
	Если СведенияОбУчете = Неопределено Тогда
		ПредставлениеСведений.Вставить(ПараметрыСведений.ИмяСведений + "1", Неопределено);
		ПредставлениеСведений.Вставить(ПараметрыСведений.ИмяСведений + "2", Неопределено);
		ПредставлениеСведений.Вставить(ПараметрыСведений.ИмяСведений + "3", Неопределено);
		Возврат;
	КонецЕсли;
	
	ВедетсяРегламентированныйУчетВНА = ВедетсяРегламентированныйУчетВНА();
	
	ПредставлениеСведений1 = Новый Массив;
	ПредставлениеСведений2 = Новый Массив;
	ПредставлениеСведений3 = Новый Массив;
	
	Если СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету
		ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
		ИЛИ СведенияОбУчете.СостояниеНУ = Перечисления.СостоянияОС.ПринятоКУчету
		ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ СведенияОбУчете.СостояниеНУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияНМА.ПринятКУчету
		ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияНМА.ПринятКУчету
		ИЛИ СведенияОбУчете.СостояниеНУ = Перечисления.СостоянияНМА.ПринятКУчету
		ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияНМА.Списан
		ИЛИ СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияНМА.Списан
		ИЛИ СведенияОбУчете.СостояниеНУ = Перечисления.СостоянияНМА.Списан Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСведений.Значение1) 
				И ЗначениеЗаполнено(ПараметрыСведений.Значение2)
				И ЗначениеЗаполнено(ПараметрыСведений.Значение3)
				И ПараметрыСведений.Значение1 = ПараметрыСведений.Значение2
				И ПараметрыСведений.Значение1 = ПараметрыСведений.Значение3
			ИЛИ ЗначениеЗаполнено(ПараметрыСведений.Значение1) 
				И ЗначениеЗаполнено(ПараметрыСведений.Значение3)
				И ПараметрыСведений.Значение3 = ПараметрыСведений.Значение3
				И НЕ ВедетсяРегламентированныйУчетВНА Тогда
		
			ПредставлениеСведений1.Добавить(ПараметрыСведений.Заголовок);
			ПредставлениеСведений1.Добавить(" ");
			Если ТипЗнч(ПараметрыСведений.Значение1) = Тип("Дата") Тогда
				ПредставлениеЗначения = Формат(ПараметрыСведений.Значение1, "ДЛФ=D");
			Иначе
				ПредставлениеЗначения = ПараметрыСведений.Значение1;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыСведений.Документ1) Тогда
				СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(ПараметрыСведений.Документ1);
				ПредставлениеСведений1.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗначения,,,, СсылкаНаОбъект));
			Иначе
				ПредставлениеСведений1.Добавить(ПредставлениеЗначения);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ПараметрыСведений.Значение1) Тогда
					
				ПредставлениеСведений1.Добавить(ПараметрыСведений.Заголовок1);
				ПредставлениеСведений1.Добавить(" ");
				Если ТипЗнч(ПараметрыСведений.Значение1) = Тип("Дата") Тогда
					ПредставлениеЗначения = Формат(ПараметрыСведений.Значение1, "ДЛФ=D");
				Иначе
					ПредставлениеЗначения = ПараметрыСведений.Значение1;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыСведений.Документ1) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(ПараметрыСведений.Документ1);
				Иначе
					СсылкаНаОбъект = Неопределено;
				КонецЕсли;
				ПредставлениеСведений1.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗначения,,,, СсылкаНаОбъект));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыСведений.Значение2) Тогда
					
				ПредставлениеСведений2.Добавить(ПараметрыСведений.Заголовок2);
				ПредставлениеСведений2.Добавить(" ");
				Если ТипЗнч(ПараметрыСведений.Значение2) = Тип("Дата") Тогда
					ПредставлениеЗначения = Формат(ПараметрыСведений.Значение2, "ДЛФ=D");
				Иначе
					ПредставлениеЗначения = ПараметрыСведений.Значение2;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыСведений.Документ2) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(ПараметрыСведений.Документ2);
				Иначе
					СсылкаНаОбъект = Неопределено;
				КонецЕсли;
				ПредставлениеСведений2.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗначения,,,, СсылкаНаОбъект));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыСведений.Значение3) Тогда
				
				ПредставлениеСведений3.Добавить(ПараметрыСведений.Заголовок3);
				ПредставлениеСведений3.Добавить(" ");
				Если ТипЗнч(ПараметрыСведений.Значение3) = Тип("Дата") Тогда
					ПредставлениеЗначения = Формат(ПараметрыСведений.Значение3, "ДЛФ=D");
				Иначе
					ПредставлениеЗначения = ПараметрыСведений.Значение3;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыСведений.Документ3) Тогда
					СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(ПараметрыСведений.Документ3);
				Иначе
					СсылкаНаОбъект = Неопределено;
				КонецЕсли;
				ПредставлениеСведений3.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗначения,,,, СсылкаНаОбъект));
			КонецЕсли; 
			
		КонецЕсли;
		
	ИначеЕсли СведенияОбУчете.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
		ИЛИ СведенияОбУчете.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
		 
		ПредставлениеСведений1.Добавить(ПараметрыСведений.Заголовок);
		ПредставлениеСведений1.Добавить(" ");
		Если ТипЗнч(ПараметрыСведений.Значение1) = Тип("Дата") Тогда
			ПредставлениеЗначения = Формат(ПараметрыСведений.Значение1, "ДЛФ=D");
		Иначе
			ПредставлениеЗначения = ПараметрыСведений.Значение1;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыСведений.Документ1) Тогда
			СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(ПараметрыСведений.Документ1);
			ПредставлениеСведений1.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗначения,,,, СсылкаНаОбъект));
		Иначе
			ПредставлениеСведений1.Добавить(ПредставлениеЗначения);
		КонецЕсли;
		 
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСведений.Действие1) Тогда
		 
		ПредставлениеСведений1.Добавить(ПараметрыСведений.Действие1);
		
	КонецЕсли;
	
	ПредставлениеСведений.Вставить(ПараметрыСведений.ИмяСведений + "1", ПредставлениеСведений1);
	ПредставлениеСведений.Вставить(ПараметрыСведений.ИмяСведений + "2", ПредставлениеСведений2);
	ПредставлениеСведений.Вставить(ПараметрыСведений.ИмяСведений + "3", ПредставлениеСведений3);
	
КонецПроцедуры

Функция ПараметрыСведений()
	
	ПараметрыСведений = Новый Структура;
	
	ПараметрыСведений.Вставить("Значение1", "");
	ПараметрыСведений.Вставить("Значение2", "");
	ПараметрыСведений.Вставить("Значение3", "");
	
	ПараметрыСведений.Вставить("Заголовок", "");
	ПараметрыСведений.Вставить("Заголовок1", "");
	ПараметрыСведений.Вставить("Заголовок2", "");
	ПараметрыСведений.Вставить("Заголовок3", "");
	
	ПараметрыСведений.Вставить("Документ1", Неопределено);
	ПараметрыСведений.Вставить("Документ2", Неопределено);
	ПараметрыСведений.Вставить("Документ3", Неопределено);
	
	ПараметрыСведений.Вставить("ИмяСведений", "");
	ПараметрыСведений.Вставить("Действие1", Неопределено);
	
	Возврат ПараметрыСведений;
	
КонецФункции

// 
// Параметры:
//  ИмяРегистра - Строка - 
//  ИмяТаблицы - Строка - 
//  ИмяТаблицыПериодыПараметров - Строка -
//  ОбъектУчета - Строка -
//  СписокЗапросов - Массив из Строка - 
Процедура ДобавитьТекстЗапросаТаблицыСправкиРасчетАмортизации(ИмяРегистра, ИмяТаблицы, ИмяТаблицыПериодыПараметров, ОбъектУчета, СписокЗапросов) Экспорт

	РегистрПоддерживаетИсправление = РегистрПоддерживаетИсправление(ИмяРегистра);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОсновнаяТаблица.Период КАК Период,
	|	ОсновнаяТаблица.ПериодПараметров КАК ПериодПараметров,
	|	ОсновнаяТаблица.КонецПериодаПараметров КАК КонецПериодаПараметров,
	|	ОсновнаяТаблица.Организация КАК Организация,
	|	ОсновнаяТаблица.ПолеОбъектУчета КАК ПолеОбъектУчета,
	|
	|	МАКСИМУМ(ТаблицаРегистра.Период) КАК ПериодСрезаПоследних,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ)) КАК ПериодНачалоДня
	|
	|ПОМЕСТИТЬ ТаблицаРегистра_СрезПоследних_Период
	|
	|ИЗ
	|	ТаблицаПериодыПараметров КАК ОсновнаяТаблица
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистраИсточник КАК ТаблицаРегистра
	|		ПО ТаблицаРегистра.Организация = ОсновнаяТаблица.Организация
	|			И ТаблицаРегистра.ПолеОбъектУчета = ОсновнаяТаблица.ПолеОбъектУчета
	|			И ТаблицаРегистра.Период <= ОсновнаяТаблица.ПериодПараметров
	|			И ТаблицаРегистра.ДатаИсправления <= ОсновнаяТаблица.КонецПериодаПараметров
	|			И ТаблицаРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновнаяТаблица.Период,
	|	ОсновнаяТаблица.ПериодПараметров,
	|	ОсновнаяТаблица.КонецПериодаПараметров,
	|	ОсновнаяТаблица.Организация,
	|	ОсновнаяТаблица.ПолеОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолеОбъектУчета,
	|	Организация,
	|	ПериодСрезаПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнаяТаблица.Период КАК Период,
	|	ОсновнаяТаблица.ПериодПараметров КАК ПериодПараметров,
	|	ОсновнаяТаблица.Организация КАК Организация,
	|	ОсновнаяТаблица.ПолеОбъектУчета КАК ПолеОбъектУчета,
	|
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистра.ДатаИсправления, ДЕНЬ), ДАТАВРЕМЯ(1,1,1))) <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ОсновнаяТаблица.ПериодСрезаПоследних, ДЕНЬ)
	|		ИНАЧЕ ОсновнаяТаблица.ПериодСрезаПоследних 
	|	КОНЕЦ КАК ПериодСрезаПоследних,
	|
	|	МАКСИМУМ(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистра.ДатаИсправления, ДЕНЬ), ДАТАВРЕМЯ(1,1,1))) КАК ДатаИсправленияСрезаПоследних
	|
	|ПОМЕСТИТЬ ТаблицаРегистра_СрезПоследних_ДатаИсправления
	|
	|ИЗ
	|	ТаблицаРегистра_СрезПоследних_Период КАК ОсновнаяТаблица
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистраИсточник КАК ТаблицаРегистра
	|		ПО ТаблицаРегистра.Организация = ОсновнаяТаблица.Организация
	|			И ТаблицаРегистра.ПолеОбъектУчета = ОсновнаяТаблица.ПолеОбъектУчета
	|			И ТаблицаРегистра.Период = ОсновнаяТаблица.ПериодНачалоДня
	|			И ТаблицаРегистра.ДатаИсправления <= ОсновнаяТаблица.КонецПериодаПараметров
	|			И ТаблицаРегистра.ДатаИсправления <> ДАТАВРЕМЯ(1,1,1)
	|			И ТаблицаРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновнаяТаблица.Период,
	|	ОсновнаяТаблица.ПериодПараметров,
	|	ОсновнаяТаблица.Организация,
	|	ОсновнаяТаблица.ПолеОбъектУчета,
	|	ОсновнаяТаблица.ПериодСрезаПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолеОбъектУчета,
	|	Организация,
	|	ПериодСрезаПоследних	
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнаяТаблица.Период КАК Период,
	|	ОсновнаяТаблица.ПериодПараметров КАК ПериодПараметров,
	|	ОсновнаяТаблица.Организация КАК Организация,
	|	ОсновнаяТаблица.ПолеОбъектУчета КАК ПолеОбъектУчета,
	|	ОсновнаяТаблица.ПериодСрезаПоследних КАК ПериодСрезаПоследних,
	|
	|	МАКСИМУМ(ТаблицаРегистра.Регистратор) КАК РегистраторСрезаПоследних
	|
	|ПОМЕСТИТЬ ТаблицаРегистра_СрезПоследних_Регистратор
	|
	|ИЗ
	|	ТаблицаРегистра_СрезПоследних_ДатаИсправления КАК ОсновнаяТаблица
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистраИсточник КАК ТаблицаРегистра
	|		ПО ТаблицаРегистра.Организация = ОсновнаяТаблица.Организация
	|			И ТаблицаРегистра.ПолеОбъектУчета = ОсновнаяТаблица.ПолеОбъектУчета
	|			И ТаблицаРегистра.Период = ОсновнаяТаблица.ПериодСрезаПоследних
	|			И ТаблицаРегистра.ДатаИсправления = ОсновнаяТаблица.ДатаИсправленияСрезаПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновнаяТаблица.Период,
	|	ОсновнаяТаблица.ПериодПараметров,
	|	ОсновнаяТаблица.Организация,
	|	ОсновнаяТаблица.ПолеОбъектУчета,
	|	ОсновнаяТаблица.ПериодСрезаПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолеОбъектУчета,
	|	Организация,
	|	ПериодСрезаПоследних	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнаяТаблица.Период КАК Период,
	|
	|	&ТекстПолейРегистра
	|
	|ПОМЕСТИТЬ ИмяТаблицы
	|
	|ИЗ
	|	ТаблицаРегистра_СрезПоследних_Регистратор КАК ОсновнаяТаблица
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистраИсточник КАК ТаблицаРегистра
	|		ПО ТаблицаРегистра.Организация = ОсновнаяТаблица.Организация
	|			И ТаблицаРегистра.ПолеОбъектУчета = ОсновнаяТаблица.ПолеОбъектУчета
	|			И ТаблицаРегистра.Период = ОсновнаяТаблица.ПериодСрезаПоследних
	|			И ТаблицаРегистра.Регистратор = ОсновнаяТаблица.РегистраторСрезаПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ПолеОбъектУчета
	|	,ОрганизацияИндекс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРегистра_СрезПоследних_Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРегистра_СрезПоследних_ДатаИсправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРегистра_СрезПоследних_Регистратор
	|";
	
	ТекстПолейРегистра = ТекстПолейРегистра(ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолейРегистра", ТекстПолейРегистра);
	
	Если НЕ ВРегистреЕстьОрганизация(ИмяРегистра) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(ТаблицаРегистра.Организация = ОсновнаяТаблица.Организация)", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",ОрганизацияИндекс", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",ОрганизацияИндекс", ",Организация");
	КонецЕсли;
	
	Если НЕ РегистрПоддерживаетИсправление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.ДатаИсправления", "ДАТАВРЕМЯ(1,1,1)");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистраИсточник", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПериодыПараметров", ИмяТаблицыПериодыПараметров);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолеОбъектУчета", ОбъектУчета);
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра
//  ВычислениеПолей - Структура -
//  НеДобавлятьПоля - Массив из Строка - Не добавлять поля
// 
// Возвращаемое значение:
//  Строка -
Функция ТекстПолейРегистра(ИмяРегистра, ВычислениеПолей = Неопределено, НеДобавлятьПоля = Неопределено)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	Если ВычислениеПолей = Неопределено Тогда
		ВычислениеПолей = Новый Структура;
	КонецЕсли;
	
	Если НеДобавлятьПоля = Неопределено Тогда
		НеДобавлятьПоля = Новый Массив;
	КонецЕсли;
	
	СписокПолей = Новый Массив;
	Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		СписокПолей.Добавить("	ТаблицаРегистра.Регистратор КАК Регистратор");
	КонецЕсли;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		Если НеДобавлятьПоля.Найти(ВРег(МетаданныеИзмерения.Имя)) = Неопределено Тогда
			СписокПолей.Добавить("	ТаблицаРегистра." + МетаданныеИзмерения.Имя + " КАК " + МетаданныеИзмерения.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Ресурсы Цикл
		Если НеДобавлятьПоля.Найти(ВРег(МетаданныеИзмерения.Имя)) = Неопределено Тогда
			Если ВычислениеПолей.Свойство(МетаданныеИзмерения.Имя) Тогда
				ПутьКПолю = ВычислениеПолей[МетаданныеИзмерения.Имя];
			Иначе
				ПутьКПолю = "	ТаблицаРегистра." + МетаданныеИзмерения.Имя
			КонецЕсли; 
			СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеИзмерения.Имя);
		КонецЕсли;
	КонецЦикла; 
	
	РазделительПолей = ",
	|	";
	ТекстПолей = СтрСоединить(СписокПолей, РазделительПолей);
	
	Возврат ТекстПолей;
	
КонецФункции

Функция ВРегистреЕстьОрганизация(ИмяРегистра)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	Возврат МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
