#Область ПрограммныйИнтерфейс

// Возвращает пустую структуру с ключами для проверки сертификата.
//
// Возвращаемое значение:
//	Структура - см. Результат.
//
Функция ПараметрыОтбораСертификата() Экспорт

	Результат = УниверсальныйОбменСБанкамиКлиентСервер.ПараметрыОтбораСертификата(
		ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ФинансоваяОтчетность"), 
		ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		
	// Вид заемщика.
	Результат.Вставить("ЮридическоеФизическоеЛицо", ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"));
	// ИНН заемщика-юридического лица/ИП или ИНН представителя заемщика по доверенности.
	Результат.Вставить("ИНН", "");
	// Представитель заемщика по доверенности.
	Результат.Вставить("ФизическоеЛицо", ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	// СНИЛС представителя заемщика по доверенности.
	Результат.Вставить("СНИЛС", "");
	
	Возврат Результат;

КонецФункции

// На основании заполненных ИНН и СНИЛС формирует представление отбора.
//
// Параметры:
//  ПараметрыОтбора - Структура - см. ПараметрыОтбораСертификата()
//  СубъектПредставление - Строка - имя субъекта, на основании которого накладываются отборы.
//
Процедура ЗаполнитьПредставлениеОтбораСертификата(ПараметрыОтбора, СубъектПредставление) Экспорт
	Перем Отбор1, Отбор2;
	
	Если ПустаяСтрока(ПараметрыОтбора.ИНН) Тогда
		Если ПустаяСтрока(ПараметрыОтбора.СНИЛС) Тогда
			ШаблонПредставленияОтбора = НСтр("ru = '%1 (без отборов)';
											|en = '%1 (without filters)'");
		Иначе
			ШаблонПредставленияОтбора = НСтр("ru = '%1 (СНИЛС %2)';
											|en = '%1 (SNILS %2)'");
			Отбор1 = ПараметрыОтбора.СНИЛС;
		КонецЕсли;
	Иначе
		Отбор1 = ПараметрыОтбора.ИНН;
		Если ПустаяСтрока(ПараметрыОтбора.СНИЛС) Тогда
			ШаблонПредставленияОтбора = НСтр("ru = '%1 (ИНН %2)';
											|en = '%1 (TIN %2)'");
		Иначе
			ШаблонПредставленияОтбора = НСтр("ru = '%1 (ИНН %2, СНИЛС %3)';
											|en = '%1 (TIN %2, SNILS %3)'");
			Отбор2 = ПараметрыОтбора.СНИЛС;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор2) Тогда
		ПараметрыОтбора.ПредставлениеОтбора = СтрШаблон(ШаблонПредставленияОтбора, СубъектПредставление, Отбор1, Отбор2);
	ИначеЕсли ЗначениеЗаполнено(Отбор1) Тогда
		ПараметрыОтбора.ПредставлениеОтбора = СтрШаблон(ШаблонПредставленияОтбора, СубъектПредставление, Отбор1);
	Иначе
		ПараметрыОтбора.ПредставлениеОтбора = СтрШаблон(ШаблонПредставленияОтбора, СубъектПредставление);
	КонецЕсли;
	
КонецПроцедуры

// Определяет, подходит ли сертификат для выполнения указанной операции для организации.
//
// Параметры:
//	Сертификат    - СертификатКриптографии - Сертификат, для которого выполняется проверка.
//	ПараметрыОтбора - Структура - см. ФинОтчетностьВБанкиКлиентСервер.ПараметрыОтбораСертификата().
//	Результат     - Структура - см. УниверсальныйОбменСБанкамиКлиентСервер.РезультатФункцийСоответствияОтбору().
//	
Процедура СертификатСоответствуетОтбору(Сертификат, ПараметрыОтбора, Результат) Экспорт

	ДанныеСубъекта = УниверсальныйОбменСБанкамиКлиентСервер.ДанныеСубъектаСертификата(Сертификат);
	
	УниверсальныйОбменСБанкамиКлиентСервер.СертификатСоответствуетОтборуПоИННиСНИЛС(ДанныеСубъекта, ПараметрыОтбора, Результат);

КонецПроцедуры

Функция ЭтоБанкУниверсальногоОбмена(Банк) Экспорт
	
	Возврат ЗначениеЗаполнено(Банк) И ТипЗнч(Банк) = Тип("СправочникСсылка.БанкиУниверсальногоОбмена");
	
КонецФункции

Функция СобытиеЖурналаРегистрации(ВариантСобытия = "") Экспорт
	
	ИмяСобытия = НСтр("ru = '1С:ФинОтчетность';
						|en = '1C:Financial Reporting'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если Не ПустаяСтрока(ВариантСобытия) Тогда
		ИмяСобытия = ИмяСобытия + "." + ВариантСобытия;
	КонецЕсли;

	Возврат ИмяСобытия;
	
КонецФункции

Функция ИмяПараметраДатыПоследнегоОбмена() Экспорт
	
	Возврат "ДатаОбменаССервером";
	
КонецФункции

#Область СтатусыОтчета

Функция СтатусОшибка() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыОтправкиФинОтчетностиВБанки.Ошибка");
	
КонецФункции

Функция СтатусДоставлено() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыОтправкиФинОтчетностиВБанки.Доставлено");
	
КонецФункции

Функция СтатусОтклонено() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыОтправкиФинОтчетностиВБанки.Отклонено");
	
КонецФункции

Функция СтатусОтправлено() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыОтправкиФинОтчетностиВБанки.Отправлено");
	
КонецФункции

Функция СтатусСдано() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыОтправкиФинОтчетностиВБанки.Сдано");
	
КонецФункции

Функция СтатусНеОтправлено() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыОтправкиФинОтчетностиВБанки.НеОтправлено");
	
КонецФункции

Функция ГруппаЗавершенныеОтправки() Экспорт
	
	Возврат "ФинансоваяОтчетностьЗавершенныеОтправки";
	
КонецФункции

Функция ГруппаНеЗавершенныеОтправки() Экспорт
	
	Возврат "ФинансоваяОтчетностьНеЗавершенныеОтправки";
	
КонецФункции

Функция НовыеПараметрыОбработчикаОжиданияВходящихСообщений() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаПоследнегоПолученногоСообщения", Дата(1,1,1));
	Результат.Вставить("ПоказыватьФормуСоСтарымиСообщениями", Истина);
	Результат.Вставить("ЦикловОжиданияДоПоказаФормы", 1);
	Результат.Вставить("ЦикловОжиданияДоПоказаФормыНачальноеЗначение", 6);
	Результат.Вставить("Интервал", 5 * 60); // интервал вызова обработчика 5 минут.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ИмяСобытияПометкаПредметаПрочтенным() Экспорт
	
	Возврат "ПометкаОтчетаВБанкПрочтенным";
	
КонецФункции

#КонецОбласти