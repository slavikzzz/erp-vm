////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАКРЫТИЯ МЕСЯЦА

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"       // <Дата>
	+ "Организация"  // <СправочникСсылка.Организации>
	;
	
	ТаблицаПараметров = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПараметрыПроведения(
		ТаблицаРеквизиты,
		СписокОбязательныхКолонок);
	Параметры.Вставить("Реквизиты", ТаблицаПараметров);
	
	Возврат Параметры;
	
КонецФункции

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты.
//
Процедура ЗаписьВоВспомогательныеРегистрыСведений(Движения, ДанныеДляЗаписи, ТаблицаРеквизиты,
										ИмяРегистра, Группировать = Ложь, Знач СтрокаГруппировки = Неопределено, Знач СтрокаСуммирования = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписи)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ВспомогательныйРасчет = Движения[ИмяРегистра];
	Параметры = ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если ДанныеДляЗаписи.Колонки.Найти("Организация") = Неопределено Тогда
		ДанныеДляЗаписи.Колонки.Добавить("Организация",
			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	ДанныеДляЗаписи.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	Если Группировать Тогда
		Если СтрокаГруппировки = Неопределено Или СтрокаСуммирования = Неопределено Тогда
			// Группируем все ресурсы по всем измерениям
			МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
			СтрокаГруппировки  = ИменаРеквизитовСтрокой(МетаданныеРегистра, "Измерения", ДанныеДляЗаписи.Колонки);
			СтрокаСуммирования = ИменаРеквизитовСтрокой(МетаданныеРегистра, "Ресурсы",   ДанныеДляЗаписи.Колонки);
		КонецЕсли;
		ДанныеДляЗаписи.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	КонецЕсли;
	
	КолонкиПериода = Новый Структура;
	КолонкиПериода.Вставить("ПериодРасчета", Реквизиты.Период);
	КолонкиПериода.Вставить("Период",        Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ДанныеДляЗаписи Цикл
		ВспомогательныйРасчетЗапись = ВспомогательныйРасчет.Добавить();
		ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, КолонкиПериода);
		ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, СтрокаТаблицы);
	КонецЦикла;
	
	ВспомогательныйРасчет.Записывать = Истина;
	
КонецПроцедуры

Функция ИменаРеквизитовСтрокой(МетаданныеРегистра, ВидРеквизита, Колонки)
	
	ИменаРеквизитов = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из МетаданныеРегистра[ВидРеквизита] Цикл
		
		Если Колонки.Найти(ОписаниеРеквизита.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаРеквизитов.Добавить(ОписаниеРеквизита.Имя);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ИменаРеквизитов, ",");
	
КонецФункции

Функция НовыйЗаписиВспомогательногоРегистраСведений(МетаданныеРегистраСведений) Экспорт
	
	Записи = Новый ТаблицаЗначений;
	
	Для Каждого Измерение Из МетаданныеРегистраСведений.Измерения Цикл
		
		Если Измерение.Имя = "ПериодРасчета" Или Измерение.Имя = "Организация" Тогда
			Продолжить;
		КонецЕсли;
		
		Записи.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
		
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистраСведений.Ресурсы Цикл
		Записи.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистраСведений.Реквизиты Цикл
		Записи.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Возврат Записи;

КонецФункции

Функция РеквизитыЗаписиВоВспомогательныеРегистрыСведений(Период, Организация) Экспорт
	
	РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений = Новый ТаблицаЗначений;
	РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Запись = РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений.Добавить();
		
	Запись.Период      = Период;
	Запись.Организация = Организация;
	
	Возврат РеквизитыДляЗаписиВоВспомогательныеРегистрыСведений;
	
КонецФункции

#Область ВыявлениеФинансовогоРезультата

#Область Счета90и91

Процедура СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(Движения, Проводки, Период, Организация) Экспорт
	
	СодержаниеПроводки = НСтр("ru = 'Определение финансовых результатов';
								|en = 'Determine financial results'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
	
	Для Каждого Запись Из Проводки Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.СчетДт      = Запись.СчетДт;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоНаправлениямДеятельности Тогда
			Проводка.НаправлениеДеятельностиДт = Запись.НаправлениеДеятельности;
		КонецЕсли;
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Запись.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт      = Запись.СчетКт;
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоНаправлениямДеятельности Тогда
			Проводка.НаправлениеДеятельностиКт = Запись.НаправлениеДеятельности;
		КонецЕсли;
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Запись.Подразделение;
		КонецЕсли;
		
		Если Запись.ЭтоПрибыль Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
											"ПрибылиИУбытки", Запись.ПрибылиИУбытки);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
											"ПрибылиИУбытки", Запись.ПрибылиИУбытки);
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли,
			Запись.ВариантНалогообложенияПрибыли);
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли,
			Запись.ВариантНалогообложенияПрибыли);
		
		Проводка.Сумма   = Запись.Сумма;
		Проводка.СуммаУУ = Запись.СуммаУУ;
		СуммаНУ          = Запись.СуммаНУ;
		СуммаПР          = Запись.СуммаПР;
		СуммаВР          = Запись.СуммаВР;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ, СуммаНУ, СуммаПР, СуммаПР,
								СуммаВР, СуммаВР, Проводка, ПоддержкаПБУ18);
		Проводка.Содержание = СодержаниеПроводки;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91()

Функция ПолучитьТаблицаЗакрытияСчетов90_91()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаЗакрытияСчетов90_91 = Новый ТаблицаЗначений;
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СчетДт",         ОписаниеТипаСчетХозр);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СчетКт",         ОписаниеТипаСчетХозр);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("Сумма",          ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаУУ",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаНУ",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаПР",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаВР",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаФО",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ЭтоПрибыль",     Новый ОписаниеТипов("Булево"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ПрибылиИУбытки", Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ВариантНалогообложенияПрибыли",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("Подразделение",  БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	
	Возврат ТаблицаЗакрытияСчетов90_91;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытиеСчетов90_91(ТаблицаПроводок, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаЗакрытияСчетов90_91
	
	СписокОбязательныхКолонок = ""
	+ "Сумма,"          // <Число, 15, 2>
	+ "СуммаУУ,"        // <Число, 15, 2>
	+ "СуммаНУ,"        // <Число, 15, 2>
	+ "СуммаПР,"        // <Число, 15, 2>
	+ "СуммаВР,"        // <Число, 15, 2>
	+ "СуммаФО,"        // <Число, 15, 2>
	+ "СчетДт,"         // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"         // <ПланСчетовСсылка.Хозрасчетный>
	+ "ЭтоПрибыль,"     // <Булево>
	+ "ПрибылиИУбытки," // <ПеречислениеСсылка.ПрибылиИУбытки>
	+ "ВариантНалогообложенияПрибыли," // <СправочникСсылка.ВариантыНалогообложенияПрибыли>
	+ "Подразделение,"   // <Ссылка на справочник подразделений>
	+ "НаправлениеДеятельности" // // <Ссылка на справочник направлений деятельности>
	;
	
	Параметры.Вставить("ТаблицаЗакрытияСчетов90_91", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПроводок, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "НачДата,"         // <Дата>
	+ "КонДата,"         // <Дата>
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "Регистратор,"     // <ДокументСсылка.*>
	+ "КоэффициентЕНВД," // <Число, 15, 2>
	+ "Содержание,"       // <Строка, 150>
	+ "ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль" // <Булево>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеСчетов90_91()

#КонецОбласти

#Область Счет90

Функция ПроводкиЗакрытиеСчета90(Период, Организация) Экспорт
	
	НачалоПериода = НачалоМесяца(Период);
	КонецПериода  = КонецМесяца(Период);
	Организации   = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	
	Проводки = ПолучитьТаблицаЗакрытияСчетов90_91();
	
	ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль =
		РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(Организация, Период);
	
	Прибыль = ПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации, ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль);
	ДополнитьТаблицаЗакрытияСчетов90_91ПрибыльюОтПродаж(Проводки, Прибыль);
	
	ОписаниеСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина, Истина);
	
	РанееСформированныеПроводки = РанееСформированныеПроводкиПрибыльОтПродаж(
		НачалоПериода, КонецПериода, Организации, ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль);
	
	// Вычтем РанееСформированныеПроводки из Проводки
	Для Каждого ПроводкаСторно Из РанееСформированныеПроводки Цикл
		Проводка = Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, ПроводкаСторно, , КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм));
		КоллекцииСумм.Вычесть(Проводка, ПроводкаСторно, ОписаниеСумм);
	КонецЦикла;
	
	// Свернем
	КолонкиСумм        = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	КолонкиГруппировок = Новый Массив;
	Для Каждого Колонка Из Проводки.Колонки Цикл
		Если КолонкиСумм.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиГруппировок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
			
	Проводки.Свернуть(СтрСоединить(КолонкиГруппировок, ","), КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм));
	
	// Удалим пустые проводки
	КоличествоПроводок = Проводки.Количество();
	Для НомерСКонца = 1 По КоличествоПроводок Цикл
		Проводка = Проводки[КоличествоПроводок - НомерСКонца];
		Если КоллекцииСумм.Пустая(Проводка, ОписаниеСумм) Тогда
			Проводки.Удалить(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	Проводки.Свернуть(
		"ЭтоПрибыль, СчетДт, СчетКт, ПрибылиИУбытки, ВариантНалогообложенияПрибыли, НаправлениеДеятельности", 
		"Сумма, СуммаУУ, СуммаНУ, СуммаПР, СуммаВР");

	Возврат Проводки;
	
КонецФункции

Функция НовыйПрибыльОтПродаж(ОписаниеКоллекцииСумм = Неопределено)
	
	Если ОписаниеКоллекцииСумм = Неопределено Тогда
		ОписаниеКоллекцииСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина, Истина); // Всегда включаем все четыре суммы
	КонецЕсли;
	
	Прибыль = Новый ТаблицаЗначений;
	Прибыль.Колонки.Добавить("ОсновнаяСистемаНалогообложения", Новый ОписаниеТипов("Булево"));
	Прибыль.Колонки.Добавить("ВариантНалогообложенияПрибыли",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	Прибыль.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Прибыль, ОписаниеКоллекцииСумм);
	
	Возврат Прибыль;
	
КонецФункции

Функция ПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации, ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль)
	
	ОписаниеКоллекцииСумм = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина, Истина);
	
	Прибыль = НовыйПрибыльОтПродаж(ОписаниеКоллекцииСумм);
	
	Счет90 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи);
	// На счете 90 есть субсчета 
	// - "накопительные" - для учета доходов и расходов в течение периода (90.01, 90.02 и т.д.)
	// - "закрывающий" - для учета финансового результата по окончании периода (90.09)
	// Финансовый результат определяется сопоставлением оборотов по накопительным счетам.
	// При этом следует исключить обороты между "накопительными" и "закрывающим" счетами, которые могут быть сформированы
	// при закрытии года.
	НакопительныеСубсчетаСчета90 = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		Счет90,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж));// 90.09
		
	// Получим список счетов, предназначенных для учета доходов и расходов деятельности с особым порядком налогообложения.
	ПрименяетсяОсобыйПорядокНалогообложения = Ложь;
	Для Каждого Организация Из Организации Цикл
		
		ПрименяетсяОсобыйПорядокНалогообложения = Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(
			Организация,
			НачалоПериода,
			КонецПериода);
			
		Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПрименяетсяОсобыйПорядокНалогообложения Тогда
		СчетаОсобыйПорядокНалогообложения = Новый Массив;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НакопительныеСубсчетаСчета90", НакопительныеСубсчетаСчета90);
		Запрос.УстановитьПараметр("СчетаЕНВД", НалоговыйУчет.ПолучитьМассивСчетовЕНВД());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В(&НакопительныеСубсчетаСчета90)
		|	И Хозрасчетный.Ссылка В(&СчетаЕНВД)";
		СчетаОсобыйПорядокНалогообложения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	// Распределим счета на делимые и неделимые по вариантам н/о
	// Данные по счетам, которые не делятся по вариантам н/о, будут отнесены на вариант н/о по умолчанию
	СчетаФинРезаРаздельныйНУ = 
		РаздельныйУчетПоНалогуНаПрибыльПовтИсп.СчетаФинансовогоРезультатаСВариантамиНалогообложения();
	
	Счета90_РаздельныйНУ     = СчетаФинРезаРаздельныйНУ.Счета90;
	Счета90_БезРаздельногоНУ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		НакопительныеСубсчетаСчета90,
		Счета90_РаздельныйНУ);
	
	// Формирование итогового запроса
	ВидыСубконтоРаздельныйНУ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",                     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                      КонецПериода);
	Запрос.УстановитьПараметр("Организации",                       Организации);
	Запрос.УстановитьПараметр("НакопительныеСубсчетаСчета90",      НакопительныеСубсчетаСчета90);
	Запрос.УстановитьПараметр("СчетаОсобыйПорядокНалогообложения", СчетаОсобыйПорядокНалогообложения);
	Запрос.УстановитьПараметр("ВидыСубконтоРаздельныйНУ",          ВидыСубконтоРаздельныйНУ);
	Запрос.УстановитьПараметр("Счета90_РаздельныйНУ",              Счета90_РаздельныйНУ);
	Запрос.УстановитьПараметр("Счета90_БезРаздельногоНУ",          Счета90_БезРаздельногоНУ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ОсновнаяСистемаНалогообложения КАК ОсновнаяСистемаНалогообложения,
	|	ВложенныйЗапрос.ВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаУУ) КАК СуммаУУ,
	|	СУММА(ВложенныйЗапрос.СуммаНУ) КАК СуммаНУ,
	|	СУММА(ВложенныйЗапрос.СуммаПР) КАК СуммаПР,
	|	СУММА(ВложенныйЗапрос.СуммаВР) КАК СуммаВР
	|ИЗ
	|	(ВЫБРАТЬ
	|		НЕ Хозрасчетный.Счет В (&СчетаОсобыйПорядокНалогообложения) КАК ОсновнаяСистемаНалогообложения,
	|		&ПолеВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|		Хозрасчетный.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Сумма,
	|		ЕСТЬNULL(Хозрасчетный.СуммаУУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаУУОборотДт, 0) КАК СуммаУУ,
	|		ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК СуммаНУ,
	|		ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК СуммаПР,
	|		ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК СуммаВР
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода,, Счет В (&Счета90_РаздельныйНУ),
	|			&ВидыСубконтоРаздельныйНУ, Организация В (&Организации),
	|			КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),) КАК Хозрасчетный
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НЕ Хозрасчетный.Счет В (&СчетаОсобыйПорядокНалогообложения) КАК ОсновнаяСистемаНалогообложения,
	|		&ПолеВариантНалогообложенияПоУмолчанию,
	|		Хозрасчетный.НаправлениеДеятельности,
	|		ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Поле1,
	|		ЕСТЬNULL(Хозрасчетный.СуммаУУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаУУОборотДт, 0) КАК Поле2,
	|		ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК Поле3,
	|		ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК Поле4,
	|		ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК Поле5
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода,, Счет В (&Счета90_БезРаздельногоНУ),,
	|			Организация В (&Организации), КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),) КАК
	|			Хозрасчетный) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ОсновнаяСистемаНалогообложения,
	|	ВложенныйЗапрос.ВариантНалогообложенияПрибыли,
	|	ВложенныйЗапрос.НаправлениеДеятельности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнаяСистемаНалогообложения УБЫВ";
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантНалогообложенияПоУмолчаниюВЗапросе(
		Запрос, ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль);
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
		Запрос,
		ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль,
		"Хозрасчетный.Субконто1",
		ВидыСубконтоРаздельныйНУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Прибыль.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Прибыль;
	
КонецФункции

Функция РанееСформированныеПроводкиПрибыльОтПродаж(НачалоПериода, КонецПериода, Организации, ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль)
	
	// Обратное преобразование к СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91()
	
	Проводки = ПолучитьТаблицаЗакрытияСчетов90_91();
	
	ВидыСубконтоСчетаНеЕНВД = Новый Массив;
	ВидыСубконтоСчетаНеЕНВД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
	
	ВидыСубконтоСчетаЕНВД = Новый Массив;
	ВидыСубконтоСчетаЕНВД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организации",   Организации);
	Запрос.УстановитьПараметр("ВидыСубконтоСчетаЕНВД",   ВидыСубконтоСчетаЕНВД);
	Запрос.УстановитьПараметр("ВидыСубконтоСчетаНеЕНВД", ВидыСубконтоСчетаНеЕНВД);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоПрибыль,
	|	Прибыль.Подразделение КАК Подразделение,
	|	Прибыль.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Прибыль.Субконто1 КАК ПрибылиИУбытки,
	|	&ПолеВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|	Прибыль.Счет КАК СчетКт,
	|	Прибыль.КорСчет КАК СчетДт,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаОборотКт, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаУУОборотКт, 0)) КАК СуммаУУ,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаНУОборотКт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаПРОборотКт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаВРОборотКт, 0)) КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|		&ВидыСубконтоСчетаНеЕНВД,
	|		Организация В (&Организации),
	|		КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
	|	) КАК Прибыль
	|
	|СГРУППИРОВАТЬ ПО
	|	Прибыль.Счет,
	|	Прибыль.КорСчет,
	|	Прибыль.Подразделение,
	|	Прибыль.НаправлениеДеятельности,
	|	Прибыль.Субконто1,
	|	&ПолеВариантНалогообложенияПрибыли
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	Прибыль.Подразделение,
	|	Прибыль.НаправлениеДеятельности,
	|	Прибыль.Субконто1,
	|	&ПолеВариантНалогообложенияПоУмолчанию,
	|	Прибыль.Счет,
	|	Прибыль.КорСчет,
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаУУОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаНУОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаПРОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(Прибыль.СуммаВРОборотКт, 0))
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД),
	|		&ВидыСубконтоСчетаЕНВД,
	|		Организация В (&Организации),
	|		КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
	|	) КАК Прибыль
	|
	|СГРУППИРОВАТЬ ПО
	|	Прибыль.Счет,
	|	Прибыль.КорСчет,
	|	Прибыль.Подразделение,
	|	Прибыль.НаправлениеДеятельности,
	|	Прибыль.Субконто1,
	|	&ПолеВариантНалогообложенияПоУмолчанию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	Убыток.Подразделение,
	|	Убыток.НаправлениеДеятельности,
	|	Убыток.Субконто1,
	|	&ПолеВариантНалогообложенияПрибыли,
	|	Убыток.КорСчет,
	|	Убыток.Счет,
	|	СУММА(ЕСТЬNULL(Убыток.СуммаОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаУУОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаНУОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаПРОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаВРОборотДт, 0))
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|		&ВидыСубконтоСчетаНеЕНВД,
	|		Организация В (&Организации),
	|		КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
	|	) КАК Убыток
	|
	|СГРУППИРОВАТЬ ПО
	|	Убыток.Счет,
	|	Убыток.КорСчет,
	|	Убыток.Подразделение,
	|	Убыток.НаправлениеДеятельности,
	|	Убыток.Субконто1,
	|	&ПолеВариантНалогообложенияПрибыли
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	Убыток.Подразделение,
	|	Убыток.НаправлениеДеятельности,
	|	Убыток.Субконто1,
	|	&ПолеВариантНалогообложенияПоУмолчанию,
	|	Убыток.КорСчет,
	|	Убыток.Счет,
	|	СУММА(ЕСТЬNULL(Убыток.СуммаОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаУУОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаНУОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаПРОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(Убыток.СуммаВРОборотДт, 0))
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД),
	|		&ВидыСубконтоСчетаЕНВД,
	|		Организация В (&Организации),
	|		КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
	|	) КАК Убыток
	|
	|СГРУППИРОВАТЬ ПО
	|	Убыток.Счет,
	|	Убыток.КорСчет,
	|	Убыток.Подразделение,
	|	Убыток.НаправлениеДеятельности,
	|	Убыток.Субконто1,
	|	&ПолеВариантНалогообложенияПоУмолчанию
	|
	|";
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантНалогообложенияПоУмолчаниюВЗапросе(
		Запрос, ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль);
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
		Запрос,
		ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль,
		"Субконто2",
		ВидыСубконтоСчетаНеЕНВД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Проводки.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Проводки;
	
КонецФункции

Процедура ДополнитьТаблицаЗакрытияСчетов90_91ПрибыльюОтПродаж(Проводки, Прибыль)
	
	// См. также РанееВыявленнаяПрибыльОтПродаж
	
	ОписаниеКоллекции = НалогНаПрибыльБухгалтерскийУчет.ОписаниеКоллекцииСумм(Истина, Истина, Истина);
	
	Для Каждого ЗаписьПрибыль Из Прибыль Цикл
		
		Если КоллекцииСумм.Пустая(ЗаписьПрибыль, ОписаниеКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьПрибыль.ОсновнаяСистемаНалогообложения Тогда
			СчетПрибылиЗаМесяц = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Иначе
			СчетПрибылиЗаМесяц = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
		КонецЕсли;
		
		ОписаниеПроводки = Проводки.Добавить();
		
		ОписаниеПроводки.ВариантНалогообложенияПрибыли = ЗаписьПрибыль.ВариантНалогообложенияПрибыли;
		
		Если ЗаписьПрибыль.Сумма > 0
			ИЛИ (ЗаписьПрибыль.Сумма = 0 И ЗаписьПрибыль.СуммаНУ > 0) Тогда
			// Прибыль
			ОписаниеПроводки.ЭтоПрибыль     = Истина;
			ОписаниеПроводки.СчетДт         = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			ОписаниеПроводки.СчетКт         = СчетПрибылиЗаМесяц;
			ОписаниеПроводки.НаправлениеДеятельности = ЗаписьПрибыль.НаправлениеДеятельности;
			ОписаниеПроводки.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
			КоллекцииСумм.Заполнить(ОписаниеПроводки, ЗаписьПрибыль, ОписаниеКоллекции);
		Иначе
			// Убыток
			ОписаниеПроводки.ЭтоПрибыль     = Ложь;
			ОписаниеПроводки.СчетДт         = СчетПрибылиЗаМесяц;
			ОписаниеПроводки.СчетКт         = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
			ОписаниеПроводки.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
			ОписаниеПроводки.НаправлениеДеятельности = ЗаписьПрибыль.НаправлениеДеятельности;
			Убыток = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекции);
			КоллекцииСумм.Вычесть(Убыток, ЗаписьПрибыль, ОписаниеКоллекции); // Поменяем знак
			КоллекцииСумм.Заполнить(ОписаниеПроводки, Убыток, ОписаниеКоллекции);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Счет91

Функция ПодготовитьТаблицыЗакрытиеСчета91(ТаблицаРеквизиты, СписокОрганизаций, Отказ) Экспорт
	
	ЗакрытиеСчетов90_91 = ПолучитьТаблицаЗакрытияСчетов90_91();
	Параметры = ПодготовитьПараметрыЗакрытиеСчетов90_91(ЗакрытиеСчетов90_91, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаПроводок = Параметры.ТаблицаЗакрытияСчетов90_91;
	
	ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль = Реквизиты.ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль;
	
	// Распределим счета на делимые и неделимые по вариантам н/о
	// Данные по счетам, которые не делятся по вариантам н/о, будут отнесены на вариант н/о по умолчанию
	СчетаФинРезаРаздельныйНУ = 
		РаздельныйУчетПоНалогуНаПрибыльПовтИсп.СчетаФинансовогоРезультатаСВариантамиНалогообложения();
	
	Счета91 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	
	Счета91_РаздельныйНУ     = СчетаФинРезаРаздельныйНУ.Счета91;
	Счета91_БезРаздельногоНУ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		Счета91,
		Счета91_РаздельныйНУ);
	
	ВидыСубконто_РаздельныйНУ = Новый Массив;
	ВидыСубконто_РаздельныйНУ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	ВидыСубконто_БезРаздельногоНУ = Новый Массив;
	ВидыСубконто_БезРаздельногоНУ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",                  Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",                  Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций",        СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("КоэффициентЕНВД",          Реквизиты.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("Счета91",                  Счета91);
	Запрос.УстановитьПараметр("Счета91_РаздельныйНУ",     Счета91_РаздельныйНУ);
	Запрос.УстановитьПараметр("Счета91_БезРаздельногоНУ", Счета91_БезРаздельногоНУ);
	Запрос.УстановитьПараметр("ВидыСубконто_РаздельныйНУ",     ВидыСубконто_РаздельныйНУ);
	Запрос.УстановитьПараметр("ВидыСубконто_БезРаздельногоНУ", ВидыСубконто_БезРаздельногоНУ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Значение
	|ПОМЕСТИТЬ ОтборСтатьи_ОСНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатьиДоходов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат =
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат =
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиДоходов.Ссылка КАК Значение
	|ПОМЕСТИТЬ ОтборСтатьи_ЕНВД
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат =
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат =
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Значение
	|ПОМЕСТИТЬ ОтборСтатьи_Распределяемые
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат =
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД) КАК СчетПрибылейИУбытков,
	|	&ПолеВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|	Хозрасчетный.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаУУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаУУОборотДт, 0) КАК ПрибыльУУ,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ПОМЕСТИТЬ ВТ_Закрытие91_НеЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91_РаздельныйНУ),
	|			&ВидыСубконто_РаздельныйНУ,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В (ВЫБРАТЬ Т.Значение ИЗ ОтборСтатьи_ОСНО КАК Т),
	|			,
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|	&ПолеВариантНалогообложенияПоУмолчанию,
	|	Хозрасчетный.НаправлениеДеятельности,
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0),
	|	ЕСТЬNULL(Хозрасчетный.СуммаУУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаУУОборотДт, 0),
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0),
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0),
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91_БезРаздельногоНУ),
	|			&ВидыСубконто_БезРаздельногоНУ,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В (ВЫБРАТЬ Т.Значение ИЗ ОтборСтатьи_ОСНО КАК Т),
	|			,
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|	&ПолеВариантНалогообложенияПрибыли,
	|	Хозрасчетный.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаУУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаУУОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * (1 - &КоэффициентЕНВД)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91_РаздельныйНУ),
	|			&ВидыСубконто_РаздельныйНУ,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В (ВЫБРАТЬ Т.Значение ИЗ ОтборСтатьи_Распределяемые КАК Т),
	|			,
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|	&ПолеВариантНалогообложенияПоУмолчанию,
	|	Хозрасчетный.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаУУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаУУОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * (1 - &КоэффициентЕНВД)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91_БезРаздельногоНУ),
	|			&ВидыСубконто_БезРаздельногоНУ,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В (ВЫБРАТЬ Т.Значение ИЗ ОтборСтатьи_Распределяемые КАК Т),
	|			,
	|			) КАК Хозрасчетный
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД) КАК СчетПрибылейИУбытков,
	|	Хозрасчетный.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаУУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаУУОборотДт, 0) КАК ПрибыльУУ,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ПОМЕСТИТЬ ВТ_Закрытие91_ЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91),
	|			&ВидыСубконто_БезРаздельногоНУ,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В (ВЫБРАТЬ Т.Значение ИЗ ОтборСтатьи_ЕНВД КАК Т),
	|			,
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД),
	|	Хозрасчетный.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаУУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаУУОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * &КоэффициентЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&Счета91),
	|			&ВидыСубконто_БезРаздельногоНУ,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В (ВЫБРАТЬ Т.Значение ИЗ ОтборСтатьи_Распределяемые КАК Т),
	|			,
	|			) КАК Хозрасчетный
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Закрытие91_НеЕНВД.СчетПрибылейИУбытков КАК СчетПрибылейИУбытков,
	|	ВТ_Закрытие91_НеЕНВД.ВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|	ВТ_Закрытие91_НеЕНВД.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.Прибыль) КАК Прибыль,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльУУ) КАК ПрибыльУУ,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльПР) КАК ПрибыльПР,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПРибыльВР) КАК ПРибыльВР,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльНУ) КАК ПрибыльНУ
	|ИЗ
	|	ВТ_Закрытие91_НеЕНВД КАК ВТ_Закрытие91_НеЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Закрытие91_НеЕНВД.СчетПрибылейИУбытков,
	|	ВТ_Закрытие91_НеЕНВД.ВариантНалогообложенияПрибыли,
	|	ВТ_Закрытие91_НеЕНВД.НаправлениеДеятельности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Закрытие91_ЕНВД.СчетПрибылейИУбытков,
	|	ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка), // Для ЕНВД списываем на 99.01.2 без учета вариантов н/о
	|	ВТ_Закрытие91_ЕНВД.НаправлениеДеятельности,
	|	ВТ_Закрытие91_ЕНВД.Прибыль,
	|	ВТ_Закрытие91_ЕНВД.ПрибыльУУ,
	|	ВТ_Закрытие91_ЕНВД.ПрибыльПР,
	|	ВТ_Закрытие91_ЕНВД.ПРибыльВР,
	|	ВТ_Закрытие91_ЕНВД.ПрибыльНУ
	|ИЗ
	|	ВТ_Закрытие91_ЕНВД КАК ВТ_Закрытие91_ЕНВД";
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантНалогообложенияПоУмолчаниюВЗапросе(
		Запрос, ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль);
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
		Запрос,
		ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль,
		"Субконто2",
		ВидыСубконто_РаздельныйНУ);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Прибыль = 0 ИЛИ НЕ Выборка.ПрибыльНУ = 0 ИЛИ НЕ Выборка.ПрибыльПР = 0 ИЛИ НЕ Выборка.ПрибыльВР = 0 Тогда
			Запись = ТаблицаПроводок.Добавить();
			Если Выборка.Прибыль >= 0 Тогда
				Запись.ЭтоПрибыль = Истина;
				Запись.СчетДт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.СчетКт         = Выборка.СчетПрибылейИУбытков;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.ВариантНалогообложенияПрибыли = Выборка.ВариантНалогообложенияПрибыли;
				Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
				Запись.Сумма          = Выборка.Прибыль;
				Запись.СуммаУУ        = 0;
				Запись.СуммаНУ        = Выборка.ПрибыльНУ;
				Запись.СуммаПР        = Выборка.ПрибыльПР;
				Запись.СуммаВР        = Выборка.ПрибыльВР;
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Запись.ЭтоПрибыль     = Ложь;
				Запись.СчетДт         = Выборка.СчетПрибылейИУбытков;
				Запись.СчетКт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.ВариантНалогообложенияПрибыли = Выборка.ВариантНалогообложенияПрибыли;
				Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
				Запись.Сумма          = -Выборка.Прибыль;
				Запись.СуммаУУ        = 0;
				Запись.СуммаНУ        = -Выборка.ПрибыльНУ;
				Запись.СуммаПР        = -Выборка.ПрибыльПР;
				Запись.СуммаВР        = -Выборка.ПрибыльВР;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Выборка.ПрибыльУУ = 0 Тогда
			Запись = ТаблицаПроводок.Добавить();
			Если Выборка.ПрибыльУУ > 0 Тогда
				Запись.ЭтоПрибыль = Истина;
				Запись.СчетДт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.СчетКт         = Выборка.СчетПрибылейИУбытков;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.ВариантНалогообложенияПрибыли = Выборка.ВариантНалогообложенияПрибыли;
				Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
				Запись.Сумма          = 0;
				Запись.СуммаУУ        = Выборка.ПрибыльУУ;
				Запись.СуммаНУ        = 0;
				Запись.СуммаПР        = 0;
				Запись.СуммаВР        = 0;
			КонецЕсли;
			
			Если Выборка.ПрибыльУУ < 0 Тогда
				Запись.ЭтоПрибыль     = Ложь;
				Запись.СчетДт         = Выборка.СчетПрибылейИУбытков;
				Запись.СчетКт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.ВариантНалогообложенияПрибыли = Выборка.ВариантНалогообложенияПрибыли;
				Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
				Запись.Сумма          = 0;
				Запись.СуммаУУ        = -Выборка.ПрибыльУУ;
				Запись.СуммаНУ        = 0;
				Запись.СуммаПР        = 0;
				Запись.СуммаВР        = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПроводок.Свернуть(
		"ЭтоПрибыль, СчетДт, СчетКт, ПрибылиИУбытки, ВариантНалогообложенияПрибыли, НаправлениеДеятельности",
		"Сумма, СуммаУУ, СуммаНУ, СуммаПР, СуммаВР");
	
	Возврат ТаблицаПроводок;
	
КонецФункции // ПодготовитьТаблицыЗакрытиеСчета91()

#КонецОбласти

#КонецОбласти

#Область ОкруглениеНДС

Процедура СформироватьДвиженияПоОкруглениюНДС(ТаблицаРеквизиты, СписокОрганизаций, Движения) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ОкруглениеНДС(Реквизиты, СписокОрганизаций, Движения);
	
	ОкруглениеНДСНалоговогоАгента(Реквизиты, СписокОрганизаций, Движения);
		
КонецПроцедуры // СформироватьДвиженияПоОкруглениюНДС()

Процедура ОкруглениеНДС(Реквизиты, СписокОрганизаций, Движения)
	
	Запрос = Новый Запрос;
	
	СубконтоВидыПлатежейВБюджет = Новый Массив;
	СубконтоВидыПлатежейВБюджет.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Запрос.УстановитьПараметр("НачДата",					 Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",					 Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СубконтоВидыПлатежейВБюджет", СубконтоВидыПлатежейВБюджет);
	Запрос.УстановитьПараметр("СписокОрганизаций", 			 СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("НалогНачисленУплачен",		 Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Запрос.УстановитьПараметр("БазоваяВалюта",				 ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация) );
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Счет,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт,
	|   ЕСТЬNULL(КурсыВалют.КурсЗнаменатель,1)/ ЕСТЬNULL(КурсыВалют.КурсЧислитель,1) КАК Курс 
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС),
	|			&СубконтоВидыПлатежейВБюджет,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 = &НалогНачисленУплачен,
	|			НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет))
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)),
	|			) КАК Хозрасчетный,
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&КонДата,	
	|			Валюта В
	|				(ВЫБРАТЬ
	|					Константы.ВалютаУправленческогоУчета
	|				ИЗ
	|					Константы КАК Константы) и БазоваяВалюта=&БазоваяВалюта) КАК КурсыВалют
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Счет,
	|   ЕСТЬNULL(КурсыВалют.КурсЗнаменатель,1)/ ЕСТЬNULL(КурсыВалют.КурсЧислитель,1)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НДСКВозмещению = Ложь;
		ОстатокОкругления = 0;
		
		ПоказателиДекларацииНДС = УчетНДСФормированиеОтчетности.ПоказателиДекларацииНДС(
			Реквизиты.Организация,
			СписокОрганизаций.ВыгрузитьЗначения(),
			Реквизиты.НачДата,
			Реквизиты.КонДата);
			
		Если ПоказателиДекларацииНДС.КУплате > 0 Тогда
				
			НДСПо68_02 = Выборка.СуммаОборотКт - Выборка.СуммаОборотДт;
			ОстатокОкругления = НДСПо68_02
				- ПоказателиДекларацииНДС.КУплате
				+ ПоказателиДекларацииНДС.ВычетПоЭкспорту
				- ПоказателиДекларацииНДС.НачислениеПоЭкспорту;
				
		ИначеЕсли ПоказателиДекларацииНДС.КВозмещению > 0 Тогда
				
			НДСКВозмещению = Истина;
			НДСПо68_02 = Выборка.СуммаОборотДт - Выборка.СуммаОборотКт;
			ОстатокОкругления = НДСПо68_02
				- ПоказателиДекларацииНДС.КВозмещению
				- ПоказателиДекларацииНДС.ВычетПоЭкспорту
				+ ПоказателиДекларацииНДС.НачислениеПоЭкспорту;
		КонецЕсли;
		
		Если ОстатокОкругления = 0 
			ИЛИ ОстатокОкругления > 0.99
			ИЛИ ОстатокОкругления < -0.99 Тогда // Если остаток округления больше рубля, проводку по округлению не формируем
			Возврат;
		Иначе 
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
			Проводка.СчетКт      = Выборка.Счет;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			
			Если НЕ НДСКВозмещению Тогда
				Проводка.Сумма   = - ОстатокОкругления;
				Проводка.СуммаУУ = - ОстатокОкругления * Выборка.Курс;
			Иначе
				Проводка.Сумма   = ОстатокОкругления;
				Проводка.СуммаУУ = ОстатокОкругления * Выборка.Курс;
			КонецЕсли;
			
			Проводка.Содержание = Реквизиты.Содержание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглениеНДСНалоговогоАгента(Реквизиты, СписокОрганизаций, Движения)
	
	Запрос = Новый Запрос;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыОплаты);
	
	Запрос.УстановитьПараметр("НачДата",           Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",           Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ВидыСубконто",      ВидыСубконто);
	Запрос.УстановитьПараметр("БазоваяВалюта",	   ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация) );
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Счет,
	|	Хозрасчетный.Субконто1 КАК Контрагент,
	|	Хозрасчетный.Субконто2 КАК Договор,
	|	Хозрасчетный.Субконто3 КАК ДокументРасчетовСКонтрагентами,
	|	Хозрасчетный.СуммаОборотКт КАК СуммаОборотКт,
	|   ЕСТЬNULL(КурсыВалют.КурсЗнаменатель,1)/ ЕСТЬNULL(КурсыВалют.КурсЧислитель,1) КАК Курс 
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента),
	|			&ВидыСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто2.ВидАгентскогоДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияИмущества), ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Нерезидент))) КАК Хозрасчетный,
	|		РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&КонДата,	
	|			Валюта В
	|				(ВЫБРАТЬ
	|					Константы.ВалютаУправленческогоУчета
	|				ИЗ
	|					Константы КАК Константы) и БазоваяВалюта=&БазоваяВалюта) КАК КурсыВалют
	|ГДЕ
	|	Хозрасчетный.СуммаКонечныйОстатокКт <> 0";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОкрСумма = Окр(Выборка.СуммаОборотКт);
			ОстатокОкругления = ОкрСумма - Выборка.СуммаОборотКт;
			
			Если ОстатокОкругления = 0 Тогда 
				Продолжить;
			Иначе
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
				Проводка.СчетКт      = Выборка.Счет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"Контрагенты", Выборка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"Договоры", Выборка.Договор);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"ДокументыОплаты", Выборка.ДокументРасчетовСКонтрагентами);
				
				Проводка.Сумма      = ОстатокОкругления;
				Проводка.СуммаУУ    = ОстатокОкругления * Выборка.Курс;
				Проводка.Содержание = Реквизиты.Содержание;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОкруглениеНДСНалоговогоАгента

#КонецОбласти

#Область РеформацияБалансаИЗакрытиеГода

Процедура СформироватьДвиженияЗакрытиеГода(ТаблицаЗакрытие, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ПараметрыПБУ18  = УчетнаяПолитика.ПараметрыПБУ18(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18  = ПараметрыПБУ18.ПрименяетсяПБУ18;
	
	Если Параметры.ТаблицаЗакрытие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Запись Из Параметры.ТаблицаЗакрытие Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Если ЗначениеЗаполнено(Запись.Организация) Тогда
			Проводка.Организация = Запись.Организация;
		Иначе
			Проводка.Организация = Реквизиты.Организация;
		КонецЕсли;
		Проводка.СчетДт      = Запись.СчетДт;
		Проводка.СчетКт      = Запись.СчетКт;
		Проводка.Сумма       = Запись.Сумма;
		Проводка.СуммаУУ     = Запись.СуммаУУ;
		Проводка.Содержание  = Запись.Содержание;
		
		Если Запись.КоличествоДт <> 0 Тогда
			Проводка.КоличествоДт = Запись.КоличествоДт;
		КонецЕсли;
		
		Если Запись.КоличествоКт <> 0 Тогда
			Проводка.КоличествоКт = Запись.КоличествоКт;
		КонецЕсли;
		
		Если Запись.СубконтоДт1 <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.СубконтоДт1);
		КонецЕсли;
		
		Если Запись.СубконтоКт1 <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.СубконтоКт1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Подразделение) Тогда
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, Запись.Подразделение, Запись.Подразделение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.НаправлениеДеятельности) Тогда
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["СчетДт"]);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["СчетКт"]);
			
			Если СвойстваСчетаДт.УчетПоНаправлениямДеятельности Тогда
				Проводка["НаправлениеДеятельностиДт"] = Запись.НаправлениеДеятельности;
			КонецЕсли;
			Если СвойстваСчетаКт.УчетПоНаправлениямДеятельности Тогда
				Проводка["НаправлениеДеятельностиКт"] = Запись.НаправлениеДеятельности;
			КонецЕсли;
		КонецЕсли;
		
		СуммаНУ = Запись.СуммаНУ;
		СуммаПР = Запись.СуммаПР;
		СуммаВР = Запись.СуммаВР;
		
		Если СуммаНУ <> 0 Или СуммаПР <> 0 Или СуммаВР <> 0 Тогда
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУ, СуммаНУ, СуммаПР, СуммаПР, СуммаВР, СуммаВР, Проводка, ПоддержкаПБУ18);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЗакрытие.Найти(Реквизиты.СодержаниеРеформация, "Содержание") <> Неопределено
		И ПараметрыПБУ18.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод Тогда
		// перенос сальдо по счету 09 по виду актива "убыток текущего периода"
		Содержание = НСтр("ru = 'Перенос убытка на будущее';
							|en = 'Transfer loss to the future'");
		КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонГраница",  КонГраница);
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Сумма,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаУУОстатокДт, 0) КАК СуммаУУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонГраница,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
		|			,
		|			Организация = &Организация
		|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК ХозрасчетныйОстатки";
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Если Выборка.Следующий() И Выборка.Сумма > 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
			Проводка.Сумма       = Выборка.Сумма;
			Проводка.СуммаУУ     = Выборка.СуммаУУ;
			Проводка.Содержание  = Содержание;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ВидыАктивовИОбязательств.УбыткиПрошлыхЛет);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
			Если СвойстваСчета.Валютный Тогда
				ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация);
				Проводка.ВалютаДт = ВалютаРеглУчета;
				Проводка.ВалютаКт = ВалютаРеглУчета;
				Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
				Проводка.ВалютнаяСуммаКт = Проводка.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвижения99Реформация()

Процедура СформироватьДвиженияуПересчетОНАиОНО(ТаблицаЗакрытие, ТаблицаРеквизиты, Движения, Отказ, ЗакрытиеГода = Истина, СуммаПересчетаУбытков = 0) Экспорт
	
	Параметры = ПодготовитьПараметрыЗакрытиеГода(
		Неопределено, ТаблицаЗакрытие, ТаблицаРеквизиты);
		Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаОНАОНО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеГода Тогда  
		СчетПрибыли = ?(Реквизиты.Период < '20100101', ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
		СчетУбытка = ?(Реквизиты.Период < '20100101', ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
	Иначе
		СчетПрибыли = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
		СчетУбытка =  ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
	КонецЕсли;
	
	Если СуммаПересчетаУбытков <> 0 Тогда   
		Запись = Параметры.ТаблицаОНАОНО.Добавить();
		Запись.Разница = СуммаПересчетаУбытков;
		Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
		Запись.Вид = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
		Запись.Содержание = "Пересчет убытков";
	КонецЕсли;
	
	Для каждого Запись Из Параметры.ТаблицаОНАОНО Цикл
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы И НЕ Запись.Разница = 0 Тогда // Счет 09
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Запись.Содержание;
			
			Если Запись.Разница > 0  Тогда
				Проводка.Сумма  = Запись.Разница;
				Проводка.СчетДт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Вид);
				Проводка.СчетКт = СчетПрибыли;
			Иначе
				Проводка.Сумма  = -Запись.Разница;
				Проводка.СчетКт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Вид);
				Проводка.СчетДт = СчетУбытка;
			КонецЕсли;
		КонецЕсли;
		
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства И НЕ Запись.Разница = 0 Тогда // Счет 77
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Запись.Содержание;
			
			Если Запись.Разница > 0 Тогда
				Проводка.Сумма  = Запись.Разница;
				Проводка.СчетКт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Вид);
				Проводка.СчетДт = СчетУбытка;
			Иначе
				Проводка.Сумма  = -Запись.Разница;
				Проводка.СчетДт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Вид);
				Проводка.СчетКт = СчетПрибыли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияуПересчетОНАиОНО

// Формирует движения по переносу убытков на будущее
// 
Процедура СформироватьДвиженияПереносУбыткаНаБудущее(СтруктураШапки, Движения, Отказ) Экспорт
	
	НачалоГода = НачалоГода(СтруктураШапки.КонДата);
	КонецГода  = КонецГода(СтруктураШапки.КонДата);
	
	ВариантУчетаОтложенногоНалога =
			НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(КонецГода, СтруктураШапки.Организация);
	ПрименяетсяПБУ18 =
		НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ПрименяетсяПБУ18(ВариантУчетаОтложенногоНалога);
	
	ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль =
		РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(СтруктураШапки.Организация, КонецГода);
	
	СчетПрибылейИУбытковНеЕНВД = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	
	// Получим суммы убытка по НУ в разрезе вариантов н/о
	ВидыСубконто = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",              НачалоГода);
	Запрос.УстановитьПараметр("КонецПериода",               КонецГода);
	Запрос.УстановитьПараметр("Организация",                СтруктураШапки.Организация);
	Запрос.УстановитьПараметр("СчетПрибылейИУбытковНеЕНВД", СчетПрибылейИУбытковНеЕНВД);
	Запрос.УстановитьПараметр("ВидыСубконто",               ВидыСубконто);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обороты.Счет                       КАК СчетПрибылейИУбытков,
	|	&ПолеВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|	Обороты.Подразделение              КАК Подразделение,
	|	Обороты.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаНУОборотДт, 0) - ЕСТЬNULL(Обороты.СуммаНУОборотКт, 0)) КАК СуммаУбытка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		Счет = &СчетПрибылейИУбытковНеЕНВД,
	|		&ВидыСубконто,
	|		Организация = &Организация) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.Счет,
	|	&ПолеВариантНалогообложенияПрибыли,
	|	Обороты.Подразделение,
	|	Обороты.НаправлениеДеятельности
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(Обороты.СуммаНУОборотДт, 0) - ЕСТЬNULL(Обороты.СуммаНУОборотКт, 0)) > 0
	|";
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
		Запрос,
		ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль,
		"Обороты.Субконто1",
		ВидыСубконто);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		// Нет убытков по НУ
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Содержание = НСтр("ru = 'Перенос убытка на будущее';
						|en = 'Transfer loss to the future'");
	СубконтоУбытка = СоздатьОбновитьУбытокПредыдущегоПериода(КонецГода + 1, Отказ);
	
	СвойстваСчета = РеглУчетСервер.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.УбыткиПрошлыхЛет);
	
	Пока Выборка.Следующий() Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтруктураШапки.КонДата;
		Проводка.Организация = СтруктураШапки.Организация;
		
		Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.УбыткиПрошлыхЛет;
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Выборка.Подразделение;
		КонецЕсли;
		Если СвойстваСчета.УчетПоНаправлениямДеятельности Тогда
			Проводка.НаправлениеДеятельностиДт = Выборка.НаправлениеДеятельности;
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоУбытка);
		
		Проводка.СчетКт                    = Выборка.СчетПрибылейИУбытков;
		Проводка.ПодразделениеКт           = Выборка.Подразделение;
		Проводка.НаправлениеДеятельностиКт = Выборка.НаправлениеДеятельности;
		
		Проводка.СуммаНУДт                 = Выборка.СуммаУбытка;
		Проводка.СуммаНУКт                 = Выборка.СуммаУбытка;
		Проводка.Содержание                = Содержание;
		Если ПрименяетсяПБУ18 Тогда
			Проводка.СуммаВРДт = -Выборка.СуммаУбытка;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли,
			Выборка.ВариантНалогообложенияПрибыли);
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли,
			Выборка.ВариантНалогообложенияПрибыли);
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Ложь;
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры

Функция ПодготовитьТаблицуПересчетОНАиОНО(ТаблицаРеквизиты, СписокОрганизаций, Отказ, Реформация = Истина) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаОНАОНО();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		Неопределено, ТаблицаЗакрытие, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ТаблицаОНАОНО   = Параметры.ТаблицаОНАОНО;
	
	НоваяСтавка     = Реквизиты.НоваяСтавка;
	СтараяСтавка    = Реквизиты.СтараяСтавка;
	
	Если НоваяСтавка = СтараяСтавка Тогда
		Возврат ТаблицаОНАОНО;
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		ТаблицаВидаАктивовИОбязательств = НалоговыйУчет.ОстаткиВременныхРазницПоВидуАктивовОбязательств(
										СтрокаВидАктиваОбязательства, СписокОрганизаций, Реквизиты.НачалоГода, Реквизиты.КонДата);
		Если ТаблицаВидаАктивовИОбязательств.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаВидаАктивовИОбязательств.Свернуть("СчетОНАОНО, СтараяСумма", "Сумма");
		
		Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
			Если НЕ (Строка.Сумма = 0 И Строка.СтараяСумма = 0) Тогда
				Запись = ТаблицаОНАОНО.Добавить();
				Запись.Счет        = Строка.СчетОНАОНО;
				Запись.Вид         = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
				Запись.НоваяСумма  = Окр(Строка.Сумма * НоваяСтавка / 100, 2);
				Запись.СтараяСумма = Строка.СтараяСумма;
				Запись.Разница     = 0;
				Запись.Содержание  = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаОНАОНО.Свернуть("Счет, Вид, СтараяСумма, Содержание", "НоваяСумма, Разница");
	
	ТаблицаОНАОНО.Колонки.Добавить("ВидАктивовИОбязательствПБУ18");
	ТаблицаОНАОНО.Колонки.Добавить("Реформация");
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСтавка");
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСтавка");
	
	ОНО = Перечисления.ВидыАктивовИОбязательствПБУ18.ОНО;
	ОНА = Перечисления.ВидыАктивовИОбязательствПБУ18.ОНА;
	
	Для каждого Запись Из ТаблицаОНАОНО Цикл
		Запись.Разница      = Запись.НоваяСумма - Запись.СтараяСумма;
		Запись.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пересчет по ставке %1';
				|en = 'Recount at a rate of %1'"), Строка(Окр(НоваяСтавка, 6)) + "%");
		Запись.Реформация   = Реформация;
		Запись.СтараяСтавка = СтараяСтавка;
		Запись.НоваяСтавка  = НоваяСтавка;
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы Тогда // Счет 09
			Запись.ВидАктивовИОбязательствПБУ18 = ОНА;
		Иначе
			Запись.ВидАктивовИОбязательствПБУ18 = ОНО;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОНАОНО;
	
КонецФункции // ПодготовитьТаблицуПересчетОНАиОНО

Функция ПодготовитьТаблицуЗакрытие99Реформация(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаЗакрытие();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты                   = Параметры.Реквизиты[0];
	ТаблицаЗакрытие99Реформация = Параметры.ТаблицаЗакрытие;
	ПлательщикНалогаНаПрибыль   = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18              = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
	
	// Закрытие 99 счетов в БУ и реформация баланса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетаПрибылейИУбытков", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаУУОстатокДт, 0) КАК СуммаДтУУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаУУОстатокКт, 0) КАК СуммаКтУУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаДтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) КАК СуммаКтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаДтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) КАК СуммаКтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаДтВР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) КАК СуммаКтВР,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаСписания,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаУУОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаУУОстатокДт, 0) КАК СуммаСписанияУУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаСписанияНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаСписанияПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаСписанияВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&КонГраница,
	|		Счет В (&СчетаПрибылейИУбытков),
	|		,
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Прибыль   = 0;
	ПрибыльУУ = 0;
	ПрибыльНУ = 0;
	ПрибыльПР = 0;
	ПрибыльВР = 0;
	
	Пока Выборка.Следующий() Цикл
		СуммаСписания   = Выборка.СуммаСписания;
		СуммаСписанияУУ = Выборка.СуммаСписанияУУ;
		СуммаСписанияНУ = 0;
		СуммаСписанияПР = 0;
		СуммаСписанияВР = 0;
		
		Прибыль = Прибыль + СуммаСписания;
		ПрибыльУУ = ПрибыльУУ + СуммаСписанияУУ;
		Если ПлательщикНалогаНаПрибыль Тогда
			СуммаСписанияНУ = Выборка.СуммаСписанияНУ;
			ПрибыльНУ       = ПрибыльНУ + СуммаСписанияНУ;
			Если ПоддержкаПБУ18 Тогда
				СуммаСписанияПР = Выборка.СуммаСписанияПР;
				СуммаСписанияВР = Выборка.СуммаСписанияВР;
				ПрибыльПР       = ПрибыльПР + СуммаСписанияПР;
				ПрибыльВР       = ПрибыльВР + СуммаСписанияВР;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД Тогда
			СуммаСписания           = 0;
			СуммаСписанияУУ         = 0;
			Если ПлательщикНалогаНаПрибыль Тогда
				СуммаСписанияНУ     = 0;
				Если ПоддержкаПБУ18 Тогда
					СуммаСписанияПР = 0;
					СуммаСписанияВР = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаСписания = 0 И СуммаСписанияУУ = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания > 0  Тогда
			Запись = ТаблицаЗакрытие99Реформация.Добавить();
			Запись.СчетДт        = Выборка.Счет;
			Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
			Запись.Сумма         = СуммаСписания;
			Запись.СуммаУУ       = СуммаСписанияУУ;
			Запись.СуммаНУ       = СуммаСписанияНУ;
			Запись.СуммаПР       = СуммаСписанияПР;
			Запись.СуммаВР       = СуммаСписанияВР;
			Запись.Содержание    = Реквизиты.СодержаниеРеформация;
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			Запись = ТаблицаЗакрытие99Реформация.Добавить();
			Запись.СчетДт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Запись.СчетКт        = Выборка.Счет;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
			Запись.Сумма         = -СуммаСписания;
			Запись.СуммаУУ       = -СуммаСписанияУУ;
			Запись.СуммаНУ       = -СуммаСписанияНУ;
			Запись.СуммаПР       = -СуммаСписанияПР;
			Запись.СуммаВР       = -СуммаСписанияВР;
			Запись.Содержание    = Реквизиты.СодержаниеРеформация;
		КонецЕсли;
	КонецЦикла;
	
	Если Прибыль > 0 Тогда
		Запись = ТаблицаЗакрытие99Реформация.Добавить();
		Запись.СчетДт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
		Запись.Подразделение = Выборка.Подразделение;
		Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		Запись.Сумма         = Прибыль;
		Запись.СуммаУУ       = ПрибыльУУ;
		Запись.СуммаНУ       = ПрибыльНУ;
		Запись.СуммаПР       = ПрибыльПР;
		Запись.СуммаВР       = ПрибыльВР;
		Запись.Содержание    = Реквизиты.СодержаниеРеформация;
	КонецЕсли;
	
	Если Прибыль < 0 Тогда
		Запись = ТаблицаЗакрытие99Реформация.Добавить();
		Запись.СчетДт        = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
		Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Запись.Подразделение = Выборка.Подразделение;
		Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		Запись.Сумма         = -Прибыль;
		Запись.СуммаУУ       = -ПрибыльУУ;
		Запись.СуммаНУ       = -ПрибыльНУ;
		Запись.СуммаПР       = -ПрибыльПР;
		Запись.СуммаВР       = -ПрибыльВР;
		Запись.Содержание    = Реквизиты.СодержаниеРеформация;
	КонецЕсли;
	
	Возврат ТаблицаЗакрытие99Реформация;
	
КонецФункции // ПодготовитьТаблицуЗакрытие99Реформация()

Функция ПодготовитьТаблицуЗакрытие90БУ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие     = ПолучитьТаблицаЗакрытие();
	Параметры           = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты           = Параметры.Реквизиты[0];
	
	ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(
		Параметры.ТаблицаЗакрытие,
		Реквизиты.КонДата,
		Реквизиты.Организация,
		ПланыСчетов.Хозрасчетный.Продажи,
		ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж,
		Реквизиты.СодержаниеЗакрытиеГода);
		
	Возврат Параметры.ТаблицаЗакрытие;
		
КонецФункции

Функция ПодготовитьТаблицуЗакрытие91БУ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие     = ПолучитьТаблицаЗакрытие();
	Параметры           = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты           = Параметры.Реквизиты[0];
	
	ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(
		Параметры.ТаблицаЗакрытие,
		Реквизиты.КонДата,
		Реквизиты.Организация,
		ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы,
		ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов,
		Реквизиты.СодержаниеЗакрытиеГода);
		
	Возврат Параметры.ТаблицаЗакрытие;
	
КонецФункции // ПодготовитьТаблицуЗакрытие91БУ()

// Готовит данные для закрытия счетов внутренними записями.
// См. приказ Минфина от 31 октября 2000 г. N 94н:
// "По окончании отчетного года 
// - все субсчета, открытые к счету 90 "Продажи" (кроме субсчета 90-9 "Прибыль / убыток от продаж"), 
// закрываются внутренними записями на субсчет 90-9 "Прибыль / убыток от продаж";
// - все субсчета, открытые к счету 91 "Прочие доходы и расходы" (кроме субсчета 91-9 "Сальдо прочих доходов и расходов"),
// закрываются внутренними записями на субсчет 91-9 "Сальдо прочих доходов и расходов".".
//
// Параметры:
//  Проводки			 - ТаблицаЗначений - заполняемая таблица, описывающая проводки по закрытию счета, см. ПолучитьТаблицаЗакрытие
//  Период				 - Дата - дата, характеризующая закрываемый год: любая дата этого года
//  Организация			 - СправочникСсылка.Организации - (головная) организация
//  СинтетическийСчет	 - ПланСчетовСсылка.Хозрасчетный - закрываемый счет: 90 или 91
//  СубсчетСальдо		 - ПланСчетовСсылка.Хозрасчетный - субсчет, на который закрываются субсчета: 90.09 или 91.09.
Процедура ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(Проводки, Период, Организация, СинтетическийСчет, СубсчетСальдо, Содержание) Экспорт
	
	РеформацияБалансаВРазрезеОП = УчетнаяПолитикаПереопределяемый.ПриРеформацииБалансаЗзакрывать90И91СчФилиаловЧерез79Сч(Организация,Период);
	Если РеформацияБалансаВРазрезеОП Тогда
		СубсчетаСинтетическогоСчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СинтетическийСчет);
	Иначе	
		// Подготовим список закрываемых субсчетов (все счета закрываемого счета, кроме предназначенного для переноса сальдо).
		СубсчетаСинтетическогоСчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(СинтетическийСчет),
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(СубсчетСальдо));
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоСледующегоГода", КонецГода(Период) + 1);
	Запрос.УстановитьПараметр("ВсяОрганизация",       Организация);
	Запрос.УстановитьПараметр("Счета",                СубсчетаСинтетическогоСчета);
	
	// Все субконто на счетах 90, 91 должны быть оборотными.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет.Вид КАК Вид,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаУУОстаток, 0)) КАК СуммаУУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстаток, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстаток, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстаток, 0)) КАК СуммаВР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстаток, 0)) КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоСледующегоГода, Счет В (&Счета), , Организация В (&ВсяОрганизация)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности,
	|	ХозрасчетныйОстатки.Счет.Вид
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Счет.Порядок,
	|	ХозрасчетныйОстатки.Счет";
	
	Выборка = Запрос.Выполнить().Выбрать();

	СуммаСубсчетСальдо   = 0;
	СуммаСубсчетСальдоУУ = 0;
	СуммаСубсчетСальдоНУ = 0;
	СуммаСубсчетСальдоПР = 0;
	СуммаСубсчетСальдоВР = 0;  

	Пока Выборка.Следующий() Цикл
		
		СуммаСубсчетСальдо   = СуммаСубсчетСальдо   + Выборка.Сумма;     
		СуммаСубсчетСальдоУУ = СуммаСубсчетСальдоУУ + Выборка.СуммаУУ; 
		СуммаСубсчетСальдоНУ = СуммаСубсчетСальдоНУ + Выборка.СуммаНУ; 
		СуммаСубсчетСальдоПР = СуммаСубсчетСальдоПР + Выборка.СуммаПР; 
		СуммаСубсчетСальдоВР = СуммаСубсчетСальдоВР + Выборка.СуммаВР; 

		Если Выборка.Счет = СубсчетСальдо Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Сумма = 0 И Выборка.СуммаУУ = 0 И Выборка.Количество = 0 И Выборка.СуммаНУ = 0 И Выборка.СуммаПР = 0  И Выборка.СуммаВР = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Запись = Проводки.Добавить();
		Запись.Содержание    = Содержание;
		Запись.Подразделение = Выборка.Подразделение;
		Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		Если Выборка.Вид = ВидСчета.Пассивный Тогда
			
			Запись.СчетДт        = Выборка.Счет;
			Запись.СчетКт        = СубсчетСальдо;
			Запись.Сумма         = -Выборка.Сумма;
			Запись.СуммаУУ       = -Выборка.СуммаУУ;
			Запись.СуммаНУ       = -Выборка.СуммаНУ;
			Запись.СуммаПР       = -Выборка.СуммаПР;
			Запись.СуммаВР       = -Выборка.СуммаВР;
			Запись.КоличествоДт  = -Выборка.Количество;
			
		Иначе
			
			Запись.СчетДт        = СубсчетСальдо;
			Запись.СчетКт        = Выборка.Счет;
			Запись.Сумма         = Выборка.Сумма;
			Запись.СуммаУУ       = Выборка.СуммаУУ;
			Запись.СуммаНУ       = Выборка.СуммаНУ;
			Запись.СуммаПР       = Выборка.СуммаПР;
			Запись.СуммаВР       = Выборка.СуммаВР;
			Запись.КоличествоКт  = Выборка.Количество;
			
		КонецЕсли;

	КонецЦикла;
		
    Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(Организация) И РеформацияБалансаВРазрезеОП 
		 И НЕ (СуммаСубсчетСальдо = 0 И СуммаСубсчетСальдоУУ = 0 И СуммаСубсчетСальдоНУ = 0 И СуммаСубсчетСальдоПР = 0 И СуммаСубсчетСальдоВР = 0) Тогда
				 
		 ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
		 Счет7902 = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
	 
		 Запись = Проводки.Добавить();
		 Запись.Организация   = Организация;
		 Запись.Содержание    = Содержание;
		 Запись.Подразделение = Выборка.Подразделение;
		 Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		 Если СуммаСубсчетСальдо < 0 Тогда
			 
			 Запись.СчетДт        = СубсчетСальдо;
			 Запись.СчетКт        = Счет7902;
			 Запись.СубконтоКт1   = ГоловнаяОрганизация;
			 Запись.Сумма         = -СуммаСубсчетСальдо;
			 Запись.СуммаУУ       = -СуммаСубсчетСальдоУУ;
			 Запись.СуммаНУ       = -СуммаСубсчетСальдоНУ;
			 Запись.СуммаПР       = -СуммаСубсчетСальдоПР;
			 Запись.СуммаВР       = -СуммаСубсчетСальдоВР;
			 
		 Иначе
			 
			 Запись.СчетДт        = Счет7902;
			 Запись.СубконтоДт1   = ГоловнаяОрганизация;
			 Запись.СчетКт        = СубсчетСальдо;
			 Запись.Сумма         = СуммаСубсчетСальдо;
			 Запись.СуммаУУ       = СуммаСубсчетСальдоУУ;
			 Запись.СуммаНУ       = СуммаСубсчетСальдоНУ;
			 Запись.СуммаПР       = СуммаСубсчетСальдоПР;
			 Запись.СуммаВР       = СуммаСубсчетСальдоВР;
			 
		 КонецЕсли;
		 
		 Запись = Проводки.Добавить();
		 Запись.Организация   = ГоловнаяОрганизация;
		 Запись.Содержание    = Содержание;
		 Запись.Подразделение = Выборка.Подразделение;
		 Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		 Если СуммаСубсчетСальдо < 0 Тогда
			 
			 Запись.СчетДт        = Счет7902;
			 Запись.СубконтоДт1   = Организация;
			 Запись.СчетКт        = СубсчетСальдо;
			 Запись.Сумма         = -СуммаСубсчетСальдо;
			 Запись.СуммаУУ       = -СуммаСубсчетСальдоУУ;
			 Запись.СуммаНУ       = -СуммаСубсчетСальдоНУ;
			 Запись.СуммаПР       = -СуммаСубсчетСальдоПР;
			 Запись.СуммаВР       = -СуммаСубсчетСальдоВР;
			 
		 Иначе
			 
			 Запись.СчетДт        = СубсчетСальдо;
			 Запись.СчетКт        = Счет7902;
			 Запись.СубконтоКт1   = Организация;
			 Запись.Сумма         = СуммаСубсчетСальдо;
			 Запись.СуммаУУ       = СуммаСубсчетСальдоУУ;
			 Запись.СуммаНУ       = СуммаСубсчетСальдоНУ;
			 Запись.СуммаПР       = СуммаСубсчетСальдоПР;
			 Запись.СуммаВР       = СуммаСубсчетСальдоВР
			 
		 КонецЕсли;   
		 
	 КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуЗакрытиеСчетаНЕ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаЗакрытие();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ТаблицаЗакрытиеСчетаНЕ = Параметры.ТаблицаЗакрытие;
	
	КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",     НачалоГода(Реквизиты.КонДата));
	Запрос.УстановитьПараметр("КонГраница",     КонГраница);
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	НалоговыйОстатки.Подразделение КАК Подразделение,
	|	НалоговыйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0))     КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаУУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаУУОстатокДт, 0)) КАК СуммаСписанияУУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница, 
	|			Счет В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходыРасходыНеУчитываемые))
	|			,
	|			, Организация = &Организация) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Подразделение,
	|	НалоговыйОстатки.НаправлениеДеятельности,
	|	НалоговыйОстатки.Субконто1";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		Если Выборка.СуммаСписанияНУ > 0 Тогда
			Запись = ТаблицаЗакрытиеСчетаНЕ.Добавить();
			Запись.СчетДт      = Выборка.Счет;
			Запись.СубконтоДт1 = Выборка.СтатьяЗатрат;
			Если НЕ Выборка.Счет.Забалансовый Тогда
				Запись.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			КонецЕсли;
			Запись.Сумма       = Выборка.СуммаСписания;
			Запись.СуммаУУ     = Выборка.СуммаСписанияУУ;
			Запись.СуммаНУ     = Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = Запись.Сумма - Запись.СуммаНУ - Запись.СуммаПР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;

		КонецЕсли;
		
		Если Выборка.СуммаСписанияНУ < 0 Тогда
			Запись = ТаблицаЗакрытиеСчетаНЕ.Добавить();
			Если НЕ Выборка.Счет.Забалансовый Тогда
				Запись.СчетДт      = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			КонецЕсли;
			Запись.СчетКт      = Выборка.Счет;
			Запись.СубконтоКт1 = Выборка.СтатьяЗатрат;
			Запись.Сумма       = -Выборка.СуммаСписания;
			Запись.СуммаУУ     = -Выборка.СуммаСписанияУУ;
			Запись.СуммаНУ     = -Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = -Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = Запись.Сумма - Запись.СуммаНУ - Запись.СуммаПР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода; 
			Запись.Подразделение = Выборка.Подразделение;
			Запись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;

		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗакрытиеСчетаНЕ;
	
КонецФункции // ПодготовитьТаблицуЗакрытиеСчетаНЕ()

Функция ПолучитьТаблицаЗакрытие()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	ОписаниеТипаЧисла15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаЗакрытие = Новый ТаблицаЗначений;
	ТаблицаЗакрытие.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗакрытие.Колонки.Добавить("СчетДт",        ОписаниеТипаСчетХозр);
	ТаблицаЗакрытие.Колонки.Добавить("СчетКт",        ОписаниеТипаСчетХозр);
	ТаблицаЗакрытие.Колонки.Добавить("Подразделение",           БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаЗакрытие.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ТаблицаЗакрытие.Колонки.Добавить("СубконтоДт1");
	ТаблицаЗакрытие.Колонки.Добавить("СубконтоКт1");
	ТаблицаЗакрытие.Колонки.Добавить("Сумма",         ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаУУ",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаФО",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаНУ",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаПР",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаВР",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("КоличествоДт",  ОписаниеТипаЧисла15_3);
	ТаблицаЗакрытие.Колонки.Добавить("КоличествоКт",  ОписаниеТипаЧисла15_3);
	ТаблицаЗакрытие.Колонки.Добавить("Содержание",    ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ТаблицаЗакрытие;
	
КонецФункции

Функция ПолучитьТаблицаОНАОНО()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	
	ТаблицаОНАОНО = Новый ТаблицаЗначений;
	ТаблицаОНАОНО.Колонки.Добавить("Счет",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСумма",  ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСумма", ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("Разница",     ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("Вид",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ТаблицаОНАОНО.Колонки.Добавить("Содержание",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ТаблицаОНАОНО;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, ТаблицаОНАОНО, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаЗакрытие
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "Организация,"   // <Ссылка на справочник организаций>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "НаправлениеДеятельности," // <Ссылка на направление деятельности>
	+ "СубконтоДт1,"
	+ "СубконтоКт1,"
	+ "Сумма,"         // <Число, 15, 2>
	+ "СуммаУУ,"         // <Число, 15, 2>
	+ "СуммаФО,"         // <Число, 15, 2>
	+ "СуммаНУ,"       // <Число, 15, 2>
	+ "СуммаПР,"       // <Число, 15, 2>
	+ "СуммаВР,"       // <Число, 15, 2>
	+ "КоличествоДт,"  // <Число, 15, 3>
	+ "КоличествоКт,"  // <Число, 15, 3>
	+ "Содержание"     // <Строка, 150>
	;
	
	Параметры.Вставить("ТаблицаЗакрытие", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаЗакрытие, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаОНАОНО
	СписокОбязательныхКолонок = ""
	+ "Счет,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "НоваяСумма,"  // <Число, 15, 2>
	+ "СтараяСумма," // <Число, 15, 2>
	+ "Разница,"     // <Число, 15, 2>
	+ "Вид,"         // <ПеречислениеСсылка.ВидыАктивовИОбязательств>
	+ "Содержание"   // <Строка, 150>
	;
	
	Параметры.Вставить("ТаблицаОНАОНО", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОНАОНО, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                  // <Дата>
	+ "НачалоГода,"              // <Дата>
	+ "НачДата,"                 // <Дата>
	+ "КонДата,"                 // <Дата>
	+ "Организация,"             // <СправочникСсылка.Организации>
	+ "Регистратор,"             // <ДокументСсылка.*>
	+ "Предприниматель,"         // <Булево>
	+ "НоваяСтавка,"             // <Число, 15, 2>
	+ "СтараяСтавка,"            // <Число, 15, 2>
	+ "СодержаниеРеформация,"    // <Строка, 150>
	+ "СодержаниеЗакрытиеГода"   // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеГода()

Функция СоздатьОбновитьУбытокПредыдущегоПериода(ДатаНачалаСписания, Отказ) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаСписания",  ДатаНачалаСписания);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	УбыткиПрошлыхЛет.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.УбыткиПрошлыхЛет КАК УбыткиПрошлыхЛет
	               |ГДЕ
	               |	УбыткиПрошлыхЛет.ДатаНачалаСписания = &ДатаНачалаСписания";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда //создаем новый элемент
		УбытокПредыдущегоПериода = Справочники.УбыткиПрошлыхЛет.СоздатьЭлемент();
		УбытокПредыдущегоПериода.ДатаНачалаСписания = ДатаНачалаСписания;
		УбытокПредыдущегоПериода.ДатаОкончанияСписания = ДобавитьМесяц(ДатаНачалаСписания,120)-1; //10 лет
		УбытокПредыдущегоПериода.ВидРБП = Перечисления.ВидыРБП.УбыткиПрошлыхЛет;
		УбытокПредыдущегоПериода.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Убыток за %1 г.';
														|en = 'Loss per %1.'"),
													Формат(Год(ДатаНачалаСписания)-1,"ЧГ=0"));
		Попытка 
			УбытокПредыдущегоПериода.Записать();
		Исключение
			Отказ = Истина;	
		КонецПопытки;
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			УбытокПредыдущегоПериода = Выборка.Ссылка;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат УбытокПредыдущегоПериода.Ссылка;
	
КонецФункции

#КонецОбласти

#Область РезервыПоСомнительнымДолгам

Процедура ПодготовитьТаблицыРасчетРезервовПоСомнительнымДолгам(РезервыПоСомнительнымДолгам, ТаблицаДолейКосвенныхРасходов, ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицыРезервовПоСомнительнымДолгам = ПолучитьТаблицаРезервовПоСомнительнымДолгам();
	Параметры = ПодготовитьПараметрыРезервовПоСомнительнымДолгам(
		ТаблицыРезервовПоСомнительнымДолгам,
		РезервыПоСомнительнымДолгам,
		ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	РасчетРезервыПоСомнительнымДолгам = Параметры.РезервыПоСомнительнымДолгам;
	
	Если РасчетРезервыПоСомнительнымДолгам.Количество() > 0 Тогда
		РасчетРезервыПоСомнительнымДолгам.Очистить();
	КонецЕсли;
	
	РасчетРезервыПоСомнительнымДолгам = УчетДоходовРасходов.СформироватьТаблицуРасчетаРезервовПоСомнительнымДолгам(
		ТаблицаРеквизиты,
		ТаблицаДолейКосвенныхРасходов);
	
	РезервыПоСомнительнымДолгам = РасчетРезервыПоСомнительнымДолгам.Скопировать();
	
КонецПроцедуры

Функция ПолучитьТаблицаРезервовПоСомнительнымДолгам()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаРезервовПоСомнительнымДолгам = Новый ТаблицаЗначений;
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("Сумма",							ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоБУ",						ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоНУ",						ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ВосстановленоБУ",					ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ВосстановленоНУ",					ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ПрисоединеноБУ",					ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоСНачалаГодаНУ",			ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("Контрагент",						Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ДоговорКонтрагента",				БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ДокументРасчетовСКонтрагентом",	Неопределено);
	
	Возврат ТаблицаРезервовПоСомнительнымДолгам;
	
КонецФункции

Функция ПодготовитьПараметрыРезервовПоСомнительнымДолгам(ТаблицаПроводок, РезервыПоСомнительнымДолгам, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРезервовПоСомнительнымДолгам
	
	СписокОбязательныхКолонок = ""
		+ "НачисленоБУ,"					// <Число, 15, 2>
		+ "НачисленоНУ,"					// <Число, 15, 2>
		+ "ВосстановленоБУ,"				// <Число, 15, 2>
		+ "ВосстановленоНУ,"				// <Число, 15, 2>
		+ "ПрисоединеноБУ,"					// <Число, 15, 2>
		+ "НачисленоСНачалаГодаНУ,"			// <Число, 15, 2>
		+ "Контрагент,"						// <СправочникСсылка.Контрагент>
		+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговораКонтрагнетов>
		+ "ДокументРасчетовСКонтрагентом"	// <Документы расчетов с контрагентами>
		+ "";
	
	ТаблицаПараметров = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПараметрыПроведения(
		ТаблицаПроводок,
		СписокОбязательныхКолонок);
	Параметры.Вставить("ТаблицаРезервовПоСомнительнымДолгам", ТаблицаПараметров);
	
	// Подготовка таблицы Параметры.РезервыПоСомнительнымДолгам
	
	ТаблицаПараметров = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПараметрыПроведения(
		РезервыПоСомнительнымДолгам,
		СписокОбязательныхКолонок);
	Параметры.Вставить("РезервыПоСомнительнымДолгам", ТаблицаПараметров);
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата>
		+ "КонДата,"		// <Дата>
		+ "Организация,"	// <СправочникСсылка.Организации>
		+ "Регистратор"		// <ДокументСсылка.*>
		+ "";
	
	ТаблицаПараметров = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПараметрыПроведения(
		ТаблицаРеквизиты,
		СписокОбязательныхКолонок);
	Параметры.Вставить("Реквизиты", ТаблицаПараметров);
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияРезервыПоСомнительнымДолгам(ТаблицаРезервовПоСомнительнымДолгам, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры		= ПодготовитьПараметрыРезервовПоСомнительнымДолгам(ТаблицаРезервовПоСомнительнымДолгам, Неопределено, ТаблицаРеквизиты);
	Реквизиты		= Параметры.Реквизиты[0];
	ПрименениеПБУ18	= УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	Счет63			= ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам;
	Счет91_1		= ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Счет91_2		= ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	СтатьяРасходов	= ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам;
	СтатьяДоходов	= ПланыВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам;
	ДанныеСворачивания = "Контрагент,ДоговорКонтрагента,ДокументРасчетовСКонтрагентом";
	КолонкиСворачивания = "НачисленоБУ,НачисленоНУ,ВосстановленоБУ,ВосстановленоНУ,ПрисоединеноБУ,НачисленоСНачалаГодаНУ";
	ТаблицаРезервовПоСомнительнымДолгам.Свернуть(ДанныеСворачивания, КолонкиСворачивания);
	
	Для каждого Запись Из ТаблицаРезервовПоСомнительнымДолгам Цикл
		
		Если Запись.НачисленоБУ <> 0 Или Запись.НачисленоНУ <> 0 Тогда
			
			Проводка                = Движения.Хозрасчетный.Добавить();
			Проводка.Период         = Реквизиты.Период;
			Проводка.Организация    = Реквизиты.Организация;
			
			Проводка.СчетДт         = Счет91_2;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтатьяРасходов);
			
			Проводка.СчетКт       = Счет63;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Запись.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма        = Запись.НачисленоБУ;
			
			НачисленоНУ = Запись.НачисленоНУ;
			НачисленоПР = Запись.НачисленоБУ - Запись.НачисленоНУ;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(НачисленоНУ,НачисленоНУ,НачисленоПР, НачисленоПР,0,0,Проводка, ПрименениеПБУ18); 
			
			Проводка.Содержание   = НСтр("ru = 'Начислены резервы по сомнительным долгам';
										|en = 'Doubtful debt reserves are accrued'");
		КонецЕсли;
		
		Если Запись.ВосстановленоБУ <> 0 Или Запись.ВосстановленоНУ <> 0 Тогда
			
			Проводка                = Движения.Хозрасчетный.Добавить();
			Проводка.Период         = Реквизиты.Период;
			Проводка.Организация    = Реквизиты.Организация;
			
			Проводка.СчетКт         = Счет91_1;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДоходов);
			
			Проводка.СчетДт       = Счет63;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Запись.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма        = Запись.ВосстановленоБУ;
			
			НачисленоНУ = Запись.ВосстановленоНУ;
			НачисленоПР = Запись.ВосстановленоБУ - Запись.ВосстановленоНУ;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(НачисленоНУ,НачисленоНУ,НачисленоПР, НачисленоПР,0,0,Проводка, ПрименениеПБУ18); 
			
			Проводка.Содержание   = НСтр("ru = 'Восстановлены резервы по сомнительным долгам';
										|en = 'Reserves for doubtful debts are restored'");
		КонецЕсли;
		
		Если Запись.ПрисоединеноБУ <> 0 Тогда

			ПрисоединеноБУ = Запись.ПрисоединеноБУ;
			
			Если ПрисоединеноБУ <> 0 Тогда
				Проводка                = Движения.Хозрасчетный.Добавить();
				Проводка.Период         = Реквизиты.Период;
				Проводка.Организация    = Реквизиты.Организация;
				
				Проводка.СчетКт         = Счет91_1;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДоходов);
				
				Проводка.СчетДт       	= Счет63;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Запись.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.ДокументРасчетовСКонтрагентом);
				
				Проводка.Сумма        = ПрисоединеноБУ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0,0,ПрисоединеноБУ,ПрисоединеноБУ,0,0,Проводка, ПрименениеПБУ18); 
				
				Проводка.Содержание   = НСтр("ru = 'Присоединение резерва к доходам';
											|en = 'Merge reserve and income'");
				
				Проводка                = Движения.Хозрасчетный.Добавить();
				Проводка.Период         = Реквизиты.Период;
				Проводка.Организация    = Реквизиты.Организация;
				
				Проводка.СчетДт         = Счет91_2;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтатьяРасходов);
				
				Проводка.СчетКт       	= Счет63;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Запись.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.ДокументРасчетовСКонтрагентом);
				
				Проводка.Сумма        = ПрисоединеноБУ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0,0,ПрисоединеноБУ,ПрисоединеноБУ,0,0,Проводка, ПрименениеПБУ18); 
				
				Проводка.Содержание   = НСтр("ru = 'Присоединение резерва к расходам';
											|en = 'Merge reserve and expenses '");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СписаниеУбытковПрошлыхЛет

Процедура СформироватьДвиженияСписаниеУбытков(ТаблицаУбытков, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры       = ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
		
	Для каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период                                   = Реквизиты.Период;
		Проводка.Организация                              = Реквизиты.Организация;
		Проводка.СчетДт                                   = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Проводка.СубконтоДт.ПрибылиИУбытки                = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Проводка.СчетКт                                   = УбытокПрошлогоПериода.Счет;
		Проводка.СубконтоКт.РасходыБудущихПериодов        = УбытокПрошлогоПериода.РБП;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли,
			УбытокПрошлогоПериода.ВариантНалогообложенияПрибыли);
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли,
			УбытокПрошлогоПериода.ВариантНалогообложенияПрибыли);
		
		Проводка.Содержание                               = Реквизиты.Содержание;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			УбытокПрошлогоПериода.СуммаНУ, УбытокПрошлогоПериода.СуммаНУ, 0, 0,
			-УбытокПрошлогоПериода.СуммаНУ, -УбытокПрошлогоПериода.СуммаНУ, 
			Проводка, ПоддержкаПБУ18); 
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Ложь;
	Движения.Хозрасчетный.Записать(Ложь);
	
КонецПроцедуры

Функция ПодготовитьТаблицуУбытков(ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаПереносаУбытков = Новый ТаблицаЗначений;
	ТаблицаПереносаУбытков.Колонки.Добавить("Счет", 	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПереносаУбытков.Колонки.Добавить("ВариантНалогообложенияПрибыли",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	ТаблицаПереносаУбытков.Колонки.Добавить("РБП", 		Новый ОписаниеТипов("СправочникСсылка.УбыткиПрошлыхЛет"));
	ТаблицаПереносаУбытков.Колонки.Добавить("СуммаНУ", 	ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	
	ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль =
		РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(Реквизиты.Организация, Реквизиты.КонДата);
	
	ВидыСубконто_ПрибыльНУ = Новый Массив;
	ВидыСубконто_РБП       = Новый Массив;
	
	ВидыСубконто_РБП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",  НачалоГода(Реквизиты.НачДата));
	Запрос.УстановитьПараметр("КонДата",     Реквизиты.КонДата);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияСписания", НачалоДня(Реквизиты.КонДата));
	Запрос.УстановитьПараметр("Счета99",     БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД));
	Запрос.УстановитьПараметр("Счета97",     БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов));
	Запрос.УстановитьПараметр("ВидыСубконто_ПрибыльНУ", ВидыСубконто_ПрибыльНУ);
	Запрос.УстановитьПараметр("ВидыСубконто_РБП",       ВидыСубконто_РБП);
	
	// До налогового периода 2017 года можно было списывать убытки за 10 предыдущих лет
	// С 2017 года этот период зафиксирован "снизу" (401-ФЗ): 
	// можно списывать убытки прошлых лет, начиная с 2007 года, бессрочно.
	Если Реквизиты.КонДата < '2017-01-01' Тогда
		// Здесь проверяем только, что срок списания убытка не истек 
		Запрос.УстановитьПараметр("ДатаНачалаСписания", '0001-01-01');
		Запрос.УстановитьПараметр("ПродолжительностьСписанияУбытковОграничена", Истина);
	Иначе
		// Убытки 2007 года списываются начиная с 01.01.2008
		Запрос.УстановитьПараметр("ДатаНачалаСписания", '2008-01-01');
		Запрос.УстановитьПараметр("ПродолжительностьСписанияУбытковОграничена", Ложь);
	КонецЕсли;
	
	// Получаем суммы:
	// 1. Финансовый результат года.
	// 2. Распределяемый убыток.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПолеВариантНалогообложенияПрибыли_ПрибыльНУ КАК ВариантНалогообложенияПрибыли,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) - СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК ПрибыльНУ
	|ПОМЕСТИТЬ ТаблицаПрибылиНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&НачалоГода,
	|		&КонДата,
	|		,
	|		Счет В (&Счета99),
	|		&ВидыСубконто_ПрибыльНУ,
	|		Организация = &Организация,
	|		,
	|		) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	&ПолеВариантНалогообложенияПрибыли_ПрибыльНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВариантНалогообложенияПрибыли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Ссылка,
	|	РасходыБудущихПериодов.ДатаНачалаСписания КАК ДатаНачалаСписания
	|ПОМЕСТИТЬ СправочникРБП
	|ИЗ
	|	Справочник.УбыткиПрошлыхЛет КАК РасходыБудущихПериодов
	|ГДЕ
	|	РасходыБудущихПериодов.ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)
	|	И РасходыБудущихПериодов.ДатаНачалаСписания МЕЖДУ &ДатаНачалаСписания И &НачалоГода
	|	И (НЕ &ПродолжительностьСписанияУбытковОграничена
	|			ИЛИ РасходыБудущихПериодов.ДатаОкончанияСписания >= &ДатаОкончанияСписания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК РБП,
	|	&ПолеВариантНалогообложенияПрибыли_РБП КАК ВариантНалогообложенияПрибыли,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУ,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУКонечныйОстаток) КАК Остаток
	|ПОМЕСТИТЬ ОстаткиИОборотыРБП
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоГода,
	|			&КонДата,
	|			,
	|			,
	|			Счет В (&Счета97),
	|			&ВидыСубконто_РБП,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СправочникРБП.Ссылка
	|					ИЗ
	|						СправочникРБП КАК СправочникРБП)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	&ПолеВариантНалогообложенияПрибыли_РБП,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВариантНалогообложенияПрибыли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиИОборотыРБП.ВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ОстаткиИОборотыРБП.ВариантНалогообложенияПрибыли КАК Справочник.ВариантыНалогообложенияПрибыли).УменьшатьНалоговуюБазуНаВсюСуммуРанееПолученногоУбытка,
	|		ЛОЖЬ) КАК УменьшатьНалоговуюБазуНаВсюСуммуРанееПолученногоУбытка,
	|
	|	СправочникРБП.Ссылка КАК РБП,
	|	СправочникРБП.ДатаНачалаСписания КАК Год,
	|	ОстаткиИОборотыРБП.Счет КАК Счет,
	|
	|	ОстаткиИОборотыРБП.СуммаНУ КАК УбыткаСписано,
	|	ОстаткиИОборотыРБП.Остаток КАК ОстатокУбытка,
	|	ЕСТЬNULL(ТаблицаПрибылиНУ.ПрибыльНУ, 0) КАК ПрибыльНУ
	|	
	|ИЗ
	|	ОстаткиИОборотыРБП КАК ОстаткиИОборотыРБП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправочникРБП КАК СправочникРБП
	|		ПО ОстаткиИОборотыРБП.РБП = СправочникРБП.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПрибылиНУ КАК ТаблицаПрибылиНУ
	|		ПО ОстаткиИОборотыРБП.ВариантНалогообложенияПрибыли = ТаблицаПрибылиНУ.ВариантНалогообложенияПрибыли
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантНалогообложенияПрибыли,
	|	Год
	|
	|ИТОГИ
	|	МАКСИМУМ(ПрибыльНУ),
	|	МАКСИМУМ(УменьшатьНалоговуюБазуНаВсюСуммуРанееПолученногоУбытка),
	|	СУММА(УбыткаСписано),
	|	СУММА(ОстатокУбытка)
	|ПО
	|	ВариантНалогообложенияПрибыли
	|
	|";
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
			Запрос,
			ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль,
			"ХозрасчетныйОбороты.Субконто1",
			ВидыСубконто_ПрибыльНУ,
			"&ПолеВариантНалогообложенияПрибыли_ПрибыльНУ");
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
			Запрос,
			ИспользуетсяРаздельныйУчетПоНалогуНаПрибыль,
			"ХозрасчетныйОбороты.Субконто2",
			ВидыСубконто_РБП,
			"&ПолеВариантНалогообложенияПрибыли_РБП");
	
	
	ВыборкаВариантыНалогообложения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Предварительно создадим шаблон таблицы для данных убытков
	ОписаниеТипЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	
	УбыткиПрошлогоПериода = Новый ТаблицаЗначений;
	УбыткиПрошлогоПериода.Колонки.Добавить("РБП",           Новый ОписаниеТипов("СправочникСсылка.УбыткиПрошлыхЛет"));
	УбыткиПрошлогоПериода.Колонки.Добавить("Год",           Новый ОписаниеТипов("Дата"));
	УбыткиПрошлогоПериода.Колонки.Добавить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	УбыткиПрошлогоПериода.Колонки.Добавить("УбыткаСписано", ОписаниеТипЧисло);
	УбыткиПрошлогоПериода.Колонки.Добавить("ОстатокУбытка", ОписаниеТипЧисло);
	
	Пока ВыборкаВариантыНалогообложения.Следующий() Цикл
	
		ПрибыльНУ            = ВыборкаВариантыНалогообложения.ПрибыльНУ;
		СписанныйРанееУбыток = ВыборкаВариантыНалогообложения.УбыткаСписано;
		ВсегоОстатокУбытков  = ВыборкаВариантыНалогообложения.ОстатокУбытка;
		
		Если ПрибыльНУ <= 0 И СписанныйРанееУбыток = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// заполним таблицу убытков прошлого периода для дальнейшей обработки
		УбыткиПрошлогоПериода.Очистить();
		ВыборкаУбытки = ВыборкаВариантыНалогообложения.Выбрать();
		Пока ВыборкаУбытки.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(УбыткиПрошлогоПериода.Добавить(), ВыборкаУбытки);
		КонецЦикла;
		
		// ПрибыльНУ может включать убытки, которые в прошлых отчетных периодах уменьшили налогооблагаемую базу текущего
		// налогового периода Для расчета ограничения списания убытков
		// рассчитаем прибыль текущего периода (с начала года по конец отчетного месяца) без учета признанных убытков прошлых лет.
		ПрибыльНУТекущегоПериода = ПрибыльНУ + СписанныйРанееУбыток;
			
		// Если есть прибыль без учета списанных ранее убытков прошлых лет, то считаем ограничение на сумму переноса убытков в
		// текущем периоде Если в текущем периоде получен убыток (или прибыль = 0), то убытки прошлых лет списывать нельзя -
		// нужно сторнировать перенесенные ранее суммы убытков.
		СписаниеУбытка = 0;
		Если ПрибыльНУТекущегоПериода > 0 Тогда
			КоэффициентОграниченияУбытков =  НалоговыйУчет.МаксимальнаяДоляУменьшенияПрибылиЗаСчетУбытковПрошлыхЛет(Реквизиты.КонДата,
				ВыборкаВариантыНалогообложения.УменьшатьНалоговуюБазуНаВсюСуммуРанееПолученногоУбытка);
			Если КоэффициентОграниченияУбытков < 1 Тогда
				ЛимитСписанияУбытка = Цел(ПрибыльНУТекущегоПериода * КоэффициентОграниченияУбытков);
			Иначе
				ЛимитСписанияУбытка = ПрибыльНУТекущегоПериода;
			КонецЕсли;
			СписаниеУбытка = Мин(ВсегоОстатокУбытков + СписанныйРанееУбыток, ЛимитСписанияУбытка);
		КонецЕсли;
		
		СуммаСписания = СписаниеУбытка - СписанныйРанееУбыток;
		
		Если СуммаСписания < 0 Тогда
			// В первую очередь сторнируем убытки наиболее поздних периодов
			УбыткиПрошлогоПериода.Сортировать("Год Убыв");
		КонецЕсли;
		
		// Заполним итоговую таблицу убытков для формирования проводок
		Для Каждого УбытокПрошлогоПериода Из УбыткиПрошлогоПериода Цикл
			
			Если СуммаСписания = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ПереносУбытка = ТаблицаПереносаУбытков.Добавить();
			ЗаполнитьЗначенияСвойств(ПереносУбытка, УбытокПрошлогоПериода, "Счет, РБП");
			ПереносУбытка.ВариантНалогообложенияПрибыли = ВыборкаВариантыНалогообложения.ВариантНалогообложенияПрибыли;
			
			Если СуммаСписания > 0 Тогда 
				СуммаУбыткаМожноСписать = Мин(СуммаСписания, УбытокПрошлогоПериода.ОстатокУбытка);
			Иначе
				СуммаУбыткаМожноСписать = Макс(СуммаСписания, -УбытокПрошлогоПериода.УбыткаСписано);
			КонецЕсли;
			
			ПереносУбытка.СуммаНУ = СуммаУбыткаМожноСписать;
			СуммаСписания         = СуммаСписания - СуммаУбыткаМожноСписать;
						
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаПереносаУбытков;
	
КонецФункции

Функция ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"       // <Дата>
	+ "НачДата,"      // <Дата>
	+ "КонДата,"      // <Дата>
	+ "Организация,"  // <СправочникСсылка.Организации>
	+ "Регистратор,"  // <ДокументСсылка.*>
	+ "Содержание"   // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СписаниеКосвенныхРасходов


// Формирует проводки по списанию косвенных расходов
// 
// Параметры:
// 	ТаблицаДанных - см. НалоговыйУчет.ПолучитьРасчетСписанияКосвенныхРасходов
// 	ПараметрыПроведения - см. КонтекстСписаниеКосвенныхРасходов
// 	Движения - КоллекцияДвижений -
// 	Отказ - Булево -
Процедура СформироватьДвиженияСписаниеКосвенныхРасходов(ТаблицаДанных, ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Реквизиты            = ПараметрыПроведения;
	ПоддержкаПБУ18       = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.НачДата);
	ДвиженияХозрасчетный = Движения.Хозрасчетный;
	
	Для каждого ОписаниеРасходов Из ТаблицаДанных Цикл
		
		Проводка = ДвиженияХозрасчетный.Добавить();
		
		Проводка.Период                    = Реквизиты.КонДата;
		Проводка.Организация               = Реквизиты.Организация;
		
		СвойстваСчетаДт                    =
			БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ОписаниеРасходов.СчетДт);
		Проводка.СчетДт                    = ОписаниеРасходов.СчетДт;
		Если СвойстваСчетаДт.УчетПоНаправлениямДеятельности Тогда
			Проводка.НаправлениеДеятельностиДт = ОписаниеРасходов.НаправлениеДеятельности;
		КонецЕсли;
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт           = ОписаниеРасходов.Подразделение;
		КонецЕсли;
		
		СвойстваСчетаКт                    =
			БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ОписаниеРасходов.СчетКт);
		Проводка.СчетКт                    = ОписаниеРасходов.СчетКт;
		Если СвойстваСчетаКт.УчетПоНаправлениямДеятельности Тогда
			Проводка.НаправлениеДеятельностиКт = ОписаниеРасходов.НаправлениеДеятельности;
		КонецЕсли;
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт           = ОписаниеРасходов.Подразделение;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
											"СтатьиЗатрат", ОписаниеРасходов.СтатьяРасходов);
		
		Если ЗначениеЗаполнено(ОписаниеРасходов.ВариантНалогообложенияПрибыли) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"ВариантыНалогообложенияПрибыли", ОписаниеРасходов.ВариантНалогообложенияПрибыли);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеРасходов.Содержание) Тогда
			Проводка.Содержание                    = ОписаниеРасходов.Содержание;
		Иначе
			Проводка.Содержание                    = Реквизиты.Содержание;
		КонецЕсли;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			ОписаниеРасходов.СуммаНУ, ОписаниеРасходов.СуммаНУ,
			ОписаниеРасходов.СуммаПР, ОписаниеРасходов.СуммаПР,
			ОписаниеРасходов.СуммаВР, ОписаниеРасходов.СуммаВР, 
			Проводка, ПоддержкаПБУ18); 
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// Возвращает контекст расчета регл. операции "Списание косвенных расходов"
//
// Параметры:
// 	СтруктураШапки - Структура - Структура шапки документа "Регламентная операция":
// 		* Предприниматель - Булево -
// 		* ГоловноеПодразделение - СправочникСсылка.Организации -
// 		* Заголовок - Строка -
// 		* ТипОперации - ПеречислениеСсылка.ТипыРегламентныхОпераций -
// 		* Номер - Число, Строка -
// 		* Дата - Дата -
// 		* Ссылка - ДокументСсылка.РегламентнаяОперация -
// 		* СписокОрганизаций - СписокЗначений Из СправочникСсылка.Организации -
// 		* Организация - СправочникСсылка.Организации -
// 		* НачГода - Дата -
// 		* КонГраница - Граница -
// 		* НачГраница - Граница -
// 		* КонДата - Дата -
// 		* НачДата - Дата -
// 	Отказ - Булево -
// Возвращаемое значение:
// 	Структура - контекст расчета операции:
// 		* Предприниматель - Булево -
// 		* ГоловноеПодразделение - СправочникСсылка.Организации -
// 		* Заголовок - Строка -
// 		* ТипОперации - ПеречислениеСсылка.ТипыРегламентныхОпераций -
// 		* Номер - Число, Строка -
// 		* Дата - Дата -
// 		* Ссылка - ДокументСсылка.РегламентнаяОперация -
// 		* СписокОрганизаций - СписокЗначений Из СправочникСсылка.Организации -
// 		* Организация - СправочникСсылка.Организации -
// 		* НачГода - Дата -
// 		* КонГраница - Граница -
// 		* НачГраница - Граница -
// 		* КонДата - Дата -
// 		* НачДата - Дата -
// 		* Содержание - Строка - содержание операции
// 		* СодержаниеКонецГода - Строка - содержание операции при закрытии счета НРМ
Функция КонтекстСписаниеКосвенныхРасходов(СтруктураШапки, Отказ) Экспорт
	
	КонтекстСКР = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураШапки);
	
	КонтекстСКР.Вставить("Содержание",          НСтр("ru = 'Списание нормируемых расходов по НУ';
													|en = 'Write-off of normalized expenses as per TA'"));
	КонтекстСКР.Вставить("СодержаниеКонецГода", НСтр("ru = 'Закрытие счета нормируемых расходов';
													|en = 'Closing normalized expenses account'"));
	
	Возврат КонтекстСКР;
	
КонецФункции // КонтекстСписаниеКосвенныхРасходов()

#КонецОбласти

#КонецОбласти
