
////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура получает Контекст ЭДО и возвращает его в Обработку оповещения, 
// переданную в параметрах к этой процедуре.
// 
//
// Параметры:
//	ВыполняемоеОповещение                  - ОписаниеОповещения - Описание оповещения, которое будет вызвано после получения Контекста ЭДО.
//                                                       В качестве результата описания оповещения передается структура с ключами: 
//                                                       * КонтекстЭДО    - Форма обработки, либо неопределено 
//                                                       * ТекстОшибки - Текст сообщения об ошибке, из-за которой не удалось получить контекст
//	ВызовИзМастераПодключенияК1СОтчетности - Булево - .
//
Процедура ПолучитьКонтекстЭДО(
		ВыполняемоеОповещение, 
		ОбновитьСейчас = Ложь,
		ЭтоОбновлениеИзМастера = Ложь) Экспорт
	
	ТекстСообщения = "";
	
	СтруктураПараметров = Новый Структура("КонтекстЭДО");
	Оповестить("Получение контекста ЭДО", СтруктураПараметров);
	
	Если СтруктураПараметров.КонтекстЭДО <> Неопределено И НЕ ОбновитьСейчас Тогда
		
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("ТекстОшибки", ТекстСообщения);
		СтруктураРезультата.Вставить("КонтекстЭДО", СтруктураПараметров.КонтекстЭДО);
		
		ПараметрыПриложения.Вставить("РегламентированнаяОтчетность.КонтекстЭДО", СтруктураПараметров.КонтекстЭДО);
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, СтруктураРезультата);
		
	Иначе
		ИнформацияОбОбработке = ДокументооборотСКОВызовСервера.ПодключатьВнешнююОбработкуЭДО();
		
		Если ИнформацияОбОбработке.Подключать Тогда
			Если ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Истина) Тогда
				ИндексОбработкиЭДОСтрокой = Формат(ИнформацияОбОбработке.ИндексОбработкиЭДО, "ЧДЦ=; ЧГ=");
				
				Попытка
					ФормаРезультат = ПолучитьФорму("ВнешняяОбработка.Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой
						+ ".Форма.КонтейнерКлиентскихМетодов");
					ФормаРезультат.ПутьКОбъекту = "ВнешняяОбработка.Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой;
				Исключение
					Состояние(НСтр("ru = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами.
						|Будет использован модуль, встроенный в конфигурацию.';
						|en = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами.
						|Будет использован модуль, встроенный в конфигурацию.'"));
					ФормаРезультат = ПолучитьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.КонтейнерКлиентскихМетодов");
					ФормаРезультат.ПутьКОбъекту = "Обработка.ДокументооборотСКонтролирующимиОрганами";
				КонецПопытки;
				
				// Проверка обновления
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
				ДополнительныеПараметры.Вставить("ФормаРезультат", 			ФормаРезультат);
				ДополнительныеПараметры.Вставить("ЭтоОбновлениеИзМастера", 	ЭтоОбновлениеИзМастера);
				
				ФормаРезультат.ОбновитьМодульДокументооборотаСФНСПриНеобходимости(ОбновитьСейчас, ДополнительныеПараметры);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.';
										|en = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.'");
				
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("ТекстОшибки", ТекстСообщения);
				СтруктураРезультата.Вставить("КонтекстЭДО", Неопределено);
				
				ПараметрыПриложения.Вставить("РегламентированнаяОтчетность.КонтекстЭДО", Неопределено);
				
				ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, СтруктураРезультата);
			КонецЕсли;
			
		Иначе
			Если ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Ложь) Тогда
				ФормаРезультат = ПолучитьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.КонтейнерКлиентскихМетодов");
				ФормаРезультат.ПутьКОбъекту = "Обработка.ДокументооборотСКонтролирующимиОрганами";
				
				// Проверка обновления
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
				ДополнительныеПараметры.Вставить("ФормаРезультат", 			ФормаРезультат);
				ДополнительныеПараметры.Вставить("ЭтоОбновлениеИзМастера", 	ЭтоОбновлениеИзМастера);
				
				ФормаРезультат.ОбновитьМодульДокументооборотаСФНСПриНеобходимости(ОбновитьСейчас, ДополнительныеПараметры);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.';
										|en = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.'");
				
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("ТекстОшибки", ТекстСообщения);
				СтруктураРезультата.Вставить("КонтекстЭДО", Неопределено);
				
				ПараметрыПриложения.Вставить("РегламентированнаяОтчетность.КонтекстЭДО", Неопределено);
				
				ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, СтруктураРезультата);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИПолучитьКонтекстЭДО(ВыполняемоеОповещение = Неопределено) Экспорт
	
	Попытка
		ИнформацияОбИнициализации =
			ДокументооборотСКОВызовСервера.ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами();
	Исключение
		ИнформацияОбИнициализации = Новый Структура("КонтекстИнициализирован, ИндексОбработкиЭДО", Ложь, 0);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами.
			|%1
			|Будет продолжено использование текущего модуля конфигурации.';
			|en = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами.
			|%1
			|Будет продолжено использование текущего модуля конфигурации.'"), ИнформацияОбОшибке().Описание);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
	КонецПопытки;
	
	Если ИнформацияОбИнициализации.КонтекстИнициализирован Тогда
		ИндексОбработкиЭДОСтрокой = Формат(ИнформацияОбИнициализации.ИндексОбработкиЭДО, "ЧДЦ=; ЧГ=");
		
		Попытка
			ФормаРезультат = ПолучитьФорму("ВнешняяОбработка.Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой
				+ ".Форма.КонтейнерКлиентскихМетодов");
			ФормаРезультат.ПутьКОбъекту = "ВнешняяОбработка.Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой;
		Исключение
			Состояние(НСтр("ru = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами.
				|Будет использован модуль, встроенный в конфигурацию.';
				|en = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами.
				|Будет использован модуль, встроенный в конфигурацию.'"));
			ФормаРезультат = ПолучитьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.КонтейнерКлиентскихМетодов");
			ФормаРезультат.ПутьКОбъекту = "Обработка.ДокументооборотСКонтролирующимиОрганами";
		КонецПопытки;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ТекстОшибки", "");
	СтруктураРезультата.Вставить("КонтекстЭДО", ФормаРезультат);
	
	ПараметрыПриложения.Вставить("РегламентированнаяОтчетность.КонтекстЭДО", ФормаРезультат);
	ОбновитьПутьВК();
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, СтруктураРезультата);
	КонецЕсли;
	
КонецПроцедуры

Функция КлючВК()
	Ключ = "РегламентированнаяОтчетность.ПутьВК";
	Возврат Ключ;
КонецФункции

Функция ПолучитьПутьВК(Принудительно = Ложь) Экспорт

	Ключ = КлючВК();

	ПутьВК = ПараметрыПриложения.Получить(Ключ);
	Если Принудительно ИЛИ ПутьВК = Неопределено Тогда
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
	КонецЕсли;

	Возврат ПутьВК;

КонецФункции

Процедура ОбновитьПутьВК(ПослеЗапускаСистемы = Ложь) Экспорт

	Ключ = КлючВК();

	Если ПослеЗапускаСистемы Тогда
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
		ПутьВК = ПараметрыРаботыКлиента.ДокументооборотСКонтролирующимиОрганами_ПутьВК;
	Иначе
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
	КонецЕсли;
	
	ПараметрыПриложения.Вставить(Ключ, ПутьВК);

КонецПроцедуры

Процедура ОтправитьОтчеты(ВыполняемоеОповещение, Ссылки) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("Ссылки", Ссылки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтчеты_ПослеПолучениеКонтекста", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ПолучитьКонтекстЭДО(ОписаниеОповещения);	
	
КонецПроцедуры

Процедура ОтправитьОтчеты_ПослеПолучениеКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		ПоказатьПредупреждение(, "Недостаточно прав для использования модуля документооборота!");
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Ссылки", ВходящийКонтекст.Ссылки);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ГрупповаяОтправка", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ВходящийКонтекст.ВыполняемоеОповещение);
	
КонецПроцедуры
	
Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
		Форма, 
		КонтролирующийОрган, 
		ЭтоОтправкаИзФормыОтчетность = Ложь, 
		СсылкаНаОтчет = Неопределено, 
		ОрганизацияОтчета = Неопределено) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть процедура ОтправитьРегламентированныйОтчет(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Если НЕ ЭтоОтправкаИзФормыОтчетность Тогда
		СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	ЭтоУведомлениеФНС 			= ЭтоУведомлениеФНС(СсылкаНаОтчет);
	ЭтоЖурналСчетовФактурФНС 	= ЭтоЖурналСчетовФактурФНС(СсылкаНаОтчет);
	ЭтоЗаявлениеОВвозе 			= ЭтоЗаявлениеОВвозе(СсылкаНаОтчет);
	ЭтоРеестрНДС				= ЭтоРеестрНДС(СсылкаНаОтчет);
	ЭтоРеестрАкцизы 			= ЭтоРеестрАкцизы(СсылкаНаОтчет);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаНаОтчет",					СсылкаНаОтчет);
	ДополнительныеПараметры.Вставить("Форма",							Форма);
	ДополнительныеПараметры.Вставить("КонтролирующийОрган",				КонтролирующийОрган);
	ДополнительныеПараметры.Вставить("ЭтоОтправкаИзФормыОтчетность",	ЭтоОтправкаИзФормыОтчетность);
	ДополнительныеПараметры.Вставить("СсылкаНаОтчет",					СсылкаНаОтчет);
	ДополнительныеПараметры.Вставить("ОрганизацияОтчета",				ОрганизацияОтчета);
	ДополнительныеПараметры.Вставить("ЭтоУведомлениеФНС",				ЭтоУведомлениеФНС);
	ДополнительныеПараметры.Вставить("ЭтоЖурналСчетовФактурФНС",		ЭтоЖурналСчетовФактурФНС);
	ДополнительныеПараметры.Вставить("ЭтоРеестрНДС",					ЭтоРеестрНДС);
	ДополнительныеПараметры.Вставить("ЭтоРеестрАкцизы",					ЭтоРеестрАкцизы);
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
	
	Если ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет")
		ИЛИ ТипЗнчСсылкаНаОтчет = Тип("Неопределено") Тогда
		
		Если НЕ ЭтоОтправкаИзФормыОтчетность Тогда
			
			// Сохраняем перед отправкой
			Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуПослеСохраненияРегОтчета", ЭтотОбъект, ДополнительныеПараметры);
				Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ЭтоУведомлениеФНС Тогда
		
		Если ЭтоОтправкаИзФормыОтчетность Тогда
			// Уведомление будет записано
		ИначеЕсли Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
			
			ИмяДокументаУведомлениеОКонтролируемыхСделках
				= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("УведомлениеОКонтролируемыхСделках");
			
			// Записываем
			Если ИмяДокументаУведомлениеОКонтролируемыхСделках <> Неопределено
				И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаУведомлениеОКонтролируемыхСделках) Тогда
				
				Форма.Записать();
				
			Иначе
				Форма.СохранитьДанные();
			КонецЕсли;
			
			// Получаем ссылку еще раз после записи
			СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
			// Обновляем данные после сохранения.
			ДополнительныеПараметры.СсылкаНаОтчет = СсылкаНаОтчет;
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ЭтоЖурналСчетовФактурФНС Тогда
		
		Если ЭтоОтправкаИзФормыОтчетность Тогда
			// Уведомление будет записано
		ИначеЕсли Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
			
			// Записываем
			Форма.Записать();
			
			// Получаем ссылку еще раз после записи
			СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
			// Обновляем данные после сохранения.
			ДополнительныеПараметры.СсылкаНаОтчет = СсылкаНаОтчет;
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
			Возврат;
		КонецЕсли;
				
	ИначеЕсли ЭтоЗаявлениеОВвозе Тогда
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
			ПоказатьПредупреждение(,"Перед отправкой необходимо записать заявление.");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЭтоОтправкаИзФормыОтчетность И Форма.Модифицированность Тогда
			ПоказатьПредупреждение(, "Перед отправкой необходимо записать заявление.");
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
			ПоказатьПредупреждение(,"Перед отправкой необходимо записать отчет.");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	ПроверитьЧтоЭДОПодключенИПродолжитьОтправку(ДополнительныеПараметры);

КонецПроцедуры

Процедура ПродолжитьОтправкуПослеСохраненияРегОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.СсылкаНаОтчет = Неопределено Тогда
		
		СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(ДополнительныеПараметры.Форма);
		
		// Обновляем данные после сохранения.
		ДополнительныеПараметры.СсылкаНаОтчет 		= СсылкаНаОтчет;
		ДополнительныеПараметры.ЭтоРеестрНДС 		= ЭтоРеестрНДС(СсылкаНаОтчет);
		ДополнительныеПараметры.ЭтоРеестрАкцизы 	= ЭтоРеестрАкцизы(СсылкаНаОтчет);
		
	КонецЕсли;
	
	ПроверитьЧтоЭДОПодключенИПродолжитьОтправку(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверитьЧтоЭДОПодключенИПродолжитьОтправку(ДополнительныеПараметры)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьЧтоЭДОПодключенПослеПолученияКонтекста", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПроверитьЧтоЭДОПодключенПослеПолученияКонтекста_ПослеПроверкиЗаявления(Результат, ВходящийКонтекст) Экспорт
	
	ПроверитьЧтоЭДОПодключенПослеДобавленияКонтекстаВПараметры(ВходящийКонтекст);
	
КонецПроцедуры

Процедура ПроверитьЧтоЭДОПодключенПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		ПоказатьПредупреждение(, "Недостаточно прав для использования модуля документооборота!");
		Возврат;
	Иначе
		КонтекстЭДОКлиент = Результат.КонтекстЭДО;
		ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
		ПроверитьЧтоЭДОПодключенПослеДобавленияКонтекстаВПараметры(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПроверитьЧтоЭДОПодключенПослеДобавленияКонтекстаВПараметры(ДополнительныеПараметры) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть аналогичная процедура ПроверитьЧтоЭДОПодключен(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Форма				 			= ДополнительныеПараметры.Форма;
	КонтролирующийОрган 			= ДополнительныеПараметры.КонтролирующийОрган;
	ОрганизацияОтчета				= ДополнительныеПараметры.ОрганизацияОтчета;
	ЭтоОтправкаИзФормыОтчетность	= ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	СсылкаНаОтчет					= ДополнительныеПараметры.СсылкаНаОтчет;
	
	Если НЕ ЭтоОтправкаИзФормыОтчетность Тогда
		ОрганизацияОтчета = ДокументооборотСКОКлиентСервер.ПолучитьОрганизациюПоФорме(Форма);
		ДополнительныеПараметры.ОрганизацияОтчета = ОрганизацияОтчета;
	КонецЕсли;
	
	ОтправкаОбъектаЗапрещена = ДокументооборотСКОВызовСервера.ОтправкаОбъектаЗапрещенаНаТарифеПромоЕНС(СсылкаНаОтчет);
	Если ОтправкаОбъектаЗапрещена Тогда
		ДокументооборотСКОКлиент.СообщитьОНевозможностиОтправкиНаТарифе(СсылкаНаОтчет);
		Возврат;
	КонецЕсли;
	
	НастроенОбменВУниверсальномФормате = Ложь;
	УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = Ложь;
	
	ДокументооборотСКОВызовСервера.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
		ОрганизацияОтчета, 
		КонтролирующийОрган, 
		НастроенОбменВУниверсальномФормате, 
		УчетнаяЗаписьПредназначенаДляДокументооборотаСКО);
	
	Если НЕ НастроенОбменВУниверсальномФормате Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверитьЧтоЭДОПодключенПослеПолученияКонтекста_ПослеПроверкиЗаявления", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
			
		ПроверитьСтатусПодключенияПередОтправкой(СсылкаНаОтчет, ОписаниеОповещения); // +

		Возврат;
		
	Иначе
		
		Если УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = Неопределено Тогда
			
			ПоказатьПредупреждение(, "Недостаточно прав для использования модуля документооборота!");
			Возврат;
			
		ИначеЕсли УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = Ложь
			ИЛИ ДокументооборотСКОКлиентСервер.ЭтоФНС(КонтролирующийОрган)
			И НЕ ДокументооборотСКОВызовСервера.ОрганизацияПодключенаКИнспекции(СсылкаНаОтчет)
			ИЛИ НЕ МультирежимВызовСервера.ЕстьПравоНаОтправкуОбъекта(СсылкаНаОтчет) Тогда
			
			СообщитьОНеподключенномНаправлении(СсылкаНаОтчет);//+
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьЧтоЭДОПодключенПослеДобавленияКонтекстаВПараметры_ПослеНастройкиЗаявления", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ЗавершитьНастройкуЗаявленияНаИзменение(ДополнительныеПараметры.СсылкаНаОтчет, ОписаниеОповещения);
	
КонецПроцедуры
	
Процедура ПроверитьЧтоЭДОПодключенПослеДобавленияКонтекстаВПараметры_ПослеНастройкиЗаявления(Результат, ДополнительныеПараметры) Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправкаВКонтролирующийОрганПослеПодтвержденияОтправки", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
		КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
			
	КонтекстЭДОКлиент.ПодтверждениеОтправкиОтчета(
		ДополнительныеПараметры.Форма, 
			ОписаниеОповещения, 
		ДополнительныеПараметры.СсылкаНаОтчет);
	
КонецПроцедуры

Функция ОрганизацияПодключенаКНаправлению(ОрганизацияОтчета, КонтролирующийОрган) Экспорт
	
	// Выписка из ЕГРЮЛ.
	Если НЕ ЗначениеЗаполнено(КонтролирующийОрган) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		ВидОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов." + КонтролирующийОрган);
	Исключение
		ВидОргана = Неопределено;
	КонецПопытки;
	
	ПодключенЭДО = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПодключенДокументооборотСКонтролирующимОрганом(
		ОрганизацияОтчета, 
		ВидОргана);
	
	Если НЕ ПодключенЭДО Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для организации не включена возможность отправки в %1!';
									|en = 'Для организации не включена возможность отправки в %1!'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, КонтролирующийОрган);
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
			
		Возврат Ложь;
			
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОповеститьОЗавершенииОтправкиИПерерисоватьПанельОтправки(РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	ЭтоОтправкаИзФормыОтчетность 	= ДополнительныеПараметры.ЭтоОтправкаИзФормыОтчетность;
	Форма 							= ДополнительныеПараметры.Форма;
	КонтролирующийОрган 			= ДополнительныеПараметры.КонтролирующийОрган;
	СсылкаНаОтчет 					= ДополнительныеПараметры.СсылкаНаОтчет;
	ОрганизацияОтчета 				= ДополнительныеПараметры.ОрганизацияОтчета;
	
	Если НЕ ЭтоОтправкаИзФормыОтчетность Тогда
		Если РезультатОтправки Тогда
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоГрупповаяОтправка = ДлительнаяОтправкаКлиентСервер.ЭтоФормаГрупповойОтправкиПоФорме(Форма);
	Если НЕ ЭтоГрупповаяОтправка Тогда

	ПараметрыОповещения = Новый Структура(); 
	ПараметрыОповещения.Вставить("Ссылка", 		СсылкаНаОтчет);
	ПараметрыОповещения.Вставить("Организация", ОрганизацияОтчета);
	Оповестить("Завершение отправки в контролирующий орган", ПараметрыОповещения, );
	
	КонецЕсли;

КонецПроцедуры

Процедура ОтправкаВКонтролирующийОрганПослеПодтвержденияОтправки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Форма 						= ВходящийКонтекст.Форма;
	ОрганизацияОтчета			= ВходящийКонтекст.ОрганизацияОтчета;
	ЭтоУведомлениеФНС			= ВходящийКонтекст.ЭтоУведомлениеФНС;
	ЭтоЖурналСчетовФактурФНС	= ВходящийКонтекст.ЭтоЖурналСчетовФактурФНС;
	ЭтоРеестрНДС				= ВходящийКонтекст.ЭтоРеестрНДС;
	ЭтоРеестрАкцизы				= ВходящийКонтекст.ЭтоРеестрАкцизы;
	КонтекстЭДОКлиент			= ВходящийКонтекст.КонтекстЭДОКлиент;
	КонтролирующийОрган			= ВходящийКонтекст.КонтролирующийОрган;
	СсылкаНаОтчет 				= ВходящийКонтекст.СсылкаНаОтчет;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОповеститьОЗавершенииОтправкиИПерерисоватьПанельОтправки", 
		ЭтотОбъект, 
		ВходящийКонтекст);
	
	Если ЭтоУведомлениеФНС Тогда
		
		КонтекстЭДОКлиент.ОтправкаУведомлениеФНС(
			СсылкаНаОтчет,
			ОрганизацияОтчета,
			Форма.УникальныйИдентификатор, 
			ОписаниеОповещения);
		
	ИначеЕсли ЭтоЖурналСчетовФактурФНС Тогда
		
		КонтекстЭДОКлиент.ОтправкаЖурналаСчетовФактурВФНС(
			СсылкаНаОтчет, 
			ОрганизацияОтчета, 
			Форма.УникальныйИдентификатор, 
			ОписаниеОповещения);
			
	ИначеЕсли ЭтоРеестрНДС ИЛИ ЭтоРеестрАкцизы Тогда
		
		КонтекстЭДОКлиент.ОтправкаРеестраНДС(
			ОписаниеОповещения);
		
	Иначе
		
		// регистрируем заявку на отправку
		Если КонтролирующийОрган = "ФНС" Тогда
			КонтекстЭДОКлиент.ОтправкаРегламентированногоОтчетаВФНС(СсылкаНаОтчет, ОписаниеОповещения);
		ИначеЕсли КонтролирующийОрган = "ФСГС" Тогда
			КонтекстЭДОКлиент.ОтправкаРегламентированногоОтчетаВФСГС(СсылкаНаОтчет, ОписаниеОповещения);
		ИначеЕсли КонтролирующийОрган = "ЦБ" Тогда
			КонтекстЭДОКлиент.ОтправкаРегламентированногоОтчетаВЦБ(СсылкаНаОтчет, ОписаниеОповещения);
		Иначе
			КонтекстЭДОКлиент.ОтправкаРегламентированногоОтчетаВПФР(СсылкаНаОтчет, ОписаниеОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВИнтернете(Форма, КонтролирующийОрган = "ФНС", АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
	ИмяДокументаУведомлениеОКонтролируемыхСделках 					= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("УведомлениеОКонтролируемыхСделках");
	ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде");
	ИмяДокументаИсходящееУведомлениеФНС					 			= "УведомлениеОСпецрежимахНалогообложения";
	
	ИмяДокументаЗаявлениеОВвозеТоваров 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("ЗаявлениеОВвозеТоваров");
	
	Если ИмяДокументаЗаявлениеОВвозеТоваров <> Неопределено И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаЗаявлениеОВвозеТоваров) Тогда
		ЭтоЗаявлениеОВвозе = Истина;
	Иначе
		ЭтоЗаявлениеОВвозе = Ложь;
	КонецЕсли;
	
	Если (ИмяДокументаУведомлениеОКонтролируемыхСделках <> Неопределено И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаУведомлениеОКонтролируемыхСделках))
		ИЛИ (ИмяДокументаИсходящееУведомлениеФНС <> Неопределено И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаИсходящееУведомлениеФНС)) Тогда
		ЭтоУведомлениеФНС = Истина;
	Иначе
		ЭтоУведомлениеФНС = Ложь;
	КонецЕсли;
	
	Если ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде <> Неопределено И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде) Тогда
		ЭтоЖурналСчетовФактурФНС = Истина;
	Иначе
		ЭтоЖурналСчетовФактурФНС = Ложь;
	КонецЕсли;
	
	Если ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет")
		ИЛИ ТипЗнчСсылкаНаОтчет = Тип("Неопределено") Тогда
		
		// отправляем только из записанной формы
		Если Форма.Модифицированность Тогда
			
			ДополнительныеПараметры = Новый Структура("Форма, КонтролирующийОрган", Форма, КонтролирующийОрган);
			ДополнительныеПараметры.Вставить("АдресГотовыхДанных", АдресГотовыхДанных);
			ДополнительныеПараметры.Вставить("ИмяФайлаГотовыхДанных", ИмяФайлаГотовыхДанных);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			Форма.СохранитьНаКлиенте(, ОписаниеОповещения);
			
		Иначе
			ПроверитьВИнтернетеПослеСохранения(Форма, КонтролирующийОрган, СсылкаНаОтчет, АдресГотовыхДанных, ИмяФайлаГотовыхДанных)
		КонецЕсли;
		
	ИначеЕсли ЭтоУведомлениеФНС Тогда
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) ИЛИ Форма.Модифицированность Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Перед проверкой необходимо записать уведомление.';
										|en = 'Перед проверкой необходимо записать уведомление.'"));
			Возврат;
		КонецЕсли;
		
		ПроверитьВИнтернетеПослеСохранения(Форма, КонтролирующийОрган, СсылкаНаОтчет)
		
	ИначеЕсли ЭтоЖурналСчетовФактурФНС Тогда
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) ИЛИ Форма.Модифицированность Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Перед проверкой необходимо записать журнал.';
										|en = 'Перед проверкой необходимо записать журнал.'"));
			Возврат;
		КонецЕсли;
		
		ПроверитьВИнтернетеПослеСохранения(Форма, КонтролирующийОрган, СсылкаНаОтчет)
		
	ИначеЕсли ЭтоЗаявлениеОВвозе Тогда
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) ИЛИ Форма.Модифицированность Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Перед проверкой необходимо записать заявление.';
										|en = 'Перед проверкой необходимо записать заявление.'"));
			Возврат;
		КонецЕсли;
		
		ПроверитьВИнтернетеПослеСохранения(Форма, КонтролирующийОрган, СсылкаНаОтчет)
		
	Иначе // все, кроме документа РегламентированныйОтчет
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Перед проверкой необходимо записать отчет.';
										|en = 'Перед проверкой необходимо записать отчет.'"));
			Возврат;
		КонецЕсли;
		
		ПроверитьВИнтернетеПослеСохранения(Форма, КонтролирующийОрган, СсылкаНаОтчет)
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	
	АдресГотовыхДанных = Неопределено;
	ИмяФайлаГотовыхДанных = Неопределено;
	Если ДополнительныеПараметры.Свойство("АдресГотовыхДанных") Тогда 
		АдресГотовыхДанных = ДополнительныеПараметры.АдресГотовыхДанных;
		ИмяФайлаГотовыхДанных = ДополнительныеПараметры.ИмяФайлаГотовыхДанных;
	КонецЕсли;
			
	ПроверитьВИнтернетеПослеСохранения(Форма, КонтролирующийОрган, СсылкаНаОтчет, АдресГотовыхДанных, ИмяФайлаГотовыхДанных)
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеПослеСохранения(Форма, КонтролирующийОрган, СсылкаНаОтчет, АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено)
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", 					Форма);
	ДополнительныеПараметры.Вставить("КонтролирующийОрган", 	КонтролирующийОрган);
	ДополнительныеПараметры.Вставить("СсылкаНаОтчет", 			СсылкаНаОтчет);
	
	ДополнительныеПараметры.Вставить("АдресГотовыхДанных", 		АдресГотовыхДанных);
	ДополнительныеПараметры.Вставить("ИмяФайлаГотовыхДанных", 	ИмяФайлаГотовыхДанных);
	
	ДополнительныеПараметры.Вставить("СледуетОбновлятьПанельОтправки", 	Истина);
	ДополнительныеПараметры.Вставить("Форма", 							Форма);
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеПослеПолученияКонтекста", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда

		ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.';
									|en = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.'");

		Если ДлительнаяОтправкаКлиентСервер.ЭтоФормаГрупповойОтправки() Тогда
			ДлительнаяОтправкаКлиент.ОповеститьОНеудачномДействии(ТекстПредупреждения);
		Иначе
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;

	Иначе
		КонтекстЭДОКлиент.ПроверитьОтчетСИспользованиемСервисаОнлайнПроверки(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган = "ФНС", АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	ТипЗнчСсылка = ТипЗнч(Ссылка);
	ИмяДокументаУведомлениеОКонтролируемыхСделках 					= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("УведомлениеОКонтролируемыхСделках");
	ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде");
	ИмяДокументаИсходящееУведомлениеФНС 							= "УведомлениеОСпецрежимахНалогообложения";
	
	Если (ИмяДокументаУведомлениеОКонтролируемыхСделках <> Неопределено И ТипЗнчСсылка = Тип("ДокументСсылка." + ИмяДокументаУведомлениеОКонтролируемыхСделках))
	ИЛИ (ИмяДокументаИсходящееУведомлениеФНС <> Неопределено И ТипЗнчСсылка = Тип("ДокументСсылка." + ИмяДокументаИсходящееУведомлениеФНС)) Тогда
		ЭтоУведомлениеФНС = Истина;
	Иначе
		ЭтоУведомлениеФНС = Ложь;
	КонецЕсли;
	
	Если ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде <> Неопределено И ТипЗнчСсылка = Тип("ДокументСсылка." + ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде) Тогда
		ЭтоЖурналСчетовФактурФНС = Истина;
	Иначе
		ЭтоЖурналСчетовФактурФНС = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Ссылка, КонтролирующийОрган", Ссылка, КонтролирующийОрган);
	
	ДополнительныеПараметры.Вставить("АдресГотовыхДанных", 		АдресГотовыхДанных);
	ДополнительныеПараметры.Вставить("ИмяФайлаГотовыхДанных", 	ИмяФайлаГотовыхДанных);
	
	ДополнительныеПараметры.Вставить("СледуетОбновлятьПанельОтправки", 	Ложь);
	ДополнительныеПараметры.Вставить("Форма", 							Неопределено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеПослеПолученияКонтекста", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПослеЗапускаСистемы() Экспорт
	
	ПараметрыРаботыКлиентаПриЗапуске = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	Если НЕ ПараметрыРаботыКлиентаПриЗапуске.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользователиКлиент.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьБыстрыйСтарт = ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ПоказатьБыстрыйСтартО1СО;

	ЗапуститьИнтро = Ложь;
	КалендарьОтчетностиБРОКлиентПереопределяемый.ПолучитьЗначениеЗапускаИнтро(ЗапуститьИнтро, ПараметрыРаботыКлиентаПриЗапуске);
	
	Если ЗапуститьИнтро Тогда
		
		КалендарьОтчетностиБРОКлиентПереопределяемый.ВыполнитьЗапускИнтро();
		
	ИначеЕсли ЗапуститьБыстрыйСтарт Тогда
		
		// Отключаем новости
		ОтключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями_ПервыйЗапуск");
		
		ДокументооборотСКОВызовСервера.УбратьПанельРазделов();
		ОбновитьИнтерфейс();
		ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.БыстрыйСтарт");
		
	Иначе
		
		// если не открылся рабочий стол БизКуба, открываем его принудительно
		ОбновитьИнтерфейс = ДокументооборотСКОВызовСервера.УстановитьНастройкиНачалаРаботы(Ложь);
		Если ОбновитьИнтерфейс Тогда
			ОбновитьИнтерфейс();
		КонецЕсли;
	
		ТекущемуПользователюЭДОДоступен = ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюЭДОДоступен;
		ВыбранныйCSPИзВременныхНастроек = ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ВыбранныйCSPИзВременныхНастроек;
		ЕстьПравоНаДО = ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ЕстьПравоНаДОсКОПриЗапуске;
		
		Если ТекущемуПользователюЭДОДоступен Тогда
			ОбновитьПутьВК(Истина);
			ПодключитьОбработчикОжидания("ОбработатьИзменившиесяКодыФСГС", 15, Истина);
			ПодключитьОбработчикОжидания("ПолучитьИнформациюОВходящихСообщенияхДляПользователяЭДО", 60, Истина);
		КонецЕсли;
		
		Если ЕстьПравоНаДО Тогда
			ПодключениеОбработчикаОжиданияАвтообмена(Истина);
			ОткрытьМастерПодключенияК1СОтчетности(ВыбранныйCSPИзВременныхНастроек);
		КонецЕсли;
		
		Если ТекущемуПользователюЭДОДоступен Тогда
			
			ПодключениеОбработчикаОжиданияИнформацияПоТребованиям(Истина, 4* 60);
			ПодключитьОбработчикОжидания("ПредупредитьОПроблемах1СОтчетности", 300, Истина);
			ПодключитьОбработчикОжидания("ПредупредитьОЗаявленияхЭДОПФР", 10*60, Истина);
			
			ЕстьДоступСПАРК = ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ЕстьДоступКРегиструСПАРК;
			Если ЕстьДоступСПАРК Тогда
				МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
				МодульОтправкаРегОтчетовВСПАРККлиент.ПодключитьОбработчикСПАРК();
			КонецЕсли;

		КонецЕсли;
		
		Если ЕстьПравоНаДО Тогда
			ПодключитьОбработчикОжидания("ПоказатьПриглашенияПользователям", 7, Истина);
			
			Если ЗначениеЗаполнено(ПараметрыРаботыКлиентаПриЗапуске.ДоступныеЛокальныеСертификатыПользователя)
				И НЕ ПараметрыРаботыКлиентаПриЗапуске.НеПоказыватьПредупреждениеОКонфликтеКриптопровайдеров Тогда
				ПодключитьОбработчикОжидания("ПредупредитьОКонфликтеКриптопровайдеров", 30, Истина);
			КонецЕсли;

			Если ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ЕстьОтправленныеЗаявленияАбонентов Тогда 
				ОбработкаЗаявленийАбонентаКлиент.ПодключитьОбработчикПроверкиЗаявлений(3*60);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредупредитьОбАстралМЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.ПредупредитьОбАстралМКлиент();
	
КонецПроцедуры

Процедура ПредупредитьОЗаявленияхЭДОПФРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.ПредупредитьОЗаявленияхЭДОПФРКлиент();

КонецПроцедуры

Процедура ПодключениеОбработчикаОжиданияАвтообмена(Подключать = Истина) Экспорт
	
	Если Подключать Тогда
		
		ПараметрыРаботыКлиентаПриЗапуске 	= СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
		ТекущемуПользователюАОДоступен 		= ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюАОДоступен;
	
		// проверяем, является ли текущий пользователь пользователем ДО
		// проверяем отключение автообмена на уровне учетной записи документооборота
		// Может равняться Неопределено.
		Если ТекущемуПользователюАОДоступен = Истина Тогда
			
			// если проверки пройдены, определяем интервал выполнения
			Интервал = 30 * 60; // 30 мин.
			ПодключитьОбработчикОжидания("ПолучитьИнформациюОВходящихСообщениях", Интервал);
			
		КонецЕсли;
		
	Иначе
		ОтключитьОбработчикОжидания("ПолучитьИнформациюОВходящихСообщениях");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьМастерПодключенияК1СОтчетности(СохраненныеНастройки)
	
	// Если пользователь в мастере подключения остановился на шаге установки криптопровайдеров (шаг 2)
	// и после установки криптопровайдера перезагрузил компьютер, то необходимо открыть мастер для продолжения
	// подключения к 1С-Отчетности
	Если СохраненныеНастройки <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура("СохраненныеНастройки", СохраненныеНастройки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьМастерПодключенияК1СОтчетностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьМастерПодключенияК1СОтчетностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	СохраненныеНастройки = ДополнительныеПараметры.СохраненныеНастройки;
	
	Если КонтекстЭДОКлиент <> Неопределено Тогда
		
		Если ТипЗнч(СохраненныеНастройки) = Тип("СправочникСсылка.Организации") Тогда
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(СохраненныеНастройки);
		Иначе
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИнформациюОВходящихСообщенияхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.ПолучитьИОбработатьВходящиеКлиент();
	
КонецПроцедуры

Процедура ПолучитьИнформациюОВходящихСообщенияхДляПользователяЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.ПолучитьИОбработатьВходящиеКлиент();
	
КонецПроцедуры

Процедура ПредупредитьОПроблемах1СОтчетностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.ПредупредитьОПроблемах1СОтчетностиКлиент();
	
КонецПроцедуры

Процедура ПредупредитьОНекорректныхСтатусахОтправки2НДФЛПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПредупредитьОбОшибкеВСтатусахОтправки2НДФЛ();
	
КонецПроцедуры

Процедура СоздатьЭлектронноеПредставлениеРегламентированныхОтчетовИзФайлов(Файлы, Адрес) Экспорт
	
	МассивФайлов = Новый Массив;
	Если ТипЗнч(Файлы) = Тип("Файл") Тогда
		МассивФайлов.Добавить(Файлы.ПолноеИмя);
	ИначеЕсли ТипЗнч(Файлы) = Тип("Массив") Тогда
		Для Каждого Значение Из Файлы Цикл
			Если ТипЗнч(Значение) = Тип("Файл") Тогда
				МассивФайлов.Добавить(Значение.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлыИмпорта = СтрСоединить(МассивФайлов, Символы.ПС);
				              
		ДополнительныеПараметры = Новый Структура("Адрес, ФайлыИмпорта", Адрес, ФайлыИмпорта);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЭлектронноеПредставлениеРегламентированныхОтчетовИзФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПолучитьКонтекстЭДО(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлектронноеПредставлениеРегламентированныхОтчетовИзФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	КонтекстЭДОКлиент.ПолучениеФайловДляИмпортаНачало(ДополнительныеПараметры.Адрес, ДополнительныеПараметры.ФайлыИмпорта);
		
КонецПроцедуры

#Область ПроверкаСтатусаЗаявленияПередОтправкой

// Проверяет, было ли отправлено и одобрено заявление на подключение к 1С-Отчетности.
// Если было, то предлагает завершить настройку 1С-Отчетности и повторяет отправку объекта,
// если указан параметр ВыполняемоеОповещение.
// Если заявления отправлено не было, то показывает предложение подключиться к 1С-Отчетности.
//
// Параметры:
//  СсылкаНаОбъект			 - ДокументСсылка, СправочникСсылка - Отправляемый объект
//  ВыполняемоеОповещение	 - ОписаниеОповещения, Неопределено - Описание действия, которое должно быть повторено после
//		успешной настройки заявления по 1С-Отчетности. Неопределено - если отправку повторять не нужно. 

Процедура ПроверитьСтатусПодключенияПередОтправкой(СсылкаНаОбъект, ВыполняемоеОповещение = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("СсылкаНаОбъект", 			СсылкаНаОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСтатусПодключенияПередОтправкойПослеПолученияКонтекста", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПроверитьСтатусПодключенияПередОтправкойПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		ПоказатьПредупреждение(, "Недостаточно прав для использования модуля документооборота!");
	Иначе
		КонтекстЭДОКлиент = Результат.КонтекстЭДО;
		КонтекстЭДОКлиент.ПроверитьСтатусПодключенияПередОтправкой(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, было ли отправлено и одобрено заявление на изменение подключения к 1С-Отчетности.
// Если было, то предлагает завершить его настройку и затем продолжает отправку.
//
// Параметры:
//  СсылкаНаОбъект			 - ДокументСсылка, СправочникСсылка - Отправляемый объект 
//  ВыполняемоеОповещение	 - ОписаниеОповещения, Неопределено - Описание действия, которое должно быть выполнено
//		после настройки заявления на изменение 1С-Отчетности.
//
Процедура ЗавершитьНастройкуЗаявленияНаИзменение(СсылкаНаОбъект, ВыполняемоеОповещение) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("СсылкаНаОбъект", 			СсылкаНаОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьНастройкуЗаявленияНаИзменениеПоСсылке_ПослеПолученияКонтекста", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ЗавершитьНастройкуЗаявленияНаИзменениеПоСсылке_ПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		ПоказатьПредупреждение(, "Недостаточно прав для использования модуля документооборота!");
	Иначе
		
		КонтекстЭДОКлиент = Результат.КонтекстЭДО;
		
		КонтекстЭДОКлиент.ЗавершитьНастройкуЗаявленияНаИзменение(
			ДополнительныеПараметры.СсылкаНаОбъект,
			ДополнительныеПараметры.ВыполняемоеОповещение);
			
	КонецЕсли;
	
КонецПроцедуры

// Показывает предупреждение о том, что направление сдачи отчетности не подключено и предлагает
// отправить заявление для подключения этого направления. 
// Если заявление было отправлено, то предлагает завершить настройку заявления, если оно одобрено
// или сообщает о том, что оно еще не одобрено.
// По завершению работы вызывается процедура, указанная в параметре ВыполняемоеОповещение 
// с результатом, указанным в параметре РезультатОтправки.
//
// Параметры:
//  СсылкаНаОбъект			 - ДокументСсылка, СправочникСсылка - Отправляемый объект
//  ВыполняемоеОповещение	 - ОписаниеОповещения, Неопределено - Действие, которое должно быть выполенено в случае неуспешной отправки.
//  РезультатОтправки		 - Произвольный - Результат, который должен быть возвращен в случае неуспешной отправки отчета.
//
Процедура СообщитьОНеподключенномНаправлении(СсылкаНаОбъект, ВыполняемоеОповещение = Неопределено, РезультатОтправки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СсылкаНаОбъект",	 		СсылкаНаОбъект);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("РезультатОтправки", 		РезультатОтправки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СообщитьОНеподключенномНаправленииПослеПолученияКонтекста", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры
	
Процедура СообщитьОНеподключенномНаправленииПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		ПоказатьПредупреждение(, "Недостаточно прав для использования модуля документооборота!");
	Иначе
		КонтекстЭДОКлиент = Результат.КонтекстЭДО;
		КонтекстЭДОКлиент.СообщитьОНеподключенномНаправлении(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ПояснениеПоНДС

&НаКлиенте
Функция ДобавитьКод(СписокКодов, Код, Наименование, Условие)
	
	Если Условие Тогда
		СписокКодов.Добавить(Код, Наименование);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция КодыВидовОперацийПолученныхСчетовФактур(ЭтоЖурнал = Ложь) Экспорт
	
	Наступило = ДокументооборотСКОВызовСервера.СобытиеНаступилоНовыйФорматПояснДеклНДС();
	
	ДляВсех = Истина;
	
	СписокКодов = Новый СписокЗначений();
	
	ДобавитьКод(СписокКодов, "01", "01 - Полученные товары, работы, услуги", ДляВсех);
	ДобавитьКод(СписокКодов, "02", "02 - Авансы выданные", ДляВсех);
	ДобавитьКод(СписокКодов, "06", "06 - Налоговый агент, ст. 161 НК", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости", ДляВсех);
	ДобавитьКод(СписокКодов, "15", "15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента", ДляВсех);
	ДобавитьКод(СписокКодов, "16", "16 - Возврат от покупателя-неплательщика НДС", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "17", "17 - Возврат от покупателя-физического лица", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "18", "18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения", ДляВсех);
	ДобавитьКод(СписокКодов, "19", "19 - Ввоз товаров из Евразийского экономического союза", ДляВсех);
	ДобавитьКод(СписокКодов, "20", "20 - Ввоз импортных товаров на территорию РФ", ДляВсех);
	ДобавитьКод(СписокКодов, "22", "22 - Возврат, зачет авансовых платежей, п.5 статьи 171, п.6 статьи 172 НК", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 статьи 171 НК", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "24", "24 - Подтверждение ставки 0% после истечения 180 дней", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "25", "25 - Подтверждение ставки 0%", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "26", "26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "27", "27 - Сводный комиссионный счет-фактура, п.3.1 статьи 169 НК", ДляВсех);
	ДобавитьКод(СписокКодов, "28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК", ДляВсех);
	ДобавитьКод(СписокКодов, "29", "29 - Корректировка по п.6 ст. 105.3 НК", ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "30", "30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК", ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "32", "32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "33", НСтр("ru = '33 - Авансы полученные за товары п.8 ст. 161 НК';
										|en = '33 - Авансы полученные за товары п.8 ст. 161 НК'"), ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "34", НСтр("ru = '34 - Реализация товаров п.8 ст. 161 НК';
										|en = '34 - Реализация товаров п.8 ст. 161 НК'"), ДляВсех);
	ДобавитьКод(СписокКодов, "36", НСтр("ru = '36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК';
										|en = '36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК'"), НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "37", НСтр("ru = '37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК';
										|en = '37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК'"), ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "38", НСтр("ru = '38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК';
										|en = '38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК'"), ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "39", НСтр("ru = '39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК';
										|en = '39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК'"), ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "40", НСтр("ru = '40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК';
										|en = '40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК'"), ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "41", НСтр("ru = '41 - Авансы выданные за товары п.8 ст. 161 НК';
										|en = '41 - Авансы выданные за товары п.8 ст. 161 НК'"), НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "42", НСтр("ru = '42 - Получение товаров п.8 ст. 161 НК';
										|en = '42 - Получение товаров п.8 ст. 161 НК'"), НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "43", НСтр("ru = '43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК';
										|en = '43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК'"), НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "44", НСтр("ru = '44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения';
										|en = '44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения'"), НЕ ЭтоЖурнал);
	
	Если Наступило Тогда
		ДобавитьКод(СписокКодов, "45", НСтр("ru = '45 - Вычет НДС при приобретении у иностранной организации, п. 2.1 ст. 171 НК РФ';
											|en = '45 - Вычет НДС при приобретении у иностранной организации, п. 2.1 ст. 171 НК РФ'"), НЕ ЭтоЖурнал);
		ДобавитьКод(СписокКодов, "46", НСтр("ru = '46 - Вычет НДС при ввозе товаров с Евразийского экономического союза';
											|en = '46 - Вычет НДС при ввозе товаров с Евразийского экономического союза'"), НЕ ЭтоЖурнал);
		ДобавитьКод(СписокКодов, "48", НСтр("ru = '48 - Вычет НДС за уплаченные суммы НДС в бюджет Республики Беларусь, при реализации товаров физ. лицам';
											|en = '48 - Вычет НДС за уплаченные суммы НДС в бюджет Республики Беларусь, при реализации товаров физ. лицам'"), НЕ ЭтоЖурнал);
		ДобавитьКод(СписокКодов, "49", НСтр("ru = '49 - Вычет за уплаченные суммы НДС в бюджет Республики Казахстан, при реализации товаров физ. лицам';
											|en = '49 - Вычет за уплаченные суммы НДС в бюджет Республики Казахстан, при реализации товаров физ. лицам'"), НЕ ЭтоЖурнал);
		ДобавитьКод(СписокКодов, "50", НСтр("ru = '50 - Вычет за уплаченные суммы НДС в бюджет Республики Армения, при реализации товаров физ. лицам';
											|en = '50 - Вычет за уплаченные суммы НДС в бюджет Республики Армения, при реализации товаров физ. лицам'"), НЕ ЭтоЖурнал);
		ДобавитьКод(СписокКодов, "51", НСтр("ru = '51 - Вычет за уплаченные суммы НДС в бюджет Кыргызской Республики, при реализации товаров физ. лицам';
											|en = '51 - Вычет за уплаченные суммы НДС в бюджет Кыргызской Республики, при реализации товаров физ. лицам'"), НЕ ЭтоЖурнал);
	КонецЕсли;
	
	ДобавитьКод(СписокКодов, "99", "99 - Вычет НДС по налоговым накладным", НЕ ЭтоЖурнал);
	
	Возврат СписокКодов;
	
КонецФункции

&НаКлиенте
Функция КодыВидовОперацийВыданныхСчетовФактур(ЭтоЖурнал = Ложь, ЭтоНетКнигаПрод = Ложь) Экспорт
	
	Наступило = ДокументооборотСКОВызовСервера.СобытиеНаступилоНовыйФорматПояснДеклНДС();
	
	ДляВсех = Истина;
	
	СписокКодов = Новый СписокЗначений();
	
	ДобавитьКод(СписокКодов, "01", "01 - Реализованные товары, работы, услуги", ДляВсех);
	ДобавитьКод(СписокКодов, "02", "02 - Авансы полученные", ДляВсех);
	ДобавитьКод(СписокКодов, "06", "06 - Налоговый агент, статья 161 НК", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "10", "10 - Переданные безвозмездно товары, работы, услуги", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости", ДляВсех);
	ДобавитьКод(СписокКодов, "14", "14 - Реализация прав, пп.1-4 ст. 155 НК", НЕ ЭтоЖурнал И НЕ ЭтоНетКнигаПрод ИЛИ ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "15", "15 - Совместная реализация собственных и комиссионных товаров, работ, услуг", ДляВсех);
	ДобавитьКод(СписокКодов, "16", "16 - Возврат от покупателя-неплательщика НДС", ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "17", "17 - Возврат от покупателя-физического лица", ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "18", "18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения", ДляВсех);
	ДобавитьКод(СписокКодов, "19", "19 - Ввоз товаров из Евразийского экономического союза", ЭтоЖурнал ИЛИ ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "20", "20 - Ввоз импортных товаров на территорию РФ", ЭтоЖурнал ИЛИ ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "21", "21 - Восстановление НДС, п.8 статьи 145, п.3 статьи 170, статья 171.1 НК, а также при операциях, облагаемых по ставке 0%", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "22", "22 - Возврат, зачет авансовых платежей, п.5 статьи 171, п.6 статьи 172 НК", ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 статьи 171 НК", ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "24", "24 - Подтверждение ставки 0% после истечения 180 дней", ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "25", "25 - Подтверждение ставки 0%", ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "26", "26 - Счета-фактуры не составляются по письменному согласию сторон", НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "27", "27 - Сводный комиссионный счет-фактура, п.3.1 статьи 169 НК", ДляВсех);
	ДобавитьКод(СписокКодов, "28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК", ДляВсех);
	ДобавитьКод(СписокКодов, "29", "29 - Корректировка по п.6 ст. 105.3 НК", ДляВсех);
	ДобавитьКод(СписокКодов, "30", "30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК", ДляВсех);
	ДобавитьКод(СписокКодов, "31", "31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК", НЕ ЭтоЖурнал И НЕ ЭтоНетКнигаПрод ИЛИ ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "32", НСтр("ru = '32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК';
										|en = '32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК'"), ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "33", НСтр("ru = '33 - Авансы полученные за товары п.8 ст. 161 НК';
										|en = '33 - Авансы полученные за товары п.8 ст. 161 НК'"), ДляВсех);
	ДобавитьКод(СписокКодов, "34", НСтр("ru = '34 - Реализация товаров п.8 ст. 161 НК';
										|en = '34 - Реализация товаров п.8 ст. 161 НК'"), ДляВсех);
	ДобавитьКод(СписокКодов, "35", НСтр("ru = '35 - Оформление документа для компенсации НДС гражданину иностранного государства';
										|en = '35 - Оформление документа для компенсации НДС гражданину иностранного государства'"), НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "36", НСтр("ru = '36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК';
										|en = '36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК'"), ЭтоНетКнигаПрод);
	ДобавитьКод(СписокКодов, "37", НСтр("ru = '37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК';
										|en = '37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК'"), ДляВсех);
	ДобавитьКод(СписокКодов, "38", НСтр("ru = '38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК';
										|en = '38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК'"), ДляВсех);
	ДобавитьКод(СписокКодов, "39", НСтр("ru = '39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК';
										|en = '39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК'"), ДляВсех);
	ДобавитьКод(СписокКодов, "40", НСтр("ru = '40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК';
										|en = '40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК'"), ДляВсех);
	ДобавитьКод(СписокКодов, "41", НСтр("ru = '41 - Авансы выданные за товары п.8 ст. 161 НК';
										|en = '41 - Авансы выданные за товары п.8 ст. 161 НК'"), НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "42", НСтр("ru = '42 - Получение товаров п.8 ст. 161 НК';
										|en = '42 - Получение товаров п.8 ст. 161 НК'"), НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "43", НСтр("ru = '43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК';
										|en = '43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК'"), НЕ ЭтоЖурнал);
	ДобавитьКод(СписокКодов, "44", НСтр("ru = '44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения';
										|en = '44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения'"), НЕ ЭтоЖурнал);
	
	Если Наступило Тогда
		ДобавитьКод(СписокКодов, "45", НСтр("ru = '45 - Вычет НДС при приобретении у иностранной организации, п. 2.1 ст. 171 НК РФ';
											|en = '45 - Вычет НДС при приобретении у иностранной организации, п. 2.1 ст. 171 НК РФ'"), ЭтоНетКнигаПрод);
		ДобавитьКод(СписокКодов, "46", НСтр("ru = '46 - Вычет НДС при ввозе товаров с Евразийского экономического союза';
											|en = '46 - Вычет НДС при ввозе товаров с Евразийского экономического союза'"), ЭтоНетКнигаПрод);
		ДобавитьКод(СписокКодов, "47", НСтр("ru = '47 - Реализация транспортного средства, приобретенного у физ. лица';
											|en = '47 - Реализация транспортного средства, приобретенного у физ. лица'"), НЕ ЭтоЖурнал ИЛИ ЭтоНетКнигаПрод);
		ДобавитьКод(СписокКодов, "48", НСтр("ru = '48 - Вычет НДС за уплаченные суммы НДС в бюджет Республики Беларусь, при реализации товаров физ. лицам';
											|en = '48 - Вычет НДС за уплаченные суммы НДС в бюджет Республики Беларусь, при реализации товаров физ. лицам'"), ЭтоНетКнигаПрод);
		ДобавитьКод(СписокКодов, "49", НСтр("ru = '49 - Вычет за уплаченные суммы НДС в бюджет Республики Казахстан, при реализации товаров физ. лицам';
											|en = '49 - Вычет за уплаченные суммы НДС в бюджет Республики Казахстан, при реализации товаров физ. лицам'"), ЭтоНетКнигаПрод);
		ДобавитьКод(СписокКодов, "50", НСтр("ru = '50 - Вычет за уплаченные суммы НДС в бюджет Республики Армения, при реализации товаров физ. лицам';
											|en = '50 - Вычет за уплаченные суммы НДС в бюджет Республики Армения, при реализации товаров физ. лицам'"), ЭтоНетКнигаПрод);
		ДобавитьКод(СписокКодов, "51", НСтр("ru = '51 - Вычет за уплаченные суммы НДС в бюджет Кыргызской Республики, при реализации товаров физ. лицам';
											|en = '51 - Вычет за уплаченные суммы НДС в бюджет Кыргызской Республики, при реализации товаров физ. лицам'"), ЭтоНетКнигаПрод);
	КонецЕсли;

	Возврат СписокКодов;
	
КонецФункции

&НаКлиенте
Функция КодыВидовОперацийРаздел12() Экспорт
	
	ДляВсех = Истина;
	
	СписокКодов = Новый СписокЗначений();
	
	ДобавитьКод(СписокКодов, "01", "01 - Реализованные товары, работы, услуги", ДляВсех);
	ДобавитьКод(СписокКодов, "02", "02 - Авансы полученные", ДляВсех);
		
	Возврат СписокКодов;
	
КонецФункции

#КонецОбласти

Процедура СформироватьПакетПоЕГРЮЛ(Параметры) Экспорт
	
	Поддерживается = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПоддерживаетсяФормированиеПакетаДляВнесенияИзмененийВЕГРЮЛ();
	Если НЕ Поддерживается Тогда
		Версия = ДокументооборотСКОКлиентСервер.ВерсияДляФормированиеПакетаЕГРЮЛ();
		Текст  = НСтр("ru = 'Данный функционал доступен в платформе начиная с версии %1';
						|en = 'Данный функционал доступен в платформе начиная с версии %1'");
		Текст  = СтрШаблон(Текст, Версия);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СформироватьПакетПоЕГРЮЛ_ПослеПолученияКонтекста", 
		ЭтотОбъект, 
		Параметры);
		
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура СформироватьПакетПоЕГРЮЛ_ПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.СформироватьПакетПоЕГРЮЛ(ВходящийКонтекст);
	
КонецПроцедуры

#Область Криптография

// УниверсальныйКриптопровайдер - Булево - если Истина, то возвращается провайдер Microsoft Base Cryptographic Provider v1.0
Процедура ПолучитьСвойстваПрограммыМенеджераКриптографии(
		ОповещениеОбратногоВызова,
		СвойстваСертификата = Неопределено,
		УниверсальныйКриптопровайдер = Ложь) Экспорт
	
	Если СвойстваСертификата <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"ДокументооборотСКОКлиент.ПолучитьСвойстваПрограммыМенеджераКриптографии",
			"СвойстваСертификата",
			СвойстваСертификата,
			Новый ОписаниеТипов("СертификатКриптографии"));
	КонецЕсли;
	
	Если УниверсальныйКриптопровайдер Тогда
		Результат = РезультатПолучитьСвойстваПрограммыМенеджераКриптографии();
		Результат.Свойства = КриптографияЭДКОКлиентСервер.КриптопровайдерMicrosoftBaseCryptographicProvider();
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("СвойстваСертификата", СвойстваСертификата);

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСвойстваПрограммыМенеджераКриптографииПослеОпределенияУстановленныхКриптопровайдеров",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОпределитьУстановленныеКрипторовайдеры(Оповещение);
	
КонецПроцедуры

Процедура ОтобразитьПредставленияСертификатов(
		ПараметрыОтображенияСертификатов,
		Форма,
		ЭтоЭлектроннаяПодписьВМоделиСервиса,
		ВыполняемоеОповещение = Неопределено) Экспорт
	
	ПараметрыОтображенияСертификата = ПараметрыОтображенияСертификатов[0];
	
	ПолеВвода							 = ПараметрыОтображенияСертификата.ПолеВвода;
	СвойстваСертификата 				 = ПараметрыОтображенияСертификата.СвойстваСертификата;
	ИмяРеквизитаПредставлениеСертификата = ПараметрыОтображенияСертификата.ИмяРеквизитаПредставлениеСертификата;
	
	ОтобразитьПредставлениеСертификата(
		ПолеВвода,
		СвойстваСертификата,
		Форма,
		ИмяРеквизитаПредставлениеСертификата,
		ВыполняемоеОповещение);
	
КонецПроцедуры

Процедура ОтобразитьПредставлениеСертификата(
		ПолеВвода,
		СвойстваСертификата,
		Форма,
		ИмяРеквизитаПредставлениеСертификата,
		ВыполняемоеОповещение = Неопределено) Экспорт
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолеВвода",									ПолеВвода);
	ДополнительныеПараметры.Вставить("Форма", 										Форма);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПредставлениеСертификата", 		ИмяРеквизитаПредставлениеСертификата);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 						ВыполняемоеОповещение);
	
	Если НЕ ЗначениеЗаполнено(СвойстваСертификата) Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = "";
		ПолеВвода.ПодсказкаВвода = НСтр("ru = 'Выберите сертификат';
										|en = 'Выберите сертификат'");
		
		ПараметрыПодсказки = ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию();
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр(СтрШаблон("ru = '%1'", ПараметрыПодсказки.Текст)),,
			ПараметрыПодсказки.Цвет);
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ПараметрыПодсказки.Режим;

		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ДополнительныеПараметры);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// возможные варианты параметра Сертификат на входе: строка, структура, соответствие
	ТипЗнчСвойстваСертификата = ТипЗнч(СвойстваСертификата);
	Если ТипЗнчСвойстваСертификата <> Тип("Строка") И ТипЗнчСвойстваСертификата <> Тип("Структура")
		И ТипЗнчСвойстваСертификата <> Тип("Соответствие") И СвойстваСертификата.Количество() = 1 Тогда
		СвойстваСертификата = СвойстваСертификата[0].СвойстваСертификата;
		ТипЗнчСвойстваСертификата = Тип("Строка");
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СвойстваСертификата", СвойстваСертификата);

	Если ТипЗнчСвойстваСертификата = Тип("Строка") ИЛИ ТипЗнчСвойстваСертификата = Тип("Структура")
		ИЛИ ТипЗнчСвойстваСертификата = Тип("Соответствие") Тогда
		ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификаты(ОписаниеОповещения, Параметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ДополнительныеСвойстваСертификатов", Новый Соответствие);
	
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолученияСвойствПрограммыДляМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещенияПродолжения,, Истина);
	
КонецПроцедуры

Функция НаименованиеСертификата(СертификатКриптографии) Экспорт
	
	Возврат ДокументооборотСКОКлиентСервер.НаименованиеСертификата(СертификатКриптографии);
	
КонецФункции

Функция СтуктураДанныхСертификатаВСтроку(Структура) Экспорт
	
	Результат = "";
	Для каждого КлючЗначение Из Структура Цикл
		Результат = Результат + СтрШаблон("%1=%2;", КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ОпределитьУстановленныеКрипторовайдеры(ОповещениеОбратногоВызова) Экспорт
	
	АлгоритмПоУмолчанию = КриптографияЭДКОКлиентСервер.АлгоритмПоУмолчанию();
	
	Криптопровайдеры = Новый Массив;
	Криптопровайдеры.Добавить(КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro(АлгоритмПоУмолчанию));
	Криптопровайдеры.Добавить(КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet(АлгоритмПоУмолчанию));
	
	ТекущийКриптопровайдер = 0;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КриптоПровайдеры", Криптопровайдеры);
	ДополнительныеПараметры.Вставить("ТекущийКриптопровайдер", ТекущийКриптопровайдер);
	ДополнительныеПараметры.Вставить("УстановленныеКриптопровайдеры", Новый Массив);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ПоддерживаетсяГОСТ2012", Ложь);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияМенеджераКриптографииЦикл", ЭтотОбъект, ДополнительныеПараметры);
	СоздатьМенеджерКриптографии(Оповещение, Криптопровайдеры[ТекущийКриптопровайдер]);
	
КонецПроцедуры

// Создает и возвращает менеджер криптографии (на клиенте) для указанной программы.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - описание оповещения для возврата из процедуры
//  СвойстваПрограммы - ФиксированнаяСтруктура - структура со свойствами программы менеджера криптографии
//  Алгоритмы - Структура - структура со свойствами:
//      * АлгоритмПодписи - Строка - алгоритм подписи
//      * АлгоритмХеширования - Строка - алгоритм подписи
//      * АлгоритмШифрования - Строка - алгоритм подписи
//  ИнтерактивныйРежимКриптографии - Булево - при значении Истина, по возможности, используется
//                                            интерактивный режим криптографии, в нем задание свойства
//                                            "ПарольДоступаКЗакрытомуКлючу" приводит к ошибке
Процедура СоздатьМенеджерКриптографии(
		Оповещение,
		СвойстваПрограммы,
		Алгоритмы = Неопределено,
		ИнтерактивныйРежимКриптографии = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеВозвратаМенеджерКриптографии", Оповещение);
	Контекст.Вставить("СвойстваПрограммы", 						СвойстваПрограммы);
	Контекст.Вставить("БылаПопыткаУстановкиРасширения", 		Ложь);
	Контекст.Вставить("Алгоритмы", 								Алгоритмы);
	Контекст.Вставить("ИнтерактивныйРежимКриптографии", 		ИнтерактивныйРежимКриптографии);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(
		Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией",
			ЭтотОбъект,
			Контекст));
	
КонецПроцедуры

Процедура НайтиСертификатПоОтпечатку(
		ОписаниеОповещениеВозврата,
		ОтпечатокИлиСвойстваСертификата,
		МенеджерКриптографии = Неопределено,
		ТипХранилища = Неопределено) Экспорт
	
	НайтиСертификатПоИдентификатору(
		ОписаниеОповещениеВозврата,
		ОтпечатокИлиСвойстваСертификата,
		"ПоОтпечатку",
		МенеджерКриптографии,
		ТипХранилища);
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеру(
		ОписаниеОповещениеВозврата,
		СерийныйНомер,
		МенеджерКриптографии = Неопределено,
		ТипХранилища = Неопределено) Экспорт
	
	НайтиСертификатПоИдентификатору(
		ОписаниеОповещениеВозврата,
		СерийныйНомер,
		"ПоСерийномуНомеру",
		МенеджерКриптографии,
		ТипХранилища);
	
КонецПроцедуры

Процедура НайтиСертификатПоИдентификатору(
		ОписаниеОповещениеВозврата,
		ИдентификаторИлиСвойстваСертификата,
		ВидПоиска = "ПоОтпечатку",
		МенеджерКриптографии = Неопределено,
		ТипХранилища = Неопределено) Экспорт
	
	Если (ТипЗнч(ИдентификаторИлиСвойстваСертификата) = Тип("Структура")
		ИЛИ ТипЗнч(ИдентификаторИлиСвойстваСертификата) = Тип("ФиксированнаяСтруктура")) И ВидПоиска = "ПоОтпечатку" Тогда
		
		Если КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(ИдентификаторИлиСвойстваСертификата)
		ИЛИ КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(ИдентификаторИлиСвойстваСертификата) Тогда
			
			КриптографияЭДКОКлиент.НайтиСертификат(
				ОписаниеОповещениеВозврата,
				ИдентификаторИлиСвойстваСертификата);
			Возврат;
		КонецЕсли;
		
		Идентификатор = ИдентификаторИлиСвойстваСертификата.Отпечаток;
		
	Иначе
		Идентификатор = ИдентификаторИлиСвойстваСертификата;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ДокументооборотСКОКлиент.ПолучитьСвойстваПрограммыМенеджераКриптографии",
		"Идентификатор",
		Идентификатор, 
		Новый ОписаниеТипов("Строка, ДвоичныеДанные"));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОписаниеОповещения", ОписаниеОповещениеВозврата);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ТипХранилища", ТипХранилища);
	Контекст.Вставить("ВидПоиска", ВидПоиска);
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Контекст.Вставить("Идентификатор", ПолучитьДвоичныеДанныеИзHexСтроки(Идентификатор));
	Иначе
		Контекст.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	
	Если МенеджерКриптографии = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеПолученияСвойствМенеджераКриптографии",
			ЭтотОбъект,
			Контекст);
		ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения,, Истина);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеСозданияМенеджераКриптографии",
			ЭтотОбъект,
			Контекст);
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификат(
		ОповещениеОЗавершении,
		СвойстваСертификатаИлиОтпечаток,
		Проверки = "",
		ВыводитьСообщения = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", 				ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Проверки", 						Проверки);
	ДополнительныеПараметры.Вставить("ВыводитьСообщения", 				ВыводитьСообщения);
	ДополнительныеПараметры.Вставить("СвойстваСертификатаИлиОтпечаток", СвойстваСертификатаИлиОтпечаток);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСертификатПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайл(
		ОповещениеОЗавершении,
		СвойстваСертификата,
		ИмяФайлаИлиРасширение,
		ВыводитьСоообщения = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайлаИлиРасширение", 	ИмяФайлаИлиРасширение);
	ДополнительныеПараметры.Вставить("ВыводитьСоообщения", 		ВыводитьСоообщения);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", 		ОповещениеОЗавершении);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭкспортироватьСертификатВФайлПослеПоискаСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
	НайтиСертификатПоОтпечатку(ОписаниеОповещения, СвойстваСертификата);
	
КонецПроцедуры

Процедура ПодписатьCadesBes(ОповещениеОбратногоВызова, ПараметрыПодписи) Экспорт
	
	ВключатьМеткуВремени = ?(ПараметрыПодписи.Свойство("ВключатьМеткуВремени"),
		ПараметрыПодписи.ВключатьМеткуВремени, Ложь);
	МестоХраненияКлючаДляХеширования = ?(ПараметрыПодписи.Свойство("МестоХраненияКлючаДляХеширования"),
		ПараметрыПодписи.МестоХраненияКлючаДляХеширования, КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь));
	
	// проверка параметров
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ДокументооборотСКОКлиент.ПодписатьCadesBes",
		"Данные",
		ПараметрыПодписи.Данные,
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеЗавершенияПодписи", 			ОповещениеОбратногоВызова);
	Контекст.Вставить("МенеджерКриптографии", 					Неопределено);
	Контекст.Вставить("СвойстваСертификата", 					ПараметрыПодписи.СвойстваСертификата);
	Контекст.Вставить("Данные", 								ПараметрыПодписи.Данные);
	Контекст.Вставить("ПарольДоступаКЗакрытомуКлючу", 			"");
	Контекст.Вставить("ИнтерактивныйРежимКриптографии", 		Ложь);
	Контекст.Вставить("СвойстваПрограммыКриптографии", 			Неопределено);
	Контекст.Вставить("ПопыткаПодписиПослеПодменыАлгоритмов", 	Ложь);
	Контекст.Вставить("ВключатьМеткуВремени", 					ВключатьМеткуВремени);
	Контекст.Вставить("ПлатформаПоддерживаетМеткуВремени", 		Ложь);
	Контекст.Вставить("МестоХраненияКлючаДляХеширования", 		МестоХраненияКлючаДляХеширования);
	
	Если (ТипЗнч(ПараметрыПодписи.СвойстваСертификата) = Тип("Структура")
		ИЛИ ТипЗнч(ПараметрыПодписи.СвойстваСертификата) = Тип("ФиксированнаяСтруктура"))
		И (КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(ПараметрыПодписи.СвойстваСертификата)
		ИЛИ КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(ПараметрыПодписи.СвойстваСертификата)) Тогда
		
		Если ТипЗнч(ПараметрыПодписи.Данные) = Тип("Строка") Тогда
			ПараметрыПодписи.Данные = ПолучитьДвоичныеДанныеИзСтроки(ПараметрыПодписи.Данные, "windows-1251");
		КонецЕсли;
		Если ТипЗнч(ПараметрыПодписи.Данные) = Тип("ДвоичныеДанные") Тогда
			ПараметрыПодписи.Данные = ПоместитьВоВременноеХранилище(ПараметрыПодписи.Данные, Новый УникальныйИдентификатор);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьПослеПодписи",
			ЭтотОбъект,
			Контекст);
		
		КриптографияЭДКОКлиент.ПодписатьPKCS7(
			ОписаниеОповещения,
			ПараметрыПодписи.СвойстваСертификата,
			ПараметрыПодписи.Данные,
			Ложь);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ДокументооборотСКОКлиент.ПодписатьCadesBes",
		"СвойстваСертификата",
		ПараметрыПодписи.СвойстваСертификата,
		Новый ОписаниеТипов("СертификатКриптографии"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ДокументооборотСКОКлиент.ПодписатьCadesBes",
		"ПарольДоступаКЗакрытомуКлючу",
		ПараметрыПодписи.ПарольДоступаКЗакрытомуКлючу,
		Новый ОписаниеТипов("Строка"));
	Контекст.ПарольДоступаКЗакрытомуКлючу = ПараметрыПодписи.ПарольДоступаКЗакрытомуКлючу;
	Контекст.ИнтерактивныйРежимКриптографии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПодписи,
		"ИнтерактивныйРежимКриптографии", Ложь);
	
	#Если МобильныйКлиент Тогда
		ЭтоМобильныйКлиент = Истина;
	#Иначе
		ЭтоМобильныйКлиент = Ложь;
	#КонецЕсли
	
	Контекст.ПлатформаПоддерживаетМеткуВремени = ВключатьМеткуВремени И НЕ ОбщегоНазначенияКлиент.ЭтоMacOSКлиент()
		И НЕ ЭтоМобильныйКлиент;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		Контекст);
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения, Контекст.СвойстваСертификата);
	
КонецПроцедуры

#КонецОбласти

// Подключает/отключает обработчик ожидания для проверки состояния требований от ФНС.
//
// Параметры:
//	Подключать 			- Булево
//	ПериодОповещения 	- Число
//
Процедура ПодключениеОбработчикаОжиданияИнформацияПоТребованиям(Подключать = Истина, Интервал = 0) Экспорт
	
	Если Подключать Тогда
		
		ПараметрыРаботыКлиентаПриЗапуске 	= СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
		ТекущемуПользователюАОДоступен 		= ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюАОДоступен;
	
		// проверяем, является ли текущий пользователь пользователем ДО
		// проверяем отключение автообмена на уровне учетной записи документооборота
		// Может равняться Неопределено.
		Если ТекущемуПользователюАОДоступен = Истина Тогда
			
			// если проверки пройдены, определяем интервал выполнения
			ПодключитьОбработчикОжидания("ПолучитьИнформациюОТребованиях", Интервал, Истина);
			
		КонецЕсли;
		
	Иначе
		ОтключитьОбработчикОжидания("ПолучитьИнформациюОТребованиях");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИнформациюОТребованияхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.ПоказатьИнформациюПоТребованиямКлиент(Истина);
	
КонецПроцедуры

// Метод отрабатывает нажатие на элементы в информационной панели БРО
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма, в которой располагается элемент.
//  Ссылка	 - Строка - Значение, которое пришло в метод формы Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки 
//             в парамете НавигационнаяСсылкаФорматированнойСтроки. 
//  СтандартнаяОбработка - Булево - Значение, которое пришло в метод формы
//             Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки в параметре ОбработкаНавигационнойСсылки. 
//
Процедура ИнформационнаяПанельБРОНажатие(Форма, Ссылка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Ссылка = НСтр("ru = 'Подробнее...';
						|en = 'Подробнее...'") Тогда
		Организация = Форма.ИнформационнаяПанельБРОКэш.Организация;
		ПоказатьРекламуПромоЕНС(Организация);
	КонецЕсли;
	
	Если Ссылка = НСтр("ru = 'Закрыть';
						|en = 'Закрыть'") Тогда
		ДокументооборотСКОВызовСервера.СохранитьНастройку("ПромоЕНСНапоминать", Ложь);
		ИмяГруппы = Форма.ИнформационнаяПанельБРОКэш.ИмяГруппы;
		Группа = Форма.Элементы[ИмяГруппы];
		Группа.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредлагатьУстановкуРасширения() Экспорт
	
	#Если ВебКлиент Тогда
		ПредлагатьУстановкуРасширения = Ложь;
	#Иначе
		ПредлагатьУстановкуРасширения = Истина;
	#КонецЕсли
	
	Возврат ПредлагатьУстановкуРасширения;
	
КонецФункции

// Добавляет в табличный документ отчета, отправленного в ФНС, СФР (бывш. ПФР) или Росстат штамп эл. подписи.
//
// Параметры:
//  Источник				 - ФормаКлиентскогоПриложения, ДокументСсылка, ДокументСсылка - 
// 		Форма или ссылка на печатаемый отчет
// 		Если передается форма, то в методе ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме
// 		должно быть запрограммировано получение ссылки на этот отчет.
//  ТабличныйДокумент		 - ТабличныйДокумент, Неопределено - Табличный документ отчета, куда надо добавить штамп эл. подписи.
//		Если ТабличныйДокумент не указан, то результат будет содержать xml содержимое отчета (эл. представление) со штампом эл. подписи. 
//  ВыполняемоеОповещение	 - ОписаниеОповещения - После завершения работы управление будет передано в этот метод со следующим результатом:
// 			Выполнено – Булево - Показывает, успешно ли выполнена процедура добавления штамп эл. подписи.
// 			ТабличныйДокумент - ТабличныйДокумент - Табличный документ отчета с добавленным штампом эл. подписи.
//			др. вспомогательные свойства.
//
Процедура ПолучитьТабДокОтчетаСЭЦП(Источник, ТабличныйДокумент = Неопределено, ВыполняемоеОповещение = Неопределено) Экспорт
	
	ДополнительныеПараметры = ДокументооборотСКОКлиентСервер.НеВыполнено();
	ДополнительныеПараметры.Вставить("Источник", Источник);
	ДополнительныеПараметры.Вставить("Форма",  Неопределено);
	ДополнительныеПараметры.Вставить("Ссылка", Неопределено);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ПечатныйДокументСЭЦП",  Неопределено);
	ДополнительныеПараметры.Вставить("ТабличныйДокумент",     ТабличныйДокумент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьОтчетСЭЦППродолжение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПолучитьОтчетСЭЦППродолжение(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	// Если нет доступа к ЭДО, продолжим без получения штампа ЭП.
	Если КонтекстЭДОКлиент = Неопределено Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Недостаточно прав для использования модуля документооборота!';
									|en = 'Недостаточно прав для использования модуля документооборота!'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, ВходящийКонтекст);
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВходящийКонтекст.Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
		ВходящийКонтекст.Вставить("Форма", ВходящийКонтекст.Источник);
		Ссылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(ВходящийКонтекст.Источник);
	Иначе
		Ссылка = ВходящийКонтекст.Источник;
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось определить ссылку на отчет по форме отчета';
									|en = 'Не удалось определить ссылку на отчет по форме отчета'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, ВходящийКонтекст);
		
		Возврат;
	КонецЕсли;
	
	ВходящийКонтекст.Вставить("Ссылка", Ссылка);
	
	ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Ссылка);
	Если ЦиклОбмена = Неопределено Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось определить цикл обмена. Проверьте, что отчет был отправлен в ФНС, СФР (бывш. ПФР) или Росстат!';
									|en = 'Не удалось определить цикл обмена. Проверьте, что отчет был отправлен в ФНС, СФР (бывш. ПФР) или Росстат!'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, ВходящийКонтекст);
		
		Возврат;
	КонецЕсли;
	
	НастройкиПечати = Новый Структура;
	НастройкиПечати.Вставить("ПечататьДокумент", Истина);
	Если КонтекстЭДОКлиент.ЭтоФорматПриказ534(ЦиклОбмена) Тогда
		НастройкиПечати.Вставить("ФорматДокументооборота",
			КонтекстЭДОКлиент.СтруктураСсылочныхДанных["Перечисления_ФорматыДокументооборотаСФНС_Приказ534"]);
	КонецЕсли;
	КонтекстЭДОКлиент.ДополнитьНастройкиПечати(НастройкиПечати);
	
	ВходящийКонтекст.Вставить("ЦиклОбмена", ЦиклОбмена);
	ВходящийКонтекст.Вставить("НастройкиПечати", НастройкиПечати);
	ВходящийКонтекст.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьОтчетСЭЦППроверкаРезультата", ЭтотОбъект, ВходящийКонтекст);
	
	КонтекстЭДОКлиент.СформироватьПечатныеДокументы(ЦиклОбмена, НастройкиПечати, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПолучитьОтчетСЭЦППроверкаРезультата(Результат, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	НастройкиПечати = ВходящийКонтекст.НастройкиПечати;
	КонтекстЭДОКлиент = ВходящийКонтекст.КонтекстЭДОКлиент;
	
	Если Результат.Количество() = 0 Тогда
		Если КонтекстЭДОКлиент = Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, ВходящийКонтекст);
			Возврат;
		КонецЕсли;
		
		НастройкиПечати.ПечататьДокумент = Ложь;
		Если НастройкиПечати.Свойство("ПечататьРезультатПриема") Тогда
			НастройкиПечати.ПечататьРезультатПриема = Истина;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПолучитьОтчетСЭЦПЗавершение", ЭтотОбъект, ВходящийКонтекст);
		
		ЦиклОбмена = ВходящийКонтекст.ЦиклОбмена;
		КонтекстЭДОКлиент.СформироватьПечатныеДокументы(ЦиклОбмена, НастройкиПечати, ОписаниеОповещения);
	Иначе
		ПолучитьОтчетСЭЦПЗавершение(Результат, ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОтчетСЭЦПЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	
	Если Результат.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, ВходящийКонтекст);
		Возврат;
	КонецЕсли;
	
	ПечатныйДокументСЭЦП = Неопределено;
	
	Если ТипЗнч(Результат[0].Значение) = Тип("Структура") Тогда
		ПечатныйДокументСЭЦП = Результат[0].Значение.ТабДок;
	Иначе
		ПечатныйДокументСЭЦП = Результат[0].Значение;
	КонецЕсли;
	
	Если ВходящийКонтекст.ТабличныйДокумент = Неопределено Тогда
		
		ВходящийКонтекст.ТабличныйДокумент = ПечатныйДокументСЭЦП;
		Успешно = Истина;

	Иначе
		
		Успешно = ДокументооборотСКОВызовСервера.ДобавитьШтампыЭЦПКСодержимомуТабличногоДокумента(
			ВходящийКонтекст.ТабличныйДокумент, 
			ПечатныйДокументСЭЦП);
			
	КонецЕсли;
	
	ВходящийКонтекст.Выполнено = Успешно;
	ВходящийКонтекст.ПечатныйДокументСЭЦП = ПечатныйДокументСЭЦП;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, ВходящийКонтекст);
	
КонецПроцедуры

Процедура ВыбратьНастройкиОбменаЕГАИС(ОбработчикЗакрытияФормы, Организация, СписокЗначенийНастроекОбмена) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПриВыбореНастройкиОбменаЕГАИС(
		ОбработчикЗакрытияФормы,
		Организация,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		СписокЗначенийНастроекОбмена.ПоказатьВыборЭлемента(ОбработчикЗакрытияФормы);
	КонецЕсли;
	
КонецПроцедуры

#Область ПодписьОтправкаДляМЧД

// Метод предназначен для отправки подписанной МЧД без открытия формы МЧД
// через текущую учетную запись организации (в т. ч. отправка с учетной записью представителя).
// Если МЧД уже подписана, то нужно только отправить. Если не подписана, то подписать серификатом руководителя и отправить
//
// Параметры:
//  ОповещениеОЗавершении  - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат - Структура:
//      * Выполнено       - Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. ОписаниеОшибки.
//      * ОписаниеОшибки  - Строка - описание ошибки выполнения.
//  МЧД	- Ссылка с типом из ОпределяемыйТип.МашиночитаемыеДоверенностиБРО, ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР
//      - Ссылка на МЧД/ЗПЭД, которую надо отправить
//  ОтпечатокРуководителя - Строка - отпечаток сертификата руководителя
//
Процедура ОтправитьМЧД(ОповещениеОЗавершении, МЧД, ОтпечатокРуководителя) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(МЧД) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ДанныеСостояния = ДокументооборотСКОВызовСервера.ПрочитатьСостояниеМЧДЕдиногоФормата(МЧД);
		Подписана = ?(ДанныеСостояния = Неопределено, Ложь, ДанныеСостояния.Подписана);
		ТехническийСтатусПодписана = ?(ДанныеСостояния = Неопределено, Ложь, ДанныеСостояния.ТехническийСтатусПодписана);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("ДоверенностьСсылка", 		МЧД);
		ДополнительныеПараметры.Вставить("ДанныеСостояния", 		ДанныеСостояния);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьМЧДЕдиногоФорматаПослеПодписания",
			ЭтотОбъект, ДополнительныеПараметры);
		
		Если Подписана = Истина Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Истина, "");
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
			
		Иначе
			ПодписатьМЧД(ОписаниеОповещения, МЧД, ОтпечатокРуководителя);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("ДоверенностьСсылка", 		МЧД);
		ДополнительныеПараметры.Вставить("ЭтоЗаявление", 			Ложь);
		ДополнительныеПараметры.Вставить("ОтпечатокРуководителя", 	ОтпечатокРуководителя);
		ДополнительныеПараметры.Вставить("ТолькоПодписание", 		Ложь);
		
		ТекстСообщенияПолучитьОбработкуЭДО = "";
		Если ДокументооборотСКОВызовСервера.ОтчетОтправлен(МЧД, ТекстСообщенияПолучитьОбработкуЭДО) Тогда
			Если ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, НСтр("ru = 'Машиночитаемая доверенность (СФР, бывш. ФСС) уже отправлена.';
								|en = 'Машиночитаемая доверенность (СФР, бывш. ФСС) уже отправлена.'"));
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ЗначениеЗаполнено(ТекстСообщенияПолучитьОбработкуЭДО) Тогда
			Если ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, ТекстСообщенияПолучитьОбработкуЭДО);
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		Если НЕ ДокументооборотСКОВызовСервера.МЧДПодписана(МЧД) Тогда
			РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьМЧДФСС(МЧД);
			
			Если РезультатыПроверки.Количество() <> 0 Тогда
				МассивОшибок = Новый Массив;
				Для каждого РезультатПроверки Из РезультатыПроверки Цикл
					МассивОшибок.Добавить(РезультатПроверки.ТекстОшибки);
				КонецЦикла;
				ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
				
				Если ОповещениеОЗавершении <> Неопределено Тогда
					РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
					ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьМЧДПослеПолученияКонтекстаЭДО",
			ЭтотОбъект, ДополнительныеПараметры);
		ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	ИначеЕсли ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС")
		ИЛИ ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю")
		ИЛИ ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя")
		ИЛИ ТипЗнч(МЧД) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР") Тогда
		
		ЭтоЗаявление = ТипЗнч(МЧД) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР");
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("ДоверенностьСсылка", 		МЧД);
		ДополнительныеПараметры.Вставить("ЭтоЗаявление", 			ЭтоЗаявление);
		ДополнительныеПараметры.Вставить("ОтпечатокРуководителя", 	"");
		ДополнительныеПараметры.Вставить("ТолькоПодписание", 		Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьМЧДПослеПодписания",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстСообщенияПолучитьОбработкуЭДО = "";
		Если ДокументооборотСКОВызовСервера.ОтчетОтправлен(МЧД, ТекстСообщенияПолучитьОбработкуЭДО) Тогда
			Если ЭтоЗаявление Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, НСтр("ru = 'Заявления по эл. документообороту СФР (бывш. ПФР) уже подписано и отправлено.';
								|en = 'Заявления по эл. документообороту СФР (бывш. ПФР) уже подписано и отправлено.'"));
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
				
			ИначеЕсли ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, НСтр("ru = 'Уведомление о предоставлении полномочий представителю уже отправлено.';
								|en = 'Уведомление о предоставлении полномочий представителю уже отправлено.'"));
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
				
			ИначеЕсли ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя") Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, НСтр("ru = 'Уведомление о прекращении полномочий представителя уже отправлено.';
								|en = 'Уведомление о прекращении полномочий представителя уже отправлено.'"));
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
				
			Иначе
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, НСтр("ru = 'Машиночитаемая доверенность (ФНС) уже отправлена.';
								|en = 'Машиночитаемая доверенность (ФНС) уже отправлена.'"));
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ТекстСообщенияПолучитьОбработкуЭДО) Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
				Ложь, ТекстСообщенияПолучитьОбработкуЭДО);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
			
		ИначеЕсли ДокументооборотСКОВызовСервера.МЧДПодписана(МЧД) Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Истина, "");
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
			
		Иначе
			ПодписатьМЧД(ОписаниеОповещения, МЧД, ОтпечатокРуководителя);
		КонецЕсли;
		
	Иначе
		Если ОповещениеОЗавершении <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
				Ложь, НСтр("ru = 'Тип машиночитаемой доверенности не поддерживается';
							|en = 'Тип машиночитаемой доверенности не поддерживается'"));
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Метод предназначен для подписания МЧД без открытия формы МЧД сертификатом руководителя
//
// Параметры:
//  ОповещениеОЗавершении  - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат - Структура:
//      * Выполнено       - Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. ОписаниеОшибки.
//      * ОписаниеОшибки  - Строка - описание ошибки выполнения.
//  МЧД	- Ссылка с типом из ОпределяемыйТип.МашиночитаемыеДоверенностиБРО, ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР
//      - Ссылка на МЧД/ЗПЭД, которую надо подписать
//  ОтпечатокРуководителя - Строка - отпечаток сертификата руководителя
//
Процедура ПодписатьМЧД(ОповещениеОЗавершении, МЧД, ОтпечатокРуководителя) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(МЧД) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ПараметрыВозврата = Новый Структура;
		ПараметрыВозврата.Вставить("СформироватьФайлДоверенностиПриОтсутствии", Истина);
		ПараметрыВозврата.Вставить("ИсключитьВозвратДанных", 					Истина);
		ПараметрыВозврата.Вставить("ВозвращатьОписаниеОшибки", 					Истина);
		ПараметрыВозврата.Вставить("Организация", 								Новый Массив);
		ПараметрыВозврата.Вставить("ФайлДоверенности", 							Неопределено);
		ПараметрыВозврата.Вставить("Доверители", 								Неопределено);
		ПараметрыВозврата.Вставить("Представители", 							Неопределено);
		РезультатВыгрузкиИлиОписаниеОшибки = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДЕдиногоФормата(МЧД,
			ПараметрыВозврата);
		Если РезультатВыгрузкиИлиОписаниеОшибки = Неопределено
			ИЛИ ТипЗнч(РезультатВыгрузкиИлиОписаниеОшибки) = Тип("Строка") Тогда
			
			Если ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, РезультатВыгрузкиИлиОписаниеОшибки);
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ЗапоминаемыеПараметры = Новый Соответствие;
		ЗапоминаемыеПараметры["МЧДОтпечатокРуководителя"] 		= ОтпечатокРуководителя;
		ЗапоминаемыеПараметры["МЧДТолькоПодписание"] 			= Истина;
		ЗапоминаемыеПараметры["МЧДСкрытьДлительнуюОтправку"] 	= Истина;
		ПредыдущиеОшибки = ЗапоминаниеОшибок(Истина,,, ЗапоминаемыеПараметры);
		
		СтандартнаяОбработка = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("ДоверенностьСсылка", 		МЧД);
		ДополнительныеПараметры.Вставить("ФайлДоверенности", 		ПараметрыВозврата.ФайлДоверенности);
		ДополнительныеПараметры.Вставить("Доверители", 				ПараметрыВозврата.Доверители);
		ДополнительныеПараметры.Вставить("Представители", 			ПараметрыВозврата.Представители);
		ДополнительныеПараметры.Вставить("ПредыдущиеОшибки", 		ПредыдущиеОшибки);
		НастройкиВызова = Новый Структура;
		НастройкиВызова.Вставить("ОтпечатокСертификатаДоверителя", ОтпечатокРуководителя);
		Оповещение = Новый ОписаниеОповещения("ПодписатьМЧДЕдиногоФорматаПослеПодписания",
			ЭтотОбъект, ДополнительныеПараметры);
		ИнтерфейсыВзаимодействияБРОКлиент.ПриНачалеПодписания(
			ПараметрыВозврата.Организация,
			ПараметрыВозврата.ФайлДоверенности,
			"ПодписаниеВсегда",
			Оповещение,
			СтандартнаяОбработка,
			НастройкиВызова);
		
	ИначеЕсли ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("ДоверенностьСсылка", 		МЧД);
		ДополнительныеПараметры.Вставить("ЭтоЗаявление", 			Ложь);
		ДополнительныеПараметры.Вставить("ОтпечатокРуководителя", 	ОтпечатокРуководителя);
		ДополнительныеПараметры.Вставить("ТолькоПодписание", 		Истина);
		
		ТекстСообщенияПолучитьОбработкуЭДО = "";
		Если ДокументооборотСКОВызовСервера.ОтчетОтправлен(МЧД, ТекстСообщенияПолучитьОбработкуЭДО) Тогда
			Если ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, НСтр("ru = 'Машиночитаемая доверенность (СФР, бывш. ФСС) уже подписана и отправлена.';
								|en = 'Машиночитаемая доверенность (СФР, бывш. ФСС) уже подписана и отправлена.'"));
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ЗначениеЗаполнено(ТекстСообщенияПолучитьОбработкуЭДО) Тогда
			Если ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, ТекстСообщенияПолучитьОбработкуЭДО);
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ДокументооборотСКОВызовСервера.МЧДПодписана(МЧД) Тогда
			Если ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
					Ложь, НСтр("ru = 'Машиночитаемая доверенность (СФР, бывш. ФСС) уже подписана.';
								|en = 'Машиночитаемая доверенность (СФР, бывш. ФСС) уже подписана.'"));
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьМЧДФСС(МЧД);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			МассивОшибок = Новый Массив;
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				МассивОшибок.Добавить(РезультатПроверки.ТекстОшибки);
			КонецЦикла;
			ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
			
			Если ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьМЧДПослеПолученияКонтекстаЭДО",
			ЭтотОбъект, ДополнительныеПараметры);
		ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
	ИначеЕсли ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС")
		ИЛИ ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю")
		ИЛИ ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя")
		ИЛИ ТипЗнч(МЧД) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР") Тогда
		
		Если ТипЗнч(МЧД) <> Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР") Тогда
			Если ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
				РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьУПУП(МЧД, "ПроверятьТолькоНеподписанные");
			ИначеЕсли ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя") Тогда
				РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьУПРУП(МЧД, "ПроверятьТолькоНеподписанные");
			Иначе
				РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьМЧД(МЧД, "ПроверятьТолькоНеподписанные");
			КонецЕсли;
			
			Если РезультатыПроверки.Количество() <> 0 Тогда
				МассивОшибок = Новый Массив;
				Для каждого РезультатПроверки Из РезультатыПроверки Цикл
					МассивОшибок.Добавить(РезультатПроверки.ТекстОшибки);
				КонецЦикла;
				ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
				
				Если ОповещениеОЗавершении <> Неопределено Тогда
					РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
					ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЗапоминаемыеПараметры = Новый Соответствие;
		ЗапоминаемыеПараметры["МЧДОтпечатокРуководителя"] 		= ОтпечатокРуководителя;
		ЗапоминаемыеПараметры["МЧДТолькоПодписание"] 			= Истина;
		ЗапоминаемыеПараметры["МЧДСкрытьДлительнуюОтправку"] 	= Истина;
		ПредыдущиеОшибки = ЗапоминаниеОшибок(Истина,,, ЗапоминаемыеПараметры);
		
		Если ТипЗнч(МЧД) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР") Тогда
			РезультатПроверки = ДокументооборотСКОВызовСервера.ПроверитьЗПЭД(МЧД, "ПроверятьТолькоНеподписанные");
		Иначе
			РезультатПроверки = Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("ДоверенностьСсылка", 		МЧД);
		ДополнительныеПараметры.Вставить("ПредыдущиеОшибки", 		ПредыдущиеОшибки);
		ДополнительныеПараметры.Вставить("РезультатПроверки", 		РезультатПроверки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДПослеПодписания",
			ЭтотОбъект, ДополнительныеПараметры);
		
		Если РезультатПроверки = Неопределено ИЛИ РезультатПроверки.Выполнено Тогда
			НастройкиВызова = Новый Структура;
			НастройкиВызова.Вставить("ОтпечатокСертификатаДоверителя", ОтпечатокРуководителя);
			ПодписатьМЧДФНС(ОписаниеОповещения, МЧД,, НастройкиВызова);
			
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует()
		И ТипЗнч(МЧД) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ) Тогда
		
		РезультатыПроверки = ДокументооборотСКОВызовСервера.ПроверитьМЧДЦБ(МЧД);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			МассивОшибок = Новый Массив;
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				МассивОшибок.Добавить(РезультатПроверки.ТекстОшибки);
			КонецЦикла;
			ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
			
			Если ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		ЗапоминаемыеПараметры = Новый Соответствие;
		ЗапоминаемыеПараметры["МЧДОтпечатокРуководителя"] 		= ОтпечатокРуководителя;
		ЗапоминаемыеПараметры["МЧДТолькоПодписание"] 			= Истина;
		ЗапоминаемыеПараметры["МЧДСкрытьДлительнуюОтправку"] 	= Истина;
		ПредыдущиеОшибки = ЗапоминаниеОшибок(Истина,,, ЗапоминаемыеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("ДоверенностьСсылка", 		МЧД);
		ДополнительныеПараметры.Вставить("ПредыдущиеОшибки", 		ПредыдущиеОшибки);
		ДополнительныеПараметры.Вставить("РезультатПроверки", 		РезультатПроверки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДПослеПодписания",
			ЭтотОбъект, ДополнительныеПараметры);
		
		НастройкиВызова = Новый Структура;
		НастройкиВызова.Вставить("ОтпечатокСертификатаДоверителя", ОтпечатокРуководителя);
		ПодписатьМЧДЦБ(ОписаниеОповещения, МЧД,, НастройкиВызова);
		
	Иначе
		Если ОповещениеОЗавершении <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
				Ложь, НСтр("ru = 'Тип машиночитаемой доверенности не поддерживается';
							|en = 'Тип машиночитаемой доверенности не поддерживается'"));
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИспользуетсяРежимТестирования() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	ИспользуетсяРежимТестирования = 
		ПараметрыРаботыКлиента.ДокументооборотСКонтролирующимиОрганами_ИспользуетсяРежимТестирования;
	
	Возврат ИспользуетсяРежимТестирования = Истина;
	
КонецФункции

#Область АудиторскоеЗаключение

&НаКлиенте
Процедура ПодсказкаПоАудиторскомуЗаключениюОбработкаНавигационнойСсылки(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодсказкаПоАудиторскомуЗаключениюНажатие_Завершение", 
		ЭтотОбъект, 
		Форма);
		
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПоАудиторскомуЗаключениюНажатие_Завершение(Результат, Форма) Экспорт
	
	Ссылка = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	Иначе
		КонтекстЭДОКлиент.СоздатьПакетСДопДокуменами(Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаявленияВПФР

&НаКлиенте
Процедура СоздатьНовоеИлиОткрытьЗаявлениеВПФР(
		Вид = Неопределено,
		Организация = Неопределено, 
		Ссылка = Неопределено,
		ЭтоОткрытиеИзМастера = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Организация);
 	ДополнительныеПараметры.Вставить("Вид", Вид);
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Организация", Организация);
 	ЗначенияЗаполнения.Вставить("Вид", Вид);

	ДополнительныеПараметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если ЭтоОткрытиеИзМастера Тогда
		ДополнительныеПараметры.Вставить("ЭтоОткрытиеИзМастера", Истина);
	КонецЕсли;
	
	Если Ссылка <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Ключ", Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаявленияПоЭлДокументооборотуСПФР.ФормаОбъекта", ДополнительныеПараметры,,Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОПредоставленииПолномочийПредставителю

&НаКлиенте
Процедура СоздатьНовоеИлиОткрытьУведомлениеОПредоставленииПолномочийПредставителю(
		Организация = Неопределено,
		Ссылка = Неопределено,
		ЭтоОткрытиеИзМастера = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Организация);
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Организация", Организация);

	ДополнительныеПараметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если Ссылка <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Ключ", Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Документ.УведомлениеОПредоставленииПолномочийПредставителю.ФормаОбъекта", ДополнительныеПараметры,,Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОПрекращенииПолномочийПредставителя

&НаКлиенте
Процедура СоздатьНовоеИлиОткрытьУведомлениеОПрекращенииПолномочийПредставителя(
		Организация = Неопределено,
		Ссылка = Неопределено,
		ЭтоОткрытиеИзМастера = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Организация);
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Организация", Организация);

	ДополнительныеПараметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если Ссылка <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Ключ", Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Документ.УведомлениеОПрекращенииПолномочийПредставителя.ФормаОбъекта", ДополнительныеПараметры,,Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

Функция ЭтоУведомлениеФНС(СсылкаНаОтчет)
	
	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть процедура ЭтоУведомлениеФНС(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);

	ЭтоУведомлениеФНС = Ложь;
	
	ИмяДокументаУведомлениеОКонтролируемыхСделках
		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("УведомлениеОКонтролируемыхСделках");
	ИмяДокументаИсходящееУведомлениеФНС = "УведомлениеОСпецрежимахНалогообложения";
	
	Если (ИмяДокументаУведомлениеОКонтролируемыхСделках <> Неопределено И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаУведомлениеОКонтролируемыхСделках))
		ИЛИ (ИмяДокументаИсходящееУведомлениеФНС <> Неопределено И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаИсходящееУведомлениеФНС)) Тогда
		ЭтоУведомлениеФНС = Истина;
	Иначе
		ЭтоУведомлениеФНС = Ложь;
	КонецЕсли;
	
	Возврат ЭтоУведомлениеФНС;

КонецФункции

Функция ЭтоЖурналСчетовФактурФНС(СсылкаНаОтчет)
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
	
	ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде	= 
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде");
		
	ЭтоЖурналСчетовФактурФНС = Ложь;
		
	Если ТипЗнч(СсылкаНаОтчет) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		ЭтоЖурналСчетовФактурФНС = 
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначениеРеквизитаОбъекта(СсылкаНаОтчет, "ВидОтчета") =
				ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЖурналУчетаСчетовФактур");	
	Иначе	
		
		Если ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде <> Неопределено 
			И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде) Тогда
			
			ЭтоЖурналСчетовФактурФНС = Истина;
		Иначе
			ЭтоЖурналСчетовФактурФНС = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоЖурналСчетовФактурФНС;

КонецФункции

Функция ЭтоРеестрНДС(СсылкаНаОтчет)
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
	
	ЭтоРеестрНДС = Ложь;
		
	Если ТипЗнч(СсылкаНаОтчет) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		
		ВидОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначениеРеквизитаОбъекта(
			СсылкаНаОтчет, 
			"ВидОтчета");
			
		ВидыОтчетов = ДокументооборотСКОКлиентСервер.ВидыОтправляемыхДокументовРеестровНДС();
		
		ЭтоРеестрНДС = ВидыОтчетов.Найти(ВидОтчета) <> Неопределено;
		
	Иначе
		
		ЭтоРеестрНДС = ДокументооборотСКОВызовСервера.ЭтоРегламентированныйОтчетРеестрНДС(СсылкаНаОтчет);
		
	КонецЕсли;
	
	Возврат ЭтоРеестрНДС;

КонецФункции 

Функция ЭтоРеестрАкцизы(СсылкаНаОтчет)
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
	
	ЭтоРеестрАкцизы = Ложь;
	
	Если ТипЗнч(СсылкаНаОтчет) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		
		ВидОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначениеРеквизитаОбъекта(
			СсылкаНаОтчет,
			"ВидОтчета");
			
		ВидыОтчетов = ДокументооборотСКОКлиентСервер.ВидыОтправляемыхДокументовРеестровАкцизов();
		
		ЭтоРеестрАкцизы = ВидыОтчетов.Найти(ВидОтчета) <> Неопределено;
		
	Иначе
		
		ЭтоРеестрАкцизы = ДокументооборотСКОВызовСервера.ЭтоРегламентированныйОтчетРеестрАкцизы(СсылкаНаОтчет);
		
	КонецЕсли;
	
	Возврат ЭтоРеестрАкцизы;
	
КонецФункции

Функция ЭтоЗаявлениеОВвозе(СсылкаНаОтчет)
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);

	ЭтоЗаявлениеОВвозе = Ложь;
	
	ИмяДокументаЗаявлениеОВвозеТоваров = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("ЗаявлениеОВвозеТоваров");
	
	Если ИмяДокументаЗаявлениеОВвозеТоваров <> Неопределено И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаЗаявлениеОВвозеТоваров) Тогда
		ЭтоЗаявлениеОВвозе = Истина;
	Иначе
		ЭтоЗаявлениеОВвозе = Ложь;
	КонецЕсли;
	
	Возврат ЭтоЗаявлениеОВвозе;

КонецФункции

Процедура ВыбратьXMLФайлВОтветНаТребование(ОписаниеОповещения, ДобавлятьФайл = Истина, ДобавлятьПодпись = Истина) Экспорт
	
	ДопустимыеТипыФайлов = "";
	
	Если ДобавлятьФайл Тогда
		ДопустимыеТипыФайлов = "xml;"
	КонецЕсли;
	
	Если ДобавлятьПодпись Тогда
		ДопустимыеТипыФайлов = ДопустимыеТипыФайлов + "sgn;bin;p7s;sign;sig;"
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДопустимыеТипыФайлов", 	ДопустимыеТипыФайлов);
	ДополнительныеПараметры.Вставить("ВозвращатьРазмер", 		Истина);
	ДополнительныеПараметры.Вставить("МножественныйВыбор", 		Ложь);

	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(
		ОписаниеОповещения, 
		Новый УникальныйИдентификатор,
		НСтр("ru = 'Выберите xml-файл и подпись к нему';
			|en = 'Выберите xml-файл и подпись к нему'"),
		ДополнительныеПараметры);
	
КонецПроцедуры

#Область Криптография

Функция РезультатПолучитьСвойстваПрограммыМенеджераКриптографии()
	
	Результат = Новый Структура;
	Результат.Вставить("КриптоПровайдеры", Неопределено);
	Результат.Вставить("Свойства", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("КонфликтКриптопровайдеров", Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСвойстваПрограммыМенеджераКриптографииПослеОпределенияУстановленныхКриптопровайдеров(
	РезультатОпределенияКриптоПровайдеров,
	ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	СвойстваСертификата 		= ДополнительныеПараметры.СвойстваСертификата;
	
	Результат = РезультатПолучитьСвойстваПрограммыМенеджераКриптографии();
	
	Если НЕ РезультатОпределенияКриптоПровайдеров.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОпределенияКриптоПровайдеров.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	КриптоПровайдеры = РезультатОпределенияКриптоПровайдеров.УстановленныеКриптоПровайдеры;
	ДополнительныеПараметры.Вставить("КриптоПровайдеры", КриптоПровайдеры);
	
	Результат.КриптоПровайдеры = КриптоПровайдеры;
	
	КриптопровайдерПоУмолчанию = Неопределено;
	Если КриптоПровайдеры.Количество() = 0 Тогда
		// криптопровайдеры не найдены
		Результат.Свойства = Неопределено;
		Результат.ОписаниеОшибки = НСтр("ru = 'Не обнаружено установленных криптопровайдеров с поддержкой алгоритма подписи ГОСТ Р 34.10-2012.';
										|en = 'Не обнаружено установленных криптопровайдеров с поддержкой алгоритма подписи ГОСТ Р 34.10-2012.'");
		Результат.КонфликтКриптопровайдеров = Ложь;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	ИначеЕсли КриптоПровайдеры.Количество() >= 1 Тогда
		КриптопровайдерПоУмолчанию = КриптоПровайдеры[0];
		Результат.Свойства = КриптопровайдерПоУмолчанию;
		Если КриптоПровайдеры.Количество() > 1 Тогда
			Результат.КонфликтКриптопровайдеров = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("КриптопровайдерПоУмолчанию", КриптопровайдерПоУмолчанию);
	
	// пытаемся определить алгоритм сертификата
	КриптопровайдерСертификата = Неопределено;
	Если СвойстваСертификата <> Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСвойстваПрограммыМенеджераКриптографииПослеВыгрузкиСертификата",
			ЭтотОбъект,
			ДополнительныеПараметры);
			
		СвойстваСертификата.НачатьВыгрузку(Оповещение);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойстваПрограммыМенеджераКриптографииПослеВыгрузкиСертификата(
	ДанныеСертификата,
	ДополнительныеПараметры) Экспорт
	
	Результат 					= ДополнительныеПараметры.Результат;
	ОповещениеОбратногоВызова 	= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	СвойстваСертификата 		= ДополнительныеПараметры.СвойстваСертификата;
	КриптоПровайдеры 			= ДополнительныеПараметры.КриптоПровайдеры;
	КриптопровайдерПоУмолчанию 	= ДополнительныеПараметры.КриптопровайдерПоУмолчанию;
	
	КриптопровайдерСертификата = КриптографияЭДКОСлужебныйВызовСервера.ИзвлечьКриптопровайдер(ДанныеСертификата);
	АлгоритмСертификата =
		КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваСертификата(ДанныеСертификата).АлгоритмПубличногоКлюча;
	ПоддерживаемыеАлгоритмы = КриптографияЭДКОКлиентСервер.ПоддерживаемыеАлгоритмы(Истина);
	АлгоритмСертификатаПоддерживается = ПоддерживаемыеАлгоритмы.Найти(АлгоритмСертификата) <> Неопределено;
	
	Если КриптопровайдерСертификата <> Неопределено Тогда
		
		// в сертификате есть данные по криптопровайдеру
		Если АлгоритмСертификатаПоддерживается Тогда
			
			// в сертификате есть даннные по алгоритму
			КриптопровайдерСертификатаНайденСредиУстановленных = Ложь;
			Для каждого КриптоПровайдер Из КриптоПровайдеры Цикл
				
				// ищем криптопровайдер сертификата среди установленных
				Если КриптопровайдерСертификата.Представление = КриптоПровайдер.Представление Тогда
					Если КриптопровайдерСертификата.Представление =
						КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Представление Тогда
						КриптопровайдерСертификата = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro(АлгоритмСертификата);
						КриптопровайдерСертификатаНайденСредиУстановленных = Истина;
						Прервать;
						
					ИначеЕсли КриптопровайдерСертификата.Представление =
						КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet().Представление Тогда
						КриптопровайдерСертификата = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet(АлгоритмСертификата);
						КриптопровайдерСертификатаНайденСредиУстановленных = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ КриптопровайдерСертификатаНайденСредиУстановленных Тогда
				КриптопровайдерСертификата = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		// криптопровайдер в сертификате не задан
		Если АлгоритмСертификатаПоддерживается Тогда
			
			// используем алгоритм для провайдера по умолчанию
			Если КриптопровайдерПоУмолчанию.Представление =
				КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Представление Тогда
				КриптопровайдерСертификата = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro(АлгоритмСертификата);
				
			ИначеЕсли КриптопровайдерПоУмолчанию.Представление =
				КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet().Представление Тогда
				КриптопровайдерСертификата = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet(АлгоритмСертификата);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КриптопровайдерСертификата <> Неопределено Тогда
		Результат.Свойства = КриптопровайдерСертификата;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);

КонецПроцедуры

Функция ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию()
	
	ТекстПодсказки = НСтр("ru = 'Для подписания можно использовать любой действующий квалифицированный сертификат с алгоритмом подписи ГОСТ Р 34.10-2012';
							|en = 'Для подписания можно использовать любой действующий квалифицированный сертификат с алгоритмом подписи ГОСТ Р 34.10-2012'");
	Возврат Новый Структура(
		"Текст, Режим, Цвет",
		ТекстПодсказки,
		ОтображениеПодсказки.Кнопка,
		Новый Цвет);

КонецФункции

Процедура ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры)
	
	СвойстваСертификата = ДополнительныеПараметры.СвойстваСертификата;
	
	ТипЗнчСвойстваСертификата = ТипЗнч(СвойстваСертификата);
	
	Если ТипЗнчСвойстваСертификата <> Тип("Структура") И ТипЗнчСвойстваСертификата <> Тип("Соответствие") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ПараметрыСертификата = Новый Структура();
		ПараметрыСертификата.Вставить("Отпечаток", СвойстваСертификата);
		
		НайтиСертификат(ОписаниеОповещения, ПараметрыСертификата);
		
	Иначе
		
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(СвойстваСертификата, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата(Результат, ВходящиеПараметры) Экспорт
	
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	Форма 									= ВходящиеПараметры.Форма;
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	СвойстваСертификата 					= ВходящиеПараметры.СвойстваСертификата;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	
	Если Результат.СертификатНайден Тогда
				
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Результат.СвойстваСертификата, ВходящиеПараметры);
		
	Иначе
		
		ПолеВвода.ЦветТекста 						= Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = СвойстваСертификата;
		ПолеВвода.РасширеннаяПодсказка.Заголовок 	= Новый ФорматированнаяСтрока(
			НСтр("ru = 'Сертификат не зарегистрирован в системном хранилище сертификатов';
				|en = 'Сертификат не зарегистрирован в системном хранилище сертификатов'"),,
			Новый Цвет(255, 0, 0));
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Знач СвойстваСертификата, ВходящиеПараметры)
	
	ВходящиеПараметры.Вставить("СвойстваСертификата", СвойстваСертификата);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОтобразитьОдинСертификатВПолеВводаПослеПолученияДвоичныхДанныхСертификата",
		ЭтотОбъект,
		ВходящиеПараметры);
		
	СвойстваСертификата.НачатьВыгрузку(Оповещение)
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПослеПолученияДвоичныхДанныхСертификата(ВыгруженныеДанные, ВходящиеПараметры) Экспорт
	
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	Форма 									= ВходящиеПараметры.Форма;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	СвойстваСертификата 					= ВходящиеПараметры.СвойстваСертификата;
	
	ПредставлениеСертификата = ПолноеПредставлениеСертификата(СвойстваСертификата);
	
	ДополнительныеСвойстваСертификата = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваСертификата(ВыгруженныеДанные);
	
	ТекДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ТекДата > СвойстваСертификата.ДатаОкончания Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата истек';
				|en = 'Срок действия сертификата истек'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ИначеЕсли ТекДата < СвойстваСертификата.ДатаНачала Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата еще не наступил';
				|en = 'Срок действия сертификата еще не наступил'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	ИначеЕсли КриптографияЭДКОКлиентСервер.ПоддерживаемыеАлгоритмы(Истина).Найти(
		ДополнительныеСвойстваСертификата.АлгоритмПубличногоКлюча) = Неопределено Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Алгоритм подписи сертификата не соответствует требованиям, требуется сертификат с алгоритмом подписи ГОСТ Р 34.10-2012';
				|en = 'Алгоритм подписи сертификата не соответствует требованиям, требуется сертификат с алгоритмом подписи ГОСТ Р 34.10-2012'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	Иначе
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		ПараметрыПодсказки = ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию();
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр(СтрШаблон("ru = '%1'", ПараметрыПодсказки.Текст)),,
			ПараметрыПодсказки.Цвет);
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ПараметрыПодсказки.Режим;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПолучитьСертификаты()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Сертификаты", Новый Массив);
	Результат.Вставить("ДополнительныеСвойстваСертификатов", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСертификатыПослеПолученияСвойствПрограммыДляМенеджераКриптографии(РезультатПолученияСвойств, ДополнительныеПараметры) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
			СтрШаблон(НСтр("ru = 'Ошибка получения сертификатов по причине: %1';
							|en = 'Ошибка получения сертификатов по причине: %1'"), РезультатПолученияСвойств.ОписаниеОшибки));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СоздатьМенеджерКриптографии(ОписаниеОповещенияПродолжения,
		РезультатПолученияСвойств.Свойства);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ТипХранилища = ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты;
	РасположениеХранилища = РасположениеХранилищаСертификатовКриптографии.ДанныеПользователяОС;
	
	Если НЕ Результат.Выполнено Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
			НСтр("ru = 'Ошибка создания менеджера криптографии при получении списка сертификатов.';
				|en = 'Ошибка создания менеджера криптографии при получении списка сертификатов.'"));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьСертификатыПослеПолученияХранилищаСертификатов",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Оповещение, ТипХранилища, РасположениеХранилища);

КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияХранилищаСертификатов(Хранилище, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолученияВсехСертификатовИзХранилищаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Хранилище.НачатьПолучениеВсех(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияВсехСертификатовИзХранилищаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Сертификаты", Результат);
	ДополнительныеПараметры.Вставить("ИндексСертификата", 0);
	
	ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ИндексСертификата = ДополнительныеПараметры.ИндексСертификата;
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОписаниеОповещения;
	ДополнительныеСвойстваСертификатов =ДополнительныеПараметры.ДополнительныеСвойстваСертификатов;
	
	Если ИндексСертификата = Сертификаты.Количество() Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		РезультатВыполнения.Выполнено = Истина;
		РезультатВыполнения.Сертификаты = Сертификаты;
		РезультатВыполнения.ДополнительныеСвойстваСертификатов = ДополнительныеСвойстваСертификатов;
		
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, РезультатВыполнения);
	Иначе
		ДополнительныеПараметры.ИндексСертификата = ИндексСертификата;
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСертификатыПослеПолученияДвоичныхДанныхСертификатаЦикл",
			ЭтотОбъект,
			ДополнительныеПараметры);
		СвойстваСертификата = Сертификаты[ИндексСертификата];
		СвойстваСертификата.НачатьВыгрузку(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияДвоичныхДанныхСертификатаЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ИндексСертификата = ДополнительныеПараметры.ИндексСертификата;
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	
	ДополнительныеСвойства = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваСертификата(Результат);
	ДополнительныеПараметры.ДополнительныеСвойстваСертификатов.Вставить(
		Сертификаты[ИндексСертификата].Отпечаток,
		ДополнительныеСвойства);
	
	ИндексСертификата = ИндексСертификата + 1;
	ДополнительныеПараметры.ИндексСертификата = ИндексСертификата;
	ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НайтиСертификат(ОписаниеОповещения, ПараметрыСертификата)
	
	НайтиСертификатПоОтпечатку(ОписаниеОповещения, ПараметрыСертификата.Отпечаток);
	
КонецПроцедуры

Функция ПолноеПредставлениеСертификата(СвойстваСертификата)
	
	СертификатДействителенС 	= СвойстваСертификата.ДатаНачала;
	СертификатДействителенПо 	= СвойстваСертификата.ДатаОкончания;
	
	Если ТипЗнч(СертификатДействителенС) = Тип("Строка") Тогда 
		СертификатДействителенС = СтрЗаменить(СертификатДействителенС, Символ(10), "");
	КонецЕсли;
		
	Если ТипЗнч(СертификатДействителенПо) = Тип("Строка") Тогда 
		СертификатДействителенПо = СтрЗаменить(СертификатДействителенПо, Символ(10), "");
	КонецЕсли;
	
	Наименование = НаименованиеСертификата(СвойстваСертификата);
	Возврат СокрЛП(Наименование) + " (" + СертификатДействителенС + " - " + СертификатДействителенПо + ")";
	
КонецФункции

Функция РезультатСоздатьМенеджерКриптографии()
	
	Результат = Новый Структура;
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ИмяМодуля", "");
	Результат.Вставить("АлгоритмыПодписи", Неопределено);

	Возврат Результат;
	
КонецФункции

Функция РезультатОпределитьУстановленныеКрипторовайдеры()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("УстановленныеКриптопровайдеры", Новый Массив);
	Результат.Вставить("ПоддерживаетсяГОСТ2012", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Возврат Результат;
	
КонецФункции

Процедура ПослеСозданияМенеджераКриптографииЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	УстановленныеКриптопровайдеры = ДополнительныеПараметры.УстановленныеКриптопровайдеры;
	ТекущийКриптопровайдер = ДополнительныеПараметры.ТекущийКриптопровайдер;
	КриптоПровайдеры = ДополнительныеПараметры.КриптоПровайдеры;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если Результат.Выполнено Тогда
		// Могут создаваться криптопровайдеры с другим именем, например, вместо Криптопро создается Vipnet.
		Если Результат.ИмяМодуля = КриптоПровайдеры[ТекущийКриптопровайдер].Имя Тогда
			КриптоПровайдер = КриптоПровайдеры[ТекущийКриптопровайдер];
			УстановленныеКриптопровайдеры.Добавить(КриптоПровайдер);
			Если КриптоПровайдер.Алгоритм = "GOST R 34.10-2012-256" Тогда
				ДополнительныеПараметры.ПоддерживаетсяГОСТ2012 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КриптоПровайдеры.Количество() - 1 = ТекущийКриптопровайдер Тогда
		// Проверили все криптопровайдеры.
		Результат = РезультатОпределитьУстановленныеКрипторовайдеры();
		Результат.УстановленныеКриптопровайдеры = УстановленныеКриптопровайдеры;
		Результат.Выполнено = Истина;
		Результат.ПоддерживаетсяГОСТ2012 = ДополнительныеПараметры.ПоддерживаетсяГОСТ2012;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	Иначе
		// Проверяем следующий криптопровайдер из массива.
		ТекущийКриптопровайдер  = ТекущийКриптопровайдер + 1; 
		ДополнительныеПараметры.ТекущийКриптопровайдер = ТекущийКриптопровайдер;
		Оповещение = Новый ОписаниеОповещения("ПослеСозданияМенеджераКриптографииЦикл", ЭтотОбъект, ДополнительныеПараметры);
		СоздатьМенеджерКриптографии(Оповещение, Криптопровайдеры[ТекущийКриптопровайдер]);
	КонецЕсли; 
	
КонецПроцедуры

// продолжение процедуры СоздатьМенеджерКриптографии
Процедура СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	СвойстваПрограммы = Контекст.СвойстваПрограммы;
	
	Если НЕ Подключено Тогда
		Если Контекст.БылаПопыткаУстановкиРасширения Тогда
			РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"СоздатьМенеджерКриптографииПослеУстановкиРасширенияРаботыСКриптографией",
				ЭтотОбъект,
				Контекст);
			НачатьУстановкуРасширенияРаботыСКриптографией(ОписаниеОповещения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	Контекст.МенеджерКриптографии = Новый МенеджерКриптографии;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииЦиклПослеИнициализацииЗавершение",
		ЭтотОбъект,
		Контекст,
		"СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации",
		ЭтотОбъект);
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если НЕ Контекст.ИнтерактивныйРежимКриптографии
		ИЛИ ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.24.0") < 0
		ИЛИ ОбщегоНазначенияКлиент.ЭтоMacOSКлиент() Тогда
		
		Контекст.МенеджерКриптографии.НачатьИнициализацию(ОписаниеОповещения,
			СвойстваПрограммы.Имя,
			СвойстваПрограммы.Путь,
			СвойстваПрограммы.Тип);
		
	Иначе
		#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
			Контекст.МенеджерКриптографии.НачатьИнициализацию(ОписаниеОповещения,
				СвойстваПрограммы.Имя,
				СвойстваПрограммы.Путь,
				СвойстваПрограммы.Тип);
		#Иначе
			Контекст.МенеджерКриптографии.НачатьИнициализацию(ОписаниеОповещения,
				СвойстваПрограммы.Имя,
				СвойстваПрограммы.Путь,
				СвойстваПрограммы.Тип,
				Вычислить("ИспользованиеИнтерактивногоРежимаКриптографии.Использовать"));
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// продолжение процедуры СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией
Процедура СоздатьМенеджерКриптографииПослеУстановкиРасширенияРаботыСКриптографией(Контекст) Экспорт

	Контекст.БылаПопыткаУстановкиРасширения = Истина;
	// пытаемся ещё раз подключить расширение
	НачатьПодключениеРасширенияРаботыСКриптографией(
		Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией",
			ЭтотОбъект,
			Контекст));

КонецПроцедуры
 
// Продолжение процедуры СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией, ошибка.
Процедура СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
	РезультатВыполнения.ИнформацияОбОшибке = ИнформацияОбОшибке;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПослеИнициализацииЗавершение(Результат, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеПолученияИнформацииОМодуле",
		ЭтотОбъект,
		Контекст);
		
	Контекст.МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(Оповещение);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПолученияИнформацииОМодуле(ИнформацияМодуля, Контекст) Экспорт
	
	Алгоритмы = Контекст.Алгоритмы;
	МенеджерКриптографии = Контекст.МенеджерКриптографии;
	
	Если Алгоритмы <> Неопределено Тогда
		// переопределяем алгоритмы
		МенеджерКриптографии.АлгоритмПодписи = Алгоритмы.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования  = Алгоритмы.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования = Алгоритмы.АлгоритмШифрования;
	КонецЕсли;
	
	РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
	РезультатВыполнения.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	РезультатВыполнения.Выполнено = Истина;
	РезультатВыполнения.ИмяМодуля = ИнформацияМодуля.Имя;
	РезультатВыполнения.АлгоритмыПодписи = ИнформацияМодуля.АлгоритмыПодписи;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
	
КонецПроцедуры

Функция РезультатПоискаСертификата()
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Выполнено", Ложь);
	РезультатПоиска.Вставить("СвойстваСертификата", Неопределено);
	РезультатПоиска.Вставить("СертификатНайден", Ложь);
	РезультатПоиска.Вставить("МенеджерКриптографии", Неопределено);
	
	Возврат РезультатПоиска;
	
КонецФункции

Процедура ПоискСертификатаПослеПолученияСвойствМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если Результат.Свойства = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
			СтрШаблон(НСтр("ru = 'Сертификат криптографии не найден по причине: %1';
							|en = 'Сертификат криптографии не найден по причине: %1'", Результат.ОписаниеОшибки)));
		РезультатПоиска = РезультатПоискаСертификата();
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещения, РезультатПоиска);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		Контекст);
	
	СвойстваПрограммы = Результат.Свойства;
	СоздатьМенеджерКриптографии(ОписаниеОповещения, СвойстваПрограммы);
	
КонецПроцедуры

Процедура ПоискСертификатаПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	ТипХранилища = Контекст.ТипХранилища;

	РасположениеХранилища = РасположениеХранилищаСертификатовКриптографии.ДанныеПользователяОС;
	
	Если НЕ Результат.Выполнено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Ошибка создания менеджера криптографии!';
															|en = 'Ошибка создания менеджера криптографии!'"));
		
		РезультатПоиска = РезультатПоискаСертификата();
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещения, РезультатПоиска);
		Возврат;
	КонецЕсли; 
	
	Контекст.МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	Оповещение = Новый ОписаниеОповещения("ПоискСертификатаПослеПолученияХранилищаСертификатов", ЭтотОбъект, Контекст);
	Контекст.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Оповещение, ТипХранилища, РасположениеХранилища);
	
КонецПроцедуры

Процедура ПоискСертификатаПослеПолученияХранилищаСертификатов(Хранилище, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПоискСертификатаПослеПоискаЗавершение", ЭтотОбъект, Контекст);
	Если Контекст.ВидПоиска = "ПоОтпечатку" Тогда
		Хранилище.НачатьПоискПоОтпечатку(Оповещение, Контекст.Идентификатор);
	ИначеЕсли Контекст.ВидПоиска = "ПоСерийномуНомеру" Тогда
		Хранилище.НачатьПоискПоСерийномуНомеру(Оповещение, Контекст.Идентификатор);
	Иначе
		ВызватьИсключение "Неизвестный вид поиска сертификата.";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискСертификатаПослеПоискаЗавершение(СвойстваСертификата, Контекст) Экспорт 
	
	РезультатПоиска = РезультатПоискаСертификата();
	РезультатПоиска.Выполнено = Истина;
	РезультатПоиска.СвойстваСертификата = СвойстваСертификата;
	РезультатПоиска.СертификатНайден = СвойстваСертификата <> Неопределено;
	РезультатПоиска.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	
	ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещения, РезультатПоиска);
	
КонецПроцедуры

Функция РезультатПроверитьСертификат()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Выполнено", Ложь);
	РезультатПроверки.Вставить("ОписаниеОшибки", "");
	РезультатПроверки.Вставить("Валиден", Неопределено);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьСертификатПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		РезультатПроверки = РезультатПроверитьСертификат();
		РезультатПроверки.Выполнено = Ложь;
		РезультатПроверки.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		РезультатПроверки.Валиден = Неопределено;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СвойстваПрограммы = РезультатПолученияСвойств.Свойства;
	СоздатьМенеджерКриптографии(ОписаниеОповещения, СвойстваПрограммы);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.ОписаниеОповещения;
	СвойстваСертификатаИлиОтпечаток = ДополнительныеПараметры.СвойстваСертификатаИлиОтпечаток;
	
	Если НЕ Результат.Выполнено Тогда
		РезультатПроверки = РезультатПроверитьСертификат();
		РезультатПроверки.Выполнено = Ложь;
		РезультатПроверки.ОписаниеОшибки = "Менеджер криптографии не создан!";
		РезультатПроверки.Валиден = Ложь;
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
		Возврат;
	КонецЕсли; 
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПоискаСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Если ТипЗнч(СвойстваСертификатаИлиОтпечаток) = Тип("СертификатКриптографии") Тогда
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("СертификатНайден", Истина);
		Результат.Вставить("СвойстваСертификата", СвойстваСертификатаИлиОтпечаток);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	Иначе
		НайтиСертификатПоОтпечатку(ОписаниеОповещения, СвойстваСертификатаИлиОтпечаток, МенеджерКриптографии);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПоискаСертификата(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	
	Если НЕ РезультатПоиска.СертификатНайден Тогда
		РезультатПроверки = РезультатПроверитьСертификат();
		РезультатПроверки.Выполнено = Ложь;
		РезультатПроверки.ОписаниеОшибки = "Сертификат не найден.";
		РезультатПроверки.Валиден = Ложь;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	РежимПроверки = Новый Массив;
	РежимПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	РежимПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьВремяДействия);
	
	СвойстваСертификата = РезультатПоиска.СвойстваСертификата;
	ДополнительныеПараметры.Вставить("СвойстваСертификата", СвойстваСертификата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПроверкиСертификатаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры,
		"ПроверитьСертификатПослеПроверкиСертификатаОшибка",
		ЭтотОбъект);
	МенеджерКриптографии.НачатьПроверкуСертификата(ОписаниеОповещения, СвойстваСертификата, РежимПроверки);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПроверкиСертификатаЗавершение(ДополнительныеПараметры) Экспорт
	
	РезультатПроверки = РезультатПроверитьСертификат();
	РезультатПроверки.Выполнено = Истина;
	РезультатПроверки.ОписаниеОшибки = "";
	РезультатПроверки.Валиден = Истина;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);

КонецПроцедуры

Процедура ПроверитьСертификатПослеПроверкиСертификатаОшибка(ИнформацияОбОшибке, СтандартнаяОбработка,
		ДополнительныеПараметры) Экспорт
	
	ВыводитьСообщения = ДополнительныеПараметры.ВыводитьСообщения;
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
	
	РезультатПроверки = РезультатПроверитьСертификат();
	РезультатПроверки.Выполнено = Ложь; 
	РезультатПроверки.ОписаниеОшибки = ОписаниеОшибки;
	РезультатПроверки.Валиден = Ложь;
	
	Если ВыводитьСообщения Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПоискаСертификата(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	
	Если НЕ РезультатПоиска.СертификатНайден Тогда
		Если ВыводитьСоообщения Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сертификат не найден!';
																|en = 'Сертификат не найден!'"));
		КонецЕсли;
		РезультатЭкспорта = Новый Структура;
		РезультатЭкспорта.Вставить("Выполнено", Ложь);
		РезультатЭкспорта.Вставить("ИмяФайлаСертификата", "");
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатЭкспорта);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СертификатКриптографии", РезультатПоиска.СвойстваСертификата);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеПолученияВременногоКаталога",
		ЭтотОбъект,
		ДополнительныеПараметры);
	НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПолученияВременногоКаталога(ИмяКаталогаВременныхФайлов,
		ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	
	ДополнительныеПараметры.Вставить("ИмяКаталогаВременныхФайлов", ИмяКаталогаВременныхФайлов);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеВыгрузкиСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	СертификатКриптографии.НачатьВыгрузку(Оповещение);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеВыгрузкиСертификата(ВыгруженныеДанные, ДополнительныеПараметры) Экспорт 
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ИмяФайлаИлиРасширение = ДополнительныеПараметры.ИмяФайлаИлиРасширение;
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеЗаписиФайлаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПолноеИмяФайла = ИмяКаталогаВременныхФайлов + ИмяФайлаИлиРасширение;
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	
	ВыгруженныеДанные.НачатьЗапись(Оповещение, ПолноеИмяФайла);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеЗаписиФайлаЗавершение(ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	
	РезультатЭкспорта = Новый Структура;
	РезультатЭкспорта.Вставить("Выполнено", Истина);
	РезультатЭкспорта.Вставить("ИмяФайлаСертификата", ПолноеИмяФайла);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатЭкспорта);
	
КонецПроцедуры

Функция РезультатПодписать()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ФайлПодписи", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодписатьПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, Контекст) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		Контекст);
	
	СвойстваПрограммыКриптографии = РезультатПолученияСвойств.Свойства;
	Контекст.СвойстваПрограммыКриптографии = СвойстваПрограммыКриптографии;
	СоздатьМенеджерКриптографии(
		Оповещение,
		СвойстваПрограммыКриптографии,,
		Контекст.ИнтерактивныйРежимКриптографии);
	
КонецПроцедуры

Процедура ПодписатьПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка создания менеджера криптографии.';
										|en = 'Ошибка создания менеджера криптографии.'");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	Контекст.МенеджерКриптографии = МенеджерКриптографии;
	
	Если НЕ Контекст.ИнтерактивныйРежимКриптографии Тогда
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Контекст.ПарольДоступаКЗакрытомуКлючу;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодписатьПослеПодписи",
		ЭтотОбъект,
		Контекст,
		"ПодписатьПослеПодписиОшибка",
		ЭтотОбъект);
	
	Если Контекст.ВключатьМеткуВремени И Контекст.ПлатформаПоддерживаетМеткуВремени Тогда
		АдресаСерверовМетокВремени = ДокументооборотСКОВызовСервера.АдресаСерверовМетокВремени();
		МенеджерКриптографии.АдресаСерверовМетокВремени = АдресаСерверовМетокВремени;
		#Если МобильныйКлиент Тогда
			МенеджерКриптографии.НачатьПодписывание(
				Оповещение,
				Контекст.Данные,
				Контекст.СвойстваСертификата);
		#Иначе
			МенеджерКриптографии.НачатьПодписывание(
				Оповещение,
				Контекст.Данные,
				Контекст.СвойстваСертификата,
				ТипПодписиКриптографии.CAdEST);
		#КонецЕсли
		
	Иначе
		МенеджерКриптографии.НачатьПодписывание(Оповещение, Контекст.Данные, Контекст.СвойстваСертификата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеПодписи(ПодписанныеДанные, Контекст) Экспорт
	
	Если ТипЗнч(ПодписанныеДанные) = Тип("Структура") ИЛИ ТипЗнч(ПодписанныеДанные) = Тип("ФиксированнаяСтруктура") Тогда
		РезультатВыполнения = ПодписанныеДанные;
		Если НЕ РезультатВыполнения.Выполнено Тогда
			Результат = РезультатПодписать();
			Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка при подписании';
											|en = 'Ошибка при подписании'");
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
			Возврат;
		КонецЕсли;
		
		ПодписанныеДанныеИлиАдрес = РезультатВыполнения.ФайлПодписи;
		
	Иначе
		ПодписанныеДанныеИлиАдрес = ПодписанныеДанные;
	КонецЕсли;
	
	Если НЕ Контекст.ВключатьМеткуВремени ИЛИ Контекст.ПлатформаПоддерживаетМеткуВремени Тогда
		Результат = РезультатПодписать();
		Результат.Выполнено = Истина;
		Результат.ФайлПодписи = ?(ТипЗнч(ПодписанныеДанныеИлиАдрес) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(ПодписанныеДанныеИлиАдрес), ПолучитьИзВременногоХранилища(ПодписанныеДанныеИлиАдрес),
			ПодписанныеДанныеИлиАдрес);
		Результат.ОписаниеОшибки = "";
		Результат.МенеджерКриптографии = Контекст.МенеджерКриптографии;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПодписанныеДанныеИлиАдрес", ПодписанныеДанныеИлиАдрес);
	
	Настройки = Новый Структура("ПрочитатьПодпись", Истина);
	СвойстваКриптосообщения = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваКриптосообщения(
		ПодписанныеДанныеИлиАдрес,
		Настройки);
	Если НЕ СвойстваКриптосообщения.Свойство("Подписанты") ИЛИ СвойстваКриптосообщения.Подписанты.Количество() = 0
		ИЛИ НЕ СвойстваКриптосообщения.Подписанты[0].Свойство("Подпись")
		ИЛИ СвойстваКриптосообщения.Подписанты[0].Подпись = Неопределено Тогда
		
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = НСтр("ru = 'Сбой формата подписи';
										|en = 'Сбой формата подписи'");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	АдресПодписи = ПоместитьВоВременноеХранилище(СвойстваКриптосообщения.Подписанты[0].Подпись,
		Новый УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьПослеХешированияПодписи", ЭтотОбъект, Контекст);
	КриптографияЭДКОКлиент.ХешироватьДанные(
		Оповещение,
		Контекст.МестоХраненияКлючаДляХеширования,
		АдресПодписи,,
		Истина,,
		"GOST R 34.10-2012-256",
		Истина);
	
КонецПроцедуры

Процедура ПодписатьПослеХешированияПодписи(Результат, Контекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = НСтр("ru = 'Сбой хеширования при подписи';
										|en = 'Сбой хеширования при подписи'");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = РезультатПодписать();
	РезультатВыполнения.Выполнено = Истина;
	РезультатВыполнения.ФайлПодписи = КриптографияЭДКОСлужебныйВызовСервера.ДобавитьШтампВремени(
		Контекст.ПодписанныеДанныеИлиАдрес,
		Результат.Хеш);
	РезультатВыполнения.ОписаниеОшибки = "";
	РезультатВыполнения.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, РезультатВыполнения);
	
КонецПроцедуры

Процедура ПодписатьПослеПодписиОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	МенеджерКриптографии = Контекст.МенеджерКриптографии;
	ОповещениеЗавершенияПодписи = Контекст.ОповещениеЗавершенияПодписи;
	
	СтандартнаяОбработка = Ложь;
	Результат = РезультатПодписать();
	Результат.МенеджерКриптографии = МенеджерКриптографии;
	
	ОписаниеОшибки = ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
	
	ЗаписатьСобытия = Истина;
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		НСтр("ru = 'Электронный документооборот с контролирующими органами';
			|en = 'Электронный документооборот с контролирующими органами'"),
		"Ошибка",
		СтрШаблон("%1: %2", НСтр("ru = 'Ошибка при подписывании файла отчета';
								|en = 'Ошибка при подписывании файла отчета'"), ОписаниеОшибки),
		"",
		ЗаписатьСобытия);
	
	Если СтрНайти(ОписаниеОшибки, "Сертификат, связанный с закрытым ключом, указывает на модуль криптографии, отличный от текущего") > 0 Тогда
		// нарушение стандарта № 499 пункт 3.2
		// делаем подмену типа криптопровайдера в случе неправильной установки сертификата
		
		// запоминаем нужные алгоритмы
		Алгоритмы = Новый Структура("АлгоритмПодписи, АлгоритмШифрования, АлгоритмХеширования");;
		Алгоритмы.АлгоритмПодписи = МенеджерКриптографии.АлгоритмПодписи;
		Алгоритмы.АлгоритмШифрования = МенеджерКриптографии.АлгоритмШифрования;
		Алгоритмы.АлгоритмХеширования = МенеджерКриптографии.АлгоритмХеширования;
		
		// определяем имя криптопровайдера
		Подстрока = "Сертификат связан с модулем криптографии """;
		ПозицияНачало = СтрНайти(ОписаниеОшибки, Подстрока) + СтрДлина(Подстрока);
		Подстрока = """ с типом ";
		ПозицияКонец = СтрНайти(ОписаниеОшибки, Подстрока);
		Имя = Сред(ОписаниеОшибки, ПозицияНачало, ПозицияКонец - ПозицияНачало);
		// определяем тип криптопровайдера
		ПозицияНачало = СтрНайти(ОписаниеОшибки, Подстрока)+ СтрДлина(Подстрока); 
		ПозицияКонец = СтрДлина(ОписаниеОшибки);
		Тип = Сред(ОписаниеОшибки, ПозицияНачало, ПозицияКонец - ПозицияНачало);
		Тип = Число(Тип);
		
		НеизвестныйКриптопровайдер = Ложь;
		ТребуетсяДругойКриптопровайдер = Ложь;
		
		Если Найти(Имя, "Infotecs") > 0 Тогда
			Свойства = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet();
		ИначеЕсли Найти(Имя, "Crypto-Pro") > 0 Тогда
			Свойства = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro();
		Иначе
			НеизвестныйКриптопровайдер = Истина;
		КонецЕсли;
		
		Если Свойства.ТипКриптопровайдера <> Контекст.СвойстваПрограммыКриптографии.ТипКриптопровайдера Тогда
			ТребуетсяДругойКриптопровайдер = Истина;
		КонецЕсли;
		
		Если НеизвестныйКриптопровайдер
			ИЛИ ТребуетсяДругойКриптопровайдер
			ИЛИ Контекст.ПопыткаПодписиПослеПодменыАлгоритмов Тогда
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				Результат.ОписаниеОшибки = ОписаниеОшибки;
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
			Возврат;
		КонецЕсли;
		
		Контекст.ПопыткаПодписиПослеПодменыАлгоритмов = Истина;
		
		// подменяем тип криптопровайдера
		СвойстваПрограммыКриптографии = Новый Структура(Свойства);
		СвойстваПрограммыКриптографии.Тип = Тип;
		СвойстваПрограммыКриптографии.Имя = Имя;
		
		СвойстваПрограммыКриптографии = Новый ФиксированнаяСтруктура(СвойстваПрограммыКриптографии);
		
		Оповещение = Новый ОписаниеОповещения("ПодписатьПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
		СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммыКриптографии, Алгоритмы);
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = ДополнитьИнформациюПоОшибкеКриптографии(ОписаниеОшибки);

	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеЗавершенияПодписи, Результат);
	
КонецПроцедуры

Функция ДополнитьИнформациюПоОшибкеКриптографии(Знач ОписаниеОшибки)
	
	// нарушение стандарта № 499 пункт 3.2
	// необходимо вывести пользователю возможную причину возникновения ошибки
	// ищем ошибки криптопровайдера ViPNet и добавляем осмысленные комментарии
	Если Найти(ОписаниеОшибки, "Модуль криптографии не может выполнить требуемое действие, т.к. контекст был получен в ограниченном режиме") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Возможно, не указан пароль контейнера закрытого ключа.';
															|en = 'Возможно, не указан пароль контейнера закрытого ключа.'");
	ИначеЕсли Найти(ОписаниеОшибки, "Ошибка при формировании данных подписи (0x00000056)") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Возможно, указан неверный пароль контейнера закрытого ключа.';
															|en = 'Возможно, указан неверный пароль контейнера закрытого ключа.'");
	ИначеЕсли Найти(ОписаниеОшибки, "Сертификат, связанный с закрытым ключом, указывает на модуль криптографии, отличный от текущего") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Возможно, сертификат криптографии был установлен неправильно.';
															|en = 'Возможно, сертификат криптографии был установлен неправильно.'");
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

#КонецОбласти

#Область МашиночитаемыеДоверенности

Процедура НастроитьМЧДФНС(
		ОповещениеОЗавершении = Неопределено,
		ПроверяемыеМЧДФНС = Неопределено,
		ВыбранныеОрганизации = Неопределено) Экспорт
	
	Если ПараметрыПриложения["ДокументооборотСКОКлиент.ИзменилсяСтатусМЧДФНС"] <> Ложь Тогда
		ПараметрыПриложения["ДокументооборотСКОКлиент.ИзменилсяСтатусМЧДФНС"] = Ложь;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		Контекст.Вставить("ПроверяемыеМЧДФНС", 		ПроверяемыеМЧДФНС);
		Контекст.Вставить("ВыбранныеОрганизации", 	ВыбранныеОрганизации);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьМЧДФНСПослеПодключения", ЭтотОбъект, Контекст);
		
		ПодключитьЗарегистрированныеМЧДФНС(
			ОписаниеОповещения,,
			ПроверяемыеМЧДФНС,
			ВыбранныеОрганизации);
		
	ИначеЕсли ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьМЧДФНСПослеПодключения(Результат, Контекст) Экспорт
	
	ОтключитьНедействительныеМЧДФНС(
		Контекст.ОповещениеОЗавершении,,
		Контекст.ПроверяемыеМЧДФНС,
		Контекст.ВыбранныеОрганизации);
	
КонецПроцедуры

Процедура ПодключитьЗарегистрированныеМЧДФНС(
		ОповещениеОЗавершении = Неопределено,
		Контекст = Неопределено,
		ПроверяемыеМЧДФНС = Неопределено,
		ВыбранныеОрганизации = Неопределено,
		ЭтоПодключениеИзПанели = Ложь) Экспорт
	
	Если Контекст = Неопределено Тогда
		ЗарегистрированныеДоверенности = ДокументооборотСКОВызовСервера.ЗарегистрированныеМЧДФНС(
			?(ЭтоПодключениеИзПанели, Ложь, Неопределено),
			ПроверяемыеМЧДФНС,
			ВыбранныеОрганизации);
		ИндексДоверенности = 0;
		Контекст = Новый Структура;
		Контекст.Вставить("ЗарегистрированныеДоверенности", ЗарегистрированныеДоверенности);
		Контекст.Вставить("ИндексДоверенности", 			0);
		Контекст.Вставить("ОповещениеОЗавершении", 			ОповещениеОЗавершении);
	КонецЕсли;
	
	Пока Контекст.ИндексДоверенности < Контекст.ЗарегистрированныеДоверенности.Количество()
		И Контекст.ЗарегистрированныеДоверенности[Контекст.ИндексДоверенности].ДоверенностьЕстьВРегистрациях Цикл
		Контекст.ИндексДоверенности = Контекст.ИндексДоверенности + 1;
	КонецЦикла;
	
	Если Контекст.ИндексДоверенности >= Контекст.ЗарегистрированныеДоверенности.Количество() Тогда
		Если Контекст.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьЗарегистрированныеМЧДФНСПослеПодключения",
		ЭтотОбъект, Контекст);
	ДоверенностьИзвестна = ?(ТипЗнч(ПроверяемыеМЧДФНС) = Тип("Массив")
		ИЛИ ТипЗнч(ПроверяемыеМЧДФНС) = Тип("ФиксированныйМассив"),
		ПроверяемыеМЧДФНС.Количество() = 1, ПроверяемыеМЧДФНС <> Неопределено);
	КоличествоДоверенностей = Контекст.ЗарегистрированныеДоверенности.Количество();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоДоверенностей", КоличествоДоверенностей);
	ПараметрыФормы.Вставить("СвойстваДоверенности",
		Контекст.ЗарегистрированныеДоверенности[Контекст.ИндексДоверенности]);
	ПараметрыФормы.Вставить("ДоверенностьИзвестна", ДоверенностьИзвестна);
	ПараметрыФормы.Вставить("ЭтоПодключениеИзПанели", ЭтоПодключениеИзПанели);
	
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.Форма.ФормаПодключенияМЧД",
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПодключитьЗарегистрированныеМЧДФНСПослеПодключения(Результат, Контекст) Экспорт
	
	Контекст.ИндексДоверенности = Контекст.ИндексДоверенности + 1;
	ПодключитьЗарегистрированныеМЧДФНС(, Контекст);
	
КонецПроцедуры

Процедура ОтключитьНедействительныеМЧДФНС(
		ОповещениеОЗавершении = Неопределено,
		Контекст = Неопределено,
		ПроверяемыеМЧДФНС = Неопределено,
		ВыбранныеОрганизации = Неопределено,
		ЭтоОтключениеИзПанели = Ложь,
		СтатусМЧДФНС = Неопределено) Экспорт
	
	Если Контекст = Неопределено Тогда
		НедействительныеДоверенности = ДокументооборотСКОВызовСервера.НедействительныеМЧДФНС(
			?(ЭтоОтключениеИзПанели, Ложь, Неопределено),
			ПроверяемыеМЧДФНС,
			ВыбранныеОрганизации,
			СтатусМЧДФНС);
		ИндексДоверенности = 0;
		Контекст = Новый Структура;
		Контекст.Вставить("НедействительныеДоверенности", 	НедействительныеДоверенности);
		Контекст.Вставить("ИндексДоверенности", 			0);
		Контекст.Вставить("ОповещениеОЗавершении", 			ОповещениеОЗавершении);
	КонецЕсли;
	
	Если Контекст.ИндексДоверенности >= Контекст.НедействительныеДоверенности.Количество() Тогда
		Если Контекст.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ДоверенностьИзвестна = ?(ТипЗнч(ПроверяемыеМЧДФНС) = Тип("Массив")
		ИЛИ ТипЗнч(ПроверяемыеМЧДФНС) = Тип("ФиксированныйМассив"),
		ПроверяемыеМЧДФНС.Количество() = 1, ПроверяемыеМЧДФНС <> Неопределено);
	ПараметрыФормы.Вставить("СвойстваДоверенности",
		Контекст.НедействительныеДоверенности[Контекст.ИндексДоверенности]);
	ПараметрыФормы.Вставить("ДоверенностьИзвестна", ДоверенностьИзвестна);
	ПараметрыФормы.Вставить("ЭтоОтключениеИзПанели", ЭтоОтключениеИзПанели);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтключитьНедействительныеМЧДФНСПослеОтключения",
		ЭтотОбъект, Контекст);
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.Форма.ФормаОтключенияМЧД",
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОтключитьНедействительныеМЧДФНСПослеОтключения(Результат, Контекст) Экспорт
	
	Контекст.ИндексДоверенности = Контекст.ИндексДоверенности + 1;
	ОтключитьНедействительныеМЧДФНС(, Контекст);
	
КонецПроцедуры

// Получает номер (GUID) для новой машиночитаемой доверенности и записывает в реквизит доверенности
// или поле формы, предполагается использование при открытии формы доверенности, фоновое обновление.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * НомерДоверенности - Строка - при ошибке возвращается пустая строка, выводится сообщение об ошибке
//   СсылкаНаДоверенность  - СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр
//   ФормаДоверенности     - ФормаКлиентскогоПриложения
//
Процедура ПолучитьНомерМЧДРР(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СсылкаНаДоверенность", 	СсылкаНаДоверенность);
	ДополнительныеПараметры.Вставить("ФормаДоверенности", 		ФормаДоверенности);
	ДополнительныеПараметры.Вставить("Результат", 				Результат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьНомерМЧДРРПослеПодключенияИнтернетПоддержки",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДокументооборотСКОВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
		
	Иначе
		МодульИнтернетПоддержкаПользователейКлиент =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.МодульИнтернетПоддержкаПользователейКлиент();
		
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаДоверенности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНомерМЧДРРПослеПодключенияИнтернетПоддержки(
		РезультатПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Результат.НомерДоверенности =
		ДокументооборотСКОВызовСервера.ПолучитьНомерМЧДРР().НомерДоверенности;
	Если ДополнительныеПараметры.ФормаДоверенности <> Неопределено Тогда
		ДополнительныеПараметры.ФормаДоверенности.Объект.НомерДоверенности =
			ДополнительныеПараметры.Результат.НомерДоверенности;
		ЭтоВерсия5_02 = ЗначениеЗаполнено(ДополнительныеПараметры.ФормаДоверенности.Объект.ВерсияФормата)
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ДополнительныеПараметры.ФормаДоверенности.Объект.ВерсияФормата + ".0.0", "5.02.0.0") >= 0;
		Если ЭтоВерсия5_02 Тогда
			ДополнительныеПараметры.ФормаДоверенности.Объект.РегистрационныйНомерДоверенности =
				ДополнительныеПараметры.Результат.НомерДоверенности;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет форму при заданной форме, выгружает машиночитаемую доверенность, предлагает выбрать/подтвердить выбор
// сертификата, подписывает, отправляет на регистрацию в распределенном реестре ФНС, ожидает регистрации 1-3 минуты,
// получает статус, обновляет статус в записе справочника доверенностей, в том числе запоминает идентификатор
// транзакции.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * ИдентификаторТранзакции - Строка - при ошибке отправки на регистрацию выводится сообщение об ошибке
//                                           и возвращается пустая строка, при успехе идентификатор запоминается
//                                           в записи справочника
//      * СтатусТранзакции        - Строка - "PENDING" - транзакция майнится, "SUCCESS" - транзакция смайнилась,
//                                           "FAILURE" - ошибка при майнинге транзакции, при ошибке получения
//                                           статуса возвращается пустая строка и выводится сообщение об ошибке,
//                                           статус обновляется в записи справочника и на форме, если передана
//      * ДатаВремяТранзакции     - Дата
//      * ХешДоверенности         - Строка - хеш доверенности
//      * НомерДоверенности       - Строка - номер, извлеченный из доверенности
//      * ИННДоверителя           - Строка - ИНН доверителя, извлеченный из доверенности
//   СсылкаНаДоверенность  - СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр
//   ФормаДоверенности     - ФормаКлиентскогоПриложения
//   Настройки - структура
//      * ОтпечатокСертификатаДоверителя - Строка.
//
Процедура ЗарегистрироватьМЧДРР(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено,
		Настройки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("СтатусТранзакции", 			"");
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ХешДоверенности", 			"");
	Результат.Вставить("НомерДоверенности", 		"");
	Результат.Вставить("ИННДоверителя", 			"");
	Результат.Вставить("ИмяФайлаВыгрузки", 			"");
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("ОтпечатокСертификатаДоверителя", "");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, Настройки);
	КонецЕсли;
	
	Если ФормаДоверенности <> Неопределено И НЕ ФормаДоверенности.Записать() Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось сохранить доверенность';
															|en = 'Не удалось сохранить доверенность'"));
		Если ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	СсылкаНаДоверенностьСУчетомФормы = ?(ФормаДоверенности = Неопределено, СсылкаНаДоверенность,
		ФормаДоверенности.Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СсылкаНаДоверенность", 	СсылкаНаДоверенностьСУчетомФормы);
	ДополнительныеПараметры.Вставить("ФормаДоверенности", 		ФормаДоверенности);
	ДополнительныеПараметры.Вставить("Настройки", 				НастройкиВызова);
	ДополнительныеПараметры.Вставить("Результат", 				Результат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьМЧДРРПослеПодключенияИнтернетПоддержки",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ДополнительныеПараметры.СсылкаНаДоверенность) =
		Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности)
		ИЛИ ДокументооборотСКОВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
		
	Иначе
		МодульИнтернетПоддержкаПользователейКлиент =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.МодульИнтернетПоддержкаПользователейКлиент();
		
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаДоверенности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьМЧДРРПослеПодключенияИнтернетПоддержки(
		РезультатПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОрганизацияИлиСсылкаНаОбъект", ДополнительныеПараметры.СсылкаНаДоверенность);
	Если ДополнительныеПараметры.ФормаДоверенности <> Неопределено Тогда
		ПараметрыФормы.ОрганизацияИлиСсылкаНаОбъект = ДополнительныеПараметры.ФормаДоверенности.Объект.Организация;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьМЧДРРПослеВводаПараметров",
		ЭтотОбъект, ДополнительныеПараметры);
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Настройки.ОтпечатокСертификатаДоверителя) Тогда
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("МестоХраненияКлюча", МестоХраненияКлюча);
		РезультатВыполнения.Вставить("ОтпечатокСертификатаАбонента",
			ДополнительныеПараметры.Настройки.ОтпечатокСертификатаДоверителя);
		РезультатВыполнения.Вставить("ПарольДоступаКЗакрытомуКлючу", "");
		РезультатВыполнения.Вставить("ИнтерактивныйРежимКриптографии", Истина);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		
	Иначе
		ОткрытьФорму(
			"Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.Форма.ФормаПараметровОтправки",
			ПараметрыФормы,
			ДополнительныеПараметры.ФормаДоверенности,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьМЧДРРПослеВводаПараметров(
		ПараметрыОтправки,
		ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОтправки = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ДополнительныеПараметры.СсылкаНаДоверенность) =
		Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ЗарегистрироватьМЧДРРВыгрузка(ДополнительныеПараметры);
		
	Иначе
		ПараметрыДлительнойОтправки = ДлительнаяОтправкаКлиент.ПараметрыДлительнойОтправки();
		ПараметрыДлительнойОтправки.ОтчетСсылка 				= ДополнительныеПараметры.СсылкаНаДоверенность;
		ПараметрыДлительнойОтправки.ОбщееКоличествоЭтапов 		= 3;
		ПараметрыДлительнойОтправки.КонтекстДлительнойОперации 	= ДополнительныеПараметры;
		
		// отправка отчета в распределенный реестр
		Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительнойОтправки(ПараметрыДлительнойОтправки) Тогда
			Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ЗарегистрироватьМЧДРРВыгрузка", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьМЧДРРВыгрузка(ДополнительныеПараметры = Неопределено) Экспорт
	
	ДлительнаяОтправкаИспользуется = (ДополнительныеПараметры = Неопределено);
	Если ДлительнаяОтправкаИспользуется Тогда
		ДополнительныеПараметры = ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации();
		
		ДлительнаяОтправкаКлиент.ВывестиСостояние("Отправка..."); // распределенный реестр
		
		ДлительнаяОтправкаКлиент.ЗапретитьВыводСостояния();
	КонецЕсли;
	
	ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ДополнительныеПараметры.СсылкаНаДоверенность) =
		Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ПараметрыВозврата = Новый Структура("СформироватьФайлДоверенностиПриОтсутствии", Ложь);
		РезультатВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДЕдиногоФормата(
			ДополнительныеПараметры.СсылкаНаДоверенность,
			ПараметрыВозврата);
		РезультатВыгрузки = ?(РезультатВыгрузки = Неопределено, Неопределено,
			Новый Структура("ИмяФайла, Содержимое, НомерДоверенности",
			РезультатВыгрузки[0].Имя, РезультатВыгрузки[0].Адрес, ""));
		
	Иначе
		РезультатВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДРР(ДополнительныеПараметры.СсылкаНаДоверенность);
	КонецЕсли;
	Если РезультатВыгрузки = Неопределено ИЛИ НЕ ЗначениеЗаполнено(РезультатВыгрузки.Содержимое) Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось выгрузить доверенность';
															|en = 'Не удалось выгрузить доверенность'"));
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(); // распределенный реестр
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОтправкаИспользуется Тогда
		ДлительнаяОтправкаКлиент.СброситьЗапретВыводаСостояния();
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИмяФайлаВыгрузки", 	РезультатВыгрузки.ИмяФайла);
	ДополнительныеПараметры.Вставить("СодержимоеВыгрузки", 	РезультатВыгрузки.Содержимое);
	ДополнительныеПараметры.Вставить("НомерДоверенности", 	РезультатВыгрузки.НомерДоверенности);
	
	СертификатАбонента = Новый Структура("Отпечаток", ПараметрыОтправки.ОтпечатокСертификатаАбонента);
	КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(ПараметрыОтправки.МестоХраненияКлюча, СертификатАбонента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьМЧДРРПослеПоискаСертификата",
		ЭтотОбъект, ДополнительныеПараметры);
	НайтиСертификатПоОтпечатку(
		ОписаниеОповещения,
		СертификатАбонента);
	
КонецПроцедуры

Процедура ЗарегистрироватьМЧДРРПослеПоискаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено ИЛИ НЕ Результат.СертификатНайден Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сертификат абонента не найден';
															|en = 'Сертификат абонента не найден'"));
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(); // распределенный реестр
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры.СодержимоеВыгрузки) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДополнительныеПараметры.СодержимоеВыгрузки) Тогда
		
		ДанныеXMLВыгрузки = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.СодержимоеВыгрузки);
		
	Иначе
		ДанныеXMLВыгрузки = ПолучитьДвоичныеДанныеИзСтроки(
			ДополнительныеПараметры.СодержимоеВыгрузки, "windows-1251", Истина);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ДанныеXMLВыгрузки", ДанныеXMLВыгрузки);
	
	ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
	ИнтерактивныйРежимКриптографии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтправки,
		"ИнтерактивныйРежимКриптографии", Ложь);
	
	ПараметрыПодписи = Новый Структура;
	ПараметрыПодписи.Вставить("СвойстваСертификата", 			Результат.СвойстваСертификата);
	ПараметрыПодписи.Вставить("Данные", 						ДанныеXMLВыгрузки);
	ПараметрыПодписи.Вставить("ПарольДоступаКЗакрытомуКлючу", 	ПараметрыОтправки.ПарольДоступаКЗакрытомуКлючу);
	ПараметрыПодписи.Вставить("ИнтерактивныйРежимКриптографии", ИнтерактивныйРежимКриптографии);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьМЧДРРПослеПодписи",
		ЭтотОбъект, ДополнительныеПараметры);
	ПодписатьCadesBes(ОписаниеОповещения, ПараметрыПодписи);
	
КонецПроцедуры

Процедура ЗарегистрироватьМЧДРРПослеПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(СтрШаблон(
			НСтр("ru = 'Не удалось подписать доверенность: %1';
				|en = 'Не удалось подписать доверенность: %1'"),
			Результат.ОписаниеОшибки));
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(); // распределенный реестр
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(ДополнительныеПараметры.СсылкаНаДоверенность) =
		Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ДополнительныеПараметры.Результат.Вставить("ИмяФайлаВыгрузки", 		ДополнительныеПараметры.ИмяФайлаВыгрузки);
			ДополнительныеПараметры.Результат.Вставить("СодержимоеВыгрузки", 	ДополнительныеПараметры.СодержимоеВыгрузки);
			ДополнительныеПараметры.Результат.Вставить("СодержимоеПодписи", 	Результат.ФайлПодписи);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ФайлПодписи", Результат.ФайлПодписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьМЧДРРПослеПоказаОшибкиДоступаВИнтернет",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

Процедура ЗарегистрироватьМЧДРРПослеПоказаОшибкиДоступаВИнтернет(
		РезультатДиалогаОбОшибкеДоступа,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатДиалогаОбОшибкеДоступа <> Истина Тогда
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("НетДоступаВИнтернет", Истина);
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр, нет доступа в Интернет
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФормаДоверенности = ДополнительныеПараметры.ФормаДоверенности;
	
	ДополнительныеПараметры.Результат.ИмяФайлаВыгрузки = ДополнительныеПараметры.ИмяФайлаВыгрузки;
	
	ПараметрыОтправки 	= ДополнительныеПараметры.ПараметрыОтправки;
	
	НастройкиОперации = Новый Структура;
	НастройкиОперации.Вставить("ЗаписатьСтатус", 				ФормаДоверенности = Неопределено);
	НастройкиОперации.Вставить("ОтпечатокСертификатаАбонента", 	ПараметрыОтправки.ОтпечатокСертификатаАбонента);
	
	РезультатРегистрации = ДокументооборотСКОВызовСервера.ЗарегистрироватьМЧДРР(
		ДополнительныеПараметры.ИмяФайлаВыгрузки,
		ДополнительныеПараметры.ДанныеXMLВыгрузки,
		ДополнительныеПараметры.ФайлПодписи,,
		?(ФормаДоверенности = Неопределено, ДополнительныеПараметры.НомерДоверенности,
			ФормаДоверенности.Объект.НомерДоверенности),
		?(ФормаДоверенности = Неопределено, ДополнительныеПараметры.СсылкаНаДоверенность, ФормаДоверенности.Объект.Ссылка),
		НастройкиОперации);
	
	Если РезультатРегистрации.ПовторятьСоединение Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьМЧДРРПослеПоказаОшибкиДоступаВИнтернет",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось обратиться к серверу распределенного реестра МЧД (%1)';
				|en = 'Не удалось обратиться к серверу распределенного реестра МЧД (%1)'"),
			РезультатРегистрации.АдресСервера);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьДиалогОшибкиДоступаВИнтернет(
			ТекстСообщения,
			ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	СтатусТранзакции = ?(ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции), "PENDING", "");
	
	ДополнительныеПараметры.Результат.ИдентификаторТранзакции 	= РезультатРегистрации.ИдентификаторТранзакции;
	ДополнительныеПараметры.Результат.СтатусТранзакции 			= СтатусТранзакции;
	ДополнительныеПараметры.Результат.ДатаВремяТранзакции 		= Неопределено;
	ДополнительныеПараметры.Результат.ХешДоверенности 			= РезультатРегистрации.ХешДоверенности;
	ДополнительныеПараметры.Результат.НомерДоверенности 		= РезультатРегистрации.НомерДоверенности;
	ДополнительныеПараметры.Результат.ИННДоверителя 			= РезультатРегистрации.ИННДоверителя;
	
	Если ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции) Тогда
		Если ФормаДоверенности <> Неопределено Тогда
			ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
			
			ФормаДоверенности.Прочитать();
			ФормаДоверенности.Объект.Статус =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отправлено");
			ФормаДоверенности.Объект.ДатаОтправки = ОбщегоНазначенияКлиент.ДатаСеанса();
			ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ФормаДоверенности.Объект.ДатаОтправки;
			ФормаДоверенности.Объект.ИдентификаторТранзакции = РезультатРегистрации.ИдентификаторТранзакции;
			ФормаДоверенности.Объект.ИмяФайлаВыгрузки = ДополнительныеПараметры.ИмяФайлаВыгрузки;
			ФормаДоверенности.Объект.ОтпечатокСертификата = ПараметрыОтправки.ОтпечатокСертификатаАбонента;
			ФормаДоверенности.Записать();
		КонецЕсли;
		
		ПараметрыАвтозапроса = Новый Структура();
		ПараметрыАвтозапроса.Вставить("Ключ",
			?(ФормаДоверенности = Неопределено, ДополнительныеПараметры.СсылкаНаДоверенность, ФормаДоверенности.Объект.Ссылка));
		
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("ПараметрыАвтозапроса", 					ПараметрыАвтозапроса);
		ДополнительныеПараметрыРезультата.Вставить("ЭтоДоверенностьПромежуточныйРезультат", Истина);
		
		ДлительнаяОтправкаКлиент.ОповеститьОбУдачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр
		
	Иначе
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("РезультатОтправки", Ложь);
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
	
КонецПроцедуры

// Получает частичные (открытые) данные доверенности и обновляет реквизит состояния доверенности, обновляет данные для
// панели состояния в форме, если передана форма.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * ХешДоверенности    - Строка - хеш доверенности
//      * НомерДоверенности  - Строка - номер, извлеченный из доверенности
//      * ДатаВыдачи         - Дата - дата начала действия доверенности
//      * ДатаОкончания      - Дата - дата завершения действия доверенности
//      * СтатусДоверенности - Строка - "PROCESSING" - ожидание подтверждения в гос. органе,
//                                      "REJECTED" - отказ в регистрации в гос. органе,
//                                      "CREATED" - дата начала действия не наступила, "ACTIVE" - действует,
//                                      "EXPIRED" - истекла, "REVOKED" - отменена (отозвана), "" - не запрашивался
//      * ПубличныйКлюч      - Строка - публичный ключ эмитента доверенности
//   СсылкаНаДоверенность  - СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр
//   ФормаДоверенности     - ФормаКлиентскогоПриложения
//
Процедура ОбновитьСостояниеМЧДРР(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено) Экспорт
	
	Если ФормаДоверенности = Неопределено Тогда
		ДоверенностьСсылка = СсылкаНаДоверенность
	Иначе
		Если НЕ ФормаДоверенности.Записать() Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось сохранить доверенность';
																|en = 'Не удалось сохранить доверенность'"));
			Если ОповещениеОЗавершении <> Неопределено Тогда
				Результат = ДокументооборотСКОКлиентСервер.РезультатОбновитьСостояниеМЧДРР();
				ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		ДоверенностьСсылка = ФормаДоверенности.Объект.Ссылка;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ДоверенностьСсылка", 		ДоверенностьСсылка);
	ДополнительныеПараметры.Вставить("ФормаДоверенности", 		ФормаДоверенности);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСостояниеМЧДРРПослеПодключенияИнтернетПоддержки",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДокументооборотСКОВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
		
	Иначе
		МодульИнтернетПоддержкаПользователейКлиент =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.МодульИнтернетПоддержкаПользователейКлиент();
		
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаДоверенности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСостояниеМЧДРРПослеПодключенияИнтернетПоддержки(
		РезультатПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			Результат = ДокументооборотСКОКлиентСервер.РезультатОбновитьСостояниеМЧДРР();
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСостояниеМЧДРРПослеПоказаОшибкиДоступаВИнтернет",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

Процедура ОбновитьСостояниеМЧДРРПослеПоказаОшибкиДоступаВИнтернет(
		РезультатДиалогаОбОшибкеДоступа,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатДиалогаОбОшибкеДоступа <> Истина Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			Результат = ДокументооборотСКОКлиентСервер.РезультатОбновитьСостояниеМЧДРР();
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = ДокументооборотСКОВызовСервера.ОбновитьСостояниеМЧДРР(ДополнительныеПараметры.ДоверенностьСсылка);
	Если Результат.СтатусИзменился Тогда
		ПараметрыПриложения["ДокументооборотСКОКлиент.ИзменилсяСтатусМЧДФНС"] = Истина;
	КонецЕсли;
	
	Если Результат.ПовторятьСоединение Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСостояниеМЧДРРПослеПоказаОшибкиДоступаВИнтернет",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось обратиться к серверу распределенного реестра МЧД (%1)';
				|en = 'Не удалось обратиться к серверу распределенного реестра МЧД (%1)'"),
			Результат.АдресСервера);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьДиалогОшибкиДоступаВИнтернет(
			ТекстСообщения,
			ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Запрашивает номер и ИНН доверенности, если не переданы, и отправляет запрос на получение полных данных
// машиночитаемой доверенности, при успехе создает и заполняет полученными данными запись справочника машиночитаемых
// доверенностей, ожидает обработки запроса до 1-3 минуты.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр - задана при успехе
//      * СтатусПолучения      - "PENDING" - операция выполняется, идет запрос данных с узла ФНС, повторить попытку
//                               позже, возвращается, если за 3 минуты не удалось получить данные доверенности,
//                               при ошибке получения статуса возвращается пустая строка и выводится сообщение
//                               об ошибке
//   РеквизитыДоверенности - Неопределено или структура:
//    * НомерДоверенности     - Строка - если не задан и не указан в форме, запрашивается
//    * ИННДоверителя         - Строка - если не задан и не указан в форме, запрашивается организация доверителя
//                              с возможностью ввести ИНН вручную
//   ФормаВладелец         - ФормаКлиентскогоПриложения
//   ЭтоПовторнаяПопытка   - Булево
//
Процедура ПолучитьДанныеМЧДРР(
		ОповещениеОЗавершении = Неопределено,
		РеквизитыДоверенности = Неопределено,
		ФормаВладелец = Неопределено,
		ЭтоПовторнаяПопытка = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкаНаДоверенность", 	Неопределено);
	Результат.Вставить("СтатусПолучения", 		"");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("РеквизитыДоверенности", 	РеквизитыДоверенности);
	ДополнительныеПараметры.Вставить("ФормаВладелец", 			ФормаВладелец);
	ДополнительныеПараметры.Вставить("ЭтоПовторнаяПопытка", 	ЭтоПовторнаяПопытка);
	ДополнительныеПараметры.Вставить("Результат", 				Результат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьДанныеМЧДРРПослеПодключенияИнтернетПоддержки",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДокументооборотСКОВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
		
	Иначе
		МодульИнтернетПоддержкаПользователейКлиент =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.МодульИнтернетПоддержкаПользователейКлиент();
		
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаВладелец);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеМЧДРРПослеПодключенияИнтернетПоддержки(
		РезультатПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьДанныеМЧДРРПослеВводаРеквизитов",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.РеквизитыДоверенности <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДополнительныеПараметры.РеквизитыДоверенности);
		
	Иначе
		ОткрытьФорму(
			"Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.Форма.ФормаЗагрузки",,
			ДополнительныеПараметры.ФормаВладелец,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеМЧДРРПослеВводаРеквизитов(
		ПараметрыЗагрузки,
		ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Результат.СсылкаНаДоверенность = ДокументооборотСКОВызовСервера.НайтиМЧДРР(
		ПараметрыЗагрузки.НомерДоверенности,
		ПараметрыЗагрузки.ИННДоверителя);
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Результат.СсылкаНаДоверенность) Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ЭтоЗагрузкаДоверенности", 		Истина);
	ДополнительныеПараметры.Вставить("АвтозапросНачальноеЧислоПопыток", 1);
	ДополнительныеПараметры.Вставить("НомерДоверенности", 				ПараметрыЗагрузки.НомерДоверенности);
	ДополнительныеПараметры.Вставить("ИННДоверителя", 					ПараметрыЗагрузки.ИННДоверителя);
	ДополнительныеПараметры.Вставить("ИННПредставителя", 				ПараметрыЗагрузки.ИННПредставителя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьДанныеМЧДРРПослеПоказаОшибкиДоступаВИнтернет",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

Процедура ПолучитьДанныеМЧДРРПослеПоказаОшибкиДоступаВИнтернет(
		РезультатДиалогаОбОшибкеДоступа,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатДиалогаОбОшибкеДоступа <> Истина Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеМЧДРРПолучениеПолныхДанных(ДополнительныеПараметры);
	
КонецПроцедуры

// Метод вызывается из процедуры "ОбновитьРезультатКонкретнойОтправки"
// формы "КонтейнерКлиентскихМетодов" обработки "ДокументооборотСКонтролирующимиОрганами"
Процедура ПолучитьДанныеМЧДРРПолучениеПолныхДанных(ДополнительныеПараметры) Экспорт
	
	СведенияДоверенности = ДокументооборотСКОВызовСервера.ПолучитьПолныеДанныеДоверенностиНаСервереМЧДРР(
		ДополнительныеПараметры.НомерДоверенности,
		ДополнительныеПараметры.ИННДоверителя,
		ДополнительныеПараметры.ИННПредставителя);
	
	Если СведенияДоверенности.ПовторятьСоединение Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьДанныеМЧДРРПослеПоказаОшибкиДоступаВИнтернет",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось обратиться к серверу распределенного реестра МЧД (%1)';
				|en = 'Не удалось обратиться к серверу распределенного реестра МЧД (%1)'"),
			СведенияДоверенности.АдресСервера);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьДиалогОшибкиДоступаВИнтернет(
			ТекстСообщения,
			ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Результат.СтатусПолучения = СведенияДоверенности.СтатусПолучения;
	
	Если СведенияДоверенности.СтатусПолучения = "PENDING" Тогда
		АвтозапросНачальноеЧислоПопыток = ?(ДополнительныеПараметры.Свойство("АвтозапросНачальноеЧислоПопыток"),
			ДополнительныеПараметры.АвтозапросНачальноеЧислоПопыток, 1);
		
		Если АвтозапросНачальноеЧислоПопыток > 1 ИЛИ ДополнительныеПараметры.ЭтоПовторнаяПопытка Тогда
			РезультатПоказа = Истина;
			
		Иначе
			ПараметрыДлительнойОтправки = ДлительнаяОтправкаКлиент.ПараметрыДлительнойОтправки();
			ПараметрыДлительнойОтправки.ОтчетСсылка 				= Неопределено;
			ПараметрыДлительнойОтправки.ОбщееКоличествоЭтапов 		= 1;
			ПараметрыДлительнойОтправки.КонтекстДлительнойОперации 	= ДополнительныеПараметры;
			ПараметрыДлительнойОтправки.Вставить("ЭтоЗагрузкаДоверенности", Истина);
			
			РезультатПоказа = ДлительнаяОтправкаКлиент.ПоказатьФормуДлительнойОтправки(ПараметрыДлительнойОтправки); // распределенный реестр
		КонецЕсли;
		
		Если РезультатПоказа Тогда
			РеквизитыАвтообмена = Новый Структура;
			РеквизитыАвтообмена.Вставить("НомерДоверенности", 	ДополнительныеПараметры.НомерДоверенности);
			РеквизитыАвтообмена.Вставить("ИННДоверителя", 		ДополнительныеПараметры.ИННДоверителя);
			
			ПараметрыАвтозапроса = Новый Структура();
			ПараметрыАвтозапроса.Вставить("Ключ", 						ДополнительныеПараметры);
			ПараметрыАвтозапроса.Вставить("ЭтоЗагрузкаДоверенности", 	Истина);
			
			ДополнительныеПараметрыРезультата = Новый Структура();
			ДополнительныеПараметрыРезультата.Вставить("ЭтоЗагрузкаДоверенности", 		Истина);
			ДополнительныеПараметрыРезультата.Вставить("ЭтоЗапросРезультатаОперации", 	Истина);
			ДополнительныеПараметрыРезультата.Вставить("РеквизитыАвтообмена", 			РеквизитыАвтообмена);
			ДополнительныеПараметрыРезультата.Вставить("ПараметрыАвтозапроса", 			ПараметрыАвтозапроса);
			
			ДлительнаяОтправкаКлиент.ОповеститьОбУдачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр
		КонецЕсли;
		Возврат;
		
	Иначе
		ДлительнаяОтправкаКлиент.ЗакрытьФормуДлительнойОтправкиБезДальнейшихДействий();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СведенияДоверенности.ДанныеВыгрузки) Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ДокументооборотСКОВызовСервера.ЗагрузитьМЧДРР(
		СведенияДоверенности.ДанныеВыгрузки,,
		СведенияДоверенности.ДанныеПодписи,
		СведенияДоверенности.ДанныеЗаявленияНаОтзыв,
		СведенияДоверенности.ДанныеПодписиЗаявленияНаОтзыв,
		СведенияДоверенности.ДанныеАрхива);
	Если НЕ РезультатЗагрузки.Выполнено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось загрузить полученные данные доверенности. %1';
				|en = 'Не удалось загрузить полученные данные доверенности. %1'"),
			РезультатЗагрузки.Ошибка);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Результат.СсылкаНаДоверенность = РезультатЗагрузки.Ссылка;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
	
КонецПроцедуры

// Запрашивает текст причины отмены (отзыва), выгружает заявление на отмену машиночитаемой доверенности, предлагает
// выбрать/подтвердить выбор сертификата, подписывает и отправляет заявление на регистрацию в распределенном реестре
// ФНС, ожидает 1-3 минуты, получает статус транзакции заявления, обновляет статус в записе справочника доверенностей,
// в том числе запоминает идентификатор транзакции.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * ИдентификаторТранзакции - Строка - при ошибке отправки на регистрацию выводится сообщение об ошибке
//                                           и возвращается пустая строка
//      * СтатусТранзакции        - Строка - "PENDING" - транзакция майнится, "SUCCESS" - транзакция смайнилась,
//                                           "FAILURE" - ошибка при майнинге транзакции, при ошибке получения
//                                           статуса возвращается пустая строка и выводится сообщение об ошибке
//      * ДатаВремяТранзакции     - Дата
//   СсылкаНаДоверенность  - СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр
//   ФормаДоверенности     - ФормаКлиентскогоПриложения
//
Процедура ОтменитьМЧДРР(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("СтатусТранзакции", 			"");
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ИмяФайлаЗаявленияНаОтзыв", 	"");
	
	Если ФормаДоверенности <> Неопределено И ФормаДоверенности.Модифицированность И НЕ ФормаДоверенности.Записать() Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось сохранить доверенность';
															|en = 'Не удалось сохранить доверенность'"));
		Если ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	СсылкаНаДоверенностьСУчетомФормы = ?(ФормаДоверенности = Неопределено, СсылкаНаДоверенность,
		ФормаДоверенности.Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СсылкаНаДоверенность", 	СсылкаНаДоверенностьСУчетомФормы);
	ДополнительныеПараметры.Вставить("ФормаДоверенности", 		ФормаДоверенности);
	ДополнительныеПараметры.Вставить("Результат", 				Результат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьМЧДРРПослеПодключенияИнтернетПоддержки",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДокументооборотСКОВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
		
	Иначе
		МодульИнтернетПоддержкаПользователейКлиент =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.МодульИнтернетПоддержкаПользователейКлиент();
		
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаДоверенности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьМЧДРРПослеПодключенияИнтернетПоддержки(
		РезультатПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФормаДоверенности = ДополнительныеПараметры.ФормаДоверенности;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьМЧДРРПослеВводаПараметров",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОрганизацияИлиСсылкаНаОбъект", 		Неопределено);
	ПараметрыФормы.Вставить("ВидДокумента", 						"Отмена");
	ПараметрыФормы.Вставить("ПричинаОтмены", 						"");
	ПараметрыФормы.Вставить("ДатаОтмены", 							Неопределено);
	ПараметрыФормы.Вставить("УникальныйИдентификаторДоверенности", 	"");
	ПараметрыФормы.Вставить("ДолжностьРуководителяДоверителя", 		"");
	ПараметрыФормы.Вставить("ДатаРожденияДоверителя", 				Неопределено);
	ПараметрыФормы.Вставить("ТелефонПодписанта", 					"");
	ПараметрыФормы.Вставить("ЭтоДоверительЮридическоеЛицо", 		Истина);
	ПараметрыФормы.Вставить("ЭтоДоверительРоссийскаяОрганизация", 	Истина);
	
	Если ФормаДоверенности <> Неопределено Тогда
		Если ФормаДоверенности.Объект.Статус =
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отозвано") Тогда
			
			ПараметрыФормы.ВидДокумента = "ПросмотрОтмены";
		КонецЕсли;
		
		ПараметрыФормы.ОрганизацияИлиСсылкаНаОбъект = ФормаДоверенности.Объект.Организация;
		ПараметрыФормы.ПричинаОтмены = ФормаДоверенности.Объект.ПричинаОтзыва;
		ПараметрыФормы.ДатаОтмены = ФормаДоверенности.Объект.ДатаОтзыва;
		ПараметрыФормы.УникальныйИдентификаторДоверенности =
			ФормаДоверенности.Объект.УникальныйИдентификаторДоверенностиОтзыва;
		ПараметрыФормы.ДолжностьРуководителяДоверителя = ФормаДоверенности.Объект.ДолжностьРуководителяДоверителяОтзыва;
		ПараметрыФормы.ДатаРожденияДоверителя = ФормаДоверенности.Объект.ДатаРожденияДоверителяОтзыва;
		ПараметрыФормы.ТелефонПодписанта = ФормаДоверенности.Объект.ТелефонПодписантаОтзыва;
		ПараметрыФормы.ЭтоДоверительЮридическоеЛицо = ФормаДоверенности.Доверитель_ЮридическоеЛицо;
		ПараметрыФормы.ЭтоДоверительРоссийскаяОрганизация = ФормаДоверенности.Доверитель_ЮридическоеЛицо
			И НЕ ФормаДоверенности.Объект.ДоверительЮЛ_ИностраннаяОрганизация;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыФормы.ПричинаОтмены) И НЕ ЗначениеЗаполнено(ПараметрыФормы.ДатаОтмены)
			И НЕ ЗначениеЗаполнено(ПараметрыФормы.УникальныйИдентификаторДоверенности)
			И НЕ ЗначениеЗаполнено(ПараметрыФормы.ДолжностьРуководителяДоверителя)
			И НЕ ЗначениеЗаполнено(ПараметрыФормы.ДатаРожденияДоверителя)
			И НЕ ЗначениеЗаполнено(ПараметрыФормы.ТелефонПодписанта) Тогда
			
			ПараметрыФормы.ДатаОтмены = ОбщегоНазначенияКлиент.ДатаСеанса();
			ПараметрыФормы.ДатаОтмены = НачалоДня(ПараметрыФормы.ДатаОтмены);
			ИмяФайлаВыгрузкиБезРасширения = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
				ФормаДоверенности.Объект.ИмяФайлаВыгрузки).ИмяБезРасширения;
			КомпонентыИмени = СтрРазделить(ИмяФайлаВыгрузкиБезРасширения, "_");
			Если КомпонентыИмени.Количество() >= 7 И СтрДлина(КомпонентыИмени[6]) = 36 Тогда
				ПараметрыФормы.УникальныйИдентификаторДоверенности = КомпонентыИмени[6];
			КонецЕсли;
			Если ПараметрыФормы.ЭтоДоверительЮридическоеЛицо И ПараметрыФормы.ЭтоДоверительРоссийскаяОрганизация Тогда
				ПараметрыФормы.ДолжностьРуководителяДоверителя = ФормаДоверенности.Объект.ЛицоБезДовФЛ_Должность;
			ИначеЕсли НЕ ПараметрыФормы.ЭтоДоверительЮридическоеЛицо Тогда
				ПараметрыФормы.ДатаРожденияДоверителя = ФормаДоверенности.Объект.ДоверительФЛ_ДатаРождения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.Форма.ФормаПараметровОтправки",
		ПараметрыФормы,
		ФормаДоверенности,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОтменитьМЧДРРПослеВводаПараметров(
		ПараметрыОтправки,
		ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОтправки = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	
	Если ПараметрыОтправки.ТипОперации = "ТолькоВыгрузка" Тогда
		ОтменитьМЧДРРВыгрузка(Истина, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ПараметрыДлительнойОтправки = ДлительнаяОтправкаКлиент.ПараметрыДлительнойОтправки();
	ПараметрыДлительнойОтправки.ОтчетСсылка 				= ДополнительныеПараметры.СсылкаНаДоверенность;
	ПараметрыДлительнойОтправки.ОбщееКоличествоЭтапов 		= 3;
	ПараметрыДлительнойОтправки.ТипОперации 				= "Отзыв";
	ПараметрыДлительнойОтправки.КонтекстДлительнойОперации 	= ДополнительныеПараметры;
	
	// отправка отчета в распределенный реестр
	Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительнойОтправки(ПараметрыДлительнойОтправки) Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтменитьМЧДРРВыгрузка", 0.1, Истина);
	
КонецПроцедуры

Процедура ОтменитьМЧДРРВыгрузка(ЭтоВызовНапрямую = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЭтоВызовНапрямую Тогда
		ДополнительныеПараметры = ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации();
		
		ДлительнаяОтправкаКлиент.ВывестиСостояние("Отправка..."); // распределенный реестр
		
		ДлительнаяОтправкаКлиент.ЗапретитьВыводСостояния();
	КонецЕсли;
	
	ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
	
	Если ПараметрыОтправки.ТипОперации = "ТолькоВыгрузка" Тогда
		ПараметрыОтправки.Вставить("ВозвращатьАдресВоВременномХранилище", Истина);
	КонецЕсли;
	
	РезультатВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьЗаявлениеНаОтменуМЧДРР(
		ДополнительныеПараметры.ФормаДоверенности.Объект.Ссылка,,,
		Истина,,
		Истина,
		ПараметрыОтправки);
	
	Если РезультатВыгрузки.Свойство("Содержимое") И НЕ ЗначениеЗаполнено(РезультатВыгрузки.Содержимое)
		ИЛИ РезультатВыгрузки.Свойство("Адрес") И НЕ ЗначениеЗаполнено(РезультатВыгрузки.Адрес) Тогда
		
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось выгрузить заявление на отмену доверенности';
															|en = 'Не удалось выгрузить заявление на отмену доверенности'"));
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("РезультатОтправки", Ложь);
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтправки.ТипОперации = "ТолькоВыгрузка" Тогда
		ОперацииСФайламиЭДКОКлиент.СохранитьФайлы(РезультатВыгрузки);
		Возврат;
	КонецЕсли;
	
	ДлительнаяОтправкаКлиент.СброситьЗапретВыводаСостояния();
	
	ДополнительныеПараметры.Вставить("ИмяФайлаВыгрузки", 	РезультатВыгрузки.ИмяФайла);
	ДополнительныеПараметры.Вставить("СодержимоеВыгрузки", 	РезультатВыгрузки.Содержимое);
	
	СертификатАбонента = Новый Структура("Отпечаток", ПараметрыОтправки.ОтпечатокСертификатаАбонента);
	КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(ПараметрыОтправки.МестоХраненияКлюча, СертификатАбонента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьМЧДРРПослеПоискаСертификата",
		ЭтотОбъект, ДополнительныеПараметры);
	НайтиСертификатПоОтпечатку(
		ОписаниеОповещения,
		СертификатАбонента);
	
КонецПроцедуры

Процедура ОтменитьМЧДРРПослеПоискаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено ИЛИ НЕ Результат.СертификатНайден Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сертификат абонента не найден';
															|en = 'Сертификат абонента не найден'"));
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("РезультатОтправки", Ложь);
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеXMLВыгрузки = ПолучитьДвоичныеДанныеИзСтроки(ДополнительныеПараметры.СодержимоеВыгрузки, "windows-1251");
	ДополнительныеПараметры.Вставить("ДанныеXMLВыгрузки", ДанныеXMLВыгрузки);
	
	ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
	
	ПараметрыПодписи = Новый Структура;
	ПараметрыПодписи.Вставить("СвойстваСертификата", 			Результат.СвойстваСертификата);
	ПараметрыПодписи.Вставить("Данные", 						ДанныеXMLВыгрузки);
	ПараметрыПодписи.Вставить("ПарольДоступаКЗакрытомуКлючу", 	ПараметрыОтправки.ПарольДоступаКЗакрытомуКлючу);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьМЧДРРПослеПодписи",
		ЭтотОбъект, ДополнительныеПараметры);
	ПодписатьCadesBes(ОписаниеОповещения, ПараметрыПодписи);
	
КонецПроцедуры

Процедура ОтменитьМЧДРРПослеПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(СтрШаблон(
			НСтр("ru = 'Не удалось подписать заявление на отмену доверенности: %1';
				|en = 'Не удалось подписать заявление на отмену доверенности: %1'"),
			Результат.ОписаниеОшибки));
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("РезультатОтправки", Ложь);
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Результат.ИмяФайлаЗаявленияНаОтзыв = ДополнительныеПараметры.ИмяФайлаВыгрузки;
	
	ДополнительныеПараметры.Вставить("ФайлПодписи", Результат.ФайлПодписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьМЧДРРПослеПоказаОшибкиДоступаВИнтернет",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

Процедура ОтменитьМЧДРРПослеПоказаОшибкиДоступаВИнтернет(
		РезультатДиалогаОбОшибкеДоступа,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатДиалогаОбОшибкеДоступа <> Истина Тогда
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("РезультатОтправки", 	Ложь);
		ДополнительныеПараметрыРезультата.Вставить("НетДоступаВИнтернет", 	Истина);
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр, нет доступа в Интернет
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФормаДоверенности = ДополнительныеПараметры.ФормаДоверенности;
	
	РезультатРегистрации = ДокументооборотСКОВызовСервера.ОтменитьМЧДРР(
		ДополнительныеПараметры.ИмяФайлаВыгрузки,
		ДополнительныеПараметры.ДанныеXMLВыгрузки,
		ДополнительныеПараметры.ФайлПодписи,,
		?(ФормаДоверенности = Неопределено, "", ФормаДоверенности.Объект.НомерДоверенности),
		ФормаДоверенности.Объект.Ссылка);
	
	Если РезультатРегистрации.ПовторятьСоединение Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьМЧДРРПослеПоказаОшибкиДоступаВИнтернет",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось обратиться к серверу распределенного реестра МЧД (%1)';
				|en = 'Не удалось обратиться к серверу распределенного реестра МЧД (%1)'"),
			РезультатРегистрации.АдресСервера);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьДиалогОшибкиДоступаВИнтернет(
			ТекстСообщения,
			ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	СтатусТранзакции = ?(ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции), "PENDING", "");
	
	ДополнительныеПараметры.Результат.ИдентификаторТранзакции 	= РезультатРегистрации.ИдентификаторТранзакции;
	ДополнительныеПараметры.Результат.СтатусТранзакции 			= СтатусТранзакции;
	ДополнительныеПараметры.Результат.ДатаВремяТранзакции 		= Неопределено;
	
	Если ФормаДоверенности <> Неопределено И ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции) Тогда
		ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
		
		ФормаДоверенности.Прочитать();
		ФормаДоверенности.Объект.Статус =
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтправленоЗаявлениеНаОтзыв");
		ФормаДоверенности.Объект.ДатаОтправкиЗаявленияНаОтзыв = ОбщегоНазначенияКлиент.ДатаСеанса();
		ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ФормаДоверенности.Объект.ДатаОтправкиЗаявленияНаОтзыв;
		ФормаДоверенности.Объект.ИдентификаторТранзакции = РезультатРегистрации.ИдентификаторТранзакции;
		ФормаДоверенности.Объект.ИмяФайлаЗаявленияНаОтзыв = ДополнительныеПараметры.ИмяФайлаВыгрузки;
		ФормаДоверенности.Объект.ОтпечатокСертификата = ПараметрыОтправки.ОтпечатокСертификатаАбонента;
		ФормаДоверенности.Объект.ПричинаОтзыва = ПараметрыОтправки.ПричинаОтмены;
		ФормаДоверенности.Объект.ДатаОтзыва = ПараметрыОтправки.ДатаОтмены;
		ФормаДоверенности.Объект.УникальныйИдентификаторДоверенностиОтзыва =
			ПараметрыОтправки.УникальныйИдентификаторДоверенности;
		ФормаДоверенности.Объект.ДолжностьРуководителяДоверителяОтзыва = ПараметрыОтправки.ДолжностьРуководителяДоверителя;
		ФормаДоверенности.Объект.ДатаРожденияДоверителяОтзыва = ПараметрыОтправки.ДатаРожденияДоверителя;
		ФормаДоверенности.Объект.ТелефонПодписантаОтзыва = ПараметрыОтправки.ТелефонПодписанта;
		ФормаДоверенности.Записать();
		
		ПараметрыАвтозапроса = Новый Структура();
		ПараметрыАвтозапроса.Вставить("Ключ", ФормаДоверенности.Объект.Ссылка);
		
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("ПараметрыАвтозапроса", 	ПараметрыАвтозапроса);
		ДополнительныеПараметрыРезультата.Вставить("ЭтоОтзыв", 				Истина);
		
		ДлительнаяОтправкаКлиент.ОповеститьОбУдачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр
		
	Иначе
		ДополнительныеПараметрыРезультата = Новый Структура();
		ДополнительныеПараметрыРезультата.Вставить("РезультатОтправки", Ложь);
		ДлительнаяОтправкаКлиент.ОповеститьОНеудачнойОтправке(ДополнительныеПараметрыРезультата); // распределенный реестр
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
	
КонецПроцедуры


Процедура ПодписатьМЧДФНС(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено,
		Настройки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФайлаВыгрузки", "");
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("ОтпечатокСертификатаДоверителя", "");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, Настройки);
	КонецЕсли;
	
	Если ФормаДоверенности <> Неопределено И НЕ ФормаДоверенности.Записать() Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось сохранить доверенность';
															|en = 'Не удалось сохранить доверенность'"));
		Если ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	СсылкаНаДоверенностьСУчетомФормы = ?(ФормаДоверенности = Неопределено, СсылкаНаДоверенность,
		ФормаДоверенности.Объект.Ссылка);
	
	ЭтоЗаявление = ТипЗнч(СсылкаНаДоверенностьСУчетомФормы) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР");
	ЭтоПодписаниеXMLDSig = ЭтоЗаявление
		ИЛИ ТипЗнч(СсылкаНаДоверенностьСУчетомФормы) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю")
		ИЛИ ТипЗнч(СсылкаНаДоверенностьСУчетомФормы) = Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СсылкаНаДоверенность", 	СсылкаНаДоверенностьСУчетомФормы);
	ДополнительныеПараметры.Вставить("ФормаДоверенности", 		ФормаДоверенности);
	ДополнительныеПараметры.Вставить("Настройки", 				НастройкиВызова);
	ДополнительныеПараметры.Вставить("Результат", 				Результат);
	ДополнительныеПараметры.Вставить("ЭтоЗаявление", 			ЭтоЗаявление);
	ДополнительныеПараметры.Вставить("ЭтоПодписаниеXMLDSig", 	ЭтоПодписаниеXMLDSig);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДФНСПослеПодключенияИнтернетПоддержки",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДокументооборотСКОВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
		
	Иначе
		МодульИнтернетПоддержкаПользователейКлиент =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.МодульИнтернетПоддержкаПользователейКлиент();
		
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаДоверенности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьМЧДФНСПослеПодключенияИнтернетПоддержки(
		РезультатПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОрганизацияИлиСсылкаНаОбъект", ДополнительныеПараметры.СсылкаНаДоверенность);
	ПараметрыФормы.Вставить("БезВводаПароля", 				ДополнительныеПараметры.ЭтоПодписаниеXMLDSig);
	Если ДополнительныеПараметры.ФормаДоверенности <> Неопределено Тогда
		ПараметрыФормы.ОрганизацияИлиСсылкаНаОбъект = ДополнительныеПараметры.ФормаДоверенности.Объект.Организация;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДФНСПослеВводаПараметров",
		ЭтотОбъект, ДополнительныеПараметры);
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Настройки.ОтпечатокСертификатаДоверителя) Тогда
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("МестоХраненияКлюча", МестоХраненияКлюча);
		РезультатВыполнения.Вставить("ОтпечатокСертификатаАбонента",
			ДополнительныеПараметры.Настройки.ОтпечатокСертификатаДоверителя);
		РезультатВыполнения.Вставить("ПарольДоступаКЗакрытомуКлючу", "");
		РезультатВыполнения.Вставить("ИнтерактивныйРежимКриптографии", Истина);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		
	Иначе
		ОткрытьФорму(
			"Справочник.МашиночитаемыеДоверенностиФНС.Форма.ФормаПараметровПодписи",
			ПараметрыФормы,
			ДополнительныеПараметры.ФормаДоверенности,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьМЧДФНСПослеВводаПараметров(
		ПараметрыПодписи,
		ДополнительныеПараметры) Экспорт
	
	Если ПараметрыПодписи = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПараметрыПодписи", ПараметрыПодписи);
	
	ОпределятьКодНалоговогоОрганаПолучателя = Истина;
	ФорматДоверенностиПоПриказуФНС 			= Истина;
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("ВозвращатьИмяФайлаСРасширением", Истина);
	РезультатВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьМЧД(
		ДополнительныеПараметры.СсылкаНаДоверенность,,,
		ОпределятьКодНалоговогоОрганаПолучателя,
		ФорматДоверенностиПоПриказуФНС,
		Ложь,
		ПараметрыВозврата);
		
	Если РезультатВыгрузки = Неопределено ИЛИ ТипЗнч(РезультатВыгрузки) = Тип("Структура")
		И РезультатВыгрузки.Свойство("Содержимое") И НЕ ЗначениеЗаполнено(РезультатВыгрузки.Содержимое) Тогда
		
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(?(ДополнительныеПараметры.ЭтоЗаявление,
			НСтр("ru = 'Не удалось выгрузить заявление';
				|en = 'Не удалось выгрузить заявление'"), НСтр("ru = 'Не удалось выгрузить доверенность';
																|en = 'Не удалось выгрузить доверенность'")));
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыгрузки) = Тип("Массив") Тогда
		РезультатВыгрузки = РезультатВыгрузки[0];
	КонецЕсли;
	Если ТипЗнч(РезультатВыгрузки) = Тип("Структура") И РезультатВыгрузки.Свойство("Содержимое") Тогда
		ДополнительныеПараметры.Вставить("ИмяФайлаВыгрузки", 	РезультатВыгрузки.ИмяФайла);
		ДополнительныеПараметры.Вставить("СодержимоеВыгрузки", 	РезультатВыгрузки.Содержимое);
	Иначе
		ДополнительныеПараметры.Вставить("ИмяФайлаВыгрузки", 	РезультатВыгрузки.Имя);
		ДополнительныеПараметры.Вставить("АдресВыгрузки", 	РезультатВыгрузки.Адрес);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДФНСПослеПоискаСертификата",
		ЭтотОбъект, ДополнительныеПараметры);
	Если ДополнительныеПараметры.ЭтоПодписаниеXMLDSig Тогда
		КриптографияЭДКОКлиент.НайтиСертификатПоОтпечатку(
			ОписаниеОповещения,
			ПараметрыПодписи.ОтпечатокСертификатаАбонента);
		
	Иначе
		СертификатАбонента = Новый Структура("Отпечаток", ПараметрыПодписи.ОтпечатокСертификатаАбонента);
		КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(ПараметрыПодписи.МестоХраненияКлюча, СертификатАбонента);
		
		НайтиСертификатПоОтпечатку(
			ОписаниеОповещения,
			СертификатАбонента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьМЧДФНСПослеПоискаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено ИЛИ НЕ Результат.СертификатНайден Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сертификат абонента не найден';
															|en = 'Сертификат абонента не найден'"));
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СодержимоеВыгрузки") Тогда
		ДанныеXMLВыгрузки = ПолучитьДвоичныеДанныеИзСтроки(
			ДополнительныеПараметры.СодержимоеВыгрузки, "windows-1251", Истина);
	Иначе
		ДанныеXMLВыгрузки = ДокументооборотСКОВызовСервера.ПолучитьИзВременногоХранилищаИУдалить(
			ДополнительныеПараметры.АдресВыгрузки);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ДанныеXMLВыгрузки", ДанныеXMLВыгрузки);
	
	ПараметрыПодписиДоверенности = ДополнительныеПараметры.ПараметрыПодписи;
	ИнтерактивныйРежимКриптографии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПодписиДоверенности,
		"ИнтерактивныйРежимКриптографии", Ложь);
	
	ПараметрыПодписи = Новый Структура;
	ПараметрыПодписи.Вставить("СвойстваСертификата", 			Результат.СвойстваСертификата);
	ПараметрыПодписи.Вставить("Данные", 						ДанныеXMLВыгрузки);
	ПараметрыПодписи.Вставить("ПарольДоступаКЗакрытомуКлючу", 	ПараметрыПодписиДоверенности.ПарольДоступаКЗакрытомуКлючу);
	ПараметрыПодписи.Вставить("ИнтерактивныйРежимКриптографии", ИнтерактивныйРежимКриптографии);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДФНСПослеПодписи",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ЭтоПодписаниеXMLDSig Тогда
		НастройкиПодписи = Новый Структура;
		НастройкиПодписи.Вставить("ДополнитьПространстваИменУзлаПодписи", 	Истина);
		НастройкиПодписи.Вставить("ПодстрокаУзлаДляИнформацииОПодписи", 	"ЭДСФР");
		НастройкиПодписи.Вставить("ИмяСобытияДляИнформацииОПодписи", 		"ЕЦП добавлять SignInfo");
		
		ИнтерфейсыВзаимодействияБРОКлиент.ПодписатьФайлXMLDSig(
			ОписаниеОповещения,
			Результат.СвойстваСертификата,
			ДанныеXMLВыгрузки,
			НастройкиПодписи);
		
	Иначе
		ПодписатьCadesBes(ОписаниеОповещения, ПараметрыПодписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьМЧДФНСПослеПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
		Результат = Новый Структура("Выполнено, ФайлПодписи, ОписаниеОшибки", Результат <> Неопределено, Результат, "");
	КонецЕсли;
	
	Если НЕ Результат.Выполнено Тогда
		Если ТипЗнч(ДополнительныеПараметры.СсылкаНаДоверенность) =
			Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР") Тогда
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось подписать заявление';
																|en = 'Не удалось подписать заявление'")
				+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), ": " + Результат.ОписаниеОшибки, ""));
			
		Иначе
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось подписать доверенность';
																|en = 'Не удалось подписать доверенность'")
				+ ?(ЗначениеЗаполнено(Результат.ОписаниеОшибки), ": " + Результат.ОписаниеОшибки, ""));
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФормаДоверенности 	= ДополнительныеПараметры.ФормаДоверенности;
	ПараметрыПодписи 	= ДополнительныеПараметры.ПараметрыПодписи;
	
	ДополнительныеПараметры.Вставить("ФайлПодписи", Результат.ФайлПодписи);
	ДокументооборотСКОВызовСервера.СохранитьПодписьМЧДФНС(
		ДополнительныеПараметры.ИмяФайлаВыгрузки,
		ДополнительныеПараметры.ДанныеXMLВыгрузки,
		ДополнительныеПараметры.ФайлПодписи,
		ПараметрыПодписи.ОтпечатокСертификатаАбонента,
		?(ФормаДоверенности = Неопределено, ДополнительныеПараметры.СсылкаНаДоверенность, ФормаДоверенности.Объект.Ссылка));
	
	ДополнительныеПараметры.Результат.ИмяФайлаВыгрузки = ДополнительныеПараметры.ИмяФайлаВыгрузки;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
	
КонецПроцедуры


Процедура ПодписатьМЧДЦБ(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено,
		Настройки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 			Ложь);
	Результат.Вставить("ИмяФайлаВыгрузки", 		"");
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("ОтпечатокСертификатаДоверителя", "");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, Настройки);
	КонецЕсли;
	
	Если ФормаДоверенности <> Неопределено И НЕ ФормаДоверенности.Записать() Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось сохранить доверенность';
															|en = 'Не удалось сохранить доверенность'"));
		Если ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	СсылкаНаДоверенностьСУчетомФормы = ?(ФормаДоверенности = Неопределено, СсылкаНаДоверенность,
		ФормаДоверенности.Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СсылкаНаДоверенность", 	СсылкаНаДоверенностьСУчетомФормы);
	ДополнительныеПараметры.Вставить("ФормаДоверенности", 		ФормаДоверенности);
	ДополнительныеПараметры.Вставить("Результат", 				Результат);
	ДополнительныеПараметры.Вставить("Настройки", 			НастройкиВызова);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДЦБПослеПодключенияИнтернетПоддержки",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДокументооборотСКОВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура);
		
	Иначе
		МодульИнтернетПоддержкаПользователейКлиент =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.МодульИнтернетПоддержкаПользователейКлиент();
		
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаДоверенности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьМЧДЦБПослеПодключенияИнтернетПоддержки(
		РезультатПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОрганизацияИлиСсылкаНаОбъект", ДополнительныеПараметры.СсылкаНаДоверенность);
	Если ДополнительныеПараметры.ФормаДоверенности <> Неопределено Тогда
		ПараметрыФормы.ОрганизацияИлиСсылкаНаОбъект = ДополнительныеПараметры.ФормаДоверенности.Объект.Организация;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДЦБПослеВводаПараметров",
		ЭтотОбъект, ДополнительныеПараметры);
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Настройки.ОтпечатокСертификатаДоверителя) Тогда
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("МестоХраненияКлюча", МестоХраненияКлюча);
		РезультатВыполнения.Вставить("ОтпечатокСертификатаАбонента",
			ДополнительныеПараметры.Настройки.ОтпечатокСертификатаДоверителя);
		РезультатВыполнения.Вставить("ПарольДоступаКЗакрытомуКлючу", "");
		РезультатВыполнения.Вставить("ИнтерактивныйРежимКриптографии", Истина);
		РезультатВыполнения.Вставить("МестоХраненияКлючаОрганизации", МестоХраненияКлюча);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		
	Иначе
		ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
		ОткрытьФорму(
			"Справочник." + ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ + ".Форма.ФормаПараметровОтправки",
			ПараметрыФормы,
			ДополнительныеПараметры.ФормаДоверенности,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьМЧДЦБПослеВводаПараметров(
		ПараметрыОтправки,
		ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОтправки = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("ВозвращатьИмяФайлаСРасширением", Истина);
	РезультатВыгрузки = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДЦБ(
		ДополнительныеПараметры.СсылкаНаДоверенность,
		Ложь,
		ПараметрыВозврата);
	Если РезультатВыгрузки = Неопределено ИЛИ НЕ ЗначениеЗаполнено(РезультатВыгрузки.Содержимое) Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось выгрузить доверенность';
															|en = 'Не удалось выгрузить доверенность'"));
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИмяФайлаВыгрузки", 	РезультатВыгрузки.ИмяФайла);
	ДополнительныеПараметры.Вставить("СодержимоеВыгрузки", 	РезультатВыгрузки.Содержимое);
	
	СертификатАбонента = Новый Структура("Отпечаток", ПараметрыОтправки.ОтпечатокСертификатаАбонента);
	КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(ПараметрыОтправки.МестоХраненияКлюча, СертификатАбонента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДЦБПослеПоискаСертификата",
		ЭтотОбъект, ДополнительныеПараметры);
	НайтиСертификатПоОтпечатку(
		ОписаниеОповещения,
		СертификатАбонента);
	
КонецПроцедуры

Процедура ПодписатьМЧДЦБПослеПоискаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено ИЛИ НЕ Результат.СертификатНайден Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сертификат абонента не найден';
															|en = 'Сертификат абонента не найден'"));
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеXMLВыгрузки = ПолучитьДвоичныеДанныеИзСтроки(
		ДополнительныеПараметры.СодержимоеВыгрузки, "utf-8", Истина);
	ДополнительныеПараметры.Вставить("ДанныеXMLВыгрузки", ДанныеXMLВыгрузки);
	
	ПараметрыОтправки = ДополнительныеПараметры.ПараметрыОтправки;
	ИнтерактивныйРежимКриптографии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтправки,
		"ИнтерактивныйРежимКриптографии", Ложь);
	
	ПараметрыПодписи = Новый Структура;
	ПараметрыПодписи.Вставить("СвойстваСертификата", 				Результат.СвойстваСертификата);
	ПараметрыПодписи.Вставить("Данные", 							ДанныеXMLВыгрузки);
	ПараметрыПодписи.Вставить("ПарольДоступаКЗакрытомуКлючу", 		ПараметрыОтправки.ПарольДоступаКЗакрытомуКлючу);
	ПараметрыПодписи.Вставить("ИнтерактивныйРежимКриптографии", 	ИнтерактивныйРежимКриптографии);
	ПараметрыПодписи.Вставить("ВключатьМеткуВремени", 				Истина);
	ПараметрыПодписи.Вставить("МестоХраненияКлючаДляХеширования", 	ПараметрыОтправки.МестоХраненияКлючаОрганизации);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьМЧДЦБПослеПодписи",
		ЭтотОбъект, ДополнительныеПараметры);
	ПодписатьCadesBes(ОписаниеОповещения, ПараметрыПодписи);
	
КонецПроцедуры

Процедура ПодписатьМЧДЦБПослеПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(СтрШаблон(
			НСтр("ru = 'Не удалось подписать доверенность: %1';
				|en = 'Не удалось подписать доверенность: %1'"),
			Результат.ОписаниеОшибки));
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДокументооборотСКОВызовСервера.ЗаписатьМЧДЦБСПодписью(
		ДополнительныеПараметры.ИмяФайлаВыгрузки,
		ДополнительныеПараметры.ДанныеXMLВыгрузки,
		Результат.ФайлПодписи,
		ДополнительныеПараметры.СсылкаНаДоверенность);
	
	Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
		ДополнительныеПараметры.Результат.Выполнено 		= Истина;
		ДополнительныеПараметры.Результат.ИмяФайлаВыгрузки 	= ДополнительныеПараметры.ИмяФайлаВыгрузки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
	КонецЕсли;
	
КонецПроцедуры


Процедура ОповеститьОЗаписиМЧДЕдиногоФормата(ДоверенностьСсылка, Доверители, Представители)
	
	ПараметрОповещения = Новый Структура("Ссылка, СтороныМЧД", ДоверенностьСсылка, Новый Массив);
	
	Для каждого Доверитель Из Доверители Цикл
		Если ЗначениеЗаполнено(Доверитель)
			И ПараметрОповещения.СтороныМЧД.Найти(Доверитель) = Неопределено Тогда
			ПараметрОповещения.СтороныМЧД.Добавить(Доверитель);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Представитель Из Представители Цикл
		Если ЗначениеЗаполнено(Представитель)
			И ПараметрОповещения.СтороныМЧД.Найти(Представитель) = Неопределено Тогда
			ПараметрОповещения.СтороныМЧД.Добавить(Представитель);
		КонецЕсли;
	КонецЦикла;
	
	Оповестить("Запись_МашиночитаемыеДоверенности", ПараметрОповещения, ДоверенностьСсылка);
	
КонецПроцедуры

Процедура ОтправитьМЧДЕдиногоФорматаПослеПодписания(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеСостояния = ДополнительныеПараметры.ДанныеСостояния;
	Подписана = ?(ДанныеСостояния = Неопределено, Ложь, ДанныеСостояния.Подписана);
	ТехническийСтатусПодписана = ?(ДанныеСостояния = Неопределено, Ложь, ДанныеСостояния.ТехническийСтатусПодписана);
	Если Подписана <> Истина Тогда
		ДанныеСостояния = ДокументооборотСКОВызовСервера.ПрочитатьСостояниеМЧДЕдиногоФормата(
			ДополнительныеПараметры.ДоверенностьСсылка);
		ТехническийСтатусПодписана = ?(ДанныеСостояния = Неопределено, Ложь, ДанныеСостояния.ТехническийСтатусПодписана);
	КонецЕсли;
	
	РегистрироватьВФНС = ТехническийСтатусПодписана;
	СвойстваОтправки = ДокументооборотСКОВызовСервера.ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФТС(
		ДополнительныеПараметры.ДоверенностьСсылка);
	РегистрироватьВДругомРеестре = (СвойстваОтправки <> Неопределено
		И СвойстваОтправки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтправки.ВКонверте"));
	
	Если НЕ РегистрироватьВФНС И НЕ РегистрироватьВДругомРеестре Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки",
				Ложь, НСтр("ru = 'Доверенность уже отправлена.';
							|en = 'Доверенность уже отправлена.'"));
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		ЗапоминаемыеПараметры = Новый Соответствие;
		ЗапоминаемыеПараметры["МЧДСкрытьДлительнуюОтправку"] = Истина;
		ПредыдущиеОшибки = ?(РегистрироватьВДругомРеестре, ЗапоминаниеОшибок(Истина,,, ЗапоминаемыеПараметры), Неопределено);
		
		ДополнительныеПараметры.Удалить("ДанныеСостояния");
		ДополнительныеПараметры.Вставить("РегистрироватьВФНС", 				РегистрироватьВФНС);
		ДополнительныеПараметры.Вставить("РегистрироватьВДругомРеестре", 	РегистрироватьВДругомРеестре);
		ДополнительныеПараметры.Вставить("ПредыдущиеОшибки", 				ПредыдущиеОшибки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьМЧДЕдиногоФорматаПослеРегистрацииВДругомРеестре",
			ЭтотОбъект, ДополнительныеПараметры);
		
		СтандартнаяОбработка = Истина;
		
		Если РегистрироватьВДругомРеестре Тогда
			ИнтерфейсыВзаимодействияБРОКлиент.ПриРегистрацииДоверенности(
				ДополнительныеПараметры.ДоверенностьСсылка,
				СтандартнаяОбработка,
				ОписаниеОповещения,
				Истина);
		КонецЕсли;
		
		Если СтандартнаяОбработка Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьМЧДЕдиногоФорматаПослеРегистрацииВДругомРеестре(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.РегистрироватьВДругомРеестре Тогда
		ЗапоминаемыеПараметры = Новый Соответствие;
		ЗапоминаемыеПараметры.Вставить("МЧДСкрытьДлительнуюОтправку", Неопределено);
		ОписаниеОшибки = ЗапоминаниеОшибок(Ложь, ДополнительныеПараметры.ПредыдущиеОшибки,, ЗапоминаемыеПараметры);
	КонецЕсли;
	
	РезультатУстановкиСтатуса = ДокументооборотСКОВызовСервера.УстановитьСтатусРегистрацииВРеестрахМЧДЕдиногоФормата(
		ДополнительныеПараметры.ДоверенностьСсылка,
		ДополнительныеПараметры.РегистрироватьВФНС,
		ДополнительныеПараметры.РегистрироватьВДругомРеестре);
	Если РезультатУстановкиСтатуса.ЗаписаноИзменение Тогда
		ОповеститьОбИзменении(ДополнительныеПараметры.ДоверенностьСсылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатУстановкиСтатуса.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РезультатУстановкиСтатуса.ОписаниеОшибки + ?(ЗначениеЗаполнено(ОписаниеОшибки),
			?(Прав(РезультатУстановкиСтатуса.ОписаниеОшибки, 1) = ".", ". ", " ") + ОписаниеОшибки, "");
	КонецЕсли;
	
	ЕстьОшибки = ЗначениеЗаполнено(ОписаниеОшибки);
	Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", НЕ ЕстьОшибки, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьМЧДЕдиногоФорматаПослеПодписания(Результат, ДополнительныеПараметры) Экспорт
	
	ЗапоминаемыеПараметры = Новый Соответствие;
	ЗапоминаемыеПараметры.Вставить("МЧДОтпечатокРуководителя", 		Неопределено);
	ЗапоминаемыеПараметры.Вставить("МЧДТолькоПодписание", 			Неопределено);
	ЗапоминаемыеПараметры.Вставить("МЧДСкрытьДлительнуюОтправку", 	Неопределено);
	ОписаниеОшибки = ЗапоминаниеОшибок(Ложь, ДополнительныеПараметры.ПредыдущиеОшибки,, ЗапоминаемыеПараметры);
	
	Отказ = Ложь;
	Если Результат.Успех Тогда
		Если ТипЗнч(Результат.СвойстваПодписи) = Тип("Структура") Тогда
			СвойстваПодписи = Результат.СвойстваПодписи;
		Иначе
			СвойстваПодписи = ПолучитьИзВременногоХранилища(Результат.СвойстваПодписи);
		КонецЕсли;
		
		Если НЕ СвойстваПодписи.ПодписьВерна
			И СвойстваПодписи.ТребуетсяПроверка = Ложь Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Сертификат подписи не прошел проверку.';
									|en = 'Сертификат подписи не прошел проверку.'");
			Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		Ошибки = ДокументооборотСКОВызовСервера.ДобавитьПодписьДляМЧДЕдиногоФормата(
			ДополнительныеПараметры.ФайлДоверенности,
			СвойстваПодписи);
		
		Если Ошибки.Количество() > 0 Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось добавить подпись по причине';
									|en = 'Не удалось добавить подпись по причине'") + " " + СтрСоединить(Ошибки, Символы.ПС);
			Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
			
			Возврат;
			
		Иначе
			ДокументооборотСКОВызовСервера.ОбновитьСтатусПослеПодписанияМЧДЕдиногоФормата(
				ДополнительныеПараметры.ДоверенностьСсылка);
			ОповеститьОбИзменении(ДополнительныеПараметры.ДоверенностьСсылка);
			ОповеститьОЗаписиМЧДЕдиногоФормата(
				ДополнительныеПараметры.ДоверенностьСсылка,
				ДополнительныеПараметры.Доверители,
				ДополнительныеПараметры.Представители);
			
			Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Истина, "");
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не удалось отправить машиночитаемую доверенность (единый формат)';
										|en = 'Не удалось отправить машиночитаемую доверенность (единый формат)'");
			КонецЕсли;
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьМЧДПослеПодписания(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьМЧДПослеПолученияКонтекстаЭДО",
		ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьМЧДПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, Результат.ТекстОшибки);
			Если НЕ ЗначениеЗаполнено(РезультатВыполнения.ОписаниеОшибки) Тогда
				РезультатВыполнения.ОписаниеОшибки = ?(ДополнительныеПараметры.ЭтоЗаявление,
					НСтр("ru = 'Не удалось отправить заявление: недостаточно прав';
						|en = 'Не удалось отправить заявление: недостаточно прав'"),
					НСтр("ru = 'Не удалось отправить доверенность: недостаточно прав';
						|en = 'Не удалось отправить доверенность: недостаточно прав'"));
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ЗапоминаемыеПараметры = Новый Соответствие;
	Если ТипЗнч(ДополнительныеПараметры.ДоверенностьСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		ЗапоминаемыеПараметры["МЧДОтпечатокРуководителя"] 	= ДополнительныеПараметры.ОтпечатокРуководителя;
		ЗапоминаемыеПараметры["МЧДТолькоПодписание"] 		= ДополнительныеПараметры.ТолькоПодписание;
	КонецЕсли;
	ЗапоминаемыеПараметры["МЧДСкрытьДлительнуюОтправку"] = Истина;
	ПредыдущиеОшибки = ЗапоминаниеОшибок(Истина,,, ЗапоминаемыеПараметры);
	
	ДополнительныеПараметры.Вставить("ПредыдущиеОшибки", ПредыдущиеОшибки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьМЧДПослеОтправки",
		ЭтотОбъект, ДополнительныеПараметры);
	Если ДополнительныеПараметры.ЭтоЗаявление
		ИЛИ ТипЗнч(ДополнительныеПараметры.ДоверенностьСсылка) =
			Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю")
		ИЛИ ТипЗнч(ДополнительныеПараметры.ДоверенностьСсылка) =
			Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя") Тогда
		
		КонтекстЭДОКлиент.ОтправкаРегламентированногоОтчетаВПФР(ДополнительныеПараметры.ДоверенностьСсылка,
			ОписаниеОповещения);
		
	ИначеЕсли ТипЗнч(ДополнительныеПараметры.ДоверенностьСсылка) =
		Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		
		КонтекстЭДОКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганДляФСС(,
			Истина,
			ДополнительныеПараметры.ДоверенностьСсылка,,,
			ОписаниеОповещения);
		
	Иначе
		КонтекстЭДОКлиент.ОтправкаРегламентированногоОтчетаВФНС(ДополнительныеПараметры.ДоверенностьСсылка,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьМЧДПослеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	ЗапоминаемыеПараметры = Новый Соответствие;
	Если ТипЗнч(ДополнительныеПараметры.ДоверенностьСсылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		ЗапоминаемыеПараметры.Вставить("МЧДОтпечатокРуководителя", 	Неопределено);
		ЗапоминаемыеПараметры.Вставить("МЧДТолькоПодписание", 		Неопределено);
	КонецЕсли;
	ЗапоминаемыеПараметры.Вставить("МЧДСкрытьДлительнуюОтправку", Неопределено);
	ОписаниеОшибки = ЗапоминаниеОшибок(Ложь, ДополнительныеПараметры.ПредыдущиеОшибки,, ЗапоминаемыеПараметры);
	
	ТекстСообщенияПолучитьОбработкуЭДО = "";
	Если ДополнительныеПараметры.ТолькоПодписание Тогда
		ЭтоУспех = ДокументооборотСКОВызовСервера.МЧДПодписана(ДополнительныеПараметры.ДоверенностьСсылка);
	Иначе
		ЭтоУспех = ДокументооборотСКОВызовСервера.ОтчетОтправлен(ДополнительныеПараметры.ДоверенностьСсылка,
			ТекстСообщенияПолучитьОбработкуЭДО);
	КонецЕсли;
	
	Если ЭтоУспех Тогда
		Если НЕ ДополнительныеПараметры.ТолькоПодписание Тогда
			ОрганизацияСсылка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначениеРеквизитаОбъекта(
				ДополнительныеПараметры.ДоверенностьСсылка, "Организация");
			
			// Перерисовка статуса отправки в форме Отчетность
			ПараметрыОповещения = Новый Структура();
			ПараметрыОповещения.Вставить("Ссылка", 		ДополнительныеПараметры.ДоверенностьСсылка);
			ПараметрыОповещения.Вставить("Организация", ОрганизацияСсылка);
			Оповестить("Завершение отправки", ПараметрыОповещения, ДополнительныеПараметры.ДоверенностьСсылка);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Истина, "");
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ОписаниеОшибки = Строка(ОписаниеОшибки)
				+ ?(ЗначениеЗаполнено(ОписаниеОшибки) И ЗначениеЗаполнено(ТекстСообщенияПолучитьОбработкуЭДО), Символы.ПС, "")
				+ ТекстСообщенияПолучитьОбработкуЭДО;
			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ?(ДополнительныеПараметры.ТолькоПодписание, ?(ДополнительныеПараметры.ЭтоЗаявление,
						НСтр("ru = 'Не удалось подписать заявление';
							|en = 'Не удалось подписать заявление'"), НСтр("ru = 'Не удалось подписать доверенность';
																			|en = 'Не удалось подписать доверенность'")),
					?(ДополнительныеПараметры.ЭтоЗаявление,
						НСтр("ru = 'Не удалось отправить заявление';
							|en = 'Не удалось отправить заявление'"), НСтр("ru = 'Не удалось отправить доверенность';
																			|en = 'Не удалось отправить доверенность'")));
			КонецЕсли;
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьМЧДПослеПодписания(Результат, ДополнительныеПараметры) Экспорт
	
	ЗапоминаемыеПараметры = Новый Соответствие;
	ЗапоминаемыеПараметры.Вставить("МЧДОтпечатокРуководителя", 		Неопределено);
	ЗапоминаемыеПараметры.Вставить("МЧДТолькоПодписание", 			Неопределено);
	ЗапоминаемыеПараметры.Вставить("МЧДСкрытьДлительнуюОтправку", 	Неопределено);
	ОписаниеОшибки = ЗапоминаниеОшибок(Ложь, ДополнительныеПараметры.ПредыдущиеОшибки,, ЗапоминаемыеПараметры);
	
	Если (ДополнительныеПараметры.РезультатПроверки = Неопределено ИЛИ ДополнительныеПараметры.РезультатПроверки.Выполнено)
		И ДокументооборотСКОВызовСервера.МЧДПодписана(ДополнительныеПараметры.ДоверенностьСсылка) Тогда
		
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Истина, "");
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ОписаниеОшибки = Строка(ОписаниеОшибки) + ?(ЗначениеЗаполнено(ОписаниеОшибки)
					И ДополнительныеПараметры.РезультатПроверки <> Неопределено
					И НЕ ДополнительныеПараметры.РезультатПроверки.Выполнено
					И ЗначениеЗаполнено(ДополнительныеПараметры.РезультатПроверки.ОписаниеОшибки), Символы.ПС + Символы.ПС, "")
				+ ?(ДополнительныеПараметры.РезультатПроверки = Неопределено
					ИЛИ ДополнительныеПараметры.РезультатПроверки.Выполнено,
					"", ДополнительныеПараметры.РезультатПроверки.ОписаниеОшибки);
			
			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				Если ТипЗнч(ДополнительныеПараметры.ДоверенностьСсылка) =
					Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР") Тогда
					
					ОписаниеОшибки = ?(ДополнительныеПараметры.РезультатПроверки = Неопределено
						ИЛИ ДополнительныеПараметры.РезультатПроверки.Выполнено,
						НСтр("ru = 'Не удалось подписать заявление';
							|en = 'Не удалось подписать заявление'"),
						НСтр("ru = 'Заявление заполнено некорректно';
							|en = 'Заявление заполнено некорректно'"));
					
				Иначе
					ОписаниеОшибки = ?(ДополнительныеПараметры.РезультатПроверки = Неопределено
						ИЛИ ДополнительныеПараметры.РезультатПроверки.Выполнено,
						НСтр("ru = 'Не удалось подписать доверенность';
							|en = 'Не удалось подписать доверенность'"),
						НСтр("ru = 'Доверенность заполнена некорректно';
							|en = 'Доверенность заполнена некорректно'"));
				КонецЕсли;
			КонецЕсли;
			
			РезультатВыполнения = Новый Структура("Выполнено, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЗапоминаниеОшибок(
		ЗапоминатьОшибки = Ложь,
		ПредыдущиеОшибки = Неопределено,
		ТолькоВернутьСчетчик = Ложь,
		ЗапоминаемыеПараметры = Неопределено) Экспорт
	
	Если ЗапоминатьОшибки = Истина ИЛИ ТолькоВернутьСчетчик Тогда
		ЗначенияПараметровДлительнойОтправки = ДлительнаяОтправкаКлиентСервер.ЗначенияПараметровДлительнойОтправки();
		СчетчикЗапоминаниеОшибок = ЗначенияПараметровДлительнойОтправки.Получить("СчетчикЗапоминаниеОшибок");
		СчетчикЗапоминаниеОшибок = ?(ЗначениеЗаполнено(СчетчикЗапоминаниеОшибок), СчетчикЗапоминаниеОшибок, 0);
		
		Если ТолькоВернутьСчетчик Тогда
			Если ЗапоминаемыеПараметры <> Неопределено Тогда
				Если ТипЗнч(ЗапоминаемыеПараметры) = Тип("Строка") Тогда
					Если СчетчикЗапоминаниеОшибок = 0 Тогда
						Возврат Неопределено;
					Иначе
						КлючЗапоминаемогоПараметра = ЗапоминаемыеПараметры;
						Возврат ЗначенияПараметровДлительнойОтправки.Получить(КлючЗапоминаемогоПараметра);
					КонецЕсли;
				КонецЕсли;
				
				КлючиЗапоминаемыхПараметров = Новый Массив;
				Для каждого ЗапоминаемыйПараметр Из ЗапоминаемыеПараметры Цикл
					КлючиЗапоминаемыхПараметров.Добавить(ЗапоминаемыйПараметр.Ключ);
				КонецЦикла;
				Для каждого КлючЗапоминаемогоПараметра Из КлючиЗапоминаемыхПараметров Цикл
					ЗначениеЗапоминаемогоПараметра = ЗначенияПараметровДлительнойОтправки.Получить(КлючЗапоминаемогоПараметра);
					ЗапоминаемыеПараметры.Вставить(КлючЗапоминаемогоПараметра, ЗначениеЗапоминаемогоПараметра);
				КонецЦикла;
			КонецЕсли;
			
			Возврат СчетчикЗапоминаниеОшибок;
		КонецЕсли;
		СчетчикЗапоминаниеОшибок = СчетчикЗапоминаниеОшибок + 1;
		
		ПредыдущиеОшибкиКлиент = ЗначенияПараметровДлительнойОтправки.Получить("Ошибки");
		ДлительнаяОтправкаКлиентСервер.ИзменитьПараметрыДлительнойОтправки("СчетчикЗапоминаниеОшибок",
			СчетчикЗапоминаниеОшибок);
		ОшибкиПустоеЗначение = ДлительнаяОтправкаКлиентСервер.ЗначенияПараметровПоУмолчанию()["Ошибки"];
		ДлительнаяОтправкаКлиентСервер.ИзменитьПараметрыДлительнойОтправки("Ошибки", ОшибкиПустоеЗначение);
		
		Если ЗапоминаемыеПараметры <> Неопределено Тогда
			Для каждого ЗапоминаемыйПараметр Из ЗапоминаемыеПараметры Цикл
				ДлительнаяОтправкаКлиентСервер.ИзменитьПараметрыДлительнойОтправки(ЗапоминаемыйПараметр.Ключ,
					ЗапоминаемыйПараметр.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ПредыдущиеОшибкиСервер = ДокументооборотСКОВызовСервера.ЗапоминаниеОшибок(
			СчетчикЗапоминаниеОшибок,,,
			ЗапоминаемыеПараметры);
		
		Результат = Новый Структура;
		Результат.Вставить("ПредыдущиеОшибкиКлиент", ПредыдущиеОшибкиКлиент);
		Результат.Вставить("ПредыдущиеОшибкиСервер", ПредыдущиеОшибкиСервер);
		
		Возврат Результат;
		
	Иначе
		Если ПредыдущиеОшибки = Неопределено Тогда
			ПредыдущиеОшибки = Новый Структура;
			ПредыдущиеОшибки.Вставить("ПредыдущиеОшибкиКлиент", Неопределено);
			ПредыдущиеОшибки.Вставить("ПредыдущиеОшибкиСервер", Неопределено);
		КонецЕсли;
		Если ПредыдущиеОшибки.ПредыдущиеОшибкиКлиент = Неопределено Тогда
			ПредыдущиеОшибки.ПредыдущиеОшибкиКлиент = ДлительнаяОтправкаКлиентСервер.ЗначенияПараметровПоУмолчанию()["Ошибки"];
		КонецЕсли;
		Если ПредыдущиеОшибки.ПредыдущиеОшибкиСервер = Неопределено Тогда
			ПредыдущиеОшибки.ПредыдущиеОшибкиСервер = ДлительнаяОтправкаКлиентСервер.ЗначенияПараметровПоУмолчанию()["Ошибки"];
		КонецЕсли;
		
		ЗначенияПараметровДлительнойОтправки = ДлительнаяОтправкаКлиентСервер.ЗначенияПараметровДлительнойОтправки();
		ОшибкиВыполнения = ЗначенияПараметровДлительнойОтправки.Получить("Ошибки");
		СчетчикЗапоминаниеОшибок = ЗначенияПараметровДлительнойОтправки.Получить("СчетчикЗапоминаниеОшибок");
		Если ЗапоминатьОшибки = "Сброс" Тогда
			Если НЕ ЗначениеЗаполнено(СчетчикЗапоминаниеОшибок) Тогда
				Возврат "";
			КонецЕсли;
			СчетчикЗапоминаниеОшибок = 0;
			
		Иначе
			СчетчикЗапоминаниеОшибок = ?(ЗначениеЗаполнено(СчетчикЗапоминаниеОшибок) И СчетчикЗапоминаниеОшибок > 0,
				СчетчикЗапоминаниеОшибок - 1, 0);
		КонецЕсли;
		
		ДлительнаяОтправкаКлиентСервер.ИзменитьПараметрыДлительнойОтправки("Ошибки",
			ПредыдущиеОшибки.ПредыдущиеОшибкиКлиент);
		ДлительнаяОтправкаКлиентСервер.ИзменитьПараметрыДлительнойОтправки("СчетчикЗапоминаниеОшибок",
			СчетчикЗапоминаниеОшибок);
		
		МассивОшибок = Новый Массив;
		Если ОшибкиВыполнения <> Неопределено Тогда
			Для каждого ОшибкаВыполнения Из ОшибкиВыполнения Цикл
				МассивОшибок.Добавить(ОшибкаВыполнения.ОписаниеОшибки);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗапоминаемыеПараметры <> Неопределено Тогда
			Для каждого ЗапоминаемыйПараметр Из ЗапоминаемыеПараметры Цикл
				ДлительнаяОтправкаКлиентСервер.ИзменитьПараметрыДлительнойОтправки(ЗапоминаемыйПараметр.Ключ,
					ЗапоминаемыйПараметр.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ОшибкиВыполнения = ДокументооборотСКОВызовСервера.ЗапоминаниеОшибок(
			СчетчикЗапоминаниеОшибок,
			ПредыдущиеОшибки.ПредыдущиеОшибкиСервер,,
			ЗапоминаемыеПараметры);
		Если ОшибкиВыполнения <> Неопределено Тогда
			Для каждого ОшибкаВыполнения Из ОшибкиВыполнения Цикл
				МассивОшибок.Добавить(ОшибкаВыполнения.ОписаниеОшибки);
			КонецЦикла;
		КонецЕсли;
		
		Если МассивОшибок.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат СтрСоединить(МассивОшибок, Символы.ПС + Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЕстьИменаПроцедурВОповещенияхОЗавершении(ИменаПроцедур, ВыполняемоеОповещениеОЗавершении) Экспорт
	
	ОповещениеОЗавершении = ВыполняемоеОповещениеОЗавершении;
	МассивИменПроцедур = ИменаПроцедур;
	Если ТипЗнч(МассивИменПроцедур) = Тип("Строка") Тогда
		МассивИменПроцедур = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивИменПроцедур);
	КонецЕсли;
	
	Пока ОповещениеОЗавершении <> Неопределено Цикл
		Для каждого ИмяПроцедуры Из МассивИменПроцедур Цикл
			Если СтрНайти(ОповещениеОЗавершении.ИмяПроцедуры, ИмяПроцедуры) <> 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеПараметры = ОповещениеОЗавершении.ДополнительныеПараметры;
		Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура")
			И ТипЗнч(ДополнительныеПараметры) <> Тип("ФиксированнаяСтруктура") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОповещениеОЗавершении")
			И ТипЗнч(ДополнительныеПараметры.ОповещениеОЗавершении) = Тип("ОписаниеОповещения") Тогда
			ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
		ИначеЕсли ДополнительныеПараметры.Свойство("ВыполняемоеОповещение")
			И ТипЗнч(ДополнительныеПараметры.ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ОповещениеОЗавершении = ДополнительныеПараметры.ВыполняемоеОповещение;
		ИначеЕсли ДополнительныеПараметры.Свойство("Оповещение")
			И ТипЗнч(ДополнительныеПараметры.Оповещение) = Тип("ОписаниеОповещения") Тогда
			ОповещениеОЗавершении = ДополнительныеПараметры.Оповещение;
		Иначе
			ОповещениеОЗавершении = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбмен(Форма, ВыполняемоеОповещение, Организация) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ВсеОрганизации = Новый Массив;
	ВсеОрганизации.Добавить(Организация);
	
	ПараметрыДлительногоОбмена = ДлительнаяОтправкаКлиент.ПараметрыДлительногоОбмена();
	ПараметрыДлительногоОбмена.Организации 					= ВсеОрганизации;
	ПараметрыДлительногоОбмена.ЭтоОбменИзФормы1СОтчетность 	= Ложь;
	
	Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительногоОбмена(ПараметрыДлительногоОбмена) Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьОбменЗавершение", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Форма.КонтекстЭДОКлиент.ОсуществитьОбменПоОрганизации(
		Форма, 
		Организация, 
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОтправкаКлиент.ОповеститьОЗавершенииОбмена();
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполняемоеОповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПоказатьВходящееИзвещениеФНС(Владелец, ПредставлениеXML) Экспорт 
	ПараметрыВизуализации = Новый Структура;
	ПараметрыВизуализации.Вставить("ПредставлениеXML", ПредставлениеXML);
	Попытка
		ПараметрыВизуализации.Вставить("Владелец", Владелец.Объект.Ссылка);
	Исключение
		ПараметрыВизуализации.Вставить("Владелец", ПредопределенноеЗначение("Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов.ПустаяСсылка"));
	КонецПопытки;
	ОткрытьФорму("Отчет.ВизуализацияВходящихИзвещенийФНС.Форма.ФормаПечати", ПараметрыВизуализации, Владелец);
КонецПроцедуры

Функция ЭтоКорректныйВидСверки(ВидУслуги) Экспорт
	
	Если ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом")
		ИЛИ ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		
		Текст =
			НСтр("ru = 'С 1 января 2023 г. в соответствии с приказом ФНС от 29 декабря 2022 г. № ЕД-7-19/1295@ ФНС не поддерживает запросы на сверку с видом ""%1"". ';
				|en = 'С 1 января 2023 г. в соответствии с приказом ФНС от 29 декабря 2022 г. № ЕД-7-19/1295@ ФНС не поддерживает запросы на сверку с видом ""%1"". '")
			+ НСтр("ru = 'Вместо этого вида сверки рекомендуется запросить сверку ""%2"".';
					|en = 'Вместо этого вида сверки рекомендуется запросить сверку ""%2"".'");
		
		Если ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом") Тогда
			Замена = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОНаличииСальдо");
		ИначеЕсли ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
			Замена = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОПринадлежностиСумм");
		КонецЕсли;
		
		Текст = СтрШаблон(Текст, Строка(ВидУслуги), Строка(Замена));
		ПоказатьПредупреждение(, Текст);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПредставлениеСверкиСФНС(ЗапросИОН, ТекстXML) Экспорт 
	Возврат ДокументооборотСКОВызовСервера.ПредставлениеСверкиСФНС(ЗапросИОН, ТекстXML);
КонецФункции

Процедура СообщитьОНевозможностиОтправкиНаТарифе(СсылкаНаОбъект) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СообщениеОНевозможностиОтправкиНаТарифе_ПослеЗакрытияПредупреждения", 
		ЭтотОбъект, 
		ПараметрыФормы);
	
	ОткрытьФорму(
		"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.СообщениеОНевозможностиОтправкиНаТарифеПромоЕНС",
		ПараметрыФормы
		,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура СообщениеОНевозможностиОтправкиНаТарифе_ПослеЗакрытияПредупреждения(Организация, ВходящийКонтекст) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Организация", Организация);
	
	ФлагиВМастер = Новый Структура();
	ФлагиВМастер.Вставить("ПодключаемоеНаправление", 					"ФНС");
	ФлагиВМастер.Вставить("ПродлитьСертификат", 						Ложь);
	ФлагиВМастер.Вставить("ИзменитьРеквизитыПодключенияК1СОтчетности", 	Ложь);
	ФлагиВМастер.Вставить("ПродлитьЛицензиюНа1СОтчетность", 			Ложь);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ФлагиВМастер", ФлагиВМастер);
	
	ПараметрыОткрытияФормы.Вставить("АктивироватьФлагиМастера", ДополнительныеПараметры);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		Организация, 
		ЭтотОбъект,
		,
		ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение"),
		ПараметрыОткрытияФормы);
	
КонецПроцедуры

#Область АкцияПромоКадровыеРешени

Процедура ПоказатьРекламуАкцииКадровыеРешения(Организация = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьРекламуАкцииКадровыеРешения_ПослеПолучениеКонтекста", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПоказатьРекламуАкцииКадровыеРешения_ПослеПолучениеКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьРекламуАкцииКадровыеРешения_ОтправитьЗаявление", 
		ЭтотОбъект, 
		ВходящийКонтекст);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.АкцияФССПлюсПФР",
		, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
		
	КонецПроцедуры
	
Процедура ПоказатьРекламуАкцииКадровыеРешения_ОтправитьЗаявление(ОтправитьЗаявление, ВходящийКонтекст) Экспорт
	
	Если ОтправитьЗаявление <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗаявлениеСТарифомОператораЭДО(ПредопределенноеЗначение("Перечисление.ТарифыОператораЭДО.КадровыеРешения"));
		
КонецПроцедуры
	
#КонецОбласти

#Область АкцияПромоЕНС

Процедура ПоказатьРекламуПромоЕНС(Организация = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", Организация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьРекламуПромоЕНС_ПослеПолучениеКонтекста", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПоказатьРекламуПромоЕНС_ПослеПолучениеКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьРекламуПромоЕНС_ОтправитьЗаявление", 
		ЭтотОбъект, 
		ВходящийКонтекст);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПромоЕНС",
		, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
		
КонецПроцедуры
	
Процедура ПоказатьРекламуПромоЕНС_ОтправитьЗаявление(ОтправитьЗаявление, ВходящийКонтекст) Экспорт
	
	Если ОтправитьЗаявление <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗаявлениеСТарифомОператораЭДО(ПредопределенноеЗначение("Перечисление.ТарифыОператораЭДО.ПромоЕНС"));
		
КонецПроцедуры	
	
#КонецОбласти

Функция ПроверитьИЗаписать(Форма) Экспорт
	
	Если Не Форма.ПроверитьЗаполнение() ИЛИ Не Форма.Записать() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Процедура ОткрытьЗаявлениеСТарифомОператораЭДО(ТарифОператораЭДО) Экспорт
	
	ПараметрыОткрытияМастера = Новый Структура();
	ПараметрыОткрытияМастера.Вставить("ТарифОператораЭДО", ТарифОператораЭДО);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		,
		,
		,
		ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное"),
		ПараметрыОткрытияМастера);
		
КонецПроцедуры

#КонецОбласти
