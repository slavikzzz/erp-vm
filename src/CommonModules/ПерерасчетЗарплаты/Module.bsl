#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак того, требуется ли произвести перерасчет зарплаты по сотрудникам организации
// за указанный месяц.
//
// Параметры:
//		Организация	- СправочникСсылка.Организации
//		Месяц		- Дата
//		Сотрудники	- СправочникСсылка.Сотрудники или массив ссылок.
//
// Возвращаемое значение:
//		Число - Количество сотрудников, для которых требуется выполнить доначисление (перерасчет).
//
Функция ТребуетсяПерерасчетПериода(Организация, Месяц, Сотрудники = Неопределено) Экспорт
		
	МассивСотрудников = СотрудникиКПерерасчету(Организация, Месяц, Сотрудники);
	Возврат МассивСотрудников.Количество();
	
КонецФункции

// Возвращает массив сотрудников по которым необходимо выполнить доначисления (перерасчет)
// в указанной организации и за указанный месяц.
//
// Параметры:
//		Организация	- СправочникСсылка.Организации
//		Месяц		- Дата
//		Сотрудники	- СправочникСсылка.Сотрудники или массив ссылок.
//
// Возвращаемое значение:
//		Массив
//
Функция СотрудникиКПерерасчету(Организация, Месяц, Сотрудники = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Месяц));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПерерасчетЗарплаты.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПерерасчетЗарплаты
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|ГДЕ
		|	ПерерасчетЗарплаты.Организация = &Организация
		|	И ПерерасчетЗарплаты.ПериодДействия = &Месяц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОсновныеСотрудникиФизическихЛиц.Сотрудник
		|ИЗ
		|	РегистрСведений.ПерерасчетУдержаний КАК ПерерасчетУдержаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ПО ПерерасчетУдержаний.Организация.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
		|			И ПерерасчетУдержаний.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|			И (НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&Месяц, МЕСЯЦ), ДЕНЬ) МЕЖДУ ОсновныеСотрудникиФизическихЛиц.ДатаНачала И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания)
		|ГДЕ
		|	ПерерасчетУдержаний.Организация = &Организация
		|	И ПерерасчетУдержаний.ПериодДействия = &Месяц";
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьЗапросСотрудниковПересчетаПериода(Запрос);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПерерасчетЗарплаты.Сотрудник
			|ИЗ
			|	ВТПерерасчетЗарплаты КАК ПерерасчетЗарплаты";
	
	Если Сотрудники <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ПерерасчетЗарплаты.Сотрудник В (&Сотрудники)";
		
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.УстановитьПараметр("Сотрудники", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
		Иначе
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

// Устанавливает отображение надписи о необходимости произвести перерасчет
// зарплаты в форме документа начисление зарплаты.
//
// Параметры:
//		Форма			- ФормаКлиентскогоПриложения
//
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчетаВФормеДокумента(Форма, Документ) Экспорт
	
	Если Форма.Объект.РежимДоначисления Тогда
		ОтображениеСообщения = Ложь;
	Иначе
		ОтображениеСообщения = Не Форма.ЗаполнениеВыполнено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Подразделение) Тогда
		СписокСотрудников = Форма.Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Иначе
		СписокСотрудников = Неопределено;
	КонецЕсли;
	
	УстановитьОтображениеСообщенияОНеобходимостиПерерасчета(
		Форма, Форма.Объект.Организация, Форма.Объект.МесяцНачисления, Не ОтображениеСообщения, СписокСотрудников, Документ);
	
КонецПроцедуры

// Устанавливает отображение надписи о необходимости произвести перерасчет
// зарплаты в указанном месяце.
//
// Параметры:
//		Форма			- ФормаКлиентскогоПриложения
//		Организация		- СправочникСсылка.Организации
//		Месяц			- Дата
//		СкрытьСообщение - Булево
//
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчета(Форма, Организация, Месяц, СкрытьСообщение = Ложь, СписокСотрудников = Неопределено, Документ = Неопределено) Экспорт
	
	ТекстСообщения = "";
	ДоступноПерезаполнениеСотрудников = Ложь;
	
	Если Не СкрытьСообщение Тогда
		
		КоличествоСотрудниковКПерерасчету = ТребуетсяПерерасчетПериода(Организация, Месяц, СписокСотрудников);
		Если КоличествоСотрудниковКПерерасчету > 0 Тогда
			
			КоличествоСотрудниковПредставление = "";
			Если КоличествоСотрудниковКПерерасчету > 4 И КоличествоСотрудниковКПерерасчету < 20 Тогда
				КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru = 'и';
																													|en = 'and'") + " " + НСтр("ru = 'сотрудников';
																																			|en = 'employees'");
			Иначе
				
				Единицы = КоличествоСотрудниковКПерерасчету - Цел(КоличествоСотрудниковКПерерасчету / 10) * 10;
				Если Единицы = 1 Тогда
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru = 'го';
																														|en = 'year'") + " " + НСтр("ru = 'сотрудника';
																																				|en = 'employee'");
				ИначеЕсли Единицы > 1 И Единицы < 5 Тогда
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru = 'х';
																														|en = 'h'") + " " + НСтр("ru = 'сотрудников';
																																				|en = 'employees'");
				Иначе
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru = 'и';
																														|en = 'and'") + " " + НСтр("ru = 'сотрудников';
																																				|en = 'employees'");
				КонецЕсли; 
				
			КонецЕсли;
			
			ТекстСообщения = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Требуется доначисление (перерасчет) для';
					|en = 'Additional accrual (recalculation) is required for'") + " " + КоличествоСотрудниковПредставление + " " + НСтр("ru = 'за';
																															|en = 'for'") + " ",
				Формат(Месяц, "ДФ='ММММ гггг'") + " (",
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее';
												|en = 'Details'") + "...", , , , "Подробнее"),
				"). ");
			
			Если Документ <> Неопределено И Не ПериодНачисленияЗарплатыЗакрыт(Организация, Месяц, Документ) Тогда
				
				ДоступноПерезаполнениеСотрудников = Истина;
				Если КоличествоСотрудниковКПерерасчету = 1 Тогда
					ЗаголовокКоманды = НСтр("ru = 'Пересчитать';
											|en = 'Recalculate'") + " " + НСтр("ru = 'сотрудника';
																			|en = 'employee'");
				ИначеЕсли КоличествоСотрудниковКПерерасчету > 4 И КоличествоСотрудниковКПерерасчету < 20 Тогда
					ЗаголовокКоманды = НСтр("ru = 'Пересчитать';
											|en = 'Recalculate'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru = 'сотрудников';
																																		|en = 'employees'");
				Иначе
					
					Единицы = КоличествоСотрудниковКПерерасчету - Цел(КоличествоСотрудниковКПерерасчету / 10) * 10;
					Если Единицы > 0 И Единицы < 5 Тогда
						ЗаголовокКоманды = НСтр("ru = 'Пересчитать';
												|en = 'Recalculate'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru = 'сотрудника';
																																			|en = 'employee'");
					Иначе
						ЗаголовокКоманды = НСтр("ru = 'Пересчитать';
												|en = 'Recalculate'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru = 'сотрудников';
																																			|en = 'employees'");
					КонецЕсли;
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы,
					"ПересчитатьСотрудников",
					"Заголовок",
					ЗаголовокКоманды);
				
			КонецЕсли;
			
		Иначе
			СкрытьСообщение = Истина;
			ТекстСообщения = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПересчитатьСотрудников",
		"Видимость",
		Не СкрытьСообщение И ДоступноПерезаполнениеСотрудников);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДоначислитьСейчас",
		"Видимость",
		Не СкрытьСообщение И Не ДоступноПерезаполнениеСотрудников);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СообщениеОНеобходимостиПерерасчетаКартинка",
		"Видимость",
		Не СкрытьСообщение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СообщениеОНеобходимостиПерерасчетаНадпись",
		"Видимость",
		Не СкрытьСообщение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СообщениеОНеобходимостиПерерасчетаНадпись",
		"Заголовок",
		ТекстСообщения);
	
КонецПроцедуры

// Процедура предназначена для добавления строк перерасчета удержаний сотрудникам.
// Выполняется при выявлении удержаний.
//
// Параметры
//	- МенеджерВременныхТаблиц, содержащий ВТСотрудникиПериоды с полями Сотрудник, Организация, ДатаНачала, ДатаОкончания.
//	- Удержания - таблица значений с полями
//	* ФизическоеЛицо
//	* Организация
//	* Удержание
//	* ДатаНачала
//	* ДатаОкончания
//	- ДополнительныеСвойства - Структура, дополнительные свойства менеджера расчета.
//
Процедура ЗаполнитьПерерассчитываемыеУдержания(МенеджерВременныхТаблиц, Удержания, ДополнительныеСвойства) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("ТаблицаПерерассчитываемыхУдержаний") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура(
		"ГоловнаяОрганизация,
		|ФизическоеЛицо,
		|Удержание,
		|ДокументОснование");
		
	Для Каждого СтрокаПерерасчетовУдержаний Из ДополнительныеСвойства.ТаблицаПерерассчитываемыхУдержаний Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаПерерасчетовУдержаний);
		СтрокиУдержаний = Удержания.НайтиСтроки(СтруктураСтроки);
		
		ДобавлятьСторноУдержаний = Истина;
		Для Каждого СтрокаУдержаний Из СтрокиУдержаний Цикл
			
			Если НачалоМесяца(СтрокаУдержаний.ДатаНачала) = СтрокаПерерасчетовУдержаний.ДатаНачала Тогда
				
				ДобавлятьСторноУдержаний = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДобавлятьСторноУдержаний Тогда
			
			НоваяСтрокаУдержания = Удержания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУдержания, СтрокаПерерасчетовУдержаний);
			НоваяСтрокаУдержания.ФиксСторно = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура предназначена для добавления физических лиц к выявлению удержаний.
//
// Параметры
//	- ТаблицаФизическихЛиц, Таблица значений, см. МенеджерРасчетаЗарплаты.ТаблицаФизическихЛиц
//	- МенеджерРасчета - Обработка.МенеджерРасчетаЗарплаты.
Процедура ДополнитьТаблицуФизическихЛицДаннымиПерерасчетов(ТаблицаФизическихЛиц, МенеджерРасчета) Экспорт
	Если Не МенеджерРасчета.ДополнительныеСвойства.Свойство("ТаблицаПерерассчитываемыхУдержаний") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПерерассчитываемыхУдержаний = МенеджерРасчета.ДополнительныеСвойства.ТаблицаПерерассчитываемыхУдержаний;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПерерассчитываемыхУдержаний, ТаблицаФизическихЛиц);
КонецПроцедуры

// Процедура добавляет предельные суммы по перерассчитываемым удержаниям.
//
// Параметры
//	- ПредельныеСуммыУдержаний - таблица значений с полями предельных сумм удержаний.
//	- МенеджерРасчетаЗарплаты - ОбработкаОбъект.МенеджерРасчетаЗарплаты
//
Процедура ДоплнитьПредельныеСуммыПерерассчитываемымиУдержаниями(ПредельныеСуммыУдержаний, МенеджерРасчетаЗарплаты) Экспорт
	
	Если Не МенеджерРасчетаЗарплаты.ДополнительныеСвойства.Свойство("ТаблицаПерерассчитываемыхУдержаний") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПерерассчитываемыхУдержаний = МенеджерРасчетаЗарплаты.ДополнительныеСвойства.ТаблицаПерерассчитываемыхУдержаний;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаПерерассчитываемыхУдержаний, "ВТПерерассчитываемыеУдержания");
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдержанияДоПределаПоСотрудникам.Организация КАК Организация,
		|	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УдержанияДоПределаПоСотрудникам.Удержание КАК Удержание,
		|	УдержанияДоПределаПоСотрудникам.ДокументОснование КАК ДокументОснование,
		|	УдержанияДоПределаПоСотрудникам.Сумма КАК Сумма
		|ИЗ
		|	РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПерерассчитываемыеУдержания КАК ВТПерерассчитываемыеУдержания
		|		ПО УдержанияДоПределаПоСотрудникам.Период = НАЧАЛОПЕРИОДА(ВТПерерассчитываемыеУдержания.ДатаНачала, МЕСЯЦ)
		|			И УдержанияДоПределаПоСотрудникам.Организация = ВТПерерассчитываемыеУдержания.ГоловнаяОрганизация
		|			И УдержанияДоПределаПоСотрудникам.ФизическоеЛицо = ВТПерерассчитываемыеУдержания.ФизическоеЛицо
		|			И УдержанияДоПределаПоСотрудникам.Удержание = ВТПерерассчитываемыеУдержания.Удержание
		|			И УдержанияДоПределаПоСотрудникам.ДокументОснование = ВТПерерассчитываемыеУдержания.ДокументОснование
		|ГДЕ
		|	УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ПредельныеСуммыУдержаний);
		
КонецПроцедуры

// Заполняет суммы перерассчитываемых удержаний, которых совсем не осталось в составе плановых.
//
// Параметры
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, содержащий ВТСотрудникиПериоды с полями Сотрудник, Организация, ДатаНачала, ДатаОкончания.
//		ОчередностьРасчета	- очередность расчета удержаний, рассчитываемых в данный момент.
//		СтрокиПоИдентификатору	- Соответствие, где Ключ - идентификатор строки, значение строка удержаний.
//
Процедура ЗаполнитьРезультатыФиксСторноУдержаний(МенеджерВременныхТаблиц, ОчередностьРасчета, СтрокиПоИдентификатору) Экспорт
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРегистрРасчета_Удержания")
		Или Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТУдержанныеСуммы") Тогда
		
		Возврат
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	СУММА(ЕСТЬNULL(УдержанныеСуммы.Сумма, 0)) КАК Сумма
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанныеСуммы КАК УдержанныеСуммы
		|		ПО (УдержанныеСуммы.ФизическоеЛицо = Удержания.ФизическоеЛицо)
		|			И (УдержанныеСуммы.Организация = Удержания.Организация)
		|			И (УдержанныеСуммы.ВидРасчета = Удержания.ВидРасчета)
		|			И (УдержанныеСуммы.ДокументОснование = Удержания.ДокументОснование)
		|			И (УдержанныеСуммы.Месяц = НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ))
		|ГДЕ
		|	Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
		|	И Удержания.ФиксСторно
		|	И НЕ Удержания.ФиксРасчет
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Строка.Результат = - Выборка.Сумма;
		Строка.ЗаписьРасчета.Результат = Строка.Результат;
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует перерасчеты по предварительным данным в регистре ПредварительныеПерерасчеты
//
Процедура РегистрацияПерерасчетовПоПредварительнымДанным(Регистратор = Неопределено, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ЕстьПредварительныеПерерасчеты(Регистратор, Организация) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТПредварительныеПерерасчеты(МенеджерВременныхТаблиц, Регистратор, Организация);
		УдалитьПредварительныеПерерасчеты(МенеджерВременныхТаблиц);
		РасчетЗарплатыРасширенный.СоздатьВТПредварительныеПерерасчетыНачислений(МенеджерВременныхТаблиц);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.СоздатьВТПредварительныеПерерасчетыЛьгот(МенеджерВременныхТаблиц);
		КонецЕсли;
		РасчетЗарплатыРасширенный.СоздатьВТПредварительныеПерерасчетыУдержаний(МенеджерВременныхТаблиц);
		
		СоздатьВТКонтролируемыеНачисления(МенеджерВременныхТаблиц, "ВТОтобранныеНачисления");
		ЗарегистрироватьПерерасчетыНачислений(МенеджерВременныхТаблиц);
		// Регистрация перерасчетов льгот
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ЗарегистрироватьПерерасчетыЛьгот(МенеджерВременныхТаблиц);
		КонецЕсли;
		
		ЗарегистрироватьПерерасчетыУдержаний(МенеджерВременныхТаблиц);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регистрация перерасчетов по предварительным данным';
										|en = 'Recalculation registration by preliminary data'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками табличных частей начислений документов
//
Процедура СформироватьДвиженияИсходныеДанныхПерерасчетов(Движения, Организация, ПериодРегистрации, Начисления) Экспорт	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление");
	Регистратор = Движения.ИсходныеДанныеПерерасчетов.Отбор.Регистратор.Значение;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРасчета, "ТребуетсяРасчетБазы,ЗачетНормыВремени,СпособВыполненияНачисления,ВидДокументаНачисления");
	Для Каждого Строка Из Начисления Цикл
		ВидРасчетаИнфо = ЗначенияРеквизитов[Строка.Начисление];
		Если Не НачислениеВозможноСторнировать(ВидРасчетаИнфо, Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.ИсходныеДанныеПерерасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Результат = Строка.Сумма;
		НоваяСтрока.ДатаОкончания = КонецДня(Строка.ДатаОкончания);
		НоваяСтрока.ПериодРегистрации = НачалоМесяца(ПериодРегистрации);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		Если Не ЗначениеЗаполнено(НоваяСтрока.НачалоБазовогоПериода) 
			И Не ЗначениеЗаполнено(НоваяСтрока.ОкончаниеБазовогоПериода) Тогда
			НоваяСтрока.НачалоБазовогоПериода = Строка.ДатаНачала;
			НоваяСтрока.ОкончаниеБазовогоПериода = Строка.ДатаОкончания;
			ЗаполнитьБазовыйПериод(НоваяСтрока, Строка);
		КонецЕсли;
		Если НоваяСтрока.ДокументОснование <> Неопределено И НоваяСтрока.ДокументОснование.Пустая() Тогда
			НоваяСтрока.ДокументОснование = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Движения.ИсходныеДанныеПерерасчетов.Записывать = Истина;	
КонецПроцедуры

// Регистрирует перерасчеты по предварительным данным в регистре ПредварительныеПерерасчеты в фоне.
//
Процедура РегистрацияПерерасчетовПоПредварительнымДаннымВФоне(Регистратор = Неопределено, Организация = Неопределено) Экспорт
	
	Параметры = Новый Массив;
	Параметры.Добавить(Регистратор);
	Параметры.Добавить(Организация);
	ФоновыеЗадания.Выполнить("ПерерасчетЗарплаты.РегистрацияПерерасчетовПоПредварительнымДанным", Параметры);
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет, по окончании проведения документа
// начисление зарплаты.
//
// Параметры:
//		Регистратор							- ДокументСсылка.НачислениеЗарплаты
//		УдалитьПерерасчетыТекущегоПериода	- Булево, Истина если было произведено перезаполнение
//												формы документа и перерасчеты текущего месяца начисления
//												учтены в таблице начислений
//		ПериодыРасчетаСотрудников			- ТаблицаЗначений, с перерасчетами сотрудников проведенных до перепроведения документа,
//													если в ходе работы с документами были удалены записи перерасчетов, информация
//													о необходимости проведения перерасчетов будет восстановлена
//												* Организация
//												* Сотрудник
//												* ПериодДействия
//
Процедура УдалитьПерерасчеты(Регистратор, УдалитьПерерасчетыТекущегоПериода) Экспорт
	
	Запрос = ЗапросВТПериодыРасчетаСотрудников(Регистратор, УдалитьПерерасчетыТекущегоПериода);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПерерасчетНачислений Тогда
			НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
			
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если Выборка.ПерерасчетУдержаний Тогда
			НаборЗаписей = РегистрыСведений.ПерерасчетУдержаний.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
			НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
			
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Выборка.Сбросить();
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.УдалитьПерерасчеты(Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет по конкретному документу, по окончании проведения документа
// рассчитывающего начисления не являющемся документом "Начисление зарплаты".
//
// Параметры:
//		Регистратор		- ДокументСсылка
//		Сотрудники		- Массив, ссылки на сотрудников, по которым нужно удалить сведения
//		ФизическиеЛица	- Массив, ссылки на физических лиц, по которым нужно удалить сведения об удержаниях.
//
Процедура УдалитьПерерасчетыПоРегистратору(Регистратор, Сотрудники = Неопределено, ФизическиеЛица = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Регистратор) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПерерасчетЗарплаты.Сотрудник,
			|	ПерерасчетЗарплаты.ДокументНачисления КАК ДокументНачисления
			|ИЗ
			|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
			|ГДЕ
			|	ПерерасчетЗарплаты.ДокументНачисления = &ДокументНачисления
			|	И ПерерасчетЗарплаты.Сотрудник В(&Сотрудники)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументНачисления";
		
		Запрос.УстановитьПараметр("ДокументНачисления", Регистратор);
		
		Если ЗначениеЗаполнено(Сотрудники) Тогда
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПерерасчетЗарплаты.Сотрудник,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПерерасчетЗарплаты.Сотрудник В(&Сотрудники)", "");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				
				Если ЗначениеЗаполнено(Сотрудники) Тогда
					НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПерерасчетУдержаний.ФизическоеЛицо,
			|	ПерерасчетУдержаний.ДокументНачисления КАК ДокументНачисления
			|ИЗ
			|	РегистрСведений.ПерерасчетУдержаний КАК ПерерасчетУдержаний
			|ГДЕ
			|	ПерерасчетУдержаний.ДокументНачисления = &ДокументНачисления
			|	И ПерерасчетУдержаний.ФизическоеЛицо В(&ФизическиеЛица)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументНачисления";
		
		Запрос.УстановитьПараметр("ДокументНачисления", Регистратор);
		
		Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
			Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПерерасчетУдержаний.ФизическоеЛицо,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПерерасчетУдержаний.ФизическоеЛицо В(&ФизическиеЛица)", "");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ПерерасчетУдержаний.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				
				Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
					НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет по конкретному документу, в зависимости от значений
// параметров, переданных в ДополнительныеПараметры.
//
// Параметры:
//		Регистратор				- ДокументСсылка
//		ДополнительныеПараметры	- Структура с ключами
//									* УдалитьПерерасчетыЗарплаты		- Булево
//									* СотрудникиПерерасчетаЗаработка	- Массив
//
Процедура УдалитьПерерасчетыПоДополнительнымПараметрам(Регистратор, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПерерасчетыЗарплаты = Неопределено;
	ДополнительныеПараметры.Свойство("УдалитьПерерасчетыЗарплаты", УдалитьПерерасчетыЗарплаты);
	Если УдалитьПерерасчетыЗарплаты <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиФизическиеЛица = Неопределено;
	Сотрудники = Неопределено;
	ФизическиеЛица = Неопределено;
	
	ДополнительныеПараметры.Свойство("СотрудникиПерерасчетаЗаработка", СотрудникиФизическиеЛица);
	Если СотрудникиФизическиеЛица <> Неопределено Тогда
		Если ТипЗнч(СотрудникиФизическиеЛица) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(СотрудникиФизическиеЛица) = Тип("Массив") 
			И СотрудникиФизическиеЛица.Количество() > 0
			И ТипЗнч(СотрудникиФизическиеЛица[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			Сотрудники = СотрудникиФизическиеЛица;
		Иначе
			ФизическиеЛица = СотрудникиФизическиеЛица;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьПерерасчетыПоРегистратору(Регистратор, Сотрудники, ФизическиеЛица);
	
КонецПроцедуры

// Восстанавливает записи о необходимости проведения перерасчета, при отмене проведения
// документа начисления зарплаты, с заполненной табличной частью начисления перерасчеты.
//
// Параметры:
//		Регистратор	- ДокументСсылка.НачислениеЗарплаты
//		Организация	- СотрудникСсылка.Организации
//
Процедура ВосстановитьПерерасчеты(Регистратор, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	НачислениеЗарплатыНачисленияПерерасчет.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыНачисленияПерерасчет.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисленияПерерасчет.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	НачислениеЗарплатыНачисленияПерерасчет.ДатаНачала КАК Период,
		|	НЕОПРЕДЕЛЕНО КАК РегистраторПерерасчета,
		|	НЕОПРЕДЕЛЕНО КАК ТипИзменения,
		|	ЛОЖЬ КАК НачалоУчета
		|ПОМЕСТИТЬ ВТПредварительныеПерерасчетыНачислений
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПерерасчет КАК НачислениеЗарплатыНачисленияПерерасчет
		|ГДЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка = &Регистратор";
	
	МетаданныеДокумента = Регистратор.Метаданные();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.НачислениеЗарплаты", "Документ." + МетаданныеДокумента.Имя);
	Запрос.Выполнить();
	
	СоздатьВТКонтролируемыеНачисления(Запрос.МенеджерВременныхТаблиц, "ВТОтобранныеНачисления");
	ЗарегистрироватьПерерасчетыНачислений(Запрос.МенеджерВременныхТаблиц, Регистратор);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ВосстановитьПерерасчеты(Запрос.МенеджерВременныхТаблиц, Регистратор, Организация);
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("УдержанияПерерасчет") <> Неопределено Тогда
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&Организация КАК Организация,
			|	УдержанияПерерасчет.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НАЧАЛОПЕРИОДА(УдержанияПерерасчет.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
			|	УдержанияПерерасчет.Удержание КАК ИзмененныеДанные,
			|	УдержанияПерерасчет.ДокументОснование КАК ДокументОснование,
			|	НЕОПРЕДЕЛЕНО КАК РегистраторПерерасчета,
			|	НЕОПРЕДЕЛЕНО КАК ТипИзменения
			|ПОМЕСТИТЬ ВТПредварительныеПерерасчетыУдержаний
			|ИЗ
			|	Документ.НачислениеЗарплаты.УдержанияПерерасчет КАК УдержанияПерерасчет
			|ГДЕ
			|	УдержанияПерерасчет.Ссылка = &Регистратор";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.НачислениеЗарплаты", "Документ." + МетаданныеДокумента.Имя);
		Запрос.Выполнить();
		ЗарегистрироватьПерерасчетыУдержаний(Запрос.МенеджерВременныхТаблиц, Регистратор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список регистров, являющихся источниками возможных перерасчетов
//
// Возвращаемое значение:
//		Соответствие
//
Функция РегистрыИсточникиПредварительныхПерерасчетов() Экспорт
	
	Регистры = Новый Соответствие;
	Регистры.Вставить(Метаданные.РегистрыСведений.ГрафикРаботыСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисления.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.ПлановыеУдержания.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.ПрименениеПлановыхНачислений.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.УсловияОплатыОтпускаПоУходуЗаРебенком.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.УсловияУдержанияПоИсполнительномуДокументу.Имя, Истина);
	
	Регистры.Вставить(Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыОрганизаций.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций.Имя, Истина);
	
	Регистры.Вставить(Метаданные.РегистрыНакопления.ВытесняемоеПлановоеВремяСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДанныеИндивидуальныхГрафиковСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.Имя, Истина);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДанныеСводногоУчетаРабочегоВремениСотрудников.Имя, Истина);
	
	Возврат Регистры;
	
КонецФункции

// Отменяет необходимость формирования предварительных перерасчетов для регистров, инициирующих перерасчеты,
//	т.к. анализ будет происходить при проведении документа
//
// Параметры:
//		ДокументОбъект	- ДокументОбъект
//		РежимЗаписи		- РежимЗаписиДокумента
//
Процедура ИнициализироватьНаборыИсточникиПредварительныхПерерасчетов(ДокументОбъект, РежимЗаписи) Экспорт
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение
		И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Возврат;
	КонецЕсли;
	
	РегистрыИсточникиПредварительныхПерерасчетов = РегистрыИсточникиПредварительныхПерерасчетов();
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		Если РегистрыИсточникиПредварительныхПерерасчетов[Набор.Метаданные().Имя] = Истина Тогда
			Набор.ДополнительныеСвойства.Вставить("НеФормироватьПредварительныеПерерасчетыПриЗаписи", Истина);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует предварительные перерасчеты при проведении документа
//
// Параметры:
//		ДокументОбъект	- ДокументОбъект
//
Процедура ЗарегистрироватьПредварительныеПерерасчетыПриПроведенииДокумента(ДокументОбъект) Экспорт	
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеФормироватьПредварительныеПерерасчетыПриЗаписи")
		И ДокументОбъект.ДополнительныеСвойства.НеФормироватьПредварительныеПерерасчетыПриЗаписи = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	РегистрыИсточникиПредварительныхПерерасчетов = РегистрыИсточникиПредварительныхПерерасчетов();
	НаборыИсточникиПредварительныхПерерасчетов = Новый Массив;
	
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		Если РегистрыИсточникиПредварительныхПерерасчетов[Набор.Метаданные().Имя] = Истина Тогда
			НаборыИсточникиПредварительныхПерерасчетов.Добавить(Набор);
			
			Если Набор.Записывать Тогда
				Набор.Записать();
				Набор.Записывать = Ложь;
			КонецЕсли;				
		КонецЕсли;				
	КонецЦикла;		
	
	ИзмененияВНаборахИсточников = ЗарплатаКадрыПериодическиеРегистры.ИзмененияВНаборахИсточниковВторичныхДанных(НаборыИсточникиПредварительныхПерерасчетов);
	
	// если интересующие нас регистры не менялись, тогда ничего не делаем
	Если ИзмененияВНаборахИсточников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = ДокументОбъект.Ссылка;
	ЗаписатьПредварительныеПерерасчетыПоИзменениямВНаборах(ИзмененияВНаборахИсточников, Регистратор)
	
КонецПроцедуры

// Регистрирует предварительные перерасчеты при записи набора
//
// Параметры:
//		НаборЗаписей	- НаборЗаписей
//
Процедура ЗарегистрироватьПредварительныеПерерасчетыПриЗаписиНабора(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("НеФормироватьПредварительныеПерерасчетыПриЗаписи")
		И НаборЗаписей.ДополнительныеСвойства.НеФормироватьПредварительныеПерерасчетыПриЗаписи = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор")
		И НаборЗаписей.ДополнительныеСвойства.ЭтоВторичныйНабор = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоИсправлениеРегистра")
		И НаборЗаписей.ДополнительныеСвойства.ЭтоИсправлениеРегистра = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборыИсточникиПредварительныхПерерасчетов = Новый Массив;
	НаборыИсточникиПредварительныхПерерасчетов.Добавить(НаборЗаписей);
	
	ИзмененияВНаборахИсточников = ЗарплатаКадрыПериодическиеРегистры.ИзмененияВНаборахИсточниковВторичныхДанных(НаборыИсточникиПредварительныхПерерасчетов);
	
	// если интересующие нас регистры не менялись, тогда ничего не делаем
	Если ИзмененияВНаборахИсточников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	ЗаписатьПредварительныеПерерасчетыПоИзменениямВНаборах(ИзмененияВНаборахИсточников, Регистратор);
	
КонецПроцедуры

// Регистрирует предварительные перерасчеты при изменении данных общего графика
//
// Параметры:
//		СотрудникиПериоды	- ТаблицаЗначений, колонки:
//			* Сотрудник - СправочникСсылка.Сотрудники
//			* Месяц - Дата
//		ГрафикРаботы	- СправочникСсылка.ГрафикиРаботыСотрудников
//
Процедура ЗарегистрироватьПредварительныеПерерасчетыПриИзмененииОбщихГрафиков(СотрудникиПериоды, ГрафикРаботы) Экспорт
	
	ПредварительныеПерерасчеты = РегистрыСведений.ПредварительныеПерерасчеты.СоздатьНаборЗаписей();
	ПредварительныеПерерасчеты.Отбор.РегистраторПерерасчета.Установить(ГрафикРаботы);
	
	Для каждого СтрокаТаблицы Из СотрудникиПериоды Цикл
		НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
		НоваяСтрока.ВладелецПерерасчета = СтрокаТаблицы.Сотрудник;
		НоваяСтрока.ПериодПерерасчета = СтрокаТаблицы.Месяц;
		НоваяСтрока.РегистраторПерерасчета = ГрафикРаботы;
		НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.ОбщийГрафик;
		НоваяСтрока.ИзмененныеДанные = ГрафикРаботы;
	КонецЦикла;
	
	ЗарегистрироватьПредварительныеПерерасчеты(ПредварительныеПерерасчеты, ГрафикРаботы);
	
КонецПроцедуры

Функция ПараметрыЗаполненияИсходныхДанныхПерерасчетов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТаблицыНачислений", "Начисления,НачисленияПерерасчет");
	Параметры.Вставить("ПолеВидРасчета", "Ссылка.Начисление");
	Параметры.Вставить("ПолеПериодРегистрации", "Ссылка.ПериодРегистрации");
	
	Возврат Параметры;
	
КонецФункции

Процедура СвернутьНачисленияПерерасчеты(НачисленияПерерасчет) Экспорт
	
	СворачиваемаяКоллекция = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	СворачиваемаяКоллекция.Колонки.Добавить("РезультатАбсолютный", СворачиваемаяКоллекция.Колонки.Результат.ТипЗначения);
	СоответствиеКоллекций = Новый Соответствие;
	ЕстьСторно = Ложь;
	Для каждого СтрокаПерерасчет Из НачисленияПерерасчет Цикл
		НоваяСтрока = СворачиваемаяКоллекция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПерерасчет);
		НоваяСтрока.РезультатАбсолютный = ?(НоваяСтрока.Результат < 0, -НоваяСтрока.Результат, НоваяСтрока.Результат);
		СоответствиеКоллекций.Вставить(НоваяСтрока, СтрокаПерерасчет);
		ЕстьСторно = ЕстьСторно Или СтрокаПерерасчет.Сторно;
	КонецЦикла;
	
	Если Не ЕстьСторно Тогда
		Возврат;
	КонецЕсли;
	
	СворачиваемаяКоллекция.Сортировать("ПериодДействия,ДатаНачала,Сотрудник,Начисление,РезультатАбсолютный,Сторно,Результат", Новый СравнениеЗначений);
	
	КлючТекущейЗаписи = Новый Структура("Сотрудник,Подразделение,Начисление,ДокументОснование,КодВычета,ПериодДействия,ГрафикРаботы,ГрафикРаботыНорма");
	ТекущаяЗапись = Неопределено;
	
	Сч = 0;
	Пока Сч < СворачиваемаяКоллекция.Количество() Цикл
		Строка = СворачиваемаяКоллекция[Сч];
		Если ТекущаяЗапись = Неопределено 
			Или КлючСтрокиИзменился(КлючТекущейЗаписи, Строка) Тогда
			ТекущаяЗапись = Строка;
			ЗаполнитьЗначенияСвойств(КлючТекущейЗаписи, Строка);
			Сч = Сч + 1;
		Иначе
			Если Не ВзаимноеСторно(Строка, ТекущаяЗапись) Тогда
				ТекущаяЗапись = Строка;
				Сч = Сч + 1;
				Продолжить;
			КонецЕсли;
			
			НачисленияПерерасчет.Удалить(СоответствиеКоллекций[Строка]);
			НачисленияПерерасчет.Удалить(СоответствиеКоллекций[ТекущаяЗапись]);
			СворачиваемаяКоллекция.Удалить(Строка);
			СворачиваемаяКоллекция.Удалить(ТекущаяЗапись);
			
			Если Сч > 0 Тогда
				Сч = Сч - Мин(Сч, 2);
			КонецЕсли;
			ТекущаяЗапись = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсходныеДанныеПерерасчетов(ПараметрыОбновления, МетаданныеДокумента, ПараметрыЗаполнения) Экспорт
	
	ИмяТаблицыДокумента = МетаданныеДокумента.ПолноеИмя();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументНачисления.Ссылка КАК Ссылка,
		|	ДокументНачисления.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДокументы
		|ИЗ
		|	#ДокументНачисления КАК ДокументНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО (ИсходныеДанныеПерерасчетов.Регистратор = ДокументНачисления.Ссылка)
		|ГДЕ
		|	ДокументНачисления.Проведен
		|	И ИсходныеДанныеПерерасчетов.Регистратор ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТДокументы КАК ВТДокументы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументНачисления", ИмяТаблицыДокумента);
	
	Если Запрос.Выполнить().Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыЗаполнения.ТаблицыНачислений);
	ДокументыКОбработке = Новый Массив;
	Для каждого ИмяТаблицы Из ИменаТаблицНачислений Цикл
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	Начисления.Ссылка КАК Ссылка,
			|	Документы.Дата КАК Дата
			|ИЗ
			|	#ИмяТаблицыНачисления КАК Начисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК Документы
			|		ПО (Документы.Ссылка = Начисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
			|		ПО (ПВРНачисления.Ссылка = Начисления.Начисление)
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ПВРНачисления.ТребуетсяРасчетБазы
			|				ТОГДА ИСТИНА
			|			КОГДА ПВРНачисления.ЗачетНормыВремени
			|				ТОГДА ИСТИНА
			|			КОГДА ПВРНачисления.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
			|				ТОГДА ИСТИНА
			|			КОГДА ПВРНачисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Командировка)
			|					И ТИПЗНАЧЕНИЯ(Начисления.Ссылка) <> ТИП(Документ.Командировка)
			|				ТОГДА ИСТИНА
			|			КОГДА ПВРНачисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку)
			|					И ТИПЗНАЧЕНИЯ(Начисления.Ссылка) <> ТИП(Документ.ОплатаПоСреднемуЗаработку)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыНачисления", ИмяТаблицыДокумента + "." + ИмяТаблицы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1000", Формат(1000 - ДокументыКОбработке.Количество(),"ЧГ=0"));
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицы].Реквизиты.Найти("Начисление") = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Начисление", "Начисления." + ПараметрыЗаполнения.ПолеВидРасчета);	
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыКОбработке,Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"),Истина);
		Если ДокументыКОбработке.Количество() >= 1000 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыКОбработке.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументыКОбработке", ДокументыКОбработке);
	ЧастиЗапроса = Новый Массив;
	Для каждого ИмяТаблицы Из ИменаТаблицНачислений Цикл
		ДобавитьЧастьЗапросаНачисленийПоДокументу(ЧастиЗапроса, МетаданныеДокумента, ИмяТаблицы, ПараметрыЗаполнения);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Блокировка = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОписаниеБлокируемыхДанных(Метаданные.РегистрыСведений.ИсходныеДанныеПерерасчетов);
		Блокировка.ПоляБлокировки.Регистратор = Выборка.Ссылка;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.НачатьОбновлениеДанных(Блокировка, ПараметрыОбновления) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.ИсходныеДанныеПерерасчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаОкончания = КонецДня(НоваяСтрока.ДатаОкончания);
			НоваяСтрока.НачалоБазовогоПериода = НоваяСтрока.ДатаНачала;
			НоваяСтрока.ОкончаниеБазовогоПериода = НоваяСтрока.ДатаОкончания;
			НоваяСтрока.Регистратор = Выборка.Ссылка;
			НоваяСтрока.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
			ЗаполнитьБазовыйПериод(НоваяСтрока, Выборка);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

Процедура СторнироватьДвиженияВРегистреИсходныеДанныеПерерасчетов(НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра, Записывать = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	    "ВЫБРАТЬ
	    |   *
	    |ИЗ
	    |   РегистрСведений.ИсходныеДанныеПерерасчетов КАК СторнируемыйРегистр 
	    |ГДЕ
	    |   СторнируемыйРегистр.Регистратор = &ИсправленныйДокумент
	    |   И СторнируемыйРегистр.Сторно = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеРесурсыРегистра = МетаданныеРегистра.Ресурсы;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Для Каждого Ресурс Из МетаданныеРесурсыРегистра Цикл
			НоваяСтрока[Ресурс.Имя] = - НоваяСтрока[Ресурс.Имя];
		КонецЦикла;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	Если Записывать Тогда
		НаборЗаписей.Записать();
		НаборЗаписей.Записывать = Ложь;
	Иначе
		НаборЗаписей.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПерерасчетаПриУвольненииСотрудника(ДокументУвольнения, ИсправленныйДокумент, Сотрудники, Организация, ДатаУвольнения, ПериодПерерасчетов, ИсключаемыеРегистраторы, МенеджерРасчета) Экспорт
	
	ДанныеПерерасчета = ДанныеПерерасчетаПустаяСтруктура();
	ДанныеПерерасчета.НачисленияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
	ДанныеПерерасчета.ПособияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
	ДанныеПерерасчета.ТаблицаСотрудников = МенеджерРасчета.ТаблицаСотрудников();
	ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();
	
	СотрудникиПериодДействияПерерасчет = ПустаяТаблицаСотрудникиПериодДействияПерерасчет();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		
	// Включаются ранее перерассчитанные в документе периоды
	Если ЗначениеЗаполнено(ДокументУвольнения) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументУвольнения, "Проведен") Тогда
		
		Запрос.УстановитьПараметр("Ссылка", ДокументУвольнения);
		Запрос.УстановитьПараметр("ПериодДействия", ПериодПерерасчетов.ДатаНачала);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПерерасчет.Сотрудник КАК Сотрудник,
			|	СотрудникиПерерасчет.ПериодДействия КАК ПериодДействия,
			|	ИСТИНА КАК ПерерасчетНачислений
			|ИЗ
			|	Документ.Увольнение.СотрудникиПерерасчет КАК СотрудникиПерерасчет
			|ГДЕ
			|	СотрудникиПерерасчет.Ссылка = &Ссылка
			|	И СотрудникиПерерасчет.ПериодДействия < &ПериодДействия
			|	И СотрудникиПерерасчет.Сотрудник В (&Сотрудники)
			|	И СотрудникиПерерасчет.ПерерасчетНачислений";
		
		Если ТипЗнч(ДокументУвольнения) <> Тип("ДокументСсылка.Увольнение") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ." + ДокументУвольнения.Метаданные().Имя);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаСотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСотрудникиПериодДействияПерерасчет, Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодПерерасчетов.ДатаОкончания);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПериодДействия
		|ИЗ
		|	РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|ГДЕ
		|	ИсходныеДанныеПерерасчетов.Сотрудник В(&Сотрудники)
		|	И ИсходныеДанныеПерерасчетов.ПериодДействия > &ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействия УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОкончаниеПериода = ПериодПерерасчетов.ДатаОкончания;
	Если Выборка.Следующий() Тогда
		ОкончаниеПериода = КонецМесяца(Выборка.ПериодДействия);	
	КонецЕсли;
	
	// Принудительный перерасчет месяцев периода регистрации и даты увольнения
	МесяцПерерасчетов = НачалоМесяца(ПериодПерерасчетов.ДатаНачала);
	Пока МесяцПерерасчетов <= ОкончаниеПериода Цикл
		Для Каждого Сотрудник Из Сотрудники Цикл
			СтрокаСотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет.Добавить();
			СтрокаСотрудникиПериодДействияПерерасчет.Сотрудник = Сотрудник;
			СтрокаСотрудникиПериодДействияПерерасчет.ПериодДействия = МесяцПерерасчетов;
			СтрокаСотрудникиПериодДействияПерерасчет.ПерерасчетНачислений = Истина;
			СтрокаСотрудникиПериодДействияПерерасчет.ПерерасчетЛьгот = Ложь;
			СтрокаСотрудникиПериодДействияПерерасчет.ПерерасчетУдержаний = Ложь;
		КонецЦикла;
		
		МесяцПерерасчетов = КонецМесяца(МесяцПерерасчетов) + 1;
	КонецЦикла;
	
	МесяцНачисления = ПериодПерерасчетов.ДатаНачала;
	ЗаполнитьДанныеПерерасчета(ДанныеПерерасчета, Организация, , МесяцНачисления,
		Сотрудники, СотрудникиПериодДействияПерерасчет, ИсключаемыеРегистраторы, Истина, МенеджерРасчета);
	
	МесяцПерерасчетов = НачалоМесяца(ПериодПерерасчетов.ДатаНачала);
	
	Для Каждого СтрокаНачислений Из ДанныеПерерасчета.НачисленияПерерасчет Цикл
		Если СтрокаНачислений.ПериодДействия < МесяцПерерасчетов Тогда
			СтрокаНачислений.ПериодРегистрации = МесяцПерерасчетов;
		Иначе
			СтрокаНачислений.ПериодРегистрации = СтрокаНачислений.ПериодДействия;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНачислений Из ДанныеПерерасчета.ПособияПерерасчет Цикл
		Если СтрокаНачислений.ПериодДействия < МесяцПерерасчетов Тогда
			СтрокаНачислений.ПериодРегистрации = МесяцПерерасчетов;
		Иначе
			СтрокаНачислений.ПериодРегистрации = СтрокаНачислений.ПериодДействия;
		КонецЕсли;
	КонецЦикла;
	
	Пока МесяцПерерасчетов <= ОкончаниеПериода Цикл
		Для Каждого Сотрудник Из Сотрудники Цикл
			
			СтрокиТаблицаСотрудников = ДанныеПерерасчета.ТаблицаСотрудников.НайтиСтроки(Новый Структура("Сотрудник,ДатаНачала", Сотрудник, МесяцПерерасчетов));
			Если СтрокиТаблицаСотрудников.Количество() = 0 Тогда
				Если МесяцПерерасчетов > ПериодПерерасчетов.ДатаОкончания Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицаСотрудников = ДанныеПерерасчета.ТаблицаСотрудников.Добавить();
				СтрокаТаблицаСотрудников.Сотрудник = Сотрудник;
				СтрокаТаблицаСотрудников.ДатаНачала = НачалоМесяца(МесяцПерерасчетов);
				СтрокаТаблицаСотрудников.ДатаОкончания = Мин(КонецМесяца(МесяцПерерасчетов), КонецДня(ДатаУвольнения));
			Иначе
				
				СтрокаТаблицаСотрудников = СтрокиТаблицаСотрудников[0];
				
				Если СтрокаТаблицаСотрудников.ДатаНачала > ПериодПерерасчетов.ДатаОкончания Тогда
					ДанныеПерерасчета.ТаблицаСотрудников.Удалить(СтрокаТаблицаСотрудников);
					Продолжить;	
				КонецЕсли;
				
				// Сброс флага перерассчитываемого периода для периодов расчета увольнения
				СтрокаТаблицаСотрудников.ПериодПерерасчета = Ложь;
				
				// Ограничение периода расчета датой увольнения
				Если СтрокаТаблицаСотрудников.ДатаНачала = НачалоМесяца(ДатаУвольнения) Тогда
					СтрокаТаблицаСотрудников.ДатаОкончания = Мин(КонецМесяца(СтрокаТаблицаСотрудников.ДатаОкончания), КонецДня(ДатаУвольнения));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МесяцПерерасчетов = КонецМесяца(МесяцПерерасчетов) + 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
		
		Если Не МенеджерРасчета.ЭтоИсправлениеТекущимПериодом Тогда
			
			Запрос.УстановитьПараметр("ПериодДействия", ПериодПерерасчетов.ДатаНачала);
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	УвольнениеНачисления.Сотрудник КАК Сотрудник,
				|	НАЧАЛОПЕРИОДА(УвольнениеНачисления.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
				|	КОНЕЦПЕРИОДА(УвольнениеНачисления.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания,
				|	ИСТИНА КАК ПериодПерерасчета
				|ИЗ
				|	Документ.Увольнение.Начисления КАК УвольнениеНачисления
				|ГДЕ
				|	УвольнениеНачисления.Ссылка = &ИсправленныйДокумент
				|	И УвольнениеНачисления.ПериодДействия < &ПериодДействия
				|	И ВЫРАЗИТЬ(УвольнениеНачисления.Начисление КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	УвольнениеНачисленияПерерасчет.Сотрудник,
				|	НАЧАЛОПЕРИОДА(УвольнениеНачисленияПерерасчет.ПериодДействия, МЕСЯЦ),
				|	КОНЕЦПЕРИОДА(УвольнениеНачисленияПерерасчет.ПериодДействия, МЕСЯЦ),
				|	ИСТИНА
				|ИЗ
				|	Документ.Увольнение.НачисленияПерерасчет КАК УвольнениеНачисленияПерерасчет
				|ГДЕ
				|	УвольнениеНачисленияПерерасчет.Ссылка = &ИсправленныйДокумент
				|	И УвольнениеНачисленияПерерасчет.ПериодДействия < &ПериодДействия
				|	И ВЫРАЗИТЬ(УвольнениеНачисленияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))";
			
			Если ТипЗнч(ИсправленныйДокумент) <> Тип("ДокументСсылка.Увольнение") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ." + ИсправленныйДокумент.Метаданные().Имя);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокиПериода = ДанныеПерерасчета.ТаблицаСотрудников.НайтиСтроки(Новый Структура("Сотрудник,ДатаНачала", Выборка.Сотрудник, Выборка.ДатаНачала));
				Если СтрокиПериода.Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(ДанныеПерерасчета.ТаблицаСотрудников.Добавить(), Выборка);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УвольнениеНачисленияПерерасчет.Сотрудник КАК Сотрудник,
			|	УвольнениеНачисленияПерерасчет.Начисление КАК Начисление,
			|	УвольнениеНачисленияПерерасчет.ПериодДействия КАК ПериодДействия
			|ИЗ
			|	Документ.Увольнение.НачисленияПерерасчет КАК УвольнениеНачисленияПерерасчет
			|ГДЕ
			|	УвольнениеНачисленияПерерасчет.Ссылка = &ИсправленныйДокумент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УвольнениеСпискомНачисленияПерерасчет.Сотрудник,
			|	УвольнениеСпискомНачисленияПерерасчет.Начисление,
			|	УвольнениеСпискомНачисленияПерерасчет.ПериодДействия
			|ИЗ
			|	Документ.УвольнениеСписком.НачисленияПерерасчет КАК УвольнениеСпискомНачисленияПерерасчет
			|ГДЕ
			|	УвольнениеСпискомНачисленияПерерасчет.Ссылка = &ИсправленныйДокумент";
		
		БазовоеИмяДокумента = СтрЗаменить(ИсправленныйДокумент.Метаданные().Имя, "Списком", "");
		Если БазовоеИмяДокумента <> "Увольнение" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение.", "Документ." + БазовоеИмяДокумента + ".");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.УвольнениеСписком.", "Документ." + БазовоеИмяДокумента + "Списком.");
		КонецЕсли;
		
		ПерерассчитанныеНачисления = Запрос.Выполнить().Выгрузить();
		
		МесяцПерерасчетов = НачалоМесяца(ПериодПерерасчетов.ДатаНачала);
		Пока МесяцПерерасчетов <= ОкончаниеПериода Цикл
			Для Каждого Сотрудник Из Сотрудники Цикл
				СтрокиПерерасчетов = ДанныеПерерасчета.НачисленияПерерасчет.НайтиСтроки(Новый Структура("Сотрудник,ПериодДействия", Сотрудник, МесяцПерерасчетов));
				Для Каждого СтрокаПерерасчетов Из СтрокиПерерасчетов Цикл
					ПерерассчитанныеСтроки = ПерерассчитанныеНачисления.НайтиСтроки(Новый Структура("Сотрудник,Начисление,ПериодДействия", СтрокаПерерасчетов.Сотрудник, СтрокаПерерасчетов.Начисление, СтрокаПерерасчетов.ПериодДействия));
					Если ПерерассчитанныеСтроки.Количество() > 0 Тогда
						ДанныеПерерасчета.НачисленияПерерасчет.Удалить(СтрокаПерерасчетов);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			МесяцПерерасчетов = КонецМесяца(МесяцПерерасчетов) + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПерерасчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПерерасчетНачисленийПоОтдельномуДокументу

Функция ДопустимыеВидыДокументовНачисления()
	
	ДопустимыеВидыДокументов = Новый Массив;
	
	ДопустимыеВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.Командировка);
	ДопустимыеВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку);
	
	Возврат ДопустимыеВидыДокументов;
	
КонецФункции

Процедура СоздатьВТТипыРегистраторовПоОтдельномуДокументу(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Командировка) КАК ВидДокументаНачисления,
		|	ТИП(Документ.Командировка) КАК ТипРегистратора
		|ПОМЕСТИТЬ ВТТипыРегистраторовПоОтдельномуДокументу
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку),
		|	ТИП(Документ.ОплатаПоСреднемуЗаработку)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НачислениеВозможноСторнировать(СведенияОНачислении, Регистратор)
	
	Если СведенияОНачислении.ТребуетсяРасчетБазы
		Или СведенияОНачислении.ЗачетНормыВремени
		Или СведенияОНачислении.СпособВыполненияНачисления <> Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если СведенияОНачислении.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета Тогда
		
		Если СведенияОНачислении.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Командировка
			И ТипЗнч(Регистратор) <> Тип("ДокументСсылка.Командировка") Тогда
			
			Возврат Истина
		КонецЕсли;
		
		Если СведенияОНачислении.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку
			И ТипЗнч(Регистратор) <> Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

#КонецОбласти

Функция КраткоеПредставлениеДокумента(СсылкаНаОснование)
	
	КраткоеПредставление = "";
	МетаданныеОснования = СсылкаНаОснование.Метаданные();
	ИмяМетаданных = МетаданныеОснования.Имя;
	
	УстановитьПривилегированныйРежим(Истина);
	Если МетаданныеОснования = Метаданные.Справочники.ГрафикиРаботыСотрудников Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОснование, "Наименование");
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОснование, "Дата, Номер");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИмяМетаданных = "ИзменениеОплатыТруда" Тогда
		КраткоеПредставление = НСтр("ru = 'Изменение оплаты';
									|en = 'Change payment'");
	ИначеЕсли ИмяМетаданных = "КадровыйПеревод" Тогда
		КраткоеПредставление = НСтр("ru = 'Перевод';
									|en = 'Transfer'");
	ИначеЕсли ИмяМетаданных = "КадровыйПереводСписком" Тогда
		КраткоеПредставление = НСтр("ru = 'Перевод списком';
									|en = 'Multiple employee transfer'");
	ИначеЕсли ИмяМетаданных = "ПриемНаРаботу" Тогда
		КраткоеПредставление = НСтр("ru = 'Прием';
									|en = 'Hiring'");
	ИначеЕсли ИмяМетаданных = "ПриемНаРаботуСписком" Тогда
		КраткоеПредставление = НСтр("ru = 'Прием списком';
									|en = 'Multiple employee hiring'");
	ИначеЕсли ИмяМетаданных = "СторнированиеНачислений" Тогда
		КраткоеПредставление = НСтр("ru = 'Сторно';
									|en = 'Storno'");
	ИначеЕсли ИмяМетаданных = "ПростойСотрудников" Тогда
		КраткоеПредставление = НСтр("ru = 'Простой';
									|en = 'Simple'");
	ИначеЕсли ИмяМетаданных = "Отпуск" Тогда
		КраткоеПредставление = НСтр("ru = 'Отпуск';
									|en = 'Leave'");
	ИначеЕсли ИмяМетаданных = "ВходящаяСправкаОЗаработкеДляРасчетаПособий" Тогда
		КраткоеПредставление = НСтр("ru = 'Справка о зарплате';
									|en = 'Pay statement'");
	ИначеЕсли ИмяМетаданных = "БольничныйЛист" Тогда
		КраткоеПредставление = НСтр("ru = 'Больничный';
									|en = 'Sick leave '");
	ИначеЕсли ИмяМетаданных = "ОплатаПоСреднемуЗаработку" Тогда
		КраткоеПредставление = НСтр("ru = 'Оплата по среднему';
									|en = 'Payment by average'");
	ИначеЕсли ИмяМетаданных = "ОплатаПоСреднемуЗаработку" Тогда
		КраткоеПредставление = НСтр("ru = 'Премия';
									|en = 'Bonus'");
	ИначеЕсли ИмяМетаданных = "ОплатаДнейУходаЗаДетьмиИнвалидами" Тогда
		КраткоеПредставление = НСтр("ru = 'Оплата дней ухода';
									|en = 'Payment for care days'");
	ИначеЕсли ИмяМетаданных = "НачислениеЗарплаты" Тогда
		КраткоеПредставление = НСтр("ru = 'Зарплата';
									|en = 'Salary'");
	ИначеЕсли ИмяМетаданных = "РазовоеНачисление" Тогда
		КраткоеПредставление = НСтр("ru = 'Разовое начисление';
									|en = 'One-time accrual'");
	ИначеЕсли ИмяМетаданных = "Увольнение" Тогда
		КраткоеПредставление = НСтр("ru = 'Увольнение';
									|en = 'Dismissal'");
	ИначеЕсли ИмяМетаданных = "УвольнениеСписком" Тогда
		КраткоеПредставление = НСтр("ru = 'Увольнение списком';
									|en = 'Multiple terminations of employment'");
	ИначеЕсли ИмяМетаданных = "ОтпускБезСохраненияОплаты" Тогда
		КраткоеПредставление = НСтр("ru = 'Отпуск без оплаты';
									|en = 'Unpaid leave'");
	ИначеЕсли ИмяМетаданных = "ПрогулНеявка" Тогда
		КраткоеПредставление = НСтр("ru = 'Прогул';
									|en = 'Absenteeism'");
	ИначеЕсли ИмяМетаданных = "ДоходВНатуральнойФорме" Тогда
		КраткоеПредставление = НСтр("ru = 'Натуральный доход';
									|en = 'Income in kind'");
	ИначеЕсли ИмяМетаданных = "Командировка" Тогда
		КраткоеПредставление = НСтр("ru = 'Командировка';
									|en = 'Business trip'");
	ИначеЕсли ИмяМетаданных = "МатериальнаяПомощь" Тогда
		КраткоеПредставление = НСтр("ru = 'Мат. помощь';
									|en = 'Support payments'");
	ИначеЕсли ИмяМетаданных = "ОтпускПоУходуЗаРебенком" Тогда
		КраткоеПредставление = НСтр("ru = 'Отпуск по уходу';
									|en = 'Care leave'");
	ИначеЕсли ИмяМетаданных = "ПереносДанных" Тогда
		КраткоеПредставление = НСтр("ru = 'Перенос';
									|en = 'Transfer'");
	ИначеЕсли ИмяМетаданных = "ТабельУчетаРабочегоВремени" Тогда
		КраткоеПредставление = НСтр("ru = 'Табель';
									|en = 'Timesheet'");
	ИначеЕсли ИмяМетаданных = "ПостоянноеУдержаниеВПользуТретьихЛиц" Тогда
		КраткоеПредставление = НСтр("ru = 'Удержание';
									|en = 'Deduction'");
	ИначеЕсли ИмяМетаданных = "ИсполнительныйЛист" Тогда
		КраткоеПредставление = НСтр("ru = 'Исп. лист';
									|en = 'Enforc. order'");
	ИначеЕсли ИмяМетаданных = "ИзменениеУсловийИсполнительногоЛиста" Тогда
		КраткоеПредставление = НСтр("ru = 'Изм. исп. листа';
									|en = 'Enforc. order change'");
	ИначеЕсли ИмяМетаданных = "УдержаниеВСчетРасчетовПоПрочимОперациям" Тогда
		КраткоеПредставление = НСтр("ru = 'Удержание проч.';
									|en = 'Other deduction'");
	ИначеЕсли ИмяМетаданных = "УдержаниеДобровольныхВзносовВНПФ" Тогда
		КраткоеПредставление = НСтр("ru = 'НПФ';
									|en = 'NPF'");
	ИначеЕсли ИмяМетаданных = "УдержаниеДобровольныхСтраховыхВзносов" Тогда
		КраткоеПредставление = НСтр("ru = 'ДСВ';
									|en = 'DSV'");
	ИначеЕсли ИмяМетаданных = "УдержаниеПрофсоюзныхВзносов" Тогда
		КраткоеПредставление = НСтр("ru = 'Профвзносы';
									|en = 'Union contributions'");
	Иначе
		КраткоеПредставление = МетаданныеОснования.Синоним;
	КонецЕсли;
	
	Если МетаданныеОснования = Метаданные.Справочники.ГрафикиРаботыСотрудников Тогда
		КраткоеПредставление = КраткоеПредставление + " " + Реквизиты.Наименование;
	Иначе
		КраткоеПредставление = КраткоеПредставление + " №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Истина, Истина);
		КраткоеПредставление = КраткоеПредставление + " " + НСтр("ru = 'от';
																|en = 'dated'") + " " + Формат(Реквизиты.Дата, "ДФ=dd.MM.yy");
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ДобавитьПричинуПерерасчета(Список, СсылкаНаДокумент) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		
		КраткоеПредставление = КраткоеПредставлениеДокумента(СсылкаНаДокумент);
		Если Не ПустаяСтрока(КраткоеПредставление) Тогда
			Список.Добавить(СсылкаНаДокумент, КраткоеПредставление);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура СоздатьВТКонтролируемыеНачисления(МенеджерВременныхТаблиц, ИмяВТКонтролируемыеНачисления = "ВТКонтролируемыеНачисления")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление,
		|	ВЫБОР
		|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПособие
		|ПОМЕСТИТЬ ВТКонтролируемыеНачисления
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	(Начисления.ЗачетНормыВремени
		|			ИЛИ Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете)))";
	
	КатегорииНачисленийПособий = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииПрямыхВыплатФСС();
	Запрос.УстановитьПараметр("КатегорииНачисленийПособий", КатегорииНачисленийПособий);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКонтролируемыеНачисления", ИмяВТКонтролируемыеНачисления);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТПериодыРасчетаСотрудников(Регистратор, УдалитьПерерасчетыТекущегоПериода)
	
	Запрос = Новый Запрос;
	
	МетаданныеРегистратора = Регистратор.Метаданные();
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("УдалитьПерерасчетыТекущегоПериода", УдалитьПерерасчетыТекущегоПериода);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыНачисления.Ссылка.Организация КАК Организация,
		|	НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисления.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	НЕОПРЕДЕЛЕНО КАК ВидРасчета,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	ИСТИНА КАК ПерерасчетНачислений,
		|	ЛОЖЬ КАК ПерерасчетЛьгот,
		|	ЛОЖЬ КАК ПерерасчетУдержаний
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|ГДЕ
		|	НачислениеЗарплатыНачисления.Ссылка = &Регистратор
		|	И НЕ НачислениеЗарплатыНачисления.Ссылка.РежимДоначисления
		|	И &УдалитьПерерасчетыТекущегоПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Ссылка.Организация,
		|	НачислениеЗарплатыУдержания.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыУдержания.ДатаНачала, МЕСЯЦ),
		|	НачислениеЗарплатыУдержания.Удержание,
		|	НачислениеЗарплатыУдержания.ДокументОснование,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
		|ГДЕ
		|	НачислениеЗарплатыУдержания.Ссылка = &Регистратор
		|	И НЕ НачислениеЗарплатыУдержания.Ссылка.РежимДоначисления
		|	И &УдалитьПерерасчетыТекущегоПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыСотрудникиПерерасчет.Ссылка.Организация,
		|	НачислениеЗарплатыСотрудникиПерерасчет.Сотрудник,
		|	НачислениеЗарплатыСотрудникиПерерасчет.ПериодДействия,
		|	НачислениеЗарплатыСотрудникиПерерасчет.ВидРасчета,
		|	НачислениеЗарплатыСотрудникиПерерасчет.ДокументОснование,
		|	НачислениеЗарплатыСотрудникиПерерасчет.ПерерасчетНачислений,
		|	НачислениеЗарплатыСотрудникиПерерасчет.ПерерасчетЛьгот,
		|	НачислениеЗарплатыСотрудникиПерерасчет.ПерерасчетУдержаний
		|ИЗ
		|	Документ.НачислениеЗарплаты.СотрудникиПерерасчет КАК НачислениеЗарплатыСотрудникиПерерасчет
		|ГДЕ
		|	НачислениеЗарплатыСотрудникиПерерасчет.Ссылка = &Регистратор");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьЛьготамиЗапросВТПериодыРасчетаСотрудников(ТекстыЗапросов, МетаданныеРегистратора);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС);
	
	Если МетаданныеРегистратора.Имя <> "НачислениеЗарплаты" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.НачислениеЗарплаты", "Документ." + МетаданныеРегистратора.Имя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ НачислениеЗарплатыНачисления.Ссылка.РежимДоначисления", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ НачислениеЗарплатыУдержания.Ссылка.РежимДоначисления", "");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ПериодНачисленияЗарплатыЗакрыт(Организация, МесяцНачисления, ДокументОснование)
	
	// Проверяется наличие выплаты в периоде.
	БылаВыплатаВПериоде = ВзаиморасчетыССотрудникамиРасширенный.ВыплатаПроизводилась(Организация, ДокументОснование, МесяцНачисления);
	// Проверим наличие документа отражение зарплаты в бухгалтерском учете.
	БылоОтражениеЗарплатыВБухучете = ИсправлениеДокументовЗарплатаКадры.ОтражениеВУчетеПроизводилось(Организация, МесяцНачисления);
	
	ПериодЗакрыт = (БылаВыплатаВПериоде ИЛИ БылоОтражениеЗарплатыВБухучете);
	
	Возврат ПериодЗакрыт;
	
КонецФункции

Функция ОткрытыйПериодНачисленияЗарплаты(Организация, МесяцНачисления) Экспорт
	
	ОткрытыйПериод = МесяцНачисления;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НачислениеЗарплаты.МесяцНачисления КАК МесяцНачисления
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Организация = &Организация
		|	И НачислениеЗарплаты.МесяцНачисления >= &МесяцНачисления
		|	И НЕ НачислениеЗарплаты.РежимДоначисления
		|	И НачислениеЗарплаты.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	МесяцНачисления УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОткрытыйПериод = КонецМесяца(Выборка.МесяцНачисления) + 1;
	Иначе
		ОткрытыйПериод = КонецМесяца(ОткрытыйПериод) + 1;
	КонецЕсли;
	
	Возврат ОткрытыйПериод;
	
КонецФункции

Функция ПустаяТаблицаСотрудникиПериодДействияПерерасчет() Экспорт
	
	СотрудникиПериодДействияПерерасчет = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов(МассивТипов));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления, ПланВидовРасчетаСсылка.Удержания"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетНачислений", Новый ОписаниеТипов("Булево"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетЛьгот", Новый ОписаниеТипов("Булево"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетУдержаний", Новый ОписаниеТипов("Булево"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
	
	Возврат СотрудникиПериодДействияПерерасчет;
	
КонецФункции

Процедура СоздатьВТПерерассчитываемыеСотрудники(МенеджерВременныхТаблиц, Организация, Подразделение, МесяцНачисления, СотрудникиПериодДействияПерерасчет, РежимДоначисления, Сотрудники = Неопределено, ИмяВТПерерассчитываемыеСотрудники = "ВТПерерассчитываемыеСотрудники")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодДействия", МесяцНачисления);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ПерерасчетЗарплаты.ПериодДействия, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ПерерасчетЗарплаты.ПериодДействия, МЕСЯЦ) КАК ОкончаниеПериода,
		|	ПерерасчетЗарплаты.Сотрудник,
		|	ПерерасчетЗарплаты.ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ВидРасчета,
		|	ИСТИНА КАК ПерерасчетНачислений,
		|	ЛОЖЬ КАК ПерерасчетЛьгот
		|ПОМЕСТИТЬ ВТПерерасчетЗарплатыСОбластямиПерерасчетов
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|ГДЕ
		|	ПерерасчетЗарплаты.Организация = &Организация
		|	И ПерерасчетЗарплаты.ПериодДействия < &ПериодДействия";
	
	Если Сотрудники <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст = Запрос.Текст + "
			|	И ПерерасчетЗарплаты.Сотрудник В (&Сотрудники)";
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьЗапросВТПерерасчетЗарплатыСОбластямиПерерасчетов(Запрос.Текст, РежимДоначисления, Сотрудники);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерасчетЗарплатыСОбластямиПерерасчетов.НачалоПериода КАК ДатаНачала,
		|	ПерерасчетЗарплатыСОбластямиПерерасчетов.ОкончаниеПериода КАК ДатаОкончания,
		|	ПерерасчетЗарплатыСОбластямиПерерасчетов.Сотрудник
		|ПОМЕСТИТЬ ВТПерерасчетЗарплаты
		|ИЗ
		|	ВТПерерасчетЗарплатыСОбластямиПерерасчетов КАК ПерерасчетЗарплатыСОбластямиПерерасчетов";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
		"ВТПерерасчетЗарплаты", "Сотрудник", "ДатаНачала", "ДатаОкончания");
	
	ПараметрыПостроения.ВключаяУволенныхНаНачалоПериода = Истина;
	ПараметрыПостроения.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	ПараметрыПостроения.Организация = Организация;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ПараметрыПостроения.Подразделение = Подразделение;
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(
		МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, "ВТСотрудникиПериодовПерерасчетов");
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьВТСотрудникиПериодовПерерасчетов(Запрос.МенеджерВременныхТаблиц,
			Организация,
			Подразделение,
			МесяцНачисления,
			"ВТПерерасчетЗарплатыСОбластямиПерерасчетов");
	КонецЕсли;
	
	Если СотрудникиПериодДействияПерерасчет = Неопределено
		Или СотрудникиПериодДействияПерерасчет.Количество() = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(СотрудникиПериодовПерерасчетов.Период, МЕСЯЦ) КАК ПериодДействия,
			|	СотрудникиПериодовПерерасчетов.Организация,
			|	СотрудникиПериодовПерерасчетов.Сотрудник,
			|	СотрудникиПериодовПерерасчетов.ФизическоеЛицо,
			|	ПерерасчетЗарплатыСОбластями.ВидРасчета,
			|	ПерерасчетЗарплатыСОбластями.ПерерасчетНачислений,
			|	ПерерасчетЗарплатыСОбластями.ПерерасчетЛьгот
			|ПОМЕСТИТЬ ВТПерерассчитываемыеСотрудники
			|ИЗ
			|	ВТСотрудникиПериодовПерерасчетов КАК СотрудникиПериодовПерерасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПерерасчетЗарплатыСОбластямиПерерасчетов КАК ПерерасчетЗарплатыСОбластями
			|		ПО СотрудникиПериодовПерерасчетов.Сотрудник = ПерерасчетЗарплатыСОбластями.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(СотрудникиПериодовПерерасчетов.Период, МЕСЯЦ) = ПерерасчетЗарплатыСОбластями.НачалоПериода)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерасчетЗарплатыСОбластямиПерерасчетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерасчетЗарплаты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиПериодовПерерасчетов";
		
	Иначе
		
		Запрос.УстановитьПараметр("СотрудникиПериодДействияПерерасчет", СотрудникиПериодДействияПерерасчет);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&Организация КАК Организация,
			|	ПерерассчитываемыеСотрудники.Сотрудник КАК Сотрудник,
			|	ПерерассчитываемыеСотрудники.ВидРасчета КАК ВидРасчета,
			|	ПерерассчитываемыеСотрудники.ПериодДействия КАК ПериодДействия,
			|	ПерерассчитываемыеСотрудники.ПерерасчетНачислений КАК ПерерасчетНачислений,
			|	ПерерассчитываемыеСотрудники.ПерерасчетЛьгот КАК ПерерасчетЛьгот,
			|	ПерерассчитываемыеСотрудники.ПерерасчетУдержаний КАК ПерерасчетУдержаний
			|ПОМЕСТИТЬ ВТСотрудникиПериодДействияПерерасчет
			|ИЗ
			|	&СотрудникиПериодДействияПерерасчет КАК ПерерассчитываемыеСотрудники
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(СотрудникиПериодовПерерасчетов.Период, МЕСЯЦ) КАК ПериодДействия,
			|	СотрудникиПериодовПерерасчетов.Организация КАК Организация,
			|	СотрудникиПериодовПерерасчетов.Сотрудник КАК Сотрудник,
			|	СотрудникиПериодовПерерасчетов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ПерерасчетЗарплатыСОбластями.ВидРасчета КАК ВидРасчета,
			|	ПерерасчетЗарплатыСОбластями.ПерерасчетНачислений КАК ПерерасчетНачислений,
			|	ПерерасчетЗарплатыСОбластями.ПерерасчетЛьгот КАК ПерерасчетЛьгот
			|ПОМЕСТИТЬ ВТПерерассчитываемыеСотрудники
			|ИЗ
			|	ВТСотрудникиПериодовПерерасчетов КАК СотрудникиПериодовПерерасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПерерасчетЗарплатыСОбластямиПерерасчетов КАК ПерерасчетЗарплатыСОбластями
			|		ПО СотрудникиПериодовПерерасчетов.Сотрудник = ПерерасчетЗарплатыСОбластями.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(СотрудникиПериодовПерерасчетов.Период, МЕСЯЦ) = ПерерасчетЗарплатыСОбластями.НачалоПериода)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериодовПерерасчетов.ПериодДействия,
			|	СотрудникиПериодовПерерасчетов.Организация,
			|	СотрудникиПериодовПерерасчетов.Сотрудник,
			|	ВЫРАЗИТЬ(СотрудникиПериодовПерерасчетов.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
			|	СотрудникиПериодовПерерасчетов.ВидРасчета,
			|	МАКСИМУМ(СотрудникиПериодовПерерасчетов.ПерерасчетНачислений),
			|	МАКСИМУМ(СотрудникиПериодовПерерасчетов.ПерерасчетЛьгот)
			|ИЗ
			|	ВТСотрудникиПериодДействияПерерасчет КАК СотрудникиПериодовПерерасчетов
			|ГДЕ
			|	(СотрудникиПериодовПерерасчетов.ПерерасчетНачислений
			|			ИЛИ СотрудникиПериодовПерерасчетов.ПерерасчетЛьгот)
			|
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиПериодовПерерасчетов.ПериодДействия,
			|	СотрудникиПериодовПерерасчетов.Организация,
			|	СотрудникиПериодовПерерасчетов.Сотрудник,
			|	СотрудникиПериодовПерерасчетов.ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерасчетЗарплатыСОбластямиПерерасчетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерасчетЗарплаты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиПериодовПерерасчетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиПериодДействияПерерасчет";
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПерерассчитываемыеСотрудники", ИмяВТПерерассчитываемыеСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПерерассчитываемыеУдержанияСотрудников(МенеджерВременныхТаблиц, Организация, Подразделение, Сотрудники = Неопределено, СотрудникиПериодДействияПерерасчет, МесяцНачисления, РежимДоначисления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодДействия", МесяцНачисления);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЗначениеЗаполнено(Сотрудники) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиОрганизации
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Выполнить();
	Иначе
		ПараметрыПостроения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПостроения.ОкончаниеПериода = КонецМесяца(МесяцНачисления);;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Организация", "=", Организация);
			
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.Отборы, "Подразделение", "В ИЕРАРХИИ", Подразделение);
		КонецЕсли;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПостроения);
	КонецЕсли;
	
	ДобавитьСотрудникиПериодДействияПерерасчет = Ложь;
	
	Если СотрудникиПериодДействияПерерасчет <> Неопределено
		И СотрудникиПериодДействияПерерасчет.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("СотрудникиПериодДействияПерерасчет", СотрудникиПериодДействияПерерасчет);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СотрудникиПериодДействияПерерасчет.ПериодДействия КАК ПериодДействия,
			|	СотрудникиПериодДействияПерерасчет.Сотрудник КАК ФизическоеЛицо,
			|	СотрудникиПериодДействияПерерасчет.ВидРасчета КАК Удержание,
			|	СотрудникиПериодДействияПерерасчет.ДокументОснование КАК ДокументОснование,
			|	СотрудникиПериодДействияПерерасчет.ПерерасчетУдержаний КАК ПерерасчетУдержаний
			|ПОМЕСТИТЬ ВТСотрудникиПериодДействияПерерасчетУдержаний
			|ИЗ
			|	&СотрудникиПериодДействияПерерасчет КАК СотрудникиПериодДействияПерерасчет";
		
		Запрос.Выполнить();
		
		ДобавитьСотрудникиПериодДействияПерерасчет = Истина;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ПерерасчетУдержаний.ПериодДействия, МЕСЯЦ) КАК НачалоПериода,
		|	СотрудникиОрганизации.Сотрудник,
		|	ПерерасчетУдержаний.ФизическоеЛицо,
		|	ПерерасчетУдержаний.Удержание,
		|	ПерерасчетУдержаний.ДокументОснование
		|ПОМЕСТИТЬ ВТПерерассчитываемыеУдержанияСотрудников
		|ИЗ
		|	РегистрСведений.ПерерасчетУдержаний КАК ПерерасчетУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ПО ПерерасчетУдержаний.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
		|ГДЕ
		|	ПерерасчетУдержаний.Организация = &Организация
		|	И ПерерасчетУдержаний.ПериодДействия <= &ПериодДействия";
	
	Если Не РежимДоначисления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПерерасчетУдержаний.ПериодДействия <= &ПериодДействия", "И ПерерасчетУдержаний.ПериодДействия < &ПериодДействия");
	КонецЕсли;
	
	Если ДобавитьСотрудникиПериодДействияПерерасчет Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
			|"
			+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
			  |	НАЧАЛОПЕРИОДА(СотрудникиПериодДействияПерерасчет.ПериодДействия, МЕСЯЦ) КАК НачалоПериода,
			  |	СотрудникиОрганизации.Сотрудник,
			  |	СотрудникиПериодДействияПерерасчет.ФизическоеЛицо,
			  |	СотрудникиПериодДействияПерерасчет.Удержание,
			  |	СотрудникиПериодДействияПерерасчет.ДокументОснование
			  |ИЗ
			  |	ВТСотрудникиПериодДействияПерерасчетУдержаний КАК СотрудникиПериодДействияПерерасчет
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			  |		ПО СотрудникиПериодДействияПерерасчет.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
			  |ГДЕ
			  |	СотрудникиПериодДействияПерерасчет.ПерерасчетУдержаний";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	Если ДобавитьСотрудникиПериодДействияПерерасчет Тогда
		
		Запрос.Текст = Запрос.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ "УНИЧТОЖИТЬ ВТСотрудникиПериодДействияПерерасчетУдержаний";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиОрганизацииКРасчету(МенеджерВременныхТаблиц, ПараметрыПолученияСотрудников, СотрудникиПериодДействияПерерасчет, РежимДоначисления, ИмяВТСотрудникиОрганизацииКПерерасчету) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СоздатьВТПерерассчитываемыеСотрудники(
		МенеджерВременныхТаблиц,
		ПараметрыПолученияСотрудников.Организация,
		ПараметрыПолученияСотрудников.Подразделение,
		НачалоМесяца(ПараметрыПолученияСотрудников.НачалоПериода),
		СотрудникиПериодДействияПерерасчет,
		РежимДоначисления);
		
	СоздатьВТПерерассчитываемыеУдержанияСотрудников(
		МенеджерВременныхТаблиц,
		ПараметрыПолученияСотрудников.Организация,
		ПараметрыПолученияСотрудников.Подразделение,
		,
		СотрудникиПериодДействияПерерасчет,
		НачалоМесяца(ПараметрыПолученияСотрудников.НачалоПериода),
		РежимДоначисления);
		
	Если РежимДоначисления Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизации.ПериодДействия КАК Период,
			|	СотрудникиОрганизации.ПериодДействия КАК ПериодЗаписи,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиОрганизацииКПерерасчету
			|ИЗ
			|	ВТПерерассчитываемыеСотрудники КАК СотрудникиОрганизации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СотрудникиОрганизации.НачалоПериода,
			|	СотрудникиОрганизации.НачалоПериода,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	ВТПерерассчитываемыеУдержанияСотрудников КАК СотрудникиОрганизации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерассчитываемыеСотрудники";
		
	Иначе
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, "ВТСотрудникиОрганизацииОсновнойТаблицы");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизации.Период,
			|	СотрудникиОрганизации.ПериодЗаписи,
			|	СотрудникиОрганизации.Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиОрганизацииКПерерасчету
			|ИЗ
			|	ВТСотрудникиОрганизацииОсновнойТаблицы КАК СотрудникиОрганизации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СотрудникиОрганизации.ПериодДействия,
			|	СотрудникиОрганизации.ПериодДействия,
			|	СотрудникиОрганизации.Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо
			|ИЗ
			|	ВТПерерассчитываемыеСотрудники КАК СотрудникиОрганизации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СотрудникиОрганизации.НачалоПериода,
			|	СотрудникиОрганизации.НачалоПериода,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	ВТПерерассчитываемыеУдержанияСотрудников КАК СотрудникиОрганизации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиОрганизацииОсновнойТаблицы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерассчитываемыеСотрудники";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОрганизацииКПерерасчету", ИмяВТСотрудникиОрганизацииКПерерасчету);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПерерасчета(ДанныеПерерасчета, Организация, Подразделение = Неопределено, МесяцНачисления, Сотрудники, СотрудникиПериодДействияПерерасчет, ИсключаемыеРегистраторы, РежимДоначисления, МенеджерРасчета) Экспорт
	
	РегистрацияПерерасчетовПоПредварительнымДанным(,Организация);
	ЗаполнитьДанныеПерерасчетаНачислений(
		ДанныеПерерасчета,
		Организация,
		Подразделение,
		МесяцНачисления,
		Сотрудники,
		СотрудникиПериодДействияПерерасчет,
		ИсключаемыеРегистраторы,
		РежимДоначисления,
		МенеджерРасчета);
	
	УстановитьОтборыПерерасчетовУдержаний(
		ДанныеПерерасчета,
		МенеджерРасчета,
		Организация,
		Подразделение,
		Сотрудники,
		СотрудникиПериодДействияПерерасчет,
		МесяцНачисления,
		РежимДоначисления);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПерерасчетаНачислений(ДанныеПерерасчета, Организация, Подразделение = Неопределено, МесяцНачисления, Сотрудники, СотрудникиПериодДействияПерерасчет, ИсключаемыеРегистраторы, РежимДоначисления, МенеджерРасчета)
	
	КатегорииНачисленийПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПерерассчитываемыеСотрудники(
		МенеджерВременныхТаблиц,
		Организация,
		Подразделение,
		МесяцНачисления,
		СотрудникиПериодДействияПерерасчет,
		РежимДоначисления,
		Сотрудники);
		
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТПерерассчитываемыеСотрудники") Тогда
		Возврат;
	КонецЕсли;

	СоздатьВТСторнируемыеРегистраторы(МенеджерВременныхТаблиц, ИсключаемыеРегистраторы);
	Если ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТСторнируемыеРегистраторы") Тогда
		РаспределенияТерриторииПоказатели = ТаблицыРаспределенияТерриторийПоказателей(МенеджерВременныхТаблиц);
		ЗаполнитьСторнированиеНачислений(МенеджерВременныхТаблиц, Организация, ДанныеПерерасчета, КатегорииНачисленийПособий, РаспределенияТерриторииПоказатели, МесяцНачисления);
		ЗаполнитьСторнированиеПособий(МенеджерВременныхТаблиц, Организация, ДанныеПерерасчета, КатегорииНачисленийПособий, РаспределенияТерриторииПоказатели, МесяцНачисления);
	КонецЕсли;
	
	ЗаполнитьПериодыПерерасчетаСотрудников(МенеджерВременныхТаблиц, ДанныеПерерасчета, МенеджерРасчета);
	
КонецПроцедуры

Функция ДанныеПерерасчетаПустаяСтруктура() Экспорт
	
	ДанныеПерерасчета = Новый Структура(
		"НачисленияПерерасчет,
		|ПособияПерерасчет,
		|ТаблицаСотрудников,
		|ТаблицаУдержаний,
		|СотрудникиПерерасчет");
	
	ДанныеПерерасчета.ТаблицаСотрудников = Новый ТаблицаЗначений;
	ДанныеПерерасчета.ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеПерерасчета.ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеПерерасчета.ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ДанныеПерерасчета.ТаблицаУдержаний = ДанныеПерерасчета.ТаблицаСотрудников.Скопировать();
	ДанныеПерерасчета.СотрудникиПерерасчет = ПустаяТаблицаСотрудникиПериодДействияПерерасчет();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета);
	КонецЕсли;
	
	Возврат ДанныеПерерасчета;
	
КонецФункции

Процедура УстановитьОтборыПерерасчетовУдержаний(ДанныеПерерасчета, МенеджерРасчета, Организация, Подразделение, Сотрудники, СотрудникиПериодДействияПерерасчет, МесяцНачисления, РежимДоначисления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	ТаблицаПерерассчитываемыхУдержаний = Новый ТаблицаЗначений;
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	СоздатьВТПерерассчитываемыеУдержанияСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		Организация,
		Подразделение,
		Сотрудники,
		СотрудникиПериодДействияПерерасчет,
		МесяцНачисления,
		РежимДоначисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерасчетУдержаний.НачалоПериода КАК НачалоПериода,
		|	ПерерасчетУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерасчетУдержаний.Удержание КАК Удержание,
		|	ПерерасчетУдержаний.ДокументОснование КАК ДокументОснование,
		|	ПерерасчетУдержаний.Сотрудник
		|ИЗ
		|	ВТПерерассчитываемыеУдержанияСотрудников КАК ПерерасчетУдержаний
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоПериода,
		|	ФизическоеЛицо,
		|	Удержание,
		|	ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НачалоПериода") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Удержание") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
					НоваяСтрока = ТаблицаПерерассчитываемыхУдержаний.Добавить();
					НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
					НоваяСтрока.ФизическоеЛицо = Выборка.ФизическоеЛицо;
					НоваяСтрока.Удержание = Выборка.Удержание;
					НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
					НоваяСтрока.ДатаНачала = Выборка.НачалоПериода;
					НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаНачала);
					
					НоваяСтрокаСотрудникиПерерасчет = ДанныеПерерасчета.СотрудникиПерерасчет.Добавить();
					НоваяСтрокаСотрудникиПерерасчет.Сотрудник = Выборка.ФизическоеЛицо;
					НоваяСтрокаСотрудникиПерерасчет.ФизическоеЛицо = Выборка.ФизическоеЛицо;
					НоваяСтрокаСотрудникиПерерасчет.ПериодДействия = Выборка.НачалоПериода;
					НоваяСтрокаСотрудникиПерерасчет.ВидРасчета = Выборка.Удержание;
					НоваяСтрокаСотрудникиПерерасчет.ДокументОснование = Выборка.ДокументОснование;
					НоваяСтрокаСотрудникиПерерасчет.ПерерасчетУдержаний = Истина;
					
					МенеджерРасчета.ДобавитьОтборПерерасчетовУдержаний(Выборка.ФизическоеЛицо, Выборка.НачалоПериода, Выборка.Удержание, Выборка.ДокументОснование);
					
					Пока Выборка.Следующий() Цикл
						НоваяСтрока = ДанныеПерерасчета.ТаблицаУдержаний.Добавить();
						НоваяСтрока.Сотрудник = Выборка.Сотрудник;
						НоваяСтрока.ДатаНачала = Выборка.НачалоПериода;
						НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаНачала);
						НоваяСтрока.ПериодПерерасчета = Истина;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаПерерассчитываемыхУдержаний.Количество() > 0 Тогда
		МенеджерРасчета.ДополнительныеСвойства.Вставить("ТаблицаПерерассчитываемыхУдержаний", ТаблицаПерерассчитываемыхУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборыПерерасчетовНачислений(МенеджерРасчета, МенеджерВременныхТаблиц)
	
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтборов.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаОтборов.Колонки.Добавить("Начисления", Новый ОписаниеТипов("Массив"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СторнируемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	СторнируемыеРегистраторы.ПериодДействия КАК ПериодДействия
		|ИЗ
		|	ВТСторнируемыеРегистраторыНачисленийИЛьгот КАК СторнируемыеРегистраторы
		|ГДЕ
		|	СторнируемыеРегистраторы.ПерерасчетНачислений
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ИсключаемыеКатегорииНачислений = Новый Массив;
		ИсключаемыеКатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.УправленческийУчет);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьИсключаемыеКатегорииКатегориямиЛьгот(ИсключаемыеКатегорииНачислений);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИсключаемыеКатегорииНачислений", ИсключаемыеКатегорииНачислений);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.Ссылка
			|ИЗ
			|	ПланВидовРасчета.Начисления КАК Начисления
			|ГДЕ
			|	НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&ИсключаемыеКатегорииНачислений)";
		
		ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
		Если ТаблицаНачислений.Количество() > 0 Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ТаблицаОтборов.Добавить();
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ПериодДействия = Выборка.ПериодДействия;
				НоваяСтрока.Начисления = ТаблицаНачислений.ВыгрузитьКолонку("Ссылка");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьОтборПерерасчетовНачисленийЛьготами(ТаблицаОтборов, Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ДополнитьОтборПерерасчетовУправленческихНачислений(ТаблицаОтборов, Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Для каждого СтрокаТаблицыОтборов Из ТаблицаОтборов Цикл
		МенеджерРасчета.ДобавитьОтборПерерасчетовНачислений(СтрокаТаблицыОтборов.Сотрудник, СтрокаТаблицыОтборов.ПериодДействия, СтрокаТаблицыОтборов.Начисления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьБазовыйПериод(СтрокаПриемник, СтрокаИсточник)
	
	ИнформацияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаИсточник.Начисление);
	Если ИнформацияОНачислении.ТребуетсяРасчетБазы
		И ИнформацияОНачислении.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
		
		СтрокаПриемник.НачалоБазовогоПериода = СтрокаИсточник.ДатаНачала;
		СтрокаПриемник.ОкончаниеБазовогоПериода = СтрокаИсточник.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределения(СтрокаСторноПерерасчет, ТаблицаРаспределения, Ссылка, ИдентификаторСтрокиВидаРасчета)
	
	СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки", Ссылка, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределения = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределения.Количество() > 0 Тогда
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			НоваяСтрока = СтрокаСторноПерерасчет.РаспределениеПоСтатьям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
			НоваяСтрока.Результат = -НоваяСтрока.Результат;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределенияПоТерриториям(СтрокаСторноПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Ссылка, ИдентификаторСтрокиВидаРасчета);
	
	СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки", Ссылка, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда = ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда.Количество() > 0 Тогда
		
		СтрокиРаспределения = Новый Массив;
		Для каждого СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда Из СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда Цикл
			
			НоваяСтрока = СтрокаСторноПерерасчет.ТерриторииУсловияТруда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда);
			НоваяСтрока.Результат = -НоваяСтрока.Результат;
			НоваяСтрока.РанееНачислено = -НоваяСтрока.РанееНачислено;
			НоваяСтрока.Показатели = Обработки.МенеджерРасчетаЗарплаты.ТаблицаПоказателей();
			
			Если ЗначениеЗаполнено(СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда.ИдентификаторСтрокиПоказателей) Тогда
				
				Показатели = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
				Для ИндексПоказателя = 1 По Показатели.Количество() - 1 Цикл
					
					СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки,Показатель",
						Ссылка, СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда.ИдентификаторСтрокиПоказателей,
						Показатели[ИндексПоказателя]);
					
					СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
					Если СтрокиПоказателей.Количество() > 0  Тогда
						
						НоваяСтрокаПоказателей = НоваяСтрока.Показатели.Добавить();
						НоваяСтрокаПоказателей.Показатель = СтрокиПоказателей[0].Показатель;
						НоваяСтрокаПоказателей.Значение = СтрокиПоказателей[0].Значение;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказатели(СтрокаСторноПерерасчет, ТаблицаПоказателей, Ссылка, ИдентификаторСтрокиВидаРасчета)
	
	НомерПоказателя = 1;
	ИнформацияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаСторноПерерасчет.Начисление);
	Для каждого ОписаниеПоказателя Из ИнформацияОНачислении.Показатели Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки,Показатель", Ссылка, ИдентификаторСтрокиВидаРасчета, ОписаниеПоказателя.Показатель);
		СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПоказателей.Количество() > 0  Тогда
			НоваяСтрока = СтрокаСторноПерерасчет.Показатели.Добавить();
			НоваяСтрока.Показатель = ОписаниеПоказателя.Показатель;
			НоваяСтрока.Значение = СтрокиПоказателей[0].Значение;
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтрокиВидаРасчета;
		КонецЕсли;
		НомерПоказателя = НомерПоказателя + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция КлючСтрокиИзменился(ЭталонныйКлюч, Строка)
	
	Для Каждого ЭлементСтруктуры Из ЭталонныйКлюч Цикл
		Если ЭлементСтруктуры.Значение <> Строка[ЭлементСтруктуры.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область РегистрацияДоначисленийНеПолныхПериодов

Процедура РассчитатьПериодыДоначисленийНеПолныхПериодов(Выборка) Экспорт
	
	ТекущийСотрудник = Неопределено;
	ТекущийПериодДействия = Неопределено;
	ОрганизацияТекущегоСотрудника = Неопределено;
	
	ПериодыДействия = Новый ТаблицаЗначений;
	ПериодыДействия.Колонки.Добавить("ПериодРегистрации");
	ПериодыДействия.Колонки.Добавить("Погашение");
	ПериодыДействия.Колонки.Добавить("ДатаНачала");
	ПериодыДействия.Колонки.Добавить("ДатаОкончания");
	ПериодыДействия.Колонки.Добавить("Регистратор");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сотрудник <> ТекущийСотрудник 
			Или Выборка.ПериодДействия <> ТекущийПериодДействия 
			Или Выборка.Организация <> ОрганизацияТекущегоСотрудника Тогда
			
			Если ТекущийСотрудник <> Неопределено Тогда 
				ЗарегистрироватьДоначисленияНеПолныхПериодов(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия);
			КонецЕсли;
			
			ТекущийСотрудник = Выборка.Сотрудник;
			ТекущийПериодДействия = Выборка.ПериодДействия;
			ОрганизацияТекущегоСотрудника = Выборка.Организация;
			
		КонецЕсли;
		
		Период = ПериодыДействия.Добавить();
		Период.Погашение 			= Ложь;
		Период.ПериодРегистрации 	= Выборка.ПериодРегистрации;
		Период.ДатаНачала 			= Выборка.ДатаНачала;
		Период.ДатаОкончания 		= Выборка.ДатаОкончания;
		Период.Регистратор 			= Выборка.Регистратор;
		
		Если Выборка.ДатаНачалаПогашения <> Null Тогда
			
			Период = ПериодыДействия.Добавить();
			Период.Погашение 			= Истина;
			Период.ПериодРегистрации 	= Выборка.ПериодРегистрацииПогашения;
			Период.ДатаНачала 			= Выборка.ДатаНачалаПогашения;
			Период.ДатаОкончания 		= Выборка.ДатаОкончанияПогашения;
			Период.Регистратор 			= Выборка.РегистраторПогашения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийСотрудник <> Неопределено Тогда
		ЗарегистрироватьДоначисленияНеПолныхПериодов(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДоначисленияНеПолныхПериодов(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия)
	
	ПериодыДоначисления = Новый ТаблицаЗначений;
	ПериодыДоначисления.Колонки.Добавить("Регистратор");
	ПериодыДоначисления.Колонки.Добавить("РегистраторПредставление");
	ПериодыДоначисления.Колонки.Добавить("ВидРасчета");
	ПериодыДоначисления.Колонки.Добавить("ДатаНачала");
	ПериодыДоначисления.Колонки.Добавить("ДатаОкончания");
	
	ПериодыДействия.Сортировать("ПериодРегистрации, Погашение");
	Для Каждого Период Из ПериодыДействия Цикл
		
		Если Период.Погашение Тогда
			УдалитьПериод(ПериодыДоначисления, Период.ДатаНачала, Период.ДатаОкончания);
		Иначе
			ДобавитьПериод(ПериодыДоначисления, Период.ДатаНачала, Период.ДатаОкончания, Период.Регистратор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПериодыДоначисления.Количество() > 0 Тогда
		
		РегистраторыПериодовДоначисления = ОбщегоНазначения.ВыгрузитьКолонку(ПериодыДоначисления, "Регистратор", Истина);
		
		НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(ТекущийСотрудник);
		НаборЗаписей.Отбор.ПериодДействия.Установить(ТекущийПериодДействия);
		НаборЗаписей.Отбор.Организация.Установить(ОрганизацияТекущегоСотрудника);
		НаборЗаписей.Отбор.Доначисление.Установить(Истина);
		НаборЗаписей.Прочитать();
		
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		
		Для Каждого Регистратор Из РегистраторыПериодовДоначисления Цикл
			
			СтрокиРегистратора = ТаблицаНабора.НайтиСтроки(Новый Структура("Основание", Регистратор));
			Для Каждого СтрокаРегистратора Из СтрокиРегистратора Цикл
				ТаблицаНабора.Удалить(СтрокаРегистратора);
			КонецЦикла;
			
			Строка = ТаблицаНабора.Добавить();
			Строка.Организация		= ОрганизацияТекущегоСотрудника;
			Строка.Сотрудник		= ТекущийСотрудник;
			Строка.ФизическоеЛицо	= ТекущийСотрудник.ФизическоеЛицо;
			Строка.ПериодДействия	= ТекущийПериодДействия;
			Строка.Основание		= Регистратор;
			Строка.Доначисление		= Истина;
			
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаНабора);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ПериодыДействия.Очистить();
	
КонецПроцедуры

Процедура ДобавитьПериод(Периоды, Начало, Окончание, Регистратор)
	
	НоваяСтрока = Периоды.Добавить();
	НоваяСтрока.Регистратор = Регистратор;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	// обработаем полученные периоды
	Периоды.Сортировать("ДатаНачала");
	ПрошлаяДатаНачала = '0001-01-01';
	ПрошлаяДатаОкончания = '0001-01-01';
	ПрошлыйРегистратор = Неопределено;
	ПрошлаяСтрока = Неопределено;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПериода Из Периоды Цикл
		
		Если СтрокаПериода.ДатаНачала <= ПрошлаяДатаОкончания + 1 И ПрошлыйРегистратор = СтрокаПериода.Регистратор Тогда
			// склеим периоды
			СтрокаПериода.ДатаНачала = Мин(СтрокаПериода.ДатаНачала, ПрошлаяДатаНачала);
			СтрокаПериода.ДатаОкончания = Макс(СтрокаПериода.ДатаОкончания, ПрошлаяДатаОкончания);
			СтрокиКУдалению.Добавить(ПрошлаяСтрока);
		КонецЕсли;
		
		ПрошлаяДатаНачала = СтрокаПериода.ДатаНачала;
		ПрошлаяДатаОкончания = СтрокаПериода.ДатаОкончания;
		ПрошлыйРегистратор = СтрокаПериода.Регистратор;
		ПрошлаяСтрока = СтрокаПериода;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Периоды.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПериод(ПериодыДоначисления, ДатаНачала, ДатаОкончания)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаПериода Из ПериодыДоначисления Цикл
		
		Если ДатаНачала <= СтрокаПериода.ДатаНачала 
			И ДатаОкончания > СтрокаПериода.ДатаНачала 
			И ДатаОкончания < СтрокаПериода.ДатаОкончания Тогда
			
			СтрокаПериода.ДатаНачала = ДатаОкончания + 1;
			
		ИначеЕсли ДатаНачала > СтрокаПериода.ДатаНачала 
			И ДатаНачала < СтрокаПериода.ДатаОкончания 
			И ДатаОкончания >= СтрокаПериода.ДатаОкончания Тогда 
			
			СтрокаПериода.ДатаОкончания = ДатаНачала - 1;
			
		ИначеЕсли ДатаНачала > СтрокаПериода.ДатаНачала
			И ДатаОкончания < СтрокаПериода.ДатаОкончания Тогда
			
			// добавим новый период
			НоваяСтрока = ПериодыДоначисления.Добавить();
			НоваяСтрока.ДатаНачала = ДатаОкончания + 1;
			НоваяСтрока.ДатаОкончания = СтрокаПериода.ДатаОкончания;
			НоваяСтрока.Регистратор = СтрокаПериода.Регистратор;
			
			// сократим прежний
			СтрокаПериода.ДатаОкончания = ДатаНачала - 1;
			
		ИначеЕсли ДатаНачала <= СтрокаПериода.ДатаНачала
			И ДатаОкончания >= СтрокаПериода.ДатаОкончания Тогда
			
			СтрокиКУдалению.Добавить(СтрокаПериода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ПериодыДоначисления.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновленияИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.БольничныйЛист.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("db2fe40b-9deb-4e93-908f-bff3376855a4");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Больничный лист"".';
									|en = 'Fill in source data register for recalculations under the ""Sick leave record"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ДоходВНатуральнойФорме.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("3c9859df-18bc-4ef6-bffc-19f32d1b0aa8");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Доход в натуральной форме"".';
									|en = 'Fill in source data register for recalculations under the ""Income in kind"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.Командировка.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("9187b87e-f009-4c01-9042-d97543341c93");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Командировка"".';
									|en = 'Fill in source data register for recalculations under the ""Business trip"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.МатериальнаяПомощь.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("afbdf767-5c53-4aa5-aada-089b3dc4d892");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Материальная помощь"".';
									|en = 'Fill in source data register for recalculations under the ""Support payment"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.НачислениеЗарплаты.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("3d87ee9b-ab51-436d-9931-cb239ee32d39");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Начисление зарплаты и взносов"".';
									|en = 'Fill in source data register for recalculations under the ""Accrual of salary and contributions"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("6d1a8d22-06fb-4a93-babd-8e07be55adb1");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Оплата дней ухода за детьми-инвалидами"".';
									|en = 'Fill in source data register for recalculations under the ""Payment for disabled child care days"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ОплатаПоСреднемуЗаработку.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("d9dd4622-a319-41f2-8305-dce99e0e28b9");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Отсутствие с сохранением оплаты"".';
									|en = 'Fill in source data register for recalculations under the ""Paid absence"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.Отгул.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("94ab701b-1565-4830-a6cc-2d641452e3b6");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Отгул"".';
									|en = 'Fill in source data register for recalculations under the ""Day off"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ОтгулСписком.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("1d2bed12-b054-4989-8503-e85da6ee824e");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Отгул списком"".';
									|en = 'Fill in source data register for recalculations under the ""Day off as a list"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.Отпуск.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("f8339f7d-1950-4b40-8b16-557cc671f2aa");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Отпуск"".';
									|en = 'Fill in source data register for recalculations under the Leave documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ОтпускБезСохраненияОплаты.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("647e780f-e790-4600-b046-b95be14e0794");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Отпуск без сохранения оплаты"".';
									|en = 'Fill in source data register for recalculations under the ""Unpaid leave"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ОтпускБезСохраненияОплатыСписком.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("9f1a0465-899c-40a5-b214-ab1720ea9261");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Отпуск без сохранения оплаты списком"".';
									|en = 'Fill in source data register for recalculations under the ""Unpaid leave as a list"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ОтпускПоУходуЗаРебенком.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("857ad5f9-f519-49f5-b969-c1345072f029");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Отпуск по уходу за ребенком"".';
									|en = 'Fill in source data register for recalculations under the ""Child care leave"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.Премия.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("e09112c2-c32b-4b04-9d22-9358a8979ddb");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Премия"".';
									|en = 'Fill in source data register for recalculations under the Bonus documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ПрогулНеявка.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("6b2ee724-511a-4d50-b096-adbb150713cb");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Отсутствие (болезнь, прогул, неявка)"".';
									|en = 'Fill in source data register for recalculations under the ""Absence (sick leave, unauthorized absence)"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.ПростойСотрудников.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("28f24830-ec13-45c5-8db7-5bd6010eddf7");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Простой сотрудников"".';
									|en = 'Fill in source data register for recalculations under the ""Employee downtime"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.РазовоеНачисление.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("ac0c418b-3d7e-493c-aea0-6b24f32fc48f");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Разовое начисление"".';
									|en = 'Fill in source data register for recalculations under the ""One-time accrual"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.СторнированиеНачислений.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("a857ca75-ec53-4074-be10-aec270861c67");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Сторнирование начислений"".';
									|en = 'Fill in source data register for recalculations under the ""Accrual reversal"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.Увольнение.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("45bc7b6b-5dc1-499d-9125-bb45c9d701b4");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Увольнение"".';
									|en = 'Fill in source data register for recalculations under the ""Termination of employment"" documents.'");

    Обработчик = Обработчики.Добавить();
    Обработчик.Версия = "3.1.8.59";
    Обработчик.Процедура = "Документы.УвольнениеСписком.ЗаполнитьИсходныеДанныеПерерасчетов";
    Обработчик.РежимВыполнения = "Отложенно";
    Обработчик.Идентификатор = Новый УникальныйИдентификатор("8fa75abb-fa65-46d9-ab0a-da5a3ad13175");
    Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра исходных данных для перерасчетов по документам ""Увольнение списком"".';
									|en = 'Fill in source data register for recalculations under the ""Multiple terminations of employment"" documents.'");
	
КонецПроцедуры

#КонецОбласти

Процедура УдалитьПредварительныеПерерасчеты(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредварительныеПерерасчетыВременные.РегистраторПерерасчета КАК РегистраторПерерасчета
		|ИЗ
		|	ВТПредварительныеПерерасчетыВременные КАК ПредварительныеПерерасчетыВременные";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ПредварительныеПерерасчеты.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.РегистраторПерерасчета.Установить(Выборка.РегистраторПерерасчета);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПредварительныеПерерасчеты(Регистратор = Неопределено, Организация = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета = &Регистратор
		|	И ПредварительныеПерерасчеты.Организация = &Организация";
	
	Если Регистратор <> Неопределено Тогда
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПредварительныеПерерасчеты.РегистраторПерерасчета = &Регистратор", "ИСТИНА");
	КонецЕсли;
	
	Если Организация <> Неопределено Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПредварительныеПерерасчеты.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗаписатьПредварительныеПерерасчетыПоИзменениямВНаборах(ИзмененияВНаборахИсточников, Регистратор)
	
	ПредварительныеПерерасчеты = РегистрыСведений.ПредварительныеПерерасчеты.СоздатьНаборЗаписей();
	ПредварительныеПерерасчеты.Отбор.РегистраторПерерасчета.Установить(Регистратор);
	
	ДобавитьПредварительныеПерерасчетыПоИзменениямКадровойИстории(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, Регистратор);
	ДобавитьПредварительныеПерерасчетыПоИзменениямПлановыхНачислений(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, Регистратор);
	ДобавитьПредварительныеПерерасчетыПоИзменениямПримененийПлановыхНачислений(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, Регистратор);
	ДобавитьПредварительныеПерерасчетыПоИзменениямПоказателей(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, Регистратор);
	ДобавитьПредварительныеПерерасчетыПоИзменениямУчетаВремени(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, Регистратор);
	ДобавитьПредварительныеПерерасчетыПоИзменениямУсловийИсполнительныхЛистов(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, Регистратор);
	ДобавитьПредварительныеПерерасчетыПоИзменениямПлановыхУдержаний(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, Регистратор);
	ДобавитьПредварительныеПерерасчетыПоИзменениямУсловийОплатыОтпускаПоУходу(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, Регистратор);
	
	Если ПредварительныеПерерасчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьПредварительныеПерерасчеты(ПредварительныеПерерасчеты, Регистратор);
	
КонецПроцедуры

Процедура ЗарегистрироватьПредварительныеПерерасчеты(ПредварительныеПерерасчеты, Регистратор)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, ПредварительныеПерерасчеты);
	СоздатьВТСотрудникиОрганизацииКПерерасчету(МенеджерВременныхТаблиц);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РегистраторПерерасчета", Регистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	ВТСотрудникиКПерерасчету КАК ВТСотрудникиКПерерасчету
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	ВТОрганизацииКПерерасчету КАК ВТОрганизацииКПерерасчету";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.ПериодПерерасчета КАК ПериодПерерасчета,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета КАК ВладелецПерерасчета,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ПредварительныеПерерасчеты.ТипИзменения КАК ТипИзменения,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование,
		|	ПредварительныеПерерасчеты.НачалоУчета КАК НачалоУчета
		|ИЗ
		|	РегистрСведений.ПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета = &РегистраторПерерасчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(ПредварительныеПерерасчеты.ПериодПерерасчета),
		|	ЕСТЬNULL(СотрудникиКПерерасчету.Организация, ОрганизацииКПерерасчету.Организация),
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета,
		|	ПредварительныеПерерасчеты.ТипИзменения,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные,
		|	ПредварительныеПерерасчеты.ДокументОснование,
		|	ПредварительныеПерерасчеты.НачалоУчета
		|ИЗ
		|	ВТРегистрСведений_ПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиКПерерасчету КАК СотрудникиКПерерасчету
		|		ПО ПредварительныеПерерасчеты.ВладелецПерерасчета = СотрудникиКПерерасчету.ВладелецПерерасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизацииКПерерасчету КАК ОрганизацииКПерерасчету
		|		ПО ПредварительныеПерерасчеты.Организация = ОрганизацииКПерерасчету.Организация
		|ГДЕ
		|	(НЕ СотрудникиКПерерасчету.ВладелецПерерасчета ЕСТЬ NULL
		|			ИЛИ НЕ ОрганизацииКПерерасчету.Организация ЕСТЬ NULL)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета,
		|	ПредварительныеПерерасчеты.ТипИзменения,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные,
		|	ПредварительныеПерерасчеты.НачалоУчета,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета,
		|	ЕСТЬNULL(СотрудникиКПерерасчету.Организация, ОрганизацииКПерерасчету.Организация),
		|	ПредварительныеПерерасчеты.ДокументОснование";
	
	ПредварительныеПерерасчеты.Загрузить(Запрос.Выполнить().Выгрузить());
	ПредварительныеПерерасчеты.Записать();
	
КонецПроцедуры

Процедура ДобавитьПредварительныеПерерасчетыПоИзменениямКадровойИстории(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, РегистраторПерерасчета)
	
	КадроваяИсторияСотрудников = ИзмененияВНаборахИсточников[Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя]; 
	ГрафикРаботыСотрудников = ИзмененияВНаборахИсточников[Метаданные.РегистрыСведений.ГрафикРаботыСотрудников.Имя]; 
	Если КадроваяИсторияСотрудников <> Неопределено Тогда
		Для каждого СтрокаИзменения Из КадроваяИсторияСотрудников Цикл
			Если СтрокаИзменения.ИзменилсяРесурсКоличествоСтавок
				Или СтрокаИзменения.Добавление
				Или СтрокаИзменения.Удаление Тогда
				
				НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
				НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Период;
				НоваяСтрока.ВладелецПерерасчета = СтрокаИзменения.Сотрудник;
				НоваяСтрока.Организация = ?(ЗначениеЗаполнено(СтрокаИзменения.НовоеЗначениеОрганизация),
					СтрокаИзменения.НовоеЗначениеОрганизация,
					СтрокаИзменения.СтароеЗначениеОрганизация);
				НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
				НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.КадровыеДанные;
				НоваяСтрока.НачалоУчета = НачалоУчетаПоИзменениямКадровойИстории(СтрокаИзменения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ГрафикРаботыСотрудников <> Неопределено Тогда
		Для каждого СтрокаИзменения Из ГрафикРаботыСотрудников Цикл
			НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
			НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Период;
			НоваяСтрока.ВладелецПерерасчета = СтрокаИзменения.Сотрудник;
			НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
			НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.КадровыеДанные;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПредварительныеПерерасчетыПоИзменениямПлановыхНачислений(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, РегистраторПерерасчета)
	
	ИзменившиесяДанныеНабора = ИзмененияВНаборахИсточников[Метаданные.РегистрыСведений.ПлановыеНачисления.Имя]; 
	Если ИзменившиесяДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИзменения Из ИзменившиесяДанныеНабора Цикл
		НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
		НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Период;
		НоваяСтрока.ВладелецПерерасчета = СтрокаИзменения.Сотрудник;
		НоваяСтрока.ИзмененныеДанные = СтрокаИзменения.Начисление;
		НоваяСтрока.ДокументОснование = СтрокаИзменения.ДокументОснование;
		НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
		НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.ПлановыеНачисления;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПредварительныеПерерасчетыПоИзменениямПримененийПлановыхНачислений(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, РегистраторПерерасчета)
	
	ИзменившиесяДанныеНабора = ИзмененияВНаборахИсточников[Метаданные.РегистрыСведений.ПрименениеПлановыхНачислений.Имя]; 
	Если ИзменившиесяДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = ИзменившиесяДанныеНабора.ВыгрузитьКолонку("Сотрудник");
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, "Организация");
	СтруктураПоиска = Новый Структура("Сотрудник");
	Для каждого СтрокаИзменения Из ИзменившиесяДанныеНабора Цикл
		НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
		НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Период;
		НоваяСтрока.ВладелецПерерасчета = СтрокаИзменения.Сотрудник;
		СтруктураПоиска.Сотрудник = СтрокаИзменения.Сотрудник;
		КадровыеДанные = КадровыеДанныеСотрудников.НайтиСтроки(СтруктураПоиска);
		Если КадровыеДанные.Количество() > 0 Тогда
			НоваяСтрока.Организация = КадровыеДанные[0].Организация;	
		КонецЕсли;
		НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
		НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.ПрименениеПлановыхНачислений;
		НоваяСтрока.НачалоУчета = (СтрокаИзменения.Добавление И СтрокаИзменения.НовоеЗначениеПрименение = Истина)
			Или (СтрокаИзменения.Удаление И СтрокаИзменения.СтароеЗначениеПрименение = Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПредварительныеПерерасчетыПоИзменениямПоказателей(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, РегистраторПерерасчета)
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаИзменений.Колонки.Добавить("ВладелецПерерасчета", Новый ОписаниеТипов("СправочникСсылка.Сотрудники,СправочникСсылка.Организации,СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаИзменений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаИзменений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаИзменений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	
	ДополнитьТаблицуИзмененийПоИзменениямПоказателей(ТаблицаИзменений, ИзмененияВНаборахИсточников, "Сотрудников");
	ДополнитьТаблицуИзмененийПоИзменениямПоказателей(ТаблицаИзменений, ИзмененияВНаборахИсточников, "Подразделений");
	ДополнитьТаблицуИзмененийПоИзменениямПоказателей(ТаблицаИзменений, ИзмененияВНаборахИсточников, "Организаций");
	
	Для каждого СтрокаИзменения Из ТаблицаИзменений Цикл
		НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменения);
		НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Период;
		НоваяСтрока.ИзмененныеДанные = СтрокаИзменения.Показатель;
		НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
		НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.Показатель;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуИзмененийПоИзменениямПоказателей(ТаблицаИзменений, ИзмененияВНаборахИсточников, ТипПоказателей)
	
	ИзменившиесяПериодическиеПоказатели = ИзмененияВНаборахИсточников["ЗначенияПериодическихПоказателейРасчетаЗарплаты" + ТипПоказателей];
	ИзменившиесяРазовыеПоказатели = ИзмененияВНаборахИсточников["ЗначенияРазовыхПоказателейРасчетаЗарплаты" + ТипПоказателей];
	ИзменившиесяОперативныеПоказатели = ИзмененияВНаборахИсточников["ЗначенияОперативныхПоказателейРасчетаЗарплаты" + ТипПоказателей];
	
	Если ИзменившиесяПериодическиеПоказатели <> Неопределено Тогда
		Для каждого СтрокаИзменения Из ИзменившиесяПериодическиеПоказатели Цикл
			НоваяСтрока = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменения);
			НоваяСтрока.ВладелецПерерасчета = ВладелецПерерасчетаПоТипуПоказателя(СтрокаИзменения, ТипПоказателей);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменившиесяРазовыеПоказатели <> Неопределено Тогда
		Для каждого СтрокаИзменения Из ИзменившиесяРазовыеПоказатели Цикл
			НоваяСтрока = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменения);
			НоваяСтрока.Период = СтрокаИзменения.ПериодДействия;
			НоваяСтрока.ВладелецПерерасчета = ВладелецПерерасчетаПоТипуПоказателя(СтрокаИзменения, ТипПоказателей);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменившиесяОперативныеПоказатели <> Неопределено Тогда
		Для каждого СтрокаИзменения Из ИзменившиесяОперативныеПоказатели Цикл
			НоваяСтрока = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменения);
			НоваяСтрока.ВладелецПерерасчета = ВладелецПерерасчетаПоТипуПоказателя(СтрокаИзменения, ТипПоказателей);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ВладелецПерерасчетаПоТипуПоказателя(СтрокаИзменения, ТипПоказателей)
	
	Если ТипПоказателей = "Сотрудников" Тогда
		Возврат СтрокаИзменения.Сотрудник;	
	ИначеЕсли ТипПоказателей = "Подразделений" Тогда
		Возврат СтрокаИзменения.Подразделение;
	ИначеЕсли ТипПоказателей = "Организаций" Тогда
		Возврат СтрокаИзменения.Организация;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПредварительныеПерерасчетыПоИзменениямУчетаВремени(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, РегистраторПерерасчета)
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаИзменений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаИзменений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаИзменений.Колонки.Добавить("ВидДанных", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДанныхУчетаВремениСотрудников"));
	
	ДополнитьТаблицуИзмененийПоИзменениямУчетаВремени(ТаблицаИзменений, ИзмененияВНаборахИсточников);
	
	Для каждого СтрокаИзменения Из ТаблицаИзменений Цикл
		НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменения);
		НоваяСтрока.ВладелецПерерасчета = СтрокаИзменения.Сотрудник;
		НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Месяц;
		НоваяСтрока.ИзмененныеДанные = СтрокаИзменения.ВидДанных;
		НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
		НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.УчетВремени;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуИзмененийПоИзменениямУчетаВремени(ТаблицаИзменений, ИзмененияВНаборахИсточников)
	
	ВытесняемоеПлановоеВремяСотрудников = ИзмененияВНаборахИсточников[Метаданные.РегистрыНакопления.ВытесняемоеПлановоеВремяСотрудников.Имя];
	ДанныеИндивидуальныхГрафиковСотрудников = ИзмененияВНаборахИсточников[Метаданные.РегистрыНакопления.ДанныеИндивидуальныхГрафиковСотрудников.Имя]; 
	ДанныеОперативногоУчетаРабочегоВремениСотрудников = ИзмененияВНаборахИсточников[Метаданные.РегистрыНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Имя];
	ДанныеСводногоУчетаРабочегоВремениСотрудников = ИзмененияВНаборахИсточников[Метаданные.РегистрыНакопления.ДанныеСводногоУчетаРабочегоВремениСотрудников.Имя]; 
	ДанныеТабельногоУчетаРабочегоВремениСотрудников = ИзмененияВНаборахИсточников[Метаданные.РегистрыНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.Имя]; 
	
	ДобавитьИзменениеУчетаВремениВТаблицуИзменений(ТаблицаИзменений, ВытесняемоеПлановоеВремяСотрудников, Перечисления.ВидыДанныхУчетаВремениСотрудников.ВытесняемоеПлановоеВремя);
	ДобавитьИзменениеУчетаВремениВТаблицуИзменений(ТаблицаИзменений, ДанныеИндивидуальныхГрафиковСотрудников, Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков);
	ДобавитьИзменениеУчетаВремениВТаблицуИзменений(ТаблицаИзменений, ДанныеСводногоУчетаРабочегоВремениСотрудников, Перечисления.ВидыДанныхУчетаВремениСотрудников.СводныеДанные);
	ДобавитьИзменениеУчетаВремениВТаблицуИзменений(ТаблицаИзменений, ДанныеТабельногоУчетаРабочегоВремениСотрудников, Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета);
	ДобавитьИзменениеУчетаВремениВТаблицуИзменений(ТаблицаИзменений, ДанныеОперативногоУчетаРабочегоВремениСотрудников, Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета);
	
КонецПроцедуры

Процедура ДобавитьИзменениеУчетаВремениВТаблицуИзменений(ТаблицаИзменений, ИзмененияВНаборе, ВидДанныхУчетаВремени)
	
	Если ИзмененияВНаборе = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИзменений Из ИзмененияВНаборе Цикл 
		НоваяСтрока = ТаблицаИзменений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменений);
		Если Не ЗначениеЗаполнено(НоваяСтрока.ВидДанных) Тогда
			НоваяСтрока.ВидДанных = ВидДанныхУчетаВремени;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры	

Процедура ДобавитьПредварительныеПерерасчетыПоИзменениямУсловийИсполнительныхЛистов(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, РегистраторПерерасчета)

	ИзменившиесяДанныеНабора = ИзмененияВНаборахИсточников[Метаданные.РегистрыСведений.УсловияУдержанияПоИсполнительномуДокументу.Имя]; 
	Если ИзменившиесяДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИзменения Из ИзменившиесяДанныеНабора Цикл
		НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
		НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Период;
		НоваяСтрока.ВладелецПерерасчета = СтрокаИзменения.НовоеЗначениеФизическоеЛицо;
		НоваяСтрока.Организация = СтрокаИзменения.НовоеЗначениеОрганизация;
		НоваяСтрока.ИзмененныеДанные = СтрокаИзменения.ИсполнительныйДокумент;
		НоваяСтрока.ДокументОснование = СтрокаИзменения.ИсполнительныйДокумент;
		НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
		НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.УсловияИсполнительногоЛиста;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПредварительныеПерерасчетыПоИзменениямПлановыхУдержаний(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, РегистраторПерерасчета)

	ИзменившиесяДанныеНабора = ИзмененияВНаборахИсточников[Метаданные.РегистрыСведений.ПлановыеУдержания.Имя]; 
	Если ИзменившиесяДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИзменения Из ИзменившиесяДанныеНабора Цикл
		НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
		НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Период;
		НоваяСтрока.ВладелецПерерасчета = СтрокаИзменения.ФизическоеЛицо;
		НоваяСтрока.Организация = СтрокаИзменения.Организация;
		НоваяСтрока.ИзмененныеДанные = СтрокаИзменения.Удержание;
		НоваяСтрока.ДокументОснование = СтрокаИзменения.ДокументОснование;
		НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
		НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.ПлановыеУдержания;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПредварительныеПерерасчетыПоИзменениямУсловийОплатыОтпускаПоУходу(ПредварительныеПерерасчеты, ИзмененияВНаборахИсточников, РегистраторПерерасчета)

	ИзменившиесяДанныеНабора = ИзмененияВНаборахИсточников[Метаданные.РегистрыСведений.УсловияОплатыОтпускаПоУходуЗаРебенком.Имя]; 
	Если ИзменившиесяДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаИзменения Из ИзменившиесяДанныеНабора Цикл
		НоваяСтрока = ПредварительныеПерерасчеты.Добавить();
		НоваяСтрока.ПериодПерерасчета = СтрокаИзменения.Период;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменения);
		НоваяСтрока.ВладелецПерерасчета = СтрокаИзменения.Сотрудник;
		НоваяСтрока.РегистраторПерерасчета = РегистраторПерерасчета;
		НоваяСтрока.ТипИзменения = Перечисления.ТипИзмененийПерерасчетов.УсловияОплатыОтпускаПоУходу;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиОрганизацииКПерерасчету(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПредварительныеПерерасчеты.ПериодПерерасчета, МЕСЯЦ)) КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТРегистрСведений_ПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета ССЫЛКА Справочник.Сотрудники
		|	И НЕ ПредварительныеПерерасчеты.НачалоУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПредварительныеПерерасчеты.ПериодПерерасчета, МЕСЯЦ)) КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация
		|ПОМЕСТИТЬ ВТОрганизацииПериоды
		|ИЗ
		|	ВТРегистрСведений_ПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	(ПредварительныеПерерасчеты.ВладелецПерерасчета ССЫЛКА Справочник.ПодразделенияОрганизаций
		|			ИЛИ ПредварительныеПерерасчеты.ВладелецПерерасчета ССЫЛКА Справочник.Организации
		|			ИЛИ ПредварительныеПерерасчеты.НачалоУчета)
		|	И ПредварительныеПерерасчеты.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредварительныеПерерасчеты.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПредварительныеПерерасчеты.ПериодПерерасчета, МЕСЯЦ)) КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТРегистрСведений_ПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета ССЫЛКА Справочник.ФизическиеЛица
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник КАК ВладелецПерерасчета,
		|	ИсходныеДанныеПерерасчетов.Организация КАК Организация
		|ПОМЕСТИТЬ ВТСотрудникиКПерерасчету
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО (ИсходныеДанныеПерерасчетов.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ИсходныеДанныеПерерасчетов.ПериодДействия >= СотрудникиПериоды.ПериодДействия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТФизическиеЛицаПериоды.ФизическоеЛицо,
		|	ИсходныеДанныеПерерасчетов.Организация
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ВТФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО (ИсходныеДанныеПерерасчетов.ПериодДействия >= ВТФизическиеЛицаПериоды.ПериодДействия)
		|			И ВТФизическиеЛицаПериоды.ФизическоеЛицо = ИсходныеДанныеПерерасчетов.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТФизическиеЛицаПериоды.ФизическоеЛицо,
		|	Удержания.Организация
		|ИЗ
		|	ВТФизическиеЛицаПериоды КАК ВТФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Удержания КАК Удержания
		|		ПО (Удержания.ПериодРегистрации >= ВТФизическиеЛицаПериоды.ПериодДействия)
		|			И ВТФизическиеЛицаПериоды.ФизическоеЛицо = Удержания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрганизацииПериоды.Организация КАК Организация
		|ПОМЕСТИТЬ ВТОрганизацииКПерерасчету
		|ИЗ
		|	ВТОрганизацииПериоды КАК ОрганизацииПериоды
		|ГДЕ
		|	1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|			ГДЕ
		|				ИсходныеДанныеПерерасчетов.Организация = ОрганизацииПериоды.Организация
		|				И ИсходныеДанныеПерерасчетов.ПериодДействия >= ОрганизацииПериоды.ПериодДействия)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПредварительныеПерерасчетыВременные(МенеджерВременныхТаблиц, Регистратор = Неопределено, Организация = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.ПериодПерерасчета КАК Период,
		|	НАЧАЛОПЕРИОДА(ПредварительныеПерерасчеты.ПериодПерерасчета, МЕСЯЦ) КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета КАК ВладелецПерерасчета,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ПредварительныеПерерасчеты.ТипИзменения КАК ТипИзменения,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование,
		|	ПредварительныеПерерасчеты.НачалоУчета КАК НачалоУчета
		|ПОМЕСТИТЬ ВТПредварительныеПерерасчетыВременные
		|ИЗ
		|	РегистрСведений.ПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета = &Регистратор
		|	И ПредварительныеПерерасчеты.Организация = &Организация";
	
	Если Регистратор <> Неопределено Тогда
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПредварительныеПерерасчеты.РегистраторПерерасчета = &Регистратор", "ИСТИНА");
	КонецЕсли;
	
	Если Организация <> Неопределено Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПредварительныеПерерасчеты.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПредварительныеПерерасчеты(МенеджерВременныхТаблиц, Регистратор, Организация)
	
	СоздатьВТПредварительныеПерерасчетыВременные(МенеджерВременныхТаблиц, Регистратор, Организация);
	СоздатьВТСотрудникиПоПоказателямОрганизации(МенеджерВременныхТаблиц);
	СоздатьВТСотрудникиПоПоказателямПодразделений(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.Период КАК Период,
		|	ПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипИзмененийПерерасчетов.Показатель)
		|				И ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации)
		|			ТОГДА СотрудникиПоПоказателямОрганизации.Сотрудник
		|		КОГДА ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипИзмененийПерерасчетов.Показатель)
		|				И ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения)
		|			ТОГДА СотрудникиПоПоказателямПодразделений.Сотрудник
		|		ИНАЧЕ ПредварительныеПерерасчеты.ВладелецПерерасчета
		|	КОНЕЦ КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипИзмененийПерерасчетов.Показатель)
		|				И ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации)
		|			ТОГДА СотрудникиПоПоказателямОрганизации.ФизическоеЛицо
		|		КОГДА ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипИзмененийПерерасчетов.Показатель)
		|				И ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения)
		|			ТОГДА СотрудникиПоПоказателямПодразделений.ФизическоеЛицо
		|		КОГДА ПредварительныеПерерасчеты.ВладелецПерерасчета ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ПредварительныеПерерасчеты.ВладелецПерерасчета
		|		ИНАЧЕ ВЫРАЗИТЬ(ПредварительныеПерерасчеты.ВладелецПерерасчета КАК Справочник.Сотрудники).ФизическоеЛицо
		|	КОНЕЦ КАК ФизическоеЛицо,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ПредварительныеПерерасчеты.ТипИзменения КАК ТипИзменения,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование,
		|	ПредварительныеПерерасчеты.НачалоУчета КАК НачалоУчета
		|ПОМЕСТИТЬ ВТПредварительныеПерерасчеты
		|ИЗ
		|	ВТПредварительныеПерерасчетыВременные КАК ПредварительныеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПоПоказателямОрганизации КАК СотрудникиПоПоказателямОрганизации
		|		ПО ПредварительныеПерерасчеты.Организация = СотрудникиПоПоказателямОрганизации.Организация
		|			И ПредварительныеПерерасчеты.Период = СотрудникиПоПоказателямОрганизации.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПоПоказателямПодразделений КАК СотрудникиПоПоказателямПодразделений
		|		ПО ПредварительныеПерерасчеты.Организация = СотрудникиПоПоказателямПодразделений.Организация
		|			И ПредварительныеПерерасчеты.ВладелецПерерасчета = СотрудникиПоПоказателямПодразделений.Подразделение
		|			И ПредварительныеПерерасчеты.Период = СотрудникиПоПоказателямПодразделений.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|		ПО (ПоказателиРасчетаЗарплаты.Ссылка = ПредварительныеПерерасчеты.ИзмененныеДанные)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиПоПоказателямОрганизации(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредварительныеПерерасчеты.Период КАК Период,
		|	ПредварительныеПерерасчеты.Организация КАК Организация
		|ПОМЕСТИТЬ ВТОрганизацииПериоды
		|ИЗ
		|	ВТПредварительныеПерерасчетыВременные КАК ПредварительныеПерерасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|		ПО (ПоказателиРасчетаЗарплаты.Ссылка = ПредварительныеПерерасчеты.ИзмененныеДанные)
		|			И (ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации))
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипИзмененийПерерасчетов.Показатель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОрганизацииПериоды.Организация КАК Организация
		|ИЗ
		|	ВТОрганизацииПериоды КАК ОрганизацииПериоды";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	НЕОПРЕДЕЛЕНО КАК Период,
			|	НЕОПРЕДЕЛЕНО КАК Организация,
			|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
			|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиПоПоказателямОрганизации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТОрганизацииПериоды";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОрганизацииПериоды");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Организация", "В", Организации);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников", 
		МенеджерВременныхТаблиц, 
		Истина, 
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОрганизацииПериоды.Период КАК Период,
		|	ОрганизацииПериоды.Организация КАК Организация,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоПоказателямОрганизации
		|ИЗ
		|	ВТОрганизацииПериоды КАК ОрганизацииПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудников
		|		ПО ОрганизацииПериоды.Организация = КадроваяИсторияСотрудников.Организация
		|			И ОрганизацииПериоды.Период = КадроваяИсторияСотрудников.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадроваяИсторияСотрудниковСрезПоследних";

	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиПоПоказателямПодразделений(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредварительныеПерерасчеты.Период КАК Период,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.ВладелецПерерасчета КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделенияПериоды
		|ИЗ
		|	ВТПредварительныеПерерасчетыВременные КАК ПредварительныеПерерасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|		ПО (ПоказателиРасчетаЗарплаты.Ссылка = ПредварительныеПерерасчеты.ИзмененныеДанные)
		|			И (ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения))
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипИзмененийПерерасчетов.Показатель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодразделенияПериоды.Подразделение КАК Подразделение
		|ИЗ
		|	ВТПодразделенияПериоды КАК ПодразделенияПериоды";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	НЕОПРЕДЕЛЕНО КАК Период,
			|	НЕОПРЕДЕЛЕНО КАК Организация,
			|	НЕОПРЕДЕЛЕНО КАК Подразделение,
			|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
			|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиПоПоказателямПодразделений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПодразделенияПериоды";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	Подразделения = Результат.Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПодразделенияПериоды");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "Подразделение", "В", Подразделения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников", 
		МенеджерВременныхТаблиц, 
		Истина, 
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияПериоды.Период КАК Период,
		|	ПодразделенияПериоды.Организация КАК Организация,
		|	ПодразделенияПериоды.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоПоказателямПодразделений
		|ИЗ
		|	ВТПодразделенияПериоды КАК ПодразделенияПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудников
		|		ПО ПодразделенияПериоды.Организация = КадроваяИсторияСотрудников.Организация
		|			И ПодразделенияПериоды.Подразделение = КадроваяИсторияСотрудников.Подразделение
		|			И ПодразделенияПериоды.Период = КадроваяИсторияСотрудников.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадроваяИсторияСотрудниковСрезПоследних";

	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиПериодыНачислений(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыИзмененийТребующихПроверки", ТипыИзмененийТребующихПроверки());
	ЧастиЗапроса = Новый Массив;
	Разделитель = "
		|ОБЪЕДИНИТЬ
		|";
	
	ТекстЗапросаПерерасчетовБезПроверки = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.Период КАК Период,
		|	ПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.Сотрудник КАК Сотрудник,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ПредварительныеПерерасчеты.НачалоУчета КАК НачалоУчета
		|ПОМЕСТИТЬ ВТСотрудникиПериодыНачислений
		|ИЗ
		|	ВТПредварительныеПерерасчетыНачислений КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	НЕ ПредварительныеПерерасчеты.ТипИзменения В (&ТипыИзмененийТребующихПроверки)";
	ЧастиЗапроса.Добавить(ТекстЗапросаПерерасчетовБезПроверки);
	РасчетЗарплатыРасширенный.ДобавитьЧастьЗапросаПроверкиПерерасчетовНачисленийПоПоказателям(МенеджерВременныхТаблиц, ЧастиЗапроса);
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Разделитель);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТПредварительныеПерерасчетыНачислений");
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиПериодыУдержаний(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыИзмененийТребующихПроверки", ТипыИзмененийТребующихПроверки());
	УдалитьВТ = Новый Массив;
	ЧастиЗапроса = Новый Массив;
	Разделитель = "
		|ОБЪЕДИНИТЬ
		|";
	
	ТекстЗапросаПерерасчетовБезПроверки = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные КАК Удержание,
		|	ПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТСотрудникиПериодыУдержаний
		|ИЗ
		|	ВТПредварительныеПерерасчетыУдержаний КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	НЕ ПредварительныеПерерасчеты.ТипИзменения В (&ТипыИзмененийТребующихПроверки)";
	ЧастиЗапроса.Добавить(ТекстЗапросаПерерасчетовБезПроверки);
	РасчетЗарплатыРасширенный.ДобавитьЧастьЗапросаПроверкиПерерасчетовУдержанийПоПоказателям(
		МенеджерВременныхТаблиц, ЧастиЗапроса, УдалитьВТ);
	РасчетЗарплатыРасширенный.ДобавитьЧастьЗапросаПроверкиПерерасчетовУдержанийПоИсполнительнымДокументам(
		МенеджерВременныхТаблиц, ЧастиЗапроса, УдалитьВТ);
		
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Разделитель);
	УдалитьВТ.Добавить("ВТПредварительныеПерерасчетыУдержаний");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, УдалитьВТ);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТипыИзмененийТребующихПроверки()
	
	ТипыИзменений = Новый Массив;
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.Показатель);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.УсловияИсполнительногоЛиста);
	Возврат ТипыИзменений;
	
КонецФункции

Процедура СоздатьВТНеобходимыеПерерасчетыНачисленийПриНачалеУчета(МенеджерВременныхТаблиц)
	
	ТаблицаПоследнихПериодов = Новый ТаблицаЗначений;
	ТаблицаПоследнихПериодов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоследнихПериодов.Колонки.Добавить("ПоследнийПериодДействия", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Организация
		|ИЗ
		|	ВТСотрудникиПериодыНачислений КАК СотрудникиПериоды
		|ГДЕ
		|	СотрудникиПериоды.НачалоУчета";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИсходныеДанныеПерерасчетов.Организация КАК Организация,
			|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПоследнийПериодДействия
			|ИЗ
			|	РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
			|ГДЕ
			|	ИсходныеДанныеПерерасчетов.Организация = &Организация
			|	И ИсходныеДанныеПерерасчетов.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПоследнийПериодДействия УБЫВ";
			
		ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоОрганизации.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПоследнихПериодов.Добавить(), ВыборкаПоОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаПоследнихПериодов", ТаблицаПоследнихПериодов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПоследнихПериодов.Организация КАК Организация,
		|	ТаблицаПоследнихПериодов.ПоследнийПериодДействия КАК ПоследнийПериодДействия
		|ПОМЕСТИТЬ ВТПоследниеПериодыНачислений
		|ИЗ
		|	&ТаблицаПоследнихПериодов КАК ТаблицаПоследнихПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиПериоды.ПериодДействия КАК ПериодДействия,
		|	СотрудникиПериоды.РегистраторПерерасчета КАК РегистраторПерерасчета
		|ПОМЕСТИТЬ ВТСотрудникиСПоследнимиПериодами
		|ИЗ
		|	ВТСотрудникиПериодыНачислений КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеПериодыНачислений КАК ПоследниеПериодыНачислений
		|		ПО СотрудникиПериоды.Организация = ПоследниеПериодыНачислений.Организация
		|ГДЕ
		|	СотрудникиПериоды.НачалоУчета
		|	И СотрудникиПериоды.ПериодДействия <= ПоследниеПериодыНачислений.ПоследнийПериодДействия
		|	И РАЗНОСТЬДАТ(СотрудникиПериоды.ПериодДействия, ПоследниеПериодыНачислений.ПоследнийПериодДействия, МЕСЯЦ) < 12
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПериодДействия,
		|	СотрудникиПериоды.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	МАКСИМУМ(ИсходныеДанныеПерерасчетов.Регистратор) КАК ДокументНачисления
		|ПОМЕСТИТЬ ВТНеобходимыеПерерасчетыНачалаУчета
		|ИЗ
		|	ВТСотрудникиСПоследнимиПериодами КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО СотрудникиПериоды.Организация = ИсходныеДанныеПерерасчетов.Организация
		|			И СотрудникиПериоды.ПериодДействия <= ИсходныеДанныеПерерасчетов.ПериодДействия
		|			И (ИсходныеДанныеПерерасчетов.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
		|			И (ИсходныеДанныеПерерасчетов.Начисление В
		|				(ВЫБРАТЬ
		|					ОтобранныеНачисления.Начисление
		|				ИЗ
		|					ВТОтобранныеНачисления КАК ОтобранныеНачисления))
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ФизическоеЛицо,
		|	СотрудникиПериоды.РегистраторПерерасчета,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПоследниеПериодыНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиСПоследнимиПериодами";
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура СоздатьВТНеобходимыеПерерасчетыНачислений(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УдалитьВТ = Новый Массив;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПериодДействия,
		|	СотрудникиПериоды.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ИсходныеДанныеПерерасчетов.Регистратор КАК ДокументНачисления
		|ПОМЕСТИТЬ ВТНеобходимыеПерерасчеты
		|ИЗ
		|	ВТСотрудникиПериодыНачислений КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО СотрудникиПериоды.Организация = ИсходныеДанныеПерерасчетов.Организация
		|			И СотрудникиПериоды.Сотрудник = ИсходныеДанныеПерерасчетов.Сотрудник
		|			И СотрудникиПериоды.ПериодДействия <= ИсходныеДанныеПерерасчетов.ПериодДействия
		|			И СотрудникиПериоды.Период <= ИсходныеДанныеПерерасчетов.ДатаОкончания
		|			И (НЕ ИсходныеДанныеПерерасчетов.Регистратор ССЫЛКА Документ.ПереносДанных)
		|			И (ИсходныеДанныеПерерасчетов.Начисление В
		|				(ВЫБРАТЬ
		|					ОтобранныеНачисления.Начисление
		|				ИЗ
		|					ВТОтобранныеНачисления КАК ОтобранныеНачисления))
		|			И (&ИсключаемыйРегистратор)
		|ГДЕ
		|	НЕ СотрудникиПериоды.НачалоУчета
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.ИсходныеДанныеПерерасчетов КАК НачислениеЗарплатыПоОрганизации
		|			ГДЕ
		|				ИсходныеДанныеПерерасчетов.Организация = НачислениеЗарплатыПоОрганизации.Организация
		|				И ИсходныеДанныеПерерасчетов.ПериодДействия <= НачислениеЗарплатыПоОрганизации.ПериодДействия
		|				И НачислениеЗарплатыПоОрганизации.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьВТНеобходимыеПерерасчетыНачислений(Запрос.Текст);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаемыйРегистратор) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыйРегистратор", "ИсходныеДанныеПерерасчетов.Регистратор <> &ИсключаемыйРегистратор");
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыйРегистратор", "ИСТИНА");
	КонецЕсли;
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТНеобходимыеПерерасчетыНачалаУчета") Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НеобходимыеПерерасчетыНачалаУчета.Организация,
		|	НеобходимыеПерерасчетыНачалаУчета.Сотрудник,
		|	НеобходимыеПерерасчетыНачалаУчета.ФизическоеЛицо,
		|	НеобходимыеПерерасчетыНачалаУчета.ПериодДействия,
		|	НеобходимыеПерерасчетыНачалаУчета.РегистраторПерерасчета,
		|	НеобходимыеПерерасчетыНачалаУчета.ДокументНачисления
		|ИЗ
		|	ВТНеобходимыеПерерасчетыНачалаУчета КАК НеобходимыеПерерасчетыНачалаУчета";
		УдалитьВТ.Добавить("ВТНеобходимыеПерерасчетыНачалаУчета");
	КонецЕсли;
	
	УдалитьВТ.Добавить("ВТСотрудникиПериодыНачислений");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, УдалитьВТ);
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура ЗарегистрироватьПерерасчетыНачислений(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	СоздатьВТСотрудникиПериодыНачислений(МенеджерВременныхТаблиц);
	СоздатьВТНеобходимыеПерерасчетыНачисленийПриНачалеУчета(МенеджерВременныхТаблиц);
	СоздатьВТНеобходимыеПерерасчетыНачислений(МенеджерВременныхТаблиц, ИсключаемыйРегистратор);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НеобходимыеПерерасчеты.Организация КАК Организация,
		|	НеобходимыеПерерасчеты.Сотрудник КАК Сотрудник,
		|	НеобходимыеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НеобходимыеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	НеобходимыеПерерасчеты.РегистраторПерерасчета КАК Основание,
		|	НеобходимыеПерерасчеты.ДокументНачисления КАК ДокументНачисления,
		|	ВЫБОР
		|		КОГДА ПерерасчетЗарплаты.Организация ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СуществующаяЗапись
		|ИЗ
		|	ВТНеобходимыеПерерасчеты КАК НеобходимыеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|		ПО НеобходимыеПерерасчеты.Организация = ПерерасчетЗарплаты.Организация
		|			И НеобходимыеПерерасчеты.Сотрудник = ПерерасчетЗарплаты.Сотрудник
		|			И НеобходимыеПерерасчеты.ПериодДействия = ПерерасчетЗарплаты.ПериодДействия
		|			И НеобходимыеПерерасчеты.РегистраторПерерасчета = ПерерасчетЗарплаты.Основание
		|			И НеобходимыеПерерасчеты.ДокументНачисления = ПерерасчетЗарплаты.ДокументНачисления
		|ГДЕ
		|	НеобходимыеПерерасчеты.РегистраторПерерасчета <> НеобходимыеПерерасчеты.ДокументНачисления";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДобавитьУсловияПерерасчетов(Запрос.Текст, "НеобходимыеПерерасчеты.ДокументНачисления");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ДокументыНачисления = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.СуществующаяЗапись Тогда
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
				НаборЗаписей.Отбор.Основание.Установить(Выборка.Основание);
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ЗарегистрироватьПерерасчетыНачислений(Запрос);
	КонецЕсли;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТНеобходимыеПерерасчеты");
	
КонецПроцедуры

Процедура ЗарегистрироватьПерерасчетыУдержаний(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено)
	
	СоздатьВТСотрудникиПериодыУдержаний(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Удержания.ПериодРегистрации КАК ПериодДействия,
		|	СотрудникиПериоды.Удержание КАК Удержание,
		|	СотрудникиПериоды.ДокументОснование КАК ДокументОснование,
		|	СотрудникиПериоды.РегистраторПерерасчета КАК Основание,
		|	Удержания.Регистратор КАК ДокументНачисления
		|ПОМЕСТИТЬ ВТНеобходимыеПерерасчеты
		|ИЗ
		|	ВТСотрудникиПериодыУдержаний КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Удержания КАК Удержания
		|		ПО СотрудникиПериоды.Организация = Удержания.Организация
		|			И СотрудникиПериоды.ФизическоеЛицо = Удержания.ФизическоеЛицо
		|			И СотрудникиПериоды.ПериодДействия <= Удержания.ПериодРегистрации
		|			И (НЕ Удержания.Регистратор ССЫЛКА Документ.ПереносДанных)
		|ГДЕ
		|	Удержания.Регистратор <> &ИсключаемыйРегистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.ФизическоеЛицо,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия,
		|	СотрудникиПериоды.Удержание,
		|	СотрудникиПериоды.ДокументОснование,
		|	СотрудникиПериоды.РегистраторПерерасчета,
		|	ИсходныеДанныеПерерасчетов.Регистратор
		|ИЗ
		|	ВТСотрудникиПериодыУдержаний КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО СотрудникиПериоды.Организация = ИсходныеДанныеПерерасчетов.Организация
		|			И СотрудникиПериоды.ФизическоеЛицо = ИсходныеДанныеПерерасчетов.ФизическоеЛицо
		|			И СотрудникиПериоды.ПериодДействия <= ИсходныеДанныеПерерасчетов.ПериодДействия
		|			И (НЕ ИсходныеДанныеПерерасчетов.Регистратор ССЫЛКА Документ.ПереносДанных)
		|			И (ИсходныеДанныеПерерасчетов.Начисление В
		|				(ВЫБРАТЬ
		|					ОтобранныеНачисления.Начисление
		|				ИЗ
		|					ВТОтобранныеНачисления КАК ОтобранныеНачисления))
		|ГДЕ
		|	ИсходныеДанныеПерерасчетов.Регистратор <> &ИсключаемыйРегистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПериодыУдержаний";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НеобходимыеПерерасчеты.Организация,
		|	НеобходимыеПерерасчеты.ФизическоеЛицо,
		|	НеобходимыеПерерасчеты.ПериодДействия,
		|	НеобходимыеПерерасчеты.Удержание,
		|	НеобходимыеПерерасчеты.ДокументОснование,
		|	НеобходимыеПерерасчеты.Основание,
		|	НеобходимыеПерерасчеты.ДокументНачисления,
		|	ВЫБОР
		|		КОГДА ПерерасчетЗарплаты.Организация ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СуществующаяЗапись
		|ИЗ
		|	ВТНеобходимыеПерерасчеты КАК НеобходимыеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерерасчетУдержаний КАК ПерерасчетЗарплаты
		|		ПО НеобходимыеПерерасчеты.Организация = ПерерасчетЗарплаты.Организация
		|			И НеобходимыеПерерасчеты.ФизическоеЛицо = ПерерасчетЗарплаты.ФизическоеЛицо
		|			И НеобходимыеПерерасчеты.ПериодДействия = ПерерасчетЗарплаты.ПериодДействия
		|			И НеобходимыеПерерасчеты.Удержание = ПерерасчетЗарплаты.Удержание
		|			И НеобходимыеПерерасчеты.ДокументОснование = ПерерасчетЗарплаты.ДокументОснование
		|			И НеобходимыеПерерасчеты.Основание = ПерерасчетЗарплаты.Основание
		|			И НеобходимыеПерерасчеты.ДокументНачисления = ПерерасчетЗарплаты.ДокументНачисления
		|ГДЕ
		|	НеобходимыеПерерасчеты.ДокументОснование <> НеобходимыеПерерасчеты.ДокументНачисления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.СуществующаяЗапись Тогда
				НаборЗаписей = РегистрыСведений.ПерерасчетУдержаний.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
				НаборЗаписей.Отбор.Удержание.Установить(Выборка.Удержание);
				НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
				НаборЗаписей.Отбор.Основание.Установить(Выборка.Основание);
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТНеобходимыеПерерасчеты");
	
КонецПроцедуры

Процедура ЗаполнитьСторнированиеНачислений(МенеджерВременныхТаблиц, Организация, ДанныеПерерасчета, КатегорииНачисленийПособий, РаспределенияТерриторииПоказатели, МесяцНачисления)
	
	Если ДанныеПерерасчета.НачисленияПерерасчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорииНачисленийПособий", КатегорииНачисленийПособий);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанныеПерерасчетов.Регистратор КАК Ссылка,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПериодДействия,
		|	ИсходныеДанныеПерерасчетов.Сотрудник КАК Сотрудник,
		|	ИсходныеДанныеПерерасчетов.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанныеПерерасчетов.ДатаОкончания КАК ДатаОкончания,
		|	ИсходныеДанныеПерерасчетов.Начисление КАК Начисление,
		|	ИсходныеДанныеПерерасчетов.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория,
		|	ИсходныеДанныеПерерасчетов.Результат КАК Результат,
		|	ИсходныеДанныеПерерасчетов.ОтработаноДней КАК ОтработаноДней,
		|	ИсходныеДанныеПерерасчетов.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ИсходныеДанныеПерерасчетов.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
		|	ИсходныеДанныеПерерасчетов.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
		|	ИсходныеДанныеПерерасчетов.Подразделение КАК Подразделение,
		|	ИсходныеДанныеПерерасчетов.ДокументОснование КАК ДокументОснование,
		|	ИсходныеДанныеПерерасчетов.НормаДней КАК НормаДней,
		|	ИсходныеДанныеПерерасчетов.НормаЧасов КАК НормаЧасов,
		|	ИсходныеДанныеПерерасчетов.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ИсходныеДанныеПерерасчетов.КодВычета КАК КодВычета,
		|	ИсходныеДанныеПерерасчетов.СуммаВычета КАК СуммаВычета,
		|	ИсходныеДанныеПерерасчетов.СкидкаПоВзносам КАК СкидкаПоВзносам,
		|	ИсходныеДанныеПерерасчетов.ИдентификаторСтроки КАК ИдентификаторСтрокиВидаРасчета,
		|	ИсходныеДанныеПерерасчетов.ГрафикРаботы КАК ГрафикРаботы,
		|	ИсходныеДанныеПерерасчетов.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	ИсходныеДанныеПерерасчетов.ОбщийГрафик КАК ОбщийГрафик,
		|	ИсходныеДанныеПерерасчетов.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	ИсходныеДанныеПерерасчетов.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремени,
		|	ИсходныеДанныеПерерасчетов.ВремяВЧасах КАК ВремяВЧасах,
		|	ИсходныеДанныеПерерасчетов.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ИсходныеДанныеПерерасчетов.ОплаченоДней КАК ОплаченоДней,
		|	ИсходныеДанныеПерерасчетов.ОплаченоЧасов КАК ОплаченоЧасов,
		|	ИсходныеДанныеПерерасчетов.РанееНачислено КАК РанееНачислено,
		|	ИсходныеДанныеПерерасчетов.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента
		|ИЗ
		|	РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО ИсходныеДанныеПерерасчетов.Регистратор = СторнируемыеРегистраторы.Регистратор
		|			И ИсходныеДанныеПерерасчетов.ИдентификаторСтроки = СторнируемыеРегистраторы.ИдентификаторСтрокиВидаРасчета
		|			И ИсходныеДанныеПерерасчетов.ПериодДействия = СторнируемыеРегистраторы.ПериодДействия
		|			И ИсходныеДанныеПерерасчетов.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И ИсходныеДанныеПерерасчетов.Организация = СторнируемыеРегистраторы.Организация
		|			И (НЕ ИсходныеДанныеПерерасчетов.РассчитыватьПоРазовымНачислениямДокумента)
		|ГДЕ
		|	НЕ ИсходныеДанныеПерерасчетов.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачисленияПерерасчет = ДанныеПерерасчета.НачисленияПерерасчет;
	ТаблицаРаспределенияНачислений = РаспределенияТерриторииПоказатели.ТаблицаРаспределенияНачислений;
	ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда = РаспределенияТерриторииПоказатели.ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда;
	ТаблицаПоказателей = РаспределенияТерриторииПоказатели.ТаблицаПоказателей;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПериодДействия = Выборка.ПериодДействия;
		
		НоваяСтрокаСторноНачисленийПерерасчет = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(НачисленияПерерасчет);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСторноНачисленийПерерасчет, Выборка);
		
		НоваяСтрокаСторноНачисленийПерерасчет.Организация = Организация;
		НоваяСтрокаСторноНачисленийПерерасчет.Результат = - НоваяСтрокаСторноНачисленийПерерасчет.Результат;
		НоваяСтрокаСторноНачисленийПерерасчет.РанееНачислено = - НоваяСтрокаСторноНачисленийПерерасчет.РанееНачислено;
		НоваяСтрокаСторноНачисленийПерерасчет.ОтработаноДней = - НоваяСтрокаСторноНачисленийПерерасчет.ОтработаноДней;
		НоваяСтрокаСторноНачисленийПерерасчет.ОтработаноЧасов = - НоваяСтрокаСторноНачисленийПерерасчет.ОтработаноЧасов;
		НоваяСтрокаСторноНачисленийПерерасчет.ОплаченоДней = - НоваяСтрокаСторноНачисленийПерерасчет.ОплаченоДней;
		НоваяСтрокаСторноНачисленийПерерасчет.ОплаченоЧасов = - НоваяСтрокаСторноНачисленийПерерасчет.ОплаченоЧасов;
		
		НоваяСтрокаСторноНачисленийПерерасчет.Сторно = Истина;
		НоваяСтрокаСторноНачисленийПерерасчет.ФиксСторно = Истина;
		НоваяСтрокаСторноНачисленийПерерасчет.СторнируемыйДокумент = Выборка.Ссылка;
		
		ЗаполнитьРезультатРаспределения(НоваяСтрокаСторноНачисленийПерерасчет, ТаблицаРаспределенияНачислений, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
		ЗаполнитьРезультатРаспределенияПоТерриториям(НоваяСтрокаСторноНачисленийПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
		ЗаполнитьПоказатели(НоваяСтрокаСторноНачисленийПерерасчет, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьМестаПолученияДохода(НачисленияПерерасчет, Организация, МесяцНачисления);
	
КонецПроцедуры

Процедура ЗаполнитьСторнированиеПособий(МенеджерВременныхТаблиц, Организация, ДанныеПерерасчета, КатегорииНачисленийПособий, РаспределенияТерриторииПоказатели, МесяцНачисления)
	
	Если ДанныеПерерасчета.ПособияПерерасчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КатегорииИсключения = Новый Массив;
	Если УчетПособийСоциальногоСтрахованияРасширенный.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(МесяцНачисления, Организация) Тогда
		КатегорииИсключения = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииПрямыхВыплатФСС();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорииНачисленийПособий", КатегорииНачисленийПособий);
	Запрос.УстановитьПараметр("КатегорииИсключения", КатегорииИсключения);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанныеПерерасчетов.Регистратор КАК Ссылка,
		|	ИсходныеДанныеПерерасчетов.ПериодДействия КАК ПериодДействия,
		|	ИсходныеДанныеПерерасчетов.Сотрудник КАК Сотрудник,
		|	ИсходныеДанныеПерерасчетов.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанныеПерерасчетов.ДатаОкончания КАК ДатаОкончания,
		|	ИсходныеДанныеПерерасчетов.Начисление КАК Начисление,
		|	ИсходныеДанныеПерерасчетов.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория,
		|	ИсходныеДанныеПерерасчетов.Результат КАК Результат,
		|	ИсходныеДанныеПерерасчетов.ОтработаноДней КАК ОтработаноДней,
		|	ИсходныеДанныеПерерасчетов.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ИсходныеДанныеПерерасчетов.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
		|	ИсходныеДанныеПерерасчетов.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
		|	ИсходныеДанныеПерерасчетов.Подразделение КАК Подразделение,
		|	ИсходныеДанныеПерерасчетов.ДокументОснование КАК ДокументОснование,
		|	ИсходныеДанныеПерерасчетов.НормаДней КАК НормаДней,
		|	ИсходныеДанныеПерерасчетов.НормаЧасов КАК НормаЧасов,
		|	ИсходныеДанныеПерерасчетов.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ИсходныеДанныеПерерасчетов.КодВычета КАК КодВычета,
		|	ИсходныеДанныеПерерасчетов.СуммаВычета КАК СуммаВычета,
		|	ИсходныеДанныеПерерасчетов.ИдентификаторСтроки КАК ИдентификаторСтрокиВидаРасчета,
		|	ИсходныеДанныеПерерасчетов.ГрафикРаботы КАК ГрафикРаботы,
		|	ИсходныеДанныеПерерасчетов.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	ИсходныеДанныеПерерасчетов.ОбщийГрафик КАК ОбщийГрафик,
		|	ИсходныеДанныеПерерасчетов.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	ИсходныеДанныеПерерасчетов.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремени,
		|	ИсходныеДанныеПерерасчетов.ВремяВЧасах КАК ВремяВЧасах,
		|	ИсходныеДанныеПерерасчетов.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ИсходныеДанныеПерерасчетов.ОплаченоДней КАК ОплаченоДней,
		|	ИсходныеДанныеПерерасчетов.ОплаченоЧасов КАК ОплаченоЧасов,
		|	ИсходныеДанныеПерерасчетов.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
		|	ИсходныеДанныеПерерасчетов.ВидЗанятости КАК ВидЗанятости,
		|	ИсходныеДанныеПерерасчетов.СуммаВсегоПоУходуЗаПервымРебенком КАК СуммаВсегоПоУходуЗаПервымРебенком,
		|	ИсходныеДанныеПерерасчетов.СуммаСверхНормПоУходуЗаПервымРебенком КАК СуммаСверхНормПоУходуЗаПервымРебенком,
		|	ИсходныеДанныеПерерасчетов.СуммаВсегоПоУходуЗаВторымРебенком КАК СуммаВсегоПоУходуЗаВторымРебенком,
		|	ИсходныеДанныеПерерасчетов.СуммаСверхНормПоУходуЗаВторымРебенком КАК СуммаСверхНормПоУходуЗаВторымРебенком,
		|	ИсходныеДанныеПерерасчетов.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	ИсходныеДанныеПерерасчетов.СтраховойСлучай КАК СтраховойСлучай,
		|	ИсходныеДанныеПерерасчетов.КоличествоДетей КАК КоличествоДетей,
		|	ИсходныеДанныеПерерасчетов.КоличествоПервыхДетей КАК КоличествоПервыхДетей
		|ИЗ
		|	РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО ИсходныеДанныеПерерасчетов.Регистратор = СторнируемыеРегистраторы.Регистратор
		|			И ИсходныеДанныеПерерасчетов.ИдентификаторСтроки = СторнируемыеРегистраторы.ИдентификаторСтрокиВидаРасчета
		|			И ИсходныеДанныеПерерасчетов.ПериодДействия = СторнируемыеРегистраторы.ПериодДействия
		|			И ИсходныеДанныеПерерасчетов.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И ИсходныеДанныеПерерасчетов.Организация = СторнируемыеРегистраторы.Организация
		|ГДЕ
		|	ИсходныеДанныеПерерасчетов.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачисленийПособий)
		|	И НЕ ИсходныеДанныеПерерасчетов.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииИсключения)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПособияПерерасчет = ДанныеПерерасчета.ПособияПерерасчет;
	ТаблицаРаспределенияНачислений = РаспределенияТерриторииПоказатели.ТаблицаРаспределенияНачислений;
	ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда = РаспределенияТерриторииПоказатели.ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда;
	ТаблицаПоказателей = РаспределенияТерриторииПоказатели.ТаблицаПоказателей;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПериодДействия = Выборка.ПериодДействия;
		
		НоваяСтрокаСторноПособийПерерасчет = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(ПособияПерерасчет);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСторноПособийПерерасчет, Выборка);
		
		НоваяСтрокаСторноПособийПерерасчет.Организация = Организация;
		НоваяСтрокаСторноПособийПерерасчет.Результат = - НоваяСтрокаСторноПособийПерерасчет.Результат;
		Дополнительно = НоваяСтрокаСторноПособийПерерасчет.Дополнительно;
		Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", -Выборка.РезультатВТомЧислеЗаСчетФБ);
		Дополнительно.Вставить("СуммаВсегоПоУходуЗаПервымРебенком", -Выборка.СуммаВсегоПоУходуЗаПервымРебенком);
		Дополнительно.Вставить("СуммаСверхНормПоУходуЗаПервымРебенком", -Выборка.СуммаСверхНормПоУходуЗаПервымРебенком);
		Дополнительно.Вставить("СуммаВсегоПоУходуЗаВторымРебенком", -Выборка.СуммаВсегоПоУходуЗаВторымРебенком);
		Дополнительно.Вставить("СуммаСверхНормПоУходуЗаВторымРебенком", -Выборка.СуммаСверхНормПоУходуЗаВторымРебенком);
		Дополнительно.Вставить("ФинансированиеФедеральнымБюджетом", Выборка.ФинансированиеФедеральнымБюджетом);
		Дополнительно.Вставить("СтраховойСлучай", Выборка.СтраховойСлучай);
		Дополнительно.Вставить("КоличествоДетей", Выборка.КоличествоДетей);
		Дополнительно.Вставить("КоличествоПервыхДетей", Выборка.КоличествоПервыхДетей);
		
		НоваяСтрокаСторноПособийПерерасчет.ОплаченоДней = - НоваяСтрокаСторноПособийПерерасчет.ОплаченоДней;
		НоваяСтрокаСторноПособийПерерасчет.ОплаченоЧасов = - НоваяСтрокаСторноПособийПерерасчет.ОплаченоЧасов;
		
		НоваяСтрокаСторноПособийПерерасчет.ФиксРасчет = Ложь;
		НоваяСтрокаСторноПособийПерерасчет.ФиксСтрока = Ложь;
		НоваяСтрокаСторноПособийПерерасчет.ФиксЗаполнение = Ложь;
		
		НоваяСтрокаСторноПособийПерерасчет.Сторно = Истина;
		НоваяСтрокаСторноПособийПерерасчет.ФиксСторно = Истина;
		НоваяСтрокаСторноПособийПерерасчет.СторнируемыйДокумент = Выборка.Ссылка;
		
		ЗаполнитьРезультатРаспределения(НоваяСтрокаСторноПособийПерерасчет, ТаблицаРаспределенияНачислений, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
		ЗаполнитьРезультатРаспределенияПоТерриториям(НоваяСтрокаСторноПособийПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
		ЗаполнитьПоказатели(НоваяСтрокаСторноПособийПерерасчет, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицыРаспределенияТерриторийПоказателей(МенеджерВременныхТаблиц)
	
	СтруктураТаблиц = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СторнируемыеРегистраторы.Регистратор КАК Ссылка,
		|	РаспределениеРезультатовНачислений.Регистратор КАК Регистратор,
		|	РаспределениеРезультатовНачислений.НомерСтроки КАК НомерСтроки,
		|	РаспределениеРезультатовНачислений.Активность КАК Активность,
		|	РаспределениеРезультатовНачислений.РегистраторИзмерение КАК РегистраторИзмерение,
		|	РаспределениеРезультатовНачислений.Территория КАК Территория,
		|	РаспределениеРезультатовНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РаспределениеРезультатовНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределениеРезультатовНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	РаспределениеРезультатовНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	РаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	РаспределениеРезультатовНачислений.Результат КАК Результат
		|ИЗ
		|	РегистрСведений.РаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО РаспределениеРезультатовНачислений.Регистратор = СторнируемыеРегистраторы.Регистратор
		|			И РаспределениеРезультатовНачислений.ИдентификаторСтроки = СторнируемыеРегистраторы.ИдентификаторСтрокиВидаРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СторнируемыеРегистраторы.Регистратор КАК Ссылка,
		|	РаспределениеПоТерриториямУсловиямТруда.Регистратор КАК Регистратор,
		|	РаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
		|	РаспределениеПоТерриториямУсловиямТруда.Активность КАК Активность,
		|	РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение КАК РегистраторИзмерение,
		|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
		|	РаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
		|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
		|	РаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
		|	РаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
		|	РаспределениеПоТерриториямУсловиямТруда.СуммаВычета КАК СуммаВычета,
		|	РаспределениеПоТерриториямУсловиямТруда.СкидкаПоВзносам КАК СкидкаПоВзносам,
		|	РаспределениеПоТерриториямУсловиямТруда.РанееНачислено КАК РанееНачислено
		|ИЗ
		|	РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО РаспределениеПоТерриториямУсловиямТруда.Регистратор = СторнируемыеРегистраторы.Регистратор
		|			И РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки = СторнируемыеРегистраторы.ИдентификаторСтрокиВидаРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СторнируемыеРегистраторы.Регистратор КАК Ссылка,
		|	ЗначенияПоказателейНачислений.Регистратор КАК Регистратор,
		|	ЗначенияПоказателейНачислений.НомерСтроки КАК НомерСтроки,
		|	ЗначенияПоказателейНачислений.Активность КАК Активность,
		|	ЗначенияПоказателейНачислений.РегистраторИзмерение КАК РегистраторИзмерение,
		|	ЗначенияПоказателейНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЗначенияПоказателейНачислений.Показатель КАК Показатель,
		|	ЗначенияПоказателейНачислений.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО ЗначенияПоказателейНачислений.Регистратор = СторнируемыеРегистраторы.Регистратор
		|			И ЗначенияПоказателейНачислений.ИдентификаторСтроки = СторнируемыеРегистраторы.ИдентификаторСтрокиВидаРасчета";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаРаспределенияНачислений = Результат[0].Выгрузить();
	ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда = Результат[1].Выгрузить();
	ТаблицаПоказателей = Результат[2].Выгрузить();
	
	ТаблицаРаспределенияНачислений.Индексы.Добавить("Ссылка,ИдентификаторСтроки");
	ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда.Индексы.Добавить("Ссылка,ИдентификаторСтроки");
	ТаблицаПоказателей.Индексы.Добавить("Ссылка,ИдентификаторСтроки,Показатель");
	
	СтруктураТаблиц.Вставить("ТаблицаРаспределенияНачислений", ТаблицаРаспределенияНачислений);
	СтруктураТаблиц.Вставить("ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда", ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда);
	СтруктураТаблиц.Вставить("ТаблицаПоказателей", ТаблицаПоказателей);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура ЗаполнитьПериодыПерерасчетаСотрудников(МенеджерВременныхТаблиц, ДанныеПерерасчета, МенеджерРасчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СторнируемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	СторнируемыеРегистраторы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СторнируемыеРегистраторы.ПериодДействия КАК ПериодДействия,
		|	СторнируемыеРегистраторы.ПерерасчетНачислений КАК ПерерасчетНачислений,
		|	СторнируемыеРегистраторы.ПерерасчетЛьгот КАК ПерерасчетЛьгот,
		|	ВЫБОР
		|		КОГДА СторнируемыеРегистраторы.ПерерасчетЛьгот
		|			ТОГДА СторнируемыеРегистраторы.ВидРасчета
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|	КОНЕЦ КАК ВидРасчета,
		|	СторнируемыеРегистраторы.ДокументОснование КАК ДокументОснование,
		|	НАЧАЛОПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания,
		|	ИСТИНА КАК ПериодПерерасчета
		|ИЗ
		|	ВТСторнируемыеРегистраторыНачисленийИЛьгот КАК СторнируемыеРегистраторы
		|ГДЕ
		|	СторнируемыеРегистраторы.ПериодДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ДатаНачала") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
				ЗаполнитьЗначенияСвойств(ДанныеПерерасчета.ТаблицаСотрудников.Добавить(), Выборка);
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ДанныеПерерасчета.СотрудникиПерерасчет.Добавить(), Выборка);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Установка отборов перерасчетов начислений и удержаний
		УстановитьОтборыПерерасчетовНачислений(МенеджерРасчета, МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТСторнируемыеРегистраторы(МенеджерВременныхТаблиц, ИсключаемыеРегистраторы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	Запрос.УстановитьПараметр("ПервоначальноеЗаполнениеНачисленияЗарплаты", ИсключаемыеРегистраторы = Документы.НачислениеЗарплаты.ПустаяСсылка());
	СоздатьВТТипыРегистраторовПоОтдельномуДокументу(МенеджерВременныхТаблиц);
	ДопустимыеВидыДокументов = ДопустимыеВидыДокументовНачисления();
	Запрос.УстановитьПараметр("ДопустимыеВидыДокументовНачисления", ДопустимыеВидыДокументов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерассчитываемыеСотрудники.Организация КАК Организация,
		|	ПерерассчитываемыеСотрудники.Сотрудник КАК Сотрудник,
		|	ПерерассчитываемыеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерассчитываемыеСотрудники.ПериодДействия КАК ПериодДействия,
		|	ПерерассчитываемыеСотрудники.ВидРасчета КАК ВидРасчета,
		|	ПерерассчитываемыеСотрудники.ПерерасчетНачислений КАК ПерерасчетНачислений,
		|	ПерерассчитываемыеСотрудники.ПерерасчетЛьгот КАК ПерерасчетЛьгот,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) КАК Регистратор
		|ПОМЕСТИТЬ ВТПерерассчитываемыеРегистраторыПредварительно
		|ИЗ
		|	ВТПерерассчитываемыеСотрудники КАК ПерерассчитываемыеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО ПерерассчитываемыеСотрудники.Организация = ИсходныеДанныеПерерасчетов.Организация
		|			И ПерерассчитываемыеСотрудники.Сотрудник = ИсходныеДанныеПерерасчетов.Сотрудник
		|			И ПерерассчитываемыеСотрудники.ПериодДействия = ИсходныеДанныеПерерасчетов.ПериодДействия
		|			И (НЕ ИсходныеДанныеПерерасчетов.РассчитыватьПоРазовымНачислениямДокумента)
		|			И (НЕ ИсходныеДанныеПерерасчетов.Регистратор В (&ИсключаемыеРегистраторы))
		|			И (ВЫБОР
		|				КОГДА ИсходныеДанныеПерерасчетов.Начисление.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|					ТОГДА ИСТИНА
		|				КОГДА ИсходныеДанныеПерерасчетов.Начисление.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|					ТОГДА ИсходныеДанныеПерерасчетов.Начисление.ВидДокументаНачисления В (&ДопустимыеВидыДокументовНачисления)
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТипыРегистраторовПоОтдельномуДокументу КАК ТипыРегистраторовПоОтдельномуДокументу
		|		ПО (ТИПЗНАЧЕНИЯ(ИсходныеДанныеПерерасчетов.Регистратор) = ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора)
		|			И (ИсходныеДанныеПерерасчетов.Начисление.ВидДокументаНачисления = ТипыРегистраторовПоОтдельномуДокументу.ВидДокументаНачисления)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ПервоначальноеЗаполнениеНачисленияЗарплаты
		|				ТОГДА ИСТИНА
		|			КОГДА НЕ ЕСТЬNULL(ИсходныеДанныеПерерасчетов.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) В (&ИсключаемыеРегистраторы)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ИсходныеДанныеПерерасчетов.Начисление ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			КОГДА ИсходныеДанныеПерерасчетов.Начисление.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|				ТОГДА ИСТИНА
		|			КОГДА ИсходныеДанныеПерерасчетов.Начисление.ВидДокументаНачисления В (&ДопустимыеВидыДокументовНачисления)
		|					И ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора ЕСТЬ NULL
		|				ТОГДА ТИПЗНАЧЕНИЯ(ИсходныеДанныеПерерасчетов.Регистратор) <> ТИП(Документ.СторнированиеНачислений)
		|						ИЛИ ЕСТЬNULL(ИсходныеДанныеПерерасчетов.Сторно, ЛОЖЬ) = ЛОЖЬ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПерерассчитываемыеСотрудники.Организация КАК Организация,
		|	ПерерассчитываемыеСотрудники.Сотрудник КАК Сотрудник,
		|	ПерерассчитываемыеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерассчитываемыеСотрудники.ПериодДействия КАК ПериодДействия,
		|	ПерерассчитываемыеСотрудники.ПерерасчетНачислений КАК ПерерасчетНачислений,
		|	ПерерассчитываемыеСотрудники.ПерерасчетЛьгот КАК ПерерасчетЛьгот,
		|	ИсходныеДанныеПерерасчетов.ДокументОснование КАК ДокументОснование,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.Начисление, ПерерассчитываемыеСотрудники.ВидРасчета) КАК ВидРасчета,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.Сторно, ЛОЖЬ) КАК Сторно,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрации,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) КАК Регистратор,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодДействияКонец,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ИдентификаторСтроки, 0) КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТСторнируемыеРегистраторыНачисленийИЛьгот
		|ИЗ
		|	ВТПерерассчитываемыеРегистраторыПредварительно КАК ПерерассчитываемыеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО ПерерассчитываемыеСотрудники.Организация = ИсходныеДанныеПерерасчетов.Организация
		|			И ПерерассчитываемыеСотрудники.Сотрудник = ИсходныеДанныеПерерасчетов.Сотрудник
		|			И ПерерассчитываемыеСотрудники.ПериодДействия = ИсходныеДанныеПерерасчетов.ПериодДействия
		|			И ПерерассчитываемыеСотрудники.Регистратор = ИсходныеДанныеПерерасчетов.Регистратор
		|			И (ПерерассчитываемыеСотрудники.ВидРасчета = ИсходныеДанныеПерерасчетов.Начисление
		|				ИЛИ ПерерассчитываемыеСотрудники.ПерерасчетНачислений)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТипыРегистраторовПоОтдельномуДокументу КАК ТипыРегистраторовПоОтдельномуДокументу
		|		ПО (ТИПЗНАЧЕНИЯ(ИсходныеДанныеПерерасчетов.Регистратор) = ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора)
		|			И (ИсходныеДанныеПерерасчетов.Начисление.ВидДокументаНачисления = ТипыРегистраторовПоОтдельномуДокументу.ВидДокументаНачисления)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ИсходныеДанныеПерерасчетов.Начисление ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			КОГДА ИсходныеДанныеПерерасчетов.Начисление.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|				ТОГДА ИСТИНА
		|			КОГДА ИсходныеДанныеПерерасчетов.Начисление.ВидДокументаНачисления В (&ДопустимыеВидыДокументовНачисления)
		|					И ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора ЕСТЬ NULL
		|				ТОГДА ТИПЗНАЧЕНИЯ(ИсходныеДанныеПерерасчетов.Регистратор) <> ТИП(Документ.СторнированиеНачислений)
		|					ИЛИ ЕСТЬNULL(ИсходныеДанныеПерерасчетов.Сторно, ЛОЖЬ) = ЛОЖЬ
		|					ИЛИ ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ДокументОснование, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СторнируемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	СторнируемыеРегистраторы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СторнируемыеРегистраторы.Организация КАК Организация,
		|	СторнируемыеРегистраторы.ПериодДействия КАК ПериодДействия,
		|	СторнируемыеРегистраторы.Регистратор КАК Регистратор,
		|	СторнируемыеРегистраторы.ВидРасчета КАК ВидРасчета,
		|	СторнируемыеРегистраторы.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТСторнируемыеРегистраторы
		|ИЗ
		|	ВТСторнируемыеРегистраторыНачисленийИЛьгот КАК СторнируемыеРегистраторы
		|ГДЕ
		|	СторнируемыеРегистраторы.Регистратор <> ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

Функция ВзаимноеСторно(НоваяСтрока, ТекущаяСтрока)
	
	Если Не НоваяСтрока.Сторно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если -НоваяСтрока.Результат <> ТекущаяСтрока.Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НоваяСтрока.Результат < 0 И -НоваяСтрока.ОплаченоДней <> ТекущаяСтрока.ОплаченоДней Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НоваяСтрока.Результат < 0 И -НоваяСтрока.ОплаченоЧасов <> ТекущаяСтрока.ОплаченоЧасов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		Если НоваяСтрока.РезультатРаспределения = Неопределено И ТекущаяСтрока.РезультатРаспределения <> Неопределено
			Или НоваяСтрока.РезультатРаспределения <> Неопределено И ТекущаяСтрока.РезультатРаспределения = Неопределено Тогда
			
			Возврат Ложь;
		КонецЕсли;
			
		Если НоваяСтрока.РезультатРаспределения <> Неопределено И ТекущаяСтрока.РезультатРаспределения <> Неопределено Тогда
			Если НоваяСтрока.РезультатРаспределения.Количество() <> ТекущаяСтрока.РезультатРаспределения.Количество() Тогда
				Возврат Ложь;
			КонецЕсли;
			Для каждого СтрокаРаспределения Из НоваяСтрока.РезультатРаспределения Цикл
				СтруктураПоиска = Новый Структура("СпособОтраженияЗарплатыВБухучете, СтатьяРасходов, СтатьяФинансирования, ПодразделениеУчетаЗатрат, Результат");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРаспределения);
				СтруктураПоиска.Результат = -СтрокаРаспределения.Результат;
				СтрокаНайдена = Ложь;
				Для каждого СтрокаПоиска Из ТекущаяСтрока.РезультатРаспределения Цикл
					Если Не КлючСтрокиИзменился(СтруктураПоиска, СтрокаПоиска) Тогда
						СтрокаНайдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не СтрокаНайдена Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда() Тогда
		
		Если НоваяСтрока.РаспределениеПоТерриториямУсловиямТруда = Неопределено И ТекущаяСтрока.РаспределениеПоТерриториямУсловиямТруда <> Неопределено
			Или НоваяСтрока.РаспределениеПоТерриториямУсловиямТруда <> Неопределено И ТекущаяСтрока.РаспределениеПоТерриториямУсловиямТруда = Неопределено Тогда
			
			Возврат Ложь;
		КонецЕсли;
			
		Если НоваяСтрока.РаспределениеПоТерриториямУсловиямТруда <> Неопределено И ТекущаяСтрока.РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда
			Если НоваяСтрока.РаспределениеПоТерриториямУсловиямТруда.Количество() <> ТекущаяСтрока.РаспределениеПоТерриториямУсловиямТруда.Количество() Тогда
				Возврат Ложь;
			КонецЕсли;
			Для каждого СтрокаРаспределения Из НоваяСтрока.РаспределениеПоТерриториямУсловиямТруда Цикл
				СтруктураПоиска = Новый Структура("ДоляРаспределения,Территория,УсловияТруда,Результат");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРаспределения);
				СтруктураПоиска.Результат = -СтрокаРаспределения.Результат;
				СтрокаНайдена = Ложь;
				Для каждого СтрокаПоиска Из ТекущаяСтрока.РаспределениеПоТерриториямУсловиямТруда Цикл
					Если Не КлючСтрокиИзменился(СтруктураПоиска, СтрокаПоиска) Тогда
						СтрокаНайдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не СтрокаНайдена Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НачалоУчетаПоИзменениямКадровойИстории(СтрокаИзменения)
	
	Если СтрокаИзменения.Добавление
		И (СтрокаИзменения.НовоеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
			Или СтрокаИзменения.НовоеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
			Или СтрокаИзменения.НовоеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности) Тогда
			
		Возврат Истина;
	КонецЕсли;
	
	Если СтрокаИзменения.Удаление
		И СтрокаИзменения.СтароеЗначениеВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьЧастьЗапросаНачисленийПоДокументу(ЧастиЗапроса, МетаданныеДокумента, ИмяТабличнойЧасти, ПараметрыЗаполнения)
	
	// Поля, которые есть не во всех табличных частях, проверяем, и если нет, заменяем.
	НеобязательныеПоля = Новый Соответствие;
	НеобязательныеПоля.Вставить("Начисление", "Начисления." + ПараметрыЗаполнения.ПолеВидРасчета);
	НеобязательныеПоля.Вставить("ДатаНачала", "Начисления.ПериодДействия");
	НеобязательныеПоля.Вставить("ДатаОкончания", "КОНЕЦПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ)");
	НеобязательныеПоля.Вставить("СуммаВычета", "0");
	НеобязательныеПоля.Вставить("КодВычета", "ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("Сторно", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ПериодДействия", "НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ГрафикРаботы", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ГрафикРаботыНорма", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ВидУчетаВремени", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ВремяВЧасах", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ОтработаноДней", "0");
	НеобязательныеПоля.Вставить("ОтработаноЧасов", "0");
	НеобязательныеПоля.Вставить("ОплаченоДней", "0");
	НеобязательныеПоля.Вставить("ОплаченоЧасов", "0");
	НеобязательныеПоля.Вставить("НормаДней", "0");
	НеобязательныеПоля.Вставить("НормаЧасов", "0");
	НеобязательныеПоля.Вставить("ПериодРегистрацииВремени", "ДАТАВРЕМЯ(1, 1, 1)");
	НеобязательныеПоля.Вставить("РасчетнаяБазаЗаЕдиницуНормыВремени", "0");
	НеобязательныеПоля.Вставить("ДокументОснование", "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ВидЗанятости", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("РезультатВТомЧислеЗаСчетФБ", "0");
	НеобязательныеПоля.Вставить("СуммаВсегоПоУходуЗаПервымРебенком", "0");
	НеобязательныеПоля.Вставить("СуммаСверхНормПоУходуЗаПервымРебенком", "0");
	НеобязательныеПоля.Вставить("СуммаВсегоПоУходуЗаВторымРебенком", "0");
	НеобязательныеПоля.Вставить("СуммаСверхНормПоУходуЗаВторымРебенком", "0");
	НеобязательныеПоля.Вставить("ФинансированиеФедеральнымБюджетом", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("СтраховойСлучай", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("КоличествоДетей", "0");
	НеобязательныеПоля.Вставить("КоличествоПервыхДетей", "0");
	
	ТекстЗапросаНачислений = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Ссылка,
		|	Начисления.Ссылка.Организация КАК Организация,
		|	Начисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.ВидЗанятости КАК ВидЗанятости,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.Результат КАК Результат,
		|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
		|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	Начисления.КодВычета КАК КодВычета,
		|	Начисления.СуммаВычета КАК СуммаВычета,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки,
		|	Начисления.ОтработаноДней КАК ОтработаноДней,
		|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	Начисления.ОплаченоДней КАК ОплаченоДней,
		|	Начисления.ОплаченоЧасов КАК ОплаченоЧасов,
		|	Начисления.НормаДней КАК НормаДней,
		|	Начисления.НормаЧасов КАК НормаЧасов,
		|	Начисления.СуммаВсегоПоУходуЗаПервымРебенком КАК СуммаВсегоПоУходуЗаПервымРебенком,
		|	Начисления.СуммаСверхНормПоУходуЗаПервымРебенком КАК СуммаСверхНормПоУходуЗаПервымРебенком,
		|	Начисления.СуммаВсегоПоУходуЗаВторымРебенком КАК СуммаВсегоПоУходуЗаВторымРебенком,
		|	Начисления.СуммаСверхНормПоУходуЗаВторымРебенком КАК СуммаСверхНормПоУходуЗаВторымРебенком,
		|	Начисления.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	Начисления.СтраховойСлучай КАК СтраховойСлучай,
		|	Начисления.КоличествоДетей КАК КоличествоДетей,
		|	Начисления.КоличествоПервыхДетей КАК КоличествоПервыхДетей,
		|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
		|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	Начисления.ОбщийГрафик КАК ОбщийГрафик,
		|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	Начисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремени,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
		|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|	Начисления.Сторно КАК Сторно
		|ИЗ
		|	&ТаблицаНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
		|		ПО (ПВРНачисления.Ссылка = Начисления.Начисление)
		|ГДЕ
		|	Начисления.Ссылка В(&ДокументыКОбработке)
		|	И ВЫБОР
		|			КОГДА ПВРНачисления.ТребуетсяРасчетБазы
		|				ТОГДА ИСТИНА
		|			КОГДА ПВРНачисления.ЗачетНормыВремени
		|				ТОГДА ИСТИНА
		|			КОГДА ПВРНачисления.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|				ТОГДА ИСТИНА
		|			КОГДА ПВРНачисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Командировка)
		|					И ТИПЗНАЧЕНИЯ(Начисления.Ссылка) <> ТИП(Документ.Командировка)
		|				ТОГДА ИСТИНА
		|			КОГДА ПВРНачисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку)
		|					И ТИПЗНАЧЕНИЯ(Начисления.Ссылка) <> ТИП(Документ.ОплатаПоСреднемуЗаработку)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	ТаблицаНачисления = МетаданныеДокумента.ПолноеИмя() + "." + ИмяТабличнойЧасти;
		
	Для каждого КлючИЗначение Из НеобязательныеПоля Цикл
		ИмяКолонки = КлючИЗначение.Ключ;
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяКолонки) = Неопределено Тогда
			ТекстЗапросаНачислений = СтрЗаменить(ТекстЗапросаНачислений, "Начисления." + ИмяКолонки, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
		
	ТекстЗапросаНачислений = СтрЗаменить(ТекстЗапросаНачислений, "&ТаблицаНачисления", ТаблицаНачисления);
	ТекстЗапросаНачислений = СтрЗаменить(ТекстЗапросаНачислений, "Ссылка.ПериодРегистрации", ПараметрыЗаполнения.ПолеПериодРегистрации);
	ЧастиЗапроса.Добавить(ТекстЗапросаНачислений);
	
КонецПроцедуры

#КонецОбласти