#Область ПрограммныйИнтерфейс

// Выполняет проверку используется ли для выбранных организаций настраиваемая отчетность.
// 
// Параметры:
//  ПараметрыОтчета - Структура - набор именованных параметров для определения вариантов заполнения отчета.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользуетсяНастраиваемаяОтчетность(ПараметрыОтчета) Экспорт
	
	ПолныйСписокОрганизаций = Новый Массив;
	Если ПараметрыОтчета.Свойство("ДатаКонцаПериодаОтчета") Тогда
		ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Иначе
		ДатаКонцаПериодаОтчета = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	ОсновнаяОрганизация = ПараметрыОтчета.Организация;
	
	Если ДоступныеОрганизации.Найти(ОсновнаяОрганизация) <> Неопределено Тогда
		ПолныйСписокОрганизаций.Добавить(ОсновнаяОрганизация);
	КонецЕсли;
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("УчетнаяПолитикаБухУчета",
		ОсновнаяОрганизация,
		ДатаКонцаПериодаОтчета);
	
	Если ПараметрыУчетнойПолитики <> Неопределено И ЗначениеЗаполнено(ПараметрыУчетнойПолитики.НастройкаЗаполненияБухОтчетности)
		И ПараметрыУчетнойПолитики.НастройкаЗаполненияБухОтчетности <> Справочники.НастройкиЗаполненияБухОтчетности.НеНастраивается Тогда
		
		Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
			ПараметрыОтчета.Вставить("НастройкаЗаполненияБухОтчетности", ПараметрыУчетнойПолитики.НастройкаЗаполненияБухОтчетности);
		КонецЕсли;
		
		// Для списка организаций с разными ИНН заполнение отчетности с использованием настроек недоступно
		Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") И ПараметрыОтчета.ГруппаОрганизаций.Количество()>0 Тогда
			Для Каждого Организация Из ПараметрыОтчета.ГруппаОрганизаций Цикл
				Если ДоступныеОрганизации.Найти(Организация.Значение) <> Неопределено Тогда
					ПолныйСписокОрганизаций.Добавить(Организация.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.ИНН) КАК КоличествоИНН
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В (&Ссылки)";
			Запрос.УстановитьПараметр("Ссылки", ПолныйСписокОрганизаций);
	
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Если ВыборкаДетальныеЗаписи.КоличествоИНН>1 Тогда
				Возврат Ложь;
			Иначе 
				Возврат Истина;
			КонецЕсли;
		Иначе 
			Возврат Истина;
		КонецЕсли;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет РегламентированныйОтчетБухОтчетность по форме ФормаОтчета2019Кв1.
//
// Параметры:
//  ПараметрыОтчета - Структура - набор именованных параметров для определения вариантов заполнения отчета.
//  Контейнер - Структура - Показателей отчета.
//
Процедура ЗаполнитьОтчетБухОтчетностьФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем РассчитанныеПоказатели; // Таблица для сбора сумм показателей по организациям
	
	РедакцияФормыНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.НастройкаЗаполненияБухОтчетности, "РедакцияФормы");
	Если НЕ (РедакцияФормыНастройки = "ФормаОтчета2019Кв1" ИЛИ РедакцияФормыНастройки = "") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ТаблицаРасшифровки") И ЗначениеЗаполнено(ПараметрыОтчета.ТаблицаРасшифровки) Тогда
		ТаблицаРасшифровки = ПараметрыОтчета.ТаблицаРасшифровки;
	Иначе
		ТаблицаРасшифровки = Новый ТаблицаЗначений;
		ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
		ТаблицаРасшифровки.Колонки.Добавить("Сумма");
		ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
		ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	КонецЕсли;
	
	ЗаполнениеФормОтчетности = ЗаполнениеФормОтчетности(ПараметрыОтчета);
	// Очистка таблицы расшифровки от сведений заполняемых отчетов.
	Для Каждого Элемент Из ЗаполнениеФормОтчетности Цикл
		Если Элемент.Значение = Истина Тогда
			ЗаполнениеБухгалтерскойОтчетности.ОчиститьРазделРасшифровки(ТаблицаРасшифровки, Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	//Инициализируем таблицы с данными
	РассчитанныеПоказатели = РассчитанныеПоказатели();
	ТаблицаСведенийСчета75_01 = ТаблицаСведенийСчета75_01();
	ЗначенияВычетаИзРасчетаАктивов1530 = ЗначенияВычетаИзРасчетаАктивов1530();
	
	МногострочныеПоказатели = Новый Структура;
	
	// Вспомогательные значения.
	ОсновнаяОрганизация = ПараметрыОтчета.Организация;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	ПолныйСписокОрганизаций = Новый Массив;
	
	Если ДоступныеОрганизации.Найти(ОсновнаяОрганизация) <> Неопределено Тогда
		ПолныйСписокОрганизаций.Добавить(ОсновнаяОрганизация);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		Для Каждого Организация Из ПараметрыОтчета.ГруппаОрганизаций Цикл
			Если ДоступныеОрганизации.Найти(Организация.Значение) <> Неопределено Тогда
				ПолныйСписокОрганизаций.Добавить(Организация.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнятьПредыдущиеПериоды = НЕ ЗаполнениеБухгалтерскойОтчетности.РасширенныйПериодОтчета(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		
	Для Каждого Организация Из ПолныйСписокОрганизаций Цикл
		
		КонтекстВыполнения = ПараметрыЗаполненияОтчета2019Кв1();
		КонтекстВыполнения.Организация = Организация;
		КонтекстВыполнения.РассчитанныеПоказатели = РассчитанныеПоказатели;
		КонтекстВыполнения.ТаблицаРасшифровки = ТаблицаРасшифровки;
		КонтекстВыполнения.СтруктураОтчета = ПараметрыОтчета.СтруктураОтчета;
		КонтекстВыполнения.ЗаполнениеФормОтчетности = ЗаполнениеФормОтчетности;
		КонтекстВыполнения.НастройкаЗаполненияБухОтчетности = ПараметрыОтчета.НастройкаЗаполненияБухОтчетности;
		КонтекстВыполнения.ЗаполнятьПредыдущиеПериоды = ЗаполнятьПредыдущиеПериоды;
		КонтекстВыполнения.ЭтоГодовойОтчет = ПараметрыОтчета.мДатаНачалаПериодаОтчета = 12;
		КонтекстВыполнения.НачалоПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
		КонтекстВыполнения.КонецПериодаОтчета = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
		КонтекстВыполнения.Данные = ПолучитьОбщиеДанныеДляЗаполнения(КонтекстВыполнения);
		КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2019Кв1";
		
		// Бухгалтерский баланс.
		Если ЗаполнениеФормОтчетности.Баланс Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс;
			КонтекстВыполнения.ИмяРаздела = "Баланс";
			
			ДобавитьРегулярныеГрафыФормы(КонтекстВыполнения);
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);
			
			ЗаполнитьДанныеРасчетаСтоимостиЧистыхАктивов(КонтекстВыполнения, ТаблицаСведенийСчета75_01, ЗначенияВычетаИзРасчетаАктивов1530);
			
		КонецЕсли;
		
		// Отчет о финансовых результатах.
		Если ЗаполнениеФормОтчетности.ОФР Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР;
			КонтекстВыполнения.ИмяРаздела = "ОФР";
			
			ДобавитьРегулярныеГрафыФормы(КонтекстВыполнения);
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);
			
		КонецЕсли;
		
		// Отчет об изменениях капитала.
		Если ЗаполнениеФормОтчетности.ОИК Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОИК;
			КонтекстВыполнения.ИмяРаздела = "ОИК";
			КонтекстВыполнения.РегулярныеГрафы = Неопределено;
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);
			
		КонецЕсли;
		
		// Отчет о движении денежных средств.
		Если ЗаполнениеФормОтчетности.ОДДС Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС;
			КонтекстВыполнения.ИмяРаздела = "ОДДС";
			
			ДобавитьРегулярныеГрафыФормы(КонтекстВыполнения);
			
			ДополнитьДаннымиЗаполненияПоОДДС(КонтекстВыполнения);
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);

		КонецЕсли;
		
		// Отчет о целевом использовании средств
		Если ЗаполнениеФормОтчетности.ОЦИПС Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС;
			КонтекстВыполнения.ИмяРаздела = "ОЦИС";
			
			ДобавитьРегулярныеГрафыФормы(КонтекстВыполнения);
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);

		КонецЕсли;
		
		// Пояснения 1.
		Если ЗаполнениеФормОтчетности.Пояснения1 Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения1;
			КонтекстВыполнения.ИмяРаздела = "Пояснения1";
			КонтекстВыполнения.РегулярныеГрафы = Неопределено;
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);
			
		КонецЕсли;
		
		// Пояснения 2.
		Если ЗаполнениеФормОтчетности.Пояснения2 Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения2;
			КонтекстВыполнения.ИмяРаздела = "Пояснения2";
			КонтекстВыполнения.РегулярныеГрафы = Неопределено;
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);
			
		КонецЕсли;
		
		// Пояснения 4.
		Если ЗаполнениеФормОтчетности.Пояснения4 Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения4;
			КонтекстВыполнения.ИмяРаздела = "Пояснения4";
			КонтекстВыполнения.РегулярныеГрафы = Неопределено;
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);

		КонецЕсли;

		// Пояснения 5.
		Если ЗаполнениеФормОтчетности.Пояснения5 Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения5;
			КонтекстВыполнения.ИмяРаздела = "Пояснения5";
			КонтекстВыполнения.РегулярныеГрафы = Неопределено;
			
			ЗаполнитьФормуПояснения5(КонтекстВыполнения, ЗаполнятьПредыдущиеПериоды);

		КонецЕсли;
		
		// Пояснения 6.
		Если ЗаполнениеФормОтчетности.Пояснения6 Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения6;
			КонтекстВыполнения.ИмяРаздела = "Пояснения6";
			КонтекстВыполнения.РегулярныеГрафы = Неопределено;

			ДобавитьРегулярныеГрафыФормы(КонтекстВыполнения);
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);
		
		КонецЕсли;
		
		// Пояснения 7.
		Если ЗаполнениеФормОтчетности.Пояснения7 Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения7;
			КонтекстВыполнения.ИмяРаздела = "Пояснения7";
			КонтекстВыполнения.РегулярныеГрафы = Неопределено;
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);
		
		КонецЕсли;
		
		// Пояснения 8.
		Если ЗаполнениеФормОтчетности.Пояснения8 Тогда
						
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения8;
			КонтекстВыполнения.ИмяРаздела = "Пояснения8";
			
			ДобавитьРегулярныеГрафыФормы(КонтекстВыполнения);
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);
		
		КонецЕсли;
		
		// Пояснения 9.
		Если ЗаполнениеФормОтчетности.Пояснения8 Тогда
			
			КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения9;
			КонтекстВыполнения.ИмяРаздела = "Пояснения9";
			КонтекстВыполнения.РегулярныеГрафы = Неопределено;
			
			ЗаполнитьФормуОтчетаПоНастройке(КонтекстВыполнения);

		КонецЕсли;
		
		Для Каждого ЭлементРаздел Из КонтекстВыполнения.МногострочныеПоказатели Цикл
			Раздел = ЭлементРаздел.Ключ;
			МногострочныеЧасти = ЭлементРаздел.Значение;
			
			Если НЕ МногострочныеПоказатели.Свойство(Раздел) Тогда
				МногострочныеПоказатели.Вставить(Раздел, Новый Структура);
			КонецЕсли;
			
			Для Каждого ЭлементМСЧ Из МногострочныеЧасти Цикл
				ИдентификаторМСЧ = ЭлементМСЧ.Ключ;
				МСЧ = ЭлементМСЧ.Значение;
				
				Если МногострочныеПоказатели.Свойство(ИдентификаторМСЧ) Тогда
					МногострочныеПоказатели[Раздел].Вставить(ИдентификаторМСЧ, МСЧ);
				Иначе
					МногострочныеПоказатели[Раздел].Вставить(ИдентификаторМСЧ, МСЧ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РассчитанныеПоказатели.Свернуть("Раздел, Показатель", "Сумма");
	Для Каждого СтрокаПоказателя Из РассчитанныеПоказатели Цикл
		Контейнер[СтрокаПоказателя.Раздел].Вставить(СтрокаПоказателя.Показатель, СтрокаПоказателя.Сумма);
	КонецЦикла;

	Для Каждого ЭлементРаздел Из МногострочныеПоказатели Цикл
		Раздел = ЭлементРаздел.Ключ;
		МногострочныеЧасти = ЭлементРаздел.Значение;
		Для Каждого ЭлементМСЧ Из МногострочныеЧасти Цикл
			ИдентификаторМСЧ = ЭлементМСЧ.Ключ;
			МСЧ = ЭлементМСЧ.Значение; //ТаблицаЗначений
			СвернутьТаблицуЗначенийДопСтрок(МСЧ);
			
			СтруктураСтроки = ПараметрыОтчета.СтруктураМногострочныхЧастей[ИдентификаторМСЧ].Состав[0];
			ПараметрыОтчета.СтруктураМногострочныхЧастей[ИдентификаторМСЧ].Состав.Очистить();
			ПараметрыОтчета.СтруктураМногострочныхЧастей[ИдентификаторМСЧ].Состав.Добавить(СтруктураСтроки);
			
			Для Инд = 0 По МСЧ.Количество() - 1 Цикл
				
				Если Инд >= 1 Тогда
					ПараметрыОтчета.СтруктураМногострочныхЧастей[ИдентификаторМСЧ].Состав.Добавить(СтруктураСтроки);
				КонецЕсли;
				
				Постфикс = "_" + Формат(Инд + 1, "ЧГ=0");
				Для Каждого Колонка Из МСЧ.Колонки Цикл
					Показатель = Колонка.Имя + Постфикс;
					Контейнер[Раздел].Вставить(Показатель, МСЧ[Инд][Колонка.Имя]);
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Сведения для вычета из авторасчета стоимости чистых активов.
	ОборотыСчета75_01 = ОборотыСчета75_01();
	ТаблицаСведенийСчета75_01.Свернуть("Графа", "Сумма");
	Для Каждого Строка75_01 Из ТаблицаСведенийСчета75_01 Цикл
		ОборотыСчета75_01["Графа" + Строка75_01.Графа] = Строка75_01.Сумма;
	КонецЦикла;
	
	ВычетИзРасчетаАктивов1530 = ВычетИзРасчетаАктивов1530();
	ЗначенияВычетаИзРасчетаАктивов1530.Свернуть("Графа", "Сумма");
	Для Каждого СтрокаВычета Из ЗначенияВычетаИзРасчетаАктивов1530 Цикл
		ВычетИзРасчетаАктивов1530["Графа" + СтрокаВычета.Графа] = СтрокаВычета.Сумма;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контейнер", Контейнер);
	СтруктураДанных.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	СтруктураДанных.Вставить("СтруктураМногострочныхЧастей", ПараметрыОтчета.СтруктураМногострочныхЧастей);
	СтруктураДанных.Вставить("ОборотыСчета75_01", ОборотыСчета75_01); 
	СтруктураДанных.Вставить("ВычетИзРасчетаАктивов1530", ВычетИзРасчетаАктивов1530);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

// Заполняет РегламентированныйОтчетБухОтчетность по форме ФормаОтчета2025Кв1.
//
// Параметры:
//  ПараметрыОтчета - Структура - набор именованных параметров для определения вариантов заполнения отчета.
//  Контейнер - Структура - Показателей отчета.
//
Процедура ЗаполнитьОтчетБухОтчетностьФормаОтчета2025Кв1(ПараметрыОтчета, Контейнер) Экспорт

	РедакцияФормыНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.НастройкаЗаполненияБухОтчетности, "РедакцияФормы");
	
	Если РедакцияФормыНастройки = "ФормаОтчета2025Кв1" Тогда
	
		ЗаполнениеФормОтчетности = ЗаполнениеФормОтчетности(ПараметрыОтчета, "ФормаОтчета2025Кв1");
		
		ОсновнаяОрганизация = ПараметрыОтчета.Организация;
		ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
		ПолныйСписокОрганизаций = Новый Массив;
		
		Если ДоступныеОрганизации.Найти(ОсновнаяОрганизация) <> Неопределено Тогда
			ПолныйСписокОрганизаций.Добавить(ОсновнаяОрганизация);
		КонецЕсли;
		
		Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
			Для Каждого Организация Из ПараметрыОтчета.ГруппаОрганизаций Цикл
				Если ДоступныеОрганизации.Найти(Организация.Значение) <> Неопределено Тогда
					ПолныйСписокОрганизаций.Добавить(Организация.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗаполнятьПредыдущиеПериоды = НЕ ЗаполнениеБухгалтерскойОтчетности.РасширенныйПериодОтчета(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
			
		Для Каждого Организация Из ПолныйСписокОрганизаций Цикл
			
			ПараметрыЗаполнения = ПараметрыЗаполненияОтчета2025Кв1();
			
			ПараметрыЗаполнения.Организация = Организация;
			ПараметрыЗаполнения.Вставить("ЗаполнениеФормОтчетности", ЗаполнениеФормОтчетности);
			ПараметрыЗаполнения.НастройкаЗаполненияБухОтчетности = ПараметрыОтчета.НастройкаЗаполненияБухОтчетности;
			ПараметрыЗаполнения.ЗаполнятьПредыдущиеПериоды = ЗаполнятьПредыдущиеПериоды;
			ПараметрыЗаполнения.ЭтоГодовойОтчет = ПараметрыОтчета.ДатаНачалаПериодаОтчета = 12;
			ПараметрыЗаполнения.НачалоПериодаОтчета = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
			ПараметрыЗаполнения.КонецПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
			ПараметрыЗаполнения.Данные = ПолучитьОбщиеДанныеДляЗаполнения(ПараметрыЗаполнения);
			ПараметрыЗаполнения.РедакцияФормы = "ФормаОтчета2025Кв1";
			
			// Бухгалтерский баланс.
			Если ЗаполнениеФормОтчетности.Баланс Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс;
				ПараметрыЗаполнения.ИмяРаздела = "Баланс";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				
				ДобавитьРегулярныеГрафыФормы(ПараметрыЗаполнения);
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
			// Отчет о финансовых результатах.
			Если ЗаполнениеФормОтчетности.ОФР Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР;
				ПараметрыЗаполнения.ИмяРаздела = "ОФР";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				
				ДобавитьРегулярныеГрафыФормы(ПараметрыЗаполнения);
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
			// Отчет об изменениях капитала.
			Если ЗаполнениеФормОтчетности.ОИК Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОИК;
				ПараметрыЗаполнения.ИмяРаздела = "ОИК";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
			// Отчет о движении денежных средств.
			Если ЗаполнениеФормОтчетности.ОДДС Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС;
				ПараметрыЗаполнения.ИмяРаздела = "ОДДС";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				
				ДобавитьРегулярныеГрафыФормы(ПараметрыЗаполнения);
				РегулярныеГрафыОДДС = ПараметрыЗаполнения.РегулярныеГрафы;
				
				ДополнитьДаннымиЗаполненияПоОДДС(ПараметрыЗаполнения);
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
				// Заполнение ОДДС по встроенному алгоритму выполняется по всем организациям
				Если Организация = ПолныйСписокОрганизаций[0] Тогда
					ПараметрыЗаполнения.Организация = ПолныйСписокОрганизаций;
					ЗаполнитьПоВстроенномуАлгоритмуОДДС(ПараметрыЗаполнения, Контейнер);
					ПараметрыЗаполнения.Организация = Организация;
				КонецЕсли;
				
			КонецЕсли;
			
				// Отчет о целевом использовании средств
			Если ЗаполнениеФормОтчетности.ОЦИПС Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС;
				ПараметрыЗаполнения.ИмяРаздела = "ОЦИС";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				
				ДобавитьРегулярныеГрафыФормы(ПараметрыЗаполнения);
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
			// Пояснения 3.
			Если ЗаполнениеФормОтчетности.Пояснения3 Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения3;
				ПараметрыЗаполнения.ИмяРаздела = "Пояснения3";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
			// Пояснения 4.
			Если ЗаполнениеФормОтчетности.Пояснения4 Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения4;
				ПараметрыЗаполнения.ИмяРаздела = "Пояснения4";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
	
			// Пояснения 5.
			Если ЗаполнениеФормОтчетности.Пояснения5 Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения5;
				ПараметрыЗаполнения.ИмяРаздела = "Пояснения5";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
			// Пояснения 6.
			Если ЗаполнениеФормОтчетности.Пояснения6 Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения6;
				ПараметрыЗаполнения.ИмяРаздела = "Пояснения6";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
			
			КонецЕсли;
			
			// Пояснения 7, 8.
			Если ЗаполнениеФормОтчетности.Пояснения7
					ИЛИ ЗаполнениеФормОтчетности.Пояснения8 Тогда
					
				Формы = Новый Массив;
				Если ЗаполнениеФормОтчетности.Пояснения7 Тогда
					Формы.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения7);
				КонецЕсли;
				Если ЗаполнениеФормОтчетности.Пояснения8 Тогда
					Формы.Добавить(Перечисления.ФормыБухгалтерскойОтчетности.Пояснения8);
				КонецЕсли;
				ПараметрыЗаполнения.ФормаОтчетности = Формы;
				ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
				ЗаполнитьФормыДебиторскойКредиторскойЗадолженности(ПараметрыЗаполнения, Истина, Контейнер);
				
				Если ЗаполнениеФормОтчетности.Пояснения7 Тогда
					
					ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения7;
					ПараметрыЗаполнения.ИмяРаздела = "Пояснения7";
					ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
					ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
					
					ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
					
				КонецЕсли;
				
				Если ЗаполнениеФормОтчетности.Пояснения8 Тогда
					
					ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения8;
					ПараметрыЗаполнения.ИмяРаздела = "Пояснения8";
					ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
					ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
					
					ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				КонецЕсли;
				
			КонецЕсли;
			
			// Пояснения 9.
			Если ЗаполнениеФормОтчетности.Пояснения9 Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения9;
				ПараметрыЗаполнения.ИмяРаздела = "Пояснения9";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				
				ДобавитьРегулярныеГрафыФормы(ПараметрыЗаполнения);
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
			// Пояснения 10.
			Если ЗаполнениеФормОтчетности.Пояснения10 Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения10;
				ПараметрыЗаполнения.ИмяРаздела = "Пояснения10";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				
				ДобавитьРегулярныеГрафыФормы(ПараметрыЗаполнения);
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
			// Пояснения 11.
			Если ЗаполнениеФормОтчетности.Пояснения11 Тогда
				
				ПараметрыЗаполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения11;
				ПараметрыЗаполнения.ИмяРаздела = "Пояснения11";
				ПараметрыЗаполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ПараметрыЗаполнения.ИмяРаздела);
				ПараметрыЗаполнения.РегулярныеГрафы = Неопределено;
				
				ЗаполнитьФормуОтчетаПоНастройке(ПараметрыЗаполнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контейнер", Контейнер);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Дополняет структуру многострочных частей бухгалтерской отчетности.
// 
// Параметры:
//  ПараметрыОтчета - Структура
//  СтруктураМногострочныхЧастей - Структура -Структура многострочных частей
Процедура ДополнитьСтруктуруМногострочныхЧастей(ПараметрыОтчета, СтруктураМногострочныхЧастей) Экспорт
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("УчетнаяПолитикаБухУчета",
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.мДатаКонцаПериодаОтчета);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиБухОтчетности.ФормаОтчетности КАК ФормаОтчетности,
		|	СтрокиБухОтчетности.Наименование КАК Наименование,
		|	СтрокиБухОтчетности.КодСтроки КАК КодСтроки,
		|	СтрокиБухОтчетности.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
		|	СтрокиБухОтчетности.ОсновнаяСтрока.КодСтроки КАК ОсновнаяСтрокаКодСтроки,
		|	СтрокиБухОтчетности.ОсновнаяСтрока.КодЯчейки КАК ОсновнаяСтрокаКодЯчейки
		|ИЗ
		|	Справочник.СтрокиБухОтчетности КАК СтрокиБухОтчетности
		|ГДЕ
		|	СтрокиБухОтчетности.Владелец = &Настройка
		|	И НЕ СтрокиБухОтчетности.Регламентированная
		|	И НЕ СтрокиБухОтчетности.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодСтроки
		|ИТОГИ ПО
		|	ФормаОтчетности,
		|	ОсновнаяСтрокаКодЯчейки";
	
	Запрос.Параметры.Вставить("Настройка", ПараметрыУчетнойПолитики.НастройкаЗаполненияБухОтчетности);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаФорма = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФорма.Следующий() Цикл
		
		Если ВыборкаФорма.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс 
			Или ВыборкаФорма.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР Тогда
			Префикс = "П100100";
			Постфикс = "02";
			ПостфиксНомера = "03";
		Иначе
			Префикс = "ДопСтрока";
			Постфикс = "01";
			ПостфиксНомера = "02";
		КонецЕсли;
		
		ВыборкаОсновнаяСтрокаКодСтроки = ВыборкаФорма.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОсновнаяСтрокаКодСтроки.Следующий() Цикл
			
			КодСтрокиМногострочногоПоказателя = Прав(ВыборкаОсновнаяСтрокаКодСтроки.ОсновнаяСтрокаКодЯчейки, 4);
			
			Ключ = Префикс + КодСтрокиМногострочногоПоказателя;
			
			Показатели = Неопределено;
			
			СтруктураМногострочныхЧастей.Свойство(Ключ, Показатели);
			
			Если Показатели <> Неопределено Тогда
				
				ВыборкаДетальныеЗаписи = ВыборкаОсновнаяСтрокаКодСтроки.Выбрать();
				
				Для Сч=0 По ВыборкаДетальныеЗаписи.Количество()-1 Цикл
					
					ВыборкаДетальныеЗаписи.Следующий();
					
					Если Показатели.Состав.Количество()-1 >= Сч Тогда
						Показатели.Состав[Сч]["П100100" + КодСтрокиМногострочногоПоказателя + Постфикс] = ВыборкаДетальныеЗаписи.Наименование;
						Показатели.Состав[Сч]["П100100" + КодСтрокиМногострочногоПоказателя + ПостфиксНомера] = ВыборкаДетальныеЗаписи.КодСтроки;
					Иначе
						СтруктураПоказателя = Показатели.Состав[0];
						
						НоваяСтруктураПоказателя = Новый Структура;
						
						Для каждого Элемент Из СтруктураПоказателя Цикл
							НоваяСтруктураПоказателя.Вставить(Элемент.Ключ, Неопределено);
						КонецЦикла;
						НоваяСтруктураПоказателя["П100100" + КодСтрокиМногострочногоПоказателя + Постфикс] = ВыборкаДетальныеЗаписи.Наименование;
						НоваяСтруктураПоказателя["П100100" + КодСтрокиМногострочногоПоказателя + ПостфиксНомера] = ВыборкаДетальныеЗаписи.КодСтроки;
						
						Показатели.Состав.Вставить(Сч, НоваяСтруктураПоказателя);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьКомандыГенерацииНастроек(Форма) Экспорт
	

	ГруппаКнопок = Форма.Элементы.Найти("СгенерироватьНастройкиПоУмолчанию");
	
	Если ГруппаКнопок <> Неопределено Тогда
		
		КнопкаДополнительногоПодменю = Форма.ИмяФормы = "Справочник.НастройкиЗаполненияБухОтчетности.Форма.НастройкиЗаполненияОтчетности";
		
		КомандаФормы = Форма.Команды.Добавить("ФормаСгенерироватьНастройкиФормаОтчета2025Кв1");
		КомандаФормы.Действие = "СгенерироватьНастройкиПоУмолчанию";
		КомандаФормы.Заголовок = "Форма №157н от 04.10.2023 г.";
		КомандаФормы.Подсказка = "Утверждена приказом Минфина России от 04.10.2023 № 157н";
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		КнопкаФормы = Форма.Элементы.Добавить(КомандаФормы.Имя, Тип("КнопкаФормы"), ГруппаКнопок);
		КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
		КнопкаФормы.ПоложениеВКоманднойПанели = ?(КнопкаДополнительногоПодменю = Истина,
			ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю,
			ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели);
		
		КомандаФормы = Форма.Команды.Добавить("ФормаСгенерироватьНастройкиФормаОтчета2019Кв1");
		КомандаФормы.Действие = "СгенерироватьНастройкиПоУмолчанию";
		КомандаФормы.Заголовок = "Форма №66н от 02.07.2010 г., в ред. приказа Минфина России от 19.04.2019 № 61н";
		КомандаФормы.Подсказка = "Утверждена приказом Минфина России от 02.07.2010 г. №66н, в ред. приказа Минфина России от 19.04.2019 № 61н.";
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		КнопкаФормы = Форма.Элементы.Добавить(КомандаФормы.Имя, Тип("КнопкаФормы"), ГруппаКнопок);
		КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
		КнопкаФормы.ПоложениеВКоманднойПанели = ?(КнопкаДополнительногоПодменю = Истина,
			ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю,
			ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет общие субконто для переданного массива счетов.
// 
// Параметры:
//  Счета - Массив из ПланСчетовСсылка.Хозрасчетный - Счета
//  МаксКоличествоСубконто - Число - Макс количество субконто
// 
// Возвращаемое значение:
//  Структура - Общие субконто счетов:
// * УчетПоПризнакамУчета - Неопределено, Структура - :
// ** Подразделение - Булево
// ** НаправлениеДеятельности - Булево
Функция ОбщиеСубконтоСчетов(Счета, МаксКоличествоСубконто) Экспорт

	ДанныеСчетов = Новый Структура;
	ДанныеСчетов.Вставить("УчетПоПризнакамУчета", Неопределено);
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчетов.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчетов.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчетов.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
	КонецЦикла;
	
	Если Счета.Количество()>0 Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
			|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ НомераСубконто
			|ИЗ
			|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
			|ГДЕ
			|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидСубконто
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйВидыСубконто.Ссылка) КАК Ссылка
			|ПОМЕСТИТЬ ОбщиеСубконто
			|ИЗ
			|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
			|ГДЕ
			|	ХозрасчетныйВидыСубконто.Ссылка В(&Счета)
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйВидыСубконто.ВидСубконто
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйВидыСубконто.Ссылка) = &ЧислоСчетов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидСубконто
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбщиеСубконто.ВидСубконто КАК ВидСубконто,
			|	ЕСТЬNULL(ОбщиеСубконто.ВидСубконто.Наименование, """") КАК Наименование,
			|	ОбщиеСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения
			|ИЗ
			|	ОбщиеСубконто КАК ОбщиеСубконто
			|		ЛЕВОЕ СОЕДИНЕНИЕ НомераСубконто КАК НомераСубконто
			|		ПО ОбщиеСубконто.ВидСубконто = НомераСубконто.ВидСубконто
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомераСубконто.НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(Хозрасчетный.УчетПоПодразделениям) КАК УчетПоПодразделениям,
			|	МИНИМУМ(Хозрасчетный.УчетПоНаправлениямДеятельности) КАК УчетПоНаправлениямДеятельности
			|ИЗ
			|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Ссылка В(&Счета)
			|
			|ИМЕЮЩИЕ
			|	НЕ МИНИМУМ(Хозрасчетный.УчетПоПодразделениям) ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Счета", Счета);
		Запрос.УстановитьПараметр("Счет", Счета[0]);
		Запрос.УстановитьПараметр("ЧислоСчетов", Счета.Количество());
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаВидыСубконто = РезультатЗапроса[2].Выбрать();
		
		ИндексСубконто = 0;
		Пока ВыборкаВидыСубконто.Следующий() Цикл
			ИндексСубконто = ИндексСубконто + 1;
			ТипСубконто = ?(ВыборкаВидыСубконто.ТипЗначения = NULL, Новый ОписаниеТипов("Неопределено"), ВыборкаВидыСубконто.ТипЗначения);
			
			ДанныеСчетов.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
			ДанныеСчетов.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
			ДанныеСчетов.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ТипСубконто);
		КонецЦикла;
		
		УчетПоНаправлениямПодразделениям = РезультатЗапроса[3].Выбрать();
		Если УчетПоНаправлениямПодразделениям.Следующий() Тогда
			УчетПоПризнакамУчета = Новый Структура;
			
			УчетПоПризнакамУчета.Вставить("Подразделение"           , УчетПоНаправлениямПодразделениям.УчетПоПодразделениям);
			УчетПоПризнакамУчета.Вставить("НаправлениеДеятельности" , УчетПоНаправлениямПодразделениям.УчетПоНаправлениямДеятельности);
			
			ДанныеСчетов.Вставить("УчетПоПризнакамУчета", УчетПоПризнакамУчета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеСчетов;

КонецФункции

#Область ЗаполнениеПоНастройке

Процедура ЗаполнитьФормуОтчетаПоНастройке (КонтекстВыполнения)
	
	ПравилаЗаполнения = ПолучитьПакетыПравилЗаполнения(КонтекстВыполнения);
	
	Если ПравилаЗаполнения <> Неопределено Тогда
		
		ПараметрыСтрок = ПараметрыСтрок();
		
		СтрокиОтчетности = ПравилаЗаполнения[2].Выгрузить();
		
		ОбщиеПравила = ПравилаЗаполнения[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Для Каждого СтрокаОтчетности Из СтрокиОтчетности Цикл
			
			Если СтрокаОтчетаЗаполняется(СтрокаОтчетности, КонтекстВыполнения) Тогда
				
				ПравилаСтроки = ОбщиеПравила.Строки.Найти(СтрокаОтчетности.Строка, "Строка");
				
				Если ПравилаСтроки <> Неопределено Тогда
					
					ПараметрыПоказателя = ПолучитьПараметрыПоказателя();
					ПараметрыПоказателя.КодСтроки = СтрокаОтчетности.КодСтроки;
					ПараметрыПоказателя.КодОсновнойСтроки = СтрокаОтчетности.КодОсновнойСтроки;
					ПараметрыПоказателя.ДопАлгоритмСтроки = СтрокаОтчетности.ДопАлгоритмСтроки;
					ПараметрыПоказателя.РегламентированнаяСтрока = СтрокаОтчетности.Регламентированная;
					ПараметрыПоказателя.ОбновитьНаименованиеСтроки = НеобходимоОбновитьНаименованиеСтроки(СтрокаОтчетности, КонтекстВыполнения);
					
					ЗаполнитьПараметрыПоСтроке(СтрокаОтчетности, ПараметрыПоказателя, ПараметрыСтрок, КонтекстВыполнения);
					
					ЗаполнитьГрафыПоСтроке(КонтекстВыполнения,
						КонтекстВыполнения.Данные,
						ПравилаСтроки.Строки,
						ПараметрыПоказателя);
						
					Если ЗначениеЗаполнено(СтрокаОтчетности.КодСтрокиПрошлогоПериода) Тогда
						
						ПараметрыПоказателя.ПрошлыйПериод = Истина;
						ПараметрыПоказателя.КодСтроки = СтрокаОтчетности.КодСтроки;
						ПараметрыПоказателя.КодСтрокиПрошлогоПериода = СтрокаОтчетности.КодСтрокиПрошлогоПериода;
						
						ЗаполнитьГрафыПоСтроке(КонтекстВыполнения,
							КонтекстВыполнения.Данные, 
							ПравилаСтроки.Строки,
							ПараметрыПоказателя);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПакетыПравилЗаполнения(КонтекстВыполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиБухОтчетности.Ссылка КАК Строка,
	|	СтрокиБухОтчетности.КодСтроки КАК КодСтроки,
	|	СтрокиБухОтчетности.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
	|	СтрокиБухОтчетности.КодЯчейки КАК КодЯчейки,
	|	СтрокиБухОтчетности.КодЯчейкиПрошлогоПериода КАК КодЯчейкиПрошлогоПериода,
	|	СтрокиБухОтчетности.Наименование КАК СтрокаНаименование,
	|	СтрокиБухОтчетности.НаименованиеРасшифровки КАК СтрокаНаименованиеРасшифровки,
	|	СтрокиБухОтчетности.ДопАлгоритм КАК ДопАлгоритмСтроки,
	|	СтрокиБухОтчетности.Регламентированная КАК Регламентированная,
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока, НЕОПРЕДЕЛЕНО) КАК ОсновнаяСтрока,
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.КодСтроки, """") КАК КодОсновнойСтроки,
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.Регламентированная, ЛОЖЬ) КАК ОсновнаяСтрокаРегламентированная,
	|	"""" КАК Графа,
	|	"""" КАК КодГрафы,
	|	"""" КАК ГрафаНаименование,
	|	0 КАК КодГода,
	|	"""" КАК ДопАлгоритмГрафы,
	|	АлгоритмыСбораДанныхБухОтчетности.Ссылка КАК АлгоритмСбораДанных,
	|	АлгоритмыСбораДанныхБухОтчетности.ОтборЗадан КАК ОтборЗадан,
	|	АлгоритмыСбораДанныхБухОтчетности.ТипПоказателя КАК ТипПоказателя,
	|	АлгоритмыСбораДанныхБухОтчетности.Вычитаемый КАК Вычитаемый,
	|	АлгоритмыСбораДанныхБухОтчетности.НастройкиОтбора КАК НастройкиОтбора,
	|	АлгоритмыСбораДанныхБухОтчетности.ВидДвиженияДенежныхСредств КАК ВидДвиженияДенежныхСредств,
	|	АлгоритмыСбораДанныхБухОтчетности.НаименованиеРасшифровки КАК АлгоритмНаименованиеРасшифровки,
	|	ЛОЖЬ КАК ВыводитьДанныеНаКонецГода
	|ПОМЕСТИТЬ Строки
	|ИЗ
	|	Справочник.АлгоритмыСбораДанныхБухОтчетности КАК АлгоритмыСбораДанныхБухОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиБухОтчетности КАК СтрокиБухОтчетности
	|		ПО АлгоритмыСбораДанныхБухОтчетности.Владелец = СтрокиБухОтчетности.Ссылка
	|ГДЕ
	|	СтрокиБухОтчетности.Владелец = &Настройка
	|	И СтрокиБухОтчетности.ФормаОтчетности = &ФормаОтчетности
	|	И НЕ АлгоритмыСбораДанныхБухОтчетности.ПометкаУдаления
	|	И НЕ СтрокиБухОтчетности.ПометкаУдаления
	|	И НЕ СтрокиБухОтчетности.ЕстьГрафы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиБухОтчетности.Ссылка,
	|	СтрокиБухОтчетности.КодСтроки,
	|	СтрокиБухОтчетности.КодСтрокиПрошлогоПериода,
	|	СтрокиБухОтчетности.КодЯчейки,
	|	СтрокиБухОтчетности.КодЯчейкиПрошлогоПериода,
	|	СтрокиБухОтчетности.Наименование,
	|	СтрокиБухОтчетности.НаименованиеРасшифровки,
	|	СтрокиБухОтчетности.ДопАлгоритм,
	|	СтрокиБухОтчетности.Регламентированная,
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.КодСтроки, """"),
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.Регламентированная, ЛОЖЬ),
	|	ГрафыБухОтчетности.Ссылка,
	|	ГрафыБухОтчетности.КодГрафы,
	|	ГрафыБухОтчетности.Наименование,
	|	ГрафыБухОтчетности.КодГода,
	|	ГрафыБухОтчетности.ДопАлгоритм,
	|	АлгоритмыСбораДанныхБухОтчетности.Ссылка,
	|	АлгоритмыСбораДанныхБухОтчетности.ОтборЗадан,
	|	АлгоритмыСбораДанныхБухОтчетности.ТипПоказателя,
	|	АлгоритмыСбораДанныхБухОтчетности.Вычитаемый,
	|	АлгоритмыСбораДанныхБухОтчетности.НастройкиОтбора,
	|	АлгоритмыСбораДанныхБухОтчетности.ВидДвиженияДенежныхСредств,
	|	АлгоритмыСбораДанныхБухОтчетности.НаименованиеРасшифровки,
	|	ГрафыБухОтчетности.ВыводитьДанныеНаКонецГода
	|ИЗ
	|	Справочник.СтрокиБухОтчетности КАК СтрокиБухОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафыБухОтчетности КАК ГрафыБухОтчетности
	|		ПО (ГрафыБухОтчетности.Владелец = СтрокиБухОтчетности.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АлгоритмыСбораДанныхБухОтчетности КАК АлгоритмыСбораДанныхБухОтчетности
	|		ПО (АлгоритмыСбораДанныхБухОтчетности.Владелец = ГрафыБухОтчетности.Ссылка)
	|ГДЕ
	|	СтрокиБухОтчетности.Владелец = &Настройка
	|	И СтрокиБухОтчетности.ФормаОтчетности = &ФормаОтчетности
	|	И СтрокиБухОтчетности.ЕстьГрафы
	|	И НЕ ГрафыБухОтчетности.ПометкаУдаления
	|	И НЕ СтрокиБухОтчетности.ПометкаУдаления
	|	И НЕ АлгоритмыСбораДанныхБухОтчетности.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиБухОтчетности.Ссылка,
	|	СтрокиБухОтчетности.КодСтроки,
	|	СтрокиБухОтчетности.КодСтрокиПрошлогоПериода,
	|	СтрокиБухОтчетности.КодЯчейки,
	|	СтрокиБухОтчетности.КодЯчейкиПрошлогоПериода,
	|	СтрокиБухОтчетности.Наименование,
	|	СтрокиБухОтчетности.НаименованиеРасшифровки,
	|	СтрокиБухОтчетности.ДопАлгоритм,
	|	СтрокиБухОтчетности.Регламентированная,
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.КодСтроки, """"),
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.Регламентированная, ЛОЖЬ),
	|	ГрафыБухОтчетности.Ссылка,
	|	ГрафыБухОтчетности.КодГрафы,
	|	ГрафыБухОтчетности.Наименование,
	|	ГрафыБухОтчетности.КодГода,
	|	ГрафыБухОтчетности.ДопАлгоритм,
	|	АлгоритмыСбораДанныхБухОтчетности.Ссылка,
	|	АлгоритмыСбораДанныхБухОтчетности.ОтборЗадан,
	|	АлгоритмыСбораДанныхБухОтчетности.ТипПоказателя,
	|	АлгоритмыСбораДанныхБухОтчетности.Вычитаемый,
	|	АлгоритмыСбораДанныхБухОтчетности.НастройкиОтбора,
	|	АлгоритмыСбораДанныхБухОтчетности.ВидДвиженияДенежныхСредств,
	|	АлгоритмыСбораДанныхБухОтчетности.НаименованиеРасшифровки,
	|	ГрафыБухОтчетности.ВыводитьДанныеНаКонецГода
	|ИЗ
	|	Справочник.СтрокиБухОтчетности КАК СтрокиБухОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафыБухОтчетности КАК ГрафыБухОтчетности
	|		ПО (ГрафыБухОтчетности.Владелец = СтрокиБухОтчетности.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АлгоритмыСбораДанныхБухОтчетности КАК АлгоритмыСбораДанныхБухОтчетности
	|		ПО (АлгоритмыСбораДанныхБухОтчетности.Владелец = ГрафыБухОтчетности.Ссылка)
	|ГДЕ
	|	СтрокиБухОтчетности.Владелец = &Настройка
	|	И СтрокиБухОтчетности.ФормаОтчетности = &ФормаОтчетности
	|	И АлгоритмыСбораДанныхБухОтчетности.Ссылка ЕСТЬ NULL
	|	И НЕ ГрафыБухОтчетности.ПометкаУдаления
	|	И НЕ СтрокиБухОтчетности.ПометкаУдаления
	|	И СтрокиБухОтчетности.ДопАлгоритм <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АлгоритмСбораДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Строки.Строка КАК Строка,
	|	Строки.АлгоритмСбораДанных КАК АлгоритмСбораДанных,
	|	Строки.Графа КАК Графа,
	|	Строки.КодСтроки КАК КодСтроки,
	|	Строки.КодГрафы КАК КодГрафы,
	|	Строки.СтрокаНаименованиеРасшифровки КАК СтрокаНаименованиеРасшифровки,
	|	Строки.ТипПоказателя КАК ТипПоказателя,
	|	Строки.Вычитаемый КАК Вычитаемый,
	|	Строки.ДопАлгоритмСтроки КАК ДопАлгоритмСтроки,
	|	Строки.ДопАлгоритмГрафы КАК ДопАлгоритмГрафы,
	|	Строки.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
	|	Строки.КодГода КАК КодГода,
	|	Строки.ОтборЗадан КАК ОтборЗадан,
	|	Строки.НастройкиОтбора КАК НастройкиОтбора,
	|	Строки.Регламентированная КАК Регламентированная,
	|	Строки.КодЯчейки КАК КодЯчейки,
	|	Строки.КодЯчейкиПрошлогоПериода КАК КодЯчейкиПрошлогоПериода,
	|	Строки.ВидДвиженияДенежныхСредств КАК ВидДвиженияДенежныхСредств,
	|	Строки.ГрафаНаименование КАК ГрафаНаименование,
	|	Строки.АлгоритмНаименованиеРасшифровки КАК АлгоритмНаименованиеРасшифровки,
	|	Строки.ОсновнаяСтрока КАК ОсновнаяСтрока,
	|	Строки.КодОсновнойСтроки КАК КодОсновнойСтроки,
	|	Строки.СтрокаНаименование КАК СтрокаНаименование,
	|	Строки.ОсновнаяСтрокаРегламентированная КАК ОсновнаяСтрокаРегламентированная,
	|	Строки.ВыводитьДанныеНаКонецГода КАК ВыводитьДанныеНаКонецГода
	|ПОМЕСТИТЬ ОбщиеПравила
	|ИЗ
	|	Строки КАК Строки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбщиеПравила.Строка КАК Строка,
	|	ОбщиеПравила.КодСтроки КАК КодСтроки,
	|	ОбщиеПравила.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
	|	ОбщиеПравила.ДопАлгоритмСтроки КАК ДопАлгоритмСтроки,
	|	ОбщиеПравила.Регламентированная КАК Регламентированная,
	|	ОбщиеПравила.КодОсновнойСтроки КАК КодОсновнойСтроки,
	|	ОбщиеПравила.ОсновнаяСтрока КАК ОсновнаяСтрока,
	|	ОбщиеПравила.СтрокаНаименование КАК СтрокаНаименование,
	|	ОбщиеПравила.ОсновнаяСтрокаРегламентированная КАК ОсновнаяСтрокаРегламентированная
	|ИЗ
	|	ОбщиеПравила КАК ОбщиеПравила
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеПравила.Строка КАК Строка,
	|	ОбщиеПравила.АлгоритмСбораДанных КАК АлгоритмСбораДанных,
	|	ОбщиеПравила.Графа КАК Графа,
	|	ОбщиеПравила.КодСтроки КАК КодСтроки,
	|	ОбщиеПравила.КодГрафы КАК КодГрафы,
	|	ОбщиеПравила.СтрокаНаименованиеРасшифровки КАК СтрокаНаименованиеРасшифровки,
	|	ОбщиеПравила.ТипПоказателя КАК ТипПоказателя,
	|	ОбщиеПравила.Вычитаемый КАК Вычитаемый,
	|	ОбщиеПравила.ДопАлгоритмСтроки КАК ДопАлгоритмСтроки,
	|	ОбщиеПравила.ДопАлгоритмГрафы КАК ДопАлгоритмГрафы,
	|	ОбщиеПравила.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
	|	ОбщиеПравила.КодГода КАК КодГода,
	|	ОбщиеПравила.ОтборЗадан КАК ОтборЗадан,
	|	ОбщиеПравила.НастройкиОтбора КАК НастройкиОтбора,
	|	ОбщиеПравила.Регламентированная КАК Регламентированная,
	|	ОбщиеПравила.КодЯчейки КАК КодЯчейки,
	|	ОбщиеПравила.КодЯчейкиПрошлогоПериода КАК КодЯчейкиПрошлогоПериода,
	|	ОбщиеПравила.ВидДвиженияДенежныхСредств КАК ВидДвиженияДенежныхСредств,
	|	ОбщиеПравила.ГрафаНаименование КАК ГрафаНаименование,
	|	ОбщиеПравила.АлгоритмНаименованиеРасшифровки КАК АлгоритмНаименованиеРасшифровки,
	|	АлгоритмыСбораДанныхБухОтчетности.Счета.(
	|		Счет КАК Счет,
	|		Счет.Код КАК СчетКод
	|	) КАК Счета,
	|	АлгоритмыСбораДанныхБухОтчетности.КорСчета.(
	|		Счет.Код КАК СчетКод,
	|		Счет КАК Счет
	|	) КАК КорСчета,
	|	АлгоритмыСбораДанныхБухОтчетности.Группировки.(
	|		ПутьКданным КАК ПутьКданным
	|	) КАК Группировки,
	|	ОбщиеПравила.СтрокаНаименование КАК СтрокаНаименование,
	|	ОбщиеПравила.ВыводитьДанныеНаКонецГода КАК ВыводитьДанныеНаКонецГода
	|ИЗ
	|	ОбщиеПравила КАК ОбщиеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АлгоритмыСбораДанныхБухОтчетности КАК АлгоритмыСбораДанныхБухОтчетности
	|		ПО ОбщиеПравила.АлгоритмСбораДанных = АлгоритмыСбораДанныхБухОтчетности.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки,
	|	КодГрафы
	|ИТОГИ ПО
	|	Строка,
	|	КодГрафы";
	
	Запрос.УстановитьПараметр("Настройка", КонтекстВыполнения.НастройкаЗаполненияБухОтчетности);
	Запрос.УстановитьПараметр("ФормаОтчетности", КонтекстВыполнения.ФормаОтчетности);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ЗаполнитьГрафыПоСтроке(КонтекстВыполнения, Данные, Графы, ПараметрыПоказателя)
	
	//Проверка предусмотрен ли для строки отдельный алгоритм заполнения
	Если СтрокаЗаполняетсяСтандартно(ПараметрыПоказателя) Тогда
		
		Для Каждого Графа Из Графы Цикл
			
			АлгоритмСбораДанных = Графа.Строки.Получить(0).АлгоритмСбораДанных;
			Если ЗначениеЗаполнено(АлгоритмСбораДанных) Тогда
				
				Если КонтекстВыполнения.Свойство("РегулярныеГрафы") И КонтекстВыполнения.РегулярныеГрафы <> Неопределено Тогда
					
					РегулярныеГрафы = КонтекстВыполнения.РегулярныеГрафы;
					
					Для Каждого РегулярнаяГрафа Из РегулярныеГрафы Цикл
						
						ПараметрыПоказателя.РегулярнаяГрафа = РегулярнаяГрафа;
						
						ЗаполнитьПоказательПоАлгоритмам(КонтекстВыполнения, Данные, Графа.Строки, ПараметрыПоказателя);
					КонецЦикла;
				Иначе
					ЗаполнитьПоказательПоАлгоритмам(КонтекстВыполнения, Данные, Графа.Строки, ПараметрыПоказателя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПрименитьДопАлгоритм(КонтекстВыполнения, ПараметрыПоказателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказательПоАлгоритмам(КонтекстВыполнения, Данные, Алгоритмы, ПараметрыПоказателя)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		ЗаполнитьПоказательПоАлгоритмамФормаОтчета2025Кв1(КонтекстВыполнения, Данные, Алгоритмы, ПараметрыПоказателя);
	Иначе
		ЗаполнитьПоказательПоАлгоритмамФормаОтчета2019Кв1(КонтекстВыполнения, Данные, Алгоритмы, ПараметрыПоказателя);
	КонецЕсли;

КонецПроцедуры

Функция ДанныеДляРасчетаПоказателя(КонтекстВыполнения, Данные, Алгоритм, Счета, КорСчета, ПараметрыПоказателя)
	
	ДанныеГод = Данные.Получить(ПараметрыПоказателя.КонецПериода);
	
	ВидМакета = ПолучитьВидМакета(Алгоритм.ТипПоказателя, КорСчета, ПараметрыПоказателя);
	
	ИмяПакетаДанных = ПолучитьИмяПакетаДанных(ВидМакета, ПараметрыПоказателя);
	
	Если Не ДанныеГод.Свойство(ИмяПакетаДанных) И Не Алгоритм.ОтборЗадан Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("Организация", КонтекстВыполнения.Организация);
			Параметры.Вставить("НачалоПериода", ПараметрыПоказателя.НачалоПериода);
			Параметры.Вставить("КонецПериода", ПараметрыПоказателя.КонецПериода);
			Параметры.Вставить("ДопАлгоритм", ПараметрыПоказателя.ДопАлгоритмСтроки);
			Параметры.Вставить("ВариантНастроек", ПараметрыПоказателя.ТипПоказателя);
		
			ТекДанные = ПолучитьДанныеЗаполнения(ВидМакета, Параметры);
			
			ДанныеГод.Вставить(ИмяПакетаДанных, ТекДанные.ТаблицаДанных);
			
	КонецЕсли;
	
	Если Алгоритм.ОтборЗадан Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Организация", КонтекстВыполнения.Организация);
		Параметры.Вставить("НачалоПериода", ПараметрыПоказателя.НачалоПериода);
		Параметры.Вставить("КонецПериода", ПараметрыПоказателя.КонецПериода);
		Параметры.Вставить("Счета", Счета);
		Параметры.Вставить("КорСчета", КорСчета);
		Параметры.Вставить("НастройкиОтбора", Алгоритм.НастройкиОтбора);
		Параметры.Вставить("ДопАлгоритм", ПараметрыПоказателя.ДопАлгоритмСтроки);
		Параметры.Вставить("ВариантНастроек", ПараметрыПоказателя.ТипПоказателя);
		
		Возврат ПолучитьДанныеЗаполнения(ВидМакета, Параметры);
		
	КонецЕсли;
	
	Возврат ДанныеГод[ИмяПакетаДанных];

КонецФункции

Процедура ВычислитьПоказательСДопАлгоритмом(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	
	Если ПараметрыПоказателя.ДопАлгоритмСтроки = "ОДДС" Тогда
		ЗаполнитьПоказателиОДДС_АлгоритмДо2025(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмСтроки = "ОДДС_Агентские" Тогда
		ЗаполнитьПоказателиОДДС_Агентские_АлгоритмДо2025(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмСтроки = "ОДДС_НДС" Тогда
		ЗаполнитьПоказателиОДДС_НДС_АлгоритмДо2025(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьДопАлгоритм(КонтекстВыполнения, ПараметрыПоказателя)

	Если ПараметрыПоказателя.ДопАлгоритмГрафы = ">0" Тогда
		ПараметрыПоказателя.ЗначениеПоказателя = Макс(ПараметрыПоказателя.ЗначениеПоказателя,0);
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмГрафы = "<0" Тогда
		ПараметрыПоказателя.ЗначениеПоказателя = Мин(ПараметрыПоказателя.ЗначениеПоказателя,0);
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмГрафы = "-" Тогда
		ПараметрыПоказателя.ЗначениеПоказателя = -ПараметрыПоказателя.ЗначениеПоказателя;
	КонецЕсли;
	
	Если ПараметрыПоказателя.ДопАлгоритмСтроки = "НМАСПогашеннойСтоимостью" Тогда
		ЗаполнитьКоличествоНМАССальдо04_05(КонтекстВыполнения, ПараметрыПоказателя);
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмСтроки = "ПервоначальнаяСтоимостьНМА" Тогда
		ЗаполнитьПоказателиСПервоначальнойСтоимостьюНМА(КонтекстВыполнения, ПараметрыПоказателя);
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмСтроки = "Прирост[-]_Уменьшение[+]" Тогда
		ЗаполнитьПоказательПриростаУменьшения(КонтекстВыполнения, ПараметрыПоказателя);
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмСтроки = "-" Тогда
		ПараметрыПоказателя.ЗначениеПоказателя = -ПараметрыПоказателя.ЗначениеПоказателя;
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмСтроки = "ОДДС_Агентские" Тогда
		ДополнитьПоказателиОДДС_Агентские(КонтекстВыполнения, ПараметрыПоказателя);
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмСтроки = "ОДДС_НДС" Тогда
		ДополнитьПоказателиОДДС_НДС(КонтекстВыполнения, ПараметрыПоказателя);
	КонецЕсли;

КонецПроцедуры

#Область ПолучениеДанныхДляЗаполнения

Функция ПолучитьДанныеЗаполнения(Макет, Параметры)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ТаблицаДанных", Неопределено);
	ДанныеЗаполнения.Вставить("ОтборПоАналитике", Неопределено);
	
	СхемаКомпоновки = Справочники.АлгоритмыСбораДанныхБухОтчетности.ПолучитьМакет(Макет);
	
	Если Параметры.Свойство("ДопАлгоритм") И ДопАлгоритмОтбораПоДокументам(Параметры.ДопАлгоритм) Тогда 
		ДобавитьВЗапросОтборПоДокументам(СхемаКомпоновки, Параметры.ДопАлгоритм);
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	Если Параметры.Свойство("ВариантНастроек") И Параметры.ВариантНастроек = "СОБ" Тогда
		ВариантНастроек = СхемаКомпоновки.ВариантыНастроек.Найти(Параметры.ВариантНастроек).Настройки;
	Иначе
		ВариантНастроек = СхемаКомпоновки.НастройкиПоУмолчанию;
	КонецЕсли;
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантНастроек);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Организация", Параметры.Организация);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "НачалоПериода", Параметры.НачалоПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КонецПериода", Параметры.КонецПериода);
	
	Если Параметры.Свойство("НастройкиОтбора") Тогда
		
		НастройкиОтбора = Параметры.НастройкиОтбора.Получить();
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновки, Настройки, НастройкиОтбора);
		
		Если Параметры.Свойство("Счета") И Макет <> "СальдоИОборотыПоСчетамИСубконто" Тогда
			ОтборПоВидамСубконто = ПолучитьОтборПоВидамСубконто(Параметры.Счета);
			Если ОтборПоВидамСубконто.Количество() > 0 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ВидыСубконто", ОтборПоВидамСубконто);
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("КорСчета") И Макет <> "СальдоИОборотыПоСчетамИСубконто" Тогда
			ОтборПоВидамКорСубконто = ПолучитьОтборПоВидамСубконто(Параметры.КорСчета);
			Если ОтборПоВидамКорСубконто.Количество() > 0 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ВидыКорСубконто", ОтборПоВидамКорСубконто);
			КонецЕсли;
		КонецЕсли;
		
		ОтборПоАналитике = Новый Соответствие;
		Для Каждого ЭлементОтбора Из НастройкиОтбора.Отбор.Элементы Цикл
			
			Если ЭлементОтбора.Использование Тогда
				
				ЗначениеОтбора = Новый Структура;
				ЗначениеОтбора.Вставить("ВидСравненияКомпоновкиДанных", ЭлементОтбора.ВидСравнения);
				ЗначениеОтбора.Вставить("Значение", ЭлементОтбора.ПравоеЗначение);

				ОтборПоАналитике.Вставить(ЭлементОтбора.ЛевоеЗначение, ЗначениеОтбора); 
			КонецЕсли;
		КонецЦикла;
		
		Если ОтборПоАналитике.Количество() <> 0 Тогда
			ДанныеЗаполнения.ОтборПоАналитике = ОтборПоАналитике;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Счета") Тогда
		СписокСчетов = Новый СписокЗначений;
		СписокСчетов.ЗагрузитьЗначения(Параметры.Счета);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Счета", СписокСчетов);
	КонецЕсли;
	
	Если Параметры.Свойство("КорСчета") И (Макет = "ОборотыМеждуСчетами" ИЛИ Макет = "ОборотыМеждуСчетамиПоТипуДокумента")  Тогда
		СписокСчетов = Новый СписокЗначений;
		СписокСчетов.ЗагрузитьЗначения(Параметры.КорСчета);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КорСчета", СписокСчетов);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ТаблицаРезультатов = Новый ТаблицаЗначений();
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультатов);
	ТаблицаРезультатов = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	Если Макет = "СальдоИОборотыПоСчетам" Тогда
		ТаблицаРезультатов.Индексы.Добавить("Счет");
	ИначеЕсли Макет = "ОборотыМеждуСчетами" Тогда
		ТаблицаРезультатов.Индексы.Добавить("Счет0, КорСчет0");
		ТаблицаРезультатов.Индексы.Добавить("Счет0, КорСчет1");
		ТаблицаРезультатов.Индексы.Добавить("Счет0, КорСчет2");
		
		ТаблицаРезультатов.Индексы.Добавить("Счет1, КорСчет0");
		ТаблицаРезультатов.Индексы.Добавить("Счет1, КорСчет1");
		ТаблицаРезультатов.Индексы.Добавить("Счет1, КорСчет2");
		
		ТаблицаРезультатов.Индексы.Добавить("Счет2, КорСчет0");
		ТаблицаРезультатов.Индексы.Добавить("Счет2, КорСчет1");
		ТаблицаРезультатов.Индексы.Добавить("Счет2, КорСчет2");
	КонецЕсли;
	
	ДанныеЗаполнения.ТаблицаДанных = ТаблицаРезультатов;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПолучитьОбщиеДанныеДляЗаполнения(КонтекстВыполнения)
	
	Данные = Новый Соответствие; 
	
	//Текущий период
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", КонтекстВыполнения.Организация);
	Параметры.Вставить("НачалоПериода", КонтекстВыполнения.НачалоПериодаОтчета);
	Параметры.Вставить("КонецПериода", КонтекстВыполнения.КонецПериодаОтчета);
	Параметры.Вставить("ВариантНастроек", "");
	
	ДанныеЗаПериод = Новый Структура;
	ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетам", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетам", Параметры));
	ДанныеЗаПериод.Вставить("ОборотыМеждуСчетами", ПолучитьДанныеЗаполнения("ОборотыМеждуСчетами", Параметры));
	ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетамИСубконто", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетамИСубконто", Параметры));
	
	Данные.Вставить(Параметры.КонецПериода, ДанныеЗаПериод);
	
	//Прошлый год
	Параметры.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, -12));
	Параметры.Вставить("КонецПериода", КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, -12)));
	Параметры.Вставить("ВариантНастроек", "");
	
	ДанныеЗаПериод = Новый Структура;
	ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетам", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетам", Параметры));
	ДанныеЗаПериод.Вставить("ОборотыМеждуСчетами", ПолучитьДанныеЗаполнения("ОборотыМеждуСчетами", Параметры));
	ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетамИСубконто", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетамИСубконто", Параметры));
	
	Данные.Вставить(Параметры.КонецПериода, ДанныеЗаПериод);
	
	//Позапрошлый год
	Параметры.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, -24));
	Параметры.Вставить("КонецПериода", КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, -24)));
	Параметры.Вставить("ВариантНастроек", "");
	
	ДанныеЗаПериод = Новый Структура;
	ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетам", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетам", Параметры));
	ДанныеЗаПериод.Вставить("ОборотыМеждуСчетами", ПолучитьДанныеЗаполнения("ОборотыМеждуСчетами", Параметры));
	ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетамИСубконто", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетамИСубконто", Параметры));
	
	Данные.Вставить(Параметры.КонецПериода, ДанныеЗаПериод);
	
	Если НЕ КонтекстВыполнения.ЭтоГодовойОтчет Тогда
			
		// Аналогичный период прошлого года
		Параметры.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, -12));
		Параметры.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, -12)));
		Параметры.Вставить("ВариантНастроек", "");
	
		ДанныеЗаПериод = Новый Структура;
		ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетам", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетам", Параметры));
		ДанныеЗаПериод.Вставить("ОборотыМеждуСчетами", ПолучитьДанныеЗаполнения("ОборотыМеждуСчетами", Параметры));
		ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетамИСубконто", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетамИСубконто", Параметры));
	
		Данные.Вставить(Параметры.КонецПериода, ДанныеЗаПериод);
		
		Параметры.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, -24));
		Параметры.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, -24)));
		Параметры.Вставить("ВариантНастроек", "");
	
		ДанныеЗаПериод = Новый Структура;
		ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетам", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетам", Параметры));
		ДанныеЗаПериод.Вставить("ОборотыМеждуСчетами", ПолучитьДанныеЗаполнения("ОборотыМеждуСчетами", Параметры));
		ДанныеЗаПериод.Вставить("СальдоИОборотыПоСчетамИСубконто", ПолучитьДанныеЗаполнения("СальдоИОборотыПоСчетамИСубконто", Параметры));
	
		Данные.Вставить(Параметры.КонецПериода, ДанныеЗаПериод);

	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Процедура ДополнитьДаннымиЗаполненияПоОДДС(КонтекстВыполнения)
	
	Данные = КонтекстВыполнения.Данные;
	ЗаполнятьПредыдущиеПериоды = КонтекстВыполнения.ЗаполнятьПредыдущиеПериоды;
	ЭтоГодовойОтчет = КонтекстВыполнения.ЭтоГодовойОтчет;
	
	ВидДДСПолучения    = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности;
	ВидДДСПеречисления = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =  
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АлгоритмыСбораДанныхБухОтчетностиСчета.Счет КАК Счет
		|ИЗ
		|	Справочник.АлгоритмыСбораДанныхБухОтчетности.Счета КАК АлгоритмыСбораДанныхБухОтчетностиСчета
		|ГДЕ
		|	ВЫРАЗИТЬ(АлгоритмыСбораДанныхБухОтчетностиСчета.Ссылка.Владелец КАК Справочник.СтрокиБухОтчетности).ФормаОтчетности = &ОДДС
		|	И АлгоритмыСбораДанныхБухОтчетностиСчета.Ссылка.ВидДвиженияДенежныхСредств <> &ВидДДСПустая";
	
	Запрос.УстановитьПараметр("ВидДДСПустая", Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОДДС", Перечисления.ФормыБухгалтерскойОтчетности.ОДДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	СчетаДДС = РезультатЗапроса.Выгрузить();
	
	Организация = КонтекстВыполнения.Организация;
	НачалоПериода = КонтекстВыполнения.НачалоПериодаОтчета;
	КонецПериода = КонтекстВыполнения.КонецПериодаОтчета;
	
	Данные[КонецПериода].Вставить("СтруктураДДС", ПолучитьДанныеДДС(
		Организация, НачалоПериода, КонецПериода, ВидДДСПолучения, ВидДДСПеречисления, СчетаДДС));
		
	Данные[КонецПериода].Вставить("РасчетыПоВалютноОбменнымОперациям", ПолучитьДанныеПоВалютноОбменнымОперациям(
		Организация, НачалоПериода, КонецПериода, ВидДДСПолучения, ВидДДСПеречисления));
		
	Данные[КонецПериода].Вставить("РасчетыПоНДС", ПолучитьРасчетыПоНДС(
		Организация, НачалоПериода, КонецПериода, ВидДДСПолучения, ВидДДСПеречисления));
		
	Данные[КонецПериода].Вставить("СтруктураНДСвДДС", ПолучитьДанныеНДСвДДС(
		Организация, НачалоПериода, КонецПериода, СчетаДДС, Данные[КонецПериода].СтруктураДДС));
		
	Если ЗаполнятьПредыдущиеПериоды Тогда
		
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -12);
		КонецПериода = КонецМесяца(ДобавитьМесяц(КонецПериода, -12));
		
		Данные[КонецПериода].Вставить("СтруктураДДС", ПолучитьДанныеДДС(
			Организация, НачалоПериода, КонецПериода, ВидДДСПолучения, ВидДДСПеречисления, СчетаДДС));
			
		Данные[КонецПериода].Вставить("РасчетыПоВалютноОбменнымОперациям", ПолучитьДанныеПоВалютноОбменнымОперациям(
			Организация, НачалоПериода, КонецПериода, ВидДДСПолучения, ВидДДСПеречисления));
			
		Данные[КонецПериода].Вставить("РасчетыПоНДС", ПолучитьРасчетыПоНДС(
			Организация, НачалоПериода, КонецПериода, ВидДДСПолучения, ВидДДСПеречисления));
			
		Данные[КонецПериода].Вставить("СтруктураНДСвДДС", ПолучитьДанныеНДСвДДС(
			Организация, НачалоПериода, КонецПериода, СчетаДДС, Данные[КонецПериода].СтруктураДДС));
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьДанныеДДС(Организация, НачалоПериодаОтчета, КонецПериодаОтчета, ВидДДСПолучения, ВидДДСПеречисления, СчетаДДС)

	ОписаниеТиповЧисло15_2 = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();

	ТаблицаОборотовПоВидамДДС = Новый ТаблицаЗначений;
	ТаблицаОборотовПоВидамДДС.Колонки.Добавить("СчетДДС",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОборотовПоВидамДДС.Колонки.Добавить("ВидДДС",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийДенежныхСредств"));
	ТаблицаОборотовПоВидамДДС.Колонки.Добавить("ДО",        ОписаниеТиповЧисло15_2);
	ТаблицаОборотовПоВидамДДС.Колонки.Добавить("ДО_НДС",    ОписаниеТиповЧисло15_2);
	ТаблицаОборотовПоВидамДДС.Колонки.Добавить("КО",        ОписаниеТиповЧисло15_2);
	ТаблицаОборотовПоВидамДДС.Колонки.Добавить("КО_НДС",    ОписаниеТиповЧисло15_2);
	
	КоллекцияПеречисления = Перечисления.ВидыДвиженийДенежныхСредств;
	
	Для Каждого ВидДДС Из КоллекцияПеречисления Цикл
		Для Каждого СчетДДС Из СчетаДДС Цикл
			НовыйСтрокаСчетаДДС = ТаблицаОборотовПоВидамДДС.Добавить();
			НовыйСтрокаСчетаДДС.СчетДДС = СчетДДС.Счет;
			НовыйСтрокаСчетаДДС.ВидДДС  = ВидДДС;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаОборотовПоВидамДДС.Индексы.Добавить("ВидДДС, СчетДДС");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетДДС,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяДДС,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ПОМЕСТИТЬ ВТ_Хозрасчетный
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Период,
	|			Счет В
	|				(&СчетаДДС),
	|			&СубконтоСтатьиДДС,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента),
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)), &СубконтоДоговорыЭквайринга, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Хозрасчетный.СчетДДС КАК СчетДДС,
	|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДДС,
	|	СУММА(ВТ_Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ВТ_Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	ВТ_Хозрасчетный КАК ВТ_Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО ВТ_Хозрасчетный.СтатьяДДС = СтатьиДвиженияДенежныхСредств.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Хозрасчетный.СчетДДС,
	|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств";
	
	Запрос.УстановитьПараметр("СубконтоДоговорыЭквайринга", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДоговорыЭквайринга);
	Запрос.УстановитьПараметр("НачПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", КонецПериодаОтчета);
	Запрос.УстановитьПараметр("СчетаДДС", СчетаДДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СубконтоСтатьиДДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
	
	СтруктураПоиска = Новый Структура("ВидДДС, СчетДДС");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		НайденныеСтроки = ТаблицаОборотовПоВидамДДС.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы = НайденныеСтроки[0];
			СтрокаТаблицы.ДО = СтрокаТаблицы.ДО + Выборка.СуммаОборотДт;
			СтрокаТаблицы.КО = СтрокаТаблицы.КО + Выборка.СуммаОборотКт;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОборотовПоВидамДДС;
	
КонецФункции 

Функция ПолучитьРасчетыПоНДС(Организация, НачалоПериодаОтчета, КонецПериодаОтчета, ВидДДСПолучения, ВидДДСПеречисления)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.СуммаОборотДт КАК ДО,
	               |	ХозрасчетныйОбороты.СуммаОборотКт КАК КО
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Период,
	               |			Счет = &Счет_68_90,
	               |			&СубконтоСтатьиДДС,
	               |			Организация = &Организация,
	               |			КорСчет = &Счет_68_02,
	               |			) КАК ХозрасчетныйОбороты";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода", КонецПериодаОтчета);
	Запрос.УстановитьПараметр("Счет_68_90", Счет("68.90"));
	Запрос.УстановитьПараметр("Счет_68_02", Счет("68.02"));
	Запрос.УстановитьПараметр("СубконтоСтатьиДДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("Перечисление", ВидДДСПолучения);
	Запрос.УстановитьПараметр("Поступление",  ВидДДСПеречисления);
	Выборка = Запрос.Выполнить().Выбрать();
	
	РасчетыПоНДС = Новый Структура;
	РасчетыПоНДС.Вставить("ПеречисленныйНДС", 0);
	РасчетыПоНДС.Вставить("ПолученныйНДС", 0);
	Если Выборка.Следующий() Тогда
		РасчетыПоНДС.ПеречисленныйНДС = Выборка.КО;
		РасчетыПоНДС.ПолученныйНДС    = Выборка.ДО;
	КонецЕсли;

	Возврат РасчетыПоНДС;
	
КонецФункции 

Функция ПолучитьДанныеНДСвДДС(Организация, НачалоПериодаОтчета, КонецПериодаОтчета, СчетаДДС, СтруктураДДС)
	
	ОрганизацияПерешлаНаУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецПериодаОтчета);
	
	Если ОрганизацияПерешлаНаУСН Тогда
		ТаблицаОборотовПоВидамДДС = СтруктураДДС.СкопироватьКолонки();
	Иначе
		
		Запрос = Новый Запрос;
		ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ПереопределитьЗапросСтруктураНДСвДДС(Запрос);
		
		Запрос.УстановитьПараметр("НачПериода",     НачалоПериодаОтчета);
		Запрос.УстановитьПараметр("КонПериода",     КонецПериодаОтчета);
		Запрос.УстановитьПараметр("Организация",    Организация);
		Запрос.УстановитьПараметр("СчетаДДС",       СчетаДДС);
		Запрос.УстановитьПараметр("ВалютаРегУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
		
		ТаблицаОборотовПоВидамДДС = Запрос.Выполнить().Выгрузить();
		ТаблицаОборотовПоВидамДДС.Индексы.Добавить("ВидДДС");
	КонецЕсли;
	
	Возврат ТаблицаОборотовПоВидамДДС;
	
КонецФункции

Функция ПолучитьДанныеПоВалютноОбменнымОперациям(Организация, НачалоПериодаОтчета, КонецПериодаОтчета, ВидДДСПолучения, ВидДДСПеречисления)
	
	СчетаБанка = Новый Массив;
	СчетаБанка.Добавить(Счет("51"));
	СчетаБанка.Добавить(Счет("52"));
	
	СчетаПриобретениеРеализацииВалюты = Новый Массив;
	СчетаПриобретениеРеализацииВалюты.Добавить(Счет("57.02"));
	СчетаПриобретениеРеализацииВалюты.Добавить(Счет("57.22"));
	
	ДоходыРасходыПриПродажеПокупкеВалюты = Новый Массив;
	ДоходыРасходыПриПродажеПокупкеВалюты.Добавить(ПланыВидовХарактеристик.СтатьиДоходов.ДоходыПриКонвертацииВалюты);
	ДоходыРасходыПриПродажеПокупкеВалюты.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриКонвертацииВалюты);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ВалютоОбменДО, 0)) КАК ВалютоОбменДО,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ВалютоОбменКО, 0)) КАК ВалютоОбменКО,
	|	0 КАК ВалютоОбменДельта
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.СуммаОборот КАК ВалютоОбменДО,
	|		0 КАК ВалютоОбменКО
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				СчетДт В (&СчетаБанка),
	|				&СубконтоСтатьиДДС,
	|				СчетКт В (&СчетаПриобретениеРеализацииВалюты),
	|				,
	|				Организация = &Организация
	|					И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.СтатьиДвиженияДенежныхСредств).ВидДвиженияДенежныхСредств = &ВидДДСПрочиеПоступления) КАК ХозрасчетныйОборотыДтКт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				СчетДт В (&СчетаПриобретениеРеализацииВалюты),
	|				,
	|				СчетКт В (&СчетаБанка),
	|				&СубконтоСтатьиДДС,
	|				Организация = &Организация
	|					И ВЫРАЗИТЬ(СубконтоКт1 КАК Справочник.СтатьиДвиженияДенежныхСредств).ВидДвиженияДенежныхСредств = &ВидДДСПрочиеПлатежи) КАК ХозрасчетныйОборотыДтКт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.СуммаОборот,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				СчетДт = &СчетРасчетныеСчета,
	|				&СубконтоСтатьиДДС,
	|				СчетКт = &СчетПрочиеДоходы,
	|				&СубконтоПрочиеДоходыРасходы,
	|				Организация = &Организация
	|					И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.СтатьиДвиженияДенежныхСредств).ВидДвиженияДенежныхСредств = &ВидДДСПрочиеПоступления
	|					И СубконтоКт1 В (&ПокупкаПродажаВалюты)) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ВалютоОбменДО, 0)) > 0 И
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ВалютоОбменКО, 0)) > 0";


	Запрос.УстановитьПараметр("НачПериода",                        НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода",                        КонецПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",                       Организация);
	Запрос.УстановитьПараметр("СчетаБанка",                        СчетаБанка);
	Запрос.УстановитьПараметр("СчетаПриобретениеРеализацииВалюты", СчетаПриобретениеРеализацииВалюты);
	Запрос.УстановитьПараметр("СчетРасчетныеСчета",                Счет("51"));
	Запрос.УстановитьПараметр("СчетПрочиеДоходы",                  ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ПокупкаПродажаВалюты",              ДоходыРасходыПриПродажеПокупкеВалюты);
	Запрос.УстановитьПараметр("ВидДДСПрочиеПоступления",           ВидДДСПолучения);
	Запрос.УстановитьПараметр("ВидДДСПрочиеПлатежи",               ВидДДСПеречисления);
	Запрос.УстановитьПараметр("СубконтоСтатьиДДС",                 ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	ТаблицаПоВалютноОбменнымОперациям = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПоВалютноОбменнымОперациям;
	
КонецФункции

Процедура ДобавитьВЗапросОтборПоДокументам(СхемаКомпоновки, ДопАлгоритм);
	
	Если ДопАлгоритм = "МодернизацияОС" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МодернизацияОС.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументы
		|ИЗ
		|	Документ.МодернизацияОС КАК МодернизацияОС
		|ГДЕ
		|	МодернизацияОС.СобытиеОС.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МодернизацияОС.Ссылка
		|ИЗ
		|	Документ.МодернизацияОС2_4 КАК МодернизацияОС";
		
		
		СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос, "//ТекстЗапросаТаблицаДокументы", ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРасчетаСтоимостиЧистыхАктивов(КонтекстВыполнения, ТаблицаСведенийСчета75_01, ЗначенияВычетаИзРасчетаАктивов1530)
	
	Если КонтекстВыполнения.Свойство("РегулярныеГрафы") Тогда
		
		Для Каждого Графа Из КонтекстВыполнения.РегулярныеГрафы Цикл
			
			КлючДанныхГрафы = Графа.Значение.Получить("КлючДанных");
			ДанныеГрафы = КонтекстВыполнения.Данные.Получить(КлючДанныхГрафы);
			СальдоИОборотыПоСчетам = ДанныеГрафы.СальдоИОборотыПоСчетам.ТаблицаДанных;
			
			СКД_75_01 = ВычислитьПоказательПоТипу("СКД", СальдоИОборотыПоСчетам, "75.01");
			СКК_86    = ВычислитьПоказательПоТипу("СКК", СальдоИОборотыПоСчетам, "86");
			СКК_98_02 = ВычислитьПоказательПоТипу("СКК", СальдоИОборотыПоСчетам, "98.02");
			
			НоваяСтрока75_01 = ТаблицаСведенийСчета75_01.Добавить();
			НоваяСтрока75_01.Графа = Графа.Ключ;
			НоваяСтрока75_01.Сумма = СКД_75_01;
			
			НоваяСтрокаВычета1530 = ЗначенияВычетаИзРасчетаАктивов1530.Добавить();
			НоваяСтрокаВычета1530.Графа = Графа.Ключ;
			НоваяСтрокаВычета1530.Сумма = СКК_86 + СКК_98_02;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеФормаОтчета2019Кв1

Функция ПараметрыЗаполненияОтчета2019Кв1()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("НачалоПериодаОтчета", '00010101');
	Параметры.Вставить("КонецПериодаОтчета", '00010101');
	Параметры.Вставить("РассчитанныеПоказатели", Неопределено);
	Параметры.Вставить("ТаблицаРасшифровки", Неопределено);
	Параметры.Вставить("МногострочныеПоказатели", Новый Структура);
	Параметры.Вставить("СтруктураОтчета", Новый Структура);
	Параметры.Вставить("ЗаполнениеФормОтчетности", Ложь);
	Параметры.Вставить("НастройкаЗаполненияБухОтчетности", Неопределено);
	Параметры.Вставить("ЭтоГодовойОтчет", Ложь);
	Параметры.Вставить("ЗаполнятьПредыдущиеПериоды", Ложь);
	Параметры.Вставить("ФормаОтчетности", Неопределено);
	Параметры.Вставить("ИмяРаздела", "");
	Параметры.Вставить("РегулярныеГрафы", Неопределено);
	Параметры.Вставить("Данные", Неопределено);
	Параметры.Вставить("РедакцияФормы", "");
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьПоказательПоАлгоритмамФормаОтчета2019Кв1(КонтекстВыполнения, Данные, Алгоритмы, ПараметрыПоказателя)
	
	ЗначениеПоказателя = 0;
	
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	РассчитанныеПоказатели = КонтекстВыполнения.РассчитанныеПоказатели;
	
	Для Каждого Алгоритм Из Алгоритмы Цикл
		
		ПараметрыПоказателя.ТипПоказателя = Алгоритм.ТипПоказателя;
		ПараметрыПоказателя.КодГода = ПолучитьКодГода(Алгоритм, ПараметрыПоказателя);
		КодГода = ПараметрыПоказателя.КодГода;
		
		Если ЗначениеЗаполнено(Алгоритм.КодГрафы) Тогда
			КодГрафы = Алгоритм.КодГрафы;
			ГрафаНаименование = ЗаполнитьПараметризируемыеНаименования(Алгоритм.ГрафаНаименование, КонтекстВыполнения);
		Иначе
			КодГрафы = ПараметрыПоказателя.РегулярнаяГрафа.Ключ;
			Для Каждого РегулярнаяГрафа Из ПараметрыПоказателя.РегулярнаяГрафа.Значение Цикл
				ГрафаНаименование = РегулярнаяГрафа.Ключ; 
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПоказателя.КодСтрокиПрошлогоПериода <> "" Тогда
			ИмяОбластиПоказателя = Алгоритм.КодЯчейкиПрошлогоПериода + КодГрафы;
		Иначе
			ИмяОбластиПоказателя = Алгоритм.КодЯчейки + КодГрафы;
		КонецЕсли;
		
		Если ПараметрыПоказателя.НомерДопСтроки <> 0 Тогда
			ИмяОбластиПоказателя = ИмяОбластиПоказателя + "_" + ПараметрыПоказателя.НомерДопСтроки;
		КонецЕсли;
		
		ПараметрыПоказателя.КодГрафы = КодГрафы;
		ПараметрыПоказателя.ИмяОбластиПоказателя = ИмяОбластиПоказателя;
		
		ПараметрыПоказателя.ДопАлгоритмГрафы = Алгоритм.ДопАлгоритмГрафы;
		Если ПараметрыПоказателя.НаименованиеСтроки = "" Тогда
			ПараметрыПоказателя.НаименованиеСтроки = Алгоритм.СтрокаНаименованиеРасшифровки;
		КонецЕсли;
		
		Если НЕ КонтекстВыполнения.ЭтоГодовойОтчет
			И КодГода < 0
			И НЕ (КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР
				ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС
				ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС) Тогда
			ПараметрыПоказателя.НачалоПериода = НачалоГода(ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
			ПараметрыПоказателя.КонецПериода = КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода));
		Иначе
			ПараметрыПоказателя.НачалоПериода = ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода);
			ПараметрыПоказателя.КонецПериода = КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода));
		КонецЕсли;
		
		//Проверка заполняется ли показатель через типовой механизм
		Если ПоказательЗаполняетсяСтандартно(ПараметрыПоказателя.ДопАлгоритмСтроки) Тогда
			
			ТаблицаСчетов = Алгоритм.Счета;
			ТаблицаКорСчетов = Алгоритм.КорСчета;
			Группировки = Алгоритм.Группировки;
			
			ТаблицаСчетов.Сортировать("СчетКод Возр");
			ТаблицаКорСчетов.Сортировать("СчетКод Возр");
			
			Счета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСчетов.ВыгрузитьКолонку("Счет"));
			КорСчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаКорСчетов.ВыгрузитьКолонку("Счет"));
			
			ТекДанные = ДанныеДляРасчетаПоказателя(КонтекстВыполнения,
				Данные,
				Алгоритм,
				Счета,
				КорСчета,
				ПараметрыПоказателя);
				
			Если ТипЗнч(ТекДанные) = Тип("Структура") Тогда
				ТаблицаДанных = ТекДанные.ТаблицаДанных;
				ОтборПоАналитике = ТекДанные.ОтборПоАналитике;
			Иначе
				ТаблицаДанных = ТекДанные;
				ОтборПоАналитике = Неопределено;
			КонецЕсли;
			
			ЗначениеСлагаемого = ?(Алгоритм.Вычитаемый, -1, 1)
				* ВычислитьПоказательПоТипу(Алгоритм.ТипПоказателя,
											ТаблицаДанных, Счета,
											КорСчета,
											Группировки,
											ПараметрыПоказателя);
			ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСлагаемого;
			
			РасшифровкаЗаголовок = ЗаголовокРасшифровки(Алгоритм.СтрокаНаименованиеРасшифровки,
				ГрафаНаименование, ПараметрыПоказателя, КонтекстВыполнения);
				
			НастройкиРасшифровки = НастройкиРасшифровки(
				КонтекстВыполнения.Организация,
				ПараметрыПоказателя,
				Алгоритм.ТипПоказателя,
				Счета,
				КорСчета,
				ОтборПоАналитике);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				ИмяОбластиПоказателя,
				РасшифровкаЗаголовок,
				?(Алгоритм.Вычитаемый, "-", "+"),
				Алгоритм.АлгоритмНаименованиеРасшифровки,
				ЗначениеСлагаемого,
				КонтекстВыполнения.ИмяРаздела,
				НастройкиРасшифровки);

		Иначе
			ВычислитьПоказательСДопАлгоритмом(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПоказателя.ЗначениеПоказателя = ЗначениеПоказателя;

	ПрименитьДопАлгоритм(КонтекстВыполнения, ПараметрыПоказателя);
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели,
		КонтекстВыполнения.ИмяРаздела,
		ПараметрыПоказателя.ИмяОбластиПоказателя,
		ПараметрыПоказателя.ЗначениеПоказателя);
	
КонецПроцедуры

Процедура ОпределитьНомерДопСтроки(Строка, ПараметрыПоказателя, ПараметрыСтрок)
	
	СчетчикДопСтрок = ПараметрыСтрок.СчетчикДопСтрок;
	
	Если Не Строка.Регламентированная Тогда
		КодОсновнойСтроки = "П"+Строка.КодОсновнойСтроки;
		Если СчетчикДопСтрок.Свойство(КодОсновнойСтроки) Тогда
			СчетчикДопСтрок[КодОсновнойСтроки] = СчетчикДопСтрок[КодОсновнойСтроки] + 1;
		Иначе
			СчетчикДопСтрок.Вставить(КодОсновнойСтроки,1);
		КонецЕсли;
		ПараметрыПоказателя.НомерДопСтроки = СчетчикДопСтрок[КодОсновнойСтроки];
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРегулярныеГрафыФормыФормаОтчета2019Кв1(КонтекстВыполнения)
	
	ЗаполнятьПредыдущиеПериоды = КонтекстВыполнения.ЗаполнятьПредыдущиеПериоды;
	
	//Представление за период
	ЗаголовокШаблон = НСтр("ru = 'За %1';
							|en = 'За %1'");
	
	ЗаголовокПериод = СтрШаблон(ЗаголовокШаблон, ЗаполнениеБухгалтерскойОтчетности.ОписаниеПериода(
				КонтекстВыполнения.НачалоПериодаОтчета, КонтекстВыполнения.КонецПериодаОтчета));
				
	НачалоПериодПрошлыйГод = ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета,-1*12);
	НачалоПериодПредПрошлыйГод = ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета,-2*12);
	
	Если НЕ КонтекстВыполнения.ЭтоГодовойОтчет 
		И НЕ (КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР
			ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС
			ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС) Тогда
		ПериодПрошлыйГод = КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-1*12));
		ПериодПредПрошлыйГод = КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-2*12));
	Иначе 
		ПериодПрошлыйГод = КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-1*12));
		ПериодПредПрошлыйГод = КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-2*12));
	КонецЕсли;
	
	ЗаголовокПериодПрошлыйГод = СтрШаблон(ЗаголовокШаблон, ЗаполнениеБухгалтерскойОтчетности.ОписаниеПериода(
		НачалоПериодПрошлыйГод, ПериодПрошлыйГод));
	ЗаголовокПериодПредПрошлыйГод = СтрШаблон(ЗаголовокШаблон, ЗаполнениеБухгалтерскойОтчетности.ОписаниеПериода(
		НачалоПериодПредПрошлыйГод, ПериодПредПрошлыйГод));
	
	ТекущийГод = Новый Соответствие;
	ТекущийГод.Вставить(ЗаголовокПериод, 0);
	
	ПрошлыйГод = Новый Соответствие;
	ПрошлыйГод.Вставить(ЗаголовокПериодПрошлыйГод, -1);
	
	ПредПрошлыйГод =  Новый Соответствие;
	ПредПрошлыйГод.Вставить(ЗаголовокПериодПредПрошлыйГод, -2);
	
	//Представление на дату
	ЗаголовокШаблон = НСтр("ru = 'На %1 г.';
							|en = 'На %1 г.'");
	
	ЗаголовокНаКонецТекПериода = СтрШаблон(ЗаголовокШаблон, Формат(КонтекстВыполнения.КонецПериодаОтчета, "ДФ = 'дд ММММ гггг'"));
	ЗаголовокКонецПериодаСравнения = СтрШаблон(ЗаголовокШаблон, Формат(ПериодПрошлыйГод, "ДФ = 'дд ММММ гггг'"));
	ЗаголовокНаНачалоПериодаСравнения = СтрШаблон(ЗаголовокШаблон, Формат(ПериодПредПрошлыйГод, "ДФ = 'дд ММММ гггг'"));
				
	КонецТекПериода = Новый Соответствие;
	КонецТекПериода.Вставить(ЗаголовокНаКонецТекПериода, 0);
	КонецТекПериода.Вставить("КлючДанных", КонтекстВыполнения.КонецПериодаОтчета);
	
	КонецПериодаСравнения = Новый Соответствие;
	КонецПериодаСравнения.Вставить(ЗаголовокКонецПериодаСравнения, -1);
	КонецПериодаСравнения.Вставить("КлючДанных", ПериодПрошлыйГод);
	
	НачалоПериодаСравнения =  Новый Соответствие;
	НачалоПериодаСравнения.Вставить(ЗаголовокНаНачалоПериодаСравнения, -2);
	НачалоПериодаСравнения.Вставить("КлючДанных", ПериодПредПрошлыйГод);
	
	//Представление за период краткое
	ЗаголовокШаблон = НСтр("ru = 'за %1 г.';
							|en = 'за %1 г.'");
	
	ЗаголовокТекПериод = СтрШаблон(ЗаголовокШаблон, Формат(КонтекстВыполнения.КонецПериодаОтчета, "ДФ=yyyy"));
	ЗаголовокПериодСравнения = СтрШаблон(ЗаголовокШаблон, Формат(ПериодПрошлыйГод, "ДФ=yyyy"));
				
	ТекПериод = Новый Соответствие;
	ТекПериод.Вставить(ЗаголовокТекПериод, 0);
	
	ПериодСравнения = Новый Соответствие;
	ПериодСравнения.Вставить(ЗаголовокПериодСравнения, -1);
	
	РегулярныеГрафы = Новый Соответствие; //Ключ - код графы, значение - соответствие: заголовок, код года
	
	Если КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс Тогда  
		РегулярныеГрафы.Вставить("04", КонецТекПериода);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("05", КонецПериодаСравнения);
			РегулярныеГрафы.Вставить("06", НачалоПериодаСравнения);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР Тогда
		РегулярныеГрафы.Вставить("04", ТекущийГод);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("05", ПрошлыйГод);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС Тогда
		РегулярныеГрафы.Вставить("03", ТекущийГод);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("04", ПрошлыйГод);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС Тогда
		РегулярныеГрафы.Вставить("04", ТекущийГод);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("05", ПрошлыйГод);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения6 Тогда
		РегулярныеГрафы.Вставить("03", ТекПериод);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("04", ПериодСравнения);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения8 Тогда
		РегулярныеГрафы.Вставить("03", КонецТекПериода);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("04", КонецПериодаСравнения);
			РегулярныеГрафы.Вставить("05", НачалоПериодаСравнения);
		КонецЕсли;
	КонецЕсли;
	
	КонтекстВыполнения.РегулярныеГрафы = РегулярныеГрафы;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеФормаОтчета2025Кв1

Функция ПараметрыЗаполненияОтчета2025Кв1()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("НачалоПериодаОтчета", '00010101');
	Параметры.Вставить("КонецПериодаОтчета", '00010101');
	Параметры.Вставить("КонтейнерРаздела", Неопределено);
	Параметры.Вставить("НастройкаЗаполненияБухОтчетности", Неопределено);
	Параметры.Вставить("ЭтоГодовойОтчет", Ложь);
	Параметры.Вставить("ЗаполнятьПредыдущиеПериоды", Ложь);
	Параметры.Вставить("ФормаОтчетности", Неопределено);
	Параметры.Вставить("ИмяРаздела", "");
	Параметры.Вставить("РегулярныеГрафы", Неопределено);
	Параметры.Вставить("Данные", Неопределено);
	Параметры.Вставить("РедакцияФормы", "");
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьПоказательПоАлгоритмамФормаОтчета2025Кв1(КонтекстВыполнения, Данные, Алгоритмы, ПараметрыПоказателя)
	
	ЗначениеПоказателя = 0;
	
	Для Каждого Алгоритм Из Алгоритмы Цикл
		
		ПараметрыПоказателя.ТипПоказателя = Алгоритм.ТипПоказателя;
		ПараметрыПоказателя.КодГода = ПолучитьКодГода(Алгоритм, ПараметрыПоказателя);
		
		Если ЗначениеЗаполнено(Алгоритм.КодГрафы) Тогда
			КодГрафы = Алгоритм.КодГрафы;
			ГрафаНаименование = ЗаполнитьПараметризируемыеНаименования(Алгоритм.ГрафаНаименование, КонтекстВыполнения);
		Иначе
			КодГрафы = ПараметрыПоказателя.РегулярнаяГрафа.Ключ;
			Для Каждого РегулярнаяГрафа Из ПараметрыПоказателя.РегулярнаяГрафа.Значение Цикл
				ГрафаНаименование = РегулярнаяГрафа.Ключ;
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыПоказателя.КодГрафы = КодГрафы;
		ПараметрыПоказателя.ГрафаНаименование = ГрафаНаименование;
		ПараметрыПоказателя.ИмяОбластиПоказателя = ОпределитьИмяОбластиПоказателя(ПараметрыПоказателя, КонтекстВыполнения);
		ПараметрыПоказателя.ДопАлгоритмГрафы = Алгоритм.ДопАлгоритмГрафы;
		ПараметрыПоказателя.НаименованиеСтроки = Алгоритм.СтрокаНаименование;
		ПараметрыПоказателя.НаименованиеСтрокиРасшифровки = Алгоритм.СтрокаНаименованиеРасшифровки;
		
		КодГода = ПараметрыПоказателя.КодГода;
		Если НЕ КонтекстВыполнения.ЭтоГодовойОтчет
			И КодГода < 0
			И (КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения9
				ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения10
				ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс)
			ИЛИ Алгоритм.ВыводитьДанныеНаКонецГода = Истина Тогда
			ПараметрыПоказателя.НачалоПериода = НачалоГода(ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
			ПараметрыПоказателя.КонецПериода = КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода));
		Иначе
			ПараметрыПоказателя.НачалоПериода = ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода);
			ПараметрыПоказателя.КонецПериода = КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода));
		КонецЕсли;
		
		//Проверка заполняется ли показатель через типовой механизм
		Если ПоказательЗаполняетсяСтандартно(ПараметрыПоказателя.ДопАлгоритмСтроки) Тогда
			
			ТаблицаСчетов = Алгоритм.Счета;
			ТаблицаКорСчетов = Алгоритм.КорСчета;
			Группировки = Алгоритм.Группировки;
			
			ТаблицаСчетов.Сортировать("СчетКод Возр");
			ТаблицаКорСчетов.Сортировать("СчетКод Возр");
			
			Счета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСчетов.ВыгрузитьКолонку("Счет"));
			КорСчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаКорСчетов.ВыгрузитьКолонку("Счет"));
			
			ТекДанные = ДанныеДляРасчетаПоказателя(КонтекстВыполнения,
				Данные,
				Алгоритм,
				Счета,
				КорСчета,
				ПараметрыПоказателя);
				
			Если ТипЗнч(ТекДанные) = Тип("Структура") Тогда
				ТаблицаДанных = ТекДанные.ТаблицаДанных;
				ОтборПоАналитике = ТекДанные.ОтборПоАналитике;
			Иначе
				ТаблицаДанных = ТекДанные;
				ОтборПоАналитике = Неопределено;
			КонецЕсли;
			
			ЗначениеСлагаемого = ?(Алгоритм.Вычитаемый, -1, 1)
				* ВычислитьПоказательПоТипу(Алгоритм.ТипПоказателя,
											ТаблицаДанных, Счета,
											КорСчета,
											Группировки,
											ПараметрыПоказателя);
			ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСлагаемого;
			
			НастройкиРасшифровки = НастройкиРасшифровки(
				КонтекстВыполнения.Организация,
				ПараметрыПоказателя,
				Алгоритм.ТипПоказателя,
				Счета,
				КорСчета,
				ОтборПоАналитике);
			
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ЗаголовокРасшифровки(Алгоритм.СтрокаНаименованиеРасшифровки,
				ГрафаНаименование, ПараметрыПоказателя, КонтекстВыполнения);
			ПараметрыСтрокиРасшифровки.ЗнакОперации = ?(Алгоритм.Вычитаемый, "-", "+");
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = Алгоритм.АлгоритмНаименованиеРасшифровки;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = НастройкиРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = КонтекстВыполнения.Организация;
			ПараметрыСтрокиРасшифровки.Сумма = ЗначениеСлагаемого;
			
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
		Иначе
			ВычислитьПоказательСДопАлгоритмом(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПоказателя.ЗначениеПоказателя = ЗначениеПоказателя;

	ПрименитьДопАлгоритм(КонтекстВыполнения, ПараметрыПоказателя);
	
	УстановитьЗначениеПоказателяФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя);
	
КонецПроцедуры

Процедура УстановитьЗначениеПоказателяФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя)
	
	Раздел = КонтекстВыполнения.КонтейнерРаздела;
	ФиксированнаяСтрокаОДДС = КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС
		И ПараметрыПоказателя.РегламентированнаяСтрока = Истина;
		
	// Заполняем фиксированные строки верхнего уровня
	Если ПараметрыПоказателя.УровеньСтроки = "0" Тогда
		Если Не ЗначениеЗаполнено(ПараметрыПоказателя.КодОсновнойСтроки)
			ИЛИ ФиксированнаяСтрокаОДДС Тогда
			УстановитьЗначениеФиксированногоПоказателя(Раздел, ПараметрыПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем показатели в многострочные части
	МногострочнаяЧастьСтроки = ПараметрыПоказателя.МногострочнаяЧастьСтроки;
	Если МногострочнаяЧастьСтроки <> Неопределено Тогда
		ЗаполняемаяСтрока = Неопределено;
		
		// Дополнительные строки фиксированных строк
		Если ПараметрыПоказателя.УровеньСтроки = "0" Тогда
			Если ЗначениеЗаполнено(ПараметрыПоказателя.КодОсновнойСтроки) И Не ФиксированнаяСтрокаОДДС Тогда
				ЗаполняемаяСтрока = СтрокаМногострочнойЧасти(МногострочнаяЧастьСтроки, ПараметрыПоказателя.НомерДопСтроки-1, ПараметрыПоказателя.УровеньСтроки);
				УстановитьЗначениеЯчейки(ЗаполняемаяСтрока, ПараметрыПоказателя);
				Если ПараметрыПоказателя.ОбновитьНаименованиеСтроки Тогда
					ОбновитьНаименованиеСтроки(ЗаполняемаяСтрока, ПараметрыПоказателя, КонтекстВыполнения);
					ПараметрыПоказателя.ОбновитьНаименованиеСтроки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		// Дополнительные строки вписываемых строк
		ИначеЕсли ПараметрыПоказателя.УровеньСтроки = "А" Тогда
			СтрокаДереваОсновнойСтроки = СтрокаМногострочнойЧасти(МногострочнаяЧастьСтроки, ПараметрыПоказателя.ИндексОсновнойСтроки, ПараметрыПоказателя.УровеньСтроки);
			ЗаполняемаяСтрока = СтрокаДереваОсновнойСтроки;
			Если ЗначениеЗаполнено(ПараметрыПоказателя.КодОсновнойСтроки) Тогда
				МногострочнаяЧастьДопСтроки = БухгалтерскаяОтчетностьБРО.НайтиМногострочнуюЧасть(СтрокаДереваОсновнойСтроки, ПараметрыПоказателя.КодОсновнойСтроки);
				ЗаполняемаяСтрока = СтрокаМногострочнойЧасти(МногострочнаяЧастьДопСтроки, ПараметрыПоказателя.НомерДопСтроки-1, ПараметрыПоказателя.УровеньСтроки);
			КонецЕсли;
			УстановитьЗначениеЯчейки(ЗаполняемаяСтрока, ПараметрыПоказателя);
			Если ПараметрыПоказателя.ОбновитьНаименованиеСтроки Тогда
				ОбновитьНаименованиеСтроки(ЗаполняемаяСтрока, ПараметрыПоказателя, КонтекстВыполнения);
				ПараметрыПоказателя.ОбновитьНаименованиеСтроки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРегулярныеГрафыФормыФормаОтчета2025Кв1(КонтекстВыполнения)
	
	ЗаполнятьПредыдущиеПериоды = КонтекстВыполнения.ЗаполнятьПредыдущиеПериоды;
	
	//Представление за период
	ЗаголовокШаблон = НСтр("ru = 'За %1';
							|en = 'За %1'");
	
	ЗаголовокПериод = СтрШаблон(ЗаголовокШаблон, ЗаполнениеБухгалтерскойОтчетности.ОписаниеПериода(
				КонтекстВыполнения.НачалоПериодаОтчета, КонтекстВыполнения.КонецПериодаОтчета));
				
	НачалоПериодПрошлыйГод = ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета,-1*12);
	НачалоПериодПредПрошлыйГод = ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета,-2*12);
	
	Если НЕ КонтекстВыполнения.ЭтоГодовойОтчет 
		И НЕ (КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР
			ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС
			ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС) Тогда
		ПериодПрошлыйГод = КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-1*12));
		ПериодПредПрошлыйГод = КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-2*12));
	Иначе 
		ПериодПрошлыйГод = КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-1*12));
		ПериодПредПрошлыйГод = КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-2*12));
	КонецЕсли;
	
	ЗаголовокПериодПрошлыйГод = СтрШаблон(ЗаголовокШаблон, ЗаполнениеБухгалтерскойОтчетности.ОписаниеПериода(
		НачалоПериодПрошлыйГод, ПериодПрошлыйГод));
	ЗаголовокПериодПредПрошлыйГод = СтрШаблон(ЗаголовокШаблон, ЗаполнениеБухгалтерскойОтчетности.ОписаниеПериода(
		НачалоПериодПредПрошлыйГод, ПериодПредПрошлыйГод));
	
	ТекущийГод = Новый Соответствие;
	ТекущийГод.Вставить(ЗаголовокПериод, 0);
	
	ПрошлыйГод = Новый Соответствие;
	ПрошлыйГод.Вставить(ЗаголовокПериодПрошлыйГод, -1);
	
	ПредПрошлыйГод =  Новый Соответствие;
	ПредПрошлыйГод.Вставить(ЗаголовокПериодПредПрошлыйГод, -2);
	
	//Представление на дату
	ЗаголовокШаблон = НСтр("ru = 'На %1 г.';
							|en = 'На %1 г.'");
	
	ЗаголовокНаКонецТекПериода = СтрШаблон(ЗаголовокШаблон, Формат(КонтекстВыполнения.КонецПериодаОтчета, "ДФ = 'дд ММММ гггг'"));
	ЗаголовокКонецПериодаСравнения = СтрШаблон(ЗаголовокШаблон, Формат(ПериодПрошлыйГод, "ДФ = 'дд ММММ гггг'"));
	ЗаголовокНаНачалоПериодаСравнения = СтрШаблон(ЗаголовокШаблон, Формат(ПериодПредПрошлыйГод, "ДФ = 'дд ММММ гггг'"));
				
	КонецТекПериода = Новый Соответствие;
	КонецТекПериода.Вставить(ЗаголовокНаКонецТекПериода, 0);
	КонецТекПериода.Вставить("КлючДанных", КонтекстВыполнения.КонецПериодаОтчета);
	
	КонецПериодаСравнения = Новый Соответствие;
	КонецПериодаСравнения.Вставить(ЗаголовокКонецПериодаСравнения, -1);
	КонецПериодаСравнения.Вставить("КлючДанных", ПериодПрошлыйГод);
	
	НачалоПериодаСравнения =  Новый Соответствие;
	НачалоПериодаСравнения.Вставить(ЗаголовокНаНачалоПериодаСравнения, -2);
	НачалоПериодаСравнения.Вставить("КлючДанных", ПериодПредПрошлыйГод);
	
	//Представление за период краткое
	ЗаголовокШаблон = НСтр("ru = 'за %1 г.';
							|en = 'за %1 г.'");
	
	ЗаголовокТекПериод = СтрШаблон(ЗаголовокШаблон, Формат(КонтекстВыполнения.КонецПериодаОтчета, "ДФ=yyyy"));
	ЗаголовокПериодСравнения = СтрШаблон(ЗаголовокШаблон, Формат(ПериодПрошлыйГод, "ДФ=yyyy"));
				
	ТекПериод = Новый Соответствие;
	ТекПериод.Вставить(ЗаголовокТекПериод, 0);
	
	ПериодСравнения = Новый Соответствие;
	ПериодСравнения.Вставить(ЗаголовокПериодСравнения, -1);
	
	РегулярныеГрафы = Новый Соответствие; //Ключ - код графы, значение - соответствие: заголовок, код года
	
	Если КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс Тогда  
		РегулярныеГрафы.Вставить("04", КонецТекПериода);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("05", КонецПериодаСравнения);
			РегулярныеГрафы.Вставить("06", НачалоПериодаСравнения);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР Тогда
		РегулярныеГрафы.Вставить("04", ТекущийГод);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("05", ПрошлыйГод);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС Тогда
		РегулярныеГрафы.Вставить("04", ТекущийГод);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("05", ПрошлыйГод);
		КонецЕсли;
		ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС Тогда
		РегулярныеГрафы.Вставить("04", ТекущийГод);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("05", ПрошлыйГод);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения9 Тогда
		РегулярныеГрафы.Вставить("02", КонецТекПериода);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("03", КонецПериодаСравнения);
			РегулярныеГрафы.Вставить("04", НачалоПериодаСравнения);
		КонецЕсли;
	ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения10 Тогда
		РегулярныеГрафы.Вставить("02", ТекПериод);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			РегулярныеГрафы.Вставить("03", ПериодСравнения);
		КонецЕсли;
	КонецЕсли;
	
	КонтекстВыполнения.РегулярныеГрафы = РегулярныеГрафы;
	
КонецПроцедуры

Процедура ОпределитьНомераСтрокФормаОтчета2025Кв1(Строка, ПараметрыПоказателя, ПараметрыСтрок)
	
	СчетчикДопСтрок = ПараметрыСтрок.СчетчикДопСтрок;
	СчетчикДобавленныхОсновныхСтрок = ПараметрыСтрок.СчетчикОсновныхСтрок;
	ИндексыОсновныхСтрок = ПараметрыСтрок.ИндексыОсновныхСтрок;
	
	Если ЗначениеЗаполнено(Строка.КодОсновнойСтроки) Тогда
		КодОсновнойСтроки = "П"+Строка.КодОсновнойСтроки;
		Если СчетчикДопСтрок.Свойство(КодОсновнойСтроки) Тогда
			СчетчикДопСтрок[КодОсновнойСтроки] = СчетчикДопСтрок[КодОсновнойСтроки] + 1;
		Иначе
			СчетчикДопСтрок.Вставить(КодОсновнойСтроки,1);
		КонецЕсли;
		ПараметрыПоказателя.НомерДопСтроки = СчетчикДопСтрок[КодОсновнойСтроки];
		
		Если Строка.ОсновнаяСтрокаРегламентированная Тогда
			ПараметрыПоказателя.ИндексОсновнойСтроки = 0;
		КонецЕсли;
	Иначе
		ИндексСтроки = 0;
		Если Не Строка.Регламентированная Тогда
			КодСтроки = "П"+Строка.КодСтроки;
			Если СчетчикДобавленныхОсновныхСтрок.Свойство(КодСтроки) Тогда
				СчетчикДобавленныхОсновныхСтрок[КодСтроки] = СчетчикДобавленныхОсновныхСтрок[КодСтроки] + 1;
			Иначе
				СчетчикДобавленныхОсновныхСтрок.Вставить(КодСтроки,0);
			КонецЕсли;
			ИндексСтроки = СчетчикДобавленныхОсновныхСтрок[КодСтроки];
		КонецЕсли;
		ПараметрыСтрок.ИндексыОсновныхСтрок.Вставить(Строка.Строка, ИндексСтроки);
		ПараметрыПоказателя.ИндексОсновнойСтроки = ИндексСтроки;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьРасшифровкуВстрокуДерева(СтрокаПоказателя, ПараметрыПоказателя)

	Если ПараметрыПоказателя.Расшифровка.Количество() <> 0 Тогда
		Для Каждого ПараметрыСтрокиРасшифровки Из ПараметрыПоказателя.Расшифровка Цикл
			СтрокаРасшифровки = СтрокаПоказателя.Строки.Добавить();
			СтрокаРасшифровки.Тип = "Расшифровка";
			СтрокаРасшифровки.Идентификатор = "";
			СтрокаРасшифровки.Данные = ПараметрыСтрокиРасшифровки;
		КонецЦикла;
		ПараметрыПоказателя.Расшифровка.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеАлгоритмы

Процедура ЗаполнитьПоказательПриростаУменьшения(КонтекстВыполнения, ПараметрыПоказателя);
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыПоказателя.КодСтроки = "5670" Тогда
		
		СтрокиРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", "П0001005670" + ПараметрыПоказателя.КодГрафы));
		
		Если ПараметрыПоказателя.ЗначениеПоказателя > 0 Тогда
			ПараметрыПоказателя.НаименованиеСтроки = СтрЗаменить(ПараметрыПоказателя.НаименованиеСтроки, "()", НСтр("ru = '(прирост [-])';
																													|en = '(growth [-])'"));
		Иначе
			ПараметрыПоказателя.ИмяОбластиПоказателя = СтрЗаменить(ПараметрыПоказателя.ИмяОбластиПоказателя, "5670", "5680");
			ПараметрыПоказателя.НаименованиеСтроки = СтрЗаменить(ПараметрыПоказателя.НаименованиеСтроки, "()", НСтр("ru = '(уменьшение [+)';
																													|en = '(reduction [+)'"));
			ПараметрыПоказателя.НаименованиеСтроки = СтрЗаменить(ПараметрыПоказателя.НаименованиеСтроки, "5670", "5680");
			Для Каждого Строка Из СтрокиРасшифровки Цикл 
				Строка.ИмяПоказателя = СтрЗаменить(Строка.ИмяПоказателя, "5670", "5680");
			КонецЦикла;
		КонецЕсли;
		Для Каждого Строка Из СтрокиРасшифровки Цикл 
				Строка.НаименованиеПоказателя = ПараметрыПоказателя.НаименованиеСтроки; 
		КонецЦикла;
		ПараметрыПоказателя.ЗначениеПоказателя = -ПараметрыПоказателя.ЗначениеПоказателя;
	Иначе
		Сообщение = НСтр("ru = 'Для строки %1 не поддерживается дополнительный алгоритм.';
						|en = 'Additional algorithm is not available for the %1 line.'"); 
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(Сообщение, ПараметрыПоказателя.КодСтроки));
	КонецЕсли;
		
КонецПроцедуры

Функция ДопАлгоритмОтбораПоДокументам(ДопАлгоритм)
	
	Если ДопАлгоритм = "МодернизацияОС" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область ДополнительныеАлгоритмыПояснения1

Процедура ЗаполнитьКоличествоНМАССальдо04_05(КонтекстВыполнения, ПараметрыПоказателя)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	Организация = КонтекстВыполнения.Организация;
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	РассчитанныеПоказатели = КонтекстВыполнения.РассчитанныеПоказатели;
	
	КодСтроки = ПараметрыПоказателя.КодСтроки;
	
	ИмяГруппы = "ДопСтрока" + КодСтроки;
	
	МногострочнаяЧасть = НоваяТаблицаМногострочнойЧасти(КодСтроки);
	
	ГрафыКЗаполнению = Новый Соответствие;
	ГрафыКЗаполнению.Вставить("03", КонтекстВыполнения.КонецПериодаОтчета);
	ГрафыКЗаполнению.Вставить("04", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12)));
	ГрафыКЗаполнению.Вставить("05", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 24)));
	
	Для Каждого Графа Из ГрафыКЗаполнению Цикл
		
		ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", Организация);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОстатки.Субконто1 КАК НМА,
		               |	СУММА(ВЫБОР
		               |			КОГДА ХозрасчетныйОстатки.Счет В (&Счет_04_01)
		               |				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК СКД_04,
		               |	СУММА(ВЫБОР
		               |			КОГДА ХозрасчетныйОстатки.Счет В (&Счет_05)
		               |				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК СКК_05
		               |ПОМЕСТИТЬ ВТ_СальдоПоНМА
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
		               |			&КонецПериода,
		               |			Счет В (&Счет_04_01)
		               |				ИЛИ Счет В (&Счет_05),
		               |			&СубконтоНематериальныеАктивы,
		               |			Организация = &Организация) КАК ХозрасчетныйОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ХозрасчетныйОстатки.Субконто1
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫРАЗИТЬ(ВТ_СальдоПоНМА.НМА КАК Справочник.НематериальныеАктивы).ВидНМА КАК ВидАктива,
		               |	1 КАК Количество
		               |ИЗ
		               |	ВТ_СальдоПоНМА КАК ВТ_СальдоПоНМА
		               |ГДЕ
		               |	ВТ_СальдоПоНМА.СКД_04 - ВТ_СальдоПоНМА.СКК_05 <= 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВидАктива
		               |ИТОГИ
		               |	СУММА(Количество)
		               |ПО
		               |	ОБЩИЕ,
		               |	ВидАктива";
		
		Запрос.УстановитьПараметр("Организация",  Организация);
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Графа.Значение, ВидГраницы.Включая));
		
		Запрос.УстановитьПараметр("Счет_04_01", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("04.01")));
		Запрос.УстановитьПараметр("Счет_05",    БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("05")));
		
		Запрос.УстановитьПараметр("СубконтоНематериальныеАктивы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
		
		КоличествоНМАСПолностьюПогашеннойСтоимостью = 0;
		
		ОбщийИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ОбщийИтог.Следующий() Тогда
			КоличествоНМАСПолностьюПогашеннойСтоимостью = ОбщийИтог.Количество;
			
			ВыборкаПоВидамНМА = ОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВидамНМА.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаПоВидамНМА.ВидАктива) Тогда
					СтрокаМногострочнаяЧасть = МногострочнаяЧасть.Добавить();
					СтрокаМногострочнаяЧасть["П100100" + КодСтроки + "01"] = ВыборкаПоВидамНМА.ВидАктива;
					СтрокаМногострочнаяЧасть["П100100" + КодСтроки + Графа.Ключ] = ВыборкаПоВидамНМА.Количество;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
				
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа.Ключ, КоличествоНМАСПолностьюПогашеннойСтоимостью);
		
		ШаблонНаименованиеСтрокиРасшифровки = НСтр("ru = 'Строка %1 """"Всего"""", графа ""На %2 г.""';
													|en = 'Line %1 """"Total"""", column ""For %2""'");
		НаименованиеСтрокиРасшифровки = СтрШаблон(ШаблонНаименованиеСтрокиРасшифровки, КодСтроки, Формат(Графа.Значение, "ДФ = 'дд ММММ гггг'"));

		НаименованиеСлагаемого = НСтр("ru = 'Количество объектов, для которых сальдо на конец периода по дебету счета 04.01 меньше или равно сальдо на конец периода по кредиту счета 05';
										|en = 'Number of objects for which closing balance of the debit of account 04.01 is less than or equal to the closing balance of the credit of account 05'");
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
			"П000100" + КодСтроки + Графа, 
			НаименованиеСтрокиРасшифровки,
			"+", 
			НаименованиеСлагаемого,
			КоличествоНМАСПолностьюПогашеннойСтоимостью,
			ИмяРаздела,
			ДополнительныеПараметрыРасшифровки);
		
	КонецЦикла;
	
	Если НЕ КонтекстВыполнения.МногострочныеПоказатели.Свойство(ИмяРаздела) Тогда
		КонтекстВыполнения.МногострочныеПоказатели.Вставить(ИмяРаздела, Новый Структура);
	КонецЕсли;
	
	КонтекстВыполнения.МногострочныеПоказатели[ИмяРаздела].Вставить(ИмяГруппы, МногострочнаяЧасть);

КонецПроцедуры

Процедура ЗаполнитьПоказателиСПервоначальнойСтоимостьюНМА(КонтекстВыполнения, ПараметрыПоказателя)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	Организация = КонтекстВыполнения.Организация;
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	РассчитанныеПоказатели = КонтекстВыполнения.РассчитанныеПоказатели;
	
	КодСтроки = ?(ПараметрыПоказателя.КодСтрокиПрошлогоПериода<>"", ПараметрыПоказателя.КодСтрокиПрошлогоПериода, ПараметрыПоказателя.КодСтроки);
	
	ИмяГруппы = "ДопСтрока5140";
	Если Не КонтекстВыполнения.МногострочныеПоказатели.Свойство(ИмяРаздела) Тогда
		КонтекстВыполнения.МногострочныеПоказатели.Вставить(ИмяРаздела, Новый Структура);
	КонецЕсли;
	
	Если Не КонтекстВыполнения.МногострочныеПоказатели[ИмяРаздела].Свойство(ИмяГруппы) Тогда
		МногострочнаяЧасть = НоваяТаблицаМногострочнойЧасти("5140"); 
	Иначе 
		МногострочнаяЧасть = КонтекстВыполнения.МногострочныеПоказатели[ИмяРаздела][ИмяГруппы];
	КонецЕсли;
	
	КорректировкаПериода = ?(ПараметрыПоказателя.ПрошлыйПериод, -12, 0); 
	
	ДатаНачалаПериодаОтчета = ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, КорректировкаПериода);
	ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, КорректировкаПериода));
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("Организация",   КонтекстВыполнения.Организация);
	ПараметрыРасшифровки.Вставить("НачалоПериода", ДатаНачалаПериодаОтчета);
	ПараметрыРасшифровки.Вставить("КонецПериода",  ДатаКонцаПериодаОтчета);
	
	КонтекстВыполнения.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходыНаНИОКР.Организация,
	               |	РасходыНаНИОКР.НИОКР,
	               |	СУММА(РасходыНаНИОКР.СНД_04_02) КАК СНД_04_02,
	               |	СУММА(РасходыНаНИОКР.КО_04_02) КАК КО_04_02,
	               |	СУММА(РасходыНаНИОКР.СКД_04_02) КАК СКД_04_02,
	               |	СУММА(РасходыНаНИОКР.ОБ_04_02__08_08) КАК ОБ_04_02__08_08,
	               |	СУММА(РасходыНаНИОКР.ОБ_91_02__04_02) КАК ОБ_91_02__04_02
	               |ПОМЕСТИТЬ ВТ_РасходыНаНИОКР
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
	               |		ХозрасчетныйОстаткиИОбороты.Субконто1 КАК НИОКР,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД_04_02,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО_04_02,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД_04_02,
	               |		0 КАК ОБ_04_02__08_08,
	               |		0 КАК ОБ_91_02__04_02
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачПериода, &КонПериода, Период, Движения, Счет = &Счет_04_02, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОборотыДтКт.Организация,
	               |		ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |		0,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_04_02, &СубконтоНМА, СчетКт = &Счет_08_08, , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОборотыДтКт.Организация,
	               |		ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		ХозрасчетныйОборотыДтКт.СуммаОборот
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт = &Счет_91_02, , СчетКт = &Счет_04_02, &СубконтоНМА, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК РасходыНаНИОКР
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасходыНаНИОКР.НИОКР,
	               |	РасходыНаНИОКР.Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РасходыНаНИОКР.НИОКР КАК РасходыНаНИОКР,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.СНД_04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы04,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.СНД_04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0) - ВТ_РасходыНаНИОКР.СНД_04_02
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы05,
	               |	ВТ_РасходыНаНИОКР.ОБ_04_02__08_08 КАК ЗначениеГрафы06,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы07,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0) - ВТ_РасходыНаНИОКР.ОБ_91_02__04_02
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы08,
	               |	ВТ_РасходыНаНИОКР.КО_04_02 - ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ + ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0) - ВТ_РасходыНаНИОКР.ОБ_91_02__04_02
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы09,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.СКД_04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы10,
	               |	ВЫБОР
	               |		КОГДА ВТ_РасходыНаНИОКР.СКД_04_02 <> 0
	               |			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0) - ВТ_РасходыНаНИОКР.СКД_04_02
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеГрафы11,
	               |	ВТ_РасходыНаНИОКР.СНД_04_02 КАК СНД_04_02,
	               |	ВТ_РасходыНаНИОКР.ОБ_04_02__08_08 КАК ОБ_04_02__08_08,
	               |	ВТ_РасходыНаНИОКР.ОБ_91_02__04_02 КАК ОБ_91_02__04_02,
	               |	ВТ_РасходыНаНИОКР.КО_04_02 КАК КО_04_02,
	               |	ВТ_РасходыНаНИОКР.СКД_04_02 КАК СКД_04_02
	               |ИЗ
	               |	ВТ_РасходыНаНИОКР КАК ВТ_РасходыНаНИОКР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
	               |		ПО ВТ_РасходыНаНИОКР.НИОКР = ПервоначальныеСведенияНМА.НематериальныйАктив
	               |			И ВТ_РасходыНаНИОКР.Организация = ПервоначальныеСведенияНМА.Организация
	               |ИТОГИ
	               |	СУММА(ЗначениеГрафы04),
	               |	СУММА(ЗначениеГрафы05),
	               |	СУММА(ЗначениеГрафы06),
	               |	СУММА(ЗначениеГрафы07),
	               |	СУММА(ЗначениеГрафы08),
	               |	СУММА(ЗначениеГрафы09),
	               |	СУММА(ЗначениеГрафы10),
	               |	СУММА(ЗначениеГрафы11),
	               |	СУММА(СНД_04_02),
	               |	СУММА(ОБ_04_02__08_08),
	               |	СУММА(ОБ_91_02__04_02),
	               |	СУММА(КО_04_02),
	               |	СУММА(СКД_04_02)
	               |ПО
	               |	ОБЩИЕ";
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонПериода",	ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет_04_02",  Счет("04.02"));
	Запрос.УстановитьПараметр("Счет_08_08",  Счет("08.08"));
	Запрос.УстановитьПараметр("Счет_91_02",  Счет("91.02"));
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);

	ВыборкаИтогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаИтогов.Следующий() Тогда
		
		Графа = "04";
		ЗначениеГрафы04 = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		ЗначениеПоказателя = ЗначениеГрафы04;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, ЗначениеПоказателя);
		
		НаименованиеСтрокиРасшифровки = СтрШаблон(НСтр("ru = 'Строка %1 """"НИОКР - всего"""",  графа ""Первоначальная стоимость на начало года""';
														|en = 'Line %1 """"R&D - total"""", column ""Initial cost as of the beginning of the year""'"),
			КодСтроки);
		НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Первоначальная стоимость расходов на НИОКР, по которым на начало периода имеется остаток на счете %1';
													|en = 'Initial cost of R&D expenses which have an opening balance on %1 account as of the period start'"),
			Счет("04.02").Код);
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеГрафы04, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		
		Графа = "05";
		СНД_04_02 = ВыборкаИтогов.СНД_04_02;
		ЗначениеПоказателя = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Часть стоимости, списанной на расходы на начало года""", "+", НаименованиеСоставляющей, ЗначениеГрафы04, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "", "-", "!СНД " + Счет("04.02").Код, -СНД_04_02, ИмяРаздела, НастройкиОСВПоСчету(КонтекстВыполнения, "04.02"));
		
		Графа = "06";
		ОБ_04_02__08_08 = ВыборкаИтогов.ОБ_04_02__08_08;
		ЗначениеПоказателя = ОБ_04_02__08_08;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, ЗначениеПоказателя);
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Изменения за период - поступило""", "+", "!ОБ " + Счет("04.02").Код + " " + Счет("08.08").Код, ОБ_04_02__08_08, ИмяРаздела, НастройкиАнализаСчета(КонтекстВыполнения, "04.02", "08.08"));
		
		Графа = "07";
		ЗначениеГрафы07 = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		ЗначениеПоказателя = ЗначениеГрафы07;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		НаименованиеСоставляющей = "Первоначальная стоимость расходов на НИОКР, по которым в течении периода имеются проводки с дебета счета " + Счет("91.02").Код + " в кредит счета " + Счет("04.02").Код;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Изменения за период - выбыло - первоначальная стоимость""", "+", НаименованиеСоставляющей, ЗначениеГрафы07, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		
		Графа = "08";
		ОБ_91_02__04_02 = ВыборкаИтогов.ОБ_91_02__04_02;
		ЗначениеПоказателя = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, ЗначениеПоказателя);
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Изменения за период - выбыло - часть стоимости, списанной на расходы""", "+", НаименованиеСоставляющей, ЗначениеГрафы07, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "", "-", "!ОБ " +  Счет("91.02").Код + " " + Счет("04.02").Код, -ОБ_91_02__04_02, ИмяРаздела, НастройкиАнализаСчета(КонтекстВыполнения, "91.02", "04.02"));
		
		Графа = "09";
		КО_04_02 = ВыборкаИтогов.КО_04_02;
		ЗначениеПоказателя = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Изменения за период - часть стоимости, списанная на расходы за период""", "+", "!КО " + Счет("04.02").Код, КО_04_02, ИмяРаздела, НастройкиОСВПоСчету(КонтекстВыполнения, "04.02"));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "", "-", "!ОБ " + Счет("91.02").Код + " " + Счет("04.02").Код, -ОБ_91_02__04_02, ИмяРаздела, НастройкиАнализаСчета(КонтекстВыполнения, "91.02", "04.02"));
		
		Графа = "10";
		ЗначениеГрафы10 = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		ЗначениеПоказателя = ЗначениеГрафы10;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, ЗначениеПоказателя);
		
		НаименованиеСоставляющей = "Первоначальная стоимость расходов на НИОКР, по которым на конец периода имеется остаток на счете " + Счет("04.02").Код;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Первоначальная стоимость на конец периода""", "+", НаименованиеСоставляющей, ЗначениеГрафы10, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		
		Графа = "11";
		СКД_04_02 = ВыборкаИтогов.СКД_04_02;
		ЗначениеПоказателя = ВыборкаИтогов["ЗначениеГрафы" + Графа];
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, -ЗначениеПоказателя);  // вычитаемый
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Первоначальная стоимость на конец периода""", "+", НаименованиеСоставляющей, ЗначениеГрафы10, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "", "-", "!СКД " + Счет("04.02").Код, -СКД_04_02, ИмяРаздела, НастройкиОСВПоСчету(КонтекстВыполнения, "04.02"));
		
		Выборка = ВыборкаИтогов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаМногострочнойЧасти = МногострочнаяЧасть.Добавить();
			СтрокаМногострочнойЧасти["П100100"+ ПараметрыПоказателя.КодСтроки + "01"] = Выборка.РасходыНаНИОКР;
			
			Графа = "04";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаМногострочнойЧасти["П100100"+ КодСтроки + Графа] = ЗначениеПоказателя;
			 
			Графа = "05";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаМногострочнойЧасти["П100100"+ КодСтроки + Графа] = -ЗначениеПоказателя; // вычитаемый
			
			Графа = "06";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаМногострочнойЧасти["П100100"+ КодСтроки + Графа] = ЗначениеПоказателя;
			
			Графа = "07";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаМногострочнойЧасти["П100100"+ КодСтроки + Графа] = -ЗначениеПоказателя; // вычитаемый
			
			Графа = "08";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаМногострочнойЧасти["П100100"+ КодСтроки + Графа] = ЗначениеПоказателя;
			
			Графа = "09";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаМногострочнойЧасти["П100100"+ КодСтроки + Графа] = -ЗначениеПоказателя; // вычитаемый
			
			Графа = "10";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаМногострочнойЧасти["П100100"+ КодСтроки + Графа] = ЗначениеПоказателя;
			
			Графа = "11";
			ЗначениеПоказателя = Выборка["ЗначениеГрафы" + Графа];
			СтрокаМногострочнойЧасти["П100100"+ КодСтроки + Графа] = -ЗначениеПоказателя; // вычитаемый
		КонецЦикла;
		
	Иначе
		
		Графа = "04";
		ЗначениеГрафы04 = 0;
		ЗначениеПоказателя = ЗначениеГрафы04;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, ЗначениеПоказателя);
		
		НаименованиеСоставляющей = "Первоначальная стоимость расходов на НИОКР, по которым на начало периода имеется остаток на счете " + Счет("04.02").Код;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Первоначальная стоимость на начало года""", "+", НаименованиеСоставляющей, ЗначениеГрафы04, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		
		Графа = "05";
		СНД_04_02 = 0;
		ЗначениеПоказателя = 0;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Часть стоимости, списанной на расходы на начало года""", "+", НаименованиеСоставляющей, ЗначениеГрафы04, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "", "-", "!СНД " + Счет("04.02").Код, -СНД_04_02, ИмяРаздела, НастройкиОСВПоСчету(КонтекстВыполнения, "04.02"));
		
		Графа = "06";
		ОБ_04_02__08_08 = 0;
		ЗначениеПоказателя = ОБ_04_02__08_08;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, ЗначениеПоказателя);
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Изменения за период - поступило""", "+", "!ОБ " + Счет("04.02").Код + " " + Счет("08.08").Код, ОБ_04_02__08_08, ИмяРаздела, НастройкиАнализаСчета(КонтекстВыполнения, "04.02", "08.08"));
		
		Графа = "07";
		ЗначениеГрафы07 = 0;
		ЗначениеПоказателя = ЗначениеГрафы07;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		НаименованиеСоставляющей = "Первоначальная стоимость расходов на НИОКР, по которым в течении периода имеются проводки с дебета счета " + Счет("91.02").Код + " в кредит счета " + Счет("04.02").Код;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Изменения за период - выбыло - первоначальная стоимость""", "+", НаименованиеСоставляющей, ЗначениеГрафы07, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		
		Графа = "08";
		ОБ_91_02__04_02 = 0;
		ЗначениеПоказателя = 0;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, ЗначениеПоказателя);
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Изменения за период - выбыло - часть стоимости, списанной на расходы""", "+", НаименованиеСоставляющей, ЗначениеГрафы07, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "", "-", "!ОБ " +  Счет("91.02").Код + " " + Счет("04.02").Код, -ОБ_91_02__04_02, ИмяРаздела, НастройкиАнализаСчета(КонтекстВыполнения, "91.02", "04.02"));
		
		Графа = "09";
		КО_04_02 = 0;
		ЗначениеПоказателя = 0;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Изменения за период - часть стоимости, списанная на расходы за период""", "+", "!КО " + Счет("04.02").Код, КО_04_02, ИмяРаздела, НастройкиОСВПоСчету(КонтекстВыполнения, "04.02"));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "", "-", "!ОБ " + Счет("91.02").Код + " " + Счет("04.02").Код, -ОБ_91_02__04_02, ИмяРаздела, НастройкиАнализаСчета(КонтекстВыполнения, "91.02", "04.02"));
		
		Графа = "10";
		ЗначениеГрафы10 = 0;
		ЗначениеПоказателя = ЗначениеГрафы10;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, ЗначениеПоказателя);
		
		НаименованиеСоставляющей = "Первоначальная стоимость расходов на НИОКР, по которым на конец периода имеется остаток на счете " + Счет("04.02").Код;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Первоначальная стоимость на конец периода""", "+", НаименованиеСоставляющей, ЗначениеГрафы10, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		
		Графа = "11";
		СКД_04_02 = 0;
		ЗначениеПоказателя = 0;
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, "П000100" + КодСтроки + Графа, -ЗначениеПоказателя); // вычитаемый
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "Строка " + КодСтроки + " ""НИОКР - всего"", графа ""Первоначальная стоимость на конец периода""", "+", НаименованиеСоставляющей, ЗначениеГрафы10, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000100" + КодСтроки + Графа, "", "-", "!СКД " + Счет("04.02").Код, -СКД_04_02, ИмяРаздела, НастройкиОСВПоСчету(КонтекстВыполнения, "04.02"));
		
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("ПараметрыРасшифровки");
		
	КонтекстВыполнения.МногострочныеПоказатели[ИмяРаздела].Вставить(ИмяГруппы, МногострочнаяЧасть);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеАлгоритмыОДДС

#Область РедакцияАлгоритмаДо2025г

Процедура ЗаполнитьПоказателиОДДС_АлгоритмДо2025(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		ЗаполнитьПоказателиОДДС_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
	Иначе
		ЗаполнитьПоказателиОДДС_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОДДС_НДС_АлгоритмДо2025(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		ЗаполнитьПоказателиОДДС_НДС_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
	Иначе
		ЗаполнитьПоказателиОДДС_НДС_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоказателиОДДС_НДС(КонтекстВыполнения, ПараметрыПоказателя)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		ДополнитьПоказателиОДДС_НДС_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя);
	Иначе
		ДополнитьПоказателиОДДС_НДС_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОДДС_Агентские_АлгоритмДо2025(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		ЗаполнитьПоказателиОДДС_Агентские_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
	Иначе
		ЗаполнитьПоказателиОДДС_Агентские_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоказателиОДДС_Агентские(КонтекстВыполнения, ПараметрыПоказателя)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		ДополнитьПоказателиОДДС_Агентские_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя);
	Иначе
		ДополнитьПоказателиОДДС_Агентские_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя);
	КонецЕсли;
	
КонецПроцедуры

#Область ФормаОтчета2019Кв1

Процедура ЗаполнитьПоказателиОДДС_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	
	КодГрафы = ПараметрыПоказателя.РегулярнаяГрафа.Ключ;
	
	ЗаголовокГрафы = "";
	КодГода = 0;
	Если ПараметрыПоказателя.РегулярнаяГрафа <> Неопределено Тогда
		Для Каждого РегулярнаяГрафа Из ПараметрыПоказателя.РегулярнаяГрафа.Значение Цикл
			ЗаголовокГрафы = РегулярнаяГрафа.Ключ;
			КодГода = РегулярнаяГрафа.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));

	СтруктураДДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураДДС;
	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого СтрокаСчет Из Алгоритм.Счета Цикл
		
		ИмяОбласти = Алгоритм.КодЯчейки + КодГрафы;
		
		ПараметрыПоказателя.ИмяОбластиПоказателя = ИмяОбласти;
		ПараметрыПоказателя.КодГрафы = КодГрафы;

		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС, СчетДДС", Алгоритм.ВидДвиженияДенежныхСредств, СтрокаСчет.Счет));
		ТекущееЗначениеПоказателя = 0;

		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = "Строка " + ПараметрыПоказателя.НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """"; 
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;
	
			Если Алгоритм.ТипПоказателя = "ДО" Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "КО" Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ИмяФункции = "НастраиваемаяБухгалтерскаяОтчетность.ВывестиСтрокуОДДС()";
				СообщениеОшибка = СтрШаблон(НСтр("ru = 'Неверно задана формула для функции %1.';
												|en = 'Неверно задана формула для функции %1.'"), ИмяФункции);
				ВызватьИсключение СообщениеОшибка;
			КонецЕсли;
			
			НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(Алгоритм.ВидДвиженияДенежныхСредств) + """/";
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			
			НастройкиРасшифровки = НастройкиОСВПоВидуДДС(ОбщиеПараметрыРасшифровки, ЭлементПоказателя.СчетДДС, ЭлементПоказателя.ВидДДС);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, НастройкиРасшифровки);
			
			// Отражение уменьшения на сумму НДС.
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						СлагаемоеНДС = 0;
						Если Алгоритм.ТипПоказателя = "ДО" Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
						ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
						КонецЕсли;
						
						Если СлагаемоеНДС < 0 Тогда
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						КонецЕсли;

					ИначеЕсли Алгоритм.ТипПоказателя = "ДО" И СтрокаНДС.ДО < 0 Тогда
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.ДО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части денежных потоков комиссионеров или агентов";
						ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.ДО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						КонецЕсли;

					ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый И СтрокаНДС.КО < 0 Тогда
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.КО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части денежных потоков комиссионеров или агентов";
						ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.КО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, 0, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			КонецЕсли	
		КонецЦикла;
		Вычитаемый = Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый;
		ЗначениеПоказателя = ЗначениеПоказателя + ?(Вычитаемый, -1,1)*ТекущееЗначениеПоказателя;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОДДС_НДС_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)

	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	
	КодГрафы = ПараметрыПоказателя.РегулярнаяГрафа.Ключ;
	
	ЗаголовокГрафы = "";
	КодГода = 0;
	Если ПараметрыПоказателя.РегулярнаяГрафа <> Неопределено Тогда
		Для Каждого РегулярнаяГрафа Из ПараметрыПоказателя.РегулярнаяГрафа.Значение Цикл
			ЗаголовокГрафы = РегулярнаяГрафа.Ключ;
			КодГода = РегулярнаяГрафа.Значение; 
		КонецЦикла;
	КонецЕсли;
	
	ВидДДСПолучения    = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности;
	ВидДДСПеречисления = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));
	
	СтруктураДДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураДДС;
	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	РасчетыПоНДС	   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].РасчетыПоНДС;
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого СтрокаСчет Из Алгоритм.Счета Цикл
		
		ИмяОбласти = Алгоритм.КодЯчейки + КодГрафы;
		
		ПараметрыПоказателя.ИмяОбластиПоказателя = ИмяОбласти;
		ПараметрыПоказателя.КодГрафы = КодГрафы;
		
		ТекущееЗначениеПоказателя = 0;

		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС, СчетДДС", Алгоритм.ВидДвиженияДенежныхСредств, СтрокаСчет.Счет));
		
		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = "Строка " + ПараметрыПоказателя.НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """"; 
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;
	
			Если Алгоритм.ТипПоказателя = "ДО" Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "КО" Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ИмяФункции = "НастраиваемаяБухгалтерскаяОтчетность.ВывестиСтрокуОДДС()";
				СообщениеОшибка = СтрШаблон(НСтр("ru = 'Неверно задана формула для функции %1.';
												|en = 'Неверно задана формула для функции %1.'"), ИмяФункции);
				ВызватьИсключение СообщениеОшибка;
			КонецЕсли;
			
			НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(Алгоритм.ВидДвиженияДенежныхСредств) + """/";
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			
			НастройкиРасшифровки = НастройкиОСВПоВидуДДС(ОбщиеПараметрыРасшифровки, ЭлементПоказателя.СчетДДС, ЭлементПоказателя.ВидДДС);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, НастройкиРасшифровки);
			
			// Отражение уменьшения на сумму НДС.
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						СлагаемоеНДС = 0;
						Если Алгоритм.ТипПоказателя = "ДО" Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
						ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
						КонецЕсли;
						
						Если СлагаемоеНДС < 0 Тогда
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						КонецЕсли;

					ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый И СтрокаНДС.КО < 0 Тогда
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.КО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части денежных потоков комиссионеров или агентов";
						ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.КО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, 0, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			КонецЕсли;
			
			// Отражение уменьшения на сумму расчетов по НДС.
			Если ЭлементПоказателя.СчетДДС = Счет("51") Тогда
				Если Алгоритм.ТипПоказателя = "ДО" И ЭлементПоказателя.ВидДДС = ВидДДСПолучения Тогда
					Слагаемое = -РасчетыПоНДС.ПолученныйНДС;
					НаименованиеСоставляющей = "Оборот с кредита счета 68.02 в дебет счета 51" + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """";
				ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый И ЭлементПоказателя.ВидДДС = ВидДДСПеречисления Тогда
					Слагаемое = -РасчетыПоНДС.ПеречисленныйНДС;
					НаименованиеСоставляющей = "Оборот с кредита счета 51 в дебет счета 68.02" + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """";
				КонецЕсли;
				ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
					"-", НаименованиеСоставляющей,
					Слагаемое, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначениеПоказателя = ЗначениеПоказателя + ТекущееЗначениеПоказателя;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПоказателиОДДС_НДС_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя)
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	
	КодГода = 0;
	Если ПараметрыПоказателя.РегулярнаяГрафа <> Неопределено Тогда
		Для Каждого РегулярнаяГрафа Из ПараметрыПоказателя.РегулярнаяГрафа.Значение Цикл
			КодГода = РегулярнаяГрафа.Значение;
			ЗаголовокГрафы = РегулярнаяГрафа.Ключ;
		КонецЦикла;
	КонецЕсли;
		
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));
	
	ВидДДСПолучения    = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности;
	ВидДДСПеречисления = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности;

	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	РасчетыПоНДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].РасчетыПоНДС;
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	РасчетыПоВалютноОбменнымОперациям  = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].РасчетыПоВалютноОбменнымОперациям;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ЗначениеПоказателя = ПараметрыПоказателя.ЗначениеПоказателя;
	ПолноеНаименованиеСтроки = "Строка " + ПараметрыПоказателя.НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	ИмяОбласти = ПараметрыПоказателя.ИмяОбластиПоказателя;

	Если ПараметрыПоказателя.КодСтроки = "4119" Тогда
		ФормулаРасчета = "ДО";
	Иначе
		ФормулаРасчета = "-КО";
	КонецЕсли;
		
	// Отражение свернутого НДС.
	НДСПоставщиков = СтруктураНДСвДДС.Итог("КО_НДС");
	НДСПокупателей = СтруктураНДСвДДС.Итог("ДО_НДС");
	
	СвернутыйНДС = НДСПокупателей - НДСПоставщиков - РасчетыПоНДС.ПеречисленныйНДС + РасчетыПоНДС.ПолученныйНДС;
	
	// Отражение свернутого показателя (выгоды или потери) от валютно-обменных операций
	ЕстьВалютоОбменныеОперации = РасчетыПоВалютноОбменнымОперациям.Количество() > 0;
	Если ЕстьВалютоОбменныеОперации Тогда
		ВалютоОбменДО               = РасчетыПоВалютноОбменнымОперациям.Итог("ВалютоОбменДО");
		ВалютоОбменКО               = РасчетыПоВалютноОбменнымОперациям.Итог("ВалютоОбменКО");
		ВалютоОбменПродажДельта     = РасчетыПоВалютноОбменнымОперациям.Итог("ВалютоОбменДельта");
		ВыгодаПотеряВалютногоОбмена = ВалютоОбменДО - ВалютоОбменКО - ВалютоОбменПродажДельта;
	КонецЕсли;
	
	Если ФормулаРасчета = "ДО" Тогда
		Если СвернутыйНДС > 0 Тогда
			// Превышение полученного НДС над перечисленным НДС.
			НаименованиеСоставляющей = НСтр("ru = 'Сумма НДС начисленного к уплате при расчетах с покупателями';
											|en = 'Сумма НДС начисленного к уплате при расчетах с покупателями'");
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
				"+", НаименованиеСоставляющей,
				НДСПокупателей, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			НаименованиеСоставляющей = НСтр("ru = 'Сумма НДС начисленного к возмещению при расчетах с поставщиками';
											|en = 'Сумма НДС начисленного к возмещению при расчетах с поставщиками'");
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
				"-", НаименованиеСоставляющей,
				-НДСПоставщиков, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Сумма НДС перечисленного в бюджет (Оборот с кредита счета 51 в дебет счета 68.02, по виду движения денежных средств %1)';
														|en = 'Сумма НДС перечисленного в бюджет (Оборот с кредита счета 51 в дебет счета 68.02, по виду движения денежных средств %1)'"),
				Строка(ВидДДСПеречисления));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
			"-", НаименованиеСоставляющей,
				-РасчетыПоНДС.ПеречисленныйНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Сумма НДС полученного из бюджета (Оборот с кредита счета 68.02 в дебет счета 51, по виду движения денежных средств %1)';
														|en = 'Сумма НДС полученного из бюджета (Оборот с кредита счета 68.02 в дебет счета 51, по виду движения денежных средств %1)'"),
				Строка(ВидДДСПолучения));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
				"+", НаименованиеСоставляющей,
				РасчетыПоНДС.ПолученныйНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			ЗначениеПоказателя = ЗначениеПоказателя + СвернутыйНДС;
			
		КонецЕсли;
		
		Если ЕстьВалютоОбменныеОперации Тогда
			Если ВыгодаПотеряВалютногоОбмена > 0 Тогда
				ЗначениеПоказателяУсловное = ЗначениеПоказателя - ВалютоОбменКО;
			Иначе
				ЗначениеПоказателяУсловное = ЗначениеПоказателя - ВалютоОбменДО;
			КонецЕсли;
			
			Если ЗначениеПоказателяУсловное >= 0 Тогда
				НаименованиеСоставляющей = НСтр("ru = 'Сумма прочих платежей по текущим операциям в части валютно-обменных операций';
												|en = 'Сумма прочих платежей по текущим операциям в части валютно-обменных операций'");
				Если ВыгодаПотеряВалютногоОбмена > 0 Тогда
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
						"-", НаименованиеСоставляющей,
						-ВалютоОбменКО, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
				Иначе
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
						"-", НаименованиеСоставляющей,
						-ВалютоОбменДО, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
				КонецЕсли;
				
				ЗначениеПоказателя = ЗначениеПоказателяУсловное;
				
			Иначе
				// Разница получилась отрицательной, она должна отразиться в строке 4129
				НаименованиеСоставляющей = НСтр("ru = 'Сумма прочих поступлений по текущим операциям в части валютно-обменных операций';
												|en = 'Сумма прочих поступлений по текущим операциям в части валютно-обменных операций'");
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
					"-", НаименованиеСоставляющей,
					-ЗначениеПоказателя, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
				
				ЗначениеПоказателя = 0;
				
				РасчетыПоВалютноОбменнымОперациям[0].ВалютоОбменДельта = ЗначениеПоказателяУсловное;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ФормулаРасчета = "-КО" Тогда
		Если СвернутыйНДС <= 0 Тогда
			// Превышение перечисленного НДС над полученным НДС.
			НаименованиеСоставляющей = НСтр("ru = 'Сумма НДС начисленного к уплате при расчетах с покупателями';
											|en = 'Сумма НДС начисленного к уплате при расчетах с покупателями'");
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
				"-", НаименованиеСоставляющей,
				-НДСПокупателей, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			НаименованиеСоставляющей = НСтр("ru = 'Сумма НДС начисленного к возмещению при расчетах с поставщиками';
											|en = 'Сумма НДС начисленного к возмещению при расчетах с поставщиками'");
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
				"+", НаименованиеСоставляющей,
				НДСПоставщиков, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Сумма НДС перечисленного в бюджет (Оборот с кредита счета 51 в дебет счета 68.02, по виду движения денежных средств %1)';
														|en = 'Сумма НДС перечисленного в бюджет (Оборот с кредита счета 51 в дебет счета 68.02, по виду движения денежных средств %1)'"),
				Строка(ВидДДСПеречисления));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
				"+", НаименованиеСоставляющей,
				РасчетыПоНДС.ПеречисленныйНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Сумма НДС полученного из бюджета (Оборот с кредита счета 68.02 в дебет счета 51, по виду движения денежных средств %1)';
														|en = 'Сумма НДС полученного из бюджета (Оборот с кредита счета 68.02 в дебет счета 51, по виду движения денежных средств %1)'"),
				Строка(ВидДДСПолучения));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
				"-", НаименованиеСоставляющей,
				-РасчетыПоНДС.ПолученныйНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			ЗначениеПоказателя = ЗначениеПоказателя - СвернутыйНДС;
			
		КонецЕсли;
		
		Если ЕстьВалютоОбменныеОперации Тогда
			Если ВыгодаПотеряВалютногоОбмена < 0 Тогда
				ЗначениеПоказателя = ЗначениеПоказателя - ВалютоОбменДО - ВалютоОбменПродажДельта;
				
				НаименованиеСоставляющей = НСтр("ru = 'Сумма прочих поступлений по текущим операциям в части валютно-обменных операций';
												|en = 'Сумма прочих поступлений по текущим операциям в части валютно-обменных операций'");
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
					"-", НаименованиеСоставляющей,
					-(ВалютоОбменДО + ВалютоОбменПродажДельта), ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			Иначе
				ЗначениеПоказателя = ЗначениеПоказателя - ВалютоОбменКО - ВалютоОбменПродажДельта;
				
				НаименованиеСоставляющей = НСтр("ru = 'Сумма прочих платежей по текущим операциям в части валютно-обменных операций';
												|en = 'Сумма прочих платежей по текущим операциям в части валютно-обменных операций'");
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки,
					"-", НаименованиеСоставляющей,
					-(ВалютоОбменКО + ВалютоОбменПродажДельта), ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Вычитаемый = ФормулаРасчета = "-КО";
	ПараметрыПоказателя.ЗначениеПоказателя = ?(Вычитаемый, -1, 1)*ЗначениеПоказателя; 
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОДДС_Агентские_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
		
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	
	КодГрафы = ПараметрыПоказателя.РегулярнаяГрафа.Ключ;
	
	ЗаголовокГрафы = "";
	КодГода = 0;
	Если ПараметрыПоказателя.РегулярнаяГрафа <> Неопределено Тогда
		Для Каждого РегулярнаяГрафа Из ПараметрыПоказателя.РегулярнаяГрафа.Значение Цикл
			ЗаголовокГрафы = РегулярнаяГрафа.Ключ;
			КодГода = РегулярнаяГрафа.Значение; 
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));

	СтруктураДДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураДДС;
	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого СтрокаСчет Из Алгоритм.Счета Цикл
		
		ИмяОбласти = Алгоритм.КодЯчейки + КодГрафы;
		
		ПараметрыПоказателя.ИмяОбластиПоказателя = ИмяОбласти;
		ПараметрыПоказателя.КодГрафы = КодГрафы;
		
		ТекущееЗначениеПоказателя = 0;

		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС, СчетДДС", Алгоритм.ВидДвиженияДенежныхСредств, СтрокаСчет.Счет));
		
		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = "Строка " + ПараметрыПоказателя.НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """"; 
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;

			Если Алгоритм.ТипПоказателя = "ДО" И НЕ Алгоритм.Вычитаемый Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "ДО" И Алгоритм.Вычитаемый Тогда
				Слагаемое = -ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "КО" И НЕ Алгоритм.Вычитаемый Тогда
				Слагаемое = -ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ИмяФункции = "НастраиваемаяБухгалтерскаяОтчетность.ВывестиСтрокуОДДС()";
				СообщениеОшибка = СтрШаблон(НСтр("ru = 'Неверно задана формула для функции %1.';
												|en = 'Неверно задана формула для функции %1.'"), ИмяФункции);
				ВызватьИсключение СообщениеОшибка;
			КонецЕсли;
			
			НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(Алгоритм.ВидДвиженияДенежныхСредств) + """/";
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			
			НастройкиРасшифровки = НастройкиОСВПоВидуДДС(ОбщиеПараметрыРасшифровки, ЭлементПоказателя.СчетДДС, ЭлементПоказателя.ВидДДС);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, НастройкиРасшифровки);
			
			// Отражение уменьшения на сумму НДС.
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						
						ЗнакНДС = -1;
						Если Алгоритм.ТипПоказателя = "ДО" И НЕ Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = СтрокаНДС.ДО_НДС;
						ИначеЕсли Алгоритм.ТипПоказателя = "ДО" И Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = СтрокаНДС.ДО_НДС;
							ЗнакНДС = 1;
						ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = СтрокаНДС.КО_НДС;
						ИначеЕсли Алгоритм.ТипПоказателя = "КО" Тогда
							СлагаемоеНДС = СтрокаНДС.КО_НДС;
							ЗнакНДС = 1;
						КонецЕсли;
						
						Если СлагаемоеНДС > 0 Тогда
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + ЗнакНДС * СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, ЗнакНДС * СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						КонецЕсли;
	
					ИначеЕсли Алгоритм.ТипПоказателя = "ДО" И СтрокаНДС.ДО < 0 Тогда
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.ДО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части денежных потоков комиссионеров или агентов";
						ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.ДО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						КонецЕсли;
	
					ИначеЕсли  Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый И СтрокаНДС.КО < 0 Тогда

						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.КО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части денежных потоков комиссионеров или агентов";
						ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.КО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
						КонецЕсли;	

					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = НаименованиеОборота + " оборот по счету " + СтрокаСчет.СчетКод + " /вид движения """ + Строка(ЭлементПоказателя.ВидДДС) + """ в части НДС";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, 0, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			КонецЕсли;
		КонецЦикла;
		
		ЗначениеПоказателя = ЗначениеПоказателя + ТекущееЗначениеПоказателя;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПоказателиОДДС_Агентские_ФормаОтчета2019Кв1(КонтекстВыполнения, ПараметрыПоказателя)
		
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;

	КодГода = 0;
	Если ПараметрыПоказателя.РегулярнаяГрафа <> Неопределено Тогда
		Для Каждого РегулярнаяГрафа Из ПараметрыПоказателя.РегулярнаяГрафа.Значение Цикл
			КодГода = РегулярнаяГрафа.Значение; 
			ЗаголовокГрафы = РегулярнаяГрафа.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));
	
	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ТекущееЗначениеПоказателя = 0;
	ПолноеНаименованиеСтроки = "Строка " + ПараметрыПоказателя.НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";;
	ИмяОбласти = ПараметрыПоказателя.ИмяОбластиПоказателя;

	Если ПараметрыПоказателя.КодСтроки = "4111" Тогда
		ФормулаРасчета = "ДО";
	Иначе
		ФормулаРасчета = "-КО";
	КонецЕсли;
		
	// Сторно платежей комитентам.
	Для Каждого СтрокаНДС Из СтруктураНДСвДДС Цикл

		Если ЗначениеЗаполнено(СтрокаНДС.СчетДДС) Тогда
			Продолжить;
		КонецЕсли;
	
		Если ФормулаРасчета = "ДО" И СтрокаНДС.ДО < 0 Тогда
			Слагаемое = СтрокаНДС.ДО;
			СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
			
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			НаименованиеСоставляющей = "Поступление денежных средств в части денежных потоков комиссионеров или агентов";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
			НаименованиеСоставляющей = "Поступление денежных средств в части денежных потоков комиссионеров или агентов в части НДС";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);

		ИначеЕсли ФормулаРасчета = "-КО" И СтрокаНДС.КО < 0 Тогда
			Слагаемое = СтрокаНДС.КО;
			СлагаемоеНДС = -СтрокаНДС.КО_НДС;
			
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			НаименованиеСоставляющей = "Платежи денежных средств в части денежных потоков комиссионеров или агентов";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "-", НаименованиеСоставляющей, Слагаемое, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
			НаименованиеСоставляющей = "Платежи денежных средств в части денежных потоков комиссионеров или агентов в части НДС";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбласти, ПолноеНаименованиеСтроки, "+", НаименованиеСоставляющей, СлагаемоеНДС, ИмяРаздела, ДополнительныеПараметрыРасшифровки);
			
		КонецЕсли;
	КонецЦикла;
	
	Вычитаемый = ФормулаРасчета = "-КО";
	ПараметрыПоказателя.ЗначениеПоказателя = ?(Вычитаемый, -1,1)*(ПараметрыПоказателя.ЗначениеПоказателя + ТекущееЗначениеПоказателя); 
	
КонецПроцедуры

#КонецОбласти

#Область ФормаОтчета2025Кв1

Процедура ЗаполнитьПоказателиОДДС_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	Организация = КонтекстВыполнения.Организация;
	КодГрафы = ПараметрыПоказателя.КодГрафы;
	ЗаголовокГрафы = ПараметрыПоказателя.ГрафаНаименование;
	КодГода = ПараметрыПоказателя.КодГода;

	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));

	СтруктураДДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураДДС;
	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого СтрокаСчет Из Алгоритм.Счета Цикл
		
		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС, СчетДДС", Алгоритм.ВидДвиженияДенежныхСредств, СтрокаСчет.Счет));
		ТекущееЗначениеПоказателя = 0;
		
		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = ЗаголовокРасшифровки(ПараметрыПоказателя.НаименованиеСтрокиРасшифровки, ЗаголовокГрафы, ПараметрыПоказателя, КонтекстВыполнения);
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;

			Если Алгоритм.ТипПоказателя = "ДО" Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "КО" Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ИмяФункции = "НастраиваемаяБухгалтерскаяОтчетность.ВывестиСтрокуОДДС()";
				СообщениеОшибка = СтрШаблон(НСтр("ru = 'Неверно задана формула для функции %1.';
												|en = 'Неверно задана формула для функции %1.'"), ИмяФункции);
				ВызватьИсключение СообщениеОшибка;
			КонецЕсли;
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/';
														|en = '%1 оборот по счету %2 /вид движения ""%3""/'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			
			НастройкиРасшифровки = НастройкиОСВПоВидуДДС(ОбщиеПараметрыРасшифровки, ЭлементПоказателя.СчетДДС, ЭлементПоказателя.ВидДДС);
			
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = НастройкиРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);

			// Отражение уменьшения на сумму НДС.
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						СлагаемоеНДС = 0;
						Если Алгоритм.ТипПоказателя = "ДО" Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
						ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
						КонецЕсли;
						
						Если СлагаемоеНДС < 0 Тогда
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
																		|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
							
							ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
							ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
							ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
							ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
							ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
							ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
							ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
							ПараметрыСтрокиРасшифровки.Организация = Организация;
							ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						КонецЕсли;
						
					ИначеЕсли Алгоритм.ТипПоказателя = "ДО" И СтрокаНДС.ДО < 0 Тогда
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.ДО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов';
																	|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
						
						ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
						ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
						ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
						ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
						ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
						ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
						ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
						ПараметрыСтрокиРасшифровки.Организация = Организация;
						ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.ДО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
																		|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
							
							ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
							ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
							ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
							ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
							ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
							ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
							ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
							ПараметрыСтрокиРасшифровки.Организация = Организация;
							ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
							
						КонецЕсли;

					ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый И СтрокаНДС.КО < 0 Тогда
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.КО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов';
																	|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
						
						ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
						ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
						ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
						ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
						ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
						ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
						ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
						ПараметрыСтрокиРасшифровки.Организация = Организация;
						ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.КО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
																		|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
							
							ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
							ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
							ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
							ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
							ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
							ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
							ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
							ПараметрыСтрокиРасшифровки.Организация = Организация;
							ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
															|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
				
				ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
				ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
				ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
				ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
				ПараметрыСтрокиРасшифровки.Сумма = 0;
				ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
				ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
				ПараметрыСтрокиРасшифровки.Организация = Организация;
				ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			КонецЕсли;
		КонецЦикла;
		Вычитаемый = Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый;
		ЗначениеПоказателя = ЗначениеПоказателя + ?(Вычитаемый, -1,1)*ТекущееЗначениеПоказателя;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОДДС_НДС_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)

	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	Организация = КонтекстВыполнения.Организация;
	КодГрафы = ПараметрыПоказателя.КодГрафы;
	ЗаголовокГрафы = ПараметрыПоказателя.ГрафаНаименование;
	КодГода = ПараметрыПоказателя.КодГода;
	
	ВидДДСПолучения    = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности;
	ВидДДСПеречисления = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));
	
	СтруктураДДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураДДС;
	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	РасчетыПоНДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].РасчетыПоНДС;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого СтрокаСчет Из Алгоритм.Счета Цикл
		
		ТекущееЗначениеПоказателя = 0;
		
		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС, СчетДДС", Алгоритм.ВидДвиженияДенежныхСредств, СтрокаСчет.Счет));
		
		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = ЗаголовокРасшифровки(ПараметрыПоказателя.НаименованиеСтрокиРасшифровки, ЗаголовокГрафы, ПараметрыПоказателя, КонтекстВыполнения);
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;
	
			Если Алгоритм.ТипПоказателя = "ДО" Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "КО" Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ИмяФункции = "НастраиваемаяБухгалтерскаяОтчетность.ВывестиСтрокуОДДС()";
				СообщениеОшибка = СтрШаблон(НСтр("ru = 'Неверно задана формула для функции %1.';
												|en = 'Неверно задана формула для функции %1.'"), ИмяФункции);
				ВызватьИсключение СообщениеОшибка;
			КонецЕсли;
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/';
														|en = '%1 оборот по счету %2 /вид движения ""%3""/'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			
			НастройкиРасшифровки = НастройкиОСВПоВидуДДС(ОбщиеПараметрыРасшифровки, ЭлементПоказателя.СчетДДС, ЭлементПоказателя.ВидДДС);
			
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = НастройкиРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			// Отражение уменьшения на сумму НДС.
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						СлагаемоеНДС = 0;
						Если Алгоритм.ТипПоказателя = "ДО" Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
						ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
						КонецЕсли;
						
						Если СлагаемоеНДС < 0 Тогда
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
																		|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
							
							ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
							ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
							ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
							ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
							ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
							ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
							ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
							ПараметрыСтрокиРасшифровки.Организация = Организация;
							ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						КонецЕсли;
						
					ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый И СтрокаНДС.КО < 0 Тогда
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.КО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов';
																	|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
						
						ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
						ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
						ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
						ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
						ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
						ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
						ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
						ПараметрыСтрокиРасшифровки.Организация = Организация;
						ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.КО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
																		|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
							
							ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
							ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
							ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
							ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
							ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
							ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
							ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
							ПараметрыСтрокиРасшифровки.Организация = Организация;
							ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
															|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
				
				ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
				ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
				ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
				ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
				ПараметрыСтрокиРасшифровки.Сумма = 0;
				ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
				ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
				ПараметрыСтрокиРасшифровки.Организация = Организация;
				ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			КонецЕсли;
			
			// Отражение уменьшения на сумму расчетов по НДС.
			Если ЭлементПоказателя.СчетДДС = Счет("51") Тогда
				Если Алгоритм.ТипПоказателя = "ДО" И ЭлементПоказателя.ВидДДС = ВидДДСПолучения Тогда
					Слагаемое = -РасчетыПоНДС.ПолученныйНДС;
					НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Оборот с кредита счета 68.02 в дебет счета 51 /вид движения ""%1""/';
																|en = 'Оборот с кредита счета 68.02 в дебет счета 51 /вид движения ""%1""/'"), Строка(ЭлементПоказателя.ВидДДС));
				ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый И ЭлементПоказателя.ВидДДС = ВидДДСПеречисления Тогда
					Слагаемое = -РасчетыПоНДС.ПеречисленныйНДС;
					НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Оборот с кредита счета 51 в дебет счета 68.02 /вид движения ""%1""/';
																|en = 'Оборот с кредита счета 51 в дебет счета 68.02 /вид движения ""%1""/'"), Строка(ЭлементПоказателя.ВидДДС));
				КонецЕсли;
				ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
				
				ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
				ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
				ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
				ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
				ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
				ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
				ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
				ПараметрыСтрокиРасшифровки.Организация = Организация;
				ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначениеПоказателя = ЗначениеПоказателя + ТекущееЗначениеПоказателя;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПоказателиОДДС_НДС_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя)
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	Организация = КонтекстВыполнения.Организация;
	КодГрафы = ПараметрыПоказателя.КодГрафы;
	ЗаголовокГрафы = ПараметрыПоказателя.ГрафаНаименование;
	КодГода = ПараметрыПоказателя.КодГода;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));
	
	ВидДДСПолучения    = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности;
	ВидДДСПеречисления = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности;

	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	РасчетыПоНДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].РасчетыПоНДС;
	РасчетыПоВалютноОбменнымОперациям  = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].РасчетыПоВалютноОбменнымОперациям;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ЗначениеПоказателя = ПараметрыПоказателя.ЗначениеПоказателя;
	ПолноеНаименованиеСтроки = ЗаголовокРасшифровки(ПараметрыПоказателя.НаименованиеСтрокиРасшифровки, ЗаголовокГрафы, ПараметрыПоказателя, КонтекстВыполнения);
	
	Если ПараметрыПоказателя.КодСтроки = "4119" Тогда
		ФормулаРасчета = "ДО";
	Иначе
		ФормулаРасчета = "-КО";
	КонецЕсли;	
		
	// Отражение свернутого НДС.
	НДСПоставщиков = СтруктураНДСвДДС.Итог("КО_НДС");
	НДСПокупателей = СтруктураНДСвДДС.Итог("ДО_НДС");
	
	СвернутыйНДС = НДСПокупателей - НДСПоставщиков - РасчетыПоНДС.ПеречисленныйНДС + РасчетыПоНДС.ПолученныйНДС;
	
	// Отражение свернутого показателя (выгоды или потери) от валютно-обменных операций
	ЕстьВалютоОбменныеОперации = РасчетыПоВалютноОбменнымОперациям.Количество() > 0;
	Если ЕстьВалютоОбменныеОперации Тогда
		ВалютоОбменДО               = РасчетыПоВалютноОбменнымОперациям.Итог("ВалютоОбменДО");
		ВалютоОбменКО               = РасчетыПоВалютноОбменнымОперациям.Итог("ВалютоОбменКО");
		ВалютоОбменПродажДельта     = РасчетыПоВалютноОбменнымОперациям.Итог("ВалютоОбменДельта");
		ВыгодаПотеряВалютногоОбмена = ВалютоОбменДО - ВалютоОбменКО - ВалютоОбменПродажДельта;
	КонецЕсли;
	
	Если ФормулаРасчета = "ДО" Тогда
		Если СвернутыйНДС > 0 Тогда
			// Превышение полученного НДС над перечисленным НДС.
			НаименованиеСоставляющей = НСтр("ru = 'Сумма НДС начисленного к уплате при расчетах с покупателями';
											|en = 'Сумма НДС начисленного к уплате при расчетах с покупателями'");
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = НДСПокупателей;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			НаименованиеСоставляющей = НСтр("ru = 'Сумма НДС начисленного к возмещению при расчетах с поставщиками';
											|en = 'Сумма НДС начисленного к возмещению при расчетах с поставщиками'");
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = -НДСПоставщиков;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Сумма НДС перечисленного в бюджет (Оборот с кредита счета 51 в дебет счета 68.02, по виду движения денежных средств %1)';
														|en = 'Сумма НДС перечисленного в бюджет (Оборот с кредита счета 51 в дебет счета 68.02, по виду движения денежных средств %1)'"),
				Строка(ВидДДСПеречисления));
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = -РасчетыПоНДС.ПеречисленныйНДС;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Сумма НДС полученного из бюджета (Оборот с кредита счета 68.02 в дебет счета 51, по виду движения денежных средств %1)';
														|en = 'Сумма НДС полученного из бюджета (Оборот с кредита счета 68.02 в дебет счета 51, по виду движения денежных средств %1)'"),
				Строка(ВидДДСПолучения));
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = РасчетыПоНДС.ПолученныйНДС;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			ЗначениеПоказателя = ЗначениеПоказателя + СвернутыйНДС;
			
		КонецЕсли;
		
		Если ЕстьВалютоОбменныеОперации Тогда
			Если ВыгодаПотеряВалютногоОбмена > 0 Тогда
				ЗначениеПоказателяУсловное = ЗначениеПоказателя - ВалютоОбменКО;
			Иначе
				ЗначениеПоказателяУсловное = ЗначениеПоказателя - ВалютоОбменДО;
			КонецЕсли;
			
			Если ЗначениеПоказателяУсловное >= 0 Тогда
				НаименованиеСоставляющей = НСтр("ru = 'Сумма прочих платежей по текущим операциям в части валютно-обменных операций';
												|en = 'Сумма прочих платежей по текущим операциям в части валютно-обменных операций'");
				Если ВыгодаПотеряВалютногоОбмена > 0 Тогда
					ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
					ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
					ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
					ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
					ПараметрыСтрокиРасшифровки.Сумма = -ВалютоОбменКО;
					ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
					ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
					ПараметрыСтрокиРасшифровки.Организация = Организация;
					ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
				Иначе
					ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
					ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
					ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
					ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
					ПараметрыСтрокиРасшифровки.Сумма = -ВалютоОбменДО;
					ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
					ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
					ПараметрыСтрокиРасшифровки.Организация = Организация;
					ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
				КонецЕсли;
				
				ЗначениеПоказателя = ЗначениеПоказателяУсловное;
				
			Иначе
				// Разница получилась отрицательной, она должна отразиться в строке 4129
				НаименованиеСоставляющей = НСтр("ru = 'Сумма прочих поступлений по текущим операциям в части валютно-обменных операций';
												|en = 'Сумма прочих поступлений по текущим операциям в части валютно-обменных операций'");
				ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
				ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
				ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
				ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
				ПараметрыСтрокиРасшифровки.Сумма = -ЗначениеПоказателя;
				ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
				ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
				ПараметрыСтрокиРасшифровки.Организация = Организация;
				ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
				
				ЗначениеПоказателя = 0;
				
				РасчетыПоВалютноОбменнымОперациям[0].ВалютоОбменДельта = ЗначениеПоказателяУсловное;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ФормулаРасчета = "-КО" Тогда
		Если СвернутыйНДС <= 0 Тогда
			// Превышение перечисленного НДС над полученным НДС.
			НаименованиеСоставляющей = НСтр("ru = 'Сумма НДС начисленного к уплате при расчетах с покупателями';
											|en = 'Сумма НДС начисленного к уплате при расчетах с покупателями'");
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = -НДСПокупателей;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			НаименованиеСоставляющей = НСтр("ru = 'Сумма НДС начисленного к возмещению при расчетах с поставщиками';
											|en = 'Сумма НДС начисленного к возмещению при расчетах с поставщиками'");
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = НДСПоставщиков;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Сумма НДС перечисленного в бюджет (Оборот с кредита счета 51 в дебет счета 68.02, по виду движения денежных средств %1)';
														|en = 'Сумма НДС перечисленного в бюджет (Оборот с кредита счета 51 в дебет счета 68.02, по виду движения денежных средств %1)'"),
				Строка(ВидДДСПеречисления));
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = РасчетыПоНДС.ПеречисленныйНДС;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = 'Сумма НДС полученного из бюджета (Оборот с кредита счета 68.02 в дебет счета 51, по виду движения денежных средств %1)';
														|en = 'Сумма НДС полученного из бюджета (Оборот с кредита счета 68.02 в дебет счета 51, по виду движения денежных средств %1)'"),
				Строка(ВидДДСПолучения));
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = -РасчетыПоНДС.ПолученныйНДС;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			ЗначениеПоказателя = ЗначениеПоказателя - СвернутыйНДС;
			
		КонецЕсли;
		
		Если ЕстьВалютоОбменныеОперации Тогда
			Если ВыгодаПотеряВалютногоОбмена < 0 Тогда
				ЗначениеПоказателя = ЗначениеПоказателя - ВалютоОбменДО - ВалютоОбменПродажДельта;
				
				НаименованиеСоставляющей = НСтр("ru = 'Сумма прочих поступлений по текущим операциям в части валютно-обменных операций';
												|en = 'Сумма прочих поступлений по текущим операциям в части валютно-обменных операций'");
				ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
				ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
				ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
				ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
				ПараметрыСтрокиРасшифровки.Сумма = -(ВалютоОбменДО + ВалютоОбменПродажДельта);
				ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
				ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
				ПараметрыСтрокиРасшифровки.Организация = Организация;
				ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			Иначе
				ЗначениеПоказателя = ЗначениеПоказателя - ВалютоОбменКО - ВалютоОбменПродажДельта;
				
				НаименованиеСоставляющей = НСтр("ru = 'Сумма прочих платежей по текущим операциям в части валютно-обменных операций';
												|en = 'Сумма прочих платежей по текущим операциям в части валютно-обменных операций'");
				ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
				ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
				ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
				ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
				ПараметрыСтрокиРасшифровки.Сумма = -(ВалютоОбменКО + ВалютоОбменПродажДельта);
				ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
				ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
				ПараметрыСтрокиРасшифровки.Организация = Организация;
				ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Вычитаемый = ФормулаРасчета = "-КО";
	ПараметрыПоказателя.ЗначениеПоказателя = ?(Вычитаемый, -1, 1)*ЗначениеПоказателя;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОДДС_Агентские_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя, Алгоритм, ЗначениеПоказателя)
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	Организация = КонтекстВыполнения.Организация;
	КодГрафы = ПараметрыПоказателя.КодГрафы;
	ЗаголовокГрафы = ПараметрыПоказателя.ГрафаНаименование;
	КодГода = ПараметрыПоказателя.КодГода;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));

	СтруктураДДС       = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураДДС;
	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ВыведенПервыйЭлемент = Ложь;
	
	Для Каждого СтрокаСчет Из Алгоритм.Счета Цикл
		
		ТекущееЗначениеПоказателя = 0;

		НайденныеСтрокиПоВидуДДС = СтруктураДДС.НайтиСтроки(Новый Структура("ВидДДС, СчетДДС", Алгоритм.ВидДвиженияДенежныхСредств, СтрокаСчет.Счет));
		
		Для Каждого ЭлементПоказателя Из НайденныеСтрокиПоВидуДДС Цикл
			
			Если НЕ ВыведенПервыйЭлемент Тогда
				ПолноеНаименованиеСтроки = ЗаголовокРасшифровки(ПараметрыПоказателя.НаименованиеСтрокиРасшифровки, ЗаголовокГрафы, ПараметрыПоказателя, КонтекстВыполнения);
				ВыведенПервыйЭлемент = Истина;
			Иначе
				ПолноеНаименованиеСтроки = "";
			КонецЕсли;

			Если Алгоритм.ТипПоказателя = "ДО" И НЕ Алгоритм.Вычитаемый Тогда
				Слагаемое = ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "ДО" И Алгоритм.Вычитаемый Тогда
				Слагаемое = -ЭлементПоказателя.ДО;
				НаименованиеОборота = "Дебетовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый Тогда
				Слагаемое = ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			ИначеЕсли Алгоритм.ТипПоказателя = "КО" И НЕ Алгоритм.Вычитаемый Тогда
				Слагаемое = -ЭлементПоказателя.КО;
				НаименованиеОборота = "Кредитовый";
			Иначе
				ИмяФункции = "НастраиваемаяБухгалтерскаяОтчетность.ВывестиСтрокуОДДС()";
				СообщениеОшибка = СтрШаблон(НСтр("ru = 'Неверно задана формула для функции %1.';
												|en = 'Неверно задана формула для функции %1.'"), ИмяФункции);
				ВызватьИсключение СообщениеОшибка;
			КонецЕсли;
			
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/';
														|en = '%1 оборот по счету %2 /вид движения ""%3""/'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
			
			НастройкиРасшифровки = НастройкиОСВПоВидуДДС(ОбщиеПараметрыРасшифровки, ЭлементПоказателя.СчетДДС, ЭлементПоказателя.ВидДДС);

			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = НастройкиРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			// Отражение уменьшения на сумму НДС.
			ОтборСтрокНДС = Новый Структура;
			ОтборСтрокНДС.Вставить("СчетДДС", ЭлементПоказателя.СчетДДС);
			ОтборСтрокНДС.Вставить("ВидДДС", ЭлементПоказателя.ВидДДС);
			СтрокиНДС = СтруктураНДСвДДС.НайтиСтроки(ОтборСтрокНДС);
			
			Если СтрокиНДС.Количество() > 0 Тогда
				Для Каждого СтрокаНДС Из СтрокиНДС Цикл
					Если СтрокаНДС.ДО = 0 И СтрокаНДС.КО = 0 Тогда
						
						ЗнакНДС = -1;
						Если Алгоритм.ТипПоказателя = "ДО" И НЕ Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = СтрокаНДС.ДО_НДС;
						ИначеЕсли Алгоритм.ТипПоказателя = "ДО" И Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = СтрокаНДС.ДО_НДС;
							ЗнакНДС = 1;
						ИначеЕсли Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый Тогда
							СлагаемоеНДС = СтрокаНДС.КО_НДС;
						ИначеЕсли Алгоритм.ТипПоказателя = "КО" Тогда
							СлагаемоеНДС = СтрокаНДС.КО_НДС;
							ЗнакНДС = 1;
						КонецЕсли;
						
						Если СлагаемоеНДС > 0 Тогда
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + ЗнакНДС * СлагаемоеНДС;
							НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
																		|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
							
							ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
							ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
							ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
							ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
							ПараметрыСтрокиРасшифровки.Сумма = ЗнакНДС * СлагаемоеНДС;
							ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
							ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
							ПараметрыСтрокиРасшифровки.Организация = Организация;
							ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						КонецЕсли;
	
					ИначеЕсли Алгоритм.ТипПоказателя = "ДО" И СтрокаНДС.ДО < 0 Тогда
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.ДО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов';
																	|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
						
						ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
						ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
						ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
						ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
						ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
						ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
						ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
						ПараметрыСтрокиРасшифровки.Организация = Организация;
						ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.ДО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
																		|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
							
							ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
							ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
							ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
							ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
							ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
							ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
							ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
							ПараметрыСтрокиРасшифровки.Организация = Организация;
							ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						КонецЕсли;
					
					ИначеЕсли  Алгоритм.ТипПоказателя = "КО" И Алгоритм.Вычитаемый И СтрокаНДС.КО < 0 Тогда
					
						// Сторно выплат комитентам.
						Слагаемое = СтрокаНДС.КО;
						ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
						НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов';
																	|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части денежных потоков комиссионеров или агентов'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
						
						ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
						ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
						ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
						ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
						ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
						ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
						ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
						ПараметрыСтрокиРасшифровки.Организация = Организация;
						ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						
						// Обнаружен НДС по платежам, не связанными с комитентами.
						Если СтрокаНДС.КО_НДС > 0 Тогда
							СлагаемоеНДС = -СтрокаНДС.КО_НДС;
							ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
							НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
																		|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
							
							ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
							ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
							ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
							ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
							ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
							ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
							ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
							ПараметрыСтрокиРасшифровки.Организация = Организация;
							ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
						КонецЕсли;

					КонецЕсли;
				КонецЦикла;
			Иначе
				НаименованиеСоставляющей = СтрШаблон(НСтр("ru = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС';
															|en = '%1 оборот по счету %2 /вид движения ""%3""/ в части НДС'"), НаименованиеОборота, СтрокаСчет.СчетКод, Строка(Алгоритм.ВидДвиженияДенежныхСредств));
				ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
				ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
				ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
				ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
				ПараметрыСтрокиРасшифровки.Сумма = 0;
				ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
				ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
				ПараметрыСтрокиРасшифровки.Организация = Организация;
				ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			КонецЕсли;
		КонецЦикла;
		
		ЗначениеПоказателя = ЗначениеПоказателя + ТекущееЗначениеПоказателя;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПоказателиОДДС_Агентские_ФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя)
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	Организация = КонтекстВыполнения.Организация;
	КодГрафы = ПараметрыПоказателя.КодГрафы;
	ЗаголовокГрафы = ПараметрыПоказателя.ГрафаНаименование;
	КодГода = ПараметрыПоказателя.КодГода;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, 12*КодГода));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета, 12*КодГода)));
	
	СтруктураНДСвДДС   = КонтекстВыполнения.Данные[ОбщиеПараметрыРасшифровки.КонецПериода].СтруктураНДСвДДС;
	
	ДополнительныеПараметрыРасшифровки = Новый Структура("Организация", КонтекстВыполнения.Организация);
	
	ТекущееЗначениеПоказателя = 0;
	ПолноеНаименованиеСтроки = ЗаголовокРасшифровки(ПараметрыПоказателя.НаименованиеСтрокиРасшифровки, ЗаголовокГрафы, ПараметрыПоказателя, КонтекстВыполнения);
	
	Если ПараметрыПоказателя.КодСтроки = "4111" Тогда
		ФормулаРасчета = "ДО";
	Иначе
		ФормулаРасчета = "-КО";
	КонецЕсли;
		
	// Сторно платежей комитентам.
	Для Каждого СтрокаНДС Из СтруктураНДСвДДС Цикл

		Если ЗначениеЗаполнено(СтрокаНДС.СчетДДС) Тогда
			Продолжить;
		КонецЕсли;
	
		Если ФормулаРасчета = "ДО" И СтрокаНДС.ДО < 0 Тогда
			Слагаемое = СтрокаНДС.ДО;
			СлагаемоеНДС = -СтрокаНДС.ДО_НДС;
			
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			НаименованиеСоставляющей = "Поступление денежных средств в части денежных потоков комиссионеров или агентов";
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);

			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
			НаименованиеСоставляющей = "Поступление денежных средств в части денежных потоков комиссионеров или агентов в части НДС";
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
		ИначеЕсли ФормулаРасчета = "-КО" И СтрокаНДС.КО < 0 Тогда
			Слагаемое = СтрокаНДС.КО;
			СлагаемоеНДС = -СтрокаНДС.КО_НДС;
			
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + Слагаемое;
			НаименованиеСоставляющей = "Платежи денежных средств в части денежных потоков комиссионеров или агентов";
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "-";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = Слагаемое;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
			ТекущееЗначениеПоказателя = ТекущееЗначениеПоказателя + СлагаемоеНДС;
			НаименованиеСоставляющей = "Платежи денежных средств в части денежных потоков комиссионеров или агентов в части НДС";
			ПараметрыСтрокиРасшифровки = ПараметрыСтрокиРасшифровки();
			ПараметрыСтрокиРасшифровки.НаименованиеПоказателя = ПолноеНаименованиеСтроки;
			ПараметрыСтрокиРасшифровки.ЗнакОперации = "+";
			ПараметрыСтрокиРасшифровки.НаименованиеСлагаемого = НаименованиеСоставляющей;
			ПараметрыСтрокиРасшифровки.Сумма = СлагаемоеНДС;
			ПараметрыСтрокиРасшифровки.ИмяРаздела = ИмяРаздела;
			ПараметрыСтрокиРасшифровки.ДополнительныеПараметры = ДополнительныеПараметрыРасшифровки;
			ПараметрыСтрокиРасшифровки.Организация = Организация;
			ПараметрыПоказателя.Расшифровка.Добавить(ПараметрыСтрокиРасшифровки);
			
		КонецЕсли;
	КонецЦикла;
	
	Вычитаемый = ФормулаРасчета = "-КО";
	ПараметрыПоказателя.ЗначениеПоказателя = ?(Вычитаемый, -1,1)*(ПараметрыПоказателя.ЗначениеПоказателя + ТекущееЗначениеПоказателя); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НоваяРедакцияАлгоритма

#Область ОДДС_ПоВстроенномуАлгоритму

Процедура ЗаполнитьПоВстроенномуАлгоритмуОДДС(КонтекстВыполнения, Контейнер)
	
	КонтекстОтчета = КонтекстОтчета(КонтекстВыполнения);
	
	ЗаполнитьОтчетПоНастройкам(КонтекстВыполнения,
		КонтекстОтчета, Контейнер);

КонецПроцедуры

Функция КонтекстОтчета(КонтекстВыполнения)
	
	КонтекстОтчета = БухгалтерскаяОтчетностьБРО.НовыйКонтекстОтчета();
	
	Если Не ЗначениеЗаполнено(КонтекстВыполнения.Организация) Тогда
		Возврат КонтекстОтчета;
	КонецЕсли;

	КонтекстОтчета.Организация = КонтекстВыполнения.Организация[0];
	БухгалтерскаяОтчетностьБРО.ЗаполнитьПериодОтчета(КонтекстОтчета.ОтчетныйПериод, КонтекстВыполнения.НачалоПериодаОтчета, КонтекстВыполнения.КонецПериодаОтчета);
	КонтекстОтчета.Период = КонтекстОтчета.ОтчетныйПериод.КонецДата;
	
	Если КонтекстВыполнения.ЗаполнятьПредыдущиеПериоды Тогда
		
		СтандартнаяДлинаОтчетногоПериода = 12; // месяцев
		СравнительныйПериодНачало = ДобавитьМесяц(КонтекстВыполнения.НачалоПериодаОтчета, -СтандартнаяДлинаОтчетногоПериода);
		СравнительныйПериодКонец = КонецМесяца(ДобавитьМесяц(КонтекстОтчета.ОтчетныйПериод.КонецДата, -СтандартнаяДлинаОтчетногоПериода));
		
		БухгалтерскаяОтчетностьБРО.ЗаполнитьПериодОтчета(КонтекстОтчета.СравнительныйПериод, СравнительныйПериодНачало, СравнительныйПериодКонец);
		
	КонецЕсли;
	
	Возврат КонтекстОтчета;
	
КонецФункции

Процедура ЗаполнитьОтчетПоНастройкам(КонтекстВыполнения, КонтекстОтчета, Контейнер)
	
	Периоды = Новый Массив;
	Если КонтекстОтчета.ОтчетныйПериод.Заполнен Тогда
		Периоды.Добавить(КонтекстОтчета.ОтчетныйПериод);
	КонецЕсли;
	Если КонтекстОтчета.СравнительныйПериод.Заполнен Тогда
		Периоды.Добавить(КонтекстОтчета.СравнительныйПериод);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Периоды) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеПоказатели = АктуальныеЗаполняемыеПоказатели(КонтекстВыполнения, КонтекстОтчета);
	
	БухгалтерскаяОтчетностьБРО.ЗаполнитьОтчет(Контейнер, ЗаполняемыеПоказатели, Периоды, КонтекстВыполнения.Организация);
	
КонецПроцедуры

Функция АктуальныеЗаполняемыеПоказатели(КонтекстВыполнения, КонтекстОтчета)
	
	ЗаполняемыеПоказатели = БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказатели();
	
	ЗаполняемыеПоказателиРаздела = БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела();

	ОпределитьЗаполняемыеПоказатели(КонтекстВыполнения, ЗаполняемыеПоказателиРаздела, "ОДДС", КонтекстОтчета);
	
	ЗаполняемыеПоказатели.Разделы.Вставить("ОДДС", ЗаполняемыеПоказателиРаздела);
	
	Возврат ЗаполняемыеПоказатели;
	
КонецФункции

Процедура ОпределитьЗаполняемыеПоказатели(КонтекстВыполнения, ЗаполняемыеПоказатели, Раздел, Контекст)
	
	ПроцессорЗаполнения = ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.ПолучитьНовыйПроцессорОписанияЗаполняемыеПоказатели();
	
	ПроцессорЗаполнения.Раздел = Раздел;
	ПроцессорЗаполнения.ЗаполняемыеПоказатели = ЗаполняемыеПоказатели;
	
	ЗаполнитьОДДСПоВстроенномуАлгоритму(КонтекстВыполнения, ПроцессорЗаполнения);
	
	ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.ДетализироватьГруппыПоказателейПоУмолчаниюВстроенная(ЗаполняемыеПоказатели, Контекст);
	
	Для Каждого Правило Из ПравилаПолученияДанных(ЗаполняемыеПоказатели) Цикл
		ЗаполнениеБухгалтерскойОтчетностиПравила.НастроитьПоказатели(Правило.Значение, Правило.Ключ, Контекст);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОДДСПоВстроенномуАлгоритму(КонтекстВыполнения, Процессор)
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка(); // Значения могут записываться в базу данных
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиБухОтчетности.Ссылка КАК Строка,
	|	СтрокиБухОтчетности.КодСтроки КАК КодСтроки,
	|	СтрокиБухОтчетности.ДопАлгоритм КАК ДопАлгоритмСтроки,
	|	СтрокиБухОтчетности.Регламентированная КАК Регламентированная,
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока, НЕОПРЕДЕЛЕНО) КАК ОсновнаяСтрока,
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.КодСтроки, """") КАК КодОсновнойСтроки,
	|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.Регламентированная, ЛОЖЬ) КАК ОсновнаяСтрокаРегламентированная,
	|	АлгоритмыСбораДанныхБухОтчетности.Ссылка КАК АлгоритмСбораДанных,
	|	АлгоритмыСбораДанныхБухОтчетности.ВидДвиженияДенежныхСредств КАК ВидДвиженияДенежныхСредств,
	|	АлгоритмыСбораДанныхБухОтчетности.Счета.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Счет КАК Счет
	|	) КАК Счета
	|ИЗ
	|	Справочник.АлгоритмыСбораДанныхБухОтчетности КАК АлгоритмыСбораДанныхБухОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиБухОтчетности КАК СтрокиБухОтчетности
	|		ПО АлгоритмыСбораДанныхБухОтчетности.Владелец = СтрокиБухОтчетности.Ссылка
	|ГДЕ
	|	СтрокиБухОтчетности.Владелец = &Настройка
	|	И СтрокиБухОтчетности.ФормаОтчетности = &ФормаОтчетности
	|	И НЕ АлгоритмыСбораДанныхБухОтчетности.ПометкаУдаления
	|	И НЕ СтрокиБухОтчетности.ПометкаУдаления
	|	И СтрокиБухОтчетности.ДопАлгоритм = &ДопАлгоритм
	|	И АлгоритмыСбораДанныхБухОтчетности.Счета.Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|ИТОГИ ПО
	|	КодСтроки";
	
	Запрос.УстановитьПараметр("Настройка", КонтекстВыполнения.НастройкаЗаполненияБухОтчетности);
	Запрос.УстановитьПараметр("ФормаОтчетности", КонтекстВыполнения.ФормаОтчетности);
	Запрос.УстановитьПараметр("ДопАлгоритм", "ОДДС_ФормаОтчета2025Кв1");
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСтрока = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекущийНаборСчетовДенежныеПотоки = Неопределено;
	ТекущийНаборСчетовДенежныеСредства = Неопределено;
	
	ЗаполнениеБухгалтерскойОтчетностиПравила.НачатьАлгоритмВстроенная(Процессор, "ДенежныеПотоки");
	ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьСворачиваемыйДенежныйПотокВстроенная(Процессор, "НДС");
	
	Пока ВыборкаСтрока.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаСтрока.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Счета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВыборкаДетальныеЗаписи.Счета.Выгрузить().ВыгрузитьКолонку("Счет"));
			Если ВыборкаДетальныеЗаписи.КодСтроки = "4450" Тогда
				ТекущийНаборСчетовДенежныеСредства = Счета;
			Иначе
				Если ТекущийНаборСчетовДенежныеПотоки = Неопределено Тогда
					ТекущийНаборСчетовДенежныеПотоки = Счета;
				ИначеЕсли Не ОбщегоНазначения.КоллекцииИдентичны(ТекущийНаборСчетовДенежныеПотоки, Счета) Тогда
					
					ОсновнойПоказатель = НСтр("ru = 'Статьи, не включенные ни в один другой показатель отчета';
												|en = 'Статьи, не включенные ни в один другой показатель отчета'", КодЯзыка);
					
					ТекущийНаборСчетовДенежныеПотоки = Счета;
					ЗаполнениеБухгалтерскойОтчетностиПравила.НачатьАлгоритмВстроенная(Процессор, СтрШаблон("ДенежныеПотоки%1",ВыборкаДетальныеЗаписи.КодСтроки));
					ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьСворачиваемыйДенежныйПотокВстроенная(Процессор, "НДС");
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьГруппуВстроенная(Процессор, ВыборкаДетальныеЗаписи.КодСтроки);
			Если ВыборкаДетальныеЗаписи.КодСтроки = "4450" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.УстановитьАлгоритмВстроенная(Процессор, "ДенежныеСредства");
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеСредства);
				ЗаполнениеБухгалтерскойОтчетностиПравила.НачатьАлгоритмВстроенная(Процессор, "ДенежныеПотоки");
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьСворачиваемыйДенежныйПотокВстроенная(Процессор, "НДС");
			ИначеЕсли ВыборкаДетальныеЗаписи.КодСтроки = "4111" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательВстроенная(Процессор,ВыборкаДетальныеЗаписи.ВидДвиженияДенежныхСредств);
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				// -- деньги от комитента на закупку условно считаем ушедшими продавцам товаров транзитом
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьСворачиваемыйДенежныйПотокВстроенная(Процессор, "АгентПокупателя");
				// -- платежи комитенту условно считаем полученными от покупателей - они тоже транзитные
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательСвернутогоДенежногоПотокаВстроенная(Процессор,
					"АгентПродавца",
					НСтр("ru = 'Исключены суммы продаж в интересах комитента';
						|en = 'Исключены суммы продаж в интересах комитента'"));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
			ИначеЕсли ВыборкаДетальныеЗаписи.КодСтроки = "4119" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательВстроенная(Процессор,ВыборкаДетальныеЗаписи.ВидДвиженияДенежныхСредств);
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.НачатьДобавлениеПоказателейПоложительныхЗначенийВстроенная(Процессор);// См. ДополнитьГруппуОтрицательныхЗначений
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательСвернутогоДенежногоПотокаВстроенная(Процессор,
					"ОбменВалют",
					НСтр("ru = 'Выгоды и потери от валютно-обменных операций';
						|en = 'Выгоды и потери от валютно-обменных операций'"));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьСворачиваемыйДенежныйПотокВстроенная(Процессор, "КурсовыеРазницы");
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
			ИначеЕсли ВыборкаДетальныеЗаписи.КодСтроки = "4121" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательВстроенная(Процессор,ВыборкаДетальныеЗаписи.ВидДвиженияДенежныхСредств);
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				// подп. 16(а) ПБУ 23:
				// -- платежи комитенту условно считаем полученными от покупателей
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьСворачиваемыйДенежныйПотокВстроенная(Процессор, "АгентПродавца");
				// -- деньги от комитента на закупку условно считаем ушедшими продавцам товаров
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательСвернутогоДенежногоПотокаВстроенная(Процессор,
					"АгентПокупателя",
					НСтр("ru = 'Исключены суммы приобретений в интересах комитента';
						|en = 'Исключены суммы приобретений в интересах комитента'"));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
			ИначеЕсли ВыборкаДетальныеЗаписи.КодСтроки = "4122" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательВстроенная(Процессор,ВыборкаДетальныеЗаписи.ВидДвиженияДенежныхСредств);
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.ОграничитьСворачиваемыйДенежныйПотокВстроенная(Процессор, "НДС");
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательРаспределенногоДенежногоПотокаВстроенная(
					Процессор,
					"ЕНС",
					ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.НалоговыеПлатежиНДФЛОплатыТруда(),
					НСтр("ru = 'НДФЛ с оплаты труда, зачисленный на единый налоговый счет';
						|en = 'НДФЛ с оплаты труда, зачисленный на единый налоговый счет'", КодЯзыка));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки); 
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательРаспределенногоДенежногоПотокаВстроенная(
					Процессор,
					"ЕНС",
					Перечисления.ВидыНалогов.НалоговыеПлатежиСтраховыеВзносыОплатыТруда(),
					НСтр("ru = 'Страховые взносы с оплаты труда, зачисленные на единый налоговый счет';
						|en = 'Страховые взносы с оплаты труда, зачисленные на единый налоговый счет'", КодЯзыка));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
			ИначеЕсли ВыборкаДетальныеЗаписи.КодСтроки = "4124" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательВстроенная(Процессор,ВыборкаДетальныеЗаписи.ВидДвиженияДенежныхСредств);
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.ОграничитьСворачиваемыйДенежныйПотокВстроенная(Процессор, "НДС");
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательРаспределенногоДенежногоПотокаВстроенная(
					Процессор,
					"ЕНС",
					Перечисления.ВидыНалогов.НалоговыеПлатежиНалогНаПрибыль(),
					НСтр("ru = 'Налог на прибыль, зачисленный на единый налоговый счет';
						|en = 'Налог на прибыль, зачисленный на единый налоговый счет'", КодЯзыка));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
			ИначеЕсли ВыборкаДетальныеЗаписи.КодСтроки = "4129" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательВстроенная(Процессор,ВыборкаДетальныеЗаписи.ВидДвиженияДенежныхСредств);
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательСвернутогоДенежногоПотокаВстроенная(Процессор, "НДС", НСтр("ru = 'НДС, представленный свернуто';
																																		|en = 'НДС, представленный свернуто'"));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.РаспределитьДенежныйПотокВстроенная(
					Процессор,
					"ЕНС",
					НСтр("ru = 'Исключены суммы налогов, уплаченные на единый налоговый счет, входящие в состав других показателей';
						|en = 'Исключены суммы налогов, уплаченные на единый налоговый счет, входящие в состав других показателей'",
					КодЯзыка));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДополнитьГруппуОтрицательныхЗначенийВстроенная(Процессор);
			ИначеЕсли ВыборкаДетальныеЗаписи.КодСтроки = "4322" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательВстроенная(Процессор,ВыборкаДетальныеЗаписи.ВидДвиженияДенежныхСредств);
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательРаспределенногоДенежногоПотокаВстроенная(
					Процессор,
					"ЕНС",
					Перечисления.ВидыНалогов.НалоговыеПлатежиНалогНаПрибыльДивидендов(),
					НСтр("ru = 'Налог на прибыль, удержанный при выплате дивидендов';
						|en = 'Налог на прибыль, удержанный при выплате дивидендов'", КодЯзыка));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательРаспределенногоДенежногоПотокаВстроенная(
					Процессор,
					"ЕНС",
					ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.НалоговыеПлатежиНДФЛДивиденды(),
					НСтр("ru = 'НДФЛ, удержанный при выплате дивидендов';
						|en = 'НДФЛ, удержанный при выплате дивидендов'", КодЯзыка));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
			ИначеЕсли ВыборкаДетальныеЗаписи.КодСтроки = "4490" Тогда
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДобавитьПоказательСвернутогоДенежногоПотокаВстроенная(
					Процессор,
					"КурсовыеРазницы",
					НСтр("ru = 'Изменения курса иностранной валюты по отношению к рублю';
						|en = 'Изменения курса иностранной валюты по отношению к рублю'"));
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
			Иначе
				ЗаполнениеБухгалтерскойОтчетностиПравила.ДополнитьОтборВстроенная(Процессор,ВыборкаДетальныеЗаписи.ВидДвиженияДенежныхСредств);
				УстановитьСчетаАлгоритмаОДДС(Процессор, ТекущийНаборСчетовДенежныеПотоки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСчетаАлгоритмаОДДС(Процессор, Счета)
	
	Процессор.КонтекстЗаполнения.Показатель.Заполнение.НастройкиАлгоритма.Вставить("Счета", Счета);
	
КонецПроцедуры

// Определяет состав показателей в разрезе алгоритмов их заполнения.
//
// Параметры:
//  ЗаполняемыеПоказатели - БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела - описание структуры отчета (раздела отчета) и правил его заполнения
// 
// Возвращаемое значение:
//  Соответствие - бакет:
//    * Ключ - идентификатор алгоритма
//    * Значение - Массив из  БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела.Показатели
//
Функция ПравилаПолученияДанных(ЗаполняемыеПоказатели)
	
	ПравилаПолученияДанных = Новый Соответствие;
	
	Для Каждого ОписаниеПоказателя Из ЗаполняемыеПоказатели.Показатели Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеПоказателя.Заполнение.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияБПКлиентСервер.ДополнитьРазделенныйМассив(ПравилаПолученияДанных, ОписаниеПоказателя.Заполнение.Идентификатор, ОписаниеПоказателя);
		
	КонецЦикла;
	
	Возврат ПравилаПолученияДанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Пояснения5

Процедура ЗаполнитьФормуПояснения5(КонтекстВыполнения, ЗаполнятьПредыдущиеПериоды)
	
	НачалоПериодаОтчета = КонтекстВыполнения.НачалоПериодаОтчета;
	КонецПериодаОтчета = КонтекстВыполнения.КонецПериодаОтчета;
	Организация = КонтекстВыполнения.Организация;
	
	ПараметрыСтрок = ПараметрыСтрок();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиБухОтчетности.КодСтроки КАК КодСтроки,
		|	СтрокиБухОтчетности.НаименованиеРасшифровки КАК НаименованиеРасшифровки,
		|	СтрокиБухОтчетности.КодЯчейки КАК КодЯчейки,
		|	АлгоритмыСбораДанныхБухОтчетностиСчета.Счет КАК Счет,
		|	АлгоритмыСбораДанныхБухОтчетностиСчета.Счет.Вид КАК СчетВид,
		|	АлгоритмыСбораДанныхБухОтчетностиСчета.Счет.Долгосрочный КАК СчетДолгосрочный,
		|	СтрокиБухОтчетности.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
		|	СтрокиБухОтчетности.КодЯчейкиПрошлогоПериода КАК КодЯчейкиПрошлогоПериода,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СтрокиБухОтчетности.Родитель.Наименование, 1, 3) = ""5.1""
		|			ТОГДА ""Д""
		|		КОГДА ПОДСТРОКА(СтрокиБухОтчетности.Родитель.Наименование, 1, 3) = ""5.3""
		|			ТОГДА ""К""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ВидЗадолженности,
		|	СтрокиБухОтчетности.Регламентированная КАК Регламентированная,
		|	СтрокиБухОтчетности.ОсновнаяСтрока.КодСтроки КАК КодОсновнойСтроки
		|ПОМЕСТИТЬ ДанныеСтрок
		|ИЗ
		|	Справочник.СтрокиБухОтчетности КАК СтрокиБухОтчетности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АлгоритмыСбораДанныхБухОтчетности.Счета КАК АлгоритмыСбораДанныхБухОтчетностиСчета
		|		ПО СтрокиБухОтчетности.Ссылка = АлгоритмыСбораДанныхБухОтчетностиСчета.Ссылка.Владелец
		|ГДЕ
		|	СтрокиБухОтчетности.ФормаОтчетности = &ФормаОтчетности
		|	И НЕ СтрокиБухОтчетности.ПометкаУдаления
		|	И НЕ АлгоритмыСбораДанныхБухОтчетностиСчета.Ссылка.ПометкаУдаления
		|	И СтрокиБухОтчетности.Владелец = &Настройка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Счет КАК Счет,
		|	МАКСИМУМ(Остатки.Вид) КАК Вид
		|ПОМЕСТИТЬ ВидыАПСчетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет КАК Счет,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|				ТОГДА ""А""
		|			ИНАЧЕ ""П""
		|		КОНЕЦ КАК Вид,
		|		ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|		ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|		ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|		ХозрасчетныйОстатки.Валюта КАК Валюта,
		|		ХозрасчетныйОстатки.Подразделение КАК Подразделение,
		|		ХозрасчетныйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|				ТОГДА ""А""
		|			ИНАЧЕ ""П""
		|		КОНЕЦ,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Субконто3,
		|		ХозрасчетныйОстатки.Валюта,
		|		ХозрасчетныйОстатки.Подразделение,
		|		ХозрасчетныйОстатки.НаправлениеДеятельности
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный), , Организация = &Организация) КАК ХозрасчетныйОстатки) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Остатки.Вид) = 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ Счета
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	План.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаРБП
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК План
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		ПО (ХозрасчетныйВидыСубконто.Ссылка = План.Ссылка)
		|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов))
		|ГДЕ
		|	План.Ссылка В
		|			(ВЫБРАТЬ
		|				ДанныеСтрок.Счет КАК Счет
		|			ИЗ
		|				ДанныеСтрок КАК ДанныеСтрок)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ СчетаРезервов
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|ГДЕ
		|	ДанныеСтрок.Счет В ИЕРАРХИИ(&СчетРезервов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ АСчета
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|ГДЕ
		|	(ДанныеСтрок.СчетВид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ИЛИ ДанныеСтрок.Счет В
		|				(ВЫБРАТЬ
		|					ВидыАПСчетов.Счет КАК Счет
		|				ИЗ
		|					ВидыАПСчетов КАК ВидыАПСчетов
		|				ГДЕ
		|					ВидыАПСчетов.Вид = ""А""))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ ПСчета
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|ГДЕ
		|	(ДанныеСтрок.СчетВид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ИЛИ ДанныеСтрок.Счет В
		|				(ВЫБРАТЬ
		|					ВидыАПСчетов.Счет КАК Счет
		|				ИЗ
		|					ВидыАПСчетов КАК ВидыАПСчетов
		|				ГДЕ
		|					ВидыАПСчетов.Вид = ""П""))
		|	И НЕ ДанныеСтрок.Счет В ИЕРАРХИИ (&СчетРезервов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ АПСчета
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|ГДЕ
		|	ДанныеСтрок.СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
		|	И НЕ ДанныеСтрок.Счет В
		|				(ВЫБРАТЬ
		|					ВидыАПСчетов.Счет КАК Счет
		|				ИЗ
		|					ВидыАПСчетов КАК ВидыАПСчетов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСтрок.КодСтроки КАК КодСтроки,
		|	ДанныеСтрок.НаименованиеРасшифровки КАК НаименованиеРасшифровки,
		|	ДанныеСтрок.КодЯчейки КАК КодЯчейки,
		|	ДанныеСтрок.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
		|	ДанныеСтрок.КодЯчейкиПрошлогоПериода КАК КодЯчейкиПрошлогоПериода,
		|	ДанныеСтрок.Счет КАК Счет,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыАПСчетов.Вид, """") = ""П""
		|			ТОГДА ""Пассивные""
		|		КОГДА ЕСТЬNULL(ВидыАПСчетов.Вид, """") = ""А""
		|			ТОГДА ""Активные""
		|		ИНАЧЕ ДанныеСтрок.СчетВид
		|	КОНЕЦ КАК СчетВид,
		|	ДанныеСтрок.СчетДолгосрочный КАК СчетДолгосрочный,
		|	НЕ СчетаРезервов.Счет ЕСТЬ NULL КАК СчетРезервов,
		|	ДанныеСтрок.ВидЗадолженности КАК ВидЗадолженности,
		|	ДанныеСтрок.Регламентированная КАК Регламентированная,
		|	ДанныеСтрок.КодОсновнойСтроки КАК КодОсновнойСтроки
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРезервов КАК СчетаРезервов
		|		ПО ДанныеСтрок.Счет = СчетаРезервов.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыАПСчетов КАК ВидыАПСчетов
		|		ПО ДанныеСтрок.Счет = ВидыАПСчетов.Счет
		|ИТОГИ ПО
		|	КодСтроки";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Настройка", КонтекстВыполнения.НастройкаЗаполненияБухОтчетности);
	Запрос.УстановитьПараметр("ФормаОтчетности", КонтекстВыполнения.ФормаОтчетности);
	Запрос.УстановитьПараметр("СчетРезервов", ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеКЗаполнению = ПолучитьДанныеДляЗаполненияПояснений5(
							Организация,
							НачалоПериодаОтчета,
							КонецПериодаОтчета,
							Запрос.МенеджерВременныхТаблиц);
		
	Если ЗаполнятьПредыдущиеПериоды Тогда
		ДанныеКЗаполнениюПрошлыйПериод = ПолучитьДанныеДляЗаполненияПояснений5(
											Организация,
											ДобавитьМесяц(НачалоПериодаОтчета, -12),
											КонецМесяца(ДобавитьМесяц(КонецПериодаОтчета, -12)),
											Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
		
	Строки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого Строка Из Строки.Строки Цикл
		
		СтрокаДанных = Строка.Строки[0];
		
		ПараметрыПоказателя = ПолучитьПараметрыПоказателя();
		ПараметрыПоказателя.КодСтроки = СтрокаДанных.КодСтроки;
		ПараметрыПоказателя.ИмяОбластиПоказателя = СтрокаДанных.КодЯчейки;
		
		ОпределитьНомерДопСтроки(СтрокаДанных, ПараметрыПоказателя, ПараметрыСтрок);
	
		ЗаполнитьСтрокуПояснений5(КонтекстВыполнения, ДанныеКЗаполнению, Строка.Строки, ПараметрыПоказателя);
		
		Если ЗаполнятьПредыдущиеПериоды И ЗначениеЗаполнено(СтрокаДанных.КодСтрокиПрошлогоПериода) Тогда
			
			ПараметрыПоказателя.КодСтроки = СтрокаДанных.КодСтроки;
			ПараметрыПоказателя.ИмяОбластиПоказателя = СтрокаДанных.КодЯчейкиПрошлогоПериода;
			ПараметрыПоказателя.КодСтрокиПрошлогоПериода = СтрокаДанных.КодСтрокиПрошлогоПериода;
			
			ЗаполнитьСтрокуПояснений5(КонтекстВыполнения, ДанныеКЗаполнениюПрошлыйПериод, Строка.Строки, ПараметрыПоказателя);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПояснений5(КонтекстВыполнения, ДанныеЗаполнения, ДанныеСтроки, ПараметрыПоказателя)
	
	ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	РассчитанныеПоказатели = КонтекстВыполнения.РассчитанныеПоказатели;
	
	ЗаголовкиГраф51 = ПолучитьЗаголовкиГраф51Пояснений5();
	ЗаголовкиГраф53 = ПолучитьЗаголовкиГраф53Пояснений5();
	
	РасшифровкаЗаголовок = НСтр("ru = 'Строка %1, графа ""%2""';
								|en = 'Line %1, column ""%2""'");
	
	ИтогНачальноеСальдо = 0;
	ИтогКонечноеСальдо  = 0;
	ИтогОборотДт        = 0;
	ИтогОборотКт        = 0;
	ИтогШтраф           = 0;
	ИтогПроценты        = 0;
	ИтогПени            = 0;
	ИтогСписание        = 0;
	ИтогРезервыНач      = 0;
	ИтогРезервыКон      = 0;
	ИтогРезервыОборот   = 0;
	ИтогПеревод         = 0;
	
	Для Каждого СтрокаСчета Из ДанныеСтроки Цикл
		
		СтрокаЗаголовок = ЗаполнитьПараметризируемыеНаименования(СтрокаСчета.НаименованиеРасшифровки, КонтекстВыполнения, ПараметрыПоказателя);
		
		СчетНачальноеСальдо = 0;
		СчетКонечноеСальдо  = 0;
		СчетОборотДт        = 0;
		СчетОборотКт        = 0;
		
		СчетШтраф           = 0;
		СчетПени            = 0;
		СчетСписание        = 0;
		СчетПеревод         = 0;
		
		РезервыСальдоНач    = 0;
		РезервыСальдоКон    = 0;
		РезервыОборотДт     = 0;
		
		// Находим соответствие в резуьтате
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидЗадолженности", СтрокаСчета.ВидЗадолженности);
		СтруктураПоиска.Вставить("Счет", СтрокаСчета.Счет);
		
		СчетаРезультата = ДанныеЗаполнения.НайтиСтроки(СтруктураПоиска);
		
		Если СчетаРезультата.Количество()>0 Тогда
			
			СчетНачальноеСальдо = СчетаРезультата[0].НачальноеСальдо;
			СчетКонечноеСальдо  = СчетаРезультата[0].КонечноеСальдо;
			
			Для Каждого СчетРезультата Из СчетаРезультата Цикл
			
				// Делаем подсчет показателя
				Если СтрокаСчета.СчетВид = ВидСчета.АктивноПассивный Тогда
					СчетШтраф = СчетШтраф + СчетРезультата.Штраф;
					СчетПени = СчетПени + СчетРезультата.Пени;
					Если СтрокаСчета.СчетДолгосрочный Тогда
						СчетПеревод = СчетПеревод - СчетРезультата.Перевод;
					Иначе
						СчетПеревод = СчетПеревод + СчетРезультата.Перевод;
					КонецЕсли;
					СчетСписание = СчетСписание + СчетРезультата.Списание;
					
					Если СтрокаСчета.ВидЗадолженности = "Д" Тогда
						СчетОборотДт = СчетОборотДт + СчетРезультата.Дебет;
						СчетОборотКт = СчетОборотКт + СчетРезультата.Кредит;
					ИначеЕсли СтрокаСчета.ВидЗадолженности = "К" Тогда
						СчетОборотКт = СчетОборотКт + СчетРезультата.Кредит - СчетПени - СчетШтраф;
						СчетОборотДт = СчетОборотДт + СчетРезультата.Дебет - СчетСписание;
					КонецЕсли;
				Иначе
					
					Если СтрокаСчета.СчетРезервов = Истина Тогда
						РезервыСальдоНач = РезервыСальдоНач + СчетРезультата.НачальноеСальдо;
						РезервыСальдоКон = РезервыСальдоКон + СчетРезультата.КонечноеСальдо;
						РезервыОборотДт = РезервыОборотДт + СчетРезультата.Дебет;
						
						СчетНачальноеСальдо = СчетНачальноеСальдо - СчетРезультата.НачальноеСальдо;
						СчетКонечноеСальдо  = СчетКонечноеСальдо - СчетРезультата.КонечноеСальдо;
					КонецЕсли;
					
					СчетШтраф = СчетРезультата.Штраф;
					СчетПени = СчетРезультата.Пени;
					СчетСписание = СчетРезультата.Списание;
					СчетПеревод = СчетРезультата.Перевод;
					
					СчетОборотДт = СчетРезультата.Дебет;
					СчетОборотКт = СчетРезультата.Кредит;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Добавим показатели по счету в общие показатели по строке
		ИтогНачальноеСальдо = ИтогНачальноеСальдо + СчетНачальноеСальдо;
		ИтогКонечноеСальдо  = ИтогКонечноеСальдо + СчетКонечноеСальдо;
		ИтогШтраф           = ИтогШтраф  + СчетШтраф + СчетПени;
		ИтогСписание        = ИтогСписание + СчетСписание;
		ИтогПеревод         = ИтогПеревод + СчетПеревод;
		ИтогРезервыНач      = ИтогРезервыНач + РезервыСальдоНач;
		ИтогРезервыКон      = ИтогРезервыКон + РезервыСальдоКон;
		ИтогРезервыОборот   = ИтогРезервыОборот + РезервыОборотДт;
		
		Если СтрокаСчета.ВидЗадолженности = "Д" Тогда
			
			ИтогОборотДт    = ИтогОборотДт + СчетОборотДт - СчетШтраф - СчетПени;
			ИтогОборотКт    = ИтогОборотКт + СчетОборотКт  - СчетСписание;
			
			Если Не СтрокаСчета.СчетРезервов Тогда
				
				Если СтрокаСчета.СчетВид = ВидСчета.Пассивный Тогда
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "04"),
						СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["04"]),
						"-",
						СтрШаблон(НСтр("ru = 'Сальдо на начало периода по кредиту счета %1 развернутое по всем субконто';
										|en = 'Opening balance for account %1 credit expanded by all extra dimensions'"), СтрокаСчета.Счет),
						-СчетНачальноеСальдо,
						ИмяРаздела);
				Иначе
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "04"),
						СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["04"]),
						"+",
						СтрШаблон(НСтр("ru = 'Сальдо на начало периода по дебету счета %1 развернутое по всем субконто';
										|en = 'Opening balance for account %1 debit expanded by all extra dimensions'"), СтрокаСчета.Счет),
						СчетНачальноеСальдо,
						ИмяРаздела);
				КонецЕсли;
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "06"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["06"]),
					"+",
					СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1 развернутый по всем субконто';
									|en = 'Account %1 debit turnover expanded by all extra dimensions'"), СтрокаСчета.Счет),
					СчетОборотДт,
					ИмяРаздела);
					
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, 
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "06"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["06"]),
					"-",
					СтрШаблон(НСтр("ru = 'Оборот с кредита счета 91.01 по статьям субконто ""Прочие доходы и расходы"" с видом ""Штрафы, пени и неустойки к получению (уплате)"" и ""Проценты к получению (уплате)"" в дебет счета %1 развернутое по всем субконто';
									|en = 'The turnover from account 91.01 credit by items of the ""Incomes and expenses"" extra dimension with the ""Receivable (payable) fees and penalties"" and ""Interest receivable (payable)"" types to the account %1 debit expanded by all extra dimensions'"), СтрокаСчета.Счет),
					СчетШтраф,
					ИмяРаздела);

				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "06"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["06"]),
					"-",
					СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами ""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""';
									|en = 'The turnover for account %1 debit by items of the ""Kinds of payments to the budget (funds)"" extra dimension with the ""Penalties: accrued additionally / paid (independently)"" and ""Penalties: accrued / paid (according to inspection certificate)"" and ""Penalty: accrued / paid"" types'"), СтрокаСчета.Счет),
					СчетПени,
					ИмяРаздела);
					
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "07"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["07"]),
					"+",
					СтрШаблон(НСтр("ru = 'Оборот с кредита счета 91.01 по статьям субконто ""Прочие доходы и расходы"" с видом ""Штрафы, пени и неустойки к получению (уплате)"" и ""Проценты к получению (уплате)"" в дебет счета %1 развернутое по всем субконто';
									|en = 'The turnover from account 91.01 credit by items of the ""Incomes and expenses"" extra dimension with the ""Receivable (payable) fees and penalties"" and ""Interest receivable (payable)"" types to the account %1 debit expanded by all extra dimensions'"), СтрокаСчета.Счет),
					СчетШтраф,
					ИмяРаздела);
					
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "07"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["07"]),
					"+",
					СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами ""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""';
									|en = 'The turnover for account %1 debit by items of the ""Kinds of payments to the budget (funds)"" extra dimension with the ""Penalties: accrued additionally / paid (independently)"" and ""Penalties: accrued / paid (according to inspection certificate)"" and ""Penalty: accrued / paid"" types'"), СтрокаСчета.Счет),
					СчетПени,
					ИмяРаздела);
	
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "08"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["08"]),
					"+",
					СтрШаблон(НСтр("ru = 'Оборот по кредиту счета %1 развернутый по всем субконто';
									|en = 'Account %1 credit turnover expanded by all extra dimensions'"), СтрокаСчета.Счет),
					СчетОборотКт,
					ИмяРаздела);
					
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "08"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["08"]),
					"-",
					СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом ""Списание дебеторской(кредиторской) задолженности""';
									|en = 'The turnover from account %1 credit to account 91.02 debit by items of the ""Incomes and expenses"" extra dimension with the ""Accounts payable crediting (receivable debiting)"" type'"), СтрокаСчета.Счет),
					-СчетСписание,
					ИмяРаздела);
					
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "09"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["09"]),
					"+",
					СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом ""Списание дебеторской(кредиторской) задолженности""';
									|en = 'The turnover from account %1 credit to account 91.02 debit by items of the ""Incomes and expenses"" extra dimension with the ""Accounts payable crediting (receivable debiting)"" type'"), СтрокаСчета.Счет),
					СчетСписание,
					ИмяРаздела);
						
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "11"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["11"]),
					"+",
					СтрШаблон(НСтр("ru = 'Оборот по счету %1 в части реклассификации долгосрочных активов и обязательств';
									|en = 'Account %1 turnover in terms of reclassification of long-term assets and liabilities'"), СтрокаСчета.Счет),
					СчетПеревод,
					ИмяРаздела);
					
				Если СтрокаСчета.СчетВид = ВидСчета.Пассивный Тогда
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "12"),
						СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["12"]),
						"-",
						СтрШаблон(НСтр("ru = 'Сальдо на конец периода по кредиту счета %1 развернутое по всем субконто';
										|en = 'Closing balance for account %1 credit expanded by all extra dimensions'"), СтрокаСчета.Счет),
						СчетКонечноеСальдо,
						ИмяРаздела);
				Иначе 
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
						КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "12"),
						СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["12"]),
						"+",
						СтрШаблон(НСтр("ru = 'Сальдо на конец периода по дебету счета %1 развернутое по всем субконто';
										|en = 'Closing balance for account %1 debit expanded by all extra dimensions'"), СтрокаСчета.Счет),
						СчетКонечноеСальдо,
						ИмяРаздела);
				КонецЕсли;
			Иначе
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "05"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["05"]),
					"+",
					СтрШаблон(НСтр("ru = 'Сальдо на начало периода по кредиту счета %1, развернутое по субконто ""Контрагенты"",""Договоры""';
									|en = 'Opening balance for credit of %1 account expanded by extra dimension ""Counterparties"", ""Contracts""'"), СтрокаСчета.Счет),
					РезервыСальдоНач,
					ИмяРаздела);
					
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "10"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["10"]),
					"+",
					СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1';
									|en = 'Account debit turnover %1'"), СтрокаСчета.Счет),
					РезервыОборотДт,
					ИмяРаздела);
					
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "13"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф51["13"]),
					"+",
					СтрШаблон(НСтр("ru = 'Сальдо на конец периода по кредиту счета %1, развернутое по субконто ""Контрагенты"",""Договоры""';
									|en = 'Closing balance for credit of %1 account expanded by extra dimension ""Counterparties"", ""Contracts""'"), СтрокаСчета.Счет),
					РезервыСальдоКон,
					ИмяРаздела);
			КонецЕсли;
		
		ИначеЕсли СтрокаСчета.ВидЗадолженности = "К" Тогда
			
			ИтогОборотКт    = ИтогОборотКт + СчетОборотКт - СчетШтраф - СчетПени;
			ИтогОборотДт    = ИтогОборотДт + СчетОборотДт - СчетСписание;
			
			Если СтрокаСчета.СчетВид = ВидСчета.Активный Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "04"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["04"]),
					"-",
					СтрШаблон(НСтр("ru = 'Сальдо на начало периода по дебету счета %1 развернутое по всем субконто';
									|en = 'Opening balance for account %1 debit expanded by all extra dimensions'"), СтрокаСчета.Счет),
					-СчетНачальноеСальдо,
					ИмяРаздела);
			Иначе 
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "04"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["04"]),
					"+",
					СтрШаблон(НСтр("ru = 'Сальдо на начало периода по кредиту счета %1 развернутое по всем субконто';
									|en = 'Opening balance for account %1 credit expanded by all extra dimensions'"), СтрокаСчета.Счет),
					СчетНачальноеСальдо,
					ИмяРаздела);
			КонецЕсли;
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "05"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["05"]),
				"+",
				СтрШаблон(НСтр("ru = 'Оборот по кредиту счета %1 развернутый по всем субконто';
								|en = 'Account %1 credit turnover expanded by all extra dimensions'"), СтрокаСчета.Счет),
				СчетОборотКт,
				ИмяРаздела);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "05"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["05"]),
				"-",
				СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом ""Штрафы, пени и неустойки к получению (уплате)"" развернутое по всем субконто';
								|en = 'The turnover from account %1 credit to account 91.02 debit by items of the ""Incomes and expenses"" extra dimension with the ""Receivable (payable) fees and penalties"" type expanded by all extra dimensions'"), СтрокаСчета.Счет),
				-СчетШтраф,
				ИмяРаздела);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "05"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["05"]),
				"-",
				СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами ""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""';
								|en = 'The turnover from account %1 credit by items of the ""Kinds of payments to the budget (funds)"" extra dimension with the ""Penalties: accrued additionally / paid (independently)"" and ""Penalties: accrued / paid (according to inspection certificate)"" and ""Penalty: accrued / paid"" types'"), СтрокаСчета.Счет),
				СчетПени,
				ИмяРаздела);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "06"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["06"]),
				"+",
				СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом ""Штрафы, пени и неустойки к получению (уплате)"" развернутое по всем субконто';
								|en = 'The turnover from account %1 credit to account 91.02 debit by items of the ""Incomes and expenses"" extra dimension with the ""Receivable (payable) fees and penalties"" type expanded by all extra dimensions'"), СтрокаСчета.Счет),
				СчетШтраф,
				ИмяРаздела);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "06"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["06"]),
				"+",
				СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами ""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""';
								|en = 'The turnover from account %1 credit by items of the ""Kinds of payments to the budget (funds)"" extra dimension with the ""Penalties: accrued additionally / paid (independently)"" and ""Penalties: accrued / paid (according to inspection certificate)"" and ""Penalty: accrued / paid"" types'"), СтрокаСчета.Счет),
				СчетПени,
				ИмяРаздела);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "07"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["07"]),
				"+",
				СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1 развернутый по всем субконто';
								|en = 'Account %1 debit turnover expanded by all extra dimensions'"), СтрокаСчета.Счет),
				СчетОборотДт,
				ИмяРаздела);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "07"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["07"]),
				"-",
				СтрШаблон(НСтр("ru = 'Оборот с кредита счета 91.01 в дебет счета %1 по статьям субконто  ""Прочие доходы и расходы"" с видом ""Списание дебеторской(кредиторской) задолженности""';
								|en = 'The turnover from account 91.01 credit to account %1 debit by items of the ""Incomes and expenses"" extra dimension with the ""Accounts payable crediting (receivable debiting)"" type'"), СтрокаСчета.Счет),
				-СчетСписание,
				ИмяРаздела);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "08"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["08"]),
				"+",
				СтрШаблон(НСтр("ru = 'Оборот с кредита счета 91.01 в дебет счета %1 по статьям субконто  ""Прочие доходы и расходы"" с видом ""Списание дебеторской(кредиторской) задолженности""';
								|en = 'The turnover from account 91.01 credit to account %1 debit by items of the ""Incomes and expenses"" extra dimension with the ""Accounts payable crediting (receivable debiting)"" type'"), СтрокаСчета.Счет),
				СчетСписание,
				ИмяРаздела);
				
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "09"),
				СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["09"]),
				"+",
				СтрШаблон(НСтр("ru = 'Оборот по счету %1 в части реклассификации долгосрочных активов и обязательств';
								|en = 'Account %1 turnover in terms of reclassification of long-term assets and liabilities'"), СтрокаСчета.Счет),
				СчетПеревод,
				ИмяРаздела);
				
			Если СтрокаСчета.СчетВид = ВидСчета.Активный Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "10"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["10"]),
					"-",
					СтрШаблон(НСтр("ru = 'Сальдо на конец периода по дебету счета %1 развернутое по всем субконто';
									|en = 'Closing balance for account %1 debit expanded by all extra dimensions'"), СтрокаСчета.Счет),
					СчетКонечноеСальдо,
					ИмяРаздела);
			Иначе 
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
					КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "10"),
					СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф53["10"]),
					"+",
					СтрШаблон(НСтр("ru = 'Сальдо на конец периода по кредиту счета %1 развернутое по всем субконто';
									|en = 'Closing balance for account %1 credit expanded by all extra dimensions'"), СтрокаСчета.Счет),
					СчетКонечноеСальдо,
					ИмяРаздела);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеСтроки[0].ВидЗадолженности = "Д" Тогда
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "04"), ИтогНачальноеСальдо);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "05"), -ИтогРезервыНач);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "06"), ИтогОборотДт);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "07"), ИтогШтраф);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "08"), -ИтогОборотКт);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "09"), -ИтогСписание);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "10"), -ИтогРезервыОборот);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "11"), ИтогПеревод);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "12"), ИтогКонечноеСальдо);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "13"), -ИтогРезервыКон);
	ИначеЕсли ДанныеСтроки[0].ВидЗадолженности = "К" Тогда
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "04"), ИтогНачальноеСальдо);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "05"), ИтогОборотКт);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "06"), ИтогШтраф);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "07"), -ИтогОборотДт);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "08"), -ИтогСписание);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "09"), ИтогПеревод);
		УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, "10"), ИтогКонечноеСальдо);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляЗаполненияПояснений5(Организация, НачалоПериода, КонецПериода, МенеджерВременныхТаблиц)
	
	ДанныеЗаполнения = ПолучитьТаблицуДанныхПояснений5();
	
	// Активно-Пассивные счета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("Организация", Организация); 
	Запрос.Параметры.Вставить("НачалоПериода", НачалоПериода);
	Запрос.Параметры.Вставить("КонецПериода", КонецПериода);
	Запрос.Параметры.Вставить("Дт91_02", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Запрос.Параметры.Вставить("Кт91_01", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	ВидыШтрафов = Новый Массив;
	ВидыШтрафов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ВидыШтрафов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	Запрос.Параметры.Вставить("ВидыШтрафов", ВидыШтрафов);
	
	Запрос.Параметры.Вставить("Списание", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	Запрос.Параметры.Вставить("СубконтоРБП", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	ВидыПени = Новый Массив;
	ВидыПени.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
	ВидыПени.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
	ВидыПени.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	Запрос.Параметры.Вставить("ВидыПени", ВидыПени);
	
	#Область АПСчета
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ШтрафыДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетКт В ИЕРАРХИИ (&Кт91_01)
	|				И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидыШтрафов)
	|				И СчетДт В
	|					(ВЫБРАТЬ
	|						АПСчета.Счет КАК Счет
	|					ИЗ
	|						АПСчета КАК АПСчета),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ШтрафыКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетДт В ИЕРАРХИИ (&Дт91_02)
	|				И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидыШтрафов)
	|				И СчетКт В
	|					(ВЫБРАТЬ
	|						АПСчета.Счет КАК Счет
	|					ИЗ
	|						АПСчета КАК АПСчета),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ПениДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетДт В
	|					(ВЫБРАТЬ
	|						АПСчета.Счет КАК Счет
	|					ИЗ
	|						АПСчета КАК АПСчета)
	|				И СубконтоДт1 В (&ВидыПени),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ПениКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетКт В
	|					(ВЫБРАТЬ
	|						АПСчета.Счет КАК Счет
	|					ИЗ
	|						АПСчета КАК АПСчета)
	|				И СубконтоКт1 В (&ВидыПени),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ СписаниеДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетДт В ИЕРАРХИИ (&Дт91_02)
	|				И СубконтоДт1.ВидПрочихДоходовИРасходов = &Списание
	|				И СчетКт В
	|					(ВЫБРАТЬ
	|						АПСчета.Счет КАК Счет
	|					ИЗ
	|						АПСчета КАК АПСчета),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ СписаниеКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетКт В ИЕРАРХИИ (&Кт91_01)
	|				И СубконтоКт1.ВидПрочихДоходовИРасходов = &Списание
	|				И СчетДт В
	|					(ВЫБРАТЬ
	|						АПСчета.Счет КАК Счет
	|					ИЗ
	|						АПСчета КАК АПСчета),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Реклассификации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.Проведен
	|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РеклассификацияДолгосрочныхАктивовОбязательств)
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияБух.Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Организация = &Организация
	|	И НЕ ОперацияБух.ПометкаУдаления
	|	И ОперацияБух.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОперацияБух.Содержание = ""Реклассификация долгосрочных активов и обязательств""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ Перевод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетКт В
	|					(ВЫБРАТЬ
	|						АПСчета.Счет КАК Счет
	|					ИЗ
	|						АПСчета КАК АПСчета)
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						ВТ_Реклассификации.Ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_Реклассификации КАК ВТ_Реклассификации),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетДт В
	|					(ВЫБРАТЬ
	|						АПСчета.Счет КАК Счет
	|					ИЗ
	|						АПСчета КАК АПСчета)
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						ВТ_Реклассификации.Ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_Реклассификации КАК ВТ_Реклассификации),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаНачальныйРазвернутыйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаНачальныйРазвернутыйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					АПСчета.Счет КАК Счет
	|				ИЗ
	|					АПСчета КАК АПСчета),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	СУММА(Остатки.СуммаНачальныйРазвернутыйОстатокДт) КАК СуммаНачальныйРазвернутыйОстатокДт,
	|	СУММА(Остатки.СуммаНачальныйРазвернутыйОстатокКт) КАК СуммаНачальныйРазвернутыйОстатокКт,
	|	СУММА(Остатки.СуммаКонечныйРазвернутыйОстатокДт) КАК СуммаКонечныйРазвернутыйОстатокДт,
	|	СУММА(Остатки.СуммаКонечныйРазвернутыйОстатокКт) КАК СуммаКонечныйРазвернутыйОстатокКт
	|ПОМЕСТИТЬ ОстаткиСвернуто
	|ИЗ
	|	Остатки КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаНачальныйРазвернутыйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаНачальныйРазвернутыйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт = 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > 0
	|						ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт < 0
	|						ТОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт > 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > 0
	|						ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт < 0
	|						ТОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт = 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > 0
	|							И ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|						ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт < 0
	|							И -ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|						ТОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотКт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДебеторкаОбДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт > 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > 0
	|						ТОГДА ВЫБОР
	|								КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт <= ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|									ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|								КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|									ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт < 0
	|						ТОГДА ВЫБОР
	|								КОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотДт <= ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|									ТОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|								КОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|									ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДебеторкаОбКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт = 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > 0
	|						ТОГДА ВЫБОР
	|								КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт <= ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|									ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|								КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|									ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт < 0
	|						ТОГДА ВЫБОР
	|								КОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотКт <= ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|									ТОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|								КОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|									ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КредиторкаОбДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт = 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > 0
	|						ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт < 0
	|						ТОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт = 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > 0
	|						ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт < 0
	|						ТОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт > 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > 0
	|							И ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|						ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|					КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт < 0
	|							И -ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|						ТОГДА -ХозрасчетныйОстаткиИОбороты.СуммаОборотДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КредиторкаОбКт,
	|	ВЫБОР
	|		КОГДА НЕ ШтрафыДт.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоШтрафДт,
	|	ВЫБОР
	|		КОГДА НЕ ШтрафыКт.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоШтрафКт,
	|	ВЫБОР
	|		КОГДА НЕ ПениДт.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПениДт,
	|	ВЫБОР
	|		КОГДА НЕ ПениКт.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПениКт,
	|	ВЫБОР
	|		КОГДА НЕ СписаниеДт.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСписаниеДт,
	|	ВЫБОР
	|		КОГДА НЕ СписаниеКт.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСписаниеКт,
	|	ВЫБОР
	|		КОГДА НЕ Перевод.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПеревод
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					АПСчета.Счет
	|				ИЗ
	|					Остатки КАК АПСчета),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрафыДт КАК ШтрафыДт
	|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = ШтрафыДт.Регистратор
	|			И ХозрасчетныйОстаткиИОбороты.НомерСтроки = ШтрафыДт.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрафыКт КАК ШтрафыКт
	|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = ШтрафыКт.Регистратор
	|			И ХозрасчетныйОстаткиИОбороты.НомерСтроки = ШтрафыКт.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПениДт КАК ПениДт
	|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = ПениДт.Регистратор
	|			И ХозрасчетныйОстаткиИОбороты.НомерСтроки = ПениДт.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПениКт КАК ПениКт
	|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = ПениКт.Регистратор
	|			И ХозрасчетныйОстаткиИОбороты.НомерСтроки = ПениКт.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписаниеДт КАК СписаниеДт
	|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = СписаниеДт.Регистратор
	|			И ХозрасчетныйОстаткиИОбороты.НомерСтроки = СписаниеДт.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписаниеКт КАК СписаниеКт
	|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = СписаниеКт.Регистратор
	|			И ХозрасчетныйОстаткиИОбороты.НомерСтроки = СписаниеКт.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перевод КАК Перевод
	|		ПО ХозрасчетныйОстаткиИОбороты.Регистратор = Перевод.Регистратор
	|			И ХозрасчетныйОстаткиИОбороты.НомерСтроки = Перевод.НомерСтроки
	|ГДЕ
	|	НЕ(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт <> 0
	|				И ХозрасчетныйОстаткиИОбороты.СуммаОборотКт <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.Счет КАК Счет,
	|	СУММА(Обороты.ДебеторкаОбДт) КАК ДебеторкаОбДт,
	|	СУММА(Обороты.ДебеторкаОбКт) КАК ДебеторкаОбКт,
	|	СУММА(Обороты.КредиторкаОбДт) КАК КредиторкаОбДт,
	|	СУММА(Обороты.КредиторкаОбКт) КАК КредиторкаОбКт,
	|	Обороты.ЭтоШтрафДт КАК ЭтоШтрафДт,
	|	Обороты.ЭтоШтрафКт КАК ЭтоШтрафКт,
	|	Обороты.ЭтоПениДт КАК ЭтоПениДт,
	|	Обороты.ЭтоПениКт КАК ЭтоПениКт,
	|	Обороты.ЭтоСписаниеДт КАК ЭтоСписаниеДт,
	|	Обороты.ЭтоСписаниеКт КАК ЭтоСписаниеКт,
	|	Обороты.ЭтоПеревод КАК ЭтоПеревод
	|ПОМЕСТИТЬ ОборотыСвернуто
	|ИЗ
	|	Обороты КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.Счет,
	|	Обороты.ЭтоШтрафДт,
	|	Обороты.ЭтоШтрафКт,
	|	Обороты.ЭтоПениДт,
	|	Обороты.ЭтоПениКт,
	|	Обороты.ЭтоСписаниеДт,
	|	Обороты.ЭтоСписаниеКт,
	|	Обороты.ЭтоПеревод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыСвернуто.Счет КАК Счет,
	|	ОстаткиСвернуто.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаНачальныйРазвернутыйОстатокДт,
	|	ОстаткиСвернуто.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаНачальныйРазвернутыйОстатокКт,
	|	ОборотыСвернуто.ДебеторкаОбДт КАК ДебеторкаОбДт,
	|	ОборотыСвернуто.ДебеторкаОбКт КАК ДебеторкаОбКт,
	|	ОборотыСвернуто.КредиторкаОбДт КАК КредиторкаОбДт,
	|	ОборотыСвернуто.КредиторкаОбКт КАК КредиторкаОбКт,
	|	ОстаткиСвернуто.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт,
	|	ОстаткиСвернуто.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт,
	|	ОборотыСвернуто.ЭтоШтрафДт КАК ЭтоШтрафДт,
	|	ОборотыСвернуто.ЭтоШтрафКт КАК ЭтоШтрафКт,
	|	ОборотыСвернуто.ЭтоПениДт КАК ЭтоПениДт,
	|	ОборотыСвернуто.ЭтоПениКт КАК ЭтоПениКт,
	|	ОборотыСвернуто.ЭтоСписаниеДт КАК ЭтоСписаниеДт,
	|	ОборотыСвернуто.ЭтоСписаниеКт КАК ЭтоСписаниеКт,
	|	ОборотыСвернуто.ЭтоПеревод КАК ЭтоПеревод
	|ПОМЕСТИТЬ ОстаткиИОбороты
	|ИЗ
	|	ОборотыСвернуто КАК ОборотыСвернуто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСвернуто КАК ОстаткиСвернуто
	|		ПО ОборотыСвернуто.Счет = ОстаткиСвернуто.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Д"" КАК ВидЗадолженности,
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК НачальноеСальдо,
	|	ОстаткиИОбороты.ДебеторкаОбДт КАК Дебет,
	|	ОстаткиИОбороты.ДебеторкаОбКт КАК Кредит,
	|	ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК КонечноеСальдо,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.ЭтоШтрафДт
	|			ТОГДА ОстаткиИОбороты.ДебеторкаОбДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Штраф,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.ЭтоПениДт
	|			ТОГДА ОстаткиИОбороты.ДебеторкаОбДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Пени,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.ЭтоСписаниеДт
	|			ТОГДА ОстаткиИОбороты.ДебеторкаОбКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Списание,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.ЭтоПеревод
	|			ТОГДА ОстаткиИОбороты.ДебеторкаОбДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перевод
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	ОстаткиИОбороты КАК ОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""К"",
	|	ОстаткиИОбороты.Счет,
	|	ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт,
	|	ОстаткиИОбороты.КредиторкаОбДт,
	|	ОстаткиИОбороты.КредиторкаОбКт,
	|	ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.ЭтоШтрафДт
	|			ТОГДА ОстаткиИОбороты.КредиторкаОбКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.ЭтоПениДт
	|			ТОГДА ОстаткиИОбороты.КредиторкаОбКт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.ЭтоСписаниеДт
	|			ТОГДА ОстаткиИОбороты.КредиторкаОбДт
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОстаткиИОбороты.ЭтоПеревод
	|			ТОГДА ОстаткиИОбороты.КредиторкаОбКт
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ОстаткиИОбороты КАК ОстаткиИОбороты
	|ГДЕ
	|	НЕ(ОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт = 0
	|				И ОстаткиИОбороты.КредиторкаОбДт = 0
	|				И ОстаткиИОбороты.КредиторкаОбКт = 0
	|				И ОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итог.ВидЗадолженности КАК ВидЗадолженности,
	|	Итог.Счет КАК Счет,
	|	МАКСИМУМ(Итог.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(Итог.Дебет) КАК Дебет,
	|	СУММА(Итог.Кредит) КАК Кредит,
	|	МАКСИМУМ(Итог.КонечноеСальдо) КАК КонечноеСальдо,
	|	СУММА(Итог.Штраф) КАК Штраф,
	|	СУММА(Итог.Пени) КАК Пени,
	|	СУММА(Итог.Списание) КАК Списание,
	|	СУММА(Итог.Перевод) КАК Перевод
	|ИЗ
	|	Итог КАК Итог
	|
	|СГРУППИРОВАТЬ ПО
	|	Итог.ВидЗадолженности,
	|	Итог.Счет
	|ИТОГИ
	|	СУММА(НачальноеСальдо),
	|	СУММА(Дебет),
	|	СУММА(Кредит),
	|	СУММА(КонечноеСальдо),
	|	СУММА(Штраф),
	|	СУММА(Пени),
	|	СУММА(Списание),
	|	СУММА(Перевод)
	|ПО
	|	ВидЗадолженности,
	|	Счет ТОЛЬКО ИЕРАРХИЯ";

	ТЗАктивноПассивные = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТЗАктивноПассивные, ДанныеЗаполнения);
	
	Запрос.Текст = "
	 |УНИЧТОЖИТЬ Итог
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ШтрафыДт
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ШтрафыКт
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ПениДт
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ПениКт
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ СписаниеДт
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ СписаниеКт
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ВТ_Реклассификации
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Перевод
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Остатки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ОстаткиСвернуто
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Обороты
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ОстаткиИОбороты
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ОборотыСвернуто" ;
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область АИПСчета
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК Счет,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК СуммаШтраф
		|ПОМЕСТИТЬ Штрафы
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СчетКт В ИЕРАРХИИ (&Кт91_01)
		|				И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидыШтрафов)
		|				И СчетДт В
		|					(ВЫБРАТЬ
		|						АСчета.Счет КАК Счет
		|					ИЗ
		|						АСчета КАК АСчета),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СчетДт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СчетКт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СчетДт В ИЕРАРХИИ (&Дт91_02)
		|				И СубконтоДт1.ВидПрочихДоходовИРасходов В (&ВидыШтрафов)
		|				И СчетКт В
		|					(ВЫБРАТЬ
		|						ПСчета.Счет КАК Счет
		|					ИЗ
		|						ПСчета КАК ПСчета),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СчетКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК Счет,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК СуммаПени
		|ПОМЕСТИТЬ Пени
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СчетДт В
		|					(ВЫБРАТЬ
		|						АСчета.Счет КАК Счет
		|					ИЗ
		|						АСчета КАК АСчета)
		|				И СубконтоДт1 В (&ВидыПени),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СчетДт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СчетКт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СчетКт В
		|					(ВЫБРАТЬ
		|						ПСчета.Счет КАК Счет
		|					ИЗ
		|						ПСчета КАК ПСчета)
		|				И СубконтоКт1 В (&ВидыПени),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СчетКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК Счет,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК СуммаСписание
		|ПОМЕСТИТЬ Списание
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СчетДт В ИЕРАРХИИ (&Дт91_02)
		|				И СубконтоДт1.ВидПрочихДоходовИРасходов = &Списание
		|				И СчетКт В
		|					(ВЫБРАТЬ
		|						АСчета.Счет КАК Счет
		|					ИЗ
		|						АСчета КАК АСчета),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СчетКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СчетДт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СчетКт В ИЕРАРХИИ (&Кт91_01)
		|				И СубконтоКт1.ВидПрочихДоходовИРасходов = &Списание
		|				И СчетДт В
		|					(ВЫБРАТЬ
		|						ПСчета.Счет КАК Счет
		|					ИЗ
		|						ПСчета КАК ПСчета),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СчетДт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегламентнаяОперация.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Реклассификации
		|ИЗ
		|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
		|ГДЕ
		|	РегламентнаяОперация.Организация = &Организация
		|	И РегламентнаяОперация.Проведен
		|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РеклассификацияДолгосрочныхАктивовОбязательств)
		|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОперацияБух.Ссылка
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|ГДЕ
		|	ОперацияБух.Организация = &Организация
		|	И НЕ ОперацияБух.ПометкаУдаления
		|	И ОперацияБух.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ОперацияБух.Содержание = ""Реклассификация долгосрочных активов и обязательств""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Счет КАК Счет,
		|	СУММА(ВложенныйЗапрос.СуммаПеревод) КАК СуммаПеревод
		|ПОМЕСТИТЬ ПереводЗадолженности
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйДвиженияССубконто.СчетКт КАК Счет,
		|		СУММА(ВЫБОР
		|				КОГДА НЕ АСчета.Счет ЕСТЬ NULL
		|						И ХозрасчетныйДвиженияССубконто.СчетКт.Долгосрочный = ИСТИНА
		|					ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|				КОГДА НЕ ПСчета.Счет ЕСТЬ NULL
		|						И ХозрасчетныйДвиженияССубконто.СчетКт.Долгосрочный = ЛОЖЬ
		|					ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК СуммаПеревод
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				Организация = &Организация
		|					И СчетКт В
		|						(ВЫБРАТЬ
		|							АСчета.Счет КАК Счет
		|						ИЗ
		|							АСчета КАК АСчета
		|				
		|						ОБЪЕДИНИТЬ ВСЕ
		|				
		|						ВЫБРАТЬ
		|							ПСчета.Счет
		|						ИЗ
		|							ПСчета КАК ПСчета)
		|					И Регистратор В
		|						(ВЫБРАТЬ
		|							ВТ_Реклассификации.Ссылка КАК Ссылка
		|						ИЗ
		|							ВТ_Реклассификации КАК ВТ_Реклассификации),
		|				,
		|				) КАК ХозрасчетныйДвиженияССубконто
		|			ЛЕВОЕ СОЕДИНЕНИЕ АСчета КАК АСчета
		|			ПО ХозрасчетныйДвиженияССубконто.СчетКт = АСчета.Счет
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПСчета КАК ПСчета
		|			ПО ХозрасчетныйДвиженияССубконто.СчетКт = ПСчета.Счет
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХозрасчетныйДвиженияССубконто.СчетКт
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйДвиженияССубконто.СчетДт,
		|		СУММА(ВЫБОР
		|				КОГДА НЕ АСчета.Счет ЕСТЬ NULL
		|						И ХозрасчетныйДвиженияССубконто.СчетДт.Долгосрочный = ЛОЖЬ
		|					ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|				КОГДА НЕ ПСчета.Счет ЕСТЬ NULL
		|						И ХозрасчетныйДвиженияССубконто.СчетДт.Долгосрочный = ИСТИНА
		|					ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				Организация = &Организация
		|					И СчетДт В
		|						(ВЫБРАТЬ
		|							АСчета.Счет КАК Счет
		|						ИЗ
		|							АСчета КАК АСчета
		|				
		|						ОБЪЕДИНИТЬ ВСЕ
		|				
		|						ВЫБРАТЬ
		|							ПСчета.Счет
		|						ИЗ
		|							ПСчета КАК ПСчета)
		|					И Регистратор В
		|						(ВЫБРАТЬ
		|							ВТ_Реклассификации.Ссылка КАК Ссылка
		|						ИЗ
		|							ВТ_Реклассификации КАК ВТ_Реклассификации),
		|				,
		|				) КАК ХозрасчетныйДвиженияССубконто
		|			ЛЕВОЕ СОЕДИНЕНИЕ АСчета КАК АСчета
		|			ПО ХозрасчетныйДвиженияССубконто.СчетКт = АСчета.Счет
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПСчета КАК ПСчета
		|			ПО ХозрасчетныйДвиженияССубконто.СчетКт = ПСчета.Счет
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХозрасчетныйДвиженияССубконто.СчетДт) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт
		|ПОМЕСТИТЬ ОбщиеОстаткиИОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					Счета.Счет КАК Счет
		|				ИЗ
		|					Счета КАК Счета),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщиеОстаткиИОбороты.Счет КАК Счет,
		|	ОбщиеОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстаток,
		|	ОбщиеОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ОбщиеОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт,
		|	ОбщиеОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстаток,
		|	""Д"" КАК ВидЗадолженности
		|ПОМЕСТИТЬ ОстаткиИОбороты
		|ИЗ
		|	ОбщиеОстаткиИОбороты КАК ОбщиеОстаткиИОбороты
		|ГДЕ
		|	ОбщиеОстаткиИОбороты.Счет В
		|			(ВЫБРАТЬ
		|				АСчета.Счет КАК Счет
		|			ИЗ
		|				АСчета КАК АСчета)
		|	И НЕ ОбщиеОстаткиИОбороты.Счет В ИЕРАРХИИ
		|				(ВЫБРАТЬ
		|					СчетаРБП.Счет КАК Счет
		|				ИЗ
		|					СчетаРБП КАК СчетаРБП)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеОстаткиИОбороты.Счет,
		|	-ОбщиеОстаткиИОбороты.СуммаНачальныйОстатокДт,
		|	ОбщиеОстаткиИОбороты.СуммаОборотДт,
		|	ОбщиеОстаткиИОбороты.СуммаОборотКт,
		|	-ОбщиеОстаткиИОбороты.СуммаКонечныйОстатокДт,
		|	""К""
		|ИЗ
		|	ОбщиеОстаткиИОбороты КАК ОбщиеОстаткиИОбороты
		|ГДЕ
		|	ОбщиеОстаткиИОбороты.Счет В
		|			(ВЫБРАТЬ
		|				АСчета.Счет КАК Счет
		|			ИЗ
		|				АСчета КАК АСчета)
		|	И НЕ ОбщиеОстаткиИОбороты.Счет В ИЕРАРХИИ
		|				(ВЫБРАТЬ
		|					СчетаРБП.Счет КАК Счет
		|				ИЗ
		|					СчетаРБП КАК СчетаРБП)
		|	И ОбщиеОстаткиИОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеОстаткиИОбороты.Счет,
		|	ОбщиеОстаткиИОбороты.СуммаНачальныйОстатокКт,
		|	ОбщиеОстаткиИОбороты.СуммаОборотДт,
		|	ОбщиеОстаткиИОбороты.СуммаОборотКт,
		|	ОбщиеОстаткиИОбороты.СуммаКонечныйОстатокКт,
		|	""К""
		|ИЗ
		|	ОбщиеОстаткиИОбороты КАК ОбщиеОстаткиИОбороты
		|ГДЕ
		|	ОбщиеОстаткиИОбороты.Счет В
		|			(ВЫБРАТЬ
		|				ПСчета.Счет КАК Счет
		|			ИЗ
		|				ПСчета КАК ПСчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеОстаткиИОбороты.Счет,
		|	-ОбщиеОстаткиИОбороты.СуммаНачальныйОстатокКт,
		|	ОбщиеОстаткиИОбороты.СуммаОборотДт,
		|	ОбщиеОстаткиИОбороты.СуммаОборотКт,
		|	-ОбщиеОстаткиИОбороты.СуммаКонечныйОстатокКт,
		|	""Д""
		|ИЗ
		|	ОбщиеОстаткиИОбороты КАК ОбщиеОстаткиИОбороты
		|ГДЕ
		|	ОбщиеОстаткиИОбороты.Счет В
		|			(ВЫБРАТЬ
		|				ПСчета.Счет КАК Счет
		|			ИЗ
		|				ПСчета КАК ПСчета)
		|	И ОбщиеОстаткиИОбороты.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		|	""Д""
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаРБП.Счет КАК Счет
		|				ИЗ
		|					СчетаРБП КАК СчетаРБП),
		|			&СубконтоРБП,
		|			Организация = &Организация
		|				И Субконто1.ВидАктива = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ДебиторскаяЗадолженность)) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК НачальноеСальдоКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК КонечноеСальдоКт,
		|	""Д"" КАК ВидЗадолженности
		|ПОМЕСТИТЬ РезервыПоСомнительнымДолгам
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаРезервов.Счет КАК Счет
		|				ИЗ
		|					СчетаРезервов КАК СчетаРезервов),
		|			,
		|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиИОбороты.ВидЗадолженности КАК ВидЗадолженности,
		|	ОстаткиИОбороты.Счет КАК Счет,
		|	ОстаткиИОбороты.СуммаНачальныйОстаток КАК НачальноеСальдо,
		|	ОстаткиИОбороты.СуммаОборотДт КАК Дебет,
		|	ОстаткиИОбороты.СуммаОборотКт КАК Кредит,
		|	ОстаткиИОбороты.СуммаКонечныйОстаток КАК КонечноеСальдо,
		|	ВЫБОР
		|		КОГДА НЕ Штрафы.СуммаШтраф ЕСТЬ NULL
		|			ТОГДА Штрафы.СуммаШтраф
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Штраф,
		|	ВЫБОР
		|		КОГДА НЕ Пени.СуммаПени ЕСТЬ NULL
		|			ТОГДА Пени.СуммаПени
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Пени,
		|	ВЫБОР
		|		КОГДА НЕ Списание.СуммаСписание ЕСТЬ NULL
		|			ТОГДА Списание.СуммаСписание
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Списание,
		|	ВЫБОР
		|		КОГДА НЕ ПереводЗадолженности.СуммаПеревод ЕСТЬ NULL
		|			ТОГДА ПереводЗадолженности.СуммаПеревод
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Перевод
		|ИЗ
		|	ОстаткиИОбороты КАК ОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Штрафы КАК Штрафы
		|		ПО ОстаткиИОбороты.Счет = Штрафы.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Пени КАК Пени
		|		ПО ОстаткиИОбороты.Счет = Пени.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Списание КАК Списание
		|		ПО ОстаткиИОбороты.Счет = Списание.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПереводЗадолженности КАК ПереводЗадолженности
		|		ПО ОстаткиИОбороты.Счет = ПереводЗадолженности.Счет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РезервыПоСомнительнымДолгам.ВидЗадолженности,
		|	РезервыПоСомнительнымДолгам.Счет,
		|	СУММА(РезервыПоСомнительнымДолгам.НачальноеСальдоКт),
		|	СУММА(РезервыПоСомнительнымДолгам.ОборотДт),
		|	0,
		|	СУММА(РезервыПоСомнительнымДолгам.КонечноеСальдоКт),
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РезервыПоСомнительнымДолгам КАК РезервыПоСомнительнымДолгам
		|
		|СГРУППИРОВАТЬ ПО
		|	РезервыПоСомнительнымДолгам.Счет,
		|	РезервыПоСомнительнымДолгам.ВидЗадолженности
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидЗадолженности,
		|	Счет";
	
	ТЗАктивныеИПассивные = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТЗАктивныеИПассивные, ДанныеЗаполнения);
	
	Запрос.Текст = "
		|УНИЧТОЖИТЬ Штрафы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Пени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Списание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Реклассификации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПереводЗадолженности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОбщиеОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ РезервыПоСомнительнымДолгам";
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПолучитьТаблицуДанныхПояснений5()
	
	ДанныеКЗаполнению = Новый ТаблицаЗначений;
	ДанныеКЗаполнению.Колонки.Добавить("ВидЗадолженности", Новый ОписаниеТипов("Строка"));
	ДанныеКЗаполнению.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДанныеКЗаполнению.Колонки.Добавить("НачальноеСальдо", Новый ОписаниеТипов("Число"));
	ДанныеКЗаполнению.Колонки.Добавить("Дебет", Новый ОписаниеТипов("Число"));
	ДанныеКЗаполнению.Колонки.Добавить("Кредит", Новый ОписаниеТипов("Число"));
	ДанныеКЗаполнению.Колонки.Добавить("КонечноеСальдо", Новый ОписаниеТипов("Число"));
	ДанныеКЗаполнению.Колонки.Добавить("Штраф", Новый ОписаниеТипов("Число"));
	ДанныеКЗаполнению.Колонки.Добавить("Проценты", Новый ОписаниеТипов("Число"));
	ДанныеКЗаполнению.Колонки.Добавить("Пени", Новый ОписаниеТипов("Число"));
	ДанныеКЗаполнению.Колонки.Добавить("Списание", Новый ОписаниеТипов("Число"));
	ДанныеКЗаполнению.Колонки.Добавить("Перевод", Новый ОписаниеТипов("Число"));
	
	ДанныеКЗаполнению.Индексы.Добавить("ВидЗадолженности, Счет");
	
	Возврат ДанныеКЗаполнению;
	
КонецФункции

Функция ПолучитьЗаголовкиГраф51Пояснений5()
	
	ЗаголовкиГраф51 = Новый Соответствие;
	ЗаголовкиГраф51.Вставить("04", "На начало года - учтенная по условиям договора");
	ЗаголовкиГраф51.Вставить("05", "На начало года - величина резерва по сомнительным долгам");
	ЗаголовкиГраф51.Вставить("06", "Изменения за период - поступление - в результате хозяйственных операций (сумма долга по сделке, операции)");
	ЗаголовкиГраф51.Вставить("07", "Изменения за период - поступление - причитающиеся проценты, штрафы и иные начисления");
	ЗаголовкиГраф51.Вставить("08", "Изменения за период - выбыло - погашение");
	ЗаголовкиГраф51.Вставить("09", "Изменения за период - выбыло - списание на финансовый результат");
	ЗаголовкиГраф51.Вставить("10", "Изменения за период - выбыло - восстановление резерва");
	ЗаголовкиГраф51.Вставить("11", "Изменения за период - перевод из долго- в краткосрочную задолженность");
	ЗаголовкиГраф51.Вставить("22", "Изменения за период - перевод из дебиторской в кредиторскую задолженность");
	ЗаголовкиГраф51.Вставить("21", "Изменения за период - перевод из кредиторской в дебиторскую задолженность");
	ЗаголовкиГраф51.Вставить("12", "На конец периода - учтенная по условиям договора");
	ЗаголовкиГраф51.Вставить("13", "На конец периода - величина резерва по сомнительным долгам");
	
	Возврат ЗаголовкиГраф51;
	
КонецФункции

Функция ПолучитьЗаголовкиГраф53Пояснений5()
	
	ЗаголовкиГраф53 = Новый Соответствие;
	ЗаголовкиГраф53.Вставить("04", "Остаток на начало года");
	ЗаголовкиГраф53.Вставить("05", "Изменения за период - поступление - в результате хозяйственных операций (сумма долга по сделке, операции)");
	ЗаголовкиГраф53.Вставить("06", "Изменения за период - поступление - причитающиеся проценты, штрафы и иные начисления");
	ЗаголовкиГраф53.Вставить("07", "Изменения за период - выбыло - погашение");
	ЗаголовкиГраф53.Вставить("08", "Изменения за период - выбыло - списание на финансовый результат");
	ЗаголовкиГраф53.Вставить("09", "Изменения за период - перевод из долго- в краткосрочную задолженность");
	ЗаголовкиГраф53.Вставить("21", "Изменения за период - перевод из дебиторской в кредиторскую задолженность");
	ЗаголовкиГраф53.Вставить("22", "Изменения за период - перевод из кредиторской в дебиторскую задолженность");
	ЗаголовкиГраф53.Вставить("10", "Остаток на конец периода");

	Возврат ЗаголовкиГраф53;
	
КонецФункции

Функция КодЯчейкиПоказателяПояснений5(ПараметрыПоказателя, Графа)
	
	ИмяОбластиПоказателя = ПараметрыПоказателя.ИмяОбластиПоказателя + Графа;
	Если ПараметрыПоказателя.НомерДопСтроки <> 0 Тогда
			ИмяОбластиПоказателя = ИмяОбластиПоказателя + "_" + ПараметрыПоказателя.НомерДопСтроки;
	КонецЕсли;
		
	Возврат ИмяОбластиПоказателя;
	
КонецФункции

Процедура ЗаполнитьФормыДебиторскойКредиторскойЗадолженности(КонтекстВыполнения, ЗаполнятьПредыдущиеПериоды, Контейнер)
	
	НачалоПериодаОтчета = КонтекстВыполнения.НачалоПериодаОтчета;
	КонецПериодаОтчета = КонтекстВыполнения.КонецПериодаОтчета;
	Организация = КонтекстВыполнения.Организация;
	
	ПараметрыСтрок = ПараметрыСтрок();
	
#Область ЗапросСтрок

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиБухОтчетности.КодСтроки КАК КодСтроки,
		|	СтрокиБухОтчетности.НаименованиеРасшифровки КАК НаименованиеРасшифровки,
		|	СтрокиБухОтчетности.КодЯчейки КАК КодЯчейки,
		|	АлгоритмыСбораДанныхБухОтчетностиСчета.Счет КАК Счет,
		|	АлгоритмыСбораДанныхБухОтчетностиСчета.Счет.Вид КАК СчетВид,
		|	АлгоритмыСбораДанныхБухОтчетностиСчета.Счет.Долгосрочный КАК СчетДолгосрочный,
		|	СтрокиБухОтчетности.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
		|	СтрокиБухОтчетности.КодЯчейкиПрошлогоПериода КАК КодЯчейкиПрошлогоПериода,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СтрокиБухОтчетности.Родитель.Наименование, 1, 3) = ""7.1""
		|			ТОГДА ""Д""
		|		КОГДА ПОДСТРОКА(СтрокиБухОтчетности.Родитель.Наименование, 1, 3) = ""8.1""
		|			ТОГДА ""К""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ВидЗадолженности,
		|	СтрокиБухОтчетности.Регламентированная КАК Регламентированная,
		|	СтрокиБухОтчетности.ОсновнаяСтрока.КодСтроки КАК КодОсновнойСтроки,
		|	СтрокиБухОтчетности.ФормаОтчетности КАК ФормаОтчетности,
		|	СтрокиБухОтчетности.Ссылка КАК Строка,
		|	ЕСТЬNULL(СтрокиБухОтчетности.ОсновнаяСтрока.Регламентированная, ИСТИНА) КАК ОсновнаяСтрокаРегламентированная,
		|	СтрокиБухОтчетности.Наименование КАК Наименование
		|ПОМЕСТИТЬ ДанныеСтрок
		|ИЗ
		|	Справочник.СтрокиБухОтчетности КАК СтрокиБухОтчетности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АлгоритмыСбораДанныхБухОтчетности.Счета КАК АлгоритмыСбораДанныхБухОтчетностиСчета
		|		ПО СтрокиБухОтчетности.Ссылка = АлгоритмыСбораДанныхБухОтчетностиСчета.Ссылка.Владелец
		|ГДЕ
		|	СтрокиБухОтчетности.ФормаОтчетности В(&ФормаОтчетности)
		|	И НЕ СтрокиБухОтчетности.ПометкаУдаления
		|	И НЕ АлгоритмыСбораДанныхБухОтчетностиСчета.Ссылка.ПометкаУдаления
		|	И СтрокиБухОтчетности.Владелец = &Настройка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Счет КАК Счет,
		|	МАКСИМУМ(Остатки.Вид) КАК Вид
		|ПОМЕСТИТЬ ВидыАПСчетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет КАК Счет,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|				ТОГДА ""А""
		|			ИНАЧЕ ""П""
		|		КОНЕЦ КАК Вид,
		|		ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|		ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|		ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|		ХозрасчетныйОстатки.Валюта КАК Валюта,
		|		ХозрасчетныйОстатки.Подразделение КАК Подразделение,
		|		ХозрасчетныйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
		|				ТОГДА ""А""
		|			ИНАЧЕ ""П""
		|		КОНЕЦ,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Субконто3,
		|		ХозрасчетныйОстатки.Валюта,
		|		ХозрасчетныйОстатки.Подразделение,
		|		ХозрасчетныйОстатки.НаправлениеДеятельности
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный), , Организация = &Организация) КАК ХозрасчетныйОстатки) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Остатки.Вид) = 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ Счета
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	План.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаРБП
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК План
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		ПО (ХозрасчетныйВидыСубконто.Ссылка = План.Ссылка)
		|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов))
		|ГДЕ
		|	План.Ссылка В
		|			(ВЫБРАТЬ
		|				ДанныеСтрок.Счет КАК Счет
		|			ИЗ
		|				ДанныеСтрок КАК ДанныеСтрок)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ СчетаРезервов
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|ГДЕ
		|	ДанныеСтрок.Счет В ИЕРАРХИИ(&СчетРезервов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ АСчета
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|ГДЕ
		|	(ДанныеСтрок.СчетВид = ЗНАЧЕНИЕ(ВидСчета.Активный)
		|			ИЛИ ДанныеСтрок.Счет В
		|				(ВЫБРАТЬ
		|					ВидыАПСчетов.Счет КАК Счет
		|				ИЗ
		|					ВидыАПСчетов КАК ВидыАПСчетов
		|				ГДЕ
		|					ВидыАПСчетов.Вид = ""А""))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ ПСчета
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|ГДЕ
		|	(ДанныеСтрок.СчетВид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|			ИЛИ ДанныеСтрок.Счет В
		|				(ВЫБРАТЬ
		|					ВидыАПСчетов.Счет КАК Счет
		|				ИЗ
		|					ВидыАПСчетов КАК ВидыАПСчетов
		|				ГДЕ
		|					ВидыАПСчетов.Вид = ""П""))
		|	И НЕ ДанныеСтрок.Счет В ИЕРАРХИИ (&СчетРезервов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСтрок.Счет КАК Счет
		|ПОМЕСТИТЬ АПСчета
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|ГДЕ
		|	ДанныеСтрок.СчетВид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
		|	И НЕ ДанныеСтрок.Счет В
		|				(ВЫБРАТЬ
		|					ВидыАПСчетов.Счет КАК Счет
		|				ИЗ
		|					ВидыАПСчетов КАК ВидыАПСчетов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСтрок.КодСтроки КАК КодСтроки,
		|	ДанныеСтрок.НаименованиеРасшифровки КАК НаименованиеРасшифровки,
		|	ДанныеСтрок.КодЯчейки КАК КодЯчейки,
		|	ДанныеСтрок.КодСтрокиПрошлогоПериода КАК КодСтрокиПрошлогоПериода,
		|	ДанныеСтрок.КодЯчейкиПрошлогоПериода КАК КодЯчейкиПрошлогоПериода,
		|	ДанныеСтрок.Счет КАК Счет,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыАПСчетов.Вид, """") = ""П""
		|			ТОГДА ""Пассивные""
		|		КОГДА ЕСТЬNULL(ВидыАПСчетов.Вид, """") = ""А""
		|			ТОГДА ""Активные""
		|		ИНАЧЕ ДанныеСтрок.СчетВид
		|	КОНЕЦ КАК СчетВид,
		|	ДанныеСтрок.СчетДолгосрочный КАК СчетДолгосрочный,
		|	НЕ СчетаРезервов.Счет ЕСТЬ NULL КАК СчетРезервов,
		|	ДанныеСтрок.ВидЗадолженности КАК ВидЗадолженности,
		|	ДанныеСтрок.Регламентированная КАК Регламентированная,
		|	ДанныеСтрок.КодОсновнойСтроки КАК КодОсновнойСтроки,
		|	ДанныеСтрок.ФормаОтчетности КАК ФормаОтчетности,
		|	ДанныеСтрок.Строка КАК Строка,
		|	ДанныеСтрок.ОсновнаяСтрокаРегламентированная КАК ОсновнаяСтрокаРегламентированная,
		|	ДанныеСтрок.Наименование КАК Наименование
		|ИЗ
		|	ДанныеСтрок КАК ДанныеСтрок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРезервов КАК СчетаРезервов
		|		ПО ДанныеСтрок.Счет = СчетаРезервов.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыАПСчетов КАК ВидыАПСчетов
		|		ПО ДанныеСтрок.Счет = ВидыАПСчетов.Счет
		|ИТОГИ ПО
		|	КодСтроки
		|";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Настройка", КонтекстВыполнения.НастройкаЗаполненияБухОтчетности);
	Запрос.УстановитьПараметр("ФормаОтчетности", КонтекстВыполнения.ФормаОтчетности);
	Запрос.УстановитьПараметр("СчетРезервов", ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеКЗаполнению = ПолучитьДанныеДляЗаполненияПояснений5(
							Организация,
							НачалоПериодаОтчета,
							КонецПериодаОтчета,
							Запрос.МенеджерВременныхТаблиц);
		
	Если ЗаполнятьПредыдущиеПериоды Тогда
		ДанныеКЗаполнениюПрошлыйПериод = ПолучитьДанныеДляЗаполненияПояснений5(
											Организация,
											ДобавитьМесяц(НачалоПериодаОтчета, -12),
											КонецМесяца(ДобавитьМесяц(КонецПериодаОтчета, -12)),
											Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
		
	Строки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого Строка Из Строки.Строки Цикл
		
		СтрокаДанных = Строка.Строки[0];
		
		КонтекстВыполнения.КонтейнерРаздела = БухгалтерскаяОтчетностьБРО.НайтиРаздел(Контейнер, ИмяРаздела(СтрокаДанных.ФормаОтчетности));
	
		ПараметрыПоказателя = ПолучитьПараметрыПоказателя();
		ПараметрыПоказателя.КодСтроки = СтрокаДанных.КодСтроки;
		ПараметрыПоказателя.КодОсновнойСтроки = СтрокаДанных.КодОсновнойСтроки;
		
		ЗаполнитьПараметрыПоСтроке(СтрокаДанных, ПараметрыПоказателя, ПараметрыСтрок, КонтекстВыполнения);
	
		ЗаполнитьСтрокуДебиторскойКредиторскойЗадолженности(КонтекстВыполнения, ДанныеКЗаполнению, Строка.Строки, ПараметрыПоказателя);
		
		Если ЗаполнятьПредыдущиеПериоды И ЗначениеЗаполнено(СтрокаДанных.КодСтрокиПрошлогоПериода) Тогда
			
			ПараметрыПоказателя.КодСтроки = СтрокаДанных.КодСтроки;
			ПараметрыПоказателя.КодСтрокиПрошлогоПериода = СтрокаДанных.КодСтрокиПрошлогоПериода;
			
			ЗаполнитьСтрокуДебиторскойКредиторскойЗадолженности(КонтекстВыполнения, ДанныеКЗаполнениюПрошлыйПериод, Строка.Строки, ПараметрыПоказателя);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДебиторскойКредиторскойЗадолженности(КонтекстВыполнения, ДанныеЗаполнения, ДанныеСтроки, ПараметрыПоказателя)
	
	ЗаголовкиГраф71 = ПолучитьЗаголовкиГрафДебиторскойЗадолженности();
	ЗаголовкиГраф81 = ПолучитьЗаголовкиГрафКредиторскойЗадолженности();
	
	РасшифровкаЗаголовок = НСтр("ru = 'Строка %1, графа ""%2""';
								|en = 'Строка %1, графа ""%2""'");
	
	ИтогНачальноеСальдо = 0;
	ИтогКонечноеСальдо  = 0;
	ИтогОборотДт        = 0;
	ИтогОборотКт        = 0;
	ИтогШтраф           = 0;
	ИтогСписание        = 0;
	ИтогРезервыНач      = 0;
	ИтогРезервыКон      = 0;
	ИтогРезервыОборот   = 0;
	ИтогПеревод         = 0;
	
	РасшифровкаНачальноеСальдо = Новый Массив;
	РасшифровкаРезервыНач      = Новый Массив;
	РасшифровкаОборотДт        = Новый Массив;
	РасшифровкаШтраф           = Новый Массив;
	РасшифровкаОборотКт        = Новый Массив;
	РасшифровкаСписание        = Новый Массив;
	РасшифровкаРезервыОборот   = Новый Массив;
	РасшифровкаПеревод         = Новый Массив;
	РасшифровкаКонечноеСальдо  = Новый Массив;
	РасшифровкаРезервыКон      = Новый Массив;

	Для Каждого СтрокаСчета Из ДанныеСтроки Цикл
		
		СтрокаЗаголовок = ЗаполнитьПараметризируемыеНаименования(СтрокаСчета.НаименованиеРасшифровки, КонтекстВыполнения, ПараметрыПоказателя);
		
		СчетНачальноеСальдо = 0;
		СчетКонечноеСальдо  = 0;
		СчетОборотДт        = 0;
		СчетОборотКт        = 0;
		
		СчетШтраф           = 0;
		СчетПени            = 0;
		СчетСписание        = 0;
		СчетПеревод         = 0;
		
		РезервыСальдоНач    = 0;
		РезервыСальдоКон    = 0;
		РезервыОборотДт     = 0;
		
		// Находим соответствие в резуьтате
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидЗадолженности", СтрокаСчета.ВидЗадолженности);
		СтруктураПоиска.Вставить("Счет", СтрокаСчета.Счет);
		
		СчетаРезультата = ДанныеЗаполнения.НайтиСтроки(СтруктураПоиска);
		
		Если СчетаРезультата.Количество()>0 Тогда
			
			СчетНачальноеСальдо = СчетаРезультата[0].НачальноеСальдо;
			СчетКонечноеСальдо  = СчетаРезультата[0].КонечноеСальдо;
			
			Для Каждого СчетРезультата Из СчетаРезультата Цикл
			
				// Делаем подсчет показателя
				Если СтрокаСчета.СчетВид = ВидСчета.АктивноПассивный Тогда
					СчетШтраф = СчетШтраф + СчетРезультата.Штраф;
					СчетПени = СчетПени + СчетРезультата.Пени;
					Если СтрокаСчета.СчетДолгосрочный Тогда
						СчетПеревод = СчетПеревод - СчетРезультата.Перевод;
					Иначе
						СчетПеревод = СчетПеревод + СчетРезультата.Перевод;
					КонецЕсли;
					СчетСписание = СчетСписание + СчетРезультата.Списание;
					
					Если СтрокаСчета.ВидЗадолженности = "Д" Тогда
						СчетОборотДт = СчетОборотДт + СчетРезультата.Дебет;
						СчетОборотКт = СчетОборотКт + СчетРезультата.Кредит;
					ИначеЕсли СтрокаСчета.ВидЗадолженности = "К" Тогда
						СчетОборотКт = СчетОборотКт + СчетРезультата.Кредит - СчетПени - СчетШтраф;
						СчетОборотДт = СчетОборотДт + СчетРезультата.Дебет - СчетСписание;
					КонецЕсли;
				Иначе
					
					Если СтрокаСчета.СчетРезервов = Истина Тогда
						РезервыСальдоНач = РезервыСальдоНач + СчетРезультата.НачальноеСальдо;
						РезервыСальдоКон = РезервыСальдоКон + СчетРезультата.КонечноеСальдо;
						РезервыОборотДт = РезервыОборотДт + СчетРезультата.Дебет;
						
						СчетНачальноеСальдо = СчетНачальноеСальдо - СчетРезультата.НачальноеСальдо;
						СчетКонечноеСальдо  = СчетКонечноеСальдо - СчетРезультата.КонечноеСальдо;
					КонецЕсли;
					
					СчетШтраф = СчетРезультата.Штраф;
					СчетПени = СчетРезультата.Пени;
					СчетСписание = СчетРезультата.Списание;
					СчетПеревод = СчетРезультата.Перевод;
					
					СчетОборотДт = СчетРезультата.Дебет;
					СчетОборотКт = СчетРезультата.Кредит;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Добавим показатели по счету в общие показатели по строке
		ИтогНачальноеСальдо = ИтогНачальноеСальдо + СчетНачальноеСальдо;
		ИтогКонечноеСальдо  = ИтогКонечноеСальдо + СчетКонечноеСальдо;
		ИтогШтраф           = ИтогШтраф  + СчетШтраф + СчетПени;
		ИтогСписание        = ИтогСписание + СчетСписание;
		ИтогПеревод         = ИтогПеревод + СчетПеревод;
		ИтогРезервыНач      = ИтогРезервыНач + РезервыСальдоНач;
		ИтогРезервыКон      = ИтогРезервыКон + РезервыСальдоКон;
		ИтогРезервыОборот   = ИтогРезервыОборот + РезервыОборотДт;
		
		Если СтрокаСчета.ВидЗадолженности = "Д" Тогда
			
			ИтогОборотДт    = ИтогОборотДт + СчетОборотДт - СчетШтраф - СчетПени;
			ИтогОборотКт    = ИтогОборотКт + СчетОборотКт  - СчетСписание;
			
			Если Не СтрокаСчета.СчетРезервов Тогда
				
				Если СтрокаСчета.СчетВид = ВидСчета.Пассивный Тогда
					Расшифровка= ПараметрыСтрокиРасшифровки();
					Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["03"]);
					Расшифровка.ЗнакОперации = "-";
					Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на начало периода по кредиту счета %1 развернутое по всем субконто';
																		|en = 'Сальдо на начало периода по кредиту счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
					Расшифровка.Сумма = -СчетНачальноеСальдо;
					Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
					Расшифровка.Организация = КонтекстВыполнения.Организация;
					РасшифровкаНачальноеСальдо.Добавить(Расшифровка);
				Иначе
					Расшифровка= ПараметрыСтрокиРасшифровки();
					Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["03"]);
					Расшифровка.ЗнакОперации = "+";
					Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на начало периода по дебету счета %1 развернутое по всем субконто';
																		|en = 'Сальдо на начало периода по дебету счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
					Расшифровка.Сумма = СчетНачальноеСальдо;
					Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
					Расшифровка.Организация = КонтекстВыполнения.Организация;
					РасшифровкаНачальноеСальдо.Добавить(Расшифровка);
				КонецЕсли;
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["05"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1 развернутый по всем субконто';
																	|en = 'Оборот по дебету счета %1 развернутый по всем субконто'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетОборотДт;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаОборотДт.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["05"]);
				Расшифровка.ЗнакОперации = "-";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета 91.01 по статьям субконто ""Прочие доходы и расходы""
					|с видом ""Штрафы, пени и неустойки к получению (уплате)"" и ""Проценты к получению (уплате)"" в дебет счета %1 развернутое по всем субконто';
					|en = 'Оборот с кредита счета 91.01 по статьям субконто ""Прочие доходы и расходы""
					|с видом ""Штрафы, пени и неустойки к получению (уплате)"" и ""Проценты к получению (уплате)"" в дебет счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетШтраф;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаОборотДт.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["05"]);
				Расшифровка.ЗнакОперации = "-";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами 
					|""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""';
					|en = 'Оборот по дебету счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами 
					|""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетПени;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаОборотДт.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["06"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета 91.01 по статьям субконто ""Прочие доходы и расходы"" с видом 
					|""Штрафы, пени и неустойки к получению (уплате)"" и ""Проценты к получению (уплате)"" в дебет счета %1 развернутое по всем субконто';
					|en = 'Оборот с кредита счета 91.01 по статьям субконто ""Прочие доходы и расходы"" с видом 
					|""Штрафы, пени и неустойки к получению (уплате)"" и ""Проценты к получению (уплате)"" в дебет счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетШтраф;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаШтраф.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["06"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами
					|""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""';
					|en = 'Оборот по дебету счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами
					|""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетПени;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаШтраф.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["07"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по кредиту счета %1 развернутый по всем субконто';
																	|en = 'Оборот по кредиту счета %1 развернутый по всем субконто'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетОборотКт;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаОборотКт.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["07"]);
				Расшифровка.ЗнакОперации = "-";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом 
					|""Списание дебеторской(кредиторской) задолженности""';
					|en = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом 
					|""Списание дебеторской(кредиторской) задолженности""'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = -СчетСписание;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаОборотКт.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["08"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом 
					|""Списание дебеторской(кредиторской) задолженности""';
					|en = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом 
					|""Списание дебеторской(кредиторской) задолженности""'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетСписание;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаСписание.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["10"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по счету %1 в части реклассификации долгосрочных активов и обязательств';
																	|en = 'Оборот по счету %1 в части реклассификации долгосрочных активов и обязательств'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетПеревод;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаПеревод.Добавить(Расшифровка);
				
				Если СтрокаСчета.СчетВид = ВидСчета.Пассивный Тогда
					Расшифровка= ПараметрыСтрокиРасшифровки();
					Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["11"]);
					Расшифровка.ЗнакОперации = "-";
					Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на конец периода по кредиту счета %1 развернутое по всем субконто';
																		|en = 'Сальдо на конец периода по кредиту счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
					Расшифровка.Сумма = -СчетКонечноеСальдо;
					Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
					Расшифровка.Организация = КонтекстВыполнения.Организация;
					РасшифровкаКонечноеСальдо.Добавить(Расшифровка);
				Иначе
					Расшифровка= ПараметрыСтрокиРасшифровки();
					Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["11"]);
					Расшифровка.ЗнакОперации = "+";
					Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на конец периода по дебету счета %1 развернутое по всем субконто';
																		|en = 'Сальдо на конец периода по дебету счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
					Расшифровка.Сумма = СчетКонечноеСальдо;
					Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
					Расшифровка.Организация = КонтекстВыполнения.Организация;
					РасшифровкаКонечноеСальдо.Добавить(Расшифровка);
				КонецЕсли;
			Иначе
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["04"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на начало периода по кредиту счета %1, развернутое по субконто ""Контрагенты"",""Договоры""';
																	|en = 'Сальдо на начало периода по кредиту счета %1, развернутое по субконто ""Контрагенты"",""Договоры""'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = РезервыСальдоНач;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаРезервыНач.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["09"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1';
																	|en = 'Оборот по дебету счета %1'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = РезервыОборотДт;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаРезервыОборот.Добавить(Расшифровка);
				
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф71["12"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на конец периода по кредиту счета %1, развернутое по субконто ""Контрагенты"",""Договоры""';
																	|en = 'Сальдо на конец периода по кредиту счета %1, развернутое по субконто ""Контрагенты"",""Договоры""'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = РезервыСальдоКон;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаРезервыКон.Добавить(Расшифровка);
			КонецЕсли;
		
		ИначеЕсли СтрокаСчета.ВидЗадолженности = "К" Тогда
			
			ИтогОборотКт    = ИтогОборотКт + СчетОборотКт - СчетШтраф - СчетПени;
			ИтогОборотДт    = ИтогОборотДт + СчетОборотДт - СчетСписание;
			
			Если СтрокаСчета.СчетВид = ВидСчета.Активный Тогда
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["03"]);
				Расшифровка.ЗнакОперации = "-";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на начало периода по дебету счета %1 развернутое по всем субконто';
																	|en = 'Сальдо на начало периода по дебету счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = -СчетНачальноеСальдо;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаНачальноеСальдо.Добавить(Расшифровка);
			Иначе
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["03"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на начало периода по кредиту счета %1 развернутое по всем субконто';
																	|en = 'Сальдо на начало периода по кредиту счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетНачальноеСальдо;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаНачальноеСальдо.Добавить(Расшифровка);
			КонецЕсли;
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["04"]);
			Расшифровка.ЗнакОперации = "+";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по кредиту счета %1 развернутый по всем субконто';
																|en = 'Оборот по кредиту счета %1 развернутый по всем субконто'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = СчетОборотКт;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаОборотКт.Добавить(Расшифровка);
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["04"]);
			Расшифровка.ЗнакОперации = "-";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом 
				|""Штрафы, пени и неустойки к получению (уплате)"" развернутое по всем субконто';
				|en = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом 
				|""Штрафы, пени и неустойки к получению (уплате)"" развернутое по всем субконто'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = -СчетШтраф;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаОборотКт.Добавить(Расшифровка);
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["04"]);
			Расшифровка.ЗнакОперации = "-";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами 
				|""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""';
				|en = 'Оборот с кредита счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами 
				|""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = СчетПени;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаОборотКт.Добавить(Расшифровка);
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["05"]);
			Расшифровка.ЗнакОперации = "+";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом 
				|""Штрафы, пени и неустойки к получению (уплате)"" развернутое по всем субконто';
				|en = 'Оборот с кредита счета %1 в дебет счета 91.02 по статьям субконто ""Прочие доходы и расходы"" с видом 
				|""Штрафы, пени и неустойки к получению (уплате)"" развернутое по всем субконто'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = СчетШтраф;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаШтраф.Добавить(Расшифровка);
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["05"]);
			Расшифровка.ЗнакОперации = "+";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами 
				|""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""';
				|en = 'Оборот с кредита счета %1 по статьям субконто ""Виды платежей в бюджет (фонды)"" с видами 
				|""Пени: доначислено/уплачено(самостоятельно)"", ""Пени: начислено/уплачено(по акту проверки)"" и ""Штраф: начислено/уплачено""'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = СчетПени;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаШтраф.Добавить(Расшифровка);
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["06"]);
			Расшифровка.ЗнакОперации = "+";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по дебету счета %1 развернутый по всем субконто';
																|en = 'Оборот по дебету счета %1 развернутый по всем субконто'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = СчетОборотДт;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаОборотДт.Добавить(Расшифровка);
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["06"]);
			Расшифровка.ЗнакОперации = "-";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета 91.01 в дебет счета %1 по статьям субконто  ""Прочие доходы и расходы"" с видом ""Списание дебеторской(кредиторской) задолженности""';
																|en = 'Оборот с кредита счета 91.01 в дебет счета %1 по статьям субконто  ""Прочие доходы и расходы"" с видом ""Списание дебеторской(кредиторской) задолженности""'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = -СчетСписание;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаОборотДт.Добавить(Расшифровка);
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["07"]);
			Расшифровка.ЗнакОперации = "+";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот с кредита счета 91.01 в дебет счета %1 по статьям субконто  ""Прочие доходы и расходы"" с видом ""Списание дебеторской(кредиторской) задолженности""';
																|en = 'Оборот с кредита счета 91.01 в дебет счета %1 по статьям субконто  ""Прочие доходы и расходы"" с видом ""Списание дебеторской(кредиторской) задолженности""'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = СчетСписание;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаСписание.Добавить(Расшифровка);
			
			Расшифровка= ПараметрыСтрокиРасшифровки();
			Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["08"]);
			Расшифровка.ЗнакОперации = "+";
			Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Оборот по счету %1 в части реклассификации долгосрочных активов и обязательств';
																|en = 'Оборот по счету %1 в части реклассификации долгосрочных активов и обязательств'"), СтрокаСчета.Счет);
			Расшифровка.Сумма = СчетПеревод;
			Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
			Расшифровка.Организация = КонтекстВыполнения.Организация;
			РасшифровкаПеревод.Добавить(Расшифровка);
			
			Если СтрокаСчета.СчетВид = ВидСчета.Активный Тогда
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["09"]);
				Расшифровка.ЗнакОперации = "-";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на конец периода по дебету счета %1 развернутое по всем субконто';
																	|en = 'Сальдо на конец периода по дебету счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетКонечноеСальдо;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаКонечноеСальдо.Добавить(Расшифровка);
			Иначе
				Расшифровка= ПараметрыСтрокиРасшифровки();
				Расшифровка.НаименованиеПоказателя = СтрШаблон(РасшифровкаЗаголовок, СтрокаЗаголовок, ЗаголовкиГраф81["09"]);
				Расшифровка.ЗнакОперации = "+";
				Расшифровка.НаименованиеСлагаемого = СтрШаблон(НСтр("ru = 'Сальдо на конец периода по кредиту счета %1 развернутое по всем субконто';
																	|en = 'Сальдо на конец периода по кредиту счета %1 развернутое по всем субконто'"), СтрокаСчета.Счет);
				Расшифровка.Сумма = СчетКонечноеСальдо;
				Расшифровка.ИмяРаздела = КонтекстВыполнения.ИмяРаздела;
				Расшифровка.Организация = КонтекстВыполнения.Организация;
				РасшифровкаКонечноеСальдо.Добавить(Расшифровка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеСтроки[0].ВидЗадолженности = "Д" Тогда
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "01", ДанныеСтроки[0].Наименование);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаНачальноеСальдо;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "03", ИтогНачальноеСальдо);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаРезервыНач;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "04", -ИтогРезервыНач);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаОборотДт;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "05", ИтогОборотДт);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаШтраф;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "06", ИтогШтраф);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаОборотКт;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "07", -ИтогОборотКт);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаСписание;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "08", -ИтогСписание);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаРезервыОборот;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "09", -ИтогРезервыОборот);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаПеревод;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "10", ИтогПеревод);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаКонечноеСальдо;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "11", ИтогКонечноеСальдо);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаРезервыКон;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "12", -ИтогРезервыКон);
	ИначеЕсли ДанныеСтроки[0].ВидЗадолженности = "К" Тогда
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "01", ДанныеСтроки[0].Наименование);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаНачальноеСальдо;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "03", ИтогНачальноеСальдо);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаОборотКт;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "04", ИтогОборотКт);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаШтраф;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "05", ИтогШтраф);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаОборотДт;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "06", -ИтогОборотДт);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаСписание;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "07", -ИтогСписание);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаПеревод;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "08", ИтогПеревод);
		
		ПараметрыПоказателя.Расшифровка = РасшифровкаКонечноеСальдо;
		УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, "09", ИтогКонечноеСальдо);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьЗаголовкиГрафДебиторскойЗадолженности()
	
	ЗаголовкиГраф = Новый Соответствие;
	ЗаголовкиГраф.Вставить("03", "На начало года - по условиям договора");
	ЗаголовкиГраф.Вставить("04", "На начало года - резерв по сомнительным долгам");
	ЗаголовкиГраф.Вставить("05", "Изменения за период - поступило - в результате фактов хозяйственной жизни (по условиям договора)");
	ЗаголовкиГраф.Вставить("06", "Изменения за период - поступило - проценты, штрафы и иные начисления");
	ЗаголовкиГраф.Вставить("07", "Изменения за период - списано - погашено");
	ЗаголовкиГраф.Вставить("08", "Изменения за период - списано - на расходы");
	ЗаголовкиГраф.Вставить("09", "Изменения за период - списано - восстановление резерва");
	ЗаголовкиГраф.Вставить("10", "Изменения за период - переклассифицировано");
	ЗаголовкиГраф.Вставить("11", "На конец периода - по условиям договора");
	ЗаголовкиГраф.Вставить("12", "На конец периода - резерв по сомнительным долгам");
	
	Возврат ЗаголовкиГраф;
	
КонецФункции

Функция ПолучитьЗаголовкиГрафКредиторскойЗадолженности()
	
	ЗаголовкиГраф = Новый Соответствие;
	ЗаголовкиГраф.Вставить("03", "На начало года");
	ЗаголовкиГраф.Вставить("04", "Изменения за период - поступило - в результате фактов хозяйственной жизни (по условиям договора)");
	ЗаголовкиГраф.Вставить("05", "Изменения за период - поступило - проценты, штрафы и иные начисления");
	ЗаголовкиГраф.Вставить("06", "Изменения за период - списано - погашено");
	ЗаголовкиГраф.Вставить("07", "Изменения за период - списано - на доходы");
	ЗаголовкиГраф.Вставить("08", "Изменения за период - переклассифицировано");
	ЗаголовкиГраф.Вставить("09", "Остаток на конец периода - по условиям договора");

	Возврат ЗаголовкиГраф;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОберткиПроцедурИФункций

Процедура УстановитьЗначениеПоказателя(ПоказателиПоРазделам, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	ЗаполнениеБухгалтерскойОтчетности.УстановитьЗначениеПоказателя(ПоказателиПоРазделам, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено)
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры);
	
КонецПроцедуры

Функция Счет(УсловныйКод)
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет(УсловныйКод);
	
КонецФункции

#КонецОбласти

#Область КонструкторыПеременных

Функция ОборотыСчета75_01()
	
	ОборотыСчета75_01 = Новый Структура;
	ОборотыСчета75_01.Вставить("Графа04", 0);
	ОборотыСчета75_01.Вставить("Графа05", 0);
	ОборотыСчета75_01.Вставить("Графа06", 0);
	
	Возврат ОборотыСчета75_01;
	
КонецФункции

Функция ВычетИзРасчетаАктивов1530()
 	
	ВычетИзРасчетаАктивов1530 = Новый Структура;
	ВычетИзРасчетаАктивов1530.Вставить("Графа04", 0);
	ВычетИзРасчетаАктивов1530.Вставить("Графа05", 0);
	ВычетИзРасчетаАктивов1530.Вставить("Графа06", 0);
	
	Возврат ВычетИзРасчетаАктивов1530;
	
КонецФункции

Функция РассчитанныеПоказатели()
	
	РассчитанныеПоказатели = Новый ТаблицаЗначений;
	РассчитанныеПоказатели.Колонки.Добавить("Раздел");
	РассчитанныеПоказатели.Колонки.Добавить("Показатель");
	РассчитанныеПоказатели.Колонки.Добавить("Сумма");
	
	Возврат РассчитанныеПоказатели;
	
КонецФункции

Функция ТаблицаСведенийСчета75_01()
	
	ТаблицаСведенийСчета75_01 = Новый ТаблицаЗначений;
	ТаблицаСведенийСчета75_01.Колонки.Добавить("Графа");
	ТаблицаСведенийСчета75_01.Колонки.Добавить("Сумма");
	
	Возврат ТаблицаСведенийСчета75_01;
	
КонецФункции

Функция ЗначенияВычетаИзРасчетаАктивов1530()
	
	ЗначенияВычетаИзРасчетаАктивов1530 = Новый ТаблицаЗначений;
	ЗначенияВычетаИзРасчетаАктивов1530.Колонки.Добавить("Графа", Новый ОписаниеТипов("Строка"));
	ЗначенияВычетаИзРасчетаАктивов1530.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Возврат ЗначенияВычетаИзРасчетаАктивов1530;
	
КонецФункции

Функция ПолучитьПараметрыПоказателя()
	
	ПараметрыПоказателя = Новый Структура;
	ПараметрыПоказателя.Вставить("НачалоПериода", "");
	ПараметрыПоказателя.Вставить("КонецПериода", "");
	ПараметрыПоказателя.Вставить("КодСтроки", "");
	ПараметрыПоказателя.Вставить("КодОсновнойСтроки", "");
	ПараметрыПоказателя.Вставить("ДопАлгоритмСтроки", "");
	ПараметрыПоказателя.Вставить("ДопАлгоритмГрафы", "");
	ПараметрыПоказателя.Вставить("ПрошлыйПериод", Ложь);
	ПараметрыПоказателя.Вставить("РегулярнаяГрафа", Неопределено);
	ПараметрыПоказателя.Вставить("КодГода", 0);
	ПараметрыПоказателя.Вставить("ЗначениеПоказателя", 0);
	ПараметрыПоказателя.Вставить("ИмяОбластиПоказателя", "");
	ПараметрыПоказателя.Вставить("КодСтрокиПрошлогоПериода", "");
	ПараметрыПоказателя.Вставить("НаименованиеСтроки", "");
	ПараметрыПоказателя.Вставить("НаименованиеСтрокиРасшифровки", "");
	ПараметрыПоказателя.Вставить("КодГрафы", "");
	ПараметрыПоказателя.Вставить("ГрафаНаименование", "");
	ПараметрыПоказателя.Вставить("НомерДопСтроки", 0);
	ПараметрыПоказателя.Вставить("ТипПоказателя", 0);
	ПараметрыПоказателя.Вставить("УровеньСтроки", "0");
	ПараметрыПоказателя.Вставить("ПрефиксМногострочнойЧасти", "");
	ПараметрыПоказателя.Вставить("МногострочнаяЧастьСтроки", Неопределено);
	ПараметрыПоказателя.Вставить("ИндексОсновнойСтроки", 0);
	ПараметрыПоказателя.Вставить("ОбновитьНаименованиеСтроки", Ложь);
	ПараметрыПоказателя.Вставить("Расшифровка", Новый Массив);
	ПараметрыПоказателя.Вставить("РегламентированнаяСтрока", Ложь);
	
	Возврат ПараметрыПоказателя;
	
КонецФункции

Функция ПараметрыСтрок()
	
	ПараметрыСтрок = Новый Структура;
	ПараметрыСтрок.Вставить("СчетчикОсновныхСтрок", Новый Структура);
	ПараметрыСтрок.Вставить("СчетчикДопСтрок", Новый Структура);
	ПараметрыСтрок.Вставить("ИндексыОсновныхСтрок", Новый Соответствие);
	
	Возврат ПараметрыСтрок;
	
КонецФункции

Функция ПараметрыСтрокиРасшифровки()
	
	ПараметрыСтрокиРасшифровки = Новый Структура;
	ПараметрыСтрокиРасшифровки.Вставить("НаименованиеПоказателя", "");
	ПараметрыСтрокиРасшифровки.Вставить("ЗнакОперации", Неопределено);
	ПараметрыСтрокиРасшифровки.Вставить("НаименованиеСлагаемого", "");
	ПараметрыСтрокиРасшифровки.Вставить("Сумма", 0);
	ПараметрыСтрокиРасшифровки.Вставить("ИмяРаздела", "");
	ПараметрыСтрокиРасшифровки.Вставить("ДополнительныеПараметры", Неопределено);
	ПараметрыСтрокиРасшифровки.Вставить("Организация", Неопределено);
	
	Возврат ПараметрыСтрокиРасшифровки;
	
КонецФункции

#КонецОбласти

#Область НастройкиРасшифровок

Функция НастройкиРасшифровки(Организация, ПараметрыПоказателя, ТипПоказателя, Счета, КорСчета, ОтборПоАналитике)
	
	НастройкиРасшифровки = Неопределено;
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("Организация", Организация);
	
	ПараметрыРасшифровки.Вставить("НачалоПериода", ПараметрыПоказателя.НачалоПериода);
	ПараметрыРасшифровки.Вставить("КонецПериода", ПараметрыПоказателя.КонецПериода);
	ПараметрыРасшифровки.Вставить("РазвернутоеСальдо", Ложь);
	Если ТипПоказателя = "СКДР" ИЛИ ТипПоказателя = "СККР" Тогда
		ПараметрыРасшифровки.РазвернутоеСальдо = Истина;
	КонецЕсли;
	
	Если ТипПоказателя = "ОБ" Тогда 
		Если Счета.Количество() = 1 Тогда
			НастройкиРасшифровки = НастройкиАнализаСчета(ПараметрыРасшифровки, Счета[0], КорСчета, ОтборПоАналитике);
		ИначеЕсли КорСчета.Количество() = 1 Тогда
			НастройкиРасшифровки = НастройкиАнализаСчета(ПараметрыРасшифровки, КорСчета[0], Счета, ОтборПоАналитике);
		КонецЕсли;
	ИначеЕсли ТипПоказателя <> "СОБ" Тогда
		Если Счета.Количество() = 1 Тогда
			НастройкиРасшифровки = НастройкиОСВПоСчету(ПараметрыРасшифровки, Счета[0], ОтборПоАналитике);
			Если ПараметрыРасшифровки.РазвернутоеСальдо = Истина Тогда
				
				ТабличнаяЧастьГруппировка = Новый Массив;
				
				РезультатВидыСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счета[0], "ВидыСубконто");
				Если РезультатВидыСубконто <> Неопределено Тогда
					
					ВидыСубконто = РезультатВидыСубконто.Выгрузить();
					Для Каждого Субконто Из ВидыСубконто Цикл
					
						ОписаниеГруппировки = Новый Структура;
						ОписаниеГруппировки.Вставить("Использование", Истина);
						ОписаниеГруппировки.Вставить("Поле", "Субконто"+Субконто.НомерСтроки);
						ОписаниеГруппировки.Вставить("Представление", Субконто.ВидСубконто);
						ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
						ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
						
					КонецЦикла;
					
					НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Группировка = ТабличнаяЧастьГруппировка;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ОтборПоАналитике = Неопределено Тогда
			НастройкиРасшифровки = НастройкиОСВ(ПараметрыРасшифровки, Счета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено)
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет(Счет));
	Иначе
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка",             Новый Массив);
	
	Если ОбщиеНастройки.Свойство("РазвернутоеСальдо") Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);
	КонецЕсли;
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВ(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено)
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомость.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("Счет");
	
	Счета = Новый СписокЗначений;
	Счета.ЗагрузитьЗначения(Счет);
	ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Счета);
		
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиАнализаСчета(ОбщиеНастройки, Счет, КорСчет, ОтборПоАналитике = Неопределено)
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.АнализСчета.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет(Счет));
	Иначе
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", НЕ ЗначениеЗаполнено(КорСчет));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("КорСчет");
	Если ТипЗнч(КорСчет) = Тип("Строка") Тогда
		КорСчета = Новый СписокЗначений;
		МассивКодовСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КорСчет);
		Для Каждого КодСчета Из МассивКодовСчетов Цикл
			КорСчета.Добавить(Счет(СокрЛП(КодСчета)));
		КонецЦикла;
		ВидСравненияСчетов = ?(МассивКодовСчетов.Количество() > 1, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВИерархии);
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияСчетов, КорСчета);
	ИначеЕсли ТипЗнч(КорСчет) = Тип("Массив") Тогда
		КорСчета = Новый СписокЗначений;
		КорСчета.ЗагрузитьЗначения(КорСчет);
		ВидСравненияСчетов = ?(КорСчет.Количество() > 1, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВИерархии);
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияСчетов, КорСчета);
	Иначе 
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВИерархии, КорСчет);
	КонецЕсли;
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоВидуДДС(ОбщиеНастройки, Счет, ВидДДС)
	
	ОтборПоАналитике = Новый Соответствие;
	ВидыСубконто = Счет.ВидыСубконто; //ПланСчетовВидыСубконто.Хозрасчетный
	НомерСубконто = 0;
	
	Для Каждого Субконто Из ВидыСубконто Цикл
		Если Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств Тогда
			НомерСубконто = Субконто.НомерСтроки;
			ОтборПоАналитике.Вставить("Субконто" + НомерСубконто + ".ВидДвиженияДенежныхСредств", ВидДДС);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	Если НомерСубконто > 0 Тогда
		ТабличнаяЧастьГруппировка = Новый Массив;
		
		ОписаниеГруппировки = Новый Структура;
		ОписаниеГруппировки.Вставить("Использование", Истина);
		ОписаниеГруппировки.Вставить("Поле", "Субконто" + НомерСубконто);
		ОписаниеГруппировки.Вставить("Представление", НСтр("ru = 'Статьи движения денежных средств';
															|en = 'Cash flow items'"));
		ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
		ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	КонецЕсли;
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеМакетовСКД

Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение) Экспорт
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

Функция ПолучитьВидМакета(ТипПоказателя, КорСчета, ПараметрыПоказателя)
	
	Если ТипПоказателя = "ОБ" Тогда
		
		Если КорСчета.Количество()=0 Тогда
			Возврат "СальдоИОборотыПоСчетам";
		ИначеЕсли ДопАлгоритмОтбораПоДокументам(ПараметрыПоказателя.ДопАлгоритмСтроки) Тогда
			Возврат "ОборотыМеждуСчетамиПоТипуДокумента";
		Иначе
			Возврат "ОборотыМеждуСчетами";
		КонецЕсли;
	ИначеЕсли ТипПоказателя = "СКДР" ИЛИ ТипПоказателя = "СККР" Тогда
		Возврат "СальдоИОборотыПоСчетамИСубконто";
	Иначе
		Возврат "СальдоИОборотыПоСчетам";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяПакетаДанных(ВидМакета, ПараметрыПоказателя)
	
	ИмяПакетаДанных = ВидМакета;
	
	Если ДопАлгоритмОтбораПоДокументам(ПараметрыПоказателя.ДопАлгоритмСтроки) Тогда
		ИмяПакетаДанных = ВидМакета + ПараметрыПоказателя.ДопАлгоритмСтроки;
	ИначеЕсли ПараметрыПоказателя.ТипПоказателя = "СОБ" Тогда
		ИмяПакетаДанных = ПараметрыПоказателя.ТипПоказателя;
	КонецЕсли;
	
	Возврат ИмяПакетаДанных;
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполнения

Функция СтрокаОтчетаЗаполняется(Строка, КонтекстВыполнения)
	
	СтрокаЗаполняется = Истина;
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		КодыСтрокБезРедактирования = Справочники.СтрокиБухОтчетности.КодыСтрокДебиторскойКредиторскойЗадолженности();
		Если ЗначениеЗаполнено(Строка.КодОсновнойСтроки) Тогда
			Если КодыСтрокБезРедактирования.Найти(Строка.КодОсновнойСтроки) <> Неопределено Тогда
				СтрокаЗаполняется = Ложь;
			КонецЕсли;
		Иначе
			 Если КодыСтрокБезРедактирования.Найти(Строка.КодСтроки) <> Неопределено Тогда
				СтрокаЗаполняется = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаЗаполняется;
	
КонецФункции

Функция СтрокаЗаполняетсяСтандартно(ПараметрыПоказателя)

	Если ПараметрыПоказателя.ДопАлгоритмСтроки = "НМАСПогашеннойСтоимостью" Тогда
		Возврат Ложь;
	ИначеЕсли ПараметрыПоказателя.ДопАлгоритмСтроки = "ПервоначальнаяСтоимостьНМА" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПоказательЗаполняетсяСтандартно(ДопАлгоритм)
	
	Если ДопАлгоритм = "ОДДС" Тогда
		Возврат Ложь;
	ИначеЕсли ДопАлгоритм = "ОДДС_Агентские" Тогда
		Возврат Ложь;
	ИначеЕсли ДопАлгоритм = "ОДДС_НДС" Тогда
		Возврат Ложь;
	ИначеЕсли ДопАлгоритм = "ОДДС_ФормаОтчета2025Кв1" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомСтрокОтчета

Процедура УстановитьЗначениеФиксированногоПоказателя(Раздел, ПараметрыПоказателя)
	
	ИмяПоказателя = ПараметрыПоказателя.ИмяОбластиПоказателя;
	ЗначениеПоказателя = ПараметрыПоказателя.ЗначениеПоказателя;
	
	ПараметрыПоискаПоказателя = Новый Структура("Тип, Идентификатор", "Показатель", ИмяПоказателя);
	СтрокиПоказателей = Раздел.Строки.НайтиСтроки(ПараметрыПоискаПоказателя);
	
	Если СтрокиПоказателей.Количество() > 0 Тогда
		СтрокаПоказателя = СтрокиПоказателей[0];
	Иначе
		СтрокаПоказателя = Раздел.Строки.Добавить();
		СтрокаПоказателя.Тип = "Показатель";
		СтрокаПоказателя.Идентификатор = ИмяПоказателя;
	КонецЕсли;
	
	Если СтрокаПоказателя.Данные <> Неопределено И ТипЗнч(СтрокаПоказателя.Данные) = Тип("Число") Тогда
		ЗначениеПоказателя = ЗначениеПоказателя + СтрокаПоказателя.Данные;
	КонецЕсли;
	СтрокаПоказателя.Данные = ЗначениеПоказателя;
	
	ДобавитьРасшифровкуВстрокуДерева(СтрокаПоказателя, ПараметрыПоказателя);
	
КонецПроцедуры

Функция СтрокаМногострочнойЧасти(МногострочнаяЧасть, Индекс, УровеньСтроки)
	
	Строка = Неопределено;
	
	Если МногострочнаяЧасть <> Неопределено Тогда
		Если МногострочнаяЧасть.Строки.Количество()< Индекс + 1 Тогда 
			Для СЧ = 1 По Индекс + 1- МногострочнаяЧасть.Строки.Количество() Цикл
				
				БухгалтерскаяОтчетностьБРО.ДобавитьСтрокуМногострочнойЧасти(МногострочнаяЧасть);
				
				Если УровеньСтроки = "А" Тогда
					
					МногострочнаяЧастьБОбразец = БухгалтерскаяОтчетностьБРО.НайтиМногострочнуюЧасть(МногострочнаяЧасть.Строки[0]);
					Если МногострочнаяЧастьБОбразец <> Неопределено Тогда
						
						Сиблинги = НайтиСтрокиДереваДанных(МногострочнаяЧастьБОбразец, Новый Структура("Тип", "Строка"));
						Образец = Сиблинги[0];
						
						МногострочнаяЧастьБ = МногострочнаяЧасть.Строки[СЧ].Строки.Добавить();
						ЗаполнитьЗначенияСвойств(МногострочнаяЧастьБ, МногострочнаяЧастьБОбразец);
						
						СтрокаБМногострочнаяЧасть = МногострочнаяЧастьБ.Строки.Добавить();
						СтрокаБМногострочнаяЧасть.Тип = "Строка";
						
						Для Каждого ОбразецПоказателя Из НайтиСтрокиДереваДанных(Образец, Новый Структура("Тип", "Показатель")) Цикл
							НовыйПоказатель = СтрокаБМногострочнаяЧасть.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйПоказатель, ОбразецПоказателя, "Тип, Идентификатор, Данные");
							БухгалтерскаяОтчетностьБРО.ОчиститьЗначениеЯчейки(НовыйПоказатель);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Строка = МногострочнаяЧасть.Строки[Индекс];
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция ЯчейкаОтчета(Строка, ПараметрыПоказателя) Экспорт
	
	ИдентификаторСтроки = "";
	Родитель            = Строка;
	
	Если Не ЗначениеЗаполнено(ПараметрыПоказателя.ИмяОбластиПоказателя) Тогда
		Если БухгалтерскаяОтчетностьБРО.ЭтоОписаниеФиксированнойСтроки(Строка) Тогда
			ИдентификаторСтроки = Строка.ИдентификаторДляЯчеек;
			Родитель            = Строка.Раздел;
		Иначе
			ИдентификаторСтроки = Строка.Родитель.Идентификатор;
		КонецЕсли;
		
		ИдентификаторЯчейки = БухгалтерскаяОтчетностьБРО.ИдентификаторЯчейки(ИдентификаторСтроки, ПараметрыПоказателя.КодГрафы);
		
	Иначе
		ИдентификаторЯчейки = ПараметрыПоказателя.ИмяОбластиПоказателя;
	КонецЕсли;
	
	Отбор = Новый Структура("Тип,Идентификатор", "Показатель", ИдентификаторЯчейки);
	
	Найденные = Родитель.Строки.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(Найденные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Найденные[0];

КонецФункции

Процедура УстановитьЗначениеЯчейки(Строка, ПараметрыПоказателя)
	
	Ячейка = ЯчейкаОтчета(Строка, ПараметрыПоказателя);
	ЗначениеПоказателя = ПараметрыПоказателя.ЗначениеПоказателя;
	Если Ячейка <> Неопределено И ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ЗначениеПоказателя = ЗначениеПоказателя + ?(ТипЗнч(Ячейка.Данные) = Тип("Число"), Ячейка.Данные, 0);
	КонецЕсли;
	БухгалтерскаяОтчетностьБРО.УстановитьЗначениеЯчейки(Ячейка, ЗначениеПоказателя);
	ДобавитьРасшифровкуВстрокуДерева(Ячейка, ПараметрыПоказателя);
	
КонецПроцедуры

Функция ОпределитьИмяОбластиПоказателя(ПараметрыПоказателя, КонтекстВыполнения)
	
	ИмяОбластиПоказателя = "";
	Если ПараметрыПоказателя.УровеньСтроки = "0" Тогда
		Если ЗначениеЗаполнено(ПараметрыПоказателя.КодСтрокиПрошлогоПериода) Тогда
			Если ЗначениеЗаполнено(ПараметрыПоказателя.КодОсновнойСтроки) Тогда
				ИмяОбластиПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторЯчейки(
					БухгалтерскаяОтчетностьБРО.ИдентификаторСтроки(ПараметрыПоказателя.КодСтрокиПрошлогоПериода, ПараметрыПоказателя.УровеньСтроки),
					ПараметрыПоказателя.КодГрафы);
			Иначе
				ИмяОбластиПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторЯчейки(
					БухгалтерскаяОтчетностьБРО.ИдентификаторФиксированнойСтрокиДляЯчеек(ПараметрыПоказателя.КодСтрокиПрошлогоПериода),
					ПараметрыПоказателя.КодГрафы);
				КонецЕсли;
		ИначеЕсли КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС
				И ПараметрыПоказателя.РегламентированнаяСтрока = Истина Тогда
					ИмяОбластиПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторЯчейки(
						БухгалтерскаяОтчетностьБРО.ИдентификаторФиксированнойСтрокиДляЯчеек(ПараметрыПоказателя.КодСтроки),
						ПараметрыПоказателя.КодГрафы);
		ИначеЕсли Не ЗначениеЗаполнено(ПараметрыПоказателя.КодОсновнойСтроки) Тогда
			ИмяОбластиПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторЯчейки(
				БухгалтерскаяОтчетностьБРО.ИдентификаторФиксированнойСтрокиДляЯчеек(ПараметрыПоказателя.КодСтроки),
				ПараметрыПоказателя.КодГрафы);
		Иначе
			ИмяОбластиПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторЯчейки(
				ПараметрыПоказателя.ПрефиксМногострочнойЧасти,
				ПараметрыПоказателя.КодГрафы);
		КонецЕсли;
	Иначе
		ИмяОбластиПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторЯчейки(
			ПараметрыПоказателя.ПрефиксМногострочнойЧасти,
			ПараметрыПоказателя.КодГрафы);
	КонецЕсли;
	
	Возврат ИмяОбластиПоказателя;

КонецФункции

Процедура УстановитьЗначениеЯчейкиСтроки(КонтекстВыполнения, ПараметрыПоказателя, КодГрафы, Значение)
	
	ПараметрыПоказателя.КодГрафы = КодГрафы;
	ПараметрыПоказателя.ИмяОбластиПоказателя = ОпределитьИмяОбластиПоказателя(ПараметрыПоказателя, КонтекстВыполнения);
	ПараметрыПоказателя.ЗначениеПоказателя = Значение;
	УстановитьЗначениеПоказателяФормаОтчета2025Кв1(КонтекстВыполнения, ПараметрыПоказателя);
	
КонецПроцедуры

// Находит все подстроки дерева данных, соответствующие отбору, в том порядке, в котором они содержатся в дереве.
// Метод следует использовать, когда предполагается несколько строк, соответствующих отбору, и их порядок важен для дальнейшей обработки.
//
// Параметры:
//  ЯчейкаЗначения - СтрокаДереваЗначений - строка коллекции НовоеДеревоДанныхРазделов
//  Отбор - Структура - отбор строк; Ключи - колонки дерева
//
// Возвращаемое значение:
//  Массив из СтрокаДереваЗначений - найденные строки коллекции НовоеДеревоДанныхРазделов
//
Функция НайтиСтрокиДереваДанных(Родитель, Отбор)
	
	Поиск = Новый ТаблицаЗначений;
	Поиск.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Поиск.Колонки.Добавить("Значение");
	
	НеупорядоченныйРезультат = Родитель.Строки.НайтиСтроки(Отбор);
	Для Каждого Строка Из НеупорядоченныйРезультат Цикл
		СтрокаПоиска = Поиск.Добавить();
		СтрокаПоиска.Индекс = Родитель.Строки.Индекс(Строка);
		СтрокаПоиска.Значение = Строка;
	КонецЦикла;
	
	Поиск.Сортировать("Индекс");
	Возврат Поиск.ВыгрузитьКолонку("Значение");
	
КонецФункции

#КонецОбласти

Функция ВычислитьПоказательПоТипу(ТипПоказателя, Данные, Счета, КорСчета = Неопределено, Группировки = Неопределено, ПараметрыПоказателя = Неопределено)
	
	ЗначениеСлагаемого = 0;
	МассивСчетов = Новый Массив();
	МассивКорСчетов = Новый Массив();
	Если ТипЗнч(Счета) = Тип("Строка") Тогда
		МассивСчетов.Добавить(Счета);
	Иначе
		МассивСчетов = Счета;
	КонецЕсли;
	Если ТипЗнч(КорСчета) = Тип("Строка") Тогда
		МассивКорСчетов.Добавить(КорСчета);
	ИначеЕсли КорСчета<>Неопределено Тогда
		МассивКорСчетов = КорСчета;
	КонецЕсли;
	
	Если ТипПоказателя = "СОБ" Тогда
		ЗначениеСлагаемого = ЗначениеСлагаемого + СОБ(Счета, Группировки, Данные, ПараметрыПоказателя);
	Иначе
		Для Каждого Счет Из МассивСчетов Цикл;
			Если ТипПоказателя = "СКК" Тогда
				ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.СКК(Счет, Данные);
			ИначеЕсли ТипПоказателя = "СКД" Тогда
				ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД(Счет, Данные);
			ИначеЕсли ТипПоказателя = "СКДР" Тогда
				ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.СКДР(Счет, Данные);
			ИначеЕсли ТипПоказателя = "СККР" Тогда
				ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.СККР(Счет, Данные);
			ИначеЕсли ТипПоказателя = "СНД" Тогда
				ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.СНД(Счет, Данные);
			ИначеЕсли ТипПоказателя = "СНК" Тогда
				ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.СНК(Счет, Данные);
			ИначеЕсли ТипПоказателя = "ДО" Тогда
				ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.ДО(Счет, Данные);
			ИначеЕсли ТипПоказателя = "КО" Тогда
				ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.КО(Счет, Данные);
			ИначеЕсли ТипПоказателя = "ОБ" Тогда
				Если МассивКорСчетов.Количество()<>0 Тогда
					Для Каждого КорСчет Из МассивКорСчетов Цикл
						ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.ОБ(Счет, КорСчет, Данные);
					КонецЦикла;
				Иначе
					ЗначениеСлагаемого = ЗначениеСлагаемого + ЗаполнениеБухгалтерскойОтчетностиИтоги.ОБР(Счет, Данные);
				КонецЕсли;
			Иначе
				ЗначениеСлагаемого = ЗначениеСлагаемого + 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеСлагаемого;
	
КонецФункции

Функция СОБ(Счета, Группировки, Данные, ПараметрыПоказателя)
	
	ЗначениеПоказателя = 0;
	
	Если Данные.Количество()>0 Тогда

		Если ТипЗнч(Данные[0].СуммаСвернутыйОборот) <> Тип("Null") Тогда
			
			Поля = Новый Массив;
			Поля.Добавить("Субконто1");
			Поля.Добавить("Субконто2");
			Поля.Добавить("Субконто3");
			Поля.Добавить("Подразделение");
			Поля.Добавить("НаправлениеДеятельности");
			
			Запрос = Новый Запрос; 
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = 
				"ВЫБРАТЬ *
				|ПОМЕСТИТЬ ВтДанные
				|ИЗ
				|	&Данные КАК Данные
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СУММА(ЕСТЬNULL(ВтДанные.СуммаСвернутыйОборот,0)) КАК СуммаСвернутыйОборот,
				|	&Поле1 КАК Субконто1,
				|	&Поле2 КАК Субконто2,
				|	&Поле3 КАК Субконто3,
				|	&Поле4 КАК Подразделение,
				|	&Поле5 КАК НаправлениеДеятельности
				|ПОМЕСТИТЬ ВтГруппировка
				|ИЗ
				|	ВтДанные КАК ВтДанные
				|ГДЕ
				|	ВтДанные.Счет В(&Счета)
				|	
				|СГРУППИРОВАТЬ ПО
				|	&Поле1,
				|	&Поле2,
				|	&Поле3,
				|	&Поле4,
				|	&Поле5
				|
				|ИМЕЮЩИЕ СУММА(ЕСТЬNULL(ВтДанные.СуммаСвернутыйОборот,0)) >0
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СУММА(ЕСТЬNULL(ВтГруппировка.СуммаСвернутыйОборот,0)) КАК СуммаСвернутыйОборот
				|ИЗ
				|	ВтГруппировка КАК ВтГруппировка
				|";
			
			Для Сч = 1 По 5 Цикл
				Поле = Поля.Получить(Сч-1);
				Если Группировки.Найти(Поле, "ПутьКДанным") <> Неопределено Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поле" + Сч, "ВтДанные." + Поле);
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поле" + Сч, "НЕОПРЕДЕЛЕНО");
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыПоказателя.ДопАлгоритмСтроки = ">0"
				ИЛИ ПараметрыПоказателя.ДопАлгоритмСтроки = "<0" Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, ">0", ПараметрыПоказателя.ДопАлгоритмСтроки);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИМЕЮЩИЕ СУММА(ВтДанные.СуммаСвернутыйОборот) >0", "");
			КонецЕсли;

			Запрос.УстановитьПараметр("Данные", Данные);
			Запрос.УстановитьПараметр("Счета", Счета);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Если ТипЗнч(ВыборкаДетальныеЗаписи.СуммаСвернутыйОборот) <> Тип("Null") Тогда
					ЗначениеПоказателя = ВыборкаДетальныеЗаписи.СуммаСвернутыйОборот;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Процедура ДобавитьРегулярныеГрафыФормы(КонтекстВыполнения)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		ДобавитьРегулярныеГрафыФормыФормаОтчета2025Кв1(КонтекстВыполнения);
	Иначе
		ДобавитьРегулярныеГрафыФормыФормаОтчета2019Кв1(КонтекстВыполнения);
	КонецЕсли;

КонецПроцедуры

Функция НоваяТаблицаМногострочнойЧасти(КодСтроки) Экспорт
	
	МногострочнаяЧасть = Новый ТаблицаЗначений;
		
	Если КодСтроки = "5130" Тогда
		
		МногострочнаяЧасть.Колонки.Добавить("П100100513001", Новый ОписаниеТипов("Строка"));
		МногострочнаяЧасть.Колонки.Добавить("П100100513003", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
		МногострочнаяЧасть.Колонки.Добавить("П100100513004", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
		МногострочнаяЧасть.Колонки.Добавить("П100100513005", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
		
		Возврат МногострочнаяЧасть;
	КонецЕсли;
	
	Если КодСтроки = "5140" Тогда
		
		МногострочнаяЧасть.Колонки.Добавить("П100100514001", Новый ОписаниеТипов("Строка"));
		
		МногострочнаяЧасть.Колонки.Добавить("П100100514004", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100514005", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100514006", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100514007", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100514008", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100514009", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100514010", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100514011", Новый ОписаниеТипов("Число"));
		
		МногострочнаяЧасть.Колонки.Добавить("П100100515004", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100515005", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100515006", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100515007", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100515008", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100515009", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100515010", Новый ОписаниеТипов("Число"));
		МногострочнаяЧасть.Колонки.Добавить("П100100515011", Новый ОписаниеТипов("Число"));
		
		Возврат МногострочнаяЧасть;
	КонецЕсли;
	
КонецФункции

Процедура СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок)
	
	СписокГрафДляГруппировки = "";
	СписокГрафДляСуммирования = "";
	
	Для Каждого Колонка Из ТаблицаЗначенийДопСтрок.Колонки Цикл
		
		КолонкаСуммируется = (Колонка.ТипЗначения.СодержитТип(Тип("Число")));
		
		Если КолонкаСуммируется Тогда
			СписокГрафДляСуммирования = СписокГрафДляСуммирования + ?(ПустаяСтрока(СписокГрафДляСуммирования), "", ", ") + Колонка.Имя;
		Иначе
			СписокГрафДляГруппировки = СписокГрафДляГруппировки + ?(ПустаяСтрока(СписокГрафДляГруппировки), "", ", ") + Колонка.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗначенийДопСтрок.Свернуть(СписокГрафДляГруппировки, СписокГрафДляСуммирования);
	
КонецПроцедуры

Функция ПолучитьОтборПоВидамСубконто(Счета)
	
	МаксКоличествоСубконто = БухгалтерскийУчет.МаксимальноеКоличествоСубконто();
	
	ДанныеСчетов = ОбщиеСубконтоСчетов(Счета, МаксКоличествоСубконто);
	
	ВидыСубконто = Новый СписокЗначений;
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		Если ДанныеСчетов["ВидСубконто" + Индекс] <> Неопределено Тогда
			ВидСубконто = ДанныеСчетов["ВидСубконто" + Индекс];
			Если ВидСубконто <> Неопределено Тогда
				ВидыСубконто.Добавить(ВидСубконто);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ВидыСубконто;
	
КонецФункции

Функция ЗаполнитьПараметризируемыеНаименования(Наименование, КонтекстВыполнения, ПараметрыПоказателя = Неопределено)
	
	ЗаголовокШаблон = НСтр("ru = '%1 г.';
							|en = '%1'");
	
	ЗаголовокКонецТекПериода = СтрШаблон(ЗаголовокШаблон, Формат(КонтекстВыполнения.КонецПериодаОтчета, "ДФ = 'дд ММММ гггг'"));
	ЗаголовокКонецСравнительногоПериода = СтрШаблон(ЗаголовокШаблон, Формат(КонецМесяца(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-1*12)), "ДФ = 'дд ММММ гггг'"));
	ЗаголовокКонецГодаСравнительногоПериода = СтрШаблон(ЗаголовокШаблон, Формат(КонецГода(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-1*12)), "ДФ = 'дд ММММ гггг'"));
	ЗаголовокНачалоСравнительногоПериода = СтрШаблон(ЗаголовокШаблон, Формат(ДобавитьМесяц(КонтекстВыполнения.КонецПериодаОтчета,-2*12), "ДФ = 'дд ММММ гггг'"));
	
	Если СтрНайти(Наименование, "[конец текущего периода]") <> 0 Тогда
		Наименование = СтрЗаменить(Наименование, "[конец текущего периода]", ЗаголовокКонецТекПериода);
	КонецЕсли;
	
	Если СтрНайти(Наименование, "[конец сравнительного периода]") <> 0 Тогда
		Наименование = СтрЗаменить(Наименование, "[конец сравнительного периода]", ЗаголовокКонецСравнительногоПериода);
	КонецЕсли;
	
	Если СтрНайти(Наименование, "[начало сравнительного периода]") <> 0 Тогда
		Наименование = СтрЗаменить(Наименование, "[начало сравнительного периода]", ЗаголовокНачалоСравнительногоПериода);
	КонецЕсли;
	
	Если СтрНайти(Наименование, "[конец года сравнительного периода]") <> 0 Тогда
		Наименование = СтрЗаменить(Наименование, "[конец года сравнительного периода]", ЗаголовокКонецГодаСравнительногоПериода);
	КонецЕсли;
	
	Если ПараметрыПоказателя <> Неопределено И ПараметрыПоказателя.Свойство("КодСтрокиПрошлогоПериода") Тогда
		Если ПараметрыПоказателя.КодСтрокиПрошлогоПериода <> "" Тогда
			Наименование = СтрЗаменить(Наименование, ПараметрыПоказателя.КодСтроки, ПараметрыПоказателя.КодСтрокиПрошлогоПериода);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Функция ЗаполнениеФормОтчетности(ПараметрыОтчета, РедакцияФормы = Неопределено)
	
	ЗаполнениеФормОтчетности = Новый Структура;
	
	Если РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		
		ЗаполняемыеРазделы = ПараметрыОтчета.ЗаполняемыеРазделы;
		
		ЗаполнениеФормОтчетности.Вставить("Баланс", ЗаполняемыеРазделы.Баланс);
		ЗаполнениеФормОтчетности.Вставить("ОФР", ЗаполняемыеРазделы.ОФР);
		ЗаполнениеФормОтчетности.Вставить("ОИК", ЗаполняемыеРазделы.ОИК);
		ЗаполнениеФормОтчетности.Вставить("ОДДС", ЗаполняемыеРазделы.ОДДС);
		ЗаполнениеФормОтчетности.Вставить("ОЦИПС", ЗаполняемыеРазделы.ОЦИС);
		ЗаполнениеФормОтчетности.Вставить("Пояснения3", ЗаполняемыеРазделы.Пояснения3);
		ЗаполнениеФормОтчетности.Вставить("Пояснения4", ЗаполняемыеРазделы.Пояснения4);
		ЗаполнениеФормОтчетности.Вставить("Пояснения5", ЗаполняемыеРазделы.Пояснения5);
		ЗаполнениеФормОтчетности.Вставить("Пояснения6", ЗаполняемыеРазделы.Пояснения6);
		ЗаполнениеФормОтчетности.Вставить("Пояснения7", ЗаполняемыеРазделы.Пояснения7);
		ЗаполнениеФормОтчетности.Вставить("Пояснения8", ЗаполняемыеРазделы.Пояснения8);
		ЗаполнениеФормОтчетности.Вставить("Пояснения9", ЗаполняемыеРазделы.Пояснения9);
		ЗаполнениеФормОтчетности.Вставить("Пояснения10", ЗаполняемыеРазделы.Пояснения10);
		ЗаполнениеФормОтчетности.Вставить("Пояснения11", ЗаполняемыеРазделы.Пояснения11);
	Иначе
		ЗаполнятьБаланс = НЕ ПараметрыОтчета.Свойство("ЗаполнятьБаланс")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьБаланс") И ПараметрыОтчета.ЗаполнятьБаланс);
		ЗаполнениеФормОтчетности.Вставить("Баланс", ЗаполнятьБаланс);
		
		ЗаполнятьОФР = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОФР")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьОФР") И ПараметрыОтчета.ЗаполнятьОФР);
		ЗаполнениеФормОтчетности.Вставить("ОФР", ЗаполнятьОФР);
		
		ЗаполнятьОИК = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОИК")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьОИК") И ПараметрыОтчета.ЗаполнятьОИК);
		ЗаполнениеФормОтчетности.Вставить("ОИК", ЗаполнятьОИК);
		
		ЗаполнятьОДДС = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОДДС")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьОДДС") И ПараметрыОтчета.ЗаполнятьОДДС);
		ЗаполнениеФормОтчетности.Вставить("ОДДС", ЗаполнятьОДДС);
		
		ЗаполнятьОЦИПС = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОЦИПС")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьОЦИПС") И ПараметрыОтчета.ЗаполнятьОЦИПС);
		ЗаполнениеФормОтчетности.Вставить("ОЦИПС", ЗаполнятьОЦИПС);
		
		ЗаполнятьПояснения1 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьПояснения1")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьПояснения1") И ПараметрыОтчета.ЗаполнятьПояснения1);
		ЗаполнениеФормОтчетности.Вставить("Пояснения1", ЗаполнятьПояснения1);

		ЗаполнятьПояснения2 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьПояснения2")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьПояснения2") И ПараметрыОтчета.ЗаполнятьПояснения2);
		ЗаполнениеФормОтчетности.Вставить("Пояснения2", ЗаполнятьПояснения2);
		
		ЗаполнятьПояснения4 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьПояснения4")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьПояснения4") И ПараметрыОтчета.ЗаполнятьПояснения4);
		ЗаполнениеФормОтчетности.Вставить("Пояснения4", ЗаполнятьПояснения4);
		
		ЗаполнятьПояснения5 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьПояснения5")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьПояснения5") И ПараметрыОтчета.ЗаполнятьПояснения5);
		ЗаполнениеФормОтчетности.Вставить("Пояснения5", ЗаполнятьПояснения5);
		
		ЗаполнятьПояснения6 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьПояснения6")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьПояснения6") И ПараметрыОтчета.ЗаполнятьПояснения6);
		ЗаполнениеФормОтчетности.Вставить("Пояснения6", ЗаполнятьПояснения6);

		
		ЗаполнятьПояснения7 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьПояснения7")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьПояснения7") И ПараметрыОтчета.ЗаполнятьПояснения7);
		ЗаполнениеФормОтчетности.Вставить("Пояснения7", ЗаполнятьПояснения7);
		
		ЗаполнятьПояснения8 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьПояснения8")
			ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьПояснения8") И ПараметрыОтчета.ЗаполнятьПояснения8);
		ЗаполнениеФормОтчетности.Вставить("Пояснения8", ЗаполнятьПояснения8);
	КонецЕсли;
	
	Возврат ЗаполнениеФормОтчетности;
	
КонецФункции

Процедура ОпределитьНомераСтрок(Строка, ПараметрыПоказателя, ПараметрыСтрок, КонтекстВыполнения)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		ОпределитьНомераСтрокФормаОтчета2025Кв1(Строка, ПараметрыПоказателя, ПараметрыСтрок);
	Иначе
		ОпределитьНомерДопСтроки(Строка, ПараметрыПоказателя, ПараметрыСтрок);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеМногострочнойЧасти(Строка, ПараметрыСтроки, ПараметрыПоказателя, КонтекстВыполнения)
	
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		
		Раздел = КонтекстВыполнения.КонтейнерРаздела;
		ПрефиксУровня = "0";
		
		Если КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс
			ИЛИ КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР Тогда
			
			Если (Строка.КодОсновнойСтроки = "" И Не Строка.Регламентированная)
				ИЛИ (Строка.КодОсновнойСтроки <> "" И Не Строка.ОсновнаяСтрокаРегламентированная) Тогда
				ПрефиксУровня = "А";
			КонецЕсли;
		КонецЕсли;
		
		КодСтроки = ?(Строка.КодОсновнойСтроки <> "", Строка.КодОсновнойСтроки, Строка.КодСтроки);
		
		ПараметрыПоказателя.УровеньСтроки = ПрефиксУровня;
		ПараметрыПоказателя.ПрефиксМногострочнойЧасти = БухгалтерскаяОтчетностьБРО.ИдентификаторСтроки(КодСтроки, ПрефиксУровня);
		ПараметрыПоказателя.МногострочнаяЧастьСтроки = БухгалтерскаяОтчетностьБРО.НайтиМногострочнуюЧастьПоИдентификатору(
			Раздел, ПараметрыПоказателя.ПрефиксМногострочнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПоСтроке(Строка, ПараметрыПоказателя, ПараметрыСтроки, КонтекстВыполнения)
	
	ОпределитьНомераСтрок(Строка, ПараметрыПоказателя, ПараметрыСтроки, КонтекстВыполнения);
	ЗаполнитьДанныеМногострочнойЧасти(Строка, ПараметрыСтроки, ПараметрыПоказателя, КонтекстВыполнения);
	
КонецПроцедуры

Функция ПолучитьКодГода(Алгоритм, ПараметрыПоказателя)
	
	КодГода = 0;
	Если ПараметрыПоказателя.ПрошлыйПериод = Истина Тогда
		КодГода = -1;
	Иначе
		Если ПараметрыПоказателя.РегулярнаяГрафа <> Неопределено Тогда
			Для Каждого Период Из ПараметрыПоказателя.РегулярнаяГрафа.Значение Цикл
				КодГода = Период.Значение;
			КонецЦикла;
		Иначе
			КодГода = Алгоритм.КодГода;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодГода;
	
КонецФункции

Функция ИмяРаздела(ФормаОтчетности)
	
	ИмяРаздела = "";
	Если ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс Тогда
		ИмяРаздела = "Баланс";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР Тогда
		ИмяРаздела = "ОФР";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС Тогда
		ИмяРаздела = "ОДДС";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОИК Тогда
		ИмяРаздела = "ОИК";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС Тогда
		ИмяРаздела = "ОЦИС";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения1 Тогда
		ИмяРаздела = "Пояснения1";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения2 Тогда
		ИмяРаздела = "Пояснения2";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения3 Тогда
		ИмяРаздела = "Пояснения3";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения4 Тогда
		ИмяРаздела = "Пояснения4";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения5 Тогда
		ИмяРаздела = "Пояснения5";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения6 Тогда
		ИмяРаздела = "Пояснения6";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения7 Тогда
		ИмяРаздела = "Пояснения7";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения8 Тогда
		ИмяРаздела = "Пояснения8";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения9 Тогда
		ИмяРаздела = "Пояснения9";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения10 Тогда
		ИмяРаздела = "Пояснения10";
	ИначеЕсли ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Пояснения11 Тогда
		ИмяРаздела = "Пояснения11";
	КонецЕсли;
	
	Возврат ИмяРаздела;
	
КонецФункции

Функция НеобходимоОбновитьНаименованиеСтроки(Строка, КонтекстВыполнения)
	
	Обновить = Ложь;
	Если КонтекстВыполнения.РедакцияФормы = "ФормаОтчета2025Кв1" Тогда
		Если Не Строка.Регламентированная Или Строка.КодОсновнойСтроки <> "" Тогда
			Обновить = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Обновить;
	
КонецФункции

Процедура ОбновитьНаименованиеСтроки(Строка, ПараметрыПоказателя, КонтекстВыполнения)
	
	ПараметрыЗаполнениеСтроки = ПолучитьПараметрыПоказателя();
	ПараметрыЗаполнениеСтроки.ЗначениеПоказателя = ПараметрыПоказателя.НаименованиеСтроки;
	
	Если КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.Баланс
		Или КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОФР
		Или КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОДДС
		Или КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОИК
		Или КонтекстВыполнения.ФормаОтчетности = Перечисления.ФормыБухгалтерскойОтчетности.ОЦИС Тогда
		
		ПараметрыЗаполнениеСтроки.КодГрафы = "02";
		УстановитьЗначениеЯчейки(Строка, ПараметрыЗаполнениеСтроки);
		
		ПараметрыЗаполнениеСтроки.КодГрафы = "03";
		ПараметрыЗаполнениеСтроки.ЗначениеПоказателя = ПараметрыПоказателя.КодСтроки;
		УстановитьЗначениеЯчейки(Строка, ПараметрыЗаполнениеСтроки);
		
	Иначе
		ПараметрыЗаполнениеСтроки.КодГрафы = "01";
		УстановитьЗначениеЯчейки(Строка, ПараметрыЗаполнениеСтроки);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокРасшифровки(НаименованиеРасшифровки, Графа, ПараметрыПоказателя, КонтекстВыполнения)
	
	РасшифровкаЗаголовок = НСтр("ru = 'Строка %1, графа ""%2""';
								|en = 'Строка %1, графа ""%2""'");
	РасшифровкаЗаголовок = СтрШаблон(РасшифровкаЗаголовок, ЗаполнитьПараметризируемыеНаименования(НаименованиеРасшифровки, КонтекстВыполнения, ПараметрыПоказателя),
			Графа);
			
	Возврат РасшифровкаЗаголовок;
	
КонецФункции

#КонецОбласти
