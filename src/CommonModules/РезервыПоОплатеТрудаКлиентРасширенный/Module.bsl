
#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяФормыНастройкиРасчетаРезервовОтпусков() Экспорт
	
	Возврат "Справочник.НастройкиРасчетаРезервовПоОплатеТруда.Форма.ФормаСписка";
	
КонецФункции

Процедура СправкаПоОтпускам(Форма, МассивСотрудников) Экспорт
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РезервыПоОплатеТруда",
		"ПФ_MXL_СправкаПоОтпускамСотрудника",
		МассивСотрудников,
		Форма,
		Новый Структура("ПериодРегистрации", Форма.Объект.МесяцНачисления));
	
КонецПроцедуры

// Вызывается при изменении вида расчета в таблице, редактирующей начисления.
// Параметры:
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. ОписаниеТаблицыРасчета().
//		РежимРаботы - число. 0 - режим штатного расписания, 1 - режим плановых начислений, 2 - режим начислений в расчетном
//		              документе.
//		Сотрудник - СправочникСсылка.Сотрудники, используется для режима работы = 1 при получении сведений о стаже.
//		ДатаСведений - Дата, используется для режима работы = 1 при получении сведений о стаже.
//
Процедура ВводНачисленийНачислениеПриИзменении(Форма, ОписаниеТаблицы, РежимРаботы, Сотрудник = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	СтрокаНачислений = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если СтрокаНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиНачислений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНачислений);
	РезервыПоОплатеТрудаКлиентСерверРасширенный.ВводНачисленийИнициализироватьСтрокиНачислений(Форма, СтрокиНачислений, ОписаниеТаблицы, РежимРаботы, Сотрудник, ДатаСведений);
	
КонецПроцедуры

Процедура СтрокаРасчетаПриНачалеРедактирования(Форма, ИмяТаблицы, ДанныеСтроки, НоваяСтрока, Копирование) Экспорт
	
	Если ИмяТаблицы = "Начисления" Тогда
		УстановитьОграничениеТипаПоТочностиПоказателя(ДанныеСтроки, Форма, ИмяТаблицы, 2);
	КонецЕсли;
	
	Если НоваяСтрока И ДанныеСтроки.Свойство("ФиксСтрока") Тогда
		ДанныеСтроки.ФиксСтрока = Истина;
	КонецЕсли;
	
	Если ИмяТаблицы = "РасчетРезервов"
		Или ИмяТаблицы = "ОценочныеОбязательстваПоСотрудникам" Тогда
		РасчетЗарплатыРасширенныйКлиент.УстановитьЗначенияКонтролируемыхПолей(
			ИмяТаблицы,
			ДанныеСтроки,
			Форма["КонтролируемыеПоля" + ИмяТаблицы],
			Форма.СтарыеЗначенияКонтролируемыхПолей);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	

Процедура УстановитьОграничениеТипаПоТочностиПоказателя(ДанныеСтроки, Форма, ИмяТаблицы, РежимРаботы) Экспорт
	
	Если Форма.НормативныйМетодБУ И Не Форма.ЭтоИнвентаризация Тогда
		Возврат;
	КонецЕсли;
	
	ФиксированнаяСумма = Ложь;
	Если ДанныеСтроки.Свойство("ФиксированнаяСумма") Тогда 
		ФиксированнаяСумма = ДанныеСтроки.ФиксированнаяСумма;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	Для СчетчикПоказателей = 1 По Форма.МаксимальноеКоличествоПоказателейНачисления Цикл
		
		Показатель = ДанныеСтроки["Показатель" + СчетчикПоказателей];
		
		Если Не ЗначениеЗаполнено(Показатель) И Не (ФиксированнаяСумма И СчетчикПоказателей = 1) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФиксированнаяСумма Тогда 
			ТипПоказателя = ТипЧисло;
			ТипПоказателяПриРасчете = ТипЧисло;
		Иначе 	
			ПоказательИнфо = РезервыПоОплатеТрудаКлиентРасширенныйПовтИсп.СведенияОПоказателеРасчетаРезервов(Показатель);
			ТипПоказателя = ПоказательИнфо.ТипПоказателя;
			ТипПоказателяПриРасчете = ПоказательИнфо.ТипПоказателяПриРасчете;
		КонецЕсли;	
			
		Если РежимРаботы = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТаблицы + "МинимальноеЗначение" + СчетчикПоказателей,
				"ОграничениеТипа",
				ТипПоказателя);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТаблицы + "МаксимальноеЗначение" + СчетчикПоказателей,
				"ОграничениеТипа",
				ТипПоказателя);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТаблицы + "Значение" + СчетчикПоказателей,
				"ОграничениеТипа",
				ТипПоказателя);
			
		Иначе
				
			Форма.Элементы[ИмяТаблицы + "Значение" + СчетчикПоказателей].ОграничениеТипа = 
				?(РежимРаботы = 2, ТипПоказателяПриРасчете, ТипПоказателя);
			КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКомандуРасшифровкиЗначенияПоказателя(Форма, ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ОповещениеЗавершения = Неопределено) Экспорт
	
	Перем ПересчитыватьСотрудника;
	
	РасчетЗарплатыРасширенныйКлиентПереопределяемый.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(Форма, ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПересчитыватьСотрудника);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОписаниеТаблицы", ОписаниеТаблицы);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если СтандартнаяОбработка Тогда 
		// Если это показатель остатка отпуска - открываем отчет по остаткам отпусков
		ОбработкаРасшифровкиОстаткаОтпуска(Форма, ОписаниеТаблицы, Элемент, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда 
		// Если это показатель сохраняемого заработка - открываем расчет среднего (в зависимости от сотрудника)
		Оповещение = Новый ОписаниеОповещения("ВыполнитьКомандуРасшифровкиЗначенияПоказателяЗавершение", РезервыПоОплатеТрудаКлиентРасширенный, ДополнительныеПараметры);
		РасшифровкаЗначенияПоказателяСохраняемогоЗаработка(Форма, ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПересчитыватьСотрудника, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуРасшифровкиЗначенияПоказателяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ПересчитыватьСотрудника = Результат.ПересчитыватьСотрудника;
	СтандартнаяОбработка = Результат.СтандартнаяОбработка;
	
	Форма = ДополнительныеПараметры.Форма;
	ОписаниеТаблицы = ДополнительныеПараметры.ОписаниеТаблицы;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	// Если команда выполнена - считаем, что выполнено редактирование таблицы.
	Если Не СтандартнаяОбработка Тогда
		СтрокаРасчетаПриОкончанииРедактирования(Форма, ОписаниеТаблицы, ПересчитыватьСотрудника);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗаполнитьССохранениемИсправлений", "Доступность", Истина);
		РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(Форма, Истина, Не Форма.РассчитыватьДокументыПриРедактировании);
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаРасчетаПриОкончанииРедактирования(Форма, ОписаниеТаблицы, ПересчитыватьСотрудникаБезусловно = Неопределено, ПроводитьПерерасчет = Истина, ОписаниеДокумента = Неопределено) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РедактируемоеПоле = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущийЭлемент.Имя;
	
	РеквизитКонтроляПолей = "КонтролируемыеПоля" + ОписаниеТаблицы.ИмяТаблицы;
	СтарыеЗначенияКонтролируемыхПолей = Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей();
	
	КонтролируемыеПоля = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Форма[РеквизитКонтроляПолей]);
	КнопкаОтменыИсправления = Форма.Элементы.Найти(ОписаниеТаблицы.ИмяТаблицы + "ОтменитьИсправление");
	
	// Если используются поля ОтработаноДней(Часов), 
	// для строк с начислениями отработанного времени синхронизируем их с ОплаченоДней(Часов), т.к. отображаются только
	// последние.
	Если ДанныеСтроки.Свойство("ВидВремени") И ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(ДанныеСтроки.ВидВремени) Тогда
		Если ДанныеСтроки.Свойство("ОтработаноДней") И ДанныеСтроки.Свойство("ОплаченоДней") Тогда
			ДанныеСтроки.ОтработаноДней = ДанныеСтроки.ОплаченоДней;
		КонецЕсли;
		Если ДанныеСтроки.Свойство("ОтработаноЧасов") И ДанныеСтроки.Свойство("ОплаченоЧасов") Тогда
			ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.ОплаченоЧасов;
		КонецЕсли;
	КонецЕсли;
	
	// Для начислений, которые не рассчитываются - не устанавливаем признак ФиксРасчет.
	УстанавливатьФиксРасчет = Истина;
	Если Форма.ЭтоИнвентаризация Или Не Форма.НормативныйМетодБУ Тогда
		Если ОписаниеТаблицы.ИмяТаблицы = "Начисления" Тогда
			ОписаниеВидаРасчета = РезервыПоОплатеТрудаКлиентРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(
				Форма.Объект.ВидОперации,
				Новый Структура(ОписаниеТаблицы.ИмяРеквизитаВидРасчета + "," + ОписаниеТаблицы.ИмяРеквизитаВидРасчетаРезерва,
					ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаВидРасчета], ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаВидРасчетаРезерва]),
				ОписаниеТаблицы);
			Если Не ОписаниеВидаРасчета.Рассчитывается И РедактируемоеПоле <> "НачисленияРезультатНУ" Тогда
				УстанавливатьФиксРасчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьСотрудника = Ложь;
	
	// Проверка контролируемых полей, т.е. наличия исправлений.
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		ИмяГруппыПолей = ЭлементСтруктуры.Ключ;
		ГруппаПолей = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппаПолей, ЭлементСтруктуры.Значение);
		Для Каждого ИмяПоля Из ГруппаПолей Цикл
			Если ДанныеСтроки.Свойство(ИмяПоля) И СтарыеЗначенияКонтролируемыхПолей[ОписаниеТаблицы.ИмяТаблицы + ИмяПоля] <> ДанныеСтроки[ИмяПоля] Тогда
				ПересчитатьСотрудника = Истина;
				Если ИмяГруппыПолей = "ФиксЗаполнение" И Лев(ИмяПоля, 8) = "Значение" Тогда
					// Если это контроль заполнения значений показателей, то исключаем значения тех показателей, 
					// которые вводятся непосредственно в документе, т.к. их изменение не считается исправлением.
					НомерПоказателя = Сред(ИмяПоля, 9);
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерПоказателя) Тогда
						ПоказательИнфо = РезервыПоОплатеТрудаКлиентРасширенныйПовтИсп.СведенияОПоказателеРасчетаРезервов(ДанныеСтроки["Показатель" + НомерПоказателя]);
						Если ПоказательИнфо <> Неопределено И ПоказательИнфо.ВводитсяНепосредственноПриРасчете Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;		
				Если ИмяГруппыПолей <> "ФиксРасчет" Или УстанавливатьФиксРасчет Тогда 
					ДанныеСтроки[ИмяГруппыПолей] = Истина;
				КонецЕсли;	
				Если КнопкаОтменыИсправления <> Неопределено Тогда
					КнопкаОтменыИсправления.Доступность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Рассчитать данные документа по сотруднику.
	Если ПроводитьПерерасчет И (ПересчитатьСотрудника Или ПересчитыватьСотрудникаБезусловно = Истина) Тогда
		РассчитатьЗапись = ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаСотрудник);
		Если ОписаниеТаблицы.ИмяТаблицы = "Начисления" Тогда
			РассчитатьЗапись = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаЗаполненаДляРасчета(Форма, ДанныеСтроки, ОписаниеТаблицы);
		КонецЕсли;
		Если РассчитатьЗапись Тогда
			Форма.РассчитатьСотрудника(ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаСотрудник], ОписаниеТаблицы);
		КонецЕсли;
	КонецЕсли;
	
	// Уже после расчета заполняем значения контролируемых полей.
	РасчетЗарплатыРасширенныйКлиент.УстановитьЗначенияКонтролируемыхПолей(ОписаниеТаблицы.ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей);
	
КонецПроцедуры

Процедура СтрокаДокументаПриОкончанииРедактирования(Форма, ОписаниеТаблицы, ПересчитыватьСотрудникаБезусловно = Неопределено, ПроводитьПерерасчет = Истина, ОписаниеДокумента = Неопределено) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитКонтроляПолей = "КонтролируемыеПоля" + ОписаниеТаблицы.ИмяТаблицы;
	СтарыеЗначенияКонтролируемыхПолей = Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей();
	
	КонтролируемыеПоля = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Форма[РеквизитКонтроляПолей]);
	КнопкаОтменыИсправления = Форма.Элементы.Найти(ОписаниеТаблицы.ИмяТаблицы + "ОтменитьИсправление");
	
	УстанавливатьФиксРасчет = Истина;
	
	ПересчитатьСотрудника = Ложь;
	
	// Проверка контролируемых полей, т.е. наличия исправлений.
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		ИмяГруппыПолей = ЭлементСтруктуры.Ключ;
		ГруппаПолей = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппаПолей, ЭлементСтруктуры.Значение);
		Для Каждого ИмяПоля Из ГруппаПолей Цикл
			Если ДанныеСтроки.Свойство(ИмяПоля) И СтарыеЗначенияКонтролируемыхПолей[ОписаниеТаблицы.ИмяТаблицы + ИмяПоля] <> ДанныеСтроки[ИмяПоля] Тогда
				ПересчитатьСотрудника = Истина;
				Если ИмяГруппыПолей = "ФиксЗаполнение" И Лев(ИмяПоля, 8) = "Значение" Тогда
					// Если это контроль заполнения значений показателей, то исключаем значения тех показателей, 
					// которые вводятся непосредственно в документе, т.к. их изменение не считается исправлением.
					НомерПоказателя = Сред(ИмяПоля, 9);
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерПоказателя) Тогда 
						ПоказательИнфо = РезервыПоОплатеТрудаКлиентРасширенныйПовтИсп.СведенияОПоказателеРасчетаРезервов(ДанныеСтроки["Показатель" + НомерПоказателя]);
						Если ПоказательИнфо <> Неопределено И ПоказательИнфо.ВводитсяНепосредственноПриРасчете Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;		
				Если ИмяГруппыПолей <> "ФиксРасчет" Или УстанавливатьФиксРасчет Тогда 
					ДанныеСтроки[ИмяГруппыПолей] = Истина;
				КонецЕсли;	
				Если КнопкаОтменыИсправления <> Неопределено Тогда
					КнопкаОтменыИсправления.Доступность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Рассчитать данные документа по сотруднику.
	Если ПроводитьПерерасчет И (ПересчитатьСотрудника Или ПересчитыватьСотрудникаБезусловно = Истина) Тогда
		Форма.РассчитатьРасчетРезервовСотрудника(ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаСотрудник], ОписаниеТаблицы);
	КонецЕсли;
	
	// Уже после расчета заполняем значения контролируемых полей.
	РасчетЗарплатыРасширенныйКлиент.УстановитьЗначенияКонтролируемыхПолей(ОписаниеТаблицы.ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаРасшифровкиОстаткаОтпуска(Форма, ОписаниеТаблицы, Элемент, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "КомандаРасшифровки";
	ПозицияКоманды = СтрНайти(Поле.Имя, ИмяКоманды);
	Если ПозицияКоманды = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерПоказателя = Сред(Поле.Имя, ПозицияКоманды + СтрДлина(ИмяКоманды));
	ТекущийПоказатель = Неопределено;
	Если Не ТекущиеДанные.Свойство("Показатель" + НомерПоказателя, ТекущийПоказатель)
		Или ТекущийПоказатель <> ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.ОстатокОтпуска") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.Сотрудник);
	
	СправкаПоОтпускам(Форма, МассивСотрудников);
	
КонецПроцедуры

Процедура РасшифровкаЗначенияПоказателяСохраняемогоЗаработка(Форма, ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПересчитыватьСотрудника = Ложь, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если СтрНайти(Поле.Имя, "КомандаРасшифровки") = 0 Тогда
		// Это не поле команды расшифровки.
		Если ОповещениеЗавершения <> Неопределено Тогда
			Результат = Новый Структура("ПересчитыватьСотрудника, СтандартнаяОбработка", ПересчитыватьСотрудника, СтандартнаяОбработка);
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Если для таблицы контролируется заполнение значений показателей,
	// и если значения интерактивно изменялись - то форму нужно открыть только для просмотр.
	ИспользуетсяФиксЗаполнение = ДанныеСтроки.Свойство("ФиксЗаполнение");
	ТолькоПросмотрСреднегоЗаработка = Форма.ТолькоПросмотр;
	
	// Получаем шаблон для последующего доступа к полям показателя.
	ИмяПоляШаблон = СтрЗаменить(Сред(Поле.Имя, СтрНайти(Поле.Имя, "КомандаРасшифровки")), "КомандаРасшифровки", "%1");
	
	// Проверяем, что это расшифровка показателя среднего заработка.
	Показатель = ДанныеСтроки[СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяПоляШаблон, "Показатель")];
	Если Показатель <> ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.СохраняемыйЗаработок") Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда
			Результат = Новый Структура("ПересчитыватьСотрудника, СтандартнаяОбработка", ПересчитыватьСотрудника, СтандартнаяОбработка);
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИмяПоляЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяПоляШаблон, "Значение");
	СреднийЗаработок = ДанныеСтроки[ИмяПоляЗначения];
	
	ДатаНачала = ДобавитьМесяц(Форма.Объект.МесяцНачисления, 1);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                           Форма);
	ДополнительныеПараметры.Вставить("ОписаниеТаблицы",                 ОписаниеТаблицы);
	ДополнительныеПараметры.Вставить("ДанныеСтроки",                    ДанныеСтроки);
	ДополнительныеПараметры.Вставить("ИмяПоляЗначения",                 ИмяПоляЗначения);
	ДополнительныеПараметры.Вставить("ПересчитыватьСотрудника",         ПересчитыватьСотрудника);
	ДополнительныеПараметры.Вставить("ИспользуетсяФиксЗаполнение",      ИспользуетсяФиксЗаполнение);
	ДополнительныеПараметры.Вставить("ТолькоПросмотрСреднегоЗаработка", ТолькоПросмотрСреднегоЗаработка);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения",            ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("РасшифровкаЗначенияПоказателяСреднегоЗаработкаЗавершение", РезервыПоОплатеТрудаКлиентРасширенный, ДополнительныеПараметры);
	
	// открываем форму
	Если Не ДанныеСтроки.РасчетПоСохраняемомуЗаработку Тогда
		ПараметрыРедактирования = УчетСреднегоЗаработкаКлиентСервер.ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу();
		ПараметрыРедактирования.Сотрудник               = ДанныеСтроки.Сотрудник;
		ПараметрыРедактирования.Организация             = Форма.Объект.Организация;
		ПараметрыРедактирования.ДатаНачалаСобытия       = ДатаНачала;
		ПараметрыРедактирования.СпособыРасчета          = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки.СпособРасчетаОтпуска);
		ПараметрыРедактирования.ТолькоПросмотр          = ТолькоПросмотрСреднегоЗаработка;
		ПараметрыРедактирования.НачалоПериодаРасчета    = ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаНачало;
		ПараметрыРедактирования.ОкончаниеПериодаРасчета = ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаОкончание;
		ПараметрыРедактирования.ПорядокРасчета          = УчетСреднегоЗаработкаКлиентСервер.ПорядокРасчетаОбщегоСреднегоЗаработка(ДатаНачала);
		ПараметрыРедактирования.ФиксПериодРасчета       = ЗначениеЗаполнено(ПараметрыРедактирования.НачалоПериодаРасчета)
			Или ЗначениеЗаполнено(ПараметрыРедактирования.ОкончаниеПериодаРасчета);
		УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаОбщий(ПараметрыРедактирования, Форма, Оповещение);
	Иначе
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			ПараметрыРедактирования = Новый Структура();
			ПараметрыРедактирования = РезервыПоОплатеТрудаРасширенныйВызовСервера.ПараметрыРедактированияСохраняемогоДенежногоСодержания(ДанныеСтроки.Сотрудник, Форма.Объект.МесяцНачисления, Форма.Объект.Ссылка, Форма.Объект.Организация);
			ПараметрыРедактирования.ПериодРасчетаСохраняемогоСодержанияНачало    = ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаНачало;;
			ПараметрыРедактирования.ПериодРасчетаСохраняемогоСодержанияОкончание = ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаОкончание;;
			ПараметрыРедактирования.ФиксПериодРасчетаСохраняемогоСодержания      = ЗначениеЗаполнено(ПараметрыРедактирования.ПериодРасчетаСохраняемогоСодержанияНачало)
				Или ЗначениеЗаполнено(ПараметрыРедактирования.ПериодРасчетаСохраняемогоСодержанияОкончание);
			ПараметрыРедактирования.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
			Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(ПараметрыРедактирования, "Отпуск","ЕжегодныйОтпуск", Форма, Оповещение);
		КонецЕсли;
	КонецЕсли;
	
	// команда выполнена
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура РасшифровкаЗначенияПоказателяСреднегоЗаработкаЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	ОписаниеТаблицы = ДополнительныеПараметры.ОписаниеТаблицы;
	ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
	ИмяПоляЗначения = ДополнительныеПараметры.ИмяПоляЗначения;
	ПересчитыватьСотрудника = ДополнительныеПараметры.ПересчитыватьСотрудника;
	ИспользуетсяФиксЗаполнение = ДополнительныеПараметры.ИспользуетсяФиксЗаполнение;
	ТолькоПросмотрСреднегоЗаработка = ДополнительныеПараметры.ТолькоПросмотрСреднегоЗаработка;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотрСреднегоЗаработка Тогда
		Возврат;
	КонецЕсли;
	
	СреднийЗаработок = ДанныеСтроки[ИмяПоляЗначения];
	
	// Получаем значение показателя средний заработок.
	Если ТипЗнч(РезультатРедактирования.СреднийЗаработок) = Тип("Соответствие") Тогда
		СреднийЗаработок = РезультатРедактирования.СреднийЗаработок[ДополнительныеПараметры.ДанныеСтроки.СпособРасчетаОтпуска];
	Иначе
		СреднийЗаработок = РезультатРедактирования.СреднийЗаработок;
	КонецЕсли;
	
	Если НачалоМесяца(ДобавитьМесяц(ДанныеСтроки.ПериодДействия, -11)) <> НачалоМесяца(РезультатРедактирования.НачалоПериодаРасчета)
		Или НачалоМесяца(ДанныеСтроки.ПериодДействия) <> НачалоМесяца(РезультатРедактирования.ОкончаниеПериодаРасчета) Тогда
		НачалоПериодаРасчета    = РезультатРедактирования.НачалоПериодаРасчета;
		ОкончаниеПериодаРасчета = РезультатРедактирования.ОкончаниеПериодаРасчета;
	Иначе
		НачалоПериодаРасчета    = Дата(1,1,1);
		ОкончаниеПериодаРасчета = Дата(1,1,1);
	КонецЕсли;
	
	// Ничего не изменилось - пересчитывать не будем.
	Если ДанныеСтроки[ИмяПоляЗначения] = СреднийЗаработок
		И ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаНачало    = НачалоПериодаРасчета
		И ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаОкончание = ОкончаниеПериодаРасчета Тогда
		Возврат;
	КонецЕсли;
	
	// Поместить значение в ячейку со значением.
	РасчетЗарплатыРасширенныйКлиент.УстановитьЗначенияКонтролируемыхПолей(
			"Начисления",
			ДанныеСтроки,
			Форма["КонтролируемыеПоляНачисления"],
			Форма.СтарыеЗначенияКонтролируемыхПолей);
	ДанныеСтроки[ИмяПоляЗначения]                        = СреднийЗаработок;
	ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаНачало    = НачалоПериодаРасчета;
	ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаОкончание = ОкончаниеПериодаРасчета;
	ПересчитыватьСотрудника = Истина;
	Форма.Модифицированность = Истина;
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура("ПересчитыватьСотрудника, СтандартнаяОбработка", ПересчитыватьСотрудника, Ложь);
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИзмененныеДанные(ИзмененныеДанные, ИмяТаблицы, ФизическоеЛицо = Неопределено, Сотрудник = Неопределено, ВидРасчета = Неопределено, ВидРасчетаРезерва = Неопределено) Экспорт
	
	РезервыПоОплатеТрудаКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, ИмяТаблицы, ФизическоеЛицо, Сотрудник, ВидРасчета, ВидРасчетаРезерва);
	
КонецПроцедуры

#КонецОбласти

