////////////////////////////////////////////////////////////////////////////////
// Планирование производства
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Рассчитывает планы производства, вызывается при обработки очереди заданий к планированию производства.
//
// Параметры:
//  ПланПроизводства - ДокументСсылка.ПланПроизводства - обрабатываемый документ
//
Процедура Рассчитать(ПланПроизводства) Экспорт
	
	ПараметрыРасчета = ПараметрыРасчета(ПланПроизводства);
	
	ЭтоНовыйРасчет = (ПараметрыРасчета.РежимРасчета = РежимНовыйРасчет());
//++ НЕ УТКА
	Если ЭтоНовыйРасчет Тогда
		СохранитьРучныеКорректировкиПередРасчетом(ПланПроизводства);
	КонецЕсли;
//-- НЕ УТКА
	
	ПорядокРасчета = ПорядокРасчета();
	
	Запрос = Новый Запрос();
	ЗаполнитьПараметрыИнициализации(Запрос, ПараметрыРасчета);
	
	// первичный расчет, корректировка плана
	СтруктураЗапроса = РазложитьПакетЗапросовВСтруктуруТекстовЗапросов(ТекстЗапросаОперацииРасчетаПланаПроизводства());
	Шаг = Шаг(ПорядокРасчета, Истина);
	Шаг["Описание"].Добавить(СтруктураЗапроса.НаправленияДеятельности,     "");
	Шаг["Описание"].Добавить(СтруктураЗапроса.Дельта,                      "");
	Шаг["Описание"].Добавить(СтруктураЗапроса.РучныеКорректировки,         "");
	ДобавитьТаблицыПодбораСпецификаций(Запрос, Шаг["Описание"]);
	Шаг["Описание"].Добавить(СтруктураЗапроса.ИзмененныеИзделия,           "");
	Шаг["Описание"].Добавить(СтруктураЗапроса.ЗапланированныеСпецификации, "");
	Шаг["Описание"].Добавить(СтруктураЗапроса.ОтменяемыеИзделия,           "");
	Шаг["Описание"].Добавить(СтруктураЗапроса.ПревышенаМаксимальнаяПорцияЗаписи, "");
	Шаг["Описание"].Добавить(СтруктураЗапроса.Расчет,                      "Расчет");
	Шаг["Описание"].Добавить(СтруктураЗапроса.Корректировка,               "Корректировка");
	
	// перепроведение (изменение статуса)
	Шаг = Шаг(ПорядокРасчета, Истина);
	Шаг["Описание"].Добавить(ТекстЗапросаОперацияПроверкаИзменениеРеквизитов(), "Корректировка");
	
	// очистка неиспользуемых данных (при полном пересчете)
	Шаг = Шаг(ПорядокРасчета, Истина);
	Шаг["Описание"].Добавить(ТекстЗапросаОперацияОтменаРасчетаПланаПроизводства(), "ОтменаРасчета");
	
	Действия = Действия(Запрос, ПорядокРасчета, ПараметрыРасчета);
	ВыполнитьДействия(Действия);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыРасчета.Реквизиты.Сценарий, "УправлениеПроцессомПланирования") Тогда
		
		Планирование.ЗапускВыполненияФоновойПроверкиРасчетаДефицитаПоЭтапам(ПараметрыРасчета.Реквизиты.Сценарий, ПараметрыРасчета.Реквизиты.ВидПлана);
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает неиспользуемые после расчета данные
//
// Параметры:
//  ПланПроизводства - ДокументСсылка.ПланПроизводства - обрабатываемый документ
//
Процедура ОчиститьНеиспользуемыеДанные(ПланПроизводства) Экспорт
	
	КоличествоПопытокЗаписи = ?(ТранзакцияАктивна(), 1, 3);
	
	Список = Новый ТаблицаЗначений();
	Список.Колонки.Добавить("Ссылка");
	Список.Колонки.Добавить("ВерсияДанных");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РегистраторПланаПроизводства.Ссылка КАК Ссылка,
	|	РегистраторПланаПроизводства.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Документ.РегистраторПланаПроизводства КАК РегистраторПланаПроизводства
	|ГДЕ
	|	РегистраторПланаПроизводства.ПланПроизводства = &ПланПроизводства И РегистраторПланаПроизводства.ПометкаУдаления");
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Пока Не РезультатЗапроса.Пустой() Цикл
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ЕстьЗаписиВВыборке = Выборка.Следующий();
		Пока ЕстьЗаписиВВыборке Цикл
			
			СчетчикЗаписей = 0;
			Пока ЕстьЗаписиВВыборке И СчетчикЗаписей < 10 Цикл
				ЗаполнитьЗначенияСвойств(Список.Добавить(), Выборка);
				ЕстьЗаписиВВыборке = Выборка.Следующий();
				СчетчикЗаписей = СчетчикЗаписей + 1;
			КонецЦикла;
			
			Для СчетчикОшибок = 1 По 3 Цикл
				
				НачатьТранзакцию();
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РегистраторПланаПроизводства");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.ИсточникДанных = Список;
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
					Блокировка.Заблокировать();
					
					Для каждого Элемент Из Список Цикл
						
						ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();
						
						Если ДокументОбъект <> Неопределено
							И ДокументОбъект.ВерсияДанных = Элемент.ВерсияДанных Тогда
							
							ДокументОбъект.Удалить();
							
						КонецЕсли;
						
					КонецЦикла;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					
					Если СчетчикОшибок >= КоличествоПопытокЗаписи Тогда
						ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
					
					СчетчикОшибок = СчетчикОшибок + 1;
					Продолжить;
					
				КонецПопытки;
				
				Прервать;
				
			КонецЦикла;
			
			Список.Очистить();
			
		КонецЦикла;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазделительРасчета

Функция РазделительРасчета(ПланПроизводства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.РазделительРасчета КАК РазделительРасчета
	|ИЗ
	|	Документ.ПланПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &ПланПроизводства
	|");
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	Возврат Выборка.РазделительРасчета;
	
КонецФункции

Процедура УстановитьРазделительРасчета(Объект, РежимЗаписи = Ложь) Экспорт
	
	СдвинутьРазделительРасчета = Ложь;
	
	Если Объект.ДополнительныеСвойства.Свойство("ПолныйПересчет") Тогда
		
		СдвинутьРазделительРасчета = Истина;
		
	Иначе
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Таблица.Подразделение КАК Подразделение,
			|	Таблица.Сценарий КАК Сценарий,
			|	Таблица.ВидПлана КАК ВидПлана,
			|	Таблица.СпособРасчетаПотребностейВМатериалах КАК СпособРасчетаПотребностейВМатериалах
			|ИЗ
			|	Документ.ПланПроизводства КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Ссылка
			|	И Таблица.Проведен
			|");
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если (Выборка.Подразделение <> Объект.Подразделение
				ИЛИ Выборка.Сценарий <> Объект.Сценарий
				ИЛИ Выборка.ВидПлана <> Объект.ВидПлана
				ИЛИ Выборка.СпособРасчетаПотребностейВМатериалах <> Объект.СпособРасчетаПотребностейВМатериалах) Тогда
				СдвинутьРазделительРасчета = Истина;
			КонецЕсли;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			СдвинутьРазделительРасчета = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СдвинутьРазделительРасчета Тогда
		
		Объект.РазделительРасчета = ( Объект.РазделительРасчета + 1 );
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПорцияРасчета

// Порция расчета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Порция расчета:
// * Распоряжение - ДокументСсылка.ПланПроизводства -
// * ПодразделениеДиспетчер - СправочникСсылка.СтруктураПредприятия -
// * Номенклатура - СправочникСсылка.Номенклатура -
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
// * Спецификация - СправочникСсылка.РесурсныеСпецификации -
// * Назначение - СправочникСсылка.Назначения -
// * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности -
// * РазмещениеВыпуска - ПеречислениеСсылка.СпособыПривязкиОперацийПроизводства -
// * ДатаЗапуска - Дата -
// * ДатаВыпуска - Дата -
// * КоличествоКРасчету - Число -
// * Количество - Число -
// * КЗаказу - Число -
// * ИнтервалПотребностиОт - Число -
// * ИнтервалПотребностиДо - Число -
// * ЗаданИнтервалПотребности - Число -
// * Разделитель - Число, ДокументСсылка.РегистраторПланаПроизводства -
// * ДатаПроизводства - Дата -
// * СпецификацияПродукции - СправочникСсылка.РесурсныеСпецификации -
// * НазначениеПродукции - СправочникСсылка.Назначения -
// * НоменклатураПродукции - СправочникСсылка.Номенклатура -
// * ХарактеристикаПродукции - СправочникСсылка.ХарактеристикиНоменклатуры -
// * ВидДвижения - ВидДвиженияНакопления -
// * ЭтоПолуфабрикат - Булево -
// * ДатаВыпускаПолуфабриката - Дата -
// * ДатаЗапускаВыпуска - Дата -
// * РучнаяКорректировка - Булево -
// * ДатаКорректировки - Дата -
// * АвторКорректировки - СправочникСсылка.Пользователи -
// * Комментарий - Строка -
// * ИсходнаяПотребность - Число -
// * ИсходнаяПотребностьКЗаказу - Число -
// * Получатель - СправочникСсылка.Склады, СправочникСсылка.СтруктураПредприятия -
// * Отправитель - СправочникСсылка.Склады, СправочникСсылка.СтруктураПредприятия -
Функция ПорцияРасчета()
	
	Таблица = Новый ТаблицаЗначений;
	
	// шапка
	
	Таблица.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ПланПроизводства"));
	Таблица.Колонки.Добавить("ПодразделениеДиспетчер", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
	// потребность
	
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Таблица.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	
	Таблица.Колонки.Добавить("РазмещениеВыпуска", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПривязкиОперацийПроизводства"));
	Таблица.Колонки.Добавить("ДатаЗапуска",       Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаВыпуска",       Новый ОписаниеТипов("Дата"));
	
	Таблица.Колонки.Добавить("КоличествоКРасчету", Новый ОписаниеТипов("Число"));
	
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КЗаказу", Новый ОписаниеТипов("Число"));
	
	Таблица.Колонки.Добавить("ИнтервалПотребностиОт", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ИнтервалПотребностиДо", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ЗаданИнтервалПотребности", Новый ОписаниеТипов("Число"));
	
	// группировка, дополнительная информация
	
	Таблица.Колонки.Добавить("Разделитель", Новый ОписаниеТипов("Число, ДокументСсылка.РегистраторПланаПроизводства"));
	Таблица.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("СпецификацияПродукции", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Таблица.Колонки.Добавить("НазначениеПродукции", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("НоменклатураПродукции", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ХарактеристикаПродукции", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("ВидДвижения", Новый ОписаниеТипов("ВидДвиженияНакопления"));
	
	Таблица.Колонки.Добавить("ЭтоПолуфабрикат", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ДатаВыпускаПолуфабриката", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаЗапускаВыпуска", Новый ОписаниеТипов("Дата"));

	Таблица.Колонки.Добавить("РучнаяКорректировка", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.РучнаяКорректировка.Тип);
	Таблица.Колонки.Добавить("ДатаКорректировки", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.ДатаКорректировки.Тип);
	Таблица.Колонки.Добавить("АвторКорректировки", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.АвторКорректировки.Тип);
	Таблица.Колонки.Добавить("Комментарий", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.Комментарий.Тип);
	
	Таблица.Колонки.Добавить("ИсходнаяПотребность", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.ИсходнаяПотребность.Тип);
	Таблица.Колонки.Добавить("ИсходнаяПотребностьКЗаказу", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.ИсходнаяПотребностьКЗаказу.Тип);
	
	// для совместимости
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.Склады"));
	Типы.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	Таблица.Колонки.Добавить("Получатель", ОписаниеТипа);
	Таблица.Колонки.Добавить("Отправитель", ОписаниеТипа);
	
	ОписаниеТипа = Новый ОписаниеТипов("Неопределено");
//++ НЕ УТКА
	ОписаниеТипа = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
//-- НЕ УТКА
	Таблица.Колонки.Добавить("ЭтапИсточник", ОписаниеТипа);
	
	Возврат Таблица;
	
КонецФункции

Функция ИзмененныеСтроки()
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ПланПроизводства", Новый ОписаниеТипов("ДокументСсылка.ПланПроизводства"));
	
	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.РегистраторПланаПроизводства"));
	
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Таблица.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Таблица.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	
	Таблица.Колонки.Добавить("ЭтоПолуфабрикат", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ДатаВыпускаПолуфабриката", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаЗапускаВыпуска", Новый ОписаниеТипов("Дата"));
	
	Таблица.Колонки.Добавить("РучнаяКорректировка", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.РучнаяКорректировка.Тип);
	Таблица.Колонки.Добавить("ДатаКорректировки", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.ДатаКорректировки.Тип);
	Таблица.Колонки.Добавить("АвторКорректировки", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.АвторКорректировки.Тип);
	Таблица.Колонки.Добавить("Комментарий", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.Комментарий.Тип);
	
	Таблица.Колонки.Добавить("ИсходнаяПотребность", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.ИсходнаяПотребность.Тип);
	Таблица.Колонки.Добавить("ИсходнаяПотребностьКЗаказу", Метаданные.РегистрыНакопления.ПланыПроизводства.Реквизиты.ИсходнаяПотребностьКЗаказу.Тип);
	
	Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КЗаказу", Новый ОписаниеТипов("Число"));
	
	Таблица.Колонки.Добавить("ИнтервалПотребностиОт", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ИнтервалПотребностиДо", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ЗаданИнтервалПотребности", Новый ОписаниеТипов("Число"));
	
	Возврат Таблица;
	
КонецФункции

Функция ПолеРазделительЗаписи()
	
	ПолеРазделительЗаписи = "Разделитель";
	Возврат ПолеРазделительЗаписи;
	
КонецФункции

Функция ПоляГруппировки()
	
	ПоляГруппировки = РазузлованиеИзделий.ПоляГруппировки("ДатаПроизводства,НазначениеПродукции,СпецификацияПродукции,ВидДвижения");
	Возврат ПоляГруппировки;
	
КонецФункции

Функция ДополнительнаяИнформация()
	
	ПоляГруппировки = "НоменклатураПродукции,ХарактеристикаПродукции,ЭтоПолуфабрикат,КоличествоКРасчету,РасчетнаяБазаКоличество,РасчетнаяБазаКЗаказу";
	Возврат ПоляГруппировки;
	
КонецФункции

Функция РазмерПорцииРасчета(Количество, ПараметрыРасчета)
	
	ОптимальнаяПорция = Мин(Количество, Макс(ПараметрыРасчета.ПорцияЧтенияОт, Окр((Количество / ПараметрыРасчета.КоличествоПотоков) + 0.5, 0, 0)), ПараметрыРасчета.ПорцияЧтенияДо);
	Возврат ОптимальнаяПорция;
	
КонецФункции

Функция ПолучитьРегистраторыПовтИсп(КоличествоСтрок, ПараметрыРасчета)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.РегистраторПланаПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.Проведен
	|	И Таблица.ПланПроизводства = &ПланПроизводства
	|	И Таблица.РазделительРасчета < &РазделительРасчета
	|	И НЕ Таблица.ПревышенаМаксимальнаяПорцияЗаписи
	|");
	Запрос.УстановитьПараметр("ПланПроизводства", ПараметрыРасчета.ПланПроизводства);
	Запрос.УстановитьПараметр("РазделительРасчета", ПараметрыРасчета.РазделительРасчета);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1000", Формат(КоличествоСтрок, "ЧН=; ЧГ="));
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьДанныеДляПовторногоРазузлования(ПланыПроизводства, ПараметрыРасчета, ПараметрыОтбора = Неопределено)
	
	ПорцияРасчета = ПорцияРасчета();
	
	Если ПараметрыОтбора <> Неопределено Тогда
		СписокСтрок = ПланыПроизводства.НайтиСтроки(ПараметрыОтбора);
	Иначе
		СписокСтрок = ПланыПроизводства;
	КонецЕсли;
	
	Для каждого Строка Из СписокСтрок Цикл
		
		НоваяСтрока = ПорцияРасчета.Добавить();
		
		НоваяСтрока.Распоряжение = ПараметрыРасчета.ПланПроизводства;
		НоваяСтрока.ПодразделениеДиспетчер = ПараметрыРасчета.Реквизиты.ПодразделениеДиспетчер;
		
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.Характеристика = Строка.Характеристика;
		НоваяСтрока.Спецификация = Строка.Спецификация;
		НоваяСтрока.Назначение = Строка.Назначение;
		НоваяСтрока.НаправлениеДеятельности = Строка.НаправлениеДеятельности;
		
		НоваяСтрока.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию;
		НоваяСтрока.ДатаЗапуска = ?(Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка, Строка.Период, Строка.ДатаЗапускаВыпуска);
		НоваяСтрока.ДатаВыпуска = ?(Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка, Строка.ДатаЗапускаВыпуска, Строка.Период);
		
		НоваяСтрока.Разделитель             = Строка.Регистратор;
		НоваяСтрока.ДатаПроизводства        = Строка.Период;
		НоваяСтрока.СпецификацияПродукции   = Строка.Спецификация;
		НоваяСтрока.НазначениеПродукции     = Строка.Назначение;
		НоваяСтрока.НоменклатураПродукции   = Строка.Номенклатура;
		НоваяСтрока.ХарактеристикаПродукции = Строка.Характеристика;

		НоваяСтрока.ЭтоПолуфабрикат = Строка.ЭтоПолуфабрикат;
		НоваяСтрока.ДатаВыпускаПолуфабриката = Строка.ДатаВыпускаПолуфабриката;
		НоваяСтрока.ДатаЗапускаВыпуска = Строка.ДатаЗапускаВыпуска;
		
		НоваяСтрока.КоличествоКРасчету = ?(ПараметрыРасчета.Реквизиты.Статус = Перечисления.СтатусыПланов.Утвержден, Строка.КЗаказу, Строка.Количество);
		НоваяСтрока.ВидДвижения        = ?(НоваяСтрока.КоличествоКРасчету > 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
		НоваяСтрока.КоличествоКРасчету = ?(НоваяСтрока.КоличествоКРасчету > 0, НоваяСтрока.КоличествоКРасчету, -НоваяСтрока.КоличествоКРасчету);
		
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.КЗаказу = Строка.КЗаказу;
		
		НоваяСтрока.ИнтервалПотребностиОт = Строка.ИнтервалПотребностиОт;
		НоваяСтрока.ИнтервалПотребностиДо = Строка.ИнтервалПотребностиДо;
		НоваяСтрока.ЗаданИнтервалПотребности = Строка.ЗаданИнтервалПотребности;
		
	КонецЦикла;
	
	Возврат ПорцияРасчета;
	
КонецФункции

#КонецОбласти

#Область Расчет

// Параметры:
//  ПланПроизводства - ДокументСсылка.ПланПроизводства - План производства
// 
// Возвращаемое значение:
//  Структура - Параметры расчета:
// * РазделительРасчета - Произвольный -
// * РежимРасчета - Строка -
// * РаспараллеливатьРасчет - Булево -
// * КоличествоПотоков - Число -
// * ПротоколРасчета - Структура - состоит из:
//  * КоличествоУровней - Число -
//  * СвязиСпецификаций - Соответствие из КлючИЗначение-
Функция ПараметрыРасчета(ПланПроизводства)
	
	ПараметрыРасчета = Новый Структура();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	
	|	Реквизиты.Ссылка КАК ПланПроизводства,
	|	Реквизиты.РазделительРасчета КАК РазделительРасчета,
	|	
	|	ВЫБОР
	|		КОГДА НЕ ( ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						РегистрНакопления.ПланыПроизводства КАК Таблица
	|					ГДЕ
	|						Таблица.ПланПроизводства = &ПланПроизводства)
	|					
	|				И ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						РегистрНакопления.ПланыПроизводства КАК Таблица
	|					ГДЕ
	|						Таблица.ПланПроизводства = &ПланПроизводства
	|						И Таблица.РазделительРасчета = Реквизиты.РазделительРасчета)
	|		) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНовыйРазделитель,
	|	
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Статус КАК Статус,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	Реквизиты.ВидПлана КАК ВидПлана,
	|	ВидыПланов.ПереноситьПотребностьПодразделенийЧерезПеремещения КАК ПереноситьПотребностьПодразделенийЧерезПеремещения,
	|	Реквизиты.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	Реквизиты.Подразделение КАК ПодразделениеДиспетчер,
	|	
	|	Реквизиты.УправлениеПроизводством2_2 КАК УправлениеПроизводством2_2,
	|	Реквизиты.СпособРасчетаПотребностейВМатериалах КАК СпособРасчетаПотребностейВМатериалах
	|ИЗ
	|	Документ.ПланПроизводства КАК Реквизиты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|		ПО Реквизиты.ВидПлана = ВидыПланов.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &ПланПроизводства
	|");
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ПараметрыРасчета.Вставить("ПланПроизводства", Выборка.ПланПроизводства);
	ПараметрыРасчета.Вставить("РазделительРасчета", Выборка.РазделительРасчета);
	ПараметрыРасчета.Вставить("РежимРасчета", ?(Выборка.ЭтоНовыйРазделитель, РежимНовыйРасчет(), РежимПересчет()));
	
	#Область ОбщиеНастройки
	
	ОбщиеНастройки = ОбщиеНастройки(Истина);

	ПараметрыРасчета.Вставить("РаспараллеливатьРасчет", ОбщиеНастройки.РаспараллеливатьРасчет);
	ПараметрыРасчета.Вставить("КоличествоПотоков", ОбщиеНастройки.КоличествоПотоков);
	
	ПараметрыРасчета.Вставить("ПорцияЧтенияОт", ОбщиеНастройки.ПорцияЧтенияОт);
	ПараметрыРасчета.Вставить("ПорцияЧтенияДо", ОбщиеНастройки.ПорцияЧтенияДо);
	
	ПараметрыРасчета.Вставить("ПорцияЗаписи", ОбщиеНастройки.ПорцияЗаписи);
	ПараметрыРасчета.Вставить("КоличествоСтрокВНабореЗаписей", ?(ЗначениеЗаполнено(ОбщиеНастройки.КоличествоСтрокВНабореЗаписей), ОбщиеНастройки.КоличествоСтрокВНабореЗаписей, МаксимальноеКоличествоСтрокВНабореЗаписей()));
	
	ПараметрыРасчета.Вставить("РазрешитьПовтИспРассчитанныхДанных", ОбщиеНастройки.РазрешитьПовтИспРассчитанныхДанных);
	
	ПараметрыРасчета.Вставить("ОчередьРасчета", Новый Массив(ОбщиеНастройки.КоличествоПотоков));
	
	ПараметрыРасчета.Вставить("МаксГлубинаРасчета", ОбщиеНастройки.МаксГлубинаРасчета);
	ПараметрыРасчета.Вставить("ИскатьЦиклыПосле", ?(ОбщегоНазначенияУТ.РежимОтладки(), 0, ОбщиеНастройки.ИскатьЦиклыПосле));
	
	ПараметрыРасчета.Вставить("ИнтервалПроверкиЗавершенияРасчета", 2);
	
	#КонецОбласти
	
	#Область Реквизиты
	
	ПараметрыРасчета.Вставить("Реквизиты", Новый Структура());
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл //КолонкаРезультатаЗапроса
		Если СтрНайти("
				|Дата,
				|Статус,
				|Сценарий,
				|ВидПлана,
				|ПереноситьПотребностьПодразделенийЧерезПеремещения,
				|ТипПроизводственногоПроцесса,
				|ПодразделениеДиспетчер", Колонка.Имя) = 0
			Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыРасчета.Реквизиты.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПараметрыВыборкиДанных
	
	ПараметрыВыборкиДанных = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных();
	ПараметрыВыборкиДанных.СпособРасчетаМатериалов = Выборка.СпособРасчетаПотребностейВМатериалах;
	ПараметрыВыборкиДанных.ВариантЗаполненияОбеспечения = ОбеспечениеПроизводства.ВариантЗаполненияОбеспеченияПоВерсииПроизводства(Выборка.УправлениеПроизводством2_2);
	ПараметрыВыборкиДанных.ОкруглятьКоличествоШтучныхТоваров = Ложь;
	
	ПараметрыРасчета.Вставить("ПараметрыВыборкиДанных", ПараметрыВыборкиДанных);
	
	#КонецОбласти
	
	#Область ПараметрыРазузлования
	
	ПараметрыРазузлования = РазузлованиеИзделий.ПараметрыРазузлования();
	ПараметрыРазузлования.ГруппироватьДанные           = Истина;
	ПараметрыРазузлования.ПоляГруппировки              = ПолеРазделительЗаписи() + "," + ПоляГруппировки();
	ПараметрыРазузлования.ДополнительнаяИнформация     = ДополнительнаяИнформация();
	ПараметрыРазузлования.РазделятьНаОптимальныеПартии = Ложь;
	
	ПараметрыРасчета.Вставить("ПараметрыРазузлования", ПараметрыРазузлования);
	
	#КонецОбласти
	
	#Область ПротоколРасчета
	ПараметрыРасчета.Вставить("ПротоколРасчета", Новый Структура("КоличествоУровней,СвязиСпецификаций", 0, Новый Соответствие));
	#КонецОбласти
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ПорядокРасчета()
	
	ПорядокРасчета = Новый ТаблицаЗначений();
	ПорядокРасчета.Колонки.Добавить("Описание", Новый ОписаниеТипов("СписокЗначений"));
	ПорядокРасчета.Колонки.Добавить("МногократноеВыполнение", Новый ОписаниеТипов("Булево"));
	
	Возврат ПорядокРасчета;
	
КонецФункции

Функция Шаг(ПорядокРасчета, МногократноеВыполнение = Ложь)
	
	Шаг = ПорядокРасчета.Добавить();
	Шаг.МногократноеВыполнение = МногократноеВыполнение;
	Возврат Шаг;
	
КонецФункции

Функция Действия(Запрос, ПорядокРасчета, ПараметрыРасчета)
	
	Владелец = Новый Структура();
	Владелец.Вставить("Запрос", Запрос);
	Владелец.Вставить("ПорядокРасчета", ПорядокРасчета);
	Владелец.Вставить("ПараметрыРасчета", ПараметрыРасчета);
	Действия = Новый Структура("Владелец", Владелец);
	Возврат Действия;
	
КонецФункции

Функция СледующиеДействия(Действия)
	
	ПараметрыРасчета = Действия.Владелец["ПараметрыРасчета"];
	
	Если ПараметрыРасчета.МаксГлубинаРасчета > ПараметрыРасчета["ПротоколРасчета"].КоличествоУровней Тогда
		
		ПродолжатьРасчет = Истина;
		
	Иначе
		
		ПродолжатьРасчет = Ложь;
		
		ТекстОшибки = НСтр("ru = 'В процессе расчета плана производства произошло зацикливание процедуры обработки данных. Выполнение прервано.';
							|en = 'The data processing procedure was looped during calculation of the production plan. Performance is broken.'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОчиститьСтруктуруДействий(Действия);
	
	ПорядокРасчета = Действия.Владелец["ПорядокРасчета"]; // см. ПроизводствоСервер.СлужебнаяСтруктураТаблицыЗначений
	ЕстьДанныеКОбработке = Ложь;
	
	Если ПродолжатьРасчет Тогда
		
		Пока ПорядокРасчета.Количество() > 0 И НЕ ЕстьДанныеКОбработке Цикл
			
			УстановитьПривилегированныйРежим(Истина);
			Результат = ОбщегоНазначенияУТ.ПолучитьРезультатыЗапроса(Действия.Владелец["Запрос"], ПорядокРасчета[0].Описание, Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
			Для каждого НовоеДействие Из Результат Цикл
				
				Если НовоеДействие.Значение.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				
				Действия.Вставить(НовоеДействие.Ключ, НовоеДействие.Значение);
				ЕстьДанныеКОбработке = Истина;
				
			КонецЦикла;
			
			Если НЕ ЕстьДанныеКОбработке ИЛИ НЕ ПорядокРасчета[0].МногократноеВыполнение Тогда
				ПараметрыРасчета["ПротоколРасчета"].КоличествоУровней = 0;
				ПорядокРасчета.Удалить(ПорядокРасчета[0]);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасчета["ПротоколРасчета"].КоличествоУровней = ПараметрыРасчета["ПротоколРасчета"].КоличествоУровней + 1;
		
	КонецЕсли;
	
	Возврат ЕстьДанныеКОбработке;
	
КонецФункции

Процедура ОчиститьСтруктуруДействий(Действия)
	
	Для каждого КлючИЗначение Из Действия Цикл
		
		Если КлючИЗначение.Ключ = "Владелец" Тогда
			Продолжить;
		КонецЕсли;
		
		Действия.Удалить(КлючИЗначение.Ключ);
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьДействия(Действия)
	
	ПараметрыРасчета = Действия.Владелец["ПараметрыРасчета"];
	
	РезультатЗапроса = Неопределено;
	
	ЕстьДанныеКОбработке = СледующиеДействия(Действия);
	Пока ЕстьДанныеКОбработке Цикл
		
		Если Действия.Свойство("Расчет", РезультатЗапроса) Тогда
			
			Действие = "РасчетПланаПроизводства.ВыполнитьРасчет";
			ПараметрыДействия = Новый Структура("ПараметрыРасчета,ПорцияРасчета,РегистраторыПовтИсп");
			
			Выборка = РезультатЗапроса.Выбрать();
			
			РазмерПорции = РазмерПорцииРасчета(Выборка.Количество(), ПараметрыРасчета);
			Порция = ПорцияРасчета();
			
			РазмерПорцииПовтИсп = Цел(ПараметрыРасчета.ПорцияЧтенияДо/ПараметрыРасчета.ПорцияЗаписи)*2;
			Регистраторы = ПолучитьРегистраторыПовтИсп(РазмерПорцииПовтИсп*Цел(Выборка.Количество()/РазмерПорции), ПараметрыРасчета);
			
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			Пока ЕстьЗаписиВВыборке Цикл
				
				Если Выборка.Спецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка() И Выборка.ЭтоПолуфабрикат Тогда
					ТекстОшибки = СтрШаблон(НСтр("ru = 'В процессе расчета плана производства не удалось выполнить подбор ресурсной спецификации полуфабриката %1, %2. Выполнение прервано.';
												|en = 'Cannot select a BOM of the semi-finished product %1 when calculating the production plan, %2. Execution aborted.'"), Выборка.Номенклатура, Выборка.Характеристика);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				Спецификация = Неопределено;
				Счетчик = 0;
				Пока ЕстьЗаписиВВыборке И (Счетчик < РазмерПорции ИЛИ Спецификация = Выборка.Спецификация) Цикл
					Спецификация = Выборка.Спецификация;
					ЗаполнитьЗначенияСвойств(Порция.Добавить(), Выборка);
					ЕстьЗаписиВВыборке = Выборка.Следующий();
					Счетчик = Счетчик + 1;
				КонецЦикла;
				
				ПараметрыДействия.ПараметрыРасчета = ПараметрыРасчета;
				ПараметрыДействия.ПорцияРасчета = Порция;
				ПараметрыДействия.РегистраторыПовтИсп = ВырезатьПодсписок(Регистраторы, 0, РазмерПорцииПовтИсп);
				
				ВыполнитьДействие(Действие, ПараметрыДействия, ПараметрыРасчета);
				Порция.Очистить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Действия.Свойство("Корректировка", РезультатЗапроса) Тогда
			
			Действие = "РасчетПланаПроизводства.ВыполнитьКорректировку";
			ПараметрыДействия = Новый Структура("ПараметрыРасчета,Регистраторы,ИзмененныеСтроки");
			
			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЕстьИзмененныеСтроки = РезультатЗапроса.Колонки.Найти("Номенклатура") <> Неопределено;
			ИзмененныеСтроки = ИзмененныеСтроки();
			Порция = Новый Массив();
			
			Пока Выборка.Следующий() Цикл // регистратор
				
				Порция.Добавить(Выборка.Регистратор);
				
				Если ЕстьИзмененныеСтроки Тогда
					
					ДетальныеЗаписи = Выборка.Выбрать();
					
					Пока ДетальныеЗаписи.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ИзмененныеСтроки.Добавить(), ДетальныеЗаписи);
					КонецЦикла;
					
					ПроверитьДанныеПередРасчетом(ИзмененныеСтроки, ПараметрыРасчета);
					
				КонецЕсли;
				
				ПараметрыДействия.ПараметрыРасчета = ПараметрыРасчета;
				ПараметрыДействия.Регистраторы = Порция;
				ПараметрыДействия.ИзмененныеСтроки = ИзмененныеСтроки;
				
				ВыполнитьДействие(Действие, ПараметрыДействия, ПараметрыРасчета, Выборка.ПревышенаМаксимальнаяПорцияЗаписи);
				ИзмененныеСтроки.Очистить();
				Порция.Очистить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Действия.Свойство("ОтменаРасчета", РезультатЗапроса) Тогда
			
			Действие = "РасчетПланаПроизводства.ВыполнитьОтменуРасчета";
			ПараметрыДействия = Новый Структура("ПараметрыРасчета,Регистраторы");
			
			Выборка = РезультатЗапроса.Выбрать();
			
			РазмерПорции = Окр((Выборка.Количество() / ПараметрыРасчета.КоличествоПотоков) + 0.5, 0, 0);
			Порция = Новый Массив();
			
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			Пока ЕстьЗаписиВВыборке Цикл
				
				ПревышенаМаксимальнаяПорцияЗаписи = Неопределено;
				Счетчик = 0;
				Пока ЕстьЗаписиВВыборке
					И (Счетчик < РазмерПорции)
					И (ПревышенаМаксимальнаяПорцияЗаписи = Неопределено ИЛИ ПревышенаМаксимальнаяПорцияЗаписи = Выборка.ПревышенаМаксимальнаяПорцияЗаписи ) Цикл
					ПревышенаМаксимальнаяПорцияЗаписи = Выборка.ПревышенаМаксимальнаяПорцияЗаписи;
					Порция.Добавить(Выборка.Регистратор);
					ЕстьЗаписиВВыборке = Выборка.Следующий();
					Счетчик = Счетчик + 1;
				КонецЦикла;
				
				ПараметрыДействия.ПараметрыРасчета = ПараметрыРасчета;
				ПараметрыДействия.Регистраторы = Порция;
				
				ВыполнитьДействие(Действие, ПараметрыДействия, ПараметрыРасчета, ПревышенаМаксимальнаяПорцияЗаписи);
				Порция.Очистить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОжидатьЗавершениеРасчета(ПараметрыРасчета);
		
		ЕстьДанныеКОбработке = СледующиеДействия(Действия);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДействие(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыРасчета, ЗапрещеноВыполнятьВОтдельномПотоке = Ложь)
	
	МестоВОчереди = ПолучитьМестоВОчередиРасчета(ПараметрыРасчета, ЗапрещеноВыполнятьВОтдельномПотоке);
	НаименованиеФоновогоЗадания = СтрШаблон(НСтр("ru = 'Расчет плана производства <%1> (%2)';
												|en = 'Calculation of the product plan <%1> (%2)'"), ПараметрыРасчета.ПланПроизводства, (МестоВОчереди + 1));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	ПараметрыВыполнения.ЗапуститьНеВФоне = (ЗапрещеноВыполнятьВОтдельномПотоке ИЛИ НЕ ПараметрыРасчета.РаспараллеливатьРасчет);
	ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(
		ИмяПроцедуры,
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗаписатьРезультатВПротоколРасчета(РезультатЗапуска.АдресРезультата, ПараметрыРасчета["ПротоколРасчета"]);
	ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
		ПараметрыРасчета.ОчередьРасчета[МестоВОчереди] = Новый Структура("Идентификатор, АдресРезультата", РезультатЗапуска.ИдентификаторЗадания, РезультатЗапуска.АдресРезультата);
	Иначе
		ВызватьИсключение РезультатЗапуска.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРасчет(ПараметрыДействия, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ПланированиеЗапасов.РасчетПланаПроизводства");
	
	ВыполнитьРасчетВнутриЗамераВремени(ПараметрыДействия, АдресРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ПараметрыДействия.ПорцияРасчета.Количество());
	
КонецПроцедуры

Процедура ВыполнитьРасчетВнутриЗамераВремени(ПараметрыДействия, АдресРезультата)
	
	ПараметрыРасчета    = ПараметрыДействия.ПараметрыРасчета;
	ПорцияРасчета       = ПараметрыДействия.ПорцияРасчета; // ТаблицаЗначений - 
	РегистраторыПовтИсп = ПараметрыДействия.РегистраторыПовтИсп;
	
	ПолеРазделительЗаписи = ПолеРазделительЗаписи();
	ПоляГруппировки = ПоляГруппировки();
	
	РезультатРасчета = ПорцияРасчета.СкопироватьКолонки(ПолеРазделительЗаписи + "," + ПоляГруппировки); // ТаблицаЗначений - 
	
	РезультатРасчета.Колонки.Добавить("Сч1", Новый ОписаниеТипов("Число")); // счетчики для порционной записи
	РезультатРасчета.Колонки.Добавить("Сч2", Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Сч3", Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Сч4", Новый ОписаниеТипов("Число"));
	
	РезультатРасчета.Колонки.Добавить("ДанныеСпецификации");
	
	Если ПорцияРасчета.Количество() > ПараметрыРасчета.ПорцияЗаписи Тогда // заполнение поля "разделитель записи"
		
		СписокКолонок = СтрРазделить(ПоляГруппировки,",");
		
		СравнениеЗначений = Новый СравнениеЗначений;
		ПорцияРасчета.Сортировать(ПоляГруппировки, СравнениеЗначений);
		
		Разделитель = 1;
		Сч = 0;
		Для каждого Строка Из ПорцияРасчета Цикл
			Если Сч >= ПараметрыРасчета.ПорцияЗаписи
				И ЕстьРазличияВКолонках(Строка, ПорцияРасчета[ПорцияРасчета.Индекс(Строка)-1], СписокКолонок) Тогда
				Разделитель = Разделитель + 1;
				Сч = 0;
			КонецЕсли;
			Строка.Разделитель = Разделитель;
			Сч = Сч + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураДанных = РазузловатьИзделия(ПорцияРасчета, ПараметрыРасчета);
	
	Если СтруктураДанных.ЕстьОшибка Тогда
		
		ТекстОшибки = СтруктураДанных.ОшибкаТекст;
		ВызватьИсключение ТекстОшибки;
		
	Иначе
		
		Для каждого ДанныеСпецификации Из СтруктураДанных.ДанныеСпецификаций Цикл
			
			ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("СкладМатериалов", Новый ОписаниеТипов("СправочникСсылка.Склады"));
			ДанныеСпецификации.МатериалыИУслуги.ЗагрузитьКолонку(ДанныеСпецификации.МатериалыИУслуги.ВыгрузитьКолонку("Склад"), "СкладМатериалов");
			
			Если ПараметрыРасчета.Реквизиты.ПереноситьПотребностьПодразделенийЧерезПеремещения Тогда
				ПроброситьПеремещения(ДанныеСпецификации.МатериалыИУслуги);
			КонецЕсли;
			
			РаспределениеЗанятостиПоДлительностиЭтапа(ДанныеСпецификации.Трудозатраты);
			
			НоваяСтрока = РезультатРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСпецификации);
			
			НоваяСтрока.Сч1 = ДанныеСпецификации.ВыходныеИзделия.Количество() + ДанныеСпецификации.ВозвратныеОтходы.Количество();
			НоваяСтрока.Сч2 = ДанныеСпецификации.МатериалыИУслуги.Количество();
			НоваяСтрока.Сч3 = ДанныеСпецификации.Трудозатраты.Количество();
			//++ НЕ УТКА
			НоваяСтрока.Сч2 = НоваяСтрока.Сч2 + ДанныеСпецификации.ВходящиеИзделия.Количество();
			НоваяСтрока.Сч4 = ДанныеСпецификации.ВидыРабочихЦентров.Количество();
			//-- НЕ УТКА
			
			НоваяСтрока.ДанныеСпецификации = ДанныеСпецификации;
			
		КонецЦикла;
		
		ПорцияРасчета.Индексы.Добавить(ПолеРазделительЗаписи);
		ПорцияРасчета.Индексы.Добавить(ПоляГруппировки);
		РезультатРасчета.Индексы.Добавить(ПолеРазделительЗаписи);
		РезультатРасчета.Индексы.Добавить(ПоляГруппировки);
		
	КонецЕсли;
	
	СкорректированныеСтроки = ПорцияРасчета.НайтиСтроки(Новый Структура("РучнаяКорректировка", Истина));
	
	Периоды = СтруктураРасчетаПериодов();
	РеквизитыСпецификаций = РеквизитыСпецификаций(ПорцияРасчета, ПараметрыРасчета);
	
	ИндексРегистраторы = 0;
	ГраницаРегистраторы = ?(РегистраторыПовтИсп <> Неопределено, РегистраторыПовтИсп.ВГраница(), -1);
	
	СписокДляЗаписи = Новый Массив();

	Стек = РезультатРасчета.Скопировать(, "Разделитель" + ",Сч1,Сч2,Сч3,Сч4");
	Стек.Свернуть("Разделитель", "Сч1,Сч2,Сч3,Сч4");
	Стек.Колонки.Добавить("Данные", Новый ОписаниеТипов("Массив"));
	Стек.Колонки.Добавить("ПревышенаМаксимальнаяПорцияЗаписи", Новый ОписаниеТипов("Булево"));
	
	Пока Стек.Количество() > 0 Цикл
		
		ПорцияЗаписи = Стек[0];
		
		ЕстьДанныеДляЗаписи = ЗначениеЗаполнено(ПорцияЗаписи.Данные);
		Если Не ЕстьДанныеДляЗаписи Тогда
			
			РазделительЗаписи = Новый Структура("Разделитель", ПорцияЗаписи.Разделитель);
			
			Если ПараметрыРасчета.КоличествоСтрокВНабореЗаписей > 0
				И Макс(ПорцияЗаписи.Сч1, ПорцияЗаписи.Сч2, ПорцияЗаписи.Сч3, ПорцияЗаписи.Сч4) > ПараметрыРасчета.КоличествоСтрокВНабореЗаписей Тогда
				
				Стек.Удалить(ПорцияЗаписи);
				ПорцияЗаписи = Неопределено;
				
				ДетальныеЗаписи = РезультатРасчета.Скопировать(РазделительЗаписи, ПоляГруппировки + ",Сч1,Сч2,Сч3,Сч4");
				ДетальныеЗаписи.Свернуть(ПоляГруппировки, "Сч1,Сч2,Сч3,Сч4");
				
				Для каждого Детали Из ДетальныеЗаписи Цикл
					
					Группировка = Новый Структура(ПоляГруппировки);
					ЗаполнитьЗначенияСвойств(Группировка, Детали);
					
					Если ПорцияЗаписи = Неопределено
						ИЛИ ПорцияЗаписи.Сч1 + Детали.Сч1 > ПараметрыРасчета.КоличествоСтрокВНабореЗаписей
						ИЛИ ПорцияЗаписи.Сч2 + Детали.Сч2 > ПараметрыРасчета.КоличествоСтрокВНабореЗаписей
						ИЛИ ПорцияЗаписи.Сч3 + Детали.Сч3 > ПараметрыРасчета.КоличествоСтрокВНабореЗаписей
						ИЛИ ПорцияЗаписи.Сч4 + Детали.Сч4 > ПараметрыРасчета.КоличествоСтрокВНабореЗаписей Тогда
						
						ПорцияЗаписи = Стек.Вставить(0);
						ЗаполнитьЗначенияСвойств(ПорцияЗаписи, РазделительЗаписи);
						
					КонецЕсли;
					
					ПорцияЗаписи.Данные.Добавить(Группировка);
					
					ПорцияЗаписи.Сч1 = (ПорцияЗаписи.Сч1 + Детали.Сч1);
					ПорцияЗаписи.Сч2 = (ПорцияЗаписи.Сч2 + Детали.Сч2);
					ПорцияЗаписи.Сч3 = (ПорцияЗаписи.Сч3 + Детали.Сч3);
					ПорцияЗаписи.Сч4 = (ПорцияЗаписи.Сч4 + Детали.Сч4);
					
					ПорцияЗаписи.ПревышенаМаксимальнаяПорцияЗаписи = Макс(ПорцияЗаписи.Сч1,
																			ПорцияЗаписи.Сч2,
																			ПорцияЗаписи.Сч3,
																			ПорцияЗаписи.Сч4) > ПараметрыРасчета.КоличествоСтрокВНабореЗаписей;
					
				КонецЦикла;
				
			Иначе
				ПорцияЗаписи.Данные.Добавить(РазделительЗаписи);
				ЕстьДанныеДляЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИндексРегистраторы > ГраницаРегистраторы ИЛИ ПорцияЗаписи.ПревышенаМаксимальнаяПорцияЗаписи Тогда
			Регистратор = Документы.РегистраторПланаПроизводства.ПолучитьСсылку();
			НовыйРегистратор = Истина;
		Иначе
			Регистратор = РегистраторыПовтИсп[ИндексРегистраторы];
			НовыйРегистратор = Ложь;
			ИндексРегистраторы = ИндексРегистраторы + 1;
		КонецЕсли;
		
		Движения = НаборыЗаписиДвижений(Регистратор);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияДвижений(
			Регистратор,
			ПараметрыРасчета);
		
		Для каждого ПорцияДанных Из ПорцияЗаписи.Данные Цикл
			
			НайденныеСтроки = ПорцияРасчета.НайтиСтроки(ПорцияДанных);
			
			ЗаполнитьДвиженияВПланахПроизводства(
				Движения,
				ЗначенияЗаполнения,
				НайденныеСтроки,
				РеквизитыСпецификаций,
				Периоды);
			
			НайденныеСтроки = РезультатРасчета.НайтиСтроки(ПорцияДанных);
			
			ЗаполнитьДвиженияПоРезультатуРасчета(
				Движения,
				ЗначенияЗаполнения,
				НайденныеСтроки,
				Периоды);
		
		КонецЦикла;
		
		СписокДляЗаписи.Добавить(Новый Структура("Регистратор, НовыйРегистратор, Движения, ПревышенаМаксимальнаяПорцияЗаписи", Регистратор, НовыйРегистратор, Движения, ПорцияЗаписи.ПревышенаМаксимальнаяПорцияЗаписи));
		
		Стек.Удалить(ПорцияЗаписи);
		
	КонецЦикла;
	
	ЗаполнитьПериодыВДвижениях(ПараметрыРасчета, Периоды);
	
	Периоды           = Неопределено;
	СтруктураДанных   = Неопределено;
	РезультатРасчета  = Неопределено;
	СтруктураДвижений = Неопределено;
	
	ЗаписатьРезультатРасчета(СписокДляЗаписи, ПараметрыРасчета, СкорректированныеСтроки);
	
КонецПроцедуры

// Возвращает результат разузлование изделий
//
// Параметры:
//  ПорцияРасчета - см. ПорцияРасчета
//  ПараметрыРасчета - см. ПараметрыРасчета
//
// Возвращаемое значение:
//  Структура - 
//
Функция РазузловатьИзделия(ПорцияРасчета, ПараметрыРасчета)
	
	ПорцияРасчета.Колонки["КЗаказу"].Имя = "РасчетнаяБазаКЗаказу";
	ПорцияРасчета.Колонки["Количество"].Имя = "РасчетнаяБазаКоличество";
	
	ПорцияРасчета.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3, ДопустимыйЗнак.Неотрицательный));
	ПорцияРасчета.ЗагрузитьКолонку(ПорцияРасчета.ВыгрузитьКолонку("КоличествоКРасчету"), "Количество");
	
	ПорцияРасчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(15,3, ДопустимыйЗнак.Неотрицательный));
	
	СтруктураДанных = РазузлованиеИзделий.Разузловать(
		ПорцияРасчета,
		ПараметрыРасчета.ПараметрыРазузлования,
		ПараметрыРасчета.ПараметрыВыборкиДанных); // см. ПроизводствоСервер.СлужебнаяСтруктураСтруктуры
		
	Если ПорцияРасчета.Найти(Справочники.РесурсныеСпецификации.ПустаяСсылка(), "Спецификация") <> Неопределено Тогда // поддержка режима "без спецификации"
		
		ОтборСтрок = Новый Структура(ПараметрыРасчета.ПараметрыРазузлования.ПоляГруппировки);
		
		Для каждого Данные Из СтруктураДанных.ДанныеСпецификаций Цикл
			
			Если ЗначениеЗаполнено(Данные.Спецификация) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные.ТипПроизводственногоПроцесса = ПараметрыРасчета.Реквизиты.ТипПроизводственногоПроцесса;
			
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Данные);
			
			НайденныеСтроки = ПорцияРасчета.НайтиСтроки(ОтборСтрок);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				НоваяСтрока = Данные.ВыходныеИзделия.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); // Номенклатура,Характеристика
				
				НоваяСтрока.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ;
				НоваяСтрока.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
				
				НоваяСтрока.КоличествоИзделие = 1;
				НоваяСтрока.КоличествоУпаковокНаЕдиницуПартииВыпуска = 1;
				НоваяСтрока.ДанныеУпаковки = УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки();
				
				НоваяСтрока.ДнейОтПотребности = 0;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПорцияРасчета.Колонки.Удалить("Количество");
	ПорцияРасчета.Колонки.Удалить("НомерСтроки");
	
	ПорцияРасчета.Колонки["РасчетнаяБазаКоличество"].Имя = "Количество";
	ПорцияРасчета.Колонки["РасчетнаяБазаКЗаказу"].Имя = "КЗаказу";
	
	Возврат СтруктураДанных;
	
КонецФункции

// Параметры:
//  МатериалыИУслуги - ТаблицаЗначений - Материалы и услуги:
// * НомерСтроки - Число -
Процедура ПроброситьПеремещения(МатериалыИУслуги) Экспорт
	
	Результат = МатериалыИУслуги;
	
	Результат.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	
	Индекс = 0;
	Для Каждого Строка Из Результат Цикл
		Строка.ИндексСтроки = Индекс;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Уровень = 0;
	МаксГлубинаРасчета = 125;
	
	Пока Результат.Количество() > 0 Цикл
		
		Если Уровень > МаксГлубинаРасчета Тогда
			
			Шаблон = НСтр("ru = 'Превышено максимальное количество перемещений (%1) при расчете плана производства.';
							|en = 'The maximum number of transfers (%1) during production plan calculation is exceeded.'");
			ШаблонНоменклатура =
				НСтр("ru = 'На номенклатуре ""%1"" и способе обеспечения ""%2"" произошло зацикливание разузлования.';
					|en = 'An explosion loop occurred on the ""%1"" item and the ""%2"" procurement strategy.'");
			
			ЧастиТекста = Новый Массив;
			ЧастиТекста.Добавить(СтрШаблон(Шаблон, МаксГлубинаРасчета));
			
			Для каждого СтрокаТаблицы Из Результат Цикл
				
				ЧастиТекста.Добавить(СтрШаблон(ШаблонНоменклатура,
													СтрокаТаблицы.Номенклатура,
													СтрокаТаблицы.СпособОбеспеченияПредставление));
				
			КонецЦикла;
			
			ВызватьИсключение СтрСоединить(ЧастиТекста, Символы.ПС);
		КонецЕсли;
		
		Запрос = Новый Запрос(Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь)
		+ "ВЫБРАТЬ
			|	МатериалыИУслуги.ИндексСтроки   КАК ИндексСтроки,
			|	МатериалыИУслуги.Идентификатор  КАК Идентификатор,
			|	МатериалыИУслуги.Номенклатура   КАК Номенклатура,
			|	МатериалыИУслуги.Характеристика КАК Характеристика,
			|	МатериалыИУслуги.Склад          КАК Склад,
			|	МатериалыИУслуги.Запланировать  КАК Запланировать,
			|
			|	МатериалыИУслуги.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер
			|
			|ПОМЕСТИТЬ ВТМатериалыИУслуги
			|ИЗ &МатериалыИУслуги КАК МатериалыИУслуги
			|
			|ГДЕ НЕ МатериалыИУслуги.Запланировать
			|
			|;
			|///////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	МатериалыИУслуги.Идентификатор  КАК Идентификатор,
			|	МатериалыИУслуги.ИндексСтроки   КАК ИндексСтроки,
			|	МатериалыИУслуги.Номенклатура   КАК Номенклатура,
			|	МатериалыИУслуги.Характеристика КАК Характеристика,
			|	
			|	МатериалыИУслуги.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СпособыОбеспеченияПотребностей.ТипОбеспечения,
			|					   ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
			|				И ЕСТЬNULL(СпособыОбеспеченияПотребностей.СпособПланированияПолуфабрикатов,
			|					   ЗНАЧЕНИЕ(Перечисление.СпособыПланированияПолуфабрикатов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияПолуфабрикатов.Автоматически)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Запланировать,
			|	ВЫБОР
			|		КОГДА СпособыОбеспеченияПотребностей.Ссылка ЕСТЬ НЕ NULL
			|				И СпособыОбеспеченияПотребностей.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
			|				И СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей НЕ В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоПеремещение,
			|	ВЫБОР
			|		КОГДА СпособыОбеспеченияПотребностей.Ссылка ЕСТЬ НЕ NULL
			|				И СпособыОбеспеченияПотребностей.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
			|				И СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей НЕ В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
			|			ТОГДА СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей
			|		ИНАЧЕ МатериалыИУслуги.Склад
			|	КОНЕЦ КАК Склад,
			|	СпособыОбеспеченияПотребностей.Представление КАК СпособОбеспеченияПредставление
			|
			|ИЗ ВТМатериалыИУслуги КАК МатериалыИУслуги
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпособыОбеспеченияПотребностей
			|	ПО &ПодстановкаОсновногоСпособаОбеспечения");
		
		ПоляСоединения = "МатериалыИУслуги.Номенклатура, МатериалыИУслуги.Характеристика, МатериалыИУслуги.Склад";
		ИмяПараметра   = "ПодстановкаОсновногоСпособаОбеспечения";
		
		Запрос.Текст = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
			Запрос.Текст, ИмяПараметра, ПоляСоединения);
		
		Запрос.УстановитьПараметр("МатериалыИУслуги", Результат);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Индекс = -Результат.Количество() + 1 По 0 Цикл
			
			Строка = Результат[-Индекс];
			
			Материал = МатериалыИУслуги[Строка.ИндексСтроки];
			Если ЗначениеЗаполнено(Материал) Тогда
				Материал.Склад = Строка.Склад;
				Материал.Запланировать = Строка.Запланировать;
			КонецЕсли;
			
			Если НЕ Строка.ЭтоПеремещение Тогда
				Результат.Удалить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		Уровень =  Уровень + 1;
	КонецЦикла;
	
КонецПроцедуры

// Распределение занятости по длительности этапа.
// 
// Параметры:
//  Трудозатраты - ТаблицаЗначений
Процедура РаспределениеЗанятостиПоДлительностиЭтапа(Трудозатраты)
	НовыеСтроки = Новый Массив;
	
	Для каждого Строка Из Трудозатраты Цикл
		
		Если Строка.ДлительностьЭтапаВДнях > 1 И НовыеСтроки.Найти(Трудозатраты.Индекс(Строка)) = Неопределено Тогда
			
			Строка.Количество = Строка.Количество / Строка.ДлительностьЭтапаВДнях;
			
			Для индекс = 1 По Строка.ДлительностьЭтапаВДнях - 1 Цикл
				
				НоваяСтрокаТаблицы = Трудозатраты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Строка);
				
				Если Строка.ДнейОтПотребности < 0 Тогда
					НоваяСтрокаТаблицы.ДнейОтПотребности = НоваяСтрокаТаблицы.ДнейОтПотребности + индекс;
				Иначе
					НоваяСтрокаТаблицы.ДнейОтПотребности = НоваяСтрокаТаблицы.ДнейОтПотребности - индекс;
				КонецЕсли;
				
				НовыеСтроки.Добавить(Трудозатраты.Индекс(НоваяСтрокаТаблицы));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКорректировку(ПараметрыДействия, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ПланированиеЗапасов.КорректировкаПланаПроизводства");
	
	ВыполнитьКорректировкуВнутриЗамераВремени(ПараметрыДействия, АдресРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ПараметрыДействия.Регистраторы.Количество());
	
КонецПроцедуры

Процедура ВыполнитьКорректировкуВнутриЗамераВремени(ПараметрыДействия, АдресРезультата)
	
	ПараметрыРасчета = ПараметрыДействия.ПараметрыРасчета;
	Регистраторы     = ПараметрыДействия.Регистраторы;
	ИзмененныеСтроки = ПараметрыДействия.ИзмененныеСтроки;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	
	|	Таблица.ПланПроизводства КАК ПланПроизводства,
	|	
	|	Таблица.Период КАК Период,
	|	Таблица.Регистратор КАК Регистратор,
	|	
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	
	|	Таблица.Спецификация КАК Спецификация,
	|	Таблица.Назначение КАК Назначение,
	|	
	|	Таблица.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	Таблица.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	Таблица.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпуска,
	|	
	|	Таблица.РучнаяКорректировка КАК РучнаяКорректировка,
	|	Таблица.ДатаКорректировки   КАК ДатаКорректировки,
	|	Таблица.АвторКорректировки  КАК АвторКорректировки,
	|	Таблица.Комментарий         КАК Комментарий,
	|	
	|	Таблица.ИсходнаяПотребность        КАК ИсходнаяПотребность,
	|	Таблица.ИсходнаяПотребностьКЗаказу КАК ИсходнаяПотребностьКЗаказу,
	|	
	|	Таблица.Количество КАК Количество,
	|	Таблица.КЗаказу КАК КЗаказу,
	|	
	|	Таблица.ИнтервалПотребностиОт КАК ИнтервалПотребностиОт,
	|	Таблица.ИнтервалПотребностиДо КАК ИнтервалПотребностиДо,
	|	Таблица.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности
	|	
	|ПОМЕСТИТЬ ИзмененныеСтроки
	|ИЗ
	|	&ИзмененныеСтроки КАК Таблица
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ПланПроизводства,
	|	Спецификация,
	|	Назначение,
	|	ДатаВыпускаПолуфабриката,
	|	ЭтоПолуфабрикат,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Назначение КАК Назначение,
	|	ISNULL(ВЫРАЗИТЬ(Таблица.Назначение КАК Справочник.Назначения).НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ НаправленияДеятельности
	|ИЗ
	|	ИзмененныеСтроки КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	ИзмененныеСтроки.Период КАК Период,
	|	ИзмененныеСтроки.Регистратор КАК Регистратор,
	|	ИзмененныеСтроки.ПланПроизводства КАК ПланПроизводства,
	|	ИзмененныеСтроки.Спецификация КАК Спецификация,
	|	ИзмененныеСтроки.Назначение КАК Назначение,
	|	
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА Движения.Период ЕСТЬ NULL ТОГДА
	|					ИСТИНА
	|			ИНАЧЕ
	|				ВЫБОР
	|					КОГДА ИзмененныеСтроки.Период <> Движения.Период
	|							ИЛИ ИзмененныеСтроки.Спецификация <> Движения.Спецификация
	|							ИЛИ ИзмененныеСтроки.Количество <> Движения.Количество
	|							ИЛИ ИзмененныеСтроки.КЗаказу <> Движения.КЗаказу
	|					ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ) КАК ТребуетсяПересчет,
	|	
	|	МАКСИМУМ(КэшДанных.ТипПроизводственногоПроцесса) КАК ТипПроизводственногоПроцесса,
	|	МАКСИМУМ(КэшДанных.ПовторноеРазузлование) КАК ПовторноеРазузлование
	|	
	|ПОМЕСТИТЬ ИзмененныеСпецификации
	|ИЗ
	|	ИзмененныеСтроки КАК ИзмененныеСтроки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК Движения
	|		ПО Движения.Период                      = ИзмененныеСтроки.Период
	|			И Движения.Регистратор              = ИзмененныеСтроки.Регистратор
	|			И Движения.ПланПроизводства         = ИзмененныеСтроки.ПланПроизводства
	|			И Движения.Номенклатура             = ИзмененныеСтроки.Номенклатура
	|			И Движения.Характеристика           = ИзмененныеСтроки.Характеристика
	|			И Движения.Спецификация             = ИзмененныеСтроки.Спецификация
	|			И Движения.Назначение               = ИзмененныеСтроки.Назначение
	|			И Движения.ДатаВыпускаПолуфабриката = ИзмененныеСтроки.ДатаВыпускаПолуфабриката
	|			И Движения.ЭтоПолуфабрикат          = ИзмененныеСтроки.ЭтоПолуфабрикат
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК КэшДанных
	|		ПО КэшДанных.Период                      = ИзмененныеСтроки.Период
	|			И КэшДанных.Регистратор              = ИзмененныеСтроки.Регистратор
	|			И КэшДанных.ПланПроизводства         = ИзмененныеСтроки.ПланПроизводства
	|			И КэшДанных.Спецификация             = ИзмененныеСтроки.Спецификация
	|			И КэшДанных.Назначение               = ИзмененныеСтроки.Назначение
	|	
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеСтроки.Регистратор,
	|	ИзмененныеСтроки.ПланПроизводства,
	|	ИзмененныеСтроки.Период,
	|	ИзмененныеСтроки.Спецификация,
	|	ИзмененныеСтроки.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ПланПроизводства,
	|	Спецификация,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	Движения.Период КАК Период,
	|	Движения.Регистратор КАК Регистратор,
	|	
	|	Движения.Номенклатура КАК Номенклатура,
	|	Движения.Характеристика КАК Характеристика,
	|	Движения.ПланПроизводства КАК ПланПроизводства,
	|	Движения.Спецификация КАК Спецификация,
	|	Движения.Назначение КАК Назначение,
	|	НаправленияДеятельности.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	Движения.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	Движения.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ЕСТЬNULL(ИзмененныеСтроки.ДатаЗапускаВыпуска, Движения.ДатаЗапускаВыпуска) КАК ДатаЗапускаВыпуска,
	|	
	|	ИзмененныеСпецификации.Период ЕСТЬ NULL КАК ЕстьИзменения,
	|	ISNULL(ИзмененныеСпецификации.ТребуетсяПересчет, ЛОЖЬ) КАК ТребуетсяПересчет,
	|	
	|	Движения.ПовторноеРазузлование        КАК ПовторноеРазузлование,
	|	Движения.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.Период ЕСТЬ NULL ТОГДА
	|			Движения.РучнаяКорректировка
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ИзмененныеСтроки.РучнаяКорректировка
	|				ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.Период ЕСТЬ NULL ТОГДА
	|			Движения.ДатаКорректировки
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ИзмененныеСтроки.РучнаяКорректировка
	|				ТОГДА ИзмененныеСтроки.ДатаКорректировки
	|				ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаКорректировки,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.Период ЕСТЬ NULL ТОГДА
	|			Движения.АвторКорректировки
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ИзмененныеСтроки.РучнаяКорректировка
	|				ТОГДА ИзмененныеСтроки.АвторКорректировки
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК АвторКорректировки,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.Период ЕСТЬ NULL ТОГДА
	|			Движения.Комментарий
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ИзмененныеСтроки.РучнаяКорректировка
	|				ТОГДА ИзмененныеСтроки.Комментарий
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК Комментарий,
	|	
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.Период ЕСТЬ NULL ТОГДА
	|			Движения.ИсходнаяПотребность
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ИзмененныеСтроки.РучнаяКорректировка
	|				ТОГДА ИзмененныеСтроки.ИсходнаяПотребность
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ИсходнаяПотребность,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.Период ЕСТЬ NULL ТОГДА
	|			Движения.ИсходнаяПотребностьКЗаказу
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ИзмененныеСтроки.РучнаяКорректировка
	|				ТОГДА ИзмененныеСтроки.ИсходнаяПотребностьКЗаказу
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ИсходнаяПотребностьКЗаказу,
	|	
	|	ISNULL(ИзмененныеСтроки.Количество, Движения.Количество) КАК Количество,
	|	ISNULL(ИзмененныеСтроки.КЗаказу, Движения.КЗаказу) КАК КЗаказу,
	|	
	|	ISNULL(ИзмененныеСтроки.ИнтервалПотребностиОт, Движения.ИнтервалПотребностиОт) КАК ИнтервалПотребностиОт,
	|	ISNULL(ИзмененныеСтроки.ИнтервалПотребностиДо, Движения.ИнтервалПотребностиДо) КАК ИнтервалПотребностиДо,
	|	ISNULL(ИзмененныеСтроки.ЗаданИнтервалПотребности, Движения.ЗаданИнтервалПотребности) КАК ЗаданИнтервалПотребности,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.ЗаданИнтервалПотребности ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИзмененныеСтроки.ЗаданИнтервалПотребности <> Движения.ЗаданИнтервалПотребности
	|			ИЛИ ИзмененныеСтроки.ИнтервалПотребностиОт <> Движения.ИнтервалПотребностиОт
	|			ИЛИ ИзмененныеСтроки.ИнтервалПотребностиДо <> Движения.ИнтервалПотребностиДо
	|	КОНЕЦ КАК ИзмененИнтервалПотребности,
	|	
	|	Движения.ПланПроизводства КАК Ссылка
	|	
	|ПОМЕСТИТЬ ПланыПроизводства
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК Движения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеСтроки КАК ИзмененныеСтроки
	|		ПО Движения.Период                      = ИзмененныеСтроки.Период
	|			И Движения.Регистратор              = ИзмененныеСтроки.Регистратор
	|			И Движения.ПланПроизводства         = ИзмененныеСтроки.ПланПроизводства
	|			И Движения.Номенклатура             = ИзмененныеСтроки.Номенклатура
	|			И Движения.Характеристика           = ИзмененныеСтроки.Характеристика
	|			И Движения.Спецификация             = ИзмененныеСтроки.Спецификация
	|			И Движения.Назначение               = ИзмененныеСтроки.Назначение
	|			И Движения.ДатаВыпускаПолуфабриката = ИзмененныеСтроки.ДатаВыпускаПолуфабриката
	|			И Движения.ЭтоПолуфабрикат          = ИзмененныеСтроки.ЭтоПолуфабрикат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеСпецификации КАК ИзмененныеСпецификации
	|		ПО Движения.Период              = ИзмененныеСпецификации.Период
	|			И Движения.Регистратор      = ИзмененныеСпецификации.Регистратор
	|			И Движения.ПланПроизводства = ИзмененныеСпецификации.ПланПроизводства
	|			И Движения.Спецификация     = ИзмененныеСпецификации.Спецификация
	|			И Движения.Назначение       = ИзмененныеСпецификации.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО Движения.Назначение = НаправленияДеятельности.Назначение
	|
	|ГДЕ
	|	Движения.Регистратор В(&Регистраторы)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	
	|	ИзмененныеСтроки.Период КАК Период,
	|	ИзмененныеСтроки.Регистратор КАК Регистратор,
	|	
	|	ИзмененныеСтроки.Номенклатура КАК Номенклатура,
	|	ИзмененныеСтроки.Характеристика КАК Характеристика,
	|	ИзмененныеСтроки.ПланПроизводства КАК ПланПроизводства,
	|	ИзмененныеСтроки.Спецификация КАК Спецификация,
	|	ИзмененныеСтроки.Назначение КАК Назначение,
	|	НаправленияДеятельности.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	ИзмененныеСтроки.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	ИзмененныеСтроки.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ИзмененныеСтроки.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпуска,
	|	
	|	ИзмененныеСпецификации.Период ЕСТЬ NULL КАК ЕстьИзменения,
	|	ISNULL(ИзмененныеСпецификации.ТребуетсяПересчет, ЛОЖЬ) КАК ТребуетсяПересчет,
	|	
	|	ИзмененныеСпецификации.ПовторноеРазузлование        КАК ПовторноеРазузлование,
	|	ИзмененныеСпецификации.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	
	|	ИзмененныеСтроки.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ИзмененныеСтроки.ДатаКорректировки   КАК ДатаКорректировки,
	|	ИзмененныеСтроки.АвторКорректировки  КАК АвторКорректировки,
	|	ИзмененныеСтроки.Комментарий         КАК Комментарий,
	|	
	|	ИзмененныеСтроки.ИсходнаяПотребность        КАК ИсходнаяПотребность,
	|	ИзмененныеСтроки.ИсходнаяПотребностьКЗаказу КАК ИсходнаяПотребностьКЗаказу,
	|	
	|	ИзмененныеСтроки.Количество КАК Количество,
	|	ИзмененныеСтроки.КЗаказу    КАК КЗаказу,
	|	
	|	ИзмененныеСтроки.ИнтервалПотребностиОт КАК ИнтервалПотребностиОт,
	|	ИзмененныеСтроки.ИнтервалПотребностиДо КАК ИнтервалПотребностиДо,
	|	ИзмененныеСтроки.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности,
	|	ЛОЖЬ КАК ИзмененИнтервалПотребности,
	|	
	|	ИзмененныеСтроки.ПланПроизводства КАК Ссылка
	|ИЗ
	|	ИзмененныеСтроки КАК ИзмененныеСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК Движения
	|		ПО Движения.Период                      = ИзмененныеСтроки.Период
	|			И Движения.Регистратор              = ИзмененныеСтроки.Регистратор
	|			И Движения.ПланПроизводства         = ИзмененныеСтроки.ПланПроизводства
	|			И Движения.Номенклатура             = ИзмененныеСтроки.Номенклатура
	|			И Движения.Характеристика           = ИзмененныеСтроки.Характеристика
	|			И Движения.Спецификация             = ИзмененныеСтроки.Спецификация
	|			И Движения.Назначение               = ИзмененныеСтроки.Назначение
	|			И Движения.ДатаВыпускаПолуфабриката = ИзмененныеСтроки.ДатаВыпускаПолуфабриката
	|			И Движения.ЭтоПолуфабрикат          = ИзмененныеСтроки.ЭтоПолуфабрикат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеСпецификации КАК ИзмененныеСпецификации
	|		ПО ИзмененныеСтроки.Период              = ИзмененныеСпецификации.Период
	|			И ИзмененныеСтроки.Регистратор      = ИзмененныеСпецификации.Регистратор
	|			И ИзмененныеСтроки.ПланПроизводства = ИзмененныеСпецификации.ПланПроизводства
	|			И ИзмененныеСтроки.Спецификация     = ИзмененныеСпецификации.Спецификация
	|			И ИзмененныеСтроки.Назначение       = ИзмененныеСпецификации.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО ИзмененныеСтроки.Назначение = НаправленияДеятельности.Назначение
	|
	|ГДЕ
	|	Движения.Регистратор ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	Движения.Регистратор КАК Регистратор,
	|	
	|	Движения.ПланПроизводства КАК ПланПроизводства,
	|	Движения.Период           КАК ДатаПроизводства,
	|	Движения.Спецификация     КАК СпецификацияПродукции,
	|	Движения.Назначение       КАК НазначениеПродукции,
	|	Движения.Номенклатура     КАК НоменклатураПродукции,
	|	Движения.Характеристика   КАК ХарактеристикаПродукции,
	|	
	|	ВЫБОР
	|		КОГДА НЕ &РазрешитьПовтИспРассчитанныхДанных ИЛИ МАКСИМУМ(Движения.ПовторноеРазузлование)
	|			ТОГДА 0
	|		ИНАЧЕ
	|			СУММА(Движения.Количество)
	|	КОНЕЦ
	|		КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &РазрешитьПовтИспРассчитанныхДанных ИЛИ МАКСИМУМ(Движения.ПовторноеРазузлование)
	|			ТОГДА 0
	|		ИНАЧЕ
	|			СУММА(Движения.КЗаказу)
	|	КОНЕЦ
	|		КАК КЗаказу,
	|	
	|	МАКСИМУМ(ВЫРАЗИТЬ(Движения.Количество + 0.001 КАК ЧИСЛО(15,3))) КАК ПроверкаПереполненияЧисловогоПоля1,
	|	МАКСИМУМ(ВЫРАЗИТЬ(Движения.КЗаказу    + 0.001 КАК ЧИСЛО(15,3))) КАК ПроверкаПереполненияЧисловогоПоля2,
	|	
	|	Движения.ИнтервалПотребностиОт КАК ИнтервалПотребностиОт,
	|	Движения.ИнтервалПотребностиДо КАК ИнтервалПотребностиДо,
	|	Движения.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности,
	|	Движения.ИзмененИнтервалПотребности КАК ИзмененИнтервалПотребности,
	|	ВЫБОР
	|		КОГДА НЕ &РазрешитьПовтИспРассчитанныхДанных ИЛИ МАКСИМУМ(Движения.ПовторноеРазузлование)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ
	|			МАКСИМУМ(Движения.ИзмененИнтервалПотребности)
	|	КОНЕЦ КАК ИзменитьИнтервалПотребности
	|	
	|ПОМЕСТИТЬ ИзмененныеДвижения
	|ИЗ
	|	ПланыПроизводства КАК Движения
	|ГДЕ 
	|	Движения.ТребуетсяПересчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.Регистратор,
	|	Движения.ПланПроизводства,
	|	Движения.Период,
	|	Движения.Спецификация,
	|	Движения.Назначение,
	|	Движения.Номенклатура,
	|	Движения.Характеристика,
	|	Движения.ИнтервалПотребностиОт,
	|	Движения.ИнтервалПотребностиДо,
	|	Движения.ЗаданИнтервалПотребности,
	|	Движения.ИзмененИнтервалПотребности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ПланПроизводства,
	|	ДатаПроизводства,
	|	СпецификацияПродукции,
	|	НазначениеПродукции,
	|	НоменклатураПродукции,
	|	ХарактеристикаПродукции
	|");
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПараметрыРасчета.ПланПроизводства);
	Запрос.УстановитьПараметр("РазделительРасчета", ПараметрыРасчета.РазделительРасчета);
	
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.УстановитьПараметр("ИзмененныеСтроки", ИзмененныеСтроки);
	
	Запрос.УстановитьПараметр("РазрешитьПовтИспРассчитанныхДанных", ПараметрыРасчета.РазрешитьПовтИспРассчитанныхДанных);
	
	Для каждого КлючИЗначение Из ПараметрыРасчета.Реквизиты Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокЗапросов = Новый СписокЗначений();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Движения.*,
	|	
	|	&Статус КАК Статус,
	|	&Сценарий КАК Сценарий,
	|	&ВидПлана КАК ВидПлана,
	|	&ПодразделениеДиспетчер КАК Подразделение,
	|	
	|	&РазделительРасчета КАК РазделительРасчета
	|ИЗ
	|	ПланыПроизводства КАК Движения
	|ГДЕ
	|	(Движения.Количество <> 0 ИЛИ Движения.КЗаказу <> 0) ИЛИ Движения.РучнаяКорректировка
	|";
	СписокЗапросов.Добавить(ТекстЗапроса, "ПланыПроизводства");
	
	ТребуетсяПересчетДвижений = Не ЗначениеЗаполнено(ИзмененныеСтроки) ИЛИ РезультатЗапроса.Выгрузить()[0].Количество > 0; // обновление статуса, пересчет количества
	Если ТребуетсяПересчетДвижений Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Движения.*,
		|	&Статус КАК Статус,
		|	ISNULL(ИзмененныеДвижения.Количество * Движения.КоличествоНаЕдиницуПродукции, Движения.Количество) КАК Количество
		|	
		|ИЗ
		|	РегистрНакопления.ПланыВыпускаИзделий КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеДвижения КАК ИзмененныеДвижения
		|			ПО Движения.Регистратор             = ИзмененныеДвижения.Регистратор
		|			 И Движения.ПланПроизводства        = ИзмененныеДвижения.ПланПроизводства
		|			 И Движения.ДатаПроизводства        = ИзмененныеДвижения.ДатаПроизводства
		|			 И Движения.СпецификацияПродукции   = ИзмененныеДвижения.СпецификацияПродукции
		|			 И Движения.НазначениеПродукции     = ИзмененныеДвижения.НазначениеПродукции
		|			 И Движения.НоменклатураПродукции   = ИзмененныеДвижения.НоменклатураПродукции
		|			 И Движения.ХарактеристикаПродукции = ИзмененныеДвижения.ХарактеристикаПродукции
		|ГДЕ
		|	Движения.Регистратор В(&Регистраторы) И ((ISNULL(ИзмененныеДвижения.Количество * Движения.КоличествоНаЕдиницуПродукции, Движения.Количество) <> 0)) 
		|";
		СписокЗапросов.Добавить(ТекстЗапроса, "ПланыВыпускаИзделий");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Движения.*,
		|	&Статус КАК Статус,
		|	ISNULL(ИзмененныеДвижения.Количество * Движения.КоличествоНаЕдиницуПродукции, Движения.Количество) КАК Количество,
		|	ISNULL(ИзмененныеДвижения.КЗаказу * Движения.КоличествоНаЕдиницуПродукции, Движения.КЗаказу) КАК КЗаказу
		|ИЗ
		|	РегистрНакопления.ПланыПотребленияМатериалов КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеДвижения КАК ИзмененныеДвижения
		|			ПО Движения.Регистратор             = ИзмененныеДвижения.Регистратор
		|			 И Движения.ПланПроизводства        = ИзмененныеДвижения.ПланПроизводства
		|			 И Движения.ДатаПроизводства        = ИзмененныеДвижения.ДатаПроизводства
		|			 И Движения.СпецификацияПродукции   = ИзмененныеДвижения.СпецификацияПродукции
		|			 И Движения.НазначениеПродукции     = ИзмененныеДвижения.НазначениеПродукции
		|			 И Движения.НоменклатураПродукции   = ИзмененныеДвижения.НоменклатураПродукции
		|			 И Движения.ХарактеристикаПродукции = ИзмененныеДвижения.ХарактеристикаПродукции
		|ГДЕ
		|	Движения.Регистратор В(&Регистраторы) 
		|	И (ISNULL(ИзмененныеДвижения.Количество * Движения.КоличествоНаЕдиницуПродукции, Движения.Количество) <> 0 ИЛИ ISNULL(ИзмененныеДвижения.КЗаказу * Движения.КоличествоНаЕдиницуПродукции, Движения.КЗаказу) <> 0)
		|";
		СписокЗапросов.Добавить(ТекстЗапроса, "ПланыПотребленияМатериалов");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.ПланПроизводства КАК ПланПроизводства,
		|	Движения.ДатаПроизводства КАК ДатаПроизводства,
		|	Движения.СпецификацияПродукции КАК СпецификацияПродукции,
		|	Движения.НазначениеПродукции КАК НазначениеПродукции,
		|	Движения.НоменклатураПродукции КАК НоменклатураПродукции,
		|	Движения.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
		|	Движения.РазделительРасчета КАК РазделительРасчета,
		|	Движения.ВидРабот КАК ВидРабот,
		|	СУММА(1) КАК ДлительностьЭтапа
		|ПОМЕСТИТЬ ВТСтрокиДвижений
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК Движения
		|ГДЕ
		|	Движения.Регистратор В(&Регистраторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.Регистратор,
		|	Движения.ПланПроизводства,
		|	Движения.ДатаПроизводства,
		|	Движения.СпецификацияПродукции,
		|	Движения.НазначениеПродукции,
		|	Движения.НоменклатураПродукции,
		|	Движения.ХарактеристикаПродукции,
		|	Движения.РазделительРасчета,
		|	Движения.ВидРабот
		|";
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Движения.*,
		|	&Статус КАК Статус,
		|	ISNULL(ИзмененныеДвижения.Количество * Движения.КоличествоНаЕдиницуПродукции / СтрокиДвижений.ДлительностьЭтапа, Движения.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиТрудовыхРесурсов КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеДвижения КАК ИзмененныеДвижения
		|			ПО Движения.Регистратор             = ИзмененныеДвижения.Регистратор
		|			 И Движения.ПланПроизводства        = ИзмененныеДвижения.ПланПроизводства
		|			 И Движения.ДатаПроизводства        = ИзмененныеДвижения.ДатаПроизводства
		|			 И Движения.СпецификацияПродукции   = ИзмененныеДвижения.СпецификацияПродукции
		|			 И Движения.НазначениеПродукции     = ИзмененныеДвижения.НазначениеПродукции
		|			 И Движения.НоменклатураПродукции   = ИзмененныеДвижения.НоменклатураПродукции
		|			 И Движения.ХарактеристикаПродукции = ИзмененныеДвижения.ХарактеристикаПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДвижений КАК СтрокиДвижений
		|			ПО Движения.Регистратор             = СтрокиДвижений.Регистратор
		|			 И Движения.ПланПроизводства        = СтрокиДвижений.ПланПроизводства
		|			 И Движения.ДатаПроизводства        = СтрокиДвижений.ДатаПроизводства
		|			 И Движения.СпецификацияПродукции   = СтрокиДвижений.СпецификацияПродукции
		|			 И Движения.НазначениеПродукции     = СтрокиДвижений.НазначениеПродукции
		|			 И Движения.НоменклатураПродукции   = СтрокиДвижений.НоменклатураПродукции
		|			 И Движения.ХарактеристикаПродукции = СтрокиДвижений.ХарактеристикаПродукции
		|			 И Движения.РазделительРасчета      = СтрокиДвижений.РазделительРасчета
		|			 И Движения.ВидРабот                = СтрокиДвижений.ВидРабот
		|ГДЕ
		|	Движения.Регистратор В(&Регистраторы)
		|	И ISNULL(ИзмененныеДвижения.Количество * Движения.КоличествоНаЕдиницуПродукции / СтрокиДвижений.ДлительностьЭтапа, Движения.Количество) <> 0
		|";
		СписокЗапросов.Добавить(ТекстЗапроса, "ПланыЗанятостиТрудовыхРесурсов");
		
//++ НЕ УТКА
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Движения.*,
		|	&Статус КАК Статус,
		|	ISNULL(ИзмененныеДвижения.Количество * Движения.КоличествоНаЕдиницуПродукции, Движения.Занятость) КАК Занятость
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров КАК Движения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененныеДвижения КАК ИзмененныеДвижения
		|			ПО Движения.Регистратор             = ИзмененныеДвижения.Регистратор
		|			 И Движения.ПланПроизводства        = ИзмененныеДвижения.ПланПроизводства
		|			 И Движения.ДатаПроизводства        = ИзмененныеДвижения.ДатаПроизводства
		|			 И Движения.СпецификацияПродукции   = ИзмененныеДвижения.СпецификацияПродукции
		|			 И Движения.НазначениеПродукции     = ИзмененныеДвижения.НазначениеПродукции
		|			 И Движения.НоменклатураПродукции   = ИзмененныеДвижения.НоменклатураПродукции
		|			 И Движения.ХарактеристикаПродукции = ИзмененныеДвижения.ХарактеристикаПродукции
		|ГДЕ
		|	Движения.Регистратор В(&Регистраторы) И ISNULL(ИзмененныеДвижения.Количество * Движения.КоличествоНаЕдиницуПродукции, Движения.Занятость) <> 0
		|";
		СписокЗапросов.Добавить(ТекстЗапроса, "ПланыЗанятостиВидовРабочихЦентров");
//-- НЕ УТКА
		
	КонецЕсли;
	
	ДанныеДляДвижений = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, СписокЗапросов,, Истина);

	Для каждого КлючИЗначение Из ДанныеДляДвижений Цикл
		ТаблицаДляДвижений = КлючИЗначение.Значение; // ТаблицаЗначений - 
		ТаблицаДляДвижений.Индексы.Добавить("Регистратор");
	КонецЦикла;
	
	ИзменяемыеРегистры = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ДанныеДляДвижений, ","), ",");
	
	Если ПараметрыРасчета.РазрешитьПовтИспРассчитанныхДанных Тогда
		ПовтРасчет = ВыгрузитьДанныеДляПовторногоРазузлования(ДанныеДляДвижений.ПланыПроизводства,
																ПараметрыРасчета,
																Новый Структура(
																	"ТребуетсяПересчет,
																	|ПовторноеРазузлование",
																	Истина,
																	Истина));
		ПовтРасчет.Индексы.Добавить("Разделитель");
	Иначе
		ПовтРасчет = ВыгрузитьДанныеДляПовторногоРазузлования(ДанныеДляДвижений.ПланыПроизводства,
																ПараметрыРасчета,
																Новый Структура(
																	"ТребуетсяПересчет",
																	Истина));
		ПовтРасчет.Индексы.Добавить("Разделитель");
	КонецЕсли;
	
	ТребуетсяПовтРасчет = (ПовтРасчет.Количество() > 0);
	
	Если ТребуетсяПовтРасчет Тогда
		
		РезультатРасчета = ПовтРасчет.СкопироватьКолонки("Разделитель"); // ТаблицаЗначений - 
		РезультатРасчета.Колонки.Добавить("ДанныеСпецификации");
		
		СтруктураДанных = РазузловатьИзделия(ПовтРасчет, ПараметрыРасчета);
		
		Если СтруктураДанных.ЕстьОшибка Тогда
			
			ТекстОшибки = СтруктураДанных.ОшибкаТекст;
			ВызватьИсключение ТекстОшибки;
			
		Иначе
			
			Для каждого ДанныеСпецификации Из СтруктураДанных.ДанныеСпецификаций Цикл
				
				ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("СкладМатериалов", Новый ОписаниеТипов("СправочникСсылка.Склады"));
				ДанныеСпецификации.МатериалыИУслуги.ЗагрузитьКолонку(ДанныеСпецификации.МатериалыИУслуги.ВыгрузитьКолонку("Склад"), "СкладМатериалов");
				
				Если ПараметрыРасчета.Реквизиты.ПереноситьПотребностьПодразделенийЧерезПеремещения Тогда
					ПроброситьПеремещения(ДанныеСпецификации.МатериалыИУслуги);
				КонецЕсли;
				
				РаспределениеЗанятостиПоДлительностиЭтапа(ДанныеСпецификации.Трудозатраты);
				
				НоваяСтрока = РезультатРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСпецификации);
				НоваяСтрока.ДанныеСпецификации = ДанныеСпецификации;
			КонецЦикла;
			
		КонецЕсли;
		
		РезультатРасчета.Индексы.Добавить("Разделитель");
		
	КонецЕсли;
	
	СкорректированныеСтроки = ИзмененныеСтроки.НайтиСтроки(Новый Структура("РучнаяКорректировка", Истина));
	
	Периоды = СтруктураРасчетаПериодов();
	РеквизитыСпецификаций = РеквизитыСпецификаций(ИзмененныеСтроки, ПараметрыРасчета);
	
	СписокДляЗаписи = Новый Массив;
	
	СтруктураРасчетаДатЗапускаВыпуска = Новый Структура();
	СтруктураРасчетаДатЗапускаВыпуска.Вставить("Периоды", Периоды);
	СтруктураРасчетаДатЗапускаВыпуска.Вставить("РеквизитыСпецификаций", РеквизитыСпецификаций);
	
	ОтборДвижений = Новый Структура("Регистратор");
	
	Для каждого Регистратор Из Регистраторы Цикл
		
		Движения = НаборыЗаписиДвижений(Регистратор, ИзменяемыеРегистры);
		ОтборДвижений.Регистратор = Регистратор;
		
		Для каждого КлючИЗначение Из ДанныеДляДвижений Цикл
			Движения[КлючИЗначение.Ключ].Загрузить(КлючИЗначение.Значение.Скопировать(ОтборДвижений));
		КонецЦикла;
		
		ДобавитьСтрокиКРасчетуДатыЗапускаВыпуска(СтруктураРасчетаДатЗапускаВыпуска, Движения.ПланыПроизводства);
		
		Если ТребуетсяПовтРасчет Тогда
			
			РазделительЗаписи = Новый Структура("Разделитель", Регистратор);
			
			ЗначенияЗаполнения = ЗначенияЗаполненияДвижений(
				Регистратор,
				ПараметрыРасчета);
			
			НайденныеСтроки = РезультатРасчета.НайтиСтроки(РазделительЗаписи);
			
			ЗаполнитьДвиженияПоРезультатуРасчета(
				Движения,
				ЗначенияЗаполнения,
				НайденныеСтроки,
				Периоды);
			
		КонецЕсли;
		
		СписокДляЗаписи.Добавить(Новый Структура("Регистратор, НовыйРегистратор, Движения", Регистратор, Ложь, Движения));
		
	КонецЦикла;
	
	ЗаполнитьПериодыВДвижениях(ПараметрыРасчета, Периоды);
	
	ЗаписатьРезультатРасчета(СписокДляЗаписи, ПараметрыРасчета, СкорректированныеСтроки);
	
КонецПроцедуры

Процедура ВыполнитьОтменуРасчета(ПараметрыДействия, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ПланированиеЗапасов.КорректировкаПланаПроизводства");
	
	ВыполнитьОтменуРасчетаВнутриЗамераВремени(ПараметрыДействия, АдресРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ПараметрыДействия.Регистраторы.Количество());

КонецПроцедуры

Процедура ВыполнитьОтменуРасчетаВнутриЗамераВремени(ПараметрыДействия, АдресРезультата)
	
	ПараметрыРасчета = ПараметрыДействия.ПараметрыРасчета;
	Регистраторы     = ПараметрыДействия.Регистраторы;
	
	СписокДляЗаписи = Новый Массив;
	
	Для каждого Регистратор Из Регистраторы Цикл
		СписокДляЗаписи.Добавить(Новый Структура("Регистратор, НовыйРегистратор, Движения", Регистратор, Ложь, НаборыЗаписиДвижений(Регистратор)));
	КонецЦикла;
	
	ЗаписатьРезультатРасчета(СписокДляЗаписи, ПараметрыРасчета);
	
КонецПроцедуры

Процедура ЗаписатьРезультатВПротоколРасчета(АдресРезультата, ПротоколРасчета)
	
	Возврат; // в данной конфигурации дополнительных действий не требуется
	
КонецПроцедуры

#КонецОбласти

#Область РасчетПериодов

// Возвращает структуру расчета периодов
//
// Возвращаемое значение:
//  Структура - содержит:
//   * СтрокиИскатьВперед - ТаблицаЗначений - содержит:
//                           ** ДатаОтсчета - Дата - 
//                           ** ЧислоДней - Число -
//                           ** Искать - Булево -
//                           ** ИмяПоля - Строка -
//                           ** СтрокаТаблицыДвижений - РегистрНакопленияЗапись, СтрокаТаблицыЗначений -
//   * СтрокиИскатьНазад - ТаблицаЗначений - содержит:
//                           ** ДатаОтсчета - Дата - 
//                           ** ЧислоДней - Число -
//                           ** Искать - Булево -
//                           ** ИмяПоля - Строка -
//                           ** СтрокаТаблицыДвижений - РегистрНакопленияЗапись, СтрокаТаблицыЗначений -
//
Функция СтруктураРасчетаПериодов()
	
	СтрокиИскатьВперед = Новый ТаблицаЗначений();
	СтрокиИскатьВперед.Колонки.Добавить("ДатаОтсчета", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	СтрокиИскатьВперед.Колонки.Добавить("ЧислоДней",   Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла));
	СтрокиИскатьВперед.Колонки.Добавить("Искать",      Новый ОписаниеТипов("Булево"));
	СтрокиИскатьВперед.Колонки.Добавить("ИмяПоля");
	СтрокиИскатьВперед.Колонки.Добавить("СтрокаТаблицыДвижений");
	
	СтрокиИскатьНазад = Новый ТаблицаЗначений();
	СтрокиИскатьНазад.Колонки.Добавить("ДатаОтсчета", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	СтрокиИскатьНазад.Колонки.Добавить("ЧислоДней",   Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла));
	СтрокиИскатьНазад.Колонки.Добавить("Искать",      Новый ОписаниеТипов("Булево"));
	СтрокиИскатьНазад.Колонки.Добавить("ИмяПоля");
	СтрокиИскатьНазад.Колонки.Добавить("СтрокаТаблицыДвижений");
	
	СтруктураРасчета = Новый Структура("СтрокиИскатьВперед, СтрокиИскатьНазад", СтрокиИскатьВперед, СтрокиИскатьНазад);
	Возврат СтруктураРасчета;
	
КонецФункции

// Добавляет строку к расчету периода
// 
// Параметры:
//  СтруктураРасчетаПериодов - см. СтруктураРасчетаПериодов
//  ДатаОтсчета - Дата - Дата отсчета
//  ЧислоДней - Число -
//  Строка - РегистрНакопленияЗапись,СтрокаТаблицыЗначений
//  ИмяПоля - Строка - Имя поля
Процедура ДобавитьСтрокуКРасчетуПериода(СтруктураРасчетаПериодов, ДатаОтсчета, ЧислоДней, Строка, ИмяПоля = "Период")
	
	СтруктураРасчета =
		?(ЧислоДней > 1, СтруктураРасчетаПериодов.СтрокиИскатьВперед, СтруктураРасчетаПериодов.СтрокиИскатьНазад);
		
	НоваяСтрока = СтруктураРасчета.Добавить();
	
	НоваяСтрока.ДатаОтсчета = ДатаОтсчета;
	НоваяСтрока.ЧислоДней   = ЧислоДней * ?(ЧислоДней > 1, 1, -1);
	НоваяСтрока.Искать      = ЧислоДней <> 0;
	
	НоваяСтрока.ИмяПоля = ИмяПоля;
	НоваяСтрока.СтрокаТаблицыДвижений = Строка;
	
КонецПроцедуры

Процедура ДобавитьСтрокиКРасчетуДатыЗапускаВыпуска(СтруктураРасчетаДатЗапускаВыпуска, Таблица)
	
	Периоды               = СтруктураРасчетаДатЗапускаВыпуска.Периоды;
	РеквизитыСпецификаций = СтруктураРасчетаДатЗапускаВыпуска.РеквизитыСпецификаций;
	
	Для каждого Строка Из Таблица Цикл
		
		Если Строка.ДатаЗапускаВыпуска <> '00010101' Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыСпецификации = РеквизитыСпецификаций[Строка.Спецификация];
		
		Если РеквизитыСпецификации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			ИЛИ Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
			
			ДобавитьСтрокуКРасчетуПериода(
				Периоды,
				Строка.Период,
				-РеквизитыСпецификации.Длительность,
				Строка,
				"ДатаЗапускаВыпуска");
			
		ИначеЕсли Строка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			
			ДобавитьСтрокуКРасчетуПериода(
				Периоды,
				Строка.Период,
				РеквизитыСпецификации.Длительность,
				Строка,
				"ДатаЗапускаВыпуска");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПериодыВДвижениях(ПараметрыРасчета, СтруктураРасчетаПериодов)
	
	Сценарий = ПараметрыРасчета.Реквизиты.Сценарий;
	
	Для каждого КлючИЗначение Из СтруктураРасчетаПериодов Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ИскатьВперед = ?(КлючИЗначение.Ключ = "СтрокиИскатьВперед", Истина, Ложь);
		ОтборСтрок = Новый Структура("ДатаОтсчета, ЧислоДней");
		
		Периоды = КлючИЗначение.Значение; // ТаблицаЗначений - 
		Периоды.Индексы.Добавить("ДатаОтсчета, ЧислоДней");
		Периоды.Индексы.Добавить("Искать");
		
		СтрокиНеИскать = Периоды.НайтиСтроки(Новый Структура("Искать", Ложь));
		
		Для каждого Строка Из СтрокиНеИскать Цикл
			Строка.СтрокаТаблицыДвижений[Строка.ИмяПоля] = Строка.ДатаОтсчета;
		КонецЦикла;
		
		ДатыОтсчета = Периоды.Скопировать(Новый Структура("Искать", Истина), "ДатаОтсчета, ЧислоДней");
		ДатыОтсчета.Свернуть("ДатаОтсчета, ЧислоДней");

		ДатыПоГрафику = Планирование.ПолучитьДатыПоГрафику(ДатыОтсчета,
															Сценарий,
															ИскатьВперед);
		
		Для каждого Строка Из ДатыПоГрафику Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Строка);
			НайденныеДвижения = Периоды.НайтиСтроки(ОтборСтрок);
			
			Для каждого Движение Из НайденныеДвижения Цикл
				Движение.СтрокаТаблицыДвижений[Движение.ИмяПоля] = Строка.ДатаПоГрафику;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область Корректировка

Процедура СохранитьРучныеКорректировкиПередРасчетом(ПланПроизводства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.ПланПроизводства КАК ПланПроизводства,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.Спецификация КАК Спецификация,
	|	Таблица.ДатаЗапуска КАК ДатаЗапуска,
	|	Таблица.ДатаВыпуска КАК ДатаВыпуска,
	|	Таблица.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ИСТИНА КАК ЭтоПолуфабрикат,
	|	Таблица.Количество КАК Количество,
	|	Таблица.КЗаказу КАК КЗаказу,
	|	Таблица.ДатаКорректировки КАК ДатаКорректировки,
	|	Таблица.АвторКорректировки КАК АвторКорректировки,
	|	Таблица.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.СодержаниеКорректировокПланаПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.ПланПроизводства = &ПланПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.ПланПроизводства,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Назначение,
	|	Таблица.Спецификация,
	|	ВЫБОР
	|		КОГДА Таблица.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА Таблица.Период
	|		ИНАЧЕ Таблица.ДатаЗапускаВыпуска
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Таблица.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА Таблица.ДатаЗапускаВыпуска
	|		ИНАЧЕ Таблица.Период
	|	КОНЕЦ,
	|	Таблица.ДатаВыпускаПолуфабриката,
	|	Таблица.ЭтоПолуфабрикат,
	|	Таблица.Количество,
	|	Таблица.КЗаказу,
	|	Таблица.ДатаКорректировки,
	|	Таблица.АвторКорректировки,
	|	Таблица.Комментарий
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СодержаниеКорректировокПланаПроизводства КАК СодержаниеКорректировокПланаПроизводства
	|		ПО Таблица.ПланПроизводства            = СодержаниеКорректировокПланаПроизводства.ПланПроизводства
	|			И Таблица.Номенклатура             = СодержаниеКорректировокПланаПроизводства.Номенклатура
	|			И Таблица.Характеристика           = СодержаниеКорректировокПланаПроизводства.Характеристика
	|			И Таблица.Назначение               = СодержаниеКорректировокПланаПроизводства.Назначение
	|			И Таблица.ДатаВыпускаПолуфабриката = СодержаниеКорректировокПланаПроизводства.ДатаВыпускаПолуфабриката
	|ГДЕ
	|	Таблица.ПланПроизводства = &ПланПроизводства И Таблица.РучнаяКорректировка И СодержаниеКорректировокПланаПроизводства.ПланПроизводства ЕСТЬ NULL
	|");
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СодержаниеКорректировокПланаПроизводства");
		ЭлементБлокировки.УстановитьЗначение("ПланПроизводства", ПланПроизводства);
		Блокировка.Заблокировать();
		
		СписокКорректировок = Запрос.Выполнить().Выгрузить();
		
		РегистрыСведений.ОтменаКорректировокПланаПроизводства.ЗаписатьКорректировки(
			СписокКорректировок,
			ПланПроизводства,
			Ложь);
		РегистрыСведений.СодержаниеКорректировокПланаПроизводства.ОчиститьОчередь(ПланПроизводства);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область МногопоточноеВыполнение

Функция ЕстьСвободныеПотоки(ПараметрыРасчета)
	
	ЕстьСвободныеПотоки = Ложь;
	ОчередьРасчета = ПараметрыРасчета.ОчередьРасчета;
	
	Для Индекс = -ОчередьРасчета.ВГраница() По 0 Цикл
		
		Если ОчередьРасчета[-Индекс] = Неопределено Тогда
			ЕстьСвободныеПотоки = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьСвободныеПотоки;

КонецФункции

Функция ПолучитьМестоВОчередиРасчета(ПараметрыРасчета, ЗапрещеноВыполнятьВОтдельномПотоке)
	
	МестоВОчереди = 0;
	
	Если ПараметрыРасчета.РаспараллеливатьРасчет Тогда
		
		Если ЗапрещеноВыполнятьВОтдельномПотоке ИЛИ Не ЕстьСвободныеПотоки(ПараметрыРасчета) Тогда
			ОжидатьЗавершениеРасчета(ПараметрыРасчета, ЗапрещеноВыполнятьВОтдельномПотоке);
		КонецЕсли;
		
		МестоВОчереди = ПараметрыРасчета.ОчередьРасчета.Найти(Неопределено);
		
	КонецЕсли;
	
	Возврат МестоВОчереди;
	
КонецФункции

Функция ОжидатьЗавершениеРасчета(ПараметрыРасчета, ОжидатьЗавершениеРасчетаВсехПотоков = Истина)
	
	РасчетЗавершен = Ложь;
	ОчередьРасчета = ПараметрыРасчета.ОчередьРасчета; // см. ПроизводствоСервер.СлужебнаяСтруктураМассиваИзСтруктур
	
	СтруктураОтбора = Новый Структура();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Не РасчетЗавершен Цикл
		
		АктивныеЗадания = Новый Массив();
		ЕстьЗавершенныеЗадания = Ложь;
		
		Для Поток = 0 По ОчередьРасчета.ВГраница() Цикл
			
			Если ОчередьРасчета[Поток] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора.Вставить("УникальныйИдентификатор", ОчередьРасчета[Поток].Идентификатор);
			
			СписокЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
			
			Если СписокЗаданий.ВГраница() <> -1 Тогда
				
				Если СписокЗаданий[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
					АктивныеЗадания.Добавить(СписокЗаданий[0].УникальныйИдентификатор);
					Продолжить;
				КонецЕсли;
				
				Если СписокЗаданий[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					ТекстОшибки = ПодробноеПредставлениеОшибки(СписокЗаданий[0].ИнформацияОбОшибке);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаписатьРезультатВПротоколРасчета(ОчередьРасчета[Поток].АдресРезультата, ПараметрыРасчета["ПротоколРасчета"]);
			
			ОчередьРасчета[Поток] = Неопределено;
			ЕстьЗавершенныеЗадания = Истина;
			
		КонецЦикла;
		
		РасчетЗавершен = (ЕстьЗавершенныеЗадания И Не ОжидатьЗавершениеРасчетаВсехПотоков) ИЛИ Не ЗначениеЗаполнено(АктивныеЗадания);
		
		Если Не РасчетЗавершен Тогда
			
			Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(АктивныеЗадания[0]);
			
			Если Задание <> Неопределено Тогда
				Попытка
					Задание.ОжидатьЗавершения(ПараметрыРасчета.ИнтервалПроверкиЗавершенияРасчета);
				Исключение
					// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РасчетЗавершен;
	
КонецФункции

#КонецОбласти

#Область Запись

Функция ЗаписатьРезультатРасчета(СписокДляЗаписи, ПараметрыРасчета, СкорректированныеСтроки = Неопределено)
	
	КоличествоПопытокЗаписи = ?(ТранзакцияАктивна(), 1, 3);
	
	ЗначенияЗаполнения = ЗначенияЗаполненияДокумента(ПараметрыРасчета);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ДанныеДляЗаписи Из СписокДляЗаписи Цикл
		
		Регистратор = ДанныеДляЗаписи.Регистратор;
		
		Если ТипЗнч(Регистратор) <> Тип("ДокументСсылка.РегистраторПланаПроизводства") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьДокумент = ДанныеДляЗаписи.Движения["ПланыПроизводства"].Количество() > 0;
		
		Если ДанныеДляЗаписи.НовыйРегистратор И НЕ ЗаписатьДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Замещать = Не ДанныеДляЗаписи.НовыйРегистратор;
		
		СчетчикОшибок = 1;
		Пока Истина Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.ПланПроизводства");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыРасчета.ПланПроизводства);
					Блокировка.Заблокировать();
				КонецЕсли;
				
				Если ДанныеДляЗаписи.НовыйРегистратор Тогда
					
					ДокументОбъект = Документы.РегистраторПланаПроизводства.СоздатьДокумент();
					ДокументОбъект.УстановитьСсылкуНового(Регистратор);
					
				Иначе
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РегистраторПланаПроизводства");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
					Блокировка.Заблокировать();
					
					ДокументОбъект = Регистратор.ПолучитьОбъект();
					
				КонецЕсли;
				
				Если ЗаписатьДокумент Тогда
					
					ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначенияЗаполнения);
					
					Если ДанныеДляЗаписи.Свойство("ПревышенаМаксимальнаяПорцияЗаписи") Тогда
						ДокументОбъект.ПревышенаМаксимальнаяПорцияЗаписи = ДанныеДляЗаписи.ПревышенаМаксимальнаяПорцияЗаписи;
					КонецЕсли;
					
					ДокументОбъект.Проведен        = Истина;
					ДокументОбъект.ПометкаУдаления = Ложь;
					
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись); // обновление
					
				Иначе
					
					ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначенияЗаполнения);
					
					ДокументОбъект.ПревышенаМаксимальнаяПорцияЗаписи = Ложь;
					
					ДокументОбъект.Проведен        = Ложь;
					ДокументОбъект.ПометкаУдаления = Истина;
					
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись); // пометка на удаление
					
				КонецЕсли;
				
				Для каждого КлючиИЗначение Из ДанныеДляЗаписи.Движения Цикл
					
					НаборЗаписей = КлючиИЗначение.Значение;
					НаборЗаписей.ДополнительныеСвойства.Вставить("РежимРасчета", ПараметрыРасчета.РежимРасчета);
					
					Если НЕ Замещать
						И НаборЗаписей.Количество() > ПараметрыРасчета.КоличествоСтрокВНабореЗаписей Тогда
						
						КоличествоСтрок = НаборЗаписей.Количество();
						Таблица = НаборЗаписей.Выгрузить();
						
						ВсегоПорций = Окр(КоличествоСтрок/ПараметрыРасчета.КоличествоСтрокВНабореЗаписей + 0.5, 0, 0);
						Делитель = Новый Массив(ВсегоПорций);
						
						Счетчик = 0;
						НомерПорции = 0;
						Для каждого Строка Из Таблица Цикл
							Если Счетчик >= ПараметрыРасчета.КоличествоСтрокВНабореЗаписей Тогда
								Счетчик = 0;
								НомерПорции = НомерПорции + 1;
							КонецЕсли;
							Если Делитель[НомерПорции] = Неопределено Тогда
								РазмерПорции = Мин(ПараметрыРасчета.КоличествоСтрокВНабореЗаписей, КоличествоСтрок - ПараметрыРасчета.КоличествоСтрокВНабореЗаписей * НомерПорции);
								Делитель[НомерПорции] = Новый Массив(РазмерПорции);
							КонецЕсли;
							Делитель[НомерПорции][Счетчик] = Строка;
							Счетчик = Счетчик + 1;
						КонецЦикла;
						
						Для каждого СписокСтрок Из Делитель Цикл
							НаборЗаписей.Загрузить(Таблица.Скопировать(СписокСтрок));
							НаборЗаписей.Записать(Ложь);
						КонецЦикла;
						
						Таблица = Неопределено;
						Делитель = Неопределено;
						
					Иначе
						НаборЗаписей.Записать(Замещать);
					КонецЕсли;
					
				КонецЦикла;
//++ НЕ УТКА
				РегистрыСведений.СодержаниеКорректировокПланаПроизводства.ОтметитьВыполнение(ПараметрыРасчета.ПланПроизводства, СкорректированныеСтроки);
//-- НЕ УТКА
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				Если СчетчикОшибок >= КоличествоПопытокЗаписи Тогда
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				СчетчикОшибок = СчетчикОшибок + 1;
				Продолжить;
				
			КонецПопытки;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

#КонецОбласти

#Область Движения

Функция НаборыЗаписиДвижений(Регистратор, Регистры = Неопределено)
	
	МетаданныеДвижения = Метаданные.Документы.РегистраторПланаПроизводства.Движения;
	Движения = Новый Структура();
	
	Для каждого Регистр Из МетаданныеДвижения Цикл
		Если Регистры <> Неопределено
			И Регистры.Найти(Регистр.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей = РегистрыНакопления[Регистр.Имя].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей - 
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		Движения.Вставить(Регистр.Имя, НаборЗаписей);
	КонецЦикла;
	
	Возврат Движения;
	
КонецФункции

Функция ЗначенияЗаполненияДокумента(ПараметрыРасчета)
	
	Реквизиты = ПараметрыРасчета.Реквизиты;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата", ТекущаяДатаСеанса());
	
	Результат.Вставить("ПланПроизводства",   ПараметрыРасчета.ПланПроизводства);
	Результат.Вставить("РазделительРасчета", ПараметрыРасчета.РазделительРасчета);
	
	Результат.Вставить("Статус", Реквизиты.Статус);
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияЗаполненияДвижений(Регистратор, ПараметрыРасчета)
	
	Реквизиты = ПараметрыРасчета.Реквизиты;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Регистратор", Регистратор);
	Результат.Вставить("Активность", Истина);
	
	Результат.Вставить("ПланПроизводства",   ПараметрыРасчета.ПланПроизводства);
	Результат.Вставить("РазделительРасчета", ПараметрыРасчета.РазделительРасчета);
	
	Результат.Вставить("Статус",                       Реквизиты.Статус);
	Результат.Вставить("Сценарий",                     Реквизиты.Сценарий);
	Результат.Вставить("ВидПлана",                     Реквизиты.ВидПлана);
	Результат.Вставить("ПодразделениеДиспетчер",       Реквизиты.ПодразделениеДиспетчер);
	
	Возврат Результат;
	
КонецФункции

// Заполнить движения по результату расчета.
// 
// Параметры:
//  Движения - Структура - содержит:
//  	* ПланыПроизводства - РегистрНакопленияНаборЗаписей - 
//  	* ПланыВыпускаИзделий - РегистрНакопленияНаборЗаписей - 
//  	* ПланыПотребленияМатериалов - РегистрНакопленияНаборЗаписей - 
//  	* ПланыЗанятостиТрудовыхРесурсов - РегистрНакопленияНаборЗаписей - 
//  	* ПланыЗанятостиВидовРабочихЦентров - РегистрНакопленияНаборЗаписей - 
//  ЗначенияЗаполнения - Структура - Значения заполнения:
//  	* Активность - Булево -
//  РезультатРасчета - Массив из СтрокаТаблицыЗначений - где:
//  	*ДанныеСпецификации - Структура - где:
//  		** ВыходныеИзделия - ТаблицаЗначений.
//  		** ВозвратныеОтходы - ТаблицаЗначений.
//  		** Трудозатраты - ТаблицаЗначений.
//  Периоды - см. СтруктураРасчетаПериодов
Процедура ЗаполнитьДвиженияПоРезультатуРасчета(Движения, ЗначенияЗаполнения, РезультатРасчета, Периоды)
	
	Для каждого СтрокаРезультата Из РезультатРасчета Цикл // планы использования ресурсов
		
		Данные = СтрокаРезультата.ДанныеСпецификации;
		
		ДобавитьДвиженияВПланыВыпускаИзделий(Движения, ЗначенияЗаполнения, Данные, Данные.ВыходныеИзделия,  "Основной", Периоды);
		ДобавитьДвиженияВПланыВыпускаИзделий(Движения, ЗначенияЗаполнения, Данные, Данные.ВозвратныеОтходы, "Побочный", Периоды);
	
		ДобавитьДвиженияВПланыПотребленияМатериалов(Движения, ЗначенияЗаполнения, Данные, Данные.МатериалыИУслуги, Периоды);
		
//++ НЕ УТКА
		ДобавитьДвиженияВходящихИзделийВПланыПотребленияМатериалов(Движения, ЗначенияЗаполнения, Данные, Данные.ВходящиеИзделия, Периоды);
//-- НЕ УТКА
		
		ДобавитьДвиженияВПланыЗанятостиТрудовыхРесурсов(Движения, ЗначенияЗаполнения, Данные, Данные.Трудозатраты, Периоды);
//++ НЕ УТКА
		ДобавитьДвиженияВПланыЗанятостиВидовРабочихЦентров(Движения, ЗначенияЗаполнения, Данные, Данные.ВидыРабочихЦентров, Периоды);
//-- НЕ УТКА
	
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения в планах производства
// 
// Параметры:
//  Движения - Структура - содержит:
// * ПланыПроизводства - РегистрНакопленияНаборЗаписей -
//  ЗначенияЗаполнения - Структура - Значения заполнения:
// * Активность - Булево -
//  Таблица - Массив из СтрокаТаблицыЗначений - Таблица
//  РеквизитыСпецификаций - Соответствие - Реквизиты спецификаций
//  Периоды - см. СтруктураРасчетаПериодов
Процедура ЗаполнитьДвиженияВПланахПроизводства(Движения, ЗначенияЗаполнения, Таблица, РеквизитыСпецификаций, Периоды)
	
	Для каждого Строка Из Таблица Цикл // план производства
		
		РеквизитыСпецификации = РеквизитыСпецификаций[Строка.Спецификация];
		
		НоваяСтрока = Движения.ПланыПроизводства.Добавить();
		НоваяСтрока.Период = Строка.ДатаПроизводства; // период может быть изменен при консолидации и ручном редактировании
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); // Номенклатура,Характеристика,Спецификация,Назначение,ЭтоПолуфабрикат,ДатаВыпускаПолуфабриката,ДатаЗапускаВыпуска
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения); // Сценарий,Статус,ПланПроизводства
		
		НоваяСтрока.Подразделение = ЗначенияЗаполнения.ПодразделениеДиспетчер;
		НоваяСтрока.ТипПроизводственногоПроцесса = РеквизитыСпецификации.ТипПроизводственногоПроцесса;
		
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.КЗаказу    = Строка.КЗаказу;
		
		Если НоваяСтрока.ДатаЗапускаВыпуска = '00010101' Тогда
			
			Если НоваяСтрока.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
				ИЛИ НоваяСтрока.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
				
				ДобавитьСтрокуКРасчетуПериода(
					Периоды,
					НоваяСтрока.Период,
					-РеквизитыСпецификации.Длительность,
					НоваяСтрока,
					"ДатаЗапускаВыпуска");
				
			ИначеЕсли НоваяСтрока.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
				
				ДобавитьСтрокуКРасчетуПериода(
					Периоды,
					НоваяСтрока.Период,
					РеквизитыСпецификации.Длительность,
					НоваяСтрока,
					"ДатаЗапускаВыпуска");
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.ПовторноеРазузлование = РеквизитыСпецификации.ПовторноеРазузлование;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет движения в планы выпуска изделий
//
Процедура ДобавитьДвиженияВПланыВыпускаИзделий(Движения, ЗначенияЗаполнения, Данные, Таблица, ТипВыпуска, Периоды)
	
	Для каждого Строка Из Таблица Цикл //СтрокаТаблицыЗначений
		
		Если Строка.КодЭтапаПолучателя <> 0 // исключаем полуфабрикаты производимые в процессе и на этапе
			ИЛИ Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве 
			ИЛИ Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
				И Не ЗначениеЗаполнено(Строка.Номенклатура)
			ИЛИ Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ
				И Не ЗначениеЗаполнено(Строка.Характеристика)) Тогда
			Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 в строке №%2 списка ""Выходные изделия"" не удалось выполнить автовыбор номенклатуры по причине: %3.';
							|en = 'Cannot autoselect an item while exploding the product by the %1 BOM in line No. %2 of the ""Finished products"" list due to: %3.'");
			ТекстОшибки = СтрШаблон(Шаблон, СпецификацияПредставление(Данные.Спецификация), Строка.НомерСтроки, Строка.СведенияАвтовыбора);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если Строка.Количество = 0
				И НЕ ПустаяСтрока(Строка.Формула)
				И НЕ ПустаяСтрока(Строка.ФормулаОшибкаРасчета) Тогда
			Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 в строке №%2 списка ""Выходные изделия"" не удалось рассчитать количество по формуле по причине: %3.';
							|en = 'Cannot calculate the quantity using the formula while exploding the item by the %1 BOM in line %2 of the ""Finished products"" list due to: %3.'");
			ТекстОшибки = СтрШаблон(Шаблон, СпецификацияПредставление(Данные.Спецификация), Строка.НомерСтроки, Строка.ФормулаОшибкаРасчета);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		НоваяСтрока = Движения.ПланыВыпускаИзделий.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); // Номенклатура,Характеристика,
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения); // Сценарий,Статус,ПодразделениеДиспетчер,ПланПроизводства
		
		НоваяСтрока.ТипВыпуска = Перечисления.ТипыВыпусковПлановПроизводства[ТипВыпуска];
		
	#Область РасшифровкаПродукции
		НоваяСтрока.ДатаПроизводства        = Данные.ДатаПроизводства;
		НоваяСтрока.НазначениеПродукции     = Данные.НазначениеПродукции;
		НоваяСтрока.СпецификацияПродукции   = Данные.СпецификацияПродукции;
		НоваяСтрока.НоменклатураПродукции   = Данные.НоменклатураПродукции;
		НоваяСтрока.ХарактеристикаПродукции = Данные.ХарактеристикаПродукции;
	#КонецОбласти
	
		НоваяСтрока.Спецификация = Данные.Спецификация;
		
		Если Данные.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			НоваяСтрока.Назначение = Данные.НазначениеПродукции;
		КонецЕсли;
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.ПодразделениеЭтапа;
		
		Если Строка.КоличествоИзделие > 0
			И Данные.ВыпускПроизвольнымиПорциями
			И НЕ Данные.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры Тогда
			НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* Строка.ДанныеУпаковки.Числитель / (Строка.ДанныеУпаковки.Знаменатель * Строка.КоличествоИзделие);
		Иначе
			НоваяСтрока.КоличествоНаЕдиницуПродукции = 0;
		КонецЕсли;
		
		РассчитатьРесурс(НоваяСтрока, Строка, Данные, "Количество", "Количество");
		РассчитатьРесурс(НоваяСтрока, Строка, Данные, "Количество", "КЗаказу");
		
		ДобавитьСтрокуКРасчетуПериода(
			Периоды,
			Данные.ДатаПроизводства,
			Строка.ДнейОтПотребности,
			НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьРесурс(Строка, СтрокаСпецификации, Данные, ИмяПоляКоличество, ИмяРесурса)

	Если ИмяРесурса = "КЗаказу" Тогда
		КоэффициентЧислитель = ?(Данные.РасчетнаяБазаКЗаказу>0, Данные.РасчетнаяБазаКЗаказу, -Данные.РасчетнаяБазаКЗаказу);
		КоэффициентЗнаменатель = Данные.КоличествоКРасчету;
	Иначе
		КоэффициентЧислитель = ?(Данные.РасчетнаяБазаКоличество>0, Данные.РасчетнаяБазаКоличество, -Данные.РасчетнаяБазаКоличество);
		КоэффициентЗнаменатель = Данные.КоличествоКРасчету;
	КонецЕсли;
	
	Если КоэффициентЗнаменатель = 0 Тогда
		Строка[ИмяРесурса] = 0;
	Иначе
		Строка[ИмяРесурса] = СтрокаСпецификации[ИмяПоляКоличество] * (КоэффициентЧислитель/КоэффициентЗнаменатель) * ?(Данные.ВидДвижения = ВидДвиженияНакопления.Приход, 1, -1);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет движения в план потребления материалов
//
Процедура ДобавитьДвиженияВПланыПотребленияМатериалов(Движения, ЗначенияЗаполнения, Данные, Таблица, Периоды)
	
	Для каждого Строка Из Таблица Цикл //СтрокаТаблицыЗначений
		
		Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
				И Не ЗначениеЗаполнено(Строка.Номенклатура)
				И Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве Тогда
			Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 в строке №%2 списка ""Материалы и работы"": %3';
							|en = 'While exploding the product by the %1 bill of materials in line No. %2 of the ""Materials and works"" list: %3'");
			ТекстОшибки = СтрШаблон(Шаблон, СпецификацияПредставление(Данные.Спецификация), Строка.НомерСтроки, Строка.СведенияАвтовыбора);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
			ИЛИ Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации
			ИЛИ Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
				И Не ЗначениеЗаполнено(Строка.Номенклатура)
			ИЛИ (Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ 
				И Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве)
					И Не ЗначениеЗаполнено(Строка.Характеристика) Тогда
			Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 в строке №%2 списка ""Материалы и работы"" не удалось выполнить автовыбор номенклатуры по причине: %3.';
							|en = 'Cannot autoselect products while exploding the product by specification %1 in line %2 of the list ""Materials and works"". Reason: %3.'");
			ТекстОшибки = СтрШаблон(Шаблон, СпецификацияПредставление(Данные.Спецификация), Строка.НомерСтроки, Строка.СведенияАвтовыбора);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если Строка.Количество = 0
				И НЕ ПустаяСтрока(Строка.Формула)
				И НЕ ПустаяСтрока(Строка.ФормулаОшибкаРасчета) Тогда
			Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 в строке №%2 списка ""Материалы и работы"" не удалось рассчитать количество по формуле по причине: %3.';
							|en = 'Cannot calculate the quantity using the formula while exploding the item by the %1 BOM in line %2 of the ""Materials and works"" list due to: %3.'");
			ТекстОшибки = СтрШаблон(Шаблон, СпецификацияПредставление(Данные.Спецификация), Строка.НомерСтроки, Строка.ФормулаОшибкаРасчета);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		НоваяСтрока = Движения.ПланыПотребленияМатериалов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); // Номенклатура,Характеристика,Склад
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения); // Сценарий,Статус,ПодразделениеДиспетчер,ПланПроизводства
		
	#Область РасшифровкаПродукции
		НоваяСтрока.ДатаПроизводства        = Данные.ДатаПроизводства;
		НоваяСтрока.НазначениеПродукции     = Данные.НазначениеПродукции;
		НоваяСтрока.СпецификацияПродукции   = Данные.СпецификацияПродукции;
		НоваяСтрока.НоменклатураПродукции   = Данные.НоменклатураПродукции;
		НоваяСтрока.ХарактеристикаПродукции = Данные.ХарактеристикаПродукции;
	#КонецОбласти
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.ПодразделениеЭтапа;
		
		Если Строка.Обособленно Тогда
			НоваяСтрока.Назначение = Данные.НазначениеПродукции;
		КонецЕсли;
		
		Если Строка.Запланировать Тогда
			НоваяСтрока.ЭтоПолуфабрикат = Истина;
		КонецЕсли;
		
		Если Строка.КоличествоИзделие > 0
			И Данные.ВыпускПроизвольнымиПорциями
			И НЕ Данные.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры Тогда
			НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* Строка.ДанныеУпаковки.Числитель / (Строка.ДанныеУпаковки.Знаменатель * Строка.КоличествоИзделие);
		Иначе
			НоваяСтрока.КоличествоНаЕдиницуПродукции = 0;
		КонецЕсли;
		
		РассчитатьРесурс(НоваяСтрока, Строка, Данные, "Количество", "Количество");
		РассчитатьРесурс(НоваяСтрока, Строка, Данные, "Количество", "КЗаказу");
		
		ДобавитьСтрокуКРасчетуПериода(
			Периоды,
			Данные.ДатаПроизводства,
			Строка.ДнейОтПотребности,
			НоваяСтрока);
			
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

// Добавляет движения входящих изделий в планы потребления материалов
//
Процедура ДобавитьДвиженияВходящихИзделийВПланыПотребленияМатериалов(Движения, ЗначенияЗаполнения, Данные, Таблица, Периоды)
	
	Если Данные.Спецификация <> Данные.СпецификацияПродукции Тогда // исключаем полуфабрикаты производимые в процессе
		Возврат;
	КонецЕсли;

	Для каждого Строка Из Таблица Цикл
		
		НоваяСтрока = Движения.ПланыПотребленияМатериалов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); // Номенклатура, Характеристика, Склад
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения); // Сценарий,Статус,ПодразделениеДиспетчер,ПланПроизводства
		
	#Область РасшифровкаПродукции
		НоваяСтрока.ДатаПроизводства        = Данные.ДатаПроизводства;
		НоваяСтрока.НазначениеПродукции     = Данные.НазначениеПродукции;
		НоваяСтрока.СпецификацияПродукции   = Данные.СпецификацияПродукции;
		НоваяСтрока.НоменклатураПродукции   = Данные.НоменклатураПродукции;
		НоваяСтрока.ХарактеристикаПродукции = Данные.ХарактеристикаПродукции;
	#КонецОбласти
		
		НоваяСтрока.Назначение = Данные.НазначениеПродукции;
		НоваяСтрока.ПодразделениеИсполнитель = Строка.ПодразделениеЭтапа;
		
		Если Строка.КоличествоИзделие > 0
			И Данные.ВыпускПроизвольнымиПорциями
			И НЕ Данные.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры Тогда
			НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* Строка.ДанныеУпаковки.Числитель / (Строка.ДанныеУпаковки.Знаменатель * Строка.КоличествоИзделие);
		Иначе
			НоваяСтрока.КоличествоНаЕдиницуПродукции = 0;
		КонецЕсли;
		
		РассчитатьРесурс(НоваяСтрока, Строка, Данные, "Количество", "Количество");
		РассчитатьРесурс(НоваяСтрока, Строка, Данные, "Количество", "КЗаказу");
		
		ДобавитьСтрокуКРасчетуПериода(
			Периоды,
			Данные.ДатаПроизводства,
			Строка.ДнейОтПотребности,
			НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТКА

Процедура ДобавитьДвиженияВПланыЗанятостиТрудовыхРесурсов(Движения, ЗначенияЗаполнения, Данные, Таблица, Периоды)
	
	Для каждого Строка Из Таблица Цикл
		
		Если Строка.Количество = 0
				И НЕ ПустаяСтрока(Строка.Формула)
				И НЕ ПустаяСтрока(Строка.ФормулаОшибкаРасчета) Тогда
			Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 в строке №%2 списка ""Трудозатраты"" не удалось рассчитать количество по формуле по причине: %3.';
							|en = 'Cannot calculate the quantity using the formula while exploding the product by the %1 BOM in line %2 of the ""Labor costs"" list due to: %3.'");
			ТекстОшибки = СтрШаблон(Шаблон, СпецификацияПредставление(Данные.Спецификация), Строка.НомерСтроки, Строка.ФормулаОшибкаРасчета);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		НоваяСтрока = Движения.ПланыЗанятостиТрудовыхРесурсов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
		
	#Область РасшифровкаПродукции
		НоваяСтрока.ДатаПроизводства        = Данные.ДатаПроизводства;
		НоваяСтрока.НазначениеПродукции     = Данные.НазначениеПродукции;
		НоваяСтрока.СпецификацияПродукции   = Данные.СпецификацияПродукции;
		НоваяСтрока.НоменклатураПродукции   = Данные.НоменклатураПродукции;
		НоваяСтрока.ХарактеристикаПродукции = Данные.ХарактеристикаПродукции;
	#КонецОбласти
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.ПодразделениеЭтапа;
		
		Если Строка.КоличествоИзделие > 0
			И Данные.ВыпускПроизвольнымиПорциями
			И НЕ Данные.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры Тогда
			НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.КоличествоНаЕдиницуПартииВыпуска / Строка.КоличествоИзделие;
		Иначе
			НоваяСтрока.КоличествоНаЕдиницуПродукции = 0;
		КонецЕсли;
		
		РассчитатьРесурс(НоваяСтрока, Строка, Данные, "Количество", "Количество");
		
		ДобавитьСтрокуКРасчетуПериода(
			Периоды,
			Данные.ДатаПроизводства,
			Строка.ДнейОтПотребности,
			НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

// Добавляет движения в планы занятости видов рабочих центров
//
Процедура ДобавитьДвиженияВПланыЗанятостиВидовРабочихЦентров(Движения, ЗначенияЗаполнения, Данные, Таблица, Периоды)
	
	Для каждого Строка Из Таблица Цикл
		
		Если Строка.ВремяРаботы = 0
				И НЕ ПустаяСтрока(Строка.Формула)
				И НЕ ПустаяСтрока(Строка.ФормулаОшибкаРасчета) Тогда
			Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 не удалось рассчитать время работы рабочего центра ""%2"" на этапе ""%3"" по причине: %4.';
							|en = 'Cannot calculate working hours of the ""%2"" work center while exploding the item by the ""%1"" BOM on the ""%3"" stage due to: %4.'");
			ТекстОшибки = СтрШаблон(Шаблон, СпецификацияПредставление(Данные.Спецификация), Строка.ВидРабочегоЦентра, Строка.Этап, Строка.ФормулаОшибкаРасчета);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		НоваяСтрока = Движения.ПланыЗанятостиВидовРабочихЦентров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
		
	#Область РасшифровкаПродукции
		НоваяСтрока.ДатаПроизводства        = Данные.ДатаПроизводства;
		НоваяСтрока.НазначениеПродукции     = Данные.НазначениеПродукции;
		НоваяСтрока.СпецификацияПродукции   = Данные.СпецификацияПродукции;
		НоваяСтрока.НоменклатураПродукции   = Данные.НоменклатураПродукции;
		НоваяСтрока.ХарактеристикаПродукции = Данные.ХарактеристикаПродукции;
	#КонецОбласти
		
		НоваяСтрока.ПодразделениеИсполнитель = Строка.ПодразделениеЭтапа;
		
		Если Строка.КоличествоИзделие > 0
			И Данные.ВыпускПроизвольнымиПорциями
			И НЕ Данные.ВариантНазначения = Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры
			И НЕ Данные.ЕстьНекратныеНормативыВРЦ Тогда
			НоваяСтрока.КоличествоНаЕдиницуПродукции = Строка.ЗанятостьНаЕдиницуПартииВыпуска / Строка.КоличествоИзделие;
		Иначе
			НоваяСтрока.КоличествоНаЕдиницуПродукции = 0;
		КонецЕсли;
		
		РассчитатьРесурс(НоваяСтрока, Строка, Данные, "Занятость", "Занятость");
		
		ДобавитьСтрокуКРасчетуПериода(
			Периоды,
			Данные.ДатаПроизводства,
			Строка.ДнейОтПотребности,
			НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаОперацииРасчетаПланаПроизводства()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Назначение КАК Назначение,
	|	ISNULL(Таблица.Назначение.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ НаправленияДеятельности
	|ИЗ
	|	Документ.ПланПроизводства.Продукция КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &ПланПроизводства
	|	И (Таблица.Количество <> 0
	|			ИЛИ Таблица.ЗаданИнтервалПотребности)
	|	И НЕ Таблица.Отменено
	|	И Таблица.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И (НЕ Таблица.Замещен
	|				И НЕ &Утвержден
	|			ИЛИ НЕ Таблица.ЗамещенКЗаказу
	|				И &Утвержден)
	|	И Таблица.Ссылка.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	
	|	Обороты.Период КАК Период,
	|	
	|	Обороты.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Обороты.Номенклатура КАК Номенклатура,
	|	Обороты.Характеристика КАК Характеристика,
	|	
	|	Обороты.Спецификация КАК Спецификация,
	|	Обороты.Назначение КАК Назначение,
	|
	|	&ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|	НаправленияДеятельности.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	Обороты.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	АвтоНомерЗаписи() КАК ИндексДанных,
	|	ВЫБОР
	|		КОГДА Обороты.ЭтоПолуфабрикат
	|		ТОГДА Обороты.Период
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК ДатаВыпускаПолуфабриката,
	|	МАКСИМУМ(Обороты.ДатаЗапускаВыпуска) КАК ДатаЗапускаВыпуска,
	|	
	|	&НачалоПериода КАК НачалоПроизводства,
	|	
	|	СУММА(Обороты.Требуется) КАК Количество,
	|	СУММА(Обороты.КЗаказу)   КАК КЗаказу,
	|
	|	МАКСИМУМ(Обороты.ЗаданИнтервалПотребностиДокумент) КАК ЗаданИнтервалПотребности,
	|	МАКСИМУМ(Обороты.ИнтервалПотребностиОтДокумент)    КАК ИнтервалПотребностиОт,
	|	МАКСИМУМ(Обороты.ИнтервалПотребностиДоДокумент)    КАК ИнтервалПотребностиДо
	|	
	|ПОМЕСТИТЬ Дельта
	|ИЗ
	|	(ВЫБРАТЬ
	|	
	|		ВЫБОР
	|			КОГДА Таблица.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|					И Таблица.ДатаЗапуска <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Таблица.ДатаЗапуска
	|			КОГДА Таблица.Ссылка.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|																	ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|					И Таблица.ДатаВыпуска <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Таблица.ДатаВыпуска
	|			ИНАЧЕ Таблица.Ссылка.НачалоПериода
	|		КОНЕЦ КАК Период,
	|	
	|		Таблица.Номенклатура КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|	
	|		Таблица.Спецификация КАК Спецификация,
	|		ВЫБОР
	|			КОГДА Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ИНАЧЕ Таблица.Назначение
	|		КОНЕЦ КАК Назначение,
	|	
	|		ЛОЖЬ КАК ЭтоПолуфабрикат,
	|		ВЫБОР
	|			КОГДА Таблица.Ссылка.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|																	ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|					И Таблица.ДатаЗапуска <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Таблица.ДатаЗапуска
	|			ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|		КОНЕЦ КАК ДатаЗапускаВыпуска,
	|	
	|		ВЫБОР
	|			КОГДА Таблица.Замещен
	|				ТОГДА 0
	|			ИНАЧЕ Таблица.Количество
	|		КОНЕЦ КАК Требуется,
	|		ВЫБОР
	|			КОГДА &Утвержден
	|				ТОГДА Таблица.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КЗаказу,
	|	
	|		0 КАК ИсходнаяПотребность,
	|		0 КАК ИсходнаяПотребностьКЗаказу,
	|	
	|		0 КАК Запланировано,
	|		0 КАК ЗапланированоКЗаказу,
	|	
	|		Таблица.ИнтервалПотребностиОт КАК ИнтервалПотребностиОтДокумент,
	|		Таблица.ИнтервалПотребностиДо КАК ИнтервалПотребностиДоДокумент,
	|		Таблица.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребностиДокумент,
	|		0 КАК ИнтервалПотребностиОтДвижения,
	|		0 КАК ИнтервалПотребностиДоДвижения,
	|		ЛОЖЬ КАК ЗаданИнтервалПотребностиДвижения
	|	ИЗ
	|		Документ.ПланПроизводства.Продукция КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &ПланПроизводства
	|		И (Таблица.Количество <> 0
	|			ИЛИ Таблица.ЗаданИнтервалПотребности)
	|		И НЕ Таблица.Отменено
	|		И Таблица.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|		И (НЕ Таблица.Замещен
	|				И НЕ &Утвержден
	|			ИЛИ НЕ Таблица.ЗамещенКЗаказу
	|				И &Утвержден)
	|		И Таблица.Ссылка.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Период,
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|		Таблица.Назначение,
	|		Таблица.ЭтоПолуфабрикат,
	|		ДАТАВРЕМЯ(1,1,1),
	|		Таблица.Количество,
	|		Таблица.КЗаказу,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЛОЖЬ,
	|		0,
	|		0,
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрНакопления.ПланыПотребленияМатериалов КАК Таблица
	|	ГДЕ
	|		Таблица.ПланПроизводства = &ПланПроизводства
	|		И Таблица.РазделительРасчета = &РазделительРасчета
	|		И Таблица.ЭтоПолуфабрикат
	|		И &РассчитыватьПланПроизводстваПолуфабрикатов
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Таблица.ЭтоПолуфабрикат
	|				ТОГДА Таблица.ДатаВыпускаПолуфабриката
	|			ИНАЧЕ Таблица.Период
	|		КОНЕЦ,
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика,
	|		ВЫБОР
	|			КОГДА Таблица.ЭтоПолуфабрикат
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			ИНАЧЕ Таблица.Спецификация
	|		КОНЕЦ,
	|		Таблица.Назначение,
	|		Таблица.ЭтоПолуфабрикат,
	|		ДАТАВРЕМЯ(1,1,1),
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА Таблица.РучнаяКорректировка
	|				ТОГДА Таблица.ИсходнаяПотребность
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Таблица.РучнаяКорректировка
	|				ТОГДА Таблица.ИсходнаяПотребностьКЗаказу
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		Таблица.Количество,
	|		Таблица.КЗаказу,
	|		0,
	|		0,
	|		ЛОЖЬ,
	|		Таблица.ИнтервалПотребностиОт,
	|		Таблица.ИнтервалПотребностиДо,
	|		ВЫБОР
	|			КОГДА Таблица.ЗаданИнтервалПотребности <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ 
	|	ИЗ
	|		РегистрНакопления.ПланыПроизводства КАК Таблица
	|	ГДЕ
	|		Таблица.ПланПроизводства = &ПланПроизводства
	|		И Таблица.РазделительРасчета = &РазделительРасчета) КАК Обороты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ НаправленияДеятельности КАК НаправленияДеятельности
	|	ПО Обороты.Назначение = НаправленияДеятельности.Назначение
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.Период,
	|	Обороты.Спецификация,
	|	Обороты.Назначение,
	|	НаправленияДеятельности.НаправлениеДеятельности,
	|	Обороты.ЭтоПолуфабрикат,
	|	Обороты.Номенклатура,
	|	Обороты.Характеристика
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Обороты.Требуется) <> СУММА(Обороты.Запланировано)
	|			И (СУММА(Обороты.Требуется) <> МАКСИМУМ(Обороты.ИсходнаяПотребность) ИЛИ МАКСИМУМ(Обороты.ИсходнаяПотребность) = 0)
	|		ИЛИ НЕ Обороты.ЭтоПолуфабрикат
	|			И  ( МАКСИМУМ(Обороты.ЗаданИнтервалПотребностиДокумент) <> МАКСИМУМ(Обороты.ЗаданИнтервалПотребностиДвижения)
	|				ИЛИ МАКСИМУМ(Обороты.ИнтервалПотребностиДоДокумент) <> МАКСИМУМ(Обороты.ИнтервалПотребностиДоДвижения)
	|				ИЛИ МАКСИМУМ(Обороты.ИнтервалПотребностиОтДокумент) <> МАКСИМУМ(Обороты.ИнтервалПотребностиОтДвижения))
	|		ИЛИ (СУММА(Обороты.КЗаказу) <> СУММА(Обороты.ЗапланированоКЗаказу))
	|				И (СУММА(Обороты.КЗаказу) <> МАКСИМУМ(Обороты.ИсходнаяПотребностьКЗаказу) ИЛИ МАКСИМУМ(Обороты.ИсходнаяПотребностьКЗаказу) = 0))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	Движения.Номенклатура КАК Номенклатура,
	|	Движения.Характеристика КАК Характеристика,
	|	Движения.Спецификация КАК Спецификация,
	|	Движения.Назначение КАК Назначение,
	|	Движения.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	Движения.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	
	|	Движения.ДатаКорректировки   КАК ДатаКорректировки,
	|	Движения.АвторКорректировки  КАК АвторКорректировки,
	|	Движения.Комментарий         КАК Комментарий,
	|	
	|	ВЫБОР
	|		КОГДА Движения.ИсходнаяПотребность <> 0
	|				И Движения.ИсходнаяПотребность = Дельта.Количество
	|			ТОГДА Движения.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА Движения.ИсходнаяПотребность <> 0
	|				И Движения.ИсходнаяПотребность = Дельта.Количество
	|			ТОГДА Движения.ИсходнаяПотребность
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсходнаяПотребность,
	|	ВЫБОР
	|		КОГДА Движения.ИсходнаяПотребность <> 0
	|				И Движения.ИсходнаяПотребность = Дельта.Количество
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СохранитьКорректировкуКоличество,
	|	
	|	ВЫБОР
	|		КОГДА Движения.ИсходнаяПотребностьКЗаказу <> 0
	|				И Движения.ИсходнаяПотребностьКЗаказу = Дельта.КЗаказу
	|			ТОГДА Движения.КЗаказу
	|		КОГДА Движения.ИсходнаяПотребностьКЗаказу = 0 
	|				И &Утвержден И Движения.ИсходнаяПотребность <> 0 И Движения.ИсходнаяПотребность = Дельта.Количество
	|			ТОГДА Движения.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КЗаказу,
	|	ВЫБОР
	|		КОГДА Движения.ИсходнаяПотребностьКЗаказу <> 0
	|				И Движения.ИсходнаяПотребностьКЗаказу = Дельта.КЗаказу
	|			ТОГДА Движения.ИсходнаяПотребностьКЗаказу
	|		КОГДА Движения.ИсходнаяПотребностьКЗаказу = 0 
	|				И &Утвержден И Движения.ИсходнаяПотребность <> 0 И Движения.ИсходнаяПотребность = Дельта.Количество
	|			ТОГДА Движения.ИсходнаяПотребность
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсходнаяПотребностьКЗаказу,
	|	ВЫБОР
	|		КОГДА Движения.ИсходнаяПотребностьКЗаказу <> 0
	|				И Движения.ИсходнаяПотребностьКЗаказу = Дельта.КЗаказу
	|			ТОГДА ИСТИНА
	|		КОГДА Движения.ИсходнаяПотребностьКЗаказу = 0 
	|				И &Утвержден И Движения.ИсходнаяПотребность <> 0 И Движения.ИсходнаяПотребность = Дельта.Количество
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СохранитьКорректировкуКЗаказу
	|	
	|ПОМЕСТИТЬ РучныеКорректировки
	|ИЗ
	|	Дельта КАК Дельта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПроизводства КАК Движения
	|		ПО &ПланПроизводства   = Движения.ПланПроизводства
	|		 И &РазделительРасчета = Движения.РазделительРасчета
	|			И Дельта.ДатаВыпускаПолуфабриката = Движения.ДатаВыпускаПолуфабриката
	|			И Дельта.Номенклатура             = Движения.Номенклатура
	|			И Дельта.Характеристика           = Движения.Характеристика
	|			И Дельта.Назначение               = Движения.Назначение
	|			И Дельта.ЭтоПолуфабрикат          = Движения.ЭтоПолуфабрикат
	|ГДЕ
	|	НЕ &ЭтоНовыйРасчет
	|	И Движения.РучнаяКорректировка
	|	И (Движения.ИсходнаяПотребность <> 0 И Движения.ИсходнаяПотребность = Дельта.Количество
	|		ИЛИ Движения.ИсходнаяПотребностьКЗаказу <> 0 И Движения.ИсходнаяПотребностьКЗаказу = Дельта.КЗаказу И &Утвержден)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	Дельта.Период КАК Период,
	|	
	|	Дельта.Номенклатура КАК Номенклатура,
	|	Дельта.Характеристика КАК Характеристика,
	|	
	|	ВЫБОР
	|		КОГДА Дельта.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка) И Дельта.ЭтоПолуфабрикат
	|			ТОГДА ЕСТЬNULL(СпецификацииНоменклатуры.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
	|		ИНАЧЕ Дельта.Спецификация
	|	КОНЕЦ КАК Спецификация,
	|	Дельта.Назначение КАК Назначение,
	|	Дельта.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	Дельта.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	Дельта.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	Дельта.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпуска,
	|
	|	НЕ РучныеКорректировки.ЭтоПолуфабрикат ЕСТЬ NULL                  КАК РучнаяКорректировка,
	|	ISNULL(РучныеКорректировки.ДатаКорректировки,   ДАТАВРЕМЯ(1,1,1)) КАК ДатаКорректировки,
	|	ISNULL(РучныеКорректировки.АвторКорректировки,  НЕОПРЕДЕЛЕНО)     КАК АвторКорректировки,
	|	ISNULL(РучныеКорректировки.Комментарий,         """")             КАК Комментарий,
	|
	|	ISNULL(РучныеКорректировки.ИсходнаяПотребность, 0)  КАК ИсходнаяПотребность,
	|	ISNULL(РучныеКорректировки.ИсходнаяПотребностьКЗаказу, 0) КАК ИсходнаяПотребностьКЗаказу,
	|
	|	ВЫБОР
	|		КОГДА ISNULL(РучныеКорректировки.СохранитьКорректировкуКоличество, ЛОЖЬ)
	|			ТОГДА РучныеКорректировки.Количество
	|		ИНАЧЕ Дельта.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ISNULL(РучныеКорректировки.СохранитьКорректировкуКЗаказу, ЛОЖЬ)
	|			ТОГДА РучныеКорректировки.КЗаказу
	|		ИНАЧЕ Дельта.КЗаказу
	|	КОНЕЦ КАК КЗаказу,
	|
	|	Дельта.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности,
	|	Дельта.ИнтервалПотребностиОт    КАК ИнтервалПотребностиОт,
	|	Дельта.ИнтервалПотребностиДо    КАК ИнтервалПотребностиДо
	|	
	|ПОМЕСТИТЬ ИзмененныеИзделия
	|ИЗ
	|	Дельта КАК Дельта
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|		ПО Дельта.ИндексДанных = СпецификацииНоменклатуры.ИндексДанных
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РучныеКорректировки КАК РучныеКорректировки
	|		ПО    Дельта.Номенклатура             = РучныеКорректировки.Номенклатура
	|			И Дельта.Характеристика           = РучныеКорректировки.Характеристика
	|			И Дельта.Назначение               = РучныеКорректировки.Назначение
	|			И Дельта.ДатаВыпускаПолуфабриката = РучныеКорректировки.ДатаВыпускаПолуфабриката
	|
//++ НЕ УТКА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СодержаниеКорректировокПланаПроизводства КАК СодержаниеКорректировокПланаПроизводства
	|		ПО &ПланПроизводства                  = СодержаниеКорректировокПланаПроизводства.ПланПроизводства
	|			И Дельта.Номенклатура             = СодержаниеКорректировокПланаПроизводства.Номенклатура
	|			И Дельта.Характеристика           = СодержаниеКорректировокПланаПроизводства.Характеристика
	|			И Дельта.Назначение               = СодержаниеКорректировокПланаПроизводства.Назначение
	|			И Дельта.ДатаВыпускаПолуфабриката = СодержаниеКорректировокПланаПроизводства.ДатаВыпускаПолуфабриката
	|ГДЕ
	|	(&ЭтоНовыйРасчет ИЛИ НЕ &ЭтоНовыйРасчет И СодержаниеКорректировокПланаПроизводства.ПланПроизводства ЕСТЬ NULL)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	
	|	Таблица.ДатаВыпуска КАК Период,
	|	
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	
	|	Таблица.Спецификация КАК Спецификация,
	|	Таблица.Назначение КАК Назначение,
	|	НаправленияДеятельности.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	ИСТИНА КАК ЭтоПолуфабрикат,
	|	Таблица.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	Таблица.ДатаЗапуска КАК ДатаЗапускаВыпуска,
	|	
	|	ИСТИНА                      КАК РучнаяКорректировка,
	|	Таблица.ДатаКорректировки   КАК ДатаКорректировки,
	|	Таблица.АвторКорректировки  КАК АвторКорректировки,
	|	Таблица.Комментарий         КАК Комментарий,
	|	
	|	Таблица.ИсходнаяПотребность        КАК ИсходнаяПотребность,
	|	Таблица.ИсходнаяПотребностьКЗаказу КАК ИсходнаяПотребностьКЗаказу,
	|	
	|	Таблица.Количество КАК Количество,
	|	Таблица.КЗаказу КАК КЗаказу,
	|	
	|	Таблица.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности,
	|	Таблица.ИнтервалПотребностиОт КАК ИнтервалПотребностиОт,
	|	Таблица.ИнтервалПотребностиДо КАК ИнтервалПотребностиДо
	|	
	|ИЗ
	|	РегистрСведений.СодержаниеКорректировокПланаПроизводства КАК Таблица
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО Таблица.Назначение = НаправленияДеятельности.Назначение
	|
	|ГДЕ
	|	НЕ &ЭтоНовыйРасчет
	|	И Таблица.ПланПроизводства = &ПланПроизводства
//-- НЕ УТКА
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация,
	|	Период,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	Движения.Спецификация КАК Спецификация,
	|	Движения.Период       КАК Период,
	|	Движения.Назначение   КАК Назначение,
	|	
	|	МАКСИМУМ(Движения.Регистратор) КАК Регистратор
	|	
	|ПОМЕСТИТЬ ЗапланированныеСпецификации
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК Движения
	|ГДЕ
	|	(Движения.Спецификация, Движения.Период, Движения.Назначение) В
	|			(ВЫБРАТЬ
	|				Таблица.Спецификация,
	|				Таблица.Период,
	|				Таблица.Назначение
	|			ИЗ
	|				ИзмененныеИзделия КАК Таблица)
	|	И Движения.ПланПроизводства = &ПланПроизводства
	|	И Движения.РазделительРасчета = &РазделительРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.Спецификация,
	|	Движения.Период,
	|	Движения.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация,
	|	Период,
	|	Назначение,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	Движения.Период КАК Период,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.Номенклатура КАК Номенклатура,
	|	Движения.Характеристика КАК Характеристика,
	|	Движения.Спецификация КАК Спецификация,
	|	Движения.Назначение КАК Назначение,
	|	Движения.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	Движения.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	Изменения.НаправлениеДеятельности КАК НаправлениеДеятельности
	|	
	|ПОМЕСТИТЬ ОтменяемыеИзделия
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеИзделия КАК Изменения
	|			ПО Изменения.ДатаВыпускаПолуфабриката = Движения.ДатаВыпускаПолуфабриката
	|			 И Изменения.Номенклатура             = Движения.Номенклатура
	|			 И Изменения.Характеристика           = Движения.Характеристика
	|			 И Изменения.Назначение               = Движения.Назначение
	|			 И Изменения.ЭтоПолуфабрикат          = Движения.ЭтоПолуфабрикат
	|ГДЕ
	|	Движения.ПланПроизводства = &ПланПроизводства
	|	И Движения.РазделительРасчета = &РазделительРасчета
	|	И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ЗапланированныеСпецификации КАК Таблица
	|			ГДЕ
	|				Таблица.Период = Движения.Период
	|				И Таблица.Регистратор = Движения.Регистратор
	|				И Таблица.Спецификация = Изменения.Спецификация
	|				И Таблица.Назначение = Изменения.Назначение)
	|	И Движения.ЭтоПолуфабрикат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПревышенаМаксимальнаяПорцияЗаписи
	|ИЗ
	|	Документ.РегистраторПланаПроизводства КАК Документы
	|ГДЕ
	|	Документы.ПланПроизводства = &ПланПроизводства
	|	И Документы.РазделительРасчета = &РазделительРасчета
	|	И Документы.Проведен
	|	И Документы.ПревышенаМаксимальнаяПорцияЗаписи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|
	|	&ПланПроизводства КАК Распоряжение,
	|	&ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|
	|	ИзмененныеИзделия.Номенклатура КАК Номенклатура,
	|	ИзмененныеИзделия.Характеристика КАК Характеристика,
	|	ИзмененныеИзделия.Спецификация КАК Спецификация,
	|	ИзмененныеИзделия.Назначение КАК Назначение,
	|	ИзмененныеИзделия.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КОкончанию) КАК РазмещениеВыпуска,
	|	ВЫБОР
	|		КОГДА &ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|		ТОГДА ИзмененныеИзделия.ДатаЗапускаВыпуска
	|		ИНАЧЕ ИзмененныеИзделия.Период
	|	КОНЕЦ КАК ДатаЗапуска,
	|	ВЫБОР
	|		КОГДА &ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|		ТОГДА ИзмененныеИзделия.Период
	|		ИНАЧЕ ИзмененныеИзделия.ДатаЗапускаВыпуска
	|	КОНЕЦ КАК ДатаВыпуска,
	|
	|	ИзмененныеИзделия.Период         КАК ДатаПроизводства,
	|	ИзмененныеИзделия.Спецификация   КАК СпецификацияПродукции,
	|	ИзмененныеИзделия.Назначение     КАК НазначениеПродукции,
	|	ИзмененныеИзделия.Номенклатура   КАК НоменклатураПродукции,
	|	ИзмененныеИзделия.Характеристика КАК ХарактеристикаПродукции,
	|
	|	ИзмененныеИзделия.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	ИзмененныеИзделия.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ИзмененныеИзделия.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпуска,
	|
	|	ИзмененныеИзделия.РучнаяКорректировка  КАК РучнаяКорректировка,
	|	ИзмененныеИзделия.ДатаКорректировки    КАК ДатаКорректировки,
	|	ИзмененныеИзделия.АвторКорректировки   КАК АвторКорректировки,
	|	ИзмененныеИзделия.Комментарий          КАК Комментарий,
	|
	|	ИзмененныеИзделия.ИсходнаяПотребность        КАК ИсходнаяПотребность,
	|	ИзмененныеИзделия.ИсходнаяПотребностьКЗаказу КАК ИсходнаяПотребностьКЗаказу,
	|
	|	ВЫБОР
	|		КОГДА &Утвержден
	|			ТОГДА ВЫБОР
	|					КОГДА ИзмененныеИзделия.КЗаказу > 0
	|						ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИзмененныеИзделия.Количество > 0
	|					ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА &Утвержден
	|			ТОГДА ВЫБОР
	|					КОГДА ИзмененныеИзделия.КЗаказу > 0
	|						ТОГДА ИзмененныеИзделия.КЗаказу
	|					ИНАЧЕ -ИзмененныеИзделия.КЗаказу
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИзмененныеИзделия.Количество > 0
	|					ТОГДА ИзмененныеИзделия.Количество
	|				ИНАЧЕ -ИзмененныеИзделия.Количество
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоКРасчету,
	|
	|	ИзмененныеИзделия.Количество КАК Количество,
	|	ИзмененныеИзделия.КЗаказу    КАК КЗаказу,
	|
	|	ИзмененныеИзделия.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности,
	|	ИзмененныеИзделия.ИнтервалПотребностиОт    КАК ИнтервалПотребностиОт,
	|	ИзмененныеИзделия.ИнтервалПотребностиДо    КАК ИнтервалПотребностиДо
	|	
	|ПОМЕСТИТЬ Расчет
	|ИЗ
	|	ИзмененныеИзделия КАК ИзмененныеИзделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированныеСпецификации КАК ЗапланированныеСпецификации
	|			ПО ИзмененныеИзделия.Спецификация = ЗапланированныеСпецификации.Спецификация
	|			 И ИзмененныеИзделия.Период       = ЗапланированныеСпецификации.Период
	|			 И ИзмененныеИзделия.Назначение   = ЗапланированныеСпецификации.Назначение
	|ГДЕ
	|	ЗапланированныеСпецификации.Спецификация ЕСТЬ NULL
	|	И (ИзмененныеИзделия.Количество <> 0 ИЛИ ИзмененныеИзделия.КЗаказу <> 0 ИЛИ ИзмененныеИзделия.ЗаданИнтервалПотребности)
	|" + "
	|УПОРЯДОЧИТЬ ПО
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + "
	|ВЫБРАТЬ
	|	
	|	&ПланПроизводства КАК ПланПроизводства,
	|	
	|	ЗапланированныеСпецификации.Период КАК Период,
	|	ВЫБОР КОГДА
	|			ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ 
	|					ПревышенаМаксимальнаяПорцияЗаписи КАК ПревышенаМаксимальнаяПорцияЗаписи
	|				ГДЕ 
	|					ПревышенаМаксимальнаяПорцияЗаписи.Ссылка = ЗапланированныеСпецификации.Регистратор)
	|			ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|			КОНЕЦ
	|	КАК ПревышенаМаксимальнаяПорцияЗаписи,
	|	ЗапланированныеСпецификации.Регистратор КАК Регистратор,
	|	
	|	ИзмененныеИзделия.Номенклатура КАК Номенклатура,
	|	ИзмененныеИзделия.Характеристика КАК Характеристика,
	|	ИзмененныеИзделия.Спецификация КАК Спецификация,
	|	ИзмененныеИзделия.Назначение КАК Назначение,
	|	ИзмененныеИзделия.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	ИзмененныеИзделия.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	ИзмененныеИзделия.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ИзмененныеИзделия.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпуска,
	|	
	|	ИзмененныеИзделия.РучнаяКорректировка  КАК РучнаяКорректировка,
	|	ИзмененныеИзделия.ДатаКорректировки    КАК ДатаКорректировки,
	|	ИзмененныеИзделия.АвторКорректировки   КАК АвторКорректировки,
	|	ИзмененныеИзделия.Комментарий          КАК Комментарий,
	|	
	|	ИзмененныеИзделия.ИсходнаяПотребность        КАК ИсходнаяПотребность,
	|	ИзмененныеИзделия.ИсходнаяПотребностьКЗаказу КАК ИсходнаяПотребностьКЗаказу,
	|	
	|	ИзмененныеИзделия.Количество КАК Количество,
	|	ИзмененныеИзделия.КЗаказу    КАК КЗаказу,
	|
	|	ИзмененныеИзделия.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности,
	|	ИзмененныеИзделия.ИнтервалПотребностиОт КАК ИнтервалПотребностиОт,
	|	ИзмененныеИзделия.ИнтервалПотребностиДо КАК ИнтервалПотребностиДо
	|	
	|ПОМЕСТИТЬ Корректировка
	|ИЗ
	|	ЗапланированныеСпецификации КАК ЗапланированныеСпецификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеИзделия КАК ИзмененныеИзделия
	|		ПО ЗапланированныеСпецификации.Спецификация  = ИзмененныеИзделия.Спецификация
	|			И ЗапланированныеСпецификации.Период     = ИзмененныеИзделия.Период
	|			И ЗапланированныеСпецификации.Назначение = ИзмененныеИзделия.Назначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	
	|	&ПланПроизводства,
	|	Движения.Период,
	|	ВЫБОР КОГДА
	|			ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА 
	|				ИЗ 
	|					ПревышенаМаксимальнаяПорцияЗаписи КАК ПревышенаМаксимальнаяПорцияЗаписи
	|				ГДЕ 
	|					ПревышенаМаксимальнаяПорцияЗаписи.Ссылка = Движения.Регистратор)
	|			ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|			КОНЕЦ
	|	КАК ПревышенаМаксимальнаяПорцияЗаписи,
	|	Движения.Регистратор,
	|	Движения.Номенклатура,
	|	Движения.Характеристика,
	|	Движения.Спецификация,
	|	Движения.Назначение,
	|	Движения.НаправлениеДеятельности,
	|	Движения.ЭтоПолуфабрикат,
	|	Движения.ДатаВыпускаПолуфабриката,
	|	ДАТАВРЕМЯ(1,1,1),
	|	ЛОЖЬ,
	|	ДАТАВРЕМЯ(1,1,1),
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	0,
	|	0,
	|	0,
	|	0,
	|
	|	ЛОЖЬ КАК ЗаданИнтервалПотребности,
	|	0 КАК ИнтервалПотребностиОт,
	|	0 КАК ИнтервалПотребностиДо
	|ИЗ
	|	ОтменяемыеИзделия КАК Движения
	|" + "
	|УПОРЯДОЧИТЬ ПО
	|	ПревышенаМаксимальнаяПорцияЗаписи,Регистратор
	|ИТОГИ
	|	МАКСИМУМ(ПревышенаМаксимальнаяПорцияЗаписи)
	|ПО
	|	Регистратор
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ Расчет", "// ПОМЕСТИТЬ Расчет");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ Корректировка", "// ПОМЕСТИТЬ Корректировка");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОперацияПроверкаИзменениеРеквизитов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Регистратор,
	|	Таблица.ПревышенаМаксимальнаяПорцияЗаписи
	|ИЗ
	|	Документ.РегистраторПланаПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.Проведен
	|	И Таблица.ПланПроизводства = &ПланПроизводства
	|	И Таблица.РазделительРасчета = &РазделительРасчета
	|	И ( НЕ Таблица.Статус = &Статус )
	|УПОРЯДОЧИТЬ ПО
	|	ПревышенаМаксимальнаяПорцияЗаписи,Регистратор
	|ИТОГИ
	|	МАКСИМУМ(ПревышенаМаксимальнаяПорцияЗаписи)
	|ПО
	|	Регистратор";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОперацияОтменаРасчетаПланаПроизводства()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Регистратор,
	|	Таблица.ПревышенаМаксимальнаяПорцияЗаписи
	|ИЗ
	|	Документ.РегистраторПланаПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.Проведен
	|	И Таблица.ПланПроизводства = &ПланПроизводства
	|	И Таблица.РазделительРасчета < &РазделительРасчета
	|УПОРЯДОЧИТЬ ПО
	|	ПревышенаМаксимальнаяПорцияЗаписи,Регистратор";

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбщиеНастройки

Функция ОбщиеНастройки(ПроверитьРежимЭксплуатации = Ложь) Экспорт
	
	ОбщиеНастройки = СтандартныеНастройкиРасчетаПланаПроизводства();
	
	УстановитьПривилегированныйРежим(Истина);
	Хранилище = Константы.ПараметрыРасчетаПланаПроизводства.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		
		ЗаполнитьЗначенияСвойств(ОбщиеНастройки, Хранилище.Получить(), СоставПараметров());
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось получить параметры расчета плана производства, значения будут приведены к настройкам по умолчанию';
								|en = 'Parameters of production plan calculation could not be retrieved, values will be reduced to default settings'");
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Константы.ПараметрыРасчетаПланаПроизводства,
			,
			ТекстСообщения);
		
	КонецПопытки;
	
	Если ПроверитьРежимЭксплуатации И ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ОбщиеНастройки.РаспараллеливатьРасчет = Ложь;
		ОбщиеНастройки.КоличествоПотоков      = 1;
		
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ОбщиеНастройки);
	
КонецФункции

Функция СоставПараметров()
	
	СоставПараметров = "
		|РаспараллеливатьРасчет,
		|КоличествоПотоков,
		|
		|ПорцияЧтенияОт,
		|ПорцияЧтенияДо,
		|
		|ПорцияЗаписи,
		|КоличествоСтрокВНабореЗаписей,
		|
		|МаксГлубинаРасчета,
		|ИскатьЦиклыПосле,
		|
		|РазрешитьПовтИспРассчитанныхДанных
		|
		|";
	Возврат СоставПараметров;
	
КонецФункции

Функция СтандартныеНастройкиРасчетаПланаПроизводства() Экспорт
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("РаспараллеливатьРасчет", Ложь);
	ПараметрыРасчета.Вставить("КоличествоПотоков", 8);
	
	ПараметрыРасчета.Вставить("ПорцияЧтенияОт", 25); // минимальная порция чтения (в изделиях)
	ПараметрыРасчета.Вставить("ПорцияЧтенияДо", 1000); // максимальная порция чтения (в изделиях)
	
	ПараметрыРасчета.Вставить("ПорцияЗаписи", 250); // максимальная порция записи (в изделиях)
	ПараметрыРасчета.Вставить("КоличествоСтрокВНабореЗаписей", 2500); // максимальное количество строк, которое может быть помещено в набор записей регистра (в строках)
	
	ПараметрыРасчета.Вставить("МаксГлубинаРасчета", 125);
	ПараметрыРасчета.Вставить("ИскатьЦиклыПосле", 25); // через сколько итераций расчета выполнять поиск циклов в данных
	
	ПараметрыРасчета.Вставить("РазрешитьПовтИспРассчитанныхДанных", Истина);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура ЗаписатьНастройкиРасчетаПланаПроизводства(ЗначенияПараметров) Экспорт
	
	ОбщиеНастройки = Новый Структура(СоставПараметров());
	
	ЗаполнитьЗначенияСвойств(ОбщиеНастройки, ОбщиеНастройки());
	ЗаполнитьЗначенияСвойств(ОбщиеНастройки, ЗначенияПараметров);
	
	Константы.ПараметрыРасчетаПланаПроизводства.Установить(Новый ХранилищеЗначения(ОбщиеНастройки));
	
КонецПроцедуры

Процедура УстановитьСтандартныеНастройкиРасчетаПланаПроизводства() Экспорт
	
	ЗначенияПараметров = СтандартныеНастройкиРасчетаПланаПроизводства();
	ЗаписатьНастройкиРасчетаПланаПроизводства(ЗначенияПараметров);
	
КонецПроцедуры

Функция МаксимальноеКоличествоСтрокВНабореЗаписей()
	
	Возврат 100000;
	
КонецФункции

#КонецОбласти

#Область Константы

Функция РежимНовыйРасчет() Экспорт
	
	Возврат "НОВЫЙРАСЧЕТ";
	
КонецФункции

Функция РежимПересчет() Экспорт
	
	Возврат "ПЕРЕСЧЕТ";
	
КонецФункции

#КонецОбласти

#Область ПроверкаДанных

Процедура ПроверитьДанныеПередРасчетом(Данные, ПараметрыРасчета)
	
	Если ПараметрыРасчета.ИскатьЦиклыПосле < ПараметрыРасчета["ПротоколРасчета"].КоличествоУровней Тогда
		
		СвязиСпецификаций = ПараметрыРасчета["ПротоколРасчета"].СвязиСпецификаций;
		
		Отказ = Ложь;
		ОписаниеЦикла = "";
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Спецификация КАК Спецификация,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.ПланПроизводства КАК ПланПроизводства
		|ПОМЕСТИТЬ ИзмененныеСтроки
		|ИЗ
		|	&ИзмененныеСтроки КАК Таблица
		|ГДЕ
		|	Таблица.ЭтоПолуфабрикат
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаВыпускаПолуфабриката,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	ПланПроизводства
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзмененныеСтроки.Спецификация КАК Спецификация,
		|	ПланыПотребленияМатериалов.СпецификацияПродукции КАК СпецификацияРодитель
		|ИЗ
		|	ИзмененныеСтроки КАК ИзмененныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
		|		ПО ИзмененныеСтроки.ДатаВыпускаПолуфабриката = ПланыПотребленияМатериалов.Период
		|			И ИзмененныеСтроки.Номенклатура          = ПланыПотребленияМатериалов.Номенклатура
		|			И ИзмененныеСтроки.Характеристика        = ПланыПотребленияМатериалов.Характеристика
		|			И ИзмененныеСтроки.Назначение            = ПланыПотребленияМатериалов.Назначение
		|			И ИзмененныеСтроки.ПланПроизводства      = ПланыПотребленияМатериалов.ПланПроизводства
		|");
		Запрос.УстановитьПараметр("ИзмененныеСтроки", Данные);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НайтиЦиклыВСвязяхСпецификаций(
				СвязиСпецификаций, Выборка.Спецификация, Выборка.СпецификацияРодитель, ОписаниеЦикла, Отказ);
			
			Если Отказ Тогда
				
				ТекстШаблона = НСтр("ru = 'В процессе расчета плана производства произошло зацикливание спецификаций: %1. Выполнение прервано.';
									|en = 'Specifications:%1 were looped during calculation of the production plan. Performance is broken.'");
				ТекстОшибки = СтрШаблон(ТекстШаблона, ОписаниеЦикла + "\" + СпецификацияПредставление(Выборка.Спецификация));
				ВызватьИсключение ТекстОшибки;
				
			Иначе
				
				Связь = СвязиСпецификаций.Получить(Выборка.Спецификация);
				Если Связь = Неопределено Тогда
					СвязиСпецификаций.Вставить(
						Выборка.Спецификация,
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.СпецификацияРодитель));
				Иначе
					Если Связь.Найти(Выборка.СпецификацияРодитель) = Неопределено Тогда
						Связь.Добавить(Выборка.СпецификацияРодитель);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СвязиСпецификаций - Соответствие из КлючИЗначение -
//  Спецификация - СправочникСсылка.РесурсныеСпецификации -
//  СпецификацияРодитель - СправочникСсылка.РесурсныеСпецификации -
//  ОписаниеЦикла - Строка -
//  Отказ - Булево -
Процедура НайтиЦиклыВСвязяхСпецификаций(СвязиСпецификаций, Спецификация, СпецификацияРодитель, ОписаниеЦикла, Отказ)
	
	Если Спецификация = СпецификацияРодитель Тогда
		Отказ = Истина;
	Иначе
		
		Связь = СвязиСпецификаций.Получить(СпецификацияРодитель);
		
		Если Связь = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого Предшественник Из Связь Цикл
			
			Если Предшественник = Спецификация Тогда
				
				Отказ = Истина;
				ОписаниеЦикла = "" + СпецификацияПредставление(Спецификация);
			Иначе
				
				НайтиЦиклыВСвязяхСпецификаций(
					СвязиСпецификаций, Спецификация, Предшественник, ОписаниеЦикла, Отказ);
				
			КонецЕсли;
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОписаниеЦикла = ОписаниеЦикла + "\" + СпецификацияПредставление(СпецификацияРодитель);
	КонецЕсли;
	
КонецПроцедуры

Функция СпецификацияПредставление(Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РесурсныеСпецификации.Код КАК Код,
	|	РесурсныеСпецификации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|ГДЕ
	|	РесурсныеСпецификации.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = СтрШаблон(НСтр("ru = '""%1 %2""';
									|en = '""%1 %2""'"), Ссылка.Код, Ссылка.Наименование);
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ПараметрыРасчета)
	
	Запрос.УстановитьПараметр("ЭтоНовыйРасчет", (ПараметрыРасчета.РежимРасчета = РежимНовыйРасчет()));
	
	Запрос.УстановитьПараметр("ПланПроизводства", ПараметрыРасчета.ПланПроизводства);
	Запрос.УстановитьПараметр("РазделительРасчета", ПараметрыРасчета.РазделительРасчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПланПроизводства.ВидПлана.ПланироватьПолуфабрикатыАвтоматически, ЛОЖЬ)
	|				И ПланПроизводства.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РассчитыватьПланПроизводстваПолуфабрикатов,
	|
	|	ПланПроизводства.НачалоПериода КАК НачалоПериода,
	|	ПланПроизводства.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|
	|	ВЫБОР
	|		КОГДА ПланПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Утвержден
	|
	|ИЗ
	|	Документ.ПланПроизводства КАК ПланПроизводства
	|ГДЕ
	|	ПланПроизводства.Ссылка = &ПланПроизводства";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("ИспользоватьБюджетирование", ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование"));
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ПараметрыРасчета.Реквизиты Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьТаблицыПодбораСпецификаций(Запрос, ТекстыЗапросов)
	
	ПараметрыЗапросаСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийИзделий();
	ПараметрыЗапросаСпецификаций.ИмяВходнойТаблицы            = "Дельта";
	ПараметрыЗапросаСпецификаций.ИмяВыходнойТаблицы           = "СпецификацииНоменклатуры";
	ПараметрыЗапросаСпецификаций.ТолькоПриоритетные           = Истина;
	ПараметрыЗапросаСпецификаций.УничтожитьВременныеТаблицы   = Ложь;
	ПараметрыЗапросаСпецификаций.РазделительИтоговогоПакета   = Ложь;
	ПараметрыЗапросаСпецификаций.УсловияОтбораВходящихДанных.Добавить("СписокНоменклатуры.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)");
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	
	Запрос.Текст = УправлениеДаннымиОбИзделиях.ТекстЗапросаСпецификацийИзделий(
		ПараметрыЗапросаСпецификаций,
		ПараметрыВыбораСпецификаций);
		
	УправлениеДаннымиОбИзделиях.УстановитьПараметрыЗапросаСпецификацийИзделий(
		Запрос,
		ПараметрыВыбораСпецификаций);
		
	СтруктураЗапроса = РазложитьПакетЗапросовВСтруктуруТекстовЗапросов(Запрос.Текст);
	Для каждого КлючИЗначение Из СтруктураЗапроса Цикл
		ТекстыЗапросов.Добавить(КлючИЗначение.Значение, "");
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыСпецификаций(Источник, ПараметрыРасчета)
	
	Результат = Новый Соответствие;
	
	Если ТипЗнч(Источник) = Тип("ТаблицаЗначений") Тогда
		Спецификации = Источник.ВыгрузитьКолонку("Спецификация");
	Иначе
		Спецификации = Источник;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РесурсныеСпецификации.Ссылка КАК Ссылка,
	|	РесурсныеСпецификации.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &СпособРасчетаМатериалов = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаМатериалов.МинимальноеПотребление)
	|				ТОГДА ДлительностьПроизводства.ПлановаяДлительность
	|			ИНАЧЕ ДлительностьПроизводства.МаксимальнаяДлительность
	|		КОНЕЦ, 0) КАК Длительность,
	|	НЕ ЕСТЬNULL(ДлительностьПроизводства.ПовтИсп, ЛОЖЬ) КАК ПовторноеРазузлование
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьПроизводства КАК ДлительностьПроизводства
	|		ПО РесурсныеСпецификации.Ссылка = ДлительностьПроизводства.Спецификация
	|ГДЕ
	|	РесурсныеСпецификации.Ссылка В(&Спецификации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|	&ТипПроизводственногоПроцесса,
	|	0,
	|	ИСТИНА");
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса", ПараметрыРасчета.Реквизиты.ТипПроизводственногоПроцесса);
	Запрос.УстановитьПараметр("СпособРасчетаМатериалов", ПараметрыРасчета.ПараметрыВыборкиДанных.СпособРасчетаМатериалов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Реквизиты = Новый Структура("ТипПроизводственногоПроцесса,Длительность,ПовторноеРазузлование");
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		Результат.Вставить(Выборка.Ссылка, Реквизиты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВырезатьПодсписок(Список, ЛеваяГраница, Длина = 1)
	
	Подсписок = Новый Массив;
	ПраваяГраница = Мин(ЛеваяГраница + Длина - 1, Список.ВГраница());
	
	Если ПраваяГраница >= ЛеваяГраница Тогда
		
		Для Индекс = -ПраваяГраница По -ЛеваяГраница Цикл
			
			Подсписок.Добавить(Список[-Индекс]);
			Список.Удалить(-Индекс);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Подсписок;
	
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Расчет плана производства';
				|en = 'Calculation of the production plan'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Процедура ДополнитьСоответствияРегистраторовОтчетаОДвижениях(Документ, СоответствиеРегистров) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПланПроизводства") Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.ПланыВыпускаИзделий              , "ПланПроизводства");
//++ НЕ УТКА
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.ПланыЗанятостиВидовРабочихЦентров, "ПланПроизводства");
//-- НЕ УТКА
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов   , "ПланПроизводства");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.ПланыПотребленияМатериалов       , "ПланПроизводства");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.ПланыПроизводства                , "ПланПроизводства");
	КонецЕсли;
	
КонецПроцедуры

Функция РазложитьПакетЗапросовВСтруктуруТекстовЗапросов(ТекстЗапроса)
	
	СтруктураЗапросов = Новый Структура();
	
	НомерЗапросаВыборкиДанных = 1;
	ДлинаСлова = СтрДлина("ПОМЕСТИТЬ");
	Пакеты = СтрРазделить(ТекстЗапроса, ";", Ложь);
	Для каждого Пакет Из Пакеты Цикл
		
		ИмяТаблицы = "";
		Курсор = 1;
		Позиция = СтрНайти(Пакет, "ПОМЕСТИТЬ", НаправлениеПоиска.СНачала, Курсор);
		Если Позиция > 0 Тогда
			Для Курсор = Позиция + ДлинаСлова + 1 По СтрДлина(Пакет) - 1 Цикл
				КодСимвола = КодСимвола(Пакет, Курсор);
				Если (КодСимвола >= 48 И КодСимвола <= 57) // цифры
					Или (КодСимвола >= 65 И КодСимвола <= 90) // латиница большие
					Или (КодСимвола >= 97 И КодСимвола <= 122) // латиница маленькие
					Или (КодСимвола >= 1040 И КодСимвола <= 1103) // кириллица
					Или КодСимвола = 95 Тогда // символ "_"
					Продолжить;
				КонецЕсли;
				ИмяТаблицы = Сред(Пакет, Позиция + ДлинаСлова + 1, Курсор - Позиция - (ДлинаСлова + 1));
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			ИмяТаблицы = Формат(НомерЗапросаВыборкиДанных, "ЧГ=; ЧФ=ЗапросЧ");
			НомерЗапросаВыборкиДанных = НомерЗапросаВыборкиДанных + 1;
		КонецЕсли;
		
		СтруктураЗапросов.Вставить(ИмяТаблицы, Пакет);
		
	КонецЦикла;
	
	Возврат СтруктураЗапросов;
	
КонецФункции

Функция ЕстьРазличияВКолонках(Строка1, Строка2, Колонки)
	
	ЕстьРазличия = Ложь;
	
	Для каждого Колонка Из Колонки Цикл
		
		Если Строка1[Колонка] <> Строка2[Колонка] Тогда
			ЕстьРазличия = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьРазличия
	
КонецФункции

#КонецОбласти

#КонецОбласти
