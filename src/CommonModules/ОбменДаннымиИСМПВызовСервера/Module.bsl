#Область СлужебныеПроцедурыИФункции

// Подготавливает сообщения к передаче в сервис ИСМП.
//
// Параметры:
//  ВходящиеДанные - Массив Из см. ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыОбработкиДокументов
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
// см. ОбменДаннымиИСМП.РезультатВыполненияОбменаДанными
Функция ПодготовитьКПередаче(ВходящиеДанные, УникальныйИдентификатор = Неопределено) Экспорт
	
	Организации = Неопределено;
	
	ПараметрыОбмена = ОбменДаннымиИСМП.ПараметрыОбмена(Организации, УникальныйИдентификатор);
	
	Если УникальныйИдентификатор <> Неопределено И Не ОбщегоНазначенияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП';
																|en = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ВходящиеДанные",    ВходящиеДанные);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ОбменДаннымиИСМП.ПараметрыСеансаИС());
		
		Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
			МодульИнтеграцияИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСПереопределяемый");
			МодульИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ОбменДаннымиИСМП.ПодготовитьКПередачеДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ОбменДаннымиИСМП.ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбмен(Организации = Неопределено, УникальныйИдентификатор = Неопределено, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена = ОбменДаннымиИСМП.ПараметрыОбмена(Организации, УникальныйИдентификатор);
	
	ОбменДаннымиИСМП.ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент);
	
	Если УникальныйИдентификатор <> Неопределено И Не ОбщегоНазначенияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП';
																|en = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ОбменДаннымиИСМП.ПараметрыСеансаИС());
		
		Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
			МодульИнтеграцияИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСПереопределяемый");
			МодульИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ОбменДаннымиИСМП.ВыполнитьОбменДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ОбменДаннымиИСМП.ВыполнитьОбменУниверсально(ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбмена(ПодписанныеДанныеПоОрганизациям, АдресВоВременномХранилище) Экспорт
	
	ПараметрыОбмена = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	// Установка параметров сеанса выполняется НЕ в фоновом задании.
	ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено;
	ПодписанныеСообщенияПоОрганизациям     = Неопределено;
	Если ПодписанныеДанныеПоОрганизациям <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПодписанныеДанныеПоОрганизациям Цикл
			
			Организация = КлючИЗначение.Ключ;
			Сообщения   = КлючИЗначение.Значение;
			
			ЗапроситьУстановитьКлючСессии = Новый Массив;
			ПодписанныеСообщения          = Новый Массив;
			
			Для Каждого Сообщение Из Сообщения Цикл
				Если Сообщение.Свойство("ПараметрыАвторизации") Тогда
					ЗапроситьУстановитьКлючСессии.Добавить(Сообщение);
				Иначе
					ПодписанныеСообщения.Добавить(Сообщение);
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сообщение, "СвойстваПодписи")
					И ЭтоАдресВременногоХранилища(Сообщение.СвойстваПодписи) Тогда
					Сообщение.СвойстваПодписи = ПолучитьИзВременногоХранилища(Сообщение.СвойстваПодписи);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗапроситьУстановитьКлючСессии.Количество() > 0 Тогда
				Если ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено Тогда
					ТребуетсяЗапроситьУстановитьКлючСессии = Новый Соответствие;
				КонецЕсли;
				ТребуетсяЗапроситьУстановитьКлючСессии.Вставить(Организация, ЗапроситьУстановитьКлючСессии);
			КонецЕсли;
			
			Если ПодписанныеСообщения.Количество() > 0 Тогда
				Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
				КонецЕсли;
				ПодписанныеСообщенияПоОрганизациям.Вставить(Организация, ПодписанныеСообщения);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ОбменДаннымиИСМП.ЗапроситьУстановитьКлючСессии(
		ТребуетсяЗапроситьУстановитьКлючСессии,
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	// В процессе установки ключа сессии могли произойти ошибки.
	Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
			ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
	
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено
		И Не ОбщегоНазначенияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыОбмена.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП';
																|en = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПодписанныеСообщенияПоОрганизациям", ПодписанныеСообщенияПоОрганизациям);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",                    ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС",                  ОбменДаннымиИСМП.ПараметрыСеансаИС());
		
		Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
			МодульИнтеграцияИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСПереопределяемый");
			МодульИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ОбменДаннымиИСМП.ПродолжитьВыполнениеОбменаДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ОбменДаннымиИСМП.ПродолжитьВыполнениеОбменаУниверсально(
			ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ИзвлечьЛогЗапросовИзРезультатаОбмена(РезультатОбмена) Экспорт
	
	ДанныеЛогаЗапросов = ЛогированиеЗапросовИС.ДанныеЛогаЗапросовПоАдресуВременногоХранилища(РезультатОбмена.АдресДанныхЛогаЗапроса);
	
	ДанныеДляЗаписи = Новый Структура();
	ДанныеДляЗаписи.Вставить("ДанныеЛогаЗапросов", ДанныеЛогаЗапросов);
	
	ЛогированиеЗапросовИС.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(
		ДанныеДляЗаписи,
		ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов());
	
КонецПроцедуры

// Удаляет неотправленную операцию из очереди передачи данных в ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
// Возвращаемое значение:
//  - Массив из см. ОбменДаннымиИСМП.СтруктураИзменения
//  - Неопределено - если в очереди нет сообщений
//
Функция ОтменитьПередачу(ДокументСсылка) Экспорт
	
	ОчередьСообщений = РегистрыСведений.ОчередьСообщенийИСМП.ОчередьСообщенийПоДокументу(ДокументСсылка);
	
	Если ОчередьСообщений.Количество() = 0 Тогда
		
		ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		Возврат ЗаполнитьИзменения(ДокументСсылка);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЭлементОчереди Из ОчередьСообщений Цикл
			НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		НовыйСтатус = ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЭлементОчереди.Сообщение);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ЭлементОчереди, ТекстОшибки, НовыйСтатус);
	
КонецФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
// Возвращаемое значение:
//  Массив из см. ОбменДаннымиИСМП.СтруктураИзменения
//
Функция ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ИСМППрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "Передано");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	Попытка
		НовыйСтатус = ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ДанныеПоследнегоСообщения.Сообщение);
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ДанныеПоследнегоСообщения, ТекстОшибки, НовыйСтатус);
	
КонецФункции

// Восстанавливает статус документа по данным протокола обмена.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется восстановить статус.
//  СообщениеПрерывания - Строка, СправочникСсылка.ИСМППрисоединенныеФайлы - Сообщение на котором необходимо закончить процесс расчета статусов.
// Возвращаемое значение:
// 	ПеречислениеСсылка.СтатусыОбработкиВозвратаВОборотИСМП, ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП, ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП, ПеречислениеСсылка.СтатусыОбработкиПеремаркировкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиПриемкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП, ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Рассчитанный статус.
Функция ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, СообщениеПрерывания = Неопределено) Экспорт
	
	НаборПоДокументу = ОбменДаннымиИСМП.РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка,, СообщениеПрерывания);
	
	Возврат НаборПоДокументу[0].Статус;
	
КонецФункции

// Заполняет структуру изменений по документу.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//  ЭлементОчереди - Неопределено,
//                   СтрокаТаблицыЗначений с колонками:
//                     Сообщение - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор сообщения.
//                     Операция - ПеречислениеСсылка.ВидыОперацийИСМП - операция.
//                     Организация - ОпределяемыйТип.Организация - организация.
//  ТекстОшибки - Строка.
//  НовыйСтатус - Неопределено.
// 
// Возвращаемое значение:
//  Массив из см. ОбменДаннымиИСМП.СтруктураИзменения
Функция ЗаполнитьИзменения(ДокументСсылка, ЭлементОчереди = Неопределено, ТекстОшибки = "", НовыйСтатус = Неопределено)
	
	Изменения = Новый Массив;
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		//@skip-check bsl-legacy-check-string-literal
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ОбменДаннымиИСМП.СтруктураИзменения();
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Если ЭлементОчереди <> Неопределено Тогда
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
	КонецЕсли;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;

КонецФункции

#КонецОбласти