#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура устанавливает длительность переданной задачи.
//
// Параметры:
//  Задача  - ЗадачаОбъект.БюджетнаяЗадача - задача, которой ставим срок.
//  ЭтапПодготовкиБюджетов  - СправочникСсылка.ЭтапыПодготовкиБюджетов - шаг процесса на основании которого заполняем срок исполнения.
//
Процедура УстановитьДлительностьЗадачи(Задача, ЭтапПодготовкиБюджетов) Экспорт
	
	Если ТипЗнч(ЭтапПодготовкиБюджетов) = Тип("Структура") Тогда
		РеквизитыЭтапаПодготовкиБюджетов = ЭтапПодготовкиБюджетов;
	Иначе
		РеквизитыЭтапаПодготовкиБюджетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтапПодготовкиБюджетов,
			"Длительность, ТипДлительности");
	КонецЕсли;
	
	ДлительностьЭтапа = 1;
	Если ЗначениеЗаполнено(РеквизитыЭтапаПодготовкиБюджетов.Длительность) Тогда
		ДлительностьЭтапа = РеквизитыЭтапаПодготовкиБюджетов.Длительность;
	КонецЕсли;
	
	ДатаЗадачи = Задача.Дата;
	
	Если РеквизитыЭтапаПодготовкиБюджетов.ТипДлительности
		= Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ВКалендарныхДнях Тогда
		Задача.СрокИсполнения = КонецДня(ДатаЗадачи + (ДлительностьЭтапа - 1) * 86400);
	Иначе
		График = Константы.ОсновнойКалендарьПредприятия.Получить();
		Задача.СрокИсполнения = КонецДня(КалендарныеГрафики.ДатаПоКалендарю(График, ДатаЗадачи, ДлительностьЭтапа - 1));
	КонецЕсли;
	
КонецПроцедуры

// Формирует бюджетные задачи на основании расписания бюджетного процесса.
//
// Параметры:
//  МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - Необязательный. 
//                         Модель бюджетирования для формирования бюджетных задач.
//  ПроцессПодготовкиБюджетов - ДокументСсылка.ПроцессПодготовкиБюджетов - Необязательный. 
//                              Процесс подготовки бюджетов для формирования бюджетных задач.
//
Процедура ФормированиеБюджетныхЗадач(МодельБюджетирования = Неопределено, ПроцессПодготовкиБюджетов=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МоделиБюджетирования.Ссылка КАК Ссылка,
	|	МоделиБюджетирования.Наименование КАК Наименование
	|ПОМЕСТИТЬ Модели
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	НЕ МоделиБюджетирования.ЭтоГруппа
	|	И НЕ МоделиБюджетирования.ПометкаУдаления
	|	И МоделиБюджетирования.Статус = &СтатусДействует
	|	И &УсловиеПоСсылкеМоделиБюджетирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Модели.Ссылка КАК Ссылка,
	|	Модели.Наименование КАК Наименование
	|ИЗ
	|	Модели КАК Модели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка КАК Ссылка,
	|	ЭтапыПодготовкиБюджетов.Владелец КАК Модель
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Модели КАК Модели
	|		ПО ЭтапыПодготовкиБюджетов.Владелец = Модели.Ссылка
	|			И (&УсловиеПоГруппеЭтаповПроцесса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БюджетнаяЗадача.МодельБюджетирования КАК Модель,
	|	БюджетнаяЗадача.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	&УсловиеДляЗадачПоСсылкеМоделиБюджетирования
	|	И БюджетнаяЗадача.ОсновнаяЗадача = ЗНАЧЕНИЕ(Задача.БюджетнаяЗадача.ПустаяСсылка)
	|	И НЕ БюджетнаяЗадача.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	
	Если МодельБюджетирования <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСсылкеМоделиБюджетирования",
		                                         "МоделиБюджетирования.Ссылка = &Ссылка");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляЗадачПоСсылкеМоделиБюджетирования",
		                                         "БюджетнаяЗадача.МодельБюджетирования = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", МодельБюджетирования);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСсылкеМоделиБюджетирования", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДляЗадачПоСсылкеМоделиБюджетирования", "ИСТИНА");
	КонецЕсли;
	
	Если ПроцессПодготовкиБюджетов <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппеЭтаповПроцесса",
		                                         "ЭтапыПодготовкиБюджетов.Ссылка В ИЕРАРХИИ (&ЭтапПроцесса)");
		Запрос.УстановитьПараметр("ЭтапПроцесса",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессПодготовкиБюджетов, "ГруппаЭтапов"));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппеЭтаповПроцесса", "ИСТИНА");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыМоделейБюджетирования.Действует);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВсеЭтапы = Результаты[2].Выгрузить(); // ТаблицаЗначений
	ВсеЭтапы.Индексы.Добавить("Модель");
	
	ВсеЗадачи = Результаты[3].Выгрузить(); // ТаблицаЗначений
	ВсеЗадачи.Индексы.Добавить("Модель");
	
	ВыборкаМоделейБюджетирования = Результаты[1].Выбрать();
	
	СозданныеЗадачи=Неопределено; // см. СформироватьБюджетныеЗадачиПоМодели.СозданныеЗадачи
	ЗадачиСозданы = Ложь;
	
	Пока ВыборкаМоделейБюджетирования.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			ЭтапыДляБлокировки = ВсеЭтапы.Скопировать(Новый Структура("Модель", ВыборкаМоделейБюджетирования.Ссылка), "Ссылка");
			ЗадачиДляБлокировки = ВсеЗадачи.Скопировать(Новый Структура("Модель", ВыборкаМоделейБюджетирования.Ссылка), "Ссылка");
			
			// Блокировка для создания задач без формирования документов
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ЭтапыПодготовкиБюджетов");
			ЭлементБлокировки.ИсточникДанных = ЭтапыДляБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("Задача.БюджетнаяЗадача");
			ЭлементБлокировки.ИсточникДанных = ЗадачиДляБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый; // заблокированные задачи не изменяются
			
			Блокировка.Заблокировать();
			
			СформироватьБюджетныеЗадачиПоМодели(ВыборкаМоделейБюджетирования.Ссылка, ПроцессПодготовкиБюджетов, СозданныеЗадачи);
			
			ЗадачиСозданы = Истина;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ТекстОшибки = НСтр("ru = 'Не удалось создать бюджетные задачи по модели: %1 по причине: %2';
								|en = 'Cannot create budget tasks using the %1 model. Reason: %2'", КодОсновногоЯзыка);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки, ВыборкаМоделейБюджетирования.Наименование, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
											|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "." + НСтр("ru = 'Создание бюджетных задач';
							|en = 'Create budget tasks'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	#Область ЗапускФоновыхЗаданийДляСозданияДокументов
	
	Если ЗадачиСозданы Тогда
		ФоновыеЗаданияДляФормированияДокументов = ФоновыеЗаданияДляФормированияДокументов();
		Если ФоновыеЗаданияДляФормированияДокументов.Количество() > 0 Тогда
			
			СозданныеЗадачи.Индексы.Добавить("Процесс");
			Поиск = Новый Структура("Процесс");
			
			Для каждого ПроцессПодготовкиБюджетов Из ФоновыеЗаданияДляФормированияДокументов Цикл
				
				Поиск.Процесс = ПроцессПодготовкиБюджетов;
				
				ЗадачиПервойОчереди = СозданныеЗадачи.Скопировать(Поиск, "Задача").ВыгрузитьКолонку("Задача");
				
				ЗапуститьФоновоеЗаданиеДляФормированияДокументов(ПроцессПодготовкиБюджетов, ЗадачиПервойОчереди);
				
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Формирует оповещения по бюджетным задачам.
//
Процедура ФормированиеОповещенийПоБюджетнымЗадачам() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОповещенияДляЗадачБюджетирования") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьОповещенияПоБюджетнымЗадачам();
	
КонецПроцедуры

// Формирует дерево подчиненных задач по реквизиту "основная задача".
//
// Параметры:
//  Задача - ЗадачаСсылка.БюджетнаяЗадача - задача, для которой определяются подчиненные задачи.
//
// Возвращаемое значение:
//  ДеревоЗначений - Дерево подчиненных задач по основной задаче.
//
Функция ПодчиненныеЗадачи(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Компановка = Отчеты.ВыполнениеЗадачБюджетногоПроцесса.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Вариант = Компановка.ВариантыНастроек.Найти("СвязанныеЗадачи");
	
	КомпановщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпановщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Компановка));
	КомпановщикНастроек.ЗагрузитьНастройки(Вариант.Настройки);
	
	Отбор = КомпановщикНастроек.Настройки.Отбор;
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.ПравоеЗначение = Задача;
	
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача.ОсновнаяЗадача");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	НовыйОтбор.Использование = Истина;
	
	НастройкиКомпоновкиДанных = КомпановщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Компановка, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	Результат = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу утверждаемых документов по шагам процесса.
//
// Параметры:
//  Действие - ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов - действие.
//  НастройкаДействия - ТаблицаЗначений - таблица действий.
//  Период - Дата - период действия задачи.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица документов по шагу процесса:
//		* Документ - ДокументСсылка - Ссылка на документ.
//      * ЭтапПодготовкиБюджетов - СправочникСсылка.ЭтапыПодготовкиБюджетов - Ссылка на этап подготовки бюджетов.
//    
Функция УтверждаемыеДокументыПоШагуПроцесса(Действие, НастройкаДействия, Период) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("ЭтапПодготовкиБюджетов");
	
	Если Действие <> Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкаДействия <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Имя", "УтверждаемыеЭтапыПодготовкиБюджетов");
		НайденныеСтроки = НастройкаДействия.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			УтверждаемыеШагиПроцесса = НайденныеСтроки[0].Значение;
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	БюджетнаяЗадачаСписокДокументов.Документ КАК Документ,
				|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов
				|ИЗ
				|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
				|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.БюджетнаяЗадача.СписокДокументов КАК БюджетнаяЗадачаСписокДокументов
				|		ПО БюджетнаяЗадачаСписокДокументов.Ссылка = БюджетнаяЗадача.Ссылка
				|ГДЕ
				|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов В(&УтверждаемыеШагиПроцесса)
				|	И БюджетнаяЗадача.Период = &Период
				|	И НЕ БюджетнаяЗадача.ПометкаУдаления
				|	И БюджетнаяЗадача.Выполнена
				|	И НЕ БюджетнаяЗадачаСписокДокументов.Документ ЕСТЬ NULL ";
			Запрос.УстановитьПараметр("УтверждаемыеШагиПроцесса", УтверждаемыеШагиПроцесса);
			Запрос.УстановитьПараметр("Период", Период);
			Результат = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет необходимость создания нового документа.
// 
// Параметры:
//  Документ - ДокументСсылка - Текущий документ из списка документов бюджетной задачи или "Неопределено".
//  Действие - ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов - Тип действия этапа подготовки бюджета.
//  ДобавитьВСписок - Булево - Признак использования списка документов в "Бюджетной задаче".
//
// Возвращаемое значение:
//  Булево - Истина, если необходимо создать новый документ,
//           Ложь   - Если нет необходимости создавать новый документ.
//
Функция НеобходимоСозданиеНовогоДокумента(Документ, Действие, ДобавитьВСписок) Экспорт
	
	Результат = Ложь;
	
	ДействияБезСозданияДокумента = Новый Массив;
	ДействияБезСозданияДокумента.Добавить(Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.Прочее);
	ДействияБезСозданияДокумента.Добавить(Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов);
	
	Если Не ЗначениеЗаполнено(Документ) И ДействияБезСозданияДокумента.Найти(Действие) = Неопределено 
		ИЛИ ДобавитьВСписок Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает документ "ЭкземплярБюджета" в соотвествии с структурой действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа,
//                                         Период, МодельБюджетирования, ЭтапПодготовкиБюджетов.
// 	СтруктураДействия        - Структура - настройки создания документа.
// 	Проводить - Булево - Необязательный. Признак проведения документа "Экземпляр бюджета".
//  НеПроверятьСуществующиеДокументы - Булево - Необязательный. Признак создания документа без поиска по существующим.
// 
// Возвращаемое значение:
//  Массив Из ДокументСсылка.ЭкземплярБюджета -
//
Функция СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, СтруктураДействия, Проводить = Ложь, НеПроверятьСуществующиеДокументы = Ложь) Экспорт
	
	ПериодДокумента = ПараметрыНовогоДокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Реквизиты = Новый Структура("Периодичность, ВыполнятьАвтоматически", "Родитель.Периодичность");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов, Реквизиты);
	Периодичность = Реквизиты.Периодичность;
	ВыполнятьАвтоматически = Реквизиты.ВыполнятьАвтоматически;
	Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов,"Ответственный");
	
	Если СтруктураДействия.Свойство("НачалоПериода") Тогда
		НачалоПериода = СтруктураДействия.НачалоПериода;
	Иначе
		НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
	КонецЕсли;
	
	Если СтруктураДействия.Свойство("ОкончаниеПериода") Тогда
		КонецПериода = СтруктураДействия.ОкончаниеПериода;
	Иначе
		КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
	КонецЕсли;
	
	ВидБюджета = Неопределено;
	Если СтруктураДействия.Свойство("ВидБюджета") Тогда
		ВидБюджета = СтруктураДействия.ВидБюджета;
	КонецЕсли;
	Если ВидБюджета = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В настройках действия не определен вид бюджета для создания документа.';
				|en = 'Budget profile for document creation is not determined in the action settings.'"));
		Возврат Неопределено;
	КонецЕсли;
	Если Не Справочники.ВидыБюджетов.ВидБюджетаЗаполненПравильно(ВидБюджета) Тогда
		Возврат Неопределено
	КонецЕсли;
		
	СтруктураДействия.Вставить("НачалоПериода",			НачалоПериода);
	СтруктураДействия.Вставить("ОкончаниеПериода",		КонецПериода);
	СтруктураДействия.Вставить("МодельБюджетирования",	ПараметрыНовогоДокумента.МодельБюджетирования);
	СтруктураДействия.Вставить("ВидБюджета",			ВидБюджета);
	
	МассивДокументы = Неопределено;
	Если Не НеПроверятьСуществующиеДокументы Тогда
		МассивДокументы = НайтиДокументПоЗначениямЗаполнения("ЭкземплярБюджета", СтруктураДействия);
	КонецЕсли;
	
	ЗаполнениеНовогоДокумента = Ложь;
	МассивОбъектов = Новый Массив;
	Если МассивДокументы = Неопределено Тогда
		ЭкземплярБюджета = Документы.ЭкземплярБюджета.СоздатьДокумент();
		ЭкземплярБюджета.Заполнить(СтруктураДействия);
		ЭкземплярБюджета.Дата = ТекущаяДатаСеанса();
		ЭкземплярБюджета.Ответственный = Ответственный;
		МассивОбъектов.Добавить(ЭкземплярБюджета);
		ЗаполнениеНовогоДокумента = Истина;
	Иначе
		Для Каждого Документ Из МассивДокументы Цикл
			ЭкземплярБюджета = Документ.ПолучитьОбъект();
			МассивОбъектов.Добавить(ЭкземплярБюджета);
		КонецЦикла;
	КонецЕсли;
	
	МассивДокументы = Новый Массив;
	Для Каждого ЭкземплярБюджета Из МассивОбъектов Цикл
		
		// Заполняется документ только на автоматическом этапе или новый документ
		Если ЗаполнениеНовогоДокумента ИЛИ ВыполнятьАвтоматически Тогда
			Документы.ЭкземплярБюджета.ЗаполнитьБюджетПоДаннымИнформационнойБазы(ЭкземплярБюджета);
			Документы.ЭкземплярБюджета.ПересчитатьСвязанныеЯчейкиЭкземпляраБюджета(ЭкземплярБюджета);
		КонецЕсли;
		Если ВыполнятьАвтоматически Тогда
			ИспользоватьУтверждениеБюджетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПараметрыНовогоДокумента.МодельБюджетирования, "ИспользоватьУтверждениеБюджетов");
			Если ИспользоватьУтверждениеБюджетов
				И ЭкземплярБюджета.Статус <> Перечисления.СтатусыПланов.Утвержден Тогда
				ЭкземплярБюджета.Статус = Перечисления.СтатусыПланов.НаУтверждении;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыНовогоДокумента.Свойство("БюджетнаяЗадача") Тогда
			ЭкземплярБюджета.ДополнительныеСвойства.Вставить("БюджетнаяЗадача", ПараметрыНовогоДокумента.БюджетнаяЗадача);
		КонецЕсли;
		
		Если Проводить Тогда
			Попытка
				ЭкземплярБюджета.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось провести документ: (%1)';
										|en = 'Cannot post the document: (%1)'"), ЭкземплярБюджета.Ссылка);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
												|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
					+ "." + НСтр("ru = 'Создание документов для задачи';
								|en = 'Creating documents for the task'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,СообщениеОбОшибке);
			КонецПопытки;
		Иначе
			Попытка
				ЭкземплярБюджета.Записать();
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось записать документ: (%1)';
										|en = 'Cannot save document: (%1)'"), ЭкземплярБюджета.Ссылка);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
												|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
					+ "." + НСтр("ru = 'Создание документов для задачи';
								|en = 'Creating documents for the task'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,СообщениеОбОшибке);
			КонецПопытки;
		КонецЕсли;
		
		РеквизитыВидаБюджета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭкземплярБюджета.ВидБюджета, 
										"СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета, АналитикиШапки, ВерсияДанных");
		Если РеквизитыВидаБюджета.СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета Тогда
			
			МассивАналитик = РеквизитыВидаБюджета.АналитикиШапки.Выгрузить().ВыгрузитьКолонку("ВидАналитики");
			СписокАналитик = Новый СписокЗначений;
			СписокАналитик.ЗагрузитьЗначения(МассивАналитик);
			
			РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
			ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(ЭкземплярБюджета.ВидБюджета, РежимФормирования);
			
			ВалютаСценария = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭкземплярБюджета.Сценарий, "Валюта");
			ПараметрыОтчета = Документы.ЭкземплярБюджета.ПараметрыВыводаВидаБюджетаВТабличныйДокумент(ЭкземплярБюджета, СписокАналитик, ВалютаСценария, 
																			ПараметрыВыводаВидаБюджета, РежимФормирования);
			
			ДанныеЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
			
			ВспомогательныеДанные = Новый Структура;
			ВспомогательныеДанные.Вставить("ДанныеЯчеек", 						ДанныеЭкземпляраБюджета.ДанныеЯчеек);
			ВспомогательныеДанные.Вставить("ДанныеРасшифровки", 				ДанныеЭкземпляраБюджета.ДанныеРасшифровки);
			ВспомогательныеДанные.Вставить("ДеревоСтрокСпискаРедактирования", 	ДанныеЭкземпляраБюджета.ДеревоСтрокСпискаРедактирования);
			ВспомогательныеДанные.Вставить("ВерсияВидаБюджета", 				РеквизитыВидаБюджета.ВерсияДанных);
			ВспомогательныеДанные.Вставить("ВидБюджета", 						ЭкземплярБюджета.ВидБюджета);
			ВспомогательныеДанные.Вставить("СтильУровней", 						ДанныеЭкземпляраБюджета.СтильУровней);
			
			БюджетированиеСервер.СохранитьХранимыйМакет(ДанныеЭкземпляраБюджета.Результат, ВспомогательныеДанные, ЭкземплярБюджета.Ссылка);
			
		КонецЕсли;
	
		МассивДокументы.Добавить(ЭкземплярБюджета.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивДокументы;
	
КонецФункции

// Создает документ ввода плана по типу в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогоДокумента - Структура - Параметры для заполнения объекта документа:
//  	* Ключ - Имя параметра нового документа.
//		* Значение - Значение параметра нового документа.
// 	НастройкаДействия - ТаблицаЗначений - настройки создания документа:
//		* Имя - Имя настройки действия.
//      * Значение - Значение настройки действия.
//
// Возвращаемое значение:
//  ДокументСсылка - Ссылка на документ плана.
//     
Функция СоздатьПлан(ПараметрыНовогоДокумента, НастройкаДействия) Экспорт
	
	ПериодДокумента = ПараметрыНовогоДокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура();
	Для Каждого Настройка Из НастройкаДействия Цикл
		Если ЗначениеЗаполнено(Настройка.Значение) Тогда
			ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
		КонецЕсли;
	КонецЦикла; 
	
	ТипПлана = Неопределено;
	Сценарий = Неопределено;
	ВидПлана = Неопределено;
	Если Не ЗначенияЗаполнения.Свойство("ТипПлана", ТипПлана) Или Не ЗначениеЗаполнено(ТипПлана) Тогда
		ВызватьИсключение НСтр("ru = 'В настройках действия не определен Тип плана.';
								|en = 'Plan type is not determined in the action settings.'");
	ИначеЕсли Не ЗначенияЗаполнения.Свойство("Сценарий", Сценарий) Или Не ЗначениеЗаполнено(Сценарий) Тогда
		ВызватьИсключение НСтр("ru = 'В настройках действия не определен Сценарий планирования.';
								|en = 'Planning scenario is not determined in the action settings.'");
	ИначеЕсли Не ЗначенияЗаполнения.Свойство("ВидПлана", ВидПлана) Или Не ЗначениеЗаполнено(ВидПлана) Тогда
		ВызватьИсключение НСтр("ru = 'В настройках действия не определен Вид плана.';
								|en = 'Plan profile is not determined in the action settings.'");
	КонецЕсли;
	
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
	СценарийБюджетирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "СценарийБюджетирования");
	НачалоПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуНачалаБлижайшегоПериода(ПериодДокумента, Периодичность);
	ОкончаниеПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПериода, Периодичность, 1);
	ЗначенияЗаполнения.Вставить("СценарийБюджетирования", СценарийБюджетирования);
	ЗначенияЗаполнения.Вставить("Периодичность", Периодичность);
	ЗначенияЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ЗначенияЗаполнения.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	ЗначенияЗаполнения.Вставить("ОтражаетсяВБюджетировании", Истина);
	
	План = Документы[ОбщегоНазначения.ИмяЗначенияПеречисления(ТипПлана)].СоздатьДокумент();
	План.Заполнить(ЗначенияЗаполнения);
	План.Дата = ТекущаяДатаСеанса();
	План.Записать();
	
	Возврат План.Ссылка;
	
КонецФункции

// Создает документ "Установка значений нефинансовых показателей" в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогоДокумента - Структура - Параметры для заполнения объекта документа,
//                                         Период, ЭтапПодготовкиБюджетов.
// 	НастройкаДействия - ТаблицаЗначений - настройки создания документа.
//  Проводить - Булево - Необязательный. Признак проведения документа "Установка значений нефинансовых показателей". 
//
// Возвращаемое значение:
//  ДокументСсылка.УстановкаЗначенийНефинансовыхПоказателей - Ссылка на созданный документ.
//           
Функция СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогоДокумента, НастройкаДействия, Проводить = Ложь) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	Для Каждого Настройка Из НастройкаДействия Цикл
		Если ЗначениеЗаполнено(Настройка.Значение) Тогда
			ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПериодДокумента = ПараметрыНовогоДокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;

	Реквизиты = Новый Структура("Периодичность, ВыполнятьАвтоматически", "Родитель.Периодичность");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов, Реквизиты);
	Периодичность = Реквизиты.Периодичность;
	ВыполнятьАвтоматически = Реквизиты.ВыполнятьАвтоматически;

	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
	ЗначенияЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	
	Если ЗначенияЗаполнения.Свойство("ШаблонВвода") Тогда
		ТаблицаНФПОпределения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияЗаполнения.ШаблонВвода, "ПоказателиШаблона");
		НФПОпределения = ТаблицаНФПОпределения.Выгрузить()[0].Показатель;
	ИначеЕсли ЗначенияЗаполнения.Свойство("НефинансовыйПоказатель") Тогда
		НФПОпределения = ЗначенияЗаполнения.НефинансовыйПоказатель;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В настройках действия не определен нефинансовый показатель для создания документа.';
				|en = 'Non-financial item for document creation is not determined in the action settings.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	НуженПериодОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НФПОпределения, "УстанавливатьЗначениеНаКаждыйПериод");
	Если НуженПериодОкончания Тогда
		ОкончаниеПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
		ЗначенияЗаполнения.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	КонецЕсли;
	
	МассивДокументов = НайтиДокументПоЗначениямЗаполнения("УстановкаЗначенийНефинансовыхПоказателей", ЗначенияЗаполнения);
	Если МассивДокументов = Неопределено Тогда
		УстановкаНефинансовыхПоказателей = Документы.УстановкаЗначенийНефинансовыхПоказателей.СоздатьДокумент();
		УстановкаНефинансовыхПоказателей.Заполнить(ЗначенияЗаполнения);
		УстановкаНефинансовыхПоказателей.Дата = ТекущаяДатаСеанса();
	Иначе
		УстановкаНефинансовыхПоказателей = МассивДокументов[МассивДокументов.Вграница()].ПолучитьОбъект();
	КонецЕсли;
	
	// Заполняется документ только на автоматическом этапе или новый документ
	Если МассивДокументов = Неопределено ИЛИ ВыполнятьАвтоматически Тогда
		ОбъектИПараметрыРасчета = Документы.УстановкаЗначенийНефинансовыхПоказателей.ОбъектИПараметрыРасчетаДокументаУстановкиЗначенийНефинансовыхПоказателей(УстановкаНефинансовыхПоказателей);
		Если ОбъектИПараметрыРасчета.СтруктураОписанияВвода.Свойство("ПравилаЗаполнения") Тогда
			Документы.УстановкаЗначенийНефинансовыхПоказателей.ЗаполнитьНастроенныйДокумент(ОбъектИПараметрыРасчета, Истина);
			Документы.УстановкаЗначенийНефинансовыхПоказателей.СохранитьТабличнуюЧастьВДокумент(ОбъектИПараметрыРасчета, УстановкаНефинансовыхПоказателей);
		КонецЕсли;
	КонецЕсли;
	
	УстановкаНефинансовыхПоказателей.Записать();
	
	Если Проводить Тогда
		УстановкаНефинансовыхПоказателей.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Возврат УстановкаНефинансовыхПоказателей.Ссылка;
	
КонецФункции

// Создает СтруктуруДействий в соотвествии с строкой действий.
//
// Параметры:
//  СтрокаДействия - СтрокаДереваЗначений - строка "Дерева ввода бюджетов".
// 	КолонкиДействия - КоллекцияКолонокДереваЗначений - колонки "Дерева ввода бюджетов".
//
// Возвращаемое значение:
//  Структура - Структура действия:
//		* Ключ - Имя настройки действия.
//		* Значение - Значение настройки действия.
//
Функция ПараметрыСтрокиДействия(СтрокаДействия, КолонкиДействия) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	СтруктураДействия = Новый Структура;
	
	КолонкиИсключения = Новый Массив();
	КолонкиИсключения.Добавить("ВидБюджетаАналитика");
	КолонкиИсключения.Добавить("ПериодичностьБюджета");
	КолонкиИсключения.Добавить("Документ");
	КолонкиИсключения.Добавить("Комментарий");
	КолонкиИсключения.Добавить("ДокументПредставление");
	КолонкиИсключения.Добавить("ДокументДата");
	КолонкиИсключения.Добавить("ДокументНомер");
	КолонкиИсключения.Добавить("НомерСтрокиВидаБюджета");
	КолонкиИсключения.Добавить("ДоступностьОрганизация");
	КолонкиИсключения.Добавить("ДоступностьПодразделение");
	КолонкиИсключения.Добавить("ДоступностьСценарий");
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		КолонкиИсключения.Добавить("ДоступностьАналитика" + Сч);
	КонецЦикла;
		
	Для Каждого Колонка Из КолонкиДействия Цикл
		
		Если Колонка.Имя = "КонецПериода" Тогда
			СтруктураДействия.Вставить("ОкончаниеПериода", СтрокаДействия[Колонка.Имя]);
		ИначеЕсли КолонкиИсключения.Найти(Колонка.Имя) = Неопределено Тогда
			СтруктураДействия.Вставить(Колонка.Имя, СтрокаДействия[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДействия;

КонецФункции

// Создает документы "ЭкземплярБюджета" в соотвествии с настройками действия,
// и помещает результат в хранилище, для фонового выполнения.
//
// Параметры:
//  Параметры - Структура - ПараметрыНовогоДокумента - структура значений для заполнения объекта документа,
//                          Период, МодельБюджетирования, ЭтапПодготовкиБюджетов.
//                          ДеревоВводаБюджетов - ДеревоЗначений - дерево настроек создания документов.
// 	АдресХранилища - Строка - Адрес хранилища для сохранения результата.
//
Процедура СформироватьБюджетыПоНастройкамДействияВФоне(Параметры, АдресХранилища) Экспорт
	
	ПараметрыНовогоДокумента = Параметры.ПараметрыНовогоДокумента;
	ДеревоВводаБюджетов = Параметры.ДеревоВводаБюджетов;
	НеПроверятьСуществующиеДокументы = Ложь;
	Если Параметры.Свойство("НеПроверятьСуществующиеДокументы") Тогда
		НеПроверятьСуществующиеДокументы = Параметры.НеПроверятьСуществующиеДокументы;
	КонецЕсли;
	
	Задача = ПараметрыНовогоДокумента.БюджетнаяЗадача;
	ПредставлениеЗадачи = Строка(Задача);
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "МодельБюджетирования, Период, ЭтапПодготовкиБюджетов, ЭтапПодготовкиБюджетовОснование");
	ЭтапыПодготовкиБюджетов = Новый Массив;
	ЭтапыПодготовкиБюджетов.Добавить(РеквизитыЗадачи.ЭтапПодготовкиБюджетов);
	Если ЗначениеЗаполнено(РеквизитыЗадачи.ЭтапПодготовкиБюджетовОснование) Тогда
		ЭтапыПодготовкиБюджетов.Добавить(РеквизитыЗадачи.ЭтапПодготовкиБюджетовОснование);
	КонецЕсли;
	
	ТекстОшибки = "";
	
	НачатьТранзакцию();
	Попытка
		
		ЗадачиДляТранзакционнойБлокировки = ЗадачиДляБлокировкиПриВводеДокументов(РеквизитыЗадачи.МодельБюджетирования, РеквизитыЗадачи.Период, ЭтапыПодготовкиБюджетов);
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.БюджетнаяЗадача");
		ЭлементБлокировки.ИсточникДанных = ЗадачиДляТранзакционнойБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
		
		ОбщийМассивДокументов = Задачи.БюджетнаяЗадача.СформироватьБюджетыПоНастройкамДействия(ПараметрыНовогоДокумента,
		ДеревоВводаБюджетов, Истина, НеПроверятьСуществующиеДокументы);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстОшибки = НСтр("ru = 'Не удалось создать документы по бюджетной задаче: %1%, по причине: %2%';
							|en = 'Cannot create documents for the %1% budget task. Reason: %2%'", КодОсновногоЯзыка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", ПредставлениеЗадачи);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интерактивное создание документов для бюджетных задач';
										|en = 'Interactive document creation for budget tasks'", КодОсновногоЯзыка),
		УровеньЖурналаРегистрации.Ошибка,Метаданные.Задачи.БюджетнаяЗадача,Задача, ТекстОшибки);
		
	КонецПопытки;
		
	Результат = Новый Структура;
	Результат.Вставить("Документы", ОбщийМассивДокументов);
	Результат.Вставить("ЕстьОшибки", ЗначениеЗаполнено(ТекстОшибки));
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	Объект - ЗадачаОбъект.БюджетнаяЗадача - Объект бюджетной задачи.
//  НастройкаДействия - ТаблицаЗначений - Таблица настроек действий.
//  Записывать - Булево - Необязательный. Сохраняется признак, что задачу нужно записать.
//  НеПроверятьСуществующиеДокументы - Булево - Необязательный. Если действие "Ввод бюджета", то
//                                     указывает проверять существующие документы или нет.
//  ТекстОшибки - Строка - Возвращаемый параметр, при возникновении ошибки создания документов, текст ошибки будет установлен в данный параметр.
// Возвращаемое значение:
// 	Структура, Неопределено - Описание:
// * ИмяФормы - Строка -
// * Уникальность - Булево -
// * ПараметрыФормы - Структура -:
// ** НФП_ЗаполнитьЗначенияПоУмолчанию - Булево - параметр заполнения по умолчанию для нефинансового показателя
// ** Ключ - ДокументСсылка.ЭкземплярБюджета, ДокументСсылка.УстановкаЗначенийНефинансовыхПоказателей -
// ** Ключ - ДокументСсылка.ПланПродаж, ДокументСсылка.ПланЗакупок -
// ** Ключ - ДокументСсылка.ПланПроизводства, ДокументСсылка.ПланСборкиРазборки -
//
Функция ВыполнитьДействие(Объект, НастройкаДействия, Записывать = Ложь, НеПроверятьСуществующиеДокументы = Ложь, ТекстОшибки = "") Экспорт
	
	Действие = Объект.Действие;
	Документ = ТекущийДокумент(Объект.СписокДокументов);
	
	ВидимостьСписка = Ложь;
	СтрокаНастроек = НастройкаДействия.Найти("ВидБюджета","Имя");
	Если СтрокаНастроек <> Неопределено Тогда
		ВидБюджета = СтрокаНастроек.Значение;
		ВидимостьСписка = Справочники.ВидыБюджетов.ВидБюджетаСодержитАналитикиШапки(ВидБюджета);
	КонецЕсли;
	
	Если Задачи.БюджетнаяЗадача.НеобходимоСозданиеНовогоДокумента(Документ, Действие, ВидимостьСписка) Тогда
		
		НачатьТранзакцию();
		Попытка
		
			// Накладываем блокировку, чтобы исключить возможность параллельного создания документов с фоновым заданием.
			ЭтапыПодготовкиБюджетов = Новый Массив;
			ЭтапыПодготовкиБюджетов.Добавить(Объект.ЭтапПодготовкиБюджетов);
			Если ЗначениеЗаполнено(Объект.ЭтапПодготовкиБюджетовОснование) Тогда
				ЭтапыПодготовкиБюджетов.Добавить(Объект.ЭтапПодготовкиБюджетовОснование);
			КонецЕсли;
			ЗадачиДляТранзакционнойБлокировки = ЗадачиДляБлокировкиПриВводеДокументов(Объект.МодельБюджетирования,
			                                                                          Объект.Период,
			                                                                          ЭтапыПодготовкиБюджетов);
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.БюджетнаяЗадача");
			ЭлементБлокировки.ИсточникДанных = ЗадачиДляТранзакционнойБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			Блокировка.Заблокировать();
			
			Если Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
				ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования, ЭтапПодготовкиБюджетов");
				ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
				ПараметрыНовогоДокумента.Вставить("БюджетнаяЗадача", Объект.Ссылка);
				Если ЗначениеЗаполнено(Объект.ЭтапПодготовкиБюджетовОснование) Тогда
					ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов = Объект.ЭтапПодготовкиБюджетовОснование;
				КонецЕсли;
				Документ = СформироватьБюджетыПоНастройкамДействия(ПараметрыНовогоДокумента, НастройкаДействия, , НеПроверятьСуществующиеДокументы);
				
			ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводПлана Тогда
				ПараметрыНовогоДокумента = Новый Структура("Период");
				ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
				Документ = Задачи.БюджетнаяЗадача.СоздатьПлан(ПараметрыНовогоДокумента, НастройкаДействия);
				
			ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
				ПараметрыНовогоДокумента = Новый Структура("Период, ЭтапПодготовкиБюджетов");
				ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
				Если ЗначениеЗаполнено(Объект.ЭтапПодготовкиБюджетовОснование) Тогда
					ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов = Объект.ЭтапПодготовкиБюджетовОснование;
				КонецЕсли;
				Документ = Задачи.БюджетнаяЗадача.СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогоДокумента, НастройкаДействия);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ТекстОшибки = НСтр("ru = 'Не удалось создать документы по бюджетной задаче: %1 по причине: %2';
								|en = 'Cannot create documents for the %1 budget task. Reason: %2'", КодОсновногоЯзыка);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки, Объект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Интерактивное создание документов для бюджетных задач';
											|en = 'Interactive document creation for budget tasks'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,Метаданные.Задачи.БюджетнаяЗадача, Объект.Ссылка, ТекстОшибки);
			
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Записывать = Истина;
		
		Если ТипЗнч(Документ) = Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.СписокДокументов, Документ, "Документ");
		Иначе
			Объект.СписокДокументов.Добавить().Документ = Документ;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФормыОбъекта = "";
	ПараметрыФормы = Новый Структура();
	Уникальность = Ложь;
	
	Документ = ТекущийДокумент(Объект.СписокДокументов);
	ИмяФормыОбъекта = "Документ." + Документ.Метаданные().Имя + ".ФормаОбъекта";
	ПараметрыФормы.Вставить("Ключ", Документ);
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ПараметрыФормы.Вставить("НФП_ЗаполнитьЗначенияПоУмолчанию", Истина);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФормы", ИмяФормыОбъекта);
	Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	Результат.Вставить("Уникальность", Уникальность);
	
	Возврат Результат;
	
КонецФункции

// Ищет документы по полям поиска.
// 
// Параметры:
//  ИмяТаблицы - Строка - Имя вида документа из метаданных.
//  ЗначенияЗаполнения - Структура - Содержит значения полей документа для поиска.
//
// Возвращаемое значение:
//   - Неопределено - Документ не найден.
//   - Массив из ДокументСсылка.ЭкземплярБюджета, ДокументСсылка.УстановкаЗначенийНефинансовыхПоказателей -
//      найденные по параметрам документы.
//
Функция НайтиДокументПоЗначениямЗаполнения(ИмяТаблицы, ЗначенияЗаполнения) Экспорт
	
	Запрос = Новый Запрос();
	ТаблицаИсточника = "Документ." + ИмяТаблицы;
	ТекстЗапроса = "ВЫБРАТЬ Ссылка ИЗ &ТаблицаИсточника ГДЕ НЕ ПометкаУдаления";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточника", ТаблицаИсточника);
	Для Каждого КлючиИЗначение Из ЗначенияЗаполнения Цикл
		Значение = КлючиИЗначение.Значение;
		Если КлючиИЗначение.Ключ = "ОкончаниеПериода" Тогда
			Значение = НачалоДня(Значение);
		КонецЕсли;
		Запрос.Параметры.Вставить(КлючиИЗначение.Ключ, Значение);
		ТекстЗапроса = ТекстЗапроса + " " + "И" + " " + КлючиИЗначение.Ключ + " = &" + КлючиИЗначение.Ключ;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Результат.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет что задача будет выводится списком.
// 
// Параметры:
//  Задача - ЗадачаОбъект.БюджетнаяЗадача, ЗадачаСсылка.БюджетнаяЗадача - Проверяемая бюджетная задача.
//  ТаблицаНастроекДействия - ТаблицаЗначений - Содержит таблицу с настройками действиий.
//                          - Строка - Адрес хранилища с настройками действий на сервере.
//
// Возвращаемое значение:
//  Булево - Истина, если документ выводится списком.
//           Ложь, если документ не выводится списком.
//
Функция БюджетнаяЗадачаСписком(Задача, Знач ТаблицаНастроекДействия=Неопределено) Экспорт
	
	ВидимостьСписка = Ложь;
	
	Если Задача.СписокДокументов.Количество() > 1 Тогда
		ВидимостьСписка = Истина;
		Возврат ВидимостьСписка;
	КонецЕсли;
	
	Если ТаблицаНастроекДействия = Неопределено Тогда
		ТаблицаНастроекДействия	= Задача.НастройкаДействия.Получить();
	ИначеЕсли ТипЗнч(ТаблицаНастроекДействия) = Тип("Строка") Тогда
		ТаблицаНастроекДействия	= ПолучитьИзВременногоХранилища(ТаблицаНастроекДействия);
	КонецЕсли;
		
	Настройка = ТаблицаНастроекДействия.Найти("ВидыБюджетов","Имя");
	Если Настройка <> Неопределено 
	   И Настройка.Значение.Количество() > 0 Тогда
		ВидыБюджетов = Настройка.Значение;
	Иначе
		ВидыБюджетов = Неопределено;
		Возврат ВидимостьСписка;
	КонецЕсли;
	Настройка = ТаблицаНастроекДействия.Найти("АналитикаЗаполненияБюджета", "Имя");
	Если Настройка <> Неопределено Тогда
		АналитикаБюджетов = Настройка.Значение;
	Иначе
		АналитикаБюджетов = Неопределено;
	КонецЕсли;
	
	ПериодичностьБюджета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидыБюджетов[0].ВидБюджета, "Периодичность");
	ГруппаЭтапаБюджетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.ЭтапПодготовкиБюджетов, "Родитель");
	ПериодичностьЭтапаБюджетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаЭтапаБюджетов, "Периодичность");
	Если ВидыБюджетов <> Неопределено Тогда
		Если ВидыБюджетов.Количество() > 1 ИЛИ (АналитикаБюджетов <> Неопределено И АналитикаБюджетов.Количество() > 1)
		 ИЛИ (ВидыБюджетов.Количество() = 1
		   И Перечисления.Периодичность.Индекс(ПериодичностьБюджета) < Перечисления.Периодичность.Индекс(ПериодичностьЭтапаБюджетов)) Тогда
			ВидимостьСписка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидимостьСписка;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)
	|	ИЛИ ЗначениеРазрешено(Исполнитель)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ТекущиеДела

// Описание
// 
// Параметры:
// 	ТекущиеДела - ТаблицаЗначений - определяет параметры дела:
//    * Идентификатор  - Строка - внутренний идентификатор дела, используемый подсистемой.
//    * ЕстьДела       - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное         - Булево - если Истина, дело будет выделено красным цветом.
//    * СкрыватьВНастройках - Булево - если Истина, то дело будет скрыто в форме настроек текущих дел.
//                            Можно применять для дел, которые не предполагают многократного
//                            использования, т.е. после выполнения они для данной информационной базы
//                            больше отображаться не будут.
//    * Представление  - Строка - представление дела, выводимое пользователю.
//    * Количество     - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма          - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                                дела на панели "Текущие дела".
//    * ПараметрыФормы - Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец       - Строка, ОбъектМетаданныхПодсистема - строковый идентификатор дела, которое будет владельцем для текущего
//                       или объект метаданных подсистема.
//    * Подсказка      - Строка - текст подсказки.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Доступность = (Пользователи.ЭтоПолноправныйПользователь()
			ИЛИ ПравоДоступа("Редактирование", Метаданные.Задачи.БюджетнаяЗадача));
		
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(1), 0) КАК КоличествоЗадач
		|{ВЫБРАТЬ
		|	КоличествоЗадач}
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|{ГДЕ
		|	БюджетнаяЗадача.ПометкаУдаления,
		|	БюджетнаяЗадача.Выполнена,
		|	БюджетнаяЗадача.Исполнитель.*,
		|	БюджетнаяЗадача.СрокИсполнения}";
		
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос			= ТекстЗапроса;
	НаборДанных.Имя				= "НаборДанных";
	НаборДанных.ИсточникДанных	= "ИсточникДанных";
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоЗадач");
	
	ГруппировкаКомпоновки = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	НастройкиПоИсполнителю = ПолучитьНастройкиКомпоновкиДляЗадачПоИсполнителю();
	
	НастройкиКомпоновкиПросрочено = ПолучитьНастройкиКомпоновкиДляПросроченныхЗадач();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиПросрочено.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаСегодня = ПолучитьНастройкиКомпоновкиДляЗадачНаСегодня();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаСегодня.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаНеделю = ПолучитьНастройкиКомпоновкиДляЗадачНаНеделю();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаНеделю.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаСледующуюНеделю = ПолучитьНастройкиКомпоновкиДляЗадачНаСледующуюНеделю();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаСледующуюНеделю.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	ОтборыПоказателей = Новый Структура();
	ОтборыПоказателей.Вставить("КоличествоПросрочено",НастройкиКомпоновкиПросрочено.Отбор);
	ОтборыПоказателей.Вставить("КоличествоНаСегодня",НастройкиКомпоновкиНаСегодня.Отбор);
	ОтборыПоказателей.Вставить("КоличествоНаНеделю",НастройкиКомпоновкиНаНеделю.Отбор);
	ОтборыПоказателей.Вставить("КоличествоНаСледующуюНеделю",НастройкиКомпоновкиНаСледующуюНеделю.Отбор);
	
	ЧисловыеПоказатели = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ОтборыПоказателей Цикл
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор,
															ЭлементСтруктуры.Значение);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,
													Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,);
		
		РезультатКомпоновки = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		ЧисловыеПоказатели.Вставить(ЭлементСтруктуры.Ключ, РезультатКомпоновки[0].КоличествоЗадач);
		
	КонецЦикла;
	
	ЕстьДела = ЧисловыеПоказатели.КоличествоПросрочено > 0 
		ИЛИ ЧисловыеПоказатели.КоличествоНаСегодня > 0 
			ИЛИ ЧисловыеПоказатели.КоличествоНаНеделю > 0 
				ИЛИ ЧисловыеПоказатели.КоличествоНаСледующуюНеделю > 0;
		
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "БюджетныеЗадачи";
	ДелоРодитель.Представление  = НСтр("ru = 'Бюджетные задачи';
										|en = 'Budget tasks'");
	ДелоРодитель.ЕстьДела       = ЕстьДела;
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.БюджетированиеИПланирование;
	
	ИмяФормы = "Задача.БюджетнаяЗадача.Форма.ФормаСпискаМоиЗадачи";
		
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru = 'Просроченные задачи';
							|en = 'Overdue tasks'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мои бюджетные задачи (%1)';
			|en = 'My budget tasks (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессПросроченныеЗадачи";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоПросрочено > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоПросрочено;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;	
	ДопПараметры = Новый Структура("Заголовок", ЗаголовокФормыСписка);
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДопПараметры, КлючНазначенияИспользования",
										НастройкиКомпоновкиПросрочено, ДопПараметры, "Просрочено");
										
	Дело.Владелец       = "БюджетныеЗадачи";
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru = 'На сегодня';
							|en = 'As of today'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мои бюджетные задачи (%1)';
			|en = 'My budget tasks (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаСегодня";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаСегодня > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	ДопПараметры = Новый Структура("Заголовок", ЗаголовокФормыСписка);
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДопПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаСегодня, ДопПараметры, "НаСегодня");
	Дело.Владелец       = "БюджетныеЗадачи";	
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru = 'На неделю';
							|en = 'For a week'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мои бюджетные задачи (%1)';
			|en = 'My budget tasks (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаНеделю";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаНеделю > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаНеделю;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	ДопПараметры = Новый Структура("Заголовок", ЗаголовокФормыСписка);
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДопПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаНеделю, ДопПараметры, "НаНеделю");
	Дело.Владелец       = "БюджетныеЗадачи";
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru = 'На следующую неделю';
							|en = 'For the next week'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мои бюджетные задачи (%1)';
			|en = 'My budget tasks (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаСледующуюНеделю";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаСледующуюНеделю > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаСледующуюНеделю;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	ДопПараметры = Новый Структура("Заголовок", ЗаголовокФормыСписка);
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДопПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаСледующуюНеделю, ДопПараметры, "НаСледующуюНеделю");
	Дело.Владелец       = "БюджетныеЗадачи";
	
КонецПроцедуры

// Функция возвращает настройки компоновки данных для отбора задач по исполнителю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачПоИсполнителю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Пользователи.АвторизованныйПользователь();
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора просроченных задач.
Функция ПолучитьНастройкиКомпоновкиДляПросроченныхЗадач()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение	= '00010101';
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаНачала;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на сегодня.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаСегодня()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");   
	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаНачала;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на неделю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаНеделю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаОкончания;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");   
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение	= ЭтаНеделя.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на следующую неделю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаСледующуюНеделю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
	СледующаяНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.СледующаяНеделя);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение	= ЭтаНеделя.ДатаОкончания;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение	= СледующаяНеделя.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Возвращает дерево настроек действий для ввода "Экземпляров бюджетов" и 
// существующие документы по бюджетной задаче.
// 
// Параметры:
//  ТаблицаДействий - ТаблицаЗначений - Настройки действия.
//  НачалоПериода - Дата - Начало периода.
//  КонецПериода - Дата - Конец периода.
//  ПериодичностьЭтапа - ПеречислениеСсылка.Периодичность - Периодичность этапа подготовки бюджета.
//  СписокДокументов - Массив - массив существующих документов:
//		* Значение - ДокументСсылка.ЭкземплярБюджета - экземпляр бюджета.
//  ОформлятьРезультат - Булево - Истина, если выполняется дополнительная обработка дерева, разбивка 
//								  на периоды и т.д, для вывода в форму бюджетной задачи,
//								  ложь - Более быстрый способ, без дополнительных обработок дерева.
//
// Возвращаемое значение:
//  ДеревоЗначений - Дерево настроек действий для ввода "Экземпляров бюджетов" и 
// 					 существующие документы по бюджетной задаче.
//
Функция ПараметрыВводаБюджетовПоНастройкамДействия(Знач ТаблицаДействий,
                                                   НачалоПериода,
                                                   КонецПериода,
                                                   ПериодичностьЭтапа,
                                                   СписокДокументов=Неопределено,
                                                   ОформлятьРезультат = Истина) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ВсеДокументы = Ложь;
	Если СписокДокументов = Неопределено Тогда
		ВсеДокументы = Истина;
		СписокДокументов = Новый Массив();
	КонецЕсли;
	
	График = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	ВерныеНастройкиДействия = Истина;
	Если ТипЗнч(ТаблицаДействий) = Тип("ТаблицаЗначений") Тогда
		ВидыБюджетовПоиск = ТаблицаДействий.НайтиСтроки(Новый Структура("Имя", "ВидыБюджетов"));
	Иначе
		ВидыБюджетовПоиск = Новый Массив();
	КонецЕсли;
	Если ВидыБюджетовПоиск.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Неверные настройки действия.';
				|en = 'Incorrect action settings.'"));
		ВерныеНастройкиДействия = Ложь;
	КонецЕсли;
	Если ВерныеНастройкиДействия Тогда
		АналитикаЗаполненияБюджетаПоиск = ТаблицаДействий.НайтиСтроки(Новый Структура("Имя", "АналитикаЗаполненияБюджета"));
		Если АналитикаЗаполненияБюджетаПоиск.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Неверные настройки действия.';
					|en = 'Incorrect action settings.'"));
			ВерныеНастройкиДействия = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВерныеНастройкиДействия Тогда
		ВидыБюджетов = ВидыБюджетовПоиск[0].Значение.Скопировать();
		АналитикаЗаполненияБюджета = АналитикаЗаполненияБюджетаПоиск[0].Значение.Скопировать();
	Иначе
		ВидыБюджетов = Новый ТаблицаЗначений;
		ВидыБюджетов.Колонки.Добавить("ВидБюджета", Новый ОписаниеТипов("СправочникСсылка.ВидыБюджетов"));
		ВидыБюджетов.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ВидыБюджетов.Колонки.Добавить("КлючСтрокиНастройкиАналитики", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ВидыБюджетов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ВидыБюджетов.Колонки.Добавить("ПредставлениеИзмерений", Новый ОписаниеТипов("Строка"));
		
		АналитикаЗаполненияБюджета = Новый ТаблицаЗначений;
		АналитикаЗаполненияБюджета.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьОрганизация" ,Новый ОписаниеТипов("Булево"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьПодразделение", Новый ОписаниеТипов("Булево"));
		АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьСценарий", Новый ОписаниеТипов("Булево"));
		
		ТипАналитик = Метаданные.Документы.ЭкземплярБюджета.Реквизиты.Аналитика1.Тип;
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			АналитикаЗаполненияБюджета.Колонки.Добавить("Аналитика" + НомерАналитики, ТипАналитик);
			АналитикаЗаполненияБюджета.Колонки.Добавить("ДоступностьАналитика" + НомерАналитики,
				Новый ОписаниеТипов("Булево"));
		КонецЦикла;
	КонецЕсли;
	
	КС = Новый КвалификаторыСтроки(36);
	КлючСвязиТип = Новый ОписаниеТипов("Строка",,,,КС);
	ВидыБюджетов.Колонки.Добавить("КлючСвязи",КлючСвязиТип);
	Для Каждого Стр Из ВидыБюджетов Цикл
		Стр.КлючСвязи = Строка(Стр.КлючСтрокиНастройкиАналитики);
	КонецЦикла;
	
	АналитикаЗаполненияБюджета.Колонки.Добавить("КлючСвязи",КлючСвязиТип);
	Для Каждого Стр Из АналитикаЗаполненияБюджета Цикл
		Стр.КлючСвязи = Строка(Стр.КлючСтроки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	ТекстыЗапроса = Новый Массив;
	ТекстРазделителя = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Помещаем таблицу видов бюджета, дополняем ее данными реквизитов, влияющих на определение периода экземпляров бюджета.
	ТекстЗапроса = 
	"ВЫБРАТЬ
		|	ВидыБюджетов.ВидБюджета КАК ВидБюджета,
		|	ВидыБюджетов.КлючСвязи КАК КлючСвязи,
		|	ВидыБюджетов.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВидыБюджетов
		|ИЗ
		|	&ВидыБюджетов КАК ВидыБюджетов
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидБюджета
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаВидыБюджетов.ВидБюджета КАК ВидБюджета,
		|	ТаблицаВидыБюджетов.КлючСвязи КАК КлючСвязи,
		|	ТаблицаВидыБюджетов.НомерСтроки КАК НомерСтроки,
		|	СправочникВидыБюджетов.Периодичность КАК Периодичность,
		|	СправочникВидыБюджетов.СпособПланирования КАК СпособПланирования,
		|	СправочникВидыБюджетов.КоличествоПериодовСкользящегоБюджета КАК КоличествоПериодовСкользящегоБюджета
		|ПОМЕСТИТЬ ПараметрыВидовБюджетов
		|ИЗ
		|	ВидыБюджетов КАК ТаблицаВидыБюджетов
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ВидыБюджетов КАК СправочникВидыБюджетов
		|ПО
		|	ТаблицаВидыБюджетов.ВидБюджета = СправочникВидыБюджетов.Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АналитикиЗаполненияБюджетов.Организация КАК Организация,
		|	АналитикиЗаполненияБюджетов.Подразделение КАК Подразделение,
		|	&ТекстВыборкаАналитик,
		|	АналитикиЗаполненияБюджетов.Сценарий КАК Сценарий,
		|	АналитикиЗаполненияБюджетов.КлючСвязи КАК КлючСвязи,
		|	АналитикиЗаполненияБюджетов.ДоступностьОрганизация КАК ДоступностьОрганизация,
		|	АналитикиЗаполненияБюджетов.ДоступностьПодразделение КАК ДоступностьПодразделение,
		|	&ТекстВыборкаДоступностьАналитик,
		|	АналитикиЗаполненияБюджетов.ДоступностьСценарий КАК ДоступностьСценарий
		|ПОМЕСТИТЬ АналитикиБюджетов
		|ИЗ
		|	&АналитикиЗаполненияБюджетов КАК АналитикиЗаполненияБюджетов";
		
	ТекстВыборкаАналитик = "";
	ТекстВыборкаДоступностьАналитик = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстВыборкаАналитик = ТекстВыборкаАналитик + ?(ТекстВыборкаАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"АналитикиЗаполненияБюджетов.Аналитика%1 КАК Аналитика%1",
				НомерАналитики);
		
		ТекстВыборкаДоступностьАналитик = ТекстВыборкаДоступностьАналитик
			+ ?(ТекстВыборкаДоступностьАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"АналитикиЗаполненияБюджетов.ДоступностьАналитика%1 КАК ДоступностьАналитика%1",
				НомерАналитики);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкаАналитик", ТекстВыборкаАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкаДоступностьАналитик", ТекстВыборкаДоступностьАналитик);
	
		
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Определяем границы периода для документа Экземпляр бюджета в зависимости от настроек вида бюджета.
	// Подробнее см. метод ВидыБюджетов.ВыровнятьДатыПоПериодичностиБюджета
	ТекстЗапроса =
	"ВЫБРАТЬ
		|	ПараметрыВидовБюджетов.ВидБюджета КАК ВидБюджета,
		|	ВЫБОР
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕКАДА)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ГОД)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
		|	КОНЕЦ КАК НачалоПериода,
		|	ПараметрыВидовБюджетов.Периодичность КАК Периодичность,
		|	ВЫБОР
		|		КОГДА ПараметрыВидовБюджетов.СпособПланирования = ЗНАЧЕНИЕ(Перечисление.СпособыСоставленияБюджетов.Скользящий)
		|			ТОГДА ВЫБОР
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), НЕДЕЛЯ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ДЕКАДА, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), ДЕКАДА)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), МЕСЯЦ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), КВАРТАЛ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), ПОЛУГОДИЕ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ГОД, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), ГОД)
		|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ДЕНЬ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), ДЕНЬ)
		|			КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕКАДА)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ГОД)
		|				ИНАЧЕ КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
		|			КОНЕЦ
		|	КОНЕЦ КАК КонецПериода
		|ПОМЕСТИТЬ ТабПериодов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ПараметрыВидовБюджетов КАК ПараметрыВидовБюджетов
		|ПО
		|	КалендарныеГрафики.Календарь = &ГрафикРаботы
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ПараметрыВидовБюджетов.ВидБюджета,
		|	ВЫБОР
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕКАДА)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ)
		|		КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ГОД)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
		|	КОНЕЦ,
		|	ПараметрыВидовБюджетов.Периодичность,
		|	ВЫБОР
		|		КОГДА ПараметрыВидовБюджетов.СпособПланирования = ЗНАЧЕНИЕ(Перечисление.СпособыСоставленияБюджетов.Скользящий)
		|			ТОГДА ВЫБОР
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), НЕДЕЛЯ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ДЕКАДА, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), ДЕКАДА)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), МЕСЯЦ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), КВАРТАЛ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), ПОЛУГОДИЕ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|					ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ГОД, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), ГОД)
		|				ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ДЕНЬ, ПараметрыВидовБюджетов.КоличествоПериодовСкользящегоБюджета - 1), ДЕНЬ)
		|			КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕКАДА)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, КВАРТАЛ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ПОЛУГОДИЕ)
		|				КОГДА ПараметрыВидовБюджетов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|					ТОГДА КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ГОД)
		|				ИНАЧЕ КОНЕЦПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
		|			КОНЕЦ
		|	КОНЕЦ";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
		|	МАКСИМУМ(ЭкземплярБюджета.Ссылка) КАК Ссылка,
		|	&ТекстСписокДокументовВыборкаАналитики,
		|	ЭкземплярБюджета.ВидБюджета КАК ВидБюджета,
		|	ЭкземплярБюджета.Сценарий КАК Сценарий,
		|	ЭкземплярБюджета.Организация КАК Организация,
		|	ЭкземплярБюджета.Подразделение КАК Подразделение,
		|	ЭкземплярБюджета.НачалоПериода КАК НачалоПериода,
		|	ЭкземплярБюджета.ОкончаниеПериода КАК ОкончаниеПериода,
		|	ЭкземплярБюджета.ВидБюджета.Периодичность КАК Периодичность,
		|	ВЫРАЗИТЬ(ЭкземплярБюджета.Комментарий КАК СТРОКА(250)) КАК Комментарий
		|ПОМЕСТИТЬ СписокДокументов
		|ИЗ
		|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ТабПериодов КАК ТабПериодов
		|ПО
		|	&ВсеДокументы
		|	И ЭкземплярБюджета.ВидБюджета = ТабПериодов.ВидБюджета
		|	И ЭкземплярБюджета.НачалоПериода = ТабПериодов.НачалоПериода
		|	И ЭкземплярБюджета.ОкончаниеПериода = ТабПериодов.КонецПериода
		|	И НЕ ЭкземплярБюджета.Ссылка В (&СписокДокументов)
		|	И НЕ ЭкземплярБюджета.ПометкаУдаления
		|	И (ЭкземплярБюджета.Организация, ЭкземплярБюджета.Подразделение, ЭкземплярБюджета.Сценарий) В
		|			(ВЫБРАТЬ
		|				А.Организация,
		|				А.Подразделение,
		|				А.Сценарий
		|			ИЗ
		|				АналитикиБюджетов КАК А)
		|
		|СГРУППИРОВАТЬ ПО
		|	&ТекстСписокДокументовГруппировкаАналитики,
		|	ЭкземплярБюджета.ВидБюджета,
		|	ЭкземплярБюджета.Сценарий,
		|	ЭкземплярБюджета.Организация,
		|	ЭкземплярБюджета.Подразделение,
		|	ЭкземплярБюджета.НачалоПериода,
		|	ЭкземплярБюджета.ОкончаниеПериода,
		|	ЭкземплярБюджета.ВидБюджета.Периодичность,
		|	ВЫРАЗИТЬ(ЭкземплярБюджета.Комментарий КАК СТРОКА(250))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭкземплярБюджета.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьОрганизация, ЛОЖЬ)) КАК ДоступностьОрганизация,
		|	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьПодразделение, ЛОЖЬ)) КАК ДоступностьПодразделение,
		|	&ТекстДоступностьАналитикЭБВыборкаДоступностьАналитик,
		|	ЕСТЬNULL(АналитикиБюджетов.ДоступностьСценарий, ЛОЖЬ) КАК ДоступностьСценарий,
		|	МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.КлючСвязи, """")) КАК КлючСвязи
		|ПОМЕСТИТЬ ДоступностьАналитикЭБ
		|ИЗ
		|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыВидовБюджетов КАК ПараметрыВидовБюджетов
		|		ПО ЭкземплярБюджета.ВидБюджета = ПараметрыВидовБюджетов.ВидБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиБюджетов КАК АналитикиБюджетов
		|		ПО (ПараметрыВидовБюджетов.КлючСвязи = АналитикиБюджетов.КлючСвязи)
		|			И (АналитикиБюджетов.ДоступностьОрганизация
		|				ИЛИ ЭкземплярБюджета.Организация = АналитикиБюджетов.Организация)
		|			И (АналитикиБюджетов.ДоступностьПодразделение
		|				ИЛИ ЭкземплярБюджета.Подразделение = АналитикиБюджетов.Подразделение)
		|			И (АналитикиБюджетов.ДоступностьСценарий
		|				ИЛИ ЭкземплярБюджета.Сценарий = АналитикиБюджетов.Сценарий)
		|			И &ТекстДоступностьАналитикЭБСоединениеАналитик
		|ГДЕ
		|	ЭкземплярБюджета.Ссылка В(&СписокДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭкземплярБюджета.Ссылка,
		|	ЕСТЬNULL(АналитикиБюджетов.ДоступностьСценарий, ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭкземплярБюджета.ВидБюджета КАК ВидБюджета,
		|	ЭкземплярБюджета.Организация КАК Организация,
		|	ЭкземплярБюджета.Подразделение КАК Подразделение,
		|	ЭкземплярБюджета.Сценарий КАК Сценарий,
		|	ЭкземплярБюджета.НачалоПериода КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ЭкземплярБюджета.ОкончаниеПериода, ДЕНЬ) КАК КонецПериода,
		|	СУММА(1) КАК КоличествоДокументов,
		|	&ТекстДокументыПоЗадачеВыборкаАналитик
		|ПОМЕСТИТЬ ДокументыПоЗадаче
		|ИЗ
		|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
		|ГДЕ
		|	ЭкземплярБюджета.Ссылка В(&СписокДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭкземплярБюджета.Подразделение,
		|	ЭкземплярБюджета.ВидБюджета,
		|	ЭкземплярБюджета.Организация,
		|	ЭкземплярБюджета.Сценарий,
		|	ЭкземплярБюджета.НачалоПериода,
		|	КОНЕЦПЕРИОДА(ЭкземплярБюджета.ОкончаниеПериода, ДЕНЬ),
		|	&ТекстДокументыПоЗадачеГруппировкаАналитик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабВидыБюджетов.ВидБюджета КАК ВидБюджета,
		|	ТабВидыБюджетов.Периодичность КАК ПериодичностьБюджета,
		|	АналитикиБюджетов.Организация КАК Организация,
		|	АналитикиБюджетов.Подразделение КАК Подразделение,
		|	&ТекстВыборка1Аналитик,
		|	АналитикиБюджетов.Сценарий КАК Сценарий,
		|	ТабПериодов.НачалоПериода КАК НачалоПериода,
		|	СписокДокументов.Ссылка КАК Документ,
		|	ТабПериодов.КонецПериода КАК КонецПериода,
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(СписокДокументов.Ссылка, &КомандаСоздать)) КАК ДокументПредставление,
		|	"""" КАК Комментарий,
		|	ЕСТЬNULL(СписокДокументов.Ссылка.Номер, """") КАК ДокументНомер,
		|	ЕСТЬNULL(СписокДокументов.Ссылка.Дата, """") КАК ДокументДата,
		|	ТабВидыБюджетов.НомерСтроки КАК НомерСтрокиВидаБюджета,
		|	АналитикиБюджетов.ДоступностьОрганизация КАК ДоступностьОрганизация,
		|	АналитикиБюджетов.ДоступностьПодразделение КАК ДоступностьПодразделение,
		|	&ТекстВыборка1ДоступностьАналитик,
		|	АналитикиБюджетов.ДоступностьСценарий КАК ДоступностьСценарий
		|ИЗ
		|	ПараметрыВидовБюджетов КАК ТабВидыБюджетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиБюджетов КАК АналитикиБюджетов
		|		ПО ТабВидыБюджетов.КлючСвязи = АналитикиБюджетов.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПериодов КАК ТабПериодов
		|		ПО ТабПериодов.ВидБюджета = ТабВидыБюджетов.ВидБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокДокументов КАК СписокДокументов
		|		ПО (АналитикиБюджетов.Организация = СписокДокументов.Организация)
		|			И (АналитикиБюджетов.Подразделение = СписокДокументов.Подразделение)
		|			И (АналитикиБюджетов.Сценарий = СписокДокументов.Сценарий)
		|			И &ТекстВыборка1СоединениеСписокДокументовАналитики
		|			И ТабВидыБюджетов.ВидБюджета = СписокДокументов.ВидБюджета
		|			И (ТабПериодов.НачалоПериода = СписокДокументов.НачалоПериода)
		|			И (ТабПериодов.КонецПериода = КОНЕЦПЕРИОДА(СписокДокументов.ОкончаниеПериода, ДЕНЬ))
		|			И (ТабПериодов.Периодичность = СписокДокументов.Периодичность)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПоЗадаче КАК ДокументыПоЗадаче
		|		ПО ТабВидыБюджетов.ВидБюджета = ДокументыПоЗадаче.ВидБюджета
		|			И (АналитикиБюджетов.Организация = ДокументыПоЗадаче.Организация)
		|			И (АналитикиБюджетов.Подразделение = ДокументыПоЗадаче.Подразделение)
		|			И (АналитикиБюджетов.Сценарий = ДокументыПоЗадаче.Сценарий)
		|			И (ТабПериодов.НачалоПериода = ДокументыПоЗадаче.НачалоПериода)
		|			И (ТабПериодов.КонецПериода = ДокументыПоЗадаче.КонецПериода)
		|			И &ТекстВыборка1СоединениеДокументыПоЗадачеАналитики
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(ДокументыПоЗадаче.КоличествоДокументов, 0) > 0
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НЕ ТабПериодов.НачалоПериода ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭкземплярБюджета.ВидБюджета,
		|	ЭкземплярБюджета.ВидБюджета.Периодичность,
		|	ЭкземплярБюджета.Организация,
		|	ЭкземплярБюджета.Подразделение,
		|	&ТекстВыборка2Аналитик,
		|	ЭкземплярБюджета.Сценарий,
		|	ЭкземплярБюджета.НачалоПериода,
		|	ЭкземплярБюджета.Ссылка,
		|	ЭкземплярБюджета.ОкончаниеПериода,
		|	ПРЕДСТАВЛЕНИЕ(ЭкземплярБюджета.Ссылка),
		|	ЭкземплярБюджета.Комментарий,
		|	ЭкземплярБюджета.Номер,
		|	ЭкземплярБюджета.Дата,
		|	ЕСТЬNULL(ВидыБюджетов.НомерСтроки, 999999),
		|	ДоступностьАналитикЭБ.ДоступностьОрганизация,
		|	ДоступностьАналитикЭБ.ДоступностьПодразделение,
		|	&ТекстВыборка2ДоступностьАналитик,
		|	ДоступностьАналитикЭБ.ДоступностьСценарий
		|ИЗ
		|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступностьАналитикЭБ КАК ДоступностьАналитикЭБ
		|		ПО ЭкземплярБюджета.Ссылка = ДоступностьАналитикЭБ.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыВидовБюджетов КАК ВидыБюджетов
		|		ПО ДоступностьАналитикЭБ.КлючСвязи = ВидыБюджетов.КлючСвязи
		|		И ЭкземплярБюджета.ВидБюджета = ВидыБюджетов.ВидБюджета
		|ГДЕ
		|	ЭкземплярБюджета.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиВидаБюджета,
		|	НачалоПериода,
		|	ДокументНомер
		|ИТОГИ 
		|	МАКСИМУМ(ПериодичностьБюджета) КАК ПериодичностьБюджета
		|ПО
		|	ВидБюджета,
		|	НачалоПериода";
	
	ТекстСписокДокументовВыборкаАналитики = "";
	ТекстСписокДокументовГруппировкаАналитики = "";
	ТекстДоступностьАналитикЭБВыборкаДоступностьАналитик = "";
	ТекстДоступностьАналитикЭБСоединениеАналитик = "";
	ТекстДокументыПоЗадачеВыборкаАналитик = "";
	ТекстДокументыПоЗадачеГруппировкаАналитик = "";
	ТекстВыборка1Аналитик = "";
	ТекстВыборка1ДоступностьАналитик = "";
	ТекстВыборка1СоединениеСписокДокументовАналитики = "";
	ТекстВыборка1СоединениеДокументыПоЗадачеАналитики = "";
	ТекстВыборка2Аналитик = "";
	ТекстВыборка2ДоступностьАналитик = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстСписокДокументовВыборкаАналитики = ТекстСписокДокументовВыборкаАналитики
			+ ?(ТекстСписокДокументовВыборкаАналитики = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЭкземплярБюджета.Аналитика%1 КАК Аналитика%1",
				НомерАналитики);
		
		ТекстСписокДокументовГруппировкаАналитики = ТекстСписокДокументовГруппировкаАналитики
			+ ?(ТекстСписокДокументовГруппировкаАналитики = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЭкземплярБюджета.Аналитика%1",
				НомерАналитики);
		
		ТекстДоступностьАналитикЭБВыборкаДоступностьАналитик = ТекстДоступностьАналитикЭБВыборкаДоступностьАналитик
			+ ?(ТекстДоступностьАналитикЭБВыборкаДоступностьАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"МАКСИМУМ(ЕСТЬNULL(АналитикиБюджетов.ДоступностьАналитика%1, ЛОЖЬ)) КАК ДоступностьАналитика%1",
				НомерАналитики);
		
		ТекстДоступностьАналитикЭБСоединениеАналитик = ТекстДоступностьАналитикЭБСоединениеАналитик
			+ ?(ТекстДоступностьАналитикЭБСоединениеАналитик = "", "",
					Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + "И ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(АналитикиБюджетов.ДоступностьАналитика%1
				|				ИЛИ ЭкземплярБюджета.Аналитика%1 = АналитикиБюджетов.Аналитика%1)",
				НомерАналитики);
		
		ТекстДокументыПоЗадачеВыборкаАналитик = ТекстДокументыПоЗадачеВыборкаАналитик
			+ ?(ТекстДокументыПоЗадачеВыборкаАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЭкземплярБюджета.Аналитика%1 КАК Аналитика%1",
				НомерАналитики);
		
		ТекстДокументыПоЗадачеГруппировкаАналитик = ТекстДокументыПоЗадачеГруппировкаАналитик
			+ ?(ТекстДокументыПоЗадачеГруппировкаАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЭкземплярБюджета.Аналитика%1",
				НомерАналитики);
		
		ТекстВыборка1Аналитик = ТекстВыборка1Аналитик
			+ ?(ТекстВыборка1Аналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"АналитикиБюджетов.Аналитика%1 КАК Аналитика%1",
				НомерАналитики);
		
		ТекстВыборка1ДоступностьАналитик = ТекстВыборка1ДоступностьАналитик
			+ ?(ТекстВыборка1ДоступностьАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"АналитикиБюджетов.ДоступностьАналитика%1 КАК ДоступностьАналитика%1",
				НомерАналитики);
		
		ТекстВыборка1СоединениеСписокДокументовАналитики = ТекстВыборка1СоединениеСписокДокументовАналитики
			+ ?(ТекстВыборка1СоединениеСписокДокументовАналитики = "", "",
					Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + "И ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(АналитикиБюджетов.Аналитика%1 = СписокДокументов.Аналитика%1)",
				НомерАналитики);
		
		ТекстВыборка1СоединениеДокументыПоЗадачеАналитики = ТекстВыборка1СоединениеДокументыПоЗадачеАналитики
			+ ?(ТекстВыборка1СоединениеДокументыПоЗадачеАналитики = "", "",
					Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + "И ")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(АналитикиБюджетов.Аналитика%1 = ДокументыПоЗадаче.Аналитика%1)",
				НомерАналитики);
		
		ТекстВыборка2Аналитик = ТекстВыборка2Аналитик
			+ ?(ТекстВыборка2Аналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЭкземплярБюджета.Аналитика%1",
				НомерАналитики);
		
		ТекстВыборка2ДоступностьАналитик = ТекстВыборка2ДоступностьАналитик
			+ ?(ТекстВыборка2ДоступностьАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ДоступностьАналитикЭБ.ДоступностьАналитика%1",
				НомерАналитики);
		
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСписокДокументовВыборкаАналитики",
		ТекстСписокДокументовВыборкаАналитики);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСписокДокументовГруппировкаАналитики",
		ТекстСписокДокументовГруппировкаАналитики);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДоступностьАналитикЭБВыборкаДоступностьАналитик",
		ТекстДоступностьАналитикЭБВыборкаДоступностьАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДоступностьАналитикЭБСоединениеАналитик",
		ТекстДоступностьАналитикЭБСоединениеАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДокументыПоЗадачеВыборкаАналитик",
		ТекстДокументыПоЗадачеВыборкаАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДокументыПоЗадачеГруппировкаАналитик",
		ТекстДокументыПоЗадачеГруппировкаАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборка1Аналитик", ТекстВыборка1Аналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборка1ДоступностьАналитик", ТекстВыборка1ДоступностьАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборка1СоединениеСписокДокументовАналитики",
		ТекстВыборка1СоединениеСписокДокументовАналитики);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборка1СоединениеДокументыПоЗадачеАналитики",
		ТекстВыборка1СоединениеДокументыПоЗадачеАналитики);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборка2Аналитик", ТекстВыборка2Аналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборка2ДоступностьАналитик", ТекстВыборка2ДоступностьАналитик);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ТекстРазделителя);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВидыБюджетов", ВидыБюджетов);
	Запрос.УстановитьПараметр("МассивВидовБюджетов", ВидыБюджетов.ВыгрузитьКолонку("ВидБюджета"));
	Запрос.УстановитьПараметр("АналитикиЗаполненияБюджетов",  АналитикаЗаполненияБюджета);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ГрафикРаботы", График);
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ВсеДокументы", ВсеДокументы);
	Запрос.УстановитьПараметр("КомандаСоздать", НСтр("ru = 'Создать';
													|en = 'Create'"));
	
	РезультатыВыполнения = Запрос.ВыполнитьПакет();
	КоличествоЗаписейПараметровВидовБюджетов = РезультатыВыполнения[1].Выгрузить()[0].Количество;
	КоличествоЗаписейКалендарныхГрафиков = РезультатыВыполнения[3].Выгрузить()[0].Количество;
	Если ВерныеНастройкиДействия
		И КоличествоЗаписейПараметровВидовБюджетов = 0 Тогда
		ВерныеНастройкиДействия = Ложь;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Неверные настройки действия.';
				|en = 'Incorrect action settings.'"));
		
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстСообщения   = НСтр("ru = 'Неверные настройки действия. Создание задачи не возможно';
								|en = 'Invalid action settings. Unable to create the task'");
		ТекстСообщенияЖР = НСтр("ru = 'Неверные настройки действия. Создание задачи не возможно';
								|en = 'Invalid action settings. Unable to create the task'", КодЯзыка);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание бюджетных задач';
				|en = 'Create budget tasks'", КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Задачи.БюджетнаяЗадача,,
			ТекстСообщенияЖР);
			
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ВерныеНастройкиДействия И КоличествоЗаписейКалендарныхГрафиков = 0 Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Календарный график %1 не запланирован за период с %2 по %3. Создание задач не возможно';
				|en = 'Calendar schedule %1 is not planned from %2 to %3. Cannot create tasks'"),
			График,
			Формат(НачалоПериода, "ДЛФ=D"),
			Формат(КонецПериода, "ДЛФ=D"));
		ТекстСообщенияЖР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Календарный график %1 не запланирован за период с %2 по %3. Создание задач не возможно';
				|en = 'Calendar schedule %1 is not planned from %2 to %3. Cannot create tasks'", КодЯзыка),
			График,
			Формат(НачалоПериода, "ДЛФ=D"),
			Формат(КонецПериода, "ДЛФ=D"));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание бюджетных задач';
				|en = 'Create budget tasks'", КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Задачи.БюджетнаяЗадача,,
			ТекстСообщенияЖР);
			
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Результат = РезультатыВыполнения[РезультатыВыполнения.Количество()-1].Выгрузить(
				ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); // ДеревоЗначений
	
	Если Не ОформлятьРезультат Тогда
		Возврат Результат;
	КонецЕсли;
		
	ДеревоВводаБюджетов = Результат.Скопировать();
	ДеревоВводаБюджетов.Строки.Очистить();
	ДеревоВводаБюджетов.Колонки.Добавить("ВидБюджетаАналитика",Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаВидБюджета Из Результат.Строки Цикл
		ПериодичностьБюджета = СтрокаВидБюджета.ПериодичностьБюджета;
		ЭлементыДерева = ДеревоВводаБюджетов.Строки;
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.ВидБюджетаАналитика = Строка(СтрокаВидБюджета.ВидБюджета);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВидБюджета);
		СтрокиПериод = СтрокаВидБюджета.Строки;
		
		Если Не ЗначениеЗаполнено(ПериодичностьБюджета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если  Не Перечисления.Периодичность.Индекс(ПериодичностьБюджета) < Перечисления.Периодичность.Индекс(ПериодичностьЭтапа) Тогда
			СтрокиАналитика = СтрокиПериод[0].Строки; 
			Если  СтрокиАналитика.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокиАналитика[0]);
				Если ЗначениеЗаполнено(НоваяСтрока.Документ) Тогда
					НоваяСтрока.ДокументПредставление = НоваяСтрока.ДокументНомер + " " + НоваяСтрока.ДокументДата;
				КонецЕсли;
			Иначе
				Для Каждого СтрокаАналитика Из СтрокиАналитика Цикл
					СтрокаБюджета = НоваяСтрока.Строки.Добавить();
					СтрокаБюджета.ВидБюджетаАналитика = ПредставлениеАналитикСтрокиДереваДокументов(СтрокаАналитика);
					ЗаполнитьЗначенияСвойств(СтрокаБюджета,СтрокаАналитика);
					Если ЗначениеЗаполнено(СтрокаБюджета.Документ) Тогда
						СтрокаБюджета.ДокументПредставление = СтрокаБюджета.ДокументНомер + " " + СтрокаБюджета.ДокументДата;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаПериод Из СтрокиПериод Цикл
				СтрокаБюджета = НоваяСтрока.Строки.Добавить();
				СтрокаБюджета.ВидБюджетаАналитика = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(СтрокаПериод.НачалоПериода, ПериодичностьБюджета);
				ЗаполнитьЗначенияСвойств(СтрокаБюджета,СтрокаПериод);
				Если СтрокаПериод.Строки.Количество() = 1 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаБюджета,СтрокаПериод.Строки[0]);
					Если ЗначениеЗаполнено(СтрокаБюджета.Документ) Тогда
						СтрокаБюджета.ДокументПредставление = СтрокаБюджета.ДокументНомер + " " + СтрокаБюджета.ДокументДата;
					КонецЕсли;
				Иначе
					Для Каждого СтрокаАналитика Из СтрокаПериод.Строки Цикл
						СтрокаБюджета1 = СтрокаБюджета.Строки.Добавить();
						СтрокаБюджета1.ВидБюджетаАналитика = ПредставлениеАналитикСтрокиДереваДокументов(СтрокаАналитика);
						ЗаполнитьЗначенияСвойств(СтрокаБюджета1,СтрокаАналитика);
						Если ЗначениеЗаполнено(СтрокаБюджета1.Документ) Тогда
							СтрокаБюджета1.ДокументПредставление = СтрокаБюджета1.ДокументНомер + " " + СтрокаБюджета1.ДокументДата;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоВводаБюджетов;
	
КонецФункции

// Создает документы "ЭкземплярБюджета" в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа:
//   * Период - Дата -
//   * МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - 
//   * ЭтапПодготовкиБюджетов - СправочникСсылка.ЭтапыПодготовкиБюджетов - 
//  НастройкаДействия        - ТаблицаЗначений, ДеревоЗначений - настройки создания документов.
//  Проводить - Булево -
//  НеПроверятьСуществующиеДокументы - Булево -
//
// Возвращаемое значение:
//  Массив Из ДокументСсылка.ЭкземплярБюджета -
Функция СформироватьБюджетыПоНастройкамДействия(ПараметрыНовогодокумента, Знач НастройкаДействия, Проводить = Ложь, НеПроверятьСуществующиеДокументы = Ложь) Экспорт
	
	ОбщийМассивДокументов = Новый Массив();
	
	Если ТипЗнч(НастройкаДействия) = Тип("ДеревоЗначений") Тогда
		ДеревоВводаБюджетов = НастройкаДействия;
	Иначе
		ПериодДокумента = ПараметрыНовогоДокумента.Период;
		Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
			ПериодДокумента = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Реквизиты = Новый Структура("Периодичность", "Родитель.Периодичность");
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов, Реквизиты);
		Периодичность = Реквизиты.Периодичность;
		
		НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
		КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
		
		ДеревоВводаБюджетов = ПараметрыВводаБюджетовПоНастройкамДействия(НастройкаДействия,
		                                                                 НачалоПериода,
		                                                                 КонецПериода,
		                                                                 Периодичность);
	КонецЕсли;
	
	Если ДеревоВводаБюджетов = Неопределено Тогда
		Возврат  ОбщийМассивДокументов;
	КонецЕсли;
	
	ВсегоОбрабатываемыхСтрок = КоличествоОбрабатываемыхСтрокДереваБюджета(ДеревоВводаБюджетов);
	
	СтрокиВидБюджета = ДеревоВводаБюджетов.Строки;
	
	ОбработаноСтрок = 0;
	Для Каждого СтрокаВидБюджета Из СтрокиВидБюджета Цикл 
		
		Если СтрокаВидБюджета.Строки.Количество() > 0 Тогда
			СтрокиАналитикиПериода = СтрокаВидБюджета.Строки;
			Для Каждого СтрокаАналитикиПериода Из СтрокиАналитикиПериода Цикл
				Если СтрокаАналитикиПериода.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаАналитикиПериода1 Из СтрокаАналитикиПериода.Строки Цикл
						Если ЗначениеЗаполнено(СтрокаАналитикиПериода1.Документ) Тогда 
							ОбщийМассивДокументов.Добавить(СтрокаАналитикиПериода1.Документ);
							Продолжить; 
						КонецЕсли;
						МассивДокументы = СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, 
							ПараметрыСтрокиДействия(СтрокаАналитикиПериода1,ДеревоВводаБюджетов.Колонки), Истина, НеПроверятьСуществующиеДокументы);
						Если МассивДокументы <> Неопределено Тогда
							ОбщийМассивДокументов.Добавить(МассивДокументы[МассивДокументы.Количество() - 1]);
						КонецЕсли;
						ОбработаноСтрок = ОбработаноСтрок + 1;
						ПроцентВыполнения = ОбработаноСтрок / ВсегоОбрабатываемыхСтрок * 100; 
						ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
					КонецЦикла;
				Иначе
					Если ЗначениеЗаполнено(СтрокаАналитикиПериода.Документ) Тогда
						ОбщийМассивДокументов.Добавить(СтрокаАналитикиПериода.Документ);
						Продолжить; 
					КонецЕсли;
					МассивДокументы = СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, 
							ПараметрыСтрокиДействия(СтрокаАналитикиПериода,ДеревоВводаБюджетов.Колонки), Истина, НеПроверятьСуществующиеДокументы);
					Если МассивДокументы <> Неопределено Тогда
						ОбщийМассивДокументов.Добавить(МассивДокументы[МассивДокументы.Количество() - 1]);
					КонецЕсли;
					ОбработаноСтрок = ОбработаноСтрок + 1;
					ПроцентВыполнения = ОбработаноСтрок / ВсегоОбрабатываемыхСтрок * 100; 
					ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ЗначениеЗаполнено(СтрокаВидБюджета.Документ) Тогда 
				ОбщийМассивДокументов.Добавить(СтрокаВидБюджета.Документ);
				Продолжить; 
			КонецЕсли;
			МассивДокументы = СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента,
			                                          ПараметрыСтрокиДействия(СтрокаВидБюджета,ДеревоВводаБюджетов.Колонки),
			                                          Истина,
			                                          НеПроверятьСуществующиеДокументы);
			
			Если МассивДокументы <> Неопределено Тогда
				ОбщийМассивДокументов.Добавить(МассивДокументы[МассивДокументы.Количество() - 1]);
			КонецЕсли;
			ОбработаноСтрок = ОбработаноСтрок + 1;
			ПроцентВыполнения = ОбработаноСтрок / ВсегоОбрабатываемыхСтрок * 100; 
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
		КонецЕсли;
	
	КонецЦикла;
	
	ОбщийМассивДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбщийМассивДокументов);
	
	Возврат ОбщийМассивДокументов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Описание
// 
// Параметры:
// 	МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - 
// 	ПроцессПодготовкиБюджетов - Неопределено, ДокументСсылка.ПроцессПодготовкиБюджетов -
// 	СозданныеЗадачи - Неопределено, ТаблицаЗначений - Описание:
// * Модель - СправочникСсылка.МоделиБюджетирования -
// * Период - Дата -
// * Этап - СправочникСсылка.ЭтапыПодготовкиБюджетов -
// * Процесс - ДокументСсылка.ПроцессПодготовкиБюджетов -
// * Задача - ЗадачаСсылка.БюджетнаяЗадача -
Процедура СформироватьБюджетныеЗадачиПоМодели(МодельБюджетирования,
	                                          ПроцессПодготовкиБюджетов=Неопределено,
	                                          СозданныеЗадачи=Неопределено)
	
	ТаблицаЗадач = Справочники.МоделиБюджетирования.ПолучитьБюджетныеЗадачи(МодельБюджетирования, , ТекущаяДатаСеанса(), Истина, Истина);
	ТаблицаСвязейЗадач = Справочники.МоделиБюджетирования.СвязиЗадач(ТаблицаЗадач);
	
	Запрос = Новый Запрос();
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("ТаблицаЗадач", ТаблицаЗадач);
	Запрос.УстановитьПараметр("ТаблицаСвязейЗадач", ТаблицаСвязейЗадач);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ФормироватьЗадачиАвтоматически", 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "АвтоматическиФормироватьЗадачи"));
	Запрос.УстановитьПараметр("ПроцессПодготовкиБюджетов",ПроцессПодготовкиБюджетов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
		|	Табл.НомерЗадачи,
		|	Табл.ЭтапПодготовкиБюджетов,
		|	Табл.ЭтапПодготовкиБюджетовОснование,
		|	Табл.ПроцессПодготовкиБюджетов,
		|	Табл.Период,
		|	Табл.ЗадачаВыполнена,
		|	Табл.Задача,
		|	ВЫБОР
		|		КОГДА Табл.Задача <> ЗНАЧЕНИЕ(Задача.БюджетнаяЗадача.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗадачаСформирована,
		|	Табл.ДатаНачала,
		|	Табл.ДатаОкончанияФакт
		|ПОМЕСТИТЬ ТаблицаЗадач
		|ИЗ
		|	&ТаблицаЗадач КАК Табл
		|ГДЕ
		|	(&ФормироватьЗадачиАвтоматически = ИСТИНА
		|			ИЛИ Табл.ПроцессПодготовкиБюджетов <> ЗНАЧЕНИЕ(Документ.ПроцессПодготовкиБюджетов.ПустаяСсылка))
		|	И (&ПроцессПодготовкиБюджетов = НЕОПРЕДЕЛЕНО
		|			ИЛИ Табл.ПроцессПодготовкиБюджетов = &ПроцессПодготовкиБюджетов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Табл.Задача,
		|	Табл.ПредыдущаяЗадача
		|ПОМЕСТИТЬ ТаблицаСвязей
		|ИЗ
		|	&ТаблицаСвязейЗадач КАК Табл
		|ГДЕ
		|	Табл.ПредыдущаяЗадача <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
		|	ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование,
		|	ТаблицаЗадач.ПроцессПодготовкиБюджетов,
		|	МАКСИМУМ(ТаблицаЗадач.Период) КАК Период
		|ПОМЕСТИТЬ МаксимальныеПериодыВыполненныхЗадач
		|ИЗ
		|	ТаблицаЗадач КАК ТаблицаЗадач
		|ГДЕ
		|	ТаблицаЗадач.ЗадачаСформирована
		|	И ТаблицаЗадач.ЗадачаВыполнена
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
		|	ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование,
		|	ТаблицаЗадач.ПроцессПодготовкиБюджетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗадач.НомерЗадачи,
		|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
		|	ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование,
		|	ТаблицаЗадач.ПроцессПодготовкиБюджетов,
		|	ТаблицаЗадач.Период,
		|	ТаблицаЗадач.ЗадачаВыполнена,
		|	ТаблицаЗадач.Задача,
		|	ТаблицаЗадач.ЗадачаСформирована,
		|	ТаблицаЗадач.ДатаНачала
		|ПОМЕСТИТЬ ПериодыПоследующиеЗаВыполнением
		|ИЗ
		|	ТаблицаЗадач КАК ТаблицаЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПериодыВыполненныхЗадач КАК МаксимальныеПериодыВыполненныхЗадач
		|		ПО ТаблицаЗадач.ЭтапПодготовкиБюджетов = МаксимальныеПериодыВыполненныхЗадач.ЭтапПодготовкиБюджетов
		|			И ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование = МаксимальныеПериодыВыполненныхЗадач.ЭтапПодготовкиБюджетовОснование
		|			И ТаблицаЗадач.ПроцессПодготовкиБюджетов = МаксимальныеПериодыВыполненныхЗадач.ПроцессПодготовкиБюджетов
		|ГДЕ
		|	ТаблицаЗадач.Период > ЕСТЬNULL(МаксимальныеПериодыВыполненныхЗадач.Период, ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыПоследующиеЗаВыполнением.НомерЗадачи,
		|	ПериодыПоследующиеЗаВыполнением.Период,
		|	ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетов,
		|	ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетовОснование,
		|	ПериодыПоследующиеЗаВыполнением.ПроцессПодготовкиБюджетов
		|ПОМЕСТИТЬ ЗадачиКФормированию
		|ИЗ
		|	ПериодыПоследующиеЗаВыполнением КАК ПериодыПоследующиеЗаВыполнением
		|ГДЕ
		|	НЕ (ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетов, ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетовОснование, ПериодыПоследующиеЗаВыполнением.ПроцессПодготовкиБюджетов) В
		|				(ВЫБРАТЬ
		|					Фильтр.ЭтапПодготовкиБюджетов,
		|					Фильтр.ЭтапПодготовкиБюджетовОснование,
		|					Фильтр.ПроцессПодготовкиБюджетов
		|				ИЗ
		|					ПериодыПоследующиеЗаВыполнением КАК Фильтр
		|				ГДЕ
		|					Фильтр.ЗадачаСформирована)
		|	И НЕ (ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетов, ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетовОснование, ПериодыПоследующиеЗаВыполнением.ПроцессПодготовкиБюджетов) В
		|				(ВЫБРАТЬ
		|					Фильтр.ЭтапПодготовкиБюджетов,
		|					Фильтр.ЭтапПодготовкиБюджетовОснование,
		|					ЗНАЧЕНИЕ(Документ.ПроцессПодготовкиБюджетов.ПустаяСсылка)
		|				ИЗ
		|					ПериодыПоследующиеЗаВыполнением КАК Фильтр
		|				ГДЕ
		|					Фильтр.ЗадачаСформирована)
		|	И ПериодыПоследующиеЗаВыполнением.ДатаНачала <= &ТекущаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиКФормированию.ЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов,
		|	ЗадачиКФормированию.ЭтапПодготовкиБюджетовОснование,
		|	ЗадачиКФормированию.ПроцессПодготовкиБюджетов,
		|	МИНИМУМ(ЗадачиКФормированию.Период) КАК Период
		|ПОМЕСТИТЬ Фильтр
		|ИЗ
		|	ЗадачиКФормированию КАК ЗадачиКФормированию
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачиКФормированию.ЭтапПодготовкиБюджетов,
		|	ЗадачиКФормированию.ЭтапПодготовкиБюджетовОснование,
		|	ЗадачиКФормированию.ПроцессПодготовкиБюджетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиКФормированию.НомерЗадачи
		|ПОМЕСТИТЬ ЗадачиКФормированиюМинимальныйПериод
		|ИЗ
		|	ЗадачиКФормированию КАК ЗадачиКФормированию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		|		ПО ЗадачиКФормированию.ЭтапПодготовкиБюджетов = Фильтр.ЭтапПодготовкиБюджетов
		|			И ЗадачиКФормированию.ЭтапПодготовкиБюджетовОснование = Фильтр.ЭтапПодготовкиБюджетовОснование
		|			И ЗадачиКФормированию.ПроцессПодготовкиБюджетов = Фильтр.ПроцессПодготовкиБюджетов
		|			И ЗадачиКФормированию.Период = Фильтр.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиКФормированию.НомерЗадачи,
		|	ТаблицаСвязей.ПредыдущаяЗадача,
		|	ТаблицаЗадач.ДатаОкончанияФакт
		|ПОМЕСТИТЬ НомерПредыдущихЗадач
		|ИЗ
		|	ЗадачиКФормированиюМинимальныйПериод КАК ЗадачиКФормированию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвязей КАК ТаблицаСвязей
		|		ПО ЗадачиКФормированию.НомерЗадачи = ТаблицаСвязей.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
		|		ПО (ТаблицаСвязей.ПредыдущаяЗадача = ТаблицаЗадач.НомерЗадачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НомерПредыдущихЗадач.НомерЗадачи,
		|	МАКСИМУМ(ТаблицаЗадач.ДатаОкончанияФакт) КАК ДатаОкончанияФакт
		|ПОМЕСТИТЬ ЗадачиСПроцессамиИБезПроцессов
		|ИЗ
		|	НомерПредыдущихЗадач КАК НомерПредыдущихЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
		|		ПО НомерПредыдущихЗадач.ПредыдущаяЗадача = ТаблицаЗадач.НомерЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	НомерПредыдущихЗадач.НомерЗадачи
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ЕСТЬNULL(ТаблицаЗадач.ЗадачаВыполнена, ИСТИНА)) = ИСТИНА";
	// Пояснение к условию: 
	// МИНИМУМ - на тот случай, если выполнена только одна из задач параллельной группы
	// ИСТИНА в ЕСТЬNULL - на случай, если задача не имеет предыдущих задач.
	
	Разделитель = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстВыборки = 
	"ВЫБРАТЬ
		|	ЗадачиСПроцессами.НомерЗадачи КАК НомерЗадачи,
		|	ЗадачиСПроцессами.ДатаОкончанияФакт КАК ДатаОкончанияФакт
		|ИЗ
		|	ЗадачиСПроцессамиИБезПроцессов КАК ЗадачиСПроцессами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
		|		ПО ЗадачиСПроцессами.НомерЗадачи = ТаблицаЗадач.НомерЗадачи
		|			И (НЕ ТаблицаЗадач.ПроцессПодготовкиБюджетов = ЗНАЧЕНИЕ(Документ.ПроцессПодготовкиБюджетов.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачиБезПроцессов.НомерЗадачи,
		|	ЗадачиБезПроцессов.ДатаОкончанияФакт
		|ИЗ
		|	ЗадачиСПроцессамиИБезПроцессов КАК ЗадачиБезПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
		|		ПО ЗадачиБезПроцессов.НомерЗадачи = ТаблицаЗадач.НомерЗадачи
		|			И (ТаблицаЗадач.ПроцессПодготовкиБюджетов = ЗНАЧЕНИЕ(Документ.ПроцессПодготовкиБюджетов.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ДублиЗадачСПроцессами
		|		ПО (НЕ ТаблицаЗадач.НомерЗадачи = ДублиЗадачСПроцессами.НомерЗадачи)
		|			И (ТаблицаЗадач.ЭтапПодготовкиБюджетов = ДублиЗадачСПроцессами.ЭтапПодготовкиБюджетов)
		|			И (ТаблицаЗадач.ЭтапПодготовкиБюджетовОснование = ДублиЗадачСПроцессами.ЭтапПодготовкиБюджетовОснование)
		|			И (ТаблицаЗадач.Период = ДублиЗадачСПроцессами.Период)
		|			И (ТаблицаЗадач.ДатаНачала = ДублиЗадачСПроцессами.ДатаНачала)
		|			И (ТаблицаЗадач.ДатаОкончанияФакт = ДублиЗадачСПроцессами.ДатаОкончанияФакт)
		|ГДЕ
		|	ДублиЗадачСПроцессами.НомерЗадачи ЕСТЬ NULL";
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	ТекстыЗапроса.Добавить(ТекстВыборки);
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Разделитель);
	
	Если СозданныеЗадачи = Неопределено Тогда
		СозданныеЗадачи = Новый ТаблицаЗначений;
		СозданныеЗадачи.Колонки.Добавить("Модель",  Новый ОписаниеТипов("СправочникСсылка.МоделиБюджетирования"));
		СозданныеЗадачи.Колонки.Добавить("Период",  Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		СозданныеЗадачи.Колонки.Добавить("Этап",    Новый ОписаниеТипов("СправочникСсылка.ЭтапыПодготовкиБюджетов"));
		СозданныеЗадачи.Колонки.Добавить("Процесс", Новый ОписаниеТипов("ДокументСсылка.ПроцессПодготовкиБюджетов"));
		СозданныеЗадачи.Колонки.Добавить("Задача",  Новый ОписаниеТипов("ЗадачаСсылка.БюджетнаяЗадача"));
	КонецЕсли;
	
	МассивЭтапов = ТаблицаЗадач.ВыгрузитьКолонку("ЭтапПодготовкиБюджетов");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭтапов, ТаблицаЗадач.ВыгрузитьКолонку("ЭтапПодготовкиБюджетовОснование"), Истина);
	МассивЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭтапов);
	
	СоответствиеФлагов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭтапов, "ВыполнятьАвтоматически, НастройкаДействия");
	
	МассивПроцессов = ТаблицаЗадач.ВыгрузитьКолонку("ПроцессПодготовкиБюджетов");
	МассивПроцессов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПроцессов);
	ПараметрыДополненияОписания = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПроцессов, "Ответственный, ДополнениеКОписанию, Дата");
	
	ЕстьАвтоВыполняемыеЗадачи = Ложь;
	НомерЗадачКФормированию = Запрос.Выполнить().Выгрузить();
	Для Каждого ЗадачаКФормированию Из НомерЗадачКФормированию Цикл
		СтрокаЗадачи = ТаблицаЗадач.Найти(ЗадачаКФормированию.НомерЗадачи, "НомерЗадачи");
		ЗадачаОбъект = Задачи.БюджетнаяЗадача.СоздатьЗадачу();
		
		ЗадачаОбъект.УстановитьНовыйНомер();
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ТаблицаЗадач", ТаблицаЗадач);
		ЗадачаОбъект.Период = СтрокаЗадачи.Период;
		Если ЗначениеЗаполнено(СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование) Тогда
			ВыполнятьАвтоматически = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование].ВыполнятьАвтоматически;
			ЗадачаОбъект.Заполнить(СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование);
			НастройкаДействияОсновногоЭтапа = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетов].НастройкаДействия; // ХранилищеЗначения
			НастройкаОсновногоЭтапа = НастройкаДействияОсновногоЭтапа.Получить();
			НастройкаДействияЭтапа = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование].НастройкаДействия; // ХранилищеЗначения
			НастройкаЭтапа = НастройкаДействияЭтапа.Получить();
			Для Каждого СтрокаОсновногоЭтапа Из НастройкаОсновногоЭтапа Цикл
				НайденнаяСтрока = НастройкаЭтапа.Найти(СтрокаОсновногоЭтапа.Имя, "Имя");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Значение = СтрокаОсновногоЭтапа.Значение;
				КонецЕсли;
			КонецЦикла;
			ЗадачаОбъект.НастройкаДействия = Новый ХранилищеЗначения(НастройкаЭтапа);
		Иначе
			ВыполнятьАвтоматически = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетов].ВыполнятьАвтоматически;
			ЗадачаОбъект.Заполнить(СтрокаЗадачи.ЭтапПодготовкиБюджетов);
		КонецЕсли;
		
		ЗадачаОбъект.Исполнитель = СтрокаЗадачи.Исполнитель;
		
		ЗадачаОбъект.ЭтапПодготовкиБюджетов = СтрокаЗадачи.ЭтапПодготовкиБюджетов;
		ЗадачаОбъект.ЭтапПодготовкиБюджетовОснование = СтрокаЗадачи.ЭтапПодготовкиБюджетовОснование;
		ЗадачаОбъект.ПроцессПодготовкиБюджетов = СтрокаЗадачи.ПроцессПодготовкиБюджетов;
		
		Если ЗначениеЗаполнено(ЗадачаОбъект.ПроцессПодготовкиБюджетов) Тогда
			СтруктураДополнениеКОписанию = ПараметрыДополненияОписания[ЗадачаОбъект.ПроцессПодготовкиБюджетов];
			Если ЗначениеЗаполнено(СтруктураДополнениеКОписанию.ДополнениеКОписанию) Тогда
				Если ЗначениеЗаполнено(ЗадачаОбъект.ОписаниеЗадачи) Тогда
					ПостФикс = ЗадачаОбъект.ОписаниеЗадачи;
				КонецЕсли;
				ЗадачаОбъект.ОписаниеЗадачи = Строка(СтруктураДополнениеКОписанию.Дата) + ", " + СтруктураДополнениеКОписанию.Ответственный + ":" + Символы.ПС;
				ЗадачаОбъект.ОписаниеЗадачи = ЗадачаОбъект.ОписаниеЗадачи + СокрЛП(СтруктураДополнениеКОписанию.ДополнениеКОписанию) + Символы.ПС + Символы.ПС;
				ЗадачаОбъект.ОписаниеЗадачи = ЗадачаОбъект.ОписаниеЗадачи + ПостФикс;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВыполнятьАвтоматически Тогда
			Если Не ЗначениеЗаполнено(ЗадачаКФормированию.ДатаОкончанияФакт) Тогда
				ЗадачаОбъект.Дата = СтрокаЗадачи.ДатаНачала;
			Иначе
				ЗадачаОбъект.Дата = Макс(ЗадачаКФормированию.ДатаОкончанияФакт + 1, СтрокаЗадачи.ДатаНачала);
			КонецЕсли;
			УстановитьДлительностьЗадачи(ЗадачаОбъект, СтрокаЗадачи.ЭтапПодготовкиБюджетов);
		Иначе
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			
			ЗадачаОбъект.Дата = ТекущаяДатаСеанса;
			ЗадачаОбъект.СрокИсполнения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		Если Задачи.БюджетнаяЗадача.НеобходимоСозданиеНовогоДокумента(Неопределено, ЗадачаОбъект.Действие, Ложь) Тогда
			
			МассивДокументы = Неопределено;
			
			Если ЗадачаОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
				ЗадачаОбъект.КСозданиюДокументов = Истина;
			ИначеЕсли ЗадачаОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
				ЗадачаОбъект.КСозданиюДокументов = Истина;
			КонецЕсли;
			
			Если МассивДокументы <> Неопределено Тогда
				Если ТипЗнч(МассивДокументы) <> Тип("Массив") Тогда
					МассивДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивДокументы);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ЗадачаОбъект.СписокДокументов, МассивДокументы, "Документ");
			КонецЕсли;
			
		КонецЕсли;
		
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("РежимФормированияЗадач");
		
		Если ВыполнятьАвтоматически
		   И НЕ ЗадачаОбъект.КСозданиюДокументов Тогда
			ЗадачаОбъект.Выполнена = Истина;
		КонецЕсли;
		
		ЗадачаОбъект.Записать();
		
		Если ЗадачаОбъект.КСозданиюДокументов Тогда
			ЗаписьОСозданнойЗадаче         = СозданныеЗадачи.Добавить();
			ЗаписьОСозданнойЗадаче.Модель  = ЗадачаОбъект.МодельБюджетирования;
			ЗаписьОСозданнойЗадаче.Период  = ЗадачаОбъект.Период;
			ЗаписьОСозданнойЗадаче.Этап    = ЗадачаОбъект.ЭтапПодготовкиБюджетов;
			ЗаписьОСозданнойЗадаче.Процесс = ЗадачаОбъект.ПроцессПодготовкиБюджетов;
			ЗаписьОСозданнойЗадаче.Задача  = ЗадачаОбъект.Ссылка;
		КонецЕсли;
		
		Если ВыполнятьАвтоматически
		   И ЗадачаОбъект.Выполнена Тогда
			
			ЕстьАвтоВыполняемыеЗадачи = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьАвтоВыполняемыеЗадачи Тогда
		СформироватьБюджетныеЗадачиПоМодели(МодельБюджетирования,ПроцессПодготовкиБюджетов,СозданныеЗадачи);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Признак, запущено ли в данный момент фоновое задание по созданию документов для задачи
// Для файловой версии для пользователей с неполными правами будет возвращать Ложь.
//
// Параметры:
//	Процесс - ДокументСсылка.ПроцессПодготовкиБюджетов - процесс, реквизит задачи.
//
// Возвращаемое значение:
//	Булево - Истина, если фоновое задание с переданным ключем выполняется.
//
Функция ВыполняетсяФоновоеЗаданиеСозданияДокументов(Процесс) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ФоновоеЗаданиеЗапущено = Ложь;
	
	Ключ = КлючФоновогоЗаданияСозданияДокументовДляБюджетныхЗадач(Процесс);
	Поиск = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
	ВыполняемыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Поиск);
	
	ФоновоеЗаданиеЗапущено = НЕ ВыполняемыеЗадания.Количество()=0;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ФоновоеЗаданиеЗапущено;
	
КонецФункции

// Возвращает ключ фонового задания
//
// Параметры:
// 	Процесс - ДокументСсылка.ПроцессПодготовкиБюджетов - Процесс подготовки бюджетов задачи.
//
// Возвращаемое значение:
//	Строка - сформированный ключ задания в установленном формате.
//
Функция КлючФоновогоЗаданияСозданияДокументовДляБюджетныхЗадач(Процесс)
	
	КлючЗадания = "СозданиеДокументовДляБюджетныхЗадач%Процесс%";
	Если НЕ ЗначениеЗаполнено(Процесс) Тогда
		КлючЗадания = СтрЗаменить(КлючЗадания, "%Процесс%", "БезПроцесса");
	Иначе
		КлючЗадания = СтрЗаменить(КлючЗадания, "%Процесс%", Строка(Процесс.УникальныйИдентификатор()));
	КонецЕсли;
	
	Возврат КлючЗадания;
КонецФункции

Процедура ЗапуститьФоновоеЗаданиеДляФормированияДокументов(Процесс, ЗадачиПервойОчереди = Неопределено)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(Процесс);
	ПараметрыЗадания.Добавить(ЗадачиПервойОчереди);
	
	КлючЗадания = КлючФоновогоЗаданияСозданияДокументовДляБюджетныхЗадач(Процесс);
	
	ФоновоеЗаданиеЗапущено = Ложь;
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Поиск = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
		ФоновоеЗаданиеЗапущено = ФоновыеЗадания.ПолучитьФоновыеЗадания(Поиск).Количество() > 0;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если НЕ ФоновоеЗаданиеЗапущено Тогда
		Попытка
		
			Если ЗначениеЗаполнено(Процесс) Тогда
				НаименованиеЗадачи = НСтр("ru = 'Создание документов по процессу: %1%';
											|en = 'Create documents for the process: %1%'", КодОсновногоЯзыка);
				НаименованиеЗадачи = СтрЗаменить(НаименованиеЗадачи, "%1%", Строка(Процесс));
			Иначе
				НаименованиеЗадачи = НСтр("ru = 'Создание документов без процесса';
											|en = 'Create documents without process'", КодОсновногоЯзыка);
			КонецЕсли;
			
			ФоновыеЗадания.Выполнить("БюджетированиеСервер.СозданиеДокументовДляБюджетныхЗадач",ПараметрыЗадания, КлючЗадания,
				НаименованиеЗадачи);
			
		Исключение
			
			Если НЕ ЗначениеЗаполнено(Процесс) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось запустить фоновое задание для формирования бюджетных документов без процесса.';
									|en = 'Cannot run the background job to generate budget documents without process.'",
					КодОсновногоЯзыка);
			Иначе
				ТекстОшибки = НСтр("ru = 'Не удалось запустить фоновое задание для формирования бюджетных документов по процессу %1%.';
									|en = 'Cannot run the background job to generate budget documents for the %1% process.'",
					КодОсновногоЯзыка);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Строка(Процесс));
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
											|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "." + НСтр("ru = 'Создание бюджетных задач';
							|en = 'Create budget tasks'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Получает массив процессов фоновых заданий (включая пустое значение) для формирования
// документов для бюджетных задач по всем моделям.
//
// Возвращаемое значение:
//	Массив - массив процессов (ДокументСсылка.ПроцессПодготовкиБюджетов), в том числе, возможно,
//	         пустая ссылка, для запуска фоновых заданий по процессам.
//
Функция ФоновыеЗаданияДляФормированияДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов КАК Процесс
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	НЕ БюджетнаяЗадача.ПометкаУдаления
		|	И БюджетнаяЗадача.КСозданиюДокументов";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Процесс");
	
КонецФункции

// Получает массив задач, которые необходимо заблокировать по переданным параметрам
// Блокируются все задачи по той же модели, периоду, этапу (или с повтором данного этапа) для исключения ситуации
// параллельного создания одинаковых документов.
//
// Параметры:
// 	МодельБюджетирования  - СправочникСсылка.МоделиБюджетирования - отбор задач по модели бюджетирования.
//                 
// 	Период  - Дата - отбор задач по периоду
//                 
//	ЭтапыПодготовкиБюджетов  - СправочникСсылка.ЭтапыПодготовкиБюджетов - отбор задач по этапу (массиву этапов) 
//	                           только ссылка, без групп, этап указанный в задаче
//	                           реквизите "ЭтапПодготовкиБюджетов" или "ЭтапПодготовкиБюджетовОснование".
//	                           Массив из СправочникСсылка.ЭтапыПодготовкиБюджетов - отбор по массиву задач.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица бюджетных задач:
//	  *Ссылка - ЗадачаСсылка.БюджетнаяЗадача - задача для блокировки.
//	
//
Функция ЗадачиДляБлокировкиПриВводеДокументов(МодельБюджетирования, Период, ЭтапыПодготовкиБюджетов) Экспорт
	
	Если ТипЗнч(ЭтапыПодготовкиБюджетов) = Тип("Массив") Тогда
		МассивЭтапов = ЭтапыПодготовкиБюджетов;
	Иначе
		МассивЭтапов = Новый Массив;
		МассивЭтапов.Добавить(ЭтапыПодготовкиБюджетов);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
	Запрос.Текст = "ВЫБРАТЬ
		|	БюджетнаяЗадача.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования
		|	И БюджетнаяЗадача.ЭтапПодготовкиБюджетов В(&МассивЭтапов)
		|	И БюджетнаяЗадача.Период = &Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БюджетнаяЗадача.Ссылка
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования
		|	И БюджетнаяЗадача.ЭтапПодготовкиБюджетовОснование В(&МассивЭтапов)
		|	И БюджетнаяЗадача.Период = &Период";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗадачиДляБлокировкиПриВводеДокументов()

#Область СозданиеДокументовДляБюджетныхЗадачВФоновомЗадании

// Процедура вызывает формирование документов для бюджетных задач с приоритетом по задачам первой очереди.
//
// Параметры:
//	Процесс - ДокументСсылка.ПроцессПодготовкиБюджетов - Процесс подготовки бюджетов (реквизит задачи)
//	ЗадачиПервойОчереди - Массив из ЗадачаСсылка.БюджетнаяЗадача - Массив задач, которые будут обрабатываться в первую очередь, 
//	                      остальные задачи будут считаться "зависшими", и будут обрабатываться во 2ую очередь.
Процедура СозданиеДокументовДляБюджетныхЗадач(Процесс, ЗадачиПервойОчереди = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
		|	БюджетнаяЗадача.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	НЕ БюджетнаяЗадача.ПометкаУдаления
		|	И БюджетнаяЗадача.КСозданиюДокументов
		|	И БюджетнаяЗадача.ПроцессПодготовкиБюджетов = &Процесс
		|	И &УсловиеПоСсылке
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ПоляУпорядочивания";
	
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Если ЗадачиПервойОчереди = Неопределено Тогда
		ЗадачиПервойОчереди = Новый Массив;
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗадачиПервойОчереди", ЗадачиПервойОчереди);
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСсылке", "БюджетнаяЗадача.Ссылка В (&ЗадачиПервойОчереди)");
	
	Запрос.Текст = ТекстЗапроса;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСсылке", "БюджетнаяЗадача.Ссылка В (&ЗадачиПервойОчереди)");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляУпорядочивания", "БюджетнаяЗадача.Дата,
	                                         |	БюджетнаяЗадача.Ссылка");
	
	ЗадачиПервойОчереди = Запрос.Выполнить().Выбрать();
	
	РанееОбработанныеЗадачи = Новый Массив;
	
	Пока ЗадачиПервойОчереди.Следующий() Цикл
		СозданиеДокументовДляЗадачи(ЗадачиПервойОчереди.Ссылка);
		РанееОбработанныеЗадачи.Добавить(ЗадачиПервойОчереди.Ссылка);
	КонецЦикла;
	
	
	
	// Т.к. отдельного регламентного задания для обработки зависших задач нет, то обрабатываем в отдельных фоновых заданиях.
	// Данное фоновое задание запускается с ключем запуска ИД Процесса (может быть пустым) для того, чтобы фоновые задания
	// не мешали работе друг-друга (т.к. задачи не блокируются на все время формирования документов).
	// В каждой итерации следующего цикла проверяем, есть ли не обработанные ранее задачи.
	// По каждой задаче смотрим, есть ли выполняющееся фоновое задание с ключом ИД задачи, и если есть, не обрабатываем.
	
	ЕстьНеобработанныеЗадачи = Истина;
	Пока ЕстьНеобработанныеЗадачи Цикл
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСсылке", "НЕ БюджетнаяЗадача.Ссылка В (&РанееОбработанныеЗадачи)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляУпорядочивания", "БюджетнаяЗадача.СрокИсполнения");
		
		Запрос.УстановитьПараметр("РанееОбработанныеЗадачи", РанееОбработанныеЗадачи);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ЕстьНеобработанныеЗадачи = Ложь;
			Прервать;
		Иначе
			ЗависшиеЗадачи = Результат.Выбрать();
			
			Пока ЗависшиеЗадачи.Следующий() Цикл
				СозданиеДокументовДляЗадачи(ЗависшиеЗадачи.Ссылка);
				
				РанееОбработанныеЗадачи.Добавить(ЗависшиеЗадачи.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура создает документы для бюджетной задачи.
//
// Параметры:
// 	Задача - ЗадачаСсылка.БюджетнаяЗадача - задача, для которой необходимо создать документы.
Процедура СозданиеДокументовДляЗадачи(Задача) 
	
	//	1. Формирование каждого документа может занимать длительное время
	//	2. Пользователь имеет право вручную заблокировать задачу, записав задачу, если хочет вручную создать документы.
	//	   Перед записью задачи в фоновом задании проверяем, не была ли она заблокирована, если да, то отменяем транзакцию
	//	3. Пользователь имеет право параллельно создать один из нескольких (или все) документов в задаче.
	//	   В таком случае, если были созданы все необходимые документы, то при записи у задачи снимается флаг КСозданиюДокументов 
	//	4. Для каждой задачи получаем список задач, которые необходимо заблокировать вместе с изменяемой задачей, чтобы
	//	   исключить ситуации, когда параллельно будет добавлена задача, и начнется (автоматически или вручную) создание для нее документов.
	
	
	ПродолжитьОбработку = Истина;
	
	Пока ПродолжитьОбработку Цикл
		
		////////////////////////////////////////////////////////////////////////////////////
		// 1. Чтение параметров следующего создаваемого документа и его поиск в БД по параметрам.
		Параметры = Новый Структура;
		Параметры.Вставить("Задача", Задача);
		Параметры.Вставить("ВерсияДанных", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ВерсияДанных"));
		ДополнитьПараметрыСледующегоФормируемогоДокументаБюджетнойЗадачи(Задача, Параметры, ПродолжитьОбработку);
		
		ПараметрыДокумента = Параметры.ПараметрыДокумента;
		
		Если ПараметрыДокумента = Неопределено Тогда
			ПродолжитьОбработку = Ложь;
			Прервать;
		КонецЕсли;
		Если НЕ ПродолжитьОбработку Тогда
			Прервать;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////
		// 2. Создание документа (если не найден) и запись в задачу. 
		//   Если после записи документа находим документ-аналог - отменяем транзакцию.
		ЗаписатьДокументВЗадачу = Ложь;
		ДокументСсылка = Неопределено;
		
		СозданиеЧтениеДокументаБюджетнойЗадачиПоПараметрам(Параметры,
		                                                   ДокументСсылка,
		                                                   ЗаписатьДокументВЗадачу,
		                                                   ПродолжитьОбработку);
		
		Если НЕ ЗаписатьДокументВЗадачу И НЕ ПродолжитьОбработку Тогда
			Прервать;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////
		// 3. Если был найден документ-аналог, введенный в другой задаче вручную, то записываем в задачу найденный документ.
		Если ЗаписатьДокументВЗадачу Тогда
			
			ЗаписьНайденногоДокументаВБюджетнуюЗадачуВОтдельнойТранзакции(Параметры, ДокументСсылка, ПродолжитьОбработку);
			
			Если НЕ ПродолжитьОбработку Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ДополнитьПараметрыСледующегоФормируемогоДокументаБюджетнойЗадачи(Знач Задача, Параметры, ПродолжитьОбработку)
	
	Действие                 = Неопределено;
	ПараметрыДокумента       = Неопределено;
	МассивДокументы          = Неопределено;
	НастройкаДействия        = Неопределено;
	ЭтапыПодготовкиБюджетов  = Неопределено;
	ПараметрыНовогоДокумента = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		ЭтапыПодготовкиБюджетов = Новый Массив;
		ЭтапыПодготовкиБюджетов.Добавить(ЗадачаОбъект.ЭтапПодготовкиБюджетов);
		Если ЗначениеЗаполнено(ЗадачаОбъект.ЭтапПодготовкиБюджетовОснование) Тогда
			ЭтапыПодготовкиБюджетов.Добавить(ЗадачаОбъект.ЭтапПодготовкиБюджетовОснование);
		КонецЕсли;
		
		// Блокировка задач для исключения параллельной работы методов 
		ЗадачиДляТранзакционнойБлокировки = ЗадачиДляБлокировкиПриВводеДокументов(ЗадачаОбъект.МодельБюджетирования,
		                                                                          ЗадачаОбъект.Период,
		                                                                          ЭтапыПодготовкиБюджетов);
		
		ЗадачаОбъект.Заблокировать();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.БюджетнаяЗадача");
		ЭлементБлокировки.ИсточникДанных = ЗадачиДляТранзакционнойБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Если ЗадачаОбъект.ВерсияДанных <> Параметры.ВерсияДанных Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ВызватьИсключение НСтр("ru = 'Задача была изменена, создание документов прервано';
									|en = 'Job was changed, document creation is canceled'", КодОсновногоЯзыка);
		КонецЕсли;
		
		Действие = ЗадачаОбъект.Действие;
		
		// выбор аналитики первого не созданного документа
		Реквизиты = Новый Структура("Периодичность, ВыполнятьАвтоматически", "Родитель.Периодичность");
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаОбъект.ЭтапПодготовкиБюджетов, Реквизиты);
		Периодичность = Реквизиты.Периодичность;
		
		НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ЗадачаОбъект.Период, Периодичность);
		КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ЗадачаОбъект.Период, Периодичность);
		
		НастройкаДействия = ЗадачаОбъект.НастройкаДействия.Получить(); 
		СписокДокументов = ЗадачаОбъект.СписокДокументов.Выгрузить(,"Документ").ВыгрузитьКолонку("Документ");
		ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования, ЭтапПодготовкиБюджетов");
		ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, ЗадачаОбъект);
		
		Если Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
			ДеревоВводаБюджетов = ПараметрыВводаБюджетовПоНастройкамДействия(НастройкаДействия,
				НачалоПериода,
				КонецПериода,
				Периодичность,
				СписокДокументов,
				Ложь);
			
			Для каждого СтрокаВидаБюджета Из ДеревоВводаБюджетов.Строки Цикл
				Если СтрокаВидаБюджета.Строки.Количество() > 0 Тогда
					Для каждого СтрокаАналитикиПериода Из СтрокаВидаБюджета.Строки Цикл	
						Если СтрокаАналитикиПериода.Строки.Количество() > 0 Тогда
							Для каждого СтрокаАналитики Из СтрокаАналитикиПериода.Строки Цикл
								Если НЕ ЗначениеЗаполнено(СтрокаАналитики.Документ) Тогда
									ПараметрыДокумента = Задачи.БюджетнаяЗадача.ПараметрыСтрокиДействия(
										СтрокаАналитики, ДеревоВводаБюджетов.Колонки);
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НЕ ПараметрыДокумента = Неопределено Тогда
								Прервать;
							КонецЕсли;
						Иначе
							Если НЕ ЗначениеЗаполнено(СтрокаАналитикиПериода.Документ) Тогда
								ПараметрыДокумента = Задачи.БюджетнаяЗадача.ПараметрыСтрокиДействия(
									СтрокаАналитикиПериода, ДеревоВводаБюджетов.Колонки);
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ПараметрыДокумента = Неопределено Тогда
						Прервать;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(СтрокаВидаБюджета.Документ) Тогда
						ПараметрыДокумента = Задачи.БюджетнаяЗадача.ПараметрыСтрокиДействия(
							СтрокаВидаБюджета, ДеревоВводаБюджетов.Колонки);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПараметрыДокумента = Неопределено Тогда
				МассивДокументы = НайтиДокументПоЗначениямЗаполнения("ЭкземплярБюджета", ПараметрыДокумента);
			КонецЕсли;
			
		ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
			Если СписокДокументов.Количество() = 0 Тогда
				ЗначенияЗаполнения = Новый Структура;
				Для Каждого Настройка Из НастройкаДействия Цикл
					Если ЗначениеЗаполнено(Настройка.Значение) Тогда
						ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
					КонецЕсли;
				КонецЦикла;
				
				ЗначенияЗаполнения.Вставить("НачалоПериода", НачалоПериода);
				
				Если ЗначенияЗаполнения.Свойство("ШаблонВвода") Тогда
					ТаблицаНФПОпределения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияЗаполнения.ШаблонВвода, "ПоказателиШаблона");
					НФПОпределения = ТаблицаНФПОпределения.Выгрузить()[0].Показатель;
				ИначеЕсли ЗначенияЗаполнения.Свойство("НефинансовыйПоказатель") Тогда
					НФПОпределения = ЗначенияЗаполнения.НефинансовыйПоказатель;
				Иначе
					КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
					ТекстОшибки = НСтр("ru = 'В задаче %1% в настройках действия не определен нефинансовый показатель для создания документа.';
										|en = 'Non-financial item for document creation is not determined in the %1% task of the action settings.'",
						КодОсновногоЯзыка);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", ЗадачаОбъект);
					
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				НуженПериодОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НФПОпределения, "УстанавливатьЗначениеНаКаждыйПериод");
				Если НуженПериодОкончания Тогда
					ЗначенияЗаполнения.Вставить("ОкончаниеПериода", КонецПериода);
				КонецЕсли;
				
				
				ПараметрыДокумента = ЗначенияЗаполнения;
				
				МассивДокументы = НайтиДокументПоЗначениямЗаполнения("УстановкаЗначенийНефинансовыхПоказателей", ПараметрыДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗадачаОбъект = Неопределено;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ для задачи %1 по причине: %2';
							|en = 'Cannot create the document for the %1 task. Reason: %2'", КодОсновногоЯзыка);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ЗадачаОбъект, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
										|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Создание документов для задачи';
						|en = 'Creating documents for the task'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
		ПродолжитьОбработку = Ложь;
		ЗадачаОбъект = Неопределено;
		
	КонецПопытки;
	
	Параметры.Вставить("Действие",                 Действие);
	Параметры.Вставить("ПараметрыДокумента",       ПараметрыДокумента);
	Параметры.Вставить("МассивДокументы",          МассивДокументы);
	Параметры.Вставить("НастройкаДействия",        НастройкаДействия);
	Параметры.Вставить("ЭтапыПодготовкиБюджетов",  ЭтапыПодготовкиБюджетов);
	Параметры.Вставить("ПараметрыНовогоДокумента", ПараметрыНовогоДокумента);
	
КонецПроцедуры

Процедура СозданиеЧтениеДокументаБюджетнойЗадачиПоПараметрам(Параметры, ДокументСсылка, ЗаписатьДокументВЗадачу, ПродолжитьОбработку)
	
	Задача                   = Параметры.Задача;
	Действие                 = Параметры.Действие;
	ПараметрыДокумента       = Параметры.ПараметрыДокумента;
	МассивДокументы          = Параметры.МассивДокументы;
	НастройкаДействия        = Параметры.НастройкаДействия;
	ЭтапыПодготовкиБюджетов  = Параметры.ЭтапыПодготовкиБюджетов;
	ПараметрыНовогоДокумента = Параметры.ПараметрыНовогоДокумента;
	
	ОтменаТранзакции         = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Если МассивДокументы = Неопределено Тогда
			
			Если Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
				
				ПараметрыНовогоДокумента.Вставить("БюджетнаяЗадача", Задача);
				МассивДокументы = СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента,
					ПараметрыДокумента, Истина, Ложь);
				
			ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
				
				ДокументСсылка = Задачи.БюджетнаяЗадача.СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогоДокумента,
				                                                                                        НастройкаДействия);
				МассивДокументы = Новый Массив;
				МассивДокументы.Добавить(ДокументСсылка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивДокументы = Неопределено Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ВызватьИсключение НСтр("ru = 'Документы не были сформированы';
									|en = 'Documents were not generated'", КодОсновногоЯзыка);
		КонецЕсли;
		
		ДокументСсылка = МассивДокументы[МассивДокументы.Количество()-1];
		
		//////////////////////////////////////////////////////////////////////////
		// Накладываем блокировку и читаем на предмет дублей.
		
		// Блокировка задач для исключения параллельной работы методов.
		ЗадачиДляТранзакционнойБлокировки = ЗадачиДляБлокировкиПриВводеДокументов(ПараметрыНовогоДокумента.МодельБюджетирования,
		                                                                          ПараметрыНовогоДокумента.Период,
		                                                                          ЭтапыПодготовкиБюджетов);
		
		ЗадачаОбъект = Задача.ПолучитьОбъект(); // ЗадачаОбъект.БюджетнаяЗадача
		ЗадачаОбъект.Заблокировать();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.БюджетнаяЗадача");
		ЭлементБлокировки.ИсточникДанных = ЗадачиДляТранзакционнойБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Если ЗадачаОбъект.ВерсияДанных <> Параметры.ВерсияДанных Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ВызватьИсключение НСтр("ru = 'Задача была изменена, создание документов прервано';
									|en = 'Job was changed, document creation is canceled'", КодОсновногоЯзыка);
		КонецЕсли;
		Если ЗадачаОбъект.ПометкаУдаления Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ВызватьИсключение НСтр("ru = 'Задача была помечена на удаление, создание документов будет отменено';
									|en = 'Job was marked for deletion, document creation will be canceled'",КодОсновногоЯзыка);
		КонецЕсли;
		Если НЕ ЗадачаОбъект.КСозданиюДокументов Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ВызватьИсключение НСтр("ru = 'Задача была изменена, создание документов не требуется';
									|en = 'Job was changed, document creation is not required'", КодОсновногоЯзыка);
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////
		// Читаем документы, если за длительное время формирования документа был введен еще один,
		// то отменяем транзакцию по вводу нового.
		Если Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводБюджетов Тогда
			МассивДокументы = НайтиДокументПоЗначениямЗаполнения("ЭкземплярБюджета", ПараметрыДокумента);
		Иначе
			МассивДокументы = НайтиДокументПоЗначениямЗаполнения("УстановкаЗначенийНефинансовыхПоказателей", ПараметрыДокумента);
		КонецЕсли;
		
		Для каждого НайденныйДокумент Из МассивДокументы Цикл
			Если НайденныйДокумент <> ДокументСсылка Тогда
				ОтменаТранзакции = Истина;
				
				ДокументСсылка = НайденныйДокумент; // если будем писать документ в задачу, то найденный
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОтменаТранзакции Тогда
			// Откат транзакции и переход к следующему шагу - записи найденного документа в задачу.
			ВызватьИсключение НСтр("ru = 'Создание документа для задачи было отменено, т.к. существует документ с подобными параметрами';
									|en = 'Creation of the document for task was canceled as the document with similar parameters exists'",
				КодОсновногоЯзыка);
		КонецЕсли;
		
		ЗаписьДокумента = ЗадачаОбъект.СписокДокументов.Добавить();
		ЗаписьДокумента.Документ = ДокументСсылка;
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("РежимФормированияЗадач");
		ЗадачаОбъект.Записать();
		
		ЗадачаОбъект = Неопределено;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		Если ОтменаТранзакции Тогда
			ТекстОшибки = НСтр("ru = 'Создание документа для задачи было отменено, т.к. существует документ с подобными параметрами';
								|en = 'Creation of the document for task was canceled as the document with similar parameters exists'",
				КодОсновногоЯзыка);
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось создать документ для задачи %1 по причине: %2';
								|en = 'Cannot create the document for the %1 task. Reason: %2'", КодОсновногоЯзыка);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Задача, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
										|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Создание документов для задачи';
						|en = 'Creating documents for the task'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
		Если ОтменаТранзакции Тогда
			ЗаписатьДокументВЗадачу = Истина;
		Иначе
			ПродолжитьОбработку     = Ложь;
			ЗаписатьДокументВЗадачу = Ложь;
		КонецЕсли;
		
		ЗадачаОбъект = Неопределено;
	
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписьНайденногоДокументаВБюджетнуюЗадачуВОтдельнойТранзакции(Параметры, ДокументСсылка, ПродолжитьОбработку)
	
	Задача                   = Параметры.Задача;
	ЭтапыПодготовкиБюджетов  = Параметры.ЭтапыПодготовкиБюджетов;
	ПараметрыНовогоДокумента = Параметры.ПараметрыНовогоДокумента; 
	
	НачатьТранзакцию();
	
	Попытка
		
		// Блокировка задач для исключения параллельной работы методов.
		ЗадачиДляТранзакционнойБлокировки = ЗадачиДляБлокировкиПриВводеДокументов(ПараметрыНовогоДокумента.МодельБюджетирования,
		                                                                          ПараметрыНовогоДокумента.Период,
		                                                                          ЭтапыПодготовкиБюджетов);
		
		ЗадачаОбъект = Задача.ПолучитьОбъект(); // ЗадачаОбъект.БюджетнаяЗадача
		Если ЗадачаОбъект.ВерсияДанных <> Параметры.ВерсияДанных Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ВызватьИсключение НСтр("ru = 'Задача была изменена, создание документов прервано';
									|en = 'Job was changed, document creation is canceled'", КодОсновногоЯзыка);
		КонецЕсли;
		ЗадачаОбъект.Заблокировать();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.БюджетнаяЗадача");
		ЭлементБлокировки.ИсточникДанных = ЗадачиДляТранзакционнойБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		// Устанавливаем найденный документ.
		ЗаписьДокумента = ЗадачаОбъект.СписокДокументов.Добавить();
		ЗаписьДокумента.Документ = ДокументСсылка; 
		ЗадачаОбъект.Записать();
		
		ЗаписьДокумента = Неопределено;
		ЗадачаОбъект = Неопределено;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстОшибки = НСтр("ru = 'Не удалось записать документ в задачу %1 по причине: %2';
							|en = 'Cannot save the document to the %1 task. Reason: %2'", КодОсновногоЯзыка);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, Задача, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
										|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Создание документов для задачи';
						|en = 'Creating documents for the task'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
		ПродолжитьОбработку = Ложь;
		
		ЗадачаОбъект = Неопределено;
	
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

Процедура СформироватьОповещенияПоБюджетнымЗадачам()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Задача_БюджетнаяЗадача.Ссылка КАК БюджетнаяЗадача,
		|	Задача_БюджетнаяЗадача.МодельБюджетирования КАК МодельБюджетирования,
		|	Задача_БюджетнаяЗадача.СрокИсполнения КАК СрокИсполнения,
		|	ВЫБОР
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения < &ТекущаяДата
		|			ТОГДА &ЗадачаПросрочена
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения = &ТекущаяДата
		|			ТОГДА &ЗадачаПодходитСрок
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения > &ТекущаяДата
		|			ТОГДА &ЗадачаПоступила
		|	КОНЕЦ КАК АктуальноеОповещение
		|ПОМЕСТИТЬ ТекущиеЗадачи
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК Задача_БюджетнаяЗадача
		|ГДЕ
		|	НЕ Задача_БюджетнаяЗадача.ПометкаУдаления
		|	И НЕ Задача_БюджетнаяЗадача.Выполнена
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БюджетнаяЗадача,
		|	АктуальноеОповещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеЗадачи.БюджетнаяЗадача КАК БюджетнаяЗадача,
		|	ТекущиеЗадачи.МодельБюджетирования КАК МодельБюджетирования,
		|	ТекущиеЗадачи.АктуальноеОповещение КАК АктуальноеОповещение,
		|	ВЫБОР
		|		КОГДА ТекущиеЗадачи.АктуальноеОповещение = &ЗадачаПодходитСрок
		|				И ОповещениеОПоступлении.ВидОповещения ЕСТЬ NULL 
		|			ТОГДА &ЗадачаПоступила
		|		ИНАЧЕ ТекущиеЗадачи.АктуальноеОповещение
		|	КОНЕЦ КАК ВидОповещения,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Наименование КАК БюджетнаяЗадачаНаименование,
		|	ТекущиеЗадачи.БюджетнаяЗадача.СрокИсполнения КАК БюджетнаяЗадачаСрокИсполнения,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Исполнитель КАК БюджетнаяЗадачаИсполнитель,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Исполнитель.ИдентификаторПользователяИБ КАК ИсполнительИдентификаторПользователяИБ,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Исполнитель.Представление КАК БюджетнаяЗадачаИсполнительПредставление,
		|	ТекущиеЗадачи.БюджетнаяЗадача.ЭтапПодготовкиБюджетов КАК БюджетнаяЗадачаЭтапПодготовкиБюджетов
		|ПОМЕСТИТЬ ОповещенияНаОтправку
		|ИЗ
		|	ТекущиеЗадачи КАК ТекущиеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеОповещенияПоБюджетнымЗадачам КАК ОповещениеОПоступлении
		|		ПО ТекущиеЗадачи.БюджетнаяЗадача = ОповещениеОПоступлении.БюджетнаяЗадача
		|			И (ОповещениеОПоступлении.ВидОповещения = &ЗадачаПоступила)
		|ГДЕ
		|	НЕ (ТекущиеЗадачи.БюджетнаяЗадача, ТекущиеЗадачи.АктуальноеОповещение) В
		|				(ВЫБРАТЬ
		|					ОтправленныеОповещенияПоБюджетнымЗадачам.БюджетнаяЗадача,
		|					ОтправленныеОповещенияПоБюджетнымЗадачам.ВидОповещения
		|				ИЗ
		|					РегистрСведений.ОтправленныеОповещенияПоБюджетнымЗадачам КАК ОтправленныеОповещенияПоБюджетнымЗадачам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОповещенияНаОтправку.БюджетнаяЗадача,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаНаименование КАК НаименованиеЗадачи,
		|	ОповещенияНаОтправку.МодельБюджетирования КАК МодельБюджетирования,
		|	ОповещенияНаОтправку.АктуальноеОповещение,
		|	ОповещенияНаОтправку.ВидОповещения,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаСрокИсполнения КАК СрокИсполнения,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаИсполнитель КАК Исполнитель,
		|	ОповещенияНаОтправку.ИсполнительИдентификаторПользователяИБ КАК ИсполнительИдентификаторПользователяИБ,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаИсполнительПредставление КАК ИсполнительПредставление,
		|	ПользователиКонтактнаяИнформация.АдресЭП КАК ИсполнительАдресЭП
		|ИЗ
		|	ОповещенияНаОтправку КАК ОповещенияНаОтправку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО ОповещенияНаОтправку.БюджетнаяЗадачаИсполнитель = ПользователиКонтактнаяИнформация.Ссылка
		|			И (ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокИсполнения";
	Запрос.УстановитьПараметр("ТекущаяДата",		НАЧАЛОДНЯ(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ЗадачаПоступила",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПоступила);
	Запрос.УстановитьПараметр("ЗадачаПодходитСрок",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПодходитСрок);
	Запрос.УстановитьПараметр("ЗадачаПросрочена",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПросрочена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	Попытка
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Соединение = Новый ИнтернетПочта;
		Соединение.Подключиться(Профиль);
	Исключение
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить соединение с почтовым сервером: (%1)';
				|en = 'Cannot connect to the mail server: (%1)'"),
				ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
										|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отправка оповещения';
						|en = 'Send notification'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,СообщениеОбОшибке);
		Возврат;
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		
		СообщениеОбОшибке = Неопределено;
		
		Попытка
			СоздатьИОтправитьПочтовоеСообщениеОповещения(УчетнаяЗапись, Выборка, Соединение);
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если СообщениеОбОшибке = Неопределено Тогда
			МенеджерЗаписи = РегистрыСведений.ОтправленныеОповещенияПоБюджетнымЗадачам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.БюджетнаяЗадача				= Выборка.БюджетнаяЗадача;
			МенеджерЗаписи.ВидОповещения				= Выборка.АктуальноеОповещение;
			МенеджерЗаписи.ВидОтправленногоОповещения	= Выборка.ВидОповещения;
			МенеджерЗаписи.Записать();
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бюджетный процесс';
											|en = 'Budget process'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "." + НСтр("ru = 'Отправка оповещения';
							|en = 'Send notification'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,
				СообщениеОбОшибке,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодЯзыкаПользователяИсполнителя(ИдентификаторПользователяИБ)
	
	КодЯзыка = "";
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		
		ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
		Если ТипЗнч(ПрочитанныеСвойства) = Тип("Структура")
			И ПрочитанныеСвойства.Свойство("Язык") Тогда
			Язык = Метаданные.Языки.Найти(ПрочитанныеСвойства.Язык);
			Если НЕ Язык = Неопределено Тогда
				КодЯзыка = Язык.КодЯзыка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(КодЯзыка) Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КодЯзыка;
	
КонецФункции

Функция СоздатьИОтправитьПочтовоеСообщениеОповещения(УчетнаяЗапись, ЭлементВыборкиНаОтправку, Соединение)
	
	ЕстьПодсистемаЭлектроннаяПодпись = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись");
	Если ЕстьПодсистемаЭлектроннаяПодпись Тогда
		МодульЭлектроннаяПодписьКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		
		РасширениеДляФайловПодписи = МодульЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки(
			).РасширениеДляФайловПодписи;
			
		МодульЭлектроннаяПодпись   = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	Иначе
		РасширениеДляФайловПодписи = "p7s";
		
		МодульЭлектроннаяПодпись   = Неопределено;
	КонецЕсли;
	
	КодЯзыкаИсполнителя = КодЯзыкаПользователяИсполнителя(ЭлементВыборкиНаОтправку.ИсполнительИдентификаторПользователяИБ);
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПодстановки = Новый Структура();
	ПараметрыПодстановки.Вставить("БюджетнаяЗадача", ЭлементВыборкиНаОтправку.БюджетнаяЗадача);
	ПараметрыПодстановки.Вставить("Исполнитель", ЭлементВыборкиНаОтправку.Исполнитель);
	ПараметрыПодстановки.Вставить("ИсполнительПредставление", ЭлементВыборкиНаОтправку.ИсполнительПредставление);
	ПараметрыПодстановки.Вставить("НаименованиеЗадачи", ЭлементВыборкиНаОтправку.НаименованиеЗадачи);	
	ПараметрыПодстановки.Вставить("СрокИсполнения", ЭлементВыборкиНаОтправку.СрокИсполнения);
	
	ПараметрыПисьма = Перечисления.ВидыОповещенийБюджетныхЗадач.ПолучитьПараметрыПисьмаПоШаблону(
		ЭлементВыборкиНаОтправку.ВидОповещения,
		ПараметрыПодстановки,
		КодЯзыкаИсполнителя);
	
	Адресаты = Новый Массив;
	Адресаты.Добавить(Новый Структура("Адрес, Представление", ЭлементВыборкиНаОтправку.ИсполнительАдресЭП, ЭлементВыборкиНаОтправку.ИсполнительПредставление));
	
	ПараметрыПисьма.Вставить("Кому", Адресаты);
	
	СоотвВложения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Файлы.Наименование КАК ПолноеНаименование,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетовПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ЭтапПодготовкиБюджетов
		|;
		|ВЫБРАТЬ
		|	Файлы.Наименование КАК ПолноеНаименование,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МоделиБюджетированияПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &МодельБюджетирования";
	Запрос.УстановитьПараметр("ЭтапПодготовкиБюджетов",			ЭлементВыборкиНаОтправку.ЭтапПодготовкиБюджетов);
	Запрос.УстановитьПараметр("МодельБюджетирования",			ЭлементВыборкиНаОтправку.МодельБюджетирования);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	Для Каждого ПакетЗапроса Из РезультатЗапроса Цикл
		Выборка = ПакетЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИмяФайла = Выборка.ПолноеНаименование + ?(Выборка.Расширение = "", "", "." + Выборка.Расширение);
			СоотвВложения.Вставить(ИмяФайла, РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка));
			Если ЕстьПодсистемаЭлектроннаяПодпись Тогда
				ЭлектронныеПодписиФайла = МодульЭлектроннаяПодпись.УстановленныеПодписи(Выборка.Ссылка);
				Для каждого ЭП Из ЭлектронныеПодписиФайла Цикл
					Подпись = ЭП.Подпись; // ХранилищеЗначения
					СоотвВложения.Вставить(Выборка.ПолноеНаименование + "-DS("+ ЭП.ПорядковыйНомер + ")." +
						РасширениеДляФайловПодписи, Подпись.Получить());
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИмяЯрлыкаИБ = Неопределено;
	Если ПараметрыПисьма.Свойство("ИмяЯрлыкаИБ", ИмяЯрлыкаИБ) Тогда
		ИмяФайлаВложения = ?(НЕ ПустаяСтрока(ИмяЯрлыкаИБ),
			ИмяЯрлыкаИБ, НСтр("ru = 'Запустить информационную базу';
								|en = 'Start infobase'", КодЯзыкаИсполнителя)) + ".v8i";
		СоотвВложения.Вставить(ИмяФайлаВложения, ПолучитьДвоичныеДанныеЯрлыкаИБ());
		ПараметрыПисьма.Удалить("ИмяЯрлыкаИБ");
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Вложения", СоотвВложения);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецФункции

Функция ПолучитьДвоичныеДанныеЯрлыкаИБ()
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	ТекстЯрлыка = "["+?(ПустаяСтрока(ЗаголовокСистемы), СтрокаСоединения, ЗаголовокСистемы)+"]
		|Connect="+СтрокаСоединения+"
		|App=Auto
		|WA=1";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЯрлыка);	
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции


// Описание
// 
// Параметры:
// 	СписокДокументов - ЗадачаТабличнаяЧасть.БюджетнаяЗадача.СписокДокументов - Описание
// Возвращаемое значение:
// 	Неопределено, ДокументСсылка - Описание
Функция ТекущийДокумент(СписокДокументов)
	
	Возврат ?(СписокДокументов.Количество(), СписокДокументов[СписокДокументов.Количество()-1].Документ, Неопределено);
	
КонецФункции

Функция КоличествоОбрабатываемыхСтрокДереваБюджета(ДеревоВводаБюджетов)
	
	ВсегоСтрокДляОбработки = 0;
	Для Каждого СтрокаВидБюджета Из ДеревоВводаБюджетов.Строки Цикл
		Если ДеревоВводаБюджетов.Строки.Количество() > 0 Тогда
			Для Каждого СтрокаПериод Из СтрокаВидБюджета.Строки Цикл
				Если СтрокаПериод.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаАналитика Из СтрокаПериод.Строки Цикл
						Если Не ЗначениеЗаполнено(СтрокаАналитика.Документ) > 0 Тогда
							ВсегоСтрокДляОбработки = ВсегоСтрокДляОбработки + 1;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если Не ЗначениеЗаполнено(СтрокаПериод.Документ) Тогда
						ВсегоСтрокДляОбработки = ВсегоСтрокДляОбработки + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаВидБюджета.Документ) Тогда
				ВсегоСтрокДляОбработки = ВсегоСтрокДляОбработки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсегоСтрокДляОбработки = 0 Тогда
		ВсегоСтрокДляОбработки = 1;
	КонецЕсли;
	
	Возврат ВсегоСтрокДляОбработки;
	
КонецФункции

Функция ПредставлениеАналитикСтрокиДереваДокументов(СтрокаДерева)
	
	ПредставлениеАналитики = "";
	
	Если ЗначениеЗаполнено(СтрокаДерева.Сценарий) Тогда
		ПредставлениеАналитики = ПредставлениеАналитики + СтрокаДерева.Сценарий + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Организация) Тогда
		ПредставлениеАналитики = ПредставлениеАналитики + СтрокаДерева.Организация + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Подразделение) Тогда
		ПредставлениеАналитики = ПредставлениеАналитики + СтрокаДерева.Подразделение + ", ";
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		Если ЗначениеЗаполнено(СтрокаДерева["Аналитика"+Сч]) Тогда
			ПредставлениеАналитики = ПредставлениеАналитики + СтрокаДерева["Аналитика"+Сч] + ", ";
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеАналитики = Лев(ПредставлениеАналитики,СтрДлина(ПредставлениеАналитики) - 2);
	
	Возврат ПредставлениеАналитики;
	
КонецФункции

// Приводит типы аналитик статей бюджетов в настройках действия к метаданным текущей конфигурации
//
Процедура ОбновитьНастройкиДействия() Экспорт
	
	Выборка = Выбрать();
	Пока Выборка.Следующий() Цикл
			
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		НастройкаДействия = Объект.НастройкаДействия.Получить();
		
		Если НастройкаДействия <> Неопределено И ТипЗнч(НастройкаДействия) = Тип("ТаблицаЗначений") Тогда
			Если НастройкаДействия.Колонки.Найти("Имя") <> Неопределено
				И НастройкаДействия.Колонки.Найти("Значение") <> Неопределено Тогда
				
				Для каждого СтрокаТаблицы1 Из НастройкаДействия Цикл
					Если СтрокаТаблицы1.Имя = "АналитикаЗаполненияБюджета" Тогда
						
						Таблица = СтрокаТаблицы1.Значение;
						КопияТаблицы = Таблица.СкопироватьКолонки();
						
						Для инд = 1 по 6 Цикл
							КолонкаАналитики = КопияТаблицы.Колонки.Найти("Аналитика" + Строка(инд));
							Если КолонкаАналитики <> Неопределено Тогда
								КопияТаблицы.Колонки.Удалить(КолонкаАналитики);
								КопияТаблицы.Колонки.Добавить("Аналитика" + Строка(инд),
									Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип);
							КонецЕсли;
						КонецЦикла;
						
						Для каждого СтрокаТаблицы2 Из Таблица Цикл
							ЗаполнитьЗначенияСвойств(КопияТаблицы.Добавить(), СтрокаТаблицы2);
						КонецЦикла;
						
						СтрокаТаблицы1.Значение = КопияТаблицы;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЦикла;
				
				Объект.НастройкаДействия = Новый ХранилищеЗначения(НастройкаДействия);
				Объект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТКА

// Получает структуру доступности аналитик "Экземпляра бюджета" по настройкам
// активной бюджетной задачи.
// 
// Параметры:
//  Документ - ДокументСсылка.ЭкземплярБюджета, Неопределено - ссылка на документ "Экземпляр бюджета"
//           или отсутствие отбора по документу.
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого получаем доступность аналитик.
//               - Неопределено - отсутствие отбора по пользователю.
//
// Возвращаемое значение:
//  Структура - Структура доступности аналитик "Экземпляра бюджета":
//   *ДоступностьОрганизация - Булево - Признак доступности организации.
//   *ДоступностьПодразделение - Булево - Признак доступности подразделения.
//   *ДоступностьСценарий - Булево - Признак доступности сценария.
//   *ДоступностьАналитика1 - Булево - Признак доступности аналитики с индексом 1.
//   *ДоступностьАналитика2 - Булево - Признак доступности аналитики с индексом 2.
//   *ДоступностьАналитика3 - Булево - Признак доступности аналитики с индексом 3.
//   *ДоступностьАналитика4 - Булево - Признак доступности аналитики с индексом 4.
//   *ДоступностьАналитика5 - Булево - Признак доступности аналитики с индексом 5.
//   *ДоступностьАналитика6 - Булево - Признак доступности аналитики с индексом 6.
//   *ЕстьАктивнаяЗадача - Булево - Признак наличия активной задачи.
//
Функция ПолучитьДоступностьАналитикЭкземпляраБюджета(Документ = Неопределено, Пользователь = Неопределено) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ДоступностьАналитик = Новый Структура;
	ДоступностьАналитик.Вставить("ДоступностьОрганизация",Ложь);
	ДоступностьАналитик.Вставить("ДоступностьПодразделение",Ложь);
	ДоступностьАналитик.Вставить("ДоступностьСценарий",Ложь);
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ДоступностьАналитик.Вставить("ДоступностьАналитика" + Сч,Ложь);
	КонецЦикла;
	ДоступностьАналитик.Вставить("ЕстьАктивнаяЗадача",Ложь);
	
	Если Документ = Неопределено ИЛИ Пользователь = Неопределено Тогда
		Возврат ДоступностьАналитик;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	БюджетнаяЗадачаСписокДокументов.Ссылка,
		|	БюджетнаяЗадачаСписокДокументов.Ссылка.НастройкаДействия,
		|	БюджетнаяЗадачаСписокДокументов.Ссылка.ЭтапПодготовкиБюджетов.Родитель.Периодичность КАК ПериодичностьЭтапаПодготовкиБюджетов
		|ИЗ
		|	Задача.БюджетнаяЗадача.СписокДокументов КАК БюджетнаяЗадачаСписокДокументов
		|ГДЕ
		|	БюджетнаяЗадачаСписокДокументов.Документ = &ДокументЭБ
		|	И БюджетнаяЗадачаСписокДокументов.Ссылка.Исполнитель = &Исполнитель
		|	И НЕ БюджетнаяЗадачаСписокДокументов.Ссылка.Выполнена";
	
	Запрос.УстановитьПараметр("ДокументЭБ", Документ);
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Реквизиты = Новый Структура("НачалоПериода, ОкончаниеПериода", "НачалоПериода", "ОкончаниеПериода");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, Реквизиты);

	
	Пока Выборка.Следующий() Цикл
		
		ХранилищеНастроекДействия = Выборка.НастройкаДействия; // ХранилищеЗначения
		НастройкаДействия = ХранилищеНастроекДействия.Получить();
		
		Если Не ТипЗнч(НастройкаДействия) = Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДокументов = Новый Массив();
		СписокДокументов.Добавить(Документ);
		
		
		
		ДеревоВводаБюджетов = ПараметрыВводаБюджетовПоНастройкамДействия(НастройкаДействия,
		                                                                 Реквизиты.НачалоПериода,
		                                                                 Реквизиты.ОкончаниеПериода,
		                                                                 Выборка.ПериодичностьЭтапаПодготовкиБюджетов,
		                                                                 СписокДокументов,
		                                                                 Ложь);
		
		НайденнаяСтрокаДерева = ДеревоВводаБюджетов.Строки.Найти(Документ,"Документ",Истина);
		
		Если Не НайденнаяСтрокаДерева = Неопределено Тогда
			Если НайденнаяСтрокаДерева.ДоступностьОрганизация = Истина Тогда
				ДоступностьАналитик.ДоступностьОрганизация = Истина;
			КонецЕсли;
			Если НайденнаяСтрокаДерева.ДоступностьПодразделение = Истина Тогда
				ДоступностьАналитик.ДоступностьПодразделение = Истина;
			КонецЕсли;
			Если НайденнаяСтрокаДерева.ДоступностьСценарий = Истина Тогда
				ДоступностьАналитик.ДоступностьСценарий = Истина;
			КонецЕсли;
			Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
				Если НайденнаяСтрокаДерева["ДоступностьАналитика" + Сч] = Истина Тогда
					ДоступностьАналитик["ДоступностьАналитика" + Сч] = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДоступностьАналитик.ЕстьАктивнаяЗадача = Истина;
		
	КонецЦикла;
	
	Возврат ДоступностьАналитик;

КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецЕсли