#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	РегулярнаяОтправкаСотрудников.ПроверитьИспользуетсяАвтоматическаяОтправкаСотрудников();

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	СформироватьЗаголовокФормы();
	ЗаполнитьПредопределенныеЗначения();
	СохранитьНастройкиДоИзменений();
	
	ИмяОпции = "ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	
	Если Не ФункциональнаяОпцияИспользуется Или Не ПолучитьФункциональнуюОпцию(ИмяОпции) Тогда
		ИспользоватьОтборПоПодразделениям = 0;
		НастроитьФормуБезОтбораПоПодразделениям(ЭтотОбъект);
	КонецЕсли;
	
	ОтправлятьИнформациюЧисло = ?(ИспользоватьОтборПоПодразделениям, 1, 0);
	УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	УстановитьСвойстваЭлементовРезультатаПоследнейОтправки(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСписка", НавигационнаяСсылкаФорматированнойСтроки);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ДатаПоследнейОперации", Неопределено);
	ПараметрыФормы.Вставить("СистемаБронирования", СистемаБронирования);

	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоследниеОтправленныеСотрудники" 
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПоследниеНеотправленныеСотрудники" Тогда
		ПараметрыФормы.ДатаПоследнейОперации = НастройкиДоИзменений.ДатаПоследнейОперации;
	КонецЕсли;

	ПутьКОткрываемойФорме = "Обработка.НастройкаОтправкиСотрудниковБронированияКомандировок.Форма.СписокСотрудников";
	ОткрытьФорму(ПутьКОткрываемойФорме, ПараметрыФормы, ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, , , , РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Модифицированность И Не ЗавершениеРаботы Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?';
										|en = 'The data has changed. Do you want to save the changes?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НеотправляемыеСотрудники.Количество() > ОтправляемыеСотрудники.Количество() Тогда
		МассивОбхода = ОтправляемыеСотрудники.ВыгрузитьЗначения();
		МассивПоиска = НеотправляемыеСотрудники.ВыгрузитьЗначения();
	Иначе
		МассивОбхода = НеотправляемыеСотрудники.ВыгрузитьЗначения();
		МассивПоиска = ОтправляемыеСотрудники.ВыгрузитьЗначения();
	КонецЕсли;
	
	ПроверитьСотрудникиВключенныеВОбаСпискаИсключений(МассивОбхода, МассивПоиска, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправлятьИнформациюЧислоПриИзменении(Элемент)

	ИспользоватьОтборПоПодразделениям = ?(ОтправлятьИнформациюЧисло = 1, Истина, Ложь);
	УстановитьСвойствоМодифицированностьФормы("ИспользоватьОтборПоПодразделениям", ИспользоватьОтборПоПодразделениям);
	УстановитьДоступностьЭлементовФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОтбораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	РегулярнаяОтправкаСотрудниковФормыКлиент.ПодразделенияОтбораОбработкаВыбора(ЭтотОбъект, 
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	УстановитьСвойствоМодифицированностьФормы(Элемент.Имя, ПодразделенияОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОтбораПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеотправляемыеСотрудникиПриИзменении(Элемент)
	УстановитьСвойствоМодифицированностьФормы(Элемент.Имя, НеотправляемыеСотрудники.ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура НеотправляемыеСотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьСвойствоМодифицированностьФормы(Элемент.Имя, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправляемыеСотрудникиПриИзменении(Элемент)
	УстановитьСвойствоМодифицированностьФормы(Элемент.Имя, ОтправляемыеСотрудники.ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура ОтправляемыеСотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьСвойствоМодифицированностьФормы(Элемент.Имя, ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)

	Если Модифицированность Тогда
		ОптимизироватьСписки();
		Если ПроверитьЗаполнение() Тогда
			СохранитьНастройкиИВыполнитьОтправку(Ложь, Истина);
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если Модифицированность Тогда
		ОптимизироватьСписки();
		Если ПроверитьЗаполнение() Тогда
			РезультатСохранения = СтруктураРезультатСохраненияНастройкиНаСервере();
			СохранитьНастройкиНаСервере(РезультатСохранения);
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуСейчас(Команда)

	Если Модифицированность Тогда
		ПоказатьВопросПередОтправкой();
	Иначе
		РезультатСохранения = СтруктураРезультатСохраненияНастройкиНаСервере();
		СохранитьНастройкиНаСервере(РезультатСохранения);
		Если Не ЕстьДанныеДляОтправки() Тогда
			ТекстСообщения = НСтр("ru = 'Данные для отправки не найдены.';
									|en = 'No information to send is found.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗарегистрироватьИзмененияСотрудниковПринудительноНаСервере(СистемаБронирования);
			НачатьОтправкуСотрудников();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ОптимизироватьСписки();
		Если ПроверитьЗаполнение() Тогда
			СохранитьНастройкиИВыполнитьОтправку(Ложь, Истина);
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(Форма)

	Если Форма.ИспользоватьОтборПоПодразделениям Тогда
		Форма.Элементы.ПодразделенияОтбора.Доступность = Истина;
		Форма.Элементы.НеотправляемыеСотрудники.Доступность = Истина;
		Форма.Элементы.ОтправляемыеСотрудники.Доступность = Истина;
	Иначе
		Форма.Элементы.ПодразделенияОтбора.Доступность = Ложь;
		Форма.Элементы.НеотправляемыеСотрудники.Доступность = Истина;
		Форма.Элементы.ОтправляемыеСотрудники.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьФормуБезОтбораПоПодразделениям(Форма)
	
	Форма.Элементы.ОтправлятьИнформациюЧисло.Видимость = Ложь;
	Форма.Элементы.ПодразделенияОтбора.Видимость = Ложь;
	Форма.Элементы.ОтправляемыеСотрудники.Видимость = Ложь;
	Форма.Элементы.НеотправляемыеСотрудники.РасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Информация будет отправляться по всем сотрудникам, кроме перечисленных';
			|en = 'Information about all employees except for the listed ones will be sent'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовРезультатаПоследнейОтправки(Форма)

	Если Форма.НастройкиДоИзменений.ДатаПоследнейОперации = Неопределено Тогда
		Форма.Элементы.РезультатПоследнейОтправкиПояснение.Заголовок = НСтр("ru = 'Отправка не выполнялась';
																			|en = 'Not sent'");
		Форма.Элементы.РезультатПоследнейОтправкиПояснение.ЦветФона = Форма.ЦветаФона["Информация"];
		Форма.Элементы.РезультатПоследнейОтправкиГруппа.ЦветФона = Форма.ЦветаФона["Информация"];
		Форма.Элементы.РезультатПоследнейОтправкиКартинка.Картинка = Форма.КартинкиФормы["Информация"];
	Иначе
		Форма.Элементы.РезультатПоследнейОтправкиПояснение.ЦветФона = Форма.ЦветаФона["Информация"];
		Форма.Элементы.РезультатПоследнейОтправкиГруппа.ЦветФона = Форма.ЦветаФона["Информация"];
		Форма.Элементы.РезультатПоследнейОтправкиКартинка.Картинка = Форма.КартинкиФормы["Информация"];

		ДатаПоследнейОперации = Форма.НастройкиДоИзменений.ДатаПоследнейОперации;
		ЧислоОтправленных = Форма.НастройкиДоИзменений.ЧислоОтправленных;
		ЧислоНеотправленных = Форма.НастройкиДоИзменений.ЧислоНеотправленных;

		РезультатПоследнейОтправкиТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Последняя отправка выполнялась %1';
				|en = 'Last sent %1'"), Формат(ДатаПоследнейОперации, "ДЛФ=DT"));

		Если ЧислоОтправленных <> 0 Тогда
			РезультатПоследнейОтправкиТекст = РезультатПоследнейОтправкиТекст + Символы.НПП
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<a href=""ПоследниеОтправленныеСотрудники"">Отправлено %1</a>",
			Формат(ЧислоОтправленных, "ЧЦ=6; ЧН=; ЧГ=0"));
		КонецЕсли;

		Если ЧислоНеотправленных <> 0 Тогда
			РезультатПоследнейОтправкиТекст = РезультатПоследнейОтправкиТекст + Символы.НПП
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<a href=""ПоследниеНеотправленныеСотрудники"">Не отправлено %1</a>",
			Формат(ЧислоНеотправленных, "ЧЦ=6; ЧН=; ЧГ=0"));
		КонецЕсли;

		Если Форма.РезультатВыполненияДлительнойОперации <> Неопределено Тогда
			Если ЗначениеЗаполнено(Строка(Форма.РезультатВыполненияДлительнойОперации.ТекстОшибки)) Тогда
				РезультатПоследнейОтправкиТекст = РезультатПоследнейОтправкиТекст + Символы.НПП
				+ Строка(Форма.РезультатВыполненияДлительнойОперации.ТекстОшибки);
				Форма.Элементы.РезультатПоследнейОтправкиПояснение.ЦветФона = Форма.ЦветаФона["НеудачнаяОтправка"];
				Форма.Элементы.РезультатПоследнейОтправкиГруппа.ЦветФона = Форма.ЦветаФона["НеудачнаяОтправка"];
			КонецЕсли;
		КонецЕсли;

		Форма.Элементы.РезультатПоследнейОтправкиПояснение.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(РезультатПоследнейОтправкиТекст);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()

	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Настройка отправки информации о сотрудниках в систему бронирования командировок %1';
			|en = 'Set up sending employee information to the system of business trip booking %1'"),
		Строка(СистемаБронирования));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредопределенныеЗначения()

	ЦветаСтруктура = Новый Структура("НеудачнаяОтправка, Информация");
	ЦветаСтруктура.НеудачнаяОтправка = ЦветаСтиля.ОшибкиБронированияКомандировокФонЦвет;
	ЦветаСтруктура.Информация = ЦветаСтиля.ЦветФонаПодсказки;
	ЦветаФона = Новый ФиксированнаяСтруктура(ЦветаСтруктура);

	КартинкиСтруктура = Новый Структура("НеудачнаяОтправка, Информация");
	КартинкиСтруктура.НеудачнаяОтправка = БиблиотекаКартинок.Удалить;
	КартинкиСтруктура.Информация = БиблиотекаКартинок.Информация;
	КартинкиФормы = Новый ФиксированнаяСтруктура(КартинкиСтруктура);

	ТекстОтправкаСотрудников = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправка информации о сотрудниках в систему %1';
			|en = 'Send employee information to %1 system'"), Строка(СистемаБронирования));

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДоИзменений()

	НастройкиДоИзменений = РегулярнаяОтправкаСотрудников.НастройкиОтправкиСотрудников(СистемаБронирования);
	ИспользоватьОтборПоПодразделениям = НастройкиДоИзменений.ИспользоватьОтборПоПодразделениям;

	ПодразделенияОтбора.Очистить();
	Для Каждого Строка Из НастройкиДоИзменений.ПодразделенияОтбора Цикл
		ПодразделенияОтбора.Добавить(Строка.Значение,,Строка.Пометка);
	КонецЦикла;

	ОтправляемыеСотрудники.ЗагрузитьЗначения(НастройкиДоИзменений.ОтправляемыеСотрудники.ВыгрузитьЗначения());
	НеотправляемыеСотрудники.ЗагрузитьЗначения(НастройкиДоИзменений.НеотправляемыеСотрудники.ВыгрузитьЗначения());

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере(РезультатСохранения)

	НовыеНастройки = ПрочитатьНовыеНастройки();
	РегулярнаяОтправкаСотрудников.СохранитьНастройкиОтправкиСотрудников(НовыеНастройки, РезультатСохранения);

КонецПроцедуры

&НаСервере
Процедура УдалитьИзСпискаПустыеСтроки(Список)

	УдаляемыеСтроки = Новый Массив;

	Для Каждого СтрокаСписка Из Список Цикл
		Если Не ЗначениеЗаполнено(СтрокаСписка.Значение) Тогда
			УдаляемыеСтроки.Добавить(СтрокаСписка);
		КонецЕсли;
	КонецЦикла;

	Если УдаляемыеСтроки.Количество() > 0 Тогда
		Для Каждого Элемент Из УдаляемыеСтроки Цикл
			Список.Удалить(Элемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПередОтправкой()

	ВариантыОтвета = Новый СписокЗначений;
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да';
														|en = 'Yes'"));
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет';
														|en = 'No'"));
	ОбработчикОтвета = Новый ОписаниеОповещения("ВыполнитьОтправкуПослеОтвета", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнить отправку информации о сотрудниках в систему %1 сейчас?';
			|en = 'Send employee information to %1 system now?'"), Строка(СистемаБронирования));
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, ВариантыОтвета,,,ТекстОтправкаСотрудников);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуПослеОтвета(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СохранитьНастройкиИВыполнитьОтправку(Ложь, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиИВыполнитьОтправку(ПринудительнаяОтправка, ЗакрыватьФорму)

	РезультатСохранения = СтруктураРезультатСохраненияНастройкиНаСервере();
	СохранитьНастройкиНаСервере(РезультатСохранения);

	Если РезультатСохранения.Выполнено Тогда
		Если ПринудительнаяОтправка Тогда
			ЗарегистрироватьИзмененияСотрудниковПринудительноНаСервере(СистемаБронирования);
		КонецЕсли;
		НачатьОтправкуСотрудников(ЗакрыватьФорму);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки отправки не сохранены. %1';
				|en = 'Sending settings are not saved. %1'"), РезультатСохранения.ТекстОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИзмененияСотрудниковПринудительноНаСервере(СистемаБронирования)

	РегулярнаяОтправкаСотрудников.ЗарегистрироватьИзмененияСотрудниковПринудительно(СистемаБронирования);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойствоМодифицированностьФормы(ИмяЭлемента, РезультатВыбора)

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НастройкиДоИзменений.ИспользоватьОтборПоПодразделениям <> ?(ИмяЭлемента = "ИспользоватьОтборПоПодразделениям", РезультатВыбора, ИспользоватьОтборПоПодразделениям)
		Или Не СпискиИдентичныНаСервере(НастройкиДоИзменений.ПодразделенияОтбора, ?(ИмяЭлемента = "ПодразделенияОтбора", РезультатВыбора, ПодразделенияОтбора))
		Или Не СпискиИдентичныНаСервере(НастройкиДоИзменений.ОтправляемыеСотрудники.ВыгрузитьЗначения(), ?(ИмяЭлемента = "ОтправляемыеСотрудники", РезультатВыбора, ОтправляемыеСотрудники))
		Или Не СпискиИдентичныНаСервере(НастройкиДоИзменений.НеотправляемыеСотрудники.ВыгрузитьЗначения(), ?(ИмяЭлемента = "НеотправляемыеСотрудники", РезультатВыбора, НеотправляемыеСотрудники)) Тогда
		Модифицированность = Истина;
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьДублиВСписке(Список)

	Если Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивЭлементов = Список.ВыгрузитьЗначения();
	МассивБезДублей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭлементов);

	Список.ЗагрузитьЗначения(МассивБезДублей);

КонецПроцедуры

&НаСервере
Функция СпискиИдентичныНаСервере(СписокДоИзменений,СписокПослеИзменений)

	Возврат ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СписокДоИзменений, СписокПослеИзменений);

КонецФункции

&НаСервере
Процедура ПроверитьСотрудникиВключенныеВОбаСпискаИсключений(МассивОбхода, МассивПоиска, Отказ)

	МассивОшибок = Новый Массив;

	Для Каждого Элемент Из МассивОбхода Цикл
		Если МассивПоиска.Найти(Элемент) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если МассивОшибок.Найти(Элемент) = Неопределено Тогда
			МассивОшибок.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;

	Если МассивОшибок.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сотрудник может находиться только в одном списке исключений. Пожалуйста, исправьте информацию.';
				|en = 'Employee must be only in one exception list. Correct the information.'"),,,, Отказ);
		Для Каждого Элемент Из МассивОшибок Цикл
			ОбщегоНазначения.СообщитьПользователю(Строка(Элемент));
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПрочитатьНовыеНастройки()

	НовыеНастройки = РегулярнаяОтправкаСотрудников.СтруктураНастройкаОтправкиСотрудников();
	НовыеНастройки.СистемаБронирования = СистемаБронирования;
	НовыеНастройки.ИспользоватьОтборПоПодразделениям = ИспользоватьОтборПоПодразделениям;
	НовыеНастройки.НеотправляемыеСотрудники.ЗагрузитьЗначения(НеотправляемыеСотрудники.ВыгрузитьЗначения());
	НовыеНастройки.ОтправляемыеСотрудники.ЗагрузитьЗначения(ОтправляемыеСотрудники.ВыгрузитьЗначения());

	Для Каждого Элемент Из ПодразделенияОтбора Цикл
		НовыеНастройки.ПодразделенияОтбора.Добавить(Элемент.Значение,,Элемент.Пометка);
	КонецЦикла;

	Возврат НовыеНастройки;

КонецФункции

&НаСервере
Функция ЕстьДанныеДляОтправки()

	НовыеНастройки = ПрочитатьНовыеНастройки();
	Если НовыеНастройки.ИспользоватьОтборПоПодразделениям Тогда
		Если НовыеНастройки.ПодразделенияОтбора.Количество() = 0
			И НовыеНастройки.НеотправляемыеСотрудники.Количество() = 0
			И НовыеНастройки.ОтправляемыеСотрудники.Количество() = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Сотрудники = РегулярнаяОтправкаСотрудников.СотрудникиБронированияКомандировок(СистемаБронирования, Неопределено, Неопределено, Неопределено);
		Возврат ?(Сотрудники.Количество() = 0, Ложь, Истина);
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция СтруктураРезультатСохраненияНастройкиНаСервере()

	Возврат РегулярнаяОтправкаСотрудников.СтруктураРезультатСохраненияНастройки();

КонецФункции

&НаКлиенте
Процедура НачатьОтправкуСотрудников(ЗакрыватьФорму = Ложь)

	РезультатВыполненияДлительнойОперации = Неопределено;
	ДлительнаяОперация = НачатьОтправкуСотрудниковНаСервере(УникальныйИдентификатор, СистемаБронирования);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрыватьФорму", ЗакрыватьФорму);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьОтправкуСотрудников", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьОтправкуСотрудниковНаСервере(ИдентификаторФормы, СистемаБронирования)

	ПараметрыПроцедуры = Новый Структура("СистемаБронирования, ФизическоеЛицо");
	ПараметрыПроцедуры.СистемаБронирования = СистемаБронирования;
	ПараметрыПроцедуры.ФизическоеЛицо = Неопределено;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправка информации о сотрудниках в систему %1';
			|en = 'Send employee information to %1 system'"), Строка(СистемаБронирования));
		
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "РегулярнаяОтправкаСотрудников.ОтправитьСотрудниковВСистемуБронированияДлительнаяОперация",
		ПараметрыПроцедуры);

КонецФункции

&НаКлиенте
Процедура ЗавершитьОтправкуСотрудников(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	ЗаполнитьРезультатОтправкиСотрудников(Результат.АдресРезультата);
	
	Если ДополнительныеПараметры.ЗакрыватьФорму Тогда
		Закрыть();
	Иначе
		ЗаполнитьРезультатОтправкиСотрудников(Результат.АдресРезультата);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатОтправкиСотрудников(АдресРезультата)

	РезультатВыполненияДлительнойОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
	СохранитьНастройкиДоИзменений();
	УстановитьСвойстваЭлементовРезультатаПоследнейОтправки(ЭтотОбъект);
	Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатСохранения = СтруктураРезультатСохраненияНастройкиНаСервере();
		СохранитьНастройкиНаСервере(РезультатСохранения);
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОптимизироватьСписки()

	УдалитьИзСпискаПустыеСтроки(ПодразделенияОтбора);
	УдалитьИзСпискаПустыеСтроки(НеотправляемыеСотрудники);
	УдалитьИзСпискаПустыеСтроки(ОтправляемыеСотрудники);
	
	УдалитьДублиВСписке(НеотправляемыеСотрудники);
	УдалитьДублиВСписке(ОтправляемыеСотрудники);

КонецПроцедуры

#КонецОбласти