#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Заголовок, ФизическоеЛицо, ЗакрыватьПриЗакрытииВладельца");
	ЗаполнитьПредопределенныеЗначения();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	СохранитьНастройкуДоИзменений();
	ВариантОтправкиЧисло = ВычислитьВариантОтправки();
	УстановитьСвойстваЭлементовФормы();

	НачатьПолучениеДанныхСтатусаОтправкиСотрудникаПоУсловию();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантОтправкиПриИзменении(Элемент)
	УстановитьСвойстваВариантаОтправки();
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)

	Если Модифицированность Тогда
		Если СотрудникУволен() Тогда
			ПоказатьПредупрежденияПоУволенномуСотруднику();
		Иначе
			СохранитьНастройкуИВыполнитьОтправку(Ложь);
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)

	Если Модифицированность Тогда
		Если СотрудникУволен() Тогда
			ПоказатьПредупрежденияПоУволенномуСотруднику();
			Закрыть();
		Иначе
			ПоказатьВопросПередОтправкой();
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуСейчас(Команда)

	Если СотрудникУволен() Тогда
		ПоказатьПредупрежденияПоУволенномуСотруднику();
	Иначе
		Если Модифицированность Тогда
			ПоказатьВопросПередОтправкой();
		Иначе
			ЗарегистрироватьИзмененияСотрудникаПринудительноНаСервере(СистемаБронирования, ФизическоеЛицо);
			НачатьОтправкуСотрудника();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьВопросПередОтправкой()

	ТекстФИО = Строка(ФизическоеЛицо);

	ВариантыОтвета = Новый СписокЗначений;
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да';
														|en = 'Yes'"));
	ВариантыОтвета.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет';
														|en = 'No'"));
	ОбработчикОтвета = Новый ОписаниеОповещения("ВыполнитьОтправкуПослеОтвета", ЭтотОбъект);

	Если ВариантОтправкиЧисло = 0 И Отправляется Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудник %1 будет включен в список лиц, направляемых в систему бронирования командировок, в соответствии с настройкой по подразделениям.
				|После этого любые изменения личных данных будут отправляться автоматически. Продолжить?';
				|en = 'The %1 employee will be included in the list of people sent to the business trip booking system in accordance with business unit setup.
				|After that, any changes to personal data will be sent automatically. Continue?'"),
				ТекстФИО);
	ИначеЕсли ВариантОтправкиЧисло = 0 И Не Отправляется Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудник %1 будет исключен из списка лиц, направляемых в систему бронирования командировок, в соответствии с настройкой по подразделениям.
				|После этого любые изменения личных данных отправляться не будут. Продолжить?';
				|en = 'The %1 employee will be excluded from the list of people sent to the business trip booking system in accordance with business unit setup.
				|After that, any changes to personal data will not be sent. Continue?'"),
				ТекстФИО);
	ИначеЕсли ВариантОтправкиЧисло = 1 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудник %1 будет включен в список лиц, направляемых в систему бронирования командировок, вне зависимости от настройки по подразделениям.
				|После этого любые изменения личных данных будут отправляться автоматически. Продолжить?';
				|en = 'The %1 employee will be included in the list of people sent to the business trip booking system, regardless of business unit setup.
				|After that, any changes to personal data will be sent automatically. Continue?'"),
				ТекстФИО);
	ИначеЕсли ВариантОтправкиЧисло = 2 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудник %1 будет исключен из списка лиц, направляемых в систему бронирования командировок, вне зависимости от настройки по подразделениям.
				|После этого любые изменения личных данных отправляться не будут. Продолжить?';
				|en = 'The %1 employee will be excluded from the list of people sent to the business trip booking system, regardless of business unit setup.
				|After that, any changes to personal data will not be sent. Continue?'"),
				ТекстФИО);
	КонецЕсли;
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, ВариантыОтвета,,,ТекстОтправкаСотрудника);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуИВыполнитьОтправку(ПринудительнаяОтправка)

	РезультатСохранения = СтруктураРезультатСохраненияНастройкиНаСервере();
	СохранитьНастройкуНаСервере(РезультатСохранения);

	Если РезультатСохранения.Выполнено Тогда
		Если ПринудительнаяОтправка Тогда
			ЗарегистрироватьИзмененияСотрудникаПринудительноНаСервере(СистемаБронирования, ФизическоеЛицо);
		КонецЕсли;
		НачатьОтправкуСотрудника();
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройка отправки не сохранена. %1';
				|en = 'Sending setting is not saved. %1'"), РезультатСохранения.ТекстОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуПослеОтвета(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	СохранитьНастройкуИВыполнитьОтправку(Ложь);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуНаСервере(РезультатСохранения)

	НоваяНастройка = ПрочитатьНовуюНастройку();
	РегулярнаяОтправкаСотрудников.СохранитьНастройкуОтправкиСотрудника(НоваяНастройка, РезультатСохранения);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()

	УстановитьСвойстваЭлементовРезультатаПоследнейОтправки();
	УстановитьСвойстваВариантаОтправки();

КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовРезультатаПоследнейОтправки()

	Если НастройкаДоИзменений.ДатаУдачнойОтправки = Неопределено И НастройкаДоИзменений.ДатаНеудачнойОтправки = Неопределено Тогда

		Элементы.РезультатПоследнейОтправкиПояснение.Заголовок = НСтр("ru = 'Отправка не выполнялась';
																		|en = 'Not sent'");
		Элементы.РезультатПоследнейОтправкиПояснение.ЦветФона = ЦветаФона["Информация"];
		Элементы.РезультатПоследнейОтправкиГруппа.ЦветФона = ЦветаФона["Информация"];
		Элементы.РезультатПоследнейОтправкиКартинка.Картинка = КартинкиФормы["Информация"];

	ИначеЕсли НастройкаДоИзменений.ДатаУдачнойОтправки < НастройкаДоИзменений.ДатаНеудачнойОтправки Тогда

		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Последняя отправка не выполнена %1 %2';
																							|en = 'Last sending failed %1 %2'"),
			Формат(НастройкаДоИзменений.ДатаНеудачнойОтправки, "ДЛФ=DT"), СокрЛП(НастройкаДоИзменений.Комментарий)));
		Если РезультатОтправкиСотрудника <> Неопределено Тогда
			Если ЗначениеЗаполнено(РезультатОтправкиСотрудника.ТекстОшибки)
				И СокрЛП(РезультатОтправкиСотрудника.ТекстОшибки) <> СокрЛП(НастройкаДоИзменений.Комментарий) Тогда
				ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '|%1';
						|en = '|%1'"), СокрЛП(РезультатОтправкиСотрудника.ТекстОшибки)));
			КонецЕсли;
		КонецЕсли;
		Элементы.РезультатПоследнейОтправкиПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
		Элементы.РезультатПоследнейОтправкиПояснение.ЦветФона = ЦветаФона["НеудачнаяОтправка"];
		Элементы.РезультатПоследнейОтправкиГруппа.ЦветФона = ЦветаФона["НеудачнаяОтправка"];
		Элементы.РезультатПоследнейОтправкиКартинка.Картинка = КартинкиФормы["НеудачнаяОтправка"];

	ИначеЕсли (НастройкаДоИзменений.ДатаУдачнойОтправки > НастройкаДоИзменений.ДатаНеудачнойОтправки)
		Или (НастройкаДоИзменений.ДатаУдачнойОтправки <> Неопределено
		И НастройкаДоИзменений.ДатаНеудачнойОтправки = Неопределено) Тогда

		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Последняя отправка выполнена %1';
				|en = 'Last sending is completed %1'"), Формат(НастройкаДоИзменений.ДатаУдачнойОтправки, "ДЛФ=DT")));
		Элементы.РезультатПоследнейОтправкиПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
		Элементы.РезультатПоследнейОтправкиПояснение.ЦветФона = ЦветаФона["Информация"];
		Элементы.РезультатПоследнейОтправкиГруппа.ЦветФона = ЦветаФона["Информация"];
		Элементы.РезультатПоследнейОтправкиКартинка.Картинка = КартинкиФормы["Информация"];

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредопределенныеЗначения()

	ЦветаСтруктура = Новый Структура("НеудачнаяОтправка, Информация");
	ЦветаСтруктура.НеудачнаяОтправка = ЦветаСтиля.ОшибкиБронированияКомандировокФонЦвет;
	ЦветаСтруктура.Информация = ЦветаСтиля.ЦветФонаПодсказки;

	ЦветаФона = Новый ФиксированнаяСтруктура(ЦветаСтруктура);

	КартинкиСтруктура = Новый Структура("НеудачнаяОтправка, Информация, ЗеленыйШар, СерыйШар");
	КартинкиСтруктура.НеудачнаяОтправка = БиблиотекаКартинок.Удалить;
	КартинкиСтруктура.Информация = БиблиотекаКартинок.Информация;
	КартинкиСтруктура.ЗеленыйШар = БиблиотекаКартинок.ЗеленыйШар;
	КартинкиСтруктура.СерыйШар = БиблиотекаКартинок.СерыйШар;

	КартинкиФормы = Новый ФиксированнаяСтруктура(КартинкиСтруктура);

	ТекстОтправкаСотрудника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправка информации о сотруднике в систему %1';
			|en = 'Send employee information to %1 system'"), Строка(СистемаБронирования));

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуДоИзменений()

	НастройкаДоИзменений = РегулярнаяОтправкаСотрудников.НастройкаОтправкиСотрудника(СистемаБронирования, ФизическоеЛицо);

КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваВариантаОтправки()

	Если ВариантОтправкиЧисло = 0 Тогда

		ПричинаОтправки = Перечисления.ПричиныОтправкиСотрудниковБронированияКомандировок.ПоУсловию;
		Отправляется = Ложь;

		Если ДанныеСтатуса = Неопределено Тогда
			Элементы.СтатусОтправкиГруппа.Видимость = Ложь;
			Возврат;
		КонецЕсли;

		Отправляется = ДанныеСтатуса.ОтправляетсяПоУсловию;
		ЧислоПодразделений = ДанныеСтатуса.ПодразделенияМассив.Количество();

		ТекстПодразделениеПодразделения = "";
		ТекстВключеноВключены = "";
		ПодразделенияСотрудника = "";
		ТекстНеОтправляется = "";
		
		НавигационнаяСсылка = "e1cib/app/Обработка.НастройкаОтправкиСотрудниковБронированияКомандировок";
		СсылкаСписокОтправки = Новый ФорматированнаяСтрока(НСтр("ru = 'Список отправки';
																|en = 'Sending list'"),,,,НавигационнаяСсылка);

		ЧастиСтроки = Новый Массив;
		Если ЧислоПодразделений > 0 Тогда
			ПодразделенияСотрудника = Новый ФорматированнаяСтрока(СтрСоединить(ДанныеСтатуса.ПодразделенияМассив, Символы.ПС));
			ТекстПодразделениеПодразделения = ?(ЧислоПодразделений = 1, НСтр("ru = 'подразделение';
																			|en = 'business unit'"), НСтр("ru = 'подразделения';
																											|en = 'business units'"));
			Если Отправляется Тогда
				ТекстНеОтправляется = НСтр("ru = 'отправляется';
											|en = 'sending'");
				ТекстВключеноВключены = ?(ЧислоПодразделений = 1, НСтр("ru = 'включено';
																		|en = 'enabled'"), НСтр("ru = 'включены';
																								|en = 'enabled'"));
			Иначе
				ТекстНеОтправляется = НСтр("ru = 'не отправляется';
											|en = 'cannot send'");
				ТекстВключеноВключены = ?(ЧислоПодразделений = 1, НСтр("ru = 'не включено';
																		|en = 'disabled'"), НСтр("ru = 'не включены';
																									|en = 'disabled'"));
			КонецЕсли;
			ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Информация о сотруднике %1, %2 %3, %4 в';
					|en = 'Information on employee %1, %2 %3, %4 in'"),
				ТекстНеОтправляется, ТекстПодразделениеПодразделения, ПодразделенияСотрудника, ТекстВключеноВключены));
			ЧастиСтроки.Добавить(" ");
			ЧастиСтроки.Добавить(СсылкаСписокОтправки);
		Иначе
			ЧастиСтроки.Добавить(НСтр("ru = 'Информация о сотруднике не отправляется. Сотрудник не работает.';
										|en = 'Cannot send the employee information. The employee does not work.'"));
		КонецЕсли;

		Элементы.СтатусОтправкиПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
		Элементы.СтатусОтправкиГруппа.Видимость = Истина;
		Элементы.СтатусОтправкиГруппа.ЦветФона = ЦветаФона["Информация"];
		Элементы.СтатусОтправкиКартинка.Картинка = ?(Отправляется, КартинкиФормы["ЗеленыйШар"], КартинкиФормы["СерыйШар"]);

	ИначеЕсли ВариантОтправкиЧисло = 1 Или ВариантОтправкиЧисло = 2 Тогда

		ПричинаОтправки = Перечисления.ПричиныОтправкиСотрудниковБронированияКомандировок.Непосредственно;
		Отправляется = ?(ВариантОтправкиЧисло = 1, Истина, Ложь);

		Элементы.СтатусОтправкиГруппа.Видимость = Ложь;

	КонецЕсли;

	Модифицированность = ?((НастройкаДоИзменений.ПричинаОтправки <> ПричинаОтправки Или НастройкаДоИзменений.Отправляется <> Отправляется), Истина, Ложь);

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИзмененияСотрудникаПринудительноНаСервере(СистемаБронирования, ФизическоеЛицо)

	РегулярнаяОтправкаСотрудников.ЗарегистрироватьИзмененияСотрудниковПринудительно(СистемаБронирования, ФизическоеЛицо);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупрежденияПоУволенномуСотруднику()

	ЗаголовокПредупреждения = ТекстОтправкаСотрудника;
	ТекстПредупреждения = НСтр("ru = 'По не работающему сотруднику операции не выполняются.';
								|en = 'Operations are not performed for a non-working employee.'");
	ПоказатьПредупреждение(, ТекстПредупреждения, 10, ЗаголовокПредупреждения);

КонецПроцедуры

&НаСервере
Функция ПрочитатьНовуюНастройку()

	НоваяНастройка = РегулярнаяОтправкаСотрудников.СтруктураНастройкаОтправкиСотрудника();
	НоваяНастройка.СистемаБронирования = СистемаБронирования;
	НоваяНастройка.ФизическоеЛицо = ФизическоеЛицо;
	НоваяНастройка.ПричинаОтправки = ПричинаОтправки;
	НоваяНастройка.Отправляется = Отправляется;

	Возврат НоваяНастройка;

КонецФункции

&НаСервере
Функция СтруктураРезультатСохраненияНастройкиНаСервере()

	Возврат РегулярнаяОтправкаСотрудников.СтруктураРезультатСохраненияНастройки();

КонецФункции

&НаСервере
Функция ВычислитьВариантОтправки()

	Если НастройкаДоИзменений.ПричинаОтправки = Перечисления.ПричиныОтправкиСотрудниковБронированияКомандировок.Непосредственно Тогда
		Возврат ?(НастройкаДоИзменений.Отправляется, 1, 2);
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

&НаСервере
Функция СотрудникУволен()

	Возврат ДанныеСтатуса.Уволен;

КонецФункции

&НаСервере
Процедура НастроитьФормуПриДлительнойОперации(ЭтоНачалоДлительнойОперации)
	
	Элементы.ГруппаДекорацииДлительнойОперации.Видимость = ЭтоНачалоДлительнойОперации;
	Элементы.ВыполнитьОтправкуСейчас.Доступность = Не ЭтоНачалоДлительнойОперации;

КонецПроцедуры

#Область ОтправкаСотрудника

&НаКлиенте
Процедура НачатьОтправкуСотрудника()

	РезультатОтправкиСотрудника = Неопределено;

	ДлительнаяОперация = НачатьОтправкуСотрудникаНаСервере(УникальныйИдентификатор, СистемаБронирования, ФизическоеЛицо);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправка в %1';
			|en = 'Send to %1'"), Строка(СистемаБронирования));
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправка в %1 завершена';
			|en = 'Sent to %1'"), Строка(СистемаБронирования));

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьОтправкуСотрудника", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьОтправкуСотрудникаНаСервере(ИдентификаторФормы, СистемаБронирования, ФизическоеЛицо)

	ПараметрыПроцедуры = Новый Структура("СистемаБронирования, ФизическоеЛицо");
	ПараметрыПроцедуры.СистемаБронирования = СистемаБронирования;
	ПараметрыПроцедуры.ФизическоеЛицо = ФизическоеЛицо;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправка информации о сотруднике в систему %1';
			|en = 'Send employee information to %1system'"), Строка(СистемаБронирования));

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "РегулярнаяОтправкаСотрудников.ОтправитьСотрудниковВСистемуБронированияДлительнаяОперация",
		ПараметрыПроцедуры);

КонецФункции

&НаКлиенте
Процедура ЗавершитьОтправкуСотрудника(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;

	ЗаполнитьРезультатОтправкиСотрудника(Результат.АдресРезультата);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатОтправкиСотрудника(АдресРезультата)

	РезультатОтправкиСотрудника = ПолучитьИзВременногоХранилища(АдресРезультата);
	СохранитьНастройкуДоИзменений();
	УстановитьСвойстваЭлементовРезультатаПоследнейОтправки();
	Модифицированность = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхСтатусаОтправкиСотрудникаПоУсловию

&НаКлиенте
Процедура НачатьПолучениеДанныхСтатусаОтправкиСотрудникаПоУсловию()
	
	НастроитьФормуПриДлительнойОперации(Истина);

	ДанныеСтатуса = Неопределено;
	
	ДлительнаяОперация = НачатьПолучениеДанныхСтатусаОтправкиСотрудникаПоУсловиюНаСервере(УникальныйИдентификатор, ФизическоеЛицо, СистемаБронирования);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Элементы.ГруппаДекорацииДлительнойОперации = Неопределено;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПолучениеДанныхСтатусаОтправкиСотрудникаПоУсловию", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьПолучениеДанныхСтатусаОтправкиСотрудникаПоУсловиюНаСервере(ИдентификаторФормы, ФизическоеЛицо, СистемаБронирования)

	ПараметрыПроцедуры = Новый Структура("СистемаБронирования, ФизическоеЛицо");
	ПараметрыПроцедуры.СистемаБронирования = СистемаБронирования;
	ПараметрыПроцедуры.ФизическоеЛицо = ФизическоеЛицо;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение статуса отправки информации о сотруднике в соответствии с настройкой по подразделениям';
															|en = 'Receive a status of sending employee information in accordance with the setup by business units'");

	Возврат ДлительныеОперации.ВыполнитьВФоне("РегулярнаяОтправкаСотрудников.ДанныеСтатусаОтправкиСотрудникаПоУсловиюДлительнаяОперация", ПараметрыПроцедуры, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ЗавершитьПолучениеДанныхСтатусаОтправкиСотрудникаПоУсловию(Результат, ДополнительныеПараметры) Экспорт

	НастроитьФормуПриДлительнойОперации(Ложь);

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;

	ЗаполнитьРезультатПолученияДанныхСтатусаОтправкиСотрудникаПоУсловию(Результат.АдресРезультата);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатПолученияДанныхСтатусаОтправкиСотрудникаПоУсловию(АдресРезультата)

	ДанныеСтатуса = ПолучитьИзВременногоХранилища(АдресРезультата);
	УстановитьСвойстваВариантаОтправки();

КонецПроцедуры

#КонецОбласти

#КонецОбласти