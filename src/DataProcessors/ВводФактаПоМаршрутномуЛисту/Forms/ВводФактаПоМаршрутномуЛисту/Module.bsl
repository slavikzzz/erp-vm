//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Объект.Ссылка            = Параметры.МаршрутныйЛист;
	Объект.МаршрутныйЛист    = Параметры.МаршрутныйЛист;
	Объект.КлючСвязиОперации = Параметры.КлючСвязи;
	
	ЗаполнитьПоМаршрутномуЛистуВызовСервера(Отказ);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.МаршрутныйЛистПроизводства.ПараметрыУказанияСерий(Объект));
	УстановитьВидимостьЭлементовСерий();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?';
						|en = 'The data has changed. Do you want to save the changes?'");
	Оповещение = Новый ОписаниеОповещения("ЗаписатьДанныеИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		Если ИсточникВыбора.ПараметрыУказанияСерий.ИмяТЧТовары = "МатериалыИУслуги" Тогда
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.МатериалыИУслуги, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
			ТекущиеДанные.Получатель = Объект.Подразделение;
		Иначе
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
			ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования ИЛИ НЕ НоваяСтрока Тогда
		ДанныеСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные;
		Если ДанныеСтроки.Количество + ДанныеСтроки.КоличествоОтклонение < 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательному выпуску.';
											|en = 'Variance from standard should not result in a negative release.'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоУпаковок <> 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Удаление невозможно, т.к. для изделия указан норматив.
									|Вместо удаления необходимо указать нулевой фактический выпуск.';
									|en = 'Cannot remove as a standard is specified for the product.
									|It is required to specify null actual release instead of removal.'"));
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("ВыходныеИзделия", ТекущиеДанные));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",       Новый Структура("Номенклатура", "ТипНоменклатуры"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
		ТекущиеДанные.Получатель = Объект.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.ВыходныеИзделия.ТекущиеДанные, Новый Структура, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНорматива(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииФакта(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокОтклонениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииОтклонения(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Получатель = Объект.Подразделение;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("ВыходныеИзделия", ТекущиеДанные));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц("ВыходныеИзделия", ТекущиеДанные, "Факт"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
			ТекущиеДанные.Получатель = Объект.Подразделение;
		Иначе
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
			ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования ИЛИ НЕ НоваяСтрока Тогда
		ДанныеСтроки = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		Если ДанныеСтроки.Количество + ДанныеСтроки.КоличествоОтклонение < 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательному выпуску.';
										|en = 'Variance from standard should not result in a negative release.'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоУпаковок <> 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Удаление невозможно, т.к. для изделия указан норматив.
									|Вместо удаления необходимо указать нулевой фактический выпуск.';
									|en = 'Cannot remove as a standard is specified for the product.
									|It is required to specify null actual release instead of removal.'"));
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("ВозвратныеОтходы", ТекущиеДанные));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",       Новый Структура("Номенклатура", "ТипНоменклатуры"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
		ТекущиеДанные.Получатель = Объект.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыХарактеристикаПриИзменении(Элемент)
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.ВозвратныеОтходы.ТекущиеДанные, Новый Структура, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ПриИзмененииНорматива(ТекущиеДанные, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ПриИзмененииФакта(ТекущиеДанные, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокОтклонениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ПриИзмененииОтклонения(ТекущиеДанные, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Получатель = Объект.Подразделение;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("ВозвратныеОтходы", ТекущиеДанные));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц("ВозвратныеОтходы", ТекущиеДанные, "Факт"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли; 
	
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.МатериалыИУслуги, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования ИЛИ НЕ НоваяСтрока Тогда
		ДанныеСтроки = Элементы.МатериалыИУслуги.ТекущиеДанные;
		Если ДанныеСтроки.Количество + ДанныеСтроки.КоличествоОтклонение < 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательному потреблению.';
											|en = 'Variance from standard should not result in a negative consumption.'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.МатериалыИУслуги) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения, "МатериалыИУслуги");
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.МатериалыИУслуги);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоУпаковок <> 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Удаление невозможно, т.к. для материала указан норматив.
									|Вместо удаления необходимо указать нулевой фактический расход.';
									|en = 'Cannot remove as the standard is specified for the material.
									|It is required to specify null actual consumption instead of removal.'"));
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("МатериалыИУслуги", ТекущиеДанные));

	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", Объект.Подразделение);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.МатериалыИУслуги);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Новый Структура, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ПриИзмененииНорматива(ТекущиеДанные, "МатериалыИУслуги");
	
	ЗаполнитьДатуРасходаМатериала(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ПриИзмененииФакта(ТекущиеДанные, "МатериалыИУслуги");
	
	ЗаполнитьДатуРасходаМатериала(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокОтклонениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ПриИзмененииОтклонения(ТекущиеДанные, "МатериалыИУслуги");
	
	ЗаполнитьДатуРасходаМатериала(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиМатериалИзрасходованПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	УправлениеПроизводствомВызовСервера.УстановитьДатуПоОтметке(
		ТекущиеДанные.МатериалИзрасходован,
		ТекущиеДанные.ДатаРасхода);
	
	СтруктураДействий = Новый Структура;
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", Объект.Подразделение);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.МатериалыИУслуги);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиДатаРасходаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ТекущиеДанные.МатериалИзрасходован = (ТекущиеДанные.ДатаРасхода <> '000101010000');
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.МатериалыИУслуги, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("МатериалыИУслуги", Элемент.ТекстРедактирования, Элементы.МатериалыИУслуги.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования ИЛИ НЕ НоваяСтрока Тогда
		ДанныеСтроки = Элементы.Трудозатраты.ТекущиеДанные;
		Если ДанныеСтроки.Количество + ДанныеСтроки.КоличествоОтклонение < 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательным трудозатратам.';
										|en = 'Variance from standard should not result in negative labor costs.'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КодСтроки <> 0 Тогда
		СтруктураПоиска = Новый Структура("ВидРабот", ТекущиеДанные.ВидРабот);
		СписокСтрок = Объект.ТрудозатратыИсходные.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Удаление невозможно, т.к. для вида работ должен быть указан норматив.
										|Вместо удаления необходимо указать нулевое фактическое количество.';
										|en = 'Cannot remove as a standard should be specified for the activity kinds.
										|It is required to specify null actual quantity instead of removal.'"));
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыВидРаботПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Трудозатраты.ТекущиеДанные;
	ДанныеСтроки.ДоступноРедактированиеНорматива = Ложь;
	
	// Разрешим редактирование норматива, если по МЛ предусмотрен норматив по данному виду работ.
	Если ЗначениеЗаполнено(ДанныеСтроки.ВидРабот) Тогда
		СтруктураПоиска = Новый Структура("ВидРабот", ДанныеСтроки.ВидРабот);
	  	СписокСтрок = Объект.ТрудозатратыИсходные.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 И СписокСтрок[0].Количество <> 0 Тогда
			ДанныеСтроки.ДоступноРедактированиеНорматива = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДанныеСтроки.ДоступноРедактированиеНорматива И ДанныеСтроки.Количество <> 0 Тогда
		ДанныеСтроки.Количество = 0;
		ПриИзмененииНорматива(ДанныеСтроки, "Трудозатраты");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ПриИзмененииНорматива(ТекущиеДанные, "Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ПриИзмененииФакта(ТекущиеДанные, "Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоОтклонениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ПриИзмененииОтклонения(ТекущиеДанные, "Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьПоМаршрутномуЛисту(Команда)
	
	ТекстВопроса = НСтр("ru = 'Заполнить по маршрутному листу?';
						|en = 'Fill in by the route sheet?'");
	РезультатВопроса = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоМаршрутномуЛистуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоМаршрутномуЛистуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоМаршрутномуЛистуВызовСервера();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ОчиститьСообщения();
	ЗаписатьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	Если ЗаписатьДанные() Тогда
		ОперативныйУчетПроизводстваКлиент.ОповеститьОЗаписиМаршрутныхЛистов(УникальныйИдентификатор,, Объект.МаршрутныйЛист);
		Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьРасходМатериалов(Команда)
	
	МассивСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.МатериалыИУслуги.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ИдентификаторСтроки);
	   	Если ДанныеСтроки.КоличествоФакт <> 0 Тогда
			МассивСтрок.Добавить(ИдентификаторСтроки);
		КонецЕсли; 
	КонецЦикла; 
	
	Если МассивСтрок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо материалы для которых заполнено фактическое количество.';
									|en = 'Materials are required for which actual quantity is filled in.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтметитьРасходМатериаловЗавершение", ЭтотОбъект, МассивСтрок);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			ОбщегоНазначенияКлиент.ДатаСеанса(),
			НСтр("ru = 'Введите дату расхода материалов (работ)';
				|en = 'Enter the material (work) consumption date'"), 
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВыходныеИзделияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВозвратныеОтходыХарактеристика",
																		     "Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "МатериалыИУслугиХарактеристика",
																		     "Объект.МатериалыИУслуги.ХарактеристикиИспользуются");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВыходныеИзделияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВозвратныеОтходы.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыИУслугиНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.МатериалыИУслуги.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары", "МатериалыИУслугиСерия", "Объект.МатериалыИУслуги.СтатусУказанияСерий", "Объект.МатериалыИУслуги.ТипНоменклатуры");
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиУпаковка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыВидРабот.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличество.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ДоступноРедактированиеНорматива");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоИзделийСТипомСтоимостиРассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТолькоПросмотр поля ДатаРасхода
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиМатериалИзрасходован.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиДатаРасхода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КоличествоФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Отметка незаполненного поля ДатаРасхода
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиДатаРасхода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.МатериалИзрасходован");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// 
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To business unit'"));
	
	// 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To business unit'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоМаршрутномуЛистуВызовСервера(Отказ = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Номер,
	|	МаршрутныйЛистПроизводства.Дата,
	|	МаршрутныйЛистПроизводства.Статус,
	|	МаршрутныйЛистПроизводства.Подразделение,
	|	МаршрутныйЛистПроизводства.Спецификация КАК Спецификация,
	|	МаршрутныйЛистПроизводства.СпецификацияПолуфабриката КАК СпецификацияПолуфабриката,
	|	МаршрутныйЛистПроизводства.Спецификация.Представление КАК СпецификацияПредставление,
	|	МаршрутныйЛистПроизводства.Этап.Представление КАК ЭтапПредставление,
	|	МаршрутныйЛистПроизводства.Спецификация.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	МаршрутныйЛистПроизводства.Назначение КАК Назначение,
	|	МаршрутныйЛистПроизводстваОперации.Операция КАК Операция,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|		КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|				И МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|		КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|			ТОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения
	|		КОГДА МаршрутныйЛистПроизводства.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеСформировано)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеЗапланировано)
	|		КОГДА МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|		КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &ОтметкаНаДату
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|	КОНЕЦ КАК СтатусВыполненияОперации
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	|		ПО (МаршрутныйЛистПроизводстваОперации.Ссылка = МаршрутныйЛистПроизводства.Ссылка)
	|			И (МаршрутныйЛистПроизводстваОперации.КлючСвязи = &КлючСвязи)
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка = &МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Характеристика,
	|	ТаблицаВыходныеИзделия.КоличествоУпаковок,
	|	ТаблицаВыходныеИзделия.Количество,
	|	ТаблицаВыходныеИзделия.КоличествоУпаковокОтклонение,
	|	ТаблицаВыходныеИзделия.КоличествоОтклонение,
	|	ТаблицаВыходныеИзделия.Упаковка,
	|	ТаблицаВыходныеИзделия.Получатель,
	|	ТаблицаВыходныеИзделия.ДоляСтоимости,
	|	ТаблицаВыходныеИзделия.КодСтроки,
	|	ТаблицаВыходныеИзделия.КоличествоУпаковокФакт,
	|	ТаблицаВыходныеИзделия.КоличествоФакт,
	|	ВЫБОР
	|		КОГДА ТаблицаВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ТаблицаВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ИЛИ ТаблицаВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ТаблицаВыходныеИзделия.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаВыходныеИзделия.Получатель Ссылка Справочник.Склады ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад)
	|		ИНАЧЕ 
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|	КОНЕЦ КАК НаправлениеВыпуска,
	|	ТаблицаВыходныеИзделия.ОписаниеИзделия КАК ОписаниеИзделия
	|	
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|ГДЕ
	|	ТаблицаВыходныеИзделия.Ссылка = &МаршрутныйЛист
	|	И ТаблицаВыходныеИзделия.КлючСвязиОперации = &КлючСвязи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаВыходныеИзделия.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Характеристика,
	|	ТаблицаВозвратныеОтходы.КоличествоУпаковок,
	|	ТаблицаВозвратныеОтходы.Количество,
	|	ТаблицаВозвратныеОтходы.КоличествоУпаковокОтклонение,
	|	ТаблицаВозвратныеОтходы.КоличествоОтклонение,
	|	ТаблицаВозвратныеОтходы.Упаковка,
	|	ТаблицаВозвратныеОтходы.Получатель,
	|	ТаблицаВозвратныеОтходы.КодСтроки,
	|	ТаблицаВозвратныеОтходы.КоличествоУпаковокФакт,
	|	ТаблицаВозвратныеОтходы.КоличествоФакт,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвратныеОтходы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ТаблицаВозвратныеОтходы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ИЛИ ТаблицаВозвратныеОтходы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ТаблицаВозвратныеОтходы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаВозвратныеОтходы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвратныеОтходы.Получатель Ссылка Справочник.Склады ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад)
	|		ИНАЧЕ 
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|	КОНЕЦ КАК НаправлениеВыпуска,
	|	ТаблицаВозвратныеОтходы.ОписаниеИзделия КАК ОписаниеИзделия
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ТаблицаВозвратныеОтходы
	|ГДЕ
	|	ТаблицаВозвратныеОтходы.Ссылка = &МаршрутныйЛист
	|	И ТаблицаВозвратныеОтходы.КлючСвязиОперации = &КлючСвязи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаВозвратныеОтходы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.Характеристика,
	|	ТаблицаМатериалы.Назначение,
	|	ТаблицаМатериалы.Серия,
	|	ТаблицаМатериалы.СтатусУказанияСерий,
	|	ТаблицаМатериалы.КоличествоУпаковок,
	|	ТаблицаМатериалы.Количество,
	|	ТаблицаМатериалы.КоличествоУпаковокОтклонение,
	|	ТаблицаМатериалы.КоличествоОтклонение,
	|	ТаблицаМатериалы.Упаковка,
	|	ТаблицаМатериалы.СтатьяКалькуляции,
	|	ТаблицаМатериалы.ИспользуетсяАвтовыбор,
	|	ТаблицаМатериалы.ПрименениеМатериала,
	|	ТаблицаМатериалы.СведенияАвтовыбора,
	|	ТаблицаМатериалы.КодСтроки,
	|	ТаблицаМатериалы.КоличествоУпаковокФакт,
	|	ТаблицаМатериалы.КоличествоФакт,
	|	ТаблицаМатериалы.ДатаРасхода,
	|	ТаблицаМатериалы.МатериалИзрасходован,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ТаблицаМатериалы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ИЛИ ТаблицаМатериалы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ТаблицаМатериалы.Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТаблицаМатериалы
	|ГДЕ
	|	ТаблицаМатериалы.Ссылка = &МаршрутныйЛист
	|	И ТаблицаМатериалы.КлючСвязиОперации = &КлючСвязи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаМатериалы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатраты.ВидРабот,
	|	ТаблицаТрудозатраты.Количество,
	|	ТаблицаТрудозатраты.КоличествоОтклонение,
	|	ТаблицаТрудозатраты.Бригада,
	|	ТаблицаТрудозатраты.СтатьяКалькуляции,
	|	ТаблицаТрудозатраты.СодержаниеРабот,
	|	ТаблицаТрудозатраты.КоличествоФакт,
	|	ТаблицаТрудозатраты.КодСтроки,
	|	ИСТИНА КАК ДоступноРедактированиеНорматива
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК ТаблицаТрудозатраты
	|ГДЕ
	|	ТаблицаТрудозатраты.Ссылка = &МаршрутныйЛист
	|	И ТаблицаТрудозатраты.КлючСвязиОперации = &КлючСвязи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТрудозатраты.НомерСтроки";
	
	Запрос.УстановитьПараметр("МаршрутныйЛист", Объект.МаршрутныйЛист);
	Запрос.УстановитьПараметр("КлючСвязи",      Объект.КлючСвязиОперации);
	Запрос.УстановитьПараметр("ОтметкаНаДату",  ТекущаяДатаСеанса());

	НачатьТранзакцию();
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
	  	ЭлементБлокировки = Блокировка.Добавить("Документ.МаршрутныйЛистПроизводства");
  		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.МаршрутныйЛист);
  		Блокировка.Заблокировать(); 
  
		Результат = Запрос.ВыполнитьПакет();
		Выборка = Результат[0].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Объект, Выборка, "Дата,Статус,Спецификация,СпецификацияПолуфабриката,Операция,
													|Назначение,Подразделение,СтатусВыполненияОперации");
		
		Объект.ВыходныеИзделия.Загрузить(Результат[1].Выгрузить());
		Объект.ВозвратныеОтходы.Загрузить(Результат[2].Выгрузить());
		Объект.МатериалыИУслуги.Загрузить(Результат[3].Выгрузить());
		
		ТаблицаТрудозатраты = Результат[4].Выгрузить();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Объект.Трудозатраты.Загрузить(ТаблицаТрудозатраты);
	
	ТаблицаТрудозатраты.Свернуть("ВидРабот", "Количество");
	Объект.ТрудозатратыИсходные.Загрузить(ТаблицаТрудозатраты);
	
	// Если по виду работ предусмотрен нулевой норматив, то запретим редактирование
	Для каждого СтрокаИсходныеТрудозатраты Из Объект.ТрудозатратыИсходные Цикл
		Если СтрокаИсходныеТрудозатраты.Количество = 0 Тогда
			СтруктураПоиска = Новый Структура("ВидРабот", СтрокаИсходныеТрудозатраты.ВидРабот);
   			СписокСтрок = Объект.Трудозатраты.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТрудозатраты Из СписокСтрок Цикл
				СтрокаТрудозатраты.ДоступноРедактированиеНорматива = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Ложь, Истина);
	МаршрутныйЛистСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№%1 от %2';
										|en = 'No. %1 from %2'"), 
									НомерНаПечать, 
									Формат(Выборка.Дата, "ДЛФ=D"));
									
	СпецификацияСтрока = Выборка.СпецификацияПредставление;
	Если Выборка.МногоэтапныйПроизводственныйПроцесс Тогда
		СпецификацияСтрока = СпецификацияСтрока + ", " + Выборка.ЭтапПредставление;
	КонецЕсли;
	
	Если Объект.Назначение.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Назначение", "Видимость", Ложь);
	КонецЕсли; 
	
	// Установим только чтение, если МЛ выполнен или нет прав на изменение
	Если Выборка.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен 
		ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Документы.МаршрутныйЛистПроизводства) Тогда
		ТолькоПросмотр = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписать.Доступность = Ложь;
	КонецЕсли; 
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДанные()

	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МаршрутныйЛистОбъект = Объект.МаршрутныйЛист.ПолучитьОбъект();
	
	ПеренестиДанныеТабличнойЧасти("ВыходныеИзделия",  МаршрутныйЛистОбъект);
	ПеренестиДанныеТабличнойЧасти("ВозвратныеОтходы", МаршрутныйЛистОбъект);
	ПеренестиДанныеТабличнойЧасти("МатериалыИУслуги", МаршрутныйЛистОбъект);
	ПеренестиДанныеТабличнойЧасти("Трудозатраты",     МаршрутныйЛистОбъект);
	
	Попытка
		МаршрутныйЛистОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Возврат Ложь;
	КонецПопытки; 

	Модифицированность = Ложь;
	
	ЗаполнитьПоМаршрутномуЛистуВызовСервера();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПеренестиДанныеТабличнойЧасти(ИмяТабличнойЧасти, МаршрутныйЛистОбъект)

	Для каждого ДанныеСтроки Из Объект[ИмяТабличнойЧасти] Цикл
		СтрокаМаршрутногоЛиста = Неопределено;
		Если ДанныеСтроки.КодСтроки <> 0 Тогда
			СтрокаМаршрутногоЛиста = МаршрутныйЛистОбъект[ИмяТабличнойЧасти].Найти(ДанныеСтроки.КодСтроки, "КодСтроки");
		КонецЕсли;
		Если СтрокаМаршрутногоЛиста = Неопределено Тогда
			СтрокаМаршрутногоЛиста = МаршрутныйЛистОбъект[ИмяТабличнойЧасти].Добавить();
			СтрокаМаршрутногоЛиста.КлючСвязиОперации = Объект.КлючСвязиОперации;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаМаршрутногоЛиста, ДанныеСтроки);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ЗаполнитьСлужебныеРеквизитыВыходныеИзделия();
	
	ЗаполнитьСлужебныеРеквизитыВозвратныеОтходы();
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВыходныеИзделия()
	
	СтруктураДействий = Новый Структура;
	
	Действие = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Действие);
	
	Действие = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Действие);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВыходныеИзделия,
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВозвратныеОтходы()
	
	СтруктураДействий = Новый Структура;
	
	Действие = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Действие);
	
	Действие = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Действие);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвратныеОтходы,
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги()
	
	СтруктураДействий = Новый Структура;
	
	Действие = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Действие);	            	
		
	Действие = Новый Структура("Номенклатура", "Артикул");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Действие);
		
	Действие = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Действие);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги,
		СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУпаковки(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, СтрокаТабличнойЧасти));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "Факт"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
													
	ОперативныйУчетПроизводстваКлиентСервер.ПроверитьОтклонение(СтрокаТабличнойЧасти);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииНорматива(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	ЕстьУпаковки = (ИмяТабличнойЧасти = "ВыходныеИзделия" 
					ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" 
					ИЛИ ИмяТабличнойЧасти = "МатериалыИУслуги");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", ЕстьУпаковки);
	Если ЕстьУпаковки Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, СтрокаТабличнойЧасти));
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииФакта(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииФакта(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииОтклонения(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	ЕстьУпаковки = (ИмяТабличнойЧасти = "ВыходныеИзделия" 
					ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" 
					ИЛИ ИмяТабличнойЧасти = "МатериалыИУслуги");
	
	Если ЕстьУпаковки Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "Отклонение"));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
 	КонецЕсли; 

	Если ЕстьУпаковки Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковок
														+ СтрокаТабличнойЧасти.КоличествоУпаковокОтклонение;

 	КонецЕсли; 

 	СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.Количество + СтрокаТабличнойЧасти.КоличествоОтклонение;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеИЗакрыть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаписатьДанные() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьРасходМатериаловЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ОтметитьРасходМатериаловНаСервере(ВыбраннаяДата, МассивВыделенныхСтрок);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьРасходМатериаловНаСервере(ВыбраннаяДата, МассивВыделенныхСтрок)

	Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
		СтрокаТаблицы = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаТаблицы.ДатаРасхода = ВыбраннаяДата;
		СтрокаТаблицы.МатериалИзрасходован = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуРасходаМатериала(ТекущиеДанные)

	Если ТекущиеДанные.КоличествоФакт = 0 И ТекущиеДанные.ДатаРасхода <> '000101010000' Тогда
		ТекущиеДанные.ДатаРасхода = '000101010000';
		ТекущиеДанные.МатериалИзрасходован = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, ТекущаяСтрока, Суффикс = Неопределено)

	НужноОкруглятьКоличество = Истина;
	
	Если ИмяТабличнойЧасти = "ВыходныеИзделия" ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
		Если ТипЗнч(ТекущаяСтрока.Получатель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			НужноОкруглятьКоличество = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяТабличнойЧасти = "МатериалыИУслуги" Тогда
		НужноОкруглятьКоличество = Ложь;
	КонецЕсли; 
	
	Если НЕ НужноОкруглятьКоличество Тогда
		ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
		Если Суффикс <> Неопределено Тогда
			ПараметрыПересчета.Вставить("Суффикс", Суффикс);
		КонецЕсли; 
		Возврат ПараметрыПересчета;
	КонецЕсли; 
	
	Возврат ?(Суффикс <> Неопределено, Суффикс, Неопределено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииФакта(ТекущаяСтрока, ИмяТабличнойЧасти, СтруктураДействий)

	ЕстьУпаковки = (ИмяТабличнойЧасти = "ВыходныеИзделия" 
					ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" 
					ИЛИ ИмяТабличнойЧасти = "МатериалыИУслуги");
	
	Если ЕстьУпаковки Тогда
		ПараметрыПересчетаКоличестваЕдиниц = ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, ТекущаяСтрока, "Факт");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц);
	КонецЕсли; 
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", ЕстьУпаковки);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.МатериалыИУслугиСерия.Видимость = ПараметрыУказанияСерий.МатериалыИУслуги.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения, ИмяТЧ)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
		ПараметрыУказанияСерий[ИмяТЧ], ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий[ИмяТЧ], Текст, ТекущиеДанные) Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ], ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

#КонецОбласти
//-- Устарело_Производство21