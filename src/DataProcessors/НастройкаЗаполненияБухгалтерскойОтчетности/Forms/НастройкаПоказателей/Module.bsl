#Область Описание

// Форма позволяет редактировать настройки.
// Основной объект, позволяющий это делать (дерево значений, ДанныеФормыДерево) называем РедакторНастроек,
// его элементы (отображение строк дерева, ДанныеФормыЭлементДерева) - Настройка.
// В некоторых случаях, когда в контексте могут быть разные настройки,
// для избежания неоднозначности элемент редактора настроек может называться РедакторНастройки (в единственном числе),
// РедакторПоказателя, РедакторГруппы и т.п.
//
// Редактировать можно как структуру настроек - состав групп и показателей, - так и содержимое показателя,
// то есть, какие данные следует в него включить и как обработать.
// Данные обычно определяются набором каких-то объектов учета, классифицируемых показателями,
// например, номенклатурных групп выручки или статей прочих доходов.
// Такие объекты, как правило, образуют классификаторы, а не соответствуют объектам реального мира.
// См. ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.КлассифицируемыеОбъекты
// В тексте модуля для классифицируемых объектов может использоваться сокращение Объекты.
//
// Дерево настроек предусматривает следующие уровни
// - Подраздел - определяет возможности редактирования и позволяет упростить восприятие списка
// - Группа - группа показателей, содержащая несколько показателей.
//            Уровень может быть пропущен, если группа подразумевает единственный показатель.
// - Показатель, ПоказательОсновной - показатель, в том числе образующий группу из единственного показателя.
//                В последнем случае подчинен непосредственно Подразделам.
//                Пояснение про ПоказательОсновной см. ниже.
// - Объект - классифицируемый объект; использование этого уровня определяется алгоритмом.
//
// Один и тот же показатель отчета может быть расположен в разных группах.
// Например, так могут быть разделены доходы и расходы, отражаемые на нетто-основе.
// В составе показателей могут быть статьи той или иной аналитики.
// Показатели одного алгоритма всегда содержат весь доступный набор статей.
// Это обеспечивается за счет предопределенного (не удаляемого) показателя, включающего статьи, не включенные в другие показатели
// (уровень ПоказательОсновной).
// Редактор отчета обладает двумя особенностями:
// - обеспечивает полноту набора статей - то есть, действия в нем приводят к переносу статей между показателями (включая основной показатель),
//   но не к удалению или добавлению статей
// - зеркалирует операции над показателями, входящими в несколько элементов структуры.
//
// При редактировании структуры отчета часто может понадобиться переносить настройки между родителями.
// Дерево значений не обеспечивает прямую смену родителя, это возможно только через удаление одной настройки и создание другой.
// Такая комбинация действий называется в коде "перенос", вне зависимости от того, какое слово применено в интерфейсе.
// Применительно к изменению порядка настроек (сдвигу элементов) может использоваться слово "перемещение".
//
// Редактор обеспечивает CrUD-набор, со следующими отличиями от обычного дерева значений:
// - для классифицируемых показателями объектов
//  -- Create - добавление объекта приводит к ее переносу из того показателя, где она была ранее, в новый
//  -- Update - перенос объекта из одного показателя в другой
//  -- Delete - удаление статьи приводит к ее переносу в ПоказательОсновной (из него удалять нельзя)
//  Во всех случаях операции приводят к зеркальному отражению.
// - для показателей или групп
//  -- Delete - удаление показателя приводит к переносу всех статей в ПоказательОсновной. ПоказательОсновной удалять нельзя.
//              Удаление группы приводит к удалению всех вложенных показателей, кроме ПоказательОсновной
//              (и, как следствие - к переносу всех вложенных статей в ПоказательОсновной).
//
#КонецОбласти

#Область ОписаниеПеременных

// При редактировании дерева строки могут добавляться программно - см. Область РедактированиеСоставаНастроек.
// Хранение идентификатора позволяет обработать отмену добавления.
&НаКлиенте
Перем ИдентификаторДобавленнойНастройки; // Число, Неопределено

&НаКлиенте
Перем ТекущаяНастройкаОбъект; // см. НовыйТекущаяНастройкаОбъект

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЭтоАдресВременногоХранилища(Параметры.ЗаполняемыеПоказатели) Тогда
		Отказ = Истина;
		Возврат;
	Конецесли;
	
	Если Параметры.Раздел = "ОФР" Тогда
		Заголовок = НСтр("ru = 'Отчет о финансовых результатах: Настройка показателей';
						|en = 'Отчет о финансовых результатах: Настройка показателей'");
	Иначе
		// Сейчас поддерживается работа только с одним разделом
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РедактированиеСтруктурыОтчета = НовыйРедактированиеСтруктурыОтчета();
	РедактированиеСтруктурыОтчета.Период                     = КонецДня(Параметры.ОтчетнаяДата);
	РедактированиеСтруктурыОтчета.Организация                = Параметры.Организация;
	РедактированиеСтруктурыОтчета.Раздел                     = Параметры.Раздел;
	РедактированиеСтруктурыОтчета.АдресЗаполняемыеПоказатели = Параметры.ЗаполняемыеПоказатели;
	
	ПрименитьПользовательскиеНастройкиЗаполненияОтчета(РедактированиеСтруктурыОтчета);
	
	НастроитьПодсказки();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаскрытьРедакторНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПрименитьРезультатРаботыФормы", ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(ОписаниеОповещения, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДобавитьГруппуПоказателей(Команда)
	
	Позиция = ГруппаТекущейНастройки();
	
	Если Позиция = Неопределено Или Не ВозможноРедактированиеСоставаПоказателей(Позиция) Тогда
		Возврат;
	КонецЕсли;
	
	Если Позиция.Уровень = "Подраздел" Тогда
		ИнтерактивноДобавитьНастройкуПодраздела(Позиция, "Группа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьПоказатель(Команда)
	
	Настройка = Элементы.РедакторНастроек.ТекущиеДанные;
	Если Настройка = Неопределено Тогда
		ИнтерактивноДобавитьНастройкуПодраздела(ОсновнойПодраздел(РедакторНастроек), "Показатель");
	ИначеЕсли Настройка.Уровень = "Подраздел" Тогда
		ИнтерактивноДобавитьНастройкуПодраздела(Настройка, "Показатель");
	ИначеЕсли Настройка.Уровень = "Группа" Тогда
		Элементы.РедакторНастроек.ДобавитьСтроку();
	Иначе
		ДанныеЗаполнения = Неопределено;
		Если Настройка.Уровень = "Объект" Тогда
			ДанныеЗаполнения = Элементы.РедакторНастроек.ВыделенныеСтроки;
		КонецЕсли;
		Группа = ГруппаТекущейНастройки();
		ИнтерактивноДобавитьНастройкуГлубже(Группа, "Показатель", Настройка, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьОбъект(Команда)
	
	Настройка = Элементы.РедакторНастроек.ТекущиеДанные;
	Если Настройка = Неопределено Или Не ВозможноРедактированиеСоставаПоказателей(Настройка) Тогда
		Возврат;
	ИначеЕсли Настройка.Уровень = "Группа" Тогда
		Возврат;
	ИначеЕсли Настройка.Уровень = "Показатель" Тогда
		Элементы.РедакторНастроек.ДобавитьСтроку();
	ИначеЕсли Настройка.Уровень = "Объект" Тогда
		ИнтерактивноДобавитьНастройкуРядом(Настройка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзКонтекстногоМеню(Команда)
	Элементы.РедакторНастроек.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиНастройку(Команда)
	
	ИмяФормыВыборПоказателя = "Обработка.НастройкаЗаполненияБухгалтерскойОтчетности.Форма.ВыборПоказателя";
	
	ДоступныеИсточники = Новый Соответствие;
	НачатьВзаимодействиеНастроек(ДоступныеИсточники, Элементы.РедакторНастроек.ВыделенныеСтроки);
	
	Если Не ЗначениеЗаполнено(ДоступныеИсточники) Тогда
		
		ПоказатьПредупреждениеПеренестиНельзя(
			Элементы.РедакторНастроек.ВыделенныеСтроки,
			НСтр("ru = 'Перемещать можно показатели, связанные с обычной деятельностью, или прочими доходами и расходами.';
				|en = 'Перемещать можно показатели, связанные с обычной деятельностью, или прочими доходами и расходами.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ОбходРедактораНастроек = Новый Массив;
	Для Каждого РедакторПодраздела Из РедакторНастроек.ПолучитьЭлементы() Цикл
		ОбходРедактораНастроек.Добавить(РедакторПодраздела);
	КонецЦикла;
	
	НедопустимыеДействия = Новый Массив; // Они допустимы при перетаскивании, но не по кнопке
	НедопустимыеДействия.Добавить("СгруппироватьПоказатели");
	НедопустимыеДействия.Добавить("СдвинутьПоказатель");
	
	Действия = Новый Соответствие;     // Ключ - идентификатор приемника; Значение - возможные взаимодействия между приемником и источниками
	МожноВыбрать = Новый Соответствие; // Ключ - идентификатор приемника; Значение - Истина
	Пока ЗначениеЗаполнено(ОбходРедактораНастроек) Цикл
		
		НастройкаПриемник = ОбходРедактораНастроек[0];
		ОбходРедактораНастроек.Удалить(0);
		
		ИдентификаторПриемника = НастройкаПриемник.ПолучитьИдентификатор();
		
		ДействияНастройки = Новый Соответствие;
		ПроверитьВзаимодействиеНастроек(ДействияНастройки, ДоступныеИсточники, ИдентификаторПриемника);
		
		Для Каждого НедопустимоеДействие Из НедопустимыеДействия Цикл
			ДействияНастройки.Удалить(НедопустимоеДействие);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДействияНастройки) Тогда
			Действия.Вставить(ИдентификаторПриемника, ДействияНастройки);
			МожноВыбрать.Вставить(ИдентификаторПриемника, Истина);
		КонецЕсли;
		
		Для Каждого РедакторСледующегоУровня Из НастройкаПриемник.ПолучитьЭлементы() Цикл
			// Нижний уровень (объекты) для выбора не предлагаем, поэтому и проверять незачем
			Если РедакторСледующегоУровня.Уровень <> "Объект" Тогда
				ОбходРедактораНастроек.Добавить(РедакторСледующегоУровня);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МожноВыбрать) Тогда
		
		ПоказатьПредупреждениеПеренестиНельзя(
			Элементы.РедакторНастроек.ВыделенныеСтроки,
			НСтр("ru = 'Создайте показатели (группы показателей), в которые будут перемещены строки.';
				|en = 'Создайте показатели (группы показателей), в которые будут перемещены строки.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Показатели", АдресПоказателиДляВыбора(МожноВыбрать));
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ЗавершитьПереносНастройки", ЭтотОбъект, Действия);
	
	ОткрытьФорму(
		ИмяФормыВыборПоказателя,
		ПараметрыФормы,
		ЭтотОбъект,
		, // Уникальность
		, // Окно
		, // НавигационнаяСсылка
		ОбработчикЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	СдвинутьНастройку(Элементы.РедакторНастроек.ТекущиеДанные, -1);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	СдвинутьНастройку(Элементы.РедакторНастроек.ТекущиеДанные, 1);
КонецПроцедуры

&НаКлиенте
Процедура ВыводВключить(Команда)
	
	ВыводУстановитьЗначения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводВыключить(Команда)
	
	ВыводУстановитьЗначения(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСтандартныеНастройки(Команда)
	
	ПрименитьСтандартныеНастройки();
	РаскрытьРедакторНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельПодсказок(Команда)
	
	ИзменитьВидимостьПодсказокСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПодсказок(Команда)
	
	ИзменитьВидимостьПодсказокСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ПрименитьРезультатРаботыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРедакторНастроек

&НаКлиенте
Процедура РедакторНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.РедакторНастроекЗачетПоказателей Тогда
		
		НачатьДетальнуюНастройкуПоказателя(Элементы.РедакторНастроек.ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекПриАктивизацииСтроки(Элемент)
	
	// Выполняет действия, которые могут приводить к перерисовке формы
	ПодключитьОбработчикОжидания("НастроитьЭлементыЗависимыеОтСтрокиОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Настройка = Элементы.РедакторНастроек.ТекущиеДанные;
	
	Если Настройка = Неопределено Тогда
		// На верхнем уровне - подразделы, состав которых определяется автоматически
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ВозможноРедактированиеСоставаПоказателей(Настройка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		Отказ = Истина;
	ИначеЕсли Настройка.Уровень = "Объект" Тогда
		// Добавлять ниже нельзя. Но можем добавить на этот же уровень
		Отказ = Истина;
		Родитель = Настройка.ПолучитьРодителя();
		Если Родитель <> Неопределено И Родитель.Уровень <> "ПоказательОсновной" Тогда
			ПодключитьОбработчикОжидания("ДобавитьНастройкуРядомОтложенно", 0.1, Истина);
		КонецЕсли;
	ИначеЕсли Настройка.Уровень = "ПоказательОсновной" Тогда
		// Состав редактируется автоматически
		Отказ = Истина;
	ИначеЕсли Настройка.Уровень = "Показатель" Тогда
		// Не успевает отработать условное оформление, нужно установить уровень до начала редактирования
		Отказ = Истина;
		ПодключитьОбработчикОжидания("ДобавитьНастройкуГлубжеОтложенно", 0.1, Истина);
	ИначеЕсли Настройка.Уровень = "Подраздел" И Настройка.Алгоритм = Неопределено Тогда
		// Добавлять что-либо в такой раздел следует, спозиционировавшись на группе или показателе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекПередНачаломИзменения(Элемент, Отказ)
	
	Настройка = Элементы.РедакторНастроек.ТекущиеДанные;
	Если Настройка.Уровень = "Подраздел" Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли Настройка.Уровень = "Объект" Тогда
		Родитель = Настройка.ПолучитьРодителя();
		Если Родитель <> Неопределено И Родитель.Уровень = "ПоказательОсновной" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьСписокВыбораКодСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не ВозможноРедактированиеСоставаПоказателей(Элементы.РедакторНастроек.ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УдалитьНастройкуОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Настройка = Элементы.РедакторНастроек.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		НастроитьНовуюСтроку(Настройка);
		ОбеспечитьПоказательОсновнойПоследним(Настройка);
	ИначеЕсли Настройка.Уровень = "Объект" Тогда
		ТекущаяНастройкаОбъект = НовыйТекущаяНастройкаОбъект();
		ТекущаяНастройкаОбъект.Объект = Настройка.Объект;
		ТекущаяНастройкаОбъект.ИдентификаторНастройки = Настройка.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Настройка = Элементы.РедакторНастроек.ТекущиеДанные;
	Родитель = Настройка.ПолучитьРодителя();
	
	Если ОтменаРедактирования Тогда
		Если Не НоваяСтрока Тогда
			Если ИдентификаторДобавленнойНастройки = Элементы.РедакторНастроек.ТекущаяСтрока
				И Родитель <> Неопределено Тогда
				Родитель.ПолучитьЭлементы().Удалить(Настройка);
			ИначеЕсли Настройка.Уровень = "Объект"
				И ЗавершаетсяИзменениеОбъекта(Настройка) Тогда
				// Обход ошибки платформы 60021357
				Настройка.Объект = ТекущаяНастройкаОбъект.Объект; // По-настоящему отменим редактирование
			КонецЕсли;
		КонецЕсли;
		ИдентификаторДобавленнойНастройки = Неопределено;
		ТекущаяНастройкаОбъект = Неопределено;
		Возврат;
	КонецЕсли;
	
	Настройка.Модифицированность = Истина;
	ИдентификаторДобавленнойНастройки = Неопределено;
	
	Если Настройка.Уровень = "Показатель" Тогда
		
		Если Родитель <> Неопределено И Родитель.Уровень = "Показатель" Тогда
			ПовыситьПоказательДоУровняГруппы(Родитель, Настройка);
		КонецЕсли;
		
	ИначеЕсли Настройка.Уровень = "Объект" Тогда
		
		ЗавершитьИзменениеОбъекта(Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	
	Перетаскивание = НовыйПеретаскиваниеНастроек();
	НачатьВзаимодействиеНастроек(Перетаскивание.Источники, ПараметрыПеретаскивания.Значение);
	
	ПараметрыПеретаскивания.Значение = Перетаскивание;
	
	Если ЗначениеЗаполнено(Перетаскивание.Источники) Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Для удобства разработчика стандартная обработка запрещает перенос в первую строку дерева.
	// Отключение стандартной обработки требует вручную установить Действие
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Структура") Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	ПроверитьВзаимодействиеНастроек(ПараметрыПеретаскивания.Значение.Действия, ПараметрыПеретаскивания.Значение.Источники, Строка);
	
	Если Не ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение.Действия) Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Иначе
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	КонецЕсли;
	
	УстановитьДействиеПеретаскивания(ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Структура")
		Или Не ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение.Действия) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьВзаимодействиеНастроек(ПараметрыПеретаскивания.Значение.Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторНастроекКодСтрокиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КоллекцииДанныхФормы

&НаСервереБезКонтекста
Функция НовыйРедактированиеСтруктурыОтчета()
	
	// Описывает связь переданной в форму ЗаполняемыеПоказатели и РедакторНастроек.
	// В частности, содержит сведения, необходимые на сервере для "сборки" выполненных настроек в ЗаполняемыеПоказатели.
	// Не доступна на клиенте.
	
	Редактирование = Новый Структура;
	
	Редактирование.Вставить("Раздел", ""); // Имя раздела по БухгалтерскаяОтчетностьБРО.РазделыОтчета
	Редактирование.Вставить("ЗаполняемыеПоказатели"); // см. БухгалтерскаяОтчетностьБРО.ПолучитьЗаполняемыеПоказателиРаздела - модифицируемая в форме коллекция
	Редактирование.Вставить("АдресЗаполняемыеПоказатели", ""); // Адрес во временном хранилище для обмена ЗаполняемыеПоказатели с вызывающим кодом
	
	// Ключ - идентификатор строки в РедакторНастроек;
	// Значение - идентификатор показателя в ЗаполняемыеПоказатели.Показатели
	// См. также СохраненныйПоказатель
	Редактирование.Вставить("ИндексПоказатели", Новый Соответствие);
	
	// См. ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.КлассифицируемыеОбъекты
	Редактирование.Вставить("КлассифицируемыеОбъекты", Новый Соответствие);
	
	Редактирование.Вставить("Период", '0001-01-01'); // конец отчетного периода
	Редактирование.Вставить("Организация"); // СправочникСсылка.Организации
	
	Возврат Редактирование;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйПравилаНастройки()
	
	// Содержит правила, передаваемые между клиентом и сервером, по которым можно выполнять настройки.
	// В частности, описывает связь редактора настроек и классифицируемых объектов.
	// Правила зависят от алгоритмов.
	ОписаниеОбъектов = Новый Структура;
	ОписаниеОбъектов.Вставить("ПоАлгоритмам", Новый Соответствие); // Ключ - идентификатор алгоритма; Значение - НовыйПравилаНастройкиАлгоритма
	Возврат ОписаниеОбъектов;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйПравилаНастройкиАлгоритма()
	
	Редактирование = Новый Структура;
	Редактирование.Вставить("ТипЗначения"); // ОписаниеТипов
	Редактирование.Вставить("ЗачетПоказателей", ""); // значение по умолчанию для алгоритма, см. ИнициализироватьЗачетПоказателей
	Редактирование.Вставить("РазмещениеКлассифицируемыхОбъектов", Новый Соответствие); // Ключ - ссылка на объект, Значение - массив идентификаторов строк, соответствующих объекту
	Редактирование.Вставить("ОсновныеПоказатели", Новый Массив); // идентификаторов строк
	Редактирование.Вставить("НаборКнопокДобавитьОбъект", Новый Структура); // Ключ - имя кнопки, Значение - Булево, видимость кнопки
	Возврат Редактирование;
	
КонецФункции

#КонецОбласти

#Область ЗачетПоказателей

// ЗачетПоказателей - это настройка алгоритма, которая может редактироваться в отдельной форме.
// В это поле редактора записывается сериализованное значение настройки, расширенное специальными значениями
// - НеподходящийУровеньЗачетаПоказателей() - для конкретной настройки показатель редактировать нельзя, пока она находится в текущей позиции дерева.
//                                            Но после переноса может стать можно.
//                                            См. ИсправитьЗачетПоказателей
// - <пустая строка> - для конкретной настройки показатель редактировать нельзя совсем.
// Представления этого поля определяются в условном оформлении.
//
// См. также Область РедактированиеСвойствНастроек

&НаСервереБезКонтекста
Процедура ИнициализироватьЗачетПоказателей(ЗачетПоказателей, Алгоритм)
	
	Если Алгоритм = ЗаполнениеБухгалтерскойОтчетностиПравила.ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		ЗачетПоказателей = ЗачетПоказателейПоУмолчанию();
	Иначе
		ЗачетПоказателей = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьЗачетПоказателей(РедакторНастройки, НастройкиАлгоритма)
	
	ИнициализироватьЗачетПоказателей(РедакторНастройки.ЗачетПоказателей, РедакторНастройки.Алгоритм);
	Если ПустаяСтрока(РедакторНастройки.ЗачетПоказателей) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(НастройкиАлгоритма.ЗачетПоказателей) Тогда
		РедакторНастройки.ЗачетПоказателей = НастройкиАлгоритма.ЗачетПоказателей;
	КонецЕсли;
	
	ИсправитьЗачетПоказателей(РедакторНастройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьЗачетПоказателей(Заполнение, РедакторНастройки)
	
	Если Заполнение.Идентификатор <> ЗаполнениеБухгалтерскойОтчетностиПравила.ИдентификаторАлгоритмаПрочиеДоходыРасходы() Тогда
		Возврат;
	КонецЕсли;
	
	Если РедакторНастройки.ЗачетПоказателей = НеподходящийУровеньЗачетаПоказателей() Тогда
		Заполнение.НастройкиАлгоритма.ЗачетПоказателей = "";
	Иначе
		Заполнение.НастройкиАлгоритма.ЗачетПоказателей = РедакторНастройки.ЗачетПоказателей;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИсправитьЗачетПоказателей(Настройка)
	
	Если ПустаяСтрока(Настройка.ЗачетПоказателей) Тогда
		Возврат;
	КонецЕсли;
	
	МожноРедактировать = Ложь;
	
	Если Настройка.Уровень = "Показатель" Или Настройка.Уровень = "ПоказательОсновной" Тогда
		Родитель = Настройка.ПолучитьРодителя();
		Если Родитель <> Неопределено И Родитель.Уровень = "Группа" Тогда
			МожноРедактировать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не МожноРедактировать Тогда
		Настройка.ЗачетПоказателей = НеподходящийУровеньЗачетаПоказателей();
	ИначеЕсли Настройка.ЗачетПоказателей = НеподходящийУровеньЗачетаПоказателей() Тогда
		Настройка.ЗачетПоказателей = ЗачетПоказателейПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеподходящийУровеньЗачетаПоказателей()
	Возврат "*";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗачетПоказателейПоУмолчанию()
	Возврат "Показатель";// См. ЗаполнениеБухгалтерскойОтчетностиПравила.ИнициализироватьЗаполнениеПоказателяПрочиеДоходыРасходы
КонецФункции

&НаСервереБезКонтекста
Функция ЗачетПоказателейПредставления()
	
	Представления = Новый СписокЗначений;
	
	Представления.Добавить("Нет",           НСтр("ru = 'Нет';
												|en = 'Нет'"));
	Представления.Добавить("СтатьиОбъекты", НСтр("ru = 'По объектам';
												|en = 'По объектам'"));
	Представления.Добавить("Показатель",    НСтр("ru = 'По показателю в целом';
												|en = 'По показателю в целом'"));
	Представления.Добавить("*",             "");
	
	Возврат Представления;
	
КонецФункции

#КонецОбласти

#Область НачалоРаботыФормы

&НаСервере
Процедура ПрименитьПользовательскиеНастройкиЗаполненияОтчета(РедактированиеСтруктурыОтчета)
	
	ПрочитатьПользовательскиеНастройки(РедактированиеСтруктурыОтчета);
	
	ЗаполнитьРедакторНастроек(РедактированиеСтруктурыОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьСтандартныеНастройки()
	
	РедактированиеСтруктурыОтчета = ПолучитьИзВременногоХранилища(АдресРедактированиеСтруктурыОтчета);
	
	ПрочитатьСтандартныеНастройки(РедактированиеСтруктурыОтчета);
	
	ЗаполнитьРедакторНастроек(РедактированиеСтруктурыОтчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьПользовательскиеНастройки(РедактированиеСтруктурыОтчета)
	
	РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели = БухгалтерскаяОтчетностьБРО.ПолучитьЗаполняемыеПоказателиРаздела(
		РедактированиеСтруктурыОтчета.АдресЗаполняемыеПоказатели,
		РедактированиеСтруктурыОтчета.Раздел);
	
	Если Не ЗначениеЗаполнено(РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели) Тогда
		ПрочитатьСохраненныеНастройки(РедактированиеСтруктурыОтчета);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели) Тогда
		ПрочитатьСтандартныеНастройки(РедактированиеСтруктурыОтчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьСохраненныеНастройки(РедактированиеСтруктурыОтчета)
	
	СохраненныеНастройки = РегистрыСведений.НастройкиЗаполненияБухгалтерскойОтчетности.ПрочитатьНастройкиЗаполнения(
		РедактированиеСтруктурыОтчета.Период,
		РедактированиеСтруктурыОтчета.Организация);
	СохраненныеНастройкиРаздела = СохраненныеНастройки.Разделы[РедактированиеСтруктурыОтчета.Раздел];
	
	Если СохраненныеНастройкиРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели = СохраненныеНастройкиРаздела;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьСтандартныеНастройки(РедактированиеСтруктурыОтчета)
	
	РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели = БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела();
	
	КонтекстОтчета = БухгалтерскаяОтчетностьБРО.НовыйКонтекстОтчета();
	ЗаполнитьЗначенияСвойств(КонтекстОтчета, РедактированиеСтруктурыОтчета);
	НачалоОтчетногоПериода = БухгалтерскийУчет.НачалоОтчетногоГода(КонтекстОтчета.Период, КонтекстОтчета.Организация);
	Если НачалоОтчетногоПериода = Неопределено Тогда
		НачалоОтчетногоПериода = '0001-01-01';
	КонецЕсли;
	БухгалтерскаяОтчетностьБРО.ЗаполнитьПериодОтчета(
		КонтекстОтчета.ОтчетныйПериод,
		НачалоОтчетногоПериода,
		КонтекстОтчета.Период);
	
	ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.ОпределитьЗаполняемыеПоказатели(
		РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели,
		РедактированиеСтруктурыОтчета.Раздел,
		КонтекстОтчета);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКлассифицируемыеОбъекты(РедактированиеСтруктурыОтчета)
	РедактированиеСтруктурыОтчета.КлассифицируемыеОбъекты = ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.КлассифицируемыеОбъекты(
		РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРедакторНастроек(РедактированиеСтруктурыОтчета)
	
	РедакторНастроек.ПолучитьЭлементы().Очистить();
	РедактированиеСтруктурыОтчета.ИндексПоказатели.Очистить();
	
	ПравилаНастройки = НовыйПравилаНастройки();
	
	ЗаполнитьКлассифицируемыеОбъекты(РедактированиеСтруктурыОтчета);
	
	ПоискПодразделов = ЗаполнитьПодразделыОтчета(РедакторНастроек, Подразделы);
	
	ЗаполнитьБазовуюСтруктуруОтчета(
		РедакторНастроек,
		РедактированиеСтруктурыОтчета,
		ПоискПодразделов,
		ПравилаНастройки);
		
	ЗаполнитьЗеркальныеСвязиПоказателей(РедакторНастроек, РедактированиеСтруктурыОтчета);
	
	НастроитьКнопкиДобавитьОбъект();
	
	Если Не ЭтоАдресВременногоХранилища(АдресРедактированиеСтруктурыОтчета) Тогда
		АдресРедактированиеСтруктурыОтчета = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РедактированиеСтруктурыОтчета, АдресРедактированиеСтруктурыОтчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПодразделыОтчета(РедакторНастроек, Подразделы)
	
	// Группы объединяем в подразделы для более лаконичного отображения
	
	РедакторыПодразделов = РедакторНастроек.ПолучитьЭлементы();
	РедакторыПодразделов.Очистить();
	
	Подразделы.Очистить();
	
	ПоискПодразделов = Новый Соответствие;// Ключ - Код строки; Значение - идентификатор в РедакторНастроек
	
	Для Каждого ОписаниеПодраздела Из ОписаниеПодразделовОтчета() Цикл
		
		РедакторПодраздела = РедакторыПодразделов.Добавить();
		РедакторПодраздела.Уровень      = "Подраздел";
		РедакторПодраздела.Наименование = ОписаниеПодраздела.Наименование;
		УстановитьКартинкуНастройки(РедакторПодраздела);
		
		ХранилищеПодраздела = Подразделы.Добавить();
		ХранилищеПодраздела.КодыСтрок.ЗагрузитьЗначения(ОписаниеПодраздела.КодыСтрок);
		
		ИдентификаторПодраздела = РедакторПодраздела.ПолучитьИдентификатор();
		
		Для Каждого КодСтроки Из ОписаниеПодраздела.КодыСтрок Цикл
			ПоискПодразделов.Вставить(КодСтроки, ИдентификаторПодраздела);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПоискПодразделов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьБазовуюСтруктуруОтчета(РедакторНастроек, РедактированиеСтруктурыОтчета, ПоискПодразделов, ПравилаНастройки)
	
	ОсновныеПоказатели = ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.ОсновныеПоказатели(
		РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели);
	
	Для Каждого ОписаниеГруппы Из РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели.ГруппыПоказателей Цикл
		
		ИдентификаторПодраздела = ПоискПодразделов[ОписаниеГруппы.КодСтроки];
		Если ИдентификаторПодраздела = Неопределено Тогда
			// Невозможно отобразить в форме
			Продолжить;
		КонецЕсли;
		
		РедакторПодразделаОтчета = РедакторНастроек.НайтиПоИдентификатору(ИдентификаторПодраздела);
		
		РедакторГруппы = РедакторПодразделаОтчета.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьЗначенияСвойств(РедакторГруппы, ОписаниеГруппы);
		
		ПоказательГруппы = БухгалтерскаяОтчетностьБРО.Показатель(ОписаниеГруппы.Показатель, РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели);
		СоставГруппы = БухгалтерскаяОтчетностьБРО.СоставГруппыПоказателей(ОписаниеГруппы, РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели);
		
		Если ПоказательГруппы = Неопределено Тогда
			РедакторГруппы.Уровень = "Группа";
		КонецЕсли;
		
		УстановитьКартинкуНастройки(РедакторГруппы);
		
		Для Каждого Показатель Из СоставГруппы Цикл
			
			ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
			АлгоритмЗаполнения = Показатель.Заполнение.Идентификатор;
			
			ПравилаНастройкиАлгоритма = ПравилаНастройки.ПоАлгоритмам[АлгоритмЗаполнения];
			Если ПравилаНастройкиАлгоритма = Неопределено Тогда
				ПравилаНастройкиАлгоритма = НовыйПравилаНастройкиАлгоритма();
				ПравилаНастройкиАлгоритма.ТипЗначения = ЗаполнениеБухгалтерскойОтчетностиПравила.ТипЗначенияКлассифицируемыхОбъектов(
					АлгоритмЗаполнения);
				ИнициализироватьЗачетПоказателей(ПравилаНастройкиАлгоритма.ЗачетПоказателей, АлгоритмЗаполнения);
				ПравилаНастройки.ПоАлгоритмам.Вставить(АлгоритмЗаполнения, ПравилаНастройкиАлгоритма);
			КонецЕсли;
			
			Если ПоказательГруппы <> Неопределено Тогда
				РедакторПоказателя = РедакторГруппы;
			Иначе
				РедакторПоказателя = РедакторГруппы.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			Если ИдентификаторПоказателя = ОсновныеПоказатели[АлгоритмЗаполнения] Тогда
				РедакторПоказателя.Уровень = "ПоказательОсновной";
				ПравилаНастройкиАлгоритма.ОсновныеПоказатели.Добавить(РедакторПоказателя.ПолучитьИдентификатор());
			Иначе
				РедакторПоказателя.Уровень = "Показатель";
			КонецЕсли;
			
			УстановитьХарактеристикиПоказателя(РедакторПоказателя, Показатель, ПравилаНастройкиАлгоритма.ТипЗначения);
			
			УстановитьКартинкуНастройки(РедакторПоказателя);
			
			Если ВозможноРедактированиеСоставаПоказателей(РедакторПоказателя) Тогда
				ДобавитьКлассифицируемыеОбъекты(
					РедакторПоказателя,
					ИдентификаторПоказателя,
					РедактированиеСтруктурыОтчета.КлассифицируемыеОбъекты,
					ПравилаНастройкиАлгоритма);
			КонецЕсли;
			
			РедактированиеСтруктурыОтчета.ИндексПоказатели.Вставить(
				РедакторПоказателя.ПолучитьИдентификатор(),
				ИдентификаторПоказателя);
			
		КонецЦикла;
			
		Если Не ЗначениеЗаполнено(РедакторГруппы.Алгоритм) Тогда
			НастройкиГруппы = РедакторГруппы.ПолучитьЭлементы();
			Если ЗначениеЗаполнено(НастройкиГруппы) Тогда
				ЗаполнитьЗначенияСвойств(РедакторГруппы, НастройкиГруппы[0], "Алгоритм, ТипОбъектов");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьАлгоритмыПодразделов(РедакторНастроек.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьХарактеристикиПоказателя(РедакторНастройки, Показатель, ТипОбъектов)
	
	ЗаполнитьЗначенияСвойств(РедакторНастройки, Показатель);
	РедакторНастройки.Алгоритм = Показатель.Заполнение.Идентификатор;
	РедакторНастройки.ТипОбъектов = ТипОбъектов;
	ПрочитатьЗачетПоказателей(РедакторНастройки, Показатель.Заполнение.НастройкиАлгоритма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьКлассифицируемыеОбъекты(РедакторПоказателя, ИдентификаторПоказателя, КлассифицируемыеОбъекты, ПравилаНастройкиАлгоритма)
	
	КлассифицируемыеОбъектыПоказателя = КлассифицируемыеОбъекты[ИдентификаторПоказателя];
	Если КлассифицируемыеОбъектыПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеОбъекта Из КлассифицируемыеОбъектыПоказателя Цикл
		
		РедакторОбъектов = РедакторПоказателя.ПолучитьЭлементы().Добавить();
		РедакторОбъектов.Уровень  = "Объект";
		РедакторОбъектов.Алгоритм     = РедакторПоказателя.Алгоритм;
		РедакторОбъектов.ТипОбъектов  = РедакторПоказателя.ТипОбъектов;
		РедакторОбъектов.Объект       = ОписаниеОбъекта.Значение;
		РедакторОбъектов.Наименование = ОписаниеОбъекта.Представление;
		
		УстановитьКартинкуНастройки(РедакторОбъектов);
		
		ДополнитьРазмещениеОбъектаАлгоритма(ПравилаНастройкиАлгоритма, РедакторОбъектов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьАлгоритмыПодразделов(ПодразделыОтчета)
	
	// В описании подраздела устанавливаем алгоритм, если у всех входящих в его состав показателей (групп) он одинаковый.
	// В зависимости от этого определяются возможности по добавлению групп и показателей в подраздел
	// Как и в других случаях, алгоритм определяет и ограничение типа
	
	Для Каждого РедакторПодраздела Из ПодразделыОтчета Цикл
		
		АлгоритмПодраздела = Неопределено;
		ТипОбъектовПодраздела = Неопределено;
		Для Каждого СодержимоеПодраздела Из РедакторПодраздела.ПолучитьЭлементы() Цикл
			Если АлгоритмПодраздела = Неопределено Тогда
				АлгоритмПодраздела    = СодержимоеПодраздела.Алгоритм;
				ТипОбъектовПодраздела = СодержимоеПодраздела.ТипОбъектов;
			ИначеЕсли СодержимоеПодраздела.Алгоритм <> АлгоритмПодраздела Тогда
				АлгоритмПодраздела = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если АлгоритмПодраздела <> Неопределено Тогда
			РедакторПодраздела.Алгоритм    = АлгоритмПодраздела;
			РедакторПодраздела.ТипОбъектов = ТипОбъектовПодраздела;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗеркальныеСвязиПоказателей(РедакторНастроек, РедактированиеСтруктурыОтчета)
	
	// Определим связанные строки в структуре отчета:
	// 1. Строки показателей
	// 2. Строки иных объектов
	
	Связи = Новый Соответствие; // bucket data structure: Ключ - индекс показателя или идентификатор алгоритма; Значение - массив из идентификаторов строк, ему соответствующих
	ОбщегоНазначенияБПКлиентСервер.ЗаполнитьРазделенныйМассив(Связи, РедактированиеСтруктурыОтчета.ИндексПоказатели);
	
	// Свяжем эти строки
	Для Каждого ОписаниеСвязи Из Связи Цикл
		
		Если ОписаниеСвязи.Значение.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИдентификаторРедактора Из ОписаниеСвязи.Значение Цикл
			
			РедакторПоказателя = РедакторНастроек.НайтиПоИдентификатору(ИдентификаторРедактора);
			
			Для Каждого ИдентификаторЗеркальнойСтроки Из ОписаниеСвязи.Значение Цикл
				
				Если ИдентификаторЗеркальнойСтроки = ИдентификаторРедактора Тогда
					Продолжить;
				КонецЕсли;
				
				РедакторПоказателя.СвязанныеЗначения.Добавить(ИдентификаторЗеркальнойСтроки);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиДобавитьОбъект()
	
	// Для разных алгоритмов применяются разные классификаторы объектов, образующих показатели.
	// Поэтому для команды добавления объектов уместно использовать разные представления -
	// например, "Добавить статью доходов" или "Добавить номенклатурную группу".
	// Представление должно меняться при переходе между строками (показателями).
	// Однако, изменение заголовка на кнопке приводит к избыточному обновлению формы,
	// недопустимому в контексте активизации строки.
	// Поэтому применяем такой прием:
	// - для каждого варианта наименования предусматриваем отдельную кнопку для команды добавления, со своим заголовком
	// - при смене строк меняем видимость этих кнопок.
	
	КнопкиДобавитьОбъект = Новый Соответствие; // Ключ - Тип - тип редактируемого значения; Значение - Строка - имя кнопки
	ЗаполнитьКнопкиДобавитьОбъект(КнопкиДобавитьОбъект);
	
	ШаблонНаборыКнопокДобавитьОбъект = Новый Структура;
	Для Каждого ОписаниеКнопки Из КнопкиДобавитьОбъект Цикл
		ШаблонНаборыКнопокДобавитьОбъект.Вставить(ОписаниеКнопки.Значение, Ложь);
	КонецЦикла;
	
	Для Каждого ОписаниеПравилаНастройки Из ПравилаНастройки.ПоАлгоритмам Цикл
		
		ОписаниеПравилаНастройки.Значение.НаборКнопокДобавитьОбъект = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонНаборыКнопокДобавитьОбъект);
		
		ТипЗначения = ОписаниеПравилаНастройки.Значение.ТипЗначения;
		Если ТипЗначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеКнопки Из КнопкиДобавитьОбъект Цикл
			Если ТипЗначения.СодержитТип(ОписаниеКнопки.Ключ) Тогда
				ОписаниеПравилаНастройки.Значение.НаборКнопокДобавитьОбъект[ОписаниеКнопки.Значение] = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКнопкиДобавитьОбъект(КнопкиДобавитьОбъект)
	
	КнопкиДобавитьОбъект.Вставить(
		Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов"),
		Элементы.РедакторНастроекДобавитьОбъектСтатьиПрочихДоходовРасходов.Имя);
	КнопкиДобавитьОбъект.Вставить(
		Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"),
		Элементы.РедакторНастроекДобавитьОбъектСтатьиПрочихДоходовРасходов.Имя);

	КнопкиДобавитьОбъект.Вставить(
		Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры"),
		Элементы.РедакторНастроекДобавитьОбъектНоменклатурныеГруппы.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозможноРедактированиеСоставаПоказателей(Настройка)
	
	// Проверяет возможность редактирования структуры отчета - добавления или удаления показателей.
	// Изменение структуры отчета не имеет смысла без возможности задать состав ее элементов -
	// то есть перечня классифицируемых объектов.
	//
	// При этом изменить, например, наименование показателя или вывод в отчет возможно,
	// даже если структуру отчета поменять нельзя.
	
	Возврат ЗначениеЗаполнено(Настройка.ТипОбъектов);
	
КонецФункции

&НаКлиенте
Процедура РаскрытьРедакторНастроек()
	
	Перем Группа, ЛимитРазвернутых;
	
	// Для лаконичности отобразим основные подразделы развернуто
	ЛимитРазвернутых = 2;
	Для Каждого Группа Из РедакторНастроек.ПолучитьЭлементы() Цикл
		
		Элементы.РедакторНастроек.Развернуть(Группа.ПолучитьИдентификатор());
		
		ЛимитРазвернутых = ЛимитРазвернутых - 1;
		Если ЛимитРазвернутых = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#Область ПодразделыОтчета

&НаСервереБезКонтекста
Функция ОписаниеПодразделовОтчета()
	
	Описание = Новый ТаблицаЗначений;
	Описание.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Описание.Колонки.Добавить("КодыСтрок",    Новый ОписаниеТипов("Массив"));
	
	ДобавитьОписаниеПодраздела(Описание, НСтр("ru = 'Обычная деятельность';
												|en = 'Обычная деятельность'"),            "2110,2120,2210,2220");
	ДобавитьОписаниеПодраздела(Описание, НСтр("ru = 'Прочие доходы и расходы';
												|en = 'Прочие доходы и расходы'"),         "2310,2320,2330,2340,2350");
	ДобавитьОписаниеПодраздела(Описание, НСтр("ru = 'Налоги на прибыль';
												|en = 'Налоги на прибыль'"),               "2411,2412,2410");
	ДобавитьОписаниеПодраздела(Описание, НСтр("ru = 'Прекращаемая деятельность';
												|en = 'Прекращаемая деятельность'"),       "2420,2460");
	ДобавитьОписаниеПодраздела(Описание, НСтр("ru = 'Совокупный финансовый результат';
												|en = 'Совокупный финансовый результат'"), "2510,2520,2530");
	
	Возврат Описание;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеПодраздела(ОписаниеПодразделов, НаименованиеПодраздела, КодыСтрок)
	
	ОписаниеПодраздела = ОписаниеПодразделов.Добавить();
	ОписаниеПодраздела.Наименование = НаименованиеПодраздела;
	ОписаниеПодраздела.КодыСтрок    = СтрРазделить(КодыСтрок, ",");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексНабораКодовСтроки(Настройка, РедакторНастроек)
	
	Если Настройка = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Родитель = Настройка.ПолучитьРодителя();
	Если Родитель = Неопределено Или Родитель.Уровень <> "Подраздел" Тогда
		Возврат -1;
	КонецЕсли;
	
	Возврат РедакторНастроек.ПолучитьЭлементы().Индекс(Родитель);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИсправитьКодСтроки(Настройка, РедакторНастроек, ОписаниеПодразделов)
	
	ИндексПодраздела = ИндексНабораКодовСтроки(Настройка, РедакторНастроек);
	Если ИндексПодраздела < 0 Тогда
		Настройка.КодСтроки = "";
		Возврат;
	КонецЕсли;
	
	КодыСтрок = ОписаниеПодразделов[ИндексПодраздела].КодыСтрок;
	Если Не ЗначениеЗаполнено(КодыСтрок) Тогда
		Настройка.КодСтроки = "";
		Возврат;
	КонецЕсли;
	
	Если КодыСтрок.НайтиПоЗначению(Настройка.КодСтроки) = Неопределено Тогда
		Настройка.КодСтроки = КодыСтрок[0].Значение;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УстановитьУсловноеОформлениеПредметНастройки();
	
	УстановитьУсловноеОформлениеВывод();
	
	УстановитьУсловноеОформлениеЗачетПоказателейПредставление();
	
	УстановитьУсловноеОформлениеВыделитьРазделы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПредметНастройки()
	
	// Предметом настройки могут быть
	// - показатели, группы показателей - их наименование можно менять непосредственно, как строку
	// - объекты, классифицируемые показателями - они редактируются выбором ссылки из соответствующих классификаторов (например, справочников).
	
	// Для обеспечения этого используется группа полей с вертикальным размещением, при этом для строки отображается только одно из них.
	
	КолонкиОбъект = Новый Соответствие;
	КолонкиОбъект.Вставить(Истина, Элементы.РедакторНастроекОбъект);
	КолонкиОбъект.Вставить(Ложь,   Элементы.РедакторНастроекНаименование);
	
	Для Каждого ПравилоКолонки Из КолонкиОбъект Цикл
		
		// Будем отключать видимость колонки, поэтому под условие должна попасть "неправильная" колонка
		Оформление = НачатьОформлениеПоля(ПравилоКолонки.Значение, "РедакторНастроек.Уровень", "Объект", ПравилоКолонки.Ключ);
		Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	КонецЦикла;
	
	// Поскольку для объектов не выводится первая колонка, то и отступ не выводится.
	// Отделим их от вышестоящих строк другим способом - цветом текста
	Оформление = НачатьОформлениеПоля(Элементы.РедакторНастроек, "РедакторНастроек.Уровень", "Объект");
	Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВывод()
	
	ОформляемоеПоле = Элементы.РедакторНастроекВывод;
	
	УровеньРедактораМожноВыбратьВывод = УровеньРедактораМожноВыбратьВывод();
	
	УровниРедактораОтображатьВывод = Новый СписокЗначений;
	УровниРедактораОтображатьВывод.Добавить(УровеньРедактораМожноВыбратьВывод);
	УровниРедактораОтображатьВывод.Добавить("ПоказательОсновной"); // Чтобы подчеркнуть, что такие не выводятся в отчет
	
	// Отображаем только то, что уместно
	Оформление = НачатьОформлениеПоля(ОформляемоеПоле, "РедакторНастроек.Уровень", УровниРедактораОтображатьВывод, Истина);
	Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Редактируем только то, что нужно
	Оформление = НачатьОформлениеПоля(ОформляемоеПоле, "РедакторНастроек.Уровень", УровеньРедактораМожноВыбратьВывод, Истина);
	Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЗачетПоказателейПредставление()
	
	ОформляемоеПоле = Элементы.РедакторНастроекЗачетПоказателей;
	
	Для Каждого ОписаниеПредставления Из ЗачетПоказателейПредставления() Цикл
		
		Оформление = НачатьОформлениеПоля(ОформляемоеПоле, "РедакторНастроек.ЗачетПоказателей", ОписаниеПредставления.Значение);
		Оформление.УстановитьЗначениеПараметра("Текст", ОписаниеПредставления.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыделитьРазделы()
	
	Оформление = НачатьОформлениеПоля(Элементы.РедакторНастроекНаименование, "РедакторНастроек.Уровень", "Подраздел");
	Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт( , , Истина));
	
КонецПроцедуры

&НаСервере
Функция НачатьОформлениеПоля(ОформляемоеПоле, ПолеОтбора, ЗначениеОтбора, НегативныйОтбор = Ложь)
	
	ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
	
	ВидОтбора = ВидСравненияКомпоновкиДанных.Равно;
	
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		ВидОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	Если НегативныйОтбор Тогда
		Если ВидОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ВидОтбора = ВидСравненияКомпоновкиДанных.НеВСписке;
		Иначе
			ВидОтбора = ВидСравненияКомпоновкиДанных.НеРавно;
		КонецЕсли;
	КонецЕсли;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, ОформляемоеПоле.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор, ПолеОтбора, ВидОтбора, ЗначениеОтбора);
	Возврат Элемент.Оформление;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РедакторНастроекИнтерактивныеДействия

&НаКлиенте
Процедура НастроитьЭлементыЗависимыеОтСтрокиОтложенно() Экспорт
	
	// См. НастроитьКнопкиДобавитьОбъект()
	
	Настройка = Элементы.РедакторНастроек.ТекущиеДанные;
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоНастройки = ПравилаНастройки.ПоАлгоритмам[Настройка.Алгоритм];
	Если ПравилоНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеКнопки Из ПравилоНастройки.НаборКнопокДобавитьОбъект Цикл
		Элементы[ОписаниеКнопки.Ключ].Видимость = ОписаниеКнопки.Значение;
	КонецЦикла;
	
КонецПроцедуры

#Область РедактированиеСоставаНастроек

// Стандартное поведение дерева при добавлении строк увеличивает глубину вложенности.
// В данном случае уровни дерева имеют смысловое наполнение, поэтому важно корректно определять уровень, на котором добавляется настройка:
// иногда нужно добавлять глубже, иногда - рядом.
// Поэтому добавление строк переопределяется.

&НаКлиенте
Процедура ДобавитьНастройкуГлубжеОтложенно() Экспорт
	
	Родитель = Элементы.РедакторНастроек.ТекущиеДанные;
	
	Уровень = "Показатель";
	Если Родитель.Уровень = "Объект" Тогда
		// Добавлять ниже нельзя
		Возврат;
	ИначеЕсли Родитель.Уровень = "Показатель" Тогда
		Уровень = "Объект";
	КонецЕсли;
	
	ИнтерактивноДобавитьНастройкуГлубже(Родитель, Уровень);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройкуРядомОтложенно() Экспорт
	
	ИнтерактивноДобавитьНастройкуРядом(Элементы.РедакторНастроек.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтерактивноДобавитьНастройкуРядом(Позиция)
	
	Родитель = РодительНастройки(Позиция, РедакторНастроек);
	Уровень = "Показатель";
	Если Позиция <> Неопределено Тогда
		Уровень = Позиция.Уровень;
	КонецЕсли;
		
	ИнтерактивноДобавитьНастройку(Родитель, Уровень, Позиция);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтерактивноДобавитьНастройкуГлубже(Знач Родитель, Уровень, Позиция = Неопределено, ДанныеЗаполнения = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = РедакторНастроек;
	КонецЕсли;
	
	ИнтерактивноДобавитьНастройку(Родитель, Уровень, Позиция, ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтерактивноДобавитьНастройкуПодраздела(Подраздел, Уровень)
	
	Если Подраздел = Неопределено
		Или Подраздел.Алгоритм = Неопределено
		Или Не ВозможноРедактированиеСоставаПоказателей(Подраздел) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерактивноДобавитьНастройкуГлубже(Подраздел, Уровень);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтерактивноДобавитьНастройку(Родитель, Уровень, Позиция, ДанныеЗаполнения = Неопределено)
	
	Если Родитель = Неопределено Или Не ВозможноРедактированиеСоставаПоказателей(Родитель) Тогда
		Возврат;
	КонецЕсли;
	
	ДополняемаяКоллекция = Родитель.ПолучитьЭлементы();
	ИндексВставки = ИндексПозицииНастройки(Позиция, ДополняемаяКоллекция);
	
	Если ИндексВставки = -1 Тогда
		НоваяСтрока = ДополняемаяКоллекция.Добавить(); // В конец
	Иначе
		НоваяСтрока = ДополняемаяКоллекция.Вставить(ИндексВставки + 1);
	КонецЕсли;
	
	НастроитьНовуюСтроку(НоваяСтрока, Уровень, Позиция);
	
	ОбеспечитьПоказательОсновнойПоследним(НоваяСтрока);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПереносимоеСодержимое = Новый Массив;
		Для Каждого ИдентификаторНастройкиОбъект Из ДанныеЗаполнения Цикл
			ПереносимоеСодержимое.Добавить(РедакторНастроек.НайтиПоИдентификатору(ИдентификаторНастройкиОбъект));
		КонецЦикла;
		ПеренестиКлассифицируемыеОбъекты(ПереносимоеСодержимое, НоваяСтрока);
	КонецЕсли;
	
	Элементы.РедакторНастроек.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ИдентификаторДобавленнойНастройки = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.РедакторНастроек.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьНовуюСтроку(Строка, Уровень = "", Шаблон = Неопределено)
	
	Модифицированность = Истина;
	Строка.Модифицированность = Истина;
	
	Если Не ЗначениеЗаполнено(Строка.Уровень) Тогда
		
		Если Не ПустаяСтрока(Уровень) Тогда
			Строка.Уровень = Уровень;
		ИначеЕсли Шаблон <> Неопределено Тогда
			Строка.Уровень = Шаблон.Уровень;
		Иначе
			Родитель = Строка.ПолучитьРодителя();
			Если Родитель <> Неопределено И Родитель.Уровень = "Показатель" Тогда
				Строка.Уровень = "Объект";
			Иначе
				Строка.Уровень = "Показатель";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Строка.Наименование) Тогда
		Если Строка.Уровень = "Группа" Тогда
			Строка.Наименование = НСтр("ru = 'Новая группа показателей';
										|en = 'Новая группа показателей'");
		ИначеЕсли Строка.Уровень = "Показатель" Тогда
			Строка.Наименование = НСтр("ru = 'Новый показатель';
										|en = 'Новый показатель'");
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Уровень = "Показатель" Тогда
		Строка.Вывод = Истина;
	КонецЕсли;
	
	УстановитьКартинкуНастройки(Строка);
	
	Если Не ЗначениеЗаполнено(Строка.Алгоритм) Тогда
		
		ПрименяемыйШаблон = Шаблон;
		Если ПрименяемыйШаблон = Неопределено Тогда
			ПрименяемыйШаблон = Строка.ПолучитьРодителя();
		КонецЕсли;
		
		Если ПрименяемыйШаблон <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, ПрименяемыйШаблон, "Алгоритм, ТипОбъектов");
		КонецЕсли;
		
	КонецЕсли;
	
	ПравилоНастройкиАлгоритма = ПравилаНастройки.ПоАлгоритмам[Строка.Алгоритм];
	Если ПравилоНастройкиАлгоритма = Неопределено Тогда
		Строка.ЗачетПоказателей = "";
	Иначе
		Строка.ЗачетПоказателей = ПравилоНастройкиАлгоритма.ЗачетПоказателей;
		ИсправитьЗачетПоказателей(Строка);
	КонецЕсли;
	
	ИсправитьКодСтроки(Строка, РедакторНастроек, Подразделы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьПоказательДоУровняГруппы(НоваяГруппа, НовыйПоказатель = Неопределено)
	
	Модифицированность = Истина;
	
	НоваяГруппа.Уровень = "Группа";
	
	УстановитьКартинкуНастройки(НоваяГруппа);
	
	КлассифицируемыеОбъекты = НоваяГруппа.ПолучитьЭлементы();
	
	Если Не ЗначениеЗаполнено(КлассифицируемыеОбъекты) Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыйПоказатель = Неопределено Тогда
		НовыйПоказатель = НоваяГруппа.ПолучитьЭлементы().Добавить();
		НастроитьНовуюСтроку(НовыйПоказатель, "Показатель", НоваяГруппа);
		НовыйПоказатель.Наименование = НоваяГруппа.Наименование;
	КонецЕсли;
	
	ПеренестиКлассифицируемыеОбъектыВнутрьПоказателя(НоваяГруппа.ПолучитьЭлементы(), НовыйПоказатель);
	
КонецПроцедуры

&НаКлиенте
Функция НовыйТекущаяНастройкаОбъект()
	
	ОписаниеНастройки = Новый Структура;
	// Определяется при начале редактирования
	ОписаниеНастройки.Вставить("Объект"); // до начала редактирования
	ОписаниеНастройки.Вставить("ИдентификаторНастройки", -1); // для контроля, что описание целостное от начала редактирования, до окончания
	// Определяется при окончании редактирования
	ОписаниеНастройки.Вставить("Настройка"); // настройка, редактирование которой зваершилось
	Возврат ОписаниеНастройки;
	
КонецФункции

&НаКлиенте
Функция ЗавершаетсяИзменениеОбъекта(Настройка)
	
	Если ТекущаяНастройкаОбъект = Неопределено
		Или ТекущаяНастройкаОбъект.ИдентификаторНастройки <> Настройка.ПолучитьИдентификатор() 
		Или ТекущаяНастройкаОбъект.Объект = Настройка.Объект Тогда
		ТекущаяНастройкаОбъект = Неопределено;
		Возврат Ложь;
	Иначе
		// Редактирование настройки может завершаться переходом на другую строку,
		// поэтому в обработчике ожидания обращаться к текущей строке нельзя
		ТекущаяНастройкаОбъект.Настройка = Настройка;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьИзменениеОбъекта(Настройка)
	
	// Изменение объекта требует зеркальной замены объекта в другой строке, а также связанных строках.
	Если ЗавершаетсяИзменениеОбъекта(Настройка) Тогда
		ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектаОтложенно", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеОбъектаОтложенно() Экспорт
	
	Если ТекущаяНастройкаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаОбъект.Настройка.Объект) Тогда
		
		// Запрещаем (отменяем) такое действие - в общем случае может привести к неопределенному положению объекта
		ТекущаяНастройкаОбъект.Настройка.Объект = ТекущаяНастройкаОбъект.Объект;
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяНастройкаОбъект.Объект) Тогда
		
		// 1. Удалим все предыдущие упоминания этого объекта
		ПредыдущееРазмещение = РазмещениеОбъекта(ТекущаяНастройкаОбъект.Настройка, РедакторНастроек, ПравилаНастройки);
		Для Каждого УдаляемаяНастройка Из ПредыдущееРазмещение Цикл
			УдалитьНастройку(УдаляемаяНастройка, РедакторНастроек);
		КонецЦикла;
		ДополнитьРазмещениеОбъекта(ТекущаяНастройкаОбъект.Настройка, ПравилаНастройки);
		
		// 2. Скопируем новое упоминание в связанные показатели
		Для Каждого ИдентификаторСвязанногоПоказателя Из ТекущаяНастройкаОбъект.Настройка.ПолучитьРодителя().СвязанныеЗначения.ВыгрузитьЗначения() Цикл
			СвязанныйПоказатель = РедакторНастроек.НайтиПоИдентификатору(ИдентификаторСвязанногоПоказателя);
			Если СвязанныйПоказатель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СвязаннаяНастройка = СкопироватьНастройку(ТекущаяНастройкаОбъект.Настройка, СвязанныйПоказатель);
			ДополнитьРазмещениеОбъекта(СвязаннаяНастройка, ПравилаНастройки);
		КонецЦикла;
		
	Иначе
	
		// В настройке был выбран объект А, его заменили на Б.
		// Надо и в связанных строках заменить А на Б.
		// Кроме того, у нас уже где-то есть строки с Б.
		// Их надо заменить на А.
		//
		// Сначала найдем старые А, заменим на Б.
		// Затем найдем старые Б, заменим на А.
		// Для поиска используем не непосредственно дерево, а отдельную коллекцию поиска,
		// поэтому можно сначала заменить на Б, а потом искать Б.
		// Только после всех замен в дереве обновим коллекции поиска в отношении и А и Б.
		
		СсылкаА = ТекущаяНастройкаОбъект.Объект;
		СсылкаБ = ТекущаяНастройкаОбъект.Настройка.Объект;
		
		ПравилоНастройки = ПравилаНастройки.ПоАлгоритмам[ТекущаяНастройкаОбъект.Настройка.Алгоритм];
		РазмещениеА = ПравилоНастройки.РазмещениеКлассифицируемыхОбъектов[СсылкаА];
		РазмещениеБ = ПравилоНастройки.РазмещениеКлассифицируемыхОбъектов[СсылкаБ];
		
		НовоеРазмещениеА = Новый Массив;
		НовоеРазмещениеБ = Новый Массив;
		
		Для Каждого ЗаменитьНаБ Из ИзвлечьРазмещениеОбъекта(РазмещениеА, РедакторНастроек) Цикл
			ЗаменитьНаБ.Объект = СсылкаБ;
			ЗаменитьНаБ.Модифицированность = Истина;
			НовоеРазмещениеБ.Добавить(ЗаменитьНаБ.ПолучитьИдентификатор());
		КонецЦикла;
		
		Для Каждого ЗаменитьНаА Из ИзвлечьРазмещениеОбъекта(РазмещениеБ, РедакторНастроек) Цикл
			ЗаменитьНаА.Объект = СсылкаА;
			ЗаменитьНаА.Модифицированность = Истина;
			НовоеРазмещениеА.Добавить(ЗаменитьНаА.ПолучитьИдентификатор());
		КонецЦикла;
		
		// Обновим описание объектов
		Если РазмещениеА <> Неопределено Тогда
			РазмещениеА.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РазмещениеА, НовоеРазмещениеА);
		КонецЕсли;
		
		Если РазмещениеБ <> Неопределено Тогда
			РазмещениеБ.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РазмещениеБ, НовоеРазмещениеБ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиКлассифицируемыеОбъектыВнутрьПоказателя(КоллекцияКлассифицируемыхОбъектов, Приемник)
	
	ПереносимоеСодержимое = Новый Массив;
	
	Для Каждого КандидатПереноса Из КоллекцияКлассифицируемыхОбъектов Цикл
		Если КандидатПереноса.Уровень <> "Объект" Тогда
			Продолжить;
		КонецЕсли;
		ПереносимоеСодержимое.Добавить(КандидатПереноса);
	КонецЦикла;
	
	ПеренестиКлассифицируемыеОбъекты(ПереносимоеСодержимое, Приемник);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкуОтложенно() Экспорт
	
	УдаляемыеНастройки = Новый Соответствие; // включая подчиненные; бакет из элементов дерева, сгруппированный по Уровень
	
	ИндексУдаляемыеСтроки = Новый Соответствие;
	
	Для Каждого УдаляемаяСтрока Из Элементы.РедакторНастроек.ВыделенныеСтроки Цикл
		
		УдаляемаяНастройка = РедакторНастроек.НайтиПоИдентификатору(УдаляемаяСтрока);
		Если УдаляемаяНастройка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексУдаляемыеСтроки.Вставить(УдаляемаяСтрока, Истина);
		
		ОбщегоНазначенияБПКлиентСервер.ДополнитьРазделенныйМассив(
			УдаляемыеНастройки,
			УдаляемаяНастройка.Уровень,
			УдаляемаяНастройка);
		
		// Обойдем все вложенные строки
		Для Каждого ВложеннаяНастройка Из ВложенныеНастройки(УдаляемаяНастройка) Цикл
			ОбщегоНазначенияБПКлиентСервер.ДополнитьРазделенныйМассив(
				УдаляемыеНастройки,
				ВложеннаяНастройка.Уровень,
				ВложеннаяНастройка);
		КонецЦикла;
			
	КонецЦикла;
	
	// Отодвинем курсор с удаляемых строк, так как в противном случае
	// в web-клиенте курсор будет помещен на самую первую (верхнюю) строку дерева
	КурсорДоУдаления = Элементы.РедакторНастроек.ТекущаяСтрока;
	КурсорПослеУдаления = ОтодвинутьКурсор(ИндексУдаляемыеСтроки);
	
	УдалитьСвязаннныеКлассифицируемыеОбъекты(УдаляемыеНастройки["Объект"]);
	УдалитьСвязанныеПоказатели(УдаляемыеНастройки["Показатель"]);
	УдалитьГруппы(УдаляемыеНастройки["Группа"]);
	
	Если РедакторНастроек.НайтиПоИдентификатору(КурсорДоУдаления) = Неопределено Тогда
		Элементы.РедакторНастроек.ТекущаяСтрока = КурсорПослеУдаления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтодвинутьКурсор(УдаляемыеСтроки)
	
	Курсор = Элементы.РедакторНастроек.ТекущаяСтрока;
	
	Пока УдаляемыеСтроки[Курсор] = Истина Цикл
		
		Настройка = РедакторНастроек.НайтиПоИдентификатору(Курсор);
		Если Настройка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Родитель = Настройка.ПолучитьРодителя();
		Коллекция = Родитель;
		Если Коллекция = Неопределено Тогда
			Коллекция = РедакторНастроек;
		КонецЕсли;
		Сиблинги = Коллекция.ПолучитьЭлементы();
		КоличествоСиблингов = Сиблинги.Количество();
		Позиция = Сиблинги.Индекс(Настройка);
		
		// Сначала идем вперед - так, чтобы новая позиция курсора следовала за старой
		Для НоваяПозиция = Позиция + 1 По КоличествоСиблингов - 1 Цикл
			Настройка = Сиблинги[НоваяПозиция];
			Курсор = Настройка.ПолучитьИдентификатор();
			Если УдаляемыеСтроки[Курсор] <> Истина Тогда
				Возврат Курсор;
			КонецЕсли;
		КонецЦикла;
		
		// Если невозможно, чтобы новая позиция курсора следовала за старой, идем назад
		Пока Позиция > 0 Цикл
			Позиция = Позиция - 1;
			Настройка = Сиблинги[Позиция];
			Курсор = Настройка.ПолучитьИдентификатор();
			Если УдаляемыеСтроки[Курсор] <> Истина Тогда
				Возврат Курсор;
			КонецЕсли;
		КонецЦикла;
		
		// Если не нашли места внутри группы, ищем на уровень выше
		Если Родитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Курсор = Родитель.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	Возврат Курсор;
	
КонецФункции


&НаСервере
Функция АдресПоказателиДляВыбора(Знач МожноВыбрать)
	
	ПоказателиДляВыбора = Новый ДеревоЗначений;
	ПоказателиДляВыбора.Колонки.Добавить("Наименование",    Новый ОписаниеТипов("Строка"));
	ПоказателиДляВыбора.Колонки.Добавить("Картинка",        Новый ОписаниеТипов("Число"));
	ПоказателиДляВыбора.Колонки.Добавить("ВыбраннаяСтрока", Новый ОписаниеТипов("Число"));
	ПоказателиДляВыбора.Колонки.Добавить("ВыборРазрешен",   Новый ОписаниеТипов("Булево"));
	
	СкопироватьПоказателиРедактораНастроек(РедакторНастроек, ПоказателиДляВыбора, МожноВыбрать);
	
	Возврат ПоместитьВоВременноеХранилище(ПоказателиДляВыбора, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция СкопироватьПоказателиРедактораНастроек(КоллекцияИсточник, КоллекцияПриемник, МожноВыбрать)
	
	МожноВыбратьСкопированныеПоказатели = Ложь;
	
	Для Каждого Источник Из КоллекцияИсточник.ПолучитьЭлементы() Цикл
		
		Если Источник.Уровень = "Объект" Тогда
			Продолжить;
		КонецЕсли;
		
		Приемник = КоллекцияПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Приемник, Источник, "Наименование, Картинка");
		Приемник.ВыбраннаяСтрока = Источник.ПолучитьИдентификатор();
		
		Приемник.ВыборРазрешен = (МожноВыбрать[Приемник.ВыбраннаяСтрока] = Истина);
		
		МожноВыбратьСредиПодчиненных = СкопироватьПоказателиРедактораНастроек(Источник, Приемник, МожноВыбрать);
		Если Приемник.ВыборРазрешен Или МожноВыбратьСредиПодчиненных Тогда
			МожноВыбратьСкопированныеПоказатели = Истина;
		Иначе
			КоллекцияПриемник.Строки.Удалить(Приемник);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МожноВыбратьСкопированныеПоказатели;
	
КонецФункции

#Область Взаимодействие

// Под взаимодействием понимаются интерактивные действия, включающие _несколько_ настроек - например, перетаскивание.

&НаКлиенте
Процедура НачатьВзаимодействиеНастроек(ДоступныеИсточники, Источники)
	
	Для Каждого ИдентификаторИсточника Из Источники Цикл
		
		Источник = РедакторНастроек.НайтиПоИдентификатору(ИдентификаторИсточника);
		Если Источник = Неопределено Или Не ВозможноРедактированиеСоставаПоказателей(Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипИсточника = Источник.Уровень;
		Если ЭтоПоказательВерхнегоУровня(Источник) Тогда
			ТипИсточника = "ПоказательВерхнегоУровня";
		ИначеЕсли Источник.Уровень <> "Показатель" И Источник.Уровень <> "ПоказательОсновной" И Источник.Уровень <> "Объект" Тогда
			Продолжить;
		КонецЕсли;
			
		ОбщегоНазначенияБПКлиентСервер.ДополнитьРазделенныйМассив(
			ДоступныеИсточники,
			ТипИсточника,
			ИдентификаторИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПоказательВерхнегоУровня(Настройка, Знач Родитель = Неопределено)
	
	Если Настройка.Уровень <> "Показатель" И Настройка.Уровень <> "ПоказательОсновной" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		Родитель = Настройка.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			// На верхнем уровне дерева должны быть подразделы, но не показатели
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Родитель.Уровень = "Подраздел";
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВзаимодействиеНастроек(Действия, Источники, Приемник)
	
	Действия.Очистить();
	
	ПроверитьВзаимодействиеПоказателейВерхнегоУровня(Действия, Источники["ПоказательВерхнегоУровня"], Приемник);
	ПроверитьВзаимодействиеПоказателей(Действия,               Источники["Показатель"],               Приемник);
	ПроверитьВзаимодействиеКлассифицируемыхОбъектов(Действия,  Источники["Объект"],                   Приемник);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВзаимодействиеПоказателейВерхнегоУровня(Действия, Источники, Приемник)
	
	Если Не ЗначениеЗаполнено(Источники) Тогда
		Возврат;
	КонецЕсли;
	
	Если Приемник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПриемник = РедакторНастроек.НайтиПоИдентификатору(Приемник);
	РодительПриемника = НастройкаПриемник.ПолучитьРодителя();
	
	// Допустимы варианты:
	// 1. Поместить внутрь группы (с таким же алгоритмом)
	// 2. Создать группу перемещением на шаг вниз (с таким же алгоритмом)
	// 3. Переместить внутри подраздела (перед приемником).
	// В первом случае допускается перетаскивать как на саму группу, так и на ее содержимое.
	// Во втором случае допускается перетаскивать как на сам показатель, так и на его содержимое.
	
	ВариантДействий = 0; // 0 - ничего нельзя
	
	Если НастройкаПриемник.Уровень = "Группа" Тогда
		ВариантДействий = 1;
	ИначеЕсли ЭтоПоказательВерхнегоУровня(НастройкаПриемник, РодительПриемника) Тогда
		ВариантДействий = 3; // Ниже может быть уточнен до 2
	ИначеЕсли НастройкаПриемник.Уровень = "Объект" Тогда
		// Возможно, это перетаскивание внутрь показателя
		Если ЭтоПоказательВерхнегоУровня(РодительПриемника) Тогда
			ВариантДействий = 2;
			НастройкаПриемник  = РодительПриемника;
			РодительПриемника  = НастройкаПриемник.ПолучитьРодителя();
		КонецЕсли;
	ИначеЕсли НастройкаПриемник.Уровень = "Показатель" Или НастройкаПриемник.Уровень = "ПоказательОсновной" Тогда
		// Выше проверили, что не первого уровня - тогда это помещение в группу
		ВариантДействий = 1;
		НастройкаПриемник  = РодительПриемника;
		РодительПриемника  = НастройкаПриемник.ПолучитьРодителя();
	КонецЕсли;
	
	Если ВариантДействий = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантДействий = 3 Тогда
		// Проверим, что это не создание новой группы
		Если Источники.Количество() = 1 Тогда
			Источник = Источники[0];
			НастройкаИсточник = РедакторНастроек.НайтиПоИдентификатору(Источник);
			РодительИсточника = НастройкаИсточник.ПолучитьРодителя();
			Если РодительИсточника = РодительПриемника Тогда
				ИндексИсточника = РодительИсточника.ПолучитьЭлементы().Индекс(НастройкаИсточник);
				ИндексПриемника = РодительПриемника.ПолучитьЭлементы().Индекс(НастройкаПриемник);
				Если ИндексИсточника = ИндексПриемника - 1 Тогда
					ВариантДействий = 2;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПодразделПриемник = ПодразделНастройки(НастройкаПриемник, РедакторНастроек);
	
	Для Каждого Источник Из Источники Цикл
		
		НастройкаИсточник = РедакторНастроек.НайтиПоИдентификатору(Источник);
		
		Если НастройкаИсточник = НастройкаПриемник Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделИсточник = ПодразделНастройки(НастройкаИсточник, РедакторНастроек);
		Если ПодразделИсточник <> ПодразделПриемник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВариантДействий = 3 Тогда
			РодительИсточника = НастройкаИсточник.ПолучитьРодителя();
			Если РодительИсточника = РодительПриемника Тогда
				ДобавитьВзаимодействие(Действия, "СдвинутьПоказатель", НастройкаИсточник, НастройкаПриемник);
			КонецЕсли;
		ИначеЕсли НастройкаИсточник.Алгоритм = НастройкаПриемник.Алгоритм Тогда
			Действие = "ДополнитьГруппуПоказателей";
			Если ВариантДействий = 2 Тогда
				Действие = "СгруппироватьПоказатели";
			КонецЕсли;
			ДобавитьВзаимодействие(Действия, Действие, НастройкаИсточник, НастройкаПриемник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВзаимодействиеПоказателей(Действия, Источники, Приемник)
	
	Если Не ЗначениеЗаполнено(Источники) Тогда
		Возврат;
	КонецЕсли;
	
	Если Приемник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПриемник = РедакторНастроек.НайтиПоИдентификатору(Приемник);
	РодительПриемника = НастройкаПриемник.ПолучитьРодителя();
	
	// Возможны варианты:
	// 1. Перенести в другую группу (с таким же алгоритмом)
	// 2. Разгруппировать - перенести на уровень выше: в раздел или на показатель верхнего уровня
	// 3. Переместить внутри группы (перед приемником)
	// В первом случае допускается перетаскивать как на саму группу, так и на ее содержимое.
	// Для связанных показателей
	// - не допускается перенос в группу со связанными показателями
	// - при разгруппировке связи разрушаются.
	// В любом случае перетаскивание допустимо только внутри подраздела.
	
	ВариантДействий = 0; // 0 - ничего нельзя
	
	Если НастройкаПриемник.Уровень = "Группа" Тогда
		ВариантДействий = 1;
	ИначеЕсли НастройкаПриемник.Уровень = "Подраздел" Или ЭтоПоказательВерхнегоУровня(НастройкаПриемник) Тогда
		ВариантДействий = 2;
	ИначеЕсли НастройкаПриемник.Уровень = "Показатель" Тогда
		ВариантДействий = 3; // В зависимости от источника может быть аналогичен варианту 1
	КонецЕсли;
	
	Если ВариантДействий = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделПриемник = ПодразделНастройки(НастройкаПриемник, РедакторНастроек);
	
	Для Каждого Источник Из Источники Цикл
		
		НастройкаИсточник = РедакторНастроек.НайтиПоИдентификатору(Источник);
		РодительИсточника = НастройкаИсточник.ПолучитьРодителя();
		
		ПодразделИсточник = ПодразделНастройки(НастройкаИсточник, РедакторНастроек);
		Если ПодразделИсточник <> ПодразделПриемник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВариантДействий = 2 Тогда
			ДобавитьВзаимодействие(Действия, "ПоднятьПоказатель", НастройкаИсточник, НастройкаПриемник);
		ИначеЕсли ВариантДействий = 3 И РодительИсточника = РодительПриемника Тогда
			ДобавитьВзаимодействие(Действия, "СдвинутьПоказатель", НастройкаИсточник, НастройкаПриемник);
		Иначе // перенос в другую группу
			
			ГруппаПриемник = НастройкаПриемник;
			Если ВариантДействий = 3 Тогда
				ГруппаПриемник = РодительПриемника;
			КонецЕсли;
			Если РодительИсточника = ГруппаПриемник
				Или НастройкаИсточник.Алгоритм <> ГруппаПриемник.Алгоритм
				Или ЕстьСвязиМеждуГруппами(НастройкаИсточник, РодительИсточника, ГруппаПриемник) Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьВзаимодействие(Действия, "ПеренестиПоказатель", НастройкаИсточник, ГруппаПриемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВзаимодействиеКлассифицируемыхОбъектов(Действия, Источники, Приемник)
	
	Если Не ЗначениеЗаполнено(Источники) Тогда
		Возврат;
	КонецЕсли;
	
	ВозможныеДействия = Новый Структура; // Ключ - действие; Значение - допустимый уровень источника (Показатель, ПоказательОсновной)
	
	УровеньПриемника = "";
	ПоказательПриемника = Неопределено;
	
	Если Приемник = Неопределено Тогда
		ВозможныеДействия.Вставить("УдалитьОбъект", "Показатель");
	Иначе
		
		ДанныеПриемника = РедакторНастроек.НайтиПоИдентификатору(Приемник);
		Если ДанныеПриемника = Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		ПоказательПриемника = ДанныеПриемника;
		Если ПоказательПриемника.Уровень = "Объект" Тогда
			ПоказательПриемника = ДанныеПриемника.ПолучитьРодителя();
		КонецЕсли;
		УровеньПриемника = ПоказательПриемника.Уровень;
		
		Если УровеньПриемника = "Показатель" Тогда
			ВозможныеДействия.Вставить("ДобавитьОбъект",  "ПоказательОсновной");
			ВозможныеДействия.Вставить("ПеренестиОбъект", "Показатель");
		ИначеЕсли УровеньПриемника = "ПоказательОсновной" Тогда
			ВозможныеДействия.Вставить("УдалитьОбъект", "Показатель");
		КонецЕсли;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ВозможныеДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Источник Из Источники Цикл
		
		Настройка = РедакторНастроек.НайтиПоИдентификатору(Источник);
		
		ПоказательИсточника = Настройка.ПолучитьРодителя();
		УровеньПоказателя = ПоказательИсточника.Уровень;
		
		Для Каждого ВозможноеДействие Из ВозможныеДействия Цикл
		
			Если УровеньПоказателя <> ВозможноеДействие.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПоказательПриемника <> Неопределено Тогда
				// Запрещаем перенос внутри показателя или между связанными показателями
				Если УровеньПоказателя = "Показатель" И УровеньПриемника = "Показатель"
					И ПоказательПриемника = ПоказательИсточника
					Или ПоказательПриемника.СвязанныеЗначения.НайтиПоЗначению(ПоказательИсточника.ПолучитьИдентификатор()) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				// Запрещаем перенос разнородных объектов
				Если Настройка.Алгоритм <> ПоказательПриемника.Алгоритм Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьВзаимодействие(
				Действия,
				ВозможноеДействие.Ключ,
				Источник,
				ПоказательПриемника);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьСвязиМеждуГруппами(НастройкаИсточник, ГруппаИсточник, ГруппаПриемник)
	
	Для Каждого ОписаниеСвязи Из НастройкаИсточник.СвязанныеЗначения Цикл
		
		СвязаннаяНастройка = РедакторНастроек.НайтиПоИдентификатору(ОписаниеСвязи.Значение);
		Если СвязаннаяНастройка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СвязаннаяНастройка.ПолучитьРодителя() = ГруппаПриемник Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВзаимодействие(Действия, ИмяДействия, Источник, Приемник)
	
	ОписаниеДействия = Действия[ИмяДействия];
	
	Если ОписаниеДействия = Неопределено Тогда
		
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("Приемник",  Приемник);
		ОписаниеДействия.Вставить("Источники", Новый Массив);
		
		Действия.Вставить(ИмяДействия, ОписаниеДействия);
		
	КонецЕсли;
	
	ОписаниеДействия.Источники.Добавить(Источник);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВзаимодействиеНастроек(Действия)
	
	// Выполняются на клиенте
	ВзаимодействиеУдалитьКлассифицируемыеОбъекты(Действия["УдалитьОбъект"]);
	ВзаимодействиеПеренестиКлассифицируемыеОбъекты(Действия["ДобавитьОбъект"]);
	ВзаимодействиеПеренестиКлассифицируемыеОбъекты(Действия["ПеренестиОбъект"]);
	ВзаимодействиеПоднятьПоказатели(Действия["ПоднятьПоказатель"]);
	ВзаимодействиеПеренестиПоказатели(Действия["ПеренестиПоказатель"]);
	ВзаимодействиеПеренестиПоказатели(Действия["ДополнитьГруппуПоказателей"]);
	ВзаимодействиеСгруппироватьПоказатели(Действия["СгруппироватьПоказатели"]);
	ВзаимодействиеСдвинутьПоказатели(Действия["СдвинутьПоказатель"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеУдалитьКлассифицируемыеОбъекты(ОписаниеДействия)

	Если ОписаниеДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УдаляемыйОбъект Из ОписаниеДействия.Источники Цикл
		
		УдаляемаяНастройка = РедакторНастроек.НайтиПоИдентификатору(УдаляемыйОбъект);
		Если УдаляемаяНастройка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПеренестиКлассифицируемыйОбъектВОсновныеПоказатели(УдаляемаяНастройка, УдаляемаяНастройка.Алгоритм);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеПеренестиКлассифицируемыеОбъекты(ОписаниеДействия)

	Если ОписаниеДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ПеренестиКлассифицируемыеОбъектыИзДругогоПоказателя(
		ОписаниеДействия.Источники,
		ОписаниеДействия.Приемник,
		РедакторНастроек,
		ПравилаНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеПоднятьПоказатели(ОписаниеДействия)
	
	Если ОписаниеДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеДействия.Приемник.Уровень = "Подраздел" Тогда
		ПеренестиПоказатели(ОписаниеДействия.Источники, ОписаниеДействия.Приемник, Неопределено);
	ИначеЕсли ОписаниеДействия.Приемник.Уровень = "Показатель" Тогда
		ПеренестиПоказатели(ОписаниеДействия.Источники, ОписаниеДействия.Приемник.ПолучитьРодителя(), ОписаниеДействия.Приемник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеПеренестиПоказатели(ОписаниеДействия)
	
	Если ОписаниеДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиПоказатели(ОписаниеДействия.Источники, ОписаниеДействия.Приемник, ОписаниеДействия.Приемник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеСгруппироватьПоказатели(ОписаниеДействия, СоздатьГруппу = Ложь)
	
	Если ОписаниеДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПовыситьПоказательДоУровняГруппы(ОписаниеДействия.Приемник);
	
	ПеренестиПоказатели(ОписаниеДействия.Источники, ОписаниеДействия.Приемник, ОписаниеДействия.Приемник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеСдвинутьПоказатели(ОписаниеДействия)
	
	Если ОписаниеДействия = Неопределено Или Не ЗначениеЗаполнено(ОписаниеДействия.Источники) Тогда
		Возврат;
	КонецЕсли;
	
	РодительПриемник = РодительНастройки(ОписаниеДействия.Приемник, РедакторНастроек);
	Коллекция = РодительПриемник.ПолучитьЭлементы();
	
	Если ОписаниеДействия.Приемник <> Неопределено Тогда
		Модифицированность = Истина;
		ОписаниеДействия.Приемник.Модифицированность = Истина;
	КонецЕсли;
	
	Для Каждого Источник Из ОписаниеДействия.Источники Цикл
		
		РодительИсточник = РодительНастройки(Источник, РедакторНастроек);
		Если РодительИсточник <> РодительПриемник Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияПриемника = Коллекция.Количество();
		Если ОписаниеДействия.Приемник <> Неопределено Тогда
			ПозицияПриемника = Коллекция.Индекс(ОписаниеДействия.Приемник);
		КонецЕсли;
		
		ПозицияИсточника = Коллекция.Индекс(Источник);
		Дистанция = ПозицияПриемника - ПозицияИсточника;
		Если Дистанция > 0 Тогда
			// Перемещаем на позицию перед приемником.
			// При движении вперед это значит, что нужно сделать на шаг меньше
			Дистанция = Дистанция - 1;
		КонецЕсли;
		Коллекция.Сдвинуть(ПозицияИсточника, Дистанция);
		
		Модифицированность = Истина;
		Источник.Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПеренестиПоказатель(Источник, Приемник, Позиция, РедакторНастроек, ОписаниеОбъектов, Подразделы)
	
	ДобавленнаяНастройка = СкопироватьНастройку(Источник, Приемник, Позиция);
	Если ТипЗнч(Приемник) = Тип("ДанныеФормыЭлементДерева") И Не ЗначениеЗаполнено(ДобавленнаяНастройка.КодСтроки) Тогда
		ДобавленнаяНастройка.КодСтроки = Приемник.КодСтроки;
	КонецЕсли;
	
	ОбеспечитьПоказательОсновнойПоследним(ДобавленнаяНастройка);
	
	ИсправитьЗачетПоказателей(ДобавленнаяНастройка);
	ИсправитьКодСтроки(ДобавленнаяНастройка, РедакторНастроек, Подразделы);
	
	ПеренестиКлассифицируемыеОбъектыИзДругогоПоказателя(Источник.ПолучитьЭлементы(), ДобавленнаяНастройка, РедакторНастроек, ОписаниеОбъектов);
	
	УдалитьСвязанныеНастройки(Источник, РедакторНастроек);
	УдалитьНастройку(Источник, РедакторНастроек);
	
	Возврат ДобавленнаяНастройка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСвязанныеНастройки(Источник, РедакторНастроек)
	
	Для Каждого СвязаннаяНастройка Из Источник.СвязанныеЗначения Цикл
		УдалитьНастройку(РедакторНастроек.НайтиПоИдентификатору(СвязаннаяНастройка.Значение), РедакторНастроек);
	КонецЦикла;
	
	Источник.СвязанныеЗначения.Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиПоказатели(Источники, Приемник, Позиция)
	
	Если Не ЗначениеЗаполнено(Источники) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Для Каждого Источник Из Источники Цикл
		
		ПеренестиПоказатель(Источник, Приемник, Позиция, РедакторНастроек, ПравилаНастройки, Подразделы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйПеретаскиваниеНастроек()
	
	Перетаскивание = Новый Структура;
	
	Перетаскивание.Вставить("Источники", Новый Соответствие); // Ключ - условный тип настройки; Значение - массив идентификаторов строк-источников
	Перетаскивание.Вставить("Действия",  Новый Соответствие);
	
	Возврат Перетаскивание;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДействиеПеретаскивания(ПараметрыПеретаскивания)
	
	Если ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение Тогда
		Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Копирование Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		КонецЕсли;
	ИначеЕсли ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	ИначеЕсли ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПереносНастройки(ВыбраннаяСтрока, Действия) Экспорт
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДействияСтроки = Действия[ВыбраннаяСтрока];
	Если ТипЗнч(ДействияСтроки) = Тип("Соответствие") Тогда
		ВыполнитьВзаимодействиеНастроек(ДействияСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция НастройкаУдалена(Настройка)
	
	Возврат (РедакторНастроек.НайтиПоИдентификатору(Настройка.ПолучитьИдентификатор()) = Неопределено);
	
КонецФункции


&НаКлиенте
Процедура УдалитьГруппы(УдаляемыеНастройки)
	
	Если УдаляемыеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Для Каждого УдаляемаяНастройка Из УдаляемыеНастройки Цикл
		
		Если НастройкаУдалена(УдаляемаяНастройка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдаляемаяНастройка.ПолучитьЭлементы()) Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьНастройку(УдаляемаяНастройка, РедакторНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныеПоказатели(УдаляемыеНастройки)
	
	Если УдаляемыеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КУдалению = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(УдаляемыеНастройки);
	
	Модифицированность = Истина;
	
	Пока ЗначениеЗаполнено(КУдалению) Цикл
		
		УдаляемаяНастройка = КУдалению[0];
		КУдалению.Удалить(0);
		
		Если НастройкаУдалена(УдаляемаяНастройка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдаляемаяНастройка.ПолучитьЭлементы()) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Связь Из УдаляемаяНастройка.СвязанныеЗначения Цикл
			СвязаннаяНастройка = РедакторНастроек.НайтиПоИдентификатору(Связь.Значение);
			Если СвязаннаяНастройка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КУдалению.Добавить(СвязаннаяНастройка);
		КонецЦикла;
		
		УдалитьНастройку(УдаляемаяНастройка, РедакторНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязаннныеКлассифицируемыеОбъекты(УдаляемыеНастройки)
	
	Если УдаляемыеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УдаляемаяНастройка Из УдаляемыеНастройки Цикл
		
		Если НастройкаУдалена(УдаляемаяНастройка) Тогда
			Продолжить;
		КонецЕсли;
		
		Показатель = УдаляемаяНастройка.ПолучитьРодителя();
		Если Показатель.Уровень = "ПоказательОсновной" Тогда
			Продолжить;
		КонецЕсли;
		
		ПеренестиКлассифицируемыйОбъектВОсновныеПоказатели(УдаляемаяНастройка, УдаляемаяНастройка.Алгоритм);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиКлассифицируемыйОбъектВОсновныеПоказатели(УдаляемаяНастройка, Алгоритм)
	
	ПравилоНастройки = ПравилаНастройки.ПоАлгоритмам[Алгоритм];
	Если ПравилоНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеНастройки = Новый Массив;
	УдаляемыеНастройки.Добавить(УдаляемаяНастройка);
	РазмещениеОбъекта = РазмещениеОбъекта(УдаляемаяНастройка, РедакторНастроек, ПравилаНастройки);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдаляемыеНастройки, РазмещениеОбъекта, Истина);
	
	Модифицированность = Истина;
	ПеренестиСвязанныеНастройкиКлассифицируемогоОбъекта(
		УдаляемыеНастройки,
		ПравилоНастройки.ОсновныеПоказатели,
		РедакторНастроек,
		ПравилаНастройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиКлассифицируемыеОбъектыИзДругогоПоказателя(Источники, Приемник, РедакторНастроек, ОписаниеОбъектов)
	
	Получатели = Новый Массив;
	Получатели.Добавить(Приемник.ПолучитьИдентификатор());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, Приемник.СвязанныеЗначения.ВыгрузитьЗначения(), Истина);
	
	// В общем случае, удалить нужно не только переносимые строки, но и другие, в которых встречается этот объект
	УдаляемыеОбъекты = Новый Соответствие; // Ключ - объект, значение - соответствие: ключ - идентификатор строки, значение - сама строка
	Для Каждого Источник Из Источники Цикл
		
		Если ТипЗнч(Источник) = Тип("ДанныеФормыЭлементДерева") Тогда
			Настройка = Источник;
		Иначе
			Настройка = РедакторНастроек.НайтиПоИдентификатору(Источник);
			Если Настройка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеОбъекта = УдаляемыеОбъекты[Настройка.Объект];
		Если ОписаниеОбъекта = Неопределено Тогда
			ОписаниеОбъекта = Новый Соответствие;
			УдаляемыеОбъекты.Вставить(Настройка.Объект, ОписаниеОбъекта);
		КонецЕсли;
		
		ОписаниеОбъекта.Вставить(Настройка.ПолучитьИдентификатор(), Настройка);
		Для Каждого НастройкаОбъекта Из РазмещениеОбъекта(Настройка, РедакторНастроек, ОписаниеОбъектов) Цикл
			ОписаниеОбъекта.Вставить(НастройкаОбъекта.ПолучитьИдентификатор(), НастройкаОбъекта);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОписаниеОбъекта Из УдаляемыеОбъекты Цикл
	
		УдаляемыеНастройки = Новый Массив;
		Для Каждого ОписаниеСтроки Из ОписаниеОбъекта.Значение Цикл
			УдаляемыеНастройки.Добавить(ОписаниеСтроки.Значение);
		КонецЦикла;
		
		ПеренестиСвязанныеНастройкиКлассифицируемогоОбъекта(УдаляемыеНастройки, Получатели, РедакторНастроек, ОписаниеОбъектов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиСвязанныеНастройкиКлассифицируемогоОбъекта(УдаляемыеНастройки, Получатели, РедакторНастроек, ОписаниеОбъектов)
	
	Для Каждого ИдентификаторПолучателя Из Получатели Цикл
		
		Получатель = РедакторНастроек.НайтиПоИдентификатору(ИдентификаторПолучателя);
		
		НоваяСтрока = СкопироватьНастройку(УдаляемыеНастройки[0], Получатель);
		
		ДополнитьРазмещениеОбъекта(НоваяСтрока, ОписаниеОбъектов);
		
	КонецЦикла;
	
	Для Каждого УдаляемаяНастройка Из УдаляемыеНастройки Цикл
		УдалитьНастройку(УдаляемаяНастройка, РедакторНастроек);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиКлассифицируемыеОбъекты(ПереносимыеНастройки, Приемник)
	
	Если Не ЗначениеЗаполнено(ПереносимыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПравилоНастройки = ПравилаНастройки.ПоАлгоритмам[Приемник.Алгоритм];
	
	КоллекцияПриемник = Приемник.ПолучитьЭлементы();
	
	Для Каждого УдаляемаяНастройка Из ПереносимыеНастройки Цикл
		
		НоваяНастройка = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяНастройка, УдаляемаяНастройка, , "СвязанныеЗначения, Модифицированность");
		НоваяНастройка.Модифицированность = Истина;
		
		ДополнитьРазмещениеОбъектаАлгоритма(ПравилоНастройки, НоваяНастройка);
		
		Источник = РодительНастройки(УдаляемаяНастройка, РедакторНастроек);
		Источник.ПолучитьЭлементы().Удалить(УдаляемаяНастройка);
		
	КонецЦикла;
	
	Элементы.РедакторНастроек.Развернуть(Приемник.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазмещениеОбъекта(Настройка, РедакторНастроек, ПравилаНастройки)
	
	ПравилоНастройки = ПравилаНастройки.ПоАлгоритмам[Настройка.Алгоритм];
	
	Если ПравилоНастройки = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РазмещениеОбъекта = ПравилоНастройки.РазмещениеКлассифицируемыхОбъектов[Настройка.Объект];
	
	Возврат ИзвлечьРазмещениеОбъекта(РазмещениеОбъекта, РедакторНастроек);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзвлечьРазмещениеОбъекта(РазмещениеОбъекта, РедакторНастроек)
	
	Если РазмещениеОбъекта = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВсеНастройкиОбъекта = Новый Массив;
	
	// Дизайн коллекции подразумевает, что неверные элементы удаляются по мере выявления
	КоличествоРазмещений = РазмещениеОбъекта.Количество();
	Для ИндексСКонца = 1 По КоличествоРазмещений Цикл
		Индекс = КоличествоРазмещений - ИндексСКонца;
		ЭлементРазмещения = РедакторНастроек.НайтиПоИдентификатору(РазмещениеОбъекта[Индекс]);
		Если ЭлементРазмещения = Неопределено Тогда
			РазмещениеОбъекта.Удалить(Индекс);
		Иначе
			ВсеНастройкиОбъекта.Добавить(ЭлементРазмещения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеНастройкиОбъекта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьРазмещениеОбъекта(Настройка, ПравилаНастройки)
	ПравилоНастройки = ПравилаНастройки.ПоАлгоритмам[Настройка.Алгоритм];
	Если ПравилоНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнитьРазмещениеОбъектаАлгоритма(ПравилоНастройки, Настройка);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьРазмещениеОбъектаАлгоритма(ПравилоНастройки, Настройка)
	ОбщегоНазначенияБПКлиентСервер.ДополнитьРазделенныйМассив(
		ПравилоНастройки.РазмещениеКлассифицируемыхОбъектов,
		Настройка.Объект,
		Настройка.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьНастройку(Настройка, Получатель, Позиция = Неопределено)
	
	Коллекция = Получатель.ПолучитьЭлементы();
	Если Позиция = Неопределено Или Коллекция.Индекс(Позиция) = -1 Тогда
		НоваяСтрока = Коллекция.Добавить();
	Иначе
		НоваяСтрока = Коллекция.Вставить(Коллекция.Индекс(Позиция));
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Настройка, , "СвязанныеЗначения");
	НоваяСтрока.Модифицированность = Истина;
	Если ТипЗнч(Получатель) = Тип("ДанныеФормыЭлементДерева") Тогда
		Получатель.Модифицированность = Истина;
	КонецЕсли;
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьНастройку(Настройка, РедакторНастроек)
	
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Источник = РодительНастройки(Настройка, РедакторНастроек);
	
	КоллекцияИсточника = Источник.ПолучитьЭлементы();
	КоллекцияИсточника.Удалить(Настройка);
	
	Если Источник <> РедакторНастроек Тогда
		Источник.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеСвойствНастроек

&НаКлиенте
Процедура НастроитьСписокВыбораКодСтроки()
	
	Элементы.РедакторНастроекКодСтроки.СписокВыбора.Очистить();
	
	Настройка = Элементы.РедакторНастроек.ТекущиеДанные;
	ИндексПодраздела = ИндексНабораКодовСтроки(Настройка, РедакторНастроек);
	Если ИндексПодраздела < 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РедакторНастроекКодСтроки.СписокВыбора.ЗагрузитьЗначения(Подразделы[ИндексПодраздела].КодыСтрок.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводУстановитьЗначения(Значение)
	
	ОтборУровни = Новый Структура;
	ОтборУровни.Вставить(УровеньРедактораМожноВыбратьВывод());
	
	Для Каждого ВложеннаяНастройка Из ВложенныеНастройки(РедакторНастроек, ОтборУровни) Цикл
		
		ВложеннаяНастройка.Вывод = Значение;
		ВложеннаяНастройка.Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДетальнуюНастройкуПоказателя(Настройка)

	Если ПустаяСтрока(Настройка.ЗачетПоказателей)
		Или Настройка.ЗачетПоказателей = НеподходящийУровеньЗачетаПоказателей() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПоказателя = Настройка.ПолучитьИдентификатор();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Показатель",                    ИдентификаторПоказателя);
	ПараметрыФормы.Вставить("НаименованиеПоказателя",        Настройка.Наименование);
	ПараметрыФормы.Вставить("ЗачетПоказателей",              Настройка.ЗачетПоказателей);
	ПараметрыФормы.Вставить("ГруппыПоказателей",             ДоступныеГруппыПоказателя(Настройка, РедакторНастроек));
	ПараметрыФормы.Вставить("РедактированиеСтруктурыОтчета", АдресРедактированиеСтруктурыОтчета);
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ЗавершитьДетальнуюНастройкуПоказателя", ЭтотОбъект, ПараметрыФормы);
	
	ИмяФормыПоказательОФР = "Обработка.НастройкаЗаполненияБухгалтерскойОтчетности.Форма.ПоказательОФР";
	
	ОткрытьФорму(
		ИмяФормыПоказательОФР,
		ПараметрыФормы,
		ЭтотОбъект,
		, // Уникальность
		, // Окно
		, // НавигационнаяСсылка
		ОбработчикЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДетальнуюНастройкуПоказателя(РезультатНастройки, СвойстваПоказателя) Экспорт
	
	Если ТипЗнч(РезультатНастройки) = Тип("Структура") Тогда
		
		Изменения = Новый Структура;
		Изменения.Вставить("ЗачетПоказателей", РезультатНастройки.ЗачетПоказателей);
		
		Если ЗначениеЗаполнено(РезультатНастройки.Группы) Тогда
			Изменения.Вставить("Группы", РезультатНастройки.Группы);
		КонецЕсли;
		
		ПрименитьИзмененияНастройкиПоказателя(СвойстваПоказателя.Показатель, Изменения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияНастройкиПоказателя(ИдентификаторНастройки, Изменения)
	
	Настройка = РедакторНастроек.НайтиПоИдентификатору(ИдентификаторНастройки);
	
	РезультатИзмененияГруппПоказателя = Неопределено;
	Если Изменения.Свойство("Группы") Тогда
		РезультатИзмененияГруппПоказателя = ПрименитьИзмененияГруппПоказателя(Настройка, Изменения.Группы);
	КонецЕсли;
	
	НастройкиПоказателя = Новый Соответствие;
	Если РезультатИзмененияГруппПоказателя <> Неопределено Тогда
		// Перенос между группами - это по сути создание показателей заново
		НастройкиПоказателя = РезультатИзмененияГруппПоказателя;
	Иначе
		НастройкиПоказателя = НастройкиПоказателя(Настройка, РедакторНастроек);
	КонецЕсли;
	
	Для Каждого ОписаниеНастройки Из НастройкиПоказателя Цикл
		
		Модифицированность = Истина;
		ОписаниеНастройки.Значение.Модифицированность = Истина;
		ОписаниеНастройки.Значение.ЗачетПоказателей = Изменения.ЗачетПоказателей;
		ИсправитьЗачетПоказателей(ОписаниеНастройки.Значение);
		ИсправитьКодСтроки(ОписаниеНастройки.Значение, РедакторНастроек, Подразделы);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПрименитьИзмененияГруппПоказателя(Знач Настройка, ГруппыПослеРедактирования)
	
	ГруппыДоРедактирования = ГруппыНастройки(Настройка, РедакторНастроек);
	Если КлючиСоответствияСовпадают(ГруппыДоРедактирования, ГруппыПослеРедактирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	НовыеПоказатели = Новый Соответствие;
	
	ПерваяГруппа = ГруппаНастройки(Настройка, РедакторНастроек);
	Если ГруппыПослеРедактирования[ПерваяГруппа.ПолучитьИдентификатор()] = Неопределено Тогда
		ПерваяГруппа = Неопределено;
		Для Каждого ОписаниеГруппы Из ГруппыПослеРедактирования Цикл
			ПерваяГруппа = РедакторНастроек.НайтиПоИдентификатору(ОписаниеГруппы.Ключ);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ПерваяГруппа = Неопределено Тогда
		// переносим в подраздел
		Приемник = ПодразделНастройки(Настройка, РедакторНастроек);
		Настройка = ПеренестиПоказатель(Настройка, Приемник, Неопределено, РедакторНастроек, ПравилаНастройки, Подразделы);
		НовыеПоказатели.Вставить(Настройка.ПолучитьИдентификатор(), Настройка);
		Возврат НовыеПоказатели;
	КонецЕсли;
	
	Настройка = ПеренестиПоказатель(Настройка, ПерваяГруппа, Настройка, РедакторНастроек, ПравилаНастройки, Подразделы);
	НовыеПоказатели.Вставить(Настройка.ПолучитьИдентификатор(), Настройка);
	
	Для Каждого ОписаниеГруппы Из ГруппыПослеРедактирования Цикл
		Если ОписаниеГруппы.Ключ = ПерваяГруппа.ПолучитьИдентификатор() Тогда
			Продолжить;
		КонецЕсли;
		ГруппаПоказателей = РедакторНастроек.НайтиПоИдентификатору(ОписаниеГруппы.Ключ);
		СвязанныйПоказатель = СоздатьСвязанныйПоказатель(Настройка, ГруппаПоказателей);
		НовыеПоказатели.Вставить(СвязанныйПоказатель.ПолучитьИдентификатор(), СвязанныйПоказатель);
	КонецЦикла;
	
	Возврат НовыеПоказатели;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючиСоответствияСовпадают(Соответствие1, Соответствие2)
	
	Если Соответствие1.Количество() <> Соответствие2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭталонКлючей = Новый Соответствие;
	Для Каждого КлючИЗначение Из Соответствие1 Цикл
		ЭталонКлючей.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Соответствие2 Цикл
		ЭталонКлючей.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Не ЗначениеЗаполнено(ЭталонКлючей);
	
КонецФункции

&НаСервере
Функция СоздатьСвязанныйПоказатель(Источник, ГруппаПоказателей)
	
	Модифицированность = Истина;
	
	ДобавленнаяНастройка = СкопироватьНастройку(Источник, ГруппаПоказателей);
	ИсправитьЗачетПоказателей(ДобавленнаяНастройка);
	ОбеспечитьПоказательОсновнойПоследним(ДобавленнаяНастройка);
	
	СвязатьНастройки(Источник, ДобавленнаяНастройка);
	
	Для Каждого ИсточникОбъект Из Источник.ПолучитьЭлементы() Цикл
		
		ДобавленныйОбъект = СкопироватьНастройку(ИсточникОбъект, ДобавленнаяНастройка);
		
		ДополнитьРазмещениеОбъекта(ДобавленныйОбъект, ПравилаНастройки);
		
	КонецЦикла;
	
	Возврат ДобавленнаяНастройка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СвязатьНастройки(Настройка1, Настройка2)
	
	Настройка2.СвязанныеЗначения.Добавить(Настройка1.ПолучитьИдентификатор());
	Настройка1.СвязанныеЗначения.Добавить(Настройка2.ПолучитьИдентификатор());

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ГруппаТекущейНастройки()
	
	Возврат ГруппаНастройки(Элементы.РедакторНастроек.ТекущиеДанные, РедакторНастроек);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГруппаНастройки(Настройка, РедакторНастроек)
	
	Возврат ПредокНастройки(Настройка, "Группа", РедакторНастроек);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодразделНастройки(Настройка, РедакторНастроек)
	
	Возврат ПредокНастройки(Настройка, "Подраздел", РедакторНастроек);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредокНастройки(Настройка, Уровень, РедакторНастроек)
	
	Кандидат = Настройка;
	Если Кандидат = Неопределено Тогда
		Возврат ОсновнойПодраздел(РедакторНастроек);
	КонецЕсли;
	
	Сравнение = СравнениеУровней();
	ИндексИскомогоУровня = Сравнение[Уровень];
	
	Пока Истина Цикл
		
		ИндексКандидата = Сравнение[Кандидат.Уровень];
		Если ИндексКандидата <= ИндексИскомогоУровня Тогда
			Возврат Кандидат;
		КонецЕсли;
		
		Родитель = Кандидат.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Возврат Кандидат;
		КонецЕсли;
		
		Кандидат = Родитель;
		
	КонецЦикла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СравнениеУровней()
	
	СравнениеУровней = Новый Соответствие;
	
	СравнениеУровней.Вставить("Подраздел",          0);
	СравнениеУровней.Вставить("Группа",             1); // Может быть пропущен
	СравнениеУровней.Вставить("Показатель",         2);
	СравнениеУровней.Вставить("ПоказательОсновной", 2);
	СравнениеУровней.Вставить("Объект",             3);
	
	Возврат СравнениеУровней;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОсновнойПодраздел(РедакторНастроек)
	
	Подразделы = РедакторНастроек.ПолучитьЭлементы();
	Если Не ЗначениеЗаполнено(Подразделы) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Подразделы[0];
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РодительНастройки(Настройка, РедакторНастроек)
	
	Если Настройка = Неопределено Тогда
		Возврат РедакторНастроек;
	КонецЕсли;
	
	Родитель = Настройка.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Возврат Родитель;
	КонецЕсли;
	
	Возврат РедакторНастроек;
	
КонецФункции

&НаКлиенте
Функция ИндексПозицииНастройки(Знач Позиция, Коллекция)
	
	Индекс = -1;
	
	Пока Позиция <> Неопределено Цикл
		
		Индекс = Коллекция.Индекс(Позиция);
		Если Индекс >= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Позиция = Позиция.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат Индекс;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВложенныеНастройки(Настройка, ОтборУровни = Неопределено)
	
	ВложенныеНастройки = Новый Массив;
	
	// Обход в глубину без рекурсии
	КОбходу = Новый Массив;
	КОбходу.Добавить(Настройка);
	Пока ЗначениеЗаполнено(КОбходу) Цикл
		
		ДочерниеНастройки = КОбходу[0].ПолучитьЭлементы();
		КОбходу.Удалить(0);
		
		Для Каждого ДочерняяНастройка Из ДочерниеНастройки Цикл
			
			КОбходу.Добавить(ДочерняяНастройка);
			
			Если ОтборУровни <> Неопределено И Не ОтборУровни.Свойство(ДочерняяНастройка.Уровень) Тогда
				Продолжить;
			КонецЕсли;
			
			ВложенныеНастройки.Добавить(ДочерняяНастройка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВложенныеНастройки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиПоказателя(Показатель, РедакторНастроек)
	
	НастройкиПоказателя = Новый Соответствие;
	НастройкиПоказателя.Вставить(Показатель.ПолучитьИдентификатор(), Показатель);
	
	Для Каждого СвязанноеЗначение Из Показатель.СвязанныеЗначения Цикл
		СвязанныйПоказатель = РедакторНастроек.НайтиПоИдентификатору(СвязанноеЗначение.Значение);
		Если СвязанныйПоказатель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НастройкиПоказателя.Вставить(СвязанныйПоказатель.ПолучитьИдентификатор(), СвязанныйПоказатель);
	КонецЦикла;
	
	Возврат НастройкиПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГруппыНастройки(Показатель, РедакторНастроек)
	
	НастройкиПоказателя = НастройкиПоказателя(Показатель, РедакторНастроек);
	
	ГруппыНастройки = Новый Соответствие;
	Для Каждого ОписаниеНастройки Из НастройкиПоказателя Цикл
		
		ГруппаНастройки = ГруппаНастройки(ОписаниеНастройки.Значение, РедакторНастроек);
		Если ГруппаНастройки.Уровень <> "Группа" Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппыНастройки.Вставить(ГруппаНастройки.ПолучитьИдентификатор(), ОписаниеНастройки.Ключ);
		
	КонецЦикла;
	
	Возврат ГруппыНастройки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеГруппыПоказателя(Показатель, РедакторНастроек)
	
	ГруппыПоказателя = ГруппыНастройки(Показатель, РедакторНастроек);
	
	ГруппыПоказателей = Новый СписокЗначений;
	Для Каждого Подраздел Из РедакторНастроек.ПолучитьЭлементы() Цикл
		Для Каждого Группа Из Подраздел.ПолучитьЭлементы() Цикл
			Если Группа.Уровень <> "Группа" Или Группа.Алгоритм <> Показатель.Алгоритм Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторГруппы = Группа.ПолучитьИдентификатор();
			СвязанаСПоказателем = (ГруппыПоказателя[ИдентификаторГруппы] <> Неопределено);
			ГруппыПоказателей.Добавить(ИдентификаторГруппы, Группа.Наименование, СвязанаСПоказателем);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ГруппыПоказателей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбеспечитьПоказательОсновнойПоследним(ДобавленнаяНастройка)
	
	Если ДобавленнаяНастройка.Уровень <> "Показатель" Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ДобавленнаяНастройка.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сиблинги = Родитель.ПолучитьЭлементы();
	ИндексДобавленнойСтроки = Сиблинги.Индекс(ДобавленнаяНастройка);
	Если ИндексДобавленнойСтроки > 0 Тогда
		КрайняяСтрока = Сиблинги[ИндексДобавленнойСтроки - 1];
		Если КрайняяСтрока.Уровень = "ПоказательОсновной" Тогда
			Сиблинги.Сдвинуть(ИндексДобавленнойСтроки, -1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеПеренестиНельзя(ПереносимыеСтроки, ПояснениеЧтоМожноПереносить)
	
	ОписаниеСтрок = НСтр("ru = 'Выбранные строки';
						|en = 'Выбранные строки'");
	Если Элементы.РедакторНастроек.ВыделенныеСтроки.Количество() = 1 Тогда
		ОписаниеСтрок = НСтр("ru = 'Выбранную строку';
							|en = 'Выбранную строку'");
	КонецЕсли;
	
	ШаблонПредупреждения = НСтр("ru = '%1 переместить нельзя.
                                 |%2';
                                 |en = '%1 переместить нельзя.
                                 |%2'");
	ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ОписаниеСтрок, ПояснениеЧтоМожноПереносить);
	
	ПоказатьПредупреждение(, ТекстПредупреждения);

КонецПроцедуры

&НаКлиенте
Процедура СдвинутьНастройку(Знач Настройка, Направление)
	
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительНастройки = Настройка.ПолучитьРодителя();
	Если РодительНастройки = Неопределено Тогда
		// Верхний уровень не разрешаем менять
		Возврат;
	КонецЕсли;
	
	КоллекцияНастройки = РодительНастройки.ПолучитьЭлементы();
	ИндексНастройки = КоллекцияНастройки.Индекс(Настройка);
	
	МеняемыеНастройки = Новый Массив;
	МеняемыеНастройки.Добавить(Настройка);
	
	Если Направление > 0 Тогда
		ИндексСледующей = ИндексНастройки + 1;
		Если КоллекцияНастройки.Количество() <= ИндексСледующей Тогда
			Возврат;
		КонецЕсли;
		МеняемыеНастройки.Добавить(КоллекцияНастройки[ИндексСледующей]);
	Иначе
		ИндексПредыдущей = ИндексНастройки - 1;
		Если ИндексПредыдущей < 0 Тогда
			Возврат;
		КонецЕсли;
		МеняемыеНастройки.Вставить(0, КоллекцияНастройки[ИндексПредыдущей]);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	// Проверяем, можем ли их поменять
	ЕстьПоказательОсновной = Ложь;
	Для Каждого Настройка Из МеняемыеНастройки Цикл
		Если Настройка.Уровень = "Подраздел" Или Настройка.Уровень = "Объект" Тогда
			Возврат;
		КонецЕсли;
		Если Настройка.Уровень = "ПоказательОсновной" Тогда
			ЕстьПоказательОсновной = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПоказательОсновной И МеняемыеНастройки[0].Алгоритм = МеняемыеНастройки[1].Алгоритм Тогда
		// Основной должен быть последним
		Возврат;
	КонецЕсли;
	
	ПозицияПервой = КоллекцияНастройки.Индекс(МеняемыеНастройки[0]);
	КоллекцияНастройки.Сдвинуть(ПозицияПервой, 1);
	Для Каждого Настройка Из МеняемыеНастройки Цикл
		Настройка.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УровеньРедактораМожноВыбратьВывод()
	
	Возврат "Показатель";
	
КонецФункции

#КонецОбласти

#Область СохранениеРезультата

// Помещение настроек в коллекцию, записываемую в информационную базу, называем здесь Сохранение.
// Непосредственно запись выполняется вне формы.

&НаКлиенте
Процедура Подключаемый_ПрименитьРезультатРаботыФормы(РезультатРаботы, Контекст) Экспорт // Обработчик оповещения
	
	ПрименитьРезультатРаботыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьРезультатРаботыФормы()
	
	РезультатФормы = Неопределено;
	
	Если Модифицированность Тогда
		РезультатФормы = СохранитьВыполненныеНастройки();
	КонецЕсли;
	
	Модифицированность = Ложь; // Исключаем повторный диалог с пользователем
	
	Закрыть(РезультатФормы);
	
КонецПроцедуры

&НаСервере
Функция СохранитьВыполненныеНастройки()
	
	РедактированиеСтруктурыОтчета = ПолучитьИзВременногоХранилища(АдресРедактированиеСтруктурыОтчета);
	
	ЗаполняемыеПоказателиЗаменяемые = РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели;
	ИндексПоказателиЗаменяемые      = РедактированиеСтруктурыОтчета.ИндексПоказатели;
	
	РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели = БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела();
	РедактированиеСтруктурыОтчета.ИндексПоказатели      = Новый Соответствие;
	
	// Показатели
	ОтборУровни = Новый Структура("Показатель, ПоказательОсновной");
	ВсеНастройки = ВложенныеНастройки(РедакторНастроек, ОтборУровни);
	Для Каждого РедакторПоказателя Из ВсеНастройки Цикл
		
		ЗаменяемыйПоказатель = СохраненныйПоказатель(
			РедакторПоказателя,
			ЗаполняемыеПоказателиЗаменяемые,
			ИндексПоказателиЗаменяемые,
			РедактированиеСтруктурыОтчета.КлассифицируемыеОбъекты);
		
		СохранитьПоказатель(
			РедактированиеСтруктурыОтчета,
			РедакторПоказателя,
			ЗаменяемыйПоказатель,
			РедакторНастроек);
			
	КонецЦикла;
	
	ЗаполнитьКлассифицируемыеОбъекты(РедактированиеСтруктурыОтчета);
	
	// Группы показателей
	Для Каждого РедакторПодраздела Из РедакторНастроек.ПолучитьЭлементы() Цикл
		Для Каждого РедакторГруппыПоказателей Из РедакторПодраздела.ПолучитьЭлементы() Цикл
			
			СохранитьГруппуПоказателей(РедактированиеСтруктурыОтчета, РедакторГруппыПоказателей);
			
		КонецЦикла;
	КонецЦикла;
	
	БухгалтерскаяОтчетностьБРО.ПоместитьЗаполняемыеПоказателиРаздела(
		РедактированиеСтруктурыОтчета.АдресЗаполняемыеПоказатели,
		РедактированиеСтруктурыОтчета.Раздел,
		РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйОписаниеСохраненногоПоказателя()
	
	ОписаниеПоказателя = Новый Структура;
	ОписаниеПоказателя.Вставить("Идентификатор", -1);
	ОписаниеПоказателя.Вставить("Показатель"); // См. БухгалтерскаяОтчетностьБРО.Показатель
	ОписаниеПоказателя.Вставить("КлассифицируемыеОбъекты", Новый Массив); // из ЛюбаяСсылка
	
	Возврат ОписаниеПоказателя;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохраненныйПоказатель(Настройка, ЗаполняемыеПоказатели, ИндексПоказатели, КлассифицируемыеОбъекты)
	
	ИдентификаторПоказателя = ИндексПоказатели[Настройка.ПолучитьИдентификатор()];
	Если ИдентификаторПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПоказателя = НовыйОписаниеСохраненногоПоказателя();
	ОписаниеПоказателя.Идентификатор = ИдентификаторПоказателя;
	ОписаниеПоказателя.Показатель    = БухгалтерскаяОтчетностьБРО.Показатель(
		ИдентификаторПоказателя,
		ЗаполняемыеПоказатели);
		
	КлассифицируемыеОбъектыПоказателя = КлассифицируемыеОбъекты[ИдентификаторПоказателя];
	Если КлассифицируемыеОбъектыПоказателя <> Неопределено Тогда
		ОписаниеПоказателя.КлассифицируемыеОбъекты = КлассифицируемыеОбъектыПоказателя.ВыгрузитьЗначения();
	КонецЕсли;
	
	Возврат ОписаниеПоказателя;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьПоказатель(РедактированиеСтруктурыОтчета, Настройка, ПредыдущийПоказатель, РедакторНастроек)
	
	ИдентификаторНастройки = Настройка.ПолучитьИдентификатор();
	Если РедактированиеСтруктурыОтчета.ИндексПоказатели[ИдентификаторНастройки] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПоказателя = Новый Массив;
	НастройкиПоказателя.Добавить(Настройка);
	ЕстьМодифицированные = Настройка.Модифицированность;
	Для Каждого Связь Из Настройка.СвязанныеЗначения Цикл
		
		НастройкаСвязанногоПоказателя = РедакторНастроек.НайтиПоИдентификатору(Связь.Значение);
		Если НастройкаСвязанногоПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Эталоном считаем то, что модифицировано
		Если Не ЕстьМодифицированные И НастройкаСвязанногоПоказателя.Модифицированность Тогда
			НастройкиПоказателя.Вставить(0, НастройкаСвязанногоПоказателя);
			ЕстьМодифицированные = Истина;
		Иначе
			НастройкиПоказателя.Добавить(НастройкаСвязанногоПоказателя);
			ЕстьМодифицированные = ЕстьМодифицированные Или НастройкаСвязанногоПоказателя.Модифицированность;
		КонецЕсли;
		
	КонецЦикла;
	
	Показатель = РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели.Показатели.Добавить();
	Если Не ЕстьМодифицированные И ПредыдущийПоказатель <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Показатель, ПредыдущийПоказатель.Показатель);
	Иначе
		
		НастройкаИсточник = НастройкиПоказателя[0];
		
		Показатель.Заполнение = ЗаполнениеБухгалтерскойОтчетностиНастраиваемая.НовыйАлгоритмЗаполнения(НастройкаИсточник.Алгоритм);
		
		СохранитьСоставКлассифицируемыхОбъектовПоказателя(Показатель.Заполнение, НастройкаИсточник, ПредыдущийПоказатель);
		СохранитьЗачетПоказателей(Показатель.Заполнение, НастройкаИсточник);
		ЗаполнитьЗначенияСвойств(Показатель, НастройкаИсточник, "Наименование, Вывод");
		
	КонецЕсли;
	
	ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
	
	Для Каждого НастройкаПоказателя Из НастройкиПоказателя Цикл
		РедактированиеСтруктурыОтчета.ИндексПоказатели.Вставить(НастройкаПоказателя.ПолучитьИдентификатор(), ИдентификаторПоказателя);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСоставКлассифицируемыхОбъектовПоказателя(Заполнение, Настройка, ПредыдущийПоказатель)
	
	Если Настройка.Уровень = "ПоказательОсновной" Тогда
		Возврат;
	КонецЕсли;
	
	КлассифицируемыеОбъекты = Новый Массив;
	
	Для Каждого РедакторСтатьи Из Настройка.ПолучитьЭлементы() Цикл
		КлассифицируемыеОбъекты.Добавить(РедакторСтатьи.Объект);
	КонецЦикла;
	
	Если Не СоставКлассифицируемыхОбъектовПоказателяИзменился(КлассифицируемыеОбъекты, ПредыдущийПоказатель) Тогда
		
		Заполнение.Отбор = ПредыдущийПоказатель.Показатель.Заполнение.Отбор;
		
	Иначе
		
		ЗаполнениеБухгалтерскойОтчетностиПравила.ЗаполнитьОтборКлассифицируемымиОбъектами(
			Заполнение.Отбор,
			Заполнение.Идентификатор,
			КлассифицируемыеОбъекты);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоставКлассифицируемыхОбъектовПоказателяИзменился(НовыйСоставКлассифицируемыхОбъектов, ПредыдущийПоказатель)
	
	Если ПредыдущийПоказатель = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(
		НовыйСоставКлассифицируемыхОбъектов,
		ПредыдущийПоказатель.КлассифицируемыеОбъекты);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьГруппуПоказателей(РедактированиеСтруктурыОтчета, РедакторГруппыПоказателей)
	
	ГруппаПоказателей = РедактированиеСтруктурыОтчета.ЗаполняемыеПоказатели.ГруппыПоказателей.Добавить();
	
	ИдентификаторНастройки = РедакторГруппыПоказателей.ПолучитьИдентификатор();
	
	ЗаполнитьЗначенияСвойств(ГруппаПоказателей, РедакторГруппыПоказателей, "КодСтроки");
	
	Если РедакторГруппыПоказателей.Уровень = "Группа" Тогда
		ЗаполнитьЗначенияСвойств(ГруппаПоказателей, РедакторГруппыПоказателей, "Наименование");
		Для Каждого РедакторПоказателя Из РедакторГруппыПоказателей.ПолучитьЭлементы() Цикл
			
			ИдентификаторПоказателя = РедактированиеСтруктурыОтчета.ИндексПоказатели[РедакторПоказателя.ПолучитьИдентификатор()];
			
			Если ИдентификаторПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаПоказателей.Состав.Добавить(ИдентификаторПоказателя);
			
		КонецЦикла;
	Иначе
		ГруппаПоказателей.Показатель = РедактированиеСтруктурыОтчета.ИндексПоказатели[ИдентификаторНастройки];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подсказки

&НаСервере
Процедура НастроитьПодсказки()
	
	Если Не ДоступнаПанельПодсказок() Тогда
		УстановитьВидимостьПодсказок(Ложь);
		Элементы.ИзменитьВидимостьПодсказок.Видимость = Ложь;
	ИначеЕсли Не ПоказыватьПанельПодсказок() Тогда
		УстановитьВидимостьПодсказок(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодсказок(ВидимостьПанели)
	
	Элементы.ИзменитьВидимостьПодсказок.Пометка = ВидимостьПанели;
	Элементы.ПанельПодсказки.Видимость          = ВидимостьПанели;
	Если ВидимостьПанели Тогда
		Элементы.ИзменитьВидимостьПодсказок.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.ИзменитьВидимостьПодсказок.Картинка = БиблиотекаКартинок.СтрелкаВлево;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьПодсказокСервер()
	
	ВидимостьПанели = Не Элементы.ИзменитьВидимостьПодсказок.Пометка;
	
	УстановитьВидимостьПодсказок(ВидимостьПанели);
	
	ЗаписатьСостояниеОтображенияПанелиПодсказок(ВидимостьПанели);
	
	ЗаписатьСтатистикуПодсказки(ВидимостьПанели);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаПанельПодсказок()
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВладелецХранилищаДанных()
	
	Возврат Метаданные.Обработки.НастройкаЗаполненияБухгалтерскойОтчетности.ПолноеИмя();
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПанелиПодсказок()
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяКлючаХраненияСостоянияПанелиПодсказок(Панель)
	
	ОсновнаяЧастьКлюча = "ПользовательСкрылПанельПодсказок";
	
	Если ПустаяСтрока(Панель) Тогда
		Возврат ОсновнаяЧастьКлюча;
	Иначе
		Возврат СтрШаблон("%1_%2", ОсновнаяЧастьКлюча, Панель);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоказыватьПанельПодсказок()
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеИзХранилища = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(
		ВладелецХранилищаДанных(),
		ИмяКлючаХраненияСостоянияПанелиПодсказок(ИмяПанелиПодсказок()));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат (ДанныеИзХранилища <> Истина);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьСостояниеОтображенияПанелиПодсказок(ВидимостьПанели)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(
		ВладелецХранилищаДанных(),
		Не ВидимостьПанели,
		ИмяКлючаХраненияСостоянияПанелиПодсказок(ИмяПанелиПодсказок()));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСтатистикуПодсказки(ВидимостьПанели)
	
	СловаИмяОперации = Новый Массив;
	СловаИмяОперации.Добавить(ВладелецХранилищаДанных());
	ИмяПанели = ИмяПанелиПодсказок();
	Если Не ПустаяСтрока(ИмяПанели) Тогда
		СловаИмяОперации.Добавить(ИмяПанели);
	КонецЕсли;
	ИмяОперации = СтрСоединить(СловаИмяОперации, ".");
	
	Действие = "ОткрытиеФормы";
	Если Не ВидимостьПанели Тогда
		Действие = "ЗакрытиеФормы";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Картинки

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкуНастройки(Настройка)
	
	Если Настройка.Уровень = "Группа" Тогда
		Настройка.Картинка = ИндексКартинкиГруппа();
	ИначеЕсли Настройка.Уровень = "ПоказательОсновной" Тогда
		Настройка.Картинка = ИндексКартинкиПоказательОсновной();
	ИначеЕсли Настройка.Уровень = "Показатель" Тогда
		Настройка.Картинка = ИндексКартинкиПоказатель();
	Иначе
		Настройка.Картинка = ИндексКартинкиПоУмолчанию();
	КонецЕсли;
	
	// Для объектов картинка строк не выводится, так как скрыта основная колонка
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинкиГруппа()
	Возврат 0; // в ПиктограммыЭлементов, аналог БиблиотекаКартинок.Папка
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинкиПоказатель()
	Возврат 3; // в ПиктограммыЭлементов, аналог БиблиотекаКартинок.Реквизит
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинкиПоказательОсновной()
	Возврат 5; // в ПиктограммыЭлементов, аналог БиблиотекаКартинок.ПредопределенныйЭлемент
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинкиПоУмолчанию()
	Возврат -1;
КонецФункции

#КонецОбласти

#КонецОбласти
