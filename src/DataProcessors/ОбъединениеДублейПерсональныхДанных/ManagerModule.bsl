
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет в журнал регистрации запись об ошибке и выводит сообщение пользователю.
// 
// Параметры:
//  ПредставлениеПроблемы - Строка
//  КлючДанных - ОпределяемыйТип.СубъектПерсональныхДанных
//  ОписаниеОшибки - ИнформацияОбОшибке, Неопределено - Описание ошибки
Процедура ДобавитьВЖурналЗаписьОбОшибкеИСообщитьПользователю(ПредставлениеПроблемы, КлючДанных, ОписаниеОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Объединение задвоенных данных';
									|en = 'Duplicate data merging'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , КлючДанных, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		
	ТекстСообщения = СтрШаблон(НСтр("ru = '%1.%2';
									|en = '%1.%2'"), ПредставлениеПроблемы,
		ОбработкаОшибок.КраткоеПредставлениеОшибки(ОписаниеОшибки()));
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных);
	
КонецПроцедуры

// Актуализирует данные в регистрах сведений, в которых оставляемый дубль содержится в одном из измерений.
// 
// Параметры:
//  ОставляемыйДубль - ОпределяемыйТип.СубъектПерсональныхДанных
//  ИменаИзмерений - Массив из Строка - массив, содержащий возможные имена измерений с оставляемым дублем.
//  ДанныеДляОбъединения - см. ОбъединитьДубли.ДанныеДляОбъединения
Процедура ОбработатьРегистрыСведений(ОставляемыйДубль, ИменаИзмерений, ДанныеДляОбъединения) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"Обработка.ОбъединениеДублейПерсональныхДанных.ОбработатьРегистрыСведений", "ИменаИзмерений", ИменаИзмерений,
		Новый ОписаниеТипов("Массив"));
	
	Для Каждого ОписаниеРегистраСведений Из ДанныеДляОбъединения.Строки Цикл
		
		Если ОписаниеРегистраСведений.Поле = "Ссылка" Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ОписаниеРегистраСведений.Поле);
		Если МетаданныеРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяРегистра = ОписаниеРегистраСведений.Поле;
		
		ИмяИзмерения = Неопределено;
		ПроверяемоеИмя = Неопределено;
		Для Каждого ПроверяемоеИмя Из ИменаИзмерений Цикл
			Если МетаданныеРегистра.Измерения.Найти(ПроверяемоеИмя) <> Неопределено Тогда
				ИмяИзмерения = ПроверяемоеИмя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ИмяИзмерения),
			СтрШаблон(НСтр("ru = 'Не найдено измерение %1 у регистра сведений %2';
							|en = 'The %1 dimension of the %2 information register is not found'"), ПроверяемоеИмя, ИмяРегистра),
			"Обработка.ОбъединениеДублейПерсональныхДанных.ОбработатьРегистрыСведений");
		
		ЕстьИзмерениеНомерПоПорядку = МетаданныеРегистра.Измерения.Найти("НомерПоПорядку") <> Неопределено;
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[ИмяИзмерения].Установить(ОставляемыйДубль);
		
		Для Каждого ОписаниеЗаписиРегистраСведений Из ОписаниеРегистраСведений.Строки Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			Для Каждого ОписаниеПоляЗаписи Из ОписаниеЗаписиРегистраСведений.Строки Цикл
				НоваяЗапись[ОписаниеПоляЗаписи.Поле] = ОписаниеПоляЗаписи.Значение;
			КонецЦикла;
			
			НоваяЗапись[ИмяИзмерения] = ОставляемыйДубль;
			Если ЕстьИзмерениеНомерПоПорядку Тогда
				НоваяЗапись.НомерПоПорядку = НаборЗаписей.Количество();
			КонецЕсли;
			 
		КонецЦикла;
		
		УстановитьПараметрыЗаписиОбъекта(НаборЗаписей);
		НаборЗаписей.Записать();
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Дубли  - Массив из ОпределяемыйТип.СубъектПерсональныхДанных
//  ДанныеДляОбъединения - ДеревоЗначений - данные, которыми будет заполнен оставляемый дубль:
//   * Поле - Строка
//   * Значение - Произвольный
//  ДополнительныеПараметры - Структура, Неопределено - 
// 
// Возвращаемое значение:
//  ОпределяемыйТип.СубъектПерсональныхДанных
Функция ОбъединитьДубли(Дубли, ДанныеДляОбъединения, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОставляемыйДубль = ОставляемыйДубль(Дубли);
	УдаляемыеДубли = ОбщегоНазначения.СкопироватьРекурсивно(Дубли);
	УдаляемыеДубли.Удалить(УдаляемыеДубли.Найти(ОставляемыйДубль));
	
	НачатьТранзакцию();
	Попытка
		ОбновитьОставляемыйДубль(ОставляемыйДубль, ДанныеДляОбъединения);
		
		МодульМенеджера = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипЗнч(ОставляемыйДубль));
		МодульМенеджера.ПриОбъединенииДублей(ОставляемыйДубль, ДанныеДляОбъединения, ДополнительныеПараметры);
			
		ИсключаемыеМетаданные = МетаданныеИсключаемыеПриЗаменеСсылокНаДубли();
		МодульМенеджера.ДополнитьМетаданныеИсключаемыеПриЗаменеСсылокНаДубли(ИсключаемыеМетаданные);
		
		ЗаменитьОставшиесяСсылки(УдаляемыеДубли, ОставляемыйДубль, ИсключаемыеМетаданные);
		ПометитьДублиНаУдаление(УдаляемыеДубли);
		
		МодульМенеджера.ПослеОбъединенияДублей(ОставляемыйДубль, УдаляемыеДубли, ДополнительныеПараметры);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ОставляемыйДубль;
	
КонецФункции

// Возвращает дерево значений с информацией о найденных дублях.
// 
// Параметры:
//  ТипВладельцаЛичныхДанных - Тип - тип владельца личных данных физического лица.
// 
// Возвращаемое значение:
//  ДеревоЗначений
Функция ДеревоДублей(ТипВладельцаЛичныхДанных) Экспорт

	МодульМенеджера = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипВладельцаЛичныхДанных);
	ДеревоДублей = МодульМенеджера.ДеревоДублей();
	
	Возврат ДеревоДублей;
	
КонецФункции

// Возвращает описание колонки, добавляемой в таблицу дублей в форме поиска дублей.
// 
// Параметры:
//  Имя - Строка - имя колонки.
//  ОписаниеТипа - ОписаниеТипов - описание типа колонки.
//  Заголовок - Строка - заголовок колонки.
//  ПоказыватьВФорме - Булево - если Истина, то показывать на форме.
// 
// Возвращаемое значение:
//  Структура - Описание колонки:
//   * Имя - Строка
//   * ОписаниеТипа - ОписаниеТипов
//   * Заголовок - Строка
//   * ПоказыватьВФорме - Булево
Функция ОписаниеКолонки(Имя, ОписаниеТипа, Заголовок = "", ПоказыватьВФорме = Истина) Экспорт
	
	ОписаниеКолонки = Новый Структура;
	
	ОписаниеКолонки.Вставить("Имя", Имя);
	ОписаниеКолонки.Вставить("ОписаниеТипа", ОписаниеТипа);
	ОписаниеКолонки.Вставить("Заголовок", Заголовок);
	ОписаниеКолонки.Вставить("ПоказыватьВФорме", ПоказыватьВФорме);
	
	Возврат ОписаниеКолонки;
	
КонецФункции

// Дополнить колонки таблицы поиска дублей.
// 
// Параметры:
//  ОписанияКолонок - Массив из Структура:
//    см. ОписаниеКолонки
//  ТипВладельцаЛичныхДанных - Тип
Процедура ДополнитьКолонкиТаблицыПоискаДублей(ОписанияКолонок, ТипВладельцаЛичныхДанных) Экспорт
	
	МодульМенеджера = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипВладельцаЛичныхДанных);
	МодульМенеджера.ДополнитьКолонкиТаблицыПоискаДублей(ОписанияКолонок);
	
КонецПроцедуры

// Возвращает таблицу значений с данными найденных дублей.
// 
// Параметры:
//  Дубли - Массив из ОпределяемыйТип.СубъектПерсональныхДанных
//  ТипВладельцаЛичныхДанных - Тип
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав колонок зависи от типа владельца личных данных, обязательно должна присутствовать колонка
//  Дубль типа ОпределяемыйТип.СубъектПерсональныхДанных
Функция ДанныеДублей(Дубли, ТипВладельцаЛичныхДанных) Экспорт
	
	МодульМенеджера = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипВладельцаЛичныхДанных);
	
	Возврат МодульМенеджера.ДанныеДублей(Дубли);
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  КоличествоДублей - Число
//  ИменаДеревьев - Строка - имена реквизитов деревьев сравнения через запятую.
Процедура ЗаполнитьКолонкиДеревьевСравнения(Форма, КоличествоДублей, ИменаДеревьев = "ДеревоСравнения") Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив; // Массив из РеквизитФормы
	УдаляемыеРеквизиты = Новый Массив; // Массив из Строка
	
	НеудаляемыеРеквизиты = Новый Массив; // Массив из Строка
	НеудаляемыеРеквизиты.Добавить("Поле");
	НеудаляемыеРеквизиты.Добавить("Представление");
	НеудаляемыеРеквизиты.Добавить("Картинка");
	НеудаляемыеРеквизиты.Добавить("ТипПоля");
	
	МассивИменДеревьев = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаДеревьев);
	
	Для каждого ИмяДерева Из МассивИменДеревьев Цикл
		Колонки = Форма.ПолучитьРеквизиты(ИмяДерева);
		Для каждого Колонка Из Колонки Цикл
			Если НеудаляемыеРеквизиты.Найти(Колонка.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			УдаляемыеРеквизиты.Добавить(ИмяДерева + "." + Колонка.Имя);
		КонецЦикла;
		
		Для Индекс = 0 По КоличествоДублей - 1 Цикл
			ИндексСтрокой = ЧислоВСтроку(Индекс);
			ИндексРеквизита = УдаляемыеРеквизиты.Найти(ИмяДерева + ".Поле" + ИндексСтрокой);
			Если ИндексРеквизита = Неопределено Тогда
				Реквизит  = Новый РеквизитФормы("Поле" + ИндексСтрокой, Новый ОписаниеТипов(), ИмяДерева);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			Иначе
				УдаляемыеРеквизиты.Удалить(ИндексРеквизита);
			КонецЕсли; 
			
			ИндексРеквизита = УдаляемыеРеквизиты.Найти(ИмяДерева + ".ПолеПометка" + ИндексСтрокой);
			Если ИндексРеквизита = Неопределено Тогда
				Реквизит  = Новый РеквизитФормы("ПолеПометка" + ИндексСтрокой, Новый ОписаниеТипов("Булево"), ИмяДерева);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			Иначе
				УдаляемыеРеквизиты.Удалить(ИндексРеквизита);
			КонецЕсли; 
			
			ИндексРеквизита = УдаляемыеРеквизиты.Найти(ИмяДерева + ".ДоступенДляВыбора" + ИндексСтрокой);
			Если ИндексРеквизита = Неопределено Тогда
				Реквизит  = Новый РеквизитФормы("ДоступенДляВыбора" + ИндексСтрокой, Новый ОписаниеТипов("Булево"),
					ИмяДерева);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			Иначе
				УдаляемыеРеквизиты.Удалить(ИндексРеквизита);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//   * МетаданныеОбъекта - ОбъектМетаданныхСправочник -
//   * ИмяКолонкиОбъекта - Строка -
//   * Дубли - Массив из ОпределяемыйТип.СубъектПерсональныхДанных
//   * ОсновныеДанные - ТаблицаЗначений -
//   * ОписанияТабличныхЧастей - Структура из КлючИЗначение:
//     ** Ключ - Строка - Имя табличной части
//     ** Значение - см. НовоеОписаниеТабличнойЧасти
//   * ОписанияПодчиненныхСправочников - Массив из Структура:
//    ** ИмяСправочника - Строка
//    ** ИмяВладельца - Строка
//   * ОписанияРегистровСведений - Массив из Структура:
//     см. НовоеОписаниеРегистра
Функция НовыеПараметрыПолученияДанныхНайденныхДублей() Экспорт
	
	НовыеПараметры = Новый Структура();
	
	НовыеПараметры.Вставить("МетаданныеОбъекта", Метаданные.Справочники.ФизическиеЛица);
	НовыеПараметры.Вставить("ИмяКолонкиОбъекта", "");
	НовыеПараметры.Вставить("Дубли", Новый Массив);
	НовыеПараметры.Вставить("ОсновныеДанные", Новый ТаблицаЗначений);
	НовыеПараметры.Вставить("ОписанияТабличныхЧастей", Новый Структура);
	НовыеПараметры.Вставить("ОписанияПодчиненныхСправочников", Новый Массив);
	НовыеПараметры.Вставить("ОписанияРегистровСведений", Новый Массив);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НайтиДобавитьПоле(Коллекция, Знач Поле, ЗначениеПоля = "", ДобавлятьЕслиНеНайдено = Истина, ТипПоля = "") Экспорт
	
	Поле = Строка(Поле);
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		Если ЭлементКоллекции.Поле = Поле Тогда
			Возврат ЭлементКоллекции;
		КонецЕсли; 
	КонецЦикла;
	
	Если ДобавлятьЕслиНеНайдено Тогда
		ЭлементКоллекции = Коллекция.Добавить();
		ЭлементКоллекции.Поле = Поле;
		ЭлементКоллекции.Представление = Формат(ЗначениеПоля, "ДЛФ=Д");
		ЭлементКоллекции.ТипПоля = ТипПоля;
		Возврат ЭлементКоллекции;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьКоллекцию(Коллекция, ДанныеЗаполнения) Экспорт
	
	Для каждого ДанноеЗаполнения Из ДанныеЗаполнения Цикл
		ДобавляемаяСтрока = Коллекция.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемаяСтрока, ДанноеЗаполнения);
		ЗаполнитьКоллекцию(ДобавляемаяСтрока.ПолучитьЭлементы(), ДанноеЗаполнения.Строки);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Дубли - Массив из ОпределяемыйТип.СубъектПерсональныхДанных
//  ТипВладельцаЛичныхДанных - Тип 
Процедура ЗаполнитьДеревоСравнения(Форма, Дубли, ТипВладельцаЛичныхДанных) Экспорт
	
	ОбщегоНазначенияБЗККлиентСервер.УдалитьВсеВхожденияКромеТипаИзМассива(Дубли, ТипВладельцаЛичныхДанных);

	МодульМенеджера = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипВладельцаЛичныхДанных);
	ПараметрыПолученияДанных = МодульМенеджера.ПараметрыПолученияДанныхДублей(Дубли);
	
	ЗаполнитьКолонкиДеревьевСравнения(Форма, Форма.НайденныеДубли.Количество());
	
	СтрокаОбъекта = НайтиДобавитьПоле(Форма.ДеревоСравнения.ПолучитьЭлементы(), "Ссылка",
		ПредставлениеОбъектаПоТипу(ТипЗнч(Дубли[0])), , ТипыПолей().Справочник);
	Для Индекс = 0 По Дубли.Количество() - 1 Цикл
		СтрокаОбъекта["Поле" + ЧислоВСтроку(Индекс)] = Дубли[Индекс];
	КонецЦикла;
	
	ЗаполнитьОсновыеДанные(ПараметрыПолученияДанных, СтрокаОбъекта);
	ЗаполнитьДанныеПодчиненныхСправочников(Форма, ПараметрыПолученияДанных.ОписанияПодчиненныхСправочников, Дубли);
	ЗаполнитьДанныеРегистров(Форма, ПараметрыПолученияДанных.ОписанияРегистровСведений, Дубли);

КонецПроцедуры

// Параметры:
//  ИмяКлючевогоРеквизита - Строка
// 
// Возвращаемое значение:
//  Структура:
//   * ИмяКлючевогоРеквизита - Строка
//   * ИмяРеквизитаПредставления - Строка - Имя реквизита, значение которого будет использоваться в качестве
//     представления строки табличной части. Если не заполнено, то представление формируется из значений реквизитов
//     строки табличной части.
Функция НовоеОписаниеТабличнойЧасти(ИмяКлючевогоРеквизита = "") Экспорт
	
	ОписаниеТабличнойЧасти = Новый Структура;
	ОписаниеТабличнойЧасти.Вставить("ИмяКлючевогоРеквизита", ИмяКлючевогоРеквизита);
	ОписаниеТабличнойЧасти.Вставить("ИмяРеквизитаПредставления", "");
	
	Возврат ОписаниеТабличнойЧасти;
	
КонецФункции

// Параметры:
//  ИмяСправочника - Строка
//  ИмяКлючевогоРеквизита - Строка
// 
// Возвращаемое значение:
//  Структура:
//   * ИмяСправочника - Строка 
//   * ИмяКлючевогоРеквизита - Строка
//   * ИмяВладельца - Строка
Функция НовоеОписаниеСправочника(ИмяСправочника = "", ИмяКлючевогоРеквизита = "") Экспорт
	
	ОписаниеСправочника = Новый Структура;
	ОписаниеСправочника.Вставить("ИмяСправочника", ИмяСправочника);
	ОписаниеСправочника.Вставить("ИмяКлючевогоРеквизита", ИмяКлючевогоРеквизита);
	ОписаниеСправочника.Вставить("ИмяВладельца", "");
	
	Возврат ОписаниеСправочника;
	
КонецФункции

// Параметры:
//  ИмяРегистра - Строка
//  ИмяКлючевогоРеквизита - Строка
// 
// Возвращаемое значение:
//  Структура:
//   * ИмяРегистра - Строка 
//   * ИмяКлючевогоРеквизита - Строка
//   * ИмяРеквизита - Строка - Имя поля регистра, в котором содержится ссылка на дубль.
//   * ИмяРеквизитаПредставления - Строка - Имя поля, значение которого будет использоваться в качестве представления
//     записи в дереве сравнения. Если не заполнено, то представление формируется из значений полей записи регистра.
Функция НовоеОписаниеРегистра(ИмяРегистра = "", ИмяКлючевогоРеквизита = "") Экспорт
	
	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("ИмяРегистра", ИмяРегистра);
	ОписаниеРегистра.Вставить("ИмяКлючевогоРеквизита", ИмяКлючевогоРеквизита);
	ОписаниеРегистра.Вставить("ИмяРеквизита", "ФизическоеЛицо");
	ОписаниеРегистра.Вставить("ИмяРеквизитаПредставления", "");
	
	Возврат ОписаниеРегистра;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоТаблицеЗначений(ПолеДанных, ТаблицаДанных, ИндексДубля, МетаданныеОбъекта,
	ОписаниеТаблицы = Неопределено)
	
	ИмяКлючевогоРеквизита = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеТаблицы, "ИмяКлючевогоРеквизита");
	ИмяРеквизитаДубля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеТаблицы, "ИмяРеквизита");
	
	ИмяКолонки = ИмяКолонки(ТаблицаДанных, ИмяКлючевогоРеквизита);
	СоответствиеПредставленийИмени = СоответствиеПредставленийИмени(МетаданныеОбъекта);
	ИмяПоля = "Поле" + ЧислоВСтроку(ИндексДубля);
	
	Для каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
		ПолеСтрокиТаблицы = НайтиДобавитьПоле(ПолеДанных.ПолучитьЭлементы(), СтрокаТаблицаДанных[ИмяКолонки],
			СтрокаТаблицаДанных[ИмяКолонки]);
		ПолеСтрокиТаблицы[ИмяПоля] = ПредставлениеСтрокиТаблицы(ОписаниеТаблицы, ПолеСтрокиТаблицы, ИмяПоля,
			СтрокаТаблицаДанных, ТаблицаДанных.Колонки, ИмяКолонки);
		ВывестиРеквизитыТаблицыВДерево(ПолеСтрокиТаблицы, ИмяПоля, СтрокаТаблицаДанных, ТаблицаДанных.Колонки,
			ИмяКолонки, ИмяРеквизитаДубля, СоответствиеПредставленийИмени);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеСтрокиТаблицы(ОписаниеТаблицы, ПолеСтрокиТаблицы, ИмяПоля, СтрокаТаблицаДанных, Колонки, ИмяКолонки)
	
	ИмяРеквизитаПредставления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеТаблицы,
		"ИмяРеквизитаПредставления");
		
	Если ЗначениеЗаполнено(ИмяРеквизитаПредставления) Тогда
		Возврат СтрокаТаблицаДанных[ИмяРеквизитаПредставления];
	КонецЕсли;
	
	ПредставлениеСтроки = "";
	ИмяРеквизитаДубля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеТаблицы, "ИмяРеквизита");
	
	Для каждого Колонка Из Колонки Цикл
		Если ПропуститьКолонку(Колонка, ИмяКолонки, ИмяРеквизитаДубля, СтрокаТаблицаДанных)
			Или ПустаяСтрока(СтрокаТаблицаДанных[Колонка.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаТаблицаДанных[Колонка.Имя]) = Тип("Дата") Тогда
			ПредставлениеПоля = Формат(СтрокаТаблицаДанных[Колонка.Имя], "ДЛФ=Д");
		Иначе
			ПредставлениеПоля = Строка(СтрокаТаблицаДанных[Колонка.Имя]);
		КонецЕсли;
		ПредставлениеСтроки = ?(ЗначениеЗаполнено(ПредставлениеСтроки), ПредставлениеСтроки + ", ", "")
			+ ПредставлениеПоля;
	КонецЦикла;
	
	Возврат ПредставлениеСтроки;
	
КонецФункции

Функция ИмяКолонки(ТаблицаДанных, ИмяКлючевогоРеквизита)
	
	Если ЗначениеЗаполнено(ИмяКлючевогоРеквизита)Тогда
		ИмяКолонки = ИмяКлючевогоРеквизита;
	ИначеЕсли ТаблицаДанных.Колонки.Найти("МесяцНалоговогоПериода") <> Неопределено Тогда
		ИмяКолонки = "МесяцНалоговогоПериода";
	ИначеЕсли ТаблицаДанных.Колонки.Найти("Период") <> Неопределено Тогда
		ИмяКолонки = "Период";
	ИначеЕсли ТаблицаДанных.Колонки.Найти("НомерПоПорядку") <> Неопределено Тогда
		ИмяКолонки = "НомерПоПорядку";
	Иначе
		ИмяКолонки = "НомерСтроки";
	КонецЕсли;
	
	Возврат ИмяКолонки;
	
КонецФункции

Функция СоответствиеПредставленийИмени(МетаданныеОбъекта)
	
	СоответствиеПредставленийИмени = Новый Соответствие;
	Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		СоответствиеПредставленийИмени.Вставить(Реквизит.Имя, Реквизит.Представление());
	КонецЦикла;
	
	Если ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта) Тогда
		Для каждого Ресурс Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			СоответствиеПредставленийИмени.Вставить(Ресурс.Имя, Ресурс.Представление());
		КонецЦикла;
		Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			СоответствиеПредставленийИмени.Вставить(Измерение.Имя, Измерение.Представление());
		КонецЦикла;
		Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
			СоответствиеПредставленийИмени.Вставить(Ресурс.Имя, Ресурс.Представление());
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеПредставленийИмени;
	
КонецФункции

Процедура ВывестиРеквизитыТаблицыВДерево(ПолеСтрокиТаблицы, ИмяПоля, СтрокаТаблицаДанных, Колонки, ИмяКолонки,
	ИмяРеквизитаДубля, СоответствиеПредставленийИмени)
	
	Для каждого Колонка Из Колонки Цикл
		Если ПропуститьКолонку(Колонка, ИмяКолонки, ИмяРеквизитаДубля, СтрокаТаблицаДанных) Тогда
			Продолжить;
		КонецЕсли; 
		ПолеРеквизитаСтрокиТаблицы = НайтиДобавитьПоле(ПолеСтрокиТаблицы.ПолучитьЭлементы(), Колонка.Имя,
			СоответствиеПредставленийИмени[Колонка.Имя]);
		Если ЗначениеЗаполнено(СтрокаТаблицаДанных[Колонка.Имя]) Или СтрокаТаблицаДанных[Колонка.Имя] = Ложь Тогда
			ПолеРеквизитаСтрокиТаблицы[ИмяПоля] = СтрокаТаблицаДанных[Колонка.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПропуститьКолонку(Колонка, ИмяКолонки, ИмяРеквизитаДубля, СтрокаТаблицаДанных)
	
	Если Колонка.Имя = ИмяКолонки 
		И (ИмяКолонки = "НомерСтроки" Или ИмяКолонки = "НомерПоПорядку") Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Колонка.Имя = ИмяРеквизитаДубля Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если СтрНайти(ВРег(Колонка.Имя), "УДАЛИТЬ") = 1 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если СтрНайти(ВРег(СтрокаТаблицаДанных[Колонка.Имя]), "XML") <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьОсновыеДанные(Параметры, ГруппаОсновныеДанные)
	
	ОсновныеДанные = Параметры.ОсновныеДанные;
	МетаданныеОбъекта = Параметры.МетаданныеОбъекта;
	Дубли = Параметры.Дубли;
	ОписанияТабличныхЧастей = Параметры.ОписанияТабличныхЧастей;
	
	Для каждого СтрокаДеревоОсновныхДанных Из ОсновныеДанные Цикл
		ИндексДубля = Дубли.Найти(СтрокаДеревоОсновныхДанных.Ссылка);
		Для каждого Колонка Из ОсновныеДанные.Колонки Цикл
			Если Колонка.Имя = "Ссылка" Или СтрНайти(ВРег(Колонка.Имя), "УДАЛИТЬ") = 1 Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(СтрокаДеревоОсновныхДанных[Колонка.Имя]) = Тип("ТаблицаЗначений") Тогда
				ИмяТабличнойЧасти = Колонка.Имя;
				МетаданныеТабличнойЧасти = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
				ПолеТабличнойЧасти = НайтиДобавитьПоле(ГруппаОсновныеДанные.ПолучитьЭлементы(), ИмяТабличнойЧасти,
					МетаданныеТабличнойЧасти.Представление(), , ТипыПолей().ТабличнаяЧасть);
				ТаблицаДанных = СтрокаДеревоОсновныхДанных[ИмяТабличнойЧасти];
				ЗаполнитьПоТаблицеЗначений(ПолеТабличнойЧасти, ТаблицаДанных, ИндексДубля, МетаданныеТабличнойЧасти,
					ОписанияТабличныхЧастей[ИмяТабличнойЧасти]);
			Иначе
				МетаданныеКолонки = МетаданныеОбъекта.Реквизиты.Найти(Колонка.Имя);
				Если МетаданныеКолонки = Неопределено Тогда
					Для каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
						Если СтандартныйРеквизит.Имя = Колонка.Имя Тогда
							МетаданныеКолонки = СтандартныйРеквизит;
						КонецЕсли;
					КонецЦикла;
					Если МетаданныеКолонки = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ПолеДанных = НайтиДобавитьПоле(ГруппаОсновныеДанные.ПолучитьЭлементы(), Колонка.Имя,
					МетаданныеКолонки.Представление());
				ЗначениеПоля = СтрокаДеревоОсновныхДанных[Колонка.Имя];
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					ПолеДанных["Поле" + ЧислоВСтроку(ИндексДубля)] = ЗначениеПоля;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область ЗаполнениеПодчиненныхСправочников

Процедура ЗаполнитьДанныеПодчиненныхСправочников(Форма, ОписанияСправочников, Дубли)
	
	Если ОписанияСправочников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодчиненныхСправочников = ДанныеПодчиненныхСправочников(ОписанияСправочников, Дубли);
		
	Для каждого Описание Из ОписанияСправочников Цикл
		ЗаполнитьДанныеПодчиненногоСправочника(ДанныеПодчиненныхСправочников, Описание, Дубли,
			Форма.ДеревоСравнения.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеПодчиненныхСправочников(ОписанияПодчиненныхСправочников, Дубли)
	
	ДанныеПодчиненныхСправочников = Новый Соответствие;
	ИндексыЗапросовВПакете = Новый Соответствие;
	ЧастиПакета = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Для каждого ОписаниеСправочника Из ОписанияПодчиненныхСправочников Цикл
		ЧастиПакета.Добавить(ТекстЗапросаДляПодчиненногоСправочника(ОписаниеСправочника));
		ИндексыЗапросовВПакете.Вставить(ОписаниеСправочника.ИмяСправочника, ЧастиПакета.Количество() * 2 - 1);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ЧастиПакета, ОбщегоНазначения.РазделительПакетаЗапросов());	
	Запрос.УстановитьПараметр("МассивСсылок", Дубли);
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Для каждого ОписаниеСправочника Из ОписанияПодчиненныхСправочников Цикл
		ИндексЗапроса = ИндексыЗапросовВПакете.Получить(ОписаниеСправочника.ИмяСправочника);
		ДанныеПодчиненныхСправочников.Вставить(ОписаниеСправочника.ИмяСправочника,
			РезультатПакета.Получить(ИндексЗапроса).Выгрузить());
	КонецЦикла;
	
	Возврат ДанныеПодчиненныхСправочников;
	
КонецФункции

Функция ТекстЗапросаДляПодчиненногоСправочника(ОписаниеСправочника)

	ИмяСправочника = ОписаниеСправочника.ИмяСправочника;
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	
	ОписаниеРеквизитов = "Т.Владелец";
	Если МетаданныеСправочника.ДлинаНаименования > 0 Тогда
		ОписаниеРеквизитов = ОписаниеРеквизитов + "," + Символы.ПС + "	Т.Наименование";
	КонецЕсли; 
	
	Для каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		ОписаниеРеквизитов = ОписаниеРеквизитов + "," + Символы.ПС + "	Т." + Реквизит.Имя;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	&ОписаниеРеквизитов
	|ПОМЕСТИТЬ #ВТСсылки
	|ИЗ
	|	#ИмяСправочника КАК Т
	|ГДЕ
	|	Т.Владелец В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ОписаниеРеквизитов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТМладшие.Ссылка) КАК НомерСтроки
	|ИЗ
	|	#ВТСсылки КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ВТСсылки КАК ТМладшие
	|		ПО Т.Ссылка > ТМладшие.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	&ОписаниеРеквизитов
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеРеквизитов", ОписаниеРеквизитов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяСправочника", "Справочник." + ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТСсылки", "ВТСсылки" + ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеПодчиненногоСправочника(ДанныеПодчиненныхСправочников, ОписаниеСправочника, Дубли,
	КоллекцияПолей)
	
	ИмяСправочника = ОписаниеСправочника.ИмяСправочника;
	ИмяВладельца = ОписаниеСправочника.ИмяВладельца;
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	
	ТаблицаСправочника = ДанныеПодчиненныхСправочников.Получить(ИмяСправочника);
	Если ТаблицаСправочника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСправочника.Колонки.Владелец.Имя = ИмяВладельца;
	ПолеДанных = НайтиДобавитьПоле(КоллекцияПолей, ИмяСправочника, МетаданныеСправочника.Представление(), ,
		ТипыПолей().Справочник);
	Для Индекс = 0 По Дубли.Количество() - 1 Цикл
		ТаблицаДанных = ТаблицаСправочника.Скопировать(Новый Структура(ИмяВладельца, Дубли[Индекс]));
		ЗаполнитьПоТаблицеЗначений(ПолеДанных, ТаблицаДанных, Индекс, МетаданныеСправочника);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРегистров

Процедура ЗаполнитьДанныеРегистров(Форма, ОписанияРегистров, Дубли)
	
	Если ОписанияРегистров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРегистров = ДанныеРегистров(ОписанияРегистров, Дубли);
	
	Для каждого ОписаниеРегистраСведений Из ОписанияРегистров Цикл
		ЗаполнитьДанныеРегистра(ДанныеРегистров, ОписаниеРегистраСведений, Дубли,
			Форма.ДеревоСравнения.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеРегистров(ОписанияРегистров, Дубли)
	
	ДанныеРегистров = Новый Соответствие;
	ИндексыЗапросовВПакете = Новый Соответствие;
	ЧастиПакета = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Для каждого ОписаниеРегистра Из ОписанияРегистров Цикл
		ЧастиПакета.Добавить(ТекстЗапросаДляРегистра(ОписаниеРегистра));
		ИндексыЗапросовВПакете.Вставить(ОписаниеРегистра.ИмяРегистра, ЧастиПакета.Количество() - 1);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ЧастиПакета, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("МассивСсылок", Дубли);
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Для каждого ОписаниеРегистра Из ОписанияРегистров Цикл
		ИндексЗапроса = ИндексыЗапросовВПакете.Получить(ОписаниеРегистра.ИмяРегистра);
		ДанныеРегистров.Вставить(ОписаниеРегистра.ИмяРегистра, РезультатПакета.Получить(ИндексЗапроса).Выгрузить());
	КонецЦикла;
	
	Возврат ДанныеРегистров;
	
КонецФункции

Функция ТекстЗапросаДляРегистра(ОписаниеРегистра)
	
	ИмяРегистраСведений = ОписаниеРегистра.ИмяРегистра;
	ИмяРеквизита = ОписаниеРегистра.ИмяРеквизита;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РС.*
	|ИЗ
	|	#РегистрСведений КАК РС
	|ГДЕ
	|	РС.ФизическоеЛицо В(&МассивСсылок)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрСведений", "РегистрСведений." + ИмяРегистраСведений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ФизическоеЛицо", ИмяРеквизита);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеРегистра(ДанныеРегистров, ОписаниеРегистраСведений, Дубли, КоллекцияПолей)
	
	ИмяРегистра = ОписаниеРегистраСведений.ИмяРегистра;
	ИмяРеквизита = ОписаниеРегистраСведений.ИмяРеквизита;
	МетаданныеРегистраСведений = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ТаблицаРегистра = ДанныеРегистров.Получить(ИмяРегистра);
	Если ТаблицаРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолеДанных1 = НайтиДобавитьПоле(КоллекцияПолей, ИмяРегистра, МетаданныеРегистраСведений.Представление(), ,
		ТипыПолей().РегистрСведений);
	
	Для Индекс = 0 По Дубли.Количество() - 1 Цикл
		ДанныеДубля = ТаблицаРегистра.Скопировать(Новый Структура(ИмяРеквизита, Дубли[Индекс]));
		ЗаполнитьПоТаблицеЗначений(ПолеДанных1, ДанныеДубля, Индекс, МетаданныеРегистраСведений, ОписаниеРегистраСведений);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбъединениеИОчисткаСсылок

// Возвращаемое значение:
//  Массив из Строка
Функция МетаданныеИсключаемыеПриЗаменеСсылокНаДубли()
	
	ИсключаемыеМетаданные = Новый Массив;
	
	ИсключаемыеМетаданные.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	ИсключаемыеМетаданные.Добавить(Метаданные.РегистрыСведений.ГруппыЗначенийДоступа.ПолноеИмя());
	ИсключаемыеМетаданные.Добавить(Метаданные.РегистрыСведений.НаборыЗначенийДоступа.ПолноеИмя());
	ИсключаемыеМетаданные.Добавить(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя());
	
	Возврат ИсключаемыеМетаданные;
	
КонецФункции

Процедура ЗаменитьСсылкиВСтрокеСОбъектом(СтрокаСОбъектом, СсылкаЗамены)
	
	МеняемаяСсылка = СтрокаСОбъектом.Ссылка;
	МетаданныеОбъекта = СтрокаСОбъектом.Метаданные;
	
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
		Или ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
		Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта)
		Или ОбщегоНазначения.ЭтоЗадача(МетаданныеОбъекта)
		Или ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
		
		ИзменяемыйОбъект = СтрокаСОбъектом.Данные.ПолучитьОбъект();
		ИзменяемыйОбъект.Заблокировать();
		
		ЗаменитьСсылкиВКоллекцииРеквизитов(ИзменяемыйОбъект, МетаданныеОбъекта.СтандартныеРеквизиты, МеняемаяСсылка,
			СсылкаЗамены);
		ЗаменитьСсылкиВКоллекцииРеквизитов(ИзменяемыйОбъект, МетаданныеОбъекта.Реквизиты, МеняемаяСсылка,
			СсылкаЗамены);
		
		Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Для каждого СтрокаТабличнойЧасти Из ИзменяемыйОбъект[ТабличнаяЧасть.Имя] Цикл
				ЗаменитьСсылкиВКоллекцииРеквизитов(СтрокаТабличнойЧасти, ТабличнаяЧасть.Реквизиты, МеняемаяСсылка,
					СсылкаЗамены);
			КонецЦикла;
		КонецЦикла;
		
		УстановитьПараметрыЗаписиОбъекта(ИзменяемыйОбъект);
		
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			ИзменяемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ИзменяемыйОбъект.Записать();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			Для каждого РегистрыРегистратора Из МетаданныеОбъекта.Движения Цикл
				ЭтоРегистрБухгалтерии = Ложь;
				Если ОбщегоНазначения.ЭтоРегистрСведений(РегистрыРегистратора) Тогда
					ИзменяемыйРегистр = РегистрыСведений[РегистрыРегистратора.Имя].СоздатьНаборЗаписей();
				ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(РегистрыРегистратора) Тогда
					ИзменяемыйРегистр = РегистрыНакопления[РегистрыРегистратора.Имя].СоздатьНаборЗаписей();
				ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(РегистрыРегистратора) Тогда
					ИзменяемыйРегистр = РегистрыБухгалтерии[РегистрыРегистратора.Имя].СоздатьНаборЗаписей();
					ЭтоРегистрБухгалтерии = Истина;
				Иначе
					ИзменяемыйРегистр = РегистрыРасчета[РегистрыРегистратора.Имя].СоздатьНаборЗаписей();
				КонецЕсли; 
				ИзменяемыйРегистр.Отбор.Регистратор.Установить(СтрокаСОбъектом.Данные);
				ИзменяемыйРегистр.Прочитать();
				Для каждого ЗаписьНабора Из ИзменяемыйРегистр Цикл
					Если ЭтоРегистрБухгалтерии Тогда
						ЗаменитьСсылкиВКоллекцииСтандартныхРеквизитовРегистровБухгалтерии(ЗаписьНабора,
							РегистрыРегистратора.СтандартныеРеквизиты, МеняемаяСсылка, СсылкаЗамены);
					Иначе
						ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНабора, РегистрыРегистратора.СтандартныеРеквизиты,
							МеняемаяСсылка, СсылкаЗамены);
					КонецЕсли;
					ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНабора, РегистрыРегистратора.Реквизиты, МеняемаяСсылка,
						СсылкаЗамены);
					ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНабора, РегистрыРегистратора.Измерения, МеняемаяСсылка,
						СсылкаЗамены);
					ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНабора, РегистрыРегистратора.Ресурсы, МеняемаяСсылка,
						СсылкаЗамены);
				КонецЦикла;
				УстановитьПараметрыЗаписиОбъекта(ИзменяемыйРегистр);
				ИзменяемыйРегистр.Записать();
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеОбъекта)
		И Метаданные.РегистрыСведений[МетаданныеОбъекта.Имя].РежимЗаписи =
			Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		
		ИзменяемыйОбъект = РегистрыСведений[МетаданныеОбъекта.Имя].СоздатьНаборЗаписей();
		СохраняемыйОбъект = РегистрыСведений[МетаданныеОбъекта.Имя].СоздатьНаборЗаписей();
		
		Если Метаданные.РегистрыСведений[МетаданныеОбъекта.Имя].ПериодичностьРегистраСведений <>
			Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ИзменяемыйОбъект.Отбор.Период.Установить(СтрокаСОбъектом.Данные.Период);
			СохраняемыйОбъект.Отбор.Период.Установить(СтрокаСОбъектом.Данные.Период);
		КонецЕсли;
		
		ИзменилосьИзмерение = Ложь;
		Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			ИзменяемыйОбъект.Отбор[Измерение.Имя].Установить(СтрокаСОбъектом.Данные[Измерение.Имя]);
			Если Измерение.Тип.СодержитТип(ТипЗнч(СсылкаЗамены))
				И СтрокаСОбъектом.Данные[Измерение.Имя] = МеняемаяСсылка Тогда
				СохраняемыйОбъект.Отбор[Измерение.Имя].Установить(СсылкаЗамены);
				ИзменилосьИзмерение = Истина;
			Иначе
				СохраняемыйОбъект.Отбор[Измерение.Имя].Установить(СтрокаСОбъектом.Данные[Измерение.Имя]);
			КонецЕсли;
		КонецЦикла;
		ИзменяемыйОбъект.Прочитать();
		
		Для каждого ЗаписьНабора Из ИзменяемыйОбъект Цикл
			ЗаписьНовогоНабора = СохраняемыйОбъект.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНовогоНабора, ЗаписьНабора);
			ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНовогоНабора, МетаданныеОбъекта.СтандартныеРеквизиты,
				МеняемаяСсылка, СсылкаЗамены);
			ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНовогоНабора, МетаданныеОбъекта.Реквизиты, МеняемаяСсылка,
				СсылкаЗамены);
			ЗаменитьСсылкиВКоллекцииРеквизитов(ЗаписьНовогоНабора, МетаданныеОбъекта.Ресурсы, МеняемаяСсылка,
				СсылкаЗамены);
			Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				ЗаписьНовогоНабора[Измерение.Имя] = СохраняемыйОбъект.Отбор[Измерение.Имя].Значение;
			КонецЦикла;
		КонецЦикла;
		
		УстановитьПараметрыЗаписиОбъекта(СохраняемыйОбъект);
		СохраняемыйОбъект.Записать();
		
		Если ИзменилосьИзмерение Тогда
			ИзменяемыйОбъект.Очистить();
			УстановитьПараметрыЗаписиОбъекта(ИзменяемыйОбъект);
			ИзменяемыйОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВКоллекцииСтандартныхРеквизитовРегистровБухгалтерии(ИзменяемыйОбъект, КоллекцияРеквизитов,
	МеняемаяСсылка, СсылкаЗамены)
	
	Для каждого Реквизит Из КоллекцияРеквизитов Цикл
		
		Если Не Реквизит.Тип.СодержитТип(ТипЗнч(СсылкаЗамены)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Реквизит.Имя, "Субконто") > 0 Тогда
			Для каждого ОписаниеЗначенияСубконто Из ИзменяемыйОбъект.СубконтоДТ Цикл
				Если ОписаниеЗначенияСубконто.Значение = МеняемаяСсылка Тогда
					ИзменяемыйОбъект.СубконтоДТ.Вставить(ОписаниеЗначенияСубконто.Ключ, СсылкаЗамены);
				КонецЕсли;
			КонецЦикла;
			Для каждого ОписаниеЗначенияСубконто Из ИзменяемыйОбъект.СубконтоКТ Цикл
				Если ОписаниеЗначенияСубконто.Значение = МеняемаяСсылка Тогда
					ИзменяемыйОбъект.СубконтоКТ.Вставить(ОписаниеЗначенияСубконто.Ключ, СсылкаЗамены);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ИзменяемыйОбъект[Реквизит.Имя] = МеняемаяСсылка Тогда
				ИзменяемыйОбъект[Реквизит.Имя] = СсылкаЗамены;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВКоллекцииРеквизитов(ИзменяемыйОбъект, КоллекцияРеквизитов, МеняемаяСсылка, СсылкаЗамены)
	
	Для каждого Реквизит Из КоллекцияРеквизитов Цикл
		Если Реквизит.Тип.СодержитТип(ТипЗнч(СсылкаЗамены)) И ИзменяемыйОбъект[Реквизит.Имя] = МеняемаяСсылка Тогда
			ИзменяемыйОбъект[Реквизит.Имя] = СсылкаЗамены;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьПараметрыЗаписиОбъекта(ЗаписываемыйОбъект)
	
	ЗаписываемыйОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
	
КонецПроцедуры

// Методы обработки данных форм.

// Заполняет в форме дерево результата объединения 
// 
// Параметры:
//  РезультатОбъединения - ДанныеФормыДерево
//  ДеревоСравнения - ДанныеФормыДерево
//  НайденныеДубли - ДанныеФормыКоллекция
Процедура ЗаполнитьРезультатОбъединенияИУдалитьСтрокиИзДереваСравнения(РезультатОбъединения, ДеревоСравнения,
	НайденныеДубли) Экспорт
	
	УдаляемыеСтроки = Новый Массив;
	
	ЗаполнитьРезультатПоКоллекции(РезультатОбъединения, ДеревоСравнения.ПолучитьЭлементы(), 0, УдаляемыеСтроки,
		НайденныеДубли);
	УдалитьСтрокиИзДереваСравнения(ДеревоСравнения, УдаляемыеСтроки);
	ПочиститьРезультат(РезультатОбъединения);
	
КонецПроцедуры

Процедура УдалитьСтрокиИзДереваСравнения(ДеревоСравнения, УдаляемыеСтроки)
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		УдаляемаяСтрока.ПолучитьЭлементы().Очистить();
	КонецЦикла;
	
	Для каждого Строка0Уровня Из ДеревоСравнения.ПолучитьЭлементы() Цикл
		Если Строка0Уровня.ПолучитьЭлементы().Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(Строка0Уровня);
		КонецЕсли; 
	КонецЦикла;
	
	УдалитьСтрокиДерева(ДеревоСравнения, УдаляемыеСтроки);
	
КонецПроцедуры

Процедура ПочиститьРезультат(Результат)
	
	КоллекцияПолейРезультат = Результат.ПолучитьЭлементы();
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для каждого ЭлементКоллекции Из КоллекцияПолейРезультат Цикл
		Если ЭлементКоллекции.Поле = "Ссылка" Тогда
			Для каждого СтрокаКоллекцииСсылка Из ЭлементКоллекции.ПолучитьЭлементы() Цикл
				Если СтрокаКоллекцииСсылка.ПолучитьЭлементы().Количество() > 0 Тогда
					Продолжить;
				КонецЕсли; 
				Если Не ЗначениеЗаполнено(СтрокаКоллекцииСсылка.Значение) Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаКоллекцииСсылка);
				КонецЕсли; 
			КонецЦикла;
		Иначе
			Если ЭлементКоллекции.ПолучитьЭлементы().Количество() = 0 Тогда
				МассивУдаляемыхСтрок.Добавить(ЭлементКоллекции);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		Родитель = УдаляемаяСтрока.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			КоллекцияСтрокРодителя = Результат.ПолучитьЭлементы();
		Иначе
			КоллекцияСтрокРодителя = Родитель.ПолучитьЭлементы();
		КонецЕсли; 
		КоллекцияСтрокРодителя.Удалить(КоллекцияСтрокРодителя.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиДерева(Дерево, УдаляемыеСтроки)
	
	МассивСтрокРодителей = Новый Массив;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Родитель = УдаляемаяСтрока.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			КоллекцияСтрокРодителя = Дерево.ПолучитьЭлементы();
		Иначе
			КоллекцияСтрокРодителя = Родитель.ПолучитьЭлементы();
			Если МассивСтрокРодителей.Найти(Родитель) = Неопределено Тогда
				МассивСтрокРодителей.Добавить(Родитель);
			КонецЕсли; 
		КонецЕсли; 
		Если УдаляемаяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
			КоллекцияСтрокРодителя.Удалить(КоллекцияСтрокРодителя.Индекс(УдаляемаяСтрока));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокРодителей.Количество() > 0 Тогда
		УдалитьСтрокиДерева(Дерево, МассивСтрокРодителей);
	КонецЕсли; 
	
КонецПроцедуры

// Параметры:
//  Родитель - ДанныеФормыДерево, ДанныеФормыЭлементДерева -
//  Коллекция - ДанныеФормыКоллекцияЭлементовДерева
//  Уровень - Число - уровень элементов в дереве.
//  УдаляемыеСтроки - Массив из ДанныеФормыЭлементДерева
//  НайденныеДубли - ДанныеФормыКоллекция
Процедура ЗаполнитьРезультатПоКоллекции(Родитель, Коллекция, Уровень, УдаляемыеСтроки, НайденныеДубли)
	
	Если Уровень > 2 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		
		СтрокаОбрабатывается = Ложь;
		
		Если Уровень = 1 Тогда
			Если ЭлементКоллекции.ПолучитьРодителя().Поле = "Ссылка" Тогда
				Если ЭлементКоллекции.ПолучитьЭлементы().Количество() = 0 Тогда
					СтрокаОбрабатывается = Истина;
				КонецЕсли;
			Иначе
				СтрокаОбрабатывается = Истина;
			КонецЕсли;
		ИначеЕсли Уровень = 2 И ЭлементКоллекции.ПолучитьРодителя().ПолучитьРодителя().Поле = "Ссылка" Тогда
			СтрокаОбрабатывается = Истина;
		ИначеЕсли Уровень = 0 И ЭлементКоллекции.Поле = "Ссылка" Тогда
			СтрокаОбрабатывается = Истина;
		КонецЕсли;
		
		Если Уровень < 2 Или СтрокаОбрабатывается Тогда
			НоваяСтрокаРезультата = Родитель.ПолучитьЭлементы().Добавить();
			НоваяСтрокаРезультата.Поле = ЭлементКоллекции.Поле;
			НоваяСтрокаРезультата.ТипПоля = ЭлементКоллекции.ТипПоля;
			Если ЭлементКоллекции.Поле = "Ссылка" Тогда
				НоваяСтрокаРезультата.Представление = ПредставлениеОбъектаПоТипу(ТипЗнч(ЭлементКоллекции["Поле0"]));
			Иначе
				НоваяСтрокаРезультата.Представление = Формат(ЭлементКоллекции.Представление, "ДЛФ=Д");
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаОбрабатывается Тогда
			ПервоеЗаполненное = Неопределено;
			НайденныеЗначения = Новый Массив;
			Для ИндексДубля = 0 По НайденныеДубли.Количество() - 1 Цикл
				ЗначениеПоля = ЭлементКоллекции["Поле" + ЧислоВСтроку(ИндексДубля)];
				Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
					Продолжить;
				КонецЕсли; 
				Если ЭлементКоллекции["ПолеПометка" + ЧислоВСтроку(ИндексДубля)] Тогда
					ПервоеЗаполненное = ИндексДубля;
				КонецЕсли; 
				Если ПервоеЗаполненное = Неопределено Тогда
					ПервоеЗаполненное = ИндексДубля;
					ЭлементКоллекции["ДоступенДляВыбора" + ЧислоВСтроку(ПервоеЗаполненное)] = Истина;
				Иначе
					ЭлементКоллекции["ДоступенДляВыбора" + ЧислоВСтроку(ИндексДубля)] = Истина;
				КонецЕсли;
				Если НайденныеЗначения.Найти(ЗначениеПоля) = Неопределено Тогда
					НайденныеЗначения.Добавить(ЗначениеПоля);
				КонецЕсли; 
			КонецЦикла;
			Если ПервоеЗаполненное <> Неопределено Тогда
				ЗаполнитьСтрокуРезультата(НоваяСтрокаРезультата, ЭлементКоллекции, ПервоеЗаполненное);
				ЭлементКоллекции["ПолеПометка" + ЧислоВСтроку(ПервоеЗаполненное)] = Истина;
				ЭлементКоллекции["ДоступенДляВыбора" + ЧислоВСтроку(ПервоеЗаполненное)] =
					НайденныеЗначения.Количество() > 1;
			КонецЕсли;
			Если НайденныеЗначения.Количество() < 2 Тогда
				УдаляемыеСтроки.Добавить(ЭлементКоллекции);
			КонецЕсли;
		КонецЕсли; 
		
		ЗаполнитьРезультатПоКоллекции(НоваяСтрокаРезультата, ЭлементКоллекции.ПолучитьЭлементы(), Уровень + 1,
			УдаляемыеСтроки, НайденныеДубли);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРезультата(СтрокаРезультата, СтрокаКоллекции, ИндексДубля) Экспорт
	
	ИмяПоля = "Поле" + ЧислоВСтроку(ИндексДубля);
	
	Если СтрокаРезультата.Поле = "Ссылка" Тогда
		СтрокаРезультата.Значение = "";
	Иначе
		СтрокаРезультата.Значение = СтрокаКоллекции[ИмяПоля];
	КонецЕсли; 
		
	Если СтрокаРезультата.ПолучитьРодителя() <> Неопределено Тогда
		
		Для каждого ПодстрокаСтрокиКоллекции Из СтрокаКоллекции.ПолучитьЭлементы() Цикл
			
			ПодстрокаСтрокиРезультата = Неопределено;
			Для каждого СтрокаКоллекцииСтрокаРезультата Из СтрокаРезультата.ПолучитьЭлементы() Цикл
				Если СтрокаКоллекцииСтрокаРезультата.Поле = ПодстрокаСтрокиКоллекции.Поле Тогда
					ПодстрокаСтрокиРезультата = СтрокаКоллекцииСтрокаРезультата;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПодстрокаСтрокиРезультата = Неопределено Тогда
				ПодстрокаСтрокиРезультата = СтрокаРезультата.ПолучитьЭлементы().Добавить();
				ПодстрокаСтрокиРезультата.Поле = ПодстрокаСтрокиКоллекции.Поле;
				ПодстрокаСтрокиРезультата.Представление = ПодстрокаСтрокиКоллекции.Представление;
			КонецЕсли; 
			
			ПодстрокаСтрокиРезультата.Значение = ПодстрокаСтрокиКоллекции[ИмяПоля];
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяКоллекции - Строка
// 
// Возвращаемое значение:
//  Строка
Функция АдресКоллекцииВХранилище(Форма, ИмяКоллекции) Экспорт
	
	РеквизитыКоллекции = Форма.ПолучитьРеквизиты(ИмяКоллекции);
	
	КлючиСтруктуры = "Строки";
	Для каждого РеквизитКоллекции Из РеквизитыКоллекции Цикл
		КлючиСтруктуры = КлючиСтруктуры + "," + РеквизитКоллекции.Имя;
	КонецЦикла;
	
	СохраняемаяКоллекция = КоллекцияВМассиве(Форма[ИмяКоллекции].ПолучитьЭлементы(), КлючиСтруктуры);
	
	Возврат ПоместитьВоВременноеХранилище(СохраняемаяКоллекция, Форма.УникальныйИдентификатор);
	
КонецФункции

// Параметры:
//  Коллекция - ДанныеФормыКоллекцияЭлементовДерева
//  КлючиСтруктуры - Строка
// 
// Возвращаемое значение:
//  Массив из Структура
Функция КоллекцияВМассиве(Коллекция, КлючиСтруктуры)
	
	ВозвращаемаяКоллекция = Новый Массив;
	
	Для каждого СтрокаКоллекции Из Коллекция Цикл
		СтруктураСтроки = Новый Структура(КлючиСтруктуры);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаКоллекции);
		СтруктураСтроки.Строки = КоллекцияВМассиве(СтрокаКоллекции.ПолучитьЭлементы(), КлючиСтруктуры);
		ВозвращаемаяКоллекция.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат ВозвращаемаяКоллекция;
	
КонецФункции

Процедура ДобавитьСтрокиВРезультатОбъединения(Родитель, КоллекцияСтрокРезультата)
	
	Для каждого СтрокаРезультата Из КоллекцияСтрокРезультата Цикл
		НоваяСтрока = Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
		ДобавитьСтрокиВРезультатОбъединения(НоваяСтрока, СтрокаРезультата.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты данными для объединения и записывает оставляемый дубль.
// 
// Параметры:
//  ОставляемыйДубль - ОпределяемыйТип.СубъектПерсональныхДанных
//  ДанныеДляОбъединения - см. ОбъединитьДубли.ДанныеДляОбъединения
Процедура ОбновитьОставляемыйДубль(ОставляемыйДубль, ДанныеДляОбъединения)
	
	ДубльОбъект = ОставляемыйДубль.ПолучитьОбъект();
	ДубльОбъект.Заблокировать();
	
	Если ДубльОбъект.ПометкаУдаления Тогда
		УстановитьПараметрыЗаписиОбъекта(ДубльОбъект);
		ДубльОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	ОбъектИзменен = Ложь;
	СтрокаДанных = ДанныеДляОбъединения.Строки.Найти("Ссылка", "Поле", Ложь);
	Если СтрокаДанных <> Неопределено Тогда
		КоллекцияПолей = СтрокаДанных.Строки;
		Для каждого ДанныеДубля Из КоллекцияПолей Цикл
			КоллекцияСтрокТабличнойЧасти = ДанныеДубля.Строки;
			Если КоллекцияСтрокТабличнойЧасти.Количество() = 0 Тогда
				Если ДубльОбъект[ДанныеДубля.Поле] = ДанныеДубля.Значение Тогда
					Продолжить;
				КонецЕсли;
				ДубльОбъект[ДанныеДубля.Поле] = ДанныеДубля.Значение;
				ОбъектИзменен = Истина;
			Иначе
				ТабличнаяЧастьДубля = ДубльОбъект[ДанныеДубля.Поле];
				ТабличнаяЧастьДубля.Очистить();
				ОбъектИзменен = Истина;
				Для каждого ЗаписьТабличнойЧасти Из КоллекцияСтрокТабличнойЧасти Цикл
					НоваяСтрокаТабличнойЧасти = ТабличнаяЧастьДубля.Добавить();
					Для каждого ЗначениеДанныхСтроки Из ЗаписьТабличнойЧасти.Строки Цикл
						НоваяСтрокаТабличнойЧасти[ЗначениеДанныхСтроки.Поле] = ЗначениеДанныхСтроки.Значение;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		МодульМенеджера = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипЗнч(ОставляемыйДубль));
		МодульМенеджера.ПередЗаписьюОставляемогоДубля(ДубльОбъект);
		УстановитьПараметрыЗаписиОбъекта(ДубльОбъект);
		ДубльОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Определяет и возвращает оставляемый дубль по количеству ссылок в базе данных.
// 
// Параметры:
//  Дубли - Массив из ОпределяемыйТип.СубъектПерсональныхДанных
// 
// Возвращаемое значение:
//  ОпределяемыйТип.СубъектПерсональныхДанных
Функция ОставляемыйДубль(Дубли)
	
	ТаблицаСсылок = НайтиПоСсылкам(Дубли);
	
	Если ТаблицаСсылок.Количество() > 0 Тогда
		
		ТаблицаСИтогами = ТаблицаСсылок.Скопировать();
		ТаблицаСИтогами.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
	
		Для каждого СтрокаТаблицыСИтогами Из ТаблицаСИтогами Цикл
			ПолноеИмяОбъектаМетаданных = СтрокаТаблицыСИтогами.Метаданные.ПолноеИмя();
			ПозицияТочки = СтрНайти(ПолноеИмяОбъектаМетаданных, ".");
			ВидОбъекта = Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1);
			Коэффициент = 1;
			Если ВидОбъекта = "Документ" Тогда
				ДокументОбъект = СтрокаТаблицыСИтогами.Данные.ПолучитьОбъект();
				Для каждого ОбъектДвижений Из ДокументОбъект.Движения Цикл
					Коэффициент = Коэффициент + ОбъектДвижений.Количество();
				КонецЦикла;
			КонецЕсли;
			СтрокаТаблицыСИтогами.Счетчик = Коэффициент;
		КонецЦикла;
		
		ТаблицаСИтогами.Свернуть("Ссылка", "Счетчик");
		ТаблицаСИтогами.Сортировать("Счетчик УБЫВ");
		ОставляемыйДубль = ТаблицаСИтогами[0].Ссылка;
		
	Иначе
		ОставляемыйДубль = Дубли[0];
	КонецЕсли;
	
	Возврат ОставляемыйДубль;
	
КонецФункции

Процедура ЗаменитьОставшиесяСсылки(Дубли, ОставляемыйДубль, ИсключаемыеМетаданные)
	
	ТаблицаСсылок = НайтиПоСсылкам(Дубли);
	
	Для каждого СтрокаТаблицыСсылок Из ТаблицаСсылок Цикл
		Если ИсключаемыеМетаданные.Найти(СтрокаТаблицыСсылок.Метаданные.ПолноеИмя()) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаменитьСсылкиВСтрокеСОбъектом(СтрокаТаблицыСсылок, ОставляемыйДубль);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПометитьДублиНаУдаление(Дубли)
	
	Для каждого УдаляемыйДубль Из Дубли Цикл
		УдаляемыйДубльОбъект = УдаляемыйДубль.ПолучитьОбъект();
		УдаляемыйДубльОбъект.Заблокировать();
		УдаляемыйДубльОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ЧислоВСтроку(Число)
	
	Возврат Формат(Число, "ЧН=; ЧГ=;");
	
КонецФункции

// Возвращаемое значение:
//  Структура - Типы полей:
// * ТабличнаяЧасть - Строка
// * Справочник - Строка
// * РегистрСведений - Строка 
Функция ТипыПолей() Экспорт
	
	ТипыПолей = Новый Структура;
	
	ТипыПолей.Вставить("ТабличнаяЧасть", "ТабличнаяЧасть");
	ТипыПолей.Вставить("Справочник", "Справочник");
	ТипыПолей.Вставить("РегистрСведений", "РегистрСведений");
	
	Возврат ТипыПолей;
	
КонецФункции

// Параметры:
//  Тип - Тип
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеОбъектаПоТипу(Тип)
	
	Возврат Метаданные.НайтиПоТипу(Тип).ПредставлениеОбъекта;
	
КонецФункции

#КонецОбласти

#КонецЕсли