#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДубли();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Дубли.ПолучитьЭлементы().Количество() = 0 Тогда
		Отказ = Истина;
	Иначе
		РазвернутьДерево();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДубли

&НаКлиенте
Процедура ДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДублиПриАктивизацииСтроки(Элемент)
	
	Значение = Дубли.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).Значение;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаВыбрать", "Доступность",
		ЗначениеЗаполнено(Значение));
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыполнитьВыбор();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ЗаполнитьДубли();
	РазвернутьДерево();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Дубли.Имя);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор, "Дубли.Значение", ,
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаШапкиТаблицы);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДубли()
	
	Дубли.ПолучитьЭлементы().Очистить();
	
	ДеревоДублей = Обработки.ОбъединениеДублейПерсональныхДанных.ДеревоДублей(
		Параметры.ОписаниеТипаВладельцаЛичныхДанных.Типы()[0]);
	ЗаполнитьСтрокиДереваДублей(Дубли.ПолучитьЭлементы(), ДеревоДублей);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДереваДублей(КоллекцияСтрокДанныхФормы, СтрокаДанных)
	
	Для каждого СтрокаСтрокиДанных Из СтрокаДанных.Строки Цикл
		
		НоваяСтрокаКоллекции = КоллекцияСтрокДанныхФормы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКоллекции, СтрокаСтрокиДанных);
		Если Не ЗначениеЗаполнено(СтрокаСтрокиДанных.Значение) Тогда
			НоваяСтрокаКоллекции.Представление = СтрокаСтрокиДанных.ОбластьПоиска;
			НоваяСтрокаКоллекции.Картинка = БиблиотекаКартинок.ТипГруппа;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаСтрокиДанных.Дубль) Тогда
			НоваяСтрокаКоллекции.Представление = СтрокаСтрокиДанных.Значение;
			КоличествоДублей = СтрокаСтрокиДанных.Строки.Количество();
			НоваяСтрокаКоллекции.КоличествоДублейПоЗначению = СтрШаблон(НСтр("ru = '%1 шт.';
																			|en = '%1 pcs.'"), КоличествоДублей);
		Иначе
			НоваяСтрокаКоллекции.Представление = СтрокаСтрокиДанных.Дубль;
		КонецЕсли;
		
		ЗаполнитьСтрокиДереваДублей(НоваяСтрокаКоллекции.ПолучитьЭлементы(), СтрокаСтрокиДанных)
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(КоллекцияСтрок = Неопределено)
	
	Если КоллекцияСтрок = Неопределено Тогда
		КоллекцияСтрок = Дубли.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого СтрокаДерева Из КоллекцияСтрок Цикл
		Если Не ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
			Элементы.Дубли.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Ложь);
			РазвернутьДерево(СтрокаДерева.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыбор()
	
	ТекущиеДанные = Элементы.Дубли.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	
	ВыбранныеДанные = Новый Массив;
	Для каждого ДанныеВыбора Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		ВыбранныеДанные.Добавить(ДанныеВыбора.Дубль);
	КонецЦикла;
	
	ОповеститьОВыборе(ВыбранныеДанные);
	
КонецПроцедуры

#КонецОбласти
