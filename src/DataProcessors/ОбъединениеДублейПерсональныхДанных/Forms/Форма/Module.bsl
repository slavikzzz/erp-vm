#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьОписаниеТипаВладельца(Параметры);
	СоздатьКолонкиТаблицыНайденныеДубли();
	
	Если ЗначениеЗаполнено(Параметры.Дубли) Тогда
		ДобавитьНайденныеДубли(Параметры.Дубли.ВыгрузитьЗначения());
		СкрытьКомандыПоиска();
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	УстановитьСвойстваЭлементовФормы(Параметры);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник <> ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗавершенаНастройкаОбъединенияДублей" Тогда
		ЗаполнитьДеревоСравненияИзХранилища(Параметр.ДеревоСравнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипВладельцаЛичныхДанныхПриИзменении(Элемент)
	
	НайденныеДубли.Очистить();
	УстановитьЗаголовокФормы();
	СоздатьКолонкиТаблицыНайденныеДубли();
	УстановитьДоступностьКоманд(Элементы, НайденныеДубли.Количество() > 1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеДубли

&НаКлиенте
Процедура НайденныеДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДубль();
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеДублиПослеУдаления(Элемент)
	
	НайденныеДублиПослеУдаленияНаСервере();
	
КонецПроцедуры

// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбранныеЗначения - Массив из ОпределяемыйТип.СубъектПерсональныхДанных
//  СтандартнаяОбработка - Булево
&НаКлиенте
Процедура НайденныеДублиОбработкаВыбора(Элемент, ВыбранныеЗначения, СтандартнаяОбработка)
	
	ДобавитьНайденныеДубли(ВыбранныеЗначения);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбъединитьИОчистить(Команда)
	
	ТекстВопроса = НСтр("ru = 'Операция объединения дублей является необратимой.
		|Рекомендуется предварительно создать резервную копию базы данных.
		|Выполнить объединение?';
		|en = 'Merging duplicates is unrecoverable.
		|It is recommended that you back up the database in advance.
		|Merge?'");
		
	Оповещение = Новый ОписаниеОповещения("ОбъединитьИОчиститьЗавершение", ЭтотОбъект);	
	ПоказатьВопрос(Оповещение, СтрЗаменить(ТекстВопроса, Символы.ПС, " "), РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиДубли(Команда)
	
	Если НайденныеДубли.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Список дублей будет очищен.
			|Продолжить?';
			|en = 'Duplicate list will be cleared.
			|Continue?'");
		Оповещение = Новый ОписаниеОповещения("НайтиЗадвоенныеДанныеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		НайтиЗадвоенныеДанныеЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОбъединение(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	
	Адрес = АдресДереваСравненияВХранилище();
	ПараметрыОткрытия.Вставить("АдресДереваСравнения", Адрес);
	ПараметрыОткрытия.Вставить("НайденныеДубли", НайденныеДубли);
	
	ОткрытьФорму("Обработка.ОбъединениеДублейПерсональныхДанных.Форма.ФормаНастройкиОбъединения", ПараметрыОткрытия,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДубли(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	
	ИмяФормыВыбора = СтрШаблон("Справочник.%1.ФормаВыбора", ИмяСправочникаПоТипу(ТипВладельцаЛичныхДанных()));
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, Элементы.НайденныеДубли);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ОткрытьДубль();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОписаниеТипаВладельца(Параметры)
	
	ОписаниеТипаВладельцаЛичныхДанных = Параметры.ОписаниеТипаВладельцаЛичныхДанных;
	
	Если Не ЗначениеЗаполнено(ОписаниеТипаВладельцаЛичныхДанных) Тогда
		ТипыВладельцевЛичныхДанных =  Метаданные.ОпределяемыеТипы.СубъектПерсональныхДанных.Тип.Типы();
		Если ЗначениеЗаполнено(ТипыВладельцевЛичныхДанных) Тогда
			ОписаниеТипаВладельцаЛичныхДанных = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ТипыВладельцевЛичныхДанных[0]));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваОписанияТипаВладельца(НеПоказыватьТипВладельцаЛичныхДанных)
	
	Если Элементы.Найти("ОписаниеТипаВладельцаЛичныхДанных") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НеПоказыватьТипВладельцаЛичныхДанных Тогда
		Элементы.ОписаниеТипаВладельцаЛичныхДанных.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	ТипыВладельцевЛичныхДанных =  Метаданные.ОпределяемыеТипы.СубъектПерсональныхДанных.Тип.Типы();
	
	Для Каждого Тип Из ТипыВладельцевЛичныхДанных Цикл
		Элементы.ОписаниеТипаВладельцаЛичныхДанных.СписокВыбора.Добавить(
			Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип)));
	КонецЦикла;
	
	Элементы.ОписаниеТипаВладельцаЛичныхДанных.Видимость = ТипыВладельцевЛичныхДанных.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	МетаданныеВладельца = Метаданные.НайтиПоТипу(ОписаниеТипаВладельцаЛичныхДанных.Типы()[0]);
	СинонимВРодительномПадеже = НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(
		МетаданныеВладельца.Синоним, 2));
	Заголовок = СтрШаблон(НСтр("ru = 'Объединение дублей %1';
								|en = 'Merge the %1 duplicates'"), СинонимВРодительномПадеже);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКолонкиТаблицыНайденныеДубли()
	
	ИмяТаблицыДублей = "НайденныеДубли";
	
	СуществующиеКолонки = ПолучитьРеквизиты(ИмяТаблицыДублей);
	
	УдаляемыеКолонки = Новый Массив; // Массив из Строка
	УдаляемыеКолонкиЭлементы = Новый Массив; // Массив из Строка
	
	Для каждого Колонка Из СуществующиеКолонки Цикл
		УдаляемыеКолонки.Добавить(ИмяТаблицыДублей + "." + Колонка.Имя);
		УдаляемыеКолонкиЭлементы.Добавить(ИмяТаблицыДублей + Колонка.Имя);
	КонецЦикла;
	
	ДобавляемыеКолонки = Новый Массив; // Массив из РеквизитФормы
	КолонкиВыводимыеНаФорму = Новый Массив; // Массив из РеквизитФормы
	
	ОписанияКолонок = Новый Массив; // Массив из Структура
	
	ОписаниеКолонки = Обработки.ОбъединениеДублейПерсональныхДанных.ОписаниеКолонки("Дубль",
		Метаданные.ОпределяемыеТипы.СубъектПерсональныхДанных.Тип, НСтр("ru = 'ФИО';
																		|en = 'Full name'"));
	ОписанияКолонок.Добавить(ОписаниеКолонки);
	
	ОписаниеКолонки = Обработки.ОбъединениеДублейПерсональныхДанных.ОписаниеКолонки("ФИО",
		Новый ОписаниеТипов("Строка"), , Ложь);
	ОписанияКолонок.Добавить(ОписаниеКолонки);
	
	Обработки.ОбъединениеДублейПерсональныхДанных.ДополнитьКолонкиТаблицыПоискаДублей(ОписанияКолонок,
		ТипВладельцаЛичныхДанных());
	
	Для Каждого ОписаниеКолонки Из ОписанияКолонок Цикл
		НоваяКолонка = Новый РеквизитФормы(ОписаниеКолонки.Имя, ОписаниеКолонки.ОписаниеТипа, ИмяТаблицыДублей,
			ОписаниеКолонки.Заголовок);
		ДобавляемыеКолонки.Добавить(НоваяКолонка);
		Если ОписаниеКолонки.ПоказыватьВФорме Тогда
			КолонкиВыводимыеНаФорму.Добавить(НоваяКолонка);
		КонецЕсли;
	КонецЦикла;
		
	ИзменитьРеквизиты(ДобавляемыеКолонки, УдаляемыеКолонки);
	
	Для каждого ИмяЭлемента Из УдаляемыеКолонкиЭлементы Цикл
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из КолонкиВыводимыеНаФорму Цикл
		НовыйЭлемент = Элементы.Добавить(ИмяТаблицыДублей + Колонка.Имя, Тип("ПолеФормы"), Элементы[ИмяТаблицыДублей]);
		НовыйЭлемент.ПутьКДанным = Колонка.Путь + "." + Колонка.Имя;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы(Параметры)
	
	УстановитьСвойстваОписанияТипаВладельца(Параметры.НеПоказыватьТипВладельцаЛичныхДанных);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредупреждениеГруппа", "Видимость",
		ПолучитьФункциональнуюОпциюФормы("ОграничиватьДоступНаУровнеЗаписей")
		И Не Пользователи.ЭтоПолноправныйПользователь());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если НайденныеДубли.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СовпадающиеПоля = СовпадающиеПоля(НайденныеДубли);
	Для Каждого СовпадающиеПоляДубля Из СовпадающиеПоля Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор, "НайденныеДубли.Дубль",
			СовпадающиеПоляДубля.Дубль);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
		Для Каждого ИмяКолонки Из СовпадающиеПоляДубля.ИменаКолонок Цикл
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НайденныеДубли.Имя + ИмяКолонки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоманд(Элементы, Значение)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НастроитьОбъединение", "Доступность",
		Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбъединитьИОчистить", "Доступность",
		Значение);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьКомандыПоиска()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НайтиДубли", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодобратьДубли", "Видимость", Ложь);
	
КонецПроцедуры

// Параметры:
//  НайденныеДубли - ДанныеФормыКоллекция
// 
// Возвращаемое значение:
//  Массив из Структура:
//   * Дубль - ОпределяемыйТип.СубъектПерсональныхДанных
//   * ИменаКолонок - Массив из Строка
&НаСервереБезКонтекста
Функция СовпадающиеПоля(Знач НайденныеДубли)
	
	СовпадающиеПоля = Новый Массив; // Массив из Структура
	
	ТаблицаДублей = НайденныеДубли.Выгрузить();
	
	Для Каждого ОбрабатываемаяСтрока Из ТаблицаДублей Цикл
		Дубль = ОбрабатываемаяСтрока.Дубль; // ОпределяемыйТип.СубъектПерсональныхДанных
		ИменаКолонок = Новый Массив; // Массив из Строка
		Для Каждого ТекущаяСтрока Из ТаблицаДублей Цикл
			Если ТекущаяСтрока = ОбрабатываемаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ТекущаяКолонка Из ТаблицаДублей.Колонки Цикл
				Если ОбрабатываемаяСтрока[ТекущаяКолонка.Имя] = ТекущаяСтрока[ТекущаяКолонка.Имя]
					И ИменаКолонок.Найти(ТекущаяКолонка.Имя) = Неопределено Тогда
					ИменаКолонок.Добавить(ТекущаяКолонка.Имя);
					Если ТекущаяКолонка.Имя = "ФИО" Тогда
						ИменаКолонок.Добавить("Дубль");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если ЗначениеЗаполнено(ИменаКолонок) Тогда
			СовпадающиеПоля.Добавить(Новый Структура("Дубль,ИменаКолонок", Дубль, ИменаКолонок));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СовпадающиеПоля;
	
КонецФункции

&НаСервере
Процедура НайденныеДублиПослеУдаленияНаСервере()
	
	ЗаполнитьДеревоСравнения();
	УстановитьДоступностьКоманд(Элементы, НайденныеДубли.Количество() > 1);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСравнения()
	
	ДеревоСравнения.ПолучитьЭлементы().Очистить();
	РезультатОбъединения.ПолучитьЭлементы().Очистить();
	
	Если НайденныеДубли.Количество() < 2 Тогда
		Возврат;
	КонецЕсли; 
	
	Дубли = НайденныеДубли.Выгрузить().ВыгрузитьКолонку("Дубль");
	Обработки.ОбъединениеДублейПерсональныхДанных.ЗаполнитьДеревоСравнения(ЭтотОбъект, Дубли, ТипВладельцаЛичныхДанных());
	
КонецПроцедуры

// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеПараметры - Произвольный
&НаКлиенте
Процедура ОбъединитьИОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = ОбъединитьДубли();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет объединение дублей.';
											|en = 'Merging the duplicates.'");
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Объединение дублей.';
															|en = 'Merge duplicates.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатОбъединения", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОбъединения(Результат, ДополнительныеПарметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстПредупреждения = НСтр("ru = 'Во время объединения дублей возникли ошибки.
			|Необходимо устранить ошибки и повторить операцию объединения.
			|Подробная информация в журнале регистрации.';
			|en = 'Errors occurred when merging the duplicates.
			|Resolve the errors and try again.
			|For more information, see the event log.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ОчиститьДанныеОбработки();
		
		ОставляемыйДубль = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(ОставляемыйДубль);

		ПоказыватьВопрос = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы",
			"ПоказыватьВопросОПоказеРезультатаОбъединенияДублей", Истина);

		ТекстОбъединениеВыполнено = НСтр("ru = 'Объединение выполнено успешно';
										|en = 'Merged successfully'");
		Если Не ПоказыватьВопрос Тогда
			ПоказатьОповещениеПользователя(, , ТекстОбъединениеВыполнено, БиблиотекаКартинок.Информация32);
			ПоказатьЗначение(, ЗначениеПоказываемоеПослеОбъединенияДублей(ОставляемыйДубль));
			Возврат;
		КонецЕсли;
		
		КнопкиОтвета = Новый СписокЗначений();
		КнопкиОтвета.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да';
															|en = 'Yes'"));
		КнопкиОтвета.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет';
															|en = 'No'"));
		
		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.Заголовок = ТекстОбъединениеВыполнено;
		ПараметрыВопроса.ТекстФлажка = НСтр("ru = 'Больше не спрашивать';
											|en = 'Do not ask again'");
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.Информация32;
		
		Оповещение = Новый ОписаниеОповещения("ЗавершитьОбработкуРезультатаОбъединения", ЭтотОбъект,
			ОставляемыйДубль);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
			Оповещение, НСтр("ru = 'Показать результат объединения?';
							|en = 'Show the merge result?'"), КнопкиОтвета, ПараметрыВопроса);
	КонецЕсли;

	УстановитьДоступностьКоманд(Элементы, НайденныеДубли.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуРезультатаОбъединения(Ответ, ОставляемыйДубль) Экспорт
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Ответ.БольшеНеЗадаватьЭтотВопрос Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы",
			"ПоказыватьВопросОПоказеРезультатаОбъединенияДублей", Ложь);
	КонецЕсли;
	
	Если Ответ.Значение = КодВозвратаДиалога.Да Тогда
		ПоказатьЗначение(, ЗначениеПоказываемоеПослеОбъединенияДублей(ОставляемыйДубль));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение, показываемое после объединения дублей.
// 
// Параметры:
//  ОставляемыйДубль - ОпределяемыйТип.СубъектПерсональныхДанных
//
// Возвращаемое значение:
//  СправочникСсылка
&НаСервереБезКонтекста
Функция ЗначениеПоказываемоеПослеОбъединенияДублей(ОставляемыйДубль)
	
	МодульМенеджера = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипЗнч(ОставляемыйДубль));
	Возврат МодульМенеджера.ЗначениеПоказываемоеПослеОбъединенияДублей(ОставляемыйДубль);
	
КонецФункции

// Возвращаемое значение:
//  см. ДлительныеОперации.ВыполнитьПроцедуру
&НаСервере
Функция ОбъединитьДубли()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ДанныеДляОбъединения = ДанныеДляОбъединения();
	Дубли = НайденныеДубли.Выгрузить().ВыгрузитьКолонку("Дубль");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВладелецОставляемыхФИО", ВладелецОставляемыхФИО());
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Обработки.ОбъединениеДублейПерсональныхДанных.ОбъединитьДубли", Дубли, ДанныеДляОбъединения,
		ДополнительныеПараметры);
	
КонецФункции

// Возвращаемое значение:
//  ДеревоЗначений - Данные для объединения:
// * Поле - Строка
// * Значение - Произвольный
&НаСервере
Функция ДанныеДляОбъединения()
	
	Обработки.ОбъединениеДублейПерсональныхДанных.ЗаполнитьРезультатОбъединенияИУдалитьСтрокиИзДереваСравнения(
		РезультатОбъединения, ДеревоСравнения, НайденныеДубли);
	
	ДанныеДляОбъединения = Новый ДеревоЗначений;
	ДанныеДляОбъединения.Колонки.Добавить("Поле");
	ДанныеДляОбъединения.Колонки.Добавить("Значение");
	ДобавитьСтрокиВРезультатОбъединения(ДанныеДляОбъединения, РезультатОбъединения.ПолучитьЭлементы());
	
	Возврат ДанныеДляОбъединения;
		
КонецФункции

// Возвращаемое значение:
//  ОпределяемыйТип.СубъектПерсональныхДанных, Неопределено -
&НаСервере
Функция ВладелецОставляемыхФИО()
	
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	
	СтрокаСсылка = МодульОбработки.НайтиДобавитьПоле(ДеревоСравнения.ПолучитьЭлементы(), "Ссылка", , Ложь);
	Если СтрокаСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаСФИО = МодульОбработки.НайтиДобавитьПоле(СтрокаСсылка.ПолучитьЭлементы(), "ФИО", , Ложь);
	Если СтрокаСФИО = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИндексОтмеченного = Неопределено;
	Для ИндексФизическогоЛица = 0 По НайденныеДубли.Количество() - 1 Цикл
		Если СтрокаСФИО["ПолеПометка" + ИндексФизическогоЛица] Тогда
			ИндексОтмеченного = ИндексФизическогоЛица;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексОтмеченного = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВладелецФИО = НайденныеДубли.Получить(ИндексОтмеченного)["Дубль"]; // ОпределяемыйТип.СубъектПерсональныхДанных
	
	Возврат ВладелецФИО;
	
КонецФункции

// см. Обработки.ОбъединениеДублейПерсональныхДанных.АдресКоллекцииВХранилище
&НаСервере
Функция АдресДереваСравненияВХранилище()
	
	Возврат Обработки.ОбъединениеДублейПерсональныхДанных.АдресКоллекцииВХранилище(ЭтотОбъект, "ДеревоСравнения");
	
КонецФункции

// Параметры:
//  АдресДереваСравненияВХранилище - Строка
&НаСервере
Процедура ЗаполнитьДеревоСравненияИзХранилища(АдресДереваСравненияВХранилище)
	
	КоллекцияДеревоСравнения = ПолучитьИзВременногоХранилища(АдресДереваСравненияВХранилище);
	
	ДеревоСравнения.ПолучитьЭлементы().Очистить();
	
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	МодульОбработки.ЗаполнитьКолонкиДеревьевСравнения(ЭтотОбъект, НайденныеДубли.Количество());
	МодульОбработки.ЗаполнитьКоллекцию(ДеревоСравнения.ПолучитьЭлементы(), КоллекцияДеревоСравнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеОбработки()
	
	ДеревоСравнения.ПолучитьЭлементы().Очистить();
	НайденныеДубли.Очистить();
	РезультатОбъединения.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

// Параметры:
//  ВыбранныеЗначения - Массив из ОпределяемыйТип.СубъектПерсональныхДанных
&НаСервере
Процедура ДобавитьНайденныеДубли(ВыбранныеЗначения)
	
	Дубли = Новый Массив; // Массив из ОпределяемыйТип.СубъектПерсональныхДанных
	ТипВладельца = ТипВладельцаЛичныхДанных();
	
	Для каждого ВыбранноеЗначение Из ВыбранныеЗначения Цикл
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Тип дубля %1 не совпадает с типом владельца личных данных %2, установленным в форме';
				|en = 'The %1 duplicate type does not match the personal %2 data owner type set in the form'"),
			ТипЗнч(ВыбранноеЗначение), ТипВладельца);
		ОбщегоНазначенияКлиентСервер.Проверить(ТипЗнч(ВыбранноеЗначение) = ТипВладельца, ТекстСообщения,
			"ДобавитьНайденныеДубли");
			
		СтруктураПоиска = Новый Структура("Дубль", ВыбранноеЗначение);
		Если НайденныеДубли.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			Дубли.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Дубли.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДублей = Обработки.ОбъединениеДублейПерсональныхДанных.ДанныеДублей(Дубли, ТипВладельцаЛичныхДанных());
	Для каждого ДобавляемыеДанные Из ДанныеДублей Цикл
		НоваяСтрокаНайденныеДубли = НайденныеДубли.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНайденныеДубли, ДобавляемыеДанные);
	КонецЦикла;
	ЗаполнитьДеревоСравнения();
	
	УстановитьДоступностьКоманд(Элементы, НайденныеДубли.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЗадвоенныеДанныеЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеДубли.Очистить();
	УстановитьДоступностьКоманд(Элементы, Ложь);
	
	Форма = ОткрытьФорму("Обработка.ОбъединениеДублейПерсональныхДанных.Форма.ФормаПоискаДублей",
		Новый Структура("ОписаниеТипаВладельцаЛичныхДанных", ОписаниеТипаВладельцаЛичныхДанных), Элементы.НайденныеДубли);
		
	Если Форма.Окно = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Дубли не обнаружены.';
										|en = 'Duplicates are not found.'"));
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Тип - Тип
// 
// Возвращаемое значение:
//  Строка
&НаСервереБезКонтекста
Функция ИмяСправочникаПоТипу(Тип)
	
	Возврат Метаданные.НайтиПоТипу(Тип).Имя;
	
КонецФункции

// Возвращаемое значение:
//  Тип
&НаСервере
Функция ТипВладельцаЛичныхДанных()
	
	Возврат ОписаниеТипаВладельцаЛичныхДанных.Типы()[0];
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДубль()
	
	ТекущиеДанные = Элементы.НайденныеДубли.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Дубль);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиВРезультатОбъединения(Родитель, КоллекцияСтрокРезультата)
	
	Для каждого СтрокаРезультата Из КоллекцияСтрокРезультата Цикл
		НоваяСтрока = Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
		ДобавитьСтрокиВРезультатОбъединения(НоваяСтрока, СтрокаРезультата.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
