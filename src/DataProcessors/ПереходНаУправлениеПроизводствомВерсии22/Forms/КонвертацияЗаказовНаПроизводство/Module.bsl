//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	Если АвтоОбновление Тогда
		
		ОбновитьДанныеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КартинкаСвернутьИнформационнуюПанельНажатие(Элемент)
	
	Элементы.ГруппаИнформационнаяПанель.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформационнойНадписиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ГиперссылкаСоздатьЦеховыеКладовые() Тогда
		
		ОткрытьФорму("Обработка.ПереходНаУправлениеПроизводствомВерсии22.Форма.СозданиеЦеховыхКладовых");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗаказов

&НаКлиенте
Процедура ДеревоЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Найти(Поле.Имя, "Отметка") = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = ДеревоЗаказов.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаказовОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Отметка = ТекущиеДанные.Отметка % 2;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель <> Неопределено Тогда
		
		Родитель.Отметка = ТекущиеДанные.Отметка;
		
		Для Каждого Элемент Из Родитель.ПолучитьЭлементы() Цикл
			
			Если Элемент.Отметка <> Родитель.Отметка И Элемент.ДоступнаКонвертация Тогда
				Родитель.Отметка = 2;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			
			Строка.Отметка = Число(ТекущиеДанные.Отметка И Строка.ДоступнаКонвертация);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьКонвертацию(Команда)
	
	Если ПроверитьВозможностьКонвертации() Тогда
		
		ЗапуститьФоновоеЗадание("ВыполнитьКонвертациюЗаказов");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтроки(Команда)
	
	УстановитьОтметку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСтрок(Команда)
	
	УстановитьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("СписокЗаказов", ВыбранныеЗаказы);
	
	ОткрытьФорму("Отчет.СостояниеВыполненияЗаказовНаПроизводство.Форма",
				ПараметрыФормы, 
				ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	ВыделенныеСтроки = ВыбранныеЗаказы();
	Если ВыделенныеСтроки.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке заказов будет установлен статус ""Закрыт"". Продолжить?';
						|en = 'Status of the orders selected in the list will be set to Closed. Continue?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусЗакрытЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрытЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Закрыт");
	
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
				Неопределено, 
				КоличествоОбработанных, 
				ВыделенныеСтроки.Количество(), 
				НСтр("ru = 'Закрыт';
					|en = 'Closed'"));
	
	Если КоличествоОбработанных > 0 Тогда
		
		ОбновитьДанныеНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьюИТС(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьСтатью5ШаговКПроизводству22();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Оформление заказа
	#Область ОформлениеЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	#КонецОбласти
	
	// Формат числовых полей
	#Область ФорматЧисловыхПолей
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовКоличествоВыпущено.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовКоличествоОсталось.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=3; ЧН=");
	#КонецОбласти
	
	// Оформление недоступных строк
	#Область ОформлениеНедоступныхСтрок
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ДоступнаКонвертация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗаказовОтметка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.ДоступнаКонвертация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ФоновоеЗадание = Новый Структура("
		|ИмяЗадания,
		|ИдентификаторЗадания,
		|АдресХранилища");
		
	ЦветСтиля_ВыделеннаяКнопкаФон = ЦветаСтиля.ВыделеннаяКнопкаФон;
	
	УстановитьРежимОбновленияДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеНаКлиенте()
	
	Если ВыполнятьЗаполнениеВФоне Тогда
		
		ЗапуститьФоновоеЗадание("ЗаполнитьДеревоЗаказов");
		
	Иначе
		
		ОбновитьДанныеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(Знач ДанныеЗаполнения = Неопределено)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		
		ДанныеЗаполнения = ПостроитьДеревоЗаказов();
		
	КонецЕсли;
	
	ЗаполнитьДеревоЗаказов(ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимОбновленияДанных()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Этапы КАК Т
		|ГДЕ
		|	Т.Ссылка.Статус В(&СтатусыЗаказов)
		|	И Т.Ссылка.Проведен
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Ссылка) > 100 И
		|	КОЛИЧЕСТВО(Т.Ссылка) > 100000");
	
	Запрос.УстановитьПараметр("СтатусыЗаказов", ДоступныеСтатусыЗаказов());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	АвтоОбновление = РезультатЗапроса.Пустой();
	
	Если Не АвтоОбновление Тогда
		
		Элементы.Обновить.ЦветФона = ЦветСтиля_ВыделеннаяКнопкаФон;
		ВыполнятьЗаполнениеВФоне   = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформационнуюПанель(Результат)
	
	Если Результат.Свойство("ОтсутствуютКладовые") И Результат.ОтсутствуютКладовые Тогда
	
		СоздатьЦеховыеКладовые = Новый ФорматированнаяСтрока(
					НСтр("ru = 'создать цеховые кладовые';
						|en = 'create shop storerooms'"),,,, 
					ГиперссылкаСоздатьЦеховыеКладовые());
		
		МассивСтрок = Новый Массив;
		
		МассивСтрок.Добавить(НСтр("ru = 'Перед конвертацией необходимо';
									|en = 'Before conversion it is necessary to'"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(СоздатьЦеховыеКладовые);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(НСтр("ru = 'для всех производственных подразделений, используемых в выбранных заказах на производство';
									|en = 'for all production business units used in the selected production orders  '"));
		
		ТекстИнформационнойНадписи = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Элементы.ГруппаИнформационнаяПанель.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеОтбора(Форма)
	
	Результат = Новый Структура;
	
	Если Не Форма.Статус.Пустая() Тогда
		Результат.Вставить("Статус", Форма.Статус);
	КонецЕсли;
	Если Не Форма.Приоритет.Пустая() Тогда
		Результат.Вставить("Приоритет", Форма.Приоритет);
	КонецЕсли;
	Если Не Форма.Подразделение.Пустая() Тогда
		Результат.Вставить("Подразделение", Форма.Подразделение);
	КонецЕсли;
	Если Не Форма.Продукция.Пустая() Тогда
		Результат.Вставить("Номенклатура", Форма.Продукция);
	КонецЕсли;
	Если Не Форма.Спецификация.Пустая() Тогда
		Результат.Вставить("Спецификация", Форма.Спецификация);
	КонецЕсли;
	Если Не Форма.Ответственный.Пустая() Тогда
		Результат.Вставить("Ответственный", Форма.Ответственный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборВДереве(Элемент)
	
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоЗаказов

&НаСервере
Функция ПостроитьДеревоЗаказов()
	
	Отбор = ЗначениеОтбора(ЭтаФорма);
	
	Возврат Обработки.ПереходНаУправлениеПроизводствомВерсии22.ПостроитьДеревоЗаказов(Отбор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоЗаказов(ДанныеЗаполнения)
	
	КлючСтроки = КлючТекущейСтрокиДереваЗаказов();
	
	ЗначениеВРеквизитФормы(ДанныеЗаполнения, "ДеревоЗаказов");
	
	ВосстановитьТекущуюСтроку(КлючСтроки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметку(ЗначениеОтметки)
	
	УстановитьОтметкуВКоллекцииНаСервере(ЗначениеОтметки, ДеревоЗаказов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуВКоллекцииНаСервере(ЗначениеОтметки, КоллекцияЭлементов)
	
	Для Каждого Строка Из КоллекцияЭлементов Цикл
		
		Строка.Отметка = Число(ЗначениеОтметки И Строка.ДоступнаКонвертация);
		
		УстановитьОтметкуВКоллекцииНаСервере(ЗначениеОтметки, Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеЗаказы()
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Идентификатор Из Элементы.ДеревоЗаказов.ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоЗаказов.НайтиПоИдентификатору(Идентификатор);
		Если МассивСсылок.Найти(ТекущиеДанные.Ссылка) = Неопределено Тогда
			МассивСсылок.Добавить(ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта!';
										|en = 'Cannot execute this command for the specified object.'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьКонвертации()
	
	Результат = Ложь;
	
	Для Каждого СтрокаЗаказ Из ДеревоЗаказов.ПолучитьЭлементы() Цикл
		Если СтрокаЗаказ.Отметка > 0 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Результат Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для конвертации!';
										|en = 'No data for conversion.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОтмеченныеСтроки()
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство");
	Результат.Колонки.Добавить("Ссылка", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("КодСтроки", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("КлючСвязи", ОписаниеТипов);
	
	Для Каждого СтрокаЗаказ Из ДеревоЗаказов.ПолучитьЭлементы() Цикл
		Если СтрокаЗаказ.Отметка > 0 Тогда
			Для Каждого СтрокаПродукция Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
				Если СтрокаПродукция.Отметка > 0 Тогда
					ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаПродукция);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КлючТекущейСтрокиДереваЗаказов()
	
	КлючСтроки = Новый Структура("Ссылка,КодСтроки");
	
	ТекущаяСтрока = Элементы.ДеревоЗаказов.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ДеревоЗаказов.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(КлючСтроки, ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючСтроки;
	
КонецФункции

&НаСервере
Функция НайтиСтрокуПоКлючу(КлючСтроки, КоллекцияДанных)
	
	Для Каждого ДанныеСтроки Из КоллекцияДанных Цикл
		Если ДанныеСтроки.Ссылка = КлючСтроки.Ссылка
			И ДанныеСтроки.КодСтроки = КлючСтроки.КодСтроки Тогда
			Возврат ДанныеСтроки.ПолучитьИдентификатор();
		Иначе
			Идентификатор = НайтиСтрокуПоКлючу(КлючСтроки, ДанныеСтроки.ПолучитьЭлементы());
			Если Идентификатор <> Неопределено Тогда
				Возврат Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ВосстановитьТекущуюСтроку(КлючСтроки)
	
	Элементы.ДеревоЗаказов.ТекущаяСтрока = НайтиСтрокуПоКлючу(
		КлючСтроки, ДеревоЗаказов.ПолучитьЭлементы());
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания)
	
	ЗаданиеВыполнено = ЗапуститьФоновоеЗаданиеНаСервере(ИмяЗадания);
	
	Если ЗаданиеВыполнено Тогда
		ОбработатьЗавершениеЗаданияНаКлиенте();
	Иначе
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(Знач ИмяЗадания)
	
	Если ИмяЗадания = "ЗаполнитьДеревоЗаказов" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеЗаполнитьДеревоЗаказов();
		
	ИначеЕсли ИмяЗадания = "ВыполнитьКонвертациюЗаказов" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеВыполнитьКонвертациюЗаказов();
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Неизвестное задание ""%1""';
								|en = 'Unknown job ""%1""'"),
							ИмяЗадания);
	КонецЕсли;
	
	ФоновоеЗадание.ИмяЗадания           = ИмяЗадания;
	ФоновоеЗадание.ИдентификаторЗадания = РезультатЗапускаЗадания.ИдентификаторЗадания;
	ФоновоеЗадание.АдресХранилища       = РезультатЗапускаЗадания.АдресХранилища;
	
	Возврат РезультатЗапускаЗадания.ЗаданиеВыполнено;

КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданияНаКлиенте()

	Если ФоновоеЗадание.ИмяЗадания = "ЗаполнитьДеревоЗаказов" Тогда
		
		ЗавершениеЗаданияЗаполнитьДеревоЗаказов(ФоновоеЗадание.АдресХранилища);
		
	ИначеЕсли ФоновоеЗадание.ИмяЗадания = "ВыполнитьКонвертациюЗаказов" Тогда 
		
		ЗавершениеЗаданияВыполнитьКонвертациюЗаказов(ФоновоеЗадание.АдресХранилища);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(
		ЭтаФорма, ФоновоеЗадание.ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() Тогда
			
			Если ЗаданиеВыполнено(ФоновоеЗадание.ИдентификаторЗадания) Тогда
				ОбработатьЗавершениеЗаданияНаКлиенте();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область ВыполнениеЗаданий

&НаСервере
Функция ЗапуститьЗаданиеЗаполнитьДеревоЗаказов()
	
	ПараметрыЗадания = Новый Структура("Отбор", ЗначениеОтбора(ЭтаФорма));
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение дерева незавершенных заказов на производство';
								|en = 'Fill in the tree of unfinished production orders'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Обработки.ПереходНаУправлениеПроизводствомВерсии22.ЗаполнитьДеревоЗаказов",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
	
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеВыполнитьКонвертациюЗаказов()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Отбор",            ЗначениеОтбора(ЭтаФорма));
	ПараметрыЗадания.Вставить("ОтмеченныеСтроки", ОтмеченныеСтроки());
	
	НаименованиеЗадания = НСтр("ru = 'Конвертация незавершенных заказов на производство';
								|en = 'Conversion of unfinished production orders'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Обработки.ПереходНаУправлениеПроизводствомВерсии22.ВыполнитьКонвертациюЗаказов",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеЗаданияЗаполнитьДеревоЗаказов(АдресХранилища)
	
	ЗавершениеЗаданияНаСервере(АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗаданияВыполнитьКонвертациюЗаказов(АдресХранилища)
	
	СтруктураОповещения = ЗавершениеЗаданияНаСервере(АдресХранилища);
	
	ОповеститьПользователяОРезультатеКонвертации(СтруктураОповещения);
	
КонецПроцедуры

&НаСервере
Функция ЗавершениеЗаданияНаСервере(АдресХранилища)
	
	СтруктураОповещения = Новый Структура("Сообщения,ОбработаноЭтапов");
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураОповещения, Результат);
		
		Если Результат.ЕстьОшибки Тогда
			
			ПоказатьИнформационнуюПанель(Результат);
			
		Иначе
			
			ОбновитьДанныеНаСервере(Результат.ДеревоЗаказов);
			
		КонецЕсли;
		
	Иначе
		
		ОбновитьДанныеНаСервере(Результат);
		
	КонецЕсли;
	
	Возврат СтруктураОповещения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаСервере
Функция ДоступныеСтатусыЗаказов()
	
	Результат = Новый Массив;
	
	Если Статус.Пустая() Тогда
		
		Результат.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.Создан);
		Результат.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
		
	Иначе
		
		Результат.Добавить(Статус);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГиперссылкаСоздатьЦеховыеКладовые()
	
	Возврат "#СоздатьЦеховыеКладовые";
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователяОРезультатеКонвертации(СтруктураОповещения)
	
	ОбработаноЭтапов = 0;
	
	Если СтруктураОповещения.Свойство("ОбработаноЭтапов", ОбработаноЭтапов) И ОбработаноЭтапов > 0 Тогда
	
		ТекстСконвертировано = ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'Сконвертирован';
					|en = 'Converted'"), НСтр("ru = 'Сконвертированно';
													|en = 'Converted'"), НСтр("ru = 'Сконвертированно';
																					|en = 'Converted'"), ОбработаноЭтапов);
		ТекстЭтапы = ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'этап';
					|en = 'stage'"), НСтр("ru = 'этапа';
											|en = 'stage'"), НСтр("ru = 'этапов';
																|en = 'steps'"), ОбработаноЭтапов);
		
		ТекстСообщения = НСтр("ru = '%Сконвертированно% %КоличествоОбработанных% %этапов%';
								|en = '%Сконвертированно% %КоличествоОбработанных% %этапов%'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сконвертированно%", ТекстСконвертировано);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", ОбработаноЭтапов);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%этапов%", ТекстЭтапы);

		ТекстЗаголовка = НСтр("ru = 'Конвертация заказов завершена';
								|en = 'Orders are converted'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не сконвертирован ни один этап';
								|en = 'No stage is converted'");
		ТекстЗаголовка = НСтр("ru = 'Конвертация заказов завершена';
								|en = 'Orders are converted'");
		
	КонецЕсли;
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
	Если СтруктураОповещения.Свойство("Сообщения") И ЗначениеЗаполнено(СтруктураОповещения.Сообщения) Тогда
		
		ИдентификаторНазначения = УникальныйИдентификатор;
		Для каждого Сообщение Из СтруктураОповещения.Сообщения Цикл
			Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
			Сообщение.Сообщить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21