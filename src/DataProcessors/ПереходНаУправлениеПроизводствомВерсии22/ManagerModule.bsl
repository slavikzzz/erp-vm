//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область КонвертацияЗаказовНаПроизводство

#Область ЗаполнениеДереваЗаказов

Функция ЗаполнитьДеревоЗаказов(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ДеревоЗаказов = ПостроитьДеревоЗаказов(ПараметрыЗадания.Отбор);
	
	ПоместитьВоВременноеХранилище(ДеревоЗаказов, АдресХранилища);
	
КонецФункции

Функция ПостроитьДеревоЗаказов(Отбор) Экспорт
	
	Перем СтрокаЗаказ, ИтогиПоЗаказу, ИтогиПоПродукции;
	
	ДеревоЗаказов = Новый ДеревоЗначений;
	
	// Инициализация
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство");
	ДеревоЗаказов.Колонки.Добавить("Ссылка", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ДеревоЗаказов.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ДеревоЗаказов.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ДеревоЗаказов.Колонки.Добавить("КодСтроки", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	ДеревоЗаказов.Колонки.Добавить("КлючСвязи", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ДеревоЗаказов.Колонки.Добавить("КоличествоЗапланировано", ОписаниеТипов);
	ДеревоЗаказов.Колонки.Добавить("КоличествоВыпущено", ОписаниеТипов);
	ДеревоЗаказов.Колонки.Добавить("КоличествоОсталось", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДеревоЗаказов.Колонки.Добавить("ТипСтроки", ОписаниеТипов);
	ДеревоЗаказов.Колонки.Добавить("Отметка", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Строка");
	ДеревоЗаказов.Колонки.Добавить("Представление", ОписаниеТипов);
	ДеревоЗаказов.Колонки.Добавить("Комментарий", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ДеревоЗаказов.Колонки.Добавить("ДоступнаКонвертация", ОписаниеТипов);
	
	// Заполнение
	
	Выборка = ВыбратьПродукциюЗаказов(Отбор);
	
	ОписаниеПроизводственногоПроцесса = ОписаниеПроизводственногоПроцесса(Выборка);
	
	Пока Выборка.Следующий() Цикл
		
		Если ПроверитьЗаполнитьИтогиПоЗаказу(СтрокаЗаказ, ИтогиПоЗаказу, Выборка) Тогда
			
			СтрокаЗаказ = ДеревоЗаказов.Строки.Добавить();
			СтрокаЗаказ.ТипСтроки = 0;
			СтрокаЗаказ.Ссылка    = Выборка.Ссылка;
			
		КонецЕсли;
		
		СтрокаПродукция = СтрокаЗаказ.Строки.Добавить();
		СтрокаПродукция.ТипСтроки     = 1;
		СтрокаПродукция.Представление = ПредставлениеПродукции(Выборка);
		
		ЗаполнитьЗначенияСвойств(СтрокаПродукция, Выборка);
		
		СтрокаПродукция.ДоступнаКонвертация = ДоступнаКонвертация(
												Выборка,
												ОписаниеПроизводственногоПроцесса,
												ИтогиПоПродукции);
		
		СтрокаПродукция.Комментарий = КомментарийКСтрокеПродукции(ИтогиПоПродукции);
		
		ДополнитьИтогиПоЗаказу(ИтогиПоЗаказу, ИтогиПоПродукции);
		
	КонецЦикла;
	
	ПроверитьЗаполнитьИтогиПоЗаказу(СтрокаЗаказ, ИтогиПоЗаказу);

	Возврат ДеревоЗаказов;
	
КонецФункции

Функция ВыбратьПродукциюЗаказов(Отбор)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТКлючиПродукции.Ссылка КАК Ссылка,
		|	ТКлючиПродукции.КодСтроки КАК КодСтроки,
		|	ТКлючиПродукции.КлючСвязи КАК КлючСвязи,
		|	ТКлючиПродукции.Номенклатура КАК Номенклатура,
		|	ТКлючиПродукции.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТКлючиПродукции
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТКлючиПродукции
		|		ПО ЗаказНаПроизводство.Ссылка = ТКлючиПродукции.Ссылка
		|ГДЕ
		|	ЗаказНаПроизводство.Статус В(&ДоступныеСтатусы)
		|	И (&ОтборПриоритет
		|				И ЗаказНаПроизводство.Приоритет = &Приоритет
		|			ИЛИ НЕ &ОтборПриоритет)
		|	И (&ОтборПодразделение
		|				И ЗаказНаПроизводство.Подразделение = &Подразделение
		|			ИЛИ НЕ &ОтборПодразделение)
		|	И (&ОтборОтветственный
		|				И ЗаказНаПроизводство.Ответственный = &Ответственный
		|			ИЛИ НЕ &ОтборОтветственный)
		|	И (&ОтборНоменклатура
		|				И ТКлючиПродукции.Номенклатура = &Номенклатура
		|			ИЛИ НЕ &ОтборНоменклатура)
		|	И (&ОтборСпецификация
		|				И ТКлючиПродукции.Спецификация = &Спецификация
		|			ИЛИ НЕ &ОтборСпецификация)
		|	И ТКлючиПродукции.КлючСвязиПродукция = &ПустойКлюч
		|	И ЗаказНаПроизводство.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	КодСтроки,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.Распоряжение КАК Распоряжение,
		|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЭтапыПроизводства.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
		|				ТОГДА ЭтапыПроизводства.ОкончаниеЗавершающегоБуфера
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОбратнаяСвязь
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючиПродукции КАК ТКлючиПродукции
		|		ПО ЭтапыПроизводства.Распоряжение = ТКлючиПродукции.Ссылка
		|			И ЭтапыПроизводства.КодСтрокиПродукция = ТКлючиПродукции.КодСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыПроизводства.Распоряжение,
		|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЭтапыПроизводства.ЗапланированоПроизводством) = 0 И
		|	СУММА(ЭтапыПроизводства.КВыполнению) = 0 И
		|	СУММА(ЭтапыПроизводства.Выполнено) + СУММА(ЭтапыПроизводства.Брак) > СУММА(ЭтапыПроизводства.ЗапланированоЗаказом)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	КодСтрокиЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТКлючиПродукции.Ссылка КАК Ссылка,
		|	ТКлючиПродукции.КодСтроки КАК КодСтроки,
		|	МАКСИМУМ(ЕСТЬNULL(ОбратнаяСвязь.ДатаОкончания, ГрафикПроизводства.ОкончаниеЗавершающегоБуфера)) КАК ДатаВыпуска
		|ПОМЕСТИТЬ ВТГрафикВыпуска
		|ИЗ
		|	ВТКлючиПродукции КАК ТКлючиПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ГрафикПроизводства
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОбратнаяСвязь КАК ОбратнаяСвязь
		|			ПО ГрафикПроизводства.Ссылка = ОбратнаяСвязь.Распоряжение
		|				И ГрафикПроизводства.КодСтроки = ОбратнаяСвязь.КодСтрокиЭтапыГрафик
		|		ПО ТКлючиПродукции.Ссылка = ГрафикПроизводства.Ссылка
		|			И ТКлючиПродукции.КлючСвязи = ГрафикПроизводства.КлючСвязиПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТКлючиПродукции.Ссылка,
		|	ТКлючиПродукции.КодСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВыпуска.Ссылка КАК Ссылка,
		|	ДанныеВыпуска.КодСтроки КАК КодСтроки,
		|	СУММА(ДанныеВыпуска.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТДанныеВыпуска
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТКлючиПродукции.Ссылка КАК Ссылка,
		|		ТКлючиПродукции.КодСтроки КАК КодСтроки,
		|		МаршрутныйЛистПроизводстваВыходныеИзделия.КоличествоФакт КАК Количество
		|	ИЗ
		|		ВТКлючиПродукции КАК ТКлючиПродукции
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК МаршрутныйЛистПроизводстваВыходныеИзделия
		|				ПО МаршрутныйЛистПроизводства.Ссылка = МаршрутныйЛистПроизводстваВыходныеИзделия.Ссылка
		|			ПО ТКлючиПродукции.Ссылка = МаршрутныйЛистПроизводства.Распоряжение
		|				И ТКлючиПродукции.КодСтроки = МаршрутныйЛистПроизводства.КодСтроки
		|	ГДЕ
		|		ТКлючиПродукции.Номенклатура = МаршрутныйЛистПроизводстваВыходныеИзделия.Номенклатура
		|		И ТКлючиПродукции.Характеристика = МаршрутныйЛистПроизводстваВыходныеИзделия.Характеристика
		//++ Устарело_Переработка24
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказПереработчикуУслуги.Распоряжение,
		|		ЗаказПереработчикуУслуги.КодСтрокиПродукция,
		|		ЗаказПереработчикуПродукция.Количество
		|	ИЗ
		|		ВТКлючиПродукции КАК ТКлючиПродукции
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ДокЗаказПереработчику
		|				ПО ЗаказПереработчикуУслуги.Ссылка = ДокЗаказПереработчику.Ссылка
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ЗаказПереработчикуПродукция
		|				ПО ЗаказПереработчикуУслуги.Ссылка = ЗаказПереработчикуПродукция.Ссылка
		|					И ЗаказПереработчикуУслуги.НомерГруппыЗатрат = ЗаказПереработчикуПродукция.НомерГруппыЗатрат
		|			ПО ТКлючиПродукции.Ссылка = ЗаказПереработчикуУслуги.Распоряжение
		|	ГДЕ
		|		ТКлючиПродукции.Номенклатура = ЗаказПереработчикуПродукция.Номенклатура
		|		И ТКлючиПродукции.Характеристика = ЗаказПереработчикуПродукция.Характеристика
		|		И ДокЗаказПереработчику.Проведен
		|		И ДокЗаказПереработчику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)) КАК ДанныеВыпуска
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВыпуска.Ссылка,
		|	ДанныеВыпуска.КодСтроки
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеВыпуска.Количество) > 0
		//-- Устарело_Переработка24
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДанныеВыпуска.Ссылка,
		|	ДанныеВыпуска.КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПродукция.Ссылка КАК Ссылка,
		|	ТПродукция.Ссылка.Номер КАК НомерЗаказа,
		|	ТПродукция.Ссылка.Дата КАК ДатаЗаказа,
		|	ТПродукция.ДатаПотребности КАК ДатаПотребности,
		|	ТПродукция.НомерСтроки КАК НомерСтроки,
		|	ТПродукция.КодСтроки КАК КодСтроки,
		|	ТПродукция.КлючСвязи КАК КлючСвязи,
		|	ТПродукция.Номенклатура КАК Номенклатура,
		|	ТПродукция.Характеристика КАК Характеристика,
		|	ТПродукция.Номенклатура.Наименование КАК НоменклатураПредставление,
		|	ТПродукция.Характеристика.Наименование КАК ХарактеристикаПредставление,
		|	ВЫБОР
		//++ Устарело_Переработка24
		|		КОГДА ТПродукция.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
		|			ТОГДА ИСТИНА
		//-- Устарело_Переработка24
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоЗаказуДавальца,
		|	ТПродукция.ГрафикРассчитан КАК ГрафикРассчитан,
		|	ВЫБОР
		|		КОГДА ТПродукция.КоличествоУпаковок - ЕСТЬNULL(ТДанныеВыпуска.Количество, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) > 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СтрокаВыполнена,
		|	ВЫБОР
		|		КОГДА ТПродукция.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТПродукция.Упаковка.Представление
		|		ИНАЧЕ ТПродукция.Номенклатура.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ТПродукция.КоличествоУпаковок КАК КоличествоЗапланировано,
		|	ЕСТЬNULL(ТДанныеВыпуска.Количество, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоВыпущено,
		|	ТПродукция.КоличествоУпаковок - ЕСТЬNULL(ТДанныеВыпуска.Количество, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоОсталось,
		|	ЕСТЬNULL(ТГрафикВыпуска.ДатаВыпуска, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыпуска
		|ИЗ
		|	ВТКлючиПродукции КАК ТКлючиПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикВыпуска КАК ТГрафикВыпуска
		|		ПО ТКлючиПродукции.Ссылка = ТГрафикВыпуска.Ссылка
		|			И ТКлючиПродукции.КодСтроки = ТГрафикВыпуска.КодСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВыпуска КАК ТДанныеВыпуска
		|		ПО ТКлючиПродукции.Ссылка = ТДанныеВыпуска.Ссылка
		|			И ТКлючиПродукции.КодСтроки = ТДанныеВыпуска.КодСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
		|		ПО ТКлючиПродукции.Ссылка = ТПродукция.Ссылка
		|			И ТКлючиПродукции.КлючСвязи = ТПродукция.КлючСвязи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗаказа,
		|	Ссылка,
		|	НомерСтроки");
	
	Статус        = Неопределено;
	Приоритет     = Неопределено;
	Подразделение = Неопределено;
	Ответственный = Неопределено;
	Номенклатура  = Неопределено;
	Спецификация  = Неопределено;
	
	ДоступныеСтатусы = Новый Массив;
	
	Если Отбор.Свойство("Статус",Статус) Тогда
		ДоступныеСтатусы.Добавить(Статус);
	Иначе
		ДоступныеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.Создан);
		ДоступныеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДоступныеСтатусы", ДоступныеСтатусы);
	
	Запрос.УстановитьПараметр("ОтборПриоритет", Отбор.Свойство("Приоритет",Приоритет));
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	
	Запрос.УстановитьПараметр("ОтборПодразделение", Отбор.Свойство("Подразделение",Подразделение));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.УстановитьПараметр("ОтборОтветственный", Отбор.Свойство("Ответственный",Ответственный));
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Запрос.УстановитьПараметр("ОтборНоменклатура", Отбор.Свойство("Номенклатура",Номенклатура));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.УстановитьПараметр("ОтборСпецификация", Отбор.Свойство("Спецификация",Спецификация));
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Запрос.УстановитьПараметр("ПустойКлюч", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТПродукция.Упаковка",
		"ТПродукция.Номенклатура"));
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДоступнаКонвертация(ТекущиеДанные, ОписаниеПроизводственногоПроцесса, ИтогиПоПродукции)
	
	ЭтаповДоступно = 0;
	ЭтаповВсего    = 0;
	
	Если НЕ ТекущиеДанные.СтрокаВыполнена И НЕ ТекущиеДанные.ПоЗаказуДавальца Тогда
		
		Для каждого КлючСвязи Из КлючиСвязиПродукцииИПолуфабрикатов(
											ТекущиеДанные.Ссылка,
											ТекущиеДанные.КлючСвязи,
											ОписаниеПроизводственногоПроцесса) Цикл
			
			ОтборРезультатРасчета = Новый Структура("Ссылка,КлючСвязиПродукция");
			ОтборРезультатРасчета.Ссылка             = ТекущиеДанные.Ссылка;
			ОтборРезультатРасчета.КлючСвязиПродукция = КлючСвязи;
			
			РезультатРасчета = ОписаниеПроизводственногоПроцесса.ТаблицаЭтапов.НайтиСтроки(ОтборРезультатРасчета).Количество();
			ЭтаповВсего = ЭтаповВсего + РезультатРасчета;
			
			ОтборРезультатРасчета.Вставить("КонвертацияДоступна", Истина);
			
			РезультатРасчета = ОписаниеПроизводственногоПроцесса.ТаблицаЭтапов.НайтиСтроки(ОтборРезультатРасчета).Количество();
			ЭтаповДоступно = ЭтаповДоступно + РезультатРасчета;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ИтогиПоПродукции = Новый Структура(
		"ПоЗаказуДавальца,
		|СтрокаВыполнена,
		|ГрафикРассчитан,
		|
		|ДоступнаКонвертация,
		|ЭтаповДоступно,
		|ЭтаповВсего");
	
	ЗаполнитьЗначенияСвойств(ИтогиПоПродукции, ТекущиеДанные);
	
	ИтогиПоПродукции.ЭтаповДоступно = ЭтаповДоступно;
	ИтогиПоПродукции.ЭтаповВсего    = ЭтаповВсего;
	ИтогиПоПродукции.ДоступнаКонвертация = (ЭтаповДоступно > 0);
	
	Возврат (ЭтаповДоступно > 0);
	
КонецФункции

Функция ПроверитьЗаполнитьИтогиПоЗаказу(СтрокаЗаказ, Итоги, Выборка = Неопределено)
	
	// Инициализация итогов
	Если Итоги = Неопределено Тогда
		
		Если Выборка <> Неопределено Тогда
			
			Итоги = Новый Структура(
				"Ссылка,
				|НомерЗаказа,
				|ДатаЗаказа,
				|ДоступнаКонвертация,
				|ПоЗаказуДавальца,
				|Выполнен,
				|КоличествоВсего,
				|КоличествоДоступно");
				
			ЗаполнитьЗначенияСвойств(Итоги, Выборка);
			
			Итоги.Выполнен            = Истина;
			Итоги.ДоступнаКонвертация = Ложь;
			Итоги.ПоЗаказуДавальца    = Ложь;
			
			Итоги.КоличествоВсего    = 0;
			Итоги.КоличествоДоступно = 0;
			
			Возврат Истина;
			
		КонецЕсли;
		
	// Заполнение итогов в строке
	ИначеЕсли Выборка = Неопределено ИЛИ Выборка.Ссылка <> Итоги.Ссылка Тогда
		
		СтрокаЗаказ.Представление = ПредставлениеЗаказа(Итоги);
		СтрокаЗаказ.ДоступнаКонвертация = Итоги.ДоступнаКонвертация;
		
		Если (Итоги.Выполнен ИЛИ Итоги.ПоЗаказуДавальца)
			И НЕ Итоги.ДоступнаКонвертация Тогда
			
			СтрокаЗаказ.Строки.Очистить();
			
		КонецЕсли;
		
		Если Выборка <> Неопределено Тогда
			
			Итоги = Новый Структура(
				"Ссылка,
				|НомерЗаказа,
				|ДатаЗаказа,
				|ДоступнаКонвертация,
				|ПоЗаказуДавальца,
				|Выполнен,
				|КоличествоВсего,
				|КоличествоДоступно");
				
			ЗаполнитьЗначенияСвойств(Итоги, Выборка);
			
			Итоги.Выполнен            = Истина;
			Итоги.ДоступнаКонвертация = Ложь;
			Итоги.ПоЗаказуДавальца    = Ложь;
			
			Итоги.КоличествоВсего    = 0;
			Итоги.КоличествоДоступно = 0;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДополнитьИтогиПоЗаказу(ИтогиПоЗаказу, ИтогиПоПродукции)
	
	ИтогиПоЗаказу.ДоступнаКонвертация = ИтогиПоПродукции.ДоступнаКонвертация ИЛИ ИтогиПоЗаказу.ДоступнаКонвертация;
	
	ИтогиПоЗаказу.Выполнен =  ИтогиПоПродукции.СтрокаВыполнена И ИтогиПоЗаказу.Выполнен;
	ИтогиПоЗаказу.ПоЗаказуДавальца = ИтогиПоПродукции.ПоЗаказуДавальца И ИтогиПоЗаказу.ПоЗаказуДавальца;
	
	ИтогиПоЗаказу.КоличествоДоступно = ИтогиПоЗаказу.КоличествоДоступно + ?(ИтогиПоПродукции.ДоступнаКонвертация,1,0);
	ИтогиПоЗаказу.КоличествоВсего = ИтогиПоЗаказу.КоличествоВсего + 1;
	
КонецФункции

Функция ПредставлениеЗаказа(ТекущиеДанные)
	
	ТекстСостояние = "";
	
	Если ТекущиеДанные.Выполнен Тогда
		
		ТекстСостояние = НСтр("ru = 'Выполнен, можно закрыть';
								|en = 'Executed, you can close'");
		
	ИначеЕсли ТекущиеДанные.ПоЗаказуДавальца Тогда
		
		ТекстСостояние = НСтр("ru = 'Конвертация заказов на производство из давальческого сырья недоступна';
								|en = 'Conversion of orders for toll manufacturing is not available'");
		
	ИначеЕсли ТекущиеДанные.КоличествоДоступно > 0 Тогда
		
		ТекстСостояние = СтрШаблон(
							НСтр("ru = '%1 %2 %3 (всего %4)';
								|en = '%1 %2 %3 (%4 total)'"),
							ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
								НСтр("ru = 'Доступна';
									|en = 'Available'"),
								НСтр("ru = 'Доступно';
									|en = 'Available'"),
								НСтр("ru = 'Доступны';
									|en = 'Available'"),
								ТекущиеДанные.КоличествоВсего),
							ТекущиеДанные.КоличествоДоступно,
							ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
								НСтр("ru = 'строка';
									|en = 'string'"),
								НСтр("ru = 'строки';
									|en = 'lines'"),
								НСтр("ru = 'строк';
									|en = 'lines'"),
								ТекущиеДанные.КоличествоВсего),
							ТекущиеДанные.КоличествоВсего);
		
	Иначе
		
		ТекстСостояние = СтрШаблон(
							НСтр("ru = 'Доступно 0 строк (всего %1)';
								|en = '0 lines available (total %1)'"), 
							ТекущиеДанные.КоличествоВсего);
		
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'Заказ № %1 от %2. %3.';
							|en = 'Order No. %1, %2. %3.'"), 
				ТекущиеДанные.НомерЗаказа, Формат(ТекущиеДанные.ДатаЗаказа, "ДЛФ=D"), ТекстСостояние);

КонецФункции

Функция ПредставлениеПродукции(ТекущиеДанные)
	
	Возврат СтрШаблон(
				НСтр("ru = '%1,  %2 %3  к  %4';
					|en = '%1,  %2 %3  to  %4'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					ТекущиеДанные.НоменклатураПредставление,
					ТекущиеДанные.ХарактеристикаПредставление),
				Формат(ТекущиеДанные.КоличествоЗапланировано, "ЧГ="),
				ТекущиеДанные.ЕдиницаИзмерения,
				Формат(ТекущиеДанные.ДатаПотребности, "ДФ='dd.MM.yyyy (ддд)'"));

	
КонецФункции

Функция КомментарийКСтрокеПродукции(ИтогиПоПродукции)
	
	Результат = "";
	
	Если ИтогиПоПродукции.ЭтаповДоступно > 0 Тогда
		
		Результат = СтрШаблон(
						НСтр("ru = 'будет %1 %2 %3 (всего %4)';
							|en = 'will be %1 %2 %3 (%4 total)'"),
						ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
							НСтр("ru = 'сконвертирован';
								|en = 'converted'"),
							НСтр("ru = 'сконвертированно';
								|en = 'converted'"),
							НСтр("ru = 'сконвертированно';
								|en = 'converted'"),
							ИтогиПоПродукции.ЭтаповДоступно),
						ИтогиПоПродукции.ЭтаповДоступно,
						ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
							НСтр("ru = 'этап';
								|en = 'stage'"),
							НСтр("ru = 'этапа';
								|en = 'stage'"),
							НСтр("ru = 'этапов';
								|en = 'steps'"),
							ИтогиПоПродукции.ЭтаповДоступно),
						ИтогиПоПродукции.ЭтаповВсего);
		
	ИначеЕсли ИтогиПоПродукции.ПоЗаказуДавальца Тогда
		
		Результат = НСтр("ru = 'конвертация строки заказа на производство по давальческой схеме недоступна';
						|en = 'conversion of production order line according to tolling scheme is not available'");
		
	ИначеЕсли ИтогиПоПродукции.СтрокаВыполнена Тогда
		
		Результат = НСтр("ru = 'завершено производство';
						|en = 'production is completed'");
		
	ИначеЕсли НЕ ИтогиПоПродукции.ГрафикРассчитан Тогда
		
		Результат = НСтр("ru = 'требуется рассчитать график производства и завершить выполнение этапов';
						|en = 'calculate the production schedule and finish stage execution'");
		
	Иначе
		
		Результат = НСтр("ru = 'необходимо завершить начатые этапы и закрыть заказ';
						|en = 'finish the started stages and close the order'");
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область КонвертацияЗаказов

Процедура ВыполнитьКонвертациюЗаказов(ПараметрыЗадания, АдресХранилища) Экспорт
	
	Результат = ПроверитьВозможностьКонвертации(ПараметрыЗадания.ОтмеченныеСтроки);
	
	Если Результат.ЕстьОшибки Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Выборка = ВыбратьСтрокиДляКонвертации(ПараметрыЗадания.ОтмеченныеСтроки);
	
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	
	Пока ЕстьЗаписиВВыборке Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЕстьЗаписиВВыборке = Ложь;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось заблокировать %1. %2';
										|en = 'Cannot block %1. %2'"), 
				Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		КонецПопытки; 
		
		ОтмеченныеСтрокиЗаказа = ОтмеченныеСтрокиЗаказа(ПараметрыЗадания.ОтмеченныеСтроки, Выборка.Ссылка);
		
		ЕстьЗаписиВВыборке = СконвертироватьЗаказИзВыборки(Выборка, ОтмеченныеСтрокиЗаказа, Результат);
		
	КонецЦикла;
	
	Результат.ДеревоЗаказов = ПостроитьДеревоЗаказов(ПараметрыЗадания.Отбор);
	Результат.Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ВыбратьСтрокиДляКонвертации(ОтмеченныеСтроки)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОтмеченныеСтроки.Ссылка КАК Ссылка,
		|	ОтмеченныеСтроки.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВТОтмеченныеСтроки
		|ИЗ
		|	&ОтмеченныеСтроки КАК ОтмеченныеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПродукция.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТПродукция.Ссылка) КАК Представление,
		|	ТЗаказы.Номер КАК Номер,
		|	ТЗаказы.Дата КАК Дата,
		|	ТЗаказы.Приоритет КАК Приоритет,
		|	ТЗаказы.Подразделение КАК Подразделение,
		|	ТЗаказы.Статус КАК Статус,
		|	ТЗаказы.Организация КАК Организация,
		|	ТЗаказы.ЗаказПодДеятельность КАК ЗаказПодДеятельность,
		|	ТЗаказы.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТЗаказы.ДокументОснование КАК ДокументОснование,
		|	ТПродукция.НомерСтроки КАК НомерСтроки,
		|	ТПродукция.НачатьНеРанее КАК НачатьНеРанее,
		|	ТПродукция.ДатаПотребности КАК ДатаПотребности,
		|	ТПродукция.РазмещениеВыпуска КАК РазмещениеВыпуска,
		|	ТПродукция.КлючСвязи КАК КлючСвязи,
		|	ТПродукция.КодСтроки КАК КодСтроки,
		|	ТПродукция.Номенклатура КАК Номенклатура,
		|	ТПродукция.Характеристика КАК Характеристика
		|ИЗ
		|	ВТОтмеченныеСтроки КАК ОтмеченныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТЗаказы
		|			ПО ТПродукция.Ссылка = ТЗаказы.Ссылка
		|		ПО ОтмеченныеСтроки.Ссылка = ТПродукция.Ссылка
		|			И ОтмеченныеСтроки.КодСтроки = ТПродукция.КодСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НачатьНеРанее,
		|	ДатаПотребности,
		|	РазмещениеВыпуска,
		|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ОтмеченныеСтроки", ОтмеченныеСтроки);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ОтмеченныеСтрокиЗаказа(ОтмеченныеСтроки, Ссылка)

	ОтборПоЗаказу = Новый Структура("Ссылка", Ссылка);
	
	Возврат ОтмеченныеСтроки.Скопировать(ОтборПоЗаказу);

КонецФункции

Функция СконвертироватьЗаказИзВыборки(Выборка, ОтмеченныеСтроки, Результат)
	
	ЕстьЗаписиВВыборке = Истина;
	
	Заказ21Объект = ПолучитьЗаказ21ДляКонвертации(Выборка, ОтмеченныеСтроки);
	
	Пока ЕстьЗаписиВВыборке
		И Выборка.Ссылка = Заказ21Объект.Ссылка Цикл 
		
		КлючиСвязиПродукции = Новый Массив;
		
		Заказ22Объект = ПолучитьЗаказ22ДляКонвертации(Выборка);
		
		Пока ЕстьЗаписиВВыборке
			И Выборка.Ссылка            = Заказ21Объект.Ссылка
			И Выборка.НачатьНеРанее     = Заказ22Объект.НачатьНеРанее
			И Выборка.ДатаПотребности   = Заказ22Объект.ДатаПотребности
			И Выборка.РазмещениеВыпуска = Заказ22Объект.РазмещениеВыпуска Цикл
			
			ДополнитьЗаказНаПроизводство22(
					Заказ22Объект,
					Заказ21Объект,
					Выборка.КлючСвязи);
			
			КлючиСвязиПродукции.Добавить(Выборка.КлючСвязи);
			
			ЕстьЗаписиВВыборке = Выборка.Следующий();
		
		КонецЦикла;
		
		ЗаписатьЗаказ22(Заказ22Объект);
		
		Для каждого КлючСвязиПродукция Из КлючиСвязиПродукции Цикл
			
			СформироватьЭтапыПроизводства22(
					Заказ21Объект,
					КлючСвязиПродукция,
					Заказ22Объект,
					Результат);
			
			Для каждого КлючСвязи Из КлючиСвязиПродукцииИПолуфабрикатов(
											Заказ21Объект,
											КлючСвязиПродукция) Цикл
				
				СократитьСтрокуЗаказаНаПроизводство21(
							Заказ21Объект, 
							КлючСвязи);
			
			КонецЦикла;
			
			СкорректироватьНазначениеПолуфабрикатовЗаказа21(
						Заказ21Объект, 
						КлючСвязи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьЗаказ21(Заказ21Объект);
	
	СкорректироватьНаправлениеВыпускаПолуфабрикатов(Заказ21Объект);
	
	СкорректироватьЗаказМатериалов(Заказ21Объект); 
	
	Возврат ЕстьЗаписиВВыборке;
	
КонецФункции

#Область Проверка

Функция ПроверитьВозможностьКонвертации(ОтмеченныеСтроки)
	
	Результат = РезультатКонвертации();
	
	Если ОтсутствуютЦеховыеКладовые(ОтмеченныеСтроки) Тогда
		Результат.ЕстьОшибки          = Истина;
		Результат.ОтсутствуютКладовые = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтсутствуютЦеховыеКладовые(ОтмеченныеСтроки)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОтмеченныеСтроки.Ссылка КАК Ссылка,
		|	ОтмеченныеСтроки.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВТОтмеченныеСтроки
		|ИЗ
		|	&ОтмеченныеСтроки КАК ОтмеченныеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПродукция.Ссылка КАК Ссылка,
		|	ТПродукция.КлючСвязи КАК КлючСвязи,
		|	ТПродукция.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВТКлючиПродукции
		|ИЗ
		|	ВТОтмеченныеСтроки КАК ОтмеченныеСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
		|		ПО ОтмеченныеСтроки.Ссылка = ТПродукция.Ссылка
		|			И ОтмеченныеСтроки.КодСтроки = ТПродукция.КодСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	КлючСвязи,
		|	КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПодразделений.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПодразделения
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказНаПроизводствоВыходныеИзделия.Подразделение КАК Ссылка
		|	ИЗ
		|		ВТКлючиПродукции КАК КлючиПродукции
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказНаПроизводствоВыходныеИзделия
		|			ПО КлючиПродукции.Ссылка = ЗаказНаПроизводствоВыходныеИзделия.Ссылка
		|				И КлючиПродукции.КлючСвязи = ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция
		|	ГДЕ
		|		ЗаказНаПроизводствоВыходныеИзделия.Подразделение <> &ПустоеПодразделение
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказНаПроизводствоВозвратныеОтходы.Подразделение
		|	ИЗ
		|		ВТКлючиПродукции КАК КлючиПродукции
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ЗаказНаПроизводствоВозвратныеОтходы
		|			ПО КлючиПродукции.Ссылка = ЗаказНаПроизводствоВозвратныеОтходы.Ссылка
		|				И КлючиПродукции.КлючСвязи = ЗаказНаПроизводствоВозвратныеОтходы.КлючСвязиПродукция
		|	ГДЕ
		|		ЗаказНаПроизводствоВозвратныеОтходы.Подразделение <> &ПустоеПодразделение
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказНаПроизводствоМатериалыИУслуги.Подразделение
		|	ИЗ
		|		ВТКлючиПродукции КАК КлючиПродукции
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказНаПроизводствоМатериалыИУслуги
		|			ПО КлючиПродукции.Ссылка = ЗаказНаПроизводствоМатериалыИУслуги.Ссылка
		|				И КлючиПродукции.КлючСвязи = ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиПродукция
		|	ГДЕ
		|		ЗаказНаПроизводствоМатериалыИУслуги.Подразделение <> &ПустоеПодразделение) КАК ТаблицаПодразделений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаПодразделений.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	ВТПодразделения КАК Подразделения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ЦеховыеКладовые
		|		ПО (ЦеховыеКладовые.Подразделение = Подразделения.Ссылка)
		|			И (ЦеховыеКладовые.ЦеховаяКладовая И НЕ ЦеховыеКладовые.ПометкаУдаления)
		|ГДЕ
		|	ЦеховыеКладовые.Ссылка ЕСТЬ NULL ");
		
	Запрос.УстановитьПараметр("ОтмеченныеСтроки",    ОтмеченныеСтроки);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());

	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ЗаказыНаПроизводство

Функция ПолучитьЗаказ21ДляКонвертации(Выборка, ОтмеченныеСтроки)
	
	Заказ21Объект = Выборка.Ссылка.ПолучитьОбъект();
	
	ДополнительныеСвойства = Заказ21Объект.ДополнительныеСвойства;
	
	ДополнительныеСвойства.Вставить(
		"ОписаниеПроизводственногоПроцесса", 
		ОписаниеПроизводственногоПроцессаПоЗаказу21(
			Заказ21Объект,
			ОтмеченныеСтроки));
	
	ДополнительныеСвойства.Вставить(
		"КорректировкиЗаказаМатериалов", 
		КорректировкиЗаказаМатериалов());
		
	ПланированиеПроизводства.ДобавитьПараметрыАктуализацииМаршрутныхЛистов(
		ДополнительныеСвойства, Выборка.Ссылка, Новый Массив);
	
	Возврат Заказ21Объект;
	
КонецФункции

Функция ПолучитьЗаказ22ДляКонвертации(Выборка)
	
	Заказ22Объект = Документы.ЗаказНаПроизводство2_2.СоздатьДокумент();
	
	Заказ22Объект.Дата = ТекущаяДатаСеанса();
	
	ДанныеЗаполнения = Новый Структура(
		"Приоритет,
		|Подразделение,
		|Статус,
		//
		|Организация,
		|ЗаказПодДеятельность,
		|НаправлениеДеятельности,
		//
		|ДокументОснование,
		//
		|НачатьНеРанее,
		|ДатаПотребности,
		|РазмещениеВыпуска
		|");

	ДанныеЗаполнения.ДокументОснование = Выборка.Ссылка;
	ДанныеЗаполнения.Статус = СтатусЗаказа22(Выборка.Статус);
	
	ЗаполнитьЗначенияСвойств(
		ДанныеЗаполнения,
		Выборка,,
		"Статус,
		|ДокументОснование");
	
	Заказ22Объект.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется = Истина;
	
	Заказ22Объект.Комментарий = КомментарийЗаказа22(Выборка);
	
	Заказ22Объект.Заполнить(ДанныеЗаполнения);
	
	Возврат Заказ22Объект;

КонецФункции

Функция КомментарийЗаказа22(Выборка)
	
	ТекстШаблона = НСтр("ru = 'Сформирован автоматически обработкой ""Конвертация незавершенных заказов на производство"" по заказу на производство %1 от %2.';
						|en = 'Generated automatically by the ""Conversion of unfinished production orders"" data processor for the %1 production order dated %2.'");
	
	Возврат СтрШаблон(
				ТекстШаблона,
				Выборка.Номер,
				Формат(
					Выборка.Дата, 
					"ДЛФ=D"));
	
КонецФункции

Функция СтатусЗаказа22(СтатусЗаказа21)
	
	Если СтатусЗаказа21 = Перечисления.СтатусыЗаказовНаПроизводство.Создан Тогда
		
		Возврат Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется;
		
	ИначеЕсли СтатусЗаказа21 = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству Тогда
		
		Возврат Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
		
	Иначе
		
		Возврат Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт;
		
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьЗаказНаПроизводство22(Заказ22Объект, Заказ21Объект, КлючСвязиПродукция)
	
	ВыпускающийЭтап = СтрокаЭтапаВыпускаПродукцииИзОписания(Заказ21Объект, КлючСвязиПродукция);
	
	ОтборПродукция = Новый Структура("КлючСвязи", КлючСвязиПродукция);
	НайденныеСтроки = Заказ21Объект.Продукция.НайтиСтроки(ОтборПродукция);
	
	ОтборИзделие = Новый Структура("КлючСвязиПродукция,КлючСвязиЭтапы", КлючСвязиПродукция);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = Заказ22Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,"Количество,КоличествоУпаковок");
		
		Если ВыпускающийЭтап <> Неопределено
			И ВыпускающийЭтап.Количество22 > 0 Тогда
			
			ОтборИзделие.КлючСвязиЭтапы = ВыпускающийЭтап.КлючСвязи;
			
			НайденныеВыходныеИзделия = Заказ21Объект.ВыходныеИзделия.НайтиСтроки(ОтборИзделие);
			Для каждого СтрокаИзделие Из НайденныеВыходныеИзделия Цикл
				Если СтрокаИзделие.Номенклатура = Строка.Номенклатура
					И СтрокаИзделие.Характеристика = Строка.Характеристика Тогда
					НоваяСтрока.Количество = Строка.Количество - РассчитатьКоличество21(СтрокаИзделие, ВыпускающийЭтап);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ПересчитатьКоличествоУпаковокВСтроке(НоваяСтрока);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗаказ21(Заказ21Объект)
	
	Заказ21Объект.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
	
	НачатьТранзакцию();
	
	Попытка
		
		Заказ21Объект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Конвертация незавершенных заказов на производство.Сокращение заказа';
				|en = 'Conversion of unfinished production orders. Order reduction'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки; 
	
КонецПроцедуры

Процедура ЗаписатьЗаказ22(Заказ22Объект)
	
	Попытка
		
		Заказ22Объект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Конвертация незавершенных заказов на производство.Формирование заказа';
				|en = 'Conversion of unfinished production orders. Order generation'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЭтапыПроизводства

Процедура СформироватьЭтапыПроизводства22(Заказ21Объект, КлючСвязиПродукция, Заказ22Объект, Результат)
	
	Распоряжение = Заказ22Объект.Ссылка;
	
	Параметры = Документы.ЭтапПроизводства2_2.ПараметрыФормированияЭтапов();
	Параметры.Распоряжения = ОбщегоНазначенияУТКлиентСервер.Массив(Распоряжение);
	
	ДанныеСпецификаций = ДанныеСпецификацийЗаказа21(
		Заказ21Объект,
		КлючСвязиПродукция,
		Заказ22Объект);
	
	СформированоДокументов = Документы.ЭтапПроизводства2_2.СформироватьЭтапыПоДаннымЗаказа21(
		Параметры,
		Распоряжение,
		ДанныеСпецификаций);
	
	ЗаполнитьНовыеСсылкиВТаблицеЭтапов(Заказ21Объект, КлючСвязиПродукция, ДанныеСпецификаций);
	
	Результат.ОбработаноЭтапов = Результат.ОбработаноЭтапов + СформированоДокументов;
	
КонецПроцедуры

#Область РазузлованиеЗаказа21

Функция ВыходныеИзделияКонструктор(Источник)
	
	// Реквизиты, значение которых будет скопировано из заказа 2.1
	Результат = Источник.ВыходныеИзделия.ВыгрузитьКолонки(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|КоличествоУпаковок,
		|Количество,
		|ДоляСтоимости");
	
	ОписаниеТипов  = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Результат.Колонки.Добавить("Назначение",ОписаниеТипов);
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	
	ОписаниеТипов = Новый ОписаниеТипов(ТипыПолучатель);
	Результат.Колонки.Добавить("Получатель",ОписаниеТипов);
	
	Результат.Колонки.Добавить("СписатьНаРасходы");
	Результат.Колонки.Добавить("СтатьяРасходов");
	Результат.Колонки.Добавить("АналитикаРасходов");
	Результат.Колонки.Добавить("АналитикаАктивовПассивов");
	
	// Служебные реквизиты
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Результат.Колонки.Добавить("ЭтапПотребитель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла);
	Результат.Колонки.Добавить("КлючСвязиПолучатель", ОписаниеТипов);
	Результат.Колонки.Добавить("КодЭтапаПолучателя", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("Этап",                 ОписаниеТипов);
	Результат.Колонки.Добавить("ЭтапПолучательИзделия",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("ОбособленаПодПотребность",ОписаниеТипов);
	Результат.Колонки.Добавить("ОбработатьПоСпецификации",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры");
	Результат.Колонки.Добавить("ТипНоменклатуры", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	Результат.Колонки.Добавить("ПодразделениеЭтапа", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

Функция ВыходныеИзделияЗаказа21(Заказ21Объект, ВыпускающийЭтап, КоллекцияЭтапов, СтруктураИзделия)
	
	Результат = ВыходныеИзделияКонструктор(Заказ21Объект);
	
	ОтборПоЭтапу = Новый Структура("КлючСвязиЭтапы");
	
	ТипыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Заказ21Объект.ВыходныеИзделия.ВыгрузитьКолонку("Номенклатура"),
		"ТипНоменклатуры");
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		ОтборПоЭтапу.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		НайденныеСтроки = Заказ21Объект.ВыходныеИзделия.НайтиСтроки(ОтборПоЭтапу);
		
		Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
			
			НоваяСтрока = Результат.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ДанныеСтроки,
				"Номенклатура,
				|Характеристика,
				|Упаковка,
				|ДоляСтоимости");
			
			НоваяСтрока.Этап = СтрокаЭтап.КлючСвязи;
			НоваяСтрока.ПодразделениеЭтапа = СтрокаЭтап.Подразделение;
			
			НоваяСтрока.Назначение = НазначениеВыходныхИзделийДляПроизводства22(ДанныеСтроки, Заказ21Объект);
			НоваяСтрока.Получатель = ПолучательВыходныхИзделийДляПроизводства22(ДанныеСтроки, Заказ21Объект);
			
			Если ЭтоСтрокаВыпускаПолуфабриката(ДанныеСтроки, Заказ21Объект) Тогда
				
				НоваяСтрока.ОбособленаПодПотребность = Истина;
				НоваяСтрока.КлючСвязиПолучатель      = СтруктураИзделия.КлючСвязиРодитель;
				НоваяСтрока.КодЭтапаПолучателя       = СтруктураИзделия.КодЭтапаПотребителя;
				НоваяСтрока.ЭтапПолучательИзделия    = СтруктураИзделия.ЭтапПотребитель;
				
			КонецЕсли;
			
			НоваяСтрока.Количество = РассчитатьКоличество22(ДанныеСтроки, ВыпускающийЭтап);
			ПересчитатьКоличествоУпаковокВСтроке(НоваяСтрока);
			
			НоваяСтрока.ТипНоменклатуры = ТипыНоменклатуры[ДанныеСтроки.Номенклатура];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВозвратныеОтходыКонструктор(Источник)
	
	// Реквизиты, значение которых будет скопировано из заказа 2.1
	Результат = Источник.ВозвратныеОтходы.ВыгрузитьКолонки(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|КоличествоУпаковок,
		|Количество,
		|СтатьяКалькуляции,
		|ОписаниеИзделия");
	
	ОписаниеТипов  = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Результат.Колонки.Добавить("Назначение",ОписаниеТипов);

	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	
	ОписаниеТипов  = Новый ОписаниеТипов(ТипыПолучатель);
	Результат.Колонки.Добавить("Получатель",ОписаниеТипов);
	
	// Служебные реквизиты
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Результат.Колонки.Добавить("ЭтапПотребитель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла);
	Результат.Колонки.Добавить("КлючСвязиПолучатель", ОписаниеТипов);
	Результат.Колонки.Добавить("КодЭтапаПолучателя", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("Этап",                 ОписаниеТипов);
	Результат.Колонки.Добавить("ЭтапПолучательИзделия",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("ОбособленаПодПотребность",ОписаниеТипов);
	Результат.Колонки.Добавить("ОбработатьПоСпецификации",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры");
	Результат.Колонки.Добавить("ТипНоменклатуры", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	Результат.Колонки.Добавить("ПодразделениеЭтапа", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

Функция ВозвратныеОтходыЗаказа21(Заказ21Объект, ВыпускающийЭтап, КоллекцияЭтапов, СтруктураИзделия)
	
	Результат = ВозвратныеОтходыКонструктор(Заказ21Объект);
	
	ОтборПоЭтапу = Новый Структура("КлючСвязиЭтапы");
	
	ТипыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Заказ21Объект.ВозвратныеОтходы.ВыгрузитьКолонку("Номенклатура"),
		"ТипНоменклатуры");
		
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		ОтборПоЭтапу.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		НайденныеСтроки = Заказ21Объект.ВозвратныеОтходы.НайтиСтроки(ОтборПоЭтапу);
		
		Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
			
			НоваяСтрока = Результат.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ДанныеСтроки,
				"Номенклатура,
				|Характеристика,
				|Упаковка,
				|СтатьяКалькуляции,
				|ОписаниеИзделия");
			
			НоваяСтрока.Этап = СтрокаЭтап.КлючСвязи;
			НоваяСтрока.ПодразделениеЭтапа = СтрокаЭтап.Подразделение;
			
			НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
			НоваяСтрока.Получатель = ПолучательВыходныхИзделийДляПроизводства22(ДанныеСтроки, Заказ21Объект);
			
			НоваяСтрока.Количество = РассчитатьКоличество22(ДанныеСтроки, ВыпускающийЭтап);
			ПересчитатьКоличествоУпаковокВСтроке(НоваяСтрока);
			
			НоваяСтрока.ТипНоменклатуры = ТипыНоменклатуры[ДанныеСтроки.Номенклатура];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МатериалыИУслугиКонструктор(Источник)
	
	// Реквизиты, значение которых будет скопировано из заказа 2.1
	Результат = Источник.МатериалыИУслуги.ВыгрузитьКолонки(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|КоличествоУпаковок,
		|Количество,
		//
		|Серия,
		|СтатусУказанияСерий,
		|Склад,
		|Обособленно,
		|ВариантОбеспечения,
		//
		//
		|СтатьяКалькуляции,
		//
		|ИспользуетсяАвтовыбор,
		|ПрименениеМатериала,
		|СведенияАвтовыбора
		|");
	
	ОписаниеТипов = Новый ОписаниеТипов("Дата");
	Результат.Колонки.Добавить("ДатаОтгрузки", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("КлючСвязи", ОписаниеТипов);

	// Производство в процессе
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("Производится", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПолученияМатериаловВСпецификации");
	Результат.Колонки.Добавить("СпособПолученияМатериала", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.РесурсныеСпецификации"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭтапыПроизводства"));
	МассивТипов.Добавить(Тип("УникальныйИдентификатор"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("ИсточникПолученияПолуфабриката", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации");
	Результат.Колонки.Добавить("Спецификация", ОписаниеТипов);
	Результат.Колонки.Добавить("СпецификацияРемонта", ОписаниеТипов);
	
	// Служебные реквизиты
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("ЗапрещеноИзменятьВариантОбеспечения", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры");
	Результат.Колонки.Добавить("ТипНоменклатуры", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("Этап", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	Результат.Колонки.Добавить("ПодразделениеЭтапа", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

Функция МатериалыИУслугиЗаказа21(Заказ21Объект, ВыпускающийЭтап, КоллекцияЭтапов, СтруктураИзделия)
	
	Результат = МатериалыИУслугиКонструктор(Заказ21Объект);
	
	ОтборПоЭтапу = Новый Структура("Ссылка, КлючСвязиПродукция, КлючСвязиЭтапы");
	
	ЗаполнитьЗначенияСвойств(ОтборПоЭтапу, ВыпускающийЭтап,, "КлючСвязиЭтапы");
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
	
		ОтборПоЭтапу.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		НайденныеСтроки = МатериалыИУслугиСУчетомКорректировок(Заказ21Объект, ОтборПоЭтапу);
		
		Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
			
			НоваяСтрока = Результат.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ДанныеСтроки,
				"Номенклатура,
				|Характеристика,
				|Упаковка,
				//
				|Серия,
				|СтатусУказанияСерий,
				//
				|СтатьяКалькуляции,
				//
				|ИспользуетсяАвтовыбор,
				|ПрименениеМатериала,
				|СведенияАвтовыбора
				|");
			
			НоваяСтрока.Этап = СтрокаЭтап.КлючСвязи;
			НоваяСтрока.ПодразделениеЭтапа = СтрокаЭтап.Подразделение;
			
			НоваяСтрока.КлючСвязи = ДанныеСтроки.КлючСвязиСпецификация;
			
			НоваяСтрока.Склад = СкладМатериаловИРаботДляЗаказа22(ДанныеСтроки, Заказ21Объект);
			НоваяСтрока.ДатаОтгрузки = ДанныеСтроки.ДатаПотребности;
			
			ИсточникПолученияПолуфабриката = Неопределено;
			
			Если ЭтоПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки,Заказ21Объект,ИсточникПолученияПолуфабриката) Тогда
				
				НоваяСтрока.Производится = Истина;
				
				НоваяСтрока.Обособленно = Истина;
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
				
				Если ТипЗнч(ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
					НоваяСтрока.СпособПолученияМатериала       = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
					НоваяСтрока.Спецификация                   = ИсточникПолученияПолуфабриката;
					НоваяСтрока.ИсточникПолученияПолуфабриката = ИсточникПолученияПолуфабриката;
				Иначе
					НоваяСтрока.СпособПолученияМатериала       = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе;
					НоваяСтрока.Спецификация                   = Справочники.РесурсныеСпецификации.ПустаяСсылка();
					НоваяСтрока.ИсточникПолученияПолуфабриката = ДанныеСтроки.КлючСвязиЭтапВыпуска;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока.Обособленно = ДанныеСтроки.Обособленно;
				НоваяСтрока.ВариантОбеспечения = ДанныеСтроки.ВариантОбеспечения;
				НоваяСтрока.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
				
			КонецЕсли;
			
			НоваяСтрока.ТипНоменклатуры = ТипНоменклатуры(ДанныеСтроки.Номенклатура, Заказ21Объект);
			НоваяСтрока.ЗапрещеноИзменятьВариантОбеспечения = Истина;
			
			НоваяСтрока.Количество = РассчитатьКоличество22(ДанныеСтроки, ВыпускающийЭтап);
			ПересчитатьКоличествоУпаковокВСтроке(НоваяСтрока);
			
			Если НоваяСтрока.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации Тогда
				
				УточитьКоличествоПолуфабрикатаКПроизводству(
							Заказ21Объект,
							НоваяСтрока,
							СтрокаЭтап);
				
			ИначеЕсли НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				
				УточнитьОбеспечениеДляОтгруженныхМатериалов(
							Заказ21Объект,
							НоваяСтрока,
							ДанныеСтроки,
							СтрокаЭтап);
				
			КонецЕсли;
			
			Если НЕ СтрокаЭтап.ТребуетсяКорректировкаНазначения
				И НоваяСтрока.Обособленно
				И НоваяСтрока.СпособПолученияМатериала <> Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе Тогда
				
				СтрокаЭтап.ТребуетсяКорректировкаНазначения = Истина;
				СтрокаЭтап.НазначениеМатериалы = ДанныеСтроки.Назначение;
				
			КонецЕсли;
			
			Если НЕ СтрокаЭтап.ТребуетсяКорректировкаЗаказаМатериалов
				И НоваяСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется Тогда
				
				СтрокаЭтап.ТребуетсяКорректировкаЗаказаМатериалов = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтапыКонструктор(Источник)
	
	// Реквизиты, значение которых будет скопировано из заказа 2.1
	Результат = Источник.Этапы.ВыгрузитьКолонки(
		"ГрафикРаботыПартнера,
		|ДлительностьЭтапа,
		|ЕдиницаИзмеренияДлительностиЭтапа,
		|ЕдиницаИзмеренияЗавершающегоБуфера,
		|ЕдиницаИзмеренияПредварительногоБуфера,
		|ЗавершающийБуфер,
		|Количество,
		|МаршрутнаяКарта,
		|Непрерывный,
		|НомерСледующегоЭтапа,
		|НомерЭтапа,
		|ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
		|Описание,
		|Партнер,
		|ПланироватьРаботуВидовРабочихЦентров,
		|Подразделение,
		|ПредварительныйБуфер,
		|ПроизводствоНаСтороне,
		|Спецификация,
		|СтатьяКалькуляции,
		|УслугаПереработчика,
		|ХарактеристикаУслугиПереработчика");
	
	ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2");
	Результат.Колонки.Добавить("Статус", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("Этап", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства");
	Результат.Колонки.Добавить("ЭтапСпецификации", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Строка");
	Результат.Колонки.Добавить("ЭтапПредставление",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Дата");
	Результат.Колонки.Добавить("ЖелаемаяДатаОбеспечения",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("КоэффициентМаршрутнойКарты",ОписаниеТипов);
	
	// Реквизиты для обратной связи
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("КлючСвязиПродукция21", ОписаниеТипов);
	Результат.Колонки.Добавить("КлючСвязиЭтап21",      ОписаниеТипов);
	
	// Реквизиты для совместимости
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла);
	Результат.Колонки.Добавить("КлючСвязи",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла);
	Результат.Колонки.Добавить("КодЭтапа",ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтапыЗаказа21(Заказ21Объект, ВыпускающийЭтап, КоллекцияЭтапов, СтруктураИзделия)
	
	Результат = ЭтапыКонструктор(Заказ21Объект);
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		ДанныеСтроки = СтрокаЭтап.ДанныеЭтапа;
		
		НоваяСтрока = Результат.Добавить();
		
		Если СтрокаЭтап.ТребуетсяКорректировкаЗаказаМатериалов Тогда
			НоваяСтрока.Статус = СтатусЭтапаШаг1();
		Иначе
			НоваяСтрока.Статус = СтатусЭтапаШаг2();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрока,
			ДанныеСтроки,
			"ГрафикРаботыПартнера,
			|ДлительностьЭтапа,
			|ЕдиницаИзмеренияДлительностиЭтапа,
			|ЕдиницаИзмеренияЗавершающегоБуфера,
			|ЕдиницаИзмеренияПредварительногоБуфера,
			|ЗавершающийБуфер,
			|МаршрутнаяКарта,
			|Непрерывный,
			|НомерСледующегоЭтапа,
			|НомерЭтапа,
			|ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
			|Описание,
			|Партнер,
			|ПланироватьРаботуВидовРабочихЦентров,
			|Подразделение,
			|ПредварительныйБуфер,
			|ПроизводствоНаСтороне,
			|Спецификация,
			|СтатьяКалькуляции,
			|УслугаПереработчика,
			|ХарактеристикаУслугиПереработчика");
		
		НоваяСтрока.КодЭтапа = СтрокаЭтап.КодЭтапа;
		
		НоваяСтрока.Этап              = СтрокаЭтап.КлючСвязи;
		НоваяСтрока.ЭтапСпецификации  = ДанныеСтроки.Этап;
		НоваяСтрока.ЭтапПредставление = ДанныеСтроки.НаименованиеЭтапа;
		
		НоваяСтрока.КоэффициентМаршрутнойКарты = 1;
		
		НоваяСтрока.КлючСвязиПродукция21 = СтрокаЭтап.КлючСвязиПродукция;
		НоваяСтрока.КлючСвязиЭтап21      = СтрокаЭтап.КлючСвязи;
		
		НоваяСтрока.ЖелаемаяДатаОбеспечения = НачалоДня(ТекущаяДатаСеанса());
		
		НоваяСтрока.Количество = РассчитатьКоличество22(ДанныеСтроки, ВыпускающийЭтап);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТрудозатратыКонструктор(Источник)
	
	// Реквизиты, значение которых будет скопировано из заказа 2.1
	Результат = Источник.Трудозатраты.ВыгрузитьКолонки(
		"ВидРабот,
		|Количество,
		|СтатьяКалькуляции,
		|НазначениеРабот");
	
	// Служебные реквизиты
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("Этап", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	Результат.Колонки.Добавить("ПодразделениеЭтапа", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

Функция ТрудозатратыЗаказа21(Заказ21Объект, ВыпускающийЭтап, КоллекцияЭтапов, СтруктураИзделия)
	
	Результат = ТрудозатратыКонструктор(Заказ21Объект);
	
	ОтборПоЭтапу = Новый Структура("КлючСвязиЭтапы");
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		ОтборПоЭтапу.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		НайденныеСтроки = Заказ21Объект.Трудозатраты.НайтиСтроки(ОтборПоЭтапу);
		
		Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
			
			НоваяСтрока = Результат.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ДанныеСтроки,
				"ВидРабот,
				|СтатьяКалькуляции,
				|НазначениеРабот");
			
			НоваяСтрока.Этап = СтрокаЭтап.КлючСвязи;
			НоваяСтрока.ПодразделениеЭтапа = СтрокаЭтап.Подразделение;
			
			НоваяСтрока.Количество = РассчитатьКоличество22(ДанныеСтроки, ВыпускающийЭтап);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВидыРабочихЦентровКонструктор(Источник)
	
	// Реквизиты, значение которых будет скопировано из заказа 2.1
	Результат = Источник.ВидыРабочихЦентров.ВыгрузитьКолонки(
		"ВидРабочегоЦентра,
		|ВремяРаботы,
		|ЕдиницаИзмерения,
		|ВариантНаладки,
		|Использовать");
	
	// Служебные реквизиты
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("Этап", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

Функция ВидыРабочихЦентровЗаказа21(Заказ21Объект, ВыпускающийЭтап, КоллекцияЭтапов, СтруктураИзделия)
	
	Результат = ВидыРабочихЦентровКонструктор(Заказ21Объект);
	
	ОтборПоЭтапу = Новый Структура("КлючСвязиЭтапы");
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		ОтборПоЭтапу.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		НайденныеСтроки = Заказ21Объект.ВидыРабочихЦентров.НайтиСтроки(ОтборПоЭтапу);
		
		Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
			
			НоваяСтрока = Результат.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ДанныеСтроки,
				"ВидРабочегоЦентра,
				|ЕдиницаИзмерения,
				|ВариантНаладки,
				|Использовать");
				
			НоваяСтрока.Этап = СтрокаЭтап.КлючСвязи;
			
			НоваяСтрока.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий = 
				СтрокаЭтап.ДанныеЭтапа.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий;
			
			НоваяСтрока.ВремяРаботы = РассчитатьКоличество22(ДанныеСтроки, ВыпускающийЭтап, "ВремяРаботы");
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АльтернативныеВидыРабочихЦентровКонструктор(Источник)
	
	// Реквизиты, значение которых будет скопировано из заказа 2.1
	Результат = Источник.АльтернативныеВидыРабочихЦентров.ВыгрузитьКолонки(
		"ВидРабочегоЦентра,
		|ВремяРаботы,
		|ЕдиницаИзмерения,
		|ВариантНаладки");
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров");
	Результат.Колонки.Добавить("ОсновнойВидРабочегоЦентра", ОписаниеТипов);
	
	// Служебные реквизиты
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("Этап", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

Функция АльтернативныеВидыРабочихЦентровЗаказа21(Заказ21Объект, ВыпускающийЭтап, КоллекцияЭтапов, СтруктураИзделия)
	
	Результат = АльтернативныеВидыРабочихЦентровКонструктор(Заказ21Объект);
	
	ОтборОсновнойВРЦ = Новый Структура("КлючСвязи,КлючСвязиЭтапы");
	
	ОтборПоЭтапу = Новый Структура("КлючСвязиЭтапы");
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		ОтборПоЭтапу.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		НайденныеСтроки = Заказ21Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ОтборПоЭтапу);
		
		Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
			
			НоваяСтрока = Результат.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ДанныеСтроки,
				"ВидРабочегоЦентра,
				|ЕдиницаИзмерения,
				|ВариантНаладки");
				
			НоваяСтрока.Этап = СтрокаЭтап.КлючСвязи;
			
			НоваяСтрока.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий = 
				СтрокаЭтап.ДанныеЭтапа.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий;
			
			ОтборОсновнойВРЦ.КлючСвязи      = ДанныеСтроки.КлючСвязиВидыРабочихЦентров;
			ОтборОсновнойВРЦ.КлючСвязиЭтапы = ДанныеСтроки.КлючСвязиЭтапы;
			
			ДанныеВидаРЦ = Заказ21Объект.ВидыРабочихЦентров.НайтиСтроки(ОтборОсновнойВРЦ)[0];
			НоваяСтрока.ОсновнойВидРабочегоЦентра = ДанныеВидаРЦ.ВидРабочегоЦентра;
			
			НоваяСтрока.ВремяРаботы = РассчитатьКоличество22(ДанныеСтроки, ВыпускающийЭтап, "ВремяРаботы");
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВРезультатДанныеСпецификацииЦепочкиЭтапов(Результат, Заказ21Объект, КоллекцияЭтапов, СтруктураИзделия)
	
	ВыпускающийЭтап = НайтиВыпускающийЭтап(КоллекцияЭтапов);
	
	Если ВыпускающийЭтап = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСпецификации = Новый Структура;
	
	Результат.МассивДанных.Вставить(0,ДанныеСпецификации);
	Результат.КлючСвязи         = Результат.КлючСвязи + 1;
	
	ДанныеСпецификации.Вставить("КлючСвязи", Результат.КлючСвязи);
	
	ДанныеСпецификации.Вставить("Распоряжение",      СтруктураИзделия.ДанныеРаспоряжения.Распоряжение);
	ДанныеСпецификации.Вставить("РазмещениеВыпуска", СтруктураИзделия.ДанныеРаспоряжения.РазмещениеВыпуска);
	
	ДанныеСпецификации.Вставить("Назначение", СтруктураИзделия.Назначение);
	ДанныеСпецификации.Вставить("НазначениеПродукция", СтруктураИзделия.Назначение); // поля группировки
	
	ДанныеСпецификации.Вставить("Спецификация",              СтруктураИзделия.Спецификация);
	ДанныеСпецификации.Вставить("СпецификацияПредставление", СтруктураИзделия.СпецификацияПредставление);
	
	ДанныеСпецификации.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости);
	
	ДанныеСпецификации.Вставить("ТипПроизводственногоПроцесса", Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	ДанныеСпецификации.Вставить("ВариантНазначения", Перечисления.ВариантыНазначенияСпецификации.СписокНоменклатуры);
	
	ДанныеСпецификации.Вставить("ПартияВыпуска", Справочники.РесурсныеСпецификации.ПартияВыпуска(ВыпускающийЭтап.Количество22, 1));
	
	ДанныеСпецификации.Вставить("МногоэтапныйПроизводственныйПроцесс", КоллекцияЭтапов.Количество() > 1);
	
	ДанныеСпецификации.Вставить("ВыпускПроизвольнымиПорциями", Ложь);
	ДанныеСпецификации.Вставить("ОптимальнаяПартияВыпуска", 0);
	ДанныеСпецификации.Вставить("МинимальнаяПартияВыпуска", 0);    
	
	
	ДанныеСпецификации.Вставить("ОграниченСрокПролеживания", Ложь);
	ДанныеСпецификации.Вставить("МаксимальныйСрокПролеживанияВДнях", 0);
	ДанныеСпецификации.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", 1);
	
	ДанныеСпецификации.Вставить("ДатаВыпуска", '00010101');
	ДанныеСпецификации.Вставить("ДатаЗапуска", '00010101');
	ДанныеСпецификации.Вставить("Начало",      '00010101');
	ДанныеСпецификации.Вставить("Окончание",   '00010101');
	
	ДанныеСпецификации.Вставить("ПланироватьНеРанее", Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	ДанныеСпецификации.Вставить("ПланироватьНеРанееКодЭтапа", 0);
	
	ДанныеСпецификации.Вставить("ЭтапыОбособитьВыпуск", Новый Массив);
	
	ДанныеСпецификации.Вставить("ВыходныеИзделия",
		ВыходныеИзделияЗаказа21(
			Заказ21Объект,
			ВыпускающийЭтап,
			КоллекцияЭтапов,
			СтруктураИзделия));
	
	ДанныеСпецификации.Вставить("ВозвратныеОтходы",
		ВозвратныеОтходыЗаказа21(
			Заказ21Объект, 
			ВыпускающийЭтап,
			КоллекцияЭтапов,
			СтруктураИзделия));
	
	ДанныеСпецификации.Вставить("МатериалыИУслуги",
		МатериалыИУслугиЗаказа21(
			Заказ21Объект, 
			ВыпускающийЭтап,
			КоллекцияЭтапов,
			СтруктураИзделия));
	
	ДанныеСпецификации.Вставить("Этапы",
		ЭтапыЗаказа21(
			Заказ21Объект,
			ВыпускающийЭтап,
			КоллекцияЭтапов,
			СтруктураИзделия));
	
	ДанныеСпецификации.Вставить("ВидыРабочихЦентров",
		ВидыРабочихЦентровЗаказа21(
			Заказ21Объект, 
			ВыпускающийЭтап,
			КоллекцияЭтапов,
			СтруктураИзделия));
	
	ДанныеСпецификации.Вставить("АльтернативныеВидыРабочихЦентров",
		АльтернативныеВидыРабочихЦентровЗаказа21(
			Заказ21Объект, 
			ВыпускающийЭтап,
			КоллекцияЭтапов,
			СтруктураИзделия));
	
	ДанныеСпецификации.Вставить("Трудозатраты",
		ТрудозатратыЗаказа21(
			Заказ21Объект, 
			ВыпускающийЭтап,
			КоллекцияЭтапов,
			СтруктураИзделия));
			
	
	ДанныеСпецификации.Вставить("ВходящиеИзделия", Новый ТаблицаЗначений());
	
	ДанныеСпецификации.Вставить("ОсновноеИзделие", Справочники.РесурсныеСпецификации.СтруктураДанныхОсновногоИзделияСпецификации());
	
	Если ЗначениеЗаполнено(ДанныеСпецификации.ВыходныеИзделия) Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеСпецификации.ОсновноеИзделие, ДанныеСпецификации.ВыходныеИзделия[0]);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазузловатьСпецификациюСтрокиЗаказа21(Результат, Заказ21Объект, КлючСвязиЭтапы, СтруктураИзделия)
	
	КоллекцияЭтапов = КоллекцияЭтаповИзОписания(Заказ21Объект, КлючСвязиЭтапы);
	
	ДобавитьВРезультатДанныеСпецификацииЦепочкиЭтапов(
				Результат, 
				Заказ21Объект, 
				КоллекцияЭтапов, 
				СтруктураИзделия);
	
	КлючСвязиРодитель = Результат.КлючСвязи;
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		КлючСвязиПолуфабрикаты = Новый Структура("Ссылка,КлючСвязиЭтапПотребляющийПолуфабрикат");
		КлючСвязиПолуфабрикаты.Ссылка = СтрокаЭтап.Ссылка;
		КлючСвязиПолуфабрикаты.КлючСвязиЭтапПотребляющийПолуфабрикат = СтрокаЭтап.КлючСвязи;
		
		КоллекцияПолуфабрикатов = КоллекцияПолуфабрикатовИзОписания(Заказ21Объект, КлючСвязиПолуфабрикаты);
		
		Для каждого СтрокаПолуфабрикат Из КоллекцияПолуфабрикатов Цикл
			
			КлючСвязиЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,КлючСвязиПолуфабрикат,КонвертацияДоступна");
			КлючСвязиЭтапы.Ссылка = СтрокаПолуфабрикат.Ссылка;
			КлючСвязиЭтапы.КлючСвязиПродукция = СтрокаПолуфабрикат.КлючСвязиПродукция;
			КлючСвязиЭтапы.КлючСвязиПолуфабрикат = СтрокаПолуфабрикат.КлючСвязиПолуфабрикат;
			КлючСвязиЭтапы.КонвертацияДоступна = Истина;
			
			СтруктураПолуфабриката = СтруктураДанныхПолуфабриката(
				СтрокаЭтап, СтрокаПолуфабрикат, СтруктураИзделия, КлючСвязиРодитель);
			
			РазузловатьСпецификациюСтрокиЗаказа21(
						Результат, 
						Заказ21Объект, 
						КлючСвязиЭтапы, 
						СтруктураПолуфабриката);
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеСпецификацийЗаказа21(Заказ21Объект, КлючСвязиПродукция, Заказ22Объект)
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	КлючСвязиЭтапы = Новый Структура;
	КлючСвязиЭтапы.Вставить("Ссылка",                Заказ21Объект.Ссылка);
	КлючСвязиЭтапы.Вставить("КлючСвязиПродукция",    КлючСвязиПродукция);
	КлючСвязиЭтапы.Вставить("КлючСвязиПолуфабрикат", ПустойКлюч);
	КлючСвязиЭтапы.Вставить("КонвертацияДоступна",   Истина);
	
	ДанныеПродукции = Заказ21Объект.Продукция.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиПродукция))[0];
	СтруктураПродукции = СтруктураПродукции(ДанныеПродукции, Заказ22Объект);
	
	Результат = Новый Структура;
	Результат.Вставить("КлючСвязи",    0);
	Результат.Вставить("МассивДанных", Новый Массив);
	
	РазузловатьСпецификациюСтрокиЗаказа21(
				Результат,
				Заказ21Объект,
				КлючСвязиЭтапы,
				СтруктураПродукции);
	
	Возврат Результат.МассивДанных;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СтруктураДанныхЗаказа22(Заказ22Объект)
	
	Результат = Новый Структура(
		"Распоряжение,
		|РазмещениеВыпуска,
		//
		|ЗаказПодДеятельность, 
		|НаправлениеДеятельности, 
		|Организация");
	
	ЗаполнитьЗначенияСвойств(Результат, Заказ22Объект);
	
	Результат.Распоряжение = Заказ22Объект.Ссылка;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураПродукции(ДанныеПродукции, Заказ22Объект)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеРаспоряжения", СтруктураДанныхЗаказа22(Заказ22Объект));
	
	Результат.Вставить("Назначение", ДанныеПродукции.Назначение);
	
	Результат.Вставить("Спецификация", ДанныеПродукции.Спецификация);
	Результат.Вставить("СпецификацияПредставление", "");
	
	Результат.Вставить("ЭтапПотребитель", "");
	Результат.Вставить("КодЭтапаПотребителя", 0);
	
	Результат.Вставить("КлючСвязиРодитель", 0);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхПолуфабриката(СтрокаЭтап, СтрокаПолуфабрикат, СтруктураРодитель, КлючСвязиРодитель)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеРаспоряжения", СтруктураРодитель.ДанныеРаспоряжения);
	
	Результат.Вставить("Назначение", СтруктураРодитель.Назначение);
	
	Результат.Вставить("Спецификация", СтрокаПолуфабрикат.Спецификация);
	Результат.Вставить("СпецификацияПредставление", "");
	
	Результат.Вставить("ЭтапПотребитель", СтрокаПолуфабрикат.КлючСвязиЭтапПотребляющийПолуфабрикат);
	Результат.Вставить("КодЭтапаПотребителя", СтрокаЭтап.КодЭтапа);
	
	Результат.Вставить("КлючСвязиРодитель", КлючСвязиРодитель);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНовыеСсылкиВТаблицеЭтапов(Заказ21Объект, КлючСвязиПродукция, ДанныеСпецификаций)

	ТаблицаЭтапов = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ТаблицаЭтапов;
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,КлючСвязи");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка;
	
	Для каждого ДанныеСпецификации Из ДанныеСпецификаций Цикл
		
		Для каждого ДанныеЭтапов Из ДанныеСпецификации.Этапы Цикл
			
			ОтборЭтапы.КлючСвязиПродукция = ДанныеЭтапов.КлючСвязиПродукция21;
			ОтборЭтапы.КлючСвязи          = ДанныеЭтапов.КлючСвязиЭтап21;
			
			КоллекцияЭтапов = ТаблицаЭтапов.НайтиСтроки(ОтборЭтапы);
			
			Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
				
				СтрокаЭтап.Документ22            = ДанныеЭтапов.ЭтапПроизводства;
				СтрокаЭтап.Назначение22          = ДанныеЭтапов.Назначение;
				СтрокаЭтап.НазначениеМатериалы22 = ДанныеЭтапов.НазначениеМатериалы;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КомментарийКЭтапуПроизводства(СтрокаЭтап)
	
	ТекстКомментария = "";
	
	Если ЗначениеЗаполнено(СтрокаЭтап.ДокументыКУточнению) Тогда
	
		ТекстКомментария = НСтр("ru = 'Перед началом выполнения этапа проведите следующие документы:';
								|en = 'Before the stage begins, post the following documents:'");
		
		Для НомерСтроки = 1 По СтрокаЭтап.ДокументыКУточнению.Количество() Цикл
			
			СсылкаНаДокумент = СтрокаЭтап.ДокументыКУточнению[НомерСтроки-1];
			
			ТекстКомментария = ТекстКомментария + Символы.ПС + Символы.ПС;
			ТекстКомментария = ТекстКомментария + Формат(НомерСтроки,"ЧГ=") + ". " + СсылкаНаДокумент;
			
			ТекстКомментария = ТекстКомментария + Символы.ПС + Символы.ПС;
			ТекстКомментария = ТекстКомментария + ПолучитьНавигационнуюСсылку(СсылкаНаДокумент);
			
		КонецЦикла;
		
		ТекстКомментария = ТекстКомментария + Символы.ПС + Символы.ПС;
		ТекстКомментария = ТекстКомментария + НСтр("ru = 'и установите действие ""Обеспечивать обособленно"" для материалов обеспечиваемых обособленно';
													|en = 'and set the ""Provide on pegging basis"" action for materials provided on pegging basis'");
		
	КонецЕсли;
	
	Возврат ТекстКомментария;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СокращениеПроизводства

Процедура СократитьСтрокуЗаказаНаПроизводство21(Заказ21Объект, КлючСвязиПродукция)
	
	ПараметрыСокращенияСтрокиЗаказа = ПараметрыСокращенияСтрокиЗаказа21(Заказ21Объект, КлючСвязиПродукция);
	
	РезультатСокращения = Обработки.СокращениеПроизводства.РезультатРедактированияСтрокиСпецификацииЗаказа(ПараметрыСокращенияСтрокиЗаказа);
	
	ОчиститьДанныеЭтаповВОписании(
				Заказ21Объект, 
				КлючСвязиПродукция);
	
	ПланированиеПроизводства.УдалитьДанныеСпецификацииПоКлючу(
				Заказ21Объект, 
				КлючСвязиПродукция);
	
	ПеренестиРезультатСокращенияВСтрокуЗаказа21(
				Заказ21Объект, 
				РезультатСокращения);
	
КонецПроцедуры

Функция ПараметрыСокращенияСтрокиЗаказа21(Заказ21Объект, КлючСвязиПродукция)
	
	Результат = Новый Структура;
	
	СпецификацияСтрокиЗаказа = ПланированиеПроизводства.ДанныеСпецификацииЗаказа(Заказ21Объект, КлючСвязиПродукция);
	
	Результат.Вставить("Заказ",              СпецификацияСтрокиЗаказа.СтруктураПродукции.Ссылка);
	Результат.Вставить("КодСтрокиПродукция", СпецификацияСтрокиЗаказа.СтруктураПродукции.КодСтроки);
	Результат.Вставить("КлючСвязиПродукция", СпецификацияСтрокиЗаказа.СтруктураПродукции.КлючСвязи);
	
	Результат.Вставить("СпецификацияСтрокиЗаказа", СпецификацияСтрокиЗаказа);
	
	СтруктураДанных = Новый Структура("Этапы,ЗаказМатериалов,ОсновноеИзделие");
	
	// Этапы
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,КонвертацияДоступна");
	ОтборЭтапы.Ссылка              = СпецификацияСтрокиЗаказа.СтруктураПродукции.Ссылка;
	ОтборЭтапы.КлючСвязиПродукция  = СпецификацияСтрокиЗаказа.СтруктураПродукции.КлючСвязи;
	ОтборЭтапы.КонвертацияДоступна = Истина;
	
	ТаблицаЭтапов = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ТаблицаЭтапов;
	СтруктураДанных.Этапы = ТаблицаЭтапов.Скопировать(
			ОтборЭтапы, 
			"Ссылка, 
			|КлючСвязиПродукция, 
			|КлючСвязи, 
			|Запланировано, 
			|Количество21");
		
	СтруктураДанных.Этапы.Колонки.Ссылка.Имя        = "Заказ";
	СтруктураДанных.Этапы.Колонки.Запланировано.Имя = "КоличествоПоЗаказу";
	СтруктураДанных.Этапы.Колонки.Количество21.Имя  = "КоличествоЗапланировано";
	
	// ЗаказМатериалов
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция");
	ОтборЭтапы.Ссылка             = СпецификацияСтрокиЗаказа.СтруктураПродукции.Ссылка;
	ОтборЭтапы.КлючСвязиПродукция = СпецификацияСтрокиЗаказа.СтруктураПродукции.КлючСвязи;
	
	ЗаказМатериалов = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ЗаказМатериалов;
	СтруктураДанных.ЗаказМатериалов = ЗаказМатериалов.Скопировать(ОтборЭтапы);
	СтруктураДанных.ЗаказМатериалов.Индексы.Добавить("КлючСвязиЭтапы");
	
	// ОсновноеИзделие
	
	СтруктураДанных.ОсновноеИзделие = Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|КоличествоУпаковок,
		|Количество");
		
	ЗаполнитьЗначенияСвойств(СтруктураДанных.ОсновноеИзделие,СпецификацияСтрокиЗаказа.СтруктураПродукции);
	
	Результат.Вставить("СтруктураДанных", СтруктураДанных);
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиРезультатСокращенияВСтрокуЗаказа21(Заказ21Объект, РезультатРедактирования)
	
	ДанныеПродукции = Заказ21Объект.Продукция.Найти(РезультатРедактирования.СтруктураПродукции.КлючСвязи, "КлючСвязи");
	
	ЗаполнитьЗначенияСвойств(ДанныеПродукции, РезультатРедактирования.СтруктураПродукции, "Упаковка, КоличествоУпаковок, Количество, ДатаПотребности,
		|НачатьНеРанее, РазмещениеВыпуска, Склад, Назначение, ЕстьСоответствиеСтандартнойСпецификации");
	
	ДанныеПродукции.ГрафикРассчитан = Ложь;
	
	Для каждого Строка Из РезультатРедактирования.Этапы Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.Этапы.Добавить(), Строка);
	КонецЦикла;
	
	Для каждого Строка Из РезультатРедактирования.ВыходныеИзделия Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.ВыходныеИзделия.Добавить(), Строка);
	КонецЦикла;
	
	Для каждого Строка Из РезультатРедактирования.ВозвратныеОтходы Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.ВозвратныеОтходы.Добавить(), Строка);
	КонецЦикла;
	
	Для каждого Строка Из РезультатРедактирования.МатериалыИУслуги Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.МатериалыИУслуги.Добавить(), Строка);
	КонецЦикла;
	
	Для каждого Строка Из РезультатРедактирования.Трудозатраты Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.Трудозатраты.Добавить(), Строка);
	КонецЦикла;
	
	Для каждого Строка Из РезультатРедактирования.ВидыРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.ВидыРабочихЦентров.Добавить(), Строка);
	КонецЦикла;
	
	Для каждого Строка Из РезультатРедактирования.АльтернативныеВидыРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.АльтернативныеВидыРабочихЦентров.Добавить(), Строка);
	КонецЦикла;
	
	Для каждого Строка Из РезультатРедактирования.ЭтапыВосстановленияБрака Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.ЭтапыВосстановленияБрака.Добавить(), Строка);
	КонецЦикла;
	
	Для каждого Строка Из РезультатРедактирования.КорректировкиЗаказаМатериалов Цикл
		ЗаполнитьЗначенияСвойств(Заказ21Объект.ДополнительныеСвойства.КорректировкиЗаказаМатериалов.Добавить(), Строка);
	КонецЦикла;
	
	ОтменаМаршрутныхЛистов = Заказ21Объект.ДополнительныеСвойства.ПараметрыАктуализацииМаршрутныхЛистов;
	ОтменаМаршрутныхЛистов.МассивКодовСтрокПродукции.Добавить(ДанныеПродукции.КодСтроки);

КонецПроцедуры

#КонецОбласти

#Область КорректировкаМатериалов

Процедура СкорректироватьНазначениеПолуфабрикатовЗаказа21(Заказ21Объект, КлючСвязиПродукция)
	
	ОтборИзделия = Новый Структура("КлючСвязиПродукция,КлючСвязиЭтапы");
	ОтборИзделия.КлючСвязиПродукция = КлючСвязиПродукция;
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,ЭтапНаГранице");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка;
	ОтборЭтапы.КлючСвязиПродукция = КлючСвязиПродукция;
	ОтборЭтапы.ЭтапНаГранице = Истина;
	
	КоллекцияЭтапов = КоллекцияЭтаповИзОписания(Заказ21Объект, ОтборЭтапы);
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл 
		
		ОтборИзделия.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		КоллекцияИзделий = Заказ21Объект.ВыходныеИзделия.НайтиСтроки(ОтборИзделия);
		
		ДоляСтоимостиКоэффициент = 1;
		Если СтрокаЭтап.Количество21 <> СтрокаЭтап.Количество21_22 Тогда
			ДоляСтоимостиКоэффициент = НаименьшееОбщееКратноеВКоллекции(КоллекцияИзделий, "Количество");
		КонецЕсли;
		
		Для каждого Строка21 Из КоллекцияИзделий Цикл
			
			Строка21.ДоляСтоимости = Строка21.ДоляСтоимости * ДоляСтоимостиКоэффициент;
			
			Если Строка21.ПроизводитсяВПроцессе Тогда
				
				Строка22 = Заказ21Объект.ВыходныеИзделия.Добавить();
				Строка22.КлючСвязи  = Новый УникальныйИдентификатор;

				ЗаполнитьЗначенияСвойств(
					Строка22,
					Строка21,,
					"КлючСвязи,
					|Назначение,
					|ПроизводитсяВПроцессе");
				
				Строка22.Назначение    = СтрокаЭтап.Родитель.НазначениеМатериалы22;
				Строка22.Склад         = ПолучательВыходныхИзделийДляПроизводства22(Строка22, Заказ21Объект);
				Строка22.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
				
				РаспределитьПолуфабрикат21и22(СтрокаЭтап, Строка21, Строка22);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьНаправлениеВыпускаПолуфабрикатов(Заказ21Объект)
	
	ОтборЭтапы = Новый Структура("Ссылка,ЭтапНаГранице");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка;
	ОтборЭтапы.ЭтапНаГранице = Истина;
	
	КоллекцияЭтапов = КоллекцияЭтаповИзОписания(Заказ21Объект, ОтборЭтапы);
	Если КоллекцияЭтапов.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТЭтапыГрафик.КлючСвязиЭтапы            КАК КлючСвязи,
		|	ТЭтапыГрафик.КлючСвязиПродукция        КАК КлючСвязиПродукция,
		|	ТМаршрутныеЛисты.Ссылка                КАК Ссылка,
		|	ТМаршрутныеЛисты.ВерсияДанных          КАК ВерсияДанных,
		|	ПРЕДСТАВЛЕНИЕ(ТМаршрутныеЛисты.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК ТМаршрутныеЛисты
		|		ПО ТЭтапыГрафик.Ссылка = ТМаршрутныеЛисты.Распоряжение
		|			И ТЭтапыГрафик.КодСтроки = ТМаршрутныеЛисты.КодСтрокиЭтапыГрафик
		|ГДЕ
		|	ТЭтапыГрафик.Ссылка = &Распоряжение
		|	И ТЭтапыГрафик.КлючСвязиЭтапы В(&МассивКлючей)
		|	И ТМаршрутныеЛисты.Распоряжение = &Распоряжение
		|	И ТМаршрутныеЛисты.Статус <> &СтатусСоздан
		|	И ТМаршрутныеЛисты.Проведен");
		
	Запрос.УстановитьПараметр("Распоряжение", Заказ21Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивКлючей", КлючиЭтаповИзКоллекции(КоллекцияЭтапов));
	Запрос.УстановитьПараметр("СтатусСоздан", Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаЭтап = СтрокаЭтапаИзОписания(Заказ21Объект, Выборка.КлючСвязиПродукция, Выборка.КлючСвязи);
		
		ПолуфабрикатыКВозврату = ПолуфабрикатыКВозвратуКонструктор();
		
		СкорректироватьНазначениеПолуфабрикатовВМаршрутномЛисте(
					Выборка,
					СтрокаЭтап,
					Заказ21Объект,
					ПолуфабрикатыКВозврату);
		
		Если ПолуфабрикатыКВозврату.Количество() > 0 Тогда
			
			ПереместитьПолуфабрикатыВЦеховыеКладовые(
						ПолуфабрикатыКВозврату,
						СтрокаЭтап,
						Заказ21Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьНазначениеПолуфабрикатовВМаршрутномЛисте(Выборка, СтрокаЭтап, Заказ21Объект, ПолуфабрикатыКВозврату)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.МаршрутныйЛистПроизводства");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РаспоряженияНаВыпускПродукции");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Ссылка);
		
		Блокировка.Заблокировать();
		
		КоличествоКРаспределению = Новый Соответствие;
		
		Для каждого СтрокаПолуфабрикат Из ОписаниеПолуфабрикатовМаршрутногоЛиста(Выборка.Ссылка) Цикл
			
			КоличествоТребуется = (СтрокаПолуфабрикат.Количество / СтрокаЭтап.Количество21) * СтрокаЭтап.Количество21_22;
			КоличествоДоступно  = Мин(КоличествоТребуется, СтрокаПолуфабрикат.КОформлению);
			
			Если КоличествоДоступно > 0 Тогда
				КоличествоКРаспределению.Вставить(СтрокаПолуфабрикат.КодСтроки, КоличествоДоступно);
			КонецЕсли;
			
			КоличествоКВозврату = КоличествоТребуется - КоличествоДоступно;
			
			Если ТипЗнч(СтрокаПолуфабрикат.Получатель) <> Тип("СправочникСсылка.Склады")
				И КоличествоКВозврату > 0 Тогда
				
				ДобавитьПолуфабрикатКВозврату(
					ПолуфабрикатыКВозврату, 
					СтрокаПолуфабрикат,
					КоличествоКВозврату);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоКРаспределению.Количество() > 0 Тогда
			
			ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ТекущийОбъект = Неопределено 
				ИЛИ ТекущийОбъект.ВерсияДанных <> Выборка.ВерсияДанных Тогда
				
				ВызватьИсключение НСтр("ru = 'Действие не выполнено, так как документ 
					|был удален или изменен другим пользователем.';
					|en = 'Action is not executed as the document
					|was deleted or changed by another user.'");
				
			КонецЕсли;
			
			ДоляСтоимостиКоэффициент = 1;
			Если СтрокаЭтап.Количество21 <> СтрокаЭтап.Количество21_22 Тогда
				ДоляСтоимостиКоэффициент = НаименьшееОбщееКратноеВКоллекции(ТекущийОбъект.ВыходныеИзделия, "Количество");
			КонецЕсли;
			
			ОтборСерий = Новый Структура("Номенклатура, Характеристика, Назначение");
			
			Для Индекс = -ТекущийОбъект.ВыходныеИзделия.Количество() + 1 По 0 Цикл
				
				Строка21 = ТекущийОбъект.ВыходныеИзделия[-Индекс];
				Строка21.ДоляСтоимости = ?(Строка21.ДоляСтоимости > 0, Строка21.ДоляСтоимости, 1) * ДоляСтоимостиКоэффициент;
				
				Если КоличествоКРаспределению[Строка21.КодСтроки] <> Неопределено Тогда
					
					Если СтрокаЭтап.Количество21 <> СтрокаЭтап.Количество21_22 Тогда
						Строка22 = ТекущийОбъект.ВыходныеИзделия.Добавить();
						ЗаполнитьЗначенияСвойств(Строка22,Строка21,,"ПроизводитсяВПроцессе");
					Иначе
						Строка22 = Строка21;
					КонецЕсли;
					
					Строка22.КодСтроки = Неопределено;
					Строка22.АналитикаУчетаНоменклатуры = Неопределено;
					
					Строка22.Назначение = СтрокаЭтап.Родитель.НазначениеМатериалы22;
					Строка22.Получатель = ПолучательВыходныхИзделийДляПроизводства22(Строка22, Заказ21Объект, "Получатель", "Получатель");
					
					Если СтрокаЭтап.Количество21 <> СтрокаЭтап.Количество21_22 Тогда
						
						КоличествоКоэффициент = РаспределитьПолуфабрикат21и22(СтрокаЭтап, Строка21, Строка22, КоличествоКРаспределению);
						
						Строка21.КоличествоУпаковокОтклонение = Строка21.КоличествоУпаковокОтклонение * КоличествоКоэффициент;
						Строка22.КоличествоУпаковокОтклонение = Строка22.КоличествоУпаковокОтклонение - Строка21.КоличествоУпаковокОтклонение;
						
						Строка21.КоличествоОтклонение = Строка21.КоличествоОтклонение * КоличествоКоэффициент;
						Строка22.КоличествоОтклонение = Строка22.КоличествоОтклонение - Строка21.КоличествоОтклонение;
						
						Строка21.КоличествоУпаковокФакт = Строка21.КоличествоУпаковокФакт * КоличествоКоэффициент;
						Строка22.КоличествоУпаковокФакт = Строка22.КоличествоУпаковокФакт - Строка21.КоличествоУпаковокФакт;
						
						Строка21.КоличествоФакт = Строка21.КоличествоФакт * КоличествоКоэффициент;
						Строка22.КоличествоФакт = Строка22.КоличествоФакт - Строка21.КоличествоФакт;
					
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОтборСерий, Строка21);
					
					Для каждого СтрокаСерии21 Из ТекущийОбъект.ВыходныеИзделияСерии.НайтиСтроки(ОтборСерий) Цикл
						
						Если СтрокаЭтап.Количество21 <> СтрокаЭтап.Количество21_22 Тогда
							СтрокаСерии22 = ТекущийОбъект.ВыходныеИзделияСерии.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСерии22,СтрокаСерии21);
						Иначе
							СтрокаСерии22 = СтрокаСерии21;
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(
							СтрокаСерии22,
							Строка22,
							"Назначение,
							|Получатель");
						
						Если СтрокаЭтап.Количество21 <> СтрокаЭтап.Количество21_22 Тогда
							СтрокаСерии21.КоличествоФакт = СтрокаСерии21.КоличествоФакт * КоличествоКоэффициент;
							СтрокаСерии22.КоличествоФакт = СтрокаСерии22.КоличествоФакт - СтрокаСерии21.КоличествоФакт;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Конвертация незавершенных заказов на производство.Корректировка назначений в маршрутных листах';
				|en = 'Conversion of unfinished production orders. Adjustment of assignments in route sheets'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПереместитьПолуфабрикатыВЦеховыеКладовые(Полуфабрикаты, СтрокаЭтап, Заказ21Объект, ПерваяПопытка = Истина)
	
	Организация     = Заказ21Объект.Организация;
	Подразделение   = СтрокаЭтап.Подразделение;
	ЦеховаяКладовая = ЦеховаяКладоваяПодразделения(СтрокаЭтап.Подразделение, Заказ21Объект);
	СтатусПринято   = Перечисления.СтатусыВозвратовМатериаловИзПроизводства.Принято;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.МатериалыИРаботыВПроизводстве");
		
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("Подразделение", Подразделение);
		
		ЭлементБлокировки.ИсточникДанных = Полуфабрикаты;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Назначение", "Назначение");
		
		Блокировка.Заблокировать();
		
		ТекущийОбъект = Документы.ВозвратМатериаловИзПроизводства.СоздатьДокумент();
	
		РеквизитыШапки = Новый Структура();
		
		РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
		РеквизитыШапки.Вставить("Статус", СтатусПринято);
		РеквизитыШапки.Вставить("Организация", Организация);
		РеквизитыШапки.Вставить("Подразделение", Подразделение);
		РеквизитыШапки.Вставить("Склад", ЦеховаяКладовая);
		
		ДанныеЗаполнения = Новый Структура(
			"РеквизитыШапки, 
			|Товары",
			РеквизитыШапки,
			Полуфабрикаты);
		
		ТекущийОбъект.Заполнить(ДанныеЗаполнения);
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ТекущийОбъект, Документы.ВозвратМатериаловИзПроизводства));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ТекущийОбъект,ПараметрыУказанияСерий);
		
		Если ПерваяПопытка И ТекущийОбъект.ПроверитьЗаполнение()
			И ЕстьОстатокПолуфабрикатовВПроизводстве(ТекущийОбъект) Тогда
			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ДобавитьДокументВСписокКУточнению(
						СтрокаЭтап, 
						ТекущийОбъект.Ссылка);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Если ПерваяПопытка Тогда
			
			ПерваяПопытка = Ложь;
			
			ПереместитьПолуфабрикатыВЦеховыеКладовые(
						Полуфабрикаты,
						СтрокаЭтап,
						Заказ21Объект,
						ПерваяПопытка);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Конвертация незавершенных заказов на производство.Перемещение полуфабрикатов в цеховые кладовые';
				|en = 'Conversion of unfinished production orders. Transfer semi-finished products to shop storerooms'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

Процедура СкорректироватьЗаказМатериалов(Заказ21Объект)
	
	КоллекцияЭтапов = КолекцияЭтапов22ТребующихКорректировки(Заказ21Объект);
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаЭтап.Документ22);
			
			Блокировка.Заблокировать();
			
			Этап22Объект = СтрокаЭтап.Документ22.ПолучитьОбъект();
			Если Этап22Объект = Неопределено Тогда
				ТекстИсключения = НСтр("ru = 'Не удалось получить объект типа <ДокументОбъект.ЭтапПроизводства2_2>.';
										|en = 'Cannot receive an object of the <ДокументОбъект.ЭтапПроизводства2_2> type.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Этап22Объект.Статус = СтатусЭтапаШаг2();
			
			ОтменитьЗаказМатериаловПоЭтапу21(
						Заказ21Объект,
						СтрокаЭтап.КлючСвязиПродукция,
						СтрокаЭтап.КлючСвязи);
				
			Если СтрокаЭтап.ТребуетсяКорректировкаНазначения
				И СтрокаЭтап.НазначениеМатериалы <> СтрокаЭтап.НазначениеМатериалы22 Тогда
				
				УточитьОбеспечениеОбособленныхМатериалов(
							Этап22Объект, 
							СтрокаЭтап, 
							Заказ21Объект);
				
			КонецЕсли;
			
			Этап22Объект.КомментарийПриКонвертации = КомментарийКЭтапуПроизводства(СтрокаЭтап);
			
			Этап22Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Конвертация незавершенных заказов на производство.Корректировка заказа материалов';
					|en = 'Conversion of unfinished production orders. Order for materials adjustment'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбособленныеМатериалыЭтапа(Этап22Объект, СтрокаЭтап, Заказ21Объект)
	
	ОбособленныеМатериалы = Этап22Объект.ОбеспечениеМатериаламиИРаботами.ВыгрузитьКолонки(
												"Номенклатура,
												|Характеристика,
												|Склад,
												|Количество");
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	ОбособленныеМатериалы.Колонки.Добавить("Назначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОбособленныеМатериалы.Колонки.Добавить("Подразделение",ОписаниеТипов);
	
	ОбособленныеМатериалы.Колонки.Добавить("СтрокаТЧ");
	
	Для каждого СтрокаМатериал Из Этап22Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если НЕ СтрокаМатериал.Обособленно ИЛИ СтрокаМатериал.Производится ИЛИ ЭтоРабота(СтрокаМатериал.Номенклатура, Заказ21Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОбособленныеМатериалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериал);
		
		НоваяСтрока.Назначение    = СтрокаЭтап.НазначениеМатериалы;
		НоваяСтрока.Подразделение = СтрокаЭтап.Подразделение;
		
		НоваяСтрока.СтрокаТЧ = СтрокаМатериал;
		
	КонецЦикла;
	
	Возврат ОбособленныеМатериалы;

КонецФункции

Процедура ЗаблокироватьРегистрыОбеспеченияПотребностей(Материалы)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РаспределениеЗапасов");
	ЭлементБлокировки.ИсточникДанных = Материалы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");

	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗапасыИПотребности");
	ЭлементБлокировки.ИсточникДанных = Материалы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ОтменитьЗаказМатериаловПоЭтапу21(Заказ21Объект, КлючСвязиПродукция, КлючСвязиЭтапы)
	
	КорректировкиЗаказаМатериалов     = Заказ21Объект.ДополнительныеСвойства.КорректировкиЗаказаМатериалов;
	ПараметрыРедактированияМатериалов = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ПараметрыРедактированияМатериалов;
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,КлючСвязиЭтапы");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка;
	ОтборЭтапы.КлючСвязиПродукция = КлючСвязиПродукция;
	ОтборЭтапы.КлючСвязиЭтапы = КлючСвязиЭтапы;
	
	МассивСтрок = КорректировкиЗаказаМатериалов.НайтиСтроки(ОтборЭтапы);
	
	МатериалыИУслуги = КорректировкиЗаказаМатериалов.Скопировать(МассивСтрок);
	Обработки.ВводКорректировкиЗаказаМатериалов.СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(
				Заказ21Объект, 
				ПараметрыРедактированияМатериалов, 
				МассивСтрок);
	
	Для каждого Строка Из МассивСтрок Цикл
		КорректировкиЗаказаМатериалов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УточитьКоличествоПолуфабрикатаКПроизводству(Заказ21Объект, Строка22, СтрокаЭтап)
	
	СтрокаЭтапВыпуска = СтрокаЭтапаВыпускаИзОписания(Заказ21Объект, СтрокаЭтап.КлючСвязиПродукция, СтрокаЭтап.КлючСвязи);
	
	Если СтрокаЭтапВыпуска <> Неопределено
		И СтрокаЭтапВыпуска.Количество21_22 > 0 Тогда
		
		Если СтрокаЭтапВыпуска.Количество22 <> 0 Тогда
			Строка21 = Строка22.Владелец().Добавить();
			ЗаполнитьЗначенияСвойств(Строка21,Строка22);
		Иначе
			Строка21 = Строка22;
		КонецЕсли;
		
		Строка21.Производится = Ложь;
		Строка21.Спецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
		
		Строка21.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
		Строка21.ИсточникПолученияПолуфабриката = Справочники.РесурсныеСпецификации.ПустаяСсылка();
		
		Если СтрокаЭтапВыпуска.Количество22 <> 0 Тогда
		
			Строка21.Количество = Строка21.Количество * СтрокаЭтапВыпуска.Количество21_22/(СтрокаЭтапВыпуска.Количество22 + СтрокаЭтапВыпуска.Количество21_22);
			ПересчитатьКоличествоУпаковокВСтроке(Строка21);
			
			Строка22.Количество = Строка22.Количество - Строка21.Количество;
			ПересчитатьКоличествоУпаковокВСтроке(Строка22);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьОбеспечениеДляОтгруженныхМатериалов(Заказ21Объект, ТекущаяСтрока, ДанныеСтроки, СтрокаЭтап)
	
	Если ЭтоРабота(ТекущаяСтрока.Номенклатура, Заказ21Объект) Тогда
		
		Если ДанныеСтроки.Обособленно Тогда
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		Иначе
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.КоличествоОсталосьОтгрузить > 0 Тогда
		
		КоличествоОтгружено22 = Макс(ДанныеСтроки.КоличествоОтгружено - РассчитатьКоличество21(ДанныеСтроки, СтрокаЭтап), 0);
		
		Если КоличествоОтгружено22 > 0 Тогда
			
			НоваяСтрока = ТекущаяСтрока.Владелец().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
			
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
			ТекущаяСтрока.Количество = ТекущаяСтрока.Количество - КоличествоОтгружено22;
			ПересчитатьКоличествоУпаковокВСтроке(ТекущаяСтрока);
			
			НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
			НоваяСтрока.Количество = КоличествоОтгружено22;
			ПересчитатьКоличествоУпаковокВСтроке(НоваяСтрока);
			
		Иначе
			
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаказаноОбособленно21(ТаблицаТовары)
	
	Запрос = Новый Запрос();
	Тексты = Новый Массив();
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение";
	Тексты.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.Склад КАК Склад,
		|	Запасы.ВНаличииОстаток
		|		+ Запасы.ЗаказаноОстаток
		|		- Запасы.РезервироватьНаСкладеОстаток
		|		- Запасы.РезервироватьПоМереПоступленияОстаток
		|		- Запасы.ОтложитьРезервированиеОстаток
		|		- Запасы.КОбеспечениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		(Номенклатура, Характеристика, Склад, Назначение) В(
		|			ВЫБРАТЬ
		|				Таблица.Номенклатура КАК Номенклатура,
		|				Таблица.Характеристика КАК Характеристика,
		|				Таблица.Склад КАК Склад,
		|				Таблица.Назначение КАК Назначение
		|			ИЗ
		|				ВТТовары КАК Таблица
		|			ГДЕ
		|				Таблица.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))) КАК Запасы
		|ГДЕ
		|	Запасы.ВНаличииОстаток
		|		+ Запасы.ЗаказаноОстаток
		|		- Запасы.РезервироватьНаСкладеОстаток
		|		- Запасы.РезервироватьПоМереПоступленияОстаток
		|		- Запасы.ОтложитьРезервированиеОстаток
		|		- Запасы.КОбеспечениюОстаток > 0";
	Тексты.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УточитьОбеспечениеОбособленныхМатериалов(Этап22Объект, СтрокаЭтап, Заказ21Объект)
	
	ОбособленныеМатериалы = ОбособленныеМатериалыЭтапа(Этап22Объект, СтрокаЭтап, Заказ21Объект);
	
	ЗаблокироватьРегистрыОбеспеченияПотребностей(ОбособленныеМатериалы);
	
	ЗаказаноОбособленно21 = ЗаказаноОбособленно21(ОбособленныеМатериалы);
	Если ЗаказаноОбособленно21.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборЗаказано = Новый Структура("Номенклатура,Характеристика,Склад");
	
	ДоступноПроведение     = Истина;
	МассивСтрокНеТребуется = Новый Массив;
	
	КорректировкиНазначения = ТаблицаКорректировкаНазначенияКонструктор();
	
	Для каждого СтрокаМатериал Из ОбособленныеМатериалы Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборЗаказано, СтрокаМатериал);
		
		СтрокиЗаказано = ЗаказаноОбособленно21.НайтиСтроки(ОтборЗаказано);
		Если СтрокиЗаказано.ВГраница() = -1 Тогда
			Продолжить;
		КонецЕсли;
		
		ПотребностьЗаказано = Мин(СтрокаМатериал.Количество, СтрокиЗаказано[0].Количество);
		Если ПотребностьЗаказано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаМатериал.Количество <> ПотребностьЗаказано Тогда
			
			СтрокаПотребность = СтрокаМатериал.СтрокаТЧ;
			СтрокаНеТребуется = Этап22Объект.ОбеспечениеМатериаламиИРаботами.Вставить(
								Этап22Объект.ОбеспечениеМатериаламиИРаботами.Индекс(СтрокаПотребность));
		
			ЗаполнитьЗначенияСвойств(СтрокаНеТребуется, СтрокаПотребность,,"КодСтроки");
			
			СтрокаНеТребуется.Количество = ПотребностьЗаказано;
			ПересчитатьКоличествоУпаковокВСтроке(СтрокаНеТребуется);
			
			СтрокаПотребность.Количество = СтрокаПотребность.Количество - ПотребностьЗаказано;
			ПересчитатьКоличествоУпаковокВСтроке(СтрокаПотребность);
			
		Иначе
			
			СтрокаНеТребуется = СтрокаМатериал.СтрокаТЧ;
			
		КонецЕсли;
		
		СтрокаНеТребуется.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
		МассивСтрокНеТребуется.Добавить(СтрокаНеТребуется);
		
		НоваяКорректировка = КорректировкиНазначения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяКорректировка, СтрокаНеТребуется);
		
		НоваяКорректировка.ИсходноеНазначение = СтрокаЭтап.НазначениеМатериалы;
		НоваяКорректировка.НовоеНазначение    = СтрокаЭтап.НазначениеМатериалы22;
		
		СтрокиЗаказано[0].Количество = СтрокиЗаказано[0].Количество - ПотребностьЗаказано;
		
		ДоступноПроведение = ДоступноПроведение И ЭтоМатериалПроизводимыйВПроцессе(СтрокаНеТребуется, Заказ21Объект);
		
	КонецЦикла;
	
	Если КорректировкиНазначения.Количество() > 0 Тогда
		
		Если СкорректироватьНазначениеМатериалов(
					Этап22Объект,
					СтрокаЭтап,
					КорректировкиНазначения,
					ДоступноПроведение) Тогда
			
			Для каждого Строка Из МассивСтрокНеТребуется Цикл
				
				Строка.Обособленно = Истина;
				Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаКорректировкаНазначенияКонструктор()
	
	Таблица = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Таблица.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Таблица.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Таблица.Колонки.Добавить("НовоеНазначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Таблица.Колонки.Добавить("ИсходноеНазначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Склады");
	Таблица.Колонки.Добавить("Склад",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	Таблица.Колонки.Добавить("Упаковка",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	Таблица.Колонки.Добавить("КоличествоУпаковок",ОписаниеТипов);
	Таблица.Колонки.Добавить("Количество",        ОписаниеТипов);
	
	Возврат Таблица;
	
КонецФункции

Функция СкорректироватьНазначениеМатериалов(Этап22Объект, СтрокаЭтап, ТаблицаТоваров, ПерваяПопытка)
	
	ТекущийОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	
	РеквизитыШапки = Новый Структура();
	
	РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
	РеквизитыШапки.Вставить("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений);
	РеквизитыШапки.Вставить("Организация", Этап22Объект.Организация);
	
	ДанныеЗаполнения = Новый Структура(
		"РеквизитыШапки, 
		|Товары",
		РеквизитыШапки,
		ТаблицаТоваров);
	
	ТекущийОбъект.Заполнить(ДанныеЗаполнения);
	
	Если ПерваяПопытка И ТекущийОбъект.ПроверитьЗаполнение()
		И ЕстьОстатокОбособленногоТовара(ТаблицаТоваров) Тогда
		
		ТекущийОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Иначе
		
		ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ДобавитьДокументВСписокКУточнению(
					СтрокаЭтап, 
					ТекущийОбъект.Ссылка);
		
	КонецЕсли;
	
	Возврат ТекущийОбъект.Проведен;
	
КонецФункции

Функция ПолуфабрикатыКВозвратуКонструктор()
	
	Результат = Новый ТаблицаЗначений();
	
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Назначение");
	
	Результат.Колонки.Добавить("Упаковка");
	Результат.Колонки.Добавить("КоличествоУпаковок");
	Результат.Колонки.Добавить("Количество");
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьПолуфабрикатКВозврату(Таблица, Строка, Количество)
	
	НоваяСтрока = Таблица.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	
	НоваяСтрока.Количество = Количество;
	ПересчитатьКоличествоУпаковокВСтроке(НоваяСтрока);
	
КонецФункции

Процедура ДобавитьДокументВСписокКУточнению(СтрокаЭтап, Ссылка)
	
	Если СтрокаЭтап.ДокументыКУточнению <> Неопределено Тогда
		СтрокаЭтап.ДокументыКУточнению.Добавить(Ссылка);
	КонецЕсли;
	
	СтрокаЭтап.ДокументыКУточнению = ОбщегоНазначенияУТКлиентСервер.Массив(Ссылка);
	
КонецПроцедуры

Функция ОписаниеПолуфабрикатовМаршрутногоЛиста(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТВыходныеИзделия.Ссылка         КАК Ссылка,
		|	ТВыходныеИзделия.КодСтроки      КАК КодСтроки,
		|	ТВыходныеИзделия.Номенклатура   КАК Номенклатура,
		|	ТВыходныеИзделия.Характеристика КАК Характеристика,
		|	ТВыходныеИзделия.Назначение     КАК Назначение,
		|	ТВыходныеИзделия.Получатель     КАК Получатель,
		|	СУММА(ТВыходныеИзделия.Количество)                         КАК Количество,
		|	СУММА(ЕСТЬNULL(ОстаткиРаспоряжения.КОформлениюОстаток, 0)) КАК КОформлению
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТВыходныеИзделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(, Распоряжение = &Ссылка) КАК ОстаткиРаспоряжения
		|		ПО ТВыходныеИзделия.Ссылка = ОстаткиРаспоряжения.Распоряжение
		|			И ТВыходныеИзделия.КодСтроки = ОстаткиРаспоряжения.КодСтроки
		|ГДЕ
		|	ТВыходныеИзделия.Ссылка = &Ссылка
		|	И ТВыходныеИзделия.ПроизводитсяВПроцессе
		|
		|СГРУППИРОВАТЬ ПО
		|	ТВыходныеИзделия.Ссылка,
		|	ТВыходныеИзделия.КодСтроки,
		|	ТВыходныеИзделия.Номенклатура,
		|	ТВыходныеИзделия.Характеристика,
		|	ТВыходныеИзделия.Назначение,
		|	ТВыходныеИзделия.Получатель");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЕстьОстатокПолуфабрикатовВПроизводстве(ТекущийОбъект)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	(ВЫБРАТЬ
		|		МатериалыИРаботыВПроизводстве.Номенклатура КАК Номенклатура,
		|		МатериалыИРаботыВПроизводстве.Характеристика КАК Характеристика,
		|		МатериалыИРаботыВПроизводстве.Назначение КАК Назначение,
		|		МатериалыИРаботыВПроизводстве.КоличествоОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
		|				,
		|				Организация = &Организация
		|					И Подразделение = &Подразделение
		|					И (Номенклатура, Характеристика, Назначение) В
		|						(ВЫБРАТЬ
		|							Т.Номенклатура,
		|							Т.Характеристика,
		|							Т.Назначение
		|						ИЗ
		|							ВТТовары КАК Т)) КАК МатериалыИРаботыВПроизводстве
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Товары.Номенклатура,
		|		Товары.Характеристика,
		|		Товары.Назначение,
		|		-Товары.Количество
		|	ИЗ
		|		втТовары КАК Товары) КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(Таблица.Количество) < 0");
		
	ТаблицаТовары = ТекущийОбъект.Товары.Выгрузить(,"Номенклатура,Характеристика,Назначение,Количество");
	
	Запрос.УстановитьПараметр("Организация",   ТекущийОбъект.Организация);
	Запрос.УстановитьПараметр("Подразделение", ТекущийОбъект.Подразделение);
	Запрос.УстановитьПараметр("Товары",        ТаблицаТовары);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьОстатокОбособленногоТовара(ТаблицаТоваров)
	
	Запрос = Новый Запрос();
	
	Тексты = Новый Массив();
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.ИсходноеНазначение КАК Назначение,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|//////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.Назначение КАК Назначение
		|ПОМЕСТИТЬ РазличныеТовары
		|ИЗ
		|	втТовары КАК Товары
		|ГДЕ
		|	Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = ОбеспечениеВДокументахСервер.ВременнаяТаблицаСвободныеОстатки("РазличныеТовары", "ТаблицаОстатков");
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ(
		|	ВЫБРАТЬ
		|		Запасы.Номенклатура КАК Номенклатура,
		|		Запасы.Характеристика КАК Характеристика,
		|		Запасы.Склад КАК Склад,
		|		Запасы.Назначение КАК Назначение,
		|		Запасы.Количество КАК Количество
		|	ИЗ
		|		ТаблицаОстатков КАК Запасы
		|	ГДЕ
		|		Запасы.Количество > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Товары.Номенклатура,
		|		Товары.Характеристика,
		|		Товары.Склад,
		|		Товары.Назначение,
		|		-Товары.Количество
		|	ИЗ
		|		втТовары КАК Товары
		|ГДЕ
		|	Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Склад,
		|	Таблица.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Таблица.Количество) < 0";
	Тексты.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

#Область Заполнение

Функция ОписаниеПроизводственногоПроцесса(ВыбранныеСтроки)
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КлючиПродукции = КлючиПродукцииВыбранныхСтрок(ВыбранныеСтроки);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КодыСтрокПродукции.Ссылка КАК Ссылка,
		|	КодыСтрокПродукции.КодСтроки КАК КодСтроки,
		|	КодыСтрокПродукции.Полуфабрикат КАК Полуфабрикат
		|ПОМЕСТИТЬ ВТКодыСтрокПродукции
		|ИЗ
		|	&КлючиПродукции КАК КодыСтрокПродукции
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТКодыСтрокПродукции.Ссылка КАК Ссылка,
		|	ТКодыСтрокПродукции.КодСтроки КАК КодСтроки,
		|	ТПродукция.КлючСвязи КАК КлючСвязи,
		|	ТКодыСтрокПродукции.Полуфабрикат КАК Полуфабрикат
		|ПОМЕСТИТЬ ВТКлючиПродукции
		|ИЗ
		|	ВТКодыСтрокПродукции КАК ТКодыСтрокПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
		|		ПО ТКодыСтрокПродукции.Ссылка = ТПродукция.Ссылка
		|			И ТКодыСтрокПродукции.КодСтроки = ТПродукция.КодСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	КлючСвязи,
		|	КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЭтапы.Ссылка КАК Ссылка,
		|	ТЭтапы.КлючСвязи КАК КлючСвязи,
		|	ТЭтапы.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
		|	ТЭтапы.КлючСвязиПродукция КАК КлючСвязиПродукция,
		|	ТЭтапы.КлючСвязиПолуфабрикат КАК КлючСвязиПолуфабрикат,
		|	ВЫБОР
		|		КОГДА ТЭтапы.КлючСвязиПолуфабрикат = &ПустойКлюч
		|				И ТКлючиПродукции.Полуфабрикат
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтапВыпускаПолуфабрикатаВЗаказе,
		|	ТЭтапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	0 КАК КодЭтапа,
		|	ТЭтапы.НомерЭтапа КАК НомерЭтапа,
		|	ТЭтапы.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
		|	МАКСИМУМ(ТЭтапы.Количество) КАК Запланировано,
		|	МАКСИМУМ(ТЭтапы.КоличествоЭтаповНаЕдиницуСледующегоЭтапа) КАК КоличествоЭтаповНаЕдиницуСледующегоЭтапа,
		|	МАКСИМУМ(ТЭтапы.Количество) - СУММА(ЕСТЬNULL(ВыполнениеЭтапов.КВыполнению + ВыполнениеЭтапов.Выполнено, 0)) КАК Осталось,
		|	СУММА(ЕСТЬNULL(ВыполнениеЭтапов.Брак, 0)) КАК Брак
		|ИЗ
		|	ВТКлючиПродукции КАК ТКлючиПродукции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТЭтапы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства КАК ВыполнениеЭтапов
		|				ПО ТЭтапыГрафик.Ссылка = ВыполнениеЭтапов.Распоряжение
		|					И ТЭтапыГрафик.КодСтроки = ВыполнениеЭтапов.КодСтрокиЭтапыГрафик
		|			ПО ТЭтапы.Ссылка = ТЭтапыГрафик.Ссылка
		|				И ТЭтапы.КлючСвязи = ТЭтапыГрафик.КлючСвязиЭтапы
		|		ПО ТКлючиПродукции.Ссылка = ТЭтапы.Ссылка
		|			И ТКлючиПродукции.КлючСвязи = ТЭтапы.КлючСвязиПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЭтапы.Ссылка,
		|	ТЭтапы.КлючСвязи,
		|	ТЭтапы.КлючСвязиЭтапы,
		|	ТЭтапы.КлючСвязиПродукция,
		|	ТЭтапы.КлючСвязиПолуфабрикат,
		|	ВЫБОР
		|		КОГДА ТЭтапы.КлючСвязиПолуфабрикат = &ПустойКлюч
		|				И ТКлючиПродукции.Полуфабрикат
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТЭтапы.ПроизводствоНаСтороне,
		|	ТЭтапы.НомерЭтапа,
		|	ТЭтапы.НомерСледующегоЭтапа
		|
		|УПОРЯДОЧИТЬ ПО
		|	МИНИМУМ(ЕСТЬNULL(ТЭтапыГрафик.НачалоПредварительногоБуфера, ДАТАВРЕМЯ(1, 1, 1))),
		|	ТЭтапы.НомерЭтапа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТКлючиПродукции.Ссылка КАК Ссылка,
		|	ТВыходныеИзделия.КлючСвязиПродукция КАК КлючСвязиПродукция,
		|	ТМатериалыИУслуги.КлючСвязи КАК КлючСвязиПолуфабрикат,
		|	ТМатериалыИУслуги.КлючСвязиЭтапы КАК КлючСвязиЭтапПотребляющийПолуфабрикат,
		|	ТМатериалыИУслуги.ИсточникПолученияПолуфабриката КАК Спецификация
		|ИЗ
		|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТВыходныеИзделия
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючиПродукции КАК ТКлючиПродукции
		|			ПО ТВыходныеИзделия.Ссылка = ТКлючиПродукции.Ссылка
		|				И ТВыходныеИзделия.КлючСвязиПродукция = ТКлючиПродукции.КлючСвязи
		|		ПО (ТВыходныеИзделия.КлючСвязиПолуфабрикат = ТМатериалыИУслуги.КлючСвязи)
		|			И (ТВыходныеИзделия.ПроизводитсяВПроцессе)
		|			И (ТВыходныеИзделия.Ссылка = ТМатериалыИУслуги.Ссылка)
		|			И (ТВыходныеИзделия.КлючСвязиПродукция = ТМатериалыИУслуги.КлючСвязиПродукция)
		|ГДЕ
		|	ТМатериалыИУслуги.ПроизводитсяВПроцессе
		|	И ТМатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТПродукция.Ссылка,
		|	ТПродукция.КлючСвязи,
		|	&ПустойКлюч,
		|	ТМатериалыИУслуги.КлючСвязиЭтапы,
		|	ТПродукция.Спецификация
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючиПродукции КАК КлючиПродукции
		|		ПО ТПродукция.Ссылка = КлючиПродукции.Ссылка
		|			И ТПродукция.КлючСвязиПродукция = КлючиПродукции.КлючСвязи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
		|		ПО ТПродукция.Ссылка = ТМатериалыИУслуги.Ссылка
		|			И ТПродукция.КлючСвязиМатериалыИУслуги = ТМатериалыИУслуги.КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиПродукции.Ссылка КАК Ссылка,
		|	КлючиПродукции.КодСтроки КАК КодСтроки,
		|	КлючиПродукции.КлючСвязи КАК КлючСвязиПродукция
		|ИЗ
		|	ВТКлючиПродукции КАК КлючиПродукции");
	
	Запрос.УстановитьПараметр("КлючиПродукции", КлючиПродукции);
	Запрос.УстановитьПараметр("ПустойКлюч", ПустойКлюч);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	// Этапы
	
	ТаблицаЭтапов = РезультатЗапроса[КоличествоПакетов-3].Выгрузить();
	
	Для Индекс = 0 По ТаблицаЭтапов.Количество() - 1 Цикл
		ТаблицаЭтапов[Индекс].КодЭтапа = Индекс + 1;
	КонецЦикла;
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаЭтапов.Колонки.Добавить("Количество22",    ОписаниеТипов);
	ТаблицаЭтапов.Колонки.Добавить("Количество21",    ОписаниеТипов);
	ТаблицаЭтапов.Колонки.Добавить("Количество21_22", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ТаблицаЭтапов.Колонки.Добавить("ВыпускающийЭтап",     ОписаниеТипов);
	ТаблицаЭтапов.Колонки.Добавить("КонвертацияДоступна", ОписаниеТипов);
	ТаблицаЭтапов.Колонки.Добавить("ЭтапНаГранице",       ОписаниеТипов);
	
	ТаблицаЭтапов.Колонки.Добавить("Родитель");
	
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,КлючСвязиПродукция");
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,КлючСвязиПродукция,КлючСвязи");
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,КлючСвязиПродукция,КлючСвязиЭтапы");
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,КлючСвязиПродукция,КлючСвязиПолуфабрикат");
	
	// Полуфабрикаты
	
	ТаблицаПолуфабрикатов = РезультатЗапроса[КоличествоПакетов-2].Выгрузить();
	ТаблицаПолуфабрикатов.Индексы.Добавить("Ссылка,КлючСвязиЭтапПотребляющийПолуфабрикат");
	
	// Расчет доступного количества этапов
	
	Выборка = РезультатЗапроса[КоличествоПакетов-1].Выбрать();
	
	Результат = Новый Структура("КлючиПродукции,ТаблицаЭтапов,ТаблицаПолуфабрикатов");
	Результат.КлючиПродукции        = КлючиПродукции;
	Результат.ТаблицаЭтапов         = ТаблицаЭтапов;
	Результат.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
	
	КлючСвязиЭтапы = Новый Структура("
			|Ссылка,
			|КлючСвязиПродукция,
			|КлючСвязиПолуфабрикат");
		
	КлючСвязиЭтапы.КлючСвязиПолуфабрикат = ПустойКлюч;
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(КлючСвязиЭтапы, Выборка);
		
		РассчитатьКоличествоЭтапов(
				КлючСвязиЭтапы, 
				Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьКоличествоЭтапов(Знач КлючСвязиЭтапы, ОписаниеПроизводственногоПроцесса, СтрокаРодитель = Неопределено)
	
	ТаблицаЭтапов         = ОписаниеПроизводственногоПроцесса.ТаблицаЭтапов;
	ТаблицаПолуфабрикатов = ОписаниеПроизводственногоПроцесса.ТаблицаПолуфабрикатов;
	
	КоллекцияЭтапов = ТаблицаЭтапов.НайтиСтроки(КлючСвязиЭтапы);
	
	КоличествоДоступно = -1;
	КоличествоВыпускающихЭтапов = 0;
	КонвертацияНедоступна = Ложь;
	Если СтрокаРодитель = Неопределено
		ИЛИ СтрокаРодитель.КонвертацияДоступна Тогда
		Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
			Если СтрокаЭтап.НомерСледующегоЭтапа = 0 Тогда
				КоличествоВыпускающихЭтапов = КоличествоВыпускающихЭтапов + 1;
				СтрокаЭтап.ВыпускающийЭтап  = Истина;
			КонецЕсли;
			Если СтрокаЭтап.Брак <> 0 
				ИЛИ СтрокаЭтап.ПроизводствоНаСтороне
				ИЛИ КоличествоВыпускающихЭтапов > 1 Тогда
				КонвертацияНедоступна = Истина;
			КонецЕсли;
			Если СтрокаЭтап.ЭтапВыпускаПолуфабрикатаВЗаказе
				И СтрокаЭтап.Осталось <> СтрокаЭтап.Запланировано Тогда
				КонвертацияНедоступна = Истина;
			КонецЕсли;
			Если КоличествоДоступно <> -1 Тогда
				КоличествоДоступно = Мин(СтрокаЭтап.Осталось,КоличествоДоступно);
			Иначе
				КоличествоДоступно = СтрокаЭтап.Осталось;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоВыпускающихЭтапов <> 1
		ИЛИ КонвертацияНедоступна Тогда
		КоличествоДоступно = -1;
	КонецЕсли;
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		СтрокаЭтап.Родитель = СтрокаРодитель;
		
		СтрокаЭтап.Количество21    = СтрокаЭтап.Запланировано - КоличествоДоступно;
		СтрокаЭтап.Количество22    = КоличествоДоступно;
		СтрокаЭтап.Количество21_22 = ?(
				СтрокаЭтап.ВыпускающийЭтап
					И СтрокаРодитель <> Неопределено
					И СтрокаРодитель.КонвертацияДоступна,
				СтрокаЭтап.Количество21 - СтрокаРодитель.Количество21 
					* СтрокаЭтап.КоличествоЭтаповНаЕдиницуСледующегоЭтапа,
				0);
		СтрокаЭтап.КонвертацияДоступна = КоличествоДоступно > 0;
		СтрокаЭтап.ЭтапНаГранице       = СтрокаЭтап.Количество21_22 > 0;
		
		КлючСвязиПолуфабрикаты = Новый Структура;
		КлючСвязиПолуфабрикаты.Вставить("Ссылка", СтрокаЭтап.Ссылка);
		КлючСвязиПолуфабрикаты.Вставить("КлючСвязиЭтапПотребляющийПолуфабрикат", СтрокаЭтап.КлючСвязи);
		
		КоллекцияПолуфабрикатов = ТаблицаПолуфабрикатов.НайтиСтроки(КлючСвязиПолуфабрикаты);
		
		Для каждого СтрокаПолуфабрикат Из КоллекцияПолуфабрикатов Цикл
			
			КлючСвязиЭтапы = Новый Структура("
				|Ссылка,
				|КлючСвязиПродукция,
				|КлючСвязиПолуфабрикат");
			
			ЗаполнитьЗначенияСвойств(КлючСвязиЭтапы, СтрокаПолуфабрикат);
			
			РассчитатьКоличествоЭтапов(
					КлючСвязиЭтапы,
					ОписаниеПроизводственногоПроцесса,
					СтрокаЭтап);
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеПроизводственногоПроцессаПоЗаказу21(Заказ21Объект, ОтмеченныеСтроки)
	
	ОписаниеПроизводственногоПроцесса = ОписаниеПроизводственногоПроцесса(ОтмеченныеСтроки);
	
	ОписаниеПроизводственногоПроцесса.Вставить(
		"ОбособленнаяПродукцияЗаказа", 
		ОбособленнаяПродукцияЗаказа21(
			Заказ21Объект));
	
	ОписаниеПроизводственногоПроцесса.Вставить(
		"ЗаказМатериалов", 
		ЗаказМатериаловПоЗаказу21(
			ОтмеченныеСтроки,
			ОписаниеПроизводственногоПроцесса));
	
	ДополнитьТаблицуЭтаповДаннымиСпецификацииЗаказа(
		ОписаниеПроизводственногоПроцесса, 
		Заказ21Объект);
	
	ОписаниеПроизводственногоПроцесса.Вставить(
		"ЦеховыеКладовыеПодразделений", 
		ЦеховыеКладовыеПодразделенийЗаказа(
			ОписаниеПроизводственногоПроцесса, 
			Заказ21Объект));
	
	ОписаниеПроизводственногоПроцесса.Вставить(
		"РеквизитыНоменклатуры", 
		РеквизитыНоменклатурыЗаказа(
			ОписаниеПроизводственногоПроцесса,
			Заказ21Объект));
	
	ОписаниеПроизводственногоПроцесса.Вставить(
		"ПараметрыРедактированияМатериалов",
		ПараметрыРедактированияМатериалов21());
	
	Возврат ОписаниеПроизводственногоПроцесса;
	
КонецФункции

Процедура ОчиститьДанныеЭтаповВОписании(Заказ21Объект, КлючСвязиПродукция)
	
	ТаблицаЭтапов = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ТаблицаЭтапов;
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка;
	ОтборЭтапы.КлючСвязиПродукция = КлючСвязиПродукция;
	
	КоллекцияЭтапов = ТаблицаЭтапов.НайтиСтроки(ОтборЭтапы);
	
	Для каждого ЭлементКоллекции Из КоллекцияЭтапов Цикл
		
		ЭлементКоллекции.ДанныеЭтапа = Неопределено;
		
	КонецЦикла;

КонецПроцедуры

Функция ОбособленнаяПродукцияЗаказа21(Заказ21Объект)
	
	Результат = Заказ21Объект.Продукция.ВыгрузитьКолонки(
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Назначение");
		
	Для каждого Строка Из Заказ21Объект.Продукция Цикл
		Если Строка.Назначение.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;
	
	Результат.Индексы.Добавить(
		"КлючСвязи,
		|Номенклатура,
		|Характеристика");
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыРедактированияМатериалов21()
	
	Возврат Обработки.ВводКорректировкиЗаказаМатериалов.ПараметрыРедактированияМатериалов(Новый УникальныйИдентификатор);
	
КонецФункции

Функция ЗаказМатериаловПоЗаказу21(ОтмеченныеСтроки, ОписаниеПроизводственногоПроцесса)
	
	ВводКорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.Создать();
	
	Для каждого ТекущаяСтрока Из ОтмеченныеСтроки Цикл
		
		Для каждого КлючСвязи Из КлючиСвязиПродукцииИПолуфабрикатов(
										ТекущаяСтрока.Ссылка,
										ТекущаяСтрока.КлючСвязи,
										ОписаниеПроизводственногоПроцесса) Цикл
			
			ВводКорректировкиЗаказаМатериалов.ЗаполнитьВводКорректировкиСпецификацииЗаказа(
				ТекущаяСтрока.Ссылка, КлючСвязи, Ложь, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = ВводКорректировкиЗаказаМатериалов.МатериалыИУслуги.Выгрузить();
	Результат.Индексы.Добавить("Ссылка,КлючСвязиПродукция,КлючСвязиЭтапы");
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьТаблицуЭтаповДаннымиСпецификацииЗаказа(ОписаниеПроизводственногоПроцесса, Заказ21Объект)
	
	ТаблицаЭтапов = ОписаниеПроизводственногоПроцесса.ТаблицаЭтапов;
	
	ТаблицаЭтапов.Колонки.Добавить("ДанныеЭтапа");
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ТаблицаЭтапов.Колонки.Добавить("Подразделение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	ТаблицаЭтапов.Колонки.Добавить("Документ22", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	ТаблицаЭтапов.Колонки.Добавить("Назначение22",         ОписаниеТипов);
	ТаблицаЭтапов.Колонки.Добавить("НазначениеМатериалы",  ОписаниеТипов);
	ТаблицаЭтапов.Колонки.Добавить("НазначениеМатериалы22",ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	ТаблицаЭтапов.Колонки.Добавить("ТребуетсяКорректировкаЗаказаМатериалов",ОписаниеТипов);
	ТаблицаЭтапов.Колонки.Добавить("ТребуетсяКорректировкаНазначения",      ОписаниеТипов);
	
	ТаблицаЭтапов.Колонки.Добавить("ДокументыКУточнению");

	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,КлючСвязи");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка;
	
	Для каждого ДанныеЭтапа Из Заказ21Объект.Этапы Цикл
		
		ОтборЭтапы.КлючСвязиПродукция = ДанныеЭтапа.КлючСвязиПродукция;
		ОтборЭтапы.КлючСвязи          = ДанныеЭтапа.КлючСвязи;
		
		Для каждого СтрокаЭтап Из ТаблицаЭтапов.НайтиСтроки(ОтборЭтапы) Цикл
			
			СтрокаЭтап.ДанныеЭтапа   = ДанныеЭтапа;
			СтрокаЭтап.Подразделение = ДанныеЭтапа.Подразделение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,ЭтапНаГранице");
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,КлючСвязиПродукция,ЭтапНаГранице");
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,КлючСвязиПродукция,КонвертацияДоступна");
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,КлючСвязиПродукция,КлючСвязиПолуфабрикат,КонвертацияДоступна");
	ТаблицаЭтапов.Индексы.Добавить("Ссылка,ТребуетсяКорректировкаЗаказаМатериалов");
	
КонецПроцедуры

Функция РеквизитыНоменклатурыЗаказа(ОписаниеПроизводственногоПроцесса, Заказ21Объект)
	
	Номенклатура = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Номенклатура,
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(
			Заказ21Объект.ВыходныеИзделия, 
			"Номенклатура"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Номенклатура,
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(
			Заказ21Объект.ВозвратныеОтходы, 
			"Номенклатура"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Номенклатура,
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(
			Заказ21Объект.МатериалыИУслуги, 
			"Номенклатура"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Номенклатура,
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(
			ОписаниеПроизводственногоПроцесса.ЗаказМатериалов, 
			"Номенклатура"));
	
	Возврат РеквизитыНоменклатуры(Номенклатура);
	
КонецФункции

Функция РеквизитыНоменклатуры(Номенклатура)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоРабота
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка В(&Номенклатура)");
		
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
	
		РеквизитыНоменклатуры = Новый Структура("ТипНоменклатуры,ХарактеристикиИспользуются,ЭтоРабота");
		
		ЗаполнитьЗначенияСвойств(РеквизитыНоменклатуры, Выборка);
		
		Результат.Вставить(Выборка.Номенклатура, РеквизитыНоменклатуры);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЦеховыеКладовыеПодразделенийЗаказа(ОписаниеПроизводственногоПроцесса, Заказ21Объект)
	
	Подразделения = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения,
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(
			Заказ21Объект.ВыходныеИзделия, 
			"Подразделение"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения,
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(
			Заказ21Объект.ВозвратныеОтходы, 
			"Подразделение"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения,
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(
			ОписаниеПроизводственногоПроцесса.ЗаказМатериалов, 
			"Подразделение"));
	
	Возврат ЦеховыеКладовыеПодразделений(Подразделения);
	
КонецФункции

Функция ЦеховыеКладовыеПодразделений(Подразделения)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	МАКСИМУМ(ЦеховыеКладовые.Ссылка) КАК ЦеховаяКладовая
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ЦеховыеКладовые
		|		ПО (ЦеховыеКладовые.Подразделение = СтруктураПредприятия.Ссылка)
		|			И (ЦеховыеКладовые.ЦеховаяКладовая)
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В(&Подразделения)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтруктураПредприятия.Ссылка");
		
	Запрос.УстановитьПараметр("Подразделения",Подразделения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Вставить(Выборка.Подразделение, Выборка.ЦеховаяКладовая);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СтрокаЭтапаИзОписания(Заказ21Объект, КлючСвязиПродукция, КлючСвязи)
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,КлючСвязи");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка; 
	ОтборЭтапы.КлючСвязиПродукция = КлючСвязиПродукция; 
	ОтборЭтапы.КлючСвязи = КлючСвязи; 
	
	Возврат КоллекцияЭтаповИзОписания(Заказ21Объект, ОтборЭтапы)[0];
	
КонецФункции

Функция СтрокаЭтапаВыпускаИзОписания(Заказ21Объект, КлючСвязиПродукция, КлючСвязи)
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,КлючСвязиЭтапы");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка; 
	ОтборЭтапы.КлючСвязиПродукция = КлючСвязиПродукция; 
	ОтборЭтапы.КлючСвязиЭтапы = КлючСвязи; 
	
	Возврат НайтиВыпускающийЭтап(КоллекцияЭтаповИзОписания(Заказ21Объект, ОтборЭтапы));
	
КонецФункции

Функция СтрокаЭтапаВыпускаПродукцииИзОписания(Заказ21Объект, КлючСвязиПродукция)
	
	ОтборЭтапы = Новый Структура("Ссылка,КлючСвязиПродукция,КлючСвязиПолуфабрикат");
	ОтборЭтапы.Ссылка = Заказ21Объект.Ссылка; 
	ОтборЭтапы.КлючСвязиПродукция = КлючСвязиПродукция; 
	ОтборЭтапы.КлючСвязиПолуфабрикат = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"); 
	
	Возврат НайтиВыпускающийЭтап(КоллекцияЭтаповИзОписания(Заказ21Объект, ОтборЭтапы));
	
КонецФункции

Функция КоллекцияЭтаповИзОписания(Заказ21Объект, ОтборЭтапы)
	
	ТаблицаЭтапов = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ТаблицаЭтапов;
	
	Возврат ТаблицаЭтапов.НайтиСтроки(ОтборЭтапы);
	
КонецФункции

Функция КоллекцияПолуфабрикатовИзОписания(Заказ21Объект, КлючСвязиПолуфабрикаты)
	
	ТаблицаПолуфабрикатов = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ТаблицаПолуфабрикатов;
	
	Возврат ТаблицаПолуфабрикатов.НайтиСтроки(КлючСвязиПолуфабрикаты);
	
КонецФункции

Функция КолекцияЭтапов22ТребующихКорректировки(Заказ21Объект)
	
	ОтборЭтапы = Новый Структура;
	ОтборЭтапы.Вставить("Ссылка", Заказ21Объект.Ссылка);
	ОтборЭтапы.Вставить("ТребуетсяКорректировкаЗаказаМатериалов", Истина);
	
	КоллекцияЭтапов = КоллекцияЭтаповИзОписания(Заказ21Объект, ОтборЭтапы);
	
	Документы22 = Новый Массив;
	СоответствиеСтрок = Новый Соответствие;
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		Если СтрокаЭтап.Документ22.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Документы22.Добавить(СтрокаЭтап.Документ22);
		СоответствиеСтрок.Вставить(СтрокаЭтап.Документ22,СтрокаЭтап);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ЭтапПроизводства КАК Ссылка
		|ИЗ
		|	РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК Т
		|ГДЕ
		|	Т.ЭтапПроизводства В (&Документы22)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДОБАВИТЬКДАТЕ(
		|		Т.Распоряжение.ДатаПотребности, 
		|		СЕКУНДА, 
		|		-Т.ДлительностьДоВыпуска
		|	) УБЫВ");
		
	Запрос.УстановитьПараметр("Документы22", Документы22);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(СоответствиеСтрок[Выборка.Ссылка]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КлючиЭтаповИзКоллекции(КоллекцияЭтапов)
	
	Результат = Новый Массив;
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		
		Результат.Добавить(СтрокаЭтап.КлючСвязи);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КлючиСвязиПродукцииИПолуфабрикатов(Заказ21, КлючСвязиПродукция, ОписаниеПроизводственногоПроцесса = Неопределено)
	
	ОтборКлючСвязи = Новый Структура("Ссылка,КлючСвязиПродукция");
	
	Если ТипЗнч(Заказ21) = Тип("ДокументОбъект.ЗаказНаПроизводство") Тогда
		ОтборКлючСвязи.Ссылка = Заказ21.Ссылка;
		КлючиПродукции        = Заказ21.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.КлючиПродукции;
	Иначе
		ОтборКлючСвязи.Ссылка = Заказ21;
		КлючиПродукции        = ОписаниеПроизводственногоПроцесса.КлючиПродукции;
	КонецЕсли;
	
	ОтборКлючСвязи.КлючСвязиПродукция = КлючСвязиПродукция;
	
	Результат = Новый Массив;
	Для каждого Строка Из КлючиПродукции.НайтиСтроки(ОтборКлючСвязи) Цикл
		Результат.Добавить(Строка.КлючСвязи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МатериалыИУслугиСУчетомКорректировок(Заказ21Объект, ОтборПоЭтапу)
	
	Результат = Новый Массив;
	
	ОтборПоПолуфабрикатам = Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапы, ПроизводитсяВПроцессе");
	ЗаполнитьЗначенияСвойств(ОтборПоПолуфабрикатам, ОтборПоЭтапу);
	ОтборПоПолуфабрикатам.ПроизводитсяВПроцессе = Истина;
	
	МатериалыИУслуги = Заказ21Объект.МатериалыИУслуги;
	Для каждого ЭлементКоллекции Из МатериалыИУслуги.НайтиСтроки(ОтборПоПолуфабрикатам) Цикл
		Результат.Добавить(ЭлементКоллекции);
	КонецЦикла;
	
	ЗаказМатериалов = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ЗаказМатериалов;
	Для каждого ЭлементКоллекции Из ЗаказМатериалов.НайтиСтроки(ОтборПоЭтапу) Цикл
		Результат.Добавить(ЭлементКоллекции);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоРабота(Номенклатура, Заказ21Объект)
	
	РеквизитыНоменклатуры = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.РеквизитыНоменклатуры;
	Возврат РеквизитыНоменклатуры[Номенклатура].ЭтоРабота;
	
КонецФункции

Функция ТипНоменклатуры(Номенклатура, Заказ21Объект)
	
	РеквизитыНоменклатуры = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.РеквизитыНоменклатуры;
	Возврат РеквизитыНоменклатуры[Номенклатура].ТипНоменклатуры;
	
КонецФункции

Функция ЭтоМатериалПроизводимыйВПроцессе(СтрокаМатериал, Заказ21Объект)
	
	ОтборМатериал = Новый Структура("КлючСвязиСпецификация,ПроизводитсяВПроцессе");
	ОтборМатериал.КлючСвязиСпецификация = СтрокаМатериал.КлючСвязиСпецификация;
	ОтборМатериал.ПроизводитсяВПроцессе = Истина;
	
	Возврат Заказ21Объект.МатериалыИУслуги.НайтиСтроки(ОтборМатериал).ВГраница() <> -1;
	
КонецФункции

Функция ЭтоСтрокаВыпускаПолуфабриката(ДанныеСтроки, Заказ21Объект)
	
	Если ДанныеСтроки.ПроизводитсяВПроцессе Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("Номенклатура,Характеристика,КлючСвязи");
	ЗаполнитьЗначенияСвойств(Отбор, ДанныеСтроки);
	
	Отбор.КлючСвязи = ДанныеСтроки.КлючСвязиПродукция;
	
	Если Заказ21Объект.Продукция.НайтиСтроки(Отбор).ВГраница() <> -1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПолуфабрикатПроизводимыйВПроцессе(ДанныеСтроки, Заказ21Объект, ИсточникПолученияПолуфабриката)
	
	Если ДанныеСтроки.ПроизводитсяВПроцессе Тогда
		ИсточникПолученияПолуфабриката = ДанныеСтроки.ИсточникПолученияПолуфабриката;
		Возврат Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("КлючСвязиМатериалыИУслуги", ДанныеСтроки.КлючСвязи);
	ПолуфабрикатыВЗаказе = Заказ21Объект.Продукция.НайтиСтроки(Отбор);
	
	Если ПолуфабрикатыВЗаказе.ВГраница() <> -1 Тогда
		
		ПолуфабрикатВЗаказе = ПолуфабрикатыВЗаказе[0];
		
		СтрокаЭтапВыпуска = СтрокаЭтапаВыпускаПродукцииИзОписания(Заказ21Объект, ПолуфабрикатВЗаказе.КлючСвязи);
		Если СтрокаЭтапВыпуска <> Неопределено
			И СтрокаЭтапВыпуска.Количество22 > 0 Тогда
			ИсточникПолученияПолуфабриката = ПолуфабрикатВЗаказе.Спецификация;
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ИсточникПолученияПолуфабриката = Неопределено;
	Возврат Ложь;
	
КонецФункции

Функция ЦеховаяКладоваяПодразделения(Подразделение, Заказ21Объект)
	
	ЦеховыеКладовыеПодразделений = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ЦеховыеКладовыеПодразделений;
	Возврат ЦеховыеКладовыеПодразделений[Подразделение];
	
КонецФункции

Функция НазначениеВыходныхИзделийДляПроизводства22(ДанныеСтроки, Заказ21Объект)
	
	ОбособленнаяПродукцияЗаказа = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ОбособленнаяПродукцияЗаказа;
	
	ОтборПродукция = Новый Структура("КлючСвязи,Номенклатура,Характеристика");
	ОтборПродукция.КлючСвязи = ДанныеСтроки.КлючСвязиПродукция;
	ОтборПродукция.Номенклатура = ДанныеСтроки.Номенклатура;
	ОтборПродукция.Характеристика = ДанныеСтроки.Характеристика;
	
	Если ОбособленнаяПродукцияЗаказа.НайтиСтроки(ОтборПродукция).ВГраница() <> -1 Тогда
		Возврат ДанныеСтроки.Назначение;
	Иначе
		Возврат Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучательВыходныхИзделийДляПроизводства22(ТекущаяСтрока, Заказ21Объект, ИмяПоляСклад = "Склад", ИмяПоляПодразделение = "Подразделение")
	
	Если ТекущаяСтрока[ИмяПоляСклад].Пустая() ИЛИ ТипЗнч(ТекущаяСтрока[ИмяПоляСклад]) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Если ЭтоРабота(ТекущаяСтрока.Номенклатура, Заказ21Объект) Тогда
			Возврат ТекущаяСтрока[ИмяПоляПодразделение];
		Иначе
			Возврат ЦеховаяКладоваяПодразделения(ТекущаяСтрока[ИмяПоляПодразделение], Заказ21Объект);
		КонецЕсли;
		
	Иначе
		
		Возврат ТекущаяСтрока[ИмяПоляСклад];
		
	КонецЕсли;
	
КонецФункции

Функция СкладМатериаловИРаботДляЗаказа22(ТекущаяСтрока, Заказ21Объект)
	
	Если НЕ ТекущаяСтрока.ЗаказатьНаСклад Тогда
		
		РеквизитыНоменклатуры        = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.РеквизитыНоменклатуры;
		ЦеховыеКладовыеПодразделений = Заказ21Объект.ДополнительныеСвойства.ОписаниеПроизводственногоПроцесса.ЦеховыеКладовыеПодразделений;
		
		Если РеквизитыНоменклатуры[ТекущаяСтрока.Номенклатура].ЭтоРабота Тогда
			Возврат ТекущаяСтрока.Подразделение;
		Иначе
			Возврат ЦеховыеКладовыеПодразделений[ТекущаяСтрока.Подразделение];
		КонецЕсли;
		
	Иначе
		
		Возврат ТекущаяСтрока.Склад;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

Функция КорректировкиЗаказаМатериалов()
	
	ВводКорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.Создать();
	Возврат ВводКорректировкиЗаказаМатериалов.МатериалыИУслуги.Выгрузить();
	
КонецФункции

Функция КлючиПродукцииВыбранныхСтрок(ВыбранныеСтроки)

	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство");
	Результат.Колонки.Добавить("Ссылка", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("КодСтроки", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("КлючСвязи", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("УникальныйИдентификатор");
	Результат.Колонки.Добавить("КлючСвязиПродукция", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("Полуфабрикат", ОписаниеТипов);
	
	Если ТипЗнч(ВыбранныеСтроки) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		КодыСтрокПродукции = КодыСтрокИзВыборки(ВыбранныеСтроки);
	Иначе
		КодыСтрокПродукции = ВыбранныеСтроки;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТПродукция.Ссылка КАК Ссылка,
		|	ТПродукция.КодСтроки КАК КодСтроки,
		|	ТПродукция.КлючСвязи КАК КлючСвязи,
		|	ТПродукция.КлючСвязиПродукция КАК КлючСвязиПродукция
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
		|ГДЕ
		|	ТПродукция.Ссылка В (&МассивСсылок)");
		
	Запрос.УстановитьПараметр("МассивСсылок", КодыСтрокПродукции.ВыгрузитьКолонку("Ссылка"));
	
	ТаблицаКлючей = Запрос.Выполнить().Выгрузить();
	ТаблицаКлючей.Индексы.Добавить("Ссылка,КодСтроки");
	ТаблицаКлючей.Индексы.Добавить("Ссылка,КлючСвязиПродукция");
	
	ОтборПродукция = Новый Структура("Ссылка,КодСтроки");
	
	Для каждого КодСтроки Из КодыСтрокПродукции Цикл
		
		ОтборПродукция.Ссылка = КодСтроки.Ссылка;
		ОтборПродукция.КодСтроки = КодСтроки.КодСтроки;
		
		НайденнаяПродукция = ТаблицаКлючей.НайтиСтроки(ОтборПродукция);
		
		Для каждого СтрокаПродукция Из НайденнаяПродукция Цикл
			
			НоваяПродукция = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПродукция,СтрокаПродукция,,"КлючСвязиПродукция");
			НоваяПродукция.КлючСвязиПродукция = НоваяПродукция.КлючСвязи;
			
			ОтборПолуфабрикат = Новый Структура("Ссылка,КлючСвязиПродукция");
			ОтборПолуфабрикат.Ссылка = СтрокаПродукция.Ссылка;
			ОтборПолуфабрикат.КлючСвязиПродукция = СтрокаПродукция.КлючСвязи;
			
			МассивОтборов = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборПолуфабрикат);
			
			Пока МассивОтборов.Количество() <> 0 Цикл
				
				МассивОтборовНовый = Новый Массив;
				
				Для каждого Ключ Из МассивОтборов Цикл
					
					НайденныеПолуфабрикаты = ТаблицаКлючей.НайтиСтроки(ОтборПолуфабрикат);
					
					Для каждого СтрокаПолуфабрикат Из НайденныеПолуфабрикаты Цикл
						
						НовыйПолуфабрикат = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйПолуфабрикат,СтрокаПолуфабрикат,,"КлючСвязиПродукция");
						НовыйПолуфабрикат.КлючСвязиПродукция = НоваяПродукция.КлючСвязи;
						НовыйПолуфабрикат.Полуфабрикат = Истина;
						
						ОтборПолуфабрикат = Новый Структура("Ссылка,КлючСвязиПродукция");
						ОтборПолуфабрикат.Ссылка = СтрокаПолуфабрикат.Ссылка;
						ОтборПолуфабрикат.КлючСвязиПродукция = СтрокаПолуфабрикат.КлючСвязи;
						
						МассивОтборовНовый.Добавить(ОтборПолуфабрикат);
						
					КонецЦикла;
					
				КонецЦикла;
				
				МассивОтборов = ОбщегоНазначенияУТКлиентСервер.Массив(МассивОтборовНовый);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.Индексы.Добавить("Ссылка,КлючСвязиПродукция");
	
	Возврат Результат;
	
КонецФункции

Функция КодыСтрокИзВыборки(Выборка)

	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство");
	Результат.Колонки.Добавить("Ссылка", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("КодСтроки", ОписаниеТипов);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;
	
	Выборка.Сбросить();
	
	Возврат Результат;
	
КонецФункции

Функция НайтиВыпускающийЭтап(КоллекцияЭтапов)
	
	Для каждого СтрокаЭтап Из КоллекцияЭтапов Цикл
		Если СтрокаЭтап.ВыпускающийЭтап Тогда
			Возврат СтрокаЭтап;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция РаспределитьПолуфабрикат21и22(СтрокаЭтап, Строка21, Строка22, КоличествоКРаспределению = Неопределено)
	
	Перем КэшированныеЗначения;
	
	Если КоличествоКРаспределению <> Неопределено Тогда
		Строка22.Количество = КоличествоКРаспределению[Строка21.КодСтроки];
	Иначе
		Строка22.Количество = (Строка21.Количество / СтрокаЭтап.Количество21) * СтрокаЭтап.Количество21_22;
	КонецЕсли;
	
	ПересчитатьКоличествоУпаковокВСтроке(Строка22, КэшированныеЗначения);
	
	Строка21.Количество = Строка21.Количество - Строка22.Количество;
	
	ПересчитатьКоличествоУпаковокВСтроке(Строка21, КэшированныеЗначения);
	
	Коэффициент = Строка21.Количество / (Строка22.Количество + Строка21.Количество);
	
	Строка21.ДоляСтоимости = Строка21.ДоляСтоимости * Коэффициент;
	Строка22.ДоляСтоимости = Строка22.ДоляСтоимости - Строка21.ДоляСтоимости;
	
	Возврат Коэффициент;
	
КонецФункции

Функция РассчитатьКоличество21(ТекущаяСтрока, СтрокаЭтап, ИмяПоляКоличество = "Количество")
	
	Возврат (ТекущаяСтрока[ИмяПоляКоличество] * СтрокаЭтап.Количество21) / СтрокаЭтап.Запланировано;
	
КонецФункции

Функция РассчитатьКоличество22(ТекущаяСтрока, СтрокаЭтап, ИмяПоляКоличество = "Количество")
	
	Возврат (ТекущаяСтрока[ИмяПоляКоличество] * СтрокаЭтап.Количество22) / СтрокаЭтап.Запланировано;
	
КонецФункции

Процедура ПересчитатьКоличествоУпаковокВСтроке(ТекущаяСтрока, КэшированныеЗначения = Неопределено)
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

Функция НаименьшееОбщееКратноеВКоллекции(Коллекция, ИмяКолонки = "Количество")
	
	Если ТипЗнч(Коллекция) <> ТипЗнч("ТабличнаяЧасть") Тогда
		МассивЧисел = Новый Массив;
		Для каждого ЭлементКоллекции Из Коллекция Цикл
			МассивЧисел.Добавить(ЭлементКоллекции[ИмяКолонки]);
		КонецЦикла;
	Иначе
		МассивЧисел = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(Коллекция, ИмяКолонки);
	КонецЕсли;
	
	Возврат ПроизводствоСервер.НаименьшееОбщееКратное(МассивЧисел);
	
КонецФункции

Функция СтатусЭтапаШаг1()
	
	Возврат Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	
КонецФункции

Функция СтатусЭтапаШаг2()
	
	Возврат Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
	
КонецФункции

Функция РезультатКонвертации()
	
	Результат = Новый Структура("ЕстьОшибки,ОтсутствуютКладовые,ОбработаноЭтапов,Сообщения,ДеревоЗаказов", Ложь, Ложь, 0);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21
