
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьРеквизитыФормы();
	
	УстановитьВидимостьПоФункциональнымОпциямИПравам();
	
	ПродолжитьРаботуСПомощником();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		Если ИмяТекущегоШага(ЭтотОбъект) = "ПредварительныеНастройки" Тогда
			ПриИзмененииНастроекПрограммы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) ИЛИ ЗакрытьФормуБезусловно Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Если ИнформационнаяБазаФайловая Тогда
			Если РежимПереносаДанных = "Проверить" Тогда
				ТекстПредупреждения = НСтр("ru = 'При закрытии программы проверка данных будет отменена';
											|en = 'If you close the application, data check will be canceled'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'При закрытии программы перенос данных будет отменен';
											|en = 'If you close the application, data transfer will be canceled'");
			КонецЕсли;
		Иначе
			Если РежимПереносаДанных = "Проверить" Тогда
				ТекстПредупреждения = НСтр("ru = 'При закрытии программы проверка данных не будет остановлена.
                                            |Рекомендуется отменить проверку перед закрытием программы.';
                                            |en = 'Data check will not be stopped if you close the application.
                                            |It is recommended that you cancel the check before closing the application.'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'При закрытии программы перенос данных не будет остановлен.
                                            |Рекомендуется отменить перенос данных перед закрытием программы.';
                                            |en = 'Data transfer will not be stopped if you close the application.
                                            |It is recommended that you cancel data transfer before closing the application.'");
			КонецЕсли;
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Если РежимПереносаДанных = "Проверить" Тогда
		ТекстПредупреждения = НСтр("ru = 'Отменить проверку данных и закрыть форму?';
									|en = 'Cancel data check and close the form?'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Отменить перенос данных и закрыть форму?';
									|en = 'Cancel data transfer and close the form?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект,
		Отказ,
		ЗавершениеРаботы, 
		ТекстПредупреждения, 
		"ЗакрытьФормуБезусловно",
		Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаПредварительныеНастройки

&НаКлиенте
Процедура ДатаНачалаУчетаВнеоборотныхАктивов2_4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбораПериода = Новый Структура("Значение, РежимВыбораПериода", ДатаНачалаУчетаВнеоборотныхАктивов2_4, "МЕСЯЦ");
	ОписаниеОповещения = Новый ОписаниеОповещения("ДатаНачалаУчетаВнеоборотныхАктивов2_4Завершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормыВыбораПериода, 
		ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор,,, 
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаУчетаВнеоборотныхАктивов2_4ПриИзменении(Элемент)
	
	ЗаполнитьСтраницуШагаПредварительныеНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПереносДанных

&НаКлиенте
Процедура РежимПереносаДанныхИсправитьПриИзменении(Элемент)
	
	ОформитьСтраницуПереносДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПереносаДанныхЗановоПриИзменении(Элемент)
	
	ОформитьСтраницуПереносДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПереносаДанныхПродолжитьПриИзменении(Элемент)
	
	ОформитьСтраницуПереносДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокПереносаданныхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПоказатьИнформациюОбОшибке" Тогда
		
		ПараметрФормы = Новый Структура;
		ПараметрФормы.Вставить("ТекстИнформации", РезультатВыполненияФоновогоЗадания.ПодробноеПредставлениеОшибки);
		ПараметрФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Информация об ошибке';
														|en = 'Error details'"));
		
		ОткрытьФорму("Обработка.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Форма.ФормаИнформация", ПараметрФормы);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ОтменитьПереносДанных" Тогда
		
		ТекстВопроса = НСтр("ru = 'Отменить выполнение?';
							|en = 'Cancel execution?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбОтменеВыполненияЗаданияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРезультатыПереходаПроблемыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если НавигационнаяСсылкаФорматированнойСтроки = "#Ошибки" Тогда
		ПараметрыФормы.Вставить("ОтборВажность", ПредопределенноеЗначение("Перечисление.ВажностьПроблемыУчета.Ошибка"));
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#Предупреждения" Тогда
		ПараметрыФормы.Вставить("ОтборВажность", ПредопределенноеЗначение("Перечисление.ВажностьПроблемыУчета.Предупреждение"));
	КонецЕсли; 
	
	ОткрытьФорму("Обработка.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Форма.РезультатыПерехода", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаЗавершение

&НаКлиенте
Процедура ДекорацияСтатусЗавершенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрФормы = Новый Структура;
	ПараметрФормы.Вставить("ТекстИнформации", РезультатВыполненияФоновогоЗадания.ПодробноеПредставлениеОшибки);
	ПараметрФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Информация об ошибке';
													|en = 'Error details'"));
	
	ОткрытьФорму("Обработка.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.Форма.ФормаИнформация", ПараметрФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРезультатыПереходаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ГруппыФинансовогоУчетаВнеоборотныхАктивов" Тогда
		
		ОткрытьФорму("Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ФормаСписка");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВводОстатковПрочиеАктивыПассивы" Тогда
		
		ОтборыФормыСписка = Новый Структура;
		ОтборыФормыСписка.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПрочихАктивовПассивов"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ОтборыФормыСписка);
		ОткрытьФорму("Обработка.ЖурналДокументовВводаНачальныхОстатков.Форма.ФормаСписка", ПараметрыФормы,, НавигационнаяСсылкаФорматированнойСтроки);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменениеПараметровОС" Тогда
		
		ОтборыФормыСписка = Новый Структура;
		
		СписокТиповДокументов = Новый СписокЗначений;
		СписокТиповДокументов.Добавить(ИдентификаторИзменениеПараметровОС);
		ОтборыФормыСписка.Вставить("ОтборТипыДокументов", СписокТиповДокументов);
		СписокОпераций = Новый СписокЗначений;
		СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИзменениеПараметровОС"));
		ОтборыФормыСписка.Вставить("ОтборХозяйственныеОперации", СписокОпераций);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтборыФормыСписка", ОтборыФормыСписка);
		ПараметрыФормы.Вставить("КлючНазначенияФормы", "ПомощникПерехода");
		ОткрытьФорму("Обработка.ЖурналДокументовОС2_4.Форма", ПараметрыФормы,, НавигационнаяСсылкаФорматированнойСтроки);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменениеПараметровНМА" Тогда
		
		ОтборыФормыСписка = Новый Структура;
		
		СписокТиповДокументов = Новый СписокЗначений;
		СписокТиповДокументов.Добавить(ИдентификаторИзменениеПараметровНМА);
		ОтборыФормыСписка.Вставить("ОтборТипыДокументов", СписокТиповДокументов);
		СписокОпераций = Новый СписокЗначений;
		СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИзменениеПараметровНМА"));
		ОтборыФормыСписка.Вставить("ОтборХозяйственныеОперации", СписокОпераций);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтборыФормыСписка", ОтборыФормыСписка);
		ПараметрыФормы.Вставить("КлючНазначенияФормы", "ПомощникПерехода");
		ОткрытьФорму("Обработка.ЖурналДокументовНМА2_4.Форма", ПараметрыФормы,, НавигационнаяСсылкаФорматированнойСтроки);
		
	Иначе
		
		ОтборХозяйственныеОперации = Новый СписокЗначений;
		ОтборХозяйственныеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации." + НавигационнаяСсылкаФорматированнойСтроки));
		
		ОтборТипыДокументов = Новый СписокЗначений;
		ОтборТипыДокументов.Добавить(ИдентификаторВводОстатков);
		
		ОтборыФормыСписка = Новый Структура;
		ОтборыФормыСписка.Вставить("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
		ОтборыФормыСписка.Вставить("ОтборТипыДокументов", ОтборТипыДокументов);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтборыФормыСписка", ОтборыФормыСписка);
		ПараметрыФормы.Вставить("КлючНазначенияФормы", "ПомощникПерехода");
		ОткрытьФорму("Документ.ВводОстатковВнеоборотныхАктивов2_4.ФормаСписка", ПараметрыФормы,, НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиРазделаВНАОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПанельАдминистрированияКА.Форма.ВнеоборотныеАктивы");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ПерейтиКШагу(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ПерейтиКШагу(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФинансовыйРезультатИКонтроллинг(Команда)
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияУТ.Форма.ФинансовыйРезультатИКонтроллинг");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМеждународныйФинансовыйУчет(Команда)
	
	//++ НЕ УХ

	//++ НЕ УТКА
	ОткрытьФорму("Обработка.ПанельАдминистрированияУП.Форма.МеждународныйФинансовыйУчет");
	//-- НЕ УТКА

	//-- НЕ УХ
	 
	Возврат; // в КА пустой обработчик.
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДатыЗапрета(Команда)
	
	ОткрытьФорму("РегистрСведений.ДатыЗапретаИзменения.Форма.ДатыЗапретаИзменения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанные(Команда)
	
	Если РежимПереносаДанных = "Заново" Тогда
		
		ТекстВопроса = НСтр("ru = 'Перенести данные повторно?';
							|en = 'Transfer data again?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПереносДанных", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		НачатьПереносДанных(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатыОбновления(Команда)
	
	ОткрытьФорму("Обработка.РезультатыОбновленияПрограммы.Форма.РезультатыОбновленияПрограммы");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НавигацияПоШагам

&НаСервере
Процедура ПродолжитьРаботуСПомощником()

	НайтиИОтменитьПереносДанных();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		ПоказатьШаг("Начало");
		
	Иначе
		
		ОпределитьУсловияПереходаНаУчет2_4();
		
		Если Параметры.РежимПереносаДанных = "Проверить"
			ИЛИ Параметры.РежимПереносаДанных = "Исправить" Тогда
			ПоказатьШаг("ПереносДанных");
		Иначе
			Если УсловияПереходаНаУчет2_4.ВсеУсловияВыполнены Тогда
				ПоказатьШаг("ПереносДанных");
			Иначе
				ПоказатьШаг("ПредварительныеНастройки");
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказатьШаг(Знач ИмяШага)
	
	ПараметрыШага = ПараметрыШага(ИмяШага, ЭтотОбъект);
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы["Страница" + ИмяШага];

	ВыделитьЖирнымТекущийШаг(ПараметрыШага.ИмяШага);
	УстановитьДоступностьКоманд(ПараметрыШага, ЭтотОбъект);
	ЗаполнитьСтраницуШага(ПараметрыШага.ИмяШага);
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьЖирнымТекущийШаг(ИмяШага)

	Для каждого ПараметрыШага Из ПараметрыПомощника Цикл
		Элементы["ДекорацияШаг" + ПараметрыШага.ИмяШага].Шрифт = Новый Шрифт(Элементы["ДекорацияШаг" + ПараметрыШага.ИмяШага].Шрифт,,, Ложь,, Ложь,,);
	КонецЦикла; 
	
	Элементы["ДекорацияШаг" + ИмяШага].Шрифт = Новый Шрифт(Элементы["ДекорацияШаг" + ИмяШага].Шрифт,,, Истина,, Истина,,);

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоманд(ПараметрыШага, Форма)

	СписокКоманд = СтрРазделить(ПараметрыШага.СписокКоманд, ",");
	
	СписокКомандыхПанелей = Новый Массив;
	СписокКомандыхПанелей.Добавить("КомандыПомощникаЛево");
	СписокКомандыхПанелей.Добавить("КомандыПомощникаПраво");
	Для каждого ИмяКоманднойПанели Из СписокКомандыхПанелей Цикл
		Для каждого КомандаПомощника Из Форма.Элементы[ИмяКоманднойПанели].ПодчиненныеЭлементы Цикл
			Если СписокКоманд.Найти(КомандаПомощника.Имя) <> Неопределено Тогда
				КомандаПомощника.Видимость = Истина;
				КомандаПомощника.Доступность = Истина;
				Если ПараметрыШага.КомандаПоУмолчанию = КомандаПомощника.Имя Тогда
					КомандаПомощника.КнопкаПоУмолчанию = Истина;
				КонецЕсли;
			ИначеЕсли КомандаПомощника.Имя <> "ФормаСправка" Тогда
				КомандаПомощника.Видимость = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагу(Направление)

	ИмяТекущегоШага = ИмяТекущегоШага(ЭтотОбъект);
	
	Если ИмяТекущегоШага = "ПредварительныеНастройки"
		И Направление = 1 Тогда
		
		Если НЕ ВключитьНовуюВерсиюУчета() Тогда
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
		
		Оповестить("Запись_НаборКонстант", Новый Структура, "ИспользоватьВнеоборотныеАктивы2_4");
		Оповестить("Запись_НаборКонстант", Новый Структура, "ИспользоватьВнеоборотныеАктивы2_4");
		
	КонецЕсли; 
	
	Для Сч = 0 По ПараметрыПомощника.Количество()-1 Цикл
		ПараметрыШага = ПараметрыПомощника[Сч];
		Если ПараметрыШага.ИмяШага = ИмяТекущегоШага Тогда
			ПоказатьШаг(ПараметрыПомощника[Сч+Направление].ИмяШага);
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтраницуШага(ИмяТекущегоШага)

	Если ИмяТекущегоШага = "ПредварительныеНастройки" Тогда
		ЗаполнитьСтраницуШагаПредварительныеНастройки();
		
	ИначеЕсли ИмяТекущегоШага = "ПереносДанных" Тогда
		ЗаполнитьСтраницуШагаПереносДанных();
		
	ИначеЕсли ИмяТекущегоШага = "Завершение" Тогда
		ЗаполнитьСтраницуШагаЗавершение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПереносДанныхЗавершен()

	Возврат Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.ПереносДанныхЗавершен();
	
КонецФункции
 
#КонецОбласти

#Область СтраницаПредварительныеНастройки

&НаСервере
Процедура ЗаполнитьСтраницуШагаПредварительныеНастройки()

	ОпределитьУсловияПереходаНаУчет2_4();
	
	ЗаполнитьСостояниеУсловияПерехода(
		Элементы.ДекорацияСостояниеРежимПартионногоУчета, 
		Элементы.КомандаРежимПартионногоУчетаПерейти,
		УсловияПереходаНаУчет2_4.РежимПартионногоУчета);
		
	ЗаполнитьСостояниеУсловияПерехода(
		Элементы.ДекорацияСостояниеВестиУправленческийУчетОрганизаций, 
		Элементы.КомандаВестиУправленческийУчетОрганизацийПерейти,
		УсловияПереходаНаУчет2_4.ВестиУправленческийУчетОрганизаций);
		
	ЗаполнитьСостояниеУсловияПерехода(
		Элементы.ДекорацияСостояниеИспользоватьУчетПрочихДоходовРасходовРегл, 
		Элементы.КомандаИспользоватьУчетПрочихДоходовРасходовРеглПерейти,
		УсловияПереходаНаУчет2_4.ИспользоватьУчетПрочихДоходовРасходовРегл);
		
	ЗаполнитьСостояниеУсловияПерехода(
		Элементы.ДекорацияСостояниеДатаЗапрета, 
		Элементы.ОткрытьДатыЗапрета,
		НЕ УсловияПереходаНаУчет2_4.НайденЗапретИзмененияДанных);
		
	ЗаполнитьСостояниеУсловияПерехода(
		Элементы.ДекорацияСостояниеОбновлениеДанных, 
		Элементы.ОткрытьРезультатыОбновления,
		УсловияПереходаНаУчет2_4.ОбновлениеИБЗавершено);
		
	ЗаполнитьСостояниеУсловияПерехода(
		Элементы.ДекорацияСостояниеДатаНачалаУчетаВнеоборотныхАктивов2_4, 
		Неопределено,
		УсловияПереходаНаУчет2_4.НачалоУчетаКорректное);
		
	Если ДатаНачалаУчетаВнеоборотныхАктивов2_4 > УсловияПереходаНаУчет2_4.МаксимальнаяДатаНачалаУчета2_4 
		И УсловияПереходаНаУчет2_4.МаксимальнаяДатаНачалаУчета2_4 <> '000101010000' Тогда
		
		Элементы.ДекорацияПояснениеДатаНачалаУчетаВнеоборотныхАктивов2_4.Заголовок = УсловияПереходаНаУчет2_4.КомментарийМаксДатаНачалаУчета2_4;
			
	ИначеЕсли ДатаНачалаУчетаВнеоборотныхАктивов2_4 < УсловияПереходаНаУчет2_4.МинимальнаяДатаНачалаУчета2_4 
		И УсловияПереходаНаУчет2_4.МинимальнаяДатаНачалаУчета2_4 <> '000101010000' Тогда
		
		Элементы.ДекорацияПояснениеДатаНачалаУчетаВнеоборотныхАктивов2_4.Заголовок = УсловияПереходаНаУчет2_4.КомментарийМинДатаНачалаУчета2_4;
			
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
		Элементы.ДатаНачалаУчетаВнеоборотныхАктивов2_4, 
		ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") И ВнеоборотныеАктивыСлужебный.ЕстьУчетВнеоборотныхАктивов2_4());
	
	Элементы.ГруппаПояснениеДатаНачалаУчетаВнеоборотныхАктивов.Видимость = 
		ЗначениеЗаполнено(ДатаНачалаУчетаВнеоборотныхАктивов2_4) И НЕ УсловияПереходаНаУчет2_4.НачалоУчетаКорректное;
	
	Элементы.КомандаДалее.Доступность = УсловияПереходаНаУчет2_4.ВсеУсловияВыполнены;
	Элементы.ГруппаПредварительныеНастройкиПодвал.Видимость = НЕ УсловияПереходаНаУчет2_4.ВсеУсловияВыполнены;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДатаНачалаУчетаВнеоборотныхАктивов2_4Завершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУчетаВнеоборотныхАктивов2_4 = РезультатВыбора;
	
	ЗаполнитьСтраницуШагаПредварительныеНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьУсловияПереходаНаУчет2_4()
	
	УсловияПерехода = ВнеоборотныеАктивы.УсловияПереходаНаУчет2_4();
	Если ДатаНачалаУчетаВнеоборотныхАктивов2_4 = '000101010000' Тогда
		
		НачалоУчетаКорректное = Ложь;
		
	ИначеЕсли ДатаНачалаУчетаВнеоборотныхАктивов2_4 > УсловияПерехода.МаксимальнаяДатаНачалаУчета2_4 
		И УсловияПерехода.МаксимальнаяДатаНачалаУчета2_4 <> '000101010000' Тогда
		
		НачалоУчетаКорректное = Ложь;
			
	ИначеЕсли ДатаНачалаУчетаВнеоборотныхАктивов2_4 < УсловияПерехода.МинимальнаяДатаНачалаУчета2_4 
		И УсловияПерехода.МинимальнаяДатаНачалаУчета2_4 <> '000101010000' Тогда
		
		НачалоУчетаКорректное = Ложь;
			
	Иначе
		НачалоУчетаКорректное = Истина;
	КонецЕсли;
	УсловияПерехода.Вставить("НачалоУчетаКорректное", НачалоУчетаКорректное);
	
	Если ЗначениеЗаполнено(ДатаНачалаУчетаВнеоборотныхАктивов2_4) Тогда
		ДанныеДляПроверкиДатыЗапрета = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
		СписокРазрешенныхОрганизаций = ВнеоборотныеАктивыСлужебный.СписокРазрешенныхОрганизаций();
		Для каждого Организация Из СписокРазрешенныхОрганизаций Цикл
			НовыеДанныеДляПроверки = ДанныеДляПроверкиДатыЗапрета.Добавить();
			НовыеДанныеДляПроверки.Дата = НачалоДня(ДатаНачалаУчетаВнеоборотныхАктивов2_4)-1;
			НовыеДанныеДляПроверки.Раздел = "ВнеоборотныеАктивы";
			НовыеДанныеДляПроверки.Объект = Организация;
		КонецЦикла; 
		НайденЗапретИзмененияДанных = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверкиДатыЗапрета);
	Иначе
		НайденЗапретИзмененияДанных = Ложь;
	КонецЕсли; 
	
	УсловияПерехода.Вставить("НайденЗапретИзмененияДанных", НайденЗапретИзмененияДанных);
	УсловияПерехода.Вставить("ОбновлениеИБЗавершено", ОбновлениеИБЗавершено());
	
	ВсеУсловияВыполнены =
		УсловияПерехода.ДоступенУчет 
		И НачалоУчетаКорректное
		И НЕ НайденЗапретИзмененияДанных;
	
	УсловияПерехода.Вставить("ВсеУсловияВыполнены", ВсеУсловияВыполнены);
	
	УсловияПереходаНаУчет2_4 = Новый ФиксированнаяСтруктура(УсловияПерехода);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновлениеИБЗавершено()

	СписокЧитаемыхОбъектов = Новый Массив;

	// Документы
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ВозвратОСИзАренды.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ПередачаОСВАренду.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ПринятиеКУчетуОС.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ИзменениеПараметровОС.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ИзменениеПараметровНМА.ПолноеИмя());

	// Регистры сведений
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.МестонахождениеОС.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.МестоУчетаНМА.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАБУ.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПараметрыАмортизацииОСБУ.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПараметрыЦелевогоФинансированияНМА.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПараметрыЦелевогоФинансированияОС.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОС.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаНМА.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаОС.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ПорядокУчетаОСБУ.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.СпособыОтраженияРасходовПоИмущественнымНалогам.ПолноеИмя());
	
	//++ НЕ УТКА
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ВводОстатковОСМеждународныйУчет.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ВводОстатковНМАМеждународныйУчет.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ПринятиеКУчетуОСМеждународныйУчет.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.Документы.ПринятиеКУчетуНМАМеждународныйУчет.ПолноеИмя());
	
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.ОсновныеСредстваМеждународныйУчет.ПолноеИмя());
	СписокЧитаемыхОбъектов.Добавить(Метаданные.РегистрыСведений.НематериальныеАктивыМеждународныйУчет.ПолноеИмя());
	//-- НЕ УТКА
	
	Возврат НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, СписокЧитаемыхОбъектов);

КонецФункции

&НаСервере
Процедура ПриИзмененииНастроекПрограммы()

	УстановитьВидимостьПоФункциональнымОпциямИПравам();
	
	ПоказатьШаг("ПредварительныеНастройки");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСостояниеУсловияПерехода(ДекорацияСостояние, КомандаПерехода, Выполнено, КартинкаОшибка = Неопределено)

	ДекорацияСостояние.Картинка = 
		?(Выполнено, БиблиотекаКартинок.Успешно, ?(КартинкаОшибка <> Неопределено, КартинкаОшибка, БиблиотекаКартинок.Остановить));
		
	Если КомандаПерехода <> Неопределено Тогда
		КомандаПерехода.Видимость = НЕ Выполнено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВключитьНовуюВерсиюУчета()

	Если Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить()
		И Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Получить() = ДатаНачалаУчетаВнеоборотныхАктивов2_4 Тогда
		Возврат Истина;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		Константы.ИспользоватьВнеоборотныеАктивы2_4.Установить(Истина);
		Константы.ДатаНачалаУчетаВнеоборотныхАктивов2_4.Установить(ДатаНачалаУчетаВнеоборотныхАктивов2_4);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
		Возврат Ложь
	КонецПопытки; 

	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СтраницаПереносДанных

&НаСервере
Процедура ЗаполнитьСтраницуШагаПереносДанных()

	СостояниеЭтаповСтруктура = Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.СостояниеЭтапов();
	СостояниеЭтапов = ?(СостояниеЭтаповСтруктура <> Неопределено, Новый ФиксированнаяСтруктура(СостояниеЭтаповСтруктура), Неопределено);	
	
	ЗаполнитьСтатусПереносаДанных();
	ЗаполнитьВыборРежимаПереносаДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыборРежимаПереносаДанных()

	Если Параметры.РежимПереносаДанных = "Проверить"
		ИЛИ Параметры.РежимПереносаДанных = "Исправить" Тогда
		
		РежимПереносаДанных = Параметры.РежимПереносаДанных;
		Элементы.РежимПереносаДанныхЗаново.Видимость = Ложь;
		Элементы.РежимПереносаДанныхИсправить.Видимость = Истина;
		Элементы.РежимПереносаДанныхПродолжить.Видимость = Ложь;
		Элементы.РежимПереносаДанныхПроверить.Видимость = Истина;
		
	Иначе
		
		ПереносДанныхЗавершен = ПереносДанныхЗавершен();
		
		Если ПереносДанныхЗавершен = Ложь Тогда
			
			// Заново, Продолжить 
			
			РежимПереносаДанных = "Продолжить";
			Элементы.РежимПереносаДанныхЗаново.Видимость = Истина;
			Элементы.РежимПереносаДанныхИсправить.Видимость = Ложь;
			Элементы.РежимПереносаДанныхПродолжить.Видимость = Истина;
			Элементы.РежимПереносаДанныхПроверить.Видимость = Ложь;
			
		ИначеЕсли ПереносДанныхЗавершен = Истина Тогда
			
			// Заново, Проверить, Исправить
			
			СведенияОПроблемах = Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.СведенияЗарегистрированныхПроблемах();
			
			Если СведенияОПроблемах <> Неопределено
				И СведенияОПроблемах.КоличествоПроблем <> 0 Тогда
				РежимПереносаДанных = "Исправить";
				Элементы.РежимПереносаДанныхЗаново.Видимость = Истина;
				Элементы.РежимПереносаДанныхИсправить.Видимость = Истина;
				Элементы.РежимПереносаДанныхПроверить.Видимость = Истина;
				Элементы.РежимПереносаДанныхПродолжить.Видимость = Ложь;
			Иначе
				РежимПереносаДанных = "Заново";
				Элементы.РежимПереносаДанныхЗаново.Видимость = Истина;
				Элементы.РежимПереносаДанныхИсправить.Видимость = Ложь;
				Элементы.РежимПереносаДанныхПродолжить.Видимость = Ложь;
				Элементы.РежимПереносаДанныхПроверить.Видимость = Истина;
			КонецЕсли; 
			
		Иначе
			
			// Заново, Проверить/Исправить
			
			СведенияОПроблемах = Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.СведенияЗарегистрированныхПроблемах();
			ЕстьУчетВнеоборотныхАктивов2_4 = ВнеоборотныеАктивыСлужебный.ЕстьУчетВнеоборотныхАктивов2_4();
			
			Если СведенияОПроблемах <> Неопределено
				И СведенияОПроблемах.КоличествоПроблем <> 0 Тогда
				
				РежимПереносаДанных = "Исправить";
				Элементы.РежимПереносаДанныхИсправить.Видимость = Истина;
				Элементы.РежимПереносаДанныхПроверить.Видимость = Истина;
			Иначе
				РежимПереносаДанных = ?(ЕстьУчетВнеоборотныхАктивов2_4, "Проверить", "");
				Элементы.РежимПереносаДанныхИсправить.Видимость = Ложь;
				Элементы.РежимПереносаДанныхПроверить.Видимость = ЕстьУчетВнеоборотныхАктивов2_4;
			КонецЕсли;
			
			Элементы.РежимПереносаДанныхЗаново.Видимость = ЕстьУчетВнеоборотныхАктивов2_4;
			Элементы.РежимПереносаДанныхПродолжить.Видимость = Ложь;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Элементы.ГруппаВыборРежимаПереносаДанных.Видимость = 
		Элементы.РежимПереносаДанныхПродолжить.Видимость
		ИЛИ Элементы.РежимПереносаДанныхИсправить.Видимость
		ИЛИ Элементы.РежимПереносаДанныхЗаново.Видимость;
		
	ОформитьСтраницуПереносДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПереносДанных(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПереносДанныхЗаголовок.Видимость = Истина;
	Элементы.ДекорацияСтатусПереносаДанных.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	
	ЗаголовокСтатусаЗавершения = Новый Массив;
	Если РежимПереносаДанных = "Исправить" Тогда
		ЗаголовокСтатусаЗавершения.Добавить(НСтр("ru = 'Выполняется исправление ошибок, подождите...';
												|en = 'Correcting errors, please wait...'"));
	ИначеЕсли РежимПереносаДанных = "Проверить" Тогда
		ЗаголовокСтатусаЗавершения.Добавить(НСтр("ru = 'Выполняется проверка данных, подождите...';
												|en = 'Checking data, wait...'"));
	Иначе
		ЗаголовокСтатусаЗавершения.Добавить(НСтр("ru = 'Выполняется перенос данных, подождите...';
												|en = 'Transferring data, wait...'"));
	КонецЕсли; 
	ЗаголовокСтатусаЗавершения.Добавить(" ");
	ЗаголовокСтатусаЗавершения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отменить';
																		|en = 'cancel'"),,,, "#ОтменитьПереносДанных"));
	Элементы.ДекорацияЗаголовокПереносаданных.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокСтатусаЗавершения);
	
	УправлениеДоступностьюЭлементовПереносаДанных(Ложь);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("РежимПереносаДанных", РежимПереносаДанных);

	ДлительнаяОперация = ПеренестиДанныеНаСервере(
							ПараметрыПроцедуры, 
							УникальныйИдентификатор, 
							РежимПереносаДанных);
	
	АдресРезультата = ДлительнаяОперация.АдресРезультата;
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	ТекущийИнтервалПроверкиРезультата = 1;
			
	ПроверитьВыполнениеЗадания(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПеренестиДанныеНаСервере(Знач ПараметрыПроцедуры, Знач УникальныйИдентификатор, Знач РежимПереносаДанных)

	ИмяПроцедуры = "Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.ВыполнитьПереносДанных";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Выполнение помощника перехода на учет внеоборотных активов версии 2.4 (выполняется перенос данных)';
			|en = 'Running wizard of migration to capital asset accounting 2.4 (data is being transferred)'");
		
	Если РежимПереносаДанных = "Проверить" ИЛИ РежимПереносаДанных = "Исправить" Тогда
		КлючФоновогоЗадания = "";
	Иначе
		// В остальных режимах нельзя запускать одновременно несколько заданий
		КлючФоновогоЗадания = "ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24";
	КонецЕсли;
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	ДобавитьРезультатыВыполненияЗадания(
		ДлительнаяОперация, 
		ДлительнаяОперация.ИдентификаторЗадания,
		ДлительнаяОперация.АдресРезультата);
	
	Возврат ДлительнаяОперация;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеЗадания(Задание = Неопределено)
	
	Если Задание = Неопределено Тогда
		Задание = ПроверитьЗаданиеВыполнено(ИдентификаторЗадания, АдресРезультата);
	КонецЕсли;
	
	СостояниеЭтапов = ?(Задание.СостояниеЭтапов <> Неопределено, Новый ФиксированнаяСтруктура(Задание.СостояниеЭтапов), Неопределено);	
	
	ЗаполнитьСостояниеЭтаповПереносаДанных(ЭтотОбъект);
	
	Если Задание.Статус = "Выполнено" 
		ИЛИ Задание.Статус = "Ошибка" Тогда
		
		ОбработатьЗавершениеПереносаДанных(РезультатВыполненияЗадания(Задание));

	Иначе
		
		ТекущийИнтервалПроверкиРезультата = ТекущийИнтервалПроверкиРезультата * 1.4;
		Если ТекущийИнтервалПроверкиРезультата > 5 Тогда
			ТекущийИнтервалПроверкиРезультата = 5;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ТекущийИнтервалПроверкиРезультата, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	ПроверитьВыполнениеЗадания();

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция РезультатВыполненияЗадания(Задание)
	
	Если Задание = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", Задание.Статус);
	Результат.Вставить("КраткоеПредставлениеОшибки", Задание.КраткоеПредставлениеОшибки);
	Результат.Вставить("ПодробноеПредставлениеОшибки", Задание.ПодробноеПредставлениеОшибки);
	Результат.Вставить("Результат", Задание.Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаданиеВыполнено(Знач ИдентификаторЗадания, Знач АдресРезультата)
	
	Задание = ДлительныеОперации.ОперацияВыполнена(ИдентификаторЗадания);
	
	ДобавитьРезультатыВыполненияЗадания(Задание, ИдентификаторЗадания, АдресРезультата);
	
	Возврат Задание;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьРезультатыВыполненияЗадания(Задание, ИдентификаторЗадания, АдресРезультата)

	Если ИдентификаторЗадания <> Неопределено Тогда
		Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	Иначе
		Прогресс = Неопределено;
	КонецЕсли;
	Задание.Вставить("СостояниеЭтапов", ?(Прогресс <> Неопределено, Прогресс.ДополнительныеПараметры, Неопределено));
	Задание.Вставить("Результат", ПолучитьИзВременногоХранилища(АдресРезультата));

КонецПроцедуры
 
&НаКлиенте
Процедура ОбработатьЗавершениеПереносаДанных(РезультатВыполненияЗадания)

	Если РезультатВыполненияЗадания <> Неопределено 
		И РезультатВыполненияЗадания.Статус = "Ошибка"
		И НЕ ЗначениеЗаполнено(РезультатВыполненияЗадания.ПодробноеПредставлениеОшибки)
		И НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		РезультатВыполненияЗадания.Статус = "Отменено";
	КонецЕсли; 
	
	ИдентификаторЗадания = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если РезультатВыполненияЗадания <> Неопределено
		И РезультатВыполненияЗадания.Результат <> Неопределено Тогда
		РезультатыПереносаДанных = Новый ФиксированнаяСтруктура(РезультатВыполненияЗадания.Результат);
	Иначе
		РезультатыПереносаДанных = Неопределено;
	КонецЕсли;
	
	УправлениеДоступностьюЭлементовПереносаДанных(Истина);
	
	Если РезультатВыполненияЗадания <> Неопределено Тогда
		СтатусФоновогоЗадания = РезультатВыполненияЗадания.Статус;
		ПодробноеПредставлениеОшибки = РезультатВыполненияЗадания.ПодробноеПредставлениеОшибки;
	Иначе
		СтатусФоновогоЗадания = "Ошибка";
		ПодробноеПредставлениеОшибки = Неопределено;
	КонецЕсли; 
	
	РезультатВыполненияФоновогоЗадания = Новый ФиксированнаяСтруктура(
		"СтатусФоновогоЗадания,ПодробноеПредставлениеОшибки",
		СтатусФоновогоЗадания,
		ПодробноеПредставлениеОшибки);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ИзменениеПараметровОС2_4"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ИзменениеПараметровНМА2_4"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОбъектыПроблемСостоянияСистемы"));
	Оповестить("Запись_ГруппыФинансовогоУчетаВнеоборотныхАктивов");
	Оповестить("Запись_ВводОстатковВнеоборотныхАктивов2_4");
	Оповестить("Запись_ИзменениеПараметровОС2_4");
	Оповестить("Запись_ИзменениеПараметровНМА2_4");
	
	Если РезультатВыполненияФоновогоЗадания.СтатусФоновогоЗадания = "Отменено"
		ИЛИ РезультатВыполненияФоновогоЗадания.СтатусФоновогоЗадания = "Ошибка" Тогда
		
		Если РезультатВыполненияФоновогоЗадания.СтатусФоновогоЗадания = "Ошибка"
			И НЕ ВводДоступен() Тогда
		
			Если РежимПереносаДанных = "Проверить" Тогда
				ТекстОповещения = НСтр("ru = 'Проверка данных не завершена';
										|en = 'Data check not complete'");
			Иначе
				ТекстОповещения = НСтр("ru = 'Перенос данных не завершен';
										|en = 'Data transfer is not completed'");
			КонецЕсли; 
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Помощник перехода';
												|en = 'Migration wizard'"),, ТекстОповещения, БиблиотекаКартинок.Ошибка32);
			
		КонецЕсли;
		
		ПоказатьШаг("ПереносДанных");
		
	Иначе
		
		Если НЕ ВводДоступен() Тогда
			Если РежимПереносаДанных = "Проверить" Тогда
				ТекстОповещения = НСтр("ru = 'Проверка данных завершена';
										|en = 'Data check is completed'");
			Иначе
				ТекстОповещения = НСтр("ru = 'Перенос данных завершен';
										|en = 'Data transfer is completed'");
			КонецЕсли; 
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Помощник перехода';
												|en = 'Migration wizard'"),, ТекстОповещения);
		КонецЕсли; 
		
		ПерейтиКШагу(1);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСостояниеЭтаповПереносаДанных(Форма)

	ОформитьСостояниеЭтапаПереносаДанных("УдалениеДанных", Форма, Ложь);
	ОформитьСостояниеЭтапаПереносаДанных("СозданиеГФУ", Форма, Ложь);
	ОформитьСостояниеЭтапаПереносаДанных("ПереносПараметровУчетаОС", Форма);
	ОформитьСостояниеЭтапаПереносаДанных("ПереносПараметровУчетаАрендованныхОС", Форма);
	ОформитьСостояниеЭтапаПереносаДанных("ПереносПараметровУчетаНМА", Форма);
	ОформитьСостояниеЭтапаПереносаДанных("ПереносВложенийВоВнеоборотныеАктивы", Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьСостояниеЭтапаПереносаДанных(ИмяЭтапа, Форма, ПоказатьПроцентВыполнения = Истина)

	Элементы = Форма.Элементы;
	ЗаголовкиЭтаповПереносаДанных = Форма.ЗаголовкиЭтаповПереносаДанных;
	СостояниеЭтапов = Форма.СостояниеЭтапов;
	
	ДекорацияОписание = Элементы["ОписаниеЭтап"  + ИмяЭтапа];
	ДекорацияКартинка = Элементы["ИндикаторЭтап" + ИмяЭтапа];
	
	Если СостояниеЭтапов <> Неопределено
		И (ЗначениеЗаполнено(Форма.ИдентификаторЗадания)
			ИЛИ Форма.РежимПереносаДанных = "Продолжить") Тогда
			
		ЭтапЗавершен = ?(Форма.РежимПереносаДанных = "Проверить", 
								СостояниеЭтапов[ИмяЭтапа].ПроверкаЗавершена, 
								СостояниеЭтапов[ИмяЭтапа].ПереносЗавершен);
								
		Прогресс = СостояниеЭтапов[ИмяЭтапа].Прогресс;
	Иначе
		ЭтапЗавершен = Ложь;
		Прогресс = Неопределено;
	КонецЕсли;
		
	Если ЭтапЗавершен = Истина Тогда
		
		ДекорацияОписание.Заголовок = ЗаголовкиЭтаповПереносаДанных[ИмяЭтапа];
		ДекорацияКартинка.Картинка = БиблиотекаКартинок.Успешно;
	
	ИначеЕсли Прогресс <> Неопределено Тогда
		
		СостояниеЭтапа = " (" + Формат(Прогресс, "ЧН=0") + "%)";
		ДекорацияОписание.Заголовок = ЗаголовкиЭтаповПереносаДанных[ИмяЭтапа] + ?(ПоказатьПроцентВыполнения, СостояниеЭтапа, "");
		ДекорацияКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
		
		ДекорацияОписание.Заголовок = ЗаголовкиЭтаповПереносаДанных[ИмяЭтапа];
		ДекорацияКартинка.Картинка = БиблиотекаКартинок.ОжидаетВыполнения;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьСтраницуПереносДанных(Форма)

	УстановитьЗаголовокКомандыПеренестиДанные(Форма);
	УстановитьЗаголовкиЭтаповПереносаДанных(Форма);
	ЗаполнитьСостояниеЭтаповПереносаДанных(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиЭтаповПереносаДанных(Форма)

	Элементы = Форма.Элементы;
	
	Если Форма.РежимПереносаДанных = "Проверить" Тогда
		Элементы.ГруппаПереносДанныхОписание.Заголовок = НСтр("ru = 'Порядок проверки данных';
																|en = 'Data check order'");
		Элементы.ОписаниеЭтапУдалениеДанных.Заголовок = НСтр("ru = 'Удаление результатов проверки';
															|en = 'Delete check results'");
		Элементы.ОписаниеЭтапСозданиеГФУ.Заголовок = НСтр("ru = 'Проверка НСИ';
															|en = 'Check master data'");
		Элементы.ОписаниеЭтапПереносПараметровУчетаОС.Заголовок = НСтр("ru = 'Проверка параметров учета основных средств';
																		|en = 'Check accounting parameters of fixed assets'");
		Элементы.ОписаниеЭтапПереносПараметровУчетаАрендованныхОС.Заголовок = НСтр("ru = 'Проверка параметров учета арендованных основных средств';
																					|en = 'Check accounting parameters of leased fixed assets'");
		Элементы.ОписаниеЭтапПереносПараметровУчетаНМА.Заголовок = НСтр("ru = 'Проверка параметров учета НМА и расходов на НИОКР';
																		|en = 'Check accounting parameters of IA and R&D expenses'");
		Элементы.ОписаниеЭтапПереносВложенийВоВнеоборотныеАктивы.Заголовок = НСтр("ru = 'Проверка вложений во внеоборотные активы';
																					|en = 'Check investments in capital assets'");
	Иначе
		Элементы.ГруппаПереносДанныхОписание.Заголовок = НСтр("ru = 'Порядок переноса данных';
																|en = 'Data transfer procedure'");
		Элементы.ОписаниеЭтапУдалениеДанных.Заголовок = НСтр("ru = 'Удаление результатов проверки';
															|en = 'Delete check results'");
		Элементы.ОписаниеЭтапСозданиеГФУ.Заголовок = НСтр("ru = 'Заполнение групп финансового учета внеоборотных активов';
															|en = 'Fill in groups of financial accounting of capital assets'");
		Элементы.ОписаниеЭтапПереносПараметровУчетаОС.Заголовок = НСтр("ru = 'Перенос параметров учета основных средств';
																		|en = 'Transfer of accounting parameters of fixed assets'");
		Элементы.ОписаниеЭтапПереносПараметровУчетаАрендованныхОС.Заголовок = НСтр("ru = 'Перенос параметров учета арендованных основных средств';
																					|en = 'Transfer of accounting parameters of leased fixed assets'");
		Элементы.ОписаниеЭтапПереносПараметровУчетаНМА.Заголовок = НСтр("ru = 'Перенос параметров учета НМА и расходов на НИОКР';
																		|en = 'Transfer accounting parameters of IA and R&D expenses'");
		Элементы.ОписаниеЭтапПереносВложенийВоВнеоборотныеАктивы.Заголовок = НСтр("ru = 'Перенос вложений во внеоборотные активы';
																					|en = 'Transfer investments in capital assets'");
	КонецЕсли; 

	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("УдалениеДанных", Элементы.ОписаниеЭтапУдалениеДанных.Заголовок);
	СтруктураЗаголовков.Вставить("СозданиеГФУ", Элементы.ОписаниеЭтапСозданиеГФУ.Заголовок);
	СтруктураЗаголовков.Вставить("ПереносПараметровУчетаОС", Элементы.ОписаниеЭтапПереносПараметровУчетаОС.Заголовок);
	СтруктураЗаголовков.Вставить("ПереносПараметровУчетаАрендованныхОС", Элементы.ОписаниеЭтапПереносПараметровУчетаАрендованныхОС.Заголовок);
	СтруктураЗаголовков.Вставить("ПереносПараметровУчетаНМА", Элементы.ОписаниеЭтапПереносПараметровУчетаНМА.Заголовок);
	СтруктураЗаголовков.Вставить("ПереносВложенийВоВнеоборотныеАктивы", Элементы.ОписаниеЭтапПереносВложенийВоВнеоборотныеАктивы.Заголовок);
	Форма.ЗаголовкиЭтаповПереносаДанных = Новый ФиксированнаяСтруктура(СтруктураЗаголовков);
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКомандыПеренестиДанные(Форма)

	Если Форма.РежимПереносаДанных = "Продолжить" Тогда
		ЗаголовокКоманды = НСтр("ru = 'Продолжить перенос данных';
								|en = 'Continue data transfer'");
		Форма.Элементы.ГруппаЭтапУдалениеДанных.Видимость = Ложь;
	ИначеЕсли Форма.РежимПереносаДанных = "Исправить" Тогда
		ЗаголовокКоманды = НСтр("ru = 'Исправить ошибки';
								|en = 'Correct errors'");
		Форма.Элементы.ГруппаЭтапУдалениеДанных.Видимость = Ложь;
	ИначеЕсли Форма.РежимПереносаДанных = "Проверить" Тогда
		ЗаголовокКоманды = НСтр("ru = 'Проверить данные';
								|en = 'Check data'");
		Форма.Элементы.ГруппаЭтапУдалениеДанных.Видимость = Истина;
	ИначеЕсли Форма.Элементы.ГруппаВыборРежимаПереносаДанных.Видимость Тогда
		ЗаголовокКоманды = НСтр("ru = 'Перенести повторно';
								|en = 'Transfer again'");
		Форма.Элементы.ГруппаЭтапУдалениеДанных.Видимость = Истина;
	Иначе
		ЗаголовокКоманды = НСтр("ru = 'Перенести данные';
								|en = 'Transfer data'");
		Форма.Элементы.ГруппаЭтапУдалениеДанных.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ПеренестиДанные.Заголовок = ЗаголовокКоманды;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОтменеВыполненияЗаданияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеЗадания()

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");

КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЭлементовПереносаДанных(ДоступностьКоманд)

	Элементы.КомандаНазад.Доступность = ДоступностьКоманд;
	Элементы.ПеренестиДанные.Доступность = ДоступностьКоманд;
	Элементы.ГруппаВыборРежимаПереносаДанных.Видимость = ДоступностьКоманд;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПереносаДанных()
	
	ЗаголовокСтатусаЗавершения = Неопределено;
	
	Если РезультатВыполненияФоновогоЗадания <> Неопределено
		И РезультатВыполненияФоновогоЗадания.СтатусФоновогоЗадания = "Отменено" Тогда
		
		КартинкаСтатусаЗавершения = БиблиотекаКартинок.Внимание48;
		
		Если РежимПереносаДанных = "Проверить" Тогда
			ЗаголовокСтатусаЗавершения = 
				НСтр("ru = 'Проверка данных была отменена';
					|en = 'Data check was canceled'");
		Иначе
			ЗаголовокСтатусаЗавершения = 
				НСтр("ru = 'Перенос данных был отменен';
					|en = 'Data transfer was canceled'");
		КонецЕсли; 
		
	ИначеЕсли РезультатВыполненияФоновогоЗадания <> Неопределено
		И РезультатВыполненияФоновогоЗадания.СтатусФоновогоЗадания = "Ошибка" Тогда
		
		КартинкаСтатусаЗавершения = БиблиотекаКартинок.Ошибка32;
		
		ЗаголовокСтатусаЗавершения = Новый Массив;
		
		Если ЗначениеЗаполнено(РезультатВыполненияФоновогоЗадания.ПодробноеПредставлениеОшибки) Тогда
			
			Если РежимПереносаДанных = "Проверить" Тогда
				
				ЗаголовокСтатусаЗавершения.Добавить(
					НСтр("ru = 'Проверка данных не завершена
		                  |Возникла ошибка, обратитесь к администратору';
		                  |en = 'Data check not complete.
		                  |An error occurred, contact your administrator'"));
					
				Иначе
					
				ЗаголовокСтатусаЗавершения.Добавить(
					НСтр("ru = 'Перенос данных не завершен
		                  |Возникла ошибка, обратитесь к администратору';
		                  |en = 'Data transfer is not completed 
		                  |An error occurred, contact administrator'"));
					
			КонецЕсли; 
			ЗаголовокСтатусаЗавершения.Добавить(" (");
			ЗаголовокСтатусаЗавершения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'информация об ошибке';
																				|en = 'information on error'"),,,, "#ПоказатьИнформациюОбОшибке"));
			ЗаголовокСтатусаЗавершения.Добавить(")");
		Иначе
			Если РежимПереносаДанных = "Проверить" Тогда
				ЗаголовокСтатусаЗавершения.Добавить(НСтр("ru = 'Проверка данных не завершена, возникла ошибка';
														|en = 'Data check not complete. An error occurred'"));
			Иначе
				ЗаголовокСтатусаЗавершения.Добавить(НСтр("ru = 'Перенос данных не завершен, возникла ошибка';
														|en = 'Data transfer is not completed, an error occurred'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЗаголовокСтатусаЗавершения <> Неопределено Тогда
		Элементы.ДекорацияСтатусПереносаДанных.Картинка = КартинкаСтатусаЗавершения;
		Элементы.ДекорацияЗаголовокПереносаданных.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокСтатусаЗавершения);
		Элементы.ГруппаПереносДанныхЗаголовок.Видимость = Истина;
	Иначе
		Элементы.ГруппаПереносДанныхЗаголовок.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаЗавершение

&НаСервере
Процедура ЗаполнитьСтраницуШагаЗавершение()

	ЗаполнитьСтатусЗавершенияПереносаДанных();
	ЗаполнитьСведенияОСозданныхДанных();
	
	Элементы.ДекорацияСрокИсправленияОшибок.Заголовок = 
		СтрШаблон(НСтр("ru = 'После перехода не рекомендуется изменять данные до %1
                        |Если данные будут изменены, то может потребоваться повторный переход';
                        |en = 'After data migration, it is not recommended that you change data till %1
                        |If data is changed, you may need to migrate data again'"), 
					Формат(ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4(), "ДЛФ=D"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусЗавершенияПереносаДанных()
	
	СведенияОПроблемах = Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.СведенияЗарегистрированныхПроблемах();
	
	Если СведенияОПроблемах.КоличествоПроблем <> 0 Тогда
		
		КартинкаСтатусаЗавершения = БиблиотекаКартинок.Внимание32;
		ЗаголовокСтатусаЗавершения = 
			?(РежимПереносаДанных = "Проверить",
				НСтр("ru = 'Проверка завершена, имеются ошибки';
					|en = 'Check completed, errors found'"),
				НСтр("ru = 'Для завершения перехода необходимо исправить ошибки';
					|en = 'Correct errors to complete transition'"));
		
		Элементы.ГруппаУстранениеПроблем.Видимость = Истина;
		
		Элементы.ДекорацияСрокИсправленияОшибок.Заголовок = 
			СтрШаблон(НСтр("ru = 'Ошибки необходимо устранить до закрытия месяца %1';
							|en = 'Resolve the errors before the month-end closing %1'"), 
						Формат(ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4(), "ДФ='ММММ гг ""г""'"));
		
	ИначеЕсли СведенияОПроблемах.КоличествоПредупреждений <> 0 Тогда
		
		КартинкаСтатусаЗавершения = БиблиотекаКартинок.Внимание32;
		ЗаголовокСтатусаЗавершения =
			?(РежимПереносаДанных = "Проверить",
				НСтр("ru = 'Проверка завершена, имеются предупреждения';
					|en = 'Check is completed, there are warnings'"),
				НСтр("ru = 'Переход завершен, имеются предупреждения';
					|en = 'Migration is completed, there are warnings'"));
		
		Элементы.ГруппаУстранениеПроблем.Видимость = Истина;
			
	Иначе

		КартинкаСтатусаЗавершения = БиблиотекаКартинок.Успешно32;
		ЗаголовокСтатусаЗавершения =
			?(РежимПереносаДанных = "Проверить",
				НСтр("ru = 'Проверка завершена, ошибки не обнаружены';
					|en = 'Check completed, no errors detected'"),
				НСтр("ru = 'Переход успешно завершен';
					|en = 'Migration is completed successfully'"));
			
		Элементы.ГруппаУстранениеПроблем.Видимость = Ложь;
		
	КонецЕсли; 
	
	Элементы.ГруппаЧтоДальше.Видимость = Истина;
	Элементы.ГруппаЗавершениеПримечаниеПодвал.Видимость = Истина;
	Элементы.КомандаДалее.Доступность = Истина;
	
	Элементы.ДекорацияКартинкаЗавершение.Картинка = КартинкаСтатусаЗавершения;
	Элементы.ДекорацияСтатусЗавершения.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокСтатусаЗавершения);
	
	ЗаполнитьСведенияОПроблемах(СведенияОПроблемах);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОСозданныхДанных()
	
	Если РезультатыПереносаДанных = Неопределено Тогда
		Элементы.ГруппаРезультатыПереходаСведения.Видимость = Ложь;
		Возврат;
	КонецЕсли; 
	
	Элементы.ГруппаРезультатыПереходаСведения.Видимость = Истина;

	Если РежимПереносаДанных = "Проверить" Тогда
		Элементы.ГруппаРезультатыПерехода.Заголовок = НСтр("ru = 'Результаты проверки';
															|en = 'Check results'");
		Элементы.ГруппаЧтоДальше.Видимость = Ложь;
		Элементы.ГруппаЗавершениеПримечаниеПодвал.Видимость = Ложь;
	Иначе
		Элементы.ГруппаРезультатыПерехода.Заголовок = НСтр("ru = 'Результаты перехода';
															|en = 'Migration results'");
		Элементы.ГруппаЧтоДальше.Видимость = Истина;
		Элементы.ГруппаЗавершениеПримечаниеПодвал.Видимость = Истина;
	КонецЕсли; 
	
	СписокСтрокСведения = Новый Массив;
	
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Группам финансового учета: %1';
			|en = '- Financial accounting groups: %1'"),
		РезультатыПереносаДанных.СозданоГФУ,
		"ГруппыФинансовогоУчетаВнеоборотныхАктивов",
		СписокСтрокСведения);
	
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Собственным основным средствам: %1';
			|en = '- Own fixed assets: %1'"),
		РезультатыПереносаДанных.ПеренесеныПараметрыУчетаСобственныхОС,
		"ВводОстатковОсновныхСредств",
		СписокСтрокСведения);
		    
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Переданным в аренду предметам лизинга на балансе: %1';
			|en = '- Leased-out leasing items on the balance sheet: %1'"),
		РезультатыПереносаДанных.ПеренесеныПараметрыУчетаПереданныхВАрендуПредметовЛизингаНаБалансе,
		"ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе",
		СписокСтрокСведения);
		
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Переданным в аренду основным средствам: %1';
			|en = '- Leased out fixed assets: %1'"),
		РезультатыПереносаДанных.ПеренесеныПараметрыУчетаПереданныхВАрендуОС,
		"ВводОстатковПереданныхВАрендуОС",
		СписокСтрокСведения);

	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Арендованным основным средствам: %1';
			|en = '- Leased fixed assets: %1'"),
		РезультатыПереносаДанных.ПеренесеныПараметрыУчетаАрендованныхОС,
		"ВводОстатковАрендованныхОСЗаБалансом",
		СписокСтрокСведения);

	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Предметам лизинга на балансе: %1';
			|en = '- leasing items on the balance sheet: %1'"),
		РезультатыПереносаДанных.ПеренесеныПараметрыУчетаПредметовЛизингаНаБалансе,
		"ВводОстатковАрендованныхОСНаБалансе",
		СписокСтрокСведения);
		
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Предметам лизинга за балансом: %1';
			|en = '- Leasing items off the balance sheet: %1'"),
		РезультатыПереносаДанных.ПеренесеныПараметрыУчетаПредметовЛизингаЗаБалансом,
		"ВводОстатковПредметовЛизингаЗаБалансом",
		СписокСтрокСведения);

	ДобавитьСтрокуСведений(
	    НСтр("ru = '- НМА и расходам на НИОКР: %1';
			|en = '- IA and R&D expenses: %1'"),
		РезультатыПереносаДанных.ПеренесеныПараметрыУчетаНМАиРасходовНаНИОКР,
		"ВводОстатковНМАиРасходовНаНИОКР",
		СписокСтрокСведения);
		
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Вложениям во внеоборотные активы: %1';
			|en = '- Investments in capital assets: %1'"),
		РезультатыПереносаДанных.ПеренесеныВложенияВоВнеоборотныеАктивы,
		"ВводОстатковВложенийВоВнеоборотныеАктивы",
		СписокСтрокСведения);
		
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Изменениям параметров основных средств: %1';
			|en = '- Changes of fixed asset parameters: %1'"),
		РезультатыПереносаДанных.СозданоИзменениеПараметровОС,
		"ИзменениеПараметровОС",
		СписокСтрокСведения);
		
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Изменениям параметров НМА и расходов на НИОКР: %1';
			|en = '- Parameter change of IA and R&D expenses: %1'"),
		РезультатыПереносаДанных.СозданоИзменениеПараметровНМА,
		"ИзменениеПараметровНМА",
		СписокСтрокСведения);
		
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- Корректировке остатка регистра ""Активы и пассивы"": %1';
			|en = '- Balance correction of the Assets and liabilities register: %1'"),
		РезультатыПереносаДанных.СозданоВводОстатковПрочиеАктивыПассивы,
		"ВводОстатковПрочиеАктивыПассивы",
		СписокСтрокСведения);
		
	Если СписокСтрокСведения.Количество() <> 0 Тогда
		
		СписокСтрокСведения.Вставить(0, Символы.ПС);
		СписокСтрокСведения.Вставить(0, НСтр("ru = 'Перенесены данные по:';
											|en = 'Data is transferred:'"));
		
		Элементы.ГруппаРезультатыПереходаСведения.Видимость = Истина;
		Элементы.ДекорацияРезультатыПерехода.Заголовок = Новый ФорматированнаяСтрока(СписокСтрокСведения);
		
	Иначе
		Элементы.ГруппаРезультатыПереходаСведения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПроблемах(СведенияОПроблемах)
	
	Если СведенияОПроблемах.КоличествоПроблем = 0
		И СведенияОПроблемах.КоличествоПредупреждений = 0 Тогда
		Элементы.ГруппаРезультатыПереходаПроблемы.Видимость = Ложь;
		Возврат;
	КонецЕсли; 
	
	Элементы.ГруппаРезультатыПереходаПроблемы.Видимость = Истина;
	
	СписокСтрокСведения = Новый Массив;
	
	ДобавитьСтрокуСведений(
	    НСтр("ru = '- ошибки: %1';
			|en = '- errors: %1'"),
		СведенияОПроблемах.КоличествоПроблем,
		"#Ошибки",
		СписокСтрокСведения);

	ДобавитьСтрокуСведений(
	    НСтр("ru = '- предупреждения: %1';
			|en = '- warnings: %1'"),
		СведенияОПроблемах.КоличествоПредупреждений,
		"#Предупреждения",
		СписокСтрокСведения);
	
	Если СписокСтрокСведения.Количество() <> 0 Тогда
		
		СписокСтрокСведения.Вставить(0, Символы.ПС);
		СписокСтрокСведения.Вставить(0, НСтр("ru = 'Зарегистрированы:';
											|en = 'Registered:'"));
			
		Элементы.ГруппаУстранениеПроблем.Видимость = Истина;
		Элементы.ДекорацияРезультатыПереходаПроблемы.Заголовок = Новый ФорматированнаяСтрока(СписокСтрокСведения);
		Элементы.ДекорацияРезультатыПереходаКартинкаВнимание.Картинка = БиблиотекаКартинок.Внимание16;
		
	Иначе
		Элементы.ГруппаУстранениеПроблем.Видимость = Ложь;
		Элементы.ДекорацияРезультатыПереходаПроблемы.Заголовок = НСтр("ru = 'Ошибок при переносе данных не обнаружено';
																		|en = 'No errors detected when transferring data'");
		Элементы.ДекорацияРезультатыПереходаКартинкаВнимание.Картинка = БиблиотекаКартинок.ВниманиеСерый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуСведений(ТекстСтроки, КоличествоДанных, ГиперСсылка, СписокСтрокСведения)

	Если КоличествоДанных = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если СписокСтрокСведения.Количество() <> 0 Тогда
		СписокСтрокСведения.Добавить(Символы.ПС);
	КонецЕсли;
	СписокСтрокСведения.Добавить(СтрШаблон(ТекстСтроки, Формат(КоличествоДанных, "ЧГ=")));
	СписокСтрокСведения.Добавить(" ");
	СписокСтрокСведения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'открыть';
																	|en = 'open'"),,,, ГиперСсылка));

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		ВызватьИсключение НСтр("ru = 'Учет внеоборотных активов версии 2.2 не используется.
                                |Переход на версию 2.4 не требуется.';
                                |en = 'Capital asset accounting 2.2 is not used.
                                |Migration to version 2.4 is not required.'");
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
			ВызватьИсключение НСтр("ru = 'Перед использованием помощника необходимо выбрать версию учета 2.4 в разделе ""НСИ и администрирование"" - ""Внеоборотные активы""';
									|en = 'Before you use the wizard, go to ""Master data and settings"" - ""Capital assets"" and select the accounting version 2.4'");
		КонецЕсли;
		
		// Пользователи с ограниченными правами могут проверять и исправлять ошибки.
		Параметры.РежимПереносаДанных = "Проверить";
		
	КонецЕсли;
	
	ЗаполнитьПараметрыШаговПомощника();
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИдентификаторВводОстатков = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4);
	ИдентификаторИзменениеПараметровОС = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ИзменениеПараметровОС2_4);
	ИдентификаторИзменениеПараметровНМА = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ИзменениеПараметровНМА2_4);
	
	ДатаНачалаУчетаВнеоборотныхАктивов2_4 = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
	
КонецПроцедуры

&НаСервере
Процедура НайтиИОтменитьПереносДанных()

	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ", "ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24"));
	Для каждого Задание Из СписокЗаданий Цикл
		Попытка
			Задание.Отменить();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Помощник перехода на учет ВНА 2.4';
					|en = 'WIzard of migration to capital asset accounting 2.4'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьПараметрыШаговПомощника()
	
	Если Параметры.РежимПереносаДанных = "Проверить"
		ИЛИ Параметры.РежимПереносаДанных = "Исправить" Тогда
		
		// Форма открывается в режиме проверки данных
		Элементы.ДекорацияШагНачало.Видимость = Ложь;
		Элементы.ДекорацияШагПредварительныеНастройкиСтрелка.Видимость = Ложь;
		Элементы.ДекорацияШагПредварительныеНастройки.Видимость = Ложь;
		Элементы.ДекорацияШагПродолжитьСтрелка.Видимость = Ложь;
		Элементы.ДекорацияШагПереносДанных.Заголовок = НСтр("ru = 'Проверка данных';
															|en = 'Data validation'");
		
		ДобавитьПараметрыШага("ПереносДанных", "ПеренестиДанные", "ПеренестиДанные");
	Иначе
		ДобавитьПараметрыШага("Начало", "КомандаДалее");
		ДобавитьПараметрыШага("ПредварительныеНастройки", "КомандаНазад,КомандаДалее", "КомандаДалее");
		ДобавитьПараметрыШага("ПереносДанных", "ПеренестиДанные,КомандаНазад", "ПеренестиДанные");
	КонецЕсли;
	
	ДобавитьПараметрыШага("Завершение", "КомандаНазад,КомандаГотово");

КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрыШага(ИмяШага, СписокКоманд, КомандаПоУмолчанию = "")

	ПараметрыШага = ПараметрыПомощника.Добавить();
	ПараметрыШага.ИмяШага = ИмяШага;
	ПараметрыШага.СписокКоманд = СписокКоманд;
	ПараметрыШага.КомандаПоУмолчанию = ?(КомандаПоУмолчанию <> "", КомандаПоУмолчанию, СписокКоманд);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыШага(ИмяШага = "", Форма)

	СтруктураПоиска = Новый Структура("ИмяШага", ?(ИмяШага <> "", ИмяШага, ИмяТекущегоШага(Форма)));
	Возврат Форма.ПараметрыПомощника.НайтиСтроки(СтруктураПоиска)[0];

КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущегоШага(Форма)
	
	Возврат Сред(Форма.Элементы.ПанельОсновная.ТекущаяСтраница.Имя, 9);

КонецФункции

&НаСервере
Процедура УстановитьВидимостьПоФункциональнымОпциямИПравам()

	ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет = Ложь;
	
	//++ НЕ УТКА
	ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет");
	
	Если ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет Тогда
		Элементы.ДекорацияПроверитьГФУ.Заголовок =
			НСтр("ru = 'Рекомендуется проверить наименования у групп финансового учета и заполнить настройку счетов для шаблонов проводок международного учета';
				|en = 'It is recommended that you check names of financial accounting groups and fill in account settings for templates of international accounting postings'")
	КонецЕсли; 
	//-- НЕ УТКА
	
	Если ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
		
		Элементы.ДекорацияОписаниеВерсииУчета.Заголовок =
			НСтр("ru = 'Новые возможности и изменения версии:
                  |- Полноценный учет внеоборотных активов в управленческом учете;
                  |- Документы поддерживают отражение в регламентированном и в управленческом учетах одновременно или только в одном из них;
                  |- Учет активов в международном учете ведется по данным управленческого или регламентированного учетов (отдельные документы не используются);
                  |- Оптимизировано начисление амортизации по большому количеству ОС и НМА.';
                  |en = 'New features and changes of the version:
                  |- Full accounting of capital assets in management accounting
                  |- Documents support recording in local and management accounting simultaneously or only in one of them
                  |- Asset accounting in international accounting is kept by management or local accounting data (separate documents are not used)
                  |- Depreciation accrual by a large number of FA and IA is optimized.'");
		
		Элементы.ДекорацияЧтоДелаетПомощник.Заголовок = 
			НСтр("ru = 'Помощник создает и отражает в учете следующие документы:
	          |- Ввод начальных остатков внеоборотных активов (по активам уже принятым на баланс);
	          |- Ввод начальных остатков вложений во внеоборотные активы (по активам еще не принятым на баланс или при наличии модернизации);
	          |- Изменение параметров (при наличии документа в месяце перед переходом);
	          |- Ввод начальных остатков активов и пассивов (при использовании функциональных опций ""Учет внеоборотных активов Международном учете"" или ""Отражение начисленной амортизации регламентированного учета в управленческом учете"").';
	          |en = 'Wizard creates and records the following documents in accounting:
	          |- Enter start balance of capital assets (by assets already brought into the balance sheet)
	          |- Enter start balance of capital assets (by assets not yet brought into the balance sheet or if there is a renovation)
	          |- Parameter change (if there is a document in the month before the migration)
	          |- Enter start balance of assets and liabilities (if you use the ""Accounting of capital assets in international accounting"" and ""Record the accrued depreciation of local accounting in management accounting"" functional options).'");
		
	Иначе	
		
		Элементы.ДекорацияОписаниеВерсииУчета.Заголовок =
			НСтр("ru = 'Новые возможности и изменения версии:
                  |- Полноценный учет внеоборотных активов в управленческом учете;
                  |- Документы поддерживают отражение в регламентированном и в управленческом учетах одновременно или только в одном из них;
                  |- Оптимизировано начисление амортизации по большому количеству ОС и НМА.';
                  |en = 'New features and changes of the version:
                  |- Full accounting of capital assets in management accounting;
                  |- Documents can be recorded in local and management accounting simultaneously or only in one of them;
                  |- Depreciation charge by a large number of FA and IA was optimized.'");
		
		Элементы.ДекорацияЧтоДелаетПомощник.Заголовок = 
			НСтр("ru = 'Помощник создает и отражает в учете следующие документы:
	          |- Ввод начальных остатков внеоборотных активов (по активам уже принятым на баланс);
	          |- Ввод начальных остатков вложений во внеоборотные активы (по активам еще не принятым на баланс или при наличии модернизации);
	          |- Изменение параметров (при наличии документа в месяце перед переходом);
	          |- Ввод начальных остатков активов и пассивов (при использовании функциональной опции ""Отражение начисленной амортизации регламентированного учета в управленческом учете"").';
	          |en = 'Wizard creates and records the following documents in accounting:
	          |- Enter start balance of capital assets (by assets already brought into the balance sheet)
	          |- Enter start balance of investments in capital assets (by assets not yet brought into the balance sheet or if there is a renovation)
	          |- Parameter change (if there is a document in the month before the migration) 
	          |- Enter start balance of assets and liabilities (if you use the ""Record the accrued depreciation of local accounting in management accounting"" functional option.'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
