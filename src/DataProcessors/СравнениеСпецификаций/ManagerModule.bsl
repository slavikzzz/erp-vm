#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет сравнение нескольких ресурсных спецификаций.
//
// Параметры:
//  СписокСпецификаций	 - СписокЗначений	 - список сравниваемых спецификаций.
//  РежимСравненияИзделийИМатериалов - Число - Режим сравнения изделий и материалов, возможные значения:
//                                                                                    0 - в единицах хранения
//                                                                                    1 - в единицах спецификаций
// 
// Возвращаемое значение:
//  Структура - структура результата сравнения.
//
Функция ВыполнитьСравнениеСпецификаций(СписокСпецификаций, РежимСравненияИзделийИМатериалов) Экспорт
	
	ДанныеСравнения = Новый Структура;
	ДанныеСравнения.Вставить("СписокЭтапов",    Новый СписокЗначений);
	ДанныеСравнения.Вставить("ДанныеСравнения", Новый Соответствие);
	
	ПолучитьДанныеСпецификаций(ДанныеСравнения, СписокСпецификаций, РежимСравненияИзделийИМатериалов);
	
	ОтметитьОтличия(ДанныеСравнения, СписокСпецификаций.Количество());
	
	Возврат ДанныеСравнения;
	
КонецФункции

//++ Устарело_Производство21

// Выполняет сравнение изделия заказа на производство и ресурсной спецификации.
//
// Параметры:
//  ДанныеЗаказа	 - Структура		 - данные изделия, для которого происходит поиск спецификации для сравнения.
//  Этапы			 - ТаблицаЗначений	 - информация об этапах заказа на производство.
//  МатериалыИУслуги - ТаблицаЗначений	 - информация об материалах заказа на производство.
//  ВыходныеИзделия	 - ТаблицаЗначений	 - информация об выходных изделиях заказа на производство.
//  ВозвратныеОтходы - ТаблицаЗначений	 - информация о возвратных отходах заказа на производство.
//  ТаблицаВидыРЦ	 - ТаблицаЗначений	 - информация о видах рабочих центров.
// 
// Возвращаемое значение:
//  Структура - структура результата сравнения.
//
Функция ВыполнитьСравнениеЗаказаСоСпецификациями(ДанныеЗаказа, Этапы, МатериалыИУслуги, ВыходныеИзделия, ВозвратныеОтходы, ТаблицаВидыРЦ) Экспорт
	
	ДанныеСравнения = Новый Структура;
	ДанныеСравнения.Вставить("СписокЭтапов",    Новый СписокЗначений);
	ДанныеСравнения.Вставить("ДанныеСравнения", Новый Соответствие);
	
	СтрокиЭтапы = Этапы.НайтиСтроки(Новый Структура("КлючСвязиПродукция", ДанныеЗаказа.КлючСвязиПродукция));
	Для каждого ВыборкаЭтапов Из СтрокиЭтапы Цикл
		
		ОбъектСравнения = НСтр("ru = 'По заказу';
								|en = 'Against order'");
		
		КлючЭтапа = Строка(ВыборкаЭтапов.КлючЭтапа);
		ВыборкаЭтапов.КлючЭтапа = КлючЭтапа;
		
		ПолеЗначения = "Значение1";
		
		СтрокаЭтап = ДанныеСравнения.СписокЭтапов.НайтиПоЗначению(КлючЭтапа);
		Если СтрокаЭтап = Неопределено Тогда
			ПредставлениеЭтапа = Строка(ВыборкаЭтапов.Этап) + " (" + ВыборкаЭтапов.СпецификацияПредставление + ")";
			ДанныеСравнения.СписокЭтапов.Добавить(КлючЭтапа, ПредставлениеЭтапа);
			
			ДанныеСравненияЭтапа = ДанныеДляСравненияКонструктор();
			
			ДанныеСравнения.ДанныеСравнения.Вставить(КлючЭтапа, ДанныеСравненияЭтапа);
			
			ДанныеСравненияЭтапа.СписокСпецификаций = Новый Массив;
		Иначе
			ДанныеСравненияЭтапа = ДанныеСравнения.ДанныеСравнения.Получить(КлючЭтапа);
		КонецЕсли; 
		
		ДанныеСравненияЭтапа.СписокСпецификаций.Добавить(ОбъектСравнения);
		
		ДобавитьСвойстваЭтапа(ВыборкаЭтапов, ДанныеСравненияЭтапа.ТаблицаСвойств, ПолеЗначения);
		
		// ВыходныеИзделия
		СтрокиВыходныеИзделия = ВыходныеИзделия.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ВыборкаЭтапов.КлючСвязи));
		ДобавитьДанныеПоИзделиям21(СтрокиВыходныеИзделия, ДанныеСравненияЭтапа.ТаблицаИзделий, ПолеЗначения);
		
		// ВозвратныеОтходы
		СтрокиВозвратныеОтходы = ВозвратныеОтходы.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ВыборкаЭтапов.КлючСвязи));
		ДобавитьДанныеПоНоменклатуре21(СтрокиВозвратныеОтходы, ДанныеСравненияЭтапа.ТаблицаОтходов, ПолеЗначения);
		
		// МатериалыИУслуги
		СтрокиМатериалыИУслуги = МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ВыборкаЭтапов.КлючСвязи));
		ДобавитьДанныеПоНоменклатуре21(СтрокиМатериалыИУслуги, ДанныеСравненияЭтапа.ТаблицаМатериалов, ПолеЗначения);
		
		//++ НЕ УТКА
		
		// ВидыРабочихЦентров
		ДанныеТЧ = ТаблицаВидыРЦ.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ВыборкаЭтапов.КлючСвязи));
		ДобавитьДанныеПоВидамРЦ(ДанныеТЧ, ДанныеСравненияЭтапа.ТаблицаВидыРЦ, ПолеЗначения);
		
		//-- НЕ УТКА
		
	КонецЦикла;
	
	// Добавим данные по спецификации
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(
		,
		,
		Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводство);
	ПараметрыВыборки.ПолучитьПредставления = Истина;
	ПараметрыВыборки.ОкруглятьКоличествоШтучныхТоваров = Ложь;
	
	СтруктураДанных = Справочники.РесурсныеСпецификации.ДанныеСпецификацииСПолуфабрикатами(ДанныеЗаказа, Ложь, ПараметрыВыборки);
	
	СтруктураДанных.Этапы.Колонки.Добавить("КлючЭтапа", Новый ОписаниеТипов("Строка"));
	СтруктураДанных.Этапы.Колонки.Добавить("СпецификацияПредставление", Новый ОписаниеТипов("Строка"));
	СтруктураДанных.МатериалыИУслуги.Колонки.Добавить("КлючЭтапа", Новый ОписаниеТипов("Строка"));
	СтруктураДанных.ВыходныеИзделия.Колонки.Добавить("КлючЭтапа", Новый ОписаниеТипов("Строка"));
	СтруктураДанных.ВозвратныеОтходы.Колонки.Добавить("КлючЭтапа", Новый ОписаниеТипов("Строка"));
	//++ НЕ УТКА
	СтруктураДанных.ВидыРабочихЦентров.Колонки.Добавить("КлючЭтапа", Новый ОписаниеТипов("Строка"));
	//-- НЕ УТКА
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Этапы.Этап КАК Этап
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	&Этапы КАК Этапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТЭтапы.Этап КАК Этап,
	|	ВТЭтапы.Этап.Владелец.Представление КАК СпецификацияПредставление,
	|	ВТЭтапы.Этап.Владелец.Код КАК КодСпецификации
	|ИЗ
	|	ВТЭтапы КАК ВТЭтапы");
	
	Запрос.УстановитьПараметр("Этапы", СтруктураДанных.Этапы);
	ДанныеЭтапов = Запрос.Выполнить().Выбрать();
	СтруктураОтбора = Новый Структура("Этап");
	
	Для каждого ЭлКоллекции Из СтруктураДанных.Этапы Цикл
		
		СтруктураОтбора.Этап = ЭлКоллекции.Этап;
		ДанныеЭтапов.НайтиСледующий(СтруктураОтбора);
		ЭлКоллекции.КлючЭтапа = Строка(ЭлКоллекции.Этап.УникальныйИдентификатор())+ "_" + ДанныеЭтапов.КодСпецификации;
		ЭлКоллекции.СпецификацияПредставление = ДанныеЭтапов.СпецификацияПредставление;
		ДанныеЭтапов.Сбросить();
		
	КонецЦикла;
	
	Для каждого ЭлКоллекции Из СтруктураДанных.МатериалыИУслуги Цикл
		СтруктураОтбора.Этап = ЭлКоллекции.Этап;
		ДанныеЭтапов.НайтиСледующий(СтруктураОтбора);
		ЭлКоллекции.КлючЭтапа = Строка(ЭлКоллекции.Этап.УникальныйИдентификатор())+ "_" + ДанныеЭтапов.КодСпецификации;
		ДанныеЭтапов.Сбросить();
	КонецЦикла;
	Для каждого ЭлКоллекции Из СтруктураДанных.ВыходныеИзделия Цикл
		СтруктураОтбора.Этап = ЭлКоллекции.Этап;
		ДанныеЭтапов.НайтиСледующий(СтруктураОтбора);
		ЭлКоллекции.КлючЭтапа = Строка(ЭлКоллекции.Этап.УникальныйИдентификатор())+ "_" + ДанныеЭтапов.КодСпецификации;
		ДанныеЭтапов.Сбросить();
	КонецЦикла;
	Для каждого ЭлКоллекции Из СтруктураДанных.ВозвратныеОтходы Цикл
		СтруктураОтбора.Этап = ЭлКоллекции.Этап;
		ДанныеЭтапов.НайтиСледующий(СтруктураОтбора);
		ЭлКоллекции.КлючЭтапа = Строка(ЭлКоллекции.Этап.УникальныйИдентификатор())+ "_" + ДанныеЭтапов.КодСпецификации;
		ДанныеЭтапов.Сбросить();
	КонецЦикла;
	//++ НЕ УТКА
	Для каждого ЭлКоллекции Из СтруктураДанных.ВидыРабочихЦентров Цикл
		СтруктураОтбора.Этап = ЭлКоллекции.Этап;
		ДанныеЭтапов.НайтиСледующий(СтруктураОтбора);
		ЭлКоллекции.КлючЭтапа = Строка(ЭлКоллекции.Этап.УникальныйИдентификатор())+ "_" + ДанныеЭтапов.КодСпецификации;
		ДанныеЭтапов.Сбросить();
	КонецЦикла;
	//-- НЕ УТКА
	Для каждого ВыборкаЭтапов Из СтруктураДанных.Этапы Цикл
		
		ОбъектСравнения = ДанныеЗаказа.Спецификация;
		
		КлючЭтапа = Строка(ВыборкаЭтапов.КлючЭтапа);
		ВыборкаЭтапов.КлючЭтапа = КлючЭтапа;
		
		ПолеЗначения = "Значение";
		
		СтрокаЭтап = ДанныеСравнения.СписокЭтапов.НайтиПоЗначению(КлючЭтапа);
		Если СтрокаЭтап = Неопределено Тогда
			
			ПредставлениеЭтапа = Строка(ВыборкаЭтапов.Этап) + " (" + ВыборкаЭтапов.СпецификацияПредставление + ")";
			ДанныеСравнения.СписокЭтапов.Добавить(КлючЭтапа, ПредставлениеЭтапа);
			
			ДанныеСравненияЭтапа = ДанныеДляСравненияКонструктор();
			
			ДанныеСравнения.ДанныеСравнения.Вставить(КлючЭтапа, ДанныеСравненияЭтапа);
			
			ДанныеСравненияЭтапа.СписокСпецификаций = Новый Массив;
		Иначе
			ДанныеСравненияЭтапа = ДанныеСравнения.ДанныеСравнения.Получить(КлючЭтапа);
		КонецЕсли; 
		
		ДанныеСравненияЭтапа.СписокСпецификаций.Добавить(ОбъектСравнения);
		
		ДобавитьСвойстваЭтапа(ВыборкаЭтапов, ДанныеСравненияЭтапа.ТаблицаСвойств, ПолеЗначения);
		
		// ВыходныеИзделия
		СтрокиВыходныеИзделия = СтруктураДанных.ВыходныеИзделия.НайтиСтроки(Новый Структура("КлючЭтапа", ВыборкаЭтапов.КлючЭтапа));
		ДобавитьДанныеПоИзделиям21(СтрокиВыходныеИзделия, ДанныеСравненияЭтапа.ТаблицаИзделий, ПолеЗначения);
		
		// ВозвратныеОтходы
		СтрокиВозвратныеОтходы = СтруктураДанных.ВозвратныеОтходы.НайтиСтроки(Новый Структура("КлючЭтапа", ВыборкаЭтапов.КлючЭтапа));
		ДобавитьДанныеПоНоменклатуре21(СтрокиВозвратныеОтходы, ДанныеСравненияЭтапа.ТаблицаОтходов, ПолеЗначения);
		
		// МатериалыИУслуги
		СтрокиМатериалыИУслуги = СтруктураДанных.МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючЭтапа", ВыборкаЭтапов.КлючЭтапа));
		ДобавитьДанныеПоНоменклатуре21(СтрокиМатериалыИУслуги, ДанныеСравненияЭтапа.ТаблицаМатериалов, ПолеЗначения);
		
		//++ НЕ УТКА
		
		// ВидыРабочихЦентров
		СтрокиВидыРЦ = СтруктураДанных.ВидыРабочихЦентров.НайтиСтроки(Новый Структура("КлючЭтапа", ВыборкаЭтапов.КлючЭтапа));
		ДобавитьДанныеПоВидамРЦ(СтрокиВидыРЦ, ДанныеСравненияЭтапа.ТаблицаВидыРЦ, ПолеЗначения);
		
		//-- НЕ УТКА
		
	КонецЦикла;
	
	ОтметитьОтличия(ДанныеСравнения, 2);
	
	Возврат ДанныеСравнения;
	
КонецФункции

//-- Устарело_Производство21

// Настраивает макет для отчета о сравнении спецификаций.
//
// Параметры:
//  РезультатСравнения	 - ТабличныйДокумент - для вывода результата сравнения.
//  ЕстьОтличия			 - Булево			 - флаг наличия отличий.
//
Процедура ЗавершитьВыводОтчета(РезультатСравнения, ЕстьОтличия) Экспорт
	
	Если ЕстьОтличия Тогда
		Возврат;
	КонецЕсли;
	
	МакетОтчета = Обработки.СравнениеСпецификаций.ПолучитьМакет("Макет");
	
	ОбластьСтрокаНетОтличий = МакетОтчета.ПолучитьОбласть("СтрокаНетОтличий");
	
	РезультатСравнения.Вывести(ОбластьСтрокаНетОтличий);
	
КонецПроцедуры

// Выводит результат сравнения в табличный документ.
//
// Параметры:
//  РезультатСравнения		 - ТабличныйДокумент - для вывода результата сравнения.
//  СписокСпецификаций		 - СписокЗначений	 - список сравниваемых спецификаций.
//  ПоказатьТолькоОтличия	 - Булево			 - если Истина, то выводятся только отличия.
//  ДанныеСравнения			 - Структура		 - результат сравнения, где:
//   * ДанныеСравнения		 - Соответствие из КлючИЗначение -
//   * СписокЭтапов			 - СписокЗначений из Строка - 
//  ЗаголовокОтчета			 - Строка			 - Заголовок отчета.
//  СтрокаЗаказа			 - Число			 - Строка заказа, если в сравнении присутствует заказ на производство.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть отличия.
//
Функция ВывестиОтчет(
		РезультатСравнения, 
		СписокСпецификаций, 
		ПоказатьТолькоОтличия, 
		ДанныеСравнения, 
		ЗаголовокОтчета = Неопределено, 
		СтрокаЗаказа = Неопределено) Экспорт
	
	МакетОтчета = Обработки.СравнениеСпецификаций.ПолучитьМакет("Макет");
	
	// Заголовок отчета
	Если ЗаголовокОтчета = Неопределено Тогда
		ЗаголовокОтчета = НСтр("ru = 'Сравнение спецификаций';
								|en = 'Compare bills of materials'");
	КонецЕсли;
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ЗаголовокОтчета;
	РезультатСравнения.Вывести(ОбластьЗаголовок);
	
	Если СтрокаЗаказа <> Неопределено Тогда
		
		Если ПоказатьТолькоОтличия Тогда
			ЕстьОтличия = Ложь;
			Для каждого ДанныеЭтапа Из ДанныеСравнения.СписокЭтапов Цикл
				
				ДанныеСравненияЭтапа = ДанныеСравнения.ДанныеСравнения.Получить(ДанныеЭтапа.Значение);
				
				Если ДанныеСравненияЭтапа.СписокСпецификаций.Количество() <> СписокСпецификаций.Количество() 
					ИЛИ ДанныеСравненияЭтапа.ТаблицаСвойств.Найти(Истина, "ЕстьОтличия") <> Неопределено 
					ИЛИ ДанныеСравненияЭтапа.ТаблицаИзделий.Найти(Истина, "ЕстьОтличия") <> Неопределено 
					ИЛИ ДанныеСравненияЭтапа.ТаблицаОтходов.Найти(Истина, "ЕстьОтличия") <> Неопределено 
					ИЛИ ДанныеСравненияЭтапа.ТаблицаВходящихИзделий.Найти(Истина, "ЕстьОтличия") <> Неопределено 
					ИЛИ ДанныеСравненияЭтапа.ТаблицаМатериалов.Найти(Истина, "ЕстьОтличия") <> Неопределено
					ИЛИ ДанныеСравненияЭтапа.ТаблицаТрудозатрат.Найти(Истина, "ЕстьОтличия") <> Неопределено
					//++ НЕ УТКА
					ИЛИ ДанныеСравненияЭтапа.ТаблицаВидыРЦ.Найти(Истина, "ЕстьОтличия") <> Неопределено 
					//-- НЕ УТКА
					Тогда
					
					ЕстьОтличия = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьОтличия Тогда
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли;
		
		ОбластьСтрокаЗаказа = МакетОтчета.ПолучитьОбласть("СтрокаЗаказа");
		ОбластьСтрокаЗаказа.Параметры.СтрокаЗаказа = СтрокаЗаказа;
		РезультатСравнения.Вывести(ОбластьСтрокаЗаказа);
		РезультатСравнения.НачатьГруппуСтрок("СтрокаЗаказа");
	КонецЕсли;
	
	// Область "Шапка"
	ОбластьШапкаНазвание = МакетОтчета.ПолучитьОбласть("Шапка|НазванияСвойств");
	ОбластьШапкаИсточник = МакетОтчета.ПолучитьОбласть("Шапка|СвойстваИсточник");
	
	// Область "Этап"
	ОбластьЭтапНазвание = МакетОтчета.ПолучитьОбласть("Этап|НазванияСвойств");
	ОбластьЭтапИсточник = МакетОтчета.ПолучитьОбласть("Этап|СвойстваИсточник");
	
	// Область "ГруппаСвойств"
	ОбластьГруппаСвойствНазвание = МакетОтчета.ПолучитьОбласть("ГруппаСвойств|НазванияСвойств");
	ОбластьГруппаСвойствИсточник = МакетОтчета.ПолучитьОбласть("ГруппаСвойств|СвойстваИсточник");
	
	// Область "СвойстваСтрока"
	ОбластьСвойстваСтрокаНазвание = МакетОтчета.ПолучитьОбласть("СвойстваСтрока|НазванияСвойств");
	ОбластьСвойстваСтрокаИсточник = МакетОтчета.ПолучитьОбласть("СвойстваСтрока|СвойстваИсточник");
	
	//////////////////////////////////////
	// ВЫВОД ОТЧЕТА
	
	// Выводим реквизиты спецификаций
	СтруктураСравненияДанных = ДанныеСравнения.ДанныеСравнения.Получить(КлючРеквизитыСпецификаций());
	Если СтруктураСравненияДанных <> Неопределено
		И ЗначениеЗаполнено(СтруктураСравненияДанных.ТаблицаРеквизитов) Тогда
		
		Если (ПоказатьТолькоОтличия И СтруктураСравненияДанных.ТаблицаРеквизитов.Найти(Истина, "ЕстьОтличия") <> Неопределено
			ИЛИ Не ПоказатьТолькоОтличия) Тогда
			
			ОбластьШапкаНазвание.Параметры.Заголовок = НСтр("ru = 'Реквизиты';
															|en = 'Attributes'");
			РезультатСравнения.Вывести(ОбластьШапкаНазвание);
			Для каждого ЭлКоллекции Из СписокСпецификаций Цикл
				ОбластьШапкаИсточник.Параметры.ИмяИсточника         = ЭлКоллекции.Представление;
				ОбластьШапкаИсточник.Параметры.РасшифровкаИсточника = ЭлКоллекции.Значение;
				РезультатСравнения.Присоединить(ОбластьШапкаИсточник);
			КонецЦикла;
			
			ВывестиСписокСвойств(СтруктураСравненияДанных.ТаблицаРеквизитов, 
									ОбластьСвойстваСтрокаНазвание,
									ОбластьСвойстваСтрокаИсточник,
									РезультатСравнения,
									СписокСпецификаций,
									ПоказатьТолькоОтличия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//++ НЕ УТКА
	
	// Выводим параметры назначения
	СтруктураСравненияДанных = ДанныеСравнения.ДанныеСравнения.Получить(КлючРеквизитыСпецификаций());
	Если СтруктураСравненияДанных <> Неопределено
		И ЗначениеЗаполнено(СтруктураСравненияДанных.ТаблицаПараметровНазначения) Тогда
		
		Если (ПоказатьТолькоОтличия И СтруктураСравненияДанных.ТаблицаПараметровНазначения.Найти(Истина, "ЕстьОтличия") <> Неопределено
			ИЛИ Не ПоказатьТолькоОтличия) Тогда
			
			ОбластьШапкаНазвание.Параметры.Заголовок = НСтр("ru = 'Параметры назначения';
															|en = 'Assignment parameters'");
			РезультатСравнения.Вывести(ОбластьШапкаНазвание);
			Для каждого ЭлКоллекции Из СписокСпецификаций Цикл
				ОбластьШапкаИсточник.Параметры.ИмяИсточника         = ЭлКоллекции.Представление;
				ОбластьШапкаИсточник.Параметры.РасшифровкаИсточника = ЭлКоллекции.Значение;
				РезультатСравнения.Присоединить(ОбластьШапкаИсточник);
			КонецЦикла;
			
			ВывестиСписокСвойств(СтруктураСравненияДанных.ТаблицаПараметровНазначения,
									ОбластьСвойстваСтрокаНазвание,
									ОбластьСвойстваСтрокаИсточник,
									РезультатСравнения,
									СписокСпецификаций,
									ПоказатьТолькоОтличия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	ЕстьОтличия = Ложь;
	ШапкаЭтаповВыведена = Ложь;
	
	// Выводим данные этапов
	Для каждого ДанныеЭтапа Из ДанныеСравнения.СписокЭтапов Цикл
		
		ДанныеСравненияЭтапа = ДанныеСравнения.ДанныеСравнения.Получить(ДанныеЭтапа.Значение);
		
		// Этап не нужно выводить если:
		// - нужно показать только отличия
		// - у всех спецификаций есть этап
		// - нет различия в свойствах.
		Если ПоказатьТолькоОтличия 
			И ДанныеСравненияЭтапа.СписокСпецификаций.Количество() = СписокСпецификаций.Количество()
			И ДанныеСравненияЭтапа.ТаблицаСвойств.Найти(Истина, "ЕстьОтличия") = Неопределено
			И ДанныеСравненияЭтапа.ТаблицаИзделий.Найти(Истина, "ЕстьОтличия") = Неопределено
			И ДанныеСравненияЭтапа.ТаблицаОтходов.Найти(Истина, "ЕстьОтличия") = Неопределено
			И ДанныеСравненияЭтапа.ТаблицаВходящихИзделий.Найти(Истина, "ЕстьОтличия") = Неопределено
			И ДанныеСравненияЭтапа.ТаблицаМатериалов.Найти(Истина, "ЕстьОтличия") = Неопределено
			И ДанныеСравненияЭтапа.ТаблицаТрудозатрат.Найти(Истина, "ЕстьОтличия") = Неопределено
			//++ НЕ УТКА
			И ДанныеСравненияЭтапа.ТаблицаВидыРЦ.Найти(Истина, "ЕстьОтличия") = Неопределено
			И ДанныеСравненияЭтапа.ТаблицаОпераций.Найти(Истина, "ЕстьОтличия") = Неопределено
			//-- НЕ УТКА
			Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ШапкаЭтаповВыведена Тогда
			// Выведем шапку раздела "Этапы" отчета
			ОбластьШапкаНазвание.Параметры.Заголовок = НСтр("ru = 'Этапы';
															|en = 'Stages'");
			РезультатСравнения.Вывести(ОбластьШапкаНазвание);
			Для каждого ЭлКоллекции Из СписокСпецификаций Цикл
				ОбластьШапкаИсточник.Параметры.ИмяИсточника         = ЭлКоллекции.Представление;
				ОбластьШапкаИсточник.Параметры.РасшифровкаИсточника = ЭлКоллекции.Значение;
				РезультатСравнения.Присоединить(ОбластьШапкаИсточник);
			КонецЦикла;
			
			ШапкаЭтаповВыведена = Истина;
		КонецЕсли; 
		
		ЕстьОтличия = Истина;
		
		// Этап
		ОбластьЭтапНазвание.Параметры.Этап = ДанныеЭтапа.Представление;
		РезультатСравнения.Вывести(ОбластьЭтапНазвание, 2, "Этап");
		Для каждого ЭлКоллекции Из СписокСпецификаций Цикл
			ОбластьИсточник = РезультатСравнения.Присоединить(ОбластьЭтапИсточник);
			
			Если ДанныеСравненияЭтапа.СписокСпецификаций.Найти(ЭлКоллекции.Значение) = Неопределено Тогда
				ОбластьИсточник.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
				ОбластьИсточник.Текст = НСтр("ru = '<Отсутствует>';
											|en = '<missing>'");
			КонецЕсли;
		КонецЦикла;
		ОбластьИсточник.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		Если ДанныеСравненияЭтапа.СписокСпецификаций.Количество() < 2 Тогда
			// Не выводим свойства, если этот этап только у одной спецификации
			Продолжить;
		КонецЕсли; 
		
		РезультатСравнения.НачатьГруппуСтрок("Этап");
		
		ВывестиГруппуСвойств(НСтр("ru = 'Свойства';
									|en = 'Properties'"),
							ДанныеСравненияЭтапа.ТаблицаСвойств, 
							ОбластьГруппаСвойствНазвание, 
							ОбластьГруппаСвойствИсточник, 
							ОбластьСвойстваСтрокаНазвание, 
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
		
		ВывестиГруппуСвойств(Метаданные.Справочники.РесурсныеСпецификации.ТабличныеЧасти.ВыходныеИзделия.Синоним,
							ДанныеСравненияЭтапа.ТаблицаИзделий, 
							ОбластьГруппаСвойствНазвание, 
							ОбластьГруппаСвойствИсточник, 
							ОбластьСвойстваСтрокаНазвание, 
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
							
		ВывестиГруппуСвойств(Метаданные.Справочники.РесурсныеСпецификации.ТабличныеЧасти.ВозвратныеОтходы.Синоним,
							ДанныеСравненияЭтапа.ТаблицаОтходов, 
							ОбластьГруппаСвойствНазвание, 
							ОбластьГруппаСвойствИсточник, 
							ОбластьСвойстваСтрокаНазвание, 
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
			
		ВывестиГруппуСвойств(НСтр("ru = 'Разбираемые изделия';
									|en = 'Products for recycling'"),
							ДанныеСравненияЭтапа.ТаблицаВходящихИзделий, 
							ОбластьГруппаСвойствНазвание, 
							ОбластьГруппаСвойствИсточник, 
							ОбластьСвойстваСтрокаНазвание, 
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
		
		ВывестиГруппуСвойств(Метаданные.Справочники.РесурсныеСпецификации.ТабличныеЧасти.МатериалыИУслуги.Синоним,
							ДанныеСравненияЭтапа.ТаблицаМатериалов, 
							ОбластьГруппаСвойствНазвание, 
							ОбластьГруппаСвойствИсточник, 
							ОбластьСвойстваСтрокаНазвание, 
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
		
		ВывестиГруппуСвойств(Метаданные.Справочники.РесурсныеСпецификации.ТабличныеЧасти.Трудозатраты.Синоним,
							ДанныеСравненияЭтапа.ТаблицаТрудозатрат,
							ОбластьГруппаСвойствНазвание,
							ОбластьГруппаСвойствИсточник,
							ОбластьСвойстваСтрокаНазвание,
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
		
		//++ НЕ УТКА
		ВывестиГруппуСвойств(НСтр("ru = 'Виды рабочих центров';
									|en = 'Work center types'"),
							ДанныеСравненияЭтапа.ТаблицаВидыРЦ,
							ОбластьГруппаСвойствНазвание,
							ОбластьГруппаСвойствИсточник,
							ОбластьСвойстваСтрокаНазвание,
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
							
		ВывестиГруппуСвойств(НСтр("ru = 'Операции';
									|en = 'Operations'"),
							ДанныеСравненияЭтапа.ТаблицаОпераций,
							ОбластьГруппаСвойствНазвание,
							ОбластьГруппаСвойствИсточник,
							ОбластьСвойстваСтрокаНазвание,
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
		//-- НЕ УТКА
		
		РезультатСравнения.ЗакончитьГруппуСтрок();
	КонецЦикла; 
	
	Если СтрокаЗаказа <> Неопределено Тогда
		РезультатСравнения.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
	Возврат ЕстьОтличия;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтметитьОтличия(ДанныеСравнения, КоличествоИсточников)
	
	Для каждого ЭлДанныеСравненияЭтапа Из ДанныеСравнения.ДанныеСравнения Цикл
		
		ДанныеСравненияЭтапа = ЭлДанныеСравненияЭтапа.Значение;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаРеквизитов Цикл
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаСвойств Цикл
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаМатериалов Цикл
			Если ДанныеСвойства.Значения.Количество() <> КоличествоИсточников Тогда
				ДанныеСвойства.ЕстьОтличия = Истина;
				Продолжить;
			КонецЕсли;
			
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаВходящихИзделий Цикл
			Если ДанныеСвойства.Значения.Количество() <> КоличествоИсточников Тогда
				ДанныеСвойства.ЕстьОтличия = Истина;
				Продолжить;
			КонецЕсли;
			
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаИзделий Цикл
			Если ДанныеСвойства.Значения.Количество() <> КоличествоИсточников Тогда
				ДанныеСвойства.ЕстьОтличия = Истина;
				Продолжить;
			КонецЕсли;
			
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаОтходов Цикл
			Если ДанныеСвойства.Значения.Количество() <> КоличествоИсточников Тогда
				ДанныеСвойства.ЕстьОтличия = Истина;
				Продолжить;
			КонецЕсли;
			
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаТрудозатрат Цикл
			Если ДанныеСвойства.Значения.Количество() <> КоличествоИсточников Тогда
				ДанныеСвойства.ЕстьОтличия = Истина;
				Продолжить;
			КонецЕсли;
			
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//++ НЕ УТКА
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаВидыРЦ Цикл
			Если ДанныеСвойства.Значения.Количество() <> КоличествоИсточников Тогда
				ДанныеСвойства.ЕстьОтличия = Истина;
				Продолжить;
			КонецЕсли;
			
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаОпераций Цикл
			Если ДанныеСвойства.Значения.Количество() <> КоличествоИсточников Тогда
				ДанныеСвойства.ЕстьОтличия = Истина;
				Продолжить;
			КонецЕсли;
			
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					Если элЗначение1.Значение <> элЗначение2.Значение Тогда
						ДанныеСвойства.ЕстьОтличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличия Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ДанныеСвойства Из ДанныеСравненияЭтапа.ТаблицаПараметровНазначения Цикл
			Для каждого элЗначение1 Из ДанныеСвойства.Значения Цикл
				Для каждого элЗначение2 Из ДанныеСвойства.Значения Цикл
					СтруктураЗначения1 = элЗначение1.Значение; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураЗначенияПараметраНазначенияСпецификаций
					СтруктураЗначения2 = элЗначение2.Значение; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураЗначенияПараметраНазначенияСпецификаций
					Если НЕ ЗначениеЗаполнено(СтруктураЗначения1) И НЕ ЗначениеЗаполнено(СтруктураЗначения2) Тогда
						Продолжить;
					ИначеЕсли ЗначениеЗаполнено(элЗначение1.Значение) И ЗначениеЗаполнено(элЗначение2.Значение) Тогда
						Если СтруктураЗначения1.Условие <> СтруктураЗначения2.Условие Тогда
							ДанныеСвойства.ЕстьОтличияУсловий = Истина;
						КонецЕсли;
						Если (СтруктураЗначения1.Условие.Список И СтруктураЗначения2.Условие.Список)
								И ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(
										СтруктураЗначения1.Значение,
										СтруктураЗначения2.Значение) Тогда
							ДанныеСвойства.ЕстьОтличияЗначений = Истина;
						ИначеЕсли (СтруктураЗначения1.Условие.Интервал И СтруктураЗначения2.Условие.Интервал)
								И (СтруктураЗначения1.Значение1 <> СтруктураЗначения2.Значение1
									ИЛИ СтруктураЗначения1.Значение2 <> СтруктураЗначения2.Значение2) Тогда
							ДанныеСвойства.ЕстьОтличияЗначений = Истина;
						ИначеЕсли СтруктураЗначения1.Значение <> СтруктураЗначения2.Значение Тогда
							ДанныеСвойства.ЕстьОтличияЗначений = Истина;
						КонецЕсли;
					Иначе
						ДанныеСвойства.ЕстьОтличияУсловий  = Истина;
						ДанныеСвойства.ЕстьОтличияЗначений = Истина;
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСвойства.ЕстьОтличияУсловий ИЛИ ДанныеСвойства.ЕстьОтличияЗначений Тогда
					ДанныеСвойства.ЕстьОтличия = Истина;
				КонецЕсли;
				Если ДанныеСвойства.ЕстьОтличияУсловий И ДанныеСвойства.ЕстьОтличияЗначений Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для каждого элЗначение Из ДанныеСвойства.Значения Цикл
				СтруктураЗначения = элЗначение.Значение; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураЗначенияПараметраНазначенияСпецификаций
				Если СтруктураЗначения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПредставлениеЗначения = ПредставлениеЗначенияПараметраНазначения(СтруктураЗначения);
				Если ДанныеСвойства.ЕстьОтличияУсловий Тогда
					МассивПредставлений = Новый Массив;
					МассивПредставлений.Добавить(СтрШаблон(НСтр("ru = 'Условие: %1';
																|en = 'Condition: %1'"), СтруктураЗначения.Условие.Представление));
					Если НЕ СтруктураЗначения.Условие.Заполненность Тогда
						МассивПредставлений.Добавить(СтрШаблон(НСтр("ru = 'Значение: %1';
																	|en = 'Value: %1'"), ПредставлениеЗначения));
					КонецЕсли;
					ПредставлениеЗначения = СтрСоединить(МассивПредставлений, Символы.ПС);
				КонецЕсли;
				ДанныеСвойства.Значения[элЗначение.Ключ] = ПредставлениеЗначения;
			КонецЦикла;
		КонецЦикла;
		
		//-- НЕ УТКА
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляСравненияКонструктор()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Свойство",    Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("Значения",    Новый ОписаниеТипов("Структура"));
	ТаблицаРеквизитов.Колонки.Добавить("ЕстьОтличия", Новый ОписаниеТипов("Булево"));
	
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Свойство",    Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("Значения",    Новый ОписаниеТипов("Структура"));
	ТаблицаСвойств.Колонки.Добавить("ЕстьОтличия", Новый ОписаниеТипов("Булево"));
	
	ТаблицаМатериалов = Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить("Свойство",         Новый ОписаниеТипов("Строка"));
	ТаблицаМатериалов.Колонки.Добавить("Номенклатура",     Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаМатериалов.Колонки.Добавить("Значения",         Новый ОписаниеТипов("Структура"));
	ТаблицаМатериалов.Колонки.Добавить("ЕстьОтличия",      Новый ОписаниеТипов("Булево"));
	
	ТаблицаВходящихИзделий = Новый ТаблицаЗначений;
	ТаблицаВходящихИзделий.Колонки.Добавить("Свойство",         Новый ОписаниеТипов("Строка"));
	ТаблицаВходящихИзделий.Колонки.Добавить("ВидНоменклатуры",  Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	ТаблицаВходящихИзделий.Колонки.Добавить("Номенклатура",     Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВходящихИзделий.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВходящихИзделий.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаВходящихИзделий.Колонки.Добавить("Значения",         Новый ОписаниеТипов("Структура"));
	ТаблицаВходящихИзделий.Колонки.Добавить("ЕстьОтличия",      Новый ОписаниеТипов("Булево"));
	
	ТаблицаИзделий = Новый ТаблицаЗначений;
	ТаблицаИзделий.Колонки.Добавить("Свойство",         Новый ОписаниеТипов("Строка"));
	ТаблицаИзделий.Колонки.Добавить("ВидНоменклатуры",  Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	ТаблицаИзделий.Колонки.Добавить("Номенклатура",     Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИзделий.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаИзделий.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаИзделий.Колонки.Добавить("Значения",         Новый ОписаниеТипов("Структура"));
	ТаблицаИзделий.Колонки.Добавить("ЕстьОтличия",      Новый ОписаниеТипов("Булево"));
	
	ТаблицаОтходов = Новый ТаблицаЗначений;
	ТаблицаОтходов.Колонки.Добавить("Свойство",         Новый ОписаниеТипов("Строка"));
	ТаблицаОтходов.Колонки.Добавить("Номенклатура",     Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОтходов.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОтходов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаОтходов.Колонки.Добавить("Значения",         Новый ОписаниеТипов("Структура"));
	ТаблицаОтходов.Колонки.Добавить("ЕстьОтличия",      Новый ОписаниеТипов("Булево"));
	
	ТаблицаТрудозатрат = Новый ТаблицаЗначений;
	ТаблицаТрудозатрат.Колонки.Добавить("Свойство",    Новый ОписаниеТипов("Строка"));
	ТаблицаТрудозатрат.Колонки.Добавить("ВидРабот",    Новый ОписаниеТипов("СправочникСсылка.ВидыРаботСотрудников"));
	ТаблицаТрудозатрат.Колонки.Добавить("Значения",    Новый ОписаниеТипов("Структура"));
	ТаблицаТрудозатрат.Колонки.Добавить("ЕстьОтличия", Новый ОписаниеТипов("Булево"));

//++ НЕ УТКА
	ТаблицаВидыРЦ = Новый ТаблицаЗначений;
	ТаблицаВидыРЦ.Колонки.Добавить("Свойство",          Новый ОписаниеТипов("Строка"));
	ТаблицаВидыРЦ.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	ТаблицаВидыРЦ.Колонки.Добавить("Значения",          Новый ОписаниеТипов("Структура"));
	ТаблицаВидыРЦ.Колонки.Добавить("ЕстьОтличия",       Новый ОписаниеТипов("Булево"));
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	ТаблицаОпераций.Колонки.Добавить("Свойство",              Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ОперацияПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Значения",              Новый ОписаниеТипов("Структура"));
	ТаблицаОпераций.Колонки.Добавить("ЕстьОтличия",           Новый ОписаниеТипов("Булево"));
	
	ТаблицаПараметровНазначения = Новый ТаблицаЗначений;
	ТаблицаПараметровНазначения.Колонки.Добавить("Свойство",            Новый ОписаниеТипов("Строка"));
	ТаблицаПараметровНазначения.Колонки.Добавить("Значения",            Новый ОписаниеТипов("Структура"));
	ТаблицаПараметровНазначения.Колонки.Добавить("ЕстьОтличия",         Новый ОписаниеТипов("Булево"));
	ТаблицаПараметровНазначения.Колонки.Добавить("ЕстьОтличияУсловий",  Новый ОписаниеТипов("Булево"));
	ТаблицаПараметровНазначения.Колонки.Добавить("ЕстьОтличияЗначений", Новый ОписаниеТипов("Булево"));
//-- НЕ УТКА
	
	ДанныеСравнения = Новый Структура;
	ДанныеСравнения.Вставить("СписокСпецификаций",          Новый Массив);
	ДанныеСравнения.Вставить("ТаблицаРеквизитов",           ТаблицаРеквизитов);
	ДанныеСравнения.Вставить("ТаблицаСвойств",              ТаблицаСвойств);
	ДанныеСравнения.Вставить("ТаблицаМатериалов",           ТаблицаМатериалов);
	ДанныеСравнения.Вставить("ТаблицаВходящихИзделий",      ТаблицаВходящихИзделий);
	ДанныеСравнения.Вставить("ТаблицаИзделий",              ТаблицаИзделий);
	ДанныеСравнения.Вставить("ТаблицаОтходов",              ТаблицаОтходов);
	ДанныеСравнения.Вставить("ТаблицаТрудозатрат",          ТаблицаТрудозатрат);
//++ НЕ УТКА
	ДанныеСравнения.Вставить("ТаблицаВидыРЦ",               ТаблицаВидыРЦ);
	ДанныеСравнения.Вставить("ТаблицаОпераций",             ТаблицаОпераций);
	ДанныеСравнения.Вставить("ТаблицаПараметровНазначения", ТаблицаПараметровНазначения);
//-- НЕ УТКА
	
	Возврат ДанныеСравнения;
	
КонецФункции

Функция ДобавитьРеквизит(ИмяСвойства, Значение, ТаблицаРеквизитов, ПолеЗначения)
	
	НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("Свойство", ИмяСвойства));
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаСвойства = ТаблицаРеквизитов.Добавить();
		СтрокаСвойства.Свойство = ИмяСвойства;
		СтрокаСвойства.Значения = Новый Структура;
	Иначе
		СтрокаСвойства = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаСвойства.Значения.Вставить(ПолеЗначения, Значение);
	
	Возврат СтрокаСвойства;
	
КонецФункции

Процедура ДобавитьРеквизитыСпецификации(Реквизиты, ТаблицаРеквизитов, ПолеЗначения)
	
//++ НЕ УТКА
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		
		ДобавитьРеквизит(НСтр("ru = 'Тип';
								|en = 'Type'"), Реквизиты.ТипПроизводственногоПроцесса, ТаблицаРеквизитов, ПолеЗначения);
		
		Если Реквизиты.ВыпускПроизвольнымиПорциями Тогда
			ДобавитьРеквизит(НСтр("ru = 'Выпуск';
									|en = 'Release'"), НСтр("ru = 'в произвольном количестве';
														|en = 'in any amount'"), ТаблицаРеквизитов, ПолеЗначения);
		Иначе
			ДобавитьРеквизит(НСтр("ru = 'Выпуск';
									|en = 'Release'"), НСтр("ru = 'кратными партиями';
														|en = 'multiple lots'"), ТаблицаРеквизитов, ПолеЗначения);
		КонецЕсли;
		
		ДобавитьРеквизит(НСтр("ru = 'Оптимальная партия';
								|en = 'Economic lot'"), Реквизиты.ОптимальнаяПартияВыпуска, ТаблицаРеквизитов, ПолеЗначения);
		ДобавитьРеквизит(НСтр("ru = 'Минимальная партия';
								|en = 'Minimum lot'"), Реквизиты.МинимальнаяПартияВыпуска, ТаблицаРеквизитов, ПолеЗначения);
		
		ДобавитьРеквизит(НСтр("ru = 'Ограничен срок пролеживания';
								|en = 'Queue period is limited'"), Реквизиты.ОграниченСрокПролеживанияВыходныхИзделий, ТаблицаРеквизитов, ПолеЗначения);
		
		Если Реквизиты.ОграниченСрокПролеживанияВыходныхИзделий Тогда
			ДобавитьРеквизит(НСтр("ru = 'Максимальный срок пролеживания';
									|en = 'Maximum queue period'"), Реквизиты.МаксимальныйСрокПролеживанияВыходныхИзделий, ТаблицаРеквизитов, ПолеЗначения);
		Иначе
			ДобавитьРеквизит(НСтр("ru = 'Максимальный срок пролеживания';
									|en = 'Maximum queue period'"), 0, ТаблицаРеквизитов, ПолеЗначения);
		КонецЕсли;
		
		ДобавитьРеквизит(НСтр("ru = 'Ответственное подразделение';
								|en = 'Responsible business unit'"), Реквизиты.ОтветственноеПодразделение, ТаблицаРеквизитов, ПолеЗначения);
		
	КонецЕсли;
	
//-- НЕ УТКА
	
	ДобавитьРеквизит(НСтр("ru = 'Начало действия';
							|en = 'Valid from'"), Формат(Реквизиты.НачалоДействия, "ДФ=dd.MM.yyyy;"), ТаблицаРеквизитов, ПолеЗначения);
	ДобавитьРеквизит(НСтр("ru = 'Конец действия';
							|en = 'Expires'"), Формат(Реквизиты.КонецДействия, "ДФ=dd.MM.yyyy;"), ТаблицаРеквизитов, ПолеЗначения);
	
КонецПроцедуры

//++ НЕ УТКА
Процедура ДобавитьПараметрыНазначенияСпецификации(ПараметрыНазначения, ЗначенияПараметровНазначения, ТаблицаПараметровНазначения, ПолеЗначения)
	
	СтруктураПоиска = Новый Структура("ВидПараметра,Реквизит");
	
	Для каждого Параметр Из ПараметрыНазначения Цикл
		
		Если НЕ ЗначениеЗаполнено(Параметр.Представление) Тогда
			Параметр.Представление = УправлениеДаннымиОбИзделиях.ПредставлениеПараметраНазначения(Параметр.ВидПараметра, Параметр.Реквизит, Ложь);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Параметр);
		НайденныеЗначения = ЗначенияПараметровНазначения.НайтиСтроки(СтруктураПоиска);
		
		СтруктураЗначения = Неопределено;
		Если ЗначениеЗаполнено(НайденныеЗначения) Тогда
			
			СтруктураЗначения = НайденныеЗначения[0].СтруктураЗначения; // см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураЗначенияПараметраНазначенияСпецификаций
			
		КонецЕсли;
		
		ДобавитьРеквизит(Параметр.Представление, СтруктураЗначения, ТаблицаПараметровНазначения, ПолеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТКА

Функция ДобавитьСвойство(ИмяСвойства, Значение, ТаблицаСвойств, ПолеЗначения)
	
	НайденныеСтроки = ТаблицаСвойств.НайтиСтроки(Новый Структура("Свойство", ИмяСвойства));
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаСвойства = ТаблицаСвойств.Добавить();
		СтрокаСвойства.Свойство = ИмяСвойства;
		СтрокаСвойства.Значения = Новый Структура;
	Иначе
		СтрокаСвойства = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаСвойства.Значения.Вставить(ПолеЗначения, Значение);
	
	Возврат СтрокаСвойства;
	
КонецФункции

// Добавляет свойства этапа в таблицу свойств
// 
// Параметры:
// 	ДанныеЭтапа - СправочникВыборка.ЭтапыПроизводства - данные этапов
// 	ТаблицаСвойств - ТаблицаЗначений - таблица свойств
// 	ПолеЗначения - Строка - поле значения
//
Процедура ДобавитьСвойстваЭтапа(ДанныеЭтапа, ТаблицаСвойств, ПолеЗначения)
	
	Если ДанныеЭтапа.КлючЭтапа = КлючОтсутствующегоЭтапа() Тогда
		Возврат;
	КонецЕсли;
	
	// Свойства
	ДобавитьСвойство(НСтр("ru = 'N этапа';
							|en = 'Stage No.'"),       ДанныеЭтапа.НомерЭтапа,                 ТаблицаСвойств, ПолеЗначения);
	ДобавитьСвойство(НСтр("ru = 'N след. этапа';
							|en = 'Next stage No.'"), ДанныеЭтапа.НомерСледующегоЭтапа,       ТаблицаСвойств, ПолеЗначения);
	ДобавитьСвойство(НСтр("ru = 'Подразделение';
							|en = 'Business unit'"), ДанныеЭтапа.ПодразделениеПредставление, ТаблицаСвойств, ПолеЗначения);
	
//++ НЕ УТКА
	ДобавитьСвойство(НСтр("ru = 'Одновременно производимое количество единиц/партий изделий';
							|en = 'Quantity of product units/lots produced simultaneously'"), ДанныеЭтапа.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий, ТаблицаСвойств, ПолеЗначения);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМаршрутныеКарты") Тогда
		ДобавитьСвойство(НСтр("ru = 'Маршрутная карта';
								|en = 'Route sheet'"), ДанныеЭтапа.МаршрутнаяКартаПредставление, ТаблицаСвойств, ПолеЗначения);
	КонецЕсли;
	
	ДобавитьСвойство(НСтр("ru = 'Планировать работу видов рабочих центров';
							|en = 'Plan operations of work center types'"), ДанныеЭтапа.ПланироватьРаботуВидовРабочихЦентров, ТаблицаСвойств, ПолеЗначения);
//-- НЕ УТКА
	
	Если ДанныеЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда
		//++ НЕ УТКА
		ДобавитьСвойство(НСтр("ru = 'Предварительный буфер';
								|en = 'Preliminary buffer'"), 
						Строка(ДанныеЭтапа.ПредварительныйБуфер) + " (" + ДанныеЭтапа.ЕдиницаИзмеренияПредварительногоБуфера + ")", 
						ТаблицаСвойств, 
						ПолеЗначения);
						
		ДобавитьСвойство(НСтр("ru = 'Завершающий буфер';
								|en = 'Follow-up buffer'"), 
						Строка(ДанныеЭтапа.ЗавершающийБуфер) + " (" + ДанныеЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера + ")",
						ТаблицаСвойств, 
						ПолеЗначения);
						
		ДобавитьСвойство(НСтр("ru = 'Непрерывный';
								|en = 'Continuous'"), 
						Формат(ДанныеЭтапа.Непрерывный, НСтр("ru = 'БЛ=Нет; БИ=Да';
															|en = 'BF=No; BT=Yes'")),
						ТаблицаСвойств, 
						ПолеЗначения);
		//-- НЕ УТКА
	Иначе
		ДобавитьСвойство(НСтр("ru = 'Длительность этапа';
								|en = 'Stage duration'"), 
						Строка(ДанныеЭтапа.ДлительностьЭтапа) + " (" + Перечисления.ЕдиницыИзмеренияВремени.День + ")",
						ТаблицаСвойств,
						ПолеЗначения);
	КонецЕсли; 
	
	ДобавитьСвойство(НСтр("ru = 'Описание';
							|en = 'Details'"), ДанныеЭтапа.Описание, ТаблицаСвойств, ПолеЗначения);
	
КонецПроцедуры

//++ Устарело_Производство21

Процедура ДобавитьДанныеПоИзделиям21(КоллекцияСтрокТЧ, ДанныеТЧ, ПолеЗначения)
	
	Для каждого ЭлКоллекции Из КоллекцияСтрокТЧ Цикл
		НайденныеСтроки = ДанныеТЧ.НайтиСтроки(Новый Структура("ВидНоменклатуры,Номенклатура,Характеристика",
					ЭлКоллекции.ВидНоменклатуры,
					ЭлКоллекции.Номенклатура,
					ЭлКоллекции.Характеристика));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТЧ = ДанныеТЧ.Добавить();
			СтрокаТЧ.ВидНоменклатуры = ЭлКоллекции.ВидНоменклатуры;
			СтрокаТЧ.Номенклатура    = ЭлКоллекции.Номенклатура;
			СтрокаТЧ.Характеристика  = ЭлКоллекции.Характеристика;
			СтрокаТЧ.Свойство = ЭлКоллекции.ВидНоменклатурыПредставление
				+ ?(ЗначениеЗаполнено(ЭлКоллекции.НоменклатураПредставление), "," + ЭлКоллекции.НоменклатураПредставление, "")
				+ ?(ЗначениеЗаполнено(ЭлКоллекции.ХарактеристикаПредставление), "," + ЭлКоллекции.ХарактеристикаПредставление, "");
			СтрокаТЧ.Значения = Новый Структура;
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТЧ.Значения.Вставить(ПолеЗначения, Строка(ЭлКоллекции.КоличествоУпаковок) + " (" + ЭлКоллекции.ЕдИзм + ")");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеПоНоменклатуре21(КоллекцияСтрокТЧ, ДанныеТЧ, ПолеЗначения)
	
	Для каждого ЭлКоллекции Из КоллекцияСтрокТЧ Цикл
		НайденныеСтроки = ДанныеТЧ.НайтиСтроки(Новый Структура("Номенклатура,Характеристика", ЭлКоллекции.Номенклатура, ЭлКоллекции.Характеристика));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТЧ = ДанныеТЧ.Добавить();
			СтрокаТЧ.Номенклатура   = ЭлКоллекции.Номенклатура;
			СтрокаТЧ.Характеристика = ЭлКоллекции.Характеристика;
			СтрокаТЧ.Свойство = ЭлКоллекции.НоменклатураПредставление + ?(ЗначениеЗаполнено(ЭлКоллекции.ХарактеристикаПредставление), "," + ЭлКоллекции.ХарактеристикаПредставление, "");
			СтрокаТЧ.Значения = Новый Структура;
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТЧ.Значения.Вставить(ПолеЗначения, Строка(ЭлКоллекции.КоличествоУпаковок) + " (" + ЭлКоллекции.ЕдИзм + ")");
	КонецЦикла;
	
КонецПроцедуры

//-- Устарело_Производство21

Процедура ДобавитьДанныеПоИзделиям(КоллекцияСтрокТЧ, ДанныеТЧ, ПолеЗначения)
	
	Для каждого ЭлКоллекции Из КоллекцияСтрокТЧ Цикл
		НайденныеСтроки = ДанныеТЧ.НайтиСтроки(Новый Структура("ВидНоменклатуры,Номенклатура,Характеристика, ЕдиницаИзмерения",
					ЭлКоллекции.ВидНоменклатуры,
					ЭлКоллекции.Номенклатура,
					ЭлКоллекции.Характеристика,
					ЭлКоллекции.ЕдиницаИзмерения));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТЧ = ДанныеТЧ.Добавить();
			СтрокаТЧ.ВидНоменклатуры  = ЭлКоллекции.ВидНоменклатуры;
			СтрокаТЧ.Номенклатура     = ЭлКоллекции.Номенклатура;
			СтрокаТЧ.Характеристика   = ЭлКоллекции.Характеристика;
			СтрокаТЧ.ЕдиницаИзмерения = ЭлКоллекции.ЕдиницаИзмерения;
			СтрокаТЧ.Свойство = ЭлКоллекции.ВидНоменклатурыПредставление
				+ ?(ЗначениеЗаполнено(ЭлКоллекции.НоменклатураПредставление), "," + ЭлКоллекции.НоменклатураПредставление, "")
				+ ?(ЗначениеЗаполнено(ЭлКоллекции.ХарактеристикаПредставление), "," + ЭлКоллекции.ХарактеристикаПредставление, "")
				+ ", " + ЭлКоллекции.ЕдИзм;
			СтрокаТЧ.Значения = Новый Структура;
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТЧ.Значения.Вставить(ПолеЗначения, Строка(ЭлКоллекции.КоличествоУпаковок));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеПоНоменклатуре(КоллекцияСтрокТЧ, ДанныеТЧ, ПолеЗначения)
	
	Для каждого ЭлКоллекции Из КоллекцияСтрокТЧ Цикл
		НайденныеСтроки = ДанныеТЧ.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения",
																ЭлКоллекции.Номенклатура,
																ЭлКоллекции.Характеристика,
																ЭлКоллекции.ЕдиницаИзмерения));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТЧ = ДанныеТЧ.Добавить();
			СтрокаТЧ.Номенклатура     = ЭлКоллекции.Номенклатура;
			СтрокаТЧ.Характеристика   = ЭлКоллекции.Характеристика;
			СтрокаТЧ.ЕдиницаИзмерения = ЭлКоллекции.ЕдиницаИзмерения;
			СтрокаТЧ.Свойство = ЭлКоллекции.НоменклатураПредставление 
								+ ?(ЗначениеЗаполнено(ЭлКоллекции.ХарактеристикаПредставление), "," + ЭлКоллекции.ХарактеристикаПредставление, "")
								+ ", " + ЭлКоллекции.ЕдИзм;
			СтрокаТЧ.Значения = Новый Структура;
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТЧ.Значения.Вставить(ПолеЗначения, Строка(ЭлКоллекции.КоличествоУпаковок));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеПоТрудозатратам(КоллекцияСтрокТЧ, ДанныеТЧ, ПолеЗначения)
	
	Для каждого ЭлКоллекции Из КоллекцияСтрокТЧ Цикл
		
		НайденныеСтроки = ДанныеТЧ.НайтиСтроки(Новый Структура("ВидРабот", ЭлКоллекции.ВидРабот));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТЧ = ДанныеТЧ.Добавить();
			СтрокаТЧ.ВидРабот = ЭлКоллекции.ВидРабот;
			СтрокаТЧ.Свойство = ЭлКоллекции.ВидРаботПредставление;
			СтрокаТЧ.Значения = Новый Структура;
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТЧ.Значения.Вставить(ПолеЗначения, Формат(ЭлКоллекции.Количество, "ЧН=; ЧГ="));
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ДобавитьДанныеПоВидамРЦ(КоллекцияСтрокТЧ, ДанныеТЧ, ПолеЗначения)
	
	Для каждого ЭлКоллекции Из КоллекцияСтрокТЧ Цикл
		НайденныеСтроки = ДанныеТЧ.НайтиСтроки(Новый Структура("ВидРабочегоЦентра", ЭлКоллекции.ВидРабочегоЦентра));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТЧ = ДанныеТЧ.Добавить();
			СтрокаТЧ.ВидРабочегоЦентра  = ЭлКоллекции.ВидРабочегоЦентра;
			СтрокаТЧ.Свойство = ЭлКоллекции.ВидРабочегоЦентраПредставление;
			СтрокаТЧ.Значения = Новый Структура;
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТЧ.Значения.Вставить(ПолеЗначения, Строка(ЭлКоллекции.ВремяРаботы) + " (" + ЭлКоллекции.ЕдиницаИзмерения + ")");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеПоОперациям(КоллекцияСтрокТЧ, ДанныеТЧ, ПолеЗначения)

	Для каждого ЭлКоллекции Из КоллекцияСтрокТЧ Цикл
		НайденныеСтроки = ДанныеТЧ.НайтиСтроки(Новый Структура("ОперацияПредставление", ЭлКоллекции.ОперацияПредставление));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТЧ = ДанныеТЧ.Добавить();
			СтрокаТЧ.ОперацияПредставление  = ЭлКоллекции.ОперацияПредставление;
			СтрокаТЧ.Свойство = ЭлКоллекции.ОперацияПредставление;
			СтрокаТЧ.Значения = Новый Структура;
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокиЗначения = Новый Массив;
		СтрокиЗначения.Добавить("Кол-во: "+Формат(ЭлКоллекции.Количество, "ЧН=; ЧГ=")
			+ ?(ЗначениеЗаполнено(ЭлКоллекции.ЕдиницаИзмеренияПредставление), " (" + ЭлКоллекции.ЕдиницаИзмеренияПредставление + ")", ""));
		СтрокиЗначения.Добавить("Время: "+Формат(ЭлКоллекции.ВремяШтучное, "ЧН=; ЧГ=")
			+ ?(ЗначениеЗаполнено(ЭлКоллекции.ВремяШтучноеЕдИзмПредставление), " (" + ЭлКоллекции.ВремяШтучноеЕдИзмПредставление + ")", ""));
		Если ЗначениеЗаполнено(ЭлКоллекции.РабочийЦентрПредставление) Тогда
			СтрокиЗначения.Добавить("РЦ: "+ЭлКоллекции.РабочийЦентрПредставление
				+ ?(ЗначениеЗаполнено(ЭлКоллекции.ВариантНаладкиПредставление), " (" + ЭлКоллекции.ВариантНаладкиПредставление + ")", ""));
		КонецЕсли;
		СтрокаТЧ.Значения.Вставить(ПолеЗначения, СтрСоединить(СтрокиЗначения, "; "));
		
	КонецЦикла;

КонецПроцедуры

//-- НЕ УТКА

Процедура ПолучитьДанныеСпецификаций(ДанныеСравнения, СписокСпецификаций, РежимСравненияИзделийИМатериалов)
	
	// Получим данные
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СписокЭтапов.Владелец КАК Владелец,
	|	МАКСИМУМ(СписокЭтапов.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВтСписокПервыхЭтаповСпецификаций
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК СписокЭтапов
	|ГДЕ
	|	СписокЭтапов.Владелец В(&СписокСпецификаций)
	|	И НЕ СписокЭтапов.ПометкаУдаления
	|	И (СписокЭтапов.НомерЭтапа = 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокЭтапов.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Спецификация,
	|	Реквизиты.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	Реквизиты.ВыпускПроизвольнымиПорциями КАК ВыпускПроизвольнымиПорциями,
	|	Реквизиты.ОптимальнаяПартияВыпуска КАК ОптимальнаяПартияВыпуска,
	|	Реквизиты.МинимальнаяПартияВыпуска КАК МинимальнаяПартияВыпуска,
	|	Реквизиты.ОграниченСрокПролеживанияВыходныхИзделий КАК ОграниченСрокПролеживанияВыходныхИзделий,
	|	Реквизиты.МаксимальныйСрокПролеживанияВыходныхИзделий КАК МаксимальныйСрокПролеживанияВыходныхИзделий,
	|	Реквизиты.ОтветственноеПодразделение КАК ОтветственноеПодразделение,
	|	Реквизиты.НачалоДействия КАК НачалоДействия,
	|	Реквизиты.КонецДействия КАК КонецДействия
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка В(&СписокСпецификаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Спецификация,
	|	Реквизиты.МногоэтапныйПроизводственныйПроцесс КАК Многоэтапный,
	|	Реквизиты.Представление КАК СпецификацияПредставление,
	|	ЕСТЬNULL(Этапы.Наименование, &КлючОтсутствующегоЭтапа) КАК КлючЭтапа,
	|	ЕСТЬNULL(Этапы.НомерЭтапа, 0) КАК НомерЭтапа,
	|	ЕСТЬNULL(Этапы.НомерСледующегоЭтапа, 0) КАК НомерСледующегоЭтапа,
	|	ЕСТЬNULL(Этапы.Подразделение.Представление, """") КАК ПодразделениеПредставление,
	//++ НЕ УТКА
	|	ЕСТЬNULL(Этапы.МаршрутнаяКарта.Представление, """") КАК МаршрутнаяКартаПредставление,
	//-- НЕ УТКА
	|	Этапы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	Этапы.ПланироватьРаботуВидовРабочихЦентров КАК ПланироватьРаботуВидовРабочихЦентров,
	|	Этапы.ДлительностьЭтапа КАК ДлительностьЭтапа,
	|	Этапы.ПредварительныйБуфер КАК ПредварительныйБуфер,
	|	Этапы.ЗавершающийБуфер КАК ЗавершающийБуфер,
	|	Этапы.ЕдиницаИзмеренияПредварительногоБуфера КАК ЕдиницаИзмеренияПредварительногоБуфера,
	|	Этапы.ЕдиницаИзмеренияЗавершающегоБуфера КАК ЕдиницаИзмеренияЗавершающегоБуфера,
	|	Этапы.Непрерывный КАК Непрерывный,
	|	Этапы.Описание КАК Описание
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Реквизиты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК Этапы
	|		ПО Реквизиты.Ссылка = Этапы.Владелец
	|ГДЕ
	|	Реквизиты.Ссылка В(&СписокСпецификаций)
	|	И ЕСТЬNULL(НЕ Этапы.ПометкаУдаления, ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа,
	|	НомерСледующегоЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТЧ.Ссылка КАК Спецификация,
	|	ЕСТЬNULL(ДанныеТЧ.Этап.Наименование, &КлючОтсутствующегоЭтапа) КАК КлючЭтапа,
	|	ДанныеТЧ.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ДанныеТЧ.Номенклатура КАК Номенклатура,
	|	ДанныеТЧ.Характеристика КАК Характеристика,
	|	&ЕдиницаИзмерения1 КАК ЕдиницаИзмерения,
	|	&ПредставлениеЕдиницыИзмерения1 КАК ЕдИзм,
	|	СУММА(ДанныеТЧ.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ДанныеТЧ.ВидНоменклатуры.Представление, """") КАК ВидНоменклатурыПредставление,
	|	ЕСТЬNULL(ДанныеТЧ.Номенклатура.Представление, """") КАК НоменклатураПредставление,
	|	ЕСТЬNULL(ДанныеТЧ.Характеристика.Представление, """") КАК ХарактеристикаПредставление
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ДанныеТЧ
	|ГДЕ
	|	ДанныеТЧ.Ссылка В(&СписокСпецификаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТЧ.Ссылка,
	|	ДанныеТЧ.Этап,
	|	ДанныеТЧ.ВидНоменклатуры,
	|	ДанныеТЧ.Номенклатура,
	|	ДанныеТЧ.Характеристика,
	|	&ЕдиницаИзмерения1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТЧ.Ссылка КАК Спецификация,
	|	ЕСТЬNULL(ДанныеТЧ.Этап.Наименование, &КлючОтсутствующегоЭтапа) КАК КлючЭтапа,
	|	ДанныеТЧ.Номенклатура КАК Номенклатура,
	|	ДанныеТЧ.Характеристика КАК Характеристика,
	|	&ЕдиницаИзмерения1 КАК ЕдиницаИзмерения,
	|	&ПредставлениеЕдиницыИзмерения1 КАК ЕдИзм,
	|	СУММА(ДанныеТЧ.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ДанныеТЧ.Номенклатура.Представление, """") КАК НоменклатураПредставление,
	|	ЕСТЬNULL(ДанныеТЧ.Характеристика.Представление, """") КАК ХарактеристикаПредставление
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ДанныеТЧ
	|ГДЕ
	|	ДанныеТЧ.Ссылка В(&СписокСпецификаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТЧ.Ссылка,
	|	ДанныеТЧ.Этап,
	|	ДанныеТЧ.Номенклатура,
	|	ДанныеТЧ.Характеристика,
	|	&ЕдиницаИзмерения1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТЧ.Ссылка КАК Спецификация,
	|	ЕСТЬNULL(СписокПервыхЭтапов.Ссылка.Наименование, """") КАК КлючЭтапа,
	|	ДанныеТЧ.ОсновноеИзделиеВидНоменклатуры КАК ВидНоменклатуры,
	|	ДанныеТЧ.ОсновноеИзделиеНоменклатура КАК Номенклатура,
	|	ДанныеТЧ.ОсновноеИзделиеХарактеристика КАК Характеристика,
	|	&ЕдиницаИзмерения2 КАК ЕдиницаИзмерения,
	|	&ПредставлениеЕдиницыИзмерения2 КАК ЕдИзм,
	|	ДанныеТЧ.ОсновноеИзделиеКоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ДанныеТЧ.ОсновноеИзделиеВидНоменклатуры.Представление, """") КАК ВидНоменклатурыПредставление,
	|	ЕСТЬNULL(ДанныеТЧ.ОсновноеИзделиеНоменклатура.Представление, """") КАК НоменклатураПредставление,
	|	ЕСТЬNULL(ДанныеТЧ.ОсновноеИзделиеХарактеристика.Представление, """") КАК ХарактеристикаПредставление
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК ДанныеТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСписокПервыхЭтаповСпецификаций КАК СписокПервыхЭтапов
	|		ПО ДанныеТЧ.Ссылка = СписокПервыхЭтапов.Владелец
	|ГДЕ
	|	ДанныеТЧ.Ссылка В(&СписокСпецификаций)
	|	И ДанныеТЧ.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТЧ.Ссылка КАК Спецификация,
	|	ЕСТЬNULL(ДанныеТЧ.Этап.Наименование, &КлючОтсутствующегоЭтапа) КАК КлючЭтапа,
	|	ДанныеТЧ.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ДанныеТЧ.Номенклатура.Представление, """") КАК НоменклатураПредставление,
	|	ДанныеТЧ.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ДанныеТЧ.Характеристика.Представление, """") КАК ХарактеристикаПредставление,
	|	&ЕдиницаИзмерения1 КАК ЕдиницаИзмерения,
	|	&ПредставлениеЕдиницыИзмерения1 КАК ЕдИзм,
	|	СУММА(ДанныеТЧ.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)) КАК КоличествоУпаковок
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ДанныеТЧ
	|ГДЕ
	|	ДанныеТЧ.Ссылка В(&СписокСпецификаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТЧ.Ссылка,
	|	ДанныеТЧ.Этап,
	|	ДанныеТЧ.Номенклатура,
	|	ДанныеТЧ.Характеристика,
	|	&ЕдиницаИзмерения1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТЧ.Ссылка КАК Спецификация,
	|	ЕСТЬNULL(ДанныеТЧ.Этап.Наименование, &КлючОтсутствующегоЭтапа) КАК КлючЭтапа,
	|	ДанныеТЧ.ВидРабот КАК ВидРабот,
	|	ЕСТЬNULL(ДанныеТЧ.ВидРабот.Представление, """") КАК ВидРаботПредставление,
	|	ДанныеТЧ.Количество КАК Количество,
	|	ДанныеТЧ.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ДанныеТЧ.НазначениеРабот КАК НазначениеРабот
	|ИЗ
	|	Справочник.РесурсныеСпецификации.Трудозатраты КАК ДанныеТЧ
	|ГДЕ
	|	ДанныеТЧ.Ссылка В(&СписокСпецификаций)
	//++ НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Этапы.Владелец КАК Спецификация,
	|	Этапы.Наименование КАК КлючЭтапа,
	|	ДанныеТЧ.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ЕСТЬNULL(ДанныеТЧ.ВидРабочегоЦентра.Представление, """") КАК ВидРабочегоЦентраПредставление,
	|	ВЫБОР
	|		КОГДА ДанныеТЧ.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ДанныеТЧ.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И НЕ ДанныеТЧ.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА ДанныеТЧ.ВидРабочегоЦентра.ВремяРаботы
	|		КОГДА ДанныеТЧ.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ДанныеТЧ.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И ДанныеТЧ.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА ДанныеТЧ.ВариантНаладки.ВремяРаботы
	|		ИНАЧЕ ДанныеТЧ.ВремяРаботы
	|	КОНЕЦ КАК ВремяРаботы,
	|	ВЫБОР
	|		КОГДА ДанныеТЧ.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ДанныеТЧ.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И НЕ ДанныеТЧ.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА ДанныеТЧ.ВидРабочегоЦентра.ЕдиницаИзмерения
	|		КОГДА ДанныеТЧ.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|				И ДанныеТЧ.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|				И ДанныеТЧ.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|			ТОГДА ДанныеТЧ.ВариантНаладки.ЕдиницаИзмерения
	|		ИНАЧЕ ДанныеТЧ.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Этапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ДанныеТЧ
	|		ПО (ДанныеТЧ.Ссылка = Этапы.Ссылка)
	|ГДЕ
	|	НЕ Этапы.ПометкаУдаления
	|	И Этапы.Владелец В(&СписокСпецификаций)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Операции.Спецификация КАК Спецификация,
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства).Наименование КАК КлючЭтапа,
	|
	|	ЕСТЬNULL(Операции.Представление, """")                   КАК ОперацияПредставление,
	|	Операции.Количество                                      КАК Количество,
	|	ЕСТЬNULL(Операции.ЕдиницаИзмерения.Представление, """")  КАК ЕдиницаИзмеренияПредставление,
	|	Операции.ВремяШтучное                                    КАК ВремяШтучное,
	|	ПРЕДСТАВЛЕНИЕ(Операции.ВремяШтучноеЕдИзм)                КАК ВремяШтучноеЕдИзмПредставление,
	|	ЕСТЬNULL(Операции.РабочийЦентр.Представление, """")      КАК РабочийЦентрПредставление,
	|	ЕСТЬNULL(Операции.ВариантНаладки.Представление, """")    КАК ВариантНаладкиПредставление
	|
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК Операции
	|
	|ГДЕ
	|	&ХранитьОперацииВРесурсныхСпецификациях
	|	И НЕ Операции.ПометкаУдаления
	|	И Операции.Спецификация В(&СписокСпецификаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючЭтапа,
	|	Операции.НомерОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ВидПараметра  КАК ВидПараметра,
	|	Таблица.Реквизит      КАК Реквизит,
	|	Таблица.Приоритет     КАК Приоритет,
	|	ПРЕДСТАВЛЕНИЕ("""")   КАК Представление
	|ИЗ
	|	РегистрСведений.ПараметрыНазначенияСпецификаций КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ
	|
	//-- НЕ УТКА
	|");
	
	Если РежимСравненияИзделийИМатериалов = 0 Тогда // в единицах хранения
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"&ТекстЗапросаКоэффициентУпаковки1",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
										"ДанныеТЧ.Упаковка",
										"ДанныеТЧ.Номенклатура"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"&ТекстЗапросаКоэффициентУпаковки2",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
										"ДанныеТЧ.ОсновноеИзделиеУпаковка",
										"ДанныеТЧ.ОсновноеИзделиеНоменклатура"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕдиницаИзмерения1", "ДанныеТЧ.Номенклатура.ЕдиницаИзмерения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕдиницаИзмерения2", "ДанныеТЧ.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения");
		
		Запрос.Текст = СтрЗаменить(
						Запрос.Текст,
						"&ПредставлениеЕдиницыИзмерения1",
						"ЕСТЬNULL(ДанныеТЧ.Номенклатура.ЕдиницаИзмерения.Представление, """")");
		
		Запрос.Текст = СтрЗаменить(
						Запрос.Текст,
						"&ПредставлениеЕдиницыИзмерения2",
						"ЕСТЬNULL(ДанныеТЧ.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения.Представление, """")");
		
	Иначе // в единицах спецификаций
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1", 1);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2", 1);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕдиницаИзмерения1", "ДанныеТЧ.Упаковка");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕдиницаИзмерения2", "ДанныеТЧ.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения");
		
		Запрос.Текст = СтрЗаменить(
						Запрос.Текст,
						"&ПредставлениеЕдиницыИзмерения1",
						"	ВЫБОР
						|		КОГДА ДанныеТЧ.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
						|			ТОГДА ЕСТЬNULL(ДанныеТЧ.Упаковка.Представление, """")
						|		ИНАЧЕ ЕСТЬNULL(ДанныеТЧ.Номенклатура.ЕдиницаИзмерения.Представление, """")
						|	КОНЕЦ");
		
		Запрос.Текст = СтрЗаменить(
						Запрос.Текст,
						"&ПредставлениеЕдиницыИзмерения2",
						"	ВЫБОР
						|		КОГДА ДанныеТЧ.ОсновноеИзделиеУпаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
						|			ТОГДА ЕСТЬNULL(ДанныеТЧ.ОсновноеИзделиеУпаковка.Представление, """")
						|		ИНАЧЕ ЕСТЬNULL(ДанныеТЧ.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения.Представление, """")
						|	КОНЕЦ");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСпецификаций", СписокСпецификаций);
	Запрос.УстановитьПараметр("ХранитьОперацииВРесурсныхСпецификациях", ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях"));
	Запрос.УстановитьПараметр("КлючОтсутствующегоЭтапа", КлючОтсутствующегоЭтапа());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	// реквизиты спецификаций
	
	ВыборкаРеквизитов = Результат[1].Выбрать();
	
	ДанныеСравненияРеквизитов = ДанныеДляСравненияКонструктор();
	
	Пока ВыборкаРеквизитов.Следующий() Цикл
		
		ОбъектСравнения = ВыборкаРеквизитов.Спецификация;
		
		ПолеЗначения = "Значение" + Формат(СписокСпецификаций.Индекс(СписокСпецификаций.НайтиПоЗначению(ОбъектСравнения)), "ЧГ=");
		
		ДобавитьРеквизитыСпецификации(ВыборкаРеквизитов, ДанныеСравненияРеквизитов.ТаблицаРеквизитов, ПолеЗначения);
		
	КонецЦикла;
	
	ДанныеСравнения.ДанныеСравнения.Вставить(КлючРеквизитыСпецификаций(), ДанныеСравненияРеквизитов);
	
	// свойства этапов
	
	ТаблицаВыходныхИзделий   = Результат[3].Выгрузить();
	ТаблицаВозвратныхОтходов = Результат[4].Выгрузить();
	ТаблицаВходящихИзделий   = Результат[5].Выгрузить();
	ТаблицаМатериалов        = Результат[6].Выгрузить();
	ТаблицаТрудозатрат       = Результат[7].Выгрузить();
	//++ НЕ УТКА
	ТаблицаВидыРЦ            = Результат[8].Выгрузить();
	ТаблицаОпераций          = Результат[9].Выгрузить();
	//-- НЕ УТКА
	
	ВыборкаЭтапов = Результат[2].Выбрать();
	Пока ВыборкаЭтапов.Следующий() Цикл
		
		ОбъектСравнения = ВыборкаЭтапов.Спецификация;
		
		КлючЭтапа = ВыборкаЭтапов.КлючЭтапа;
		ПолеЗначения = "Значение" + Формат(СписокСпецификаций.Индекс(СписокСпецификаций.НайтиПоЗначению(ОбъектСравнения)), "ЧГ=");
		
		СтрокаЭтап = ДанныеСравнения.СписокЭтапов.НайтиПоЗначению(КлючЭтапа);
		
		Если СтрокаЭтап = Неопределено Тогда
			
			ПредставлениеЭтапа = Строка(ВыборкаЭтапов.КлючЭтапа)
				+ ?(ВыборкаЭтапов.КлючЭтапа = КлючОтсутствующегоЭтапа(), ""," (" + ВыборкаЭтапов.СпецификацияПредставление + ")");
			
			ДанныеСравнения.СписокЭтапов.Добавить(КлючЭтапа, ПредставлениеЭтапа);
			
			ДанныеСравненияЭтапа = ДанныеДляСравненияКонструктор();
			
			ДанныеСравнения.ДанныеСравнения.Вставить(КлючЭтапа, ДанныеСравненияЭтапа);
			
			ДанныеСравненияЭтапа.СписокСпецификаций = Новый Массив;
			
		Иначе
			
			ДанныеСравненияЭтапа = ДанныеСравнения.ДанныеСравнения.Получить(КлючЭтапа);
			
		КонецЕсли; 
		
		ДанныеСравненияЭтапа.СписокСпецификаций.Добавить(ОбъектСравнения);
		
		ДобавитьСвойстваЭтапа(ВыборкаЭтапов, ДанныеСравненияЭтапа.ТаблицаСвойств, ПолеЗначения);
		
		Если ВыборкаЭтапов.Многоэтапный Тогда
			СтруктураПоискаДанных = Новый Структура("Спецификация, КлючЭтапа", ВыборкаЭтапов.Спецификация, ВыборкаЭтапов.КлючЭтапа);
		Иначе
			СтруктураПоискаДанных = Новый Структура("Спецификация", ВыборкаЭтапов.Спецификация);
		КонецЕсли;
		
		// ВыходныеИзделия
		ДанныеТЧ = ТаблицаВыходныхИзделий.НайтиСтроки(СтруктураПоискаДанных);
		ДобавитьДанныеПоИзделиям(ДанныеТЧ, ДанныеСравненияЭтапа.ТаблицаИзделий, ПолеЗначения);
		
		// ВозвратныеОтходы
		ДанныеТЧ = ТаблицаВозвратныхОтходов.НайтиСтроки(СтруктураПоискаДанных);
		ДобавитьДанныеПоНоменклатуре(ДанныеТЧ, ДанныеСравненияЭтапа.ТаблицаОтходов, ПолеЗначения);
		
		// ВходящиеИзделия
		ДанныеТЧ = ТаблицаВходящихИзделий.НайтиСтроки(СтруктураПоискаДанных);
		ДобавитьДанныеПоИзделиям(ДанныеТЧ, ДанныеСравненияЭтапа.ТаблицаВходящихИзделий, ПолеЗначения);
		
		// МатериалыИУслуги
		ДанныеТЧ = ТаблицаМатериалов.НайтиСтроки(СтруктураПоискаДанных);
		ДобавитьДанныеПоНоменклатуре(ДанныеТЧ, ДанныеСравненияЭтапа.ТаблицаМатериалов, ПолеЗначения);
		
		// Трудозатраты
		ДанныеТЧ = ТаблицаТрудозатрат.НайтиСтроки(СтруктураПоискаДанных);
		ДобавитьДанныеПоТрудозатратам(ДанныеТЧ, ДанныеСравненияЭтапа.ТаблицаТрудозатрат, ПолеЗначения);
		
		//++ НЕ УТКА
		
		// ВидыРабочихЦентров
		ДанныеТЧ = ТаблицаВидыРЦ.НайтиСтроки(СтруктураПоискаДанных);
		ДобавитьДанныеПоВидамРЦ(ДанныеТЧ, ДанныеСравненияЭтапа.ТаблицаВидыРЦ, ПолеЗначения);
		
		// Операции
		ДанныеТЧ = ТаблицаОпераций.НайтиСтроки(СтруктураПоискаДанных);
		ДобавитьДанныеПоОперациям(ДанныеТЧ, ДанныеСравненияЭтапа.ТаблицаОпераций, ПолеЗначения);
		
		//-- НЕ УТКА
		
	КонецЦикла;
	
	//++ НЕ УТКА
	
	// параметры назначения
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметрыНазначенияСпецификаций") Тогда
	
		ПараметрыНазначения          = Результат[10].Выгрузить();
		ЗначенияПараметровНазначения = Справочники.РесурсныеСпецификации.ЗначенияПараметровНазначенияСпецификаций(СписокСпецификаций.ВыгрузитьЗначения());
		
		Для Индекс = 0 По СписокСпецификаций.Количество() - 1 Цикл
			
			ПолеЗначения = "Значение" + Формат(Индекс, "ЧГ=");
			
			ДобавитьПараметрыНазначенияСпецификации(
				ПараметрыНазначения,
				ЗначенияПараметровНазначения.Получить(СписокСпецификаций[Индекс].Значение),
				ДанныеСравненияРеквизитов.ТаблицаПараметровНазначения,
				ПолеЗначения);
			
		КонецЦикла;
	
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ВывестиСписокСвойств(ТаблицаСвойств, ОбластьСвойстваСтрокаНазвание, ОбластьСвойстваСтрокаИсточник, РезультатСравнения, СписокСпецификаций, ПоказатьТолькоОтличия)
	
	Для каждого ДанныеСвойства Из ТаблицаСвойств Цикл
		Если ПоказатьТолькоОтличия И НЕ ДанныеСвойства.ЕстьОтличия Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбластьСвойстваСтрокаНазвание.Параметры.Свойство = ДанныеСвойства.Свойство;
		ОбластьИсточник = РезультатСравнения.Вывести(ОбластьСвойстваСтрокаНазвание);
		Если НЕ ПоказатьТолькоОтличия И ДанныеСвойства.ЕстьОтличия Тогда
			ОбластьИсточник.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли; 
		
		Для каждого ЭлКоллекции Из СписокСпецификаций Цикл
			ИмяПоляЗначений = "Значение" + Формат(СписокСпецификаций.Индекс(ЭлКоллекции), "ЧГ="); 
			
			Если ДанныеСвойства.Значения.Свойство(ИмяПоляЗначений) Тогда
				ОбластьСвойстваСтрокаИсточник.Параметры.ЗначениеИсточника = ДанныеСвойства.Значения[ИмяПоляЗначений];
			Иначе
				ОбластьСвойстваСтрокаИсточник.Параметры.ЗначениеИсточника = "";
			КонецЕсли;
			ОбластьИсточник = РезультатСравнения.Присоединить(ОбластьСвойстваСтрокаИсточник);
			Если НЕ ПоказатьТолькоОтличия И ДанныеСвойства.ЕстьОтличия Тогда
				ОбластьИсточник.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ВывестиГруппуСвойств(НазваниеГруппы, ТаблицаСвойств, ОбластьГруппаСвойствНазвание, ОбластьГруппаСвойствИсточник, ОбластьСвойстваСтрокаНазвание, ОбластьСвойстваСтрокаИсточник, РезультатСравнения, СписокСпецификаций, ПоказатьТолькоОтличия)
	
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоказатьТолькоОтличия И ТаблицаСвойств.Найти(Истина, "ЕстьОтличия") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОбластьГруппаСвойствНазвание.Параметры.НазваниеГруппы = НазваниеГруппы;
	РезультатСравнения.Вывести(ОбластьГруппаСвойствНазвание);
	Для каждого ЭлКоллекции Из СписокСпецификаций Цикл
		ОбластьИсточник = РезультатСравнения.Присоединить(ОбластьГруппаСвойствИсточник);
	КонецЦикла;
	ОбластьИсточник.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	РезультатСравнения.НачатьГруппуСтрок(НазваниеГруппы);
	
	ВывестиСписокСвойств(ТаблицаСвойств,
							ОбластьСвойстваСтрокаНазвание,
							ОбластьСвойстваСтрокаИсточник,
							РезультатСравнения,
							СписокСпецификаций,
							ПоказатьТолькоОтличия);
	
	РезультатСравнения.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

//++ НЕ УТКА

Функция ПредставлениеЗначенияПараметраНазначения(СтруктураЗначения)
	
	Результат = "";
	
	Если СтруктураЗначения.Условие.Список Тогда
		Если СтруктураЗначения.Значение.Количество() > 2 Тогда
			Результат = СтрШаблон(НСтр("ru = '%1; %2 (+ еще %3)';
										|en = '%1;%2 (and %3)'"),
				СтруктураЗначения.Значение[0],
				СтруктураЗначения.Значение[1],
				СтруктураЗначения.Значение.Количество() - 2);
		Иначе
			Результат = СтрСоединить(СтруктураЗначения.Значение.ВыгрузитьЗначения(), "; ");
		КонецЕсли;
	ИначеЕсли СтруктураЗначения.Условие.Интервал Тогда
		Значение1 = СтруктураЗначения.Значение1;
		Значение2 = СтруктураЗначения.Значение2;
		Если ТипЗнч(Значение1) = Тип("Дата") Тогда
			Значение1 = ?(Значение1 = НачалоДня(Значение1), Формат(Значение1, "ДФ=dd.MM.yyyy;"), Значение1);
			Значение2 = ?(Значение2 = НачалоДня(Значение2), Формат(Значение2, "ДФ=dd.MM.yyyy;"), Значение2);
		КонецЕсли;
		Результат = СтрШаблон(НСтр("ru = 'с %1 по %2';
									|en = 'from %1 to %2'"), Значение1, Значение2);
	Иначе
		Значение = СтруктураЗначения.Значение;
		Если ТипЗнч(Значение) = Тип("Дата") Тогда
			Результат = ?(Значение = НачалоДня(Значение), Формат(Значение, "ДФ=dd.MM.yyyy;"), Значение);
		Иначе
			Результат = Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//-- НЕ УТКА

Функция КлючОтсутствующегоЭтапа()
	
	Возврат НСтр("ru = '<этап отсутствует>';
				|en = '<stage is missing>'");
	
КонецФункции

Функция КлючРеквизитыСпецификаций()
	
	Возврат "19af7da2-0bd4-4d7f-b5fa-a9897b2edf77";
	
КонецФункции

#КонецОбласти

#КонецЕсли
