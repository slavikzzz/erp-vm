//++ Устарело_Производство21
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Параметры.Свойство("Организация", ОрганизацияПоУмолчанию);
	Параметры.Свойство("Подразделение", ПодразделениеПоУмолчанию);
	Параметры.Свойство("ЗаказыПоДату", ЗаказыПоДату);
	
	Элементы.МатериалыИУслугиСсылка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ВводКорректировкиЗаказаМатериалов));
	
	ИспользуютсяКорректировки = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство");
	
	Если Параметры.ЗаполнятьПоСпискуНоменклатуры Тогда
		ЗаполнитьПоСпискуНоменклатуры();
	ИначеЕсли Параметры.ЗаполнятьПоСпискуЗаказов Тогда
		ЗаполнитьПоСпискуЗаказов();
	ИначеЕсли Параметры.ЗаполнятьПоСпискуМаршрутныхЛистов Тогда
		ЗапланироватьПолучениеМатериаловПоМаршрутномуЛисту();
	Иначе
		ЗаполнитьДанныеПоМатериалам();
	КонецЕсли; 
	
	Если НЕ ИспользуютсяКорректировки Тогда
		Элементы.МатериалыИУслугиДобавить.Видимость = Ложь;
		Элементы.МатериалыИУслугиСкопировать.Видимость = Ложь;
	КонецЕсли; 
	
	ОбновитьИтогиПоМатериалам();
	
	ЗаполнитьСлужебныеРеквизиты();
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.МатериалыИУслуги);
	
	АдресСторноИсходныхДвижений = АдресСторноИсходныхДвиженийВХранилище();
	
	ПараметрыВстраивания = Обработки.ВводКорректировкиЗаказаМатериалов.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	УстановитьУсловноеОформление();
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.МатериалыИУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПустаяСтрока(ТекстОповещенияПриОткрытии) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение обеспечения';
											|en = 'Fill in supply'"),, ТекстОповещенияПриОткрытии, КартинкаОповещенияПриОткрытии);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ВводКорректировкиЗаказаМатериалов.Форма.КорректировкаЗаказаМатериалов.Событие.ОбработкаВыбора");
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Обработка.ВводКорректировкиЗаказаМатериалов.Форма.КорректировкаЗаказаМатериалов.Элементы.МатериалыИУслуги.Выбор");
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	// Действия, которые НЕ изменяют данные
	Если Поле = Элементы.МатериалыИУслугиСсылка И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	ИначеЕсли Поле = Элементы.МатериалыИУслугиНоменклатура И ТекущиеДанные.ТолькоПросмотр Тогда
		ПоказатьЗначение(,ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	Если ТекущиеДанные.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	// Далее действия, которые изменяют данные
	Если Поле = Элементы.МатериалыИУслугиДоступно Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Строки сверх заказа всегда отгружаются со склада
		Если ТекущиеДанные.РасхождениеЗаказ = 0 Тогда
		
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Неопределено);
			
			Если ПараметрыФормы <> Неопределено Тогда
				ОткрытьФорму("Обработка.ЗапросКоличестваИСерий.Форма", ПараметрыФормы, ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриАктивизацииСтроки(Элемент)
	
	ПоказатьДанныеПоМатериалу();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриИзменении(Элемент)
	
	МатериалыИУслугиПриИзмененииНаСервере();
	ПоказатьДанныеПоМатериалу();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ИспользуютсяКорректировки 
		ИЛИ Копирование 
			И Элементы.МатериалыИУслуги.ТекущиеДанные <> Неопределено
			И Элементы.МатериалыИУслуги.ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		// Ввод строк "сверх заказа" доступен только при использовании корректировок
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.МатериалыИУслуги, ЭтотОбъект);
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
		ЗаполнитьСтрокуСверхЗаказа(ТекущиеДанные, Копирование, ПодразделениеПоУмолчанию);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	СтрокиКУдалению = Новый Массив;
	
	ВыделенныеСтроки = Элементы.МатериалыИУслуги.ВыделенныеСтроки;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.МатериалыИУслуги.ДанныеСтроки(ИдентификаторСтроки);
		Если ДанныеСтроки.ТолькоПросмотр И НЕ ДанныеСтроки.РазрешенаОтмена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.КодСтроки) Тогда
			ДанныеСтроки.Отменено = Истина;
			ПриИзмененииОтменено(ДанныеСтроки);
		Иначе
			СтрокиКУдалению.Добавить(ДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
		Объект.МатериалыИУслуги.Удалить(ДанныеСтроки);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "МатериалыИУслуги"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИУслуги"));
		
	МатериалыИУслугиНоменклатураПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИУслуги"));
		
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ТекущаяСтрока, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "МатериалыИУслуги"));
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ТекущиеДанные, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
	
	Если ТекущиеДанные.РасхождениеЗаказ = 0 Тогда
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ТекущиеДанные, "ВариантОбеспечения,ДоступноВДругихСтроках");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбновитьЗаказатьНаСклад(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(
		ЭтаФорма, 
		ПараметрыУказанияСерий, 
		ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОтменитьПолучениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ПриИзмененииОтменено(ТекущиеДанные);
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ТекущиеДанные, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПослеУдаления(Элемент)
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНазначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ТекущаяСтрока, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиВариантОбеспеченияПриИзменении(Элемент)
	
	Перем ПараметрыФормы;
	Если ОбеспечениеВДокументахКлиент.ОткрытьФормуВыбораСкладаИСерий(ЭтотОбъект) Тогда
		ВариантПолученияПараметров = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия();
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ВариантПолученияПараметров); // вызов сервера
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерии",
		Ложь,
		"МатериалыИУслугиВариантОбеспеченияПриИзмененииНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиВариантОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыйМассив = Новый Массив();
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		
		МассивДействий = Новый Массив();
		МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
		МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
		МассивДействий.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
		
		ДопустимыеДействия = Новый ФиксированныйМассив(МассивДействий);
		НовыйПараметр = Новый ПараметрВыбора("ДопустимыеДействия", ДопустимыеДействия);
		НовыйМассив.Добавить(НовыйПараметр);
		
	КонецЕсли;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе И Не ИспользуютсяКорректировки Тогда
		НовыйПараметр = Новый ПараметрВыбора("ИспользоватьЧастичнуюОтгрузку", Ложь);
		НовыйМассив.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиВариантОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияОбработкаВыбора(
		ЭтотОбъект,
		Элементы.МатериалыИУслуги.ТекущиеДанные,
		ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов());
	
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОбособленноПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.МатериалыИУслуги.ТекущиеДанные;
	Если СтрокаТаблицы.РасхождениеЗаказ = 0 Тогда
		ОбеспечениеВДокументахКлиент.ОбособленноПриИзменении(СтрокаТаблицы);
	КонецЕсли;
	
	ПриИзмененииВариантаОбеспечения();
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, СтрокаТаблицы, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Если НЕ ЗаписатьИзменения() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать корректировку заказа материалов';
										|en = 'Cannot save material order adjustment'"));
		Возврат;
	КонецЕсли; 
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьСтроку(Команда)
	
	Если Элементы.МатериалыИУслуги.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазбитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_ОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_НЕОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузить(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_ОТГРУЗИТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура Резервировать(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура КОбеспечению(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ");
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьПоМереПоступления(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ");
	
КонецПроцедуры

&НаКлиенте
Процедура НеОбеспечивать(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обеспечение

&НаКлиенте
Процедура МатериалыИУслугиВариантОбеспеченияПриИзмененииНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	МатериалыИУслугиВариантОбеспеченияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспечения(Режим)
	
	ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
		ЭтотОбъект,
		Элементы.МатериалыИУслуги.ТекущаяСтрока,
		Режим);
		
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий(Режим)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
				"МатериалыИУслуги", НСтр("ru = 'Материалы и услуги';
										|en = 'Materials and services'"));
	ПараметрыПроверки.Поля.Удалить("Склад");
	
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
			Объект,
			Объект.МатериалыИУслуги,
			Элементы.МатериалыИУслуги.ТекущаяСтрока,
			ПараметрыПроверки,
			Неопределено,
			Режим) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(Режим);
	ПараметрыФормы.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ПараметрыФормы.РазбиватьСтрокиЗапрещено = ТекущиеДанные.ПроизводитсяВПроцессе
		И Не ИспользуютсяКорректировки;
	ПараметрыФормы.ДопКолонкиДляУказанияСерий = Новый Структура("ЗаказатьНаСклад,ПроизводитсяВПроцессе");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы.ДопКолонкиДляУказанияСерий, ТекущиеДанные);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция АдресСторноИсходныхДвиженийВХранилище()
	
	ДоступныеОстаткиПараметрыВстраиванияВременная =
		Обработки.ВводКорректировкиЗаказаМатериалов.ДоступныеОстаткиПараметрыВстраиванияСторнирование();
	ДанныеОбъекта = Новый Структура();
	ДанныеОбъекта.Вставить("МатериалыИУслугиТаблица", Объект.МатериалыИУслуги.Выгрузить());
	ДанныеОбъекта.Вставить("ДоступныеОстаткиПараметрыВстраивания", Неопределено);
	ДанныеОбъекта.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ОбеспечениеВДокументахСервер.ЗаполнитьПараметрыВстраивания(ДанныеОбъекта,
		ДоступныеОстаткиПараметрыВстраиванияВременная);
	
	Адрес = ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ДанныеОбъекта);
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура МатериалыИУслугиВариантОбеспеченияПриИзмененииНаСервере()
	
	Изменения = ОбеспечениеВДокументахСервер.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.МатериалыИУслуги.ТекущаяСтрока);
	
	ПослеЗаполненияОбеспечения(Изменения);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		ВыбранноеЗначение,
		ЭтотОбъект,
		Элементы.МатериалыИУслуги.ТекущаяСтрока,
		ПараметрыФормы.ЗаполняемыеПоля);
		
	ПослеЗаполненияОбеспечения(Изменения, ПараметрыФормы.Режим);
	ТекстОбработаноСтрок = ОбеспечениеВДокументахСервер.ТекстОбработаноСтрок(Изменения.Количество());
	Возврат ТекстОбработаноСтрок;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерии(ВыбранноеЗначение, ПараметрыФормы) Экспорт
	
	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы);
	ТекстОповещения = ОбеспечениеВДокументахКлиент.ТекстОповещенияОбработкиВыборСкладаИСерии(ПараметрыФормы.Режим);
	ПоказатьОповещениеПользователя(ТекстОповещения, , Оповещение);
	ПоказатьДанныеПоМатериалу();
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеУстановитьДействие(КодДействия)
	
	Если КодДействия = "ФЛАГ_ОБОСОБЛЕННО" Или КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" Тогда
		
		ВыделенныеСтроки = Новый Массив();
		Для Каждого Идентификатор Из Элементы.МатериалыИУслуги.ВыделенныеСтроки Цикл
			НайденнаяСтрока = Объект.МатериалыИУслуги.НайтиПоИдентификатору(Идентификатор);
			Если КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" И НайденнаяСтрока.ПроизводитсяВПроцессе Тогда
				Продолжить;
			КонецЕсли;
			ВыделенныеСтроки.Добавить(Идентификатор);
		КонецЦикла;
			
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействиеОбособленно(
			КодДействия,
			ЭтотОбъект,
			Элементы.МатериалыИУслуги.ВыделенныеСтроки);
			
		ОбновитьКолонкуДоступноСервер();
		
	Иначе
		
		Изменения = ОбеспечениеВДокументахСервер.ИзмененияДляУстановкиДействий(
			КодДействия,
			ЭтотОбъект,
			Элементы.МатериалыИУслуги.ВыделенныеСтроки);
			
		// Учет ограничений указания вариантов обеспечения в заказе на производство.
		Документы.ЗаказНаПроизводство.УдалитьНедопустимыеДанныеЗаполнения(
			Объект.МатериалыИУслуги,
			ИспользуютсяКорректировки,
			Изменения.ТаблицаИзменений);
		
		// Перенос данных в таблицу формы.
		ОбеспечениеВДокументахСервер.УстановитьДействияИзТаблицы(ЭтотОбъект, Изменения.ТаблицаИзменений);
		
	КонецЕсли;
	ПослеЗаполненияОбеспечения(Изменения.ТаблицаИзменений);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОбеспечения(Изменения, Режим = Неопределено)
	
	Если Режим = Неопределено Тогда
		Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия();
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ПересчитатьКоличествоЕдиниц(Изменения);
	
	КоличествоОтгружено = 0;
	
	Для Каждого Изменение Из Изменения Цикл
		
		ТекСтрока = Изменение.Строка;
		ОбновитьЗаказатьНаСклад(ТекСтрока);
		
		ДанныеЗаполнения = Новый Структура;
		
		ДанныеЗаполнения.Вставить("КлючСвязи",        ТекСтрока.КлючСвязи);
		ДанныеЗаполнения.Вставить("Номенклатура",     ТекСтрока.Номенклатура);
		ДанныеЗаполнения.Вставить("Характеристика",   ТекСтрока.Характеристика);
		ДанныеЗаполнения.Вставить("Подразделение",    ТекСтрока.Подразделение);
		ДанныеЗаполнения.Вставить("Склад",            ТекСтрока.Склад);
		ДанныеЗаполнения.Вставить("Назначение",       ТекСтрока.НазначениеПродукции);
		ДанныеЗаполнения.Вставить("НазначениеЗаказа", ТекСтрока.НазначениеЗаказа);
		ДанныеЗаполнения.Вставить("ПоЗаказуДавальца", ТекСтрока.ПроизводствоПоЗаказу);
		
		ДанныеПродукции = ПланированиеПроизводстваКлиентСервер.СтруктураДанныхПродукции(ДанныеЗаполнения);
		ДанныеПродукции.ОбосабливатьПоНазначениюЗаказа = ТекСтрока.ОбосабливатьПоНазначениюЗаказа;
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(
			ТекСтрока, ДанныеПродукции);
			
		Если ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
				И ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				
				ТекСтрока.ВариантОбеспечения =
					?(ТекСтрока.Обособленно, Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления, Перечисления.ВариантыОбеспечения.НеТребуется);
				
		КонецЕсли;
		
		Если ТекСтрока.КодСтрокиРаспоряжения = 0 Тогда
			ТекСтрока.Обособленно = Ложь;
		КонецЕсли;
		
		Если Изменение.Идентификатор = Изменение.Строка.ПолучитьИдентификатор() Тогда
				
				Если Изменение.Строка.КоличествоОтгружено > Изменение.Строка.Количество Тогда
					
					КоличествоОтгружено = Изменение.Строка.КоличествоОтгружено - Изменение.Строка.Количество;
					Изменение.Строка.КоличествоОтгружено = Изменение.Строка.Количество;
					
				КонецЕсли;
				
		Иначе
			
			Если КоличествоОтгружено > 0 Тогда
				
				Изменение.Строка.КоличествоОтгружено = КоличествоОтгружено;
				КоличествоОтгружено = 0;
				
			Иначе
				
				Изменение.Строка.КодСтроки = 0;
				Изменение.Строка.КоличествоОтгружено = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПослеИзмененияВариантаОбеспечения();

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноСервер()
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДляДействийОбеспечения(Форма, ВариантОбеспеченияИФлагОбособленно)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                              Форма);
	ПараметрыДокумента.Вставить("Коллекция",                          Форма.Объект.МатериалыИУслуги);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", ВариантОбеспеченияИФлагОбособленно);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, СтрокаТаблицы, ПоляСтрокой)
	
	ИзЗапасовПодразделения = Не ЗначениеЗаполнено(СтрокаТаблицы.Склад);
	ВариантОбеспеченияИФлагОбособленно = ПланированиеПроизводстваКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(
		СтрокаТаблицы.ПроизводитсяВПроцессе,
		ИзЗапасовПодразделения);
	ПараметрыДокумента  = ПараметрыДляДействийОбеспечения(ЭтотОбъект, ВариантОбеспеченияИФлагОбособленно);
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаказатьНаСклад(ТекущиеДанные)
	
	ТекущиеДанные.ЗаказатьНаСклад = ТекущиеДанные.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
		И ТекущиеДанные.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
	
	Если Не ТекущиеДанные.ЗаказатьНаСклад Тогда
		
		ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Получает дополнительную информацию по материалам (без группировки по заказам)
// Полученная информация отображается на форме при выборе строки материала
//
// Параметры:
//  ТаблицаДополнительныхМатериалов	 - ТаблицаЗначений - Таблица используется чтобы получить данные в т.ч. и по указанным материалам.
//															Если параметр не указан то будут получены данные только по материалам в ТЧ МатериалыИУслуги.
//
&НаСервере
Процедура ЗаполнитьДанныеПоМатериалам(ТаблицаДополнительныхМатериалов = Неопределено)

	ДанныеПоМатериалам.Очистить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаМатериалов.Ссылка                КАК Ссылка,
	|	ТаблицаМатериалов.Организация           КАК Организация,
	|	ТаблицаМатериалов.Номенклатура          КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика        КАК Характеристика,
	|	ТаблицаМатериалов.Назначение            КАК Назначение,
	|	ТаблицаМатериалов.Подразделение         КАК Подразделение,
	|	ТаблицаМатериалов.Склад                 КАК Склад
	|ПОМЕСТИТЬ ТаблицаМатериаловИЗаказов
	|ИЗ
	|	&ТаблицаМатериалов КАК ТаблицаМатериалов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМатериалов.Организация           КАК Организация,
	|	ТаблицаМатериалов.Номенклатура          КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика        КАК Характеристика,
	|	ТаблицаМатериалов.Назначение            КАК Назначение,
	|	ТаблицаМатериалов.Подразделение         КАК Подразделение,
	|	ТаблицаМатериалов.Склад                 КАК Склад
	|ПОМЕСТИТЬ ТаблицаМатериалов
	|ИЗ
	|	ТаблицаМатериаловИЗаказов КАК ТаблицаМатериалов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиВПодразделении.КоличествоОстаток  КАК Количество,
	|	ОстаткиВПодразделении.Организация        КАК Организация,
	|	ОстаткиВПодразделении.Номенклатура       КАК Номенклатура,
	|	ОстаткиВПодразделении.Характеристика     КАК Характеристика,
	|	ОстаткиВПодразделении.Назначение         КАК Назначение,
	|	ОстаткиВПодразделении.Подразделение      КАК Подразделение
	|ПОМЕСТИТЬ ОстаткиВПодразделении
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
	|			,
	|			(Организация, Подразделение, Номенклатура, Характеристика, Назначение) В
	|				(ВЫБРАТЬ
	|					ТаблицаМатериалов.Организация,
	|					ТаблицаМатериалов.Подразделение,
	|					ТаблицаМатериалов.Номенклатура,
	|					ТаблицаМатериалов.Характеристика,
	|					ТаблицаМатериалов.Назначение
	|				ИЗ
	|					ТаблицаМатериалов)) КАК ОстаткиВПодразделении
	|ГДЕ
	|	ОстаткиВПодразделении.КоличествоОстаток <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ГрафикЭтапов
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГрафикЭтаповПроизводстваОстатки.Распоряжение            КАК Распоряжение,
	|	ЗаказНаПроизводствоЭтапыГрафикВсе.КодСтроки             КАК КодСтрокиЭтапыГрафик,
	|	ЗаказНаПроизводствоМатериалыИУслуги.КодСтроки           КАК КодСтрокиРаспоряжения
	|ПОМЕСТИТЬ ГрафикЭтапов
	|ИЗ
	|	( 
	|		ВЫБРАТЬ
	|			ГрафикЭтаповПроизводства.Распоряжение         КАК Распоряжение,
	|			ГрафикЭтаповПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|		ИЗ
	|			РегистрСведений.ГрафикЭтаповПроизводства КАК ГрафикЭтаповПроизводства
	|		ГДЕ
	|			(Распоряжение, Подразделение) В (
	|				ВЫБРАТЬ
	|					ТаблицаМатериаловИЗаказов.Ссылка,
	|					ТаблицаМатериаловИЗаказов.Подразделение
	|				ИЗ
	|					ТаблицаМатериаловИЗаказов)
	|			И (ГрафикЭтаповПроизводства.НачалоЭтапа <= &ЗаказыПоДатуКонецДня
	|				ИЛИ &ЗаказыПоДатуКонецДня = ДАТАВРЕМЯ(1,1,1))
	|
	|		СГРУППИРОВАТЬ ПО
	|			ГрафикЭтаповПроизводства.Распоряжение,
	|			ГрафикЭтаповПроизводства.КодСтрокиЭтапыГрафик
	|
	|		ИМЕЮЩИЕ
	|			СУММА(ГрафикЭтаповПроизводства.Запланировано) > 0
	|	
	|	) КАК ГрафикЭтаповПроизводстваОстатки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ГрафикЭтаповПроизводстваОстатки.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = ГрафикЭтаповПроизводстваОстатки.КодСтрокиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафикВсе
	|		ПО (ЗаказНаПроизводствоЭтапыГрафикВсе.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапыГрафикВсе.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоЭтапыГрафикВсе.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафикВсе.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафикВсе.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапыГрафикВсе.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказНаПроизводствоМатериалыИУслуги
	|		ПО (ЗаказНаПроизводствоМатериалыИУслуги.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция)
	|ГДЕ
	|	НЕ ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказНаПроизводствоЭтапы.Ссылка                 КАК Распоряжение,
	|	0                                               КАК КодСтрокиЭтапыГрафик,
	|	ЗаказНаПроизводствоМатериалыИУслуги.КодСтроки   КАК КодСтрокиРаспоряжения
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказНаПроизводствоМатериалыИУслуги
	|		ПО (ЗаказНаПроизводствоМатериалыИУслуги.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция)
	|ГДЕ
	|	(ЗаказНаПроизводствоЭтапы.Ссылка, ЗаказНаПроизводствоЭтапы.Подразделение) В (
	|		ВЫБРАТЬ
	|					ТаблицаМатериаловИЗаказов.Ссылка,
	|					ТаблицаМатериаловИЗаказов.Подразделение
	|				ИЗ
	|					ТаблицаМатериаловИЗаказов)
	|	И НЕ ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне
	|	И ЗаказНаПроизводствоЭтапы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказНаПроизводствоЭтапы.Ссылка                 КАК Распоряжение,
	|	0                                               КАК КодСтрокиЭтапыГрафик,
	|	ЗаказНаПроизводствоМатериалыИУслуги.КодСтроки   КАК КодСтрокиРаспоряжения
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства КАК ГрафикЭтаповПроизводстваОстатки
	|		ПО ГрафикЭтаповПроизводстваОстатки.Распоряжение = ЗаказНаПроизводствоЭтапыГрафик.Ссылка
	|			И ГрафикЭтаповПроизводстваОстатки.КодСтрокиЭтапыГрафик = ЗаказНаПроизводствоЭтапыГрафик.КодСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказНаПроизводствоМатериалыИУслуги
	|		ПО (ЗаказНаПроизводствоМатериалыИУслуги.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция)
	|ГДЕ
	|	(ЗаказНаПроизводствоЭтапы.Ссылка, ЗаказНаПроизводствоЭтапы.Подразделение) В (
	|		ВЫБРАТЬ
	|					ТаблицаМатериаловИЗаказов.Ссылка,
	|					ТаблицаМатериаловИЗаказов.Подразделение
	|				ИЗ
	|					ТаблицаМатериаловИЗаказов)
	|	И ЗаказНаПроизводствоЭтапы.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|	И ЗаказНаПроизводствоЭтапы.Ссылка.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать)
	|	И НЕ ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне
	|	И ГрафикЭтаповПроизводстваОстатки.Распоряжение ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ПотребностьПоЗаказамНаПроизводство
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Организация       КАК Организация,
	|	ВложенныйЗапрос.Подразделение     КАК Подразделение,
	|	ВложенныйЗапрос.Номенклатура      КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика    КАК Характеристика,
	|	ВложенныйЗапрос.Назначение        КАК Назначение,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ПОМЕСТИТЬ ПотребностьПоЗаказамНаПроизводство
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыМатериаловСУчетомКорректировок.Организация       КАК Организация,
	|		ЗаказыМатериаловСУчетомКорректировок.Подразделение     КАК Подразделение,
	|		ЗаказыМатериаловСУчетомКорректировок.Номенклатура      КАК Номенклатура,
	|		ЗаказыМатериаловСУчетомКорректировок.Характеристика    КАК Характеристика,
	|		ЗаказыМатериаловСУчетомКорректировок.Назначение        КАК Назначение,
	|		ЗаказыМатериаловСУчетомКорректировок.КоличествоОборот  КАК Количество
	|	ИЗ
	|		РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(
	|				,,,
	|				НЕ Отменено
	|				И (Распоряжение, КодСтрокиРаспоряжения) В
	|					(ВЫБРАТЬ
	|						ГрафикЭтапов.Распоряжение,
	|						ГрафикЭтапов.КодСтрокиРаспоряжения
	|					 ИЗ ГрафикЭтапов)) КАК ЗаказыМатериаловСУчетомКорректировок
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказНаПроизводствоМатериалыИУслуги
	|			ПО (ЗаказНаПроизводствоМатериалыИУслуги.Ссылка = ЗаказыМатериаловСУчетомКорректировок.Распоряжение)
	|				И (ЗаказНаПроизводствоМатериалыИУслуги.КодСтроки = ЗаказыМатериаловСУчетомКорректировок.КодСтрокиРаспоряжения)
	|	ГДЕ
	|		ЗаказыМатериаловСУчетомКорректировок.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|																				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МаршрутныйЛистПроизводства.Организация    КАК Организация,
	|		МаршрутныйЛистПроизводства.Подразделение  КАК Подразделение,
	|		ТаблицаМатериалыИУслуги.Номенклатура      КАК Номенклатура,
	|		ТаблицаМатериалыИУслуги.Характеристика    КАК Характеристика,
	|		ТаблицаМатериалыИУслуги.Назначение        КАК Назначение,
	|		-ТаблицаМатериалыИУслуги.Количество       КАК Количество
	|	ИЗ
	|		Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|			ПО ТаблицаМатериалыИУслуги.Ссылка = МаршрутныйЛистПроизводства.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафикЗаказа
	|			ПО ТаблицаЭтапыГрафикЗаказа.Ссылка = МаршрутныйЛистПроизводства.Распоряжение
	|				И ТаблицаЭтапыГрафикЗаказа.КодСтроки = МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик
	|	ГДЕ
	|		МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен)
	|		И МаршрутныйЛистПроизводства.Проведен
	|		И (МаршрутныйЛистПроизводства.Распоряжение, МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик) В
	|					(ВЫБРАТЬ
	|						ГрафикЭтапов.Распоряжение,
	|						ГрафикЭтапов.КодСтрокиЭтапыГрафик
	|					 ИЗ ГрафикЭтапов)
	|
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ПотребностьВМатериалах
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПотребностьВМатериалах.Организация        КАК Организация,
	|	ПотребностьВМатериалах.Подразделение      КАК Подразделение,
	|	ПотребностьВМатериалах.Номенклатура       КАК Номенклатура,
	|	ПотребностьВМатериалах.Характеристика     КАК Характеристика,
	|	ПотребностьВМатериалах.Назначение         КАК Назначение,
	|	ПотребностьВМатериалах.КоличествоОборот   КАК Количество
	|ПОМЕСТИТЬ ПотребностьВМатериалах
	|ИЗ
	|	РегистрНакопления.ПотребностьВМатериалахВПроизводстве.Обороты(
	|			,
	|			,
	|			,
	|			(Организация, Подразделение, Номенклатура, Характеристика, Назначение) В
	|				(ВЫБРАТЬ
	|					ТаблицаМатериалов.Организация,
	|					ТаблицаМатериалов.Подразделение,
	|					ТаблицаМатериалов.Номенклатура,
	|					ТаблицаМатериалов.Характеристика,
	|					ТаблицаМатериалов.Назначение
	|				ИЗ
	|					ТаблицаМатериалов)) КАК ПотребностьВМатериалах
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаМатериалов.Организация,
	|	ТаблицаМатериалов.Подразделение,
	|	ТаблицаМатериалов.Склад,
	|	ТаблицаМатериалов.Номенклатура,
	|	ТаблицаМатериалов.Характеристика,
	|	ТаблицаМатериалов.Назначение,
	|	ЕСТЬNULL(ОстаткиВПодразделении.Количество, 0) КАК ОстатокВПодразделении,
	|	ЕСТЬNULL(ПотребностьВМатериалах.Количество, 0) КАК ТребуетсяПоМаршрутнымЛистам,
	|	ЕСТЬNULL(ПотребностьПоЗаказамНаПроизводство.Количество, 0) КАК ТребуетсяПоЗаказамНаПроизводство,
	|	0 КАК ПолучитьСоСклада,
	|	0 КАК ОжидаетсяКПолучению,
	|	0 КАК ОстатокНаСкладе,
	|	0 КАК КПолучению,
	|	&ТекстПоляСкладМатериалов КАК СкладПоУмолчанию
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиВПодразделении КАК ОстаткиВПодразделении
	|		ПО (ОстаткиВПодразделении.Номенклатура = ТаблицаМатериалов.Номенклатура)
	|			И (ОстаткиВПодразделении.Характеристика = ТаблицаМатериалов.Характеристика)
	|			И (ОстаткиВПодразделении.Назначение = ТаблицаМатериалов.Назначение)
	|			И (ОстаткиВПодразделении.Подразделение = ТаблицаМатериалов.Подразделение)
	|			И (ОстаткиВПодразделении.Организация = ТаблицаМатериалов.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПотребностьВМатериалах КАК ПотребностьВМатериалах
	|		ПО (ПотребностьВМатериалах.Номенклатура = ТаблицаМатериалов.Номенклатура)
	|			И (ПотребностьВМатериалах.Характеристика = ТаблицаМатериалов.Характеристика)
	|			И (ПотребностьВМатериалах.Назначение = ТаблицаМатериалов.Назначение)
	|			И (ПотребностьВМатериалах.Подразделение = ТаблицаМатериалов.Подразделение)
	|			И (ПотребностьВМатериалах.Организация = ТаблицаМатериалов.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПотребностьПоЗаказамНаПроизводство КАК ПотребностьПоЗаказамНаПроизводство
	|		ПО (ПотребностьПоЗаказамНаПроизводство.Номенклатура = ТаблицаМатериалов.Номенклатура)
	|			И (ПотребностьПоЗаказамНаПроизводство.Характеристика = ТаблицаМатериалов.Характеристика)
	|			И (ПотребностьПоЗаказамНаПроизводство.Назначение = ТаблицаМатериалов.Назначение)
	|			И (ПотребностьПоЗаказамНаПроизводство.Подразделение = ТаблицаМатериалов.Подразделение)
	|			И (ПотребностьПоЗаказамНаПроизводство.Организация = ТаблицаМатериалов.Организация)
	|
	|		%ТекстЗапросаНастройкиПередачиМатериалов%";
	
	ТекстЗапросаДляПолученияСклада = ОбеспечениеПроизводства.ТекстЗапросаНастройкиПередачиМатериалов(
										"ТаблицаМатериалов");
										
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"%ТекстЗапросаНастройкиПередачиМатериалов%",
						ТекстЗапросаДляПолученияСклада.ТекстСоединения);
						
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"&ТекстПоляСкладМатериалов",
						ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ТаблицаМатериалов = Объект.МатериалыИУслуги.Выгрузить(, "Организация,Подразделение,Номенклатура,Характеристика,Назначение,Склад,Ссылка");
	Если ТаблицаДополнительныхМатериалов <> Неопределено Тогда
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаМатериалов, ТаблицаДополнительныхМатериалов);
	КонецЕсли; 
	
	ТаблицаМатериалов.Свернуть("Организация,Подразделение,Номенклатура,Характеристика,Назначение,Склад,Ссылка");
	Запрос.УстановитьПараметр("ТаблицаМатериалов", ТаблицаМатериалов);
	Запрос.УстановитьПараметр("ЗаказыПоДату", ЗаказыПоДату);
	Запрос.УстановитьПараметр("ЗаказыПоДатуКонецДня", ?(ЗаказыПоДату <> '000101010000', КонецДня(ЗаказыПоДату), '000101010000'));
	Запрос.УстановитьПараметр("СкладПоУмолчанию", Справочники.Склады.СкладПоУмолчанию());
	Результат = Запрос.Выполнить();
	
	ДанныеПоМатериалам.Загрузить(Результат.Выгрузить());

	// Формирование таблицы аналитики остатков в списке "Получение и возврат".
	ТаблицаДляОбеспечения = Новый ТаблицаЗначений();
	ТаблицаДляОбеспечения.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДляОбеспечения.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДляОбеспечения.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДляОбеспечения.Колонки.Добавить("Назначение",     Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаДляОбеспечения.Колонки.Добавить("Подразделение",  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаДляОбеспечения.Колонки.Добавить("Идентификатор",  ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0));
	ТаблицаДляОбеспечения.Колонки.Добавить("КПолучению",     ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	
	ТаблицаПолучениеИВозвратМатериалов = ДанныеПоМатериалам.Выгрузить();
	ТаблицаПолучениеИВозвратМатериалов.Свернуть("Номенклатура,Характеристика,Склад,Назначение,Подразделение", "КПолучению");
	ТаблицаПолучениеИВозвратМатериалов.Колонки.Добавить("Идентификатор", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0));
	
	Идентификатор = 1;
	Для Каждого СтрокаТаблицы Из ТаблицаПолучениеИВозвратМатериалов Цикл
		НоваяСтрока = ТаблицаДляОбеспечения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Идентификатор = Идентификатор;
		Идентификатор = Идентификатор + 1;
	КонецЦикла;
	
	// Получение остатков склада.
	ТаблицаОстатков = Обработки.ПолучениеИВозвратМатериалов.СвободныйОстатокНаСкладе(ТаблицаДляОбеспечения);
	
	// Загрузка остатков в список "Получение и возврат".
	Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		СтрокаОбеспечения = ТаблицаДляОбеспечения.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Склад,Назначение,Подразделение");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОбеспечения);
  		СписокСтрок = ДанныеПоМатериалам.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеМатериала Из СписокСтрок Цикл
			ДанныеМатериала.ОстатокНаСкладе = СтрокаТаблицы.Количество;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарезервироватьЗапланированноеКПолучению(ТаблицаМатериалов)

	КэшированныеЗначения = Неопределено;
	
	ПорядокВыборкиВариантовОбеспечения = Новый Массив;
	
	ПорядокВыборкиВариантовОбеспечения.Добавить(
		Новый Структура("ВариантОбеспечения, Обособленно", Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления, Ложь));
	ПорядокВыборкиВариантовОбеспечения.Добавить(
		Новый Структура("ВариантОбеспечения, Обособленно", Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления, Истина));
	
	МерныеТипы = МерныеТипы();
	
	ОбработаноСтрок = 0;
	ЗарезервированоЧастично = Ложь;
	
	// нужно использовать копию данных, т.к. потребуется изменять свободный остаток
	ДанныеПоМатериаламКопия = ДанныеПоМатериалам.Выгрузить();
	ДанныеПоМатериаламКопия.Свернуть("Номенклатура,Характеристика,Назначение,Склад,ОстатокНаСкладе");
	ДанныеПоМатериаламКопия.Индексы.Добавить("Номенклатура,Характеристика,Назначение,Склад");
	
	Для каждого СтрокаДефицитМатериала Из ТаблицаМатериалов Цикл
		
		Если (СтрокаДефицитМатериала.ОжидаетсяКПолучению - СтрокаДефицитМатериала.ВРезерве) <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗарезервироватьОстаток = СтрокаДефицитМатериала.ОжидаетсяКПолучению - СтрокаДефицитМатериала.ВРезерве;
		
		СтруктураПоискаПоТЧ = 
			Новый Структура("Номенклатура, Характеристика, Назначение, Подразделение, Организация, ВариантОбеспечения, Обособленно");
			
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоТЧ, СтрокаДефицитМатериала);
		
		Для каждого ВариантОбеспечения Из ПорядокВыборкиВариантовОбеспечения Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаПоТЧ, ВариантОбеспечения);
			
			СписокСтрок = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураПоискаПоТЧ);
			Для каждого СтрокаМатериал Из СписокСтрок Цикл
				
				Если СтрокаМатериал.ДатаПотребности > ЗаказыПоДату И ЗаказыПоДату <> '000101010000' 
					ИЛИ ТипЗнч(СтрокаМатериал.Ссылка) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
					Продолжить;
				КонецЕсли;
					
				ОстатокНаСкладе = 0;
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,Склад");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаМатериал);
			 	СписокСтрок = ДанныеПоМатериаламКопия.НайтиСтроки(СтруктураПоиска);
				Если СписокСтрок.Количество() <> 0 Тогда
					ДанныеПоМатериалу = СписокСтрок[0];
					ОстатокНаСкладе = ДанныеПоМатериалу.ОстатокНаСкладе;
				КонецЕсли;
				
				Если ОстатокНаСкладе <=0 Тогда
					Продолжить;
				КонецЕсли;
				
				Дефицит = Мин(ЗарезервироватьОстаток, ОстатокНаСкладе);
				
				// Если материал хранится в "штуках", но выбрана мерная единица,
				// то после разбиения строк нужно округлить количество, чтобы корректировка провелась
				Если СтрокаМатериал.Количество > Дефицит
					И ЗначениеЗаполнено(СтрокаМатериал.Упаковка) Тогда
					
					ТипИзмеряемойВеличины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМатериал.Упаковка, "ТипИзмеряемойВеличины");
					Если МерныеТипы.Найти(ТипИзмеряемойВеличины) <> Неопределено Тогда
						РеквизитыМатериала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
														СтрокаМатериал.Номенклатура, 
														Новый Структура("ТипИзмеряемойВеличины", "ЕдиницаИзмерения.ТипИзмеряемойВеличины"));
														
						Если РеквизитыМатериала.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук Тогда
							Дефицит = ?(Цел(Дефицит) <> Дефицит, Цел(Дефицит) + 1, Дефицит);
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
				
				Если СтрокаМатериал.Количество > Дефицит Тогда
					СтрокаДляКорректировки = Объект.МатериалыИУслуги.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДляКорректировки, СтрокаМатериал);
					
					СтрокаДляКорректировки.КодСтроки = 0;
					СтрокаДляКорректировки.Количество = Дефицит;
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДляКорректировки, СтруктураДействий, КэшированныеЗначения);
					
					СтрокаМатериал.Количество = СтрокаМатериал.Количество - СтрокаДляКорректировки.Количество;
					СтрокаМатериал.КоличествоУпаковок = СтрокаМатериал.КоличествоУпаковок - СтрокаДляКорректировки.КоличествоУпаковок;
				Иначе
					СтрокаДляКорректировки = СтрокаМатериал;
				КонецЕсли;
				
				СтрокаДляКорректировки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				ДанныеПоМатериалу.ОстатокНаСкладе = ДанныеПоМатериалу.ОстатокНаСкладе - СтрокаДляКорректировки.Количество;
				
				ТекущиеДанныеПоМатериалу = ДанныеПоМатериалу(ДанныеПоМатериалам, СтрокаМатериал);
				Если ТекущиеДанныеПоМатериалу <> Неопределено Тогда
					ТекущиеДанныеПоМатериалу.ОжидаетсяКПолучению = ТекущиеДанныеПоМатериалу.ОжидаетсяКПолучению + СтрокаДляКорректировки.Количество;
				КонецЕсли;
				
				ЗарезервироватьОстаток = ЗарезервироватьОстаток - СтрокаМатериал.Количество;
				
				ОбработаноСтрок = ОбработаноСтрок + 1;
				
				Если ЗарезервироватьОстаток = 0 Тогда
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ЗарезервироватьОстаток = 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если ЗарезервироватьОстаток > 0 Тогда
			ЗарезервированоЧастично = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтогиПоМатериалам();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Если ОбработаноСтрок = 0 Тогда
		ТекстОповещенияПриОткрытии = НСтр("ru = 'Не удалось зарезрвировать материалы. Возможно, отсутствует остаток на складе.';
											|en = 'Cannot reserve materials. There may be no stock in the warehouse.'");
		КартинкаОповещенияПриОткрытии = БиблиотекаКартинок.Внимание48;
	ИначеЕсли ЗарезервированоЧастично Тогда
		ТекстОповещенияПриОткрытии = НСтр("ru = 'Материалы зарезрвированы частично. Возможно, отсутствует остаток на складе.';
											|en = 'Materials are partially reserved. Maybe, there is no stock in the warehouse.'");
		КартинкаОповещенияПриОткрытии = БиблиотекаКартинок.Внимание48;
	Иначе
		ТекстОповещенияПриОткрытии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Обработано строк: %1';
											|en = 'Processed lines: %1'"),
										Формат(ОбработаноСтрок, "ЧН=0; ЧГ="));
	КонецЕсли; 
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстранитьТекущийДефицит(ТаблицаМатериалов)
	Перем КэшированныеЗначения;

	ПорядокВыборкиВариантовОбеспечения = Новый Массив;
	
	ПорядокВыборкиВариантовОбеспечения.Добавить(
		Новый Структура("ВариантОбеспечения, Обособленно", Перечисления.ВариантыОбеспечения.СоСклада, Ложь));
		
	ПорядокВыборкиВариантовОбеспечения.Добавить(
		Новый Структура("ВариантОбеспечения, Обособленно", Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления, Ложь));
		
	ПорядокВыборкиВариантовОбеспечения.Добавить(
		Новый Структура("ВариантОбеспечения, Обособленно", Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления, Истина));
		
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМатериалов.Ссылка КАК Ссылка,
	|	ТаблицаМатериалов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаМатериалов.Этап КАК Этап,
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ТаблицаМатериалов.Назначение КАК Назначение,
	|	ТаблицаМатериалов.Подразделение КАК Подразделение,
	|	ТаблицаМатериалов.КоличествоОтгружено КАК КоличествоОтгружено,
	|	ТаблицаМатериалов.КоличествоОсталосьОтгрузить КАК КоличествоОсталосьОтгрузить
	|ПОМЕСТИТЬ ТаблицаМатериалов
	|ИЗ
	|	&ТаблицаМатериалов КАК ТаблицаМатериалов
	|ГДЕ
	|	ТаблицаМатериалов.Ссылка ССЫЛКА Документ.ЗаказНаПроизводство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	КодСтрокиПродукция,
	|	Этап,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалов.Ссылка КАК Ссылка,
	|	ТаблицаМаршрутныйЛист.Организация КАК Организация,
	|	ТаблицаМатериалов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаМатериалов.Этап КАК Этап,
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаМатериалов.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ТаблицаМатериалов.Назначение КАК Назначение,
	|	ТаблицаМатериалов.Подразделение КАК Подразделение,
	|	СУММА(ЕСТЬNULL(ТаблицаМатериалыИУслуги.КоличествоФакт, 0)) КАК ПотребностьПоМаршрутнымЛистам,
	|	МАКСИМУМ(ТаблицаМатериалов.КоличествоОтгружено) КАК КоличествоОтгружено,
	|	МАКСИМУМ(ТаблицаМатериалов.КоличествоОсталосьОтгрузить) КАК КоличествоОсталосьОтгрузить
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК ТаблицаМаршрутныйЛист
	|		ПО (ТаблицаМаршрутныйЛист.Распоряжение = ТаблицаМатериалов.Ссылка)
	|			И (ТаблицаМаршрутныйЛист.Подразделение = ТаблицаМатериалов.Подразделение)
	|			И (ТаблицаМаршрутныйЛист.КодСтроки = ТаблицаМатериалов.КодСтрокиПродукция)
	|			И (ТаблицаМаршрутныйЛист.Этап = ТаблицаМатериалов.Этап)
	|			И (ТаблицаМаршрутныйЛист.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен))
	|			И (ТаблицаМаршрутныйЛист.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО (ТаблицаМатериалыИУслуги.Ссылка = ТаблицаМаршрутныйЛист.Ссылка)
	|			И (ТаблицаМатериалыИУслуги.Номенклатура = ТаблицаМатериалов.Номенклатура)
	|			И (ТаблицаМатериалыИУслуги.Характеристика = ТаблицаМатериалов.Характеристика)
	|			И (ТаблицаМатериалыИУслуги.Назначение = ТаблицаМатериалов.Назначение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМатериалов.Ссылка,
	|	ТаблицаМаршрутныйЛист.Организация,
	|	ТаблицаМатериалов.КодСтрокиПродукция,
	|	ТаблицаМатериалов.Этап,
	|	ТаблицаМатериалов.Номенклатура,
	|	ТаблицаМатериалов.Характеристика,
	|	ТаблицаМатериалов.Назначение,
	|	ТаблицаМатериалов.Подразделение";
	
	ТаблицаМатериалыЗаказов = Объект.МатериалыИУслуги.Выгрузить();
	ТаблицаМатериалыЗаказов.Свернуть("Ссылка,КодСтрокиПродукция,Этап,Номенклатура,Характеристика,Назначение,Подразделение", "КоличествоОтгружено,КоличествоОсталосьОтгрузить");
	Запрос.УстановитьПараметр("ТаблицаМатериалов", ТаблицаМатериалыЗаказов);
	
	ПотребностьПоМаршрутнымЛистам = Запрос.Выполнить().Выгрузить();
	
	МерныеТипы = МерныеТипы();
	
	// нужно использовать копию данных, т.к. потребуется изменять свободный остаток
	ДанныеПоМатериаламКопия = ДанныеПоМатериалам.Выгрузить();
	ДанныеПоМатериаламКопия.Свернуть("Номенклатура,Характеристика,Назначение,Склад,ОстатокНаСкладе");
	ДанныеПоМатериаламКопия.Индексы.Добавить("Номенклатура,Характеристика,Назначение,Склад");
	
	ОбработаноСтрок = 0;
	ДефицитУстраненЧастично = Ложь;
	СтруктураПоискаМатериаловЗаказов = Новый Структура("Ссылка,КодСтрокиПродукция,Этап,Номенклатура,Характеристика,Назначение,Подразделение");
	Для каждого СтрокаДефицитМатериала Из ТаблицаМатериалов Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,Подразделение,Организация");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДефицитМатериала);
  		ТекущаяПотребность = ПотребностьПоМаршрутнымЛистам.НайтиСтроки(СтруктураПоиска);
		Для каждого Выборка Из ТекущаяПотребность Цикл
			
			Дефицит = Выборка.ПотребностьПоМаршрутнымЛистам - Выборка.КоличествоОтгружено;
			Дефицит = Мин(Дефицит, -СтрокаДефицитМатериала.ТекущийИзлишекДефицит);
			
			Если Дефицит <= 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			УпаковкаПоУмолчанию = Неопределено;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаМатериаловЗаказов, Выборка);
			СписокСтрокДляКорректировки = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураПоискаМатериаловЗаказов);
			
			// Корректировка строк по заказу
			Для каждого ВариантОбеспечения Из ПорядокВыборкиВариантовОбеспечения Цикл
				Для каждого СтрокаМатериал Из СписокСтрокДляКорректировки Цикл
					
					Если УпаковкаПоУмолчанию = Неопределено Тогда
						УпаковкаПоУмолчанию = СтрокаМатериал.Упаковка;
					ИначеЕсли УпаковкаПоУмолчанию <> СтрокаМатериал.Упаковка Тогда
						УпаковкаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецЕсли;
					
					Если ТипЗнч(СтрокаМатериал.Ссылка) <> Тип("ДокументСсылка.ЗаказНаПроизводство") 
					 Или СтрокаМатериал.ВариантОбеспечения <> ВариантОбеспечения.ВариантОбеспечения
					 Или СтрокаМатериал.Обособленно <> ВариантОбеспечения.Обособленно Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокНаСкладе = 0;
					СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,Склад");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаМатериал);
				 	СписокСтрок = ДанныеПоМатериаламКопия.НайтиСтроки(СтруктураПоиска);
					Если СписокСтрок.Количество() <> 0 Тогда
						ДанныеПоМатериалу = СписокСтрок[0];
						ОстатокНаСкладе = ДанныеПоМатериалу.ОстатокНаСкладе;
					КонецЕсли;
					
					Если ОстатокНаСкладе <=0 Тогда
						Продолжить;
					КонецЕсли;
					
					КОтгрузке = Мин(Дефицит, ОстатокНаСкладе);
					
					// Если материал хранится в "штуках", но выбрана мерная единица,
					// то после разбиения строк нужно округлить количество, чтобы корректировка провелась
					Если СтрокаМатериал.Количество > КОтгрузке
						И Выборка.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
						И ЗначениеЗаполнено(СтрокаМатериал.Упаковка) Тогда
						ТипИзмеряемойВеличины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМатериал.Упаковка, "ТипИзмеряемойВеличины");
						Если МерныеТипы.Найти(ТипИзмеряемойВеличины) <> Неопределено Тогда
							КОтгрузке = ?(Цел(КОтгрузке) <> КОтгрузке, Цел(КОтгрузке) + 1, КОтгрузке);
						КонецЕсли;
					КонецЕсли;
					
					Если СтрокаМатериал.Количество > КОтгрузке
						И СтрокаМатериал.ПроизводитсяВПроцессе 
						И НЕ ИспользуютсяКорректировки Тогда
						// Нельзя разбивать строки если не используются корректировки
						Продолжить;
					КонецЕсли;
					
					Если СтрокаМатериал.Количество > КОтгрузке Тогда
						СтрокаДляКорректировки = Объект.МатериалыИУслуги.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДляКорректировки, СтрокаМатериал);
						
						СтрокаДляКорректировки.КодСтроки = 0;
						СтрокаДляКорректировки.Количество = КОтгрузке;
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДляКорректировки, СтруктураДействий, КэшированныеЗначения);
						
						СтрокаМатериал.Количество = СтрокаМатериал.Количество - СтрокаДляКорректировки.Количество;
						СтрокаМатериал.КоличествоУпаковок = СтрокаМатериал.КоличествоУпаковок - СтрокаДляКорректировки.КоличествоУпаковок;
					Иначе
						СтрокаДляКорректировки = СтрокаМатериал;
					КонецЕсли;
					
					СтрокаДляКорректировки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
					
					Дефицит = Дефицит - СтрокаДляКорректировки.Количество;
					СтрокаДефицитМатериала.ТекущийИзлишекДефицит = СтрокаДефицитМатериала.ТекущийИзлишекДефицит + СтрокаДляКорректировки.Количество;
					ДанныеПоМатериалу.ОстатокНаСкладе = ДанныеПоМатериалу.ОстатокНаСкладе - СтрокаДляКорректировки.Количество;
					
					ОбработаноСтрок = ОбработаноСтрок + 1;
					
					Если Дефицит <= 0 Тогда
						Прервать;
					КонецЕсли; 
					
				КонецЦикла;
				
				Если Дефицит <= 0 Тогда
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			// Добавление строки сверх заказа
			Если Дефицит > 0 Тогда
				Если Выборка.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук Тогда
					КОтгрузке = ?(Цел(Дефицит) <> Дефицит, Цел(Дефицит) + 1, Дефицит);
				Иначе
					КОтгрузке = Дефицит;
				КонецЕсли;
				
				СтрокаДляКорректировки = ОтгрузитьСтрокуСверхЗаказа(
											Выборка, 
											КОтгрузке, 
											УпаковкаПоУмолчанию,
											ДанныеПоМатериаламКопия, 
											КэшированныеЗначения);
											
				Если СтрокаДляКорректировки <> Неопределено Тогда
					СтрокаДефицитМатериала.ТекущийИзлишекДефицит = СтрокаДефицитМатериала.ТекущийИзлишекДефицит + СтрокаДляКорректировки.Количество;
					ОбработаноСтрок = ОбработаноСтрок + 1;
				КонецЕсли; 
			КонецЕсли; 
			
			Если СтрокаДефицитМатериала.ТекущийИзлишекДефицит = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаДефицитМатериала.ТекущийИзлишекДефицит < 0 Тогда
			СтрокаДляКорректировки = ОтгрузитьСтрокуСверхЗаказа(
											СтрокаДефицитМатериала, 
											-СтрокаДефицитМатериала.ТекущийИзлишекДефицит, 
											Неопределено,
											ДанныеПоМатериаламКопия,
											КэшированныеЗначения);
											
			Если СтрокаДляКорректировки <> Неопределено Тогда
				ОбработаноСтрок = ОбработаноСтрок + 1;
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаДефицитМатериала.ТекущийИзлишекДефицит < 0 Тогда
			ДефицитУстраненЧастично = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	ОбновитьИтогиПоМатериалам();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Если ОбработаноСтрок = 0 Тогда
		ТекстОповещенияПриОткрытии = НСтр("ru = 'Не удалось запланировать отгрузку материалов. Возможно, отсутствует остаток на складе.';
											|en = 'Cannot plan material shipment. There may be no stock in the warehouse.'");
		КартинкаОповещенияПриОткрытии = БиблиотекаКартинок.Внимание48;
	ИначеЕсли ДефицитУстраненЧастично Тогда
		ТекстОповещенияПриОткрытии = НСтр("ru = 'Отгрузка запланирована частично. Возможно, отсутствует остаток на складе.';
											|en = 'Shipment is partially planned. Maybe there is no stock in the warehouse.'");
		КартинкаОповещенияПриОткрытии = БиблиотекаКартинок.Внимание48;
	Иначе
		ТекстОповещенияПриОткрытии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Обработано строк: %1';
											|en = 'Processed lines: %1'"),
										Формат(ОбработаноСтрок, "ЧН=0; ЧГ="));
	КонецЕсли; 
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОтгрузитьСтрокуСверхЗаказа(ТекущиеДанные, Количество, УпаковкаПоУмолчанию, ДанныеПоМатериаламКопия, КэшированныеЗначения)

	Если НЕ ИспользуютсяКорректировки Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	СкладПоУмолчанию = СкладПоУмолчанию(ТекущиеДанные);
	
	ОстатокНаСкладе = 0;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,Склад");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	СтруктураПоиска.Вставить("Склад", СкладПоУмолчанию);
 	СписокСтрок = ДанныеПоМатериаламКопия.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		ДанныеПоМатериалу = СписокСтрок[0];
		ОстатокНаСкладе = ДанныеПоМатериалу.ОстатокНаСкладе;
	КонецЕсли;
	
	Если ОстатокНаСкладе <= 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КОтгрузке = Мин(Количество, ОстатокНаСкладе);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	СтрокаДляКорректировки = Объект.МатериалыИУслуги.Добавить();
	ЗаполнитьСтрокуСверхЗаказа(СтрокаДляКорректировки, Ложь, ПодразделениеПоУмолчанию);
	ЗаполнитьЗначенияСвойств(СтрокаДляКорректировки, ТекущиеДанные);
	СтрокаДляКорректировки.Количество = КОтгрузке;
	СтрокаДляКорректировки.Упаковка = УпаковкаПоУмолчанию;
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДляКорректировки, СтруктураДействий, КэшированныеЗначения);
	
	СтрокаДляКорректировки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	СтрокаДляКорректировки.Обособленно = ЗначениеЗаполнено(СтрокаДляКорректировки.Назначение);
	
	СтрокаДляКорректировки.ЗаказатьНаСклад = Истина;
	СтрокаДляКорректировки.Склад = СкладПоУмолчанию;
	СтрокаДляКорректировки.ДатаПотребности = ТекущаяДатаСеанса();

	ДанныеПоМатериалу.ОстатокНаСкладе = ДанныеПоМатериалу.ОстатокНаСкладе - СтрокаДляКорректировки.Количество;
	
	Возврат СтрокаДляКорректировки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()

	СтруктураПоиска = Новый Структура("НоменклатураПредставление", "");
 	СписокСтрок = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(МатериалыИУслуги.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика
		|ПОМЕСТИТЬ МатериалыИУслуги
		|ИЗ
		|	&МатериалыИУслуги КАК МатериалыИУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МатериалыИУслуги.Номенклатура,
		|	МатериалыИУслуги.Характеристика,
		|	МатериалыИУслуги.Номенклатура.Представление КАК НоменклатураПредставление,
		|	МатериалыИУслуги.Характеристика.Представление КАК ХарактеристикаПредставление
		|ИЗ
		|	МатериалыИУслуги КАК МатериалыИУслуги";
		
		Запрос.УстановитьПараметр("МатериалыИУслуги", Объект.МатериалыИУслуги.Выгрузить(СписокСтрок));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", Выборка.Номенклатура, Выборка.Характеристика);
	  		СписокСтрок = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаМатериал Из СписокСтрок Цикл
				СтрокаМатериал.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
															Выборка.НоменклатураПредставление,
															Выборка.ХарактеристикаПредставление);
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли; 
	
	Для каждого ТекущиеДанные Из Объект.МатериалыИУслуги Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущиеДанные);
		ТекущиеДанные.ТолькоПросмотр = ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство");
	КонецЦикла;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", 
									Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
								
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 
									Новый Структура("Номенклатура", "ТипНоменклатуры"));
									
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", 
									Новый Структура("Номенклатура", "Артикул"));
									
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги, 
		СтруктураДействий);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьПоСпискуНоменклатуры()

	ТаблицаМатериалов = Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалов.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаМатериалов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаМатериалов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалов.Колонки.Добавить("ТекущийИзлишекДефицит", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаМатериалов.Колонки.Добавить("ОжидаетсяКПолучению", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаМатериалов.Колонки.Добавить("ВРезерве", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаМатериалов, Параметры.СписокНоменклатуры);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьВводКорректировкиЗаказаМатериаловПоМатериалам(ТаблицаМатериалов);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьДанныеПоМатериалам(ТаблицаМатериалов);
	
	Если Параметры.ВыполнитьДействие = "УстранитьТекущийДефицит" Тогда
		УстранитьТекущийДефицит(ТаблицаМатериалов);
	ИначеЕсли Параметры.ВыполнитьДействие = "Зарезервировать" Тогда
		ЗарезервироватьЗапланированноеКПолучению(ТаблицаМатериалов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпискуЗаказов()

	КлючСвязиПродукция = Неопределено;
	Параметры.Свойство("КлючСвязиПродукция", КлючСвязиПродукция);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьВводКорректировкиЗаказаМатериаловПоЗаказам(Параметры.СписокЗаказов, КлючСвязиПродукция);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

	ЗаполнитьДанныеПоМатериалам();
	
КонецПроцедуры

&НаСервере
Процедура ЗапланироватьПолучениеМатериаловПоМаршрутномуЛисту()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗапланироватьПолучениеМатериаловПоМаршрутномуЛисту(Параметры.СписокМаршрутныхЛистов);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизиты();

	ЗаполнитьДанныеПоМатериалам();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Стандартное оформление номенклатуры
	#Область ОформлениеНоменклатуры
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "МатериалыИУслугиНоменклатураЕдиницаИзмерения", "Объект.МатериалыИУслуги.Упаковка");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "МатериалыИУслугиХарактеристика", "Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары", 
																     "МатериалыИУслугиСерия", 
																     "Объект.МатериалыИУслуги.СтатусУказанияСерий", 
																     "Объект.МатериалыИУслуги.ТипНоменклатуры");
	#КонецОбласти
	
	// Оформление цветом заказов
	#Область ЦветРаспоряжений
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСсылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	#КонецОбласти
		
	// Запрет редактирования реквизитов если строка не сверх заказа
	#Область ТолькоПросмотрРеквизитов
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиХарактеристика.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНазначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковок.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСсылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КодСтрокиРаспоряжения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Запрет редактирования строк которые нельзя менять
	#Область ТолькоПросмотрРеквизитов
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслуги.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Запрет редактирования строк сверх заказа, если они уже записаны
	#Область ТолькоПросмотрСверхЗаказа
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиХарактеристика.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСерия.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНазначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковок.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиУпаковка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиДатаПотребности.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.РасхождениеЗаказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Текст "Сверх заказа, заказ не выбран"
	#Область ТекстСверхЗаказа 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСсылка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КодСтрокиРаспоряжения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сверх заказа, заказ не выбран';
																|en = 'In excess of the order, the order is not selected'"));
	#КонецОбласти
	
	// Проверка заполнения назначения
	#Область ПроверкаЗаполненияНазначения
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Обособленно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	#КонецОбласти
	
	// Полуфабрикаты выделяются коричневым
	#Область Полуфабрикаты_ЦветТекста
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслуги.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	#КонецОбласти
	
	// Для полуфабрикатов некоторые поля недоступны
	#Область Полуфабрикаты_ОграничениеРедактирования
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОтменитьПолучение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСклад.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОбособленно.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	Обработки.ВводКорректировкиЗаказаМатериалов.УстановитьУсловноеОформление(УсловноеОформление, Элементы, "Объект", "");
	
	ОбеспечениеВДокументахСервер.УстановитьУсловноеОформлениеОбособленно(
		УсловноеОформление,
		Элементы.МатериалыИУслугиОбособленно,
		"Объект.МатериалыИУслуги.ВариантОбеспечения",
		"Объект.МатериалыИУслуги.ТипНоменклатуры");
		
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьИзменения()
	Перем СписокСозданныхДокументов;
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ЗаписатьИзмененияНаСервере(СписокСозданныхДокументов) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если СписокСозданныхДокументов.Количество() = 1 Тогда
		Если ИспользуютсяКорректировки Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Создание:';
												|en = 'Created:'"), 
											ПолучитьНавигационнуюСсылку(СписокСозданныхДокументов[0].Значение),
											СписокСозданныхДокументов[0].Представление);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение:';
												|en = 'Change'"), 
											ПолучитьНавигационнуюСсылку(СписокСозданныхДокументов[0].Значение),
											СписокСозданныхДокументов[0].Представление);
		КонецЕсли; 
										
	ИначеЕсли СписокСозданныхДокументов.Количество() > 1 Тогда
		Если ИспользуютсяКорректировки Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Создание:';
												|en = 'Created:'"),, НСтр("ru = 'Созданы корректировки заказа материалов';
																			|en = 'Material order adjusting entries are created'"));
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение:';
												|en = 'Change'"),, НСтр("ru = 'Внесены изменения в заказы на производство';
																			|en = 'Production orders were changed'"));
		КонецЕсли; 
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Оповестить("Запись_КорректировкаЗаказаМатериаловВПроизводство");
	Оповестить("Запись_ЗаказМатериаловВПроизводство");
	ОповеститьОбИзменении(Тип("ДокументСсылка.КорректировкаЗаказаМатериаловВПроизводство"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказМатериаловВПроизводство"));
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция ЗаписатьИзмененияНаСервере(СписокСозданныхДокументов)
	
	Возврат Обработки.ВводКорректировкиЗаказаМатериалов.ЗаписатьИзменения(Объект.МатериалыИУслуги, СписокСозданныхДокументов);
	
КонецФункции

&НаКлиенте
Процедура РазбитьСтроку()
	
	ДанныеТаблицы = Объект.МатериалыИУслуги;
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущаяСтрока.ПроизводитсяВПроцессе И НЕ ИспользуютсяКорректировки Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Разбивать строку полуфабриката не допускается, т.к. не используются корректировки заказа.';
										|en = 'Cannot split the semi-finished product line as order adjusting entries are not used.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru = 'Введите количество в новой строке';
												|en = 'Enter quantity in a new line'");
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, Элементы.МатериалыИУслуги, Оповещение, ПараметрыРазбиенияСтроки);
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ТекущаяСтрока, "ОбновитьКэшНоменклатура");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		НоваяСтрока.КодСтроки = 0;
		НоваяСтрока.КоличествоОтгружено = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущиеДанные, СтруктураДействий)

	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущиеДанные, "МатериалыИУслуги"));

КонецФункции

&НаСервере
Процедура МатериалыИУслугиПриИзмененииНаСервере()

	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьДанныеПоМатериалам();
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока; 
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущиеДанные);
	КонецЕсли;

	ОбновитьИтогиПоМатериалам();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоМатериалам()

	Для каждого ДанныеПоМатериалу Из ДанныеПоМатериалам Цикл
		ДанныеПоМатериалу.ПолучитьСоСклада = 0;
		ДанныеПоМатериалу.ОжидаетсяКПолучению = 0;
	КонецЦикла; 
	
	Для каждого СтрокаМатериал Из Объект.МатериалыИУслуги Цикл
		
		Если СтрокаМатериал.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоМатериалу = ДанныеПоМатериалу(ДанныеПоМатериалам, СтрокаМатериал);
		Если ДанныеПоМатериалу = Неопределено Тогда
			ДанныеПоМатериалу = ДанныеПоМатериалам.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеПоМатериалу, СтрокаМатериал, "Номенклатура,Характеристика,Назначение,Подразделение,Организация");
		КонецЕсли;
		
		Если СтрокаМатериал.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			
			ДанныеПоМатериалу.ПолучитьСоСклада = ДанныеПоМатериалу.ПолучитьСоСклада + СтрокаМатериал.Количество - СтрокаМатериал.КоличествоОтгружено;
			
		ИначеЕсли СтрокаМатериал.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется Тогда
			
			ДанныеПоМатериалу.ОжидаетсяКПолучению = ДанныеПоМатериалу.ОжидаетсяКПолучению + СтрокаМатериал.Количество;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуСверхЗаказа(ТекущиеДанные, Копирование, ПодразделениеПоУмолчанию)

	ТекущиеДанные.КодСтрокиРаспоряжения = 0;
	ТекущиеДанные.Отменено = Ложь;
	ТекущиеДанные.КоличествоОтгружено = 0;
	
	// Очистка исходных реквизитов
	ТекущиеДанные.Назначение = Неопределено;
	ТекущиеДанные.ВариантОбеспеченияИсходный = Неопределено;
	ТекущиеДанные.ОбособленноИсходный = Ложь;
	ТекущиеДанные.КодСтрокиИсходный = 0;
	ТекущиеДанные.ОтмененоИсходный = Ложь;
	ТекущиеДанные.СерияИсходный = Неопределено;
	ТекущиеДанные.СкладИсходный = Неопределено;
	ТекущиеДанные.УпаковкаИсходный = Неопределено;
	ТекущиеДанные.ЗаказатьНаСкладИсходный = Ложь;
	ТекущиеДанные.ДатаПотребностиИсходный = '000101010000';
	ТекущиеДанные.РазрешенаОтмена = Истина;

	ТекущиеДанные.ЗаказатьНаСклад = Истина;
	ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
	ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
	ТекущиеДанные.Обособленно = Истина;
	
	Если Копирование Тогда
		
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
			ТекущиеДанные.Ссылка = Неопределено;
			ТекущиеДанные.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.Подразделение = ПодразделениеПоУмолчанию;
		
	КонецЕсли;
	
	ОбновитьОтклоненияОтЗаказаВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные.КодСтрокиРаспоряжения = 0 Тогда
		ТекущиеДанные.РасхождениеЗаказ = 1;
	Иначе
		ТекущиеДанные.РасхождениеЗаказ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиНоменклатураПриИзмененииНаСервере(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)

	ТекущаяСтрока = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьКолонкуДоступноСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДанныеПоМатериалу()

	ТребуетсяПоЗаказамНаПроизводство = 0;
	ОжидаемыйИзлишекДефицитИтого = 0;
	ОжидаетсяКПолучению = 0;
	ОстатокВПодразделении = 0;
	ПолучитьСоСкладаИтого = 0;
	ТекущийИзлишекДефицитИтого = 0;
	ТребуетсяПоМаршрутнымЛистам = 0;

	ДанныеПоМатериалу = ДанныеПоМатериалу(ДанныеПоМатериалам, Элементы.МатериалыИУслуги.ТекущиеДанные);
	Если ДанныеПоМатериалу <> Неопределено Тогда
		
		ТребуетсяПоЗаказамНаПроизводство = ДанныеПоМатериалу.ТребуетсяПоЗаказамНаПроизводство;
		ОжидаетсяКПолучению = ДанныеПоМатериалу.ОжидаетсяКПолучению;
		ОстатокВПодразделении = ДанныеПоМатериалу.ОстатокВПодразделении;
		ПолучитьСоСкладаИтого = ДанныеПоМатериалу.ПолучитьСоСклада;
		ТребуетсяПоМаршрутнымЛистам = ДанныеПоМатериалу.ТребуетсяПоМаршрутнымЛистам;
		ОстатокНаСкладе = ДанныеПоМатериалу.ОстатокНаСкладе;
		
		ТекущийИзлишекДефицитИтого = ОстатокВПодразделении + ПолучитьСоСкладаИтого - ТребуетсяПоМаршрутнымЛистам; 
		ОжидаемыйИзлишекДефицитИтого = ТекущийИзлишекДефицитИтого + ОжидаетсяКПолучению - ТребуетсяПоЗаказамНаПроизводство; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеПоМатериалу(ДанныеПоМатериалам, ТекущиеДанные)

	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,Склад,Подразделение,Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
 	СписокСтрок = ДанныеПоМатериалам.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокСтрок[0];

КонецФункции

&НаСервере
Функция СкладПоУмолчанию(ТекущиеДанные)

	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Подразделение");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
 	СписокСтрок = ДанныеПоМатериалам.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокСтрок[0].СкладПоУмолчанию;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииВариантаОбеспечения()
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.Обособленно Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Назначение) Тогда
			ДанныеЗаполнения = Новый Структура;
			
			ДанныеЗаполнения.Вставить("КлючСвязи",        ТекущиеДанные.КлючСвязи);
			ДанныеЗаполнения.Вставить("Номенклатура",     ТекущиеДанные.Номенклатура);
			ДанныеЗаполнения.Вставить("Характеристика",   ТекущиеДанные.Характеристика);
			ДанныеЗаполнения.Вставить("Подразделение",    ТекущиеДанные.Подразделение);
			ДанныеЗаполнения.Вставить("Склад",            ТекущиеДанные.Склад);
			ДанныеЗаполнения.Вставить("Назначение",       ТекущиеДанные.НазначениеПродукции);
			ДанныеЗаполнения.Вставить("НазначениеЗаказа", ТекущиеДанные.НазначениеЗаказа);
			
			ДанныеПродукции = ПланированиеПроизводстваКлиентСервер.СтруктураДанныхПродукции(ДанныеЗаполнения);
			ДанныеПродукции.ПоЗаказуДавальца               = ТекущиеДанные.ПроизводствоПоЗаказу;
			ДанныеПродукции.ОбосабливатьПоНазначениюЗаказа = ТекущиеДанные.ОбосабливатьПоНазначениюЗаказа;
			
			ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(
				ТекущиеДанные, ДанныеПродукции);
		КонецЕсли; 
		
	Иначе
		
		ТекущиеДанные.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияВариантаОбеспечения()

	ОбновитьИтогиПоМатериалам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ЗаписатьИзменения() Тогда
		Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "")
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий());
	Если ПараметрыФормы <> Неопределено Тогда
		
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтменено(ТекущиеДанные)

	Если ТекущиеДанные.Отменено
		И ТекущиеДанные.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
		И ТекущиеДанные.КоличествоОтгружено = 0 Тогда
		
		ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		ТекущиеДанные.Обособленно = Ложь;
		ТекущиеДанные.ЗаказатьНаСклад = Ложь;
		
		ПриИзмененииВариантаОбеспечения();
		
	ИначеЕсли НЕ ТекущиеДанные.Отменено 
		И ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется") Тогда
		
		Если ТекущиеДанные.КодСтрокиРаспоряжения <> 0 Тогда
			ТекущиеДанные.ВариантОбеспечения = ТекущиеДанные.ВариантОбеспеченияИсходный;
			ТекущиеДанные.Обособленно = ТекущиеДанные.ОбособленноИсходный;
			ТекущиеДанные.ЗаказатьНаСклад = ТекущиеДанные.ЗаказатьНаСкладИсходный;
		Иначе
			ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
			ТекущиеДанные.Обособленно = ЗначениеЗаполнено(ТекущиеДанные.Назначение);
			ТекущиеДанные.ЗаказатьНаСклад = Истина;
		КонецЕсли; 
		
		ПриИзмененииВариантаОбеспечения();

	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
		ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

Функция МерныеТипы()

	МерныеТипы = Новый Массив;
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
	
	Возврат МерныеТипы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21
