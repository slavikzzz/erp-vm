//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет команду создания объекта.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОснованииОтгрузкаПоМаршрутнымЛистам(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ВводКорректировкиЗаказаМатериалов) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.ОтгрузкаПоМаршрутнымЛистам";
		КомандаСоздатьНаОсновании.Идентификатор = "ОтгрузкаПоМаршрутнымЛистам";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Отгрузка материалов со склада';
														|en = 'Ship materials from warehouse'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания объекта.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОснованииКорректировкаЗаказаМатериалов(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ВводКорректировкиЗаказаМатериалов) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.КорректировкаЗаказаМатериалов";
		КомандаСоздатьНаОсновании.Идентификатор = "КорректировкаЗаказаМатериалов";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Корректировка заказа материалов';
														|en = 'Adjust order for materials'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьКорректировкиЗаказаМатериаловВПроизводство";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Обработка.ВводКорректировкиЗаказаМатериалов";
	ПараметрыУказанияСерий.ИмяТЧТовары = "МатериалыИУслуги";
	ПараметрыУказанияСерий.ИмяТЧСерии = "МатериалыИУслуги";
	
	ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ПроизводитсяВПроцессе");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ЗаказатьНаСклад");
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка);
		
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Подразделение");
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Подразделение,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки,
	|	Товары.ВариантОбеспечения,
	|	Товары.ЗаказатьНаСклад,
	|	Товары.ПроизводитсяВПроцессе
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЗаказатьНаСклад
	|				ИЛИ Товары.ПроизводитсяВПроцессе
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЗаказатьНаСклад
	|				ИЛИ Товары.ПроизводитсяВПроцессе
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА 14
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Подразделение)
	|			И (ПолитикиУчетаСерий.Ссылка = СпрНоменклатура.ВидНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	ВЫБОР
	|		КОГДА СтатусыОтправитель.СтатусУказанияСерий В (10, 14)
	|			ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийПолучатель,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО (СтатусыОтправитель.НомерСтроки = Товары.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО (СтатусыПолучатель.НомерСтроки = Товары.НомерСтроки)
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыОтправитель.СтатусУказанияСерий В (10, 14)
	|					ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|				ИНАЧЕ 0
	|			КОНЕЦ <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает условное оформление в списке ввода корректировки заказа материалов.
//
// Параметры:
//  УсловноеОформление		 - УсловноеОформлениеКомпоновкиДанных - Условное оформление формы.
//  Элементы				 - ВсеЭлементыФормы - Элементы формы.
//  ИмяРеквизита			 - Строка - Имя реквизита, который содержит данные, например, "Объект".
//  ПрефиксЭлементов		 - Строка - Префикс элементов формы "[ПрефиксЭлементов]МатериалыИУслуги".
//  ДляВводаКорректировок	 - Булево - Истина, если условное оформление устанавливается для ввода корректировок.
//
Процедура УстановитьУсловноеОформление(УсловноеОформление, Элементы, ИмяРеквизита, ПрефиксЭлементов, ДляВводаКорректировок = Истина) Экспорт
		
	// Текст <из подразделения> если материал не заказывается на склад
	#Область ОтметкаНезаполненногоСклад
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСклад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ЗаказатьНаСклад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<из подразделения>';
																|en = '<from business unit>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	#КонецОбласти
	
	// Склад можно выбрать только для товаров
	#Область ТолькоПросмотрСклад
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСклад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	#КонецОбласти
	
	// Запретить редактировать строку и выделить ее коричневым цветом, если материал производится в процессе.
	#Область НастройкаОформленияДляМатериалаПроизводимогоВПроцессе
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслуги"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", ДляВводаКорректировок);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	#КонецОбласти
	
	// Выделение серым отмененных строк
	#Область ВыделениеСерымОтмененныхСтрок
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслуги"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	#КонецОбласти
	
	// Запрет редактирования полей отмененных строк
	#Область ТолькоПросмотрОтмененныхСтрок
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСклад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Текст <Отгружено>
	#Область ТекстОтгружено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОтгружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОсталосьОтгрузить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отгружено>';
																|en = '<Shipped>'"));
	#КонецОбласти
	
	// Текст <Отгружается>
	#Область ТекстОтгружено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОтгружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОсталосьОтгрузить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отгружается>';
																|en = '<Being shipped>'"));
	#КонецОбласти
	
	// Текст <Оставить в подразделении>
	#Область ТекстОтгружено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОтгружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Оставить в подразделении>';
																|en = '<Leave in the business unit>'"));
	#КонецОбласти
	
	// Запрет редактирования если материал отгружен
	#Область ТолькоПросмотрОтгружено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСерия"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиУпаковка"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиОбособленно"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСклад"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиДатаПотребности"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОтгружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
		
	// Вариант обеспечения и дата потребности не используется
	#Область ВариантОбеспеченияНеИспользуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиОбособленно"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиДатаПотребности"].Имя);

	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	// если это работа и не используется обособленное обеспечение
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
	
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	КонецЕсли;
	#КонецОбласти

	// Дата потребности не используется
	#Область ДатаПотребностиНеИспользуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиДатаПотребности"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется);
	ОтборЭлемента.ПравоеЗначение = СписокВариантов;

	#КонецОбласти
	
	// Дата потребности ОтметкаНезаполненного
	#Область ДатаПотребностиОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиДатаПотребности"].Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".Товары.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОбеспечения.НеТребуется;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ПодгруппаОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодгруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ПодгруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ЗаказатьНаСклад");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ПодгруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	#КонецОбласти
	
КонецПроцедуры

// Выполняет запись корректировки заказа материалов
// Если используются корректировки заказа, то создаются документы КорректировкаЗаказаМатериаловВПроизводство
// Если не используются корректировки заказа, то изменения записываются в заказы на производство.
//
// Параметры:
//  МатериалыИУслуги 			- ТаблицаЗначений, ДанныеФормыКоллекция - данные по материалам (см. табличную часть "МатериалыИУслуги")
//  СписокСозданныхДокументов	- СписокЗначений - содержит список созданных документов.
//
// Возвращаемое значение:
//   - Булево - Истина, если изменения записаны.
//
Функция ЗаписатьИзменения(МатериалыИУслуги, СписокСозданныхДокументов = Неопределено) Экспорт
	
	СписокСозданныхДокументов = Новый СписокЗначений;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство") Тогда
		РезультатЗаписи = ЗаписатьИзмененияВКорректировкиЗаказаМатериаловВПроизводство(МатериалыИУслуги, СписокСозданныхДокументов);
	Иначе
		РезультатЗаписи = ЗаписатьИзмененияВЗаказыНаПроизводство(МатериалыИУслуги, СписокСозданныхДокументов);
	КонецЕсли;
	
	Возврат РезультатЗаписи
	
КонецФункции

// Переносит корректировку материалов в заказы на производство
//
// Параметры:
//  МатериалыИУслуги - ТаблицаЗначений, ДанныеФормыКоллекция - данные по материалам (см. табличную часть "МатериалыИУслуги")
//  СписокДокументов - Соответствие - содержит сформированные документы, 
//										можно передать параметр с заполненными ключами, 
//										чтобы заполнить уже полученные заказы-объект.
// 
// Возвращаемое значение:
//   Булево - Истина, если операция успешно выполнена.
//
Функция ПеренестиКорректировкуВЗаказы(МатериалыИУслуги, СписокДокументов) Экспорт

	СписокИзмененныхСтрок = СписокИзмененныхСтрок(МатериалыИУслуги);
	
	ТаблицаМатериалыИУслуги = Новый ТаблицаЗначений;
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство, ДокументСсылка.ЗаказМатериаловВПроизводство"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("КодСтрокиИсходный", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("КодСтрокиРаспоряжения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	ТаблицаМатериалыИУслуги.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Обособленно", Новый ОписаниеТипов("Булево"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("ДатаПотребности", Новый ОписаниеТипов("Дата"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Отменено", Новый ОписаниеТипов("Булево"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	
	ДобавленныеСтрокиРаспоряжений = Новый Соответствие;
	
	Для каждого ДанныеСтроки Из СписокИзмененныхСтрок Цикл
		
		ДокументОбъект = СписокДокументов.Получить(ДанныеСтроки.Ссылка);
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
			Попытка
				// Заблокируем заказ для редактирования
				ЗаблокироватьДанныеДляРедактирования(ДанныеСтроки.Ссылка);
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
			СписокДокументов.Вставить(ДанныеСтроки.Ссылка, ДокументОбъект);
		КонецЕсли;
		
		СтрокаКорректировка = ТаблицаМатериалыИУслуги.Добавить();
		СтрокаКорректировка.Распоряжение = ДанныеСтроки.Ссылка;
		СтрокаКорректировка.КодСтрокиРаспоряжения = ДанныеСтроки.КодСтрокиРаспоряжения;
		СтрокаКорректировка.ВариантОбеспечения = ДанныеСтроки.ВариантОбеспеченияИсходный;
		СтрокаКорректировка.Обособленно = ДанныеСтроки.ОбособленноИсходный;
		СтрокаКорректировка.Назначение = ДанныеСтроки.Назначение;
		СтрокаКорректировка.ТипНоменклатуры = ДанныеСтроки.ТипНоменклатуры;
		СтрокаКорректировка.ДатаПотребности = ДанныеСтроки.ДатаПотребностиИсходный;
		СтрокаКорректировка.КодСтроки = ДанныеСтроки.КодСтрокиИсходный;
		СтрокаКорректировка.Отменено = ДанныеСтроки.ОтмененоИсходный;
		СтрокаКорректировка.Серия = ДанныеСтроки.СерияИсходный;
		СтрокаКорректировка.Склад = ДанныеСтроки.СкладИсходный;
		СтрокаКорректировка.Упаковка = ДанныеСтроки.УпаковкаИсходный;
		СтрокаКорректировка.Количество = -ДанныеСтроки.Количество;
		СтрокаКорректировка.КоличествоУпаковок = -ДанныеСтроки.КоличествоУпаковок;
		
		СтрокаКорректировка = ТаблицаМатериалыИУслуги.Добавить();
		СтрокаКорректировка.Распоряжение = ДанныеСтроки.Ссылка;
		СтрокаКорректировка.КодСтрокиРаспоряжения = ДанныеСтроки.КодСтрокиРаспоряжения;
		СтрокаКорректировка.ВариантОбеспечения = ДанныеСтроки.ВариантОбеспечения;
		СтрокаКорректировка.Обособленно = ДанныеСтроки.Обособленно;
		СтрокаКорректировка.ТипНоменклатуры = ДанныеСтроки.ТипНоменклатуры;
		СтрокаКорректировка.Назначение = ДанныеСтроки.Назначение;
		СтрокаКорректировка.ДатаПотребности = ДанныеСтроки.ДатаПотребности;
		СтрокаКорректировка.КодСтроки = ДанныеСтроки.КодСтроки;
		СтрокаКорректировка.Отменено = ДанныеСтроки.Отменено;
		СтрокаКорректировка.Серия = ДанныеСтроки.Серия;
		СтрокаКорректировка.Склад = ДанныеСтроки.Склад;
		СтрокаКорректировка.Упаковка = ДанныеСтроки.Упаковка;
		СтрокаКорректировка.Количество = ДанныеСтроки.Количество;
		СтрокаКорректировка.КоличествоУпаковок = ДанныеСтроки.КоличествоУпаковок;
		
		СтрокиРаспоряжения = ДобавленныеСтрокиРаспоряжений.Получить(ДанныеСтроки.Ссылка);
		Если СтрокиРаспоряжения = Неопределено ИЛИ СтрокиРаспоряжения.Найти(ДанныеСтроки.КодСтрокиРаспоряжения) = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура("КодСтроки", СтрокаКорректировка.КодСтрокиРаспоряжения);
			СтрокаМатериалИсходный = ДокументОбъект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора)[0];
			
			СтрокаКорректировка = ТаблицаМатериалыИУслуги.Добавить();
			СтрокаКорректировка.Распоряжение = ДанныеСтроки.Ссылка;
			СтрокаКорректировка.КодСтрокиРаспоряжения = ДанныеСтроки.КодСтрокиРаспоряжения;
			СтрокаКорректировка.ВариантОбеспечения = СтрокаМатериалИсходный.ВариантОбеспечения;
			СтрокаКорректировка.Обособленно = СтрокаМатериалИсходный.Обособленно;
			СтрокаКорректировка.Назначение = ДанныеСтроки.Назначение;
			СтрокаКорректировка.ТипНоменклатуры = ДанныеСтроки.ТипНоменклатуры;
			СтрокаКорректировка.ДатаПотребности = СтрокаМатериалИсходный.ДатаПотребности;
			СтрокаКорректировка.КодСтроки = СтрокаМатериалИсходный.КодСтроки;
			СтрокаКорректировка.Отменено = СтрокаМатериалИсходный.Отменено;
			СтрокаКорректировка.Серия = СтрокаМатериалИсходный.Серия;
			СтрокаКорректировка.Склад = СтрокаМатериалИсходный.Склад;
			СтрокаКорректировка.Упаковка = СтрокаМатериалИсходный.Упаковка;
			СтрокаКорректировка.Количество = СтрокаМатериалИсходный.Количество;
			СтрокаКорректировка.КоличествоУпаковок = СтрокаМатериалИсходный.КоличествоУпаковок;
			
			Если СтрокиРаспоряжения = Неопределено Тогда
				СтрокиРаспоряжения = Новый Массив;
			КонецЕсли; 
			СтрокиРаспоряжения.Добавить(ДанныеСтроки.КодСтрокиРаспоряжения);
			ДобавленныеСтрокиРаспоряжений.Вставить(ДанныеСтроки.Ссылка, СтрокиРаспоряжения);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаМатериалыИУслуги.Свернуть("Распоряжение,КодСтрокиРаспоряжения,ВариантОбеспечения,Обособленно,Назначение,ДатаПотребности,ТипНоменклатуры,
									|КодСтроки,Отменено,Серия,Склад,Упаковка", "Количество,КоличествоУпаковок");
									
	// Содержит ключи связи с продукцией по которой изменились материалы									
	// Используется, чтобы сбросить признак расчета графика.
	КодыСтрокПродукции = Новый Соответствие; 
	Для каждого СтрокаКорректировка Из ТаблицаМатериалыИУслуги Цикл
		
		Если СтрокаКорректировка.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СписокДокументов.Получить(СтрокаКорректировка.Распоряжение);
		Если СтрокаКорректировка.КодСтроки = 0 Тогда
			
			ПараметрыОтбора = Новый Структура("КодСтроки", СтрокаКорректировка.КодСтрокиРаспоряжения);
			СтрокаМатериалИсходный = ДокументОбъект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора)[0];
	
			СтрокаМатериал = ДокументОбъект.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериал, СтрокаМатериалИсходный);
			СтрокаМатериал.КодСтроки = 0;
			СтрокаМатериал.КлючСвязи = Новый УникальныйИдентификатор;
			
		Иначе
			
			ПараметрыОтбора = Новый Структура("КодСтроки", СтрокаКорректировка.КодСтроки);
			СтрокаМатериал = ДокументОбъект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора)[0];
			
		КонецЕсли;
		
		СтрокаМатериал.ЗаказатьНаСклад = (СтрокаКорректировка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется
											И СтрокаКорректировка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа);
			
		СтрокаМатериал.ВариантОбеспечения = СтрокаКорректировка.ВариантОбеспечения;
		СтрокаМатериал.Обособленно = СтрокаКорректировка.Обособленно;
		СтрокаМатериал.Назначение = СтрокаКорректировка.Назначение;
		СтрокаМатериал.ДатаПотребности = СтрокаКорректировка.ДатаПотребности;
		СтрокаМатериал.Отменено = СтрокаКорректировка.Отменено;
		СтрокаМатериал.Серия = СтрокаКорректировка.Серия;
		СтрокаМатериал.Склад = СтрокаКорректировка.Склад;
		СтрокаМатериал.Упаковка = СтрокаКорректировка.Упаковка;
		СтрокаМатериал.Количество = СтрокаКорректировка.Количество;
		СтрокаМатериал.КоличествоУпаковок = СтрокаКорректировка.КоличествоУпаковок;
		
		Если ПланированиеПроизводстваКлиентСервер.ЕстьОшибкиЗаполненияНазначенияВСтрокеТЧМатериалыИУслуги(СтрокаМатериал)
				И ЗначениеЗаполнено(СтрокаМатериал.Назначение) Тогда
				СтрокаМатериал.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
		
		ИзмененныеКодыСтрокПродукции = КодыСтрокПродукции.Получить(ДокументОбъект.Ссылка);
		Если ИзмененныеКодыСтрокПродукции = Неопределено Тогда
			ИзмененныеКодыСтрокПродукции = Новый Массив;
		КонецЕсли;
		Если ИзмененныеКодыСтрокПродукции.Найти(СтрокаМатериал.КлючСвязиПродукция) = Неопределено Тогда
			ИзмененныеКодыСтрокПродукции.Добавить(СтрокаМатериал.КлючСвязиПродукция);
			КодыСтрокПродукции.Вставить(ДокументОбъект.Ссылка, ИзмененныеКодыСтрокПродукции);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого ИзмененныеКодыСтрокПродукции Из КодыСтрокПродукции Цикл
		ДокументОбъект = СписокДокументов.Получить(ИзмененныеКодыСтрокПродукции.Ключ);
		Для каждого КлючСвязиПродукция Из ИзмененныеКодыСтрокПродукции.Значение Цикл
			
			ПараметрыОтбора = Новый Структура("КлючСвязи", КлючСвязиПродукция);
			СтрокаПродукции = ДокументОбъект.Продукция.НайтиСтроки(ПараметрыОтбора)[0];
			СтрокаПродукции.ГрафикРассчитан = Ложь;
			
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

// Возвращает строки в которых есть изменения относительно исходного заказа.
//
// Параметры:
//  МатериалыИУслуги - ДанныеФормыКоллекуия - табличная часть МатериалыИУслуги.
// 
// Возвращаемое значение:
//  Массив - список измененных строк.
//
Функция СписокИзмененныхСтрок(МатериалыИУслуги) Экспорт

	СписокИзмененныхСтрок = Новый Массив;
	
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка)
			И (ДанныеСтроки.ВариантОбеспечения <> ДанныеСтроки.ВариантОбеспеченияИсходный
				ИЛИ ДанныеСтроки.Обособленно <> ДанныеСтроки.ОбособленноИсходный
				ИЛИ ДанныеСтроки.ДатаПотребности <> ДанныеСтроки.ДатаПотребностиИсходный
				ИЛИ ДанныеСтроки.Склад <> ДанныеСтроки.СкладИсходный 
				ИЛИ ДанныеСтроки.ЗаказатьНаСклад <> ДанныеСтроки.ЗаказатьНаСкладИсходный
				ИЛИ ДанныеСтроки.Серия <> ДанныеСтроки.СерияИсходный 
				ИЛИ ДанныеСтроки.Отменено <> ДанныеСтроки.ОтмененоИсходный 
				ИЛИ ДанныеСтроки.Упаковка <> ДанныеСтроки.УпаковкаИсходный 
				ИЛИ ДанныеСтроки.КодСтроки = 0) Тогда
			
			СписокИзмененныхСтрок.Добавить(ДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокИзмененныхСтрок;
	
КонецФункции

#Область РедактированиеСпецификацииЗаказаНаПроизводства

// Возвращает параметры редактирования материалов и услуг в Заказе на производство.
//
// Параметры:
//     УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище
//															которой надо поместить результат редактирования и вернуть адрес.
//
// Возвращаемое значение:
//     Структура - параметры ввода корректировок:
//       * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//       * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//           ** ключ     - УникальныйИдентификатор - ключ связи продукции
//           ** значение - Булево - истина, если корректировки уже вводились
//       * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                                                               которой будут помещены корректировки
//       * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок.
//
Функция ПараметрыРедактированияМатериалов(УникальныйИдентификатор) Экспорт
	
	ИспользоватьКорректировки = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство");
	
	ПараметрыРедактированияМатериалов = Новый Структура;
	
	ПараметрыРедактированияМатериалов.Вставить("ИспользоватьКорректировки", ИспользоватьКорректировки);
	ПараметрыРедактированияМатериалов.Вставить("ВведеныеКорректировки",     Новый Соответствие);
	ПараметрыРедактированияМатериалов.Вставить("УникальныйИдентификатор",   УникальныйИдентификатор);
	ПараметрыРедактированияМатериалов.Вставить("Адрес");
	
	Возврат ПараметрыРедактированияМатериалов;
	
КонецФункции

// Обновляет параметры редактирования материалов в Заказе на производство.
//
// Параметры:
//     Параметры - Структура - параметры ввода корректировок:
//       * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//       * ВведеныеКорректировки - Соответствие - информация о ранее введенных корректировках 
//           ** ключ     - УникальныйИдентификатор - ключ связи продукции
//           ** значение - Булево - истина, если корректировки уже вводились
//       * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                                                             которой будут помещены корректировки
//       * Адрес                   - Строка - адрес во временном хранилище ранее введенных корректировок.
//
Процедура ОбновитьПараметрыРедактированияМатериалов(Параметры, УникальныйИдентификатор) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Параметры.Адрес) Тогда 
		
		УдалитьИзВременногоХранилища(Параметры.Адрес);
	
	КонецЕсли;
	
	Параметры = ПараметрыРедактированияМатериалов(УникальныйИдентификатор);
	
КонецПроцедуры

// Возвращает признак использования корректировки заказа материалов.
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаПроизводство, ДокументСсылка.ЗаказНаПроизводство - объект, для которого необходимо 
//																							получить признак использования корректировок.
// 
// Возвращаемое значение:
//   - Булево - Истина, если корректировки используются.
//
Функция ИспользуютсяКорректировки(Объект) Экспорт

	Перем Статус;

	ИспользоватьКорректировки = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаПроизводство") Тогда
		
		Возврат ИспользоватьКорректировки И Объект.Статус <> Перечисления.СтатусыЗаказовНаПроизводство.Создан;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		Возврат ИспользоватьКорректировки И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Статус") <> Перечисления.СтатусыЗаказовНаПроизводство.Создан;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") И (Объект.Свойство("Статус", Статус) ИЛИ Объект.Свойство("СтатусЗаказаНаПроизводство", Статус)) Тогда
		
		Возврат ИспользоватьКорректировки И Статус <> Перечисления.СтатусыЗаказовНаПроизводство.Создан;
		
	КонецЕсли;

КонецФункции

// Возвращает признак наличия корректировок во временном хранилище. 
//
// Параметры:
//  Параметры - Структура - параметры ввода корректировок:
//    * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//    * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//           ** ключ     - УникальныйИдентификатор - ключ связи продукции
//           ** значение - Булево - истина, если корректировки уже вводились
//    * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                                                            которой будут помещены корректировки
//    * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//  КлючСвязиПродукция - УникальныйИдентификатор - ключ строки продукции.
//
// Возвращаемое значение:
//   - Булево - Истина, если есть корректировки.
//
Функция ВведеныКорректировки(Параметры, Знач КлючСвязиПродукция = Неопределено) Экспорт
	
	ВведеныКорректировки = Ложь;
	
	Если Параметры <> Неопределено Тогда
		
		Если КлючСвязиПродукция = Неопределено Тогда
			
			Для Каждого ЭлементКоллекции Из Параметры.ВведеныеКорректировки Цикл
				
				ВведеныКорректировки = (ЭлементКоллекции.Значение = Истина);
				
				Если ВведеныКорректировки Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ВведеныКорректировки = (Параметры.ВведеныеКорректировки[КлючСвязиПродукция] = Истина);
			
		КонецЕсли;
		
		ВведеныКорректировки = ВведеныКорректировки И ЭтоАдресВременногоХранилища(Параметры.Адрес);
		
	КонецЕсли;
	
	Возврат ВведеныКорректировки;
	
КонецФункции

// Корректирует заказ материалов при сокращении производства.
//
// Параметры:
//  Заказ				 - ДокументСсылка.ЗаказНаПроизводство	 - ссылка на заказ
//  КлючСвязиПродукция	 - УникальныйИдентификатор				 - ключ строки продукции
//  СокращенныеЭтапы	 - ТаблицаЗначений						 - сокращенные этапы
//  МатериалыИУслуги	 - ТаблицаЗначений						 - заказ материалов по заказу на производство с учетом корректировок.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - результат корректировки.
//
Функция СкорректироватьЗаказМатериаловВПроизводство(Заказ, КлючСвязиПродукция, СокращенныеЭтапы, МатериалыИУслуги = Неопределено) Экспорт
	
	Если СокращенныеЭтапы.Количество() = 0 Тогда
		Возврат МатериалыИУслугиКонструктор();
	КонецЕсли;
	
	Если МатериалыИУслуги = Неопределено Тогда
		
		ВводКорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.Создать();
		ВводКорректировкиЗаказаМатериалов.ЗаполнитьВводКорректировкиСпецификацииЗаказа(Заказ, КлючСвязиПродукция, Ложь, Ложь);
		
		МатериалыИУслуги = ВводКорректировкиЗаказаМатериалов.МатериалыИУслуги.Выгрузить();
		МатериалыИУслуги.Индексы.Добавить("КлючСвязиЭтапы");
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ОтборЭтапы = Новый Структура("КлючСвязиЭтапы");
	ДанныеПродукции = ПланированиеПроизводства.ПолучитьДанныеПродукции(Заказ, КлючСвязиПродукция);
	
	Для Каждого СокращенныйЭтап Из СокращенныеЭтапы Цикл
		
		ОтборЭтапы.КлючСвязиЭтапы = СокращенныйЭтап.КлючСвязи;
		
		Для Каждого ТекущаяСтрока Из МатериалыИУслуги.НайтиСтроки(ОтборЭтапы) Цикл
			
			Требуется = ТекущаяСтрока.Количество * СокращенныйЭтап.КоличествоЭтапов/СокращенныйЭтап.КоличествоЭтаповИсходный;
			
			НеТребуетсяОтгружено = ТекущаяСтрока.КоличествоОтгружено - Требуется;
			Если НеТребуетсяОтгружено > 0 Тогда
				
				НоваяСтрока = МатериалыИУслуги.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				
				НоваяСтрока.Отменено   = Истина;
				НоваяСтрока.Количество = НеТребуетсяОтгружено;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
			НеТребуется = ТекущаяСтрока.Количество - Требуется - ?(НеТребуетсяОтгружено > 0, НеТребуетсяОтгружено, 0);
			Если НеТребуется > 0 Тогда
			
				НоваяСтрока = МатериалыИУслуги.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока,,"КодСтроки");
				
				НоваяСтрока.Отменено   = Истина;
				НоваяСтрока.Количество = НеТребуется;
				
				НоваяСтрока.ЗаказатьНаСклад    = Ложь; //ПроизводитсяВПроцессе = Ложь - ранее установлен отбор
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(НоваяСтрока, ДанныеПродукции);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МатериалыИУслуги.Скопировать(СписокИзмененныхСтрок(МатериалыИУслуги));
	
КонецФункции

// Помещает результат ввода корректировок спецификации заказа на производство в хранилище.
//
// Параметры:
//     КлючСвязиПродукция - УникальныйИдентификатор - ключ строки продукции
//     Параметры - Структура - параметры ввода корректировок:
//       * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//       * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
///           ** ключ     - УникальныйИдентификатор - ключ связи продукции
//           ** значение - Булево - истина, если корректировки уже вводились
//       * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                                                               которой будут помещены корректировки
//       * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//     МатериалыИУслуги - ТаблицаЗначений, ДанныеФормыКоллекция - данные по материалам (см. табличную часть "МатериалыИУслуги").
//
Процедура ПоместитьРезультатКорректировкиСпецификацииЗаказаВХранилище(КлючСвязиПродукция, Параметры, МатериалыИУслуги) Экспорт
	
	Если ТипЗнч(МатериалыИУслуги) <> Тип("ТаблицаЗначений")
		ИЛИ МатериалыИУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервичнаяКорректировка = Не ВведеныКорректировки(Параметры, КлючСвязиПродукция);
	
	Если ЭтоАдресВременногоХранилища(Параметры.Адрес) Тогда
		
		ТаблицаКорректировок = ПолучитьИзВременногоХранилища(Параметры.Адрес);
		
		МассивКлючейКУдалению = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
											ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(
														ТаблицаКорректировок,
														"КлючСвязиПродукция"),
											КлючиПродукцииПоКоторымВведеныКорректировки(Параметры));
			
		Если Не ПервичнаяКорректировка Тогда
			
			МассивКлючейКУдалению.Добавить(КлючСвязиПродукция);
			
		КонецЕсли;
		
		Для Каждого КлючКУдалению Из МассивКлючейКУдалению Цикл
			
			Для Каждого НайденнаяСтрока Из ТаблицаКорректировок.НайтиСтроки(Новый Структура("КлючСвязиПродукция", КлючКУдалению)) Цикл
				
				ТаблицаКорректировок.Удалить(НайденнаяСтрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаКорректировок = Обработки.ВводКорректировкиЗаказаМатериалов.Создать().МатериалыИУслуги.ВыгрузитьКолонки();
		ТаблицаКорректировок.Индексы.Добавить("КлючСвязиПродукция");
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаКорректировок, МатериалыИУслуги);
	
	Параметры.Адрес = ПоместитьВоВременноеХранилище(ТаблицаКорректировок, Параметры.УникальныйИдентификатор);
	
	Если ПервичнаяКорректировка Тогда
		
		Параметры.ВведеныеКорректировки.Вставить(КлючСвязиПродукция, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает результат ввода корректировок спецификации заказа на производство из хранилища.
//
// Параметры:
//     Параметры - Структура - параметры ввода корректировок:
//       * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//       * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//           ** ключ     - УникальныйИдентификатор - ключ связи продукции
//           ** значение - Булево - истина, если корректировки уже вводились
//       * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                                                               которой будут помещены корректировки
//       * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//     КлючСвязиПродукция - УникальныйИдентификатор - ключ строки продукции.
//
// Возвращаемое значение:
// - ТаблицаЗначений - данные по материалам (см. табличную часть "МатериалыИУслуги").
//
Функция ПолучитьРезультатКорректировкиСпецификацииЗаказаИзХранилища(Параметры, КлючСвязиПродукция = Неопределено) Экспорт
	
	Перем Результат;
	
	Если ВведеныКорректировки(Параметры, КлючСвязиПродукция) Тогда
		
		Если КлючСвязиПродукция = Неопределено Тогда
			
			Результат = ПолучитьИзВременногоХранилища(Параметры.Адрес);
			
		Иначе
			
			Результат = ПолучитьИзВременногоХранилища(Параметры.Адрес).Скопировать(Новый Структура("КлючСвязиПродукция", КлючСвязиПродукция));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Выполняет сохранение корректировок заказа материалов для заказа на производство.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаПроизводство - распоряжение, для которого необходимо скорректировать заказ материалов
//                                                в производство
//  Параметры - Структура - параметры ввода корректировок:
//    * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//    * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
///           ** ключ     - УникальныйИдентификатор - ключ связи продукции
//           ** значение - Булево - истина, если корректировки уже вводились
//    * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                                                            которой будут помещены корректировки
//    * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//  МатериалыИУслуги - ТаблицаЗначений, ДанныеФормыКоллекция - данные по материалам, если не передано, то получается из
//                                                             временного хранилища.
//
// Возвращаемое значение:
//   - Булево - Истина, если изменения записаны.
//
Функция СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(Объект, Параметры, МатериалыИУслуги = Неопределено) Экспорт
	
	Если МатериалыИУслуги = Неопределено Тогда
		
		Если ВведеныКорректировки(Параметры) Тогда
			МатериалыИУслуги = ПолучитьИзВременногоХранилища(Параметры.Адрес);
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли МатериалыИУслуги.Количество() = 0 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	СоответствиеНазначений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Назначение", Объект.Назначение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукция.КлючСвязи КАК КлючСвязи,
	|	ЕСТЬNULL(Назначения.Ссылка, &Назначение) КАК Назначение
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ТаблицаПродукция.Назначение = Назначения.Ссылка
	|ГДЕ
	|	ТаблицаПродукция.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеНазначений.Вставить(Выборка.КлючСвязи, Выборка.Назначение);
		
	КонецЦикла;
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	РеквизитыРаспоряжения = Новый Структура;
	РеквизитыРаспоряжения.Вставить("Организация", Объект.Организация);
	РеквизитыРаспоряжения.Вставить("Распоряжение", Объект.Ссылка);
	РеквизитыРаспоряжения.Вставить("ЗаказНаПроизводство", Объект.Ссылка);
	
	Для Каждого Корректировка Из МатериалыИУслуги Цикл
		
		ЗаполнитьЗначенияСвойств(Корректировка, РеквизитыРаспоряжения);
		
		Корректировка.Назначение = ?(Корректировка.Обособленно Или Корректировка.ОбособленноИсходный,
										СоответствиеНазначений[Корректировка.КлючСвязиПродукция], ПустоеНазначение);
		
	КонецЦикла;

	Результат = Ложь;
	
	Если Параметры.ИспользоватьКорректировки Тогда
		
		СписокДокументов = Новый СписокЗначений;
		
		Результат = ЗаписатьИзмененияВКорректировкиЗаказаМатериаловВПроизводство(МатериалыИУслуги, СписокДокументов);
		
	Иначе
		
		СоответствиеДокументов = Новый Соответствие;
		СоответствиеДокументов.Вставить(Объект.Ссылка, Объект);
		
		Результат = ПеренестиКорректировкуВЗаказы(МатериалыИУслуги, СоответствиеДокументов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  См. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	// Остатки материалов на складе-отправителе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Ложь, "Объект.МатериалыИУслуги.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.МатериалыИУслуги.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.МатериалыИУслуги.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.МатериалыИУслуги.Склад";
	
	Возврат МакетФормы;
	
КонецФункции

// Формирует структуру параметров документа для встраивания документа в механимы обеспечения.
//
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраивания() Экспорт
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки";
	
	// Обновление колонки "Доступно".
	ПараметрыВстраивания.ИмяТаблицыФормы = "МатериалыИУслуги";
	
	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "МатериалыИУслугиВариантОбеспечения";
	ЭлементыФормы.Доступно           = "МатериалыИУслугиДоступно";
	ЭлементыФормы.Серия              = "МатериалыИУслугиСерия";
	ЭлементыФормы.Обособленно        = "МатериалыИУслугиОбособленно";
	ЭлементыФормы.Склад              = "МатериалыИУслугиСклад";
	
	ПутиКДанным = ПараметрыВстраивания.УсловноеОформление.ПутиКДанным;
	ПутиКДанным.ПерераспределятьЗапасы = "Объект.МатериалыИУслуги.ПерераспределятьЗапасы";
	ПутиКДанным.ЗапретРедактирования = "Объект.МатериалыИУслуги.Отменено";
	ПутиКДанным.ТипНоменклатуры = "Объект.МатериалыИУслуги.ТипНоменклатуры";
	
	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Доступно              = "Элементы.МатериалыИУслуги.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.МатериалыИУслуги.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.МатериалыИУслуги.ТекущиеДанные.Количество";
	Связи.ОтгружатьЕслиДоступно = "Элементы.МатериалыИУслуги.ТекущиеДанные.ОтгружатьЕслиДоступно";
	Связи.Обособленно           = "Элементы.МатериалыИУслуги.ТекущиеДанные.Обособленно";
	Связи.ТипНоменклатуры       = "Элементы.МатериалыИУслуги.ТекущиеДанные.ТипНоменклатуры";
	Связи.Упаковка              = "Элементы.МатериалыИУслуги.ТекущиеДанные.Упаковка";
	Связи.Номенклатура          = "Элементы.МатериалыИУслуги.ТекущиеДанные.Номенклатура";
	Связи.ВариантОбеспечения    = "Элементы.МатериалыИУслуги.ТекущиеДанные.ВариантОбеспечения";
	Связи.Склад                 = "Элементы.МатериалыИУслуги.ТекущиеДанные.Склад";
	Связи.НесколькоСкладов      = Истина;
	
	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "ЗаказыМатериаловВПроизводство";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Форма";
	ПараметрыВстраивания.ИмяТаблицы = "Форма.Объект.МатериалыИУслуги";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.ЗаказНаПроизводство КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения  КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	ИСТИНА КАК ГотовКОбеспечению,
		|	ИСТИНА КАК ГотовКОтгрузке,
		|	ТабЧасть.ДатаПотребности КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	НЕ ТабЧасть.ЗаказатьНаСклад
		|		ИЛИ ТабЧасть.Отменено КАК Отменено,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Регистратор,
		|	ТабЧасть.ЗаказНаПроизводство.Дата КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	ТабЧасть.ЗаказНаПроизводство.Приоритет КАК Приоритет,
		|	НЕОПРЕДЕЛЕНО КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Форма.Объект.МатериалыИУслуги КАК ТабЧасть";
	
	ПараметрыВстраивания.АдресКорректировкиДвижений = "АдресСторноИсходныхДвижений";
	
	// Шаблон сериализации данных формы.
	МатериалыИУслуги = Новый Структура();
	МатериалыИУслуги.Вставить("НомерСтроки",         Новый ОписаниеТипов("Число"));
	МатериалыИУслуги.Вставить("Номенклатура",        Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	МатериалыИУслуги.Вставить("Характеристика",      Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	МатериалыИУслуги.Вставить("Склад",               Новый ОписаниеТипов("СправочникСсылка.Склады"));
	МатериалыИУслуги.Вставить("Подразделение",       Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	МатериалыИУслуги.Вставить("Назначение",          Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	МатериалыИУслуги.Вставить("ВариантОбеспечения",  Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	МатериалыИУслуги.Вставить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	МатериалыИУслуги.Вставить("Обособленно",         Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("Количество",          Новый ОписаниеТипов("Число"));
	МатериалыИУслуги.Вставить("КоличествоУпаковок",  Новый ОписаниеТипов("Число"));
	МатериалыИУслуги.Вставить("Упаковка",            Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	МатериалыИУслуги.Вставить("ДатаПотребности",     Новый ОписаниеТипов("Дата"));
	МатериалыИУслуги.Вставить("ЗаказатьНаСклад",     Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("Серия",               Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	МатериалыИУслуги.Вставить("Отменено",            Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("КодСтроки",           Новый ОписаниеТипов("Число"));
	
	Объект = Новый Структура();
	Объект.Вставить("МатериалыИУслуги", МатериалыИУслуги);
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("Объект", Объект);
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДоступныеОстаткиПараметрыВстраиванияСторнирование() Экспорт
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Форма";
	ПараметрыВстраивания.ИмяТаблицы = "Форма.МатериалыИУслугиТаблица";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Подразделение КАК Подразделение,
		|	ТабЧасть.СкладИсходный КАК Склад,
		|	ТабЧасть.НазначениеИсходный КАК Назначение,
		|	ТабЧасть.ЗаказНаПроизводство КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспеченияИсходный КАК ВариантОбеспечения,
		|	ТабЧасть.ОбособленноИсходный КАК Обособленно,
		|	-ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.ОтмененоИсходный КАК Отменено,
		|	ИСТИНА КАК ГотовКОбеспечению,
		|	ИСТИНА КАК ГотовКОтгрузке,
		|	НЕОПРЕДЕЛЕНО КАК ЖелаемаяДатаОтгрузки,
		|	НЕОПРЕДЕЛЕНО КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК Приоритет
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Форма.МатериалыИУслугиТаблица КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.ЗаказатьНаСкладИсходный";
	
	// Шаблон сериализации данных формы.
	МатериалыИУслуги = Новый Структура();
	МатериалыИУслуги.Вставить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	МатериалыИУслуги.Вставить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	МатериалыИУслуги.Вставить("СкладИсходный",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	МатериалыИУслуги.Вставить("Подразделение",              Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	МатериалыИУслуги.Вставить("НазначениеИсходный",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	МатериалыИУслуги.Вставить("ВариантОбеспеченияИсходный", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	МатериалыИУслуги.Вставить("ОбособленноИсходный",        Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("Количество",                 Новый ОписаниеТипов("Число"));
	МатериалыИУслуги.Вставить("ОтмененоИсходный",           Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("ЗаказатьНаСкладИсходный",    Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("ЗаказНаПроизводство",        Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("МатериалыИУслугиТаблица", МатериалыИУслуги);
	Возврат ПараметрыВстраивания;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаписатьИзмененияВКорректировкиЗаказаМатериаловВПроизводство(МатериалыИУслуги, СписокСозданныхДокументов = Неопределено)

	НужноЗаполнитьКодСтроки = Ложь;
	
	// Создание документов
	СписокДокументов = Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	СписокДокументов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	СписокДокументов.Колонки.Добавить("ДокументОбъект");
	
	СписокИзмененныхСтрок = СписокИзмененныхСтрок(МатериалыИУслуги);
	Для каждого ДанныеСтроки Из СписокИзмененныхСтрок Цикл
		
		СтруктураПоиска = Новый Структура("Распоряжение,Подразделение", ДанныеСтроки.Ссылка, ДанныеСтроки.Подразделение);
		СписокСтрок = СписокДокументов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			ДокументОбъект = Документы.КорректировкаЗаказаМатериаловВПроизводство.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ДокументОбъект.Подразделение = ДанныеСтроки.Подразделение;
			ДокументОбъект.Распоряжение = ДанныеСтроки.Ссылка;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Организация) Тогда
				ДокументОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Ссылка, "Организация");
			Иначе
				ДокументОбъект.Организация = ДанныеСтроки.Организация;
			КонецЕсли; 
			
			СтрокаДокументОбъект = СписокДокументов.Добавить();
			СтрокаДокументОбъект.Распоряжение = ДанныеСтроки.Ссылка;
			СтрокаДокументОбъект.Подразделение = ДанныеСтроки.Подразделение;
			СтрокаДокументОбъект.ДокументОбъект = ДокументОбъект;
		Иначе
			ДокументОбъект = СписокСтрок[0].ДокументОбъект;
		КонецЕсли;
		
		СтрокаКорректировка = ДокументОбъект.МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорректировка, ДанныеСтроки);
		
		Если ДанныеСтроки.КодСтроки = 0 Тогда
			НужноЗаполнитьКодСтроки = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если СписокДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Запись документов
	НачатьТранзакцию();
	Попытка
		Для каждого СтрокаДокументОбъект Из СписокДокументов Цикл
			ДокументОбъект = СтрокаДокументОбъект.ДокументОбъект;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла; 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Для каждого СтрокаДокументОбъект Из СписокДокументов Цикл
		СписокСозданныхДокументов.Добавить(СтрокаДокументОбъект.ДокументОбъект.Ссылка, Строка(СтрокаДокументОбъект.ДокументОбъект.Ссылка));
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьИзмененияВЗаказыНаПроизводство(МатериалыИУслуги, СписокСозданныхДокументов)

	// Создание документов
	СписокДокументов = Новый Соответствие;
	
	Если НЕ ПеренестиКорректировкуВЗаказы(МатериалыИУслуги, СписокДокументов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Запись документов
	НачатьТранзакцию();
	Попытка
		Для каждого СтрокаДокументОбъект Из СписокДокументов Цикл
			
			ДокументОбъект = СтрокаДокументОбъект.Значение;
			
			Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли; 
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Для каждого СтрокаДокументОбъект Из СписокДокументов Цикл
		СписокСозданныхДокументов.Добавить(СтрокаДокументОбъект.Значение.Ссылка, Строка(СтрокаДокументОбъект.Значение.Ссылка));
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

// Возвращает массив ключей связи продукции, для которых используются корректировки
//
// Параметры:
//  Параметры - Структура - параметры ввода корректировок:
//    *ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//    *ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках:
//        ** ключ     - ключ связи продукции
//        ** значение - истина, если корректировки уже вводились
//    *УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                                                            которой будут помещены корректировки
//    *Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок.
//
// Возвращаемое значение:
//   - Массив - массив ключей связи продукции, по которым используются и введены корректировки.
//
Функция КлючиПродукцииПоКоторымВведеныКорректировки(Параметры)
	
	МассивКлючей = Новый Массив;
	
	Если Параметры.ИспользоватьКорректировки Тогда
		Для Каждого ЭлементКоллекции Из Параметры.ВведеныеКорректировки Цикл
			Если ЭлементКоллекции.Значение = Истина Тогда
				МассивКлючей.Добавить(ЭлементКоллекции.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивКлючей;
	
КонецФункции

Функция МатериалыИУслугиКонструктор()
	
	ВводКорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.Создать();
	Возврат ВводКорректировкиЗаказаМатериалов.МатериалыИУслуги.Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21
