
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КартинкаОплаченоПолностью = 1;
	КартинкаОплаченоЧастично  = 2;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ВедомостиКВыплатеТолькоБезОплаты.Пометка = ТолькоБезОплаты;
	
	Если ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
		МесяцНачисленияСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.МесяцНачисления);
	КонецЕсли;
	
	ЗаполнитьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	ЗаполнитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	ЗаполнитьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление);
	ЗаполнитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВедомостиКВыплате

&НаКлиенте
Процедура ВедомостиКВыплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.ТипСтроки = ТипСтрокиГруппы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = Элементы.ВедомостиКВыплатеЗаявка.Имя Тогда
		ВыбранноеЗначение = ТекущиеДанные.Заявка;
	Иначе
		ВыбранноеЗначение = ТекущиеДанные.Ведомость;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПоказатьЗначение(, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявку(Команда)
	
	ТекущиеДанные = Элементы.ВедомостиКВыплате.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивВедомостей = ПолучитьВедомости("Заявка");
	Если МассивВедомостей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", ТекущиеДанные.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("МассивВедомостей", МассивВедомостей);
	
	Если ТекущиеДанные.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет") Тогда
		СтруктураПараметров.Вставить("РегистрацияВНалоговомОргане", ТекущиеДанные.РегистрацияВНалоговомОргане);
		СтруктураПараметров.Вставить("ТипНалога", ТекущиеДанные.ОбъектВыплаты);
		СтруктураПараметров.Вставить("НастройкаСчетовУчетаЗаполнена", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.ФормаОбъекта", Новый Структура("Основание", СтруктураПараметров));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОплаты(Команда)
	
	ТекущиеДанные = Элементы.ВедомостиКВыплате.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивВедомостей = ПолучитьВедомости("Оплата");
	Если МассивВедомостей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", ТекущиеДанные.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("РегистрацияВНалоговомОргане", ТекущиеДанные.РегистрацияВНалоговомОргане);
	
	Если ТекущиеДанные.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет") Тогда
		СтруктураПараметров.Вставить("РегистрацияВНалоговомОргане", ТекущиеДанные.РегистрацияВНалоговомОргане);
		СтруктураПараметров.Вставить("ТипНалога", ТекущиеДанные.ОбъектВыплаты);
	КонецЕсли;
	
	Если ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная") Тогда
		СтруктураПараметров.Вставить("МассивВедомостей", МассивВедомостей);
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", Новый Структура("Основание", СтруктураПараметров));
	ИначеЕсли МассивВедомостей.Количество() = 1 Тогда
		СтруктураПараметров.Вставить("Ведомость", МассивВедомостей[0]);
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("Основание", СтруктураПараметров));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтрокиБезОплаты(Команда)
	
	ТолькоБезОплаты = Не ТолькоБезОплаты;
	Элементы.ВедомостиКВыплатеТолькоБезОплаты.Пометка = ТолькоБезОплаты;
	
	ЗаполнитьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
//	#Область СкрытьПояснениеВедомости
//	Элемент = УсловноеОформление.Элементы.Добавить();
//	
//	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеЗарплатныйПроект.Имя);
//	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеНаЛицевыеСчета.Имя);
//	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеКасса.Имя);
//	
//	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ТипСтроки");
//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ОтборЭлемента.ПравоеЗначение = ТипСтрокиГруппы();
//	
//	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
//	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
//	#КонецОбласти
	
	#Область СкрытьПоляГруппировкиПодробныхСтрок
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеХозяйственнаяОперация.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеРегистрацияВНалоговомОргане.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеЗарплатныйПроект.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеКасса.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеБанк.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиГруппы();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	#Область ХозяйственнаяОперация_ВыплатаПоЗарплатномуПроекту
	// Прячем лишние поля
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеКасса.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеБанк.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеРегистрацияВНалоговомОргане.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Текст <Зарплатный проект не указан>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеЗарплатныйПроект.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ЗарплатныйПроект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не указан>';
																|en = '<not specified>'"));
	#КонецОбласти
	
	#Область ХозяйственнаяОперация_ВыплатаНаЛицевыеСчета
	// Прячем лишние поля
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеЗарплатныйПроект.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеКасса.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеРегистрацияВНалоговомОргане.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Текст <Банк не указан>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеБанк.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.Банк");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Банк не указан>';
																|en = '<Bank is not specified>'"));
	#КонецОбласти
	
	#Область ХозяйственнаяОперация_ВыплатаЧерезКассу
	// Прячем лишние поля
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеЗарплатныйПроект.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеБанк.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеРегистрацияВНалоговомОргане.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Текст <Касса не указана>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеКасса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.Касса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не указана>';
																|en = '<Not specified>'"));
	#КонецОбласти
	
	#Область ХозяйственнаяОперация_ПеречислениеВБюджет
	// Прячем лишние поля
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеЗарплатныйПроект.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеКасса.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплатеБанк.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	#Область ЦветФонаХозОперации
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВедомостиКВыплате.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиКВыплате.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиГруппы();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаКлиенте()
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ФормированиеДокументовНаВыплатуПоВедомостям.Форма.ЗаполнитьНаКлиенте");
	
	ЗаполнитьНаСервере();
	РазвернутьСтрокиКОплате();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		ИЛИ Не ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ВедомостиКВыплате");
	Дерево.Строки.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ПериодРегистрации", Объект.МесяцНачисления);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИнтеграцияБЗК.ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РегистрацияОрганизацииВНалоговомОргане",
		ЗарплатаКадры.РегистрацияВНалоговомОргане(Объект.Организация, КонецМесяца(Объект.МесяцНачисления)));
	Запрос.Текст = ТекстЗапросаВыборкиДанных();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке И Выборка.Уровень() = 5 Тогда
			СтрокаГруппировки = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГруппировки, Выборка);
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			НоваяВыплата = СтрокаГруппировки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяВыплата, Выборка);
			НоваяВыплата.ТипСтроки = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ВедомостиКВыплате");
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаВыборкиДанных()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ОшибкаЗачисления <> 0 ТОГДА 2								// Есть ошибки при перечислении по ведомости
	|		КОГДА ВложенныйЗапрос.СуммаОплаты = 0 ТОГДА 0									// Выплаты не осуществлялись
	|		КОГДА ВложенныйЗапрос.СуммаВедомости = ВложенныйЗапрос.СуммаОплаты ТОГДА 1		// Выплачено полностью
	|		КОГДА ВложенныйЗапрос.СуммаВедомости > ВложенныйЗапрос.СуммаОплаты ТОГДА 2		// Выплачено частично
	|		ИНАЧЕ 0																			// Статус неопределен
	|	КОНЕЦ КАК СтатусОплаты,
	|	ВложенныйЗапрос.*
	|ИЗ
	|(ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ОбъектВыплаты КАК ОбъектВыплаты,
	|	ДанныеВедомостей.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ДанныеВедомостей.Касса КАК Касса,
	|	ДанныеВедомостей.Банк КАК Банк,
	|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
	|	СостояниеВедомостей.ФормаОплаты КАК ФормаОплаты,
	|	СостояниеВедомостей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СУММА(СостояниеВедомостей.Сумма) КАК СуммаВедомости,
	|	СУММА(СостояниеВедомостей.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(ВЫБОР
	|		КОГДА СостояниеВедомостей.ОшибкаПеречисления
	|			ТОГДА СостояниеВедомостей.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК ОшибкаЗачисления,
	|	Заявки.Ссылка КАК Заявка
	|ИЗ
	|	ВТВедомости КАК ДанныеВедомостей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСостояниеВыплатыПоВедомостям КАК СостояниеВедомостей
	|		ПО ДанныеВедомостей.Ведомость = СостояниеВедомостей.Ведомость
	|			И ДанныеВедомостей.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
	|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			И Заявки.Ведомость = ДанныеВедомостей.Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеВедомостей.ХозяйственнаяОперация,
	|	СостояниеВедомостей.ФормаОплаты,
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ОбъектВыплаты,
	|	ДанныеВедомостей.ЗарплатныйПроект,
	|	ДанныеВедомостей.Касса,
	|	ДанныеВедомостей.Банк,
	|	Заявки.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость,
	|	СостояниеВедомостей.ТипНалога,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	СостояниеВедомостей.РегистрацияВНалоговомОргане,
	|	СостояниеВедомостей.ФормаОплаты,
	|	СостояниеВедомостей.ХозяйственнаяОперация,
	|	СУММА(СостояниеВедомостей.Сумма),
	|	СУММА(СостояниеВедомостей.СуммаОплаты),
	|	СУММА(ВЫБОР
	|		КОГДА СостояниеВедомостей.ОшибкаПеречисления
	|			ТОГДА СостояниеВедомостей.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ),
	|	МАКСИМУМ(Заявки.Ссылка)
	|ИЗ
	|	ВТВедомости КАК ДанныеВедомостей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСостояниеНалоговПоВедомостям КАК СостояниеВедомостей
	|		ПО ДанныеВедомостей.Ведомость = СостояниеВедомостей.Ведомость
	|			И ДанныеВедомостей.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
	|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|			И Заявки.Ведомость = ДанныеВедомостей.Ведомость
	|			И Заявки.ТипНалога = СостояниеВедомостей.ТипНалога
	|			И Заявки.РегистрацияВНалоговомОргане = СостояниеВедомостей.РегистрацияВНалоговомОргане
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеВедомостей.РегистрацияВНалоговомОргане,
	|	СостояниеВедомостей.ХозяйственнаяОперация,
	|	СостояниеВедомостей.ФормаОплаты,
	|	СостояниеВедомостей.ТипНалога,
	|	ДанныеВедомостей.Ведомость
	|) КАК ВложенныйЗапрос
	|
	|({ТекстУсловияБезОплаты})
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозяйственнаяОперация,
	|	ОбъектВыплаты
	|
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА СУММА(СуммаОплаты) = 0 ТОГДА 0
	|		КОГДА СУММА(СуммаВедомости) = СУММА(СуммаОплаты) ТОГДА 1
	|		КОГДА СУММА(СуммаВедомости) > СУММА(СуммаОплаты) ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусОплаты,
	|	СУММА(СуммаВедомости),
	|	СУММА(СуммаОплаты),
	|	СУММА(ОшибкаЗачисления)
	|ПО
	|	РегистрацияВНалоговомОргане,
	|	ХозяйственнаяОперация,
	|	ЗарплатныйПроект,
	|	ФормаОплаты,
	|	Касса,
	|	Банк";
	
	ТекстУсловияБезОплаты = "";
	Если ТолькоБезОплаты Тогда
		ТекстУсловияБезОплаты = "ГДЕ ВложенныйЗапрос.СуммаОплаты = 0";
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстЗапроса, "({ТекстУсловияБезОплаты})", ТекстУсловияБезОплаты);
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокиКОплате()
	
	Если Не ТолькоБезОплаты Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВедомостиКВыплате.ПолучитьЭлементы() Цикл
		Если СтрокаТаблицы.СуммаВедомости <> СтрокаТаблицы.СуммаОплаты Тогда
			Элементы.ВедомостиКВыплате.Развернуть(СтрокаТаблицы.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипСтрокиГруппы()
	Возврат 0;
КонецФункции

&НаСервере
Функция ПолучитьВедомости(ВидДокумента)
	
	МассивВедомостей = Новый Массив;
	ГруппыВедомостей = Новый Соответствие;
	
	ВыделенныеСтроки = Элементы.ВедомостиКВыплате.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ВедомостиКВыплате.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТаблицы.ТипСтроки = ТипСтрокиГруппы() Тогда
			
			ГруппыВедомостей.Вставить(ИдентификаторСтроки, Истина);
			Для Каждого ПодчиненнаяСтрока Из СтрокаТаблицы.ПолучитьЭлементы() Цикл
				Если ВидДокумента = "Заявка" И ЗначениеЗаполнено(ПодчиненнаяСтрока.Заявка) Тогда
					Продолжить;
				ИначеЕсли ВидДокумента = "Оплата" И ПодчиненнаяСтрока.СуммаОплаты = ПодчиненнаяСтрока.СуммаВедомости Тогда
					Продолжить;
				КонецЕсли;
				МассивВедомостей.Добавить(ПодчиненнаяСтрока.Ведомость);
			КонецЦикла;
			
		Иначе
			
			ГруппыВедомостей.Вставить(СтрокаТаблицы.ПолучитьРодителя().ПолучитьИдентификатор(), Истина);
			Если ВидДокумента = "Заявка" И ЗначениеЗаполнено(СтрокаТаблицы.Заявка) Тогда
				Продолжить;
			ИначеЕсли ВидДокумента = "Оплата" И СтрокаТаблицы.СуммаОплаты = СтрокаТаблицы.СуммаВедомости Тогда
				Продолжить;
			КонецЕсли;
			МассивВедомостей.Добавить(СтрокаТаблицы.Ведомость);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГруппыВедомостей.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования документа укажите ведомости одной группы.';
								|en = 'Specify paysheets of the same group to generate the document.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВедомостей);
	
КонецФункции

#КонецОбласти


