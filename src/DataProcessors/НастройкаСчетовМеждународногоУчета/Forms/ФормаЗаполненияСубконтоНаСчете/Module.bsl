#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПланСчетов = Параметры.ПланСчетов;
	ОбъектУчета = Параметры.ОбъектУчета;
	НастройкаФормированияПроводок = Параметры.НастройкаФормированияПроводок;
	СчетУчета = Параметры.СчетУчета;
	
	Обработки.НастройкаСчетовМеждународногоУчета.ИнициализироватьКомпоновщикНастроек(ЭтотОбъект, Параметры.ИсточникДанных);
	
	ОтборНастроек = 
		Обработки.НастройкаСчетовМеждународногоУчета.ОтборНастроекЗаполненияСубконто(
			ПланСчетов, 
			НастройкаФормированияПроводок,
			ОбъектУчета,
			СчетУчета);
	
	ТаблицаНастроек =
		Обработки.НастройкаСчетовМеждународногоУчета.НастройкиЗаполненияСубконто(
			ОтборНастроек,
			КомпоновщикНастроек);
			
	ПользовательскаяНастройка = ТаблицаНастроек[0].ПользовательскаяНастройка;
	
	ЗаполнитьНастройкиЗаполненияСубконто(ТаблицаНастроек);
	
	УстановитьДоступныеСпособыЗаполненияСубконто();
	
	УправлениеДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ПользовательскаяНастройка Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из НастройкиЗаполненияСубконто Цикл
		
		Если СтрокаТаблицы.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ВыражениеЗаполненияСубконто) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнено выражение заполнения субконто ""%1"".';
								|en = 'Population expression is required for the ""%1"" extra dimension.'"), СтрокаТаблицы.ВидСубконто), , 
				"НастройкиЗаполненияСубконто", , Отказ);
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение
			И Не ЗначениеЗаполнено(СтрокаТаблицы.УказанноеЗначениеСубконто) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнено значение субконто ""%1"".';
								|en = 'Value is required for the ""%1"" extra dimension.'"), СтрокаТаблицы.ВидСубконто), , 
				"НастройкиЗаполненияСубконто", , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетУчетаНажатие(Элемент, СтандартнаяОбработка)
	
	ПоказатьЗначение(, СчетУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскаяНастройкаПриИзменении(Элемент)
	
	ПользовательскаяНастройкаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияСубконтоПриАктивизацииСтроки(Элемент)
	
	Если Элементы.НастройкиЗаполненияСубконто.ТекущиеДанные <> Неопределено Тогда
		Элементы.УказанноеЗначениеСубконто.ОграничениеТипа = Элементы.НастройкиЗаполненияСубконто.ТекущиеДанные.ТипЗначенияСубконто;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияСубконтоПредставлениеВыраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиЗаполненияСубконто.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСубконто", ТекущиеДанные.ВидСубконто);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ТекущееВыражение", ТекущиеДанные.ВыражениеЗаполненияСубконто);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПоляЗаполненияСубконто", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияСубконтоПредставлениеВыраженияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияСубконтоПредставлениеВыраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.НастройкиЗаполненияСубконто.ТекущиеДанные;
	ТекущиеДанные.ВыражениеЗаполненияСубконто = ВыбранноеЗначение;
	ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Ложь;
	ЗаполнитьПредставлениеВыраженияВСтроке(Элементы.НастройкиЗаполненияСубконто.ТекущаяСтрока);
	Элементы.НастройкиЗаполненияСубконто.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УказанноеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиЗаполненияСубконто.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.УказанноеЗначениеСубконто) 
			И ТекущиеДанные.ТипЗначенияСубконто.СодержитТип(ТипЗнч(ТекущиеДанные.УказанноеЗначениеСубконто)) Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиЗаполненияСубконто.ТекущиеДанные;
	
	Если ТекущиеДанные.СпособЗаполненияСубконто 
			= ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра") Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Ложь;
		ТекущиеДанные.УказанноеЗначениеСубконто = Неопределено;
	ИначеЕсли ТекущиеДанные.СпособЗаполненияСубконто 
			= ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение") Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Ложь;
		ТекущиеДанные.ВыражениеЗаполненияСубконто = "";
		ТекущиеДанные.ПредставлениеВыражения = "";
	ИначеЕсли ТекущиеДанные.СпособЗаполненияСубконто
			= ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять")
		ИЛИ ТекущиеДанные.СпособЗаполненияСубконто
			= ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзКорреспонденции") Тогда
		ТекущиеДанные.ЕстьПроблемыЗаполненияСубконто = Ложь;
		ТекущиеДанные.УказанноеЗначениеСубконто = Неопределено;
		ТекущиеДанные.ВыражениеЗаполненияСубконто = "";
		ТекущиеДанные.ПредставлениеВыражения = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		СохранитьНастройкиСервер();
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Если ПроверитьЗаполнение() Тогда
		СохранитьНастройкиСервер();
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНастройкиЗаполненияСубконто(ТаблицаСостоянияНастроек)

	СтрокаСостоянияНастроек = ТаблицаСостоянияНастроек[0];
	
	НастройкиЗаполненияСубконто.Очистить();
	Для НомерСубконто = 1 По 3 Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСостоянияНастроек["ВидСубконто" + НомерСубконто]) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаНастроек = НастройкиЗаполненияСубконто.Добавить();
		НоваяСтрокаНастроек.ВидСубконто = СтрокаСостоянияНастроек["ВидСубконто" + НомерСубконто];
		НоваяСтрокаНастроек.ТипЗначенияСубконто = СтрокаСостоянияНастроек["ТипЗначенияСубконто" + НомерСубконто];
		НоваяСтрокаНастроек.СпособЗаполненияСубконто = СтрокаСостоянияНастроек["СпособЗаполненияСубконто" + НомерСубконто];
		НоваяСтрокаНастроек.ВыражениеЗаполненияСубконто = СтрокаСостоянияНастроек["ВыражениеЗаполненияСубконто" + НомерСубконто];
		НоваяСтрокаНастроек.УказанноеЗначениеСубконто = СтрокаСостоянияНастроек["УказанноеЗначениеСубконто" + НомерСубконто];
		НоваяСтрокаНастроек.ЕстьПроблемыЗаполненияСубконто = СтрокаСостоянияНастроек["ЕстьПроблемыЗаполненияСубконто" + НомерСубконто];
	КонецЦикла;
	
	ЗаполнитьПредставлениеВыраженийЗаполненияСубконто();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСервер()
	
	МенеджерЗаписи = РегистрыСведений.НастройкиЗаполненияСубконтоНаСчетахМеждународногоУчета.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПланСчетов =  ПланСчетов;
	МенеджерЗаписи.НастройкаФормированияПроводок = НастройкаФормированияПроводок;
	МенеджерЗаписи.ОбъектУчета = ОбъектУчета;
	МенеджерЗаписи.СчетУчета = СчетУчета;
	Если НЕ ПользовательскаяНастройка Тогда
		МенеджерЗаписи.Удалить();
	Иначе
		НомерСубконто = 1;
		Для каждого СтрокаТаблицы Из НастройкиЗаполненияСубконто Цикл
			МенеджерЗаписи["ВидСубконто" + НомерСубконто] = СтрокаТаблицы.ВидСубконто;
			МенеджерЗаписи["СпособЗаполненияСубконто" + НомерСубконто] = СтрокаТаблицы.СпособЗаполненияСубконто;
			Если СтрокаТаблицы.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра Тогда
				МенеджерЗаписи["ВыражениеЗаполненияСубконто" + НомерСубконто] = СтрокаТаблицы.ВыражениеЗаполненияСубконто;
			КонецЕсли;
			Если СтрокаТаблицы.СпособЗаполненияСубконто = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение Тогда
				МенеджерЗаписи["УказанноеЗначениеСубконто" + НомерСубконто] = СтрокаТаблицы.УказанноеЗначениеСубконто;
			КонецЕсли;
			НомерСубконто = НомерСубконто + 1;
		КонецЦикла;
		Для НомераСубконтоДляОчистки = НомерСубконто По 3 Цикл
			МенеджерЗаписи["ВидСубконто" + НомерСубконто] = Неопределено;
			МенеджерЗаписи["СпособЗаполненияСубконто" + НомерСубконто] = Неопределено;
			МенеджерЗаписи["ВыражениеЗаполненияСубконто" + НомерСубконто] = Неопределено;
			МенеджерЗаписи["УказанноеЗначениеСубконто" + НомерСубконто] = Неопределено;
			НомераСубконтоДляОчистки = НомераСубконтоДляОчистки + 1;
		КонецЦикла;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УказанноеЗначениеСубконто.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыражения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.СпособЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СпособыЗаполнения = Новый СписокЗначений();
	СпособыЗаполнения.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять);
	СпособыЗаполнения.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзКорреспонденции);
	ОтборЭлемента.ПравоеЗначение = СпособыЗаполнения;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УказанноеЗначениеСубконто.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕстьПроблемыЗаполненияСубконто.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.СпособЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыражения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.СпособЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.ПредставлениеВыражения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыраженияЕстьПроблемыЗаполненияСубконто.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыражения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.СпособЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыраженияЕстьПроблемыЗаполненияСубконто.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыражения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.СпособЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СпособыЗаполнения = Новый СписокЗначений();
	СпособыЗаполнения.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять);
	СпособыЗаполнения.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзКорреспонденции);
	ОтборЭлемента.ПравоеЗначение = СпособыЗаполнения;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УказанноеЗначениеСубконто.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.СпособЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("ПользовательскаяНастройка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыраженияЕстьПроблемыЗаполненияСубконто.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыражения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.СпособЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияСубконто.ВыражениеЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СпособЗаполнения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕстьПроблемыЗаполненияСубконто.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УказанноеЗначениеСубконто.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыраженияЕстьПроблемыЗаполненияСубконто.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеВыражения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("ПользовательскаяНастройка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",  Истина);
	//
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныеСпособыЗаполненияСубконто()
	
	СписокВыбора = Элементы.СпособЗаполнения.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОписаниеОбъектаУчета = Перечисления.ОбъектыФинансовогоУчета.ОписаниеОбъектаФинансовогоУчета(ОбъектУчета);
	
	Если НЕ ПустаяСтрока(ОписаниеОбъектаУчета.ИсточникДанных) Тогда
		СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра);
		СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение);
		СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять);
	Иначе
		СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.ИзКорреспонденции);
		СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение);
		СписокВыбора.Добавить(Перечисления.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступность()
	
	Элементы.ФормаСохранить.Видимость = ПользовательскаяНастройка ИЛИ Элементы.ФормаСохранить.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеВыраженийЗаполненияСубконто() 
	
	Для каждого СтрокаТаблицы Из НастройкиЗаполненияСубконто Цикл
		ЗаполнитьПредставлениеВыраженияВСтроке(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеВыраженияВСтроке(ИдентификаторСтроки)
	
	СтрокаТаблицы = НастройкиЗаполненияСубконто.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(СтрокаТаблицы.ВыражениеЗаполненияСубконто);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеКомпоновкиДанных);
	Если ДоступноеПоле = Неопределено Тогда
		СтрокаТаблицы.ПредставлениеВыражения = СтрокаТаблицы.ВыражениеЗаполненияСубконто;
	Иначе
		СтрокаТаблицы.ПредставлениеВыражения = ДоступноеПоле.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПользовательскаяНастройкаПриИзмененииСервер()
	
	Если НЕ ПользовательскаяНастройка Тогда
		ОтборНастроек = 
			Обработки.НастройкаСчетовМеждународногоУчета.ОтборНастроекЗаполненияСубконто(
				ПланСчетов, 
				НастройкаФормированияПроводок,
				ОбъектУчета,
				СчетУчета);
		ТаблицаНастроек = 
			Обработки.НастройкаСчетовМеждународногоУчета.НастройкиЗаполненияСубконто(
				ОтборНастроек,
				КомпоновщикНастроек,
				Ложь);
		ЗаполнитьНастройкиЗаполненияСубконто(ТаблицаНастроек);
	КонецЕсли;
	
	УправлениеДоступность();
	
КонецПроцедуры

#КонецОбласти
