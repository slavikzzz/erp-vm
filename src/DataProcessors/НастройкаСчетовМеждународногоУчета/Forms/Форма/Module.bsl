#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ТипНастройкиОбщаяПоОбъектуУчета = Перечисления.ТипыНастроекОтраженияВМеждународномУчете.ОбщаяПоОбъектуУчета;
	ТипНастройкиИсключениеПоОбъектуУчета = Перечисления.ТипыНастроекОтраженияВМеждународномУчете.ИсключениеПоОбъектуУчета;
	
	Организация = Параметры.Организация;
	ПланСчетов = Параметры.ПланСчетов;
	НастройкаФормированияПроводок = Параметры.НастройкаФормированияПроводок;

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПланСчетов) Тогда
		ПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.ПланСчетовПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		НастройкаФормированияПроводок = 
			Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкаФормированияПроводокПоУмолчанию(ПланСчетов);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		НастройкиОтраженияКорреспонденций, "ТекущийОбъектУчета", ТекущийОбъектУчета);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		НастройкиОтраженияКорреспонденций, "ПоложениеДтКт", НСтр("ru = 'Дт/Кт';
																|en = 'Dr/Cr'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		НастройкиОтраженияКорреспонденций, "ПоложениеДт", НСтр("ru = 'Дт';
																|en = 'Dr'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		НастройкиОтраженияКорреспонденций, "ПоложениеКт", НСтр("ru = 'Кт';
																|en = 'Cr'"));
		
	ТекущийМесяц = НачалоМесяца(ТекущаяДатаСеанса());
	
	НастройкаФормированияПроводокПриИзмененииСервер();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПланСчетовМеждународный, 
		"ПланСчетов",
		ПланСчетов,
		,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	РежимПросмотраНастроекОтраженияКорреспонденций = "ОбщимСписком";
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиОтраженияКорреспонденций, "ОбщимСписком", Истина);
	
	Если РежимПросмотраНастроекОтраженияКорреспонденций = "ОбщимСписком" Тогда
		Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.Видимость = Ложь;
		Элементы.ВариантОтбораОбъектовУчетаКорреспонденция.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиОтраженияКорреспонденций, "ОбщимСписокм", Истина);
	ИначеЕсли РежимПросмотраНастроекОтраженияКорреспонденций = "СОтборомПоОбъектамУчета" Тогда
		Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.Видимость = Истина;
		Элементы.ВариантОтбораОбъектовУчетаКорреспонденция.Видимость = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиОтраженияКорреспонденций, "ОбщимСписокм", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОбъектУчета) Тогда
		ВариантОтбораОбъектовУчета = 1;
		ТекущаяСтрокаУстановлена = Ложь;
		Для каждого ГруппаДерева Из ДеревоОбъектовФинансовогоУчета.ПолучитьЭлементы() Цикл
			Для каждого СтрокаДерева Из ГруппаДерева.ПолучитьЭлементы() Цикл
				Если СтрокаДерева.ОбъектУчета = Параметры.ОбъектУчета Тогда
					Элементы.ДеревоОбъектовФинансовогоУчета.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					ТекущаяСтрокаУстановлена = Истина;
				КонецЕсли;
				Если ТекущаяСтрокаУстановлена Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ТекущаяСтрокаУстановлена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОбъектНастройки) Тогда
		ТекущийОбъектНастройкиПриОткрытии = Параметры.ОбъектНастройки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПланСчетов"] <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ПланСчетовМеждународный, 
			"ПланСчетов",
			ПланСчетов,
			,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
	Если Настройки["НастройкаФормированияПроводок"] <> Неопределено Тогда
		НастройкаФормированияПроводокПриИзмененииСервер();
	КонецЕсли;
	
	Если Настройки["Организация"] <> Неопределено Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация) И Настройки["Организация"] <> Неопределено Тогда
		Настройки.Удалить("Организация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПланСчетов) И Настройки["ПланСчетов"] <> Неопределено Тогда
		Настройки.Удалить("ПланСчетов");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаФормированияПроводок) И Настройки["НастройкаФормированияПроводок"] <> Неопределено Тогда
		Настройки.Удалить("НастройкаФормированияПроводок");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		Оповестить("ЗаконченаНастройкаСчетовМеждународногоУчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НастройкиСчетовМеждународногоУчетаПоОбъектам" Тогда
		ЗаполнитьИнформациюПоНастройкам(Истина);
	ИначеЕсли ИмяСобытия = "Запись_НастройкиОтраженияКорреспонденцийВМеждународномУчете" Тогда
		ЗаполнитьИнформациюПоНастройкам();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	УстановитьТекущуюСтраницуНастроекПоОбъектамУчета();
	УстановитьТекущуюСтраницуНастроекПоКорреспонденциям();
	ПланСчетовПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормированияПроводокПриИзменении(Элемент)
	УстановитьТекущуюСтраницуНастроекПоОбъектамУчета();
	УстановитьТекущуюСтраницуНастроекПоКорреспонденциям();
	НастройкаФормированияПроводокПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СтатусНастройкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("ПланСчетов",   ПланСчетов);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СоздатьЗаписьПланыСчетовОрганизаций" Тогда
		ОбработкаОповещения = Новый ОписаниеОповещения("ВыборПериодаЗаписиПланыСчетовОрганизаций", ЭтотОбъект);
		ПоказатьВводДаты(ОбработкаОповещения, ТекущийМесяц, Нстр("ru = 'Включить настройку с';
																|en = 'Enable setting since'"), ЧастиДаты.Дата);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьИсториюПланыСчетовОрганизаций" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.Форма.ФормаСписка", 
			ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНастроекПоОбъектамУчета

&НаКлиенте
Процедура РежимНастройкиПриИзменении(Элемент)
	НастроитьФормуПриИзмененииРежимаНастройки();
	ОчиститьОтборСпискаИсключенийПоОбъектуНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовФинансовогоУчетаПриАктивизацииСтроки(Элемент)
	
	УстановитьТекущуюСтраницуНастроекПоОбъектамУчета();
	ПодключитьОбработчикОжидания("ОбработчикДеревоОбъектовФинансовогоУчетаПриАктивизацииСтроки", 0.1 ,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбщиеНастройкиСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.ТаблицаОбщиеНастройки.ТекущиеДанные;
	
	ЗаписатьСчетУчетаОбщихНастроек(ТекущиеДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбщиеНастройкиСчетУчетаДолгосрочныйПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.ТаблицаОбщиеНастройки.ТекущиеДанные;
	
	ЗаписатьСчетУчетаОбщихНастроек(ТекущиеДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбщиеНастройкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОбщиеНастройки.ТекущиеДанные;
	Если Поле = Элементы.ТаблицаОбщиеНастройкиИсключения Тогда
		РежимНастройки = 1;
		НастроитьФормуПриИзмененииРежимаНастройки();
		УстановитьОтборИсключенийПоОбъектуНастройки(ТекущиеДанные.ОбъектНастройки);
		Если ТекущиеДанные.КоличествоИсключений = 0 Тогда
			Отбор = ОтборНастройкиСчетовПоОбъектуУчета(ТекущийОбъектУчета, ОтборОбъектНастройкиЗначение, ТипНастройкиИсключениеПоОбъектуУчета);
			ОткрытьФормуЗаписиИсключения(Отбор, Истина);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ТаблицаОбщиеНастройкиОбъектНастройки Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектНастройки) Тогда
			ПоказатьЗначение(, ТекущиеДанные.ОбъектНастройки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбъектНастройкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОчиститьОтборПоОбъектуНастройки" Тогда
		ОчиститьОтборСпискаИсключенийПоОбъектуНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораОбъектовУчетаПриИзменении(Элемент)
	
	Если ВариантОтбораОбъектовУчета = 1 Тогда // Требующие настройки
		
		ТекущиеДанные = Элементы.ДеревоОбъектовФинансовогоУчета.ТекущиеДанные;
		СтрокиДерева  = ДеревоОбъектовФинансовогоУчета.ПолучитьЭлементы();
		
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ТребуетсяНастройкаСчетовУчетаКоличество = 0 Тогда
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если СтрокаДерева.ТребуетсяНастройкаСчетовУчетаКоличество > 0 Тогда
					Элементы.ДеревоОбъектовФинансовогоУчета.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекущиеДанные = Элементы.ТаблицаОбщиеНастройки.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или НЕ ТекущиеДанные.ТребуетсяНастройка Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаОбщиеНастройки Цикл
				Если СтрокаТаблицы.ТребуетсяНастройка Тогда
					Элементы.ТаблицаОбщиеНастройки.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИсключенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.СписокИсключения.ТекущиеДанные;
	
	Отбор = ОтборНастройкиСчетовПоОбъектуУчета(ТекущийОбъектУчета, ОтборОбъектНастройкиЗначение, ТипНастройкиИсключениеПоОбъектуУчета);
	Если Копирование Тогда
		Отбор.Вставить("СчетУчета");
		ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);
	КонецЕсли;
	ОткрытьФормуЗаписиИсключения(Отбор, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИсключенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Отбор = ОтборНастройкиСчетовПоОбъектуУчета(ТекущийОбъектУчета, ОтборОбъектНастройкиЗначение, ТипНастройкиИсключениеПоОбъектуУчета);
	ЗаполнитьЗначенияСвойств(Отбор, Элементы.СписокИсключения.ТекущиеДанные );
	ОткрытьФормуЗаписиИсключения(Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИсключенияПослеУдаления(Элемент)
	ЗаполнитьИнформациюПоНастройкам(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗаполненияСубконтоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ОткрытьНастройкуЗаполненияСубконто" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.ДеревоОбъектовФинансовогоУчета.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ДеревоОбъектовФинансовогоУчета.НайтиПоИдентификатору(ТекущаяСтрока);
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ПланСчетов", ПланСчетов);
		ПараметрыОткрытияФормы.Вставить("ОбъектУчета", ТекущиеДанные.ОбъектУчета);
		ПараметрыОткрытияФормы.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
		ПараметрыОткрытияФормы.Вставить("ИсточникДанных", ТекущиеДанные.ИсточникДанных);
		
		ДополнительныеПараметры = Новый Структура();
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОкончанияНастройкиЗаполненияСубконто", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.НастройкаСчетовМеждународногоУчета.Форма.ФормаЗаполненияСубконтоНаСчетах", 
			ПараметрыОткрытияФормы,
			ЭтотОбъект, 
			,,,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНастроекПоКорреспонденциям

&НаСервереБезКонтекста
Процедура НастройкиОтраженияКорреспонденцийПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НастройкаФормированияПроводок = Неопределено;
	
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаФормированияПроводок") Тогда
			НастройкаФормированияПроводок = ЭлементОтбора.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкаФормированияПроводок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьВыделениеДолгосрочныхАктивовОбязательств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаФормированияПроводок, "ИспользоватьВыделениеДолгосрочныхАктивовОбязательств");
	
	Если НЕ ИспользоватьВыделениеДолгосрочныхАктивовОбязательств Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОбъектовУчета = Перечисления.ОбъектыФинансовогоУчета.ОписаниеОбъектовФинансовогоУчета();
	КэшОбъектовУчета = Новый Соответствие();
	
	ЗаполнитьПредставленияСроковОбращенияВСписке(Строки, ОписаниеОбъектовУчета, КэшОбъектовУчета, "Дт");
	ЗаполнитьПредставленияСроковОбращенияВСписке(Строки, ОписаниеОбъектовУчета, КэшОбъектовУчета, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовФинансовогоУчетаПоКорреспонденциямПриАктивизацииСтроки(Элемент)
	
	УстановитьТекущуюСтраницуНастроекПоКорреспонденциям();
	ПодключитьОбработчикОжидания("ОбработчикДеревоОбъектовФинансовогоУчетаПоКорреспонденциямПриАктивизацииСтроки", 0.1 ,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраНастроекОтраженияКорреспонденцийПриИзменении(Элемент)
	
	Если РежимПросмотраНастроекОтраженияКорреспонденций = "ОбщимСписком" Тогда
		Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.Видимость = Ложь;
		Элементы.ВариантОтбораОбъектовУчетаКорреспонденция.Видимость = Ложь;
		Элементы.НастройкиОтраженияКорреспонденцийПоложение.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиОтраженияКорреспонденций, "ОбщимСписком", Истина);
	ИначеЕсли РежимПросмотраНастроекОтраженияКорреспонденций = "СОтборомПоОбъектамУчета" Тогда
		Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.Видимость = Истина;
		Элементы.ВариантОтбораОбъектовУчетаКорреспонденция.Видимость = Истина;
		Элементы.НастройкиОтраженияКорреспонденцийПоложение.Видимость = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиОтраженияКорреспонденций, "ОбщимСписком", Ложь);
	КонецЕсли;
	
	УстановитьТекущуюСтраницуНастроекПоКорреспонденциям();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтраженияКорреспонденцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НастройкиОтраженияКорреспонденцийПорядокПрименения Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеСтроки = Элементы.НастройкиОтраженияКорреспонденций.ДанныеСтроки(ВыбраннаяСтрока);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПланСчетов", ПланСчетов);
		Отбор.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
		Отбор.Вставить("ОбъектУчетаДт", ДанныеСтроки.ОбъектУчетаДт);
		Отбор.Вставить("ОбъектУчетаКт", ДанныеСтроки.ОбъектУчетаКт);
		Отбор.Вставить("ДолгосрочныйДт", ДанныеСтроки.ДолгосрочныйДт);
		Отбор.Вставить("ДолгосрочныйКт", ДанныеСтроки.ДолгосрочныйКт);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.ФормаСписка", 
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтраженияКорреспонденцийПослеУдаления(Элемент)
	ЗаполнитьИнформациюПоНастройкам();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораОбъектовУчетаКорреспонденцияПриИзменении(Элемент)
	
	Если ВариантОтбораОбъектовУчетаКорреспонденция = 1 Тогда // С настройками
		ТекущиеДанные = Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.ТекущиеДанные;
		СтрокиДерева  = ДеревоОбъектовФинансовогоУчета.ПолучитьЭлементы();
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.НастройкиОтраженияКорреспонденцийКоличество = 0 Тогда
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если СтрокаДерева.НастройкиОтраженияКорреспонденцийКоличество > 0 Тогда
					Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПросмотраНастроекПоПлануСчетов

&НаКлиенте
Процедура ПланСчетовМеждународныйПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикПланСчетовМеждународныПриАктивизацииСтроки", 0.1 ,Истина);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоСчетуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуНастройки(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораСчетовУчетаПриИзменении(Элемент)
	
	Если ВариантОтбораСчетовУчета = 0 Тогда
		Элементы.ПланСчетовМеждународный.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.ПланСчетовМеждународный.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПланСчетовМеждународный, 
		"ЕстьНастройки", 
		Истина, 
		ВариантОтбораСчетовУчета = 1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчкиКомандФормы

&НаКлиенте
Процедура НастройкаФормированияПроводок(Команда)
	Если ПроверитьЗаполнение() Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ", НастройкаФормированияПроводок);
		ОткрытьФорму("Справочник.НастройкиФормированияПроводокМеждународногоУчета.ФормаОбъекта", 
			ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьСчетУчета(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоОбъектовФинансовогоУчета.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДеревоОбъектовФинансовогоУчета.НайтиПоИдентификатору(ТекущаяСтрока);

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПланСчетов", ПланСчетов);
	ПараметрыФормы.Вставить("ОбъектУчетаНесобственныхЦенностей", ТекущиеДанные.НесобственныеЦенности);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы.ТаблицаОбщиеНастройки.ВыделенныеСтроки);
	ОписаниеОповещений = Новый ОписаниеОповещения("ПриОкончанииВыбораСчетаУчетаДляЗаполнения", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.НастройкаСчетовМеждународногоУчета.Форма.ФормаВыбораСчетаУчета", 
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещений, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку(Команда)
	
	Если Элементы.НастройкиПоСчету.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуНастройки(Элементы.НастройкиПоСчету.ТекущаяСтрока)
	
КонецПроцедуры

&НаКлиенте
Процедура АнализКорреспонденций(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "АнализКорреспонденцийШахматнаяВедомость");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрОтбор = Новый Структура();
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		ПараметрОтбор.Вставить("ПланСчетов", ПланСчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		ПараметрОтбор.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	КонецЕсли;
	ПараметрыФормы.Вставить("Отбор", ПараметрОтбор);
	
	ОткрытьФорму("Отчет.АнализКорреспонденцийОперативногоУчета.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	НастройкаФормированияПроводокПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбщиеНастройкиСчетУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.СчетУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.ТребуетсяНастройка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.ТребуетсяНастройкаДолгосрочный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбщиеНастройкиСчетУчетаДолгосрочный.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.СчетУчетаДолгосрочный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.ТребуетсяНастройка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.ТребуетсяНастройкаДолгосрочный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчета.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаЭтоГруппа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаТребуетсяНастройкаСчетовУчетаКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОбъектовФинансовогоУчета.Видимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОбъектовФинансовогоУчета.ТребуетсяНастройкаСчетовУчетаКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОбъектовФинансовогоУчета.ОбщиеНастройкиКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОбъектовФинансовогоУчета.НастройкиИсключенийКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость",  Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчета.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаЭтоГруппа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаТребуетсяНастройкаСчетовУчетаКоличество.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
 	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОбъектовФинансовогоУчета.ТребуетсяНастройкаСчетовУчетаКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантОтбораОбъектовУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1; // Требующие настройки
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость",  Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбщиеНастройки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбщиеНастройкиОбъектНастройки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбщиеНастройкиИсключения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбщиеНастройкиГруппаСчетаУчета.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.ТребуетсяНастройка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантОтбораОбъектовУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1; // Требующие настройки
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость",  Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокИсключенияОрганизация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИсключения.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Все';
																|en = 'All'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокИсключенияМестоУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИсключения.МестоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Все';
																|en = 'All'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбщиеНастройкиОбъектНастройки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.ОбъектНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Общая';
																|en = 'General'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбщиеНастройкиОбъектНастройки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОбщиеНастройки.ОбъектНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указан(а)';
																|en = 'Not specified'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокИсключенияОбъектНастройки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИсключения.ОбъектНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не указан(а)';
																|en = 'Not specified'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиОтраженияКорреспонденцийПрименятьПоследующиеНастройки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиОтраженияКорреспонденций.ПрименятьПоследующиеНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не применять';
																|en = 'Do not apply'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиОтраженияКорреспонденцийПрименятьПоследующиеНастройки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиОтраженияКорреспонденций.ПрименятьПоследующиеНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Применять';
																|en = 'Apply'"));
		
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиОтраженияКорреспонденцийСчетУчетаДт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиОтраженияКорреспонденцийСчетУчетаКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиОтраженияКорреспонденций.НеОтражаетсяНаСчетах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не отражается>';
																|en = '<not recorded>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиОтраженияКорреспонденцийСчетУчетаДт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиОтраженияКорреспонденций.СчетУчетаОпределяетсяНастройкойОбъектаДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не изменен>';
																|en = '<not changed>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиОтраженияКорреспонденцийСчетУчетаКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиОтраженияКорреспонденций.СчетУчетаОпределяетсяНастройкойОбъектаКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не изменен>';
																|en = '<not changed>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциямЭтоГруппа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциямПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциямКоличество.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОбъектовФинансовогоУчета.НастройкиОтраженияКорреспонденцийКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантОтбораОбъектовУчетаКорреспонденция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1; // С настройками
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциямЭтоГруппа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциямПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциямКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОбъектовФинансовогоУчета.НесобственныеЦенности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#Область НастройкиПоСчету
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиПоСчетуОбъектУчета.Имя);
	
	ОтборЭлемента =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПоСчету.ТипНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокТиповНастройки = Новый СписокЗначений();
	СписокТиповНастройки.Добавить(Перечисления.ТипыНастроекОтраженияВМеждународномУчете.ОбщаяПоОбъектуУчета);
	СписокТиповНастройки.Добавить(Перечисления.ТипыНастроекОтраженияВМеждународномУчете.ИсключениеПоОбъектуУчета);
	ОтборЭлемента.ПравоеЗначение = СписокТиповНастройки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиПоСчетуЕстьДополнительныйОтборДт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиПоСчетуОбъектУчетаДт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиПоСчетуЕстьДополнительныйОтборКт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиПоСчетуОбъектУчетаКт.Имя);
	
	ОтборЭлемента =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПоСчету.ТипНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНастроекОтраженияВМеждународномУчете.ПоКорреспонденции;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

#Область СерверныеОбработчикиЭлементомШапкиФормы

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПолучитьСтатусНастройки();
	УстановитьОсновнойОтборСпискаИсключений(СписокИсключения, Организация, ПланСчетов, НастройкаФормированияПроводок);
	УстановитьОсновнойОтборНастроекОтраженияКорреспонденций(НастройкиОтраженияКорреспонденций, ПланСчетов, НастройкаФормированияПроводок);
	
КонецПроцедуры

&НаСервере
Процедура ПланСчетовПриИзмененииСервер()
	
	НастройкаФормированияПроводок = 
		Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкаФормированияПроводокПоУмолчанию(ПланСчетов);
	НастройкаФормированияПроводокПриИзмененииСервер();
	УстановитьОсновнойОтборСпискаИсключений(СписокИсключения, Организация, ПланСчетов, НастройкаФормированияПроводок);
	УстановитьОсновнойОтборНастроекОтраженияКорреспонденций(НастройкиОтраженияКорреспонденций, ПланСчетов, НастройкаФормированияПроводок);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПланСчетовМеждународный, 
		"ПланСчетов",
		ПланСчетов,
		,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры

&НаСервере
Процедура НастройкаФормированияПроводокПриИзмененииСервер()
	
	ЗаполнитьДеревоОбъектовФинансовогоУчета();
	
	ИспользоватьВыделениеДолгосрочныхАктивовОбязательств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаФормированияПроводок, "ИспользоватьВыделениеДолгосрочныхАктивовОбязательств");
	
	Элементы.НастройкиОтраженияКорреспонденцийПредставлениеСрокОбращенияДт.Видимость = ИспользоватьВыделениеДолгосрочныхАктивовОбязательств;
	Элементы.НастройкиОтраженияКорреспонденцийПредставлениеСрокОбращенияКт.Видимость = ИспользоватьВыделениеДолгосрочныхАктивовОбязательств;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ПланСчетовМеждународный, 
		"НастройкаФормированияПроводок",
		НастройкаФормированияПроводок);
	
	ЗаполнитьТаблицыНастройки();
	ПолучитьСтатусНастройки();
	ЗаполнитьИнформациюПоНастройкам();
	УстановитьОсновнойОтборСпискаИсключений(СписокИсключения, Организация, ПланСчетов, НастройкаФормированияПроводок);
	УстановитьОсновнойОтборНастроекОтраженияКорреспонденций(НастройкиОтраженияКорреспонденций, ПланСчетов, НастройкаФормированияПроводок);
	
	Если Элементы.ПланСчетовМеждународный.ТекущаяСтрока <> Неопределено Тогда
		ПолучитьНастройкиПоСчету(Элементы.ПланСчетовМеждународный.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусНастройки()
	
	Если Не ЗначениеЗаполнено(ПланСчетов) 
			Или Не ЗначениеЗаполнено(Организация)
			Или Не ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		СтатусНастройки = Неопределено;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчета.Период) КАК Период
	|ПОМЕСТИТЬ ВтПрименяетсяС
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчета
	|ГДЕ
	|	ПланыСчетовМеждународногоУчета.Организация = &Организация
	|	И ПланыСчетовМеждународногоУчета.ПланСчетов = &ПланСчетов
	|	И ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрименяетсяС.Период КАК ПериодС,
	|	МИНИМУМ(ЕСТЬNULL(ПланыСчетовМеждународногоУчета.Период, &ПустаяДата)) КАК ПериодПо
	|ИЗ
	|	ВтПрименяетсяС КАК ПрименяетсяС
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчета
	|	ПО
	|		ПланыСчетовМеждународногоУчета.Организация = &Организация
	|		И ПланыСчетовМеждународногоУчета.ПланСчетов = &ПланСчетов
	|		И ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок <> &НастройкаФормированияПроводок
	|		И ПланыСчетовМеждународногоУчета.Период >ПрименяетсяС.Период
	|ГДЕ
	|	ПрименяетсяС.Период <>&ПустаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрименяетсяС.Период";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ПериодПо) Тогда
			Представление = СтрШаблон(НСтр("ru = 'Применялась с %1 по %2';
											|en = 'Has been applied since %1 till %2'"), 
													Формат(Выборка.ПериодС, "ДЛФ=D"), Формат(Выборка.ПериодПо, "ДЛФ=D"));
			СтатусНастройки = Новый ФорматированнаяСтрока(
													Представление, , , , "ОткрытьИсториюПланыСчетовОрганизаций");
		Иначе
			Представление = СтрШаблон(НСтр("ru = 'Применяется с %1';
											|en = 'Applied since %1'"), Формат(Выборка.ПериодС, "ДЛФ=D"));
			СтатусНастройки = Новый ФорматированнаяСтрока(
													Представление, , , , "ОткрытьИсториюПланыСчетовОрганизаций");
		КонецЕсли;
		
	ИначеЕсли ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПланыСчетовМеждународногоУчетаОрганизаций) Тогда 
		Представление = СтрШаблон(НСтр("ru = 'Включить для организации с %1';
										|en = 'Enable for company since %1'"), Формат(ТекущийМесяц, "ДЛФ=D"));
		СтатусНастройки = Новый ФорматированнаяСтрока(Представление, , ЦветаСтиля.ГиперссылкаЦвет , , "СоздатьЗаписьПланыСчетовОрганизаций");
	Иначе
		Представление = СтрШаблон(НСтр("ru = 'Не применяется для организации';
										|en = 'Not applied for the company'"));
		СтатусНастройки = Новый ФорматированнаяСтрока(Представление, , ЦветаСтиля.ЦветТекстаВнимание);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗаписиПланыСчетовОрганизаций(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	СоздатьЗаписьПланыСчетовОрганизаций(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьПланыСчетовОрганизаций(Период)
	
	МенеджерЗаписи = РегистрыСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.ПланСчетов = ПланСчетов;
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.НастройкаФормированияПроводок = НастройкаФормированияПроводок;
	МенеджерЗаписи.Записать();
	ПолучитьСтатусНастройки();
	
КонецПроцедуры


#КонецОбласти

#Область НастройкиПоОбъектамУчета

&НаСервере
Процедура ЗаполнитьДеревоОбъектовФинансовогоУчета()
	
	ДеревоОбъектовФинансовогоУчета.ПолучитьЭлементы().Очистить();
	
	НастройкиПроводок = Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкиФормированияПроводок(
		НастройкаФормированияПроводок);
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(
		ДеревоОбъектовФинансовогоУчета.ПолучитьЭлементы(),
		Перечисления.ОбъектыФинансовогоУчета.ДеревоОбъектовУчета(НастройкиПроводок));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоНастройкам(ТолькоТекущийОбъектУчета = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаМеждународногоУчетаТребующиеНастройки.ОбъектУчета КАК ОбъектУчета,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетаМеждународногоУчетаТребующиеНастройки.ОбъектНастройки) КАК Количество
	|ИЗ
	|	РегистрСведений.СчетаМеждународногоУчетаТребующиеНастройки КАК СчетаМеждународногоУчетаТребующиеНастройки
	|ГДЕ
	|	СчетаМеждународногоУчетаТребующиеНастройки.ПланСчетов = &ПланСчетов
	|	И СчетаМеждународногоУчетаТребующиеНастройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И (СчетаМеждународногоУчетаТребующиеНастройки.ОбъектУчета = &ТекущийОбъектУчета ИЛИ &ВсеОбъектыУчета) 
	|СГРУППИРОВАТЬ ПО
	|	СчетаМеждународногоУчетаТребующиеНастройки.ОбъектУчета
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиСчетовМеждународногоУчетаПоОбъектам
	|ГДЕ
	|	НастройкиСчетовМеждународногоУчетаПоОбъектам.ПланСчетов = &ПланСчетов
	|	И НастройкиСчетовМеждународногоУчетаПоОбъектам.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И НастройкиСчетовМеждународногоУчетаПоОбъектам.ТипНастройки = &ТипНастройкиОбщая
	|	И (НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбъектУчета = &ТекущийОбъектУчета ИЛИ &ВсеОбъектыУчета) 
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбъектУчета
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбъектУчета КАК ОбъектУчета,
	|	НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбъектНастройки КАК ОбъектНастройки,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиСчетовМеждународногоУчетаПоОбъектам
	|ГДЕ
	|	НастройкиСчетовМеждународногоУчетаПоОбъектам.ПланСчетов = &ПланСчетов
	|	И НастройкиСчетовМеждународногоУчетаПоОбъектам.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И НастройкиСчетовМеждународногоУчетаПоОбъектам.ТипНастройки = &ТипНастройкиИсключение
	|	И (НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбъектУчета = &ТекущийОбъектУчета ИЛИ &ВсеОбъектыУчета) 
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбъектУчета,
	|	НастройкиСчетовМеждународногоУчетаПоОбъектам.ОбъектНастройки
	|
	|ИТОГИ 
	|	СУММА(Количество)
	|ПО
	|	ОбъектУчета
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаДт КАК ОбъектУчета,
	|		1 КАК Количество
	|	ИЗ
	|		РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияКорреспонденцийВМеждународномУчете
	|	ГДЕ
	|		НастройкиОтраженияКорреспонденцийВМеждународномУчете.ПланСчетов = &ПланСчетов
	|		И НастройкиОтраженияКорреспонденцийВМеждународномУчете.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|		И (НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаДт = &ТекущийОбъектУчета ИЛИ &ВсеОбъектыУчета)
	|		И (НЕ (НастройкиОтраженияКорреспонденцийВМеждународномУчете.ДолгосрочныйКт ИЛИ НастройкиОтраженияКорреспонденцийВМеждународномУчете.ДолгосрочныйДт)
	|			ИЛИ НастройкиОтраженияКорреспонденцийВМеждународномУчете.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств)
	|		И НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаКт <> НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаДт
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаКт КАК ОбъектУчета,
	|		1 КАК Количество
	|	ИЗ
	|		РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияКорреспонденцийВМеждународномУчете
	|	ГДЕ
	|		НастройкиОтраженияКорреспонденцийВМеждународномУчете.ПланСчетов = &ПланСчетов
	|		И НастройкиОтраженияКорреспонденцийВМеждународномУчете.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|		И (НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаКт = &ТекущийОбъектУчета ИЛИ &ВсеОбъектыУчета)
	|		И (НЕ (НастройкиОтраженияКорреспонденцийВМеждународномУчете.ДолгосрочныйКт ИЛИ НастройкиОтраженияКорреспонденцийВМеждународномУчете.ДолгосрочныйДт)
	|			ИЛИ НастройкиОтраженияКорреспонденцийВМеждународномУчете.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств)
	|		И НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаДт <> НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаКт 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаДт КАК ОбъектУчета,
	|		1 КАК Количество
	|	ИЗ
	|		РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияКорреспонденцийВМеждународномУчете
	|	ГДЕ
	|		НастройкиОтраженияКорреспонденцийВМеждународномУчете.ПланСчетов = &ПланСчетов
	|		И НастройкиОтраженияКорреспонденцийВМеждународномУчете.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|		И (НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаДт = &ТекущийОбъектУчета ИЛИ &ВсеОбъектыУчета)
	|		И (НЕ (НастройкиОтраженияКорреспонденцийВМеждународномУчете.ДолгосрочныйКт ИЛИ НастройкиОтраженияКорреспонденцийВМеждународномУчете.ДолгосрочныйДт)
	|			ИЛИ НастройкиОтраженияКорреспонденцийВМеждународномУчете.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств)
	|		И НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаДт = НастройкиОтраженияКорреспонденцийВМеждународномУчете.ОбъектУчетаКт) ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ОбъектУчета
	|";
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	Запрос.УстановитьПараметр("ТипНастройкиОбщая", ТипНастройкиОбщаяПоОбъектуУчета);
	Запрос.УстановитьПараметр("ТипНастройкиИсключение", ТипНастройкиИсключениеПоОбъектуУчета);
	Запрос.УстановитьПараметр("ТекущийОбъектУчета", ТекущийОбъектУчета);
	Запрос.УстановитьПараметр("ВсеОбъектыУчета", НЕ ТолькоТекущийОбъектУчета);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОбъектыТребуетсяНастройкаСчетовУчета = Новый Соответствие();
	ВыборкаТребуетсяНастройкаСчетовУчета = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаТребуетсяНастройкаСчетовУчета.Следующий() Цикл
		ОбъектыТребуетсяНастройкаСчетовУчета.Вставить(ВыборкаТребуетсяНастройкаСчетовУчета.ОбъектУчета, ВыборкаТребуетсяНастройкаСчетовУчета.Количество);
	КонецЦикла;
	
	ОбъектыЕстьОбщиеНастройки = Новый Соответствие();
	ВыборкаЕстьОбщиеНастройки = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаЕстьОбщиеНастройки.Следующий() Цикл
		ОбъектыЕстьОбщиеНастройки.Вставить(
			ВыборкаЕстьОбщиеНастройки.ОбъектУчета,
			ВыборкаЕстьОбщиеНастройки.Количество);
	КонецЦикла;
	
	ВыборкаЕстьНастройкиИсключений = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ОбъектыЕстьНастройкиОтраженияКорреспонденций = Новый Соответствие();
	ВыборкаЕстьНастройкиОтраженияКорреспонденций = РезультатЗапроса[3].Выбрать();
	Пока ВыборкаЕстьНастройкиОтраженияКорреспонденций.Следующий() Цикл
		ОбъектыЕстьНастройкиОтраженияКорреспонденций.Вставить(
			ВыборкаЕстьНастройкиОтраженияКорреспонденций.ОбъектУчета, 
			ВыборкаЕстьНастройкиОтраженияКорреспонденций.Количество);
	КонецЦикла;
	
	Если ТолькоТекущийОбъектУчета Тогда
		
		СтрокаДерева = ДеревоОбъектовФинансовогоУчета.НайтиПоИдентификатору(Элементы.ДеревоОбъектовФинансовогоУчета.ТекущаяСтрока);
		ТребуетсяНастройкаСчетовУчетаКоличество = ОбъектыТребуетсяНастройкаСчетовУчета.Получить(СтрокаДерева.ОбъектУчета) ;
		Если ТребуетсяНастройкаСчетовУчетаКоличество  <> Неопределено Тогда
			СтрокаДерева.ТребуетсяНастройкаСчетовУчетаКоличество = ТребуетсяНастройкаСчетовУчетаКоличество;
		Иначе
			СтрокаДерева.ТребуетсяНастройкаСчетовУчетаКоличество = 0;
		КонецЕсли;
		
		ОбщиеНастройкиКоличество = ОбъектыЕстьОбщиеНастройки.Получить(СтрокаДерева.ОбъектУчета);
		Если ОбщиеНастройкиКоличество <> Неопределено Тогда
			СтрокаДерева.ОбщиеНастройкиКоличество = ОбщиеНастройкиКоличество;
		Иначе
			СтрокаДерева.ОбщиеНастройкиКоличество = 0;
		КонецЕсли;
		
		ВыборкаЕстьНастройкиИсключений.Сбросить();
		Если ВыборкаЕстьНастройкиИсключений.НайтиСледующий(Новый Структура("ОбъектУчета", СтрокаДерева.ОбъектУчета)) Тогда
			СтрокаДерева.НастройкиИсключенийКоличество = ВыборкаЕстьНастройкиИсключений.Количество;
			
			ВыборкаИсключенийПоОбъектамНастройки = ВыборкаЕстьНастройкиИсключений.Выбрать();
			КоличествоИсключенияПоОбъектамНастройки = Новый Соответствие();
			Пока ВыборкаИсключенийПоОбъектамНастройки.Следующий() Цикл
				КоличествоИсключенияПоОбъектамНастройки.Вставить(
					ВыборкаИсключенийПоОбъектамНастройки.ОбъектНастройки,
					ВыборкаИсключенийПоОбъектамНастройки.Количество);
			КонецЦикла;
			
			Для каждого СтрокаТаблицыОбщихНастроек Из ТаблицаОбщиеНастройки Цикл
				КоличествоИсключений = КоличествоИсключенияПоОбъектамНастройки[СтрокаТаблицыОбщихНастроек.ОбъектНастройки];
				Если КоличествоИсключений = Неопределено Тогда
					СтрокаТаблицыОбщихНастроек.Исключения  =   НСтр("ru = 'Настроить';
																	|en = 'Set up'");
					СтрокаТаблицыОбщихНастроек.КоличествоИсключений = 0;
				Иначе
					СтрокаТаблицыОбщихНастроек.Исключения = СтрШаблон(НСтр("ru = 'Настроить (%1)';
																			|en = 'Set up (%1)'"), КоличествоИсключений);
					СтрокаТаблицыОбщихНастроек.КоличествоИсключений = КоличествоИсключений;
				КонецЕсли;
			КонецЦикла; 
			
		Иначе
			СтрокаДерева.НастройкиИсключенийКоличество = 0;
			Для каждого СтрокаТаблицыОбщихНастроек Из ТаблицаОбщиеНастройки Цикл
				СтрокаТаблицыОбщихНастроек.Исключения = НСтр("ru = 'Настроить';
															|en = 'Set up'");
				СтрокаТаблицыОбщихНастроек.КоличествоИсключений = 0;
			КонецЦикла; 
		КонецЕсли;
		
		ЭлементИсключения =  Элементы.РежимНастройки.СписокВыбора.НайтиПоЗначению(1);
		ЭлементИсключения.Представление = СтрШаблон(НСтр("ru = 'Исключения (%1)';
														|en = 'Exceptions (%1)'"), СтрокаДерева.НастройкиИсключенийКоличество);
		
		НастройкиОтраженияКорреспонденцийКоличество = ОбъектыЕстьНастройкиОтраженияКорреспонденций.Получить(СтрокаДерева.ОбъектУчета);
		Если НастройкиОтраженияКорреспонденцийКоличество <> Неопределено Тогда
			СтрокаДерева.НастройкиОтраженияКорреспонденцийКоличество = НастройкиОтраженияКорреспонденцийКоличество;
		Иначе
			СтрокаДерева.НастройкиОтраженияКорреспонденцийКоличество = 0;
		КонецЕсли;
		
		Если СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
			ОбновитьИтогиПоГруппеДерева(СтрокаДерева);
		Иначе
			ОбновитьИтогиПоГруппеДерева(СтрокаДерева.ПолучитьРодителя());
		КонецЕсли;
		
	Иначе
		Для каждого ГруппаДерева Из ДеревоОбъектовФинансовогоУчета.ПолучитьЭлементы() Цикл
			
			Для каждого СтрокаДерева Из ГруппаДерева.ПолучитьЭлементы() Цикл 
				
				ТребуетсяНастройкаСчетовУчетаКоличество = ОбъектыТребуетсяНастройкаСчетовУчета.Получить(СтрокаДерева.ОбъектУчета) ;
				Если ТребуетсяНастройкаСчетовУчетаКоличество  <> Неопределено Тогда
					СтрокаДерева.ТребуетсяНастройкаСчетовУчетаКоличество = ТребуетсяНастройкаСчетовУчетаКоличество;
				Иначе
					СтрокаДерева.ТребуетсяНастройкаСчетовУчетаКоличество = 0;
				КонецЕсли;
				
				ОбщиеНастройкиКоличество = ОбъектыЕстьОбщиеНастройки.Получить(СтрокаДерева.ОбъектУчета);
				Если ОбщиеНастройкиКоличество <> Неопределено Тогда
					СтрокаДерева.ОбщиеНастройкиКоличество = ОбщиеНастройкиКоличество;
				Иначе
					СтрокаДерева.ОбщиеНастройкиКоличество = 0;
				КонецЕсли;
				
				ВыборкаЕстьНастройкиИсключений.Сбросить();
				Если ВыборкаЕстьНастройкиИсключений.НайтиСледующий(Новый Структура("ОбъектУчета", СтрокаДерева.ОбъектУчета)) Тогда
					СтрокаДерева.НастройкиИсключенийКоличество = ВыборкаЕстьНастройкиИсключений.Количество;
				Иначе
					СтрокаДерева.НастройкиИсключенийКоличество = 0;
				КонецЕсли;
				
				НастройкиОтраженияКорреспонденцийКоличество = ОбъектыЕстьНастройкиОтраженияКорреспонденций.Получить(СтрокаДерева.ОбъектУчета);
				Если НастройкиОтраженияКорреспонденцийКоличество <> Неопределено Тогда
					СтрокаДерева.НастройкиОтраженияКорреспонденцийКоличество = НастройкиОтраженияКорреспонденцийКоличество;
				Иначе
					СтрокаДерева.НастройкиОтраженияКорреспонденцийКоличество = 0;
				КонецЕсли;
		
			КонецЦикла;
			
			ОбновитьИтогиПоГруппеДерева(ГруппаДерева)
			
		КонецЦикла;
	
	КонецЕсли;
	
	СформироватьСсылкуНастройкаЗаполненияСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоГруппеДерева(ГруппаДерева)
	
	ТребуетсяНастройкаСчетовУчетаКоличество = 0;
	НастройкиИсключенийКоличество = 0;
	ОбщиеНастройкиКоличество = 0;
	НастройкиОтраженияКорреспонденцийКоличество = 0;
	
	Для каждого СтрокаДерева Из ГруппаДерева.ПолучитьЭлементы() Цикл
		ТребуетсяНастройкаСчетовУчетаКоличество = 
			ТребуетсяНастройкаСчетовУчетаКоличество 
			+ СтрокаДерева.ТребуетсяНастройкаСчетовУчетаКоличество;
			
		ОбщиеНастройкиКоличество = 
			ОбщиеНастройкиКоличество
			+ СтрокаДерева.ОбщиеНастройкиКоличество;
			
		НастройкиИсключенийКоличество = 
			НастройкиИсключенийКоличество
			+ СтрокаДерева.НастройкиИсключенийКоличество;
			
		НастройкиОтраженияКорреспонденцийКоличество =
			НастройкиОтраженияКорреспонденцийКоличество
			+ СтрокаДерева.НастройкиОтраженияКорреспонденцийКоличество;
			
	КонецЦикла;
	
	ГруппаДерева.ТребуетсяНастройкаСчетовУчетаКоличество = ТребуетсяНастройкаСчетовУчетаКоличество;
	ГруппаДерева.ОбщиеНастройкиКоличество = ОбщиеНастройкиКоличество;
	ГруппаДерева.НастройкиИсключенийКоличество = НастройкиИсключенийКоличество;
	ГруппаДерева.НастройкиОтраженияКорреспонденцийКоличество = НастройкиОтраженияКорреспонденцийКоличество;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыНастройки()
	
	ТаблицаОбщиеНастройки.Очистить();
	
	Если Элементы.ДеревоОбъектовФинансовогоУчета.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДерева = ДеревоОбъектовФинансовогоУчета.НайтиПоИдентификатору(Элементы.ДеревоОбъектовФинансовогоУчета.ТекущаяСтрока);

	Если ТекущаяСтрокаДерева = Неопределено
	 ИЛИ ТекущаяСтрокаДерева.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапросаВтТаблицаОбъектНастройки = Новый Массив;
	ТекстыЗапросаВтТаблицаОбъектНастройки.Добавить(
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка
		|ПОМЕСТИТЬ ВтТаблицаОбъектНастройки
		|ГДЕ ЛОЖЬ");
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки) Тогда
		ТекстыЗапросаВтТаблицаОбъектНастройки.Добавить(
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК Ссылка
			|");
	Иначе
		ТекстЗапроса = 
			"ВЫБРАТЬ 
			|	НЕОПРЕДЕЛЕНО КАК Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОбъектыНастройки.Ссылка КАК Ссылка
			|ИЗ
			|	&ТаблицаОбъектНастройки КАК ОбъектыНастройки
			|ГДЕ
			|	&ДополнительныйОтбор
			|";
		ТипОбъектаНастройки = ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки.Типы()[0];
		МетаданныеОбъектНастройки = Метаданные.НайтиПоТипу(ТипОбъектаНастройки);
		
		ПолноеИмяОбъектаМетаданных = МетаданныеОбъектНастройки.ПолноеИмя();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОбъектНастройки", ПолноеИмяОбъектаМетаданных);
		Запрос.УстановитьПараметр("ПустаяСсылка", Новый (ТипОбъектаНастройки));
		
		Если ЗначениеЗаполнено(ТекущаяСтрокаДерева.ОтборОбъектовНастройки) Тогда
			ДополнительныйОтбор = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияВыборкиДанных(
				ТекущаяСтрокаДерева.ОтборОбъектовНастройки, Запрос.Параметры, "ОбъектыНастройки");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", ДополнительныйОтбор);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", "ИСТИНА");
		КонецЕсли;
	
		ТекстыЗапросаВтТаблицаОбъектНастройки.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапросаВтТаблицаОбъектНастройки = 
		СтрСоединить(ТекстыЗапросаВтТаблицаОбъектНастройки, ОбщегоНазначенияУт.РазделительЗапросовВОбъединении());
	
	ТекстЗапросаВтТаблицаОбъектНастройки = ТекстЗапросаВтТаблицаОбъектНастройки + "
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка"; // @query-part
	
	Запрос.Текст =
		ТекстЗапросаВтТаблицаОбъектНастройки
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ "ВЫБРАТЬ
		|	ОбъектыНастройки.Ссылка КАК ОбъектНастройки,
		|	ПорядокОтраженияОбщие.СчетУчета КАК СчетУчета,
		|	ПорядокОтраженияОбщие.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
		|	КОЛИЧЕСТВО(ПорядокОтраженияИсключения.СчетУчета) КАК КоличествоИсключений
		|ПОМЕСТИТЬ ТаблицаНастройки
		|ИЗ
		|	ВтТаблицаОбъектНастройки КАК ОбъектыНастройки
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК ПорядокОтраженияОбщие
		|	ПО
		|		ПорядокОтраженияОбщие.ПланСчетов = &ПланСчетов
		|		И ПорядокОтраженияОбщие.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
		|		И ПорядокОтраженияОбщие.ТипНастройки = &ТипНастройкиОбщая
		|		И ПорядокОтраженияОбщие.ОбъектУчета = &ОбъектУчета
		|		И ОбъектыНастройки.Ссылка = ПорядокОтраженияОбщие.ОбъектНастройки
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК ПорядокОтраженияИсключения
		|	ПО
		|		ПорядокОтраженияИсключения.ПланСчетов = &ПланСчетов
		|		И ПорядокОтраженияИсключения.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
		|		И ПорядокОтраженияИсключения.ТипНастройки = &ТипНастройкиИсключение
		|		И ПорядокОтраженияИсключения.ОбъектУчета = &ОбъектУчета
		|		И ОбъектыНастройки.Ссылка = ПорядокОтраженияИсключения.ОбъектНастройки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыНастройки.Ссылка,
		|	ПорядокОтраженияОбщие.СчетУчета,
		|	ПорядокОтраженияОбщие.СчетУчетаДолгосрочный
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаНастройки.ОбъектНастройки КАК ОбъектНастройки,
		|	ТаблицаНастройки.СчетУчета КАК СчетУчета,
		|	ТаблицаНастройки.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
		|	ТаблицаНастройки.КоличествоИсключений КАК КоличествоИсключений,
		|	ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрСведений.СчетаМеждународногоУчетаТребующиеНастройки КАК СчетаМеждународногоУчетаТребующиеНастройки
		|		ГДЕ
		|			СчетаМеждународногоУчетаТребующиеНастройки.ПланСчетов = &ПланСчетов
		|			И СчетаМеждународногоУчетаТребующиеНастройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
		|			И СчетаМеждународногоУчетаТребующиеНастройки.ОбъектУчета = &ОбъектУчета
		|			И СчетаМеждународногоУчетаТребующиеНастройки.ОбъектНастройки = ТаблицаНастройки.ОбъектНастройки
		|	) КАК ТребуетсяНастройка,
		|	ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрСведений.СчетаМеждународногоУчетаТребующиеНастройки КАК СчетаМеждународногоУчетаТребующиеНастройки
		|		ГДЕ
		|			СчетаМеждународногоУчетаТребующиеНастройки.ПланСчетов = &ПланСчетов
		|			И СчетаМеждународногоУчетаТребующиеНастройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
		|			И СчетаМеждународногоУчетаТребующиеНастройки.ОбъектУчета = &ОбъектУчета
		|			И СчетаМеждународногоУчетаТребующиеНастройки.ОбъектНастройки = ТаблицаНастройки.ОбъектНастройки
		|			И СчетаМеждународногоУчетаТребующиеНастройки.Долгосрочный
		|	) КАК ТребуетсяНастройкаДолгосрочный
		|ИЗ
		|	ТаблицаНастройки КАК ТаблицаНастройки
		|";
	
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	Запрос.УстановитьПараметр("ТипНастройкиОбщая", ТипНастройкиОбщаяПоОбъектуУчета);
	Запрос.УстановитьПараметр("ТипНастройкиИсключение", ТипНастройкиИсключениеПоОбъектуУчета);
	Запрос.УстановитьПараметр("ОбъектУчета", ТекущаяСтрокаДерева.ОбъектУчета);
	
	ТаблицаОбщиеНастройки.Загрузить(Запрос.Выполнить().Выгрузить());
	Для каждого СтрокаТаблицы Из ТаблицаОбщиеНастройки Цикл
		Если СтрокаТаблицы.КоличествоИсключений = 0 Тогда
			СтрокаТаблицы.Исключения  =   НСтр("ru = 'Настроить';
												|en = 'Set up'");
		Иначе
			СтрокаТаблицы.Исключения = СтрШаблон(НСтр("ru = 'Настроить (%1)';
														|en = 'Set up (%1)'"), СтрокаТаблицы.КоличествоИсключений);
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущийОбъектНастройкиПриОткрытии <> Неопределено Тогда
		МассивСтрок = ТаблицаОбщиеНастройки.НайтиСтроки(Новый Структура("ОбъектНастройки", ТекущийОбъектНастройкиПриОткрытии));
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.ТаблицаОбщиеНастройки.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		ТекущийОбъектНастройкиПриОткрытии = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриИзмененииОбъектаУчета()
	
	ТекущаяСтрокаДерева = ДеревоОбъектовФинансовогоУчета.НайтиПоИдентификатору(Элементы.ДеревоОбъектовФинансовогоУчета.ТекущаяСтрока);

	ЭлементИсключения =  Элементы.РежимНастройки.СписокВыбора.НайтиПоЗначению(1);
	ЭлементИсключения.Представление = СтрШаблон(НСтр("ru = 'Исключения (%1)';
													|en = 'Exceptions (%1)'"), ТекущаяСтрокаДерева.НастройкиИсключенийКоличество);
	
	Элементы.ТаблицаОбщиеНастройкиИсключения.Видимость = ЗначениеЗаполнено(ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки);
	Элементы.СписокИсключенияОбъектНастройки.Видимость = ЗначениеЗаполнено(ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки);
	
	Элементы.ТаблицаОбщиеНастройкиОбъектНастройки.ОграничениеТипа = ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки;
	Элементы.СписокИсключенияОбъектНастройки.ОграничениеТипа = ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки;

	ЗаголовокОбъектНастройки = Перечисления.ОбъектыФинансовогоУчета.ЗаголовокОбъектаНастройкиПоОписаниюТипов(ТекущаяСтрокаДерева.ОписаниеТиповОбъектНастройки);
	Элементы.ТаблицаОбщиеНастройкиОбъектНастройки.Заголовок = ЗаголовокОбъектНастройки;
	Элементы.СписокИсключенияОбъектНастройки.Заголовок = ЗаголовокОбъектНастройки;
	
	Элементы.СписокИсключенияМестоУчета.Видимость = ТекущаяСтрокаДерева.ОписаниеТиповМестоУчета.Типы().Количество() > 0;
	Элементы.СписокИсключенияМестоУчета.ОграничениеТипа = ТекущаяСтрокаДерева.ОписаниеТиповМестоУчета;
	Элементы.СписокИсключенияМестоУчета.Заголовок = Перечисления.ОбъектыФинансовогоУчета.ЗаголовокМестаУчета(ТекущаяСтрокаДерева.ОписаниеТиповМестоУчета);
	
	Если ИспользоватьВыделениеДолгосрочныхАктивовОбязательств
		И ТекущаяСтрокаДерева.ВыделениеДолгосрочныхАктивовОбязательств Тогда
		Элементы.ТаблицаОбщиеНастройкиГруппаСчетаУчета.ОтображатьВШапке = Истина;
		Элементы.ТаблицаОбщиеНастройкиСчетУчетаДолгосрочный.Видимость = Истина;
		Элементы.ТаблицаОбщиеНастройкиСчетУчета.Заголовок = НСтр("ru = 'Краткосрочный';
																|en = 'Short-term'");

		Элементы.СписокИсключенияГруппаСчетаУчета.ОтображатьВШапке = Истина;
		Элементы.СписокИсключенияСчетУчетаДолгосрочный.Видимость = Истина;
		Элементы.СписокИсключенияСчетУчета.Заголовок = НСтр("ru = 'Краткосрочный';
															|en = 'Short-term'");
	Иначе
		Элементы.ТаблицаОбщиеНастройкиГруппаСчетаУчета.ОтображатьВШапке = Ложь;
		Элементы.ТаблицаОбщиеНастройкиСчетУчетаДолгосрочный.Видимость = Ложь;
		Элементы.ТаблицаОбщиеНастройкиСчетУчета.Заголовок = "";

		Элементы.СписокИсключенияГруппаСчетаУчета.ОтображатьВШапке = Ложь;
		Элементы.СписокИсключенияСчетУчетаДолгосрочный.Видимость = Ложь;
		Элементы.СписокИсключенияСчетУчета.Заголовок = "";
	КонецЕсли;
		
	Обработки.НастройкаСчетовМеждународногоУчета.ИнициализироватьКомпоновщикНастроек(ЭтотОбъект, ТекущаяСтрокаДерева.ИсточникДанных);
		
	СформироватьСсылкуНастройкаЗаполненияСубконто();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСсылкуНастройкаЗаполненияСубконто()
	
	ОтборНастроек = 
		Обработки.НастройкаСчетовМеждународногоУчета.ОтборНастроекЗаполненияСубконто(
			ПланСчетов, 
			НастройкаФормированияПроводок,
			ТекущийОбъектУчета);
	НастройкиЗаполненияСубконто = 
		Обработки.НастройкаСчетовМеждународногоУчета.НастройкиЗаполненияСубконто(
			ОтборНастроек,
			КомпоновщикНастроек);
	
	МассивСчетовСПроблемамиЗаполненияСубконто =  
		НастройкиЗаполненияСубконто.НайтиСтроки(Новый Структура("ЕстьПроблемыЗаполненияСубконто", Истина));
	
	НавигационнаяСсылка = "ОткрытьНастройкуЗаполненияСубконто";
	Если МассивСчетовСПроблемамиЗаполненияСубконто.Количество() > 0 Тогда
		ТекстСсылка = СтрШаблон(
			НСтр("ru = 'Настройка заполнения субконто (%1)';
				|en = 'Set up extra dimensions (%1)'"),
			МассивСчетовСПроблемамиЗаполненияСубконто.Количество());
		НастройкаЗаполненияСубконто = 
			Новый ФорматированнаяСтрока(ТекстСсылка, , ЦветаСтиля.ПросроченныеДанныеЦвет, , НавигационнаяСсылка);
	Иначе
		ТекстСсылка = НСтр("ru = 'Настройка заполнения субконто';
							|en = 'Set up extra dimensions'");
		НастройкаЗаполненияСубконто = 
			Новый ФорматированнаяСтрока(ТекстСсылка, , ЦветаСтиля.ГиперссылкаЦвет, , НавигационнаяСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияНастройкиЗаполненияСубконто(Результат, ДополнительныеПарметры) Экспорт
	СформироватьСсылкуНастройкаЗаполненияСубконто();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДеревоОбъектовФинансовогоУчетаПриАктивизацииСтроки()

	ТекущиеДанные = Элементы.ДеревоОбъектовФинансовогоУчета.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийОбъектУчета = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ТекущийОбъектУчета = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ОбъектУчета = ТекущийОбъектУчета Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъектУчета = ТекущиеДанные.ОбъектУчета;
	УстановитьТекущуюСтраницуНастроекПоОбъектамУчета();
	ПриАктивацииСтрокиДереваОбъектовУчетаСервер();
	
	Если ВариантОтбораОбъектовУчета = 1 Тогда
		Для Каждого СтрокаНастройки Из ТаблицаОбщиеНастройки Цикл
			Если СтрокаНастройки.ТребуетсяНастройка Тогда
				ИдентификаторСтроки = СтрокаНастройки.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.ТаблицаОбщиеНастройки.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриАктивацииСтрокиДереваОбъектовУчетаСервер()
	
	ЗаполнитьТаблицыНастройки();
	НастроитьЭлементыФормыПриИзмененииОбъектаУчета();
	
	ОтборСписка = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(СписокИсключения);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "ОбъектУчета", ТекущийОбъектУчета);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСервер(ПараметрыСохраненияНастройки)
	
	МенеджерЗаписиПорядокОтражения = РегистрыСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписиПорядокОтражения, ПараметрыСохраненияНастройки);
	Если МенеджерЗаписиПорядокОтражения.ТипНастройки = Перечисления.ТипыНастроекОтраженияВМеждународномУчете.ОбщаяПоОбъектуУчета Тогда
		МенеджерЗаписиПорядокОтражения.Организация = Неопределено;
		МенеджерЗаписиПорядокОтражения.МестоУчета = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(МенеджерЗаписиПорядокОтражения.МестоУчета) Тогда
		МенеджерЗаписиПорядокОтражения.МестоУчета = Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписиПорядокОтражения.ОбъектНастройки) Тогда
		МенеджерЗаписиПорядокОтражения.ОбъектНастройки = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСохраненияНастройки.СчетУчета)
	 ИЛИ ЗначениеЗаполнено(ПараметрыСохраненияНастройки.СчетУчетаДолгосрочный) Тогда
		МенеджерЗаписиПорядокОтражения.Записать();
	Иначе
		МенеджерЗаписиПорядокОтражения.Удалить();
	КонецЕсли;
	
	ЗаполнитьИнформациюПоНастройкам(Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОсновнойОтборСпискаИсключений(СписокИсключения, Организация, ПланСчетов, НастройкаФормированияПроводок)
	
	ОтборСписка = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(СписокИсключения);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "ПланСчетов", ПланСчетов);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	
	СписокОрганизаций = Новый СписокЗначений();
	СписокОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Организация", СписокОрганизаций, , , ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОсновнойОтборНастроекОтраженияКорреспонденций(СписокНастроекОтраженияКорреспонденций, ПланСчетов, НастройкаФормированияПроводок)
	
	ОтборСписка = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(СписокНастроекОтраженияКорреспонденций);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "ПланСчетов", ПланСчетов);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПриИзмененииРежимаНастройки()
	Если РежимНастройки = 1 Тогда
		ИмяСтраницыСНастройками = Элементы.СтраницаИсключения.Имя;
		ИмяСтраницыКоманднойПанели = Элементы.СтраницаКоманднаяПанельИсключения.Имя;
	Иначе
		ИмяСтраницыСНастройками = Элементы.СтраницаОбщиеНастройки.Имя;
		ИмяСтраницыКоманднойПанели = Элементы.СтраницаКоманднаяПанельОбщиеНастройки.Имя;
	КонецЕсли;
	УстановитьТекущуюСтраницуНастроекПоОбъектамУчета();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборИсключенийПоОбъектуНастройки(ОбъектНастройки)
	
	ОтборОбъектНастройкиЗначение = ОбъектНастройки;
	
	ОтборСписка = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(СписокИсключения);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ОтборСписка,
		"ОбъектНастройки", 
		ОтборОбъектНастройкиЗначение);
	
	Если ЗначениеЗаполнено(ОбъектНастройки) Тогда
		СтрокаОтбор = СтрШаблон("%1: %2", Элементы.СписокИсключенияОбъектНастройки.Заголовок, ОтборОбъектНастройкиЗначение);
	Иначе
		СтрокаОтбор = СтрШаблон(Нстр("ru = '%1: Не указана';
									|en = '%1: Not specified'"), Элементы.СписокИсключенияОбъектНастройки.Заголовок);
	КонецЕсли;
	
	ОтборОбъектНастройкиПредставление = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
		"%1 <a href=""ОчиститьОтборПоОбъектуНастройки""><img src='ОчиститьОтбор9на9'></a>", СтрокаОтбор);
	Элементы.ОтборОбъектНастройкиПредставление.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборСпискаИсключенийПоОбъектуНастройки()
	ОтборОбъектНастройкиЗначение = Неопределено;
	ОтборСписка = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(СписокИсключения);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ОтборСписка, "ОбъектНастройки");
	ОтборОбъектНастройкиПредставление = "";
	Элементы.ОтборОбъектНастройкиПредставление.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаписиИсключения(Отбор, НоваяЗапись = Ложь)
	
	ПараметрыФормы = Новый Структура;
	Если НоваяЗапись Тогда
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Отбор);
	Иначе
		МассивОтбор = Новый Массив;
		МассивОтбор.Добавить(Отбор);
		КлючЗаписи = Новый("РегистрСведенийКлючЗаписи.НастройкиСчетовМеждународногоУчетаПоОбъектам", МассивОтбор);
		ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НеИзменятьТипНастройки", Истина);
	ПараметрыФормы.Вставить("НеИзменятьОбъектУчета", Истина);
	ОткрытьФорму("РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.Форма.ФормаЗаписи", 
			ПараметрыФормы, ЭтотОбъект,, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ОтборНастройкиСчетовПоОбъектуУчета(ОбъектУчета, ОбъектНастройки, ТипНастройки)

	Отбор = Новый Структура;
	Отбор.Вставить("ПланСчетов", ПланСчетов);
	Отбор.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	Отбор.Вставить("ТипНастройки", ТипНастройки);
	Отбор.Вставить("ОбъектУчета", ОбъектУчета);
	Отбор.Вставить("ОбъектНастройки", ОбъектНастройки);
	Отбор.Вставить("Организация");
	Отбор.Вставить("МестоУчета");
	Возврат Отбор;
	
КонецФункции

&НаКлиенте
Функция ОтборНастройкиПоКорреспонденции()

	Отбор = Новый Структура;
	Отбор.Вставить("ПланСчетов", ПланСчетов);
	Отбор.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	Отбор.Вставить("ОбъектУчетаДт");
	Отбор.Вставить("ОбъектУчетаКт");
	Отбор.Вставить("ДолгосрочныйДт");
	Отбор.Вставить("ДолгосрочныйКт");
	Отбор.Вставить("ПорядокПрименения");
	Возврат Отбор;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьСчетУчетаОбщихНастроек(ТекущиеДанные)
	
	ПараметрыСохраненияНастройки = Новый Структура;
	ПараметрыСохраненияНастройки.Вставить("ПланСчетов", ПланСчетов);
	ПараметрыСохраненияНастройки.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	ПараметрыСохраненияНастройки.Вставить("ТипНастройки", ТипНастройкиОбщаяПоОбъектуУчета);
	ПараметрыСохраненияНастройки.Вставить("ОбъектУчета", ТекущийОбъектУчета);
	ПараметрыСохраненияНастройки.Вставить("ОбъектНастройки", ТекущиеДанные.ОбъектНастройки);
	ПараметрыСохраненияНастройки.Вставить("Организация", Неопределено);
	ПараметрыСохраненияНастройки.Вставить("МестоУчета", Неопределено);
	ПараметрыСохраненияНастройки.Вставить("СчетУчета", ТекущиеДанные.СчетУчета);
	ПараметрыСохраненияНастройки.Вставить("ТребуетсяНастройка", ТекущиеДанные.ТребуетсяНастройка);
	ПараметрыСохраненияНастройки.Вставить("СчетУчетаДолгосрочный", ТекущиеДанные.СчетУчетаДолгосрочный);
	
	СохранитьНастройкиСервер(ПараметрыСохраненияНастройки);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОкончанииВыбораСчетаУчетаДляЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьСчетУчетаОбщихНастроекНаСервере(Результат, ДополнительныеПараметры.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетУчетаОбщихНастроекНаСервере(СчетУчета, ВыделенныеСтроки)
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаОбщиеНастройки.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.СчетУчета = СчетУчета;
	
		ПараметрыСохраненияНастройки = Новый Структура;
		ПараметрыСохраненияНастройки.Вставить("ПланСчетов", ПланСчетов);
		ПараметрыСохраненияНастройки.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
		ПараметрыСохраненияНастройки.Вставить("ТипНастройки", Перечисления.ТипыНастроекОтраженияВМеждународномУчете.ОбщаяПоОбъектуУчета);
		ПараметрыСохраненияНастройки.Вставить("ОбъектУчета", ТекущийОбъектУчета);
		ПараметрыСохраненияНастройки.Вставить("ОбъектНастройки", ДанныеСтроки.ОбъектНастройки);
		ПараметрыСохраненияНастройки.Вставить("Организация", Неопределено);
		ПараметрыСохраненияНастройки.Вставить("МестоУчета", Неопределено);
		ПараметрыСохраненияНастройки.Вставить("СчетУчета", ДанныеСтроки.СчетУчета);
		ПараметрыСохраненияНастройки.Вставить("ТребуетсяНастройка", ДанныеСтроки.ТребуетсяНастройка);
		ПараметрыСохраненияНастройки.Вставить("СчетУчетаДолгосрочный", ДанныеСтроки.СчетУчетаДолгосрочный);
		
		СохранитьНастройкиСервер(ПараметрыСохраненияНастройки);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуНастроекПоОбъектамУчета()
	
	Если Не ЗначениеЗаполнено(ПланСчетов) Или Не ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		ТекущаяСтраницаНастройки = Элементы.СтраницыНастройкиПоОбъектамУчетаНеВыбранаНастройка;
		ТекущаяСтраницаКоманднойПанелиНастройки = Элементы.СтраницаКоманднаяПанельПустая;
	ИначеЕсли Элементы.ДеревоОбъектовФинансовогоУчета.ТекущиеДанные <> Неопределено
		И Элементы.ДеревоОбъектовФинансовогоУчета.ТекущиеДанные.ЭтоГруппа Тогда
		ТекущаяСтраницаНастройки = Элементы.СтраницыНастройкиПоОбъектамУчетаВыбранаГруппа;
		ТекущаяСтраницаКоманднойПанелиНастройки = Элементы.СтраницаКоманднаяПанельПустая;
	ИначеЕсли ИмяСтраницыСНастройками <> "" Тогда
			ТекущаяСтраницаНастройки = Элементы[ИмяСтраницыСНастройками];
			ТекущаяСтраницаКоманднойПанелиНастройки = Элементы[ИмяСтраницыКоманднойПанели];
		Иначе
			ТекущаяСтраницаНастройки = Элементы.СтраницаОбщиеНастройки;
			ТекущаяСтраницаКоманднойПанелиНастройки = Элементы.СтраницаКоманднаяПанельОбщиеНастройки;
		КонецЕсли;
		
		Если Элементы.СтраницыНастройкиПоОбъектамУчета.ТекущаяСтраница <> ТекущаяСтраницаНастройки Тогда
			Элементы.СтраницыНастройкиПоОбъектамУчета.ТекущаяСтраница = ТекущаяСтраницаНастройки;
			Элементы.СтраницыКомандныеПанелиНастройки.ТекущаяСтраница = ТекущаяСтраницаКоманднойПанелиНастройки;
		КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область НастройкиПоКорреспонденциям

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставленияСроковОбращенияВСписке(СтрокиСпискаНастроек, ОписаниеОбъектовУчета, КэшОбъектовУчета, ДтКт)
	
	Для Каждого СтрокаСписка Из СтрокиСпискаНастроек Цикл
		ДанныеСтроки = СтрокаСписка.Значение.Данные;
		ЗаполнитьПредставлениеСрокаОбращенияВСтроке(ДанныеСтроки, ОписаниеОбъектовУчета, КэшОбъектовУчета, ДтКт);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуНастроекПоКорреспонденциям()
		
		Если Не ЗначениеЗаполнено(ПланСчетов) Или Не ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
			ТекущаяСтраницаНастройки = Элементы.СтраницаНастройкиОтраженияКорреспонденцийНеВыбранаНастройка;
		ИначеЕсли (Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.ТекущиеДанные <> Неопределено
				И Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.ТекущиеДанные.ЭтоГруппа)
				И РежимПросмотраНастроекОтраженияКорреспонденций = "СОтборомПоОбъектамУчета" Тогда
		ТекущаяСтраницаНастройки = Элементы.СтраницаНастройкиОтраженияКорреспонденцийВыбранаГруппа;
	Иначе
		ТекущаяСтраницаНастройки = Элементы.СтраницаНастройкиОтраженияКорреспонденций;
	КонецЕсли;
	
	Если Элементы.СтраницыНастройкиОтраженияКорреспонденций.ТекущаяСтраница <> ТекущаяСтраницаНастройки Тогда
		Элементы.СтраницыНастройкиОтраженияКорреспонденций.ТекущаяСтраница = ТекущаяСтраницаНастройки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДеревоОбъектовФинансовогоУчетаПоКорреспонденциямПриАктивизацииСтроки()

	ТекущиеДанные = Элементы.ДеревоОбъектовФинансовогоУчетаПоКорреспонденциям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ОбъектУчета = ТекущийОбъектУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъектУчета = ТекущиеДанные.ОбъектУчета;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиОтраженияКорреспонденций, "ТекущийОбъектУчета", ТекущийОбъектУчета);
	УстановитьТекущуюСтраницуНастроекПоКорреспонденциям();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(СтрокаНастроекПоСчету)

	ДанныеСтроки = НастройкиПоСчету.НайтиПоИдентификатору(СтрокаНастроекПоСчету);
	
	Если ДанныеСтроки.ТипНастройки = ПредопределенноеЗначение("Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ПоКорреспонденции") Тогда
		
		Отбор = ОтборНастройкиПоКорреспонденции();
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеСтроки);
		
		ПараметрыФормы = Новый Структура;
		МассивОтбор = Новый Массив;
		МассивОтбор.Добавить(Отбор);
		КлючЗаписи = Новый("РегистрСведенийКлючЗаписи.НастройкиОтраженияКорреспонденцийВМеждународномУчете", МассивОтбор);
		ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
		ОткрытьФорму("РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.Форма.ФормаЗаписи", 
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		Отбор = ОтборНастройкиСчетовПоОбъектуУчета(ДанныеСтроки.ОбъектУчета, ДанныеСтроки.ОбъектНастройки, ДанныеСтроки.ТипНастройки);
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеСтроки);
		
		ПараметрыФормы = Новый Структура;
		МассивОтбор = Новый Массив;
		МассивОтбор.Добавить(Отбор);
		КлючЗаписи = Новый("РегистрСведенийКлючЗаписи.НастройкиСчетовМеждународногоУчетаПоОбъектам", МассивОтбор);
		ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
	
		ОткрытьФорму("РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам.ФормаЗаписи", 
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПросмотрНастроекПоПлануСчетов

&НаКлиенте
Процедура ОбработчикПланСчетовМеждународныПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ПланСчетовМеждународный.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		НастройкиПоСчету.Очистить();
	Иначе
		ПолучитьНастройкиПоСчету(Элементы.ПланСчетовМеждународный.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиПоСчету(СчетУчета)
	
	НастройкиПоСчету.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.ТипНастройки КАК ТипНастройки,
	|	Настройки.ОбъектУчета КАК ОбъектУчета,
	|	ЛОЖЬ КАК Долгосрочный,
	|	&ПоложениеДтКт КАК Положение,
	|	Настройки.ОбъектНастройки  КАК ОбъектНастройки,
	|	Настройки.Организация  КАК Организация,
	|	Настройки.МестоУчета  КАК МестоУчета
	|ИЗ
	|	РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК Настройки
	|ГДЕ
	|	Настройки.ПланСчетов = &ПланСчетов
	|	И Настройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И Настройки.СчетУчета = &СчетУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Настройки.ТипНастройки КАК ТипНастройки,
	|	Настройки.ОбъектУчета КАК ОбъектУчета,
	|	ИСТИНА КАК Долгосрочный,
	|	&ПоложениеДтКт КАК Положение,
	|	Настройки.ОбъектНастройки  КАК ОбъектНастройки,
	|	Настройки.Организация  КАК Организация,
	|	Настройки.МестоУчета  КАК МестоУчета
	|ИЗ
	|	РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК Настройки
	|ГДЕ
	|	Настройки.ПланСчетов = &ПланСчетов
	|	И Настройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И Настройки.СчетУчетаДолгосрочный = &СчетУчета
	|	И Настройки.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств
	|;
	|
	|////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ПоКорреспонденции) КАК ТипНастройки,
	|	Настройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	Настройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	Настройки.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	Настройки.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ВЫБОР 
	|		КОГДА Настройки.СчетУчетаДт = &СчетУчета И Настройки.СчетУчетаКт = &СчетУчета
	|			ТОГДА &ПоложениеДтКт
	|		ИНАЧЕ &ПоложениеДт
	|	КОНЕЦ КАК Положение,
	|	Настройки.ПорядокПрименения КАК ПорядокПрименения,
	|	Настройки.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	Настройки.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	ВЫРАЗИТЬ(Настройки.Описание КАК СТРОКА(1000)) КАК Описание
	|ИЗ
	|	РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК Настройки
	|ГДЕ
	|	Настройки.ПланСчетов = &ПланСчетов
	|	И Настройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И Настройки.СчетУчетаДт = &СчетУчета
	|	И НЕ Настройки.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|	И (НЕ (Настройки.ДолгосрочныйКт ИЛИ Настройки.ДолгосрочныйДт)
	|		ИЛИ Настройки.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ПоКорреспонденции) КАК ТипНастройки,
	|	Настройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	Настройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	Настройки.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	Настройки.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	&ПоложениеКт КАК Положение,
	|	Настройки.ПорядокПрименения КАК ПорядокПрименения,
	|	Настройки.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	Настройки.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	ВЫРАЗИТЬ(Настройки.Описание КАК СТРОКА(1000)) КАК Описание
	|ИЗ
	|	РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК Настройки
	|ГДЕ
	|	Настройки.ПланСчетов = &ПланСчетов
	|	И Настройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И Настройки.СчетУчетаКт = &СчетУчета
	|	И НЕ Настройки.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|	И НЕ Настройки.СчетУчетаДт = &СчетУчета
	|	И (НЕ (Настройки.ДолгосрочныйКт ИЛИ Настройки.ДолгосрочныйДт)
	|		ИЛИ Настройки.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ПоКорреспонденции) КАК ТипНастройки,
	|	Настройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	Настройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	Настройки.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	Настройки.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	&ПоложениеДт КАК Положение,
	|	Настройки.ПорядокПрименения КАК ПорядокПрименения,
	|	Настройки.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	Настройки.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	ВЫРАЗИТЬ(Настройки.Описание КАК СТРОКА(1000)) КАК Описание
	|ИЗ
	|	РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК Настройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиПоОбъектам
	|		ПО Настройки.ПланСчетов = НастройкиПоОбъектам.ПланСчетов
	|		 И Настройки.НастройкаФормированияПроводок = НастройкиПоОбъектам.НастройкаФормированияПроводок
	|		 И Настройки.ОбъектУчетаДт = НастройкиПоОбъектам.ОбъектУчета
	|		 И Настройки.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|ГДЕ
	|	Настройки.ПланСчетов = &ПланСчетов
	|	И Настройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И ((НастройкиПоОбъектам.СчетУчета = &СчетУчета И НЕ Настройки.ДолгосрочныйДт)
	|		ИЛИ (НастройкиПоОбъектам.СчетУчетаДолгосрочный = &СчетУчета И Настройки.ДолгосрочныйДт
	|			И НастройкиПоОбъектам.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ПоКорреспонденции) КАК ТипНастройки,
	|	Настройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	Настройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	Настройки.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	Настройки.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	&ПоложениеКт КАК Положение,
	|	Настройки.ПорядокПрименения КАК ПорядокПрименения,
	|	Настройки.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	Настройки.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	ВЫРАЗИТЬ(Настройки.Описание КАК СТРОКА(1000)) КАК Описание
	|ИЗ
	|	РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК Настройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиПоОбъектам
	|		ПО Настройки.ПланСчетов = НастройкиПоОбъектам.ПланСчетов
	|		 И Настройки.НастройкаФормированияПроводок = НастройкиПоОбъектам.НастройкаФормированияПроводок
	|		 И Настройки.ОбъектУчетаКт = НастройкиПоОбъектам.ОбъектУчета
	|		 И Настройки.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|ГДЕ
	|	Настройки.ПланСчетов = &ПланСчетов
	|	И Настройки.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И ((НастройкиПоОбъектам.СчетУчета = &СчетУчета И НЕ Настройки.ДолгосрочныйКт)
	|		ИЛИ (НастройкиПоОбъектам.СчетУчетаДолгосрочный = &СчетУчета И Настройки.ДолгосрочныйКт
	|			И НастройкиПоОбъектам.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств))
	|";
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	Запрос.УстановитьПараметр("ПоложениеДтКт", НСтр("ru = 'Дт/Кт';
													|en = 'Dr/Cr'"));
	Запрос.УстановитьПараметр("ПоложениеДт", НСтр("ru = 'Дт';
													|en = 'Dr'"));
	Запрос.УстановитьПараметр("ПоложениеКт", НСтр("ru = 'Кт';
													|en = 'Cr'"));
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаНастроекПоОбъектамУчета = РезультатыЗапроса[0].Выбрать();
	ВыборкаНастроекПоКорреспонденциям = РезультатыЗапроса[1].Выбрать();
	
	ОписаниеОбъектовУчета = РеквизитФормыВЗначение("ДеревоОбъектовФинансовогоУчета");
	КэшОбъектовУчета = Новый Соответствие();
	
	Пока ВыборкаНастроекПоКорреспонденциям.Следующий() Цикл
		НоваяСтрока = НастройкиПоСчету.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНастроекПоКорреспонденциям);
		Если ИспользоватьВыделениеДолгосрочныхАктивовОбязательств Тогда
			ЗаполнитьПредставлениеСрокаОбращенияВСтроке(НоваяСтрока, ОписаниеОбъектовУчета, КэшОбъектовУчета, "Дт");
			ЗаполнитьПредставлениеСрокаОбращенияВСтроке(НоваяСтрока, ОписаниеОбъектовУчета, КэшОбъектовУчета, "Кт");
		КонецЕсли;	
	КонецЦикла;
	
	Пока ВыборкаНастроекПоОбъектамУчета.Следующий() Цикл
		Если ОписаниеОбъектовУчета.Строки.Найти(ВыборкаНастроекПоОбъектамУчета.ОбъектУчета, "ОбъектУчета", Истина) <> Неопределено Тогда
			НоваяСтрока = НастройкиПоСчету.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНастроекПоОбъектамУчета);
			Если ИспользоватьВыделениеДолгосрочныхАктивовОбязательств Тогда
				ЗаполнитьПредставлениеСрокаОбращенияВСтроке(НоваяСтрока, ОписаниеОбъектовУчета, КэшОбъектовУчета, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСрокаОбращенияВСтроке(СтрокаНастроек, ОписаниеОбъектовУчета, КэшОбъектовУчета, ДтКт)
	
	ВыделениеДолгосрочныхАктивовОбязательств = КэшОбъектовУчета[СтрокаНастроек["ОбъектУчета" + ДтКт]];
	
	Если ВыделениеДолгосрочныхАктивовОбязательств = Неопределено Тогда
		Если ТипЗнч(ОписаниеОбъектовУчета) = Тип("ДеревоЗначений") Тогда
			ОписаниеОбъектаУчета = ОписаниеОбъектовУчета.Строки.Найти(СтрокаНастроек["ОбъектУчета" + ДтКт], "ОбъектУчета", Истина);
		Иначе
			ОписаниеОбъектаУчета = ОписаниеОбъектовУчета.Найти(СтрокаНастроек["ОбъектУчета" + ДтКт], "ОбъектУчета");
		КонецЕсли;
		Если ОписаниеОбъектаУчета = Неопределено Тогда
			ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
		Иначе
			ВыделениеДолгосрочныхАктивовОбязательств = ОписаниеОбъектаУчета.ВыделениеДолгосрочныхАктивовОбязательств;
		КонецЕсли;
		КэшОбъектовУчета.Вставить(СтрокаНастроек["ОбъектУчета" + ДтКт], ВыделениеДолгосрочныхАктивовОбязательств);
	КонецЕсли;
	
	Если НЕ ВыделениеДолгосрочныхАктивовОбязательств Тогда
		СтрокаНастроек["ПредставлениеСрокОбращения" + ДтКт] = "";
	ИначеЕсли СтрокаНастроек["Долгосрочный" + ДтКт] Тогда
		СтрокаНастроек["ПредставлениеСрокОбращения" + ДтКт] = НСтр("ru = 'Долгосрочный';
																	|en = 'Long-term'");
	Иначе
		СтрокаНастроек["ПредставлениеСрокОбращения" + ДтКт] = НСтр("ru = 'Краткосрочный';
																	|en = 'Short-term'");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
