#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПланСчетов = Параметры.ПланСчетов;
	ОбъектУчета = Параметры.ОбъектУчета;
	НастройкаФормированияПроводок = Параметры.НастройкаФормированияПроводок;
	ИсточникДанных = Параметры.ИсточникДанных;
	
	РегистрНакопления = Метаданные.РегистрыНакопления.Найти(ИсточникДанных);
	Если РегистрНакопления <> Неопределено Тогда
		ИсточникДанныхПредставление = РегистрНакопления.Синоним;
	Иначе
		Элементы.ГруппаДоступныеПоляРегистра.Видимость = Ложь;
	КонецЕсли;
	
	Обработки.НастройкаСчетовМеждународногоУчета.ИнициализироватьКомпоновщикНастроек(ЭтотОбъект, ИсточникДанных);
	
	ОтборНастроек = 
		Обработки.НастройкаСчетовМеждународногоУчета.ОтборНастроекЗаполненияСубконто(
			ПланСчетов, 
			НастройкаФормированияПроводок,
			ОбъектУчета);
				
	СостояниеНастройкиЗаполненияСубконто.Загрузить(
		Обработки.НастройкаСчетовМеждународногоУчета.НастройкиЗаполненияСубконто(
			ОтборНастроек,
			КомпоновщикНастроек));
			
	Для каждого СтрокаСостоянияНастройки Из СостояниеНастройкиЗаполненияСубконто Цикл
		ЗаполнитьПредставлениеВСтрокеСостоянияНастройки(СтрокаСостоянияНастройки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетаУчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СостояниеНастройкиЗаполненияСубконтоСчетУчета Тогда
		ТекущиеДанные = СостояниеНастройкиЗаполненияСубконто.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПоказатьЗначение(, ТекущиеДанные.СчетУчета);
	
	ИначеЕсли Поле = Элементы.СостояниеНастройкиЗаполненияСубконтоПредставление Тогда
		
		ТеущиеДанные = СостояниеНастройкиЗаполненияСубконто.НайтиПоИдентификатору(Элементы.СостояниеНастройкиЗаполненияСубконто.ТекущаяСтрока);
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ПланСчетов", ПланСчетов);
		ПараметрыОткрытияФормы.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
		ПараметрыОткрытияФормы.Вставить("ОбъектУчета", ОбъектУчета);
		ПараметрыОткрытияФормы.Вставить("СчетУчета",  ТеущиеДанные.СчетУчета);
		ПараметрыОткрытияФормы.Вставить("ИсточникДанных",  ИсточникДанных);
		
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.СостояниеНастройкиЗаполненияСубконто.ТекущаяСтрока);
		ОбработкаОповещения = Новый ОписаниеОповещения("ПриОкончанииНастройкиЗаполненияСубконто", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.НастройкаСчетовМеждународногоУчета.Форма.ФормаЗаполненияСубконтоНаСчете", 
			ПараметрыОткрытияФормы,
			ЭтотОбъект,
			,,,
			ОбработкаОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОкончанииНастройкиЗаполненияСубконто(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСостояниеНастройкиЗаполненияСубконтоВСтроке(ДополнительныеПараметры.ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеНастройкиЗаполненияСубконтоВСтроке(ИдентификаторСтроки = Неопределено)
	
	ДанныеСтрокиСостояния  = СостояниеНастройкиЗаполненияСубконто.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОтборНастроек = 
		Обработки.НастройкаСчетовМеждународногоУчета.ОтборНастроекЗаполненияСубконто(
			ПланСчетов, 
			НастройкаФормированияПроводок,
			ОбъектУчета,
			ДанныеСтрокиСостояния.СчетУчета);
	ТаблицаНастроек =
		Обработки.НастройкаСчетовМеждународногоУчета.НастройкиЗаполненияСубконто(
			ОтборНастроек,
			КомпоновщикНастроек);
	СтрокаТаблицаНастроек = ТаблицаНастроек[0];
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиСостояния, СтрокаТаблицаНастроек);
	ЗаполнитьПредставлениеВСтрокеСостоянияНастройки(ДанныеСтрокиСостояния);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеВСтрокеСостоянияНастройки(СтрокаСостоянияНастройки)
	Если СтрокаСостоянияНастройки.ПользовательскаяНастройка Тогда
		Если СтрокаСостоянияНастройки.ЕстьПроблемыЗаполненияСубконто Тогда
			СтрокаСостоянияНастройки.Представление = НСтр("ru = 'Пользовательская настройка (есть ошибки)';
															|en = 'User setting (there are errors)'");
		Иначе
			СтрокаСостоянияНастройки.Представление = НСтр("ru = 'Пользовательская настройка';
															|en = 'User setting'");
		КонецЕсли;
	Иначе
		Если СтрокаСостоянияНастройки.ЕстьПроблемыЗаполненияСубконто Тогда
			СтрокаСостоянияНастройки.Представление = НСтр("ru = 'Требуется пользовательская настройка';
															|en = 'User setting is required'");
		Иначе
			СтрокаСостоянияНастройки.Представление = НСтр("ru = 'Автоматически из регистра';
															|en = 'Automatically from register'");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеНастройкиЗаполненияСубконтоПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеНастройкиЗаполненияСубконто.ЕстьПроблемыЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеНастройкиЗаполненияСубконтоПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеНастройкиЗаполненияСубконто.ЕстьПроблемыЗаполненияСубконто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	//
	
КонецПроцедуры

#КонецОбласти
