#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет состав документов и хозяйственных операций, доступных для отображения в рабочем месте.
//
// Параметры:
//  ОтборХозяйственныеОперации		 - СписокЗначений - список значений типа ПеречислениеСсылка.ХозяйственныеОперации
//  ОтборТипыДокументов				 - СписокЗначений - список значений типа СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КлючНазначенияИспользования		 - Строка - ключ рабочего места для которого вызывается функция.
// 
// Возвращаемое значение:
//   См. ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы
//
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования) Экспорт
	
	ХозяйственныеОперацииИДокументы = ХозяйственныеОперацииИДокументы();
	
	Если КлючНазначенияИспользования = "АвансовыеОтчеты" Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ДоступныеХозяйственныеОперацииИДокументы = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНастроек);
	
	Возврат ДоступныеХозяйственныеОперацииИДокументы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ХозяйственныеОперацииИДокументы()
	
	ХозяйственныеОперацииИДокументы = ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы();
	
	// АвансовыйОтчет
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПрочиеРасходыПодотчетногоЛица;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.АвансовыйОтчет");
	Строка.ПолноеИмяДокумента           = "Документ.АвансовыйОтчет";
	Строка.ИспользуютсяСтатусы          = Истина;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Авансовые отчеты';
												|en = 'Expense reports'");
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ЖурналДокументовАвансовыеОтчеты";
	
	// ПриобретениеТоваровУслуг
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
	Строка.ПолноеИмяДокумента           = "Документ.ПриобретениеТоваровУслуг";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Авансовые отчеты';
												|en = 'Expense reports'");
	
	//++ Локализация

	//++ НЕ УТ

	// ПоступлениеДенежныхДокументов
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов");
	Строка.ПолноеИмяДокумента           = "Документ.ПоступлениеДенежныхДокументов";
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Авансовые отчеты';
												|en = 'Expense reports'");
	//-- НЕ УТ

	//-- Локализация
	
	Возврат ХозяйственныеОперацииИДокументы;
	
КонецФункции

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	Результат = Неопределено;
	
	МассивСтрок = Новый Массив;
	
	Организация = Параметры.Организация;
	ПодотчетноеЛицо = Параметры.ПодотчетноеЛицо;
	
	ЦветНезаполненный = ЦветаСтиля.НезаполненноеПолеТаблицы;
	ЦветЗаполненный = ЦветаСтиля.ГиперссылкаЦвет;
	
	ТекстГиперссылкиПоАвансам = НСтр("ru = 'Авансы и закупки';
									|en = 'Advances and purchases'");
	ЕстьАвансы = ЕстьАвансыКОформлению(Организация, ПодотчетноеЛицо);
	ГиперссылкаПоАвансам = Новый ФорматированнаяСтрока(
		ТекстГиперссылкиПоАвансам,, ?(ЕстьАвансы, ЦветЗаполненный, ЦветНезаполненный),, "СтраницаРаспоряженияНаОформление");
	МассивСтрок.Добавить(ГиперссылкаПоАвансам);
	
	Если МассивСтрок.Количество() > 0 Тогда
		Результат = Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьАвансыКОформлению(Организация = Неопределено, ПодотчетноеЛицо = Неопределено)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаАвансыКОформлению(Организация, ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", ПодотчетноеЛицо);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ТекстЗапросаАвансыКОформлению(Организация = Неопределено, ПодотчетноеЛицо = Неопределено)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваУПодотчетныхЛиц.ПодотчетноеЛицо КАК ПодотчетноеЛицо
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(, &УсловиеОтбора) КАК ДенежныеСредстваУПодотчетныхЛиц
	|ГДЕ
	|	ДенежныеСредстваУПодотчетныхЛиц.КОтчетуОстаток <> 0
	|	ИЛИ ДенежныеСредстваУПодотчетныхЛиц.СуммаЗакупкиОстаток <> 0
	|";
	
	УсловиеОтбора = "ИСТИНА";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = УсловиеОтбора + "
		|И Организация = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодотчетноеЛицо) Тогда
		УсловиеОтбора = УсловиеОтбора + "
		|И ПодотчетноеЛицо = &ПодотчетноеЛицо";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Результат = Неопределено;
	
	МассивСтрок = Новый Массив;
	
	Организация = Параметры.Организация;
	ПодотчетноеЛицо = Параметры.ПодотчетноеЛицо;
	
	ЦветНезаполненный = ЦветаСтиля.НезаполненноеПолеТаблицы;
	ЦветЗаполненный = ЦветаСтиля.ГиперссылкаЦвет;
	
	ТекстГиперссылкиАвансовыеОтчеты = НСтр("ru = 'Авансовые отчеты';
											|en = 'Expense reports'");
	ГиперссылкаАвансовыеОтчеты = Новый ФорматированнаяСтрока(
		ТекстГиперссылкиАвансовыеОтчеты,, ЦветЗаполненный,, "Обработка.ЖурналДокументовАвансовыеОтчеты.Форма.СписокДокументов");
	МассивСтрок.Добавить(ГиперссылкаАвансовыеОтчеты);
	МассивСтрок.Добавить("; ");
	
	ТекстГиперссылкиДокументыЗакупки = НСтр("ru = 'Документы закупки';
											|en = 'Purchase documents'");
	ЕстьДокументыЗакупки = ЕстьДокументыЗакупки(Организация, ПодотчетноеЛицо);
	ГиперссылкаДокументыЗакупки = Новый ФорматированнаяСтрока(
		ТекстГиперссылкиДокументыЗакупки,, ?(ЕстьДокументыЗакупки, ЦветЗаполненный, ЦветНезаполненный),, "Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов");
	МассивСтрок.Добавить(ГиперссылкаДокументыЗакупки);
	МассивСтрок.Добавить("; ");
	
	Если МассивСтрок.Количество() > 0 Тогда
		Результат = Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьДокументыЗакупки(Организация, ПодотчетноеЛицо)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДокументыЗакупки(Организация, ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", ПодотчетноеЛицо);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ТекстЗапросаДокументыЗакупки(Организация = Неопределено, ПодотчетноеЛицо = Неопределено)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваУПодотчетныхЛиц.Регистратор КАК ПриобретениеТоваровУслуг
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваУПодотчетныхЛиц
	|ГДЕ
	|	ДенежныеСредстваУПодотчетныхЛиц.СуммаЗакупки <> 0
	|	И &УсловиеОтбора
	|	И ДенежныеСредстваУПодотчетныхЛиц.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|";
	
	УсловиеОтбора = "ИСТИНА";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = УсловиеОтбора + "
		|И Организация = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодотчетноеЛицо) Тогда
		УсловиеОтбора = УсловиеОтбора + "
		|И ПодотчетноеЛицо = &ПодотчетноеЛицо";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли