#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокМаркируемойПродукции();
	
	РедактированиеАвтоматическойОтправкиДанных = ПравоДоступа(
		"Редактирование", Метаданные.Константы.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП);
	
	РедактированиеСрокаХранения = ПравоДоступа(
		"Редактирование", Метаданные.Константы.СрокХраненияИспользованныхКодовМаркировки);
	
	РедактированиеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки = ПравоДоступа(
		"Редактирование", Метаданные.Константы.ИспользоватьАвтоматическоеУдалениеНеиспользованныхКодовМаркировкиИСМП);
		
	РедактированиеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки = ПравоДоступа(
		"Редактирование", Метаданные.Константы.ИспользоватьАвтоматическуюЗагрузкуСведенийОбОтклоненияхИСМП);
	
	УдалятьКодыМаркировкиИзПула = НаборКонстант.СрокХраненияИспользованныхКодовМаркировки > 0;
	
	// Обновление состояния элементов
	УстановитьДоступность();
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЕдиницаИзмеренияКилограммИСПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЛитрИСПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСканированияКодовМаркировкиНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиСканированияКодовМаркировки",,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФоновуюПроверкуДокументовГИСМТПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюПроверкуГИСМТПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьКодыМаркировкиИзПулаПриИзменении(Элемент)
	
	Если НЕ УдалятьКодыМаркировкиИзПула Тогда
		НаборКонстант.СрокХраненияИспользованныхКодовМаркировки = 0;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элементы.СрокХраненияИспользованныхКодовМаркировки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияИспользованныхКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеУдалениеНеиспользованныхКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыСТестовымКонтуромИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокМаркируемаяПродукция

&НаКлиенте
Процедура СписокМаркируемаяПродукцияДатаКонтрольПроизводстваПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокМаркируемаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ВестиУчетПродукции
		И ТекущиеДанные.ДатаКонтрольПроизводства <> '00010101' Тогда
		ТекущиеДанные.ВестиУчетПродукции = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаркируемаяПродукцияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьФоновоеОбновлениеНастроекРазрешительногоРежима = Ложь;
	
	Результат = СписокМаркируемаяПродукцияПередОкончаниемРедактированияНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Отказ, ЗапуститьФоновоеОбновлениеНастроекРазрешительногоРежима);
	Если Отказ И Элемент.ТекущийЭлемент = Элементы.СписокМаркируемаяПродукцияВидПродукции Тогда
		ТекущиеДанные.ВестиУчетПродукции = Ложь;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	ОбновитьИнтерфейс = Истина;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
	Если ЗапуститьФоновоеОбновлениеНастроекРазрешительногоРежима Тогда
		
		РезультатОбновления = ИнтеграцияИСМПВызовСервера.ЗапуститьЗаполнениеНастроекРазрешительногоРежима(УникальныйИдентификатор);
		ОбработатьРезультатОбновленияНастроек(РезультатОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаОбменаИСМП(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаСертификатовДляАвтоматическогоОбменаИС",,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтветственныхЗаАктуализациюТокеновАвторизации(Команда)
	
	ОткрытьФорму("Справочник.ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтправкуПолучениеИСМП(Команда)
	
	Если Не РедактированиеАвтоматическойОтправкиДанных Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОтправкиПолученияИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗагрузкуСведенийОбОтклонениях(Команда)
	
	Если Не РедактированиеАвтоматическойОтправкиДанных Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеЗагрузкиСведенийОбОтклоненияхИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеЗагрузкиСведенийОбОтклонениях);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОчисткуПулаКодовМаркировкиИСМП(Команда)
	
	Если Не РедактированиеСрокаХранения Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОчисткиПулаКодовМаркировкиИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОчисткиПулаКодовИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПроверкуСтатусовДокументовГИСМТ(Команда)
		
	Если Не РедактированиеАвтоматическойОтправкиДанных Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеПроверкаДокументовВГИСМТ", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеПроверкаСтатусовДокументовВГИСМТ);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическоеУдалениеНеиспользованныхКодовМаркировки(Команда)
	
	Если Не РедактированиеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКСУЗ(Команда)
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаСУЗ.ФормаСписка", , ЭтотОбъект);

КонецПроцедуры


&НаКлиенте
Процедура НастройкиПодключенияКЛокальномуМодулюРазрешительногоРежима(Команда)
	
	ОткрытьФорму("РегистрСведений.НастройкиПодключенияЛокальныхМодулейИСМП.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// недоступность полей установки дат для выключенных товарных групп
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияВидПродукции.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаЗапретПродажиНемаркированныхОстатков.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаКонтрольВыводИзОборота.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаКонтрольПроизводства.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаОптКонтрольОСУ.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаОптКонтрольПоштучно.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаРозницаУведомительныйРежим.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаОбязательногоВключенияРазрешительногоРежима.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаОбязательногоВключенияЛокальнойПроверкиРазрешительногоРежима.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаркируемаяПродукция.ВестиУчетПродукции");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// запрет редактирования даты действия ОСУ для видов продукции, не поддерживающих ОСУ
	СписокВидовПродукцийПоддерживающихОСУ = Новый СписокЗначений();
	СписокВидовПродукцийПоддерживающихОСУ.ЗагрузитьЗначения(ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииОбъемноСортовогоУчета());
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаОптКонтрольОСУ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаркируемаяПродукция.ВидПродукции");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокВидовПродукцийПоддерживающихОСУ;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = 'не применимо';
																			|en = 'не применимо'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// запрет редактирования даты контроля перемещения между МОД, не поддерживающих перемещение между МОД
	СписокВидовПродукцийПоддерживающихПеремещениеМеждуМОД = Новый СписокЗначений();
	СписокВидовПродукцийПоддерживающихПеремещениеМеждуМОД.ЗагрузитьЗначения(ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ВидыПродукцииВнутреннегоПеремещенияМеждуМОД());
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаПрослеживаемостьПеремещенияМеждуМОД.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаркируемаяПродукция.ВидПродукции");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокВидовПродукцийПоддерживающихПеремещениеМеждуМОД;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = 'не применимо';
																			|en = 'не применимо'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// отображение пустых дат контролей и действующих дат
	СоответствиеНастроекДатИЭлементовФормы = Новый Соответствие();
	СоответствиеНастроекДатИЭлементовФормы.Вставить("СписокМаркируемаяПродукция.ДатаКонтрольПроизводства", Элементы.СписокМаркируемаяПродукцияДатаКонтрольПроизводства.Имя);
	СоответствиеНастроекДатИЭлементовФормы.Вставить("СписокМаркируемаяПродукция.ДатаКонтрольВыводИзОборота", Элементы.СписокМаркируемаяПродукцияДатаКонтрольВыводИзОборота.Имя);
	СоответствиеНастроекДатИЭлементовФормы.Вставить("СписокМаркируемаяПродукция.ДатаЗапретПродажиНемаркированныхОстатков", Элементы.СписокМаркируемаяПродукцияДатаЗапретПродажиНемаркированныхОстатков.Имя);
	СоответствиеНастроекДатИЭлементовФормы.Вставить("СписокМаркируемаяПродукция.ДатаРозницаУведомительныйРежим", Элементы.СписокМаркируемаяПродукцияДатаРозницаУведомительныйРежим.Имя);
	СоответствиеНастроекДатИЭлементовФормы.Вставить("СписокМаркируемаяПродукция.ДатаРозницаРазрешительныйРежим", Элементы.СписокМаркируемаяПродукцияДатаОбязательногоВключенияРазрешительногоРежима.Имя);
	СоответствиеНастроекДатИЭлементовФормы.Вставить("СписокМаркируемаяПродукция.ДатаРозницаЛокальныйРазрешительныйРежим", Элементы.СписокМаркируемаяПродукцияДатаОбязательногоВключенияЛокальнойПроверкиРазрешительногоРежима.Имя);
	СоответствиеНастроекДатИЭлементовФормы.Вставить("СписокМаркируемаяПродукция.ДатаОптКонтрольПоштучно", Элементы.СписокМаркируемаяПродукцияДатаОптКонтрольПоштучно.Имя);
	СоответствиеНастроекДатИЭлементовФормы.Вставить("СписокМаркируемаяПродукция.ДатаПрослеживаемостьПеремещенияМеждуМОД", Элементы.СписокМаркируемаяПродукцияДатаПрослеживаемостьПеремещенияМеждуМОД.Имя);
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Для Каждого КлючИЗначение Из СоответствиеНастроекДатИЭлементовФормы Цикл
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(КлючИЗначение.Значение);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = 'нет данных';
																				|en = 'нет данных'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(КлючИЗначение.Значение);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = 'действует';
																				|en = 'действует'"));
		
	КонецЦикла;
	
	// надпись действует для ОСУ
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаОптКонтрольОСУ.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаркируемаяПродукция.ДатаОптКонтрольОСУ");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаркируемаяПродукция.ДатаОптКонтрольОСУ");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = 'действует';
																			|en = 'действует'"));
	
	// надпись действует для перемещения между МОД
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаркируемаяПродукцияДатаПрослеживаемостьПеремещенияМеждуМОД.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаркируемаяПродукция.ДатаПрослеживаемостьПеремещенияМеждуМОД");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаркируемаяПродукция.ДатаПрослеживаемостьПеремещенияМеждуМОД");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = 'действует';
																			|en = 'действует'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМаркируемойПродукции()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиУчетаМаркируемойПродукции.ВестиУчетПродукции ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ НастройкиУчетаМаркируемойПродукции.ВестиУчетПродукции
	|	КОНЕЦ КАК ВестиУчетПродукции,
	|	ВидыПродукции.Ссылка КАК ВидПродукции,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВидыПродукции.Ссылка) КАК ВидПродукцииПредставление,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаКонтрольПроизводства, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаКонтрольПроизводства,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаКонтрольВыводИзОборота, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаКонтрольВыводИзОборота,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаОптКонтрольПоштучно, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаОптКонтрольПоштучно,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаОптКонтрольОСУ, ДАТАВРЕМЯ(0001, 01, 01)) КАК ДатаОптКонтрольОСУ,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаРозницаУведомительныйРежим, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаРозницаУведомительныйРежим,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаЗапретПродажиНемаркированныхОстатков, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаЗапретПродажиНемаркированныхОстатков,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаРозницаРазрешительныйРежим, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаРозницаРазрешительныйРежим,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаРозницаЛокальныйРазрешительныйРежим, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаРозницаЛокальныйРазрешительныйРежим,
	|	ЕСТЬNULL(НастройкиУчетаМаркируемойПродукции.ДатаПрослеживаемостьПеремещенияМеждуМОД, ДАТАВРЕМЯ(0001, 01, 01)) КАК
	|		ДатаПрослеживаемостьПеремещенияМеждуМОД
	|ИЗ
	|	Перечисление.ВидыПродукцииИС КАК ВидыПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукции
	|		ПО ВидыПродукции.Ссылка = НастройкиУчетаМаркируемойПродукции.ВидПродукции,
	|	Константы КАК Константы
	|ГДЕ
	|	ВидыПродукции.Ссылка В (&ВидыПродукцииИСМП)");
	
	Запрос.УстановитьПараметр("ВидыПродукцииИСМП", ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина));
	
	ДоступныеВидыПродукции = Запрос.Выполнить().Выгрузить();
	ДоступныеВидыПродукции.Сортировать("ВидПродукцииПредставление Возр");
	
	СписокМаркируемаяПродукция.Загрузить(ДоступныеВидыПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОтправкиПолученияИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОтправкиПолученияИСМП = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ОтправкаПолучениеДанныхИСМП", РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеПроверкаДокументовВГИСМТ(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеПроверкаСтатусовДокументовВГИСМТ = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ПроверкаСтатусовДокументовВГИСМТ", РасписаниеПроверкаСтатусовДокументовВГИСМТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеЗагрузкиСведенийОбОтклоненияхИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеЗагрузкиСведенийОбОтклонениях = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ЗагрузкаСведенийОбОтклоненияхИСМП", РасписаниеЗагрузкиСведенийОбОтклонениях);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОчисткиПулаКодовМаркировкиИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОчисткиПулаКодовИСМП = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ОчисткаПулаКодовМаркировкиИСМП", РасписаниеОчисткиПулаКодовИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("УдалениеНеиспользованныхКодовМаркировкиИСМП",
		РасписаниеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки);
	
КонецПроцедуры

&НаСервере
Функция СписокМаркируемаяПродукцияПередОкончаниемРедактированияНаСервере(ИдентификаторСтроки, Отказ, ЗапуститьФоновоеОбновлениеНастроекРазрешительногоРежима)
	
	ТекущиеДанные = СписокМаркируемаяПродукция.НайтиПоИдентификатору(ИдентификаторСтроки);
	ЗапуститьФоновоеОбновлениеНастроекРазрешительногоРежима = Ложь;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.ЗаписатьНастройкуУчетаВидаПродукции(ТекущиеДанные, Отказ, ЗапуститьФоновоеОбновлениеНастроекРазрешительногоРежима);

		Если НЕ Отказ Тогда
			Возврат ПриИзмененииРеквизитаСервер(Элементы.СписокМаркируемаяПродукция.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина И Использование);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОтправкаПолучениеДанныхИСМП");
	ЗаданиеОтправкаПолучениеДанныхИСМП = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОтправкиПолученияИСМП = ЗаданиеОтправкаПолучениеДанныхИСМП.Расписание;
	
	Элементы.ОтправкаПолучениеДанныхИСМП.Доступность = ЗаданиеОтправкаПолучениеДанныхИСМП.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОтправкаПолучениеДанныхИСМП, Элементы.ОтправкаПолучениеДанныхИСМП);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ПроверкаСтатусовДокументовВГИСМТ");
	ЗаданиеПроверкаСтатусовДокументовВГИСМТ = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеПроверкаСтатусовДокументовВГИСМТ = ЗаданиеПроверкаСтатусовДокументовВГИСМТ.Расписание;
	
	Элементы.ПроверкаСтатусовДокументовВГИСМТ.Доступность = ЗаданиеПроверкаСтатусовДокументовВГИСМТ.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеПроверкаСтатусовДокументовВГИСМТ, Элементы.ПроверкаСтатусовДокументовВГИСМТ);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОчисткаПулаКодовМаркировкиИСМП");
	ЗаданиеОчисткаПулаКодовМаркировкиИСМП = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОчисткиПулаКодовИСМП = ЗаданиеОчисткаПулаКодовМаркировкиИСМП.Расписание;
	
	Элементы.ОчисткаПулаКодовМаркировкиИСМП.Доступность = ЗаданиеОчисткаПулаКодовМаркировкиИСМП.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОчисткаПулаКодовМаркировкиИСМП, Элементы.ОчисткаПулаКодовМаркировкиИСМП);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "УдалениеНеиспользованныхКодовМаркировкиИСМП");
	Задание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки = Задание.Расписание;
	
	Элементы.УдалениеНеиспользованныхКодовМаркировкиИСМП.Доступность = Задание.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(Задание, Элементы.УдалениеНеиспользованныхКодовМаркировкиИСМП);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ЗагрузкаСведенийОбОтклоненияхИСМП");
	Задание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеЗагрузкиСведенийОбОтклонениях = Задание.Расписание;
	
	Элементы.ЗагрузкаСведенийОбОтклоненияхИСМП.Доступность = Задание.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(Задание, Элементы.ЗагрузкаСведенийОбОтклоненияхИСМП);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Перем ТекстРасписания, РасписаниеАктивно;
	
	ОбщегоНазначенияИС.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно);
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	СохранитьЗначениеКонстанты(КонстантаИмя);
	
	Если РеквизитПутьКДанным = Элементы.СписокМаркируемаяПродукция.Имя Тогда
		ЗначениеВестиУчетМаркируемойПродукцииИСМП = Ложь;
		Для Каждого СтрокаВидПродукции Из СписокМаркируемаяПродукция Цикл
			Если СтрокаВидПродукции.ВестиУчетПродукции Тогда
				ЗначениеВестиУчетМаркируемойПродукцииИСМП = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеВестиУчетМаркируемойПродукцииИСМП <> Константы.ВестиУчетМаркируемойПродукцииИСМП.Получить() Тогда
			Константы.ВестиУчетМаркируемойПродукцииИСМП.Установить(ЗначениеВестиУчетМаркируемойПродукцииИСМП);
		КонецЕсли;
		Если Не ЗначениеВестиУчетМаркируемойПродукцииИСМП Тогда
			ИзменитьИспользованиеЗадания("ОтправкаПолучениеДанныхИСМП", Ложь);
			СохранитьЗначениеКонстанты("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП", Ложь);
			
			ИзменитьИспользованиеЗадания("ОчисткаПулаКодовМаркировкиИСМП", Ложь);
			СохранитьЗначениеКонстанты("СрокХраненияИспользованныхКодовМаркировки", 0);
			УдалятьКодыМаркировкиИзПула = Ложь;
			
			ИзменитьИспользованиеЗадания("УдалениеНеиспользованныхКодовМаркировкиИСМП", Ложь);
			СохранитьЗначениеКонстанты("ИспользоватьАвтоматическоеУдалениеНеиспользованныхКодовМаркировкиИСМП", Ложь);
			
			ИзменитьИспользованиеЗадания("ПроверкаСтатусовДокументовВГИСМТ", Ложь);
			СохранитьЗначениеКонстанты("ИспользоватьПроверкуСтатусовДокументовВГИСМТ", Ложь);
			
			ИзменитьИспользованиеЗадания("ЗагрузкаСведенийОбОтклоненияхИСМП", Ложь);
			СохранитьЗначениеКонстанты("ИспользоватьАвтоматическуюЗагрузкуСведенийОбОтклоненияхИСМП", Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП" Тогда
		ИзменитьИспользованиеЗадания("ОтправкаПолучениеДанныхИСМП", НаборКонстант.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП);
	КонецЕсли;
	
	Если КонстантаИмя = "СрокХраненияИспользованныхКодовМаркировки" Тогда
		ИзменитьИспользованиеЗадания("ОчисткаПулаКодовМаркировкиИСМП", НаборКонстант.СрокХраненияИспользованныхКодовМаркировки);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьАвтоматическоеУдалениеНеиспользованныхКодовМаркировкиИСМП" Тогда
		ИзменитьИспользованиеЗадания("УдалениеНеиспользованныхКодовМаркировкиИСМП", НаборКонстант.ИспользоватьАвтоматическоеУдалениеНеиспользованныхКодовМаркировкиИСМП);
	КонецЕсли;
		
	Если КонстантаИмя = "ИспользоватьПроверкуСтатусовДокументовВГИСМТ" Тогда
		ИзменитьИспользованиеЗадания("ПроверкаСтатусовДокументовВГИСМТ", НаборКонстант.ИспользоватьПроверкуСтатусовДокументовВГИСМТ);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьАвтоматическуюЗагрузкуСведенийОбОтклоненияхИСМП" Тогда
		ИзменитьИспользованиеЗадания("ЗагрузкаСведенийОбОтклоненияхИСМП", НаборКонстант.ИспользоватьАвтоматическуюЗагрузкуСведенийОбОтклоненияхИСМП);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеКонстанты(КонстантаИмя, Знач КонстантаЗначение = Неопределено)
	
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		Если КонстантаЗначение = Неопределено Тогда
			КонстантаЗначение = НаборКонстант[КонстантаИмя];
		КонецЕсли;
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
			Если КонстантаЗначение <> Неопределено Тогда
				НаборКонстант[КонстантаИмя] = КонстантаЗначение;
			КонецЕсли;
		КонецЕсли;
		
		СобытияФормИСПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(ЭтотОбъект, КонстантаИмя, КонстантаЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	ВестиУчетМаркируемойПродукцииИСМП = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	Элементы.ГруппаКонтрольСтатусовКодовМаркировки.Доступность = ВестиУчетМаркируемойПродукцииИСМП;
	
	Элементы.ГруппаНастройкиСУЗ.Доступность                 = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.ГруппаНастройкиОбмена.Доступность              = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.ГруппаНастройкиРегламентныхЗаданий.Доступность = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.ЕдиницаИзмеренияКилограммИС.Доступность        = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.ЕдиницаИзмеренияЛитрИС.Доступность             = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.РежимРаботыСТестовымКонтуромИСМП.Доступность   = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.ГруппаНастройкиПодключенияЛМЧЗ.Доступность     = ВестиУчетМаркируемойПродукцииИСМП;
	
	Элементы.НастроитьОтветственныхЗаАктуализациюТокеновАвторизации.Доступность = ВестиУчетМаркируемойПродукцииИСМП;
	Элементы.СрокХраненияИспользованныхКодовМаркировки.Доступность = УдалятьКодыМаркировкиИзПула И ВестиУчетМаркируемойПродукцииИСМП;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ГруппаНастройкиОбмена.Видимость              = Ложь;
		Элементы.ГруппаНастройкиРегламентныхЗаданий.Видимость = Ложь;
	Иначе
		
		Элементы.ГруппаНастройкиРегламентногоЗаданияОбмена.ТолькоПросмотр = Не РедактированиеАвтоматическойОтправкиДанных;
		Элементы.ГруппаНастройкиРегламентногоЗаданияОчисткиПула.ТолькоПросмотр = Не РедактированиеСрокаХранения;
		Элементы.ГруппаАвтоматическоеУдалениеНеиспользованныхКодовМаркировки.ТолькоПросмотр =
			Не РедактированиеАвтоматическогоУдаленияНеиспользованныхКодовМаркировки;
		
		УстановитьНастройкиЗаданий();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОбновленияНастроек(РезультатОбмена) Экспорт
	
	Если РезультатОбмена <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Выполняется первичная настройка для работы с разрешительным режимом';
															|en = 'Выполняется первичная настройка для работы с разрешительным режимом'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания       = Истина;
		ПараметрыОжидания.ВыводитьСообщения          = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РезультатОбмена,
			Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ЭтотОбъект),
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметрыДлительнойОперации) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Если ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого СообщениеПользователю Из Результат.Сообщения Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОбмена = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если РезультатОбмена.ЕстьОшибки Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементов(Форма)
	
	Элементы                                         = Форма.Элементы;
	ВидимостьДатыПрослеживаемостьПеремещенияМеждуМОД = Ложь;
	
	Для Каждого СтрокаДанных Из Форма.СписокМаркируемаяПродукция Цикл
		Если СтрокаДанных.ВестиУчетПродукции
			И ЗначениеЗаполнено(СтрокаДанных.ДатаПрослеживаемостьПеремещенияМеждуМОД) Тогда
			ВидимостьДатыПрослеживаемостьПеремещенияМеждуМОД = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СписокМаркируемаяПродукцияДатаПрослеживаемостьПеремещенияМеждуМОД.Видимость = ВидимостьДатыПрослеживаемостьПеремещенияМеждуМОД;
	
КонецПроцедуры

#КонецОбласти