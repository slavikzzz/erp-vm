//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		
		Возврат;
		
	КонецЕсли;

	ЦветНедоступногоПериодаДиаграммы = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ИгнорироватьОграниченияДоступностиМатериалов", Ложь);
	ПараметрыРасчета.Вставить("ИгнорироватьОграниченияДоступностиВидовРабочихЦентров", Ложь);
	ПараметрыРасчета.Вставить("НаПустойЗавод", Ложь);
	ПараметрыРасчета.Вставить("ЗадействоватьРезервДоступности", Ложь);
	
	ПолноеИмя = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	Заказ = Параметры.Заказ;
	
	ЗначениеВРеквизитФормы(Заказ.ПолучитьОбъект(), "ЗаказОбъект");
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗаказОбъект.Номер);
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Планирование заказа №%1 от %2';
										|en = 'Planning of order No.%1 from %2'"),
									НомерДокумента,
									Формат(ЗаказОбъект.Дата, "ДЛФ=D"));
	
	ЗаполнитьПоЗаказу();
	
	ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
	ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Авто;
	ДиаграммаГанта.Окантовка = Ложь;
	ДиаграммаГанта.ОтображатьЛегенду = Ложь;
	ДиаграммаГанта.ВертикальнаяПрокрутка = Истина;
	ДиаграммаГанта.ОтображатьПустыеЗначения = Ложь;
	ДиаграммаГанта.ОтображатьЗаголовок = Ложь;
	ДиаграммаГанта.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.НеОтображать;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВывестиДиаграммуГанта(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОповещениеСохранитьИЗакрыть = Новый ОписаниеОповещения(
		"ПередЗакрытиемСохранитьИЗакрыть", ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(
		ОповещениеСохранитьИЗакрыть, Отказ, ЗавершениеРаботы);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемСохранитьИЗакрыть(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СохранитьРезультатРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Действие = "РассчитатьГрафикВыпускаПродукции" Тогда
			
			ПараметрыРасчета = ВыбранноеЗначение.ПараметрыРасчета;
			РезультатРасчета = РассчитатьГрафикВыпуска();
			
			Если РезультатРасчета.ЗаданиеВыполнено Тогда
				
				АдресХранилища = РезультатРасчета.АдресХранилища;
				ЗагрузитьРезультатРасчетаГрафика();
				
			Иначе
				
				ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
				АдресХранилища       = РезультатРасчета.АдресХранилища;
				
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				
				// Уменьшим шаг увеличения времени опроса выполнения задания
				ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
				ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
				
		    КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДиаграммаГантаПриИзменении(Элемент)
	
	Если НеразвернутыеТочки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ВсеДанные", Ложь);
	ПараметрыВывода.Вставить("ТочностьПоШкалеВремени", ПланированиеПроизводстваКлиентСервер.ПолучитьДоступнуюТочностьПоШкалеВремени(ДиаграммаГанта));
	
	РазвернутыеТочки = Новый Массив;
	
	Для каждого НеразвернутаяТочка Из НеразвернутыеТочки Цикл
		
		Точка = ДиаграммаГанта.УстановитьТочку(НеразвернутаяТочка);
		
		Если ДиаграммаГанта.РазвернутаТочка(Точка) Тогда
			
			ИндексыЭтапов = Точка.Точки[0].Расшифровка;
			ПланированиеПроизводстваКлиентСервер.ВывестиЭтапы(ДиаграммаГанта, ИндексыЭтапов, Элементы.Продукция.ТекущиеДанные.Этапы, Точка, Ошибки, НеразвернутыеТочки, ПараметрыВывода);
			РазвернутыеТочки.Добавить(Точка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Состав неравернутых точек изменился.
	// Необходимо из него удалить развернутые точки.
	НеразвернутыеТочкиКопия = Новый Массив;
	
	Для каждого НеразвернутаяТочка Из НеразвернутыеТочки Цикл
		
		Если РазвернутыеТочки.Найти(НеразвернутаяТочка) = Неопределено Тогда
			
			НеразвернутыеТочкиКопия.Добавить(НеразвернутаяТочка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НеразвернутыеТочки = Новый ФиксированныйМассив(НеразвернутыеТочкиКопия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	Если Дата <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КлючСвязиЭтапы = Расшифровки[1];
		
		Если Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'Для перехода к диагностике графика необходимо сохранить результат расчета.
										|Сохранить и перейти к диагностике?';
										|en = 'To go to schedule diagnostics, save the calculation result.
										|Save and go to diagnostics? '");
										
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сохранить и перейти к диагностике';
																|en = 'Save and go to diagnostics'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДиагностикуФормированияГрафикаЗавершение", ЭтотОбъект, КлючСвязиЭтапы);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		Иначе
			ОткрытьДиагностикуФормированияГрафика(КлючСвязиЭтапы);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровки) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровки.Свойство("НедостаточноДоступности") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидРабочегоЦентра", Расшифровки.ВидРабочегоЦентра);
			ПараметрыФормы.Вставить("НачалоПериода", Расшифровки.НачалоПериода);
			ПараметрыФормы.Вставить("РежимРаботы", ПредопределенноеЗначение("Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства"));
			ОткрытьФорму("Обработка.ДоступностьВидовРабочихЦентров.Форма", ПараметрыФормы);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриАктивизацииСтроки(Элемент)
	
	ВывестиДиаграммуГанта();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаРассчитатьГрафикВыпускаПродукции(Команда)
	
	Перем ТекстОшибки;
	
	Если НЕ ЗаблокироватьЗаказПередРасчетомГрафика(ТекстОшибки) Тогда
		
	  	ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ", Заказ);
	ПараметрыФормы.Вставить("ИгнорироватьОграниченияДоступностиМатериалов", ПараметрыРасчета.ИгнорироватьОграниченияДоступностиМатериалов);
	ПараметрыФормы.Вставить("ИгнорироватьОграниченияДоступностиВидовРабочихЦентров", ПараметрыРасчета.ИгнорироватьОграниченияДоступностиВидовРабочихЦентров);
	ПараметрыФормы.Вставить("НаПустойЗавод", ПараметрыРасчета.НаПустойЗавод);
	ПараметрыФормы.Вставить("ЗадействоватьРезервДоступности", ПараметрыРасчета.ЗадействоватьРезервДоступности);
	
	ОткрытьФорму(ПолноеИмя + ".Форма.ПараметрыРасчета", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьРезультатРасчета(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ДиспетчированиеГрафикаПроизводства.Планирование.Команда.СохранитьРезультатРасчета");
	
	СохранитьРезультатРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьГрафикаПроизводства(Команда)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати = ПодготовитьПараметрыПечатиГрафика(ТекущиеДанные.КлючСвязи);
	Если ПараметрыПечати <> Неопределено Тогда
		ПланированиеПроизводстваКлиент.ПечатьГрафикаПроизводства(Заказ, ПараметрыПечати, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьМасштаб(Команда)
	
	ВариантМасштаба = СтрЗаменить(Команда.Имя, "Масштаб", "");
	
	ВывестиДиаграммуГанта(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоЗаказу

&НаСервере
Процедура ЗаполнитьПоЗаказу()
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	// Параметры документа
	ПараметрыДокумента = ПолучитьПараметрыДокумента();
	
	// Продукция
	Продукция.Очистить();
	
	Для каждого ПродукцияСтрока Из ПараметрыДокумента.Продукция Цикл
		
		ПараметрыДокумента.РасчетКритическогоПути.Очистить();
		ПараметрыДокумента.РасписаниеРаботыПоГрафику.Очистить();
		
		ПродукцияНоваяСтрока = Продукция.Добавить();
	
		ПродукцияНоваяСтрока.НомерЗаказа               = ЗаказОбъект.Номер;
		ПродукцияНоваяСтрока.НомерВОчереди             = ЗаказОбъект.Очередь;
		ПродукцияНоваяСтрока.НомерСтроки               = ПродукцияСтрока.НомерСтроки;
		ПродукцияНоваяСтрока.СтатусЗаказа              = ЗаказОбъект.Статус;
		ПродукцияНоваяСтрока.СтатусГрафикаПроизводства = ЗаказОбъект.СтатусГрафикаПроизводства;
		ПродукцияНоваяСтрока.ГрафикРассчитан           = ПродукцияСтрока.ГрафикРассчитан;
		ПродукцияНоваяСтрока.Номенклатура              = ПродукцияСтрока.Номенклатура;
		ПродукцияНоваяСтрока.Характеристика            = ПродукцияСтрока.Характеристика;
		ПродукцияНоваяСтрока.Заказано                  = ПродукцияСтрока.КоличествоУпаковок;
		ПродукцияНоваяСтрока.Заказ                     = ЗаказОбъект.Ссылка;
		ПродукцияНоваяСтрока.КлючСвязи                 = ПродукцияСтрока.КлючСвязи;
		ПродукцияНоваяСтрока.НачатьНеРанее             = ПродукцияСтрока.НачатьНеРанее;
		ПродукцияНоваяСтрока.ДатаПотребности           = ПродукцияСтрока.ДатаПотребности;
		ПродукцияНоваяСтрока.СтатусСтроки              = ПолучитьСтатусСтроки(ПродукцияНоваяСтрока, ПараметрыДокумента);
		
		ПродукцияГрафикНайденныеСтроки = ПараметрыДокумента.ПродукцияГрафик.НайтиСтроки(Новый Структура("КлючСвязиПродукция", ПродукцияСтрока.КлючСвязи));
		
		Если ПродукцияГрафикНайденныеСтроки.Количество() > 0 Тогда
			
			ПродукцияНоваяСтрока.ДатаЗапуска      = ПродукцияГрафикНайденныеСтроки[0].Начало;
			ПродукцияНоваяСтрока.ДатаВыпуска      = ПродукцияГрафикНайденныеСтроки[0].Окончание;
			
		КонецЕсли;
		
		// Расписание работы подразделений по графику
		ЗаполнитьРасписаниеРаботыПоГрафику(ПродукцияНоваяСтрока, ПараметрыДокумента);
		
		// Периоды недоступности исполнителей
		ЗаполнитьПериодыНедоступности(ПродукцияНоваяСтрока, ПараметрыДокумента);
		
		// Этапы продукции
		ТаблицаЭтапыНайденныеСтроки = ПараметрыДокумента.Этапы.НайтиСтроки(Новый Структура("КлючСвязиПродукция, КлючСвязиПолуфабрикат", ПродукцияСтрока.КлючСвязи, ПустойКлюч));
		ПродукцияНоваяСтрока.ИндексыЭтапов = ДобавитьЭтапы(ПродукцияНоваяСтрока, ТаблицаЭтапыНайденныеСтроки, ПараметрыДокумента);
		
		// Расчет критического пути
		КритическийПуть = РассчитатьКритическийПуть(ПараметрыДокумента);
		
		// Установка этапам и полуфабрикатам признака прохождения через критический путь
		Для каждого Этап Из ПродукцияНоваяСтрока.Этапы Цикл
			
			Этап.НаКритическомПути = (КритическийПуть.Найти(Этап.КлючСвязи) <> Неопределено);
			
			Для каждого Полуфабрикат Из Этап.Полуфабрикаты Цикл
				
				Для каждого ИндексЭтапа Из Полуфабрикат.ИндексыЭтапов Цикл
					
					Если КритическийПуть.Найти(ПродукцияНоваяСтрока.Этапы[ИндексЭтапа].КлючСвязи) <> Неопределено Тогда
						
						Полуфабрикат.НаКритическомПути = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;

	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Продукция, Новый Структура("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул")));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДокумента()
	
	ПараметрыДокумента = Новый Структура;
	
	ПолучитьИнтервалы(ПараметрыДокумента);
	ПолучитьЭтапы(ПараметрыДокумента);
	ПолучитьПродукцию(ПараметрыДокумента);
	ПолучитьПолуфабрикаты(ПараметрыДокумента);
	ПолучитьВидыРабочихЦентров(ПараметрыДокумента);
	ПолучитьРасчетКритическогоПути(ПараметрыДокумента);
	ПолучитьАльтернативныеВидыРабочихЦентров(ПараметрыДокумента);
	ПолучитьКэшированныеЗначения(ПараметрыДокумента);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаСервере
Процедура ПолучитьИнтервалы(ПараметрыДокумента)
	
	Интервалы = ЗаказОбъект.ЭтапыГрафик.Выгрузить(, "КодСтроки, КлючСвязи, КлючСвязиПродукция, КлючСвязиЭтапы, НачалоЭтапа, ОкончаниеЭтапа, НачалоПредварительногоБуфера, ОкончаниеЗавершающегоБуфера, Количество");
	
	Интервалы.Колонки.Добавить("ЗапланированоПроизводством", Новый ОписаниеТипов("Число"));
	Интервалы.Колонки.Добавить("КВыполнению", Новый ОписаниеТипов("Число"));
	Интервалы.Колонки.Добавить("Выполнено", Новый ОписаниеТипов("Число"));
	Интервалы.Колонки.Добавить("Брак", Новый ОписаниеТипов("Число"));
	Интервалы.Колонки.Добавить("ЗапланироватьОтказ", Новый ОписаниеТипов("Число"));
	Интервалы.Колонки.Добавить("ФактическоеНачало", Новый ОписаниеТипов("Дата"));
	Интервалы.Колонки.Добавить("ФактическоеОкончание", Новый ОписаниеТипов("Дата"));
	Интервалы.Колонки.Добавить("ФактическоеНачалоРЦ", Новый ОписаниеТипов("Дата"));
	Интервалы.Колонки.Добавить("ФактическоеОкончаниеРЦ", Новый ОписаниеТипов("Дата"));
	
	// Для поиска требуется индекс
	Интервалы.Индексы.Добавить("КодСтроки");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.КодСтрокиЭтапыГрафик                  КАК КодСтроки,
	|	МИНИМУМ(Т.НачалоЭтапа)                  КАК НачалоЭтапа,
	|	МАКСИМУМ(Т.Период)                      КАК ОкончаниеЭтапа,
	|	МИНИМУМ(Т.НачалоПредварительногоБуфера) КАК НачалоПредварительногоБуфера,
	|	МАКСИМУМ(Т.ОкончаниеЗавершающегоБуфера) КАК ОкончаниеЗавершающегоБуфера,
	|	СУММА(Т.ЗапланированоПроизводством)     КАК ЗапланированоПроизводством,
	|	СУММА(Т.КВыполнению)                    КАК КВыполнению,
	|	СУММА(Т.Выполнено)                      КАК Выполнено,
	|	СУММА(Т.Брак)                           КАК Брак
	|
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК Т
	|
	|ГДЕ
	|	Т.Активность
	|	И Т.Распоряжение = &Распоряжение
	|	И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) В(
	//++ Устарело_Переработка24
	|		ТИП(Документ.ЗаказПереработчику),
	//-- Устарело_Переработка24
	|		ТИП(Документ.ЗаказПереработчику2_5))
	|	И Т.КВыполнению + Т.Выполнено + Т.Брак > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.КодСтрокиЭтапыГрафик            КАК КодСтроки,
	|	МИНИМУМ(Т.ФактическоеНачало)      КАК ФактическоеНачало,
	|	МАКСИМУМ(Т.ФактическоеОкончание)  КАК ФактическоеОкончание,
	|	МИНИМУМ(
	|		ВЫБОР КОГДА Т.ПланироватьРаботуВидовРабочихЦентров И Т.ДатаВыполненияРаботВПредварительномБуфере <> ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			Т.ДатаВыполненияРаботВПредварительномБуфере
	|		ИНАЧЕ
	|			Т.ФактическоеНачало
	|		КОНЕЦ
	|	) КАК ФактическоеНачалоРЦ,
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА Т.ПланироватьРаботуВидовРабочихЦентров И Т.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра <> ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			Т.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра
	|		ИНАЧЕ
	|			Т.ФактическоеОкончание
	|		КОНЕЦ
	|	) КАК ФактическоеОкончаниеРЦ
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК Т
	|
	|ГДЕ
	|	Т.Распоряжение = &Распоряжение
	|	И Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|	И Т.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.КодСтрокиЭтапыГрафик");
	
	Запрос.УстановитьПараметр("Распоряжение", ЗаказОбъект.Ссылка);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатовЗапроса[0];
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НайденнаяСтрока = Интервалы.Найти(Выборка.КодСтроки, "КодСтроки");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				НайденнаяСтрока.НачалоПредварительногоБуфера = Выборка.НачалоПредварительногоБуфера;
				НайденнаяСтрока.НачалоЭтапа                  = Выборка.НачалоЭтапа;
				НайденнаяСтрока.ОкончаниеЭтапа               = Выборка.ОкончаниеЭтапа;
				НайденнаяСтрока.ОкончаниеЗавершающегоБуфера  = Выборка.ОкончаниеЗавершающегоБуфера;
				НайденнаяСтрока.ЗапланированоПроизводством   = Выборка.ЗапланированоПроизводством;
				НайденнаяСтрока.КВыполнению                  = Выборка.КВыполнению;
				НайденнаяСтрока.Выполнено                    = Выборка.Выполнено;
				НайденнаяСтрока.Брак                         = Выборка.Брак;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатЗапроса = МассивРезультатовЗапроса[1];
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НайденнаяСтрока = Интервалы.Найти(Выборка.КодСтроки, "КодСтроки");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				НайденнаяСтрока.ФактическоеНачало      = Выборка.ФактическоеНачало;
				НайденнаяСтрока.ФактическоеОкончание   = Выборка.ФактическоеОкончание;
				НайденнаяСтрока.ФактическоеНачалоРЦ    = Выборка.ФактическоеНачалоРЦ;
				НайденнаяСтрока.ФактическоеОкончаниеРЦ = Выборка.ФактическоеОкончаниеРЦ;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавленный ранее индекс больше не требуется
	Интервалы.Индексы.Очистить();
	
	// Индексы, которые потребуются в дальнейшем
	Интервалы.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиЭтапы");
	
	ПараметрыДокумента.Вставить("Интервалы", Интервалы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЭтапы(ПараметрыДокумента)
	
	Этапы = ЗаказОбъект.Этапы.Выгрузить();
	
	// Индексы, которые потребуются в дальнейшем
	Этапы.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиПолуфабрикат");
	Этапы.Индексы.Добавить("КлючСвязиПродукция, КлючСвязи");
	Этапы.Индексы.Добавить("КлючСвязиПродукция, ПланироватьРаботуВидовРабочихЦентров");
	
	ПараметрыДокумента.Вставить("Этапы", Этапы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКэшированныеЗначения(ПараметрыДокумента)
	
	РеквизитыПодразделений = ПроизводствоСервер.ПараметрыПроизводственныхПодразделений(ПараметрыДокумента.Этапы.ВыгрузитьКолонку("Подразделение"));
	
	Для каждого КлючИЗначение Из РеквизитыПодразделений Цикл
		КлючИЗначение.Значение.Вставить(
			"ГрафикРаботы",
			?(КлючИЗначение.Значение.ГрафикиРаботы.ВГраница() <> -1,
				КлючИЗначение.Значение.ГрафикиРаботы[0],
				Справочники.Календари.ПустаяСсылка()));
	КонецЦикла;
	
	ПараметрыДокумента.Вставить("РеквизитыПодразделений", РеквизитыПодразделений);
	
	РасписаниеРаботыПоГрафику = Новый ТаблицаЗначений;
	РасписаниеРаботыПоГрафику.Колонки.Добавить("ГрафикРаботы",   Новый ОписаниеТипов("СправочникСсылка.Календари"));
	РасписаниеРаботыПоГрафику.Колонки.Добавить("ДатаГрафика",    Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	РасписаниеРаботыПоГрафику.Колонки.Добавить("ВремяНачала",    Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	РасписаниеРаботыПоГрафику.Колонки.Добавить("ВремяОкончания", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	РасписаниеРаботыПоГрафику.Индексы.Добавить("ГрафикРаботы, ДатаГрафика");
	
	ПараметрыДокумента.Вставить("РасписаниеРаботыПоГрафику", РасписаниеРаботыПоГрафику);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыРабочихЦентров(ПараметрыДокумента)
	
	ВидыРабочихЦентров = ЗаказОбъект.ВидыРабочихЦентров.Выгрузить();
	
	// Заполним дополнительные реквизиты
	ИменаРеквизитов = "Подразделение, УчитыватьДоступностьПоГрафикуРаботы";
	РеквизитыВидовРабочихЦентров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра"), ИменаРеквизитов);
	
	ВидыРабочихЦентров.Колонки.Добавить("Подразделение");
	ВидыРабочихЦентров.Колонки.Добавить("УчитыватьДоступностьПоГрафикуРаботы");
	
	Для Каждого ЭлементКоллекции Из ВидыРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, РеквизитыВидовРабочихЦентров[ЭлементКоллекции.ВидРабочегоЦентра]);
	КонецЦикла;
	
	// Индексы, которые потребуются в дальнейшем
	ВидыРабочихЦентров.Индексы.Добавить("КлючСвязиПродукция");
	
	ПараметрыДокумента.Вставить("ВидыРабочихЦентров", ВидыРабочихЦентров);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАльтернативныеВидыРабочихЦентров(ПараметрыДокумента)
	
	АльтернативныеВидыРабочихЦентров = ЗаказОбъект.АльтернативныеВидыРабочихЦентров.Выгрузить();
	
	// Заполним дополнительные реквизиты
	ИменаРеквизитов = "Подразделение";
	РеквизитыВидовРабочихЦентров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(АльтернативныеВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра"), ИменаРеквизитов);
	
	АльтернативныеВидыРабочихЦентров.Колонки.Добавить("Подразделение");
	
	Для Каждого ЭлементКоллекции Из АльтернативныеВидыРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, РеквизитыВидовРабочихЦентров[ЭлементКоллекции.ВидРабочегоЦентра]);
	КонецЦикла;
	
	// Индексы, которые потребуются в дальнейшем
	АльтернативныеВидыРабочихЦентров.Индексы.Добавить("КлючСвязиПродукция");
	
	ПараметрыДокумента.Вставить("АльтернативныеВидыРабочихЦентров", АльтернативныеВидыРабочихЦентров);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПродукцию(ПараметрыДокумента)
	
	ПродукцияЗаказ = ЗаказОбъект.Продукция.Выгрузить();
	ПродукцияГрафик = ЗаказОбъект.ПродукцияГрафик.Выгрузить();
	
	// Индексы, которые потребуются в дальнейшем
	ПродукцияГрафик.Индексы.Добавить("КлючСвязиПродукция");
	
	ПараметрыДокумента.Вставить("Продукция", ПродукцияЗаказ);
	ПараметрыДокумента.Вставить("ПродукцияГрафик", ПродукцияГрафик);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПолуфабрикаты(ПараметрыДокумента)
	
	МассивСтрок = Новый Массив;
	
	Для Каждого НайденнаяСтрока Из ЗаказОбъект.МатериалыИУслуги.НайтиСтроки(Новый Структура("ПроизводитсяВПроцессе", Истина)) Цикл
		
		Если ТипЗнч(НайденнаяСтрока.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			
			МассивСтрок.Добавить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Полуфабрикаты = ЗаказОбъект.МатериалыИУслуги.Выгрузить(МассивСтрок); 
	ПолуфабрикатыГрафик = ЗаказОбъект.ВыходныеИзделияГрафик.Выгрузить();
	
	// Индексы, которые потребуются в дальнейшем
	Полуфабрикаты.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиЭтапы");
	ПолуфабрикатыГрафик.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиЭтапыГрафик");
	
	ПараметрыДокумента.Вставить("Полуфабрикаты", Полуфабрикаты);
	ПараметрыДокумента.Вставить("ПолуфабрикатыГрафик", ПолуфабрикатыГрафик);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРасчетКритическогоПути(ПараметрыДокумента)
	
	РасчетКритическогоПути = Новый ТаблицаЗначений;
	
	РасчетКритическогоПути.Колонки.Добавить("Этап",                 Новый ОписаниеТипов("УникальныйИдентификатор"));
	РасчетКритическогоПути.Колонки.Добавить("СледующийЭтап",        Новый ОписаниеТипов("УникальныйИдентификатор"));
	РасчетКритическогоПути.Колонки.Добавить("Продолжительность",    Новый ОписаниеТипов("Число"));
	РасчетКритическогоПути.Колонки.Добавить("РаннийСрокНачала",     Новый ОписаниеТипов("Число"));
	РасчетКритическогоПути.Колонки.Добавить("РаннийСрокОкончания",  Новый ОписаниеТипов("Число"));
	РасчетКритическогоПути.Колонки.Добавить("ПозднийСрокНачала",    Новый ОписаниеТипов("Число"));
	РасчетКритическогоПути.Колонки.Добавить("ПозднийСрокОкончания", Новый ОписаниеТипов("Число"));
	РасчетКритическогоПути.Колонки.Добавить("РезервВремениПолный",  Новый ОписаниеТипов("Число"));
	
	// Индексы, которые потребуются в дальнейшем
	РасчетКритическогоПути.Индексы.Добавить("Этап");
	РасчетКритическогоПути.Индексы.Добавить("СледующийЭтап");
	
	ПараметрыДокумента.Вставить("РасчетКритическогоПути", РасчетКритическогоПути);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьКритическийПуть(ПараметрыДокумента)
	
	РКП = ПараметрыДокумента.РасчетКритическогоПути;
	
	// Индексы необработанных строк
	НеобработанныеСтроки = Новый Массив;
	
	Для ИндексНеобработаннойСтроки = 0 По РКП.Количество() - 1 Цикл
		
		НеобработанныеСтроки.Добавить(ИндексНеобработаннойСтроки);
		
	КонецЦикла;
	
	// Расчет раннего срока начала и раннего срока окончания
	Пока НеобработанныеСтроки.Количество() > 0 Цикл
		
		ИндексНеобработаннойСтроки = 0;
		НеобработанныеСтрокиВГраница = НеобработанныеСтроки.ВГраница();
		
		Пока ИндексНеобработаннойСтроки <= НеобработанныеСтрокиВГраница Цикл
			
			НеобработаннаяСтрока = РКП[НеобработанныеСтроки[ИндексНеобработаннойСтроки]];
			
			ПредыдущиеЭтапы = РКП.НайтиСтроки(Новый Структура("СледующийЭтап", НеобработаннаяСтрока.Этап));
			ПредыдущиеЭтапыОбработаны = Истина;
			
			Для каждого ПредыдущийЭтап Из ПредыдущиеЭтапы Цикл
				
				Если НеобработанныеСтроки.Найти(РКП.Индекс(ПредыдущийЭтап)) <> Неопределено Тогда
					
					ПредыдущиеЭтапыОбработаны = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
				
			Если ПредыдущиеЭтапыОбработаны Тогда
				
				// Расчет раннего срока окончания
				НеобработаннаяСтрока.РаннийСрокОкончания = НеобработаннаяСтрока.РаннийСрокНачала + НеобработаннаяСтрока.Продолжительность;
				
				// Расчет раннего срока начала для следующих этапов
				СледующиеЭтапы = РКП.НайтиСтроки(Новый Структура("Этап", НеобработаннаяСтрока.СледующийЭтап));
				
				Для каждого СледующийЭтап Из СледующиеЭтапы Цикл
					
					СледующийЭтап.РаннийСрокНачала = Макс(СледующийЭтап.РаннийСрокНачала, НеобработаннаяСтрока.РаннийСрокОкончания);
					
				КонецЦикла;
				
				// Обработанная строка удаляется
				НеобработанныеСтроки.Удалить(ИндексНеобработаннойСтроки);
				
				// Количество необработанных строк уменьшается
				НеобработанныеСтрокиВГраница = НеобработанныеСтрокиВГраница - 1;
				
			Иначе
				
				// Переход к следующей строке
				ИндексНеобработаннойСтроки = ИндексНеобработаннойСтроки + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Индексы необработанных строк
	НеобработанныеСтроки = Новый Массив;
	
	Для ИндексНеобработаннойСтроки = 0 По РКП.Количество() - 1 Цикл
		
		НеобработанныеСтроки.Добавить(ИндексНеобработаннойСтроки);
		
	КонецЦикла;
	
	// Расчет позднего срока начала и позднего срока окончания
	Пока НеобработанныеСтроки.Количество() > 0 Цикл
		
		ИндексНеобработаннойСтроки = 0;
		НеобработанныеСтрокиВГраница = НеобработанныеСтроки.ВГраница();
		
		Пока ИндексНеобработаннойСтроки <= НеобработанныеСтрокиВГраница Цикл
			
			НеобработаннаяСтрока = РКП[НеобработанныеСтроки[ИндексНеобработаннойСтроки]];
			
			СледующиеЭтапы = РКП.НайтиСтроки(Новый Структура("Этап", НеобработаннаяСтрока.СледующийЭтап));
			СледующиеЭтапыОбработаны = Истина;
			
			Для каждого СледующийЭтап Из СледующиеЭтапы Цикл
				
				Если НеобработанныеСтроки.Найти(РКП.Индекс(СледующийЭтап)) <> Неопределено Тогда
					
					СледующиеЭтапыОбработаны = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СледующиеЭтапыОбработаны Тогда
				
				// Расчет познего срока окончания
				Если ЗначениеЗаполнено(НеобработаннаяСтрока.СледующийЭтап) Тогда
					
					Для каждого СледующийЭтап Из СледующиеЭтапы Цикл
						
						НеобработаннаяСтрока.ПозднийСрокОкончания = Макс(НеобработаннаяСтрока.ПозднийСрокОкончания, СледующийЭтап.ПозднийСрокНачала);
						
					КонецЦикла;
					
				Иначе
				
					КонечныеЭтапы = РКП.НайтиСтроки(Новый Структура("СледующийЭтап", НеобработаннаяСтрока.СледующийЭтап));
					
					Для каждого КонечныйЭтап Из КонечныеЭтапы Цикл
						
						НеобработаннаяСтрока.ПозднийСрокОкончания = Макс(НеобработаннаяСтрока.ПозднийСрокОкончания, КонечныйЭтап.РаннийСрокОкончания);
						
					КонецЦикла;
					
				КонецЕсли;
				
				// Расчет познего срока начала
				НеобработаннаяСтрока.ПозднийСрокНачала = НеобработаннаяСтрока.ПозднийСрокОкончания - НеобработаннаяСтрока.Продолжительность;
				
				// Резерв времени (полный)
				НеобработаннаяСтрока.РезервВремениПолный = НеобработаннаяСтрока.ПозднийСрокНачала - НеобработаннаяСтрока.РаннийСрокНачала;
				
				// Обработанная строка удаляется
				НеобработанныеСтроки.Удалить(ИндексНеобработаннойСтроки);
				
				// Количество необработанных строк уменьшается
				НеобработанныеСтрокиВГраница = НеобработанныеСтрокиВГраница - 1;
				
			Иначе
				
				// Переход к следующей строке
				ИндексНеобработаннойСтроки = ИндексНеобработаннойСтроки + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = Новый Массив;
	
	НайденныеСтроки = РКП.НайтиСтроки(Новый Структура("РезервВремениПолный", 0));
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если Результат.Найти(НайденнаяСтрока.Этап) = Неопределено Тогда
		
			Результат.Добавить(НайденнаяСтрока.Этап);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьЭтапы(СтрокаПродукция, ДобавляемыеЭтапы, ПараметрыДокумента, СледующийЭтапПолуфабриката = Неопределено)
	
	// Этапы добавляются в "правильном" порядке, 
	//  чтобы выводились "лесенкой" слева-направо и снизу-вверх.
	ПорядокЭтапов = Новый ТаблицаЗначений;
	ПорядокЭтапов.Колонки.Добавить("ИндексЭтапа", Новый ОписаниеТипов("Число"));
	ПорядокЭтапов.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ПорядокЭтапов.Колонки.Добавить("НомерЭтапа",  Новый ОписаниеТипов("Число"));
	
	Для каждого ДобавляемыйЭтап Из ДобавляемыеЭтапы Цикл
		
		ЭтапыНоваяСтрока = СтрокаПродукция.Этапы.Добавить();
		
		РеквизитыПодразделения = ПараметрыДокумента.РеквизитыПодразделений[ДобавляемыйЭтап.Подразделение];
		
		ЭтапыНоваяСтрока.КлючСвязи                              = ДобавляемыйЭтап.КлючСвязи;
		ЭтапыНоваяСтрока.Этап                                   = ДобавляемыйЭтап.Этап;
		ЭтапыНоваяСтрока.НаименованиеЭтапа                      = ДобавляемыйЭтап.НаименованиеЭтапа;
		ЭтапыНоваяСтрока.ИнтервалПланирования                   = РеквизитыПодразделения.ИнтервалПланирования;
		ЭтапыНоваяСтрока.НачалоИнтервалаПланирования            = РеквизитыПодразделения.НачалоИнтервалаПланирования;
		ЭтапыНоваяСтрока.ОкончаниеИнтервалаПланирования         = РеквизитыПодразделения.ОкончаниеИнтервалаПланирования;
		ЭтапыНоваяСтрока.ПринятКВыполнению                      = Ложь;
		ЭтапыНоваяСтрока.Подразделение                          = ДобавляемыйЭтап.Подразделение;
		ЭтапыНоваяСтрока.НаименованиеПодразделения              = РеквизитыПодразделения.Наименование;
		ЭтапыНоваяСтрока.НомерЭтапа                             = ДобавляемыйЭтап.НомерЭтапа;
		ЭтапыНоваяСтрока.НомерСледующегоЭтапа                   = ДобавляемыйЭтап.НомерСледующегоЭтапа;
		ЭтапыНоваяСтрока.Количество                             = ДобавляемыйЭтап.Количество;
		ЭтапыНоваяСтрока.ПредварительныйБуфер                   = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(ДобавляемыйЭтап.ПредварительныйБуфер, ДобавляемыйЭтап.ЕдиницаИзмеренияПредварительногоБуфера);
		ЭтапыНоваяСтрока.ЗавершающийБуфер                       = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(ДобавляемыйЭтап.ЗавершающийБуфер, ДобавляемыйЭтап.ЕдиницаИзмеренияЗавершающегоБуфера);
		ЭтапыНоваяСтрока.ЕдиницаИзмеренияПредварительногоБуфера = ДобавляемыйЭтап.ЕдиницаИзмеренияПредварительногоБуфера;
		ЭтапыНоваяСтрока.ЕдиницаИзмеренияЗавершающегоБуфера     = ДобавляемыйЭтап.ЕдиницаИзмеренияЗавершающегоБуфера;
		ЭтапыНоваяСтрока.МожноНачатьНеРанее                     = СтрокаПродукция.НачатьНеРанее;
		ЭтапыНоваяСтрока.ПланироватьРаботуВидовРабочихЦентров   = ДобавляемыйЭтап.ПланироватьРаботуВидовРабочихЦентров;
		ЭтапыНоваяСтрока.ДлительностьЭтапа                      = ДобавляемыйЭтап.ДлительностьЭтапа;
		
		// Интервалы этапа
		ТаблицаИнтервалыНайденныеСтроки = ПараметрыДокумента.Интервалы.НайтиСтроки(Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапы", СтрокаПродукция.КлючСвязи, ДобавляемыйЭтап.КлючСвязи));
		ДобавитьИнтервалыЭтапа(СтрокаПродукция, ЭтапыНоваяСтрока, ТаблицаИнтервалыНайденныеСтроки, ПараметрыДокумента);
		
		// Полуфабрикаты этапа
		ТаблицаПолуфабрикатыНайденныеСтроки = ПараметрыДокумента.Полуфабрикаты.НайтиСтроки(Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапы", СтрокаПродукция.КлючСвязи, ДобавляемыйЭтап.КлючСвязи));
		ДобавитьПолуфабрикаты(СтрокаПродукция, ЭтапыНоваяСтрока, ТаблицаПолуфабрикатыНайденныеСтроки, ПараметрыДокумента);
		
		СтрокаПорядок = ПорядокЭтапов.Добавить();
		
		СтрокаПорядок.ИндексЭтапа = СтрокаПродукция.Этапы.Индекс(ЭтапыНоваяСтрока);
		СтрокаПорядок.Период      = ПолучитьНачалоИнтервалаЭтапа(ЭтапыНоваяСтрока);
		СтрокаПорядок.НомерЭтапа  = ЭтапыНоваяСтрока.НомерЭтапа;
		
	КонецЦикла;
	
	ПорядокЭтапов.Сортировать("Период Убыв, НомерЭтапа Убыв");
	
	Результат = ПорядокЭтапов.ВыгрузитьКолонку("ИндексЭтапа");
	
	Для каждого ИндексЭтапа Из Результат Цикл
		
		Этап = СтрокаПродукция.Этапы[ИндексЭтапа];
		
		Если Этап.НомерСледующегоЭтапа = 0 Тогда
			
			НоваяСтрока = ПараметрыДокумента.РасчетКритическогоПути.Добавить();
			НоваяСтрока.Этап = Этап.КлючСвязи;
			
			Если СледующийЭтапПолуфабриката <> Неопределено Тогда
				
				НоваяСтрока.СледующийЭтап = СледующийЭтапПолуфабриката.КлючСвязи;
				
			КонецЕсли;
			
			Для каждого Интервал Из Этап.Интервалы Цикл
				
				НоваяСтрока.Продолжительность = НоваяСтрока.Продолжительность + (Интервал.ОкончаниеЗавершающегоБуфера - Интервал.НачалоПредварительногоБуфера);
				
				Если СледующийЭтапПолуфабриката <> Неопределено Тогда
					
					СледующийЭтапПолуфабриката.МожноНачатьНеРанее = Макс(Интервал.ОкончаниеЗавершающегоБуфера + 1, СледующийЭтапПолуфабриката.МожноНачатьНеРанее);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СледующийЭтапПолуфабриката <> Неопределено Тогда
				
				Если СледующийЭтапПолуфабриката.ПланироватьРаботуВидовРабочихЦентров Тогда
					
					СледующийЭтапПолуфабриката.МожноНачатьНеРанее = ПланированиеПроизводства.ДатаСУчетомБуфера(СледующийЭтапПолуфабриката.МожноНачатьНеРанее,
																													СледующийЭтапПолуфабриката.ПредварительныйБуфер,
																													СледующийЭтапПолуфабриката.Подразделение,
																													СледующийЭтапПолуфабриката.ЕдиницаИзмеренияПредварительногоБуфера);
																													
					СледующийЭтапПолуфабриката.МожноНачатьНеРанее = ПланированиеПроизводстваКлиентСервер.СледующийИнтервалПланирования(СледующийЭтапПолуфабриката.МожноНачатьНеРанее,
																																			СледующийЭтапПолуфабриката.ИнтервалПланирования,
																																			СледующийЭтапПолуфабриката.НачалоИнтервалаПланирования,
																																			Истина);
																																			
				Иначе
					
					СледующийЭтапПолуфабриката.МожноНачатьНеРанее = ПолучитьБлижайшуюРабочуюДатуПоГрафику(СледующийЭтапПолуфабриката.МожноНачатьНеРанее,
																												ПараметрыДокумента.РеквизитыПодразделений[СледующийЭтапПолуфабриката.Подразделение].ГрафикРаботы,
																												ПараметрыДокумента.РасписаниеРаботыПоГрафику,
																												СтрокаПродукция.ДатаВыпуска);
																							
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ИндексЭтапа Из Результат Цикл
		
		Этап = СтрокаПродукция.Этапы[ИндексЭтапа];
		
		Для каждого ИндексПредыдущегоЭтапа Из Результат Цикл
			
			ПредыдущийЭтап = СтрокаПродукция.Этапы[ИндексПредыдущегоЭтапа];
			
			Если ПредыдущийЭтап.НомерСледующегоЭтапа = Этап.НомерЭтапа Тогда
				
				НоваяСтрока = ПараметрыДокумента.РасчетКритическогоПути.Добавить();
				НоваяСтрока.Этап = ПредыдущийЭтап.КлючСвязи;
				НоваяСтрока.СледующийЭтап = Этап.КлючСвязи;
				
				Для каждого Интервал Из ПредыдущийЭтап.Интервалы Цикл
					
					НоваяСтрока.Продолжительность = НоваяСтрока.Продолжительность + (Интервал.ОкончаниеЗавершающегоБуфера - Интервал.НачалоПредварительногоБуфера);
					Этап.МожноНачатьНеРанее = Макс(Интервал.ОкончаниеЗавершающегоБуфера + 1, Этап.МожноНачатьНеРанее);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда
		
			Этап.МожноНачатьНеРанее = ПланированиеПроизводства.ДатаСУчетомБуфера(Этап.МожноНачатьНеРанее,
																					Этап.ПредварительныйБуфер,
																					Этап.Подразделение,
																					Этап.ЕдиницаИзмеренияПредварительногоБуфера);
																					
			Этап.МожноНачатьНеРанее = ПланированиеПроизводстваКлиентСервер.СледующийИнтервалПланирования(Этап.МожноНачатьНеРанее,
																											Этап.ИнтервалПланирования,
																											Этап.НачалоИнтервалаПланирования,
																											Истина);
			
		Иначе
			
			Этап.МожноНачатьНеРанее = ПолучитьБлижайшуюРабочуюДатуПоГрафику(Этап.МожноНачатьНеРанее,
																				ПараметрыДокумента.РеквизитыПодразделений[Этап.Подразделение].ГрафикРаботы,
																				ПараметрыДокумента.РасписаниеРаботыПоГрафику,
																				СтрокаПродукция.ДатаВыпуска);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

&НаСервере
Процедура ДобавитьИнтервалыЭтапа(СтрокаПродукция, СтрокаЭтапы, ДобавляемыеИнтервалы, ПараметрыДокумента)
	
	НачалоТекущегоИнтервала = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ТекущаяДатаСеанса(), СтрокаЭтапы.ИнтервалПланирования, СтрокаЭтапы.НачалоИнтервалаПланирования);
	
	Для каждого ДобавляемыйИнтервал Из ДобавляемыеИнтервалы Цикл
		
		ИнтервалыНоваяСтрока = СтрокаЭтапы.Интервалы.Добавить();
		
		ИнтервалыНоваяСтрока.НачалоПредварительногоБуфера = ДобавляемыйИнтервал.НачалоПредварительногоБуфера;
		ИнтервалыНоваяСтрока.НачалоЭтапа                  = ДобавляемыйИнтервал.НачалоЭтапа;
		ИнтервалыНоваяСтрока.ОкончаниеЭтапа               = ДобавляемыйИнтервал.ОкончаниеЭтапа;
		ИнтервалыНоваяСтрока.ОкончаниеЗавершающегоБуфера  = ДобавляемыйИнтервал.ОкончаниеЗавершающегоБуфера;
		ИнтервалыНоваяСтрока.Количество                   = ДобавляемыйИнтервал.Количество;
		ИнтервалыНоваяСтрока.КлючСвязи                    = ДобавляемыйИнтервал.КлючСвязи;
		ИнтервалыНоваяСтрока.ЗапланированоПроизводством   = ДобавляемыйИнтервал.ЗапланированоПроизводством;
		ИнтервалыНоваяСтрока.КВыполнению                  = ДобавляемыйИнтервал.КВыполнению;
		ИнтервалыНоваяСтрока.Выполнено                    = ДобавляемыйИнтервал.Выполнено;
		ИнтервалыНоваяСтрока.Брак                         = ДобавляемыйИнтервал.Брак;
		ИнтервалыНоваяСтрока.ФактическоеНачало            = ДобавляемыйИнтервал.ФактическоеНачало;
		ИнтервалыНоваяСтрока.ФактическоеОкончание         = ДобавляемыйИнтервал.ФактическоеОкончание;
		ИнтервалыНоваяСтрока.ФактическоеНачалоРЦ          = ДобавляемыйИнтервал.ФактическоеНачалоРЦ;
		ИнтервалыНоваяСтрока.ФактическоеОкончаниеРЦ       = ДобавляемыйИнтервал.ФактическоеОкончаниеРЦ;
		
		СтрокаЭтапы.ФактическоеНачало = ?(СтрокаЭтапы.ФактическоеНачало <> '000101010000', Мин(СтрокаЭтапы.ФактическоеНачало, ДобавляемыйИнтервал.ФактическоеНачало), ДобавляемыйИнтервал.ФактическоеНачало);
		СтрокаЭтапы.ФактическоеОкончание = ?(СтрокаЭтапы.ФактическоеОкончание <> '000101010000', Мин(СтрокаЭтапы.ФактическоеОкончание, ДобавляемыйИнтервал.ФактическоеОкончание), ДобавляемыйИнтервал.ФактическоеОкончание);
		
		Если ИнтервалыНоваяСтрока.ЗапланированоПроизводством <> 0
			ИЛИ ИнтервалыНоваяСтрока.КВыполнению <> 0
			ИЛИ ИнтервалыНоваяСтрока.Выполнено <> 0 Тогда
			
			ИнтервалыНоваяСтрока.ЕстьМаршрутныеЛисты = Истина;
			
		КонецЕсли;
		
		Если ИнтервалыНоваяСтрока.КВыполнению <> 0
			ИЛИ ИнтервалыНоваяСтрока.Выполнено <> 0 Тогда
			
			ИнтервалыНоваяСтрока.МаршрутныеЛистыПереданыКВыполнению = Истина;
			
		КонецЕсли;
		
		Если ИнтервалыНоваяСтрока.ЕстьМаршрутныеЛисты Тогда
			
			СтрокаЭтапы.ПринятКВыполнению = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Интервалы этапа упорядочиваются по возрастанию окончания завершающего буфера, чтобы правильно установить связи.
	СтрокаЭтапы.Интервалы.Сортировать("ОкончаниеЗавершающегоБуфера ВОЗР", Новый СравнениеЗначений);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолуфабрикаты(СтрокаПродукция, СтрокаЭтапы, ДобавляемыеПолуфабрикаты, ПараметрыДокумента)
	
	Для каждого ДобавляемыйПолуфабрикат Из ДобавляемыеПолуфабрикаты Цикл
		
		ПолуфабрикатыНоваяСтрока = СтрокаЭтапы.Полуфабрикаты.Добавить();
		
		ПолуфабрикатыНоваяСтрока.Номенклатура   = ДобавляемыйПолуфабрикат.Номенклатура;
		ПолуфабрикатыНоваяСтрока.Характеристика = ДобавляемыйПолуфабрикат.Характеристика;
		ПолуфабрикатыНоваяСтрока.КлючСвязи      = ДобавляемыйПолуфабрикат.КлючСвязи;
		
		// Этапы полуфабриката
		ТаблицаЭтапыНайденныеСтроки = ПараметрыДокумента.Этапы.НайтиСтроки(Новый Структура("КлючСвязиПродукция, КлючСвязиПолуфабрикат", СтрокаПродукция.КлючСвязи, ДобавляемыйПолуфабрикат.КлючСвязи));
		ПолуфабрикатыНоваяСтрока.ИндексыЭтапов = ДобавитьЭтапы(СтрокаПродукция, ТаблицаЭтапыНайденныеСтроки, ПараметрыДокумента, СтрокаЭтапы);
		
		// Интервалы полуфабриката
		ДобавитьИнтервалыПолуфабриката(СтрокаПродукция, ПолуфабрикатыНоваяСтрока, ПараметрыДокумента);
		
	КонецЦикла;
	
	// Полуфабрикаты упорядочиваются по убыванию даты выпуска, чтобы выводились "лесенкой" слева-направо и снизу-вверх.
	СтрокаЭтапы.Полуфабрикаты.Сортировать("ДатаВыпуска УБЫВ", Новый СравнениеЗначений);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИнтервалыПолуфабриката(СтрокаПродукция, СтрокаПолуфабрикат, ПараметрыДокумента)
	
	Для каждого ИндексЭтапа Из СтрокаПолуфабрикат.ИндексыЭтапов Цикл
		
		Для каждого ИнтервалЭтапа Из СтрокаПродукция.Этапы[ИндексЭтапа].Интервалы Цикл
		
			НайденныеСтроки = ПараметрыДокумента.ПолуфабрикатыГрафик.НайтиСтроки(Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапыГрафик", СтрокаПродукция.КлючСвязи, ИнтервалЭтапа.КлючСвязи));
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ИнтервалыНоваяСтрока = СтрокаПолуфабрикат.Интервалы.Добавить();
				
				ИнтервалыНоваяСтрока.ДатаЗапуска = СтрокаПродукция.ДатаЗапуска;
				ИнтервалыНоваяСтрока.ДатаВыпуска = НайденнаяСтрока.ДатаВыпуска;
				ИнтервалыНоваяСтрока.Количество  = НайденнаяСтрока.Количество;
				
				СтрокаПолуфабрикат.ДатаВыпуска = Макс(СтрокаПолуфабрикат.ДатаВыпуска, ИнтервалыНоваяСтрока.ДатаВыпуска);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНачалоИнтервалаЭтапа(СтрокаЭтапы)
	
	Результат = '39990101';
	
	Для Каждого Интервал Из СтрокаЭтапы.Интервалы Цикл
		Результат = Мин(Результат, Интервал.НачалоПредварительногоБуфера);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусСтроки(СтрокаПродукция, ПараметрыДокумента)
	
	Результат = 0;
	
	Если Ошибки <> Неопределено Тогда
		
		Для каждого Ошибка Из Ошибки Цикл
			
			Если ПараметрыДокумента.Этапы.НайтиСтроки(Новый Структура("КлючСвязиПродукция, КлючСвязи", СтрокаПродукция.КлючСвязи, Ошибка.КлючСвязиЭтап)).Количество() > 0 Тогда
				
				Результат = 3;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если Результат <> 3 Тогда
		
		Если СтрокаПродукция.ТребуетсяПерепланировать Тогда
			
			Результат = 1;
			
		ИначеЕсли СтрокаПродукция.ГрафикРассчитан Тогда
			
			Результат = 2;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПериодыНедоступности(СтрокаПродукция, ПараметрыДокумента)
	
	ИсполнителиЭтапов = Новый Массив;
	
	// Этапы продукции
	ТаблицаЭтапыНайденныеСтроки = ПараметрыДокумента.Этапы.НайтиСтроки(Новый Структура("КлючСвязиПродукция, ПланироватьРаботуВидовРабочихЦентров", СтрокаПродукция.КлючСвязи, Ложь));

	Для каждого НайденнаяСтрока Из ТаблицаЭтапыНайденныеСтроки Цикл
		
		ИсполнителиЭтапов.Добавить(НайденнаяСтрока.Подразделение);
		
	КонецЦикла;
	
	// Виды рабочих центров
	ТаблицаВидыРабочихЦентровНайденныеСтроки = ПараметрыДокумента.ВидыРабочихЦентров.НайтиСтроки(Новый Структура("КлючСвязиПродукция", СтрокаПродукция.КлючСвязи));
	
	Для Каждого НайденнаяСтрока Из ТаблицаВидыРабочихЦентровНайденныеСтроки Цикл
		
		Если НайденнаяСтрока.УчитыватьДоступностьПоГрафикуРаботы Тогда
			ИсполнителиЭтапов.Добавить(НайденнаяСтрока.ВидРабочегоЦентра);
		Иначе
			ИсполнителиЭтапов.Добавить(НайденнаяСтрока.Подразделение);
		КонецЕсли;
		
	КонецЦикла;
	
	// Альтернативные виды рабочих центров
	ТаблицаАльтернативныеВидыРабочихЦентровНайденныеСтроки = ПараметрыДокумента.АльтернативныеВидыРабочихЦентров.НайтиСтроки(Новый Структура("КлючСвязиПродукция", СтрокаПродукция.КлючСвязи));
	
	Для каждого НайденнаяСтрока Из ТаблицаАльтернативныеВидыРабочихЦентровНайденныеСтроки Цикл
		
		Если НайденнаяСтрока.УчитыватьДоступностьПоГрафикуРаботы Тогда
			ИсполнителиЭтапов.Добавить(НайденнаяСтрока.ВидРабочегоЦентра);
		Иначе
			ИсполнителиЭтапов.Добавить(НайденнаяСтрока.Подразделение);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПериодыНедоступности = ПланированиеПроизводства.ПериодыНедоступностиРабочихЦентров(СтрокаПродукция.НачатьНеРанее, СтрокаПродукция.ДатаВыпуска, ИсполнителиЭтапов);
	
	Для каждого ДанныеНедоступности Из ТаблицаПериодыНедоступности Цикл
		
		НоваяСтрока = СтрокаПродукция.ПериодыНедоступности.Добавить();
		НоваяСтрока.Начало    = ДанныеНедоступности.Начало;
		НоваяСтрока.Окончание = ДанныеНедоступности.Окончание;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасписаниеРаботыПоГрафику(СтрокаПродукция, ПараметрыДокумента)

	МассивГрафикиРаботы = Новый Массив;
	
	НайденныеСтроки = ПараметрыДокумента.Этапы.НайтиСтроки(Новый Структура("КлючСвязиПродукция, ПланироватьРаботуВидовРабочихЦентров", СтрокаПродукция.КлючСвязи, Ложь));
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		МассивГрафикиРаботы.Добавить(ПараметрыДокумента.РеквизитыПодразделений[НайденнаяСтрока.Подразделение].ГрафикРаботы);
		
	КонецЦикла;
	
	РасписанияРаботыНаПериод = КалендарныеГрафики.РасписанияРаботыНаПериод(МассивГрафикиРаботы, НачалоДня(СтрокаПродукция.НачатьНеРанее), КонецДня(СтрокаПродукция.ДатаВыпуска));
	
	Для каждого РасписаниеРаботы Из РасписанияРаботыНаПериод Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыДокумента.РасписаниеРаботыПоГрафику.Добавить(), РасписаниеРаботы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьБлижайшуюРабочуюДатуПоГрафику(ДатаНачала, ГрафикРаботы, РасписаниеРаботыПоГрафику, ДатаОграничение)
	
	ТекущийПериод = НачалоДня(ДатаНачала);
	
	Пока ДатаОграничение > ТекущийПериод Цикл
		
		РасписанияПоГрафику = РасписаниеРаботыПоГрафику.НайтиСтроки(Новый Структура("ГрафикРаботы, ДатаГрафика", ГрафикРаботы, ТекущийПериод));
		
		Для каждого РасписаниеПоГрафику Из РасписанияПоГрафику Цикл
			
			ТекущийПериод = РасписаниеПоГрафику.ДатаГрафика + (РасписаниеПоГрафику.ВремяОкончания - '00010101');
			
			Если ТекущийПериод >= ДатаНачала Тогда
				
				Возврат Макс(ДатаНачала, РасписаниеПоГрафику.ДатаГрафика + (РасписаниеПоГрафику.ВремяНачала - '00010101'));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущийПериод = КонецДня(ТекущийПериод) + 1;
		
	КонецЦикла;
	
	Возврат ДатаНачала;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаПотребности.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Продукция.ДатаПотребности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Продукция.ДатаВыпуска");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);

КонецПроцедуры

&НаКлиенте
Функция СохранитьРезультатРасчета()

	ТекстОшибки = "";
	Если СохранитьРезультатРасчетаНаСервере(ТекстОшибки) Тогда
		
		Элементы.ФормаСохранитьРезультатРасчета.Доступность = Ложь;
		Модифицированность = Ложь;
		
		Оповестить("Запись_ЗаказНаПроизводство", Заказ);
		Возврат Истина;
		
	ИначеЕсли ТекстОшибки <> "" Тогда
		
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Функция СохранитьРезультатРасчетаНаСервере(ТекстОшибки)
	
	Попытка
		
		ЗаказНаПроизводство = РеквизитФормыВЗначение("ЗаказОбъект");
		
		ЗаказНаПроизводство.ИнициализироватьПараметрыАктуализацииМаршрутныхЛистов();
		
		ЗаказНаПроизводство.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗначениеВРеквизитФормы(ЗаказНаПроизводство, "ЗаказОбъект");
		
		РазблокироватьДанныеДляРедактирования(Заказ, УникальныйИдентификатор);
		
		Возврат Истина;
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось сохранить результат расчета.';
							|en = 'Cannot save the calculation result.'");
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатРасчетаГрафика()
	
	РезультатРасчетаГрафика = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ЗаказНаПроизводство = РеквизитФормыВЗначение("ЗаказОбъект");
	ЗаказНаПроизводство.ЗагрузитьРезультатРасчетаГрафика(РезультатРасчетаГрафика.РезультатРасчета, РезультатРасчетаГрафика.ДанныеДокумента);
	
	Если РезультатРасчетаГрафика.РезультатРасчета.Запланирован Тогда
		
		Ошибки = Неопределено;
		
	Иначе
		
		Ошибки = Новый ФиксированныйМассив(РезультатРасчетаГрафика.РезультатРасчета.Ошибки);
		
	КонецЕсли;
	
	Элементы.ФормаСохранитьРезультатРасчета.Доступность = РезультатРасчетаГрафика.РезультатРасчета.Запланирован;
	Модифицированность = Истина;
	
	ЗначениеВРеквизитФормы(ЗаказНаПроизводство, "ЗаказОбъект");
	
	ЗаполнитьПоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ЗагрузитьРезультатРасчетаГрафика();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция РассчитатьГрафикВыпуска()
	
	ЗаказНаПроизводство = Заказ.ПолучитьОбъект();
	
	// Обновим прочитанные данные заказа
	ЗначениеВРеквизитФормы(ЗаказНаПроизводство, "ЗаказОбъект");
	
	ЗаказНаПроизводство.ИгнорироватьОграниченияДоступностиМатериалов = ПараметрыРасчета.ИгнорироватьОграниченияДоступностиМатериалов;
	ЗаказНаПроизводство.ИгнорироватьОграниченияДоступностиВидовРабочихЦентров = ПараметрыРасчета.ИгнорироватьОграниченияДоступностиВидовРабочихЦентров;
	ЗаказНаПроизводство.НаПустойЗавод = ПараметрыРасчета.НаПустойЗавод;
	ЗаказНаПроизводство.ЗадействоватьРезервДоступности = ПараметрыРасчета.ЗадействоватьРезервДоступности;
	
	ПараметрыЗадания = ЗаказНаПроизводство.ПараметрыДляРасчетаГрафика();
	
	НаименованиеЗадания = НСтр("ru = 'Расчет графика выпуска продукции';
								|en = 'Calculate product release schedule'");
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"Документы.ЗаказНаПроизводство.РассчитатьГрафикВыпуска",
						ПараметрыЗадания,
						НаименованиеЗадания);
			
	Возврат РезультатРасчета;
		
КонецФункции

&НаСервере
Функция ЗаблокироватьЗаказПередРасчетомГрафика(ТекстОшибки)

	Попытка
		// Заблокируем заказ для редактирования
		ЗаблокироватьДанныеДляРедактирования(Заказ,, УникальныйИдентификатор);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ОткрытьДиагностикуФормированияГрафикаЗавершение(РезультатВопроса, КлючСвязиЭтапы) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если СохранитьРезультатРасчета() Тогда
			ОткрытьДиагностикуФормированияГрафика(КлючСвязиЭтапы);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиагностикуФормированияГрафика(КлючСвязиЭтапы)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючСвязиПродукция", ТекущиеДанные.КлючСвязи);
	ПараметрыФормы.Вставить("КлючСвязиЭтапы",     КлючСвязиЭтапы);
	ПараметрыФормы.Вставить("Заказ",              Заказ);
	ПараметрыФормы.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("НомерСтроки",        ТекущиеДанные.НомерСтроки);
	
	ОткрытьФорму(ПолноеИмя + ".Форма.ДиагностикаФормированияГрафика", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыПечатиГрафика(КлючСвязиПродукция)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущиеДанные = Продукция.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаПродукция = РеквизитФормыВЗначение("Продукция");
	ТекущиеДанные = ТаблицаПродукция.Найти(ТекущиеДанные.НомерСтроки, "НомерСтроки");
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ТекущиеДанные", ТекущиеДанные);
	ПараметрыПечати.Вставить("Ошибки", ?(Ошибки <> Неопределено, Ошибки, Неопределено));
	ПараметрыПечати.Вставить("ЦветНедоступногоПериодаДиаграммы", ЦветНедоступногоПериодаДиаграммы);
	
	СтруктураПоиска = Новый Структура("КлючСвязиПродукция", КлючСвязиПродукция);
 	ТекущиеПериодыНедоступности = ПериодыНедоступности.Выгрузить(СтруктураПоиска);
	ПараметрыПечати.Вставить("ПериодыНедоступности", ТекущиеПериодыНедоступности);
	
	Возврат Новый Структура("АдресДанныеПечати", ПоместитьВоВременноеХранилище(ПараметрыПечати, УникальныйИдентификатор));

КонецФункции

&НаКлиенте
Процедура ВывестиДиаграммуГанта(ИзменилсяМасштаб = Ложь)
	
	Если ИзменилсяМасштаб Тогда
		Элементы.ФормаМасштабАвто.Пометка    = ПустаяСтрока(ВариантМасштаба);
		Элементы.ФормаМасштабКрупный.Пометка = (ВариантМасштаба = "Крупный");
		Элементы.ФормаМасштабСредний.Пометка = (ВариантМасштаба = "Средний");
		Элементы.ФормаМасштабМелкий.Пометка  = (ВариантМасштаба = "Мелкий");
	КонецЕсли;
		
	ПланированиеПроизводстваКлиентСервер.ВывестиДиаграммуГанта(ДиаграммаГанта, Элементы.Продукция.ТекущиеДанные, Ошибки, НеразвернутыеТочки,, ВариантМасштаба);
	
КонецПроцедуры

#КонецОбласти
//-- Устарело_Производство21