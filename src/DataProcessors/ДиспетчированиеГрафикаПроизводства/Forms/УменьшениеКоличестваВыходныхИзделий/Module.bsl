//++ Устарело_Производство21
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Параметры формы.
	ЗаказНаПроизводство = Параметры.ЗаказНаПроизводство;
	КлючСвязиПродукция = Параметры.КлючСвязиПродукция;
	КодСтрокиЭтапыГрафик = Параметры.КодСтрокиЭтапыГрафик;
	КлючСвязиЭтапы = Параметры.КлючСвязиЭтапы;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продукция.КодСтроки КАК КодСтрокиПродукция,
	|	Продукция.Номенклатура КАК Номенклатура,
	|	Продукция.Характеристика КАК Характеристика,
	|	Продукция.Спецификация КАК Спецификация,
	|	ВыходныеИзделия.Упаковка КАК Упаковка,
	|	ВыходныеИзделия.КлючСвязи КАК КлючСвязиВыходноеИзделие,
	|	ВыходныеИзделия.КоличествоУпаковок КАК ИсходноеКоличествоВыходныхИзделий,
	|	Этапы.Количество КАК ИсходноеКоличествоПоследнихЭтапов,
	|	ВыходныеИзделия.Ссылка.Номер КАК Номер,
	|	ВыходныеИзделия.Ссылка.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВыходныеИзделия.Упаковка
	|		ИНАЧЕ ВыходныеИзделия.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ВыходныеИзделия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК Этапы
	|			ПО ВыходныеИзделия.КлючСвязиЭтапы = Этапы.КлючСвязи
	|		ПО Продукция.Номенклатура = ВыходныеИзделия.Номенклатура
	|			И Продукция.Характеристика = ВыходныеИзделия.Характеристика
	|ГДЕ
	|	Продукция.КлючСвязи = &КлючСвязиПродукция
	|	И Продукция.Ссылка = &Ссылка
	|	И ВыходныеИзделия.Ссылка = &Ссылка
	|	И ВыходныеИзделия.КлючСвязиПродукция = &КлючСвязиПродукция
	|	И Этапы.Ссылка = &Ссылка
	|	И Этапы.КлючСвязиПродукция = &КлючСвязиПродукция";
	
	Запрос.УстановитьПараметр("КлючСвязиПродукция", КлючСвязиПродукция);
	Запрос.УстановитьПараметр("Ссылка", ЗаказНаПроизводство);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Реквизиты);
	
	ЗаказНаПроизводствоСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = '№ %1 от %2';
											|en = 'No. %1 from %2'"),
										ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Ложь, Истина),
										Формат(Реквизиты.Дата, "ДЛФ=D"));
	
	Элементы.Упаковка.Видимость         = ЗначениеЗаполнено(Упаковка);
	Элементы.ЕдиницаИзмерения.Видимость = Не ЗначениеЗаполнено(Упаковка);
	
	ПолучитьДанныеОХодеВыполненияЭтапов();
	
	ПланированиеПроизводства.ПостроитьСтруктуруЭтапов(ТаблицаЭтапов);
	
	МинимальноеКоличествоВыходныхИзделий = МинимальноеКоличествВыходныхИзделийСУчетомБрака();
	
	ПолучитьРасчетноеКоличествоЭтаповСУчетомБрака();
	
	// Расчет количества этапов восстановления, которые собираемся учесть.
	РассчитатьКоличествоЭтаповВосстановленияРекурсивно(Неопределено, РасчетноеКоличествоПоследнихЭтапов);
	
	УстановитьНовоеКоличествоРекурсивно(Неопределено, РасчетноеКоличествоПоследнихЭтапов);
	
	РассчитатьИтогиПоТаблицеЭтапов();
	
	Если МинимальноеКоличествоВыходныхИзделий = 0 Тогда
		Элементы.ИнформационнаяНадпись.Заголовок = НСтр("ru = 'Расчет на меньшее количество изделий невозможен.';
														|en = 'Calculation for less number of products is not possible.'");
		ЭтаФорма.ТолькоПросмотр = Истина;
	ИначеЕсли МинимальноеКоличествоВыходныхИзделий = ИсходноеКоличествоПоследнихЭтапов Тогда
		Элементы.ИнформационнаяНадпись.Заголовок = НСтр("ru = 'Расчет на меньшее количество изделий не требуется.';
														|en = 'Calculation for less number of products is not required.'");
	Иначе
		ШаблонНадписи = НСтр("ru = 'С учетом брака на всех этапах возможно продолжение производства %1 из %2 %3 изделий.';
							|en = 'Considering the quantity of defective goods at all stages, production of %1 from %2 %3 products can be continued.'");
		Элементы.ИнформационнаяНадпись.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонНадписи,
			МинимальноеКоличествоВыходныхИзделий,
			ИсходноеКоличествоВыходныхИзделий,
			?(ЗначениеЗаполнено(Упаковка), Упаковка, ЕдиницаИзмерения));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	КоличествоУпаковокПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Ключ,АктивироватьСтрокуПродукции",
		ЗаказНаПроизводство, КодСтрокиПродукция);
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	ЗавершитьРедактированиеНаСервере("Запись", Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_ЗаказНаПроизводство", ЗаказНаПроизводство);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВСпецификацииЗаказа(Команда)
	
	ПараметрыФормы = Неопределено;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	ЗавершитьРедактированиеНаСервере("ПереносВСпецификациюЗаказа", Отказ, ОписаниеОшибки, ПараметрыФормы);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	ПараметрыФормы.Вставить("Модифицированность", Истина);
	ПараметрыФормы.Вставить("ЗаписыватьРезультатРедактирования", Истина);
	
	ОткрытьФорму("Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма", ПараметрыФормы, Этаформа.ВладелецФормы);
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповНомерЭтапаФорма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповНомерСледующегоЭтапаФорма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповНаименованиеЭтапа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповКоличество.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповКоличествоНовое.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповБракКВосстановлению.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповБрак.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповКоличествоБракаУчтено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЭтаповВыполненоЗапланировано.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭтапов.Брак");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭтапов.КоличествоБракаУчтено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтличающейсяСтрокиДокумента);

КонецПроцедуры

&НаСервере
Процедура КоличествоУпаковокПриИзмененииНаСервере()
	
	Если КоличествоУпаковок > ИсходноеКоличествоВыходныхИзделий Или КоличествоУпаковок = 0 Тогда
		КоличествоУпаковок = ИсходноеКоличествоВыходныхИзделий;
	КонецЕсли;
	
	РасчетноеКоличествоПоследнихЭтапов = КоличествоПоследнихЭтаповПоКоличествуВыходныхИзделий(КоличествоУпаковок);
	
	// Расчет количества этапов восстановления, которые собираемся учесть.
	РассчитатьКоличествоЭтаповВосстановленияРекурсивно(Неопределено, РасчетноеКоличествоПоследнихЭтапов);
	
	УстановитьНовоеКоличествоРекурсивно(Неопределено, РасчетноеКоличествоПоследнихЭтапов);
	
	РассчитатьИтогиПоТаблицеЭтапов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУровеньЭтапов(НайденныеСтроки, Уровень)
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", Строка.КлючСвязи));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			КоличествоУровней = Макс(Уровень, КоличествоУровней);
			
			Если Строка.НомерЭтапа = 1 Тогда
				Строка.Уровень = КоличествоУровней;
			Иначе
				Строка.Уровень = Уровень;
			КонецЕсли;
			
		Иначе
			Строка.Уровень = Уровень;
			ЗаполнитьУровеньЭтапов(НайденныеСтроки, Уровень + 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеОХодеВыполненияЭтапов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ЗаказНаПроизводствоЭтапыГрафик.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ График
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|ГДЕ
	|	ЗаказНаПроизводствоЭтапыГрафик.Ссылка = &Распоряжение
	|	И ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция = &КлючСвязиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	СУММА(ЭтапыПроизводстваОбороты.КВыполнениюОборот + ЭтапыПроизводстваОбороты.ВыполненоОборот + ЭтапыПроизводстваОбороты.БракОборот) КАК ВыполненоЗапланировано
	|ПОМЕСТИТЬ ВТВыполненоЗапланировано
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение = &Распоряжение) КАК ЭтапыПроизводстваОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ График КАК График
	|		ПО ЭтапыПроизводстваОбороты.КодСтрокиЭтапыГрафик = График.КодСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	График.КлючСвязиЭтапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	СУММА(БракВПроизводствеОстаткиИОбороты.КоличествоРасход) КАК Восстановлено,
	|	СУММА(ВЫБОР
	|			КОГДА БракВПроизводствеОстаткиИОбороты.КоличествоКонечныйОстаток < 0
	|				ТОГДА 0
	|			ИНАЧЕ БракВПроизводствеОстаткиИОбороты.КоличествоКонечныйОстаток
	|		КОНЕЦ) КАК Брак
	|ПОМЕСТИТЬ ВТИспорченныеЭтапы
	|ИЗ
	|	График КАК График
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БракВПроизводстве.ОстаткиИОбороты(, , , , МаршрутныйЛист.Распоряжение = &Распоряжение) КАК БракВПроизводствеОстаткиИОбороты
	|		ПО (БракВПроизводствеОстаткиИОбороты.МаршрутныйЛист.КодСтрокиЭтапыГрафик = График.КодСтроки)
	|
	|СГРУППИРОВАТЬ ПО
	|	График.КлючСвязиЭтапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыполненоЗапланировано.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ВТВыполненоЗапланировано.ВыполненоЗапланировано КАК ВыполненоЗапланировано,
	|	ВТИспорченныеЭтапы.Брак КАК Брак,
	|	ВТИспорченныеЭтапы.Восстановлено КАК Восстановлено
	|ПОМЕСТИТЬ ДанныеГрафика
	|ИЗ
	|	ВТВыполненоЗапланировано КАК ВТВыполненоЗапланировано
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИспорченныеЭтапы КАК ВТИспорченныеЭтапы
	|		ПО ВТВыполненоЗапланировано.КлючСвязиЭтапы = ВТИспорченныеЭтапы.КлючСвязиЭтапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоЭтапы.Этап КАК Этап,
	|	ЗаказНаПроизводствоЭтапы.НомерЭтапа КАК НомерЭтапа,
	|	ЗаказНаПроизводствоЭтапы.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ЗаказНаПроизводствоЭтапы.Подразделение КАК Подразделение,
	|	ЗаказНаПроизводствоЭтапы.Количество КАК Количество,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязи КАК КлючСвязи,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязиПолуфабрикат КАК КлючСвязиПолуфабрикат,
	|	ЗаказНаПроизводствоЭтапы.КоличествоЭтаповНаЕдиницуСледующегоЭтапа КАК КоличествоЭтаповНаЕдиницуСледующегоЭтапа,
	|	ЗаказНаПроизводствоЭтапы.НаименованиеЭтапа КАК НаименованиеЭтапа,
	|	ЗаказНаПроизводствоЭтапы.ЭтапВосстановленияБрака КАК ЭтапВосстановленияБрака,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязиЭтапыБрак КАК КлючСвязиЭтапыБрак,
	|	ДанныеГрафика.ВыполненоЗапланировано КАК ВыполненоЗапланировано,
	|	ДанныеГрафика.Брак КАК Брак,
	|	ДанныеГрафика.Восстановлено КАК Восстановлено
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеГрафика КАК ДанныеГрафика
	|		ПО ЗаказНаПроизводствоЭтапы.КлючСвязи = ДанныеГрафика.КлючСвязиЭтапы
	|ГДЕ
	|	ЗаказНаПроизводствоЭтапы.Ссылка = &Распоряжение
	|	И ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = &КлючСвязиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	БракВПроизводствеОстатки.МаршрутныйЛист КАК МаршрутныйЛист,
	|	БракВПроизводствеОстатки.КоличествоОстаток КАК Количество,
	|	БракВПроизводствеОстатки.МаршрутныйЛист.Номер КАК Номер,
	|	БракВПроизводствеОстатки.МаршрутныйЛист.ОписаниеБрака КАК ОписаниеБрака
	|ИЗ
	|	График КАК График
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БракВПроизводстве.Остатки(, МаршрутныйЛист.Распоряжение = &Распоряжение) КАК БракВПроизводствеОстатки
	|		ПО График.КодСтроки = БракВПроизводствеОстатки.МаршрутныйЛист.КодСтрокиЭтапыГрафик
	|ГДЕ
	|	БракВПроизводствеОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("КлючСвязиПродукция", КлючСвязиПродукция);
	Запрос.УстановитьПараметр("Распоряжение", ЗаказНаПроизводство);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЭтапов.Загрузить(МассивРезультатов[4].Выгрузить());
	
	ДанныеОБраке = МассивРезультатов[5].Выгрузить();
	БракПоМаршрутнымЛистам.Загрузить(ДанныеОБраке);
	
	ОтборКлючСвязиЭтапы = Новый Структура("КлючСвязиЭтапы");
	
	ШаблонПредставленияБрака = НСтр("ru = 'МЛ №%1 испорчено %2 единиц/партий изделий (%3)';
									|en = 'RS No. %1 %2 spoiled units/batches of products (%3)'");
	
	Для Каждого СтрокаЭтап Из ТаблицаЭтапов Цикл
		
		ОтборКлючСвязиЭтапы.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		НайденныеСтроки = ДанныеОБраке.НайтиСтроки(ОтборКлючСвязиЭтапы);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставленияБрака,
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Строка.Номер),
				Строка.Количество,
				Строка.ОписаниеБрака);
			
			Если ЗначениеЗаполнено(СтрокаЭтап.ОписаниеБрака) Тогда
				СтрокаЭтап.ОписаниеБрака = СтрокаЭтап.ОписаниеБрака + "; " + Представление;
			Иначе
				СтрокаЭтап.ОписаниеБрака = Представление;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРасчетноеКоличествоЭтаповСУчетомБрака()
	
	СтруктураОтбора = Новый Структура("КлючСвязи", КлючСвязиЭтапы);
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
	СтрокаЭтап = НайденныеСтроки[0];
	
	БракПоИсправлениюБрака = 0;
	Если СтрокаЭтап.ЭтапВосстановленияБрака Тогда
		БракПоИсправлениюБрака = СтрокаЭтап.Брак;
		СтруктураОтбора = Новый Структура("КлючСвязи", СтрокаЭтап.КлючСвязиЭтапыБрак);
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
		СтрокаЭтап = НайденныеСтроки[0];
	КонецЕсли;
	
	МожемВыполнитьЭтапов = СтрокаЭтап.Количество - СтрокаЭтап.Брак - БракПоИсправлениюБрака;
	
	// Количество последних этапов, которое можем произвести с учетом брака на выбранном этапе.
	РасчетноеКоличествоПоследнихЭтапов = ПолучитьРасчетноеКоличествоРекурсивно(КлючСвязиЭтапы, МожемВыполнитьЭтапов);
	
	// Количество выходных изделий, которое можем произвести с учетом брака на выбранном этапе.
	РасчетноеКоличествоИзделийСУчетомПорчи = КоличествоВыходныхИзделийПоКоличествуПоследнихЭтапов(РасчетноеКоличествоПоследнихЭтапов);
	
	Если РасчетноеКоличествоИзделийСУчетомПорчи = 0 Тогда
		КоличествоУпаковок = ИсходноеКоличествоВыходныхИзделий;
		РасчетноеКоличествоПоследнихЭтапов = ИсходноеКоличествоПоследнихЭтапов;
	Иначе
		КоличествоУпаковок = РасчетноеКоличествоИзделийСУчетомПорчи;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовоеКоличествоРекурсивно(КлючСвязиЭтапы, РасчетноеКоличествоРодительскихЭтапов)
	
	Если КлючСвязиЭтапы = Неопределено Тогда
		КлючСвязиЭтапы = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("КлючСвязиЭтапы, ЭтапВосстановленияБрака", КлючСвязиЭтапы, Ложь);
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НовоеКоличествоЭтапов = РасчетноеКоличествоРодительскихЭтапов*Строка.КоличествоЭтаповНаЕдиницуСледующегоЭтапа;
		
		// Количество учтенных этапов брака.
		Если Строка.КоличествоБракаУчтено > Строка.Брак Тогда
			ДельтаБракаУчтено = Строка.КоличествоБракаУчтено - Строка.Брак;
			Строка.КоличествоБракаУчтено = Строка.Брак; 
		Иначе 
			ДельтаБракаУчтено = 0;
		КонецЕсли;
		
		Строка.КоличествоНовое = Мин(Строка.Количество, Строка.КоличествоБракаУчтено + НовоеКоличествоЭтапов);
		
		Если Строка.ВыполненоЗапланировано > Строка.КоличествоНовое Тогда
			// Разница, на которую можно уменьшить этапы восстановления, если они есть.
			ДельтаКоличествоНовое = Строка.ВыполненоЗапланировано - Строка.КоличествоБракаУчтено - Строка.Восстановлено; 			
			Строка.КоличествоНовое = Строка.ВыполненоЗапланировано;
		Иначе
			ДельтаКоличествоНовое = 0;
		КонецЕсли;
		
		// Уменьшаем этапы восстановления.
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязиЭтапыБрак", Строка.КлючСвязи);
		ЭтапыВосстановленияБрака = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭтапВосстановления Из ЭтапыВосстановленияБрака Цикл
			
			Если ЭтапВосстановления.Брак > 0 И ДельтаБракаУчтено > 0 Тогда
				ЭтапВосстановления.КоличествоБракаУчтено = Мин(ЭтапВосстановления.Брак, ДельтаБракаУчтено);
				ДельтаБракаУчтено = ДельтаБракаУчтено - ЭтапВосстановления.КоличествоБракаУчтено;
			КонецЕсли;
			
			КоличествоНовое = ЭтапВосстановления.КоличествоНовое;
			
			ЭтапВосстановления.КоличествоНовое = Мин(ЭтапВосстановления.Количество, ЭтапВосстановления.КоличествоБракаУчтено + НовоеКоличествоЭтапов - ДельтаКоличествоНовое);
			
			Если ЭтапВосстановления.ВыполненоЗапланировано > ЭтапВосстановления.КоличествоНовое Тогда
				ЭтапВосстановления.КоличествоНовое = ЭтапВосстановления.ВыполненоЗапланировано;
			КонецЕсли;
			
			ДельтаКоличествоНовое = ДельтаКоличествоНовое - (ЭтапВосстановления.КоличествоНовое - КоличествоНовое);
			
		КонецЦикла;
		
		УстановитьНовоеКоличествоРекурсивно(Строка.КлючСвязи, НовоеКоличествоЭтапов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасчетноеКоличествоРекурсивно(КлючСвязи, КоличествоЭтаповРодителя)
	
	СтруктураОтбора = Новый Структура("КлючСвязи", КлючСвязи);
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
	СтрокаЭтап = НайденныеСтроки[0];
	
	КоличествоЭтаповНаЕдиницуСледующегоЭтапа = ?(СтрокаЭтап.КоличествоЭтаповНаЕдиницуСледующегоЭтапа = 0, 1, СтрокаЭтап.КоличествоЭтаповНаЕдиницуСледующегоЭтапа);
	
	МожемВыполнитьСледующихЭтапов = Цел(КоличествоЭтаповРодителя / КоличествоЭтаповНаЕдиницуСледующегоЭтапа);
	
	Если КоличествоЭтаповНаЕдиницуСледующегоЭтапа <> 1 Тогда
		
		МожемВыполнитьСледующихЭтапов = ПолучитьРасчетноеКоличествоРекурсивно(СтрокаЭтап.КлючСвязиЭтапы, МожемВыполнитьСледующихЭтапов);
		
	КонецЕсли;
	
	Возврат МожемВыполнитьСледующихЭтапов;
	
КонецФункции

&НаСервере
Процедура РассчитатьКоличествоЭтаповВосстановленияРекурсивно(КлючСвязиЭтапы, Количество)
	
	Если КлючСвязиЭтапы = Неопределено Тогда
		КлючСвязиЭтапы = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("КлючСвязиЭтапы, ЭтапВосстановленияБрака", КлючСвязиЭтапы, Ложь);
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		НовоеКоличествоЭтапов = Количество*Строка.КоличествоЭтаповНаЕдиницуСледующегоЭтапа;
		Строка.КоличествоБракаУчтено = Строка.Количество - НовоеКоличествоЭтапов; 
		РассчитатьКоличествоЭтаповВосстановленияРекурсивно(Строка.КлючСвязи, НовоеКоличествоЭтапов);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоТаблицеЭтапов()
	
	Для Каждого Строка Из ТаблицаЭтапов Цикл
		
		Если Строка.КоличествоНовое = 0 И Строка.ЭтапВосстановленияБрака Тогда 
			Строка.ИзменениеКоличестваЭтапов = 0;
		Иначе
			Строка.ИзменениеКоличестваЭтапов = Строка.КоличествоНовое - Строка.Количество;
		КонецЕсли;
	
		Строка.БракКВосстановлению = Строка.Брак - Строка.КоличествоБракаУчтено;
		Строка.БракВосстановлен = Строка.КоличествоБракаУчтено + Строка.Восстановлено;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция КоличествоВыходныхИзделийПоКоличествуПоследнихЭтапов(КоличествоПоследнихЭтапов)
	
	СтруктураОтбора= Новый Структура("КлючСвязиЭтапы, ЭтапВосстановленияБрака", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), Ложь);
	ИсходноеКоличествоПоследнихЭтапов = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора)[0].Количество;
	
	СтруктураОтбора = Новый Структура("КлючСвязи", КлючСвязиВыходноеИзделие);
	ВыходноеИзделие = ЗаказНаПроизводство.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора)[0];
	
	Возврат КоличествоПоследнихЭтапов * ВыходноеИзделие.КоличествоУпаковок / ИсходноеКоличествоПоследнихЭтапов;
	
КонецФункции

&НаСервере
Функция КоличествоПоследнихЭтаповПоКоличествуВыходныхИзделий(КоличествоВыходныхИзделий)
	
	СтруктураОтбора = Новый Структура("КлючСвязиЭтапы, ЭтапВосстановленияБрака", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), Ложь);
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
	
	КоличествоПоследнихЭтапов = НайденныеСтроки[0].Количество;
	
	СтруктураОтбора = Новый Структура("КлючСвязи", КлючСвязиВыходноеИзделие);
	ВыходноеИзделие = ЗаказНаПроизводство.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора)[0];
	
	ВыходныхИзделийНаОдинЭтап = ВыходноеИзделие.КоличествоУпаковок / КоличествоПоследнихЭтапов;
	
	РасчетноеКоличествоПоследнихЭтапов = КоличествоВыходныхИзделий / ВыходныхИзделийНаОдинЭтап;
	
	Если РасчетноеКоличествоПоследнихЭтапов > Цел(РасчетноеКоличествоПоследнихЭтапов) Тогда
		РасчетноеКоличествоПоследнихЭтапов = Цел(РасчетноеКоличествоПоследнихЭтапов) + 1;
	Иначе
		РасчетноеКоличествоПоследнихЭтапов = Цел(РасчетноеКоличествоПоследнихЭтапов);
	КонецЕсли;
	
	Возврат РасчетноеКоличествоПоследнихЭтапов;
	
КонецФункции

&НаСервере
Функция МинимальноеКоличествВыходныхИзделийСУчетомБрака()
	
	КоличестваПоЭтапам = Новый Соответствие;
	
	Для Каждого СтрокаЭтап Из ТаблицаЭтапов Цикл
		
		Если СтрокаЭтап.Брак = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		БракПоИсправлениюБрака = 0;
		Если СтрокаЭтап.ЭтапВосстановленияБрака Тогда
			БракПоИсправлениюБрака = СтрокаЭтап.Брак;
			СтруктураОтбора = Новый Структура("КлючСвязи", СтрокаЭтап.КлючСвязиЭтапыБрак);
			НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
			СтрокаЭтап = НайденныеСтроки[0];
		КонецЕсли;
		
		МожемВыполнитьЭтапов = СтрокаЭтап.Количество - СтрокаЭтап.Брак - БракПоИсправлениюБрака;
		
		КоличествоПоследнихЭтапов = ПолучитьРасчетноеКоличествоРекурсивно(СтрокаЭтап.КлючСвязи, МожемВыполнитьЭтапов);
		
		Если КоличестваПоЭтапам[СтрокаЭтап.КлючСвязи] = Неопределено Или КоличестваПоЭтапам[СтрокаЭтап.КлючСвязи] > КоличествоПоследнихЭтапов Тогда
			КоличестваПоЭтапам.Вставить(СтрокаЭтап.КлючСвязи, КоличествоПоследнихЭтапов);
		КонецЕсли;
		
	КонецЦикла;
	
	МинимальноеКоличествоПоследнихЭтапов = ИсходноеКоличествоПоследнихЭтапов;
	Для Каждого Строка Из КоличестваПоЭтапам Цикл
		МинимальноеКоличествоПоследнихЭтапов = Мин(МинимальноеКоличествоПоследнихЭтапов, Строка.Значение);
	КонецЦикла;
	
	Если МинимальноеКоличествоПоследнихЭтапов > 0 Тогда
		МинимальноеКоличествоВыходныхИзделий = КоличествоВыходныхИзделийПоКоличествуПоследнихЭтапов(МинимальноеКоличествоПоследнихЭтапов);
	Иначе
		МинимальноеКоличествоВыходныхИзделий = 0;
	КонецЕсли;
	
	Возврат МинимальноеКоличествоВыходныхИзделий;
	
КонецФункции

#Область ЗавершениеРедактирования

&НаСервере
Процедура ЗавершитьРедактированиеНаСервере(Режим, Отказ, ОписаниеОшибки, ПараметрыФормы = Неопределено)
	
	ОтборКлючСвязи = Новый Структура("КлючСвязи");
	ОтборКлючСвязиЭтапы = Новый Структура("КлючСвязиЭтапы");
	
	ЗаказОбъект = ЗаказНаПроизводство.ПолучитьОбъект();
	
	СокращенныеЭтапы = Новый ТаблицаЗначений;
	СокращенныеЭтапы.Колонки.Добавить("КлючСвязи");
	СокращенныеЭтапы.Колонки.Добавить("КоличествоЭтапов");
	СокращенныеЭтапы.Колонки.Добавить("КоличествоЭтаповИсходный");
	
	ПараметрыРедактированияМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.ПараметрыРедактированияМатериалов(УникальныйИдентификатор);
	
	Для Каждого СтрокаЭтап Из ТаблицаЭтапов Цикл
		
		ОтборКлючСвязи.КлючСвязи = СтрокаЭтап.КлючСвязи;
		ОтборКлючСвязиЭтапы.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		// Запись данных о восстановлении брака.
		
		Если СтрокаЭтап.КоличествоБракаУчтено > 0 Тогда
			
			Остаток = СтрокаЭтап.КоличествоБракаУчтено;
			
			СтрокиБракаПоМаршрутнымЛистам = БракПоМаршрутнымЛистам.НайтиСтроки(ОтборКлючСвязиЭтапы);
			
			Для Каждого Строка Из СтрокиБракаПоМаршрутнымЛистам Цикл
				
				Если Остаток = 0 Тогда
					Прервать;
				КонецЕсли;
				
				НоваяСтрокаВосстановления = ЗаказОбъект.ЭтапыВосстановленияБрака.Добавить();
				НоваяСтрокаВосстановления.КлючСвязиПродукция = КлючСвязиПродукция;
				НоваяСтрокаВосстановления.МаршрутныйЛист = Строка.МаршрутныйЛист;
				НоваяСтрокаВосстановления.КлючСвязиЭтапыБрак = СтрокаЭтап.КлючСвязи;
				НоваяСтрокаВосстановления.Количество = Мин(Остаток, Строка.Количество);
				
				Остаток = Остаток - НоваяСтрокаВосстановления.Количество;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаЭтап.Количество = СтрокаЭтап.КоличествоНовое Тогда
			Продолжить;
		КонецЕсли;
		
		// Установка нового количества для этапов.
		ЭтапСпецификации = ЗаказОбъект.Этапы.НайтиСтроки(ОтборКлючСвязи)[0];
		
		НовоеКоличествоЭтапов = СтрокаЭтап.КоличествоНовое;
		ИсходноеКоличествоЭтапов = ЭтапСпецификации.Количество;
		
		ЭтапСпецификации.Количество = НовоеКоличествоЭтапов;
		
		Если ЭтапСпецификации.Количество = 0 Тогда
			ПланированиеПроизводства.УдалитьЭтапПроизводства(ЗаказОбъект, ЭтапСпецификации.КлючСвязи, Отказ, ОписаниеОшибки);
			Если Не Отказ Тогда
				Продолжить;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если НовоеКоличествоЭтапов < ИсходноеКоличествоЭтапов Тогда
			
			СокращенныйЭтап = СокращенныеЭтапы.Добавить();
			СокращенныйЭтап.КлючСвязи = СтрокаЭтап.КлючСвязи;
			СокращенныйЭтап.КоличествоЭтапов = НовоеКоличествоЭтапов;
			СокращенныйЭтап.КоличествоЭтаповИсходный = ИсходноеКоличествоЭтапов;
			
			НайденныеСтроки = ЗаказОбъект.МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючСвязиЭтапы, ПроизводитсяВПроцессе", СтрокаЭтап.КлючСвязи, Истина));
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.Количество = Строка.Количество * НовоеКоличествоЭтапов / ИсходноеКоличествоЭтапов;
				Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * НовоеКоличествоЭтапов / ИсходноеКоличествоЭтапов;
			КонецЦикла;
			
		Иначе
			
			НайденныеСтроки = ЗаказОбъект.МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючСвязиЭтапы, Отменено", СтрокаЭтап.КлючСвязи, Ложь));
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.Количество = Строка.Количество * НовоеКоличествоЭтапов / ИсходноеКоличествоЭтапов;
				Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * НовоеКоличествоЭтапов / ИсходноеКоличествоЭтапов;
			КонецЦикла;
			
		КонецЕсли;
		
		// Установка нового количества для остальных табличных частей.
		НайденныеСтроки = ЗаказОбъект.ВыходныеИзделия.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Количество = Строка.Количество * НовоеКоличествоЭтапов / ИсходноеКоличествоЭтапов;
			Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * НовоеКоличествоЭтапов / ИсходноеКоличествоЭтапов;
		КонецЦикла;
			
		НайденныеСтроки = ЗаказОбъект.Трудозатраты.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Количество = Строка.Количество * НовоеКоличествоЭтапов / ИсходноеКоличествоЭтапов;
		КонецЦикла;
		
	КонецЦикла;
	
	// МатериалыИУслуги (кроме полуфабрикатов, производимых в процессе)
	КорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.СкорректироватьЗаказМатериаловВПроизводство(ЗаказНаПроизводство, КлючСвязиПродукция, СокращенныеЭтапы);
	
	// Уменьшение количество продукции.
	СтруктураОтбора = Новый Структура("КлючСвязи", КлючСвязиПродукция);
	
	Продукция = ЗаказОбъект.Продукция.НайтиСтроки(СтруктураОтбора)[0];
	
	КоэффициентУпаковки = 1;
	Если ЗначениеЗаполнено(Упаковка) Тогда
		КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	КонецЕсли;
	
	КоэффициентУпаковкиПродукции = 1;
	Если ЗначениеЗаполнено(Продукция.Упаковка) Тогда
		КоэффициентУпаковкиПродукции = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Продукция.Упаковка, Продукция.Номенклатура);
	КонецЕсли;
	
	Продукция.КоличествоУпаковок = КоличествоУпаковок * КоэффициентУпаковки / КоэффициентУпаковкиПродукции;
	Продукция.ГрафикРассчитан = Ложь;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Продукция, СтруктураДействий, Неопределено);
	
	ЗаказОбъект.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
	
	Если Режим = "Запись" Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Обработки.ВводКорректировкиЗаказаМатериалов.СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(ЗаказОбъект, 
				ПараметрыРедактированияМатериалов, 
				КорректировкиЗаказаМатериалов);
					
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Отказ = Истина;
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки; 
		
	Иначе
		
		Если ПараметрыРедактированияМатериалов.ИспользоватьКорректировки Тогда 
			
			Обработки.ВводКорректировкиЗаказаМатериалов.ПоместитьРезультатКорректировкиСпецификацииЗаказаВХранилище(КлючСвязиПродукция,
				ПараметрыРедактированияМатериалов, 
				КорректировкиЗаказаМатериалов);
			
		Иначе
			
			Обработки.ВводКорректировкиЗаказаМатериалов.СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(ЗаказОбъект, 
				ПараметрыРедактированияМатериалов, 
				КорректировкиЗаказаМатериалов);
			
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресСпецификация", ДанныеСпецификацииВХранилище(ЗаказОбъект, КлючСвязиПродукция));
		ПараметрыФормы.Вставить("ПараметрыРедактированияМатериалов", ПараметрыРедактированияМатериалов);
		
		ДанныеОбъекта = Документы.ЗаказНаПроизводство.ДанныеОбъектаДляОткрытияРедактированияСпецификации(
			ЗаказОбъект,
			КлючСвязиПродукция,
			УникальныйИдентификатор);
	
		АдресДвиженийЗаказа = ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ДанныеОбъекта);
		ПараметрыФормы.Вставить("АдресДвиженийЗаказа", АдресДвиженийЗаказа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСпецификацииВХранилище(Заказ, КлючСвязи)
	
	Возврат ПланированиеПроизводства.ДанныеСпецификацииЗаказаВХранилище(Заказ, КлючСвязи, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21
