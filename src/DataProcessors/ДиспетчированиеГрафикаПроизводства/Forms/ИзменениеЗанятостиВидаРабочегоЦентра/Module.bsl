//++ Устарело_Производство21
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Заказ.Пустая() Тогда
		Заказ = Параметры.Заказ;
		НомерСтрокиПродукции = Параметры.НомерСтрокиПродукции;
		Этап = Параметры.Этап;
		КлючСвязиПродукция = Параметры.КлючСвязиПродукция;
		КлючСвязиЭтапы = Параметры.КлючСвязиЭтапы;
		ЭтоДиагностикаЭтапа = Истина;
	КонецЕсли;
	
	ЕстьПравоДобавленияДоступностиРЦ = ПравоДоступа("Добавление", Метаданные.Документы.ДоступностьРабочихЦентров);
	
	ВидРабочегоЦентра = Параметры.ВидРабочегоЦентра;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Занятость вида рабочего центра ""%1""';
						|en = 'Occupancy of work center type ""%1""'"),
					ВидРабочегоЦентра);
	
	ПараметрыВидаРЦ = ПараметрыВидаРЦ();
	УчитыватьДоступностьПоГрафикуРаботы = ПараметрыВидаРЦ.УчитыватьДоступностьПоГрафикуРаботы;
	РезервДоступности = ПараметрыВидаРЦ.РезервДоступности;
	ИнтервалПланирования = ПараметрыВидаРЦ.ИнтервалПланирования;
	Если НЕ ПараметрыВидаРЦ.ИспользуютсяВариантыНаладки Тогда
		Элементы.ЗанятостьВариантНаладки.Видимость = Ложь;
	КонецЕсли;
	
	НачалоПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(Параметры.НачалоПериода, ИнтервалПланирования);
	Если Параметры.Свойство("ОкончаниеПериода") Тогда
		ОкончаниеПериода = Параметры.ОкончаниеПериода;
	Иначе
		ОкончаниеПериода = НачалоПериода;
	КонецЕсли; 
	ОкончаниеПериода = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
	
	ЗаполнитьДанные();
	
	ТребуетсяПерепланироватьЗаказы(Ложь, ЭтаФорма);
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		ЗанятостьВТабличномДокументе.ФиксацияСверху = 6;
		Элементы.ЗанятостьВТабличномДокументе.Высота = 5;
	Иначе
		ЗанятостьВТабличномДокументе.ФиксацияСверху = 4;
		Элементы.ЗанятостьВТабличномДокументе.Высота = 4;
	КонецЕсли; 
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	НачалоПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
	Если НачалоПериода > ОкончаниеПериода Тогда
		ОкончаниеПериода = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
	КонецЕсли; 
	
	ЗаполнитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	ОкончаниеПериода = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
	Если ОкончаниеПериода < НачалоПериода Тогда
		НачалоПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
	КонецЕсли; 
	
	ЗаполнитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЕстьПравоДобавленияДоступностиРЦ Тогда
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("ИзменитьДоступность", НСтр("ru = 'Изменить доступность вида рабочих центров';
															|en = 'Change type of work centers capacity'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаПериодаВидаРЦЗавершение", ЭтотОбъект, Расшифровка);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗанятостьВТабличномДокументеПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элементы.ЗанятостьВТабличномДокументе.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено ИЛИ ТипЗнч(ТекущаяОбласть.Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ДатаИнтервала", ТекущаяОбласть.Расшифровка.ДатаИнтервала);
 	СписокСтрок = Занятость.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		Элементы.Занятость.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗанятость

&НаКлиенте
Процедура ЗанятостьПриАктивизацииСтроки(Элемент)
	
	ПоказатьДоступныеВидыРабочихЦентров();
	ЗаполнитьВыбраноЧасовПоЭтапам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПерепланировать(Команда)
	
	ПланированиеПроизводстваКлиент.ПланироватьОчередьЗаказов(Заказ);
	ЗаполнитьДанные();
	ТребуетсяПерепланироватьЗаказы(Ложь, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИспользоватьДругойВидРЦ(Команда)
	
	ИспользоватьДругойВидРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДиагностикаФормированияГрафикаЭтапаПродукции(Команда)
	
	ТекущиеДанные = Элементы.Занятость.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючСвязиПродукция", ТекущиеДанные.КлючСвязиПродукция);
	ПараметрыФормы.Вставить("КлючСвязиЭтапы",     ТекущиеДанные.КлючСвязиЭтапы);
	ПараметрыФормы.Вставить("Заказ",              ТекущиеДанные.Заказ);
	ПараметрыФормы.Вставить("ПолучитьПараметрыЭтапаИзЗаказа");
	ОткрытьФорму("Обработка.ДиспетчированиеГрафикаПроизводства.Форма.ДиагностикаФормированияГрафика", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ЗаполнитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьАльтернативы(Команда)
	
	Элементы.ЗанятостьПоказатьАльтернативы.Пометка = НЕ Элементы.ЗанятостьПоказатьАльтернативы.Пометка;
	Элементы.ГруппаАльтернативныеВидыРЦ.Видимость = Элементы.ЗанятостьПоказатьАльтернативы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанными

&НаСервере
Процедура ЗаполнитьДанные()

	Занятость.Очистить();
	ВидыРабочихЦентров.Очистить();
	ЗанятостьВТабличномДокументе.Очистить();
	
	Если НачалоПериода = '000101010000' ИЛИ ОкончаниеПериода = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 0
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводствоПродукция.Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Назначение,
	|	МАКСИМУМ(ЗаказНаПроизводствоЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК ДатаВыпуска,
	|	ЗаказНаПроизводствоПродукция.ДатаПотребности КАК ДатаПотребности,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка КАК Заказ,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Номер КАК Номер,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Дата КАК Дата,
	|	ЗаказНаПроизводствоПродукция.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПроизводствоЭтапы.Этап КАК Этап,
	|	ЗаказНаПроизводствоЭтапы.НаименованиеЭтапа КАК НаименованиеЭтапа,
	|	ЗаказНаПроизводствоЭтапы.Количество КАК КоличествоЭтапа,
	|	ЗаказНаПроизводствоЭтапы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра КАК ИспользуемыйВидРЦ,
	|	ЕСТЬNULL(ЗаказНаПроизводствоВидыРабочихЦентров.ВариантНаладки, ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.ВариантНаладки) КАК ВариантНаладки,
	|	СУММА(ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Количество) КАК Занято,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция,
	|	ЕСТЬNULL(ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязи, ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.КлючСвязиВидыРабочихЦентров) КАК КлючСвязиВидыРабочихЦентров,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Очередь,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ДатаИнтервала
	|ПОМЕСТИТЬ ТаблицаЗанятость
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЗанятостьВидовРабочихЦентров КАК ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТекущийЗаказ
	|		ПО (ТекущийЗаказ.Ссылка = &Заказ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка = ЗаказНаПроизводствоПродукция.Ссылка
	|			И ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КлючСвязи = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиЭтапыГрафик)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ЗаказНаПроизводствоВидыРабочихЦентров
	|		ПО (ЗаказНаПроизводствоВидыРабочихЦентров.Ссылка = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.ВидРабочегоЦентра = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязиЭтапы = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязиПродукция = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.АльтернативныеВидыРабочихЦентров КАК ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров
	|		ПО (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.Ссылка = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.КлючСвязиЭтапы = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.КлючСвязиПродукция = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|ГДЕ
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Проведен
	|	И ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра = &ВидРабочегоЦентра
	|	И ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ДатаИнтервала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|	И ЗаказНаПроизводствоПродукция.ГрафикРассчитан
	|	И (НЕ &ЭтоДиагностикаЭтапа
	|			ИЛИ (ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Очередь < ЕСТЬNULL(ТекущийЗаказ.Очередь, 0)
	|				ИЛИ ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка = &Заказ
	|					И ЗаказНаПроизводствоПродукция.НомерСтроки < &НомерСтрокиПродукции))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПроизводствоПродукция.Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Назначение,
	|	ЗаказНаПроизводствоПродукция.ДатаПотребности,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Номер,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Дата,
	|	ЗаказНаПроизводствоПродукция.НомерСтроки,
	|	ЗаказНаПроизводствоЭтапы.Этап,
	|	ЗаказНаПроизводствоЭтапы.НаименованиеЭтапа,
	|	ЗаказНаПроизводствоЭтапы.Количество,
	|	ЗаказНаПроизводствоЭтапы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	ЕСТЬNULL(ЗаказНаПроизводствоВидыРабочихЦентров.ВариантНаладки, ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.ВариантНаладки),
	|	ЗаказНаПроизводствоПродукция.КлючСвязи,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Очередь,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ДатаИнтервала,
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ЕСТЬNULL(ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязи, ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.КлючСвязиВидыРабочихЦентров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	ТаблицаЗанятость.Номенклатура,
	|	ТаблицаЗанятость.Назначение,
	|	ТаблицаЗанятость.ДатаПотребности,
	|	ТаблицаЗанятость.ДатаВыпуска,
	|	ТаблицаЗанятость.Заказ,
	|	ТаблицаЗанятость.Номер,
	|	ТаблицаЗанятость.Дата,
	|	ТаблицаЗанятость.НомерСтроки,
	|	ТаблицаЗанятость.Этап,
	|	ТаблицаЗанятость.НаименованиеЭтапа,
	|	ТаблицаЗанятость.КоличествоЭтапа,
	|	ТаблицаЗанятость.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	ТаблицаЗанятость.ИспользуемыйВидРЦ,
	|	ТаблицаЗанятость.ВариантНаладки,
	|	ТаблицаЗанятость.Занято,
	|	ТаблицаЗанятость.КлючСвязиПродукция,
	|	ТаблицаЗанятость.КлючСвязиЭтапы,
	|	ТаблицаЗанятость.КлючСвязиВидыРабочихЦентров,
	|	ТаблицаЗанятость.ДатаИнтервала
	|ИЗ
	|	ТаблицаЗанятость КАК ТаблицаЗанятость
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗанятость.Очередь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗанятость.Заказ КАК Заказ,
	|	ТаблицаЗанятость.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ТаблицаЗанятость.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ТаблицаЗанятость.КлючСвязиВидыРабочихЦентров КАК КлючСвязиВидыРабочихЦентров,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки КАК ИспользуютсяВариантыНаладки,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ВариантНаладки КАК ВариантНаладки,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ВремяРаботы КАК ВремяРаботы,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК Альтернативный,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ АльтернативныеВидыРЦ
	|ИЗ
	|	ТаблицаЗанятость КАК ТаблицаЗанятость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ТаблицаАльтернативныеВидыРабочихЦентров
	|		ПО (ТаблицаАльтернативныеВидыРабочихЦентров.Ссылка = ТаблицаЗанятость.Заказ)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиПродукция = ТаблицаЗанятость.КлючСвязиПродукция)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиЭтапы = ТаблицаЗанятость.КлючСвязиЭтапы)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязи = ТаблицаЗанятость.КлючСвязиВидыРабочихЦентров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗанятость.Заказ,
	|	ТаблицаЗанятость.КлючСвязиПродукция,
	|	ТаблицаЗанятость.КлючСвязиЭтапы,
	|	ТаблицаЗанятость.КлючСвязиВидыРабочихЦентров,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра.ИспользуютсяВариантыНаладки,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ВариантНаладки,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ВремяРаботы,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения,
	|	ИСТИНА,
	|	ТаблицаАльтернативныеВидыРабочихЦентров.НомерСтроки
	|ИЗ
	|	ТаблицаЗанятость КАК ТаблицаЗанятость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.АльтернативныеВидыРабочихЦентров КАК ТаблицаАльтернативныеВидыРабочихЦентров
	|		ПО (ТаблицаАльтернативныеВидыРабочихЦентров.Ссылка = ТаблицаЗанятость.Заказ)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиПродукция = ТаблицаЗанятость.КлючСвязиПродукция)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиЭтапы = ТаблицаЗанятость.КлючСвязиЭтапы)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиВидыРабочихЦентров = ТаблицаЗанятость.КлючСвязиВидыРабочихЦентров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРабочегоЦентра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ
	|	АльтернативныеВидыРЦ.Заказ,
	|	АльтернативныеВидыРЦ.КлючСвязиПродукция,
	|	АльтернативныеВидыРЦ.КлючСвязиЭтапы,
	|	АльтернативныеВидыРЦ.КлючСвязиВидыРабочихЦентров,
	|	АльтернативныеВидыРЦ.ВидРабочегоЦентра,
	|	АльтернативныеВидыРЦ.ИспользуютсяВариантыНаладки,
	|	АльтернативныеВидыРЦ.ВариантНаладки,
	|	АльтернативныеВидыРЦ.ВремяРаботы,
	|	АльтернативныеВидыРЦ.ЕдиницаИзмерения,
	|	АльтернативныеВидыРЦ.Альтернативный,
	|	АльтернативныеВидыРЦ.Приоритет
	|ИЗ
	|	АльтернативныеВидыРЦ КАК АльтернативныеВидыРЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	АльтернативныеВидыРЦ.Альтернативный,
	|	АльтернативныеВидыРЦ.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ
	|	ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра,
	|	ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала,
	|	ВЫБОР
	|		КОГДА ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|			ТОГДА ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоВидуРЦОборот
	|		ИНАЧЕ ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоРЦОборот
	|	КОНЕЦ - ДоступностьВидовРабочихЦентровОбороты.ЗанятоОборот КАК СвободноВремени
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров.Обороты(
	|			,
	|			,
	|			,
	|			ДатаИнтервала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|				И ВидРабочегоЦентра В
	|					(ВЫБРАТЬ
	|						АльтернативныеВидыРЦ.ВидРабочегоЦентра
	|					ИЗ
	|						АльтернативныеВидыРЦ)) КАК ДоступностьВидовРабочихЦентровОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ЕСТЬNULL(ЗаказНаПроизводствоВидыРабочихЦентров.ВариантНаладки.Представление, ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.ВариантНаладки.Представление) КАК ВариантНаладки
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЗанятостьВидовРабочихЦентров КАК ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ЗаказНаПроизводствоВидыРабочихЦентров
	|		ПО (ЗаказНаПроизводствоВидыРабочихЦентров.Ссылка = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.ВидРабочегоЦентра = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязиЭтапы = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязиПродукция = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.АльтернативныеВидыРабочихЦентров КАК ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров
	|		ПО (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.Ссылка = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.КлючСвязиЭтапы = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.КлючСвязиПродукция = ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|ГДЕ
	|	ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Проведен
	|	И (ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра В
	|				(ВЫБРАТЬ
	|					АльтернативныеВидыРЦ.ВидРабочегоЦентра
	|				ИЗ
	|					АльтернативныеВидыРЦ
	|				ГДЕ
	|					АльтернативныеВидыРЦ.ИспользуютсяВариантыНаладки)
	|			ИЛИ ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра В
	|				(ВЫБРАТЬ
	|					АльтернативныеВидыРЦ.ВидРабочегоЦентра
	|				ИЗ
	|					АльтернативныеВидыРЦ
	|				ГДЕ
	|					АльтернативныеВидыРЦ.ИспользуютсяВариантыНаладки))
	|	И ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.ДатаИнтервала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|	И ЗаказНаПроизводствоЗанятостьВидовРабочихЦентров.Ссылка.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан)";
	
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода",  ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("Заказ",                Заказ);
	Запрос.УстановитьПараметр("НомерСтрокиПродукции", НомерСтрокиПродукции);
	Запрос.УстановитьПараметр("ЭтоДиагностикаЭтапа",  ЭтоДиагностикаЭтапа);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаАльтернативныеВРЦ = Результат[3].Выгрузить();
	ТаблицаДоступностьАльтернативныеВРЦ = Результат[4].Выгрузить();
	ТаблицаВариантыНаладкиАльтернативныеВРЦ = Результат[5].Выгрузить();
	
	ВыборкаЗанятость = Результат[1].Выбрать();
	Пока ВыборкаЗанятость.Следующий() Цикл
		
		ДанныеСтроки = Занятость.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаЗанятость);
		
		ДанныеСтроки.ЗанятоСтрокой = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеСтроки.Занято);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗанятость.Номер);
		ПредставлениеЗаказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = '№%1 от %2 (строка %3)';
											|en = 'No. %1 from %2 (line %3)'"),
										НомерДокумента,
										Формат(ВыборкаЗанятость.Дата, "ДЛФ=D"),
										Формат(ВыборкаЗанятость.НомерСтроки, "ЧГ="));
										
		ДанныеСтроки.ПредставлениеЗаказа = ПредставлениеЗаказа;
		
		ДанныеСтроки.ПериодСтрокой = ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(
										ВыборкаЗанятость.ДатаИнтервала,
										ИнтервалПланирования);
		
		// Получим виды рабочих центров, которым можно назначить выполнение текущего этапа
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Заказ", ВыборкаЗанятость.Заказ);
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ВыборкаЗанятость.КлючСвязиПродукция);
		СтруктураПоиска.Вставить("КлючСвязиЭтапы", ВыборкаЗанятость.КлючСвязиЭтапы);
		СтруктураПоиска.Вставить("КлючСвязиВидыРабочихЦентров", ВыборкаЗанятость.КлючСвязиВидыРабочихЦентров);
									
		АльтернативныеВРЦ = ТаблицаАльтернативныеВРЦ.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеАльтернативныйВидРЦ Из АльтернативныеВРЦ Цикл
			СтрокаАльтернативныйВРЦ = ДанныеСтроки.ДоступныеВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАльтернативныйВРЦ, ДанныеАльтернативныйВидРЦ);
			
			// ТребуетсяВремени
			СтрокаАльтернативныйВРЦ.ТребуетсяВремени = ВыборкаЗанятость.КоличествоЭтапа
														/ Макс(ВыборкаЗанятость.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,1)
														* ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																		ДанныеАльтернативныйВидРЦ.ВремяРаботы,
																		ДанныеАльтернативныйВидРЦ.ЕдиницаИзмерения);
																		
			СтрокаАльтернативныйВРЦ.ТребуетсяВремениСтрокой = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(
																		СтрокаАльтернативныйВРЦ.ТребуетсяВремени);
																		
			// СвободноВремени
			СтруктураПоиска = Новый Структура("ВидРабочегоЦентра,ДатаИнтервала", ДанныеАльтернативныйВидРЦ.ВидРабочегоЦентра, ВыборкаЗанятость.ДатаИнтервала);
   			ДоступностьВидаРЦ = ТаблицаДоступностьАльтернативныеВРЦ.НайтиСтроки(СтруктураПоиска);
			Если ДоступностьВидаРЦ.Количество() <> 0 Тогда
				СтрокаАльтернативныйВРЦ.СвободноВремени = ДоступностьВидаРЦ[0].СвободноВремени;
				СтрокаАльтернативныйВРЦ.СвободноВремениСтрокой = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(
																		СтрокаАльтернативныйВРЦ.СвободноВремени);
			КонецЕсли; 
			
			// ИспользуемыеВариантыНаладки
			СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ДанныеАльтернативныйВидРЦ.ВидРабочегоЦентра);
   			ВариантыНаладкиВидаРЦ = ТаблицаВариантыНаладкиАльтернативныеВРЦ.НайтиСтроки(СтруктураПоиска);
			Для каждого ДанныеВариантНаладки Из ВариантыНаладкиВидаРЦ Цикл
				СтрокаАльтернативныйВРЦ.ИспользуемыеВариантыНаладки = СтрокаАльтернативныйВРЦ.ИспользуемыеВариантыНаладки 
																		+ ?(СтрокаАльтернативныйВРЦ.ИспользуемыеВариантыНаладки = "", "", ",")
																		+ ДанныеВариантНаладки.ВариантНаладки;
			КонецЦикла;
		КонецЦикла; 
		
		ЗаполнитьСведенияОбАльтернативахВСтрокеЗанятость(ДанныеСтроки);
		
	КонецЦикла;

	ЗаполнитьЗанятостьВТабличномДокументе();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбАльтернативахВСтрокеЗанятость(ДанныеСтроки)

	ЕстьАльтернативы = Ложь;

	СвободноеВремяАльтернативныхВидовРЦ = 0;
	Для каждого СтрокаАльтернативныйВРЦ Из ДанныеСтроки.ДоступныеВидыРабочихЦентров Цикл
		Если СтрокаАльтернативныйВРЦ.ВидРабочегоЦентра <> ДанныеСтроки.ИспользуемыйВидРЦ Тогда
			СвободноеВремяАльтернативныхВидовРЦ = СвободноеВремяАльтернативныхВидовРЦ + СтрокаАльтернативныйВРЦ.СвободноВремени; 
			ЕстьАльтернативы = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	ДанныеСтроки.ЕстьАльтернативы = ЕстьАльтернативы;
	
	Если ДанныеСтроки.ЕстьАльтернативы Тогда
		ДанныеСтроки.СвободноеВремяАльтернативныхВидовРЦ = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(СвободноеВремяАльтернативныхВидовРЦ);
	Иначе
		ДанныеСтроки.СвободноеВремяАльтернативныхВидовРЦ = "-";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗанятостьВТабличномДокументе()

	ТабличныйДокумент = ЗанятостьВТабличномДокументе;
	
	МакетОформления = Обработки.ДиспетчированиеГрафикаПроизводства.ПолучитьМакет("ЗанятостьВидаРЦ");
	МакетОформленияДиагностики = Обработки.ДиспетчированиеГрафикаПроизводства.ПолучитьМакет("ДиагностикаГрафика");
	
	// Вывод шапки
	#Область ШапкаЗанятости
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалЧас");
		СтруктураПараметры = Новый Структура("ЧасНачалоДня");
		
	Иначе
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалДень");
		СтруктураПараметры = Новый Структура("ЗаголовокПериода");
		
	КонецЕсли;
	
	ТекущийИнтервал = НачалоПериода;
	
	Пока ТекущийИнтервал <= ОкончаниеПериода Цикл
		
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			
			СтруктураПараметры.ЧасНачалоДня = ТекущийИнтервал;
				
		Иначе
			
			СтруктураПараметры.ЗаголовокПериода = ТекущийИнтервал;
			
		КонецЕсли;
		
		ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
		
		Если ТекущийИнтервал = НачалоПериода Тогда
			ТабличныйДокумент.Вывести(ОбластьИнтервал);
		Иначе
			ТабличныйДокумент.Присоединить(ОбластьИнтервал);
		КонецЕсли; 
		
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			ТекущийИнтервал = КонецДня(ТекущийИнтервал) + 1;
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
			ТекущийИнтервал = КонецДня(ТекущийИнтервал) + 1;
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
			ТекущийИнтервал = КонецНедели(ТекущийИнтервал) + 1;
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
			ТекущийИнтервал = КонецМесяца(ТекущийИнтервал) + 1;
		КонецЕсли;
		
	КонецЦикла;
	#КонецОбласти
	
	// Вывод данных
	#Область ДанныеЗанятости
	ОбластьИнтервалДанные = МакетОформления.ПолучитьОбласть("ИнтервалДанные");
	ОбластьИнтервалДанныеБезОграниченияДоступности = МакетОформления.ПолучитьОбласть("ИнтервалДанныеБезОграниченияДоступности");
	
	ОбластиДляВыводаДоступности = Новый Структура;
	ОбластиДляВыводаДоступности.Вставить("ИнтервалДанные", ОбластьИнтервалДанные);
	ОбластиДляВыводаДоступности.Вставить("ИнтервалДанныеБезОграниченияДоступности", ОбластьИнтервалДанныеБезОграниченияДоступности);
	
	ИсполнительЭтапа = Новый Структура;
	
	ИсполнительЭтапа.Вставить("Исполнитель", ВидРабочегоЦентра);
	ИсполнительЭтапа.Вставить("УчитыватьДоступностьПоГрафикуРаботы", УчитыватьДоступностьПоГрафикуРаботы);
	ИсполнительЭтапа.Вставить("ПроизводствоНаСтороне", Ложь);
	ИсполнительЭтапа.Вставить("ГрафикРаботыПартнера");
	
	ИсполнительЭтапа.Вставить("РезервДоступности", РезервДоступности);
	
	ТаблицаЗагрузкаВидаРЦ = Обработки.ДиспетчированиеГрафикаПроизводства.СоздатьТаблицуЗагрузки();
	
	Если ЭтоДиагностикаЭтапа Тогда
		ТекущийЭтап = Новый Структура;
		ТекущийЭтап.Вставить("Заказ", Заказ);
		ТекущийЭтап.Вставить("НомерСтрокиПродукция", НомерСтрокиПродукции);
		ТекущийЭтап.Вставить("КлючСвязиПродукция", КлючСвязиПродукция);
		ТекущийЭтап.Вставить("КлючСвязиЭтапы", КлючСвязиЭтапы);
	Иначе
		ТекущийЭтап = Неопределено;
	КонецЕсли; 
	
	Обработки.ДиспетчированиеГрафикаПроизводства.ЗаполнитьЗагрузку(
				ТаблицаЗагрузкаВидаРЦ, 
				ИсполнительЭтапа, 
				НачалоПериода, 
				КонецДня(ОкончаниеПериода),
				ТекущийЭтап);
	
	Обработки.ДиспетчированиеГрафикаПроизводства.ВывестиДанныеОЗагрузкеВидаРЦВТабличныйДокумент(
				НачалоПериода, 
				КонецДня(ОкончаниеПериода),
				ТаблицаЗагрузкаВидаРЦ, 
				ОбластиДляВыводаДоступности, 
				ИнтервалПланирования,
				ИсполнительЭтапа,
				Истина,
				"ИнтервалДанные",
				ТабличныйДокумент,
				Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ЗаменаИспользуемыхВидовРабочихЦентров

&НаКлиенте
Процедура ИспользоватьДругойВидРЦ()

	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ Элементы.Занятость.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В выбранных этапах будет использоваться вид рабочего центра ""%1"".
									|Продолжить?';
									|en = '""%1"" work center type will be used in the selected stages.
									|Continue? '"),
						Строка(ТекущиеДанные.ВидРабочегоЦентра));
								
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
														|en = 'Continue'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИспользоватьДругойВидРЦЗавершение", ЭтотОбъект, ТекущиеДанные.ВидРабочегоЦентра);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДругойВидРЦЗавершение(РезультатВопроса, НовыйВидРабочегоЦентра) Экспорт
	Перем ВсегоЗамен, ВыполненоЗамен, ИзмененныеЗаказы;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьДругойВидРЦНаСервере(НовыйВидРабочегоЦентра, ВсегоЗамен, ВыполненоЗамен, ИзмененныеЗаказы);
	
	Если ВыполненоЗамен = 0 Тогда
		
		// Ни в одном заказе не смогли заменить
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось использовать новый вид рабочего центра.';
									|en = 'Cannot use a new kind of the work center.'"));
		Возврат;
		
	ИначеЕсли ВыполненоЗамен = ВсегоЗамен Тогда
		
		// Успешно заменили во всех заказах
		ТекстЗавершеннойОперации = НСтр("ru = 'Для всех выбранных этапов установлено использование нового вида рабочего центра';
										|en = 'Usage of a new work center type is set for all the selected stages'");
		ТекстПоясненияЗавершеннойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Изменено этапов: %1 из %2';
															|en = 'Stages changed: %1 out of %2'"),
														Формат(ВыполненоЗамен, "ЧГ=0"),
														Формат(ВсегоЗамен, "ЧГ=0"));
														
		ПоказатьОповещениеПользователя(ТекстЗавершеннойОперации,, ТекстПоясненияЗавершеннойОперации);
		
	Иначе
		
		// В некоторых заказах не смогли заменить
		ТекстЗавершеннойОперации = НСтр("ru = 'Использование нового вида рабочего центра выполнено не для всех выбранных этапов';
										|en = 'Usage of a new work center type is executed not for all the selected stages'");
		ТекстПоясненияЗавершеннойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Изменено этапов: %1 из %2';
															|en = 'Stages changed: %1 out of %2'"),
														Формат(ВыполненоЗамен, "ЧГ=0"),
														Формат(ВсегоЗамен, "ЧГ=0"));
														
		ПоказатьОповещениеПользователя(ТекстЗавершеннойОперации,, ТекстПоясненияЗавершеннойОперации);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Использование нового вида рабочего центра выполнено не для всех выбранных этапов (в %1 из %2).';
											|en = 'Usage of a new work center type is executed not for all the selected stages (in %1 out of %2).'"), 
										Формат(ВыполненоЗамен, "ЧГ=0"), 
										Формат(ВсегоЗамен, "ЧГ=0"));
										
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли; 
	
	Оповестить("Запись_ЗаказНаПроизводство", ИзмененныеЗаказы, "ИзменениеЗанятостиВидаРабочегоЦентра");
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
	ПоказатьДоступныеВидыРабочихЦентров();
	ТребуетсяПерепланироватьЗаказы(Истина, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьДругойВидРЦНаСервере(НовыйВидРабочегоЦентра, ВсегоЗамен, ВыполненоЗамен, ИзмененныеЗаказы)
	
	ВыделенныеСтроки = Элементы.Занятость.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеЗаказы = Новый Массив;
	ВсегоЗамен = 0;
	ВыполненоЗамен = 0;
	
	// Сформируем параметры замены по каждому заказу
	ДанныеЗаменыПоЗаказам = Новый Соответствие;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Занятость.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеЗамены = ДанныеЗаменыПоЗаказам.Получить(ДанныеСтроки.Заказ);
	    Если ДанныеЗамены = Неопределено Тогда
			ДанныеЗамены = Новый Массив;
		КонецЕсли;
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("Заказ",                       ДанныеСтроки.Заказ);
		ПараметрыЗамены.Вставить("КлючСвязиПродукция",          ДанныеСтроки.КлючСвязиПродукция);
		ПараметрыЗамены.Вставить("КлючСвязиЭтапы",              ДанныеСтроки.КлючСвязиЭтапы);
		ПараметрыЗамены.Вставить("КлючСвязиВидыРабочихЦентров", ДанныеСтроки.КлючСвязиВидыРабочихЦентров);
		ПараметрыЗамены.Вставить("ВидРабочегоЦентра",           НовыйВидРабочегоЦентра);
		ДанныеЗамены.Добавить(ПараметрыЗамены);
		ДанныеЗаменыПоЗаказам.Вставить(ДанныеСтроки.Заказ, ДанныеЗамены);
		
		ВсегоЗамен = ВсегоЗамен + 1;
	КонецЦикла;
	
	// Обойдем каждый заказ
	Для каждого КлючИЗначениеЗамены Из ДанныеЗаменыПоЗаказам Цикл
		
		ЗаказОбъект = КлючИЗначениеЗамены.Ключ.ПолучитьОбъект();
		
		ЗаказОбъект.ЗаменитьИспользуемыйВидРЦ(КлючИЗначениеЗамены.Значение);
		
		ЗаменВЗаказе = 0;
		СтрокиВКоторыхВыполняетсяЗамена = Новый Массив;
		Для каждого ПараметрыЗамены Из КлючИЗначениеЗамены.Значение Цикл
			СтрокиВКоторыхВыполняетсяЗамена.Добавить(ПараметрыЗамены);
			ЗаменВЗаказе = ЗаменВЗаказе + 1;
		КонецЦикла;
		
		Попытка
		
			Если ЗаказОбъект.Проведен Тогда
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ЗаказОбъект.Записать();
			КонецЕсли;
			
			// Отметим замену в этапах графика, которые относятся к одному этапу
			Для каждого ПараметрыЗамены Из СтрокиВКоторыхВыполняетсяЗамена Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Заказ",                       ПараметрыЗамены.Заказ);
				СтруктураПоиска.Вставить("КлючСвязиПродукция",          ПараметрыЗамены.КлючСвязиПродукция);
				СтруктураПоиска.Вставить("КлючСвязиЭтапы",              ПараметрыЗамены.КлючСвязиЭтапы);
				СтруктураПоиска.Вставить("КлючСвязиВидыРабочихЦентров", ПараметрыЗамены.КлючСвязиВидыРабочихЦентров);
	 			СписокСтрок = Занятость.НайтиСтроки(СтруктураПоиска);
				Для каждого ДанныеСтроки Из СписокСтрок Цикл
					ДанныеСтроки.ИспользуемыйВидРЦ = НовыйВидРабочегоЦентра;
					ДанныеСтроки.ТекущийВидРабочегоЦентраБольшеНеИспользуется = (НовыйВидРабочегоЦентра <> ВидРабочегоЦентра);
					ЗаполнитьСведенияОбАльтернативахВСтрокеЗанятость(ДанныеСтроки);
				КонецЦикла;
			КонецЦикла;
			
			ИзмененныеЗаказы.Добавить(ЗаказОбъект.Ссылка);
			
			ВыполненоЗамен = ВыполненоЗамен + ЗаменВЗаказе;
		
		Исключение
			
			СобытиеЖурнала = НСтр("ru = 'Выполнение операции';
									|en = 'Performing operation'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурнала,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Оформление этапов, для которых текущий вид РЦ не используется
	#Область ТекущийВидРабочегоЦентраБольшеНеИспользуется
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Занятость.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Занятость.ТекущийВидРабочегоЦентраБольшеНеИспользуется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	#КонецОбласти
	
	// Выделение альтернативного вида РЦ
	#Область АльтернативныйВРЦЦвет
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВидРабочегоЦентра.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.Альтернативный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАльтернативногоВидаРабочихЦентров);
	#КонецОбласти
	
	// Дата выпуска позже даты потребности
	#Область ДатаВыпускаПозжеДатыПотребности
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗанятостьДатаВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Занятость.ДатаВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Занятость.ДатаПотребности");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
	// Варианты наладки не используются
	#Область ВариантыНаладкиНеИспользуются
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВариантНаладки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	#КонецОбласти
	
	// Скрытие вариантов наладки в альтернативных видах РЦ
	#Область СкрытиеВариантовНаладки
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВариантНаладки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровИспользуемыеВариантыНаладки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяВариантНаладкиВАльтернативныхВидахРЦ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Стандартное оформление номенклатуры
	#Область Номенклатура

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ЗанятостьХарактеристика",
																		     "Занятость.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗанятостьНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Занятость.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без назначения>';
																|en = '<No assignment>'"));
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДоступныеВидыРабочихЦентров()

	ВидыРабочихЦентров.Очистить();
	ИспользуетсяВариантНаладкиВАльтернативныхВидахРЦ = Ложь; // используется для управления видимостью варианта наладки
	
	Если Элементы.Занятость.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчтенныеЭтапы = Новый Массив;
	
	// Добавим доступные виды РЦ для первого выбранного этапа
	ТекущиеДанные = Занятость.НайтиПоИдентификатору(Элементы.Занятость.ВыделенныеСтроки[0]);
	ДоступныеВидыРабочихЦентров = ТекущиеДанные.ДоступныеВидыРабочихЦентров;
	Для каждого СтрокаВидРЦ Из ДоступныеВидыРабочихЦентров Цикл
		Если СтрокаВидРЦ.ВидРабочегоЦентра <> ТекущиеДанные.ИспользуемыйВидРЦ Тогда
			ЗаполнитьЗначенияСвойств(ВидыРабочихЦентров.Добавить(), СтрокаВидРЦ);
			ИспользуетсяВариантНаладкиВАльтернативныхВидахРЦ = ИспользуетсяВариантНаладкиВАльтернативныхВидахРЦ 
																ИЛИ СтрокаВидРЦ.ИспользуетсяВариантНаладки;
																
			ПараметрыЭтапа = Новый Структура("Заказ,КлючСвязиПродукция,КлючСвязиЭтапы,ВидРабочегоЦентра");
			ЗаполнитьЗначенияСвойств(ПараметрыЭтапа, ТекущиеДанные);
			ПараметрыЭтапа.ВидРабочегоЦентра = СтрокаВидРЦ.ВидРабочегоЦентра;
			УчтенныеЭтапы.Добавить(ПараметрыЭтапа);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		
		Для Сч = 1 По Элементы.Занятость.ВыделенныеСтроки.Количество() - 1 Цикл
			СтрокаЗанятость = Занятость.НайтиПоИдентификатору(Элементы.Занятость.ВыделенныеСтроки[Сч]);
			
			ПропуститьЭтап = Ложь;
			Для каждого ПараметрыЭтапа Из УчтенныеЭтапы Цикл
				Если ПараметрыЭтапа.Заказ = СтрокаЗанятость.Заказ
					И ПараметрыЭтапа.КлючСвязиПродукция = СтрокаЗанятость.КлючСвязиПродукция
					И ПараметрыЭтапа.КлючСвязиЭтапы = СтрокаЗанятость.КлючСвязиЭтапы 
					И ПараметрыЭтапа.ВидРабочегоЦентра = СтрокаВидРЦ.ВидРабочегоЦентра Тогда
					// Требуемое время для такого этапа уже учли
					ПропуститьЭтап = Истина;
					Продолжить;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ПропуститьЭтап Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ВидРабочегоЦентра,ВариантНаладки", СтрокаВидРЦ.ВидРабочегоЦентра, СтрокаВидРЦ.ВариантНаладки);
   			СписокДоступныхВидовРЦ = СтрокаЗанятость.ДоступныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			Если СписокДоступныхВидовРЦ.Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаВидРЦ);
				Прервать;
			КонецЕсли;
			
			// Нужно просуммировать требуемое время по выбранным этапам
			Для каждого ДанныеДоступногоВидаРЦ Из СписокДоступныхВидовРЦ Цикл
				СтрокаВидРЦ.ТребуетсяВремени = СтрокаВидРЦ.ТребуетсяВремени + ДанныеДоступногоВидаРЦ.ТребуетсяВремени; 
				
				ПараметрыЭтапа = Новый Структура("Заказ,КлючСвязиПродукция,КлючСвязиЭтапы,ВидРабочегоЦентра");
				ЗаполнитьЗначенияСвойств(ПараметрыЭтапа, СтрокаЗанятость);
				ПараметрыЭтапа.ВидРабочегоЦентра = СтрокаВидРЦ.ВидРабочегоЦентра;
				УчтенныеЭтапы.Добавить(ПараметрыЭтапа);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла; 

	// Удалим виды РЦ которые нельзя использовать
	Для каждого СтрокаВидРЦ Из СтрокиКУдалению Цикл
		ВидыРабочихЦентров.Удалить(СтрокаВидРЦ);
	КонецЦикла;
	
	// Заполним прочие реквизиты
	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		СтрокаВидРЦ.ТребуетсяВремениСтрокой = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(СтрокаВидРЦ.ТребуетсяВремени);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПериодаВидаРЦЗавершение(ВыбранныйЭлемент, Расшифровка) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ИзменитьДоступность" Тогда
		
		ПланированиеПроизводстваКлиент.ИзменитьДоступностьВидаРЦ(ВидРабочегоЦентра, Расшифровка.ДатаИнтервала);

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ТребуетсяПерепланироватьЗаказы(ТребуетсяПерепланировать, Форма)

	Если ТребуетсяПерепланировать Тогда
		Форма.Элементы.СтраницыПерепланирование.ТекущаяСтраница = Форма.Элементы.СтраницаПерепланированиеТребуется;
	Иначе
		Форма.Элементы.СтраницыПерепланирование.ТекущаяСтраница = Форма.Элементы.СтраницаПерепланированиеНеТребуется;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыбраноЧасовПоЭтапам()

	ВыбраноЧасовПоЭтапам = 0;
	
	ВыделенныеСтроки = Элементы.Занятость.ВыделенныеСтроки;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Занятость.НайтиПоИдентификатору(ИдентификаторСтроки);
		ВыбраноЧасовПоЭтапам = ВыбраноЧасовПоЭтапам + ДанныеСтроки.Занято;
	КонецЦикла; 

	ВыбраноЧасовПоЭтапамСтрокой = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ВыбраноЧасовПоЭтапам);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВидаРЦ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРабочихЦентров.ИспользуютсяВариантыНаладки,
	|	ВидыРабочихЦентров.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ВидыРабочихЦентров.УчитыватьДоступностьПоГрафикуРаботы,
	|	ВидыРабочихЦентров.РезервДоступности
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ВидРабочегоЦентра);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ПараметрыВидыРабочегоЦентра = Новый Структура("ИспользуютсяВариантыНаладки,ИнтервалПланирования,УчитыватьДоступностьПоГрафикуРаботы,РезервДоступности");
	ЗаполнитьЗначенияСвойств(ПараметрыВидыРабочегоЦентра, Выборка);
	
	Возврат ПараметрыВидыРабочегоЦентра;
	
КонецФункции
 
#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21