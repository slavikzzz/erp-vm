//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ОбработатьПараметрыФормы(Параметры) Тогда
		
		Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
			
			ПараметрыОтбора = Параметры.СтруктураБыстрогоОтбора;
			
		Иначе
			
			ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ФормаДиспетчированияГрафикаПроизводства", "ПараметрыОтбора");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
			
			РасширенныйРежим = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "РасширенныйРежим", 0);
			
			ЗаполнитьЗначенияСвойств(
				ЭтаФорма,
				ПараметрыОтбора,
				"Ответственный,
				|Подразделение,
				|Приоритет,
				|ЗаказыОтбор,
				|ПродукцияОтбор,
				|ЭтапыОтбор");
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборВТаблицеЗаказы(ЭтаФорма, ЗаказыОтбор, Ложь);
	УстановитьОтборВТаблицеПродукция(ЭтаФорма, ПродукцияОтбор, Ложь);
	УстановитьОтборВТаблицеЭтапы(ЭтаФорма, ЭтапыОтбор, Ложь);
	
	ПродукцияРежим = "ПоЗаказам";
	ИспользоватьОжиданияОбработчиков = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	ОбновитьИндикаторы();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборИОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	УстановитьОтборИОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриоритетПриИзменении(Элемент)
	
	УстановитьОтборИОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРежимПриИзменении(Элемент)
	
	Таблицы = Новый Структура("Этапы");
	
	Если ЭтапыРежим = "ПоЗаказам" Тогда
		
		МассивЗаказов = ВыделенныеЗаказы();
		ПолучитьТаблицыНаСервере(Таблицы, МассивЗаказов);
		
	ИначеЕсли ЭтапыРежим = "ПоПродукции" Тогда
		
		ВыделеннаяПродукция = ВыделеннаяПродукция();
		ПолучитьТаблицыНаСервере(Таблицы, ВыделеннаяПродукция.МассивЗаказов, ВыделеннаяПродукция.МассивКодовСтрокПродукции);
		
	Иначе
		
		ПолучитьТаблицыНаСервере(Таблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияРежимПриИзменении(Элемент)
	
	Таблицы = Новый Структура("Продукция");
	
	Если ПродукцияРежим = "ПоЗаказам" Тогда
		
		МассивЗаказов = ВыделенныеЗаказы();
		
	Иначе
		
		МассивЗаказов = Неопределено;
		
	КонецЕсли;
	
	ПолучитьТаблицыНаСервере(Таблицы, МассивЗаказов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборПриИзменении(Элемент)
	
	УстановитьОтборВТаблицеЗаказы(ЭтаФорма, ЗаказыОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтборПриИзменении(Элемент)
	
	УстановитьОтборВТаблицеПродукция(ЭтаФорма, ПродукцияОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтборПриИзменении(Элемент)
	
	УстановитьОтборВТаблицеЭтапы(ЭтаФорма, ЭтапыОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндикаторПрименяютсяНедействующиеСпецификацииНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Подразделение);
	ПараметрыФормы.Вставить("Ответственный", Ответственный);
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ЗаменаНедействующихСпецификаций", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЭтапыНажатие(Элемент)
	
	ЭтапыРежим = "ПоПродукции";
	
	ПропуститьАктивациюСтрокиЗаказы    = Истина;
	ПропуститьАктивациюСтрокиПродукции = Истина;
	ПропуститьАктивациюСтрокиЭтапы     = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭтапыРежим");
	
	Если ИспользоватьОжиданияОбработчиков Тогда
		ПодключитьОбработчикОжидания("ОбработчикАктивизацииСтрокиПродукция", 1, Истина);
	Иначе
		ОбработчикАктивизацииСтрокиПродукция();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЭтапыНажатие(Элемент)
	
	ЭтапыРежим = "";
	
	ПропуститьАктивациюСтрокиЗаказы    = Истина;
	ПропуститьАктивациюСтрокиПродукции = Истина;
	ПропуститьАктивациюСтрокиЭтапы     = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭтапыРежим");
	
	Объект.Этапы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйРежимПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	
	Если ПропуститьАктивациюСтрокиЗаказы Тогда
		ПропуститьАктивациюСтрокиЗаказы = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьОжиданияОбработчиков Тогда
		ПодключитьОбработчикОжидания("ОбработчикАктивизацииСтрокиЗаказы", 0.1, Истина);
	Иначе
		ОбработчикАктивизацииСтрокиЗаказы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ЗаказыСостояниеГиперссылка" ИЛИ Поле.Имя = "ЗаказыСостояниеТекст" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заказ", ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("Обработка.ДиспетчированиеГрафикаПроизводства.Форма.Планирование", 
			ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриАктивизацииСтроки(Элемент)
	
	Если ПропуститьАктивациюСтрокиПродукции Тогда
		ПропуститьАктивациюСтрокиПродукции = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьОжиданияОбработчиков Тогда
		ПодключитьОбработчикОжидания("ОбработчикАктивизацииСтрокиПродукция", 0.1, Истина);
	Иначе
		ОбработчикАктивизацииСтрокиПродукция();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПродукцияЗаказ" Тогда
		
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура ЭтапыПриАктивизацииСтроки(Элемент)
	
	Если ПропуститьАктивациюСтрокиЭтапы Тогда
		ПропуститьАктивациюСтрокиЭтапы = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьОжиданияОбработчиков Тогда
		ПодключитьОбработчикОжидания("ОбработчикАктивизацииСтрокиЭтапы", 0.1, Истина);
	Иначе
		ОбработчикАктивизацииСтрокиЭтапы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЭтапыЗаказ" Тогда
		
		ТекущиеДанныеЭтапы = Элементы.Этапы.ТекущиеДанные;
		
		Если ТекущиеДанныеЭтапы <> Неопределено Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанныеЭтапы.Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДиспетчированиеПроизводства(Команда)
	
	ВыделенныеСтроки = Элементы.Этапы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'"));
		Возврат;
	КонецЕсли;
	
	СписокББВ = Новый Массив;
	МетодикаББВ = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ");
	СписокПланирование = Новый Массив;
	МетодикаПланирование = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование");
	СписокРегистрация = Новый Массив;
	МетодикаРегистрация = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций");
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Этапы.ДанныеСтроки(ВыделеннаяСтрока);
		
		ДанныеЭтапа = Новый Структура;
		ДанныеЭтапа.Вставить("Распоряжение", ДанныеСтроки.Заказ);
		ДанныеЭтапа.Вставить("КодСтрокиЭтапыГрафик", ДанныеСтроки.КодСтроки);
		
		Если ДанныеСтроки.УправлениеМаршрутнымиЛистами = МетодикаББВ Тогда
			СписокББВ.Добавить(ДанныеЭтапа);
		ИначеЕсли ДанныеСтроки.УправлениеМаршрутнымиЛистами = МетодикаПланирование Тогда
			СписокПланирование.Добавить(ДанныеЭтапа);
		ИначеЕсли ДанныеСтроки.УправлениеМаршрутнымиЛистами = МетодикаРегистрация Тогда
			СписокРегистрация.Добавить(ДанныеЭтапа);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СписокББВ) Тогда
		ПараметрыФормы = Новый Структура("СписокЭтапов", СписокББВ);
		ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма", ПараметрыФормы, ЭтаФорма, СписокББВ);
	КонецЕсли;
	Если ЗначениеЗаполнено(СписокПланирование) Тогда
		ОперативныйУчетПроизводстваКлиент.ОткрытьФормуДиспетчированиеПооперационное(МетодикаПланирование,, СписокПланирование);
	КонецЕсли;
	Если ЗначениеЗаполнено(СписокРегистрация) Тогда
		ОперативныйУчетПроизводстваКлиент.ОткрытьФормуДиспетчированиеПооперационное(МетодикаРегистрация,, СписокРегистрация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчированиеББВ(Команда)
	
	ВыделенныеСтроки = Элементы.Заказы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() <> 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'"));
		Возврат;
	КонецЕсли;
	
	СписокРаспоряжений = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Заказы.ДанныеСтроки(ВыделеннаяСтрока);
		СписокРаспоряжений.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокРаспоряжений", СписокРаспоряжений);
	ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма", ПараметрыФормы, ЭтаФорма, СписокРаспоряжений);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ДиспетчированиеГрафикаПроизводства.Форма.Команда.Обновить");
	
	ИспользоватьОжиданияОбработчиков = Ложь;
	
	ТекущийЗаказ = Неопределено;
	Если Элементы.Заказы.ТекущиеДанные <> Неопределено Тогда
		ТекущийЗаказ = Элементы.Заказы.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ОбновитьДанные(ТекущийЗаказ);
	
	ПодключитьОбработчикОжидания("УстановитьИспользованиеОжидания", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпецификациюЗаказа(Команда)
	
	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!';
									|en = 'Cannot execute this command for the specified object.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Адреса = ДанныеДляРедактированияСпецификацииСтрокиЗаказаВХранилище(ТекущиеДанные.Заказ, ТекущиеДанные.КлючСвязи);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСпецификация", Адреса.Спецификация);
	ПараметрыФормы.Вставить("ЗаписыватьРезультатРедактирования", Истина);
	
	ПараметрыФормы.Вставить("АдресДвиженийЗаказа", Адреса.АдресДвиженийЗаказа);
	
	ОткрытьФорму("Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СократитьПроизводство(Команда)
		
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.';
									|en = 'Cannot execute the command for the object.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаказНаПроизводство", ТекущиеДанные.Заказ);
	ПараметрыФормы.Вставить("КодСтрокиПродукция", ТекущиеДанные.КодСтроки);
	
	ОткрытьФорму("Обработка.СокращениеПроизводства.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УменьшитьКоличестваВыходныхИзделий(Команда)
	
	Модифицированность = Ложь;
	
	ФормыРаботыСБраком(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапыВосстановленияБрака(Команда)
	
	Модифицированность = Ложь;
	
	ФормыРаботыСБраком(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьОчередьПо(Команда)
	
	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.';
									|en = 'Cannot execute the command for the object.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПланированиеПроизводстваКлиент.ПланироватьОчередьЗаказов(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЗаказНаСервере(ТекущиеДанные.Ссылка, "Вверх");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЗаказНаСервере(ТекущиеДанные.Ссылка, "Вниз");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьМаршрутнойКарты(Команда)
	
	ДанныеОПродукции = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Продукция.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Продукция.ДанныеСтроки(ИдентификаторСтроки);
		СтруктураДанных = Новый Структура("Заказ,КодСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
		ДанныеОПродукции.Добавить(СтруктураДанных);
	КонецЦикла; 
	УправлениеПечатьюУПКлиент.ПечатьМаршрутныхКартНаПродукцию(ДанныеОПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыпускуПродукцииОтЗаказов(Команда)
	
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.ВыпускПродукции.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыпускуПродукцииОтПродукции(Команда)
	
	СписокПродукции = ВыбраннаяПродукция();
	Если СписокПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуПродукции", СписокПродукции);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.ВыпускПродукции.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыпускуПродукцииОтЭтапов(Команда)
	
	СписокЭтапов = ВыбранныеЭтапы();
	Если СписокЭтапов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЭтаповГрафика", СписокЭтапов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.ВыпускПродукции.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыработкеСотрудниковОтЗаказов(Команда)
	
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.ВыработкаСотрудников.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыработкеСотрудниковОтЭтапов(Команда)
	
	СписокЭтапов = ВыбранныеЭтапы();
	Если СписокЭтапов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЭтаповГрафика", СписокЭтапов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.ВыработкаСотрудников.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКЗаказамПереработчикамОтЗаказов(Команда)

	//++ Устарело_Переработка24
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	//-- Устарело_Переработка24
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКЗаказамПереработчикамОтЭтапов(Команда)
	
	//++ Устарело_Переработка24
	СписокЭтапов = ВыбранныеЭтапы();
	Если СписокЭтапов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЭтаповГрафика", СписокЭтапов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	//-- Устарело_Переработка24
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКМаршрутнымЛистамОтЗаказов(Команда)
	
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКМаршрутнымЛистамОтПродукции(Команда)
	
	СписокПродукции = ВыбраннаяПродукция();
	Если СписокПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуПродукции", СписокПродукции);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКМаршрутнымЛистамОтЭтапов(Команда)
	
	СписокЭтапов = ВыбранныеЭтапы();
	Если СписокЭтапов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЭтаповГрафика", СписокЭтапов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКПередачеМатериаловОтЗаказов(Команда)
	
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.ПередачаМатериаловВПроизводство.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Требуется перепланировать если ТребуетсяПланировать И СтатусГрафикаПроизводства = Рассчитан.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеГиперссылка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеТекст.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.ТребуетсяПланировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.СтатусГрафикаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан;

	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Требуется перепланировать';
																|en = 'Replanning is required'"));

	// Требуется планировать если ТребуетсяПланировать И СтатусГрафикаПроизводства = ТребуетсяРассчитать.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеГиперссылка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеТекст.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.ТребуетсяПланировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.СтатусГрафикаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;

	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Требуется запланировать';
																|en = 'Planning is required'"));

	// Текст состояния отсутствует, если планировать не требуется и нет других оповещений.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеГиперссылка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеТекст.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.КодСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 6;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.ТребуетсяПланировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	// если можно планировать, то текст отображается гиперссылкой

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеГиперссылка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.МожноПланировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	// если можно и требуется планировать, то ЗаказыСостояниеТекст не отображается

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеТекст.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.МожноПланировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.ТребуетсяПланировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Если нельзя и не требуется планировать, то ЗаказыСостояниеГиперссылка не отображается.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСостояниеГиперссылка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.NotGroup;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.МожноПланировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.ТребуетсяПланировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ПродукцияХарактеристика",
																		     "Объект.Продукция.ХарактеристикиИспользуются");
	
	// Выделение цветом даты завершения производства продукции, если она позже даты потребности.
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаЗавершения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ДатаЗавершения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ДатаПотребности");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Выделение цветом даты завершения этапа, если она позже даты потребности
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОкончаниеЭтапа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.ОкончаниеЭтапа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.ДатаПотребности");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Приоритеты.Ссылка                      КАК Приоритет,
	|	-Приоритеты.РеквизитДопУпорядочивания  КАК ПриоритетНомер,
	|	Приоритеты.Цвет                        КАК Цвет,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Приоритеты.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.Приоритеты КАК Приоритеты");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыПриоритет.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.ПриоритетНомер");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.ПриоритетНомер;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Выборка.Цвет.Получить());
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Выборка.Представление);
			
			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборПриоритет.Имя);

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.Приоритет;

			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Выборка.Цвет.Получить());
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("РасширенныйРежим") ИЛИ Инициализация Тогда
		
		РасширенныйРежим = РасширенныйРежим(Форма);
		
		Элементы.ЗаказыОтбор.Видимость = РасширенныйРежим;
		
		Элементы.ПродукцияОтбор.Видимость = РасширенныйРежим;
		Элементы.ПродукцияРежим.Видимость = РасширенныйРежим;
		
		Элементы.ЭтапыОтбор.Видимость = РасширенныйРежим;
		Элементы.ЭтапыРежим.Видимость = РасширенныйРежим;
		
		Элементы.ПродукцияСостояниеТекст.Видимость = РасширенныйРежим;
		Элементы.ПродукцияДатаЗавершения.Видимость = РасширенныйРежим;
		
		Элементы.ГруппаИндикаторСпецификации.Видимость = РасширенныйРежим;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЭтапыРежим") ИЛИ Инициализация  Тогда
		
		Элементы.ГруппаЭтапы.Видимость   = (Форма.ЭтапыРежим <> "");
		Элементы.СкрытьЭтапы.Видимость   = (Форма.ЭтапыРежим <> "");
		Элементы.ПоказатьЭтапы.Видимость = (Форма.ЭтапыРежим =  "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьЭлементовУправленияОчередью(Форма)
	
	Форма.Элементы.ЗаказыГруппаПереместить.Доступность = НЕ ЗначениеЗаполнено(Форма.ЗаказыОтбор);
	
	Форма.Элементы.ПланироватьОчередьПо.Доступность = НЕ ЗначениеЗаполнено(Форма.ЗаказыОтбор) 
													И НЕ ЗначениеЗаполнено(Форма.Ответственный) 
													И НЕ ЗначениеЗаполнено(Форма.Приоритет);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПараметрыФормы(ПараметрыФормы)
	
	ПараметрыОбработаны = Ложь;
	
	Если ПараметрыФормы.Свойство("Подразделение") Тогда
		Подразделение = ПараметрыФормы.Подразделение;
		ПараметрыОбработаны = Истина;
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("Ответственный") Тогда
		Ответственный = ПараметрыФормы.Ответственный;
		ПараметрыОбработаны = Истина;
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("Приоритет") Тогда
		Приоритет = ПараметрыФормы.Приоритет;
		ПараметрыОбработаны = Истина;
	КонецЕсли;
	
	Возврат ПараметрыОбработаны;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

&НаСервере
Процедура ПолучитьТаблицыНаСервере(Таблицы = Неопределено, МассивЗаказов = Неопределено, МассивКодовСтрокПродукции = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьЗаказы    = (Таблицы = Неопределено ИЛИ Таблицы.Свойство("Заказы"));
	ПолучитьПродукцию = (Таблицы = Неопределено ИЛИ Таблицы.Свойство("Продукция"));
	ПолучитьЭтапы     = (Таблицы = Неопределено ИЛИ Таблицы.Свойство("Этапы"));
	
	Если РасширенныйРежим(ЭтаФорма) ИЛИ ПолучитьЭтапы Тогда
			
		ДанныеЭтаповВМенеджерВременныхТаблиц(МенеджерВременныхТаблиц, МассивЗаказов, МассивКодовСтрокПродукции);
		
	КонецЕсли;
	
	Если ПолучитьЗаказы Тогда
		
		ЗаполнитьСписокЗаказовНаСервере(МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
	Если ПолучитьПродукцию Тогда
		
		ЗаполнитьСписокПродукцииНаСервере(МенеджерВременныхТаблиц, МассивЗаказов);
		
	КонецЕсли;
	
	Если ПолучитьЭтапы Тогда
		
		ЗаполнитьСписокЭтаповНаСервере(МенеджерВременныхТаблиц, МассивЗаказов, МассивКодовСтрокПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаВТЗаказы()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТЗаказы
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК Т
		|ГДЕ
		|	Т.Проведен
		|	И Т.Статус = &СтатусКПроизводству
		|	И (НЕ &ОтборПоПриоритету
		|			ИЛИ Т.Приоритет = &Приоритет)
		|	И (НЕ &ОтборПоПодразделению
		|			ИЛИ Т.Подразделение = &Подразделение)
		|	И (НЕ &ОтборПоОтветственному
		|			ИЛИ Т.Ответственный = &Ответственный)
		|;
		|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура СписокЗаказовВМенеджерВременныхТаблиц(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаВТЗаказы();
		
	Запрос.УстановитьПараметр("ОтборПоПриоритету",     ЗначениеЗаполнено(Приоритет));
	Запрос.УстановитьПараметр("Приоритет",             Приоритет);
	
	Запрос.УстановитьПараметр("ОтборПоПодразделению",  ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Подразделение",         Подразделение);
	
	Запрос.УстановитьПараметр("ОтборПоОтветственному", ЗначениеЗаполнено(Ответственный));
	Запрос.УстановитьПараметр("Ответственный",         Ответственный);
	
	Запрос.УстановитьПараметр("СтатусКПроизводству",   Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОчередьЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапросаВТЗаказы(), "ПОМЕСТИТЬ ВТЗаказы", "");

	Запрос.УстановитьПараметр("ОтборПоПриоритету",     ЗначениеЗаполнено(Приоритет));
	Запрос.УстановитьПараметр("Приоритет",             Приоритет);
	
	Запрос.УстановитьПараметр("ОтборПоПодразделению",  ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Подразделение",         Подразделение);
	
	Запрос.УстановитьПараметр("ОтборПоОтветственному", ЗначениеЗаполнено(Ответственный));
	Запрос.УстановитьПараметр("Ответственный",         Ответственный);
	
	Запрос.УстановитьПараметр("СтатусКПроизводству",   Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

&НаСервере
Процедура ДанныеЭтаповВМенеджерВременныхТаблиц(МенеджерВременныхТаблиц, МассивЗаказов = Неопределено, МассивКодовСтрокПродукции = Неопределено)

	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСостояний.КодСостояния КАК КодСостояния,
		|	ТаблицаСостояний.ТекстСостояния КАК ТекстСостояния,
		|	ТаблицаСостояний.Проблемный КАК Проблемный,
		|	ТаблицаСостояний.Активный КАК Активный,
		|	ТаблицаСостояний.Выполненный КАК Выполненный
		|ПОМЕСТИТЬ ТаблицаСостояний
		|ИЗ
		|	&ТаблицаСостояний КАК ТаблицаСостояний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказНаПроизводствоЭтапыГрафик.Ссылка КАК Заказ,
		|	ЗаказНаПроизводствоЭтапыГрафик.Этап КАК Этап,
		|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
		|	ЗаказНаПроизводствоПродукция.Характеристика КАК Характеристика,
		|	ЗаказНаПроизводствоПолуфабрикаты.Номенклатура КАК НоменклатураПолуфабрикат,
		|	ЗаказНаПроизводствоПолуфабрикаты.Характеристика КАК ХарактеристикаПолуфабрикат,
		|	ЗаказНаПроизводствоПродукция.НачатьНеРанее КАК НачатьНеРанее,
		|	ЗаказНаПроизводствоПродукция.ДатаПотребности КАК ДатаПотребности,
		|	ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция КАК КлючСвязиПродукция,
		|	ЗаказНаПроизводствоЭтапыГрафик.КодСтроки КАК КодСтроки,
		|	ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтрокиПродукция,
		|	ЗаказНаПроизводствоЭтапыГрафик.КлючСвязи КАК КлючСвязи,
		|	ЗаказНаПроизводствоЭтапыГрафик.Подразделение КАК Подразделение,
		|	ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
		|	ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне, ЛОЖЬ) КАК ПроизводствоНаСтороне,
		|	ЗаказНаПроизводствоЭтапы.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ЗаказНаПроизводствоЭтапы.ЭтапВосстановленияБрака КАК ЭтапВосстановленияБрака,
		|	ЗаказНаПроизводствоЭтапыГрафик.Количество КАК Количество,
		|	ЗаказНаПроизводствоЭтапыГрафик.НачалоЭтапа КАК НачалоЭтапа,
		|	ЗаказНаПроизводствоЭтапыГрафик.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
		|	ЗаказНаПроизводствоЭтапыГрафик.НачалоПредварительногоБуфера КАК НачалоПредварительногоБуфера,
		|	ЗаказНаПроизводствоЭтапыГрафик.ОкончаниеЗавершающегоБуфера КАК ОкончаниеЗавершающегоБуфера
		|ПОМЕСТИТЬ ВТЭтапыГрафик
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
		|		ПО ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка
		|			И ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ПО ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ЗаказНаПроизводствоПродукция.Ссылка
		|			И ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказНаПроизводствоПолуфабрикаты
		|		ПО (ЗаказНаПроизводствоПолуфабрикаты.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
		|			И (ЗаказНаПроизводствоПолуфабрикаты.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция)
		|			И (ЗаказНаПроизводствоПолуфабрикаты.КлючСвязиПолуфабрикат = ЗаказНаПроизводствоЭтапы.КлючСвязиПолуфабрикат)
		|			И (ЗаказНаПроизводствоПолуфабрикаты.КлючСвязиПолуфабрикат <> &ПустойКлюч)
		|			И (ЗаказНаПроизводствоПолуфабрикаты.ПроизводитсяВПроцессе)
		|ГДЕ
		|	ЗаказНаПроизводствоЭтапыГрафик.Ссылка В(&МассивЗаказов)
		|	И (НЕ &ОтборПоПродукции
		|			ИЛИ ЗаказНаПроизводствоПродукция.КодСтроки В (&МассивПродукции))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ,
		|	КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыПроизводстваОбороты.Распоряжение КАК Распоряжение,
		|	ЭтапыПроизводстваОбороты.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот КАК ЗапланированоЗаказом,
		|	ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот КАК ЗапланированоПроизводством,
		|	ЭтапыПроизводстваОбороты.КВыполнениюОборот КАК КВыполнению,
		|	ЭтапыПроизводстваОбороты.ВыполненоОборот КАК Выполнено,
		|	ЭтапыПроизводстваОбороты.БракОборот КАК Брак
		|ПОМЕСТИТЬ ВТЭтапыПроизводства
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства.Обороты(
		|			,
		|			,
		|			,
		|			(Распоряжение, КодСтрокиПродукция, КодСтрокиЭтапыГрафик) В
		|				(ВЫБРАТЬ
		|					Т.Заказ КАК Заказ,
		|					Т.КодСтрокиПродукция КАК КодСтрокиПродукция,
		|					Т.КодСтроки КАК КодСтроки
		|				ИЗ
		|					ВТЭтапыГрафик КАК Т)) КАК ЭтапыПроизводстваОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	КодСтрокиЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БракОстатки.МаршрутныйЛист.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	БракОстатки.МаршрутныйЛист.Распоряжение КАК Распоряжение,
		|	БракОстатки.КоличествоОстаток КАК Количество
		|ПОМЕСТИТЬ ВТБрак
		|ИЗ
		|	РегистрНакопления.БракВПроизводстве.Остатки КАК БракОстатки
		|ГДЕ
		|	БракОстатки.КоличествоОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	КодСтрокиЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПереработкаПоГрафикуПроизводстваОбороты.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ПереработкаПоГрафикуПроизводстваОбороты.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	ПереработкаПоГрафикуПроизводстваОбороты.Номенклатура КАК Номенклатура,
		|	ПереработкаПоГрафикуПроизводстваОбороты.Характеристика КАК Характеристика,
		|	ПереработкаПоГрафикуПроизводстваОбороты.КЗаказуПриход КАК Количество
		|ПОМЕСТИТЬ ВТПродукцияКПереработкеПоЗаказуНаПроизводство
		|ИЗ
		|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Обороты(
		|			,
		|			,
		|			,
		|			(ЗаказНаПроизводство, КодСтрокиЭтапыГрафик) В
		|				(ВЫБРАТЬ
		|					Т.Заказ КАК Заказ,
		|					Т.КодСтроки КАК КодСтроки
		|				ИЗ
		|					ВТЭтапыГрафик КАК Т)) КАК ПереработкаПоГрафикуПроизводстваОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаПроизводство,
		|	КодСтрокиЭтапыГрафик,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыГрафик.Заказ КАК ЗаказНаПроизводство,
		|	ЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
		|	ЗаказПереработчикуУслуги.Ссылка КАК ЗаказПереработчику,
		|	ЗаказПереработчикуУслуги.Ссылка.Статус КАК СтатусЗаказаПереработчику,
		|	ЗаказПереработчикуПродукция.Номенклатура КАК Номенклатура,
		|	ЗаказПереработчикуПродукция.Характеристика КАК Характеристика,
		|	ЗаказПереработчикуПродукция.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВТПродукцияКПереработкеПоЗаказуПереработчику
		|ИЗ
		|	ВТЭтапыГрафик КАК ЭтапыГрафик
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ЗаказПереработчикуПродукция
		|			ПО ЗаказПереработчикуУслуги.Ссылка = ЗаказПереработчикуПродукция.Ссылка
		|				И ЗаказПереработчикуУслуги.НомерГруппыЗатрат = ЗаказПереработчикуПродукция.НомерГруппыЗатрат
		|		ПО ЭтапыГрафик.КодСтрокиПродукция = ЗаказПереработчикуУслуги.КодСтрокиПродукция
		|			И ЭтапыГрафик.КодСтроки = ЗаказПереработчикуУслуги.КодСтрокиЭтапыГрафик
		|			И ЭтапыГрафик.Заказ = ЗаказПереработчикуУслуги.Распоряжение
		|ГДЕ
		|	ЭтапыГрафик.ПроизводствоНаСтороне
		|	И ЗаказПереработчикуУслуги.Ссылка.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказПереработчику,
		|	Номенклатура,
		|	Характеристика,
		|	КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОбороты.ЗаказПоставщику КАК ЗаказПереработчику,
		|	ЗаказыПоставщикамОбороты.Номенклатура КАК Номенклатура,
		|	ЗаказыПоставщикамОбороты.Характеристика КАК Характеристика,
		|	ЗаказыПоставщикамОбороты.КодСтроки КАК КодСтроки,
		|	ЗаказыПоставщикамОбороты.КОформлениюРасход КАК Количество
		|ПОМЕСТИТЬ ВТПродукцияОтПереработчика
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Обороты(
		|			,
		|			,
		|			,
		|			(ЗаказПоставщику, Номенклатура, Характеристика, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Т.ЗаказПереработчику,
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.КодСтроки
		|				ИЗ
		|					ВТПродукцияКПереработкеПоЗаказуПереработчику КАК Т
		|				ГДЕ
		|					Т.СтатусЗаказаПереработчику В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)))) КАК ЗаказыПоставщикамОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказПереработчику,
		|	Номенклатура,
		|	Характеристика,
		|	КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродукцияКПереработкеПоЗаказуПереработчику.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ПродукцияКПереработкеПоЗаказуПереработчику.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	ПродукцияКПереработкеПоЗаказуПереработчику.Номенклатура КАК Номенклатура,
		|	ПродукцияКПереработкеПоЗаказуПереработчику.Характеристика КАК Характеристика,
		|	ПродукцияОтПерерабочика.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПродукцияОтПереработчикаПоЗаказуНаПроизводство
		|ИЗ
		|	ВТПродукцияКПереработкеПоЗаказуПереработчику КАК ПродукцияКПереработкеПоЗаказуПереработчику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПродукцияОтПереработчика КАК ПродукцияОтПерерабочика
		|		ПО ПродукцияКПереработкеПоЗаказуПереработчику.ЗаказПереработчику = ПродукцияОтПерерабочика.ЗаказПереработчику
		|			И ПродукцияКПереработкеПоЗаказуПереработчику.Номенклатура = ПродукцияОтПерерабочика.Номенклатура
		|			И ПродукцияКПереработкеПоЗаказуПереработчику.Характеристика = ПродукцияОтПерерабочика.Характеристика
		|			И ПродукцияКПереработкеПоЗаказуПереработчику.КодСтроки = ПродукцияОтПерерабочика.КодСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаПроизводство,
		|	КодСтрокиЭтапыГрафик,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПродукцияКПереработкеПоЗаказуНаПроизводство.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ПродукцияКПереработкеПоЗаказуНаПроизводство.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
		|ПОМЕСТИТЬ ВТОткрытыеЭтапыНаСтороне
		|ИЗ
		|	ВТПродукцияКПереработкеПоЗаказуНаПроизводство КАК ПродукцияКПереработкеПоЗаказуНаПроизводство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПродукцияОтПереработчикаПоЗаказуНаПроизводство КАК ПродукцияОтПереработчикаПоЗаказуНаПроизводство
		|		ПО ПродукцияКПереработкеПоЗаказуНаПроизводство.ЗаказНаПроизводство = ПродукцияОтПереработчикаПоЗаказуНаПроизводство.ЗаказНаПроизводство
		|			И ПродукцияКПереработкеПоЗаказуНаПроизводство.КодСтрокиЭтапыГрафик = ПродукцияОтПереработчикаПоЗаказуНаПроизводство.КодСтрокиЭтапыГрафик
		|			И ПродукцияКПереработкеПоЗаказуНаПроизводство.Номенклатура = ПродукцияОтПереработчикаПоЗаказуНаПроизводство.Номенклатура
		|			И ПродукцияКПереработкеПоЗаказуНаПроизводство.Характеристика = ПродукцияОтПереработчикаПоЗаказуНаПроизводство.Характеристика
		|ГДЕ
		|	ПродукцияКПереработкеПоЗаказуНаПроизводство.Количество > ЕСТЬNULL(ПродукцияОтПереработчикаПоЗаказуНаПроизводство.Количество, 0)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаПроизводство,
		|	КодСтрокиЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродукцияКПереработкеПоЗаказуПереработчику.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ПродукцияКПереработкеПоЗаказуПереработчику.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	МАКСИМУМ(ПродукцияКПереработкеПоЗаказуПереработчику.СтатусЗаказаПереработчику) КАК СтатусЗаказаПереработчику
		|ПОМЕСТИТЬ ВТСтатусыЭтаповНаСтороне
		|ИЗ
		|	ВТПродукцияКПереработкеПоЗаказуПереработчику КАК ПродукцияКПереработкеПоЗаказуПереработчику
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродукцияКПереработкеПоЗаказуПереработчику.ЗаказНаПроизводство,
		|	ПродукцияКПереработкеПоЗаказуПереработчику.КодСтрокиЭтапыГрафик
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаПроизводство,
		|	КодСтрокиЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыПроизводства.Распоряжение КАК Распоряжение,
		|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	МИНИМУМ(ЭтапыПроизводства.НачалоПредварительногоБуфера) КАК НачалоЭтапа,
		|	МАКСИМУМ(ЭтапыПроизводства.ОкончаниеЗавершающегоБуфера) КАК ОкончаниеЭтапа
		|ПОМЕСТИТЬ ВТДатыЭтапов
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Активность
		|	И ЭтапыПроизводства.Распоряжение В(&МассивЗаказов)
		|	И (НЕ &ОтборПоПродукции
		|			ИЛИ ЭтапыПроизводства.КодСтрокиПродукция В (&МассивПродукции))
		|	И ЭтапыПроизводства.КВыполнению + ЭтапыПроизводства.Выполнено + ЭтапыПроизводства.Брак > 0
		|	И ЭтапыПроизводства.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыПроизводства.Распоряжение,
		|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	КодСтрокиЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЭтапы.Заказ КАК Заказ,
		|	ВТЭтапы.Этап КАК Этап,
		|	ВТЭтапы.Номенклатура КАК Номенклатура,
		|	ВТЭтапы.Характеристика КАК Характеристика,
		|	ВТЭтапы.НоменклатураПолуфабрикат КАК НоменклатураПолуфабрикат,
		|	ВТЭтапы.ХарактеристикаПолуфабрикат КАК ХарактеристикаПолуфабрикат,
		|	ВТЭтапы.Запланировано КАК Запланировано,
		|	ВТЭтапы.Выполнено КАК Выполнено,
		|	ВТЭтапы.НачалоЭтапа КАК НачалоЭтапа,
		|	ВТЭтапы.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
		|	ВТЭтапы.НачатьНеРанее КАК НачатьНеРанее,
		|	ВТЭтапы.ДатаПотребности КАК ДатаПотребности,
		|	ВТЭтапы.КлючСвязиПродукция КАК КлючСвязиПродукция,
		|	ВТЭтапы.КодСтроки КАК КодСтроки,
		|	ВТЭтапы.КодСтрокиПродукция КАК КодСтрокиПродукция,
		|	ВТЭтапы.КлючСвязи КАК КлючСвязи,
		|	ВТЭтапы.Подразделение КАК Подразделение,
		|	ВТЭтапы.Брак КАК Брак,
		|	ВТЭтапы.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
		|	ВТЭтапы.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ВТЭтапы.ЭтапВосстановленияБрака КАК ЭтапВосстановленияБрака,
		|	ЕСТЬNULL(ТаблицаСостояний.ТекстСостояния, """") КАК ТекстСостояния,
		|	ВТЭтапы.КодСостояния КАК КодСостояния,
		|	ЕСТЬNULL(ТаблицаСостояний.Проблемный, ЛОЖЬ) КАК Проблемный,
		|	ЕСТЬNULL(ТаблицаСостояний.Активный, ИСТИНА) КАК Активный,
		|	ЕСТЬNULL(ТаблицаСостояний.Выполненный, ЛОЖЬ) КАК Выполненный
		|ПОМЕСТИТЬ ВТЭтапы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЭтапыГрафик.Заказ КАК Заказ,
		|		ЭтапыГрафик.Этап КАК Этап,
		|		ЭтапыГрафик.Номенклатура КАК Номенклатура,
		|		ЭтапыГрафик.Характеристика КАК Характеристика,
		|		ЭтапыГрафик.НоменклатураПолуфабрикат КАК НоменклатураПолуфабрикат,
		|		ЭтапыГрафик.ХарактеристикаПолуфабрикат КАК ХарактеристикаПолуфабрикат,
		|		ЭтапыГрафик.Количество КАК Запланировано,
		|		ВЫБОР
		|			КОГДА ЭтапыГрафик.ПроизводствоНаСтороне
		|					И ОткрытыеЭтапыНаСтороне.ЗаказНаПроизводство ЕСТЬ NULL 
		|					И СтатусыЭтаповНаСтороне.СтатусЗаказаПереработчику В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
		|				ТОГДА ЭтапыГрафик.Количество
		|			ИНАЧЕ ЭтапыПроизводства.Выполнено
		|		КОНЕЦ КАК Выполнено,
		|		ТБрак.Количество КАК Брак,
		|		ЕСТЬNULL(ДатыЭтапов.НачалоЭтапа, ЭтапыГрафик.НачалоПредварительногоБуфера) КАК НачалоЭтапа,
		|		ЕСТЬNULL(ДатыЭтапов.ОкончаниеЭтапа, ЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК ОкончаниеЭтапа,
		|		ЭтапыГрафик.НачатьНеРанее КАК НачатьНеРанее,
		|		ЭтапыГрафик.ДатаПотребности КАК ДатаПотребности,
		|		ЭтапыГрафик.КлючСвязиПродукция КАК КлючСвязиПродукция,
		|		ЭтапыГрафик.КодСтроки КАК КодСтроки,
		|		ЭтапыГрафик.КодСтрокиПродукция КАК КодСтрокиПродукция,
		|		ЭтапыГрафик.КлючСвязи КАК КлючСвязи,
		|		ЭтапыГрафик.Подразделение КАК Подразделение,
		|		ЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
		|		ЭтапыГрафик.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|		ЭтапыГрафик.ЭтапВосстановленияБрака КАК ЭтапВосстановленияБрака,
		|		ВЫБОР
		|			КОГДА ЭтапыГрафик.ПроизводствоНаСтороне
		|				ТОГДА ВЫБОР
		|						КОГДА СтатусыЭтаповНаСтороне.СтатусЗаказаПереработчику ЕСТЬ NULL 
		|							ТОГДА 10
		|						КОГДА СтатусыЭтаповНаСтороне.СтатусЗаказаПереработчику В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению))
		|							ТОГДА 11
		|						КОГДА НЕ ОткрытыеЭтапыНаСтороне.ЗаказНаПроизводство ЕСТЬ NULL 
		|								И СтатусыЭтаповНаСтороне.СтатусЗаказаПереработчику В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
		|							ТОГДА 12
		|						КОГДА ОткрытыеЭтапыНаСтороне.ЗаказНаПроизводство ЕСТЬ NULL 
		|								И СтатусыЭтаповНаСтороне.СтатусЗаказаПереработчику В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
		|							ТОГДА 13
		|						ИНАЧЕ 9
		|					КОНЕЦ
		|			КОГДА ЕСТЬNULL(ТБрак.Количество, 0) = 0
		|					И ЕСТЬNULL(ЭтапыПроизводства.Выполнено, 0) + ЕСТЬNULL(ЭтапыПроизводства.Брак, 0) = ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоЗаказом, 0)
		|					И ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоЗаказом, 0) > 0
		|				ТОГДА 0
		|			КОГДА ЕСТЬNULL(ТБрак.Количество, 0) > 0
		|				ТОГДА 3
		|			КОГДА &НачалоТекущегоЧаса >= ЭтапыГрафик.ОкончаниеЭтапа
		|					И ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоПроизводством, 0) + ЕСТЬNULL(ЭтапыПроизводства.КВыполнению, 0) = 0
		|					И ЕСТЬNULL(ЭтапыПроизводства.Выполнено, 0) + ЕСТЬNULL(ЭтапыПроизводства.Брак, 0) <> ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоЗаказом, 0)
		|				ТОГДА 4
		|			КОГДА &НачалоТекущегоЧаса >= ЭтапыГрафик.НачалоЭтапа
		|					И ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоПроизводством, 0) + ЕСТЬNULL(ЭтапыПроизводства.КВыполнению, 0) = 0
		|					И ЕСТЬNULL(ЭтапыПроизводства.Выполнено, 0) + ЕСТЬNULL(ЭтапыПроизводства.Брак, 0) <> ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоЗаказом, 0)
		|				ТОГДА 5
		|			КОГДА &НачалоТекущегоЧаса <= ЭтапыГрафик.НачалоПредварительногоБуфера
		|					И ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоПроизводством, 0) + ЕСТЬNULL(ЭтапыПроизводства.КВыполнению, 0) = 0
		|					И ЕСТЬNULL(ЭтапыПроизводства.Выполнено, 0) + ЕСТЬNULL(ЭтапыПроизводства.Брак, 0) <> ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоЗаказом, 0)
		|				ТОГДА 6
		|			КОГДА &НачалоТекущегоЧаса >= ЭтапыГрафик.ОкончаниеЭтапа
		|					И ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоПроизводством, 0) > 0
		|				ТОГДА 7
		|			КОГДА &НачалоТекущегоЧаса >= ЭтапыГрафик.ОкончаниеЗавершающегоБуфера
		|					И ЕСТЬNULL(ЭтапыПроизводства.КВыполнению, 0) + ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоПроизводством, 0) > 0
		|				ТОГДА 8
		|			ИНАЧЕ 9
		|		КОНЕЦ КАК КодСостояния
		|	ИЗ
		|		ВТЭтапыГрафик КАК ЭтапыГрафик
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЭтапыПроизводства КАК ЭтапыПроизводства
		|			ПО ЭтапыГрафик.Заказ = ЭтапыПроизводства.Распоряжение
		|				И ЭтапыГрафик.КодСтроки = ЭтапыПроизводства.КодСтрокиЭтапыГрафик
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыЭтапов КАК ДатыЭтапов
		|			ПО ЭтапыГрафик.Заказ = ДатыЭтапов.Распоряжение
		|				И ЭтапыГрафик.КодСтроки = ДатыЭтапов.КодСтрокиЭтапыГрафик
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&НачалоТекущегоЧаса, ) КАК ФИОФизическихЛицСрезПоследних
		|			ПО ЭтапыГрафик.Подразделение.ТекущийРуководитель = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТБрак КАК ТБрак
		|			ПО ЭтапыГрафик.Заказ = ТБрак.Распоряжение
		|				И ЭтапыГрафик.КодСтроки = ТБрак.КодСтрокиЭтапыГрафик
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОткрытыеЭтапыНаСтороне КАК ОткрытыеЭтапыНаСтороне
		|			ПО ЭтапыГрафик.Заказ = ОткрытыеЭтапыНаСтороне.ЗаказНаПроизводство
		|				И ЭтапыГрафик.КодСтроки = ОткрытыеЭтапыНаСтороне.КодСтрокиЭтапыГрафик
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусыЭтаповНаСтороне КАК СтатусыЭтаповНаСтороне
		|			ПО ЭтапыГрафик.Заказ = СтатусыЭтаповНаСтороне.ЗаказНаПроизводство
		|				И ЭтапыГрафик.КодСтроки = СтатусыЭтаповНаСтороне.КодСтрокиЭтапыГрафик) КАК ВТЭтапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСостояний КАК ТаблицаСостояний
		|		ПО ВТЭтапы.КодСостояния = ТаблицаСостояний.КодСостояния
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСостояний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБрак
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЭтапыПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПродукцияКПереработкеПоЗаказуНаПроизводство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПродукцияКПереработкеПоЗаказуПереработчику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПродукцияОтПереработчика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПродукцияОтПереработчикаПоЗаказуНаПроизводство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОткрытыеЭтапыНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтатусыЭтаповНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыЭтапов";
		
	ТекущаяДатаСеанса  = ТекущаяДатаСеанса();
	НачалоТекущегоЧаса = НачалоЧаса(ТекущаяДатаСеанса);
	
	Запрос.УстановитьПараметр("НачалоТекущегоЧаса", НачалоТекущегоЧаса);
	
	Если МассивЗаказов = Неопределено Тогда
		
		СписокЗаказовВМенеджерВременныхТаблиц(МенеджерВременныхТаблиц);
		
		Запрос.Текст = 
			СтрЗаменить(
				Запрос.Текст, 
				"&МассивЗаказов",  
				"ВЫБРАТЬ Т.Ссылка ИЗ ВТЗаказы КАК Т")
			+ "; УНИЧТОЖИТЬ ВТЗаказы; ";
			
		ОтборПоПродукции = Ложь;	
			
	Иначе
				
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);	
		
		ОтборПоПродукции = МассивКодовСтрокПродукции <> Неопределено 
			И НЕ РасширенныйРежим(ЭтаФорма);
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтборПоПродукции", ОтборПоПродукции);
	Запрос.УстановитьПараметр("МассивПродукции",  МассивКодовСтрокПродукции);
	
	Запрос.УстановитьПараметр("ТаблицаСостояний", Обработки.ДиспетчированиеГрафикаПроизводства.ТаблицаСостоянийЭтапов());
	
	Запрос.УстановитьПараметр("ПустойКлюч", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаВТСостояниеВыпускаПоЗаказам()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РаспоряженияОстаткиИОбороты.Распоряжение.Распоряжение КАК Распоряжение,
		|	РаспоряженияОстаткиИОбороты.Распоряжение.КодСтроки КАК КодСтроки,
		|	РаспоряженияОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	РаспоряженияОстаткиИОбороты.Характеристика КАК Характеристика,
		|	РаспоряженияОстаткиИОбороты.КОформлениюКонечныйОстаток КАК Остаток,
		|	РаспоряженияОстаткиИОбороты.КОформлениюРасход КАК Выпущено
		|ПОМЕСТИТЬ ВТВыпускПродукции
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			Распоряжение.Распоряжение В (&МассивЗаказов)) КАК РаспоряженияОстаткиИОбороты
		//++ Устарело_Переработка24
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаказПереработчикуУслуги.Распоряжение,
		|	ТаблицаЗаказПереработчикуУслуги.КодСтрокиПродукция,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	0,
		|	СУММА(ТаблицаТовары.Количество)
		|ИЗ
		|	Документ.ПоступлениеОтПереработчика КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеОтПереработчика.Товары КАК ТаблицаТовары
		|		ПО (ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка)
		|			И (ТаблицаТовары.КодСтроки <> 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ТаблицаЗаказПереработчикуПродукция
		|		ПО (ТаблицаЗаказПереработчикуПродукция.Ссылка = ТаблицаДокумента.ЗаказПереработчику)
		|			И (ТаблицаЗаказПереработчикуПродукция.КодСтроки = ТаблицаТовары.КодСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаЗаказПереработчикуУслуги
		|		ПО (ТаблицаЗаказПереработчикуУслуги.Ссылка = ТаблицаЗаказПереработчикуПродукция.Ссылка)
		|			И (ТаблицаЗаказПереработчикуУслуги.НомерГруппыЗатрат = ТаблицаЗаказПереработчикуПродукция.НомерГруппыЗатрат)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ТаблицаЗаказ
		|		ПО (ТаблицаЗаказ.Ссылка = ТаблицаЗаказПереработчикуПродукция.Ссылка)
		|ГДЕ
		|	ТаблицаЗаказПереработчикуУслуги.Распоряжение В (&МассивЗаказов)
		|	И ТаблицаДокумента.Проведен
		|	И ТаблицаТовары.КодСтроки <> 0
		|	И ЕСТЬNULL(ТаблицаДокумента.ПоступлениеПоЗаказам, ЛОЖЬ)
		|	И ЕСТЬNULL(ТаблицаЗаказ.ПереработкаПоЗаказу, ЛОЖЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаЗаказПереработчикуУслуги.Распоряжение,
		|	ТаблицаЗаказПереработчикуУслуги.КодСтрокиПродукция
		//-- Устарело_Переработка24
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	КодСтроки,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказНаПроизводствоПродукция.Ссылка КАК Заказ,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ВТВыпускПродукции.Остаток, 0) > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьПродукцияКОформлению,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаказНаПроизводствоПродукция.Количество > ЕСТЬNULL(ВТВыпускПродукции.Выпущено, 0)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьОтклоненияПоВыпуску
		|ПОМЕСТИТЬ ВТСостояниеВыпусковПоЗаказам
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыпускПродукции КАК ВТВыпускПродукции
		|		ПО ЗаказНаПроизводствоПродукция.Номенклатура = ВТВыпускПродукции.Номенклатура
		|			И ЗаказНаПроизводствоПродукция.Характеристика = ВТВыпускПродукции.Характеристика
		|			И ЗаказНаПроизводствоПродукция.Ссылка = ВТВыпускПродукции.Распоряжение
		|			И ЗаказНаПроизводствоПродукция.КодСтроки = ВТВыпускПродукции.КодСтроки
		|ГДЕ
		|	ЗаказНаПроизводствоПродукция.Ссылка В (&МассивЗаказов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаПроизводствоПродукция.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВыпускПродукции
		|;
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаВТСостояниеЭтаповПоЗаказамРасширенный()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТЭтапы.Заказ                    КАК Заказ,
		|	МАКСИМУМ(ВТЭтапы.ОкончаниеЭтапа) КАК ПлановаяДатаЗавершения,
		|	МИНИМУМ(ВТЭтапы.Выполненный)     КАК Выполненный,
		|	МАКСИМУМ(ВТЭтапы.Активный)       КАК Активный,
		|	МАКСИМУМ(ВТЭтапы.Проблемный)     КАК Проблемный
		|ПОМЕСТИТЬ ВТСостояниеЭтапов
		|ИЗ
		|	ВТЭтапы КАК ВТЭтапы
		|ГДЕ
		|	ВТЭтапы.Заказ В (&МассивЗаказов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТЭтапы.Заказ
		|;
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаВТСостояниеЭтаповПоЗаказам()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЭтапыПроизводства.Распоряжение КАК Распоряжение,
		|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	МАКСИМУМ(ЭтапыПроизводства.ОкончаниеЗавершающегоБуфера) КАК ОкончаниеЭтапа
		|ПОМЕСТИТЬ ВТВыполнениеЭтапов
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Распоряжение В (&МассивЗаказов)
		|	И ЭтапыПроизводства.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
		|	И ЭтапыПроизводства.КВыполнению + ЭтапыПроизводства.Выполнено + ЭтапыПроизводства.Брак > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыПроизводства.Распоряжение,
		|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	КодСтрокиЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БракОстатки.МаршрутныйЛист.Распоряжение КАК Распоряжение,
		|	БракОстатки.МаршрутныйЛист.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	БракОстатки.КоличествоОстаток КАК Количество
		|ПОМЕСТИТЬ ВТБрак
		|ИЗ
		|	РегистрНакопления.БракВПроизводстве.Остатки(
		|			,
		|			МаршрутныйЛист.Распоряжение В (&МассивЗаказов)) КАК БракОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	КодСтрокиЭтапыГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Заказ КАК Заказ,
		|	Таблица.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
		|	ВЫБОР
		|		КОГДА Таблица.Состояние = 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Выполненный,
		|	ВЫБОР
		|		КОГДА Таблица.Состояние = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Активный,
		|	ВЫБОР
		|		КОГДА Таблица.Состояние = 2
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Проблемный
		|ПОМЕСТИТЬ ВТСостояниеЭтапов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказНаПроизводство.Ссылка КАК Заказ,
		|		МАКСИМУМ(ЕСТЬNULL(ВыполнениеЭтапов.ОкончаниеЭтапа, ГрафикПроизводства.ОкончаниеЗавершающегоБуфера)) КАК ПлановаяДатаЗавершения,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ЕСТЬNULL(БракПроизводства.Количество, 0) = 0
		|						И ЕСТЬNULL(ЭтапыПроизводства.ВыполненоОборот, 0) + ЕСТЬNULL(ЭтапыПроизводства.БракОборот, 0) = ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоЗаказомОборот, 0)
		|						И ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоЗаказомОборот, 0) > 0
		|					ТОГДА 0
		|				КОГДА ЕСТЬNULL(БракПроизводства.Количество, 0) > 0
		|						ИЛИ ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоПроизводствомОборот, 0) + ЕСТЬNULL(ЭтапыПроизводства.КВыполнениюОборот, 0) = 0
		|							И ЕСТЬNULL(ЭтапыПроизводства.ВыполненоОборот, 0) + ЕСТЬNULL(ЭтапыПроизводства.БракОборот, 0) <> ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоЗаказомОборот, 0)
		|							И (&НачалоТекущегоЧаса >= ГрафикПроизводства.ОкончаниеЭтапа
		|								ИЛИ &НачалоТекущегоЧаса >= ГрафикПроизводства.НачалоЭтапа)
		|						ИЛИ ЕСТЬNULL(ЭтапыПроизводства.КВыполнениюОборот, 0) + ЕСТЬNULL(ЭтапыПроизводства.ЗапланированоПроизводствомОборот, 0) > 0
		|							И &НачалоТекущегоЧаса >= ГрафикПроизводства.ОкончаниеЗавершающегоБуфера
		|					ТОГДА 2
		|				ИНАЧЕ 1
		|			КОНЕЦ) КАК Состояние
		|	ИЗ
		|		Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ГрафикПроизводства
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства.Обороты(
		|						,
		|						,
		|						,
		|						Распоряжение В (&МассивЗаказов)) КАК ЭтапыПроизводства
		|				ПО ГрафикПроизводства.Ссылка = ЭтапыПроизводства.Распоряжение
		|					И ГрафикПроизводства.КодСтроки = ЭтапыПроизводства.КодСтрокиЭтапыГрафик
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТБрак КАК БракПроизводства
		|				ПО ГрафикПроизводства.Ссылка = БракПроизводства.Распоряжение
		|					И ГрафикПроизводства.КодСтроки = БракПроизводства.КодСтрокиЭтапыГрафик
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполнениеЭтапов КАК ВыполнениеЭтапов
		|				ПО ГрафикПроизводства.Ссылка = ВыполнениеЭтапов.Распоряжение
		|					И ГрафикПроизводства.КодСтроки = ВыполнениеЭтапов.КодСтрокиЭтапыГрафик
		|			ПО ЗаказНаПроизводство.Ссылка = ГрафикПроизводства.Ссылка
		|	ГДЕ
		|		ЗаказНаПроизводство.Ссылка В (&МассивЗаказов)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказНаПроизводство.Ссылка) КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВыполнениеЭтапов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБрак
		|;
		|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаВТСостояниеЭтаповПоПродукцииРасширенный()
	
	ТекстЗапроса ="
		|ВЫБРАТЬ
		|	ВТЭтапы.Заказ КАК Заказ,
		|	ВТЭтапы.КлючСвязиПродукция КАК КлючСвязиПродукция,
		|	МАКСИМУМ(ВТЭтапы.ОкончаниеЭтапа) КАК ОкончаниеЭтапа,
		|	МИНИМУМ(ВТЭтапы.Выполненный) КАК Выполненный,
		|	МАКСИМУМ(ВТЭтапы.Активный) КАК Активный,
		|	МАКСИМУМ(ВТЭтапы.Проблемный) КАК Проблемный
		|ПОМЕСТИТЬ ВТСостояниеЭтапов
		|ИЗ
		|	ВТЭтапы КАК ВТЭтапы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТЭтапы.Заказ,
		|	ВТЭтапы.КлючСвязиПродукция
		|;";
		
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаВТСостояниеЭтаповПоПродукции()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка) КАК Заказ,
		|	&ПустойКлюч КАК КлючСвязиПродукция,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ОкончаниеЭтапа,
		|	ЛОЖЬ КАК Выполненный,
		|	ЛОЖЬ КАК Активный,
		|	ЛОЖЬ КАК Проблемный
		|ПОМЕСТИТЬ ВТСостояниеЭтапов
		|;";

	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЗаказовНаСервере(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаВТСостояниеВыпускаПоЗаказам();
	
	Если РасширенныйРежим(ЭтаФорма) Тогда
		Запрос.Текст = Запрос.Текст + ТекстЗапросаВТСостояниеЭтаповПоЗаказамРасширенный();
	Иначе
		Запрос.Текст = Запрос.Текст + ТекстЗапросаВТСостояниеЭтаповПоЗаказам();
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	ТаблицаСостояний.КодСостояния КАК КодСостояния,
		|	ТаблицаСостояний.ТекстСостояния КАК ТекстСостояния,
		|	ТаблицаСостояний.Проблемный КАК Проблемный,
		|	ТаблицаСостояний.Активный КАК Активный,
		|	ТаблицаСостояний.Выполненный КАК Выполненный
		|ПОМЕСТИТЬ ТаблицаСостояний
		|ИЗ
		|	&ТаблицаСостояний КАК ТаблицаСостояний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка,
		|	Заказы.Ссылка.Приоритет КАК Приоритет,
		|	Заказы.СтатусГрафикаПроизводства КАК СтатусГрафикаПроизводства,
		|	Заказы.КоличествоОшибок КАК КоличествоОшибок,
		|	Заказы.КодСостояния КАК КодСостояния,
		|	Заказы.МожноПланировать КАК МожноПланировать,
		|	Заказы.ТребуетсяПланировать КАК ТребуетсяПланировать,
		|	Заказы.ДатаЗавершения КАК ДатаЗавершения,
		|	Заказы.МожноПереместитьВверх КАК МожноПереместитьВверх,
		|	Заказы.МожноПереместитьВниз КАК МожноПереместитьВниз,
		|	-Заказы.Ссылка.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетНомер,
		|	ЕСТЬNULL(ТаблицаСостояний.Выполненный, ЛОЖЬ) КАК Выполненный,
		|	ЕСТЬNULL(ТаблицаСостояний.ТекстСостояния, """") КАК ТекстСостояния,
		|	ЕСТЬNULL(ТаблицаСостояний.Активный, ИСТИНА) КАК Активный,
		|	ЕСТЬNULL(ТаблицаСостояний.Проблемный, ЛОЖЬ) КАК Проблемный
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказНаПроизводство.Ссылка КАК Ссылка,
		|		ЗаказНаПроизводство.СтатусГрафикаПроизводства КАК СтатусГрафикаПроизводства,
		|		ВЫБОР
		|			КОГДА НЕ ЕСТЬNULL(СостояниеЭтапов.Выполненный, ЛОЖЬ)
		|				ТОГДА СостояниеЭтапов.ПлановаяДатаЗавершения
		|		КОНЕЦ КАК ДатаЗавершения,
		|		ЗаказНаПроизводство.КоличествоОшибок КАК КоличествоОшибок,
		|		ВЫБОР
		|			КОГДА (1, 1) В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						1,
		|						1
		|					ИЗ
		|						Документ.ЗаказНаПроизводство КАК ПредыдущийЗаказ
		|					ГДЕ
		|						ПредыдущийЗаказ.Приоритет = ЗаказНаПроизводство.Приоритет
		|						И ПредыдущийЗаказ.Подразделение = ЗаказНаПроизводство.Подразделение
		|						И ПредыдущийЗаказ.Очередь < ЗаказНаПроизводство.Очередь
		|						И ПредыдущийЗаказ.Проведен
		|						И ПредыдущийЗаказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству))
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК МожноПереместитьВверх,
		|		ВЫБОР
		|			КОГДА (1, 1) В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						1,
		|						1
		|					ИЗ
		|						Документ.ЗаказНаПроизводство КАК ПредыдущийЗаказ
		|					ГДЕ
		|						ПредыдущийЗаказ.Приоритет = ЗаказНаПроизводство.Приоритет
		|						И ПредыдущийЗаказ.Подразделение = ЗаказНаПроизводство.Подразделение
		|						И ПредыдущийЗаказ.Очередь > ЗаказНаПроизводство.Очередь
		|						И ПредыдущийЗаказ.Проведен
		|						И ПредыдущийЗаказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству))
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК МожноПереместитьВниз,
		|		ЛОЖЬ КАК МожноПланировать,
		|		ВЫБОР
		|			КОГДА ЗаказНаПроизводство.Ссылка В (&ЗаказыКПланированию)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ТребуетсяПланировать,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(СостояниеЭтапов.Выполненный, ЛОЖЬ)
		|					И ЕСТЬNULL(ВТСостояниеВыпусковПоЗаказам.ЕстьПродукцияКОформлению, ЛОЖЬ)
		|				ТОГДА 0
		|			КОГДА ЕСТЬNULL(СостояниеЭтапов.Выполненный, ЛОЖЬ)
		|					И НЕ ЕСТЬNULL(ВТСостояниеВыпусковПоЗаказам.ЕстьОтклоненияПоВыпуску, ЛОЖЬ)
		|				ТОГДА 1
		|			КОГДА ЕСТЬNULL(СостояниеЭтапов.Выполненный, ЛОЖЬ)
		|					И ЕСТЬNULL(ВТСостояниеВыпусковПоЗаказам.ЕстьОтклоненияПоВыпуску, ЛОЖЬ)
		|				ТОГДА 2
		|			КОГДА ЕСТЬNULL(СостояниеЭтапов.Проблемный, ЛОЖЬ)
		|				ТОГДА 3
		|			ИНАЧЕ 4
		|		КОНЕЦ КАК КодСостояния
		|	ИЗ
		|		Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеЭтапов КАК СостояниеЭтапов
		|			ПО ЗаказНаПроизводство.Ссылка = СостояниеЭтапов.Заказ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеВыпусковПоЗаказам КАК ВТСостояниеВыпусковПоЗаказам
		|			ПО ЗаказНаПроизводство.Ссылка = ВТСостояниеВыпусковПоЗаказам.Заказ
		|	ГДЕ
		|		ЗаказНаПроизводство.Ссылка В(&МассивЗаказов)) КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСостояний КАК ТаблицаСостояний
		|		ПО Заказы.КодСостояния = ТаблицаСостояний.КодСостояния
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетНомер УБЫВ,
		|	Заказы.Ссылка.Подразделение.РеквизитДопУпорядочивания,
		|	Заказы.Ссылка.Очередь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСостояний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСостояниеЭтапов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСостояниеВыпусковПоЗаказам
		|;";
	
	ТекущаяДатаСеанса  = ТекущаяДатаСеанса();
	НачалоТекущегоЧаса = НачалоЧаса(ТекущаяДатаСеанса);
		
	МассивЗаказов       = ПолучитьОчередьЗаказов();
	ЗаказыКПланированию = Документы.ЗаказНаПроизводство.ТребуетсяПланировать(МассивЗаказов);
	
	Запрос.УстановитьПараметр("НачалоТекущегоЧаса",      НачалоТекущегоЧаса);
	
	Запрос.УстановитьПараметр("МассивЗаказов",       МассивЗаказов);
	Запрос.УстановитьПараметр("ЗаказыКПланированию", ЗаказыКПланированию);
	
	Запрос.УстановитьПараметр("ТаблицаСостояний",        ТаблицаСостоянийЗаказов());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗагрузитьДанныеВТаблицу(РезультатЗапроса, "Заказы");
	
	Если ЗаказыКПланированию.Количество() > 0 Тогда
		
		Для каждого ТекущаяСтрока Из Объект.Заказы Цикл
			
			Если ТекущаяСтрока.ТребуетсяПланировать Тогда
				
				ТекущаяСтрока.МожноПланировать = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПродукцииНаСервере(МенеджерВременныхТаблиц, МассивЗаказов = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если РасширенныйРежим(ЭтаФорма) Тогда
		Запрос.Текст = ТекстЗапросаВТСостояниеЭтаповПоПродукцииРасширенный();
	Иначе
		Запрос.Текст = ТекстЗапросаВТСостояниеЭтаповПоПродукции();
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ЗаказНаПроизводство.Заказ КАК Заказ,
		|	ЗаказНаПроизводство.Ссылка КАК Распоряжение
		|ПОМЕСТИТЬ ВТЗаказыПоЗаказуДавальца
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	(&ОтборПоЗаказам
		|				И ЗаказНаПроизводство.Ссылка В (&МассивЗаказов)
		|			ИЛИ НЕ &ОтборПоЗаказам)
		|	И ЗаказНаПроизводство.Проведен
		|	И ЗаказНаПроизводство.ПроизводствоПоЗаказу
		|	И ЗаказНаПроизводство.Заказ ССЫЛКА Документ.ЗаказДавальца
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение
		|;
		|
		//++ Устарело_Переработка24
		|ВЫБРАТЬ
		|
		|	ЗаказПереработчикуУслуги.Ссылка КАК Заказ,
		|	ЗаказПереработчикуУслуги.Ссылка.Статус КАК Статус,
		|	ЗаказПереработчикуУслуги.Распоряжение КАК Распоряжение,
		|	ЗаказПереработчикуПродукция.КодСтроки КАК КодСтроки,
		|	ЗаказПереработчикуПродукция.Номенклатура КАК Номенклатура,
		|	ЗаказПереработчикуПродукция.Характеристика КАК Характеристика,
		|	ЗаказПереработчикуПродукция.Количество КАК Количество
		|
		|ПОМЕСТИТЬ ВТЗаказыПереработчику
		|ИЗ
		|	Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ЗаказПереработчикуПродукция
		|		ПО ЗаказПереработчикуУслуги.Ссылка = ЗаказПереработчикуПродукция.Ссылка
		|			И ЗаказПереработчикуУслуги.НомерГруппыЗатрат = ЗаказПереработчикуПродукция.НомерГруппыЗатрат
		|ГДЕ
		|	(&ОтборПоЗаказам
		|				И ЗаказПереработчикуУслуги.Распоряжение В (&МассивЗаказов)
		|			ИЛИ НЕ &ОтборПоЗаказам)
		|	И ЗаказПереработчикуУслуги.Ссылка.Проведен
		|	И ЗаказПереработчикуУслуги.Ссылка.ПереработкаПоЗаказу
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ,
		|	КодСтроки
		|;
		//-- Устарело_Переработка24
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспоряженияНаВыпускПродукцииОстатки.Распоряжение КАК Распоряжение,
		|	РаспоряженияНаВыпускПродукцииОстатки.КодСтроки КАК КодСтроки,
		|	РаспоряженияНаВыпускПродукцииОстатки.КОформлениюОстаток КАК КОформлениюОстаток
		|ПОМЕСТИТЬ ВТКОформлениюПоЗаказамДавальца
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
		|			,
		|			Распоряжение.Распоряжение В
		|				(ВЫБРАТЬ
		|					Т.Распоряжение
		|				ИЗ
		|					ВТЗаказыПоЗаказуДавальца КАК Т)) КАК РаспоряженияНаВыпускПродукцииОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	КодСтроки
		|;
		|
		//++ Устарело_Переработка24
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Заказ,
		|	ЗаказыПоставщикамОстатки.КодСтроки КАК КодСтроки,
		|	ЗаказыПоставщикамОстатки.КОформлениюОстаток КАК КОформлениюОстаток
		|ПОМЕСТИТЬ ВТКОформлениюПоЗаказамПереработчику
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
		|			,
		|			ЗаказПоставщику В
		|				(ВЫБРАТЬ
		|					Т.Заказ
		|				ИЗ
		|					ВТЗаказыПереработчику КАК Т)) КАК ЗаказыПоставщикамОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ,
		|	КодСтроки
		|;
		//-- Устарело_Переработка24
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСостояний.КодСостояния КАК КодСостояния,
		|	ТаблицаСостояний.ТекстСостояния КАК ТекстСостояния,
		|	ТаблицаСостояний.Проблемный КАК Проблемный,
		|	ТаблицаСостояний.Активный КАК Активный,
		|	ТаблицаСостояний.Выполненный КАК Выполненный
		|ПОМЕСТИТЬ ТаблицаСостояний
		|ИЗ
		|	&ТаблицаСостояний КАК ТаблицаСостояний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Поступления.Распоряжение КАК Распоряжение,
		|	Поступления.КодСтроки КАК КодСтроки,
		|	Поступления.Номенклатура КАК Номенклатура,
		|	Поступления.Характеристика КАК Характеристика,
		|	СУММА(Поступления.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТВыпускПродукции
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВыпускПродукцииОбороты.Распоряжение.Распоряжение КАК Распоряжение,
		|		ВыпускПродукцииОбороты.Распоряжение.КодСтроки КАК КодСтроки,
		|		ВыпускПродукцииОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|		ВыпускПродукцииОбороты.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|		ВыпускПродукцииОбороты.КоличествоОборот КАК Количество
		|	ИЗ
		|		РегистрНакопления.ВыпускПродукции.Обороты(
		|				,
		|				,
		|				,
		|				НЕ &ОтборПоЗаказам
		|					ИЛИ Распоряжение.Распоряжение В (&МассивЗаказов)) КАК ВыпускПродукцииОбороты
		|	ГДЕ
		|		НЕ ВыпускПродукцииОбороты.Распоряжение.Распоряжение В
		|					(ВЫБРАТЬ
		|						Т.Распоряжение
		|					ИЗ
		|						ВТЗаказыПоЗаказуДавальца КАК Т)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МаршрутныйЛистПроизводства.Распоряжение,
		|		МаршрутныйЛистПроизводства.КодСтроки,
		|		МаршрутныйЛистПроизводстваВыходныеИзделия.Номенклатура,
		|		МаршрутныйЛистПроизводстваВыходныеИзделия.Характеристика,
		|		МаршрутныйЛистПроизводстваВыходныеИзделия.КоличествоФакт - ЕСТЬNULL(КОформлениюПоЗаказамДавальца.КОформлениюОстаток, 0)
		|	ИЗ
		|		Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК МаршрутныйЛистПроизводстваВыходныеИзделия
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТКОформлениюПоЗаказамДавальца КАК КОформлениюПоЗаказамДавальца
		|				ПО МаршрутныйЛистПроизводстваВыходныеИзделия.Ссылка = КОформлениюПоЗаказамДавальца.Распоряжение
		|					И МаршрутныйЛистПроизводстваВыходныеИзделия.КодСтроки = КОформлениюПоЗаказамДавальца.КодСтроки
		|			ПО МаршрутныйЛистПроизводства.Ссылка = МаршрутныйЛистПроизводстваВыходныеИзделия.Ссылка
		|	ГДЕ
		|		МаршрутныйЛистПроизводства.Распоряжение В
		|				(ВЫБРАТЬ
		|					Т.Распоряжение
		|				ИЗ
		|					ВТЗаказыПоЗаказуДавальца КАК Т)
		|		И МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
		|		И МаршрутныйЛистПроизводства.Проведен
		//++ Устарело_Переработка24
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТЗаказыПереработчику.Распоряжение,
		|		ТЗаказыПереработчику.КодСтроки,
		|		ТЗаказыПереработчику.Номенклатура,
		|		ТЗаказыПереработчику.Характеристика,
		|		ТЗаказыПереработчику.Количество - ЕСТЬNULL(ТКОформлениюПоЗаказамПерерабочику.КОформлениюОстаток, 0)
		|	ИЗ
		|		ВТЗаказыПереработчику КАК ТЗаказыПереработчику
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКОформлениюПоЗаказамПереработчику КАК ТКОформлениюПоЗаказамПерерабочику
		|			ПО ТЗаказыПереработчику.Заказ = ТКОформлениюПоЗаказамПерерабочику.Заказ
		|				И ТЗаказыПереработчику.КодСтроки = ТКОформлениюПоЗаказамПерерабочику.КодСтроки
		//-- Устарело_Переработка24
		|	) КАК Поступления
		|
		|СГРУППИРОВАТЬ ПО
		|	Поступления.Распоряжение,
		|	Поступления.Номенклатура,
		|	Поступления.Характеристика,
		|	Поступления.КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспоряженияОстатки.Распоряжение.Распоряжение КАК Распоряжение,
		|	РаспоряженияОстатки.Распоряжение.КодСтроки КАК КодСтроки,
		|	РаспоряженияОстатки.Номенклатура КАК Номенклатура,
		|	РаспоряженияОстатки.Характеристика КАК Характеристика,
		|	СУММА(РаспоряженияОстатки.КОформлениюОстаток) КАК КОформлениюОстаток
		|ПОМЕСТИТЬ ВТВыпускПродукцииОстатки
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки КАК РаспоряженияОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияОстатки.Номенклатура,
		|	РаспоряженияОстатки.Распоряжение.Распоряжение,
		|	РаспоряженияОстатки.Характеристика,
		|	РаспоряженияОстатки.Распоряжение.КодСтроки
		//++ Устарело_Переработка24
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыОстатки.ЗаказПоставщику,
		|	ТаблицаУслуги.КодСтрокиЭтапыГрафик,
		|	ЗаказыОстатки.Номенклатура,
		|	ЗаказыОстатки.Характеристика,
		|	ЗаказыОстатки.ЗаказаноОстаток
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику ССЫЛКА Документ.ЗаказПереработчику) КАК ЗаказыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ТаблицаДокумента
		|		ПО (ТаблицаДокумента.Ссылка = ЗаказыОстатки.ЗаказПоставщику)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ЗаказПереработчикуПродукция
		|		ПО (ЗаказПереработчикуПродукция.Ссылка = ТаблицаДокумента.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
		|		ПО (ТаблицаУслуги.Ссылка = ЗаказПереработчикуПродукция.Ссылка)
		|			И (ТаблицаУслуги.НомерГруппыЗатрат = ЗаказПереработчикуПродукция.НомерГруппыЗатрат)
		|ГДЕ
		|	ТаблицаДокумента.ПереработкаПоЗаказу
		//-- Устарело_Переработка24
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказНаПроизводствоПродукция.Ссылка КАК Заказ,
		|	ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
		|	ЗаказНаПроизводствоПродукция.НомерСтроки КАК НомерСтрокиПродукция,
		|	ЗаказНаПроизводствоПродукция.ДатаПотребности КАК ДатаПотребности,
		|	ЗаказНаПроизводствоПродукция.КлючСвязи КАК КлючСвязи,
		|	ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтроки,
		|	ЗаказНаПроизводствоПродукция.КоличествоУпаковок КАК Количество,
		|	ЗаказНаПроизводствоПродукция.Упаковка КАК Упаковка,
		|	ЗаказНаПроизводствоПродукция.Назначение КАК Назначение,
		|	ЗаказНаПроизводствоПродукция.Спецификация КАК Спецификация,
		|	ЗаказНаПроизводствоПродукция.Характеристика КАК Характеристика,
		|	ЗаказНаПроизводствоПродукция.НачатьНеРанее КАК НачатьНеРанее,
		|	ЗаказНаПроизводствоПродукция.РазмещениеВыпуска КАК РазмещениеВыпуска,
		|	ЕСТЬNULL(ВТВыпускПродукции.Количество, 0) КАК КоличествоВыпущено,
		|	ЗаказНаПроизводствоПродукция.Ссылка.Ответственный КАК ОтветственныйЗаЗаказ,
		|	ЗаказНаПроизводствоПродукция.Ссылка.Подразделение КАК ПодразделениеЗаказа,
		|	ЗаказНаПроизводствоПродукция.Ссылка.Приоритет КАК ПриоритетЗаказа,
		|	СостояниеЭтапов.ОкончаниеЭтапа КАК ДатаЗавершения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СостояниеЭтапов.Выполненный, -1) = -1
		|			ТОГДА 0
		|		КОГДА ЕСТЬNULL(СостояниеЭтапов.Выполненный, ЛОЖЬ)
		|				И ЕСТЬNULL(ВТВыпускПродукцииОстатки.КОформлениюОстаток, 0) > 0
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(СостояниеЭтапов.Выполненный, ЛОЖЬ)
		|				И ЗаказНаПроизводствоПродукция.Количество <= ЕСТЬNULL(ВТВыпускПродукции.Количество, 0)
		|			ТОГДА 2
		|		КОГДА ЕСТЬNULL(СостояниеЭтапов.Выполненный, ЛОЖЬ)
		|				И ЗаказНаПроизводствоПродукция.Количество > ЕСТЬNULL(ВТВыпускПродукции.Количество, 0)
		|			ТОГДА 3
		|		КОГДА ЕСТЬNULL(СостояниеЭтапов.Проблемный, ЛОЖЬ)
		|			ТОГДА 4
		|		КОГДА СостояниеЭтапов.ОкончаниеЭтапа > ЗаказНаПроизводствоПродукция.ДатаПотребности
		|				И ЕСТЬNULL(СостояниеЭтапов.ОкончаниеЭтапа, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 5
		|		ИНАЧЕ 6
		|	КОНЕЦ КАК КодСостояния
		|ПОМЕСТИТЬ ВТПродукция
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеЭтапов КАК СостояниеЭтапов
		|		ПО ЗаказНаПроизводствоПродукция.Ссылка = СостояниеЭтапов.Заказ
		|			И ЗаказНаПроизводствоПродукция.КлючСвязи = СостояниеЭтапов.КлючСвязиПродукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыпускПродукции КАК ВТВыпускПродукции
		|		ПО ЗаказНаПроизводствоПродукция.Ссылка = ВТВыпускПродукции.Распоряжение
		|			И ЗаказНаПроизводствоПродукция.Номенклатура = ВТВыпускПродукции.Номенклатура
		|			И ЗаказНаПроизводствоПродукция.Характеристика = ВТВыпускПродукции.Характеристика
		|			И ЗаказНаПроизводствоПродукция.КодСтроки = ВТВыпускПродукции.КодСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыпускПродукцииОстатки КАК ВТВыпускПродукцииОстатки
		|		ПО ЗаказНаПроизводствоПродукция.Ссылка = ВТВыпускПродукцииОстатки.Распоряжение
		|			И ЗаказНаПроизводствоПродукция.Номенклатура = ВТВыпускПродукцииОстатки.Номенклатура
		|			И ЗаказНаПроизводствоПродукция.Характеристика = ВТВыпускПродукцииОстатки.Характеристика
		|			И ЗаказНаПроизводствоПродукция.КодСтроки = ВТВыпускПродукцииОстатки.КодСтроки
		|ГДЕ
		|	ЗаказНаПроизводствоПродукция.Ссылка.Проведен
		|	И ЗаказНаПроизводствоПродукция.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству)
		|	И (НЕ &ОтборПоЗаказам
		|			ИЛИ ЗаказНаПроизводствоПродукция.Ссылка В (&МассивЗаказов))
		|	И (НЕ &ОтборПоПриоритету
		|			ИЛИ ЗаказНаПроизводствоПродукция.Ссылка.Приоритет = &Приоритет)
		|	И (НЕ &ОтборПоПодразделению
		|			ИЛИ ЗаказНаПроизводствоПродукция.Ссылка.Подразделение = &Подразделение)
		|	И (НЕ &ОтборПоОтветственному
		|			ИЛИ ЗаказНаПроизводствоПродукция.Ссылка.Ответственный = &Ответственный)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПродукция.Заказ,
		|	ВТПродукция.Номенклатура,
		|	ВТПродукция.Характеристика,
		|	ВТПродукция.Номенклатура.Артикул КАК Артикул,
		|	ВТПродукция.НомерСтрокиПродукция,
		|	ВТПродукция.ДатаПотребности,
		|	ВТПродукция.КлючСвязи,
		|	ВТПродукция.КодСтроки,
		|	ВТПродукция.Количество,
		|	ВЫБОР 
		|		КОГДА ВТПродукция.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВТПродукция.Упаковка 
		|		ИНАЧЕ ВТПродукция.Номенклатура.ЕдиницаИзмерения
		|	КОНЕЦ КАК Упаковка,
		|	ВТПродукция.Назначение,
		|	ВТПродукция.Спецификация,
		|	ВТПродукция.НачатьНеРанее,
		|	ВТПродукция.РазмещениеВыпуска,
		|	ЕСТЬNULL(ВТПродукция.КоличествоВыпущено, 0) 
		|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентаУпаковки, 1) КАК КоличествоВыпущено,
		|	ВТПродукция.ОтветственныйЗаЗаказ,
		|	ВТПродукция.ПодразделениеЗаказа,
		|	ВТПродукция.ПриоритетЗаказа,
		|	ВТПродукция.ДатаЗавершения,
		|	ВТПродукция.КодСостояния,
		|	ЕСТЬNULL(ТаблицаСостояний.ТекстСостояния, """") КАК ТекстСостояния,
		|	ЕСТЬNULL(ТаблицаСостояний.Выполненный, ЛОЖЬ) КАК Выполненный,
		|	ЕСТЬNULL(ТаблицаСостояний.Активный, ИСТИНА) КАК Активный,
		|	ЕСТЬNULL(ТаблицаСостояний.Проблемный, ЛОЖЬ) КАК Проблемный
		|ИЗ
		|	ВТПродукция КАК ВТПродукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСостояний КАК ТаблицаСостояний
		|		ПО ВТПродукция.КодСостояния = ТаблицаСостояний.КодСостояния
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗаказыПоЗаказуДавальца
		|;
		|
		//++ Устарело_Переработка24
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗаказыПереработчику
		|;
		//-- Устарело_Переработка24
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКОформлениюПоЗаказамДавальца
		|;
		|
		//++ Устарело_Переработка24
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКОформлениюПоЗаказамПереработчику
		|;
		//-- Устарело_Переработка24
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСостояний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСостояниеЭтапов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВыпускПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПродукция";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентаУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВТПродукция.Упаковка",
			"ВТПродукция.Номенклатура"));
		
	ТекущаяДатаСеанса  = ТекущаяДатаСеанса();
	НачалоТекущегоЧаса = НачалоЧаса(ТекущаяДатаСеанса);
	
	Запрос.УстановитьПараметр("НачалоТекущегоЧаса",    НачалоТекущегоЧаса);
	
	Запрос.УстановитьПараметр("ОтборПоЗаказам",        МассивЗаказов <> Неопределено);
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	
	Запрос.УстановитьПараметр("ОтборПоПриоритету",     ЗначениеЗаполнено(Приоритет));
	Запрос.УстановитьПараметр("Приоритет",             Приоритет);
	
	Запрос.УстановитьПараметр("ОтборПоПодразделению",  ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Подразделение",         Подразделение);
	
	Запрос.УстановитьПараметр("ОтборПоОтветственному", ЗначениеЗаполнено(Ответственный));
	Запрос.УстановитьПараметр("Ответственный",         Ответственный);

	Запрос.УстановитьПараметр("ТаблицаСостояний",      ТаблицаСостоянийПродукции());
	
	Запрос.УстановитьПараметр("ПустойКлюч", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗагрузитьДанныеВТаблицу(РезультатЗапроса, "Продукция");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЭтаповНаСервере(МенеджерВременныхТаблиц, МассивЗаказов = Неопределено, МассивКодовСтрокПродукции = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказыМатериаловВПроизводствоОстатки.Распоряжение КАК Распоряжение,
		|	ЗаказЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
		|	СУММА(ЗаказыМатериаловВПроизводствоОстатки.ЗаказаноОстаток) КАК КонечныйОстаток
		|ПОМЕСТИТЬ ВТПередачиМатериалов
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(
		|			,
		|			НЕ &ОтборПоЗаказам
		|				ИЛИ Распоряжение В (&МассивЗаказов)) КАК ЗаказыМатериаловВПроизводствоОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(
		|				,
		|				,
		|				,
		|				НЕ &ОтборПоЗаказам
		|					ИЛИ Распоряжение В (&МассивЗаказов)) КАК ЗаказыМатериаловСУчетомКорректировок
		|		ПО (ЗаказыМатериаловСУчетомКорректировок.Распоряжение = ЗаказыМатериаловВПроизводствоОстатки.Распоряжение)
		|			И (ЗаказыМатериаловСУчетомКорректировок.КодСтроки = ЗаказыМатериаловВПроизводствоОстатки.КодСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказМатериалыИУслуги
		|		ПО (ЗаказМатериалыИУслуги.Ссылка = ЗаказыМатериаловВПроизводствоОстатки.Распоряжение)
		|			И (ЗаказМатериалыИУслуги.КодСтроки = ЗаказыМатериаловСУчетомКорректировок.КодСтрокиРаспоряжения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
		|		ПО (ЗаказЭтапы.Ссылка = ЗаказМатериалыИУслуги.Ссылка)
		|			И (ЗаказЭтапы.КлючСвязи = ЗаказМатериалыИУслуги.КлючСвязиЭтапы)
		|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказМатериалыИУслуги.КлючСвязиПродукция)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
		|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
		|			И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
		|			И (ЗаказЭтапыГрафик.КлючСвязиПродукция = ЗаказЭтапы.КлючСвязиПродукция)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыМатериаловВПроизводствоОстатки.Распоряжение,
		|	ЗаказЭтапыГрафик.КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспоряженияОстатки.Распоряжение.Распоряжение КАК Распоряжение,
		|	РаспоряженияОстатки.Распоряжение.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	СУММА(РаспоряженияОстатки.КОформлениюОстаток) КАК КОформлениюКонечныйОстаток
		|ПОМЕСТИТЬ ВТВыпускПродукции
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
		|			,
		|			НЕ &ОтборПоЗаказам
		|				ИЛИ ВЫРАЗИТЬ(Распоряжение КАК Документ.МаршрутныйЛистПроизводства).Распоряжение В (&МассивЗаказов)) КАК РаспоряженияОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияОстатки.Распоряжение.Распоряжение,
		|	РаспоряженияОстатки.Распоряжение.КодСтрокиЭтапыГрафик
		//++ Устарело_Переработка24
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыОстатки.ЗаказПоставщику,
		|	ТаблицаУслуги.КодСтрокиЭтапыГрафик,
		|	ЗаказыОстатки.ЗаказаноОстаток
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
		|			,
		|			НЕ &ОтборПоЗаказам
		|				ИЛИ ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПереработчику).Распоряжение В (&МассивЗаказов)) КАК ЗаказыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ТаблицаДокумента
		|		ПО (ТаблицаДокумента.Ссылка = ЗаказыОстатки.ЗаказПоставщику)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ЗаказПереработчикуПродукция
		|		ПО (ЗаказПереработчикуПродукция.Ссылка = ТаблицаДокумента.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
		|		ПО (ТаблицаУслуги.Ссылка = ЗаказПереработчикуПродукция.Ссылка)
		|			И (ТаблицаУслуги.НомерГруппыЗатрат = ЗаказПереработчикуПродукция.НомерГруппыЗатрат)
		|ГДЕ
		|	ТаблицаДокумента.ПереработкаПоЗаказу
		//-- Устарело_Переработка24
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЭтапы.Заказ,
		|	ВТЭтапы.Этап,
		|	ВТЭтапы.Номенклатура,
		|	ВТЭтапы.Характеристика,
		|	ВТЭтапы.НоменклатураПолуфабрикат,
		|	ВТЭтапы.ХарактеристикаПолуфабрикат,
		|	ФИОФизическихЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 0, 1) + "". "" + ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 0, 1) + ""."" КАК Диспетчер,
		|	ВТЭтапы.Запланировано,
		|	ВТЭтапы.Выполнено,
		|	ВТЭтапы.НачалоЭтапа,
		|	ВТЭтапы.ОкончаниеЭтапа,
		|	ВТЭтапы.НачатьНеРанее,
		|	ВТЭтапы.ДатаПотребности,
		|	ВТЭтапы.КлючСвязиПродукция,
		|	ВТЭтапы.КодСтроки,
		|	ВТЭтапы.КодСтрокиПродукция,
		|	ВТЭтапы.КлючСвязи,
		|	ВТЭтапы.Подразделение,
		|	ВТЭтапы.Подразделение.УправлениеМаршрутнымиЛистами КАК УправлениеМаршрутнымиЛистами,
		|	ВТЭтапы.Брак,
		|	ВТЭтапы.КлючСвязиЭтапы,
		|	ВТЭтапы.НаименованиеЭтапа,
		|	ВТЭтапы.ЭтапВосстановленияБрака,
		|	ВЫБОР
		|		КОГДА &НачалоТекущегоЧаса >= ВТЭтапы.НачалоЭтапа
		|				И ЕСТЬNULL(ВТПередачиМатериалов.КонечныйОстаток, 0) <> 0
		|			ТОГДА 3
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МатериалыПереданы,
		|	ВЫБОР
		|		КОГДА &НачалоТекущегоЧаса >= ВТЭтапы.ОкончаниеЭтапа
		|				И ЕСТЬNULL(ВТВыпускПродукции.КОформлениюКонечныйОстаток, 0) <> 0
		|			ТОГДА 3
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПродукцияВыпущена,
		|	ВТЭтапы.ТекстСостояния КАК ТекстСостояния,
		|	ВТЭтапы.КодСостояния,
		|	ВТЭтапы.Проблемный КАК Проблемный,
		|	ВТЭтапы.Активный КАК Активный,
		|	ВТЭтапы.Выполненный КАК Выполненный
		|ИЗ
		|	ВТЭтапы КАК ВТЭтапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&НачалоТекущегоЧаса, ) КАК ФИОФизическихЛицСрезПоследних
		|		ПО (ВЫРАЗИТЬ(ВТЭтапы.Подразделение КАК Справочник.СтруктураПредприятия).ТекущийРуководитель = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПередачиМатериалов КАК ВТПередачиМатериалов
		|		ПО ВТЭтапы.Заказ = ВТПередачиМатериалов.Распоряжение
		|			И ВТЭтапы.КодСтроки = ВТПередачиМатериалов.КодСтрокиЭтапыГрафик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыпускПродукции КАК ВТВыпускПродукции
		|		ПО ВТЭтапы.Заказ = ВТВыпускПродукции.Распоряжение
		|			И ВТЭтапы.КодСтроки = ВТВыпускПродукции.КодСтрокиЭтапыГрафик
		|ГДЕ
		|	(НЕ &ОтборПоЗаказам
		|			ИЛИ ВТЭтапы.Заказ В (&МассивЗаказов))
		|	И (НЕ &ОтборПоПродукции
		|			ИЛИ ВТЭтапы.КодСтрокиПродукция В (&МассивПродукции))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПередачиМатериалов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВыпускПродукции");
	
	ТекущаяДатаСеанса  = ТекущаяДатаСеанса();
	НачалоТекущегоЧаса = НачалоЧаса(ТекущаяДатаСеанса);
	
	Запрос.УстановитьПараметр("НачалоТекущегоЧаса", НачалоТекущегоЧаса);
	
	Запрос.УстановитьПараметр("ОтборПоЗаказам", МассивЗаказов <> Неопределено);
	Запрос.УстановитьПараметр("МассивЗаказов",  МассивЗаказов);
	
	Запрос.УстановитьПараметр("ОтборПоПродукции", МассивЗаказов <> Неопределено И МассивКодовСтрокПродукции <> Неопределено);
	Запрос.УстановитьПараметр("МассивПродукции",  МассивКодовСтрокПродукции);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗагрузитьДанныеВТаблицу(РезультатЗапроса, "Этапы");	
		
КонецПроцедуры

&НаСервере
Функция ТаблицаСостоянийПродукции()
	
	//              коды и описания состояний                 Проблемный   Активный   Выполненный
	// 0 - Этапы не запланированы                                               1                
	// 1 - Ожидается оформление выпуска                                         1                
	// 2 - Выпущена полностью                                                              1     
	// 3 - Выпущена с отклонением                                                          1     
	// 4 - Требуется проверить этапы                                1           1                
	// 5 - Выпуск позже даты потребности                            1           1                
	// 6 -                                                                      1                
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("КодСостояния",   Новый ОписаниеТипов("Число"));
	ТаблицаСостояний.Колонки.Добавить("ТекстСостояния", Новый ОписаниеТипов("Строка"));
	ТаблицаСостояний.Колонки.Добавить("Проблемный",     Новый ОписаниеТипов("Булево"));
	ТаблицаСостояний.Колонки.Добавить("Активный",       Новый ОписаниеТипов("Булево"));
	ТаблицаСостояний.Колонки.Добавить("Выполненный",    Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 0;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Этапы не запланированы';
										|en = 'Steps are not planned'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 1;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Ожидается оформление выпуска';
										|en = 'Awaiting release registration'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;

	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 2;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Выпущена полностью';
										|en = 'Fully issued'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Ложь;
	НоваяСтрока.Выполненный    = Истина;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 3;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Выпущена с отклонением';
										|en = 'Issued with variance'");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Ложь;
	НоваяСтрока.Выполненный    = Истина;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 4;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Требуется проверить этапы';
										|en = 'It is required to check stages'");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 5;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Выпуск позже даты потребности';
										|en = 'Release is later than the demand date '");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;

	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 6;
	НоваяСтрока.ТекстСостояния = "";
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	Возврат ТаблицаСостояний;
	
КонецФункции

&НаСервере
Функция ТаблицаСостоянийЗаказов()
	
	//              коды и описания состояний                 Проблемный   Активный   Выполненный
	// 0 - Ожидается оформление выпуска                                        1                 
	// 1 - Выполнен                                                                        1     
	// 2 - Выполнен с отклонением                                   1                      1     
	// 3 - Требуется проверить этапы                                1          1                 
	// 4 -                                                                     1                 
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("КодСостояния",   Новый ОписаниеТипов("Число"));
	ТаблицаСостояний.Колонки.Добавить("ТекстСостояния", Новый ОписаниеТипов("Строка"));
	ТаблицаСостояний.Колонки.Добавить("Проблемный",     Новый ОписаниеТипов("Булево"));
	ТаблицаСостояний.Колонки.Добавить("Активный",       Новый ОписаниеТипов("Булево"));
	ТаблицаСостояний.Колонки.Добавить("Выполненный",    Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 0;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Ожидается оформление выпуска';
										|en = 'Awaiting release registration'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 1;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Выполнен';
										|en = 'Completed'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Ложь;
	НоваяСтрока.Выполненный    = Истина;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 2;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Выполнен с отклонением';
										|en = 'Executed with variance'");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Ложь;
	НоваяСтрока.Выполненный    = Истина;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 3;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Требуется проверить этапы';
										|en = 'It is required to check stages'");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 4;
	НоваяСтрока.ТекстСостояния = "";
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	Возврат ТаблицаСостояний;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеВТаблицу(РезультатЗапроса, ИмяТаблицы)
	
	Объект[ИмяТаблицы].Очистить();
	
	ОтборСтрок = Элементы[ИмяТаблицы].ОтборСтрок;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Объект[ИмяТаблицы].Добавить(), Выборка);
		
	КонецЦикла;
	
	Если ОтборСтрок <> Неопределено Тогда
		
		Элементы[ИмяТаблицы].ОтборСтрок = ОтборСтрок;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные(Заказ = Неопределено)
	
	Таблицы = Новый Структура("Заказы");
	
	Если ПродукцияРежим = "" Тогда
		
		Таблицы.Вставить("Продукция");
		
	КонецЕсли;
	
	Если ЭтапыРежим = "ПоВсемЗаказам" Тогда
		
		Таблицы.Вставить("Этапы");
		ПропуститьАктивациюСтрокиЭтапы = Истина;
		
	КонецЕсли;
	
	ПолучитьТаблицыНаСервере(Таблицы);
	
	ОбновитьИндикаторы();
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		
		НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Ссылка", Заказ));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.Заказы.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Заказы.ТекущаяСтрока = Неопределено И Объект.Заказы.Количество() > 0 Тогда
		
		Элементы.Заказы.ТекущаяСтрока = Объект.Заказы[0].ПолучитьИдентификатор();
		
	КонецЕсли;

	ОтменитьВыделениеКнопки(Элементы.ФормаОбновить);
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОтборов(Форма)
	
	Результат = Новый Структура(
		"Ответственный, 
		|Подразделение, 
		|Приоритет, 
		|ЗаказыОтбор, 
		|ПродукцияОтбор, 
		|ЭтапыОтбор");
	
	ЗаполнитьЗначенияСвойств(Результат, Форма);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьОтборыВХранилище(СтруктураОтборов)
	
	ХранилищеНастроекДанныхФорм.Сохранить("ФормаДиспетчированияГрафикаПроизводства", "ПараметрыОтбора", СтруктураОтборов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьОтборы(Форма)
	
	СтруктураОтборов = СтруктураОтборов(Форма);
	СохранитьОтборыВХранилище(СтруктураОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборИОбновитьДанные()
	
	ТекущийЗаказ = Неопределено;
	Если Элементы.Заказы.ТекущиеДанные <> Неопределено Тогда
		ТекущийЗаказ = Элементы.Заказы.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	УстановитьОтборИОбновитьДанныеНаСервере(ТекущийЗаказ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборИОбновитьДанныеНаСервере(Заказ = Неопределено)
	
	СохранитьОтборы(ЭтаФорма);
	
	ОбновитьДанные(Заказ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборВТаблицеЗаказы(Форма, ЗаказыОтбор, СохранитьОтборы = Истина)
	
	Если СохранитьОтборы Тогда
		СохранитьОтборы(Форма);
	КонецЕсли;
	
	ОтборУстановлен = ЗначениеЗаполнено(ЗаказыОтбор);
	
	Если ОтборУстановлен Тогда
		Форма.Элементы.Заказы.ОтборСтрок = Новый ФиксированнаяСтруктура(ЗаказыОтбор, Истина);
	Иначе
		Форма.Элементы.Заказы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	НастроитьДоступностьЭлементовУправленияОчередью(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборВТаблицеПродукция(Форма, ПродукцияОтбор, СохранитьОтборы = Истина)
	
	Если СохранитьОтборы Тогда
		СохранитьОтборы(Форма);
	КонецЕсли;
	
	ОтборУстановлен = ЗначениеЗаполнено(ПродукцияОтбор);
	
	Если ОтборУстановлен Тогда
		Форма.Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура(ПродукцияОтбор, Истина);
	Иначе
		Форма.Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборВТаблицеЭтапы(Форма, ЭтапыОтбор, СохранитьОтборы = Истина)
	
	Если СохранитьОтборы Тогда
		СохранитьОтборы(Форма);
	КонецЕсли;
	
	ОтборУстановлен = ЗначениеЗаполнено(ЭтапыОтбор);
	
	Если ОтборУстановлен Тогда
		Форма.Элементы.Этапы.ОтборСтрок = Новый ФиксированнаяСтруктура(ЭтапыОтбор, Истина);
	Иначе
		Форма.Элементы.Этапы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоУмолчанию()
	
	ПродукцияРежим = "ПоЗаказам";
	
	Если ЭтапыРежим <> "" Тогда
		ЭтапыРежим = "ПоПродукции";
	КонецЕсли;
	
	ЗаказыОтбор    = "";
	ПродукцияОтбор = "";
	ЭтапыОтбор     = "";

	УстановитьОтборВТаблицеЗаказы(ЭтаФорма, ЗаказыОтбор);
	УстановитьОтборВТаблицеПродукция(ЭтаФорма, ПродукцияОтбор);
	УстановитьОтборВТаблицеЭтапы(ЭтаФорма, ЭтапыОтбор);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПереместитьЗаказНаСервере(Заказ, Направление)
	
	ТекущийЗаказ = Заказ;
	
	Если Направление = "Вверх" Тогда
		ПереместитьВверхНаСервере(Заказ);
	Иначе
		ПереместитьВнизНаСервере(Заказ);
	КонецЕсли;
	
	ОбновитьДанные(Заказ);
	
	СтруктураОтбора = Новый Структура("Ссылка", ТекущийЗаказ);
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.Заказы.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАктивизацииСтрокиЗаказы()
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ДиспетчированиеГрафикаПроизводства.Форма.Элемент.Заказы.ПриАктивизацииСтроки");
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		
		Если ПродукцияРежим = "ПоЗаказам" Тогда
			Объект.Продукция.Очистить();
		КонецЕсли;
		
		Если ЭтапыРежим = "ПоЗаказам" Тогда
			Объект.Этапы.Очистить();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПродукцияРежим = "ПоЗаказам" Или ЭтапыРежим = "ПоЗаказам" Тогда
		
		Таблицы = Новый Структура();
		
		Если ПродукцияРежим = "ПоЗаказам" Тогда
			
			Таблицы.Вставить("Продукция");
			
		КонецЕсли;
		
		Если ЭтапыРежим = "ПоЗаказам" Тогда
			
			Таблицы.Вставить("Этапы");
			
		КонецЕсли;
		
		Если ЭтапыРежим = "ПоЗаказам" Или ЭтапыРежим = "ПоПродукции" Тогда
			
			ПропуститьАктивациюСтрокиЭтапы = Истина;
			
		КонецЕсли;
		
		ПолучитьТаблицыНаСервере(Таблицы, ВыделенныеЗаказы());
		
	КонецЕсли;
	
	Элементы.ПереместитьВверх.Доступность = ТекущиеДанные.МожноПереместитьВверх;
	Элементы.ПереместитьВниз.Доступность = ТекущиеДанные.МожноПереместитьВниз;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАктивизацииСтрокиПродукция()
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ДиспетчированиеГрафикаПроизводства.Форма.Элемент.Продукция.ПриАктивизацииСтроки");
	
	ТекущиеДанныеЗаказы    = Элементы.Заказы.ТекущиеДанные;
	ТекущиеДанныеПродукция = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанныеПродукция = Неопределено Тогда
		
		Если ЭтапыРежим = "ПоПродукции" Тогда
			Объект.Этапы.Очистить();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПродукцияРежим <> "ПоЗаказам" Тогда
		
		Если ТекущиеДанныеЗаказы = Неопределено Или ТекущиеДанныеЗаказы.Ссылка <> ТекущиеДанныеПродукция.Заказ Тогда
			СтруктураОтбора = Новый Структура("Ссылка", ТекущиеДанныеПродукция.Заказ);
			НайденныеСтроки = Объект.Заказы.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаЗаказа = НайденныеСтроки[0];
				
				Элементы.Заказы.ТекущаяСтрока = СтрокаЗаказа.ПолучитьИдентификатор();
				
				Если ЗаказыОтбор <> "" И Не СтрокаЗаказа[ЗаказыОтбор] И ЭтапыРежим = "ПоЗаказам" Тогда
					Объект.Этапы.Очистить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтапыРежим = "ПоПродукции" Тогда
		
		Таблицы = Новый Структура("Этапы");
		ВыделеннаяПродукция = ВыделеннаяПродукция();
		
		ПропуститьАктивациюСтрокиЭтапы = Истина;
		
		ПолучитьТаблицыНаСервере(Таблицы, ВыделеннаяПродукция.МассивЗаказов, ВыделеннаяПродукция.МассивКодовСтрокПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАктивизацииСтрокиЭтапы()
	
	ТекущиеДанныеЗаказы    = Элементы.Заказы.ТекущиеДанные;
	ТекущиеДанныеПродукция = Элементы.Продукция.ТекущиеДанные;
	ТекущиеДанныеЭтапы     = Элементы.Этапы.ТекущиеДанные;
	
	Если ТекущиеДанныеЭтапы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтапыРежим = "ПоПродукции" И ПродукцияРежим = "ПоЗаказам" Тогда
		Возврат;
	КонецЕсли;
	
	// активация строки Заказы
	Если ЭтапыРежим = "ПоВсемЗаказам" Или ЭтапыРежим = "ПоПродукции" Тогда
		
		Если ТекущиеДанныеЗаказы = Неопределено Или ТекущиеДанныеЗаказы.Ссылка <> ТекущиеДанныеЭтапы.Заказ Тогда
			СтруктураОтбора = Новый Структура("Ссылка", ТекущиеДанныеЭтапы.Заказ);
			НайденныеСтроки = Объект.Заказы.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаЗаказа = НайденныеСтроки[0];
				
				Элементы.Заказы.ТекущаяСтрока = СтрокаЗаказа.ПолучитьИдентификатор();
				
				Если ЗаказыОтбор <> "" И Не СтрокаЗаказа[ЗаказыОтбор] И ПродукцияРежим = "ПоЗаказам" Тогда
					Объект.Продукция.Очистить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// активация строки Продукция
	Если ПродукцияРежим = "" Тогда
		
		Если ТекущиеДанныеПродукция = Неопределено Или ТекущиеДанныеПродукция.Заказ <> ТекущиеДанныеЭтапы.Заказ Или ТекущиеДанныеПродукция.КодСтроки <> ТекущиеДанныеЭтапы.КодСтрокиПродукция Тогда
			СтруктураОтбора = Новый Структура("Заказ, КодСтроки", ТекущиеДанныеЭтапы.Заказ, ТекущиеДанныеЭтапы.КодСтрокиПродукция);
			НайденныеСтроки = Объект.Продукция.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ПропуститьАктивациюСтрокиПродукции = Истина;
				Элементы.Продукция.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИспользованиеОжидания()
	
	ИспользоватьОжиданияОбработчиков = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияОбновитьДанные()
	
	Если ВводДоступен() Тогда
		
		ТекущийЗаказ = Неопределено;
		Если Элементы.Заказы.ТекущиеДанные <> Неопределено Тогда
			ТекущийЗаказ = Элементы.Заказы.ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		ОбновитьДанные(ТекущийЗаказ);
		
	Иначе
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьДанные", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеЗаказы()
	
	МассивЗаказов = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Заказы.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		СтрокаКоллекции = Объект.Заказы.НайтиПоИдентификатору(Строка);
		Если СтрокаКоллекции <> Неопределено Тогда
			МассивЗаказов.Добавить(СтрокаКоллекции.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЗаказов;
	
КонецФункции

&НаКлиенте
Функция ВыделеннаяПродукция()
	
	МассивЗаказов = Новый Массив;
	МассивКодовСтрокПродукции = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
	
		СтрокаКоллекции = Объект.Продукция.НайтиПоИдентификатору(Строка);
		Если СтрокаКоллекции <> Неопределено Тогда
			МассивЗаказов.Добавить(СтрокаКоллекции.Заказ);
			МассивКодовСтрокПродукции.Добавить(СтрокаКоллекции.КодСтроки);
		КонецЕсли;
		
	КонецЦикла;
		
	Результат = Новый Структура("МассивЗаказов, МассивКодовСтрокПродукции", МассивЗаказов, МассивКодовСтрокПродукции);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеСпецификацииВХранилище(Заказ, КлючСвязи)
	
	Возврат ПланированиеПроизводства.ДанныеСпецификацииЗаказаВХранилище(Заказ, КлючСвязи, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ДанныеДляРедактированияСпецификацииСтрокиЗаказаВХранилище(Заказ, КлючСвязи)
	
	Адреса = Новый Структура;
	Адреса.Вставить("Спецификация", ДанныеСпецификацииВХранилище(Заказ, КлючСвязи));
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ДанныеОбъекта = Документы.ЗаказНаПроизводство.ДанныеОбъектаДляОткрытияРедактированияСпецификации(
		ЗаказОбъект,
		КлючСвязи,
			УникальныйИдентификатор);
	
	АдресДвиженийЗаказа = ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ДанныеОбъекта);
	Адреса.Вставить("АдресДвиженийЗаказа", АдресДвиженийЗаказа);
	
	Возврат Адреса;
	
КонецФункции

&НаКлиенте
Процедура ФормыРаботыСБраком(ИмяКоманды)
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.';
									|en = 'Cannot execute the command for the object.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Брак = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'На выбранном этапе не зафиксировано дефектных единиц/партий изделий.';
									|en = 'Defective units/batches are not registered at the selected stage.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаказНаПроизводство", ТекущиеДанные.Заказ);
	ПараметрыФормы.Вставить("КлючСвязиПродукция", ТекущиеДанные.КлючСвязиПродукция);
	ПараметрыФормы.Вставить("КлючСвязиЭтапы", ТекущиеДанные.КлючСвязиЭтапы);
	ПараметрыФормы.Вставить("КодСтрокиЭтапыГрафик", ТекущиеДанные.КодСтроки);
	
	Если ИмяКоманды = "УменьшитьКоличестваВыходныхИзделий" Тогда
		ОткрытьФорму("Обработка.ДиспетчированиеГрафикаПроизводства.Форма.УменьшениеКоличестваВыходныхИзделий", ПараметрыФормы, ЭтаФорма);
	Иначе
		ОткрытьФорму("Обработка.ДиспетчированиеГрафикаПроизводства.Форма.ДобавлениеЭтаповВосстановленияБрака", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереместитьВверхНаСервере(ЗаказНаПроизводство)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум ТОГДА
	|		Т.ОчередьМинимум / 2
	|	ИНАЧЕ
	|		Т.ОчередьСреднее
	|	КОНЕЦ КАК НовыйНомерОчереди
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(Т.Очередь) КАК ОчередьМинимум,
	|		СРЕДНЕЕ(Т.Очередь) КАК ОчередьСреднее,
	|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
	|	ИЗ
	|		(ВЫБРАТЬ ПЕРВЫЕ 2
	|			ЗаказНаПроизводство.Очередь КАК Очередь
	|
	|		ИЗ
	|			Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТекущийЗаказНаПроизводство
	|				ПО ТекущийЗаказНаПроизводство.Ссылка = &ЗаказНаПроизводство
	|					И ЗаказНаПроизводство.Приоритет = ТекущийЗаказНаПроизводство.Приоритет
	|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
	|					И ЗаказНаПроизводство.Очередь < ТекущийЗаказНаПроизводство.Очередь
	|					И ЗаказНаПроизводство.Проведен
	|					И ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству)
	|	
	|		УПОРЯДОЧИТЬ ПО
	|			Очередь УБЫВ
	|		) КАК Т
	|	) КАК Т
	|
	|ГДЕ
	|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
	|		Т.ОчередьСреднее + 1
	|	ИНАЧЕ
	|		Т.ОчередьСреднее
	|	КОНЕЦ ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗафиксироватьПорядокДокументаНаСервере(ЗаказНаПроизводство, Выборка.НовыйНомерОчереди);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереместитьВнизНаСервере(ЗаказНаПроизводство)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
	|		Т.ОчередьМаксимум + 1
	|	ИНАЧЕ
	|		Т.ОчередьСреднее
	|	КОНЕЦ КАК НовыйНомерОчереди
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(Т.Очередь) КАК ОчередьМинимум,
	|		СРЕДНЕЕ(Т.Очередь) КАК ОчередьСреднее,
	|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
	|	ИЗ
	|		(ВЫБРАТЬ ПЕРВЫЕ 2
	|			ЗаказНаПроизводство.Очередь КАК Очередь
	|		ИЗ
	|			Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТекущийЗаказНаПроизводство
	|				ПО (ТекущийЗаказНаПроизводство.Ссылка = &ЗаказНаПроизводство)
	|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
	|					И ЗаказНаПроизводство.Приоритет = ТекущийЗаказНаПроизводство.Приоритет
	|					И ЗаказНаПроизводство.Очередь > ТекущийЗаказНаПроизводство.Очередь
	|					И ЗаказНаПроизводство.Проведен
	|					И ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству)
	|	
	|		УПОРЯДОЧИТЬ ПО
	|			Очередь
	|		) КАК Т
	|	) КАК Т
	|
	|ГДЕ
	|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
	|		Т.ОчередьСреднее + 1
	|	ИНАЧЕ
	|		Т.ОчередьСреднее
	|	КОНЕЦ ЕСТЬ NULL ");
	
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗафиксироватьПорядокДокументаНаСервере(ЗаказНаПроизводство, Выборка.НовыйНомерОчереди);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗафиксироватьПорядокДокументаНаСервере(ЗаказНаПроизводство,  НовыйНомерОчереди)
	
	ШаблонОшибкиЗаблокировать = НСтр("ru = 'Не удалось заблокировать %Документ%. %ОписаниеОшибки%';
									|en = 'Failed to lock %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать      = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
									|en = 'Failed to save %Документ%. %ОписаниеОшибки%'");
	
	// Захват объекта для редактирования
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ЗаказНаПроизводство);
		
	Исключение
		
		ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", ЗаказНаПроизводство);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЗаказНаПроизводство);
		Возврат;
		
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаказНаПроизводствоОбъект = ЗаказНаПроизводство.ПолучитьОбъект();
		ЗаказНаПроизводствоОбъект.Очередь = НовыйНомерОчереди;
		ЗаказНаПроизводствоОбъект.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
		ЗаказНаПроизводствоОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", ЗаказНаПроизводство);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЗаказНаПроизводство);
		Возврат;
		
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДиагностикаФормированияГрафикаЭтапа(Команда)
	
	ТекущиеДанныеЭтапы = Элементы.Этапы.ТекущиеДанные;
	
	Если ТекущиеДанныеЭтапы = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'"));
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ",              ТекущиеДанныеЭтапы.Заказ);
	ПараметрыФормы.Вставить("КлючСвязиПродукция", ТекущиеДанныеЭтапы.КлючСвязиПродукция);
	ПараметрыФормы.Вставить("КлючСвязиЭтапы",     ТекущиеДанныеЭтапы.КлючСвязиЭтапы);
	ПараметрыФормы.Вставить("ПолучитьПараметрыЭтапаИзЗаказа");
	
	ОткрытьФорму("Обработка.ДиспетчированиеГрафикаПроизводства.Форма.ДиагностикаФормированияГрафика", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДиагностикаФормированияГрафикаЭтапаПродукции(Команда)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'"));
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ",              ТекущиеДанные.Заказ);
	ПараметрыФормы.Вставить("КлючСвязиПродукция", ТекущиеДанные.КлючСвязи);
	ПараметрыФормы.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("НомерСтроки",        ТекущиеДанные.НомерСтроки);
	
	ОткрытьФорму("Обработка.ДиспетчированиеГрафикаПроизводства.Форма.ДиагностикаФормированияГрафика", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузкаВидовРабочихЦентров(Команда)
	
	ВыделенныеСтроки = Элементы.Этапы.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'"));
		Возврат;
	КонецЕсли;
	
	НачалоОтчета = '000101010000';
	ОкончаниеОтчета = '000101010000';
	
	ДанныеВыбранныхСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Этапы.ДанныеСтроки(ИдентификаторСтроки);
		
		СтруктураДанных = Новый Структура("Заказ,КодСтрокиПродукция,КодСтрокиЭтап");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
		СтруктураДанных.КодСтрокиЭтап = ДанныеСтроки.КодСтроки;
		ДанныеВыбранныхСтрок.Добавить(СтруктураДанных);
		
		НачалоОтчета = ?(НачалоОтчета <> '000101010000', Мин(ДанныеСтроки.НачатьНеРанее, НачалоОтчета), ДанныеСтроки.НачатьНеРанее);
		ОкончаниеОтчета = ?(ОкончаниеОтчета <> '000101010000', Макс(ДанныеСтроки.ОкончаниеЭтапа, ОкончаниеОтчета), ДанныеСтроки.ОкончаниеЭтапа);
		
	КонецЦикла;
	
	ВидыРабочихЦентровВыбранныхЭтапов = ВидыРабочихЦентровВыбранныхЭтапов(ДанныеВыбранныхСтрок);
	Если ВидыРабочихЦентровВыбранныхЭтапов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать этапы, в которых планируется работа видов рабочих центров.';
								|en = 'Select stages in which work center type operation is planned.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПериодОтчета = Новый СтандартныйПериод(НачалоОтчета, ОкончаниеОтчета);
	
	ПараметрыФормы = Новый Структура("Отбор,КлючВарианта,СформироватьПриОткрытии,РежимРасшифровки");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.РежимРасшифровки = Истина;
	ПараметрыФормы.КлючВарианта = "ЗагрузкаВидовРабочихЦентровТаблицаКонтекст";
	ПараметрыФормы.Отбор = Новый Структура("ВидРабочегоЦентра, Период", ВидыРабочихЦентровВыбранныхЭтапов, ПериодОтчета);
	
	ОткрытьФорму("Отчет.ЗагрузкаВидовРабочихЦентров.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыРабочихЦентровВыбранныхЭтапов(ДанныеВыбранныхСтрок)

	ТаблицаЭтапы = Новый ТаблицаЗначений;
	ТаблицаЭтапы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаЭтапы.Колонки.Добавить("КодСтрокиЭтап", Новый ОписаниеТипов("Число"));
	ТаблицаЭтапы.Колонки.Добавить("КодСтрокиПродукция", Новый ОписаниеТипов("Число"));
	Для каждого СтруктураДанных Из ДанныеВыбранныхСтрок Цикл
		НоваяСтрока = ТаблицаЭтапы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
	КонецЦикла; 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЭтапы.Заказ КАК Заказ,
	|	ТаблицаЭтапы.КодСтрокиЭтап КАК КодСтрокиЭтап,
	|	ТаблицаЭтапы.КодСтрокиПродукция КАК КодСтрокиПродукция
	|ПОМЕСТИТЬ ТаблицаЭтапы
	|ИЗ
	|	&ТаблицаЭтапы КАК ТаблицаЭтапы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоВидыРабочихЦентров.ВидРабочегоЦентра
	|ИЗ
	|	ТаблицаЭтапы КАК ТаблицаЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО ТаблицаЭтапы.Заказ = ЗаказНаПроизводствоЭтапыГрафик.Ссылка
	|			И ТаблицаЭтапы.КодСтрокиЭтап = ЗаказНаПроизводствоЭтапыГрафик.КодСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ЗаказНаПроизводствоВидыРабочихЦентров
	|		ПО (ЗаказНаПроизводствоВидыРабочихЦентров.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.Использовать)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра
	|ИЗ
	|	ТаблицаЭтапы КАК ТаблицаЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО ТаблицаЭтапы.Заказ = ЗаказНаПроизводствоЭтапыГрафик.Ссылка
	|			И ТаблицаЭтапы.КодСтрокиЭтап = ЗаказНаПроизводствоЭтапыГрафик.КодСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.АльтернативныеВидыРабочихЦентров КАК ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров
	|		ПО (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|			И (ЗаказНаПроизводствоАльтернативныеВидыРабочихЦентров.Использовать)";
	
	Запрос.УстановитьПараметр("ТаблицаЭтапы", ТаблицаЭтапы);
	
	СписокВидРабочегоЦентра = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра");
	СписокВидРабочегоЦентра = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокВидРабочегоЦентра);
	
	Возврат СписокВидРабочегоЦентра;
	
КонецФункции

&НаКлиенте
Функция ВыбранныеЗаказы()

	СписокЗаказов = Новый Массив;
	Для каждого ТекущаяСтрока Из Элементы.Заказы.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Заказы.ДанныеСтроки(ТекущаяСтрока);
		СписокЗаказов.Добавить(ТекущиеДанные.Ссылка);
	КонецЦикла; 

	Возврат СписокЗаказов;
	
КонецФункции

&НаКлиенте
Функция ВыбраннаяПродукция()

	СписокПродукции = Новый Массив;
	Для каждого ТекущаяСтрока Из Элементы.Продукция.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Продукция.ДанныеСтроки(ТекущаяСтрока);
		ДанныеПродукции = Новый Структура("Заказ,КодСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеПродукции, ТекущиеДанные);
		СписокПродукции.Добавить(ДанныеПродукции);
	КонецЦикла; 

	Возврат СписокПродукции;
	
КонецФункции

&НаКлиенте
Функция ВыбранныеЭтапы()

	СписокЭтапов = Новый Массив;
	Для каждого ТекущаяСтрока Из Элементы.Этапы.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Этапы.ДанныеСтроки(ТекущаяСтрока);
		ДанныеЭтапа = Новый Структура;
		ДанныеЭтапа.Вставить("Заказ", ТекущиеДанные.Заказ);
		ДанныеЭтапа.Вставить("КодСтрокиПродукция", ТекущиеДанные.КодСтрокиПродукция);
		ДанныеЭтапа.Вставить("КодСтрокиЭтапыГрафик", ТекущиеДанные.КодСтроки);
		СписокЭтапов.Добавить(ДанныеЭтапа);
	КонецЦикла; 

	Возврат СписокЭтапов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РасширенныйРежим(Форма)

	Возврат (Форма.РасширенныйРежим = 1);
	
КонецФункции

&НаСервере
Процедура ОбновитьИндикаторы()
	
	ПрименяютсяНедействующиеСпецификации = Ложь;
	
	Если РасширенныйРежим(ЭтаФорма) Тогда
		
		// Индикатор "Применяются недействующие спецификации"
		Если ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПроизводство) Тогда
			ПрименяютсяНедействующиеСпецификации = Документы.ЗаказНаПроизводство.ЕстьЗаказыСНедействующимиСпецификациями(Подразделение, Ответственный);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИндикаторПрименяютсяНедействующиеСпецификации.Видимость = ПрименяютсяНедействующиеСпецификации;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаРаботы()
	
	УстановитьОтборыПоУмолчанию();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасширенныйРежим");
	
	ВыделитьКнопку(Элементы.ФормаОбновить);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыделитьКнопку(Кнопка)
	
	Кнопка.ЦветФона = ЦветаСтиля.ВыделеннаяКнопкаФон;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыделениеКнопки(Кнопка)
	
	Кнопка.ЦветФона = Новый Цвет();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21
