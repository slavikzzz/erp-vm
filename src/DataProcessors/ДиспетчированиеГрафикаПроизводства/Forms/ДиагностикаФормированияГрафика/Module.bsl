//++ Устарело_Производство21
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ЦветГиперссылки = ЦветаСтиля.ГиперссылкаЦвет;
	ЦветВидРЦБудетИспользоваться = WebЦвета.КожаноКоричневый;
	ЦветНедоступногоПериодаДиаграммы = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	ЕстьПравоДобавленияДоступностиРЦ = ПравоДоступа("Добавление", Метаданные.Документы.ДоступностьРабочихЦентров);
	
	Обработки.ДиспетчированиеГрафикаПроизводства.СоздатьСтруктуруТаблицыЭтапов(ЭтаФорма, "Этапы");
	
	МакетОформления = Обработки.ДиспетчированиеГрафикаПроизводства.ПолучитьМакет("ДиагностикаГрафика");
	
	Если Параметры.Свойство("КлючСвязиЭтапы") Тогда
		КлючСвязиЭтапы = Параметры.КлючСвязиЭтапы;
	КонецЕсли; 
	
	Заказ = Параметры.Заказ;
	
	ПланированиеПроизводстваКлиентСервер.УстановитьПараметрыДиаграммыПоУмолчанию(ДиаграммаГанта);
	
	ПолучитьПараметрыЭтапаИзЗаказа();
													
	Если КлючСвязиЭтапы = ПустойКлючСвязи И Этапы.Количество() <> 0 Тогда
		СтруктураПоиска = Новый Структура("НомерСледующегоЭтапа", 0);
		СписокСтрок = Этапы.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			КлючСвязиЭтапы = СписокСтрок[0].КлючСвязи;
		Иначе
			КлючСвязиЭтапы = Этапы[0].КлючСвязи;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьВыбранныйЭтап();
	
	Если Этапы.Количество() > 1 Тогда
		Элементы.СтраницыДиагностика.ТекущаяСтраница = Элементы.СтраницаДиагностикаСВыборомЭтапов;
	Иначе
		Элементы.СтраницыДиагностика.ТекущаяСтраница = Элементы.СтраницаДиагностикаБезВыбораЭтапов;
	КонецЕсли;
	
	Если Параметры.Свойство("Номенклатура") Тогда
		Номенклатура = Параметры.Номенклатура;
		НомерСтрокиПродукции = Параметры.НомерСтроки;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаПроизводствоПродукция.Номенклатура,
		|	ЗаказНаПроизводствоПродукция.НомерСтроки
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|ГДЕ
		|	ЗаказНаПроизводствоПродукция.Ссылка = &Заказ
		|	И ЗаказНаПроизводствоПродукция.КлючСвязи = &КлючСвязи";
		
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("КлючСвязи", Параметры.КлючСвязиПродукция);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		Номенклатура = Выборка.Номенклатура;
		НомерСтрокиПродукции = Выборка.НомерСтроки;
	КонецЕсли; 
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Заказ.Номер);
	ПредставлениеЗаказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№%1 от %2 (строка %3)';
										|en = 'No. %1 from %2 (line %3)'"),
									НомерДокумента,
									Формат(Заказ.Дата, "ДЛФ=D"),
									Формат(НомерСтрокиПродукции, "ЧГ="));
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Диагностика графика производства продукции ""%1"" по заказу %2';
							|en = 'Diagnostics of ""%1"" production schedule against order %2'"),
						Номенклатура,
						ПредставлениеЗаказа);
	
	ВывестиЛегенду();
	
	ЗаполнитьПериодыНедоступности();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	ИсторияПереходов = Новый Массив;
	
	Для каждого ЭтапИсторияПереходов Из ЭтапыИсторияПереходов Цикл
		
		ИсторияПереходов.Добавить(ЭтапИсторияПереходов);
		
	КонецЦикла;
	
	КлючСвязиЭтапы = ИсторияПереходов[ИсторияПереходов.ВГраница()];
	ИсторияПереходов.Удалить(ИсторияПереходов.ВГраница());
	ЭтапыИсторияПереходов = Новый ФиксированныйМассив(ИсторияПереходов);
	
	Элементы.Назад.Доступность = ЭтапыИсторияПереходов.Количество() > 0;
	
	ПриИзмененииТекущегоЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерепланировать(Команда)
	
	ПланированиеПроизводстваКлиент.ПланироватьОчередьЗаказов(Заказ);
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементаФормыТабличныйДокумент

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("УникальныйИдентификатор") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПриВыбореЭтапа();
		
		КлючСвязиЭтапы = Расшифровка;
		
		ПриИзмененииТекущегоЭтапа();
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровка.Свойство("ВидОбласти") Тогда
			
			Если Расшифровка.ВидОбласти = "ДанныеОЗагрузке" Тогда
				
				СписокВыбора = Новый СписокЗначений;
				СписокВыбора.Добавить("ИзменениеЗанятостиВидаРабочегоЦентра", НСтр("ru = 'Занятость вида рабочего центра';
																					|en = 'Occupancy of the work center type'"));
				Если ЕстьПравоДобавленияДоступностиРЦ Тогда
					СписокВыбора.Добавить("ИзменитьДоступность", НСтр("ru = 'Изменить доступность вида рабочих центров';
																		|en = 'Change type of work centers capacity'"));
				КонецЕсли; 
				
				ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаПериодаВидаРЦЗавершение", ЭтотОбъект, Расшифровка);
				ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора);
				
			ИначеЕсли Расшифровка.ВидОбласти = "УправлениеВидимостьюАльтернативами" Тогда
				
				ПоказатьСкрытьАльтернативы(Расшифровка, ЭтаФорма);
				
			ИначеЕсли Расшифровка.ВидОбласти = "ИспользоватьВидРЦ" Тогда
				
				ИспользоватьВидРЦ(Расшифровка);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементаФормыДиаграммаГанта

&НаКлиенте
Процедура ДиаграммаГантаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	Если Дата <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если КлючСвязиЭтапы <> Расшифровки[1] Тогда
			ПриВыбореЭтапа();
			КлючСвязиЭтапы = Расшифровки[1];
			ПриИзмененииТекущегоЭтапа();
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДиагностикиГрафика

&НаСервере
Процедура ВывестиДиагностикуГрафика()
	
	ВывестиШапкуДиагностикиГрафика();
	ВывестиДанныеДиагностикиГрафика();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиШапкуДиагностикиГрафика()
	
	ТабличныйДокумент.Очистить();
	
	НачалоИнтервалаДиаграммы = Неопределено;
	ОкончаниеИнтервалаДиаграммы = Неопределено;
	
	Этап = Этапы.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиЭтапы))[0];
	
	ИнтервалПланирования = Этап.ИнтервалПланирования;
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалЧас");
		ОбластьИнтервалЗаголовок = МакетОформления.ПолучитьОбласть("ИнтервалЧасЗаголовок");
		
		СтруктураПараметры = Новый Структура("ЧасНачалоДня");
		
		Для каждого СтрокаРазмещениеЭтапа Из Этап.РазмещениеЭтапа Цикл
		
			НачалоИнтервалаДиаграммы = ?(ЗначениеЗаполнено(НачалоИнтервалаДиаграммы), Мин(НачалоИнтервалаДиаграммы, НачалоДня(СтрокаРазмещениеЭтапа.НачалоПредварительногоБуфера)), НачалоДня(СтрокаРазмещениеЭтапа.НачалоПредварительногоБуфера));
			ОкончаниеИнтервалаДиаграммы = ?(ЗначениеЗаполнено(ОкончаниеИнтервалаДиаграммы), Макс(ОкончаниеИнтервалаДиаграммы, КонецДня(СтрокаРазмещениеЭтапа.ОкончаниеЗавершающегоБуфера)), КонецДня(СтрокаРазмещениеЭтапа.ОкончаниеЗавершающегоБуфера));
			
		КонецЦикла;
		
		НачалоИнтервалаДиаграммы = Мин(НачалоИнтервалаДиаграммы, НачалоДня(НачатьНеРанее));
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалДень");
		ОбластьИнтервалЗаголовок = МакетОформления.ПолучитьОбласть("ИнтервалДеньЗаголовок");
		
		СтруктураПараметры = Новый Структура("ДеньНачалоНедели, ДеньПонедельник, ДеньВторник, ДеньСреда, ДеньЧетверг, ДеньПятница, ДеньСуббота, ДеньВоскресенье");
		
		Для каждого СтрокаРазмещениеЭтапа Из Этап.РазмещениеЭтапа Цикл
		
			НачалоИнтервалаДиаграммы = ?(ЗначениеЗаполнено(НачалоИнтервалаДиаграммы), Мин(НачалоИнтервалаДиаграммы, НачалоНедели(СтрокаРазмещениеЭтапа.НачалоПредварительногоБуфера)), НачалоНедели(СтрокаРазмещениеЭтапа.НачалоПредварительногоБуфера));
			ОкончаниеИнтервалаДиаграммы = ?(ЗначениеЗаполнено(ОкончаниеИнтервалаДиаграммы), Макс(ОкончаниеИнтервалаДиаграммы, КонецНедели(СтрокаРазмещениеЭтапа.ОкончаниеЗавершающегоБуфера)), КонецНедели(СтрокаРазмещениеЭтапа.ОкончаниеЗавершающегоБуфера));
			
		КонецЦикла;
		
		НачалоИнтервалаДиаграммы = Мин(НачалоИнтервалаДиаграммы, НачалоНедели(НачатьНеРанее));
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалНеделя");
		ОбластьИнтервалЗаголовок = МакетОформления.ПолучитьОбласть("ИнтервалНеделяЗаголовок");
		
		СтруктураПараметры = Новый Структура("ДеньНачалоНедели");
		
		Для каждого СтрокаРазмещениеЭтапа Из Этап.РазмещениеЭтапа Цикл
		
			НачалоИнтервалаДиаграммы = ?(ЗначениеЗаполнено(НачалоИнтервалаДиаграммы), Мин(НачалоИнтервалаДиаграммы, НачалоНедели(СтрокаРазмещениеЭтапа.НачалоПредварительногоБуфера)), НачалоНедели(СтрокаРазмещениеЭтапа.НачалоПредварительногоБуфера));
			ОкончаниеИнтервалаДиаграммы = ?(ЗначениеЗаполнено(ОкончаниеИнтервалаДиаграммы), Макс(ОкончаниеИнтервалаДиаграммы, КонецНедели(СтрокаРазмещениеЭтапа.ОкончаниеЗавершающегоБуфера)), КонецНедели(СтрокаРазмещениеЭтапа.ОкончаниеЗавершающегоБуфера));
			
		КонецЦикла;
		
		НачалоИнтервалаДиаграммы = Мин(НачалоИнтервалаДиаграммы, НачалоНедели(НачатьНеРанее));
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		
		ОбластьИнтервал = МакетОформления.ПолучитьОбласть("ИнтервалМесяц");
		ОбластьИнтервалЗаголовок = МакетОформления.ПолучитьОбласть("ИнтервалМесяцЗаголовок");
		
		СтруктураПараметры = Новый Структура("ДеньНачалоМесяца");
		
		Для каждого СтрокаРазмещениеЭтапа Из Этап.РазмещениеЭтапа Цикл
		
			НачалоИнтервалаДиаграммы = ?(ЗначениеЗаполнено(НачалоИнтервалаДиаграммы), Мин(НачалоИнтервалаДиаграммы, НачалоМесяца(СтрокаРазмещениеЭтапа.НачалоПредварительногоБуфера)), НачалоМесяца(СтрокаРазмещениеЭтапа.НачалоПредварительногоБуфера));
			ОкончаниеИнтервалаДиаграммы = ?(ЗначениеЗаполнено(ОкончаниеИнтервалаДиаграммы), Макс(ОкончаниеИнтервалаДиаграммы, КонецМесяца(СтрокаРазмещениеЭтапа.ОкончаниеЗавершающегоБуфера)), КонецМесяца(СтрокаРазмещениеЭтапа.ОкончаниеЗавершающегоБуфера));
			
		КонецЦикла;
		
		НачалоИнтервалаДиаграммы = Мин(НачалоИнтервалаДиаграммы, НачалоМесяца(НачатьНеРанее));
		
	КонецЕсли;
	
	ОбластьИнтервалЗаголовок.Параметры.Этап = Этап.НаименованиеЭтапа;
	ТабличныйДокумент.Вывести(ОбластьИнтервалЗаголовок);
	
	Если НЕ ЗначениеЗаполнено(НачалоИнтервалаДиаграммы) ИЛИ НЕ ЗначениеЗаполнено(ОкончаниеИнтервалаДиаграммы) Тогда
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			НачалоИнтервалаДиаграммы = НачалоДня(НачатьНеРанее);
			ОкончаниеИнтервалаДиаграммы = КонецДня(ДатаПотребности);
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
			НачалоИнтервалаДиаграммы = НачалоНедели(НачатьНеРанее);
			ОкончаниеИнтервалаДиаграммы = КонецНедели(ДатаПотребности);
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
			НачалоИнтервалаДиаграммы = НачалоНедели(НачатьНеРанее);
			ОкончаниеИнтервалаДиаграммы = КонецНедели(ДатаПотребности);
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
			НачалоИнтервалаДиаграммы = НачалоМесяца(НачатьНеРанее);
			ОкончаниеИнтервалаДиаграммы = КонецМесяца(ДатаПотребности);
		КонецЕсли;
	КонецЕсли; 
	
	ТекущийИнтервал = НачалоИнтервалаДиаграммы;
	
	Пока ТекущийИнтервал < ОкончаниеИнтервалаДиаграммы Цикл
		
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			
			Если НачалоЧаса(ТекущийИнтервал) = НачалоДня(ТекущийИнтервал) Тогда
				
				СтруктураПараметры.ЧасНачалоДня = ТекущийИнтервал;
				
			КонецЕсли;
			
			Если КонецЧаса(ТекущийИнтервал) = КонецДня(ТекущийИнтервал) Тогда
				
				ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
				ТабличныйДокумент.Присоединить(ОбластьИнтервал);
				
			КонецЕсли;
			
			ТекущийИнтервал = КонецЧаса(ТекущийИнтервал) + 1;
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
			
			Если НачалоДня(ТекущийИнтервал) = НачалоНедели(ТекущийИнтервал) Тогда
				
				СтруктураПараметры.ДеньНачалоНедели = ТекущийИнтервал;
				
			КонецЕсли;
			
			ЭтоТекущийДень = ТекущийИнтервал = НачалоДня(ТекущаяДатаСеанса());
			
			Если ДеньНедели(ТекущийИнтервал) = 1 Тогда
				
				СтруктураПараметры.ДеньПонедельник = ТекущийИнтервал;
				ОбластьИнтервал.Области.ДеньПонедельник.Шрифт = Новый Шрифт(ОбластьИнтервал.Области.ДеньПонедельник.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели(ТекущийИнтервал) = 2 Тогда
				
				СтруктураПараметры.ДеньВторник = ТекущийИнтервал;
				ОбластьИнтервал.Области.ДеньВторник.Шрифт = Новый Шрифт(ОбластьИнтервал.Области.ДеньВторник.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели(ТекущийИнтервал) = 3 Тогда
				
				СтруктураПараметры.ДеньСреда = ТекущийИнтервал;
				ОбластьИнтервал.Области.ДеньСреда.Шрифт = Новый Шрифт(ОбластьИнтервал.Области.ДеньСреда.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели(ТекущийИнтервал) = 4 Тогда
				
				СтруктураПараметры.ДеньЧетверг = ТекущийИнтервал;
				ОбластьИнтервал.Области.ДеньЧетверг.Шрифт = Новый Шрифт(ОбластьИнтервал.Области.ДеньЧетверг.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели(ТекущийИнтервал) = 5 Тогда
				
				СтруктураПараметры.ДеньПятница = ТекущийИнтервал;
				ОбластьИнтервал.Области.ДеньПятница.Шрифт = Новый Шрифт(ОбластьИнтервал.Области.ДеньПятница.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели(ТекущийИнтервал) = 6 Тогда
				
				СтруктураПараметры.ДеньСуббота = ТекущийИнтервал;
				ОбластьИнтервал.Области.ДеньСуббота.Шрифт = Новый Шрифт(ОбластьИнтервал.Области.ДеньСуббота.Шрифт,,, ЭтоТекущийДень);
				
			ИначеЕсли ДеньНедели(ТекущийИнтервал) = 7 Тогда
				
				СтруктураПараметры.ДеньВоскресенье = ТекущийИнтервал;
				ОбластьИнтервал.Области.ДеньВоскресенье.Шрифт = Новый Шрифт(ОбластьИнтервал.Области.ДеньВоскресенье.Шрифт,,, ЭтоТекущийДень);
				
			КонецЕсли;
			
			Если КонецДня(ТекущийИнтервал) = КонецНедели(ТекущийИнтервал) Тогда
				
				ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
				ТабличныйДокумент.Присоединить(ОбластьИнтервал);
				
			КонецЕсли;
			
			ТекущийИнтервал = КонецДня(ТекущийИнтервал) + 1;
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
			
			СтруктураПараметры.ДеньНачалоНедели = ТекущийИнтервал;
			
			ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
			ТабличныйДокумент.Присоединить(ОбластьИнтервал);
			
			ТекущийИнтервал = КонецНедели(ТекущийИнтервал) + 1;
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
			
			СтруктураПараметры.ДеньНачалоМесяца = ТекущийИнтервал;
			
			ОбластьИнтервал.Параметры.Заполнить(СтруктураПараметры);
			ТабличныйДокумент.Присоединить(ОбластьИнтервал);
			
			ТекущийИнтервал = КонецМесяца(ТекущийИнтервал) + 1;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.ФиксацияСверху = ОбластьИнтервал.ВысотаТаблицы;
	ТабличныйДокумент.ФиксацияСлева  = ОбластьИнтервалЗаголовок.ШиринаТаблицы;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеДиагностикиГрафика()
	
	НачалоЭтапа = '00010101';
	ОкончаниеЭтапа = '00010101';
	
	ГраницыЭтапа = Новый Структура("ЛеваяГраницаЭтапа,ПраваяГраницаЭтапа", 0, 0);
	
	ОбластьИнтервалЗанят    = МакетОформления.ПолучитьОбласть("ИнтервалЗанят");
	ОбластьИнтервалДоступен = МакетОформления.ПолучитьОбласть("ИнтервалДоступен");
	
	Этап = Этапы.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиЭтапы))[0];
	
	ИнтервалПланирования = Этап.ИнтервалПланирования;
	
	НачалоИнтервала = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(НачалоИнтервалаДиаграммы, ИнтервалПланирования);
	ОкончаниеИнтервала = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ОкончаниеИнтервалаДиаграммы, ИнтервалПланирования);
	
	ОбластьЭтапДанные = МакетОформления.ПолучитьОбласть("ЭтапДанные");
	ОбластьИсполнительДанные = МакетОформления.ПолучитьОбласть("ИсполнительДанные");
	ОбластьИсполнительДанныеБезОграниченияДоступности = МакетОформления.ПолучитьОбласть("ИсполнительДанныеБезОграниченияДоступности");
	ОбластьМатериалДанные = МакетОформления.ПолучитьОбласть("МатериалДанные");
	
	ОбластиДляВыводаДоступности = Новый Структура;
	ОбластиДляВыводаДоступности.Вставить("ИнтервалДанные", ОбластьИсполнительДанные);
	ОбластиДляВыводаДоступности.Вставить("ИнтервалДанныеБезОграниченияДоступности", ОбластьИсполнительДанныеБезОграниченияДоступности);
	
	// Этапы предшественники
	ОбластьЭтапыПредшественникиЗаголовок = МакетОформления.ПолучитьОбласть("ЭтапыПредшественникиЗаголовок");
	ТабличныйДокумент.Вывести(ОбластьЭтапыПредшественникиЗаголовок);
	
	// Этап предшественник
	ОбластьЭтап = МакетОформления.ПолучитьОбласть("Этап");
	
	Для каждого ПредыдущийЭтап Из Этапы Цикл
		
		Если ПредыдущийЭтап.НомерСледующегоЭтапа = Этап.НомерЭтапа
			ИЛИ ПредыдущийЭтап.КлючСвязиЭтапы = Этап.КлючСвязи Тогда
			
			ОбластьЭтап.Параметры.Этап = ПредыдущийЭтап.НаименованиеЭтапа;
			ОбластьЭтап.Области.Этап.Расшифровка = ПредыдущийЭтап.Этап;
			ТабличныйДокумент.Вывести(ОбластьЭтап);
			ОбластьЭтап.Области.Этап.Расшифровка = Неопределено;
			
			ОкончаниеПредыдущегоЭтапа = ПредыдущийЭтап.ОкончаниеЭтапа;
			
			ТекущийИнтервал = НачалоИнтервала;
			
			Пока ТекущийИнтервал < ОкончаниеИнтервала Цикл
				
				Если ТекущийИнтервал <= ОкончаниеПредыдущегоЭтапа Тогда
					
					ОбластьЭтапДанные.Области.ЭтапДанные.Расшифровка = ПредыдущийЭтап.КлючСвязи;
					УстановитьОформлениеОбласти(ОбластьЭтапДанные.Области.ЭтапДанные, ОбластьИнтервалЗанят.Области.ИнтервалЗанят);
					ТабличныйДокумент.Присоединить(ОбластьЭтапДанные);
					
					ОбластьЭтапДанные.Области.ЭтапДанные.Расшифровка = Неопределено;
					
				Иначе
					
					УстановитьОформлениеОбласти(ОбластьЭтапДанные.Области.ЭтапДанные, ОбластьИнтервалДоступен.Области.ИнтервалДоступен);
					ТабличныйДокумент.Присоединить(ОбластьЭтапДанные);
					
				КонецЕсли;
				
				ТекущийИнтервал = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ТекущийИнтервал, ИнтервалПланирования) + 1;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Исполнители
	ОбластьДоступностьВидовРабочихЦентровЗаголовок = МакетОформления.ПолучитьОбласть("ДоступностьВидовРабочихЦентровЗаголовок");
	Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда
		ЗаголовокИсполнители = НСтр("ru = 'Доступность видов рабочих центров';
									|en = 'Work center types capacity'");
	Иначе
		ЗаголовокИсполнители = НСтр("ru = 'Доступность подразделения';
									|en = 'Shop floor capacity'");
	КонецЕсли; 
	ОбластьДоступностьВидовРабочихЦентровЗаголовок.Параметры.ЗаголовокИсполнители = ЗаголовокИсполнители;
	ТабличныйДокумент.Вывести(ОбластьДоступностьВидовРабочихЦентровЗаголовок);
	
	ДанныеОбИсполнителях = Новый Структура;
	ДанныеОбИсполнителях.Вставить("Этап", Этап);
	ДанныеОбИсполнителях.Вставить("Исполнители", Этап.Исполнители);
	ДанныеОбИсполнителях.Вставить("ИнтервалПланирования", ИнтервалПланирования);
	ДанныеОбИсполнителях.Вставить("НачалоЭтапа", НачалоЭтапа);
	ДанныеОбИсполнителях.Вставить("ОкончаниеЭтапа", ОкончаниеЭтапа);
	
	ВывестиИсполнителей(
			ДанныеОбИсполнителях,
			ГраницыЭтапа,
			ОбластиДляВыводаДоступности, 
			НачалоИнтервала, 
			ОкончаниеИнтервала,
			Ложь);
	
	// Материалы
	СтруктураОтбораМатериалов  = Новый Структура("ПроизводитсяВПроцессе", Ложь);
	СтруктураПоискаПотребности = Новый Структура("ДатаПотребности");
	
	МатериалыЭтапа = Этап.Материалы.НайтиСтроки(СтруктураОтбораМатериалов);
	
	ПланированиеПроизводства.СортироватьМассив(
		МатериалыЭтапа,
		НаправлениеСортировки.Убыв,
		"ДатаПотребности");
	
	Если МатериалыЭтапа.Количество() > 0 Тогда
		
		ОбластьМатериалыЗаголовок = МакетОформления.ПолучитьОбласть("МатериалыЗаголовок");
		ТабличныйДокумент.Вывести(ОбластьМатериалыЗаголовок);
		
	КонецЕсли;
	
	// Материал
	ОбластьМатериал = МакетОформления.ПолучитьОбласть("Материал");
	
	Для Каждого МатериалЭтапа Из МатериалыЭтапа Цикл
		
		ОбластьМатериал.Параметры.Материал            = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(МатериалЭтапа.Номенклатура, МатериалЭтапа.Характеристика);
		ОбластьМатериал.Параметры.РасшифровкаМатериал = МатериалЭтапа.Номенклатура;
		ОбластьМатериал.Параметры.Требуется           = МатериалЭтапа.Количество;
		
		ТабличныйДокумент.Вывести(ОбластьМатериал);
		
		ТекущийИнтервал = НачалоИнтервала;
		
		Пока ТекущийИнтервал < ОкончаниеИнтервала Цикл
			
			Если ТекущийИнтервал >= МатериалЭтапа.ДатаПотребности Тогда
				
				МатериалКоличество = 0;
				
				СтруктураПоискаПотребности.ДатаПотребности = ТекущийИнтервал;
				
				Для Каждого МатериалЭтапаПотребность Из МатериалЭтапа.Потребность.НайтиСтроки(СтруктураПоискаПотребности) Цикл
					
					МатериалКоличество = МатериалКоличество + МатериалЭтапаПотребность.Количество;
					
				КонецЦикла;
				
				ОбластьМатериалДанные.Области.МатериалДанные.Текст = Формат(МатериалКоличество, "ЧН=; ЧГ=");
				УстановитьОформлениеОбласти(ОбластьМатериалДанные.Области.МатериалДанные, ОбластьИнтервалДоступен.Области.ИнтервалДоступен);
				ТабличныйДокумент.Присоединить(ОбластьМатериалДанные);
				
			Иначе
				
				ОбластьМатериалДанные.Области.МатериалДанные.Текст = "";
				УстановитьОформлениеОбласти(ОбластьМатериалДанные.Области.МатериалДанные, ОбластьИнтервалЗанят.Области.ИнтервалЗанят);
				ТабличныйДокумент.Присоединить(ОбластьМатериалДанные);
				
			КонецЕсли;
			
			ТекущийИнтервал = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ТекущийИнтервал, ИнтервалПланирования) + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ГраницыЭтапа.ЛеваяГраницаЭтапа <> 0 И ГраницыЭтапа.ПраваяГраницаЭтапа <> 0 Тогда
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
		ОбластьТекущийЭтап = ТабличныйДокумент.Область(4, 
													ГраницыЭтапа.ЛеваяГраницаЭтапа, 
													ТабличныйДокумент.ВысотаТаблицы, 
													ГраницыЭтапа.ПраваяГраницаЭтапа);
													
		ОбластьТекущийЭтап.Обвести(Линия, Линия, Линия, Линия);
		ОбластьТекущийЭтап.ЦветРамки = WebЦвета.СветлоЗеленый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсполнителей(ДанныеОбИсполнителях, ГраницыЭтапа, ОбластиДляВыводаДоступности, НачалоИнтервала, ОкончаниеИнтервала, ЭтоАльтернативныеИсполнители, ВысотаТаблицыОсновногоВидаРЦ = Неопределено)

	Этап = ДанныеОбИсполнителях.Этап;
	Исполнители = ДанныеОбИсполнителях.Исполнители;

	ОбластьИсполнитель = МакетОформления.ПолучитьОбласть("Исполнитель");
	
	Если НЕ ЭтоАльтернативныеИсполнители Тогда
		ОбластьИсполнитель_Исполнитель    = МакетОформления.ПолучитьОбласть("Исполнитель_Исполнитель");
		ОбластьИсполнитель_Использование  = МакетОформления.ПолучитьОбласть("Исполнитель_Использование");
		ОбластьИсполнитель_Требуется      = МакетОформления.ПолучитьОбласть("Исполнитель_Требуется");
	Иначе
		ОбластьИсполнитель_Исполнитель    = МакетОформления.ПолучитьОбласть("ИсполнительАльтернативный_Исполнитель");
		ОбластьИсполнитель_Использование  = МакетОформления.ПолучитьОбласть("ИсполнительАльтернативный_Использование");
		ОбластьИсполнитель_Требуется      = МакетОформления.ПолучитьОбласть("ИсполнительАльтернативный_Требуется");
	КонецЕсли;
	
	БылиВыведеныАльтернативные = Ложь;
	
	Для каждого ИсполнительЭтапа Из Исполнители Цикл
		
		Загрузка = ИсполнительЭтапа.Загрузка;
		
		ВыводитьИспользованиеИсполнителя = ЭтоАльтернативныеИсполнители
											ИЛИ (ИсполнительЭтапа.АльтернативныеИсполнители <> Неопределено
													И ИсполнительЭтапа.АльтернативныеИсполнители.Количество() <> 0);
				
		Если ВыводитьИспользованиеИсполнителя Тогда
			ОбластьИсполнительДляВывода = ОбластьИсполнитель_Исполнитель;
			ОбластьИсполнительТребуетсяДляВывода = ОбластьИсполнитель_Требуется;
		Иначе
			ОбластьИсполнительДляВывода = ОбластьИсполнитель;
			ОбластьИсполнительТребуетсяДляВывода = ОбластьИсполнитель;
		КонецЕсли;
		
		ОбластьИсполнительДляВывода.Параметры.Исполнитель = ИсполнительЭтапа.Исполнитель;
		
		Если ИсполнительЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ОдновременноПроизводимое = ?(Этап.ОдновременноПроизводимое = 0, 1, Этап.ОдновременноПроизводимое);
			
			ДлительностьЭтапа = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																			ИсполнительЭтапа.ВремяРаботы, 
																			ИсполнительЭтапа.ЕдиницаИзмерения);
																			
			ДлительностьЭтапа = ДлительностьЭтапа * ?(ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы,
									Цел(Этап.Количество / ОдновременноПроизводимое) + ?(Этап.Количество % ОдновременноПроизводимое > 0, 1, 0), 1);
					
			ОбластьИсполнительТребуетсяДляВывода.Параметры.Требуется = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДлительностьЭтапа);
					
		Иначе
			
			ОбластьИсполнительТребуетсяДляВывода.Параметры.Требуется = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(
																												ИсполнительЭтапа.ВремяРаботы,
																												ИсполнительЭтапа.ЕдиницаИзмерения);
			
		КонецЕсли;
			
		ДобавленнаяОбласть = ТабличныйДокумент.Вывести(ОбластьИсполнительДляВывода);
		
		Если БылиВыведеныАльтернативные Тогда
			ДобавленнаяОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
		КонецЕсли; 
		
		ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
		Если ВыводитьИспользованиеИсполнителя Тогда
			Если НЕ ЭтоАльтернативныеИсполнители Тогда
				ОбластьИсполнитель_Использование.Области.Исполнитель_Использование.Текст = НСтр("ru = 'показать альтернативы';
																								|en = 'show alternatives'");
				ОбластьИсполнитель_Использование.Области.Исполнитель_Использование.Гиперссылка = Истина;
				ОбластьИсполнитель_Использование.Области.Исполнитель_Использование.Шрифт = Новый Шрифт(,,,, Истина);
			Иначе
				ОбластьИсполнитель_Использование.Области.ИсполнительАльтернативный_Использование.Текст = НСтр("ru = 'использовать';
																												|en = 'use'");
				ОбластьИсполнитель_Использование.Области.ИсполнительАльтернативный_Использование.Гиперссылка = Истина;
				ОбластьИсполнитель_Использование.Области.ИсполнительАльтернативный_Использование.Шрифт = Новый Шрифт(,,,, Истина);
			КонецЕсли;
			
			ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьИсполнитель_Использование);
			Если БылиВыведеныАльтернативные Тогда
				ДобавленнаяОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
			КонецЕсли; 
			
			Если НЕ ЭтоАльтернативныеИсполнители Тогда
				РасшифровкаИсполнительИспользование = Новый Структура;
				РасшифровкаИсполнительИспользование.Вставить("ВидОбласти", "УправлениеВидимостьюАльтернативами");
				РасшифровкаИсполнительИспользование.Вставить("ВидРабочегоЦентра", ИсполнительЭтапа.Исполнитель);
				РасшифровкаИсполнительИспользование.Вставить("КлючСвязиВидыРабочихЦентров", ИсполнительЭтапа.КлючСвязиВидыРабочихЦентров);
				РасшифровкаИсполнительИспользование.Вставить("КоличествоАльтернатив", ИсполнительЭтапа.АльтернативныеИсполнители.Количество());
				РасшифровкаИсполнительИспользование.Вставить("ВысотаТаблицы", ВысотаТаблицы);
				РасшифровкаИсполнительИспользование.Вставить("Лево", ДобавленнаяОбласть.Лево);
				РасшифровкаИсполнительИспользование.Вставить("Верх", ДобавленнаяОбласть.Верх);
				ДобавленнаяОбласть.Расшифровка = РасшифровкаИсполнительИспользование;
			Иначе
				РасшифровкаЯчейки = Новый Структура;
				РасшифровкаЯчейки.Вставить("ВидОбласти", "ИспользоватьВидРЦ");
				РасшифровкаЯчейки.Вставить("ВидРабочегоЦентра", ИсполнительЭтапа.Исполнитель);
				РасшифровкаЯчейки.Вставить("КлючСвязиВидыРабочихЦентров", ИсполнительЭтапа.КлючСвязиВидыРабочихЦентров);
				РасшифровкаЯчейки.Вставить("Лево", ДобавленнаяОбласть.Лево);
				РасшифровкаЯчейки.Вставить("Верх", ДобавленнаяОбласть.Верх);
				РасшифровкаЯчейки.Вставить("КоличествоАльтернатив", Исполнители.Количество());
				РасшифровкаЯчейки.Вставить("ВысотаТаблицы", ВысотаТаблицыОсновногоВидаРЦ);
				ДобавленнаяОбласть.Расшифровка = РасшифровкаЯчейки;
			КонецЕсли;
			
			ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьИсполнитель_Требуется);
			Если БылиВыведеныАльтернативные Тогда
				ДобавленнаяОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
			КонецЕсли;
			
		КонецЕсли; 
		
		ДополнительнаяРасшифровка = Новый Структура;
		ДополнительнаяРасшифровка.Вставить("Этап", Этап.Этап);
		ДополнительнаяРасшифровка.Вставить("КлючСвязиПродукция", Этап.КлючСвязиПродукция);
		ДополнительнаяРасшифровка.Вставить("КлючСвязиЭтапы", Этап.КлючСвязи);
		ДополнительнаяРасшифровка.Вставить("НомерСтрокиПродукция", НомерСтрокиПродукции);
		ДополнительнаяРасшифровка.Вставить("МожноНачатьНеРанее", Этап.МожноНачатьНеРанее);
		ДополнительнаяРасшифровка.Вставить("НачалоРаботыИсполнителей", Этап.НачалоРаботыИсполнителей);
												
		Обработки.ДиспетчированиеГрафикаПроизводства.ВывестиДанныеОЗагрузкеВидаРЦВТабличныйДокумент(
					НачалоИнтервала, 
					ОкончаниеИнтервала, 
					Загрузка, 
					ОбластиДляВыводаДоступности, 
					ДанныеОбИсполнителях.ИнтервалПланирования,
					ИсполнительЭтапа,
					Этап.ПланироватьРаботуВидовРабочихЦентров,
					"ИсполнительДанные",
					ТабличныйДокумент,
					Истина,
					ДополнительнаяРасшифровка,
					ДанныеОбИсполнителях.НачалоЭтапа, 
					ДанныеОбИсполнителях.ОкончаниеЭтапа,
					ГраницыЭтапа.ЛеваяГраницаЭтапа,
					ГраницыЭтапа.ПраваяГраницаЭтапа);
					
		ОбластиДляВыводаДоступности.ИнтервалДанные.Параметры.РасшифровкаЯчейки = Неопределено;
		
		БылиВыведеныАльтернативные = Ложь;
		
		// Альтернативные исполнители
		Если НЕ ЭтоАльтернативныеИсполнители
			И ИсполнительЭтапа.АльтернативныеИсполнители <> Неопределено
			И ИсполнительЭтапа.АльтернативныеИсполнители.Количество() <> 0 Тогда
			
			БылиВыведеныАльтернативные = Истина;
			
			ДанныеОбАльтернативныхИсполнителях = Новый Структура;
			ДанныеОбАльтернативныхИсполнителях.Вставить("Этап", Этап);
			ДанныеОбАльтернативныхИсполнителях.Вставить("Исполнители", ИсполнительЭтапа.АльтернативныеИсполнители);
			ДанныеОбАльтернативныхИсполнителях.Вставить("ИнтервалПланирования", ДанныеОбИсполнителях.ИнтервалПланирования);
			ДанныеОбАльтернативныхИсполнителях.Вставить("НачалоЭтапа", ДанныеОбИсполнителях.НачалоЭтапа);
			ДанныеОбАльтернативныхИсполнителях.Вставить("ОкончаниеЭтапа", ДанныеОбИсполнителях.ОкончаниеЭтапа);
			
			ВывестиИсполнителей(
					ДанныеОбАльтернативныхИсполнителях,
					ГраницыЭтапа,
					ОбластиДляВыводаДоступности, 
					НачалоИнтервала, 
					ОкончаниеИнтервала,
					Истина,
					ВысотаТаблицы);
				
		   ПоказатьСкрытьАльтернативы(РасшифровкаИсполнительИспользование, ЭтаФорма);
		   
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеОбласти(Приемник, Источник)
	
	Приемник.ЦветФона   = Источник.ЦветФона;
	Приемник.ЦветТекста = Источник.ЦветТекста;
	Приемник.ЦветУзора  = Источник.ЦветУзора;
	Приемник.Узор       = Источник.Узор;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыНедоступности()

	Если Этапы.Количество() < 2 Тогда
		// Диаграмма не отображается
		Возврат;
	КонецЕсли;
	
	НачалоПериода = '000101010000';
	ОкончаниеПериода = '000101010000';
	ИсполнителиЭтапов = Новый Массив;
	
	Для каждого СтрокаЭтап Из Этапы Цикл
		НачалоПериода = ?(НачалоПериода = '000101010000', СтрокаЭтап.НачалоЭтапа, Мин(СтрокаЭтап.НачалоЭтапа, НачалоПериода));
		ОкончаниеПериода = ?(ОкончаниеПериода = '000101010000', СтрокаЭтап.ОкончаниеЭтапа, Макс(СтрокаЭтап.ОкончаниеЭтапа, ОкончаниеПериода));
		Для каждого СтрокаИсполнитель Из СтрокаЭтап.Исполнители Цикл
			ИсполнителиЭтапов.Добавить(СтрокаИсполнитель.Исполнитель);
		КонецЦикла;
	КонецЦикла;
	
	Если НачалоПериода = '000101010000' ИЛИ ОкончаниеПериода = '000101010000' Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаПериодыНедоступности = ПланированиеПроизводства.ПериодыНедоступностиРабочихЦентров(
												НачалоПериода, 
												ОкончаниеПериода, 
												ИсполнителиЭтапов);
												
	Для каждого ДанныеНедоступности Из ТаблицаПериодыНедоступности Цикл
		НоваяСтрока = ПериодыНедоступности.Добавить();
		НоваяСтрока.Начало    = ДанныеНедоступности.Начало;
		НоваяСтрока.Окончание = ДанныеНедоступности.Окончание;
	КонецЦикла; 

	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.ИнтервалыФона.Очистить();
	Для каждого ДанныеНедоступности Из ПериодыНедоступности Цикл
		ИнтервалФонаДиаграммыГанта = ДиаграммаГанта.ИнтервалыФона.Добавить(ДанныеНедоступности.Начало, ДанныеНедоступности.Окончание);
		ИнтервалФонаДиаграммыГанта.Цвет = ЦветНедоступногоПериодаДиаграммы;
	КонецЦикла;  
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры
 
#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПолучитьПараметрыЭтапаИзЗаказа()

	ЗаказОбъект = Заказ.ПолучитьОбъект();
	РезультатПланированияЗаказа = Обработки.ДиспетчированиеГрафикаПроизводства.РезультатПланированияЗаказа(ЗаказОбъект, Параметры.КлючСвязиПродукция);
	
	ЗначениеВРеквизитФормы(РезультатПланированияЗаказа[0].Этапы, "Этапы");
	НачатьНеРанее = РезультатПланированияЗаказа[0].НачатьНеРанее;
	ДатаПотребности = РезультатПланированияЗаказа[0].ДатаПотребности;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиЛегенду()
	
	ОбластьЛегенда = МакетОформления.ПолучитьОбласть("Легенда");
	Легенда.Вывести(ОбластьЛегенда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореЭтапа()

	ИсторияПереходов = Новый Массив;
	
	Если ЭтапыИсторияПереходов <> Неопределено Тогда
		
		Для каждого ЭтапИсторияПереходов Из ЭтапыИсторияПереходов Цикл
			
			ИсторияПереходов.Добавить(ЭтапИсторияПереходов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИсторияПереходов.Добавить(КлючСвязиЭтапы);
	ЭтапыИсторияПереходов = Новый ФиксированныйМассив(ИсторияПереходов);

	Элементы.Назад.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекущегоЭтапа()

	Если Элементы.СтраницыДиагностика.ТекущаяСтраница = Элементы.СтраницаДиагностикаБезВыбораЭтапов Тогда
		ВывестиШапкуДиагностикиГрафика();
	Иначе
		ПоказатьВыбранныйЭтап();
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура ПоказатьВыбранныйЭтап()
	
	Если КлючСвязиЭтапы = ПустойКлючСвязи Тогда
		Возврат;
	КонецЕсли;
	
	Если Этапы.Количество() > 1 Тогда
		ПланированиеПроизводстваКлиентСервер.ВывестиДиаграммуЭтапов(ДиаграммаГанта, Этапы);
	КонецЕсли; 
	
	ВывестиДиагностикуГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПериодаВидаРЦЗавершение(ВыбранныйЭлемент, Расшифровка) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ИзменениеЗанятостиВидаРабочегоЦентра" Тогда
		
		НачалоПериода = Расшифровка.МожноНачатьНеРанее;
		ОкончаниеПериода = Макс(Расшифровка.НачалоРаботыИсполнителей - 1, НачалоПериода);
		
		Если Расшифровка.ДатаИнтервала < НачалоПериода Тогда
			НачалоПериода = Расшифровка.ДатаИнтервала;
		КонецЕсли;
		Если Расшифровка.ДатаИнтервала > ОкончаниеПериода Тогда
			ОкончаниеПериода = Расшифровка.ДатаИнтервала;
		КонецЕсли;
		
		НачалоПериода = Мин(НачалоПериода, ОкончаниеПериода);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидРабочегоЦентра",      Расшифровка.Исполнитель);
		ПараметрыФормы.Вставить("НачалоПериода",          НачалоПериода);
		ПараметрыФормы.Вставить("ОкончаниеПериода",       ОкончаниеПериода);
		
		ПараметрыФормы.Вставить("Заказ",                  Заказ);
		ПараметрыФормы.Вставить("НомерСтрокиПродукции",   НомерСтрокиПродукции);
		ПараметрыФормы.Вставить("Этап",                   Расшифровка.Этап);
		ПараметрыФормы.Вставить("КлючСвязиПродукция",     Расшифровка.КлючСвязиПродукция);
		ПараметрыФормы.Вставить("КлючСвязиЭтапы",         Расшифровка.КлючСвязиЭтапы);
		
		ОткрытьФорму("Обработка.ДиспетчированиеГрафикаПроизводства.Форма.ИзменениеЗанятостиВидаРабочегоЦентра", ПараметрыФормы);
							
	ИначеЕсли ВыбранныйЭлемент.Значение = "ИзменитьДоступность" Тогда
		
		ПланированиеПроизводстваКлиент.ИзменитьДоступностьВидаРЦ(Расшифровка.Исполнитель, Расшифровка.ДатаИнтервала);

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСкрытьАльтернативы(Расшифровка, Форма)

	ТабличныйДокумент = Форма.ТабличныйДокумент;
	
	ОбластьАльтернативы = ТабличныйДокумент.Область(Расшифровка.ВысотаТаблицы + 1,, Расшифровка.ВысотаТаблицы + Расшифровка.КоличествоАльтернатив * 3);
	ОбластьАльтернативы.Видимость = НЕ ОбластьАльтернативы.Видимость;

	ОбластьИсполнитель_Использование = ТабличныйДокумент.Область(Расшифровка.Верх, Расшифровка.Лево, Расшифровка.Верх, Расшифровка.Лево);
	Если ОбластьАльтернативы.Видимость Тогда
		ОбластьИсполнитель_Использование.Текст = НСтр("ru = 'скрыть альтернативы';
														|en = 'hide alternatives'");
	Иначе
		ОбластьИсполнитель_Использование.Текст = НСтр("ru = 'показать альтернативы';
														|en = 'show alternatives'");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВидРЦ(Расшифровка)

	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Изменить используемый вид РЦ на ""%1""?';
							|en = 'Change the used work center type to ""%1""?'"),
						Строка(Расшифровка.ВидРабочегоЦентра));
						
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Изменить вид РЦ';
														|en = 'Change work center type'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИспользоватьВидРЦЗавершение", ЭтотОбъект, Расшифровка);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВидРЦЗавершение(РезультатВопроса, Расшифровка) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("Заказ",                       Заказ);
	ПараметрыЗамены.Вставить("КлючСвязиПродукция",          Параметры.КлючСвязиПродукция);
	ПараметрыЗамены.Вставить("КлючСвязиЭтапы",              КлючСвязиЭтапы);
	ПараметрыЗамены.Вставить("ВидРабочегоЦентра",           Расшифровка.ВидРабочегоЦентра);
	ПараметрыЗамены.Вставить("КлючСвязиВидыРабочихЦентров", Расшифровка.КлючСвязиВидыРабочихЦентров);
	Если НЕ ИспользоватьДругойВидРЦНаСервере(ПараметрыЗамены, Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокВЯчейкеИспользование = 3;
	
	Для Сч = 0 По Расшифровка.КоличествоАльтернатив-1 Цикл
		
		// Получим область в которой выводится текст "Использовать"
		// Чтобы заменить в ней текст на нужный.
		ОбластьИсполнитель_Использование = ТабличныйДокумент.Область(Расшифровка.ВысотаТаблицы + Сч*КоличествоСтрокВЯчейкеИспользование + 1, 
																		Расшифровка.Лево, 
																		Расшифровка.ВысотаТаблицы + Сч*КоличествоСтрокВЯчейкеИспользование + КоличествоСтрокВЯчейкеИспользование, 
																		Расшифровка.Лево);
		
		Если ОбластьИсполнитель_Использование.Расшифровка.ВидРабочегоЦентра = Расшифровка.ВидРабочегоЦентра Тогда
			ОбластьИсполнитель_Использование.Текст = НСтр("ru = 'будет использоваться';
															|en = 'will be used'");
			ОбластьИсполнитель_Использование.Гиперссылка = Ложь;
			ОбластьИсполнитель_Использование.Шрифт = Новый Шрифт(,,,, Ложь);
			ОбластьИсполнитель_Использование.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
			ОбластьИсполнитель_Использование.ЦветТекста = ЦветВидРЦБудетИспользоваться;
		Иначе
			ОбластьИсполнитель_Использование.Текст = НСтр("ru = 'использовать';
															|en = 'use'");
			ОбластьИсполнитель_Использование.Гиперссылка = Истина;
			ОбластьИсполнитель_Использование.Шрифт = Новый Шрифт(,,,, Истина);
			ОбластьИсполнитель_Использование.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
			ОбластьИсполнитель_Использование.ЦветТекста = ЦветГиперссылки;
		КонецЕсли;
		
	КонецЦикла; 
	
	// Получим область основного вида РЦ
	ОбластьИсполнитель_Использование = ТабличныйДокумент.Область(Расшифровка.ВысотаТаблицы-КоличествоСтрокВЯчейкеИспользование+1, 
																	Расшифровка.Лево, 
																	Расшифровка.ВысотаТаблицы,
																	Расшифровка.Лево);
																	
	Если ОбластьИсполнитель_Использование.Расшифровка.ВидРабочегоЦентра = Расшифровка.ВидРабочегоЦентра Тогда
		ОбластьИсполнитель_Использование.Текст = НСтр("ru = 'будет использоваться';
														|en = 'will be used'");
		ОбластьИсполнитель_Использование.Гиперссылка = Ложь;
		ОбластьИсполнитель_Использование.Шрифт = Новый Шрифт(,,,, Ложь);
		ОбластьИсполнитель_Использование.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		ОбластьИсполнитель_Использование.ЦветТекста = ЦветВидРЦБудетИспользоваться;
	Иначе
		ОбластьИсполнитель_Использование.Текст = НСтр("ru = 'использовать';
														|en = 'use'");
		ОбластьИсполнитель_Использование.Гиперссылка = Истина;
		ОбластьИсполнитель_Использование.Шрифт = Новый Шрифт(,,,, Истина);
		ОбластьИсполнитель_Использование.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
		ОбластьИсполнитель_Использование.ЦветТекста = ЦветГиперссылки;
	КонецЕсли;
	
	ОбластьИсполнитель_Использование.Расшифровка.Вставить("ВидОбласти", "ИспользоватьВидРЦ");
	
	ТребуетсяПерепланироватьЗаказы(Истина, ЭтаФорма);
	
	Оповестить("Запись_ЗаказНаПроизводство", Заказ, "ИзменениеЗанятостиВидаРабочегоЦентра");
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьДругойВидРЦНаСервере(Знач ПараметрыЗамены, Знач Заказ)

	ЕстьОшибки = Ложь;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	
	ДанныеЗамены = Новый Массив;
	ДанныеЗамены.Добавить(ПараметрыЗамены);
	
	ЗаказОбъект.ЗаменитьИспользуемыйВидРЦ(ДанныеЗамены);
	
	Попытка
	
		Если ЗаказОбъект.Проведен Тогда
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ЗаказОбъект.Записать();
		КонецЕсли;
		
	Исключение
		ЕстьОшибки = Истина;
	КонецПопытки; 

	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ТребуетсяПерепланироватьЗаказы(ТребуетсяПерепланировать, Форма)

	Если ТребуетсяПерепланировать Тогда
		Форма.Элементы.СтраницыПерепланирование.ТекущаяСтраница = Форма.Элементы.СтраницаПерепланированиеТребуется;
	Иначе
		Форма.Элементы.СтраницыПерепланирование.ТекущаяСтраница = Форма.Элементы.СтраницаПерепланированиеНеТребуется;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()

	ПолучитьПараметрыЭтапаИзЗаказа();
	ПоказатьВыбранныйЭтап();
	ТребуетсяПерепланироватьЗаказы(Ложь, ЭтаФорма);

КонецПроцедуры
 
#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21