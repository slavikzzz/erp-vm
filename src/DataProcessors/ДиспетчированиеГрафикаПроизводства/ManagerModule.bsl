//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура СоздатьСтруктуруТаблицыЭтапов(Форма, ИмяРеквизитаЭтапы) Экспорт

	ДобавляемыеРеквизиты = Новый Массив;
	
	// Добавим колонки таблицы Этапы
	Таблица = СоздатьТаблицуЭтапы();
	ПутьКРеквизиту = ИмяРеквизитаЭтапы;
	
	Для каждого КолонкаТаблицы Из Таблица.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(КолонкаТаблицы.Имя, Новый ОписаниеТипов(КолонкаТаблицы.ТипЗначения), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	// Добавим колонки таблицы Этапы.Исполнители
	Таблица = СоздатьТаблицуИсполнители();
	ПутьКРеквизиту = ИмяРеквизитаЭтапы + ".Исполнители";
	
	Для каждого КолонкаТаблицы Из Таблица.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(КолонкаТаблицы.Имя, Новый ОписаниеТипов(КолонкаТаблицы.ТипЗначения), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	// Добавим колонки таблицы Этапы.РазмещениеЭтапа
	Таблица = СоздатьТаблицуРазмещениеЭтапа();
	ПутьКРеквизиту = ИмяРеквизитаЭтапы + ".РазмещениеЭтапа";
	
	Для каждого КолонкаТаблицы Из Таблица.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(КолонкаТаблицы.Имя, Новый ОписаниеТипов(КолонкаТаблицы.ТипЗначения), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	// Добавим колонки таблицы Этапы.Материалы
	Таблица = СоздатьТаблицуМатериалы();
	ПутьКРеквизиту = ИмяРеквизитаЭтапы + ".Материалы";
	
	Для каждого КолонкаТаблицы Из Таблица.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(КолонкаТаблицы.Имя, Новый ОписаниеТипов(КолонкаТаблицы.ТипЗначения), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	// Добавим колонки таблицы Этапы.Материалы.Потребность
	Таблица = СоздатьТаблицуПотребность();
	ПутьКРеквизиту = ИмяРеквизитаЭтапы + ".Материалы.Потребность";
	
	Для каждого КолонкаТаблицы Из Таблица.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(КолонкаТаблицы.Имя, Новый ОписаниеТипов(КолонкаТаблицы.ТипЗначения), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	// Добавим колонки таблицы Этапы.Исполнители.Загрузка
	Таблица = СоздатьТаблицуЗагрузки();
	ПутьКРеквизиту = ИмяРеквизитаЭтапы + ".Исполнители.Загрузка";
	
	Для каждого КолонкаТаблицы Из Таблица.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(КолонкаТаблицы.Имя, Новый ОписаниеТипов(КолонкаТаблицы.ТипЗначения), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	// Добавим колонки таблицы Этапы.Исполнители.АльтернативныеИсполнители
	Таблица = СоздатьТаблицуИсполнители();
	ПутьКРеквизиту = ИмяРеквизитаЭтапы + ".Исполнители.АльтернативныеИсполнители";
	
	Для каждого КолонкаТаблицы Из Таблица.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(КолонкаТаблицы.Имя, Новый ОписаниеТипов(КолонкаТаблицы.ТипЗначения), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	// Добавим колонки таблицы Этапы.Исполнители.АльтернативныеИсполнители.Загрузка
	Таблица = СоздатьТаблицуЗагрузки();
	ПутьКРеквизиту = ИмяРеквизитаЭтапы + ".Исполнители.АльтернативныеИсполнители.Загрузка";
	
	Для каждого КолонкаТаблицы Из Таблица.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(КолонкаТаблицы.Имя, Новый ОписаниеТипов(КолонкаТаблицы.ТипЗначения), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

// Служебная функция, которая формирует результат планирования заказа
//
// Параметры:
//  ЗаказОбъект			- ДокументОбъект.ЗаказНаПроизводство - заказ на производство
//  КлючСвязиПродукция	- УникальныйИдентификатор - позволяет получить данные только для конкретной строки продукции
//  Ошибки				- Неопределено, ФиксированныйМассив - ошибки, которые возникли при планировании
//  Параметры           - Структура (ПолучатьЗагрузкуИсполнителей).
//
// Возвращаемое значение:
//   ТаблицаЗначений   - данные планирования продукции заказа.
//
Функция РезультатПланированияЗаказа(ЗаказОбъект, КлючСвязиПродукция = Неопределено, Ошибки = Неопределено, Параметры = Неопределено) Экспорт
	
	Перем ПолучатьЗагрузкуИсполнителей;
	
	Если Параметры = Неопределено Тогда
		
		Параметры = Новый Структура;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПолучатьЗагрузкуИсполнителей", ПолучатьЗагрузкуИсполнителей) = Неопределено
		ИЛИ ТипЗнч(ПолучатьЗагрузкуИсполнителей) <> Тип("Булево") Тогда
		
		ПолучатьЗагрузкуИсполнителей = Истина;
		
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Продукция = Новый ТаблицаЗначений;
	Продукция.Колонки.Добавить("НомерЗаказа",                 Новый ОписаниеТипов("Строка"));
	Продукция.Колонки.Добавить("НомерВОчереди",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(32, 15, ДопустимыйЗнак.Неотрицательный)));
	Продукция.Колонки.Добавить("НомерСтроки",                 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	Продукция.Колонки.Добавить("СтатусЗаказа",                Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаказовНаПроизводство"));
	Продукция.Колонки.Добавить("СтатусГрафикаПроизводства",   Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство"));
	Продукция.Колонки.Добавить("Артикул",                     Новый ОписаниеТипов("Строка"));
	Продукция.Колонки.Добавить("Номенклатура",                Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Продукция.Колонки.Добавить("Характеристика",              Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Продукция.Колонки.Добавить("Заказано",                    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Продукция.Колонки.Добавить("Заказ",                       Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	Продукция.Колонки.Добавить("КлючСвязи",                   Новый ОписаниеТипов("УникальныйИдентификатор"));
	Продукция.Колонки.Добавить("НачатьНеРанее",               Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Продукция.Колонки.Добавить("ДатаПотребности",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Продукция.Колонки.Добавить("ДатаЗапуска",                 Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Продукция.Колонки.Добавить("ДатаВыпуска",                 Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Продукция.Колонки.Добавить("СтатусСтроки",                Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	Продукция.Колонки.Добавить("КодСтроки",                   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Продукция.Колонки.Добавить("Этапы",                       Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Если КлючСвязиПродукция <> Неопределено Тогда
		
		// Получим данные только для конкретной строки продукции
		СтруктураПоиска = Новый Структура("КлючСвязи", КлючСвязиПродукция);
		ВыборкаПродукция = ЗаказОбъект.Продукция.НайтиСтроки(СтруктураПоиска);
		
		СтруктураПоиска = Новый Структура("КлючСвязиПродукция", КлючСвязиПродукция);
		ВыборкаЭтапы = ЗаказОбъект.Этапы.НайтиСтроки(СтруктураПоиска);

	Иначе
		
		ВыборкаПродукция = ЗаказОбъект.Продукция;
		ВыборкаЭтапы = ЗаказОбъект.Этапы;
		
	КонецЕсли; 
	
	// График этапов
	ЭтапыГрафик = ЗаказОбъект.ЭтапыГрафик.Выгрузить(, "НачалоЭтапа, ОкончаниеЭтапа, НачалоПредварительногоБуфера, ОкончаниеЗавершающегоБуфера, Количество, КодСтроки, КлючСвязиПродукция, КлючСвязиЭтапы");
	
	// Материалы и услуги
	МатериалыИУслуги = ПланированиеПроизводства.ОграниченияГрафикаПроизводстваПоМатериалам(ЗаказОбъект.Ссылка);
	МатериалыИУслуги.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиЭтапы");
	
	// Материалы и услуги (график)
	МатериалыИУслугиГрафик = ЗаказОбъект.МатериалыИУслугиГрафик.Выгрузить();
	МатериалыИУслугиГрафик.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиМатериалыИУслуги");
	
	// Виды рабочих центров
	ВидыРабочихЦентров = ЗаказОбъект.ВидыРабочихЦентров.Выгрузить();
	ВидыРабочихЦентров.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиЭтапы");
	
	РеквизитыВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра"), "УчитыватьДоступностьПоГрафикуРаботы, РезервДоступности");
	
	// Альтернативные виды рабочих центров
	АльтернативныеВидыРабочихЦентров = ЗаказОбъект.АльтернативныеВидыРабочихЦентров.Выгрузить();
	АльтернативныеВидыРабочихЦентров.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиЭтапы, КлючСвязиВидыРабочихЦентров");
	
	РеквизитыАльтернативныхВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(АльтернативныеВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра"), "УчитыватьДоступностьПоГрафикуРаботы, РезервДоступности");
	
	// Таблицы
	ТаблицаИсполнители = СоздатьТаблицуИсполнители();
	ТаблицаРазмещениеЭтапа = СоздатьТаблицуРазмещениеЭтапа();
	ТаблицаМатериалы = СоздатьТаблицуМатериалы();
	ТаблицаПотребность = СоздатьТаблицуПотребность();
	ТаблицаЗагрузки = СоздатьТаблицуЗагрузки();
	
	// Кэшированные значения
	КэшированныеЗначения = Новый Структура;
	
	МассивЭтапов = Новый Массив;
	МассивПодразделений = Новый Массив;
	Для Каждого ЭлементКоллекции Из ВыборкаЭтапы Цикл
		МассивЭтапов.Добавить(ЭлементКоллекции.Этап);
		МассивПодразделений.Добавить(ЭлементКоллекции.Подразделение);
	КонецЦикла;
	
	КэшированныеЗначения.Вставить("РеквизитыЭтапов", ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭтапов, "Владелец, Наименование"));
	
	ПараметрыПодразделений = ПроизводствоСервер.ПараметрыПроизводственныхПодразделений(МассивПодразделений);
	Для каждого КлючИЗначение Из ПараметрыПодразделений Цикл
		КлючИЗначение.Значение.Вставить(
			"ГрафикРаботы",
			?(КлючИЗначение.Значение.ГрафикиРаботы.ВГраница() <> -1,
				КлючИЗначение.Значение.ГрафикиРаботы[0],
				Справочники.Календари.ПустаяСсылка()));
	КонецЦикла;
	КэшированныеЗначения.Вставить("РеквизитыПодразделений", ПараметрыПодразделений);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ЭтапыПроизводства.НачалоЭтапа)                  КАК НачалоЭтапа,
	|	МАКСИМУМ(ЭтапыПроизводства.Период)                      КАК ОкончаниеЭтапа,
	|	МИНИМУМ(ЭтапыПроизводства.НачалоПредварительногоБуфера) КАК НачалоПредварительногоБуфера,
	|	МАКСИМУМ(ЭтапыПроизводства.ОкончаниеЗавершающегоБуфера) КАК ОкончаниеЗавершающегоБуфера,
	|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик                  КАК КодСтроки,
	|	Продукция.КлючСвязи                                     КАК КлючСвязиПродукция,
	|	ЭтапыГрафик.КлючСвязиЭтапы                              КАК КлючСвязиЭтапы
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО (Продукция.Ссылка = &Распоряжение)
	|			И (Продукция.КодСтроки = ЭтапыПроизводства.КодСтрокиПродукция)
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЭтапыГрафик
	|		ПО (ЭтапыГрафик.Ссылка = &Распоряжение)
	|			И (ЭтапыГрафик.КодСтроки = ЭтапыПроизводства.КодСтрокиЭтапыГрафик)
	|
	|ГДЕ
	|	ЭтапыПроизводства.Активность
	|	И ЭтапыПроизводства.Распоряжение = &Распоряжение
	|	И ЭтапыПроизводства.КВыполнению + ЭтапыПроизводства.Выполнено + ЭтапыПроизводства.Брак > 0
	//++ Устарело_Переработка24
	|	И НЕ ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказПереработчику
	//-- Устарело_Переработка24
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик,
	|	Продукция.КлючСвязи,
	|	ЭтапыГрафик.КлючСвязиЭтапы");
	
	Запрос.УстановитьПараметр("Распоряжение", ЗаказОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура("КодСтроки, КлючСвязиПродукция, КлючСвязиЭтапы", Выборка.КодСтроки, Выборка.КлючСвязиПродукция, Выборка.КлючСвязиЭтапы);
			ЭтапыГрафикНайденныеСтроки = ЭтапыГрафик.НайтиСтроки(СтруктураПоиска);
			
			Для каждого ЭтапыГрафикНайденнаяСтрока Из ЭтапыГрафикНайденныеСтроки Цикл
				
				ЭтапыГрафикНайденнаяСтрока.НачалоПредварительногоБуфера = Выборка.НачалоПредварительногоБуфера;
				ЭтапыГрафикНайденнаяСтрока.НачалоЭтапа = Выборка.НачалоЭтапа;
				ЭтапыГрафикНайденнаяСтрока.ОкончаниеЭтапа = Выборка.ОкончаниеЭтапа;
				ЭтапыГрафикНайденнаяСтрока.ОкончаниеЗавершающегоБуфера = Выборка.ОкончаниеЗавершающегоБуфера;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Продукция
	Для каждого ЗаказПродукцияСтрока Из ВыборкаПродукция Цикл
		
		ПродукцияНоваяСтрока = Продукция.Добавить();
		
		ПродукцияНоваяСтрока.НомерЗаказа               = ЗаказОбъект.Номер;
		ПродукцияНоваяСтрока.НомерВОчереди             = ЗаказОбъект.Очередь;
		ПродукцияНоваяСтрока.НомерСтроки               = ЗаказПродукцияСтрока.НомерСтроки;
		ПродукцияНоваяСтрока.СтатусЗаказа              = ЗаказОбъект.Статус;
		ПродукцияНоваяСтрока.СтатусГрафикаПроизводства = ЗаказОбъект.СтатусГрафикаПроизводства;
		ПродукцияНоваяСтрока.Номенклатура              = ЗаказПродукцияСтрока.Номенклатура;
		ПродукцияНоваяСтрока.Характеристика            = ЗаказПродукцияСтрока.Характеристика;
		ПродукцияНоваяСтрока.Заказано                  = ЗаказПродукцияСтрока.КоличествоУпаковок;
		ПродукцияНоваяСтрока.Заказ                     = ЗаказОбъект.Ссылка;
		ПродукцияНоваяСтрока.КлючСвязи                 = ЗаказПродукцияСтрока.КлючСвязи;
		ПродукцияНоваяСтрока.НачатьНеРанее             = ЗаказПродукцияСтрока.НачатьНеРанее;
		ПродукцияНоваяСтрока.ДатаПотребности           = ЗаказПродукцияСтрока.ДатаПотребности;
		ПродукцияНоваяСтрока.КодСтроки                 = ЗаказПродукцияСтрока.КодСтроки;
		
		ПродукцияНоваяСтрока.Этапы = СоздатьТаблицуЭтапы();
		
		ПродукцияГрафикНайденныеСтроки = ЗаказОбъект.ПродукцияГрафик.НайтиСтроки(Новый Структура("КлючСвязиПродукция", ЗаказПродукцияСтрока.КлючСвязи));
		
		Если ПродукцияГрафикНайденныеСтроки.Количество() > 0 Тогда
			
			ПродукцияНоваяСтрока.ДатаЗапуска = ПродукцияГрафикНайденныеСтроки[0].Начало;
			ПродукцияНоваяСтрока.ДатаВыпуска = ПродукцияГрафикНайденныеСтроки[0].Окончание;
			
		КонецЕсли;
		
		// Этапы
		ЭтапыНайденныеСтроки = ЗаказОбъект.Этапы.НайтиСтроки(Новый Структура("КлючСвязиПродукция", ПродукцияНоваяСтрока.КлючСвязи));
		
		Для каждого ЭтапыНайденнаяСтрока Из ЭтапыНайденныеСтроки Цикл
			
			ЭтапыНоваяСтрока = ПродукцияНоваяСтрока.Этапы.Добавить();
			
			ЭтапыНоваяСтрока.НаименованиеЭтапа        = ЭтапыНайденнаяСтрока.НаименованиеЭтапа;
			ЭтапыНоваяСтрока.НомерЭтапа               = ЭтапыНайденнаяСтрока.НомерЭтапа;
			ЭтапыНоваяСтрока.НомерСледующегоЭтапа     = ЭтапыНайденнаяСтрока.НомерСледующегоЭтапа;
			ЭтапыНоваяСтрока.Этап                     = ЭтапыНайденнаяСтрока.Этап;
			ЭтапыНоваяСтрока.КлючСвязи                = ЭтапыНайденнаяСтрока.КлючСвязи;
			ЭтапыНоваяСтрока.КлючСвязиПродукция       = ЭтапыНайденнаяСтрока.КлючСвязиПродукция;
			ЭтапыНоваяСтрока.КлючСвязиЭтапы           = ЭтапыНайденнаяСтрока.КлючСвязиЭтапы;
			ЭтапыНоваяСтрока.КлючСвязиПолуфабрикат    = ЭтапыНайденнаяСтрока.КлючСвязиПолуфабрикат;
			ЭтапыНоваяСтрока.КлючСвязиЭтапыБрак       = ЭтапыНайденнаяСтрока.КлючСвязиЭтапыБрак;
			ЭтапыНоваяСтрока.ЭтапВосстановленияБрака  = ЭтапыНайденнаяСтрока.ЭтапВосстановленияБрака;
			ЭтапыНоваяСтрока.Количество               = ЭтапыНайденнаяСтрока.Количество;
			ЭтапыНоваяСтрока.ОдновременноПроизводимое = ЭтапыНайденнаяСтрока.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий;
			ЭтапыНоваяСтрока.Подразделение            = ЭтапыНайденнаяСтрока.Подразделение;
			ЭтапыНоваяСтрока.ПредварительныйБуфер     = ЭтапыНайденнаяСтрока.ПредварительныйБуфер;
			
			ЭтапыНоваяСтрока.ЕдиницаИзмеренияПредварительногоБуфера = ЭтапыНайденнаяСтрока.ЕдиницаИзмеренияПредварительногоБуфера;
			ЭтапыНоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = ЭтапыНайденнаяСтрока.ПланироватьРаботуВидовРабочихЦентров;
			ЭтапыНоваяСтрока.ДлительностьЭтапа = ЭтапыНайденнаяСтрока.ДлительностьЭтапа;
			
			РеквизитыЭтапа         = КэшированныеЗначения.РеквизитыЭтапов[ЭтапыНайденнаяСтрока.Этап];
			РеквизитыПодразделений = КэшированныеЗначения.РеквизитыПодразделений[ЭтапыНайденнаяСтрока.Подразделение];
			
			ЭтапыНоваяСтрока.Спецификация                   = РеквизитыЭтапа.Владелец;
			ЭтапыНоваяСтрока.НаименованиеПодразделения      = РеквизитыПодразделений.Наименование;
			ЭтапыНоваяСтрока.ГрафикРаботы                   = РеквизитыПодразделений.ГрафикРаботы;
			
			// В диагностике для отображения шкалы времени по этапам без ограничений
			//  используем точность графика производства "День".
			Если ЭтапыНоваяСтрока.ПланироватьРаботуВидовРабочихЦентров Тогда
				ЭтапыНоваяСтрока.ИнтервалПланирования           = РеквизитыПодразделений.ИнтервалПланирования;
				ЭтапыНоваяСтрока.НачалоИнтервалаПланирования    = РеквизитыПодразделений.НачалоИнтервалаПланирования;
				ЭтапыНоваяСтрока.ОкончаниеИнтервалаПланирования = РеквизитыПодразделений.ОкончаниеИнтервалаПланирования;
			Иначе
				ЭтапыНоваяСтрока.ИнтервалПланирования           = Перечисления.ТочностьГрафикаПроизводства.День;
				ЭтапыНоваяСтрока.НачалоИнтервалаПланирования    = '00010101';
				ЭтапыНоваяСтрока.ОкончаниеИнтервалаПланирования = КонецДня('00010101');
			КонецЕсли;
			
			ЭтапыНоваяСтрока.Исполнители     = ТаблицаИсполнители.СкопироватьКолонки();
			ЭтапыНоваяСтрока.РазмещениеЭтапа = ТаблицаРазмещениеЭтапа.СкопироватьКолонки();
			ЭтапыНоваяСтрока.Материалы       = ТаблицаМатериалы.СкопироватьКолонки();
			
			// Размещение этапов
			#Область РазмещениеЭтапа
			
			СтруктураПоиска = Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапы", ПродукцияНоваяСтрока.КлючСвязи, ЭтапыНоваяСтрока.КлючСвязи);
			ЭтапыГрафикНайденныеСтроки = ЭтапыГрафик.НайтиСтроки(СтруктураПоиска);
			
			Для каждого ЭтапыГрафикНайденнаяСтрока Из ЭтапыГрафикНайденныеСтроки Цикл
				
				РазмещениеЭтапаНоваяСтрока = ЭтапыНоваяСтрока.РазмещениеЭтапа.Добавить();
				
				РазмещениеЭтапаНоваяСтрока.НачалоЭтапа                  = ЭтапыГрафикНайденнаяСтрока.НачалоЭтапа;
				РазмещениеЭтапаНоваяСтрока.ОкончаниеЭтапа               = ЭтапыГрафикНайденнаяСтрока.ОкончаниеЭтапа;
				РазмещениеЭтапаНоваяСтрока.НачалоПредварительногоБуфера = ЭтапыГрафикНайденнаяСтрока.НачалоПредварительногоБуфера;
				РазмещениеЭтапаНоваяСтрока.ОкончаниеЗавершающегоБуфера  = ЭтапыГрафикНайденнаяСтрока.ОкончаниеЗавершающегоБуфера;
				РазмещениеЭтапаНоваяСтрока.Количество                   = ЭтапыГрафикНайденнаяСтрока.Количество;
				РазмещениеЭтапаНоваяСтрока.КодСтроки                    = ЭтапыГрафикНайденнаяСтрока.КодСтроки;
				
				ЭтапыНоваяСтрока.НачалоЭтапа    = ?(ЗначениеЗаполнено(ЭтапыНоваяСтрока.НачалоЭтапа), 
														Мин(ЭтапыНоваяСтрока.НачалоЭтапа, РазмещениеЭтапаНоваяСтрока.НачалоПредварительногоБуфера), 
														РазмещениеЭтапаНоваяСтрока.НачалоПредварительногоБуфера);
														
				ЭтапыНоваяСтрока.ОкончаниеЭтапа = ?(ЗначениеЗаполнено(ЭтапыНоваяСтрока.ОкончаниеЭтапа), 
														Макс(ЭтапыНоваяСтрока.ОкончаниеЭтапа, РазмещениеЭтапаНоваяСтрока.ОкончаниеЗавершающегоБуфера), 
														РазмещениеЭтапаНоваяСтрока.ОкончаниеЗавершающегоБуфера);
														
				ЭтапыНоваяСтрока.НачалоРаботыИсполнителей    = ?(ЗначениеЗаполнено(ЭтапыНоваяСтрока.НачалоРаботыИсполнителей), 
														Мин(ЭтапыНоваяСтрока.НачалоРаботыИсполнителей, РазмещениеЭтапаНоваяСтрока.НачалоЭтапа), 
														РазмещениеЭтапаНоваяСтрока.НачалоЭтапа);
														
				ЭтапыНоваяСтрока.ОкончаниеРаботыИсполнителей = ?(ЗначениеЗаполнено(ЭтапыНоваяСтрока.ОкончаниеРаботыИсполнителей), 
														Макс(ЭтапыНоваяСтрока.ОкончаниеРаботыИсполнителей, РазмещениеЭтапаНоваяСтрока.ОкончаниеЭтапа), 
														РазмещениеЭтапаНоваяСтрока.ОкончаниеЭтапа);
														
				ПродукцияНоваяСтрока.ДатаЗапуска = ?(ЗначениеЗаполнено(ПродукцияНоваяСтрока.ДатаЗапуска),
														Мин(ПродукцияНоваяСтрока.ДатаЗапуска, ЭтапыНоваяСтрока.НачалоЭтапа),
														ЭтапыНоваяСтрока.НачалоЭтапа);
														
				ПродукцияНоваяСтрока.ДатаВыпуска = ?(ЗначениеЗаполнено(ПродукцияНоваяСтрока.ДатаВыпуска),
														Макс(ПродукцияНоваяСтрока.ДатаВыпуска, ЭтапыНоваяСтрока.ОкончаниеЭтапа),
														ЭтапыНоваяСтрока.ОкончаниеЭтапа);
														
			КонецЦикла;
													
			ЭтапыНоваяСтрока.РазмещениеЭтапа.Сортировать("ОкончаниеЗавершающегоБуфера Возр", Новый СравнениеЗначений);
													
			#КонецОбласти
			
			// Исполнители
			#Область Исполнители
			
			СтруктураПоиска = Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапы", ПродукцияНоваяСтрока.КлючСвязи, ЭтапыНоваяСтрока.КлючСвязи);
			ВидыРабочихЦентровНайденныеСтроки = ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			
			Если ВидыРабочихЦентровНайденныеСтроки.Количество() > 0 Тогда
				
				Для каждого ВидыРабочихЦентровНайденнаяСтрока Из ВидыРабочихЦентровНайденныеСтроки Цикл
					
					СтруктураПоиска = Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапы, КлючСвязиВидыРабочихЦентров", 
												ПродукцияНоваяСтрока.КлючСвязи, ЭтапыНоваяСтрока.КлючСвязи, ВидыРабочихЦентровНайденнаяСтрока.КлючСвязи);
					АльтернативныеВидыРабочихЦентровНайденныеСтроки = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
					
					Если ВидыРабочихЦентровНайденнаяСтрока.Использовать Тогда
						
						ИсполнителиЭтапаНоваяСтрока = ДобавитьИсполнителя(ЭтапыНоваяСтрока.Исполнители, 
																			ВидыРабочихЦентровНайденнаяСтрока, 
																			ВидыРабочихЦентровНайденнаяСтрока.КлючСвязи,
																			РеквизитыВидовРЦ,
																			ТаблицаЗагрузки);
						
					Иначе
						
						Для каждого АльтернативныеВидыРабочихЦентровНайденнаяСтрока Из АльтернативныеВидыРабочихЦентровНайденныеСтроки Цикл
							
							Если АльтернативныеВидыРабочихЦентровНайденнаяСтрока.Использовать Тогда
								
								ИсполнителиЭтапаНоваяСтрока = ДобавитьИсполнителя(ЭтапыНоваяСтрока.Исполнители, 
																					АльтернативныеВидыРабочихЦентровНайденнаяСтрока, 
																					ВидыРабочихЦентровНайденнаяСтрока.КлючСвязи,
																					РеквизитыАльтернативныхВидовРЦ,
																					ТаблицаЗагрузки);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					// Альтернативные исполнители
					ИсполнителиЭтапаНоваяСтрока.АльтернативныеИсполнители = ТаблицаИсполнители.СкопироватьКолонки();
					
					Если НЕ ВидыРабочихЦентровНайденнаяСтрока.Использовать Тогда
						
						ДобавитьИсполнителя(ИсполнителиЭтапаНоваяСтрока.АльтернативныеИсполнители, 
												ВидыРабочихЦентровНайденнаяСтрока, 
												ВидыРабочихЦентровНайденнаяСтрока.КлючСвязи,
												РеквизитыВидовРЦ,
												ТаблицаЗагрузки);
												
					КонецЕсли;
					
					Для каждого АльтернативныеВидыРабочихЦентровНайденнаяСтрока Из АльтернативныеВидыРабочихЦентровНайденныеСтроки Цикл
						
						Если НЕ АльтернативныеВидыРабочихЦентровНайденнаяСтрока.Использовать Тогда
							
							ДобавитьИсполнителя(ИсполнителиЭтапаНоваяСтрока.АльтернативныеИсполнители, 
													АльтернативныеВидыРабочихЦентровНайденнаяСтрока, 
													ВидыРабочихЦентровНайденнаяСтрока.КлючСвязи,
													РеквизитыАльтернативныхВидовРЦ,
													ТаблицаЗагрузки);
													
						КонецЕсли;
						
					КонецЦикла; 
					
				КонецЦикла;
			
			Иначе
				
				ИсполнителиЭтапаНоваяСтрока = ЭтапыНоваяСтрока.Исполнители.Добавить();
				ИсполнителиЭтапаНоваяСтрока.Исполнитель                          = ЭтапыНайденнаяСтрока.Подразделение;
				ИсполнителиЭтапаНоваяСтрока.УчитыватьДоступностьПоГрафикуРаботы  = Ложь;
				ИсполнителиЭтапаНоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = Ложь;
				ИсполнителиЭтапаНоваяСтрока.РезервДоступности                    = 0;
				ИсполнителиЭтапаНоваяСтрока.ВремяРаботы                          = ЭтапыНайденнаяСтрока.ДлительностьЭтапа;
				ИсполнителиЭтапаНоваяСтрока.ЕдиницаИзмерения                     = ЭтапыНайденнаяСтрока.ЕдиницаИзмеренияДлительностиЭтапа;
				ИсполнителиЭтапаНоваяСтрока.Загрузка                             = ТаблицаЗагрузки.СкопироватьКолонки();
				ИсполнителиЭтапаНоваяСтрока.АльтернативныеИсполнители            = ТаблицаИсполнители.СкопироватьКолонки();
				
				ИсполнителиЭтапаНоваяСтрока.ПроизводствоНаСтороне = ЭтапыНайденнаяСтрока.ПроизводствоНаСтороне;
				ИсполнителиЭтапаНоваяСтрока.ГрафикРаботыПартнера  = ЭтапыНайденнаяСтрока.ГрафикРаботыПартнера;
				
			КонецЕсли;
			
			#КонецОбласти
			
			// Материалы
			#Область Материалы
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязиПродукция", ПродукцияНоваяСтрока.КлючСвязи);
			СтруктураПоиска.Вставить("КлючСвязиЭтапы", ЭтапыНоваяСтрока.КлючСвязи);
			
			Для каждого МатериалыИУслугиНайденнаяСтрока Из МатериалыИУслуги.НайтиСтроки(СтруктураПоиска) Цикл
				
				МатериалыНоваяСтрока = ЭтапыНоваяСтрока.Материалы.Добавить();
				
				МатериалыНоваяСтрока.Номенклатура    = МатериалыИУслугиНайденнаяСтрока.Номенклатура;
				МатериалыНоваяСтрока.Характеристика  = МатериалыИУслугиНайденнаяСтрока.Характеристика;
				МатериалыНоваяСтрока.Склад           = МатериалыИУслугиНайденнаяСтрока.Склад;
				МатериалыНоваяСтрока.ДатаПотребности = МатериалыИУслугиНайденнаяСтрока.ДатаПотребности;
				МатериалыНоваяСтрока.Количество      = МатериалыИУслугиНайденнаяСтрока.Количество;
				
				Если МатериалыИУслугиНайденнаяСтрока.ПроизводитсяВПроцессе Тогда
					
					МатериалыНоваяСтрока.ПроизводитсяВПроцессе = Истина;
					МатериалыНоваяСтрока.КлючСвязиПолуфабрикат = МатериалыИУслугиНайденнаяСтрока.КлючСвязи;
					
				КонецЕсли; 
				
				МатериалыНоваяСтрока.Потребность = ТаблицаПотребность.СкопироватьКолонки();
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("КлючСвязиПродукция", ПродукцияНоваяСтрока.КлючСвязи);
				СтруктураПоиска.Вставить("КлючСвязиМатериалыИУслуги", МатериалыИУслугиНайденнаяСтрока.КлючСвязи);
				
				Для Каждого МатериалыИУслугиГрафикНайденнаяСтрока Из МатериалыИУслугиГрафик.НайтиСтроки(СтруктураПоиска) Цикл
					
					ДатаПотребности = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(
											МатериалыИУслугиГрафикНайденнаяСтрока.ДатаПотребности, 
											ЭтапыНоваяСтрока.ИнтервалПланирования);
					
					ПотребностьНоваяСтрока = МатериалыНоваяСтрока.Потребность.Добавить();
					
					ПотребностьНоваяСтрока.ДатаПотребности = ДатаПотребности;
					ПотребностьНоваяСтрока.Количество      = МатериалыИУслугиГрафикНайденнаяСтрока.Количество;
					
				КонецЦикла;
				
			КонецЦикла;
			
			#КонецОбласти

			Если Ошибки <> Неопределено И ПродукцияНоваяСтрока.СтатусСтроки <> 3 Тогда
				
				Для каждого Ошибка Из Ошибки Цикл
					
					Если Ошибка.КлючСвязиЭтап = ЭтапыНайденнаяСтрока.КлючСвязи Тогда
						
						ПродукцияНоваяСтрока.СтатусСтроки = 3;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого ПродукцияСтрока Из Продукция Цикл
		
		Для каждого ЭтапыСтрока Из ПродукцияСтрока.Этапы Цикл
			
			НачалоТекущегоИнтервала = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(
												ТекущаяДатаСеанса, 
												ЭтапыСтрока.ИнтервалПланирования);
												
			// Определим статус выполнения этапа
			#Область СтатусыВыполненияЭтапа
			Для каждого РазмещениеЭтапаСтрока Из ЭтапыСтрока.РазмещениеЭтапа Цикл
				
				ДанныеОВыполненииЭтапа = ДанныеОВыполненииЭтапа(ЗаказОбъект.Ссылка, 
													ПродукцияСтрока.КодСтроки, 
													РазмещениеЭтапаСтрока.КодСтроки);
													
				РазмещениеЭтапаСтрока.ФактическоеНачало = ДанныеОВыполненииЭтапа.ФактическоеНачало;
				РазмещениеЭтапаСтрока.ФактическоеОкончание = ДанныеОВыполненииЭтапа.ФактическоеОкончание;
				РазмещениеЭтапаСтрока.ФактическоеНачалоРЦ = ДанныеОВыполненииЭтапа.ФактическоеНачалоРЦ;
				РазмещениеЭтапаСтрока.ФактическоеОкончаниеРЦ = ДанныеОВыполненииЭтапа.ФактическоеОкончаниеРЦ;
				
				ЭтапыСтрока.ФактическоеНачало = ?(ЭтапыСтрока.ФактическоеНачало <> '000101010000',
													Мин(ЭтапыСтрока.ФактическоеНачало, РазмещениеЭтапаСтрока.ФактическоеНачало),
													РазмещениеЭтапаСтрока.ФактическоеНачало);
													
				ЭтапыСтрока.ФактическоеОкончание = ?(ЭтапыСтрока.ФактическоеОкончание <> '000101010000',
													Мин(ЭтапыСтрока.ФактическоеОкончание, РазмещениеЭтапаСтрока.ФактическоеОкончание),
													РазмещениеЭтапаСтрока.ФактическоеОкончание);
				
				Если ДанныеОВыполненииЭтапа.ЗапланированоПроизводством <> 0
					ИЛИ ДанныеОВыполненииЭтапа.КВыполнению <> 0
					ИЛИ ДанныеОВыполненииЭтапа.Выполнено <> 0 Тогда
					
					РазмещениеЭтапаСтрока.ЕстьМаршрутныеЛисты = Истина;
					
				КонецЕсли;
				
				Если ДанныеОВыполненииЭтапа.КВыполнению <> 0
					ИЛИ ДанныеОВыполненииЭтапа.Выполнено <> 0 Тогда
					
					РазмещениеЭтапаСтрока.МаршрутныеЛистыПереданыКВыполнению = Истина;
					
				КонецЕсли;
				
				Если РазмещениеЭтапаСтрока.ЕстьМаршрутныеЛисты Тогда
					
					ЭтапыСтрока.ПринятКВыполнению = Истина;
					
				КонецЕсли;
				
				// Определим статус строки, если не отмечена ошибка (СтатусСтроки = 3)
				Если ПродукцияСтрока.СтатусСтроки <> 3 Тогда
					
					Если РазмещениеЭтапаСтрока.ТребуетсяПерепланировать Тогда
						
						ПродукцияСтрока.СтатусСтроки = 1;
						
					ИначеЕсли ПродукцияНоваяСтрока.СтатусСтроки <> 1 Тогда
						
						ПродукцияСтрока.СтатусСтроки = 2;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			#КонецОбласти
			
			// Заполнение загрузки исполнителей
			#Область ЗагрузкаИсполнителей
			
			Для каждого ИсполнителиЭтапаСтрока Из ЭтапыСтрока.Исполнители Цикл
				
				ТекущийЭтап = Новый Структура;
				ТекущийЭтап.Вставить("Заказ", ПродукцияСтрока.Заказ);
				ТекущийЭтап.Вставить("НомерВОчереди", ПродукцияСтрока.НомерВОчереди);
				ТекущийЭтап.Вставить("НомерСтрокиПродукция", ПродукцияСтрока.НомерСтроки);
				ТекущийЭтап.Вставить("КлючСвязиПродукция", ЭтапыСтрока.КлючСвязиПродукция);
				ТекущийЭтап.Вставить("КлючСвязиЭтапы", ЭтапыСтрока.КлючСвязи);
				
				ПараметрыИсполнителя = Новый Структура;
				ПараметрыИсполнителя.Вставить("Исполнитель", ИсполнителиЭтапаСтрока.Исполнитель);
				ПараметрыИсполнителя.Вставить("УчитыватьДоступностьПоГрафикуРаботы", ИсполнителиЭтапаСтрока.УчитыватьДоступностьПоГрафикуРаботы);
				ПараметрыИсполнителя.Вставить("ПроизводствоНаСтороне", ИсполнителиЭтапаСтрока.ПроизводствоНаСтороне);
				ПараметрыИсполнителя.Вставить("ГрафикРаботыПартнера", ИсполнителиЭтапаСтрока.ГрафикРаботыПартнера);
				
				Если ПолучатьЗагрузкуИсполнителей Тогда
				
					ЗаполнитьЗагрузку(ИсполнителиЭтапаСтрока.Загрузка, 
										ПараметрыИсполнителя, 
										НачалоНедели(ПродукцияСтрока.НачатьНеРанее),
										КонецНедели(?(ЭтапыСтрока.ОкончаниеЭтапа <> '000101010000', ЭтапыСтрока.ОкончаниеЭтапа, ПродукцияСтрока.ДатаПотребности)),
										ТекущийЭтап);
				
				КонецЕсли;
									
				Для каждого ИсполнителиЭтапаСтрокаЗагрузка Из ИсполнителиЭтапаСтрока.Загрузка Цикл
					
					Если (ИсполнителиЭтапаСтрокаЗагрузка.ЗанятостьПредыдущие + ИсполнителиЭтапаСтрокаЗагрузка.ЗанятостьТекущий > ИсполнителиЭтапаСтрокаЗагрузка.Свободно
						И ИсполнителиЭтапаСтрока.УчитыватьДоступностьПоГрафикуРаботы
						ИЛИ ИсполнителиЭтапаСтрокаЗагрузка.ЗанятостьТекущий > ИсполнителиЭтапаСтрокаЗагрузка.Свободно
						И НЕ ИсполнителиЭтапаСтрока.УчитыватьДоступностьПоГрафикуРаботы)
						И ИсполнителиЭтапаСтрока.ПланироватьРаботуВидовРабочихЦентров Тогда
						
						Для каждого ЭтапыСтрокаРазмещениеЭтапа Из ЭтапыСтрока.РазмещениеЭтапа Цикл
							
							Если ИсполнителиЭтапаСтрокаЗагрузка.ДатаИнтервала >= ЭтапыСтрокаРазмещениеЭтапа.НачалоЭтапа
								И ИсполнителиЭтапаСтрокаЗагрузка.ДатаИнтервала <= ЭтапыСтрокаРазмещениеЭтапа.ОкончаниеЭтапа Тогда
								
								ЭтапыСтрокаРазмещениеЭтапа.Перегружен = Истина;
								ЭтапыСтрокаРазмещениеЭтапа.ТребуетсяПерепланировать = Истина;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Заполнение загрузки альтернативных исполнителей
				Для каждого АльтернативныеИсполнителиЭтапаСтрока Из ИсполнителиЭтапаСтрока.АльтернативныеИсполнители Цикл
					
					ТекущийЭтап = Новый Структура;
					ТекущийЭтап.Вставить("Заказ", ПродукцияСтрока.Заказ);
					ТекущийЭтап.Вставить("НомерСтрокиПродукция", ПродукцияСтрока.НомерСтроки);
					ТекущийЭтап.Вставить("КлючСвязиПродукция", ЭтапыСтрока.КлючСвязиПродукция);
					ТекущийЭтап.Вставить("КлючСвязиЭтапы", ЭтапыСтрока.КлючСвязи);
					
					ПараметрыИсполнителя = Новый Структура;
					ПараметрыИсполнителя.Вставить("Исполнитель", АльтернативныеИсполнителиЭтапаСтрока.Исполнитель);
					ПараметрыИсполнителя.Вставить("УчитыватьДоступностьПоГрафикуРаботы", АльтернативныеИсполнителиЭтапаСтрока.УчитыватьДоступностьПоГрафикуРаботы);
					ПараметрыИсполнителя.Вставить("ПроизводствоНаСтороне", Ложь);
					ПараметрыИсполнителя.Вставить("ГрафикРаботыПартнера");
					
					Если ПолучатьЗагрузкуИсполнителей Тогда
						
						ЗаполнитьЗагрузку(АльтернативныеИсполнителиЭтапаСтрока.Загрузка, 
											ПараметрыИсполнителя, 
											НачалоНедели(ПродукцияСтрока.НачатьНеРанее), 
											КонецНедели(ЭтапыСтрока.ОкончаниеЭтапа), 
											ТекущийЭтап);
					
					КонецЕсли;
										
				КонецЦикла; 
				
			КонецЦикла;
			
			#КонецОбласти
			
			// Определим дату МожноНачатьНеРанее
			#Область МожноНачатьНеРанее
			
			Если ПродукцияСтрока.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан Тогда
				
				МожноНачатьНеРанее = ПродукцияСтрока.НачатьНеРанее;
				
				Для каждого ПредыдущийЭтап Из ПродукцияСтрока.Этапы Цикл
					
					Если ПредыдущийЭтап.НомерСледующегоЭтапа = ЭтапыСтрока.НомерЭтапа
						ИЛИ ПредыдущийЭтап.КлючСвязиЭтапы = ЭтапыСтрока.КлючСвязи Тогда
						
						МожноНачатьНеРанее = Макс(ПредыдущийЭтап.ОкончаниеЭтапа + 1, МожноНачатьНеРанее);
						
					КонецЕсли;
					
				КонецЦикла; 
				
				БуферВСекундах = ПолучитьВремяВСекундах(
										ЭтапыСтрока.ПредварительныйБуфер, 
										ЭтапыСтрока.ЕдиницаИзмеренияПредварительногоБуфера);
										
				МожноНачатьНеРанее = ПланированиеПроизводства.ДатаСУчетомБуфера(
											МожноНачатьНеРанее, 
											БуферВСекундах,
											ЭтапыСтрока.Подразделение, 
											ЭтапыСтрока.ЕдиницаИзмеренияПредварительногоБуфера);
											
				ЭтапыСтрока.МожноНачатьНеРанее = МожноНачатьНеРанее;
				
			КонецЕсли;
			
			#КонецОбласти
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Продукция;
	
КонецФункции

Функция ДобавитьИсполнителя(Исполнители, ВидыРабочихЦентровНайденнаяСтрока, КлючСвязиВидыРабочихЦентров, РеквизитыВидовРЦ, ТаблицаЗагрузки)

	ИсполнителиЭтапаНоваяСтрока = Исполнители.Добавить();
	
	ИсполнителиЭтапаНоваяСтрока.Исполнитель                          = ВидыРабочихЦентровНайденнаяСтрока.ВидРабочегоЦентра;
	ИсполнителиЭтапаНоваяСтрока.КлючСвязиВидыРабочихЦентров          = КлючСвязиВидыРабочихЦентров;
	ИсполнителиЭтапаНоваяСтрока.УчитыватьДоступностьПоГрафикуРаботы  = РеквизитыВидовРЦ[ВидыРабочихЦентровНайденнаяСтрока.ВидРабочегоЦентра].УчитыватьДоступностьПоГрафикуРаботы;
	ИсполнителиЭтапаНоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = Истина;
	ИсполнителиЭтапаНоваяСтрока.Использовать                         = ВидыРабочихЦентровНайденнаяСтрока.Использовать;
	ИсполнителиЭтапаНоваяСтрока.РезервДоступности                    = РеквизитыВидовРЦ[ВидыРабочихЦентровНайденнаяСтрока.ВидРабочегоЦентра].РезервДоступности;
	ИсполнителиЭтапаНоваяСтрока.Загрузка                             = ТаблицаЗагрузки.СкопироватьКолонки();
	ИсполнителиЭтапаНоваяСтрока.ВремяРаботы                          = ВидыРабочихЦентровНайденнаяСтрока.ВремяРаботы;
	ИсполнителиЭтапаНоваяСтрока.ЕдиницаИзмерения                     = ВидыРабочихЦентровНайденнаяСтрока.ЕдиницаИзмерения;
	
	Возврат ИсполнителиЭтапаНоваяСтрока;
	
КонецФункции

Процедура ВывестиДанныеОЗагрузкеВидаРЦВТабличныйДокумент(
					НачалоИнтервала, 
					ОкончаниеИнтервала, 
					Загрузка, 
					ОбластиДляВыводаДоступности,
					ИнтервалПланирования,
					ИсполнительЭтапа,
					ПланироватьРаботуВидовРабочихЦентров,
					ИмяОбластиДляВыводаДоступности,
					ТабличныйДокумент,
					ПрисоединитьПервыйПериод,
					ДополнительнаяРасшифровка = Неопределено,
					НачалоЭтапа = '000101010000', 
					ОкончаниеЭтапа = '000101010000',
					ЛеваяГраницаЭтапа = 0,
					ПраваяГраницаЭтапа = 0) Экспорт
					
	МакетОформления = Обработки.ДиспетчированиеГрафикаПроизводства.ПолучитьМакет("ДиагностикаГрафика");

	ОбластьИнтервалЗанятДиагностируемымЭтапом    = МакетОформления.ПолучитьОбласть("ИнтервалЗанятДиагностируемымЭтапом");
	ОбластьИнтервалЗанят                         = МакетОформления.ПолучитьОбласть("ИнтервалЗанят");
	ОбластьИнтервалНедоступен                    = МакетОформления.ПолучитьОбласть("ИнтервалНедоступен");
	ОбластьИнтервалДоступен                      = МакетОформления.ПолучитьОбласть("ИнтервалДоступен");
	ОбластьИнтервалЧастичноДоступен              = МакетОформления.ПолучитьОбласть("ИнтервалЧастичноДоступен");
	ОбластьИнтервалПерегружен                    = МакетОформления.ПолучитьОбласть("ИнтервалПерегружен");
	
	ТекущийИнтервал = НачалоИнтервала;
	
	Пока ТекущийИнтервал <= ОкончаниеИнтервала Цикл
		
		НайденнаяЗагрузка = Загрузка.НайтиСтроки(Новый Структура("ДатаИнтервала", ТекущийИнтервал));
		
		Если ТипЗнч(ИсполнительЭтапа.Исполнитель) = Тип("СправочникСсылка.ВидыРабочихЦентров") Тогда
			РасшифровкаЯчейки = Новый Структура;
			РасшифровкаЯчейки.Вставить("ВидОбласти", "ДанныеОЗагрузке");
			РасшифровкаЯчейки.Вставить("ДатаИнтервала", ТекущийИнтервал);
			РасшифровкаЯчейки.Вставить("Исполнитель", ИсполнительЭтапа.Исполнитель);
			Если ДополнительнаяРасшифровка <> Неопределено Тогда
				Для каждого КлючИЗначениеРасшифровки Из ДополнительнаяРасшифровка Цикл
					РасшифровкаЯчейки.Вставить(КлючИЗначениеРасшифровки.Ключ, КлючИЗначениеРасшифровки.Значение);
				КонецЦикла; 
			КонецЕсли; 
		Иначе
			РасшифровкаЯчейки = Неопределено;
		КонецЕсли;
		
		Если НайденнаяЗагрузка.Количество() <> 0 Тогда
			ДанныеОЗагрузке = НайденнаяЗагрузка[0];
		Иначе
			ДанныеОЗагрузке = Неопределено;
		КонецЕсли; 
		
		Если ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы 
			ИЛИ ДанныеОЗагрузке = Неопределено Тогда
			ОбластьИнтервалДанные = ОбластиДляВыводаДоступности.ИнтервалДанные;
			ИмяОбласти = ИмяОбластиДляВыводаДоступности;
		Иначе
			ОбластьИнтервалДанные = ОбластиДляВыводаДоступности.ИнтервалДанныеБезОграниченияДоступности;
			ИмяОбласти = ИмяОбластиДляВыводаДоступности + "БезОграниченияДоступности";
		КонецЕсли; 
		
		ОбластьИнтервалДанные.Параметры.РасшифровкаЯчейки = РасшифровкаЯчейки;
		
		СвободноТекст = "";
		ЗанятоПредыдущиеТекст = "";
		ЗанятоТекущийТекст = "";
		
		ОбластьЗагрузки = ОбластьИнтервалДанные.Области[ИмяОбласти];
		
		Если ДанныеОЗагрузке = Неопределено Тогда
			
			// недоступный интервал
			УстановитьОформлениеОбласти(ОбластьЗагрузки, ОбластьИнтервалНедоступен.Области.ИнтервалНедоступен);
			
		ИначеЕсли ДанныеОЗагрузке.ЗанятостьПредыдущие + ДанныеОЗагрузке.ЗанятостьТекущий > ДанныеОЗагрузке.Свободно
			И ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы Тогда
			
			
			// перегруженный интервал и доступность учитывается
			Если ПланироватьРаботуВидовРабочихЦентров Тогда
				СвободноТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(
									ДанныеОЗагрузке.Свободно
									- ДанныеОЗагрузке.ЗанятостьПредыдущие 
									- ДанныеОЗагрузке.ЗанятостьТекущий);
				
				Если ИсполнительЭтапа.РезервДоступности > 0 Тогда
					
					СвободноТекст = СвободноТекст + " (" + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(0) + ")";
					
				КонецЕсли;
				
				ЗанятоПредыдущиеТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеОЗагрузке.ЗанятостьПредыдущие);
				ЗанятоТекущийТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеОЗагрузке.ЗанятостьТекущий);
			КонецЕсли;
			
			УстановитьОформлениеОбласти(ОбластьЗагрузки, ОбластьИнтервалПерегружен.Области.ИнтервалПерегружен);
			
		ИначеЕсли ДанныеОЗагрузке.ЗанятостьТекущий > ДанныеОЗагрузке.Свободно
			И НЕ ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы Тогда
			
			// перегруженный интервал и доступность не учитывается
			
			Если ПланироватьРаботуВидовРабочихЦентров Тогда
				ЗанятоПредыдущиеТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеОЗагрузке.ЗанятостьПредыдущие);
				ЗанятоТекущийТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеОЗагрузке.ЗанятостьТекущий);
			КонецЕсли;
			
			УстановитьОформлениеОбласти(ОбластьЗагрузки, ОбластьИнтервалПерегружен.Области.ИнтервалПерегружен);
			
		ИначеЕсли ДанныеОЗагрузке.ЗанятостьТекущий > 0 Тогда
			
			// текущий этап
			Если ПланироватьРаботуВидовРабочихЦентров Тогда
				
				Если ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы Тогда
				
					Свободно = ДанныеОЗагрузке.Свободно - ДанныеОЗагрузке.ЗанятостьПредыдущие - ДанныеОЗагрузке.ЗанятостьТекущий;
					Резерв = Мин(ДанныеОЗагрузке.Свободно * ИсполнительЭтапа.РезервДоступности / 100, Свободно);
					СвободноТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(Свободно - Резерв);
					
					Если ИсполнительЭтапа.РезервДоступности > 0 Тогда
						
						СвободноТекст = СвободноТекст + " (" + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(Резерв) + ")";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗанятоПредыдущиеТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеОЗагрузке.ЗанятостьПредыдущие);
				ЗанятоТекущийТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеОЗагрузке.ЗанятостьТекущий);
				
			КонецЕсли;
			
			УстановитьОформлениеОбласти(ОбластьЗагрузки, ОбластьИнтервалЗанятДиагностируемымЭтапом.Области.ИнтервалЗанятДиагностируемымЭтапом);
			
		ИначеЕсли ДанныеОЗагрузке.ЗанятостьПредыдущие = ДанныеОЗагрузке.Свободно Тогда
			
			// Вывод полностью занятого интервала
			Если ПланироватьРаботуВидовРабочихЦентров Тогда
				Если ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы Тогда
				
					СвободноТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(0);
					
					Если ИсполнительЭтапа.РезервДоступности > 0 Тогда
						
						СвободноТекст = СвободноТекст + " (" + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(0) + ")";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗанятоПредыдущиеТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеОЗагрузке.ЗанятостьПредыдущие);
			КонецЕсли;
			
			Если ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы Тогда
				УстановитьОформлениеОбласти(ОбластьЗагрузки, ОбластьИнтервалЗанят.Области.ИнтервалЗанят);
			Иначе
				УстановитьОформлениеОбласти(ОбластьЗагрузки, ОбластьИнтервалДоступен.Области.ИнтервалДоступен);
			КонецЕсли;
			
		ИначеЕсли ДанныеОЗагрузке.ЗанятостьПредыдущие > 0 Тогда
			
			// Вывод частично занятого интервала
			Если ПланироватьРаботуВидовРабочихЦентров Тогда
				Если ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы Тогда
					
					Свободно = ДанныеОЗагрузке.Свободно - ДанныеОЗагрузке.ЗанятостьПредыдущие;
					Резерв = Мин(ДанныеОЗагрузке.Свободно * ИсполнительЭтапа.РезервДоступности / 100, Свободно);
					СвободноТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(Свободно - Резерв);
				
					Если ИсполнительЭтапа.РезервДоступности > 0 Тогда
						
						СвободноТекст = СвободноТекст + " (" + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(Резерв) + ")";
						
					КонецЕсли;
					
				КонецЕсли;
				ЗанятоПредыдущиеТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(ДанныеОЗагрузке.ЗанятостьПредыдущие);
			КонецЕсли;
			
			УстановитьОформлениеОбласти(ОбластьЗагрузки, ОбластьИнтервалЧастичноДоступен.Области.ИнтервалЧастичноДоступен);
			
		Иначе
			
			Если ПланироватьРаботуВидовРабочихЦентров Тогда
				Если ИсполнительЭтапа.УчитыватьДоступностьПоГрафикуРаботы Тогда
				
					Свободно = ДанныеОЗагрузке.Свободно;
					Резерв = Мин(ДанныеОЗагрузке.Свободно * ИсполнительЭтапа.РезервДоступности / 100, Свободно);
					СвободноТекст = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(Свободно - Резерв);
				
					Если ИсполнительЭтапа.РезервДоступности > 0 Тогда
						
						СвободноТекст = СвободноТекст + " (" + ПланированиеПроизводстваКлиентСервер.ПолучитьВремяСтрокой(Резерв) + ")";
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			УстановитьОформлениеОбласти(ОбластьЗагрузки, ОбластьИнтервалДоступен.Области.ИнтервалДоступен);
			
		КонецЕсли;
		
		ОбластьИнтервалДанные.Параметры.Заполнить(Новый Структура("Свободно,ЗанятоПредыдущие,ЗанятоТекущий", 
												 				СвободноТекст,ЗанятоПредыдущиеТекст, ЗанятоТекущийТекст));
		
		Если НЕ ПрисоединитьПервыйПериод И ТекущийИнтервал = НачалоИнтервала Тогда
			ДобавленнаяОбласть = ТабличныйДокумент.Вывести(ОбластьИнтервалДанные);
		Иначе
			ДобавленнаяОбласть = ТабличныйДокумент.Присоединить(ОбластьИнтервалДанные);
		КонецЕсли; 

		Если ДанныеОЗагрузке <> Неопределено И ДанныеОЗагрузке.ЗанятостьТекущий > 0 Тогда
			
			Если ЗначениеЗаполнено(НачалоЭтапа) Тогда
				
				НачалоЭтапа = Мин(НачалоЭтапа, ТекущийИнтервал);
				ЛеваяГраницаЭтапа = Мин(ЛеваяГраницаЭтапа, ДобавленнаяОбласть.Лево);
				
			Иначе
				
				ЛеваяГраницаЭтапа = ДобавленнаяОбласть.Лево;
				НачалоЭтапа = ТекущийИнтервал;
				
			КонецЕсли;
			
			ОкончаниеЭтапа = Макс(ОкончаниеЭтапа, ТекущийИнтервал);
			ПраваяГраницаЭтапа = Макс(ПраваяГраницаЭтапа, ДобавленнаяОбласть.Право);
			
		КонецЕсли;
		
		ТекущийИнтервал = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ТекущийИнтервал, ИнтервалПланирования) + 1;
		
		Если ТекущийИнтервал >= ОкончаниеИнтервала Тогда
			ДобавленнаяОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьТаблицуЭтапы()

	ТаблицаЭтапы = Новый ТаблицаЗначений;
	
	ТаблицаЭтапы.Колонки.Добавить("НомерЭтапа",                      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапы.Колонки.Добавить("НомерСледующегоЭтапа",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапы.Колонки.Добавить("Подразделение",                   Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаЭтапы.Колонки.Добавить("Спецификация",                    Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ТаблицаЭтапы.Колонки.Добавить("Этап",                            Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ТаблицаЭтапы.Колонки.Добавить("НаименованиеЭтапа",               Новый ОписаниеТипов("Строка"));
	ТаблицаЭтапы.Колонки.Добавить("НаименованиеПодразделения",       Новый ОписаниеТипов("Строка"));
	ТаблицаЭтапы.Колонки.Добавить("КлючСвязи",                       Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаЭтапы.Колонки.Добавить("КлючСвязиПродукция",              Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаЭтапы.Колонки.Добавить("КлючСвязиЭтапы",                  Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаЭтапы.Колонки.Добавить("КлючСвязиЭтапыБрак",              Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаЭтапы.Колонки.Добавить("ИнтервалПланирования",            Новый ОписаниеТипов("ПеречислениеСсылка.ТочностьГрафикаПроизводства"));
	ТаблицаЭтапы.Колонки.Добавить("НачалоИнтервалаПланирования",     Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЭтапы.Колонки.Добавить("ОкончаниеИнтервалаПланирования",  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЭтапы.Колонки.Добавить("ГрафикРаботы",                    Новый ОписаниеТипов("СправочникСсылка.Календари"));
	ТаблицаЭтапы.Колонки.Добавить("Количество",                      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапы.Колонки.Добавить("ОдновременноПроизводимое",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапы.Колонки.Добавить("НачалоЭтапа",                     Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЭтапы.Колонки.Добавить("ОкончаниеЭтапа",                  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЭтапы.Колонки.Добавить("НачалоРаботыИсполнителей",        Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЭтапы.Колонки.Добавить("ОкончаниеРаботыИсполнителей",     Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЭтапы.Колонки.Добавить("МожноНачатьНеРанее",              Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЭтапы.Колонки.Добавить("ПредварительныйБуфер",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 1)));
	ТаблицаЭтапы.Колонки.Добавить("Исполнители",                     Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаЭтапы.Колонки.Добавить("РазмещениеЭтапа",                 Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаЭтапы.Колонки.Добавить("Материалы",                       Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаЭтапы.Колонки.Добавить("ПринятКВыполнению",               Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапы.Колонки.Добавить("ЭтапВосстановленияБрака",         Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапы.Колонки.Добавить("ФактическоеНачало",               Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЭтапы.Колонки.Добавить("ФактическоеОкончание",            Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	ТаблицаЭтапы.Колонки.Добавить("ЕдиницаИзмеренияПредварительногоБуфера", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	ТаблицаЭтапы.Колонки.Добавить("ПланироватьРаботуВидовРабочихЦентров", Новый ОписаниеТипов("Булево"));
	ТаблицаЭтапы.Колонки.Добавить("ДлительностьЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	// Заполняются для этапов, которые относятся к производимым в процессе ПФ
	ТаблицаЭтапы.Колонки.Добавить("КлючСвязиПолуфабрикат", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Возврат ТаблицаЭтапы;
	
КонецФункции

Функция СоздатьТаблицуИсполнители()

	ТаблицаИсполнители = Новый ТаблицаЗначений;
	ТаблицаИсполнители.Колонки.Добавить("Исполнитель",                          Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия, СправочникСсылка.ВидыРабочихЦентров"));
	ТаблицаИсполнители.Колонки.Добавить("КлючСвязиВидыРабочихЦентров",          Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаИсполнители.Колонки.Добавить("ПланироватьРаботуВидовРабочихЦентров", Новый ОписаниеТипов("Булево"));
	ТаблицаИсполнители.Колонки.Добавить("Использовать",                         Новый ОписаниеТипов("Булево"));
	ТаблицаИсполнители.Колонки.Добавить("УчитыватьДоступностьПоГрафикуРаботы",  Новый ОписаниеТипов("Булево"));
	ТаблицаИсполнители.Колонки.Добавить("ВремяРаботы",                          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаИсполнители.Колонки.Добавить("ЕдиницаИзмерения",                     Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	ТаблицаИсполнители.Колонки.Добавить("РезервДоступности",                    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаИсполнители.Колонки.Добавить("Загрузка",                             Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаИсполнители.Колонки.Добавить("АльтернативныеИсполнители",            Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ТаблицаИсполнители.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
	ТаблицаИсполнители.Колонки.Добавить("ГрафикРаботыПартнера",  Новый ОписаниеТипов("СправочникСсылка.Календари"));
	
	Возврат ТаблицаИсполнители;
	
КонецФункции

Функция СоздатьТаблицуРазмещениеЭтапа()
	
	ТаблицаРазмещениеЭтапа = Новый ТаблицаЗначений;
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("НачалоЭтапа",                  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ОкончаниеЭтапа",               Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ИдентификаторИнтервала",       Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("Количество",                   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ТребуетсяПерепланировать",     Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("НачалоПредварительногоБуфера", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ОкончаниеЗавершающегоБуфера",  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("Перегружен",                   Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ЕстьМаршрутныеЛисты",          Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("КодСтроки",                    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("МаршрутныеЛистыПереданыКВыполнению", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ФактическоеНачало",            Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ФактическоеОкончание",         Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ФактическоеНачалоРЦ",          Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРазмещениеЭтапа.Колонки.Добавить("ФактическоеОкончаниеРЦ",       Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Возврат ТаблицаРазмещениеЭтапа;
	
КонецФункции

Функция СоздатьТаблицуМатериалы()

	ТаблицаМатериалы = Новый ТаблицаЗначений;
	
	ТаблицаМатериалы.Колонки.Добавить("Номенклатура",    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалы.Колонки.Добавить("Характеристика",  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалы.Колонки.Добавить("Склад",           Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалы.Колонки.Добавить("ДатаПотребности", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаМатериалы.Колонки.Добавить("Количество",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаМатериалы.Колонки.Добавить("Потребность", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	// Заполняются для производимых в процессе ПФ
	ТаблицаМатериалы.Колонки.Добавить("ПроизводитсяВПроцессе", Новый ОписаниеТипов("Булево"));
	ТаблицаМатериалы.Колонки.Добавить("КлючСвязиПолуфабрикат", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Возврат ТаблицаМатериалы;
	
КонецФункции

Функция СоздатьТаблицуПотребность()

	ТаблицаПотребность = Новый ТаблицаЗначений;
	ТаблицаПотребность.Колонки.Добавить("ДатаПотребности", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПотребность.Колонки.Добавить("Количество",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));

	Возврат ТаблицаПотребность;
	
КонецФункции

Функция СоздатьТаблицуЗагрузки() Экспорт

	ТаблицаЗагрузка = Новый ТаблицаЗначений; 
	ТаблицаЗагрузка.Колонки.Добавить("ДатаИнтервала",        Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗагрузка.Колонки.Добавить("ЗанятостьПредыдущие",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 1, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗагрузка.Колонки.Добавить("ЗанятостьТекущий",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 1, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗагрузка.Колонки.Добавить("ЗанятостьПоследующие", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 1, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗагрузка.Колонки.Добавить("Свободно",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 1, ДопустимыйЗнак.Неотрицательный)));

	Возврат ТаблицаЗагрузка;
	
КонецФункции

Процедура ЗаполнитьЗагрузку(Загрузка, ПараметрыИсполнителя, НачалоПериода, ОкончаниеПериода, ТекущийЭтап = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТДоступность.ДатаИнтервала КАК ДатаИнтервала,
	|	0 КАК ЗанятостьПредыдущие,
	|	0 КАК ЗанятостьТекущий,
	|	0 КАК ЗанятостьПоследующие,
	|	ВЫБОР
	|		КОГДА ТДоступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|			ТОГДА ТДоступность.ДоступностьПоВидуРЦ
	|		ИНАЧЕ ТДоступность.ДоступностьПоРЦ
	|	КОНЕЦ КАК Свободно
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ТДоступность
	|ГДЕ
	|	ТДоступность.ДатаИнтервала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ТДоступность.ВидРабочегоЦентра = &Исполнитель
	|	И ТДоступность.Активность
	|	И ТДоступность.ЭтоДвижениеВводаДоступности
	|	И &УчитыватьДоступностьПоГрафикуРаботы
	|	И &ПланироватьРаботуВидовРабочихЦентров
	|	И ВЫБОР
	|			КОГДА ТДоступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|				ТОГДА ТДоступность.ДоступностьПоВидуРЦ
	|			ИНАЧЕ ТДоступность.ДоступностьПоРЦ
	|		КОНЕЦ > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР ТВидыРЦ.Подразделение.ИнтервалПланирования
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР ТВидыРЦ.ЕдиницаИзмеренияДоступностиРЦ
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ТВидыРЦ.МаксимальнаяДоступностьРЦ * 60
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ТВидыРЦ.МаксимальнаяДоступностьРЦ * 3600
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ТВидыРЦ.МаксимальнаяДоступностьРЦ * 86400
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ТВидыРЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК ГрафикПодразделения
	|		ПО ТВидыРЦ.Подразделение = ГрафикПодразделения.Ссылка
	|			И ГрафикПодразделения.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО (ВЫБОР
	|				КОГДА ТВидыРЦ.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|					ТОГДА КалендарныеГрафики.Календарь = ТВидыРЦ.Календарь
	|				ИНАЧЕ КалендарныеГрафики.Календарь = ЕСТЬNULL(ГрафикПодразделения.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
	|			КОНЕЦ)
	|			И (КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|			И (КалендарныеГрафики.ДеньВключенВГрафик)
	|ГДЕ
	|	ТВидыРЦ.Ссылка = &Исполнитель
	|	И &ПланироватьРаботуВидовРабочихЦентров
	|	И НЕ &УчитыватьДоступностьПоГрафикуРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ),
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаЭтапыГрафик.Ссылка ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 86400
	|	КОНЕЦ,
	|	0,
	|	86400
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК ТПодразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК ГрафикПодразделения
	|		ПО ТПодразделение.Ссылка = ГрафикПодразделения.Ссылка
	|			И ГрафикПодразделения.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО	(ВЫБОР
	|				КОГДА &ПроизводствоНаСтороне
	|						И &ГрафикРаботыПартнера <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|					ТОГДА КалендарныеГрафики.Календарь = &ГрафикРаботыПартнера
	|				ИНАЧЕ КалендарныеГрафики.Календарь = ЕСТЬNULL(ГрафикПодразделения.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
	|			КОНЕЦ)
	|			И (КалендарныеГрафики.ДатаГрафика МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|			И (КалендарныеГрафики.ДеньВключенВГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = &Заказ)
	|			И (ТаблицаЭтапыГрафик.КлючСвязиЭтапы = &КлючСвязиЭтапы)
	|			И (ТаблицаЭтапыГрафик.КлючСвязиПродукция = &КлючСвязиПродукция)
	|			И (КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(ТаблицаЭтапыГрафик.НачалоЭтапа, ДЕНЬ) И КОНЕЦПЕРИОДА(ТаблицаЭтапыГрафик.ОкончаниеЭтапа, ДЕНЬ))
	|ГДЕ
	|	ТПодразделение.Ссылка = &Исполнитель
	|	И НЕ &ПланироватьРаботуВидовРабочихЦентров
	|	И НЕ &УчитыватьДоступностьПоГрафикуРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТДоступность.ДатаИнтервала,
	|	ВЫБОР
	|		КОГДА ТДоступность.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|				И (ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания < &ПриоритетНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания < &ПодразделениеНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания = &ПодразделениеНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Очередь < &НомерВОчереди
	|					ИЛИ &Заказ = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|			ТОГДА ТДоступность.Занято
	|		КОГДА ТДоступность.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|				И (ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Приоритет.РеквизитДопУпорядочивания < &ПриоритетНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Подразделение.РеквизитДопУпорядочивания < &ПодразделениеНомер)
	|			ТОГДА ТДоступность.Занято
	|		КОГДА ТДоступность.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|				И (ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания < &ПриоритетНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания < &ПодразделениеНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания = &ПодразделениеНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Очередь < &НомерВОчереди
	|					ИЛИ &Заказ = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка))
	|			ТОГДА ТДоступность.Занято
	|		КОГДА (1, 1) В
	|					(ВЫБРАТЬ
	|						1,
	|						1
	|					ИЗ
	|						РегистрНакопления.ЭтапыПроизводства.Обороты КАК ТЭтапыОбороты
	|					ГДЕ
	|						ТЭтапыОбороты.Распоряжение = ТДоступность.Регистратор
	|						И ТЭтапыОбороты.КодСтрокиПродукция = ТДоступность.КодСтрокиПродукция
	|						И ТЭтапыОбороты.КодСтрокиЭтапыГрафик = ТДоступность.КодСтрокиЭтапыГрафик
	|						И ТЭтапыОбороты.ЗапланированоЗаказомОборот > ТЭтапыОбороты.ЗапланированоПроизводствомОборот + ТЭтапыОбороты.КВыполнениюОборот + ТЭтапыОбороты.ВыполненоОборот + ТЭтапыОбороты.БракОборот)
	|				ИЛИ &Заказ = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА &Заказ = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|						ТОГДА ТДоступность.Занято
	|					ИНАЧЕ ТДоступность.Занято * (ЕСТЬNULL(ТЭтапыОбороты.ЗапланированоПроизводствомОборот, 0) + ЕСТЬNULL(ТЭтапыОбороты.КВыполнениюОборот, 0) + ЕСТЬNULL(ТЭтапыОбороты.ВыполненоОборот, 0) + ЕСТЬNULL(ТЭтапыОбороты.БракОборот, 0)) / ЕСТЬNULL(ТЭтапыОбороты.ЗапланированоЗаказомОборот, 1)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТДоступность.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|				И (ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания < &ПриоритетНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания < &ПодразделениеНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания = &ПодразделениеНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЗаказНаПроизводство).Очередь < &НомерВОчереди)
	|				И &Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ТДоступность.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|				И (ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Приоритет.РеквизитДопУпорядочивания < &ПриоритетНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение.Подразделение.РеквизитДопУпорядочивания < &ПодразделениеНомер)
	|			ТОГДА 0
	|		КОГДА ТДоступность.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|				И (ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания < &ПриоритетНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания < &ПодразделениеНомер
	|					ИЛИ ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания = &ПодразделениеНомер
	|						И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Очередь < &НомерВОчереди)
	|				И &Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ТДоступность.Занято
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ТДоступность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства.Обороты КАК ТЭтапыОбороты
	|		ПО (ТДоступность.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					И ТЭтапыОбороты.Распоряжение = ТДоступность.Регистратор
	|				ИЛИ ТДоступность.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					И ТЭтапыОбороты.Распоряжение = ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение)
	|			И (ТЭтапыОбороты.КодСтрокиПродукция = ТДоступность.КодСтрокиПродукция)
	|			И (ТЭтапыОбороты.КодСтрокиЭтапыГрафик = ТДоступность.КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	ТДоступность.ДатаИнтервала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И (ТДоступность.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|				И ТДоступность.Регистратор <> &Заказ
	|			ИЛИ ТДоступность.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|				И ВЫРАЗИТЬ(ТДоступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение <> &Заказ
	|			ИЛИ ТДоступность.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2)
	|	И ТДоступность.ВидРабочегоЦентра = &Исполнитель
	|	И ТДоступность.Активность
	|	И НЕ ТДоступность.ЭтоДвижениеВводаДоступности
	|	И &УчитыватьДоступностьПоГрафикуРаботы
	|	И &ПланироватьРаботуВидовРабочихЦентров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗанятостьВидовРабочихЦентров.ДатаИнтервала,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.НомерСтроки < &НомерСтрокиПродукция
	|				ИЛИ ТаблицаПродукция.НомерСтроки = &НомерСтрокиПродукция
	|					И ТаблицаЭтапыГрафик.КлючСвязиЭтапы <> &КлючСвязиЭтапы
	|			ТОГДА ТаблицаЗанятостьВидовРабочихЦентров.Занято
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.КлючСвязи = &КлючСвязиПродукция
	|				И ТаблицаЭтапыГрафик.КлючСвязиЭтапы = &КлючСвязиЭтапы
	|			ТОГДА ТаблицаЗанятостьВидовРабочихЦентров.Занято
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.НомерСтроки > &НомерСтрокиПродукция
	|			ТОГДА ТаблицаЗанятостьВидовРабочихЦентров.Занято
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ТаблицаЗанятостьВидовРабочихЦентров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					И ТаблицаПродукция.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Регистратор
	|				ИЛИ ТаблицаЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					И ТаблицаПродукция.Ссылка = ВЫРАЗИТЬ(ТаблицаЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение)
	|			И (ТаблицаПродукция.КодСтроки = ТаблицаЗанятостьВидовРабочихЦентров.КодСтрокиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					И ТаблицаЭтапыГрафик.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Регистратор
	|				ИЛИ ТаблицаЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					И ТаблицаЭтапыГрафик.Ссылка = ВЫРАЗИТЬ(ТаблицаЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение)
	|			И (ТаблицаЭтапыГрафик.КодСтроки = ТаблицаЗанятостьВидовРабочихЦентров.КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	ТаблицаЗанятостьВидовРабочихЦентров.ДатаИнтервала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И (ТаблицаЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|				И ТаблицаЗанятостьВидовРабочихЦентров.Регистратор = &Заказ
	|			ИЛИ ТаблицаЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|				И ВЫРАЗИТЬ(ТаблицаЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение = &Заказ)
	|	И ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра = &Исполнитель
	|	И &ПланироватьРаботуВидовРабочихЦентров");
	
	ПланироватьРаботуВидовРабочихЦентров = (ТипЗнч(ПараметрыИсполнителя.Исполнитель) = Тип("СправочникСсылка.ВидыРабочихЦентров"));
	
	Запрос.УстановитьПараметр("НачалоПериода",                        НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода",                     ОкончаниеПериода);
	Запрос.УстановитьПараметр("Исполнитель",                          ПараметрыИсполнителя.Исполнитель);
	Запрос.УстановитьПараметр("УчитыватьДоступностьПоГрафикуРаботы",  ПараметрыИсполнителя.УчитыватьДоступностьПоГрафикуРаботы);
	Запрос.УстановитьПараметр("ПланироватьРаботуВидовРабочихЦентров", ПланироватьРаботуВидовРабочихЦентров);
	
	Запрос.УстановитьПараметр("ПроизводствоНаСтороне", ПараметрыИсполнителя.ПроизводствоНаСтороне);
	Запрос.УстановитьПараметр("ГрафикРаботыПартнера",  ПараметрыИсполнителя.ГрафикРаботыПартнера);
	
	Если ТекущийЭтап <> Неопределено Тогда
		// Нужно учесть загрузку по этапам, которые выше по приоритету чем текущий этап
		НомерВОчереди = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЭтап.Заказ, "Очередь");
		ПриоритетНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЭтап.Заказ, "Приоритет"), "РеквизитДопУпорядочивания");
		ПодразделениеНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЭтап.Заказ, "Подразделение"), "РеквизитДопУпорядочивания");
		Запрос.УстановитьПараметр("Заказ",                ТекущийЭтап.Заказ);
		Запрос.УстановитьПараметр("НомерВОчереди",        НомерВОчереди);
		Запрос.УстановитьПараметр("ПриоритетНомер",       ПриоритетНомер);
		Запрос.УстановитьПараметр("ПодразделениеНомер",   ПодразделениеНомер);
		Запрос.УстановитьПараметр("НомерСтрокиПродукция", ТекущийЭтап.НомерСтрокиПродукция);
		Запрос.УстановитьПараметр("КлючСвязиПродукция",   ТекущийЭтап.КлючСвязиПродукция);
		Запрос.УстановитьПараметр("КлючСвязиЭтапы",       ТекущийЭтап.КлючСвязиЭтапы);
	Иначе
		ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		Запрос.УстановитьПараметр("Заказ",                Документы.ЗаказНаПроизводство.ПустаяСсылка());
		Запрос.УстановитьПараметр("НомерВОчереди",        0);
		Запрос.УстановитьПараметр("ПриоритетНомер",       0);
		Запрос.УстановитьПараметр("ПодразделениеНомер",   0);
		Запрос.УстановитьПараметр("НомерСтрокиПродукция", 0);
		Запрос.УстановитьПараметр("КлючСвязиПродукция",   ПустойКлюч);
		Запрос.УстановитьПараметр("КлючСвязиЭтапы",       ПустойКлюч);
	КонецЕсли; 
	
	ТаблицаЗагрузка = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗагрузка.Свернуть("ДатаИнтервала", "ЗанятостьПредыдущие, ЗанятостьТекущий, ЗанятостьПоследующие, Свободно");
	ТаблицаЗагрузка.Сортировать("ДатаИнтервала Возр", Новый СравнениеЗначений);
	
	Для каждого ЭлементКоллекции Из ТаблицаЗагрузка Цикл
		ЗаполнитьЗначенияСвойств(Загрузка.Добавить(), ЭлементКоллекции);
	КонецЦикла; 
	
КонецПроцедуры

Функция ДанныеОВыполненииЭтапа(Распоряжение, КодСтрокиПродукция, КодСтрокиЭтапыГрафик)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗапланированоПроизводством", 0);
	Результат.Вставить("КВыполнению", 0);
	Результат.Вставить("Выполнено", 0);
	Результат.Вставить("Брак", 0);
	Результат.Вставить("ФактическоеНачало", '000101010000');
	Результат.Вставить("ФактическоеОкончание", '000101010000');
	Результат.Вставить("ФактическоеНачалоРЦ", '000101010000');
	Результат.Вставить("ФактическоеОкончаниеРЦ", '000101010000');
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот  КАК ЗапланированоПроизводством,
	|	ЭтапыПроизводстваОбороты.КВыполнениюОборот                 КАК КВыполнению,
	|	ЭтапыПроизводстваОбороты.ВыполненоОборот                   КАК Выполнено,
	|	ЭтапыПроизводстваОбороты.БракОборот                        КАК Брак,
	|	МИНИМУМ(ЕСТЬNULL(МаршрутныйЛистПроизводства.ФактическоеНачало, ДАТАВРЕМЯ(1,1,1)))      КАК ФактическоеНачало,
	|	МАКСИМУМ(ЕСТЬNULL(МаршрутныйЛистПроизводства.ФактическоеОкончание, ДАТАВРЕМЯ(1,1,1)))  КАК ФактическоеОкончание,
	|	МИНИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(МаршрутныйЛистПроизводства.ПланироватьРаботуВидовРабочихЦентров, ЛОЖЬ) = ИСТИНА
	|						И ЕСТЬNULL(МаршрутныйЛистПроизводства.ДатаВыполненияРаботВПредварительномБуфере, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1)
	|					ТОГДА МаршрутныйЛистПроизводства.ДатаВыполненияРаботВПредварительномБуфере
	|				ИНАЧЕ ЕСТЬNULL(МаршрутныйЛистПроизводства.ФактическоеНачало, ДАТАВРЕМЯ(1,1,1))
	|			КОНЕЦ) КАК ФактическоеНачалоРЦ,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(МаршрутныйЛистПроизводства.ПланироватьРаботуВидовРабочихЦентров, ЛОЖЬ) = ИСТИНА
	|						И ЕСТЬNULL(МаршрутныйЛистПроизводства.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1)
	|					ТОГДА МаршрутныйЛистПроизводства.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра
	|				ИНАЧЕ ЕСТЬNULL(МаршрутныйЛистПроизводства.ФактическоеОкончание, ДАТАВРЕМЯ(1,1,1))
	|			КОНЕЦ) КАК ФактическоеОкончаниеРЦ
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(
	|			,
	|			,
	|			,
	|			Распоряжение = &Распоряжение
	|				И КодСтрокиПродукция = &КодСтрокиПродукция
	|				И КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик) КАК ЭтапыПроизводстваОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Распоряжение = &Распоряжение)
	|			И (МаршрутныйЛистПроизводства.КодСтроки = &КодСтрокиПродукция)
	|			И (МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик)
	|			И (МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|			И (МаршрутныйЛистПроизводства.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот,
	|	ЭтапыПроизводстваОбороты.КВыполнениюОборот,
	|	ЭтапыПроизводстваОбороты.ВыполненоОборот,
	|	ЭтапыПроизводстваОбороты.БракОборот");
	
	Запрос.УстановитьПараметр("Распоряжение",         Распоряжение);
	Запрос.УстановитьПараметр("КодСтрокиПродукция",   КодСтрокиПродукция);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", КодСтрокиЭтапыГрафик);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОформлениеОбласти(Приемник, Источник)
	
	Приемник.ЦветФона   = Источник.ЦветФона;
	Приемник.ЦветТекста = Источник.ЦветТекста;
	Приемник.ЦветУзора  = Источник.ЦветУзора;
	Приемник.Узор       = Источник.Узор;
	
КонецПроцедуры

Функция ТаблицаСостоянийЭтапов() Экспорт
	
	//              Коды и описания состояний                  Проблемный   Активный   Выполненный
	// 0  - Выполнен                                                                          1     
	// 3  - Требуется отработать брак                                1           1                  
	// 4  - Не создан маршрутный лист, требуется перепланировать     1           1                  
	// 5  - Не создан маршрутный лист                                1           1                  
	// 6  - Ожидается создание маршрутного листа                                 1                  
	// 7  - Маршрутный лист создан, не выполняется                               1                  
	// 8  - Ожидается результат выполнения                           1           1                  
	// 9  -                                                                      1                  
	// 10 - Не создан заказ                                          1           1                  
	// 11 - Заказ создан, не выполняется                                         1                  
	// 12 - Ожидается результат выполнения                           1           1                  
	// 13 - Выполнен                                                                          1.
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("КодСостояния",   Новый ОписаниеТипов("Число"));
	ТаблицаСостояний.Колонки.Добавить("ТекстСостояния", Новый ОписаниеТипов("Строка"));
	ТаблицаСостояний.Колонки.Добавить("Проблемный",     Новый ОписаниеТипов("Булево"));
	ТаблицаСостояний.Колонки.Добавить("Активный",       Новый ОписаниеТипов("Булево"));
	ТаблицаСостояний.Колонки.Добавить("Выполненный",    Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 0;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Выполнен';
										|en = 'Completed'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Ложь;
	НоваяСтрока.Выполненный    = Истина;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 3;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Требуется отработать брак';
										|en = 'It is required to eliminate defect'");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;

	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 4;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Не создан маршрутный лист, требуется перепланировать';
										|en = 'Route sheet is not created, replanning is required '");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 5;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Не создан маршрутный лист';
										|en = 'Route sheet is not created'");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 6;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Ожидается создание маршрутного листа';
										|en = 'Rout sheet creation is expected'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 7;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Маршрутный лист создан, не выполняется';
										|en = 'Route sheet is created, on hold'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 8;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Ожидается результат выполнения';
										|en = 'Awaiting execution result'");
	НоваяСтрока.Проблемный     = Истина;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 9;
	НоваяСтрока.ТекстСостояния = "";
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 10;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Не создан заказ';
										|en = 'Order is not created'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 11;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Заказ создан, не выполняется';
										|en = 'Order is created, not fulfilled'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 12;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Ожидается результат выполнения';
										|en = 'Awaiting execution result'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	НоваяСтрока = ТаблицаСостояний.Добавить();
	НоваяСтрока.КодСостояния   = 13;
	НоваяСтрока.ТекстСостояния = НСтр("ru = 'Выполнен';
										|en = 'Completed'");
	НоваяСтрока.Проблемный     = Ложь;
	НоваяСтрока.Активный       = Истина;
	НоваяСтрока.Выполненный    = Ложь;
	
	Возврат ТаблицаСостояний;
	
КонецФункции

Функция ПолучитьВремяВСекундах(Время, ЕдиницаИзмеренияВремени)
	
	Если Время = 0 Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Сутки
		ИЛИ ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.День Тогда
		
		ВремяВСекундах = Время * 86400; // 60 * 60 * 24
		
	ИначеЕсли ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Минута Тогда
		
		ВремяВСекундах = Время * 60;
		
	ИначеЕсли ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
		
		ВремяВСекундах = Время * 3600; //60 * 60;
		
	ИначеЕсли ЕдиницаИзмеренияВремени = Перечисления.ЕдиницыИзмеренияВремени.Секунда Тогда
		
		ВремяВСекундах = Время;
		
	Иначе
		
		ВремяВСекундах = 0;
		
	КонецЕсли;

	Возврат ВремяВСекундах;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21
