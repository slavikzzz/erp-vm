
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	
	ПравоДоступаУкомплектованность = ПравоДоступа("Использование", Метаданные.Отчеты.УкомплектованностьЗаказов);
	ПравоДоступаСостояниеОбеспечения = ПравоДоступа("Использование", Метаданные.Обработки.СостояниеОбеспеченияЗаказов);
	
	#Область МобильныйКлиент
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Если ЭтоМобильныйКлиент Тогда
		Состояния = Новый СписокЗначений();
		Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.Начат"));
		Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.МожноВыполнять"));
		ОтборСостояние = Состояния;
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтборыСтрока", Новый ОписаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтборЗаказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтборИзделие", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтборПартия", Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтборЭтап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2")));
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		СбросОтборов        = Команды.Добавить("СбросОтборов");
		Отгрузить           = Команды.Добавить("Отгрузить");
		СканироватьШтрихКод = Команды.Добавить("СканироватьШтрихКод");
		
		СбросОтборов.Действие = "СбросОтборов";
		СбросОтборов.Картинка = БиблиотекаКартинок.Очистить;
		
		Отгрузить.Действие = "Отгрузить";
		
		СканироватьШтрихКод.Действие = "СканироватьШтрихКод";
		СканироватьШтрихКод.Картинка = БиблиотекаКартинок["Штрихкод"];
		
	КонецЕсли;
	
	#КонецОбласти
	
	НастроитьСписок();
	
	#Область УниверсальныеМеханизмы
	
	// ПодключаемоеОборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = Список.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокТипов;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
	НастроитьЭлементыФормы();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	НастроитьАвтоматическоеОбновлениеПараметровСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	УстановитьОтборПоПериоду(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСостояниеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеЗначения", ОтборСостояние);
	
	ОткрытьФорму("Обработка.ВыполнениеЭтаповПроизводства.Форма.ОтборСостояния",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбеспечениеПриИзменении(Элемент)
	
	УстановитьОтборПоОбеспечению(ЭтотОбъект);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Поле.Имя = "ОжидаетсяОбеспечение" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.СостояниеОбеспечения = ПредопределенноеЗначение("Перечисление.СостоянияОбеспеченияЭтапаПроизводства.ОжидаетсяОбеспечение") Тогда
			
			Если ТекущиеДанные.ДинамическаяСтруктура
				И ПравоДоступаУкомплектованность Тогда
				ОткрытьУкомплектованность(ВыбраннаяСтрока);
			ИначеЕсли Не ТекущиеДанные.ДинамическаяСтруктура
				И ПравоДоступаСостояниеОбеспечения Тогда
				ОткрытьСостояниеОбеспечения(ВыбраннаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "КодСостоянияОпераций" Тогда
		
		Если Не ТекущиеДанные.СостояниеОпераций.Пустая()
			И Не ТекущиеДанные.ТребуетсяЗаполнитьПоОперациям Тогда
			
			СтандартнаяОбработка = Ложь;
			
			УправлениеПроизводствомКлиент.РасшифроватьСостояниеОперацийЭтапа(
				ТекущиеДанные.Ссылка,
				ТекущиеДанные.СостояниеОпераций,
				ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыОбеспечения");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыОбеспечения", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметитьНачалоВыполнения(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы(); 
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияИзВыделенныхСтрок = Новый Структура("Подразделение,Организация");
	
	МассивСсылок = ЭтапыДляИзмененияСтатуса("Начат", ВыделенныеСтроки, ЗначенияИзВыделенныхСтрок);
	
	Если МассивСсылок.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", МассивСсылок);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьНачалоВыполненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Подразделение", ЗначенияИзВыделенныхСтрок.Подразделение);
		ПараметрыФормы.Вставить("Организация", ЗначенияИзВыделенныхСтрок.Организация);
		ОткрытьФорму(
			"Документ.ЭтапПроизводства2_2.Форма.ПараметрыУстановкиСтатуса",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не требуется изменять статус выбранных этапов.';
									|en = 'Do not change status of the selected stages.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьНачалоВыполненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Начат", РезультатВопроса);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru = 'Начат';
																																					|en = 'Started'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыполненным(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭтапыДляИзмененияСтатуса("Завершен", ВыделенныеСтроки);
	
	Если МассивСсылок.Количество() > 0 Тогда
		
		СписокЗаказов = Новый СписокЗначений;
		СписокЗаказов.ЗагрузитьЗначения(ВыделенныеСтроки);
		
		СтруктураЗакрытия = Новый Структура;
		СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказов);
		СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
		СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
		
		ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
						ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не требуется изменять статус выбранных этапов.';
									|en = 'Do not change status of the selected stages.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВыработкуСотрудников(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭтапыДляОформленияВыработки(ВыделенныеСтроки);
	Если МассивСсылок.Количество() > 0 Тогда
		ОперативныйУчетПроизводстваКлиент.ОформитьВыработкуСотрудниковПоРаспоряжениям(МассивСсылок);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не требуется оформлять выработку сотрудников для выбранных этапов.';
									|en = 'It is not required to register timesheets charge for the selected stages.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций(Команда)
	
	ВыбранныеСтроки = ВыбранныеЭтапы();
	
	Если ВыбранныеСтроки.Количество() > 0 Тогда
		УправлениеПроизводствомКлиент.ОткрытьВыполнениеОпераций(ВыбранныеСтроки, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УкомплектованностьЭтапа(Команда)
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУкомплектованность(Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

#Если МобильныйКлиент Тогда

&НаКлиенте
Процедура Отгрузить(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_ОТГРУЗИТЬ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтборыСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ОтборСостояние",ОтборСостояние);
	ПараметрыФормы.Вставить("ОтборОбеспечение",ОтборОбеспечение);
	ПараметрыФормы.Вставить("Подразделение",ОтборПодразделение);
	ПараметрыФормы.Вставить("Заказ", ЭтаФорма["ОтборЗаказ"]);
	ПараметрыФормы.Вставить("Изделие", ЭтаФорма["ОтборИзделие"]);
	ПараметрыФормы.Вставить("Партия", ЭтаФорма["ОтборПартия"]);
	ПараметрыФормы.Вставить("Этап", ЭтаФорма["ОтборЭтап"]);
	ПараметрыФормы.Вставить("Период",ОтборПериод);
	
	ОткрытьФорму("Обработка.ВыполнениеЭтаповПроизводства.Форма.МобильноеПриложениеУстановкаОтборов",
		ПараметрыФормы,
		ЭтаФорма,
		,
		,
		,
		Новый ОписаниеОповещения("ОтборыСтрокаНажатиеЗавершение",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыСтрокаНажатиеЗавершение(ПараметрыОтбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыОтбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокОтбора = Новый Массив();
	
	Если ПараметрыОтбора.Свойство("МожноВыполнять") И ПараметрыОтбора.Свойство("Начат") Тогда
		
		Состояния = Новый СписокЗначений();
		
		Если ПараметрыОтбора.МожноВыполнять Тогда
			Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.Начат"));
			Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.МожноВыполнять"));
		КонецЕсли;
		
		Если ПараметрыОтбора.Начат Тогда
			Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЭтаповНаВнутрицеховомУровне.Начат"));
		КонецЕсли;
		
		ОтборСостояние = Состояния;
		
	КонецЕсли;
	
	УстановитьОтборПоСостоянию(ЭтаФорма);
	
	Если ПараметрыОтбора.Свойство("ТолькоОбеспеченные") И ПараметрыОтбора.ТолькоОбеспеченные Тогда
		ОтборОбеспечение= "МатериалыОбеспечены";
		МассивСтрокОтбора.Добавить("Только обеспеченные");
	Иначе
		ОтборОбеспечение = "";
	КонецЕсли;
	
	УстановитьОтборПоОбеспечению(ЭтаФорма);
	
	Для Каждого КлючИЗначение Из ПараметрыОтбора Цикл
		
		Если СтрНайти(КлючИЗначение.Ключ, "Отбор") > 0 Тогда
			ЭтаФорма[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				МассивСтрокОтбора.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьОтборПоПодразделению(ЭтаФорма);
	
	УстановитьОтборПоЗаказу();
	
	УстановитьОтборПоИзделию();
	
	УстановитьОтборПоПартии();
	
	УстановитьОтборПоЭтапу();
	
	УстановитьОтборПоПериоду(ЭтаФорма);
	
	Если МассивСтрокОтбора.Количество() > 0 Тогда
		ЭтаФорма["ОтборыСтрока"] = СтрСоединить(МассивСтрокОтбора, ", ");
	Иначе
		ЭтаФорма["ОтборыСтрока"] = НСтр("ru = 'Установить отборы';
										|en = 'Set filters'") + ?(ОтборСостояние.Количество() > 0, "*", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СбросОтборов(Команда)
	
	ОтборОбеспечение   = Неопределено;
	ОтборПериод        = Неопределено;
	ОтборПодразделение = Неопределено;
	
	ОтборСостояние = Новый СписокЗначений();
	
	ЭтаФорма["ОтборЗаказ"]   = Неопределено;
	ЭтаФорма["ОтборИзделие"] = Неопределено;
	ЭтаФорма["ОтборПартия"]  = Неопределено;
	ЭтаФорма["ОтборЭтап"]    = Неопределено;

	ЭтаФорма["ОтборыСтрока"] = НСтр("ru = 'Установить отборы';
									|en = 'Set filters'");
	
	УстановитьОтборПоПодразделению(ЭтаФорма);
	УстановитьОтборПоПериоду(ЭтаФорма);
	УстановитьОтборПоСостоянию(ЭтаФорма);
	УстановитьОтборПоОбеспечению(ЭтаФорма);
	
	УстановитьОтборПоЗаказу();
	УстановитьОтборПоИзделию();
	УстановитьОтборПоПартии();
	УстановитьОтборПоЭтапу();
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьШтрихКод(Команда)
	
	Если СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
		
		ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтаФорма);
		
		СредстваМультимедиа.ПоказатьСканированиеШтрихКодов(НСтр("ru = 'Наведите камеру на штрихкод';
																|en = 'Point the camera at the barcode'"),
			ОбработчикСканирования,
			,
			ТипШтрихКода.Линейный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт

	Если Результат Тогда
		
		СредстваМультимедиа.ВоспроизвестиЗвуковоеОповещение(ЗвуковоеОповещение.ПоУмолчанию,Истина);
		СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		
		ЗаполнитьОтбор(Штрихкод);
	Иначе
		
		Сообщение = НСтр("ru = 'Ошибка обработки штрих кода';
						|en = 'Barcode processing error'");
		
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

#Область Универсальные

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаСписка

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрСпискаТекущаяДата(Форма)
	
	#Если Клиент Тогда
		
		ЗначениеПараметра = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	#Иначе
		
		ЗначениеПараметра = ТекущаяДатаСеанса();
		
	#КонецЕсли
	
	Форма.Список.Параметры.УстановитьЗначениеПараметра(
		"ТекущаяДата",
		ЗначениеПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическоеОбновлениеПараметровСписка()
	
	Если Элементы.Список.АвтоОбновление Тогда
		ИнтервалОбновления = Элементы.Список.ПериодАвтоОбновления;
	Иначе
		ИнтервалОбновления = 3600;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьПараметрыСписка", ИнтервалОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыСписка()
	
	УстановитьПараметрСпискаТекущаяДата(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписок()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = СтрЗаменить(
		Список.ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("ЭтапыПереопределяемый"));
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусГрафика",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	УстановитьПараметрСпискаТекущаяДата(ЭтотОбъект);
	
	// Отборы
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		УстановитьОтборПоПодразделению(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПериод)
		И УправлениеПроизводством.ИспользуетсяГрафикПроизводства() Тогда
		УстановитьОтборПоПериоду(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСостояние) Тогда
		УстановитьОтборПоСостоянию(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОбеспечение) Тогда
		УстановитьОтборПоОбеспечению(ЭтотОбъект);
	КонецЕсли;
	
	// Порядок
	Список.Порядок.Элементы.Очистить();
	
	Если УправлениеПроизводством.ИспользуетсяГрафикПроизводства() Тогда
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("КодСостояния");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("Начало");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НачалоСледующегоЭтапа");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
	Иначе
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("КодСостояния");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ПриоритетРаспоряжения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ПриоритетПодразделения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ОчередьРаспоряжения");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ДлительностьДоВыпуска");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы(),
		КлючНастроекФормы());
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиФормыКлиент()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОтборПодразделение", ОтборПодразделение);
	Настройки.Вставить("ОтборСостояние", ОтборСостояние);
	Настройки.Вставить("ОтборОбеспечение", ОтборОбеспечение);
	Настройки.Вставить("ОтборПериод", ОтборПериод);
	
	СохранитьНастройкиФормыСервер(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормыСервер(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючФормы(),
		КлючНастроекФормы(),
		Настройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючФормы()
	
	Возврат "Обработка.ВыполнениеЭтаповПроизводства.Форма";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроекФормы()
	
	Возврат "Основные";
	
КонецФункции

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура ВыполнитьДействиеВСпискеЗаказовРазныхТиповЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		
	Иначе
		
		ЗаказыДляПроверкиЗаданияРаспределенияЗапасов.ЗагрузитьЗначения(ДополнительныеПараметры.Заказы);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам", 1, Истина);
		РезультатВыполненияДействий = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ОбеспечениеВДокументахКлиент.СообщитьОРезультатахВыполненияДействийВСпискеЗаказов(РезультатВыполненияДействий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам()
	ОбеспечениеВДокументахКлиент.ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыОбеспечения()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ВыделенаСтрокаСписка = ТекущиеДанные <> Неопределено
		И ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка");
	
	Элементы.СостояниеОбеспеченияСпискаЗаказов.Видимость = ВыделенаСтрокаСписка
		И Не ТекущиеДанные.ДинамическаяСтруктура
		И ПравоДоступаСостояниеОбеспечения;
		
	Элементы.СписокУкомплектованностьЭтапа.Видимость = ВыделенаСтрокаСписка
		И ТекущиеДанные.ДинамическаяСтруктура
		И ПравоДоступаУкомплектованность;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСостояниеОбеспечения(ВыбраннаяСтрока)
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ПараметрыФормыСостояниеОбеспеченияЗаказов("СПИСОКЗАКАЗОВ");
	ПараметрыФормы.Заказы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяСтрока);
	
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУкомплектованность(Этап)
	
	Отбор = Новый Структура("Этап", Этап);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ПоЭтапуКонтекст");
	
	ОткрытьФорму("Отчет.УкомплектованностьЗаказов.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	#Область ДатыГрафика
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Начало.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Окончание.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачалоСледующегоЭтапа.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Формат",
		УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства());
	
	#КонецОбласти
	
	#Область НеЗавершеныПредшественники
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.ОжиданиеПредшествующих);
	СписокЗначений.Добавить(Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.НачатыПредшествующие);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	#Область ЭтапПросрочен
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Окончание.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ЦветТекстаПроблема);
	
	#КонецОбласти
	
	#Область МобильныйКлиент
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		Элемент = Список.УсловноеОформление.Элементы.Добавить();
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.Завершен;
		
		Элемент.Оформление.УстановитьЗначениеПараметра(
			"ЦветТекста",
			ЦветаСтиля.СерыйЦветТекста1);
		
		Элемент = Список.УсловноеОформление.Элементы.Добавить();
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.ОжиданиеПредшествующих);
		СписокЗначений.Добавить(Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.НачатыПредшествующие);
		
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра(
			"ЦветТекста",
			ЦветаСтиля.СерыйЦветТекста2);
		
		Элемент = Список.УсловноеОформление.Элементы.Добавить();
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.МожноВыполнять;
		
		Элемент.Оформление.УстановитьЗначениеПараметра(
			"ЦветТекста",
			ЦветаСтиля.ЦветТекстаУспех);
		
		Элемент = Список.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЭтаповНаВнутрицеховомУровне.Завершен;
		
		Элемент.Оформление.УстановитьЗначениеПараметра(
			"Текст",
			"");
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделению(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Подразделение", 
		Форма.ОтборПодразделение, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборПодразделение));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПериоду(Форма)
	
	Если ЗначениеЗаполнено(Форма.ОтборПериод.ДатаНачала) Тогда
		
		ГруппаЭлементов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Форма.Список.Отбор.Элементы,
			"ГруппаНачало",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементов,
			"Начало", 
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
			Форма.ОтборПериод.ДатаНачала);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементов,
			"Начало", 
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Форма.Список.Отбор,
			"Начало");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ОтборПериод.ДатаОкончания) Тогда
		
		ГруппаЭлементов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Форма.Список.Отбор.Элементы,
			"ГруппаОкончание",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементов,
			"Окончание", 
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
			Форма.ОтборПериод.ДатаОкончания);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементов,
			"Окончание", 
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Форма.Список.Отбор,
			"Окончание");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		ОтборСостояние = РезультатЗакрытия;
		УстановитьОтборПоСостоянию(ЭтотОбъект);
		СохранитьНастройкиФормыКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСостоянию(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Состояние", 
		Форма.ОтборСостояние, 
		ВидСравненияКомпоновкиДанных.ВСписке,
		, 
		ЗначениеЗаполнено(Форма.ОтборСостояние));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОбеспечению(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"СостояниеОбеспечения", 
		Форма.ОтборОбеспечение,
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.ОтборОбеспечение));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоЗаказу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка.Распоряжение", 
		ЭтаФорма["ОтборЗаказ"], 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(ЭтаФорма["ОтборЗаказ"]));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИзделию()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка.ПартияПроизводства.ОсновноеИзделиеНоменклатура", 
		ЭтаФорма["ОтборИзделие"], 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(ЭтаФорма["ОтборИзделие"]));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПартии()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка.ПартияПроизводства", 
		ЭтаФорма["ОтборПартия"], 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(ЭтаФорма["ОтборПартия"]));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоЭтапу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка", 
		ЭтаФорма["ОтборЭтап"], 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(ЭтаФорма["ОтборЭтап"]));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ГрафикИспользуется = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	
	Элементы.ОтборПериод.Видимость = ГрафикИспользуется;
	Элементы.Начало.Видимость = ГрафикИспользуется;
	Элементы.Окончание.Видимость = ГрафикИспользуется;
	Элементы.НачалоСледующегоЭтапа.Видимость = ГрафикИспользуется;
	Элементы.ТребуетсяРасчет.Видимость = ГрафикИспользуется;
	
	ИспользуютсяОперации = ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеУправление") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеПланирование");
	
	Элементы.СостояниеОпераций.Видимость = ИспользуютсяОперации;
	Элементы.КодСостоянияОпераций.Видимость = ИспользуютсяОперации;
	Элементы.ФормаВыполнениеОпераций.Видимость = ИспользуютсяОперации;
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	СписокРеквизитов - Строка
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	
	Если Инициализация И Форма.ЭтоМобильныйКлиент Тогда
		
		//Команды списка
		Элементы.ОтметитьНачалоВыполнения.Заголовок = НСтр("ru = 'Начать';
															|en = 'Start'");
		Элементы.ОтметитьВыполненным.Заголовок = НСтр("ru = 'Завершить';
														|en = 'Finish'");
		
		ЭлементНачать = Элементы.Добавить("Начать",Тип("КнопкаФормы"), Элементы.Список.КонтекстноеМеню);
		ЭлементНачать.Заголовок = НСтр("ru = 'Начать';
										|en = 'Start'");
		ЭлементНачать.ИмяКоманды = "ОтметитьНачалоВыполнения";
		
		ЭлементЗавершить = Элементы.Добавить("Завершить",Тип("КнопкаФормы"), Элементы.Список.КонтекстноеМеню);
		ЭлементЗавершить.Заголовок = НСтр("ru = 'Завершить';
											|en = 'Finish'");
		ЭлементЗавершить.ИмяКоманды = "ОтметитьВыполненным";
		
		ЭлементОтгрузить = Элементы.Добавить("Отгрузить",Тип("КнопкаФормы"));
		ЭлементОтгрузить.ИмяКоманды = "Отгрузить";
		
		ЭлементОтгрузитьКоманднаяПанель = Элементы.Добавить("ОтгрузитьКоманднаяПанель",Тип("КнопкаФормы"), Элементы.ОсновныеДействия);
		ЭлементОтгрузитьКоманднаяПанель.Заголовок = НСтр("ru = 'Отгрузить';
														|en = 'Ship'");
		ЭлементОтгрузитьКоманднаяПанель.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		ЭлементОтгрузитьКоманднаяПанель.ИмяКоманды = "Отгрузить";
		
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить(ЭлементОтгрузить);
		МассивЭлементов.Добавить(ЭлементНачать);
		МассивЭлементов.Добавить(ЭлементЗавершить);
		МассивЭлементов.Добавить(Элементы.ДействияПрочие);
		МассивЭлементов.Добавить(Элементы.ПодменюСоздатьНаОсновании);
		МассивЭлементов.Добавить(Элементы.ПодменюПечать);
		МассивЭлементов.Добавить(Элементы.ПодменюОтчеты);
		МассивЭлементов.Добавить(Элементы.ФормаВыполнениеОпераций);
		
		Для Каждого Элемент Из МассивЭлементов Цикл
			Элементы.Переместить(Элемент,Элементы.Список.КонтекстноеМеню, Элементы.СписокКонтекстноеМенюИзменить);
		КонецЦикла;
		
		//Поля списка
		Элементы.ОформитьВыработку.Видимость     = Ложь;
		Элементы.ТребуетсяРасчет.Видимость       = Ложь;
		Элементы.КодСостоянияОпераций.Видимость  = Ложь;
		Элементы.ОжидаетсяОбеспечение.Видимость  = Ложь;
		Элементы.Окончание.Видимость             = Ложь;
		Элементы.НачалоСледующегоЭтапа.Видимость = Ложь;
		
		Элементы.Состояние.ОтображатьВШапке               = Ложь;
		Элементы.ИзделиеЕдиницаИзмерения.ОтображатьВШапке = Ложь;
		
		Элементы.Переместить(Элементы.Начало, Элементы.Список);
		Элементы.Переместить(Элементы.Состояние, Элементы.Список, Элементы.Начало);
		
		Элементы.Изделий.Заголовок = НСтр("ru = 'Количество';
											|en = 'Quantity'");
		
		Номенклатура = Элементы.Добавить("Номенклатура", Тип("ПолеФормы"), Элементы.Список);
		Номенклатура.ПутьКДанным = "Список.Ссылка.ПартияПроизводства.ОсновноеИзделиеНоменклатура";
		Номенклатура.Заголовок = НСтр("ru = 'Номенклатура';
										|en = 'Item'");
		Элементы.Переместить(Номенклатура, Элементы.Список, Элементы.Изделий);
		
		Характеристика = Элементы.Добавить("Характеристика", Тип("ПолеФормы"), Элементы.Список);
		Характеристика.ПутьКДанным = "Список.Ссылка.ПартияПроизводства.ОсновноеИзделиеХарактеристика";
		Характеристика.Заголовок = НСтр("ru = 'Характеристика';
										|en = 'Variant'");
		Элементы.Переместить(Характеристика, Элементы.Список, Элементы.Изделий);
		
		//отборы
		Для каждого Отбор Из Элементы.ГруппаОтборы.ПодчиненныеЭлементы Цикл
			Отбор.Видимость = Ложь;
		КонецЦикла; 
		
		Элементы.ГруппаОтборы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		Форма["ОтборыСтрока"] = НСтр("ru = 'Установить отборы';
									|en = 'Set filters'") + ?(Форма.ОтборСостояние.Количество() > 0, "*", "");
		ОтборыСтрока = Элементы.Добавить("ОтборыСтрока",Тип("ПолеФормы"),Элементы.ГруппаОтборы);
		ОтборыСтрока.Вид = ВидПоляФормы.ПолеНадписи;
		ОтборыСтрока.ПутьКДанным = "ОтборыСтрока";
		ОтборыСтрока.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ОтборыСтрока.Гиперссылка = Истина;
		ОтборыСтрока.ЦветТекста = WebЦвета.Зеленый;
		ОтборыСтрока.УстановитьДействие("Нажатие", "Подключаемый_ОтборыСтрокаНажатие");
		
		ЭлементСбросОтборов = Элементы.Добавить("СбросОтборов",Тип("КнопкаФормы"),Элементы.ГруппаОтборы);
		ЭлементСбросОтборов.ИмяКоманды = "СбросОтборов";
		ЭлементСбросОтборов.Отображение = ОтображениеКнопки.Картинка;
		
		ЭлементСканироватьШтрихКод = Элементы.Добавить("СканироватьШтрихКод",Тип("КнопкаФормы"),Элементы.ГруппаОтборы);
		ЭлементСканироватьШтрихКод.ИмяКоманды = "СканироватьШтрихКод";
		ЭлементСканироватьШтрихКод.Отображение = ОтображениеКнопки.Картинка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтапыДляОформленияВыработки(ВыделенныеСтроки)
	
	Результат = Новый Массив;
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		
		Если ДанныеСтроки.ОформитьВыработку Тогда
			
			Результат.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыбранныеЭтапы()

	Возврат ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);

КонецФункции

&НаКлиенте
Функция ЭтапыДляИзмененияСтатуса(НовыйСтатус, ВыделенныеСтроки, ЗначенияИзВыделенныхСтрок = Неопределено)
	
	КлючиЗначений = Новый Массив();
	КлючиИнициализированы = Ложь;
	
	Результат = Новый Массив;
	ЗначениеНовогоСтатуса = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2." + НовыйСтатус);
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		
		Если Не УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(ЗначениеНовогоСтатуса, ДанныеСтроки.Статус) > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ДанныеСтроки.Ссылка); 
		
		Если Не ЗначенияИзВыделенныхСтрок = Неопределено Тогда
			Если Не КлючиИнициализированы Тогда
				Для Каждого КлючИЗначение Из ЗначенияИзВыделенныхСтрок Цикл
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, КлючИЗначение.Ключ) Тогда
						ЗначенияИзВыделенныхСтрок[КлючИЗначение.Ключ] = ДанныеСтроки[КлючИЗначение.Ключ];
						КлючиЗначений.Добавить(КлючИЗначение.Ключ);
					КонецЕсли; 
				КонецЦикла;
				КлючиИнициализированы = Истина;
			Иначе
				Для Сч = -КлючиЗначений.ВГраница() По 0 Цикл
					Ключ = КлючиЗначений[-Сч];
					Если ДанныеСтроки[Ключ] = ЗначенияИзВыделенныхСтрок[Ключ] Тогда
						Продолжить;
					КонецЕсли;
					ЗначенияИзВыделенныхСтрок[Ключ] = Неопределено;
					КлючиЗначений.Удалить(-Сч);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Ссылка = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если Ссылка <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = Ссылка;
		Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
			ПоказатьЗначение(Неопределено, Ссылка);
		КонецЕсли;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Возврат УправлениеПроизводствомКлиент.СсылкаНаЭтапПроизводстваПоШтрихкоду(Штрихкод);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтбор(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказНаПроизводство2_2.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Справочник.ПартииПроизводства.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	
	Ссылки = ШтрихкодированиеПечатныхФормВызовСервера.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
	Ссылка = Неопределено;
	Если Ссылки.Количество() > 0 Тогда
		Ссылка = Ссылки[0];
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ОтборПодразделение = Ссылка;
		УстановитьОтборПоПодразделению(ЭтаФорма);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
		
		ЭтаФорма["ОтборЗаказ"] = Ссылка;
		УстановитьОтборПоЗаказу();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ЭтаФорма["ОтборИзделие"] = Ссылка;
		УстановитьОтборПоИзделию();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПартииПроизводства") Тогда
		
		ЭтаФорма["ОтборПартия"] = Ссылка;
		УстановитьОтборПоПартии();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		ЭтаФорма["ОтборЭтап"] = Ссылка;
		УстановитьОтборПоЭтапу();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Нстр("ru = 'Штрих-код не найден';
								|en = 'Barcode is not found'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Отборы = "ОтборПодразделение,ОтборЗаказ,ОтборИзделие,ОтборПартия,ОтборЭтап";
	Отборы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Отборы, ",");
	
	МассивСтрокОтбора = Новый Массив();
	
	Для Каждого Отбор Из Отборы Цикл
		Если ЗначениеЗаполнено(ЭтаФорма[Отбор]) Тогда
			МассивСтрокОтбора.Добавить(ЭтаФорма[Отбор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокОтбора.Количество() > 0 Тогда
		ЭтаФорма["ОтборыСтрока"] = СтрСоединить(МассивСтрокОтбора, ", ");
	Иначе
		ЭтаФорма["ОтборыСтрока"] = НСтр("ru = 'Установить отборы';
										|en = 'Set filters'") + ?(ОтборСостояние.Количество() > 0, "*", "");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
