#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проверка_возможности_создания_ведомостей 

Функция МожноСоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасчетныйДокумент, "Проведен") Тогда
		ТекстСообщения = НСтр("ru = 'Выплата возможна только по проведенному документу';
								|en = 'Payment is possible only for the posted document'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	
	// Должны остаться суммы к выплате по документу.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами.Остатки(, ДокументОснование = &РасчетныйДокумент) КАК Остатки
	|ГДЕ
	|	Остатки.СуммаВзаиморасчетовОстаток > 0";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой()Тогда
		ТекстСообщения = НСтр("ru = 'По документу не осталось сумм к выплате';
								|en = 'No amounts to be paid against the document'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции

#КонецОбласти

#Область Создание_ведомостей 

Функция ПараметрыСозданияВедомостейПоРасчетномуДокументу() Экспорт
	
	ПараметрыСозданияВедомостейПоРасчетномуДокументу = Новый Структура;
	ПараметрыСозданияВедомостейПоРасчетномуДокументу.Вставить("УникальныйИдентификаторФормы");
	ПараметрыСозданияВедомостейПоРасчетномуДокументу.Вставить("ДатаВыплаты");
	ПараметрыСозданияВедомостейПоРасчетномуДокументу.Вставить("ВРазрезеИсточников");
	ПараметрыСозданияВедомостейПоРасчетномуДокументу.Вставить("ВидМестаВыплаты");
	ПараметрыСозданияВедомостейПоРасчетномуДокументу.Вставить("ЗарплатныйПроект");
	
	Возврат ПараметрыСозданияВедомостейПоРасчетномуДокументу;
	
КонецФункции

Функция СоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент, ПараметрыСоздания) Экспорт
	
	СписокВедомостей = НовыйСписокВедомостей();
	
	ВыборкаКлючейВедомостей = КлючиВедомостейПоРасчетномуДокументу(РасчетныйДокумент, ПараметрыСоздания);
	
	ПоказыватьСтатьиРасходов		= ПараметрыСоздания.ВРазрезеИсточников И ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ПоказыватьСтатьиФинансирования	= ПараметрыСоздания.ВРазрезеИсточников И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	
	ТипВедомости = "";
	КоличествоВедомостей = 0;
	ДокументыСУстаревшимиКодами = Новый Массив;
	Пока ВыборкаКлючейВедомостей.Следующий() Цикл
	
		Ведомость = НоваяВедомостьПоРасчетномуДокументу(РасчетныйДокумент, ВыборкаКлючейВедомостей, ПараметрыСоздания);
		Если Ведомость = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Ведомость.ЗаполнитьВыплаты();
		КоличествоВедомостей = КоличествоВедомостей + 1;
		Строка = СписокВедомостей.Добавить();
		Строка.Адрес = ПоместитьВоВременноеХранилище(ОбщегоНазначения.ЗначениеВСтрокуXML(Ведомость), ПараметрыСоздания.УникальныйИдентификаторФормы);
		Строка.Сумма = Ведомость.Выплаты.Итог("КВыплате");
		Строка.Сотрудники = ЗарплатаКадры.КраткийСоставФизЛиц(Ведомость.Выплаты.ВыгрузитьКолонку("ФизическоеЛицо"), Ведомость.Дата);
		
		Если ПустаяСтрока(ТипВедомости) Тогда
			ТипВедомости = Ведомость.Метаданные().Синоним;
		КонецЕсли;
		Строка.Тип = ТипВедомости;
		
		Если Строка.Тип = Метаданные.Документы.ВедомостьПрочихДоходовВБанк.Синоним
			Или Строка.Тип = Метаданные.Документы.ВедомостьПрочихДоходовПеречислением.Синоним
			И ВидыДоходовИсполнительногоПроизводстваСервер.ВидДоходаИсполнительногоПроизводстваУстарел(Ведомость) Тогда 
			ДокументыСУстаревшимиКодами.Добавить(КоличествоВедомостей);
		КонецЕсли;
	
		Если ПоказыватьСтатьиФинансирования И ПоказыватьСтатьиРасходов Тогда
			Финансирование = СтрШаблон(
					НСтр("ru = '%1(%2)';
						|en = '%1(%2)'"),
					ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейФинансирования()[Ведомость.СтатьяФинансирования],
					ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейРасходов()[Ведомость.СтатьяРасходов]);
		ИначеЕсли ПоказыватьСтатьиФинансирования Тогда
			Финансирование = ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейФинансирования()[Ведомость.СтатьяФинансирования];
		ИначеЕсли ПоказыватьСтатьиРасходов Тогда
			Финансирование = ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейРасходов()[Ведомость.СтатьяРасходов];
		Иначе
			Финансирование = "";
		КонецЕсли;
		Строка.Финансирование = Финансирование;
		
	КонецЦикла;
	КоличествоВедомостейСУстаревшимиКодами = ДокументыСУстаревшимиКодами.Количество();
	Если КоличествоВедомостейСУстаревшимиКодами > 0 Тогда
		НомераСтрокВедомостей = СтрСоединить(ДокументыСУстаревшимиКодами, ", ");
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ВидыДоходовИсполнительногоПроизводстваКлиентСервер.ТекстПредупрежденияОбУстаревшемКодеДоходаИсполнительногоПроизводства(),
			?(КоличествоВедомостейСУстаревшимиКодами = 1, НСтр("ru = 'ведомости №';
																|en = 'statement No.'"), НСтр("ru = 'ведомостях №№';
																							|en = 'statements Nos.'")),
			НомераСтрокВедомостей));
	КонецЕсли;

	Возврат СписокВедомостей
	
КонецФункции

Функция НовыйСписокВедомостей()
	
	ТаблицаВедомостей = Новый ТаблицаЗначений;
	ТаблицаВедомостей.Колонки.Добавить("Адрес");
	ТаблицаВедомостей.Колонки.Добавить("Тип");
	ТаблицаВедомостей.Колонки.Добавить("Сумма");
	ТаблицаВедомостей.Колонки.Добавить("Сотрудники");
	ТаблицаВедомостей.Колонки.Добавить("Финансирование");
	
	Возврат ТаблицаВедомостей
	
КонецФункции

Функция КлючиВедомостейПоРасчетномуДокументу(РасчетныйДокумент, ПараметрыСоздания)
	
	СпособВыплаты = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РасчетныйДокумент).СпособВыплатыПрочихДоходов();
	
	// безналичные ведомости с 1 июня 2020 года создаются в разрезе видов дохода
	ВРазрезеВидовДоходов = 
		Перечисления.ВидыМестВыплатыЗарплаты.Безналичные().Найти(ПараметрыСоздания.ВидМестаВыплаты) <> Неопределено
		И ВидыДоходовИсполнительногоПроизводстваКлиентСервер.ВидДоходаОбязателенДляБанков(ПараметрыСоздания.ДатаВыплаты);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВРазрезеИсточников",   ПараметрыСоздания.ВРазрезеИсточников);
	Запрос.УстановитьПараметр("ВРазрезеВидовДоходов", ВРазрезеВидовДоходов);
	Запрос.УстановитьПараметр("СпособВыплаты", СпособВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Взаиморасчеты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СпособРасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ДивидендыСотрудникам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПрочихДоходов.ДивидендыСотрудникам)
	|		КОГДА Взаиморасчеты.СпособРасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.Дивиденды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПрочихДоходов.Дивиденды)
	|		ИНАЧЕ &СпособВыплаты
	|	КОНЕЦ КАК СпособВыплаты,
	|	ВЫБОР
	|		КОГДА &ВРазрезеИсточников
	|			ТОГДА Взаиморасчеты.СтатьяФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА &ВРазрезеИсточников
	|			ТОГДА Взаиморасчеты.СтатьяРасходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА &ВРазрезеВидовДоходов
	|			ТОГДА Взаиморасчеты.ВидДоходаИсполнительногоПроизводства
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДоходаИсполнительногоПроизводства,
	|	Взаиморасчеты.Период КАК ПериодРегистрации
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.Регистратор = &РасчетныйДокумент";
	
	ВыборкаПоРасчетномуДокументу = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаПоРасчетномуДокументу
	
КонецФункции

Функция НоваяВедомостьПоРасчетномуДокументу(РасчетныйДокумент, КлючВедомости, ПараметрыСоздания)
	
	ДокументМенеджер = ВзаиморасчетыПоПрочимДоходам.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ПараметрыСоздания.ВидМестаВыплаты); 
	Если ДокументМенеджер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ведомость = ДокументМенеджер.СоздатьДокумент();
	
	ДанныеЗаполнения = ВедомостьПрочихДоходов.ДанныеЗаполненияВедомости();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Шапка, КлючВедомости);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Шапка, ПараметрыСоздания);
	ДанныеЗаполнения.Шапка.Дата = ПараметрыСоздания.ДатаВыплаты;
	ДанныеЗаполнения.Основания.Добавить(РасчетныйДокумент);
	
	Ведомость.СтатьяФинансирования	= КлючВедомости.СтатьяФинансирования;
	Ведомость.СтатьяРасходов		= КлючВедомости.СтатьяРасходов;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ведомость, "ВидДоходаИсполнительногоПроизводства") Тогда
		Ведомость.ВидДоходаИсполнительногоПроизводства = КлючВедомости.ВидДоходаИсполнительногоПроизводства;
	КонецЕсли;	
	
	Ведомость.Заполнить(ДанныеЗаполнения);
	
	Возврат Ведомость
	
КонецФункции
	
#КонецОбласти

#Область Сохранение_ведомостей 

Процедура СохранитьВедомостиНаСервере(СписокВедомостей, РежимЗаписи)	Экспорт
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаСпискаВедомостей Из СписокВедомостей Цикл
		СтрокаXML = ПолучитьИзВременногоХранилища(СтрокаСпискаВедомостей.Адрес);
		Ведомость = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
		Ведомость.Записать(РежимЗаписи);
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#КонецЕсли