
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшируемыеЗначения;

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущийОбъектЭксплуатацииСпискаВыбораЗаказа;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяПодклассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборКласс, "ИспользуютсяПодклассы");
	Элементы.Подкласс.Доступность = (ИспользуютсяПодклассы <> Неопределено И ИспользуютсяПодклассы);
	
	ТекущийЗаказНаРемонтВыделенияРемонтов = 0;
	ТекущийЗаказНаРемонтВыделенияЗаказов = 0;
	
	МатериалыИРаботы.Параметры.УстановитьЗначениеПараметра("ВидРемонта", Справочники.ВидыРемонтов.ПустаяСсылка());
	Трудозатраты.Параметры.УстановитьЗначениеПараметра("ВидРемонта", Справочники.ВидыРемонтов.ПустаяСсылка());
	РабочиеЦентры.Параметры.УстановитьЗначениеПараметра("ОбъектЭксплуатации", Справочники.ОбъектыЭксплуатации.ПустаяСсылка());
	
	СозданныеЗаказыНаРемонт.Параметры.УстановитьЗначениеПараметра("МассивЗаказов", Новый Массив);
	
	Элементы.СтраницыДетализацииРемонта.Видимость = Ложь;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбщиеВидыРемонтов.Ссылка КАК ОбщийВидРемонта,
		|	ИСТИНА КАК Отмечен
		|ИЗ
		|	Справочник.ОбщиеВидыРемонтов КАК ОбщиеВидыРемонтов
		|ГДЕ
		|	НЕ ОбщиеВидыРемонтов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧастотаПланированияРемонтов.Ссылка КАК ЧастотаПланирования,
		|	ИСТИНА КАК Отмечен
		|ИЗ
		|	Перечисление.ЧастотаПланированияРемонтов КАК ЧастотаПланированияРемонтов");
	
	Пакет = Запрос.ВыполнитьПакет();
	ОтборОбщиеВидыРемонтов.Загрузить(Пакет[0].Выгрузить());
	ОтборЧастотыПланирования.Загрузить(Пакет[1].Выгрузить());
	
	ИнициализироватьКомпоновщикНастроекДляОтборов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияПростыеОтборыНажатие(Элемент)
	Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПростойОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроизвольныеОтборыНажатие(Элемент)
	Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныйОтбор;
КонецПроцедуры

&НаКлиенте
Процедура КлассПриИзменении(Элемент)
	ОтразитьПростойОтборВОтборахКомпоновки("Класс", ОтборКласс);
	
	КлассПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КлассПриИзмененииНаСервере()
	
	ИспользуютсяПодклассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборКласс, "ИспользуютсяПодклассы");
	Элементы.Подкласс.Доступность = (ИспользуютсяПодклассы <> Неопределено И ИспользуютсяПодклассы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодклассПриИзменении(Элемент)
	ОтразитьПростойОтборВОтборахКомпоновки("Подкласс", ОтборПодкласс);
КонецПроцедуры

&НаКлиенте
Процедура ЭксплуатирующееПодразделениеПриИзменении(Элемент)
	ОтразитьПростойОтборВОтборахКомпоновки("ЭксплуатирующееПодразделение", ОтборЭксплуатирующееПодразделение);
КонецПроцедуры

&НаКлиенте
Процедура РемонтирующееПодразделениеПриИзменении(Элемент)
	ОтразитьПростойОтборВОтборахКомпоновки("РемонтирующееПодразделение", ОтборРемонтирующееПодразделение);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДетализацииРемонта(Элемент)
	
	Элементы.СтраницыДетализацииРемонта.Видимость = Не Элементы.СтраницыДетализацииРемонта.Видимость;
	Если Элементы.СтраницыДетализацииРемонта.Видимость Тогда
		Элементы.ГиперссылкаДетализацииРемонта.Заголовок = НСтр("ru = 'Скрыть детали распоряжения на ремонт';
																|en = 'Hide R&M request details'");
	Иначе
		Элементы.ГиперссылкаДетализацииРемонта.Заголовок = НСтр("ru = 'Показать детали распоряжения на ремонт';
																|en = 'Show R&M request details'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонты

&НаКлиенте
Процедура РемонтыПриАктивизацииСтроки(Элемент)
	
	ДоступностьКомандИзменения = Ложь;
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		
		Элементы.СтраницыМатериалыИРаботы.ТекущаяСтраница = Элементы.СтраницаМатериалыИРаботыСписок;
		Элементы.СтраницыТрудозатраты.ТекущаяСтраница = Элементы.СтраницаТрудозатратыСписок;
		Элементы.СтраницыРабочиеЦентры.ТекущаяСтраница = Элементы.СтраницаРабочиеЦентрыСписок;
		
		МатериалыИРаботы.Параметры.УстановитьЗначениеПараметра("ВидРемонта", ПредопределенноеЗначение("Справочник.ВидыРемонтов.ПустаяСсылка"));
		Трудозатраты.Параметры.УстановитьЗначениеПараметра("ВидРемонта", ПредопределенноеЗначение("Справочник.ВидыРемонтов.ПустаяСсылка"));
		РабочиеЦентры.Параметры.УстановитьЗначениеПараметра("ОбъектЭксплуатации", ПредопределенноеЗначение("Справочник.ОбъектыЭксплуатации.ПустаяСсылка"));
		
		ТекущийЗаказНаРемонтВыделенияЗаказов = 0;
		
	Иначе
		
		ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
		
		ТекущийЗаказНаРемонтВыделенияЗаказов = ТекущиеДанные.КодЗаказаНаРемонт;
		
		Если ТекущиеДанные.ИзмененыМатериалыИРаботы Тогда
			Элементы.СтраницыМатериалыИРаботы.ТекущаяСтраница = Элементы.СтраницаМатериалыИРаботыТаблица;
			Элементы.МатериалыИРаботы.ОтборСтрок = Новый ФиксированнаяСтруктура("КодРемонта", ТекущиеДанные.КодРемонта);
		Иначе
			Элементы.СтраницыМатериалыИРаботы.ТекущаяСтраница = Элементы.СтраницаМатериалыИРаботыСписок;
			МатериалыИРаботы.Параметры.УстановитьЗначениеПараметра("ВидРемонта", ТекущиеДанные.ВидРемонта);
		КонецЕсли;
		
		Если ТекущиеДанные.ИзмененыТрудозатраты Тогда
			Элементы.СтраницыТрудозатраты.ТекущаяСтраница = Элементы.СтраницаТрудозатратыТаблица;
			Элементы.Трудозатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("КодРемонта", ТекущиеДанные.КодРемонта);
		Иначе
			Элементы.СтраницыТрудозатраты.ТекущаяСтраница = Элементы.СтраницаТрудозатратыСписок;
			Трудозатраты.Параметры.УстановитьЗначениеПараметра("ВидРемонта", ТекущиеДанные.ВидРемонта);
		КонецЕсли;
		
		Если ТекущиеДанные.ИзмененыРабочиеЦентры Тогда
			Элементы.СтраницыРабочиеЦентры.ТекущаяСтраница = Элементы.СтраницаРабочиеЦентрыТаблица;
			Элементы.РабочиеЦентры.ОтборСтрок = Новый ФиксированнаяСтруктура("КодРемонта", ТекущиеДанные.КодРемонта);
		Иначе
			Элементы.СтраницыРабочиеЦентры.ТекущаяСтраница = Элементы.СтраницаРабочиеЦентрыСписок;
			РабочиеЦентры.Параметры.УстановитьЗначениеПараметра("ОбъектЭксплуатации", ТекущиеДанные.ОбъектЭксплуатации);
		КонецЕсли;
		
		ДоступностьКомандИзменения = ТекущиеДанные.ЭтоСтрокаВидаРемонта;
		
	КонецЕсли;
	
	Элементы.МатериалыИРаботыИзменить.Доступность = ДоступностьКомандИзменения;
	Элементы.ТрудозатратыИзменить.Доступность = ДоступностьКомандИзменения;
	Элементы.РабочиеЦентрыИзменить.Доступность = ДоступностьКомандИзменения;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыКодЗаказаНаРемонтПриИзменении(Элемент)
	
	ОбнулитьДанныеЗаказаНаРемонт = Истина;
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	Если ТекущиеДанные.КодЗаказаНаРемонт <> 0 Тогда
		
		Если ТекущиеДанные.КодЗаказаНаРемонт = 1 Тогда
			
			НовыйЗаказ = Объект.ЗаказыНаРемонт.Добавить();
			НовыйЗаказ.КодЗаказаНаРемонт = МаксимальныйКодЗаказаНаРемонт;
			НовыйЗаказ.Представление = ПолучитьПредставлениеЗаказа(НовыйЗаказ.КодЗаказаНаРемонт);
			ЗаполнитьЗначенияСвойств(НовыйЗаказ, ТекущиеДанные, "ОбъектЭксплуатации, ДатаНачала, Длительность, ЕдиницаИзмеренияДлительности, Подразделение");
			
			ТекущиеДанные.КодЗаказаНаРемонт = НовыйЗаказ.КодЗаказаНаРемонт;
			ТекущиеДанные.ДатаНачалаЗаказаНаРемонт = ТекущиеДанные.ДатаНачала;
			ТекущиеДанные.ДлительностьЗаказаНаРемонт = ТекущиеДанные.Длительность;
			ТекущиеДанные.ЕдиницаИзмеренияДлительностиЗаказаНаРемонт = ТекущиеДанные.ЕдиницаИзмеренияДлительности;
			ТекущиеДанные.ПодразделениеЗаказаНаРемонт = ТекущиеДанные.Подразделение;
			ТекущиеДанные.ПредставлениеЗаказаНаРемонт = НовыйЗаказ.Представление;
			
			МаксимальныйКодЗаказаНаРемонт = МаксимальныйКодЗаказаНаРемонт + 1;
			
			Элементы.РемонтыКодЗаказаНаРемонт.СписокВыбора.Добавить(НовыйЗаказ.КодЗаказаНаРемонт, НовыйЗаказ.Представление);
			
			ОбнулитьДанныеЗаказаНаРемонт = Ложь;
			
		Иначе
			
			НайденныеСтроки = Объект.ЗаказыНаРемонт.НайтиСтроки(Новый Структура("КодЗаказаНаРемонт", ТекущиеДанные.КодЗаказаНаРемонт));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				СтрокаЗаказа = НайденныеСтроки[0];
				ТекущиеДанные.ПредставлениеЗаказаНаРемонт = Элементы.РемонтыКодЗаказаНаРемонт.СписокВыбора.НайтиПоЗначению(ТекущиеДанные.КодЗаказаНаРемонт).Представление;
				ТекущиеДанные.ДатаНачалаЗаказаНаРемонт = СтрокаЗаказа.ДатаНачала;
				ТекущиеДанные.ДлительностьЗаказаНаРемонт = СтрокаЗаказа.Длительность;
				ТекущиеДанные.ЕдиницаИзмеренияДлительностиЗаказаНаРемонт = СтрокаЗаказа.ЕдиницаИзмеренияДлительности;
				ТекущиеДанные.ПодразделениеЗаказаНаРемонт = СтрокаЗаказа.Подразделение;
				ОбнулитьДанныеЗаказаНаРемонт = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбнулитьДанныеЗаказаНаРемонт Тогда
		ТекущиеДанные.ПредставлениеЗаказаНаРемонт = "";
		ТекущиеДанные.ДатаНачалаЗаказаНаРемонт = Дата(1,1,1);
		ТекущиеДанные.ДлительностьЗаказаНаРемонт = 0;
		ТекущиеДанные.ПодразделениеЗаказаНаРемонт = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
	ТекущийЗаказНаРемонтВыделенияЗаказов = ТекущиеДанные.КодЗаказаНаРемонт;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	
	Если ТекущиеДанные.ОбъектЭксплуатации <> ТекущийОбъектЭксплуатацииСпискаВыбораЗаказа Тогда
		
		Список = Элементы.РемонтыКодЗаказаНаРемонт.СписокВыбора;
		Список.Очистить();
		Список.Добавить(1, НСтр("ru = '<новый заказ>';
								|en = '<new order>'"));
		
		НайденныеСтроки = Объект.ЗаказыНаРемонт.НайтиСтроки(Новый Структура("ОбъектЭксплуатации", ТекущиеДанные.ОбъектЭксплуатации));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Список.Добавить(Строка.КодЗаказаНаРемонт, Строка.Представление);
		КонецЦикла;
		
		ТекущийОбъектЭксплуатацииСпискаВыбораЗаказа = ТекущиеДанные.ОбъектЭксплуатации;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОтмеченПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	Если Не ТекущиеДанные.Отмечен И ТекущиеДанные.КодЗаказаНаРемонт <> 0 Тогда
		ТекущиеДанные.КодЗаказаНаРемонт = 0;
		ТекущиеДанные.ПредставлениеЗаказаНаРемонт = "";
		ТекущиеДанные.ДатаНачалаЗаказаНаРемонт = Дата(1,1,1);
		ТекущиеДанные.ДлительностьЗаказаНаРемонт = 0;
		ТекущиеДанные.ПодразделениеЗаказаНаРемонт = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
	ТекущийЗаказНаРемонтВыделенияЗаказов = ТекущиеДанные.КодЗаказаНаРемонт;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.РемонтыПредставление Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
		Если ТекущиеДанные.ИндексКартинки = 1 Тогда
			ПоказатьЗначение(, ТекущиеДанные.ОбъектЭксплуатации);
		ИначеЕсли ТекущиеДанные.ИндексКартинки = 2 Тогда
			ПоказатьЗначение(, ТекущиеДанные.Узел);
		Иначе
			ПоказатьЗначение(, ТекущиеДанные.ВидРемонта);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыНаРемонт

&НаКлиенте
Процедура ЗаказыНаРемонтПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЗаказыНаРемонт.ТекущиеДанные = Неопределено Тогда
		ТекущийЗаказНаРемонтВыделенияРемонтов = 0;
	Иначе
		ТекущийЗаказНаРемонтВыделенияРемонтов = Элементы.ЗаказыНаРемонт.ТекущиеДанные.КодЗаказаНаРемонт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаРемонтПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ЗаказыНаРемонт.ТекущиеДанные;
		ТекущиеДанные.КодЗаказаНаРемонт = ЗаказыНаРемонтМаксимальныйКод;
		ТекущиеДанные.Представление = ПолучитьПредставлениеЗаказа(ТекущиеДанные.КодЗаказаНаРемонт);
		ЗаказыНаРемонтМаксимальныйКод = ЗаказыНаРемонтМаксимальныйКод + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаРемонтДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыНаРемонт.ТекущиеДанные;
	
	ЗаполнитьРемонтыПоОтбору(
		Новый Структура("КодЗаказаНаРемонт", ТекущиеДанные.КодЗаказаНаРемонт),
		Новый Структура("ДатаНачалаЗаказаНаРемонт", ТекущиеДанные.ДатаНачала));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаРемонтДлительностьПриИзменении(Элемент)
	
	ЗаказыНаРемонтДлительностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаРемонтЕдиницаИзмеренияДлительностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыНаРемонт.ТекущиеДанные;
	
	Отбор = Новый Структура("КодЗаказаНаРемонт", ТекущиеДанные.КодЗаказаНаРемонт);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ДлительностьЗаказаНаРемонт", ТекущиеДанные.Длительность);
	ЗначенияЗаполнения.Вставить("ЕдиницаИзмеренияДлительностиЗаказаНаРемонт", ТекущиеДанные.ЕдиницаИзмеренияДлительности);
	
	ЗаполнитьРемонтыПоОтбору(Отбор, ЗначенияЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаРемонтПодразделениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыНаРемонт.ТекущиеДанные;
	
	ЗаполнитьРемонтыПоОтбору(
		Новый Структура("КодЗаказаНаРемонт", ТекущиеДанные.КодЗаказаНаРемонт),
		Новый Структура("ПодразделениеЗаказаНаРемонт", ТекущиеДанные.Подразделение));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаРемонтПередУдалением(Элемент, Отказ)
	
	Если Элементы.ЗаказыНаРемонт.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыНаРемонтПередУдалениемНаСервере();
	
	ТекущийОбъектЭксплуатацииСпискаВыбораЗаказа = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказыНаРемонтПередУдалениемНаСервере()
	
	СтруктураПустыхПолейРемонта = Новый Структура;
	СтруктураПустыхПолейРемонта.Вставить("Отмечен", Ложь);
	СтруктураПустыхПолейРемонта.Вставить("КодЗаказаНаРемонт", 0);
	СтруктураПустыхПолейРемонта.Вставить("ПредставлениеЗаказаНаРемонт", "");
	СтруктураПустыхПолейРемонта.Вставить("ДатаНачалаЗаказаНаРемонт", Дата(1, 1, 1));
	СтруктураПустыхПолейРемонта.Вставить("ДлительностьЗаказаНаРемонт", 0);
	СтруктураПустыхПолейРемонта.Вставить("ЕдиницаИзмеренияДлительностиЗаказаНаРемонт", Перечисления.ЕдиницыИзмеренияВремени.День);
	СтруктураПустыхПолейРемонта.Вставить("ПодразделениеЗаказаНаРемонт", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	Для Каждого ТекущаяСтрока Из Элементы.ЗаказыНаРемонт.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.ЗаказыНаРемонт.НайтиПоИдентификатору(ТекущаяСтрока);
		ЗаполнитьРемонтыПоОтбору(
			Новый Структура("ЭтоСтрокаВидаРемонта, КодЗаказаНаРемонт", Истина, ТекущиеДанные.КодЗаказаНаРемонт),
			СтруктураПустыхПолейРемонта);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущийРемонт = Элементы.Ремонты.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
		ТекущиеДанные.КодРемонта = ТекущийРемонт.КодРемонта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущийРемонт = Элементы.Ремонты.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
		ТекущиеДанные.КодРемонта = ТекущийРемонт.КодРемонта;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура РабочиеЦентрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущийРемонт = Элементы.Ремонты.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.РабочиеЦентры.ТекущиеДанные;
		ТекущиеДанные.КодРемонта = ТекущийРемонт.КодРемонта;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиКомандНавигацииФормы

&НаКлиенте
Процедура НавигацияДалее(Команда)
	
	НавигацияФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияНазад(Команда)
	
	НавигацияФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПродолжитьСДругимиОтборами(Команда)
	
	НавигацияФормы(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметкаЗаказовСнять(Команда)
	УстановитьОтметкуСтрокДереваРемонтов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаЗаказовУстановить(Команда)
	УстановитьОтметкуСтрокДереваРемонтов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОбъединитьРемонтыВОдинЗаказ(Команда)
	
	ВыделенныеСтроки = Элементы.Ремонты.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определение объекта эксплуатации общего для выделенных строк
	ОбъектЭксплуатации = Ремонты.НайтиПоИдентификатору(ВыделенныеСтроки[0]).ОбъектЭксплуатации;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаРемонта = Ремонты.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаРемонта.ЭтоСтрокаВидаРемонта И ОбъектЭксплуатации <> СтрокаРемонта.ОбъектЭксплуатации Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выделенные распоряжения оформляются на разные объекты ремонта,
			|и не могут быть выполнены в рамках одного заказа на ремонт';
			|en = 'Selected references are registered for different R&M objects
			|and cannot be executed within a single R&M order'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(1, НСтр("ru = '<новый заказ>';
									|en = '<new order>'"));
	
	НайденныеСтроки = Объект.ЗаказыНаРемонт.НайтиСтроки(Новый Структура("ОбъектЭксплуатации", ОбъектЭксплуатации));
	Для Каждого Строка Из НайденныеСтроки Цикл
		СписокВыбора.Добавить(Строка.КодЗаказаНаРемонт, Строка.Представление);
	КонецЦикла;
	
	ДопПараметры = Новый Структура("ВыделенныеСтроки, НайденныеСтроки, ОбъектЭксплуатации", ВыделенныеСтроки, НайденныеСтроки, ОбъектЭксплуатации);
	ОписаниеОповещения = Новый ОписаниеОповещения("РемонтыОбъединитьРемонтыВОдинЗаказЗавершение", ЭтотОбъект, ДопПараметры);
	СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите заказ на ремонт';
																|en = 'Select R&M order'"));
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОбъединитьРемонтыВОдинЗаказЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    НайденныеСтроки = ДополнительныеПараметры.НайденныеСтроки;
    ОбъектЭксплуатации = ДополнительныеПараметры.ОбъектЭксплуатации;
    
    
    ВыбранныйЭлемент = ВыбранныйЭлемент1;
    
    Если ВыбранныйЭлемент <> Неопределено Тогда
        
        СтруктураЗаполнения = Новый Структура;
        СтруктураЗаполнения.Вставить("Отмечен");
        СтруктураЗаполнения.Вставить("КодЗаказаНаРемонт");
        СтруктураЗаполнения.Вставить("ПредставлениеЗаказаНаРемонт");
        СтруктураЗаполнения.Вставить("ДатаНачалаЗаказаНаРемонт");
        СтруктураЗаполнения.Вставить("ДлительностьЗаказаНаРемонт");
        СтруктураЗаполнения.Вставить("ЕдиницаИзмеренияДлительностиЗаказаНаРемонт");
        СтруктураЗаполнения.Вставить("ПодразделениеЗаказаНаРемонт");
        
        СтруктураЗаполнения.Отмечен = Истина;
        
        Если ВыбранныйЭлемент.Значение = 1 Тогда
            ТекущиеДанные =  Элементы.Ремонты.ТекущиеДанные;
            
            НовыйЗаказ = Объект.ЗаказыНаРемонт.Добавить();
            НовыйЗаказ.КодЗаказаНаРемонт = МаксимальныйКодЗаказаНаРемонт;
            НовыйЗаказ.Представление = ПолучитьПредставлениеЗаказа(НовыйЗаказ.КодЗаказаНаРемонт);
            НовыйЗаказ.ОбъектЭксплуатации = ОбъектЭксплуатации;
            ЗаполнитьЗначенияСвойств(НовыйЗаказ, ТекущиеДанные, "ДатаНачала, Длительность, ЕдиницаИзмеренияДлительности, Подразделение");
            
            ТекущиеДанные.КодЗаказаНаРемонт = НовыйЗаказ.КодЗаказаНаРемонт;
            ТекущиеДанные.ДатаНачалаЗаказаНаРемонт = ТекущиеДанные.ДатаНачала;
            ТекущиеДанные.ДлительностьЗаказаНаРемонт = ТекущиеДанные.Длительность;
            ТекущиеДанные.ЕдиницаИзмеренияДлительностиЗаказаНаРемонт = ТекущиеДанные.ЕдиницаИзмеренияДлительности;
            ТекущиеДанные.ПодразделениеЗаказаНаРемонт = ТекущиеДанные.Подразделение;
            ТекущиеДанные.ПредставлениеЗаказаНаРемонт = НовыйЗаказ.Представление;
            
            МаксимальныйКодЗаказаНаРемонт = МаксимальныйКодЗаказаНаРемонт + 1;
            ТекущийОбъектЭксплуатацииСпискаВыбораЗаказа = Неопределено;
            
            ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ТекущиеДанные);
            
        Иначе
            
            НайденныеСтроки = Объект.ЗаказыНаРемонт.НайтиСтроки(Новый Структура("КодЗаказаНаРемонт", ВыбранныйЭлемент.Значение));
            Если НайденныеСтроки.Количество() = 0 Тогда
                Возврат;
            Иначе
                СтрокаЗаказа = НайденныеСтроки[0];
                СтруктураЗаполнения.КодЗаказаНаРемонт = ВыбранныйЭлемент.Значение;
                СтруктураЗаполнения.ПредставлениеЗаказаНаРемонт = СтрокаЗаказа.Представление;
                СтруктураЗаполнения.ДатаНачалаЗаказаНаРемонт = СтрокаЗаказа.ДатаНачала;
                СтруктураЗаполнения.ДлительностьЗаказаНаРемонт = СтрокаЗаказа.Длительность;
                СтруктураЗаполнения.ЕдиницаИзмеренияДлительностиЗаказаНаРемонт = СтрокаЗаказа.ЕдиницаИзмеренияДлительности;
                СтруктураЗаполнения.ПодразделениеЗаказаНаРемонт = СтрокаЗаказа.Подразделение;
                
            КонецЕсли;
            
        КонецЕсли;
        
        Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
            СтрокаРемонта = Ремонты.НайтиПоИдентификатору(ИдентификаторСтроки);
            Если СтрокаРемонта.ЭтоСтрокаВидаРемонта Тогда
                ЗаполнитьЗначенияСвойств(СтрокаРемонта, СтруктураЗаполнения);
            КонецЕсли;
        КонецЦикла;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РемонтыСвернуть(Команда)
	РазвернутьДерево(0);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыРазвернутьОбъекты(Команда)
	РазвернутьДерево(1);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыРазвернутьУзлы(Команда)
	РазвернутьДерево(2);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Уровней, СтрокиДерева=Неопределено)
	
	Если СтрокиДерева = Неопределено Тогда
		СтрокиДерева = Ремонты.ПолучитьЭлементы();
	КонецЕсли;
	
	Сворачивать = (Уровней = 0);
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Сворачивать Тогда
			Элементы.Ремонты.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		Иначе
			Элементы.Ремонты.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
			РазвернутьДерево(Уровней-1, СтрокаДерева.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыИзменить(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	ТекущиеДанные.ИзмененыМатериалыИРаботы = Истина;
	
	Элементы.СтраницыМатериалыИРаботы.ТекущаяСтраница = Элементы.СтраницаМатериалыИРаботыТаблица;
	Элементы.МатериалыИРаботы.ОтборСтрок = Новый ФиксированнаяСтруктура("КодРемонта", ТекущиеДанные.КодРемонта);
	
	ЗаполнитьМатериалыИРаботыПоВидуРемонта(ТекущиеДанные.ВидРемонта, ТекущиеДанные.КодРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИзменить(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	ТекущиеДанные.ИзмененыТрудозатраты = Истина;
	
	Элементы.СтраницыТрудозатраты.ТекущаяСтраница = Элементы.СтраницаТрудозатратыТаблица;
	Элементы.Трудозатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("КодРемонта", ТекущиеДанные.КодРемонта);
	
	ЗаполнитьТрудозатратыПоВидуРемонта(ТекущиеДанные.ВидРемонта, ТекущиеДанные.КодРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыИзменить(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	ТекущиеДанные.ИзмененыРабочиеЦентры = Истина;
	
	Элементы.СтраницыРабочиеЦентры.ТекущаяСтраница = Элементы.СтраницаРабочиеЦентрыТаблица;
	Элементы.РабочиеЦентры.ОтборСтрок = Новый ФиксированнаяСтруктура("КодРемонта", ТекущиеДанные.КодРемонта);
	
	ЗаполнитьРабочиеЦентрыПоОбъекту(ТекущиеДанные.ОбъектЭксплуатации, ТекущиеДанные.КодРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗакрыть(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	ТекущиеДанные.ИзмененыМатериалыИРаботы = Ложь;
	УдалитьСвязанныеДанные("МатериалыИРаботы", ТекущиеДанные.КодРемонта);
	
	Элементы.СтраницыМатериалыИРаботы.ТекущаяСтраница = Элементы.СтраницаМатериалыИРаботыСписок;
	МатериалыИРаботы.Параметры.УстановитьЗначениеПараметра("ВидРемонта", ТекущиеДанные.ВидРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗакрыть(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	ТекущиеДанные.ИзмененыТрудозатраты = Ложь;
	УдалитьСвязанныеДанные("Трудозатраты", ТекущиеДанные.КодРемонта);
	
	Элементы.СтраницыТрудозатраты.ТекущаяСтраница = Элементы.СтраницаТрудозатратыСписок;
	Трудозатраты.Параметры.УстановитьЗначениеПараметра("ВидРемонта", ТекущиеДанные.ВидРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыЗакрыть(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	ТекущиеДанные.ИзмененыРабочиеЦентры = Ложь;
	УдалитьСвязанныеДанные("РабочиеЦентры", ТекущиеДанные.КодРемонта);
	
	Элементы.СтраницыРабочиеЦентры.ТекущаяСтраница = Элементы.СтраницаРабочиеЦентрыСписок;
	РабочиеЦентры.Параметры.УстановитьЗначениеПараметра("ОбъектЭксплуатации", ТекущиеДанные.ОбъектЭксплуатации);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьПоВидуРемонта(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	
	ЗаполнитьМатериалыИРаботыПоВидуРемонта(ТекущиеДанные.ВидРемонта, ТекущиеДанные.КодРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьПоВидуРемонта(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	
	ЗаполнитьТрудозатратыПоВидуРемонта(ТекущиеДанные.ВидРемонта, ТекущиеДанные.КодРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыЗаполнитьПоОбъекту(Команда)
	
	Если Элементы.Ремонты.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Ремонты.ТекущиеДанные;
	
	ЗаполнитьРабочиеЦентрыПоОбъекту(ТекущиеДанные.ОбъектЭксплуатации, ТекущиеДанные.КодРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаРемонтЗаполнитьМероприятие(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаказыНаРемонтЗаполнитьМероприятиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.РемонтныеМероприятия.ФормаВыбора",,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаРемонтЗаполнитьМероприятиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РемонтноеМероприятие = Результат;
    Если ЗначениеЗаполнено(РемонтноеМероприятие) Тогда
        Для Каждого Строка Из Элементы.ЗаказыНаРемонт.ВыделенныеСтроки Цикл
            Если ТипЗнч(Строка) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
                Объект.ЗаказыНаРемонт.НайтиПоИдентификатору(Строка).РемонтноеМероприятие = РемонтноеМероприятие;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОтмечен.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЭтоСтрокаВидаРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДатаНачала.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЭтоСтрокаВидаРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыКодЗаказаНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.КодЗаказаНаРемонт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыНаРемонтОбъектЭксплуатации.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыНаРемонт.ОбъектЭксплуатации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>';
																|en = '<variants are not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыИРаботыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.МатериалыИРаботы.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыИРаботыСписокНоменклатураЕдиницаИзмерения", 
                                                                   "МатериалыИРаботы.Упаковка");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыПредставлениеЗаказаНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.Отмечен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЭтоСтрокаВидаРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не планируется>';
																|en = '<not planned>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыПредставлениеЗаказаНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.Отмечен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.КодЗаказаНаРемонт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыКодЗаказаНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.Отмечен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЭтоСтрокаВидаРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДатаНачала.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДлительность.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыЕдиницаИзмеренияДлительности.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.Отмечен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЭтоСтрокаВидаРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Ложь, Истина, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДатаНачала.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДатаНачалаЗаказаНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ДатаНачала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ДатаНачалаЗаказаНаРемонт");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтличающейсяСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыПодразделение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыПодразделениеЗаказаНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ПодразделениеЗаказаНаРемонт");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтличающейсяСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДлительность.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыЕдиницаИзмеренияДлительности.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДлительностьПоЗаказуНаРемонт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыЕдиницаИзмеренияДлительностиЗаказаНаРемонт.Имя);

	ГруппаОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборЭлемента.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтборЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.Длительность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ДлительностьЗаказаНаРемонт");

	ОтборЭлемента = ГруппаОтборЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЕдиницаИзмеренияДлительности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЕдиницаИзмеренияДлительностиЗаказаНаРемонт");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтличающейсяСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборОбщиеВидыРемонтовОбщийВидРемонта.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборОбщиеВидыРемонтов.ОбщийВидРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не заполнен>';
																|en = '<Not filled in>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Ремонты.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.КодЗаказаНаРемонт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийЗаказНаРемонтВыделенияРемонтов");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.Отмечен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЭтоСтрокаВидаРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыНаРемонт.КодЗаказаНаРемонт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийЗаказНаРемонтВыделенияЗаказов");

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДатаНачалаЗаказаНаРемонт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыЕдиницаИзмеренияДлительностиЗаказаНаРемонт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыПодразделениеЗаказаНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.Отмечен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ЭтоСтрокаВидаРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыНаРемонтДатаНачала.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыНаРемонт.ДатаНачала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыНаРемонтЕдиницаИзмеренияДлительности.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыНаРемонт.ЕдиницаИзмеренияДлительности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыНаРемонтПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыНаРемонт.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДлительность.Имя);
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыДлительностьПоЗаказуНаРемонт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ремонты.ИндексКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = Новый СписокЗначений();
	ОтборЭлемента.ПравоеЗначение.Добавить(1);
	ОтборЭлемента.ПравоеЗначение.Добавить(2);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

КонецПроцедуры

// Возвращает представление заказа на ремонт
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеЗаказа(Код)
	
	ПредставлениеЗаказа = НСтр("ru = '№ %Код%';
								|en = 'No. %Код%'");
	ПредставлениеЗаказа = СтрЗаменить(ПредставлениеЗаказа, "%Код%", Формат(Код-1, "ЧГ=0"));
	
	Возврат ПредставлениеЗаказа;
	
КонецФункции

// Обработка рекурсивного обхода дерева "Ремонты" для выставления переданного значения отметки.
//
&НаКлиенте
Процедура УстановитьОтметкуСтрокДереваРемонтов(Отметка, Знач Строки = Неопределено)
	
	Если Строки = Неопределено Тогда
		Строки = Ремонты.ПолучитьЭлементы();
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("Отмечен", Отметка);
	Если Не Отметка Тогда
		СтруктураЗаполнения.Вставить("КодЗаказаНаРемонт", 0);
		СтруктураЗаполнения.Вставить("ПредставлениеЗаказаНаРемонт", "");
	КонецЕсли;
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.ЭтоСтрокаВидаРемонта Тогда
			ЗаполнитьЗначенияСвойств(Строка, СтруктураЗаполнения);
		Иначе
			УстановитьОтметкуСтрокДереваРемонтов(Отметка, Строка.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик смены страницы навигации формы
//
// Параметры:
// 		ИмяСтраницы - Строка - Текстовое наименование элемента управления страницы.
//
&НаКлиенте
Процедура НавигацияФормы(КомандаДалее=Истина)
	
	СтруктураПерехода = Новый Структура(
		"ТекущаяСтраница, СледующаяСтраница, ВидимостьКомандыНавигацииНазад, ВидимостьКомандыНавигацииДалее");
	
	СтруктураПерехода.ТекущаяСтраница = Элементы.СтраницыНавигацииФормы.ТекущаяСтраница;
	СтруктураПерехода.СледующаяСтраница = СтруктураПерехода.ТекущаяСтраница;
	
	СтруктураПерехода.ВидимостьКомандыНавигацииДалее = Истина;
	СтруктураПерехода.ВидимостьКомандыНавигацииНазад = Истина;
	
	Если КомандаДалее Тогда
		
		Если СтруктураПерехода.ТекущаяСтраница = Элементы.СтраницаНавигацииПараметры Тогда
			
			ТекущийОбъектЭксплуатацииСпискаВыбораЗаказа = Неопределено;
			СтруктураПерехода.СледующаяСтраница = Элементы.СтраницаНавигацииРаспоряжения;
			
			СменитьСтраницуНавигацииФормы("ВыполнитьПланированиеРемонтныхРабот", СтруктураПерехода);
			
		ИначеЕсли СтруктураПерехода.ТекущаяСтраница = Элементы.СтраницаНавигацииРаспоряжения Тогда
			
			СтруктураПерехода.ВидимостьКомандыНавигацииДалее = Ложь;
			СтруктураПерехода.СледующаяСтраница = Элементы.СтраницаНавигацииЗаказыНаРемонт;
			СменитьСтраницуНавигацииФормы("СоздатьЗаказыНаРемонт", СтруктураПерехода);
			
		ИначеЕсли СтруктураПерехода.ТекущаяСтраница = Элементы.СтраницаНавигацииЗаказыНаРемонт Тогда
			
			СтруктураПерехода.ВидимостьКомандыНавигацииНазад = Ложь;
			СтруктураПерехода.СледующаяСтраница = Элементы.СтраницаНавигацииПараметры;
			СменитьСтраницуНавигацииФормы(Неопределено, СтруктураПерехода);
		КонецЕсли;
		
	Иначе
		
		Если СтруктураПерехода.ТекущаяСтраница = Элементы.СтраницаНавигацииПараметры Тогда
			
			СтруктураПерехода.СледующаяСтраница = Элементы.СтраницаНавигацииПараметры;
			СтруктураПерехода.ВидимостьКомандыНавигацииНазад = Ложь;
			СменитьСтраницуНавигацииФормы(Неопределено, СтруктураПерехода);
			
		ИначеЕсли СтруктураПерехода.ТекущаяСтраница = Элементы.СтраницаНавигацииРаспоряжения Тогда
			
			СтруктураПерехода.СледующаяСтраница = Элементы.СтраницаНавигацииПараметры;
			СтруктураПерехода.ВидимостьКомандыНавигацииНазад = Ложь;
			СменитьСтраницуНавигацииФормы(Неопределено, СтруктураПерехода);
			
		ИначеЕсли СтруктураПерехода.ТекущаяСтраница = Элементы.СтраницаНавигацииЗаказыНаРемонт Тогда
			
			СтруктураПерехода.СледующаяСтраница = Элементы.СтраницаНавигацииРаспоряжения;
			СтруктураПерехода.ВидимостьКомандыНавигацииДалее = Истина;
			
			Если СозданныеЗаказы.Количество() = 0 Тогда
				
				СменитьСтраницуНавигацииФормы(Неопределено, СтруктураПерехода);
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'На текущем шаге обработки были созданы документы заказов на ремонт';
									|en = 'R&M order documents were created on the current step'");
				ВариантыОтветов = Новый СписокЗначений;
				ВариантыОтветов.Добавить("ПометитьЗаказыНаУдаление", НСтр("ru = 'Пометить заказы на удаление';
																			|en = 'Mark the orders for deletion'"));
				ВариантыОтветов.Добавить("ОтменитьПереход", НСтр("ru = 'Отменить переход назад';
																|en = 'Cancel going back'"));
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СменитьСтраницуНавигацииФормы", ЭтаФорма, СтруктураПерехода),
					ТекстВопроса,
					ВариантыОтветов);
				
			КонецЕсли;
			
			ТекущийОбъектЭксплуатацииСпискаВыбораЗаказа = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуНавигацииФормы(Действия=Неопределено, ДополнительныеПараметры=Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура(Действия);
	
	Если СтруктураДействий.Свойство("СоздатьЗаказыНаРемонт") Тогда
		ЕстьОшибки = Ложь;
		СоздатьЗаказыНаРемонт(ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			СтруктураДействий.Вставить("ОтменитьПереход");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ВыполнитьПланированиеРемонтныхРабот") Тогда
		
		ВыполнитьПланированиеРемонтныхРабот();
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПометитьЗаказыНаУдаление") Тогда
		ЕстьОшибки = Ложь;
		УдалитьЗаказыНаРемонт(ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			СтруктураДействий.Вставить("ОтменитьПереход");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СтруктураДействий.Свойство("ОтменитьПереход") Тогда
		
		Элементы.НавигацияНазад.Видимость = ДополнительныеПараметры.ВидимостьКомандыНавигацииНазад;
		Элементы.НавигацияДалее.Видимость = ДополнительныеПараметры.ВидимостьКомандыНавигацииДалее;
		Элементы.НавигацияПродолжитьСДругимиОтборами.Видимость = Не ДополнительныеПараметры.ВидимостьКомандыНавигацииДалее;
		Элементы.СтраницыНавигацииФормы.ТекущаяСтраница = ДополнительныеПараметры.СледующаяСтраница;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьПростойОтборВОтборахКомпоновки(ИмяПоля, Значение)
	
	ЭтоСписок = (ТипЗнч(Значение) = Тип("СписокЗначений"));
	
	ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекДляОтборов.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
			
			ЭлементПользовательскойНастройки = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
				
				ЗначениеЗаполнено = ?(ЭтоСписок, Значение.Количество()<>0, Не Значение.Пустая());
				ЭлементПользовательскойНастройки.Использование = (Значение <> Неопределено) И ЗначениеЗаполнено;
				Если ЭлементПользовательскойНастройки.Использование Тогда
					
					ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.Равно;
					
					Если ЭтоСписок Тогда
						ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
					КонецЕсли;
					
					ЭлементПользовательскойНастройки.ВидСравнения  = ВариантВидаСравнения;
					ЭлементПользовательскойНастройки.ПравоеЗначение = Значение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса полученых из компоновки данных макета обработки
//
&НаСервере
Функция ПолучитьЗапросСОтборамиКомпоновкиДанных()
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетКомпоновкиДанныхДляСерверныхОтборов");
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекДляОтборов.ПолучитьНастройки(), , , , Ложь, );
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.ЗапросПоРемонтируемымОбъектам.Запрос);
	
	Для каждого ПараметрКомпоновки Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

// Инициализирует компоновщик настроек произвольных отборов
//
&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекДляОтборов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетКомпоновкиДанныхДляСерверныхОтборов");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроекДляОтборов.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекДляОтборов.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
КонецПроцедуры

// Выполняет планирование ремонтов по объектам отобранным на странице параметров
//
&НаСервере
Процедура ВыполнитьПланированиеРемонтныхРабот()
	
	ЗаполнитьПланируемыеОбъектыПоЗаданномуОтбору();
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.РассчитатьПланРемонтныхРабот();
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
	ЗаполнитьРемонтыПоДаннымОбработки();
	
КонецПроцедуры

// Заполняет табличную часть обработки "Объекты ремонта" обработки по отбору заданному на странице параметров.
//
&НаСервере
Процедура ЗаполнитьПланируемыеОбъектыПоЗаданномуОтбору()
	
	// Заполнение объектов ремонта к планированию
	Объект.ОбъектыРемонтаКПланированию.Очистить();
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных();
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОбъектыРемонтаКПланированию.Загрузить(Результат.Выгрузить());
	
	// Заполнение общих видов ремонтов к планированию
	Объект.ОбщиеВидыРемонтовКПланированию.Загрузить(
		ОтборОбщиеВидыРемонтов.Выгрузить(
			ОтборОбщиеВидыРемонтов.НайтиСтроки(
				Новый Структура("Отмечен", Истина)
			),
			"ОбщийВидРемонта"));
	
	// Заполнение частот к планированию
	Объект.ЧастотыКПланированию.Загрузить(
		ОтборЧастотыПланирования.Выгрузить(
			ОтборЧастотыПланирования.НайтиСтроки(
				Новый Структура("Отмечен", Истина)
			),
			"ЧастотаПланирования"));
	
КонецПроцедуры

// Заполняет дерево формы "Ремонты" по данным табличной части обработки "Ремонты"
//
&НаСервере
Процедура ЗаполнитьРемонтыПоДаннымОбработки()
	
	ЗаполнитьПредставленияТаблицыЗаказовНаРемонт();
	
	ЭлементыДерева = Ремонты.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	ДобавленныеОбъекты = Новый Соответствие;
	
	СписокВыбораЗаказа = Элементы.РемонтыКодЗаказаНаРемонт.СписокВыбора;
	СписокВыбораЗаказа.Очистить();
	
	СоответствиеПредставленийЗаказов = Новый Соответствие;
	
	МаксимальныйКодЗаказаНаРемонт = 2;
	
	Для Каждого СтрокаОбработки Из Объект.Ремонты Цикл
		
		РемонтируемыйОбъект = ?(ЗначениеЗаполнено(СтрокаОбработки.Узел), СтрокаОбработки.Узел, СтрокаОбработки.ОбъектЭксплуатации);
		
		СтрокиОбъекта = ДобавленныеОбъекты.Получить(СтрокаОбработки.ОбъектЭксплуатации);
		Если СтрокиОбъекта = Неопределено Тогда
			СтрокаДерева = ЭлементыДерева.Добавить();
			СтрокаДерева.ИндексКартинки = 1;
			СтрокаДерева.ОбъектЭксплуатации = СтрокаОбработки.ОбъектЭксплуатации;
			СтрокаДерева.Представление = Строка(СтрокаОбработки.ОбъектЭксплуатации);
			
			СтрокиОбъекта = СтрокаДерева.ПолучитьЭлементы();
			ДобавленныеОбъекты.Вставить(СтрокаОбработки.ОбъектЭксплуатации, СтрокиОбъекта);
		КонецЕсли;
		
		СтрокиУзла = ДобавленныеОбъекты.Получить(РемонтируемыйОбъект);
		Если СтрокиУзла = Неопределено Тогда
			СтрокаДерева = СтрокиОбъекта.Добавить();
			СтрокаДерева.ИндексКартинки = 2;
			СтрокаДерева.Узел = СтрокаОбработки.Узел;
			СтрокаДерева.Представление = Строка(СтрокаОбработки.Узел);
			
			СтрокиУзла = СтрокаДерева.ПолучитьЭлементы();
			ДобавленныеОбъекты.Вставить(РемонтируемыйОбъект, СтрокиУзла);
		КонецЕсли;
		
		СтрокаРемонта = СтрокиУзла.Вставить(0);
		СтрокаРемонта.Отмечен = Истина;
		СтрокаРемонта.ИндексКартинки = ?(СтрокаОбработки.РемонтныйЦикл, 4, 3);
		СтрокаРемонта.Представление = Строка(СтрокаОбработки.ВидРемонта);
		СтрокаРемонта.ЭтоСтрокаВидаРемонта = Истина;
		ЗаполнитьЗначенияСвойств(СтрокаРемонта, СтрокаОбработки);
		
		ПредставлениеЗаказа = СоответствиеПредставленийЗаказов.Получить(СтрокаРемонта.КодЗаказаНаРемонт);
		Если ПредставлениеЗаказа = Неопределено Тогда
			ПредставлениеЗаказа = ПолучитьПредставлениеЗаказа(СтрокаРемонта.КодЗаказаНаРемонт);
			СоответствиеПредставленийЗаказов.Вставить(СтрокаРемонта.КодЗаказаНаРемонт, ПредставлениеЗаказа);
		КонецЕсли;
		СтрокаРемонта.ПредставлениеЗаказаНаРемонт = ПредставлениеЗаказа;
		
	КонецЦикла;
	
	ОбъектДерева = РеквизитФормыВЗначение("Ремонты");
	ОбъектДерева.Строки.Сортировать("ЭтоСтрокаВидаРемонта Убыв, ДатаНачала", Истина);
	ЗначениеВРеквизитФормы(ОбъектДерева, "Ремонты");
	
	СтруктураОтбора = Новый Структура("КодЗаказаНаРемонт");
	СтруктураЗаполнения = Новый Структура("ДатаНачалаЗаказаНаРемонт, ДлительностьЗаказаНаРемонт, ЕдиницаИзмеренияДлительностиЗаказаНаРемонт, ПодразделениеЗаказаНаРемонт");
	
	МаксимальныйКодЗаказаНаРемонт = 2;
	Для Каждого СтрокаЗаказа Из Объект.ЗаказыНаРемонт Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаЗаказа);
		
		СтруктураЗаполнения.ДатаНачалаЗаказаНаРемонт = СтрокаЗаказа.ДатаНачала;
		СтруктураЗаполнения.ДлительностьЗаказаНаРемонт = СтрокаЗаказа.Длительность;
		СтруктураЗаполнения.ЕдиницаИзмеренияДлительностиЗаказаНаРемонт = СтрокаЗаказа.ЕдиницаИзмеренияДлительности;
		СтруктураЗаполнения.ПодразделениеЗаказаНаРемонт = СтрокаЗаказа.Подразделение;
		ЗаполнитьРемонтыПоОтбору(СтруктураОтбора, СтруктураЗаполнения);
		
		МаксимальныйКодЗаказаНаРемонт = Макс(МаксимальныйКодЗаказаНаРемонт, СтрокаЗаказа.КодЗаказаНаРемонт);
		
	КонецЦикла;
	
	МаксимальныйКодЗаказаНаРемонт = МаксимальныйКодЗаказаНаРемонт + 1;
	
КонецПроцедуры

// Заполняет табличную чать обработки "Ремонты" рекурсивным обходом данных дерева "Ремонта" формы.
//
&НаСервере
Процедура ЗаполнитьРемонты(ТекущийОбъект, СтрокиДерева=Неопределено)
	
	Если СтрокиДерева = Неопределено Тогда
		ТекущийОбъект.Ремонты.Очистить();
		СтрокиДерева = Ремонты.ПолучитьЭлементы();
	ИначеЕсли СтрокиДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ЭтоСтрокаВидаРемонта Тогда
			НоваяСтрока = ТекущийОбъект.Ремонты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Иначе
			ЗаполнитьРемонты(ТекущийОбъект, СтрокаДерева.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет колонку "Представление" в табличной части обработки "Заказы на ремонт"
//
&НаСервере
Процедура ЗаполнитьПредставленияТаблицыЗаказовНаРемонт()
	
	ЗаказыНаРемонтМаксимальныйКод = 0;
	Для Каждого ЗаказНаРемонт Из Объект.ЗаказыНаРемонт Цикл
		ЗаказНаРемонт.Представление = ПолучитьПредставлениеЗаказа(ЗаказНаРемонт.КодЗаказаНаРемонт);
		Если ЗаказыНаРемонтМаксимальныйКод < ЗаказНаРемонт.КодЗаказаНаРемонт Тогда
			ЗаказыНаРемонтМаксимальныйКод = ЗаказНаРемонт.КодЗаказаНаРемонт;
		КонецЕсли;
	КонецЦикла;
	
	ЗаказыНаРемонтМаксимальныйКод = ЗаказыНаРемонтМаксимальныйКод + 1;
	
КонецПроцедуры // ЗаполнитьПредставленияТаблицыЗаказовНаРемонт()

// Заполняет строки дерева ремонтов по отбору переданными значениями
//
&НаСервере
Процедура ЗаполнитьРемонтыПоОтбору(Отбор, ЗначенияЗаполнения, Знач Строки=Неопределено)
	
	Если Строки = Неопределено Тогда
		
		ОбъектДерева = РеквизитФормыВЗначение("Ремонты");
		Если ОбъектДерева.Строки.НайтиСтроки(Отбор, Истина).Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Строки = Ремонты.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.ЭтоСтрокаВидаРемонта Тогда
			
			Если СоответствуетОтбору(Строка, Отбор) Тогда
				ЗаполнитьЗначенияСвойств(Строка, ЗначенияЗаполнения);
			КонецЕсли;
			
		Иначе
			ЗаполнитьРемонтыПоОтбору(Отбор, ЗначенияЗаполнения, Строка.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет соответствие значений строки дерева значениям переданной структуры
//
&НаСервере
Функция СоответствуетОтбору(Данные, СтруктураОтбора)
	
	Для Каждого КлючЗначение Из СтруктураОтбора Цикл
		Если Данные[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Заполняет табличную часть "Материалы и работы" для текущей строки ремонта
//
&НаСервере
Процедура ЗаполнитьМатериалыИРаботыПоВидуРемонта(ВидРемонта, КодРемонта)
	
	// Очистить строки по отбору
	УдалитьСвязанныеДанные("МатериалыИРаботы", КодРемонта);
	
	// Заполнить по данным вида ремонта
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыРемонтовМатериалыИРаботы.Номенклатура КАК Номенклатура,
		|	ВидыРемонтовМатериалыИРаботы.Характеристика КАК Характеристика,
		|	ВидыРемонтовМатериалыИРаботы.Упаковка КАК Упаковка,
		|	ВидыРемонтовМатериалыИРаботы.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВидыРемонтовМатериалыИРаботы.Количество КАК Количество,
		|	&КодРемонта КАК КодРемонта,
		|	ВЫБОР
		|		КОГДА ВидыРемонтовМатериалыИРаботы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ ВидыРемонтовМатериалыИРаботы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|				ИЛИ ВидыРемонтовМатериалыИРаботы.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.ВидыРемонтов.МатериалыИРаботы КАК ВидыРемонтовМатериалыИРаботы
		|ГДЕ
		|	ВидыРемонтовМатериалыИРаботы.Ссылка = &ВидРемонта");
	
	Запрос.УстановитьПараметр("ВидРемонта", ВидРемонта);
	Запрос.УстановитьПараметр("КодРемонта", КодРемонта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.МатериалыИРаботы.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть "Трудозатраты" для текущей строки ремонта
//
&НаСервере
Процедура ЗаполнитьТрудозатратыПоВидуРемонта(ВидРемонта, КодРемонта)
	
	// Очистить строки по отбору
	УдалитьСвязанныеДанные("Трудозатраты", КодРемонта);
	
	// Заполнить по данным вида ремонта
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&КодРемонта КАК КодРемонта,
		|	ВидыРемонтовТрудозатраты.ВидРабот КАК ВидРабот,
		|	ВидыРемонтовТрудозатраты.Количество КАК Количество
		|ИЗ
		|	Справочник.ВидыРемонтов.Трудозатраты КАК ВидыРемонтовТрудозатраты
		|ГДЕ
		|	ВидыРемонтовТрудозатраты.Ссылка = &ВидРемонта");
	
	Запрос.УстановитьПараметр("ВидРемонта", ВидРемонта);
	Запрос.УстановитьПараметр("КодРемонта", КодРемонта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.Трудозатраты.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть "Рабочие центры" для текущей строки ремонта
//
&НаСервере
Процедура ЗаполнитьРабочиеЦентрыПоОбъекту(ОбъектЭксплуатации, КодРемонта)
	
	// Очистить строки по отбору
	УдалитьСвязанныеДанные("РабочиеЦентры", КодРемонта);
	
	// Заполнить по данным объекта ремонта
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&КодРемонта КАК КодРемонта,
		|	РабочиеЦентры.РабочийЦентр КАК РабочийЦентр
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	РабочиеЦентры.Ссылка = &ОбъектЭксплуатации");
	
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", ОбъектЭксплуатации);
	Запрос.УстановитьПараметр("КодРемонта", КодРемонта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.РабочиеЦентры.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет связанные данные из указанной таблицы
//
&НаСервере
Процедура УдалитьСвязанныеДанные(ИмяТаблицы, КодРемонта)
	
	Таблица = Объект[ИмяТаблицы];
	Для Каждого Строка Из Таблица.НайтиСтроки(Новый Структура("КодРемонта", КодРемонта)) Цикл
		Таблица.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Создает заказы на ремонт по данным обработки
//
&НаСервере
Процедура СоздатьЗаказыНаРемонт(Отказ = Ложь)
	
	СоответствиеАктуальныхКодов = Новый Соответствие;
	ПроверитьЗаполнениеРемонтов(Отказ, СоответствиеАктуальныхКодов);
	ПроверитьЗаполнениеЗаказовНаРемонт(Отказ, СоответствиеАктуальныхКодов);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЗаказы.Очистить();
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	
	ЗаполнитьРемонты(ОбъектОбработки);
	
	МассивЗаказовПомеченныхНаУдаление = УдаляемыеЗаказы.ВыгрузитьЗначения();
	СтруктураВыполнения = ОбъектОбработки.СформироватьЗаказыНаРемонт(МассивЗаказовПомеченныхНаУдаление);
	
	УдаляемыеЗаказы.ЗагрузитьЗначения(МассивЗаказовПомеченныхНаУдаление);
	СозданныеЗаказы.ЗагрузитьЗначения(СтруктураВыполнения.МассивЗаказовНаРемонт);
	
	СозданныеЗаказыНаРемонт.Параметры.УстановитьЗначениеПараметра("МассивЗаказов", СтруктураВыполнения.МассивЗаказовНаРемонт);
	
	ШаблонОшибки = НСтр("ru = 'При проведении документа %Заказ% обнаружены ошибки - %КоличествоОшибок% шт.
	|Документ не проведен';
	|en = 'Errors are detected while posting document %Заказ% - %КоличествоОшибок%.
	|The document is not posted'");
	
	Для Каждого КлючИЗначение Из СтруктураВыполнения.ПереопределенныеСообщения Цикл
		
		СсылкаЗаказаНаРемонт = КлючИЗначение.Ключ;
		МассивОшибок = КлючИЗначение.Значение;
		Если МассивОшибок.Количество() <> 0 Тогда
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Заказ%", СсылкаЗаказаНаРемонт);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоОшибок%", МассивОшибок.Количество());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				СсылкаЗаказаНаРемонт);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет созданные заказы на ремонт
//
&НаСервере
Процедура УдалитьЗаказыНаРемонт(Отказ=Ложь)
	
	МассивУдаленных = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЭлементСписка Из СозданныеЗаказы Цикл
			
			Ссылка = ЭлементСписка.Значение;
			ОбъектДокумента = Ссылка.ПолучитьОбъект();
			ОбъектДокумента.УстановитьПометкуУдаления(Истина);
			Попытка
				ОбъектДокумента.Записать();
			Исключение
				Отказ = Истина;
				ВызватьИсключение;
			КонецПопытки;
			МассивУдаленных.Добавить(Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытия = 
			НСтр("ru = 'Планирование ремонтных работ';
				|en = 'Create planned R&M orders'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "."
			+ НСтр("ru = 'Удаление ранее созданных документов';
					|en = 'Deleting previously created documents'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Для Каждого Заказ Из МассивУдаленных Цикл
		УдаляемыеЗаказы.Добавить(Заказ);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения ремонтов
//
&НаСервере
Процедура ПроверитьЗаполнениеРемонтов(Отказ, АктуальныеКодыЗаказовНаРемонт, Строки=Неопределено)
	
	Если Строки = Неопределено Тогда
		Строки = Ремонты.ПолучитьЭлементы();
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'Не заполнено поле ""%Поле%"" в строке таблицы ""Распоряжения на ремонт""';
						|en = '""%Поле%"" is required in the ""R&M requests"" table'");
	
	Для Каждого СтрокаРемонта Из Строки Цикл
		
		Если СтрокаРемонта.ЭтоСтрокаВидаРемонта Тогда
			
			Если СтрокаРемонта.Отмечен Тогда
				
				Если ЗначениеЗаполнено(СтрокаРемонта.КодЗаказаНаРемонт) И СтрокаРемонта.КодЗаказаНаРемонт <> 1 Тогда
					АктуальныеКодыЗаказовНаРемонт.Вставить(СтрокаРемонта.КодЗаказаНаРемонт, Истина);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрЗаменить(ШаблонОшибки, "%Поле%", НСтр("ru = 'Заказ на ремонт';
																|en = 'R&M order'")),,
						"Ремонты",,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ПроверитьЗаполнениеРемонтов(Отказ, АктуальныеКодыЗаказовНаРемонт, СтрокаРемонта.ПолучитьЭлементы());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения заказов на ремонт
//
&НаСервере
Процедура ПроверитьЗаполнениеЗаказовНаРемонт(Отказ, АктуальныеКодыЗаказовНаРемонт)
	
	ШаблонОшибки = НСтр("ru = 'Не заполнено поле ""%Поле%""';
						|en = '""%Поле%"" is required'");
	ШаблонАдресаОшибки = НСтр("ru = 'в строке %НомерСтроки% таблицы ""Заказы на ремонт""';
								|en = 'in line %НомерСтроки% of the ""R&M orders"" table'");
	
	Для Каждого ЗаказНаРемонт Из Объект.ЗаказыНаРемонт Цикл
		
		Если АктуальныеКодыЗаказовНаРемонт.Получить(ЗаказНаРемонт.КодЗаказаНаРемонт) <> Неопределено Тогда // Для данного заказа есть ремонты
			
			АдресОшибки = СтрЗаменить(ШаблонАдресаОшибки, "%НомерСтроки%", ЗаказНаРемонт.НомерСтроки);
			
			Если Не ЗначениеЗаполнено(ЗаказНаРемонт.ДатаНачала) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрЗаменить(ШаблонОшибки, "%Поле%", НСтр("ru = 'Дата начала';
															|en = 'Start date'")) + АдресОшибки,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЗаказыНаРемонт", ЗаказНаРемонт.НомерСтроки, "ДатаНачала"),,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЗаказНаРемонт.ЕдиницаИзмеренияДлительности) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрЗаменить(ШаблонОшибки, "%Поле%", НСтр("ru = 'Ед. изм. длительности';
															|en = 'Duration Unit'")) + АдресОшибки,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЗаказыНаРемонт", ЗаказНаРемонт.НомерСтроки, "ЕдиницаИзмеренияДлительности"),,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЗаказНаРемонт.Подразделение) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрЗаменить(ШаблонОшибки, "%Поле%", НСтр("ru = 'Подразделение';
															|en = 'Business unit'")) + АдресОшибки,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЗаказыНаРемонт", ЗаказНаРемонт.НомерСтроки, "Подразделение"),,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказыНаРемонтДлительностьПриИзмененииНаСервере()

	ТекущиеДанные = Объект.ЗаказыНаРемонт.НайтиПоИдентификатору(Элементы.ЗаказыНаРемонт.ТекущаяСтрока);
	
	Отбор = Новый Структура("КодЗаказаНаРемонт", ТекущиеДанные.КодЗаказаНаРемонт);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ДлительностьЗаказаНаРемонт", ТекущиеДанные.Длительность);
	ЗначенияЗаполнения.Вставить("ЕдиницаИзмеренияДлительностиЗаказаНаРемонт", ТекущиеДанные.ЕдиницаИзмеренияДлительности);
	
	ЗаполнитьРемонтыПоОтбору(Отбор, ЗначенияЗаполнения);
	
КонецПроцедуры

#КонецОбласти
