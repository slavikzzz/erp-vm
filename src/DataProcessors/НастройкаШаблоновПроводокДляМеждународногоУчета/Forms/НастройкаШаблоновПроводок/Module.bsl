
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Организация = Параметры.Организация;
	НастройкаФормированияПроводок = Параметры.НастройкаФормированияПроводок;
	ПланСчетов = Параметры.ПланСчетов;
	
	Если ЗначениеЗаполнено(НастройкаФормированияПроводок) И Не ЗначениеЗаполнено(ПланСчетов) Тогда
		ПланСчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаФормированияПроводок, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПланСчетов) Тогда
		ПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.ПланСчетовПоУмолчанию();
	КонецЕсли;
	
	НастроитьДинамическиеСпискиПоПлануСчетов();
			
	Если Не ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		НастройкаФормированияПроводок = 
			Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкаФормированияПроводокПоУмолчанию(ПланСчетов);
	КонецЕсли;
	
	НастройкаФормированияПроводокПриИзмененииСервер();
	
	ОтборПланаСчетов = "Все";
	ТекущийМесяц = НачалоМесяца(ТекущаяДатаСеанса());
	
	Если Параметры.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = Параметры.ХозяйственнаяОперация;
		Если ТипЗнч(ХозяйственнаяОперация) = Тип("ПеречислениеСсылка.ХозяйственныеОперации") Тогда
			ХозяйственнаяОперация = МеждународныйУчетОбщегоНазначения.ХозяйственнаяОперацияПоПеречислению(ХозяйственнаяОперация);
		КонецЕсли;
		Элементы.ХозяйственныеОперации.ТекущаяСтрока = ХозяйственнаяОперация;
	КонецЕсли;
	
	УстановитьДоступностьВидимостьЭлементовНаСервере();
	УстановитьОтборШаблоновПроводок(Справочники.НастройкиХозяйственныхОпераций.ПустаяСсылка());
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = ШаблоныПроводок.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокТипов;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ШаблоныПроводокКоманднаяПанель;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДополнительныеПараметры = Новый Структура;
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастроитьДинамическиеСпискиПоПлануСчетов();
	НастройкаФормированияПроводокПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	НеЗагружатьНастройки = Ложь;
	Если ЗначениеЗаполнено(ПланСчетов) 
			Или ЗначениеЗаполнено(НастройкаФормированияПроводок) 
			Или ЗначениеЗаполнено(Организация) Тогда
		НеЗагружатьНастройки = Истина;
	КонецЕсли;
	
	Если НеЗагружатьНастройки И Настройки["Организация"] <> Неопределено Тогда
		Настройки.Удалить("Организация");
	КонецЕсли;
	
	Если НеЗагружатьНастройки И Настройки["ПланСчетов"] <> Неопределено Тогда
		Настройки.Удалить("ПланСчетов");
	КонецЕсли;
	
	Если НеЗагружатьНастройки И Настройки["НастройкаФормированияПроводок"] <> Неопределено Тогда
		Настройки.Удалить("НастройкаФормированияПроводок");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ЗаконченаНастройкаШаблоновПроводокМеждународногоУчета");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанШаблонПроводки" 
		И Элементы.ХозяйственныеОперации.ТекущаяСтрока <> Неопределено Тогда
		ОповеститьОбИзменении(Элементы.ХозяйственныеОперации.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПланаСчетовПриИзменении(Элемент)
	
	ИзменитьОтображениеТаблицыПланаСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормированияПроводокПриИзменении(Элемент)
	
	НастройкаФормированияПроводокПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ПланСчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНастройкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("ПланСчетов",   ПланСчетов);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СоздатьЗаписьПланыСчетовОрганизаций" Тогда
		
		ОбработкаОповещения = Новый ОписаниеОповещения("ВыборПериодаЗаписиПланыСчетовОрганизаций", ЭтотОбъект);
		ПоказатьВводДаты(ОбработкаОповещения, ТекущийМесяц, Нстр("ru = 'Включить настройку с';
																|en = 'Enable setting since'"), ЧастиДаты.Дата);
		
		СтандартнаяОбработка = Ложь;
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьИсториюПланыСчетовОрганизаций" Тогда
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.Форма.ФормаСписка", 
			ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХозяйственныеоперации

&НаКлиенте
Процедура ХозяйственныеОперацииПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикХозяйственныеОперацииПриАктивизацииСтроки",0.2,Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланСчетовМеждународный

&НаКлиенте
Процедура ПланСчетовМеждународныйПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикПланСчетовПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШаблоныПроводокПоСчету

&НаКлиенте
Процедура ШаблоныПроводокПоСчетуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Поле = Элементы.ШаблоныПроводокПоСчетуГруппаФинансовогоУчетаПредставление
		И ЗначениеЗаполнено(ТекущиеДанные.ГруппаФинансовогоУчета) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ГруппаФинансовогоУчета);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.ШаблонПроводки);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШаблоныПроводок

&НаСервереБезКонтекста
Процедура ШаблоныПроводокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныПроводокДляМеждународногоУчета.Ссылка КАК Ссылка,
		|	ШаблоныПроводокДляМеждународногоУчета.ДополнительныйОтбор КАК ДополнительныйОтбор
		|ИЗ
		|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводокДляМеждународногоУчета
		|ГДЕ
		|	ШаблоныПроводокДляМеждународногоУчета.Ссылка В(&ШаблоныПроводок)";
	
	Запрос.УстановитьПараметр("ШаблоныПроводок", Строки.ПолучитьКлючи());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НастройкаПоШаблону = Новый Соответствие();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДополнительныйОтбор = ВыборкаДетальныеЗаписи.ДополнительныйОтбор; //ХранилищеЗначения
		НастройкаПоШаблону.Вставить(ВыборкаДетальныеЗаписи.Ссылка, ДополнительныйОтбор.Получить());
	КонецЦикла;
	
	СхемаПоХозяйственнойОперации = Неопределено;
	Для Каждого Строка Из Строки Цикл
		Если СхемаПоХозяйственнойОперации = Неопределено Тогда
			СхемаПоХозяйственнойОперации = ИсточникиДанныхПовтИсп.СхемаПолученияДанных(Строка.Ключ.Операция);
			Если СхемаПоХозяйственнойОперации = Неопределено Тогда
				Прервать;
			КонецЕсли;
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПоХозяйственнойОперации));
		КонецЕсли;
		ДополнительныйОтбор = НастройкаПоШаблону.Получить(Строка.Ключ);
		Если СхемаПоХозяйственнойОперации <> Неопределено
			И ДополнительныйОтбор <> Неопределено Тогда 
				КомпоновщикНастроек.ЗагрузитьНастройки(ДополнительныйОтбор);
				Строка.Значение.Данные.ПредставлениеОтбора = Строка(КомпоновщикНастроек.Настройки.Отбор);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПроводокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
	СоздатьГруппуИлиШаблонПроводок(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьХозоперациюВНастройкуФормированияПроводок(Команда)
	
	ИзменитьОтражениеХозяйственныхОперацийВНастройке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьХозоперациюИзНастройкиФормированияПроводок(Команда)
	
	ИзменитьОтражениеХозяйственныхОперацийВНастройке(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВНастройкуФормированияПроводок(Команда)
	
	МассивШаблонов = Элементы.ШаблоныПроводок.ВыделенныеСтроки;
	Если МассивШаблонов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьВНастройкеФормированияПроводок(МассивШаблонов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьИзНастройкиФормированияПроводок(Команда)
	
	МассивШаблонов = Элементы.ШаблоныПроводок.ВыделенныеСтроки;
	Если МассивШаблонов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьВНастройкеФормированияПроводок(МассивШаблонов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВНастройкуФормированияПроводокШаблоныПроводокПоСчету(Команда)
	
	МассивВыбранныхСтрок = Элементы.ШаблоныПроводокПоСчету.ВыделенныеСтроки;
	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивШаблонов = МассивВыбранныхШаблоновПроводокПоСчету(МассивВыбранныхСтрок);
	ОтразитьВНастройкеФормированияПроводок(МассивШаблонов, Истина);
	ПодключитьОбработчикОжидания("ОбработчикПланСчетовПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьИзНастройкиФормированияПроводокШаблоныПроводокПоСчету(Команда)
	
	МассивВыбранныхСтрок = Элементы.ШаблоныПроводокПоСчету.ВыделенныеСтроки;
	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивШаблонов = МассивВыбранныхШаблоновПроводокПоСчету(МассивВыбранныхСтрок);
	ОтразитьВНастройкеФормированияПроводок(МассивШаблонов, Ложь);
	ПодключитьОбработчикОжидания("ОбработчикПланСчетовПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы(Команда)
	
	ОбновитьДанныеФормыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	СоздатьГруппуИлиШаблонПроводок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблонПроводки(Команда)
	
	СоздатьГруппуИлиШаблонПроводок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормированияПроводок(Команда)
	Если ПроверитьЗаполнение() Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ", НастройкаФормированияПроводок);
		ОткрытьФорму("Справочник.НастройкиФормированияПроводокМеждународногоУчета.ФормаОбъекта", 
			ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
 
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
 
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ШаблоныПроводок);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ШаблоныПроводок, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ШаблоныПроводок);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общие

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

#Область ХозяйственныеОперации

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ХозяйственныеОперации.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХозяйственныеОперации.НеОтражаетсяВНастройкеФормированияПроводок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

#КонецОбласти

#Область ШаблоныПроводок

#Область ОформлениеЭлементов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ЭтоГруппаШаблонов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ДействующийШаблон");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.Игнорировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	// Отключение видимости колонок
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокВариантСовместногоПрименения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ЭтоГруппаШаблонов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
#КонецОбласти

#Область ОформлениеГрупп

	// Отключение видимости колонок
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетДебетаПоУмолчанию.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетДебетаПоУмолчаниюНаименование.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетКредитаПоУмолчанию.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетКредитаПоУмолчаниюНаименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ЭтоГруппаШаблонов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Справочная надпись для группы с вариантом "Вытеснение"
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокВариантСовместногоПрименения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ЭтоГруппаШаблонов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ВариантСовместногоПрименения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Первый в порядке следования шаблон проводки, удовлетворяющий условиям дополнительного отбора';
																|en = 'First posting template which satisfies the additional filter conditions'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстСправочнойНадписи);

	// Справочная надпись для группы с вариантом "Все"
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокВариантСовместногоПрименения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ЭтоГруппаШаблонов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ВариантСовместногоПрименения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Все;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Все шаблоны проводок, входящие в группу';
																|en = 'All posting templates included in the group'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстСправочнойНадписи);
	
#КонецОбласти

#КонецОбласти

#Область ШаблоныПроводокПоСчету

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокПоСчетуВидДвижения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводокПоСчету.ВидДвижения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыДвиженийБухгалтерии.Дебет;

	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Дт';
																|en = 'Dr'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаДебета);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокПоСчетуВидДвижения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводокПоСчету.ВидДвижения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыДвиженийБухгалтерии.Кредит;

	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Кт';
																|en = 'Cr'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаКредита);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокПоСчету.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводокПоСчету.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводокПоСчету.Действует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводокПоСчету.Игнорировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	// Текст для счетов по умолчанию
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокПоСчетуГруппаФинансовогоУчетаПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводокПоСчету.ГруппаФинансовогоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет по умолчанию>';
																|en = '<Default account>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВидимостьЭлементовНаСервере()

	ДоступноИзменениеНастроекМФУ = МеждународныйУчетОбщегоНазначения.ДоступноИзменениеНастроекМеждународногоУчета();
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ХозяйственныеОперацииГруппаИзменитьОтражениеВНастройкеФормированияПроводок");
	МассивЭлементов.Добавить("ШаблоныПроводокСоздатьШаблонПроводки");
	МассивЭлементов.Добавить("ШаблоныПроводокСоздатьГруппу");
	МассивЭлементов.Добавить("ШаблоныПроводокГруппаИзменитьОтражениеВНастройкеФормированияПроводок");
	МассивЭлементов.Добавить("ШаблоныПроводокПоСчетуГруппаСоздать");
	МассивЭлементов.Добавить("ШаблоныПроводокПоСчетуГруппаИзменитьОтражениеВНастройкеФормированияПроводок");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ДоступноИзменениеНастроекМФУ);

КонецПроцедуры

&НаКлиенте
Функция НастройкаФормированияПроводокЗаполнена()

	НастройкаФормированияПроводокЗаполнена = ЗначениеЗаполнено(НастройкаФормированияПроводок);
	
	Если Не НастройкаФормированияПроводокЗаполнена Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнена ""Настройка формирования проводок""';
														|en = 'The ""Posting schema"" cannot be blank'"), ,"НастройкаФормированияПроводок");
	КонецЕсли;

	Возврат НастройкаФормированияПроводокЗаполнена;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеФормыСервер()
	
	НастроитьДинамическиеСпискиПоНастройкеФормированияПроводок();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическиеСпискиПоПлануСчетов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ПланСчетовМеждународный, 
		"ПланСчетов",
		ПланСчетов,
		,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ШаблоныПроводок,
		"ПланСчетов",
		ПланСчетов,
		,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ХозяйственныеОперации,
		"ПланСчетов",
		ПланСчетов,
		Истина);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическиеСпискиПоНастройкеФормированияПроводок()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ХозяйственныеОперации,
		"НастройкаФормированияПроводок",
		НастройкаФормированияПроводок,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ШаблоныПроводок,
		"НастройкаФормированияПроводок",
		НастройкаФормированияПроводок, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПолучитьСтатусНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ПланСчетовПриИзмененииСервер()
	
	НастроитьДинамическиеСпискиПоПлануСчетов();
	
	НастройкаФормированияПроводок = 
		Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкаФормированияПроводокПоУмолчанию(ПланСчетов);
	НастройкаФормированияПроводокПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НастройкаФормированияПроводокПриИзмененииСервер()
	
	ПолучитьСтатусНастройки();
	ОбновитьДанныеФормыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусНастройки()
	
	Если Не ЗначениеЗаполнено(ПланСчетов) 
			Или Не ЗначениеЗаполнено(Организация)
			Или Не ЗначениеЗаполнено(НастройкаФормированияПроводок) Тогда
		СтатусНастройки = Неопределено;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчета.Период) КАК Период
	|ПОМЕСТИТЬ ВтПрименяетсяС
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчета
	|ГДЕ
	|	ПланыСчетовМеждународногоУчета.Организация = &Организация
	|	И ПланыСчетовМеждународногоУчета.ПланСчетов = &ПланСчетов
	|	И ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрименяетсяС.Период КАК ПериодС,
	|	МИНИМУМ(ЕСТЬNULL(ПланыСчетовМеждународногоУчета.Период, &ПустаяДата)) КАК ПериодПо
	|ИЗ
	|	ВтПрименяетсяС КАК ПрименяетсяС
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчета
	|	ПО
	|		ПланыСчетовМеждународногоУчета.Организация = &Организация
	|		И ПланыСчетовМеждународногоУчета.ПланСчетов = &ПланСчетов
	|		И ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок <> &НастройкаФормированияПроводок
	|		И ПланыСчетовМеждународногоУчета.Период >ПрименяетсяС.Период
	|ГДЕ
	|	ПрименяетсяС.Период <> &ПустаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрименяетсяС.Период";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ПериодПо) Тогда
			Представление = СтрШаблон(НСтр("ru = 'Применялась с %1 по %2';
											|en = 'Has been applied since %1 till %2'"), 
													Формат(Выборка.ПериодС, "ДЛФ=D"), Формат(Выборка.ПериодПо, "ДЛФ=D"));
			СтатусНастройки = Новый ФорматированнаяСтрока(
													Представление, , , , "ОткрытьИсториюПланыСчетовОрганизаций");
		Иначе
			Представление = СтрШаблон(НСтр("ru = 'Применяется с %1';
											|en = 'Applied since %1'"), Формат(Выборка.ПериодС, "ДЛФ=D"));
			СтатусНастройки = Новый ФорматированнаяСтрока(
													Представление, , , , "ОткрытьИсториюПланыСчетовОрганизаций");
		КонецЕсли;
		
	ИначеЕсли ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПланыСчетовМеждународногоУчетаОрганизаций) Тогда 
		Представление = СтрШаблон(НСтр("ru = 'Включить для организации с %1';
										|en = 'Enable for company since %1'"), Формат(ТекущийМесяц, "ДЛФ=D"));
		СтатусНастройки = Новый ФорматированнаяСтрока(Представление, , ЦветаСтиля.ПоясняющийОшибкуТекст, , "СоздатьЗаписьПланыСчетовОрганизаций");
	Иначе
		Представление = СтрШаблон(НСтр("ru = 'Не применяется для организации';
										|en = 'Not applied for the company'"));
		СтатусНастройки = Новый ФорматированнаяСтрока(Представление, , ЦветаСтиля.ПоясняющийОшибкуТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗаписиПланыСчетовОрганизаций(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьПланыСчетовОрганизаций(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьПланыСчетовОрганизаций(Период)
	
	МенеджерЗаписи = РегистрыСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.ПланСчетов = ПланСчетов;
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.НастройкаФормированияПроводок = НастройкаФормированияПроводок;
	МенеджерЗаписи.Записать();
	
	ПолучитьСтатусНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПоХозяйственнымОперациям

&НаКлиенте
Процедура ОбработчикХозяйственныеОперацииПриАктивизацииСтроки()

	ТекущиеДанные = Элементы.ХозяйственныеОперации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборШаблоновПроводок(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборШаблоновПроводок(Знач ХозяйственнаяОперация)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ШаблоныПроводок, "Операция", ХозяйственнаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтражениеХозяйственныхОперацийВНастройке(ОтражатьВМеждународномУчете)

	МассивСтрок = Элементы.ХозяйственныеОперации.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкаФормированияПроводокЗаполнена() Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОтражениеХозяйственныхОперацийВНастройкеФормированияПроводокСервер(МассивСтрок, ПланСчетов, НастройкаФормированияПроводок, ОтражатьВМеждународномУчете);
	
	ОповеститьОбИзменении(Элементы.ХозяйственныеОперации.ТекущаяСтрока);
	
	Элементы.ШаблоныПроводок.Обновить();

КонецПроцедуры

// Описание
// 
// Параметры:
// 	МассивСтрок - Массив из СправочникСсылка.НастройкиХозяйственныхОпераций - 
// 	ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - 
// 	НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - 
// 	ОтражатьВМеждународномУчете - Булево - 
&НаСервереБезКонтекста
Процедура ИзменитьОтражениеХозяйственныхОперацийВНастройкеФормированияПроводокСервер(МассивСтрок, ПланСчетов, НастройкаФормированияПроводок, ОтражатьВМеждународномУчете)
	
	НаборЗаписей = РегистрыСведений.ХозяйственныеОперацииНеОтражаемыеВМеждународномУчете.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаФормированияПроводок.Установить(НастройкаФормированияПроводок);
	ТаблицаДобавляемыхЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаУдаляемыхЗаписей = НаборЗаписей.Выгрузить();
	
	НаборЗаписей.Прочитать();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Для каждого Строка Из МассивСтрок Цикл
		Запись = ТаблицаЗаписей.Найти(Строка.Ссылка, "Операция");
		Если Запись = Неопределено Тогда
			Если Не ОтражатьВМеждународномУчете Тогда
				НоваяСтрока = ТаблицаДобавляемыхЗаписей.Добавить();
				НоваяСтрока.НастройкаФормированияПроводок = НастройкаФормированияПроводок;
				НоваяСтрока.Операция = Строка;
			КонецЕсли;
		Иначе
			Если ОтражатьВМеждународномУчете Тогда
				НоваяСтрока = ТаблицаУдаляемыхЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДобавляемыхЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Загрузить(ТаблицаДобавляемыхЗаписей);
		НаборЗаписей.Записать(Ложь);		
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	Если ТаблицаУдаляемыхЗаписей.Количество() > 0 Тогда
		
		Для каждого Строка Из ТаблицаУдаляемыхЗаписей Цикл
			НаборЗаписей.Отбор.Операция.Установить(Строка.Операция);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ОтразитьПодчиненныеШаблоныПроводокВНастройкеФормированияПроводок(ТаблицаУдаляемыхЗаписей, ПланСчетов, НастройкаФормированияПроводок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВНастройкеФормированияПроводок(МассивШаблонов, ВключитьВНастройкуФормированияПроводок)

	Если Не НастройкаФормированияПроводокЗаполнена() Тогда
		Возврат;
	КонецЕсли;

	ОтразитьВНастройкеФормированияПроводокНаСервере(МассивШаблонов, ВключитьВНастройкуФормированияПроводок);
	
	ОповеститьОбИзменении(Элементы.ХозяйственныеОперации.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтразитьПодчиненныеШаблоныПроводокВНастройкеФормированияПроводок(ОтражаемыеОперации, ПланСчетов, НастройкаФормированияПроводок)
	
	ВидыОпераций = ОтражаемыеОперации.ВыгрузитьКолонку("Операция");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныПроводокДляМеждународногоУчета.Ссылка КАК ШаблонПроводки
		|ИЗ
		|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводокДляМеждународногоУчета
		|ГДЕ
		|	ШаблоныПроводокДляМеждународногоУчета.Операция В(&МассивОпераций)
		|	И ШаблоныПроводокДляМеждународногоУчета.ПланСчетов = &ПланСчетов");
		
	Запрос.УстановитьПараметр("МассивОпераций", ВидыОпераций);
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ШаблоныПроводокДляОтражения = РезультатЗапроса.ВыгрузитьКолонку("ШаблонПроводки");
		ИзменитьОтражениеШаблоновПроводокВНастройкеФормированияПроводок(ШаблоныПроводокДляОтражения, НастройкаФормированияПроводок, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьВНастройкеФормированияПроводокНаСервере(МассивШаблонов, ВключитьВНастройкуФормированияПроводок)
	
	ИзменитьОтражениеШаблоновПроводокВНастройкеФормированияПроводок(МассивШаблонов, НастройкаФормированияПроводок, ВключитьВНастройкуФормированияПроводок);
	Элементы.ШаблоныПроводок.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьОтражениеШаблоновПроводокВНастройкеФормированияПроводок(МассивШаблонов, НастройкаФормированияПроводок, ВключитьВНастройкуФормированияПроводок)
	
	НаборЗаписей = РегистрыСведений.ПравилаОтраженияВМеждународномУчете.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаФормированияПроводок.Установить(НастройкаФормированияПроводок);
	ТаблицаДобавляемыхЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаУдаляемыхЗаписей = НаборЗаписей.Выгрузить();
	
	НаборЗаписей.Прочитать();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Для каждого Шаблон Из МассивШаблонов Цикл
		Запись = ТаблицаЗаписей.Найти(Шаблон, "ШаблонПроводки");
		Если Запись = Неопределено Тогда
			Если ВключитьВНастройкуФормированияПроводок Тогда
				НоваяСтрока = ТаблицаДобавляемыхЗаписей.Добавить();
				НоваяСтрока.НастройкаФормированияПроводок = НастройкаФормированияПроводок;
				НоваяСтрока.ШаблонПроводки = Шаблон;
			КонецЕсли;
		Иначе
			Если Не ВключитьВНастройкуФормированияПроводок Тогда
				НоваяСтрока = ТаблицаУдаляемыхЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДобавляемыхЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Загрузить(ТаблицаДобавляемыхЗаписей);
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	Для каждого Строка Из ТаблицаУдаляемыхЗаписей Цикл
		НаборЗаписей.Отбор.ШаблонПроводки.Установить(Строка.ШаблонПроводки);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьСозданияШаблоновПроводок()

	ТекущиеДанные = Элементы.ХозяйственныеОперации.ТекущиеДанные;
	Возврат ?(ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа, Ложь, Истина);

КонецФункции

&НаКлиенте
Процедура СоздатьГруппуИлиШаблонПроводок(СоздатьГруппу)

	Если НЕ ПроверитьВозможностьСозданияШаблоновПроводок() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	ДополнительныеПараметры.Вставить("ЭтоГруппаШаблонов", СоздатьГруппу);
	ПараметрыФормы.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ПланСчетов", ПланСчетов);
	ЗначенияЗаполнения.Вставить("Операция", Элементы.ХозяйственныеОперации.ТекущаяСтрока);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ШаблоныПроводокДляМеждународногоУчета.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область НастройкаПоПлануСчетов

&НаКлиенте
Процедура ОбработчикПланСчетовПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ПланСчетовМеждународный.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Счет = Неопределено;
	Иначе
		Счет = ТекущиеДанные.Ссылка;
	КонецЕсли;
	ЗаполнитьТаблицуШаблоновПроводокПоСчету(Счет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуШаблоновПроводокПоСчету(Счет)
	
	ШаблоныПроводокПоСчету.Очистить();
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныПроводок.ШаблонПроводки КАК ШаблонПроводки,
	|	ПРЕДСТАВЛЕНИЕ(ШаблоныПроводок.ШаблонПроводки) КАК ШаблонПроводкиПредставление,
	|	ШаблоныПроводок.Операция КАК Операция,
	|	ШаблоныПроводок.ВидДвижения КАК ВидДвижения,
	|	ШаблоныПроводок.УстановленДополнительныйОтбор КАК УстановленДополнительныйОтбор,
	|	ШаблоныПроводок.Игнорировать КАК Игнорировать,
	|	ШаблоныПроводок.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ПРЕДСТАВЛЕНИЕ(ШаблоныПроводок.ГруппаФинансовогоУчета) КАК ГруппаФинансовогоУчетаПредставление,
	|	ВЫБОР
	|		КОГДА НЕ ПравилаОтражения.ШаблонПроводки ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК Действует
	|ИЗ
	|	(ВЫБРАТЬ
	|		ШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|		ШаблоныПроводок.Операция КАК Операция,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет) КАК ВидДвижения,
	|		ШаблоныПроводок.УстановленДополнительныйОтбор КАК УстановленДополнительныйОтбор,
	|		ШаблоныПроводок.Игнорировать КАК Игнорировать,
	|		НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчета
	|	ИЗ
	|		Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ГДЕ
	|		ШаблоныПроводок.СчетДебетаПоУмолчанию = &Счет
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ШаблоныПроводок.Ссылка,
	|		ШаблоныПроводок.Операция,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит),
	|		ШаблоныПроводок.УстановленДополнительныйОтбор,
	|		ШаблоныПроводок.Игнорировать,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ГДЕ
	|		ШаблоныПроводок.СчетКредитаПоУмолчанию = &Счет
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ШаблоныПроводок.Ссылка,
	|		ШаблоныПроводок.Операция,
	|		ПравилаУточненияСчетов.ВидДвижения,
	|		ШаблоныПроводок.УстановленДополнительныйОтбор,
	|		ШаблоныПроводок.Игнорировать,
	|		ПравилаУточненияСчетов.ГруппаФинансовогоУчета
	|	ИЗ
	|		Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточненияСчетов
	|		 ПО (ПравилаУточненияСчетов.СчетУчета = &Счет)
	|			И ШаблоныПроводок.Ссылка = ПравилаУточненияСчетов.ШаблонПроводки
	|	) КАК ШаблоныПроводок
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтражения
	|	ПО 
	|		(ПравилаОтражения.НастройкаФормированияПроводок = &НастройкаФормированияПроводок)
	|		И ШаблоныПроводок.ШаблонПроводки = ПравилаОтражения.ШаблонПроводки
	|";

	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Сортировать("ВидДвижения, ГруппаФинансовогоУчетаПредставление, ШаблонПроводкиПредставление");
	ШаблоныПроводокПоСчету.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеТаблицыПланаСчетов()
	
	Если ОтборПланаСчетов = "Все" Тогда
		Элементы.ПланСчетовМеждународный.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.ПланСчетовМеждународный.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПланСчетовМеждународный, 
		"ИспользуетсяВШаблонах", 
		Истина, 
		ОтборПланаСчетов = "ИспользуемыеВШаблонах");
	
КонецПроцедуры

&НаКлиенте
Функция МассивВыбранныхШаблоновПроводокПоСчету(МассивВыбранныхСтрок)

	МассивШаблонов = Новый Массив;
	Для каждого Строка Из МассивВыбранныхСтрок Цикл
		Шаблон = ШаблоныПроводокПоСчету.НайтиПоИдентификатору(Строка).ШаблонПроводки;
		Если ЗначениеЗаполнено(Шаблон) Тогда
			МассивШаблонов.Добавить(Шаблон);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивШаблонов;
	
КонецФункции

#КонецОбласти

#КонецОбласти
