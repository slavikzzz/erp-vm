
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция-конструктор параметров заполнения помощника
//
// Возвращаемое значение:
//   Структура:
//     * Организация - СправочникСсылка.Организации - головная организация
//     * СписокОрганизаций - Массив из СправочникСсылка.Организации - вся структура организации
//     * РегистрацияНО - СправочникСсылка.РегистрацииВНалоговомОргане - регистрация в налоговом органе головной организации
//     * ДатаНачала - Дата - дата начала расчета
//     * ДатаОкончания - Дата - дата окончания расчета
//     * Периодичность - ПеречислениеСсылка.Периодичность - периодичность декларации
//
Функция ПолучитьПараметрыЗаполнения() Экспорт

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",       Справочники.Организации.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("СписокОрганизаций", Новый Массив);
	ПараметрыЗаполнения.Вставить("РегистрацияНО",     Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ДатаНачала",        Дата(1, 1, 1));
	ПараметрыЗаполнения.Вставить("ДатаОкончания",     Дата(1, 1, 1));
	ПараметрыЗаполнения.Вставить("Периодичность",     Перечисления.Периодичность.ПустаяСсылка());
	
	Возврат ПараметрыЗаполнения;

КонецФункции

// Возвращает данные для заполнения помощника формирования деклараций по налогу на прибыль.
//
// Параметры:
//  ПараметрыЗаполнения  - см. ПолучитьПараметрыЗаполнения
//
// Возвращаемое значение:
//   Структура:
//     *ТаблицаНалоговойБазы - см. ПолучитьНалоговуюБазу
//     *ТаблицаНалоговойБазыРасшифровка - см. ПолучитьРасшифровкуНалоговойБазы
//     *ТаблицаДеклараций - см. ПолучитьДекларацииДляПомощника
//
Функция ПолучитьДанныеДляПомощникаЗаполненияДекларации(ПараметрыЗаполнения) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ПомощникЗаполненияДекларацииПоНалогуНаПрибыль.Форма.ФормаПомощника.Заполнить");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт КАК СуммаОборот
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания,, Счет В ИЕРАРХИИ (&СчетПрибыли),
		|		&МассивСубконто, Организация В (&СписокОрганизаций)
		|	И НЕ Субконто1 В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)),,) КАК
		|		ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Субконто1 КАК ВариантНалогообложенияПрибыли,
		|	ВариантыНалогообложенияПрибыли.КодМестаПредставления КАК КодМестаПредставления,
		|	ВариантыНалогообложенияПрибыли.ЛистДекларации КАК ЛистДекларации,
		|	ВариантыНалогообложенияПрибыли.ПризнакНалогоплательщика КАК ПризнакНалогоплательщика,
		|	ВариантыНалогообложенияПрибыли.НомерДокумента КАК НомерДокумента,
		|	ВариантыНалогообложенияПрибыли.КодВидаДохода КАК КодВидаДохода,
		|	ВариантыНалогообложенияПрибыли.КодВидаОперации КАК КодВидаОперации,
		|	ТаблицаДанных.СуммаОборот КАК НалоговаяБаза
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыНалогообложенияПрибыли КАК ВариантыНалогообложенияПрибыли
		|		ПО ТаблицаДанных.Субконто1 = ВариантыНалогообложенияПрибыли.Ссылка
		|ИТОГИ
 		|	СУММА(НалоговаяБаза)
 		|ПО
 		|	КодМестаПредставления";
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	
	СчетПрибыли = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль;
	Запрос.УстановитьПараметр("СчетПрибыли", СчетПрибыли);
	
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыЗаполнения.СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаОкончания",     ПараметрыЗаполнения.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачала",        ПараметрыЗаполнения.ДатаНачала);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаКодМестаПредставления = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаДеклараций = ПолучитьДекларацииДляЗаполненияПомощника(ПараметрыЗаполнения.Организация,
		ПараметрыЗаполнения.ДатаНачала, ПараметрыЗаполнения.ДатаОкончания, ПараметрыЗаполнения.Периодичность);
	ТаблицаНалоговойБазы = ПолучитьНалоговуюБазу();
	ТаблицаНалоговойБазыРасшифровка = ПолучитьРасшифровкуНалоговойБазы();
	
	КоличествоОбработанныхДанных = 0;
	
	Пока ВыборкаКодМестаПредставления.Следующий() Цикл
		
		КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + 1;
		
		СтрокаНалоговойБазы = ТаблицаНалоговойБазы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНалоговойБазы, ВыборкаКодМестаПредставления);
		СтрокаНалоговойБазы.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	
		Выборка = ВыборкаКодМестаПредставления.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			СтрокаРасшифровки = ТаблицаНалоговойБазыРасшифровка.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			СтрокаРасшифровки.ИдентификаторСтроки = СтрокаНалоговойБазы.ИдентификаторСтроки;
			СтрокаРасшифровки.СтавкаФБ = НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(
				ПараметрыЗаполнения.ДатаОкончания, ПараметрыЗаполнения.Организация, "%", Выборка.ВариантНалогообложенияПрибыли);
			СтрокаРасшифровки.СтавкаСубъектРФ = НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(ПараметрыЗаполнения.ДатаОкончания,
				ПараметрыЗаполнения.Организация, "%", Выборка.ВариантНалогообложенияПрибыли, ПараметрыЗаполнения.РегистрацияНО);
			
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("ТаблицаНалоговойБазы",            ТаблицаНалоговойБазы);
	ДанныеДляЗаполнения.Вставить("ТаблицаНалоговойБазыРасшифровка", ТаблицаНалоговойБазыРасшифровка);
	ДанныеДляЗаполнения.Вставить("ТаблицаДеклараций",               ТаблицаДеклараций);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанныхДанных);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

// Возвращает таблицу деклараций с кодами мест предоставления декларации
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - головная организация
//  ДатаНачала  - Дата - начало периода формирования декларации
//  ДатаОкончания  - Дата - конец периода формирования декларации
//  Периодичность  - ПеречислениеСсылка.Периодичность - вариант формирования декларации
//
// Возвращаемое значение:
//   ТаблицаЗначений   - см. ПолучитьДекларацииДляПомощника
//
Функция ПолучитьДекларацииДляЗаполненияПомощника(Организация, ДатаНачала, ДатаОкончания, Периодичность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РегламентированныйОтчет.Ссылка КАК РегламентированныйОтчет,
		|	РегламентированныйОтчет.ДанныеОтчета КАК ДанныеОтчета
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|ГДЕ
		|	РегламентированныйОтчет.Организация = &Организация
		|	И РегламентированныйОтчет.ДатаНачала = &ДатаНачала
		|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
		|	И РегламентированныйОтчет.Периодичность = &Периодичность
		|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
		|	И НЕ РегламентированныйОтчет.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ДатаНачала",     ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",  НачалоДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Периодичность",  Периодичность);
	Запрос.УстановитьПараметр("ИсточникОтчета", Метаданные.Отчеты.РегламентированныйОтчетПрибыль.Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТаблицаДеклараций = ПолучитьДекларацииДляПомощника();
	
	Пока Выборка.Следующий() Цикл
		ДанныеОтчета = Выборка.ДанныеОтчета.Получить();
		СтрокаТаблицы = ТаблицаДеклараций.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.КодМестаПредставления = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ПоМесту;
	КонецЦикла;
	
	ТаблицаДеклараций.Индексы.Добавить("КодМестаПредставления");
	
	Возврат ТаблицаДеклараций;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция-конструктор таблицы деклараций для заполнения помощника
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * РегламентированныйОтчет - ДокументСсылка.РегламентированныйОтчет - 
//     * КодМестаПредставления - Строка - 
//
Функция ПолучитьДекларацииДляПомощника()
	
	ТаблицаДеклараций = Новый ТаблицаЗначений();
	ТаблицаДеклараций.Колонки.Добавить("РегламентированныйОтчет", Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	ТаблицаДеклараций.Колонки.Добавить("КодМестаПредставления",   ОбщегоНазначения.ОписаниеТипаСтрока(3));
	
	Возврат ТаблицаДеклараций;
	
КонецФункции 

// Функция-конструктор таблицы налоговой базы
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * КодМестаПредставления - Строка - 
//     * НалоговаяБаза - Число - 
//     * ИдентификаторСтроки - УникальныйИдентификатор - 
//
Функция ПолучитьНалоговуюБазу()
	
	ТаблицаДеклараций = Новый ТаблицаЗначений();
	ТаблицаДеклараций.Колонки.Добавить("КодМестаПредставления",    ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаДеклараций.Колонки.Добавить("НалоговаяБаза",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДеклараций.Колонки.Добавить("ИдентификаторСтроки",      Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Возврат ТаблицаДеклараций;
	
КонецФункции 

// Функция-конструктор таблицы расшифровки налоговой базы
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ВариантНалогообложенияПрибыли - СправочникСсылка.ВариантыНалогообложенияПрибыли - 
//     * КодМестаПредставления - Строка - 
//     * ЛистДекларации - Строка - 
//     * КодВидаДохода - Строка - 
//     * КодВидаОперации - Строка - 
//     * ПризнакНалогоплательщика - Строка - 
//     * НомерДокумента - Строка - 
//     * НалоговаяБаза - Число - 
//     * ИдентификаторСтроки - УникальныйИдентификатор - 
//
Функция ПолучитьРасшифровкуНалоговойБазы()
	
	ТаблицаДеклараций = Новый ТаблицаЗначений();
	ТаблицаДеклараций.Колонки.Добавить("ВариантНалогообложенияПрибыли",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	ТаблицаДеклараций.Колонки.Добавить("КодМестаПредставления",    ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаДеклараций.Колонки.Добавить("ЛистДекларации",           ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаДеклараций.Колонки.Добавить("КодВидаДохода",            ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаДеклараций.Колонки.Добавить("КодВидаОперации",          ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаДеклараций.Колонки.Добавить("ПризнакНалогоплательщика", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаДеклараций.Колонки.Добавить("НомерДокумента",           ОбщегоНазначения.ОписаниеТипаСтрока(21));
	ТаблицаДеклараций.Колонки.Добавить("НалоговаяБаза",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДеклараций.Колонки.Добавить("ИдентификаторСтроки",      Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаДеклараций.Колонки.Добавить("СтавкаСубъектРФ",          ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	ТаблицаДеклараций.Колонки.Добавить("СтавкаФБ",                 ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	
	Возврат ТаблицаДеклараций;
	
КонецФункции 

#КонецОбласти

#КонецЕсли
