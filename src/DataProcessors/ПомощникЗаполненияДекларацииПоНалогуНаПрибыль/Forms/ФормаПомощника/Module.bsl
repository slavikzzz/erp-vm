
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИсточникОтчета = РегламентированнаяОтчетностьВызовСервера.ИсточникОтчета(
		"Отчет.РегламентированныйОтчетПрибыль.Форма.ОсновнаяФорма");
	ЗначениеВДанныеФормы(РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(ИсточникОтчета).ТаблицаФормОтчета(),
		мТаблицаФормОтчета);
	
	Элементы.ПолеРедакцияФормы.Видимость = НЕ (мТаблицаФормОтчета.Количество() > 1);
	
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Элементы.Организация.ТолькоПросмотр = Не УчетПоВсемОрганизациям;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(СписокДоступныхЮридическихЛиц().ВыгрузитьЗначения());
	
	Если Элементы.Организация.СписокВыбора.НайтиПоЗначению(Организация) = Неопределено Тогда
		Организация = Неопределено;
	КонецЕсли;
	
	ДоступныеОрганизацииОтсутствуют = Ложь;
	
	Если Элементы.Организация.СписокВыбора.Количество() = 0 Тогда
		
		ДоступныеОрганизацииОтсутствуют = Истина;
		ОбщегоНазначения.СообщитьПользователю(ДоступныеОрганизацииОтсутствуютТекст());
		Элементы.Организация.КнопкаОткрытия = Ложь;
		
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		Организация = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
		Элементы.НадписьОрганизация.Видимость = Ложь;
		
	КонецЕсли;
	
	ПеречислениеПериодичностьМесяц   = Перечисления.Периодичность.Месяц;
	ПеречислениеПериодичностьКвартал = Перечисления.Периодичность.Квартал;
	
	Если Не ЗначениеЗаполнено(мДатаНачалаПериодаОтчета) И Не ЗначениеЗаполнено(мДатаКонцаПериодаОтчета) Тогда
		мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(КонецКвартала(ТекущаяДатаСеанса()), -3));
		мДатаНачалаПериодаОтчета = НачалоМесяца(мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Периодичность)
		Или Не (Периодичность = ПеречислениеПериодичностьМесяц
		Или Периодичность = ПеречислениеПериодичностьКвартал) Тогда
		
		Периодичность = ПеречислениеПериодичностьКвартал;
		
	КонецЕсли;
	
	ПолеВыбораПериодичность = Периодичность;
	
	ИзменитьПериод(ЭтаФорма, 0);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Организация = ВыбранноеЗначение;
	
	ОбработатьОрганизацию(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = СписокДоступныхЮридическихЛиц(Текст);
	
	Если СписокВыбора.Количество() > 0 И ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = СписокВыбора;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ДоступныеОрганизацииОтсутствуют Тогда
		
		ПоказатьПредупреждение(, ДоступныеОрганизацииОтсутствуютТекст());
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораПериодичностиПоказаПериодаПриИзменении(Элемент)
	
	СтрВыбораПериодичностиПоказаПериода = ПолеВыбораПериодичностиПоказаПериода;
	
	СтрПериодОтчетаГод
		= ПредставлениеПериода(НачалоГода(мДатаКонцаПериодаОтчета), КонецГода(мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если (СтрНайти(ВРег(СтрВыбораПериодичностиПоказаПериода),"КВАРТАЛ") > 1)
		Или (СтрНайти(ВРег(СтрВыбораПериодичностиПоказаПериода),"ГОД") > 1)
		Или (СтрНайти(ВРег(СтрВыбораПериодичностиПоказаПериода),"МЕСЯЦЕВ") > 1)
		Или (СтрВыбораПериодичностиПоказаПериода = СтрПериодОтчетаГод) Тогда
		
		ПолеВыбораПериодичность = ПеречислениеПериодичностьКвартал;
		
	Иначе
		
		ПолеВыбораПериодичность = ПеречислениеПериодичностьМесяц;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПолучитьНачалоКонецПериода(СтрВыбораПериодичностиПоказаПериода,
		мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
	
	Если ПолеВыбораПериодичность = ПеречислениеПериодичностьКвартал Тогда
		мДатаКонцаПериодаОтчета  = КонецКвартала(мДатаКонцаПериодаОтчета);
		мДатаНачалаПериодаОтчета = НачалоКвартала(мДатаНачалаПериодаОтчета);
	Иначе
		мДатаКонцаПериодаОтчета  = КонецМесяца(мДатаКонцаПериодаОтчета);
		мДатаНачалаПериодаОтчета = НачалоМесяца(мДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	Периодичность = ПолеВыбораПериодичность;
	
	ПоказатьПериод(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеРедакцияФормыПриИзменении(Элемент)
	
	СтрРедакцияФормы = ПолеРедакцияФормы;
	// Ищем в таблице мТаблицаФормОтчета для определения выбранной формы отчета.
	ЗаписьПоиска = Новый Структура;
	ЗаписьПоиска.Вставить("РедакцияФормы",СтрРедакцияФормы);
	МассивСтрок = мТаблицаФормОтчета.НайтиСтроки(ЗаписьПоиска);	
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаВыбраннойФормы = МассивСтрок[0];
		// Присваиваем.
		мВыбраннаяФорма     = СтрокаВыбраннойФормы.ФормаОтчета;
		ОписаниеНормативДок = СтрокаВыбраннойФормы.ОписаниеОтчета;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДанныеНалоговойБазыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеНалоговойБазы.ТекущиеДанные;
	
	Если Поле = Элементы.ДанныеНалоговойБазыРасшифровкаНалоговойБазы Тогда
		ОткрытьФормуРасшифровкиНалоговойБазы(ТекущиеДанные);
	ИначеЕсли Поле = Элементы.ДанныеНалоговойБазыДокументыДекларацийПредставление Тогда
		ОткрытьСоздатьДекларациюПоНалогуНаПрибыль(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьПредыдущийПериод(Команда)
	
	ИзменитьПериод(ЭтаФорма, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСледующийПериод(Команда)
	
	ИзменитьПериод(ЭтаФорма, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицу(Команда)
	
	Если ДанныеНалоговойБазы.Количество() = 0 Тогда
		ЗаполнитьТаблицуНаСервере();
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТаблицуДанныхЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'Перед заполнением необходимо очистить таблицу данных.
				 |Продолжить?';
				 |en = 'To fill, clear the data table.
				 |Continue?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДеклараций(Команда)
	ОбновитьСписокДекларацийНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПериод(Форма, Шаг)
	
	Если Форма.ПолеВыбораПериодичность = Форма.ПеречислениеПериодичностьКвартал Тогда
		Форма.мДатаКонцаПериодаОтчета  = КонецКвартала(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг*3));
		Форма.мДатаНачалаПериодаОтчета = НачалоГода(Форма.мДатаКонцаПериодаОтчета);
	Иначе
		Форма.мДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, Шаг)); 
		Форма.мДатаНачалаПериодаОтчета = НачалоГода(Форма.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ПоказатьПериод(Форма);
	
КонецПроцедуры

// Отображение периодов на форме
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - 
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьПериод(Форма)
	
	ОбработкаПериодичностьОтчета(Форма);
	
	Форма.НадписьСрокПредставленияОтчета = ПолучитьСрокПредставленияОтчетности(Форма);
	
	КоличествоФорм = РегламентированнаяОтчетностьКлиентСервер.КоличествоФормСоответствующихВыбранномуПериоду(Форма);
	Если КоличествоФорм >= 1 Тогда
		
		Форма.Элементы.ПолеРедакцияФормы.Видимость = КоличествоФорм > 1;
		
	Иначе
		
		Форма.Элементы.ПолеРедакцияФормы.Видимость	 = Ложь;
		Форма.Элементы.ОткрытьФормуОтчета.Доступность = Ложь;
		
		Форма.ОписаниеНормативДок = НСтр("ru = 'Отсутствует в программе.';
										|en = 'Not in the application.'");
		
	КонецЕсли;
	
	Если Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")
		И НачалоМесяца(Форма.мДатаКонцаПериодаОтчета) = Дата(2020, 1, 1)
		Или Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")
		И НачалоКвартала(Форма.мДатаКонцаПериодаОтчета) = Дата(2020, 1, 1) Тогда
		
		// Помощник не поддерживает старые формы отчетности
		Форма.Элементы["УстановитьПредыдущийПериод"].Доступность = Ложь;
	Иначе
		Форма.Элементы["УстановитьПредыдущийПериод"].Доступность = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ВыборФормыРегламентированногоОтчетаПоУмолчанию(Форма);
	
	// В РезультирующаяТаблица - действующие на выбранный период формы.
	// Заполним список выбора форм отчетности.
	Форма.Элементы.ПолеРедакцияФормы.СписокВыбора.Очистить();
	
	Для Каждого ЭлФорма Из Форма.РезультирующаяТаблица Цикл
		Форма.Элементы.ПолеРедакцияФормы.СписокВыбора.Добавить(ЭлФорма.РедакцияФормы);
	КонецЦикла;

	Форма.НадписьКтоСдаетОтчет = НСтр("ru = 'Только организации (п.1 ст.246 НК РФ).';
										|en = 'Only companies (cl. 1 of art. 246 of Tax Code of the Russian Federation)'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаПериодичностьОтчета(Форма)
	
	// Периодичность может быть разной.
	Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Очистить();
	
	ДатаКонца  = КонецКвартала(Форма.мДатаКонцаПериодаОтчета);
	ДатаНачала = НачалоГода(Форма.мДатаНачалаПериодаОтчета);
	ФорматДаты = НСтр("ru = 'ДФ=''ММММ гггг"" г.""''';
						|en = 'DF=''MMMM yyyy'''");
	
	Если Форма.Периодичность = Форма.ПеречислениеПериодичностьМесяц Тогда
		ВремДатаКонца = ДобавитьМесяц(ДатаКонца,-2);
		
		Если Месяц(ВремДатаКонца) = 1 Тогда 
			СтрПериодОтчета = Формат(ВремДатаКонца, ФорматДаты);
		Иначе
			СтрПериодОтчета = Формат(ДатаНачала, ФорматДаты) + " - " + Формат(ВремДатаКонца, ФорматДаты);
		КонецЕсли;
			
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Добавить(СтрПериодОтчета);
			
		Пока ВремДатаКонца <> ДатаКонца Цикл
			
			ВремДатаКонца = КонецМесяца(ДобавитьМесяц(ВремДатаКонца,1));
			
			Если Месяц(ВремДатаКонца) = 1 Тогда 
				СтрПериодОтчета = Формат(ВремДатаКонца, ФорматДаты);
			Иначе
				СтрПериодОтчета = Формат(ДатаНачала, ФорматДаты) + " - " + Формат(ВремДатаКонца, ФорматДаты);
			КонецЕсли;
			
			Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Добавить(СтрПериодОтчета);
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.Периодичность = Форма.ПеречислениеПериодичностьКвартал Тогда
		СтрПериодОтчетаКвартал = ПредставлениеПериода(НачалоДня(ДатаНачала), КонецКвартала(ДатаКонца), "ФП = Истина");
		Форма.Элементы.ПолеВыбораПериодичностиПоказаПериода.СписокВыбора.Добавить(СтрПериодОтчетаКвартал);
	КонецЕсли;
	
	// Присвоим текущее значение.
	Если Форма.ПолеВыбораПериодичность = Форма.ПеречислениеПериодичностьКвартал Тогда
	
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(Форма.мДатаНачалаПериодаОтчета), КонецДня(Форма.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Иначе
		
		Если Месяц(Форма.мДатаКонцаПериодаОтчета) = 1 Тогда 
			СтрПериодОтчета = Формат(Форма.мДатаКонцаПериодаОтчета, ФорматДаты);
		Иначе
			СтрПериодОтчета = Формат(ДатаНачала, ФорматДаты) + " - " + Формат(Форма.мДатаКонцаПериодаОтчета, ФорматДаты);
		КонецЕсли;
	
	КонецЕсли;
	
	Форма.ПолеВыбораПериодичностиПоказаПериода = СтрПериодОтчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСрокПредставленияОтчетности(Форма)

	ПоследнийМесяцПериода = Месяц(Форма.мДатаКонцаПериодаОтчета);
	ГодПериода = Год(Форма.мДатаКонцаПериодаОтчета);
	ШаблонСрокаПредставления = НСтр("ru = 'Не позднее %1 %2';
									|en = 'Not later than %1 %2'");
	Если ПоследнийМесяцПериода = 12 Тогда
		// Годовой Отчет.
		ДатаСрокаПредставления = Дата(ГодПериода + 1, 3, 28);
		ПунктСтатьи = НСтр("ru = '(п.4 ст.289 НК РФ)';
							|en = '(cl. 4 of art. 289 of Tax Code of the Russian Federation)'");
	
	ИначеЕсли ПоследнийМесяцПериода % 3 = 0 Тогда
		// Для унификации структуры процедуры с другими отчетами.
		// Квартал, полугодие, 9 месяцев.
		ДатаСрокаПредставления = Дата(ГодПериода, ПоследнийМесяцПериода + 1, 28);
		ПунктСтатьи = НСтр("ru = '(п.3 ст.246 НК РФ)';
							|en = '(cl. 3 of art. 246 of Tax Code of the Russian Federation)'");
	Иначе
		// Помесячно.
		ДатаСрокаПредставления = Дата(ГодПериода, ПоследнийМесяцПериода + 1, 28);
		ПунктСтатьи = НСтр("ru = '(п.3 ст.246 НК РФ)';
							|en = '(cl. 3 of art. 246 of Tax Code of the Russian Federation)'");
	
	КонецЕсли;
		
	Возврат СтрШаблон(ШаблонСрокаПредставления,
		Формат(ДатаСрокаПредставления, НСтр("ru = 'ДФ=''дд ММММ гггг ""года""''';
											|en = 'DF=''MMMM dd yyyy'''")), ПунктСтатьи);
	
КонецФункции

&НаСервере
Процедура ОбработатьОрганизацию(ВыбОрганизация)
	
	Периодичность = НалоговыйУчет.ПериодичностьОтчетногоПериода(мДатаКонцаПериодаОтчета, ВыбОрганизация);
	ПолеВыбораПериодичность = Периодичность;
	
	ПоказатьПериод(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СписокДоступныхЮридическихЛиц(Знач Текст = Неопределено)
	
	СписокВыбора = Новый СписокЗначений;
	РегламентированнаяОтчетность.ПолучитьСписокДоступныхЮридическихЛиц(СписокВыбора, Текст);
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеОрганизацииОтсутствуютТекст()
	
	Возврат НСтр(
	"ru = 'Декларацию по налогу на прибыль представляют только организации (п.1 ст.246 НК РФ).
	|В справочнике ""Организации"" сведения об организациях отсутствуют.';
	|en = 'Only companies submit an income tax declaration (cl. 1of art. 246 of Tax Code of the Russian Federation).
	|No company details in the ""Companies"" catalog.'");
	
КонецФункции

// Открывает окно с информацией о расшифровке налоговой базы
//
// Параметры:
//  ТекущиеДанные  - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы
//
&НаКлиенте
Процедура ОткрытьФормуРасшифровкиНалоговойБазы(ТекущиеДанные)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыРасшифровки", ПолучитьАдресТаблицыРасшифровки(ТекущиеДанные.ИдентификаторСтроки));
	
	ОткрытьФорму("Обработка.ПомощникЗаполненияДекларацииПоНалогуНаПрибыль.Форма.РасшифровкаНалоговойБазы",
		ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Открывает существующую или создает новую декларацию по налогу на прибыль
//
// Параметры:
//  ТекущиеДанные  - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы
//
&НаКлиенте
Процедура ОткрытьСоздатьДекларациюПоНалогуНаПрибыль(ТекущиеДанные)

	Если ТекущиеДанные.ДокументыДеклараций.Количество() = 0 Тогда
		
		ДанныеСтроки = Новый Структура("КодМестаПредставления, ИдентификаторСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",              Организация);
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", мДатаНачалаПериодаОтчета);
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  мДатаКонцаПериодаОтчета);
		ПараметрыФормы.Вставить("мПериодичность",           Периодичность);
		ПараметрыФормы.Вставить("мСохраненныйДок",          ПолучитьДанныеДокументаОтчета(ДанныеСтроки));
		ПараметрыФормы.Вставить("мСкопированаФорма",        мВыбраннаяФорма);
		ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
		ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417",
		РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
		
		ИмяФормыОтчета = СтрШаблон("Отчет.РегламентированныйОтчетПрибыль.Форма.%1", мВыбраннаяФорма);
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы,, Истина);
		
	ИначеЕсли ТекущиеДанные.ДокументыДеклараций.Количество() = 1 Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ДокументыДеклараций[0].Значение);
		
	ИначеЕсли ТекущиеДанные.ДокументыДеклараций.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзСпискаДекларацийЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, ТекущиеДанные.ДокументыДеклараций);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаДекларацийЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранныйЭлемент.Значение);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументаОтчета(ДанныеСтроки)

	ОтчетПрибыль = Отчеты.РегламентированныйОтчетПрибыль.Создать();
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Организация",      Организация);
	СтруктураДокумента.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	СтруктураДокумента.Вставить("ДатаПодписи",      ТекущаяДатаСеанса());
	СтруктураДокумента.Вставить("Комментарий",      "");
	СтруктураДокумента.Вставить("Вид",              0);
	СтруктураДокумента.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураДокумента.Вставить("ДанныеОтчета",             Новый ХранилищеЗначения(ПолучитьДанныеОтчета(ДанныеСтроки, ОтчетПрибыль)));
	СтруктураДокумента.Вставить("ДеревоНастройкиСтраниц",   Новый ХранилищеЗначения(ОтчетПрибыль.СтруктураСтраницОтчета(мВыбраннаяФорма)));
	
	Возврат СтруктураДокумента;

КонецФункции

&НаСервере
Функция ПолучитьДанныеОтчета(ДанныеСтроки, ОтчетПрибыль)

	ДанныеОтчета = Новый Структура;
	
	РеквизитыФормыОтчета = Неопределено;
	ОтчетПрибыль.СформироватьСтруктуруРеквизитовФормы(мВыбраннаяФорма, РеквизитыФормыОтчета);
	
	ДанныеОтчета.Вставить("ВерсияФормы", РеквизитыФормыОтчета.мВерсияФормы);
	ДанныеОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеОтчета.Вставить("ОКТМОДляРазделов", "");
	ДанныеОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
	ДанныеОтчета.Вставить("СохранятьРасшифровку", Истина);
	ДанныеОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеОтчета.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	
	ПараметрыТитульногоЛиста = Новый Структура;
	ПараметрыТитульногоЛиста.Вставить("ПоМесту", ДанныеСтроки.КодМестаПредставления);
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		ПараметрыТитульногоЛиста.Вставить("НалоговыйОрган", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код"));
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыТитульногоЛиста);
	
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СтруктураМногоуровневыхРазделов = Неопределено;
	ОтчетПрибыль.ИнициализироватьМногострочныеЧасти(мВыбраннаяФорма, РеквизитыФормыОтчета);
	ОтчетПрибыль.ИнициализироватьМногоуровневыеРазделы(мВыбраннаяФорма, РеквизитыФормыОтчета, СтруктураМногоуровневыхРазделов);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				РеквизитыФормыОтчета["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ДанныеСтроки.ИдентификаторСтроки);
	ТаблицаРасшифровки = ДанныеНалоговойБазыРасшифровка.Выгрузить(ПараметрыОтбора);
	
	Для Каждого СтрокаРасшифровки Из ТаблицаРасшифровки Цикл
		ИмяЛиста = СтрШаблон("Лист%1", СтрокаРасшифровки.ЛистДекларации);
		ИмяПоляКода = СтрЗаменить("П000__0000100", "__", СтрокаРасшифровки.ЛистДекларации);
		
		ДеревоЛистовДекларации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеМногоуровневыхРазделов, ИмяЛиста);
		
		Если ЗначениеЗаполнено(ДеревоЛистовДекларации.Строки[0].Данные.ПризнакВключения) Тогда
			ЛистДекларации = ДеревоЛистовДекларации.Строки.Добавить();
			ЛистДекларации.Данные                    = ОбщегоНазначения.СкопироватьРекурсивно(
				ДеревоЛистовДекларации.Строки[0].Данные);
			ЛистДекларации.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(
				ДеревоЛистовДекларации.Строки[0].ДанныеМногострочныхЧастей);
			СкопироватьСтрокиДереваРекурсивно(ЛистДекларации, ДеревоЛистовДекларации.Строки[0]);
		Иначе
			ЛистДекларации = ДеревоЛистовДекларации.Строки[0];
		КонецЕсли;
		
		ЛистДекларации.Данные.ПризнакВключения = "V";
		
		Если СтрокаРасшифровки.ЛистДекларации = "02" Тогда
			ЛистДекларации.Данные[ИмяПоляКода] = СтрокаРасшифровки.ПризнакНалогоплательщика;
			ЛистДекларации.Данные["П000020000200"] = СтрокаРасшифровки.НомерДокумента;
			ЛистДекларации.Данные["П000020015003"] = СтрокаРасшифровки.СтавкаФБ;
			ЛистДекларации.Данные["П000020016003"] = СтрокаРасшифровки.СтавкаСубъектРФ;
			Если ВРег(СокрЛП(мВыбраннаяФорма)) <> ВРег("ФормаОтчета2025Кв1") Тогда
				ЛистДекларации.Данные["П000020014003"] = СтрокаРасшифровки.СтавкаФБ + СтрокаРасшифровки.СтавкаСубъектРФ;
			КонецЕсли;
		ИначеЕсли СтрокаРасшифровки.ЛистДекларации = "04" Тогда
			ЛистДекларации.Данные[ИмяПоляКода] = СтрокаРасшифровки.КодВидаДохода;
		ИначеЕсли СтрокаРасшифровки.ЛистДекларации = "05" Тогда
			ЛистДекларации.Данные[ИмяПоляКода] = СтрокаРасшифровки.КодВидаОперации;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОтчета.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	Возврат ДанныеОтчета;

КонецФункции

// Возвращает адрес таблицы расшифровки налоговой базы
//
// Параметры:
//  ИдентификаторСтроки  - УникальныйИдентификатор - ключ отбора таблицы
//
// Возвращаемое значение:
//   Строка   - адрес во временном хранилище
//
&НаСервере
Функция ПолучитьАдресТаблицыРасшифровки(ИдентификаторСтроки)

	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	АдресТаблицыРасшифровки = ПоместитьВоВременноеХранилище(ДанныеНалоговойБазыРасшифровка.Выгрузить(ПараметрыОтбора),
		УникальныйИдентификатор);
	
	Возврат АдресТаблицыРасшифровки;

КонецФункции

&НаКлиенте
Процедура ВопросОчиститьТаблицуДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНалоговойБазы.Очистить();
	ДанныеНалоговойБазыРасшифровка.Очистить();
	
	ЗаполнитьТаблицуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНаСервере()

	СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	
	ПараметрыЗаполнения = Обработки.ПомощникЗаполненияДекларацииПоНалогуНаПрибыль.ПолучитьПараметрыЗаполнения();
	ПараметрыЗаполнения.Организация = Организация;
	ПараметрыЗаполнения.СписокОрганизаций = Новый Массив(СписокОрганизаций);
	ПараметрыЗаполнения.РегистрацияНО = РегистрацияВНалоговомОргане;
	ПараметрыЗаполнения.ДатаНачала = мДатаНачалаПериодаОтчета;
	ПараметрыЗаполнения.ДатаОкончания = КонецДня(мДатаКонцаПериодаОтчета);
	ПараметрыЗаполнения.Периодичность = Периодичность;
	ДанныеДляЗаполнения = Обработки.ПомощникЗаполненияДекларацииПоНалогуНаПрибыль.ПолучитьДанныеДляПомощникаЗаполненияДекларации(
		ПараметрыЗаполнения);
	
	ДанныеДляЗаполнения.ТаблицаНалоговойБазы.Колонки.Добавить("РасшифровкаНалоговойБазы",
		ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ДанныеДляЗаполнения.ТаблицаНалоговойБазы.ЗаполнитьЗначения("Открыть", "РасшифровкаНалоговойБазы");
	ДанныеНалоговойБазы.Загрузить(ДанныеДляЗаполнения.ТаблицаНалоговойБазы);
	
	ДанныеНалоговойБазыРасшифровка.Загрузить(ДанныеДляЗаполнения.ТаблицаНалоговойБазыРасшифровка);
	
	Для Каждого СтрокаБазы Из ДанныеНалоговойБазы Цикл
		
		СтруктураОтбора = Новый Структура("КодМестаПредставления", СтрокаБазы.КодМестаПредставления);
		СтрокиДеклараций = ДанныеДляЗаполнения.ТаблицаДеклараций.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаДекларации Из СтрокиДеклараций Цикл
			СтрокаБазы.ДокументыДеклараций.Добавить(СтрокаДекларации.РегламентированныйОтчет);
		КонецЦикла;
		
		СтрокаБазы.ДокументыДекларацийПредставление = ПолучитьПредставлениеДокументовДекларации(СтрокаБазы);
		
	КонецЦикла;

КонецПроцедуры

// Рекурсивное заполнение строк между ветками двух деревьев
//
// Параметры:
//  ВетвьПриемник  - СтрокаДереваЗначений - строка дерева приемника
//  ВетвьИсточник  - СтрокаДереваЗначений - строка дерева источника
//
&НаСервере
Процедура СкопироватьСтрокиДереваРекурсивно(ВетвьПриемник, ВетвьИсточник)
	
	Для Каждого СтрокаИсточника Из ВетвьИсточник.Строки Цикл
		
		СтрокаПриемника = ВетвьПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		
		Если СтрокаИсточника.Строки.Количество() <> 0 Тогда
			СкопироватьСтрокиДереваРекурсивно(СтрокаПриемника, СтрокаИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает информацию по имеющимся декларациям и обновляет данные таблицы
//
&НаСервере
Процедура ОбновитьСписокДекларацийНаСервере()

	ТаблицаДеклараций = Обработки.ПомощникЗаполненияДекларацииПоНалогуНаПрибыль.ПолучитьДекларацииДляЗаполненияПомощника(
		Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, Периодичность);
	
	Для Каждого СтрокаБазы Из ДанныеНалоговойБазы Цикл
		
		ПараметрыОтбора = Новый Структура("КодМестаПредставления", СтрокаБазы.КодМестаПредставления);
		НайденныеСтроки = ТаблицаДеклараций.НайтиСтроки(ПараметрыОтбора);
		
		СтрокаБазы.ДокументыДеклараций.Очистить();
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СтрокаБазы.ДокументыДеклараций.Добавить(СтрокаТаблицы.РегламентированныйОтчет);
		КонецЦикла;
		
		СтрокаБазы.ДокументыДекларацийПредставление = ПолучитьПредставлениеДокументовДекларации(СтрокаБазы);
		
	КонецЦикла;

КонецПроцедуры

// Получает представление поля Документы деклараций
//
// Параметры:
//  СтрокаТаблицы  - ДанныеФормыЭлементКоллекции  - строка таблицы
//
// Возвращаемое значение:
//   Строка - 
//
&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДокументовДекларации(СтрокаТаблицы)
	
	Если СтрокаТаблицы.ДокументыДеклараций.Количество() = 0 Тогда
		ПредставлениеДеклараций = НСтр("ru = 'Создать';
										|en = 'Create'");
	ИначеЕсли СтрокаТаблицы.ДокументыДеклараций.Количество() = 1 Тогда
		ПредставлениеДеклараций = Строка(СтрокаТаблицы.ДокументыДеклараций[0]);
	ИначеЕсли СтрокаТаблицы.ДокументыДеклараций.Количество() > 1 Тогда
		ПредставлениеДеклараций = СтрШаблон(НСтр("ru = 'Показать отчеты (%1)';
												|en = 'Show reports (%1)'"), СтрокаТаблицы.ДокументыДеклараций.Количество());
	КонецЕсли;
	
	Возврат ПредставлениеДеклараций;
	
КонецФункции

#КонецОбласти
