
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьТекстЗапросовДинамическихСписков();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Не Параметры.Свойство("КлючНазначенияФормы")
		Или ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Обработки.ЖурналДокументовИсправлениеИмущественныхНалогов.КлючНазначенияФормыПоУмолчанию();
		КлючНастроек = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
		КлючНастроек = Параметры.КлючНазначенияФормы;
	КонецЕсли;   
	
	Если Параметры.Свойство("ОтборыФормыСписка") Тогда
		
		ФормыОткрытаПоГиперссылке = Истина;
		
		ОтборТипыДокументов = Параметры.ОтборыФормыСписка.ОтборТипыДокументов;
		ОтборХозяйственныеОперации = Параметры.ОтборыФормыСписка.ОтборХозяйственныеОперации; 
		
	ИначеЕсли Параметры.Свойство("ОтборОрганизация") Тогда 
		
		ФормыОткрытаПоГиперссылке = Истина;
		
		ОтборОрганизация = Параметры.ОтборОрганизация;

	ИначеЕсли Параметры.Свойство("КлючНазначенияФормы")
		И Параметры.КлючНазначенияФормы = "ВзаимозависимыеИсправленияИмущественныхНалогов" Тогда
		
		ФормыОткрытаПоГиперссылке = Истина;
		
		ПоказатьВзаимозависимыеИсправленияИмущественныхНалогов(ЭтотОбъект, Параметры);

	Иначе
		ВосстановитьНастройки();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.СписокГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, 
		ХозяйственныеОперацииИДокументы, 
		ОтборТипыДокументов, 
		ОтборХозяйственныеОперации);
		
	ИспользуемыеТипыДокументов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументы Цикл
		ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "Список";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли; 
	
	Если ИмяСобытия = "ОткрытьВзаимозависимыеИсправленияИмущественныхНалогов"
		И КлючНазначенияИспользования = "ВзаимозависимыеИсправленияИмущественныхНалогов" Тогда
	
		ПоказатьВзаимозависимыеИсправленияИмущественныхНалогов(ЭтотОбъект, Параметр);
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОсновноеСредствоПриИзменении(Элемент)
	
	ОтборОсновноеСредствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодИсправленияПриИзменении(Элемент)
	
	ОтборПериодИсправленияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
	ПараметрыФормы,,,,,Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Список

&НаКлиенте
Процедура СписокУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ОткрытьПроводкиМеждународногоУчета(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, ОтборыДляСозданияДокумента());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы,
		КлючФормы, КлючНазначенияИспользования, ОтборыДляСозданияДокумента());
		
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийСписок(ЭтаФорма));
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, ТекущийСписок(ЭтаФорма), Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ТекущийСписок(ЭтаФорма));
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ДанныеПоШтрихКоду = ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());	
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Состояние(НСтр("ru = 'Выполняется поиск документа по штрихкоду...';
					|en = 'Searching for the document by barcode...'"));
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтаФорма, "Список");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Обработка.ЖурналДокументовИсправлениеИмущественныхНалогов.Форма", КлючНазначенияИспользования);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
	
		СписокИнтервал = Настройки.СписокИнтервал;
		ОтборОрганизация = Настройки.ОтборОрганизация;
		ОтборОсновноеСредство = Настройки.ОтборОсновноеСредство;
		ОтборПериодИсправления = Настройки.ОтборПериодИсправления;
		
		Настройки.Свойство("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
		Настройки.Свойство("ОтборТипыДокументов", ОтборТипыДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"СписокИнтервал,
		|ОтборОрганизация,
		|ОтборОсновноеСредство,
		|ОтборПериодИсправления,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"Обработка.ЖурналДокументовИсправлениеИмущественныхНалогов.Форма", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	ТаблицаЗначенийДоступно = ИнициализироватьХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы.Выгрузить(),
		ОтборХозяйственныеОперации,
		ОтборТипыДокументов,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаЗначенийДоступно);
	
	УстановитьОтборыДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ПолноеИмяДокумента") Тогда
						
			Отбор = Новый Структура();
			Отбор.Вставить("ПолноеИмяДокумента", Параметры.СтруктураБыстрогоОтбора.ПолноеИмяДокумента);
			
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отбор = Истина;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов()
	
	ОбщегоНазначенияУТ.ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(), 
		КлючНазначенияФормыПоУмолчанию(), 
		НСтр("ru = 'все';
			|en = 'all'"));
	
	НастроитьКнопкиУправленияДокументами();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыДинамическогоСписка(Форма)
	
	Список = Форма.Список;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		Форма.ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Форма.ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ОсновноеСредство",
		Форма.ОтборОсновноеСредство,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Форма.ОтборОсновноеСредство));
		
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериодаИсправления", Форма.ОтборПериодИсправления.ДатаНачала);
	
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериодаИсправления", 
		?(ЗначениеЗаполнено(Форма.ОтборПериодИсправления.ДатаОкончания),
			КонецДня(Форма.ОтборПериодИсправления.ДатаОкончания),
			КонецДня(Дата(3999, 12, 31))));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ХозяйственнаяОперация",
		Форма.ОтборХозяйственныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипСсылки",
		Форма.ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Форма.СписокИнтервал.ДатаНачала);
	
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(Форма.СписокИнтервал.ДатаОкончания),
			КонецДня(Форма.СписокИнтервал.ДатаОкончания),
			КонецДня(Дата(3999, 12, 31))));
			
	Форма.Элементы.СписокУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(Форма.СписокИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(Форма.СписокИнтервал.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросовДинамическихСписков()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыПоОСПереопределяемый.ОсновноеСредство,
	|	ДокументыПоОСПереопределяемый.Ссылка,
	|	ДокументыПоОСПереопределяемый.Организация,
	|	ДокументыПоОСПереопределяемый.Дата КАК Дата,
	|	ДокументыПоОСПереопределяемый.НачалоПериодаИсправления КАК НачалоПериодаИсправления,
	|	ДокументыПоОСПереопределяемый.КонецПериодаИсправления КАК КонецПериодаИсправления,
	|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
	|	ДокументыПоОСПереопределяемый.ХозяйственнаяОперация,
	|	ДокументыПоОСПереопределяемый.Подразделение,
	|	РеестрДокументовПереопределяемый.Ответственный,
	|	РеестрДокументовПереопределяемый.Дополнительно,
	|	РеестрДокументовПереопределяемый.Комментарий,
	|	ДокументыПоОСПереопределяемый.Проведен,
	|	РеестрДокументовПереопределяемый.ПометкаУдаления,
	|
	|	ВЫБОР
	|		КОГДА ДокументыПоОСПереопределяемый.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка,
	|
	|	ДокументыПоОСПереопределяемый.ДополнительнаяЗапись,
	|	РеестрДокументовПереопределяемый.ДополнительнаяЗапись КАК ДополнительнаяЗаписьРеестр,
	|	ДокументыПоОСПереопределяемый.ТипСсылки,
	|	ТИПЗНАЧЕНИЯ(ДокументыПоОСПереопределяемый.Ссылка) КАК ТипСсылкиДокумента,
	|	&СтатусПроверки КАК СтатусПроверки,
	|	ВЫРАЗИТЬ(&ИндикаторПроверки КАК БУЛЕВО) КАК ИндикаторПроверки,
	|
	|	ВЫБОР
	|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОСПереопределяемый
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
	|		ПО (РеестрДокументовПереопределяемый.Ссылка = ДокументыПоОСПереопределяемый.Ссылка)
	|			И (НЕ РеестрДокументовПереопределяемый.ДополнительнаяЗапись)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайловПереопределяемый
	|		ПО ДокументыПоОСПереопределяемый.Ссылка = НаличиеФайловПереопределяемый.ОбъектСФайлами
	|		
	|ГДЕ
	|
	|	ДокументыПоОСПереопределяемый.ЭтоИсправление
	|	
	|{ГДЕ
	|	ДокументыПоОСПереопределяемый.ОсновноеСредство.* КАК ОсновноеСредство,
	|	ДокументыПоОСПереопределяемый.Ссылка.* КАК Ссылка,
	|	ДокументыПоОСПереопределяемый.Организация.* КАК Организация,
	|	ДокументыПоОСПереопределяемый.Дата КАК Дата,
	|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
	|	ДокументыПоОСПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументыПоОСПереопределяемый.Подразделение.* КАК Подразделение,
	|	РеестрДокументовПереопределяемый.Ответственный.* КАК Ответственный,
	|	РеестрДокументовПереопределяемый.Дополнительно КАК Дополнительно,
	|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
	|	ДокументыПоОСПереопределяемый.Проведен КАК Проведен,
	|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
	|
	|	(ДокументыПоОСПереопределяемый.Дата МЕЖДУ &НачалоПериода И &КонецПериода),
	|
	|	(ДокументыПоОСПереопределяемый.НачалоПериодаИсправления <= &КонецПериодаИсправления
	|			И ДокументыПоОСПереопределяемый.КонецПериодаИсправления >= &НачалоПериодаИсправления)}";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусПроверки КАК СтатусПроверки", "НЕОПРЕДЕЛЕНО КАК УдаленСтатусПроверки");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫРАЗИТЬ(&ИндикаторПроверки КАК БУЛЕВО) КАК ИндикаторПроверки", "ЛОЖЬ КАК УдаленИндикаторПроверки");	
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
КонецПроцедуры

&НаСервере
Процедура ОтборОсновноеСредствоПриИзмененииНаСервере()

	ПриИзмененииОтбора();

КонецПроцедуры

&НаСервере
Процедура ОтборПериодИсправленияПриИзмененииНаСервере()

	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыОС";
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	УстановитьОтборыДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма = ЭтотОбъект;
	СтруктураПараметров.ИмяГруппыСоздать = "СписокГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст = "СписокГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать = "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню = "СписокСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить = "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню = "СписокИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести = "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню = "СписокПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения = "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню = "СписокОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления = "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню = "СписокУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.ЗаголовокПодменюСоздать = НСтр("ru = 'Исправить';
														|en = 'Correct'");
	СтруктураПараметров.МаксимальноеКоличествоКомандВПодменю = 11;
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "СписокДата");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов)
	
	ТаблицаХозяйственныеОперацииИДокументы = ПолучитьИзВременногоХранилища(АдресДоступныхХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(
		ТаблицаХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
	ПриИзмененииОтбора();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, 
		ХозяйственныеОперацииИДокументы, 
		ОтборТипыДокументов, 
		ОтборХозяйственныеОперации);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписок(Форма)

	Возврат Форма.Элементы.Список;

КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь)

	#Область ИсправлениеУчетныхДанных
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПараметрыНачисленияНалогаНаИмущество;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ИсправлениеУчетныхДанных";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.Порядок                      = 1;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПараметрыНачисленияТранспортногоНалога;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПараметрыНачисленияТранспортногоНалога.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ИсправлениеУчетныхДанных";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.Порядок                      = 2;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПараметрыНачисленияЗемельногоНалога;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПараметрыНачисленияЗемельногоНалога.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ИсправлениеУчетныхДанных";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.Порядок                      = 3;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.КорректировкаСтоимостиИАмортизацииОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Стоимость и амортизацию';
												|en = 'Cost and depreciation'");
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ИсправлениеУчетныхДанных";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.Порядок                      = 4;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеПараметровОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеПараметровОС2_4.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Параметры учета ОС';
												|en = 'Fixed asset accounting parameters'");
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ИсправлениеУчетныхДанных";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.Порядок                      = 5;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОС2_4.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Списание';
												|en = 'Write-off'");
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ИсправлениеУчетныхДанных";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.Порядок                      = 6;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СнятиеСРегистрацииТранспортныхСредств;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СнятиеСРегистрацииТранспортныхСредств.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Снятие с регистрации транспортных средств';
												|en = 'Remove vehicle registration'");
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ИсправлениеУчетныхДанных";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.Порядок                      = 7;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СнятиеСРегистрацииЗемельныхУчастков;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СнятиеСРегистрацииЗемельныхУчастков.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Снятие с регистрации земельных участков';
												|en = 'Remove land plot registration'");
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ИсправлениеУчетныхДанных";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.Порядок                      = 8;
	#КонецОбласти
			
	#Область ПерерасчетИмущественныхНалогов
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПерерасчетНалогаНаИмущество;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПерерасчетИмущественныхНалогов.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Налог на имущество';
												|en = 'Property tax'");
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ПерерасчетИмущественныхНалогов";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.РазместитьВПодменю           = Ложь;
	Строка.Порядок                      = 9;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПерерасчетТранспортногоНалога;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПерерасчетИмущественныхНалогов.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Транспортный налог';
												|en = 'Vehicle tax'");
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ПерерасчетИмущественныхНалогов";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.РазместитьВПодменю           = Ложь;
	Строка.Порядок                      = 10;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПерерасчетЗемельногоНалога;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПерерасчетИмущественныхНалогов.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Земельный налог';
												|en = 'Land value tax'");
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ГруппаКнопок                 = "ПерерасчетИмущественныхНалогов";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	Строка.РазместитьВПодменю           = Ложь;
	Строка.Порядок                      = 11;
	#КонецОбласти
			
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНазначенияИспользования);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьВзаимозависимыеИсправленияИмущественныхНалогов(Форма, Параметры)
	
	Форма.ОтборОрганизация = Параметры.ОтборОрганизация;
	Форма.ОтборПериодИсправления.ДатаНачала = Параметры.ОтборНачалоПериодаИсправления;
	Форма.ОтборПериодИсправления.ДатаОкончания = Параметры.ОтборКонецПериодаИсправления;
	
	Если Параметры.ОтборОсновноеСредство.Количество() = 1 Тогда
		Форма.ОтборОсновноеСредство = Параметры.ОтборОсновноеСредство[0];
	КонецЕсли;
	
	УстановитьОтборыДинамическогоСписка(Форма);
	
КонецПроцедуры

&НаКлиенте
Функция ОтборыДляСозданияДокумента()
	
	СтруктураОтборы = Новый Структура;

	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураОтборы.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборОсновноеСредство) Тогда
		СтруктураОтборы.Вставить("ОсновноеСредство", ОтборОсновноеСредство);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПериодИсправления) Тогда
		СтруктураОтборы.Вставить("ПериодИсправления", ОтборПериодИсправления);
	КонецЕсли;
	
	СтруктураОтборы.Вставить("ПараметрыДействуютСПрошлойДаты", Истина);
	
	Возврат СтруктураОтборы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
