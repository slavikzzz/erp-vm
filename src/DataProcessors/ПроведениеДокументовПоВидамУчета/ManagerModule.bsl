
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыПроведенияПоУчетам() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидыУчета", "");
	Результат.Вставить("Организация", Неопределено);
	Результат.Вставить("Период", Новый СтандартныйПериод());
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПровестиДокументыПоУчетам(Параметры) Экспорт
	
	ВидыУчета = Параметры.ВидыУчета;
	
	ДлительныеОперации.СообщитьПрогресс(0, НСтр("ru = 'Подготовка';
												|en = 'Prepare'"), 0);
	
	МассивДокументов = Неопределено;
	Если Не Параметры.Свойство("ДокументыДляОбработки", МассивДокументов) Тогда
		МассивДокументов = МассивДокументов(Параметры, ВидыУчета);
	КонецЕсли;
	ПропущенныеДокументы = Новый Массив;
	
	ВсегоДокументов = МассивДокументов.Количество();
	Обработано = 0;
	ПредыдущийПрогресс = 0;
	НачальноеВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПереносДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		УстановитьПривилегированныйРежим(Истина);
		Отказ = Ложь;
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ);
		
		Попытка
			МенеджерДокумента.ПровестиПоУчетам(Документ, РежимПроведенияДокумента.Неоперативный, Отказ, ВидыУчета);
		Исключение
			Информация = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(Строка(Документ) + " - " +  Информация.Описание, Документ);
			ПропущенныеДокументы.Добавить(Документ);
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Обработано = Обработано + 1;
		Прогресс = Окр(Обработано*100/ВсегоДокументов, 0);
		Если Прогресс <> ПредыдущийПрогресс Тогда
			
 			ВремяНаПроцент = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачальноеВремя) / Прогресс;
			ПредыдущийПрогресс = Прогресс;
			ВремяПрогноз = (ВремяНаПроцент * (100 - Прогресс)) / 1000;
			
			ДлительныеОперации.СообщитьПрогресс(Прогресс, СтрШаблон(НСтр("ru = 'Обработано %1 из %2';
																		|en = 'Processed %1 of %2'"), Обработано, ВсегоДокументов), ВремяПрогноз);
		КонецЕсли;
	 	
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ПропущенныеДокументы", ПропущенныеДокументы);
	
	Возврат Результат;
	                                               	
КонецФункции

Функция МассивДокументов(Параметры, ВидыУчета)
	
	Если ВидыУчета = "ДанныеДляРасчетаСреднего" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияСреднийЗаработокОбщий.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТ_Начисления
		|ИЗ
		|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НачисленияСреднийЗаработокОбщий
		|ГДЕ
		|	НачисленияСреднийЗаработокОбщий.Значение <> &Значение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСреднийЗаработокФСС.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК НачисленияСреднийЗаработокФСС
		|ГДЕ
		|	НачисленияСреднийЗаработокФСС.Значение <> &ЗначениеФСС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Начисления.Начисление КАК Начисление
		|ПОМЕСТИТЬ ВТ_НачисленияБезДублей
		|ИЗ
		|	ВТ_Начисления КАК ВТ_Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияУдержанияПоСотрудникамОбороты.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_Регистраторы
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Организация = &Организация
		|				И НачислениеУдержание В
		|					(ВЫБРАТЬ
		|						ВТ_НачисленияБезДублей.Начисление
		|					ИЗ
		|						ВТ_НачисленияБезДублей КАК ВТ_НачисленияБезДублей)) КАК НачисленияУдержанияПоСотрудникамОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
		|ГДЕ
		|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Организация = &Организация
		|	И ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Регистратор
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС
		|ГДЕ
		|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Регистратор.Организация = &Организация
		|	И ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Регистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТ_Регистраторы КАК ВТ_Регистраторы";
		
		Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Регистратор.Организация = &Организация", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Организация = &Организация", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "ИСТИНА");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
		Запрос.УстановитьПараметр("ДатаНачала", Параметры.Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Параметры.Период.ДатаОкончания);
		Запрос.УстановитьПараметр("Значение", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать);
		Запрос.УстановитьПараметр("ЗначениеФСС", Перечисления.УчетНачисленийВСреднемЗаработкеФСС.НеВключать);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
	
#КонецЕсли
