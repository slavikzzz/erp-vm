#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВидыУчетов") Тогда
		ВидыУчетов = Параметры.ВидыУчетов;
		
		Если ВидыУчетов = "ДанныеДляРасчетаСреднего" Тогда
			Объект.УчетСреднегоЗаработка = Истина;
			Элементы.ГруппаВидыУчета.Видимость = Ложь;
			Заголовок = НСтр("ru = 'Обновить данные для расчета среднего заработка';
							|en = 'Update data to calculate average earnings'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыРасширенная") Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Элементы.ГруппаПрогресс.Видимость = Ложь;
	Элементы.ПровестиВыбранные.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Статус = "Выполняется" Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПрерватьВыполнение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Прервать выполнение обработки?';
										|en = 'Do you want to terminate the data processor execution?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетСреднегоЗаработкаПриИзменении(Элемент)
	
	Если Объект.УчетСреднегоЗаработка Тогда
		ВидыУчетов = "ДанныеДляРасчетаСреднего";
	Иначе
		ВидыУчетов = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокументы(Команда)
	
	Если Статус = "Выполняется" Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен период';
														|en = 'Period is not filled in'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидыУчетов) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнены виды учетов';
														|en = 'Accounting kinds are not filled in'"));
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроцессПроведения();
			
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Элементы.Прогресс.Заголовок = НСтр("ru = 'Остановка';
										|en = 'Stop'");
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	Статус = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПровестиВыбранные(Команда)
	
	ЗапуститьПроцессПроведения(Истина);
	Элементы.ПровестиВыбранные.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапуститьПроцессПроведения(ТолькоВыбранные = Ложь)
	
	ДлительнаяОперация = ПровестиДокументыНаСервере(ТолькоВыбранные);
	
	Статус = ДлительнаяОперация.Статус;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		Элементы.ГруппаПрогресс.Видимость = Ложь;
	Иначе
		Прогресс = 0;
		Элементы.ГруппаПрогресс.Видимость = Истина;
		
		ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
		АдресХранилища		 = ДлительнаяОперация.АдресРезультата;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("Подключаемый_ПрогрессВыполнения", ЭтотОбъект);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("Подключаемый_ЗавершениеОперации", ЭтотОбъект),
			ПараметрыОжидания);
			
		Элементы.Прогресс.РасширеннаяПодсказка.Заголовок = "";
		Элементы.Прогресс.Заголовок = НСтр("ru = 'Ожидание';
											|en = 'Wait'");
		Элементы.ПровестиДокументы.Заголовок = НСтр("ru = 'Прервать';
													|en = 'Terminate'");
		Элементы.Параметры.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПрерватьВыполнение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ЗакрытиеФормы = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПровестиДокументыНаСервере(ТолькоВыбранные = Ложь)
	
	СтруктураПараметров = Обработки.ПроведениеДокументовПоВидамУчета.ПараметрыПроведенияПоУчетам();
	СтруктураПараметров.ВидыУчета = ?(Объект.УчетСреднегоЗаработка, "ДанныеДляРасчетаСреднего", Неопределено);
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.Период = Объект.Период;
	Если ДокументыДляОбработки.Количество() Тогда
		Если ТолькоВыбранные Тогда
			СтруктураПараметров.Вставить("ДокументыДляОбработки", ДокументыДляОбработки.ВыгрузитьЗначения());
		КонецЕсли;
		ДокументыДляОбработки.Очистить();
	КонецЕсли;
		
	НаименованиеЗадания = НСтр("ru = 'Обновление данных для расчета среднего заработка';
								|en = 'Update data to calculate average earnings'");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Обработки.ПроведениеДокументовПоВидамУчета.ПровестиДокументыПоУчетам",	СтруктураПараметров);
		
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗавершениеОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Статус = Неопределено;
		Если ЗакрытиеФормы Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		Статус = Результат.Статус;
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
			Если СообщенияПользователю <> Неопределено Тогда
				Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
					СообщениеФоновогоЗадания.Сообщить();
				КонецЦикла;
			КонецЕсли;		
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		Иначе
			
			РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			
			Если РезультатОперации.ПропущенныеДокументы.Количество() Тогда
				ДокументыДляОбработки.ЗагрузитьЗначения(РезультатОперации.ПропущенныеДокументы);
			КонецЕсли;
			
		КонецЕсли;
		
		ВывестиСообщенияЗадания(Результат);
	КонецЕсли;
	
	ПредыдущееВремя = 0;
	Элементы.ПровестиДокументы.Заголовок = "";
	Элементы.ГруппаПрогресс.Видимость = Ложь;
	Элементы.Параметры.ТолькоПросмотр = Ложь;

	Если ДокументыДляОбработки.Количество() Тогда
		Элементы.ПровестиВыбранные.Видимость = Истина;
		Элементы.ПровестиВыбранные.Заголовок = СтрШаблон("Повторить проведение %1 документов в которых возникли ошибки", ДокументыДляОбработки.Количество());
	Иначе
		Элементы.ПровестиВыбранные.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеВремени(ВремяСек)
	
	Остаток = ВремяСек;
	Дней = Цел(Остаток / 86400);
	Остаток = Остаток - Дней * 86400;
	
	Часов = Цел(Остаток / 3600);
	Остаток = Остаток - Часов * 3600;
	
	Минут = Цел(Остаток / 60);
	Остаток = Остаток - Минут * 60;
	
	Части = Новый Массив;
	Если Дней > 0 Тогда
		Части.Добавить(Строка(Дней) + " " + СтроковыеФункцииКлиентСервер.ФормаМножественногоЧисла("день", "дня", "дней", Дней));
	КонецЕсли;
	Если Часов > 0 Тогда
		Части.Добавить(Строка(Часов) + " " + СтроковыеФункцииКлиентСервер.ФормаМножественногоЧисла("час", "часа", "часов", Часов));
	КонецЕсли;
	Если Минут > 0 Тогда
		Части.Добавить(Строка(Минут) + " " + СтроковыеФункцииКлиентСервер.ФормаМножественногоЧисла("минута", "минуты", "минут", Минут));
	КонецЕсли;
	
	Возврат СтрСоединить(Части, " ");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Статус = Результат.Статус;
	
	Если Результат.Статус = "Выполняется" Тогда
		
		Если Результат.Прогресс <> Неопределено Тогда
			Прогресс = Результат.Прогресс.Процент;
			Элементы.Прогресс.Заголовок = Результат.Прогресс.Текст;
			
			ВремяПрогноз = Результат.Прогресс.ДополнительныеПараметры;
			Представление = ПредставлениеВремени(ВремяПрогноз);
			Если Представление <> "" Тогда
				Элементы.Прогресс.РасширеннаяПодсказка.Заголовок = СтрШаблон("%1 до завершения (примерно)", Представление);
			КонецЕсли;
			
		КонецЕсли;
		
		ВывестиСообщенияЗадания(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщенияЗадания(РезультатЗадания)
	
	Для Каждого Сообщение Из РезультатЗадания.Сообщения Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение.Текст, Сообщение.КлючДанных);
		Если Статус = "Выполняется" И ЭтоДокумент(Сообщение.КлючДанных) Тогда
			ДокументыДляОбработки.Добавить(Сообщение.КлючДанных);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоДокумент(Ссылка)
	
	ТипЗначения = ТипЗнч(Ссылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = ДлительныеОперации.СообщенияПользователю(Истина, ИдентификаторЗадания);
	Возврат СообщенияПользователю;
	
КонецФункции

#КонецОбласти



