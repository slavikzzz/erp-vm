
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Диспетчер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	
	ОтборыСписковКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ОтборСрокВыполнения.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьКурьеровИСборщиков();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗаказов, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗаказов, "СрокВыполнения", СрокВыполнения, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СрокВыполнения));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗаказов, "Склад", СкладОтбор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладОтбор));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗаказов, "ЗонаДоставки", ЗонаДоставки, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ЗонаДоставки));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗаказов

&НаКлиенте
Процедура СписокЗаказовПриАктивизацииСтроки(Элемент)
	ТекущееРаспоряжение = Элемент.ТекущаяСтрока;
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗаказов, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗаказов, "Склад", СкладОтбор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладОтбор));
	ЗаполнитьКурьеровИСборщиков();
КонецПроцедуры

&НаКлиенте
Процедура ЗонаДоставкиПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗаказов, "ЗонаДоставки", ЗонаДоставки, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ЗонаДоставки));
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	ЗаполнитьКурьеровИСборщиков();
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СрокВыполненияОчистка(Элемент, СтандартнаяОбработка)
	ЗаполнитьКурьеровИСборщиков();
	Если НЕ ЗначениеЗаполнено(СрокВыполнения) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СкладОчистка(Элемент, СтандартнаяОбработка)
	ЗаполнитьКурьеровИСборщиков();
	Если НЕ ЗначениеЗаполнено(СкладОтбор) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗонаДоставкиОчистка(Элемент, СтандартнаяОбработка)
	ЗаполнитьКурьеровИСборщиков();
	Если НЕ ЗначениеЗаполнено(ЗонаДоставки) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКурьера(Команда)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ЭтоКурьер", Истина);
	ПараметрыВыбора.Вставить("Склад", СкладОтбор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НазначитьКурьераНаСервере", ЭтотОбъект);
	
	ОткрытьФорму(
	"Обработка.ДиспетчированиеСборкаИДоставка.Форма.ФормаВыбораСотрудника", ПараметрыВыбора,
	ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСборщика(Команда)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ЭтоКурьер", Ложь);
	ПараметрыВыбора.Вставить("Склад", СкладОтбор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НазначитьСборщикаНаСервере", ЭтотОбъект);
	
	ОткрытьФорму(
	"Обработка.ДиспетчированиеСборкаИДоставка.Форма.ФормаВыбораСотрудника", ПараметрыВыбора,
	ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьКурьера(Команда)
	СнятьКурьераНаСервере();
	ОбновитьДанныеНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура СнятьСборщика(Команда)
	СнятьСборщикаНаСервере();
	ОбновитьДанныеНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура НовыйЗаказ(Команда)
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура НоваяРеализация(Команда)
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	ОткрытьФорму(
	"Обработка.ДиспетчированиеСборкаИДоставка.Форма.Настройки",
	,
	ЭтотОбъект,,,, Новый ОписаниеОповещения("ОбновитьДанныеНаФорме", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	Элементы.СписокЗаказов.Обновить();
	ЗаполнитьИнформациюПоЗаказуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоЗаказуНаСервере()
	
	Если ТекущееРаспоряжение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
		|	ЗаказКлиента.Комментарий КАК Комментарий,
		|	ЗаказКлиента.Номер КАК Номер,
		|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказКлиента.Партнер КАК Партнер
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Товар,
		|	ЗаказКлиентаТовары.Количество КАК Количество,
		|	ЗаказКлиентаТовары.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущееРаспоряжение);
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СвойстваЗаказа = РезультатЗапроса[0].Выгрузить()[0];
	
	Товары = РезультатЗапроса[1].Выгрузить();
	СоставЗаказа.Загрузить(Товары);
	
	ВидКИТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	ТелефонКлиента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СвойстваЗаказа.Партнер, ВидКИТелефон,,Истина);
	
	Элементы.Заказ.Заголовок = "Заказ № " + Строка(СвойстваЗаказа.Номер);
	Элементы.СуммаЗаказа.Заголовок = "Сумма: " + Формат(СвойстваЗаказа.СуммаДокумента, "ЧДЦ=2;") + " руб.";
	
	Элементы.Клиент.Заголовок = СвойстваЗаказа.Партнер;
	Элементы.ТелефонКлиента.Заголовок = ТелефонКлиента;
	Элементы.АдресДоставки.Заголовок = СвойстваЗаказа.АдресДоставки;
	Элементы.Комментарий.Заголовок = СвойстваЗаказа.Комментарий;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурьеровИСборщиков()
	
	Курьеры.Очистить();
	
	СтатусыДоставки = Новый Массив;
	СтатусыДоставки.Добавить(Перечисления.СтатусыСборкиИДоставки.КСборке);
	СтатусыДоставки.Добавить(Перечисления.СтатусыСборкиИДоставки.Собирается);
	СтатусыДоставки.Добавить(Перечисления.СтатусыСборкиИДоставки.Собран);
	СтатусыДоставки.Добавить(Перечисления.СтатусыСборкиИДоставки.ГотовКДоставке);
	СтатусыДоставки.Добавить(Перечисления.СтатусыСборкиИДоставки.Обрабатывается);
	СтатусыДоставки.Добавить(Перечисления.СтатусыСборкиИДоставки.Доставляется);
	
	СтатусыСборки = Новый Массив;
	СтатусыСборки.Добавить(Перечисления.СтатусыСборкиИДоставки.КСборке);
	СтатусыСборки.Добавить(Перечисления.СтатусыСборкиИДоставки.Собирается);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыСборкиИДоставки.Распоряжение) КАК Назначено,
		|	СтатусыСборкиИДоставки.Распоряжение.Курьер КАК Курьер
		|ПОМЕСТИТЬ ЗаказыВДоставке
		|ИЗ
		|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
		|ГДЕ
		|	СтатусыСборкиИДоставки.Статус В(&СтатусыДоставки)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыСборкиИДоставки.Распоряжение.Курьер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыСборкиИДоставки.Распоряжение) КАК Доставлено,
		|	СтатусыСборкиИДоставки.Распоряжение.Курьер КАК Курьер
		|ПОМЕСТИТЬ ЗаказыДоставлено
		|ИЗ
		|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
		|ГДЕ
		|	СтатусыСборкиИДоставки.ДатаДоставки МЕЖДУ &НачалоДня И &КонецДня
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыСборкиИДоставки.Распоряжение.Курьер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СтатусыСборкиИДоставки.ДатаДоставки) КАК ДатаДоставки,
		|	СтатусыСборкиИДоставки.Распоряжение.Курьер КАК Курьер
		|ПОМЕСТИТЬ ПоследняяДоставка
		|ИЗ
		|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыСборкиИДоставки.Распоряжение.Курьер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыСборкиИДоставки.Распоряжение.Сборщик КАК Сборщик,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыСборкиИДоставки.Распоряжение) КАК Назначено
		|ПОМЕСТИТЬ ЗаказыВСборке
		|ИЗ
		|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
		|ГДЕ
		|	СтатусыСборкиИДоставки.Статус В(&СтатусыСборки)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыСборкиИДоставки.Распоряжение.Сборщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыСборкиИДоставки.Распоряжение) КАК Собрано,
		|	СтатусыСборкиИДоставки.Распоряжение.Сборщик КАК Сборщик
		|ПОМЕСТИТЬ ЗаказыСобрано
		|ИЗ
		|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
		|ГДЕ
		|	СтатусыСборкиИДоставки.ДатаСборки МЕЖДУ &НачалоДня И &КонецДня
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыСборкиИДоставки.Распоряжение.Сборщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыСборкиИДоставки.Распоряжение.Сборщик КАК Сборщик,
		|	МАКСИМУМ(СтатусыСборкиИДоставки.ДатаСборки) КАК ДатаСборки
		|ПОМЕСТИТЬ ПоследняяСборка
		|ИЗ
		|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыСборкиИДоставки.Распоряжение.Сборщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиМагазинов.Склад КАК Склад
		|ПОМЕСТИТЬ СкладыДиспетчера
		|ИЗ
		|	РегистрСведений.СотрудникиМагазинов КАК СотрудникиМагазинов
		|ГДЕ
		|	СотрудникиМагазинов.Сотрудник = &Сотрудник
		|	И СотрудникиМагазинов.Диспетчер = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сборщики.Сотрудник КАК Сборщик
		|ПОМЕСТИТЬ Сборщики
		|ИЗ
		|	СкладыДиспетчера КАК СкладыДиспетчера
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиМагазинов КАК Сборщики
		|		ПО СкладыДиспетчера.Склад = Сборщики.Склад
		|ГДЕ
		|	Сборщики.Сборщик = ИСТИНА
		|	И Сборщики.Склад  = &ДоступныеСклады
		|
		|СГРУППИРОВАТЬ ПО
		|	Сборщики.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиМагазинов.Сотрудник КАК Курьер
		|ПОМЕСТИТЬ Курьеры
		|ИЗ
		|	СкладыДиспетчера КАК СкладыДиспетчера
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиМагазинов КАК СотрудникиМагазинов
		|		ПО СкладыДиспетчера.Склад = СотрудникиМагазинов.Склад
		|ГДЕ
		|	СотрудникиМагазинов.Курьер = ИСТИНА
		|	И СотрудникиМагазинов.Склад = &ДоступныеСклады
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиМагазинов.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сборщики.Сборщик КАК Сборщик,
		|	СУММА(ЕСТЬNULL(ЗаказыВСборке.Назначено, 0)) КАК Назначено,
		|	СУММА(ЕСТЬNULL(ЗаказыСобрано.Собрано, 0)) КАК Собрано,
		|	ПоследняяСборка.ДатаСборки КАК ДатаСборки
		|ИЗ
		|	Сборщики КАК Сборщики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыВСборке КАК ЗаказыВСборке
		|		ПО Сборщики.Сборщик = ЗаказыВСборке.Сборщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыСобрано КАК ЗаказыСобрано
		|		ПО Сборщики.Сборщик = ЗаказыСобрано.Сборщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследняяСборка КАК ПоследняяСборка
		|		ПО Сборщики.Сборщик = ПоследняяСборка.Сборщик
		|
		|СГРУППИРОВАТЬ ПО
		|	Сборщики.Сборщик,
		|	ПоследняяСборка.ДатаСборки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Курьеры.Курьер КАК Курьер,
		|	СУММА(ЕСТЬNULL(ЗаказыВДоставке.Назначено, 0)) КАК Назначено,
		|	ЕСТЬNULL(ЗаказыДоставлено.Доставлено, 0) КАК Доставлено,
		|	ПоследняяДоставка.ДатаДоставки КАК ДатаДоставки
		|ИЗ
		|	Курьеры КАК Курьеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыВДоставке КАК ЗаказыВДоставке
		|		ПО Курьеры.Курьер = ЗаказыВДоставке.Курьер
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыДоставлено КАК ЗаказыДоставлено
		|		ПО Курьеры.Курьер = ЗаказыДоставлено.Курьер
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследняяДоставка КАК ПоследняяДоставка
		|		ПО Курьеры.Курьер = ПоследняяДоставка.Курьер
		|
		|СГРУППИРОВАТЬ ПО
		|	Курьеры.Курьер,
		|	ПоследняяДоставка.ДатаДоставки,
		|	ЕСТЬNULL(ЗаказыДоставлено.Доставлено, 0)";
	
	Если НЕ СкладОтбор.Пустая() Тогда
		Запрос.УстановитьПараметр("ДоступныеСклады", СкладОтбор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Сборщики.Склад  = &ДоступныеСклады", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиМагазинов.Склад = &ДоступныеСклады", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудник", Диспетчер);
	Запрос.УстановитьПараметр("СтатусыДоставки", СтатусыДоставки);
	Запрос.УстановитьПараметр("СтатусыСборки", СтатусыСборки);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекущаяДатаСеанса()));
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Сборщики.Загрузить(Результаты[9].Выгрузить());
	Курьеры.Загрузить(Результаты[10].Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КурьерыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КурьерыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Курьер = Курьеры.НайтиПоИдентификатору(Строка).Курьер;
	
	НазначитьКурьераНаРаспоряжения(ПараметрыПеретаскивания.Значение, Курьер);
	Элементы.СписокЗаказов.Обновить();
	ЗаполнитьКурьеровИСборщиков();
	
КонецПроцедуры

&НаСервере
Процедура НазначитьКурьераНаРаспоряжения(Распоряжения, Курьер)
	
	Для Каждого Распоряжение Из Распоряжения Цикл
		
		СтатусРаспоряжения = СтатусРаспоряжения(Распоряжение);
		Если СтатусРаспоряжения = Перечисления.СтатусыСборкиИДоставки.Отменен 
			ИЛИ СтатусРаспоряжения = Перечисления.СтатусыСборкиИДоставки.Доставлен Тогда
			ТекстСообщения = НСтр("ru = 'Курьер не назначен: %1
									 | Заказ не готов к доставке';
									 |en = 'No courier assigned: %1
									 | The order is not ready for delivery'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(Распоряжение));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Склад");
		НазначениеРазрешено = КурьерРаботаетНаСкладе(Склад, Курьер);
		
		Если НазначениеРазрешено Тогда
			
			РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();//ДокументОбъект.ЗаказКлиента
			РаспоряжениеОбъект.Курьер = Курьер;
			РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Курьер не назначен: %1
									  |%2 не работает на складе %3';
									  |en = 'No courier assigned: %1
									  |%2 is not employed on warehouse %3'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(Распоряжение), Строка(Курьер), Строка(Склад));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СборщикиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СборщикиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Сборщик = Сборщики.НайтиПоИдентификатору(Строка).Сборщик;
	
	НазначитьСборщикаНаРаспоряжения(ПараметрыПеретаскивания.Значение, Сборщик);
	Элементы.СписокЗаказов.Обновить();
	ЗаполнитьКурьеровИСборщиков();
	
КонецПроцедуры

&НаСервере
Процедура НазначитьСборщикаНаРаспоряжения(Распоряжения, Сборщик)
	
	Для Каждого Распоряжение Из Распоряжения Цикл
		
		СтатусРаспоряжения = СтатусРаспоряжения(Распоряжение);
		Если СтатусРаспоряжения <> Перечисления.СтатусыСборкиИДоставки.КСборке Тогда
			ТекстСообщения = НСтр("ru = 'Сборщик не назначен: %1
									  |Распоряжение не в статусе ""К сборке""';
									  |en = 'No picker assigned: %1
									  |Reference must have ""For kitting"" status'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(Распоряжение));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Склад");
		НазначениеРазрешено = СборщикРаботаетНаСкладе(Склад, Сборщик);
		
		Если НазначениеРазрешено Тогда
			
			РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();//ДокументОбъект.ЗаказКлиента
			РаспоряжениеОбъект.Сборщик = Сборщик;
			РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Сборщик не назначен: %1
									  |%2 не работает на складе %3';
									  |en = 'No picker assigned: %1
									  |%2 is not employed on warehouse %3'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(Распоряжение), Строка(Сборщик), Строка(Склад));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КурьерРаботаетНаСкладе(Склад, Курьер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиМагазинов.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиМагазинов КАК СотрудникиМагазинов
		|ГДЕ
		|	СотрудникиМагазинов.Сотрудник = &Сотрудник
		|	И СотрудникиМагазинов.Склад = &Склад
		|	И СотрудникиМагазинов.Курьер = ИСТИНА";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Сотрудник", Курьер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СборщикРаботаетНаСкладе(Склад, Сборщик)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиМагазинов.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиМагазинов КАК СотрудникиМагазинов
		|ГДЕ
		|	СотрудникиМагазинов.Сотрудник = &Сотрудник
		|	И СотрудникиМагазинов.Склад = &Склад
		|	И СотрудникиМагазинов.Сборщик = ИСТИНА";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Сотрудник", Сборщик);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СнятьКурьераНаСервере()
	
	Для Каждого Распоряжение Из Элементы.СписокЗаказов.ВыделенныеСтроки Цикл
		РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();//ДокументОбъект.ЗаказКлиента
		РаспоряжениеОбъект.Курьер = Справочники.ФизическиеЛица.ПустаяСсылка();
		РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьСборщикаНаСервере()
	
	Для Каждого Распоряжение Из Элементы.СписокЗаказов.ВыделенныеСтроки Цикл
		РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();//ДокументОбъект.ЗаказКлиента
		РаспоряжениеОбъект.Сборщик = Справочники.ФизическиеЛица.ПустаяСсылка();
		РаспоряжениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьСтатус(Распоряжение, Перечисления.СтатусыСборкиИДоставки.КСборке);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеНаФорме(Результат = Неопределено, Вт = Неопределено) Экспорт
	
	Элементы.СписокЗаказов.Обновить();
	ЗаполнитьКурьеровИСборщиков();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСборщикаНаСервере(Результат = Неопределено, Вт = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	МассивЗаказов = Элементы.СписокЗаказов.ВыделенныеСтроки;
	НазначитьСборщикаНаРаспоряжения(МассивЗаказов, Результат);
	
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКурьераНаСервере(Результат = Неопределено, Вт = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	МассивЗаказов = Элементы.СписокЗаказов.ВыделенныеСтроки;
	НазначитьКурьераНаРаспоряжения(МассивЗаказов, Результат);
	
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаСервере
Функция СтатусРаспоряжения(Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыСборкиИДоставки.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
		|ГДЕ
		|	СтатусыСборкиИДоставки.Распоряжение = &Распоряжение";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Статус;
	КонецЦикла;
	
	Возврат Перечисления.СтатусыСборкиИДоставки.ПустаяСсылка();
	
КонецФункции

#КонецОбласти