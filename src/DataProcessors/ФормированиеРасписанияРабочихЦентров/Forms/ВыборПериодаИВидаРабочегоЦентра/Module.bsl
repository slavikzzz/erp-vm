//++ Устарело_Производство21
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОтборПодразделение    = Параметры.Подразделение;
	ВыбранныйПериодНачало = Параметры.Период;
	Если ВыбранныйПериодНачало = '000101010000' Тогда
		ВыбранныйПериодНачало = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПриИзмененииПодразделения();
	
	Если Параметры.Свойство("ВидРабочегоЦентра") Тогда
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра,Период", Параметры.ВидРабочегоЦентра, Параметры.Период);
		СписокСтрок = КлючевыеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.КлючевыеВидыРабочихЦентров.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.ВыбратьПериодИзСписка(
				ЭтаФорма,
				Элемент,
				ВидПериода,
				ВыбранныйПериодНачало,
				ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКлючевыеВидыРабочихЦентров

&НаКлиенте
Процедура КлючевыеВидыРабочихЦентровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьВыбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	ВыполнитьВыбор();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КлючевыеВидыРабочихЦентровРасписаниеРаботы.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючевыеВидыРабочихЦентров.СоставлятьРасписание");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючевыеВидыРабочихЦентров.Ключевой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется';
																|en = 'Not required'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КлючевыеВидыРабочихЦентровРасписаниеРаботы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючевыеВидыРабочихЦентров.РасписаниеРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияРасписанияРабочихЦентров.СформированоПолностью;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючевыеВидыРабочихЦентров.СоставлятьРасписание");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючевыеВидыРабочихЦентров.Ключевой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КлючевыеВидыРабочихЦентровПериодСтрока.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючевыеВидыРабочихЦентров.СоставлятьРасписание");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючевыеВидыРабочихЦентров.РасписаниеРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано);
	СписокЗначений.Добавить(Перечисления.СостоянияРасписанияРабочихЦентров.СформированоЧастично);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючевыеВидыРабочихЦентров.Период");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("КонецТекущегоДня");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);

КонецПроцедуры

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьДанные()

	КонецТекущегоДня = КонецДня(ТекущаяДатаСеанса());
	ЗаполнитьСписокКлючевыхВидовРабочихЦентров();
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьСписокКлючевыхВидовРабочихЦентров()

	КлючевыеВидыРабочихЦентров.Очистить();
	
	Если ВыбранныйПериодНачало = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеВидыРабочихЦентровТаблица = ОперативныйУчетПроизводства.КлючевыеВидыРабочихЦентров(
												ОтборПодразделение, 
												ВыбранныйПериодНачало,
												ВыбранныйПериодОкончание, 
												Истина);
												
	КлючевыеВидыРабочихЦентров.Загрузить(КлючевыеВидыРабочихЦентровТаблица);
	
	Для каждого СтрокаВидРЦ Из КлючевыеВидыРабочихЦентров Цикл
		
		СтрокаВидРЦ.ПериодСтрока = ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(
										СтрокаВидРЦ.Период,
										СтрокаВидРЦ.ИнтервалПланирования);
										
	КонецЦикла; 
	
	КлючевыеВидыРабочихЦентров.Сортировать("Период,РасписаниеРаботы,ВидРабочегоЦентра");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодразделения()

	Если ОтборПодразделение.Пустая() Тогда
		Элементы.Период.ТолькоПросмотр = Истина;
		КлючевыеВидыРабочихЦентров.Очистить();
		Возврат;
	ИначеЕсли Элементы.Период.ТолькоПросмотр Тогда
		Элементы.Период.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(ОтборПодразделение);
	ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
	
	УправлениеВводомПериода();
	
	ОбновитьДанные();

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВыполнитьВыбор()

	ТекущиеДанные = Элементы.КлючевыеВидыРабочихЦентров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.СоставлятьРасписание ИЛИ НЕ ТекущиеДанные.Ключевой Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Формировать расписание не требуется';
									|en = 'Timetable generation is not required.'"));
		Возврат;
	КонецЕсли; 
	
	РезультатВыбора = Новый Структура("Период,ВидРабочегоЦентра,Подразделение", 
							ТекущиеДанные.Период, ТекущиеДанные.ВидРабочегоЦентра, ОтборПодразделение);
							
	Закрыть(РезультатВыбора);

КонецПроцедуры

&НаСервере
Процедура УправлениеВводомПериода()

	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ВидПериода = Перечисления.ДоступныеПериодыОтчета.День;
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День 
		ИЛИ ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя  Тогда
		
		ВидПериода = Перечисления.ДоступныеПериодыОтчета.Месяц;
		
	Иначе
		
		ВидПериода = Перечисления.ДоступныеПериодыОтчета.Год;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПериодНачало) Тогда
		ВыбранныйПериодНачало    = ОбщегоНазначенияУТКлиентСервер.НачалоПериодаОтчета(ВидПериода, ВыбранныйПериодНачало);
		ВыбранныйПериодОкончание = ОбщегоНазначенияУТКлиентСервер.КонецПериодаОтчета(ВидПериода, ВыбранныйПериодНачало);
	Иначе
		ВыбранныйПериодНачало    = '000101010000';
		ВыбранныйПериодОкончание = '000101010000';
	КонецЕсли;
	
	Список = ОбщегоНазначенияУТКлиентСервер.ДоступныеЗначенияПериодаПоВидуПериода(ВыбранныйПериодНачало, ВидПериода);
	ЭлементСписка = Список.НайтиПоЗначению(ВыбранныйПериодНачало);
	Если ЭлементСписка <> Неопределено Тогда
		Период = ЭлементСписка.Представление;
	Иначе
		Период = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод <> Неопределено Тогда
		
		Период = ВыбранныйПериод.Представление;
		
		ВыбранныйПериодНачало     = ВыбранныйПериод.Значение;
		ВыбранныйПериодОкончание  = ОбщегоНазначенияУТКлиентСервер.КонецПериодаОтчета(ВидПериода, ВыбранныйПериод.Значение);
		
		ОбновитьДанные();
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21