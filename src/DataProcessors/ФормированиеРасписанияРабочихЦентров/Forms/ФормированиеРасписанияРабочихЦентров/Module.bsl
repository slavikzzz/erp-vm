//++ Устарело_Производство21
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	МасштабШкалыВремени = 1800; // по умолчанию получасовая шкала
	
	ЦветГрафикаЗанятостиПоУмолчанию = Новый Цвет(192, 220, 192);
	ЦветРамкиГрафикаЗанятости = ЦветаСтиля.ЦветРамки;
	ЦветВыбраннойЗагрузкиГрафикаЗанятости = WebЦвета.ТемноСиний;
	ЦветШкалыПревышающейМаксимальную = ЦветаСтиля.ЦветОсобогоТекста;
	ЦветРамкиВыбранногоМЛ = WebЦвета.ТемноСиний;
	
	ВидимостьЛегендыГрафикаЗанятости = Истина;
	
	Если Параметры.Свойство("ОпределитьПериодИВидРабочегоЦентра") Тогда
		ОтборПодразделение = Параметры.Подразделение;
		ОпределитьПериодИВидРабочегоЦентра();
	ИначеЕсли Параметры.Свойство("ВидРабочегоЦентра") Тогда
		ОтборПодразделение = Параметры.Подразделение;
		ПриИзмененииПодразделенияНаСервере();
		ВыбранныйВидРабочегоЦентра = Параметры.ВидРабочегоЦентра;
		ПериодРасписания = "Произвольный";
		ИнтервалПланированияНачало = Параметры.ДатаИнтервалаНачало;
		ОпределитьОкончаниеИнтервалаПланирования();
	ИначеЕсли ЗначениеЗаполнено(Параметры.МаршрутныйЛист) Тогда
		ОтборПодразделение = Параметры.Подразделение;
		ПриИзмененииПодразделенияНаСервере();
		ПериодРасписания = "Произвольный";
		ОпределитьНачалоИнтервалаПланирования(Параметры.ДатаИнтервалаНачало);
		ОпределитьОкончаниеИнтервалаПланирования();
		ОпределитьВидРабочегоЦентраПоМаршрутномуЛисту(Параметры.МаршрутныйЛист);
	Иначе
		ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ФормированиеРасписанияКлючевыхРабочихЦентров", "ПараметрыОтбора");
		Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
		КонецЕсли;
	КонецЕсли; 
	
	ПриИзмененииПодразделенияНаСервере();
	ПриИзмененииВидаРабочегоЦентра();
	
	ОбновитьДанныеНаСервере();
	
	ЗаполнитьЛегендуГрафикаЗанятости();
	ПоказатьСкрытьЛегендуГрафикаЗанятости();
	
	// Установим строку на МЛ
	Если ЗначениеЗаполнено(Параметры.МаршрутныйЛист) Тогда
		АктивизироватьМаршрутныйЛист(Параметры.МаршрутныйЛист, ЭтаФорма);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Параметры.РабочийЦентр) Тогда
		СтруктураПоиска = Новый Структура("РабочийЦентр", Параметры.РабочийЦентр);
		СписокСтрок = СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.СписокРабочихЦентров.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РасписаниеРабочихЦентров_АктивизироватьМаршрутныйЛист" Тогда
		
		АктивизироватьМаршрутныйЛист(Параметр, ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "Запись_МаршрутныйЛистПроизводства" Тогда
		
		ОбновитьДанныеНаСервере();
		
	ИначеЕсли ОперативныйУчетПроизводстваКлиент.СобытиеКлючевойВидРабочегоЦентраИзменился(ИмяСобытия) Тогда
		
		ПриИзмененииКлючевогоВидаРЦНаСервере();
		
	ИначеЕсли ОперативныйУчетПроизводстваКлиент.СобытиеРасписаниеВидаРабочегоЦентраИзменилось(ИмяСобытия) 
		И Источник <> ЭтаФорма 
		И Параметр.ВидРабочегоЦентра = ВыбранныйВидРабочегоЦентра 
		И Параметр.ДатаИнтервала = ИнтервалПланированияНачало Тогда
			
		ОбновитьДанныеНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ДлительностьПереналадки" Тогда
		
		ПриИзмененииДлительностиПереналадкиНаСервере();
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ОтборПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйВидРабочегоЦентраПриИзменении(Элемент)
	
	ВыбранныйВидРабочегоЦентраПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасписанияПроизвольныйСПриИзменении(Элемент)
	
	Если ПериодРасписанияПроизвольныйПо <= ПериодРасписанияПроизвольныйС Тогда
		ПериодРасписанияПроизвольныйПо = ПериодРасписанияПроизвольныйС + 3600;
	КонецЕсли; 
	
	ПриИзмененииПериодаРасписания(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасписанияПроизвольныйПоПриИзменении(Элемент)
	
	Если ПериодРасписанияПроизвольныйС >= ПериодРасписанияПроизвольныйПо Тогда
		ПериодРасписанияПроизвольныйС = ПериодРасписанияПроизвольныйПо - 3600;
	КонецЕсли; 
	
	ПриИзмененииПериодаРасписания(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасписанияПроизвольныйПоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасписанияДеньПриИзменении(Элемент)
	
	ПриИзмененииПериодаРасписания(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасписанияПоРабочемуЦентруПриИзменении(Элемент)
	
	УстановитьОтборПоРабочемуЦентру();
	
	ДоступнаНастройка = (ОтборРасписанияПоРабочемуЦентру = 0);
	Элементы.РасписаниеРабочихЦентровПереместитьВНачалоРасписания.Доступность = ДоступнаНастройка;
	Элементы.РасписаниеРабочихЦентровПереместитьВКонецРасписания.Доступность = ДоступнаНастройка;
	Элементы.РасписаниеРабочихЦентровУпорядочитьПоИзделиям.Доступность = ДоступнаНастройка;
	Элементы.РасписаниеРабочихЦентровУпорядочитьРасписаниеПоВариантамНаладки.Доступность = ДоступнаНастройка;
	Элементы.РасписаниеРабочихЦентровУместитьВГрафикРаботы.Доступность = ДоступнаНастройка;
	
	ЗаполнитьРасписаниеОбъемРаботВсего();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗанятостиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасшифровкаГрафикаЗанятости(Расшифровка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗанятостиОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасшифровкаГрафикаЗанятости(Расшифровка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикЗанятостиПриАктивизацииОбласти(Элемент)
	
	ПоказатьИнформациюОМЛ = 0;
	ПоказатьСведенияОВыбраннойОбластиГрафикаЗанятости(Истина);
	
	ПоказатьИндикаторЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура МасштабШкалыВремениПриИзменении(Элемент)
	
	ОбновитьГрафикЗанятости(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МасштабШкалыВремениРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийИндекс = Элементы.МасштабШкалыВремени.СписокВыбора.Индекс(Элементы.МасштабШкалыВремени.СписокВыбора.НайтиПоЗначению(МасштабШкалыВремени));
	НовыйИндекс = ТекущийИндекс + Направление;
	НовыйИндекс = Макс(НовыйИндекс, 0);
	НовыйИндекс = Мин(НовыйИндекс, Элементы.МасштабШкалыВремени.СписокВыбора.Количество() - 1);
	
	Если НовыйИндекс <> ТекущийИндекс Тогда
		МасштабШкалыВремени = Элементы.МасштабШкалыВремени.СписокВыбора.Получить(НовыйИндекс).Значение;
		ОбновитьГрафикЗанятости(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОМЛПриИзменении(Элемент)
	
	ПоказатьСведенияОВыбраннойОбластиГрафикаЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыУправлениеРасписаниемПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаУправлениеРасписаниемВГрафике
		И НЕ ГрафикЗанятостиАктуален Тогда
		
		ОбновитьГрафикЗанятости();
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТребуютПланирования

&НаКлиенте
Процедура ТребуютПланированияПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьИтогиТребуютПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуютПланированияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРабочихЦентров

&НаКлиенте
Процедура СписокРабочихЦентровПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьПриАктивизацииСтроки Тогда
		НеОбрабатыватьПриАктивизацииСтроки = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараллельнаяЗагрузка Тогда
		ЗаполнитьИтогиТребуютПланирования();
	Иначе
		ЗаполнитьИтогТребуютПланированияДоступно();
	КонецЕсли; 
	
	// Нужно запомнить текущие данные, т.к. пользователь может скрыть список РЦ
	ТекущиеДанные = Элементы.СписокРабочихЦентров.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РЦ_РабочийЦентр = ТекущиеДанные.РабочийЦентр;
		РЦ_ВариантНаладкиПрошлогоМЛ = ТекущиеДанные.ВариантНаладкиПрошлогоМЛ;
		РЦ_ДоступнаяЗагрузка = ТекущиеДанные.ДоступнаяЗагрузка;
		РЦ_КоэффициентВремениРаботы = ТекущиеДанные.КоэффициентВремениРаботы;
	Иначе
		РЦ_РабочийЦентр = Неопределено;
		РЦ_ВариантНаладкиПрошлогоМЛ = Неопределено;
		РЦ_ДоступнаяЗагрузка = 0;
		РЦ_КоэффициентВремениРаботы = 0;
	КонецЕсли;
	
	УстановитьОтборПоРабочемуЦентру();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРабочихЦентровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокРабочихЦентровРабочийЦентр" Тогда
		ПоказатьЗначение(, Элементы.СписокРабочихЦентров.ТекущиеДанные.РабочийЦентр);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасписаниеРабочихЦентров

&НаКлиенте
Процедура РасписаниеРабочихЦентровПриАктивизацииСтроки(Элемент)
	
	Если ОтборРасписанияПоРабочемуЦентру = 1 Тогда
		ТекущиеДанные = Элементы.РасписаниеРабочихЦентров.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаРЦ = СписокРабочихЦентров.НайтиСтроки(Новый Структура("РабочийЦентр", ТекущиеДанные.РабочийЦентр))[0];
			Элементы.СписокРабочихЦентров.ТекущаяСтрока = СтрокаРЦ.ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
	ЗаполнитьРасписаниеОбъемРаботВыбрано();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРабочихЦентровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	СтрокаРасписание = Элементы.РасписаниеРабочихЦентров.ТекущиеДанные;
	Если СтрокаРасписание.Начало <> '000101010000' 
		И СтрокаРасписание.РасписаниеВведеноВручную
		И (СтрокаРасписание.Начало < ВыбранныйПериодРасписания.Начало 
			ИЛИ СтрокаРасписание.Начало > ВыбранныйПериодРасписания.Окончание) Тогда
			
		ПоказатьПредупреждение(,НСтр("ru = 'Начало работы должно быть в периоде, на который составляется расписание.';
									|en = 'Work start should be within the period for which the timetable is generated.'"));
		Отказ = Истина;
	
	ИначеЕсли СтрокаРасписание.Окончание <> '000101010000' 
		И СтрокаРасписание.РасписаниеВведеноВручную
		И (СтрокаРасписание.Окончание < ВыбранныйПериодРасписания.Начало 
			ИЛИ СтрокаРасписание.Окончание > ВыбранныйПериодРасписания.Окончание) Тогда
			
		ПоказатьПредупреждение(,НСтр("ru = 'Окончание работы должно быть в периоде, на который составляется расписание.';
									|en = 'Work end should be within the period for which the timetable is generated.'"));
		Отказ = Истина;
	
	ИначеЕсли НЕ ПроверитьПериодРасписанияВВеденногоВручную(СтрокаРасписание.РабочийЦентр) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Начало работы не может быть позже начала следующих маршрутных листов.';
									|en = 'Work start date cannot be later than start date of the following route sheets.'"));
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРабочихЦентровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РасписаниеРабочихЦентровРасписаниеВведеноВручную" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаРасписание = Элементы.РасписаниеРабочихЦентров.ДанныеСтроки(ВыбраннаяСтрока);
		Если СтрокаРасписание.ДоступноИзменение Тогда
			Если СтрокаРасписание.РасписаниеВведеноВручную Тогда
				СтрокаРасписание.РасписаниеВведеноВручную = Ложь;
				СтрокаРасписание.НачалоПриРучномВводеРасписания = '000101010000';
				СтрокаРасписание.ОбъемРабот = СтрокаРасписание.ВремяРаботы / 3600;
				СтрокаРасписание.ВремяРаботыИзмененоПользователем = Ложь;
			
				РассчитатьРасписаниеПоВсемСтрокам(СтрокаРасписание.РабочийЦентр);
				ПриИзмененииРасписания();
			Иначе
				ИзменитьПериодВыполненияМаршрутногоЛиста(ВыбраннаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "РасписаниеРабочихЦентровНачало"
		ИЛИ Поле.Имя = "РасписаниеРабочихЦентровОкончание" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИзменитьПериодВыполненияМаршрутногоЛиста(ВыбраннаяСтрока);
		
	ИначеЕсли Поле.Имя = "РасписаниеРабочихЦентровЕстьПроблема" Тогда
		
		СтандартнаяОбработка = Ложь;
		СтрокаРасписание = Элементы.РасписаниеРабочихЦентров.ДанныеСтроки(ВыбраннаяСтрока);
		Если СтрокаРасписание.ЕстьПроблема Тогда
			ПоказатьПредупреждение(, СтрокаРасписание.ПроблемыПриФормированииРасписания,, НСтр("ru = 'Информация о расписании';
																								|en = 'Timetable information'"));
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРабочихЦентровВремяРаботыИзмененоПользователемПриИзменении(Элемент)

	УстановитьНормативныйОбъемРабот();
	ПриИзмененииРасписания();

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРабочихЦентровОбъемРаботПриИзменении(Элемент)
	
	СтрокаРасписание = Элементы.РасписаниеРабочихЦентров.ТекущиеДанные;
	СтрокаРасписание.ВремяРаботыИзмененоПользователем = Истина;
	
	РассчитатьРасписаниеПриИзмененииСтроки(СтрокаРасписание.ПолучитьИдентификатор(), СтрокаРасписание.РабочийЦентр);
	ПриИзмененииРасписания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбратьПериодИВидРабочегоЦентра(Команда)
	
	ВыборПериодаИВидаРабочегоЦентра();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьМаршрутныйЛист(Команда)
	
	ОткрытьЗначениеВТекущейСтроке(Элементы.РасписаниеРабочихЦентров, "МаршрутныйЛист");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьНеЗапланированныйМаршрутныйЛист(Команда)
	
	ОткрытьЗначениеВТекущейСтроке(Элементы.ТребуютПланирования, "МаршрутныйЛист");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазначитьРабочийЦентрМаршрутнымЛистам(Команда)
	
	НазначитьРабочийЦентрМаршрутнымЛистам();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУпорядочитьРасписаниеПоИзделиям(Команда)
	
	Если РЦ_РабочийЦентр.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаИсточник", РасписаниеРабочихЦентров);
	ПараметрыФормы.Вставить("ПараметрыОтбора", Новый Структура("РабочийЦентр,ДоступноИзменение", РЦ_РабочийЦентр, Истина));
	ОписаниеОповещения = Новый ОписаниеОповещения("УпорядочитьРасписаниеПоИзделиямЗавершение", ЭтотОбъект, РЦ_РабочийЦентр);
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма.УпорядочитьПоИзделиям", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУпорядочитьНеЗапланированныеПоИзделиям(Команда)
	
	Если ТребуютПланирования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаИсточник", ТребуютПланирования);
	ОписаниеОповещения = Новый ОписаниеОповещения("УпорядочитьНеЗапланированныеПоИзделиямЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма.УпорядочитьПоИзделиям", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУпорядочитьНеЗапланированныеПоВариантамНаладки(Команда)
	
	Если ТребуютПланирования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаИсточник", ТребуютПланирования);
	ПараметрыФормы.Вставить("ТаблицаДлительностьПереналадки", ТаблицаДлительностьПереналадки);
	ПараметрыФормы.Вставить("ЕдиницаВремениПереналадки", ЕдиницаВремениПереналадки);
	ПараметрыФормы.Вставить("ВариантНаладкиПрошлогоМЛ", РЦ_ВариантНаладкиПрошлогоМЛ);
	ПараметрыФормы.Вставить("ОформлениеВариантовНаладки", ОформлениеВариантовНаладки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УпорядочитьНеЗапланированныеПоВариантамНаладкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма.УпорядочитьПоВариантамНаладки", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУпорядочитьРасписаниеПоВариантамНаладки(Команда)
	
	Если РЦ_РабочийЦентр.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаИсточник", РасписаниеРабочихЦентров);
	ПараметрыФормы.Вставить("ТаблицаДлительностьПереналадки", ТаблицаДлительностьПереналадки);
	ПараметрыФормы.Вставить("ЕдиницаВремениПереналадки", ЕдиницаВремениПереналадки);
	ПараметрыФормы.Вставить("ВариантНаладкиПрошлогоМЛ", РЦ_ВариантНаладкиПрошлогоМЛ);
	ПараметрыФормы.Вставить("ПараметрыОтбора", Новый Структура("РабочийЦентр,ДоступноИзменение", РЦ_РабочийЦентр, Истина));
	ПараметрыФормы.Вставить("ОформлениеВариантовНаладки", ОформлениеВариантовНаладки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УпорядочитьРасписаниеПоВариантамНаладкиЗавершение", ЭтотОбъект, РЦ_РабочийЦентр);
	
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма.УпорядочитьПоВариантамНаладки", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьГрафикРаботыРабочегоЦентра(Команда)
	
	ТекущиеДанные = Элементы.СписокРабочихЦентров.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РабочийЦентр", ТекущиеДанные.РабочийЦентр);
		ПараметрыФормы.Вставить("ГрафикРаботы", ГрафикРаботы);
		ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма.ГрафикРаботы", ПараметрыФормы);
	КонецЕсли; 
								
КонецПроцедуры

&НаКлиенте
Процедура КомандаУместитьВГрафикРаботы(Команда)
	
	Если РЦ_РабочийЦентр.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТребуетсяРасчетРасписания(РЦ_РабочийЦентр) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Нет маршрутных листов, которые требуется уместить в график работы.';
									|en = 'No route sheets require compliance with the work schedule.'"),, НСтр("ru = 'Информация';
																														|en = 'Information'"));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Изменить объем работ так чтобы маршрутные листы уместились в график?';
						|en = 'Change the amount of work so that the route sheets fit in the schedule?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УместитьВГрафикРаботыЗавершение", ЭтаФорма, РЦ_РабочийЦентр);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Уместить в график работы';
																						|en = 'Keep within work schedule'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьМаршрутныйЛист(Команда)
	
	РазбитьМаршрутныйЛист();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьМаршрутныеЛисты(Команда)
	
	ОперативныйУчетПроизводстваКлиент.СформироватьМаршрутныеЛистыПоРасписанию(
				ОтборПодразделение,
				ВыбранныйВидРабочегоЦентра,
				ИнтервалПланированияНачало,
				УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьВНачалоРасписания(Команда)
	
	ПереместитьРасписание(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьВКонецРасписания(Команда)
	
	ПереместитьРасписание(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУправлениеКлючевымиВидамиРабочихЦентров(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение",     ОтборПодразделение);
	ПараметрыФормы.Вставить("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
	ПараметрыФормы.Вставить("Период",            ИнтервалПланированияНачало);
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма.УправлениеКлючевымиВидамиРабочихЦентров", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПередатьКВыполнениюМаршрутныеЛисты(Команда)
	
	ПередатьКВыполнениюМаршрутныеЛистыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьРасписание(Команда)
	
	УдалитьИзРасписанияМЛ(Элементы.РасписаниеРабочихЦентров.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьВГрафикеПозже(Команда)
	
	ПереместитьВОчередиВГрафике(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьВГрафикеРаньше(Команда)
	
	ПереместитьВОчередиВГрафике(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСкрытьЛегендуГрафикаЗанятости(Команда)
	
	НеОбрабатыватьПриАктивизацииСтроки = Истина;
	ВидимостьЛегендыГрафикаЗанятости = НЕ ВидимостьЛегендыГрафикаЗанятости;
	ПоказатьСкрытьЛегендуГрафикаЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВвестиПериодВыполнения(Команда)
	
	ТекущаяСтрока = Элементы.РасписаниеРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ИзменитьПериодВыполненияМаршрутногоЛиста(ТекущаяСтрока);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьНеЗапланированныеМЛИзРасписания(Команда)
	
	УдалитьНеЗапланированныеМЛИзРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаСервере
Процедура ОтборПодразделениеПриИзмененииНаСервере()

	СохранитьПараметрыОтбора();
	
	СписокРабочихЦентров.Очистить();
	
	ПриИзмененииПодразделенияНаСервере();
	ПриИзмененииВидаРабочегоЦентра();
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыбранныйВидРабочегоЦентраПриИзмененииНаСервере()

	СохранитьПараметрыОтбора();
	
	ПриИзмененииВидаРабочегоЦентра();
	
	ОбновитьДанныеНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодаРасписания(ИзменилосьНачало)

	ПриИзмененииПериодаРасписанияНаСервере(ИзменилосьНачало);
	ЗаполнитьРасписаниеОбъемРаботВсего();
	ЗаполнитьИтогиТребуютПланирования();
	ПриИзмененииГрафикаЗанятости();

КонецПроцедуры
 
&НаСервере
Процедура ПриИзмененииПериодаРасписанияНаСервере(ИзменилосьНачало)

	СохранитьПараметрыОтбора();
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	Если ВыбранныйПериодРасписания.Начало < ИнтервалПланированияНачало
		ИЛИ ВыбранныйПериодРасписания.Начало > ИнтервалПланированияОкончание
		ИЛИ ВыбранныйПериодРасписания.Окончание < ИнтервалПланированияНачало
		ИЛИ ВыбранныйПериодРасписания.Окончание > ИнтервалПланированияОкончание Тогда
		
		// Период расписания относится к другому интервалу планирования
		
		Если ИзменилосьНачало Тогда
			ОпределитьНачалоИнтервалаПланирования(ВыбранныйПериодРасписания.Начало);
		Иначе
			ОпределитьНачалоИнтервалаПланирования(ВыбранныйПериодРасписания.Окончание);
		КонецЕсли; 
		
		ОпределитьОкончаниеИнтервалаПланирования();
		СкорректироватьВыборПериода();
		ОбновитьДанныеНаСервере();
		
	Иначе
		
		ПоказатьМаршрутныеЛистыВыбранногоПериода();
		ЗаполнитьДанныеРабочихЦентров();
		ОбновитьИнформациюРасписания();
		
		ОбновитьПриНеобходимостиГрафикЗанятостиНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыборПериодаРасписания()

	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ИнтервалПланированияОкончание = КонецЧаса(ИнтервалПланированияНачало);
		ПериодРасписания = "Произвольный";
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		ИнтервалПланированияОкончание = КонецДня(ИнтервалПланированияНачало);
		ПериодРасписания = "День";
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		ИнтервалПланированияОкончание = КонецНедели(ИнтервалПланированияНачало);
		
		ПериодРасписания = "Произвольный";
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		
		ИнтервалПланированияОкончание = КонецМесяца(ИнтервалПланированияНачало);
		
		ПериодРасписания = "Произвольный";
		
	Иначе
		
		// Интервал планирования не определен
		ПериодРасписания = "Произвольный";
		
	КонецЕсли;

	ОпределитьОкончаниеИнтервалаПланирования();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНачалоИнтервалаПланирования(ВыбраннаяДата)

	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ИнтервалПланированияНачало = НачалоЧаса(ВыбраннаяДата);
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		ИнтервалПланированияНачало = НачалоДня(ВыбраннаяДата);
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		ИнтервалПланированияНачало = НачалоНедели(ВыбраннаяДата);
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		
		ИнтервалПланированияНачало = НачалоМесяца(ВыбраннаяДата);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьОкончаниеИнтервалаПланирования()

	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ИнтервалПланированияОкончание = КонецЧаса(ИнтервалПланированияНачало);
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		ИнтервалПланированияОкончание = КонецДня(ИнтервалПланированияНачало);
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		ИнтервалПланированияОкончание = КонецНедели(ИнтервалПланированияНачало);
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		
		ИнтервалПланированияОкончание = КонецМесяца(ИнтервалПланированияНачало);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьВидРабочегоЦентраПоМаршрутномуЛисту(МаршрутныйЛист)

	КлючевыеВидыРабочихЦентров = ОперативныйУчетПроизводства.КлючевыеВидыРабочихЦентров(
										ОтборПодразделение, 
										ИнтервалПланированияНачало, 
										ИнтервалПланированияОкончание);
										
	Если КлючевыеВидыРабочихЦентров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистПроизводстваВидыРабочихЦентров.ВидРабочегоЦентра
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводстваВидыРабочихЦентров
	|ГДЕ
	|	МаршрутныйЛистПроизводстваВидыРабочихЦентров.Ссылка = &МаршрутныйЛист
	|	И МаршрутныйЛистПроизводстваВидыРабочихЦентров.ДатаИнтервала = &ДатаИнтервала";
	
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
	Запрос.УстановитьПараметр("ДатаИнтервала", ИнтервалПланированияНачало);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра,Период", Выборка.ВидРабочегоЦентра, ИнтервалПланированияНачало);
  		СписокСтрок = КлючевыеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 И СписокСтрок[0].Ключевой Тогда
			ВыбранныйВидРабочегоЦентра = Выборка.ВидРабочегоЦентра;
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборПериодаИВидаРабочегоЦентраНаСервере()

	СохранитьПараметрыОтбора();
	
	ПриИзмененииПодразделенияНаСервере();
	ПриИзмененииВидаРабочегоЦентра();
	
	ОбновитьДанныеНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаИВидаРабочегоЦентра()

	Если ОтборПодразделение.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать подразделение.';
								|en = 'Select business unit.'");
  		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОтборПодразделение");
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение",     ОтборПодразделение);
	ПараметрыФормы.Вставить("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
	ПараметрыФормы.Вставить("Период",            ИнтервалПланированияНачало);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПериодаИВидаРабочегоЦентраЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма.ВыборПериодаИВидаРабочегоЦентра", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
 
&НаКлиенте
Процедура ВыборПериодаИВидаРабочегоЦентраЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		ОтборПодразделение = РезультатЗакрытия.Подразделение;
		ВыбранныйВидРабочегоЦентра = РезультатЗакрытия.ВидРабочегоЦентра;
		ИнтервалПланированияНачало = РезультатЗакрытия.Период;
		
		ОбработатьВыборПериодаИВидаРабочегоЦентраНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуПериодРасписания()

	Если НЕ ВыбранныйВидРабочегоЦентра.Пустая() Тогда
		
		Элементы.ДекорацияПериодРасписания.Видимость = Истина;
		
		ПериодРасписания = ПериодРасписания;
		
		Если ПериодРасписания = "День" Тогда
			СтраницаПериодРасписания = Элементы.СтраницаПериодРасписанияДень;
		ИначеЕсли ПериодРасписания = "Произвольный" Тогда
			СтраницаПериодРасписания = Элементы.СтраницаПериодРасписанияПроизвольный;
		КонецЕсли; 

		Элементы.СтраницыПериодРасписания.ТекущаяСтраница = СтраницаПериодРасписания;
		
	Иначе
		
		Элементы.ДекорацияПериодРасписания.Видимость = Ложь;
		Элементы.СтраницыПериодРасписания.ТекущаяСтраница = Элементы.СтраницаВыборВидаРЦ;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьВыборПериода()

	ПроверитьВыборПериода(ПериодРасписанияПроизвольныйС, ИнтервалПланированияНачало);
	ПроверитьВыборПериода(ПериодРасписанияПроизвольныйПо, ИнтервалПланированияОкончание);
	ПроверитьВыборПериода(ПериодРасписанияДень, ИнтервалПланированияНачало);

КонецПроцедуры

&НаСервере
Процедура ПроверитьВыборПериода(ВыбранныйПериод, ЗначениеПоУмолчанию)

	Если ВыбранныйПериод = '000101010000' 
		ИЛИ ВыбранныйПериод > ИнтервалПланированияОкончание 
		ИЛИ ВыбранныйПериод < ИнтервалПланированияНачало Тогда
		
		ВыбранныйПериод = ЗначениеПоУмолчанию;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()

	ПараметрыОтбора = Новый Структура("ОтборПодразделение,ВыбранныйВидРабочегоЦентра,
										|ПериодРасписания,ПериодРасписанияПроизвольныйС,ПериодРасписанияПроизвольныйПо,
										|ПериодРасписанияДень,ИнтервалПланированияНачало,ИнтервалПланированияОкончание,
										|МасштабШкалыВремени,ВидимостьЛегендыГрафикаЗанятости");
										
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	
	ХранилищеНастроекДанныхФорм.Сохранить("ФормированиеРасписанияКлючевыхРабочихЦентров", "ПараметрыОтбора", ПараметрыОтбора);

КонецПроцедуры

#КонецОбласти

#Область НеЗапланированныеМаршрутныеЛисты

&НаКлиенте
Процедура НазначитьРабочийЦентрМаршрутнымЛистам()

	СтрокаРабочийЦентр = Элементы.СписокРабочихЦентров.ТекущиеДанные;
	Если СтрокаРабочийЦентр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НазначитьРабочийЦентрМаршрутнымЛистамНаСервере(СтрокаРабочийЦентр.РабочийЦентр, СтрокаРабочийЦентр.КоэффициентВремениРаботы);
	
	ЗаполнитьИтогиТребуютПланирования();
	
	ПриИзмененииРасписания();
	
КонецПроцедуры

&НаСервере
Процедура НазначитьРабочийЦентрМаршрутнымЛистамНаСервере(Знач РабочийЦентр, Знач КоэффициентВремениРаботы)
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	ИндексНовойСтроки = Неопределено;
	Если ВыбранныйПериодРасписания.Окончание < ИнтервалПланированияОкончание Тогда
		// Пользователь работает не со всем интервалом планирования
		// Новый МЛ нужно добавить в расписание так чтобы сохранился порядок МЛ во всем интервале.
		ИндексНовойСтроки = 0;
		СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
  		СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаРасписание Из СписокСтрок Цикл
			Если СтрокаРасписание.Начало <= ВыбранныйПериодРасписания.Окончание 
				И СтрокаРасписание.Начало <> '000101010000' Тогда
				ИндексТекущегоМЛ = РасписаниеРабочихЦентров.Индекс(СтрокаРасписание);
				ИндексНовойСтроки = ?(ИндексНовойСтроки = Неопределено, ИндексТекущегоМЛ + 1, Макс(ИндексТекущегоМЛ + 1, ИндексНовойСтроки));
			КонецЕсли; 
		КонецЦикла;
		
		Если ИндексНовойСтроки <> Неопределено 
			И ИндексНовойСтроки >= РасписаниеРабочихЦентров.Количество() Тогда
			ИндексНовойСтроки = Неопределено;
		КонецЕсли; 		
	КонецЕсли; 
	
	СтрокиКУдалению = Новый Массив;
	МаршрутныеЛистыТребующиеПереносаРаботы = Новый Массив;
	
	// Обходить нужно таблицу, а не ВыделенныеСтроки, чтобы соблюсти порядок строк
	Для каждого СтрокаТребуетРасписания Из ТребуютПланирования Цикл
		
		ИдентификаторСтроки = СтрокаТребуетРасписания.ПолучитьИдентификатор();
		Если Элементы.ТребуютПланирования.ВыделенныеСтроки.Найти(ИдентификаторСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТребуетРасписания = ТребуютПланирования.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		СтрокиКУдалению.Добавить(СтрокаТребуетРасписания);
		
		Если ИндексНовойСтроки <> Неопределено Тогда
			СтрокаРасписание = РасписаниеРабочихЦентров.Вставить(ИндексНовойСтроки);
			ИндексНовойСтроки = ИндексНовойСтроки + 1;
		Иначе
			СтрокаРасписание = РасписаниеРабочихЦентров.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРасписание, СтрокаТребуетРасписания);
		
		СтрокаРасписание.ВремяРаботы = СтрокаРасписание.ВремяРаботы * КоэффициентВремениРаботы;
		СтрокаРасписание.ОбъемРабот = СтрокаРасписание.ВремяРаботы / 3600;
		СтрокаРасписание.КоэффициентВремениРаботы = КоэффициентВремениРаботы;
		
		СтрокаРасписание.Отображать = Истина;
		СтрокаРасписание.ДоступноИзменение = Истина;
		СтрокаРасписание.РабочийЦентр       = РабочийЦентр;
		СтрокаРасписание.РассчитатьРасписание = Истина;
		
		Если СтрокаТребуетРасписания.ДатаИнтервала <> ИнтервалПланированияНачало Тогда
			СтрокаРасписание.ПеренесенНаДругойИнтервал = Истина;
		КонецЕсли; 
		
	КонецЦикла; 

	// Установим текущую строку
	ИндексПоследнейСтроки = ТребуютПланирования.Количество() - 1;
	НоваяТекущаяСтрока = Неопределено;
	ПредыдущаяСтрока = Неопределено;
	Для каждого СтрокаТребуетРасписания Из ТребуютПланирования Цикл
		Если СтрокиКУдалению.Найти(СтрокаТребуетРасписания) <> Неопределено Тогда
			ИндексТекущейСтроки = ТребуютПланирования.Индекс(СтрокаТребуетРасписания);
			Если ИндексТекущейСтроки = ИндексПоследнейСтроки И ПредыдущаяСтрока <> Неопределено Тогда
				НоваяТекущаяСтрока = ПредыдущаяСтрока.ПолучитьИдентификатор();
			ИначеЕсли ИндексТекущейСтроки < ИндексПоследнейСтроки Тогда
				НоваяТекущаяСтрока = ТребуютПланирования[ИндексТекущейСтроки+1].ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			ПредыдущаяСтрока = СтрокаТребуетРасписания;
		КонецЕсли; 
	КонецЦикла; 
	Если НоваяТекущаяСтрока <> Неопределено Тогда
		Элементы.ТребуютПланирования.ТекущаяСтрока = НоваяТекущаяСтрока;
	КонецЕсли; 
	
	// Удалим строки которым назначили рабочий центр
	Для каждого СтрокаТребуетРасписания Из СтрокиКУдалению Цикл
		ТребуютПланирования.Удалить(СтрокаТребуетРасписания);
	КонецЦикла; 
	
	РассчитатьРасписаниеРабочегоЦентра(РабочийЦентр);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗанятостьМЛПеренесенныхНаДругойИнтервал()

	Для каждого СтрокаРасписание Из РасписаниеРабочихЦентров Цикл
		
		Если НЕ СтрокаРасписание.ПеренесенНаДругойИнтервал
			ИЛИ НЕ СтрокаРасписание.РассчитатьРасписание Тогда
			Продолжить;
		КонецЕсли;
		
		МаршрутныйЛистОбъект = СтрокаРасписание.МаршрутныйЛист.ПолучитьОбъект();
		
		// Получим список видов РЦ работу которых нужно перенести
		СписокВидовРЦ = Новый Массив;
		Для каждого СтрокаЗанятость Из МаршрутныйЛистОбъект.ЗанятостьВидовРабочихЦентровПоГрафику Цикл
			Если СписокВидовРЦ.Найти(СтрокаЗанятость.ВидРабочегоЦентра) = Неопределено Тогда
				СписокВидовРЦ.Добавить(СтрокаЗанятость.ВидРабочегоЦентра);
			КонецЕсли; 
		КонецЦикла;
		
		// Запомним выбор РЦ
		РабочиеЦентрыВидовРЦ = Новый Соответствие;
		Для каждого СтрокаЗанятость Из МаршрутныйЛистОбъект.ВидыРабочихЦентров Цикл
			РабочиеЦентрыВидовРЦ.Вставить(СтрокаЗанятость.ВидРабочегоЦентра, СтрокаЗанятость.РабочийЦентр);
		КонецЦикла;
		
		МаршрутныйЛистОбъект.ВидыРабочихЦентров.Очистить();
		
		// Получим занятость текущего вида РЦ в виде коэффициентов
		// Которую будем использовать чтобы распределить занятость других видов РЦ.
		МассивКоэффициентов = Новый Массив;
		Если СтрокаРасписание.Начало <> '000101010000' И СтрокаРасписание.Окончание <> '000101010000' Тогда
			Для каждого ЭлементДанныеЗанятостиВИнтервале Из СтрокаРасписание.ЗанятостьВИнтервалах Цикл
				ДанныеЗанятостиВИнтервале = ЭлементДанныеЗанятостиВИнтервале.Значение;
				МассивКоэффициентов.Добавить(ДанныеЗанятостиВИнтервале.ВремяРаботы);
			КонецЦикла;
		КонецЕсли;
	
		Для каждого ВидРабочегоЦентра Из СписокВидовРЦ Цикл
			
			// Определим общее время работы вида РЦ
			ВремяРаботыВидаРЦ = 0;
			СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВидРабочегоЦентра);
   			СписокСтрок =  МаршрутныйЛистОбъект.ЗанятостьВидовРабочихЦентровПоГрафику.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаЗанятость Из СписокСтрок Цикл
				ВремяРаботыВидаРЦ = ВремяРаботыВидаРЦ + СтрокаЗанятость.ВремяРаботы;
			КонецЦикла;
			Если ВремяРаботыВидаРЦ = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗанятостьПоГрафику = МаршрутныйЛистОбъект.ЗанятостьВидовРабочихЦентровПоГрафику.Найти(ВидРабочегоЦентра, "ВидРабочегоЦентра");
			
			// Добавим полученное время в маршрутный лист
			// При проведении МЛ в доступности видов РЦ будет занято нужное время в нужном интервале.
			Если СтрокаРасписание.Начало <> '000101010000' И СтрокаРасписание.Окончание <> '000101010000' Тогда
				
				// Распределим общее время на интервалы в которых работает текущий вид РЦ
				ВремяРаботыВИнтервалах = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(ВремяРаботыВидаРЦ, МассивКоэффициентов);
				
				Для Сч = 0 По СтрокаРасписание.ЗанятостьВИнтервалах.Количество()-1 Цикл
					ДанныеЗанятостиВИнтервале = СтрокаРасписание.ЗанятостьВИнтервалах.Получить(Сч).Значение;
					СтрокаЗанятость = МаршрутныйЛистОбъект.ВидыРабочихЦентров.Добавить();
					СтрокаЗанятость.ВидРабочегоЦентра = ВидРабочегоЦентра;
					СтрокаЗанятость.ДатаИнтервала = ДанныеЗанятостиВИнтервале.ДатаИнтервала;
					СтрокаЗанятость.ВремяРаботы = ВремяРаботыВИнтервалах[Сч];
					
					СтрокаЗанятость.РабочийЦентр = РабочиеЦентрыВидовРЦ.Получить(ВидРабочегоЦентра);
					СтрокаЗанятость.ВариантНаладки = СтрокаЗанятостьПоГрафику.ВариантНаладки;
					СтрокаЗанятость.ВремяРаботыНорматив = СтрокаЗанятостьПоГрафику.ВремяРаботыНорматив;
					СтрокаЗанятость.Загрузка = СтрокаЗанятостьПоГрафику.Загрузка;
					СтрокаЗанятость.ЗагрузкаНорматив = СтрокаЗанятостьПоГрафику.ЗагрузкаНорматив;
				КонецЦикла;
				
			Иначе
				
				СтрокаЗанятость = МаршрутныйЛистОбъект.ВидыРабочихЦентров.Добавить();
				СтрокаЗанятость.ВидРабочегоЦентра = ВидРабочегоЦентра;
				СтрокаЗанятость.ДатаИнтервала = ИнтервалПланированияНачало;
				СтрокаЗанятость.ВремяРаботы = ВремяРаботыВидаРЦ;
				
				СтрокаЗанятость.РабочийЦентр = РабочиеЦентрыВидовРЦ.Получить(ВидРабочегоЦентра);
				СтрокаЗанятость.ВариантНаладки = СтрокаЗанятостьПоГрафику.ВариантНаладки;
				СтрокаЗанятость.ВремяРаботыНорматив = СтрокаЗанятостьПоГрафику.ВремяРаботыНорматив;
				СтрокаЗанятость.Загрузка = СтрокаЗанятостьПоГрафику.Загрузка;
				СтрокаЗанятость.ЗагрузкаНорматив = СтрокаЗанятостьПоГрафику.ЗагрузкаНорматив;
				
			КонецЕсли;
				
		КонецЦикла;
		
		ОпределитьПериодРаботыВидовРЦМаршрутногоЛиста(МаршрутныйЛистОбъект);
		
		МаршрутныйЛистОбъект.ПеренесенНаДругойИнтервал = Истина;
		
		МаршрутныйЛистОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОпределитьПериодРаботыВидовРЦМаршрутногоЛиста(МаршрутныйЛистОбъект)

	НачалоИнтервала = '000101010000';
	ОкончаниеИнтервала = '000101010000';
	
	Для каждого СтрокаЗанятость Из МаршрутныйЛистОбъект.ВидыРабочихЦентров Цикл
		НачалоИнтервала = ?(НачалоИнтервала <> '000101010000', Мин(СтрокаЗанятость.ДатаИнтервала, НачалоИнтервала), СтрокаЗанятость.ДатаИнтервала);
		ОкончаниеИнтервала = ?(ОкончаниеИнтервала <> '000101010000', Макс(СтрокаЗанятость.ДатаИнтервала, ОкончаниеИнтервала), СтрокаЗанятость.ДатаИнтервала);
	КонецЦикла;
	
	ОкончаниеИнтервала = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ОкончаниеИнтервала, ИнтервалПланирования);
	
	МаршрутныйЛистОбъект.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику = НачалоИнтервала;
	МаршрутныйЛистОбъект.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику = ОкончаниеИнтервала;
	
	// Определим начало с учетом предварительного буфера
	Буфер = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
												МаршрутныйЛистОбъект.ПредварительныйБуфер, 
												МаршрутныйЛистОбъект.ЕдиницаИзмеренияПредварительногоБуфера);
	
	МаршрутныйЛистОбъект.Начало = ПланированиеПроизводства.ДатаСУчетомБуфера(
												НачалоИнтервала, 
												-Буфер,
												МаршрутныйЛистОбъект.Подразделение,
												МаршрутныйЛистОбъект.ЕдиницаИзмеренияПредварительногоБуфера);
	
	// Определим окончание с учетом завершающего буфера
	Буфер = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
												МаршрутныйЛистОбъект.ЗавершающийБуфер, 
												МаршрутныйЛистОбъект.ЕдиницаИзмеренияЗавершающегоБуфера);
												
	МаршрутныйЛистОбъект.Окончание = ПланированиеПроизводства.ДатаСУчетомБуфера(
												ОкончаниеИнтервала, 
												Буфер,
												МаршрутныйЛистОбъект.Подразделение,
												МаршрутныйЛистОбъект.ЕдиницаИзмеренияЗавершающегоБуфера);
												
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтогиТребуютПланирования()

	СтрокаРабочийЦентр = Элементы.СписокРабочихЦентров.ТекущиеДанные;
	Если СтрокаРабочийЦентр <> Неопределено Тогда
		РабочийЦентр = СтрокаРабочийЦентр.РабочийЦентр;
		ТекущийВариантНаладки = СтрокаРабочийЦентр.ВариантНаладкиПрошлогоМЛ;
	Иначе
		РабочийЦентр = Неопределено;
		ТекущийВариантНаладки = Неопределено;
	КонецЕсли;
	
	Если ПараллельнаяЗагрузка Тогда
		
		ТребуютПланированияЗагрузкаВсего = 0;
		ТребуютПланированияЗагрузкаВыбрано = 0;
		
		Элементы.СтраницыТребуютПланированияИтоги.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияИтогиПриПараллельнойЗагрузке;
			
		Если СтрокаРабочийЦентр <> Неопределено Тогда
			
			Если СтрокаРабочийЦентр.ДоступнаяЗагрузка <> 0 Тогда
				
				ЗагрузкаВсего = 0;
				Для каждого СтрокаТребуетРасписания Из ТребуютПланирования Цикл
					ЗагрузкаВсего = ЗагрузкаВсего + СтрокаТребуетРасписания.ВремяРаботы * СтрокаТребуетРасписания.Загрузка;
				КонецЦикла; 
				ТребуютПланированияЗагрузкаВсего = ЗагрузкаВсего * 100 / СтрокаРабочийЦентр.ДоступнаяЗагрузка;
			
				// Определим загрузку по выбранным строкам
				ЗагрузкаВыбрано = ТребуютПланированияЗагрузкаВыбрано();
				ТребуютПланированияЗагрузкаВыбрано = ЗагрузкаВыбрано * 100 / СтрокаРабочийЦентр.ДоступнаяЗагрузка;
				
			Иначе
				
				Элементы.СтраницыТребуютПланированияИтоги.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияИтогиНетДоступногоВремени;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе
		
		ТребуютПланированияОбъемРаботВсего = 0;
		ТребуютПланированияОбъемРаботВыбрано = 0;
		ТребуютПланированияПереналадка = 0;
		
		Для каждого СтрокаТребуетРасписания Из ТребуютПланирования Цикл
			ТребуютПланированияОбъемРаботВсего = ТребуютПланированияОбъемРаботВсего + СтрокаТребуетРасписания.ОбъемРабот;
		КонецЦикла; 
		
		// Обходить нужно таблицу, а не ВыделенныеСтроки, чтобы соблюсти порядок строк
		Для каждого СтрокаТребуетРасписания Из ТребуютПланирования Цикл
			
			ИдентификаторСтроки = СтрокаТребуетРасписания.ПолучитьИдентификатор();
			Если Элементы.ТребуютПланирования.ВыделенныеСтроки.Найти(ИдентификаторСтроки) = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ТребуютПланированияОбъемРаботВыбрано = ТребуютПланированияОбъемРаботВыбрано + СтрокаТребуетРасписания.ОбъемРабот;
			
			// Определим время на переналадку
			Если РабочийЦентр <> Неопределено Тогда
				Если ТекущийВариантНаладки <> СтрокаТребуетРасписания.ВариантНаладки 
					И ЗначениеЗаполнено(ТекущийВариантНаладки) Тогда
					
					ВремяПереналадки = ОперативныйУчетПроизводстваКлиентСервер.ВремяПереналадки(
												ТекущийВариантНаладки, 
												СтрокаТребуетРасписания.ВариантНаладки, 
												ТаблицаДлительностьПереналадки);
												
					ТребуютПланированияПереналадка = ТребуютПланированияПереналадка + ВремяПереналадки / 3600;
				КонецЕсли;
				ТекущийВариантНаладки = СтрокаТребуетРасписания.ВариантНаладки;
			КонецЕсли; 

		КонецЦикла; 
		
	КонецЕсли; 
	
	ЗаполнитьИтогТребуютПланированияДоступно();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтогТребуютПланированияДоступно()

	СтрокаРЦ = Элементы.СписокРабочихЦентров.ТекущиеДанные;
	Если СтрокаРЦ = Неопределено Тогда
		ТребуютПланированияДоступно = 0;
		ТребуютПланированияЗагрузкаДоступно = 0;
		Элементы.ГруппаТребуютПланированияДоступноСтраницы.ТекущаяСтраница = Элементы.ГруппаТребуютПланированияДоступноСтраница;
		Элементы.СтраницыТребуютПланированияДоступноПриПараллельнойЗагрузке.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияДоступноПриПараллельнойЗагрузкеДоступно;
		Возврат;
	КонецЕсли;
	
	Если ПараллельнаяЗагрузка Тогда
		
		Если СтрокаРЦ.ДоступнаяЗагрузка <> 0 Тогда
			ЗагрузкаВыбрано = ТребуютПланированияЗагрузкаВыбрано();
			ЗагрузкаВсего = РасписаниеЗагрузкаВсего(СтрокаРЦ.РабочийЦентр) / СтрокаРЦ.КоэффициентВремениРаботы;
			Загрузка = (ЗагрузкаВсего + ЗагрузкаВыбрано) * 100 / СтрокаРЦ.ДоступнаяЗагрузка;
			
			Если Загрузка > 100 Тогда
		    	ТребуютПланированияЗагрузкаПревышено = Загрузка;
				ТекущаяСтраница = Элементы.СтраницаТребуютПланированияДоступноПриПараллельнойЗагрузкеПревышено;
			ИначеЕсли Загрузка > 0 Тогда
		    	ТребуютПланированияЗагрузкаДоступно = Загрузка;
				ТекущаяСтраница = Элементы.СтраницаТребуютПланированияДоступноПриПараллельнойЗагрузкеДоступно;
			Иначе
				ТребуютПланированияЗагрузкаДоступно = 0;
				ТекущаяСтраница = Элементы.СтраницаТребуютПланированияДоступноПриПараллельнойЗагрузкеДоступно;
			КонецЕсли; 
			Элементы.СтраницыТребуютПланированияДоступноПриПараллельнойЗагрузке.ТекущаяСтраница = ТекущаяСтраница;
		КонецЕсли; 
		
	Иначе
		
		Доступно = ?(СтрокаРЦ.ПревышенаДоступность, 
						-СтрокаРЦ.СвободноПревышено, 
						СтрокаРЦ.СвободноПревышено);
						
		Доступно = Доступно - ТребуютПланированияОбъемРаботВыбрано - ТребуютПланированияПереналадка;
			
		Если Доступно > 0 Тогда
	    	ТребуютПланированияДоступно = Доступно;
			ТекущаяСтраница = Элементы.ГруппаТребуютПланированияДоступноСтраница;
		ИначеЕсли Доступно < 0 Тогда
	    	ТребуютПланированияПревышено = -Доступно;
			ТекущаяСтраница = Элементы.ГруппаТребуютПланированияПревышеноСтраница;
		Иначе
			ТребуютПланированияДоступно = 0;
			ТекущаяСтраница = Элементы.ГруппаТребуютПланированияДоступноСтраница;
		КонецЕсли; 
		Элементы.ГруппаТребуютПланированияДоступноСтраницы.ТекущаяСтраница = ТекущаяСтраница;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуютПланированияЗагрузкаВыбрано()

	ЗагрузкаВыбрано = 0;
	Для каждого ИдентификаторСтроки Из Элементы.ТребуютПланирования.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТребуютПланирования.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗагрузкаВыбрано = ЗагрузкаВыбрано + ДанныеСтроки.ВремяРаботы * ДанныеСтроки.Загрузка;
	КонецЦикла;
	
	Возврат ЗагрузкаВыбрано;

КонецФункции

&НаКлиенте
Процедура РазбитьМаршрутныйЛист()
	
	ТекущиеДанные = Элементы.ТребуютПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо выбрать маршрутный лист.';
									|en = 'Select a route sheet.'"));
		Возврат;
	ИначеЕсли ТекущиеДанные.Количество < 2  Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'По маршрутному листу должно быть запланировано произвести не менее двух единиц/партий изделий.';
									|en = 'The route sheet must contain manufacture of at least two units/batches of products.'"));
		Возврат;
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не допускается разбиение выполненного маршрутного листа.';
									|en = 'Splitting a completed route sheet is not allowed.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МаршрутныйЛист", ТекущиеДанные.МаршрутныйЛист);
	ПараметрыФормы.Вставить("Количество", ТекущиеДанные.Количество);
	ПараметрыФормы.Вставить("ВремяРаботы", ТекущиеДанные.ВремяРаботыНорматив);
	ПараметрыФормы.Вставить("ЗагрузкаНорматив", ТекущиеДанные.ЗагрузкаНорматив);
	ПараметрыФормы.Вставить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий", ТекущиеДанные.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
	ПараметрыФормы.Вставить("ВыбранныйВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
	ПараметрыФормы.Вставить("ИнтервалПланированияНачало", ИнтервалПланированияНачало);
	ПараметрыФормы.Вставить("ПараллельнаяЗагрузка", ПараллельнаяЗагрузка);
	ПараметрыФормы.Вставить("ЕдиницаИзмеренияЗагрузки", ЕдиницаИзмеренияЗагрузки);
					
	СтрокаРабочийЦентр = Элементы.СписокРабочихЦентров.ТекущиеДанные;
	Если СтрокаРабочийЦентр <> Неопределено Тогда
		ПараметрыФормы.Вставить("СвободноПревышено",    СтрокаРабочийЦентр.СвободноПревышено);
		ПараметрыФормы.Вставить("ПревышенаДоступность", СтрокаРабочийЦентр.ПревышенаДоступность);
	Иначе
		ПараметрыФормы.Вставить("СвободноПревышено",    0);
		ПараметрыФормы.Вставить("ПревышенаДоступность", Ложь);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьМаршрутныйЛистЗавершение", ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.РазбиениеМаршрутногоЛиста", 
					ПараметрыФормы,,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры

&НаКлиенте
Процедура РазбитьМаршрутныйЛистЗавершение(ДанныеПолученныхМЛ, ИдентификаторСтроки) Экспорт

	Если ДанныеПолученныхМЛ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТребуютПланирования.ДанныеСтроки(ИдентификаторСтроки);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеКлючИЗначение Из ДанныеПолученныхМЛ Цикл
		ДанныеМаршрутныйЛист = ДанныеКлючИЗначение.Значение;
		Если ДанныеКлючИЗначение.Ключ = ТекущиеДанные.МаршрутныйЛист Тогда
			
			// Обновим данные текущего МЛ
			ТекущиеДанные.Количество = ДанныеМаршрутныйЛист.Количество;
			ТекущиеДанные.ВремяРаботы = ДанныеМаршрутныйЛист.ВремяРаботы;
			ТекущиеДанные.ОбъемРабот  = ТекущиеДанные.ВремяРаботы / 3600;
			ТекущиеДанные.Загрузка    = ДанныеМаршрутныйЛист.Загрузка;
			
		Иначе	
	
			// Добавим новый МЛ
		    НоваяСтрока = ТребуютПланирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеМаршрутныйЛист);
			
			НоваяСтрока.ОбъемРабот  = НоваяСтрока.ВремяРаботы / 3600;
			НоваяСтрока.МаршрутныйЛист = ДанныеКлючИЗначение.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеМаршрутныйЛист);
			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьНеЗапланированныеПоНастройке(НастройкаПорядка, СтруктураПоискаПоНастройке)

	ТребуютПланированияКопия = ТребуютПланирования.Выгрузить();
	ТребуютПланирования.Очистить();
	
	Для каждого ДанныеНастройки Из НастройкаПорядка Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоНастройке, ДанныеНастройки);
  		СписокСтрок = ТребуютПланированияКопия.НайтиСтроки(СтруктураПоискаПоНастройке);

		Для каждого СтрокаКопия Из СписокСтрок Цикл
			НоваяСтрока = ТребуютПланирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКопия);
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьНеЗапланированныеПоИзделиямЗавершение(СписокИзделий, ДополнительныеПараметры) Экспорт

	Если СписокИзделий <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
		УпорядочитьНеЗапланированныеПоНастройке(СписокИзделий, СтруктураПоиска);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьНеЗапланированныеПоВариантамНаладкиЗавершение(СписокВариантыНаладки, ДополнительныеПараметры) Экспорт

	Если СписокВариантыНаладки <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ВариантНаладки");
		УпорядочитьНеЗапланированныеПоНастройке(СписокВариантыНаладки, СтруктураПоиска);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СписокРабочихЦентров

&НаСервере
Процедура ЗаполнитьДанныеРабочегоЦентра(РабочийЦентр)

	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	СтрокаРабочийЦентр = СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска)[0];
	ГрафикРаботыРабочегоЦентра = ГрафикРаботы.Выгрузить(СтруктураПоиска);
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	СтрокиРасписания = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	ВариантНаладкиПрошлогоМЛ = Неопределено;
	
	ДоступноМинут = СтрокаРабочийЦентр.ДоступноМинут * СтрокаРабочийЦентр.КоэффициентВремениРаботы;
	
	ЗагрузкаРЦ = 0;
	
	Для каждого СтрокаРасписание Из СтрокиРасписания Цикл
		
		Если СтрокаРасписание.Начало <= ВыбранныйПериодРасписания.Окончание И СтрокаРасписание.Начало <> '000101010000' Тогда
			ВариантНаладкиПрошлогоМЛ = СтрокаРасписание.ВариантНаладки;
		КонецЕсли;
		
		Если СтрокаРасписание.Отображать Тогда
			
			ВремяРаботыМинут = 0;
			Для каждого ЭлементДанныеЗанятостиВИнтервале Из СтрокаРасписание.ЗанятостьВИнтервалах Цикл
				
				ДанныеЗанятостиВИнтервале = ЭлементДанныеЗанятостиВИнтервале.Значение;
				
				Если ДанныеЗанятостиВИнтервале.ДатаИнтервала <> ИнтервалПланированияНачало Тогда
					Продолжить;
				КонецЕсли;
				
				ВремяРаботыМинут = ВремяРаботыМинут + ОперативныйУчетПроизводстваКлиентСервер.ДлительностьПериодаСУчетомГрафикаРаботы(
																				ДанныеЗанятостиВИнтервале.Начало, 
																				ДанныеЗанятостиВИнтервале.Окончание,
																				ГрафикРаботыРабочегоЦентра,
																				ВыбранныйПериодРасписания.Начало,
																				ВыбранныйПериодРасписания.Окончание);	
			КонецЦикла; 
			
			ВремяРаботыМинут = ВремяРаботыМинут / 60;
			
			ДоступноМинут = ДоступноМинут - ВремяРаботыМинут;
			
			Если ПараллельнаяЗагрузка И СтрокаРабочийЦентр.ДоступнаяЗагрузка <> 0 Тогда
				ЗагрузкаРЦ = ЗагрузкаРЦ + ЗагрузкаПоМЛ(СтрокаРасписание, ИнтервалПланированияНачало);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДоступноМинут = ДоступноМинут / СтрокаРабочийЦентр.КоэффициентВремениРаботы;
	
	Если ПараллельнаяЗагрузка Тогда
		Если СтрокаРабочийЦентр.ДоступнаяЗагрузка <> 0 Тогда
			СтрокаРабочийЦентр.Загрузка = ЗагрузкаРЦ * 100 / СтрокаРабочийЦентр.ДоступнаяЗагрузка / СтрокаРабочийЦентр.КоэффициентВремениРаботы;
		ИначеЕсли СтрокиРасписания.Количество() <> 0 Тогда
			СтрокаРабочийЦентр.Загрузка = 100;
		Иначе
			СтрокаРабочийЦентр.Загрузка = 0;
		КонецЕсли; 
	Иначе
		Если СтрокаРабочийЦентр.ДоступноМинут <> 0 Тогда
			СтрокаРабочийЦентр.Загрузка = (СтрокаРабочийЦентр.ДоступноМинут - ДоступноМинут) / СтрокаРабочийЦентр.ДоступноМинут * 100;
		Иначе
			СтрокаРабочийЦентр.Загрузка = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступноМинут < 0 Тогда
		ДоступноМинут = -ДоступноМинут;
		СтрокаРабочийЦентр.ПревышенаДоступность = Истина;
	Иначе
		СтрокаРабочийЦентр.ПревышенаДоступность = Ложь;
	КонецЕсли; 
	СтрокаРабочийЦентр.СвободноПревышено = ДоступноМинут / 60;
	СтрокаРабочийЦентр.СвободноПревышеноСУчетомКоэффициентаВремениРаботы = СтрокаРабочийЦентр.СвободноПревышено 
																			* СтрокаРабочийЦентр.КоэффициентВремениРаботы;
	Если СтрокаРабочийЦентр.КоэффициентВремениРаботы <> 1 Тогда
		СтрокаРабочийЦентр.СвободноПревышеноСтрокой = Формат(СтрокаРабочийЦентр.СвободноПревышено, "ЧН=0")
														+ " ("
														+ Формат(СтрокаРабочийЦентр.СвободноПревышеноСУчетомКоэффициентаВремениРаботы, "ЧН=0")
														+ ")";
	Иначе
		СтрокаРабочийЦентр.СвободноПревышеноСтрокой = Формат(СтрокаРабочийЦентр.СвободноПревышено, "ЧН=0");
	КонецЕсли;
	
	// Информация о последнем варианте наладки
	Если ВариантНаладкиПрошлогоМЛ <> Неопределено Тогда
		СтрокаРабочийЦентр.ВариантНаладкиПрошлогоМЛ = ВариантНаладкиПрошлогоМЛ;
	Иначе
		СтрокаРабочийЦентр.ВариантНаладкиПрошлогоМЛ = СтрокаРабочийЦентр.ВариантНаладкиПрошлогоПериода;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступноеВремяРабочегоЦентра(РабочийЦентр)

	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	СтрокаРабочийЦентр = СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска)[0];
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	ГрафикРаботыРабочегоЦентра = ГрафикРаботы.НайтиСтроки(СтруктураПоиска);
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	ДоступноеВремя = 0;
	Для каждого СтрокаГрафика Из ГрафикРаботыРабочегоЦентра Цикл
		
		Если СтрокаГрафика.Окончание < ВыбранныйПериодРасписания.Начало 
			ИЛИ СтрокаГрафика.Начало > ВыбранныйПериодРасписания.Окончание Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоГрафика    = Макс(СтрокаГрафика.Начало, ВыбранныйПериодРасписания.Начало);
		ОкончаниеГрафика = Мин(СтрокаГрафика.Окончание, ВыбранныйПериодРасписания.Окончание);
		
		ДоступноеВремя = ДоступноеВремя + (ОкончаниеГрафика - НачалоГрафика) + 1;
		
	КонецЦикла;
	
	ДоступноеВремя = ДоступноеВремя / СтрокаРабочийЦентр.КоэффициентВремениРаботы;
	
	СтрокаРабочийЦентр.ДоступноМинут = ДоступноеВремя  / 60;
	СтрокаРабочийЦентр.ДоступнаяЗагрузка = ДоступноеВремя * СтрокаРабочийЦентр.МаксимальнаяЗагрузка;
	
КонецПроцедуры

#КонецОбласти

#Область Расписание

&НаСервере
Процедура РассчитатьРасписаниеРабочегоЦентра(Знач РабочийЦентр)

	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	РасписаниеРабочегоЦентра = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	ГрафикРаботыРабочегоЦентра = ГрафикРаботы.Выгрузить(СтруктураПоиска);
	ДобавитьСлужебныеКолонкиВГрафикРаботыДляРасчетаРасписания(ГрафикРаботыРабочегоЦентра);
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	ВариантНаладкиПрошлогоПериода = СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска)[0].ВариантНаладкиПрошлогоПериода;
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	ЗаполнитьПорядокСтроки(РасписаниеРабочегоЦентра);
	
	ГрафикРаботыСУчетомРасписания = Неопределено;
	
	ПараметрыРабочегоЦентра = Новый Структура;
	ПараметрыРабочегоЦентра.Вставить("ГрафикРаботы", ГрафикРаботыРабочегоЦентра);
	ПараметрыРабочегоЦентра.Вставить("РабочийЦентр", РабочийЦентр);
	ПараметрыРабочегоЦентра.Вставить("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
	ПараметрыРабочегоЦентра.Вставить("ИнтервалПланирования", ИнтервалПланирования);
	
	ОперативныйУчетПроизводства.СформироватьРасписаниеВыполненияМаршрутныхЛистов(
				РасписаниеРабочегоЦентра, 
				ПараметрыРабочегоЦентра,
				ВыбранныйПериодРасписания.Окончание,
				ВариантНаладкиПрошлогоПериода,
				ГрафикРаботыСУчетомРасписания);
	
	ПриИзмененииРасписанияНаСервере(РабочийЦентр);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокСтроки(СтрокиДляЗаполнения)

	Для каждого СтрокаРасписание Из СтрокиДляЗаполнения Цикл
		СтрокаРасписание.ПорядокСтроки = РасписаниеРабочихЦентров.Индекс(СтрокаРасписание) + 1;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Функция ПроверитьПериодРасписанияВВеденногоВручную(РабочийЦентр)

	Начало = Неопределено;
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		Если НЕ СтрокаРасписание.РасписаниеВведеноВручную Тогда
			Продолжить;
		КонецЕсли;
		Если Начало <> Неопределено И СтрокаРасписание.Начало < Начало Тогда
			Возврат Ложь;
		КонецЕсли;
		Начало = СтрокаРасписание.Начало;
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции
 
&НаСервере
Процедура УпорядочитьРасписаниеПоНастройке(НастройкаПорядка, РабочийЦентр, СтруктураПоискаПоНастройке)
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	СтруктураПоиска = Новый Структура("РабочийЦентр,ДоступноИзменение", РабочийЦентр, Истина);
 	СписокСтрокРасписания = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	ГрафикРаботыРабочегоЦентра = ГрафикРаботы.Выгрузить(СтруктураПоиска);
	ДобавитьСлужебныеКолонкиВГрафикРаботыДляРасчетаРасписания(ГрафикРаботыРабочегоЦентра);
	
	// Сохраним исходные данные чтобы добавить их в нужном порядке
	ИсходноеРасписание = РасписаниеРабочихЦентров.Выгрузить(СписокСтрокРасписания);
	
	// Удалим строки которые будем упорядочивать
	Для каждого СтрокаРасписание Из СписокСтрокРасписания Цикл
		РасписаниеРабочихЦентров.Удалить(СтрокаРасписание);
	КонецЦикла;
	
	// Нужно определить куда добавлять упорядоченные МЛ в расписание так чтобы сохранился порядок МЛ во всем интервале.
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	СписокСтрокРасписания = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	ИндексНовойСтроки = 0;
	Для каждого СтрокаРасписание Из СписокСтрокРасписания Цикл
		Если СтрокаРасписание.Начало <= ВыбранныйПериодРасписания.Окончание 
			И СтрокаРасписание.Начало <> '000101010000' Тогда
			ИндексНовойСтроки = Макс(РасписаниеРабочихЦентров.Индекс(СтрокаРасписание) + 1, ИндексНовойСтроки);
		КонецЕсли; 
	КонецЦикла;
	
	Если ИндексНовойСтроки < РасписаниеРабочихЦентров.Количество() Тогда
		ВставлятьСтрокиПоИндексу = Истина;
	Иначе
		ВставлятьСтрокиПоИндексу = Ложь;
	КонецЕсли;
	
	// Добавим строки в нужном порядке в новое расписание
	НовоеРасписание = ИсходноеРасписание.СкопироватьКолонки();
	Для каждого ДанныеНастройки Из НастройкаПорядка Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоНастройке, ДанныеНастройки);
		СтруктураПоискаПоНастройке.Вставить("РабочийЦентр", РабочийЦентр);
							
  		СписокСтрок = ИсходноеРасписание.НайтиСтроки(СтруктураПоискаПоНастройке);
		Для каждого СтрокаИсходноеРасписание Из СписокСтрок Цикл
			Если НЕ СтрокаИсходноеРасписание.ДоступноИзменение Тогда
				Продолжить;
			КонецЕсли;
			Если ВставлятьСтрокиПоИндексу Тогда
				СтрокаРасписание = РасписаниеРабочихЦентров.Вставить(ИндексНовойСтроки);
				ИндексНовойСтроки = ИндексНовойСтроки + 1;
			Иначе
				СтрокаРасписание = РасписаниеРабочихЦентров.Добавить();
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(СтрокаРасписание, СтрокаИсходноеРасписание);
			Если СтрокаРасписание.РасписаниеВведеноВручную Тогда
				СтрокаРасписание.РасписаниеВведеноВручную = Ложь;
				СтрокаРасписание.ВремяРаботыИзмененоПользователем = Ложь;
				СтрокаРасписание.Начало    = '000101010000';
				СтрокаРасписание.Окончание = '000101010000';
				СтрокаРасписание.ОбъемРабот = СтрокаРасписание.ВремяРаботы / 3600;
			КонецЕсли; 
			СтрокаРасписание.РассчитатьРасписание = Истина;
		КонецЦикла; 
	КонецЦикла; 
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	РасписаниеРабочегоЦентра = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	ВариантНаладкиПрошлогоПериода = СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска)[0].ВариантНаладкиПрошлогоПериода;
	
	ЗаполнитьПорядокСтроки(РасписаниеРабочегоЦентра);
	
	ПараметрыРабочегоЦентра = Новый Структура;
	ПараметрыРабочегоЦентра.Вставить("ГрафикРаботы", ГрафикРаботыРабочегоЦентра);
	ПараметрыРабочегоЦентра.Вставить("РабочийЦентр", РабочийЦентр);
	ПараметрыРабочегоЦентра.Вставить("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
	ПараметрыРабочегоЦентра.Вставить("ИнтервалПланирования", ИнтервалПланирования);
	
	ОперативныйУчетПроизводства.СформироватьРасписаниеВыполненияМаршрутныхЛистов(
				РасписаниеРабочегоЦентра, 
				ПараметрыРабочегоЦентра,
				ВыбранныйПериодРасписания.Окончание,
				ВариантНаладкиПрошлогоПериода);

	ПриИзмененииРасписанияНаСервере(РабочийЦентр);
	
КонецПроцедуры

&НаСервере
Функция УместитьВГрафикРаботы(РабочийЦентр)

	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	ГрафикРаботыРабочегоЦентра = ГрафикРаботы.Выгрузить(СтруктураПоиска);
	ДобавитьСлужебныеКолонкиВГрафикРаботыДляРасчетаРасписания(ГрафикРаботыРабочегоЦентра);
	
	ЗаполнитьПорядокСтроки(СписокСтрок);
	
	НовоеРасписание = РасписаниеРабочихЦентров.Выгрузить(СписокСтрок);
	НовоеРасписание.Колонки.Добавить("Занят", Новый ОписаниеТипов("Булево")); 
	
 	СтрокаРабочийЦентр = СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска)[0];
	ДоступноМинут = СтрокаРабочийЦентр.ДоступноМинут * СтрокаРабочийЦентр.КоэффициентВремениРаботы;
 	ВариантНаладкиПрошлогоПериода = СтрокаРабочийЦентр.ВариантНаладкиПрошлогоПериода;
	
	ОбъемРаботМинут = 0;
	Для каждого СтрокаРасписание Из НовоеРасписание Цикл
		
		Если НЕ СтрокаРасписание.ДоступноИзменение Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРасписание.РассчитатьРасписание = Истина;
		
		Если НЕ СтрокаРасписание.РасписаниеВведеноВручную Тогда
			СтрокаРасписание.ВремяРаботыИзмененоПользователем = Ложь;
		КонецЕсли; 
		
		ВремяРаботы = ВремяРаботыПоРасписанию(СтрокаРасписание);
		
		Если СтрокаРасписание.РасписаниеВведеноВручную Тогда
			// Уменьшим доступное время, т.к. нельзя изменять расписания введенные вручную
			ДоступноМинут = ДоступноМинут - ВремяРаботы; 
		КонецЕсли; 
		
		ОбъемРаботМинут = ОбъемРаботМинут + ВремяРаботы / 60;
	КонецЦикла; 
	
	Если ДоступноМинут <=0 ИЛИ ОбъемРаботМинут = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДоступноМинут = Мин(ОбъемРаботМинут, ДоступноМинут);
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	РасписаниеРассчитано = Ложь;
	Пока НЕ РасписаниеРассчитано И ДоступноМинут > 0 Цикл
		
		Коэффициент = ДоступноМинут / ОбъемРаботМинут;
		
		ПараметрыРабочегоЦентра = Новый Структура;
		ПараметрыРабочегоЦентра.Вставить("ГрафикРаботы", ГрафикРаботыРабочегоЦентра);
		ПараметрыРабочегоЦентра.Вставить("РабочийЦентр", РабочийЦентр);
		ПараметрыРабочегоЦентра.Вставить("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
		ПараметрыРабочегоЦентра.Вставить("ИнтервалПланирования", ИнтервалПланирования);
		
		РасписаниеРассчитано = ОперативныйУчетПроизводства.СформироватьРасписаниеВыполненияМаршрутныхЛистов(
											НовоеРасписание, 
											ПараметрыРабочегоЦентра,
											ВыбранныйПериодРасписания.Окончание,
											ВариантНаладкиПрошлогоПериода,
											Коэффициент);
		
		ДоступноМинут = ДоступноМинут - 10;
		
	КонецЦикла;
	
	Если НЕ РасписаниеРассчитано Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Удалим старое расписание
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		РасписаниеРабочихЦентров.Удалить(СтрокаРасписание);
	КонецЦикла;
	
	Для каждого СтрокаНовоеРасписание Из НовоеРасписание Цикл
		СтрокаРасписание = РасписаниеРабочихЦентров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасписание, СтрокаНовоеРасписание);
	КонецЦикла; 
	
	ПриИзмененииРасписанияНаСервере(РабочийЦентр);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьНормативныйОбъемРабот()

	СписокВыбранныхРабочихЦентров = Новый Массив;
	
	ИдентификаторСтроки = Элементы.РасписаниеРабочихЦентров.ТекущаяСтрока;
	СтрокаРасписание = РасписаниеРабочихЦентров.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаРасписание.РассчитатьРасписание = Истина;
	Если НЕ СтрокаРасписание.РасписаниеВведеноВручную Тогда
		
		СтруктураПоиска = Новый Структура("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
  		СтрокаРабочийЦентр = СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска)[0];
		
		Если ПараллельнаяЗагрузка Тогда
			СтрокаРасписание.ВремяРаботы = СтрокаРасписание.ВремяРаботыНорматив;
		Иначе
			СтрокаРасписание.ВремяРаботы = ОперативныйУчетПроизводстваКлиентСервер.ОбъемРабот(
													СтрокаРасписание.ВремяРаботыНорматив, 
													СтрокаРасписание.Количество,
													СтрокаРасписание.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		КонецЕсли; 
		СтрокаРасписание.ВремяРаботы = СтрокаРасписание.ВремяРаботы * СтрокаРабочийЦентр.КоэффициентВремениРаботы;
		СтрокаРасписание.ОбъемРабот = СтрокаРасписание.ВремяРаботы / 3600;
		СтрокаРасписание.ВремяРаботыИзмененоПользователем = Ложь;
		
		Если СписокВыбранныхРабочихЦентров.Найти(СтрокаРасписание.РабочийЦентр) = Неопределено Тогда
			СписокВыбранныхРабочихЦентров.Добавить(СтрокаРасписание.РабочийЦентр);
		КонецЕсли; 
	КонецЕсли;
	
	РассчитатьРасписаниеПриИзмененииСтроки(ИдентификаторСтроки, СтрокаРасписание.РабочийЦентр);

КонецПроцедуры
 
&НаСервере
Процедура СохранитьРасписаниеРабочегоЦентра(СписокСтрок)
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасписаниеРаботыРабочихЦентров");
		ЭлементБлокировки.УстановитьЗначение("ДатаИнтервала", ИнтервалПланированияНачало);
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаРасписание Из СписокСтрок Цикл
			Если НЕ СтрокаРасписание.РассчитатьРасписание
				И НЕ СтрокаРасписание.РасписаниеВведеноВручную Тогда
				Продолжить;
			КонецЕсли; 
			
			// Используем набор записей, чтобы удалились записи на даты по которым уже нет расписания.
			НаборЗаписей = РегистрыСведений.РасписаниеРаботыРабочихЦентров.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.МаршрутныйЛист.Установить(СтрокаРасписание.МаршрутныйЛист);
			
			Если СтрокаРасписание.Начало <> '000101010000' И СтрокаРасписание.Окончание <> '000101010000' Тогда
				
				Для каждого ЭлементДанныеЗанятостиВИнтервале Из СтрокаРасписание.ЗанятостьВИнтервалах Цикл
					
					ДанныеЗанятостиВИнтервале = ЭлементДанныеЗанятостиВИнтервале.Значение;
					
					СтрокаЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗапись, СтрокаРасписание);
					ЗаполнитьЗначенияСвойств(СтрокаЗапись, ДанныеЗанятостиВИнтервале);
					
					СтрокаЗапись.Порядок = РасписаниеРабочихЦентров.Индекс(СтрокаРасписание);
					
				КонецЦикла; 
				
			Иначе
				
				// Период выполнения не определен
				// Считаем что МЛ запланирован на текущий интервал в полном объеме.
				
				СтрокаЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗапись, СтрокаРасписание);
				
				СтрокаЗапись.ДатаИнтервала = ИнтервалПланированияНачало;
				
				СтрокаЗапись.Порядок = РасписаниеРабочихЦентров.Индекс(СтрокаРасписание);
				
				Если СтрокаРасписание.ВремяРаботыИзмененоПользователем Тогда
					СтрокаЗапись.ВремяРаботы = СтрокаРасписание.ОбъемРабот * 3600;
				КонецЕсли; 
				
				Если СтрокаРасписание.РасписаниеВведеноВручную Тогда
					СтрокаЗапись.ВремяРаботыВРабочееВремя = СтрокаРасписание.ВремяРаботыВРабочееВремя;
				Иначе
					// При автоматическом расчете времени, работа всегда планируется в рабочее время
					СтрокаЗапись.ВремяРаботыВРабочееВремя = СтрокаРасписание.ВремяРаботы;
				КонецЕсли; 
				
			КонецЕсли; 
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось сохранить расписание';
				|en = 'Cannot save the schedule'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ТекстСообщения = НСтр("ru = 'Не удалось сохранить расписание по причине: %1';
								|en = 'Cannot save the schedule due to: %1'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(ТекстСообщения,КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьРасписание(Направление)

	ВыделенныеСтроки = Элементы.РасписаниеРабочихЦентров.ВыделенныеСтроки;
	ПереместитьРасписаниеНаСервере(ВыделенныеСтроки, Направление);
	ПриИзмененииРасписания();

КонецПроцедуры

&НаСервере
Процедура ПереместитьРасписаниеНаСервере(Знач ИндентификаторыПеремещаемыхСтрок, Знач Направление)
	
	СписокВыбранныхРабочихЦентров = Новый Массив;
	ОпределитьСтрокиДляКоторыхНеобходимоРассчитатьРасписание(ИндентификаторыПеремещаемыхСтрок);
	
	Для каждого ИдентификаторСтроки Из ИндентификаторыПеремещаемыхСтрок Цикл
		СтрокаРасписание = РасписаниеРабочихЦентров.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если НЕ СтрокаРасписание.ДоступноИзменение Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокВыбранныхРабочихЦентров.Найти(СтрокаРасписание.РабочийЦентр) = Неопределено Тогда
			СписокВыбранныхРабочихЦентров.Добавить(СтрокаРасписание.РабочийЦентр);
		КонецЕсли; 
	КонецЦикла;

	Для каждого РабочийЦентр Из СписокВыбранныхРабочихЦентров Цикл
		СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
  		СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		
		Если Направление = 1 Тогда
			// В конец расписания
			ИндексПервойСтроки    = - (СписокСтрок.Количество() - 1);
			ИндексПоследнейСтроки = 0;
		Иначе
			// В начало расписания
			ИндексПервойСтроки    = 0;
			ИндексПоследнейСтроки = СписокСтрок.Количество() - 1;
		КонецЕсли;

		Для Сч = ИндексПервойСтроки По ИндексПоследнейСтроки Цикл
			
			ИндексСтроки = ?(Направление = 1, -Сч, Сч);
			СтрокаРасписание = СписокСтрок[ИндексСтроки];
			ИдентификаторСтроки = СтрокаРасписание.ПолучитьИдентификатор();
			
			Если ИндентификаторыПеремещаемыхСтрок.Найти(ИдентификаторСтроки) = Неопределено 
				ИЛИ НЕ СтрокаРасписание.ДоступноИзменение Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексСтрокиЗамена = ИндексСтроки + Направление;
			
			Если ИндексСтрокиЗамена > СписокСтрок.Количество() - 1 ИЛИ ИндексСтрокиЗамена < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРасписаниеЗамена = СписокСтрок[ИндексСтрокиЗамена];
			Если ИндентификаторыПеремещаемыхСтрок.Найти(СтрокаРасписаниеЗамена.ПолучитьИдентификатор()) <> Неопределено 
				ИЛИ НЕ СтрокаРасписаниеЗамена.ДоступноИзменение Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = РасписаниеРабочихЦентров.Индекс(СтрокаРасписаниеЗамена)
							- РасписаниеРабочихЦентров.Индекс(СтрокаРасписание);
		
			РасписаниеРабочихЦентров.Сдвинуть(РасписаниеРабочихЦентров.Индекс(СтрокаРасписание), Количество);
			
			Если Направление = 1 Тогда
				
				СписокСтрок.Удалить(ИндексСтрокиЗамена);
				СписокСтрок.Удалить(ИндексСтроки);
				
				СписокСтрок.Вставить(ИндексСтроки,       СтрокаРасписаниеЗамена);
				СписокСтрок.Вставить(ИндексСтрокиЗамена, СтрокаРасписание);
				
			Иначе
				
				СписокСтрок.Удалить(ИндексСтроки);
				СписокСтрок.Удалить(ИндексСтрокиЗамена);
				
				СписокСтрок.Вставить(ИндексСтрокиЗамена, СтрокаРасписание);
				СписокСтрок.Вставить(ИндексСтроки,       СтрокаРасписаниеЗамена);
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; 
	
	ОпределитьСтрокиДляКоторыхНеобходимоРассчитатьРасписание(ИндентификаторыПеремещаемыхСтрок);

	Для каждого РабочийЦентр Из СписокВыбранныхРабочихЦентров Цикл
		РассчитатьРасписаниеРабочегоЦентра(РабочийЦентр);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоРабочемуЦентру()

	Если ОтборРасписанияПоРабочемуЦентру = 0 Тогда
		Элементы.РасписаниеРабочихЦентров.ОтборСтрок = Новый ФиксированнаяСтруктура("РабочийЦентр,Отображать", РЦ_РабочийЦентр, Истина);
	Иначе
		Элементы.РасписаниеРабочихЦентров.ОтборСтрок = Новый ФиксированнаяСтруктура("Отображать", Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьГрафикЗанятости", 1, Истина);
	
	ЗаполнитьРасписаниеОбъемРаботВсего();

КонецПроцедуры

// Процедуру необходимо вызывать когда изменяется расписание
//
&НаСервере
Процедура ПриИзмененииРасписанияНаСервере(РабочийЦентр)

	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	СохранитьРасписаниеРабочегоЦентра(СписокСтрок);
	ЗаполнитьДанныеРабочегоЦентра(РабочийЦентр);
	
	ЗаполнитьДаныеСтрокРасписания(РабочийЦентр);
	
	ОбновитьЗанятостьМЛПеренесенныхНаДругойИнтервал();
	
	ОбновитьИнформациюРасписания();
	
	ОбновитьПриНеобходимостиГрафикЗанятостиНаСервере();
	
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		СтрокаРасписание.РассчитатьРасписание = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПриНеобходимостиГрафикЗанятостиНаСервере()

	Если Элементы.СтраницыУправлениеРасписанием.ТекущаяСтраница = Элементы.СтраницаУправлениеРасписаниемВГрафике Тогда
		ОбновитьГрафикЗанятостиНаСервере();
	Иначе
		ГрафикЗанятостиАктуален = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедуру необходимо вызывать когда изменяется расписание
//
&НаКлиенте
Процедура ПриИзмененииРасписания()

	ЗаполнитьРасписаниеОбъемРаботВыбрано();
	ЗаполнитьРасписаниеОбъемРаботВсего();
	
	ОперативныйУчетПроизводстваКлиент.ОповеститьОбИзмененииРасписанияВидаРабочегоЦентра(
			ВыбранныйВидРабочегоЦентра, 
			ОтборПодразделение,
			ИнтервалПланированияНачало, 
			ЭтаФорма);
			
	ПриИзмененииГрафикаЗанятости();
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасписаниеОбъемРаботВсего()

	Если ПараллельнаяЗагрузка Тогда
		РасписаниеЗагрузкаВсего = 0;
		
		Если НЕ РЦ_РабочийЦентр.Пустая() Тогда
			Если РЦ_ДоступнаяЗагрузка <> 0 Тогда
				ЗагрузкаВсего = РасписаниеЗагрузкаВсего(РЦ_РабочийЦентр) / РЦ_КоэффициентВремениРаботы;
				РасписаниеЗагрузкаВсего = ЗагрузкаВсего * 100 / РЦ_ДоступнаяЗагрузка;
			ИначеЕсли РасписаниеРабочихЦентров.Количество() <> 0 Тогда
				РасписаниеЗагрузкаВсего = 100;
			КонецЕсли; 
		КонецЕсли; 
		
	Иначе	
		
		Если ОтборРасписанияПоРабочемуЦентру = 0 И НЕ РЦ_РабочийЦентр.Пустая() Тогда
			СтруктураПоиска = Новый Структура("РабочийЦентр", РЦ_РабочийЦентр);
	  		СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Иначе
			СписокСтрок = РасписаниеРабочихЦентров;
		КонецЕсли; 
		
		РасписаниеОбъемРаботВсего = 0;
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			РасписаниеОбъемРаботВсего = РасписаниеОбъемРаботВсего + ДанныеСтроки.ОбъемРабот;
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция РасписаниеЗагрузкаВсего(РабочийЦентр)

	ЗагрузкаВсего = 0;
	
	Если РабочийЦентр <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
  		СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Иначе
		СписокСтрок = РасписаниеРабочихЦентров;
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		Если НЕ ДанныеСтроки.Отображать Тогда
			Продолжить;
		КонецЕсли;
		ЗагрузкаВсего = ЗагрузкаВсего + ЗагрузкаПоМЛ(ДанныеСтроки, ИнтервалПланированияНачало);
	КонецЦикла; 

	Возврат ЗагрузкаВсего;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗагрузкаПоМЛ(СтрокаРасписание, ИнтервалПланированияНачало)

	ЗагрузкаВсего = 0;
	Для каждого ЭлементДанныеЗанятостиВИнтервале Из СтрокаРасписание.ЗанятостьВИнтервалах Цикл
		ДанныеЗанятостиВИнтервале = ЭлементДанныеЗанятостиВИнтервале.Значение;
		Если ДанныеЗанятостиВИнтервале.ДатаИнтервала = ИнтервалПланированияНачало Тогда
			ЗагрузкаВсего = ЗагрузкаВсего + ДанныеЗанятостиВИнтервале.ВремяРаботы * СтрокаРасписание.Загрузка;
		КонецЕсли;
	КонецЦикла;

	Возврат ЗагрузкаВсего;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРасписаниеОбъемРаботВыбрано()

	Если ПараллельнаяЗагрузка Тогда
		
		РасписаниеЗагрузкаВыбрано = 0;
		
		Если НЕ РЦ_РабочийЦентр.Пустая() Тогда
			Если РЦ_ДоступнаяЗагрузка <> 0 Тогда
				ЗагрузкаВсего = 0;
				Для каждого ИдентификаторСтроки Из Элементы.РасписаниеРабочихЦентров.ВыделенныеСтроки Цикл
					ДанныеСтроки = РасписаниеРабочихЦентров.НайтиПоИдентификатору(ИдентификаторСтроки);
					ЗагрузкаВсего = ЗагрузкаВсего + ЗагрузкаПоМЛ(ДанныеСтроки, ИнтервалПланированияНачало);
				КонецЦикла;
				РасписаниеЗагрузкаВыбрано = ЗагрузкаВсего / РЦ_КоэффициентВремениРаботы * 100 / РЦ_ДоступнаяЗагрузка;
			ИначеЕсли Элементы.РасписаниеРабочихЦентров.ВыделенныеСтроки.Количество() <> 0 Тогда
				РасписаниеЗагрузкаВыбрано = 100;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		РасписаниеОбъемРаботВыбрано = 0;
		Для каждого ИдентификаторСтроки Из Элементы.РасписаниеРабочихЦентров.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.РасписаниеРабочихЦентров.ДанныеСтроки(ИдентификаторСтроки);
			Если ДанныеСтроки <> Неопределено Тогда
				РасписаниеОбъемРаботВыбрано = РасписаниеОбъемРаботВыбрано + ДанныеСтроки.ОбъемРабот;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяРасчетРасписания(РабочийЦентр)

	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		Если НЕ СтрокаРасписание.РасписаниеВведеноВручную 
			И (СтрокаРасписание.Начало = '000101010000'
				ИЛИ СтрокаРасписание.Окончание = '000101010000') Тогда
			
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВремяРаботыПоРасписанию(СтрокаРасписание)

	Если СтрокаРасписание.ВремяРаботыИзмененоПользователем Тогда
		ВремяРаботыМинут = СтрокаРасписание.ОбъемРабот * 60;
	Иначе	
		ВремяРаботыМинут = СтрокаРасписание.ВремяРаботы;
	КонецЕсли; 

	Возврат ВремяРаботыМинут;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаныеСтрокРасписания(РабочийЦентр)
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		СтрокаРасписание.Пересекается = Ложь;
		ЗаполнитьРаботуВНерабочееВремя(СтрокаРасписание);
		ЗаполнитьСостояниеРаботы(СтрокаРасписание);
	КонецЦикла; 
	
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		
		Для каждого СтрокаРасписаниеПроверка Из СписокСтрок Цикл
			Если СтрокаРасписаниеПроверка = СтрокаРасписание
				ИЛИ СтрокаРасписаниеПроверка.Начало = '000101010000'
				ИЛИ СтрокаРасписаниеПроверка.Окончание = '000101010000' Тогда
				Продолжить;
			КонецЕсли; 
			
			Если (СтрокаРасписание.Начало >= СтрокаРасписаниеПроверка.Начало
					И СтрокаРасписание.Начало <= СтрокаРасписаниеПроверка.Окончание
				 ИЛИ СтрокаРасписание.Окончание >= СтрокаРасписаниеПроверка.Начало
					И СтрокаРасписание.Окончание <= СтрокаРасписаниеПроверка.Окончание)
					
				   // Пересечение возможно при параллельной загрузке с одинаковым вариантом наладки
				И (НЕ ПараллельнаяЗагрузка 
					ИЛИ НЕ ИспользуютсяВариантыНаладки
					ИЛИ СтрокаРасписание.ВариантНаладки <> СтрокаРасписаниеПроверка.ВариантНаладки) Тогда
				
				СтрокаРасписание.Пересекается = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьРасписаниеПоИзделиямЗавершение(СписокИзделий, РабочийЦентр) Экспорт

	Если СписокИзделий <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
		УпорядочитьРасписаниеПоНастройке(СписокИзделий, РабочийЦентр, СтруктураПоиска);
		ПриИзмененииРасписания();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьРасписаниеПоВариантамНаладкиЗавершение(СписокВариантыНаладки, РабочийЦентр) Экспорт

	Если СписокВариантыНаладки <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ВариантНаладки");
		УпорядочитьРасписаниеПоНастройке(СписокВариантыНаладки, РабочийЦентр, СтруктураПоиска);
		ПриИзмененииРасписания();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСлужебныеКолонкиВГрафикРаботыДляРасчетаРасписания(ГрафикРаботыРабочегоЦентра)

	ГрафикРаботыРабочегоЦентра.Колонки.Добавить("Занят",          Новый ОписаниеТипов("Булево")); 
	ГрафикРаботыРабочегоЦентра.Колонки.Добавить("МаршрутныйЛист", Новый ОписаниеТипов("ДокументСсылка.МаршрутныйЛистПроизводства")); 
	ГрафикРаботыРабочегоЦентра.Колонки.Добавить("ВариантНаладки", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки")); 
	ГрафикРаботыРабочегоЦентра.Колонки.Добавить("ВремяРаботы",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 1))); 
	ГрафикРаботыРабочегоЦентра.Колонки.Добавить("Порядок",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10))); 
	ГрафикРаботыРабочегоЦентра.Колонки.Добавить("НачалоРаботы",   Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя))); 

КонецПроцедуры

&НаКлиенте
Процедура ПередатьКВыполнениюМаршрутныеЛистыНаСервере()
	
	УстановитьСтатус("КВыполнению", НСтр("ru = 'К выполнению';
										|en = 'Ready for fulfillment'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(ЗначениеСтатуса, ПредставлениеСтатуса)

	ВыделенныеСсылки = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.РасписаниеРабочихЦентров.ВыделенныеСтроки Цикл
		ДанныеСтроки = РасписаниеРабочихЦентров.НайтиПоИдентификатору(ИдентификаторСтроки);
		ВыделенныеСсылки.Добавить(ДанныеСтроки.МаршрутныйЛист);
	КонецЦикла;
	
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      ЗначениеСтатуса);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     ВыделенныеСсылки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьСтатус", ЭтаФорма, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке документов будет установлен статус ""%1"". Продолжить?';
						|en = 'The ""%1"" status will be set for the documents selected in the list. Continue?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры
 
&НаКлиенте
Процедура ВопросУстановитьСтатус(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
	
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Элементы.РасписаниеРабочихЦентров,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);

КонецПроцедуры

&НаСервере
Процедура ПоказатьМаршрутныеЛистыВыбранногоПериода()
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	Для каждого СтрокаРасписание Из РасписаниеРабочихЦентров Цикл
		ОпределитьВозможностьИзмененияИОтображениеСтрокиРасписания(СтрокаРасписание, ВыбранныйПериодРасписания);
	КонецЦикла; 

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВозможностьИзмененияИОтображениеСтрокиРасписания(СтрокаРасписание, ВыбранныйПериодРасписания)

	Если СтрокаРасписание.Начало = '000101010000' 
		ИЛИ СтрокаРасписание.Окончание = '000101010000' Тогда
		
		СтрокаРасписание.Отображать = Истина;
		СтрокаРасписание.ДоступноИзменение = Истина;
		
	ИначеЕсли СтрокаРасписание.Начало <= ВыбранныйПериодРасписания.Окончание 
		И СтрокаРасписание.Окончание >= ВыбранныйПериодРасписания.Начало Тогда
		
		СтрокаРасписание.Отображать = Истина;
		Если СтрокаРасписание.Начало < ВыбранныйПериодРасписания.Начало Тогда
			СтрокаРасписание.ДоступноИзменение = Ложь;
		Иначе
			СтрокаРасписание.ДоступноИзменение = Истина;
		КонецЕсли;
		
	Иначе
		СтрокаРасписание.Отображать = Ложь;
		СтрокаРасписание.ДоступноИзменение = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНеЗапланированныеМЛИзРасписания()

	СписокСтрок = Новый Массив;;
	Для каждого СтрокаРасписание Из РасписаниеРабочихЦентров Цикл
		Если СтрокаРасписание.Начало = '000101010000' ИЛИ СтрокаРасписание.Окончание = '000101010000' Тогда
			СписокСтрок.Добавить(СтрокаРасписание.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	УдалитьИзРасписанияМЛ(СписокСтрок);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзРасписанияМЛ(ИдентификаторыСтрокРасписания)

	ИдентификаторыСтрокРасписанияКУдалению = Новый Массив;
	МассивСтрокНедоступныхДляИзменения = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрокРасписания Цикл
		СтрокаРасписание = РасписаниеРабочихЦентров.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаРасписание.ДоступноИзменение Тогда
			ИдентификаторыСтрокРасписанияКУдалению.Добавить(ИдентификаторСтроки);
		Иначе
			МассивСтрокНедоступныхДляИзменения.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрокРасписанияКУдалению", ИдентификаторыСтрокРасписанияКУдалению);
	ДополнительныеПараметры.Вставить("МассивСтрокНедоступныхДляИзменения", МассивСтрокНедоступныхДляИзменения);
	
	// Если выбраны МЛ начинающиеся в прошлом периоде то нужно предупредить
	Если МассивСтрокНедоступныхДляИзменения.Количество() <> 0 Тогда
		
		Если МассивСтрокНедоступныхДляИзменения.Количество() = ИдентификаторыСтрокРасписания.Количество() Тогда
			// Все выбранные строки начинаются в прошлом
			Если МассивСтрокНедоступныхДляИзменения.Количество() = 1 Тогда
				ТекстВопроса = НСтр("ru = 'Начало выполнения маршрутного листа запланировано в предыдущем интервале.
											|Расписание предыдущего интервала может стать неактуальным.
											|Продолжить?';
											|en = 'The planned start date of the route sheet lies in the previous interval.
											|Timetable of the previous interval can become irrelevant. 
											|Continue?'");
			Иначе	
				ТекстВопроса = НСтр("ru = 'Начало выполнения маршрутных листов запланировано в предыдущем интервале.
											|Расписание предыдущего интервала может стать неактуальным.
											|Продолжить?';
											|en = 'The planned start date of the route sheets lies in the previous interval.
											|Timetable of the previous interval can become irrelevant. 
											|Continue?'");
			КонецЕсли; 
		Иначе
			// Некоторые выбранные строки начинаются в прошлом
			Если МассивСтрокНедоступныхДляИзменения.Количество() = 1 Тогда
				ТекстВопроса = НСтр("ru = 'Начало выполнения одного из выбранных маршрутных листов запланировано в предыдущем интервале.
											|Расписание предыдущего интервала может стать неактуальным.
											|Продолжить?';
											|en = 'The planned start date of one of the selected route sheets lies in the previous interval.
											|Timetable of the previous interval can become irrelevant. 
											|Continue?'");
			Иначе	
				ТекстВопроса = НСтр("ru = 'Начало выполнения некоторых выбранных маршрутных листов запланировано в предыдущем интервале.
											|Расписание предыдущего интервала может стать неактуальным.
											|Продолжить?';
											|en = 'The planned start date of several selected route sheets lies in the previous interval.
											|Timetable of the previous interval can become irrelevant. 
											|Continue?'");
			КонецЕсли; 
			
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьИзРасписанияМЛЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
															|en = 'Continue'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		
	Иначе
		
		УдалитьИзРасписанияМЛЗавершение(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзРасписанияМЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// Пользователь решил удалить недоступные строки
		ИдентификаторыСтрок = ДополнительныеПараметры.ИдентификаторыСтрокРасписанияКУдалению;
		Для каждого ИдентификаторСтроки Из ДополнительныеПараметры.МассивСтрокНедоступныхДляИзменения Цикл
			ИдентификаторыСтрок.Добавить(ИдентификаторСтроки);
		КонецЦикла; 
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		// Нужно удалить только доступные
		ИдентификаторыСтрок = ДополнительныеПараметры.ИдентификаторыСтрокРасписанияКУдалению;
	Иначе
		Возврат;
	КонецЕсли;
	
	УдалитьИзРасписанияМЛНаСервере(ИдентификаторыСтрок);
	ЗаполнитьИтогиТребуютПланирования();
	ПриИзмененииРасписания();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзРасписанияМЛНаСервере(Знач ИдентификаторыСтрокРасписания)

	СписокРабочихЦентровДляКоторыхНеобходимоРассчитатьРасписание = ОпределитьСтрокиДляКоторыхНеобходимоРассчитатьРасписание(ИдентификаторыСтрокРасписания);
	
	СтрокиКУдалению = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрокРасписания Цикл
		
		СтрокаРасписание = РасписаниеРабочихЦентров.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		// Добавим удаленные строки в список незапланированных МЛ
		Если СтрокаРасписание.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан
			ИЛИ СтрокаРасписание.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.КВыполнению
			ИЛИ СтрокаРасписание.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется Тогда
			
			СтрокаТребуетПлана = ТребуютПланирования.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТребуетПлана, СтрокаРасписание);
			
			Если ПараллельнаяЗагрузка Тогда
				СтрокаТребуетПлана.ВремяРаботы = СтрокаТребуетПлана.ВремяРаботыНорматив;
			Иначе
				СтрокаТребуетПлана.ВремяРаботы = ОперативныйУчетПроизводстваКлиентСервер.ОбъемРабот(
														СтрокаТребуетПлана.ВремяРаботыНорматив, 
														СтрокаТребуетПлана.Количество,
														СтрокаТребуетПлана.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
			КонецЕсли; 
													
			СтрокаТребуетПлана.ОбъемРабот = СтрокаТребуетПлана.ВремяРаботы / 3600;
			Если СтрокаТребуетПлана.ДатаИнтервала <> ИнтервалПланированияНачало Тогда
				СтрокаТребуетПлана.ВыполнениеЗапланированоВПрошломИнтервале = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		// Удалим расписание
		НаборЗаписей = РегистрыСведений.РасписаниеРаботыРабочихЦентров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МаршрутныйЛист.Установить(СтрокаРасписание.МаршрутныйЛист);
		НаборЗаписей.Записать();
		
		// Вернем данные о занятости согласно графика производства
		Если СтрокаРасписание.ПеренесенНаДругойИнтервал Тогда
			МаршрутныйЛистОбъект = СтрокаРасписание.МаршрутныйЛист.ПолучитьОбъект();
			МаршрутныйЛистОбъект.ПеренесенНаДругойИнтервал = Ложь;
			
			// Запомним выбор РЦ
			РабочиеЦентрыВидовРЦ = Новый Соответствие;
			Для каждого СтрокаЗанятость Из МаршрутныйЛистОбъект.ВидыРабочихЦентров Цикл
				РабочиеЦентрыВидовРЦ.Вставить(СтрокаЗанятость.ВидРабочегоЦентра, СтрокаЗанятость.РабочийЦентр);
			КонецЦикла;
			
			МаршрутныйЛистОбъект.ВидыРабочихЦентров.Загрузить(МаршрутныйЛистОбъект.ЗанятостьВидовРабочихЦентровПоГрафику.Выгрузить());
			Для каждого СтрокаЗанятость Из МаршрутныйЛистОбъект.ВидыРабочихЦентров Цикл
				СтрокаЗанятость.РабочийЦентр = РабочиеЦентрыВидовРЦ.Получить(СтрокаЗанятость.ВидРабочегоЦентра);
			КонецЦикла; 
			
			ОпределитьПериодРаботыВидовРЦМаршрутногоЛиста(МаршрутныйЛистОбъект);
			
			МаршрутныйЛистОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли; 
		
		СтрокиКУдалению.Добавить(СтрокаРасписание);
		
	КонецЦикла; 
	
	// Удалим выбранные строки
	Для каждого СтрокаРасписание Из СтрокиКУдалению Цикл
		РасписаниеРабочихЦентров.Удалить(СтрокаРасписание);
	КонецЦикла; 
	
	Для каждого РабочийЦентр Из СписокРабочихЦентровДляКоторыхНеобходимоРассчитатьРасписание Цикл
		РассчитатьРасписаниеРабочегоЦентра(РабочийЦентр);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура РассчитатьРасписаниеПриИзмененииСтроки(Знач ИдентификаторИзмененнойСтроки, Знач РабочийЦентр)

	ИдентификаторыИзмененныхСтрок = Новый Массив;
	ИдентификаторыИзмененныхСтрок.Добавить(ИдентификаторИзмененнойСтроки);
	ОпределитьСтрокиДляКоторыхНеобходимоРассчитатьРасписание(ИдентификаторыИзмененныхСтрок, РабочийЦентр);
	
	РассчитатьРасписаниеРабочегоЦентра(РабочийЦентр);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасписаниеПоВсемСтрокам(Знач РабочийЦентр)

	СтруктураПоиска = Новый Структура("РабочийЦентр,ДоступноИзменение", РабочийЦентр, Истина);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		СтрокаРасписание.РассчитатьРасписание = Истина;
	КонецЦикла; 

	РассчитатьРасписаниеРабочегоЦентра(РабочийЦентр);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьСтрокиДляКоторыхНеобходимоРассчитатьРасписание(ИдентификаторыИзмененныхСтрок, РабочийЦентр = Неопределено)

	НачалоРаботыВИзмененныхСтроках = Новый Соответствие;
	Для каждого ИдентификаторСтроки Из ИдентификаторыИзмененныхСтрок Цикл
		СтрокаРасписание = РасписаниеРабочихЦентров.НайтиПоИдентификатору(ИдентификаторСтроки);
		Начало = НачалоРаботыВИзмененныхСтроках.Получить(СтрокаРасписание.РабочийЦентр);
		Если Начало = Неопределено ИЛИ СтрокаРасписание.Начало < Начало Тогда
			НачалоРаботыВИзмененныхСтроках.Вставить(СтрокаРасписание.РабочийЦентр, СтрокаРасписание.Начало);
		КонецЕсли;
	КонецЦикла;
	
	СписокРабочихЦентровДляКоторыхНеобходимоРассчитатьРасписание = Новый Массив;
	
	Для ИндексСтроки = 0 По РасписаниеРабочихЦентров.Количество() - 1 Цикл
		
		СтрокаРасписание = РасписаниеРабочихЦентров[ИндексСтроки];
		
		Если НЕ СтрокаРасписание.ДоступноИзменение 
			ИЛИ РабочийЦентр <> Неопределено 
				И СтрокаРасписание.РабочийЦентр <> РабочийЦентр Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокРабочихЦентровДляКоторыхНеобходимоРассчитатьРасписание.Найти(СтрокаРасписание.РабочийЦентр) <> Неопределено Тогда
			// Для этого рабочего центра требуется рассчитать расписание
			СтрокаРасписание.РассчитатьРасписание = Истина;
		Иначе
			ИдентификаторСтроки = СтрокаРасписание.ПолучитьИдентификатор();
			Начало = НачалоРаботыВИзмененныхСтроках.Получить(СтрокаРасписание.РабочийЦентр);
			Если ИдентификаторыИзмененныхСтрок.Найти(ИдентификаторСтроки) <> Неопределено
				ИЛИ Начало <> Неопределено 
					И СтрокаРасписание.Окончание > Начало
				ИЛИ СтрокаРасписание.Начало = '000101010000'
				ИЛИ СтрокаРасписание.Окончание = '000101010000' Тогда
				
				СтрокаРасписание.РассчитатьРасписание = Истина;
				// Добавим рабочий центр, чтобы для последующих строк установить необходимость расчета расписания.
				СписокРабочихЦентровДляКоторыхНеобходимоРассчитатьРасписание.Добавить(СтрокаРасписание.РабочийЦентр);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 

	Возврат СписокРабочихЦентровДляКоторыхНеобходимоРассчитатьРасписание;
	
КонецФункции

&НаКлиенте
Функция РасписаниеРабочихЦентровДляКонтроляПериода(РабочийЦентр)

	ДанныеРасписания = Новый Массив;
	
	СтруктураПоиска = Новый Структура("РабочийЦентр,РасписаниеВведеноВручную", РабочийЦентр, Истина);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		Если СтрокаРасписание.Начало <> '000101010000' И СтрокаРасписание.Окончание <> '000101010000' Тогда
			ДанныеСтроки = Новый Структура("Начало,Окончание,ВариантНаладки,МаршрутныйЛистСтрока");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаРасписание);
			ДанныеРасписания.Добавить(ДанныеСтроки);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ДанныеРасписания;

КонецФункции

&НаКлиенте
Процедура ИзменитьПериодВыполненияМаршрутногоЛиста(ИдентификаторСтроки, РабочийЦентр = Неопределено, ПередатьПараметрыФормы = Неопределено)

	Если ТипЗнч(ИдентификаторСтроки) = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		СтруктураПоиска = Новый Структура("МаршрутныйЛист", ИдентификаторСтроки);
  		СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаРасписание = СписокСтрок[0];
	Иначе
		СтрокаРасписание = РасписаниеРабочихЦентров.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	// Рабочий центр может изменяться при изменении периода
	// Например, если пользователь перемещает МЛ в графике занятости.
	РабочийЦентрРасписания = ?(РабочийЦентр = Неопределено, СтрокаРасписание.РабочийЦентр, РабочийЦентр);
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	Начало = ?(СтрокаРасписание.НачалоПриРучномВводеРасписания <> '000101010000', 
					СтрокаРасписание.НачалоПриРучномВводеРасписания, 
					СтрокаРасписание.Начало);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Начало", Начало);
	ПараметрыФормы.Вставить("Окончание", СтрокаРасписание.Окончание);
	ПараметрыФормы.Вставить("ВремяРаботы", СтрокаРасписание.ВремяРаботы);
	ПараметрыФормы.Вставить("ВремяРаботыВРабочееВремя", СтрокаРасписание.ВремяРаботыВРабочееВремя);
	ПараметрыФормы.Вставить("ОбъемРабот", СтрокаРасписание.ОбъемРабот);
	ПараметрыФормы.Вставить("Непрерывный", СтрокаРасписание.Непрерывный);
	ПараметрыФормы.Вставить("ВремяРаботыИзмененоПользователем", СтрокаРасписание.ВремяРаботыИзмененоПользователем);
	ПараметрыФормы.Вставить("ИнтервалПланирования", ИнтервалПланирования);
	ПараметрыФормы.Вставить("ЗанятостьВИнтервалах", СтрокаРасписание.ЗанятостьВИнтервалах);
	
	ПараметрыФормы.Вставить("НачалоПериода",    ВыбранныйПериодРасписания.Начало);
	ПараметрыФормы.Вставить("ОкончаниеПериода", ВыбранныйПериодРасписания.Окончание);
	
	ПараметрыФормы.Вставить("РабочийЦентр", РабочийЦентрРасписания);
	ПараметрыФормы.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
	ПараметрыФормы.Вставить("РасписаниеРабочихЦентров", РасписаниеРабочихЦентровДляКонтроляПериода(РабочийЦентрРасписания));
	
	ПараметрыФормы.Вставить("МаршрутныйЛистСтрока", СтрокаРасписание.МаршрутныйЛистСтрока);
	
	Если ПередатьПараметрыФормы <> Неопределено Тогда
		Для каждого ПараметрКлючИЗначение Из ПередатьПараметрыФормы Цикл
			ПараметрыФормы.Вставить(ПараметрКлючИЗначение.Ключ, ПараметрКлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МаршрутныйЛист", СтрокаРасписание.МаршрутныйЛист);
	ДополнительныеПараметры.Вставить("РабочийЦентр", РабочийЦентрРасписания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПериодВыполненияМаршрутногоЛистаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма.ПериодВыполненияМаршрутногоЛиста", 
						ПараметрыФормы,,,,, 
						ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодВыполненияМаршрутногоЛистаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВГрафикеВыбранМаршрутныйЛистДляПеремещения = Ложь;
	
	ИзменитьПериодВыполненияМаршрутногоЛистаНаСервере(
			РезультатЗакрытия, ДополнительныеПараметры.МаршрутныйЛист, ДополнительныеПараметры.РабочийЦентр);
	 
	ПриИзмененииРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПериодВыполненияМаршрутногоЛистаНаСервере(ПараметрыПериода, МаршрутныйЛист, РабочийЦентр)

	СтруктураПоиска = Новый Структура("МаршрутныйЛист", МаршрутныйЛист);
  	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	СтрокаРасписание = СписокСтрок[0];
	
	СтрокаРасписание.Начало     = ПараметрыПериода.Начало;
	СтрокаРасписание.Окончание  = ПараметрыПериода.Окончание;
	СтрокаРасписание.ОбъемРабот = ПараметрыПериода.ОбъемРабот;
	СтрокаРасписание.ВремяРаботыВРабочееВремя = ПараметрыПериода.ВремяРаботыВРабочееВремя;
	СтрокаРасписание.ВремяРаботыИзмененоПользователем = ПараметрыПериода.ВремяРаботыИзмененоПользователем;
	СтрокаРасписание.РасписаниеВведеноВручную = Истина;
	СтрокаРасписание.НачалоПриРучномВводеРасписания = ПараметрыПериода.Начало;
	
	СтрокаРасписание.ЕстьПроблема = Ложь;
	СтрокаРасписание.ПроблемыПриФормированииРасписания = "";
	
	// Т.к. рабочий центр может измениться то нужно рассчитать расписание по старому и новому РЦ.
	Если СтрокаРасписание.РабочийЦентр <> РабочийЦентр Тогда
		РассчитатьРасписаниеПоВсемСтрокам(СтрокаРасписание.РабочийЦентр);
	КонецЕсли; 
	
	СтрокаРасписание.РабочийЦентр = РабочийЦентр;
	
	СтрокаРасписание.ЗанятостьВИнтервалах.ЗагрузитьЗначения(ПараметрыПериода.ЗанятостьВИнтервалах);
	
	РассчитатьРасписаниеПоВсемСтрокам(СтрокаРасписание.РабочийЦентр);
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	ОпределитьВозможностьИзмененияИОтображениеСтрокиРасписания(СтрокаРасписание, ВыбранныйПериодРасписания);

КонецПроцедуры

#КонецОбласти

#Область Переналадка

&НаСервере
Процедура ПриИзмененииДлительностиПереналадкиНаСервере()

	ЗаполнитьТаблицуДлительностиПереналадки();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДлительностиПереналадки()

	НастройкаПереналадки = РегистрыСведений.ДлительностьПереналадки.НастройкаПереналадки(ВыбранныйВидРабочегоЦентра);
	ТаблицаДлительностьПереналадки.Загрузить(НастройкаПереналадки);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьДанныеНаСервере()

	ДатаКонтроля = ТекущаяДатаСеанса();
	
	ТекущаяСтрока = Элементы.РасписаниеРабочихЦентров.ТекущаяСтрока;
	ТекущиеДанные = РасписаниеРабочихЦентров.НайтиПоИдентификатору(?(ТекущаяСтрока <> Неопределено, ТекущаяСтрока, -1));
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийМЛРасписания = ТекущиеДанные.МаршрутныйЛист;
	Иначе
		ТекущийМЛРасписания = Неопределено;
	КонецЕсли;
	
	РасписаниеРабочихЦентров.Очистить();
	ТребуютПланирования.Очистить();
	
	Если ОтборПодразделение.Пустая()
		ИЛИ ВыбранныйВидРабочегоЦентра.Пустая()
		ИЛИ ИнтервалПланированияНачало = '000101010000'
		ИЛИ ИнтервалПланированияОкончание = '000101010000' Тогда
		
		ОбновитьИнформацию();
		ОбновитьИнформациюРасписания();
		
		Возврат;
	КонецЕсли;
	
	ЕдиницаВремениПереналадки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйВидРабочегоЦентра, "ЕдиницаВремениПереналадки");
	
	ЗаполнитьТаблицуДлительностиПереналадки();
	
	// График работы берется на весь интервал планирования
	ГрафикРаботы.Загрузить(ОперативныйУчетПроизводства.ГрафикРаботыВидаРабочегоЦентра(
											ВыбранныйВидРабочегоЦентра, 
											ИнтервалПланированияНачало, 
											ИнтервалПланированияОкончание));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 0. МЛ требующие планирования
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистПроизводства.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра КАК ФактическоеОкончание,
	|	МаршрутныйЛистПроизводства.Ссылка                               КАК МаршрутныйЛист,
	|	МаршрутныйЛистПроизводства.Номер                                КАК Номер,
	|	МаршрутныйЛистПроизводства.Дата                                 КАК Дата,
	|	МаршрутныйЛистПроизводства.Статус                               КАК Статус,
	|	МаршрутныйЛистПроизводства.ЭтапВосстановленияБрака              КАК ЭтапВосстановленияБрака,
	|	МаршрутныйЛистПроизводства.Этап                                 КАК Этап,
	|	МаршрутныйЛистПроизводства.Этап.Владелец                        КАК Спецификация,
	|	МаршрутныйЛистПроизводства.Этап.Владелец.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	МаршрутныйЛистПроизводства.Этап.Наименование                    КАК ЭтапПредставление,
	|	МаршрутныйЛистПроизводства.Этап.Владелец.Наименование           КАК СпецификацияПредставление,
	|	МаршрутныйЛистПроизводства.Номенклатура                         КАК Номенклатура,
	|	МаршрутныйЛистПроизводства.Характеристика                       КАК Характеристика,
	|	МаршрутныйЛистПроизводства.Номенклатура.Представление           КАК НоменклатураПредставление,
	|	МаршрутныйЛистПроизводства.Характеристика.Представление         КАК ХарактеристикаПредставление,
	|	МаршрутныйЛистПроизводства.Назначение.Представление             КАК НазначениеПредставление,
	|	МаршрутныйЛистПроизводства.Запланировано                        КАК Количество,
	|	МаршрутныйЛистПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	МаршрутныйЛистПроизводства.Непрерывный                          КАК Непрерывный,
	|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала                      КАК ДатаИнтервала,
	|	ЗанятостьВидовРабочихЦентров.НачалоПоГрафику                    КАК НачалоПоГрафику,
	|	ЗанятостьВидовРабочихЦентров.ОкончаниеПоГрафику                 КАК ОкончаниеПоГрафику,
	|	ЗанятостьВидовРабочихЦентров.ВремяРаботы                        КАК ВремяРаботы,
	|	ЗанятостьВидовРабочихЦентров.ВремяРаботы                        КАК ВремяРаботыВРабочееВремя,
	|	ЗанятостьВидовРабочихЦентров.ВремяРаботыНорматив                КАК ВремяРаботыНорматив,
	|	ЗанятостьВидовРабочихЦентров.ВремяРаботы / 3600                 КАК ОбъемРабот,
	|	ЗанятостьВидовРабочихЦентров.Загрузка                           КАК Загрузка,
	|	ЗанятостьВидовРабочихЦентров.ЗагрузкаНорматив                   КАК ЗагрузкаНорматив,
	|	ЗанятостьВидовРабочихЦентров.ВариантНаладки                     КАК ВариантНаладки,
	|	ЗанятостьВидовРабочихЦентров.ВариантНаладкиПредставление        КАК ВариантНаладкиПредставление,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                           КАК ХарактеристикиИспользуются,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата                        КАК ДатаЗаказа,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер                       КАК НомерЗаказа,
	|	ЗаказНаПроизводствоПродукция.НомерСтроки                        КАК НомерСтрокиЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		МаршрутныйЛистПроизводства.Ссылка КАК Ссылка,
	|		ЗанятостьВидовРабочихЦентров.ВариантНаладки КАК ВариантНаладки,
	|		ЗанятостьВидовРабочихЦентров.ВариантНаладки.Представление КАК ВариантНаладкиПредставление,
	|		СУММА(ЗанятостьВидовРабочихЦентров.ВремяРаботы) КАК ВремяРаботы,
	|		СУММА(ЗанятостьВидовРабочихЦентров.ВремяРаботыНорматив) КАК ВремяРаботыНорматив,
	|		МИНИМУМ(ЗанятостьВидовРабочихЦентров.ДатаИнтервала) КАК ДатаИнтервала,
	|		МИНИМУМ(ЗанятостьВидовРабочихЦентров.ДатаИнтервала) КАК НачалоПоГрафику,
	|		МАКСИМУМ(ЗанятостьВидовРабочихЦентров.ДатаИнтервала) КАК ОкончаниеПоГрафику,
	|		МАКСИМУМ(ЗанятостьВидовРабочихЦентров.Загрузка) КАК Загрузка,
	|		МАКСИМУМ(ЗанятостьВидовРабочихЦентров.ЗагрузкаНорматив) КАК ЗагрузкаНорматив
	|	ИЗ
	|		Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ЗанятостьВидовРабочихЦентровПоГрафику КАК ЗанятостьВидовРабочихЦентров
	|			ПО (ЗанятостьВидовРабочихЦентров.Ссылка = МаршрутныйЛистПроизводства.Ссылка)
	|				И (ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра = &ВидРабочегоЦентра)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|			ПО (РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = ЗанятостьВидовРабочихЦентров.Ссылка)
	|	ГДЕ
	|		МаршрутныйЛистПроизводства.Проведен
	|		И МаршрутныйЛистПроизводства.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется))
	|		И РасписаниеРаботыРабочихЦентров.МаршрутныйЛист ЕСТЬ NULL 
	|
	|	СГРУППИРОВАТЬ ПО
	|		МаршрутныйЛистПроизводства.Ссылка,
	|		ЗанятостьВидовРабочихЦентров.ВариантНаладки,
	|		ЗанятостьВидовРабочихЦентров.ВариантНаладки.Представление) КАК ЗанятостьВидовРабочихЦентров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|	ПО ЗанятостьВидовРабочихЦентров.Ссылка = МаршрутныйЛистПроизводства.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|	ПО (ЗаказНаПроизводствоПродукция.Ссылка = МаршрутныйЛистПроизводства.Распоряжение)
	|		И (ЗаказНаПроизводствоПродукция.КодСтроки = МаршрутныйЛистПроизводства.КодСтроки)
	|
	|ГДЕ
	|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала <= &ДатаИнтервала
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИнтервала,
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. Расписание
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасписаниеРаботыРабочихЦентров.РабочийЦентр                     КАК РабочийЦентр,
	|	МаршрутныйЛистПроизводства.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра КАК ФактическоеОкончание,
	|	РасписаниеРаботыРабочихЦентров.ВремяРаботыИзмененоПользователем КАК ВремяРаботыИзмененоПользователем,
	|	РасписаниеРаботыРабочихЦентров.РасписаниеВведеноВручную         КАК РасписаниеВведеноВручную,
	|	РасписаниеРаботыРабочихЦентров.Порядок                          КАК Порядок,
	|	МаршрутныйЛистПроизводства.Ссылка                               КАК МаршрутныйЛист,
	|	МаршрутныйЛистПроизводства.Номер                                КАК Номер,
	|	МаршрутныйЛистПроизводства.Дата                                 КАК Дата,
	|	МаршрутныйЛистПроизводства.Статус                               КАК Статус,
	|	МаршрутныйЛистПроизводства.ПеренесенНаДругойИнтервал            КАК ПеренесенНаДругойИнтервал,
	|	МаршрутныйЛистПроизводства.ЭтапВосстановленияБрака              КАК ЭтапВосстановленияБрака,
	|	МаршрутныйЛистПроизводства.Этап                                 КАК Этап,
	|	МаршрутныйЛистПроизводства.Этап.Владелец                        КАК Спецификация,
	|	МаршрутныйЛистПроизводства.Этап.Владелец.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	МаршрутныйЛистПроизводства.Этап.Наименование                    КАК ЭтапПредставление,
	|	МаршрутныйЛистПроизводства.Этап.Владелец.Наименование           КАК СпецификацияПредставление,
	|	МаршрутныйЛистПроизводства.Номенклатура                         КАК Номенклатура,
	|	МаршрутныйЛистПроизводства.Характеристика                       КАК Характеристика,
	|	МаршрутныйЛистПроизводства.Номенклатура.Представление           КАК НоменклатураПредставление,
	|	МаршрутныйЛистПроизводства.Характеристика.Представление         КАК ХарактеристикаПредставление,
	|	МаршрутныйЛистПроизводства.Назначение.Представление             КАК НазначениеПредставление,
	|	МаршрутныйЛистПроизводства.Запланировано                        КАК Количество,
	|	МаршрутныйЛистПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	МаршрутныйЛистПроизводства.Непрерывный                          КАК Непрерывный,
	|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала                      КАК ДатаИнтервала,
	|	ЗанятостьВидовРабочихЦентров.НачалоПоГрафику                    КАК НачалоПоГрафику,
	|	ЗанятостьВидовРабочихЦентров.ОкончаниеПоГрафику                 КАК ОкончаниеПоГрафику,
	|	ЗанятостьВидовРабочихЦентров.ВремяРаботыНорматив                КАК ВремяРаботыНорматив,
	|	ЗанятостьВидовРабочихЦентров.Загрузка                           КАК Загрузка,
	|	ЗанятостьВидовРабочихЦентров.ЗагрузкаНорматив                   КАК ЗагрузкаНорматив,
	|	ЗанятостьВидовРабочихЦентров.ВариантНаладки                     КАК ВариантНаладки,
	|	ЗанятостьВидовРабочихЦентров.ВариантНаладки.Представление       КАК ВариантНаладкиПредставление,
	|	РасписаниеРаботыРабочихЦентров.ВремяПереналадки                 КАК ВремяПереналадки,
	|	РасписаниеРаботыРабочихЦентров.ВремяПереналадки / 3600          КАК ВремяПереналадкиВЧасах,
	|	РасписаниеРаботыРабочихЦентров.НачалоПриРучномВводеРасписания   КАК НачалоПриРучномВводеРасписания,
	|	РасписаниеРаботыРабочихЦентров.ВремяПереналадкиВРабочееВремя    КАК ВремяПереналадкиВРабочееВремя,
	|	РасписаниеРаботыРабочихЦентров.ПроблемыПриФормированииРасписания КАК ПроблемыПриФормированииРасписания,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                           КАК ХарактеристикиИспользуются,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата                        КАК ДатаЗаказа,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер                       КАК НомерЗаказа,
	|	ЗаказНаПроизводствоПродукция.НомерСтроки                        КАК НомерСтрокиЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		МаршрутныйЛистПроизводства.Ссылка КАК Ссылка,
	|		ЗанятостьВидовРабочихЦентров.ВариантНаладки КАК ВариантНаладки,
	|		ЗанятостьВидовРабочихЦентров.ВариантНаладки.Представление КАК ВариантНаладкиПредставление,
	|		СУММА(ЗанятостьВидовРабочихЦентров.ВремяРаботыНорматив) КАК ВремяРаботыНорматив,
	|		МИНИМУМ(ЗанятостьВидовРабочихЦентров.ДатаИнтервала) КАК ДатаИнтервала,
	|		МИНИМУМ(ЗанятостьВидовРабочихЦентров.ДатаИнтервала) КАК НачалоПоГрафику,
	|		МАКСИМУМ(ЗанятостьВидовРабочихЦентров.ДатаИнтервала) КАК ОкончаниеПоГрафику,
	|		МАКСИМУМ(ЗанятостьВидовРабочихЦентров.Загрузка) КАК Загрузка,
	|		МАКСИМУМ(ЗанятостьВидовРабочихЦентров.ЗагрузкаНорматив) КАК ЗагрузкаНорматив
	|	ИЗ
	|		РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|			ПО (МаршрутныйЛистПроизводства.Ссылка = РасписаниеРаботыРабочихЦентров.МаршрутныйЛист)
	|				И (МаршрутныйЛистПроизводства.Проведен)
	|				И (МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ЗанятостьВидовРабочихЦентровПоГрафику КАК ЗанятостьВидовРабочихЦентров
	|			ПО (ЗанятостьВидовРабочихЦентров.Ссылка = МаршрутныйЛистПроизводства.Ссылка)
	|				И (ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра = &ВидРабочегоЦентра)
	|	ГДЕ
	|		РасписаниеРаботыРабочихЦентров.ДатаИнтервала = &ДатаИнтервала
	|
	|	СГРУППИРОВАТЬ ПО
	|		МаршрутныйЛистПроизводства.Ссылка,
	|		ЗанятостьВидовРабочихЦентров.ВариантНаладки,
	|		ЗанятостьВидовРабочихЦентров.ВариантНаладки.Представление) КАК ЗанятостьВидовРабочихЦентров
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Ссылка = ЗанятостьВидовРабочихЦентров.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|		ПО (РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = ЗанятостьВидовРабочихЦентров.Ссылка)
	|			И РасписаниеРаботыРабочихЦентров.ДатаИнтервала = &ДатаИнтервала
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО ЗаказНаПроизводствоПродукция.Ссылка = МаршрутныйЛистПроизводства.Распоряжение
	|			И ЗаказНаПроизводствоПродукция.КодСтроки = МаршрутныйЛистПроизводства.КодСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасписаниеРаботыРабочихЦентров.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2. ЗанятостьВИнтервалах
	|ВЫБРАТЬ
	|	ЗанятостьВИнтервалах.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ЗанятостьВИнтервалах.ДатаИнтервала КАК ДатаИнтервала,
	|	ЗанятостьВИнтервалах.ВремяПереналадкиВРабочееВремя КАК ВремяПереналадкиВРабочееВремя,
	|	ЗанятостьВИнтервалах.Начало КАК Начало,
	|	ЗанятостьВИнтервалах.Окончание КАК Окончание,
	|	ЗанятостьВИнтервалах.ВремяРаботы КАК ВремяРаботы,
	|	ЗанятостьВИнтервалах.ВремяРаботыВРабочееВремя КАК ВремяРаботыВРабочееВремя
	|ИЗ
	|	РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК ЗанятостьВИнтервалах
	|		ПО (ЗанятостьВИнтервалах.МаршрутныйЛист = РасписаниеРаботыРабочихЦентров.МаршрутныйЛист)
	|ГДЕ
	|	РасписаниеРаботыРабочихЦентров.ДатаИнтервала = &ДатаИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3. Список РЦ
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
	|	РабочиеЦентры.КоэффициентВремениРаботы КАК КоэффициентВремениРаботы,
	|	РабочиеЦентры.МаксимальнаяЗагрузка КАК МаксимальнаяЗагрузка
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.ВидРабочегоЦентра = &ВидРабочегоЦентра
	|	И НЕ РабочиеЦентры.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
	Запрос.УстановитьПараметр("ДатаИнтервала",     ИнтервалПланированияНачало);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СписокМаршрутныхЛистов = Новый Массив;
	
	// Требуют планирования
	ВыборкаДокументов = Результат[0].Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		НоваяСтрока = ТребуютПланирования.Добавить();
		ЗаполнитьСтрокуМЛ(НоваяСтрока, ВыборкаДокументов);
		
		Если НоваяСтрока.ДатаИнтервала <> ИнтервалПланированияНачало Тогда
			НоваяСтрока.ВыполнениеЗапланированоВПрошломИнтервале = Истина;
		КонецЕсли; 
		
		СписокМаршрутныхЛистов.Добавить(ВыборкаДокументов.МаршрутныйЛист);
	КонецЦикла;
	
	// Расписание
	ЗанятостьВИнтервалах = Результат[2].Выгрузить();
	ВыборкаДокументов = Результат[1].Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		НоваяСтрока = РасписаниеРабочихЦентров.Добавить();
		НоваяСтрока.ЕстьПроблема = (ВыборкаДокументов.ПроблемыПриФормированииРасписания <> "");
		ЗаполнитьСтрокуМЛ(НоваяСтрока, ВыборкаДокументов);
		
		Начало = '000101010000';
		Окончание = '000101010000';
		ВремяРаботы = 0;
		ВремяРаботыВРабочееВремя = 0;
		СтруктураПоиска = Новый Структура("МаршрутныйЛист", НоваяСтрока.МаршрутныйЛист);
  		СписокСтрок = ЗанятостьВИнтервалах.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеЗанятости Из СписокСтрок Цикл
			ДанныеЗанятостиВИнтервале = Новый Структура("ДатаИнтервала,Начало,Окончание,ВремяРаботы,
														|ВремяРаботыВРабочееВремя,ВремяПереналадкиВРабочееВремя");
														
			ЗаполнитьЗначенияСвойств(ДанныеЗанятостиВИнтервале, ДанныеЗанятости);
			НоваяСтрока.ЗанятостьВИнтервалах.Добавить(ДанныеЗанятостиВИнтервале);
			
			Начало = ?(Начало <> '000101010000', Мин(ДанныеЗанятости.Начало, Начало), ДанныеЗанятости.Начало);
			Окончание = ?(Окончание <> '000101010000', Макс(ДанныеЗанятости.Окончание, Окончание), ДанныеЗанятости.Окончание);
			НоваяСтрока.ВремяРаботы = НоваяСтрока.ВремяРаботы + ДанныеЗанятости.ВремяРаботы;
			НоваяСтрока.ВремяРаботыВРабочееВремя = НоваяСтрока.ВремяРаботыВРабочееВремя + ДанныеЗанятости.ВремяРаботыВРабочееВремя;
		КонецЦикла;
		
		НоваяСтрока.Начало = Начало;
		НоваяСтрока.Окончание = Окончание;
		НоваяСтрока.ОбъемРабот = НоваяСтрока.ВремяРаботы / 3600;
		НоваяСтрока.НачалоПриРучномВводеРасписания = ВыборкаДокументов.НачалоПриРучномВводеРасписания;
		
		СписокМаршрутныхЛистов.Добавить(ВыборкаДокументов.МаршрутныйЛист);
	КонецЦикла;
	
	ВыполнениеСмежныхЭтапов = Документы.МаршрутныйЛистПроизводства.ВыполнениеСмежныхЭтапов(СписокМаршрутныхЛистов);
	ЗаполнитьНеЗавершеныПредыдущиеЭтапы(ВыполнениеСмежныхЭтапов, ТребуютПланирования);
	ЗаполнитьНеЗавершеныПредыдущиеЭтапы(ВыполнениеСмежныхЭтапов, РасписаниеРабочихЦентров);
	
	ПоказатьМаршрутныеЛистыВыбранногоПериода();
	
	// Запомним какой была текущая строка рабочих центров, чтобы потом ее восстановить
	ТекущаяСтрока = Элементы.СписокРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущийРЦ = СписокРабочихЦентров.НайтиПоИдентификатору(ТекущаяСтрока).РабочийЦентр;
	Иначе
		ТекущийРЦ = Неопределено;
	КонецЕсли;
	
	СписокРабочихЦентров.Загрузить(Результат[3].Выгрузить());
	Для каждого СтрокаРЦ Из СписокРабочихЦентров Цикл
		СтрокаРЦ.ВариантНаладкиПрошлогоПериода = ВариантНаладкиПрошлогоПериода(СтрокаРЦ.РабочийЦентр);
		ЗаполнитьДаныеСтрокРасписания(СтрокаРЦ.РабочийЦентр);
	КонецЦикла;
	
	// Восстановим текущую строку рабочих центров
	СтруктураПоиска = Новый Структура("РабочийЦентр", ТекущийРЦ);
 	СписокСтрок = СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		Элементы.СписокРабочихЦентров.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
	ЗаполнитьДанныеРабочихЦентров();
	
	ОбновитьИнформацию();
	ОбновитьИнформациюРасписания();
	
	УстановитьОформлениеЦветомВариантовНаладки();
	
	Если ТекущийМЛРасписания <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("МаршрутныйЛист", ТекущийМЛРасписания);
  		СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.РасписаниеРабочихЦентров.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуМЛ(НоваяСтрока, ВыборкаДокументов)

	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументов);
	
	НоваяСтрока.ОкончаниеПоГрафику = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(НоваяСтрока.ОкончаниеПоГрафику, ИнтервалПланирования);
	
	НоваяСтрока.НоменклатураХарактеристика = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
														ВыборкаДокументов.НоменклатураПредставление,
														ВыборкаДокументов.ХарактеристикаПредставление);
														
	НоваяСтрока.ЭтапСпецификация = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЭтапа(
											ВыборкаДокументов.СпецификацияПредставление,
											ВыборкаДокументов.ЭтапПредставление,
											ВыборкаДокументов.МногоэтапныйПроизводственныйПроцесс,
											ВыборкаДокументов.ЭтапВосстановленияБрака);
	
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер, Ложь, Истина);
	НоваяСтрока.НомерМаршрутногоЛиста = НомерНаПечать;
	НоваяСтрока.МаршрутныйЛистСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = '№%1 от %2';
													|en = 'No. %1 from %2'"),
												НомерНаПечать,
												Формат(ВыборкаДокументов.Дата, "ДЛФ=D"));
												
	НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.НомерЗаказа);
	НоваяСтрока.ПредставлениеЗаказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№%1 от %2 (строка %3)';
										|en = 'No. %1 from %2 (line %3)'"),
									НомерЗаказа,
									Формат(ВыборкаДокументов.ДатаЗаказа, "ДЛФ=D"),
									Формат(ВыборкаДокументов.НомерСтрокиЗаказа, "ЧГ="));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНеЗавершеныПредыдущиеЭтапы(ВыполнениеСмежныхЭтапов, СписокДокументов)

	Для каждого СтрокаДокумент Из СписокДокументов Цикл
	
		// - по каким МЛ предыдущие этапы не завершены
		СтруктураПоиска = Новый Структура("Ссылка,ЭтоПредыдущийЭтап", СтрокаДокумент.МаршрутныйЛист, Истина);
  		ВыполнениеПредыдущихЭтапов = ВыполнениеСмежныхЭтапов.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЭтап Из ВыполнениеПредыдущихЭтапов Цикл
			Если СтрокаЭтап.Произведено = 0 Тогда
				СтрокаДокумент.НеЗавершеныПредыдущиеЭтапы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЦветомВариантовНаладки()

	Если НЕ ИспользуютсяВариантыНаладки Тогда
		Возврат
	КонецЕсли;
	
	// Удалим старое оформление
	ОформлениеВариантовНаладки.Очистить();
	
	ЭлементыКУдалению = Новый Массив;
	Для каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = "ЦветОформления" Тогда
			ЭлементыКУдалению.Добавить(ЭлементОформления);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого ЭлементОформления Из ЭлементыКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементОформления);
	КонецЦикла; 
	
	Если ВыбранныйВидРабочегоЦентра.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантыНаладки.ЦветОформления,
	|	ВариантыНаладки.Ссылка
	|ИЗ
	|	Справочник.ВариантыНаладки КАК ВариантыНаладки
	|ГДЕ
	|	ВариантыНаладки.Владелец = &ВидРабочегоЦентра";
	
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦветОформленияОбъекта = Выборка.ЦветОформления.Получить();
		Если ЦветОформленияОбъекта <> Неопределено Тогда
			Если ЦветОформленияОбъекта.ЦветОформленияRGB <> Неопределено Тогда
				ЦветВариантаНаладки = ЦветОформленияОбъекта.ЦветОформленияRGB;
			Иначе
				ЦветВариантаНаладки = ЦветОформленияОбъекта.ЦветОформления;
			КонецЕсли;
		Иначе
			ЦветВариантаНаладки = ЦветГрафикаЗанятостиПоУмолчанию;
		КонецЕсли;
		
		ОформлениеВариантаНаладки = ОформлениеВариантовНаладки.Добавить();
		ОформлениеВариантаНаладки.ВариантНаладки = Выборка.Ссылка;
		ОформлениеВариантаНаладки.ЦветОформления = ЦветВариантаНаладки;
		
		// Оформление МЛ в списке требующих планирования
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ЦветОформления";

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТребуютПланирования.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуютПланирования.ВариантНаладки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Выборка.Ссылка;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветВариантаНаладки);
		
		// Оформление МЛ в списке расписания
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = "ЦветОформления";

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентров.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеРабочихЦентров.ВариантНаладки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Выборка.Ссылка;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветВариантаНаладки);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ВариантНаладкиПрошлогоПериода(РабочийЦентр)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗанятостьВидовРабочихЦентров.ВариантНаладки КАК ВариантНаладки
	|ИЗ
	|	РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК ЗанятостьВидовРабочихЦентров
	|		ПО ЗанятостьВидовРабочихЦентров.Ссылка = РасписаниеРаботыРабочихЦентров.МаршрутныйЛист
	|			И ЗанятостьВидовРабочихЦентров.ДатаИнтервала = &ДатаПрошлогоИнтервала
	|			И ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра = &ВидРабочегоЦентра
	|ГДЕ
	|	РасписаниеРаботыРабочихЦентров.ДатаИнтервала = &ДатаПрошлогоИнтервала
	|	И РасписаниеРаботыРабочихЦентров.РабочийЦентр = &РабочийЦентр
	|	И РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Проведен
	|	И РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ";
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		ДатаПрошлогоИнтервала = НачалоЧаса(ИнтервалПланированияНачало - 1);
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		ДатаПрошлогоИнтервала = НачалоДня(ИнтервалПланированияНачало - 1);
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		ДатаПрошлогоИнтервала = НачалоНедели(ИнтервалПланированияНачало - 1);
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		ДатаПрошлогоИнтервала = НачалоМесяца(ИнтервалПланированияНачало - 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаПрошлогоИнтервала", ДатаПрошлогоИнтервала);
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
	Запрос.УстановитьПараметр("РабочийЦентр", РабочийЦентр);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВариантыНаладки.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ВариантНаладкиПрошлогоПериода = Выборка.ВариантНаладки;
	
	Возврат ВариантНаладкиПрошлогоПериода

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеРабочихЦентров()

	Для каждого СтрокаРЦ Из СписокРабочихЦентров Цикл
		ЗаполнитьДоступноеВремяРабочегоЦентра(СтрокаРЦ.РабочийЦентр);
		ЗаполнитьДанныеРабочегоЦентра(СтрокаРЦ.РабочийЦентр);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьПериодРасписания(Форма)

	ПериодРасписанияС  = '000101010000';
	ПериодРасписанияПо = '000101010000';
	
	Если Форма.ПериодРасписания = "День" Тогда
		ПериодРасписанияС  = Форма.ПериодРасписанияДень;
		ПериодРасписанияПо = КонецДня(ПериодРасписанияС);
	ИначеЕсли Форма.ПериодРасписания = "Произвольный" Тогда
		ПериодРасписанияС  = Форма.ПериодРасписанияПроизвольныйС;
		ПериодРасписанияПо = Форма.ПериодРасписанияПроизвольныйПо;
	КонецЕсли;
	
	Если ПериодРасписанияС = '000101010000' Тогда
		ПериодРасписанияС = Форма.ИнтервалПланированияНачало;
	КонецЕсли; 
	Если ПериодРасписанияПо = '000101010000' Тогда
		ПериодРасписанияПо = Форма.ИнтервалПланированияОкончание;
	КонецЕсли; 
	
	Возврат Новый Структура("Начало,Окончание", ПериодРасписанияС, ПериодРасписанияПо);

КонецФункции

&НаСервере
Процедура ЗаполнитьРаботуВНерабочееВремя(СтрокаРасписание)

	СтрокаРасписание.РаботаВНерабочееВремя.Очистить();
	
	Если СтрокаРасписание.Начало = '000101010000'
		ИЛИ СтрокаРасписание.Окончание = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	НерабочееВремяСНачалаРасписания = Неопределено;
	НерабочееВремяДоОкончанияРасписания = Неопределено;
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
 	ГрафикРаботыРЦ = ГрафикРаботы.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаГрафикРаботы Из ГрафикРаботыРЦ Цикл
		
		Если СтрокаГрафикРаботы.Окончание < СтрокаРасписание.Начало 
			ИЛИ СтрокаГрафикРаботы.Начало > СтрокаРасписание.Окончание Тогда
			Продолжить;
		КонецЕсли;
		
		Если НерабочееВремяСНачалаРасписания = Неопределено Тогда
			Если СтрокаГрафикРаботы.Начало > СтрокаРасписание.Начало Тогда
				НерабочееВремяСНачалаРасписания = СтрокаГрафикРаботы.Начало - СтрокаРасписание.Начало - 1;
			Иначе
				НерабочееВремяСНачалаРасписания = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаГрафикРаботы.Окончание < СтрокаРасписание.Окончание Тогда
			НерабочееВремяДоОкончанияРасписания = СтрокаРасписание.Окончание - СтрокаГрафикРаботы.Окончание - 1;
		Иначе
			НерабочееВремяДоОкончанияРасписания = 0;
		КонецЕсли;
		
		Если НерабочееВремяСНачалаРасписания <> Неопределено 
			И НерабочееВремяДоОкончанияРасписания = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 

	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	Если НерабочееВремяСНачалаРасписания = Неопределено Тогда
		НерабочееВремяСНачалаРасписания = СтрокаРасписание.Окончание - СтрокаРасписание.Начало;
	КонецЕсли; 
	
	Если НерабочееВремяСНачалаРасписания <> Неопределено Тогда
		ДанныеПериода = Новый Структура;
		ДанныеПериода.Вставить("Начало", СтрокаРасписание.Начало);
		ДанныеПериода.Вставить("Окончание", СтрокаРасписание.Начало + НерабочееВремяСНачалаРасписания);
		СтрокаРасписание.РаботаВНерабочееВремя.Добавить(ДанныеПериода);
	КонецЕсли; 
	
	Если НерабочееВремяДоОкончанияРасписания <> Неопределено Тогда
		ДанныеПериода = Новый Структура;
		ДанныеПериода.Вставить("Начало", СтрокаРасписание.Окончание - НерабочееВремяДоОкончанияРасписания);
		ДанныеПериода.Вставить("Окончание", СтрокаРасписание.Окончание);
		СтрокаРасписание.РаботаВНерабочееВремя.Добавить(ДанныеПериода);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостояниеРаботы(СтрокаМЛ)

	СостояниеРаботы = Обработки.ДиспетчированиеПроизводства.СостояниеРаботы(
											СтрокаМЛ.Начало, 
											СтрокаМЛ.Окончание, 
											СтрокаМЛ.ФактическоеОкончание,
											ДатаКонтроля);
											
	СтрокаМЛ.СостояниеРаботы = СостояниеРаботы.СостояниеРаботыСтрокой;
	СтрокаМЛ.СтатусРаботыКлючевогоРЦ = СостояниеРаботы.СостояниеРаботы;

КонецПроцедуры

#КонецОбласти

#Область ГрафикЗанятостиЗаполнение

&НаКлиенте
Процедура ОбновитьГрафикЗанятости(СохранитьНастройки = Ложь)

	Если Элементы.СтраницыУправлениеРасписанием.ТекущаяСтраница = Элементы.СтраницаУправлениеРасписаниемВГрафике Тогда
		ОбновитьГрафикЗанятостиНаСервере(СохранитьНастройки);
		ПриИзмененииГрафикаЗанятости();
	Иначе
		ГрафикЗанятостиАктуален = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикЗанятостиНаСервере(СохранитьНастройки = Ложь)

	ГрафикЗанятости.Очистить();
	ОбластиДанныхГрафикаЗанятости.Очистить();
	НомерСтрокиИндикатораЗагрузки = 0;
	
	РабочиеЦентрыДляКоторыхНужноВывестиГрафик = Новый Массив;
	Если ОтборРасписанияПоРабочемуЦентру = 0 Тогда
		ТекущаяСтрока = Элементы.СписокРабочихЦентров.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = СписокРабочихЦентров.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ТекущиеДанные <> Неопределено Тогда
				РабочиеЦентрыДляКоторыхНужноВывестиГрафик.Добавить(ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для каждого СтрокаРабочийЦентр Из СписокРабочихЦентров Цикл
			РабочиеЦентрыДляКоторыхНужноВывестиГрафик.Добавить(СтрокаРабочийЦентр);
		КонецЦикла; 
	КонецЕсли; 
	
	КоличествоРабочихЦентров = РабочиеЦентрыДляКоторыхНужноВывестиГрафик.Количество();
	Если КоличествоРабочихЦентров = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьОтступСлева = ГрафикЗанятости.Область(,1,,1);
	Если КоличествоРабочихЦентров = 1 Тогда
		ОбластьОтступСлева.ШиринаКолонки = 3;
	ИначеЕсли ПараллельнаяЗагрузка Тогда
		ОбластьОтступСлева.ШиринаКолонки = 8;
	Иначе
		ОбластьОтступСлева.ШиринаКолонки = 16;
	КонецЕсли; 
	
	ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
	
	НомерПервойСтроки = 1;
	Если ПараллельнаяЗагрузка Тогда
		ВысотаОбластиДанных = 10;
		НомерСтрокиДанных = НомерПервойСтроки + 3; // строка начиная с которой выводятся данные
	Иначе
		ВысотаОбластиДанных = 4;
		НомерСтрокиДанных = НомерПервойСтроки + 2; // строка начиная с которой выводятся данные
	КонецЕсли;
	
	Для каждого СтрокаРабочийЦентр Из РабочиеЦентрыДляКоторыхНужноВывестиГрафик Цикл
	
		РабочийЦентр = СтрокаРабочийЦентр.РабочийЦентр;
		
		// строка начиная с которой выводятся данные
		Если ПараллельнаяЗагрузка Тогда
			НомерСтрокиДанных = НомерПервойСтроки + 3; 
		Иначе
			НомерСтрокиДанных = НомерПервойСтроки + 2;
		КонецЕсли;
		
		Если КоличествоРабочихЦентров > 1 Тогда
			Если ПараллельнаяЗагрузка Тогда
				// Название РЦ выводим выше области данных
				ОбластьРЦ = ГрафикЗанятости.Область(НомерПервойСтроки, 1, НомерПервойСтроки + 1, КолонкаНачалаДанных - 1);
			Иначе
				// Название РЦ выводим начиная с области данных
				ОбластьРЦ = ГрафикЗанятости.Область(НомерСтрокиДанных, 1, НомерСтрокиДанных + ВысотаОбластиДанных - 1, КолонкаНачалаДанных - 1);
			КонецЕсли; 
			ОбластьРЦ.Объединить();
			ОбластьРЦ.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьРЦ.Текст = Строка(СтрокаРабочийЦентр.РабочийЦентр);
			ОбластьРЦ.Шрифт = Новый Шрифт(ОбластьРЦ.Шрифт,, 10, Истина);
			ОбластьРЦ.ЦветТекста = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
		КонецЕсли;
		
		НомерСтрокиШкалыВремени = НомерСтрокиДанных + ВысотаОбластиДанных; // строка начиная с которой выводится шкала времени
		
		// Запомним данные текущей области
		ДанныеТекущейОбластиДанных = ОбластиДанныхГрафикаЗанятости.Добавить();
		ДанныеТекущейОбластиДанных.РабочийЦентр = РабочийЦентр;
		ДанныеТекущейОбластиДанных.ВысотаОбластиДанных = ВысотаОбластиДанных;
		ДанныеТекущейОбластиДанных.НомерСтрокиШкалыВремени = НомерСтрокиШкалыВремени;
		ДанныеТекущейОбластиДанных.НомерСтрокиДанных = НомерСтрокиДанных;
		ДанныеТекущейОбластиДанных.КолонкаНачалаДанных = КолонкаНачалаДанных;
		ДанныеТекущейОбластиДанных.МаксимальнаяЗагрузкаНорма = СтрокаРабочийЦентр.МаксимальнаяЗагрузка;
		
		ВывестиГрафикЗанятостиРабочегоЦентра(ДанныеТекущейОбластиДанных, ВыбранныйПериодРасписания);
		
		НомерПервойСтроки = НомерПервойСтроки + ВысотаОбластиДанных + 6;
		
	КонецЦикла; 
	
	Если СохранитьНастройки Тогда
		СохранитьПараметрыОтбора();
	КонецЕсли;
	
	ГрафикЗанятостиАктуален = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиГрафикЗанятостиРабочегоЦентра(ДанныеТекущейОбластиДанных, ВыбранныйПериодРасписания)

	РабочийЦентр = ДанныеТекущейОбластиДанных.РабочийЦентр;
	ВысотаОбластиДанных = ДанныеТекущейОбластиДанных.ВысотаОбластиДанных;
	НомерСтрокиШкалыВремени = ДанныеТекущейОбластиДанных.НомерСтрокиШкалыВремени;
	НомерСтрокиДанных = ДанныеТекущейОбластиДанных.НомерСтрокиДанных;
	КолонкаНачалаДанных = ДанныеТекущейОбластиДанных.КолонкаНачалаДанных;
	МаксимальнаяЗагрузкаНорма = ДанныеТекущейОбластиДанных.МаксимальнаяЗагрузкаНорма;

	// Сформируем список строк для которых нужно вывести график
	// Список строк должен быть в порядке следования МЛ (нельзя использовать НайтиСтроки).
	#Область ФормированиеСпискаСтрок
	ВыбранноеРасписание = Новый Массив;
	Для каждого СтрокаРасписание Из РасписаниеРабочихЦентров Цикл
		
		// МЛ не соответствует установленному периоду
		Если СтрокаРасписание.Начало > ВыбранныйПериодРасписания.Окончание
			ИЛИ СтрокаРасписание.Окончание < ВыбранныйПериодРасписания.Начало 
			ИЛИ СтрокаРасписание.Начало = '000101010000'
			ИЛИ СтрокаРасписание.Окончание = '000101010000' 
			ИЛИ СтрокаРасписание.РабочийЦентр <> РабочийЦентр Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРасписание.НачалоГрафикаЗанятости = 0;
		СтрокаРасписание.ОкончаниеГрафикаЗанятости = 0;
		
		ВыбранноеРасписание.Добавить(СтрокаРасписание);
		
	КонецЦикла;
	#КонецОбласти
	
	// Сформируем таблицу загрузки
	#Область ТаблицаЗагрузка
	ТаблицаЗагрузка = Новый ТаблицаЗначений;
	ТаблицаЗагрузка.Колонки.Добавить("Начало");
	ТаблицаЗагрузка.Колонки.Добавить("Окончание");
	ТаблицаЗагрузка.Колонки.Добавить("Загрузка");
	ТаблицаЗагрузка.Колонки.Добавить("Границы");
	Для каждого СтрокаРасписание Из ВыбранноеРасписание Цикл
		
		Если СтрокаРасписание.Загрузка = 0 Тогда
			// Нулевая загрузка не может повлиять на максимальную загрузку
			Продолжить;
		КонецЕсли;
		
		ДанныеПериода = Новый Структура;
		ДанныеПериода.Вставить("Начало", СтрокаРасписание.Начало);
		ДанныеПериода.Вставить("Окончание", КонецМинуты(СтрокаРасписание.Окончание));
		ДанныеПериода.Вставить("Загрузка", СтрокаРасписание.Загрузка);
		ПериодыЗагрузки = Новый Массив;
		ПериодыЗагрузки.Добавить(ДанныеПериода);
		
		// Граница загрузки по умолчанию, без учета существующей загрузки
		ГраницаЗагрузки = Новый Структура;
		ГраницаЗагрузки.Вставить("Начало", 0);
		ГраницаЗагрузки.Вставить("Конец", СтрокаРасписание.Загрузка);
		ГраницыЗагрузкиПоМЛ = Новый Массив;
		ГраницыЗагрузкиПоМЛ.Добавить(ГраницаЗагрузки);
		
		// Нужно таблицу загрузки дополнить или разбить на нужные периоды
		ТекущийИндекс = 0;
		КоличествоПериодов = ПериодыЗагрузки.Количество() - 1;
		Пока Истина Цикл
			Если ТекущийИндекс > КоличествоПериодов Тогда
				Прервать;
			КонецЕсли;
			ДанныеПериода = ПериодыЗагрузки[ТекущийИндекс];
			
			СтрокиЗагрузиКДобавлению = Новый Массив;
			ДобавитьГраницыЗагрузкиПоМЛ = Новый Массив;
			
			// Найдем пересечение с уже известной загрузкой и увеличим ее
			Для каждого ДанныеЗагрузки Из ТаблицаЗагрузка Цикл
				
				Если ДанныеПериода.Окончание < ДанныеЗагрузки.Начало
					ИЛИ ДанныеПериода.Начало > ДанныеЗагрузки.Окончание Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДанныеПериода.Начало > ДанныеЗагрузки.Начало
					И ДанныеПериода.Начало <= ДанныеЗагрузки.Окончание
					И ДанныеПериода.Окончание > ДанныеЗагрузки.Окончание Тогда
					
					// ДанныеЗагрузки: ------***
					// ДанныеПериода:        ***++++++.
					
					// Период ***
					ДанныеКДобавлению = Новый Структура;
					ДанныеКДобавлению.Вставить("Начало", ДанныеПериода.Начало);
					ДанныеКДобавлению.Вставить("Окончание", ДанныеЗагрузки.Окончание);
					ДанныеКДобавлению.Вставить("Загрузка", ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка);
					ДанныеКДобавлению.Вставить("Границы", КопияГраницЗагрузки(ДанныеЗагрузки.Границы));
					ДанныеКДобавлению.Вставить("СодержитЗагрузкуМЛ"); // чтобы добавить границы загрузки
					СтрокиЗагрузиКДобавлению.Добавить(ДанныеКДобавлению);
					
					// Период ------
					ДанныеЗагрузки.Окончание = ДанныеПериода.Начало - 1;
					
					// Период ++++++
					ДанныеПериода.Начало = КонецМинуты(ДанныеЗагрузки.Окончание) + 1;
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				ИначеЕсли ДанныеПериода.Начало > ДанныеЗагрузки.Начало
					И ДанныеПериода.Окончание < ДанныеЗагрузки.Окончание Тогда
					
					// ДанныеЗагрузки: ------***++++++
					// ДанныеПериода:        ***.
					
					// Период ***
					ДанныеПериода.Загрузка = ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка;
					ДанныеПериода.Вставить("Границы", КопияГраницЗагрузки(ДанныеЗагрузки.Границы));
					
					// Период ------
					ДанныеЗагрузки.Окончание = ДанныеПериода.Начало - 1;
					
					// Период ++++++
					ДанныеКДобавлению = Новый Структура;
					ДанныеКДобавлению.Вставить("Начало", КонецМинуты(ДанныеПериода.Окончание) + 1);
					ДанныеКДобавлению.Вставить("Окончание", ДанныеЗагрузки.Окончание);
					ДанныеКДобавлению.Вставить("Загрузка", ДанныеЗагрузки.Загрузка);
					ДанныеКДобавлению.Вставить("Границы", КопияГраницЗагрузки(ДанныеЗагрузки.Границы));
					СтрокиЗагрузиКДобавлению.Добавить(ДанныеКДобавлению);
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				ИначеЕсли ДанныеПериода.Начало < ДанныеЗагрузки.Начало 
					И ДанныеПериода.Окончание >= ДанныеЗагрузки.Начало 
					И ДанныеПериода.Окончание < ДанныеЗагрузки.Окончание Тогда
					
					// ДанныеЗагрузки:       ***++++++
					// ДанныеПериода:  ------***.
					
					// Период ***
					ДанныеЗагрузки.Загрузка = ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка;
					ДанныеЗагрузки.Окончание = ДанныеПериода.Окончание;
					
					ДобавитьГраницыЗагрузкиПоМЛ.Добавить(ДанныеЗагрузки);
					
					// Период ++++++
					ДанныеКДобавлению = Новый Структура;
					ДанныеКДобавлению.Вставить("Начало", КонецМинуты(ДанныеПериода.Окончание) + 1);
					ДанныеКДобавлению.Вставить("Окончание", ДанныеЗагрузки.Окончание);
					ДанныеКДобавлению.Вставить("Загрузка", ДанныеЗагрузки.Загрузка);
					ДанныеКДобавлению.Вставить("Границы", КопияГраницЗагрузки(ДанныеЗагрузки.Границы));
					СтрокиЗагрузиКДобавлению.Добавить(ДанныеКДобавлению);
					
					// Период ------
					ДанныеПериода.Окончание = ДанныеЗагрузки.Начало - 1;
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				ИначеЕсли ДанныеПериода.Начало = ДанныеЗагрузки.Начало 
					И ДанныеПериода.Окончание = ДанныеЗагрузки.Окончание Тогда
					
					// ДанныеЗагрузки: ***
					// ДанныеПериода:  ***
					
					ДанныеЗагрузки.Загрузка = ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка;
					
					ДобавитьГраницыЗагрузкиПоМЛ.Добавить(ДанныеЗагрузки);
					
					ДанныеПериода.Начало = '000101010000';
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				ИначеЕсли ДанныеПериода.Начало < ДанныеЗагрузки.Начало 
					И ДанныеПериода.Окончание > ДанныеЗагрузки.Окончание Тогда
					
					// ДанныеЗагрузки:       ***
					// ДанныеПериода:  ------***++++++.
					
					// Период ------
					ДанныеНовогоПериода = Новый Структура("Начало,Окончание,Загрузка", 
											ДанныеПериода.Начало, ДанныеЗагрузки.Начало - 1, ДанныеПериода.Загрузка);
					ПериодыЗагрузки.Добавить(ДанныеНовогоПериода);
					
					// Период ++++++
					ДанныеНовогоПериода = Новый Структура("Начало,Окончание,Загрузка", 
											КонецМинуты(ДанныеЗагрузки.Окончание) + 1, ДанныеПериода.Окончание, ДанныеПериода.Загрузка);
					ПериодыЗагрузки.Добавить(ДанныеНовогоПериода);
					
					// Период ***
					ДанныеЗагрузки.Загрузка = ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка;
					ДанныеЗагрузки.Начало = ДанныеЗагрузки.Начало;
					ДанныеЗагрузки.Окончание = ДанныеЗагрузки.Окончание;
					
					ДобавитьГраницыЗагрузкиПоМЛ.Добавить(ДанныеЗагрузки);
					
					КоличествоПериодов = КоличествоПериодов + 2;
					
					ДанныеПериода.Начало = '000101010000';
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				ИначеЕсли ДанныеПериода.Начало = ДанныеЗагрузки.Начало 
					И ДанныеПериода.Окончание > ДанныеЗагрузки.Окончание Тогда
					
					// ДанныеЗагрузки: ***
					// ДанныеПериода:  ***++++++
					
					// Период ***
					ДанныеЗагрузки.Загрузка = ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка;
					
					ДобавитьГраницыЗагрузкиПоМЛ.Добавить(ДанныеЗагрузки);
					
					// Период ++++++
					ДанныеПериода.Начало = КонецМинуты(ДанныеЗагрузки.Окончание) + 1; 
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				ИначеЕсли ДанныеПериода.Начало < ДанныеЗагрузки.Начало 
					И ДанныеПериода.Окончание = ДанныеЗагрузки.Окончание Тогда
					
					// ДанныеЗагрузки:       ***
					// ДанныеПериода:  ------***
					
					// Период ------
					ДанныеПериода.Окончание = ДанныеЗагрузки.Начало - 1; 
					
					// Период ***
					ДанныеЗагрузки.Загрузка = ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка;
					
					ДобавитьГраницыЗагрузкиПоМЛ.Добавить(ДанныеЗагрузки);
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				ИначеЕсли ДанныеПериода.Начало = ДанныеЗагрузки.Начало 
					И ДанныеПериода.Окончание < ДанныеЗагрузки.Окончание Тогда
					
					// ДанныеЗагрузки: ***++++++
					// ДанныеПериода:  ***
					
					// Период ++++++
					ДанныеКДобавлению = Новый Структура;
					ДанныеКДобавлению.Вставить("Начало", КонецМинуты(ДанныеПериода.Окончание) + 1);
					ДанныеКДобавлению.Вставить("Окончание", ДанныеЗагрузки.Окончание);
					ДанныеКДобавлению.Вставить("Загрузка", ДанныеЗагрузки.Загрузка);
					ДанныеКДобавлению.Вставить("Границы", КопияГраницЗагрузки(ДанныеЗагрузки.Границы));
					СтрокиЗагрузиКДобавлению.Добавить(ДанныеКДобавлению);
					
					// Период ***
					ДанныеЗагрузки.Загрузка = ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка;
					ДанныеЗагрузки.Окончание = ДанныеПериода.Окончание; 
					
					ДобавитьГраницыЗагрузкиПоМЛ.Добавить(ДанныеЗагрузки);
					
					ДанныеПериода.Начало = '000101010000';
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				ИначеЕсли ДанныеПериода.Окончание = ДанныеЗагрузки.Окончание 
					И ДанныеЗагрузки.Начало < ДанныеПериода.Начало Тогда
					
					// ДанныеЗагрузки: ------***
					// ДанныеПериода:        ***
					
					// Период ------
					ДанныеКДобавлению = Новый Структура;
					ДанныеКДобавлению.Вставить("Начало", ДанныеЗагрузки.Начало);
					ДанныеКДобавлению.Вставить("Окончание", ДанныеПериода.Начало - 1);
					ДанныеКДобавлению.Вставить("Загрузка", ДанныеЗагрузки.Загрузка);
					ДанныеКДобавлению.Вставить("Границы", КопияГраницЗагрузки(ДанныеЗагрузки.Границы));
					СтрокиЗагрузиКДобавлению.Добавить(ДанныеКДобавлению);
					
					// Период ***
					ДанныеЗагрузки.Загрузка = ДанныеПериода.Загрузка + ДанныеЗагрузки.Загрузка;
					ДанныеЗагрузки.Начало = ДанныеПериода.Начало; 
					
					ДобавитьГраницыЗагрузкиПоМЛ.Добавить(ДанныеЗагрузки);
					
					ДанныеПериода.Начало = '000101010000';
					
					СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, ДанныеЗагрузки.Границы);
					
				Иначе
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Не определен способ нахождения максимальной загрузки.
														|Данные загрузки: с %1 по %2
														|Данные периода: с %3 по %4';
														|en = 'Max load calculation method is not determined.
														|Load data: from %1 to %2
														|Period data: from %3 to %4'"),
											ДанныеЗагрузки.Начало,
											ДанныеЗагрузки.Окончание,
											ДанныеПериода.Начало,
											ДанныеПериода.Окончание);
											
					ВызватьИсключение ТекстОшибки;
					
				КонецЕсли;
				
				Если ДанныеПериода.Начало > ДанныеПериода.Окончание
					ИЛИ ДанныеПериода.Начало = '000101010000' Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ДанныеКДобавлению Из СтрокиЗагрузиКДобавлению Цикл
				ДанныеЗагрузки = ТаблицаЗагрузка.Добавить();
				ЗаполнитьЗначенияСвойств(ДанныеЗагрузки, ДанныеКДобавлению);
				Если ДанныеКДобавлению.Свойство("СодержитЗагрузкуМЛ") Тогда
					ДобавитьГраницыЗагрузкиПоМЛ.Добавить(ДанныеЗагрузки);
				КонецЕсли; 
			КонецЦикла; 
			
			ТекущийИндекс = ТекущийИндекс + 1
			
		КонецЦикла; 
		
		// Добавим оставшиеся периоды, которые не пересеклись 
		Для каждого ДанныеПериода Из ПериодыЗагрузки Цикл
			Если ДанныеПериода.Начало <= ДанныеПериода.Окончание 
				И ДанныеПериода.Начало <> '000101010000' Тогда
				
				ДанныеЗагрузки = ТаблицаЗагрузка.Добавить();
				ДанныеЗагрузки.Начало = ДанныеПериода.Начало;
				ДанныеЗагрузки.Окончание = КонецМинуты(ДанныеПериода.Окончание);
				ДанныеЗагрузки.Загрузка = ДанныеПериода.Загрузка;
				ДанныеЗагрузки.Границы = КопияГраницЗагрузки(ГраницыЗагрузкиПоМЛ);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого ДанныеЗагрузки Из ДобавитьГраницыЗагрузкиПоМЛ Цикл
			ГраницыКДобавлению = КопияГраницЗагрузки(ГраницыЗагрузкиПоМЛ);
			Для каждого ГраницаЗагрузки Из ГраницыКДобавлению Цикл
				ДанныеЗагрузки.Границы.Добавить(ГраницаЗагрузки);
			КонецЦикла; 
		КонецЦикла; 
		
		СтрокаРасписание.ГраницыЗагрузки.ЗагрузитьЗначения(ГраницыЗагрузкиПоМЛ);
		
	КонецЦикла; 
	
	// Определим максимальную загрузку
	МаксимальнаяЗагрузка = МаксимальнаяЗагрузкаНорма;
	Для каждого ДанныеЗагрузки Из ТаблицаЗагрузка Цикл
		МаксимальнаяЗагрузка = Макс(ДанныеЗагрузки.Загрузка, МаксимальнаяЗагрузка);
	КонецЦикла;
	#КонецОбласти
		
	// Вывод шкалы времени и нерабочего времени
	#Область ВыводШкалыВремениИНерабочегоВремени
	ТекущаяДата = ВыбранныйПериодРасписания.Начало;
	ТекущийДень = '000101010000';
	НомерКолонки = КолонкаНачалаДанных;
	КолонкаОкончанияДанных = НомерКолонки;
	ГраницыШкалыВремени = Новый Соответствие;
	СтруктураПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
 	ГрафикРаботыРЦ = ГрафикРаботы.Выгрузить(СтруктураПоиска);
	Пока ТекущаяДата <= ВыбранныйПериодРасписания.Окончание Цикл
		
		ГраницыШкалыВремени.Вставить(НомерКолонки, Новый Структура("Начало,Окончание", ТекущаяДата, ТекущаяДата + МасштабШкалыВремени - 1));
		ГраницыШкалыВремени.Вставить(НомерКолонки + 1, Новый Структура("Начало,Окончание", ТекущаяДата + МасштабШкалыВремени - 1, ТекущаяДата + МасштабШкалыВремени*2 - 1));
		
		КолонкаОкончанияДанных = НомерКолонки + 1;
		
		ТекущаяДатаВключенаВГрафик1 = Ложь;
		ТекущаяДатаВключенаВГрафик2 = Ложь;
		ТекущаяДата2 = ТекущаяДата + МасштабШкалыВремени;
		Для каждого СтрокаГрафикРаботыРЦ Из ГрафикРаботыРЦ Цикл
			Если ТекущаяДата >= НачалоЧаса(СтрокаГрафикРаботыРЦ.Начало)
				И ТекущаяДата <= СтрокаГрафикРаботыРЦ.Окончание Тогда
				ТекущаяДатаВключенаВГрафик1 = Истина;
			КонецЕсли;
			Если ТекущаяДата2 >= НачалоЧаса(СтрокаГрафикРаботыРЦ.Начало)
				И ТекущаяДата2 <= СтрокаГрафикРаботыРЦ.Окончание Тогда
				ТекущаяДатаВключенаВГрафик2 = Истина;
			КонецЕсли;
			Если ТекущаяДатаВключенаВГрафик1 И ТекущаяДатаВключенаВГрафик2 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТекущаяДатаВключенаВГрафик1 Тогда
			Для НомерСтроки = НомерСтрокиДанных По НомерСтрокиШкалыВремени - 1 Цикл
				ОбластьНедоступноеВремя = ГрафикЗанятости.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				ОбластьНедоступноеВремя.Узор = ТипУзораТабличногоДокумента.Узор12;
				ОбластьНедоступноеВремя.ЦветУзора = Новый Цвет(216, 216, 216); //WebЦвета.ТусклоСерый;
				
				Расшифровка = Новый Структура;
				Расшифровка.Вставить("ВидОбласти", "НерабочееВремя");
				ОбластьНедоступноеВремя.Расшифровка = Расшифровка;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ТекущаяДатаВключенаВГрафик2 Тогда
			Для НомерСтроки = НомерСтрокиДанных По НомерСтрокиШкалыВремени - 1 Цикл
				ОбластьНедоступноеВремя = ГрафикЗанятости.Область(НомерСтроки, НомерКолонки + 1, НомерСтроки, НомерКолонки + 1);
				ОбластьНедоступноеВремя.Узор = ТипУзораТабличногоДокумента.Узор12;
				ОбластьНедоступноеВремя.ЦветУзора = Новый Цвет(216, 216, 216); //WebЦвета.ТусклоСерый;
				
				Расшифровка = Новый Структура;
				Расшифровка.Вставить("ВидОбласти", "НерабочееВремя");
				ОбластьНедоступноеВремя.Расшифровка = Расшифровка;
			КонецЦикла;
		КонецЕсли;
		
		// Установим ширину шкалы
		ОбластьШкала = ГрафикЗанятости.Область(,НомерКолонки,,НомерКолонки + 1);
		ОбластьШкала.ШиринаКолонки = 3;
		
		// Установим высоту области, в которой выводятся деления
		ОбластьШкала = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени,, НомерСтрокиШкалыВремени,);
		ОбластьШкала.ВысотаСтроки = 3;
		ОбластьШкала = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени + 1,, НомерСтрокиШкалыВремени + 1,);
		ОбластьШкала.ВысотаСтроки = 3;
		
		// Оформим деления шкалы
		ОбластьДелениеШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени, НомерКолонки, НомерСтрокиШкалыВремени, НомерКолонки + 1);
		ОбластьДелениеШкалы.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
		
		ОбластьДелениеШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени, НомерКолонки, НомерСтрокиШкалыВремени + 1, НомерКолонки);
		ОбластьДелениеШкалы.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		ОбластьДелениеШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени, НомерКолонки + 1, НомерСтрокиШкалыВремени, НомерКолонки + 1);
		ОбластьДелениеШкалы.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		// Оформим время шкалы - время выводится через 1 деление
		ОбластьВремяШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени + 2, НомерКолонки, НомерСтрокиШкалыВремени + 2, НомерКолонки);
		ОбластьВремяШкалы.Текст = Формат(ТекущаяДата, "ДФ=ЧЧ:мм");
		
		Расшифровка = Новый Структура;
		Расшифровка.Вставить("ВидОбласти", "ОтметкаШкалыВремени");
		Расшифровка.Вставить("ЗначениеОтметки", ТекущаяДата);
		
		Если ПараллельнаяЗагрузка Тогда
			СведенияОЗагрузкеВКолонке = СведенияОЗагрузкеВКолонке(
												НомерКолонки, 
												ТаблицаЗагрузка, 
												ГраницыШкалыВремени, 
												?(ТекущаяДатаВключенаВГрафик1, МаксимальнаяЗагрузкаНорма, 0));
												
			Расшифровка.Вставить("Загрузка", СведенияОЗагрузкеВКолонке.Загрузка);
			Расшифровка.Вставить("ДоступнаяЗагрузка", СведенияОЗагрузкеВКолонке.ДоступнаяЗагрузка);
		КонецЕсли; 
		
		ОбластьВремяШкалы.Расшифровка = Расшифровка;
		
		// Расшифровка следующего деления
		ОбластьВремяШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени + 2, НомерКолонки + 1, НомерСтрокиШкалыВремени + 2, НомерКолонки + 1);
		Расшифровка = Новый Структура;
		Расшифровка.Вставить("ВидОбласти", "ОтметкаШкалыВремени");
		Расшифровка.Вставить("ЗначениеОтметки", ТекущаяДата2);
		
		Если ПараллельнаяЗагрузка Тогда
			СведенияОЗагрузкеВКолонке = СведенияОЗагрузкеВКолонке(
												НомерКолонки + 1, 
												ТаблицаЗагрузка, 
												ГраницыШкалыВремени, 
												?(ТекущаяДатаВключенаВГрафик2, МаксимальнаяЗагрузкаНорма, 0));
												
			Расшифровка.Вставить("Загрузка", СведенияОЗагрузкеВКолонке.Загрузка);
			Расшифровка.Вставить("ДоступнаяЗагрузка", СведенияОЗагрузкеВКолонке.ДоступнаяЗагрузка);
		КонецЕсли; 
		
		ОбластьВремяШкалы.Расшифровка = Расшифровка;
		
		Если ТекущийДень <> НачалоДня(ТекущаяДата) Тогда
			// Отметим начало нового дня
			ТекущийДень = НачалоДня(ТекущаяДата);
			ОбластьВремяШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени + 3, НомерКолонки, НомерСтрокиШкалыВремени + 3, НомерКолонки);
			ОбластьВремяШкалы.Текст = Формат(ТекущийДень, "ДФ='dd.MM.yyyy (ддд)'");
			ОбластьВремяШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалыВремени + 2, НомерКолонки, НомерСтрокиШкалыВремени + 3, НомерКолонки);
			ОбластьВремяШкалы.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		КонецЕсли; 
		
		НомерКолонки = НомерКолонки + 2;
		ТекущаяДата = ТекущаяДата + МасштабШкалыВремени * 2;
		
	КонецЦикла;
	
	ДанныеТекущейОбластиДанных.КолонкаОкончанияДанных = КолонкаОкончанияДанных;
	#КонецОбласти
	
	// Вывод шкалы загрузки 
	#Область ВыводШкалыЗагрузки
	Если ПараллельнаяЗагрузка Тогда
		
		НомерКолонки = КолонкаНачалаДанных - 1;
		ОбластьДелениеШкалы = ГрафикЗанятости.Область(НомерСтрокиДанных - 1, НомерКолонки, НомерСтрокиДанных - 1, НомерКолонки);
		ОбластьДелениеШкалы.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка, %1';
																								|en = 'Load, %1'"), ЕдиницаИзмеренияЗагрузки);
		ОбластьДелениеШкалы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
		
		// Установим ширину шкалы
		ОбластьШкала = ГрафикЗанятости.Область(,НомерКолонки,,НомерКолонки);
		ОбластьШкала.ШиринаКолонки = 1;
		ПроцентЗагрузки = 10;
		Для НомерСтроки = 1 По ВысотаОбластиДанных Цикл
			НомерСтрокиШкалы = НомерСтрокиШкалыВремени - НомерСтроки;
			
			ЗначениеТекущейШкалы = МаксимальнаяЗагрузка * ПроцентЗагрузки / 100;
			
			ОбластьДелениеШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалы, НомерКолонки, НомерСтрокиШкалы + 1, НомерКолонки);
			ОбластьДелениеШкалы.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьДелениеШкалы.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			ОбластьДелениеШкалы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			
			ОбластьДелениеШкалы = ГрафикЗанятости.Область(НомерСтрокиШкалы, НомерКолонки - 1, НомерСтрокиШкалы, НомерКолонки - 1);
			ОбластьДелениеШкалы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьДелениеШкалы.Текст = Формат(ЗначениеТекущейШкалы, "ЧДЦ=1; ЧГ=0");
			ОбластьДелениеШкалы.Расшифровка = ЗначениеТекущейШкалы;
			ОбластьДелениеШкалы.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
			Если ЗначениеТекущейШкалы > МаксимальнаяЗагрузкаНорма Тогда
				ОбластьДелениеШкалы.ЦветТекста = ЦветШкалыПревышающейМаксимальную;
			КонецЕсли;
			
			ПроцентЗагрузки = ПроцентЗагрузки + 10;
		КонецЦикла; 
	КонецЕсли; 
	#КонецОбласти
	
	// Вывод маршрутных листов
	#Область ВыводМЛ
	ГраницаОбластиМЛ = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	// Запомним в какие области вывели МЛ
	ТаблицаОбластиМЛ = Новый ТаблицаЗначений;
	ТаблицаОбластиМЛ.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ТаблицаОбластиМЛ.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ТаблицаОбластиМЛ.Колонки.Добавить("ПограничнаяОбласть", Новый ОписаниеТипов("Булево"));
	ТаблицаОбластиМЛ.Индексы.Добавить("НомерСтроки");
	Для каждого СтрокаРасписание Из ВыбранноеРасписание Цикл
		
		Если СтрокаРасписание.Начало > ВыбранныйПериодРасписания.Окончание
			ИЛИ СтрокаРасписание.Окончание < ВыбранныйПериодРасписания.Начало 
			ИЛИ СтрокаРасписание.Начало = '000101010000'
			ИЛИ СтрокаРасписание.Окончание = '000101010000' Тогда
			// МЛ не соответствует установленному периоду или рабочему центру
			Продолжить;
		КонецЕсли;
		
		Если ПараллельнаяЗагрузка И СтрокаРасписание.Загрузка = 0 Тогда
			// Нулевую загрузку невозможно показать на графике
			Продолжить;
		КонецЕсли;
		
		// Определим цвет оформления
		Если ИспользуютсяВариантыНаладки Тогда
			СтруктураПоиска = Новый Структура("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
   			СписокСтрок = ОформлениеВариантовНаладки.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				ЦветОформления = СписокСтрок[0].ЦветОформления;
			Иначе
				ЦветОформления = ЦветГрафикаЗанятостиПоУмолчанию;
			КонецЕсли; 
		Иначе
			ЦветОформления = ЦветГрафикаЗанятостиПоУмолчанию;
		КонецЕсли; 
		
		// Расшифровка области
		Расшифровка = Новый Структура("ЭтапСпецификация,НоменклатураХарактеристика,ВариантНаладкиПредставление,
										|МаршрутныйЛист,МаршрутныйЛистСтрока,НомерМаршрутногоЛиста,НазначениеПредставление,
										|Начало,Окончание,Количество,Загрузка,
										|ВремяРаботыИзмененоПользователем,ВремяРаботы,ОбъемРабот");
		ЗаполнитьЗначенияСвойств(Расшифровка, СтрокаРасписание);
		
		НачалоСУчетомПереналадки = СтрокаРасписание.Начало + ?(СтрокаРасписание.ВремяПереналадки <> 0, СтрокаРасписание.ВремяПереналадки + 1, 0);
		
		Расшифровка.Начало = НачалоСУчетомПереналадки;
		
		// Определим колонки начала и окончания области в которой нужно вывести МЛ
		ГраницыПериода = ГраницыПериодаНаГрафикеЗанятости(
									НачалоСУчетомПереналадки, 
									СтрокаРасписание.Окончание,
									ВыбранныйПериодРасписания);
		
		НачалоГрафикаЗанятости    = ГраницыПериода.Начало;
		ОкончаниеГрафикаЗанятости = ГраницыПериода.Окончание;
		
		ПоказатьПереналадку = Ложь;
		Если СтрокаРасписание.ВремяПереналадки <> 0 Тогда
			НачалоПереналадки = Макс(СтрокаРасписание.Начало, ВыбранныйПериодРасписания.Начало);
			НачалоПереналадкиВГрафикеЗанятости = Окр((НачалоПереналадки - ВыбранныйПериодРасписания.Начало) / МасштабШкалыВремени) + КолонкаНачалаДанных;
			
			ОкончаниеПереналадки = Мин(СтрокаРасписание.Начало + СтрокаРасписание.ВремяПереналадки, ВыбранныйПериодРасписания.Окончание);
			ОкончаниеПереналадкиВГрафикеЗанятости = Окр((ОкончаниеПереналадки - ВыбранныйПериодРасписания.Начало) / МасштабШкалыВремени) + КолонкаНачалаДанных - 1;
			
			ОкончаниеПереналадкиВГрафикеЗанятости = Макс(НачалоПереналадкиВГрафикеЗанятости, ОкончаниеПереналадкиВГрафикеЗанятости);
			НачалоПереналадкиВГрафикеЗанятости = Мин(НачалоПереналадкиВГрафикеЗанятости, ОкончаниеПереналадкиВГрафикеЗанятости);
			
			Если НачалоПереналадкиВГрафикеЗанятости < НачалоГрафикаЗанятости Тогда
				ПоказатьПереналадку = Истина;
			КонецЕсли; 
			ОкончаниеПереналадкиВГрафикеЗанятости = Макс(НачалоПереналадкиВГрафикеЗанятости, Мин(ОкончаниеПереналадкиВГрафикеЗанятости, ОкончаниеГрафикаЗанятости - 1));
		КонецЕсли;
		
		Если ПоказатьПереналадку Тогда
			ОбластьПереналадка = ГрафикЗанятости.Область(НомерСтрокиДанных, 
												НачалоПереналадкиВГрафикеЗанятости, 
												НомерСтрокиДанных + ВысотаОбластиДанных - 1, 
												ОкончаниеПереналадкиВГрафикеЗанятости);
												
			ОбластьПереналадка.Узор = ТипУзораТабличногоДокумента.Узор13;									
			ОбластьПереналадка.ЦветУзора = ЦветОформления;
			
			РасшифровкаПереналадки = Новый Структура;
			РасшифровкаПереналадки.Вставить("ВидОбласти", "Переналадка");
			РасшифровкаПереналадки.Вставить("ВремяПереналадки", СтрокаРасписание.ВремяПереналадки);
			РасшифровкаПереналадки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладкиПредставление);
			РасшифровкаПереналадки.Вставить("Начало", СтрокаРасписание.Начало);
			РасшифровкаПереналадки.Вставить("Окончание", СтрокаРасписание.Начало + СтрокаРасписание.ВремяПереналадки);
			ОбластьПереналадка.Расшифровка = РасшифровкаПереналадки;
			ОбластьПереналадка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		КонецЕсли; 
		
		РаботаВНерабочееВремя = Новый Массив;
		Для каждого ЭлДанныеПериода Из СтрокаРасписание.РаботаВНерабочееВремя Цикл
			ДанныеПериода = ЭлДанныеПериода.Значение;
			Если ДанныеПериода.Окончание < ВыбранныйПериодРасписания.Начало
				ИЛИ ДанныеПериода.Начало > ВыбранныйПериодРасписания.Окончание Тогда
				Продолжить;
			КонецЕсли;
			ГраницыПериода = ГраницыПериодаНаГрафикеЗанятости(
										ДанныеПериода.Начало, 
										ДанныеПериода.Окончание,
										ВыбранныйПериодРасписания);
										
			РаботаВНерабочееВремя.Добавить(ГраницыПериода);
		КонецЦикла; 
		
		// Определим строки начала и окончания области в которой нужно вывести МЛ
		Если ПараллельнаяЗагрузка Тогда
			
			ГраницаЗагрузки = СтрокаРасписание.ГраницыЗагрузки.Получить(0).Значение;
			НомерШкалыЗагрузки = Цел(ГраницаЗагрузки.Начало * 10 / МаксимальнаяЗагрузка) + ?((ГраницаЗагрузки.Начало * 10 % МаксимальнаяЗагрузка) <> ГраницаЗагрузки.Конец, 1, 0);
			ПерваяСтрокаГраницы = НомерСтрокиДанных + ВысотаОбластиДанных - НомерШкалыЗагрузки;
			
			ГраницаЗагрузки = СтрокаРасписание.ГраницыЗагрузки.Получить(СтрокаРасписание.ГраницыЗагрузки.Количество() - 1).Значение;
			НомерШкалыЗагрузки = Цел(ГраницаЗагрузки.Начало * 10 / МаксимальнаяЗагрузка) + ?((ГраницаЗагрузки.Начало * 10 % МаксимальнаяЗагрузка) <> ГраницаЗагрузки.Конец, 1, 0);
			ПоследняяСтрокаГраницы = НомерСтрокиДанных + ВысотаОбластиДанных - НомерШкалыЗагрузки;
			
			Для каждого ЭлГраницаЗагрузки Из СтрокаРасписание.ГраницыЗагрузки Цикл
				
				ГраницаЗагрузки = ЭлГраницаЗагрузки.Значение;
				
				// Идем снизу вверх
				НомерШкалыЗагрузки = Цел(ГраницаЗагрузки.Конец * 10 / МаксимальнаяЗагрузка) + ?((ГраницаЗагрузки.Конец * 10 % МаксимальнаяЗагрузка) > 0, 1, 0);
				ПерваяСтрока = НомерСтрокиДанных + ВысотаОбластиДанных - НомерШкалыЗагрузки;
				
				НомерШкалыЗагрузки = Цел(ГраницаЗагрузки.Начало * 10 / МаксимальнаяЗагрузка) + ?((ГраницаЗагрузки.Начало * 10 % МаксимальнаяЗагрузка) <> ГраницаЗагрузки.Конец, 1, 0);
				ПоследняяСтрока = НомерСтрокиДанных + ВысотаОбластиДанных - НомерШкалыЗагрузки;
				
				ЗагрузкаВыведена = Ложь;
				
				Для НомерСтроки = ПерваяСтрока По ПоследняяСтрока Цикл
					
					ВывестиМЛВСтроке = Ложь;
					Если НомерСтроки = ПоследняяСтрокаГраницы
						И НЕ ЗагрузкаВыведена 
						ИЛИ НомерСтроки <> ПерваяСтрокаГраницы Тогда
						
						ВывестиМЛВСтроке = Истина;
					Иначе
						// Определим выводили ли в этой области другие МЛ
						// Чтобы было меньше пересечений по загрузке.
						ВывестиМЛВСтроке = Истина;
						СтруктураПоиска = Новый Структура("НомерСтроки", НомерСтроки);
	  					СписокСтрок = ТаблицаОбластиМЛ.НайтиСтроки(СтруктураПоиска);
						Для каждого СтрокаОбластьМЛ Из СписокСтрок Цикл
							Если СтрокаОбластьМЛ.НомерКолонки >= НачалоГрафикаЗанятости
								И СтрокаОбластьМЛ.НомерКолонки <= ОкончаниеГрафикаЗанятости 
								И СтрокаОбластьМЛ.ПограничнаяОбласть Тогда
								
								ВывестиМЛВСтроке = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ВывестиМЛВСтроке Тогда
						
						Для НомерКолонки = НачалоГрафикаЗанятости По ОкончаниеГрафикаЗанятости Цикл
							
							ОбластьМЛ = ГрафикЗанятости.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
							
							ВывестиМЛВКолонке = Истина;
							
							// Если это область нерабочего времени, 
							// то выводим МЛ если его действительно запланировали на нерабочее время.
							Если (ТипЗнч(ОбластьМЛ.Расшифровка) = Тип("Структура") 
								И ОбластьМЛ.Расшифровка.ВидОбласти = "НерабочееВремя") Тогда
								
								ВывестиМЛВКолонке = Ложь;
								Для каждого ДанныеПериода Из РаботаВНерабочееВремя Цикл
									Если НомерКолонки >= ДанныеПериода.Начало 
										И НомерКолонки <= ДанныеПериода.Окончание Тогда
										
										ВывестиМЛВКолонке = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							Если ВывестиМЛВКолонке Тогда
								
								ОбластьМЛ.ЦветФона = ЦветОформления;
								
								Если ТипЗнч(ОбластьМЛ.Расшифровка) <> Тип("Массив") Тогда
									ОбластьМЛ.Расшифровка = Новый Массив;
								КонецЕсли; 
								ОбластьМЛ.Расшифровка.Добавить(Расшифровка);
								
								// Запомним в какую область попал МЛ
								СтрокаОбластьМЛ = ТаблицаОбластиМЛ.Добавить();
								СтрокаОбластьМЛ.НомерСтроки  = НомерСтроки;
								СтрокаОбластьМЛ.НомерКолонки = НомерКолонки;
								СтрокаОбластьМЛ.ПограничнаяОбласть = (НомерСтроки = ПерваяСтрока);
								
								ЗагрузкаВыведена = Истина;
							КонецЕсли;
						КонецЦикла; 
						
					КонецЕсли;
					
				КонецЦикла; 
			КонецЦикла;
			
		Иначе
			
			ВыведенВСвободнуюОбласть = Ложь;
			Для НомерСтроки = НомерСтрокиДанных По НомерСтрокиШкалыВремени - 1 Цикл
				Для НомерКолонки = НачалоГрафикаЗанятости По ОкончаниеГрафикаЗанятости Цикл
					
					ОбластьМЛ = ГрафикЗанятости.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
					
					ЭтоОбластьНедоступногоПериода = (ТипЗнч(ОбластьМЛ.Расшифровка) = Тип("Структура") 
														И ОбластьМЛ.Расшифровка.ВидОбласти = "НерабочееВремя");
					
					Если НЕ ВыведенВСвободнуюОбласть ИЛИ НЕ ЭтоОбластьНедоступногоПериода Тогда
						
						ОбластьМЛ.ЦветФона = ЦветОформления;
						
						Если ТипЗнч(ОбластьМЛ.Расшифровка) <> Тип("Массив") Тогда
							ОбластьМЛ.Расшифровка = Новый Массив;
						КонецЕсли; 
						ОбластьМЛ.Расшифровка.Добавить(Расшифровка);
						
						// Запомним в какую область попал МЛ
						СтрокаОбластьМЛ = ТаблицаОбластиМЛ.Добавить();
						СтрокаОбластьМЛ.НомерСтроки  = НомерСтроки;
						СтрокаОбластьМЛ.НомерКолонки = НомерКолонки;
						
						Если НЕ ЭтоОбластьНедоступногоПериода Тогда
							// Чтобы больше не закрашивать недоступное время
							ВыведенВСвободнуюОбласть = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; 
			КонецЦикла; 
			
		КонецЕсли; 
		
		// Запомним куда вывели МЛ
		СтрокаРасписание.НачалоГрафикаЗанятости = НачалоГрафикаЗанятости;
		СтрокаРасписание.ОкончаниеГрафикаЗанятости = ОкончаниеГрафикаЗанятости;
		
	КонецЦикла;
	
	ТаблицаОбластиМЛ.Индексы.Очистить();
	ТаблицаОбластиМЛ.Свернуть("НомерСтроки,НомерКолонки");
	#КонецОбласти
	
	// Вывод свободного времени
	#Область ВыводСвободногоВремени
	Для НомерКолонки = КолонкаНачалаДанных По КолонкаОкончанияДанных Цикл
		
		Если ПараллельнаяЗагрузка Тогда
			СведенияОЗагрузкеВКолонке = СведенияОЗагрузкеВКолонке(
												НомерКолонки, 
												ТаблицаЗагрузка, 
												ГраницыШкалыВремени, 
												МаксимальнаяЗагрузкаНорма);
		КонецЕсли; 
		
		Для НомерСтроки = НомерСтрокиДанных По НомерСтрокиДанных + ВысотаОбластиДанных - 1 Цикл
			
			ОбластьДанные = ГрафикЗанятости.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Если ОбластьДанные.Расшифровка = Неопределено Тогда
				
				Расшифровка = Новый Структура;
				Расшифровка.Вставить("ВидОбласти", "СвободноеВремя");
				Если ПараллельнаяЗагрузка Тогда
					Расшифровка.Вставить("Загрузка", СведенияОЗагрузкеВКолонке.Загрузка);
					Расшифровка.Вставить("ДоступнаяЗагрузка", СведенияОЗагрузкеВКолонке.ДоступнаяЗагрузка);
				КонецЕсли;
				ОбластьДанные.Расшифровка = Расшифровка;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла; 
	#КонецОбласти
	
	// Оформим области содержащие МЛ
	#Область ОформлениеОбластейМЛ
	Для каждого СтрокаОбластьМЛ Из ТаблицаОбластиМЛ Цикл
		НомерКолонки = СтрокаОбластьМЛ.НомерКолонки;
	    НомерСтроки = СтрокаОбластьМЛ.НомерСтроки;
			
		ОбластьДанные = ГрафикЗанятости.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		Если ОбластьДанные.Расшифровка = Неопределено ИЛИ ТипЗнч(ОбластьДанные.Расшифровка) <> Тип("Массив") Тогда
			// Область не содержит МЛ
			Продолжить;
		КонецЕсли;
		
		ОбластьДанные.ЦветРамки = ЦветРамкиГрафикаЗанятости;
		
		// Рисуем левую границу, если хотябы одного из МЛ нет в области слева
		ПроверяемаяОбласть = ГрафикЗанятости.Область(НомерСтроки, НомерКолонки - 1, НомерСтроки, НомерКолонки - 1);
		Если ОдинИзМаршрутныхЛистовОтсутствуетВОбласти(ОбластьДанные.Расшифровка, ПроверяемаяОбласть.Расшифровка) Тогда
			ОбластьДанные.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		КонецЕсли; 
		
		// Рисуем правую границу, если хотябы одного из МЛ нет в области справа
		ПроверяемаяОбласть = ГрафикЗанятости.Область(НомерСтроки, НомерКолонки + 1, НомерСтроки, НомерКолонки + 1);
		Если ОдинИзМаршрутныхЛистовОтсутствуетВОбласти(ОбластьДанные.Расшифровка, ПроверяемаяОбласть.Расшифровка) Тогда
			ОбластьДанные.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		КонецЕсли; 
		
		// Рисуем верхную границу, если хотябы одного из МЛ нет в области сверху
		ПроверяемаяОбласть = ГрафикЗанятости.Область(НомерСтроки - 1, НомерКолонки, НомерСтроки - 1, НомерКолонки);
		Если ОдинИзМаршрутныхЛистовОтсутствуетВОбласти(ОбластьДанные.Расшифровка, ПроверяемаяОбласть.Расшифровка) Тогда
			ОбластьДанные.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		КонецЕсли; 
		
		// Рисуем нижнюю границу, если хотябы одного из МЛ нет в области снизу
		ПроверяемаяОбласть = ГрафикЗанятости.Область(НомерСтроки + 1, НомерКолонки, НомерСтроки + 1, НомерКолонки);
		Если ОдинИзМаршрутныхЛистовОтсутствуетВОбласти(ОбластьДанные.Расшифровка, ПроверяемаяОбласть.Расшифровка) Тогда
			ОбластьДанные.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		КонецЕсли; 
		
		Если ОбластьДанные.Расшифровка.Количество() > 1 Тогда
			ОбластьДанные.Узор = ТипУзораТабличногоДокумента.Узор10;
			Если ОбластьДанные.ЦветФона.Вид = ВидЦвета.Абсолютный Тогда
				ЯркостьЦвета = Макс(ОбластьДанные.ЦветФона.Красный, ОбластьДанные.ЦветФона.Зеленый, ОбластьДанные.ЦветФона.Синий) / 255;
				ЯркостьЦвета = ЯркостьЦвета - 0.1;
				ЦветУзора = Новый Цвет(Цел(ОбластьДанные.ЦветФона.Красный * ЯркостьЦвета), 
										Цел(ОбластьДанные.ЦветФона.Зеленый * ЯркостьЦвета), 
										Цел(ОбластьДанные.ЦветФона.Синий * ЯркостьЦвета));
			Иначе
				ЦветУзора = Новый Цвет(0, 0, 0);
			КонецЕсли; 
			ОбластьДанные.ЦветУзора = ЦветУзора;
		КонецЕсли; 
	КонецЦикла;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Функция ГраницыПериодаНаГрафикеЗанятости(НачалоПериода, ОкончаниеПериода, ВыбранныйПериодРасписания)

	Начало = Макс(НачалоПериода, ВыбранныйПериодРасписания.Начало);
	Окончание = Мин(ОкончаниеПериода, ВыбранныйПериодРасписания.Окончание);
	
	НачалоГрафикаЗанятости = Цел((Начало - ВыбранныйПериодРасписания.Начало) / МасштабШкалыВремени);
	ОкончаниеГрафикаЗанятости = Цел((Окончание - ВыбранныйПериодРасписания.Начало) / МасштабШкалыВремени);
	
	// Если начало и окончание расположены в разных областях, то нужно применить округление
	// Чтобы график выглядил лучше (меньше пересечений).
	Если НачалоГрафикаЗанятости <> ОкончаниеГрафикаЗанятости Тогда
		НачалоГрафикаЗанятости    = Окр((Начало - ВыбранныйПериодРасписания.Начало) / МасштабШкалыВремени);
		ОкончаниеГрафикаЗанятости = Окр((Окончание - ВыбранныйПериодРасписания.Начало) / МасштабШкалыВремени) - 1;
	КонецЕсли; 
	
	Если НачалоГрафикаЗанятости > ОкончаниеГрафикаЗанятости Тогда
		НачалоГрафикаЗанятости = НачалоГрафикаЗанятости - 1;
		ОкончаниеГрафикаЗанятости = НачалоГрафикаЗанятости;
	КонецЕсли;
	
	НачалоГрафикаЗанятости    = НачалоГрафикаЗанятости + КолонкаНачалаДанных;
	ОкончаниеГрафикаЗанятости = ОкончаниеГрафикаЗанятости + КолонкаНачалаДанных;

	Возврат Новый Структура("Начало,Окончание", НачалоГрафикаЗанятости, ОкончаниеГрафикаЗанятости);
	
КонецФункции

&НаСервере
Функция КопияГраницЗагрузки(Границы)

	НовыеГраницыЗагрузки = Новый Массив;
	
	Для каждого СуществующаяГраница Из Границы Цикл
		ГраницаЗагрузки = Новый Структура;
		ГраницаЗагрузки.Вставить("Начало", СуществующаяГраница.Начало);
		ГраницаЗагрузки.Вставить("Конец", СуществующаяГраница.Конец);
		НовыеГраницыЗагрузки.Добавить(ГраницаЗагрузки);
	КонецЦикла; 
	
	Возврат НовыеГраницыЗагрузки;

КонецФункции

&НаСервере
Процедура СкорректироватьГраницыЗагрузкиПоМЛ(ГраницыЗагрузкиПоМЛ, Границы)

	// Границы должны быть упорядочены по возрастанию
	
	ГраницыКДобавлению = Новый Массив;
	Для каждого ГраницаЗагрузки Из ГраницыЗагрузкиПоМЛ Цикл
		
		ИсходнаяЗагрузка = ГраницаЗагрузки.Конец - ГраницаЗагрузки.Начало;
		
		Для каждого СуществующаяГраница Из Границы Цикл
			Если СуществующаяГраница.Начало > ГраницаЗагрузки.Конец
				ИЛИ СуществующаяГраница.Конец < ГраницаЗагрузки.Начало Тогда
				// Границы не пересекаются
				Продолжить;
			КонецЕсли;
			
			СвободнаяЗагрузка = Макс(СуществующаяГраница.Начало - ГраницаЗагрузки.Начало, 0);
			
			Если СвободнаяЗагрузка <> 0 Тогда
				ДанныеКДобавлению = Новый Структура;
				ДанныеКДобавлению.Вставить("Начало", СуществующаяГраница.Начало);
				ДанныеКДобавлению.Вставить("Конец", СуществующаяГраница.Начало + СвободнаяЗагрузка);
				ГраницыКДобавлению.Добавить(ДанныеКДобавлению);
			КонецЕсли;
			
			ИсходнаяЗагрузка = ИсходнаяЗагрузка - СвободнаяЗагрузка;
			ГраницаЗагрузки.Начало = СуществующаяГраница.Конец;
			ГраницаЗагрузки.Конец = ГраницаЗагрузки.Начало + ИсходнаяЗагрузка;
			
		КонецЦикла;
	КонецЦикла;

	// Добавим в обратном порядке
	Для Сч = -ГраницыКДобавлению.ВГраница() По 0 Цикл
		ДанныеКДобавлению = ГраницыКДобавлению[-Сч];
		
		ГраницаЗагрузки = Новый Структура;
		ГраницаЗагрузки.Вставить("Начало", ДанныеКДобавлению.Начало);
		ГраницаЗагрузки.Вставить("Конец", ДанныеКДобавлению.Конец);
		ГраницыЗагрузкиПоМЛ.Вставить(0, ГраницаЗагрузки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГрафикаЗанятости()

	Если Элементы.СтраницыУправлениеРасписанием.ТекущаяСтраница <> Элементы.СтраницаУправлениеРасписаниемВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикЗанятости.ФиксацияСлева = КолонкаНачалаДанных - 1;
	
	ПоказатьСведенияОВыбраннойОбластиГрафикаЗанятости(Истина);
	ПоказатьИндикаторЗагрузки();
	
КонецПроцедуры

&НаСервере
Функция ОдинИзМаршрутныхЛистовОтсутствуетВОбласти(РасшифровкаИсходнойОбласти, РасшифровкаПроверяемойОбласти)
	
	Если РасшифровкаПроверяемойОбласти = Неопределено ИЛИ ТипЗнч(РасшифровкаПроверяемойОбласти) <> Тип("Массив") Тогда
		Возврат Истина;
	КонецЕсли;

	Результат = Ложь;
	
	Для каждого ДанныеРасшифровкиИсходнойОбласти Из РасшифровкаИсходнойОбласти Цикл
		Результат = Истина;
		Для каждого ДанныеРасшифровкиПроверяемойОбласти Из РасшифровкаПроверяемойОбласти Цикл
			Если ДанныеРасшифровкиПроверяемойОбласти.МаршрутныйЛист = ДанныеРасшифровкиИсходнойОбласти.МаршрутныйЛист Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если Результат Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СведенияОЗагрузкеВКолонке(НомерКолонки, ТаблицаЗагрузка, ГраницыШкалыВремени, МаксимальнаяЗагрузкаНорма)

	ГраницыТекущейКолонки = ГраницыШкалыВремени.Получить(НомерКолонки);
	
	ЗагрузкаВКолонке = 0;
	Для каждого ДанныеЗагрузки Из ТаблицаЗагрузка Цикл
		Если ДанныеЗагрузки.Начало <= ГраницыТекущейКолонки.Окончание 
			И ДанныеЗагрузки.Окончание >= ГраницыТекущейКолонки.Начало Тогда
			ЗагрузкаВКолонке = Макс(ДанныеЗагрузки.Загрузка, ЗагрузкаВКолонке);
		КонецЕсли;
	КонецЦикла;
	ДоступнаяЗагрузкаВКолонке = Макс(МаксимальнаяЗагрузкаНорма - ЗагрузкаВКолонке, 0);

	Возврат Новый Структура("Загрузка,ДоступнаяЗагрузка", ЗагрузкаВКолонке, ДоступнаяЗагрузкаВКолонке);

КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьГрафикЗанятости()

	ОбновитьГрафикЗанятости();

КонецПроцедуры

#КонецОбласти

#Область ГрафикЗанятостиИтерактивныеДействия

&НаКлиенте
Процедура РасшифровкаГрафикаЗанятости(Расшифровка, Элемент)
	
	// При расшифровке отрывается меню
	// Состав меню зависит от выбранной области.
	
	ВыбранаОбластьМЛ = (Расшифровка <> Неопределено И ТипЗнч(Расшифровка) = Тип("Массив"));
	
	ТекущаяОбласть = Элементы.ГрафикЗанятости.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено Тогда
		ДанныеТекущейОбластиДанных = ДанныеОбластиДанных(ТекущаяОбласть.Верх, ОбластиДанныхГрафикаЗанятости);
	Иначе
		ДанныеТекущейОбластиДанных = Неопределено;
	КонецЕсли;
	
	СписокМеню = Новый СписокЗначений;

	Если ВГрафикеВыбранМаршрутныйЛистДляПеремещения Тогда
		// При перемещении состав меню зависит от того куда хотят переместить
		
		Если ВыбранаОбластьМЛ Тогда
			
			// Выбрана область МЛ, значит хотят поместить перед этим МЛ или после него
			
			МожноПереместить = Ложь;
			Для каждого ДанныеРасшифровки Из Расшифровка Цикл
				Если ДанныеРасшифровки.МаршрутныйЛист <> МаршрутныйЛистДляПеремещения Тогда
					МожноПереместить = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			Если МожноПереместить Тогда
				Если Расшифровка.Количество() = 1 Тогда
					// Поместить перед
					ПредставлениеКодманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Поместить №%1 перед №%2';
													|en = 'Place No.%1 before No.%2'"),
												МаршрутныйЛистДляПеремещенияСтрокой,
												Расшифровка[0].НомерМаршрутногоЛиста);
												
					СписокМеню.Добавить("ПереместитьПеред", ПредставлениеКодманды);
					
					// Поместить после
					ПредставлениеКодманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Поместить №%1 после №%2';
													|en = 'Place No.%1 after No.%2'"),
												МаршрутныйЛистДляПеремещенияСтрокой,
												Расшифровка[0].НомерМаршрутногоЛиста);
												
					СписокМеню.Добавить("ПереместитьПосле", ПредставлениеКодманды);
				Иначе
					ПредставлениеКодманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Поместить №%1 перед...';
													|en = 'Place No.%1 before...'"),
												МаршрутныйЛистДляПеремещенияСтрокой);
					СписокМеню.Добавить("ПереместитьПеред", ПредставлениеКодманды);
					
					ПредставлениеКодманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Поместить №%1 после...';
													|en = 'Place No.%1 after...'"),
												МаршрутныйЛистДляПеремещенияСтрокой);
					СписокМеню.Добавить("ПереместитьПосле", ПредставлениеКодманды);
				КонецЕсли; 
			КонецЕсли; 
			
		ИначеЕсли ДанныеТекущейОбластиДанных <> Неопределено Тогда
			
			// Выбрана область графика, но в ней нет МЛ
			// Это может быть нерабочее время или свободный период.
			Если (Расшифровка = Неопределено ИЛИ Расшифровка.ВидОбласти <> "Переналадка")
				И ТекущаяОбласть <> Неопределено Тогда
				
				НомерКолонки = ТекущаяОбласть.Лево;
				ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
				НовоеНачало = ВыбранныйПериодРасписания.Начало + МасштабШкалыВремени * (НомерКолонки - ДанныеТекущейОбластиДанных.КолонкаНачалаДанных);
				
				ТекстНачать = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Начать %1';
										|en = 'Start %1'"),
									Формат(НовоеНачало, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
							
				СписокМеню.Добавить("НачатьЗдесь", ТекстНачать);
				
				ТекстЗаврешить = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Завершить %1';
										|en = 'Finish %1'"),
									Формат(НовоеНачало, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
				
				СписокМеню.Добавить("ЗавершитьЗдесь", ТекстЗаврешить);
				
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;
	
	Если ВыбранаОбластьМЛ Тогда
		СписокМеню.Добавить("Переместить", НСтр("ru = 'Выбрать для перемещения';
												|en = 'Select to transfer'"));
		СписокМеню.Добавить("Удалить", НСтр("ru = 'Удалить из расписания';
											|en = 'Remove from timetable'"));
		СписокМеню.Добавить("ВвестиПериод", НСтр("ru = 'Ввести период выполнения';
												|en = 'Enter execution period'"));
		СписокМеню.Добавить("Открыть", НСтр("ru = 'Открыть';
											|en = 'Open'"));
	КонецЕсли; 
	
	Если СписокМеню.Количество() <> 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеТекущейОбластиДанных", ДанныеТекущейОбластиДанных);
		ДополнительныеПараметры.Вставить("СписокДанныхМЛ", Расшифровка);
		Если ТекущаяОбласть <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("НомерКолонки", ТекущаяОбласть.Лево);
		КонецЕсли; 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаГрафикаЗанятостиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокМеню, Элемент);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаГрафикаЗанятостиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ВыбранныйЭлемент.Значение = "Открыть" Тогда
		
		// Открытие выбранного маршрутного листа
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМЛИОткрытьЗавершение", ЭтотОбъект);
		ЗаголовокВыбора = НСтр("ru = 'Выберите маршрутный лист, чтобы открыть его';
								|en = 'Select a route sheet to open it'");
		ВыбратьМЛИВыполнитьДействие(ОбработкаВыбора, ДополнительныеПараметры, ЗаголовокВыбора);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "Переместить" Тогда
		
		// Выбор маршрутного листа для перемещения
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМЛИПереместитьЗавершение", ЭтотОбъект);
		ЗаголовокВыбора = НСтр("ru = 'Выберите маршрутный лист, который нужно переместить';
								|en = 'Select a route sheet to move'");
		ВыбратьМЛИВыполнитьДействие(ОбработкаВыбора, ДополнительныеПараметры, ЗаголовокВыбора);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "Удалить" Тогда
		
		// Удаление из расписания
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМЛИУдалитьЗавершение", ЭтотОбъект);
		ЗаголовокВыбора = НСтр("ru = 'Выберите маршрутный лист, чтобы удалить его из расписания';
								|en = 'Select a route sheet to remove from the schedule'");
		ВыбратьМЛИВыполнитьДействие(ОбработкаВыбора, ДополнительныеПараметры, ЗаголовокВыбора);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ВвестиПериод" Тогда
		
		// Ручной ввод периода выполнения
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМЛИВвестиПериодЗавершение", ЭтотОбъект);
		ЗаголовокВыбора = НСтр("ru = 'Выберите маршрутный лист';
								|en = 'Select route sheet'");
		ВыбратьМЛИВыполнитьДействие(ОбработкаВыбора, ДополнительныеПараметры, ЗаголовокВыбора);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПереместитьПеред" Тогда
		
		// Перемещение маршрутного листа перед указанным маршрутным листом
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМЛПереместитьВыбранныйМЛЗавершение", ЭтотОбъект, -1);
		ЗаголовокВыбора = НСтр("ru = 'Выберите перед каким маршрутным листом нужно поместить';
								|en = 'Select a route sheet before which you want to place your route sheet'");
		ВыбратьМЛИВыполнитьДействие(ОбработкаВыбора, ДополнительныеПараметры, ЗаголовокВыбора, МаршрутныйЛистДляПеремещения);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПереместитьПосле" Тогда
		
		// Перемещение маршрутного листа после указанного маршрутного листа
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМЛПереместитьВыбранныйМЛЗавершение", ЭтотОбъект, 1);
		ЗаголовокВыбора = НСтр("ru = 'Выберите после какого маршрутного листа нужно поместить';
								|en = 'Select a route sheet after which you want to place the new route sheet'");
		ВыбратьМЛИВыполнитьДействие(ОбработкаВыбора, ДополнительныеПараметры, ЗаголовокВыбора, МаршрутныйЛистДляПеремещения);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "НачатьЗдесь" 
		ИЛИ ВыбранныйЭлемент.Значение = "ЗавершитьЗдесь" Тогда
		
		СтруктураПоиска = Новый Структура("МаршрутныйЛист", МаршрутныйЛистДляПеремещения);
  		СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			// В расписании уже нет МЛ, который хотели переместить
			Возврат;
		КонецЕсли;
		ДанныеПеремещаемойСтроки = СписокСтрок[0];
		
		// Ручной ввод периода выполнения с выбранным началом
		ДанныеТекущейОбластиДанных = ДополнительныеПараметры.ДанныеТекущейОбластиДанных;
		Если НЕ ДополнительныеПараметры.Свойство("НомерКолонки") 
			ИЛИ ДанныеТекущейОбластиДанных = Неопределено Тогда
			// Не получится определить начало
			Возврат;
		КонецЕсли;
		
		ВыбранныйПериодРасписания = РассчитатьПериодРасписания(ЭтаФорма);
		
		НомерКолонки = ДополнительныеПараметры.НомерКолонки;
		
		ВыбраннаяДата = ВыбранныйПериодРасписания.Начало + МасштабШкалыВремени * (НомерКолонки - ДанныеТекущейОбластиДанных.КолонкаНачалаДанных);
		Если ДанныеПеремещаемойСтроки.ВремяРаботыИзмененоПользователем Тогда
			ВремяРаботы = ДанныеПеремещаемойСтроки.ОбъемРабот * 3600;
		Иначе
			ВремяРаботы = ДанныеПеремещаемойСтроки.ВремяРаботы;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		Если ВыбранныйЭлемент.Значение = "НачатьЗдесь" Тогда
			ПараметрыФормы.Вставить("Начало", ВыбраннаяДата);
			ПараметрыФормы.Вставить("ОпределитьОкончание");
		Иначе
			ПараметрыФормы.Вставить("Окончание", ВыбраннаяДата);
			ПараметрыФормы.Вставить("ОпределитьНачало");
		КонецЕсли;
		
		ИзменитьПериодВыполненияМаршрутногоЛиста(
					МаршрутныйЛистДляПеремещения, 
					ДанныеТекущейОбластиДанных.РабочийЦентр,
					ПараметрыФормы);
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМЛИВыполнитьДействие(ОбработкаВыбора, ДополнительныеПараметры, ЗаголовокВыбора = Неопределено, ИсключитьМаршрутныйЛист = Неопределено)

	СписокДанныхМЛ = ДополнительныеПараметры.СписокДанныхМЛ;
	
	СписокМЛ = Новый СписокЗначений;
	Для каждого ДанныеМЛ Из СписокДанныхМЛ Цикл
		Если ИсключитьМаршрутныйЛист <> Неопределено И ДанныеМЛ.МаршрутныйЛист = ИсключитьМаршрутныйЛист Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанныеМЛ = Новый Структура("МаршрутныйЛист,НомерМаршрутногоЛиста,Начало,Окончание,ВариантНаладки");
		ЗаполнитьЗначенияСвойств(СтруктураДанныеМЛ, ДанныеМЛ);
		
		Если ДанныеМЛ.ВремяРаботыИзмененоПользователем Тогда
			ВремяРаботы = ДанныеМЛ.ОбъемРабот * 3600;
		Иначе
			ВремяРаботы = ДанныеМЛ.ВремяРаботы;
		КонецЕсли;
		СтруктураДанныеМЛ.Вставить("ВремяРаботы", ВремяРаботы);
		
		СписокМЛ.Добавить(СтруктураДанныеМЛ, ДанныеМЛ.МаршрутныйЛистСтрока);
	КонецЦикла; 
	
	ДополнительныеПараметрыВыбора = Новый Структура;
	ДополнительныеПараметрыВыбора.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ДополнительныеПараметрыВыбора.Вставить("ОбработкаВыбора", ОбработкаВыбора);
	
	Если СписокМЛ.Количество() = 1 Тогда
		ВыбратьМЛИВыполнитьДействиеЗавершение(СписокМЛ[0], ДополнительныеПараметрыВыбора);
	ИначеЕсли СписокМЛ.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьМЛИВыполнитьДействиеЗавершение", ЭтотОбъект, ДополнительныеПараметрыВыбора);
		СписокМЛ.ПоказатьВыборЭлемента(ОписаниеОповещения, ЗаголовокВыбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМЛИВыполнитьДействиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ДополнительныеПараметры", ДополнительныеПараметры.ДополнительныеПараметры);
		ПараметрыДействия.Вставить("СтруктураДанныеМЛ", ВыбранныйЭлемент.Значение);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаВыбора, ПараметрыДействия);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМЛИОткрытьЗавершение(ПараметрыДействия, ДополнительныеПараметры) Экспорт

	ПоказатьЗначение(, ПараметрыДействия.СтруктураДанныеМЛ.МаршрутныйЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМЛИПереместитьЗавершение(ПараметрыДействия, ДополнительныеПараметры) Экспорт

	МаршрутныйЛистДляПеремещения = ПараметрыДействия.СтруктураДанныеМЛ.МаршрутныйЛист;
	МаршрутныйЛистДляПеремещенияСтрокой = ПараметрыДействия.СтруктураДанныеМЛ.НомерМаршрутногоЛиста;
	ВГрафикеВыбранМаршрутныйЛистДляПеремещения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМЛИУдалитьЗавершение(ПараметрыДействия, ДополнительныеПараметры) Экспорт

	СтруктураПоиска = Новый Структура("МаршрутныйЛист", ПараметрыДействия.СтруктураДанныеМЛ.МаршрутныйЛист);
  	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		ИдентификаторыСтрокРасписания = Новый Массив;
		ИдентификаторыСтрокРасписания.Добавить(СписокСтрок[0].ПолучитьИдентификатор());
		УдалитьИзРасписанияМЛ(ИдентификаторыСтрокРасписания);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМЛИВвестиПериодЗавершение(ПараметрыДействия, ДополнительныеПараметры) Экспорт
	
	ДанныеТекущейОбластиДанных = ПараметрыДействия.ДополнительныеПараметры.ДанныеТекущейОбластиДанных;
	
	ИзменитьПериодВыполненияМаршрутногоЛиста(
				ПараметрыДействия.СтруктураДанныеМЛ.МаршрутныйЛист, 
				ДанныеТекущейОбластиДанных.РабочийЦентр);
							
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМЛПереместитьВыбранныйМЛЗавершение(ПараметрыДействия, Направление) Экспорт
	
	РядомСКакимМЛ = ПараметрыДействия.СтруктураДанныеМЛ.МаршрутныйЛист;
	ПереместитьВыбранныйМЛНаСервере(РядомСКакимМЛ, Направление);
	
	ПриИзмененииРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВыбранныйМЛНаСервере(РядомСКакимМЛ, Направление)

	ВГрафикеВыбранМаршрутныйЛистДляПеремещения = Ложь;
	
	СтруктураПоиска = Новый Структура("МаршрутныйЛист", РядомСКакимМЛ);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтрокиРядомСКоторойНужноПоместить = СписокСтрок[0];
	ИндексСтрокиМЛРядомСКоторымНужноПоместить = РасписаниеРабочихЦентров.Индекс(ДанныеСтрокиРядомСКоторойНужноПоместить);
	
	СтруктураПоиска = Новый Структура("МаршрутныйЛист", МаршрутныйЛистДляПеремещения);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		// В расписании уже нет МЛ, который хотели переместить
		Возврат;
	КонецЕсли;
	ДанныеПеремещаемойСтроки = СписокСтрок[0];
	
	Если Направление = 1 Тогда
		
		// Поместить после
		ИндексНовойСтроки = ИндексСтрокиМЛРядомСКоторымНужноПоместить + 1;
		Если ИндексНовойСтроки <= РасписаниеРабочихЦентров.Количество()-1 Тогда
			НоваяСтрока = РасписаниеРабочихЦентров.Вставить(ИндексНовойСтроки);
		Иначе
			НоваяСтрока = РасписаниеРабочихЦентров.Добавить();
		КонецЕсли;
		
	Иначе
		
		// Поместить перед
		НоваяСтрока = РасписаниеРабочихЦентров.Вставить(ИндексСтрокиМЛРядомСКоторымНужноПоместить);
		
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПеремещаемойСтроки);
	
	// Пользователь может перекинуть на другой РЦ
	НоваяСтрока.РабочийЦентр = ДанныеСтрокиРядомСКоторойНужноПоместить.РабочийЦентр;
	
	// Определим для каких строк нужно пересчитать расписание
	ИдентификаторыИзмененныхСтрок = Новый Массив;
	ИдентификаторыИзмененныхСтрок.Добавить(ДанныеПеремещаемойСтроки.ПолучитьИдентификатор());
	ИдентификаторыИзмененныхСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	СписокРабочихЦентровДляКоторыхНеобходимоРассчитатьРасписание = ОпределитьСтрокиДляКоторыхНеобходимоРассчитатьРасписание(ИдентификаторыИзмененныхСтрок);
	
	// Удалим перемещаемую строку
	РасписаниеРабочихЦентров.Удалить(ДанныеПеремещаемойСтроки);
	
	Для каждого РабочийЦентр Из СписокРабочихЦентровДляКоторыхНеобходимоРассчитатьРасписание Цикл
		РассчитатьРасписаниеРабочегоЦентра(РабочийЦентр);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСведенияОВыбраннойОбластиГрафикаЗанятости(ЗаполнитьВыбор = Ложь)

	Если ЗаполнитьВыбор Тогда
		Элементы.ПоказатьИнформациюОМЛ.СписокВыбора.Очистить();
	КонецЕсли; 
	
	ТекущаяОбласть = Элементы.ГрафикЗанятости.ТекущаяОбласть;
	Попытка
		Расшифровка = ТекущаяОбласть.Расшифровка;
	Исключение
		Расшифровка = Неопределено;
	КонецПопытки; 
	
	Если ТипЗнч(Расшифровка) = Тип("Массив") Тогда
		
		ПоказатьСведенияОМЛВГрафикеЗанятости(Расшифровка, ПоказатьИнформациюОМЛ, ЗаполнитьВыбор);
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ПоказатьПрочиеСведенияВГрафикеЗанятости(Расшифровка);
		
	Иначе
		
		Элементы.СтраницыГрафикЗанятостиИнформация.ТекущаяСтраница = Элементы.СтраницаГрафикЗанятостиПоУмолчанию;
		
	КонецЕсли; 
				
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПрочиеСведенияВГрафикеЗанятости(Расшифровка)

	Элементы.СтраницыГрафикЗанятостиИнформация.ТекущаяСтраница = Элементы.СтраницаГрафикЗанятостиПрочиеСведения;
	
	МассивИнформации = Новый Массив;
	
	Если Расшифровка.ВидОбласти = "НерабочееВремя" Тогда
		
		// Нерабочий период
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Нерабочий период';
																	|en = 'Non-work period'"), Новый Шрифт(,, Истина)));
		
	ИначеЕсли Расшифровка.ВидОбласти = "СвободноеВремя" Тогда
		
		// Свободный период
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Свободный период';
																	|en = 'Free period'"), Новый Шрифт(,, Истина)));
		Если ПараллельнаяЗагрузка Тогда
			МассивИнформации.Добавить("; ");
			МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Загрузка:';
																		|en = 'Load:'"), Новый Шрифт(,, Истина)));
			МассивИнформации.Добавить(" ");
			МассивИнформации.Добавить(Формат(Расшифровка.Загрузка, "ЧН=0; ЧГ=0"));
			МассивИнформации.Добавить(" " + ЕдиницаИзмеренияЗагрузки + "; ");
			
			МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Свободная загрузка:';
																		|en = 'Free import:'"), Новый Шрифт(,, Истина)));
			МассивИнформации.Добавить(" ");
			МассивИнформации.Добавить(Формат(Расшифровка.ДоступнаяЗагрузка, "ЧН=0; ЧГ=0"));
			МассивИнформации.Добавить(" " + ЕдиницаИзмеренияЗагрузки);
		КонецЕсли; 
		
	ИначеЕсли Расшифровка.ВидОбласти = "ОтметкаШкалыВремени" Тогда
		
		// Отметка шкалы времени
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Период %1 с %2 до %3';
						|en = 'Period %1 from %2 to %3'"),
					Формат(Расшифровка.ЗначениеОтметки, "ДФ='dd.MM.yyyy (ддд)'"),
					Формат(Расшифровка.ЗначениеОтметки, "ДФ=ЧЧ:мм"),
					Формат(Расшифровка.ЗначениеОтметки + МасштабШкалыВремени, "ДФ=ЧЧ:мм"));
					
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи, Новый Шрифт(,, Истина)));
		
		Если ПараллельнаяЗагрузка Тогда
			МассивИнформации.Добавить("; ");
			МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Загрузка:';
																		|en = 'Load:'"), Новый Шрифт(,, Истина)));
			МассивИнформации.Добавить(" ");
			МассивИнформации.Добавить(Формат(Расшифровка.Загрузка, "ЧН=0; ЧГ=0"));
			МассивИнформации.Добавить(" " + ЕдиницаИзмеренияЗагрузки + "; ");
			
			МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Свободная загрузка:';
																		|en = 'Free import:'"), Новый Шрифт(,, Истина)));
			МассивИнформации.Добавить(" ");
			МассивИнформации.Добавить(Формат(Расшифровка.ДоступнаяЗагрузка, "ЧН=0; ЧГ=0"));
			МассивИнформации.Добавить(" " + ЕдиницаИзмеренияЗагрузки);
		КонецЕсли; 
		
	ИначеЕсли Расшифровка.ВидОбласти = "Переналадка" Тогда
		
		// Занято с - по -
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Переналадка с';
																	|en = 'Changeover sec'"), Новый Шрифт(,, Истина)));
		МассивИнформации.Добавить(" ");
		МассивИнформации.Добавить(Формат(Расшифровка.Начало, "ДФ=ЧЧ:мм"));
		МассивИнформации.Добавить(" ");
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'по';
																	|en = 'to'"), Новый Шрифт(,, Истина)));
		МассивИнформации.Добавить(" ");
		МассивИнформации.Добавить(Формат(Расшифровка.Окончание, "ДФ=ЧЧ:мм"));
		МассивИнформации.Добавить("; ");
		
		// Вариант наладки
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Вариант наладки:';
																	|en = 'Equipment setup settings:'"), Новый Шрифт(,, Истина)));
		МассивИнформации.Добавить(" ");
		МассивИнформации.Добавить(Расшифровка.ВариантНаладки);
		
	КонецЕсли;

	СведенияОВыбраннойОбластиГрафикаЗанятости = Новый ФорматированнаяСтрока(МассивИнформации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСведенияОМЛВГрафикеЗанятости(ДанныеРасшифровки, ИндексМЛДляКоторогоНужноПоказатьИнформацию = 0, ЗаполнитьВыбор = Ложь)

	Элементы.СтраницыГрафикЗанятостиИнформация.ТекущаяСтраница = Элементы.СтраницаГрафикЗанятостиИнформацияОМЛ;
	
	Если ЗаполнитьВыбор Тогда
		Элементы.ПоказатьИнформациюОМЛ.СписокВыбора.Очистить();
		Для Сч = 1 По ДанныеРасшифровки.Количество() Цикл
			ТекстВыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '%1 из %2';
										|en = '%1 out of %2'"),
									Формат(Сч, "ЧГ=0"),
									Формат(ДанныеРасшифровки.Количество(), "ЧГ=0"));
			Элементы.ПоказатьИнформациюОМЛ.СписокВыбора.Добавить(Сч - 1, ТекстВыбора);
		КонецЦикла; 
	КонецЕсли; 
	
	Расшифровка = ДанныеРасшифровки[ИндексМЛДляКоторогоНужноПоказатьИнформацию];
	
	МассивИнформации = Новый Массив;
	
	// Этап
	МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Этап:';
																|en = 'Step:'"), Новый Шрифт(,, Истина)));
	МассивИнформации.Добавить(" ");
	МассивИнформации.Добавить(Расшифровка.ЭтапСпецификация);
	МассивИнформации.Добавить("; ");
	
	// Запланировано
	МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Запланировано:';
																|en = 'Planned:'"), Новый Шрифт(,, Истина)));
	МассивИнформации.Добавить(" ");
	МассивИнформации.Добавить(Формат(Расшифровка.Количество, "ЧГ=0"));
	МассивИнформации.Добавить(" ед/партий; ");
	
	// Объем работ
	МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Объем работ:';
																|en = 'Scope of work:'"), Новый Шрифт(,, Истина)));
	МассивИнформации.Добавить(" ");
	МассивИнформации.Добавить(Формат(Расшифровка.ОбъемРабот, "ЧГ=0"));
	МассивИнформации.Добавить("ч; ");
	
	Если ПараллельнаяЗагрузка Тогда
		// Загрузка
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Загрузка:';
																	|en = 'Load:'"), Новый Шрифт(,, Истина)));
		МассивИнформации.Добавить(" ");
		МассивИнформации.Добавить(Формат(Расшифровка.Загрузка, "ЧГ=0"));
		МассивИнформации.Добавить(ЕдиницаИзмеренияЗагрузки + "; ");
	КонецЕсли; 
	
	// Занято с - по -
	Если НачалоДня(Расшифровка.Начало) = НачалоДня(Расшифровка.Окончание) Тогда
		ФорматПериода = "ДФ=ЧЧ:мм";
	Иначе
		ФорматПериода = "ДФ='dd.MM.yyyy ЧЧ:мм'";
	КонецЕсли; 
	МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Занято с';
																|en = 'Occupied from'"), Новый Шрифт(,, Истина)));
	МассивИнформации.Добавить(" ");
	МассивИнформации.Добавить(Формат(Расшифровка.Начало, ФорматПериода));
	МассивИнформации.Добавить(" ");
	МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'по';
																|en = 'to'"), Новый Шрифт(,, Истина)));
	МассивИнформации.Добавить(" ");
	МассивИнформации.Добавить(Формат(Расшифровка.Окончание, ФорматПериода));
	МассивИнформации.Добавить("; ");
	
	// Номенклатура
	МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Номенклатура:';
																|en = 'Products:'"), Новый Шрифт(,, Истина)));
	МассивИнформации.Добавить(" ");
	МассивИнформации.Добавить(Расшифровка.НоменклатураХарактеристика);
	МассивИнформации.Добавить("; ");
	
	// Вариант наладки
	Если ЗначениеЗаполнено(Расшифровка.ВариантНаладкиПредставление) Тогда
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Вариант наладки:';
																	|en = 'Equipment setup settings:'"), Новый Шрифт(,, Истина)));
		МассивИнформации.Добавить(" ");
		МассивИнформации.Добавить(Расшифровка.ВариантНаладкиПредставление);
		МассивИнформации.Добавить("; ");
	КонецЕсли; 
	
	// Назначение
	Если ЗначениеЗаполнено(Расшифровка.НазначениеПредставление) Тогда
		МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Назначение:';
																	|en = 'Assignment:'"), Новый Шрифт(,, Истина)));
		МассивИнформации.Добавить(" ");
		МассивИнформации.Добавить(Расшифровка.НазначениеПредставление);
		МассивИнформации.Добавить("; ");
	КонецЕсли;
	
	// Маршрутный лист
	МассивИнформации.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Маршрутный лист:';
																|en = 'Route sheet:'"), Новый Шрифт(,, Истина)));
	МассивИнформации.Добавить(" ");
	МассивИнформации.Добавить(Расшифровка.МаршрутныйЛистСтрока);
	МассивИнформации.Добавить("; ");
	
	СведенияОВыбраннойОбластиГрафикаЗанятости = Новый ФорматированнаяСтрока(МассивИнформации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИндикаторЗагрузки()

	Если НЕ ПараллельнаяЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = Элементы.ГрафикЗанятости.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено Тогда
		НовыйНомерСтрокиИндикатораЗагрузки = ТекущаяОбласть.Верх;
	Иначе
		НовыйНомерСтрокиИндикатораЗагрузки = 0;
	КонецЕсли;
	
	Если НовыйНомерСтрокиИндикатораЗагрузки = НомерСтрокиИндикатораЗагрузки Тогда
		Возврат;
	КонецЕсли; 
	
	ГраницаОбласти = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ПустаяГраница = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	Если НомерСтрокиИндикатораЗагрузки <> 0 Тогда
		
		// Нужно стереть старый индикатор
		ДанныеОбластиДанных = ДанныеОбластиДанных(НомерСтрокиИндикатораЗагрузки, ОбластиДанныхГрафикаЗанятости);
		
		Если ДанныеОбластиДанных <> Неопределено Тогда
			
			НомерОбласти = 0;
			Для НомерКолонки = ДанныеОбластиДанных.КолонкаНачалаДанных По ДанныеОбластиДанных.КолонкаОкончанияДанных Цикл
				
				ОбластьИндикатора = ГрафикЗанятости.Область(НомерСтрокиИндикатораЗагрузки, 
															НомерКолонки, 
															НомерСтрокиИндикатораЗагрузки, 
															НомерКолонки);
															
				Если ГраницыОбластейГдеВыведенИндикаторЗагрузки.Получить(НомерОбласти).Значение Тогда
					ОбластьИндикатора.ГраницаСверху = ГраницаОбласти;
				Иначе
					ОбластьИндикатора.ГраницаСверху = ПустаяГраница;
				КонецЕсли;
				
				НомерОбласти = НомерОбласти + 1;
			КонецЦикла;
			
			// Вернем цвет текста шкалы загрузки
			НомерКолонки = ДанныеОбластиДанных.КолонкаНачалаДанных - 1;
			ОбластьДелениеШкалы = ГрафикЗанятости.Область(НомерСтрокиИндикатораЗагрузки, НомерКолонки - 1, НомерСтрокиИндикатораЗагрузки, НомерКолонки - 1);
			
			ЗначениеТекущейШкалы = ОбластьДелениеШкалы.Расшифровка;
			Если ЗначениеТекущейШкалы > ДанныеОбластиДанных.МаксимальнаяЗагрузкаНорма Тогда
				ОбластьДелениеШкалы.ЦветТекста = ЦветШкалыПревышающейМаксимальную;
			Иначе
				ОбластьДелениеШкалы.ЦветТекста = Новый Цвет;
			КонецЕсли;
			ОбластьДелениеШкалы.Шрифт = Новый Шрифт(ОбластьДелениеШкалы.Шрифт,,, Ложь);
		КонецЕсли;
		
	КонецЕсли;

	ГраницыОбластейГдеВыведенИндикаторЗагрузки.Очистить();
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НомерСтрокиИндикатораЗагрузки = НовыйНомерСтрокиИндикатораЗагрузки;
	
	ДанныеОбластиДанных = ДанныеОбластиДанных(НомерСтрокиИндикатораЗагрузки, ОбластиДанныхГрафикаЗанятости);
	Если ДанныеОбластиДанных = Неопределено Тогда
		// Выбрана не рабочая область
		Возврат;
	КонецЕсли;
	
	ГраницаИндикатора = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир, 2);
	
	Для НомерКолонки = ДанныеОбластиДанных.КолонкаНачалаДанных По ДанныеОбластиДанных.КолонкаОкончанияДанных Цикл
		ОбластьИндикатора = ГрафикЗанятости.Область(НомерСтрокиИндикатораЗагрузки, 
													НомерКолонки, 
													НомерСтрокиИндикатораЗагрузки, 
													НомерКолонки);
													
		Если ОбластьИндикатора.ГраницаСверху <> Неопределено Тогда
			ГраницыОбластейГдеВыведенИндикаторЗагрузки.Добавить(ОбластьИндикатора.ГраницаСверху.ТипЛинии <> ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		КонецЕсли;	
		
		ОбластьИндикатора.ГраницаСверху = ГраницаИндикатора;
		ОбластьИндикатора.ЦветРамки = ЦветРамкиГрафикаЗанятости;
	КонецЦикла; 
	
	// Выделем цветом значение загрузки
	НомерКолонки = ДанныеОбластиДанных.КолонкаНачалаДанных - 1;
	ОбластьДелениеШкалы = ГрафикЗанятости.Область(НомерСтрокиИндикатораЗагрузки, НомерКолонки - 1, НомерСтрокиИндикатораЗагрузки, НомерКолонки - 1);
	
	ЗначениеТекущейШкалы = ОбластьДелениеШкалы.Расшифровка;
	Если ЗначениеТекущейШкалы > ДанныеОбластиДанных.МаксимальнаяЗагрузкаНорма Тогда
		ОбластьДелениеШкалы.ЦветТекста = ЦветШкалыПревышающейМаксимальную;
	Иначе
		ОбластьДелениеШкалы.ЦветТекста = ЦветВыбраннойЗагрузкиГрафикаЗанятости;
	КонецЕсли;
	ОбластьДелениеШкалы.Шрифт = Новый Шрифт(,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьЛегендуГрафикаЗанятости()

	Элементы.ГрафикЗанятостиПоказатьСкрытьЛегендуГрафикаЗанятости.Пометка = ВидимостьЛегендыГрафикаЗанятости;
	Элементы.ЛегендаГрафикаЗанятости.Видимость = ВидимостьЛегендыГрафикаЗанятости;

	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛегендуГрафикаЗанятости()

	МакетОформления = Обработки.ФормированиеРасписанияРабочихЦентров.ПолучитьМакет("Легенда");	
	ЛегендаГрафикаЗанятости.Вывести(МакетОформления.ПолучитьОбласть("Легенда"));
	
	ЛегендаГрафикаЗанятости.ФиксацияСверху = ЛегендаГрафикаЗанятости.ВысотаТаблицы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеОбластиДанных(НомерСтроки, ОбластиДанныхГрафикаЗанятости)

	Для каждого ДанныеТекущейОбластиДанных Из ОбластиДанныхГрафикаЗанятости Цикл
		Если НомерСтроки >= ДанныеТекущейОбластиДанных.НомерСтрокиДанных 
			И НомерСтроки < ДанныеТекущейОбластиДанных.НомерСтрокиШкалыВремени Тогда
			Возврат ДанныеТекущейОбластиДанных;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПереместитьВОчередиВГрафике(Направление)

	ТекущаяОбласть = Элементы.ГрафикЗанятости.ТекущаяОбласть;
	Попытка
		Расшифровка = ТекущаяОбласть.Расшифровка;
	Исключение
		Расшифровка = Неопределено;
	КонецПопытки; 
	
	Если ТипЗнч(Расшифровка) = Тип("Массив") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СписокДанныхМЛ", Расшифровка);
		ДополнительныеПараметры.Вставить("Направление", Направление);
		
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМЛИПереместитьВОчередиВГрафикеЗавершение", ЭтотОбъект);
		ЗаголовокВыбора = НСтр("ru = 'Выберите маршрутный лист, который нужно переместить в очереди';
								|en = 'Select a route sheet to move in the queue'");
		ВыбратьМЛИВыполнитьДействие(ОбработкаВыбора, ДополнительныеПараметры, ЗаголовокВыбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМЛИПереместитьВОчередиВГрафикеЗавершение(ПараметрыДействия, ДополнительныеПараметры) Экспорт

	СтруктураПоиска = Новый Структура("МаршрутныйЛист", ПараметрыДействия.СтруктураДанныеМЛ.МаршрутныйЛист);
 	СписокСтрок = РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		// В расписании уже нет МЛ, который хотели переместить
		Возврат;
	КонецЕсли;
	
	ДанныеПеремещаемойСтроки = СписокСтрок[0];
	ИндентификаторыПеремещаемыхСтрок = Новый Массив;
	ИндентификаторыПеремещаемыхСтрок.Добавить(ДанныеПеремещаемойСтроки.ПолучитьИдентификатор());
	ПереместитьРасписаниеНаСервере(ИндентификаторыПеремещаемыхСтрок, ПараметрыДействия.ДополнительныеПараметры.Направление);
	
	ПриИзмененииРасписания();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// РЦ перегружен
	#Область РЦПерегружен
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРабочихЦентровСвободноПревышеноСтрокой.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРабочихЦентровЗагрузка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРабочихЦентров.Загрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 100;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);
	#КонецОбласти

	// Стандартное оформление характеристик
	#Область СтандартноеОформлениеХарактеристик
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ТребуютПланированияХарактеристика",
																		     "ТребуютПланирования.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "РасписаниеРабочихЦентровХарактеристика",
																		     "РасписаниеРабочихЦентров.ХарактеристикиИспользуются");
	#КонецОбласти

	// Запрет изменения объема работ если время зафиксировано
	#Область ЗапретИзмененияПолейЕслиВремяЗафиксировано
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентровОбъемРабот.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентровВремяРаботыИзмененоПользователем.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеРабочихЦентров.РасписаниеВведеноВручную");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти

	// Запрет установки флажка ВремяРаботыИзмененоПользователем (его можно только снять).
	#Область ЗапретУстановкиФлажкаВремяРаботыИзмененоПользователем
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентровВремяРаботыИзмененоПользователем.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеРабочихЦентров.ВремяРаботыИзмененоПользователем");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти

	// Пересечение периодов
	#Область ПересечениеПериодов 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентровНачало.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентровОкончание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеРабочихЦентров.Пересекается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараллельнаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);
	#КонецОбласти

	// В прошлом периоде вариант наладки не использовался
	#Область ВПрошломПериодеВариантНаладкиНеИспользовался
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРабочихЦентровВариантНаладкиПрошлогоМЛ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРабочихЦентров.ВариантНаладкиПрошлогоМЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не использовался>';
																|en = '<have not been used>'"));
	#КонецОбласти

	// Выделение МЛ начинающихся в прошлом периоде
	#Область ВыделениеМЛНачинающихсяВПрошломПериоде
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеРабочихЦентров.ДоступноИзменение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	#КонецОбласти
	
	// Скрываем поле "Свободно или превышено, ч" в списке РЦ при параллельной загрузке
	#Область СписокРабочихЦентровСвободноПревышеноСтрокой_Скрыть
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРабочихЦентровСвободноПревышеноСтрокой.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараллельнаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Выделение красным отставания от расписания по МЛ
	#Область ОтставаниеПоМЛ
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентровСостояниеРаботы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеРабочихЦентров.СтатусРаботыКлючевогоРЦ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыРаботыРабочихЦентров.Отставание);
	СписокЗначений.Добавить(Перечисления.СтатусыРаботыРабочихЦентров.ЗавершенаСОтставанием);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
	// Выделение красным МЛ которые должны быть запланированы в прошлых интервалах
	#Область КраснымОкончаниеПоГрафику
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТребуютПланированияОкончаниеПоГрафику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуютПланирования.ВыполнениеЗапланированоВПрошломИнтервале");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасписаниеРабочихЦентровОкончаниеПоГрафику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасписаниеРабочихЦентров.ПеренесенНаДругойИнтервал");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформацию()
	
	Если ВыбранныйВидРабочегоЦентра.Пустая() 
		ИЛИ ИнтервалПланированияНачало = '000101010000'
		ИЛИ ИнтервалПланированияОкончание = '000101010000' Тогда
		
		Элементы.ГруппаИнформацияСтраницы.ТекущаяСтраница = Элементы.ГруппаИнформацияПустая;
		Возврат;
	КонецЕсли;
	
	КлючевыеВидыРабочихЦентровТаблица = ОперативныйУчетПроизводства.КлючевыеВидыРабочихЦентров(
												ОтборПодразделение, 
												ИнтервалПланированияНачало, 
												ИнтервалПланированияОкончание,
												Истина);
	
	СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВыбранныйВидРабочегоЦентра);
 	СписокСтрок = КлючевыеВидыРабочихЦентровТаблица.НайтиСтроки(СтруктураПоиска);
	
	СтраницаИнформация = Элементы.ГруппаИнформацияПустая;
	
	Если СписокСтрок.Количество() = 0 Тогда
		СтраницаИнформация = Элементы.ГруппаИнформацияРасписаниеНеТребуется;
	Иначе
		СтрокаВидРЦ = СписокСтрок[0];
		Если НЕ СтрокаВидРЦ.Ключевой Тогда
			СтраницаИнформация = Элементы.ГруппаИнформацияРасписаниеНеТребуется;
		ИначеЕсли НЕ СтрокаВидРЦ.МаршрутныеЛистыЗапланированы Тогда
			
			ДанныеНовыхМЛ = ОперативныйУчетПроизводстваВызовСервера.ДанныеДляФормированияМаршрутныхЛистовПоРасписанию(
										ОтборПодразделение,
										ВыбранныйВидРабочегоЦентра,
										ИнтервалПланированияНачало);
										
			КоличествоНовыхМЛ = ДанныеНовыхМЛ.Количество();
			КоличествоМЛСтрокой = Формат(КоличествоНовыхМЛ, "ЧН=0; ЧГ=0");
			
			Элементы.СформироватьМаршрутныеЛисты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																			НСтр("ru = 'Сформировать маршрутные листы (%1)';
																				|en = 'Generate route sheets (%1)'"), 
																			КоличествоМЛСтрокой);
																			
			Если КоличествоНовыхМЛ = 1 Тогда
				ПодсказкаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Требуется сформировать один маршрутный лист';
												|en = 'It is required to generate one route sheet'"),
											КоличествоМЛСтрокой);
			ИначеЕсли КоличествоНовыхМЛ > 1 Тогда
				ПодсказкаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Требуется сформировать %1 маршрутных листов';
												|en = 'It is required to generate %1 route sheets'"),
											КоличествоМЛСтрокой);
			Иначе
				ПодсказкаКоманды = НСтр("ru = 'Формировать маршрутные листы не требуется';
										|en = 'Generation of route sheets is not required'");
			КонецЕсли; 
			Элементы.СформироватьМаршрутныеЛисты.РасширеннаяПодсказка.Заголовок = ПодсказкаКоманды;
			
			СтраницаИнформация = Элементы.ГруппаИнформацияНеобходимоСформироватьМаршрутныеЛисты;
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.ГруппаИнформацияСтраницы.ТекущаяСтраница = СтраницаИнформация;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюРасписания()

	ВыполнениеНеЗапланировано = Ложь;
	Для каждого СтрокаРасписание Из РасписаниеРабочихЦентров Цикл
		Если СтрокаРасписание.Начало = '000101010000' ИЛИ СтрокаРасписание.Окончание = '000101010000' Тогда
			ВыполнениеНеЗапланировано = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ВыполнениеНеЗапланировано Тогда
		Элементы.СтраницыИнформацияРасписанияСтраницы.ТекущаяСтраница = Элементы.СтраницаИнформацияРасписанияНеУместилосьВГрафик;
	Иначе
		Элементы.СтраницыИнформацияРасписанияСтраницы.ТекущаяСтраница = Элементы.СтраницаИнформацияРасписанияПустая;
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьЗначениеВТекущейСтроке(ТабличноеПоле, ИмяПоля, СтандартнаяОбработка = Ложь)

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные[ИмяПоля]);
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АктивизироватьМаршрутныйЛист(МаршрутныйЛист, Форма)

	// Сделаем активной строку соответствующую маршрутному листу
	СтруктураПоиска = Новый Структура("МаршрутныйЛист", МаршрутныйЛист);
	СписокСтрок = Форма.ТребуютПланирования.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		СтрокаРасписание = СписокСтрок[0];
		Форма.Элементы.ТребуютПланирования.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
	Иначе	
		СписокСтрок = Форма.РасписаниеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Форма.Элементы.РасписаниеРабочихЦентров.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
			
			СтруктураПоиска = Новый Структура("РабочийЦентр", СписокСтрок[0].РабочийЦентр);
			СписокСтрок = Форма.СписокРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			Форма.Элементы.СписокРабочихЦентров.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ОпределитьПериодИВидРабочегоЦентра()

	// Нужно определить самую раннюю дату с которой может потребоваться сформировать расписание.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(МаршрутныйЛистПроизводстваВидыРабочихЦентров.ДатаИнтервала) КАК ДатаИнтервала,
	|	МаршрутныйЛистПроизводстваВидыРабочихЦентров.Ссылка.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводстваВидыРабочихЦентров
	|ГДЕ
	|	МаршрутныйЛистПроизводстваВидыРабочихЦентров.Ссылка.Проведен
	|	И МаршрутныйЛистПроизводстваВидыРабочихЦентров.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется))
	|	И (МаршрутныйЛистПроизводстваВидыРабочихЦентров.Ссылка.Подразделение = &Подразделение
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И МаршрутныйЛистПроизводстваВидыРабочихЦентров.ВидРабочегоЦентра.ПланироватьРаботуРабочихЦентров
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистПроизводстваВидыРабочихЦентров.Ссылка.Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	СписокПодразделений = Новый Массив;
	НачалоВыборкиКлючевыхРЦ = Неопределено;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачалоВыборкиКлючевыхРЦ = ?(НачалоВыборкиКлючевыхРЦ <> Неопределено, Мин(Выборка.ДатаИнтервала, НачалоВыборкиКлючевыхРЦ), Выборка.ДатаИнтервала);
		СписокПодразделений.Добавить(Выборка.Подразделение);
	КонецЦикла;
	
	// Получим информацию какие виды РЦ ключевые и сформировано ли для них расписание
	КлючевыеВидыРабочихЦентровТаблица = ОперативныйУчетПроизводства.КлючевыеВидыРабочихЦентров(
												СписокПодразделений, 
												НачалоВыборкиКлючевыхРЦ, 
												'000101010000', 
												Истина);
												
	ИнтервалПланированияНачало = '000101010000';
	Для каждого СтрокаВидРЦ Из КлючевыеВидыРабочихЦентровТаблица Цикл
		Если СтрокаВидРЦ.РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано
			ИЛИ СтрокаВидРЦ.РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.СформированоЧастично Тогда
			ВыбранныйВидРабочегоЦентра = СтрокаВидРЦ.ВидРабочегоЦентра;
			ИнтервалПланированияНачало = СтрокаВидРЦ.Период; 
			ИспользоватьПодразделение = СтрокаВидРЦ.Подразделение;
			
			Прервать;
			
		ИначеЕсли СтрокаВидРЦ.РасписаниеРаботы <> Перечисления.СостоянияРасписанияРабочихЦентров.НеТребуется Тогда
			Если ИнтервалПланированияНачало = '000101010000' ИЛИ СтрокаВидРЦ.Период < ИнтервалПланированияНачало Тогда
				ВыбранныйВидРабочегоЦентра = СтрокаВидРЦ.ВидРабочегоЦентра;
				ИнтервалПланированияНачало = СтрокаВидРЦ.Период; 
				ИспользоватьПодразделение = СтрокаВидРЦ.Подразделение;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ИнтервалПланированияНачало <> '000101010000' Тогда
		
		Если ОтборПодразделение.Пустая() Тогда
			ОтборПодразделение = ИспользоватьПодразделение;
		КонецЕсли;
		
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			
			ИнтервалПланированияОкончание = КонецЧаса(ИнтервалПланированияНачало);
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
			
			ИнтервалПланированияОкончание = КонецДня(ИнтервалПланированияНачало);
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
			
			ИнтервалПланированияОкончание = КонецНедели(ИнтервалПланированияНачало);
			
		Иначе
			
			ИнтервалПланированияОкончание = КонецМесяца(ИнтервалПланированияНачало);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура ПриИзмененииВидаРабочегоЦентра()

	ПараллельнаяЗагрузка = Ложь;
	ЕдиницаИзмеренияЗагрузки = "";
	
	Если НЕ ВыбранныйВидРабочегоЦентра.Пустая() Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
										ВыбранныйВидРабочегоЦентра, 
										"ИспользуютсяВариантыНаладки,ПараллельнаяЗагрузка,ЕдиницаИзмеренияЗагрузки");
										
		ПараллельнаяЗагрузка = ЗначенияРеквизитов.ПараллельнаяЗагрузка;
		ЕдиницаИзмеренияЗагрузки = ЗначенияРеквизитов.ЕдиницаИзмеренияЗагрузки;
		ИспользуютсяВариантыНаладки = ЗначенияРеквизитов.ИспользуютсяВариантыНаладки;
		
		Если ПараллельнаяЗагрузка Тогда
			
			Элементы.ТребуютПланированияЗагрузка.Видимость = Истина;
			Элементы.РасписаниеРабочихЦентровЗагрузка.Видимость = Истина;
			ЗаголовокЗагрузка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	НСтр("ru = 'Загрузка, %1';
																		|en = 'Load, %1'"),
																	ЕдиницаИзмеренияЗагрузки);
																	
			Элементы.ТребуютПланированияЗагрузка.Заголовок = ЗаголовокЗагрузка;
			Элементы.РасписаниеРабочихЦентровЗагрузка.Заголовок = ЗаголовокЗагрузка;
			
			Элементы.СтраницыТребуютПланированияИтоги.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияИтогиПриПараллельнойЗагрузке;
			Элементы.СтраницыТребуютПланированияПодвал.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияПодвалПриПараллельнойЗагрузке;
			
		Иначе
			
			Элементы.ТребуютПланированияЗагрузка.Видимость = Ложь;
			Элементы.РасписаниеРабочихЦентровЗагрузка.Видимость = Ложь;
			
			Элементы.СтраницыТребуютПланированияИтоги.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияИтоги;
			Элементы.СтраницыТребуютПланированияПодвал.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияПодвал;
			
		КонецЕсли;
		
	Иначе
		
		ИспользуютсяВариантыНаладки = Ложь;
		Элементы.ТребуютПланированияЗагрузка.Видимость = Ложь;
		Элементы.РасписаниеРабочихЦентровЗагрузка.Видимость = Ложь;
		Элементы.СтраницыТребуютПланированияИтоги.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияИтоги;
		Элементы.СтраницыТребуютПланированияПодвал.ТекущаяСтраница = Элементы.СтраницаТребуютПланированияПодвал;
		
	КонецЕсли;
	
	// Колонка, начиная с которой выводятся данные в графике занятости
	Если ПараллельнаяЗагрузка Тогда
		КолонкаНачалаДанных = 4;
	Иначе
		КолонкаНачалаДанных = 2;
	КонецЕсли;
	
	Элементы.ТребуютПланированияПереналадкаЕдИзм.Видимость = ИспользуютсяВариантыНаладки;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьВариантыНаладки", ИспользуютсяВариантыНаладки);
	ОбщегоНазначенияУТ.НастроитьФормуПоПараметрам(ЭтаФорма, СтруктураНастроек);
	
	УстановитьСтраницуПериодРасписания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьУправлениеКлючевымиВидамиРабочихЦентров()

	Если ОтборПодразделение.Пустая() Тогда
		Элементы.УправлениеКлючевымиВидамиРабочихЦентров.Доступность = Ложь;
	ИначеЕсли НЕ Элементы.УправлениеКлючевымиВидамиРабочихЦентров.Доступность Тогда
		Элементы.УправлениеКлючевымиВидамиРабочихЦентров.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура УместитьВГрафикРаботыЗавершение(РезультатВопроса, РабочийЦентр) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если УместитьВГрафикРаботы(РабочийЦентр) Тогда
			ПриИзмененииРасписания();
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось уместить маршрутные листы в график.';
											|en = 'Cannot keep the route sheets within schedule.'"),, НСтр("ru = 'Ошибка';
																											|en = 'Error'"));
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодразделенияНаСервере()

	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(ОтборПодразделение);
	ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
	
	УстановитьДоступностьУправлениеКлючевымиВидамиРабочихЦентров();
	
	ЗаполнитьВыборПериодаРасписания();
	СкорректироватьВыборПериода();
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		ФорматДат = "ДФ='dd.MM.yyyy ЧЧ:мм'";
	Иначе
		ФорматДат = "ДЛФ=D";
	КонецЕсли;
	
	Элементы.ТребуютПланированияОкончаниеПоГрафику.Формат = ФорматДат;
	Элементы.РасписаниеРабочихЦентровОкончаниеПоГрафику.Формат = ФорматДат;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевогоВидаРЦНаСервере()

	ОбновитьИнформацию();
	ОбновитьИнформациюРасписания();

КонецПроцедуры
 
#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21