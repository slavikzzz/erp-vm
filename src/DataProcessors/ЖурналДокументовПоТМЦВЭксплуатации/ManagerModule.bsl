#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Определяет состав документов и хозяйственных операций, доступных для отображения в рабочем месте.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка
//  ОтборХозяйственныеОперации		 - СписокЗначений - список значений типа ПеречислениеСсылка.ХозяйственныеОперации
//  ОтборТипыДокументов				 - СписокЗначений - список значений типа СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КлючНазначенияИспользования		 - Строка - ключ рабочего места для которого вызывается функция
//  ДокументыКОформлению			 - Булево - признак вызова метода для формы "ФормаСпискаКОформлению".
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка.
//
//
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь) Экспорт
	
	// ВнутреннееПотребление
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВнутреннееПотребление");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВнутреннееПотребление.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Передача в эксплуатацию';
												|en = 'Commissioning'");
	Строка.ГруппаКнопок                 = "ПередачаВЭксплуатацию";
	Строка.Порядок                      = 2;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ЗаказНаВнутреннееПотребление
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ЗаказНаВнутреннееПотребление.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Заказ на передачу в эксплуатацию';
												|en = 'Commissioning order'");
	Строка.ГруппаКнопок                 = "ПередачаВЭксплуатацию";
	Строка.Порядок                      = 1;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ПеремещениеВЭксплуатации
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеВЭксплуатации;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПеремещениеВЭксплуатации");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеВЭксплуатации.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Перемещение в эксплуатации';
												|en = 'Transfer in operation'");
	Строка.ГруппаКнопок                 = "ПеремещениеВЭксплуатации";
	Строка.Порядок                      = 3;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// СписаниеИзЭксплуатации
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеИзЭксплуатации;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.СписаниеИзЭксплуатации");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеИзЭксплуатации.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Списание из эксплуатации';
												|en = 'Write-off from operation'");
	Строка.ГруппаКнопок                 = "ПеремещениеВЭксплуатации";
	Строка.Порядок                      = 4;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ПрочееОприходованиеТоваров
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПрочееОприходованиеТоваров");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Возврат из эксплуатации';
												|en = 'Put out of operation'");
	Строка.ГруппаКнопок                 = "ПеремещениеВЭксплуатации";
	Строка.Порядок                      = 5;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	// ОприходованиеТМЦВЭксплуатации
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОприходованиеТМЦВЭксплуатации;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ОприходованиеТМЦВЭксплуатации");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ОприходованиеТМЦВЭксплуатации.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Оприходование в эксплуатации';
												|en = 'Goods receipt in operation'");
	Строка.ГруппаКнопок                 = "ПеремещениеВЭксплуатации";
	Строка.Порядок                      = 6;
	Строка.ДобавитьКнопкуСоздать        = Истина;

	// ИнвентаризацияТМЦВЭксплуатации
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИнвентаризацияТМЦВЭксплуатации;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ИнвентаризацияТМЦВЭксплуатации");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИнвентаризацияТМЦВЭксплуатации.ПолноеИмя();
	Строка.ДокументПредставление        = НСтр("ru = 'Инвентаризация';
												|en = 'Physical inventory count'");
	Строка.ГруппаКнопок                 = "ИнвентаризацияТМЦВЭксплуатации";
	Строка.Порядок                      = 7;
	Строка.ДобавитьКнопкуСоздать        = Истина;

	ТМЦВЭксплуатацииЛокализация.ДополнитьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы);
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНазначенияИспользования);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

#Область Команды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючНазначенияФормыПоУмолчанию() Экспорт
	
	Возврат "ДокументыОС";
	
КонецФункции

Функция ДанныеРабочегоМеста(Параметры) Экспорт

	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СписаниеИзЭксплуатации)
		И НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПрочееОприходованиеТоваров)
		И НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаВнутреннееПотребление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ТМЦВЭксплуатации.Остатки(
	|		,
	|		(Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|			И (Подразделение = &Подразделение
	|				ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|		) КАК ТМЦВЭксплуатации
	|
	|ГДЕ
	|	ТМЦВЭксплуатации.КоличествоОстаток > 0
	|	И ЕСТЬNULL(ТМЦВЭксплуатации.Партия.ДатаЗавершенияЭксплуатации, ДАТАВРЕМЯ(1,1,1)) < &Период
	|	И ЕСТЬNULL(ТМЦВЭксплуатации.Партия.ДатаЗавершенияЭксплуатации, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	
	Результат = Запрос.Выполнить();
	
	ТекстГиперссылки = НСтр("ru = 'Списание';
							|en = 'Write-off'");
	Если Результат.Пустой() Тогда
		ЦветГиперссылки = ЦветаСтиля.НезаполненноеПолеТаблицы;
	Иначе
		ЦветГиперссылки = Неопределено;
	КонецЕсли;
	
	ГиперСсылкаСписание = Новый ФорматированнаяСтрока(ТекстГиперссылки,, ЦветГиперссылки,, "#СписаниеИзЭксплуатации");
	
	Гиперссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'К оформлению:';
													|en = 'To register:'"), " ", ГиперСсылкаСписание);
	
	Возврат Гиперссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли
