#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СозданиеТиповыхТехнологическихПроцессов

Процедура СписокОтобранныхМаршрутныхКартВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = РезультатОтбораМаршрутныхКарт(
						Параметры.ВариантОтбораМаршрутныхКарт,
						Параметры.НастройкиКомпоновки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция РезультатОтбораМаршрутныхКарт(ВариантОтбораМаршрутныхКарт, НастройкиКомпоновки)
	
	Результат = Новый Структура;
	Результат.Вставить("МаршрутныеКарты",           Новый Массив);
	Результат.Вставить("МаршрутныеКартыКоличество", 0);
	
	Запрос = Новый Запрос;
	
	Если ВариантОтбораМаршрутныхКарт = ВариантОтбораМаршрутныхКартВсе() Тогда
		
		Запрос.Текст = ТекстЗапросаМаршрутныеКартыВсе();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Результат.МаршрутныеКартыКоличество = Выборка.Количество;
		
	ИначеЕсли ВариантОтбораМаршрутныхКарт = ВариантОтбораМаршрутныхКартМногократноИспользуемые() Тогда
			
		Запрос.Текст = ТекстЗапросаМаршрутныеКартыМногократноИспользуемые();
		
		Список = Запрос.Выполнить().Выгрузить();
		
		Результат.МаршрутныеКарты = Список.ВыгрузитьКолонку("МаршрутнаяКарта");
		Результат.МаршрутныеКартыКоличество = Список.Количество();
		
	ИначеЕсли ВариантОтбораМаршрутныхКарт = ВариантОтбораМаршрутныхКартПоОтбору() Тогда
		
		Схема      = Обработки.ПомощникПереносаОперацийВРесурсныеСпецификации.ПолучитьМакет("МакетКомпоновкиДляПроизвольныхОтборов");
		АдресСхемы = ПоместитьВоВременноеХранилище(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		Если ЗначениеЗаполнено(НастройкиКомпоновки) Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
		КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
			Схема,КомпоновщикНастроек.ПолучитьНастройки(),,,,Ложь);
		
		ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных["НаборДанных1"].Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборМаршрутныхКарт", ТекстОсновногоОтбораМаршрутныхКарт());
			
		Запрос.Текст = ТекстЗапроса;
		Для каждого ПараметрКомпоновки Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		Список = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат.МаршрутныеКарты = Список.ВыгрузитьКолонку("МаршрутнаяКарта");
		Результат.МаршрутныеКартыКоличество = Список.Количество();
		
	Конецесли;
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьТиповыеТехнологическиеПроцессыВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = СоздатьТиповыеТехнологическиеПроцессы(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СоздатьТиповыеТехнологическиеПроцессы(Параметры)
	
	РезультатыЗапроса = ВыбратьДанныеМаршрутныхКартДляСозданияТехпроцессов(
		Параметры.ВариантОтбораМаршрутныхКарт,
		Параметры.МаршрутныеКарты);
	КоличествоРезультатов = РезультатыЗапроса.Количество();
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("КоличествоСоздано", 0);
	
	СтруктураДанных      = Новый Структура("МатериалыИУслуги,Трудозатраты,ОтборПоСвойствам,СоответствиеСвойств");
	СоответствиеОпераций = Новый Соответствие();
	СтруктураПоиска      = Новый Структура("МаршрутнаяКарта");
	Ответственный        = Пользователи.ТекущийПользователь();
	
	Выборка             = РезультатыЗапроса[КоличествоРезультатов-4].Выбрать();
	ТаблицаОпераций     = РезультатыЗапроса[КоличествоРезультатов-3].Выгрузить(); // ТаблицаЗначений
	ТаблицаМатериалы    = РезультатыЗапроса[КоличествоРезультатов-2].Выгрузить(); // ТаблицаЗначений
	ТаблицаТрудозатраты = РезультатыЗапроса[КоличествоРезультатов-1].Выгрузить(); // ТаблицаЗначений
	
	ТаблицаОпераций.Индексы.Добавить("МаршрутнаяКарта");
	ТаблицаМатериалы.Индексы.Добавить("МаршрутнаяКарта");
	ТаблицаТрудозатраты.Индексы.Добавить("МаршрутнаяКарта");
	
	СтруктураДанных.МатериалыИУслуги = ТаблицаМатериалы;
	СтруктураДанных.Трудозатраты     = ТаблицаТрудозатраты;
	
	НачатьТранзакцию();
	
	Попытка
	
		Пока Выборка.Следующий() Цикл
			
			ТехпроцессОбъект = Справочники.ТехнологическиеПроцессы.СоздатьЭлемент();
			
			ЗаполнитьЗначенияСвойств(ТехпроцессОбъект, Выборка);
			ТехпроцессОбъект.Ответственный = Ответственный;
			ТехпроцессОбъект.Статус = Перечисления.СтатусыТехнологическихПроцессов.ВРазработке;
			ТехпроцессОбъект.ОбменДанными.Загрузка = Истина;
			ТехпроцессОбъект.Записать();
			
			Если НЕ Выборка.СодержитВложенныйМаршрут Тогда
				
				СоответствиеОпераций.Очистить();
				СтруктураПоиска.МаршрутнаяКарта = Выборка.МаршрутнаяКарта;
			
				ПеренестиТаблицуОпераций(
					ТаблицаОпераций.НайтиСтроки(СтруктураПоиска),
					ТехпроцессОбъект.Ссылка,
					Неопределено,
					СоответствиеОпераций);
				
				СтруктураДанных.ОтборПоСвойствам    = Выборка.ОтборПоСвойствам.Выгрузить();
				СтруктураДанных.СоответствиеСвойств = Выборка.СоответствиеСвойств.Выгрузить();
				
				ДобавитьСоставМаршрутнойКарты(
					ТехпроцессОбъект,
					СтруктураДанных,
					СоответствиеОпераций,
					СтруктураПоиска);
				
			Иначе
				
				ДобавитьСоставМаршрутнойКартыУчетомВложенныхМаршрутов(
					ТехпроцессОбъект,
					Выборка.МаршрутнаяКарта);
				
			КонецЕсли;
			
			Если Выборка.Статус = Перечисления.СтатусыМаршрутныхКарт.Действует Тогда
				ТехпроцессОбъект.Статус = Перечисления.СтатусыТехнологическихПроцессов.Действует;
				Если НЕ ТехпроцессОбъект.ПроверитьЗаполнение() Тогда
					ТехпроцессОбъект.Статус = Перечисления.СтатусыТехнологическихПроцессов.ВРазработке;
				КонецЕсли;
			КонецЕсли;
			ТехпроцессОбъект.Основание = Выборка.МаршрутнаяКарта;
			ТехпроцессОбъект.ОбменДанными.Загрузка = Ложь;
			ТехпроцессОбъект.Записать();
			
			Результат.КоличествоСоздано = Результат.КоличествоСоздано + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.ЕстьОшибки = Истина;
		
		ЗаписьЖурналаРегистрации(
			СобытиеСозданиеТиповыхТехнологическихПроцессов(),
			УровеньЖурналаРегистрации.Ошибка,,
			Выборка.МаршрутнаяКарта,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСоставМаршрутнойКарты(ТехпроцессОбъект, СтруктураДанных, СоответствиеОпераций, СтруктураПоиска)
	
	СоответствиеКлючей = Новый Соответствие();
	
	Для каждого ИмяТЧ Из СтрРазделить("МатериалыИУслуги,Трудозатраты",",") Цикл
		ТабличнаяЧасть = ТехпроцессОбъект[ИмяТЧ]; // ТабличнаяЧасть
		Таблица = СтруктураДанных[ИмяТЧ].Скопировать(СтруктураПоиска); // ТаблицаЗначений
		Таблица.Сортировать("НомерСтроки");
		Для ИндексСтроки = 0 По Таблица.Количество()-1 Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Таблица[ИндексСтроки]);
			НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
			НоваяСтрока.ОперацияРедактирование = СоответствиеОпераций.Получить(Таблица[ИндексСтроки].Операция);
			ПроверитьОчиститьАлгоритмРасчетаКоличества(НоваяСтрока);
			СоответствиеКлючей.Вставить(Таблица[ИндексСтроки].КлючСвязи, НоваяСтрока.КлючСвязи);
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ИмяТЧ Из СтрРазделить("ОтборПоСвойствам,СоответствиеСвойств",",") Цикл
		ТабличнаяЧасть = ТехпроцессОбъект[ИмяТЧ]; // ТабличнаяЧасть
		Таблица = СтруктураДанных[ИмяТЧ].Скопировать(СтруктураПоиска); // ТаблицаЗначений
		Для ИндексСтроки = 0 По Таблица.Количество()-1 Цикл
			НовыйКлюч = СоответствиеКлючей.Получить(Таблица[ИндексСтроки].КлючСвязи);
			Если НовыйКлюч <> Неопределено Тогда
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Таблица[ИндексСтроки]);
				НоваяСтрока.КлючСвязи = НовыйКлюч;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСоставМаршрутнойКартыУчетомВложенныхМаршрутов(ТехпроцессОбъект, МаршрутнаяКарта)
	
	ДанныеМаршрутнойКарты = ДанныеМаршрутнойКартыСВложеннымиМаршрутами(МаршрутнаяКарта);
	
	ТаблицаСоответствияОпераций = ПеренестиТаблицуОперацийСВложеннымиМаршрутами(
		ДанныеМаршрутнойКарты.Операции,
		ТехпроцессОбъект.Ссылка,
		Неопределено);
	
	СтруктураПоиска = Новый Структура("Идентификатор");
	Для Индекс = 0 По ТаблицаСоответствияОпераций.Количество() - 1 Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТаблицаСоответствияОпераций[Индекс]);
		
		ДобавитьСоставМаршрутнойКарты(
			ТехпроцессОбъект,
			ДанныеМаршрутнойКарты,
			ТаблицаСоответствияОпераций[Индекс].СоответствиеОпераций,
			СтруктураПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыбратьДанныеМаршрутныхКартДляСозданияТехпроцессов(ВариантОтбораМаршрутныхКарт, МаршрутныеКарты)
	
	ПараметрыЗапроса = ПараметрыЗапросаДанныеМаршрутныхКарт();
	ПараметрыЗапроса.ОтборМатериалы = "Материалы.Вспомогательный";
	
	Запрос = Новый Запрос;
	
	Если ВариантОтбораМаршрутныхКарт = ВариантОтбораМаршрутныхКартВсе() Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	0                                                 КАК Идентификатор,
		|	ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка) КАК МаршрутнаяКарта
		|
		|ПОМЕСТИТЬ ВтМаршрутныеКарты
		|
		|;
		|";
		
		ПараметрыЗапроса.ТекстСоединения = "ИСТИНА";
		ПараметрыЗапроса.ОтборМаршрутныеКарты = ТекстОсновногоОтбораМаршрутныхКарт();
		
	Иначе
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	0                      КАК Идентификатор,
		|	МаршрутныеКарты.Ссылка КАК МаршрутнаяКарта
		|
		|ПОМЕСТИТЬ ВтМаршрутныеКарты
		|ИЗ
		|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|
		|ГДЕ
		|	МаршрутныеКарты.Ссылка В (&Список)
		|	И &ТекстОтборМаршрутныхКарт
		|;
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтборМаршрутныхКарт", ТекстОсновногоОтбораМаршрутныхКарт());
		
		Запрос.УстановитьПараметр("Список", МаршрутныеКарты);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса + ТекстЗапросаДанныеМаршрутныхКарт(ПараметрыЗапроса);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

#КонецОбласти

#Область ОбъединениеСправочников

Процедура ОпределитьНаличиеКонфликтовВФоне(Параметры, АдресХранилища) Экспорт
	
	ПоместитьВоВременноеХранилище(ОпределитьНаличиеКонфликтов(Параметры), АдресХранилища);
	
КонецПроцедуры

Функция ОпределитьНаличиеКонфликтов(Параметры)
	
	СформироватьОтчет = Параметры.СформироватьОтчет;
	ДанныеОКонфликтах = Неопределено;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьКонфликты", Ложь);
	Результат.Вставить("СформироватьОтчет", СформироватьОтчет);
	
	ТекстЗапроса = ТекстЗапросаСопоставленияДанных();
	
	ТекстОтбораТолькоКонфликты = "
	|НЕ СтрокиМаршрутнойКарты.НомерСтроки IS NULL
	|	И СтрокиСпецификации.НомерСтроки IS NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор1", ТекстОтбораТолькоКонфликты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор2", ТекстОтбораТолькоКонфликты);
	Если СформироватьОтчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|ВЫБРАТЬ
	|	ВтЭтапы.Спецификация           КАК Спецификация,
	|	ВтЭтапы.Этап                   КАК Этап,
	|	ВтЭтапы.МаршрутнаяКарта        КАК МаршрутнаяКарта,
	|	ВтЭтапы.ТехнологическийПроцесс КАК ТехнологическийПроцесс
	|ИЗ
	|	ВтЭтапы КАК ВтЭтапы
	|ГДЕ
	|	ВтЭтапы.СодержитВложенныйМаршрут
	|
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МатериалыИУслуги", "%МатериалыИУслуги%");

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатыЗапроса.Количество();
	
	РезультатБезВложенных = РезультатыЗапроса[КоличествоРезультатов-2];
	РезультатСВложенными  = РезультатыЗапроса[КоличествоРезультатов-1];
	
	Результат.ЕстьКонфликты = НЕ РезультатБезВложенных.Пустой();
	Если СформироватьОтчет Тогда
		ДанныеОКонфликтах = РезультатБезВложенных.Выгрузить();
	КонецЕсли;
	
	// Маршрутные карты с вложенными маршрутами
	Если НЕ РезультатСВложенными.Пустой()
		И (НЕ Результат.ЕстьКонфликты ИЛИ СформироватьОтчет) Тогда
		
		Выборка = РезультатСВложенными.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РезультатЗапросаВложенныеМаршруты = ОпределитьНаличиеКонфликтовСУчетомВложенныхМаршрутов(
					Выборка.Спецификация,
					Выборка.Этап,
					Выборка.МаршрутнаяКарта,
					Выборка.ТехнологическийПроцесс,
					СформироватьОтчет);
					
			Результат.ЕстьКонфликты = Результат.ЕстьКонфликты ИЛИ НЕ РезультатЗапросаВложенныеМаршруты.Пустой();
			Если СформироватьОтчет Тогда
				ДанныеОКонфликтахВложенныеМаршруты = РезультатЗапросаВложенныеМаршруты.Выгрузить();
				Для каждого Строка из ДанныеОКонфликтахВложенныеМаршруты Цикл
					ЗаполнитьЗначенияСвойств(ДанныеОКонфликтах.Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СформироватьОтчет Тогда
		
		Результат.Вставить("ДанныеОКонфликтах", ДанныеОКонфликтах);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьНаличиеКонфликтовСУчетомВложенныхМаршрутов(Спецификация, Этап, МаршрутнаяКарта, ТехнологическийПроцесс, СформироватьОтчет)
	
	ТекстОтбораТолькоКонфликты = "СтрокиСпецификации.НомерСтроки IS NULL";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Отбор1", ТекстОтбораТолькоКонфликты);
	ПараметрыЗапроса.Вставить("Отбор2", ТекстОтбораТолькоКонфликты);
	Если СформироватьОтчет Тогда
		ПараметрыЗапроса.Вставить("Все");
	КонецЕсли;
	
	ДанныеДляОбъединения = ДанныеДляОбъединенияСправочниковСУчетомВложенныхМаршрутов(
		Спецификация,
		Этап,
		МаршрутнаяКарта,
		ТехнологическийПроцесс,
		ПараметрыЗапроса);
	
	Возврат ДанныеДляОбъединения.РезультатСопоставление;
	
КонецФункции

Процедура ОбъединениеСправочниковВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = ВыполнитьОбъединениеСправочников(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ВыполнитьОбъединениеСправочников(Параметры)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",             Ложь);
	Результат.Вставить("ОбработаноСпецификаций", 0);
	Результат.Вставить("ПеренесеноОпераций",     0);
	Результат.Вставить("ПодключеноТехпроцессов", 0);
	
	СпецификацииОбъекты   = Новый Соответствие();
	СоответствиеОпераций  = Новый Соответствие();
	СтруктураПоискаЭтап   = Новый Структура("Этап");
	
	ДанныеДляОбъединения   = ДанныеДляОбъединенияСправочников();
	РезультатСопоставление = ДанныеДляОбъединения.РезультатСопоставление; // РезультатЗапроса
	ВыборкаСопоставление   = РезультатСопоставление.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Спецификация");
	ТаблицаОпераций        = ДанныеДляОбъединения.ТаблицаОпераций; // ТаблицаЗначений
	
	НачатьТранзакцию();
	
	Попытка
		
		// Имеющие ресурсы для сопоставления
		Пока ВыборкаСопоставление.Следующий() Цикл
			
			СпецификацияОбъект = СпецификацииОбъекты.Получить(ВыборкаСопоставление.Спецификация);
			
			ВыборкаЭтапы = ВыборкаСопоставление.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Этап");
			Пока ВыборкаЭтапы.Следующий() Цикл
				
				СтруктураПоискаЭтап.Этап = ВыборкаЭтапы.Этап;
				Операции = ТаблицаОпераций.НайтиСтроки(СтруктураПоискаЭтап);
				
				Если ВыборкаЭтапы.СодержитВложенныйМаршрут Тогда
					
					ВыполнитьОбъединениеСправочниковСУчетомВложенныхМаршрутов(ВыборкаЭтапы, СпецификацияОбъект, Результат);
					
				ИначеЕсли ЗначениеЗаполнено(ВыборкаЭтапы.ТехнологическийПроцесс) И НЕ ВыборкаЭтапы.ЕстьКонфликты Тогда
					
					ПодключитьТехнологическийПроцесс(ВыборкаЭтапы);
					
					ВыборкаРесурсы = ВыборкаЭтапы.Выбрать();
					Пока ВыборкаРесурсы.Следующий() Цикл
						
						УдалитьСтрокуСпецификации(ВыборкаРесурсы, СпецификацияОбъект);
						
					КонецЦикла;
					
					Результат.ПодключеноТехпроцессов = Результат.ПодключеноТехпроцессов + 1;
					
				Иначе
					
					СоответствиеОпераций.Очистить();
					
					Операции = ТаблицаОпераций.НайтиСтроки(СтруктураПоискаЭтап);
					Если Операции.Количество() > 0 Тогда
						
						ПолучитьОбъектСпецификацииДляОбработки(ВыборкаЭтапы.Спецификация, СпецификацияОбъект);
						
						ПеренестиТаблицуОпераций(
							Операции,
							ВыборкаЭтапы.Этап,
							ВыборкаЭтапы.Спецификация,
							СоответствиеОпераций,
							ВыборкаЭтапы.КоэффициентМаршрутнойКарты);
						
						ВыборкаРесурсы = ВыборкаЭтапы.Выбрать();
						Пока ВыборкаРесурсы.Следующий() Цикл
							ПривязатьСтрокуСпецификацииКОперации(ВыборкаРесурсы, СпецификацияОбъект, СоответствиеОпераций);
						КонецЦикла;
						
						Результат.ПеренесеноОпераций = Результат.ПеренесеноОпераций + Операции.Количество();
						
					КонецЕсли;
					
				КонецЕсли;
				
				Для каждого СтрокаОперация Из Операции Цикл
					ТаблицаОпераций.Удалить(СтрокаОперация);
				КонецЦикла;
				
			КонецЦикла;
			
			СпецификацииОбъекты.Вставить(ВыборкаСопоставление.Спецификация, СпецификацияОбъект);
			
		КонецЦикла;
		
		РеквизитыЭтапа = "Спецификация,Этап,МаршрутнаяКарта,КоэффициентМаршрутнойКарты,СодержитВложенныйМаршрут,ТехнологическийПроцесс,ТехнологическийПроцессПредставление";
		
		// Не имеющие ресурсов для сопоставления
		ОсталосьОбработать = ТаблицаОпераций.Скопировать();
		ОсталосьОбработать.Свернуть(РеквизитыЭтапа);
		Для каждого СтрокаОбработать Из ОсталосьОбработать Цикл
			
			СпецификацияОбъект = СпецификацииОбъекты.Получить(СтрокаОбработать.Спецификация);
			
			СтруктураПоискаЭтап.Этап = СтрокаОбработать.Этап;
			
			Если СтрокаОбработать.СодержитВложенныйМаршрут Тогда
				
				ВыполнитьОбъединениеСправочниковСУчетомВложенныхМаршрутов(СтрокаОбработать, СпецификацияОбъект, Результат);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаОбработать.ТехнологическийПроцесс) Тогда
				
				ПодключитьТехнологическийПроцесс(СтрокаОбработать);
				
				Результат.ПодключеноТехпроцессов = Результат.ПодключеноТехпроцессов + 1;
				
			Иначе
				
				Операции = ТаблицаОпераций.НайтиСтроки(СтруктураПоискаЭтап);
				Если Операции.Количество() > 0 Тогда
					ПолучитьОбъектСпецификацииДляОбработки(СтрокаОбработать.Спецификация, СпецификацияОбъект);
					ПеренестиТаблицуОпераций(
						Операции,
						СтрокаОбработать.Этап,
						СтрокаОбработать.Спецификация,
						Неопределено,
						СтрокаОбработать.КоэффициентМаршрутнойКарты);
					Результат.ПеренесеноОпераций = Результат.ПеренесеноОпераций + Операции.Количество();
				КонецЕсли;
				
			КонецЕсли;
			
			СпецификацииОбъекты.Вставить(СтрокаОбработать.Спецификация, СпецификацияОбъект);
			
		КонецЦикла;
		
		Для каждого КлючИЗначение Из СпецификацииОбъекты Цикл
			СпецификацияОбъект = КлючИЗначение.Значение; // СправочникОбъект.РесурсныеСпецификации
			Если СпецификацияОбъект <> Неопределено Тогда
				СпецификацияОбъект.Записать();
				Результат.ОбработаноСпецификаций = Результат.ОбработаноСпецификаций + 1;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.ЕстьОшибки = Истина;
		
		ЗаписьЖурналаРегистрации(
			СобытиеПереносОперацийВРесурсныеСпецификации(),
			УровеньЖурналаРегистрации.Ошибка,,
			ВыборкаСопоставление.Спецификация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьОбъединениеСправочниковСУчетомВложенныхМаршрутов(ДанныеСтроки, СпецификацияОбъект, Счетчики)
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Все");
	ПараметрыЗапроса.Вставить("Отбор1", "ИСТИНА");
	ПараметрыЗапроса.Вставить("Отбор2", "ИСТИНА");
	
	ДанныеДляОбъединения = ДанныеДляОбъединенияСправочниковСУчетомВложенныхМаршрутов(
		ДанныеСтроки.Спецификация,
		ДанныеСтроки.Этап,
		ДанныеСтроки.МаршрутнаяКарта,
		ДанныеСтроки.ТехнологическийПроцесс,
		ПараметрыЗапроса);
	
	ТаблицаОпераций      = ДанныеДляОбъединения.ТаблицаОпераций; // ТаблицаЗначений
	ТаблицаСопоставление = ДанныеДляОбъединения.РезультатСопоставление.Выгрузить(); // ТаблицаЗначений
	ТаблицаСопоставление.Индексы.Добавить("Идентификатор");
	
	ЕстьКонфликты = ТаблицаСопоставление.Найти(Истина, "ЕстьКонфликты") <> Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ТехнологическийПроцесс) И НЕ ЕстьКонфликты Тогда
		
		ПодключитьТехнологическийПроцесс(ДанныеСтроки);
		
		Для каждого Строка Из ТаблицаСопоставление Цикл
			
			УдалитьСтрокуСпецификации(Строка, СпецификацияОбъект);
			
		КонецЦикла;
		
		Счетчики.ПодключеноТехпроцессов = Счетчики.ПодключеноТехпроцессов + 1;
		
	Иначе
		
		ТаблицаСоответствияОпераций =  ПеренестиТаблицуОперацийСВложеннымиМаршрутами(
			ТаблицаОпераций, ДанныеСтроки.Этап, ДанныеСтроки.Спецификация, ДанныеСтроки.КоэффициентМаршрутнойКарты);
		
		СтруктураПоиска = Новый Структура("Идентификатор");
		Для Индекс = 0 По ТаблицаСоответствияОпераций.Количество() - 1 Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТаблицаСоответствияОпераций[Индекс]);
			
			НайденныеСтроки = ТаблицаСопоставление.НайтиСтроки(СтруктураПоиска);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				ПривязатьСтрокуСпецификацииКОперации(
					Строка, СпецификацияОбъект, ТаблицаСоответствияОпераций[Индекс].СоответствиеОпераций);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Счетчики.ПеренесеноОпераций = Счетчики.ПеренесеноОпераций + ТаблицаОпераций.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляОбъединенияСправочников()
	
	ТекстЗапроса = ТекстЗапросаСопоставленияДанных();
	
	ТекстОтбора1 = "
	|НЕ СтрокиМаршрутнойКарты.НомерСтроки IS NULL
	|	И (СтрокиСпецификации.НомерСтроки IS NULL
	|		ИЛИ СтрокиМаршрутнойКарты.ОперацияРедактирование <> ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)
	|		ИЛИ ВтЭтапы.ТехнологическийПроцесс <> ЗНАЧЕНИЕ(Справочник.ТехнологическиеПроцессы.ПустаяСсылка)
	|			И СтрокиМаршрутнойКарты.Вспомогательный
	|		ИЛИ ВтЭтапы.СодержитВложенныйМаршрут)
	|";
	
	ТекстОтбора2 = "
	|НЕ СтрокиМаршрутнойКарты.НомерСтроки IS NULL
	|	И (СтрокиСпецификации.НомерСтроки IS NULL
	|		ИЛИ СтрокиМаршрутнойКарты.ОперацияРедактирование <> ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)
	|		ИЛИ ВтЭтапы.ТехнологическийПроцесс <> ЗНАЧЕНИЕ(Справочник.ТехнологическиеПроцессы.ПустаяСсылка)
	|		ИЛИ ВтЭтапы.СодержитВложенныйМаршрут)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор1", ТекстОтбора1);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор2", ТекстОтбора2);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "");
	
	ТекстИтогов = "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяТЧ,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(МаршрутнаяКарта),
	|	МАКСИМУМ(КоэффициентМаршрутнойКарты),
	|	МАКСИМУМ(ТехнологическийПроцесс),
	|	МАКСИМУМ(ТехнологическийПроцессПредставление),
	|	МАКСИМУМ(ЕстьКонфликты),
	|	МАКСИМУМ(СодержитВложенныйМаршрут)
	|ПО
	|	Спецификация,
	|	Этап
	|";
	
	ТекстЗапроса = ТекстЗапроса + ТекстИтогов;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|;
	|
	|ВЫБРАТЬ
	|	ВтЭтапы.Спецификация                                       КАК Спецификация,
	|	ВтЭтапы.Этап                                               КАК Этап,
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.МаршрутныеКарты) КАК МаршрутнаяКарта,
	|	ВтЭтапы.КоэффициентМаршрутнойКарты                         КАК КоэффициентМаршрутнойКарты,
	|	ВтЭтапы.СодержитВложенныйМаршрут                           КАК СодержитВложенныйМаршрут,
	|	ВтЭтапы.ТехнологическийПроцесс                             КАК ТехнологическийПроцесс,
	|	ВтЭтапы.ТехнологическийПроцессПредставление                КАК ТехнологическийПроцессПредставление,
	|	Операции.Ссылка                                            КАК Операция,
	|	Операции.НомерОперации                                     КАК НомерОперации,
	|	Операции.НомерСледующейОперации                            КАК НомерСледующейОперации
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК Операции
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЭтапы КАК ВтЭтапы
	|		ПО ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.МаршрутныеКарты) = ВтЭтапы.МаршрутнаяКарта
	|
	|ГДЕ
	|	НЕ Операции.ПометкаУдаления
	|	И ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.МаршрутныеКарты).Статус В (
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхКарт.Действует),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхКарт.ВРазработке))
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутнаяКарта
	|
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МатериалыИУслуги", "%МатериалыИУслуги%");
	
	РезультатыЗапроса      = Запрос.ВыполнитьПакет();
	КоличествоРезультатов  = РезультатыЗапроса.Количество();
	
	РезультатСопоставление = РезультатыЗапроса[КоличествоРезультатов-2];
	ТаблицаОпераций        = РезультатыЗапроса[КоличествоРезультатов-1].Выгрузить();
	ТаблицаОпераций.Индексы.Добавить("Этап");
	
	Возврат Новый Структура("РезультатСопоставление, ТаблицаОпераций", РезультатСопоставление, ТаблицаОпераций);
	
КонецФункции

Функция ДанныеДляОбъединенияСправочниковСУчетомВложенныхМаршрутов(Спецификация, Этап, МаршрутнаяКарта, ТехнологическийПроцесс, Параметры)
	
	Операции = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКарты(
		МаршрутнаяКарта, 1, Неопределено, Неопределено, "Операции").Операции;
		
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.КлючСвязиРодитель КАК Идентификатор,
	|	Т.МаршрутнаяКарта   КАК МаршрутнаяКарта
	|
	|ПОМЕСТИТЬ ВтМаршрутныеКарты
	|ИЗ
	|	&ТаблицаОпераций КАК Т
	|
	|;
	|";
	
	ПараметрыЗапроса = ПараметрыЗапросаДанныеМаршрутныхКарт("ЛОЖЬ","ЛОЖЬ");
	ПараметрыЗапроса.ПоместитьРезультат = Истина;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеМаршрутныхКарт(ПараметрыЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаОпераций", Операции);
	Запрос.Выполнить();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	
	|	СтрокиМаршрутнойКарты.Идентификатор             КАК Идентификатор,
	|	&Спецификация                                   КАК Спецификация,
	|	&Этап                                           КАК Этап,
	|	&МаршрутнаяКарта                                КАК МаршрутнаяКарта,
	|	ЭтапыПроизводства.КоэффициентМаршрутнойКарты    КАК КоэффициентМаршрутнойКарты,
	|	&ТехнологическийПроцесс                         КАК ТехнологическийПроцесс,
	|	""МатериалыИУслуги""                            КАК ИмяТЧ,
	|	СтрокиМаршрутнойКарты.Вспомогательный           КАК ИсключитьИзСпецификации,
	|	СтрокиМаршрутнойКарты.Операция                  КАК Операция,
	|
	|	ВЫБОР
	|		КОГДА &МаршрутнаяКарта = СтрокиМаршрутнойКарты.МаршрутнаяКарта
	|			ТОГДА СтрокиМаршрутнойКарты.НомерСтроки
	|		ИНАЧЕ 99999
	|	КОНЕЦ                                           КАК НомерСтроки,
	|	СтрокиМаршрутнойКарты.Номенклатура              КАК Номенклатура,
	|	СтрокиМаршрутнойКарты.Характеристика            КАК Характеристика,
	|	СтрокиМаршрутнойКарты.КоличествоУпаковок        КАК Количество,
	|	СтрокиМаршрутнойКарты.АлгоритмРасчетаКоличества КАК АлгоритмРасчетаКоличества,
	|
	|	СтрокиСпецификации.КлючСвязи                    КАК КлючСвязиСтрокиСпецификации,
	|	(СтрокиСпецификации.НомерСтроки IS NULL)        КАК ЕстьКонфликты
	|
	|ИЗ
	|	ВтМатериалы КАК СтрокиМаршрутнойКарты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|	ПО ЭтапыПроизводства.Ссылка = &Этап
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК СтрокиСпецификации
	|	ПО &Спецификация = СтрокиСпецификации.Ссылка
	|		И &Этап = СтрокиСпецификации.Этап
	|		И СтрокиМаршрутнойКарты.Номенклатура = СтрокиСпецификации.Номенклатура
	|		И СтрокиМаршрутнойКарты.Характеристика = СтрокиСпецификации.Характеристика
	|		И СтрокиМаршрутнойКарты.КоличествоУпаковок * ЭтапыПроизводства.КоэффициентМаршрутнойКарты = СтрокиСпецификации.КоличествоУпаковок
	|		И СтрокиМаршрутнойКарты.СпособАвтовыбораНоменклатуры = СтрокиСпецификации.СпособАвтовыбораНоменклатуры
	|		И СтрокиМаршрутнойКарты.СпособАвтовыбораХарактеристики = СтрокиСпецификации.СпособАвтовыбораХарактеристики
	|		И СтрокиМаршрутнойКарты.СвойствоСодержащееНоменклатуру = СтрокиСпецификации.СвойствоСодержащееНоменклатуру
	|		И ВЫРАЗИТЬ(СтрокиМаршрутнойКарты.АлгоритмРасчетаКоличества КАК СТРОКА(1000)) = ВЫРАЗИТЬ(СтрокиСпецификации.АлгоритмРасчетаКоличества КАК СТРОКА(1000))
	|
	|ГДЕ
	|	&Отбор1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	
	|	СтрокиМаршрутнойКарты.Идентификатор,
	|	&Спецификация,
	|	&Этап,
	|	&МаршрутнаяКарта,
	|	ЭтапыПроизводства.КоэффициентМаршрутнойКарты,
	|	&ТехнологическийПроцесс,
	|	""Трудозатраты"",
	|	ИСТИНА,
	|	СтрокиМаршрутнойКарты.Операция,
	|
	|	ВЫБОР
	|		КОГДА &МаршрутнаяКарта = СтрокиМаршрутнойКарты.МаршрутнаяКарта
	|			ТОГДА СтрокиМаршрутнойКарты.НомерСтроки
	|		ИНАЧЕ 99999
	|	КОНЕЦ,
	|	СтрокиМаршрутнойКарты.ВидРабот,
	|	NULL,
	|	СтрокиМаршрутнойКарты.Количество,
	|	СтрокиМаршрутнойКарты.АлгоритмРасчетаКоличества,
	|
	|	СтрокиСпецификации.КлючСвязи,
	|	(СтрокиСпецификации.НомерСтроки IS NULL)
	|
	|ИЗ
	|	ВтТрудозатраты КАК СтрокиМаршрутнойКарты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|	ПО ЭтапыПроизводства.Ссылка = &Этап
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.Трудозатраты КАК СтрокиСпецификации
	|	ПО &Спецификация = СтрокиСпецификации.Ссылка
	|		И &Этап = СтрокиСпецификации.Этап
	|		И СтрокиМаршрутнойКарты.ВидРабот = СтрокиСпецификации.ВидРабот
	|		И СтрокиМаршрутнойКарты.Количество * ЭтапыПроизводства.КоэффициентМаршрутнойКарты = СтрокиСпецификации.Количество
	|		И ВЫРАЗИТЬ(СтрокиМаршрутнойКарты.АлгоритмРасчетаКоличества КАК СТРОКА(1000)) = ВЫРАЗИТЬ(СтрокиСпецификации.АлгоритмРасчетаКоличества КАК СТРОКА(1000))
	|
	|ГДЕ
	|	&Отбор2
	|
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор1", Параметры.Отбор1);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор2", Параметры.Отбор2);
	
	Если Параметры.Свойство("Все") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Спецификация",           Спецификация);
	Запрос.УстановитьПараметр("Этап",                   Этап);
	Запрос.УстановитьПараметр("МаршрутнаяКарта",        МаршрутнаяКарта);
	Запрос.УстановитьПараметр("ТехнологическийПроцесс", ТехнологическийПроцесс);
	
	РезультатСопоставление = Запрос.Выполнить();
	
	Возврат Новый Структура("РезультатСопоставление, ТаблицаОпераций", РезультатСопоставление, Операции);
	
КонецФункции

#КонецОбласти

#Область ДанныеМаршрутныхКарт

Функция ДанныеМаршрутнойКартыСВложеннымиМаршрутами(МаршрутнаяКарта, ПараметрыЗапроса = Неопределено)
	
	Результат = Новый Структура;
	
	Операции = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКарты(
		МаршрутнаяКарта, 1, Неопределено, Неопределено, "Операции").Операции;
		
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.КлючСвязиРодитель КАК Идентификатор,
	|	Т.МаршрутнаяКарта   КАК МаршрутнаяКарта
	|
	|ПОМЕСТИТЬ ВтМаршрутныеКарты
	|ИЗ
	|	&ТаблицаОпераций КАК Т
	|
	|;
	|";
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = ПараметрыЗапросаДанныеМаршрутныхКарт(,"ЛОЖЬ");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеМаршрутныхКарт(ПараметрыЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаОпераций", Операции);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатыЗапроса.Количество();
	
	Выборка = РезультатыЗапроса[КоличествоРезультатов-4].Выбрать();
	Пока Выборка.Следующий() Цикл
		Для каждого ИмяТаблицы Из СтрРазделить("СоответствиеСвойств,ОтборПоСвойствам", ",") Цикл
			Таблица = Выборка[ИмяТаблицы].Выгрузить();
			Если НЕ Результат.Свойство(ИмяТаблицы) Тогда
				Результат.Вставить(ИмяТаблицы, Таблица.СкопироватьКолонки());
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, Результат[ИмяТаблицы]);
		КонецЦикла;
	КонецЦикла;
	Результат.Вставить("МатериалыИУслуги", РезультатыЗапроса[КоличествоРезультатов-2].Выгрузить());
	Результат.Вставить("Трудозатраты",     РезультатыЗапроса[КоличествоРезультатов-1].Выгрузить());
	
	Для каждого КлючИЗначение Из Результат Цикл
		Индексы = Результат[КлючИЗначение.Ключ].Индексы; // Массив
		Индексы.Добавить("Идентификатор");
	КонецЦикла;
	
	Результат.Вставить("Операции", Операции);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

Функция ПараметрыЗапросаДанныеМаршрутныхКарт(ОтборМаршрутныеКарты = "ИСТИНА", ОтборОперации = "ИСТИНА", ОтборМатериалы = "ИСТИНА")
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("ОтборМаршрутныеКарты", ОтборМаршрутныеКарты);
	ПараметрыЗапроса.Вставить("ОтборОперации",        ОтборОперации);
	ПараметрыЗапроса.Вставить("ОтборМатериалы",       ОтборМатериалы);
	
	ПараметрыЗапроса.Вставить("ТекстСоединения",      "");
	ПараметрыЗапроса.Вставить("ПоместитьРезультат",   Ложь);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеМаршрутныхКарт(ПараметрыЗапроса)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВтМаршрутныеКарты.Идентификатор            КАК Идентификатор,
	|	МаршрутныеКарты.Ссылка                     КАК МаршрутнаяКарта,
	|	МаршрутныеКарты.Статус                     КАК Статус,
	|	МаршрутныеКарты.Наименование               КАК Наименование,
	|	МаршрутныеКарты.ДляВидаИзделий             КАК ДляВидаИзделий,
	|	МаршрутныеКарты.Подразделение              КАК Подразделение,
	|	МаршрутныеКарты.Описание                   КАК Описание,
	|	МаршрутныеКарты.РассчитыватьКоэффициент    КАК РассчитыватьКоэффициент,
	|	МаршрутныеКарты.КоэффициентЧислитель       КАК КоэффициентЧислитель,
	|	МаршрутныеКарты.КоэффициентЗнаменатель     КАК КоэффициентЗнаменатель,
	|
	|	МаршрутныеКарты.СоответствиеСвойств.(
	|		ВтМаршрутныеКарты.Идентификатор     КАК Идентификатор,
	|		Ссылка                              КАК МаршрутнаяКарта,
	|		СвойствоМатериала                   КАК СвойствоМатериала,
	|		СвойствоПродукции                   КАК СвойствоПродукции,
	|		ЗначениеСвойства                    КАК ЗначениеСвойства,
	|		АлгоритмРасчетаЗначения             КАК АлгоритмРасчетаЗначения,
	|		СпособПодбораЗначения               КАК СпособПодбораЗначения,
	|		КлючСвязи                           КАК КлючСвязи
	|
	|	)                                       КАК СоответствиеСвойств,
	|
	|	МаршрутныеКарты.ОтборПоСвойствам.(
	|		ВтМаршрутныеКарты.Идентификатор     КАК Идентификатор,
	|		Ссылка                              КАК МаршрутнаяКарта,
	|		КлючСвязи                           КАК КлючСвязи,
	|		Свойство                            КАК Свойство,
	|		Условие                             КАК Условие,
	|		Значение                            КАК Значение
	|
	|	)                                       КАК ОтборПоСвойствам,
	|
	|	ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.ТехнологическиеОперации КАК Операции
	|		ГДЕ
	|			Операции.Владелец = МаршрутныеКарты.Ссылка
	|			И Операции.СодержитВложенныйМаршрут
	|			И НЕ Операции.ПометкаУдаления)  КАК СодержитВложенныйМаршрут
	|
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтМаршрутныеКарты КАК ВтМаршрутныеКарты
	|		ПО ВтМаршрутныеКарты.МаршрутнаяКарта = МаршрутныеКарты.Ссылка
	|
	|ГДЕ
	|	&ОтборМаршрутныеКарты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор
	|
	|;
	|//////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВтМаршрутныеКарты.Идентификатор                            КАК Идентификатор,
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.МаршрутныеКарты) КАК МаршрутнаяКарта,
	|	Операции.Ссылка                                            КАК Операция,
	|	Операции.НомерОперации                                     КАК НомерОперации,
	|	Операции.НомерСледующейОперации                            КАК НомерСледующейОперации
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК Операции
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтМаршрутныеКарты КАК ВтМаршрутныеКарты
	|		ПО ВтМаршрутныеКарты.МаршрутнаяКарта = Операции.Владелец
	|
	|ГДЕ
	|	НЕ Операции.ПометкаУдаления
	|	И &ОтборОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор
	|
	|;
	|//////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВтМаршрутныеКарты.Идентификатор            КАК Идентификатор,
	|	Материалы.Ссылка                           КАК МаршрутнаяКарта,
	|	Материалы.НомерСтроки                      КАК НомерСтроки,
	|	Материалы.Номенклатура                     КАК Номенклатура,
	|	Материалы.Характеристика                   КАК Характеристика,
	|	Материалы.КоличествоУпаковок               КАК КоличествоУпаковок,
	|	Материалы.Упаковка                         КАК Упаковка,
	|	Материалы.СтатьяКалькуляции                КАК СтатьяКалькуляции,
	|	Материалы.СпособАвтовыбораНоменклатуры     КАК СпособАвтовыбораНоменклатуры,
	|	Материалы.СпособАвтовыбораХарактеристики   КАК СпособАвтовыбораХарактеристики,
	|	Материалы.СвойствоСодержащееНоменклатуру   КАК СвойствоСодержащееНоменклатуру,
	|	Материалы.АлгоритмРасчетаКоличества        КАК АлгоритмРасчетаКоличества,
	|	Материалы.ПрименениеМатериала              КАК ПрименениеМатериала,
	|	Материалы.Операция                         КАК Операция,
	|	Материалы.ОперацияРедактирование           КАК ОперацияРедактирование,
	|	Материалы.КлючСвязи                        КАК КлючСвязи,
	|	Материалы.АлгоритмАвтовыбораХарактеристики КАК АлгоритмАвтовыбораХарактеристики,
	|	Материалы.Вспомогательный                  КАК Вспомогательный
	|
	|ПОМЕСТИТЬ ВтМатериалы
	|
	|ИЗ 
	|	Справочник.МаршрутныеКарты.МатериалыИУслуги КАК Материалы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтМаршрутныеКарты КАК ВтМаршрутныеКарты
	|		ПО ВтМаршрутныеКарты.МаршрутнаяКарта = Материалы.Ссылка
	|
	|ГДЕ
	|	Материалы.Ссылка.ИспользоватьМатериалы
	|	И &ОтборМатериалы
	|
	|;
	|//////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВтМаршрутныеКарты.Идентификатор         КАК Идентификатор,
	|	Трудозатраты.Ссылка                     КАК МаршрутнаяКарта,
	|	Трудозатраты.НомерСтроки                КАК НомерСтроки,
	|	Трудозатраты.ВидРабот                   КАК ВидРабот,
	|	Трудозатраты.Количество                 КАК Количество,
	|	Трудозатраты.СтатьяКалькуляции          КАК СтатьяКалькуляции,
	|	Трудозатраты.Операция                   КАК Операция,
	|	Трудозатраты.ОперацияРедактирование     КАК ОперацияРедактирование,
	|	Трудозатраты.НазначениеРабот            КАК НазначениеРабот,
	|	Трудозатраты.АлгоритмРасчетаКоличества  КАК АлгоритмРасчетаКоличества,
	|	Трудозатраты.КлючСвязи                  КАК КлючСвязи
	|
	|ПОМЕСТИТЬ ВтТрудозатраты
	|
	|ИЗ
	|	Справочник.МаршрутныеКарты.Трудозатраты КАК Трудозатраты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтМаршрутныеКарты КАК ВтМаршрутныеКарты
	|		ПО ВтМаршрутныеКарты.МаршрутнаяКарта = Трудозатраты.Ссылка
	|
	|ГДЕ
	|	Трудозатраты.Ссылка.ИспользоватьТрудозатраты
	|
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборОперации",        ПараметрыЗапроса.ОтборОперации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборМатериалы",       ПараметрыЗапроса.ОтборМатериалы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборМаршрутныеКарты", ПараметрыЗапроса.ОтборМаршрутныеКарты);
	
	Если НЕ ПустаяСтрока(ПараметрыЗапроса.ТекстСоединения) Тогда
		МассивТекстов = Новый Массив;
		МассивТекстов.Добавить("ВтМаршрутныеКарты.МаршрутнаяКарта = МаршрутныеКарты.Ссылка");
		МассивТекстов.Добавить("ВтМаршрутныеКарты.МаршрутнаяКарта = Операции.Владелец");
		МассивТекстов.Добавить("ВтМаршрутныеКарты.МаршрутнаяКарта = Материалы.Ссылка");
		МассивТекстов.Добавить("ВтМаршрутныеКарты.МаршрутнаяКарта = Трудозатраты.Ссылка");
		Для каждого Текст Из МассивТекстов Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Текст, ПараметрыЗапроса.ТекстСоединения);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПараметрыЗапроса.ПоместитьРезультат Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтМатериалы",    "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтТрудозатраты", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстОсновногоОтбораМаршрутныхКарт(ИмяТаблицы = "МаршрутныеКарты") Экспорт
	
	ТекстЗапроса = 
	"ОсновнаяТаблица.Статус В (
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхКарт.Действует),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхКарт.ВРазработке))
	|	И ОсновнаяТаблица.ИспользоватьОперации
	|	И НЕ ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ТехнологическиеПроцессы КАК Т
	|				ГДЕ
	|					Т.Основание = ОсновнаяТаблица.Ссылка
	|					И НЕ Т.ПометкаУдаления)
	|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОсновнаяТаблица", ИмяТаблицы);
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаМаршрутныеКартыВсе(ТолькоКоличество = Истина)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&МаршрутнаяКарта
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|
	|ГДЕ
	|	&ОтборМаршрутныхКарт
	|";
	
	Если ТолькоКоличество Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаршрутнаяКарта", "КОЛИЧЕСТВО(МаршрутныеКарты.Ссылка) КАК Количество");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаршрутнаяКарта", "МаршрутныеКарты.Ссылка КАК МаршрутнаяКарта");
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборМаршрутныхКарт",ТекстОсновногоОтбораМаршрутныхКарт());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаМаршрутныеКартыМногократноИспользуемые()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЭтапыПроизводства.МаршрутнаяКарта КАК МаршрутнаяКарта
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|
	|ГДЕ
	|	ЭтапыПроизводства.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|	И ЭтапыПроизводства.Владелец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления
	|	И &ОтборМаршрутныхКарт
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроизводства.МаршрутнаяКарта
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыПроизводства.Ссылка) > 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводства.МаршрутнаяКарта.Код
	|
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ОтборМаршрутныхКарт",ТекстОсновногоОтбораМаршрутныхКарт("ЭтапыПроизводства.МаршрутнаяКарта"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставленияДанных()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Этапы.Владелец                     КАК Спецификация,
	|	Этапы.Ссылка                       КАК Этап,
	|	Этапы.МаршрутнаяКарта              КАК МаршрутнаяКарта,
	|	Этапы.КоэффициентМаршрутнойКарты   КАК КоэффициентМаршрутнойКарты,
	|	ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ  1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Т
	|		ГДЕ
	|			Т.Ссылка = Этапы.Владелец
	|			И Т.АлгоритмРасчетаКоличества ПОДОБНО &МатериалыИУслуги
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ ПЕРВЫЕ  1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.РесурсныеСпецификации.Трудозатраты КАК Т
	|		ГДЕ
	|			Т.Ссылка = Этапы.Владелец
	|			И Т.АлгоритмРасчетаКоличества ПОДОБНО &МатериалыИУслуги)                   КАК ЕстьСсылкиНаСтрокиВФормулах,
	|	ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ  1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.ТехнологическиеОперации КАК Операции
	|		ГДЕ
	|			Операции.Владелец = Этапы.МаршрутнаяКарта
	|			И Операции.СодержитВложенныйМаршрут
	|			И НЕ Операции.ПометкаУдаления)                                                  КАК СодержитВложенныйМаршрут,
	|	ЕСТЬNULL(Техпроцессы.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехнологическиеПроцессы.ПустаяСсылка)) КАК ТехнологическийПроцесс,
	|	ЕСТЬNULL(Техпроцессы.Наименование,"""")                                                 КАК ТехнологическийПроцессПредставление
	|
	|ПОМЕСТИТЬ ВтЭтапы
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Этапы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеПроцессы КАК Техпроцессы
	|	ПО Этапы.МаршрутнаяКарта = Техпроцессы.Основание
	|		И Техпроцессы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТехнологическихПроцессов.Действует)
	|	
	|ГДЕ
	|	Этапы.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|	И НЕ Этапы.ПометкаУдаления
	|	И НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ  1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ТехнологическиеОперации КАК Т
	|			ГДЕ
	|				Т.Владелец = Этапы.Ссылка И НЕ Т.ПометкаУдаления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутнаяКарта
	|
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВтЭтапы.Спецификация                               КАК Спецификация,
	|	ВтЭтапы.Этап                                       КАК Этап,
	|	ВтЭтапы.МаршрутнаяКарта                            КАК МаршрутнаяКарта,
	|	ВтЭтапы.КоэффициентМаршрутнойКарты                 КАК КоэффициентМаршрутнойКарты,
	|	ВтЭтапы.ТехнологическийПроцесс                     КАК ТехнологическийПроцесс,
	|	ВтЭтапы.ТехнологическийПроцессПредставление        КАК ТехнологическийПроцессПредставление,
	|	ВтЭтапы.СодержитВложенныйМаршрут                   КАК СодержитВложенныйМаршрут,
	|	""МатериалыИУслуги""                               КАК ИмяТЧ,
	|	СтрокиМаршрутнойКарты.Вспомогательный              КАК ИсключитьИзСпецификации,
	|	СтрокиМаршрутнойКарты.ОперацияРедактирование       КАК Операция,
	|	СтрокиМаршрутнойКарты.НомерСтроки                  КАК НомерСтроки,
	|	СтрокиМаршрутнойКарты.Номенклатура                 КАК Номенклатура,
	|	СтрокиМаршрутнойКарты.Характеристика               КАК Характеристика,
	|	СтрокиМаршрутнойКарты.КоличествоУпаковок           КАК Количество,
	|	СтрокиМаршрутнойКарты.АлгоритмРасчетаКоличества    КАК АлгоритмРасчетаКоличества,
	|	СтрокиСпецификации.КлючСвязи                       КАК КлючСвязиСтрокиСпецификации,
	|	(НЕ СтрокиМаршрутнойКарты.НомерСтроки IS NULL
	|		И СтрокиСпецификации.НомерСтроки IS NULL)
	|			ИЛИ ВтЭтапы.ЕстьСсылкиНаСтрокиВФормулах    КАК ЕстьКонфликты
	|	
	|ИЗ
	|	ВтЭтапы КАК ВтЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.МатериалыИУслуги КАК СтрокиМаршрутнойКарты
	|			ПО (ВтЭтапы.МаршрутнаяКарта = СтрокиМаршрутнойКарты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК СтрокиСпецификации
	|			ПО ВтЭтапы.Спецификация = СтрокиСпецификации.Ссылка
	|				И ВтЭтапы.Этап = СтрокиСпецификации.Этап
	|				И СтрокиМаршрутнойКарты.Номенклатура = СтрокиСпецификации.Номенклатура
	|				И СтрокиМаршрутнойКарты.Характеристика = СтрокиСпецификации.Характеристика
	|				И СтрокиМаршрутнойКарты.КоличествоУпаковок * ВтЭтапы.КоэффициентМаршрутнойКарты = СтрокиСпецификации.КоличествоУпаковок
	|				И СтрокиМаршрутнойКарты.СпособАвтовыбораНоменклатуры = СтрокиСпецификации.СпособАвтовыбораНоменклатуры
	|				И СтрокиМаршрутнойКарты.СпособАвтовыбораХарактеристики = СтрокиСпецификации.СпособАвтовыбораХарактеристики
	|				И СтрокиМаршрутнойКарты.СвойствоСодержащееНоменклатуру = СтрокиСпецификации.СвойствоСодержащееНоменклатуру
	|				И ВЫРАЗИТЬ(СтрокиМаршрутнойКарты.АлгоритмРасчетаКоличества КАК СТРОКА(1000)) = ВЫРАЗИТЬ(СтрокиСпецификации.АлгоритмРасчетаКоличества КАК СТРОКА(1000))
	|
	|ГДЕ
	|	&Отбор1
	|		
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВтЭтапы.Спецификация,
	|	ВтЭтапы.Этап,
	|	ВтЭтапы.МаршрутнаяКарта,
	|	ВтЭтапы.КоэффициентМаршрутнойКарты,
	|	ВтЭтапы.ТехнологическийПроцесс,
	|	ВтЭтапы.ТехнологическийПроцессПредставление,
	|	ВтЭтапы.СодержитВложенныйМаршрут,
	|	""Трудозатраты"",
	|	ИСТИНА,
	|	СтрокиМаршрутнойКарты.ОперацияРедактирование,
	|	СтрокиМаршрутнойКарты.НомерСтроки,
	|	СтрокиМаршрутнойКарты.ВидРабот,
	|	NULL,
	|	СтрокиМаршрутнойКарты.Количество,
	|	СтрокиМаршрутнойКарты.АлгоритмРасчетаКоличества,
	|	СтрокиСпецификации.КлючСвязи,
	|	(НЕ СтрокиМаршрутнойКарты.НомерСтроки IS NULL
	|		И СтрокиСпецификации.НомерСтроки IS NULL)
	|			ИЛИ ВтЭтапы.ЕстьСсылкиНаСтрокиВФормулах
	|	
	|ИЗ
	|	ВтЭтапы КАК ВтЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.Трудозатраты КАК СтрокиМаршрутнойКарты
	|			ПО (ВтЭтапы.МаршрутнаяКарта = СтрокиМаршрутнойКарты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.Трудозатраты КАК СтрокиСпецификации
	|			ПО ВтЭтапы.Спецификация = СтрокиСпецификации.Ссылка
	|				И ВтЭтапы.Этап = СтрокиСпецификации.Этап
	|				И СтрокиМаршрутнойКарты.ВидРабот = СтрокиСпецификации.ВидРабот
	|				И СтрокиМаршрутнойКарты.Количество * ВтЭтапы.КоэффициентМаршрутнойКарты = СтрокиСпецификации.Количество
	|				И ВЫРАЗИТЬ(СтрокиМаршрутнойКарты.АлгоритмРасчетаКоличества КАК СТРОКА(1000)) = ВЫРАЗИТЬ(СтрокиСпецификации.АлгоритмРасчетаКоличества КАК СТРОКА(1000))
	|
	|ГДЕ
	|	&Отбор2
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ПодключитьТехнологическийПроцесс(ДанныеСтроки)
	
	ОперацияОбъект = Справочники.ТехнологическиеОперации.СоздатьЭлемент();
	ОперацияОбъект.Заполнить(Неопределено);
	ОперацияОбъект.Владелец                            = ДанныеСтроки.Этап;
	ОперацияОбъект.Спецификация                        = ДанныеСтроки.Спецификация;
	ОперацияОбъект.Наименование                        = ДанныеСтроки.ТехнологическийПроцессПредставление;
	ОперацияОбъект.ТехнологическийПроцесс              = ДанныеСтроки.ТехнологическийПроцесс;
	ОперацияОбъект.КоэффициентТехнологическогоПроцесса = ДанныеСтроки.КоэффициентМаршрутнойКарты;
	ОперацияОбъект.НомерОперации                       = 1;
	ОперацияОбъект.НомерСледующейОперации              = 0;
	ОперацияОбъект.СодержитТехнологическийПроцесс      = Истина;
	ОперацияОбъект.ОбменДанными.Загрузка               = Истина;
	ОперацияОбъект.Записать();
	
КонецПроцедуры

Процедура ПривязатьСтрокуСпецификацииКОперации(ДанныеСтроки, СпецификацияОбъект, СоответствиеОпераций);
	
	Если ДанныеСтроки.ЕстьКонфликты Тогда
		Возврат;
	КонецЕсли;
	
	Операция = СоответствиеОпераций.Получить(ДанныеСтроки.Операция);
	Если Операция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОбъектСпецификацииДляОбработки(ДанныеСтроки.Спецификация, СпецификацияОбъект);
	
	ТабличнаяЧасть = СпецификацияОбъект[ДанныеСтроки.ИмяТЧ];
	
	Строка = ТабличнаяЧасть.Найти(ДанныеСтроки.КлючСвязиСтрокиСпецификации, "КлючСвязи");
	Если Строка <> Неопределено Тогда
		Строка.ЭтапРедактирование     = ДанныеСтроки.Этап;
		Строка.ОперацияРедактирование = Операция;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокуСпецификации(ДанныеСтроки, СпецификацияОбъект)
	
	Если НЕ ДанныеСтроки.ИсключитьИзСпецификации Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОбъектСпецификацииДляОбработки(ДанныеСтроки.Спецификация, СпецификацияОбъект);
	
	ТабличнаяЧасть = СпецификацияОбъект[ДанныеСтроки.ИмяТЧ];
	
	Строка = ТабличнаяЧасть.Найти(ДанныеСтроки.КлючСвязиСтрокиСпецификации, "КлючСвязи");
	Если Строка <> Неопределено Тогда
		
		ТабличнаяЧасть.Удалить(Строка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиТаблицуОпераций(Операции, Владелец, Спецификация, СоответствиеОпераций = Неопределено, Коэффициент = 1)
	
	Для Индекс = 0 По Операции.Количество() - 1 Цикл
		
		Строка = Операции[Индекс];
		
		ОперацияОбъект = Строка.Операция.Скопировать(); // СправочникОбъект.ТехнологическиеОперации
		ОперацияОбъект.Владелец               = Владелец;
		ОперацияОбъект.Спецификация           = Спецификация;
		ОперацияОбъект.НомерОперации          = Строка.НомерОперации;
		ОперацияОбъект.НомерСледующейОперации = Строка.НомерСледующейОперации;
		ОперацияОбъект.Количество             = ОперацияОбъект.Количество * Коэффициент;
		ОперацияОбъект.ВремяШтучное           = ОперацияОбъект.ВремяШтучное * Коэффициент;
		ОперацияОбъект.Идентификатор          = Индекс+1;
		ОперацияОбъект.ОбменДанными.Загрузка  = Истина;
		ОперацияОбъект.Записать();
		Если СоответствиеОпераций <> Неопределено Тогда
			СоответствиеОпераций.Вставить(Строка.Операция, ОперацияОбъект.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПеренестиТаблицуОперацийСВложеннымиМаршрутами(Операции, Владелец, Спецификация, Коэффициент = 1)
	
	ТаблицаСоответствияОпераций = Новый ТаблицаЗначений;
	ТаблицаСоответствияОпераций.Колонки.Добавить("Идентификатор");
	ТаблицаСоответствияОпераций.Колонки.Добавить("МаршрутнаяКарта");
	ТаблицаСоответствияОпераций.Колонки.Добавить("СоответствиеОпераций");
	
	Для Индекс = 0 По Операции.Количество() - 1 Цикл
		
		Строка = Операции[Индекс];
		
		ОперацияОбъект = Строка.Операция.Скопировать(); // СправочникОбъект.ТехнологическиеОперации
		ОперацияОбъект.Владелец               = Владелец;
		ОперацияОбъект.Спецификация           = Спецификация;
		ОперацияОбъект.НомерОперации          = Строка.НомерОперации;
		ОперацияОбъект.НомерСледующейОперации = Строка.НомерСледующейОперации;
		ОперацияОбъект.Количество             = ОперацияОбъект.Количество * Коэффициент;
		ОперацияОбъект.ВремяШтучное           = ОперацияОбъект.ВремяШтучное * Коэффициент;
		ОперацияОбъект.Идентификатор          = Индекс+1;
		ОперацияОбъект.ОбменДанными.Загрузка  = Истина;
		ОперацияОбъект.Записать();
		
		СтрокаСоответствия = ТаблицаСоответствияОпераций.Найти(Строка.КлючСвязиРодитель, "Идентификатор");
		Если СтрокаСоответствия = Неопределено Тогда
			СтрокаСоответствия = ТаблицаСоответствияОпераций.Добавить();
			СтрокаСоответствия.Идентификатор        = Строка.КлючСвязиРодитель;
			СтрокаСоответствия.МаршрутнаяКарта      = Строка.МаршрутнаяКарта;
			СтрокаСоответствия.СоответствиеОпераций = Новый Соответствие;
		КонецЕсли;
		
		СтрокаСоответствия.СоответствиеОпераций.Вставить(Строка.Операция, ОперацияОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат ТаблицаСоответствияОпераций;
	
КонецФункции

Процедура ПроверитьОчиститьАлгоритмРасчетаКоличества(ДанныеСтроки)
	
	Если СтрНайти(ДанныеСтроки.АлгоритмРасчетаКоличества, "[Операция") > 0
		ИЛИ СтрНайти(ДанныеСтроки.АлгоритмРасчетаКоличества, "[ВыходныеИзделия") > 0
		ИЛИ СтрНайти(ДанныеСтроки.АлгоритмРасчетаКоличества, "[МатериалыИУслуги") > 0 Тогда
		ДанныеСтроки.АлгоритмРасчетаКоличества = "";
	КонецЕсли;
	
КонецПроцедуры

Функция СобытиеСозданиеТиповыхТехнологическихПроцессов()
	
	Возврат НСтр("ru = 'НСИ производства. Создание типовых технологических процессов.';
				|en = 'Manufacturing master data. Generating standard technological processes.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеПереносОперацийВРесурсныеСпецификации()
	
	Возврат НСтр("ru = 'НСИ производства. Перенос операций в ресурсные спецификации.';
				|en = 'Manufacturing master data. Transferring operations to bills of materials.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ВариантОтбораМаршрутныхКартМногократноИспользуемые()
	Возврат 1;
КонецФункции

Функция ВариантОтбораМаршрутныхКартПоОтбору()
	Возврат 2;
КонецФункции

Функция ВариантОтбораМаршрутныхКартВсе()
	Возврат 0;
КонецФункции

Процедура ПолучитьОбъектСпецификацииДляОбработки(Спецификация, СпецификацияОбъект)
	
	Если СпецификацияОбъект <> Неопределено Тогда
		Возврат; // объект уже получен
	КонецЕсли;
	
	СпецификацияОбъект = Спецификация.ПолучитьОбъект();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
