
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолноеИмяОбъекта = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	Параметры.Свойство("РезультатПроверки", РезультатПроверки);
	Параметры.Свойство("Документ",          Документ);
	
	Если РезультатПроверки = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	
	ЗаполнитьРезультатыПроверок(РезультатПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаполнитьРезультатыПроверок"
		И Источник = Документ Тогда
		ЗаполнитьРезультатыПроверок(Параметр);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияПроверкаФорматаЭлектронногоДокументаВНастройкахЭДООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	ПараметрыОткрытия.Вставить("Источник", Контрагент);
	НастройкиЭДОКлиент.ОткрытьФормуНастроекЭДО(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаличиеОшибокВКодахМаркировкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьНаличиеОшибокВКодахМаркировки();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияФоноваяПроверкаЭДНажатие(Элемент)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПанелиАдминистрирования", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияИСМП.Форма.НастройкиИСМП",, ЭтотОбъект,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроверкаМестОсуществленияДеятельностиОрганизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПроверкаМестОсуществленияДеятельностиОрганизации" Тогда
		СтандартнаяОбработка = Ложь;
		Данные = ПолучитьРезультатыПроверкиПоКлючу(РезультатПроверки.Результаты, НавигационнаяСсылкаФорматированнойСтроки);
		ЗапроситьСписокМестОсуществленияДеятельности(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроверкаМестОсуществленияДеятельностиКонтрагентаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПроверкаМестОсуществленияДеятельностиКонтрагента" Тогда
		СтандартнаяОбработка = Ложь;
		Данные = ПолучитьРезультатыПроверкиПоКлючу(РезультатПроверки.Результаты, НавигационнаяСсылкаФорматированнойСтроки);
		ЗапроситьСписокМестОсуществленияДеятельности(Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПовторнуюПроверку(Команда)
	
	ВыполнитьПовторнуюПроверкуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПроверку(Команда)
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Документ",            РезультатПроверки.Документ);
	ПараметрыИзменения.Вставить("ПроверкаОтключена",   Не РезультатПроверки.ПроверкаОтключена);
	ПараметрыИзменения.Вставить("ИдентификаторЗаписи", РезультатПроверки.ИдентификаторЗаписи);
	
	ДанныеДляИзменения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыИзменения);
	
	СоответствиеТребованиямГИСМТВызовСервера.ОтключитьПроверку(ДанныеДляИзменения);
	
	РезультатПроверки.ПроверкаОтключена = Не РезультатПроверки.ПроверкаОтключена;
	
	Элементы.ФормаОтключитьПроверку.Заголовок = СоответствиеТребованиямГИСМТКлиентСервер.ЗаголовокКомандыПроверкаОтключена(
		РезультатПроверки.ПроверкаОтключена);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРезультатыПроверок(РезультатПроверки)
	
	Статус   = РезультатПроверки.Статус;
	
	ВозможенЭДО = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.СодержитТип(ТипЗнч(Документ));
	
	Если ВозможенЭДО Тогда
		СтатусДокументооборота     = ОбменСКонтрагентами.СтатусДокументооборота(Документ);
		СтатусЭДО = СтатусДокументооборота.Статус;
		ЭлектронныйДокумент = СтатусДокументооборота.ЭлектронныйДокумент;
	КонецЕсли;
	
	РеквизитыДокумента = СоответствиеТребованиямГИСМТ.РеквизитыДокумента(Документ);
	Организация = РеквизитыДокумента.Организация;
	Контрагент  = РеквизитыДокумента.Контрагент;
	
	СформироватьЗаголовкиФормы();
	
	РезультатыПроверок         = Новый Соответствие;
	ПроверкиСОшибкамиПроцесса  = Новый Массив;
	
	Если РезультатПроверки.Свойство("Результаты") И ТипЗнч(РезультатПроверки.Результаты) = Тип("ХранилищеЗначения") Тогда
		
		Результаты = РезультатПроверки.Результаты.Получить();
		
		РезультатыПроверок         = Результаты.РезультатыПроверок;
		ПроверкиСОшибкамиПроцесса  = Результаты.ПроверкиСОшибкамиПроцесса;
		
	КонецЕсли;
	
	ВидимостьИДоступностьКомандыПовторнойПроверки(РезультатПроверки, Результаты);
	ВидимостьЗаголовкаПоСтатусу();
	НастроитьВидимостьФоновойПроверкиЭД(ЭтотОбъект);
	
	ИдентификаторыПроверок = СоответствиеТребованиямГИСМТ.ИдентификаторыПроверок();
	
	ИдентификаторыПроверокСОшибками = Новый Соответствие;
	Для Каждого ИдентификаторПроверки Из ПроверкиСОшибкамиПроцесса Цикл
		
		ИдентификаторыПроверокСОшибками[ИдентификаторПроверки] = Истина;
		
		Если ИдентификаторПроверки = ИдентификаторыПроверок.НаличиеОшибокВКодахМаркировки Тогда
			
			ОшибкиВКодахМаркировки.Загрузить(
				РезультатыПроверок[ИдентификаторПроверки]);
		
		ИначеЕсли СтрНайти(ИдентификаторПроверки, "КодОшибкиГИСМТ") > 0 Тогда
			
			ОбщиеОшибки.Добавить(
				РезультатыПроверок[ИдентификаторПроверки]);
			ИдентификаторыПроверокСОшибками.Вставить(ИдентификаторыПроверок.ПрочаяПроверкаГИСМТ, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИдентификаторПроверкиКлючЗначение Из ИдентификаторыПроверок Цикл
		
		ИдентификаторПроверки = ИдентификаторПроверкиКлючЗначение.Значение;
		ЕстьОшибка = (ИдентификаторыПроверокСОшибками[ИдентификаторПроверки] <> Неопределено);
		
		УстановитьВидимостьГруппыПроверкиПоИдентификатору(ИдентификаторПроверки, ЕстьОшибка);
		
		Если ЕстьОшибка Тогда
			СформироватьПредставлениеОшибки(ИдентификаторПроверки, РезультатыПроверок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьИДоступностьКомандыПовторнойПроверки(РезультатПроверки, Результаты)
	
	Если РезультатПроверки.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута Тогда
		Элементы.ВыполнитьПовторнуюПроверку.Видимость = Ложь;
		Возврат;
	ИначеЕсли РезультатПроверки.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ОжидаетсяПодтверждениеОтгрузки
		Или РезультатПроверки.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ОжидаетсяАннулированиеПодтвержденияОтгрузки Тогда
		Элементы.ВыполнитьПовторнуюПроверку.Видимость = Ложь;
		Элементы.ФормаОтключитьПроверку.Видимость     = Ложь;
		Возврат;
	ИначеЕсли РезультатПроверки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ Тогда
		
		НадписьПовторнаяПроверкаНевозможна = Новый Массив;
		
		НедоступныеОшибки = СоответствиеТребованиямГИСМТ.ОшибкиНедоступныеДляПовторнойОтправкиДокумента();
		Для Каждого КодОшибки Из Результаты.КодыОшибок Цикл
			ОписаниеОшибки = НедоступныеОшибки[КодОшибки];
			Если ОписаниеОшибки <> Неопределено Тогда
				НадписьПовторнаяПроверкаНевозможна.Добавить(Символы.ПС);
				СтрокаСообщение = СтрШаблон(
				НСтр("ru = '- для кода ошибки %1 (%2) недоступна повторная проверка';
					|en = '- для кода ошибки %1 (%2) недоступна повторная проверка'"),
					КодОшибки, ОписаниеОшибки);
				НадписьПовторнаяПроверкаНевозможна.Добавить(СтрокаСообщение);
			КонецЕсли;
		КонецЦикла;
		
		Если НадписьПовторнаяПроверкаНевозможна.Количество() = 0 Тогда
		
			ОсталосьСекунд = Результаты.ДатаПоследнейОшибки - ТекущаяДатаСеанса() + 4*60*60;
			
			Если ОсталосьСекунд > 0 Тогда
				
				// Время
				Время = Цел(ОсталосьСекунд / 3600);
				
				Если Время > 0 Тогда
					ТипВремени = НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа';
										|en = ';%1 час;;%1 часа;%1 часов;%1 часа'");
				Иначе
					Время = Цел(ОсталосьСекунд/60);
					ТипВремени = НСтр("ru = ';%1 минута;;%1 минуты;%1 минут;%1 минуты';
										|en = ';%1 минута;;%1 минуты;%1 минут;%1 минуты'");
				КонецЕсли;
				
				ПредставлениеВремени = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ТипВремени, Время);
				
				НадписьПовторнаяПроверкаНевозможна.Добавить(Символы.ПС);
				СтрокаСообщение = СтрШаблон(
				НСтр("ru = '- повторная проверка возможна через %1';
					|en = '- повторная проверка возможна через %1'"),
					ПредставлениеВремени);
					
				НадписьПовторнаяПроверкаНевозможна.Добавить(СтрокаСообщение);
			КонецЕсли;
		
		КонецЕсли;
		
		Если НадписьПовторнаяПроверкаНевозможна.Количество() > 0 Тогда
			НадписьПовторнаяПроверкаНевозможна.Вставить(0,НСтр("ru = 'Отправить УПД на повторную проверку невозможно по причине:';
																|en = 'Отправить УПД на повторную проверку невозможно по причине:'"));
			Элементы.ВыполнитьПовторнуюПроверкуРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(НадписьПовторнаяПроверкаНевозможна);
			Элементы.ВыполнитьПовторнуюПроверку.Доступность = Ложь;
		КонецЕсли;
		
		ЗаголовокКоманды = НСтр("ru = 'Отправить УПД на повторную обработку в ГИС МТ';
								|en = 'Отправить УПД на повторную обработку в ГИС МТ'");
		
	ИначеЕсли РезультатПроверки.ВыполненаПредварительнаяПроверка Тогда
		ЗаголовокКоманды = НСтр("ru = 'Отправить УПД на повторную предварительную проверку в ГИС МТ';
								|en = 'Отправить УПД на повторную предварительную проверку в ГИС МТ'");
	Иначе
		ЗаголовокКоманды = НСтр("ru = 'Выполнить повторную проверку в ГИС МТ';
								|en = 'Выполнить повторную проверку в ГИС МТ'");
	КонецЕсли;
	
	Элементы.ВыполнитьПовторнуюПроверку.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокКоманды);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовкиФормы()
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ПроверенныйДокументСсылка = ЭлектронныйДокумент;
		ПроверенныйДокументПредставление = Лев(РезультатПроверки.Идентификатор, 57) + "...";
	Иначе
		ПроверенныйДокументСсылка = Документ;
		ПроверенныйДокументПредставление = Строка(Документ);
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой
		Или Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута Тогда
		
		Заголовок = НСтр("ru = 'Требования ГИС МТ не выполнены';
						|en = 'Требования ГИС МТ не выполнены'");
		
		НадписьДекорацияЗавершеноСОшибкой = Новый Массив;
		НадписьДекорацияЗавершеноСОшибкой.Добавить(НСтр("ru = 'При проверке документа';
														|en = 'При проверке документа'"));
		НадписьДекорацияЗавершеноСОшибкой.Добавить(" ");
		НадписьДекорацияЗавершеноСОшибкой.Добавить(
			
			Новый ФорматированнаяСтрока(
				ПроверенныйДокументПредставление,,,,
				ПолучитьНавигационнуюСсылку(ПроверенныйДокументСсылка)));
		НадписьДекорацияЗавершеноСОшибкой.Добавить(" ");
		НадписьДекорацияЗавершеноСОшибкой.Добавить(НСтр("ru = 'найдены ошибки.';
														|en = 'найдены ошибки.'"));
		
		Если ЭтоВходящийЭД Тогда
			
			Если СтатусЭДО = "Получен" Тогда
				НадписьДекорацияЗавершеноСОшибкой.Добавить(Символы.ПС);
				НадписьДекорацияЗавершеноСОшибкой.Добавить(НСтр("ru = 'Документ не может быть утвержден.';
																|en = 'Документ не может быть утвержден.'"));
			КонецЕсли;
			
		Иначе
			
			Если    СтатусЭДО = "ЭДОНеИспользуется"
				Или СтатусЭДО = "ЭДОНеНастроен"
				Или СтатусЭДО = "НеНачат" Тогда
				НадписьДекорацияЗавершеноСОшибкой.Добавить(Символы.ПС);
				НадписьДекорацияЗавершеноСОшибкой.Добавить(НСтр("ru = 'Документ не может быть отправлен.';
																|en = 'Документ не может быть отправлен.'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ДекорацияЗавершеноСОшибкой.Заголовок = Новый ФорматированнаяСтрока(НадписьДекорацияЗавершеноСОшибкой);
		
	ИначеЕсли Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСПредупреждением Тогда
		
		Заголовок = НСтр("ru = 'Рекомендации ГИС МТ';
						|en = 'Рекомендации ГИС МТ'");
		
		НадписьДекорацияЗавершеноСПредупреждением = Новый Массив;
		
		Если ЭтоВходящийЭД Тогда
			
			Если СтатусЭДО = "Получен" Тогда
				НадписьДекорацияЗавершеноСОшибкой.Добавить(Символы.ПС);
				НадписьДекорацияЗавершеноСОшибкой.Добавить(НСтр("ru = 'Перед утверждением электронного документа';
																|en = 'Перед утверждением электронного документа'"));
			Иначе
				НадписьДекорацияЗавершеноСПредупреждением.Добавить(НСтр("ru = 'По документу';
																		|en = 'По документу'"));
			КонецЕсли;
			
		Иначе
			
			Если    СтатусЭДО = "ЭДОНеИспользуется"
				Или СтатусЭДО = "ЭДОНеНастроен"
				Или СтатусЭДО = "НеНачат" Тогда
				НадписьДекорацияЗавершеноСПредупреждением.Добавить(НСтр("ru = 'Перед отправкой документа';
																		|en = 'Перед отправкой документа'"));
			Иначе
				НадписьДекорацияЗавершеноСПредупреждением.Добавить(НСтр("ru = 'По документу';
																		|en = 'По документу'"));
			КонецЕсли;
			
		КонецЕсли;
		
		НадписьДекорацияЗавершеноСПредупреждением.Добавить(" ");
		НадписьДекорацияЗавершеноСПредупреждением.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(Документ),,,,
				ПолучитьНавигационнуюСсылку(Документ)));
		НадписьДекорацияЗавершеноСПредупреждением.Добавить(" ");
		НадписьДекорацияЗавершеноСПредупреждением.Добавить(НСтр("ru = 'рекомендуется';
																|en = 'рекомендуется'"));
		НадписьДекорацияЗавершеноСПредупреждением.Добавить(Символы.ПС);
		НадписьДекорацияЗавершеноСПредупреждением.Добавить(НСтр("ru = 'выполнить действия:';
																|en = 'выполнить действия:'"));
		Элементы.ДекорацияЗавершеноСПредупреждением.Заголовок = Новый ФорматированнаяСтрока(НадписьДекорацияЗавершеноСПредупреждением);
		
	ИначеЕсли Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ОжидаетсяАннулированиеПодтвержденияОтгрузки
		Или Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ОжидаетсяПодтверждениеОтгрузки Тогда
		
		Заголовок = НСтр("ru = 'Ожидается передача данных в ГИС МТ';
						|en = 'Ожидается передача данных в ГИС МТ'");
		
		НадписьДекорацияОжидаетсяДействие = Новый Массив;
		
		НадписьДекорацияОжидаетсяДействие.Добавить(НСтр("ru = 'Для дальнейшей обработки документа';
														|en = 'Для дальнейшей обработки документа'"));
		
		НадписьДекорацияОжидаетсяДействие.Добавить(" ");
		НадписьДекорацияОжидаетсяДействие.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(Документ),,,,
				ПолучитьНавигационнуюСсылку(Документ)));
		НадписьДекорацияОжидаетсяДействие.Добавить(" ");
		НадписьДекорацияОжидаетсяДействие.Добавить(НСтр("ru = 'необходимо';
														|en = 'необходимо'"));
		НадписьДекорацияОжидаетсяДействие.Добавить(Символы.ПС);
		НадписьДекорацияОжидаетсяДействие.Добавить(НСтр("ru = 'обновить в ГИС МТ данные по отгрузке.';
														|en = 'обновить в ГИС МТ данные по отгрузке.'"));
		Элементы.ДекорацияОжидаетсяДействие.Заголовок = Новый ФорматированнаяСтрока(НадписьДекорацияОжидаетсяДействие);
		
	КонецЕсли;
	
	Элементы.ФормаОтключитьПроверку.Заголовок = СоответствиеТребованиямГИСМТКлиентСервер.ЗаголовокКомандыПроверкаОтключена(
		РезультатПроверки.ПроверкаОтключена);;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьЗаголовкаПоСтатусу()
	
	Если Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой
		Или Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута Тогда
		
		Элементы.ГруппаЗаголовокЗавершеноСОшибкой.Видимость         = Истина;
		Элементы.ГруппаЗаголовокЗавершеноСПредупреждением.Видимость = Ложь;
		Элементы.ГруппаЗаголовокОжидаютсяДействия.Видимость         = Ложь;
		
	ИначеЕсли Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСПредупреждением Тогда
		
		Элементы.ГруппаЗаголовокЗавершеноСОшибкой.Видимость         = Ложь;
		Элементы.ГруппаЗаголовокЗавершеноСПредупреждением.Видимость = Истина;
		Элементы.ГруппаЗаголовокОжидаютсяДействия.Видимость         = Ложь;
		
	ИначеЕсли Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ОжидаетсяПодтверждениеОтгрузки
		Или Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ОжидаетсяАннулированиеПодтвержденияОтгрузки Тогда
		
		Элементы.ГруппаЗаголовокЗавершеноСОшибкой.Видимость         = Ложь;
		Элементы.ГруппаЗаголовокЗавершеноСПредупреждением.Видимость = Ложь;
		Элементы.ГруппаЗаголовокОжидаютсяДействия.Видимость         = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьФоновойПроверкиЭД(Форма)
	Форма.Элементы.ГруппаФоноваяПроверкаЭД.Видимость = Не ФоноваяПроверкаДокументовВключена();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФоноваяПроверкаДокументовВключена()
	Возврат ИнтеграцияИСМПКлиентСерверПовтИсп.ФоноваяПроверкаДокументовГИСМТРазрешена();
КонецФункции

&НаСервере
Процедура СформироватьПредставлениеОшибки(ИдентификаторПроверки, РезультатыПроверок)
	
	НадписьДляДекорацииСОшибкой = Новый Массив;
	
	ЗначениеПроверки = РезультатыПроверок[ИдентификаторПроверки];
	ЭлементДекорации = Элементы.Найти(СтрШаблон("Декорация%1", ИдентификаторПроверки));
	
	Если ЭлементДекорации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторПроверки = ИдентификаторыПроверок.НаличиеРегистрацииОрганизацииВГИСМТ Тогда
		
		Если ЗначениеПроверки = Неопределено Тогда
			НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Отсутствует регистрация организации';
														|en = 'Отсутствует регистрация организации'"));
			НадписьДляДекорацииСОшибкой.Добавить(" ");
			НадписьДляДекорацииСОшибкой.Добавить(
				Новый ФорматированнаяСтрока(
					Строка(Организация),,,,
					ПолучитьНавигационнуюСсылку(Организация)));
			НадписьДляДекорацииСОшибкой.Добавить(" ");
			НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'в ГИС МТ';
														|en = 'в ГИС МТ'"));
		Иначе
			НадписьДляДекорацииСОшибкой.Добавить(ЗначениеПроверки);
		КонецЕсли;
	ИначеЕсли ИдентификаторПроверки = ИдентификаторыПроверок.НаличиеРегистрацииКонтрагентаВГИСМТ Тогда
		Если ЗначениеПроверки = Неопределено Тогда
			НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Отсутствует регистрация контрагента';
														|en = 'Отсутствует регистрация контрагента'"));
			НадписьДляДекорацииСОшибкой.Добавить(" ");
			НадписьДляДекорацииСОшибкой.Добавить(
				Новый ФорматированнаяСтрока(
					Строка(Контрагент),,,,
					ПолучитьНавигационнуюСсылку(Контрагент)));
			НадписьДляДекорацииСОшибкой.Добавить(" ");
			НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'в ГИС МТ';
														|en = 'в ГИС МТ'"));
		Иначе
			НадписьДляДекорацииСОшибкой.Добавить(ЗначениеПроверки);
		КонецЕсли;
		
	ИначеЕсли ИдентификаторПроверки = ИдентификаторыПроверок.НаличиеИдентификатораЭДОЛайтУОрганизации Тогда
		
		НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'В личном кабинете ГИС МТ у организации';
													|en = 'В личном кабинете ГИС МТ у организации'"));
		НадписьДляДекорацииСОшибкой.Добавить(" ");
		НадписьДляДекорацииСОшибкой.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(Организация),,,,
				ПолучитьНавигационнуюСсылку(Организация)));
		НадписьДляДекорацииСОшибкой.Добавить(" ");
		НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'отсутствует идентификатор ЭДО Лайт';
													|en = 'отсутствует идентификатор ЭДО Лайт'"));
		
	ИначеЕсли ИдентификаторПроверки = ИдентификаторыПроверок.НаличиеИдентификатораЭДОЛАйтУКонтрагента Тогда
		
		НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'В личном кабинете ГИС МТ у контрагента';
													|en = 'В личном кабинете ГИС МТ у контрагента'"));
		НадписьДляДекорацииСОшибкой.Добавить(" ");
		НадписьДляДекорацииСОшибкой.Добавить(
			Новый ФорматированнаяСтрока(
				Строка(Контрагент),,,,
				ПолучитьНавигационнуюСсылку(Контрагент)));
		НадписьДляДекорацииСОшибкой.Добавить(" ");
		НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'отсутствует идентификатор ЭДО Лайт';
													|en = 'отсутствует идентификатор ЭДО Лайт'"));
		
	ИначеЕсли ИдентификаторПроверки = ИдентификаторыПроверок.НаличиеОшибокВКодахМаркировки Тогда
		
		КоличествоОшибокКМ = ОшибкиВКодахМаркировки.Количество();
		
		НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Коды маркировки с';
													|en = 'Коды маркировки с'"));
		НадписьДляДекорацииСОшибкой.Добавить(" ");
		НадписьДляДекорацииСОшибкой.Добавить(
			Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru = 'ошибками (%1)';
								|en = 'ошибками (%1)'"), КоличествоОшибокКМ),,,,
				ИдентификаторПроверки));
	
	ИначеЕсли ИдентификаторПроверки = ИдентификаторыПроверок.ПрочаяПроверкаГИСМТ Тогда
		
		НадписьДляДекорацииСОшибкой = СформироватьПредставлениеПрочаяПроверкаГИСМТ();
		
	ИначеЕсли ИдентификаторПроверки = ИдентификаторыПроверок.ПроверкаФорматаЭлектронногоДокументаВНастройкахЭДО Тогда
		
		НадписьДляДекорацииСОшибкой =
			Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru = 'Поменяйте формат электронного документа на один из доступных: %1';
								|en = 'Поменяйте формат электронного документа на один из доступных: %1'"), ЗначениеПроверки));
		ЭлементДекорации.РасширеннаяПодсказка.Заголовок = НадписьДляДекорацииСОшибкой;
		
		Возврат;
		
	ИначеЕсли ИдентификаторПроверки = ИдентификаторыПроверок.ПроверкаМестОсуществленияДеятельностиОрганизации Тогда
		
		ЭлементДекорации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
		Если ТипЗнч(ЗначениеПроверки) = Тип("Структура")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗначениеПроверки, "ШаблонОшибки") Тогда
			
			Если ЗначениеПроверки.ШаблонОшибки = "НетИННГрузоотправителя" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Не заполнен ИНН грузоотправителя';
															|en = 'Не заполнен ИНН грузоотправителя'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Грузоотправитель),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Грузоотправитель)));
				
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетКППГрузоотправителя" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Не заполнен КПП грузоотправителя';
															|en = 'Не заполнен КПП грузоотправителя'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Грузоотправитель),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Грузоотправитель)));
				
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетИННОрганизации" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Не заполнен ИНН организации';
															|en = 'Не заполнен ИНН организации'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Организация),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Организация)));
				
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетКППОрганизации" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Не заполнен КПП организации';
															|en = 'Не заполнен КПП организации'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Организация),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Организация)));
				
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетМОДОрганизацииПоАдресу" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для организации';
															|en = 'Для организации'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Организация),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Организация)));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД по адресу';
															|en = 'нет активных МОД по адресу'"));
				НадписьДляДекорацииСОшибкой.Добавить(Символы.ПС);
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						ЗначениеПроверки.АдресМОД,
						ШрифтыСтиля.ВажнаяНадписьШрифт));
				
				Если ЗначениеПроверки.Свойство("ИНН_МОД")
					И ЗначениеЗаполнено(ЗначениеПроверки.ИНН_МОД) Тогда
					НадписьДляДекорацииСОшибкой.Добавить(" ");
					НадписьДляДекорацииСОшибкой.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'Запросить';
								|en = 'Запросить'"),,,,
							ИдентификаторПроверки));
				КонецЕсли;
						
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетМОДГрузоотправителяПоАдресу" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для грузоотправителя';
															|en = 'Для грузоотправителя'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Грузоотправитель),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Грузоотправитель)));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД по адресу';
															|en = 'нет активных МОД по адресу'"));
				НадписьДляДекорацииСОшибкой.Добавить(Символы.ПС);
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						ЗначениеПроверки.АдресМОД,
						ШрифтыСтиля.ВажнаяНадписьШрифт));
				
				Если ЗначениеПроверки.Свойство("ИНН_МОД")
					И ЗначениеЗаполнено(ЗначениеПроверки.ИНН_МОД) Тогда
					НадписьДляДекорацииСОшибкой.Добавить(" ");
					НадписьДляДекорацииСОшибкой.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'Запросить';
								|en = 'Запросить'"),,,,
							ИдентификаторПроверки));
				КонецЕсли;
						
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетМОДГрузоотправителя" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для грузоотправителя';
															|en = 'Для грузоотправителя'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Грузоотправитель),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Грузоотправитель)));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД';
															|en = 'нет активных МОД'"));
				
			Иначе
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для организации';
															|en = 'Для организации'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(Организация),,,,
						ПолучитьНавигационнуюСсылку(Организация)));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД';
															|en = 'нет активных МОД'"));
				
			КонецЕсли;
			
		Иначе
			
			НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для организации';
														|en = 'Для организации'"));
			НадписьДляДекорацииСОшибкой.Добавить(" ");
			НадписьДляДекорацииСОшибкой.Добавить(
				Новый ФорматированнаяСтрока(
					Строка(Организация),,,,
					ПолучитьНавигационнуюСсылку(Организация)));
			НадписьДляДекорацииСОшибкой.Добавить(" ");
			НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД';
														|en = 'нет активных МОД'"));
			
		КонецЕсли;
		
	ИначеЕсли ИдентификаторПроверки = ИдентификаторыПроверок.ПроверкаМестОсуществленияДеятельностиКонтрагента Тогда
		
		ЭлементДекорации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
		Если ТипЗнч(ЗначениеПроверки) = Тип("Структура")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗначениеПроверки, "ШаблонОшибки") Тогда
		
			Если ЗначениеПроверки.ШаблонОшибки = "НетИННГрузополучателя" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Не заполнен ИНН грузополучателя';
															|en = 'Не заполнен ИНН грузополучателя'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Грузополучатель),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Грузополучатель)));
				
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетКППГрузополучателя" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Не заполнен КПП грузополучателя';
															|en = 'Не заполнен КПП грузополучателя'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Грузополучатель),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Грузополучатель)));
				
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетИННКонтрагента" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Не заполнен ИНН контрагента';
															|en = 'Не заполнен ИНН контрагента'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Контрагент),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Контрагент)));
				
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетКППКонтрагента" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Не заполнен КПП контрагента';
															|en = 'Не заполнен КПП контрагента'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Контрагент),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Контрагент)));
				
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетМОДКонтрагентаПоАдресу" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для контрагента';
															|en = 'Для контрагента'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Контрагент),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Контрагент)));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД по адресу';
															|en = 'нет активных МОД по адресу'"));
				НадписьДляДекорацииСОшибкой.Добавить(Символы.ПС);
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						ЗначениеПроверки.АдресМОД,
						ШрифтыСтиля.ВажнаяНадписьШрифт));
				
				Если ЗначениеПроверки.Свойство("ИНН_МОД")
					И ЗначениеЗаполнено(ЗначениеПроверки.ИНН_МОД) Тогда
					НадписьДляДекорацииСОшибкой.Добавить(" ");
					НадписьДляДекорацииСОшибкой.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'Запросить';
								|en = 'Запросить'"),,,,
							ИдентификаторПроверки));
				КонецЕсли;
						
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетМОДГрузополучателяПоАдресу" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для грузополучателя';
															|en = 'Для грузополучателя'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Грузополучатель),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Грузополучатель)));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД по адресу';
															|en = 'нет активных МОД по адресу'"));
				НадписьДляДекорацииСОшибкой.Добавить(Символы.ПС);
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						ЗначениеПроверки.АдресМОД,
						ШрифтыСтиля.ВажнаяНадписьШрифт));
				
				Если ЗначениеПроверки.Свойство("ИНН_МОД")
					И ЗначениеЗаполнено(ЗначениеПроверки.ИНН_МОД) Тогда
					НадписьДляДекорацииСОшибкой.Добавить(" ");
					НадписьДляДекорацииСОшибкой.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'Запросить';
								|en = 'Запросить'"),,,,
							ИдентификаторПроверки));
				КонецЕсли;
						
			ИначеЕсли ЗначениеПроверки.ШаблонОшибки = "НетМОДГрузополучателя" Тогда
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для грузополучателя';
															|en = 'Для грузополучателя'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(ЗначениеПроверки.Грузополучатель),,,,
						ПолучитьНавигационнуюСсылку(ЗначениеПроверки.Грузополучатель)));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД';
															|en = 'нет активных МОД'"));
				
			Иначе
				
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для контрагента';
															|en = 'Для контрагента'"));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(Контрагент),,,,
						ПолучитьНавигационнуюСсылку(Контрагент)));
				НадписьДляДекорацииСОшибкой.Добавить(" ");
				НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД';
															|en = 'нет активных МОД'"));
				
			КонецЕсли;
			
		Иначе
			
			НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'Для контрагента';
														|en = 'Для контрагента'"));
			НадписьДляДекорацииСОшибкой.Добавить(" ");
			НадписьДляДекорацииСОшибкой.Добавить(
				Новый ФорматированнаяСтрока(
					Строка(Контрагент),,,,
					ПолучитьНавигационнуюСсылку(Контрагент)));
			НадписьДляДекорацииСОшибкой.Добавить(" ");
			НадписьДляДекорацииСОшибкой.Добавить(НСтр("ru = 'нет активных МОД';
														|en = 'нет активных МОД'"));
			
		КонецЕсли;
		
	Иначе
		
		НадписьДляДекорацииСОшибкой = РезультатыПроверок[ИдентификаторПроверки];
		
	КонецЕсли;
	
	Если НадписьДляДекорацииСОшибкой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДекорации.Заголовок = Новый ФорматированнаяСтрока(НадписьДляДекорацииСОшибкой);
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеПрочаяПроверкаГИСМТ()
	
	НадписьДляДекорацииСОшибкой = Новый Массив;
	НадписьДляДекорацииСОшибкой.Добавить("Во время проверки в ГИС МТ найдены ошибки:");
	
	Для Каждого ЭлементСписка Из ОбщиеОшибки Цикл
		НадписьДляДекорацииСОшибкой.Добавить(Символы.ПС);
		НадписьДляДекорацииСОшибкой.Добавить("-");
		НадписьДляДекорацииСОшибкой.Добавить(" ");
		НадписьДляДекорацииСОшибкой.Добавить(Строка(ЭлементСписка.Значение));
	КонецЦикла;
	
	Возврат НадписьДляДекорацииСОшибкой;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьГруппыПроверкиПоИдентификатору(ИдентификаторПроверки, Видимость)
	
	ГруппаПроверки = Элементы.Найти(СтрШаблон("ГруппаПроверки%1", ИдентификаторПроверки));
	Если ГруппаПроверки <> Неопределено Тогда
		ГруппаПроверки.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаличиеОшибокВКодахМаркировки()
	
	ОшибкиКМ = Новый Массив;
	Для Каждого Строка Из ОшибкиВКодахМаркировки Цикл
		ОшибкиКМ.Добавить(
			Новый Структура("Штрихкод, Описание",
				Строка.Штрихкод, Строка.Описание));
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОшибкиКМ", ОшибкиКМ);
	ПараметрыФормы.Вставить("Документ", Документ);
	
	ОткрытьФорму(
		СтрШаблон("%1.Форма.НаличиеОшибокВКодахМаркировки", ПолноеИмяОбъекта),
		ПараметрыФормы,
		ЭтотОбъект,
		,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПанелиАдминистрирования(Результат, ДополнительныеПараметры) Экспорт
	НастроитьВидимостьФоновойПроверкиЭД(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПовторнуюПроверкуДокумента()
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма",    ВладелецФормы);
	ПараметрыОповещения.Вставить("Документ", Документ);
	ПараметрыОповещения.Вставить("ЭтоФоноваяПроверкаДокумента", Ложь);
	ПараметрыОповещения.Вставить("ДополнитьРезультатДаннымиКомандыФормы", Истина);
	ПараметрыОповещения.Вставить("ЗапуститьПовторнуюПроверку", Истина);
	ПараметрыОповещения.Вставить("ФормаОшибок", ЭтотОбъект);
	
	СоответствиеТребованиямГИСМТКлиент.ПроверитьДокументНаСоответствиеТребованиямГИСМТ(ПараметрыОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатыПроверкиПоКлючу(Результаты, Ключ)
	
	Возврат Результаты.Получить().РезультатыПроверок[Ключ];
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьСписокМестОсуществленияДеятельности(Данные, ВызовПослеАвторизации = Ложь)
	
	Если ТипЗнч(Данные) = Тип("Структура")
		И Данные.Свойство("ИНН_МОД")
		И ЗначениеЗаполнено(Данные.ИНН_МОД) Тогда
		ОчиститьСообщения();
		Результат = СписокМестОсуществленияДеятельности(Организация, Данные.ИНН_МОД);
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			Если ВызовПослеАвторизации Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не удалось выполнить авторизацию.';
						|en = 'Не удалось выполнить авторизацию.'"));
			Иначе
				ЗапроситьКлючСессииНачало(Данные);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		ИначеЕсли Результат.МестаОсуществленияДеятельности.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Не найдено МОД по ИНН %1';
					|en = 'Не найдено МОД по ИНН %1'"),
				Данные.ИНН_МОД));
		Иначе
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("КодФИАСв1С", Данные.КодФИАСв1С);
			ПараметрыОткрытия.Вставить("АдресВ1С", Данные.АдресМОД);
			ПараметрыОткрытия.Вставить("ВладелецМОД", Данные.ВладелецМОД);
			ПараметрыОткрытия.Вставить("МестаОсуществленияДеятельности", Новый СписокЗначений);
			ПараметрыОткрытия.МестаОсуществленияДеятельности.ЗагрузитьЗначения(Результат.МестаОсуществленияДеятельности);
	
			ОткрытьФорму("Обработка.ПроверкаДокументовИСМП.Форма.УточнениеКодаФИАС",
				ПараметрыОткрытия,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ПослеУточненияКодаФИАС", ЭтотОбъект));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокМестОсуществленияДеятельности(Организация, ИНН)
	
	РезультатЗапросаДанных = ИнтерфейсИСМПОбщегоНазначения.СписокМестОсуществленияДеятельности(Организация, ИНН);
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", РезультатЗапросаДанных.ТребуетсяОбновлениеКлючаСессии);
	Результат.Вставить("ТекстОшибки", РезультатЗапросаДанных.ТекстОшибки);
	Результат.Вставить("МестаОсуществленияДеятельности", Новый Массив);
	Для Каждого СтрокаДанных Из РезультатЗапросаДанных.МестаОсуществленияДеятельности Цикл
		Если Не ПустаяСтрока(СтрокаДанных.КодФИАС) Тогда
			Результат.МестаОсуществленияДеятельности.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеУточненияКодаФИАС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьПовторнуюПроверкуДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало(Данные)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Данные", Данные);
	
	ПараметрыЗапроса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
		"ЗапроситьКлючСессииЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ПараметрыЗапроса, 
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации.';
								|en = 'Произошла ошибка при авторизации.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказОтАвторизации Тогда
		Возврат;
	ИначеЕсли ОшибкаАвторизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	Иначе
		ЗапроситьСписокМестОсуществленияДеятельности(ДополнительныеПараметры.Данные, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
