#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыбранныеВидыФинансовыхОтчетов.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище));
	ЗаполнитьДеревоВидовФинансовыхОтчетов();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоВидовФинансовыхОтчетов

&НаКлиенте
Процедура ДеревоВидовФинансовыхОтчетовПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	ПометитьВложенныеЭлементыРекурсивно(ТекущиеДанные);
	
	Если ТекущиеДанные.Пометка Тогда
		ОтметитьРодителейВДереве(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	Адрес = "";
	ГотовоСервер(Адрес);
	Закрыть(Адрес);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	ОтметитьЭлементыПоСтрокамДерева(ДеревоВидовФинансовыхОтчетов.ПолучитьЭлементы(), Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	ОтметитьЭлементыПоСтрокамДерева(ДеревоВидовФинансовыхОтчетов.ПолучитьЭлементы(), Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = Элементы.ДеревоВидовФинансовыхОтчетовПометка.Имя;

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоВидовФинансовыхОтчетовПометка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВидовФинансовыхОтчетов.СвязанныйОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = Элементы.ДеревоВидовФинансовыхОтчетовВидФинансовогоОтчета.Имя;

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоВидовФинансовыхОтчетовВидФинансовогоОтчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВидовФинансовыхОтчетов.СвязанныйОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(ЕстьСвязанныйОтбор)
	
	Если ЕстьСвязанныйОтбор Тогда
		
		Элементы.ДеревоВидовФинансовыхОтчетов.Подсказка = НСтр("ru = 'Серым цветом выделены элементы с зависимым отбором, отменить их выбор нельзя';
																|en = 'Items with dependent filter are highlighted in gray, you cannot unselect them'");
		Элементы.ДеревоВидовФинансовыхОтчетов.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	Иначе
		
		Элементы.ДеревоВидовФинансовыхОтчетов.Подсказка = "";
		Элементы.ДеревоВидовФинансовыхОтчетов.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ГотовоСервер(Адрес)
	ОбновитьКоллекциюВыбранныеВидыФинансовыхОтчетов();
	Адрес = ПоместитьВоВременноеХранилище(ВыбранныеВидыФинансовыхОтчетов.Выгрузить(), УникальныйИдентификатор)
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоВидовФинансовыхОтчетов()
	
	СхемаКомпоновкиДанных = Обработки.ПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета.ПолучитьМакет("ВидыФинансовыхОтчетовИерархия");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Дерево = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(Дерево);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если Дерево.Строки.Количество() Тогда
		ЕстьСвязанныйОтбор = Ложь;
		ОтметитьЭлементыПоВыбраннымЭлементам(Дерево.Строки, ЕстьСвязанныйОтбор);
		УстановитьВидимостьДоступность(ЕстьСвязанныйОтбор);
		ЗначениеВРеквизитФормы(Дерево, "ДеревоВидовФинансовыхОтчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьЭлементыПоВыбраннымЭлементам(Строки, ЕстьСвязанныйОтбор)
	
	Для Каждого Строка Из Строки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ВидФинансовогоОтчета", Строка.ВидФинансовогоОтчета);
		НайденныеСтроки = ВыбранныеВидыФинансовыхОтчетов.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Строка.Пометка = НайденнаяСтрока.Пометка;
			Строка.Программный = НайденнаяСтрока.Программный;
			Строка.СвязанныйОтбор = НайденнаяСтрока.СвязанныйОтбор;
			Если НайденнаяСтрока.СвязанныйОтбор Тогда
				ЕстьСвязанныйОтбор = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ОтметитьЭлементыПоВыбраннымЭлементам(Строка.Строки, ЕстьСвязанныйОтбор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыбранныеЭлементыДереваВСписок(Элементы)

	Для Каждого Элемент Из Элементы Цикл
		НоваяСтрока = ВыбранныеВидыФинансовыхОтчетов.Добавить();
		НоваяСтрока.ВидФинансовогоОтчета = Элемент.ВидФинансовогоОтчета;
		НоваяСтрока.Пометка = Элемент.Пометка;
		НоваяСтрока.Программный = Элемент.Программный;
		НоваяСтрока.СвязанныйОтбор = Элемент.СвязанныйОтбор;
		
		ВыбранныеЭлементыДереваВСписок(Элемент.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоллекциюВыбранныеВидыФинансовыхОтчетов()
	
	ВыбранныеВидыФинансовыхОтчетов.Очистить();
	ВыбранныеЭлементыДереваВСписок(ДеревоВидовФинансовыхОтчетов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЭлементыПоСтрокамДерева(Строки, Пометка)
	
	Для Каждого Строка Из Строки Цикл
		
		Строка.Пометка = Пометка;
		ОтметитьЭлементыПоСтрокамДерева(Строка.ПолучитьЭлементы(), Пометка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВложенныеЭлементыРекурсивно(ЭлементДерева)
	
	ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если Не ВложенныйЭлемент.СвязанныйОтбор Тогда
			ВложенныйЭлемент.Пометка = ЭлементДерева.Пометка;
		КонецЕсли;
		ПометитьВложенныеЭлементыРекурсивно(ВложенныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьРодителейВДереве(ЭлементДерева)
	
	СтрокаРодитель = ЭлементДерева.ПолучитьРодителя();
	
	Если СтрокаРодитель <> Неопределено Тогда
		СтрокаРодитель.Пометка = ЭлементДерева.Пометка;
		ОтметитьРодителейВДереве(СтрокаРодитель);
	КонецЕсли;
		
КонецПроцедуры 


#КонецОбласти
