#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуПлановСчетов();
	ЗаполнитьТаблицуВидовФинансовыхОтчетов();
	ЗаполнитьТаблицуНастройкиФормированияПроводок();
	ЗаполнитьТаблицуКомплектовФинансовыхОтчетов();
	ЗаполнитьТаблицуСтатьиАктивовПассивов();
	ЗаполнитьТаблицуТиповыеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатусВыполненнойЗагрузки = Ложь;
	// Устанавливаем текущую таблицу переходов
	ПереходыПоСценарию();
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИмяФайлаМоделиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаМоделиРасширениеПодключено", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьПланыСчетовПриИзменении(Элемент)
	Элементы.ОтборПланаСчетов.Доступность = ВыгружатьПланыСчетов;
	ОтметитьЭлементыВТаблице(ВыгружатьПланыСчетов, ТаблицаПланыСчетов);
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборПланаСчетов, ТаблицаПланыСчетов);
	ОбработатьЗависимыеОтборыОтПланаСчетов();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьВидыФинансовыхОтчетовПриИзменении(Элемент)
	Элементы.ОтборВидыФинансовыхОтчетов.Доступность = ВыгружатьВидыФинансовыхОтчетов;
	ОтметитьЭлементыВТаблице(ВыгружатьВидыФинансовыхОтчетов, ТаблицаВидыФинансовыхОтчетов);
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборВидыФинансовыхОтчетов, ТаблицаВидыФинансовыхОтчетов);
	ВыгружатьВидыФинансовыхОтчетовПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьНастройкиФормированияПроводокПриИзменении(Элемент)
	Элементы.ОтборНастройкиФормированияПроводок.Доступность = ВыгружатьНастройкиФормированияПроводок;
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборНастройкиФормированияПроводок, ТаблицаНастройкиФормированияПроводок);
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьКомплектыФинансовыхОтчетовПриИзменении(Элемент)
	Элементы.ОтборКомплектыФинансовыхОтчетов.Доступность = ВыгружатьКомплектыФинансовыхОтчетов;
	ОтметитьЭлементыВТаблице(ВыгружатьКомплектыФинансовыхОтчетов, ТаблицаКомплектовФинансовыхОтчетов);
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборКомплектыФинансовыхОтчетов, ТаблицаКомплектовФинансовыхОтчетов);
	ВыгружатьКомплектыФинансовыхОтчетовПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьТиповыеОперацииПриИзменении(Элемент)
	Элементы.ОтборТиповыеОперации.Доступность = ВыгружатьТиповыеОперации;
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборТиповыеОперации, ТаблицаТиповыеОперации);
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьСтатьиАктивовПассивовПриИзменении(Элемент)
	Элементы.ОтборСтатьиАктивовПассивов.Доступность = ВыгружатьСтатьиАктивовПассивов;
	ОтметитьЭлементыВТаблице(ВыгружатьСтатьиАктивовПассивов, ТаблицаСтатьиАктивовПассивов);
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборСтатьиАктивовПассивов, ТаблицаСтатьиАктивовПассивов);
	ВыгружатьСтатьиАктивовПассивовПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВидыФинансовыхОтчетовОтборНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ТаблицуФормыВоВременноеХранилище(ТаблицаВидыФинансовыхОтчетов));
	
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета.Форма.ОтборВидовФинансовыхОтчетов",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ОбновитьТаблицуВидыФинансовыхОтчетов", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПланаСчетовНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ВременноеХранилищеСтруктурыОтбораПлановСчетов());
	
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета.Форма.ОтборПлановСчетов",
				ПараметрыФормы,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ОбновитьТаблицуПланыСчетов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомплектыФинансовыхОтчетовНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ТаблицуФормыВоВременноеХранилище(ТаблицаКомплектовФинансовыхОтчетов));
	
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета.Форма.ОтборКомплектовФинансовыхОтчетов",
				ПараметрыФормы,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ОбновитьТаблицуКомплектовФинансовыхОтчетов", ЭтотОбъект),   
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНастройкиФормированияПроводокНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ТаблицуФормыВоВременноеХранилище(ТаблицаНастройкиФормированияПроводок));
	
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета.Форма.ОтборНастройкиФормированияПроводок",
				ПараметрыФормы,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ОбновитьТаблицуНастройкиФормированияПроводок", ЭтотОбъект), 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтборТиповыеОперацииНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ТаблицуФормыВоВременноеХранилище(ТаблицаТиповыеОперации));
	
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета.Форма.ОтборТиповыеОперации",
				ПараметрыФормы,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ОбновитьТаблицуТиповыеОперации", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатьиАктивовПассивовНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ТаблицуФормыВоВременноеХранилище(ТаблицаСтатьиАктивовПассивов));
	
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета.Форма.ОтборСтатьиАктивовПассивов",
				ПараметрыФормы,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ОбновитьТаблицуСтатьиАктивовПассивов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПодробнаяИнформацияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", СинонимОбработки());
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазделИнициализацииПереходовПомощника

// Параметры перехода.
// 
// Возвращаемое значение:
//  Структура - Параметры перехода:
// * ПорядковыйНомерПерехода - Число -
// * ИмяОсновнойСтраницы - Строка -
// * ИмяСтраницыНавигации - Строка -
// * ИмяСтраницыДекорации - Строка -
// * ИмяОбработчикаПриОткрытии - Строка -
// * ИмяОбработчикаПослеОткрытия - Строка -
// * ИмяОбработчикаПриПереходеДалее - Строка -
// * ИмяОбработчикаПриПереходеНазад - Строка -
&НаКлиенте
Функция ПараметрыПерехода()
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("ПорядковыйНомерПерехода", 0);
	ПараметрыПерехода.Вставить("ИмяОсновнойСтраницы", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыНавигации", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыДекорации", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриОткрытии", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПослеОткрытия", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеДалее", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеНазад", "");
	
	Возврат ПараметрыПерехода;
	
КонецФункции

&НаКлиенте
Процедура ПереходыПоСценарию()

	Переходы.Очистить();

	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 1;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаПриветствие";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНачало";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаПриветствиеПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаПриветствиеПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);

	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 2;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаОжидания";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОжидание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаОжиданияПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПослеОткрытия = "СтраницаОжиданияПослеОткрытия";
	ДобавитьПереход(ПараметрыПерехода);

	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 3;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаЗавершение";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОкончание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаЗавершениеПриОткрытии";
	ДобавитьПереход(ПараметрыПерехода);

КонецПроцедуры


// Добавить переход.
// 
// Параметры:
//  ПараметрыПерехода - См. ПараметрыПерехода
&НаСервере
Процедура ДобавитьПереход(ПараметрыПерехода)

	НоваяСтрока = Переходы.Добавить();

	НоваяСтрока.ПорядковыйНомерПерехода = ПараметрыПерехода.ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ПараметрыПерехода.ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ПараметрыПерехода.ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ПараметрыПерехода.ИмяСтраницыНавигации;

	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ПараметрыПерехода.ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ПараметрыПерехода.ИмяОбработчикаПриОткрытии;
	НоваяСтрока.ИмяОбработчикаПослеОткрытия    = ПараметрыПерехода.ИмяОбработчикаПослеОткрытия;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)

	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)

	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);

КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда

		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));

		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда

			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);

			Отказ = Ложь;
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;

		КонецЕсли;

	Иначе

		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));

		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда

			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);

			Отказ = Ложь;
			Результат = Вычислить(ИмяПроцедуры);

			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));

	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда

		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);

		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;

		Результат = Вычислить(ИмяПроцедуры);

		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];

	ПодключитьОбработчикОжидания("ВыполнитьОбработчикПослеОткрытия", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПослеОткрытия()
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПослеОткрытия
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика]()";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия);
		
		Результат = Вычислить(ИмяПроцедуры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазделОбработчиковСобытийПерехода

&НаКлиенте
Функция Подключаемый_СтраницаПриветствиеПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПриветствиеПриПереходеДалее(Отказ)

	ОчиститьСообщения();

	Если Не ЗначениеЗаполнено(СокрЛП(Объект.ИмяФайлаМодели)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан путь к файлу с данными';
				|en = 'Path to the file with data is not specified'"), , "ИмяФайлаМодели", "ИмяФайлаМодели", Отказ);
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаЗавершениеПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)

	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.ПодробнаяИнформация.Видимость = Не СтатусВыполненнойЗагрузки;
	Элементы.НадписьСтатусЗагрузки.Заголовок = ?(СтатусВыполненнойЗагрузки, НСтр("ru = 'Выгрузка успешно завершена';
																				|en = 'Successfully imported'"),
		НСтр("ru = 'Выгрузка не выполнена';
			|en = 'Export failed'"));

	Элементы.НадписьВариантовПродолжения.Заголовок = ?(СтатусВыполненнойЗагрузки, НСтр(
		"ru = 'Нажмите кнопку ""Готово"" для выхода из помощника.';
		|en = 'Click ""Finish"" to exit the wizard.'"), НСтр(
		"ru = 'Для того чтобы попробовать выгрузить еще раз, нажмите ""Назад"", для выхода из помощника, нажимите ""Готово""';
		|en = 'To try to export again, click ""Back"". To exit the wizard, click ""Finish""'"));

	ЗаполнитьИтоговуюИнформацию();

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЭтоПереходДалее Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжиданияПослеОткрытия()
	
	ДлительнаяОперация = ВыгрузитьНаСервере();
	Если ДлительнаяОперация <> Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьРезультат", ЭтотОбъект, АдресХранилища);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Функция ВыгрузитьНаСервере()
	
	ДанныеВыгрузки = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ТаблицаДанныеВыгрузки();
	
	Если ВыгружатьПланыСчетов Тогда
		
		ВыбранныеПланыСчетов = ВыбранныеПланыСчетов();
		
		ОбъектМД = Метаданные.Справочники.ПланыСчетовМеждународногоУчета;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеПланыСчетов);
		
		ОбъектМД = Метаданные.ПланыСчетов.Международный;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки,
									ОбъектМД,
									Неопределено,
									ВыбранныеПланыСчетов,
									Метаданные.ПланыСчетов.Международный.Реквизиты.ПланСчетов.Имя);
		
		Если ДанныеВыгрузки.Найти(ОбъектМД.ПолноеИмя(), "ИмяМД") <> Неопределено
			И ВыбранныеПланыСчетов.Количество() Тогда
			ОбъектМД = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоМеждународные;
			ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыгружатьВидыФинансовыхОтчетов Тогда
		
		ВыбранныеВидыФинансовыхОтчетов = ВыбранныеВидыФинансовыхОтчетов();
	
		ОбъектМД = Метаданные.Справочники.ВидыФинансовыхОтчетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеВидыФинансовыхОтчетов);
		
		ОбъектМД = Метаданные.Справочники.ЭлементыФинансовыхОтчетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеВидыФинансовыхОтчетов, "Владелец");
		
	КонецЕсли;
	
	Если ВыгружатьКомплектыФинансовыхОтчетов Тогда
		ОбъектМД = Метаданные.Справочники.КомплектыФинансовыхОтчетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеКомплектыФинансовыхОтчетов());
	КонецЕсли;
	
	Если ВыгружатьСтатьиАктивовПассивов Тогда
		ОбъектМД = Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеСтатьиАктивовПассивов());
	КонецЕсли;
	
	Если ВыгружатьНастройкиФормированияПроводок Тогда
		
		ВыбранныеНастройкиФормированияПроводок = ВыбранныеНастройкиФормированияПроводок();
		ОбъектМДОтбора = Метаданные.Справочники.НастройкиФормированияПроводокМеждународногоУчета;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМДОтбора, Неопределено, ВыбранныеНастройкиФормированияПроводок);
		
		ОбъектМД = Метаданные.РегистрыСведений.ПравилаОтраженияВМеждународномУчете;
		ИмяИзмеренияДляОтбора = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД);
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеНастройкиФормированияПроводок, ИмяИзмеренияДляОтбора);
		
		ОбъектМД = Метаданные.РегистрыСведений.ХозяйственныеОперацииНеОтражаемыеВМеждународномУчете;
		ИмяИзмеренияДляОтбора = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД);
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеНастройкиФормированияПроводок, ИмяИзмеренияДляОтбора);
		
		ОбъектМД = Метаданные.РегистрыСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете;
		ИмяИзмеренияДляОтбора = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД);
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеНастройкиФормированияПроводок, ИмяИзмеренияДляОтбора);
		
		ОбъектМД = Метаданные.РегистрыСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам;
		ИмяИзмеренияДляОтбора = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД);
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеНастройкиФормированияПроводок, ИмяИзмеренияДляОтбора);
		
		ОбъектМД = Метаданные.РегистрыСведений.НастройкиЗаполненияСубконтоНаСчетахМеждународногоУчета;
		ИмяИзмеренияДляОтбора = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД);
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеНастройкиФормированияПроводок, ИмяИзмеренияДляОтбора);
		
		ШаблоныПроводокКВыгрузке = ШаблоныПроводокДляМеждународногоУчетаКВыгрузке(ВыбранныеНастройкиФормированияПроводок);
		ОбъектМДОтбора = Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМДОтбора, Неопределено, ШаблоныПроводокКВыгрузке);
		
		ОбъектМД = Метаданные.РегистрыСведений.ПравилаУточненияСчетовВМеждународномУчете;
		ИмяИзмеренияДляОтбора = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД);
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ШаблоныПроводокКВыгрузке, ИмяИзмеренияДляОтбора);
		
	КонецЕсли;
	
	Если ВыгружатьТиповыеОперации Тогда
		ОбъектМД = Метаданные.Справочники.ТиповыеОперацииМеждународныйУчет;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Неопределено, ВыбранныеТиповыеОперации());
	КонецЕсли;
	
	Если ВыгружатьГруппыФинансовогоУчета Тогда
		
		ОбъектМД = Метаданные.Справочники.ГруппыФинансовогоУчетаРасчетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		
		ОбъектМД = Метаданные.Справочники.ГруппыФинансовогоУчетаДенежныхСредств;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		
		ОбъектМД = Метаданные.Справочники.ГруппыФинансовогоУчетаДоходовРасходов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		
		ОбъектМД = Метаданные.Справочники.ГруппыФинансовогоУчетаНоменклатуры;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		
	КонецЕсли;
	
	Если ВыгружатьСтатьиДвиженияДенежныхСредств Тогда
		ОбъектМД = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
	КонецЕсли;
	
	Если ВыгружатьСтатьиДоходовРасходов Тогда
		
		ОбъектМД = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		
		ОбъектМД = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		
	КонецЕсли;
	
	Если ВыгружатьГруппыОСиНМА Тогда
		
		ОбъектМД = Метаданные.Справочники.ГруппыНМА;
			ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		
		ОбъектМД = Метаданные.Справочники.ГруппыОСМеждународныйУчет;
			ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
		
	КонецЕсли;
	
	Если ВыгружатьНемонетарныеПоказатели Тогда
		ОбъектМД = Метаданные.Справочники.НемонетарныеПоказатели;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДанныеВыгрузки", ДанныеВыгрузки);
	ПараметрыЗадания.Вставить("ЭтоМодельМеждународногоУчета", Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("АдресХранилища", АдресХранилища);
	
	ИмяМетода = "ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ВыгрузитьМодельУчета";
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = СинонимОбработки();
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(НастройкиЗапуска, ИмяМетода, ПараметрыЗадания);
	
КонецФункции

&НаСервере
Функция ВыбранныеПланыСчетов()
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПланыСчетов Цикл
		Если Строка.Пометка Тогда
			МассивСсылок.Добавить(Строка.ПланСчетов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Функция ВыбранныеВидыФинансовыхОтчетов()
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ТаблицаВидыФинансовыхОтчетов Цикл
		Если Строка.Пометка Тогда
			МассивСсылок.Добавить(Строка.ВидФинансовогоОтчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Функция ВыбранныеКомплектыФинансовыхОтчетов()
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ТаблицаКомплектовФинансовыхОтчетов Цикл
		Если Строка.Пометка Тогда
			МассивСсылок.Добавить(Строка.КомплектФинансовогоОтчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Функция ВыбранныеСтатьиАктивовПассивов()
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ТаблицаСтатьиАктивовПассивов Цикл
		Если Строка.Пометка Тогда
			МассивСсылок.Добавить(Строка.СтатьяАктивовПассивов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Функция ВыбранныеНастройкиФормированияПроводок()
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ТаблицаНастройкиФормированияПроводок Цикл
		Если Строка.Пометка Тогда
			МассивСсылок.Добавить(Строка.НастройкаФормированияПроводкиМеждународногоУчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Функция ВыбранныеТиповыеОперации()
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ТаблицаТиповыеОперации Цикл
		Если Строка.Пометка Тогда
			МассивСсылок.Добавить(Строка.ТиповаяОперация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Функция ШаблоныПроводокДляМеждународногоУчетаКВыгрузке(ВыбранныеНастройкиФормированияПроводок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаОтраженияВМеждународномУчете.ШаблонПроводки КАК ШаблонПроводки
		|ИЗ
		|	РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтраженияВМеждународномУчете
		|ГДЕ
		|	ПравилаОтраженияВМеждународномУчете.НастройкаФормированияПроводок В (&НастройкаФормированияПроводок)";
	
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", ВыбранныеНастройкиФормированияПроводок);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШаблонПроводки");
	
КонецФункции

&НаСервере
Процедура ВыгружатьВидыФинансовыхОтчетовПриИзмененииСервер()
	
	УстановитьПрограммныйОтборПланаСчетов();
	
	СвязанныйОтборВключен = ВыгружатьВидыФинансовыхОтчетов Или ВыгружатьСтатьиАктивовПассивов;
	ВключитьВыключитьВыгрузку(ВыгружатьПланыСчетов,
							Элементы.ВыгружатьПланыСчетов,
							Элементы.ОтборПланаСчетов,
							ТаблицаПланыСчетов,
							СвязанныйОтборВключен);
	
КонецПроцедуры

&НаСервере
Процедура ВыгружатьСтатьиАктивовПассивовПриИзмененииСервер()
	
	УстановитьПрограммныйОтборПланаСчетов();

	СвязанныйОтборВключен = ВыгружатьВидыФинансовыхОтчетов Или ВыгружатьСтатьиАктивовПассивов;
	ВключитьВыключитьВыгрузку(ВыгружатьПланыСчетов,
							Элементы.ВыгружатьПланыСчетов,
							Элементы.ОтборПланаСчетов,
							ТаблицаПланыСчетов,
							СвязанныйОтборВключен);
	
КонецПроцедуры

&НаСервере
Процедура ВыгружатьКомплектыФинансовыхОтчетовПриИзмененииСервер()
	
	УстановитьПрограммныйОтборВидовФинансовыхОтчетов();
	
	ВключитьВыключитьВыгрузку(ВыгружатьВидыФинансовыхОтчетов,
						Элементы.ВыгружатьВидыФинансовыхОтчетов,
						Элементы.ОтборВидыФинансовыхОтчетов,
						ТаблицаВидыФинансовыхОтчетов);
						
	ВключитьВыключитьВыгрузку(ВыгружатьПланыСчетов,
						Элементы.ВыгружатьПланыСчетов,
						Элементы.ОтборПланаСчетов,
						ТаблицаПланыСчетов);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()

	ЕстьОшибки = Не СтатусВыполненнойЗагрузки;

	Элементы.Информация.Видимость = ЕстьОшибки;
	Если ЕстьОшибки Тогда
		Информация = НСтр("ru = 'Ошибка:';
							|en = 'Error:'") + Символы.ПС + ПротоколОбмена.ПолучитьТекст();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Сообщения") И Результат.Сообщения <> Неопределено Тогда
			Для каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Свойство("Статус") Тогда
			Если Результат.Статус = "Ошибка" Тогда
				СтатусВыполненнойЗагрузки = Ложь;
				ПротоколОбмена.УстановитьТекст(Результат.КраткоеПредставлениеОшибки);
			ИначеЕсли Результат.Статус = "Выполнено" Тогда
				СтатусВыполненнойЗагрузки = Истина;
				ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, ДополнительныеПараметры, Объект.ИмяФайлаМодели);
			КонецЕсли;
			ИзменитьПорядковыйНомерПерехода(+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт

	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Файл выгрузки';
										|en = 'Export file'") + "(*.xml)|*.xml";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь к файлу выгрузки модели учета';
										|en = 'Select a path to the file of accounting model export'");

	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаМоделиПоказатьДиалогЗавершение", ЭтотОбъект);

	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиПоказатьДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Объект.ИмяФайлаМодели = ВыбранныеФайлы[0];

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВключитьВыключитьВыгрузку(ФлагВыгрузки, ФлагНаФорме, ЭлементФормыОтбора, Таблица, ВключенСвязанныйОтбор = Ложь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("СвязанныйОтбор", Истина);
	ЕстьСвязанныйОтбор = Таблица.НайтиСтроки(Отбор).Количество() <> 0 Или ВключенСвязанныйОтбор = Истина;
	
	Если ЕстьСвязанныйОтбор Тогда
		ФлагВыгрузки = Истина;
		ФлагНаФорме.Доступность = Ложь;
		ЭлементФормыОтбора.Доступность = Истина;
	ИначеЕсли Не ЕстьСвязанныйОтбор Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Пометка", Истина);
		Включить = Таблица.НайтиСтроки(Отбор).Количество() <> 0;
		ФлагВыгрузки = Включить;
		ФлагНаФорме.Доступность = Истина;
		ЭлементФормыОтбора.Доступность = Включить;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПлановСчетов()

	Выборка = Справочники.ПланыСчетовМеждународногоУчета.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПланыСчетов.Добавить();
		НоваяСтрока.ПланСчетов = Выборка.Ссылка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВидовФинансовыхОтчетов()

	Выборка = Справочники.ВидыФинансовыхОтчетов.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаВидыФинансовыхОтчетов.Добавить();
		НоваяСтрока.ВидФинансовогоОтчета = Выборка.Ссылка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНастройкиФормированияПроводок()

	Выборка = Справочники.НастройкиФормированияПроводокМеждународногоУчета.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаНастройкиФормированияПроводок.Добавить();
		НоваяСтрока.НастройкаФормированияПроводкиМеждународногоУчета = Выборка.Ссылка;
		НоваяСтрока.ПланСчетов = Выборка.Владелец;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТиповыеОперации()

	Выборка = Справочники.ТиповыеОперацииМеждународныйУчет.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаТиповыеОперации.Добавить();
		НоваяСтрока.ТиповаяОперация = Выборка.Ссылка;
		НоваяСтрока.ПланСчетов = Выборка.ПланСчетов;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКомплектовФинансовыхОтчетов()

	Выборка = Справочники.КомплектыФинансовыхОтчетов.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаКомплектовФинансовыхОтчетов.Добавить();
		НоваяСтрока.КомплектФинансовогоОтчета = Выборка.Ссылка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСтатьиАктивовПассивов()

	Выборка = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСтатьиАктивовПассивов.Добавить();
		НоваяСтрока.СтатьяАктивовПассивов = Выборка.Ссылка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТаблицуФормыВоВременноеХранилище(Знач Таблица)
	Возврат ПоместитьВоВременноеХранилище(Таблица.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ВременноеХранилищеСтруктурыОтбораПлановСчетов()
	
	Структура = Новый Структура();
	Структура.Вставить("ВыбранныеНастройкиПроводок", ВыбранныеНастройкиФормированияПроводок());
	Структура.Вставить("ВыбранныеТиповыеОперации", ВыбранныеТиповыеОперации());
	Структура.Вставить("ТаблицаПланыСчетов", ТаблицаПланыСчетов.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(Структура, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуПланыСчетов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьТаблицуПланыСчетовСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПланыСчетовСервер(Результат)

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		Таблица = ПолучитьИзВременногоХранилища(Результат); // ТаблицаЗначений -
		ТаблицаПланыСчетов.Загрузить(Таблица);
	КонецЕсли;	
	
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборПланаСчетов, ТаблицаПланыСчетов);
	ОбработатьЗависимыеОтборыОтПланаСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуВидыФинансовыхОтчетов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьТаблицуВидыФинансовыхОтчетовСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуВидыФинансовыхОтчетовСервер(Результат)

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		Таблица = ПолучитьИзВременногоХранилища(Результат); // ТаблицаЗначений -
		ТаблицаВидыФинансовыхОтчетов.Загрузить(Таблица);
	КонецЕсли;	
	
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборВидыФинансовыхОтчетов, ТаблицаВидыФинансовыхОтчетов);
	УстановитьПрограммныйОтборПланаСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуКомплектовФинансовыхОтчетов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьТаблицуКомплектовФинансовыхОтчетовСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуКомплектовФинансовыхОтчетовСервер(Результат)

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		Таблица = ПолучитьИзВременногоХранилища(Результат); // ТаблицаЗначений -
		ТаблицаКомплектовФинансовыхОтчетов.Загрузить(Таблица);
	КонецЕсли;	
	
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборКомплектыФинансовыхОтчетов, ТаблицаКомплектовФинансовыхОтчетов);
	УстановитьПрограммныйОтборВидовФинансовыхОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуНастройкиФормированияПроводок(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьТаблицуНастройкиФормированияПроводокСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуНастройкиФормированияПроводокСервер(Результат)

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		Таблица = ПолучитьИзВременногоХранилища(Результат); // ТаблицаЗначений -
		ТаблицаНастройкиФормированияПроводок.Загрузить(Таблица);
	КонецЕсли;	
	
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборНастройкиФормированияПроводок, ТаблицаНастройкиФормированияПроводок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуСтатьиАктивовПассивов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьТаблицуСтатьиАктивовПассивовСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуСтатьиАктивовПассивовСервер(Результат)

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		Таблица = ПолучитьИзВременногоХранилища(Результат); // ТаблицаЗначений -
		ТаблицаСтатьиАктивовПассивов.Загрузить(Таблица);	
	КонецЕсли;	
	
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборСтатьиАктивовПассивов, ТаблицаСтатьиАктивовПассивов);
	УстановитьПрограммныйОтборПланаСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуТиповыеОперации(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьТаблицуТиповыеОперацииСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТиповыеОперацииСервер(Результат)

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		Таблица = ПолучитьИзВременногоХранилища(Результат); // ТаблицаЗначений -
		ТаблицаТиповыеОперации.Загрузить(Таблица);
	КонецЕсли;	
	
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборТиповыеОперации, ТаблицаТиповыеОперации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГиперссылкиОтбора(Элемент, Таблица)
	
	ВсегоЭлементов = Таблица.Количество();

	Отбор = Новый Структура;
	Отбор.Вставить("Пометка", Истина);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();

	Если Количество = ВсегоЭлементов Тогда
		Элемент.Заголовок = НСтр("ru = 'Все';
								|en = 'All'");
	Иначе
		ТекстВыбрано = ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'Выбран';
					|en = 'Selected'"), НСтр("ru = 'Выбраны';
											|en = 'Selected'"), НСтр("ru = 'Выбраны';
																	|en = 'Selected'"), Количество);
		Элемент.Заголовок = СтрШаблон(НСтр("ru = '%1 %2';
											|en = '%1 %2'"), ТекстВыбрано, Количество);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПрограммныйОтборПланаСчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.ВидФинансовогоОтчета КАК ВидФинансовогоОтчета
		|ПОМЕСТИТЬ ВидыФинансовыхОтчетов
		|ИЗ
		|	&ТаблицаВидыФинансовыхОтчетов КАК Таблица
		|ГДЕ
		|	Таблица.Пометка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидФинансовогоОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов
		|ПОМЕСТИТЬ СтатьиАктивовПассивов
		|ИЗ
		|	&ТаблицаСтатьиАктивовПассивов КАК Таблица
		|ГДЕ
		|	Таблица.Пометка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяАктивовПассивов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыФинансовыхОтчетовПланыСчетов.ПланСчетов КАК ПланСчетов
		|ИЗ
		|	Справочник.ВидыФинансовыхОтчетов.ПланыСчетов КАК ВидыФинансовыхОтчетовПланыСчетов
		|ГДЕ
		|	ВидыФинансовыхОтчетовПланыСчетов.Ссылка В
		|		(ВЫБРАТЬ
		|			Т.ВидФинансовогоОтчета
		|		ИЗ
		|			ВидыФинансовыхОтчетов КАК Т)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиАктивовПассивовНастройкиМеждународногоУчета.ПланСчетов
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиАктивовПассивов.НастройкиМеждународногоУчета КАК
		|		СтатьиАктивовПассивовНастройкиМеждународногоУчета
		|ГДЕ
		|	СтатьиАктивовПассивовНастройкиМеждународногоУчета.Ссылка В
		|		(ВЫБРАТЬ
		|			Т.СтатьяАктивовПассивов
		|		ИЗ
		|			СтатьиАктивовПассивов КАК Т)";
	
	Запрос.УстановитьПараметр("ТаблицаВидыФинансовыхОтчетов", ТаблицаВидыФинансовыхОтчетов.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСтатьиАктивовПассивов", ТаблицаСтатьиАктивовПассивов.Выгрузить());
	
	ИспользуемыеПланыСчетов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаПланыСчетов Цикл
		
		НайденнаяСтрока = ИспользуемыеПланыСчетов.Найти(Строка.ПланСчетов, "ПланСчетов");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если Не Строка.Пометка Тогда
				Строка.Пометка = Истина;
				Строка.Программный = Истина;
			КонецЕсли;
			Строка.СвязанныйОтбор = Истина;
		Иначе
			Если Строка.СвязанныйОтбор Тогда
				Строка.СвязанныйОтбор = Ложь;
				Если Строка.Программный Тогда
					Строка.Пометка = Ложь;
					Строка.Программный = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьЗависимыеОтборыОтПланаСчетов();
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборПланаСчетов, ТаблицаПланыСчетов);

КонецПроцедуры

&НаСервере
Процедура УстановитьПрограммныйОтборВидовФинансовыхОтчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.КомплектФинансовогоОтчета КАК КомплектФинансовогоОтчета
		|ПОМЕСТИТЬ Вт
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Пометка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КомплектФинансовогоОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КомплектыФинансовыхОтчетовВидыОтчетов.ВидФинансовогоОтчета КАК ВидФинансовогоОтчета
		|ИЗ
		|	Справочник.КомплектыФинансовыхОтчетов.ВидыОтчетов КАК КомплектыФинансовыхОтчетовВидыОтчетов
		|ГДЕ
		|	КомплектыФинансовыхОтчетовВидыОтчетов.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.КомплектФинансовогоОтчета
		|			ИЗ
		|				ВТ КАК Т)";
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаКомплектовФинансовыхОтчетов.Выгрузить());
	
	ИспользуемыеВидыФинансовыхОтчетов = Запрос.Выполнить().Выгрузить();
	ДополнитьЭлементыРодителями(ИспользуемыеВидыФинансовыхОтчетов);
	
	Для Каждого Строка Из ТаблицаВидыФинансовыхОтчетов Цикл
		
		НайденнаяСтрока = ИспользуемыеВидыФинансовыхОтчетов.Найти(Строка.ВидФинансовогоОтчета, "ВидФинансовогоОтчета");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если Не Строка.Пометка Тогда
				Строка.Пометка = Истина;
				Строка.Программный = Истина;
			КонецЕсли;
			Строка.СвязанныйОтбор = Истина;
		Иначе
			Если Строка.СвязанныйОтбор Тогда
				Строка.СвязанныйОтбор = Ложь;
				Если Строка.Программный Тогда
					Строка.Пометка = Ложь;
					Строка.Программный = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьЗаголовокГиперссылкиОтбора(Элементы.ОтборВидыФинансовыхОтчетов, ТаблицаВидыФинансовыхОтчетов);
	УстановитьПрограммныйОтборПланаСчетов();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьЭлементыРодителями(ИспользуемыеВидыФинансовыхОтчетов)
	
	Для Каждого Строка Из ИспользуемыеВидыФинансовыхОтчетов Цикл
		НайтиИДобавитьРодителя(Строка.ВидФинансовогоОтчета, ИспользуемыеВидыФинансовыхОтчетов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиИДобавитьРодителя(ВидФинансовогоОтчета, ИспользуемыеВидыФинансовыхОтчетов)
	
	Родитель = ВидФинансовогоОтчета.Родитель; 
	
	Если ЗначениеЗаполнено(Родитель)
		И ИспользуемыеВидыФинансовыхОтчетов.Найти(Родитель, "ВидФинансовогоОтчета") = Неопределено Тогда
		
		НоваяСтрока = ИспользуемыеВидыФинансовыхОтчетов.Добавить();
		НоваяСтрока.ВидФинансовогоОтчета = Родитель;
		
		Если ЗначениеЗаполнено(Родитель.Родитель) Тогда
			НайтиИДобавитьРодителя(Родитель.Родитель, ИспользуемыеВидыФинансовыхОтчетов)
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗависимыеОтборыОтПланаСчетов()
	
	ОбработатьОтбор(ВыгружатьНастройкиФормированияПроводок, Элементы.ОтборНастройкиФормированияПроводок, ТаблицаНастройкиФормированияПроводок);
	ОбработатьОтбор(ВыгружатьТиповыеОперации, Элементы.ОтборТиповыеОперации, ТаблицаТиповыеОперации);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтбор(ФлагОтбора, ОтборНаФорме, ТаблицаОтбора)
	
	Для Каждого Строка Из ТаблицаОтбора Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ПланСчетов) Тогда
			Строка.Доступность = Истина;
			Продолжить;
		КонецЕсли;
	
		Отбор = Новый Структура;
		Отбор.Вставить("Пометка", Истина);
		Отбор.Вставить("ПланСчетов", Строка.ПланСчетов);
		НайденныеСтроки = ТаблицаПланыСчетов.НайтиСтроки(Отбор);
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок Тогда
			Строка.Доступность = Истина;
		Иначе
			Строка.Доступность = Ложь;
			Строка.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ФлагОтбора Тогда
		УстановитьЗаголовокГиперссылкиОтбора(ОтборНаФорме, ТаблицаОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СинонимОбработки()
	Возврат Метаданные.Обработки.ПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета.Синоним;
КонецФункции

&НаКлиенте
Процедура ОтметитьЭлементыВТаблице(Флаг, Таблица);
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Пометка = Флаг;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти