#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Данные = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
	
	ПланыСчетов.Загрузить(Данные.ТаблицаПланыСчетов);
	ЗаполнитьПланыСчетовНастроекМеждународногоУчета(Данные.ВыбранныеНастройкиПроводок);
	ЗаполнитьПланыСчетовТиповыхОпераций(Данные.ВыбранныеТиповыеОперации);
	
	УстановитьУсловноеОформление();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланыСчетов

&НаКлиенте
Процедура ТаблицаПланыСчетовПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущийЭлемент.ТекущиеДанные;
	Если Не ТекущаяСтрока.Пометка Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПланСчетов", ТекущаяСтрока.ПланСчетов);
		СтрокиНастроекПроводок = ПланыСчетовНастроекМеждународногоУчета.НайтиСтроки(Отбор);
		СтрокиТиповыхОпераций = ПланыСчетовТиповыхОпераций.НайтиСтроки(Отбор);

		
		Если СтрокиНастроекПроводок.Количество() Или СтрокиТиповыхОпераций.Количество() Тогда
			
			МассивСтрок = Новый Массив;
			
			МассивСтрок.Добавить(НСтр("ru = 'План счетов используется в зависимых отборах';
										|en = 'Chart of accounts is used in dependent filters'"));
			
			Если СтрокиНастроекПроводок.Количество() Тогда
				МассивСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Будет выключена выгрузка у настроек проводок: %1';
											|en = 'Export will be disabled for entry settings: %1'"),
										СтрокиНастроекПроводок[0].СтрокаВывода));
			КонецЕсли;
			
			Если СтрокиТиповыхОпераций.Количество() Тогда
				МассивСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Будет выключена выгрузка у типовых операций: %1';
											|en = 'Export will be disabled for standard transactions: %1'"),
										СтрокиТиповыхОпераций[0].СтрокаВывода));
			КонецЕсли;
			
			МассивСтрок.Добавить(НСтр("ru = 'Продолжить?';
										|en = 'Continue?'"));

			ТекстВопроса = СтрСоединить(МассивСтрок, Символы.ПС);
			
			ПоказатьВопрос(
					Новый ОписаниеОповещения("ИзменитьПометку", ЭтотОбъект, ТекущаяСтрока),
					ТекстВопроса,
					РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	Закрыть(АдресВоВременномХранилищеПлановСчетов());
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	ОтметитьЭлементыТаблицы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	ОтметитьЭлементыТаблицы(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = Элементы.ТаблицаПланыСчетовПометка.Имя;

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПланыСчетовПометка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетов.СвязанныйОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = Элементы.ТаблицаПланыСчетовПланСчетов.Имя;

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПланыСчетовПланСчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыСчетов.СвязанныйОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланыСчетовНастроекМеждународногоУчета(ВыбранныеНастройкиПроводок)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НастройкиФормированияПроводокМеждународногоУчета.Ссылка КАК ЗависимыйОбъект,
		|	НастройкиФормированияПроводокМеждународногоУчета.Владелец КАК ПланСчетов
		|ИЗ
		|	Справочник.НастройкиФормированияПроводокМеждународногоУчета КАК НастройкиФормированияПроводокМеждународногоУчета
		|ГДЕ
		|	НастройкиФормированияПроводокМеждународногоУчета.Ссылка В(&МассивСсылок)
		|ИТОГИ ПО
		|	ПланСчетов";
	
	ЗаполнитьТаблицу(ПланыСчетовНастроекМеждународногоУчета, ТекстЗапроса, ВыбранныеНастройкиПроводок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланыСчетовТиповыхОпераций(ВыбранныеТиповыеОперации)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТиповыеОперацииМеждународныйУчет.Ссылка КАК ЗависимыйОбъект,
		|	ТиповыеОперацииМеждународныйУчет.ПланСчетов КАК ПланСчетов
		|ИЗ
		|	Справочник.ТиповыеОперацииМеждународныйУчет КАК ТиповыеОперацииМеждународныйУчет
		|ГДЕ
		|	ТиповыеОперацииМеждународныйУчет.Ссылка В(&МассивСсылок)
		|ИТОГИ ПО
		|	ПланСчетов";
	
	ЗаполнитьТаблицу(ПланыСчетовТиповыхОпераций, ТекстЗапроса, ВыбранныеТиповыеОперации);
	
КонецПроцедуры

// Заполнить таблицу.
// 
// Параметры:
//  Таблица - ТаблицаЗначений
//  ТекстЗапроса - Строка
//  МассивСсылок - Массив
&НаСервере 
Процедура ЗаполнитьТаблицу(Таблица, ТекстЗапроса, МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		Строка = "";
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Строка = Строка + ?(ПустаяСтрока(Строка), "", ", ") + Строка(ВыборкаДетальныеЗаписи.ЗависимыйОбъект);
		КонецЦикла;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ПланСчетов = Выборка.ПланСчетов;
		НоваяСтрока.СтрокаВывода = Строка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЭлементыТаблицы(Пометка) 
	
	Для Каждого Строка Из ПланыСчетов Цикл
		
		Если Не Строка.СвязанныйОтбор Тогда
			Строка.Пометка = Пометка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресВоВременномХранилищеПлановСчетов()
	Возврат ПоместитьВоВременноеХранилище(ПланыСчетов.Выгрузить(), УникальныйИдентификатор)
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Отбор = Новый Структура;
	Отбор.Вставить("СвязанныйОтбор", Истина);
	НайденныеСтроки = ПланыСчетов.НайтиСтроки(Отбор);
	КоличествоНайденныхСтрок = НайденныеСтроки.Количество();

	Если КоличествоНайденныхСтрок Тогда
		
		Элементы.ТаблицаПланыСчетов.Подсказка = НСтр("ru = 'Серым цветом выделены элементы с зависимым отбором, отменить их выбор нельзя';
													|en = 'Items with dependent filter are highlighted in gray, you cannot unselect them'");
		Элементы.ТаблицаПланыСчетов.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	Иначе
		
		Элементы.ТаблицаПланыСчетов.Подсказка = "";
		Элементы.ТаблицаПланыСчетов.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометку(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ДополнительныеПараметры.Пометка = Истина;
	Иначе
		ДополнительныеПараметры.Пометка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
