#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция ПечатнаяФормаСправкаСМестаРаботы(МассивОбъектов) Экспорт

	Возврат ТабличныйДокументСправкаСМестаРаботы(
		УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаСМестаРаботы"),
		МассивОбъектов,
		Новый СписокЗначений);

КонецФункции

Процедура СоздатьВТОбщиеДанныеСправок(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Период,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивОбъектов)";
		
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	
	КадровыеДанные = "ФизическоеЛицо,ФИОПолные,Пол,ДокументПредставление,ДатаПриема,ДатаУвольнения,Должность,Организация";
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Период КАК Период,
		|	КадровыеДанные.Организация КАК Организация
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные
		|ГДЕ
		|	НЕ КадровыеДанные.Организация ЕСТЬ NULL";
		
	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияГородФактическогоАдреса", Новый ОписаниеТипов("Строка"));
	
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияРасчетныйСчет", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияБанк", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияКорСчет", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияБИК", Новый ОписаниеТипов("Строка"));
	
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияТелефон", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияФакс", Новый ОписаниеТипов("Строка"));
	
	СведенияОбОрганизациях.Колонки.Добавить("ФИОРуководителя", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ФИОГлавногоБухгалтера", Новый ОписаниеТипов("Строка"));
	
	СведенияОбОрганизациях.Колонки.Добавить("ДолжностьРуководителя", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ДолжностьГлавногоБухгалтера", Новый ОписаниеТипов("Строка"));
	
	РезультатЗапросаПоШапке = Запрос.Выполнить();
	МассивОрганизаций = РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку("Организация");
	
	Если МассивОрганизаций.Количество() > 0 Тогда
		
		АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(МассивОрганизаций);
		
		Выборка = РезультатЗапросаПоШапке.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();
			
			Сведения = Новый СписокЗначений;
			Сведения.Добавить("", "НаимЮЛПол");
			Сведения.Добавить("", "ИННЮЛ");
		
			Сведения.Добавить("", "БанкСчетНомер");
			Сведения.Добавить("", "БанкСчетНаимБанка");
			Сведения.Добавить("", "БанкСчетКоррСчетБанка");
			Сведения.Добавить("", "БанкСчетБИКБанка");
			
			Сведения.Добавить("", "ТелОрганизации");
			Сведения.Добавить("", "ФаксОрганизации");
			
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, ?(ЗначениеЗаполнено(Выборка.Период),Выборка.Период, ТекущаяДатаСеанса()), Сведения);
			
			НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
			НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;
			НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
			НоваяСтрокаСведенияОбОрганизациях.ИНН = ОргСведения.ИННЮЛ;
			
			ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
				АдресаОрганизаций,
				Выборка.Организация,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			НоваяСтрокаСведенияОбОрганизациях.АдресЮридический = ОписаниеЮридическогоАдреса.Представление;
			
			ОписаниеФактическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
				АдресаОрганизаций,
				Выборка.Организация,
				Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			НоваяСтрокаСведенияОбОрганизациях.АдресФактический = ОписаниеФактическогоАдреса.Представление;
			НоваяСтрокаСведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса = ОписаниеФактическогоАдреса.Город;
			
			НоваяСтрокаСведенияОбОрганизациях.ОрганизацияРасчетныйСчет = ОргСведения.БанкСчетНомер;
			НоваяСтрокаСведенияОбОрганизациях.ОрганизацияБанк = ОргСведения.БанкСчетНаимБанка;
			НоваяСтрокаСведенияОбОрганизациях.ОрганизацияКорСчет = ОргСведения.БанкСчетКоррСчетБанка;
			НоваяСтрокаСведенияОбОрганизациях.ОрганизацияБИК = ОргСведения.БанкСчетБИКБанка;
			
			НоваяСтрокаСведенияОбОрганизациях.ОрганизацияТелефон = ОргСведения.ТелОрганизации;
			НоваяСтрокаСведенияОбОрганизациях.ОрганизацияФакс = ОргСведения.ФаксОрганизации;
			
			ЗапрашиваемыеЗначения = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ОснованиеПодписиРуководителя,ГлавныйБухгалтер,ДолжностьГлавногоБухгалтера,ОснованиеПодписиГлавногоБухгалтера");
			ЗапрашиваемыеЗначения.Организация = Выборка.Организация;
			ПодписиДокументов.ЗаполнитьСведенияОПодписяхДокументовПоОрганизации(ЗапрашиваемыеЗначения);
			
			НоваяСтрокаСведенияОбОрганизациях.ФИОРуководителя = ЗапрашиваемыеЗначения.Руководитель;
			НоваяСтрокаСведенияОбОрганизациях.ФИОГлавногоБухгалтера = ЗапрашиваемыеЗначения.ГлавныйБухгалтер;
			
			Если ЗначениеЗаполнено(ЗапрашиваемыеЗначения.ДолжностьРуководителя) Тогда
				НоваяСтрокаСведенияОбОрганизациях.ДолжностьРуководителя = ЗапрашиваемыеЗначения.ДолжностьРуководителя;
			Иначе
				НоваяСтрокаСведенияОбОрганизациях.ДолжностьРуководителя = НСтр("ru = 'Генеральный директор';
																				|en = 'CEO'");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗапрашиваемыеЗначения.ДолжностьГлавногоБухгалтера) Тогда
				НоваяСтрокаСведенияОбОрганизациях.ДолжностьГлавногоБухгалтера = ЗапрашиваемыеЗначения.ДолжностьГлавногоБухгалтера;
			Иначе
				НоваяСтрокаСведенияОбОрганизациях.ДолжностьГлавногоБухгалтера = НСтр("ru = 'Главный бухгалтер';
																					|en = 'Chief Accountant'");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СведенияОбОрганизациях", СведенияОбОрганизациях);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбОрганизациях.Период КАК Период,
		|	СведенияОбОрганизациях.Организация КАК Организация,
		|	СведенияОбОрганизациях.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СведенияОбОрганизациях.ИНН КАК ОрганизацияИНН,
		|	СведенияОбОрганизациях.АдресЮридический КАК ОрганизацияАдресЮридический,
		|	СведенияОбОрганизациях.АдресФактический КАК ОрганизацияАдресФактический,
		|	СведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса,
		|	СведенияОбОрганизациях.ОрганизацияРасчетныйСчет КАК ОрганизацияРасчетныйСчет,
		|	СведенияОбОрганизациях.ОрганизацияБанк КАК ОрганизацияБанк,
		|	СведенияОбОрганизациях.ОрганизацияКорСчет КАК ОрганизацияКорСчет,
		|	СведенияОбОрганизациях.ОрганизацияБИК КАК ОрганизацияБИК,
		|	СведенияОбОрганизациях.ОрганизацияТелефон КАК ОрганизацияТелефон,
		|	СведенияОбОрганизациях.ОрганизацияФакс КАК ОрганизацияФакс,
		|	СведенияОбОрганизациях.ФИОРуководителя КАК ФИОРуководителя,
		|	СведенияОбОрганизациях.ФИОГлавногоБухгалтера КАК ФИОГлавногоБухгалтера,
		|	СведенияОбОрганизациях.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	СведенияОбОрганизациях.ДолжностьГлавногоБухгалтера КАК ДолжностьГлавногоБухгалтера
		|ПОМЕСТИТЬ ВТДанныеОрганизаций
		|ИЗ
		|	&СведенияОбОрганизациях КАК СведенияОбОрганизациях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОрганизаций.Период КАК Период,
		|	ДанныеОрганизаций.Период КАК ДатаСправки,
		|	ДанныеОрганизаций.Организация КАК Организация,
		|	ДанныеОрганизаций.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ДанныеОрганизаций.ОрганизацияИНН КАК ОрганизацияИНН,
		|	ДанныеОрганизаций.ОрганизацияАдресЮридический КАК ОрганизацияАдресЮридический,
		|	ДанныеОрганизаций.ОрганизацияАдресФактический КАК ОрганизацияАдресФактический,
		|	ДанныеОрганизаций.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса,
		|	ДанныеОрганизаций.ОрганизацияРасчетныйСчет КАК ОрганизацияРасчетныйСчет,
		|	ДанныеОрганизаций.ОрганизацияБанк КАК ОрганизацияБанк,
		|	ДанныеОрганизаций.ОрганизацияКорСчет КАК ОрганизацияКорСчет,
		|	ДанныеОрганизаций.ОрганизацияБИК КАК ОрганизацияБИК,
		|	ДанныеОрганизаций.ОрганизацияТелефон КАК ОрганизацияТелефон,
		|	ДанныеОрганизаций.ОрганизацияФакс КАК ОрганизацияФакс,
		|	ДанныеОрганизаций.ФИОРуководителя КАК ФИОРуководителя,
		|	ДанныеОрганизаций.ФИОГлавногоБухгалтера КАК ФИОГлавногоБухгалтера,
		|	ДанныеОрганизаций.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДанныеОрганизаций.ДолжностьГлавногоБухгалтера КАК ДолжностьГлавногоБухгалтера,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Ссылка,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление
		|ПОМЕСТИТЬ ВТОбщиеДанныеСправок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОрганизаций КАК ДанныеОрганизаций
		|		ПО (ДанныеОрганизаций.Период = КадровыеДанныеСотрудников.Период)
		|			И (ДанныеОрганизаций.Организация = КадровыеДанныеСотрудников.Организация)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т60") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т60", НСтр("ru = 'Записка - расчет о предоставлении отпуска работнику';
								|en = 'Employee leave calculation report'"),
			ТабличныйДокументЗапискиРасчетаОПредоставленииОтпуска(МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т60");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормыЗапискаРасчетТ61()) Тогда
		
		ПодходящиеТипы = Новый Массив;
		ПодходящиеТипы.Добавить(Тип("ДокументСсылка.Увольнение"));
		ПодходящиеТипы.Добавить(Тип("ДокументСсылка.УвольнениеСписком"));
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИдентификаторПечатнойФормыЗапискаРасчетТ61(),
			НСтр("ru = 'Записка - расчет при увольнении';
				|en = 'Final pay upon termination of employment'"),
			ТабличныйДокументЗапискиРасчетаПриУвольнении(
				ПараметрыПечати,
				УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т61"),
				ПодходящиеОбъекты(МассивОбъектов, ПодходящиеТипы),
				ОбъектыПечати),
			,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т61");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговор")
		ИЛИ УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе") Тогда
		
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговор") Тогда
			ИмяМакета = "ПФ_MXL_ТрудовойДоговор";
			Представление = НСтр("ru = 'Трудовой договор';
								|en = 'Employment contract'");
		Иначе
			ИмяМакета = "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе";
			Представление = НСтр("ru = 'Трудовой договор при дистанционной работе';
								|en = 'Employment contract for remote work'");
		КонецЕсли;
		
		ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета, Представление,
			ТабличныйДокументТрудовойДоговор(
				ПараметрыПечати,
				ИмяМакета,
				МассивОбъектов,
				ОбъектыПечати,
				ПараметрыВывода),
			,
			"Обработка.ПечатьКадровыхПриказовРасширенная." + ИмяМакета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ОтчетТрудовойДоговорФормирование", ВремяНачалаЗамера);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаОДоходахПроизвольнаяФорма") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_СправкаОДоходахПроизвольнаяФорма", 
			НСтр("ru = 'Справка о доходах (произвольная форма)';
				|en = 'Income statement (free form)'"),
			ТабличныйДокументСправкаОДоходахПроизвольнаяФорма(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаОДоходахПроизвольнаяФорма"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаОДоходахПроизвольнаяФорма");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаСМестаРаботы") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_СправкаСМестаРаботы", 
			НСтр("ru = 'Справка с места работы';
				|en = 'Statement of employment'"),
			ТабличныйДокументСправкаСМестаРаботы(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаСМестаРаботы"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_СправкаСМестаРаботы");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИзмененияГрафикаРаботыСписком") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ИзмененияГрафикаРаботыСписком",
			НСтр("ru = 'Приказ об изменении графика работы';
				|en = 'Work schedule change order'"),
			ТабличныйДокументИзменениеГрафикаРаботыСписком(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ИзмененияГрафикаРаботыСписком"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ИзмененияГрафикаРаботыСписком");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИндексацияЗаработка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ИндексацияЗаработка",
			НСтр("ru = 'Приказ об индексации заработка';
				|en = 'Wage indexation order'"),
			ТабличныйДокументИндексацияЗаработка(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ИндексацияЗаработка"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ИндексацияЗаработка");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг",
			НСтр("ru = 'Акт приема-передачи выполненных работ (услуг)';
				|en = 'Certificate of acceptance and transfer of performed works (rendered services)'"),
			ТабличныйДокументАктПриемаПередачиВыполненныхРаботУслуг(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг"), МассивОбъектов, ОбъектыПечати, Истина), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг",
			НСтр("ru = 'Акт приема-передачи выполненных работ (услуг) (поэтапное закрытие)';
				|en = 'Certificate of acceptance and transfer of performed works (rendered services) (staged closure)'"),
			ТабличныйДокументАктПриемаПередачиВыполненныхРаботУслуг(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВыплатеМатериальнойПомощи") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОВыплатеМатериальнойПомощи",
			НСтр("ru = 'Приказ о выплате материальной помощи';
				|en = 'Support payment order'"),
			ТабличныйДокументПриказОВыплатеМатериальнойПомощи(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыплатеМатериальнойПомощи"), МассивОбъектов, ОбъектыПечати, ПараметрыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыплатеМатериальнойПомощи");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя",
			НСтр("ru = 'Приказ о работе на условиях неполного рабочего времени';
				|en = 'Part-time work order'"),
			ТабличныйДокументПриказОВыходеНаНеполноеРабочееВремя(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком",
			НСтр("ru = 'Приказ о прекращении отпуска в связи с уходом в отпуск по беременности и родам';
				|en = 'Order to terminate leave due to maternity leave start'"),
			ТабличныйДокументПриказОПрекращенииОтпускаПоУходуЗаРебенком(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком",
			НСтр("ru = 'Приказ о выходе на работу до окончания отпуска по уходу за ребенком';
				|en = 'Order on work start before child care leave end'"),
			ТабличныйДокументПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПодтверждениеБронированияПозиции") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПодтверждениеБронированияПозиции", НСтр("ru = 'Подтверждение брони';
															|en = 'Reservation confirmation'"),
			ТабличныйДокументПодтверждениеБрони(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПодтверждениеБронированияПозиции"), МассивОбъектов, ОбъектыПечати), ,
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПодтверждениеБронированияПозиции");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработку") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработку", НСтр("ru = 'Оплата по среднему заработку';
															|en = 'Average earnings payment'"),
			ТабличныйДокументПриказОбОплатеПоСреднемуЗаработку(УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработку"), 
				МассивОбъектов, ОбъектыПечати, ПараметрыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработку");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработкуСписком") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработкуСписком", НСтр("ru = 'Оплата по среднему заработку списком';
																	|en = 'Average earnings payment as list'"),
			ТабличныйДокументПриказОбОплатеПоСреднемуЗаработкуСписком(УправлениеПечатью.МакетПечатнойФормы(
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработкуСписком"), 
			МассивОбъектов, ОбъектыПечати), ,
			"Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработкуСписком");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандуПечатиЗапискаРасчетПриУвольненииТ61(КомандыПечати, ИдентификаторыПФ, МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная", Порядок = 20) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.НачислениеЗарплаты)
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		// Записка-расчет при увольнении.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = МенеджерПечати;
		КомандаПечати.Идентификатор = ИдентификаторПечатнойФормыЗапискаРасчетТ61();
		КомандаПечати.Представление = НСтр("ru = 'Записка-расчет при увольнении (Т-61)';
											|en = 'Final pay upon termination of employment (T-61)'");
		КомандаПечати.Порядок = Порядок;
		КомандаПечати.ФункциональныеОпции = "РаботаВХозрасчетнойОрганизации";
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "Сотрудник");
		
		ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФУНКЦИИ ПЕЧАТИ КАДРОВЫХ ДАННЫХ

Функция ТабличныйДокументТрудовойДоговор(ПараметрыПечати, ИмяМакета, МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная." + ИмяМакета);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ТрудовойДоговор";
	ДанныеДляПечати = ДанныеДляПечатиТрудовогоДоговора(МассивОбъектов, ИмяМакета);
	
	ПервыйПриказ = Истина;
	Для Каждого ОписаниеПараметров Из ДанныеДляПечати Цикл
		
		МассивДанныхЗаполнения = ОписаниеПараметров.Значение;
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			НомерСтрокиНачалоОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			
			Если МассивОбъектов.Количество() = 1
				И ЗначениеЗаполнено(ПараметрыМакета.EMail) Тогда
				
				ПараметрыВывода.ПараметрыОтправки.Получатель = ПараметрыМакета.EMail;
				ПараметрыВывода.ПараметрыОтправки.Тема = НСтр("ru = 'Трудовой договор';
																|en = 'Employment contract'");
				
				Если ЗначениеЗаполнено(ПараметрыМакета.ТрудовойДоговорНомер) Тогда
					ПараметрыВывода.ПараметрыОтправки.Тема = ПараметрыВывода.ПараметрыОтправки.Тема + " №" + ПараметрыМакета.ТрудовойДоговорНомер;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПараметрыМакета.ТрудовойДоговорДата) Тогда
					
					ПараметрыВывода.ПараметрыОтправки.Тема = ПараметрыВывода.ПараметрыОтправки.Тема
						+ " " + НСтр("ru = 'от';
									|en = 'dated'") + " " + ПараметрыМакета.ТрудовойДоговорДата;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			ОбластьЧасть10 = Макет.ПолучитьОбласть("Часть10");
			ОбластьЧасть10.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(ОбластьЧасть10);
			
			Если ВРег(ИмяМакета) = ВРег("ПФ_MXL_ТрудовойДоговор") Тогда
				
				Если ПараметрыМакета.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1
					Или ПараметрыМакета.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2
					Или ПараметрыМакета.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3
					Или ПараметрыМакета.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4
					Или ПараметрыМакета.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный Тогда
					
					ОбластьЧасть15 = Макет.ПолучитьОбласть("Часть15");
					ДокументРезультат.Вывести(ОбластьЧасть15);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьЧасть18 = Макет.ПолучитьОбласть("Часть18");
			ОбластьЧасть18.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(ОбластьЧасть18);
			
			Если ПараметрыМакета.Страна <> Справочники.СтраныМира.Россия Тогда
				
				ОбластьСведенияИностранцев = Макет.ПолучитьОбласть("СведенияИностранцев");
				ОбластьСведенияИностранцев.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(ОбластьСведенияИностранцев);
				
			КонецЕсли;
			
			ОбластьЧасть20 = Макет.ПолучитьОбласть("Часть20");
			ОбластьЧасть20.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(ОбластьЧасть20);
			
			КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИмяМакета,
				НомерСтрокиНачалоОбласти, ПараметрыМакета, ОписаниеПараметров.Ключ);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ОписаниеПараметров.Ключ);
		
	КонецЦикла;
	
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати) Экспорт
	
	Если Макет <> Неопределено Тогда
		
		ПервыйПриказ = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			Если Не ПервыйПриказ Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляПечатиТрудовогоДоговора(МассивОбъектов, ИмяМакета)
	
	ДанныеДляПечати = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(МассивОбъектов) Тогда
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Номер КАК ПриказОПриемеНомер,
		|	ПриемНаРаботу.Дата КАК ПриказОПриемеДата,
		|	ПриемНаРаботу.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ПриемНаРаботу.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.Должность,
		|	ПриемНаРаботу.Подразделение,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ПриемНаРаботу.ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.ДатаПриема,
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Организация,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботу.РазрешениеНаРаботу,
		|	ПриемНаРаботу.РазрешениеНаПроживание,
		|	ПриемНаРаботу.УсловияОказанияМедпомощи,
		|	ПриемНаРаботу.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора
		|ПОМЕСТИТЬ ВТДанныеПриказаОПриеме
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Номер,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Дата,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация.НаименованиеПолное,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация.НаименованиеСокращенное,
		|	ПриемНаРаботуСпискомСотрудники.Сотрудник,
		|	ПриемНаРаботуСпискомСотрудники.Должность,
		|	ПриемНаРаботуСпискомСотрудники.Подразделение,
		|	ПриемНаРаботуСпискомСотрудники.ВидЗанятости,
		|	ПриемНаРаботуСпискомСотрудники.ТрудовойДоговорНомер,
		|	ПриемНаРаботуСпискомСотрудники.ТрудовойДоговорДата,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Руководитель,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	ПриемНаРаботуСпискомСотрудники.ДатаПриема,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Организация,
		|	ПриемНаРаботуСпискомСотрудники.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботуСпискомСотрудники.РазрешениеНаРаботу,
		|	ПриемНаРаботуСпискомСотрудники.РазрешениеНаПроживание,
		|	ПриемНаРаботуСпискомСотрудники.УсловияОказанияМедпомощи,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботуСпискомСотрудники.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботуСпискомСотрудники.ИныеУсловияДоговора
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
		|ГДЕ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДанныеПриказаОПриеме.Сотрудник,
		|	ДанныеПриказаОПриеме.ДатаПриема КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПриказаОПриеме.Руководитель КАК ФизическоеЛицо,
		|	ДанныеПриказаОПриеме.ДатаПриема КАК Период
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме";
	
	Запрос.Выполнить();
	
	// Получение кадровых данных сотрудника.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыеДанные = "ФИОПолные,ФамилияИО,АдресПоПропискеПредставление,ДокументПредставление,Пол,Страна,КоличествоДнейОтпускаОбщее,КлассУсловийТруда,EMailПредставление";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	// Получение ФИО руководителей.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТФизическиеЛицаПериоды");
	КадровыеДанные = "ФИОПолные,ФамилияИО,Пол";
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	ТаблицаНачислений = КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", , , , Ложь, Истина);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПриказаОПриеме.Организация,
		|	ДанныеПриказаОПриеме.ПриказОПриемеДата КАК Период
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме";
	
	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ТелефонОрганизации", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ФаксОрганизации", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияГородФактическогоАдреса", Новый ОписаниеТипов("Строка"));
	
	РезультатЗапросаПоШапке = Запрос.Выполнить();
	
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Выборка = РезультатЗапросаПоШапке.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "ФаксОрганизации");
		
		УстановитьПривилегированныйРежим(Истина);
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
		УстановитьПривилегированныйРежим(Ложь);
		
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;
		НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
		НоваяСтрокаСведенияОбОрганизациях.ИНН = ОргСведения.ИННЮЛ;
		НоваяСтрокаСведенияОбОрганизациях.КПП = ОргСведения.КППЮЛ;
		НоваяСтрокаСведенияОбОрганизациях.ТелефонОрганизации = ОргСведения.ТелОрганизации;
		НоваяСтрокаСведенияОбОрганизациях.ФаксОрганизации = ОргСведения.ФаксОрганизации;
		
		ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресЮридический = ОписаниеЮридическогоАдреса.Представление;
		
		ОписаниеФактическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресФактический = ОписаниеФактическогоАдреса.Представление;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса = ОписаниеФактическогоАдреса.Город;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СведенияОбОрганизациях", СведенияОбОрганизациях);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбОрганизациях.Период КАК Период,
		|	СведенияОбОрганизациях.Организация КАК Организация,
		|	СведенияОбОрганизациях.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СведенияОбОрганизациях.ИНН КАК ИНН,
		|	СведенияОбОрганизациях.КПП КАК КПП,
		|	СведенияОбОрганизациях.ТелефонОрганизации КАК ТелефонОрганизации,
		|	СведенияОбОрганизациях.ФаксОрганизации КАК ФаксОрганизации,
		|	СведенияОбОрганизациях.АдресЮридический КАК ОрганизацияАдресЮридический,
		|	СведенияОбОрганизациях.АдресФактический КАК ОрганизацияАдресФактический,
		|	СведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса
		|ПОМЕСТИТЬ ВТДанныеОрганизаций
		|ИЗ
		|	&СведенияОбОрганизациях КАК СведенияОбОрганизациях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПриказаОПриеме.Ссылка КАК Ссылка,
		|	ДанныеПриказаОПриеме.ПриказОПриемеНомер КАК ПриказОПриемеНомер,
		|	ДанныеПриказаОПриеме.ПриказОПриемеДата КАК ПриказОПриемеДата,
		|	ДанныеПриказаОПриеме.Подразделение КАК Подразделение,
		|	ДанныеПриказаОПриеме.Должность КАК Должность,
		|	ДанныеПриказаОПриеме.Сотрудник КАК Сотрудник,
		|	ДанныеПриказаОПриеме.ВидЗанятости КАК ВидЗанятости,
		|	ДанныеПриказаОПриеме.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
		|	ДанныеПриказаОПриеме.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
		|	ДанныеПриказаОПриеме.Руководитель КАК Руководитель,
		|	ДанныеПриказаОПриеме.ДолжностьРуководителя КАК РуководительДолжность,
		|	ДанныеПриказаОПриеме.ДатаПриема КАК ДатаПриема,
		|	ДанныеПриказаОПриеме.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА """"
		|		ИНАЧЕ ДанныеПриказаОПриеме.РазрешениеНаРаботу
		|	КОНЕЦ КАК РазрешениеНаРаботу,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА """"
		|		ИНАЧЕ ДанныеПриказаОПриеме.РазрешениеНаПроживание
		|	КОНЕЦ КАК РазрешениеНаПроживание,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА """"
		|		ИНАЧЕ ДанныеПриказаОПриеме.УсловияОказанияМедпомощи
		|	КОНЕЦ КАК УсловияОказанияМедпомощи,
		|	ДанныеПриказаОПриеме.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	ДанныеПриказаОПриеме.ОборудованиеРабочегоМеста КАК ОборудованиеРабочегоМеста,
		|	ДанныеПриказаОПриеме.ИныеУсловияДоговора КАК ИныеУсловияДоговора,
		|	ДанныеОрганизаций.Организация КАК Организация,
		|	ДанныеОрганизаций.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ДанныеОрганизаций.ИНН КАК ИНН,
		|	ДанныеОрганизаций.КПП КАК КПП,
		|	ДанныеОрганизаций.ТелефонОрганизации КАК ТелефонОрганизации,
		|	ДанныеОрганизаций.ФаксОрганизации КАК ФаксОрганизации,
		|	ДанныеОрганизаций.ОрганизацияАдресЮридический КАК ОрганизацияАдресЮридический,
		|	ДанныеОрганизаций.ОрганизацияАдресФактический КАК ОрганизацияАдресФактический,
		|	ДанныеОрганизаций.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса,
		|	КадровыеДанныеСотрудников.Страна КАК Страна,
		|	КадровыеДанныеФизическихЛиц.ФИОПолные КАК РуководительФИОПолные,
		|	КадровыеДанныеФизическихЛиц.ФамилияИО КАК РуководительФамилияИО,
		|	КадровыеДанныеФизическихЛиц.Пол КАК РуководительПол,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
		|	КадровыеДанныеСотрудников.ФамилияИО КАК ФамилияИО,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.АдресПоПропискеПредставление КАК АдресПоПропискеПредставление,
		|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление,
		|	КадровыеДанныеСотрудников.КоличествоДнейОтпускаОбщее КАК КоличествоДнейОтпускаОбщее,
		|	КадровыеДанныеСотрудников.КлассУсловийТруда КАК КлассУсловийТруда,
		|	КадровыеДанныеСотрудников.EMailПредставление КАК EMail
		|ИЗ
		|	ВТДанныеПриказаОПриеме КАК ДанныеПриказаОПриеме
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОрганизаций КАК ДанныеОрганизаций
		|		ПО ДанныеПриказаОПриеме.Организация = ДанныеОрганизаций.Организация
		|			И ДанныеПриказаОПриеме.ПриказОПриемеДата = ДанныеОрганизаций.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
		|		ПО ДанныеПриказаОПриеме.Руководитель = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
		|			И ДанныеПриказаОПриеме.ДатаПриема = КадровыеДанныеФизическихЛиц.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПриказаОПриеме.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеПриказаОПриеме.ДатаПриема = КадровыеДанныеСотрудников.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыТрудовогоДоговора = ПараметрыТрудовогоДоговора();
		ЗаполнитьЗначенияСвойств(ПараметрыТрудовогоДоговора, Выборка);
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ПараметрыТрудовогоДоговора.РуководительФИОПолные), 2, РезультатСклонения, ПараметрыТрудовогоДоговора.РуководительПол) Тогда
			ПараметрыТрудовогоДоговора.РуководительФИОПолные = РезультатСклонения
		КонецЕсли;
		
		ПараметрыТрудовогоДоговора.РуководительДолжностьВПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ПараметрыТрудовогоДоговора.РуководительДолжность), 2);
		
		ПараметрыТрудовогоДоговора.ТрудовойДоговорДата = Формат(Выборка.ТрудовойДоговорДата, "Л=ru_RU; ДЛФ=DD; ДП='""___"" ____________ 20___ г.'");
		ПараметрыТрудовогоДоговора.ПриказОПриемеДата = Формат(Выборка.ПриказОПриемеДата, "ДЛФ=D; ДЛФ=DD");
		ПараметрыТрудовогоДоговора.ДатаПриема = Формат(Выборка.ДатаПриема, "ДЛФ=D; ДЛФ=DD");
		
		ОплатаТруда = "";
		СтрокиНачислений = ТаблицаНачислений.НайтиСтроки(Новый Структура("Сотрудник,Период", Выборка.Сотрудник, Выборка.ДатаПриема));
		Если СтрокиНачислений.Количество() > 0 Тогда
			
			Если Не ПустаяСтрока(СтрокиНачислений[0].ОписаниеОклада) Тогда
				ОплатаТруда = СтрокиНачислений[0].ОписаниеОклада;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СтрокиНачислений[0].Надбавка) Тогда
				ОплатаТруда = ?(ПустаяСтрока(ОплатаТруда), "", ОплатаТруда + "; ") + СтрокиНачислений[0].Надбавка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ОплатаТруда) Тогда
			ОплатаТруда = Символы.ПС + "_____________________________________________________________________________________";
		КонецЕсли;
		
		УсловияОплатыТруда = НСтр("ru = 'Согласно настоящему договору Работнику выплачивается заработная плата';
									|en = 'According to the present contract, salary is paid to the Employee'");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			УсловияОплатыТруда = УсловияОплатыТруда + " " + НСтр("ru = 'в соответствии со штатным расписанием';
																|en = 'according to the headcount'");
		КонецЕсли;
		
		УсловияОплатыТруда = УсловияОплатыТруда + ".";
		
		УсловияОплатыТруда = УсловияОплатыТруда + " " + НСтр("ru = 'На момент заключения договора заработная плата состоит из';
															|en = 'At the time the contract is concluded, salary consists of'") + ": " + ОплатаТруда;
		ПараметрыТрудовогоДоговора.УсловияОплатыТруда = УсловияОплатыТруда + ?(Прав(УсловияОплатыТруда, 1) = ".", "", ".");
		
		Если ЗначениеЗаполнено(Выборка.КлассУсловийТруда) Тогда
			
			Если Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Оптимальный Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru = 'оптимальными';
																|en = 'optimal'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru = '1 класс';
																|en = '1 class'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Допустимый Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru = 'допустимыми';
																|en = 'allowed'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru = '2 класс';
																|en = '2 class'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1 Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru = 'вредными';
																|en = 'harmful'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru = '3 класс, подкласс 3.1 (вредные условия труда 1 степени)';
																|en = '3 class, subclass 3.1 (harmful working conditions, the 1st level)'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2 Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru = 'вредными';
																|en = 'harmful'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru = '3 класс, подкласс 3.2 (вредные условия труда 2 степени)';
																|en = '3 class, subclass 3.2 (harmful working conditions, the 2nd level)'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3 Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru = 'вредными';
																|en = 'harmful'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru = '3 класс, подкласс 3.3 (вредные условия труда 3 степени)';
																|en = '3 class, subclass 3.3 (harmful working conditions, the 3rd level)'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4 Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru = 'вредными';
																|en = 'harmful'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru = '3 класс, подкласс 3.4 (вредные условия труда 4 степени)';
																|en = '3 class, subclass 3.4 (harmful working conditions, the 4th level)'");
				
			ИначеЕсли Выборка.КлассУсловийТруда = Перечисления.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный Тогда
				
				ПараметрыТрудовогоДоговора.УсловияТруда = НСтр("ru = 'опасными';
																|en = 'hazardous'");
				ПараметрыТрудовогоДоговора.КлассУсловий = НСтр("ru = '4 класс';
																|en = '4 class'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.УсловияТруда) Тогда
			
			ПараметрыТрудовогоДоговора.УсловияТруда = "_____________";
			ПараметрыТрудовогоДоговора.КлассУсловий = "_____________";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ОснованиеПредставителяНанимателя) Тогда
			ПараметрыТрудовогоДоговора.ОснованиеРуководителя = Выборка.ОснованиеПредставителяНанимателя;
		Иначе
			ПараметрыТрудовогоДоговора.ОснованиеРуководителя = "__________________";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ОборудованиеРабочегоМеста) Тогда
			ПараметрыТрудовогоДоговора.ОборудованиеРабочегоМеста = " (" + Выборка.ОборудованиеРабочегоМеста + ")"
		Иначе
			ПараметрыТрудовогоДоговора.ОборудованиеРабочегоМеста = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИныеУсловияДоговора) Тогда
			
			Если ИмяМакета = "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе" Тогда
				ПараметрыТрудовогоДоговора.ИныеУсловияДоговора = "8.5.";
			Иначе
				ПараметрыТрудовогоДоговора.ИныеУсловияДоговора = "7.3.";
			КонецЕсли;
			
			ПараметрыТрудовогоДоговора.ИныеУсловияДоговора = ПараметрыТрудовогоДоговора.ИныеУсловияДоговора + " " + Выборка.ИныеУсловияДоговора + ".";
			
		Иначе
			ПараметрыТрудовогоДоговора.ИныеУсловияДоговора = "";
		КонецЕсли;
		
		Если Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
			ПараметрыТрудовогоДоговора.ВидЗанятостиПоДоговору = НСтр("ru = 'основным местом работы';
																	|en = 'as primary employment'");
		Иначе
			ПараметрыТрудовогоДоговора.ВидЗанятостиПоДоговору = НСтр("ru = 'местом работы по совместительству';
																	|en = 'secondary employment place'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаЗавершенияТрудовогоДоговора) Тогда
			
			ПараметрыТрудовогоДоговора.СрокДействияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'на срок до %1';
					|en = 'for the period to %1'"),
				Формат(Выборка.ДатаЗавершенияТрудовогоДоговора, "ДЛФ=DD"));
				
			Если Прав(ПараметрыТрудовогоДоговора.СрокДействияПредставление, 1) = "." Тогда
				ПараметрыТрудовогоДоговора.СрокДействияПредставление =
					Лев(ПараметрыТрудовогоДоговора.СрокДействияПредставление, СтрДлина(ПараметрыТрудовогоДоговора.СрокДействияПредставление) - 1);
			КонецЕсли;
				
		Иначе
			ПараметрыТрудовогоДоговора.СрокДействияПредставление = НСтр("ru = 'на неопределенный срок';
																		|en = 'for an indefinite period'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.КоличествоДнейОтпускаОбщее) Тогда
			ПараметрыТрудовогоДоговора.КоличествоДнейОтпускаОбщее = "____";
		КонецЕсли;
		
		Если ПараметрыТрудовогоДоговора.Страна <> Справочники.СтраныМира.Россия Тогда
			
			Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.РазрешениеНаРаботу) Тогда
				ПараметрыТрудовогоДоговора.РазрешениеНаРаботу = Символы.ПС
					+ "______________________________________________________________________________________";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.РазрешениеНаПроживание) Тогда
				ПараметрыТрудовогоДоговора.РазрешениеНаПроживание = Символы.ПС
					+ "______________________________________________________________________________________";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПараметрыТрудовогоДоговора.УсловияОказанияМедпомощи) Тогда
				ПараметрыТрудовогоДоговора.УсловияОказанияМедпомощи = Символы.ПС
					+ "______________________________________________________________________________________";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			
			ПараметрыТрудовогоДоговора.ИННКПП =
				НСтр("ru = 'ИНН';
					|en = 'TIN'") + ":  " + ?(ЗначениеЗаполнено(Выборка.ИНН), Выборка.ИНН, "_____________");
				
			Если ЗарплатаКадры.ЭтоЮридическоеЛицо(Выборка.Организация) Тогда
				
				ПараметрыТрудовогоДоговора.ИННКПП = ПараметрыТрудовогоДоговора.ИННКПП +
					" " + НСтр("ru = 'КПП';
								|en = 'KPP'") + ": " + ?(ЗначениеЗаполнено(Выборка.КПП), Выборка.КПП, "_____________");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.РуководительДолжность) Тогда
			ПараметрыТрудовогоДоговора.РуководительДолжность = "__________________________";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.РуководительФамилияИО) Тогда
			ПараметрыТрудовогоДоговора.РуководительФамилияИО = "__________________________";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ТелефонОрганизации) Тогда
			ПараметрыТрудовогоДоговора.ОрганизацияТелефон = Выборка.ТелефонОрганизации;
		Иначе
			ПараметрыТрудовогоДоговора.ОрганизацияТелефон = "__________________________";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ФаксОрганизации) Тогда
			
			ПараметрыТрудовогоДоговора.ОрганизацияТелефон = ПараметрыТрудовогоДоговора.ОрганизацияТелефон +
				" " + НСтр("ru = 'Факс';
							|en = 'Fax'") + ": " + Выборка.ФаксОрганизации;
			
		КонецЕсли;
		
		МассивПараметров = ДанныеДляПечати.Получить(ПараметрыТрудовогоДоговора.Ссылка);
		Если МассивПараметров = Неопределено Тогда
			
			МассивПараметров = Новый Массив;
			ДанныеДляПечати.Вставить(ПараметрыТрудовогоДоговора.Ссылка, МассивПараметров);
			
		КонецЕсли;
		
		МассивПараметров.Добавить(ПараметрыТрудовогоДоговора);
		
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПараметрыТрудовогоДоговора()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("ПриказОПриемеНомер", "");
	Параметры.Вставить("ПриказОПриемеДата", '00010101');
	Параметры.Вставить("ОрганизацияНаименованиеПолное", "");
	Параметры.Вставить("ИННКПП", "");
	Параметры.Вставить("ОрганизацияТелефон", "");
	Параметры.Вставить("ОрганизацияАдресЮридический", "");
	Параметры.Вставить("ОрганизацияАдресФактический", "");
	Параметры.Вставить("ОрганизацияГородФактическогоАдреса", "");
	Параметры.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	Параметры.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Параметры.Вставить("Должность", Справочники.Должности.ПустаяСсылка());
	Параметры.Вставить("ВидЗанятостиПоДоговору", "");
	Параметры.Вставить("ТрудовойДоговорНомер", "");
	Параметры.Вставить("ТрудовойДоговорДата", '00010101');
	Параметры.Вставить("СрокДействияПредставление", "");
	Параметры.Вставить("РуководительФамилияИО", "");
	Параметры.Вставить("РуководительФИОПолные", "");
	Параметры.Вставить("РуководительПол");
	Параметры.Вставить("РуководительДолжность", Справочники.Должности.ПустаяСсылка());
	Параметры.Вставить("ДатаПриема", '00010101');
	Параметры.Вставить("ФИОПолные", "");
	Параметры.Вставить("ФамилияИО", "");
	Параметры.Вставить("Пол");
	Параметры.Вставить("КлассУсловийТруда");
	Параметры.Вставить("УсловияТруда", "");
	Параметры.Вставить("КлассУсловий", "");
	Параметры.Вставить("АдресПоПропискеПредставление", "");
	Параметры.Вставить("ДокументПредставление", "");
	Параметры.Вставить("Страна", Справочники.СтраныМира.Россия);
	Параметры.Вставить("РазрешениеНаРаботу", "");
	Параметры.Вставить("РазрешениеНаПроживание", "");
	Параметры.Вставить("УсловияОказанияМедпомощи", "");
	Параметры.Вставить("КоличествоДнейОтпускаОбщее", "");
	Параметры.Вставить("ОснованиеРуководителя", "");
	Параметры.Вставить("ОборудованиеРабочегоМеста", "");
	Параметры.Вставить("ИныеУсловияДоговора", "");
	Параметры.Вставить("РуководительДолжностьВПадеже", "");
	Параметры.Вставить("УсловияОплатыТруда");
	Параметры.Вставить("EMail");
	
	Возврат Параметры;
	
КонецФункции

Процедура ВывестиДанныеСправкиВТабличныйДокумент(Макет, ТабличныйДокумент, МассивДанныхЗаполнения, ОбъектыПечати, ЭтоСправкаОДоходах = Ложь) Экспорт
	
	Если Макет <> Неопределено Тогда
		
		ПерваяСправка = Истина;
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			Если Не ПерваяСправка Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПерваяСправка = Ложь;
			КонецЕсли;
			
			Макет.Параметры.Заполнить(ПараметрыМакета);
			
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ПараметрыМакета.ФИОПолные), 3, РезультатСклонения, ПараметрыМакета.Пол) Тогда
				Макет.Параметры.ФИОПолные = РезультатСклонения;
			КонецЕсли;
			
			Макет.Параметры.ДатаСправки = Формат(ПараметрыМакета.ДатаСправки, "ДЛФ=DD; ДП='___ _________ _____'");
			
			Если ПустаяСтрока(ПараметрыМакета.ОрганизацияАдресФактический) Тогда
				Макет.Параметры.ОрганизацияАдресФактический = ПараметрыМакета.ОрганизацияАдресЮридический;
			КонецЕсли;
			
			Макет.Параметры.ДатаПриема = Формат(ПараметрыМакета.ДатаПриема, "ДЛФ=DD; ДП='___ _________ _____'");
			
			Если ЭтоСправкаОДоходах Тогда
				ВывестиВМакетДанныеОСреднемесячномДоходе(Макет, ПараметрыМакета);
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыМакета.ДатаОкончания) = Тип("Дата") Тогда
				Макет.Параметры.ДатаОкончания = Формат(ПараметрыМакета.ДатаОкончания, "ДЛФ=DD");
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(Макет);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВМакетДанныеОСреднемесячномДоходе(Макет, ПараметрыМакета)
	
	Макет.Параметры.НачалоПериода = Формат(ПараметрыМакета.НачалоПериода, "ДЛФ=DD; ДП='___ _________ _____'");
	
	Макет.Параметры.ОкончаниеПериода = Формат(ПараметрыМакета.ОкончаниеПериода, "ДЛФ=DD; ДП='___ _________ _____'");
	
	Макет.Параметры.СреднемесячныйДоходПрописью = НРег(ЧислоПрописью(ПараметрыМакета.СреднемесячныйДоход, "Л = ru_RU",  "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 0"));
	
КонецПроцедуры

Функция ТабличныйДокументСправкаОДоходахПроизвольнаяФорма(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаОДоходахПроизвольнаяФорма";
	МассивДанныхЗаполнения = ДанныеДляПечатиСправкиОДоходах(МассивОбъектов);
	ВывестиДанныеСправкиВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати, Истина);
	
	Возврат ДокументРезультат;
	
КонецФункции 

Функция ДанныеДляПечатиСправкиОДоходах(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОбщиеДанныеСправок(Запрос.МенеджерВременныхТаблиц, МассивОбъектов);
	
	Запрос.УстановитьПараметр("СтрокаЕго", НСтр("ru = 'Его';
												|en = 'His'"));
	Запрос.УстановитьПараметр("СтрокаЕе", НСтр("ru = 'Ее';
												|en = 'Her'"));
	Запрос.УстановитьПараметр("СтрокаОн", НСтр("ru = 'он';
												|en = 'he'"));
	Запрос.УстановитьПараметр("СтрокаОна", НСтр("ru = 'она';
												|en = 'she'"));
	Запрос.УстановитьПараметр("Работает", НСтр("ru = 'работает';
												|en = 'has worked'"));
	Запрос.УстановитьПараметр("Работал", НСтр("ru = 'работал';
												|en = 'worked'"));
	Запрос.УстановитьПараметр("Работала", НСтр("ru = 'работала';
												|en = 'worked'"));
	Запрос.УстановитьПараметр("НастоящееВремя", НСтр("ru = 'настоящее время';
													|en = 'present'"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ) КАК Месяц,
		|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
		|	СУММА(ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ВТНачисленияСотрудников
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбщиеДанныеСправок КАК ОбщиеДанныеСправок
		|		ПО ВзаиморасчетыССотрудниками.ФизическоеЛицо = ОбщиеДанныеСправок.ФизическоеЛицо
		|			И (ВзаиморасчетыССотрудниками.Период >= НАЧАЛОПЕРИОДА(ВЫБОР
		|					КОГДА ОбщиеДанныеСправок.ДатаПриема > НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -6), МЕСЯЦ)
		|						ТОГДА ОбщиеДанныеСправок.ДатаПриема
		|					ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -6), МЕСЯЦ)
		|				КОНЕЦ, МЕСЯЦ))
		|			И (ВзаиморасчетыССотрудниками.Период <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -1), МЕСЯЦ))
		|			И ВзаиморасчетыССотрудниками.Организация <= ОбщиеДанныеСправок.Организация
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыССотрудниками.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыССотрудниками.Период, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСотрудников.Сотрудник КАК Сотрудник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НачисленияСотрудников.Месяц) КАК КоличествоПериодов
		|ПОМЕСТИТЬ ВТКоличествоПериодовПолученияДоходов
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСотрудников.Сотрудник КАК Сотрудник,
		|	СУММА(НачисленияСотрудников.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ВТОбщийДоходСотрудников
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщийДоходСотрудников.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА КоличествоПериодовПолученияДоходов.КоличествоПериодов = 0
		|			ТОГДА 0
		|		ИНАЧЕ ОбщийДоходСотрудников.СуммаВзаиморасчетов / КоличествоПериодовПолученияДоходов.КоличествоПериодов
		|	КОНЕЦ КАК СреднемесячныйДоход
		|ПОМЕСТИТЬ ВТСреднемесячныйДоходСотрудников
		|ИЗ
		|	ВТОбщийДоходСотрудников КАК ОбщийДоходСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПериодовПолученияДоходов КАК КоличествоПериодовПолученияДоходов
		|		ПО ОбщийДоходСотрудников.Сотрудник = КоличествоПериодовПолученияДоходов.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбщиеДанныеСправок.ДатаСправки КАК ДатаСправки,
		|	ОбщиеДанныеСправок.Организация КАК Организация,
		|	ОбщиеДанныеСправок.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ОбщиеДанныеСправок.ОрганизацияИНН КАК ОрганизацияИНН,
		|	ОбщиеДанныеСправок.ОрганизацияАдресЮридический КАК ОрганизацияАдресЮридический,
		|	ОбщиеДанныеСправок.ОрганизацияАдресФактический КАК ОрганизацияАдресФактический,
		|	ОбщиеДанныеСправок.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса,
		|	ОбщиеДанныеСправок.ОрганизацияРасчетныйСчет КАК ОрганизацияРасчетныйСчет,
		|	ОбщиеДанныеСправок.ОрганизацияБанк КАК ОрганизацияБанк,
		|	ОбщиеДанныеСправок.ОрганизацияКорСчет КАК ОрганизацияКорСчет,
		|	ОбщиеДанныеСправок.ОрганизацияБИК КАК ОрганизацияБИК,
		|	ОбщиеДанныеСправок.ОрганизацияТелефон КАК ОрганизацияТелефон,
		|	ОбщиеДанныеСправок.ОрганизацияФакс КАК ОрганизацияФакс,
		|	ОбщиеДанныеСправок.ФИОРуководителя КАК ФИОРуководителя,
		|	ОбщиеДанныеСправок.ФИОГлавногоБухгалтера КАК ФИОГлавногоБухгалтера,
		|	ОбщиеДанныеСправок.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ОбщиеДанныеСправок.ДолжностьГлавногоБухгалтера КАК ДолжностьГлавногоБухгалтера,
		|	ОбщиеДанныеСправок.Ссылка КАК Ссылка,
		|	ОбщиеДанныеСправок.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбщиеДанныеСправок.ДатаПриема КАК ДатаПриема,
		|	ОбщиеДанныеСправок.Должность КАК Должность,
		|	ОбщиеДанныеСправок.ФИОПолные КАК ФИОПолные,
		|	ОбщиеДанныеСправок.Пол КАК Пол,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.ДатаПриема > НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -6), МЕСЯЦ)
		|			ТОГДА ОбщиеДанныеСправок.ДатаПриема
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -6), МЕСЯЦ)
		|	КОНЕЦ КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ОбщиеДанныеСправок.Период, МЕСЯЦ, -1), МЕСЯЦ) КАК ОкончаниеПериода,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА &СтрокаЕго
		|		ИНАЧЕ &СтрокаЕе
		|	КОНЕЦ КАК ЕгоЕе,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА &СтрокаОн
		|		ИНАЧЕ &СтрокаОна
		|	КОНЕЦ КАК ОнОна,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОбщиеДанныеСправок.ДатаУвольнения > ОбщиеДанныеСправок.ДатаСправки
		|			ТОГДА &Работает
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОбщиеДанныеСправок.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|					ТОГДА &Работал
		|				ИНАЧЕ &Работала
		|			КОНЕЦ
		|	КОНЕЦ КАК РаботаетРаботала,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОбщиеДанныеСправок.ДатаУвольнения > ОбщиеДанныеСправок.ДатаСправки
		|			ТОГДА &НастоящееВремя
		|		ИНАЧЕ ОбщиеДанныеСправок.ДатаУвольнения
		|	КОНЕЦ КАК ДатаОкончания,
		|	ЕСТЬNULL(СреднемесячныйДоходСотрудников.СреднемесячныйДоход, 0) КАК СреднемесячныйДоход
		|ИЗ
		|	ВТОбщиеДанныеСправок КАК ОбщиеДанныеСправок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныйДоходСотрудников КАК СреднемесячныйДоходСотрудников
		|		ПО ОбщиеДанныеСправок.Ссылка = СреднемесячныйДоходСотрудников.Сотрудник";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТабличныйДокументСправкаСМестаРаботы(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаСМестаРаботы";
	МассивДанныхЗаполнения = ДанныеДляПечатиСправкиСМестаРаботы(МассивОбъектов);
	
	ВывестиДанныеСправкиВТабличныйДокумент(Макет, ДокументРезультат, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции 

Функция ДанныеДляПечатиСправкиСМестаРаботы(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОбщиеДанныеСправок(Запрос.МенеджерВременныхТаблиц, МассивОбъектов);
	
	Запрос.УстановитьПараметр("СтрокаОн", НСтр("ru = 'он';
												|en = 'he'"));
	Запрос.УстановитьПараметр("СтрокаОна", НСтр("ru = 'она';
												|en = 'she'"));
	Запрос.УстановитьПараметр("Работает", НСтр("ru = 'работает';
												|en = 'has worked'"));
	Запрос.УстановитьПараметр("Работал", НСтр("ru = 'работал';
												|en = 'worked'"));
	Запрос.УстановитьПараметр("Работала", НСтр("ru = 'работала';
												|en = 'worked'"));
	Запрос.УстановитьПараметр("НастоящееВремя", НСтр("ru = 'настоящее время';
													|en = 'present'"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбщиеДанныеСправок.ДатаСправки КАК ДатаСправки,
		|	ОбщиеДанныеСправок.Организация КАК Организация,
		|	ОбщиеДанныеСправок.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ОбщиеДанныеСправок.ОрганизацияИНН КАК ОрганизацияИНН,
		|	ОбщиеДанныеСправок.ОрганизацияАдресЮридический КАК ОрганизацияАдресЮридический,
		|	ОбщиеДанныеСправок.ОрганизацияАдресФактический КАК ОрганизацияАдресФактический,
		|	ОбщиеДанныеСправок.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса,
		|	ОбщиеДанныеСправок.ОрганизацияРасчетныйСчет КАК ОрганизацияРасчетныйСчет,
		|	ОбщиеДанныеСправок.ОрганизацияБанк КАК ОрганизацияБанк,
		|	ОбщиеДанныеСправок.ОрганизацияКорСчет КАК ОрганизацияКорСчет,
		|	ОбщиеДанныеСправок.ОрганизацияБИК КАК ОрганизацияБИК,
		|	ОбщиеДанныеСправок.ОрганизацияТелефон КАК ОрганизацияТелефон,
		|	ОбщиеДанныеСправок.ОрганизацияФакс КАК ОрганизацияФакс,
		|	ОбщиеДанныеСправок.ФИОРуководителя КАК ФИОРуководителя,
		|	ОбщиеДанныеСправок.ФИОГлавногоБухгалтера КАК ФИОГлавногоБухгалтера,
		|	ОбщиеДанныеСправок.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ОбщиеДанныеСправок.ДолжностьГлавногоБухгалтера КАК ДолжностьГлавногоБухгалтера,
		|	ОбщиеДанныеСправок.Ссылка КАК Ссылка,
		|	ОбщиеДанныеСправок.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбщиеДанныеСправок.ДатаПриема КАК ДатаПриема,
		|	ОбщиеДанныеСправок.Должность КАК Должность,
		|	ОбщиеДанныеСправок.ФИОПолные КАК ФИОПолные,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА &СтрокаОн
		|		ИНАЧЕ &СтрокаОна
		|	КОНЕЦ КАК ОнОна,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОбщиеДанныеСправок.ДатаУвольнения > ОбщиеДанныеСправок.ДатаСправки
		|			ТОГДА &Работает
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОбщиеДанныеСправок.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|					ТОГДА &Работал
		|				ИНАЧЕ &Работала
		|			КОНЕЦ
		|	КОНЕЦ КАК РаботаетРаботала,
		|	ВЫБОР
		|		КОГДА ОбщиеДанныеСправок.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОбщиеДанныеСправок.ДатаУвольнения > ОбщиеДанныеСправок.ДатаСправки
		|			ТОГДА &НастоящееВремя
		|		ИНАЧЕ ОбщиеДанныеСправок.ДатаУвольнения
		|	КОНЕЦ КАК ДатаОкончания,
		|	ОбщиеДанныеСправок.Пол КАК Пол,
		|	ОбщиеДанныеСправок.ДокументПредставление КАК ДокументПредставление
		|ИЗ
		|	ВТОбщиеДанныеСправок КАК ОбщиеДанныеСправок";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//////////////////////////////////////////////////////////////////////
// Расчет при увольнении

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму записки-расчета(Т61).
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументЗапискиРасчетаПриУвольнении(ПараметрыПечати, Макет, МассивОбъектов, ОбъектыПечати)
	
	ДанныеЗаполнения = ДанныеДляПечатиЗапискиРасчетаТ61(МассивОбъектов);
	
	ДокументРезультат = СформироватьЗапискиРасчетаТ61(ПараметрыПечати, Макет, ДанныеЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции 

Функция СформироватьЗапискиРасчетаТ61(ПараметрыПечати, Макет, ДанныеЗаполнения, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ЗапискаРасчетПриУвольнении";

	ПервыйПриказ = Истина;
	Для Каждого ДанныеЗаполненияКлючИЗначение Из ДанныеЗаполнения Цикл
		
		МассивДанныхЗаполнения = ДанныеЗаполненияКлючИЗначение.Данные;
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
			
			НомерСтрокиНачалаОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			
			ОбластьЛицеваяСторона					= Макет.ПолучитьОбласть("ЛицеваяСторона");
			ОбластьРасчетСреднего					= Макет.ПолучитьОбласть("РасчетСреднего");
			ОбластьРасчетСреднегоИтого				= Макет.ПолучитьОбласть("РасчетСреднегоИтого");
			ОбластьДополнительнаяСтрокаЗаработка	= Макет.ПолучитьОбласть("ДополнительнаяСтрокаЗаработка");
			ОбластьПодвал							= Макет.ПолучитьОбласть("Подвал");
		
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;
			
			ОбластьЛицеваяСторона.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(ОбластьЛицеваяСторона);
			ОбластьРасчетСреднего.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(ОбластьРасчетСреднего);
			
			Для каждого ДополнительнаяСтрокаЗаработка Из ПараметрыМакета.МассивДополнительныхСтрокЗаработка Цикл
				ОбластьДополнительнаяСтрокаЗаработка.Параметры.Заполнить(ДополнительнаяСтрокаЗаработка);
				ДокументРезультат.Вывести(ОбластьДополнительнаяСтрокаЗаработка);
			КонецЦикла;
			
			ОбластьРасчетСреднегоИтого.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(ОбластьРасчетСреднегоИтого);
			ОбластьПодвал.Параметры.Заполнить(ПараметрыМакета);
			ДокументРезультат.Вывести(ОбластьПодвал);
			
			КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторПечатнойФормыЗапискаРасчетТ61(), НомерСтрокиНачалаОбласти,
				ПараметрыМакета, ДанныеЗаполненияКлючИЗначение.Ссылка);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеЗаполненияКлючИЗначение.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции 

Функция ДанныеДляПечатиЗапискиРасчетаТ61(МассивОбъектов)
	
	ДанныеДляПечати = Новый Массив;
	
	Результат 	= КадровыйУчетРасширенный.СформироватьЗапросДляТ61(МассивОбъектов);
	Выборка 	= Результат.Выбрать();
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ДанныеРасчетаСреднегоЗаработкаДокументов = Документы.Увольнение.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеРасчетаСреднегоЗаработкаДокументов, Документы.УвольнениеСписком.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов));
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		МассивПараметров = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Параметры = СтруктураПараметровЗапискиРасчетаТ61();
			КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
				
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Параметры.Работник), 5, РезультатСклонения, Параметры.Пол) Тогда
				Параметры.Работник	= РезультатСклонения
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Параметры.КВыплате) Тогда
				
				Параметры.КВыплатеПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Параметры.КВыплате, ВалютаУчета);
				Параметры.КВыплатеРублиКопейки =
					"(" + Формат(Цел(Параметры.КВыплате),"ЧДЦ=0; ЧН=-") 
					+ Символы.НПП + НСтр("ru = 'руб';
										|en = 'rub'") + Символы.НПП 
					+ Формат((Параметры.КВыплате - Цел(Параметры.КВыплате)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-")
					+ Символы.НПП + НСтр("ru = 'коп';
										|en = 'cents'") + ")";
				
			Иначе
				
				Параметры.КВыплатеПрописью = "";
				Параметры.КВыплатеРублиКопейки = "";
				
			КонецЕсли;
			
			Параметры.ДатаУвольнения  		= Формат(Параметры.ДатаУвольнения, "ДЛФ=DD");
			Параметры.ТрудовойДоговорДата 	= Формат(Параметры.ТрудовойДоговорДата, "ДЛФ=D");		
			Параметры.ДатаДок 				= Формат(Параметры.ДатаДок, "ДЛФ=D");
			Параметры.ДатаДок 				= Формат(Параметры.ДатаДок, "ДЛФ=D");
			
			Параметры.НомерДок = ЗарплатаКадрыОтчеты.НомерНаПечать(Выборка.НомерДок, Выборка.НомерПриказа);
			
			Если НЕ ПустаяСтрока(Выборка.ТекстОснования) Тогда
				Параметры.СтатьяТКРФ = КадровыйУчет.ПредставлениеСтатьиУвольненияДляТ8(Выборка.СтатьяТКРФ);
			КонецЕсли;
			
			Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработкаДокументов Цикл
				Если Выборка.Ссылка = Элемент.РеквизитыДокумента.Ссылка
					И Выборка.Сотрудник = Элемент.РеквизитыДокумента.Сотрудник Тогда
					ДанныеРасчетаСреднегоЗаработка 	= Элемент.ДанныеРасчетаСреднего;
					ПараметрыРасчетаСреднего 		= Элемент.ПараметрыРасчета;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ОбщаяТаблицаДанныхОСреднем = Новый ТаблицаЗначений;
			ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
			ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
			
			Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка["Заработок"] Цикл
				НоваяСтрока = ОбщаяТаблицаДанныхОСреднем.Добавить();
				НоваяСтрока.Месяц = Элемент["Месяц"];
				НоваяСтрока.Сумма = Элемент["Учтено"];
			КонецЦикла;
			
			ОбщаяТаблицаДанныхОСреднем.Свернуть("Месяц", "Сумма");
			ОбщаяТаблицаДанныхОСреднем.Сортировать("Месяц");
			
			МесяцСреднегоЗаработка = 1;
			Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
				
				Если МесяцСреднегоЗаработка > 12 Тогда
				   Прервать;
	 			КонецЕсли;
				
				СтрокаГод 	= "Год" 	+ МесяцСреднегоЗаработка;
				СтрокаМесяц = "Месяц" 	+ МесяцСреднегоЗаработка;
				СтрокаСумма = "Сумма" 	+ МесяцСреднегоЗаработка;
				Параметры.Вставить(СтрокаГод, Формат(ПериодСреднего.Месяц, "ДФ=yyyy"));
				Параметры.Вставить(СтрокаМесяц, Формат(ПериодСреднего.Месяц, "ДФ=MMMM"));
				Параметры.Вставить(СтрокаСумма, ПериодСреднего.Сумма);
				МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;
			КонецЦикла;
			
			МассивДополнительныхСтрокЗаработка = Новый Массив; 
			
			МесяцСреднегоЗаработка = 0;
			Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
				МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;
				
				Если МесяцСреднегоЗаработка < 13 Тогда
					Продолжить;
				КонецЕсли;
				
				МассивДополнительныхСтрокЗаработка.Добавить(Новый Структура("Год,Месяц,Сумма", Формат(ПериодСреднего.Месяц, "ДФ=yyyy"),Формат(ПериодСреднего.Месяц, "ДФ=MMMM"), ПериодСреднего.Сумма));
				
			КонецЦикла;    
			
			Параметры.Вставить("МассивДополнительныхСтрокЗаработка", МассивДополнительныхСтрокЗаработка);
			
			ВсегоВремени 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["ОтработанноеВремя"], "Учтено");
			ВсегоЗаработок 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["Заработок"], "Учтено");
			
			Если ПараметрыРасчетаСреднего.ИспользоватьСреднеЧасовойЗаработок Тогда
				Параметры.Вставить("ВсегоЧасовРасчетногоПериода", ВсегоВремени);
			Иначе
				Параметры.Вставить("ВсегоДнейРасчетногоПериода", ВсегоВремени);
			КонецЕсли;
			
			Параметры.Вставить("ВсегоУчтено", 				ВсегоЗаработок);		
			Параметры.Вставить("ЗаработокЗаЕдиницуВремени", УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ВсегоЗаработок, ВсегоВремени));
			
			МассивПараметров.Добавить(Параметры);
			
		КонецЦикла;
		
		ДанныеДляПечати.Добавить(Новый Структура("Ссылка,Данные", Выборка.Ссылка, МассивПараметров));
		
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
КонецФункции 

Функция СтруктураПараметровЗапискиРасчетаТ61()
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("РаботникКадровойСлужбыРасшифровкаПодписи");
	Параметры.Вставить("ДолжностьРаботникаКадровойСлужбы");
	Параметры.Вставить("БухгалтерРасшифровкаПодписи");
	
	Параметры.Вставить("ДатаУвольнения");
	Параметры.Вставить("СтатьяТКРФ");
	Параметры.Вставить("ТекстОснования");
	Параметры.Вставить("ВсегоДнейРасчетногоПериода"); 
	Параметры.Вставить("ВсегоЧасовРасчетногоПериода"); 
	Параметры.Вставить("ЗаработокЗаЕдиницуВремени"); 
	Параметры.Вставить("ВсегоУчтено");
	
	Параметры.Вставить("ДнейУдержания");
	Параметры.Вставить("ДнейКомпенсации");
	Параметры.Вставить("РабочийГодС");
	Параметры.Вставить("РабочийГодПо");
	
	Параметры.Вставить("НачисленоКомпенсации");
	Параметры.Вставить("НачисленоВыходноеПособиеСохраняемыйЗаработок");
	Параметры.Вставить("ВсеДругиеНачисления");
	Параметры.Вставить("ВсегоВыплат");
	Параметры.Вставить("СуммаНДФЛ");
	Параметры.Вставить("ПрочиеУдержания");
	Параметры.Вставить("ВсегоУдержано");
	Параметры.Вставить("ДолгЗаОрганизацией");
	Параметры.Вставить("ДолгЗаРаботником");
	Параметры.Вставить("КВыплате");
	Параметры.Вставить("КВыплатеПрописью");
	Параметры.Вставить("КВыплатеРублиКопейки");
	
	Сч  = 1;
	Для Сч = 1 По 12 Цикл
		СтрокаГод = "Год" + Сч;
		СтрокаМесяц = "Месяц" + Сч;
		СтрокаСумма = "Сумма" + Сч;
		Параметры.Вставить(СтрокаГод);
		Параметры.Вставить(СтрокаМесяц);
		Параметры.Вставить(СтрокаСумма);
	КонецЦикла;	
	
	Параметры.Вставить("МассивДополнительныхСтрокЗаработка", Новый Массив);

	Возврат Параметры;
КонецФункции 

Функция ИдентификаторПечатнойФормыЗапискаРасчетТ61() Экспорт
	Возврат "ПФ_MXL_Т61";
КонецФункции

//////////////////////////////////////////////////////////////////////
// Печать приказа 

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму записки-расчета(Т60).
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументЗапискиРасчетаОПредоставленииОтпуска(МассивОбъектов, ОбъектыПечати)
	ДокументРезультат = Новый ТабличныйДокумент;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ЗапискаРасчетОПредоставленииОтпуска";
	ДокументРезультат.АвтоМасштаб = Истина;
	
	Возврат СформироватьЗапискиРасчетаТ60(ДокументРезультат, ОбъектыПечати, МассивОбъектов);
КонецФункции 

Функция СформироватьЗапискиРасчетаТ60(ДокументРезультат, ОбъектыПечати, МассивОбъектов)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьКадровыхПриказовРасширенная.ПФ_MXL_Т60");
	
	СтруктураРезультатов = КадровыйУчетРасширенный.СформироватьЗапросДляТ60(МассивОбъектов);
	
	КадровыеОтпуска = СтруктураРезультатов.КадровыеОтпуска;
	Если КадровыеОтпуска.Пустой() Тогда
		ВывестиДанныеКадровогоПриказаВТабличныйДокумент(Макет, ДокументРезультат, Новый Массив, ОбъектыПечати);
		Возврат ДокументРезультат
	КонецЕсли;
	
	ОбластьШапка 							= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаДопОтпуска 				= Макет.ПолучитьОбласть("СтрокаДопОтпуска");
	ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
	ОбластьРасчетСреднего 					= Макет.ПолучитьОбласть("РасчетСреднего");
	ОбластьРасчетСреднегоИтого 				= Макет.ПолучитьОбласть("РасчетСреднегоИтого");
	ОбластьДополнительнаяСтрокаЗаработка 	= Макет.ПолучитьОбласть("ДополнительнаяСтрокаЗаработка");
	ОбластьПодвалРасчета 					= Макет.ПолучитьОбласть("ПодвалРасчета");

	ВыборкаПоСсылке = КадровыеОтпуска.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ПервыйПриказ = Истина;

	Начисления 	= СтруктураРезультатов.Начисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Удержания 	= СтруктураРезультатов.Удержания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НДФЛ 		= СтруктураРезультатов.НДФЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(МассивОбъектов[0]);
	ДанныеРасчетаСреднегоЗаработкаДокументов = Менеджер.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);

	Пока ВыборкаПоСсылке.Следующий() Цикл
		
		Выборка = ВыборкаПоСсылке.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			Параметры = СтруктураПараметровЗапискиРасчетаТ60();
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ДатаНачалаВсего = '00010101';
			ДатаОкончанияВсего = '00010101';
			ШапкаЗаполнена = Ложь;
			ПродолжительностьВсего = 0;
			
			//////////////////////////////////////////////////////////////////////
			// Первая страница
			// Основной отпуск

			Если ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Истина)) Тогда
				
				КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
				
				РезультатСклонения = "";
				Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Параметры.Работник), 3, РезультатСклонения, Параметры.Пол) Тогда
					Параметры.Работник	= РезультатСклонения
				КонецЕсли;
				
				Параметры.ДатаДок = Формат(?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаДок), ВыборкаПоВидуОтпуска.ДатаДок, ТекущаяДатаСеанса()), "ДЛФ=Д");
				ШапкаЗаполнена = Истина;
				
				ПредставлениеДатыНачалаОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=DD");
				Параметры.ДатаНачалаЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Лев(ПредставлениеДатыНачалаОсновногоОтпуска,2)), "      ");
				Параметры.ДатаНачалаМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала),  СокрЛП(Прав(ПредставлениеДатыНачалаОсновногоОтпуска, СтрДлина(ПредставлениеДатыНачалаОсновногоОтпуска)-2)), "                     " + НСтр("ru = 'г';
																																																												|en = 'year'") + ".");
				
				ПредставлениеДатыОкончанияОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=DD");
				Параметры.ДатаОкончанияЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания), СокрЛП(Лев(ПредставлениеДатыОкончанияОсновногоОтпуска,2)), "      ");
				Параметры.ДатаОкончанияМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания),  СокрЛП(Прав(ПредставлениеДатыОкончанияОсновногоОтпуска, СтрДлина(ПредставлениеДатыОкончанияОсновногоОтпуска)-2)), "                     " + НСтр("ru = 'г';
																																																															|en = 'year'") + ".");
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Продолжительность) Тогда
					Параметры.Продолжительность = ВыборкаПоВидуОтпуска.Продолжительность;
					ПродолжительностьВсего  = ВыборкаПоВидуОтпуска.Продолжительность;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала) Тогда
					ДатаНачалаВсего = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;	
				
				Если  ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания) Тогда
					ДатаОкончанияВсего = ВыборкаПоВидуОтпуска.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаПоВидуОтпуска.Сбросить();
			
			//////////////////////////////////////////////////////////////////////
			// Дополнительный отпуск
			
			ДатаНачалаДоп = '00010101';
			ДатаОкончанияДоп = '00010101';
			СтрокаВидДопОтпуска = "";
			ПродолжительностьДоп = 0;
			
			МассивДопОтпусков = Новый Массив;
			
			Пока ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Ложь)) Цикл
				
				СтруктураДопОтпуска = Новый Структура;
				
				Если НЕ ШапкаЗаполнена  Тогда
					КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
					Параметры.Продолжительность  = 0;
					Параметры.ДатаДок = Формат(?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаДок), ВыборкаПоВидуОтпуска.ДатаДок, ТекущаяДатаСеанса()), "ДЛФ=Д");
					ШапкаЗаполнена = Истина;
				КонецЕсли;
				
				СтруктураДопОтпуска.Вставить("ВидДопОтпуска", 						Строка(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска));
				СтруктураДопОтпуска.Вставить("ДнейКОплатеДополнительногоОтпуска", 	ВыборкаПоВидуОтпуска.Продолжительность);
				СтруктураДопОтпуска.Вставить("ДатаДопС", 							Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=D"));
				СтруктураДопОтпуска.Вставить("ДатаДопПо", 							Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=D"));
				СтруктураДопОтпуска.Вставить("ОснованиеДопОтпуска", 				ВыборкаПоВидуОтпуска.Основание);
				
				ПродолжительностьДоп = ПродолжительностьДоп + ВыборкаПоВидуОтпуска.Продолжительность;
				
				Если НЕ ЗначениеЗаполнено(ДатаНачалаДоп) ИЛИ ДатаНачалаДоп > ВыборкаПоВидуОтпуска.ДатаНачала Тогда
					ДатаНачалаДоп = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаОкончанияДоп) ИЛИ ДатаОкончанияДоп < ВыборкаПоВидуОтпуска.ДатаОкончания Тогда
					ДатаОкончанияДоп = ВыборкаПоВидуОтпуска.ДатаОкончания;
				КонецЕсли;
				
				МассивДопОтпусков.Добавить(СтруктураДопОтпуска);
				
			КонецЦикла;
			
			ПредставлениеДатыНачалаДопОтпуска  = Формат(ДатаНачалаДоп, "ДЛФ=DD");
			Параметры.ДатаСДопЧисло = ?(ЗначениеЗаполнено(ДатаНачалаДоп), СокрЛП(Лев(ПредставлениеДатыНачалаДопОтпуска,2)), "      ");
			Параметры.ДатаСДопМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаДоп),  СокрЛП(Прав(ПредставлениеДатыНачалаДопОтпуска, СтрДлина(ПредставлениеДатыНачалаДопОтпуска)-2)), "                     " + НСтр("ru = 'г';
																																																			|en = 'year'") + ".");
			
			ПредставлениеДатыОкончанияДопОтпуска  = Формат(ДатаОкончанияДоп, "ДЛФ=DD");
			Параметры.ДатаПоДопЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияДоп), СокрЛП(Лев(ПредставлениеДатыОкончанияДопОтпуска,2)), "      ");
			Параметры.ДатаПоДопМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияДоп),  СокрЛП(Прав(ПредставлениеДатыОкончанияДопОтпуска, СтрДлина(ПредставлениеДатыОкончанияДопОтпуска)-2)), "                     " + НСтр("ru = 'г';
																																																						|en = 'year'") + ".");
			
			Если ЗначениеЗаполнено(ПродолжительностьДоп) Тогда
				Параметры.ПродолжительностьДоп = ПродолжительностьДоп;
				ПродолжительностьВсего = ПродолжительностьВсего + ПродолжительностьДоп;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПродолжительностьВсего) Тогда
				Параметры.ПродолжительностьВсего = ПродолжительностьВсего;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаВидДопОтпуска) Тогда
				СтрокаВидДопОтпуска = Прав(СтрокаВидДопОтпуска,СтрДлина(СтрокаВидДопОтпуска) - 2);
				Параметры.ВидДопОтпуска = СтрокаВидДопОтпуска;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаНачалаВсего) ИЛИ (ЗначениеЗаполнено(ДатаНачалаДоп) И ДатаНачалаВсего > ДатаНачалаДоп) Тогда
			    ДатаНачалаВсего = ДатаНачалаДоп;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияВсего) ИЛИ (ЗначениеЗаполнено(ДатаОкончанияДоп) И ДатаОкончанияВсего < ДатаОкончанияДоп) Тогда
			    ДатаОкончанияВсего = ДатаОкончанияДоп;
			КонецЕсли;
			
			ПредставлениеДатыНачалаВсего  = Формат(ДатаНачалаВсего, "ДЛФ=DD");
			Параметры.ДатаНачалаВсегоЧисло = ?(ЗначениеЗаполнено(ДатаНачалаВсего), СокрЛП(Лев(ПредставлениеДатыНачалаВсего,2)), "      ");
			Параметры.ДатаНачалаВсегоМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаВсего),  СокрЛП(Прав(ПредставлениеДатыНачалаВсего, СтрДлина(ПредставлениеДатыНачалаВсего)-2)), "                     " + НСтр("ru = 'г';
																																																			|en = 'year'") + ".");
			
			ПредставлениеДатыОкончанияВсего  = Формат(ДатаОкончанияВсего, "ДЛФ=DD");
			Параметры.ДатаОкончанияВсегоЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияВсего), СокрЛП(Лев(ПредставлениеДатыОкончанияВсего,2)), "      ");
			Параметры.ДатаОкончанияВсегоМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияВсего),  СокрЛП(Прав(ПредставлениеДатыОкончанияВсего, СтрДлина(ПредставлениеДатыОкончанияВсего)-2)), "                     " + НСтр("ru = 'г';
																																																						|en = 'year'") + ".");
			
			//////////////////////////////////////////////////////////////////////
			// Подвал первой страницы

			Параметры.ДатаДок = Формат(Параметры.ДатаДок, "ДЛФ=D");
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			Если Не ПервыйПриказ Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйПриказ = Ложь;
			КонецЕсли;

			ОбластьШапка.Параметры.Заполнить(Параметры);
			
			ДокументРезультат.Вывести(ОбластьШапка);
			
			Для каждого ДопОтпуск Из МассивДопОтпусков Цикл
				ОбластьСтрокаДопОтпуска.Параметры.Заполнить(ДопОтпуск);
				ДокументРезультат.Вывести(ОбластьСтрокаДопОтпуска);
			КонецЦикла;
			
			ОбластьСтрокаДопОтпуска.Параметры.Заполнить(Новый Структура("ВидДопОтпуска,ДнейКОплатеДополнительногоОтпуска,ДатаДопС,ДатаДопПо,ОснованиеДопОтпуска"));	

			счДопОтпусков = 5 - МассивДопОтпусков.Количество();
			Пока счДопОтпусков > 0 Цикл
				ДокументРезультат.Вывести(ОбластьСтрокаДопОтпуска);
				счДопОтпусков = счДопОтпусков - 1;
			КонецЦикла;
			
			ОбластьПодвал.Параметры.Заполнить(Параметры);
			ДокументРезультат.Вывести(ОбластьПодвал);
			
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
			//////////////////////////////////////////////////////////////////////
			// Вторая страница
			// Расчет среднего заработка

			Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработкаДокументов Цикл
				Если Выборка.Ссылка = Элемент.РеквизитыДокумента.Ссылка Тогда
					ДанныеРасчетаСреднегоЗаработка 	= Элемент.ДанныеРасчетаСреднего;
					ПараметрыРасчетаСреднего 		= Элемент.ПараметрыРасчета;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ОбщаяТаблицаДанныхОСреднем = Новый ТаблицаЗначений;
			ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
			ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
			
			Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка["Заработок"] Цикл
				НоваяСтрока = ОбщаяТаблицаДанныхОСреднем.Добавить();
				НоваяСтрока.Месяц = Элемент["Месяц"];
				НоваяСтрока.Сумма = Элемент["Учтено"];
			КонецЦикла;
			
			ОбщаяТаблицаДанныхОСреднем.Свернуть("Месяц", "Сумма");
			ОбщаяТаблицаДанныхОСреднем.Сортировать("Месяц");
			
			МесяцСреднегоЗаработка = 1;
			Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
				
				Если МесяцСреднегоЗаработка > 12 Тогда
				   Прервать;
	 			КонецЕсли;
				
				СтрокаГод = "Год" + МесяцСреднегоЗаработка;
				СтрокаМесяц = "Месяц" + МесяцСреднегоЗаработка;
				СтрокаСумма = "Сумма" + МесяцСреднегоЗаработка;
				Параметры.Вставить(СтрокаГод, Формат(ПериодСреднего.Месяц, "ДФ=yyyy"));
				Параметры.Вставить(СтрокаМесяц, Формат(ПериодСреднего.Месяц, "ДФ=MMMM"));
				Параметры.Вставить(СтрокаСумма, ПериодСреднего.Сумма);
				МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;
			КонецЦикла;
			
			МассивДополнительныхСтрокЗаработка = Новый Массив; 
			
			МесяцСреднегоЗаработка = 0;
			Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
				МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;

				Если МесяцСреднегоЗаработка < 13 Тогда
				   Продолжить;
	 			КонецЕсли;
				
				МассивДополнительныхСтрокЗаработка.Добавить(Новый Структура("Год,Месяц,Сумма", Формат(ПериодСреднего.Месяц, "ДФ=yyyy"), Формат(ПериодСреднего.Месяц, "ДФ=MMMM"), ПериодСреднего.Сумма));
				
			КонецЦикла;
			
			ВсегоВремени 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["ОтработанноеВремя"], "Учтено");
			ВсегоЗаработок 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["Заработок"], "Учтено");
			
			Если ПараметрыРасчетаСреднего.ИспользоватьСреднеЧасовойЗаработок Тогда
				Параметры.Вставить("ВсегоЧасовРасчетногоПериода", ВсегоВремени);
			Иначе
				Параметры.Вставить("ВсегоДнейРасчетногоПериода", ВсегоВремени);
			КонецЕсли;
			
			Параметры.Вставить("ВсегоУчтено", 				ВсегоЗаработок);		
			Параметры.Вставить("ЗаработокЗаЕдиницуВремени", УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ВсегоЗаработок, ВсегоВремени));
			
			ОбластьРасчетСреднего.Параметры.Заполнить(Параметры);
			ДокументРезультат.Вывести(ОбластьРасчетСреднего);
			
			Для каждого ДополнительнаяСтрокаЗаработка Из МассивДополнительныхСтрокЗаработка Цикл
				ОбластьДополнительнаяСтрокаЗаработка.Параметры.Заполнить(ДополнительнаяСтрокаЗаработка);
				ДокументРезультат.Вывести(ОбластьДополнительнаяСтрокаЗаработка);
			КонецЦикла;	
			
			ОбластьРасчетСреднегоИтого.Параметры.Заполнить(Параметры);
			ДокументРезультат.Вывести(ОбластьРасчетСреднегоИтого);
			
			//////////////////////////////////////////////////////////////////////
			// Начисления
			
			Начисления.Сбросить();
			
			СтрТекущийМесяц = "";
			СтрБудущиеМесяцы = "";
			ДнейКОплатеЗаТекущийМесяц = 0;
			НачисленоОтпускныхЗаТекущийМесяц = 0;
			ДругиеНачисленияЗаТекущийМесяц = 0;
			ДнейКОплатеЗаБудущиеМесяцы = 0;
			НачисленоОтпускныхЗаБудущиеМесяцы = 0;
			ДругиеНачисленияЗаБудущиеМесяцы = 0;
			ВсегоНачислено = 0;
			
			БудущиеМесяцы = Новый СписокЗначений; 
			
			Если Начисления.НайтиСледующий(Новый Структура("Ссылка", Выборка.Ссылка)) Тогда
				
				СтрТекущийМесяц = Формат(НачалоМесяца(Начисления.ПериодРегистрации), "ДФ=MMMM");
				ВсегоНачислено = Начисления.Результат;
				ВыборкаНачислений = Начисления.Выбрать();
				Пока ВыборкаНачислений.Следующий() Цикл
					Если НачалоМесяца(ВыборкаНачислений.ПериодРегистрации) >= НачалоМесяца(ВыборкаНачислений.ДатаНачала) Тогда
						Если ВыборкаНачислений.ОплатаОтпуска Тогда
							ДнейКОплатеЗаТекущийМесяц = ДнейКОплатеЗаТекущийМесяц + ВыборкаНачислений.ОплаченоДней;
							НачисленоОтпускныхЗаТекущийМесяц = НачисленоОтпускныхЗаТекущийМесяц + ВыборкаНачислений.Результат;
						Иначе
							ДругиеНачисленияЗаТекущийМесяц = ДругиеНачисленияЗаТекущийМесяц + ВыборкаНачислений.Результат;
						КонецЕсли;
					Иначе 
						БудущиеМесяцы.Добавить(НачалоМесяца(ВыборкаНачислений.ДатаНачала));
						Если ВыборкаНачислений.ОплатаОтпуска Тогда
							ДнейКОплатеЗаБудущиеМесяцы = ДнейКОплатеЗаБудущиеМесяцы + ВыборкаНачислений.ОплаченоДней;
							НачисленоОтпускныхЗаБудущиеМесяцы = НачисленоОтпускныхЗаБудущиеМесяцы + ВыборкаНачислений.Результат;
						Иначе
							ДругиеНачисленияЗаБудущиеМесяцы = ДругиеНачисленияЗаБудущиеМесяцы + ВыборкаНачислений.Результат;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
				
				БудущиеМесяцы.СортироватьПоЗначению();
				Для каждого БудущийМесяц Из БудущиеМесяцы Цикл
					СтрБудущиеМесяцы = СтрБудущиеМесяцы + Формат(БудущийМесяц.Значение, "ДФ=MMMM") + ", ";
				КонецЦикла;
				
				СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрБудущиеМесяцы, 2);
				
				Параметры.Вставить("СтрТекущийМесяц", СтрТекущийМесяц);
				Параметры.Вставить("СтрБудущиеМесяцы", СтрБудущиеМесяцы);
				Параметры.Вставить("ДнейКОплатеЗаТекущийМесяц", ДнейКОплатеЗаТекущийМесяц);
				Параметры.Вставить("НачисленоОтпускныхЗаТекущийМесяц", НачисленоОтпускныхЗаТекущийМесяц);
				Параметры.Вставить("ДругиеНачисленияЗаТекущийМесяц", ДругиеНачисленияЗаТекущийМесяц);
				Параметры.Вставить("ДнейКОплатеЗаБудущиеМесяцы", ДнейКОплатеЗаБудущиеМесяцы);
				Параметры.Вставить("НачисленоОтпускныхЗаБудущиеМесяцы", НачисленоОтпускныхЗаБудущиеМесяцы);
				Параметры.Вставить("ДругиеНачисленияЗаБудущиеМесяцы", ДругиеНачисленияЗаБудущиеМесяцы);
				Параметры.Вставить("ВсегоНачислено", ВсегоНачислено);
				
			КонецЕсли; 
			
			ВсегоУдержано = 0;
			
			//////////////////////////////////////////////////////////////////////
			// НДФЛ
			
			НДФЛ.Сбросить();
			СуммаНДФЛ = 0;
			Если НДФЛ.НайтиСледующий(Новый Структура("Ссылка", Выборка.Ссылка)) Тогда 
				СуммаНДФЛ = НДФЛ.Налог + НДФЛ.ЗачтеноАвансовыхПлатежей;
				Параметры.Вставить("СуммаНДФЛ", СуммаНДФЛ);
			КонецЕсли;
			
			ВсегоУдержано = ВсегоУдержано + СуммаНДФЛ;
			
			//////////////////////////////////////////////////////////////////////
			// Удержания
			Удержания.Сбросить(); 
			СуммаПрочихУдержаний = 0;
			
			Если Удержания.НайтиСледующий(Новый Структура("Ссылка", Выборка.Ссылка)) Тогда
				ВыборкаУдержаний = Удержания.Выбрать();
				НомерУдержания = 1;
				Пока ВыборкаУдержаний.Следующий() Цикл
					ВсегоУдержано = ВсегоУдержано + ВыборкаУдержаний.Результат;
					Если НомерУдержания < 6 Тогда
						Параметры.Вставить("Удержание" + НомерУдержания, ВыборкаУдержаний.Удержание);	
						Параметры.Вставить("СуммаУдержания" + НомерУдержания, ВыборкаУдержаний.Результат);	
					Иначе
						СуммаПрочихУдержаний = СуммаПрочихУдержаний + ВыборкаУдержаний.Результат;
					КонецЕсли;
					НомерУдержания = НомерУдержания + 1;
				КонецЦикла;
				
				Если СуммаПрочихУдержаний > 0 Тогда
					Параметры.Вставить("Удержание5", НСтр("ru = 'Прочие удержания';
															|en = 'Other deductions'"));	
					Параметры.Вставить("СуммаУдержания5", Параметры["СуммаУдержания5"] + СуммаПрочихУдержаний);	
				КонецЕсли;
			КонецЕсли;
			
			Параметры.Вставить("ВсегоУдержано", ВсегоУдержано);
			
			КВыплате = ?(ВсегоНачислено - ВсегоУдержано > 0, ВсегоНачислено - ВсегоУдержано, 0);
			Параметры.Вставить("КВыплате", КВыплате);
			
			Параметры.Вставить("КВыплатеПрописью", 	РаботаСКурсамиВалют.СформироватьСуммуПрописью(КВыплате, ВалютаУчета));
			Параметры.Вставить("КВыплатеРубли",		Формат(Цел(КВыплате),"ЧДЦ=0; ЧН=-"));
			Параметры.Вставить("КВыплатеКопейки", 	Формат((КВыплате - Цел(КВыплате)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-"));
			
			//////////////////////////////////////////////////////////////////////
			// Подвал второй страницы
			
			ОбластьПодвалРасчета.Параметры.Заполнить(Параметры);
			ДокументРезультат.Вывести(ОбластьПодвалРасчета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументРезультат
	
КонецФункции

Функция СтруктураПараметровЗапискиРасчетаТ60()
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("НазваниеОрганизации");				
	Параметры.Вставить("КодПоОКПО");
    Параметры.Вставить("Работник");						
	Параметры.Вставить("НомерДок");	
	Параметры.Вставить("ДатаДок");	
	Параметры.Вставить("ТабельныйНомер");
	Параметры.Вставить("Подразделение");							
	Параметры.Вставить("Должность");
	Параметры.Вставить("БухгалтерРасшифровкаПодписи");
	Параметры.Вставить("РаботникКадровойСлужбыРасшифровкаПодписи");
	Параметры.Вставить("ДолжностьРаботникаКадровойСлужбы");
	Параметры.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");	
	Параметры.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	Параметры.Вставить("Продолжительность");
	Параметры.Вставить("ДатаНачалаЧисло");
	Параметры.Вставить("ДатаНачалаМесяцГод"); 
	Параметры.Вставить("ДатаОкончанияЧисло"); 
	Параметры.Вставить("ДатаОкончанияМесяцГод");  
	Параметры.Вставить("ПродолжительностьДоп");
	Параметры.Вставить("ДатаСДопЧисло");
	Параметры.Вставить("ДатаСДопМесяцГод");
	Параметры.Вставить("ДатаПоДопЧисло");
	Параметры.Вставить("ДатаПоДопМесяцГод");
    Параметры.Вставить("ВидДопОтпуска");						
	Параметры.Вставить("ПродолжительностьВсего");
	Параметры.Вставить("ДатаНачалаВсегоЧисло");
	Параметры.Вставить("ДатаНачалаВсегоМесяцГод");
	Параметры.Вставить("ДатаОкончанияВсегоЧисло");
	Параметры.Вставить("ДатаОкончанияВсегоМесяцГод");
	
	// Средний заработок
	Параметры.Вставить("ВсегоДнейРасчетногоПериода"); 
	Параметры.Вставить("ВсегоЧасовРасчетногоПериода"); 
	Параметры.Вставить("ЗаработокЗаЕдиницуВремени"); 
	Параметры.Вставить("ВсегоУчтено");

	Сч  = 1;
	Для Сч = 1 По 12 Цикл
		СтрокаГод = "Год" + Сч;
		СтрокаМесяц = "Месяц" + Сч;
		СтрокаСумма = "Сумма" + Сч;
		Параметры.Вставить(СтрокаГод);
		Параметры.Вставить(СтрокаМесяц);
		Параметры.Вставить(СтрокаСумма);
	КонецЦикла;	
	
	Параметры.Вставить("СтрТекущийМесяц");
	Параметры.Вставить("СтрБудущиеМесяцы");
	Параметры.Вставить("ДнейКОплатеЗаТекущийМесяц");
	Параметры.Вставить("НачисленоОтпускныхЗаТекущийМесяц");
	Параметры.Вставить("ДругиеНачисленияЗаТекущийМесяц");
	Параметры.Вставить("ДнейКОплатеЗаБудущиеМесяцы");
	Параметры.Вставить("НачисленоОтпускныхЗаБудущиеМесяцы");
	Параметры.Вставить("ДругиеНачисленияЗаБудущиеМесяцы");
	Параметры.Вставить("ВсегоНачислено");
	Параметры.Вставить("СуммаНДФЛ");
	
	НомерУдержания = 1;
	Пока НомерУдержания < 6 Цикл
		Параметры.Вставить("Удержание" + НомерУдержания);
		Параметры.Вставить("СуммаУдержания" + НомерУдержания);
		НомерУдержания = НомерУдержания + 1;
	КонецЦикла;
	
	Параметры.Вставить("ВсегоУдержано");
	
	Параметры.Вставить("КВыплате");
	Параметры.Вставить("КВыплатеПрописью");
	Параметры.Вставить("КВыплатеРубли");
	Параметры.Вставить("КВыплатеКопейки");

	Возврат Параметры;
	
КонецФункции 


#Область ИзменениеГрафикаРаботыСписком

Функция ДанныеДляПечатиИзмененияГрафикаРаботыСписком(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзменениеГрафикаРаботыСписком.Ссылка КАК Ссылка,
	|	ИзменениеГрафикаРаботыСписком.Организация КАК Организация,
	|	ИзменениеГрафикаРаботыСписком.ГрафикРаботы КАК ГрафикРаботы,
	|	ИзменениеГрафикаРаботыСписком.ДатаИзменения КАК ДатаИзменения,
	|	ИзменениеГрафикаРаботыСписком.ДатаОкончания КАК ДатаОкончания,
	|	ИзменениеГрафикаРаботыСписком.Дата КАК Дата,
	|	ИзменениеГрафикаРаботыСписком.Дата КАК ДатаДокумента,
	|	ИзменениеГрафикаРаботыСписком.Номер КАК НомерДокумента,
	|	ИзменениеГрафикаРаботыСписком.Руководитель КАК Руководитель,
	|	ИзменениеГрафикаРаботыСписком.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ИзменениеГрафикаРаботыСписком.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеСокращенное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеСокращенное
	|	КОНЕЦ КАК НазваниеОрганизацииСокращенное,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	ИзменениеГрафикаРаботыСписком.НомерПервичногоДокумента КАК НомерПервичногоДокумента
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ИзменениеГрафикаРаботыСписком КАК ИзменениеГрафикаРаботыСписком
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИзменениеГрафикаРаботыСписком.Организация = Организации.Ссылка
	|ГДЕ
	|	ИзменениеГрафикаРаботыСписком.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("ГлавныйБухгалтер");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.НазваниеОрганизацииСокращенное КАК НазваниеОрганизацииСокращенное,
	|	ДанныеДокумента.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеДокумента.ГрафикРаботы КАК ГрафикРаботы,
	|	ДанныеДокумента.ДатаИзменения КАК ДатаИзменения,
	|	ДанныеДокумента.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеДокумента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ФИОГлавногоБухгалтера.ФИОПолные КАК ФИОГлавногоБухгалтера,
	|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК ГлавныйБухгалтерРасшифровкаПодписи,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	ИзменениеГрафикаРаботыСотрудники.Сотрудник КАК Сотрудник,
	|	ИзменениеГрафикаРаботыСотрудники.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеГрафикаРаботыСписком.Сотрудники КАК ИзменениеГрафикаРаботыСотрудники
	|		ПО ДанныеДокумента.Ссылка = ИзменениеГрафикаРаботыСотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокумента.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокумента.Дата = ФИОГлавногоБухгалтера.Дата
	|			И ДанныеДокумента.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ИзменениеГрафикаРаботыСотрудники.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ об изменении графика работы списком.
//
Функция ТабличныйДокументИзменениеГрафикаРаботыСписком(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеГрафикаРаботыСписком";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиИзмененияГрафикаРаботыСписком(МассивОбъектов).Выбрать();
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаШапка.Параметры.НомерДокумента = ЗарплатаКадрыОтчеты.НомерНаПечать(
			ДанныеДляПечати.НомерДокумента, ДанныеДляПечати.НомерПервичногоДокумента);
		ОбластьМакетаШапка.Параметры.ДатаДокумента = Формат(ДанныеДляПечати.ДатаДокумента, "ДЛФ=D");
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Пока ДанныеДляПечати.Следующий() Цикл
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеДляПечати);
			
			ДокументРезультат.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбластьМакетаПодвал.Параметры, "ДатаИзменения") Тогда
			ОбластьМакетаПодвал.Параметры.ДатаИзменения = Формат(ДанныеДляПечати.ДатаИзменения, "ДЛФ=DD");
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбластьМакетаПодвал.Параметры, "ТекстДатыОкончания") Тогда
			Если ЗначениеЗаполнено(ДанныеДляПечати.ДатаОкончания) Тогда
				ОбластьМакетаПодвал.Параметры.ТекстДатыОкончания = " "+ НСтр("ru = 'по';
																			|en = 'to'") + " " + Формат(ДанныеДляПечати.ДатаОкончания, "ДЛФ=DD");
			Иначе
				ОбластьМакетаПодвал.Параметры.ТекстДатыОкончания = "";
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбластьМакетаПодвал.Параметры, "ФИОГлавногоБухгалтера") Тогда
			Если ПустаяСтрока(ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера) Тогда
				ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "______________________________________________________";
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбластьМакетаПодвал.Параметры, "ФИОГлавногоБухгалтераРасшифровка") Тогда
					ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтераРасшифровка = НСтр("ru = '(фамилия, инициалы главного бухгалтера)';
																							|en = '(last name, initials of Chief Accountant)'");
				КонецЕсли;
			Иначе
				ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеДляПечати.ФИОГлавногоБухгалтера),
					4, ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера, Перечисления.ПолФизическогоЛица.Женский);
			КонецЕсли;
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


#Область ИндексацияЗаработка

Функция ДанныеДляПечатиИндексацииЗаработка(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИндексацияЗаработка.Ссылка КАК Ссылка,
	|	ИндексацияЗаработка.Организация КАК Организация,
	|	ИндексацияЗаработка.МесяцИндексации КАК МесяцИндексации,
	|	ИндексацияЗаработка.Дата КАК Дата,
	|	ИндексацияЗаработка.Дата КАК ДатаДокумента,
	|	ИндексацияЗаработка.Номер КАК НомерДокумента,
	|	ИндексацияЗаработка.Руководитель КАК Руководитель,
	|	ИндексацияЗаработка.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ИндексацияЗаработка.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеСокращенное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеСокращенное
	|	КОНЕЦ КАК НазваниеОрганизацииСокращенное,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	"""" КАК НомерПервичногоДокумента
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ИндексацияЗаработка КАК ИндексацияЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИндексацияЗаработка.Организация = Организации.Ссылка
	|ГДЕ
	|	ИндексацияЗаработка.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзменениеПлановыхНачислений.Ссылка,
	|	ИзменениеПлановыхНачислений.Организация,
	|	ИзменениеПлановыхНачислений.ДатаИзменения,
	|	ИзменениеПлановыхНачислений.Дата,
	|	ИзменениеПлановыхНачислений.Дата,
	|	ИзменениеПлановыхНачислений.Номер,
	|	ИзменениеПлановыхНачислений.Руководитель,
	|	ИзменениеПлановыхНачислений.ДолжностьРуководителя,
	|	ИзменениеПлановыхНачислений.ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеСокращенное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеСокращенное
	|	КОНЕЦ,
	|	Организации.КодПоОКПО,
	|	ИзменениеПлановыхНачислений.НомерПервичногоДокумента
	|ИЗ
	|	Документ.ИзменениеПлановыхНачислений КАК ИзменениеПлановыхНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИзменениеПлановыхНачислений.Организация = Организации.Ссылка
	|ГДЕ
	|	ИзменениеПлановыхНачислений.Ссылка В(&МассивОбъектов)
	|	И ИзменениеПлановыхНачислений.УчитыватьКакИндексациюЗаработка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИндексацияЗаработкаСотрудники.Ссылка КАК Ссылка,
	|	ИндексацияЗаработкаСотрудники.НомерСтроки КАК НомерСтроки,
	|	ИндексацияЗаработкаСотрудники.Сотрудник КАК Сотрудник,
	|	ИндексацияЗаработкаСотрудники.КоэффициентИндексации КАК КоэффициентИндексации
	|ПОМЕСТИТЬ ВТКоэффициентыИндексации
	|ИЗ
	|	Документ.ИндексацияЗаработка.Сотрудники КАК ИндексацияЗаработкаСотрудники
	|ГДЕ
	|	ИндексацияЗаработкаСотрудники.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзменениеПлановыхНачисленийСотрудники.Ссылка,
	|	ИзменениеПлановыхНачисленийСотрудники.НомерСтроки,
	|	ИзменениеПлановыхНачисленийСотрудники.Сотрудник,
	|	ИзменениеПлановыхНачисленийСотрудники.КоэффициентИндексации
	|ИЗ
	|	Документ.ИзменениеПлановыхНачислений.Сотрудники КАК ИзменениеПлановыхНачисленийСотрудники
	|ГДЕ
	|	ИзменениеПлановыхНачисленийСотрудники.Ссылка В(&МассивОбъектов)
	|	И ИзменениеПлановыхНачисленийСотрудники.Ссылка.УчитыватьКакИндексациюЗаработка";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("ГлавныйБухгалтер");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.НазваниеОрганизацииСокращенное КАК НазваниеОрганизацииСокращенное,
	|	ДанныеДокумента.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеДокумента.МесяцИндексации КАК МесяцИндексации,
	|	ДанныеДокумента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ФИОГлавногоБухгалтера.ФИОПолные КАК ФИОГлавногоБухгалтера,
	|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК ГлавныйБухгалтерРасшифровкаПодписи,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	КоэффициентыИндексации.Сотрудник КАК Сотрудник,
	|	КоэффициентыИндексации.КоэффициентИндексации КАК КоэффициентИндексации,
	|	ДанныеДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыИндексации КАК КоэффициентыИндексации
	|		ПО ДанныеДокумента.Ссылка = КоэффициентыИндексации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокумента.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокумента.Дата = ФИОГлавногоБухгалтера.Дата
	|			И ДанныеДокумента.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	КоэффициентыИндексации.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ об индексации заработка.
//
Функция ТабличныйДокументИндексацияЗаработка(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИндексацияЗаработка";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиИндексацииЗаработка(МассивОбъектов).Выбрать();
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаШапка.Параметры.ДатаДокумента = Формат(ДанныеДляПечати.ДатаДокумента, "ДЛФ=D");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НомерДокумента",
			ЗарплатаКадрыОтчеты.НомерНаПечать(ДанныеДляПечати.НомерДокумента, ДанныеДляПечати.НомерПервичногоДокумента));
		ОбластьМакетаШапка.Параметры.Заполнить(ДополнительныеПараметры);
		
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Пока ДанныеДляПечати.Следующий() Цикл
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеДляПечати);
			
			ДокументРезультат.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакетаПодвал.Параметры.МесяцИндексации = Формат(ДанныеДляПечати.МесяцИндексации, "ДЛФ=DD");
		
		Если ПустаяСтрока(ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера) Тогда
			ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "______________________________________________________";
			ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтераРасшифровка = НСтр("ru = '(фамилия, инициалы главного бухгалтера)';
																					|en = '(last name, initials of Chief Accountant)'");
		Иначе
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеДляПечати.ФИОГлавногоБухгалтера),
				4, ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера, Перечисления.ПолФизическогоЛица.Женский);
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#Область ДоговорГПХ

Функция ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг(МассивОбъектов)
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Если ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.АктПриемкиВыполненныхРаботОказанныхУслуг") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Ссылка КАК Ссылка,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Организация КАК Организация,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Дата КАК Дата,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Дата КАК ДатаДокумента,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Номер КАК НомерДокумента,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Сотрудник КАК Сотрудник,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.ФизическоеЛицо КАК ФизическоеЛицо,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Руководитель КАК Руководитель,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.МесяцНачисления КАК Период,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Договор.Номер КАК НомерДоговора,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Договор.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Договор.Дата КАК ДатаДоговора,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Договор.ДатаОкончания КАК ДатаОкончания,
		|	ЛОЖЬ КАК ОплатаПоАктамВыполненныхРабот,
		|	ВЫБОР
		|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА Организации.Наименование
		|		ИНАЧЕ Организации.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Результат КАК СуммаЗаРаботу
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.АктПриемкиВыполненныхРаботОказанныхУслуг КАК АктПриемкиВыполненныхРаботОказанныхУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО АктПриемкиВыполненныхРаботОказанныхУслуг.Организация = Организации.Ссылка
		|ГДЕ
		|	АктПриемкиВыполненныхРаботОказанныхУслуг.Ссылка В(&МассивОбъектов)";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорРаботыУслуги.Ссылка КАК Ссылка,
		|	ДоговорРаботыУслуги.Организация КАК Организация,
		|	ДоговорРаботыУслуги.Дата КАК Дата,
		|	ДоговорРаботыУслуги.Дата КАК ДатаДокумента,
		|	ДоговорРаботыУслуги.Номер КАК НомерДокумента,
		|	ДоговорРаботыУслуги.Сотрудник КАК Сотрудник,
		|	ДоговорРаботыУслуги.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДоговорРаботыУслуги.ДатаНачала КАК Период,
		|	ДоговорРаботыУслуги.Номер КАК НомерДоговора,
		|	ДоговорРаботыУслуги.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
		|	ДоговорРаботыУслуги.Дата КАК ДатаДоговора,
		|	ДоговорРаботыУслуги.Руководитель КАК Руководитель,
		|	ДоговорРаботыУслуги.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДоговорРаботыУслуги.ДатаОкончания КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ДоговорРаботыУслуги.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплатаПоАктамВыполненныхРабот,
		|	ВЫБОР
		|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА Организации.Наименование
		|		ИНАЧЕ Организации.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	ДоговорРаботыУслуги.Сумма КАК СуммаЗаРаботу
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	#ТаблицаДоговоров КАК ДоговорРаботыУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДоговорРаботыУслуги.Организация = Организации.Ссылка
		|ГДЕ
		|	ДоговорРаботыУслуги.Ссылка В(&МассивОбъектов)";
	КонецЕсли;
	
	МетаданныеДокумента = МассивОбъектов[0].Метаданные();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДоговоров", "Документ." + МетаданныеДокумента.Имя);
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("ФизическоеЛицо");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокумента");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДокументПредставление,Пол");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ФИОСотрудника.РасшифровкаПодписи КАК СотрудникРасшифровкаПодписи,
	|	ДанныеДокумента.Период КАК ДатаНачала,
	|	ДанныеДокумента.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеДокумента.ОплатаПоАктамВыполненныхРабот КАК ОплатаПоАктамВыполненныхРабот,
	|	ДанныеДокумента.СуммаЗаРаботу КАК СуммаЗаРаботу,
	|	ДанныеДокумента.НомерДоговора КАК НомерДоговора,
	|	ДанныеДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ДанныеДокумента.ДатаДоговора КАК ДатаДоговора,
	|	КадровыеДанныеСотрудников.ДокументПредставление КАК ДокументПредставление,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСотрудника
	|		ПО ДанныеДокумента.Дата = ФИОСотрудника.Дата
	|			И ДанныеДокумента.Ссылка = ФИОСотрудника.Ссылка
	|			И ДанныеДокумента.ФизическоеЛицо = ФИОСотрудника.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокумента.Период = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Акт приема-передачи выполненных работ (услуг).
//
Функция ТабличныйДокументАктПриемаПередачиВыполненныхРаботУслуг(Макет, МассивОбъектов, ОбъектыПечати, УказыватьДатуОкончания = Ложь)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемаПередачиВыполненныхРаботУслуг";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Акт");
	
	// получаем данные для печати
	ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг = ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг(МассивОбъектов);
	Если ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг = Неопределено Тогда
		Возврат ДокументРезультат;
	КонецЕсли;
	ДанныеДляПечати = ДанныеДляПечатиАктаСдачиПриемаВыполненныхРаботУслуг.Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ДанныеДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		// получаем данные для печати
		Если ДанныеДляПечати.ОплатаПоАктамВыполненныхРабот Тогда
			ТекстОшибки = НСтр("ru = 'Печать акта возможна при оплате по договору однократно в конце срока.';
								|en = 'You can print the certificate if you pay under the contract once at the end of the period.'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ДанныеДляПечати.Ссылка,
				"СпособОплаты");
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДляПечати.НомерДокумента, Истина, Истина);
		ОбластьМакета.Параметры.НомерДоговора = ЗарплатаКадрыОтчеты.НомерНаПечать(ДанныеДляПечати.НомерДоговора, ДанныеДляПечати.НомерПервичногоДокумента);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(ДанныеДляПечати.ДатаДокумента, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаДоговора = Формат(ДанныеДляПечати.ДатаДоговора, "ДЛФ=DD");
		ОбластьМакета.Параметры.СуммаЗаРаботу = Формат(ДанныеДляПечати.СуммаЗаРаботу, "ЧЦ=15; ЧДЦ=2");
		Если УказыватьДатуОкончания Тогда
			ОбластьМакета.Параметры.ДатаОкончания = Формат(ДанныеДляПечати.ДатаОкончания, "ДЛФ=DD");
		КонецЕсли;
		
		Если ДанныеДляПечати.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			ОбластьМакета.Параметры.ИменуемыйИменуемая = НСтр("ru = 'именуемая';
																|en = 'referred to as '");
		Иначе
			ОбластьМакета.Параметры.ИменуемыйИменуемая = НСтр("ru = 'именуемый';
																|en = 'referred to as'");
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


#Область  МатериальнаяПомощь

Функция ДанныеДляПечатиПриказаОВыплатеМатериальнойПомощи(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МатериальнаяПомощьНачисления.Ссылка КАК Ссылка,
	|	МатериальнаяПомощьНачисления.Ссылка.Организация КАК Организация,
	|	МатериальнаяПомощьНачисления.Ссылка.Дата КАК Дата,
	|	МатериальнаяПомощьНачисления.Ссылка.Дата КАК ДатаДокумента,
	|	МатериальнаяПомощьНачисления.Ссылка.Номер КАК НомерДокумента,
	|	МатериальнаяПомощьНачисления.Сотрудник КАК Сотрудник,
	|	МатериальнаяПомощьНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МатериальнаяПомощьНачисления.Результат КАК Начислено,
	|	МатериальнаяПомощьНачисления.Ссылка.ОснованиеВыплаты КАК ОснованиеВыплаты,
	|	МатериальнаяПомощьНачисления.Ссылка.ПериодРегистрации КАК Период,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	МатериальнаяПомощьНачисления.Ссылка.Руководитель КАК Руководитель,
	|	МатериальнаяПомощьНачисления.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.МатериальнаяПомощь.Начисления КАК МатериальнаяПомощьНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО МатериальнаяПомощьНачисления.Ссылка.Организация = Организации.Ссылка
	|ГДЕ
	|	МатериальнаяПомощьНачисления.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("ФизическоеЛицо");
	ИменаПолей.Добавить("Руководитель");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокумента");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокумента");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Подразделение,Должность,ФизическоеЛицо,Пол,ФИОПолные");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТДанныеНаКонецМесяца
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокумента.Период = КадровыеДанныеСотрудников.Период
	|ГДЕ
	|	КадровыеДанныеСотрудников.Подразделение ЕСТЬ NULL ";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеНаКонецМесяца");
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковНаКонецМесяца";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Подразделение,Должность");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Начислено КАК Сумма,
	|	ДанныеДокумента.ОснованиеВыплаты КАК ОснованиеВыплаты,
	|	ФИОСотрудника.ФИОПолные КАК СотрудникФИОПолные,
	|	ФИОСотрудника.РасшифровкаПодписи КАК СотрудникРасшифровкаПодписи,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.Подразделение, КадровыеДанныеСотрудниковНаКонецМесяца.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.Должность, КадровыеДанныеСотрудниковНаКонецМесяца.Должность) КАК Должность,
	|	КадровыеДанныеСотрудников.Пол КАК Пол,
	|	ДанныеДокумента.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСотрудника
	|		ПО ДанныеДокумента.Дата = ФИОСотрудника.Дата
	|			И ДанныеДокумента.Ссылка = ФИОСотрудника.Ссылка
	|			И ДанныеДокумента.ФизическоеЛицо = ФИОСотрудника.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Дата = ФИОРуководителя.Дата
	|			И ДанныеДокумента.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокумента.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокумента.Период = КадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудниковНаКонецМесяца КАК КадровыеДанныеСотрудниковНаКонецМесяца
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудниковНаКонецМесяца.Сотрудник
	|			И (ДанныеДокумента.Период = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудниковНаКонецМесяца.Период, МЕСЯЦ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Приказ о выплате материальной помощи.
//
Функция ТабличныйДокументПриказОВыплатеМатериальнойПомощи(Макет, МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказОВыплатеМатериальнойПомощи";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Приказ");
	
	ДанныеПечати = ДанныеДляПечатиПриказаОВыплатеМатериальнойПомощи(МассивОбъектов).Выбрать();
	Пока ДанныеПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			
		Пока ДанныеПечати.СледующийПоЗначениюПоля("Сотрудник") Цикл 
			
			НачалоБланка = ДокументРезультат.ВысотаТаблицы + 1;
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.НомерДокумента, Истина, Истина);
			ОбластьМакета.Параметры.ДатаДокумента = Формат(ДанныеПечати.ДатаДокумента, "ДЛФ=D");
			ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(ДанныеПечати.СотрудникФИОПолные), 3,
				ОбластьМакета.Параметры.СотрудникФИО, ДанныеПечати.Пол);
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ДанныеПечати.Сумма, ВалютаУчета);;
			
			ДокументРезультат.Вывести(ОбластьМакета);
			
			КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, "ПФ_MXL_ПриказОВыплатеМатериальнойПомощи",
				НачалоБланка, ДанныеПечати, ДанныеПечати.Ссылка);
			
		КонецЦикла;
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


Функция ТабличныйДокументПодтверждениеБрони(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПодтверждениеБронирования";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ИспользоватьТарифныеСетки = ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты");
		
	ИспользоватьКвалификационнуюНадбавку = ПолучитьФункциональнуюОпцию("ИспользоватьКвалификационнуюНадбавку");
	
	ЗаголовкиПКГИКатегорий = Новый Структура("ТарифнаяСеткаЗаголовок,РазрядКатегорияЗаголовок,ТарифнаяСеткаНадбавкиЗаголовок,РазрядКатегорияНадбавкиЗаголовок");
	ЗаголовкиПКГИКатегорий.ТарифнаяСеткаЗаголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСеткаТариф");
	ЗаголовкиПКГИКатегорий.РазрядКатегорияЗаголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияТариф");	
	ЗаголовкиПКГИКатегорий.ТарифнаяСеткаНадбавкиЗаголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСеткаНадбавка");
	ЗаголовкиПКГИКатегорий.РазрядКатегорияНадбавкиЗаголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияНадбавка");		
	
	ДанныеПечатиОбъектов = ДанныеПечатиПодтвержденияБронирования(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТарифнаяСетка = Макет.ПолучитьОбласть("ТарифнаяСетка");
	ОбластьКвалификационнаяНадбавка = Макет.ПолучитьОбласть("КвалификационнаяНадбавка");
	ОбластьШапкаПродолжение = Макет.ПолучитьОбласть("ШапкаПродолжение");
	ОбластьСтрокаНачислений = Макет.ПолучитьОбласть("СтрокаНачислений");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");

	Пока ДанныеПечатиОбъектов.СледующийПоЗначениюПоля("Ссылка") Цикл
		Пока ДанныеПечатиОбъектов.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
			НачалоОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			
			// Документы нужно выводить на разных страницах.
			Если Не ПервыйДокумент Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйДокумент = Ложь;
			КонецЕсли;
			
			ОбластьШапка.Параметры.Заполнить(ДанныеПечатиОбъектов);
			ОбластьШапка.Параметры.Дата = Формат(ОбластьШапка.Параметры.Дата, "ДЛФ=DD");
			ОбластьШапка.Параметры.КоличествоСтавок = КадровыйУчетКлиентСервер.ПредставлениеКоличестваСтавок(ОбластьШапка.Параметры.КоличествоСтавок);
			ДокументРезультат.Вывести(ОбластьШапка);
			
			Если ИспользоватьТарифныеСетки Тогда
				ОбластьТарифнаяСетка.Параметры.Заполнить(ДанныеПечатиОбъектов);
				ОбластьТарифнаяСетка.Параметры.Заполнить(ЗаголовкиПКГИКатегорий);
				ДокументРезультат.Вывести(ОбластьТарифнаяСетка);
			КонецЕсли; 
			
			Если ИспользоватьКвалификационнуюНадбавку Тогда
				ОбластьКвалификационнаяНадбавка.Параметры.Заполнить(ДанныеПечатиОбъектов);
				ОбластьКвалификационнаяНадбавка.Параметры.Заполнить(ЗаголовкиПКГИКатегорий);
				ДокументРезультат.Вывести(ОбластьКвалификационнаяНадбавка);
			КонецЕсли; 
			
			ОбластьШапкаПродолжение.Параметры.Заполнить(ДанныеПечатиОбъектов);
			ДокументРезультат.Вывести(ОбластьШапкаПродолжение);
			
			НПП = 1;
			Итого = 0;
			Пока ДанныеПечатиОбъектов.Следующий() Цикл
				
				ОбластьСтрокаНачислений.Параметры.Заполнить(ДанныеПечатиОбъектов);
				ОбластьСтрокаНачислений.Параметры.НПП = НПП;
				ДокументРезультат.Вывести(ОбластьСтрокаНачислений);
				
				НПП = НПП + 1;
				Итого = Итого + ОбластьСтрокаНачислений.Параметры.Размер;
				
			КонецЦикла;
			
			ОбластьПодвал.Параметры.Заполнить(ДанныеПечатиОбъектов);
			
			ОбластьПодвал.Параметры.Итого = Итого;
			
			Если ЗначениеЗаполнено(ДанныеПечатиОбъектов.Ответственный) Тогда
				ОбластьПодвал.Параметры.ПользовательРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ДанныеПечатиОбъектов.Ответственный);
			Иначе
				ОбластьПодвал.Параметры.ПользовательРасшифровкаПодписи = "______________";
			КонецЕсли; 
			ДокументРезультат.Вывести(ОбластьПодвал);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоОбласти, ОбъектыПечати, ДанныеПечатиОбъектов.Ссылка);
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеПечатиПодтвержденияБронирования(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументБронирования.Ссылка КАК Ссылка,
		|	ДокументБронирования.Ссылка.Номер КАК Номер,
		|	ДокументБронирования.Ссылка.Дата КАК Дата,
		|	ДокументБронирования.Ссылка.Сотрудник КАК Сотрудник,
		|	ДокументБронирования.Ссылка.Сотрудник.ФизическоеЛицо.ФИО КАК СотрудникФИО,
		|	ДокументБронирования.Ссылка.Организация КАК Организация,
		|	ДокументБронирования.Ссылка.Подразделение КАК Подразделение,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ДокументБронирования.Ссылка.КоличествоСтавок КАК КоличествоСтавок,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка КАК ТарифнаяСетка,
		|	ДокументБронирования.Ссылка.РазрядКатегория КАК РазрядКатегория,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.ТарифнаяСеткаНадбавки КАК ТарифнаяСеткаНадбавки,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.РазрядКатегорияНадбавки КАК РазрядКатегорияНадбавки,
		|	ДокументБронирования.Ссылка.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДокументБронирования.Ссылка.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ДокументБронирования.Начисление КАК Начисление,
		|	ДокументБронирования.Размер КАК Размер,
		|	ДокументБронирования.Начисление.РеквизитДопУпорядочивания КАК НачислениеРеквизитДопУпорядочивания,
		|	ДокументБронирования.Ссылка.Ответственный КАК Ответственный,
		|	ДокументБронирования.Ссылка.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ДокументБронирования.Ссылка.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное
		|ИЗ
		|	Документ.ПриемНаРаботу.Начисления КАК ДокументБронирования
		|ГДЕ
		|	ДокументБронирования.Ссылка.БронированиеПозиции
		|	И ДокументБронирования.Ссылка.Проведен
		|	И ДокументБронирования.Ссылка.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументБронирования.Ссылка,
		|	ДокументБронирования.Ссылка.Номер,
		|	ДокументБронирования.Ссылка.Дата,
		|	ДокументБронирования.Ссылка.Сотрудник,
		|	ДокументБронирования.Ссылка.Сотрудник.ФизическоеЛицо.ФИО,
		|	ДокументБронирования.Ссылка.Организация,
		|	ДокументБронирования.Ссылка.Подразделение,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию,
		|	ДокументБронирования.Ссылка.КоличествоСтавок,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка,
		|	ДокументБронирования.Ссылка.РазрядКатегория,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.ТарифнаяСеткаНадбавки,
		|	ДокументБронирования.Ссылка.ДолжностьПоШтатномуРасписанию.РазрядКатегорияНадбавки,
		|	ДокументБронирования.Ссылка.СтатьяФинансирования,
		|	ДокументБронирования.Ссылка.СпособОтраженияЗарплатыВБухучете,
		|	ДокументБронирования.Начисление,
		|	ДокументБронирования.Размер,
		|	ДокументБронирования.Начисление.РеквизитДопУпорядочивания,
		|	ДокументБронирования.Ссылка.Ответственный,
		|	ДокументБронирования.Ссылка.Организация.НаименованиеПолное,
		|	ДокументБронирования.Ссылка.Организация.НаименованиеСокращенное
		|ИЗ
		|	Документ.КадровыйПеревод.Начисления КАК ДокументБронирования
		|ГДЕ
		|	ДокументБронирования.Ссылка.БронированиеПозиции
		|	И ДокументБронирования.Ссылка.Проведен
		|	И ДокументБронирования.Ссылка.Ссылка В(&МассивОбъектов)
		|	И ДокументБронирования.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументБронирования.Ссылка,
		|	ДокументБронирования.Ссылка.Номер,
		|	ДокументБронирования.Ссылка.Дата,
		|	ДокументБронированияСотрудники.Сотрудник,
		|	ДокументБронированияСотрудники.ФизическоеЛицо.ФИО,
		|	ДокументБронирования.Ссылка.Организация,
		|	ДокументБронированияСотрудники.Подразделение,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию,
		|	ДокументБронированияСотрудники.КоличествоСтавок,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка,
		|	ДокументБронированияСотрудники.РазрядКатегория,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.ТарифнаяСеткаНадбавки,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.РазрядКатегорияНадбавки,
		|	ДокументБронированияСотрудники.СтатьяФинансирования,
		|	ДокументБронированияСотрудники.СпособОтраженияЗарплатыВБухучете,
		|	ДокументБронирования.Начисление,
		|	ДокументБронирования.Размер,
		|	ДокументБронирования.Начисление.РеквизитДопУпорядочивания,
		|	ДокументБронирования.Ссылка.Ответственный,
		|	ДокументБронирования.Ссылка.Организация.НаименованиеПолное,
		|	ДокументБронирования.Ссылка.Организация.НаименованиеСокращенное
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Начисления КАК ДокументБронирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком.Сотрудники КАК ДокументБронированияСотрудники
		|		ПО ДокументБронирования.Ссылка = ДокументБронированияСотрудники.Ссылка
		|			И ДокументБронирования.ИдентификаторСтрокиСотрудника = ДокументБронированияСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	ДокументБронирования.Ссылка.БронированиеПозиции
		|	И ДокументБронирования.Ссылка.Проведен
		|	И ДокументБронирования.Ссылка.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументБронирования.Ссылка,
		|	ДокументБронирования.Ссылка.Номер,
		|	ДокументБронирования.Ссылка.Дата,
		|	ДокументБронированияСотрудники.Сотрудник,
		|	ДокументБронированияСотрудники.ФизическоеЛицо.ФИО,
		|	ДокументБронирования.Ссылка.Организация,
		|	ДокументБронированияСотрудники.Подразделение,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию,
		|	ДокументБронированияСотрудники.КоличествоСтавок,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка,
		|	ДокументБронированияСотрудники.РазрядКатегория,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.ТарифнаяСеткаНадбавки,
		|	ДокументБронированияСотрудники.ДолжностьПоШтатномуРасписанию.РазрядКатегорияНадбавки,
		|	ДокументБронированияСотрудники.СтатьяФинансирования,
		|	ДокументБронированияСотрудники.СпособОтраженияЗарплатыВБухучете,
		|	ДокументБронирования.Начисление,
		|	ДокументБронирования.Размер,
		|	ДокументБронирования.Начисление.РеквизитДопУпорядочивания,
		|	ДокументБронирования.Ссылка.Ответственный,
		|	ДокументБронирования.Ссылка.Организация.НаименованиеПолное,
		|	ДокументБронирования.Ссылка.Организация.НаименованиеСокращенное
		|ИЗ
		|	Документ.КадровыйПереводСписком.Начисления КАК ДокументБронирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК ДокументБронированияСотрудники
		|		ПО ДокументБронирования.Ссылка = ДокументБронированияСотрудники.Ссылка
		|			И ДокументБронирования.ИдентификаторСтрокиСотрудника = ДокументБронированияСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	ДокументБронирования.Ссылка.БронированиеПозиции
		|	И ДокументБронирования.Ссылка.Проведен
		|	И ДокументБронирования.Ссылка.Ссылка В(&МассивОбъектов)
		|	И ДокументБронирования.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник,
		|	НачислениеРеквизитДопУпорядочивания";
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

//////////////////////////////////////////////////////////////////////
// Изменение условий оплаты отпуска по уходу за ребенком.

Функция ДанныеПечатиПриказОВыходеНаНеполноеРабочееВремя(МассивОбъектов) Экспорт
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Ссылка,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Номер,
		|	НАЧАЛОПЕРИОДА(ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Дата, ДЕНЬ) КАК Дата,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Организация,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Руководитель,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ДолжностьРуководителя
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком
		|ГДЕ
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка,
		|	ДанныеДокументов.Номер,
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.Организация,
		|	ДанныеДокументов.НазваниеОрганизации,
		|	ДанныеДокументов.Сотрудник,
		|	ДанныеДокументов.Руководитель,
		|	ДанныеДокументов.ДолжностьРуководителя,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатыЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДокументДляПечати Из РезультатыЗапроса Цикл
		
		ДанныеПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДокументДляПечати);
		ДанныеПечати.Вставить("ФИОСотрудникаРодительный", "");
		ДанныеПечати.Вставить("ФИОСотрудникаДательный", "");
		ДанныеПечати.Вставить("ТабельныйНомер", "");
		ДанныеПечати.Вставить("ФИОСотрудника", "");
		ДанныеПечати.Вставить("Подразделение", "");
		ДанныеПечати.Вставить("Должность", "");
		
		ДанныеПечати.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=D");
		ДанныеПечати.Номер = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеПечати.Номер);
		
		// Данные совмещающего физического лица.
		Пол = Неопределено;
		ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументДляПечати.Сотрудник),
			"Пол", ДокументДляПечати.Дата);
		Если ДанныеФизическогоЛица.Количество() > 0 Тогда
			Пол = ДанныеФизическогоЛица[0].Пол;
		КонецЕсли;
		
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументДляПечати.Сотрудник), ДокументДляПечати.Организация);
		
		Если Сотрудники.Количество() > 0 Тогда
			
			ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, Сотрудники, "ФИОПолные,ФамилияИО,Фамилия,Имя,Отчество,Инициалы,Подразделение,Должность,ТабельныйНомер", ДокументДляПечати.Дата);
			
			Если ДанныеСотрудников.Количество() > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(ДанныеПечати, ДанныеСотрудников[0]);
				
				ДанныеПечати.ФИОСотрудника = ДанныеСотрудников[0].ФамилияИО;
				ДанныеПечати.ФИОСотрудникаРодительный = ДанныеСотрудников[0].ФамилияИО;
				
				СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество,Инициалы");
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеСотрудников[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 2, ДанныеПечати.ФИОСотрудникаРодительный, Пол);
				ДанныеПечати.ФИОСотрудникаРодительный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеСотрудников[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 3, СтруктураФИО.Фамилия, Пол);
				ДанныеПечати.ФИОСотрудникаДательный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение соответствия
		ДанныеПечатиОбъектов.Вставить(ДокументДляПечати.Ссылка, ДанныеПечати);
		
	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

// Приказ о работе на условиях неполного рабочего времени.
//
Функция ТабличныйДокументПриказОВыходеНаНеполноеРабочееВремя(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком_ПриказОВыходеНаНеполноеРабочееВремя";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиПриказОВыходеНаНеполноеРабочееВремя(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Макет.Параметры.Заполнить(ДанныеПечати.Значение);
		
		ДокументРезультат.Вывести(Макет);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Значение.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////
// Возврат из отпуска по уходу.

Функция ДанныеПечатиПриказОПрекращенииОтпускаПоУходуЗаРебенком(МассивОбъектов) Экспорт
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка КАК Ссылка,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Номер КАК Номер,
		|	НАЧАЛОПЕРИОДА(ВозвратИзОтпускаПоУходуЗаРебенком.Дата, ДЕНЬ) КАК Дата,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация КАК Организация,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Сотрудник КАК Сотрудник,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ОсновнойСотрудник КАК ОсновнойСотрудник,
		|	ДОБАВИТЬКДАТЕ(ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата, ДЕНЬ, -1) КАК ДатаВозврата,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Руководитель КАК Руководитель,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.РуководительКадровойСлужбы КАК РуководительКадровойСлужбы,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ДолжностьРуководителяКадровойСлужбы КАК ДолжностьРуководителяКадровойСлужбы
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
		|ГДЕ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеДокументов.ОсновнойСотрудник КАК Сотрудник,
		|	ВТДанныеДокументов.ДатаВозврата КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДанныеДокументов КАК ВТДанныеДокументов";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТСотрудникиПериоды", "Сотрудник");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.ОтборыПрименяемыеКСрезу,
		"Начисление.КатегорияНачисленияИлиНеоплаченногоВремени",
		"=",
		Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
		
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "Используется", "=", Истина);
		
	УстановитьПривилегированныйРежим(Истина);
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	УстановитьПривилегированныйРежим(Ложь);
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сотрудник");
	ИменаРеквизитов.Добавить("Руководитель");
	ИменаРеквизитов.Добавить("ГлавныйБухгалтер");
	ИменаРеквизитов.Добавить("РуководительКадровойСлужбы");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаРеквизитов, "ВТДанныеДокументов");

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Номер КАК Номер,
		|	ДанныеДокументов.Дата КАК Дата,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.НазваниеОрганизации КАК НазваниеОрганизации,
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.ДатаВозврата КАК ДатаВозврата,
		|	ФИОСотрудника.РасшифровкаПодписи КАК СотрудникРасшифровкаПодписи,
		|	ФИОСотрудника.ФИОПолные КАК ФИОСотрудника,
		|	ДанныеДокументов.Руководитель КАК Руководитель,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДанныеДокументов.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		|	ФИОГлавногоБухгалтера.ФИОПолные КАК ФИОГлавногоБухгалтера,
		|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
		|	ДанныеДокументов.РуководительКадровойСлужбы КАК РуководительКадровойСлужбы,
		|	ФИОРуководителяКадровойСлужбы.ФИОПолные КАК ФИОРуководителяКадровойСлужбы,
		|	ФИОРуководителяКадровойСлужбы.РасшифровкаПодписи КАК РуководительКадровойСлужбыРасшифровкаПодписи,
		|	ДанныеДокументов.ДолжностьРуководителяКадровойСлужбы КАК ДолжностьРуководителяКадровойСлужбы,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисленияСрезПоследних.Сотрудник ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВыплатыПособий
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСотрудника
		|		ПО ДанныеДокументов.Дата = ФИОСотрудника.Дата
		|			И ДанныеДокументов.Ссылка = ФИОСотрудника.Ссылка
		|			И ДанныеДокументов.Сотрудник = ФИОСотрудника.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителяКадровойСлужбы
		|		ПО ДанныеДокументов.Дата = ФИОРуководителяКадровойСлужбы.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителяКадровойСлужбы.Ссылка
		|			И ДанныеДокументов.РуководительКадровойСлужбы = ФИОРуководителяКадровойСлужбы.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
		|		ПО ДанныеДокументов.Дата = ФИОГлавногоБухгалтера.Дата
		|			И ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
		|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|		ПО ДанныеДокументов.ДатаВозврата = ПлановыеНачисленияСрезПоследних.Период
		|			И ДанныеДокументов.ОсновнойСотрудник = ПлановыеНачисленияСрезПоследних.Сотрудник";
	
	РезультатыЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДокументДляПечати Из РезультатыЗапроса Цикл
		
		ДанныеПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДокументДляПечати);
		ДанныеПечати.Вставить("ФИОСотрудникаРодительный", "");
		ДанныеПечати.Вставить("ФИОБухгалтераРодительный", "");
		ДанныеПечати.Вставить("ФИОРуководителяКадровойСлужбыДательный", "");
		ДанныеПечати.Вставить("Ознакомлен", НСтр("ru = 'ознакомлен';
												|en = 'I have read and understood'"));

		ДанныеПечати.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=D");
		ДанныеПечати.ДатаВозврата = Формат(ДанныеПечати.ДатаВозврата, "ДЛФ=D");
		ДанныеПечати.Номер = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеПечати.Номер);
		
		Если ЗначениеЗаполнено(ДанныеПечати.РуководительКадровойСлужбы) Тогда

			ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечати.РуководительКадровойСлужбы), 
				"Фамилия,Имя,Отчество,Инициалы,Пол", ДанныеПечати.Дата);
			
			Если ДанныеФизическогоЛица.Количество() > 0 Тогда
				
				СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество,Инициалы");
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеФизическогоЛица[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 3, СтруктураФИО.Фамилия, ДанныеФизическогоЛица[0].Пол);
				
				ДанныеПечати.ФИОРуководителяКадровойСлужбыДательный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
			КонецЕсли;
			
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ДанныеПечати.ГлавныйБухгалтер) Тогда
			
			ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечати.ГлавныйБухгалтер), 
				"Фамилия,Имя,Отчество,Пол", ДокументДляПечати.Дата);
			
			Если ДанныеФизическогоЛица.Количество() > 0 Тогда
				
				СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество,Инициалы");
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеФизическогоЛица[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 3, СтруктураФИО.Фамилия, ДанныеФизическогоЛица[0].Пол);
					
				ДанныеПечати.ФИОБухгалтераРодительный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
			КонецЕсли;
			
		КонецЕсли;
			
		// Данные физического лица
		ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечати.Сотрудник), 
			"Фамилия,Имя,Отчество,Пол", ДокументДляПечати.Дата);
			
		Если ДанныеФизическогоЛица.Количество() > 0 Тогда
			
			СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество,Инициалы");
			
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеФизическогоЛица[0]);
			ФизическиеЛицаЗарплатаКадры.Просклонять(
				СтруктураФИО.Фамилия, 2, СтруктураФИО.Фамилия, ДанныеФизическогоЛица[0].Пол);
				
			ДанныеПечати.ФИОСотрудникаРодительный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
			
			Если ДанныеФизическогоЛица[0].Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ДанныеПечати.Ознакомлен = НСтр("ru = 'ознакомлен';
												|en = 'I have read and understood'");
			Иначе
				ДанныеПечати.Ознакомлен = НСтр("ru = 'ознакомлена';
												|en = 'I have read and understood'");
			КонецЕсли;
			
		КонецЕсли;

		// Приведение значений к требуемому формату.
		Если Не ЗначениеЗаполнено(ДанныеПечати.ФИОБухгалтераРодительный) Тогда
			ДанныеПечати.ФИОБухгалтераРодительный =  "___________________________";
		КонецЕсли;
		
		// Заполнение соответствия
		ДанныеПечатиОбъектов.Вставить(ДокументДляПечати.Ссылка, ДанныеПечати);
		
	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

// Приказ о прекращении отпуска по уходу за ребенком.
//
Функция ТабличныйДокументПриказОПрекращенииОтпускаПоУходуЗаРебенком(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратИзОтпускаПоУходуЗаРебенком_ПриказОПрекращенииОтпускаПоУходуЗаРебенком";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиПриказОПрекращенииОтпускаПоУходуЗаРебенком(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеПечати.Значение);
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Если ДанныеПечати.Значение.ЕстьВыплатыПособий Тогда
			ОбластьМакетаПриказ = Макет.ПолучитьОбласть("ПриказСПособиями");
			ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиСПособиями");
		Иначе
			ОбластьМакетаПриказ = Макет.ПолучитьОбласть("ПриказБезПособий");
			ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиБезПособий");
		КонецЕсли;
		
		ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеПечати.Значение);
		ДокументРезультат.Вывести(ОбластьМакетаПриказ);
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеПечати.Значение);
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		ОбластьПодписи.Параметры.Заполнить(ДанныеПечати.Значение);
		ДокументРезультат.Вывести(ОбластьПодписи);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Значение.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

// Приказ о выходе на работу до окончания отпуска по уходу за ребенком.
//
Функция ТабличныйДокументПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратИзОтпускаПоУходуЗаРебенком_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиПриказОПрекращенииОтпускаПоУходуЗаРебенком(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеПечати.Значение);
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Если ДанныеПечати.Значение.ЕстьВыплатыПособий Тогда
			ОбластьМакетаПриказ = Макет.ПолучитьОбласть("ПриказСПособиями");
			ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиСПособиями");
		Иначе
			ОбластьМакетаПриказ = Макет.ПолучитьОбласть("ПриказБезПособий");
			ОбластьПодписи = Макет.ПолучитьОбласть("ПодписиБезПособий");
		КонецЕсли;
		
		ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеПечати.Значение);
		ДокументРезультат.Вывести(ОбластьМакетаПриказ);
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеПечати.Значение);
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		ОбластьПодписи.Параметры.Заполнить(ДанныеПечати.Значение);
		ДокументРезультат.Вывести(ОбластьПодписи);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Значение.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПодходящиеОбъекты(МассивОбъектов, НужныеТипы)
	ПодходящиеОбъекты = Новый Массив;
	Для каждого ПроверяемыйОбъект Из МассивОбъектов Цикл
		Для Каждого НужныйТип Из НужныеТипы Цикл
			Если ТипЗнч(ПроверяемыйОбъект) = НужныйТип Тогда
				ПодходящиеОбъекты.Добавить(ПроверяемыйОбъект);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ПодходящиеОбъекты
КонецФункции

//////////////////////////////////////////////////////////////////////
// Оплата по среднему заработку.

Функция ДанныеПечатиПриказОбОплатеПоСреднемуЗаработку(МассивОбъектов)
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	СоответствиеОбъектовМетаданным = Новый Соответствие;
	
	Для Каждого ВыводимыйДокумент Из МассивОбъектов Цикл
		
		МДДокумента = ВыводимыйДокумент.Метаданные();
		
		КоллекцияОбъектов = СоответствиеОбъектовМетаданным.Получить(МДДокумента);
		
		Если КоллекцияОбъектов = Неопределено Тогда
			КоллекцияОбъектов = Новый Массив;
		КонецЕсли;
		
		КоллекцияОбъектов.Добавить(ВыводимыйДокумент);
		
		СоответствиеОбъектовМетаданным.Вставить(МДДокумента, КоллекцияОбъектов);
		
	КонецЦикла;
	
	МассивТекстаЗапроса = Новый Массив;
	СписокДокументовПараметр = Новый Соответствие;
	
	Для Каждого ЭлементКоллекции Из СоответствиеОбъектовМетаданным Цикл
		
		ИмяДокумента = ЭлементКоллекции.Ключ.Имя ;
		ИмяПараметра = ИмяДокумента + "Список";
		СписокДокументовПараметр.Вставить(ИмяПараметра, ЭлементКоллекции.Значение);
		
		Если СтрНайти(ИмяДокумента,"Списком")>0 Тогда
			ТаблицаДокументов = "Документ." + ИмяДокумента + "." + "Сотрудники";
		Иначе
			ТаблицаДокументов = "Документ." + ИмяДокумента;
		КонецЕсли; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ТаблицаДокументов.Ссылка.Номер КАК Номер,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокументов.Ссылка.Дата, ДЕНЬ) КАК Дата,
		|	ТаблицаДокументов.Ссылка.Организация КАК Организация,
		|	ТаблицаДокументов.Ссылка.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ТаблицаДокументов.Сотрудник КАК Сотрудник,
		|	ТаблицаДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаДокументов.Ссылка.Руководитель КАК Руководитель,
		|	ТаблицаДокументов.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ТаблицаДокументов.Ссылка.ВидВремени КАК ВидВремени,
		|	ТаблицаДокументов.Ссылка.ВнутрисменноеОтсутствие КАК ВнутрисменноеОтсутствие,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокументов.ДатаНачала, ДЕНЬ) КАК ДатаНачала,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокументов.ДатаОкончания, ДЕНЬ) КАК ДатаОкончания,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокументов.ДатаОтсутствия, ДЕНЬ) КАК ДатаОтсутствия,
		|	ТаблицаДокументов.ОплачиватьЧасов КАК ОплачиватьЧасов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&СписокДокументовПараметр)";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДокументов", ТаблицаДокументов);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокДокументовПараметр", "&" + ИмяПараметра);
		
		МассивТекстаЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;

	ТекстЗапроса = СтрСоединить(МассивТекстаЗапроса, 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|");
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = "ВТДанныеДокументов";
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Для Каждого Параметр Из СписокДокументовПараметр Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
		
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Номер КАК Номер,
		|	ДанныеДокументов.Дата КАК Дата,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокументов.Руководитель КАК Руководитель,
		|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДанныеДокументов.ВидВремени КАК ВидВремени,
		|	ДанныеДокументов.ВнутрисменноеОтсутствие КАК ВнутрисменноеОтсутствие,
		|	ДанныеДокументов.ДатаНачала КАК ДатаНачала,
		|	ДанныеДокументов.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеДокументов.ДатаОтсутствия КАК ДатаОтсутствия,
		|	ДанныеДокументов.ОплачиватьЧасов КАК ОплачиватьЧасов,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДанныеПоСотрудникуДляПечати = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ДанныеПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка);
			ДанныеПечати.Вставить("ФИОСотрудникаРодительный", "");
			ДанныеПечати.Вставить("ФИОСотрудникаДательный", "");
			ДанныеПечати.Вставить("ТабельныйНомер", "");
			ДанныеПечати.Вставить("ФИОСотрудника", "");
			ДанныеПечати.Вставить("Подразделение", "");
			ДанныеПечати.Вставить("Должность", "");
			
			ДанныеПечати.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=D");
			ДанныеПечати.Номер = КадровыйУчетРасширенный.НомерКадровогоПриказа(ДанныеПечати.Номер);
			
			// Данные совмещающего физического лица.
			Пол = Неопределено;
			ДанныеФизическогоЛица = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.ФизическоеЛицо),
				"Пол", Выборка.Дата);
			Если ДанныеФизическогоЛица.Количество() > 0 Тогда
				Пол = ДанныеФизическогоЛица[0].Пол;
			КонецЕсли;
			
			ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, Выборка.Сотрудник, "ФИОПолные,ФамилияИО,Фамилия,Имя,Отчество,Инициалы,Подразделение,Должность,ТабельныйНомер", Выборка.Дата);
			
			Если ДанныеСотрудников.Количество() > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(ДанныеПечати, ДанныеСотрудников[0]);
				
				ДанныеПечати.ФИОСотрудника = ДанныеСотрудников[0].ФамилияИО;
				ДанныеПечати.ФИОСотрудникаРодительный = ДанныеСотрудников[0].ФамилияИО;
				
				СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество,Инициалы");
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеСотрудников[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 2, СтруктураФИО.Фамилия, Пол);
				ДанныеПечати.ФИОСотрудникаРодительный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
				ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеСотрудников[0]);
				ФизическиеЛицаЗарплатаКадры.Просклонять(
					СтруктураФИО.Фамилия, 3, СтруктураФИО.Фамилия, Пол);
				ДанныеПечати.ФИОСотрудникаДательный = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
				
			КонецЕсли;
			ДанныеПоСотрудникуДляПечати.Добавить(ДанныеПечати);
		КонецЦикла;
		// Заполнение соответствия
		ДанныеПечатиОбъектов.Вставить(Выборка.Ссылка, ДанныеПоСотрудникуДляПечати);
	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

// Приказ об оплате по среднему заработку.
//
Функция ТабличныйДокументПриказОбОплатеПоСреднемуЗаработку(Макет, МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОплатаПоСреднемуЗаработку_ПриказОбОплатеПоСреднемуЗаработку";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиПриказОбОплатеПоСреднемуЗаработку(МассивОбъектов);
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для Каждого ДанныеПечатиСотрудника Из ДанныеПечати.Значение Цикл
			
			НачалоБланка = ДокументРезультат.ВысотаТаблицы + 1;
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
			
			ОбластьМакетаШапка.Параметры.Заполнить(ДанныеПечатиСотрудника);
			ДокументРезультат.Вывести(ОбластьМакетаШапка);
			
			Если ДанныеПечатиСотрудника.ВнутрисменноеОтсутствие Тогда
				ОбластьМакетаПриказ = Макет.ПолучитьОбласть("СодержаниеВнутрисменный");
				ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеПечатиСотрудника);
				ОбластьМакетаПриказ.Параметры.ДатаОтсутствия = Формат(ДанныеПечатиСотрудника.ДатаОтсутствия, "ДЛФ=DD");
			Иначе
				ОбластьМакетаПриказ = Макет.ПолучитьОбласть("Содержание");
				ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеПечатиСотрудника);
				ОбластьМакетаПриказ.Параметры.ДатаНачала = Формат(ДанныеПечатиСотрудника.ДатаНачала, "ДЛФ=DD");
				ОбластьМакетаПриказ.Параметры.ДатаОкончания = Формат(ДанныеПечатиСотрудника.ДатаОкончания, "ДЛФ=DD");
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьМакетаПриказ);
			
			ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеПечатиСотрудника);
			ДокументРезультат.Вывести(ОбластьМакетаПодвал);
			
			// В табличном документе необходимо задать имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, "ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработку",
				НачалоБланка, ДанныеПечатиСотрудника, ДанныеПечатиСотрудника.Ссылка);
			
		КонецЦикла;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало,
			ОбъектыПечати, ДанныеПечати.Ключ);
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

// Приказ об оплате по среднему заработку списком.
//
Функция ТабличныйДокументПриказОбОплатеПоСреднемуЗаработкуСписком(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОплатаПоСреднемуЗаработкуСписком_ПриказОбОплатеПоСреднемуЗаработкуСписком";
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб = Истина;
	
		ДанныеПечатиОбъектов = ДанныеПечатиПриказОбОплатеПоСреднемуЗаработку(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеПечати.Значение[0]);
		ДокументРезультат.Вывести(ОбластьМакетаШапка);

		Если ДанныеПечати.Значение[0].ВнутрисменноеОтсутствие Тогда
			ОбластьМакетаПриказ = Макет.ПолучитьОбласть("СодержаниеВнутрисменный");
		Иначе
			ОбластьМакетаПриказ = Макет.ПолучитьОбласть("Содержание");
		КонецЕсли;
			
		ОбластьМакетаПриказ.Параметры.Заполнить(ДанныеПечати.Значение[0]);
		
		ДокументРезультат.Вывести(ОбластьМакетаПриказ);
		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
		НомерСтроки = 0;
		Для Каждого ДанныеПечатиСотрудника Из ДанныеПечати.Значение Цикл
			НомерСтроки = НомерСтроки + 1;
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
			ОбластьСтроки.Параметры.Заполнить(ДанныеПечатиСотрудника);
			Если ДанныеПечатиСотрудника.ВнутрисменноеОтсутствие Тогда
				ОплачиваемоеВремя = СтрШаблон(НСтр("ru = '%1 ч. %2';
													|en = '%1 h %2'"), 
				ДанныеПечатиСотрудника.ОплачиватьЧасов, 
				Формат(ДанныеПечатиСотрудника.ДатаОтсутствия, "ДЛФ=D"));
			Иначе
				ОплачиваемоеВремя = СтрШаблон(НСтр("ru = '%1 - %2';
													|en = '%1 - %2'"), 
				Формат(ДанныеПечатиСотрудника.ДатаНачала, "ДЛФ=D"),
				Формат(ДанныеПечатиСотрудника.ДатаОкончания, "ДЛФ=D"));
			КонецЕсли;
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтроки.Параметры.ОплачиваемоеВремя = ОплачиваемоеВремя;
			ДокументРезультат.Вывести(ОбластьСтроки);
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеПечатиСотрудника);
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечатиСотрудника.Ссылка);
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли