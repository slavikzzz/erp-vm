#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	Параметры.Свойство("Организация", Организация);
	
	Если НЕ ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки';
													|en = 'Cargo transportation type is not selected'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен';
													|en = 'The selected cargo transportation type is not available'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен';
													|en = 'The selected cargo transportation type is not available'"));
		Отказ = Истина;
		Возврат;

	Иначе
		
		Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
			
			НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование");
			ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
			
			Элементы.ПодсказкаФормы.Заголовок = СтрШаблон(НСтр("ru = 'Для подключения организации %1 к сервису 1С-Курьерика, выполните следующие шаги:';
																|en = 'To connect %1 company to 1C:Courierica:'"),
				Организация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьФормуПоТипуГрузоперевозки();
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для настройки авторизации.
			|Должна быть доступна роль ""Отправка заказов на доставку перевозчику""';
			|en = 'Insufficient rights for making changes to authorization settings.
			|""Sending orders for delivery to carrier"" role is required'"));
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовок = "";
	
	Параметры.Свойство("Заголовок", ТекстЗаголовок);
	Если ЗначениеЗаполнено(ТекстЗаголовок) Тогда
		Параметры.Свойство("Заголовок", Заголовок);
	КонецЕсли;
	
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("Перевозчик", Перевозчик);
	Параметры.Свойство("ИдентификаторСервиса", ИдентификаторСервиса);
	Параметры.Свойство("ТипАвторизации", ТипАвторизации);
	Параметры.Свойство("Авторизован", Авторизован);
	
	Элементы.ГруппаАвторизация.ТолькоПросмотр = Истина;
	Элементы.Изменить.Видимость = Ложь;
	Элементы.Подключить.Видимость = Ложь;
	
	ФоновоеЗаданиеПолучитьНастройкиАвторизации = ПолучитьНастройкиАвторизацииВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипАвторизации <> "" Тогда 
		ЗаполнитьАвторизациюПоТипу();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьНастройкиАвторизации) Тогда
		
		ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
		ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации());
		ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение настроек авторизации.';
																|en = 'Receiving authorization settings.'"));
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПользовательКурьерикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательКурьерикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФИО = Строка(ВыбранноеЗначение);
		АдресЭлектроннойПочты = ПредставлениеАдресаЭлектроннойПочты(ВыбранноеЗначение);
		Телефон = ПредставлениеТелефона(ВыбранноеЗначение);
		
		Если ЗначениеЗаполнено(Телефон) Тогда
			Элементы.ТелефонКурьерика.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Телефон));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			Элементы.АдресЭлектроннойПочтыКурьерика.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(АдресЭлектроннойПочты));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательКурьерикаОчистка(Элемент, СтандартнаяОбработка)
	
	АдресЭлектроннойПочты = "";
	Телефон = "";
	
	Элементы.ТелефонКурьерика.СписокВыбора.Очистить();
	Элементы.АдресЭлектроннойПочтыКурьерика.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладКурьерикаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		ПунктВыдачиНаименование = Строка(Склад);
		ПунктВыдачиАдрес = ПредставлениеАдреса(Склад);
		ПунктВыдачиТелефон = ПредставлениеТелефона(Склад);
		
		Если ЗначениеЗаполнено(ПунктВыдачиНаименование) Тогда
			Элементы.ПунктВыдачиНаименование.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПунктВыдачиНаименование));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПунктВыдачиАдрес) Тогда
			Элементы.ПунктВыдачиАдрес.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПунктВыдачиАдрес));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПунктВыдачиТелефон) Тогда
			Элементы.ПунктВыдачиТелефон.СписокВыбора.ЗагрузитьЗначения(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПунктВыдачиТелефон));
		КонецЕсли;
		
	Иначе
		
		ПунктВыдачиНаименование = "";
		ПунктВыдачиАдрес = "";
		ПунктВыдачиТелефон = "";
		
		Элементы.ПунктВыдачиНаименование.СписокВыбора.Очистить();
		Элементы.ПунктВыдачиАдрес.СписокВыбора.Очистить();
		Элементы.ПунктВыдачиТелефон.СписокВыбора.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОтправитьЗаявкуНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ПунктВыдачиЗарегистрирован Тогда
		
		Если Не ЗначениеЗаполнено(Склад) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан склад';
				|en = 'Warehouse is not specified'"),,
				"Склад",,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПунктВыдачиНаименование) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указано наименование пункта выдачи';
					|en = 'Pickup point name is not specified'"),,
				"ПунктВыдачиНаименование",,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПунктВыдачиАдрес) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указан адрес пункта выдачи';
					|en = 'Pickup point address is not specified'"),,
				"ПунктВыдачиАдрес",,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЛогистЗарегистрирован Тогда
		
		Если Не ЗначениеЗаполнено(ФИО) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указаны ФИО пользователя';
					|en = 'User''s full name is not specified'"),,
				"ФИО",,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указан номер телефона пользователя';
					|en = 'User''s phone number is not specified'"),,
				"Телефон",,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не указан адрес электронной почты пользователя';
					|en = 'User''s email address is not specified'"),,
				"АдресЭлектроннойПочты",,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ОтправитьЗапросНаПолучениеРегистрационныхДанных();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	Логин = "";
	Пароль = "";
	Токен = "";
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		Элементы.ГруппаРегистрационныеДанные.ТолькоПросмотр = Ложь;
		
	Иначе
		Элементы.ГруппаАвторизация.ТолькоПросмотр = Ложь;
	КонецЕсли;

	Элементы.Подключить.КнопкаПоУмолчанию = Истина;
	Элементы.Подключить.Видимость = Истина;
	Элементы.Изменить.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНаименованиеОрганизации(Команда)
	
	СкопироватьВБуфер(НаименованиеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИдентификаторОрганизации(Команда)
	
	СкопироватьВБуфер(ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)

	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбновлениеДанныхКурьерика;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Запись настроек авторизации.';
													|en = 'Saving authorization settings.'");
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена =
		ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. %2.';
																						|en = '%1. %2.'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиАвторизацииВФоне()
	
	ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение настроек авторизации.';
															|en = 'Receiving authorization settings.'"));
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьПунктыВыдачиКлиентаВФоне()
	
	ПараметрыОперации = Новый Структура("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение списка пунктов выдачи клиента.';
															|en = 'Receive a list of client pickup points.'"));
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСостояниеПодключенияОрганизации()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбновлениеДанныхКурьерика;
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Получение состояния подключения организации.';
															|en = 'Get a company connection state.'"));
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаПолучениеРегистрационныхДанных()
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ВыводитьОкноОжидания");
	ПараметрыОперации.Вставить("ИмяПроцедуры", СервисДоставкиКлиентСервер.ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных());
	ПараметрыОперации.Вставить("НаименованиеОперации", НСтр("ru = 'Отправка запроса на получение регистрационных данных.';
															|en = 'Send a request to get registration data.'"));
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьНастройкиАвторизации(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаЗаписатьНастройкиАвторизации(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьСостояниеПодключенияОрганизации(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", Организация);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьНастройкиАвторизации(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьНастройкиАвторизации();
	ПараметрыЗапроса.Вставить("ИдентификаторСервиса", ИдентификаторСервиса);
	
	Возврат ПараметрыЗапроса;
КонецФункции

&НаСервере
Функция ПараметрыЗапросаЗаписатьНастройкиАвторизации(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаЗаписатьНастройкиАвторизации();
	ПараметрыЗапроса.Вставить("Логин", Логин);
	ПараметрыЗапроса.Вставить("Пароль", Пароль);
	ПараметрыЗапроса.Вставить("Токен", Токен);
	ПараметрыЗапроса.Вставить("ПравоДоступа", ПравоДоступа);
	ПараметрыЗапроса.Вставить("ИдентификаторСервиса", ИдентификаторСервиса);
	
	Возврат ПараметрыЗапроса;
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьПунктыВыдачиКлиента(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьПунктыВыдачиКлиента();
	ПараметрыЗапроса.ТипЗагрузки = 1; // 1 - запросить у оператора и получить
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не выбран тип грузоперевозки.';
							|en = 'Cargo transportation type is not selected.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьСостояниеПодключенияОрганизации(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьСостояниеПодключенияОрганизации();
	
	Если ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не выбран тип грузоперевозки.';
							|en = 'Cargo transportation type is not selected.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных();
	
	ПараметрыЗапроса.ЗарегистрироватьОрганизацию = Не ОрганизацияЗарегистрирована;
	ПараметрыЗапроса.ЗарегистрироватьПунктВыдачи = Не ПунктВыдачиЗарегистрирован;
	ПараметрыЗапроса.ЗарегистрироватьПользователя = Не ЛогистЗарегистрирован;
	
	ПараметрыЗапроса.НаименованиеОрганизации = НаименованиеОрганизации;
	ПараметрыЗапроса.ИдентификаторОрганизации = ИдентификаторОрганизации;
	ПараметрыЗапроса.ИдентификаторПунктаВыдачи = Строка(Склад.УникальныйИдентификатор());
	ПараметрыЗапроса.НаименованиеПунктаВыдачи = ПунктВыдачиНаименование;
	ПараметрыЗапроса.АдресПунктаВыдачи = ПунктВыдачиАдрес;
	ПараметрыЗапроса.ТелефонПунктаВыдачи = ПунктВыдачиТелефон;
	ПараметрыЗапроса.НаименованиеПользователя = ФИО;
	ПараметрыЗапроса.НомерТелефонаПользователя = Телефон;
	ПараметрыЗапроса.АдресЭлектроннойПочтыПользователя = АдресЭлектроннойПочты;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ОчиститьСообщения();
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.';
								|en = 'No connection to Online user support.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Вставить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	Если Результат = Неопределено
		Или ФоновоеЗадание = Неопределено Тогда
			
		Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика()
			И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбновлениеДанныхКурьерика Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭтапыПодключения;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) 
			И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания =
				ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
			
			Если ДополнительныеПараметры.ИмяПроцедуры =
					СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации() Тогда
				
				ЗагрузитьРезультатПолученияНастроекАвторизации(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
				Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
					
					Если Авторизован Тогда
						ПолучитьПунктыВыдачиКлиентаВФоне();
						УстановитьОформлениеПунктовМенюКурьерика();
					Иначе
						ПолучитьСостояниеПодключенияОрганизации();
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры =
					СервисДоставкиКлиентСервер.ИмяПроцедурыЗаписатьНастройкиАвторизации() Тогда
				
				ЗагрузитьРезультатЗаписиНастроекАвторизации(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьПунктыВыдачиКлиента() Тогда
				
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьСостояниеПодключенияОрганизации()
				Или ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтправитьЗапросНаПолучениеРегистрационныхДанных() Тогда
				
				ЗагрузитьРезультатПолученияСостоянияПодключенияОрганизации(Результат.АдресРезультата);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьОформлениеПунктовМенюКурьерика(СостояниеПодключения = Неопределено)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭтапыПодключения;
	
	Если ТипЗнч(СостояниеПодключения) = Тип("Структура") Тогда
		
		ОрганизацияЗарегистрирована = СостояниеПодключения.ОрганизацияЗарегистрирована;
		ПунктВыдачиЗарегистрирован = СостояниеПодключения.ПунктВыдачиЗарегистрирован;
		ЛогистЗарегистрирован = СостояниеПодключения.ЛогистЗарегистрирован;
		
	Иначе
		
		ОрганизацияЗарегистрирована = Истина;
		ПунктВыдачиЗарегистрирован = Истина;
		ЛогистЗарегистрирован = Истина;
		
	КонецЕсли;
	
	Если ОрганизацияЗарегистрирована Тогда
		
		Элементы.ГиперссылкаВыборОрганизации.Заголовок = НСтр("ru = 'Организация зарегистрирована.';
																|en = 'Company is registered.'");
		Элементы.КартинкаЭтапОрганизация.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		
	Иначе
		
		Элементы.ГиперссылкаВыборОрганизации.Заголовок = НСтр("ru = 'Проверьте организацию для подключения к сервису.';
																|en = 'Check a company to connect to the service.'");
		Элементы.КартинкаЭтапОрганизация.Картинка = БиблиотекаКартинок.Этап1СинийБЭД;
		
	КонецЕсли;
	
	Если ПунктВыдачиЗарегистрирован Тогда
		
		Элементы.ГиперссылкаВыборСклада.Заголовок = НСтр("ru = 'Пункт выдачи зарегистрирован.';
														|en = 'Pickup point is registered.'");
		Элементы.ГиперссылкаВыборСклада.Подсказка = "";
		Элементы.ГруппаСкладРеквизиты.Видимость = Ложь;
		Элементы.КартинкаЭтапПунктВыдачи.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		
	Иначе
		
		Элементы.ГиперссылкаВыборСклада.Заголовок = НСтр(
			"ru = 'Выберите склад по умолчанию для отгрузки заказов.';
			|en = 'Select a default warehouse to ship orders.'");
		Элементы.ГиперссылкаВыборСклада.Подсказка = 
			НСтр("ru = 'С выбранного склада курьеры будут забирать заказы.';
				|en = 'Couriers will pick up orders from the selected warehouse.'") + " " +
			НСтр("ru = 'Дальнейшая настройка пунктов выдачи заказов производится личном кабинете логиста (после получения доступа к сервису).';
				|en = 'Order pickup points are configured in the logistics specialist account after getting access to the service.'");
		Элементы.ГруппаСкладРеквизиты.Видимость = Истина;
		Элементы.КартинкаЭтапПунктВыдачи.Картинка = БиблиотекаКартинок.Этап2СинийБЭД;
		
	КонецЕсли;
	
	Если ЛогистЗарегистрирован Тогда
		
		Элементы.ГиперссылкаВыборРеквизитовЛогиста.Заголовок = НСтр("ru = 'Логист создан.';
																	|en = 'Logistics specialist is created.'");
		Элементы.ГиперссылкаВыборРеквизитовЛогиста.Подсказка = "";
		Элементы.ГруппаРеквизитыЛогиста.Видимость = Ложь;
		Элементы.КартинкаЭтапЛогист.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		
	Иначе
		
		Элементы.ГиперссылкаВыборРеквизитовЛогиста.Заголовок = НСтр(
			"ru = 'Укажите данные пользователя для создания учетной записи.';
			|en = 'Specify user data to create an account.'");
		Элементы.ГиперссылкаВыборРеквизитовЛогиста.Подсказка = НСтр(
			"ru = 'Данные будут использованы для создания в сервисе учетной записи логиста.';
			|en = 'Data will be used to create a logistics specialist account in the service.'");
		Элементы.ГруппаРеквизитыЛогиста.Видимость = Истина;
		Элементы.КартинкаЭтапЛогист.Картинка = БиблиотекаКартинок.Этап3СинийБЭД;
		
	КонецЕсли;
	
	ЗапросОтправлен = ОрганизацияЗарегистрирована
		И ПунктВыдачиЗарегистрирован
		И ЛогистЗарегистрирован;
	
	Если ЗапросОтправлен Тогда
		
		Элементы.ГиперссылкаОтправкаЗапроса.Заголовок =
			НСтр("ru = 'Запрос на регистрацию учетной записи отправлен.';
				|en = 'A request to register an account is sent.'");
		Элементы.ДекорацияУточнениеСтатусаЗаявки.Видимость = Ложь;
		Элементы.ГиперссылкаОтправитьЗаявку.Видимость = Ложь;
		Элементы.ГиперссылкаОтправитьЗаявку.Заголовок =
			НСтр("ru = 'Отправить повторный запрос на получение регистрационных данных';
				|en = 'Send a request to get registration data again.'");
		Элементы.КартинкаЭтапЗапрос.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		
	Иначе
		
		Элементы.ГиперссылкаОтправкаЗапроса.Заголовок =
			НСтр("ru = 'Отправьте запрос на регистрацию учетной записи.';
				|en = 'Send a request to register an account.'");
		Элементы.ДекорацияУточнениеСтатусаЗаявки.Видимость = Истина;
		Элементы.ГиперссылкаОтправитьЗаявку.Видимость = Истина;
		Элементы.ГиперссылкаОтправитьЗаявку.Заголовок =
			НСтр("ru = 'Получить регистрационные данные для подключения к сервису';
				|en = 'Get registration data to connect to the service'");
		Элементы.КартинкаЭтапЗапрос.Картинка = БиблиотекаКартинок.Этап4СинийБЭД;
		
	КонецЕсли;
	
	Если Авторизован Тогда
		
		Элементы.КартинкаЭтапПодключение.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
		
	Иначе
		
		Элементы.КартинкаЭтапПодключение.Картинка = БиблиотекаКартинок.Этап5СинийБЭД;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатПолученияСостоянияПодключенияОрганизации(АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда

		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);

		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда

			Если Результат.Свойство("СостояниеПодключенияОрганизации") Тогда

				СостояниеПодключения = Результат.СостояниеПодключенияОрганизации;
				ОрганизацияЗарегистрирована = СостояниеПодключения.ОрганизацияЗарегистрирована;
				ПунктВыдачиЗарегистрирован = СостояниеПодключения.ПунктВыдачиЗарегистрирован;
				ЛогистЗарегистрирован = СостояниеПодключения.ЛогистЗарегистрирован;

			КонецЕсли;

			Если Результат.Свойство("Ошибки") И ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда

				Для Каждого ТекстОшибки Из Результат.Ошибки Цикл
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				КонецЦикла;

			КонецЕсли;

			УстановитьОформлениеПунктовМенюКурьерика(СостояниеПодключения);

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатПолученияНастроекАвторизации(АдресРезультата)
	
	ОперацияВыполнена = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Результат.Свойство("Авторизован", Авторизован);
			Результат.Свойство("ТипАвторизации", ТипАвторизации);
			ПравоДоступа = "";
			Элементы.ПравоДоступа.СписокВыбора.Очистить();
			Для Каждого Элемент Из Результат.ПраваДоступа Цикл
				ПравоДоступа = Элемент;
				Элементы.ПравоДоступа.СписокВыбора.Добавить(ПравоДоступа);
			КонецЦикла;
			
			ОперацияВыполнена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		ЗаполнитьАвторизациюПоТипу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвторизациюПоТипу()

	Элементы.Изменить.Видимость = Авторизован;
	Элементы.Закрыть.КнопкаПоУмолчанию = Авторизован;
	Элементы.Подключить.Видимость = Не Авторизован;
	Элементы.Подключить.КнопкаПоУмолчанию = Не Авторизован;
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		
		Если ТипАвторизации = "basic" Тогда
			
			Элементы.ДекорацияНекорректныеДанныеАвторизацииМастер.Видимость = Не Авторизован;
			
			Если Авторизован Тогда
				
				Логин = БезопаснаяМаска();
				Пароль = БезопаснаяМаска();
				
			ИначеЕсли Логин = БезопаснаяМаска() Тогда
				
				Логин = "";
				Пароль = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаАвторизация.ТолькоПросмотр = Авторизован;
		Элементы.ГруппаПравоДоступа.Видимость = ?(Элементы.ПравоДоступа.СписокВыбора.Количество() > 0, Истина, Ложь);
		
		ВидимостьГруппаЛогинИПароль = Элементы.ГруппаЛогинИПароль.Видимость;
		ВидимостьГруппаТокен = Элементы.ГруппаТокен.Видимость;
		
		Если ТипАвторизации = "basic" Тогда
			
			ВидимостьГруппаЛогинИПароль = Истина;
			ВидимостьГруппаТокен = Ложь;
			Элементы.ДекорацияНекорректныеДанныеАвторизации.Видимость = (Не Авторизован И Логин <> "");
			
			Если Авторизован Тогда
				
				Логин = БезопаснаяМаска();
				Пароль = БезопаснаяМаска();
				
			ИначеЕсли Логин = БезопаснаяМаска() Тогда
				
				Логин = "";
				Пароль = "";
				
			КонецЕсли;
			
		ИначеЕсли ТипАвторизации = "token" Тогда
			
			ВидимостьГруппаЛогинИПароль = Ложь;
			ВидимостьГруппаТокен = Истина;
			Элементы.ДекорацияНекорректныеДанныеАвторизации.Видимость = (Не Авторизован И Токен <> "");
			
			Если Авторизован Тогда
				Токен = БезопаснаяМаска();
			ИначеЕсли Токен = БезопаснаяМаска() Тогда
				Токен = "";
			КонецЕсли;
			
		Иначе
			
			ВидимостьГруппаЛогинИПароль = Ложь;
			ВидимостьГруппаТокен = Ложь;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаЛогинИПароль",
			"Видимость",
			ВидимостьГруппаЛогинИПароль);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаТокен",
			"Видимость",
			ВидимостьГруппаТокен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатЗаписиНастроекАвторизации(АдресРезультата)
	
	ОперацияВыполнена = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Записано") Тогда
				ОперацияВыполнена = Истина
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		Модифицированность = Ложь;
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьНастройкиАвторизации();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Обновление настроек авторизации.';
														|en = 'Updating authorization settings.'");
		ВыполнитьЗапрос(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция БезопаснаяМаска()
	
	Возврат "**********";
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоТипуГрузоперевозки()
	
	Заголовок = СтрШаблон(НСтр("ru = '%1: Параметры авторизации';
								|en = '%1: Authorization parameters'"),
		СервисДоставкиКлиентСервер.ПредставлениеТипаГрузоперевозки(ТипГрузоперевозки));
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		Элементы.ГруппаУпрощенная.Видимость = Ложь;
		Элементы.ГруппаМастер.Видимость = Истина;
	Иначе
		Элементы.ГруппаУпрощенная.Видимость = Истина;
		Элементы.ГруппаМастер.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуфер(Текст)
	
	#Если Клиент Тогда
		
		ОбъектКопирование = Новый COMОбъект("htmlfile"); 
		ОбъектКопирование.ParentWindow.ClipboardData.Setdata("Text", Текст);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеАдреса(Ссылка)
	
	Результат = "";
	
	ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Ссылка,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	Если ТипЗнч(ЗначениеКонтактнойИнформации) = Тип("Строка") Тогда
		Результат = ЗначениеКонтактнойИнформации;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеАдресаЭлектроннойПочты(Ссылка)
	
	Результат = "";
	
	ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Ссылка,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Если ТипЗнч(ЗначениеКонтактнойИнформации) = Тип("Строка") Тогда
		Результат = ЗначениеКонтактнойИнформации;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеТелефона(Ссылка)
	
	Результат = "";
	
	ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Ссылка,
		Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	Если ТипЗнч(ЗначениеКонтактнойИнформации) = Тип("Строка") Тогда
		Результат = ЗначениеКонтактнойИнформации;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
