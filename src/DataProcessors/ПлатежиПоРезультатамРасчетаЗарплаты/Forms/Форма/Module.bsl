
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначенияДляЗаполнения = Новый Структура("Организация, Месяц", "Объект.Организация", "Объект.МесяцНачисления");
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
	ОрганизацияПрежняя = Объект.Организация;
	
	ДатаЗавершенияУчетаПеречисленногоНалога = УчетНДФЛ.ДатаЗавершенияУчетаПеречисленногоНалога();
	
	Объект.ДатаАктуальностиНДФЛ = ТекущаяДатаСеанса();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	ИспользоватьВзаиморасчетыПоПрочимДоходам = ПолучитьФункциональнуюОпцию("ИспользоватьВзаиморасчетыПоПрочимДоходам");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ВестиРасчетыСБюджетомПоНДФЛ = ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ")
		И Объект.МесяцНачисления < ДатаЗавершенияУчетаПеречисленногоНалога;
	
	ИмяФормыОтчетаРасчетыСБюджетомПоНДФЛ = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		ИмяФормыОтчетаРасчетыСБюджетомПоНДФЛ = Модуль.ИмяФормыОтчетаРасчетыСБюджетомПоНДФЛ();
	КонецЕсли;
	
	ОбновитьФормуПоНастройкам();
	ОбновитьНаСервере();
	
	ВывестиКомандыПечати();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ОрганизацияПрежняя <> Объект.Организация Тогда
		ОрганизацияПрежняя = Объект.Организация;
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	МесяцНачисленияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	
	ПодключитьОбработчикОжидания("МесяцНачисленияПриИзмененииНаКлиенте", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление);
	ПодключитьОбработчикОжидания("МесяцНачисленияПриИзмененииНаКлиенте", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуальностиНДФЛПриИзменении(Элемент)
	
	ДатаАктуальностиНДФЛПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуальностиНДФЛРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ДатаАктуальностиНДФЛ = Объект.ДатаАктуальностиНДФЛ + Направление * 86400;
	ПодключитьОбработчикОжидания("ДатаАктуальностиНДФЛПриИзмененииНаКлиенте", 0.2, Истина);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура ВедомостиПриИзменении(Элемент)
	
	ВедомостиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостиПрочиеДоходыПриИзменении(Элемент)
	
	ВедомостиПрочиеДоходыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКВыплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьДокументОснование(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыКВыплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьДокументОснование(Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	Элементы.Ведомости.Обновить();
	Если ИспользоватьВзаиморасчетыПоПрочимДоходам Тогда
		Элементы.ВедомостиПрочиеДоходы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКВыплатеПодробноДокументы(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"ЗарплатаКВыплатеПодробноДокументы",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗарплатаКВыплатеПодробноДокументы",
		"Пометка",
		Подробно);
	
	ОбновитьЗарплатаКВыплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКВыплатеПодробноФинансирование(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"ЗарплатаКВыплатеПодробноФинансирование",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗарплатаКВыплатеПодробноФинансирование",
		"Пометка",
		Подробно);
		
		ОбновитьЗарплатаКВыплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыКВыплатеПодробноДокументы(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"ПрочиеДоходыКВыплатеПодробноДокументы",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПрочиеДоходыКВыплатеПодробноДокументы",
		"Пометка",
		Подробно);
	
	ОбновитьПрочиеДоходыКВыплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыКВыплатеПодробноФинансирование(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"ПрочиеДоходыКВыплатеПодробноФинансирование",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПрочиеДоходыКВыплатеПодробноФинансирование",
		"Пометка",
		Подробно);
	
	ОбновитьПрочиеДоходыКВыплате();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховыеВзносыПодробноФинансирование(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"СтраховыеВзносыПодробноФинансирование",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраховыеВзносыПодробноФинансирование",
		"Пометка",
		Подробно);
	
	ОбновитьСтраховыеВзносы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПоСтрахованиюПодробноФинансирование(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"РасходыПоСтрахованиюПодробноФинансирование",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасходыПоСтрахованиюПодробноФинансирование",
		"Пометка",
		Подробно);
	
	ОбновитьРасходыПоСтрахованию();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛКУплатеПодробноФинансирование(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"НДФЛКУплатеПодробноФинансирование",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НДФЛКУплатеПодробноФинансирование",
		"Пометка",
		Подробно);
	
	ОбновитьНДФЛКУплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьРасчетовПоНДФЛ(Команда)
	
	СформироватьОтчетВедомостьРасчетовПоНДФЛ("РасчетыСБюджетомПоНДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьРасчетовПоНДФЛПоИсточникам(Команда)
	
	Если РаботаВБюджетномУчреждении Тогда
		КлючВарианта = "РасчетыСБюджетомПоНДФЛПоИсточникам";
	Иначе
		КлючВарианта = "РасчетыСБюджетомПоНДФЛПоСтатьям";
	КонецЕсли;

	СформироватьОтчетВедомостьРасчетовПоНДФЛ(КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанныйНДФЛ(Команда)
	
	СформироватьОтчетУдержанныйНДФЛ("УдержанныйНДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанныйНДФЛПоИсточникам(Команда)
	
	Если РаботаВБюджетномУчреждении Тогда
		КлючВарианта = "УдержанныйНДФЛПоИсточникам";
	Иначе
		КлючВарианта = "УдержанныйНДФЛПоСтатьям";
	КонецЕсли;

	СформироватьОтчетУдержанныйНДФЛ(КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПоИДПодробноФинансирование(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"УдержанияПоИДПодробноФинансирование",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УдержанияПоИДПодробноФинансирование",
		"Пометка",
		Подробно);
	
	ОбновитьУдержанияПоИсполнительнымДокументам();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВПользуТретьихЛицПодробноФинансирование(Команда)
	
	Подробно = Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Элементы,
		"УдержанияВПользуТретьихЛицПодробноФинансирование",
		"Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УдержанияВПользуТретьихЛицПодробноФинансирование",
		"Пометка",
		Подробно);
	
	ОбновитьУдержанияВПользуТретьихЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Напечатать(Команда)
	
	ИмяМенеджераПечати = "Обработка.ПлатежиПоРезультатамРасчетаЗарплаты";
	
	ПоказыватьФинансирование = ВРег(Команда.Имя) = ВРег("ПФ_MXL_СписокПлатежей_ПоИсточникам");
	ПараметрыПечатиОтчета = ПараметрыПечати(ПоказыватьФинансирование);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати, Команда.Имя, Объект.Организации[0], ЭтотОбъект, ПараметрыПечатиОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьДокументОснование(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ДокументОснование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(,ТекущиеДанные.ДокументОснование);	

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьВидимостьКолонкиОрганизацияВСписках();
	УстановитьОтборыДинамическихСписковПоОрганизации();
	ОбновитьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияПриИзмененииНаКлиенте()

	МесяцНачисленияПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура МесяцНачисленияПриИзмененииНаСервере()
	
	ВестиРасчетыСБюджетомПоНДФЛ = ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ")
		И Объект.МесяцНачисления < ДатаЗавершенияУчетаПеречисленногоНалога;
	
	УстановитьОтборыДинамическихСписковПоПериоду();
	// Обновим дату актуальности НДФЛ.
	Объект.ДатаАктуальностиНДФЛ = НачалоМесяца(Объект.МесяцНачисления);
	ОбновитьФормуПоНастройкам();
	ОбновитьНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоНастройкам()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПрочиеДоходыГруппа",
		"Видимость",
		ИспользоватьВзаиморасчетыПоПрочимДоходам);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогКУплатеГруппа",
		"Видимость",
		Не ВестиРасчетыСБюджетомПоНДФЛ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогОстаткиОборотыГруппа",
		"Видимость",
		ВестиРасчетыСБюджетомПоНДФЛ);
		
	ПоказыватьВсеОтчеты = ИспользоватьСтатьиФинансирования И ВестиРасчетыСБюджетомПоНДФЛ;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВсеОтчеты",
		"Видимость",
		ПоказыватьВсеОтчеты);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтчеты",
		"Видимость",
		Не ПоказыватьВсеОтчеты);
		
	УстановитьВидимостьКолонкиОрганизацияВСписках();
	УстановитьОтборыДинамическихСписковПоОрганизации();
	УстановитьОтборыДинамическихСписковПоПериоду();
	УстановитьУсловноеОформлениеСписков();
	ОбновитьЗаголовкиГруппНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонкиОрганизацияВСписках()

	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Ведомости");
	ИменаТаблиц.Добавить("ВедомостиПрочиеДоходы");
	ИменаТаблиц.Добавить("ЗарплатаКВыплате");
	ИменаТаблиц.Добавить("ПрочиеДоходыКВыплате");
	ИменаТаблиц.Добавить("РасходыПоСтрахованию");
	ИменаТаблиц.Добавить("СтраховыеВзносы");
	ИменаТаблиц.Добавить("НДФЛКУплате");
	ИменаТаблиц.Добавить("НДФЛОбязательства");
	ИменаТаблиц.Добавить("НДФЛОбязательстваДетально");
	ИменаТаблиц.Добавить("НДФЛОстатки");
	ИменаТаблиц.Добавить("УдержанияПоИД");
	ИменаТаблиц.Добавить("УдержанияВПользуТретьихЛиц");
	
	ПоказыватьКолонку = Не ЗначениеЗаполнено(Объект.Организация);
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяТаблицы + "Организация",
			"Видимость",
			ПоказыватьКолонку);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическихСписковПоОрганизации()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Ведомости,
			"Организация",
			Объект.Организация,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(Объект.Организация),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	Если ИспользоватьВзаиморасчетыПоПрочимДоходам Тогда
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ВедомостиПрочиеДоходы,
				"Организация",
				Объект.Организация,
				ВидСравненияКомпоновкиДанных.Равно,
				,
				ЗначениеЗаполнено(Объект.Организация),
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическихСписковПоПериоду()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Ведомости,
			"ПериодРегистрации",
			Объект.МесяцНачисления,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(Объект.МесяцНачисления),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	Если ИспользоватьВзаиморасчетыПоПрочимДоходам Тогда
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ВедомостиПрочиеДоходы,
				"ПериодРегистрации",
				Объект.МесяцНачисления,
				ВидСравненияКомпоновкиДанных.Равно,
				,
				ЗначениеЗаполнено(Объект.МесяцНачисления),
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписков()

	// Таблица Ведомости
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ведомости.Проведен");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить(); 
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Ведомости");
	
	Если ИспользоватьВзаиморасчетыПоПрочимДоходам Тогда
		// Таблица ВедомостиПрочиеДоходы
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		// Вид оформления
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		// Условие для оформления
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедомостиПрочиеДоходы.Проведен");
		ЭлементОтбора.ПравоеЗначение = Ложь;
		// Оформляемое поле
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить(); 
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВедомостиПрочиеДоходы");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанные()
	
	Объект.ЗарплатаКВыплате.Очистить();
	Объект.ПрочиеДоходыКВыплате.Очистить();
	Объект.СтраховыеВзносы.Очистить();
	Объект.РасходыПоСтрахованию.Очистить();
	Объект.НДФЛКУплате.Очистить();
	Объект.УдержанияПоИсполнительнымДокументам.Очистить();
	Объект.ИсполнительныеДокументы.Очистить();
	Объект.УдержанияВПользуТретьихЛиц.Очистить();
	Объект.НДФЛОстатки.Очистить();
	Объект.НДФЛОбороты.Очистить();
	
	ЗарплатаКВыплате.Очистить();
	ПрочиеДоходыКВыплате.Очистить();
	СтраховыеВзносы.Очистить();
	РасходыПоСтрахованию.Очистить();
	НДФЛКУплате.Очистить();
	НДФЛОбязательства.Очистить();
	НДФЛОстатки.Очистить();
	НДФЛОбязательстваДетально.Очистить();
	УдержанияПоИсполнительнымДокументам.Очистить();
	УдержанияВПользуТретьихЛиц.Очистить();
	
	ИтогЗарплатаКВыплате = 0;
	ИтогПрочиеДоходыКВыплате = 0;
	ИтогСтраховыеВзносы = 0;
	ИтогРасходыПоСтрахованию = 0;
	ИтогНДФЛКУплате = 0;
	ИтогНДФЛКУплатеСПревышения = 0;
	ИтогНДФЛОбязательства = 0;
	ИтогНДФЛОбязательстваДетально = 0;
	ИтогНДФЛОбязательстваСПревышения = 0;
	ИтогНДФЛОбязательстваДетальноСПревышения = 0;
	ИтогНДФЛПереплата = 0;
	ИтогНДФЛПросрочено = 0;
	ИтогНДФЛПереплатаСПревышения = 0;
	ИтогНДФЛПросроченоСПревышения = 0;
	ИтогУдержанияПоИД = 0;
	ИтогУдержанияПоИДВознаграждениеАгента = 0;
	ИтогУдержанияВПользуТретьихЛиц = 0;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере(ОбновляемыеДанные = Неопределено)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтрокаСообщения = ОбработкаОбъект.ПрочитатьДанныеДляФормы(ОбновляемыеДанные);
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		ОчиститьДанные();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если ОбновляемыеДанные = Неопределено Или СтрНайти(ОбновляемыеДанные, "ЗарплатаКВыплате") > 0 Тогда
		ОбновитьЗарплатаКВыплате();
	КонецЕсли;
	
	Если ОбновляемыеДанные = Неопределено Или СтрНайти(ОбновляемыеДанные, "ПрочиеДоходыКВыплате") > 0 Тогда
		ОбновитьПрочиеДоходыКВыплате();
	КонецЕсли;
	
	Если ОбновляемыеДанные = Неопределено Или СтрНайти(ОбновляемыеДанные, "НДФЛ") > 0 Тогда
		ОбновитьНДФЛКУплате();
		ОбновитьНДФЛОбязательства();
	КонецЕсли;
	
	Если ОбновляемыеДанные = Неопределено Тогда
		ОбновитьСтраховыеВзносы();
		ОбновитьРасходыПоСтрахованию();
		ОбновитьУдержанияПоИсполнительнымДокументам();
		ОбновитьУдержанияВПользуТретьихЛиц();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗарплатаКВыплате()
	
	ЗарплатаКВыплате.Очистить();
	ИтогЗарплатаКВыплате = 0;
	
	ПоляСортировки  = "ПериодВзаиморасчетов";
	ПоляГруппировки = "ПериодВзаиморасчетов";
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоляГруппировки = ПоляГруппировки + ",Организация";
		ПоляСортировки  = ПоляСортировки + ",Организация";
	КонецЕсли;
	
	Если Элементы.ЗарплатаКВыплатеПодробноДокументы.Пометка Тогда
		ПоляГруппировки = ПоляГруппировки + ",ДокументОснование";
		ПоляСортировки  = ПоляСортировки + ",ДокументОснование";
	КонецЕсли;
	
	Если Элементы.ЗарплатаКВыплатеПодробноФинансирование.Пометка Тогда
		Если ИспользоватьСтатьиФинансирования Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяФинансирования";
			ПоляСортировки  = ПоляСортировки + ",СтатьяФинансирования";
		КонецЕсли;
		Если РаботаВБюджетномУчреждении Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяРасходов";
			ПоляСортировки  = ПоляСортировки + ",СтатьяРасходов";
		КонецЕсли;
	КонецЕсли;
	
	ОстаткиЗарплатаКВыплате = Объект.ЗарплатаКВыплате.Выгрузить();
	ОстаткиЗарплатаКВыплате.Свернуть(ПоляГруппировки, "Сумма");
	ОстаткиЗарплатаКВыплате.Сортировать(ПоляСортировки);

	Для Каждого СтрокаТЗ Из ОстаткиЗарплатаКВыплате Цикл
		НоваяСтрока = ЗарплатаКВыплате.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	ИтогЗарплатаКВыплате = ЗарплатаКВыплате.Итог("Сумма");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗарплатаКВыплатеДокументОснование",
		"Видимость",
		Элементы.ЗарплатаКВыплатеПодробноДокументы.Пометка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗарплатаКВыплатеФинансирование",
		"Видимость",
		Элементы.ЗарплатаКВыплатеПодробноФинансирование.Пометка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьПрочиеДоходыКВыплате()

	ПрочиеДоходыКВыплате.Очистить();
	ИтогПрочиеДоходыКВыплате = 0;
	
	ПоляСортировки  = "ПериодВзаиморасчетов";
	ПоляГруппировки = "ПериодВзаиморасчетов";
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоляГруппировки = ПоляГруппировки + ",Организация";
		ПоляСортировки  = ПоляСортировки + ",Организация";
	КонецЕсли;
	
	Если Элементы.ПрочиеДоходыКВыплатеПодробноДокументы.Пометка Тогда
		ПоляГруппировки = ПоляГруппировки + ",ДокументОснование";
		ПоляСортировки  = ПоляСортировки + ",ДокументОснование";
	КонецЕсли;
	
	Если Элементы.ПрочиеДоходыКВыплатеПодробноФинансирование.Пометка Тогда
		Если ИспользоватьСтатьиФинансирования Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяФинансирования";
			ПоляСортировки  = ПоляСортировки + ",СтатьяФинансирования";
		КонецЕсли;
		Если РаботаВБюджетномУчреждении Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяРасходов";
			ПоляСортировки  = ПоляСортировки + ",СтатьяРасходов";
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаВыплат = Объект.ПрочиеДоходыКВыплате.Выгрузить();
	ТаблицаВыплат.Свернуть(ПоляГруппировки, "Сумма");
	ТаблицаВыплат.Сортировать(ПоляСортировки);

	Для Каждого СтрокаТЗ Из ТаблицаВыплат Цикл
		НоваяСтрока = ПрочиеДоходыКВыплате.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	ИтогПрочиеДоходыКВыплате = ПрочиеДоходыКВыплате.Итог("Сумма");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПрочиеДоходыКВыплатеДокументОснование",
		"Видимость",
		Элементы.ПрочиеДоходыКВыплатеПодробноДокументы.Пометка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПрочиеДоходыКВыплатеФинансирование",
		"Видимость",
		Элементы.ПрочиеДоходыКВыплатеПодробноФинансирование.Пометка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраховыеВзносы()

	СтраховыеВзносы.Очистить();
	ИтогСтраховыеВзносы = 0;
	
	ПоказыватьФинансирование = Элементы.СтраховыеВзносыПодробноФинансирование.Пометка;
	ТаблицаВзносов = ТаблицаСтраховыеВзносы(ПоказыватьФинансирование);
	
	Для Каждого СтрокаТЗ Из ТаблицаВзносов Цикл
		НоваяСтрока = СтраховыеВзносы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	ИтогСтраховыеВзносы = СтраховыеВзносы.Итог("Сумма");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраховыеВзносыФинансирование",
		"Видимость",
		ПоказыватьФинансирование);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаСтраховыеВзносы(ПоказыватьФинансирование)
	
	ПоляГруппировки = "Организация,ВидОперации";
	ПоляСортировки  = "Организация,ВидОперации";
	
	Если ПоказыватьФинансирование Тогда
		Если ИспользоватьСтатьиФинансирования Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяФинансирования";
			ПоляСортировки  = ПоляСортировки + ",СтатьяФинансирования";
		КонецЕсли;
		Если РаботаВБюджетномУчреждении Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяРасходов";
			ПоляСортировки  = ПоляСортировки + ",СтатьяРасходов";
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаВзносов = Объект.СтраховыеВзносы.Выгрузить();
	ТаблицаВзносов.Свернуть(ПоляГруппировки, "Сумма");
	ТаблицаВзносов.Сортировать(ПоляСортировки);
	
	Возврат ТаблицаВзносов;
	
КонецФункции

&НаСервере
Процедура ОбновитьРасходыПоСтрахованию()

	РасходыПоСтрахованию.Очистить();
	ИтогРасходыПоСтрахованию = 0;
	
	ПоказыватьФинансирование = Элементы.РасходыПоСтрахованиюПодробноФинансирование.Пометка;
	ТаблицаРасходыПоСтрахованию = ТаблицаРасходыПоСтрахованию(ПоказыватьФинансирование);
	
	Для Каждого СтрокаТЗ Из ТаблицаРасходыПоСтрахованию Цикл
		НоваяСтрока = РасходыПоСтрахованию.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	ИтогРасходыПоСтрахованию = РасходыПоСтрахованию.Итог("Сумма");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасходыПоСтрахованиюФинансирование",
		"Видимость",
		ПоказыватьФинансирование);

КонецПроцедуры

&НаСервере
Функция ТаблицаРасходыПоСтрахованию(ПоказыватьФинансирование)
	
	ПоляГруппировки = "Организация,ВидОперации";
	ПоляСортировки = "Организация,ВидОперации";
	
	Если ПоказыватьФинансирование Тогда
		Если ИспользоватьСтатьиФинансирования Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяФинансирования";
			ПоляСортировки  = ПоляСортировки + ",СтатьяФинансирования";
		КонецЕсли;
		Если РаботаВБюджетномУчреждении Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяРасходов";
			ПоляСортировки  = ПоляСортировки + ",СтатьяРасходов";
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРасходыПоСтрахованию = Объект.РасходыПоСтрахованию.Выгрузить();
	ТаблицаРасходыПоСтрахованию.Свернуть(ПоляГруппировки, "Сумма");
	ТаблицаРасходыПоСтрахованию.Сортировать(ПоляСортировки);

	Возврат ТаблицаРасходыПоСтрахованию;
	
КонецФункции

&НаСервере
Процедура ОбновитьНДФЛКУплате()
	
	НДФЛКУплате.Очистить();
	ИтогНДФЛКУплате = 0;
	ИтогНДФЛКУплатеСПревышения = 0;
	
	ПоказыватьФинансирование = Элементы.НДФЛКУплатеПодробноФинансирование.Пометка;
	ТаблицаНДФЛ = ТаблицаНалогКУплате(ПоказыватьФинансирование);
	
	Для Каждого СтрокаТЗ Из ТаблицаНДФЛ Цикл
		НоваяСтрока = НДФЛКУплате.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве();
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ЭтотОбъект[СтрЗаменить(ИмяРесурса,"Сумма","ИтогНДФЛКУплате")] = НДФЛКУплате.Итог(ИмяРесурса)
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НДФЛКУплатеФинансирование",
		"Видимость",
		ПоказыватьФинансирование);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаНалогКУплате(ПоказыватьФинансирование)

	ПоляГруппировки = "КрайнийСрокУплаты,Организация,РегистрацияВНалоговомОргане";
	ПоляСортировки = "КрайнийСрокУплаты,Организация,РегистрацияВНалоговомОргане";
	
	Если ПоказыватьФинансирование Тогда
		Если ИспользоватьСтатьиФинансирования Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяФинансирования";
			ПоляСортировки  = ПоляСортировки + ",СтатьяФинансирования";
		КонецЕсли;
		Если РаботаВБюджетномУчреждении Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяРасходов";
			ПоляСортировки  = ПоляСортировки + ",СтатьяРасходов";
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаНДФЛ = Объект.НДФЛКУплате.Выгрузить();
	ТаблицаНДФЛ.Свернуть(ПоляГруппировки, УчетНДФЛ.РесурсыИсчисленногоНалогаСтрокой());
	ТаблицаНДФЛ.Сортировать(ПоляСортировки);
	
	Возврат ТаблицаНДФЛ;

КонецФункции

&НаСервере
Процедура ОбновитьНДФЛОбязательства()
	
	НДФЛОстатки.Очистить();
	ИтогНДФЛПросрочено = 0;
	ИтогНДФЛПереплата = 0;
	ИтогНДФЛПросроченоСПревышения = 0;
	ИтогНДФЛПереплатаСПревышения = 0;
	
	НДФЛОбязательства.Очистить();
	ИтогНДФЛОбязательства = 0;
	ИтогНДФЛОбязательстваСПревышения = 0;
	
	НакопленныеОбязательства = Объект.НДФЛОбороты.Выгрузить();
	
	Для Каждого СтрокаТЗ Из Объект.НДФЛОстатки Цикл
		НоваяСтрока = НДФЛОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		Если СтрокаТЗ.Сумма > 0 Тогда
			НоваяСтрока.Просрочено = СтрокаТЗ.Сумма;
		ИначеЕсли СтрокаТЗ.Сумма < 0 Тогда
			НоваяСтрока.Переплата = -СтрокаТЗ.Сумма;
		КонецЕсли;
		Если СтрокаТЗ.СуммаСПревышения > 0 Тогда
			НоваяСтрока.ПросроченоСПревышения = СтрокаТЗ.СуммаСПревышения;
		ИначеЕсли СтрокаТЗ.СуммаСПревышения < 0 Тогда
			НоваяСтрока.ПереплатаСПревышения = -СтрокаТЗ.СуммаСПревышения;
		КонецЕсли;
		
		Если СтрокаТЗ.Сумма <> 0 Или СтрокаТЗ.СуммаСПревышения <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НакопленныеОбязательства.Добавить(), СтрокаТЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	НДФЛОстатки.Сортировать("Организация,РегистрацияВНалоговомОргане");
	
	ИтогНДФЛПросрочено = НДФЛОстатки.Итог("Просрочено");
	ИтогНДФЛПереплата  = НДФЛОстатки.Итог("Переплата");
	ИтогНДФЛПросроченоСПревышения = НДФЛОстатки.Итог("ПросроченоСПревышения");
	ИтогНДФЛПереплатаСПревышения  = НДФЛОстатки.Итог("ПереплатаСПревышения");

	НакопленныеОбязательства.Свернуть("Организация,РегистрацияВНалоговомОргане","Сумма,СуммаСПревышения");
	УдалитьНулевыеСуммы(НакопленныеОбязательства);
	НакопленныеОбязательства.Сортировать("Организация,РегистрацияВНалоговомОргане");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НакопленныеОбязательства, НДФЛОбязательства);
	ИтогНДФЛОбязательства = НДФЛОбязательства.Итог("Сумма");
	ИтогНДФЛОбязательстваСПревышения = НДФЛОбязательства.Итог("СуммаСПревышения");
	
	НДФЛОбязательстваДетально.Очистить();
	ИтогНДФЛОбязательстваДетально = 0;
	ИтогНДФЛОбязательстваДетальноСПревышения = 0;
	
	Отбор = Новый Структура("Организация");
	ОтборДетально = Новый Структура("Организация,РегистрацияВНалоговомОргане");
	
	ОбязательстваДетально = Объект.НДФЛОбороты.Выгрузить();
	ОбязательстваДетально.Очистить();
	       
	Для Каждого Организация Из Объект.Организации Цикл
	
		Отбор.Организация = Организация;
		
		НайденныеСтроки = Объект.НДФЛОстатки.НайтиСтроки(Отбор);
		РегистрацииНО = Новый Массив;
		Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
			РегистрацииНО.Добавить(СтрокаТЗ.РегистрацияВНалоговомОргане);
		КонецЦикла;
		
		НайденныеСтроки   = Объект.НДФЛОбороты.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
			РегистрацииНО.Добавить(СтрокаТЗ.РегистрацияВНалоговомОргане);
		КонецЦикла;
		
		РегистрацииНО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РегистрацииНО);
		
		Для Каждого РегистрацияНО Из РегистрацииНО Цикл
		
			ОтборДетально.Организация = Организация;
			ОтборДетально.РегистрацияВНалоговомОргане = РегистрацияНО;
			
			СтрокиОстатки = Объект.НДФЛОстатки.НайтиСтроки(ОтборДетально);
			НачальныйОстаток = 0;
			НачальныйОстатокСПревышения = 0;
			Если СтрокиОстатки.Количество() > 0 Тогда
				НачальныйОстаток = СтрокиОстатки[0].Сумма;
				НачальныйОстатокСПревышения = СтрокиОстатки[0].СуммаСПревышения;
			КонецЕсли;
			
			СтрокиОбороты = Объект.НДФЛОбороты.Выгрузить(ОтборДетально);
			СтрокиОбороты.Сортировать("Дата Возр");
			НакопленоУплаты = ?(НачальныйОстаток < 0, -НачальныйОстаток, 0);
			НакопленоУплатыСПревышения = ?(НачальныйОстатокСПревышения < 0, -НачальныйОстатокСПревышения, 0);
			Для Каждого СтрокаТЗ Из СтрокиОбороты Цикл
			
				Если СтрокаТЗ.Приход = 0 Тогда
					НакопленоУплаты = НакопленоУплаты + СтрокаТЗ.Расход;
				Иначе
					ТекущееСальдо = СтрокаТЗ.Приход - НакопленоУплаты - СтрокаТЗ.Расход;
					Если ТекущееСальдо > 0 Тогда
						НоваяСтрока = ОбязательстваДетально.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,"Сумма,СуммаСПревышения");
						НоваяСтрока.Сумма = ТекущееСальдо;
						НакопленоУплаты = 0;
					Иначе
						НакопленоУплаты = -ТекущееСальдо;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТЗ.ПриходСПревышения = 0 Тогда
					НакопленоУплатыСПревышения = НакопленоУплатыСПревышения + СтрокаТЗ.РасходСПревышения;
				Иначе
					ТекущееСальдо = СтрокаТЗ.ПриходСПревышения - НакопленоУплатыСПревышения - СтрокаТЗ.РасходСПревышения;
					Если ТекущееСальдо > 0 Тогда
						НоваяСтрока = ОбязательстваДетально.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,"Сумма,СуммаСПревышения");
						НоваяСтрока.СуммаСПревышения = ТекущееСальдо;
						НакопленоУплатыСПревышения = 0;
					Иначе
						НакопленоУплатыСПревышения = -ТекущееСальдо;
					КонецЕсли;
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;
	
	КонецЦикла;
	
	ОбязательстваДетально.Свернуть("Дата,Организация,РегистрацияВНалоговомОргане","Сумма,СуммаСПревышения");
	УдалитьНулевыеСуммы(ОбязательстваДетально);
	ОбязательстваДетально.Сортировать("Организация,Дата Возр,РегистрацияВНалоговомОргане");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОбязательстваДетально, НДФЛОбязательстваДетально);
	ИтогНДФЛОбязательстваДетально = НДФЛОбязательстваДетально.Итог("Сумма");
	ИтогНДФЛОбязательстваДетальноСПревышения = НДФЛОбязательстваДетально.Итог("СуммаСПревышения");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУдержанияПоИсполнительнымДокументам()

	УдержанияПоИсполнительнымДокументам.Очистить();
	ИтогУдержанияПоИД = 0;
	ИтогУдержанияПоИДВознаграждениеАгента = 0;
	
	ДетальноПоФинансированию = Элементы.УдержанияПоИДПодробноФинансирование.Пометка;
	ТаблицаУдержанияПоИсполнительнымДокументам = ТаблицаУдержанияПоИсполнительнымДокументам(ДетальноПоФинансированию);
	Для Каждого СтрокаТЗ Из ТаблицаУдержанияПоИсполнительнымДокументам Цикл
		ЗаполнитьЗначенияСвойств(УдержанияПоИсполнительнымДокументам.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	ИтогУдержанияПоИД = УдержанияПоИсполнительнымДокументам.Итог("Сумма");
	ИтогУдержанияПоИДВознаграждениеАгента = УдержанияПоИсполнительнымДокументам.Итог("ВознаграждениеАгента");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УдержанияПоИДФинансирование",
		"Видимость",
		ДетальноПоФинансированию);

КонецПроцедуры

&НаСервере
Функция ТаблицаУдержанияПоИсполнительнымДокументам(ДетальноПоФинансированию)
	
	ВыходнаяТаблица = УдержанияПоИсполнительнымДокументам.Выгрузить();
	ВыходнаяТаблица.Очистить();
	
	ПоляГруппировки = "Организация";
	ПоляСортировки = "Организация";
	
	ПоляФинансирование = "";
	Если ДетальноПоФинансированию Тогда
		Если ИспользоватьСтатьиФинансирования Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяФинансирования";
			ПоляСортировки  = ПоляСортировки + ",СтатьяФинансирования";
			ПоляФинансирование = "СтатьяФинансирования";
		КонецЕсли;
		Если РаботаВБюджетномУчреждении Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяРасходов";
			ПоляСортировки  = ПоляСортировки + ",СтатьяРасходов";
			ПоляФинансирование = ПоляФинансирование + ?(ПустаяСтрока(ПоляФинансирование),"",",") + "СтатьяРасходов";
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПоля = "Получатель,ПлатежныйАгент,БанкПолучателя,СчетПолучателя,ИсполнительныйДокумент";
	ПоляГруппировки = ПоляГруппировки + "," + ДополнительныеПоля;
	ПоляСортировки  = ПоляСортировки + "," + ДополнительныеПоля;
	
	ТаблицаУдержаний = Объект.УдержанияПоИсполнительнымДокументам.Выгрузить();
	ТаблицаУдержаний.Свернуть(ПоляГруппировки, "Сумма,ВознаграждениеАгента");
	ТаблицаУдержаний.Сортировать(ПоляСортировки);
	
	ПоляПолучательАгент = "Получатель,ПлатежныйАгент";
	
	ОтборПоОрганизации 			= Новый Структура("Организация");
	ОтборПоФинансированию 		= Новый Структура(ПоляФинансирование);
	ОтборПоПолучательАгент 		= Новый Структура(ПоляПолучательАгент);
	ОтборИсполнительныйЛист 	= Новый Структура("ИсполнительныйДокумент");
	Для Каждого Организация Из Объект.Организации Цикл
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			УдержанияПоОрганизации = ТаблицаУдержаний.Скопировать();
		Иначе
			ОтборПоОрганизации.Организация = Организация;
			УдержанияПоОрганизации = ТаблицаУдержаний.Скопировать(ОтборПоОрганизации);
		КонецЕсли;
		
		ПолучателиОрганизации = УдержанияПоОрганизации.Скопировать(,ПоляПолучательАгент);
		ПолучателиОрганизации.Свернуть(ПоляПолучательАгент);
		
		Если ПустаяСтрока(ПоляФинансирование) Тогда
			ФинансированиеУдержаний = Новый Массив(1);
		Иначе
			ФинансированиеУдержаний = УдержанияПоОрганизации.Скопировать(,ПоляФинансирование);
			ФинансированиеУдержаний.Свернуть(ПоляФинансирование);
		КонецЕсли;
		
		Для Каждого Финансирование Из ФинансированиеУдержаний Цикл
			
			Если ПустаяСтрока(ПоляФинансирование) Тогда
				УдержанияПоФинансированию = УдержанияПоОрганизации;
			Иначе
				ЗаполнитьЗначенияСвойств(ОтборПоФинансированию, Финансирование);
				УдержанияПоФинансированию = УдержанияПоОрганизации.Скопировать(ОтборПоФинансированию);
			КонецЕсли;
			
			Для Каждого ПолучательАгент Из ПолучателиОрганизации Цикл
				
				ЗаполнитьЗначенияСвойств(ОтборПоПолучательАгент, ПолучательАгент);
				УдержанияПолучателяАгента = УдержанияПоФинансированию.Скопировать(ОтборПоПолучательАгент);
				
				ТекстИсполнительныеЛисты = "";
				Если УдержанияПолучателяАгента.Количество() = 1 Тогда
					ТекстИсполнительныеЛисты = НСтр("ru = 'По документу';
													|en = 'By document'") + " ";
				ИначеЕсли УдержанияПолучателяАгента.Количество() > 1 Тогда
					ТекстИсполнительныеЛисты = НСтр("ru = 'По документам';
													|en = 'By documents'") + " ";
				КонецЕсли;
				
				АдресПолучателя = "";
				СчетПолучателя = "";
				Для Каждого СтрокаУдержания Из УдержанияПолучателяАгента Цикл
					
					СтрокаПодстановки = НСтр("ru = '%1 в %2';
											|en = '%1 in %2'");
					Если СтрДлина(СтрокаУдержания.СчетПолучателя) > 0 Тогда
						СчетПолучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						СтрокаПодстановки, СтрокаУдержания.СчетПолучателя, СтрокаУдержания.БанкПолучателя);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОтборИсполнительныйЛист, СтрокаУдержания);
					ИсполнительныйЛист = Объект.ИсполнительныеДокументы.НайтиСтроки(ОтборИсполнительныйЛист);
					АдресПолучателя = ИсполнительныйЛист[0].АдресПолучателя;
					
					СтрокаПодстановки = НСтр("ru = '№ %1 от %2';
											|en = 'No. %1 from %2'");
					ПредставлениеИсполнительногоЛиста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СтрокаПодстановки, ИсполнительныйЛист[0].Номер, Формат(ИсполнительныйЛист[0].Дата, "ДЛФ=D"));
					
					ТекстИсполнительныеЛисты = ТекстИсполнительныеЛисты + ПредставлениеИсполнительногоЛиста + ", ";
					
				КонецЦикла;
				
				Если УдержанияПолучателяАгента.Количество() >= 1 Тогда
					
					ТекстИсполнительныеЛисты = Лев(ТекстИсполнительныеЛисты, СтрДлина(ТекстИсполнительныеЛисты) - СтрДлина(", "));
					
					УдержанияПолучателяАгента.Свернуть("Получатель,ПлатежныйАгент","Сумма,ВознаграждениеАгента");
					
					НоваяСтрока = ВыходнаяТаблица.Добавить();
					НоваяСтрока.Организация = Организация;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтборПоФинансированию);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, УдержанияПолучателяАгента[0]);
					НоваяСтрока.СчетПолучателя = СчетПолучателя;
					НоваяСтрока.АдресПолучателя = АдресПолучателя;
					НоваяСтрока.ИсполнительныеЛисты = ТекстИсполнительныеЛисты;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВыходнаяТаблица;
	
КонецФункции

&НаСервере
Процедура ОбновитьУдержанияВПользуТретьихЛиц()

	УдержанияВПользуТретьихЛиц.Очистить();
	ИтогУдержанияВПользуТретьихЛиц = 0;
	
	ДетальноПоФинансированию = Элементы.УдержанияВПользуТретьихЛицПодробноФинансирование.Пометка;
	ТаблицаУдержаний = ТаблицаУдержанияВПользуТретьихЛиц(ДетальноПоФинансированию);
	
	Для Каждого СтрокаТЗ Из ТаблицаУдержаний Цикл
		НоваяСтрока = УдержанияВПользуТретьихЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	ИтогУдержанияВПользуТретьихЛиц = УдержанияВПользуТретьихЛиц.Итог("Сумма");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УдержанияВПользуТретьихЛицФинансирование",
		"Видимость",
		ДетальноПоФинансированию);

КонецПроцедуры

&НаСервере
Функция ТаблицаУдержанияВПользуТретьихЛиц(ДетальноПоФинансированию)

	ПоляГруппировки = "Организация";
	ПоляСортировки = "Организация";
	
	Если ДетальноПоФинансированию Тогда
		Если ИспользоватьСтатьиФинансирования Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяФинансирования";
			ПоляСортировки  = ПоляСортировки + ",СтатьяФинансирования";
		КонецЕсли;
		Если РаботаВБюджетномУчреждении Тогда
			ПоляГруппировки = ПоляГруппировки + ",СтатьяРасходов";
			ПоляСортировки  = ПоляСортировки + ",СтатьяРасходов";
		КонецЕсли;
	КонецЕсли;
	
	ПоляГруппировки = ПоляГруппировки + ",Контрагент";
	ПоляСортировки  = ПоляСортировки + ",Контрагент";
	
	ТаблицаУдержаний = Объект.УдержанияВПользуТретьихЛиц.Выгрузить();
	ТаблицаУдержаний.Свернуть(ПоляГруппировки, "Сумма");
	ТаблицаУдержаний.Сортировать(ПоляСортировки);
	
	Возврат ТаблицаУдержаний;

КонецФункции

&НаКлиенте
Процедура ДатаАктуальностиНДФЛПриИзмененииНаКлиенте()
	
	ДатаАктуальностиНДФЛПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаАктуальностиНДФЛПриИзмененииНаСервере()

	Если Не ЗначениеЗаполнено(Объект.ДатаАктуальностиНДФЛ) Тогда
		Объект.ДатаАктуальностиНДФЛ = ТекущаяДатаСеанса();
	КонецЕсли;

	ОбновитьНаСервере("НДФЛ");
	
	ОбновитьЗаголовкиГруппНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиГруппНДФЛ()

	ДатаСтрокой = Формат(Объект.ДатаАктуальностиНДФЛ,"ДЛФ=DD");
	Если ВестиРасчетыСБюджетомПоНДФЛ Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Состояние расчетов на';
								|en = 'Settlements status as of'");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаОстатковНДФЛ",
			"Заголовок",
			ТекстЗаголовка);
		
		СтрокаПодстановки = НСтр("ru = 'Остатки на: %1';
								|en = 'Balance as of: %1'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, ДатаСтрокой);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НалогОстаткиГруппа",
			"Заголовок",
			ТекстЗаголовка);
		
		СтрокаПодстановки = НСтр("ru = 'Сроки платежей после: %1';
								|en = 'Payment terms after: %1'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, ДатаСтрокой);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НалогОбязательстваДетальноГруппа",
			"Заголовок",
			ТекстЗаголовка);
		
	Иначе
			
		ТекстЗаголовка = НСтр("ru = 'Сроки платежей после';
								|en = 'Payment terms after'");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаОстатковНДФЛ",
			"Заголовок",
			ТекстЗаголовка);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВедомостьРасчетовПоНДФЛ",
			"Видимость",
			ВестиРасчетыСБюджетомПоНДФЛ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПодменюВедомостьРасчетов",
			"Видимость",
			ВестиРасчетыСБюджетомПоНДФЛ);
	
	ВидимостьКолонокСПревышения = ДобавитьМесяц(Объект.МесяцНачисления, 1) >= УчетНДФЛ.ДатаЗакона176ФЗ();
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогКУплатеГруппаСПревышения",
		"Видимость",
		ВидимостьКолонокСПревышения);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогКУплатеСуммаСПревышения",
		"Видимость",
		Не ВидимостьКолонокСПревышения);
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетВедомостьРасчетовПоНДФЛ(КлючВарианта)
	
	Если Не ВестиРасчетыСБюджетомПоНДФЛ Или Не ЗначениеЗаполнено(ИмяФормыОтчетаРасчетыСБюджетомПоНДФЛ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	Иначе
		ПараметрыОтбора.Вставить("Организация", Объект.Организации);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
	
	ОткрытьФорму(ИмяФормыОтчетаРасчетыСБюджетомПоНДФЛ, ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетУдержанныйНДФЛ(КлючВарианта)
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	Иначе
		ПараметрыОтбора.Вставить("Организация", Объект.Организации);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
		
	ОткрытьФорму("Отчет.АнализОбязательствПоНДФЛ.Форма", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКомандыПечати()
	
	КомандыПечати = Обработки.ПлатежиПоРезультатамРасчетаЗарплаты.КомандыПечати();
	КомандыПечати.Сортировать("Порядок, Представление");
	
	ОднаКоманда = (КомандыПечати.Количество() = 1);
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		КомандаФормы = Команды.Добавить(КомандаПечати.Идентификатор);
		КомандаФормы.Действие = "Подключаемый_Напечатать";
		КомандаФормы.Заголовок = КомандаПечати.Представление;
		КомандаФормы.Подсказка = КомандаФормы.Заголовок;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Если ТипЗнч(КомандаПечати.Картинка) = Тип("Картинка") Тогда
			КомандаФормы.Картинка = КомандаПечати.Картинка;
		КонецЕсли;
		Если ОднаКоманда И КомандаФормы.Картинка.Вид = ВидКартинки.Пустая Тогда
			КомандаФормы.Картинка = Элементы.ПодменюПечать.Картинка;
		КонецЕсли;
		
		КнопкаФормы = Элементы.Добавить(КомандаФормы.Имя, Тип("КнопкаФормы"), Элементы.ПодменюПечать);
		КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
	КонецЦикла;
	
	Если ОднаКоманда Тогда
		Элементы.ПодменюПечать.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПечати(ДетальноПоФинансированию)

	ДанныеДляОтчета = Новый Соответствие;
	
	ПоляОбъектаПечати = "
	|ПоляФинансирования,
	|ДатаАктуальностиНДФЛ,
	|ВедомостиКасса,
	|ВедомостиБанк,
	|ВедомостиПрочиеДоходыКасса,
	|ВедомостиПрочиеДоходыБанк,
	|ВыплатыПрочихДоходов,
	|СтраховыеВзносы,
	|РасходыПоСтрахованию,
	|УдержанияПоИсполнительнымДокументам,
	|УдержанияВПользуТретьихЛиц,
	|НДФЛОстатки,
	|НДФЛОбязательстваДетально,
	|НалогКУплате";
	
	ШаблонСпискаВедомостей = Новый ТаблицаЗначений;
	ШаблонСпискаВедомостей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ШаблонСпискаВедомостей.Колонки.Добавить("МестоВыплаты");
	ШаблонСпискаВедомостей.Колонки.Добавить("СпособВыплаты");
	ШаблонСпискаВедомостей.Колонки.Добавить("Сумма");
	ШаблонСпискаВедомостей.Колонки.Добавить("Ведомость");
	ШаблонСпискаВедомостей.Колонки.Добавить("СтатьяФинансирования");
	ШаблонСпискаВедомостей.Колонки.Добавить("СтатьяРасходов");
	
	ПоляФинансирования = "";
	Если ДетальноПоФинансированию Тогда
		ПоляФинансирования = "СтатьяФинансирования";
		Если РаботаВБюджетномУчреждении Тогда
			ПоляФинансирования = ПоляФинансирования + ",СтатьяРасходов";
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ВыплатыЗаМесяц = ОбработкаОбъект.ВыплатыЗаМесяц(ШаблонСпискаВедомостей);
	
	ТаблицаСтраховыеВзносы = ТаблицаСтраховыеВзносы(ДетальноПоФинансированию);
	ТаблицаРасходыПоСтрахованию = ТаблицаРасходыПоСтрахованию(ДетальноПоФинансированию);
	ТаблицаУдержанияВПользуТретьихЛиц = ТаблицаУдержанияВПользуТретьихЛиц(ДетальноПоФинансированию);
	ТаблицаУдержанияПоИсполнительнымДокументам = ТаблицаУдержанияПоИсполнительнымДокументам(ДетальноПоФинансированию);
	ТаблицаНДФЛОстатки = НДФЛОстатки.Выгрузить();
	ТаблицаНДФЛОбязательстваДетально = НДФЛОбязательстваДетально.Выгрузить();
	ТаблицаНалогКУплате = ТаблицаНалогКУплате(ДетальноПоФинансированию);
	
	Отбор = Новый Структура("Организация");
	Для Каждого Организация Из Объект.Организации Цикл
		
		Отбор.Организация = Организация;
		
		ОбъектПечати = Новый Структура(ПоляОбъектаПечати);
		ОбъектПечати.ДатаАктуальностиНДФЛ = Объект.ДатаАктуальностиНДФЛ;
		
		ОбъектПечати.ВедомостиКасса = СтрокиПоОрганизации(ВыплатыЗаМесяц.ВедомостиЗаМесяц.Касса, Отбор, ПоляФинансирования);
		ОбъектПечати.ВедомостиБанк  = СтрокиПоОрганизации(ВыплатыЗаМесяц.ВедомостиЗаМесяц.Банк, Отбор, ПоляФинансирования);
		
		Если ВыплатыЗаМесяц.ВедомостиПоПрочимДоходамЗаМесяц <> Неопределено Тогда
			ОбъектПечати.ВедомостиПрочиеДоходыКасса = СтрокиПоОрганизации(ВыплатыЗаМесяц.ВедомостиПоПрочимДоходамЗаМесяц.Касса, Отбор, ПоляФинансирования);
			ОбъектПечати.ВедомостиПрочиеДоходыБанк  = СтрокиПоОрганизации(ВыплатыЗаМесяц.ВедомостиПоПрочимДоходамЗаМесяц.Банк, Отбор, ПоляФинансирования);
		КонецЕсли;
		
		ОбъектПечати.ВыплатыПрочихДоходов = СтрокиПоОрганизации(ВыплатыЗаМесяц.ВыплатыПрочихДоходов, Отбор, ПоляФинансирования);
		ОбъектПечати.СтраховыеВзносы = СтрокиПоОрганизации(ТаблицаСтраховыеВзносы, Отбор, ПоляФинансирования);
		ОбъектПечати.РасходыПоСтрахованию = СтрокиПоОрганизации(ТаблицаРасходыПоСтрахованию, Отбор, ПоляФинансирования);
		ОбъектПечати.УдержанияВПользуТретьихЛиц = СтрокиПоОрганизации(ТаблицаУдержанияВПользуТретьихЛиц, Отбор, ПоляФинансирования);
		ОбъектПечати.УдержанияПоИсполнительнымДокументам = СтрокиПоОрганизации(ТаблицаУдержанияПоИсполнительнымДокументам, Отбор, ПоляФинансирования);
		
		Если ВестиРасчетыСБюджетомПоНДФЛ Тогда
			ОбъектПечати.НДФЛОстатки = СтрокиПоОрганизации(ТаблицаНДФЛОстатки, Отбор, "");
			ОбъектПечати.НДФЛОбязательстваДетально = СтрокиПоОрганизации(ТаблицаНДФЛОбязательстваДетально, Отбор, "");
		Иначе
			ОбъектПечати.НалогКУплате = СтрокиПоОрганизации(ТаблицаНалогКУплате, Отбор, ПоляФинансирования);
		КонецЕсли;
		
		ДанныеДляОтчета.Вставить(Организация, ОбъектПечати);
	
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("МесяцНачисления", Объект.МесяцНачисления);
	ПараметрыПечати.Вставить("ПоляФинансирования", ПоляФинансирования);
	ПараметрыПечати.Вставить("ДанныеДляПечати", ДанныеДляОтчета);
	
	Возврат ПараметрыПечати;
		
КонецФункции

&НаСервере
Функция СтрокиПоОрганизации(ИсходнаяТаблица, Отбор, ПоляФинансирования)
	
	ВыходныеДанные = Новый Массив;
	
	Если ПустаяСтрока(ПоляФинансирования) Тогда
		
		НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			ВыходныеДанные.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ));
		КонецЦикла;
		
	Иначе
		
		ВременнаяТаблица = Новый ТаблицаЗначений;
		Для каждого ИмяПоля Из СтрРазделить(ПоляФинансирования,",") Цикл
			ВременнаяТаблица.Колонки.Добавить(ИмяПоля);
		КонецЦикла;
		ВременнаяТаблица.Колонки.Добавить("КоллекцияДанных");
		
		ТаблицаПоОрганизации = ИсходнаяТаблица.Скопировать(Отбор);
		ТаблицаФинансирования = ТаблицаПоОрганизации.Скопировать(,ПоляФинансирования);
		ТаблицаФинансирования.Свернуть(ПоляФинансирования);
		ТаблицаФинансирования.Сортировать(ПоляФинансирования);
		ОтборФинансирования = Новый Структура(ПоляФинансирования);
		
		Для каждого СтрокаТЗ Из ТаблицаФинансирования Цикл
		
			ЗаполнитьЗначенияСвойств(ОтборФинансирования, СтрокаТЗ);
			НайденныеСтроки = ТаблицаПоОрганизации.НайтиСтроки(ОтборФинансирования);
			Если НайденныеСтроки.Количество() > 0 Тогда
				КоллекцияДанных = Новый Массив;
				НоваяСтрока = ВременнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтборФинансирования);
				Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
					КоллекцияДанных.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ));
				КонецЦикла;
				НоваяСтрока.КоллекцияДанных = КоллекцияДанных;
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
			ВыходныеДанные.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВыходныеДанные;

КонецФункции

&НаСервере
Процедура УдалитьНулевыеСуммы(Таблица)

	Отбор = Новый Структура("Сумма,СуммаСПревышения", 0,0);
	НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		Таблица.Удалить(СтрокаТЗ);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВедомостиПриИзмененииНаСервере()
	
	ОбновитьНаСервере("ЗарплатаКВыплате,НДФЛ");
	
КонецПроцедуры

&НаСервере
Процедура ВедомостиПрочиеДоходыПриИзмененииНаСервере()
	
	ОбновитьНаСервере("ПрочиеДоходыКВыплате,НДФЛ");
	
КонецПроцедуры


#КонецОбласти

