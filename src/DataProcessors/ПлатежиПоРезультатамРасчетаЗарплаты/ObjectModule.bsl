#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПрочитатьДанныеДляФормы(ОбновляемыеДанные = Неопределено) Экспорт
	
	ЗарплатаКВыплате.Очистить();
	ПрочиеДоходыКВыплате.Очистить();
	СтраховыеВзносы.Очистить();
	РасходыПоСтрахованию.Очистить();
	НДФЛКУплате.Очистить();
	НДФЛОстатки.Очистить();
	НДФЛОбороты.Очистить();
	УдержанияПоИсполнительнымДокументам.Очистить();
	ИсполнительныеДокументы.Очистить();
	УдержанияВПользуТретьихЛиц.Очистить();
	Организации = Неопределено;
	
	// Если не выбрана организация, получим список доступных организаций.
	РазрешенныеОрганизации = РазрешенныеОрганизации();
	
	СтрокаСообщения = "";
	Если РазрешенныеОрганизации.Количество() = 0 Тогда
		СтрокаСообщения = НСтр("ru = 'Получение данных организаций запрещено для текущего пользователя.';
								|en = 'Data of the companies is unavailable for the current user.'");
	ИначеЕсли ЗначениеЗаполнено(Организация) И РазрешенныеОрганизации.Найти(Организация) = Неопределено Тогда
		СтрокаПодстановки = НСтр("ru = 'Получение данных организации %1 запрещено для текущего пользователя.';
								|en = 'Data of the %1 company is unavailable for the current user.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, Организация);
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		Возврат СтрокаСообщения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		РазрешенныеОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	КонецЕсли;
	Организации = Новый ФиксированныйМассив(РазрешенныеОрганизации);
	
	Если ОбновляемыеДанные = Неопределено Или СтрНайти(ОбновляемыеДанные, "ЗарплатаКВыплате") > 0 Тогда
		ЗаполнитьЗарплатаКВыплате();
	КонецЕсли;
	
	Если ОбновляемыеДанные = Неопределено Или СтрНайти(ОбновляемыеДанные, "ПрочиеДоходыКВыплате") > 0 Тогда
		ЗаполнитьПрочиеДоходыКВыплате();
	КонецЕсли;
	
	Если ОбновляемыеДанные = Неопределено Или СтрНайти(ОбновляемыеДанные, "НДФЛ") > 0 Тогда
		ЗаполнитьНДФЛКУплате();
		ЗаполнитьОбязательстваПоНДФЛ();
	КонецЕсли;
	
	Если ОбновляемыеДанные = Неопределено Тогда
		ЗаполнитьСтраховыеВзносы();
		ЗаполнитьРасходыПоСтрахованию();
		ЗаполнитьУдержанияПоИсполнительнымДокументам();
		ЗаполнитьУдержанияВПользуТретьихЛиц();
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВыплатыЗаМесяц(ШаблонСпискаВедомостей) Экспорт

	// Если не выбрана организация, получим список доступных организаций.
	РазрешенныеОрганизации = РазрешенныеОрганизации();
	Если ЗначениеЗаполнено(Организация) Тогда
		РазрешенныеОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	КонецЕсли;
	Организации = Новый ФиксированныйМассив(РазрешенныеОрганизации);
	
	ВедомостиЗаМесяц = ВедомостьНаВыплатуЗарплатыРасширенный.ВедомостиОрганизацийЗаМесяцДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления, ШаблонСпискаВедомостей);
	
	ВедомостиПоПрочимДоходамЗаМесяц = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВзаиморасчетыПоПрочимДоходам") Тогда
		ВедомостиПоПрочимДоходамЗаМесяц = ВедомостьПрочихДоходов.ВедомостиПоПрочимДоходамЗаМесяцДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления, ШаблонСпискаВедомостей);
	КонецЕсли;
	
	ВыплатыПрочихДоходов = УчетПрочихДоходов.ВыплатыПрочихДоходовЗаМесяцДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления, ШаблонСпискаВедомостей);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Дивиденды");
		ВыплатыДивидендов = Модуль.ВыплатыДивидендовЗаМесяцДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления, ШаблонСпискаВедомостей);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыплатыДивидендов, ВыплатыПрочихДоходов);
	КонецЕсли;
	
	ВыплатыЗаМесяц = Новый Структура();
	ВыплатыЗаМесяц.Вставить("ВедомостиЗаМесяц", ВедомостиЗаМесяц);
	ВыплатыЗаМесяц.Вставить("ВедомостиПоПрочимДоходамЗаМесяц", ВедомостиПоПрочимДоходамЗаМесяц);
	ВыплатыЗаМесяц.Вставить("ВыплатыПрочихДоходов", ВыплатыПрочихДоходов);
	
	Возврат ВыплатыЗаМесяц;

КонецФункции

Функция РазрешенныеОрганизации()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Процедура ЗаполнитьЗарплатаКВыплате()
	
	ОстаткиЗарплатаКВыплате = ВзаиморасчетыССотрудникамиРасширенный.ЗарплатаКВыплатеДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстаткиЗарплатаКВыплате, ЗарплатаКВыплате);
	
КонецПроцедуры

Процедура ЗаполнитьПрочиеДоходыКВыплате()

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВзаиморасчетыПоПрочимДоходам") Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиПрочиеДоходыКВыплате = ВзаиморасчетыПоПрочимДоходам.ПрочиеДоходыКВыплатеДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстаткиПрочиеДоходыКВыплате, ПрочиеДоходыКВыплате);
	
КонецПроцедуры

Процедура ЗаполнитьСтраховыеВзносы()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Для каждого ВыбраннаяОрганизация Из Организации Цикл
			Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(ВыбраннаяОрганизация);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаВзносов = ОтражениеЗарплатыВУчетеРасширенный.СтраховыеВзносыДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаВзносов, СтраховыеВзносы);
	
	ТаблицаДСВ = УчетНачисленнойЗарплатыРасширенный.ДобровольныеСтраховыеВзносыДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДСВ, СтраховыеВзносы);
		
КонецПроцедуры

Процедура ЗаполнитьРасходыПоСтрахованию()

	ТаблицаРасходов = УчетНачисленнойЗарплатыРасширенный.РасходыПоСтрахованиюДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРасходов, РасходыПоСтрахованию);
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛКУплате()
	
	Если ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ")
		И МесяцНачисления < УчетНДФЛ.ДатаЗавершенияУчетаПеречисленногоНалога() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНДФЛ = УчетНДФЛРасширенный.НДФЛКУплатеДляПлатежейПоРезультатамРасчета(Организации, ДатаАктуальностиНДФЛ);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНДФЛ, НДФЛКУплате);
	
КонецПроцедуры

Процедура ЗаполнитьОбязательстваПоНДФЛ()
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ")
		Или МесяцНачисления >= УчетНДФЛ.ДатаЗавершенияУчетаПеречисленногоНалога() Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиОбороты = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		ОстаткиОбороты = Модуль.ОбязательстваПоНДФЛДляПлатежейПоРезультатамРасчета(Организации, ДатаАктуальностиНДФЛ);
	КонецЕсли;

	Если ОстаткиОбороты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстаткиОбороты.Остатки, НДФЛОстатки);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстаткиОбороты.Обороты, НДФЛОбороты);
	
КонецПроцедуры

Процедура ЗаполнитьУдержанияПоИсполнительнымДокументам()
	
	УдержанияПоИДОрганизаций = ИсполнительныеЛисты.УдержанияПоИсполнительнымДокументамДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоИДОрганизаций.Удержания, УдержанияПоИсполнительнымДокументам);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоИДОрганизаций.ИсполнительныеДокументы, ИсполнительныеДокументы);
	
КонецПроцедуры

Процедура ЗаполнитьУдержанияВПользуТретьихЛиц()

	ТаблицаУдержаний = УчетНачисленнойЗарплатыРасширенный.УдержанияВПользуТретьихЛицДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУдержаний, УдержанияВПользуТретьихЛиц);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли