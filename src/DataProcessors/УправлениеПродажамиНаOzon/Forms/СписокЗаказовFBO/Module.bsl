
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УчетнаяЗаписьТорговойПлощадки = Параметры.УчетнаяЗаписьТорговойПлощадки;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьТорговойПлощадки) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(ТекущаяДатаСеанса());  
	КонецПериода  = КонецДня(ТекущаяДатаСеанса()); 
	ФильтрСтатуса = "";
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПериодИПолучитьОтправленияНаКлиенте();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ДатаАктуальностиДанных = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ДатаАктуальностиДанных = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение      = КонецДня(ВыбранноеЗначение);
	ДатаАктуальностиДанных = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСтатусаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ФильтрСтатуса) Тогда
		Элементы.ТаблицаЗаказов.ОтборСтрок = Неопределено;
	Иначе                                            
		Значение = Элементы.ФильтрСтатуса.СписокВыбора.НайтиПоЗначению(ФильтрСтатуса);
		Если Значение <> Неопределено Тогда
			Отбор = Новый Структура("СтатусОтправления", Значение.Представление);
			Элементы.ТаблицаЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		Иначе
			Элементы.ТаблицаЗаказов.ОтборСтрок = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗаказов

&НаКлиенте
Процедура ТаблицаЗаказовПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ТаблицаЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПредставлениеОтправления = "";
		Возврат;
	КонецЕсли;

	ПредставлениеОтправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные по отправлению %1 заказа %2';
				|en = 'Data on the %1 shipment of the %2 order'"),
			ТекущиеДанные.НомерОтправления,
			ТекущиеДанные.НомерЗаказа);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьПериод(Элемент)
    
    ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораПериода", ЭтотОбъект);
	
    Диалог = Новый ДиалогРедактированияСтандартногоПериода();
    Диалог.Период = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
    Диалог.Показать(ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПериодИПолучитьОтправления(Команда)
	
	ПроверитьПериодИПолучитьОтправленияНаКлиенте();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Дата актуальности
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаАктуальностиДанных.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаАктуальностиДанных");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Дата(1, 1, 1);

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтыСтиля.ОбычныйШрифтТекста);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<требуется обновление данных>';
																						|en = '<data updated is required>'"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныеЭлементыФормы(Знач Элемент)
	
	Результат = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ГруппаФормы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПолучитьПодчиненныеЭлементыФормы(ЭлементКоллекции));
		Иначе
			Результат.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораПериода(Период, ДополнительныеПараметры) Экспорт

    Если Период <> Неопределено Тогда      
        НачалоПериода = НачалоДня(Период.ДатаНачала);
        КонецПериода  = КонецДня(Период.ДатаОкончания);
		
		ДатаАктуальностиДанных = Дата(1, 1, 1);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПериодИПолучитьОтправленияНаКлиенте()

	ОчиститьСообщения();   
	
	Если  НачалоПериода>КонецПериода Тогда	
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно задан период: дата окончания ранее даты начала.';
														|en = 'Incorrect period: the end date is earlier than the start date.'"));
		Возврат;
	КонецЕсли;
	
	РазницаВДнях = (НачалоДня(КонецПериода) - НачалоДня(НачалоПериода)) / (60 * 60 * 24);     
	
	Если РазницаВДнях > 30 Тогда
		ТекстВопроса = Нстр("ru = 'Период запроса данных превышает месяц. 
								  |Чтобы избежать долгой загрузки данных рекомендуется сократить запрашиваемый период.
								  |Продолжить получение данных?';
								  |en = 'The requested period for importing data exceeds one month. 
								  |To avoid a long data import, shorten the requested period.
								  |Continue data import?'");
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьПериодИПолучитьОтправленияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	Иначе
		ПроверитьПериодИПолучитьОтправленияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПериодИПолучитьОтправленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПолучитьОправления();
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура ПолучитьОправления()
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьОправленияЗавершениеФоновогоЗадания", ЭтотОбъект);
	ДлительнаяОперация    = ПолучитьОправленияFBOНаСервере();
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
		
	Иначе
		ПараметрыОжидания 								   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания 			   = Истина;
		ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Получение данных о заказах FBO.';
																	|en = 'Get FBO order data.'");
		ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст 	   = НСтр("ru = 'Ozon';
																	|en = 'Ozon'");
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено получение данных о заказах FBO.';
																	|en = 'FBO order data is received.'");
		ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипOzon2;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры   

&НаСервере
Функция ПолучитьОправленияFBOНаСервере()
	
	ПараметрыВыполнения 							 = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Получение данных о заказах FBO.';
															|en = 'Ozon. Get FBO order data.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ФильтрСтатуса", "");
	ПараметрыФункции.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФункции.Вставить("КонецПериода",  КонецПериода);

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОтправленияFBO";
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		УчетнаяЗаписьТорговойПлощадки, 
		ПараметрыФункции, 
		РеквизитФормыВЗначение("ТаблицаЗаказов"));
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОправленияЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
		 		  	И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = ПолучитьРезультатВыполненияФоновогоЗадания(Результат.АдресРезультата);
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(Ошибка, ДополнительныеПараметры, Истина);
			Элементы.ТаблицаЗаказов.Обновить();
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры  

&НаСервере
Функция ПолучитьРезультатВыполненияФоновогоЗадания(Знач АдресРезультата)
	
	ТаблицаЗаказов.Очистить();
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ПустаяСтрока(Результат.Ошибка.КодОшибки) Тогда     
		ДатаАктуальностиДанных = ТекущаяДатаСеанса();
		ЗначениеВРеквизитФормы(Результат.ТаблицаЗаказов, "ТаблицаЗаказов");
	Иначе
		ДатаАктуальностиДанных = Дата(1, 1, 1);
	КонецЕсли;
	
	Возврат Результат.Ошибка;
	
КонецФункции

#КонецОбласти 