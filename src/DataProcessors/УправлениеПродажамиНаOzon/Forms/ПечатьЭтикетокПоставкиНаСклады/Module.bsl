
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПрефиксЭтикеток = "Tags-";
	УстановитьУсловноеОформление();
	
	ПараметрыОбъекты = Неопределено;
	Параметры.Свойство("Объекты", ПараметрыОбъекты);
	Если ЗначениеЗаполнено(ПараметрыОбъекты) Тогда
		Объекты.ЗагрузитьЗначения(ПараметрыОбъекты);
	КонецЕсли;
	
	ОбновитьНаСервере();
	
	СкрытьНерекомендуемыеРасширения = (Этикетки.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ЭтикеткиСкрытьНерекомендуемыеРасширения.Пометка = СкрытьНерекомендуемыеРасширения;
	
	УстановитьВидимостьДоступность();
	ПолучитьВидимуюСтрокуСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("ЭтоНовый") 
				И Параметр.ЭтоНовый Тогда
			ОбновитьНаКлиенте(Параметр.Файл);
			
		ИначеЕсли Параметр.Свойство("Событие") 
					И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
			ОбновитьНаКлиенте(Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтикетки

&НаКлиенте
Процедура ЭтикеткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ЭтикеткиСсылка" Тогда
		СтандартнаяОбработка = Ложь;
		ЭтикеткиСсылкаВыбрать(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПодвалСтатусОшибокНет.Видимость      = ЗначениеЗаполнено(ТекущиеДанные.Ссылка) И (СтрНайти("ZIP, PDF", ВРег(ТекущиеДанные.Расширение)) > 0);
	Элементы.ГруппаПодвалСтатусПредупреждение.Видимость = Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Или (СтрНайти("ZIP, PDF", ВРег(ТекущиеДанные.Расширение)) = 0);

КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиПометкаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Этикетки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка)
			Или (СтрНайти("ZIP, PDF", ВРег(ТекущиеДанные.Расширение)) = 0) Тогда
		ТекущиеДанные.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭтикеткиСсылкаВыбрать(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)

	Для Каждого СтрокаТаблицыЗначений Из Этикетки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.Ссылка) 
				И (СтрНайти("ZIP, PDF", ВРег(СтрокаТаблицыЗначений.Расширение)) > 0) Тогда
			СтрокаТаблицыЗначений.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)

	Для Каждого СтрокаТаблицыЗначений Из Этикетки Цикл
		СтрокаТаблицыЗначений.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
	УстановитьВидимостьДоступность();
	ПолучитьВидимуюСтрокуСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНерекомендуемыеРасширения(Команда)
	
	СкрытьНерекомендуемыеРасширения                          = Не СкрытьНерекомендуемыеРасширения;
	Элементы.ЭтикеткиСкрытьНерекомендуемыеРасширения.Пометка = СкрытьНерекомендуемыеРасширения;
	
	ПолучитьВидимуюСтрокуСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПечатныеДокументы", ПолучитьПакетДокументов());
	ПараметрыОткрытия.Вставить("ПечатьСразу",       Ложь);
	
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПредварительныйПросмотрЭтикетокПоставки",
		ПараметрыОткрытия,
		ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьНаПринтер(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПечатныеДокументы", ПолучитьПакетДокументов());
	ПараметрыОткрытия.Вставить("ПечатьСразу",       Истина);
	
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПредварительныйПросмотрЭтикетокПоставки",
		ПараметрыОткрытия,
		ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиСсылка.Имя);

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ПодчеркнутыйШрифтДиалоговМаркетплейсов);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиСсылка.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этикетки.Ссылка");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<Выбрать файл с этикетками поставки>';
																						|en = '<Select a file with shipment labels>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",      ШрифтыСтиля.ПодчеркнутыйШрифтДиалоговМаркетплейсов);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиНомерПоставки.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиСсылка.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этикетки.Ссылка");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Этикетки.Расширение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "zip";
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Этикетки.Расширение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "pdf";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиПометка.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиРаспоряжение.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиСведенияОПоставке.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиНомерПоставки.Имя);
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтикеткиСсылка.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СкрытьНерекомендуемыеРасширения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Этикетки.Расширение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Этикетки.Расширение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "zip";
	
	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Этикетки.Расширение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "pdf";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ТекущиеДанные = Элементы.Этикетки.ТекущиеДанные;

	Элементы.ГруппаФлажки.Видимость						= (Этикетки.Количество() > 0);
	
	Элементы.ГруппаПодвалСтатусОшибка.Видимость			= (Этикетки.Количество() = 0);
	Элементы.ГруппаПодвалСтатусОшибокНет.Видимость		= (Этикетки.Количество() > 0) И (ТекущиеДанные <> Неопределено) И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) И (СтрНайти("ZIP, PDF", ВРег(ТекущиеДанные.Расширение)) > 0);
	Элементы.ГруппаПодвалСтатусПредупреждение.Видимость = (Этикетки.Количество() > 0) И (ТекущиеДанные <> Неопределено) И (Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Или (СтрНайти("ZIP, PDF", ВРег(ТекущиеДанные.Расширение)) = 0));

	Элементы.ФормаПечать.Видимость						= (Этикетки.Количество() > 0);
	Элементы.ФормаПечатьНаПринтер.Видимость				= (Этикетки.Количество() > 0);
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию				= (Этикетки.Количество() = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВидимуюСтрокуСписка()
	
	Элементы.ЭтикеткиСкрытьНерекомендуемыеРасширения.Видимость = Ложь;
	
	Для каждого СтрокаТабличнойЧасти Из Этикетки Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Ссылка) 
				И (СтрНайти("ZIP, PDF", ВРег(СтрокаТабличнойЧасти.Расширение)) > 0) Тогда
			Элементы.ЭтикеткиСкрытьНерекомендуемыеРасширения.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не СкрытьНерекомендуемыеРасширения Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Этикетки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено 
			И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) 
			И (СтрНайти("ZIP, PDF", ВРег(ТекущиеДанные.Расширение)) > 0) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Этикетки Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Ссылка) 
				И (СтрНайти("ZIP, PDF", ВРег(СтрокаТабличнойЧасти.Расширение)) > 0) Тогда
			Элементы.Этикетки.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СкрытьНерекомендуемыеРасширения                            = Ложь;
	Элементы.ЭтикеткиСкрытьНерекомендуемыеРасширения.Пометка   = СкрытьНерекомендуемыеРасширения;
	Элементы.ЭтикеткиСкрытьНерекомендуемыеРасширения.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	Этикетки.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументЗаказКлиента.Ссылка КАК Распоряжение,
		|	ДокументЗаказКлиента.Организация КАК Организация,
		|	ДокументЗаказКлиента.Партнер КАК Партнер,
		|	ДокументЗаказКлиента.Контрагент КАК Контрагент,
		|	ДокументЗаказКлиента.Соглашение КАК Соглашение,
		|	ДокументЗаказКлиента.Договор КАК Договор,
		|	"""" КАК Комментарий,
		|	ДокументЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента
		|ПОМЕСТИТЬ ВТ_Распоряжения
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|ГДЕ
		|	ДокументЗаказКлиента.Ссылка В(&Объекты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументПередачаТоваровХранителю.Ссылка,
		|	ДокументПередачаТоваровХранителю.Организация,
		|	ДокументПередачаТоваровХранителю.Партнер,
		|	ДокументПередачаТоваровХранителю.Контрагент,
		|	ДокументПередачаТоваровХранителю.Соглашение,
		|	ДокументПередачаТоваровХранителю.Договор,
		|	ДокументПередачаТоваровХранителю.Комментарий,
		|	""""
		|ИЗ
		|	Документ.ПередачаТоваровХранителю КАК ДокументПередачаТоваровХранителю
		|ГДЕ
		|	ДокументПередачаТоваровХранителю.Ссылка В(&Объекты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументПередачаТоваровХранителюТовары.ЗаказКлиента,
		|	ДокументЗаказКлиента.Организация,
		|	ДокументЗаказКлиента.Партнер,
		|	ДокументЗаказКлиента.Контрагент,
		|	ДокументЗаказКлиента.Соглашение,
		|	ДокументЗаказКлиента.Договор,
		|	ДокументПередачаТоваровХранителюТовары.Ссылка.Комментарий,
		|	ДокументЗаказКлиента.НомерПоДаннымКлиента
		|ИЗ
		|	Документ.ПередачаТоваровХранителю.Товары КАК ДокументПередачаТоваровХранителюТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|		ПО ((ВЫРАЗИТЬ(ДокументПередачаТоваровХранителюТовары.ЗаказКлиента КАК Документ.ЗаказКлиента)) = ДокументЗаказКлиента.Ссылка)
		|ГДЕ
		|	ДокументПередачаТоваровХранителюТовары.Ссылка В(&Объекты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение,
		|	ДокументЗаказКлиента.Организация,
		|	ДокументЗаказКлиента.Партнер,
		|	ДокументЗаказКлиента.Контрагент,
		|	ДокументЗаказКлиента.Соглашение,
		|	ДокументЗаказКлиента.Договор,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Комментарий,
		|	ДокументЗаказКлиента.НомерПоДаннымКлиента
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|		ПО ((ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ЗаказКлиента)) = ДокументЗаказКлиента.Ссылка)
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка В(&Объекты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение,
		|	ДокументПередачаТоваровХранителю.Организация,
		|	ДокументПередачаТоваровХранителю.Партнер,
		|	ДокументПередачаТоваровХранителю.Контрагент,
		|	ДокументПередачаТоваровХранителю.Соглашение,
		|	ДокументПередачаТоваровХранителю.Договор,
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Комментарий,
		|	""""
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровХранителю КАК ДокументПередачаТоваровХранителю
		|		ПО ((ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ПередачаТоваровХранителю)) = ДокументПередачаТоваровХранителю.Ссылка)
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка В(&Объекты)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникУчетныеЗаписиМаркетплейсов.Организация КАК Организация,
		|	СправочникУчетныеЗаписиМаркетплейсов.Партнер КАК Партнер,
		|	СправочникУчетныеЗаписиМаркетплейсов.Контрагент КАК Контрагент,
		|	СправочникУчетныеЗаписиМаркетплейсов.Соглашение КАК Соглашение,
		|	СправочникУчетныеЗаписиМаркетплейсов.ДоговорПродажиЧерезСкладыТорговойПлощадки КАК Договор
		|ПОМЕСТИТЬ ВТ_УчетныеЗаписи
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК СправочникУчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	СправочникУчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
		|	И НЕ СправочникУчетныеЗаписиМаркетплейсов.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СправочникУчетныеЗаписиМаркетплейсов.Организация,
		|	СправочникУчетныеЗаписиМаркетплейсов.Партнер,
		|	СправочникУчетныеЗаписиМаркетплейсов.Контрагент,
		|	СправочникУчетныеЗаписиМаркетплейсов.Соглашение,
		|	СправочникУчетныеЗаписиМаркетплейсов.ДоговорПродажиЧерезСкладыСобственные
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК СправочникУчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	СправочникУчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
		|	И НЕ СправочникУчетныеЗаписиМаркетплейсов.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Партнер,
		|	Контрагент,
		|	Соглашение,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Распоряжения.Распоряжение КАК Распоряжение,
		|	ВЫРАЗИТЬ(ВТ_Распоряжения.Комментарий КАК СТРОКА(256)) КАК Комментарий,
		|	ВЫРАЗИТЬ(ВТ_Распоряжения.НомерПоДаннымКлиента КАК СТРОКА(256)) КАК НомерПоДаннымКлиента,
		|	ЕСТЬNULL(ЗаказКлиентаПрисоединенныеФайлы.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
		|	ЕСТЬNULL(ЗаказКлиентаПрисоединенныеФайлы.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗаказКлиентаПрисоединенныеФайлы.ПутьКФайлу КАК СТРОКА(1024)), """") КАК ПутьКФайлу,
		|	ЕСТЬNULL(ЗаказКлиентаПрисоединенныеФайлы.Расширение, """") КАК Расширение
		|ИЗ
		|	ВТ_Распоряжения КАК ВТ_Распоряжения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаказКлиентаПрисоединенныеФайлы КАК ЗаказКлиентаПрисоединенныеФайлы
		|		ПО ВТ_Распоряжения.Распоряжение = ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла
		|			И (НЕ ЗаказКлиентаПрисоединенныеФайлы.ПометкаУдаления)
		|ГДЕ
		|	ВТ_Распоряжения.Распоряжение ССЫЛКА Документ.ЗаказКлиента
		|	И ВТ_Распоряжения.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	И (ВТ_Распоряжения.Организация, ВТ_Распоряжения.Партнер, ВТ_Распоряжения.Контрагент, ВТ_Распоряжения.Соглашение, ВТ_Распоряжения.Договор) В
		|			(ВЫБРАТЬ
		|				ВТ_УчетныеЗаписи.Организация КАК Организация,
		|				ВТ_УчетныеЗаписи.Партнер КАК Партнер,
		|				ВТ_УчетныеЗаписи.Контрагент КАК Контрагент,
		|				ВТ_УчетныеЗаписи.Соглашение КАК Соглашение,
		|				ВТ_УчетныеЗаписи.Договор КАК Договор
		|			ИЗ
		|				ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Распоряжения.Распоряжение,
		|	ВЫРАЗИТЬ(ВТ_Распоряжения.Комментарий КАК СТРОКА(256)),
		|	ВЫРАЗИТЬ(ВТ_Распоряжения.НомерПоДаннымКлиента КАК СТРОКА(256)),
		|	ЕСТЬNULL(ПередачаТоваровХранителюПрисоединенныеФайлы.Ссылка, НЕОПРЕДЕЛЕНО),
		|	ЕСТЬNULL(ПередачаТоваровХранителюПрисоединенныеФайлы.Наименование, """"),
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ПередачаТоваровХранителюПрисоединенныеФайлы.ПутьКФайлу КАК СТРОКА(1024)), """"),
		|	ЕСТЬNULL(ПередачаТоваровХранителюПрисоединенныеФайлы.Расширение, """")
		|ИЗ
		|	ВТ_Распоряжения КАК ВТ_Распоряжения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПередачаТоваровХранителюПрисоединенныеФайлы КАК ПередачаТоваровХранителюПрисоединенныеФайлы
		|		ПО ВТ_Распоряжения.Распоряжение = ПередачаТоваровХранителюПрисоединенныеФайлы.ВладелецФайла
		|			И (НЕ ПередачаТоваровХранителюПрисоединенныеФайлы.ПометкаУдаления)
		|ГДЕ
		|	ВТ_Распоряжения.Распоряжение ССЫЛКА Документ.ПередачаТоваровХранителю
		|	И ВТ_Распоряжения.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	И (ВТ_Распоряжения.Организация, ВТ_Распоряжения.Партнер, ВТ_Распоряжения.Контрагент, ВТ_Распоряжения.Соглашение, ВТ_Распоряжения.Договор) В
		|			(ВЫБРАТЬ
		|				ВТ_УчетныеЗаписи.Организация КАК Организация,
		|				ВТ_УчетныеЗаписи.Партнер КАК Партнер,
		|				ВТ_УчетныеЗаписи.Контрагент КАК Контрагент,
		|				ВТ_УчетныеЗаписи.Соглашение КАК Соглашение,
		|				ВТ_УчетныеЗаписи.Договор КАК Договор
		|			ИЗ
		|				ВТ_УчетныеЗаписи КАК ВТ_УчетныеЗаписи)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распоряжение,
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Распоряжения";
	
	ИспользоватьПартнеровИКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	ИспользоватьСоглашенияСКлиентами   = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользуютсяДоговорыКонтрагентов   = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");

	Если Не ИспользоватьПартнеровИКонтрагентов Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"ВТ_Распоряжения.Контрагент",
			"ИСТИНА");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"ВТ_УчетныеЗаписи.Контрагент КАК Контрагент",
			"ИСТИНА");
	КонецЕсли;

	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"ВТ_Распоряжения.Соглашение",
			"ИСТИНА");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"ВТ_УчетныеЗаписи.Соглашение КАК Соглашение",
			"ИСТИНА");
	КонецЕсли;

	Если Не ИспользуютсяДоговорыКонтрагентов Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"ВТ_Распоряжения.Договор",
			"ИСТИНА");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"ВТ_УчетныеЗаписи.Договор КАК Договор",
			"ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объекты", Объекты);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Префиксы = СтрРазделить(СтрЗаменить(ПрефиксЭтикеток, " ", ""), ";", Ложь);
	
	Пока ВыборкаДанных.Следующий() Цикл
		НомерПоставки = ВРег(ВыборкаДанных.Наименование);
		Для Каждого Префикс Из Префиксы Цикл
			НомерПоставки = СтрЗаменить(НомерПоставки, ВРег(Префикс), "");
		КонецЦикла;
		
		СведенияОПоставке = "";
		Если ЗначениеЗаполнено(ВыборкаДанных.НомерПоДаннымКлиента) И ЗначениеЗаполнено(ВыборкаДанных.Комментарий) Тогда
			СведенияОПоставке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявка № %1 / %2';
					|en = 'Request No. %1 / %2'"), 
				СокрЛП(ВыборкаДанных.НомерПоДаннымКлиента),
				СокрЛП(ВыборкаДанных.Комментарий));
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДанных.НомерПоДаннымКлиента) Тогда
			СведенияОПоставке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявка № %1';
					|en = 'Request No. %1'"), 
				СокрЛП(ВыборкаДанных.НомерПоДаннымКлиента));
		Иначе
			СведенияОПоставке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1';
					|en = '%1'"), 
				СокрЛП(ВыборкаДанных.Комментарий));
		КонецЕсли;
		
		СтрокаТаблицыЗначений					= Этикетки.Добавить();
		СтрокаТаблицыЗначений.Пометка			= ЗначениеЗаполнено(ВыборкаДанных.Ссылка) И (СтрНайти("ZIP, PDF", ВРег(ВыборкаДанных.Расширение)) > 0);
		СтрокаТаблицыЗначений.Распоряжение		= ВыборкаДанных.Распоряжение;
		СтрокаТаблицыЗначений.СведенияОПоставке	= СведенияОПоставке;
		СтрокаТаблицыЗначений.НомерПоставки		= СокрЛП(НомерПоставки);
		СтрокаТаблицыЗначений.Ссылка			= ВыборкаДанных.Ссылка;
		СтрокаТаблицыЗначений.ПутьКФайлу		= ВыборкаДанных.ПутьКФайлу;
		СтрокаТаблицыЗначений.Расширение		= ВыборкаДанных.Расширение;

		Если ЗначениеЗаполнено(ВыборкаДанных.Комментарий) 
				И СтрНайти(ВРег(ВыборкаДанных.Комментарий), НомерПоставки) = 0 Тогда
			СтрокаТаблицыЗначений.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиенте(Ссылки)
	
	Если ТипЗнч(Ссылки) <> Тип("Массив") Тогда
		Ссылки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылки);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Этикетки.ТекущиеДанные;
	Распоряжение  = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Распоряжение);
	Ссылка        = ?(Ссылки.Количество() = 0, ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка), Ссылки[0]);
	
	Префиксы = СтрРазделить(СтрЗаменить(ПрефиксЭтикеток, " ", ""), ";", Ложь);
	
	Для Каждого ЭлементКоллекции Из Ссылки Цикл
		ЗначенияРеквизитов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(
								ЭлементКоллекции, 
								"ПометкаУдаления, ВладелецФайла, Наименование, ПутьКФайлу, Расширение");
								
		НомерПоставки = ВРег(ЗначенияРеквизитов.Наименование);
		Для Каждого Префикс Из Префиксы Цикл
			НомерПоставки = СтрЗаменить(НомерПоставки, ВРег(Префикс), "");
		КонецЦикла;
		
		ДобавитьСтроку  = Истина;
		Отбор           = Новый Структура("Распоряжение", ЗначенияРеквизитов.ВладелецФайла);
		НайденныеСтроки = Этикетки.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
			Если СтрокаТаблицыЗначений.Ссылка = ЭлементКоллекции
					Или Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.Ссылка) Тогда
				Если Не ЗначенияРеквизитов.ПометкаУдаления Тогда
					СтрокаТаблицыЗначений.Пометка       = ЗначениеЗаполнено(ЭлементКоллекции) И (СтрНайти("ZIP, PDF", ВРег(ЗначенияРеквизитов.Расширение)) > 0);
					СтрокаТаблицыЗначений.НомерПоставки = СокрЛП(НомерПоставки);
					СтрокаТаблицыЗначений.Ссылка        = ЭлементКоллекции;
					СтрокаТаблицыЗначений.ПутьКФайлу    = ЗначенияРеквизитов.ПутьКФайлу;
					СтрокаТаблицыЗначений.Расширение    = ЗначенияРеквизитов.Расширение;
				КонецЕсли;
				
				ДобавитьСтроку = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавитьСтроку Тогда
			СведенияОПоставке = "";
			Если ТипЗнч(ЗначенияРеквизитов.ВладелецФайла) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				НомерПоДаннымКлиента = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.ВладелецФайла, "НомерПоДаннымКлиента");
				Если ЗначениеЗаполнено(НомерПоДаннымКлиента) Тогда
					СведенияОПоставке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Заявка № %1';
							|en = 'Request No. %1'"), 
						СокрЛП(НомерПоДаннымКлиента));
				КонецЕсли;
			Иначе
				СведенияОПоставке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1';
						|en = '%1'"), 
					ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.ВладелецФайла, "Комментарий"));
			КонецЕсли;
			
			СтрокаТаблицыЗначений					= Этикетки.Добавить();
			СтрокаТаблицыЗначений.Пометка			= ЗначениеЗаполнено(ЭлементКоллекции) И (СтрНайти("ZIP, PDF", ВРег(ЗначенияРеквизитов.Расширение)) > 0);
			СтрокаТаблицыЗначений.Распоряжение		= ЗначенияРеквизитов.ВладелецФайла;
			СтрокаТаблицыЗначений.СведенияОПоставке	= СведенияОПоставке;
			СтрокаТаблицыЗначений.НомерПоставки		= СокрЛП(НомерПоставки);
			СтрокаТаблицыЗначений.Ссылка			= ЭлементКоллекции;
			СтрокаТаблицыЗначений.ПутьКФайлу		= ЗначенияРеквизитов.ПутьКФайлу;
			СтрокаТаблицыЗначений.Расширение		= ЗначенияРеквизитов.Расширение;
		КонецЕсли;
	КонецЦикла;
	
	Этикетки.Сортировать("Распоряжение, НомерПоставки");
	Индекс = Этикетки.Количество();
	
	Пока Индекс > 0 Цикл
		Индекс                = Индекс - 1;
		СтрокаТаблицыЗначений = Этикетки[Индекс];
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.Ссылка) 
				И ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТаблицыЗначений.Ссылка, "ПометкаУдаления") Тогда
			СтрокаТаблицыЗначений.Пометка       = Ложь;
			СтрокаТаблицыЗначений.НомерПоставки = "";
			СтрокаТаблицыЗначений.Ссылка        = Неопределено;
			СтрокаТаблицыЗначений.ПутьКФайлу    = "";
			СтрокаТаблицыЗначений.Расширение    = "";
				
			Отбор           = Новый Структура("Распоряжение", СтрокаТаблицыЗначений.Распоряжение);
			НайденныеСтроки = Этикетки.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				Этикетки.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Отбор           = Новый Структура("Распоряжение, Ссылка", Распоряжение, Ссылка);
	НайденныеСтроки = Этикетки.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.Этикетки.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	ПолучитьВидимуюСтрокуСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиСсылкаВыбрать(Элемент)
	
	ТекущиеДанные = Элементы.Этикетки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ЭтикеткиСсылкаНачалоВыбораЗавершение", ЭтотОбъект,);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Если ДобавлениеФайловДоступно(ТекущиеДанные.Распоряжение) Тогда
			РаботаСФайламиКлиент.ДобавитьФайлы(
				ТекущиеДанные.Распоряжение, 
				УникальныйИдентификатор, 
				НСтр("ru = 'Все файлы';
					|en = 'All files'") + " (*.*)|*.*" 
					+ "|" + НСтр("ru = 'Документ PDF';
								|en = 'PDF document'") + " (*.pdf)|*.pdf" 
					+ "|" + НСтр("ru = 'Архив этикеток';
								|en = 'Label archive'") + " (*.zip)|*.zip",
				Неопределено,
				ОповещениеОВыборе);
			
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Добавление файлов запрещено правами доступа текущего пользователя.';
											|en = 'The current user does not have enough rights to add files.'"), 60);
		КонецЕсли;
		
	Иначе
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВладелецФайла",     ТекущиеДанные.Распоряжение);
		ПараметрыОткрытия.Вставить("ТекущаяСтрока",     ТекущиеДанные.Ссылка);
		ПараметрыОткрытия.Вставить("СкрыватьВладельца", Истина);
		ПараметрыОткрытия.Вставить("РежимВыбора",       Истина);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
			ПараметрыОткрытия,
			Элемент,
			,
			,
			,
			ОповещениеОВыборе,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиСсылкаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ОбновитьНаКлиенте(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПакетДокументов()
	
	Результат = Новый Соответствие;
	
	Для Каждого СтрокаТабличнойЧасти Из Этикетки Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(СтрокаТабличнойЧасти.Ссылка, УникальныйИдентификатор);
			
			Если ВРег(ДанныеФайла.Расширение) = ВРег("zip") Тогда
				ВременныйКаталог = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
				СоздатьКаталог(ВременныйКаталог);

				ДвоичныеДанныеАрхива = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				
				Попытка
					ЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанныеАрхива.ОткрытьПотокДляЧтения());
					ЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталог);
					ЧтениеZipФайла.Закрыть();
				Исключение
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось распаковать архив %1 по причине %2';
							|en = 'Cannot extract the %1 archive due to %2'"), 
						СтрокаТабличнойЧасти.Ссылка,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					Попытка
						УдалитьФайлы(ВременныйКаталог);
					Исключение
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось удалить каталог временных файлов %1 по причине %2';
								|en = 'Cannot delete the %1 temporary file directory due to %2'"), 
							ВременныйКаталог,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
						// ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
					КонецПопытки;
					
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
					Продолжить;
				КонецПопытки;
				
				ФайлыPDF = НайтиФайлы(ВременныйКаталог, "*.pdf", Истина);
				Индекс   = 1;
				
				Для Каждого Файл Из ФайлыPDF Цикл
					Попытка
						ДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
						Результат.Вставить(СтрокаТабличнойЧасти.НомерПоставки + " (" + Формат(Индекс, "ЧН=; ЧГ=0") + ")", ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор));
						
					Исключение
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось прочитать данные файла %1 из архива %2 по причине %3';
								|en = 'Cannot read the %1 file from the %2 archive due to %3'"), 
							Файл.Имя,
							СтрокаТабличнойЧасти.Ссылка,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
					КонецПопытки;
					
					Индекс = Индекс + 1;
				КонецЦикла;
				
				Попытка
					УдалитьФайлы(ВременныйКаталог);
				Исключение
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось удалить каталог временных файлов %1 по причине %2';
							|en = 'Cannot delete the %1 temporary file directory due to %2'"), 
						ВременныйКаталог,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					// ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				КонецПопытки;
				
			ИначеЕсли ВРег(ДанныеФайла.Расширение) = ВРег("pdf") Тогда
				Результат.Вставить(СтрокаТабличнойЧасти.НомерПоставки, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавлениеФайловДоступно(Ссылка)
	
	МетаданныеИмя = Ссылка.Метаданные().Имя + "ПрисоединенныеФайлы";
	
	Возврат ПравоДоступа("Добавление", Метаданные.Справочники[МетаданныеИмя]);
	
КонецФункции

#КонецОбласти
