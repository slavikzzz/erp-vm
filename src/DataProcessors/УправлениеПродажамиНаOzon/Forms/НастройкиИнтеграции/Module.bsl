 
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗапущеноЗаданиеОбновленияСкладов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЕстьВиртуальныеСкладыПриИзмененииНаСервере();

	ДатаИзмененияНастроек = ТекущаяДатаСеанса();

	УчетнаяЗаписьМаркетплейса = Параметры.УчетнаяЗаписьМаркетплейса;
	ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьМаркетплейса);

	УстановитьУсловноеОформление();

	ПроверитьДанныеПомещеныВХранилище();

	ИзменитьРежимВыбораСкладовFBS();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Не ПодключениеКСервисуВыполнено Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуПодключенияКСервису", 0.1, Истина);
	КонецЕсли;

	СтраницыПриСменеСтраницы(Элементы.Страницы, Элементы.СтраницаСопоставлениеДанных);

	ЗапущеноЗаданиеОбновленияСкладов = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	ЭтоЗакрытиеФормы = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьСписокПодключений" Тогда
		ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьМаркетплейса);

	ИначеЕсли ИмяСобытия = "ОткрытиеФормыНастроекОбменаOzon" Тогда
		ОчиститьСообщения();
		Параметр.Свойство("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		УчетнаяЗаписьПриИзменении(Элементы.УчетнаяЗаписьМаркетплейса);

	ИначеЕсли ИмяСобытия = "ИзмененоОграничениеВыгрузкиОстатковМаркетплейсов" Тогда
		ОбновитьЗаголовокОграниченияВыгрузкиОстатков();

	ИначеЕсли ИмяСобытия = "ОбновитьАвторизациюПриложения" Тогда
		ДанныеПриложенияВХранилище = Параметр; 
		СрокДоступаНаЯндексДиск  = СрокДоступаНаЯндексДиск();
		ЗаполнитьДанныеАвторизацииНаЯндексДиск();
		ОбновитьОтображениеДанных();
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" И Источник = "ИспользоватьСкладыВТабличнойЧастиДокументовПродажи" Тогда
		ИзменитьРежимВыбораСкладовFBS();

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" И Источник = "ИспользоватьКомиссиюПриПродажах" Тогда
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
		ПараметрыОбновления.ОбновитьЗаголовокКомиссионнойПродажи= Истина;
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);
	
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользоватьОрдерныеСклады"
					Или Источник = "ИспользоватьОрдернуюСхемуПриОтгрузке"
					Или Источник = "ПорядокОформленияНакладныхРасходныхОрдеров"
					Или Источник = "РежимФормированияРасходныхОрдеров"
					Или Источник = "ИспользованиеСоглашенийСКлиентами") Тогда
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы(Истина);
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);

	ИначеЕсли ИмяСобытия = "ВыбранСкладFBO" Тогда
		Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса", Параметр.ИдентификаторОбъектаМаркетплейса);
		СтрокиСклада = ТаблицаСкладовFBO.НайтиСтроки(Отбор);
		Если СтрокиСклада.Количество() = 0 Тогда
			Если Не ЗначениеЗаполнено(Параметр.ИдентификаторОбъектаМаркетплейса) Тогда
				Отбор = Новый Структура("НаименованиеОбъектаМаркетплейса", Параметр.НаименованиеОбъектаМаркетплейса);
				СтрокиСклада = ТаблицаСкладовFBO.НайтиСтроки(Отбор);
				Если СтрокиСклада.Количество() <> 0 Тогда
					Возврат;
				КонецЕсли;

				ИдентификаторОбъектаМаркетплейса = Новый УникальныйИдентификатор();
			Иначе
				ИдентификаторОбъектаМаркетплейса = Параметр.ИдентификаторОбъектаМаркетплейса;
			КонецЕсли;
			
			НоваяСтрокаСклада = ТаблицаСкладовFBO.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСклада, Параметр,, "ИдентификаторОбъектаМаркетплейса");
			НоваяСтрокаСклада.ИдентификаторОбъектаМаркетплейса = ИдентификаторОбъектаМаркетплейса;

			ЗаписатьСклад(Элементы.ТаблицаСкладовFBO, НоваяСтрокаСклада);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Ozon_УстаревшиеКатегорииОтсутствуют"
				И Параметр = УчетнаяЗаписьМаркетплейса Тогда
		Элементы.ГруппаУстаревшиеКатегории.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОчиститьСообщения();

	ПерваяСтраница = Элементы.СтраницаСопоставлениеДанных;
	ПоследняяСтраница = Элементы.СтраницаНастройкиПоСхемамРаботы;

	Если Элементы.Страницы.ТекущаяСтраница = ПерваяСтраница Тогда
		Элементы.ФормаДалее.Доступность = Истина;
		Элементы.ФормаНазад.Доступность = Ложь;
		Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = ПоследняяСтраница Тогда
		Элементы.ФормаДалее.Доступность = Ложь;
		Элементы.ФормаНазад.Доступность = Истина;
		Элементы.ФормаНазад.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.ФормаДалее.Доступность = Истина;
		Элементы.ФормаНазад.Доступность = Истина;
		Элементы.ФормаДалее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиОбменаОстатками Тогда
		ОбновитьСписокСкладовFBS();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиПоСхемамРаботы Тогда
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы(Истина);
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);
		ИзменитьЗаполнениеДоговоров(Ложь);
	КонецЕсли;
	
	ПроверитьОбновитьДанныеАвторизацииНаЯндексДиск();

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)

	ЗаполнитьДанныеПоУчетнойЗаписи();
	ЕстьВиртуальныеСклады = Ложь;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСопоставлениеДанных Тогда
		ПроверитьУстаревшиеКатегории();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиОбменаОстатками Тогда
		ОбновитьСписокСкладовFBS();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕстьВиртуальныеСкладыПриИзменении(Элемент)
	ЕстьВиртуальныеСкладыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКатегорииПриИзменении(Элемент)

	СохранитьНастройкиНаСервере();

	ПараметрыФормыСопоставленияКатегорий = Новый Структура; 
	ПараметрыФормыСопоставленияКатегорий.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормыСопоставленияКатегорий.Вставить("ИсточникКатегории", ИсточникКатегории);
	Оповестить("ИсточникКатегорииИзменен", ПараметрыФормыСопоставленияКатегорий);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникКатегорииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныДоСкидокПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныСУчетомСкидокПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныМинимальныхЦенПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияОЗагружаемыхВидахЦенОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВидЦен = ЗначениеЦеныПоИдентификатору(УчетнаяЗаписьМаркетплейса, НавигационнаяСсылкаФорматированнойСтроки);
	Если Не ВидЦен.Пустая() Тогда
		ОповещениеПослеИзменения = Новый ОписаниеОповещения("ПослеИзмененияВидаЦен", ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
		ОткрытьФорму("Справочник.ВидыЦен.ФормаОбъекта", Новый Структура("Ключ", ВидЦен), ЭтотОбъект,,,, ОповещениеПослеИзменения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаУчетаПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
	Оповестить("ИзмененаВалютаУчетнойЗаписиМаркетплейса", Новый Структура("УчетнаяЗаписьМаркетплейса, ВалютаУчета", УчетнаяЗаписьМаркетплейса, ВалютаУчета));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУстановитьПараметрыПодключенияКСервисуНажатие(Элемент)

	ПараметрыФормы = Новый Структура("ПараметрыПриложенияЯндекс, УчетнаяЗаписьМаркетплейса",
		ПараметрыПриложенияЯндексДиск(), УчетнаяЗаписьМаркетплейса);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.АвторизацияПриложенияЯндекс", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеФормированиеРасходныхОрдеровНаТоварыПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РучнаяЗагрузкаДанныхОРеализованныхТоварахПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц1ПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяЗагрузкаДанныхЗаТекущийМесяцПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаПартнерПриИзменении(Элемент)

	ЗаполнитьУсловияПродажПоУмолчанию();
	
	СохранитьНастройкиНаСервере();
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаКонтрагентПриИзменении(Элемент)

	ЗаполнитьДоговорПоУмолчанию();
	
	СохранитьНастройкиНаСервере();
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаСоглашениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТорговаяПлощадкаСоглашение) Тогда
		ЗаполнитьУсловияПродажПоСоглашению();
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();

	ПараметрыВыбораСоглашения.Элемент               = Элемент;
	ПараметрыВыбораСоглашения.Организация           = Организация;
	ПараметрыВыбораСоглашения.Партнер               = ТорговаяПлощадкаПартнер;
	ПараметрыВыбораСоглашения.Документ              = ТорговаяПлощадкаСоглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента         = ОбщегоНазначенияУТВызовСервера.ДатаСеанса();
	ПараметрыВыбораСоглашения.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	ПараметрыВыбораСоглашения.КомиссионныеПродажи25 = Истина;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура  = ЭтотОбъект;

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Валюта", ВалютаУчета));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПродажиРазделяютсяПоДоговорамПриИзменении(Элемент)

	ИзменитьЗаполнениеДоговоров();
	СохранитьНастройкиНаСервере();
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаДоговорFBOПриИзменении(Элемент)

	ИзменитьЗаполнениеДоговоров(Не ПродажиРазделяютсяПоДоговорам);
	ПроверитьИСохранитьВыборДоговора(Элемент);
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяПлощадкаДоговорFBSПриИзменении(Элемент)

	ПроверитьИСохранитьВыборДоговора(Элемент);
	Оповестить("Запись_УчетныеЗаписиМаркетплейсов", УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура УслугаПродажиЧерезТорговуюПлощадкуПриИзменении(Элемент)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСкладовFBS

&НаКлиенте
Процедура ТаблицаСкладовFBSСкладПриИзменении(Элемент)

	ОчиститьСообщения();

	ЗаписатьСклад(Элементы.ТаблицаСкладовFBS);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСкладовFBO

&НаКлиенте
Процедура ТаблицаСкладовFBOПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ОчиститьСообщения();

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НоваяСтрока Тогда
		ТекущиеДанные.ИдентификаторОбъектаМаркетплейса = Новый УникальныйИдентификатор;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовFBOПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаписатьСклад(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовFBOПередУдалением(Элемент, Отказ)
	ЗаписатьСклад(Элемент,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладовFBOПослеУдаления(Элемент)

	ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
	ПараметрыОбновления.ОбновитьЗаголовокСпискаСкладовFBO = Истина;
	ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегистрОграничениеОстатка

&НаКлиенте
Процедура РегистрОграничениеОстаткаПослеУдаления(Элемент)

	ПодключитьОбработчикОжидания("ОбновитьЗаголовокОграниченияВыгрузкиОстатков_Подключаемый", 0.1, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегистрОграничениеОстаткаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Для Каждого СтрокаСписка Из Строки Цикл
		СтрокаСписка.Значение.Данные.ПредставлениеОбластиДействия =
				Строка(СтрокаСписка.Значение.Данные.ОбластьДействия) + " (" + Строка(СтрокаСписка.Значение.Данные.ТипОбластиДействия) + ")";
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)

	СменитьСтраницу("_Далее");

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	СменитьСтраницу("_Назад");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеКатегорий(Команда)

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеКатегорий.ОткрытиеФормыСопоставленияКатегорий");

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана учетная запись для заполнения настроек.';
								|en = 'Account to fill settings is not selected.'");
		ПоказатьПредупреждение(, ТекстСообщения,, НСтр("ru = 'Настройки обмена данными с Ozon';
														|en = 'Data exchange with Ozon settings'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеКатегорий", ПараметрыФормы);
	Оповестить("ОткрытиеФормыСопоставленияКатегорий", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеТиповСертификатов(Команда)

	ПараметрыФормы = Новый Структура("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеТиповСертификатов", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиТоварногоКаталога(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ОбновлениеТоварногоКаталога);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ОбновлениеТоварногоКаталогаOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ОбновлениеТоварногоКаталога);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиЦен(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ВыгрузкаЦен);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ВыгрузкаЦенНаМаркетплейсOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ВыгрузкаЦен);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеОбновленияЦен(Команда)

	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаНастройкиРасписанияАвтообновленияЦен",, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеВыгрузкиОстатковТоваров(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ВыгрузкаОстатков);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ВыгрузкаОстатковНаМаркетплейсOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ВыгрузкаОстатков);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗагрузкиОстатков(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ЗагрузкаОстатков);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных", "ЗагрузкаОстатковСМаркетплейсаOzon");
	ПараметрыФормы.Вставить("Префикс", Префиксы.ЗагрузкаОстатков);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведения(Команда)

	ОбновитьСписокСкладовFBS();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовЦен(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокВидовЦенЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаСписка",,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуПринадлежностиТоваровСхемамРаботыИСкладам(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗаписьМаркетплейса);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.НастройкиПринадлежностиТоваровСхемамРаботы", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзПредопределенныхСкладов(Команда)

	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ВыборСкладовFBO");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗагрузкиДанныхОРеализованныхТоварах(Команда)

	Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса();
	Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(Префиксы.ЗагрузкаИнформацииОПродажахТоваров);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("Наименование",              Наименование);
	ПараметрыФормы.Вставить("ИмяМетаданных",             "ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку");
	ПараметрыФормы.Вставить("Префикс",                   Префиксы.ЗагрузкаИнформацииОПродажахТоваров);
	ПараметрыФормы.Вставить("ОткрыватьПодОграниченнымиПравами", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.РегламентноеЗадание", ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Статус склада
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSНаименованиеОбъектаМаркетплейса.Имя);

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "created";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	Для каждого ЭлементКоллекции Из Элементы.ТаблицаСкладовFBSСтатус.СписокВыбора Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSСтатус.Имя);

		ОтборЭлемента                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Статус");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЭлементКоллекции.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементКоллекции.Представление);
	КонецЦикла;
	
	// Выбор склада FBS/RealFBS
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСкладовFBSСклад1С.Имя);

	ОтборЭлемента               = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСкладовFBS.Склад1С");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Выбрать склад / группу складов 1С>';
																					|en = '<Select warehouse / 1C warehouse group>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

КонецПроцедуры

&НаСервере
Функция СрокДоступаНаЯндексДиск()  
	
	Возврат ИнтеграцияСМаркетплейсамиСервер.ПолучитьДатуДействияДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса);

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеАвторизацииНаЯндексДиск()  
	
	ЧастиСтроки = Новый Массив;
	ТекстЗаголовка = Элементы.ДекорацияСправочнаяИнформация.Заголовок;
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если СрокДоступаНаЯндексДиск < ТекущаяДатаСеанса Тогда 
		
		СостояниеАвторизацииТекст = НСтр("ru = 'Доступ не настроен.';
										|en = 'Доступ не настроен.'");
		СостояниеАвторизации = Новый ФорматированнаяСтрока(СостояниеАвторизацииТекст,,ЦветаСтиля.ЦветОсобогоТекста);
		
	ИначеЕсли СрокДоступаНаЯндексДиск > ТекущаяДатаСеанса
			  И СрокДоступаНаЯндексДиск - 864000 < ТекущаяДатаСеанса Тогда
			  
		КоличествоДней = (НачалоДня(СрокДоступаНаЯндексДиск) - НачалоДня(ТекущаяДатаСеанса)) / (60 * 60 * 24); 

		СостояниеАвторизацииТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
									НСтр("ru = 'Доступ предоставлен до %1 (истекает через %2). Для продления авторизации воспользуйтесь командой ""Подключить Яндекс Диск"".';
										|en = 'Доступ предоставлен до %1 (истекает через %2). Для продления авторизации воспользуйтесь командой ""Подключить Яндекс Диск"".'"),
									Формат(СрокДоступаНаЯндексДиск,"ДФ=dd.MM.yyyy"),
									КоличествоДней);
		СостояниеАвторизации = Новый ФорматированнаяСтрока(СостояниеАвторизацииТекст,,ЦветаСтиля.ЦветОсобогоТекста);
		
	ИначеЕсли СрокДоступаНаЯндексДиск - 864000 > ТекущаяДатаСеанса Тогда
		
		СостояниеАвторизацииТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
									НСтр("ru = 'Доступ предоставлен до %1.';
										|en = 'Доступ предоставлен до %1.'"),
									Формат(СрокДоступаНаЯндексДиск,"ДФ=dd.MM.yyyy"));
		СостояниеАвторизации = Новый ФорматированнаяСтрока(СостояниеАвторизацииТекст,,ЦветаСтиля.РезультатУспехЦвет);
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;  
	ЧастиСтроки.Добавить(СостояниеАвторизации); 
	ЧастиСтроки.Добавить("
						|");
	ЧастиСтроки.Добавить(НСтр("ru = 'Авторизация на сервисе Яндекс Диск необходима для выгрузки изображений товара.';
								|en = 'Авторизация на сервисе Яндекс Диск необходима для выгрузки изображений товара.'"));	
	Элементы.ДекорацияСправочнаяИнформация.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбновитьДанныеАвторизацииНаЯндексДиск() 
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если СрокДоступаНаЯндексДиск > ТекущаяДатаСеанса
		И СрокДоступаНаЯндексДиск - 864000 < ТекущаяДатаСеанса Тогда 
		
		ДлительнаяОперация    = ОбновитьКлючиДоступаПоУчетнойЗаписиНаСервере();
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьКлючиДоступаПоУчетнойЗаписиЗавершениеФоновогоЗадания", ЭтотОбъект, УчетнаяЗаписьМаркетплейса);
		
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
			
		Иначе
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания             = Истина;
			ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Обновление данных авторизации для доступа на Яндекс Диск.';
																		|en = 'Обновление данных авторизации для доступа на Яндекс Диск.'");
			ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
			ПараметрыОжидания.ОповещениеПользователя.Текст     = НСтр("ru = 'Получение данных';
																		|en = 'Получение данных'");
			ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершено Обновление данных авторизации для доступа на Яндекс Диск.';
																		|en = 'Завершено Обновление данных авторизации для доступа на Яндекс Диск.'");
			ПараметрыОжидания.ОповещениеПользователя.Картинка  = БиблиотекаКартинок.ЛоготипЯндексМаркет;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;	
	КонецЕсли;     
	
КонецПроцедуры   

&НаКлиенте  
Процедура ОбновитьКлючиДоступаПоУчетнойЗаписиЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	СрокДоступаНаЯндексДиск  = СрокДоступаНаЯндексДиск();
	ЗаполнитьДанныеАвторизацииНаЯндексДиск();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры 

&НаСервере
Функция ОбновитьКлючиДоступаПоУчетнойЗаписиНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Яндекс Диск. Обновление данных авторизации.';
															|en = 'Яндекс Диск. Обновление данных авторизации.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ИмяМетода = "ИнтеграцияСМаркетплейсамиСервер.ОбновитьКлючиДоступаПоУчетнойЗаписи";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода,
		УчетнаяЗаписьМаркетплейса);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()

	ДоступностьЭлементовФормыПоУчетнойЗаписи = ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса);

	Элементы.ИсточникКатегории.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСопоставлениеКатегорий.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСопоставлениеТиповДокументовСертификатов.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи
			И ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	Элементы.ДекорацияАвторизоватьПриложение.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиТоварногоКаталога.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВалютаУчета.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи
			И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Элементы.ВидЦеныДоСкидок.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВидЦеныСУчетомСкидок.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ВидЦеныМинимальныхЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьСписокВидовЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеОбновленияЦен.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ДекорацияТолькоFBS.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ДекорацияFBOиFBS.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОбновитьСведения.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ТаблицаСкладовFBS.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.РегистрОграничениеОстатка.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеВыгрузкиОстатковТоваров.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	Элементы.ОткрытьРасписаниеЗагрузкиОстатков.Доступность = ДоступностьЭлементовФормыПоУчетнойЗаписи;
	
	ЗаполнитьДанныеАвторизацииНаЯндексДиск();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенияКСервису()

	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеКСервисуЗавершение", ЭтотОбъект);

	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПодключениеКСервису",,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ПодключениеКСервисуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не ПодключениеКСервисуВыполнено Тогда
		Закрыть();
	Иначе
		ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СоответствиеПереключенияСтраниц()

	СоответствиеПереключенияСтраниц = Новый Соответствие;
	СоответствиеПереключенияСтраниц.Вставить("СтраницаСопоставлениеДанных_Далее", "СтраницаНастройкиОбновленияЦен");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбновленияЦен_Далее", "СтраницаНастройкиОбменаОстатками");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбновленияЦен_Назад", "СтраницаСопоставлениеДанных");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбменаОстатками_Далее", "СтраницаНастройкиПоСхемамРаботы");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиОбменаОстатками_Назад", "СтраницаНастройкиОбновленияЦен");
	СоответствиеПереключенияСтраниц.Вставить("СтраницаНастройкиПоСхемамРаботы_Назад", "СтраницаНастройкиОбменаОстатками");

	Возврат СоответствиеПереключенияСтраниц;

КонецФункции

&НаКлиенте
Процедура СменитьСтраницу(Постфикс)

	СоответствиеПереключенияСтраниц = СоответствиеПереключенияСтраниц(); 
	ИмяСтраницы = СоответствиеПереключенияСтраниц[Элементы.Страницы.ТекущаяСтраница.Имя + Постфикс];
	Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[СоответствиеПереключенияСтраниц[Элементы.Страницы.ТекущаяСтраница.Имя + Постфикс]];
		СтраницыПриСменеСтраницы(Элементы.Страницы, Элементы.Страницы.ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСкладовFBS()

	ОчиститьСообщения();

	ТаблицаСкладовFBS.Очистить();

	Если УчетнаяЗаписьМаркетплейса.Пустая() Тогда
		ЗапущеноЗаданиеОбновленияСкладов = Ложь;
		Элементы.ДекорацияДлительноеОжидание.Видимость = Ложь;

		ЕстьВиртуальныеСклады = Ложь;
		ЕстьВиртуальныеСкладыПриИзмененииНаСервере();
		Возврат;
	КонецЕсли;

	Если Не ЗапущеноЗаданиеОбновленияСкладов Тогда
		Элементы.ДекорацияДлительноеОжидание.Видимость = Истина;

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеСпискаСкладовЗавершение", ЭтотОбъект);
		ДлительнаяОперация = ЗапуститьПолучениеСпискаСкладов(УчетнаяЗаписьМаркетплейса, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьРежимВыбораСкладовFBS()
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.ТаблицаСкладовFBSСклад1С);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокОграниченияВыгрузкиОстатков_Подключаемый()

	ОбновитьЗаголовокОграниченияВыгрузкиОстатков();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьПолучениеСпискаСкладов(УчетнаяЗаписьМаркетплейса, УникальныйИдентификатор)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Получение списка складов.';
															|en = 'Ozon. Get a warehouse list.'");

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьСкладыСервиса";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗаписьМаркетплейса);

КонецФункции

&НаКлиенте
Процедура ПолучениеСпискаСкладовЗавершение(РезультатЗадания, ДополнительныеПараметры) Экспорт

	ОчиститьСообщения();

	Если РезультатЗадания <> Неопределено И РезультатЗадания.Статус = "Выполнено" Тогда
		ПолучениеСпискаСкладовЗавершениеНаСервере(РезультатЗадания.АдресРезультата);
	ИначеЕсли Не ЭтоЗакрытиеФормы Тогда  
		ШаблонОшибки = НСтр("ru = 'Не удалось получить склады учетной записи ""%1"" по причине: %2';
							|en = 'Cannot get the ""%1"" account warehouses due to: %2'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции';
												|en = 'Unknown operation error'");
		ПодробноеПредставлениеОшибки = ?(РезультатЗадания = Неопределено, ПредставлениеНеизвестнойОшибки, РезультатЗадания.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				УчетнаяЗаписьМаркетплейса,
				ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);

		ОбновитьЗаголовокОграниченияВыгрузкиОстатков();
	КонецЕсли;

	ЗапущеноЗаданиеОбновленияСкладов = Ложь;
	Элементы.ДекорацияДлительноеОжидание.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПолучениеСпискаСкладовЗавершениеНаСервере(АдресРезультата)

	ОбновитьЗаголовокОграниченияВыгрузкиОстатков();

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);

	ОшибкаПолученияСкладовИзСервиса = Результат.ОшибкаПолученияСкладовИзСервиса;
	Если ОшибкаПолученияСкладовИзСервиса Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить список складов маркетплейса. Подробнее см. журнал регистрации.
				|Заполнение списка складов выполнено из сохраненных настроек.';
				|en = 'Cannot get a marketplace warehouse list. For more information, see the event log.
				|The warehouse list is filled from the saved settings.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	ТаблицаСкладовПолученная = Результат.ТаблицаСкладов;
	ЗначениеВРеквизитФормы(ТаблицаСкладовПолученная, "ТаблицаСкладовFBS");
	
	ЕстьВиртуальныеСклады = (ТаблицаСкладовПолученная.Количество() > 0);

	ЕстьВиртуальныеСкладыПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокОграниченияВыгрузкиОстатков()

	ШаблонЗаголовка = НСтр("ru = 'Настройки ограничения выгрузки остатков';
							|en = 'Settings for balance export restriction'");
	Количество = КоличествоЗаписейОграниченияВыгрузкиОстатков(УчетнаяЗаписьМаркетплейса); 
	ЗаголовокЭлемента = ШаблонЗаголовка + ?(Количество = 0, "", " (" + Количество + ")");
	Элементы.ГруппаНастройкиОграниченияОстатков.Заголовок = ЗаголовокЭлемента;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Конструктор списка параметров для обновления страницы настроек по схемам работы.
// 
// Параметры:
//  ЗначениеПоУмолчанию - Булево - Значение, устанавливаемое параметрам как значение по умолчанию;
//                                - Ложь - значение по умолчанию.
//
// Возвращаемое значение:
//  Структура - список параметров:
//   * ОбновитьСписокСкладовFBO             - Булево - признак необходимости обновления;
//   * ОбновитьЗаголовокСпискаСкладовFBO    - Булево - признак необходимости обновления;
//   * ОбновитьЗаголовокКомиссионнойПродажи - Булево - признак необходимости обновления;
//   * ОбновитьЗаголовкиОрдернойСхемы       - Булево - признак необходимости обновления.
//
Функция ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы(ЗначениеПоУмолчанию = Ложь)

	ПараметрыОбновленияСтраницы = Новый Структура;
	ПараметрыОбновленияСтраницы.Вставить("ОбновитьСписокСкладовFBO", ЗначениеПоУмолчанию);
	ПараметрыОбновленияСтраницы.Вставить("ОбновитьЗаголовокСпискаСкладовFBO", ЗначениеПоУмолчанию);
	ПараметрыОбновленияСтраницы.Вставить("ОбновитьЗаголовокКомиссионнойПродажи", ЗначениеПоУмолчанию);
	ПараметрыОбновленияСтраницы.Вставить("ОбновитьЗаголовкиОрдернойСхемы", ЗначениеПоУмолчанию);

	Возврат ПараметрыОбновленияСтраницы;

КонецФункции

&НаСервере
// Предназначена для обновления элементов страницы с настройками по схемам работы.
//
// Параметры:
//   ПараметрыОбновления - см. ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы.
//
Процедура ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления)

	Если ПараметрыОбновления.ОбновитьЗаголовокКомиссионнойПродажи Тогда
		ИспользоватьКомиссиюПриПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах");

		Элементы.ДекорацияСхемаКомиссионныхПродажЗаголовок1.Видимость = ИспользоватьКомиссиюПриПродажах;
		Элементы.ДекорацияСхемаКомиссионныхПродажЗаголовок2.Видимость = Не ИспользоватьКомиссиюПриПродажах;

		Элементы.ГруппаНастройкиПродаж.Видимость = ИспользоватьКомиссиюПриПродажах;

		Если Не ИспользоватьКомиссиюПриПродажах Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыОбновления.ОбновитьСписокСкладовFBO Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	СоответствияОбъектовМаркетплейсов.ДополнительныеСведения КАК ДополнительныеСведения
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыFBO";

		ТаблицаСкладовFBO.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;

	Если ПараметрыОбновления.ОбновитьЗаголовокСпискаСкладовFBO Тогда
		ШаблонЗаголовкаСпискаСкладов = НСтр("ru = 'Список складов, доступных для формирования поставок';
											|en = 'List of warehouses available for shipment generation'");
		Элементы.ГруппаСписокСкладовFBO.Заголовок = ШаблонЗаголовкаСпискаСкладов
				+ ?(ТаблицаСкладовFBO.Количество(), " (" + ТаблицаСкладовFBO.Количество() + ")", "");
	КонецЕсли;

	Если ПараметрыОбновления.ОбновитьЗаголовкиОрдернойСхемы Тогда
		Прочитать();

		ИспользоватьОрдерныеСклады = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
		ИспользоватьОрдернуюСхемуПриОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
		ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");

		Элементы.ДекорацияНастройкиОформленияРасходныхОрдеровЗаголовок1.Видимость = Не ИспользоватьОрдерныеСклады Или Не ИспользоватьОрдернуюСхемуПриОтгрузке;
		Элементы.ДекорацияНастройкиОформленияРасходныхОрдеровПодсказка1.Видимость = Не ИспользоватьОрдерныеСклады Или Не ИспользоватьОрдернуюСхемуПриОтгрузке;
		Элементы.ДекорацияНастройкиОформленияРасходныхОрдеровЗаголовок2.Видимость = ИспользоватьОрдерныеСклады И ИспользоватьОрдернуюСхемуПриОтгрузке;
		Элементы.ГруппаНастройкиОрдернойСхемы.Видимость                           = ИспользоватьОрдерныеСклады И ИспользоватьОрдернуюСхемуПриОтгрузке;
		Элементы.ТорговаяПлощадкаСоглашение.Видимость                             = ИспользоватьСоглашенияСКлиентами;
		Элементы.ФормированиеРасходныхОрдеровНаТоварыПоПравиламНастроекСистемыПодсказкаССоглашением.Видимость  = ИспользоватьСоглашенияСКлиентами;
		Элементы.ФормированиеРасходныхОрдеровНаТоварыПоПравиламНастроекСистемыПодсказкаБезСоглашения.Видимость = Не ИспользоватьСоглашенияСКлиентами;

		Если ИспользоватьОрдерныеСклады И ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
			Элементы.РежимФормированияРасходныхОрдеров.Подсказка =
					Перечисления.РежимыФормированияРасходныхОрдеров.ПодсказкаПоРежимуФормирования(НаборКонстант.РежимФормированияРасходныхОрдеров);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьПоУмолчанию = Неопределено)

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьПоУмолчанию) Тогда
		УчетнаяЗаписьМаркетплейса = Справочники.УчетныеЗаписиМаркетплейсов.ОсновнаяУчетнаяЗапись(ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon"));
	КонецЕсли;

	ПодключениеКСервисуВыполнено = ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса);
	Если Не ПодключениеКСервисуВыполнено Тогда
		СписокНастроекПодключенияКСервису = ИнтеграцияСМаркетплейсомOzonСервер.СписокНастроекПодключенияКСервису();
		ПодключениеКСервисуВыполнено = (СписокНастроекПодключенияКСервису.Количество() > 0);
	КонецЕсли;

	ЗаполнитьДанныеПоУчетнойЗаписи();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоУчетнойЗаписи()

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);

	НастройкиУчетнойЗаписи.Свойство("ИсточникКатегории",                         ИсточникКатегории);
	НастройкиУчетнойЗаписи.Свойство("ВалютаУчета",                               ВалютаУчета);
	НастройкиУчетнойЗаписи.Свойство("Партнер",                                   ТорговаяПлощадкаПартнер);
	НастройкиУчетнойЗаписи.Свойство("Контрагент",                                ТорговаяПлощадкаКонтрагент);
	НастройкиУчетнойЗаписи.Свойство("Соглашение",                                ТорговаяПлощадкаСоглашение);
	НастройкиУчетнойЗаписи.Свойство("ДоговорПродажиЧерезСкладыТорговойПлощадки", ТорговаяПлощадкаДоговорFBO);
	НастройкиУчетнойЗаписи.Свойство("ДоговорПродажиЧерезСкладыСобственные",      ТорговаяПлощадкаДоговорFBS);
	НастройкиУчетнойЗаписи.Свойство("Организация",                               Организация);

	ПродажиРазделяютсяПоДоговорам = (ТорговаяПлощадкаДоговорFBO <> ТорговаяПлощадкаДоговорFBS);

	Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда
		ВалютаУчета = ЗначениеНастроекКлиентСерверПовтИсп.ВалютаРегламентированногоУчетаОрганизации(НастройкиУчетнойЗаписи.Организация);
		СохранитьНастройкиНаСервере();
	КонецЕсли;

	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныДоСкидок", ВидЦеныДоСкидок);
	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныСУчетомСкидок", ВидЦеныСУчетомСкидок);
	НастройкиУчетнойЗаписи.ВидыЦен.Свойство("ВидЦеныМинимальныхЦен", ВидЦеныМинимальныхЦен);

	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();

	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеНоменклатура", НСтр("ru = 'Номенклатура';
																								|en = 'Items'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеГруппаНоменклатуры", НСтр("ru = 'Группа номенклатуры';
																										|en = 'Items group'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеТоварнаяКатегория", НСтр("ru = 'Товарная категория';
																										|en = 'Product category'"));
	РегистрОграничениеОстатка.Параметры.УстановитьЗначениеПараметра("ОписаниеВидНоменклатуры", НСтр("ru = 'Вид номенклатуры';
																									|en = 'Item kind'"));

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РегистрОграничениеОстатка, "УчетнаяЗаписьМаркетплейса",
			УчетнаяЗаписьМаркетплейса, ВидСравненияКомпоновкиДанных.Равно);

	ДополнительныеНастройки = Неопределено;
	Если НастройкиУчетнойЗаписи.Свойство("ДополнительныеНастройки", ДополнительныеНастройки) Тогда
		ЗначениеНастройки = ДополнительныеНастройки.Получить("РучнаяЗагрузкаДанныхОРеализованныхТоварах");
		РучнаяЗагрузкаДанныхОРеализованныхТоварах =
			?(ЗначениеНастройки = Неопределено, Истина, ЗначениеНастройки); // Используется всегда

		ЗначениеНастройки = ДополнительныеНастройки.Получить("АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах");
		АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах =
			?(ЗначениеНастройки = Неопределено, Истина, ЗначениеНастройки); // Используется всегда

		ЗначениеНастройки = ДополнительныеНастройки.Получить("АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц");
		АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц =
			?(ЗначениеНастройки = Неопределено, Истина, ЗначениеНастройки); // Используется всегда

		ЗначениеНастройки = ДополнительныеНастройки.Получить("АвтоматическоеФормированиеРасходныхОрдеровНаТовары");
		АвтоматическоеФормированиеРасходныхОрдеровНаТовары =
			?(ЗначениеНастройки = Неопределено, Ложь, ЗначениеНастройки);

		ЗначениеНастройки = ДополнительныеНастройки.Получить("АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц");
		АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц =
			?(ЗначениеНастройки = Неопределено, Ложь, ЗначениеНастройки);

		ЗначениеНастройки = ДополнительныеНастройки.Получить("УслугаПродажиЧерезТорговуюПлощадку");
		УслугаПродажиЧерезТорговуюПлощадку = ЗначениеНастройки;
	Иначе
		РучнаяЗагрузкаДанныхОРеализованныхТоварах                          = Истина; // Используется всегда
		АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах                  = Истина; // Используется всегда
		АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц = Истина; // Используется всегда
	КонецЕсли;

	СрокДоступаНаЯндексДиск  = СрокДоступаНаЯндексДиск();
	УстановитьВидимостьДоступностьЭлементовФормы();

	Заголовок = НСтр("ru = 'Настройки обмена данными с Ozon';
					|en = 'Data exchange with Ozon settings'");
	Если Не УчетнаяЗаписьМаркетплейса.Пустая() Тогда
		Заголовок = Заголовок + " - " + УчетнаяЗаписьМаркетплейса;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЕстьВиртуальныеСкладыПриИзмененииНаСервере()

	Элементы.ДекорацияТолькоFBS.Видимость = Не ЕстьВиртуальныеСклады;
	Элементы.ДекорацияFBOиFBS.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаСкладыFBS.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаОстатки.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ГруппаОграничениеОстатков.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ДекорацияНастройкиСкладовШаг4.Видимость = ЕстьВиртуальныеСклады;
	Элементы.ДекорацияНастройкиСкладовШаг4_1.Видимость = Не ЕстьВиртуальныеСклады;
	Элементы.ОткрытьРасписаниеВыгрузкиОстатковТоваров.Видимость = ЕстьВиртуальныеСклады;
	ШаблонЗаголовкаСпискаСкладов = НСтр("ru = 'Настройки соответствия складов';
										|en = 'Warehouse mapping settings'");
	Элементы.ГруппаНастройкиСоответствияСкладовFBS.Заголовок = ШаблонЗаголовкаСпискаСкладов
			+ ?(ТаблицаСкладовFBS.Количество(), " (" + ТаблицаСкладовFBS.Количество() + ")", "");

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаполнениеДоговоров(ЗаполнитьЗначениеДоговора = Истина)

	Элементы.ТорговаяПлощадкаДоговорFBS.Видимость = ПродажиРазделяютсяПоДоговорам;
	Если ПродажиРазделяютсяПоДоговорам Тогда
		Если ЗаполнитьЗначениеДоговора И ТорговаяПлощадкаДоговорFBS = ТорговаяПлощадкаДоговорFBO Тогда
			ТорговаяПлощадкаДоговорFBS = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;

		Элементы.ТорговаяПлощадкаДоговорFBO.Заголовок = НСтр("ru = 'Договор для продажи со складов Ozon (FBO)';
															|en = 'Contract of sales from Ozon warehouses (FBO)'");
		Элементы.ТорговаяПлощадкаДоговорFBO.Подсказка = НСтр("ru = 'Для передачи товаров на склады торговой площадки и оформления продаж с этих складов.';
															|en = 'To transfer goods to marketplace warehouses and register sales from these warehouses.'");
		Элементы.ТорговаяПлощадкаДоговорFBO.ПодсказкаВвода = НСтр("ru = 'Договор продажи со складов Ozon';
																	|en = 'Contract for sales from Ozon warehouses'");

		Элементы.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах.Видимость = Ложь;
		Элементы.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц.Видимость = Ложь;
		Элементы.ОткрытьРасписаниеЗагрузкиДанныхОРеализованныхТоварах.Видимость = Ложь;

		Элементы.РучнаяЗагрузкаДанныхОРеализованныхТоварах.Заголовок =
			НСтр("ru = 'Доступна загрузка данных из файла позаказного отчета о реализации товара';
				|en = 'You can import data from the file of the sales report by orders'");
	Иначе
		Если ЗаполнитьЗначениеДоговора Тогда
			ТорговаяПлощадкаДоговорFBS = ТорговаяПлощадкаДоговорFBO;
		КонецЕсли;

		Элементы.ТорговаяПлощадкаДоговорFBO.Заголовок = НСтр("ru = 'Договор';
															|en = 'Contract'");
		Элементы.ТорговаяПлощадкаДоговорFBO.Подсказка = НСтр("ru = 'Для оформления продаж через торговую площадку при любой схеме продаж (FBO, FBS и RealFBS).';
															|en = 'To register sales via the trading platform using any sales scheme (FBO, FBS, and RealFBS).'");
		Элементы.ТорговаяПлощадкаДоговорFBO.ПодсказкаВвода = НСтр("ru = 'Договор продажи со складов Ozon и с собственных складов';
																	|en = 'Contact of sales from Ozon and own warehouses'");

		Элементы.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах.Видимость = Истина;
		Элементы.АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц.Видимость = Истина;
		Элементы.ОткрытьРасписаниеЗагрузкиДанныхОРеализованныхТоварах.Видимость = Истина;

		Элементы.РучнаяЗагрузкаДанныхОРеализованныхТоварах.Заголовок =
			НСтр("ru = 'Доступна загрузка данных за выбранный месяц или из файла позаказного отчета о реализации товара';
				|en = 'Data import is available for the selected month or from the file of the displayed sales report'");
	КонецЕсли;

	Если ЗаполнитьЗначениеДоговора Тогда
		Префиксы = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса(Истина);
		УстановитьИспользованиеРегламентногоЗаданияНаСервере(
			УчетнаяЗаписьМаркетплейса,
			Префиксы.ЗагрузкаИнформацииОПродажахТоваров,
			Не ПродажиРазделяютсяПоДоговорам);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()

	ХешНастроек = Справочники.УчетныеЗаписиМаркетплейсов.ПолучитьХешНастроекПоСсылке(УчетнаяЗаписьМаркетплейса);

	Если ХешНастроек <> Неопределено И ХешНастроек <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ХешНастроек") Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьМаркетплейса);
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УчетнаяЗаписьМаркетплейса);
			БлокировкаДанных.Заблокировать();

			УчетнаяЗаписьОбъект = УчетнаяЗаписьМаркетплейса.ПолучитьОбъект();

			// Заполнение основных настроек
			УчетнаяЗаписьОбъект.ИсточникКатегории                         = ИсточникКатегории;
			УчетнаяЗаписьОбъект.ВалютаУчета                               = ВалютаУчета;
			УчетнаяЗаписьОбъект.Партнер                                   = ТорговаяПлощадкаПартнер;
			УчетнаяЗаписьОбъект.Контрагент                                = ТорговаяПлощадкаКонтрагент;
			УчетнаяЗаписьОбъект.Соглашение                                = ТорговаяПлощадкаСоглашение;
			УчетнаяЗаписьОбъект.ДоговорПродажиЧерезСкладыТорговойПлощадки = ТорговаяПлощадкаДоговорFBO;
			УчетнаяЗаписьОбъект.ДоговорПродажиЧерезСкладыСобственные      = ТорговаяПлощадкаДоговорFBS;

			// Заполнение видов цен
			ИмяНастройки = "ВидЦеныДоСкидок";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ВидыЦен.Найти(ИмяНастройки, "ИмяНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
				СтрокаНастройки.ИмяНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ВидЦены = ВидЦеныДоСкидок;

			ИмяНастройки = "ВидЦеныСУчетомСкидок";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ВидыЦен.Найти(ИмяНастройки, "ИмяНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
				СтрокаНастройки.ИмяНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ВидЦены = ВидЦеныСУчетомСкидок;

			ИмяНастройки = "ВидЦеныМинимальныхЦен";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ВидыЦен.Найти(ИмяНастройки, "ИмяНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ВидыЦен.Добавить();
				СтрокаНастройки.ИмяНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ВидЦены = ВидЦеныМинимальныхЦен;

			// Заполнение дополнительных настроек
			ИмяНастройки = "АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Найти(ИмяНастройки, "ИдентификаторНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Добавить();
				СтрокаНастройки.ИдентификаторНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ЗначениеНастройки = АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах;

			ИмяНастройки = "АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Найти(ИмяНастройки, "ИдентификаторНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Добавить();
				СтрокаНастройки.ИдентификаторНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ЗначениеНастройки = АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц;

			ИмяНастройки = "АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Найти(ИмяНастройки, "ИдентификаторНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Добавить();
				СтрокаНастройки.ИдентификаторНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ЗначениеНастройки = АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц;

			ИмяНастройки = "АвтоматическоеФормированиеРасходныхОрдеровНаТовары";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Найти(ИмяНастройки, "ИдентификаторНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Добавить();
				СтрокаНастройки.ИдентификаторНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ЗначениеНастройки = АвтоматическоеФормированиеРасходныхОрдеровНаТовары;

			ИмяНастройки = "РучнаяЗагрузкаДанныхОРеализованныхТоварах";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Найти(ИмяНастройки, "ИдентификаторНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Добавить();
				СтрокаНастройки.ИдентификаторНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ЗначениеНастройки = РучнаяЗагрузкаДанныхОРеализованныхТоварах;

			ИмяНастройки = "УслугаПродажиЧерезТорговуюПлощадку";
			СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Найти(ИмяНастройки, "ИдентификаторНастройки");
			Если СтрокаНастройки = Неопределено Тогда
				СтрокаНастройки = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Добавить();
				СтрокаНастройки.ИдентификаторНастройки = ИмяНастройки;
			КонецЕсли;
			СтрокаНастройки.ЗначениеНастройкиСсылка = УслугаПродажиЧерезТорговуюПлощадку;

			УчетнаяЗаписьОбъект.Записать();
	
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСклад(Элемент, ТекущиеДанные = Неопределено, ЭтоУдалениеСтроки = Ложь)

	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
	КонецЕсли;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭтоЗаписьСкладаFBS = (Элемент.Имя = "ТаблицаСкладовFBS");

	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("НеПроверятьЗаполнениеОбъекта1С",   Не ЭтоЗаписьСкладаFBS И Не ЭтоУдалениеСтроки);
	ДанныеЗаписи.Вставить("УчетнаяЗаписьМаркетплейса",        УчетнаяЗаписьМаркетплейса);
	ДанныеЗаписи.Вставить("ВидОбъектаМаркетплейса",           ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Склад"));
	ДанныеЗаписи.Вставить("ИдентификаторОбъектаМаркетплейса", ТекущиеДанные.ИдентификаторОбъектаМаркетплейса);
	ДанныеЗаписи.Вставить("НаименованиеОбъектаМаркетплейса",  ТекущиеДанные.НаименованиеОбъектаМаркетплейса);
	ДанныеЗаписи.Вставить("ДополнительныеСведения",           ?(ЭтоЗаписьСкладаFBS, "", ТекущиеДанные.ДополнительныеСведения));
	ДанныеЗаписи.Вставить("Объект1С",                         ?(ЭтоЗаписьСкладаFBS,  ТекущиеДанные.Склад1С, Неопределено));
	ДанныеЗаписи.Вставить("ИспользуетсяДляСхемыРаботыFBO",    Не ЭтоЗаписьСкладаFBS);
	ДанныеЗаписи.Вставить("ИспользуетсяДляСхемыРаботыFBS",    ЭтоЗаписьСкладаFBS И Не ТекущиеДанные.ЭтоRealFBS);
	ДанныеЗаписи.Вставить("ИспользуетсяДляСхемыРаботыDBS",    ЭтоЗаписьСкладаFBS И ТекущиеДанные.ЭтоRealFBS);

	ПроверкаПройдена = ПроверитьИЗаписатьСоответствие(ДанныеЗаписи);

	Если ПроверкаПройдена Тогда
		ОчиститьСообщения();
		Если ЭтоЗаписьСкладаFBS Тогда
			ОчиститьОстаткиПоСкладу(УчетнаяЗаписьМаркетплейса, ТекущиеДанные.Склад1С);
		КонецЕсли;
	ИначеЕсли ЭтоЗаписьСкладаFBS Тогда
		ТекущиеДанные.Склад1С = Неопределено;
	Иначе
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
		ПараметрыОбновления.ОбновитьЗаголовокСпискаСкладовFBO = Истина;
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);
	КонецЕсли;

	Если Не ЭтоЗаписьСкладаFBS И Не ЭтоУдалениеСтроки Тогда
		ПараметрыОбновления = ПараметрыОбновленияСтраницыНастройкиПоСхемамРаботы();
		ПараметрыОбновления.ОбновитьЗаголовокСпискаСкладовFBO = Истина;
		ОбновитьЭлементыСтраницыНастройкиПоСхемамРаботы(ПараметрыОбновления);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьИЗаписатьСоответствие(ДанныеЗаписи)

	ПроверкаПройдена = Истина;

	Если ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда

		СообщенияПроверки = Новый Массив;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ИдентификаторСклада", ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);
		Запрос.УстановитьПараметр("УстанавливаемыйСклад", ДанныеЗаписи.Объект1С);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Склады.Ссылка) КАК ПредставлениеСклада,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка = &УстанавливаемыйСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = """"
			|	И СоответствияОбъектовМаркетплейсов.Объект1С В ИЕРАРХИИ(&УстанавливаемыйСклад)
			|	И ВЫБОР
			|			КОГДА Склады.ЭтоГруппа
			|				ТОГДА СоответствияОбъектовМаркетплейсов.Объект1С <> &УстанавливаемыйСклад
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	Склады.Наименование КАК НаименованиеСклада1С,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	Склады.ЭтоГруппа КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|			И (Склады.ЭтоГруппа)
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада";

		УстановитьПривилегированныйРежим(Истина);
		ПакетЗапроса = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);

		// Проверка на вхождение записанных складов в иерархию выбранного склада.

		МассивПересечений = Новый Массив;

		ПолноеНаименованиеУстанавливаемогоСклада = "";
		ПредставлениеСклада = "";
		ЭтоГруппаСкладов = Ложь;

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 2].Выбрать();
		Если ВыборкаСкладов.Следующий() Тогда
			ПолноеНаименованиеУстанавливаемогоСклада = "/" + ДанныеЗаписи.Объект1С.ПолноеНаименование() + "/";
			ПредставлениеСклада = ВыборкаСкладов.ПредставлениеСклада;
			ЭтоГруппаСкладов = ВыборкаСкладов.ЭтоГруппа;
		КонецЕсли;

		Если ЭтоГруппаСкладов Тогда
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемая группа складов <%1> совпадает со значением для склада маркетплейса <%2>.';
											|en = 'The <%1> warehouse group to set matches the value for the <%2> marketplace warehouse.'");
		Иначе
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемый склад <%1> совпадает со значением для склада маркетплейса <%2>.';
											|en = 'The <%1> warehouse to set matches the value for the <%2> marketplace warehouse.'");
		КонецЕсли;

		ШаблонПересеченияСклада = " - " + НСтр("ru = 'склад 1С <%1>, установленный для склада маркетплейса <%2>';
												|en = 'the <%1> 1C warehouse set for the <%2> marketplace warehouse'");
		ШаблонПересеченияГруппыСклада = " - " + НСтр("ru = 'группа складов 1С <%1>, установленная для склада маркетплейса <%2>';
													|en = 'the <%1> 1C warehouse group set for the <%2> marketplace warehouse'");

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 1].Выбрать();
		Пока ВыборкаСкладов.Следующий() Цикл
			Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
						ПредставлениеСклада, 
						ВыборкаСкладов.СкладМаркетплейса);

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
				Продолжить;
			КонецЕсли;

			Шаблон = ?(ВыборкаСкладов.ЭтоГруппа, ШаблонПересеченияГруппыСклада, ШаблонПересеченияСклада);

			ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
					ВыборкаСкладов.ПредставлениеСклада1С,
					ВыборкаСкладов.СкладМаркетплейса);

			МассивПересечений.Добавить(ОписаниеПересечения);
		КонецЦикла;

		Если МассивПересечений.Количество() > 0 Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены склады, входящие в состав выбранной группы складов <%1>: %2.';
											|en = 'Warehouses included in the selected <%1> warehouse group are found: %2.'");

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПроверки,
					ПредставлениеСклада,
					Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

			СообщенияПроверки.Добавить(ТекстСообщения);

			ПроверкаПройдена = Ложь;
		КонецЕсли;

		// Проверка на вхождение выбранного склада в иерархию записанных складов.

		Если ЗначениеЗаполнено(ПолноеНаименованиеУстанавливаемогоСклада) Тогда
			МассивПересечений = Новый Массив;

			ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница()].Выбрать();
			Пока ВыборкаСкладов.Следующий() Цикл
				Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
							ПредставлениеСклада, 
							ВыборкаСкладов.СкладМаркетплейса);

					СообщенияПроверки.Добавить(ТекстСообщения);

					ПроверкаПройдена = Ложь;
					Продолжить;
				КонецЕсли;

				НаименованиеСкладаВыборки = "/" + ВыборкаСкладов.НаименованиеСклада1С + "/";
				Если СтрНайти(ПолноеНаименованиеУстанавливаемогоСклада, НаименованиеСкладаВыборки) Тогда
					ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПересеченияГруппыСклада,
							ВыборкаСкладов.ПредставлениеСклада1С,
							ВыборкаСкладов.СкладМаркетплейса);

					МассивПересечений.Добавить(ОписаниеПересечения);

					ПроверкаПройдена = Ложь;
				КонецЕсли;
			КонецЦикла;

			Если МассивПересечений.Количество() > 0 Тогда
				Если ЭтоГруппаСкладов Тогда
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранная группа складов <%1>: %2.';
													|en = 'Warehouse groups containing the selected <%1> warehouse group are found: %2.'");
				Иначе
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранный склад <%1>: %2.';
													|en = 'Warehouse groups containing the selected <%1> warehouse are found: %2.'");
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( ШаблонСообщенияПроверки,
						ПредставлениеСклада,
						Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если СообщенияПроверки.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщенияПроверки, Символы.ПС));
		КонецЕсли;
	ИначеЕсли ДанныеЗаписи.ИспользуетсяДляСхемыРаботыFBO Тогда
		Если ПустаяСтрока(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса) И ПустаяСтрока(ДанныеЗаписи.НаименованиеОбъектаМаркетплейса) Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Склад, для которого не заполнены наименование и идентификатор, не может быть записан.';
											|en = 'Fill the warehouse name and ID to save the warehouse.'");
			ПроверкаПройдена = Ложь;
		ИначеЕсли ПустаяСтрока(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса) Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Склад, для которого не заполнен идентификатор, не может быть записан.';
											|en = 'Fill the warehouse ID to save the warehouse.'");
			ПроверкаПройдена = Ложь;
		ИначеЕсли ПустаяСтрока(ДанныеЗаписи.НаименованиеОбъектаМаркетплейса) Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Склад, для которого не заполнено наименование, не может быть записан.';
											|en = 'Fill the warehouse name to save the warehouse.'");
			ПроверкаПройдена = Ложь;
		КонецЕсли;

		Если Не ПроверкаПройдена Тогда
			ОбщегоНазначения.СообщитьПользователю(ШаблонСообщенияПроверки);
		КонецЕсли;
	КонецЕсли;

	Если ПроверкаПройдена Тогда
		ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи);
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи)

	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ДанныеЗаписи.ВидОбъектаМаркетплейса);
	НаборЗаписей.Отбор.ИдентификаторОбъектаМаркетплейса.Установить(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);

	НеПроверятьЗаполнениеОбъекта1С =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаписи, "НеПроверятьЗаполнениеОбъекта1С", Ложь);
	Если НеПроверятьЗаполнениеОбъекта1С Или ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
		Запись.ДатаАктуальности = ТекущаяДатаСеанса();
	КонецЕсли;

	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьОстаткиПоСкладу(Знач УчетнаяЗапись, Знач Склад)
	
	РегистрыСведений.ОстаткиТоваровМаркетплейсов.ОчиститьЗаписиПоСкладу(УчетнаяЗапись, Склад);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИСохранитьВыборДоговора(Элемент)

	ОчиститьСообщения();

	Если ПродажиРазделяютсяПоДоговорам И Не ЭтотОбъект[Элемент.Имя].Пустая() И ТорговаяПлощадкаДоговорFBO = ТорговаяПлощадкаДоговорFBS Тогда
		ШаблонСообщения = НСтр("ru = 'Недопустимо совпадение значений настроек ""%1"" и ""%2""';
								|en = 'The ""%1"" and ""%2"" settings values must not match.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элементы.ТорговаяПлощадкаДоговорFBO.Заголовок,
			Элементы.ТорговаяПлощадкаДоговорFBS.Заголовок),, Элемент.Имя);
		ЭтотОбъект[Элемент.Имя] = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;

	СохранитьНастройкиНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОЗагружаемыхВидахЦен()

	ШаблонПустогоВидаЦен = Символы.Таб + НСтр("ru = 'Для загружаемого типа цен ""%1"" вид цены <b>не задан</b>.';
												|en = 'For the %1 price type to import, a price type is <b>not set</b>.'");
	ШаблонЗаполненногоВидаЦен = Символы.Таб + НСтр("ru = 'Для загружаемого типа цен ""%1"" задан вид цены <a href=""%2"">%3</a>.';
													|en = 'For the %1 price type to import, the <a href=""%2"">%3</a> price type is set.'");

	МассивФормированияЗаголовка = Новый Массив;
	МассивФормированияЗаголовка.Добавить(НСтр("ru = 'Информация о загружаемых видах цен:';
												|en = 'Information about price types to import:'"));
	МассивФормированияЗаголовка.Добавить(Символы.ПС);

	ВидыЦенУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Ложь);

	Для Каждого ВидЦеныУчетнойЗаписи Из ВидыЦенУчетнойЗаписи Цикл
		Если ВидЦеныУчетнойЗаписи.Значение.Пустая() Тогда
			СтрокаЗаголовка = СтроковыеФункции.ФорматированнаяСтрока( ШаблонПустогоВидаЦен, ВидЦеныУчетнойЗаписи.Наименование);
		Иначе
			СтрокаЗаголовка = СтроковыеФункции.ФорматированнаяСтрока(ШаблонЗаполненногоВидаЦен, ВидЦеныУчетнойЗаписи.Наименование,
					ВидЦеныУчетнойЗаписи.Идентификатор, ВидЦеныУчетнойЗаписи.Значение);
		КонецЕсли;
		МассивФормированияЗаголовка.Добавить(СтрокаЗаголовка);
		МассивФормированияЗаголовка.Добавить(Символы.ПС);
	КонецЦикла;

	МассивФормированияЗаголовка.Удалить(МассивФормированияЗаголовка.ВГраница());

	Элементы.ДекорацияИнформацияОЗагружаемыхВидахЦен.Заголовок = Новый ФорматированнаяСтрока(МассивФормированияЗаголовка);

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоЗаписейОграниченияВыгрузкиОстатков(УчетнаяЗаписьМаркетплейса)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК СчетчикЗаписи
		|ИЗ
		|	РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК Источник
		|ГДЕ
		|	Источник.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса";
	КоличествоЗаписей = Запрос.Выполнить().Выбрать().Количество();

	Возврат КоличествоЗаписей;

КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыПриложенияЯндексДиск()

	Возврат ИнтеграцияСМаркетплейсамиСервер.ПараметрыПриложенияЯндексДиск();

КонецФункции

&НаСервере
Процедура ПроверитьДанныеПомещеныВХранилище()

	ПараметрыПриложенияЯндексДиск = ПараметрыПриложенияЯндексДиск();
	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыПриложенияЯндексДиск.ИдентификаторПриложения;

	УстановитьПривилегированныйРежим(Истина);
	ЗначениеКлюча = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресВХранилище, "expires_in");
	УстановитьПривилегированныйРежим(Ложь);

	ДанныеПриложенияВХранилище = ЗначениеКлюча <> Неопределено;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеЦеныПоИдентификатору(УчетнаяЗаписьМаркетплейса, Идентификатор)

	ВидыЦенУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonСервер.ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Ложь);
	Результат = ВидыЦенУчетнойЗаписи.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Значение;
	КонецЕсли;

	Возврат Справочники.ВидыЦен.ПустаяСсылка();

КонецФункции

&НаКлиенте
Процедура ПослеИзмененияВидаЦен(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	ЗаполнитьИнформациюОЗагружаемыхВидахЦен();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажПоУмолчанию()
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");

	Если ЗначениеЗаполнено(ТорговаяПлощадкаПартнер) Или Не ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию); 
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение",   ТорговаяПлощадкаСоглашение);
		ПараметрыОтбора.Вставить("КомиссионныеПродажи25", Истина);
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ТорговаяПлощадкаПартнер, ПараметрыОтбора);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			Если Не ИспользоватьСоглашенияСКлиентами 
					Или (ТорговаяПлощадкаСоглашение <> УсловияПродажПоУмолчанию.Соглашение И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
				ТорговаяПлощадкаСоглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			Иначе
				ТорговаяПлощадкаСоглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ТорговаяПлощадкаПартнер, ТорговаяПлощадкаКонтрагент);
			ТорговаяПлощадкаСоглашение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж)
	
	Если УсловияПродаж <> Неопределено Тогда
		Если Не УсловияПродаж.Типовое
				 И ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			ТорговаяПлощадкаКонтрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ТорговаяПлощадкаПартнер, ТорговаяПлощадкаКонтрагент);
		
		Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
			Объект = Новый Структура;
			Объект.Вставить("Организация", Организация);
			Объект.Вставить("Партнер",     ТорговаяПлощадкаПартнер);
			Объект.Вставить("Контрагент",  ТорговаяПлощадкаКонтрагент);
			Объект.Вставить("Соглашение",  ТорговаяПлощадкаСоглашение);

			Объект.Вставить("Договор", ТорговаяПлощадкаДоговорFBO);
			ТорговаяПлощадкаДоговорFBO = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
				Объект,
				Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,
				,
				,
				УсловияПродаж.НоваяСхемаКомиссии);

			Объект.Вставить("Договор", ТорговаяПлощадкаДоговорFBS);
			ТорговаяПлощадкаДоговорFBS = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
				Объект,
				Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,
				,
				,
				УсловияПродаж.НоваяСхемаКомиссии);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажПоСоглашению()
	
	УстановитьПривилегированныйРежим(Истина);
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ТорговаяПлощадкаСоглашение);
	Если Организация <> Неопределено Тогда
		УсловияПродаж.Организация = Организация;
	КонецЕсли;
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если ЗначениеЗаполнено(ТорговаяПлощадкаКонтрагент) Тогда
		Объект = Новый Структура;
		Объект.Вставить("Организация", Организация);
		Объект.Вставить("Партнер",     ТорговаяПлощадкаПартнер);
		Объект.Вставить("Контрагент",  ТорговаяПлощадкаКонтрагент);
		Объект.Вставить("Соглашение",  ТорговаяПлощадкаСоглашение);

		Объект.Вставить("Договор", ТорговаяПлощадкаДоговорFBO);
		ТорговаяПлощадкаДоговорFBO = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Объект,
			Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,
			,
			,
			Истина);

		Объект.Вставить("Договор", ТорговаяПлощадкаДоговорFBS);
		ТорговаяПлощадкаДоговорFBS = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Объект,
			Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,
			,
			,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИспользованиеРегламентногоЗаданияНаСервере(УчетнаяЗаписьМаркетплейса, Префикс, Использование)

	Идентификатор = УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор();
	МенеджерОбъекта = Справочники.УчетныеЗаписиМаркетплейсов;
	УстановитьПривилегированныйРежим(Истина);
	МенеджерОбъекта.УстановитьИспользованиеРегламентногоЗадания(Префикс + Идентификатор, Использование);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#Область УстаревшиеКатегории

&НаКлиенте
Процедура ПроверитьУстаревшиеКатегории()

	ДлительнаяОперация    = ПроверитьУстаревшиеКатегорииНаСервере();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьУстаревшиеКатегорииЗавершениеФоновогоЗадания", ЭтотОбъект);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
	
	Иначе
		ПараметрыОжидания 					   = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьУстаревшиеКатегорииНаСервере()

	ПараметрыВыполнения 							 = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Проверка устаревших категорий торговой площадки.';
															|en = 'Ozon. Check outdated trading platform categories.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ОпределитьУстаревшиеКатегории";
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода, 
		УчетнаяЗаписьМаркетплейса,
		1);

КонецФункции

&НаКлиенте
Процедура ПроверитьУстаревшиеКатегорииЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		ИначеЕсли Результат.Статус = "Выполнено" 
		 			И Результат.Свойство("АдресРезультата") Тогда
			Ошибка = РезультатПроверкиУстаревшихКатегорийНаСервере(Результат.АдресРезультата);
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(Ошибка, ДополнительныеПараметры, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция РезультатПроверкиУстаревшихКатегорийНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ЗначениеЗаполнено(Результат.Ошибка.КодОшибки) Тогда
		Элементы.ГруппаУстаревшиеКатегории.Видимость = (Результат.УстаревшиеКатегории.Количество() > 0);
	КонецЕсли;
	
	Возврат Результат.Ошибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти
