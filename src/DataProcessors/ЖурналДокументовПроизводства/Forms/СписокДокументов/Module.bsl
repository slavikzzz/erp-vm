
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	НавигационнаяСсылка = "e1cib/app/Обработка.ЖурналДокументовПроизводства";
	
	ВосстановитьНастройки(Параметры);
	
	ТЗХозОперацииИТипыДокументов = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(ОписаниеОперацийИТиповДокументов(),
		ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНастроек);
	ТЗХозОперацииИТипыДокументов.Сортировать("Порядок");
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	ИспользуетсяОграничениеПоОрганизации = УправлениеДоступом.ЕстьОграничениеТаблицыПоВидуДоступа(
		"РегистрСведений.РеестрДокументов", "Организации", "ГруппыПартнеров,Организации,Подразделения,Склады");
	
	ИспользуетсяОграничениеПоСкладу = УправлениеДоступом.ЕстьОграничениеТаблицыПоВидуДоступа(
		"РегистрСведений.РеестрДокументов", "Склады", "ГруппыПартнеров,Организации,Подразделения,Склады");
	
	ИспользуетсяОграничениеПоПодразделению = УправлениеДоступом.ЕстьОграничениеТаблицыПоВидуДоступа(
		"РегистрСведений.РеестрДокументов", "Подразделения", "ГруппыПартнеров,Организации,Подразделения,Склады");
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	// ПроверкаДокументовВРеглУчете
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, СписокДокументыПроизводства);
	ПроверкаДокументовСервер.ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(СвойстваСписка.ТекстЗапроса, "РеестрДокументовПереопределяемый");
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокДокументыПроизводства, СвойстваСписка);
	// Конец ПроверкаДокументовВРеглУчете
	
	ИспользуемыеТипыДокументов = ТЗХозОперацииИТипыДокументов.ВыгрузитьКолонку("ТипДокумента");
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.Сторно"));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокДокументыПроизводстваКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.ГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПроизводствоБезЗаказа"
		ИЛИ ИмяСобытия = "Запись_РаспределениеВозвратныхОтходов"
		ИЛИ ИмяСобытия = "Запись_ДвижениеПродукцииИМатериалов"
		//++ НЕ УТКА
		ИЛИ ИмяСобытия = "Запись_ЭтапыПроизводства"
		//-- НЕ УТКА
		ИЛИ ИмяСобытия = "Запись_АктВыполненныхВнутреннихРабот"
		ИЛИ ИмяСобытия = "Запись_РаспределениеПроизводственныхЗатрат"
		ИЛИ ИмяСобытия = "Запись_РаспределениеПрочихЗатрат"
		ИЛИ ИмяСобытия = "Проведение_Сторно"
		Или ИмяСобытия = "Запись_Сторно" Тогда
		
		Элементы.СписокДокументыПроизводства.Обновить();
		
		ОбновитьГиперссылкуКОформлению();
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаказМатериаловВПроизводство"
		//++ НЕ УТКА
		ИЛИ ИмяСобытия = "Запись_ЭтапыПроизводства"
		//-- НЕ УТКА
		Тогда
		
		ОбновитьГиперссылкуКОформлению();
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументыПроизводства,
		"Менеджер",
		Менеджер,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Менеджер));
	
	ОбновитьГиперссылкуКОформлению();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", 
		ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПроизводства.Форма.СписокДокументов.Событие.КОформлениюОбработкаНавигационнойСсылки");
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",		Организация);
	СтруктураБыстрогоОтбора.Вставить("Подразделение",	Подразделение);
	СтруктураБыстрогоОтбора.Вставить("Менеджер",		Менеджер);
	СтруктураБыстрогоОтбора.Вставить("ОтборТипыДокументов",			ОтборТипыДокументов);
	СтруктураБыстрогоОтбора.Вставить("ОтборХозяйственныеОперации",	ОтборХозяйственныеОперации);
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки,ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СтруктураБыстрогоОтбора.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Менеджер) Тогда
	//	СтруктураБыстрогоОтбора.Вставить("Ответственный", Менеджер);
	//КонецЕсли;
	
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыФормы,ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОформлено

&НаКлиенте
Процедура СписокДокументыПроизводстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.ГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ТекущиеДанные = Элементы.СписокДокументыПроизводства.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Если Не ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РаспределениеПроизводственныхЗатрат")
				//++ НЕ УТКА
				И Не ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
				//-- НЕ УТКА
				И Не ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РаспределениеПрочихЗатрат") Тогда
				ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
			Иначе
				ТекстСообщения = НСтр("ru = 'Копирование документов ""Распределение материалов и работ"", ""Распределение расходов на себестоимость продукции"", ""Этап производства"" не допускается.';
										|en = 'Cannot copy documents ""Allocation of materials and works"", ""Allocation of expenses to product cost"", ""Production stage"".'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.ГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПроизводстваПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПроизводстваПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПроизводстваПередУдалением(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	Отказ = Истина;
	Список = Элементы.СписокДокументыПроизводства;
	
	//++ НЕ УТКА
	УправлениеПроизводствомКлиент.ПроверитьУдалитьНеполныеЦепочкиЭтаповИзСписка(Список);
	//-- НЕ УТКА
	
	Если Список.ВыделенныеСтроки.Количество() > 0 Тогда
		ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Список, Заголовок);
		СписокПометкаУдаленияСервер();
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокДокументыПроизводстваПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуСписка(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументыПроизводства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РаспределениеПроизводственныхЗатрат")
		//++ НЕ УТКА
		И Не ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
		//-- НЕ УТКА
		И Не ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РаспределениеПрочихЗатрат") Тогда
		ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокДокументыПроизводства);
	Иначе
		ТекстСообщения = НСтр("ru = 'Копирование документов ""Распределение материалов и работ"", ""Распределение расходов на себестоимость продукции"", ""Этап производства"" не допускается.';
								|en = 'Cannot copy documents ""Allocation of materials and works"", ""Allocation of expenses to product cost"", ""Production stage"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзменить(Команда)
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элементы.СписокДокументыПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьПометкуУдаления(Команда)
	
	Список = Элементы.СписокДокументыПроизводства;
	
	//++ НЕ УТКА
	УправлениеПроизводствомКлиент.ПроверитьУдалитьНеполныеЦепочкиЭтаповИзСписка(Список);
	//-- НЕ УТКА
	
	Если Список.ВыделенныеСтроки.Количество() > 0 Тогда
		ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Список, Заголовок);
		СписокПометкаУдаленияСервер();
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КнопкаСоздать

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",Организация);
	СтруктураОтбора.Вставить("Подразделение",Подразделение);
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",Организация);
	СтруктураОтбора.Вставить("Подразделение",Подразделение);
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы,
		КлючФормы, КлючНазначенияИспользования, СтруктураОтбора);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокДокументыПроизводства, Заголовок);
	СписокОтменаПроведенияСервер();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокДокументыПроизводства, Заголовок);
	СписокПровестиСервер();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокДокументыПроизводства);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокДокументыПроизводства, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокДокументыПроизводства);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокДокументыПроизводства);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Период, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Период = ВыбранноеЗначение;
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы - команда формы
&НаКлиенте
Процедура Подключаемый_УстановитьСтатус(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьСтатус(Команда.Имя, СоответствиеКомандСтатусам, Элементы.СписокДокументыПроизводства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьОтборПоОрганизации();
	УстановитьОтборДополнительнаяЗапись();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Элементы.СписокДокументыПроизводстваОрганизация.Видимость = Ложь;
	Иначе
		Элементы.СписокДокументыПроизводстваОрганизация.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументыПроизводства,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Подразделение));
	УстановитьОтборДополнительнаяЗапись();
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Элементы.СписокДокументыПроизводстваПодразделение.Видимость = Ложь;
	Иначе
		Элементы.СписокДокументыПроизводстваПодразделение.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ДанныеПоШтрихКоду = ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Состояние(НСтр("ru = 'Выполняется поиск документа по штрихкоду...';
					|en = 'Searching for the document by barcode...'"));
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтаФорма, "СписокДокументыПроизводства");
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СписокПометкаУдаленияСервер()
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	ОбновитьГиперссылкуКОформлению();
КонецПроцедуры

&НаСервере
Процедура СписокОтменаПроведенияСервер()
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	ОбновитьГиперссылкуКОформлению();
КонецПроцедуры

&НаСервере
Процедура СписокПровестиСервер()
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	ОбновитьГиперссылкуКОформлению();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДокументыПроизводства.Дата", Элементы.СписокДокументыПроизводстваДата.Имя);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДокументыПроизводстваСтатус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьДокументыИспользующиеСтатус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыПроизводства";
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки(Параметры)
	
	Если Параметры.Свойство("ОтборыФормыСписка") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиФормы(Параметры.ОтборыФормыСписка));
	ИначеЕсли Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиФормы(Параметры.СтруктураБыстрогоОтбора));
	Иначе
		НастройкиИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Обработка.ЖурналДокументовПроизводства.Форма.СписокДокументов", КлючНазначенияИспользования);
		
		Если ТипЗнч(НастройкиИзХранилища) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиФормы(НастройкиИзХранилища));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовПроизводства.Форма.СписокДокументов",
		КлючНазначенияИспользования, НастройкиФормы(ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормы(ИсточникНастроек)
	
	ИменаСохраняемыхРеквизитов =
		"Организация,
		|Подразделение,
		|Менеджер,
		|Период,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ИсточникНастроек);
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОписаниеОперацийИТиповДокументов()
	
	ТЗХозОперацииИТипыДокументов = ХозяйственныеОперацииИДокументы.Выгрузить();
	ТЗХозОперацииИТипыДокументов.Очистить();
	
	#Область АктВыполненныхВнутреннихРабот
	
	СтрокаАктВнутреннихРабот			= ТЗХозОперацииИТипыДокументов.Добавить();
	Строка								= СтрокаАктВнутреннихРабот;
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуПодразделениями;
	Строка.КлючНазначенияИспользования	= "ДокументыПроизводства";
	Строка.ЗаголовокРабочегоМеста		= НСтр("ru = 'Акты выполненных внутренних работ';
												|en = 'Internal works acceptance'");
	Строка.ТипДокумента					= Тип("ДокументСсылка.АктВыполненныхВнутреннихРабот");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.АктВыполненныхВнутреннихРабот.ПолноеИмя();
	Строка.ИспользуютсяСтатусы			= Ложь;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.Порядок						= 10;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаАктВнутреннихРабот);
		Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуФилиалами;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ДвижениеПродукцииИМатериалов
	
	ДоступныеОперацииДокумента = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
	
	СвойстваПоУмолчанию = Новый Структура(
		"КлючНазначенияИспользования,ЗаголовокРабочегоМеста,ТипДокумента,ПолноеИмяДокумента,ИспользуютсяСтатусы,
		|ДобавитьКнопкуСоздать,МенеджерРасчетаГиперссылкиКОформлению, Порядок");
	
	СвойстваПоУмолчанию.КлючНазначенияИспользования           = "ДокументыПроизводства";
	СвойстваПоУмолчанию.ЗаголовокРабочегоМеста                = НСтр("ru = 'Движение продукции и материалов';
																	|en = 'Movement of products and materials'");
	СвойстваПоУмолчанию.ТипДокумента                          = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов");
	СвойстваПоУмолчанию.ПолноеИмяДокумента                    = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
	СвойстваПоУмолчанию.ИспользуютсяСтатусы                   = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыДвиженийПродукцииИМатериалов");
	СвойстваПоУмолчанию.ДобавитьКнопкуСоздать                 = Истина;
	СвойстваПоУмолчанию.Порядок                               = 20;
	СвойстваПоУмолчанию.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ДвижениеПродукцииИМатериалов";
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
	Если ДоступныеОперацииДокумента.НайтиПоЗначению(ТекущаяОперация) <> Неопределено Тогда
		
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.ХозяйственнаяОперация		= ТекущаяОперация;
		ЗаполнитьЗначенияСвойств(Строка, СвойстваПоУмолчанию);
		
	КонецЕсли;
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство;
	Если ДоступныеОперацииДокумента.НайтиПоЗначению(ТекущаяОперация) <> Неопределено Тогда
		
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.ХозяйственнаяОперация		= ТекущаяОперация;
		ЗаполнитьЗначенияСвойств(Строка, СвойстваПоУмолчанию);
		
	КонецЕсли;
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства;
	Если ДоступныеОперацииДокумента.НайтиПоЗначению(ТекущаяОперация) <> Неопределено Тогда
		
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.ХозяйственнаяОперация		= ТекущаяОперация;
		ЗаполнитьЗначенияСвойств(Строка, СвойстваПоУмолчанию);
		
	КонецЕсли;
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
	Если ДоступныеОперацииДокумента.НайтиПоЗначению(ТекущаяОперация) <> Неопределено Тогда
		
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.ХозяйственнаяОперация		= ТекущаяОперация;
		ЗаполнитьЗначенияСвойств(Строка, СвойстваПоУмолчанию);
		
	КонецЕсли;
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой;
	Если ДоступныеОперацииДокумента.НайтиПоЗначению(ТекущаяОперация) <> Неопределено Тогда
		
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.ХозяйственнаяОперация		= ТекущаяОперация;
		ЗаполнитьЗначенияСвойств(Строка, СвойстваПоУмолчанию);
		
	КонецЕсли;
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой;
	Если ДоступныеОперацииДокумента.НайтиПоЗначению(ТекущаяОперация) <> Неопределено Тогда
		
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.ХозяйственнаяОперация		= ТекущаяОперация;
		ЗаполнитьЗначенияСвойств(Строка, СвойстваПоУмолчанию);
		
	КонецЕсли;
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатов;
	Если ДоступныеОперацииДокумента.НайтиПоЗначению(ТекущаяОперация) <> Неопределено Тогда
		
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.ХозяйственнаяОперация		= ТекущаяОперация;
		ЗаполнитьЗначенияСвойств(Строка, СвойстваПоУмолчанию);
		Строка.Порядок						= 25;
		Строка.МенеджерРасчетаГиперссылкиКОформлению = "";
		
	КонецЕсли;
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатовМеждуФилиалами;
	Если ДоступныеОперацииДокумента.НайтиПоЗначению(ТекущаяОперация) <> Неопределено Тогда
		
		Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.ХозяйственнаяОперация		= ТекущаяОперация;
		ЗаполнитьЗначенияСвойств(Строка, СвойстваПоУмолчанию);
		Строка.Порядок						= 25;
		Строка.МенеджерРасчетаГиперссылкиКОформлению = "";
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПроизводствоБезЗаказа
	
	СтрокаПроизводствоБезЗаказа			= ТЗХозОперацииИТипыДокументов.Добавить();
	Строка								= СтрокаПроизводствоБезЗаказа;
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ВыпускПродукции;
	Строка.КлючНазначенияИспользования	= "ДокументыПроизводства";
	Строка.ЗаголовокРабочегоМеста		= НСтр("ru = 'Производство без заказа';
												|en = 'Backflush production'");
	Строка.ТипДокумента					= Тип("ДокументСсылка.ПроизводствоБезЗаказа");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПроизводствоБезЗаказа.ПолноеИмя();
	Строка.ИспользуютсяСтатусы			= Ложь;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.Порядок						= 30;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ОформлениеПроизводстваБезЗаказов";
	
	Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, СтрокаПроизводствоБезЗаказа);
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
	Строка.ДобавитьКнопкуСоздать		= Ложь;
	
	#КонецОбласти
	
	#Область РаспределениеВозвратныхОтходов
	
	СтрокаРаспределениеВозвратныхОтходов = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка								= СтрокаРаспределениеВозвратныхОтходов;
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ВыпускПродукции;
	Строка.КлючНазначенияИспользования	= "ДокументыПроизводства";
	Строка.ЗаголовокРабочегоМеста		= НСтр("ru = 'Распределение возвратных отходов';
												|en = 'Recyclable waste allocation'");
	Строка.ТипДокумента 				= Тип("ДокументСсылка.РаспределениеВозвратныхОтходов");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РаспределениеВозвратныхОтходов.ПолноеИмя();
	Строка.ИспользуютсяСтатусы			= Ложь;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.Порядок						= 40;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Обработка.ОформлениеПроизводстваБезЗаказов";
	
	#КонецОбласти
	
	#Область РаспределениеПроизводственныхЗатрат
	
	СтрокаРаспределениеПроизводственныхЗатрат	= ТЗХозОперацииИТипыДокументов.Добавить();
	Строка										= СтрокаРаспределениеПроизводственныхЗатрат;
	Строка.ХозяйственнаяОперация				= Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
	Строка.КлючНазначенияИспользования			= "ДокументыПроизводства";
	Строка.ЗаголовокРабочегоМеста				= НСтр("ru = 'Распределение материалов и работ';
														|en = 'Material and labor allocation'");
	Строка.ТипДокумента 						= Тип("ДокументСсылка.РаспределениеПроизводственныхЗатрат");
	Строка.ПолноеИмяДокумента					= Метаданные.Документы.РаспределениеПроизводственныхЗатрат.ПолноеИмя();
	Строка.ИспользуютсяСтатусы					= Ложь;
	Строка.ДобавитьКнопкуСоздать				= Ложь;
	Строка.Порядок								= 50;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.РаспределениеПроизводственныхЗатрат";
	
	#КонецОбласти
	
	#Область РаспределениеПрочихЗатрат
	
	СтрокаРаспределениеПрочихЗатрат		= ТЗХозОперацииИТипыДокументов.Добавить();
	Строка								= СтрокаРаспределениеПрочихЗатрат;
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
	Строка.КлючНазначенияИспользования	= "ДокументыПроизводства";
	Строка.ЗаголовокРабочегоМеста		= НСтр("ru = 'Распределение прочих расходов';
												|en = 'Other expense allocation'");
	Строка.ТипДокумента 				= Тип("ДокументСсылка.РаспределениеПрочихЗатрат");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РаспределениеПрочихЗатрат.ПолноеИмя();
	Строка.ИспользуютсяСтатусы			= Ложь;
	Строка.ДобавитьКнопкуСоздать		= Ложь;
	Строка.Порядок						= 60;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.РаспределениеПрочихЗатрат";
	
	#КонецОбласти
	
	//++ НЕ УТКА
	#Область ЭтапПроизводства
	
	СтрокаЭтапПроизводства = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка								= СтрокаЭтапПроизводства;
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ВыпускПродукции;
	Строка.КлючНазначенияИспользования	= "ДокументыПроизводства";
	Строка.ЗаголовокРабочегоМеста		= НСтр("ru = 'Этапы производства';
												|en = 'Production stages'");
	Строка.ПравоДоступаДобавление		= Ложь;
	Строка.ТипДокумента					= Тип("ДокументСсылка.ЭтапПроизводства2_2");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя();
	Строка.ИспользуютсяСтатусы			= Истина;
	Строка.ДобавитьКнопкуСоздать		= Ложь;
	Строка.Порядок						= 70;
	
	Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, СтрокаЭтапПроизводства);
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
	Строка.ДобавитьКнопкуСоздать		= Ложь;
	
	Строка								= ТЗХозОперацииИТипыДокументов.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, СтрокаЭтапПроизводства);
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства;
	Строка.ДобавитьКнопкуСоздать		= Ложь;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	#Область ВыработкаСотрудников
	
	СтрокаВыработкаСотрудников					= ТЗХозОперацииИТипыДокументов.Добавить();
	Строка										= СтрокаВыработкаСотрудников;
	Строка.ХозяйственнаяОперация				= Перечисления.ХозяйственныеОперации.РегистрацияСдельныхРабот;
	Строка.КлючНазначенияИспользования			= "ДокументыПроизводства";
	Строка.ЗаголовокРабочегоМеста				= НСтр("ru = 'Выработка сотрудников';
														|en = 'Timesheets charge'");
	Строка.ТипДокумента 						= Тип("ДокументСсылка.ВыработкаСотрудников");
	Строка.ПолноеИмяДокумента					= Метаданные.Документы.ВыработкаСотрудников.ПолноеИмя();
	Строка.ИспользуютсяСтатусы					= Ложь;
	Строка.ДобавитьКнопкуСоздать				= Истина;
	Строка.Порядок								= 80;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ВыработкаСотрудников";
	
	#КонецОбласти
	
	Возврат ТЗХозОперацииИТипыДокументов;
	
КонецФункции

&НаСервере
Процедура РассчитатьНеобходимостьОтображенияКолонок()
	
	НакладныеСоСтатусами = ХозяйственныеОперацииИДокументы.НайтиСтроки(Новый Структура("Отбор, ИспользуютсяСтатусы", Истина, Истина));
	
	ЕстьДокументыИспользующиеСтатус = НакладныеСоСтатусами.Количество() <> 0;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов)
	
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(ТЗХозОперацииИТипыДокументов,
		КлючНазначенияФормыПоУмолчанию(), НСтр("ru = 'Документы производства (все)';
												|en = 'Production documents (all)'"));
	
	Заголовок = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	
	РассчитатьНеобходимостьОтображенияКолонок();
	УстановитьОтборыДинамическихСписков();
	ОбновитьГиперссылкуКОформлению();
	УстановитьВидимостьДоступность();
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.СписокДокументыПроизводства,
		ХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(Элементы.ИнформационнаяНадписьОтбор.Заголовок,
		ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
	НастроитьКнопкиУправленияДокументами();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ЗначениеЗаполнено(Организация) Тогда
		Элементы.СписокДокументыПроизводстваОрганизация.Видимость = Ложь;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.СписокДокументыПроизводстваОрганизация.Видимость = Истина;
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Элементы.СписокДокументыПроизводстваПодразделение.Видимость = Ложь;
	Иначе
		Элементы.СписокДокументыПроизводстваПодразделение.Видимость = Истина;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОтветственныйВДокументах") Тогда
		Элементы.Менеджер.Видимость = Ложь;
		Элементы.СписокДокументыПроизводстваМенеджер.Видимость = Ложь;
	КонецЕсли;
	
	// Перезаполнение списка статусов
	ОбщегоНазначенияУТ.УстановитьСписокСтатусов(ЭтаФорма, Элементы.УстановитьСтатус);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтаФорма;
	СтруктураПараметров.ИмяКнопкиСкопировать 								= "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню 				= "СписокКонтекстноеМенюСкопировать";
	СтруктураПараметров.ИмяКнопкиИзменить 									= "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню 					= "СписокКонтекстноеМенюИзменить";
	СтруктураПараметров.ИмяКнопкиПровести 									= "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню 					= "СписокКонтекстноеМенюПровести";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения 							= "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню 			= "СписокКонтекстноеМенюОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления 					= "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню 	= "СписокКонтекстноеМенюУстановитьПометкуУдаления";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);

КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресХозяйственныхОперацийИДокументов)
	
	ТЗХозОперацииИТипыДокументов = ПолучитьИзВременногоХранилища(АдресХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(ТЗХозОперацииИТипыДокументов, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
КонецПроцедуры

#Область Отборы

&НаСервере
Процедура УстановитьОтборыДинамическихСписков()
	
	УстановитьОтборДополнительнаяЗапись();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыПроизводства,
		"ТипСсылки",
		ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыПроизводства,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	УстановитьОтборПоОрганизации();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДокументыПроизводства,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Подразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыПроизводства,
		"Менеджер",
		Менеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Менеджер));
	
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОрганизации()

	СписокОрганизаций = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокОрганизаций.ЗагрузитьЗначения(Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Организация));
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументыПроизводства,
		"Организация",
		СписокОрганизаций,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериоду()
	
	СписокДокументыПроизводства.Параметры.УстановитьЗначениеПараметра("НачалоПериода",
		Период.ДатаНачала);
	СписокДокументыПроизводства.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецДня(Дата(3999, 12, 31))));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДополнительнаяЗапись()
	
	Если Не ИспользуетсяОграничениеПоОрганизации
		И Не ИспользуетсяОграничениеПоСкладу
		И Не ИспользуетсяОграничениеПоПодразделению Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДокументыПроизводства,
			"ДополнительнаяЗапись",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Не ЗначениеЗаполнено(Организация)
				И Не ЗначениеЗаполнено(Подразделение));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГиперссылкаКОформлению

&НаСервере
Процедура ОбновитьГиперссылкуКОформлению()
	
	// Проверка необходимости отображения элемента формы КОформлению
	Отбор = Новый Структура("Отбор", Истина);
	ХозОперацииИДокументы = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
	
	НеобходимаГиперссылкаКОформлению = Ложь;
	
	Для Каждого Строка Из ХозОперацииИДокументы Цикл
		Если ЗначениеЗаполнено(Строка.МенеджерРасчетаГиперссылкиКОформлению) Тогда
			НеобходимаГиперссылкаКОформлению = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Организация", Организация);
	ПараметрыФормирования.Вставить("Подразделение", Подразделение);
	ПараметрыФормирования.Вставить("Менеджер", Менеджер);
	ПараметрыФормирования.Вставить("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
	
	Если НеобходимаГиперссылкаКОформлению Тогда
		
		Элементы.КОформлению.Видимость = Истина;
		ТекстИдетОбновлениеДанных = НСтр("ru = 'К оформлению: <идет обновление данных>';
										|en = 'To register: <updating data>'");
		КОформлению = Новый ФорматированнаяСтрока(ТекстИдетОбновлениеДанных);
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ХозяйственныеОперацииИДокументы.Выгрузить());
		ПараметрыЗадания.Добавить(ПараметрыФормирования);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("Обработки.ЖурналДокументовПроизводства.СформироватьГиперссылкуКОформлениюФоновоеЗадание",
																ПараметрыЗадания,
																ПараметрыВыполнения);
		
		АдресХранилища			= РезультатРасчета.АдресРезультата;
		ИдентификаторЗадания	= РезультатРасчета.ИдентификаторЗадания;
		
		Если РезультатРасчета.Статус = "Выполнено" Тогда
			ОбновитьГиперссылкуКОформлениюЗавершение(АдресХранилища, КОформлению);
		КонецЕсли;
	Иначе
		Элементы.КОформлению.Видимость = Ложь;
	КонецЕсли;
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив();
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ЗаказМатериаловВПроизводство");
	//++ НЕ УТКА
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ЗаказНаПроизводство2_2");
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ЭтапПроизводства2_2");
	//-- НЕ УТКА
	
	СмТакжеВРаботе = ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, ПараметрыФормирования);
	Элементы.СмТакжеВРаботе.Видимость = ЗначениеЗаполнено(СмТакжеВРаботе);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьГиперссылкуКОформлениюЗавершение(АдресХранилища, КОформлению)
	
	КОформлению = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не ЗначениеЗаполнено(КОформлению) Тогда
		ТекстИдетОбновлениеДанных = НСтр("ru = 'К оформлению: нет';
										|en = 'To register: no'");
		КОформлению = Новый ФорматированнаяСтрока(ТекстИдетОбновлениеДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияГиперссылкиКОформлению()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		ОбновитьГиперссылкуКОформлениюЗавершение(АдресХранилища, КОформлению);
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#КонецОбласти
