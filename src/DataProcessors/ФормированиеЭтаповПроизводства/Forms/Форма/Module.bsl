
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьКомпоновщикНастроек();
	
	СтруктураОтборов = Неопределено;
	
	Если Параметры.Свойство("СтруктураОтборов", СтруктураОтборов) Тогда
		
		Если СтруктураОтборов.Свойство("Номенклатура", ОтборПоНоменклатуре) Тогда
			ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Номенклатура", ОтборПоНоменклатуре);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("Спецификация", ОтборПоСпецификации) Тогда
			ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Спецификация", ОтборПоСпецификации);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("ЗаказНаПроизводство", ОтборПоЗаказу) Тогда
			ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "ЗаказНаПроизводство", ОтборПоЗаказу);
		КонецЕсли;
		
		СтруктураОтборовЗаполненаПоПереданнымПараметрам = Истина;
		
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	УстановитьСтраницыПомощника(ЭтаФорма, "ШагОтбор");
	
	ИспользоватьАналоги = ПолучитьФункциональнуюОпцию("ИспользоватьАналогиМатериалов");
	
	ДанныеАктивнойСтроки = Новый Структура;
	ДанныеАктивнойСтроки.Вставить("МинимальнаяПартияВыпуска", 0);
	ДанныеАктивнойСтроки.Вставить("ОптимальнаяПартияВыпуска", 0);
	ДанныеАктивнойСтроки.Вставить("ЕстьПобочныйВыпуск", Ложь);
	ДанныеАктивнойСтроки.Вставить("ПобочныйВыпускКоличествоИзделий", 0);
	ДанныеАктивнойСтроки.Вставить("ПобочныйВыпускНоменклатураПредставление", "");
	
	ЦветВыбранногоРежима = ЦветаСтиля.СерыйЦветТекста1;
	ЦветНеВыбранногоРежима = ЦветаСтиля.ГиперссылкаЦвет;
	
	Если ПолучитьФункциональнуюОпцию("ПолуфабрикатыВнутриЗаказаПроизводитьОбособленно") Тогда
		Элементы.ОбособитьВыпускПолуфабрикатов.Видимость = Ложь; // полуфабрикаты внутри заказа всегда производятся обособленно
		ОбособитьВыпускПолуфабрикатов = Истина;
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
	АдресПланХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресПользовательскиеОтборы = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда
		
		Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
		
	Иначе
		
		Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Отметка", Истина);
	СтруктураПоиска.Вставить("КЗапуску", 0);
	
	Для каждого Строка Из Объект.ПланИтоги.НайтиСтроки(СтруктураПоиска) Цикл
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Колонка", "Заполнение", НСтр("ru = 'К запуску';
											|en = 'Launch'"), Строка.НомерСтроки, НСтр("ru = 'Изделия';
																						|en = 'Products'"));
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Объект.ПланИтоги", Строка.НомерСтроки, "КЗапуску");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		
	КонецЦикла;
	
	//
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Отметка", Истина);
	СтруктураПоиска.Вставить("Спецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	
	Для каждого Строка Из Объект.ПланИтоги.НайтиСтроки(СтруктураПоиска) Цикл
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Колонка", "Заполнение", НСтр("ru = 'Спецификация';
											|en = 'Bill of materials'"), Строка.НомерСтроки, НСтр("ru = 'Изделия';
																							|en = 'Products'"));
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Объект.ПланИтоги", Строка.НомерСтроки, "Спецификация");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗаполнитьНоменклатурныйПлан" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗаполнитьНоменклатурныйПланНаСервере();
		Если НачатьОжиданиеДлительнойОперации Тогда
			НачатьОжиданиеДлительнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ШагОтбор

&НаКлиенте
Процедура ИспользоватьПроизвольныеОтборыНажатие(Элемент)
	
	Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПростыеОтборыНажатие(Элемент)

	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда
		
		Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Установленные отборы невозможно преобразовать к виду простых отборов.';
													|en = 'Cannot convert the set filters into simple filters.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	СохранитьНастройки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПодразделениюДиспетчеруПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "ПодразделениеДиспетчер", ОтборПоПодразделениюДиспетчеру);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНаправлениюДеятельностиПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "НаправлениеДеятельности", ОтборПоНаправлениюДеятельности);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗаказуПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "ЗаказНаПроизводство", ОтборПоЗаказу);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНазначениюПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Назначение", ОтборПоНазначению);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладуПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Склад", ОтборПоСкладу);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНоменклатуреПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Номенклатура", ОтборПоНоменклатуре);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСпецификацииПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Спецификация", ОтборПоСпецификации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Организация", ОтборПоОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОтветственномуПодразделениюПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "ОтветственноеПодразделение", ОтборПоОтветственномуПодразделению);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроек,
		"ДатаЗапуска",
		?(ВариантПериода = 0 И ЗначениеЗаполнено(ОтборПоДате), КонецДня(ОтборПоДате), Неопределено));
	
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроек,
		"ДатаВыпуска",
		?(ВариантПериода = 1 И ЗначениеЗаполнено(ОтборПоДате), КонецДня(ОтборПоДате), Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоДатеПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроек,
		?(ВариантПериода = 0, "ДатаЗапуска", "ДатаВыпуска"),
		?(ЗначениеЗаполнено(ОтборПоДате), КонецДня(ОтборПоДате), Неопределено));
	
КонецПроцедуры

#КонецОбласти

#Область ШагПлан

&НаКлиенте
Процедура ПланВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = СтрЗаменить(Поле.Имя, "План", "");
	
	Если СтрНайти("Получатель,Назначение", ИмяПоля) > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные[ИмяПоля]);
	ИначеЕсли ИмяПоля = "ЗаказНаПроизводствоПредставление" ИЛИ ИмяПоля = "ЗаказНаПроизводство" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ЗаказНаПроизводство);
	ИначеЕсли ИмяПоля = "СвободныйВыпускИзОбособленныхМатериалов" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Необособленный выпуск из обособленных материалов.
			|Изделие не укрупняется со строками других заказов
			|и строками с другим назначением.
			|Рекомендуем обособить полуфабрикат при выпуске.';
			|en = 'Non-assigned release from assigned materials. 
			|Finished product is not consolidated with lines of other orders
			|and lines with another assignment.
			|It is recommended that you assign the finished product on release.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПриАктивизацииСтроки(Элемент)
	
	Элементы.ПланКонтекстноеМенюПоказатьИзделиеВСтруктуреЗаказа.Доступность =
		Элементы.План.ТекущиеДанные <> Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьДеталиНажатие(Элемент)
	
	ПоказыватьДетали = Не ПоказыватьДетали;
	ОбновитьПланПриАктивизацииСтроки();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказыватьДетали");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИтогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = СтрЗаменить(Поле.Имя, "ПланИтоги", "");
	
	Если СтрНайти("Номенклатура,Характеристика,Организация,Партнер,Договор,НаправлениеДеятельности", ИмяПоля) > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные[ИмяПоля]);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИтогиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПланИтогиПриАктивизацииСтрокиОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИтогиОтметкаФормаПриИзменении(Элемент)
	
	Если Элементы.ПланИтоги.ТекущиеДанные.ОтметкаФорма = 2 Тогда
		Элементы.ПланИтоги.ТекущиеДанные.ОтметкаФорма = 0;
	КонецЕсли;
	Элементы.ПланИтоги.ТекущиеДанные.Отметка = Булево(Элементы.ПланИтоги.ТекущиеДанные.ОтметкаФорма);
	Элементы.ПланИтоги.ТекущиеДанные.АвтоПересчет = Ложь;
	
	ПланИтогиПриИзменении();
	ЗаполнитьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИтогиКЗапускуПриИзменении(Элемент)
	
	Элементы.ПланИтоги.ТекущиеДанные.Отметка = Элементы.ПланИтоги.ТекущиеДанные.КЗапуску > 0;
	Элементы.ПланИтоги.ТекущиеДанные.ОтметкаФорма = ?(Элементы.ПланИтоги.ТекущиеДанные.Отметка, 1, 0);
	Элементы.ПланИтоги.ТекущиеДанные.АвтоПересчет = Ложь;
	
	ПланИтогиПриИзменении();
	ЗаполнитьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИтогиКЗапускуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресИзделия = ВыгрузитьИзделияПоТекущейСтроке(
		СтрокаПланИтогиВСтруктуру(Элементы.ПланИтоги.ТекущиеДанные),
		АдресПланХранилище,
		АдресПользовательскиеОтборы,
		ОбособитьВыпускПолуфабрикатов);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресИзделия", АдресИзделия);
	ПараметрыФормы.Вставить("Номенклатура", Элементы.ПланИтоги.ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Элементы.ПланИтоги.ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Маршрут", Элементы.ПланИтоги.ТекущиеДанные.Маршрут);
	ПараметрыФормы.Вставить("ВыпускОбособленПоУмолчанию", ОбособитьВыпускПолуфабрикатов);
	
	ОткрытьФорму("Обработка.ФормированиеЭтаповПроизводства.Форма.ВыборИзделийКЗапуску",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ВыборИзделийКЗапускуЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИтогиСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПланИтоги.ТекущиеДанные;
	ТекущиеДанные.СпецификацияИзменена = (ТекущиеДанные.Спецификация <> ТекущиеДанные.СпецификацияПлан);
	
	ДанныеСтроки = СтрокаПланИтогиВСтруктуру(ТекущиеДанные);
	
	Если ТекущиеДанные.МножественныйЗапуск Тогда
		Сведения = ПланИтогиСпецификацияПриИзмененииНаСервереКонтекст(ДанныеСтроки);
	Иначе
		Сведения = ПланИтогиСпецификацияПриИзмененииНаСервере(
			ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ПоказыватьДетали);
	КонецЕсли;
	
	Если ПоказыватьДетали Тогда
		Объект.План.Очистить();
		Для Индекс = 0 По Сведения.ДетальныеЗаписи.ВГраница() Цикл
			ЗаполнитьЗначенияСвойств(Объект.План.Добавить(), Сведения.ДетальныеЗаписи[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеАктивнойСтроки, Сведения,
		"МинимальнаяПартияВыпуска, ОптимальнаяПартияВыпуска, ЕстьПобочныйВыпуск, ПобочныйВыпускКоличествоИзделий, ПобочныйВыпускНоменклатураПредставление");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки,
		"ПланВХранилище, КоличествоНаПартию, ОсновноеИзделие");
	
	ЗаполнитьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяСтрокаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасшифроватьПозициюНоменклатурногоПлана(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыФормированияЭтапов

&НаКлиенте
Процедура РезервироватьМатериалыПриИзменении(Элемент)
	
	ПараметрыСозданияДокументов.РезервироватьМатериалы = РезервироватьМатериалы;
	
	Если Не РезервироватьМатериалы Тогда
		ЗаменятьМатериалыНаАналоги = Ложь;
		ПараметрыСозданияДокументов.ЗаменятьМатериалыНаАналоги = Ложь;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РезервироватьМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменятьМатериалыНаАналогиПриИзменении(Элемент)
	
	ПараметрыСозданияДокументов.ЗаменятьМатериалыНаАналоги = ЗаменятьМатериалыНаАналоги;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПередачиЭтаповКВыполнениюПриИзменении(Элемент)
	
	ПараметрыСозданияДокументов.ВариантПередачиЭтаповКВыполнению = ВариантПередачиЭтаповКВыполнению;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияНормативногоГрафикаЭтаповПриИзменении(Элемент)
	
	ПараметрыСозданияДокументов.ВариантЗаполненияНормативногоГрафикаЭтапов = ВариантЗаполненияНормативногоГрафикаЭтапов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособитьВыпускПолуфабрикатовПриИзменении(Элемент)

	ПараметрыСозданияДокументов.ОбособитьВыпускПолуфабрикатов = ОбособитьВыпускПолуфабрикатов;

КонецПроцедуры

&НаКлиенте
Процедура УкрупнятьПартииМеждуЗаказамиПриИзменении(Элемент)
	
	ПараметрыСозданияДокументов.УкрупнятьПартииМеждуЗаказами = УкрупнятьПартииМеждуЗаказами;
	
КонецПроцедуры

&НаКлиенте
Процедура УкрупнятьПартииПоНазначениямПриИзменении(Элемент)
	
	ПараметрыСозданияДокументов.УкрупнятьПартииПоНазначениям = УкрупнятьПартииПоНазначениям;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатФормирования

&НаКлиенте
Процедура РезультатФормированияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РезультатФормирования.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	Иначе
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
			ТекущиеДанные.Распоряжение,
			ТекущиеДанные.Партия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Отборы

&НаКлиенте
Процедура ВосстановитьНастройкиПоУмолчанию(Команда)
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда
		
		Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
		
	Иначе
		
		Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НоменклатурныйПлан

&НаКлиенте
Процедура УстановитьФлажкиНоменклатурныйПлан(Команда)
	
	ИзменитьОтметкиВВыделенныхСтроках(Истина, Элементы.ПланИтоги.ВыделенныеСтроки);
	ЗаполнитьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиНоменклатурныйПлан(Команда)
	
	ИзменитьОтметкиВВыделенныхСтроках(Ложь, Элементы.ПланИтоги.ВыделенныеСтроки);
	ЗаполнитьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКЗапускуПоОбеспеченномуКоличеству(Команда)
	
	ЗаполнитьКЗапускуВВыделенныхСтроках("Обеспечено", Элементы.ПланИтоги.ВыделенныеСтроки);
	ЗаполнитьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКЗапускуПоПотребности(Команда)
	
	ЗаполнитьКЗапускуВВыделенныхСтроках("Требуется", Элементы.ПланИтоги.ВыделенныеСтроки);
	ЗаполнитьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОтмеченныеПриИзменении(Элемент)
	
	УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВсеИзделияНажатие(Элемент)
	
	ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеОтключен();
	
	УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ФильтрОбеспечение");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОбеспеченоНажатие(Элемент)
	
	ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеОбеспечено();
	
	УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ФильтрОбеспечение");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНеОбеспеченоНажатие(Элемент)
	
	ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеНеОбеспечено();
	
	УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ФильтрОбеспечение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьНоменклатурныйПлан(Команда)
	
	ПеречитатьНоменклатурныйПланНаСервере();
	Если НачатьОжиданиеДлительнойОперации Тогда
		НачатьОжиданиеДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПозициюНоменклатурногоПлана(Команда)
	
	ТекущиеДанные = Элементы.ПланИтоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка плана';
														|en = 'The plan line is not selected'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыРасшифровки(
		СтрокаПланИтогиВСтруктуру(Элементы.ПланИтоги.ТекущиеДанные),
		АдресПланХранилище,
		АдресПользовательскиеОтборы,
		ОбособитьВыпускПолуфабрикатов);
	
	ОткрытьФорму(
		"Отчет.РасшифровкаПозицииНоменклатурногоПлана.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзделиеВСтруктуреЗаказа(Команда)
	
	ТекущиеДанные = Элементы.План.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка плана';
														|en = 'The plan line is not selected'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ", ТекущиеДанные.ЗаказНаПроизводство);
	ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("КлючНоменклатура", ТекущиеДанные.КлючНоменклатура);
	
	ОткрытьФорму(
		"Отчет.СтруктураЗаказаНаПроизводствоДинамическая.Форма.ФормаОтчета",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	ОткрытьФорму(
		"Обработка.ФормированиеЭтаповПроизводства.Форма.Настройки",
		ПараметрыОтображения,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ПоказатьНастройкиЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область Шаги

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагОтбор Тогда
	
		ПерейтиКШагуНоменклатурныйПланНаКлиенте();
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагНоменклатурныйПлан Тогда
		
		Если ПараметрыОтображения.ПредварительныйПросмотр Тогда
			ПерейтиКШагуПредварительныйПросмотрНаКлиенте();
		Иначе
			ПерейтиКШагуРезультатФормированияНаКлиенте();
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагПредварительныйПросмотр Тогда
		
		ПерейтиКШагуРезультатФормированияНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	ОчиститьСообщения();

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагРезультатФормирования Тогда
		
		Если ПараметрыОтображения.ПредварительныйПросмотр Тогда
			ПерейтиНазадКШагуПредварительныйПросмотрНаКлиенте();
		Иначе
			ПерейтиНазадКШагуНоменклатурныйПланНаКлиенте();
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагПредварительныйПросмотр Тогда
		
		ПерейтиНазадКШагуНоменклатурныйПланНаКлиенте();
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагНоменклатурныйПлан Тогда
		
		ПерейтиНазадКШагуОтборыНаКлиенте();

	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагОтбор Тогда
	
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСДругимиОтборами(Команда)
	
	ОчиститьСообщения();
	ПродолжитьСДругимиОтборамиНаСервере();

КонецПроцедуры

#КонецОбласти

#Область СформированныеДокументы

&НаКлиенте
Процедура ДиспетчированиеЭтапов(Команда)
	
	ТекущиеДанные = Элементы.РезультатФормирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана партия (документ)';
														|en = 'The lot (document) is not selected'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураОтборов", Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение));
	
	ОткрытьФорму(
		"Документ.ЭтапПроизводства2_2.Форма.Диспетчирование",
		ПараметрыФормы,,
		ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЗаказа(Команда)
	
	ТекущиеДанные = Элементы.РезультатФормирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана партия (документ)';
														|en = 'The lot (document) is not selected'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ", ТекущиеДанные.Распоряжение);
	ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	
	ОткрытьФорму(
		"Отчет.СтруктураЗаказаНаПроизводствоДинамическая.Форма.ФормаОтчета",
		ПараметрыФормы,,
		ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистСопровожденияПартииПроизводства(Команда)
	
	МассивЭтапов = СозданныеЭтапы();
	
	Если МассивЭтапов.ВГраница() = -1 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Отсутствуют данные для печати';
														|en = 'Data to print is missing'"));
	Иначе
		ОписаниеКоманды = Новый Структура("ОбъектыПечати, Форма", МассивЭтапов, ЭтотОбъект);
		УправлениеПечатьюУПКлиент.ПечатьЛистСопровожденияПартииПроизводства(ОписаниеКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СозданныеЭтапы()
	
	МассивЭтапов = Новый Массив;
	
	Для каждого СтрокаПартия Из РезультатФормирования.ПолучитьЭлементы() Цикл
		Для каждого СтрокаДокумент Из СтрокаПартия.ПолучитьЭлементы() Цикл
			Если ТипЗнч(СтрокаДокумент.Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
				МассивЭтапов.Добавить(СтрокаДокумент.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивЭтапов;
	
КонецФункции

&НаКлиенте
Процедура УдалитьДокументы(Команда)
	
	ОчиститьСообщения();
	ОбработатьОшибки(Истина);
	
	Для Каждого Строка ИЗ РезультатФормирования.ПолучитьЭлементы() Цикл
		Элементы.РезультатФормирования.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиВСтатусеФормируется(Команда)

	ОчиститьСообщения();
	ОбработатьОшибки();
	
	Для Каждого Строка ИЗ РезультатФормирования.ПолучитьЭлементы() Цикл
		Элементы.РезультатФормирования.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзделияКПредпросмотру

&НаКлиенте
Процедура РазвернутьПредпросмотр(Команда)
	
	Для каждого Строка Из ИзделияКПредпросмотру.ПолучитьЭлементы() Цикл
		Если Не Элементы.ИзделияКПредпросмотру.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			Элементы.ИзделияКПредпросмотру.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПредпросмотр(Команда)
	
	Для каждого Строка Из ИзделияКПредпросмотру.ПолучитьЭлементы() Цикл
		Если Элементы.ИзделияКПредпросмотру.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			Элементы.ИзделияКПредпросмотру.Свернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатФормирования

&НаКлиенте
Процедура РазвернутьРезультатФормирования(Команда)
	
	Для каждого Строка Из РезультатФормирования.ПолучитьЭлементы() Цикл
		Если Не Элементы.РезультатФормирования.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			Элементы.РезультатФормирования.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРезультатФормирования(Команда)
	
	Для каждого Строка Из РезультатФормирования.ПолучитьЭлементы() Цикл
		Если Элементы.РезультатФормирования.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			Элементы.РезультатФормирования.Свернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументы(Команда)
	
	ОчиститьСообщения();
	
	ИзмененоДокументов = ПровестиДокументыНаСервере();
	
	Если ИзмененоДокументов > 0 Тогда
		ПоказатьОповещениеПользователя(
			СтрШаблон(НСтр("ru = 'Изменение (%1)';
							|en = 'Change (%1)'"), ИзмененоДокументов),,
			НСтр("ru = 'Проведение выполнено';
				|en = 'Posted'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПровестиДокументыНаСервере()
	
	ИзмененоДокументов = 0;
	ПартииОбновить = Новый Соответствие;
	
	Для каждого Идентификатор Из Элементы.РезультатФормирования.ВыделенныеСтроки Цикл
		Строка = РезультатФормирования.НайтиПоИдентификатору(Идентификатор);
		Если Строка.ТипСтроки = ТипСтрокиПартия() Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Строка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 - не удалось провести документ, возможно документ редактируется другим пользователем.';
						|en = '%1 - cannot post the document, the document may be edited by another user.'"),
					СокрЛП(Строка.Ссылка)),
				Строка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ИзмененоДокументов = ИзмененоДокументов + 1;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
					Строка.Ссылка);
				Продолжить;
			КонецПопытки;
			
			Строка.НомерКартинки = ?(ДокументОбъект.Проведен, 1, 0);
			
			ЕстьОшибки = ВЭтапеЕстьОшибки(ДокументОбъект);
			Если ЕстьОшибки <> Строка.ЕстьОшибки Тогда
				Строка.ЕстьОшибки = ЕстьОшибки;
				ПартииОбновить.Вставить(Строка.Партия, Строка.ПолучитьРодителя());
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ПартииОбновить Цикл
		СтрокаПартия = КлючИЗначение.Значение;
		СтрокаПартия.ЕстьОшибки = Ложь;
		Для каждого СтрокаЭтап Из СтрокаПартия.ПолучитьЭлементы() Цикл
			Если СтрокаЭтап.ЕстьОшибки Тогда
				СтрокаПартия.ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РезультатФормирования");
	
	Возврат ИзмененоДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Шаги

#Область Отборы

&НаКлиенте
Процедура ПерейтиНазадКШагуОтборыНаКлиенте()
	
	Объект.ПланИтоги.Очистить();
	УстановитьТекстГиперссылокОбеспечено();
	ПоместитьВоВременноеХранилище(Неопределено, АдресПланХранилище);
	
	УстановитьСтраницыПомощника(ЭтаФорма, "ШагОтбор");
	
КонецПроцедуры

#КонецОбласти

#Область НоменклатурныйПлан

&НаКлиенте
Процедура ПерейтиКШагуНоменклатурныйПланНаКлиенте() 
	
	ЗаполнитьНоменклатурныйПланНаСервере();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	Иначе
		
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагНоменклатурныйПлан");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазадКШагуНоменклатурныйПланНаКлиенте()
	
	АдресДанныеКФормированию = Неопределено;
	
	Если СозданныеОбъекты.Количество() <> 0 Тогда
		
		Отказ = Ложь;
		УдалитьСозданныеОбъекты(Отказ);
		
		Если НачатьОжиданиеДлительнойОперации Тогда
			НачатьОжиданиеДлительнойОперации(Ложь);
			НастроитьОжиданиеВФорме(Истина, НСтр("ru = 'Документы удаляются...';
												|en = 'Documents are being deleted...'"));
		Иначе
			ПослеУдаленияСозданныхОбъектов(Отказ);
		КонецЕсли;
		
	Иначе
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагНоменклатурныйПлан");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатурныйПланНаСервере()
	
	Если Не ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьПараметрыСозданияДокументов();
	
	Если СохранитьНастройки И НЕ СтруктураОтборовЗаполненаПоПереданнымПараметрам Тогда 
		СохранитьНастройкиКомпоновщикаОтборов();
	КонецЕсли;
	
	ОтменитьДлительнуюОперацию();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Настройки", КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыПроцедуры.Вставить("КроссТаблица", ПараметрыОтображения.КроссТаблица);
	ПараметрыПроцедуры.Вставить("Периодичность", ПараметрыОтображения.Периодичность);
	ПараметрыПроцедуры.Вставить("ИмяПоляДатыПериода", ПараметрыОтображения.ИмяПоляДатыПериода);
	ПараметрыПроцедуры.Вставить("КоличествоПериодов", ПараметрыОтображения.КоличествоПериодов);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование партий производства: заполнение номенклатурного плана';
															|en = 'Generate production lots: item plan filling'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФормированиеЭтаповПроизводства.ПолучитьНоменклатурныйПланОтложенно",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = "ЗаполнитьНоменклатурныйПланОтложенноЗавершение";
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		ЗаполнитьНоменклатурныйПланОтложенно(ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатурныйПланОтложенноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьНоменклатурныйПланОтложенно(Результат);
		
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагНоменклатурныйПлан");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатурныйПланОтложенно(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
#Область КроссТаблица
		
		КолонкиПериоды = ?(ДанныеЗаполнения.КолонкиПериоды <> Неопределено,
			ДанныеЗаполнения.КолонкиПериоды,
			Новый Массив);
		
		// Изменение реквизитов формы
		ДобавляемыеРеквизиты = Новый Массив;
		ПланИтоги = ДанныеЗаполнения.ПланИтоги; // ТаблицаЗначений
		Для каждого КолонкаИмя Из КолонкиПериоды Цикл
			Если ДобавленныеКолонки.НайтиПоЗначению(КолонкаИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НовыйРеквизит = Новый РеквизитФормы(
				КолонкаИмя, 
				ПланИтоги.Колонки[КолонкаИмя].ТипЗначения,
				"Объект.ПланИтоги");
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			ДобавленныеКолонки.Добавить(КолонкаИмя);
		КонецЦикла;
		
		УдаляемыеРеквизиты = Новый Массив;
		Для Индекс = -(ДобавленныеКолонки.Количество()-1) По 0 Цикл
			КолонкаИмя = ДобавленныеКолонки[-Индекс].Значение;
			Если КолонкиПериоды.Найти(КолонкаИмя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Элементы.Удалить(Элементы.Найти(КолонкаИмя));
			УдаляемыеРеквизиты.Добавить("Объект.ПланИтоги." + КолонкаИмя);
			ДобавленныеКолонки.Удалить(-Индекс);
		КонецЦикла;
		
		Если ДобавляемыеРеквизиты.ВГраница() <> -1
				ИЛИ УдаляемыеРеквизиты.ВГраница() <> -1 Тогда
			ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
		КонецЕсли;
		
		// Изменение элементов формы
		Если ДобавляемыеРеквизиты.ВГраница() <> -1 Тогда
			Для Индекс = -(Элементы.ПланИтогиПериоды.ПодчиненныеЭлементы.Количество()-1) По 0 Цикл
				Элементы.Удалить(Элементы.ПланИтогиПериоды.ПодчиненныеЭлементы[-Индекс]);
			КонецЦикла;
			
			Для Индекс = 0 По КолонкиПериоды.ВГраница() Цикл
				КолонкаИмя = КолонкиПериоды[Индекс];
				НовыйЭлемент = Элементы.Добавить(КолонкаИмя, Тип("ПолеФормы"), Элементы.ПланИтогиПериоды);
				НовыйЭлемент.ПутьКДанным = "Объект.ПланИтоги." + КолонкаИмя;
				НовыйЭлемент.Заголовок = ПланИтоги.Колонки[КолонкаИмя].Заголовок;
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
				НовыйЭлемент.Ширина = 6;
				НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
			КонецЦикла;
		КонецЕсли;
		
#КонецОбласти
		
#Область ЗагрузкаДанных
		
		Объект.ПланИтоги.Загрузить(ДанныеЗаполнения.ПланИтоги);
		УстановитьТекстГиперссылокОбеспечено();
		УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);
		
#КонецОбласти
		
		// Кеширование отборов
		ПоместитьВоВременноеХранилище(ДанныеЗаполнения.ПользовательскиеОтборы, АдресПользовательскиеОтборы);
		
	Иначе
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНоменклатурныйПланНаСервере()
	
	Объект.ПланИтоги.Очистить();
	УстановитьТекстГиперссылокОбеспечено();
	ПоместитьВоВременноеХранилище(Неопределено, АдресПланХранилище);
	
	ЗаполнитьНоменклатурныйПланНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИтогиПриИзменении()
	
	ДанныеСтроки = СтрокаПланИтогиВСтруктуру(Элементы.ПланИтоги.ТекущиеДанные);
	
	Если Элементы.ПланИтоги.ТекущиеДанные.МножественныйЗапуск Тогда
		СтрокиПлан = ПланИтогиПриИзмененииНаСервереКонтекст(ДанныеСтроки);
	Иначе
		СтрокиПлан = ПланИтогиПриИзмененииНаСервере(
			ДанныеСтроки,
			АдресПланХранилище,
			АдресПользовательскиеОтборы,
			ОбособитьВыпускПолуфабрикатов);
	КонецЕсли;
	
	Если ПоказыватьДетали Тогда
		Объект.План.Очистить();
		Для Индекс = 0 По СтрокиПлан.ВГраница() Цикл
			ЗаполнитьЗначенияСвойств(Объект.План.Добавить(), СтрокиПлан[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ПланИтоги.ТекущиеДанные.ПланВХранилище = ДанныеСтроки.ПланВХранилище;
	
КонецПроцедуры

&НаСервере
Функция ПланИтогиПриИзмененииНаСервереКонтекст(ДанныеСтроки)
	
	Таблица = ЗаполнитьПланКЗапуску(
		ДанныеСтроки,
		АдресПланХранилище,
		АдресПользовательскиеОтборы,
		ОбособитьВыпускПолуфабрикатов);
	
	ПересчитатьМножественныйЗапуск(ДанныеСтроки);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПланИтогиПриИзмененииНаСервере(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов)
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(
		ЗаполнитьПланКЗапуску(
			ДанныеСтроки,
			АдресПланХранилище,
			АдресПользовательскиеОтборы,
			ОбособитьВыпускПолуфабрикатов));
	
КонецФункции

&НаСервере
Функция ПланИтогиСпецификацияПриИзмененииНаСервереКонтекст(ДанныеСтроки)
	
	Результат = ДанныеНоменклатуры(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат, "КоличествоНаПартию, ОсновноеИзделие");
	
	НайденнаяСтрока = Объект.ПланИтоги.НайтиПоИдентификатору(ДанныеСтроки.Идентификатор);
	Если НайденнаяСтрока <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Результат, "КоличествоНаПартию, ОсновноеИзделие");
	КонецЕсли;
	
	Если ДанныеСтроки.ПланВХранилище Тогда
		Таблица = ДетальныеЗаписи(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
		Таблица.ЗаполнитьЗначения(ДанныеСтроки.Спецификация, "Спецификация");
		Таблица.ЗаполнитьЗначения(Результат.КоличествоНаПартию, "КоличествоНаПартию");
		ПоместитьПланВХранилище(ДанныеСтроки, Таблица, АдресПланХранилище);
	КонецЕсли;
	
	ПересчитатьМножественныйЗапуск(ДанныеСтроки);
	
	Если ПоказыватьДетали Тогда
		Таблица = ДетальныеЗаписи(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
		Результат.Вставить("ДетальныеЗаписи", ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПланИтогиСпецификацияПриИзмененииНаСервере(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ПоказыватьДетали)
	
	Результат = ДанныеНоменклатуры(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат, "КоличествоНаПартию, ОсновноеИзделие");
	
	Если ДанныеСтроки.ПланВХранилище Или ПоказыватьДетали Тогда
		Таблица = ДетальныеЗаписи(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
		Таблица.ЗаполнитьЗначения(ДанныеСтроки.Спецификация, "Спецификация");
		Таблица.ЗаполнитьЗначения(Результат.КоличествоНаПартию, "КоличествоНаПартию");
		
		Если ДанныеСтроки.ПланВХранилище Тогда
			ПоместитьПланВХранилище(ДанныеСтроки, Таблица, АдресПланХранилище);
		КонецЕсли;
		
		Если ПоказыватьДетали Тогда
			Результат.Вставить("ДетальныеЗаписи", ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзменитьОтметкиВВыделенныхСтроках(Знач Отметка, Знач ИдентификаторыСтрок)
	
	ТаблицаОтбор = НовыйОтборДетальныеЗаписи();
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		Строка = Объект.ПланИтоги.НайтиПоИдентификатору(ИдентификаторСтроки);
		Строка.Отметка = Отметка;
		Строка.ОтметкаФорма = ?(Отметка, 1, 0);
		Строка.АвтоПересчет = Ложь;
		
		ЗаполнитьЗначенияСвойств(ТаблицаОтбор.Добавить(), Строка);
		
	КонецЦикла;
	
	ДетальныеЗаписиПакет = ДетальныеЗаписиПакетно(ТаблицаОтбор, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		Строка = Объект.ПланИтоги.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Таблица = ЗаполнитьПланКЗапуску(
			Строка,
			АдресПланХранилище,
			АдресПользовательскиеОтборы,
			ОбособитьВыпускПолуфабрикатов,
			ДетальныеЗаписиПакет);
		
		Если ПоказыватьДетали И ИдентификаторСтроки = Элементы.ПланИтоги.ТекущаяСтрока Тогда
			Объект.План.Очистить();
			Для Индекс = 0 По Таблица.Количество()-1 Цикл
				ЗаполнитьЗначенияСвойств(Объект.План.Добавить(), Таблица[Индекс]);
			КонецЦикла;
		КонецЕсли;
		
		ПересчитатьМножественныйЗапуск(Строка);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКЗапускуВВыделенныхСтроках(Знач ИмяКолонкиИсточникКоличества, Знач ИдентификаторыСтрок)
	
	ТаблицаОтбор = НовыйОтборДетальныеЗаписи();
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		Строка = Объект.ПланИтоги.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		КЗапуску = 0;
		Если ИмяКолонкиИсточникКоличества = "Обеспечено" Тогда
			Если Строка.Спецификация = Строка.СпецификацияПлан Тогда
				Если Строка.ТребуетсяОбеспечение Тогда
					КЗапуску = Строка.Обеспечено;
				Иначе
					КЗапуску = Строка.Требуется;
				КонецЕсли;
			КонецЕсли;
		Иначе
			КЗапуску = Строка[ИмяКолонкиИсточникКоличества];
		КонецЕсли;
			
		Строка.КЗапуску = ?(КЗапуску > 0, КЗапуску, Строка.Требуется);
		Строка.Отметка = КЗапуску > 0;
		Строка.ОтметкаФорма = ?(Строка.Отметка, 1, 0);
		Строка.АвтоПересчет = Ложь;
		
		ЗаполнитьЗначенияСвойств(ТаблицаОтбор.Добавить(), Строка);
		
	КонецЦикла;
	
	ДетальныеЗаписиПакет = ДетальныеЗаписиПакетно(ТаблицаОтбор, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		Строка = Объект.ПланИтоги.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Таблица = ЗаполнитьПланКЗапуску(
			Строка,
			АдресПланХранилище,
			АдресПользовательскиеОтборы,
			ОбособитьВыпускПолуфабрикатов,
			ДетальныеЗаписиПакет);
		
		Если ПоказыватьДетали И ИдентификаторСтроки = Элементы.ПланИтоги.ТекущаяСтрока Тогда
			Объект.План.Очистить();
			Для Индекс = 0 По Таблица.Количество()-1 Цикл
				ЗаполнитьЗначенияСвойств(Объект.План.Добавить(), Таблица[Индекс]);
			КонецЦикла;
		КонецЕсли;
		
		ПересчитатьМножественныйЗапуск(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьМножественныйЗапуск(ДанныеСтроки)
	
	Если Не ДанныеСтроки.МножественныйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Перегруппировать Тогда
		
		// Перегруппировка - несколько разных групп по одной спецификации, только для продукции заказа
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Перегруппировать", Истина);
		СтруктураПоиска.Вставить("СпецификацияПлан", ДанныеСтроки.СпецификацияПлан);
		СтруктураПоиска.Вставить("Организация", ДанныеСтроки.Организация);
		СтруктураПоиска.Вставить("Партнер", ДанныеСтроки.Партнер);
		СтруктураПоиска.Вставить("Договор", ДанныеСтроки.Договор);
		СтруктураПоиска.Вставить("НаправлениеДеятельности", ДанныеСтроки.НаправлениеДеятельности);
		СтруктураПоиска.Вставить("ОсновноеИзделие", Истина);
		ОсновныеСтроки = Объект.ПланИтоги.НайтиСтроки(СтруктураПоиска);
		
		СтруктураПоиска.ОсновноеИзделие = Ложь;
		ПобочныеСтроки = Объект.ПланИтоги.НайтиСтроки(СтруктураПоиска);
		
		// Пакетная выборка детальных записей
		ТаблицаОтбор = НовыйОтборДетальныеЗаписи();
		Для каждого СтрокаГруппы Из ОсновныеСтроки Цикл
			Строка = ?(СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки, ДанныеСтроки, СтрокаГруппы); // Данные строки могут быть еще не перенесены в объект
			ЗаполнитьЗначенияСвойств(ТаблицаОтбор.Добавить(), Строка);
		КонецЦикла;
		Для каждого СтрокаГруппы Из ПобочныеСтроки Цикл
			Строка = ?(СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки, ДанныеСтроки, СтрокаГруппы); // Данные строки могут быть еще не перенесены в объект
			ЗаполнитьЗначенияСвойств(ТаблицаОтбор.Добавить(), Строка);
		КонецЦикла;
		ДетальныеЗаписиПакет = ДетальныеЗаписиПакетно(ТаблицаОтбор, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
		
		// Расчет количества партий
		КоличествоПартий = Новый Соответствие; // Ключ - заказ
		ОсновныеСтрокиОтметка = Новый Соответствие; // Ключ - заказ; отмеченные к запуску строки в количестве изделий
		
		//  По основным изделиям количество партий суммируется
		//  Основные изделия - это первая строка выпуска РС с признаком ЕстьУточняемоеОсновноеИзделие
		Для каждого СтрокаГруппы Из ОсновныеСтроки Цикл
			Если СтрокаГруппы.Отметка
					И Не СтрокаГруппы.АвтоПересчет
					И СтрокаГруппы.Спецификация = СтрокаГруппы.СпецификацияПлан Тогда
				Строка = ?(СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки, ДанныеСтроки, СтрокаГруппы); // Данные строки могут быть еще не перенесены в объект
				Детали = ДетальныеЗаписи(Строка, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет);
				Для Индекс = 0 По Детали.Количество()-1 Цикл
					СтрокаДетали = Детали[Индекс];
					Если Не СтрокаДетали.Отметка ИЛИ Не СтрокаДетали.ПродукцияЗаказа Тогда
						Продолжить;
					КонецЕсли;
					Количество = ?(СтрокаДетали.КоличествоНаПартию <> 0,
						СтрокаДетали.КЗапуску/СтрокаДетали.КоличествоНаПартию, 0);
					Ключ = СтрокаДетали.ЗаказНаПроизводство;
					Если КоличествоПартий[Ключ] = Неопределено Тогда
						КоличествоПартий.Вставить(Ключ, Количество);
					Иначе
						КоличествоПартий[Ключ] = КоличествоПартий[Ключ] + Количество;
					КонецЕсли;
					Если ОсновныеСтрокиОтметка[Ключ] = Неопределено Тогда
						ОсновныеСтрокиОтметка.Вставить(Ключ, СтрокаДетали.КЗапуску);
					Иначе
						ОсновныеСтрокиОтметка[Ключ] = ОсновныеСтрокиОтметка[Ключ] + СтрокаДетали.КЗапуску;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		//  По побочным изделиям количество партий берется как Максимум
		КоличествоПартийГруппы = Новый Соответствие;
		Для каждого СтрокаГруппы Из ПобочныеСтроки Цикл
			Если СтрокаГруппы.Отметка
					И Не СтрокаГруппы.АвтоПересчет
					И СтрокаГруппы.Спецификация = СтрокаГруппы.СпецификацияПлан Тогда
				Строка = ?(СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки, ДанныеСтроки, СтрокаГруппы); // Данные строки могут быть еще не перенесены в объект
				Детали = ДетальныеЗаписи(Строка, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет);
				Для Индекс = 0 По Детали.Количество()-1 Цикл
					СтрокаДетали = Детали[Индекс];
					Если Не СтрокаДетали.Отметка ИЛИ Не СтрокаДетали.ПродукцияЗаказа Тогда
						Продолжить;
					КонецЕсли;
					Количество = ?(СтрокаДетали.КоличествоНаПартию <> 0,
						СтрокаДетали.КЗапуску/СтрокаДетали.КоличествоНаПартию, 0);
					Ключ = СтрокаДетали.ЗаказНаПроизводство;
					Если КоличествоПартийГруппы[Ключ] = Неопределено Тогда
						КоличествоПартийГруппы.Вставить(Ключ, Количество);
					Иначе
						КоличествоПартийГруппы[Ключ] = КоличествоПартийГруппы[Ключ] + Количество;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого КлючИЗначение Из КоличествоПартийГруппы Цикл
					Если КоличествоПартий[КлючИЗначение.Ключ] = Неопределено Тогда
						КоличествоПартий.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
					Иначе
						КоличествоПартий[КлючИЗначение.Ключ] = Макс(КоличествоПартий[КлючИЗначение.Ключ], КлючИЗначение.Значение);
					КонецЕсли;
				КонецЦикла;	
				КоличествоПартийГруппы.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		// Авто пересчет побочных изделий (на рассчитанное количество партий)
		Остатки = Новый Соответствие;
		Для каждого СтрокаГруппы Из ПобочныеСтроки Цикл
			Если СтрокаГруппы.АвтоПересчет Тогда
				КЗапуску = 0;
				
				Детали = ДетальныеЗаписи(СтрокаГруппы, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет);
				Для Индекс = 0 По Детали.Количество()-1 Цикл
					СтрокаДетали = Детали[Индекс];
					Если Не СтрокаДетали.ПродукцияЗаказа Тогда
						Продолжить;
					КонецЕсли;
					
					Ключ = СтрокаДетали.ЗаказНаПроизводство;
					
					Количество = 0;
					Если СтрокаГруппы.Спецификация = СтрокаГруппы.СпецификацияПлан Тогда
						Если Остатки[Ключ] = Неопределено Тогда
							Количество = ?(КоличествоПартий[Ключ] = Неопределено,
								0, СтрокаДетали.КоличествоНаПартию * КоличествоПартий[Ключ]);
							Остатки.Вставить(Ключ, Количество);
						Иначе
							Количество = Остатки[Ключ];
						КонецЕсли;
					КонецЕсли;
					ДеталиКЗапуску = Мин(СтрокаДетали.Требуется, Количество);
					
					СтрокаДетали.КЗапуску = ?(ДеталиКЗапуску > 0, ДеталиКЗапуску, СтрокаДетали.Требуется);
					СтрокаДетали.Отметка = ?(ДеталиКЗапуску > 0, Истина, Ложь);
					
					Если ДеталиКЗапуску <> 0 Тогда
						КЗапуску = КЗапуску + ДеталиКЗапуску;
						Остатки[Ключ] = Остатки[Ключ] - ДеталиКЗапуску;
					КонецЕсли;
				КонецЦикла;
				
				Если КЗапуску = 0 Тогда
					СтрокаГруппы.КЗапуску = СтрокаГруппы.Требуется;
					СтрокаГруппы.Отметка = Ложь;
					СтрокаГруппы.ОтметкаФорма = 0;
				Иначе
					СтрокаГруппы.КЗапуску = КЗапуску;
					СтрокаГруппы.Отметка = Истина;
					СтрокаГруппы.ОтметкаФорма = 2;
				КонецЕсли;
				ПоместитьПланВХранилище(СтрокаГруппы, Детали, АдресПланХранилище);
				
				Если СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки Тогда
					ДанныеСтроки.ПланВХранилище = СтрокаГруппы.ПланВХранилище;
				КонецЕсли;
					
				Остатки.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		// Авто пересчет основных изделий (на рассчитанное количество партий за вычетом строк, отмеченных вручную)
		Остатки = Новый Соответствие; // Остатки не обнуляются - действуют на все строки
		Для каждого СтрокаГруппы Из ОсновныеСтроки Цикл
			Если СтрокаГруппы.АвтоПересчет Тогда
				КЗапуску = 0;
				
				Детали = ДетальныеЗаписи(СтрокаГруппы, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет);
				Для Индекс = 0 По Детали.Количество()-1 Цикл
					СтрокаДетали = Детали[Индекс];
					Если Не СтрокаДетали.ПродукцияЗаказа Тогда
						Продолжить;
					КонецЕсли;
					
					Ключ = СтрокаДетали.ЗаказНаПроизводство;
					
					Количество = 0;
					Если СтрокаГруппы.Спецификация = СтрокаГруппы.СпецификацияПлан Тогда
						Если Остатки[Ключ] = Неопределено Тогда
							Количество = ?(КоличествоПартий[Ключ] = Неопределено,
								0, СтрокаДетали.КоличествоНаПартию * КоличествоПартий[Ключ]);
							Если ОсновныеСтрокиОтметка[Ключ] <> Неопределено Тогда
								Количество = ?(Количество > ОсновныеСтрокиОтметка[Ключ],
									Количество - ОсновныеСтрокиОтметка[Ключ], 0);
							КонецЕсли;
							Остатки.Вставить(Ключ, Количество);
						Иначе
							Количество = Остатки[Ключ];
						КонецЕсли;
					КонецЕсли;
					ДеталиКЗапуску = Мин(СтрокаДетали.Требуется, Количество);
					
					СтрокаДетали.КЗапуску = ?(ДеталиКЗапуску > 0, ДеталиКЗапуску, СтрокаДетали.Требуется);
					СтрокаДетали.Отметка = ?(ДеталиКЗапуску > 0, Истина, Ложь);
					
					Если ДеталиКЗапуску <> 0 Тогда
						КЗапуску = КЗапуску + ДеталиКЗапуску;
						Остатки[Ключ] = Остатки[Ключ] - ДеталиКЗапуску;
					КонецЕсли;
				КонецЦикла;
				
				Если КЗапуску = 0 Тогда
					СтрокаГруппы.КЗапуску = СтрокаГруппы.Требуется;
					СтрокаГруппы.Отметка = Ложь;
					СтрокаГруппы.ОтметкаФорма = 0;
				Иначе
					СтрокаГруппы.КЗапуску = КЗапуску;
					СтрокаГруппы.Отметка = Истина;
					СтрокаГруппы.ОтметкаФорма = 2;
				КонецЕсли;
				ПоместитьПланВХранилище(СтрокаГруппы, Детали, АдресПланХранилище);
				
				Если СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки Тогда
					ДанныеСтроки.ПланВХранилище = СтрокаГруппы.ПланВХранилище;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Пересчет множественного запуска - несколько строк итогов одной группы с разной номенклатурой
		СтрокиГруппы = Объект.ПланИтоги.НайтиСтроки(Новый Структура("НомерГруппы", ДанныеСтроки.НомерГруппы));
		
		// Пакетная выборка детальных записей
		ТаблицаОтбор = НовыйОтборДетальныеЗаписи();
		Для каждого СтрокаГруппы Из СтрокиГруппы Цикл
			Строка = ?(СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки, ДанныеСтроки, СтрокаГруппы); // Данные строки могут быть еще не перенесены в объект
			ЗаполнитьЗначенияСвойств(ТаблицаОтбор.Добавить(), Строка);
		КонецЦикла;
		ДетальныеЗаписиПакет = ДетальныеЗаписиПакетно(ТаблицаОтбор, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
		
		// Расчет количества партий
		КоличествоПартий = Новый Соответствие; // Ключ - заказ (для продукции заказа) / пустая ссылка для ПФ; значение - количество
		КоличествоПартийГруппы = Новый Соответствие;
		
		Для каждого СтрокаГруппы Из СтрокиГруппы Цикл
			Если СтрокаГруппы.Отметка
					И Не СтрокаГруппы.АвтоПересчет
					И СтрокаГруппы.Спецификация = СтрокаГруппы.СпецификацияПлан Тогда
				Строка = ?(СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки, ДанныеСтроки, СтрокаГруппы); // Данные строки могут быть еще не перенесены в объект
				Детали = ДетальныеЗаписи(Строка, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет);
				Для Индекс = 0 По Детали.Количество()-1 Цикл
					СтрокаДетали = Детали[Индекс];
					Если Не СтрокаДетали.Отметка Тогда
						Продолжить;
					КонецЕсли;
					Количество = ?(СтрокаДетали.КоличествоНаПартию <> 0,
						СтрокаДетали.КЗапуску/СтрокаДетали.КоличествоНаПартию, 0);
					Ключ = ?(СтрокаДетали.ПродукцияЗаказа,
						СтрокаДетали.ЗаказНаПроизводство, Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
					Если КоличествоПартийГруппы[Ключ] = Неопределено Тогда
						КоличествоПартийГруппы.Вставить(Ключ, Количество);
					Иначе
						КоличествоПартийГруппы[Ключ] = КоличествоПартийГруппы[Ключ] + Количество;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого КлючИЗначение Из КоличествоПартийГруппы Цикл
					Если КоличествоПартий[КлючИЗначение.Ключ] = Неопределено Тогда
						КоличествоПартий.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
					Иначе
						КоличествоПартий[КлючИЗначение.Ключ] = Макс(КоличествоПартий[КлючИЗначение.Ключ], КлючИЗначение.Значение);
					КонецЕсли;
				КонецЦикла;	
				КоличествоПартийГруппы.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		// Авто пересчет количества к запуску
		Остатки = Новый Соответствие;
		Для каждого СтрокаГруппы Из СтрокиГруппы Цикл
			Если СтрокаГруппы.АвтоПересчет Тогда
				КЗапуску = 0;
				
				Детали = ДетальныеЗаписи(СтрокаГруппы, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет);
				Для Индекс = 0 По Детали.Количество()-1 Цикл
					СтрокаДетали = Детали[Индекс];
					
					Ключ = ?(СтрокаДетали.ПродукцияЗаказа,
						СтрокаДетали.ЗаказНаПроизводство, Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
					
					Количество = 0;
					Если СтрокаГруппы.Спецификация = СтрокаГруппы.СпецификацияПлан Тогда
						Если Остатки[Ключ] = Неопределено Тогда
							Количество = ?(КоличествоПартий[Ключ] = Неопределено,
								0, СтрокаДетали.КоличествоНаПартию * КоличествоПартий[Ключ]);
							Остатки.Вставить(Ключ, Количество);
						Иначе
							Количество = Остатки[Ключ];
						КонецЕсли;
					КонецЕсли;
					ДеталиКЗапуску = Мин(СтрокаДетали.Требуется, Количество);
					
					СтрокаДетали.КЗапуску = ?(ДеталиКЗапуску > 0, ДеталиКЗапуску, СтрокаДетали.Требуется);
					СтрокаДетали.Отметка = ?(ДеталиКЗапуску > 0, Истина, Ложь);
					
					Если ДеталиКЗапуску <> 0 Тогда
						КЗапуску = КЗапуску + ДеталиКЗапуску;
						Остатки[Ключ] = Остатки[Ключ] - ДеталиКЗапуску;
					КонецЕсли;
				КонецЦикла;
				
				Если КЗапуску = 0 Тогда
					СтрокаГруппы.КЗапуску = СтрокаГруппы.Требуется;
					СтрокаГруппы.Отметка = Ложь;
					СтрокаГруппы.ОтметкаФорма = 0;
				Иначе
					СтрокаГруппы.КЗапуску = КЗапуску;
					СтрокаГруппы.Отметка = Истина;
					СтрокаГруппы.ОтметкаФорма = 2;
				КонецЕсли;
				ПоместитьПланВХранилище(СтрокаГруппы, Детали, АдресПланХранилище);
				
				Если СтрокаГруппы.НомерСтроки = ДанныеСтроки.НомерСтроки Тогда
					ДанныеСтроки.ПланВХранилище = СтрокаГруппы.ПланВХранилище;
				КонецЕсли;
				
				Остатки.Очистить();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИтогиПриАктивизацииСтрокиОтложенно()
	
	ОбновитьПланПриАктивизацииСтроки();
	ЗаполнитьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланПриАктивизацииСтроки()
	
	Объект.План.Очистить();
	ЕстьЗаданияКРасчету = Ложь;
	
	Если Элементы.ПланИтоги.ТекущиеДанные <> Неопределено Тогда
		ДанныеСтроки = СтрокаПланИтогиВСтруктуру(Элементы.ПланИтоги.ТекущиеДанные);
		
		Сведения = ПланИтогиПриАктивизацииНаСервере(
			ДанныеСтроки,
			АдресПланХранилище,
			АдресПользовательскиеОтборы,
			ОбособитьВыпускПолуфабрикатов,
			ПоказыватьДетали);
			
		Если ПоказыватьДетали Тогда
			Для Индекс = 0 По Сведения.ДетальныеЗаписи.ВГраница() Цикл
				ЗаполнитьЗначенияСвойств(Объект.План.Добавить(), Сведения.ДетальныеЗаписи[Индекс]);
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеАктивнойСтроки, Сведения,
			"МинимальнаяПартияВыпуска, ОптимальнаяПартияВыпуска, ЕстьПобочныйВыпуск, ПобочныйВыпускКоличествоИзделий, ПобочныйВыпускНоменклатураПредставление");
		
		ЕстьЗаданияКРасчету = Сведения.ЕстьЗаданияКРасчету;
	Иначе
		ДанныеАктивнойСтроки.МинимальнаяПартияВыпуска = 0;
		ДанныеАктивнойСтроки.ОптимальнаяПартияВыпуска = 0;
		ДанныеАктивнойСтроки.ЕстьПобочныйВыпуск = Ложь;
		ДанныеАктивнойСтроки.ПобочныйВыпускКоличествоИзделий = 0;
		ДанныеАктивнойСтроки.ПобочныйВыпускНоменклатураПредставление = "";
	КонецЕсли;
	
	Элементы.ГруппаПредупреждение.Видимость = ЕстьЗаданияКРасчету;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПланИтогиПриАктивизацииНаСервере(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ПоказыватьДетали)
	
	Результат = ДанныеНоменклатуры(ДанныеСтроки);
	
	Если ПоказыватьДетали Тогда
		ДетальныеЗаписи = ДетальныеЗаписи(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
		Результат.Вставить("ДетальныеЗаписи", ОбщегоНазначения.ТаблицаЗначенийВМассив(ДетальныеЗаписи));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеНоменклатуры(ДанныеСтроки)
	
	Результат = Новый Структура;
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Задания
		|ГДЕ
		|	Задания.Номенклатура = &Номенклатура
		|	И Задания.Характеристика = &Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(СпецификацииИзделий.Номенклатура) КАК КоличествоИзделий,
		|	ПРЕДСТАВЛЕНИЕ(МАКСИМУМ(СпецификацииИзделий.Номенклатура)) КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
		|ГДЕ
		|	СпецификацииИзделий.Спецификация = &Спецификация
		|	И СпецификацииИзделий.ПобочныйВыход
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(СпецификацииИзделий.Номенклатура) > 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	СпецификацииИзделий.Спецификация.ОптимальнаяПартияВыпуска    КАК ОптимальнаяПартияВыпуска,
		|	СпецификацииИзделий.Спецификация.МинимальнаяПартияВыпуска    КАК МинимальнаяПартияВыпуска,
		|	СпецификацииИзделий.Спецификация.ВыпускПроизвольнымиПорциями КАК ВыпускПроизвольнымиПорциями,
		|	Изделие.Ссылка КАК Номенклатура,
		|	СпецификацииИзделий.Упаковка КАК Упаковка,
		|	СпецификацииИзделий.КоличествоУпаковокНаЕдиницуПартииЗапуска КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	СпецификацииИзделий.КоличествоУпаковокНаЕдиницуПартииЗапуска * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоНаПартию,
		|	СпецификацииИзделий.Порядок = 1 КАК ЭтоОсновноеИзделие,
		|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
		|	&РеквизитыУпаковкиНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Изделие
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
		|	ПО СпецификацииИзделий.Спецификация = &Спецификация
		|		И СпецификацииИзделий.ВидНоменклатуры = Изделие.ВидНоменклатуры
		|		И СпецификацииИзделий.Номенклатура В (Изделие.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|		И СпецификацииИзделий.Характеристика В (&Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|ГДЕ
		|	Изделие.Ссылка = &Номенклатура
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ОсновноеИзделиеСпецификации.Номенклатура КАК Номенклатура,
		|	ОсновноеИзделиеСпецификации.Упаковка КАК Упаковка,
		|	ОсновноеИзделиеСпецификации.КоличествоУпаковокНаЕдиницуПартииЗапуска КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
		|	&РеквизитыУпаковкиОсновноеИзделиеСпецификации
		|ИЗ
		|	РегистрСведений.СпецификацииИзделий КАК ОсновноеИзделиеСпецификации
		|ГДЕ
		|	ОсновноеИзделиеСпецификации.Спецификация = &Спецификация
		|	И ОсновноеИзделиеСпецификации.Порядок = 1";
	
	ТекстПодстановки = УправлениеДаннымиОбИзделиях.ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения(
		"СпецификацииИзделий.Упаковка",
		"Изделие");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыУпаковкиНоменклатура", ТекстПодстановки);
	
	ТекстПодстановки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СпецификацииИзделий.Упаковка",
		"Изделие");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки", ТекстПодстановки);
	
	ТекстПодстановки = УправлениеДаннымиОбИзделиях.ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения(
		"ОсновноеИзделиеСпецификации.Упаковка",
		"ОсновноеИзделиеСпецификации.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыУпаковкиОсновноеИзделиеСпецификации", ТекстПодстановки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеСтроки.Характеристика);
	Запрос.УстановитьПараметр("Спецификация", ДанныеСтроки.Спецификация);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат.Вставить("ЕстьЗаданияКРасчету", Не РезультатыЗапроса[0].Пустой());
	
	// Побочный выпуск
	Выборка = РезультатыЗапроса[1].Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ЕстьПобочныйВыпуск", Истина);
		Результат.Вставить("ПобочныйВыпускКоличествоИзделий", Выборка.КоличествоИзделий);
		Результат.Вставить("ПобочныйВыпускНоменклатураПредставление", Выборка.Номенклатура);
	Иначе
		Результат.Вставить("ЕстьПобочныйВыпуск", Ложь);
		Результат.Вставить("ПобочныйВыпускКоличествоИзделий", 0);
		Результат.Вставить("ПобочныйВыпускНоменклатураПредставление", "");
	КонецЕсли;
	
	// Расчет мин/опт партии
	ОптимальнаяПартияВыпуска = 0;
	МинимальнаяПартияВыпуска = 0;
	
	ТаблицаИзделие = РезультатыЗапроса[2].Выгрузить();
	ТаблицаОсновноеИзделие = РезультатыЗапроса[3].Выгрузить();
	
	Если ТаблицаИзделие.Количество() = 1
		И ТаблицаОсновноеИзделие.Количество() = 1 Тогда
		СтрокаИзделие = ТаблицаИзделие[0];
		УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(СтрокаИзделие, ТаблицаИзделие);
		
		Если СтрокаИзделие.ВыпускПроизвольнымиПорциями Тогда
			КоэффициентПересчетаВОсновноеИзделие = 1;
			Если Не СтрокаИзделие.ЭтоОсновноеИзделие Тогда
				ОсновноеИзделие = Справочники.РесурсныеСпецификации.СтруктураДанныхОсновногоИзделияСпецификации();
				ЗаполнитьЗначенияСвойств(ОсновноеИзделие, СтрокаИзделие,
					"Номенклатура, Упаковка, ДанныеУпаковки, ЭтоОсновноеИзделие, КоличествоУпаковокНаЕдиницуПартииВыпуска");
				
				ОсновноеИзделиеСпецификации = ТаблицаОсновноеИзделие[0];
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(
					ОсновноеИзделиеСпецификации, ТаблицаОсновноеИзделие);
				УправлениеДаннымиОбИзделиях.ЗаполнитьКоэффициентПересчетаВОсновноеИзделие(
					ОсновноеИзделие, ОсновноеИзделиеСпецификации);
				
				КоэффициентПересчетаВОсновноеИзделие = ОсновноеИзделие.КоэффициентПересчетаВОсновноеИзделие;
			КонецЕсли;
			
			ОптимальнаяПартияВыпуска = СтрокаИзделие.ОптимальнаяПартияВыпуска
				* КоэффициентПересчетаВОсновноеИзделие;
			МинимальнаяПартияВыпуска = СтрокаИзделие.МинимальнаяПартияВыпуска
				* КоэффициентПересчетаВОсновноеИзделие;
		Иначе
			ОптимальнаяПартияВыпуска = СтрокаИзделие.ОптимальнаяПартияВыпуска
				* СтрокаИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* СтрокаИзделие.ДанныеУпаковки.Числитель
				/ СтрокаИзделие.ДанныеУпаковки.Знаменатель;
			МинимальнаяПартияВыпуска = СтрокаИзделие.МинимальнаяПартияВыпуска
				* СтрокаИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* СтрокаИзделие.ДанныеУпаковки.Числитель
				/ СтрокаИзделие.ДанныеУпаковки.Знаменатель;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаИзделие.Количество() > 0 Тогда
		КоличествоНаПартию = ТаблицаИзделие[0].КоличествоНаПартию;
		ОсновноеИзделие = ТаблицаИзделие[0].ЭтоОсновноеИзделие;
	Иначе
		КоличествоНаПартию = 1;
		ОсновноеИзделие = Ложь;
	КонецЕсли;
	
	Результат.Вставить("ОптимальнаяПартияВыпуска", Окр(ОптимальнаяПартияВыпуска, 3));
	Результат.Вставить("МинимальнаяПартияВыпуска", Окр(МинимальнаяПартияВыпуска, 3));
	Результат.Вставить("КоличествоНаПартию", КоличествоНаПартию);
	Результат.Вставить("ОсновноеИзделие", ОсновноеИзделие);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьИзделияПоТекущейСтроке(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов)
	
	Возврат ПоместитьВоВременноеХранилище(
		ДетальныеЗаписи(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов));
	
КонецФункции

&НаКлиенте
Процедура ВыборИзделийКЗапускуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Элементы.ПланИтоги.ТекущиеДанные.КЗапуску = Результат.КЗапуску;
		Элементы.ПланИтоги.ТекущиеДанные.Отметка = Результат.КЗапуску > 0;
		Элементы.ПланИтоги.ТекущиеДанные.ОтметкаФорма = ?(Результат.КЗапуску > 0, 1, 0);
		Элементы.ПланИтоги.ТекущиеДанные.АвтоПересчет = Ложь;
		
		ДанныеСтроки = СтрокаПланИтогиВСтруктуру(Элементы.ПланИтоги.ТекущиеДанные);
		
		Если Элементы.ПланИтоги.ТекущиеДанные.МножественныйЗапуск Тогда
			СтрокиПлан = ВыборИзделийКЗапускуЗавершениеНаСервереКонтекст(Результат.АдресИзделия, ДанныеСтроки);
		Иначе
			СтрокиПлан = ВыборИзделийКЗапускуЗавершениеНаСервере(Результат.АдресИзделия, ДанныеСтроки, АдресПланХранилище);
		КонецЕсли;
		
		Если ПоказыватьДетали Тогда
			Объект.План.Очистить();
			Для Индекс = 0 По СтрокиПлан.ВГраница() Цикл
				ЗаполнитьЗначенияСвойств(Объект.План.Добавить(), СтрокиПлан[Индекс]);
			КонецЦикла;
		КонецЕсли;
		
		Элементы.ПланИтоги.ТекущиеДанные.ПланВХранилище = ДанныеСтроки.ПланВХранилище;
		
		ЗаполнитьИнформационнуюСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыборИзделийКЗапускуЗавершениеНаСервереКонтекст(АдресТаблицы, ДанныеСтроки)
	
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблицы);
	ПоместитьПланВХранилище(ДанныеСтроки, Таблица, АдресПланХранилище);
	
	ПересчитатьМножественныйЗапуск(ДанныеСтроки);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыборИзделийКЗапускуЗавершениеНаСервере(АдресТаблицы, ДанныеСтроки, АдресПланХранилище)
	
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблицы);
	ПоместитьПланВХранилище(ДанныеСтроки, Таблица, АдресПланХранилище);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыРасшифровки(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов)
	
	Результат = Новый Структура;
	Результат.Вставить("СформироватьПриОткрытии", Истина);
	Результат.Вставить("Спецификация", ДанныеСтроки.Спецификация);
	Результат.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	Результат.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	Результат.Вставить("НаправлениеДеятельности", ДанныеСтроки.НаправлениеДеятельности);
	
	КолонкаКоличество = ?(ДанныеСтроки.Отметка, "КЗапуску", "Требуется");
	Результат.Вставить("Количество", ДанныеСтроки[КолонкаКоличество]);
	
	Таблица = ДетальныеЗаписи(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
	Если ДанныеСтроки.Отметка Тогда
		Таблица = Таблица.Скопировать(Новый Структура("Отметка", Истина));
	КонецЕсли;
	
	Изделия = Таблица.Скопировать(, "Номенклатура, Характеристика, ЗаказНаПроизводство, Получатель, Назначение," + КолонкаКоличество);
	Изделия.Колонки[КолонкаКоличество].Имя = "Количество";
	
	Назначения = Таблица.Скопировать(, "ЗаказНаПроизводство, НазначениеМатериалы, СверхЗаказа," + КолонкаКоличество);
	Назначения.Колонки[КолонкаКоличество].Имя = "Количество";
	Назначения.Колонки.НазначениеМатериалы.Имя = "Назначение";	
	
	ЗаказНаПроизводство = Неопределено;
	Назначение = Неопределено;
	Для каждого Строка Из Назначения Цикл
		Если Строка.СверхЗаказа Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаказНаПроизводство = Неопределено Тогда
			ЗаказНаПроизводство = Строка.ЗаказНаПроизводство;
		ИначеЕсли ЗаказНаПроизводство <> Строка.ЗаказНаПроизводство Тогда
			ЗаказНаПроизводство = Документы.ЗаказНаПроизводство2_2.ПустаяСсылка();
		КонецЕсли;
		
		Если Назначение = Неопределено Тогда
			Назначение = Строка.Назначение;
		ИначеЕсли Назначение <> Строка.Назначение Тогда
			Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Назначение) Тогда
		СтрокаСверхЗаказа = Назначения.Найти(Истина, "СверхЗаказа");
		Если СтрокаСверхЗаказа <> Неопределено Тогда
			СтрокаСверхЗаказа.Назначение = Назначение;
		КонецЕсли;
	КонецЕсли;
	
	Назначения.Свернуть("Назначение", "Количество");
	
	Результат.Вставить("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Результат.Вставить("АдресИзделия", ПоместитьВоВременноеХранилище(Изделия));
	Результат.Вставить("АдресНазначения", ПоместитьВоВременноеХранилище(Назначения));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИнформационнуюСтроку()
	
	Строка = Элементы.ПланИтоги.ТекущиеДанные;
	Если Строка = Неопределено Тогда
		ИнформационнаяСтрока = Неопределено;
	Иначе
		
		Строки = Новый Массив;
		ШрифтЖирный = Новый Шрифт(,,Истина);
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
			Строка.НоменклатураПредставление,
			Строка.ХарактеристикаПредставление);
		Строки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеНоменклатуры,,,, "Расшифровать"));
		
		Строки.Добавить(" ");
		
		// Требуется
		Строки.Добавить(НСтр("ru = 'Требуется:';
							|en = 'Required:'") + " ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Формат(Строка.Требуется, "ЧН=0; ЧГ="), ШрифтЖирный));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка.НоменклатураЕдиницаИзмеренияПредставление, ШрифтЖирный));
		
		Строки.Добавить(" ");
		
		// К запуску
		Строки.Добавить(НСтр("ru = 'К запуску:';
							|en = 'To launch:'") + " ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Формат(?(Строка.Отметка, Строка.КЗапуску, 0), "ЧН=0; ЧГ="), ШрифтЖирный));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка.НоменклатураЕдиницаИзмеренияПредставление, ШрифтЖирный));
		
		// Побочный выпуск
		Если ДанныеАктивнойСтроки.ЕстьПобочныйВыпуск Тогда
			
			Строки.Добавить(" ");
			Строки.Добавить(НСтр("ru = 'Побочный выпуск:';
								|en = 'Side release:'") + " ");
			
			Если ДанныеАктивнойСтроки.ПобочныйВыпускКоличествоИзделий = 1 Тогда
				Строки.Добавить(Новый ФорматированнаяСтрока(ДанныеАктивнойСтроки.ПобочныйВыпускНоменклатураПредставление,,,, "Расшифровать"));
			Иначе
				Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<несколько изделий...>';
																|en = '<several finished products...>'"),,,, "Расшифровать"));
			КонецЕсли;
			
		КонецЕсли;
		
		// Минимальная партия
		Если ДанныеАктивнойСтроки.МинимальнаяПартияВыпуска <> 0 Тогда
			
			Строки.Добавить(" ");
			
			Строки.Добавить(НСтр("ru = 'Мин. партия:';
								|en = 'Min. lot:'") + " ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Формат(ДанныеАктивнойСтроки.МинимальнаяПартияВыпуска, "ЧГ="), ШрифтЖирный));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка.НоменклатураЕдиницаИзмеренияПредставление, ШрифтЖирный));
			
		КонецЕсли;
		
		// Оптимальная партия
		Если ДанныеАктивнойСтроки.ОптимальнаяПартияВыпуска <> 0 Тогда
			
			Строки.Добавить(" ");
			
			Строки.Добавить(НСтр("ru = 'Опт. партия:';
								|en = 'Wholesale lot:'") + " ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Формат(ДанныеАктивнойСтроки.ОптимальнаяПартияВыпуска, "ЧГ="), ШрифтЖирный));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка.НоменклатураЕдиницаИзмеренияПредставление, ШрифтЖирный));
			
		КонецЕсли;
		
		// Обеспечено комплектующими
		Если Строка.ТребуетсяОбеспечение
			И Строка.Спецификация = Строка.СпецификацияПлан Тогда
			
			Строки.Добавить(" ");
			
			Строки.Добавить(НСтр("ru = 'Обеспечено:';
								|en = 'Supplied:'") + " ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Формат(Строка.Обеспечено, "ЧН=0; ЧГ="), ШрифтЖирный));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка.НоменклатураЕдиницаИзмеренияПредставление, ШрифтЖирный));
			
		КонецЕсли;
		
		ИнформационнаяСтрока = ?(Строки.ВГраница() <> -1, Новый ФорматированнаяСтрока(Строки), Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		ИзменениеПараметров = СравнитьСтруктурыПоКлючевымПолям(ПараметрыОтображения, Результат, Новый Структура("КроссТаблица,Периодичность,ИмяПоляДатыПериода,КоличествоПериодов")); 
		ЗаполнитьЗначенияСвойств(ПараметрыОтображения, Результат);
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПараметрыОтображения");
		СохранитьПараметрыОтображенияИОбновить(ИзменениеПараметров);
		Если НачатьОжиданиеДлительнойОперации Тогда
			НачатьОжиданиеДлительнойОперации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьСтруктурыПоКлючевымПолям(Структура1, Структура2, СтруктураПолей)
		
	Для каждого КлючИЗначение Из СтруктураПолей Цикл 
		Значение1 = Неопределено;	
		Значение2 = Неопределено;
		Если Структура1.Свойство(КлючИЗначение.Ключ, Значение1) И Структура2.Свойство(КлючИЗначение.Ключ, Значение2) 
			И Значение1<>Значение2 Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СохранитьПараметрыОтображенияИОбновить(ИзменениеПараметров = Истина)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"Обработка.ФормированиеЭтаповПроизводства",
		"ПараметрыОтображения",
		ПараметрыОтображения);
		
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагНоменклатурныйПлан И ИзменениеПараметров Тогда
		ПеречитатьНоменклатурныйПланНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПланКЗапуску(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет = Неопределено)
	
	Таблица = ДетальныеЗаписи(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет);
	
	// Заполнение количества
	
	Остаток = ?(ДанныеСтроки.Отметка, ДанныеСтроки.КЗапуску, 0);
	
	ГраницаНеЗакрытойПотребности = -1;
	
	Для Индекс = 0 По Таблица.Количество() - 1 Цикл
		
		СтрокаПлан = Таблица[Индекс];
		
		КЗапуску = Мин(СтрокаПлан.Обеспечено, Остаток);
		СтрокаПлан.КЗапуску = ?(КЗапуску = 0, СтрокаПлан.Требуется, КЗапуску);
		СтрокаПлан.Отметка = КЗапуску <> 0;
		
		Остаток = Остаток - КЗапуску;
		
		Если ГраницаНеЗакрытойПотребности = -1 И (СтрокаПлан.Требуется > СтрокаПлан.КЗапуску Или Не СтрокаПлан.Отметка) Тогда
			ГраницаНеЗакрытойПотребности = Индекс;
		КонецЕсли;
		
		Если Не СтрокаПлан.Отметка И СтрокаПлан.СверхЗаказа Тогда
			Таблица.Удалить(СтрокаПлан);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Остаток > 0 И ГраницаНеЗакрытойПотребности <> -1 Тогда
		
		Для Индекс = ГраницаНеЗакрытойПотребности По Таблица.Количество() - 1 Цикл
			
			СтрокаПлан = Таблица[Индекс];
			
			Требуется = ?(СтрокаПлан.Отметка, СтрокаПлан.Требуется - СтрокаПлан.КЗапуску, СтрокаПлан.Требуется);
			
			Если Требуется = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Распределено = Мин(Требуется, Остаток);
			СтрокаПлан.КЗапуску = ?(СтрокаПлан.Отметка, СтрокаПлан.КЗапуску + Распределено, Распределено);
			СтрокаПлан.Отметка = СтрокаПлан.КЗапуску > 0;
			
			Остаток = Остаток - Распределено;
			
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавление строки сверх заказа
	Если Остаток > 0 Тогда
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Таблица[0],
			"НомерГруппы, Спецификация, СпецификацияПлан, НаправлениеДеятельности, ПодразделениеДиспетчер, Номенклатура, Характеристика, ТипНоменклатуры, ОбособленнаяЗакупкаПродажа, КоличествоНаПартию");
		
		НоваяСтрока.Требуется = 0;
		НоваяСтрока.КЗапуску = Остаток;
		НоваяСтрока.Отметка = Истина;
		НоваяСтрока.СверхЗаказа = Истина;
		НоваяСтрока.НомерСтроки = 100000;
		НоваяСтрока.КлючПартия = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		НоваяСтрока.КлючНоменклатура = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		НоваяСтрока.ПродукцияЗаказа = Ложь;
		НоваяСтрока.СвободныйВыпускИзОбособленныхМатериалов = Ложь;
		НоваяСтрока.Уровень = 0;
		НоваяСтрока.ДлительностьДоВыпуска = 0;
		
		ПараметрыОбеспечения = ОбеспечениеПроизводства.ПараметрыОбеспеченияНоменклатуры(
			ДанныеСтроки.Номенклатура,
			ДанныеСтроки.Характеристика,
			Таблица[0].ВыпускающееПодразделение);
		НоваяСтрока.Получатель = ?(ЗначениеЗаполнено(ПараметрыОбеспечения.Склад),
			ПараметрыОбеспечения.Склад,
			Таблица[0].Получатель);
		
		Если ДанныеСтроки.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
			//++ Устарело_Переработка24
			Или ДанныеСтроки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
			//-- Устарело_Переработка24
			Или Ложь Тогда
			НоваяСтрока.Назначение = Документы.ЭтапПроизводства2_2.НазначениеПоУмолчаниюДляПобочныхИзделий(Таблица[0].ЗаказНаПроизводство);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обновление таблицы в хранилище
	ПоместитьПланВХранилище(ДанныеСтроки, Таблица, АдресПланХранилище);
	
	Возврат Таблица;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПоместитьПланВХранилище(ДанныеСтроки, Таблица, АдресПланХранилище)
	
	План = ПолучитьИзВременногоХранилища(АдресПланХранилище);
	Если План = Неопределено Тогда
		План = Таблица.СкопироватьКолонки();
	КонецЕсли;
	
	Если ДанныеСтроки.ПланВХранилище Тогда
		
		СтруктураПоиска = Новый Структура("НомерГруппы, Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		
		Для каждого Строка Из План.НайтиСтроки(СтруктураПоиска) Цикл
			План.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеСтроки.Отметка Тогда
		
		Для каждого Строка Из Таблица Цикл
			ЗаполнитьЗначенияСвойств(План.Добавить(), Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеСтроки.ПланВХранилище = ДанныеСтроки.Отметка;
	ПоместитьВоВременноеХранилище(План, АдресПланХранилище);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПланИтогиВСтруктуру(Строка)
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", Строка.ПолучитьИдентификатор());
	Результат.Вставить("НомерСтроки", Строка.НомерСтроки);
	Результат.Вставить("НомерГруппы", Строка.НомерГруппы);
	Результат.Вставить("Организация", Строка.Организация);
	Результат.Вставить("Партнер", Строка.Партнер);
	Результат.Вставить("Договор", Строка.Договор);
	Результат.Вставить("НаправлениеДеятельности", Строка.НаправлениеДеятельности);
	Результат.Вставить("ПодразделениеДиспетчер", Строка.ПодразделениеДиспетчер);
	Результат.Вставить("ЗаказПодДеятельность", Строка.ЗаказПодДеятельность);
	Результат.Вставить("ХозяйственнаяОперация", Строка.ХозяйственнаяОперация);
	Результат.Вставить("Спецификация", Строка.Спецификация);
	Результат.Вставить("СпецификацияПлан", Строка.СпецификацияПлан);
	Результат.Вставить("Номенклатура", Строка.Номенклатура);
	Результат.Вставить("Характеристика", Строка.Характеристика);
	Результат.Вставить("МножественныйЗапуск", Строка.МножественныйЗапуск);
	Результат.Вставить("Отметка", Строка.Отметка);
	Результат.Вставить("КЗапуску", Строка.КЗапуску);
	Результат.Вставить("Требуется", Строка.Требуется);
	Результат.Вставить("ТребуетсяОбеспечение", Строка.ТребуетсяОбеспечение);
	Результат.Вставить("Обеспечено", Строка.Обеспечено);
	Результат.Вставить("Перегруппировать", Строка.Перегруппировать);
	Результат.Вставить("ОсновноеИзделие", Строка.ОсновноеИзделие);
	Результат.Вставить("ПланВХранилище", Строка.ПланВХранилище);
	Результат.Вставить("КоличествоНаПартию", Строка.КоличествоНаПартию);
	
	Возврат Результат;
	
КонецФункции

// Возвращает изделия к запуску с детализацией до заказов по заданному набору аналитик.
// Так же заполняет параметры обеспечения в полученных данных строки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Детальные записи
&НаСервереБезКонтекста
Функция ДетальныеЗаписи(ДанныеСтроки, АдресПланХранилище, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов, ДетальныеЗаписиПакет = Неопределено)
	
	Если ДанныеСтроки.ПланВХранилище Тогда
		
		План = ПолучитьИзВременногоХранилища(АдресПланХранилище);
		
		СтруктураПоиска = Новый Структура("НомерГруппы, Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		
		Таблица = План.Скопировать(СтруктураПоиска);
		Таблица.Сортировать("НомерСтроки");
		
	ИначеЕсли ДетальныеЗаписиПакет <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("НомерГруппы, Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		
		Таблица = ДетальныеЗаписиПакет.Скопировать(СтруктураПоиска);
		Таблица.Сортировать("НомерСтроки");
		
	Иначе
		
		ТаблицаОтбор = НовыйОтборДетальныеЗаписи();
		ЗаполнитьЗначенияСвойств(ТаблицаОтбор.Добавить(), ДанныеСтроки);
		
		Таблица = ДетальныеЗаписиПакетно(ТаблицаОтбор, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов);
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДетальныеЗаписиПакетно(ТаблицаОтбор, АдресПользовательскиеОтборы, ОбособитьВыпускПолуфабрикатов)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОтбор.Номенклатура            КАК Номенклатура,
		|	ТаблицаОтбор.Характеристика          КАК Характеристика,
		|	ТаблицаОтбор.Спецификация            КАК Спецификация,
		|	ТаблицаОтбор.СпецификацияПлан        КАК СпецификацияПлан,
		|	ТаблицаОтбор.Организация             КАК Организация,
		|	ТаблицаОтбор.Партнер                 КАК Партнер,
		|	ТаблицаОтбор.Договор                 КАК Договор,
		|	ТаблицаОтбор.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаОтбор.ПодразделениеДиспетчер  КАК ПодразделениеДиспетчер,
		|	ТаблицаОтбор.ЗаказПодДеятельность    КАК ЗаказПодДеятельность,
		|	ТаблицаОтбор.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	ТаблицаОтбор.НомерГруппы             КАК НомерГруппы,
		|	ТаблицаОтбор.КоличествоНаПартию      КАК КоличествоНаПартию
		|ПОМЕСТИТЬ ТаблицаОтбор
		|ИЗ
		|	&ТаблицаОтбор КАК ТаблицаОтбор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, СпецификацияПлан, Организация, Партнер, Договор, НаправлениеДеятельности, ПодразделениеДиспетчер, ЗаказПодДеятельность, ХозяйственнаяОперация
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	План.Спецификация                                КАК Спецификация,
		|	План.ЗаказНаПроизводство                         КАК ЗаказНаПроизводство,
		|	План.ЗаказНаПроизводство.Организация             КАК Организация,
		|	План.ЗаказНаПроизводство.Партнер                 КАК Партнер,
		|	План.ЗаказНаПроизводство.Договор                 КАК Договор,
		|	План.ЗаказНаПроизводство.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	План.ЗаказНаПроизводство.Подразделение           КАК ПодразделениеДиспетчер,
		|	План.ЗаказНаПроизводство.ЗаказПодДеятельность    КАК ЗаказПодДеятельность,
		|	План.ЗаказНаПроизводство.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	План.Номенклатура                                КАК Номенклатура,
		|	План.Характеристика                              КАК Характеристика,
		|	План.Склад                                       КАК Склад,
		|	План.Назначение                                  КАК Назначение,  
		|	План.КлючНоменклатура                            КАК КлючНоменклатура,
		|	План.КлючПартия                                  КАК КлючПартия,
		|	ISNULL(Потребление.НазначениеСтруктуры, План.Назначение) КАК НазначениеПолучателя,
		|	План.Номенклатура.ВидНоменклатуры                КАК ВидНоменклатуры,
		|	НормативныйГрафик.Начало                         КАК ДатаЗапуска,
		|	НормативныйГрафик.Окончание                      КАК ДатаВыпуска,
		|	ГрафикПотребления.Начало                         КАК ЖелаемаяДатаВыпуска,
		|	МАКСИМУМ(План.КоличествоНаЕдиницуПартииЗапуска)  КАК КоличествоНаЕдиницуПартииЗапуска,
		|	МАКСИМУМ(План.Уровень)                           КАК Уровень,
		|	МАКСИМУМ(План.ДлительностьДоВыпуска)             КАК ДлительностьДоВыпуска,
		|	МАКСИМУМ(План.Подразделение)                     КАК ВыпускающееПодразделение,
		|	МИНИМУМ(План.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката)) КАК ЭтоПолуфабрикат,
		|	СУММА(План.Запланировано)                        КАК Требуется
		|ПОМЕСТИТЬ НоменклатурныйПлан
		|
		|ИЗ
		|	РегистрСведений.СтруктураЗаказа КАК План
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафик
		|	ПО План.ЗаказНаПроизводство = НормативныйГрафик.ЗаказНаПроизводство
		|		И План.КлючПартия = НормативныйГрафик.КлючПартия
		|		И НормативныйГрафик.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Потребление
		|	ПО План.Номенклатура = Потребление.Номенклатура
		|		И План.Характеристика = Потребление.Характеристика
		|		И План.Склад = Потребление.Склад
		|		И План.Назначение = Потребление.Назначение
		|		И План.ЗаказНаПроизводство = Потребление.ЗаказНаПроизводство
		|		И План.КлючНоменклатура = Потребление.КлючНоменклатура
		|		И Потребление.ВидСтроки В (
		|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
		|		И НЕ Потребление.ДополнительнаяЗапись
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК ГрафикПотребления
		|	ПО ГрафикПотребления.ЗаказНаПроизводство = Потребление.ЗаказНаПроизводство
		|		И ГрафикПотребления.КлючПартия = Потребление.КлючПартия
		|		И ГрафикПотребления.Этап = Потребление.Этап
		|ГДЕ
		|	(
		|		План.Номенклатура,
		|		План.Характеристика,
		|		План.Спецификация,
		|		План.ЗаказНаПроизводство.Организация,
		|		План.ЗаказНаПроизводство.Партнер,
		|		План.ЗаказНаПроизводство.Договор,
		|		План.ЗаказНаПроизводство.НаправлениеДеятельности,
		|		План.ЗаказНаПроизводство.Подразделение,
		|		План.ЗаказНаПроизводство.ЗаказПодДеятельность,
		|		План.ЗаказНаПроизводство.ХозяйственнаяОперация
		|	) В (
		|		ВЫБРАТЬ
		|			ТаблицаОтбор.Номенклатура,
		|			ТаблицаОтбор.Характеристика,
		|			ТаблицаОтбор.СпецификацияПлан,
		|			ТаблицаОтбор.Организация,
		|			ТаблицаОтбор.Партнер,
		|			ТаблицаОтбор.Договор,
		|			ТаблицаОтбор.НаправлениеДеятельности,
		|			ТаблицаОтбор.ПодразделениеДиспетчер,
		|			ТаблицаОтбор.ЗаказПодДеятельность,
		|			ТаблицаОтбор.ХозяйственнаяОперация
		|		ИЗ
		|			ТаблицаОтбор КАК ТаблицаОтбор)
		|	И План.ВидСтроки В (
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
		|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
		|	И &ПользовательскиеОтборы
		|
		|СГРУППИРОВАТЬ ПО
		|	План.Спецификация,
		|	План.ЗаказНаПроизводство.Организация,
		|	План.ЗаказНаПроизводство.Партнер,
		|	План.ЗаказНаПроизводство.Договор,
		|	План.ЗаказНаПроизводство.НаправлениеДеятельности,
		|	План.ЗаказНаПроизводство.Подразделение,
		|	План.ЗаказНаПроизводство.ЗаказПодДеятельность,
		|	План.ЗаказНаПроизводство.ХозяйственнаяОперация,
		|	План.Номенклатура,
		|	План.Характеристика,
		|	План.Склад,
		|	План.Назначение,
		|	План.ЗаказНаПроизводство,
		|	План.КлючНоменклатура,
		|	План.КлючПартия,
		|	ISNULL(Потребление.НазначениеСтруктуры, План.Назначение),
		|	План.Номенклатура.ВидНоменклатуры,
		|	НормативныйГрафик.Начало,
		|	НормативныйГрафик.Окончание,
		|	ГрафикПотребления.Начало
		|
		|ИМЕЮЩИЕ
		|	СУММА(План.Запланировано) <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	План.Номенклатура        КАК Номенклатура,
		|	План.Характеристика      КАК Характеристика,
		|	План.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ИСТИНА                   КАК ПродукцияЗаказа
		|ПОМЕСТИТЬ ВТПродукцияЗаказа
		|ИЗ
		|	НоменклатурныйПлан КАК План
		|
		|СГРУППИРОВАТЬ ПО
		|	План.Номенклатура, План.Характеристика, План.ЗаказНаПроизводство
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(План.ЭтоПолуфабрикат) = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, ЗаказНаПроизводство
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	План.Спецификация                                КАК Спецификация,
		|	План.ВидНоменклатуры                             КАК ВидНоменклатуры,
		|	План.Номенклатура                                КАК Номенклатура,
		|	План.Характеристика                              КАК Характеристика,
		|	План.КлючПартия                                  КАК КлючПартия,
		|	СУММА(План.Требуется)                            КАК Требуется,
		|	МАКСИМУМ(План.КоличествоНаЕдиницуПартииЗапуска)  КАК КоличествоНаЕдиницуПартииЗапуска
		|
		|ПОМЕСТИТЬ НоменклатурныйПланБезДетализации
		|ИЗ
		|	НоменклатурныйПлан КАК План
		|
		|СГРУППИРОВАТЬ ПО
		|	План.Спецификация,
		|	План.ВидНоменклатуры,
		|	План.Номенклатура,
		|	План.Характеристика,
		|	План.КлючПартия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючПартия
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.КлючПартия КАК КлючПартия,
		|	МАКСИМУМ(ВложенныйЗапрос.ЕстьОбособленно) КАК ЕстьОбособленно,
		|	МИНИМУМ(ВложенныйЗапрос.Распределено/ВложенныйЗапрос.КоличествоНаЕдиницуПартииЗапуска) КАК ОбеспеченоЕдПартий,
		|	МИНИМУМ(ВложенныйЗапрос.Требуется = ВложенныйЗапрос.Распределено) КАК ЕстьПолноеОбеспечение,
		|	МИНИМУМ(ВложенныйЗапрос.Требуется = ВложенныйЗапрос.Распределено) = ЛОЖЬ
		|	И МАКСИМУМ(ВложенныйЗапрос.Распределено/ВложенныйЗапрос.КоличествоНаЕдиницуПартииЗапуска)
		|		> МИНИМУМ(ВложенныйЗапрос.Распределено/ВложенныйЗапрос.КоличествоНаЕдиницуПартииЗапуска) КАК ЕстьЧастичноеОбеспечение
		|ПОМЕСТИТЬ ВТОбеспечение
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		СтруктураЗаказа.КлючПартия          КАК КлючПартия,
		|		СтруктураЗаказа.Номенклатура        КАК Номенклатура,
		|		СтруктураЗаказа.Характеристика      КАК Характеристика,
		|		СтруктураЗаказа.Склад               КАК Склад,
		|		СтруктураЗаказа.Назначение          КАК Назначение,
		|		СтруктураЗаказа.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|		СтруктураЗаказа.КлючНоменклатура    КАК КлючНоменклатура,
		|		МАКСИМУМ(СтруктураЗаказа.КоличествоНаЕдиницуПартииЗапуска) КАК КоличествоНаЕдиницуПартииЗапуска,
		|		СУММА(ВЫБОР
		|				КОГДА СтруктураЗаказа.ЗаказНаПоступление = НЕОПРЕДЕЛЕНО
		|					ТОГДА СтруктураЗаказа.РаспределеноИзЗапасов + СтруктураЗаказа.РаспределеноИзЗапасовОбособленно
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК Распределено,
		|		СУММА(СтруктураЗаказа.Требуется) КАК Требуется,
		|		СУММА(СтруктураЗаказа.РаспределеноИзЗапасовОбособленно) > 0
		|					Или МАКСИМУМ(СтруктураЗаказа.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ЕстьОбособленно
		|	ИЗ
		|		РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
		|	ГДЕ
		|		СтруктураЗаказа.КлючПартия В(
		|			ВЫБРАТЬ
		|				ДД.КлючПартия
		|			ИЗ
		|				НоменклатурныйПланБезДетализации КАК ДД)
		|		И СтруктураЗаказа.ВидСтроки В(
		|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано))
		|
		|	СГРУППИРОВАТЬ ПО
		|		СтруктураЗаказа.КлючПартия,
		|		СтруктураЗаказа.Номенклатура,
		|		СтруктураЗаказа.Характеристика,
		|		СтруктураЗаказа.Склад,
		|		СтруктураЗаказа.Назначение,
		|		СтруктураЗаказа.ЗаказНаПроизводство,
		|		СтруктураЗаказа.КлючНоменклатура
		|	
		|	ИМЕЮЩИЕ
		|		МАКСИМУМ(СтруктураЗаказа.КоличествоНаЕдиницуПартииЗапуска) > 0
		|	
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.КлючПартия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючПартия
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|
		|	План.КлючПартия КАК КлючПартия,
		|
		|	СУММА(ВЫБОР
		|		КОГДА Обеспечение.ОбеспеченоЕдПартий ЕСТЬ NULL ИЛИ Обеспечение.ОбеспеченоЕдПартий = 0
		|			ТОГДА 0
		|		КОГДА Обеспечение.ЕстьПолноеОбеспечение
		|			ТОГДА План.Требуется
		|		КОГДА План.Спецификация.ВыпускПроизвольнымиПорциями
		|			ТОГДА ВЫБОР
		|				КОГДА Обеспечение.ОбеспеченоЕдПартий * План.КоличествоНаЕдиницуПартииЗапуска >= План.Требуется
		|					ТОГДА План.Требуется
		|				КОГДА План.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|					ТОГДА ВЫРАЗИТЬ(Обеспечение.ОбеспеченоЕдПартий * План.КоличествоНаЕдиницуПартииЗапуска - 0.5 КАК ЧИСЛО(15, 0))
		|				ИНАЧЕ Обеспечение.ОбеспеченоЕдПартий * План.КоличествоНаЕдиницуПартииЗапуска
		|			КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(Обеспечение.ОбеспеченоЕдПартий - 0.5 КАК ЧИСЛО(15, 0)) * План.КоличествоНаЕдиницуПартииЗапуска >= План.Требуется
		|				ТОГДА План.Требуется
		|			КОГДА План.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|				ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(Обеспечение.ОбеспеченоЕдПартий - 0.5 КАК ЧИСЛО(15, 0)) * План.КоличествоНаЕдиницуПартииЗапуска - 0.5 КАК ЧИСЛО(15, 0))
		|			ИНАЧЕ ВЫРАЗИТЬ(Обеспечение.ОбеспеченоЕдПартий - 0.5 КАК ЧИСЛО(15, 0)) * План.КоличествоНаЕдиницуПартииЗапуска
		|		КОНЕЦ
		|	КОНЕЦ) КАК Обеспечено,
		|
		|	МАКСИМУМ(Обеспечение.ЕстьЧастичноеОбеспечение) КАК ЕстьЧастичноеОбеспечение
		|
		|ИЗ
		|	НоменклатурныйПланБезДетализации КАК План
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбеспечение КАК Обеспечение
		|	ПО План.КлючПартия = Обеспечение.КлючПартия
		|
		|СГРУППИРОВАТЬ ПО
		|	План.КлючПартия
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	План.Спецификация                               КАК СпецификацияПлан,
		|	План.НаправлениеДеятельности                    КАК НаправлениеДеятельности,
		|	План.ПодразделениеДиспетчер                     КАК ПодразделениеДиспетчер,
		|
		|	План.Номенклатура                               КАК Номенклатура,
		|	План.Номенклатура.ТипНоменклатуры               КАК ТипНоменклатуры,
		|	План.Номенклатура.ОбособленнаяЗакупкаПродажа    КАК ОбособленнаяЗакупкаПродажа,
		|	План.Характеристика                             КАК Характеристика,
		|	План.Склад                                      КАК Получатель,
		|
		|	&ТекстПоляНазначениеМатериалов КАК НазначениеМатериалы,
		|	План.НазначениеПолучателя      КАК НазначениеПолучателя,
		|	ВЫБОР
		|		КОГДА План.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				И &ОбособитьВыпускПолуфабрикатов И НЕ ЕСТЬNULL(ВТПродукцияЗаказа.ПродукцияЗаказа, ЛОЖЬ)
		|			ТОГДА 
		|				План.НазначениеПолучателя
		|			ИНАЧЕ 
		|				План.Назначение
		|	КОНЕЦ КАК Назначение,
		|	ВЫБОР
		|		КОГДА План.ЗаказНаПроизводство.ВариантОбособления В (
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство),
		|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ДоговорДавальца))
		|			ТОГДА План.ЗаказНаПроизводство.Назначение
		|		КОГДА План.ЗаказНаПроизводство.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции)
		|				И План.ЗаказНаПроизводство.Назначение <> 
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(ВТПродукцияЗаказа.ПродукцияЗаказа, ЛОЖЬ)
		|								ИЛИ План.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							План.Назначение
		|						ИНАЧЕ
		|							ВЫБОР
		|								КОГДА &ОбособитьВыпускПолуфабрикатов 
		|									ИЛИ ИСТИНА В
		|									(ВЫБРАТЬ
		|										ДД.ЕстьОбособленно
		|									ИЗ
		|										ВТОбеспечение КАК ДД
		|									ГДЕ
		|										ДД.КлючПартия = План.КлючПартия) ТОГДА
		|									План.НазначениеПолучателя
		|								ИНАЧЕ
		|									ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|							КОНЕЦ
		|					КОНЕЦ
		|			ТОГДА 
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(ВТПродукцияЗаказа.ПродукцияЗаказа, ЛОЖЬ)
		|								ИЛИ План.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|							План.Назначение
		|						ИНАЧЕ
		|							ВЫБОР
		|								КОГДА &ОбособитьВыпускПолуфабрикатов 
		|									ИЛИ ИСТИНА В
		|									(ВЫБРАТЬ
		|										ДД.ЕстьОбособленно
		|									ИЗ
		|										ВТОбеспечение КАК ДД
		|									ГДЕ
		|										ДД.КлючПартия = План.КлючПартия) ТОГДА
		|									План.НазначениеПолучателя
		|								ИНАЧЕ
		|									ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|							КОНЕЦ
		|					КОНЕЦ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК НазначениеПродукция,
		|
		|	План.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И НЕ (&ОбособитьВыпускПолуфабрикатов
		|				И НЕ ЕСТЬNULL(ВТПродукцияЗаказа.ПродукцияЗаказа, ЛОЖЬ))
		|		И ИСТИНА В
		|			(ВЫБРАТЬ
		|				ДД.ЕстьОбособленно
		|			ИЗ
		|				ВТОбеспечение КАК ДД
		|			ГДЕ
		|				ДД.КлючПартия = План.КлючПартия) КАК СвободныйВыпускИзОбособленныхМатериалов,
		|
		|	План.ЗаказНаПроизводство                        КАК ЗаказНаПроизводство,
		|	План.ЗаказНаПроизводство.Приоритет              КАК Приоритет,
		|	План.ЗаказНаПроизводство.Номер                  КАК ЗаказНаПроизводствоНомер,
		|	План.ЗаказНаПроизводство.Дата                   КАК ЗаказНаПроизводствоДата,
		|
		|	ЕСТЬNULL(ВТПродукцияЗаказа.ПродукцияЗаказа, ЛОЖЬ)                   КАК ПродукцияЗаказа,
		|	ЕСТЬNULL(РеквизитыПродукции.СписатьНаРасходы, ЛОЖЬ)                 КАК СписатьНаРасходы,
		|	ЕСТЬNULL(РеквизитыПродукции.СтатьяРасходов, НЕОПРЕДЕЛЕНО)           КАК СтатьяРасходов,
		|	ЕСТЬNULL(РеквизитыПродукции.АналитикаРасходов, НЕОПРЕДЕЛЕНО)        КАК АналитикаРасходов,
		|	ЕСТЬNULL(РеквизитыПродукции.АналитикаАктивовПассивов, НЕОПРЕДЕЛЕНО) КАК АналитикаАктивовПассивов,
		|
		|	План.ДатаЗапуска                                КАК ДатаЗапуска,
		|	План.ДатаВыпуска                                КАК ДатаВыпуска,
		|
		|	ЕСТЬNULL(План.ЖелаемаяДатаВыпуска, План.ЗаказНаПроизводство.ДатаПотребности) КАК ЖелаемаяДатаВыпуска,
		|
		|	План.КлючПартия                                 КАК КлючПартия,
		|	План.КлючНоменклатура                           КАК КлючНоменклатура,
		|	План.Уровень                                    КАК Уровень,
		|	План.ДлительностьДоВыпуска                      КАК ДлительностьДоВыпуска,
		|	План.ВыпускающееПодразделение                   КАК ВыпускающееПодразделение,
		|
		|	План.Требуется                                  КАК Требуется,
		|	План.Требуется                                  КАК КЗапуску,
		|
		|	ЕСТЬNULL(ТаблицаОтбор.НомерГруппы, 0)                  КАК НомерГруппы,
		|	ЕСТЬNULL(ТаблицаОтбор.Спецификация, План.Спецификация) КАК Спецификация,
		|	ЕСТЬNULL(ТаблицаОтбор.КоличествоНаПартию, План.КоличествоНаЕдиницуПартииЗапуска) КАК КоличествоНаПартию
		|ИЗ
		|	НоменклатурныйПлан КАК План
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПродукцияЗаказа КАК ВТПродукцияЗаказа
		|		ПО План.Номенклатура = ВТПродукцияЗаказа.Номенклатура
		|			И План.Характеристика = ВТПродукцияЗаказа.Характеристика
		|			И План.ЗаказНаПроизводство = ВТПродукцияЗаказа.ЗаказНаПроизводство
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2.Продукция КАК РеквизитыПродукции
		|		ПО ЕСТЬNULL(ВТПродукцияЗаказа.ПродукцияЗаказа, ЛОЖЬ)
		|			И План.ЗаказНаПроизводство = РеквизитыПродукции.Ссылка
		|			И План.КлючНоменклатура = РеквизитыПродукции.КлючНоменклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбор КАК ТаблицаОтбор
		|		ПО План.Номенклатура = ТаблицаОтбор.Номенклатура
		|			И План.Характеристика = ТаблицаОтбор.Характеристика
		|			И План.Спецификация = ТаблицаОтбор.СпецификацияПлан
		|			И План.Организация = ТаблицаОтбор.Организация
		|			И План.Партнер = ТаблицаОтбор.Партнер
		|			И План.Договор = ТаблицаОтбор.Договор
		|			И План.НаправлениеДеятельности = ТаблицаОтбор.НаправлениеДеятельности
		|			И План.ПодразделениеДиспетчер = ТаблицаОтбор.ПодразделениеДиспетчер
		|			И План.ЗаказПодДеятельность = ТаблицаОтбор.ЗаказПодДеятельность
		|			И План.ХозяйственнаяОперация = ТаблицаОтбор.ХозяйственнаяОперация
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерГруппы,
		|	План.ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
		|	План.ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
		|	План.ЗаказНаПроизводство.Очередь,
		|	-План.ДлительностьДоВыпуска,
		|	План.КлючПартия,
		|	План.КлючНоменклатура";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстПоляНазначениеМатериалов",
		СтруктураЗаказаПроведениеДокументов.ТекстПоляНазначениеМатериалов(
			"План.ЗаказНаПроизводство", "План.НазначениеПолучателя"));
	
	Запрос = Новый Запрос();
	
	ПользовательскиеОтборы = ПолучитьИзВременногоХранилища(АдресПользовательскиеОтборы);
	Если ПользовательскиеОтборы = Неопределено
			ИЛИ ПользовательскиеОтборы.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ПользовательскиеОтборы", "");
	Иначе
		ТекстОтборов = "";
		Для каждого Отбор Из ПользовательскиеОтборы Цикл
			ТекстОтборов = ТекстОтборов + " И " + Отбор.Текст;
			Запрос.УстановитьПараметр(Отбор.Имя, Отбор.Значение);
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ПользовательскиеОтборы", ТекстОтборов);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаОтбор", ТаблицаОтбор); 
	Запрос.УстановитьПараметр("ОбособитьВыпускПолуфабрикатов", ОбособитьВыпускПолуфабрикатов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ОбеспечениеПартий = РезультатЗапроса[КоличествоПакетов-2].Выгрузить();
	ОбеспечениеПартий.Индексы.Добавить("КлючПартия");
	
	Таблица = РезультатЗапроса[КоличествоПакетов-1].Выгрузить();
	
	СписокПоляГруппировки = Новый Массив();
	ПоляИсключения = "КлючНоменклатура,КлючПартия,Уровень,ДлительностьДоВыпуска,КоличествоНаПартию,Требуется,КЗапуску,СвободныйВыпускИзОбособленныхМатериалов";
	СписокПоляИсключения = СтрРазделить(ПоляИсключения, ",");
	Для каждого Колонка Из Таблица.Колонки Цикл
		Если СписокПоляИсключения.Найти(Колонка.Имя) = Неопределено Тогда
			СписокПоляГруппировки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	ПоляГруппировки = СтрСоединить(СписокПоляГруппировки,",");
	Таблица.Индексы.Добавить(ПоляГруппировки);
	СтруктураОтбора = Новый Структура(ПоляГруппировки);
	
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Таблица.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СверхЗаказа", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ЗаказНаПроизводствоПредставление", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТребуетсяОбеспечение", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Обеспечено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Таблица.Колонки.Добавить("ЕстьЧастичноеОбеспечение", Новый ОписаниеТипов("Булево"));
	
	НомерГруппы = -1;
	НомерСтроки = 1;
	Для Индекс = 0 По Таблица.Количество()-1 Цикл
		
		Строка = Таблица[Индекс];
		
		Если Строка.НомерГруппы <> НомерГруппы Тогда
			НомерГруппы = Строка.НомерГруппы;
			НомерСтроки = 1;
		КонецЕсли;
		
		Обеспечение = ОбеспечениеПартий.Найти(Строка.КлючПартия, "КлючПартия");
		Если Обеспечение <> Неопределено Тогда
			Строка.ТребуетсяОбеспечение = Истина;
			Строка.ЕстьЧастичноеОбеспечение = Обеспечение.ЕстьЧастичноеОбеспечение;
			Строка.Обеспечено = Мин(Строка.Требуется, Обеспечение.Обеспечено);
			Обеспечение.Обеспечено = Обеспечение.Обеспечено - Строка.Обеспечено;
		КонецЕсли;
		
		ИтоговаяСтрока = Неопределено;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 1 Тогда
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.НомерСтроки > 0 Тогда // строка инициализирована
					ИтоговаяСтрока = НайденнаяСтрока;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ИтоговаяСтрока = Неопределено Тогда
			Строка.НомерСтроки = НомерСтроки;
			Строка.ЗаказНаПроизводствоПредставление = СтрШаблон(НСтр("ru = '%1 от %2';
																	|en = '%1 from %2'"),
				Строка.ЗаказНаПроизводствоНомер,
				Формат(Строка.ЗаказНаПроизводствоДата, "ДЛФ=D"));
			НомерСтроки = НомерСтроки + 1;
		Иначе
			ИтоговаяСтрока.Требуется  = ИтоговаяСтрока.Требуется + Строка.Требуется;
			ИтоговаяСтрока.Обеспечено = ИтоговаяСтрока.Обеспечено + Строка.Обеспечено;
			ИтоговаяСтрока.КЗапуску   = ИтоговаяСтрока.КЗапуску + Строка.КЗапуску;
			
			ИтоговаяСтрока.ТребуетсяОбеспечение = ИтоговаяСтрока.ТребуетсяОбеспечение
				Или Строка.ТребуетсяОбеспечение;
			ИтоговаяСтрока.ЕстьЧастичноеОбеспечение = ИтоговаяСтрока.ЕстьЧастичноеОбеспечение
				Или Строка.ЕстьЧастичноеОбеспечение;
			ИтоговаяСтрока.СвободныйВыпускИзОбособленныхМатериалов = ИтоговаяСтрока.СвободныйВыпускИзОбособленныхМатериалов
				Или Строка.СвободныйВыпускИзОбособленныхМатериалов;
		КонецЕсли;
		
	КонецЦикла;
	
	Таблица.Индексы.Удалить(0);
	
	УдаляемыеСтроки = Таблица.НайтиСтроки(Новый Структура("НомерСтроки", 0));
	Для каждого Строка Из УдаляемыеСтроки Цикл
		Таблица.Удалить(Строка);
	КонецЦикла;
	
	Таблица.Индексы.Добавить("НомерГруппы, Номенклатура, Характеристика");
	
	Возврат Таблица;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйОтборДетальныеЗаписи()
	
	ТаблицаОтбор = Новый ТаблицаЗначений;
	
	// Поля для отбора деталей
	ТаблицаОтбор.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОтбор.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОтбор.Колонки.Добавить("СпецификацияПлан", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ТаблицаОтбор.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтбор.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаОтбор.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаОтбор.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ТаблицаОтбор.Колонки.Добавить("ПодразделениеДиспетчер", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаОтбор.Колонки.Добавить("ЗаказПодДеятельность", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогообложенияНДС"));
	ТаблицаОтбор.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	
	// Поля для наследования в детали
	ТаблицаОтбор.Колонки.Добавить("НомерГруппы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	ТаблицаОтбор.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ТаблицаОтбор.Колонки.Добавить("КоличествоНаПартию", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	
	Возврат ТаблицаОтбор;
	
КонецФункции

#КонецОбласти

#Область ПредварительныйПросмотр

&НаКлиенте
Процедура ПерейтиКШагуПредварительныйПросмотрНаКлиенте()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ЗаполнитьИзделияКПредпросмотру(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтраницыПомощника(ЭтаФорма, "ШагПредварительныйПросмотр");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазадКШагуПредварительныйПросмотрНаКлиенте()
	
	ОчиститьСообщения();
	
	Если СозданныеОбъекты.Количество() <> 0 Тогда
		
		Отказ = Ложь;
		УдалитьСозданныеОбъекты(Отказ);
		
		Если НачатьОжиданиеДлительнойОперации Тогда
			НачатьОжиданиеДлительнойОперации(Ложь);
			НастроитьОжиданиеВФорме(Истина, НСтр("ru = 'Документы удаляются...';
												|en = 'Documents are being deleted...'"));
		Иначе
			ПослеУдаленияСозданныхОбъектов(Отказ);
		КонецЕсли;
		
	Иначе
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагПредварительныйПросмотр");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзделияКПредпросмотру(Отказ)
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Данные = ДанныеКФормированию();
	Если Данные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИзделияКПредпросмотру.ПолучитьЭлементы().Очистить();
	
	Данные.Группы.Индексы.Добавить("НомерГруппы");
	
	НомерГруппы = Неопределено;
	НомерПартииВГруппе = Неопределено;
	
	СтрокаГруппы = Неопределено;
	НоваяСтрокаИтог = Неопределено;
	
	Для Индекс = 0 По Данные.Изделия.Количество() - 1 Цикл
		
		СтрокаИзделия = Данные.Изделия[Индекс];
		
		Если НомерГруппы <> СтрокаИзделия.НомерГруппы
			Или НомерПартииВГруппе <> СтрокаИзделия.НомерПартииВГруппе Тогда
			
			Если НомерГруппы <> СтрокаИзделия.НомерГруппы Тогда
				СтрокаГруппы = Данные.Группы.Найти(СтрокаИзделия.НомерГруппы, "НомерГруппы");
			КонецЕсли;
			
			НоваяСтрокаИтог = ИзделияКПредпросмотру.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаИтог, СтрокаГруппы,
				"Спецификация, Организация, Партнер, Договор, НаправлениеДеятельности, ПодразделениеДиспетчер, ЗаказПодДеятельность, ХозяйственнаяОперация");
			ЗаполнитьЗначенияСвойств(НоваяСтрокаИтог, СтрокаИзделия,
				"Номенклатура, Характеристика");
			НоваяСтрокаИтог.ЗаказНаПроизводство = СтрокаГруппы.Распоряжение;
			Если СтрокаГруппы.Распоряжение.Пустая() Тогда
				НоваяСтрокаИтог.ЗаказНаПроизводствоПредставление = НСтр("ru = '<новый заказ на производство>';
																		|en = '<new production order>'");
			Иначе
				НоваяСтрокаИтог.ЗаказНаПроизводствоПредставление = СтрШаблон(НСтр("ru = '%1 от %2';
																					|en = '%1 from %2'"),
					СтрокаГруппы.ЗаказНаПроизводствоНомер,
					Формат(СтрокаГруппы.ЗаказНаПроизводствоДата, "ДЛФ=D"));
			КонецЕсли;
			НоваяСтрокаИтог.ЭтоИтог = Истина;
			
			НомерГруппы = СтрокаИзделия.НомерГруппы;
			НомерПартииВГруппе = СтрокаИзделия.НомерПартииВГруппе;
			
		ИначеЕсли НоваяСтрокаИтог.Номенклатура <> СтрокаИзделия.Номенклатура
			Или НоваяСтрокаИтог.Характеристика <> СтрокаИзделия.Характеристика Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НоваяСтрокаИтог.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзделия, "Номенклатура, Характеристика, Назначение, Получатель, Количество");
		
		НоваяСтрокаИтог.Количество = НоваяСтрокаИтог.Количество + СтрокаИзделия.Количество;
		
	КонецЦикла;
	
	АдресДанныеКФормированию = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область РезультатФормирования

&НаКлиенте
Процедура ПерейтиКШагуРезультатФормированияНаКлиенте()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	СоздатьДокументыНаСервере(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		НачатьОжиданиеДлительнойОперации(Ложь);
		НастроитьОжиданиеВФорме(Истина, НСтр("ru = 'Документы формируются...';
											|en = 'Documents are being generated...'"));
	Иначе
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагРезультатФормирования");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере(Отказ)
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресДанныеКФормированию) Тогда
		// Данные были получены на шаге предпросмотра
		Данные = ПолучитьИзВременногоХранилища(АдресДанныеКФормированию);
	Иначе
		Данные = ДанныеКФормированию();
		Если Данные = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Запуск формирования
	ОтменитьДлительнуюОперацию();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Группы", Данные.Группы);
	ПараметрыПроцедуры.Вставить("Изделия", Данные.Изделия);
	
	Для Каждого Параметр Из ПараметрыСозданияДокументов Цикл
		ПараметрыПроцедуры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	АдресРезультатФормирования = ПоместитьВоВременноеХранилище(
		ФормированиеЭтаповПроизводства.РезультатФормирования(), УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование партий производства: создание документов';
															|en = 'Generate production lots: document creation'");
	ПараметрыВыполнения.АдресРезультата = АдресРезультатФормирования;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФормированиеЭтаповПроизводства.СоздатьДокументыОтложенно",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = "СоздатьДокументыОтложенноЗавершение";
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		СоздатьДокументыОтложенно(ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыОтложенноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	НастроитьОжиданиеВФорме(Ложь);
	
	СоздатьДокументыОтложенно(Результат);
	УстановитьСтраницыПомощника(ЭтаФорма, "ШагРезультатФормирования");
	
	Если Результат <> Неопределено И Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыОтложенно(Результат)
	
	Элементы.ГруппаОграничениеВывода.Видимость = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультатФормирования) Тогда
		
		ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		
		СтруктураРезультата = ПолучитьИзВременногоХранилища(АдресРезультатФормирования);
		АдресРезультатФормирования = Неопределено;
		
		// Вывод документов
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПартииПроизводства.Ссылка                                      КАК Партия,
			|	ПартииПроизводства.ОсновноеИзделиеНоменклатура                 КАК Номенклатура,
			|	ПартииПроизводства.ОсновноеИзделиеНоменклатура.Представление   КАК НоменклатураПредставление,
			|	ПартииПроизводства.ОсновноеИзделиеХарактеристика.Представление КАК ХарактеристикаПредставление,
			|	ПартииПроизводства.НаправлениеДеятельности.Представление       КАК НаправлениеДеятельностиПредставление,
			|	ПартииПроизводства.Спецификация.Представление                  КАК СпецификацияПредставление,
			|	ВЫРАЗИТЬ(ПартииПроизводства.Документ КАК Документ.ЗаказНаПроизводство2_2) КАК Распоряжение
			|ИЗ
			|	Справочник.ПартииПроизводства КАК ПартииПроизводства
			|ГДЕ
			|	ПартииПроизводства.Ссылка В (&Партии)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Ссылка                       КАК Ссылка,
			|	ЭтапПроизводства2_2.Номер                        КАК Номер,
			|	ЭтапПроизводства2_2.НаименованиеЭтапа            КАК НаименованиеЭтапа,
			|	ЭтапПроизводства2_2.Проведен                     КАК Проведен,
			|	ЭтапПроизводства2_2.Распоряжение                 КАК Распоряжение,
			|	ЭтапПроизводства2_2.Статус                       КАК Статус,
			|	ПРЕДСТАВЛЕНИЕ(ЭтапПроизводства2_2.Статус)        КАК СтатусПредставление,
			|	ПРЕДСТАВЛЕНИЕ(ЭтапПроизводства2_2.Подразделение) КАК ПодразделениеПредставление,
			|	ЭтапПроизводства2_2.ПартияПроизводства           КАК Партия,
			|	ЭтапПроизводства2_2.ПартияПроизводства.ОсновноеИзделиеНоменклатура КАК Номенклатура
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|ГДЕ
			|	ЭтапПроизводства2_2.Ссылка В(&Ссылки)");
		Запрос.УстановитьПараметр("Партии", СтруктураРезультата.РезультатФормирования.ВыгрузитьКолонку("Партия"));
		Запрос.УстановитьПараметр("Ссылки", СтруктураРезультата.РезультатФормирования.ВыгрузитьКолонку("Документ"));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Партии = МассивРезультатов[0].Выгрузить();
		Этапы = МассивРезультатов[1].Выгрузить();
		
		Партии.Индексы.Добавить("Партия");
		Этапы.Индексы.Добавить("Ссылка");
		
		РезультатФормирования.ПолучитьЭлементы().Очистить();
		СтрокаПартия = Неопределено;
		
		Для Индекс = 0 По СтруктураРезультата.РезультатФормирования.Количество()-1 Цикл
			
			Если Индекс = 5000 Тогда
				Элементы.ОграничениеВыводаПредставление.Заголовок = НСтр("ru = 'Отображены первые 5000 объектов';
																		|en = 'The first 5,000 objects are displayed'");
				Элементы.ГруппаОграничениеВывода.Видимость = Истина;
				Прервать;
			КонецЕсли;
			
			Строка = СтруктураРезультата.РезультатФормирования[Индекс];
			
			Если Не ЗначениеЗаполнено(Строка.Документ) Тогда
				
				ДанныеПартии = Партии.Найти(Строка.Партия, "Партия");
				
				СтрокаПартия = РезультатФормирования.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПартия, ДанныеПартии, "Партия, Распоряжение, Номенклатура");
				
				Строки = Новый Массив;
				Если Не ПустаяСтрока(ДанныеПартии.НоменклатураПредставление) Тогда
					Строки.Добавить(ДанныеПартии.НоменклатураПредставление);
				КонецЕсли;
				Если Не ПустаяСтрока(ДанныеПартии.ХарактеристикаПредставление) Тогда
					Строки.Добавить(ДанныеПартии.ХарактеристикаПредставление);
				КонецЕсли;
				Если Не ПустаяСтрока(ДанныеПартии.НаправлениеДеятельностиПредставление) Тогда
					Строки.Добавить(ДанныеПартии.НаправлениеДеятельностиПредставление);
				КонецЕсли;
				Если Не ПустаяСтрока(ДанныеПартии.СпецификацияПредставление) Тогда
					Строки.Добавить(ДанныеПартии.СпецификацияПредставление);
				КонецЕсли;
				Если Не ДанныеПартии.Распоряжение.Пустая() Тогда
					Строки.Добавить(Документы.ЗаказНаПроизводство2_2.ПредставлениеЗаказа(ДанныеПартии.Распоряжение));
				КонецЕсли;
				СтрокаПартия.Представление = СтрСоединить(Строки, ", ");
				СтрокаПартия.ТипСтроки = ТипСтрокиПартия();
				
			Иначе
				
				Если СтрокаПартия = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеЭтапа = Этапы.Найти(Строка.Документ, "Ссылка");
				
				СтрокиДерева = СтрокаПартия.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
				СтрокаЭтап = СтрокиДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЭтап, ДанныеЭтапа, "Ссылка, Партия, Распоряжение, Номенклатура");
				СтрокаЭтап.Представление = Документы.ЭтапПроизводства2_2.РасширенноеПредставлениеЭтапа(ДанныеЭтапа);
				СтрокаЭтап.НомерКартинки = ?(ДанныеЭтапа.Проведен, 1, 0);
				СтрокаЭтап.ТипСтроки = ТипСтрокиЭтап();
				
				Если ВЭтапеЕстьОшибки(ДанныеЭтапа) Тогда
					СтрокаПартия.ЕстьОшибки = Истина;
					СтрокаЭтап.ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Вывод ошибок
		Ошибки.ПолучитьЭлементы().Очистить();
		Для каждого Строка Из СтруктураРезультата.Ошибки Цикл
			
			СтрокаРодитель = Ошибки.ПолучитьЭлементы().Добавить();
			СтрокаРодитель.Представление = "" + Строка.Номенклатура
				+ ?(Строка.Характеристика.Пустая(), "", ", " + Строка.Характеристика)
				+ ?(Строка.НаправлениеДеятельности.Пустая(), "", ", " + Строка.НаправлениеДеятельности)
				+ ", " + Строка.Спецификация;
			
			Для каждого Сообщение Из Строка.Сообщения Цикл
				
				СтрокаОшибка = СтрокаРодитель.ПолучитьЭлементы().Добавить();
				СтрокаОшибка.Представление = Сообщение.Текст;
				
			КонецЦикла;
			
		КонецЦикла;
		Элементы.Ошибки.Видимость = СтруктураРезультата.Ошибки.Количество() > 0;
		
		СозданныеОбъекты.ЗагрузитьЗначения(СтруктураРезультата.СозданныеОбъекты);
		
		Для каждого Сообщение Из СтруктураРезультата.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Формирование партий производства: создание дерева документов", ВремяНачалаЗамера);
		
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Сообщения") Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено" Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Документы сформированы не полностью';
													|en = 'Documents are not fully generated'"));
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РезультатФормирования");
	
КонецПроцедуры

&НаСервере
Функция ВЭтапеЕстьОшибки(ДанныеЭтапа)
	
	Возврат Не ДанныеЭтапа.Проведен
		Или ДанныеЭтапа.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		
КонецФункции

&НаСервере
Процедура УдалитьСозданныеОбъекты(Отказ)
	
	ОтменитьДлительнуюОперацию();
	
	ПараметрыПроцедуры = Новый Структура("Ссылки", СозданныеОбъекты.ВыгрузитьЗначения());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Формирование партий производства: удаление созданных объектов';
			|en = 'Generate production lots: delete created objects'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФормированиеЭтаповПроизводства.УдалитьОбъектыОтложенно",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		Отказ = Ложь;
		НачатьОжиданиеДлительнойОперации = Истина;
		ОбработчикОжиданияДлительнойОперации = "УдалитьСозданныеОбъектыОтложенноЗавершение";
		
	Иначе
		
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		
		Отказ = ДлительнаяОперация.Статус <> "Выполнено";
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСозданныеОбъектыОтложенноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	НастроитьОжиданиеВФорме(Ложь);
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		КонецЕсли;
		
		ПослеУдаленияСозданныхОбъектов(Результат.Статус <> "Выполнено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияСозданныхОбъектов(Отказ)
	
	Если Не Отказ Тогда
		
		РезультатФормирования.ПолучитьЭлементы().Очистить();
		Ошибки.ПолучитьЭлементы().Очистить();
		СозданныеОбъекты.Очистить();
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Удаление объектов';
				|en = 'Delete objects'"),
			,
			НСтр("ru = 'Сформированные объекты помечены на удаление.';
				|en = 'Generated objects are marked for deletion.'"));
		
		Если ПараметрыОтображения.ПредварительныйПросмотр Тогда
			УстановитьСтраницыПомощника(ЭтаФорма, "ШагПредварительныйПросмотр");
		Иначе
			УстановитьСтраницыПомощника(ЭтаФорма, "ШагНоменклатурныйПлан");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОшибки(УдалитьДокументы = Ложь)
	
	Дерево = ДанныеФормыВЗначение(РезультатФормирования,Тип("ДеревоЗначений"));//ДеревоЗначений - 
	
	Для ИндексПартия = -Дерево.Строки.Количество() + 1 По 0 Цикл
		
		Партия = Дерево.Строки[-ИндексПартия];
		
		Если Партия.ЕстьОшибки Тогда
			
			Если УдалитьДокументы Тогда
				
				МассивСсылок = Партия.Строки.ВыгрузитьКолонку("Ссылка");
				
				Для Каждого СозданныйОбъект Из СозданныеОбъекты Цикл
					
					Если ТипЗнч(СозданныйОбъект.Значение) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2")
						И Партия.Строки.Найти(СозданныйОбъект.Значение, "Распоряжение") <> Неопределено Тогда
						МассивСсылок.Добавить(СозданныйОбъект.Значение);
					КонецЕсли;
					
				КонецЦикла;
				
				ОбщегоНазначенияУТ.УстановитьПометкуУдаленияДокументов(МассивСсылок);
				
				ПартияОбъект = Партия.Партия.ПолучитьОбъект();
				
				Дерево.Строки.Удалить(Партия);
				
				Если ПартияОбъект = Неопределено ИЛИ ПартияОбъект.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				ПартияОбъект.УстановитьПометкуУдаления(Истина);
				
			Иначе
				
				Для Каждого Документ Из Партия.Строки Цикл
					
					ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
					
					Если ДокументОбъект = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Попытка
						ДокументОбъект.Заблокировать();
					Исключение
						ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 - не удалось провести документ, возможно документ редактируется другим пользователем.';
								|en = '%1 - cannot post the document, the document might being edited by another user.'"),
							СокрЛП(Документ.Ссылка)));
						Продолжить;
					КонецПопытки;
					
					Если НЕ (ДокументОбъект.ПометкаУдаления ИЛИ ДокументОбъект.Проведен) Тогда
						
						Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
							
							ДокументОбъект.УстановитьСтатус("Формируется", Неопределено);
							ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
							
							Документ.Представление = Документы.ЭтапПроизводства2_2.РасширенноеПредставлениеЭтапа(ДокументОбъект.Ссылка);
							Документ.НомерКартинки = 1;
							
						Иначе
							
							ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Проведение не выполнено %1';
									|en = 'Posting is not executed %1'"),
								СокрЛП(Документ.Ссылка)));
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, РезультатФормирования);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПродолжитьСДругимиОтборамиНаСервере()
	
	Объект.ПланИтоги.Очистить();
	УстановитьТекстГиперссылокОбеспечено();
	ПоместитьВоВременноеХранилище(Неопределено, АдресПланХранилище);
	АдресДанныеКФормированию = Неопределено;
	
	РезультатФормирования.ПолучитьЭлементы().Очистить();
	Ошибки.ПолучитьЭлементы().Очистить();
	СозданныеОбъекты.Очистить();
	
	УстановитьСтраницыПомощника(ЭтаФорма, "ШагОтбор");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДанныеКФормированию

&НаСервере
Функция ДанныеКФормированию()
	
	УсловиеОтбора = Новый Структура("Отметка", Истина);
	
	Группы = Объект.ПланИтоги.Выгрузить(УсловиеОтбора);
	Если Группы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбраны изделия к запуску';
													|en = 'Finished products to launch are not selected'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Изделия = ПолучитьИзВременногоХранилища(АдресПланХранилище).Скопировать(УсловиеОтбора);
	
	// Вспомогательные колонки
	Группы.Колонки.Добавить("ПродукцияЗаказа", Новый ОписаниеТипов("Булево"));
	Группы.Колонки.Добавить("ЗаказНаПроизводствоГруппировка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	
	НомерГруппыСледующий = 100000000;
	
	// Перегруппировка строк - строки с измененной спецификацией в отдельные группы
	СтрокиКОбработке = Группы.НайтиСтроки(Новый Структура("СпецификацияИзменена", Истина));
	Если СтрокиКОбработке.ВГраница() <> -1 Тогда
		НовыеГруппы = Новый ТаблицаЗначений();
		НовыеГруппы.Колонки.Добавить("НомерГруппы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
		НовыеГруппы.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
		НовыеГруппы.Колонки.Добавить("НомерГруппыНовый", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
		НовыеГруппы.Индексы.Добавить("НомерГруппы, Спецификация");
		СтруктураПоискаНовыеГруппы = Новый Структура("НомерГруппы, Спецификация");
		
		ВременныйИндексИзделия = Изделия.Индексы.Добавить("НомерГруппы, Номенклатура, Характеристика");
		СтруктураПоискаИзделия = Новый Структура("НомерГруппы, Номенклатура, Характеристика");
		
		Для каждого Строка Из СтрокиКОбработке Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаИзделия, Строка);
			СтрокиИзделия = Изделия.НайтиСтроки(СтруктураПоискаИзделия);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеГруппы, Строка);
			СтрокиНовыеГруппы = НовыеГруппы.НайтиСтроки(СтруктураПоискаНовыеГруппы);
			Если СтрокиНовыеГруппы.ВГраница() = -1 Тогда
				НомерГруппыНовый = НомерГруппыСледующий;
				НомерГруппыСледующий = НомерГруппыСледующий + 1;
				
				НоваяСтрока = НовыеГруппы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "НомерГруппы, Спецификация");;
				НоваяСтрока.НомерГруппыНовый = НомерГруппыНовый;
			Иначе
				НомерГруппыНовый = СтрокиНовыеГруппы[0].НомерГруппыНовый;
			КонецЕсли;
			
			Строка.НомерГруппы = НомерГруппыНовый;
			Для каждого Изделие Из СтрокиИзделия Цикл
				Изделие.НомерГруппы = НомерГруппыНовый;
			КонецЦикла;
		КонецЦикла;
		
		Изделия.Индексы.Удалить(ВременныйИндексИзделия);
	КонецЕсли;
	
	// Перегруппировка строк
	//	Изделия заказов в отдельные группы
	//	ПФ различных заказов в отдельные группы (условно)
	//	ПФ с разными назначениями материалов в разные группы (условно)
	//	ПФ с СвободныйВыпускИзОбособленныхМатериалов (в разные группы если относятся к разным заказам/назначениям продукции)
	
	Заказы = Новый ТаблицаЗначений();
	Заказы.Колонки.Добавить("НомерГруппы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Заказы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	Заказы.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Заказы.Колонки.Добавить("НазначениеПродукция", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Заказы.Индексы.Добавить("НомерГруппы");
	
	НовыеГруппы = Новый ТаблицаЗначений();
	НовыеГруппы.Колонки.Добавить("НомерГруппы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	НовыеГруппы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	НовыеГруппы.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	НовыеГруппы.Колонки.Добавить("НазначениеПродукция", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	НовыеГруппы.Колонки.Добавить("НомерГруппыНовый", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	НовыеГруппы.Индексы.Добавить("НомерГруппы, Заказ, Назначение, НазначениеПродукция");
	
	СтруктураПоискаНомер = Новый Структура("НомерГруппы");
	СтруктураПоискаНоменклатура = Новый Структура("НомерГруппы, Номенклатура, Характеристика");
	СтруктураПоискаНовыйНомер = Новый Структура("НомерГруппы, Заказ, Назначение, НазначениеПродукция");
	
	ВременныйИндексГруппы = Группы.Индексы.Добавить("НомерГруппы, Номенклатура, Характеристика");
	
	Для каждого Изделие Из Изделия Цикл
		
		Если Изделие.СверхЗаказа Тогда
			// Строки сверх заказа остаются в исходной группе (привязка к заказанной строке)
			Продолжить;
		КонецЕсли;
		
		ЕстьОграничениеПоЗаказу = Изделие.ПродукцияЗаказа
			Или Не ПараметрыСозданияДокументов.УкрупнятьПартииМеждуЗаказами
			Или Изделие.СвободныйВыпускИзОбособленныхМатериалов;
		
		Заказ = ?(ЕстьОграничениеПоЗаказу,
			Изделие.ЗаказНаПроизводство,
			Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
		
		Назначение = ?(Не ПараметрыСозданияДокументов.УкрупнятьПартииПоНазначениям,
			Изделие.Назначение,
			Справочники.Назначения.ПустаяСсылка());
		
		НазначениеПродукция = ?(Изделие.СвободныйВыпускИзОбособленныхМатериалов,
			Изделие.НазначениеПродукция,
			Справочники.Назначения.ПустаяСсылка());
		
		СтрокаЗаказы = Заказы.Найти(Изделие.НомерГруппы, "НомерГруппы");
		Если СтрокаЗаказы = Неопределено Тогда
			НоваяСтрока = Заказы.Добавить();
			НоваяСтрока.НомерГруппы = Изделие.НомерГруппы;
			НоваяСтрока.Заказ = Заказ;
			НоваяСтрока.Назначение = Назначение;
			НоваяСтрока.НазначениеПродукция = НазначениеПродукция;
		ИначеЕсли СтрокаЗаказы.Заказ <> Заказ
			Или СтрокаЗаказы.Назначение <> Назначение
			Или СтрокаЗаказы.НазначениеПродукция <> НазначениеПродукция Тогда
			
			НомерГруппыНовый = 0;
			
			СтруктураПоискаНовыйНомер.НомерГруппы = Изделие.НомерГруппы;
			СтруктураПоискаНовыйНомер.Заказ = Заказ;
			СтруктураПоискаНовыйНомер.Назначение = Назначение;
			СтруктураПоискаНовыйНомер.НазначениеПродукция = НазначениеПродукция;
			НайденныеСтроки = НовыеГруппы.НайтиСтроки(СтруктураПоискаНовыйНомер);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НомерГруппыНовый = НомерГруппыСледующий;
				НомерГруппыСледующий = НомерГруппыСледующий + 1;
				
				НоваяСтрока = НовыеГруппы.Добавить();
				НоваяСтрока.НомерГруппы = Изделие.НомерГруппы;
				НоваяСтрока.Заказ = Заказ;
				НоваяСтрока.Назначение = Назначение;
				НоваяСтрока.НазначениеПродукция = НазначениеПродукция;
				НоваяСтрока.НомерГруппыНовый = НомерГруппыНовый;
			Иначе
				НомерГруппыНовый = НайденныеСтроки[0].НомерГруппыНовый;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаНоменклатура, Изделие);
			Группа = Группы.НайтиСтроки(СтруктураПоискаНоменклатура)[0];
			
			СтруктураПоискаНоменклатура.НомерГруппы = НомерГруппыНовый;
			НайденныеСтроки = Группы.НайтиСтроки(СтруктураПоискаНоменклатура);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				НоваяГруппа = Группы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяГруппа, Группа,, "НомерГруппы, КЗапуску");
				НоваяГруппа.НомерГруппы = НомерГруппыНовый;
			Иначе
				НоваяГруппа = НайденныеСтроки[0];
			КонецЕсли;
			
			// Привязка к новой группе
			Изделие.НомерГруппы = НоваяГруппа.НомерГруппы;
			НоваяГруппа.КЗапуску = НоваяГруппа.КЗапуску + Изделие.КЗапуску;
			
			Группа.КЗапуску = Группа.КЗапуску - Изделие.КЗапуску;
			Если Группа.КЗапуску = 0 Тогда
				Группы.Удалить(Группа);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Изделие.ПродукцияЗаказа Тогда
			СтруктураПоискаНомер.НомерГруппы = Изделие.НомерГруппы;
			Для каждого Группа Из Группы.НайтиСтроки(СтруктураПоискаНомер) Цикл
				Группа.ПродукцияЗаказа = Истина;
				Группа.ЗаказНаПроизводствоГруппировка = Изделие.ЗаказНаПроизводство;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Группы.Индексы.Удалить(ВременныйИндексГруппы);
	
	// Перегруппировка строк - побочные изделия "прикрепляются" к основным
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Перегруппировать", Истина);
	СтруктураПоиска.Вставить("ОсновноеИзделие", Ложь);
	СтруктураПоиска.Вставить("ПродукцияЗаказа", Истина);
	СтрокиКОбработке = Группы.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиКОбработке.ВГраница() <> -1 Тогда
		
		СтруктураПоискаГруппы = Новый Структура;
		СтруктураПоискаГруппы.Вставить("Перегруппировать", Истина);
		СтруктураПоискаГруппы.Вставить("ОсновноеИзделие", Истина);
		СтруктураПоискаГруппы.Вставить("Спецификация");
		СтруктураПоискаГруппы.Вставить("ЗаказНаПроизводствоГруппировка");
		ВременныйИндексГруппы = Группы.Индексы.Добавить(
			"Перегруппировать, ОсновноеИзделие, Спецификация, ЗаказНаПроизводствоГруппировка");
		
		СтруктураПоискаИзделия = Новый Структура("НомерГруппы, Номенклатура, Характеристика");
		ВременныйИндексИзделия = Изделия.Индексы.Добавить("НомерГруппы, Номенклатура, Характеристика");
		
		Для каждого Строка Из СтрокиКОбработке Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаГруппы, Строка, "Спецификация, ЗаказНаПроизводствоГруппировка");
			СтрокиОсновныеИзделия = Группы.НайтиСтроки(СтруктураПоискаГруппы);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаИзделия, Строка);
			СтрокиПлан = Изделия.НайтиСтроки(СтруктураПоискаИзделия);
			
			Для Индекс = 0 По СтрокиОсновныеИзделия.ВГраница() Цикл
				
				ВедущаяСтрока = СтрокиОсновныеИзделия[Индекс];
				Если ВедущаяСтрока.КоличествоНаПартию = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоПартий = ВедущаяСтрока.КЗапуску/ВедущаяСтрока.КоличествоНаПартию;
				Количество = Мин(Строка.КЗапуску, Строка.КоличествоНаПартию * КоличествоПартий);
				
				Если Индекс = СтрокиОсновныеИзделия.ВГраница()
					ИЛИ Количество = Строка.КЗапуску Тогда
					
					Для каждого СтрокаПлан Из СтрокиПлан Цикл
						СтрокаПлан.НомерГруппы = ВедущаяСтрока.НомерГруппы;
					КонецЦикла;
					Группы.Удалить(Строка);
					Прервать;
					
				Иначе
					
					Остаток = Количество;
					Для ИндексПлан = -(СтрокиПлан.Количество()-1) По 0 Цикл
						
						СтрокаПлан  = СтрокиПлан[-ИндексПлан];
						
						НоваяСтрока = Изделия.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлан,, "НомерГруппы, КЗапуску");
						НоваяСтрока.НомерГруппы = ВедущаяСтрока.НомерГруппы;
						НоваяСтрока.КЗапуску = Мин(СтрокаПлан.КЗапуску, Остаток);
						
						СтрокаПлан.КЗапуску = СтрокаПлан.КЗапуску - НоваяСтрока.КЗапуску;
						Если СтрокаПлан.КЗапуску = 0 Тогда
							Изделия.Удалить(СтрокаПлан);
							СтрокиПлан.Удалить(-ИндексПлан);
						КонецЕсли;
						
						Остаток = Остаток - НоваяСтрока.КЗапуску;
						Если Остаток = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Строка.КЗапуску = Строка.КЗапуску - Количество;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Группы.Индексы.Удалить(ВременныйИндексГруппы);
		Изделия.Индексы.Удалить(ВременныйИндексИзделия);
		
	КонецЕсли;
	
	Группы.Колонки.Удалить("ПродукцияЗаказа");
	Группы.Колонки.Удалить("ЗаказНаПроизводствоГруппировка");
	
	// Чтение дополнительных данных, необходимых для формирования
	ТекстыЗапроса = Новый Массив;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Группы.НомерГруппы             КАК НомерГруппы,
		|	ВЫРАЗИТЬ(Группы.Спецификация КАК Справочник.РесурсныеСпецификации) КАК Спецификация,
		|	Группы.Организация             КАК Организация,
		|	Группы.Партнер                 КАК Партнер,
		|	Группы.Договор                 КАК Договор,
		|	Группы.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Группы.ПодразделениеДиспетчер  КАК ПодразделениеДиспетчер,
		|	Группы.ЗаказПодДеятельность    КАК ЗаказПодДеятельность,
		|	Группы.ХозяйственнаяОперация   КАК ХозяйственнаяОперация
		|ПОМЕСТИТЬ Группы
		|ИЗ
		|	&Группы КАК Группы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Изделия.НомерГруппы              КАК НомерГруппы,
		|	ВЫРАЗИТЬ(Изделия.Спецификация КАК Справочник.РесурсныеСпецификации) КАК Спецификация,
		|	Изделия.НаправлениеДеятельности  КАК НаправлениеДеятельности,
		|	Изделия.ПодразделениеДиспетчер   КАК ПодразделениеДиспетчер,
		|	ВЫРАЗИТЬ(Изделия.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Изделия.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	Изделия.Получатель               КАК Получатель,
		|	Изделия.Назначение               КАК Назначение,
		|	Изделия.НазначениеПродукция      КАК НазначениеПродукция,
		|	ВЫРАЗИТЬ(Изделия.ЗаказНаПроизводство КАК Документ.ЗаказНаПроизводство2_2) КАК ЗаказНаПроизводство,
		|	Изделия.КЗапуску                 КАК Количество,
		|	Изделия.КоличествоНаПартию       КАК КоличествоНаПартию,
		|	Изделия.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Изделия.СтатьяРасходов           КАК СтатьяРасходов,
		|	Изделия.АналитикаРасходов        КАК АналитикаРасходов,
		|	Изделия.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	Изделия.СверхЗаказа              КАК СверхЗаказа,
		|	Изделия.ДатаЗапуска              КАК ДатаЗапуска,
		|	Изделия.ЖелаемаяДатаВыпуска      КАК ЖелаемаяДатаВыпуска,
		|	Изделия.Уровень                  КАК Уровень,
		|	Изделия.ДлительностьДоВыпуска    КАК ДлительностьДоВыпуска,
		|	Изделия.КлючПартия               КАК КлючПартия,
		|	АВТОНОМЕРЗАПИСИ()                КАК Ключ
		|ПОМЕСТИТЬ Изделия
		|ИЗ
		|	&Изделия КАК Изделия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Изделия.НомерГруппы                                    КАК НомерГруппы,
		|	
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Изделия.НазначениеПродукция) > 1
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Изделия.ЗаказНаПроизводство) > 1 // Будет создан заказ с обособлением под Назначение продукции
		|				ИЛИ МАКСИМУМ(Изделия.ЗаказНаПроизводство.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции))
		|			ТОГДА МАКСИМУМ(Изделия.НазначениеПродукция)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                                                  КАК НазначениеПродукция,
		|
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Изделия.ЗаказНаПроизводство) > 1
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка)
		|		ИНАЧЕ МАКСИМУМ(Изделия.ЗаказНаПроизводство)
		|	КОНЕЦ                                                  КАК Распоряжение,
		|	
		|	МИНИМУМ(
		|		ВЫБОР
		|			КОГДА Изделия.ЗаказНаПроизводство.НачатьНеРанее <= Изделия.ДатаЗапуска
		|				ТОГДА Изделия.ЗаказНаПроизводство.НачатьНеРанее
		|			ИНАЧЕ Изделия.ДатаЗапуска
		|		КОНЕЦ)                                             КАК НачатьНеРанее,
		|	МИНИМУМ(Изделия.ЖелаемаяДатаВыпуска)                   КАК ДатаПотребности,
		|	МИНИМУМ(Изделия.ЗаказНаПроизводство.РазмещениеВыпуска) КАК РазмещениеВыпуска
		|ПОМЕСТИТЬ ПараметрыЗапуска
		|ИЗ
		|	Изделия КАК Изделия
		|ГДЕ
		|	НЕ Изделия.СверхЗаказа
		|
		|СГРУППИРОВАТЬ ПО
		|	Изделия.НомерГруппы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерГруппы                КАК НомерГруппы,
		|	МАКСИМУМ(ВложенныйЗапрос.КоличествоПартий) КАК КоличествоПартий
		|ПОМЕСТИТЬ ГруппыКДелениюНаОптимальныеПартии
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			Изделия.НомерГруппы КАК НомерГруппы,
		|			ВЫБОР
		|				КОГДА МАКСИМУМ(Изделия.КоличествоНаПартию) <> 0
		|					ТОГДА СУММА(Изделия.Количество) / МАКСИМУМ(Изделия.КоличествоНаПартию)
		|				ИНАЧЕ 0
		|			КОНЕЦ               КАК КоличествоПартий
		|		ИЗ
		|			Изделия КАК Изделия
		|		ГДЕ
		|			Изделия.Спецификация.ОптимальнаяПартияВыпуска <> 0
		|		СГРУППИРОВАТЬ ПО
		|			Изделия.НомерГруппы,
		|			Изделия.Номенклатура,
		|			Изделия.Характеристика
		|	) КАК ВложенныйЗапрос
		|	
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.НомерГруппы
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВложенныйЗапрос.КоличествоПартий) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ГруппыКДелению.НомерГруппы      КАК НомерГруппы,
		|
		|	Изделия.Спецификация.ОптимальнаяПартияВыпуска                        КАК ОптимальнаяПартияВыпуска,
		|	Изделия.Спецификация.МинимальнаяПартияВыпуска                        КАК МинимальнаяПартияВыпуска,
		|	Изделия.Спецификация.ДопустимоеПревышениеОптимальнойПартииВыпуска    КАК ДопустимоеПревышениеОптимальнойПартииВыпуска,
		|	Изделия.Спецификация.ВыпускПроизвольнымиПорциями                     КАК ВыпускПроизвольнымиПорциями,
		|
		|	Изделия.Номенклатура КАК Номенклатура,
		|	СпецификацииИзделий.Упаковка КАК Упаковка,
		|	СпецификацииИзделий.КоличествоУпаковокНаЕдиницуПартииЗапуска КАК КоличествоУпаковокНаЕдиницуПартииЗапуска,
		|	СпецификацииИзделий.Порядок = 1 КАК ЭтоОсновноеИзделие,
		|	
		|	ОсновноеИзделиеСпецификации.Номенклатура КАК ОсновноеИзделиеСпецификацииНоменклатура,
		|	ОсновноеИзделиеСпецификации.Упаковка КАК ОсновноеИзделиеСпецификацииУпаковка,
		|	ОсновноеИзделиеСпецификации.КоличествоУпаковокНаЕдиницуПартииЗапуска КАК ОсновноеИзделиеСпецификацииКоличествоУпаковокНаЕдиницуПартииЗапуска,
		|	
		|	ГруппыКДелению.КоличествоПартий * Изделия.КоличествоНаПартию КАК Количество
		|ПОМЕСТИТЬ ИзделияКДелениюНаОптимальныеПартии
		|ИЗ
		|	ГруппыКДелениюНаОптимальныеПартии КАК ГруппыКДелению
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Изделия КАК Изделия
		|	ПО ГруппыКДелению.НомерГруппы = Изделия.НомерГруппы
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
		|	ПО СпецификацииИзделий.Спецификация = Изделия.Спецификация
		|		И СпецификацииИзделий.ВидНоменклатуры = Изделия.Номенклатура.ВидНоменклатуры
		|		И СпецификацииИзделий.Номенклатура В (Изделия.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|		И СпецификацииИзделий.Характеристика В (Изделия.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииИзделий КАК ОсновноеИзделиеСпецификации
		|	ПО ОсновноеИзделиеСпецификации.Спецификация = Изделия.Спецификация
		|		И ОсновноеИзделиеСпецификации.ВидНоменклатуры = Изделия.Номенклатура.ВидНоменклатуры
		|		И ОсновноеИзделиеСпецификации.Порядок = 1
		|ГДЕ
		|	Изделия.Ключ В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			Т.Ключ КАК Ключ
		|		ИЗ
		|			Изделия КАК Т
		|		ГДЕ
		|			Т.НомерГруппы = ГруппыКДелению.НомерГруппы
		|		УПОРЯДОЧИТЬ ПО
		|			Т.Ключ)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Изделия.НомерГруппы      КАК НомерГруппы,
		|	Изделия.КлючПартия       КАК КлючПартия,
		|	НормативныйГрафик.Начало КАК Начало
		|ПОМЕСТИТЬ ГруппыКлючиНачало
		|ИЗ
		|	Изделия КАК Изделия
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафик
		|	ПО Изделия.ЗаказНаПроизводство = НормативныйГрафик.ЗаказНаПроизводство
		|		И Изделия.КлючПартия = НормативныйГрафик.КлючПартия
		|		И НормативныйГрафик.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|ГДЕ
		|	НЕ Изделия.СверхЗаказа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерГруппы, Начало
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ГруппыКлючиНачало.НомерГруппы     КАК НомерГруппы,
		|	МИНИМУМ(ГруппыКлючиНачало.Начало) КАК Начало
		|ПОМЕСТИТЬ ГруппыНачало
		|ИЗ
		|	ГруппыКлючиНачало
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыКлючиНачало.НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ГруппыНачало.НомерГруппы              КАК НомерГруппы,
		|	МИНИМУМ(ГруппыКлючиНачало.КлючПартия) КАК КлючПартия
		|ПОМЕСТИТЬ КлючиПартий
		|ИЗ
		|	ГруппыНачало КАК ГруппыНачало
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыКлючиНачало КАК ГруппыКлючиНачало
		|	ПО ГруппыНачало.НомерГруппы = ГруппыКлючиНачало.НомерГруппы
		|		И ГруппыНачало.Начало = ГруппыКлючиНачало.Начало
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыНачало.НомерГруппы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК ЗаказНаПроизводство,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Назначение     КАК Назначение,
		|	ТабличнаяЧасть.Спецификация   КАК Спецификация,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.Склад
		|		ИНАЧЕ ТабличнаяЧасть.Подразделение
		|	КОНЕЦ Получатель,
		|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ НомераСтрокПродукции
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
		|ГДЕ
		|	(ТабличнаяЧасть.Ссылка, ТабличнаяЧасть.Номенклатура, ТабличнаяЧасть.Характеристика, ТабличнаяЧасть.Назначение, ТабличнаяЧасть.Спецификация) В
		|		(ВЫБРАТЬ
		|			Таблица.ЗаказНаПроизводство КАК Ссылка,
		|			Таблица.Номенклатура КАК Номенклатура,
		|			Таблица.Характеристика КАК Характеристика,
		|			Таблица.Назначение КАК Назначение,
		|			Таблица.Спецификация КАК Спецификация
		|		ИЗ
		|			Изделия КАК Таблица)
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Спецификация,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.Склад
		|		ИНАЧЕ ТабличнаяЧасть.Подразделение
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаПроизводство, Номенклатура, Характеристика, Назначение, Спецификация, Получатель
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ ПЕРВЫЕ 10000000
		|	Изделия.НомерГруппы         КАК НомерГруппы,
		|	АВТОНОМЕРЗАПИСИ()           КАК Порядок,
		|	Изделия.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	Изделия.Ключ                КАК Ключ
		|ПОМЕСТИТЬ ОчередьИзделий
		|ИЗ
		|	Изделия КАК Изделия
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ НомераСтрокПродукции КАК НомераСтрок
		|	ПО Изделия.ЗаказНаПроизводство = НомераСтрок.ЗаказНаПроизводство
		|		И Изделия.Номенклатура = НомераСтрок.Номенклатура
		|		И Изделия.Характеристика = НомераСтрок.Характеристика
		|		И Изделия.Назначение = НомераСтрок.Назначение
		|		И Изделия.Спецификация = НомераСтрок.Спецификация
		|		И Изделия.Получатель = НомераСтрок.Получатель
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ГруппыНачало КАК ГруппыНачало
		|	ПО Изделия.НомерГруппы = ГруппыНачало.НомерГруппы
		|ГДЕ
		|	Изделия.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Изделия.ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
		|	Изделия.ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
		|	Изделия.ЗаказНаПроизводство.Очередь,
		|	ЕСТЬNULL(НомераСтрок.НомерСтроки, 0),
		|	ЕСТЬNULL(ГруппыНачало.Начало, ДАТАВРЕМЯ(3999, 12, 31)),
		|	Изделия.Номенклатура.Наименование,
		|	Изделия.Характеристика.Наименование,
		|	Изделия.Спецификация.Наименование,
		|	Изделия.НомерГруппы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ОчередьИзделий.НомерГруппы         КАК НомерГруппы,
		|	ОчередьИзделий.Порядок             КАК Порядок,
		|	ОчередьИзделий.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ПОМЕСТИТЬ ОчередьГрупп
		|ИЗ
		|	ОчередьИзделий КАК ОчередьИзделий
		|ГДЕ
		|	ОчередьИзделий.Порядок В (
		|		ВЫБРАТЬ
		|			МИНИМУМ(Т.Порядок)
		|		ИЗ
		|			ОчередьИзделий КАК Т
		|		ГДЕ
		|			Т.НомерГруппы = ОчередьИзделий.НомерГруппы)
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Группы.НомерГруппы             КАК НомерГруппы,
		|	Группы.Спецификация            КАК Спецификация,
		|	Группы.Организация             КАК Организация,
		|	Группы.Партнер                 КАК Партнер,
		|	Группы.Договор                 КАК Договор,
		|	Группы.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Группы.ПодразделениеДиспетчер  КАК ПодразделениеДиспетчер,
		|	Группы.ЗаказПодДеятельность    КАК ЗаказПодДеятельность,
		|	Группы.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	ЕСТЬNULL(ПараметрыЗапуска.НазначениеПродукция,
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))           КАК НазначениеПродукция,
		|	ЕСТЬNULL(ПараметрыЗапуска.Распоряжение,
		|				ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка)) КАК Распоряжение,
		|	ЕСТЬNULL(ПараметрыЗапуска.Распоряжение.Номер, """")                 КАК ЗаказНаПроизводствоНомер,
		|	ЕСТЬNULL(ПараметрыЗапуска.Распоряжение.Дата, ДАТАВРЕМЯ(1,1,1))      КАК ЗаказНаПроизводствоДата,
		|	ЕСТЬNULL(ОчередьГрупп.ЗаказНаПроизводство.Приоритет,
		|				ЗНАЧЕНИЕ(Справочник.Приоритеты.ПустаяСсылка))           КАК Приоритет,
		|	ЕСТЬNULL(ОчередьГрупп.ЗаказНаПроизводство,
		|				ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка)) КАК СледующийЗаказВОчереди,
		|	ЕСТЬNULL(ПараметрыЗапуска.НачатьНеРанее, &ТекущаяДата)              КАК НачатьНеРанее,
		|	ЕСТЬNULL(ПараметрыЗапуска.ДатаПотребности, &ТекущаяДата)            КАК ДатаПотребности,
		|	ЕСТЬNULL(ПараметрыЗапуска.РазмещениеВыпуска,
		|		ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КОкончанию)) КАК РазмещениеВыпуска,
		|	ЕСТЬNULL(КлючиПартий.КлючПартия, &ПустойКлючСвязи)                  КАК КлючПартия
		|ИЗ
		|	Группы КАК Группы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыЗапуска КАК ПараметрыЗапуска
		|	ПО Группы.НомерГруппы = ПараметрыЗапуска.НомерГруппы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОчередьГрупп КАК ОчередьГрупп
		|	ПО Группы.НомерГруппы = ОчередьГрупп.НомерГруппы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ КлючиПартий КАК КлючиПартий
		|	ПО Группы.НомерГруппы = КлючиПартий.НомерГруппы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(ОчередьГрупп.Порядок, 1000000),
		|	Группы.НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Изделия.НомерГруппы              КАК НомерГруппы,
		|	Изделия.Спецификация             КАК Спецификация,
		|	Изделия.НаправлениеДеятельности  КАК НаправлениеДеятельности,
		|	Изделия.ПодразделениеДиспетчер   КАК ПодразделениеДиспетчер,
		|	Изделия.Номенклатура             КАК Номенклатура,
		|	Изделия.Характеристика           КАК Характеристика,
		|	Изделия.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Изделия.СтатьяРасходов           КАК СтатьяРасходов,
		|	Изделия.АналитикаРасходов        КАК АналитикаРасходов,
		|	Изделия.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	Изделия.КоличествоНаПартию       КАК КоличествоНаПартию,
		|	
		|	Изделия.Получатель               КАК Получатель,
		|	ВЫБОР
		|		КОГДА Изделия.Получатель ССЫЛКА Справочник.Склады
		|			ТОГДА Изделия.Получатель
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                            КАК Склад,
		|	ВЫБОР
		|		КОГДА Изделия.Получатель ССЫЛКА Справочник.СтруктураПредприятия
		|			ТОГДА Изделия.Получатель
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                            КАК Подразделение,
		|
		|	Изделия.Назначение               КАК Назначение,
		|
		|	ЕСТЬNULL(
		|		ПараметрыЗапуска.Распоряжение,
		|		ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка)) КАК Распоряжение,
		|
		|	МАКСИМУМ(Изделия.Уровень)               КАК Уровень,
		|	МАКСИМУМ(Изделия.ДлительностьДоВыпуска) КАК ДлительностьДоВыпуска,
		|	СУММА(Изделия.Количество)               КАК Количество
		|ИЗ
		|	Изделия КАК Изделия
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыЗапуска КАК ПараметрыЗапуска
		|	ПО Изделия.НомерГруппы = ПараметрыЗапуска.НомерГруппы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОчередьГрупп КАК ОчередьГрупп
		|	ПО Изделия.НомерГруппы = ОчередьГрупп.НомерГруппы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОчередьИзделий КАК ОчередьИзделий
		|	ПО Изделия.Ключ = ОчередьИзделий.Ключ
		|
		|СГРУППИРОВАТЬ ПО
		|	Изделия.НомерГруппы,
		|	Изделия.Спецификация,
		|	Изделия.НаправлениеДеятельности,
		|	Изделия.ПодразделениеДиспетчер,
		|	Изделия.Номенклатура,
		|	Изделия.Характеристика,
		|	Изделия.СписатьНаРасходы,
		|	Изделия.СтатьяРасходов,
		|	Изделия.АналитикаРасходов,
		|	Изделия.АналитикаАктивовПассивов,
		|	Изделия.КоличествоНаПартию,
		|	Изделия.Получатель,
		|	ВЫБОР
		|		КОГДА Изделия.Получатель ССЫЛКА Справочник.Склады
		|			ТОГДА Изделия.Получатель
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Изделия.Получатель ССЫЛКА Справочник.СтруктураПредприятия
		|			ТОГДА Изделия.Получатель
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	Изделия.Назначение,
		|	ЕСТЬNULL(ПараметрыЗапуска.Распоряжение, ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка)),
		|	ЕСТЬNULL(ОчередьГрупп.Порядок, 1000000)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(ОчередьГрупп.Порядок, 1000000),
		|	МИНИМУМ(ЕСТЬNULL(ОчередьИзделий.Порядок, 1000000)),
		|	Изделия.НомерГруппы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ИзделияКДелениюНаОптимальныеПартии.НомерГруппы КАК НомерГруппы,
		|
		|	ИзделияКДелениюНаОптимальныеПартии.ОптимальнаяПартияВыпуска КАК ОптимальнаяПартияВыпуска,
		|	ИзделияКДелениюНаОптимальныеПартии.МинимальнаяПартияВыпуска КАК МинимальнаяПартияВыпуска,
		|	ИзделияКДелениюНаОптимальныеПартии.ДопустимоеПревышениеОптимальнойПартииВыпуска КАК ДопустимоеПревышениеОптимальнойПартииВыпуска,
		|	ИзделияКДелениюНаОптимальныеПартии.ВыпускПроизвольнымиПорциями КАК ВыпускПроизвольнымиПорциями,
		|
		|	ИзделияКДелениюНаОптимальныеПартии.Номенклатура КАК Номенклатура,
		|	ИзделияКДелениюНаОптимальныеПартии.Упаковка КАК Упаковка,
		|	ИзделияКДелениюНаОптимальныеПартии.КоличествоУпаковокНаЕдиницуПартииЗапуска КАК КоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	ИзделияКДелениюНаОптимальныеПартии.ЭтоОсновноеИзделие КАК ЭтоОсновноеИзделие,
		|	НЕОПРЕДЕЛЕНО КАК ДанныеУпаковки,
		|	
		|	ИзделияКДелениюНаОптимальныеПартии.ОсновноеИзделиеСпецификацииНоменклатура КАК ОсновноеИзделиеСпецификацииНоменклатура,
		|	ИзделияКДелениюНаОптимальныеПартии.ОсновноеИзделиеСпецификацииУпаковка КАК ОсновноеИзделиеСпецификацииУпаковка,
		|	ИзделияКДелениюНаОптимальныеПартии.ОсновноеИзделиеСпецификацииКоличествоУпаковокНаЕдиницуПартииЗапуска КАК ОсновноеИзделиеСпецификацииКоличествоУпаковокНаЕдиницуПартииВыпуска,
		|	
		|	ИзделияКДелениюНаОптимальныеПартии.Количество КАК Количество
		|ИЗ
		|	ИзделияКДелениюНаОптимальныеПартии КАК ИзделияКДелениюНаОптимальныеПартии";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ОписаниеТаблиц = Новый Массив;
	
	ОписаниеТаблицы = УправлениеДаннымиОбИзделиях.ОписаниеТаблицыТекстаЗапросаДанныеУпаковок();
	ОписаниеТаблицы.ИмяТаблицы = "ИзделияКДелениюНаОптимальныеПартии";
	ОписаниеТаблиц.Добавить(ОписаниеТаблицы);
	
	ОписаниеТаблицы = УправлениеДаннымиОбИзделиях.ОписаниеТаблицыТекстаЗапросаДанныеУпаковок();
	ОписаниеТаблицы.ИмяТаблицы = "ИзделияКДелениюНаОптимальныеПартии";
	ОписаниеТаблицы.ИсточникНоменклатуры = "Т.ОсновноеИзделиеСпецификацииНоменклатура";
	ОписаниеТаблицы.ИсточникУпаковки = "Т.ОсновноеИзделиеСпецификацииУпаковка";
	ОписаниеТаблиц.Добавить(ОписаниеТаблицы);
	
	ТекстЗапроса = УправлениеДаннымиОбИзделиях.ТекстЗапросаДанныеУпаковок(ОписаниеТаблиц);
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос(УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса));
	Запрос.УстановитьПараметр("Группы", Группы);
	Запрос.УстановитьПараметр("Изделия", Изделия);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	Группы = РезультатЗапроса[КоличествоПакетов-4].Выгрузить();
	Изделия = РезультатЗапроса[КоличествоПакетов-3].Выгрузить();
	ПараметрыОптимальныхПартий = РезультатЗапроса[КоличествоПакетов-2].Выгрузить();
	ДанныеУпаковок = РезультатЗапроса[КоличествоПакетов-1].Выгрузить();
	
	Изделия.Колонки.Добавить("НомерПартииВГруппе", Новый ОписаниеТипов("Число"));
	
	// Разделение на оптимальные партии
	Если ПараметрыОптимальныхПартий.Количество() <> 0 Тогда
		РазбитьНаОптимальныеПартии(Изделия, ПараметрыОптимальныхПартий, ДанныеУпаковок);
	КонецЕсли;
	
	Возврат Новый Структура("Группы, Изделия", Группы, Изделия);
	
КонецФункции

&НаСервере
Процедура РазбитьНаОптимальныеПартии(Изделия, ПараметрыОптимальныхПартий, ДанныеУпаковок)
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВНабореДанных(ПараметрыОптимальныхПартий, ДанныеУпаковок);
	СтруктураУпаковкиПоУмолчанию = УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки();
	Изделия.Индексы.Добавить("НомерГруппы");
	
	Для каждого Группа Из ПараметрыОптимальныхПартий Цикл
		
		// Имитация структур данных спецификации
		ДанныеСпецификации = Новый Структура;
		ДанныеСпецификации.Вставить("ОптимальнаяПартияВыпуска", Группа.ОптимальнаяПартияВыпуска);
		ДанныеСпецификации.Вставить("МинимальнаяПартияВыпуска", Группа.МинимальнаяПартияВыпуска);
		ДанныеСпецификации.Вставить("ДопустимоеПревышениеОптимальнойПартииВыпуска", Группа.ДопустимоеПревышениеОптимальнойПартииВыпуска);
		ДанныеСпецификации.Вставить("ВыпускПроизвольнымиПорциями", Группа.ВыпускПроизвольнымиПорциями);
		
		ОсновноеИзделие = Справочники.РесурсныеСпецификации.СтруктураДанныхОсновногоИзделияСпецификации();
		ЗаполнитьЗначенияСвойств(ОсновноеИзделие, Группа,
			"Номенклатура, Упаковка, ДанныеУпаковки, ЭтоОсновноеИзделие, КоличествоУпаковокНаЕдиницуПартииВыпуска");
		Если Не Группа.ЭтоОсновноеИзделие Тогда
			ОсновноеИзделиеСпецификации  = Новый Структура;
			ОсновноеИзделиеСпецификации.Вставить("Номенклатура", Группа.ОсновноеИзделиеСпецификацииНоменклатура);
			ОсновноеИзделиеСпецификации.Вставить("Упаковка", Группа.ОсновноеИзделиеСпецификацииУпаковка);
			ОсновноеИзделиеСпецификации.Вставить("КоличествоУпаковокНаЕдиницуПартииВыпуска", Группа.ОсновноеИзделиеСпецификацииКоличествоУпаковокНаЕдиницуПартииВыпуска);
			ОсновноеИзделиеСпецификации.Вставить("ДанныеУпаковки", СтруктураУпаковкиПоУмолчанию);
			Если ЗначениеЗаполнено(ОсновноеИзделиеСпецификации.Упаковка) Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(
					ОсновноеИзделиеСпецификации, ДанныеУпаковок);
			КонецЕсли;
			УправлениеДаннымиОбИзделиях.ЗаполнитьКоэффициентПересчетаВОсновноеИзделие(
				ОсновноеИзделие, ОсновноеИзделиеСпецификации);
		КонецЕсли;
		
		ДанныеСпецификации.Вставить("ОсновноеИзделие", ОсновноеИзделие);
		
		// Получение партий
		Партии = Справочники.РесурсныеСпецификации.РазбитьНаОптимальныеПартииВыпуска(
			Группа.Количество,
			ДанныеСпецификации);
		
		// Разделение изделий на партии
		ИзделияГруппы = Изделия.НайтиСтроки(Новый Структура("НомерГруппы", Группа.НомерГруппы));
		
		ИзделияОстатки = Изделия.Скопировать(ИзделияГруппы, "Номенклатура, Характеристика, КоличествоНаПартию");
		ИзделияОстатки.Свернуть("Номенклатура, Характеристика, КоличествоНаПартию");
		ИзделияОстатки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		
		Для Индекс = 0 По Партии.ВГраница() Цикл
			
			Для каждого Строка Из ИзделияОстатки Цикл
				Строка.Количество = Строка.КоличествоНаПартию * Партии[Индекс].Числитель / Партии[Индекс].Знаменатель;
			КонецЦикла;
			
			Для каждого Изделие Из ИзделияГруппы Цикл
					
				Если Изделие.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
					
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Изделие);
				СтрокаОстаток = ИзделияОстатки.НайтиСтроки(СтруктураПоиска)[0];
				Если СтрокаОстаток.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Изделия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие,, "Количество");
				НоваяСтрока.НомерПартииВГруппе = Индекс + 1;
				НоваяСтрока.Количество = Мин(Изделие.Количество, СтрокаОстаток.Количество);
				
				Изделие.Количество = Изделие.Количество - НоваяСтрока.Количество;
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - НоваяСтрока.Количество;
					
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Изделие Из ИзделияГруппы Цикл
			Изделия.Удалить(Изделие);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Обработки.ФормированиеЭтаповПроизводства.ПолучитьМакет("НоменклатурныйПлан");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
 	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

КонецПроцедуры

&НаКлиенте
Функция ОтразитьОтборКомпоновкиВПростыхОтборах()
	
	ИдентификаторОтбора = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	Отбор = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторОтбора);
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ПростыеОтборы = 
		"НаправлениеДеятельности,
		|ПодразделениеДиспетчер,
		|ОтветственноеПодразделение,
		|Организация,
		|ЗаказНаПроизводство,
		|Спецификация,
		|Номенклатура,
		|Склад,
		|Назначение,
		|ДатаЗапуска,
		|ДатаВыпуска";
	
	ЕстьОтборПоДатеЗапуска = Ложь;
	ЕстьОтборПоДатеВыпуска = Ложь;
	ОтборПоДатеЗначение = '00010101';
	
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		
		Если ЭлементПользовательскойНастройки <> Неопределено
			 И ЭлементПользовательскойНастройки.Использование
			 И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			 
			 ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			 Если Не СтрНайти(ПростыеОтборы, ИмяПоля) > 0 Тогда
				 Возврат Ложь;
			 ИначеЕсли ИмяПоля = "ДатаЗапуска" Тогда
				 Если ЭлементПользовательскойНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					 Возврат Ложь;
				 КонецЕсли;
				 ЕстьОтборПоДатеЗапуска = Истина;
				 ОтборПоДатеЗначение = ?(ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) = Тип("СтандартнаяДатаНачала"),
				 	ЭлементПользовательскойНастройки.ПравоеЗначение.Дата,
					ЭлементПользовательскойНастройки.ПравоеЗначение);
			 ИначеЕсли ИмяПоля = "ДатаВыпуска" Тогда
				 Если ЭлементПользовательскойНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					 Возврат Ложь;
				 КонецЕсли;
				 ЕстьОтборПоДатеВыпуска = Истина;
				 ОтборПоДатеЗначение = ?(ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) = Тип("СтандартнаяДатаНачала"),
				 	ЭлементПользовательскойНастройки.ПравоеЗначение.Дата,
					ЭлементПользовательскойНастройки.ПравоеЗначение);
			 ИначеЕсли ЭлементПользовательскойНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
				 Возврат Ложь;
			 КонецЕсли;
			 
		КонецЕсли;
		
		Если ЭлементПользовательскойНастройки <> Неопределено
			 И ЭлементПользовательскойНастройки.Использование
			 И ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОтборПоДатеЗапуска И ЕстьОтборПоДатеВыпуска Тогда
		Возврат Ложь;
	ИначеЕсли ЕстьОтборПоДатеЗапуска Тогда
		ВариантПериода = 0;
	ИначеЕсли ЕстьОтборПоДатеВыпуска Тогда
		ВариантПериода = 1;
	КонецЕсли;
	ОтборПоДате = ОтборПоДатеЗначение;
	
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскойНастройки <> Неопределено
			И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ЗаполнитьПростойОтбор(ОтборПоНаправлениюДеятельности,
				"НаправлениеДеятельности", ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
				
			ЗаполнитьПростойОтбор(ОтборПоПодразделениюДиспетчеру,
				"ПодразделениеДиспетчер", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
				
			ЗаполнитьПростойОтбор(ОтборПоПодразделениюДиспетчеру,
				"ОтветственноеПодразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
				
			ЗаполнитьПростойОтбор(ОтборПоОрганизации,
				"Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), 
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			
			ЗаполнитьПростойОтбор(ОтборПоЗаказу,
				"ЗаказНаПроизводство", ПредопределенноеЗначение("Документ.ЗаказНаПроизводство2_2.ПустаяСсылка"), 
				ЭлементОтбора, ЭлементПользовательскойНастройки);
				
			ЗаполнитьПростойОтбор(ОтборПоСпецификации,
				"Спецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			
			ЗаполнитьПростойОтбор(ОтборПоНоменклатуре,
				"Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
		
			ЗаполнитьПростойОтбор(ОтборПоСкладу,
				"Склад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			
			ЗаполнитьПростойОтбор(ОтборПоНазначению,
				"Назначение", ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПростойОтбор(РеквизитФормы, ИмяПоля, ЗначениеПоУмолчанию, ЭлементОтбора, ЭлементПользовательскойНастройки)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Если ПолеКомпоновки = ЭлементОтбора.ЛевоеЗначение Тогда
		
		РеквизитФормы = ?(ЭлементПользовательскойНастройки.Использование,
			ЭлементПользовательскойНастройки.ПравоеЗначение, ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, ИмяПоля, Значение)
	
	ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого Отбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Отбор.ЛевоеЗначение = ЗначениеПоиска Тогда
			Настройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Отбор.ИдентификаторПользовательскойНастройки);
			Если Настройка <> Неопределено Тогда
				Настройка.Использование = ЗначениеЗаполнено(Значение);
				Если Настройка.Использование Тогда
					Настройка.ВидСравнения = ?(ИмяПоля = "ДатаЗапуска" ИЛИ ИмяПоля = "ДатаВыпуска",
						ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
						ВидСравненияКомпоновкиДанных.Равно);
					Настройка.ПравоеЗначение = Значение;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
#Область ПланИтоги
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланИтогиНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланИтоги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланИтогиКЗапуску.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланИтоги.Отметка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланИтогиОбеспечено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланИтоги.ТребуетсяОбеспечение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланИтоги.Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланИтоги.СпецификацияПлан");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '-';
																|en = '-'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланИтогиОбеспечено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланИтоги.Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланИтоги.СпецификацияПлан");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'н/д';
																|en = 'n/a'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
#КонецОбласти
	
#Область План
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗаказНаПроизводствоПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.СверхЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сверх заказа>';
																|en = '<exceeding the order>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланКЗапуску.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.Отметка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланОбеспечено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.ТребуетсяОбеспечение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.СпецификацияПлан");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '-';
																|en = '-'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланОбеспечено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.СпецификацияПлан");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'н/д';
																|en = 'n/a'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
	//
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Приоритеты.Ссылка КАК Приоритет,
		|	Приоритеты.Цвет   КАК Цвет
		|ИЗ
		|	Справочник.Приоритеты КАК Приоритеты");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	 
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланПриоритет.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.Приоритет");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Выборка.Приоритет;
		
		Цвет = Выборка.Цвет; //ХранилищеЗначения
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет.Получить());
		
	КонецЦикла;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланСвободныйВыпускИзОбособленныхМатериалов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.СвободныйВыпускИзОбособленныхМатериалов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.НазначениеПолучателя");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.План.ОбособленнаяЗакупкаПродажа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
#КонецОбласти

#Область РезультатФормирования
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РезультатФормированияНомерКартинки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РезультатФормирования.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РезультатФормированияПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РезультатФормирования.ЕстьОшибки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
#КонецОбласти
	
#Область ПредварительныйПросмотр
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзделияКПредпросмотруНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзделияКПредпросмотруХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИзделияКПредпросмотру.ЭтоИтог");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзделияКПредпросмотру.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИзделияКПредпросмотру.ЭтоИтог");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.ЗаменятьМатериалыНаАналоги.Видимость = ИспользоватьАналоги;
	Элементы.ДекорацияАналогиОтступ.Видимость = ИспользоватьАналоги;
	
	Элементы.СтруктураЗаказа.Видимость = ПравоДоступа("Просмотр",
		Метаданные.Отчеты.СтруктураЗаказаНаПроизводствоДинамическая);

	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(
		Объект,
		Обработки.ФормированиеЭтаповПроизводства);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
		Элементы.ПланИтогиСпецификация,
		ПараметрыВыбораСпецификаций);   
		
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ПоказыватьДетали") 
		ИЛИ Инициализация Тогда
		
		Элементы.План.Видимость = Форма.ПоказыватьДетали;
		Элементы.ПоказыватьДетали.Заголовок = ?(Форма.ПоказыватьДетали,
			НСтр("ru = 'Детальная информация (скрыть)';
				|en = 'Detailed information (hide)'"),
			НСтр("ru = 'Детальная информация (показать)';
				|en = 'Detailed information (show)'"));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТекущаяСтраница")
		ИЛИ СтруктураРеквизитов.Свойство("ПараметрыОтображения")
		ИЛИ Инициализация Тогда
		
		ПредварительныйПросмотр = Форма.ПараметрыОтображения.ПредварительныйПросмотр;
		Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагОтбор Тогда
			
			Элементы.НадписьШаг.Заголовок = ?(ПредварительныйПросмотр,
				НСтр("ru = 'Шаг 1 из 4. Отбор';
					|en = 'Step 1 of 4. Filter'"),
				НСтр("ru = 'Шаг 1 из 3. Отбор';
					|en = 'Step 1 of 3. Filter'"));
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагНоменклатурныйПлан Тогда
			
			Элементы.НадписьШаг.Заголовок = ?(ПредварительныйПросмотр,
				НСтр("ru = 'Шаг 2 из 4. Определение состава и объема запуска в производство';
					|en = 'Step 2 of 4. Decide what to launch and how much'"),
				НСтр("ru = 'Шаг 2 из 3. Определение состава и объема запуска в производство';
					|en = 'Step 2 of 3. Decide what to launch and how much'"));
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагПредварительныйПросмотр Тогда
			
			Элементы.НадписьШаг.Заголовок = НСтр("ru = 'Шаг 3 из 4. Предварительный просмотр';
												|en = 'Step 3 of 4. Preview'");
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагРезультатФормирования Тогда
			
			Элементы.НадписьШаг.Заголовок = ?(ПредварительныйПросмотр,
				НСтр("ru = 'Шаг 4 из 4. Уточнение сформированных документов';
					|en = 'Step 4 of 4. Specify generated documents'"),
				НСтр("ru = 'Шаг 3 из 3. Уточнение сформированных документов';
					|en = 'Step 3 of 3. Specify generated documents'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПараметрыОтображения")
		ИЛИ Инициализация Тогда
			
		Элементы.ПланИтогиДатаЗапускаМинимум.Видимость = Не Форма.ПараметрыОтображения.КроссТаблица;
		
	КонецЕсли;
		
	Если СтруктураРеквизитов.Свойство("ФильтрОбеспечение")
		ИЛИ Инициализация Тогда
		
		Форма.Элементы.ГиперссылкаВсеИзделия.ЦветТекста = ?(Форма.ФильтрОбеспечениеТекущееЗначение <> ФильтрОбеспечениеОтключен(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Форма.Элементы.ГиперссылкаОбеспечено.ЦветТекста = ?(Форма.ФильтрОбеспечениеТекущееЗначение <> ФильтрОбеспечениеОбеспечено(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Форма.Элементы.ГиперссылкаНеОбеспечено.ЦветТекста = ?(Форма.ФильтрОбеспечениеТекущееЗначение <> ФильтрОбеспечениеНеОбеспечено(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РезультатФормирования")
		ИЛИ Инициализация Тогда
		
		ЕстьОшибки = Ложь;
		Для каждого Строка Из Форма.РезультатФормирования.ПолучитьЭлементы() Цикл
			Если Строка.ЕстьОшибки Тогда
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.ГруппаДействияСОшибками.Видимость = ЕстьОшибки;
		
	КонецЕсли;
	
	Если Форма.ИспользоватьАналоги Тогда
		Если СтруктураРеквизитов.Свойство("РезервироватьМатериалы")
			ИЛИ Инициализация Тогда
			
			Элементы.ЗаменятьМатериалыНаАналоги.Доступность = Форма.РезервироватьМатериалы;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОжиданиеВФорме(ПоказатьДлительнуюОперацию, ПредставлениеОперации = "")
	
	Элементы.СтраницыФормы.ТекущаяСтраница = ?(ПоказатьДлительнуюОперацию,
		Элементы.СтраницаДлительнаяОперация, Элементы.СтраницаЭлементы);
	Элементы.Переход.Доступность = Не ПоказатьДлительнуюОперацию;
	
	Элементы.ДлительнаяОперацияПредставление.Заголовок = ПредставлениеОперации;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницыПомощника(Форма, ИмяШага)
	
	Элементы = Форма.Элементы;
	
	Если ИмяШага = "ШагОтбор" Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагОтбор;
		
		Элементы.Далее.Видимость = Истина;
		Элементы.Назад.Видимость = Ложь;
		Элементы.ПродолжитьСДругимиОтборами.Видимость = Ложь;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ИмяШага = "ШагНоменклатурныйПлан" Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагНоменклатурныйПлан;
		
		Элементы.Далее.Видимость = Истина;
		Элементы.Назад.Видимость = Истина;
		Элементы.ПродолжитьСДругимиОтборами.Видимость = Ложь;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ИмяШага = "ШагПредварительныйПросмотр" Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагПредварительныйПросмотр;
		
		Элементы.Далее.Видимость = Истина;
		Элементы.Назад.Видимость = Истина;
		Элементы.ПродолжитьСДругимиОтборами.Видимость = Ложь;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ИмяШага = "ШагРезультатФормирования" Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагРезультатФормирования;
		
		Элементы.Далее.Видимость = Ложь;
		Элементы.Назад.Видимость = Истина;
		Элементы.ПродолжитьСДругимиОтборами.Видимость = Истина;
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(Форма, "ТекущаяСтраница");
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьДлительнуюОперацию()
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперации(ВыводитьОкноОжидания = Истина)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ОбработчикОжиданияДлительнойОперации, ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			ПараметрыОжидания);
	
	НачатьОжиданиеДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиКомпоновщикаОтборов()
	
	Настройки = Новый Структура();
	Настройки.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ФормированиеЭтаповПроизводства", "КомпоновщикОтборов", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыСозданияДокументов()
	
	Настройки = Новый Структура();
	Настройки.Вставить("ПараметрыСозданияДокументов", ПараметрыСозданияДокументов);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ФормированиеЭтаповПроизводства", "ПараметрыСозданияДокументов", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЭтаповПроизводства", "ПараметрыСозданияДокументов");

	//

	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗначениеНастроек.Свойство("ПараметрыСозданияДокументов", ПараметрыСозданияДокументов);
	КонецЕсли;
	
	Если ПараметрыСозданияДокументов = Неопределено Тогда
		ПараметрыСозданияДокументов = ПараметрыСозданияДокументовПоУмолчанию();
	Иначе
		ПараметрыПоУмолчанию = ПараметрыСозданияДокументовПоУмолчанию();
		Для Каждого КлючИЗначение Из ПараметрыПоУмолчанию Цикл
			Если Не ПараметрыСозданияДокументов.Свойство(КлючИЗначение.Ключ) Тогда
				ПараметрыСозданияДокументов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыСозданияДокументов);
	
	Если Не РезервироватьМатериалы И ЗаменятьМатериалыНаАналоги Тогда
		ЗаменятьМатериалыНаАналоги = Ложь;
		ПараметрыСозданияДокументов.ЗаменятьМатериалыНаАналоги = Ложь;
	КонецЕсли;
	
	//
	
	Если НЕ СтруктураОтборовЗаполненаПоПереданнымПараметрам Тогда
	
		ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЭтаповПроизводства", "КомпоновщикОтборов");
	
		Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
			
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЭтаповПроизводства", "ПараметрыОтображения");
	Если ЗначениеНастроек = Неопределено
		ИЛИ Не ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(
			ЗначениеНастроек,
			СписокПараметровВывода(),
			Истина) Тогда
		ПараметрыОтображения = ПараметрыОтображенияПоУмолчанию();
	Иначе
		ПараметрыОтображения = ЗначениеНастроек;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользовательскиеНастройкиПоУмолчанию()
	
	СхемаКомпоновкиДанных = Обработки.ФормированиеЭтаповПроизводства.ПолучитьМакет("НоменклатурныйПлан");
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;

КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиПоУмолчанию());
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСозданияДокументовПоУмолчанию()
	
	ПараметрыСозданияДокументов = Новый Структура();

	ПараметрыСозданияДокументов.Вставить("РезервироватьМатериалы",                     Истина);
	ПараметрыСозданияДокументов.Вставить("ЗаменятьМатериалыНаАналоги",                 Ложь);
	ПараметрыСозданияДокументов.Вставить("ВариантПередачиЭтаповКВыполнению",           "Все");
	ПараметрыСозданияДокументов.Вставить("ВариантЗаполненияНормативногоГрафикаЭтапов", "РассчитатьОтТекущейДаты");
	ПараметрыСозданияДокументов.Вставить("УкрупнятьПартииМеждуЗаказами",               Истина);
	ПараметрыСозданияДокументов.Вставить("УкрупнятьПартииПоНазначениям",               Ложь);
	ПараметрыСозданияДокументов.Вставить("ОбособитьВыпускПолуфабрикатов",              Ложь);
	
	Возврат ПараметрыСозданияДокументов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВывода()
	
	СписокСвойств = "КроссТаблица,Периодичность,ИмяПоляДатыПериода,КоличествоПериодов,ПредварительныйПросмотр";
	Возврат СписокСвойств;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтображенияПоУмолчанию()
	
	Результат = Новый Структура();
	
	Результат.Вставить("КроссТаблица", Ложь);
	Результат.Вставить("Периодичность", ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	Результат.Вставить("ИмяПоляДатыПериода", "ЖелаемаяДатаВыпуска");
	Результат.Вставить("КоличествоПериодов", 10);
	Результат.Вставить("ПредварительныйПросмотр", Истина);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПартия()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиЭтап()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(Форма)
	
	СтруктураОтбора = Новый Структура();
	
	Если Форма.ТолькоОтмеченные Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;
	
	Если Не Форма.ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеОтключен() Тогда
		СтруктураОтбора.Вставить("ЕстьОбеспечение", Форма.ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеОбеспечено());
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Форма.Элементы.ПланИтоги.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		Форма.Элементы.ПланИтоги.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстГиперссылокОбеспечено()
	
	КоличествоСтрок = Объект.ПланИтоги.Количество();
	
	Если КоличествоСтрок > 0 Тогда
		КоличествоОбеспечено   = Объект.ПланИтоги.НайтиСтроки(Новый Структура("ЕстьОбеспечение", Истина)).Количество();
		КоличествоНеОбеспечено = КоличествоСтрок - КоличествоОбеспечено;
	Иначе
		КоличествоОбеспечено   = 0;
		КоличествоНеОбеспечено = 0;
	КонецЕсли;
	
	Элементы.ГиперссылкаВсеИзделия.Заголовок   = НСтр("ru = 'Все изделия';
														|en = 'All products'");
	Элементы.ГиперссылкаОбеспечено.Заголовок   = СтрШаблон(НСтр("ru = 'Обеспечено (%1)';
																|en = 'Supplied (%1)'"), Формат(КоличествоОбеспечено, "ЧЦ=3; ЧН=; ЧГ="));
	Элементы.ГиперссылкаНеОбеспечено.Заголовок = СтрШаблон(НСтр("ru = 'Не обеспечено (%1)';
																|en = 'Not supplied (%1)'"), Формат(КоличествоНеОбеспечено, "ЧЦ=3; ЧН=; ЧГ="));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФильтрОбеспечениеОтключен()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФильтрОбеспечениеОбеспечено()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФильтрОбеспечениеНеОбеспечено()
	
	Возврат 2;
	
КонецФункции

#КонецОбласти

#КонецОбласти
