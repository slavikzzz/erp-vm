
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УведомлениеОКонтролируемыхСделках"
		И Источник = Объект.Уведомление Тогда
		
		НомерКорректировки 	= 0;
		ТипУведомления 		= 0;
		НайтиИОбновитьУведомление("Последний");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	КонтролируемыеСделки.ЗаполнитьСписокГоловныхОрганизаций(Элементы.Организация.СписокВыбора);
	
	ПоказатьПоясненияКЭтапам = Истина;
	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(Объект.ОтчетныйГод);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НайтиИОбновитьУведомление("Последний");
	ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайлами", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("Уведомление") И ЗначениеЗаполнено(Параметры.Уведомление) Тогда
		СвойстваУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Уведомление, "Организация, ОтчетныйГод");
		Объект.Организация = СвойстваУведомления.Организация;
		Объект.ОтчетныйГод = Год(СвойстваУведомления.ОтчетныйГод);
		Объект.Уведомление = Параметры.Уведомление;
	Иначе
		
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		
		Объект.Уведомление = НайтиУведомление("Последний", Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
		
	КонецЕсли;
	
	ОбновитьУведомление(ЭтотОбъект);
	
	УстановитьЗаголовокКомандыИВидимостьПояснений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийПараметров

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НомерКорректировки 	= 0;
	ТипУведомления 		= 0;
	НайтиИОбновитьУведомление("Последний");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйГодПриИзменении(Элемент)
	
	НомерКорректировки 	= 0;
	ТипУведомления 		= 0;
	НайтиИОбновитьУведомление("Последний");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУведомленияПриИзменении(Элемент)
	
	НомерКорректировки = ?(ТипУведомления = 0, 0, ?(НомерКорректировки = 0,1,НомерКорректировки));
	НайтиИОбновитьУведомление("Указанный");
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	НайтиИОбновитьУведомление("Указанный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Уведомление);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомленияОКонтролируемыхСделкахНажатие(Элемент)
	ПараметрыФормы = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, Объект.ОтчетныйГод);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.ФормаСписка", ПараметрыФормы, Элемент, , ,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСозданияУведомленияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НомерКорректировки = ?(ЗначениеЗаполнено(Объект.Уведомление), НомерКорректировки + 1, 0);
	ТипУведомления = ?(НомерКорректировки = 0, 0, 1);
	СоздатьУведомление();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапаНастройки

&НаКлиенте
Процедура ДекорацияВзаимозависимыеЛицаНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаВзаимозависимыеЛица", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаТоваровНажатие(Элемент)
	
	Адрес = НастройкиФормыИзмененияРеквизитовДляТоваров(Элемент.Заголовок, Объект.Уведомление);
	
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаИзмененияРеквизитов",
					Новый Структура("АдресНастроек", Адрес), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаКонтрагентовНажатие(Элемент)
	
	Адрес = НастройкиФормыИзмененияРеквизитовДляКонтрагентов(Элемент.Заголовок, Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаИзмененияРеквизитов", 
					Новый Структура("АдресНастроек", Адрес), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаДоговоровНажатие(Элемент)
	
	Отбор = Новый Структура("Организация", Объект.Организация);
	ПараметрыОткрытия = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.ДоговорыУчастниковКонтролируемыхСделок.ФормаСписка", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапаФормирования

&НаКлиенте
Процедура ДекорацияСписокПрочихКонтролируемыхСделокНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием списка прочих контролируемых сделок необходимо создать уведомление.';
								|en = 'Create a notification before opening a list of other controlled transactions.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		СтандартнаяОбработка = Ложь;
			
		ПараметрыФормы=Новый Структура; 
		ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Уведомление));
		ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Уведомление);
		ОткрытьФорму("Документ.РегистрацияПрочихКонтролируемыхСделок.ФормаСписка", ПараметрыФормы, , Объект.Уведомление, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокСделокНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "КонтролируемыеСделки", Объект.Уведомление);
	ОткрытьФорму("Отчет.СписокКонтролируемыхСделок.Форма.ФормаОтчетаКонтролируемыеСделки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапаПроверки

&НаКлиенте
Процедура ДекорацияСведенияОВзаимозависимыхЛицахНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием отчета необходимо создать уведомление.';
								|en = 'Create a notification before opening the report.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
		
		ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "ВзаимозависимыеЛицаКонтролируемыхСделок", Объект.Уведомление);
		ОткрытьФорму("Отчет.ВзаимозависимыеЛицаКонтролируемыхСделок.Форма.ВзаимозависимыеЛица", ПараметрыОткрытия, Элемент);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиПредметовНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием отчета необходимо создать уведомление.';
								|en = 'Create a notification before opening the report.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		КлючВарианта = КлючВариантаОтчетаПредметыСделок(Объект.Уведомление);
		
		ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", КлючВарианта, Объект.Уведомление);
		ОткрытьФорму("Отчет.ПредметыКонтролируемыхСделок.Форма.ФормаОтчетаПредметы", ПараметрыОткрытия, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтролируемымЦепочкамСделокНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "КонтролируемыеСделкиЦепочки", Объект.Уведомление);
	ОткрытьФорму("Отчет.СписокКонтролируемыхСделок.Форма.ФормаОтчетаКонтролируемыеСделки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЦепочкиСозданияСтоимостиНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
		Оповестить("Запись_УведомлениеОКонтролируемыхСделках", Неопределено, Объект.Уведомление);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Уведомление));
	ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Уведомление);
	ОткрытьФорму("Документ.ЦепочкаСозданияСтоимостиКонтролируемойСделки.ФормаСписка", ПараметрыФормы, , Объект.Уведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСопутствующихУслугиНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
		Оповестить("Запись_УведомлениеОКонтролируемыхСделках", Неопределено, Объект.Уведомление);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Уведомление));
	ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Уведомление);
	ОткрытьФорму("Документ.СопутствующиеУслугиКонтролируемойСделки.ФормаСписка", ПараметрыФормы, , Объект.Уведомление);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЭтапаПодготовки

&НаКлиенте
Процедура ДекорацияСведенияГраницахВключенияНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ОтчетныйГод", Объект.ОтчетныйГод);
	ПараметрыОткрытия.Вставить("Уведомление", Объект.Уведомление);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаГраницыВключенияСделок", 
				ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокКонтролируемыхСделокНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием отчета необходимо создать уведомление.';
								|en = 'Create a notification before opening the report.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		ПараметрыОткрытия = Новый Структура("Уведомление, КлючВарианта", Объект.Уведомление,  "КонтролируемыеСделкиДляВключенияВУведомление");
		ОткрытьФорму("Отчет.КонтролируемыеСделкиДляВключенияВУведомление.Форма.ФормаОтчета", ПараметрыОткрытия, Элемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоставУведомленияНажатие(Элемент)
	
	ПараметрыФормы=Новый Структура; 
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Уведомление));
	ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Уведомление);
	ОткрытьФорму("Документ.КонтролируемаяСделка.ФормаСписка", ПараметрыФормы, , Объект.Уведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАнализУведомленияНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед открытием отчета необходимо создать уведомление.';
								|en = 'Create a notification before opening the report.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление", "АнализУведомления", Объект.Уведомление);
		ОткрытьФорму("Отчет.АнализУведомления.Форма.ФормаОтчета", ПараметрыОткрытия, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНастройкиЗаполненияУведомленияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо создать уведомление, перед открытием настроек его заполнения.';
								|en = 'Create a notification before opening its population settings.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		ПараметрыОткрытияФормы = Новый Структура("Уведомление", Объект.Уведомление);
		ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.НастройкиЗаполнения", ПараметрыОткрытияФормы, ЭтотОбъект, Объект.Уведомление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаСведенийОКонтролируемыхСделкахНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Организация, Уведомление", Объект.Организация, Объект.Уведомление);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаРаботыСДокументамиКонтролируемыхСделок",
					ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьСписокСделок(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед заполнением списка контролируемых сделок необходимо создать уведомление.';
								|en = 'Create a notification before populating the controlled transaction list.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		Если Объект.Уведомление <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
			ТекстВопроса = НСтр("ru = 'Заполнение списка сделок может занять длительное время%ОчисткаСпискаСделок%
				|Продолжить?';
				|en = 'Transaction list population can take a long time%ОчисткаСпискаСделок%
				|Continue?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОчисткаСпискаСделок%",
				?(СделкиСуществуют, НСтр("ru = ',
				|существующие данные о сделках при заполнении будут очищены.';
				|en = ',
				|existing transaction data will be cleared during population.'"), НСтр("ru = '.';
																						|en = '.'")));
				
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполненияСделокЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьУведомление(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед заполнением уведомления необходимо его создать.';
								|en = 'Create a notification before populating it.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		Если Объект.Уведомление <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
			ТекстВопроса = НСтр("ru = 'Заполнение уведомления может занять значительное время%ОчисткаУведомления%
				|Продолжить?';
				|en = 'Notification population can take a long time%ОчисткаУведомления%
				|Continue?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОчисткаУведомления%",
				?(УведомлениеЗаполнено, НСтр("ru = ',
				|существующие листы 1А при заполнении будут помечены на удаление.';
				|en = ',
				|existing sheets 1A will be marked for deletion when filling in.'"), НСтр("ru = '.';
																							|en = '.'")));
				
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполнениеУведомленийЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Перед проверкой заполнения уведомления необходимо его создать.';
								|en = 'Create a notification before checking its population.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
		
		РезультатВыполнения = ПроверитьЗаполнениеНаСервере(Объект.Уведомление, УникальныйИдентификатор);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.Уведомление);
		ПараметрыФормы.Вставить("АдресХранилища", РезультатВыполнения.АдресХранилища);
		
		ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаОшибок", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Уведомление не создано. Его выгрузка не возможна.';
								|en = 'The notification is not created. Cannot export it.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
		
		Если НЕ НомераКонтролируемыхСделокКорректны(Объект.Уведомление) Тогда
			ТекстВопроса = Нстр("ru = 'Нумерация листов 1А не корректна.
			|Перенумеровать листы 1А?
			|(операция может занять продолжительное время)';
			|en = '1A sheet numbering is incorrect.
			|Renumber 1A sheets?
			|(The operation may take a long time)'");
			Оповещение = Новый ОписаниеОповещения("ВопросПеренумероватьЛисты1АЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыгрузитьУведомление();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьУведомленияОКонтролируемыхСделках(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ТекстСообщения = НСтр("ru = 'Уведомление не создано. Его печать не возможна.';
								|en = 'The notification is not created. Cannot print it.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеСозданияУведомления");
	Иначе
	
		Если Не ЗначениеЗаполнено(Объект.Уведомление) Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыПечати = Новый Структура("Уведомление", Объект.Уведомление);
		ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаПечатиУведомления", ПараметрыПечати, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоясненияКЭтапам(Команда)
	
	ПоказатьПоясненияКЭтапам = Не ПоказатьПоясненияКЭтапам;
	
	УстановитьЗаголовокКомандыИВидимостьПояснений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

&НаСервере
Процедура ПодготовитьДанныеАвтоматическогоЗаполненияНаСервере()
	
	Документы.УведомлениеОКонтролируемыхСделках.ПодготовитьДанныеАвтоматическогоЗаполнения(Объект.Уведомление);
	Объект.ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(Объект.ОтчетныйГод);
	Объект.Уведомление = НайтиУведомление(Истина, Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
	ОбновитьУведомление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеНаСервере(Уведомление, УникальныйИдентификатор)
	
	РезультатВыполнения = Документы.УведомлениеОКонтролируемыхСделках.ПроверитьЗаполнениеУведомления(Уведомление, УникальныйИдентификатор);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСделок(СделкиСуществуют, ДатаФормированияСпискаСделок)
	
	СделкиЗаполнены = ?(СделкиСуществуют, НСтр("ru = 'Сформирован %ДатаФормированияСпискаСделок%';
												|en = 'Generated %ДатаФормированияСпискаСделок%'"),НСтр("ru = 'Список сделок пуст';
																										|en = 'Transaction list is empty'"));
	СделкиЗаполнены = СтрЗаменить(СделкиЗаполнены, "%ДатаФормированияСпискаСделок%", Формат(ДатаФормированияСпискаСделок, "ДЛФ=D"));
	
	Возврат СделкиЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЗаполненияУведомления(УведомлениеЗаполнено, ДатаЗаполненияУведомления)
	
	Представление = ?(УведомлениеЗаполнено, НСтр("ru = 'Сформировано %ДатаЗаполненияУведомления%';
												|en = 'Generated %ДатаЗаполненияУведомления%'"),НСтр("ru = 'Не заполнено';
																										|en = 'Blank'"));
	Представление = СтрЗаменить(Представление, "%ДатаЗаполненияУведомления%", Формат(ДатаЗаполненияУведомления, "ДЛФ=D"));
	
	Возврат Представление;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУведомления(Организация, ОтчетныйГод, НомерКорректировки)
	
	Если НомерКорректировки = Неопределено Тогда
		
		Представление = НСтр("ru = 'Уведомление о контролируемых сделках не создано';
							|en = 'Notification of controlled transactions is not created'");
		
	Иначе
		
		Представление = НСтр("ru = 'Открыть %ПредставлениеУведомления%';
							|en = 'Open %ПредставлениеУведомления%'");
		Если НомерКорректировки = 0 Тогда
			Представление = СтрЗаменить(Представление, "%ПредставлениеУведомления%", НСтр("ru = 'уведомление';
																							|en = 'notification'"));
		Иначе
			ПредставлениеНомераКорректировки = ?(НомерКорректировки = 1, "", "№"+Формат(НомерКорректировки, "ЧЦ=2; ЧГ=0")+" ");
			Представление = СтрЗаменить(Представление, "%ПредставлениеУведомления%", НСтр("ru = 'корректировку %НомерКорректировки%уведомления';
																							|en = 'adjustment %НомерКорректировки% of notification'"));
			Представление = СтрЗаменить(Представление, "%НомерКорректировки%", ПредставлениеНомераКорректировки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСозданияУведомления(НомерКорректировки)
	
	Если НомерКорректировки = Неопределено Тогда
		
		Представление = НСтр("ru = 'Создать уведомление';
							|en = 'Create notification'");
		
	Иначе
			
		Представление = Нстр("ru = 'Создать корректировку %НомерСледующейКорректировки% уведомления';
							|en = 'Create notification adjustment %НомерСледующейКорректировки% '");
		Представление = СтрЗаменить(Представление, "%НомерСледующейКорректировки% ", ?(НомерКорректировки, "№"+Формат(НомерКорректировки + 1, "ЧЦ=2")+" ", ""));
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура НайтиИОбновитьУведомление(ТипПоиска)
	
	Объект.Уведомление = НайтиУведомление(ТипПоиска, Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
	
	ОбновитьУведомление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиУведомление(ТипПоиска, Организация, ОтчетныйГод, ТипУведомления, НомерКорректировки)
	
	ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(ОтчетныйГод);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат КонтролируемыеСделки.НайтиУведомлениеОрганизацииВОтчетномГоду(Организация,ОтчетныйГод,ТипУведомления,НомерКорректировки,ТипПоиска);
	Иначе
		Возврат Документы.УведомлениеОКонтролируемыхСделках.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьОтчетныйГодЕслиНеЗаполнен(ОтчетныйГод)
	Возврат ?(ЗначениеЗаполнено(ОтчетныйГод), ОтчетныйГод, Год(ДобавитьМесяц(ТекущаяДатаСеанса(), -6)));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУведомление(ЗаполняемаяФорма)
	
	ДанныеУведомления = ПолучитьДанныеУведомления(ЗаполняемаяФорма.Объект.Уведомление, ЗаполняемаяФорма.Объект.ОтчетныйГод);
	ЗаполнитьЗначенияСвойств(ЗаполняемаяФорма, ДанныеУведомления);
	
	Если ДанныеУведомления.Свойство("Организация") Тогда
		ЗаполняемаяФорма.Объект.Организация = ДанныеУведомления.Организация;
	КонецЕсли;
	Если ДанныеУведомления.Свойство("ОтчетныйГод") Тогда
		ЗаполняемаяФорма.Объект.ОтчетныйГод = ДанныеУведомления.ОтчетныйГод;
	КонецЕсли;
	
	ЗаполняемаяФорма.ВерсияУведомления = ДанныеУведомления.ВерсияУведомления;
	ЗаполняемаяФорма.ПредставлениеСделок = ПредставлениеСделок(ЗаполняемаяФорма.СделкиСуществуют, ДанныеУведомления.ДатаФормированияСпискаСделок);
	ЗаполняемаяФорма.ПредставлениеЗаполненияУведомления = ПредставлениеЗаполненияУведомления(ЗаполняемаяФорма.УведомлениеЗаполнено, ДанныеУведомления.ДатаЗаполненияУведомления);
	ЗаполняемаяФорма.ПредставлениеУведомления = ПредставлениеУведомления(ЗаполняемаяФорма.Объект.Организация, ЗаполняемаяФорма.Объект.ОтчетныйГод, ДанныеУведомления.НомерКорректировки);
	ЗаполняемаяФорма.ПредставлениеСозданияУведомления = ПредставлениеСозданияУведомления(?(ЗначениеЗаполнено(ЗаполняемаяФорма.Объект.Уведомление), ЗаполняемаяФорма.НомерКорректировки, Неопределено));
	
	УправлениеФормой(ЗаполняемаяФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеУведомления(ДокументУведомления, ОтчетныйГод)
	
	СтруктураВозврата = Новый Структура;
	
	Если ЗначениеЗаполнено(ДокументУведомления) Тогда
		
		СвойстваУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУведомления,
			"ВерсияУведомления, НомерКорректировки, ДатаФормированияСпискаСделок, ДатаЗаполненияУведомления, Организация, ОтчетныйГод");
		
		СтруктураВозврата.Вставить("ТипУведомления", ?(СвойстваУведомления.НомерКорректировки = 0, 0, 1));
		СтруктураВозврата.Вставить("НомерКорректировки", ?(СтруктураВозврата.ТипУведомления = 0, 0, СвойстваУведомления.НомерКорректировки));
		СтруктураВозврата.Вставить("СделкиСуществуют", Документы.УведомлениеОКонтролируемыхСделках.ДанныеАвтоматическогоЗаполненияПодготовлены(ДокументУведомления));
		СтруктураВозврата.Вставить("УведомлениеЗаполнено", Документы.УведомлениеОКонтролируемыхСделках.УведомлениеЗаполнено(ДокументУведомления));
		СтруктураВозврата.Вставить("ДатаФормированияСпискаСделок", СвойстваУведомления.ДатаФормированияСпискаСделок);
		СтруктураВозврата.Вставить("ДатаЗаполненияУведомления", СвойстваУведомления.ДатаЗаполненияУведомления);
		СтруктураВозврата.Вставить("Организация", СвойстваУведомления.Организация);
		СтруктураВозврата.Вставить("ВерсияУведомления", СвойстваУведомления.ВерсияУведомления);
		СтруктураВозврата.Вставить("ОтчетныйГод", Формат(СвойстваУведомления.ОтчетныйГод, "ДФ=yyyy"));
	Иначе
		СтруктураВозврата.Вставить("СделкиСуществуют", Ложь);
		СтруктураВозврата.Вставить("УведомлениеЗаполнено", Ложь);
		СтруктураВозврата.Вставить("ДатаФормированияСпискаСделок", Дата(1,1,1));
		СтруктураВозврата.Вставить("ДатаЗаполненияУведомления", Дата(1,1,1));
		СтруктураВозврата.Вставить("НомерКорректировки", Неопределено);
		СтруктураВозврата.Вставить("ВерсияУведомления", Документы.УведомлениеОКонтролируемыхСделках.ВерсияУведомленияПоОтчетномуГоду(Дата(ОтчетныйГод, 1, 1)));
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ТекстНастройкиЗаполненияУведомления", Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстНастроекФормированияУведомления(ДокументУведомления));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.НомерКорректировки.Доступность = Форма.ТипУведомления <> 0;
	
	ДоступностьГиперссылок = ЗначениеЗаполнено(Форма.Объект.Организация) И ЗначениеЗаполнено(Форма.Объект.ОтчетныйГод);
	
	Форма.Элементы.ГруппаЭтапы.Доступность = ДоступностьГиперссылок;
	Форма.Элементы.ПредставлениеСозданияУведомления.Доступность = ДоступностьГиперссылок;
	
	Форма.Элементы.ПредставлениеУведомления.Видимость = ЗначениеЗаполнено(Форма.Объект.Уведомление);
	
	Форма.Элементы.ГруппаЦепочекСтоимостиСделок.Видимость = Форма.Объект.ОтчетныйГод >= 2024;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойстваПредыдущегоУведомления(Организация, ОтчетныйГод, НомерКорректировки)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ОтчетныйГод", ОтчетныйГод);
	Запрос.Параметры.Вставить("НомерКорректировки", НомерКорректировки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УведомлениеОКонтролируемыхСделках.Ссылка,
	|	УведомлениеОКонтролируемыхСделках.Организация,
	|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
	|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
	|	УведомлениеОКонтролируемыхСделках.КодМестаПредставления,
	|	УведомлениеОКонтролируемыхСделках.ГруппироватьСделкиСОдинаковойЦеной,
	|	УведомлениеОКонтролируемыхСделках.КодФормыРеорганизации,
	|	УведомлениеОКонтролируемыхСделках.ИННРеорганизованнойОрганизации,
	|	УведомлениеОКонтролируемыхСделках.КППРеорганизованнойОрганизации,
	|	1 КАК Приоритет
	|ИЗ
	|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|ГДЕ
	|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
	|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки < &НомерКорректировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОКонтролируемыхСделках.Ссылка,
	|	УведомлениеОКонтролируемыхСделках.Организация,
	|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод,
	|	УведомлениеОКонтролируемыхСделках.НомерКорректировки,
	|	УведомлениеОКонтролируемыхСделках.КодМестаПредставления,
	|	УведомлениеОКонтролируемыхСделках.ГруппироватьСделкиСОдинаковойЦеной,
	|	УведомлениеОКонтролируемыхСделках.КодФормыРеорганизации,
	|	УведомлениеОКонтролируемыхСделках.ИННРеорганизованнойОрганизации,
	|	УведомлениеОКонтролируемыхСделках.КППРеорганизованнойОрганизации,
	|	2
	|ИЗ
	|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|ГДЕ
	|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод < &ОтчетныйГод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ОтчетныйГод,
	|	НомерКорректировки";
	
	СвойстваУведомления = Новый Структура;
	СвойстваУведомления.Вставить("КодМестаПредставления", "");
	СвойстваУведомления.Вставить("ГруппироватьСделкиСОдинаковойЦеной", Ложь);
	СвойстваУведомления.Вставить("КодФормыРеорганизации", "");
	СвойстваУведомления.Вставить("ИННРеорганизованнойОрганизации", "");
	СвойстваУведомления.Вставить("КППРеорганизованнойОрганизации", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СвойстваУведомления, Выборка);
	КонецЕсли;
	
	Возврат СвойстваУведомления;
	
КонецФункции

&НаСервере
Функция ВернутьРанееСозданноеНоПомеченноеНаУдалениеИлиНовоеУведомление()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УведомлениеОКонтролируемыхСделках.Ссылка
	                      |ИЗ
	                      |	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	                      |ГДЕ
	                      |	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	                      |	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
	                      |	И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки");
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтчетныйГод", Дата(Объект.ОтчетныйГод, 1, 1));
	Запрос.УстановитьПараметр("НомерКорректировки", НомерКорректировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка.ПолучитьОбъект(), Документы.УведомлениеОКонтролируемыхСделках.СоздатьДокумент());
	
КонецФункции

&НаСервере
Процедура СоздатьУведомление()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И Объект.ОтчетныйГод > 2000 Тогда
		
		НовоеУведомление = ВернутьРанееСозданноеНоПомеченноеНаУдалениеИлиНовоеУведомление();
		НовоеУведомление.ПометкаУдаления = Ложь;
		НовоеУведомление.Дата = ТекущаяДатаСеанса();
		НовоеУведомление.Организация = Объект.Организация;
		НовоеУведомление.ОтчетныйГод = Дата(Объект.ОтчетныйГод, 1, 1);
		НовоеУведомление.НомерКорректировки = НомерКорректировки;
		
		СвойстваПредыдущегоУведомления = ПолучитьСвойстваПредыдущегоУведомления(НовоеУведомление.Организация, НовоеУведомление.ОтчетныйГод, НовоеУведомление.НомерКорректировки);
		
		ЗаполнитьЗначенияСвойств(НовоеУведомление, СвойстваПредыдущегоУведомления);
		
		Попытка
			НовоеУведомление.Записать();
		Исключение
			НомерКорректировки = НомерКорректировки - 1;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось создать новое уведомление.';
														|en = 'Cannot create a new notification.'"), , "ПредставлениеСозданияУведомления"); 
			Возврат;
		КонецПопытки;
		
		Объект.ОтчетныйГод = ВернутьОтчетныйГодЕслиНеЗаполнен(Объект.ОтчетныйГод);
		Объект.Уведомление = НайтиУведомление("Указанный", Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
		ОбновитьУведомление(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренумероватьЛисты1А(Уведомление)
	
	КонтролируемыеСделки.ПеренумерацияКонтролируемыхСделокУведомления(Уведомление);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомераКонтролируемыхСделокКорректны(Уведомление)
	
	Возврат КонтролируемыеСделки.НомераКонтролируемыхСделокУведомленияКорректны(Уведомление);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКомандыИВидимостьПояснений()
	
	Если ПоказатьПоясненияКЭтапам Тогда
		Элементы.ФормаПоясненияКЭтапам.Заголовок = НСтр("ru = 'Скрыть пояснения к этапам';
														|en = 'Hide explanations to steps'");
	Иначе
		Элементы.ФормаПоясненияКЭтапам.Заголовок = НСтр("ru = 'Показать пояснения к этапам';
														|en = 'Show explanations to steps'");
	КонецЕсли;
	
	Для каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") И Лев(ЭлементФормы.Имя, 15) = "ГруппаПояснение" Тогда
			ЭлементФормы.Видимость = ПоказатьПоясненияКЭтапам;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючВариантаОтчетаПредметыСделок(Уведомление)
	
	Возврат Отчеты.ПредметыКонтролируемыхСделок.ИмяВариантаНастроекУведомления(Уведомление);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайлами()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайламиЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = ПодключеноРасширениеРаботыСФайлами;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗаполнениеУведомленияНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение уведомления о контролируемых сделках';
															|en = 'Filling in the controlled transactions notification'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Уведомление", Объект.Уведомление);
	ПараметрыПроцедуры.Вставить("СообщатьОПрогрессе", Истина);
	
	ИмяВыполняемогоМетода = "Документы.УведомлениеОКонтролируемыхСделках.СформироватьКонтролируемыеСделкиУведомленияВФоне";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяВыполняемогоМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаполненияУведомления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	КонецЕсли;
	
	ПослеЗаполненияУведомленияНаСервере();
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияУведомленияНаСервере()
	
	НайтиУведомление("Указанный", Объект.Организация, Объект.ОтчетныйГод, ТипУведомления, НомерКорректировки);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаУведомления

&НаКлиенте
Процедура ОткрытьФормуВыгрузкиУведомления_2012_2017()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыгрузкиУведомления_2012_2017Завершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Уведомление", Объект.Уведомление);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаВыгрузкиВXML", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыгрузкиУведомления_2012_2017Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого Сообщение из Результат Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУведомление()
	
	Если ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ОткрытьФормуВыгрузкиУведомления_2012_2017();
	Иначе
		ВыгружаемыеДанные= ВыгрузитьФайлНаСервере(Объект.Уведомление);
		Если ВыгружаемыеДанные <> Неопределено Тогда
			ВыгрузитьУведомлениеВXML(ВыгружаемыеДанные, "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьФайлНаСервере(Уведомление)
	
	Если ЗначениеЗаполнено(Уведомление) Тогда
		ОбъектУведомления = Уведомление.ПолучитьОбъект();
		Возврат ОбъектУведомления.ВыгрузитьДокументСРазделениемНаФайлы(УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьУведомлениеВXML(ВыгружаемыеДанные, ПутьВыгрузки="")
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		ПолучаемыеФайлы = Новый Массив;
		Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
			ПолучаемыеФайлы.Добавить(
				Новый ОписаниеПередаваемогоФайла(ФайлВыгрузки.ИмяФайлаВыгрузки, ФайлВыгрузки.АдресФайлаВыгрузки));
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьУведомлениеВXMLЗавершение", ЭтотОбъект);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ПутьВыгрузки, Истина);
		
	Иначе
		
		Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
			
			ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУведомлениеВXMLЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолученныйФайл Из ПолученныеФайлы Цикл
		Если ПолученныйФайл <> Неопределено Тогда
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Нстр("ru = 'Выгружен файл %1';
					|en = 'File exported %1'"), ПолученныйФайл.Имя);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОповещения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПользователем

&НаКлиенте
Процедура ВопросЗаполненияСделокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПодготовитьДанныеАвтоматическогоЗаполненияНаСервере();
		УправлениеФормой(ЭтотОбъект);
		ПоказатьПредупреждение( , НСтр("ru = 'Список сделок успешно заполнен по данным учета';
										|en = 'Transaction list is successfully filled in according to accounting data'"), 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнениеУведомленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ДлительнаяОперация = НачатьЗаполнениеУведомленияНаСервере();
		
		ОповещениеПослеЗаполнения = Новый ОписаниеОповещения("ПослеЗаполненияУведомления", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется заполнение уведомления о контролируемых сделках';
												|en = 'Filling in the controlled transactions notification is in progress'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеПослеЗаполнения, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПеренумероватьЛисты1АЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренумероватьЛисты1А(Объект.Уведомление);
	КонецЕсли;
	
	ВыгрузитьУведомление();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеНастроекОткрытияФормыИзмененияРеквизитов

&НаСервереБезКонтекста
Функция НастройкиФормыИзмененияРеквизитовДляТоваров(Заголовок, Уведомление)
	
	ДанныеУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "ОтчетныйГод, ВерсияУведомления");
	
	СтруктураНастроек = Новый Структура("Заголовок", Заголовок);
	СтруктураНастроек.Вставить("ЗаголовокГруппыИзменяемыхРеквизитов", НСтр("ru = 'Классификация';
																			|en = 'Classification'"));
	СтруктураНастроек.Вставить("ПояснениеФормы",
		НСтр("ru = 'Сделки, заключенные по товарам, коды ТНВЭД которых относятся к перечню кодов товаров мировой биржевой торговли (соответствующая пометка в левой колонке), будут признаны контролируемыми, при условии превышения суммы этих сделок между контрагентом и организацией ограничения для сделок с иностранными независимыми лицами.';
			|en = 'Transactions concluded for goods which FEACN codes are included in goods code list of international marketplace trading (corresponding mark is in the left column) will be recognized as controlled on condition that the amounts of the transactions between a counterparty and a restriction company for the transactions with independent foreign persons will be exceeded.'"));
	
	ОтборНаРаботуУслугу = Новый ОтборКомпоновкиДанных;
	СписокРаботУслуг = Новый СписокЗначений;
	СписокРаботУслуг.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	СписокРаботУслуг.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборНаРаботуУслугу, "ТипНоменклатуры", СписокРаботУслуг, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	ИзменяемыеОбъекты = Новый Соответствие;
	СтруктураИзменяемогоОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта");
	СтруктураИзменяемогоОбъекта.ВидОбъекта = "Справочник";
	СтруктураИзменяемогоОбъекта.ИмяОбъекта = "Номенклатура";
	СтруктураИзменяемогоОбъекта.Вставить("ОбработкаПодбора", "Обработка.ПодборТоваровПоОтбору.Форма.Форма");
	СтруктураИзменяемогоОбъекта.Вставить("ПодсказкаПодбора",
		НСтр("ru = 'В открытой форме отбора можно будет выбрать номенклатуру (по произвольным условиям) для последующего 
					|присвоения ей значения из выделенной строки изменяемого реквизита.';
					|en = 'You will be able to select products in the opened filter form (under arbitrary conditions) to 
					|assign it a value from the selected line of the changed attribute.'"));
	
	ДеревоЭлементов = Новый ДеревоЗначений;
	ДеревоЭлементов.Колонки.Добавить("ИмяЭлемента");
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Наименование"));
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Код"));
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "Артикул"));
	ЗаполнитьЗначенияСвойств(ДеревоЭлементов.Строки.Добавить(), Новый Структура("ИмяЭлемента", "КодДляПоиска"));
	СтруктураИзменяемогоОбъекта.Вставить("ДеревоЭлементов", ДеревоЭлементов);
	
	ИзменяемыеОбъекты.Вставить(СтруктураИзменяемогоОбъекта.ВидОбъекта+"."+СтруктураИзменяемогоОбъекта.ИмяОбъекта, СтруктураИзменяемогоОбъекта);
	
	СтруктураНастроек.Вставить("ИзменяемыеОбъекты", ИзменяемыеОбъекты);
	
	ИзменяемыеРеквизиты = Новый Соответствие;
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодТНВЭД";
	СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборНаРаботуУслугу);
	СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'Код ТНВЭД';
																|en = 'FEACN code'"));
	СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
	// Устанавливаем список кодов, на вхождение в который будет определяться относятся ли товары к товарам мировой биржевой торговли.
	СтруктураИзменяемогоРеквизита.Вставить("СписокКодовУсловийПометки", КонтролируемыеСделкиПовтИсп.ПереченьКодовТНВЭДМировойБиржевойТорговли(ДанныеУведомления.ОтчетныйГод));
	СтруктураИзменяемогоРеквизита.Вставить("ПодсказкаПометки", НСтр("ru = 'Является товаром мировой биржевой торговли';
																	|en = 'This is a commodity of international marketplace trading'"));
	СтруктураИзменяемогоРеквизита.Вставить("ПоУмолчанию", Истина);
	
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	Если ДанныеУведомления.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
		
		СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
		СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодОКВЭД";
		СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'Код ОКВЭД';
																	|en = 'OKVED code'"));
		СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
		ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
		
		СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
		СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодОКП";
		СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборНаРаботуУслугу);
		СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'Код ОКП';
																	|en = 'RNCP code'"));
		СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
		ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	Иначе
		
		СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
		СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодОКВЭД2";
		СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'Код ОКВЭД2';
																	|en = 'OKVED2 code'"));
		СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
		ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
		СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
		СтруктураИзменяемогоРеквизита.ИмяРеквизита = "КодОКПД2";
		СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборНаРаботуУслугу);
		СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'Код ОКПД2';
																	|en = 'RNCPA2 code'"));
		СтруктураИзменяемогоРеквизита.Вставить("ОсновноеПредставлениеВВидеКодаИНаименования", Истина);
		ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
		
	КонецЕсли;
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "ОблагаетсяНДПИПоПроцентнойСтавке";
	СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборНаРаботуУслугу);
	СтруктураИзменяемогоРеквизита.Вставить("Представление", НСтр("ru = 'НДПИ';
																|en = 'MET'"));
	СтруктураИзменяемогоРеквизита.Вставить("ПредставлениеБулевскогоТипаВТаблице", НСтр("ru = 'Облагается НДПИ по процентной ставке';
																						|en = 'Subject to mineral extraction tax at rate'"));
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураНастроек.Вставить("ИзменяемыеРеквизиты", ИзменяемыеРеквизиты);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиФормыИзмененияРеквизитовДляКонтрагентов(Заголовок, Период)
	
	СтруктураНастроек = Новый Структура("Заголовок", Заголовок);
	СтруктураНастроек.Вставить("ЗаголовокГруппыИзменяемыхРеквизитов", НСтр("ru = 'Страны регистрации';
																			|en = 'Registration countries'"));
	СтруктураНастроек.Вставить("ПояснениеФормы",
		НСтр("ru = 'Территории стран, которые являются офшорными зонами (присутствует пометка в левой колонке), отмечают факт того, что контрагенты (для которых эти территории стран указаны) ведут свою деятельность в офшорах, а значит, сделки с таким контрагентом будут признаваться контролируемыми, если сумма доходов сделок за соответствующий календарный год будет превышать ограничение для сделок с иностранными независимыми лицами.';
			|en = 'Территории стран, которые являются офшорными зонами (присутствует пометка в левой колонке), отмечают факт того, что контрагенты (для которых эти территории стран указаны) ведут свою деятельность в офшорах, а значит, сделки с таким контрагентом будут признаваться контролируемыми, если сумма доходов сделок за соответствующий календарный год будет превышать ограничение для сделок с иностранными независимыми лицами.'"));
	
	ИзменяемыеОбъекты = Новый Соответствие;
	СтруктураИзменяемогоОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта");
	СтруктураИзменяемогоОбъекта.ВидОбъекта = "Справочник";
	СтруктураИзменяемогоОбъекта.ИмяОбъекта = "Контрагенты";
	ИзменяемыеОбъекты.Вставить(СтруктураИзменяемогоОбъекта.ВидОбъекта+"."+СтруктураИзменяемогоОбъекта.ИмяОбъекта, СтруктураИзменяемогоОбъекта);
	
	СтруктураНастроек.Вставить("ИзменяемыеОбъекты", ИзменяемыеОбъекты);
	
	ИзменяемыеРеквизиты = Новый Соответствие;
	
	СтруктураИзменяемогоРеквизита = Новый Структура("ИмяРеквизита");
	СтруктураИзменяемогоРеквизита.ИмяРеквизита = "СтранаРегистрации";
	ОтборКонтрагентов = Новый ОтборКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборКонтрагентов, "ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
	СтруктураИзменяемогоРеквизита.Вставить("ОтборИзменяемогоОбъекта", ОтборКонтрагентов);
	// Устанавливаем список кодов, на вхождение в который будет определяться относятся ли контрагенты к контрагентам
	// зарегистрированным в офшорах.
	ОтчетныйГод = НачалоГода(Дата(Период,1,1));
	СтруктураИзменяемогоРеквизита.Вставить("СписокКодовУсловийПометки", КонтролируемыеСделкиПовтИсп.ПереченьКодовСтранОфшоров(ОтчетныйГод));
	СтруктураИзменяемогоРеквизита.Вставить("ПодсказкаПометки", НСтр("ru = 'Является страной, зарегистрированной в офшоре';
																	|en = 'This is an offshore country'"));
	ИзменяемыеРеквизиты.Вставить(СтруктураИзменяемогоРеквизита.ИмяРеквизита, СтруктураИзменяемогоРеквизита);
	
	СтруктураНастроек.Вставить("ИзменяемыеРеквизиты", ИзменяемыеРеквизиты);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти