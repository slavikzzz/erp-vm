#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
  	Если Параметры.Свойство("АвтоТест") Тогда
   		Возврат;
  	КонецЕсли;
	
	Если Не Параметры.Свойство("АдресНастроек", АдресХранилищаНастроек) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьФормуНаОснованииНастроек(Отказ);
	
	Если Не Отказ Тогда
		ИзменитьОбъектНаСервере(Ложь);
		ИзменитьРеквизитНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ДобавлениеЭлементовВКлассификатор" 
		ИЛИ ИсточникВыбора.ИмяФормы = "Справочник.СтраныМира.Форма.Классификатор" Тогда
		
		ЗаполнитьСписокИзменяемыхРеквизитов();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровПоОтбору.Форма.Форма" Тогда
		
		МассивИзменяемыхСсылок = ПодобранныеТовары(ВыбранноеЗначение.АдресТоваровВХранилище);
		
		// Присваиваем объектам новые значения.
		ВыполнитьИзменениеОбъектов(МассивИзменяемыхСсылок, Элементы.ТаблицаИзменяемыхРеквизитов.ТекущиеДанные.Ссылка);
		
		// Обновляем таблицу реквизитов (так как могут быть подобраны элементы номенклатуры, имевшие ранее другие значения реквизитов).
		ЗаполнитьСписокИзменяемыхРеквизитов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаИзменяемыхРеквизитовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиИзменяемыхРеквизитовОбработчикОжидания", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИзменяемыхРеквизитовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не Строка = Неопределено Тогда
		УстановкаНовогоЗначенияРеквизита(Строка);
	Иначе
		ТекстОшибки = НСтр("ru = 'Не выбрано значение, которое должен принимать реквизит ""%1"". Выбранные объекты изменены не будут.';
							|en = 'Value which should take the ""%1"" attribute is not selected. The selected objects will not be changed.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИзменяемыйРеквизит);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыйРеквизитПриИзменении(Элемент)
	ИзменитьРеквизитНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыйОбъектПриИзменении(Элемент)
	ИзменитьОбъектНаСервере(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборИзКлассификатора(Команда)
	
	Если ИзменяемыйРеквизит = "СтранаРегистрации" Тогда
		// Открываем подбор для стран мира, в противном случае - открываем подбор общей формы для классификаторов:
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", ЗакрыватьПриВыборе);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ТаблицаИзменяемыхРеквизитов.ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ОткрытьФорму("Справочник.СтраныМира.Форма.Классификатор", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Подбор", Истина);
		ПолноеИмяОбъектаСодержащегоЗначенияРеквизита = ПолноеИмяОбъектаСодержащегоЗначенияРеквизита(ИзменяемыйРеквизит, 
																											ИзменяемыйОбъект);
		ПараметрыФормы.Вставить("ИмяСправочника", СтрЗаменить(ПолноеИмяОбъектаСодержащегоЗначенияРеквизита, "Справочник.", ""));
			
		ОткрытьФорму("ОбщаяФорма.ДобавлениеЭлементовВКлассификатор", ПараметрыФормы, ЭтаФорма, , , , ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗначенияДляТекущегоУсловия(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	ОткрытьФорму(ПутьКОбработкеПодбора, ПараметрыФормы, ЭтаФорма, , , , ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовоеЗначение(Команда)
	
	Если ТаблицаИзменяемыхРеквизитов.Количество() = 2 Тогда
		
		// Так как всего две строки с табличной части выбираем ту, которая не текущая:
		ВыбранныйИндексСтроки = ?(ТаблицаИзменяемыхРеквизитов.Индекс(Элементы.ТаблицаИзменяемыхРеквизитов.ТекущиеДанные) = 0, 1, 0);
		ВыбранныйИдентификаторСтроки = ТаблицаИзменяемыхРеквизитов.Получить(ВыбранныйИндексСтроки).ПолучитьИдентификатор();
		ПроцедураОбработкиВыбора = Новый ОписаниеОповещения("ВыборНовогоЗначенияРеквизитаЗавершение", ЭтотОбъект);
		
		ПредставлениеНовогоЗначения = ТаблицаИзменяемыхРеквизитов.Получить(ВыбранныйИндексСтроки).Наименование;
		ТекстВопроса = НСтр("ru = 'Для всех выбранных элементов будет установлено значение %ПредставлениеНовогоЗначения%, вы уверены?';
							|en = 'Value %ПредставлениеНовогоЗначения% will be set for all selected items. Continue?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ПредставлениеНовогоЗначения%", ПредставлениеНовогоЗначения);
									
		СписокЗначенийВопроса = Новый СписокЗначений;
		СписокЗначенийВопроса.Добавить(Новый Структура("Значение", ВыбранныйИдентификаторСтроки), "Да");
		СписокЗначенийВопроса.Добавить(Неопределено, "Отмена");
		ПоказатьВопрос(ПроцедураОбработкиВыбора, ТекстВопроса, СписокЗначенийВопроса);
		
	Иначе
		
		СписокВыбора = Новый СписокЗначений;
		Для каждого Стр Из ТаблицаИзменяемыхРеквизитов Цикл
			Если Не Стр.Ссылка = Элементы.ТаблицаИзменяемыхРеквизитов.ТекущиеДанные.Ссылка Тогда
				КартинкаПометки = ?(Стр.Пометка, Элементы.ТаблицаИзменяемыхРеквизитовПометка.КартинкаШапки, Новый Картинка());
				ЭлементСписка = СписокВыбора.Добавить(Стр.ПолучитьИдентификатор(), Стр.Наименование, Стр.Пометка, КартинкаПометки);
			КонецЕсли;
		КонецЦикла;
			 
		ПроцедураОбработкиВыбора = Новый ОписаниеОповещения("ВыборНовогоЗначенияРеквизитаЗавершение", ЭтотОбъект);
		СписокВыбора.ПоказатьВыборЭлемента(ПроцедураОбработкиВыбора, ЗаголовокУстановкиЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Производит заполнение таблицы изменяемых реквизитов значениями из соответствующих справочников (в зависимости от
// выбранного реквизита, который изменяем).
&НаСервере
Процедура ЗаполнитьСписокИзменяемыхРеквизитов(ПредставлениеБулевскогоТипаВТаблице = "")
	
	Элементы.ТаблицаИзменяемыхРеквизитов.Видимость = Истина;
	ПолноеИмяОбъектаИзменяемогоРеквизита = ПолноеИмяОбъектаСодержащегоЗначенияРеквизита(ИзменяемыйРеквизит, ИзменяемыйОбъект);
	
	Если ПолноеИмяОбъектаИзменяемогоРеквизита = "Булево" Тогда
		
		ТаблицаВозврата = Новый ТаблицаЗначений;
		ТаблицаВозврата.Колонки.Добавить("Ссылка");
		ТаблицаВозврата.Колонки.Добавить("Наименование");
		ТаблицаВозврата.Колонки.Добавить("СуществуютЭлементыСДаннымРеквизитом");
		
		ПредставлениеРеквизита = ?(ЗначениеЗаполнено(ПредставлениеБулевскогоТипаВТаблице),
									ПредставлениеБулевскогоТипаВТаблице,
									Элементы.ИзменяемыйРеквизит.СписокВыбора.НайтиПоЗначению(ИзменяемыйРеквизит).Представление);
		ПредставлениеОтрицания = 
			"Не " + ?(ВРег(ПредставлениеРеквизита) = ПредставлениеРеквизита, ПредставлениеРеквизита, НРег(Лев(ПредставлениеРеквизита, 1))
			+ Прав(ПредставлениеРеквизита, СтрДлина(ПредставлениеРеквизита)-1));
			
		// Добавляем строку, где булевское условие = истина.
		СтрокаВзведенногоФлажка = ТаблицаВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВзведенногоФлажка, Новый Структура("Ссылка, Наименование", Истина, ПредставлениеРеквизита));
		СтрокаВзведенногоФлажка.СуществуютЭлементыСДаннымРеквизитом = 
			ЕстьЭлементыДляДанногоЗначенияРеквизита(ИзменяемыйОбъект, ИзменяемыйРеквизит, Истина);
			
		// Добавляем строку, где булевское условие = ложь.
		СтрокаНеВзведенногоФлажка = ТаблицаВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНеВзведенногоФлажка, Новый Структура("Ссылка, Наименование", Ложь, ПредставлениеОтрицания));
		СтрокаНеВзведенногоФлажка.СуществуютЭлементыСДаннымРеквизитом = 
			ЕстьЭлементыДляДанногоЗначенияРеквизита(ИзменяемыйОбъект, ИзменяемыйРеквизит, Ложь);
			
	ИначеЕсли СписокВозможныхЗначенийРеквизита.Количество() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	СправочникСодержащийИзменяемыеРеквизиты.КодТНВЭД КАК ИзменяемыйРеквизит
		                      |ИЗ
		                      |	Справочник.Номенклатура КАК СправочникСодержащийИзменяемыеРеквизиты");
							  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодТНВЭД", ИзменяемыйРеквизит);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", ИзменяемыйОбъект);
		ТаблицаВведенныхЗначений = Запрос.Выполнить().Выгрузить();
		
		ТаблицаВозврата = Новый ТаблицаЗначений;
		ТаблицаВозврата.Колонки.Добавить("Ссылка");
		ТаблицаВозврата.Колонки.Добавить("Код");
		ТаблицаВозврата.Колонки.Добавить("Наименование");
		ТаблицаВозврата.Колонки.Добавить("СуществуютЭлементыСДаннымРеквизитом");
		
		Для каждого ВозможноеЗначениеРеквизита Из СписокВозможныхЗначенийРеквизита Цикл
			НоваяСтрока = ТаблицаВозврата.Добавить();
			НоваяСтрока.Ссылка = ВозможноеЗначениеРеквизита.Значение;
			НоваяСтрока.Наименование = ВозможноеЗначениеРеквизита.Представление;
			НоваяСтрока.СуществуютЭлементыСДаннымРеквизитом = Не ТаблицаВведенныхЗначений.Найти(НоваяСтрока.Ссылка, "ИзменяемыйРеквизит") = Неопределено;
		КонецЦикла;
		
		СтрокаПустогоЗначения = ТаблицаВозврата.Добавить();
		СтрокаПустогоЗначения.Ссылка = "";
		СтрокаПустогоЗначения.СуществуютЭлементыСДаннымРеквизитом = 
			ЕстьЭлементыДляДанногоЗначенияРеквизита(ИзменяемыйОбъект, ИзменяемыйРеквизит, СтрокаПустогоЗначения.Ссылка);
		
		ТаблицаВозврата.Сортировать("Наименование");
				
	ИначеЕсли СтрНайти(ПолноеИмяОбъектаИзменяемогоРеквизита, "Справочник") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	СправочникДанныхИзменяемыхРеквизитов.Ссылка,
		                      |	ВЫБОР
		                      |		КОГДА СправочникДанныхИзменяемыхРеквизитов.Код В (&ПереченьКодов)
		                      |			ТОГДА ИСТИНА
		                      |		ИНАЧЕ ЛОЖЬ
		                      |	КОНЕЦ КАК Пометка,
		                      |	ВЫБОР
		                      |		КОГДА &ПоказыватьВВидеКодаИНаименования
		                      |			ТОГДА СправочникДанныхИзменяемыхРеквизитов.Код + "" - "" + СправочникДанныхИзменяемыхРеквизитов.Наименование
		                      |		ИНАЧЕ СправочникДанныхИзменяемыхРеквизитов.Наименование
		                      |	КОНЕЦ КАК Наименование,
		                      |	МАКСИМУМ(ВЫБОР
		                      |			КОГДА СправочникСодержащийИзменяемыеРеквизиты.Ссылка ЕСТЬ NULL 
		                      |				ТОГДА ЛОЖЬ
		                      |			ИНАЧЕ ИСТИНА
		                      |		КОНЕЦ) КАК СуществуютЭлементыСДаннымРеквизитом
		                      |ИЗ
		                      |	Справочник.КлассификаторТНВЭД КАК СправочникДанныхИзменяемыхРеквизитов
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникСодержащийИзменяемыеРеквизиты
		                      |		ПО СправочникДанныхИзменяемыхРеквизитов.Ссылка = СправочникСодержащийИзменяемыеРеквизиты.КодТНВЭД
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	СправочникДанныхИзменяемыхРеквизитов.Ссылка,
		                      |	ВЫБОР
		                      |		КОГДА СправочникДанныхИзменяемыхРеквизитов.Код В (&ПереченьКодов)
		                      |			ТОГДА ИСТИНА
		                      |		ИНАЧЕ ЛОЖЬ
		                      |	КОНЕЦ,
		                      |	ВЫБОР
		                      |		КОГДА &ПоказыватьВВидеКодаИНаименования
		                      |			ТОГДА СправочникДанныхИзменяемыхРеквизитов.Код + "" - "" + СправочникДанныхИзменяемыхРеквизитов.Наименование
		                      |		ИНАЧЕ СправочникДанныхИзменяемыхРеквизитов.Наименование
		                      |	КОНЕЦ
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Наименование");
						  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.КлассификаторТНВЭД", ПолноеИмяОбъектаИзменяемогоРеквизита);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодТНВЭД", ИзменяемыйРеквизит);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", ИзменяемыйОбъект);
		УсловиеОтбора = УсловияОтбораСтрокойДляИспользованияВЗапросе(Запрос, "ИЛИ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
									"СправочникСодержащийИзменяемыеРеквизиты.Ссылка ЕСТЬ NULL",
									"СправочникСодержащийИзменяемыеРеквизиты.Ссылка ЕСТЬ NULL" + УсловиеОтбора);
		
		Запрос.УстановитьПараметр("ПереченьКодов", СписокКодовУсловийПометки.ВыгрузитьЗначения());
		Запрос.УстановитьПараметр("ПоказыватьВВидеКодаИНаименования", ПоказыватьЗначениеРеквизитаВВидеКодаИНаименования);
		ТаблицаВозврата = Запрос.Выполнить().Выгрузить();
		
		СтрокаПустогоЗначения = ТаблицаВозврата.Вставить(0);
		СтрокаПустогоЗначения.Ссылка = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаИзменяемогоРеквизита).ПустаяСсылка();
		СтрокаПустогоЗначения.СуществуютЭлементыСДаннымРеквизитом = 
			ЕстьЭлементыДляДанногоЗначенияРеквизита(ИзменяемыйОбъект, ИзменяемыйРеквизит, СтрокаПустогоЗначения.Ссылка);
		
	ИначеЕсли СтрНайти(ПолноеИмяОбъектаИзменяемогоРеквизита, "Перечисление") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	ТипыНалогообложенияНДС.Ссылка,
		                      |	ВЫБОР
		                      |		КОГДА СправочникСодержащийИзменяемыеРеквизиты.Ссылка ЕСТЬ NULL 
		                      |			ТОГДА ЛОЖЬ
		                      |		ИНАЧЕ ИСТИНА
		                      |	КОНЕЦ КАК СуществуютЭлементыСДаннымРеквизитом,
		                      |	ТипыНалогообложенияНДС.Ссылка КАК Наименование
		                      |ИЗ
		                      |	Перечисление.ТипыНалогообложенияНДС КАК ТипыНалогообложенияНДС
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникСодержащийИзменяемыеРеквизиты
		                      |		ПО ТипыНалогообложенияНДС.Ссылка = СправочникСодержащийИзменяемыеРеквизиты.КодТНВЭД
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Наименование");
						  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Перечисление.ТипыНалогообложенияНДС", ПолноеИмяОбъектаИзменяемогоРеквизита);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодТНВЭД", ИзменяемыйРеквизит);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", ИзменяемыйОбъект);
		УсловиеОтбора = УсловияОтбораСтрокойДляИспользованияВЗапросе(Запрос, "ИЛИ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"СправочникСодержащийИзменяемыеРеквизиты.Ссылка ЕСТЬ NULL",
									"СправочникСодержащийИзменяемыеРеквизиты.Ссылка ЕСТЬ NULL" + УсловиеОтбора);
		
		ТаблицаВозврата = Запрос.Выполнить().Выгрузить();
		
		СтрокаПустогоЗначения = ТаблицаВозврата.Вставить(0);
		СтрокаПустогоЗначения.Ссылка = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаИзменяемогоРеквизита).ПустаяСсылка();
		СтрокаПустогоЗначения.СуществуютЭлементыСДаннымРеквизитом =
			ЕстьЭлементыДляДанногоЗначенияРеквизита(ИзменяемыйОбъект, ИзменяемыйРеквизит, СтрокаПустогоЗначения.Ссылка);
		
	Иначе
		
		ТаблицаВозврата = Новый ТаблицаЗначений;
		Элементы.ТаблицаИзменяемыхРеквизитов.Видимость = Ложь;
		
	КонецЕсли;
	
	ТаблицаИзменяемыхРеквизитов.Загрузить(ТаблицаВозврата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолноеИмяОбъектаСодержащегоЗначенияРеквизита(ИмяРеквизита, ПолноеИмяИзменяемогоОбъекта)
	
	МетаданныеИзменяемогоОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяИзменяемогоОбъекта);
	МетаданныеРеквизита = МетаданныеИзменяемогоОбъекта.Реквизиты.Найти(ИмяРеквизита);
	ТипРеквизита = МетаданныеРеквизита.Тип.Типы().Получить(0);
	СтроковоеПредставлениеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипРеквизита);
	СтроковоеПредставлениеТипа = СтрЗаменить(СтроковоеПредставлениеТипа, "Ссылка", "");
	Возврат СтроковоеПредставлениеТипа; 
		
КонецФункции

// Производит присвоение значение товарам, подобранных через форму подбора:
&НаСервереБезКонтекста
Функция ПодобранныеТовары(АдресХранилища)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресХранилища);
	Возврат ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

&НаСервере
Функция ЕстьЭлементыДляДанногоЗначенияРеквизита(ПолноеИмяОбъекта, ИмяРеквизита, ЗначениеРеквизита)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	СправочникСодержащийИзменяемыеРеквизиты.Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК СправочникСодержащийИзменяемыеРеквизиты
	                      |ГДЕ
	                      |	СправочникСодержащийИзменяемыеРеквизиты.КодТНВЭД = &ЗначениеРеквизита");
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", ПолноеИмяОбъекта);
	УсловиеОтбора = УсловияОтбораСтрокойДляИспользованияВЗапросе(Запрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"СправочникСодержащийИзменяемыеРеквизиты.КодТНВЭД = &ЗначениеРеквизита",
								"СправочникСодержащийИзменяемыеРеквизиты.КодТНВЭД = &ЗначениеРеквизита" + УсловиеОтбора);
								
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодТНВЭД", ИмяРеквизита);
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Следующий();
	
КонецФункции

&НаКлиенте
Процедура ВыборНовогоЗначенияРеквизитаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановкаНовогоЗначенияРеквизита(ВыбранноеЗначение.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаНовогоЗначенияРеквизита(ИдентификаторСтроки)
	
	СтрокаПриемник = ТаблицаИзменяемыхРеквизитов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	МассивИзменяемыхСсылок = СписокСсылокПоВыбраннымСтрокамДинамическогоСписка();
	
	// Присваиваем объектам новые значения.
	ВыполнитьИзменениеОбъектов(МассивИзменяемыхСсылок, СтрокаПриемник.Ссылка, ИдентификаторСтроки);	
	
КонецПроцедуры

&НаСервере
Функция УсловияОтбораСтрокойДляИспользованияВЗапросе(Запрос, РазделительУсловий = "И")
	
	Если СписокИзменяемыхОбъектовТекущегоУсловия.Отбор.Элементы.Количество() Тогда
		УсловиеСОтбором = "";
		Для каждого ЭлементОтбора Из СписокИзменяемыхОбъектовТекущегоУсловия.Отбор.Элементы Цикл
			
			Если Строка(ЭлементОтбора.ЛевоеЗначение) = ИзменяемыйРеквизит Тогда
				Продолжить;
			КонецЕсли;
			
			ОтрицаниеВУсловииОтбора = (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно 
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит);
				
			// Если условие или - значит у нас ставится отметка о наличии элементов в зависимости от условий, тогда меняем отрицание:
			ОтрицаниеВУсловииОтбора = ?(РазделительУсловий = "И", ОтрицаниеВУсловииОтбора, Не ОтрицаниеВУсловииОтбора);
			
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ЗнакОтбора = "В";
				ЕстьСкобки = Истина;
			Иначе
				ЗнакОтбора = "=";
				ЕстьСкобки = Ложь;
			КонецЕсли;
			
			УсловиеСОтбором = УсловиеСОтбором + " " + РазделительУсловий + " " + ?(ОтрицаниеВУсловииОтбора, "НЕ ", "") + 
			"СправочникСодержащийИзменяемыеРеквизиты.Ссылка." + Строка(ЭлементОтбора.ЛевоеЗначение) + " " + ЗнакОтбора + " " +
			?(ЕстьСкобки, "(", "") + "&" + Строка(ЭлементОтбора.ЛевоеЗначение) + ?(ЕстьСкобки, ")", "");
			
			Запрос.УстановитьПараметр(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат УсловиеСОтбором;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФормуНаОснованииНастроек(Отказ)
	
	Настройки = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	// Проверка корректности параметров:
	Если Не Настройки.Свойство("ИзменяемыеОбъекты") ИЛИ Не Настройки.Свойство("ИзменяемыеРеквизиты") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Заполняем список изменяемых объектов:
	Для каждого ЭлементИзменяемогоОбъекта Из Настройки.ИзменяемыеОбъекты Цикл
		МетаданныеТекущегоОбъекта = Метаданные.НайтиПоПолномуИмени(ЭлементИзменяемогоОбъекта.Ключ);
		Если НЕ МетаданныеТекущегоОбъекта = Неопределено Тогда
			Элементы.ИзменяемыйОбъект.СписокВыбора.Добавить(ЭлементИзменяемогоОбъекта.Ключ, МетаданныеТекущегоОбъекта.Синоним);
			Если ЭлементИзменяемогоОбъекта.Значение.Свойство("ПоУмолчанию") Тогда
				ИзменяемыйОбъект = ЭлементИзменяемогоОбъекта.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.ИзменяемыйОбъект.СписокВыбора.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ИзменяемыйОбъект.Видимость = Элементы.ИзменяемыйОбъект.СписокВыбора.Количество() > 1;
	
	// Изменяемый объект по умолчанию:
	ИзменяемыйОбъект = ?(ЗначениеЗаполнено(ИзменяемыйОбъект), ИзменяемыйОбъект, Элементы.ИзменяемыйОбъект.СписокВыбора.Получить(0).Значение);
	
	
	// Заполняем список изменяемых реквизитов:
	Для каждого ЭлементИзменяемогоРеквизита Из Настройки.ИзменяемыеРеквизиты Цикл
		МетаданныеТекущегоРеквизита = МетаданныеТекущегоОбъекта.Реквизиты.Найти(ЭлементИзменяемогоРеквизита.Ключ);
		Если Не МетаданныеТекущегоРеквизита = Неопределено И МетаданныеТекущегоРеквизита.Тип.Типы().Количество() = 1 Тогда
			ПредставлениеРеквизита = ?(ЭлементИзменяемогоРеквизита.Значение.Свойство("Представление"),
										ЭлементИзменяемогоРеквизита.Значение.Представление,
										МетаданныеТекущегоРеквизита.Синоним);
			Элементы.ИзменяемыйРеквизит.СписокВыбора.Добавить(ЭлементИзменяемогоРеквизита.Ключ, ПредставлениеРеквизита);
			Если ЭлементИзменяемогоРеквизита.Значение.Свойство("ПоУмолчанию") Тогда
				ИзменяемыйРеквизит = ЭлементИзменяемогоРеквизита.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.ИзменяемыйРеквизит.СписокВыбора.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ИзменяемыйРеквизит.Видимость = Элементы.ИзменяемыйРеквизит.СписокВыбора.Количество() > 1;
	
	// Изменяемый реквизит по умолчанию:
	ИзменяемыйРеквизит = ?(ЗначениеЗаполнено(ИзменяемыйРеквизит), ИзменяемыйРеквизит, Элементы.ИзменяемыйРеквизит.СписокВыбора.Получить(0).Значение);
	
	
	// Оформление формы:
	ЭтаФорма.АвтоЗаголовок = Не Настройки.Свойство("Заголовок", Заголовок);
	Настройки.Свойство("ПояснениеФормы", Элементы.ДекорацияТекущееПояснениеФормы.Заголовок);
	Элементы.ДекорацияТекущееПояснениеФормы.Видимость = ЗначениеЗаполнено(Элементы.ДекорацияТекущееПояснениеФормы.Заголовок);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОбъектНаСервере(ОбновлятьРеквизиты)
	
	Настройки = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	СтруктураНастроекОбъекта = Настройки.ИзменяемыеОбъекты.Получить(ИзменяемыйОбъект);
	
	НаименованиеОбъекта = Метаданные.НайтиПоПолномуИмени(ИзменяемыйОбъект).Синоним;
	
	// Оформление заголовков:
	Если СтруктураНастроекОбъекта.Свойство("ЗаголовокСпискаСправочника") Тогда
		Элементы.ГруппаСпискаСправочника.Заголовок = СтруктураНастроекОбъекта.ЗаголовокСпискаСправочника;
	Иначе
		Если СтрДлина(НаименованиеОбъекта) < 20 Тогда
			ЗаголовокСпискаСправочника = НСтр("ru = '%НаименованиеОбъекта% с отбором по выделенному значению';
												|en = '%НаименованиеОбъекта% with filter by selected value'");
			Элементы.ГруппаСпискаСправочника.Заголовок = СтрЗаменить(ЗаголовокСпискаСправочника, "%НаименованиеОбъекта%", НаименованиеОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	ТекстПодсказки = НСтр("ru = 'Существуют %1 ""%2"", принадлежащие значению данного реквизита';
							|en = 'There are %1 ""%2"" which belong to this attribute value'");
	ПредставлениеВидаОбъекта = ?(СтруктураНастроекОбъекта.ВидОбъекта = "Справочник", НСтр("ru = 'элементы справочника';
																							|en = 'catalog items'"), НСтр("ru = 'документы';
																																|en = 'documents'"));
	ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, ПредставлениеВидаОбъекта, НаименованиеОбъекта);
	
	Элементы.ТаблицаИзменяемыхРеквизитовСуществуютЭлементыСДаннымРеквизитом.Подсказка = ТекстПодсказки;
	
	ЗаголовокУстановкиЗначения = НСтр("ru = 'Выберите новое значение реквизита ""%1"" для выбранных %2 ""%3"":';
										|en = 'Select a new value of the ""%1"" attribute for selected %2 ""%3"":'");
	ПредставлениеВидаОбъекта = ?(СтруктураНастроекОбъекта.ВидОбъекта = "Справочник", НСтр("ru = 'элементов справочника';
																							|en = 'catalog items'"), НСтр("ru = 'документов';
																																|en = 'documents'"));
	ЗаголовокУстановкиЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокУстановкиЗначения,
									ИзменяемыйРеквизит, ПредставлениеВидаОбъекта, НаименованиеОбъекта);
	
	// Установка данных для динамического списка:
	СвойстваДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваДинамическогоСписка, СписокИзменяемыхОбъектовТекущегоУсловия);
	СвойстваДинамическогоСписка.ТекстЗапроса = "";
	ЗаполнитьЗначенияСвойств(СвойстваДинамическогоСписка, СтруктураНастроекОбъекта);
	Если Не СтруктураНастроекОбъекта.Свойство("ТекстЗапроса") И Не СтруктураНастроекОбъекта.Свойство("ОсновнаяТаблица") Тогда
		СвойстваДинамическогоСписка.ОсновнаяТаблица = ИзменяемыйОбъект;
	КонецЕсли;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокИзменяемыхОбъектовТекущегоУсловия, СвойстваДинамическогоСписка);
	
	// Установка возможности подбора для формы динамического списка:
	СтруктураНастроекОбъекта.Свойство("ОбработкаПодбора", ПутьКОбработкеПодбора);
	СтруктураНастроекОбъекта.Свойство("ПодсказкаПодбора", Команды.Найти("ПодобратьЗначенияДляВыделеннойСтрокиИзменяемогоРеквизита").Подсказка);
	Элементы.СписокИзменяемыхОбъектовТекущегоУсловияПодобрать.Видимость = ЗначениеЗаполнено(ПутьКОбработкеПодбора);
	
	Если ОбновлятьРеквизиты Тогда
		ПредставлениеБулевскогоТипаВТаблице = "";
		СтруктураНастроекОбъекта.Свойство("ПредставлениеБулевскогоТипаВТаблице", ПредставлениеБулевскогоТипаВТаблице);
		
		// Производим заполнение таблицы изменяемых реквитов по начальным данным:
		ЗаполнитьСписокИзменяемыхРеквизитов(ПредставлениеБулевскогоТипаВТаблице);
	КонецЕсли;
	
	// Заполним список полей динамического списка:
	ЗаполнитьЭлементыДинамическогоСписка(Элементы.СписокИзменяемыхОбъектовТекущегоУсловия, СтруктураНастроекОбъекта);
	
	ИерархическийСправочник = СтруктураНастроекОбъекта.ВидОбъекта = "Справочник" 
								И Строка(Метаданные.НайтиПоПолномуИмени(ИзменяемыйОбъект).ВидИерархии) = "ИерархияГруппИЭлементов";
	Элементы.СписокИзменяемыхОбъектовТекущегоУсловия.ВыборГруппИЭлементов = ?(ИерархическийСправочник,
																				ИспользованиеГруппИЭлементов.ГруппыИЭлементы,
																				ИспользованиеГруппИЭлементов.Элементы);
	
	СписокИзменяемыхОбъектовТекущегоУсловия.УстановитьОбязательноеИспользование("Ссылка", Истина);
	Если ИерархическийСправочник Тогда
		СписокИзменяемыхОбъектовТекущегоУсловия.УстановитьОбязательноеИспользование("ЭтоГруппа", Истина);
	КонецЕсли;
	
	Элементы.СписокИзменяемыхОбъектовТекущегоУсловияСсылка.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитНаСервере()
	
	Настройки = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	СтруктураНастроекОбъекта = Настройки.ИзменяемыеРеквизиты.Получить(ИзменяемыйРеквизит);
	
	// Если есть список помечаемых значений - заполняем:
	Если СтруктураНастроекОбъекта.Свойство("СписокКодовУсловийПометки") Тогда
		СписокКодовУсловийПометки.ЗагрузитьЗначения(СтруктураНастроекОбъекта.СписокКодовУсловийПометки);
	Иначе
		СписокКодовУсловийПометки.Очистить();
	КонецЕсли;
	СтруктураНастроекОбъекта.Свойство("ПодсказкаПометки", Элементы.ТаблицаИзменяемыхРеквизитовПометка.Подсказка);
	
	// Если есть отбор - заполняем:
	Если СтруктураНастроекОбъекта.Свойство("ОтборИзменяемогоОбъекта") Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(СписокИзменяемыхОбъектовТекущегоУсловия.Отбор,
															СтруктураНастроекОбъекта.ОтборИзменяемогоОбъекта,
															Истина);
	Иначе
		СписокИзменяемыхОбъектовТекущегоУсловия.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	// Если есть список возможных значений - заполняем:
	Если СтруктураНастроекОбъекта.Свойство("СписокВозможныхЗначенийРеквизита") Тогда
		СписокВозможныхЗначенийРеквизита = СтруктураНастроекОбъекта.СписокВозможныхЗначенийРеквизита;
	Иначе
		СписокВозможныхЗначенийРеквизита.Очистить();
	КонецЕсли;
	
	ПоказыватьЗначениеРеквизитаВВидеКодаИНаименования = Ложь;
	СтруктураНастроекОбъекта.Свойство("ОсновноеПредставлениеВВидеКодаИНаименования", ПоказыватьЗначениеРеквизитаВВидеКодаИНаименования);
	
	ПредставлениеБулевскогоТипаВТаблице = "";
	СтруктураНастроекОбъекта.Свойство("ПредставлениеБулевскогоТипаВТаблице", ПредставлениеБулевскогоТипаВТаблице);
	
	// Производим заполнение таблицы изменяемых реквитов по начальным данным:
	ЗаполнитьСписокИзменяемыхРеквизитов(ПредставлениеБулевскогоТипаВТаблице);
	
	// Оформление формы:
	Если СтруктураНастроекОбъекта.Свойство("ЗаголовокГруппыИзменяемыхРеквизитов") Тогда
		Элементы.ГруппаИзменяемыхРеквизитов.Заголовок = СтруктураНастроекОбъекта.ЗаголовокГруппыИзменяемыхРеквизитов;
	Иначе
		Если Настройки.Свойство("ЗаголовокГруппыИзменяемыхРеквизитов") Тогда
			Элементы.ГруппаИзменяемыхРеквизитов.Заголовок = Настройки.ЗаголовокГруппыИзменяемыхРеквизитов;
		Иначе
			Если Элементы.ИзменяемыйРеквизит.СписокВыбора.Количество() > 1 Тогда
				Элементы.ГруппаИзменяемыхРеквизитов.Заголовок = НСтр("ru = 'Изменяемые реквизиты';
																	|en = 'Editable attributes'");
			ИначеЕсли Элементы.ИзменяемыйРеквизит.СписокВыбора.Количество() = 1 Тогда
				Элементы.ГруппаИзменяемыхРеквизитов.Заголовок = 
					НСтр("ru = 'Изменяемый реквизит:';
						|en = 'Changed attribute:'") + " " + Элементы.ИзменяемыйРеквизит.СписокВыбора.Получить(0).Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыДинамическогоСписка(ДинамическийСписокФормы, СтруктураНастроекОбъекта)
	
	Если СтруктураНастроекОбъекта.Свойство("ДеревоЭлементов")
		И ТипЗнч(СтруктураНастроекОбъекта.ДеревоЭлементов) = Тип("ДеревоЗначений")
		И Не СтруктураНастроекОбъекта.ДеревоЭлементов.Колонки.Найти("ИмяЭлемента") = Неопределено
		И СтруктураНастроекОбъекта.ДеревоЭлементов.Строки.Количество() > 0 Тогда
	
		ДляЭлементовУказаныСвойства = Не СтруктураНастроекОбъекта.ДеревоЭлементов.Колонки.Найти("СвойстваЭлемента") = Неопределено;
		ЗаполнитьЭлементыДинамическогоСпискаПоДереву(СтруктураНастроекОбъекта.ДеревоЭлементов.Строки,
														ДинамическийСписокФормы,
														ДляЭлементовУказаныСвойства);
		
	Иначе
		
		Если СтруктураНастроекОбъекта.ВидОбъекта = "Справочник" Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(СтруктураНастроекОбъекта.ВидОбъекта + "."
																+ СтруктураНастроекОбъекта.ИмяОбъекта);
			ИмяЭлемента = ?(Строка(МетаданныеОбъекта.ОсновноеПредставление) = "ВВидеКода", "Код", "Наименование");
			ДобавитьЭлементВГруппуДинамическогоСпискаФормы(ДинамическийСписокФормы, ИмяЭлемента);
		ИначеЕсли СтруктураНастроекОбъекта.ВидОбъекта = "Документ" Тогда
			ДобавитьЭлементВГруппуДинамическогоСпискаФормы(ДинамическийСписокФормы, "Номер");
			ДобавитьЭлементВГруппуДинамическогоСпискаФормы(ДинамическийСписокФормы, "Дата");
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыДинамическогоСпискаПоДереву(ПеречислениеЭлементов, ГруппаДляДобавления, ДляЭлементовУказаныСвойства)
	
	Для каждого СтрокаДереваЭлементов Из ПеречислениеЭлементов Цикл
	    СвойстваЭлемента = ?(ДляЭлементовУказаныСвойства, СтрокаДереваЭлементов.СвойстваЭлемента, Неопределено);
		ДобавленныйЭлемент = ДобавитьЭлементВГруппуДинамическогоСпискаФормы(ГруппаДляДобавления,
																			СтрокаДереваЭлементов.ИмяЭлемента,
																			СтрокаДереваЭлементов.Строки.Количество(),
																			СвойстваЭлемента);
		ЗаполнитьЭлементыДинамическогоСпискаПоДереву(СтрокаДереваЭлементов.Строки, ДобавленныйЭлемент, ДляЭлементовУказаныСвойства);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементВГруппуДинамическогоСпискаФормы(ГруппаДинамическогоСписка, ИмяЭлемента, ЭтоГруппа = Ложь, СвойстваЭлемента = Неопределено)
	
	ИмяДинамическогоСписка = ИмяТаблицыДинамическогоСпискаПоЭлементу(ГруппаДинамическогоСписка);
	
	ДоступныеПоляДинамическогоСписка = ЭтаФорма[ИмяДинамическогоСписка].КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
	
	ДобавляемыйЭлемент = Элементы.Найти(ИмяДинамическогоСписка+ИмяЭлемента);
	ПолеДинамическогоСписка = ДоступныеПоляДинамическогоСписка.Найти(ИмяЭлемента);
	
	// Добавляем или удаляем элемент, в зависимости от присутствия его на форме или отсутствия среди реквизитов
	// динамического списка:
	Если (Не ПолеДинамическогоСписка = Неопределено ИЛИ ЭтоГруппа) И ДобавляемыйЭлемент = Неопределено Тогда
		ДобавляемыйЭлемент = Элементы.Добавить(ИмяДинамическогоСписка
			+ ИмяЭлемента, ?(ЭтоГруппа, Тип("ГруппаФормы"), Тип("ПолеФормы")), ГруппаДинамическогоСписка);
	ИначеЕсли Не ДобавляемыйЭлемент = Неопределено И ПолеДинамическогоСписка = Неопределено И Не ЭтоГруппа Тогда
		Элементы.Удалить(ДобавляемыйЭлемент);
		ДобавляемыйЭлемент = Неопределено;
	КонецЕсли;
	
	// Заполняем свойства элемента:
	Если Не ПолеДинамическогоСписка = Неопределено И Не ЭтоГруппа Тогда
		Если Не ДобавляемыйЭлемент.ПутьКДанным = ИмяДинамическогоСписка+"."+ИмяЭлемента Тогда
			ДобавляемыйЭлемент.ПутьКДанным = ИмяДинамическогоСписка+"."+ИмяЭлемента;
		КонецЕсли;
		ДобавляемыйЭлемент.Заголовок = ?(ПолеДинамическогоСписка = Неопределено, ИмяЭлемента, ПолеДинамическогоСписка.Заголовок);
		Если ПолеДинамическогоСписка.Тип.СодержитТип(Тип("Булево")) Тогда
			ДобавляемыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СвойстваЭлемента = Неопределено И ТипЗнч(СвойстваЭлемента) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ДобавляемыйЭлемент, СвойстваЭлемента);
	КонецЕсли;
	
	Возврат ДобавляемыйЭлемент;
	
КонецФункции

&НаСервере
Функция ИмяТаблицыДинамическогоСпискаПоЭлементу(Элемент)
	Пока Не ТипЗнч(Элемент) = Тип("ТаблицаФормы") Цикл
		Элемент = Элемент.Родитель;
	КонецЦикла;
	Возврат Элемент.Имя;	
КонецФункции

&НаКлиенте
Процедура ПриАктивизацииСтрокиИзменяемыхРеквизитовОбработчикОжидания()
	
	ТекущиеДанныеТаблицы = Элементы.ТаблицаИзменяемыхРеквизитов.ТекущиеДанные;
	ЗначениеОтбора = ?(ТекущиеДанныеТаблицы = Неопределено, ТекущиеДанныеТаблицы, ТекущиеДанныеТаблицы.Ссылка);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(СписокИзменяемыхОбъектовТекущегоУсловия.Отбор,
		ИзменяемыйРеквизит, ЗначениеОтбора);
	
	ОтсутствиеДанных = ?(ТипЗнч(ЗначениеОтбора) = Тип("Булево"), Не ЗначениеОтбора, Не ЗначениеЗаполнено(ЗначениеОтбора));
	
	Элементы.СписокИзменяемыхОбъектовТекущегоУсловия.Отображение = ?(ОтсутствиеДанных,
		ОтображениеТаблицы.ИерархическийСписок, ОтображениеТаблицы.Список);
	
	Элементы.СписокИзменяемыхОбъектовТекущегоУсловияПодобрать.Видимость =
		ЗначениеЗаполнено(ПутьКОбработкеПодбора) И Не ОтсутствиеДанных;
		
	Элементы.СписокИзменяемыхОбъектовТекущегоУсловияУстановитьНовоеЗначение.Доступность =
		ТекущиеДанныеТаблицы <> Неопределено И ТекущиеДанныеТаблицы.СуществуютЭлементыСДаннымРеквизитом;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеОперацийНадВыбраннымиОбъектами

&НаКлиенте
Процедура ВыполнитьИзменениеОбъектов(ОбъектыДляИзменения, ПрисваиваемоеЗначение, ПараметрыОповещенияЗавершенияЗадания = Неопределено)
	
	Если Не ТипЗнч(ОбъектыДляИзменения) = Тип("Массив") ИЛИ ОбъектыДляИзменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыОбработкиИзменения = Новый Структура;
	ПараметрыОбработкиИзменения.Вставить("ИмяМетаданныхОбъекта", ИзменяемыйОбъект);
	ПараметрыОбработкиИзменения.Вставить("ИзменяемыеРеквизиты", Новый Структура(ИзменяемыйРеквизит, ПрисваиваемоеЗначение));
	ПараметрыОбработкиИзменения.Вставить("ОбрабатываемыеОбъекты", ОбъектыДляИзменения);
	
	Результат = ВыполнитьИзменениеОбъектовВФоновомЗадании(ПараметрыОбработкиИзменения, УникальныйИдентификатор);
	
	Если Результат.Статус = "Выполняется" Тогда
		
		ПараметрыФормаДлительнойОперации = ПараметрыФормыДлительнойОперации();
		ПараметрыФормаДлительнойОперации.ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменениеОбъектовЗавершено", ЭтотОбъект, ПараметрыОповещенияЗавершенияЗадания);
		
		ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормаДлительнойОперации, ЭтотОбъект, , , , ОповещениеОЗакрытии);
				
	Иначе
		
		ИзменениеОбъектовЗавершено(Результат, ПараметрыОповещенияЗавершенияЗадания);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыДлительнойОперации()
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания");
	ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
	ПараметрыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
	ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
	
	Возврат ПараметрыДлительнойОперации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьИзменениеОбъектовВФоновомЗадании(ПараметрыОбработки, УникальныйИдентификатор)	
	
	ВыполняемыйМетод = "Обработки.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.УстановитьНовыеЗначенияДляСпискаОбъектов";
	
	СтрокаИзменяемыхРеквизитов = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ПараметрыОбработки.ИзменяемыеРеквизиты);
	НаименованиеЗадания = НСтр("ru = 'Групповое изменение %1 ""%2"" для списка элементов объекта ""%3""';
								|en = 'The %1 ""%2"" bulk edit for the item list of the ""%3"" object '");
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания,
		?(ПараметрыОбработки.ИзменяемыеРеквизиты.Количество() = 1, НСтр("ru = 'реквизита';
																		|en = 'attribute'"), НСтр("ru = 'реквизитов';
																									|en = 'details'")),
		СтрокаИзменяемыхРеквизитов,
		ПараметрыОбработки.ИмяМетаданныхОбъекта);
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 0;
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = "КонтролируемыеСделки_ИзменениеРеквизитов";
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыОбработки, ПараметрыФоновогоЗадания);
			
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеОбъектовЗавершено(Результат, ИдентификаторСтроки) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата) Тогда
			СтрокаОшибок = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			
			Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибок);
			КонецЕсли;
		КонецЕсли;
		
		// Обновляем данные формы:
		Если Не ИдентификаторСтроки = Неопределено Тогда
			СтрокаПриемник = ТаблицаИзменяемыхРеквизитов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Результат.Статус = "Выполнено" Тогда
				СтрокаПриемник.СуществуютЭлементыСДаннымРеквизитом = Истина;
			Иначе
				СтрокаПриемник.СуществуютЭлементыСДаннымРеквизитом = 
					ЕстьЭлементыДляДанногоЗначенияРеквизита(ИзменяемыйОбъект, ИзменяемыйРеквизит, СтрокаПриемник.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаИсточник = Элементы.ТаблицаИзменяемыхРеквизитов.ТекущиеДанные;
		СтрокаИсточник.СуществуютЭлементыСДаннымРеквизитом = 
			ЕстьЭлементыДляДанногоЗначенияРеквизита(ИзменяемыйОбъект, ИзменяемыйРеквизит, СтрокаИсточник.Ссылка);		
		
	КонецЕсли;	
	
	ТаблицаИзменяемыхРеквизитовПриАктивизацииСтроки(Элементы.ТаблицаИзменяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСпискаОбъектовПоУсловиямДляПоследующейОбработки

&НаКлиенте
Функция СписокСсылокПоВыбраннымСтрокамДинамическогоСписка()
	
	// На основе массива выделенных данных формируем начальный отбор для схемы компоновки (анализируются группировки,
	// наличие групп и так далее), если в процессе формирования выясняется, что в массиве только обычные элементы
	// справочника - этот  массив без обработки через скд передаем на изменение.
	ЭтоПростойМассивСсылок = Истина;
	Отбор = ОтборНаОснованииМассиваВыбранныхЗначений(Элементы.СписокИзменяемыхОбъектовТекущегоУсловия, ЭтоПростойМассивСсылок);
	
	Если ЭтоПростойМассивСсылок Тогда
		// Массив содержит лишь простые значения элементов справочника, передаем его как есть для дальнейшей обработке.
		Возврат Элементы.СписокИзменяемыхОбъектовТекущегоУсловия.ВыделенныеСтроки;
	Иначе
		// В массиве есть группировки или группы справочника - получаем массив простых ссылок через СКД.
		Возврат СсылкиНаИзменяемыеОбъектыПолученныеСПомощьюОтбора(Отбор);
				
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОтборНаОснованииМассиваВыбранныхЗначений(ДанныеИсточника, ЭтоПростойМассивСсылок)
	
	ВозвращаемыйОтбор = Новый ОтборКомпоновкиДанных;
	
	ОтборПоГруппировке = Неопределено;
	ОтборПоСсылке = Неопределено;
	ЕстьГруппаСредиЭлементов = Ложь;
	
	Для каждого ТекущаяСтрокаСписка Из ДанныеИсточника.ВыделенныеСтроки Цикл
		Если ТипЗнч(ТекущаяСтрокаСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Если ОтборПоГруппировке = Неопределено Тогда
				ОтборПоГруппировке = КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ВозвращаемыйОтбор,
																				ТекущаяСтрокаСписка.ИмяГруппировки,
																				ТекущаяСтрокаСписка.Ключ);
			Иначе
				ОтборПоГруппировке.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Если Не ТипЗнч(ОтборПоГруппировке.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					СписокДляОтбора = Новый СписокЗначений;
					СписокДляОтбора.Добавить(ОтборПоГруппировке.ПравоеЗначение);
					ОтборПоГруппировке.ПравоеЗначение = СписокДляОтбора;
				КонецЕсли;	
				ОтборПоГруппировке.ПравоеЗначение.Добавить(ТекущаяСтрокаСписка.Ключ);
			КонецЕсли;
		Иначе
			// Если элемент является группой, то сделаем соответствующую пометку (проверяем только если еще не встречали группу):
			Если Не ЕстьГруппаСредиЭлементов Тогда
				ЭтоГруппа = Ложь;
				Если ДанныеИсточника.ДанныеСтроки(ТекущаяСтрокаСписка).Свойство("ЭтоГруппа", ЭтоГруппа) Тогда
					ЕстьГруппаСредиЭлементов = ЭтоГруппа;
				КонецЕсли;
			КонецЕсли;
			Если ОтборПоСсылке = Неопределено Тогда
				ТекущийВидСравнения = ?(ЕстьГруппаСредиЭлементов, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
				ОтборПоСсылке = КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ВозвращаемыйОтбор, "Ссылка", ТекущаяСтрокаСписка, ТекущийВидСравнения);
			Иначе
				ОтборПоСсылке.ВидСравнения = ?(ЕстьГруппаСредиЭлементов, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВСписке);
				Если Не ТипЗнч(ОтборПоСсылке.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					СписокДляОтбора = Новый СписокЗначений;
					СписокДляОтбора.Добавить(ОтборПоСсылке.ПравоеЗначение);
					ОтборПоСсылке.ПравоеЗначение = СписокДляОтбора;
				КонецЕсли;	
				ОтборПоСсылке.ПравоеЗначение.Добавить(ТекущаяСтрокаСписка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Это просто ссылки если среди выделенных строк не было ни одной группировки и не встречались группы справочника.
	ЭтоПростойМассивСсылок = ОтборПоГруппировке = Неопределено И Не ЕстьГруппаСредиЭлементов;
	
	Возврат ВозвращаемыйОтбор;
	
КонецФункции

&НаКлиенте
Функция СсылкиНаИзменяемыеОбъектыПолученныеСПомощьюОтбора(Отбор)
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отбор, СписокИзменяемыхОбъектовТекущегоУсловия.Отбор, Ложь);
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отбор, СписокИзменяемыхОбъектовТекущегоУсловия.КомпоновщикНастроек.Настройки.Отбор, Ложь);	
	Возврат СформироватьСписокСсылокСПомощьюСКД(Отбор, АдресХранилищаНастроек, ИзменяемыйОбъект);
КонецФункции

// На основании отбора получает список ссылок простых элементов справочника:
&НаСервереБезКонтекста
Функция СформироватьСписокСсылокСПомощьюСКД(ОтборСправочника, АдресНастроек, ПолноеИмяОбъекта)
	
	Настройки = ПолучитьИзВременногоХранилища(АдресНастроек);
	СтруктураНастроек = Настройки.ИзменяемыеОбъекты.Получить(ПолноеИмяОбъекта);
	
	ИзменениеРеквизитов = Обработки.ГрупповоеИзменениеРеквизитов.Создать();
	
	// Определим текст запроса:
	Если СтруктураНастроек.Свойство("ТекстЗапроса") Тогда
		ТекстЗапроса = СтруктураНастроек.ТекстЗапроса;
	Иначе
		ТекстЗапроса = ИзменениеРеквизитов.ТекстЗапроса(ПолноеИмяОбъекта);
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ИзменениеРеквизитов.СхемаКомпоновкиДанных(ТекстЗапроса);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновки.Отбор, ОтборСправочника);
	
	ФинансоваяОтчетностьСервер.НоваяГруппировка(КомпоновщикНастроек.Настройки.Структура, "Ссылка");
	ТаблицаИзменяемыхОбъектов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновки);
	
	Возврат ТаблицаИзменяемыхОбъектов.ВыгрузитьКолонку("Ссылка");
		
КонецФункции

#КонецОбласти

#КонецОбласти