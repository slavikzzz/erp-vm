
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьКомпоновщикНастроек();
	
	ВосстановитьНастройки();
	
	СтруктураОтборов = Неопределено;
	
	Если Параметры.Свойство("СтруктураОтборов", СтруктураОтборов) Тогда
		
		Если СтруктураОтборов.Свойство("Номенклатура", ОтборПоНоменклатуре) Тогда
			ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Номенклатура", ОтборПоНоменклатуре);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("ЗаказНаПроизводство", ОтборПоЗаказу) Тогда
			ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "ЗаказНаПроизводство", ОтборПоЗаказу);
		КонецЕсли;
		
		СтруктураОтборовЗаполненаПоПереданнымПараметрам = Истина;
		
	КонецЕсли;
	
	УстановитьСтраницыПомощника(ЭтаФорма, "ШагОтбор");
	
	ЦветВыбранногоРежима = ЦветаСтиля.СерыйЦветТекста1;
	ЦветНеВыбранногоРежима = ЦветаСтиля.ГиперссылкаЦвет;
	
	НастроитьЭлементыФормы();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда
		
		// в данной конфигурации дополнительных действий не требуется
		
	Иначе
		
		ЗагрузитьНастройкиОтбораПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗаполнитьНоменклатурныйПлан" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОграничениеВыборки   = Ложь;
		
		ЗаполнитьНоменклатурныйПланНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ШагОтбор

&НаКлиенте
Процедура ОтборПоСкладуПолучателюПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "СкладПолучатель", ОтборПоСкладуПолучателю);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладуОтправителюПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "СкладОтправитель", ОтборПоСкладуОтправителю);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНаправлениюДеятельностиПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "НаправлениеДеятельности", ОтборПоНаправлениюДеятельности);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНазначениюПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Назначение", ОтборПоНазначению);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНоменклатуреПриИзменении(Элемент)

	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Номенклатура", ОтборПоНоменклатуре);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗаказуПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "ЗаказНаПроизводство", ОтборПоЗаказу);

КонецПроцедуры

&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	УстановитьОтборПоПериодуПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПроизводстваПриИзменении(Элемент)
	
	УстановитьОтборПоПериодуПеремещения();
	
КонецПроцедуры

#КонецОбласти

#Область ШагПлан

&НаКлиенте
Процедура ПланВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = СтрЗаменить(Поле.Имя, "План", "");
	
	Если СтрНайти("Номенклатура,Характеристика,Назначение,СкладПолучатель,СкладОтправитель,ЗаказНаПроизводство", ИмяПоля) > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные[ИмяПоля]);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПриАктивизацииСтроки(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ФормированиеПеремещенийПоЗаказамНаПроизводство.Форма.Элемент.План.ПриАктивизацииСтроки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОтметкаПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ФормированиеПеремещенийПоЗаказамНаПроизводство.Форма.Элемент.План.ПриИзмененииКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланКПеремещениюПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ФормированиеПеремещенийПоЗаказамНаПроизводство.Форма.Элемент.План.ПриИзмененииКоличества");
	
	Элементы.План.ТекущиеДанные.Отметка = Элементы.План.ТекущиеДанные.КПеремещению > 0;
	
КонецПроцедуры

#КонецОбласти

#Область ШагРезультатФормирования

&НаКлиенте
Процедура СписокДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.СписокДокументы.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Отборы

&НаКлиенте
Процедура ВосстановитьНастройкиПоУмолчанию(Команда)
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область НоменклатурныйПлан

&НаКлиенте
Процедура УстановитьФлажкиНоменклатурныйПлан(Команда)
	
	ИзменитьФлажкиВВыделенныхСтроках(Истина, Элементы.План.ВыделенныеСтроки, "План");
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиНоменклатурныйПлан(Команда)
	
	ИзменитьФлажкиВВыделенныхСтроках(Ложь, Элементы.План.ВыделенныеСтроки, "План");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКПеремещениюПоОбеспеченномуКоличеству(Команда)
	
	ЗаполнитьКПеремещениюВВыделенныхСтроках("Обеспечено", Элементы.План.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОтмеченныеПриИзменении(Элемент)
	
	УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВсеИзделияНажатие(Элемент)
	
	ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеОтключен();
	
	УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ФильтрОбеспечение");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОбеспеченоНажатие(Элемент)
	
	ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеОбеспечено();
	
	УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ФильтрОбеспечение");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНеОбеспеченоНажатие(Элемент)
	
	ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеНеОбеспечено();
	
	УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ФильтрОбеспечение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьНоменклатурныйПлан(Команда)
	
	ПеречитатьНоменклатурныйПланНаСервере();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданныеДокументы

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	ЗаписатьНаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ЗаписатьНаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ЗаписатьНаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказовНаПеремещениеКОбеспечению(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказовНаПеремещениеКВыполнению(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказовМатериаловКВыполнению(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказовМатериаловКОбеспечению(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПередачМатериаловОтгружено(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПередачМатериаловПринято(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПеремещенийТоваровОтгружено(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПеремещенийТоваровПринято(Команда)
	
	УстановитьСтатус(Команда.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область Шаги

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагОтбор Тогда
	
		ПерейтиКШагуНоменклатурныйПланНаКлиенте();
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагНоменклатурныйПлан Тогда
	
		ПерейтиКШагуРезультатФормированияНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	ОчиститьСообщения();

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагРезультатФормирования Тогда
		
		ПерейтиНазадКШагуНоменклатурныйПланНаКлиенте();
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагНоменклатурныйПлан Тогда
		
		ПерейтиНазадКШагуОтборыНаКлиенте();

	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагОтбор Тогда
	
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСДругимиОтборами(Команда)
	
	ОчиститьСообщения();
	ПродолжитьСДругимиОтборамиНаСервере();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Шаги

#Область Отборы

&НаКлиенте
Процедура ПерейтиНазадКШагуОтборыНаКлиенте()
	
	Объект.План.Очистить();
	УстановитьТекстГиперссылокОбеспечено();
	Итоги.Очистить();
	
	УстановитьСтраницыПомощника(ЭтаФорма, "ШагОтбор");
	
КонецПроцедуры

#КонецОбласти

#Область НоменклатурныйПлан

&НаКлиенте
Процедура ПерейтиКШагуНоменклатурныйПланНаКлиенте() 
	
	ОграничениеВыборки = Истина;
	
	ЗаполнитьНоменклатурныйПланНаСервере();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	Иначе
		
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагНоменклатурныйПлан");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазадКШагуНоменклатурныйПланНаКлиенте()
	
	Если СозданныеОбъекты.Количество() <> 0 Тогда
		
		Отказ = Ложь;
		УдалитьСозданныеОбъекты(Отказ);
		
		Если Не Отказ Тогда
			
			СозданныеОбъекты.Очистить();
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Удаление объектов';
					|en = 'Delete objects'"),
				,
				НСтр("ru = 'Сформированные объекты помечены на удаление.';
					|en = 'Generated objects are marked for deletion.'"));
			
			УстановитьСтраницыПомощника(ЭтаФорма, "ШагНоменклатурныйПлан");
			
		КонецЕсли;
		
	Иначе
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагНоменклатурныйПлан");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатурныйПланНаСервере()
	
	Если СохранитьНастройки И НЕ СтруктураОтборовЗаполненаПоПереданнымПараметрам Тогда
		СохранитьНастройкиКомпоновщикаОтборов();
	КонецЕсли;
	
	ОтменитьДлительнуюОперацию();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Настройки", КомпоновщикНастроек.ПолучитьНастройки());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование перемещений: заполнение номенклатурного плана';
															|en = 'Transfer generation: item plan filling'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство.ПолучитьНоменклатурныйПланОтложенно",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = "ЗаполнитьНоменклатурныйПланОтложенноЗавершение";
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		ЗаполнитьНоменклатурныйПланОтложенно(ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатурныйПланОтложенноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьНоменклатурныйПланОтложенно(Результат);
		
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагНоменклатурныйПлан");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатурныйПланОтложенно(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Объект.План.Загрузить(ДанныеЗаполнения);
		УстановитьТекстГиперссылокОбеспечено();
		УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(ЭтаФорма);
		
	Иначе
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНоменклатурныйПланНаСервере()
	
	Объект.План.Очистить();
	УстановитьТекстГиперссылокОбеспечено();
	Итоги.Очистить();
	
	ЗаполнитьНоменклатурныйПланНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьДополнительныйОтборСтрокНоменклатурныйПлан(Форма)
	
	СтруктураОтбора = Новый Структура();
	
	Если Форма.ТолькоОтмеченные Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;
	
	Если Не Форма.ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеОтключен() Тогда
		СтруктураОтбора.Вставить("ЕстьОбеспечение", Форма.ФильтрОбеспечениеТекущееЗначение = ФильтрОбеспечениеОбеспечено());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Форма.Элементы.План.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		Форма.Элементы.План.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УстановитьТекстГиперссылокОбеспечено()
	
	КоличествоСтрок = Объект.План.Количество();
	
	Если КоличествоСтрок > 0 Тогда
		КоличествоОбеспечено   = Объект.План.НайтиСтроки(Новый Структура("ЕстьОбеспечение", Истина)).Количество();
		КоличествоНеОбеспечено = КоличествоСтрок - КоличествоОбеспечено;
	Иначе
		КоличествоОбеспечено   = 0;
		КоличествоНеОбеспечено = 0;
	КонецЕсли;
	
	Элементы.ГиперссылкаВсеИзделия.Заголовок   = НСтр("ru = 'Все позиции';
														|en = 'All items'");
	Элементы.ГиперссылкаОбеспечено.Заголовок   = СтрШаблон(НСтр("ru = 'Обеспечено (%1)';
																|en = 'Supplied (%1)'"), Формат(КоличествоОбеспечено, "ЧЦ=3; ЧН=; ЧГ="));
	Элементы.ГиперссылкаНеОбеспечено.Заголовок = СтрШаблон(НСтр("ru = 'Не обеспечено (%1)';
																|en = 'Not supplied (%1)'"), Формат(КоличествоНеОбеспечено, "ЧЦ=3; ЧН=; ЧГ="));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФильтрОбеспечениеОтключен()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФильтрОбеспечениеОбеспечено()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФильтрОбеспечениеНеОбеспечено()
	
	Возврат 2;
	
КонецФункции

#КонецОбласти

#Область РезультатФормирования

&НаКлиенте
Процедура ПерейтиКШагуРезультатФормированияНаКлиенте()
	
	СоздатьДокументыНаСервере();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	ОтменитьДлительнуюОперацию();
	
	ПоляГруппировки = Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство.СоставКолонокДляСозданияДокументов();
	
	СтруктураОтбора = Новый Структура("Отметка", Истина);
	
	ВыгруженнаяТаблица = Объект.План.Выгрузить(СтруктураОтбора, ПоляГруппировки + ",КПеремещению");
	ВыгруженнаяТаблица.Свернуть(ПоляГруппировки, "КПеремещению");
	
	АдресРезультатаФормированияЗаказов = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("АдресРезультатаФормированияЗаказов", АдресРезультатаФормированияЗаказов);
	ПараметрыПроцедуры.Вставить("ВариантОформления", Объект.ВариантОформления);
	ПараметрыПроцедуры.Вставить("ВыгруженнаяТаблица", ВыгруженнаяТаблица);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование перемещений: создание документов';
															|en = 'Transfer generation: document creation'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство.СоздатьДокументыОтложенно",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = "СоздатьДокументыОтложенноЗавершение";
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		СоздатьДокументыОтложенно(ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыОтложенноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	СоздатьДокументыОтложенно(Результат);
		
	Если Результат <> Неопределено И Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыОтложенно(Результат)
	
	СтруктураРезультата = ПолучитьИзВременногоХранилища(АдресРезультатаФормированияЗаказов);
	
	Если ЗначениеЗаполнено(СтруктураРезультата) Тогда // Задание прервалось до того, как было что-то записано
		
		УстановитьСтраницыПомощника(ЭтаФорма, "ШагРезультатФормирования");
		
		СозданныеОбъекты.ЗагрузитьЗначения(СтруктураРезультата.Документы);
		
		УстановитьНастройкиСпискаСозданныхДокументов();
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДокументы, "Документы", СтруктураРезультата.Документы);
		
		Для Каждого Ошибка Из СтруктураРезультата.Сообщения Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Текст, Ошибка.КлючДанных, Ошибка.Поле, Ошибка.ПутьКДанным);
		КонецЦикла;
		
		Если Результат = Неопределено Или Результат.Статус <> "Выполнено" Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Заказы были сформированы не полностью';
									|en = 'Orders were not fully generated'");
			Сообщение.Сообщить();
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСозданныеОбъекты(Отказ)
	
	МассивДокументов = СозданныеОбъекты.ВыгрузитьЗначения();
	СписокОшибок = ОбщегоНазначенияУТ.УстановитьПометкуУдаленияДокументов(МассивДокументов);
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПродолжитьСДругимиОтборамиНаСервере()
	
	Объект.План.Очистить();
	УстановитьТекстГиперссылокОбеспечено();
	Итоги.Очистить();
	
	СозданныеОбъекты.Очистить();
	
	УстановитьСтраницыПомощника(ЭтаФорма, "ШагОтбор");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Отборы

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство.ПолучитьМакет("НоменклатурныйПлан");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, ИмяПоля, Значение, ЭтоОтборПоГруппе = Ложь)
	
	// Отбор предопределенный в настройках СКД.
	ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементНайден = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
			
			ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
													ЭлементОтбора.ИдентификаторПользовательскойНастройки);
					
			Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
				
				ЭлементПользовательскойНастройки.Использование = (Значение <> Неопределено) И ЗначениеЗаполнено(Значение);
				Если ЭлементПользовательскойНастройки.Использование Тогда
					
					Если ЭтоОтборПоГруппе Тогда
						ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
					Иначе
						ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.Равно;
					КонецЕсли;
					
					ЭлементПользовательскойНастройки.ВидСравнения   = ВариантВидаСравнения;
					ЭлементПользовательскойНастройки.ПравоеЗначение = Значение;
					
				КонецЕсли;
				
				ЭлементНайден = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Отбор по подчиненным полям (поиск в добавляемых пользователем элементах отбора).
	Если Не ЭлементНайден Тогда
		
		ИдентификаторОтбора = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
		Отбор = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторОтбора);
		ЭлементОтбора = Неопределено;
		Для каждого СуществующийЭлементОтбора Из Отбор.Элементы Цикл
			
			Если Строка(СуществующийЭлементОтбора.ЛевоеЗначение) = ИмяПоля Тогда
				ЭлементОтбора = СуществующийЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.Использование  = ЗначениеЗаполнено(Значение);
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.ПравоеЗначение = Значение;
		
		ЭлементОтбора.ВидСравнения   = ?(ЭтоОтборПоГруппе, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтразитьОтборКомпоновкиВПростыхОтборах()
	
	// Поиск в добавляемых пользователем элементах отбора.
	
	ИдентификаторОтбора = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	Отбор = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторОтбора);

	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ЭлементОтбора.Использование Тогда 
			Возврат Ложь;
		КонецЕсли;
	
	КонецЦикла;

	ПростыеОтборы = "СкладПолучатель, СкладОтправитель, НаправлениеДеятельности, Назначение, Склад, Номенклатура, ЗаказНаПроизводство";
	
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		
		Если ЭлементПользовательскойНастройки <> Неопределено
			 И ЭлементПользовательскойНастройки.Использование
			 И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			 И Не СтрНайти(ПростыеОтборы, ЭлементОтбора.ЛевоеЗначение) > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ЭлементПользовательскойНастройки <> Неопределено
			 И ЭлементПользовательскойНастройки.Использование
			 И ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			 И ЭлементОтбора.Представление <> ГруппаПериодПеремещенияПредставление() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
				Если Не ЭлементПользовательскойНастройки.Использование
					И ЭлементОтбора.Представление = ГруппаПериодПеремещенияПредставление() Тогда
					ПериодПеремещения = Новый СтандартныйПериод();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				
				ЗаполнитьПростойОтбор(ОтборПоСкладуПолучателю,
					"СкладПолучатель", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"),
					ЭлементОтбора, ЭлементПользовательскойНастройки);
				
				ЗаполнитьПростойОтбор(ОтборПоСкладуОтправителю,
					"СкладОтправитель", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"),
					ЭлементОтбора, ЭлементПользовательскойНастройки);
				
				ЗаполнитьПростойОтбор(ОтборПоНаправлениюДеятельности,
					"НаправлениеДеятельности", ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"),
					ЭлементОтбора, ЭлементПользовательскойНастройки);
				
				ЗаполнитьПростойОтбор(ОтборПоНазначению,
					"Назначение", ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"),
					ЭлементОтбора, ЭлементПользовательскойНастройки);
				
				ЗаполнитьПростойОтбор(ОтборПоНоменклатуре,
					"Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
					ЭлементОтбора, ЭлементПользовательскойНастройки);
				
				ЗаполнитьПростойОтбор(ОтборПоЗаказу,
					"ЗаказНаПроизводство", ПредопределенноеЗначение("Документ.ЗаказНаПроизводство2_2.ПустаяСсылка"),
					ЭлементОтбора, ЭлементПользовательскойНастройки);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПростойОтбор(РеквизитФормы, ИмяПоля, ЗначениеПоУмолчанию, ЭлементОтбора, ЭлементПользовательскойНастройки)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Если ПолеКомпоновки = ЭлементОтбора.ЛевоеЗначение Тогда
		
		РеквизитФормы = ?(ЭлементПользовательскойНастройки.Использование,
			ЭлементПользовательскойНастройки.ПравоеЗначение, ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериодуПеремещения()
	
	ДатаНачала    = ПериодПеремещения.ДатаНачала;
	ДатаОкончания = ПериодПеремещения.ДатаОкончания;
	
	ПолеОтбора = "";
	
	Если ВариантПериода = 0 Тогда
		ПолеОтбора = "ДатаНачала";
	Иначе
		ПолеОтбора = "ДатаОкончания";
	КонецЕсли;
	
	Для Каждого Группа Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(Группа) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
			И Группа.Элементы.Количество() > 0 Тогда
			Для Каждого Элемент Из Группа.Элементы Цикл
					
					Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора);
					
					Если Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
						ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
						
						Элемент.ПравоеЗначение = ДатаНачала;
						Элемент.Использование = ЗначениеЗаполнено(ДатаНачала);
						
					ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
						ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
							
						Элемент.ПравоеЗначение = ДатаОкончания;
						Элемент.Использование = ЗначениеЗаполнено(ДатаОкончания);
							
					КонецЕсли;
					
			КонецЦикла;
			
			Группа.Использование = ЗначениеЗаполнено(ДатаНачала) ИЛИ ЗначениеЗаполнено(ДатаОкончания);
			
			ПользовательскаяГруппа = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Группа.ИдентификаторПользовательскойНастройки);
			ПользовательскаяГруппа.Использование = Группа.Использование;
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		КомпоновщикНастроек.Настройки.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ГруппаИ.Представление = ГруппаПериодПеремещенияПредставление();
	ГруппаИ.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор();
	
	ДополнительныеПараметры = Новый Структура("ВПользовательскиеНастройки, ЗаменятьСуществующий", Ложь, Ложь);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		ГруппаИ,
		ПолеОтбора,
		ДатаНачала,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		ЗначениеЗаполнено(ДатаНачала),
		ДополнительныеПараметры);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		ГруппаИ,
		ПолеОтбора,
		ДатаОкончания,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		ЗначениеЗаполнено(ДатаОкончания),
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ГруппаПериодПеремещенияПредставление()
	
	Возврат НСтр("ru = 'Период начала / окончания';
				|en = 'Start / end period'");
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()

	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеПеремещенийПоЗаказамНаПроизводство", "КомпоновщикОтборов");

	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВариантОформления) Тогда
		Объект.ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользовательскиеНастройкиПоУмолчанию()
	
	СхемаКомпоновкиДанных = Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство.ПолучитьМакет("НоменклатурныйПлан");
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;

КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиПоУмолчанию());
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницыПомощника(Форма, ИмяШага)
	
	Элементы = Форма.Элементы;
	
	Если ИмяШага = "ШагОтбор" Тогда

		Элементы.НадписьШаг.Заголовок = НСтр("ru = 'Шаг 1 из 3. Отбор';
											|en = 'Step 1 of 3. Filter'");
		
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		
		Элементы.Далее.Видимость = Истина;
		Элементы.Назад.Видимость = Ложь;
		
		Элементы.ПродолжитьСДругимиОтборами.Видимость = Ложь;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагОтбор;
	
	ИначеЕсли ИмяШага = "ШагНоменклатурныйПлан" Тогда

		Элементы.НадписьШаг.Заголовок = НСтр("ru = 'Шаг 2 из 3. Определение состава и объема перемещений';
											|en = 'Step 2 of 3. Decide what to transfer and how much'");
		
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		
		Элементы.Далее.Видимость = Истина;
		Элементы.Назад.Видимость = Истина;
		
		Элементы.ПродолжитьСДругимиОтборами.Видимость = Ложь;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагНоменклатурныйПлан;

	ИначеЕсли ИмяШага = "ШагРезультатФормирования" Тогда

		Элементы.НадписьШаг.Заголовок = НСтр("ru = 'Шаг 3 из 3. Уточнение сформированных документов';
											|en = 'Step 3 of 3. Specify generated documents'");
		
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.Далее.Видимость = Ложь;
		Элементы.Назад.Видимость = Истина;
		
		Элементы.ПродолжитьСДругимиОтборами.Видимость = Истина;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ШагРезультатФормирования;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьДлительнуюОперацию()
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперации(ВыводитьОкноОжидания = Истина)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ОбработчикОжиданияДлительнойОперации, ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			ПараметрыОжидания);
	
	НачатьОжиданиеДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиКомпоновщикаОтборов()
	
	Настройки = Новый Структура();
	Настройки.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ФормированиеПеремещенийПоЗаказамНаПроизводство", "КомпоновщикОтборов", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	// Настройка формы по правам доступа.
	СтруктураДоступа = Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство.СтруктураДоступа();
	
	Если Не СтруктураДоступа.ЗаказНаПеремещениеДоступен И Не СтруктураДоступа.ЗаказМатериаловДоступен Тогда
		ИскомыйЭлемент = Элементы.ВариантОформления.СписокВыбора.НайтиПоЗначению(
			Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение);
		Элементы.ВариантОформления.СписокВыбора.Удалить(ИскомыйЭлемент);
	КонецЕсли;
	
	Если Не СтруктураДоступа.ПеремещениеДоступно И Не СтруктураДоступа.ПередачаМатериаловДоступна Тогда
		ИскомыйЭлемент = Элементы.ВариантОформления.СписокВыбора.НайтиПоЗначению(
			Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров);
		Элементы.ВариантОформления.СписокВыбора.Удалить(ИскомыйЭлемент);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);

	Если СтруктураРеквизитов.Свойство("ФильтрОбеспечение")
		ИЛИ Инициализация Тогда
		
		Форма.Элементы.ГиперссылкаВсеИзделия.ЦветТекста = ?(Форма.ФильтрОбеспечениеТекущееЗначение <> ФильтрОбеспечениеОтключен(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Форма.Элементы.ГиперссылкаОбеспечено.ЦветТекста = ?(Форма.ФильтрОбеспечениеТекущееЗначение <> ФильтрОбеспечениеОбеспечено(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Форма.Элементы.ГиперссылкаНеОбеспечено.ЦветТекста = ?(Форма.ФильтрОбеспечениеТекущееЗначение <> ФильтрОбеспечениеНеОбеспечено(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФлажкиВВыделенныхСтроках(Знач Значение, Знач ИдентификаторыСтрок, ИмяТаблицы = "")
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки).Отметка = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКПеремещениюВВыделенныхСтроках(Знач ИмяКолонкиИсточникКоличества, Знач ИдентификаторыСтрок)
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		Строка = Объект.План.НайтиПоИдентификатору(ИдентификаторСтроки);
		Строка.КПеремещению = Строка[ИмяКолонкиИсточникКоличества];
		Строка.Отметка = Строка.КПеремещению > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(Команда)
	
	МассивСсылок = Новый Массив();
	
	Для Каждого Строка Из Элементы.СписокДокументы.ВыделенныеСтроки Цикл
		
		СсылкаНаДокумент = Элементы.СписокДокументы.ДанныеСтроки(Строка).Ссылка;
		МассивСсылок.Добавить(СсылкаНаДокумент);
		
	КонецЦикла;
	ЗаписатьНаСервере(МассивСсылок, Команда.Имя);
	Элементы.СписокДокументы.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере(МассивСсылок, Действие)
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru = 'Не удалось заблокировать %Документ%. %ОписаниеОшибки%';
										|en = 'Failed to lock %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
										|en = 'Failed to save %Документ%. %ОписаниеОшибки%'");
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
			Продолжить;
		КонецПопытки;
		
		// Получение объекта документа
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		// Запись документа
		Попытка
			
			Если Действие = "Провести" Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ИначеЕсли Действие = "ОтменаПроведения" Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ИначеЕсли Действие = "ПометитьНаУдаление" Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Не ДокументОбъект.ПометкаУдаления);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(Команда)
	
	ТипДокумента = Неопределено;
	
	Если Команда = Команды.УстановитьСтатусПеремещенийТоваровОтгружено.Имя Тогда
		
		ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров");
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Отгружено");
		
	ИначеЕсли Команда = Команды.УстановитьСтатусПеремещенийТоваровПринято.Имя Тогда
		
		ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров");
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Принято");
		
	КонецЕсли;
	
	МассивСсылок = Новый Массив();
	
	Для Каждого Строка Из Элементы.СписокДокументы.ВыделенныеСтроки Цикл
		
		СсылкаНаДокумент = Элементы.СписокДокументы.ДанныеСтроки(Строка).Ссылка;
		Если ТипЗнч(СсылкаНаДокумент) = ТипДокумента Тогда
			
			МассивСсылок.Добавить(СсылкаНаДокумент);
			
		КонецЕсли;
		
	КонецЦикла;
	УстановитьСтатусНаСервере(МассивСсылок, Статус);
	Элементы.СписокДокументы.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусНаСервере(МассивСсылок, Статус)
	
	Статус = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Статус).Индекс(Статус);
	ВсегоСсылок = МассивСсылок.Количество();
	
	Для Счетчик = 1 По ВсегоСсылок Цикл
		
		ТекущийЭлементМассива = МассивСсылок[ВсегоСсылок - Счетчик];
		Если СозданныеОбъекты.НайтиПоЗначению(ТекущийЭлементМассива) = Неопределено Тогда
		
			МассивСсылок.Удалить(ТекущийЭлементМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСтатусПоМассивуСсылок(МассивСсылок, Статус);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусПоМассивуСсылок(МассивСсылок, Статус)
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru = 'Не удалось заблокировать %Документ%. %ОписаниеОшибки%';
										|en = 'Failed to lock %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
										|en = 'Failed to save %Документ%. %ОписаниеОшибки%'");

	Для Каждого Ссылка Из МассивСсылок Цикл
		
		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
			Продолжить;
		КонецПопытки;
		
		// Получение объекта документа
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		// Установка статуса документа
		Если Не ДокументОбъект.УстановитьСтатус(Статус, Неопределено) Тогда
			Продолжить;
		КонецЕсли;
			
		// Запись документа
		Попытка
			
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСпискаСозданныхДокументов()
	
	УстановитьТекстЗапросаДинамическогоСпискаСозданныхДокументов();
	
	УстановитьВидимостьКомандСозданныхДокументов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандСозданныхДокументов()
	
	МассивТипов = Новый Массив();
	
	Для Каждого Элемент Из СозданныеОбъекты Цикл
		
		ТипДокумента = ТипЗнч(Элемент.Значение);
		
		Если МассивТипов.Найти(ТипДокумента) = Неопределено Тогда
			МассивТипов.Добавить(ТипДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из Элементы.ГруппаУстановитьСтатус.ПодчиненныеЭлементы Цикл
		Элемент.Видимость = Ложь;
	КонецЦикла;
	
	ВсегоТипов = 0;
	ИменаДокументов = Новый Массив();
	
	ИменаДокументов.Добавить(НСтр("ru = 'Перемещение товаров:';
									|en = 'Goods transfer:'"));
	ВидимостьСтатусов = МассивТипов.Найти(Тип("ДокументСсылка.ПеремещениеТоваров")) <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров");
	ВсегоТипов = ВсегоТипов + ?(ВидимостьСтатусов, 1, 0);
	
	Элементы.УстановитьСтатусПеремещенийТоваровОтгружено.Видимость = ВидимостьСтатусов;
	Элементы.УстановитьСтатусПеремещенийТоваровПринято.Видимость   = ВидимостьСтатусов;
	
	ИменаДокументов.Добавить(НСтр("ru = 'Заказ на перемещение:';
									|en = 'Transfer order:'"));
	ВидимостьСтатусов = МассивТипов.Найти(Тип("ДокументСсылка.ЗаказНаПеремещение")) <> Неопределено
		И Документы.ЗаказНаПеремещение.ИспользоватьСтатусы();
	ВсегоТипов = ВсегоТипов + ?(ВидимостьСтатусов, 1, 0);
	
	Элементы.УстановитьСтатусЗаказовНаПеремещениеКОбеспечению.Видимость = ВидимостьСтатусов;
	Элементы.УстановитьСтатусЗаказовНаПеремещениеКВыполнению.Видимость  = ВидимостьСтатусов;
	
	ИменаДокументов.Добавить(НСтр("ru = 'Передача материалов:';
									|en = 'Material transfer:'"));
	ВидимостьСтатусов = МассивТипов.Найти(Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов")) <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыДвиженийПродукцииИМатериалов");
	ВсегоТипов = ВсегоТипов + ?(ВидимостьСтатусов, 1, 0);
	
	Элементы.УстановитьСтатусПередачМатериаловОтгружено.Видимость = ВидимостьСтатусов;
	Элементы.УстановитьСтатусПередачМатериаловПринято.Видимость   = ВидимостьСтатусов;
	
	ИменаДокументов.Добавить(НСтр("ru = 'Заказ материалов:';
									|en = 'Order materials:'"));
	ВидимостьСтатусов = МассивТипов.Найти(Тип("ДокументСсылка.ЗаказМатериаловВПроизводство")) <> Неопределено;
	ВсегоТипов = ВсегоТипов + ?(ВидимостьСтатусов, 1, 0);
	
	Элементы.УстановитьСтатусЗаказовМатериаловКОбеспечению.Видимость = ВидимостьСтатусов;
	Элементы.УстановитьСтатусЗаказовМатериаловКВыполнению.Видимость  = ВидимостьСтатусов;
	
	Для Каждого ЭлементФормы Из Элементы.ГруппаУстановитьСтатус.ПодчиненныеЭлементы Цикл
		
		КомандаФормы = Команды[ЭлементФормы.ИмяКоманды]; // КомандаФормы -
		ЗаголовокКоманды = КомандаФормы.Заголовок;
		
		Если ВсегоТипов = 1 Тогда
			Для Каждого ИмяДокумента Из ИменаДокументов Цикл
				ЗаголовокКоманды = СокрЛП(СтрЗаменить(ЗаголовокКоманды, ИмяДокумента, ""));
			КонецЦикла;
		КонецЕсли;
		
		ЭлементФормы.Заголовок = ЗаголовокКоманды;
		
	КонецЦикла;
	
	Элементы.СписокДокументыСтатус.Видимость = ВсегоТипов > 0;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаДинамическогоСпискаСозданныхДокументов()
	
	СтруктураДоступа = Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство.СтруктураДоступа();
	ТекстЗапроса = "";
	
	ТекущийВариантОформления = Объект.ВариантОформления;
	
	Если ТекущийВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров
			И СтруктураДоступа.ПеремещениеДоступно Тогда
		
		ДобавитьСекциюОбъединения(ТекстЗапроса);
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА ПеремещениеТоваровПереопределяемый.Проведен ТОГДА
			|				1
			|			КОГДА ПеремещениеТоваровПереопределяемый.ПометкаУдаления ТОГДА
			|				2
			|			ИНАЧЕ
			|				0
			|		КОНЕЦ                                                  КАК КартинкаСтроки,
			|	ПеремещениеТоваровПереопределяемый.Ссылка                  КАК Ссылка,
			|	ПеремещениеТоваровПереопределяемый.ПометкаУдаления         КАК ПометкаУдаления,
			|	ПеремещениеТоваровПереопределяемый.Номер                   КАК Номер,
			|	ПеремещениеТоваровПереопределяемый.Дата                    КАК Дата,
			|	ПеремещениеТоваровПереопределяемый.Проведен                КАК Проведен,
			|	ПеремещениеТоваровПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ПеремещениеТоваровПереопределяемый.Организация             КАК Организация,
			|	ПеремещениеТоваровПереопределяемый.ОрганизацияПолучатель   КАК ОрганизацияПолучатель,
			|	ПеремещениеТоваровПереопределяемый.Ответственный           КАК Ответственный,
			|	ПеремещениеТоваровПереопределяемый.Подразделение           КАК Подразделение,
			|	ПеремещениеТоваровПереопределяемый.СкладОтправитель        КАК СкладОтправитель,
			|	ПеремещениеТоваровПереопределяемый.СкладПолучатель         КАК СкладПолучатель,
			|	ПеремещениеТоваровПереопределяемый.Статус                  КАК Статус
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваровПереопределяемый
			|ГДЕ
			|	ПеремещениеТоваровПереопределяемый.Ссылка В(&Документы)";
			
	КонецЕсли;
	
	Если ТекущийВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров
			И СтруктураДоступа.ПередачаМатериаловДоступна Тогда
		
		ДобавитьСекциюОбъединения(ТекстЗапроса);
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА ДвижениеПродукцииИМатериаловПереопределяемый.Проведен ТОГДА
			|				1
			|			КОГДА ДвижениеПродукцииИМатериаловПереопределяемый.ПометкаУдаления ТОГДА
			|				2
			|			ИНАЧЕ
			|				0
			|		КОНЕЦ                                                            КАК КартинкаСтроки,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Ссылка                  КАК Ссылка,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.ПометкаУдаления         КАК ПометкаУдаления,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Номер                   КАК Номер,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Дата                    КАК Дата,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Проведен                КАК Проведен,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Организация             КАК Организация,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Организация             КАК ОрганизацияПолучатель,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Ответственный           КАК Ответственный,
			|	ВЫРАЗИТЬ(ДвижениеПродукцииИМатериаловПереопределяемый.Получатель
			|		КАК Справочник.Склады).Подразделение                             КАК Подразделение,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Отправитель             КАК СкладОтправитель,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Получатель              КАК СкладПолучатель,
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Статус                  КАК Статус
			|ИЗ
			|	Документ.ДвижениеПродукцииИМатериалов КАК ДвижениеПродукцииИМатериаловПереопределяемый
			|ГДЕ
			|	ДвижениеПродукцииИМатериаловПереопределяемый.Ссылка В(&Документы)";
		
	КонецЕсли;
	
	Если ТекущийВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение
			И СтруктураДоступа.ЗаказНаПеремещениеДоступен Тогда
		
		ДобавитьСекциюОбъединения(ТекстЗапроса);
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА ЗаказНаПеремещениеПереопределяемый.Проведен ТОГДА
			|				1
			|			КОГДА ЗаказНаПеремещениеПереопределяемый.ПометкаУдаления ТОГДА
			|				2
			|			ИНАЧЕ
			|				0
			|		КОНЕЦ                                                  КАК КартинкаСтроки,
			|	ЗаказНаПеремещениеПереопределяемый.Ссылка                  КАК Ссылка,
			|	ЗаказНаПеремещениеПереопределяемый.ПометкаУдаления         КАК ПометкаУдаления,
			|	ЗаказНаПеремещениеПереопределяемый.Номер                   КАК Номер,
			|	ЗаказНаПеремещениеПереопределяемый.Дата                    КАК Дата,
			|	ЗаказНаПеремещениеПереопределяемый.Проведен                КАК Проведен,
			|	ЗаказНаПеремещениеПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ЗаказНаПеремещениеПереопределяемый.Организация             КАК Организация,
			|	ЗаказНаПеремещениеПереопределяемый.ОрганизацияПолучатель   КАК ОрганизацияПолучатель,
			|	ЗаказНаПеремещениеПереопределяемый.Ответственный           КАК Ответственный,
			|	ЗаказНаПеремещениеПереопределяемый.Подразделение           КАК Подразделение,
			|	ЗаказНаПеремещениеПереопределяемый.СкладОтправитель        КАК СкладОтправитель,
			|	ЗаказНаПеремещениеПереопределяемый.СкладПолучатель         КАК СкладПолучатель,
			|	ЗаказНаПеремещениеПереопределяемый.Статус                  КАК Статус
			|ИЗ
			|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещениеПереопределяемый
			|ГДЕ
			|	ЗаказНаПеремещениеПереопределяемый.Ссылка В(&Документы)";
		
	КонецЕсли;
	
	Если ТекущийВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение
			И СтруктураДоступа.ЗаказМатериаловДоступен Тогда
		
		ДобавитьСекциюОбъединения(ТекстЗапроса);
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА ЗаказМатериаловПереопределяемый.Проведен ТОГДА
			|				1
			|			КОГДА ЗаказМатериаловПереопределяемый.ПометкаУдаления ТОГДА
			|				2
			|			ИНАЧЕ
			|				0
			|		КОНЕЦ                                               КАК КартинкаСтроки,
			|	ЗаказМатериаловПереопределяемый.Ссылка                  КАК Ссылка,
			|	ЗаказМатериаловПереопределяемый.ПометкаУдаления         КАК ПометкаУдаления,
			|	ЗаказМатериаловПереопределяемый.Номер                   КАК Номер,
			|	ЗаказМатериаловПереопределяемый.Дата                    КАК Дата,
			|	ЗаказМатериаловПереопределяемый.Проведен                КАК Проведен,
			|	ЗаказМатериаловПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ЗаказМатериаловПереопределяемый.Организация             КАК Организация,
			|	ЗаказМатериаловПереопределяемый.Организация             КАК ОрганизацияПолучатель,
			|	ЗаказМатериаловПереопределяемый.Ответственный           КАК Ответственный,
			|	ЗаказМатериаловПереопределяемый.Подразделение           КАК Подразделение,
			|	ЗаказМатериаловПереопределяемый.Склад                   КАК СкладОтправитель,
			|	ЗаказМатериаловПереопределяемый.ЦеховаяКладовая         КАК СкладПолучатель,
			|	ЗаказМатериаловПереопределяемый.Статус                  КАК Статус
			|ИЗ
			|	Документ.ЗаказМатериаловВПроизводство КАК ЗаказМатериаловПереопределяемый
			|ГДЕ
			|	ЗаказМатериаловПереопределяемый.Ссылка В(&Документы)";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА ПеремещениеТоваровПереопределяемый.Проведен ТОГДА
		|				1
		|			КОГДА ПеремещениеТоваровПереопределяемый.ПометкаУдаления ТОГДА
		|				2
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ                                                  КАК КартинкаСтроки,
		|	ПеремещениеТоваровПереопределяемый.Ссылка                  КАК Ссылка,
		|	ПеремещениеТоваровПереопределяемый.ПометкаУдаления         КАК ПометкаУдаления,
		|	ПеремещениеТоваровПереопределяемый.Номер                   КАК Номер,
		|	ПеремещениеТоваровПереопределяемый.Дата                    КАК Дата,
		|	ПеремещениеТоваровПереопределяемый.Проведен                КАК Проведен,
		|	ПеремещениеТоваровПереопределяемый.Организация             КАК Организация,
		|	ПеремещениеТоваровПереопределяемый.ОрганизацияПолучатель   КАК ОрганизацияПолучатель,
		|	ПеремещениеТоваровПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ПеремещениеТоваровПереопределяемый.Ответственный           КАК Ответственный,
		|	ПеремещениеТоваровПереопределяемый.Подразделение           КАК Подразделение,
		|	ПеремещениеТоваровПереопределяемый.СкладОтправитель        КАК СкладОтправитель,
		|	ПеремещениеТоваровПереопределяемый.СкладПолучатель         КАК СкладПолучатель,
		|	ПеремещениеТоваровПереопределяемый.Статус                  КАК Статус
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваровПереопределяемый
		|ГДЕ
		|	ПеремещениеТоваровПереопределяемый.Ссылка В(&Документы)";
		
	КонецЕсли;
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, СписокДокументы);
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокДокументы, СвойстваСписка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСекциюОбъединения(ТекстЗапроса)
	
	Если ТекстЗапроса <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
