#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область НоменклатурныйПлан

Процедура ПолучитьНоменклатурныйПланОтложенно(Параметры, АдресХранилища) Экспорт

	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Формирование перемещений: переход к номенклатурному плану");
	
	ПозицииПлана = ПозицииПланаВнутриЗамераВремени(Параметры);
	
	ПоместитьВоВременноеХранилище(ПозицииПлана, АдресХранилища);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ПозицииПлана.Количество());
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументов

Процедура СоздатьДокументыОтложенно(Параметры, АдресХранилища) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Формирование перемещений: создание документов");
	
	РезультатВыполнения = СоздатьДокументыОтложенноВнутриЗамераВремени(Параметры);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, РезультатВыполнения.Документы.Количество());
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СтруктураДоступа() Экспорт
	
	ВариантОбособленияВПеремещении = Константы.ВариантОбособленияТоваровВПеремещении.Получить();
	
	ВариантОбособленияПриПередаче  = Константы.ВариантОбособленияМатериаловПриПередачеВПроизводство.Получить();
	
	ЗаказНаПеремещениеДоступен = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
		И ВариантОбособленияВПеремещении = Перечисления.ВариантыОбособленияТоваровВПеремещении.НазначениеПолучателя
		И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение);
		
	ЗаказМатериаловДоступен = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")
		И ВариантОбособленияПриПередаче = Перечисления.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НазначениеПолучателя
		И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказМатериаловВПроизводство);
	
	ПеремещениеДоступно = ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров")
		И ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеТоваров);
		
	ПередачаМатериаловДоступна = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")
		И ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов);
	
	СтруктураДоступа = Новый Структура;
	СтруктураДоступа.Вставить("ЗаказНаПеремещениеДоступен", ЗаказНаПеремещениеДоступен);
	СтруктураДоступа.Вставить("ЗаказМатериаловДоступен",    ЗаказМатериаловДоступен);
	СтруктураДоступа.Вставить("ПеремещениеДоступно",        ПеремещениеДоступно);
	СтруктураДоступа.Вставить("ПередачаМатериаловДоступна", ПередачаМатериаловДоступна);
	
	Возврат СтруктураДоступа;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НоменклатурныйПлан

Процедура НоменклатурныйПланВМенеджерВременныхТаблиц(МенеджерВременныхТаблиц, НастройкиДляОтборов) Экспорт

	СхемаКомпоновкиДанных = Обработки.ФормированиеПеремещенийПоЗаказамНаПроизводство.ПолучитьМакет("НоменклатурныйПлан");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиДляОтборов);
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
		СхемаКомпоновкиДанных,
		КомпоновщикНастроек.ПолучитьНастройки()
		,
		,
		,
		,
		Ложь);
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1];
	ЗапросВыбора.ТаблицаДляПомещения = "НоменклатурныйПлан";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Поле = ЗапросВыбора.Операторы[0].ВыбираемыеПоля.Добавить(
			"ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
		ЗапросВыбора.Колонки.Найти(Поле).Псевдоним = "Характеристика";
	КонецЕсли;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для каждого ПараметрКомпоновки Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
	КонецЦикла;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПозицииПланаВнутриЗамераВремени(Параметры)

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	НоменклатурныйПланВМенеджерВременныхТаблиц(МенеджерВременныхТаблиц, Параметры.Настройки);

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"" + Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь) +
	"ВЫБРАТЬ
	|	
	|	ПП.Номенклатура         КАК Номенклатура,
	|	ПП.Характеристика       КАК Характеристика,
	|	ПП.Назначение           КАК Назначение,
	|
	|	ПП.СкладПолучатель      КАК СкладПолучатель,
	|	ПП.СкладОтправитель     КАК СкладОтправитель,
	|
	|	ПП.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|
	|	ПП.ДатаНачала          КАК ДатаНачала,
	|	ПП.ДатаОкончания       КАК ДатаОкончания,
	|
	|	ПП.Требуется КАК Требуется,
	|
	|	ПП.Доступно > 0 КАК ЕстьОбеспечение,
	|	ПП.Доступно КАК Обеспечено,
	|	ПП.Доступно КАК КПеремещению,
	|
	|	ПП.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|
	|	ПП.ЗаказНаПроизводство.Организация             КАК Организация,
	|	ПП.ЗаказНаПроизводство.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ISNULL(ОсновнойСпособОбеспечения.ДлительностьВДнях, 0) КАК ДлительностьПеремещения
	|
	|ИЗ
	|	НоменклатурныйПлан КАК ПП
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК ОсновнойСпособОбеспечения
	|		ПО &ПодстановкаОсновногоСпособаОбеспечения
	|
	|УПОРЯДОЧИТЬ ПО
	|
	|	ПП.ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
	|	ПП.ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
	|	ПП.ЗаказНаПроизводство.Очередь,
	|	ПП.ДатаНачала
	|
	|";
	
	ПоляСоединения = "ПП.Номенклатура, ПП.Характеристика, ПП.СкладПолучатель";
	ИмяПараметра   = "ПодстановкаОсновногоСпособаОбеспечения";
	
	Запрос.Текст = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
		Запрос.Текст, ИмяПараметра, ПоляСоединения);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

Функция СоздатьДокументыОтложенноВнутриЗамераВремени(Параметры) Экспорт
	
	Результат = Новый Структура("Документы, Сообщения", Новый Массив(), Новый Массив());
	
	ВариантОформления = Параметры.ВариантОформления;
	ВыгруженнаяТаблица = Параметры.ВыгруженнаяТаблица; // ТаблицаЗначений
	
	ВыгруженнаяТаблица.Колонки.Добавить("НачалоОтгрузки", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ВыгруженнаяТаблица.Колонки.Добавить("ОкончаниеПоступления", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ВыгруженнаяТаблица.Колонки.Добавить("ВариантОбеспечения");
	ВыгруженнаяТаблица.Колонки.Добавить("Обособленно");
	ВыгруженнаяТаблица.Колонки.Добавить("Количество");
	ВыгруженнаяТаблица.Колонки.Добавить("КоличествоУпаковок");
	
	НачалоОтгрузки = НачалоДня(ТекущаяДатаСеанса());
	ДлительностьСуток = 3600 * 24;
	Для Каждого СтрокаТаблицы Из ВыгруженнаяТаблица Цикл
		
		СтрокаТаблицы.Обособленно = НЕ СтрокаТаблицы.Назначение.Пустая();
		СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		СтрокаТаблицы.НачалоОтгрузки       = НачалоОтгрузки;
		СтрокаТаблицы.ОкончаниеПоступления = НачалоОтгрузки + ДлительностьСуток * СтрокаТаблицы.ДлительностьПеремещения;
		СтрокаТаблицы.Количество = СтрокаТаблицы.КПеремещению;
		СтрокаТаблицы.КоличествоУпаковок = СтрокаТаблицы.КПеремещению;
		
	КонецЦикла;
	
	ПоляКлюча = "СкладОтправитель,СкладПолучатель,НаправлениеДеятельности,Организация";
	ВыгруженнаяТаблица.Сортировать(ПоляКлюча, Новый СравнениеЗначений);
	
	РезультатРазбиения = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ВыгруженнаяТаблица, ПоляКлюча, ПоляКлюча);
	
	СтруктураДоступа = Обработки.УправлениеПеремещениемОбособленныхТоваров.СтруктураДоступа();
	
	Кладовые = Новый Соответствие();
	//++ НЕ УТ
	Кладовые = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВыгруженнаяТаблица.ВыгрузитьКолонку("СкладПолучатель"), "ЦеховаяКладовая");
	//-- НЕ УТ
	
	Если ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение Тогда
		
		Для Каждого Элемент Из РезультатРазбиения Цикл
			
			Если СтруктураДоступа.ЗаказМатериаловДоступен И Кладовые.Получить(Элемент.Ключ.СкладПолучатель) = Истина Тогда
				
				ДанныеЗаполненияДокумента = Новый Структура("Склад,ЦеховаяКладовая,НаправлениеДеятельности,Организация,Товары");
				ДанныеЗаполненияДокумента.Склад                   = Элемент.Ключ.СкладОтправитель;
				ДанныеЗаполненияДокумента.ЦеховаяКладовая         = Элемент.Ключ.СкладПолучатель;
				ДанныеЗаполненияДокумента.НаправлениеДеятельности = Элемент.Ключ.НаправлениеДеятельности;
				ДанныеЗаполненияДокумента.Организация             = Элемент.Ключ.Организация;
				ДанныеЗаполненияДокумента.Товары = Элемент.Таблица;
				
				ДокументОбъект = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
					Документы.ЗаказМатериаловВПроизводство,
					ДанныеЗаполненияДокумента,
					Перечисления.СтатусыЗаказовМатериаловВПроизводство.КВыполнению,
					Результат.Сообщения);
				
			Иначе
				
				ДанныеЗаполненияДокумента = Новый Структура("СкладОтправитель,СкладПолучатель,НаправлениеДеятельности,Организация,Товары");
				ЗаполнитьЗначенияСвойств(ДанныеЗаполненияДокумента, Элемент.Ключ);
				ДанныеЗаполненияДокумента.Товары = Элемент.Таблица;
				
				ДокументОбъект = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
					Документы.ЗаказНаПеремещение,
					ДанныеЗаполненияДокумента,
					Перечисления.СтатусыВнутреннихЗаказов.КВыполнению,
					Результат.Сообщения);
				
			КонецЕсли;
			
			Результат.Документы.Добавить(ДокументОбъект.Ссылка);
			ПоместитьВоВременноеХранилище(Результат, Параметры.АдресРезультатаФормированияЗаказов);
			
		КонецЦикла;
		
	ИначеЕсли ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров Тогда
		
		Для Каждого Элемент Из РезультатРазбиения Цикл
			
			Если СтруктураДоступа.ПередачаМатериаловДоступна И Кладовые.Получить(Элемент.Ключ.СкладПолучатель) = Истина Тогда
				
				РеквизитыШапки = Новый Структура;
				РеквизитыШапки.Вставить("Отправитель",             Элемент.Ключ.СкладОтправитель);
				РеквизитыШапки.Вставить("Получатель",              Элемент.Ключ.СкладПолучатель);
				РеквизитыШапки.Вставить("НаправлениеДеятельности", Элемент.Ключ.НаправлениеДеятельности);
				РеквизитыШапки.Вставить("Организация",             Элемент.Ключ.Организация);
				РеквизитыШапки.Вставить("Дата",                    ТекущаяДатаСеанса());
				РеквизитыШапки.Вставить("ХозяйственнаяОперация",   Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
				
				ДанныеЗаполненияДокумента = Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, Элемент.Таблица);
				
				ДокументОбъект = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
					Документы.ДвижениеПродукцииИМатериалов,
					ДанныеЗаполненияДокумента,
					Перечисления.СтатусыДвиженияПродукцииИМатериалов.Отгружено,
					Результат.Сообщения);
				
			Иначе
				
				ДанныеЗаполненияДокумента = Новый Структура("СкладОтправитель,СкладПолучатель,НаправлениеДеятельности,Организация,Товары");
				ЗаполнитьЗначенияСвойств(ДанныеЗаполненияДокумента, Элемент.Ключ);
				ДанныеЗаполненияДокумента.Товары = Элемент.Таблица;
				
				ДокументОбъект = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
					Документы.ПеремещениеТоваров,
					ДанныеЗаполненияДокумента,
					Перечисления.СтатусыПеремещенийТоваров.Отгружено,
					Результат.Сообщения);
				
			КонецЕсли;
			
			Результат.Документы.Добавить(ДокументОбъект.Ссылка);
			ПоместитьВоВременноеХранилище(Результат, Параметры.АдресРезультатаФормированияЗаказов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СоставКолонокДляСозданияДокументов() Экспорт
	
	Возврат "
		|СкладПолучатель,
		|СкладОтправитель,
		|НаправлениеДеятельности,
		|Организация,
		|Номенклатура,
		|Характеристика,
		|Назначение,
		|ДлительностьПеремещения
		|";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
