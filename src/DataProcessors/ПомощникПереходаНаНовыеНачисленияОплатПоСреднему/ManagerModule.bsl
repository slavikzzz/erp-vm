#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Функция СоздатьВидыРасчета(ОсновныеВидыРасчета) Экспорт
	
	СозданныеВидыРасчета = Новый ТаблицаЗначений;
	СозданныеВидыРасчета.Колонки.Добавить("ОсновнойВидРасчета");
	СозданныеВидыРасчета.Колонки.Добавить("ДополнительныйВидРасчетаРК");
	СозданныеВидыРасчета.Колонки.Добавить("ДополнительныйВидРасчетаСН");

	ПомещенныеВАрхивВидыРасчета = Новый ТаблицаЗначений;
	ПомещенныеВАрхивВидыРасчета.Колонки.Добавить("ВидРасчета");
	
	КоллекцияВидовРасчета = Новый Соответствие;
	
	Для Каждого Стр Из ОсновныеВидыРасчета Цикл
		
		Если Не Стр.ОбрабатыватьВидРасчета Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительныеВидыРасчета = Новый Структура;
		ДополнительныеВидыРасчета.Вставить("РК");
		ДополнительныеВидыРасчета.Вставить("СН");
		
		ВидРасчетаОбъект = Стр.ОсновнойВидРасчета.Скопировать();
		НачислениеСсылка = ПланыВидовРасчета.Начисления.ПолучитьСсылку();
		ВидРасчетаОбъект.УстановитьСсылкуНового(НачислениеСсылка);
		ВидРасчетаОбъект.Наименование = СтрШаблон(НСтр("ru = '%1';
														|en = '%1'"), СокрЛП(ВидРасчетаОбъект.Наименование));
		КраткоеНаименование = СокрЛП(ВидРасчетаОбъект.КраткоеНаименование);
		Если КраткоеНаименование <> "" Тогда
			ВидРасчетаОбъект.КраткоеНаименование = СтрШаблон(НСтр("ru = '%1';
																	|en = '%1'"), КраткоеНаименование);
		КонецЕсли;
		ВидРасчетаОбъект.ФормулаРасчета = Стр.НоваяФормулаРасчета;
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ВидРасчетаОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВидРасчетаОбъект);
		
		КоллекторНачислений = Новый Соответствие;
		КоллекторНачислений.Вставить(НачислениеСсылка, ВидРасчетаОбъект);
		СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
		
		СписокРассчитываемыхПосле = ТаблицаРассчитываемыхПосле();
		СписокПриоритетНиже = ТаблицаПриоритетНиже();
		СписокЗависимыеНачисления = ТаблицаЗависимыеНачисления();
		СписокЗависимыеУдержания = ТаблицаЗависимыеУдержания();
		// Заполнение реквизита со списком зависимых начислений.
		РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(Стр.ОсновнойВидРасчета, СписокРассчитываемыхПосле, "ВедущиеВидыРасчета");
		// Заполнение реквизита со списком вытесняемых начислений (приоритет которых ниже).
		РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(Стр.ОсновнойВидРасчета, СписокПриоритетНиже, "ВытесняющиеВидыРасчета");
		// Заполнение реквизита со списком начислений, для которых данное начисление является базовым.
		РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(Стр.ОсновнойВидРасчета, СписокЗависимыеНачисления, "БазовыеВидыРасчета");
		// Заполнение реквизита со списком удержаний, для которых данное начисление является базовым.
		РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(Стр.ОсновнойВидРасчета, СписокЗависимыеУдержания, "БазовыеВидыРасчета", Истина);
		
		ПакетВидовРасчета = Новый Соответствие;
		// Добавляем текущий объект
		ПакетВидовРасчета.Вставить(НачислениеСсылка, ВидРасчетаОбъект);
		
		ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ПакетВидовРасчета, НачислениеСсылка, СписокРассчитываемыхПосле, "ВедущиеВидыРасчета");
		ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ПакетВидовРасчета, НачислениеСсылка, СписокПриоритетНиже, "ВытесняющиеВидыРасчета");
		ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ПакетВидовРасчета, НачислениеСсылка, СписокЗависимыеНачисления, "БазовыеВидыРасчета");
		//
		Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл 
			КлючИЗначение.Значение.ВедущиеВидыРасчета.Очистить();
		КонецЦикла;
		
		// Выполняем дозаполнение
		РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(ПакетВидовРасчета);
		
		// Добавляем зависимые удержания.
		ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ПакетВидовРасчета, НачислениеСсылка, СписокЗависимыеУдержания, "БазовыеВидыРасчета", Истина);
		
		НачатьТранзакцию();
		Попытка
			РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
			СоздатьВидРасчетаРК(НачислениеСсылка, Стр.ОсновнойВидРасчета, ДополнительныеВидыРасчета);
			СоздатьВидРасчетаСН(НачислениеСсылка, Стр.ОсновнойВидРасчета, ДополнительныеВидыРасчета);
			ПоместитьВидРасчетаВАрхив(Стр.ОсновнойВидРасчета);
			ЗафиксироватьТранзакцию();
			
			//Лог
			КоллекцияВидовРасчета.Вставить(НачислениеСсылка, ДополнительныеВидыРасчета);
			ПомещенныеВАрхивВидыРасчета.Добавить().ВидРасчета = Стр.ОсновнойВидРасчета;
			
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	ОсновныеВидыРасчета.Очистить();
	
	Для Каждого КлючИЗначение Из КоллекцияВидовРасчета Цикл
		
		НоваяСтрока = СозданныеВидыРасчета.Добавить();
		НоваяСтрока.ОсновнойВидРасчета = КлючИЗначение.Ключ;
		НоваяСтрока.ДополнительныйВидРасчетаРК = КлючИЗначение.Значение.РК;
		НоваяСтрока.ДополнительныйВидРасчетаСН = КлючИЗначение.Значение.СН;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("СозданныеВидыРасчета", ОбщегоНазначения.ТаблицаЗначенийВМассив(СозданныеВидыРасчета));
	Результат.Вставить("ПомещенныеВАрхивВидыРасчета", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПомещенныеВАрхивВидыРасчета));
	
	Возврат Результат;
		
КонецФункции

Процедура ПоместитьВидРасчетаВАрхив(ВидРасчета)
	
	ВидРасчетаОбъект = ВидРасчета.ПолучитьОбъект();
	ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
	ВидРасчетаОбъект.Наименование = СтрШаблон(НСтр("ru = '%1 (до 2025)';
													|en = '%1 (до 2025)'"), СокрЛП(ВидРасчетаОбъект.Наименование));
	КраткоеНаименование = СокрЛП(ВидРасчетаОбъект.КраткоеНаименование);
	Если КраткоеНаименование <> "" Тогда
		ВидРасчетаОбъект.КраткоеНаименование = СтрШаблон(НСтр("ru = '%1 (до 2025)';
																|en = '%1 (до 2025)'"), КраткоеНаименование);
	КонецЕсли;
	ВидРасчетаОбъект.ВАрхиве = Истина;
	ВидРасчетаОбъект.Записать();

КонецПроцедуры

Функция ТаблицаРассчитываемыхПосле()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаПриоритетНиже()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаЗависимыеНачисления()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Таблица.Колонки.Добавить("ДоплатаДоСреднего", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаЗависимыеУдержания()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(ВидыРасчетаДляЗаписи, ТекущийВидРасчета, ЗависимыеВидыРасчета, ИмяТаблицыЗависимых, ЗапросПоУдержаниям = Ложь, ДополнительныеНачисленияДолейРКСН = Неопределено)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка
	|ПОМЕСТИТЬ ВТЗависимыеДоРедактирования
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.ВидРасчета = &ТекущийВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеДоРедактирования.Ссылка
	|ИЗ
	|	ВТЗависимыеДоРедактирования КАК ЗависимыеДоРедактирования
	|ГДЕ
	|	НЕ ЗависимыеДоРедактирования.Ссылка В (&ЗависимыеВидыРасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗависимыеДоРедактирования КАК ЗависимыеДоРедактирования
	|		ПО (ЗависимыеДоРедактирования.Ссылка = ВидыРасчета.Ссылка)
	|ГДЕ
	|	ВидыРасчета.Ссылка В(&ЗависимыеВидыРасчета)
	|	И ЗависимыеДоРедактирования.Ссылка ЕСТЬ NULL ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", ИмяТаблицыЗависимых);
	
	Если ЗапросПоУдержаниям Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПланВидовРасчета.Начисления", "ПланВидовРасчета.Удержания");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийВидРасчета", ТекущийВидРасчета);
	Запрос.УстановитьПараметр("ЗависимыеВидыРасчета", ОбщегоНазначения.ВыгрузитьКолонку(ЗависимыеВидыРасчета, "ВидРасчета"));
	
	// Удаляем текущий вид расчета из табличных частей.
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаУдалить = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаУдалить.Следующий() Цикл
		НачислениеОбъект = ВидыРасчетаДляЗаписи[ВыборкаУдалить.Ссылка];
		Если НачислениеОбъект = Неопределено Тогда
			НачислениеОбъект = ВыборкаУдалить.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		СтрокаТекущегоВидаРасчета = НачислениеОбъект[ИмяТаблицыЗависимых].Найти(ТекущийВидРасчета, "ВидРасчета");
		Если СтрокаТекущегоВидаРасчета <> Неопределено Тогда
			НачислениеОбъект[ИмяТаблицыЗависимых].Удалить(СтрокаТекущегоВидаРасчета);
			ВидыРасчетаДляЗаписи.Вставить(ВыборкаУдалить.Ссылка, НачислениеОбъект);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем текущий вид расчета в табличные части.
	ВыборкаДобавить = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаДобавить.Следующий() Цикл
		НачислениеОбъект = ВидыРасчетаДляЗаписи[ВыборкаДобавить.Ссылка];
		Если НачислениеОбъект = Неопределено Тогда
			НачислениеОбъект = ВыборкаДобавить.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		НачислениеОбъект[ИмяТаблицыЗависимых].Добавить().ВидРасчета = ТекущийВидРасчета;
		ВидыРасчетаДляЗаписи.Вставить(ВыборкаДобавить.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВидРасчетаРК(НачислениеСсылка, ПрежнийВидРасчета, ДополнительныеВидыРасчета)
	
	СоздатьДополнительныйВидРасчета(НачислениеСсылка, ПрежнийВидРасчета, Истина, ДополнительныеВидыРасчета);
	
КонецПроцедуры

Процедура СоздатьВидРасчетаСН(НачислениеСсылка, ПрежнийВидРасчета, ДополнительныеВидыРасчета)
	
	СоздатьДополнительныйВидРасчета(НачислениеСсылка, ПрежнийВидРасчета, Ложь, ДополнительныеВидыРасчета);
	
КонецПроцедуры

Процедура СоздатьДополнительныйВидРасчета(ОсновнойВидРасчета, ПрежнийВидРасчета, СозданиеДолиРК, ДополнительныеВидыРасчета)
	
	СписокСвойствОсновногоВидаРасчета = "СпособВыполненияНачисления, СпособРасчета, ВидДокументаНачисления, ФормулаРасчета, 
	|НачисляетсяВЦеломЗаМесяц, НачисляетсяПриРасчетеПервойПоловиныМесяца, ОбозначениеВТабелеУчетаРабочегоВремени, 
	|ВидНачисленияДляНУ, КодДоходаСтраховыеВзносы, ВидПособияСоциальногоСтрахования, ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка, КоличествоМесяцевРасчетаСреднегоЗаработка, 
	|ВидОтпуска, ВидСтажаСЗВ, ВидСтажаПФР2014, ОчередностьРасчета, ВидОперацииПоЗарплате,
	|ВходитВУчетСреднегоЗаработкаФСС, КатегорияСтатистическогоНаблюдения2019, ПоддерживаетНесколькоПлановыхНачислений,
	|ВключатьВФОТ, КодДоходаСтраховыеВзносы2017, ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда, КатегорияСтатистическогоНаблюдения,
	|ВидДоходаИсполнительногоПроизводства, НачисляетсяВОтпускеПоУходу, СтрокаРаздела2Расчета6НДФЛ, ВидДоходаИсполнительногоПроизводства2022,
	|НачисляетсяТолькоПриРасчетеПервойПоловиныМесяца, КатегорияСтатистическогоНаблюденияЗаКлассноеРуководство, Наименование, КраткоеНаименование, КатегорияНачисленияИлиНеоплаченногоВремени, 
	|ПериодРасчетаБазовыхНачислений, КоличествоМесяцевБазовогоПериода, СдвигБазовогоПериода, ВидВремени";
	ЗначенияСвойствОсновногоВидаРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнойВидРасчета, СписокСвойствОсновногоВидаРасчета);
		
	СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	Если СозданиеДолиРК Тогда
		Если КатегорииДенежногоДовольствия().Найти(ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСДД;
		ИначеЕсли КатегорииДенежногоСодержания().Найти(ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСДС;
		Иначе
			КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСреднемЗаработке;
		КонецЕсли;
		Постфикс = "(доля РК)";
	Иначе
		Если КатегорииДенежногоДовольствия().Найти(ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСДД;
		ИначеЕсли КатегорииДенежногоСодержания().Найти(ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСДС;
		Иначе
			КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСреднемЗаработке;
		КонецЕсли;
		Постфикс = "(доля СН)";
	КонецЕсли;
	
	СвойстваПоКатегории = СвойстваПоКатегориям.Получить(КатегорияНачисления);
	СвойстваОсновногоНачисления = СвойстваПоКатегориям.Получить(ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени);
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.Вставить("ОсновнойВидРасчета", ОсновнойВидРасчета);
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорияНачисления;
	Описание.СвойстваПоКатегории = СвойстваПоКатегории;
	Описание.Наименование = СтрШаблон(НСтр("ru = '%1 %2';
											|en = '%1 %2'"), СокрЛП(ЗначенияСвойствОсновногоВидаРасчета.Наименование), Постфикс);
	КраткоеНаименование = СокрЛП(ЗначенияСвойствОсновногоВидаРасчета.КраткоеНаименование);
	Если КраткоеНаименование <> "" Тогда
		Описание.КраткоеНаименование = СтрШаблон(НСтр("ru = '%1 %2';
														|en = '%1 %2'"), КраткоеНаименование, Постфикс);
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(Описание.СвойстваПоКатегории, ЗначенияСвойствОсновногоВидаРасчета, , "ВидВремени");
	
	Если СозданиеДолиРК Тогда
		Описание.СвойстваПоКатегории.ФормулаРасчета = СвойстваОсновногоНачисления.ДополнительныеФормулыРасчета.ФормулаРасчетаДолиРК;
	Иначе
		Описание.СвойстваПоКатегории.ФормулаРасчета = СвойстваОсновногоНачисления.ДополнительныеФормулыРасчета.ФормулаРасчетаДолиСН;
	КонецЕсли;
	
	//Частные случаи формул
	Если ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска И 
			ЗначенияСвойствОсновногоВидаРасчета.ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный") Тогда
		Описание.СвойстваПоКатегории.ФормулаРасчета = ФормулаУчебногоОтпуска(СозданиеДолиРК);
	ИначеЕсли ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки И
			ЗначенияСвойствОсновногоВидаРасчета.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное Тогда
		Описание.СвойстваПоКатегории.ФормулаРасчета = ФормулаВнутрисменнойКомандировки(СозданиеДолиРК);
	ИначеЕсли ЗначенияСвойствОсновногоВидаРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты") И
			ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя Тогда
		Описание.СвойстваПоКатегории.ФормулаРасчета = ФормулаПриостановкиРаботыПоПричинеЗадержкиВыплатыЗарплаты(СозданиеДолиРК);
	ИначеЕсли ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя И
			ЗначенияСвойствОсновногоВидаРасчета.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное Тогда
		Описание.СвойстваПоКатегории.ФормулаРасчета = ФормулаЧасовогоПростояПоВинеРаботодателя(СозданиеДолиРК);
	ИначеЕсли ЗначенияСвойствОсновногоВидаРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда И
			ЗначенияСвойствОсновногоВидаРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.КормлениеРебенка") Тогда
		Описание.СвойстваПоКатегории.ФормулаРасчета = ФормулаОплатыВремениКормленияРебенка(СозданиеДолиРК);	
	КонецЕсли;
		
	КоллекторНачислений = Новый Соответствие();
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание, Ложь, Ложь);
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл	
		ДополнительныйВидРасчетаСсылка = КлючИЗначение.Ключ;
		ДополнительныйВидРасчетаОбъект = КлючИЗначение.Значение;
	КонецЦикла;
	
	СписокРассчитываемыхПосле = ТаблицаРассчитываемыхПосле();
	СписокПриоритетНиже = ТаблицаПриоритетНиже();
	СписокЗависимыеНачисления = ТаблицаЗависимыеНачисления();
	СписокЗависимыеУдержания = ТаблицаЗависимыеУдержания();
	// Заполнение реквизита со списком зависимых начислений.
	РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(ПрежнийВидРасчета, СписокРассчитываемыхПосле, "ВедущиеВидыРасчета");
	// Заполнение реквизита со списком начислений, для которых данное начисление является базовым.
	РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(ПрежнийВидРасчета, СписокЗависимыеНачисления, "БазовыеВидыРасчета");
	// Заполнение реквизита со списком удержаний, для которых данное начисление является базовым.
	РасчетЗарплатыРасширенный.ЗаполнитьСписокЗависимыхВидовРасчета(ПрежнийВидРасчета, СписокЗависимыеУдержания, "БазовыеВидыРасчета", Истина);
		
	ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(КоллекторНачислений, ДополнительныйВидРасчетаСсылка, СписокРассчитываемыхПосле, "ВедущиеВидыРасчета");
	//ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(КоллекторНачислений, НовыйВидРасчетаСсылка, СписокПриоритетНиже, "ВытесняющиеВидыРасчета");
	ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(КоллекторНачислений, ДополнительныйВидРасчетаСсылка, СписокЗависимыеНачисления, "БазовыеВидыРасчета");
	//Заполнение вытесняющих видов расчета, для которых основной вид расчета является ведущим
	ЗаполнитьВытесняющиеВидыРасчетаПоОсновномуВидуРасчета(ДополнительныйВидРасчетаОбъект, ПрежнийВидРасчета);
		
	// Выполняем дозаполнение
	РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(КоллекторНачислений);
	
	ДозаполнитьДополнительноеНачисление(ДополнительныйВидРасчетаОбъект, ЗначенияСвойствОсновногоВидаРасчета);
	// Добавляем зависимые удержания.
	ЗаполнитьЗависимыеВидыРасчетовДляЗаписи(КоллекторНачислений, ДополнительныйВидРасчетаСсылка, СписокЗависимыеУдержания, "БазовыеВидыРасчета", Истина);
		
	ПакетВидовРасчета = Новый Соответствие;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		ПакетВидовРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	// Для всех видов расчета коллектора, несмотря на пакетную запись, 
	// устанавливаем признак для обновления вторичных данных.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		КлючИЗначение.Значение.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета);
	
	ПланыВидовРасчета.Начисления.ОбновитьОперативныеПоказателиДляВыявленияНачислений();
	ПланыВидовРасчета.Начисления.ОбновитьВидыВремениДляВыявленияНачислений();
	
	ДополнительныеВидыРасчета[?(СозданиеДолиРК, "РК", "СН")] = ДополнительныйВидРасчетаСсылка; 
	
КонецПроцедуры

Процедура ЗаполнитьВытесняющиеВидыРасчетаПоОсновномуВидуРасчета(ДополнительныйВидРасчетаОбъект, ВидРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияВытесняющиеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	|ГДЕ
	|	НачисленияВытесняющиеВидыРасчета.Ссылка = &ОсновнойВидРасчета";
	
	Запрос.УстановитьПараметр("ОсновнойВидРасчета", ВидРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДополнительныйВидРасчетаОбъект.ВытесняющиеВидыРасчета.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура ДозаполнитьДополнительноеНачисление(ДополнительныйВидРасчетаОбъект, ЗначенияСвойствОсновногоВидаРасчета)

	ДополнительныйВидРасчетаОбъект.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗначенияСвойствОсновногоВидаРасчета.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда;
	ДополнительныйВидРасчетаОбъект.КоличествоМесяцевРасчетаСреднегоЗаработка = ЗначенияСвойствОсновногоВидаРасчета.КоличествоМесяцевРасчетаСреднегоЗаработка;
	
КонецПроцедуры

Функция КатегорииДенежногоСодержания()
	
	КатегорииДенежногоСодержания = Новый Массив();
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеДоплатаКомандировки);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпускаНаСанаторноКурортноеЛечение);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки);
	КатегорииДенежногоСодержания.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска);
	
	Возврат КатегорииДенежногоСодержания;
	
КонецФункции 

Функция КатегорииДенежногоДовольствия()
	
	КатегорииДенежногоДовольствия = Новый Массив();
	КатегорииДенежногоДовольствия.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеДовольствие);
	КатегорииДенежногоДовольствия.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаСверхурочныхВоеннослужащим);
	КатегорииДенежногоДовольствия.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеДовольствиеКомпенсацияОтпуска);
	
	Возврат КатегорииДенежногоДовольствия;
	
КонецФункции

Функция ФормулаВнутрисменнойКомандировки(СозданиеДолиРК)
	
	Если СозданиеДолиРК Тогда
		ФормулаРасчета = "?((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * НормаЧасов > УчитыватьМРОТ * МРОТ, (СреднийЗаработокИндексируемыйРК * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемыйРК) * НормаЧасов, 0) / НормаЧасов * ВремяВЧасах";
	Иначе
		ФормулаРасчета = "?((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * НормаЧасов > УчитыватьМРОТ * МРОТ, (СреднийЗаработокИндексируемыйСН * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемыйСН) * НормаЧасов, 0) / НормаЧасов * ВремяВЧасах";
	КонецЕсли; 
	
	Возврат ФормулаРасчета;
	
КонецФункции

Функция ФормулаУчебногоОтпуска(СозданиеДолиРК)
	
	Если СозданиеДолиРК Тогда
		ФормулаРасчета = "?((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * КалендарныеДниМесяца > УчитыватьМРОТ * МРОТ, (СреднийЗаработокИндексируемыйРК * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемыйРК) * КалендарныеДниМесяца, 0) / КалендарныеДниМесяца * КоличествоДнейОтпуска";
	Иначе
		ФормулаРасчета = "?((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * КалендарныеДниМесяца > УчитыватьМРОТ * МРОТ, (СреднийЗаработокИндексируемыйСН * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемыйСН) * КалендарныеДниМесяца, 0) / КалендарныеДниМесяца * КоличествоДнейОтпуска";
	КонецЕсли;
	
	Возврат ФормулаРасчета;
	
КонецФункции

Функция ФормулаЧасовогоПростояПоВинеРаботодателя(СозданиеДолиРК)
	
	Если СозданиеДолиРК Тогда
		ФормулаРасчета = "?((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * НормаЧасов > УчитыватьМРОТ * МРОТ, (СреднийЗаработокИндексируемыйРК * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемыйРК) * НормаЧасов, 0) / НормаЧасов * (2/3) * ВремяВЧасах";
	Иначе
		ФормулаРасчета = "?((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * НормаЧасов > УчитыватьМРОТ * МРОТ, (СреднийЗаработокИндексируемыйСН * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемыйСН) * НормаЧасов, 0) / НормаЧасов * (2/3) * ВремяВЧасах";
	КонецЕсли;

	Возврат ФормулаРасчета;
	
КонецФункции

Функция ФормулаПриостановкиРаботыПоПричинеЗадержкиВыплатыЗарплаты(СозданиеДолиРК)

	Если СозданиеДолиРК Тогда
		ФормулаРасчета = "?((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * НормаДнейЧасов > УчитыватьМРОТ * МРОТ, (СреднийЗаработокИндексируемыйРК * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемыйРК) * НормаДнейЧасов, 0) / НормаДнейЧасов * ВремяВДняхЧасах";
	Иначе
		ФормулаРасчета = "?((СреднийЗаработокИндексируемый * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемый) * НормаДнейЧасов > УчитыватьМРОТ * МРОТ, (СреднийЗаработокИндексируемыйСН * КоэффициентИндексацииСреднегоЗаработка + СреднийЗаработокНеиндексируемыйСН) * НормаДнейЧасов, 0) / НормаДнейЧасов * ВремяВДняхЧасах";
	КонецЕсли;

	Возврат ФормулаРасчета;

КонецФункции

Функция ФормулаОплатыВремениКормленияРебенка(СозданиеДолиРК)

	Если СозданиеДолиРК Тогда
		ФормулаРасчета = "?(СреднийЗаработокОбщий * НормаЧасов > УчитыватьМРОТ * МРОТ, СреднийЗаработокРК * НормаЧасов , 0) / НормаЧасов * ВремяВЧасах";
	Иначе
		ФормулаРасчета = "?(СреднийЗаработокОбщий * НормаЧасов > УчитыватьМРОТ * МРОТ, СреднийЗаработокСН * НормаЧасов , 0) / НормаЧасов * ВремяВЧасах";
	КонецЕсли;

	Возврат ФормулаРасчета;

КонецФункции

#КонецЕсли