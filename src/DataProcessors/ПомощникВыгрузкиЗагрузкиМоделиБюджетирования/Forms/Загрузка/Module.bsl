
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	//++ НЕ УТКА
	ИспользоватьБюджетныйПроцесс = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетныйПроцесс");
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатусВыполненнойЗагрузки = Ложь;
	// Устанавливаем текущую таблицу переходов
	ПереходыПоСценарию();
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
	Элементы.СтраницаЭтапыПодготовкиБюджетов.Видимость = ИспользоватьБюджетныйПроцесс;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИмяФайлаМоделиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаМоделиРасширениеПодключено",
		ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыАналитикПриАктивизацииСтроки(Элемент)

	УправлениеОтображениемСтраницаЗаменаЗначений();

КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Флаг");
	УстановитьПометкиРодителей(ТекущиеДанные, "Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыБюджетовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Флаг");
	УстановитьПометкиРодителей(ТекущиеДанные, "Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаЗначенийАналитикАналитикаБДПриИзменении(Элемент)
	
	ВидыАналитикРассчитать(Элементы.ЗаменаЗначенийАналитик.ТекущиеДанные.Тип);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеАналитикиПриИзменении(Элемент)

	УправлениеОтображениемСтраницаЗаменаЗначений();

КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовОбновитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	УстановитьФлагОбновитьВидовЭтаповБюджета(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПодготовкиБюджетовОбновитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	УстановитьФлагОбновитьВидовЭтаповБюджета(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодельПриИзменении(Элемент)
	
	ПризнакОбновитьМодельПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовОбновитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = ДоступныеДействия(ТекущиеДанные);
	Для Каждого Стр Из СписокВыбора Цикл
		НоваяСтрока = Элемент.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПодготовкиБюджетовОбновитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = ДоступныеДействия(ТекущиеДанные);
	Для Каждого Стр Из СписокВыбора Цикл
		НоваяСтрока = Элемент.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыБюджетовНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодробнаяИнформацияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", СинонимОбработки());
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Дерево = Неопределено;
	Если Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаВидыБюджетов Тогда
		Дерево = ВидыБюджетов;
	ИначеЕсли  Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаЭтапыПодготовкиБюджетов Тогда
		Дерево = ЭтапыПодготовкиБюджетов;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Флаг = Истина;
		УстановитьПометкиПодчиненных(Строка, "Флаг");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Дерево = Неопределено;
	Если Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаВидыБюджетов Тогда
		Дерево = ВидыБюджетов;
	ИначеЕсли  Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаЭтапыПодготовкиБюджетов Тогда
		Дерево = ЭтапыПодготовкиБюджетов;
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Флаг = Ложь;
		УстановитьПометкиПодчиненных(Строка, "Флаг");
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазделИнициализацииПереходовПомощника

// Параметры перехода.
// 
// Возвращаемое значение:
//  Структура - Параметры перехода:
// * ПорядковыйНомерПерехода - Число -
// * ИмяОсновнойСтраницы - Строка -
// * ИмяСтраницыНавигации - Строка -
// * ИмяСтраницыДекорации - Строка -
// * ИмяОбработчикаПриОткрытии - Строка -
// * ИмяОбработчикаПослеОткрытия - Строка -
// * ИмяОбработчикаПриПереходеДалее - Строка -
// * ИмяОбработчикаПриПереходеНазад - Строка -
&НаКлиенте
Функция ПараметрыПерехода()
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("ПорядковыйНомерПерехода", 0);
	ПараметрыПерехода.Вставить("ИмяОсновнойСтраницы", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыНавигации", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыДекорации", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриОткрытии", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПослеОткрытия", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеДалее", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеНазад", "");
	
	Возврат ПараметрыПерехода;
	
КонецФункции

&НаКлиенте
Процедура ПереходыПоСценарию()
	
	Переходы.Очистить();
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 1;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаПриветствие";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНачало";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаПриветствие_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаПриветствие_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 2;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаФильтры";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНазадДалее";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНазадДалее";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаФильтры_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаФильтры_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 3;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаЗаменаЗначений";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНазадДалее";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНазадДалее";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаЗаменаЗначений_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаЗаменаЗначений_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 4;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаОжидания";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОжидание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаОжидания_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПослеОткрытия = "СтраницаОжидания_ПослеОткрытия";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 5;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаЗавершение";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОкончание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаЗавершение_ПриОткрытии";
	ДобавитьПереход(ПараметрыПерехода);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПереход(ПараметрыПерехода)
	
	НоваяСтрока = Переходы.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПараметрыПерехода.ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ПараметрыПерехода.ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ПараметрыПерехода.ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ПараметрыПерехода.ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ПараметрыПерехода.ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ПараметрыПерехода.ИмяОбработчикаПриОткрытии;
	НоваяСтрока.ИмяОбработчикаПослеОткрытия    = ПараметрыПерехода.ИмяОбработчикаПослеОткрытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)

	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
		
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	ПодключитьОбработчикОжидания("ВыполнитьОбработчикПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПослеОткрытия()
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];

	// обработчик ПослеОткрытия
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика]()";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия);
		
		Результат = Вычислить(ИмяПроцедуры);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазделОбработчиковСобытийПерехода

&НаКлиенте
Функция Подключаемый_СтраницаПриветствие_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПриветствие_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(Объект.ИмяФайлаМодели) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан путь к файлу с данными';
				|en = 'Path to the file with data is not specified'"), , "ИмяФайлаМодели", "ИмяФайлаМодели", Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПомещениеФайлаНаСерверЗавершение", ЭтаФорма);
	НачатьПомещениеФайлаНаСервер(Обработчик, , , АдресХранилища, Объект.ИмяФайлаМодели, УникальныйИдентификатор);
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаФильтры_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	Заголовок = НСтр("ru = 'Выбор загружаемых видов бюджетов и этапов подготовки бюджетов.';
					|en = 'Select budget profiles to import and budgeting steps.'");
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаФильтры_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	ВыполнитьДействияПередЗагрузкойНаСервере();
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаЗаменаЗначений_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ОтображатьВсеАналитики = Истина;
	Заголовок = НСтр("ru = 'Сопоставление загружаемых значений';
					|en = 'Map values to import'");
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаЗаменаЗначений_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	ПроверкаЗаполненияАналитикПередЗагрузкой(Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Загрузка модели бюджетирования.';
					|en = 'Import a budgeting model.'");
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЭтоПереходДалее Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПослеОткрытия()
	
	ВыполнитьЗагрузкуМодели();
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаЗавершение_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.НадписьСтатусЗагрузки.Заголовок = 
		?(СтатусВыполненнойЗагрузки,
			НСтр("ru = 'Загрузка успешно завершена';
				|en = 'Imported successfully'"),
			НСтр("ru = 'Загрузка не выполнена';
				|en = 'Import failed'"));
	
	Элементы.НадписьВариантовПродолжения.Заголовок = 
		?(СтатусВыполненнойЗагрузки,
		НСтр("ru = 'Нажмите кнопку ""Готово"" для выхода из помощника.';
			|en = 'Click ""Finish"" to exit the wizard.'"),
		НСтр("ru = 'Для того чтобы попробовать загрузить еще раз, нажмите ""Назад"", для выхода из помощника, нажимите ""Готово""';
			|en = 'To try to import again, click ""Back""; click ""Finish"" to exit the wizard'"));
		
	ЗаполнитьИтоговуюИнформацию();
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВыполнитьЗагрузкуМодели()
	
	ДлительнаяОперация = ЗагрузитьНаСервере();
	Если ДлительнаяОперация <> Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузкаВыполнена", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаНаСерверЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка обработки файла';
														|en = 'File processing error'"));
		Возврат;
	КонецЕсли;
	
	АдресХранилища = Результат.Адрес;
	Если Не ЗначениеЗаполнено(АдресХранилища) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка обработки файла';
														|en = 'File processing error'"));
		Возврат;
	КонецЕсли;
	
	АдресХранилища = Результат.Адрес;
	
	ЗаполнитьФильтрыПоДаннымXML();
	ПризнакОбновитьМодельПриИзменении();
	РаскрытьВерхнийУровеньДереваФормы(ВидыБюджетов,"ВидыБюджетов");
	//++ НЕ УТКА
	РаскрытьВерхнийУровеньДереваФормы(ЭтапыПодготовкиБюджетов,"ЭтапыПодготовкиБюджетов");
	//-- НЕ УТКА
	
	Элементы.ГруппаСостояние.Видимость = Ложь;
	Элементы.ВидыБюджетов.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере()

	ЗаменяемыеУИН = ЗаменяемыеУИН();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(АдресХранилища));
	ПараметрыЗадания.Вставить("ЭтоМодельБюджетирования", Истина);

	ПараметрыЗадания.Вставить("ЗаменяемыеУИН", ЗаменяемыеУИН);

	ПараметрыЗадания.Вставить("ЗагружаемыеУИН", МассивЗагружаемыхУИН(ЗаменяемыеУИН));
	ПараметрыЗадания.Вставить("ЗаменаЗначенийАналитик", ЗаменаЗначенийАналитик.Выгрузить(,"АналитикаФайлаУИН,АналитикаБД,СсылкаИсточника"));

	ИмяМетода = "ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ЗагрузитьМодельУчета";
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = СинонимОбработки();
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(НастройкиЗапуска, ИмяМетода, ПараметрыЗадания);
	
КонецФункции

&НаСервере
Функция ЗаменяемыеУИН()
	
	ФильтрЗагрузки = Новый ТаблицаЗначений;
	ФильтрЗагрузки.Колонки.Добавить("ОбъектФайлУИН", Новый ОписаниеТипов("Строка"));
	ФильтрЗагрузки.Колонки.Добавить("Обновить", Новый ОписаниеТипов("Булево"));
	ФильтрЗагрузки.Колонки.Добавить("ОбъектНовыйУИН", Новый ОписаниеТипов("Строка"));
	
	НовыйФильтр = ФильтрЗагрузки.Добавить();
	НовыйФильтр.ОбъектФайлУИН = МодельБюджетированияУИН;
	НовыйФильтр.Обновить = ОбновитьМодель;
	Если ЗначениеЗаполнено(МодельБюджетированияСсылка) И Не ОбновитьМодель Тогда
		НовыйФильтр.ОбъектНовыйУИН = XMLСтрока(Новый УникальныйИдентификатор);
	Иначе
		НовыйФильтр.ОбъектНовыйУИН = МодельБюджетированияУИН;
	КонецЕсли;
	
	ДополнитьВыбраннымиЭлеменамиОтбора(ФильтрЗагрузки, ВидыБюджетов); 
	ДополнитьВыбраннымиЭлеменамиОтбора(ФильтрЗагрузки, ЭтапыПодготовкиБюджетов);
	
	ЗаменяемыеУИН = Новый ТаблицаЗначений;
	ЗаменяемыеУИН.Колонки.Добавить("СсылкаПоиска", Новый ОписаниеТипов("Строка"));
	ЗаменяемыеУИН.Колонки.Добавить("СсылкаЗамены", Новый ОписаниеТипов("Строка"));
	ЗаменяемыеУИН.Колонки.Добавить("ЭтоЗаменаАналитик", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из ФильтрЗагрузки Цикл
		Если Строка.ОбъектФайлУИН <> Строка.ОбъектНовыйУИН Тогда
			НоваяСтрока = ЗаменяемыеУИН.Добавить();
			НоваяСтрока.СсылкаПоиска = Строка.ОбъектФайлУИН;
			НоваяСтрока.СсылкаЗамены = Строка.ОбъектНовыйУИН;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ЗаменаЗначенийАналитик Цикл
		Строка.АналитикаБДУИН = XMLСтрока(Строка.АналитикаБД);
		Если Строка.АналитикаФайлаУИН <> Строка.АналитикаБДУИН Тогда
			НоваяСтрока = ЗаменяемыеУИН.Добавить();
			НоваяСтрока.СсылкаПоиска = Строка.АналитикаФайлаУИН;
			НоваяСтрока.СсылкаЗамены = Строка.АналитикаБДУИН;
			НоваяСтрока.ЭтоЗаменаАналитик = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МодельБюджетированияСсылка) И Не ОбновитьМодель Тогда
		ДополнительныеТипыДляЗамены = ДополнительныеТипыСсылокСоставаМоделиДляЗамены();
		Для Каждого ЭлементФайла Из ЭлементыФайла Цикл
			Если ДополнительныеТипыДляЗамены.Найти(ЭлементФайла.Тип) <> Неопределено Тогда
				НоваяСтрока = ЗаменяемыеУИН.Добавить();
				НоваяСтрока.СсылкаПоиска = ЭлементФайла.УИН;
				НоваяСтрока.СсылкаЗамены = XMLСтрока(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗаменяемыеУИН;
	
КонецФункции

&НаСервере
Функция МассивЗагружаемыхУИН(ЗаменяемыеУИН)
	
	Индекс = ЗагружаемыеУИН.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Элемент = ЗагружаемыеУИН[Индекс];
		СтрокаЗамены = ЗаменяемыеУИН.Найти(Элемент.Значение, "СсылкаПоиска");
		Если СтрокаЗамены <> Неопределено Тогда
			Если СтрокаЗамены.ЭтоЗаменаАналитик Тогда
				ЗагружаемыеУИН.Удалить(Элемент);
			Иначе
				Элемент.Значение = СтрокаЗамены.СсылкаЗамены;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ЗагружаемыеУИН.ВыгрузитьЗначения());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ЕстьОшибки = Не СтатусВыполненнойЗагрузки;
	
	Элементы.ПодробнаяИнформация.Видимость = ЕстьОшибки;
	Элементы.Информация.Видимость = ЕстьОшибки;
	Если ЕстьОшибки Тогда
		Информация =  НСтр("ru = 'Ошибка:';
							|en = 'Error:'") + Символы.ПС+ ПротоколОбмена.ПолучитьТекст();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВыполнена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Сообщения") И Результат.Сообщения <> Неопределено Тогда
			Для каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Свойство("Статус") Тогда
			Если Результат.Статус = "Ошибка" Тогда
				СтатусВыполненнойЗагрузки = Ложь;
				ПротоколОбмена.УстановитьТекст(Результат.КраткоеПредставлениеОшибки);
			ИначеЕсли Результат.Статус = "Выполнено" Тогда
				СтатусВыполненнойЗагрузки = Истина;
			КонецЕсли;
			ЗаполнитьИтоговуюИнформацию();
			ИзменитьПорядковыйНомерПерехода(+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт 
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр =  НСтр("ru = 'Файл выгрузки';
										|en = 'Export file'") + "(*.xml)|*.xml";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь к файлу выгрузки модели учета';
										|en = 'Select a path to the file of accounting model export'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаМоделиПоказатьДиалогЗавершение",
		ЭтотОбъект);
		
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиПоказатьДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайлаМодели = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаСервере
Функция СинонимОбработки()
	Возврат Метаданные.Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.Синоним;
КонецФункции

&НаСервере
Процедура ЗаполнитьФильтрыПоДаннымXML()
	
	ИмяВременногоФайлаДанных = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайлаДанных);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаДанных); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ВидыБюджетовДерево = РеквизитФормыВЗначение("ВидыБюджетов");
	ВидыБюджетовДерево.Строки.Очистить();
	//++ НЕ УТКА
	ЭтапыПодготовкиБюджетовДерево = РеквизитФормыВЗначение("ЭтапыПодготовкиБюджетов");
	ЭтапыПодготовкиБюджетовДерево.Строки.Очистить();
	//-- НЕ УТКА
	ЭлементыФайла.Очистить();
	
	ИспользуемыеВидыЭтапыБюджета = Новый Массив();
	
	БлокДанных = ДокументDOM.ПолучитьЭлементыПоИмени("Data");
	
	Для Каждого Данные Из БлокДанных Цикл
		Для Каждого ЭлементДанных Из Данные.ДочерниеУзлы Цикл
			
			ТипЭлементаСтрока = ЭлементДанных.ЛокальноеИмя;
			
			РезультатЧтения = Новый Структура;	
			
			РеквизитыОбъекта = ЭлементДанных.ДочерниеУзлы;
			Для Каждого Реквизит Из РеквизитыОбъекта Цикл 
				Если Реквизит.ЛокальноеИмя = "Description" Тогда
					РезультатЧтения.Вставить("Наименование",Реквизит.ТекстовоеСодержимое);
				ИначеЕсли Реквизит.ЛокальноеИмя = "Code" Тогда
					РезультатЧтения.Вставить("Код",Реквизит.ТекстовоеСодержимое);
				ИначеЕсли Реквизит.ЛокальноеИмя = "Ref" Тогда
					РезультатЧтения.Вставить("УИН",Реквизит.ТекстовоеСодержимое);
				ИначеЕсли Реквизит.ЛокальноеИмя = "Parent" Тогда
					РезультатЧтения.Вставить("РодительУИН",Реквизит.ТекстовоеСодержимое);
				ИначеЕсли Реквизит.ЛокальноеИмя = "IsFolder" Тогда
					ЭтоГруппа  = Булево(Реквизит.ТекстовоеСодержимое);
					РезультатЧтения.Вставить("ЭтоГруппа", ЭтоГруппа);
					РезультатЧтения.Вставить("ИндексКартинки",Не ЭтоГруппа);
				ИначеЕсли Реквизит.ЛокальноеИмя = "ИНН" Тогда
					РезультатЧтения.Вставить("ИНН",Реквизит.ТекстовоеСодержимое);
				ИначеЕсли Реквизит.ЛокальноеИмя = "КПП" Тогда
					РезультатЧтения.Вставить("КПП",Реквизит.ТекстовоеСодержимое);
				КонецЕсли;
			КонецЦикла;
			
			Если ТипЭлементаСтрока = "CatalogObject.МоделиБюджетирования" Тогда
				
				МодельБюджетированияУИН = РезультатЧтения.УИН;
				УИД = Новый УникальныйИдентификатор(РезультатЧтения.УИН);
				НайденнаяМодель = Справочники.МоделиБюджетирования.ПолучитьСсылку(УИД);
				Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденнаяМодель, "Наименование")) Тогда
					МодельБюджетированияСсылка = НайденнаяМодель;
					ИспользуемыеВидыЭтапыБюджета = ПолучитьИспользуемыеВидыЭтапыБюджета(МодельБюджетированияСсылка); 
					ОбновитьМодель = Истина;
				Иначе
					ОбновитьМодель = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТипЭлементаСтрока = "CatalogObject.ВидыБюджетов" Тогда
				
				Нов = ВидыБюджетовДерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Нов,РезультатЧтения);
				УИД = Новый УникальныйИдентификатор(Нов.УИН);
				НайденныйВидБюджета = Справочники.ВидыБюджетов.ПолучитьСсылку(УИД);
				Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныйВидБюджета, "Наименование")) Тогда
					Нов.Ссылка = НайденныйВидБюджета;
					Если Не ИспользуемыеВидыЭтапыБюджета.Найти(НайденныйВидБюджета) = Неопределено Тогда
						Нов.Используется = Истина;
					КонецЕсли;
				КонецЕсли;
				
				//++ НЕ УТКА
			ИначеЕсли ТипЭлементаСтрока = "CatalogObject.ЭтапыПодготовкиБюджетов" Тогда
				
				Нов = ЭтапыПодготовкиБюджетовДерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Нов,РезультатЧтения);
				УИД = Новый УникальныйИдентификатор(Нов.УИН);
				НайденныйЭтапБюджета = Справочники.ЭтапыПодготовкиБюджетов.ПолучитьСсылку(УИД);
				РеквизитыЭтапаБюджета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденныйЭтапБюджета, "Наименование, Код");
				Если ЗначениеЗаполнено(РеквизитыЭтапаБюджета.Наименование) ИЛИ ЗначениеЗаполнено(РеквизитыЭтапаБюджета.Код) Тогда
					Нов.Ссылка = НайденныйЭтапБюджета;
					Если Не ИспользуемыеВидыЭтапыБюджета.Найти(НайденныйЭтапБюджета) = Неопределено Тогда
						Нов.Используется = Истина;
					КонецЕсли;
				КонецЕсли;                                                                          
				//-- НЕ УТКА
				
			КонецЕсли;

			Если СтрНайти(ТипЭлементаСтрока, "InformationRegisterRecordSet") <> 0 Тогда
				Продолжить;
			КонецЕсли;

			ТипЭлементаСтрока = СтрЗаменить(ТипЭлементаСтрока, "CatalogObject", "СправочникСсылка");
			ТипЭлементаСтрока = СтрЗаменить(ТипЭлементаСтрока, "ChartOfCharacteristicTypesObject", "ПланВидовХарактеристикСсылка");
			ТипЭлементаСтрока = СтрЗаменить(ТипЭлементаСтрока, "ChartOfAccountsObject", "ПланСчетовСсылка");
			
			НоваяСтрока = ЭлементыФайла.Добавить();
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип(ТипЭлементаСтрока));
			ОписаниеТиповАнилитики = Новый ОписаниеТипов(МассивТипов);
			НоваяСтрока.Тип = ОписаниеТиповАнилитики;
			НоваяСтрока.ТипСтрока = ТипЭлементаСтрока;
			Если РезультатЧтения.Свойство("Наименование") Тогда
				НоваяСтрока.Наименование = РезультатЧтения.Наименование;
			КонецЕсли;
			Если РезультатЧтения.Свойство("Код") Тогда
				НоваяСтрока.Код = РезультатЧтения.Наименование;
			КонецЕсли;
			Если РезультатЧтения.Свойство("ЭтоГруппа") И РезультатЧтения.ЭтоГруппа Тогда
				НоваяСтрока.ЭтоГруппа = Истина;
			КонецЕсли;
			Если РезультатЧтения.Свойство("УИН") Тогда
				НоваяСтрока.УИН = РезультатЧтения.УИН;
			КонецЕсли;
			Если РезультатЧтения.Свойство("ИНН") Тогда
				НоваяСтрока.ИНН = РезультатЧтения.ИНН;
			КонецЕсли;
			Если РезультатЧтения.Свойство("КПП") Тогда
				НоваяСтрока.КПП = РезультатЧтения.КПП;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ВосстановитьИерархиюДереваФильтра(ВидыБюджетовДерево);
	ЗначениеВРеквизитФормы(ВидыБюджетовДерево,"ВидыБюджетов");
	//++ НЕ УТКА
	ВосстановитьИерархиюДереваФильтра(ЭтапыПодготовкиБюджетовДерево);
	ЗначениеВРеквизитФормы(ЭтапыПодготовкиБюджетовДерево,"ЭтапыПодготовкиБюджетов");
	//-- НЕ УТКА
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяВременногоФайлаДанных);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменаЗначенийАналитикАналитикаБД.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.ВариантПодсказкиВвода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ЗначениеНеНайдено";
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.АналитикаБД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.НСИТоварногоПланирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<Значение аналитики не найдено.>';
																				|en = '<Dimension value is not found.>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменаЗначенийАналитикАналитикаБД.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.ВариантПодсказкиВвода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ЗначениеНеНайдено";
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.АналитикаБД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.НСИТоварногоПланирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<Выбирите соответствие.>';
																				|en = '<Select a mapping.>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменаЗначенийАналитикАналитикаБД.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.ВариантПодсказкиВвода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "НетПравНаОбъект";
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<Найденное значение недоступно для текущего пользователя из-за ограничений по записям. Обратитесь к администратору базы.>';
																				|en = '<The found value is unavailable to the current user due to the record limit. Contact the database administrator.>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПередЗагрузкойНаСервере()
	
	Если НЕ ПроверкаПередЗагрузкой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗагружаемыеУИНПоДаннымXML();
	ЗаполнитьЗаменаЗначенийАналитикПоДаннымXML();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполненияАналитикПередЗагрузкой(Отказ)
	
	Для каждого СтрокаЗаменыАналитики Из ЗаменаЗначенийАналитик Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаЗаменыАналитики.АналитикаБД) Тогда
			
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Не заполнено значение аналитики: %1. Загрузка модели не может быть выполнена, выберите значение аналитики.';
									|en = 'A dimension value is not filled: %1. Cannot import the model. Select a dimension value.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаЗаменыАналитики.АналитикаФайла);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПередЗагрузкой()
	ПроверкаПройдена = Истина;
	
	Поиск = Новый Структура("ЭтоГруппа", Ложь);
	ТипыЗагружаемыхДанных = ЭлементыФайла.Выгрузить(Поиск, "ТипСтрока").ВыгрузитьКолонку("ТипСтрока");
	ТипыЗагружаемыхДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТипыЗагружаемыхДанных);
	ТипыЗначенийАналитик = БюджетированиеСервер.ВсеТипыАналитик().Типы();
	
	Для каждого ТипДанных Из ТипыЗагружаемыхДанных Цикл
		Если ТипыЗначенийАналитик.Найти(Тип(ТипДанных)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип(ТипДанных));
		Если НЕ ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			ПроверкаПройдена = Ложь;
			
			ТекстСообщения = НСтр("ru = 'У текущего пользователя нет прав на чтение таблицы %1, необходимой для загрузки данных по модели. Загрузка будет прервана. Обратитесь к администратору базы.';
									|en = 'The current user does not have the rights to read the %1 table required to import model data. The import will be stopped. Contact the database administrator.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				ОбъектМетаданных.ПолноеИмя());
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаменаЗначенийАналитикПоДаннымXML()
	
	ВидыАналитик.Очистить();
	ЗаменаЗначенийАналитик.Очистить();
	ТипыУстанавливаемыхСоответствий = БюджетированиеСервер.ВсеТипыАналитик().Типы();
	
	ТипыУстанавливаемыхСоответствий.Добавить(Тип("СправочникСсылка.СценарииТоварногоПланирования"));
	ТипыУстанавливаемыхСоответствий.Добавить(Тип("СправочникСсылка.ВидыПланов"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипСценарииТоварногоПланирования",
		Новый ОписаниеТипов("СправочникСсылка.СценарииТоварногоПланирования"));
	ДополнительныеПараметры.Вставить("ТипВидыПланов",
		Новый ОписаниеТипов("СправочникСсылка.ВидыПланов"));
	
	Для Каждого ЭлементФайла Из ЭлементыФайла Цикл
		Если ТипыУстанавливаемыхСоответствий.Найти(Тип(ЭлементФайла.ТипСтрока)) = Неопределено
		 ИЛИ ЭлементФайла.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗагружаемыеУИН.НайтиПоЗначению(ЭлементФайла.УИН) = Неопределено Тогда
			ДобавитьЗаменуЗначенийАналитик(ЭлементФайла, ДополнительныеПараметры);
		КонецЕсли;
	КонецЦикла;
	
	ВидыАналитикРассчитать();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИерархиюДереваФильтра(Дерево)
	
	Если Дерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Дерево.Скопировать();
	Дерево.Строки.Очистить();
	
	Для Каждого СтрокаТЗ Из ТЗ.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.родительУИН) Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
		Иначе
			РодительСтроки = Дерево.Строки.Найти(СтрокаТЗ.РодительУИН,"УИН",Истина);
			Если Не РодительСтроки = Неопределено Тогда
				СтрокаДерева = РодительСтроки.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
			Иначе
				СтрокаДерева = Дерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РаскрытьВерхнийУровеньДереваФормы(ДеревоФормы,ИмяЭлемента)
	
	ЭлементыДерева = ДеревоФормы.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы[ИмяЭлемента].Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока - СтрокаДереваЗначений - Строка дерева
//  ИмяФлажка - Строка - Имя колонки дерева
// 
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока - СтрокаДереваЗначений - Строка дерева
//  ИмяФлажка - Строка - Имя колонки дерева
// 
&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныеЭлементыОтбора(ДеревоОтбора,ИмяКолонки)
	
	ВыбранныеЗначения = Новый Массив;
	ЭлементыДерева = ДеревоОтбора.ПолучитьЭлементы();
	Для Каждого ЭлементыДерева Из ЭлементыДерева Цикл
		Если ЭлементыДерева.Флаг Тогда
			ВыбранныеЗначения.Добавить(ЭлементыДерева[ИмяКолонки]);
			ПодчиненныеЗначения = ПолучитьВыбранныеЭлементыОтбора(ЭлементыДерева,ИмяКолонки);
			Для Каждого Значение Из ПодчиненныеЗначения Цикл
				ВыбранныеЗначения.Добавить(Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеЗначения;
	
КонецФункции

&НаСервере
Процедура ДополнитьВыбраннымиЭлеменамиОтбора(ФильтрыЗагрузки, ДеревоОтбора)
	
	ЭлементыДерева = ДеревоОтбора.ПолучитьЭлементы();
	Для Каждого ЭлементыДерева Из ЭлементыДерева Цикл
		Если ЭлементыДерева.Флаг Тогда
			НовыйФильтр = ФильтрыЗагрузки.Добавить();
			НовыйФильтр.ОбъектФайлУИН = ЭлементыДерева.УИН;
			НовыйФильтр.Обновить = ЭлементыДерева.Обновить;

			Если ЗначениеЗаполнено(ЭлементыДерева.Ссылка) И Не ЭлементыДерева.Обновить Тогда
				НовыйФильтр.ОбъектНовыйУИН = XMLСтрока(Новый УникальныйИдентификатор);
			Иначе
				НовыйФильтр.ОбъектНовыйУИН = ЭлементыДерева.УИН;
			КонецЕсли;

			ДополнитьВыбраннымиЭлеменамиОтбора(ФильтрыЗагрузки, ЭлементыДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура ДобавитьЗаменуЗначенийАналитик(Аналитика, ДополнительныеПараметры)
	
	НоваяСтрока = ЗаменаЗначенийАналитик.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Аналитика);
	НоваяСтрока.АналитикаФайла = Аналитика.Наименование;
	Если НЕ ЗначениеЗаполнено(Аналитика.Наименование)
	   И ЗначениеЗаполнено(Аналитика.Номер)
	   И ЗначениеЗаполнено(Аналитика.Дата) Тогда
		ТипАналитики = Аналитика.Тип.Типы()[0];
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипАналитики);
		ПредставлениеОбъекта = НСтр("ru = '%1 %2 от %3';
									|en = '%1 %2 dated %3'");
		НоваяСтрока.АналитикаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОбъекта,
		                                                                                     МетаданныеОбъекта.Синоним,
		                                                                                     Аналитика.Номер,
		                                                                                     Аналитика.Дата);
	КонецЕсли;
	Если Аналитика.Тип = ДополнительныеПараметры.ТипСценарииТоварногоПланирования Тогда
		НоваяСтрока.НСИТоварногоПланирования = Истина;
		
		ПредставлениеАналитикиФайла = НСтр("ru = '%1 (Валюта %2, Периодичность %3)';
											|en = '%1 (Currency %2, Frequency %3)'");
		НоваяСтрока.АналитикаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеАналитикиФайла,
			Аналитика.Наименование,
			Аналитика.ВалютаСценарияТоварногоПланирования,
			Аналитика.ПериодичностьСценарияТоварногоПланирования);
	ИначеЕсли Аналитика.Тип = ДополнительныеПараметры.ТипВидыПланов Тогда
		НоваяСтрока.НСИТоварногоПланирования = Истина;
		
		ПредставлениеАналитикиФайла = НСтр("ru = '%1 (Сценарий %2, Тип плана %3)';
											|en = '%1 (Scenario %2, Plan type %3)'");
		НоваяСтрока.АналитикаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеАналитикиФайла,
			Аналитика.Наименование,
			Аналитика.СценарийТоварногоПланированияВидаПлана,
			Аналитика.ТипПланаВидаПлана);
	КонецЕсли;
	НоваяСтрока.АналитикаФайлаУИН = Аналитика.УИН;
	
	РезультатПоиска = НайтиАналитикуБД(Аналитика);
	НоваяСтрока.АналитикаБД = РезультатПоиска.Значение;
	
	Если ЗначениеЗаполнено(НоваяСтрока.АналитикаБД) Тогда
		НоваяСтрока.АналитикаБДУИН = XMLСтрока(НоваяСтрока.АналитикаБД);
	КонецЕсли;
	
	НоваяСтрока.СсылкаИсточника = РезультатПоиска.СсылкаИсточника;
	НоваяСтрока.ВариантПодсказкиВвода = РезультатПоиска.ВариантПодсказкиВвода;
	Если Не ЗначениеЗаполнено(НоваяСтрока.АналитикаБД) Тогда
		НоваяСтрока.ТребуетВнимания = Истина;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Тип",Аналитика.Тип);
	ВидыАналитикСтроки = ВидыАналитик.НайтиСтроки(ПараметрыПоиска);
	Если ВидыАналитикСтроки.Количество() = 0 Тогда
		НоваяСтрока = ВидыАналитик.Добавить();
		НоваяСтрока.Тип = Аналитика.Тип;
		НоваяСтрока.Представление = Строка(Аналитика.Тип);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидыАналитикРассчитать(Тип=Неопределено)
	
	Для Каждого Стр Из ВидыАналитик Цикл
		Если Тип <> Неопределено И Стр.Тип <> Тип Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Тип",Стр.Тип);
		ЗаменаЗначенийСтроки = ЗаменаЗначенийАналитик.НайтиСтроки(ПараметрыПоиска);
		Стр.Всего = ЗаменаЗначенийСтроки.Количество();
		Сч = 0;
		Для Каждого Строка Из ЗаменаЗначенийСтроки Цикл
			Если Не ЗначениеЗаполнено(Строка.АналитикаБД) Тогда
				Строка.ТребуетВнимания = Истина;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		Стр.НеЗаполнено = Сч;
		Стр.ТребуетВнимания = Сч > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиАналитикуБД(Аналитика)
	
	АналитикаБД = Неопределено;
	ИмяОбъекта = Сред(Аналитика.ТипСтрока,СтрНайти(Аналитика.ТипСтрока, ".") + 1);
	ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(Тип(Аналитика.ТипСтрока));
	РезультатПоискаАналитики = Новый Структура("Значение, ВариантПодсказкиВвода, СсылкаИсточника", АналитикаБД, "", Неопределено);
	
	ТекстыЗапросаПоиска = Новый Массив;
	РазделительЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Запрос = Новый Запрос;
	
	// 1. поиск по ссылке
	УИД = Новый УникальныйИдентификатор(Аналитика.УИН);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ВидОбъекта + "."+ ИмяОбъекта);
	АналитикаБД = МенеджерОбъекта.ПолучитьСсылку(УИД);
	РезультатПоискаАналитики.СсылкаИсточника = АналитикаБД;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ВидОбъекта + "."+ ИмяОбъекта);
	ТекстыЗапросаПоиска.Добавить(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", АналитикаБД);
	
	// 2. поиск по коду + наименование
	Если ЗначениеЗаполнено(Аналитика.Код) И ЗначениеЗаполнено(Аналитика.Наименование) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	2 КАК Приоритет
			|ИЗ
			|	&Таблица КАК Таблица
			|ГДЕ
			|	Таблица.Код = &Код
			|	И Таблица.Наименование = &Наименование";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ВидОбъекта + "."+ ИмяОбъекта);
		ТекстыЗапросаПоиска.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("Код",Аналитика.Код);
		Запрос.УстановитьПараметр("Наименование",Аналитика.Наименование);
	КонецЕсли;
	
	// 3. для контрагентов и организаций по инн + кпп, для физических лиц только по инн
	
	Если ЗначениеЗаполнено(Аналитика.ИНН) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	3 КАК Приоритет
			|ИЗ
			|	&Таблица КАК Таблица
			|ГДЕ
			|	Таблица.ИНН = &ИНН
			|	И &УсловиеПоКПП";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ВидОбъекта + "."+ ИмяОбъекта);
		
		Если ЗначениеЗаполнено(Аналитика.КПП) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "Таблица.КПП = &КПП");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "ИСТИНА");
		КонецЕсли;
		
		ТекстыЗапросаПоиска.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ИНН",Аналитика.ИНН);
		Запрос.УстановитьПараметр("КПП",Аналитика.КПП);
		
	КонецЕсли;
	
	// 4. поиск по наименованию
	Если ЗначениеЗаполнено(Аналитика.Наименование) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	4 КАК Приоритет
			|ИЗ
			|	&Таблица КАК Таблица
			|ГДЕ
			|	Таблица.Наименование = &Наименование";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ВидОбъекта + "."+ ИмяОбъекта);
		ТекстыЗапросаПоиска.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("Наименование", Аналитика.Наименование);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросаПоиска, РазделительЗапроса) + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	УстановитьПривилегированныйРежим(Истина);
	СсылкиБезУчетаRLS = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СсылкиБезУчетаRLS.Количество() > 0 Тогда
		
		ПравилоПоиска = СсылкиБезУчетаRLS[0].Приоритет;
		
		Запрос = СхемыЗапросов.УстановитьВыборкуРазрешенныхЗаписей(Запрос, Истина);
		РазрешенныеСсылки = Запрос.Выполнить().Выгрузить();
		
		Если РазрешенныеСсылки.Количество() = 0 Тогда
			АналитикаБД = Неопределено;
			РезультатПоискаАналитики.Значение = АналитикаБД;
			РезультатПоискаАналитики.ВариантПодсказкиВвода = "НетПравНаОбъект";
		ИначеЕсли РазрешенныеСсылки[0].Приоритет > ПравилоПоиска Тогда
			АналитикаБД = Неопределено;
			РезультатПоискаАналитики.Значение = АналитикаБД;
			РезультатПоискаАналитики.ВариантПодсказкиВвода = "НетПравНаОбъект";
		Иначе
			АналитикаБД = РазрешенныеСсылки[0].Ссылка;
			РезультатПоискаАналитики.Значение = АналитикаБД;
			РезультатПоискаАналитики.ВариантПодсказкиВвода = "";
		КонецЕсли;
	Иначе
		АналитикаБД = Неопределено;
		РезультатПоискаАналитики.Значение = АналитикаБД;
		РезультатПоискаАналитики.ВариантПодсказкиВвода = "ЗначениеНеНайдено";
	КонецЕсли;
	
	Возврат РезультатПоискаАналитики;

КонецФункции

&НаКлиенте
Процедура УправлениеОтображениемСтраницаЗаменаЗначений()
	
	ВидыАналитикТекущиеДанные = Элементы.ВидыАналитик.ТекущиеДанные;
	
	Если  ОтображатьВсеАналитики Тогда
		Элементы.ВидыАналитик.ОтборСтрок = Неопределено;
		Элементы.ЗаменаЗначенийАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("Тип",
			?(Не ВидыАналитикТекущиеДанные = Неопределено,ВидыАналитикТекущиеДанные.Тип,Неопределено));
	Иначе
		Элементы.ВидыАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("ТребуетВнимания",Истина);
		Элементы.ЗаменаЗначенийАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("ТребуетВнимания,Тип",
			Истина, ?(Не ВидыАналитикТекущиеДанные = Неопределено,ВидыАналитикТекущиеДанные.Тип,Неопределено));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИспользуемыеВидыЭтапыБюджета(Модель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуемыеВидыЭтапыБюджета = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыБюджетов.Ссылка
	|ПОМЕСТИТЬ ВидыБюджетов
	|ИЗ
	|	Справочник.ВидыБюджетов КАК ВидыБюджетов
	|ГДЕ
	|	ВидыБюджетов.Владелец = &Модель
	|;
	//++ НЕ УТКА
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка
	|ПОМЕСТИТЬ ЭтапыБюджетов
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Владелец = &Модель
	|;
	//-- НЕ УТКА
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭкземплярБюджета.ВидБюджета КАК Ссылка
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|ГДЕ
	|	ЭкземплярБюджета.ВидБюджета В
	|			(ВЫБРАТЬ
	|				А.Ссылка
	|			ИЗ
	|				ВидыБюджетов КАК А)
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов В
	|			(ВЫБРАТЬ
	|				А.Ссылка
	|			ИЗ
	|				ЭтапыБюджетов КАК А)
	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("Модель",Модель);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ИспользуемыеВидыЭтапыБюджета = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользуемыеВидыЭтапыБюджета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗагружаемыеУИНПоДаннымXML()
	
	ИмяВременногоФайлаДанных = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайлаДанных);

	ЗагружаемыеУИН.Очистить();
	
	ЗагружаемыеУИН.Добавить(МодельБюджетированияУИН);
	
	ВыбранныеВидыБюджета = ПолучитьВыбранныеЭлементыОтбора(ВидыБюджетов,"УИН");
	Для Каждого Стр Из ВыбранныеВидыБюджета Цикл
		ЗагружаемыеУИН.Добавить(Стр);
	КонецЦикла;
	
	//++ НЕ УТКА
	
	ВыбранныеЭтапыПодготовкиБюджета = ПолучитьВыбранныеЭлементыОтбора(ЭтапыПодготовкиБюджетов,"УИН");
	Для Каждого Стр Из ВыбранныеЭтапыПодготовкиБюджета Цикл
		ЗагружаемыеУИН.Добавить(Стр);
	КонецЦикла;
	
	//-- НЕ УТКА
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаДанных); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Объекты = ДокументDOM.ПолучитьЭлементыПоИмени("itemFilterData");
	Для Каждого Элемент Из Объекты Цикл
		
		УИДВладелец = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("СсылкаВладелец").Значение;
		УИДЭлемент = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Ссылка").Значение;
		
		Если ЗагружаемыеУИН.НайтиПоЗначению(УИДВладелец) <> Неопределено Тогда
			ЗагружаемыеУИН.Добавить(УИДЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(ИмяВременногоФайлаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОбновитьМодельПриИзменении()
	
	Дерево = ВидыБюджетов;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Обновить = ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка);
		Если ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);
	КонецЦикла;
	
	//++ НЕ УТКА
	Дерево = ЭтапыПодготовкиБюджетов;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Обновить = ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка);
		Если ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);
		
	КонецЦикла;
	//-- НЕ УТКА
	
	Если Не ЗначениеЗаполнено(МодельБюджетированияСсылка) Тогда
		Элементы.ГруппаИнформацияПоМодели.Видимость = Ложь;
	КонецЕсли;
	Если Не ОбновитьМодель Тогда
		Элементы.ВидыБюджетовОбновить.Видимость = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовОбновить.Видимость = Ложь;
	Иначе
		Элементы.ВидыБюджетовОбновить.Видимость = Истина;
		Элементы.ЭтапыПодготовкиБюджетовОбновить.Видимость = Истина;
	КонецЕсли;
	
	//++ НЕ УТКА
	ЗапрещеноИзменятьЭтапыБюджетов = ОбновитьМодель И ЗапрещеноИзменятьЭтапыБюджетов(МодельБюджетированияСсылка);
	
	Если ЗапрещеноИзменятьЭтапыБюджетов Тогда
		Элементы.ЭтапыПодготовкиБюджетов.ТолькоПросмотр = Истина;
		Элементы.ЭтапыПодготовкиБюджетовУстановитьФлажки.Доступность = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовСнятьФлажки.Доступность = Ложь;
	Иначе
		Элементы.ЭтапыПодготовкиБюджетов.ТолькоПросмотр = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовУстановитьФлажки.Доступность = Истина;
		Элементы.ЭтапыПодготовкиБюджетовСнятьФлажки.Доступность = Истина;
	КонецЕсли;
	//-- НЕ УТКА

КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Функция ЗапрещеноИзменятьЭтапыБюджетов(Модель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетнаяЗадача.Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования";
	
	Запрос.УстановитьПараметр("МодельБюджетирования",Модель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Выборка.Количество() > 0;
	
КонецФункции
//-- НЕ УТКА

&НаСервере
Функция ДополнительныеТипыСсылокСоставаМоделиДляЗамены()
	
	Массив = Новый Массив;
	Массив.Добавить(Новый ОписаниеТипов("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	
	Возврат Массив;
		
КонецФункции

&НаКлиенте
Процедура УстановитьФлагОбновитьВидовЭтаповБюджета(ТекСтрока)
	
	Если Не ОбновитьМодель Тогда
		ТекСтрока.Обновить = Ложь;
	КонецЕсли;
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка.Обновить = ТекСтрока.Обновить;
		Если ТекСтрока.Обновить И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДоступныеДействия(ТекущаяСтрока)
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.Добавить(Ложь,Нстр("ru = 'загрузить новый';
										|en = 'import a new one'"));
	
	ЗапретОбновления = Ложь;
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Если Не Родитель.Обновить Тогда
			ЗапретОбновления = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапретОбновления И ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) И Не ТекущаяСтрока.Используется Тогда
		СписокДействий.Добавить(Истина,Нстр("ru = 'обновить существующий';
											|en = 'update the existing one'"));
	КонецЕсли;
	
	Возврат СписокДействий;
	
КонецФункции

#КонецОбласти

#КонецОбласти
