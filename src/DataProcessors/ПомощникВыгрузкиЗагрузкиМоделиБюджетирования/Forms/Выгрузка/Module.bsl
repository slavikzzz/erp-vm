
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	//++ НЕ УТКА
	ИспользоватьБюджетныйПроцесс = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетныйПроцесс");
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатусВыполненнойЗагрузки = Ложь;
	// Устанавливаем текущую таблицу переходов
	ПереходыПоСценарию();
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
	Элементы.СтраницаЭтапыПодготовкиБюджетов.Видимость = ИспользоватьБюджетныйПроцесс;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИмяФайлаМоделиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаМоделиРасширениеПодключено",
		ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Флаг");
	УстановитьПометкиРодителей(ТекущиеДанные, "Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПодготовкиБюджетовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Флаг");
	УстановитьПометкиРодителей(ТекущиеДанные, "Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура МодельБюджетированияПриИзменении(Элемент)
	
	ИзменениеМоделиБюджетирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнаяИнформацияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", СинонимОбработки());
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ЗавершитьФоновоеЗадание(ИдентификаторЗадания);
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Дерево = Неопределено;
	Если Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаВидыБюджетов Тогда
		Дерево = ВидыБюджетов;
	ИначеЕсли  Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаЭтапыПодготовкиБюджетов Тогда
		Дерево = ЭтапыПодготовкиБюджетов;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Флаг = Истина;
		УстановитьПометкиПодчиненных(Строка, "Флаг");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Дерево = Неопределено;
	Если Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаВидыБюджетов Тогда
		Дерево = ВидыБюджетов;
	ИначеЕсли  Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаЭтапыПодготовкиБюджетов Тогда
		Дерево = ЭтапыПодготовкиБюджетов;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Флаг = Ложь;
		УстановитьПометкиПодчиненных(Строка, "Флаг");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазделИнициализацииПереходовПомощника

// Параметры перехода.
// 
// Возвращаемое значение:
//  Структура - Параметры перехода:
// * ПорядковыйНомерПерехода - Число -
// * ИмяОсновнойСтраницы - Строка -
// * ИмяСтраницыНавигации - Строка -
// * ИмяСтраницыДекорации - Строка -
// * ИмяОбработчикаПриОткрытии - Строка -
// * ИмяОбработчикаПослеОткрытия - Строка -
// * ИмяОбработчикаПриПереходеДалее - Строка -
// * ИмяОбработчикаПриПереходеНазад - Строка -
&НаКлиенте
Функция ПараметрыПерехода()
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("ПорядковыйНомерПерехода", 0);
	ПараметрыПерехода.Вставить("ИмяОсновнойСтраницы", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыНавигации", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыДекорации", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриОткрытии", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПослеОткрытия", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеДалее", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеНазад", "");
	
	Возврат ПараметрыПерехода;
	
КонецФункции

&НаКлиенте
Процедура ПереходыПоСценарию()
	
	Переходы.Очистить();
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 1;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаПриветствие";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНачало";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаПриветствие_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаПриветствие_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 2;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаФильтры";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНазадДалее";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаНавигацииНазадДалее";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаФильтры_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаФильтры_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 3;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаОжидания";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОжидание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаОжидания_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПослеОткрытия = "СтраницаОжидания_ПослеОткрытия";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 4;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаЗавершение";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОкончание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаЗавершение_ПриОткрытии";
	ДобавитьПереход(ПараметрыПерехода);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПереход(ПараметрыПерехода)
	
	НоваяСтрока = Переходы.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПараметрыПерехода.ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ПараметрыПерехода.ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ПараметрыПерехода.ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ПараметрыПерехода.ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ПараметрыПерехода.ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ПараметрыПерехода.ИмяОбработчикаПриОткрытии;
	НоваяСтрока.ИмяОбработчикаПослеОткрытия    = ПараметрыПерехода.ИмяОбработчикаПослеОткрытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);

		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	ПодключитьОбработчикОжидания("ВыполнитьОбработчикПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПослеОткрытия()
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПослеОткрытия
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика]()";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия);
		
		Результат = Вычислить(ИмяПроцедуры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазделОбработчиковСобытийПерехода

&НаКлиенте
Функция Подключаемый_СтраницаПриветствие_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	Заголовок = НСтр("ru = 'Выгрузка модели бюджетирования.';
					|en = 'Budgeting model export.'");
		
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПриветствие_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(МодельБюджетирования) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указана Модель бюджетирования';
				|en = 'Budgeting model is not specified'"), , "МодельБюджетирования", "МодельБюджетирования", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СокрЛП(Объект.ИмяФайлаМодели)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указан путь к файлу с данными';
				|en = 'Path to the file with data is not specified'"), , "ИмяФайлаМодели", "ИмяФайлаМодели", Отказ);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаФильтры_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	Заголовок = НСтр("ru = 'Выбор выгружаемых видов бюджетов и этапов подготовки бюджетов.';
					|en = 'Select exported budget kinds and budgeting steps.'");
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаФильтры_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаЗавершение_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.НадписьСтатусЗагрузки.Заголовок =
		?(СтатусВыполненнойЗагрузки,
			НСтр("ru = 'Выгрузка успешно завершена';
				|en = 'Successfully imported'"),
			НСтр("ru = 'Выгрузка не выполнена';
				|en = 'Export failed'"));
			
	Элементы.НадписьВариантовПродолжения.Заголовок = 
		?(СтатусВыполненнойЗагрузки,
			НСтр("ru = 'Нажмите кнопку ""Готово"" для выхода из помощника.';
				|en = 'Click ""Finish"" to exit the wizard.'"),
			НСтр("ru = 'Для того чтобы попробовать загрузить еще раз, нажмите ""Назад"", для выхода из помощника, нажимите ""Готово""';
				|en = 'To try to import again, click ""Back""; click ""Finish"" to exit the wizard'"));
	
	ЗаполнитьИтоговуюИнформацию();
	
	Заголовок = НСтр("ru = 'Выгрузка модели бюджетирования.';
					|en = 'Budgeting model export.'");
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЭтоПереходДалее Тогда
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Выгрузка модели бюджетирования.';
					|en = 'Budgeting model export.'");
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПослеОткрытия()
	
	ДлительнаяОперация = ВыгрузитьНаСервере();
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьРезультат", ЭтотОбъект, АдресХранилища);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Функция ВыгрузитьНаСервере()
	
	ДанныеВыгрузки = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ТаблицаДанныеВыгрузки();
	
	ОбъектМД = Метаданные.Справочники.МоделиБюджетирования;
	ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, МодельБюджетирования, ЗначениеВМассив(МодельБюджетирования));
	
	ОбъектМД = Метаданные.Справочники.ПравилаЛимитовПоДаннымБюджетирования;
	ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, МодельБюджетирования, ЗначениеВМассив(МодельБюджетирования), "Владелец");
	
	ВыбранныеВидыБюджета = ПолучитьВыбранныеЭлементыОтбора(ВидыБюджетов, "Ссылка");
	Для Каждого ВидБюджета Из ВыбранныеВидыБюджета Цикл
		
		ОбъектМД = Метаданные.Справочники.ВидыБюджетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, ВидБюджета, ЗначениеВМассив(ВидБюджета));
		
		ОбъектМД = Метаданные.Справочники.ЭлементыФинансовыхОтчетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, ВидБюджета, ЗначениеВМассив(ВидБюджета), "Владелец");

		ВыгружаемыеПоказателиБюджетов = ВыгружаемыеПоказателиБюджетов(ВидБюджета);
		
		ОбъектМД = Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, ВидБюджета, ВыгружаемыеПоказателиБюджетов, "ПоказательБюджетов");

		ОбъектМД = Метаданные.РегистрыСведений.СвязиПоказателейБюджетов;
		ОбъектМДОтбора = Метаданные.Справочники.ПоказателиБюджетов;
		ИмяИзмеренияДляОтбора = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД);
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, ВидБюджета, ВыгружаемыеПоказателиБюджетов, ИмяИзмеренияДляОтбора);
		
		ВыгружаемыеСтатьиБюджетов = ВыгружаемыеСтатьиБюджетов(ВидБюджета);
		
		ОбъектМД = Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, ВидБюджета, ВыгружаемыеСтатьиБюджетов, "СтатьяБюджетов");

		ОбъектМД = Метаданные.РегистрыСведений.СвязиПоказателейБюджетов;
		ОбъектМДОтбора = Метаданные.Справочники.СтатьиБюджетов;
		ИмяИзмеренияДляОтбора = ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД);
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, ВидБюджета, ВыгружаемыеСтатьиБюджетов, ИмяИзмеренияДляОтбора);
		
		ВыгружаемыеШаблоныВводаНефинансовыхПоказателей = ВыгружаемыеШаблоныВводаНефинансовыхПоказателей(ВидБюджета);
		ОбъектМД = Метаданные.Справочники.ШаблоныВводаНефинансовыхПоказателей;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, ВидБюджета, ВыгружаемыеШаблоныВводаНефинансовыхПоказателей);

	КонецЦикла;
	
	//++ НЕ УТКА
	ВыбранныеЭтапыПодготовкиБюджета = ПолучитьВыбранныеЭлементыОтбора(ЭтапыПодготовкиБюджетов, "Ссылка");
	Для Каждого ЭтапПодготовкиБюджета Из ВыбранныеЭтапыПодготовкиБюджета Цикл
		ОбъектМД = Метаданные.Справочники.ЭтапыПодготовкиБюджетов;
		ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, ЭтапПодготовкиБюджета, ЗначениеВМассив(ЭтапПодготовкиБюджета));
	КонецЦикла;
	//-- НЕ УТКА
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДанныеВыгрузки", ДанныеВыгрузки);
	ПараметрыЗадания.Вставить("ЭтоМодельБюджетирования", Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("АдресХранилища", АдресХранилища);
	
	ИмяМетода = "ВыгрузкаЗагрузкаМоделейМеждународногоУчетаИБюджетирования.ВыгрузитьМодельУчета";
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = СинонимОбработки();
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(НастройкиЗапуска, ИмяМетода, ПараметрыЗадания);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ЕстьОшибки = Не СтатусВыполненнойЗагрузки;
	
	Элементы.ПодробнаяИнформация.Видимость = ЕстьОшибки;
	Элементы.Информация.Видимость = ЕстьОшибки;
	Если ЕстьОшибки Тогда
		Информация =  НСтр("ru = 'Ошибка:';
							|en = 'Error:'") + Символы.ПС + ПротоколОбмена.ПолучитьТекст();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьФоновоеЗадание(ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		ФоновоеЗадание.Отменить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Сообщения") И Результат.Сообщения <> Неопределено Тогда
			Для каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Свойство("Статус") Тогда
			Если Результат.Статус = "Ошибка" Тогда
				СтатусВыполненнойЗагрузки = Ложь;
				ПротоколОбмена.УстановитьТекст(Результат.КраткоеПредставлениеОшибки);
			ИначеЕсли Результат.Статус = "Выполнено" Тогда
				СтатусВыполненнойЗагрузки = Истина;
				ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, ДополнительныеПараметры, Объект.ИмяФайлаМодели);
			КонецЕсли;
			ИзменитьПорядковыйНомерПерехода(+1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт 
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Фильтр =  НСтр("ru = 'Файл выгрузки';
										|en = 'Export file'") + "(*.xml)|*.xml";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь к файлу выгрузки модели учета';
										|en = 'Select a path to the file of accounting model export'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаМоделиПоказатьДиалогЗавершение",
		ЭтотОбъект);
		
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиПоказатьДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайлаМодели = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеМоделиБюджетирования()
	
	ЗаполнитьДеревоВидовБюджетов();
	Если Не ЭтоКА Тогда
		ЗаполнитьДеревоЭтапыПодготовкиБюджетов();
	КонецЕсли;
	
	// Раскроем верхний уровень дерева
	ЭлементыДерева = ВидыБюджетов.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ВидыБюджетов.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	ЭлементыДерева = ЭтапыПодготовкиБюджетов.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ЭтапыПодготовкиБюджетов.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоВидовБюджетов()
	
	Компоновка = Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.ПолучитьМакет("ВидыБюджетов");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Компоновка));
	КомпоновщикНастроек.ЗагрузитьНастройки(Компоновка.НастройкиПоУмолчанию);
	
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек.Настройки, "Владелец", МодельБюджетирования);
	
	РезультатДерево = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(Компоновка,КомпоновщикНастроек.Настройки,, Истина);
	
	ЗначениеВРеквизитФормы(РезультатДерево, "ВидыБюджетов");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЭтапыПодготовкиБюджетов()
	
	Если Не ИспользоватьБюджетныйПроцесс Тогда
		Возврат;
	КонецЕсли;
	
	Компоновка = Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.ПолучитьМакет("ЭтапыПодготовкиБюджетов");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Компоновка));
	КомпоновщикНастроек.ЗагрузитьНастройки(Компоновка.НастройкиПоУмолчанию);
	
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек.Настройки, "Владелец", МодельБюджетирования);
	
	РезультатДерево = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(Компоновка,КомпоновщикНастроек.Настройки,, Истина);
	
	ЗначениеВРеквизитФормы(РезультатДерево, "ЭтапыПодготовкиБюджетов");
	
КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока - СтрокаДереваЗначений - Строка дерева
//  ИмяФлажка - Строка - Имя колонки дерева
// 
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока - СтрокаДереваЗначений - Строка дерева
//  ИмяФлажка - Строка - Имя колонки дерева
// 
&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныеЭлементыОтбора(ДеревоОтбора,ИмяКолонки)
	
	ВыбранныеЗначения = Новый Массив;
	ЭлементыДерева = ДеревоОтбора.ПолучитьЭлементы();
	Для Каждого ЭлементыДерева Из ЭлементыДерева Цикл
		Если ЭлементыДерева.Флаг Тогда
			ВыбранныеЗначения.Добавить(ЭлементыДерева[ИмяКолонки]);
			ПодчиненныеЗначения = ПолучитьВыбранныеЭлементыОтбора(ЭлементыДерева,ИмяКолонки);
			Для Каждого Значение Из ПодчиненныеЗначения Цикл
				ВыбранныеЗначения.Добавить(Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеЗначения;
	
КонецФункции

&НаСервере
Функция ВыгружаемыеПоказателиБюджетов(ВидБюджета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель КАК ПоказательБюджета
		|ИЗ
		|	Справочник.ВидыБюджетов.КэшСтатейИПоказателей КАК ВидыБюджетовКэшСтатейИПоказателей
		|ГДЕ
		|	ВидыБюджетовКэшСтатейИПоказателей.Ссылка = &ВидБюджета
		|	И ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.ПоказателиБюджетов";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	ПоказателиБюджетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПоказательБюджета");
	
	Возврат ПоказателиБюджетов;
	
КонецФункции

&НаСервере
Функция ВыгружаемыеСтатьиБюджетов(ВидБюджета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель КАК СтатьяБюджета
		|ИЗ
		|	Справочник.ВидыБюджетов.КэшСтатейИПоказателей КАК ВидыБюджетовКэшСтатейИПоказателей
		|ГДЕ
		|	ВидыБюджетовКэшСтатейИПоказателей.Ссылка = &ВидБюджета
		|	И ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.СтатьиБюджетов";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	ВыгружаемыеСтатьиБюджетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяБюджета");
	
	Возврат ВыгружаемыеСтатьиБюджетов;
	
КонецФункции

&НаСервере
Функция ВыгружаемыеШаблоныВводаНефинансовыхПоказателей(ВидБюджета)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель КАК НефинансовыйПоказательБюджета
	               |ПОМЕСТИТЬ НефинансовыеПоказателиБюджетов
	               |ИЗ
	               |	Справочник.ВидыБюджетов.КэшСтатейИПоказателей КАК ВидыБюджетовКэшСтатейИПоказателей
	               |ГДЕ
	               |	ВидыБюджетовКэшСтатейИПоказателей.Ссылка = &ВидБюджета
	               |	И ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.НефинансовыеПоказателиБюджетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ШаблоныВводаНефинансовыхПоказателейПоказателиШаблона.Ссылка КАК ШаблонВводаНефинансовыхПоказателей
	               |ИЗ
	               |	НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВводаНефинансовыхПоказателей.ПоказателиШаблона КАК ШаблоныВводаНефинансовыхПоказателейПоказателиШаблона
	               |		ПО НефинансовыеПоказателиБюджетов.НефинансовыйПоказательБюджета.Ссылка = ШаблоныВводаНефинансовыхПоказателейПоказателиШаблона.Показатель
	               |ГДЕ
	               |	НЕ ШаблоныВводаНефинансовыхПоказателейПоказателиШаблона.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	ПоказателиБюджетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШаблонВводаНефинансовыхПоказателей");
	
	Возврат ПоказателиБюджетов;
	
КонецФункции

&НаСервере
Функция СинонимОбработки()
	Возврат Метаданные.Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.Синоним;
КонецФункции

&НаСервере
Функция ЗначениеВМассив(Значение)

	Массив = Новый Массив;
	Массив.Добавить(Значение);
	Возврат Массив;

КонецФункции
#КонецОбласти

#КонецОбласти
