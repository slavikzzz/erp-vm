
#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем МенеджерКриптографии;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализация(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытии_ПослеПолученияКонтекста", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ПрограммноеЗакрытие Тогда
		БольшеНеПоказыватьБС = Истина;
	КонецЕсли;
	
	Если ЭтоТолькоНастройка Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗакрытием_Завершение", 
		ЭтотОбъект);
		
	ТекстПредупреждения = НСтр("ru = 'Прервать работу помощника?
                                |
                                |Помощник всегда можно запустить из раздела ""Главное"" - ""Прочее"" - ""Первый запуск""';
                                |en = 'Прервать работу помощника?
                                |
                                |Помощник всегда можно запустить из раздела ""Главное"" - ""Прочее"" - ""Первый запуск""'");
	
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, 
		Отказ, 
		ЗавершениеРаботы,
		ТекстПредупреждения, 
		"ПрограммноеЗакрытие",
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ОтслеживаниеСобытийУстройствUSBвключено
		И Источник = "CCrypt" 
		И Данные = "Подключение устройства" 
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкаСистемы Тогда
		
		СоставТокеновИзменился = Ложь;
		Если СтрНайти(ВРег(Событие), ВРег("Rutoken")) Тогда
			Рутокен_ЕстьВКомпьютере   = Истина;
			УстановитьДрайверРутокена = НЕ Рутокен_УстановленДрайвер;
			СоставТокеновИзменился    = Истина;
		КонецЕсли;
		
		Если СтрНайти(ВРег(Событие), ВРег("JaCarta")) Тогда
			Джакарта_ЕстьВКомпьютере  = Истина;
			УстановитьДрайверДжакарта = НЕ Джакарта_УстановленДрайвер;
			СоставТокеновИзменился    = Истина;
		КонецЕсли;
		
		Если СоставТокеновИзменился Тогда
			ИзменитьОформлениеСсылокДрайверов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытьРодителя" И СтрНайти(Источник.ИмяФормы, "ФормаСозданияОрганизации") Тогда
		ПодключитьОбработчикОжидания("Подключаемый_Закрыть", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "Активизировать быстрый старт" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ДополнительнаяАктивизация", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницаОбъектНастройки_НаТокенеИлиФлешке_ЗаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.ЧтоТакоеТокен");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредставлениеСпискаОрганизацийНажатие_ПослеВыбора", 
		ЭтотОбъект);
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СписокОрганизаций", СписокОрганизаций);
		
	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.ВыборОрганизации",ДополнительныеПараметры,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстТокенРуководителяЗаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.ЧтоТакоеТокен");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПоПодключениюРуководителяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.ФормаГосУЦ");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияУстановитьКриптопровайдерОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначенияКлиент.ЭтоLinuxКлиент() Тогда
		ОткрытьИнструкацию("УстановкаКриптоПроCSPнаLinux");
	ИначеЕсли ОбщегоНазначенияКлиент.ЭтоMacOSКлиент() Тогда
		ОткрытьИнструкацию("УстановкаКриптоПроCSPнаMacOS");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияУстановитьДрайверТокенаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначенияКлиент.ЭтоLinuxКлиент() Тогда
		ОткрытьИнструкацию("УстановкаДайвераТокенаLinux");
	ИначеЕсли ОбщегоНазначенияКлиент.ЭтоMacOSКлиент() Тогда
		ОткрытьИнструкацию("УстановкаДайвераТокенаMacOS");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборСертификата_НеУстановленыКомпонентыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьНастройкуСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВосстановлениеПароляНажатие(Элемент)

	Если ЕстьБИП Тогда
		
		МодульИнтернетПоддержкаПользователейКлиент = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
			
		МодульИнтернетПоддержкаПользователейКлиентСервер = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиентСервер");
	
		МодульИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			МодульИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/remind_request"),
			НСтр("ru = 'Восстановление пароля';
				|en = 'Восстановление пароля'"));
			
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ГиперссылкаРегистрацияНажатие(Элемент)
	
	Если ЕстьБИП Тогда
		
		МодульИнтернетПоддержкаПользователейКлиент = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
			
		МодульИнтернетПоддержкаПользователейКлиентСервер = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиентСервер");
	
		МодульИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			МодульИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/registration"),
			НСтр("ru = 'Регистрация';
				|en = 'Регистрация'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаУстановитьКриптопровайдерОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредупредитьОКонфликтеПрограммЗащиты_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_КонфликтКриптопровайдеров",
		,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУстановитьКриптопровайдерОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "CryptoPro" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://www.cryptopro.ru/");
	ИначеЕсли НавигационнаяСсылка = "VipNet" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://infotecs.ru/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУстановитьДрайверТокенаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "Рутокен" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://www.rutoken.ru/support/download/windows/");
	ИначеЕсли НавигационнаяСсылка = "JaCarta" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://www.aladdin-rd.ru/support/downloads/jacarta_client/");
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ХранениеНаТокенеИлиФлешкеНажатие(Элемент)

	НетСертификатов = Ложь;
	МодельХраненияЗакрытогоКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч");
	
	ПриНажатииКнопкиМестаХранения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранениеНаКомпьютереНажатие(Элемент)

	НетСертификатов = Ложь;
	МодельХраненияЗакрытогоКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч");
	ПриНажатииКнопкиМестаХранения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранениеВПрограммеНажатие(Элемент)

	НетСертификатов = Ложь;
	МодельХраненияЗакрытогоКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ВМоделиСервиса");
	ПриНажатииКнопкиМестаХранения(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ХранениеВПрограммеНажатие_ПослеАвторизации(Результат, ВходящийКонтекст) Экспорт

	Если Результат = Неопределено Тогда
		СообщитьОбОтсутствииПодходящихСертификатов();
		Возврат;
	КонецЕсли;
	
	ТелефонМобильныйДляПаролей = Результат.ТелефонМобильныйДляПаролей;
	ПроверкаТелефонДляПаролей  = Результат.ПроверкаТелефонДляПаролей;
	ТелефонМобильный = ТелефонМобильныйДляПаролей;
	
	РезультатПолучения = УдалосьПолучитьСписокОблачныхСертификатов();
	
	Если РезультатПолучения.Выполнено Тогда
		
		СертификатыСырыеДанные = ОблачныеСертификатыКалуги.Скопировать();
		ЗаполнитьИПоказатьТаблицуВыбораСертификатов();
		
	Иначе
		СообщитьОбОтсутствииПодходящихСертификатов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалосьПолучитьСписокОблачныхСертификатов() Экспорт
	
	Возврат ОбработкаЗаявленийАбонента.УдалосьПолучитьСписокОблачныхСертификатов(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ХранениеDSSНажатие(Элемент)
	
	НетСертификатов = Ложь;
	МодельХраненияЗакрытогоКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись");
	
	ВключитьDSSНаСервере();
	
	ПриНажатииКнопкиМестаХранения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранениеНетСертификатаНажатие(Элемент)
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОчиститьВключаемыйСертификат(ЭтотОбъект); 

	СтрокаПоиска = "";
	НетСертификатов = Истина;
	
	МодельХраненияЗакрытогоКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч");
	ПриНажатииКнопкиМестаХранения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КарандашУстановитьКриптопровайдерНажатие(Элемент)
	
	ПараметрыФормы = 
		"КриптопровайдерПриКонфликте,
		|ТипКриптопровайдера";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеВыбораКриптопровайдера", 
		ЭтотОбъект, 
		ДополнительныеПараметры);

	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.ВыборКриптопровайдера", ДополнительныеПараметры,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКриптопровайдера(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, ПараметрыФормы, "ПараметрыФормы");
	
	ИзменитьОформлениеСсылкиКриптопровайдера();
	
КонецПроцедуры

&НаКлиенте
Процедура КарандашУстановитьДрайверТокенаНажатие(Элемент)
	
	ПараметрыФормы = 
		"УстановитьДрайверДжакарта,
		|УстановитьДрайверРутокена";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеВыбораДрайвераТокена", 
		ЭтотОбъект, 
		ДополнительныеПараметры);

	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.ВыборДрайвераТокена", ДополнительныеПараметры,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДрайвераТокена(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, ПараметрыФормы, "ПараметрыФормы");
	
	УстановитьДрайверТокена = УстановитьДрайверДжакарта ИЛИ УстановитьДрайверРутокена;
	
	ИзменитьОформлениеСсылокДрайверов();
	
	СкрытьЕслиУстановлен(
		?(ЭтоLinux, "УстановитьДрайверТокенаMacOs", "УстановитьДрайверТокена"),
		ДрайверТокенаУстановлен()); 
		
	ИзменитьОформлениеКнопокНастройкиСистемыШаги3и4();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПросроченныеПриИзменении(Элемент)
	ПереформироватьТаблицуСертификатов();
КонецПроцедуры

&НаКлиенте
Процедура ГалкаУстановитьДрайверТокенаПриИзменении(Элемент)

	Если НЕ ДрайверТокенаУстановлен() И УстановитьДрайверТокена Тогда
		
		УказатьДрайверПоУмолчанию();
		ИзменитьОформлениеСсылокДрайверов();
		
	КонецЕсли;
	
	ИзменитьОформлениеКнопокНастройкиСистемыШаги3и4();
	
КонецПроцедуры

&НаКлиенте
Процедура ГалкаУстановитьКриптопровайдерПриИзменении(Элемент)
	
	ИзменитьОформлениеКнопокНастройкиСистемыШаги3и4();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекДанные.Base64) Тогда
			СертификатДляПоказа = Новый Структура("Адрес", АдресСертификата(ТекДанные.Base64));
		Иначе
			СертификатДляПоказа = Новый Структура("СерийныйНомер, Поставщик", ТекДанные.СерийныйНомер, ТекДанные.Поставщик);
			КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь, СертификатДляПоказа);
		КонецЕсли;
		
		КриптографияЭДКОКлиент.ПоказатьСертификат(СертификатДляПоказа);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НетСертификатаРуководителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НетСертификатаРуководителя_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.ЕслиНетСертификата",,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееКНастрокам(Команда)

	Если НЕ ХранитсяНаТокенеИлиФлешке И НЕ ХранитсяНаКомпьютере И НЕ ХранитсяВДругомМесте Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите, где хранятся ваши сертификаты';
														|en = 'Выберите, где хранятся ваши сертификаты'"),, "ХранитсяНаТокенеИлиФлешке");
		Возврат;
	КонецЕсли;
	
	НачатьНастройкуСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОрганизацию(Команда)

	ТолькоСозданиеОрганизации = Истина;
	ОткрытьФормуДобавленияОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИТС(Команда)
	
	Если Не ЗначениеЗаполнено(ЛогинИнтернетПоддержки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Введите логин';
																|en = 'Введите логин'"),, "ЛогинИнтернетПоддержки");
		
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(ПарольИнтернетПоддержки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Введите пароль';
																|en = 'Введите пароль'"),, "ПарольИнтернетПоддержки");
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьИнтернетПоддержку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИТСПозже(Команда)
	
	СохранитьНеПредлагатьПодключитьИТС();
	ВернутьсяКВыборуВидаВладельца(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗдесьНетНужнойОрганизации(Команда)

	ИНН = "";
	КПП = "";
	
	ТолькоСозданиеОрганизации = Ложь;
	
	ОткрытьФормуДобавленияОрганизацииПоПараметрам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкеСистемыУниверсальный(Команда)
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ЭтотОбъект);
	
	Если ЭтоРуководитель Тогда
		ПерейтиКНастройкеСистемыРуководитель(Команда);
	Иначе
		ПерейтиКНастройкеСистемыСотрудник(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкеСистемыСотрудник(Команда)

	ТолькоСозданиеОрганизации = Ложь;
	НачатьНастройкуСистемы();

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкеСистемыРуководитель(Команда)

	ТолькоСозданиеОрганизации = Ложь;
	НетСертификатов = Ложь;
	МодельХраненияЗакрытогоКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч");
	
	НачатьНастройкуСистемы();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификаты(Команда)

	Если ЭтоТолькоНастройка Тогда

		ПрограммноеЗакрытие = Истина;
		Закрыть();
		
	Иначе
		
		Если (ЭтоВыборСертификатаСТокена(ЭтотОбъект) ИЛИ ЭтоВыборСертификатаИзРегистра()) 
			И ЭтоКонфликтКриптопровайдеров() И НЕ ИгнорироватьКонфликт Тогда
			
			ВывестиОшибкуКонфликта();
			Возврат;
			
		КонецЕсли;
		
		ПерейтиНаСтраницуПоискаСертификата();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибкуКонфликта()
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Удалите один из криптопровайдеров.';
													|en = 'Удалите один из криптопровайдеров.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьНастройку(Команда)
	
	ПерейтиКОпределениюКриптопровайдераИДрайверов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьСейчас(Команда)
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		
		//#Если ТонкийКлиент Тогда
		//	КомандаСистемы("shutdown -r -t 0");
		//#КонецЕсли
		// ОперацииСФайламиЭДКОКлиент.ЗапуститьПриложениеНаКлиенте(, "cmd.exe ipconfig", Истина);
		ОбщегоНазначенияЭДКОКлиент.ПерезагрузитьКомпьютер();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСейчасШаги1и2(Команда)

	Если РасширенияРаботыСФайламиПодключено Тогда

		УстановитьРасширениеДляРаботыСКриптографиейПлатформы();
		
	Иначе
		
		ПоказатьБубликУстановки("УстановитьРасширениеДляРаботыСФайлами");
		ПоказатьЧасикиУстановки("УстановитьРасширениеДляРаботыСКриптографией");
		
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьРасширениеДляРаботыСФайлами", ПаузаОтЗалипания(), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСейчасШаги3и4(Команда)

	Если КриптопровайдерУстановлен() ИЛИ НЕ УстановитьКриптопровайдер Тогда
		
		УстановитьДрайверТокена();
		
	Иначе
		
		Если ЭтоКонфликтКриптопровайдеров() И НЕ ИгнорироватьКонфликт Тогда
			ВывестиОшибкуКонфликта();
			Возврат;
		КонецЕсли;
		
		ПоказатьБубликУстановки("УстановитьКриптопровайдер");
		ПоказатьЧасикиУстановки("УстановитьДрайверТокена");
		
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьКриптоПровайдер", ПаузаОтЗалипания(), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРуководителя(Команда)
	
	ПриВыбореРуководителя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудника(Команда = Неопределено)
	
	СделатьТолстыеРамки();
	
	СменитьТипВладельца(ЭтотОбъект, Ложь);
	
	Элементы.ХранениеВПрограмме.Видимость = ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	Элементы.ХранениеDSS.Видимость = ДоступнаЭлектроннаяОблачнаяПодпись;
	
	ИзменитьОформлениеКнопок_КтоПодключает_СтраницаСотрудник();
	
	АктивизироватьСтраницу(
		Элементы.СтраницыПомощника, 
		Элементы.СтраницаКтоПодключает);
	
	АктивизироватьСтраницу(
		Элементы.КтоПодключает_Страницы, 
		Элементы.КтоПодключает_СтраницаСотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКВыборуВидаВладельца(Команда)
	
	Организация = Неопределено;
	ОчиститьРеквизитыФормы();
	
	Если ЭтоТолькоНастройка Тогда
		
		АктивизироватьСтраницу(
			Элементы.СтраницыПомощника, 
			Элементы.СтраницаОбъектНастройки);
	
	ИначеЕсли ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ЭтотОбъект)
		ИЛИ НЕ ЗначениеЗаполнено(ВладелецЭЦПТип) Тогда
		
		ПриВыбореРуководителя(ЭтотОбъект);
		
	Иначе
		
		ВыбратьСотрудника();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискУчеток(Команда)
	
	ТекущиеДанные = Элементы.Сертификаты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.Валиден Тогда
			ПослеВыбораСертификата(ТекущиеДанные);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Истекший сертификат нельзя использовать для подключения к 1С-Отчетности';
											|en = 'Истекший сертификат нельзя использовать для подключения к 1С-Отчетности'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоискСертификатов(Команда)
	
	ПерейтиНаСтраницуПоискаСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКВыборуСертификата(Команда)
	
	ВернутьсяКСертификатамИлиВладельцу();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДрайверТокена

&НаКлиенте
Процедура УстановитьДрайверТокена(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт
	
	Если ДрайверТокенаУстановлен(Истина) ИЛИ НЕ УстановитьДрайверТокена Тогда
		
		ПоказатьРезультатУстановкиДрайверов();
		
	Иначе
		
		ПоказатьБубликУстановки("УстановитьДрайверТокена");
			
		Если УстановитьДрайверТокена И УстановитьДрайверРутокена Тогда
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьДрайверыРутокена", ПаузаОтЗалипания(), Истина);
		ИначеЕсли УстановитьДрайверТокена И УстановитьДрайверДжакарта Тогда
			УстановитьДрайверДжакарта();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьДрайверыРутокена() Экспорт
	
	СледующееДействие = Новый ОписаниеОповещения(
		"УстановитьДрайверДжакарта", 
		ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СледующееДействие", СледующееДействие);
	ДополнительныеПараметры.Вставить("ИмяЭлемента", "УстановитьДрайверТокена");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеУстановкиДрайверовРутокена", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОбщегоНазначенияЭДКОКлиент.УстановитьДрайверыРутокена(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиДрайверовРутокена(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		Рутокен_УстановленДрайвер = Истина;
		
		Если УстановитьДрайверТокена И УстановитьДрайверДжакарта Тогда
			УстановитьДрайверДжакарта();
		Иначе
			ПоказатьРезультатУстановкиДрайверов();
		КонецЕсли;
		
	Иначе
		
		ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст, Результат.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайверДжакарта(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт

	Если УстановитьДрайверТокена И УстановитьДрайверДжакарта Тогда
		
		ПоказатьБубликУстановки("УстановитьДрайверТокена");
		
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьДрайверДжакарта", ПаузаОтЗалипания(), Истина);
		
	Иначе
		ПоказатьРезультатУстановкиДрайверов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатУстановкиДрайверов(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт

	Если НЕ ЭтоКонфликтКриптопровайдеров() Тогда
		ЗаменитьКрасныйКрестНаГалку("УстановитьКриптопровайдер");
	КонецЕсли;
	
	// Условие нужно для случая, если была ошибка и чтобы она не затерлась
	Если ДрайверТокенаУстановлен(Истина) Тогда
		ПоказатьУспешнуюУстановку("УстановитьДрайверТокена");
	Иначе
		ЗаменитьКрасныйКрестНаГалку("УстановитьДрайверТокена");
	КонецЕсли;
	
	ИзменитьОформлениеКнопокНастройкиСистемыШаги3и4();
	
	ИзменитьОформлениеСсылокДрайверов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьДрайверДжакарта()
	
	СледующееДействие = Новый ОписаниеОповещения(
		"ПоказатьРезультатУстановкиДрайверов", 
		ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СледующееДействие", СледующееДействие);
	ДополнительныеПараметры.Вставить("ИмяЭлемента", "УстановитьДрайверТокена");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеУстановкиДрайвераДжакарта", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОбщегоНазначенияЭДКОКлиент.УстановитьДрайверДжакарта(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиДрайвераДжакарта(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Джакарта_УстановленДрайвер = Истина;
		ПоказатьРезультатУстановкиДрайверов();
	Иначе
		ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст, Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область КомпонентаКриптографии

&НаКлиенте
Процедура Подключаемый_УстановитьКриптоПровайдер() Экспорт
	
	СледующееДействие = Новый ОписаниеОповещения(
		"УстановитьДрайверТокена", 
		ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СледующееДействие", СледующееДействие);
	ДополнительныеПараметры.Вставить("ИмяЭлемента", "УстановитьКриптопровайдер");
	
	Оповещение = Новый ОписаниеОповещения("ПослеУстановкиКриптопровайдера", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
		ОбщегоНазначенияЭДКОКлиент.УстановитьCryptoProCSP(Оповещение, ЭтаФорма, Истина);
	ИначеЕсли ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
		ОбщегоНазначенияЭДКОКлиент.УстановитьViPNetCSP(Оповещение, ЭтаФорма, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиКриптопровайдера(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьКриптопровайдерыПослеУстановки", 
			ЭтотОбъект,
			ВходящийКонтекст);
		
		ОбработкаЗаявленийАбонентаКлиент.ЗаполнитьСписокКриптопровайдеров(
			ОписаниеОповещения, 
			КонтекстЭДОКлиент,
			ЭтотОбъект,
			Ложь);
			
	Иначе
		
		Если Результат.Свойство("ОписаниеОшибки") Тогда
			ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст, Результат.ОписаниеОшибки);
		Иначе
			ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст, "");
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьКриптопровайдерыПослеУстановки(Результат, ВходящийКонтекст) Экспорт
	
	Если КриптопровайдерУстановлен() Тогда
		
		ПоказатьУспешнуюУстановку("УстановитьКриптопровайдер");
			
		УстановитьДрайверТокена();
			
	Иначе
		
		ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область КомпонентаКриптографии

&НаКлиенте
Процедура УстановитьКомпонентуКриптографии(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт
	
	Если КомпонентаДляРаботыСКриптографиейПодключена Тогда
		
		ПоказатьРезультатУстановкиКомпонент();
		
	Иначе
		
		ПоказатьБубликУстановки("УстановитьРасширениеДляРаботыСКриптографией");
	
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьКомпонентуКриптографии", ПаузаОтЗалипания(), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановкуПрограммКриптографииБСП(ОписаниеОповещения, УстанавливатьКомпоненту) Экспорт
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ПроверяемыеПрограммы", Истина);
	ПараметрыПроверки.Вставить("УстанавливатьКомпоненту", УстанавливатьКомпоненту);
	ПараметрыПроверки.Вставить("УстанавливатьРасширение", Ложь);
	ПараметрыПроверки.Вставить("ПроверятьНаСервере", Ложь);
	ПараметрыПроверки.Вставить("РасширенноеОписание", Истина);
		
	ЭлектроннаяПодписьКлиент.ПроверитьУстановкуПрограммКриптографии(ЭтотОбъект, ПараметрыПроверки, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКомпонентуКриптографии() Экспорт

	СледующееДействие = Новый ОписаниеОповещения(
		"ПоказатьРезультатУстановкиКомпонент", 
		ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СледующееДействие", СледующееДействие);
	ДополнительныеПараметры.Вставить("ИмяЭлемента", "УстановитьРасширениеДляРаботыСКриптографией");
	
	Если ЭтоLinux Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеУстановкиКомпонентыКриптографииБСП", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ПроверитьУстановкуПрограммКриптографииБСП(ОписаниеОповещения, Истина);
		
	Иначе
		
		УстановитьКомпонентуКриптографииБРО(Неопределено, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиКомпонентыКриптографииБСП(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.КомпонентаУстановлена Тогда
		
		Если Результат.Программы.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"УстановитьКомпонентуКриптографииБРО", 
				ЭтотОбъект);
			
			ЗаполнитьСписокПрограммИСтандартныеПути(ОписаниеОповещения, Результат.Программы);
			
		Иначе
		
			ПутьВК = ДокументооборотСКОКлиент.ПолучитьПутьВК();

			Оповещение = Новый ОписаниеОповещения(
				"ПослеУстановкиВнешнейКомпонентыКриптографииБРО", 
				ЭтотОбъект, 
				ВходящийКонтекст,
				"ПриОшибкеУстановкиКомпонентыКриптографииБРО",
				ЭтотОбъект);
				
			НачатьУстановкуВнешнейКомпоненты(Оповещение, ПутьВК);
			
		КонецЕсли;
		
	Иначе
		
		ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст, Результат.Ошибка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОшибкеУстановкиКомпонентыКриптографииБРО(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиВнешнейКомпонентыКриптографииБРО(ВходящийКонтекст) Экспорт
	
	КомпонентаДляРаботыСКриптографиейПодключена = Истина;
	ПоказатьРезультатУстановкиКомпонент();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПрограммНаСервере(Программы)
	
	ПараметрДляЗаполнитьСписокПрограмм = Новый Массив;
	Для Каждого Программа Из Программы Цикл
		НовоеОписаниеПрограммы = ЭлектроннаяПодпись.НовоеОписаниеПрограммы();
		ЗаполнитьЗначенияСвойств(НовоеОписаниеПрограммы, Программа);
		ПараметрДляЗаполнитьСписокПрограмм.Добавить(НовоеОписаниеПрограммы);
	КонецЦикла;
	
	ЭлектроннаяПодпись.ЗаполнитьСписокПрограмм(ПараметрДляЗаполнитьСписокПрограмм);
	
	ЗаполнитьСсылкуНаПрограмму(Программы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкуНаПрограмму(Программы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрограммыЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка,
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы КАК ИмяПрограммы
		|ИЗ
		|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|ГДЕ
		|	НЕ ПрограммыЭлектроннойПодписиИШифрования.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для Каждого Программа Из Программы Цикл
			Если НЕ ЗначениеЗаполнено(Программа.Ссылка) Тогда
				Если Выборка.ИмяПрограммы = Программа.ИмяПрограммы Тогда
					Программа.Ссылка = Выборка.Ссылка; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуКриптографииБРО(Результат, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеУстановкиКомпонентыКриптографии",
		ЭтотОбъект,
		ВходящийКонтекст,
		"ПриОшибкеУстановкиКомпонента",
		ЭтотОбъект);
	
	ОбработкаЗаявленийАбонентаКлиент.ЗаполнитьСписокКриптопровайдеров(
		Оповещение, 
		КонтекстЭДОКлиент,
		ЭтотОбъект,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиКомпонентыКриптографии(Подключено, ВходящийКонтекст) Экспорт
	
	Если КомпонентаДляРаботыСКриптографиейПодключена Тогда
		
		ПоказатьРезультатУстановкиКомпонент();
		
	Иначе
		
		ВывестиОшибкуУстановкиКомпонента(
			ВходящийКонтекст, 
			ТекстОшибкиПодключенияКомпоненты);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатУстановкиКомпонент(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт
	
	Если РасширенияКриптографииУстановлены() Тогда
		ПоказатьУспешнуюУстановку("УстановитьРасширениеДляРаботыСКриптографией");
	Иначе
		ЗаменитьКрасныйКрестНаГалку("УстановитьРасширениеДляРаботыСКриптографией");
	КонецЕсли;
	
	ЗаменитьКрасныйКрестНаГалку("УстановитьРасширениеДляРаботыСФайлами");
	
	ИзменитьОформлениеКнопокНастройкиСистемыШаги1и2();
	
КонецПроцедуры

#КонецОбласти

#Область РасширениеДляРаботыСКриптографиейПлатформы

&НаКлиенте
Процедура УстановитьРасширениеДляРаботыСКриптографиейПлатформы(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт
	
	Если РасширениеРаботыСКриптографиейПлатформыПодключено Тогда
		
		УстановитьКомпонентуКриптографии();
		
	Иначе
		
		ПоказатьБубликУстановки("УстановитьРасширениеДляРаботыСКриптографией");
	
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьРасширениеДляРаботыСКриптографиейПлатформы", ПаузаОтЗалипания(), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьРасширениеДляРаботыСКриптографиейПлатформы() Экспорт
	
	СледующееДействие = Новый ОписаниеОповещения(
		"УстановитьКомпонентуКриптографии", 
		ЭтотОбъект);
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СледующееДействие", СледующееДействие);
	ДополнительныеПараметры.Вставить("ИмяЭлемента", "УстановитьРасширениеДляРаботыСКриптографией");
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеУстановкиРасширенияРаботыСКриптографией",
		ЭтотОбъект,
		ДополнительныеПараметры,
		"ПриОшибкеУстановкиКомпонента",
		ЭтотОбъект);
	
	НачатьУстановкуРасширенияРаботыСКриптографией(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияРаботыСКриптографией(ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеПодключенияРасширенияРаботыСКриптографией",
		ЭтотОбъект,
		ВходящийКонтекст,
		"ПриОшибкеУстановкиКомпонента",
		ЭтотОбъект);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияРаботыСКриптографией(Подключено, ВходящийКонтекст) Экспорт
	
	Если Подключено Тогда
		
		РасширениеРаботыСКриптографиейПлатформыПодключено = Истина;
		
		УстановитьКомпонентуКриптографии();
		
	Иначе
		
		ВывестиОшибкуУстановкиКомпонента(
			ВходящийКонтекст, 
			НСтр("ru = 'Расширение установлено, но не удалось его подключить';
				|en = 'Расширение установлено, но не удалось его подключить'"));
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область РасширениеДляРаботыСФайлами

&НаКлиенте
Процедура Подключаемый_УстановитьРасширениеДляРаботыСФайлами()
	
	СледующееДействие = Новый ОписаниеОповещения(
		"УстановитьРасширениеДляРаботыСКриптографиейПлатформы", 
		ЭтотОбъект);
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СледующееДействие", СледующееДействие);
	ДополнительныеПараметры.Вставить("ИмяЭлемента", "УстановитьРасширениеДляРаботыСФайлами");
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеУстановкиРасширенияРаботыСФайлами",
		ЭтотОбъект,
		ДополнительныеПараметры,
		"ПриОшибкеУстановкиКомпонента",
		ЭтотОбъект);
		
	НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияРаботыСФайлами(ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеПодключенияРасширенияРаботыСФайлами",
		ЭтотОбъект,
		ВходящийКонтекст,
		"ПриОшибкеУстановкиКомпонента",
		ЭтотОбъект);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст) Экспорт
	
	Если Подключено Тогда
		
		РасширенияРаботыСФайламиПодключено = Истина;
		
		ПоказатьУспешнуюУстановку(ВходящийКонтекст.ИмяЭлемента);
			
		УстановитьРасширениеДляРаботыСКриптографиейПлатформы();
		
	Иначе
		
		ВывестиОшибкуУстановкиКомпонента(
			ВходящийКонтекст, 
			НСтр("ru = 'Расширение установлено, но не удалось его подключить';
				|en = 'Расширение установлено, но не удалось его подключить'"));
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_Закрыть()
	
	ПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОшибкеУстановкиКомпонента(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст, ИнформацияОбОшибке) // асинх
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибкуУстановкиКомпонента(ВходящийКонтекст, Ошибка = "") Экспорт
	
	СледующееДействие = ВходящийКонтекст.СледующееДействие;
	ИмяЭлемента = ВходящийКонтекст.ИмяЭлемента;
	
	Если ТипЗнч(Ошибка) = Тип("ИнформацияОбОшибке") Тогда
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(Ошибка);
	Иначе
		ПредставлениеОшибки = Ошибка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось установить по причине: 
					   |%1';
					   |en = 'Не удалось установить по причине: 
					   |%1'"),
			ПредставлениеОшибки);
			
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не удалось установить';
							|en = 'Не удалось установить'");
			
	КонецЕсли;
	
	ТекстОшибки = Новый ФорматированнаяСтрока(ТекстОшибки,,КрасныйЦветОшибки);
		
	ОтобразитьСостояниеКомпонента(
		ИмяЭлемента, 
		,
		ТекстОшибки);
		
	ВыполнитьОбработкуОповещения(СледующееДействие, Ложь);
	
КонецПроцедуры

&НаСервере
Функция АдресСертификата(Base64) 
	
	ДвДанные = Base64Значение(Base64);
	Адрес = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
	
	Возврат Адрес;
		
КонецФункции

&НаКлиенте
Процедура ПерейтиНаСтраницуПоискаСертификата()
	
	Если ЭтоLinux Тогда // Обход ошибки платформы
		Элементы.ВыборСертификата_Линейка.Картинка = БиблиотекаКартинок.БСлинейка2Статика;
	КонецЕсли;
	
	АктивизироватьСтраницу(
		Элементы.СтраницыПомощника, 
		Элементы.СтраницаВыборСертификата);
		
	АктивизироватьСтраницу(
		Элементы.ВыборСертификата_Страницы, 
		Элементы.ВыборСертификата_СтраницаБублик);
		
	Элементы.ВыборСертификата_Заголовок.Заголовок = НСтр("ru = 'Поиск сертификатов';
														|en = 'Поиск сертификатов'");
		
	ПаузаДляАнимации = ПаузаДляАнимацииЛинейки();
		
	Если НельзяИскатьСертификаты() Тогда
			
		СообщитьОбОтсутствииПодходящихСертификатов();
			
	ИначеЕсли ЭтоВыборСертификатаСТокена(ЭтотОбъект) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_НачатьПоискСертификатовСТокена", ПаузаДляАнимации, Истина);
		
	ИначеЕсли МодельХраненияЗакрытогоКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч") Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_НачатьПоискСертификатовИзРеестра", ПаузаДляАнимации, Истина);
		
	ИначеЕсли ЭтоВыборСертификатаИзПрограммы() Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуПодтвержденияТелефона", ПаузаДляАнимации, Истина);
		
	ИначеЕсли ЭтоВыборСертификатаИзDSS() Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ВосстановитьОблачнуюПодпись", ПаузаДляАнимации, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВосстановитьОблачнуюПодпись()
	
	ОповещениеСледующее = Новый ОписаниеОповещения("ПослеВосстановленияОблачнойУчетнойЗаписи", ЭтотОбъект);
	КонтекстЭДОКлиент.ОткрытьВосстановлениеОблачнойПодписи(ОповещениеСледующее, Неопределено, , , Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуПодтвержденияТелефона()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТелефонМобильныйДляПаролей", ТелефонМобильныйДляПаролей);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ХранениеВПрограммеНажатие_ПослеАвторизации", 
		ЭтотОбъект);
		
	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.ПодтверждениеТелефона", ДополнительныеПараметры,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьПоискСертификатовИзРеестра()
	
	// Вывод таблицы сертификатов будет в методе ОткрытьСписокЛокальныхСертификатовКалуги
	
	ОписаниеОповещения = Новый ОписаниеОповещения();
	КонтекстЭДОКлиент.ПолучитьИОткрытьСписокЛокальныхСертификатовКалуги(ЭтотОбъект, ОписаниеОповещения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьПоискСертификатовСТокена()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредложитьВыборСертификатаСТокена", 
		ЭтотОбъект);
		
	ДополнительныеПараметры = ОбработкаЗаявленийАбонентаКлиент.ШаблонПаметровПолученияСертификатовСТокена();
	ДополнительныеПараметры.Форма = ЭтотОбъект;
	ДополнительныеПараметры.ОповещениеОЗавершении = ОписаниеОповещения;
	ДополнительныеПараметры.ДействиеПриПолучении = ОписаниеОповещения;
		
	ОбработкаЗаявленийАбонентаКлиент.ПолучитьСертификатыСТокенаПоКонтексту(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьВыборСертификатаСТокена(Результат, ВходящийКонтекст) Экспорт
	
	СертификатыСырыеДанные = Новый ФиксированныйМассив(Результат.Сертификаты);
	ЗаполнитьИПоказатьТаблицуВыбораСертификатов();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИПоказатьТаблицуВыбораСертификатов() Экспорт
	
	ЗаполнитьТаблицуВыбораСертификатов();
	
	Если Сертификаты.Количество() = 0 Тогда
		
		СообщитьОбОтсутствииПодходящихСертификатов();
	
	ИначеЕсли Сертификаты.Количество() = 1 Тогда
		
		ПослеВыбораСертификата(Сертификаты[0]);
		
	Иначе
		
		ПоказатьТаблицуВыбораСертификатов();
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуВыбораСертификатов() Экспорт
	
	Если ЭтоВебКлиент Тогда
		Элементы.СертификатыПояснение.АвтоВысотаЯчейки = Ложь;
		Элементы.СертификатыПояснение.Высота = 3;
		Элементы.СертификатыЗаголовокПояснения.Шрифт = Новый Шрифт();
	КонецЕсли;
	
	АктивизироватьСтраницу(
		Элементы.СтраницыПомощника, 
		Элементы.СтраницаВыборСертификата);
	
	АктивизироватьСтраницу(
		Элементы.ВыборСертификата_Страницы, 
		Элементы.ВыборСертификата_СтраницаСертификаты);
		
	Элементы.ВыборСертификата_Заголовок.Заголовок = НСтр("ru = 'Выбор сертификата';
														|en = 'Выбор сертификата'");
		
	АктивизироватьСтраницу(
		Элементы.ВыборСертификата_СтраницаРезультатаПоиска, 
		Элементы.ВыборСертификата_СертификатыНайдены);
		
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьТаблицуСертификатов()
	
	ТекущийСертификат = ЗапомнитьТекущейСертификат();
	ЗаполнитьТаблицуВыбораСертификатов();
	СпозиционироватьсяНаТекущемСертификате(ТекущийСертификат);
	
КонецПроцедуры

&НаКлиенте
Функция ЗапомнитьТекущейСертификат()
	
	// запоминаем текущий сертификат
	Если Элементы.Сертификаты.ТекущиеДанные <> Неопределено Тогда
		ТекущийСертификат = Элементы.Сертификаты.ТекущиеДанные.СерийныйНомер;
	КонецЕсли;
	
	Возврат ТекущийСертификат;
	
КонецФункции

&НаКлиенте
Процедура СпозиционироватьсяНаТекущемСертификате(ТекущийСертификат)
	
	// устанавливаем текущий сертификат
	Если ТекущийСертификат <> Неопределено Тогда
		СтрокаСертификат = Сертификаты.НайтиСтроки(Новый Структура("СерийныйНомер", ТекущийСертификат));
		Если СтрокаСертификат.Количество() > 0 Тогда
			Элементы.Сертификаты.ТекущаяСтрока = СтрокаСертификат[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПояснениеСертификата(НоваяСтрока, Владелец)
	
	ЭтоЮЛ = ЗначениеЗаполнено(НоваяСтрока.ИННЮЛ);
	
	ЗаголовокПроПериодДействия = НСтр("ru = 'Срок действия';
										|en = 'Срок действия'") + Символы.ПС;
	Если НоваяСтрока.Валиден Тогда
		
		ТекстПроПериодДействия = НСтр("ru = 'Действует c %1 по %2';
										|en = 'Действует c %1 по %2'") + Символы.ПС;
		
		ТекстПроПериодДействия = СтрШаблон(
			ТекстПроПериодДействия, 
			Формат(НоваяСтрока.ДатаНачала, "ДЛФ=D"), 
			Формат(НоваяСтрока.ДатаОкончания, "ДЛФ=D"));
			
	Иначе
		ТекстПроПериодДействия = НСтр("ru = 'Истек %1';
										|en = 'Истек %1'") + Символы.ПС;
		ТекстПроПериодДействия = СтрШаблон(ТекстПроПериодДействия, Формат(НоваяСтрока.ДатаОкончания, "ДЛФ=D"));
	КонецЕсли;
	
	ЗаголовокПроОГРНИП = "";
	ТекстПроОГРНИП = "";
	
	Если ЭтоЮЛ Тогда
		
		ЗаголовокПроИНН = НСтр("ru = 'ИНН организации';
								|en = 'ИНН организации'") + Символы.ПС;
		ЗаголовокПроРука = НСтр("ru = 'Руководитель';
								|en = 'Руководитель'") + Символы.ПС;
		
		ТекстПроИНН  = НоваяСтрока.ИННЮЛ + Символы.ПС;
		ТекстПроРука = НоваяСтрока.ФИО + Символы.ПС;
		
	Иначе
		
		ЗаголовокПроИНН = НСтр("ru = 'ИНН физ. лица';
								|en = 'ИНН физ. лица'") + Символы.ПС;
		ЗаголовокПроРука = "";
		
		ТекстПроИНН  = НоваяСтрока.ИННФЛ + Символы.ПС;
		ТекстПроРука = "";
		
		ОГРНИП = ДокументооборотСКОКлиентСервер.ОГРНСертификата(Владелец);
		
		Если ЗначениеЗаполнено(ОГРНИП) Тогда
			ЗаголовокПроОГРНИП = НСтр("ru = 'ОГРНИП: ';
										|en = 'ОГРНИП: '");
			ТекстПроОГРНИП = ОГРНИП;
		КонецЕсли;
		
	КонецЕсли;
	
	Пояснение = 
		ТекстПроПериодДействия
		+ ТекстПроИНН
		+ ТекстПроРука
		+ ТекстПроОГРНИП;
		
	ЗаголовокПояснения = 
		ЗаголовокПроПериодДействия
		+ ЗаголовокПроИНН
		+ ЗаголовокПроРука
		+ ЗаголовокПроОГРНИП; 
		
	НоваяСтрока.Пояснение = СокрЛП(Пояснение);
	НоваяСтрока.ЗаголовокПояснения = СокрЛП(ЗаголовокПояснения);

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьЗаголовокСертификата(НоваяСтрока)
	
	Если ЗначениеЗаполнено(НоваяСтрока.O) Тогда
		НоваяСтрока.Заголовок = НоваяСтрока.O;
	Иначе
		НоваяСтрока.Заголовок = НоваяСтрока.ФИО;
	КонецЕсли;
	
	НоваяСтрока.Заголовок = СтрЗаменитьВсе(НоваяСтрока.Заголовок, "Общество с ограниченной ответственностью", "ООО");
	НоваяСтрока.Заголовок = СтрЗаменитьВсе(НоваяСтрока.Заголовок, "Закрытое акционерное общество", "ЗАО");
	НоваяСтрока.Заголовок = СтрЗаменитьВсе(НоваяСтрока.Заголовок, "Открытое акционерное общество", "ОАО");
	НоваяСтрока.Заголовок = СтрЗаменитьВсе(НоваяСтрока.Заголовок, "Акционерное общество", "АО");

КонецПроцедуры

&НаКлиенте
Функция СтрЗаменитьВсе(Текст, Подстрока, Замена)
	
	Результат = СтрЗаменить(Текст, Подстрока, Замена);
	Результат = СтрЗаменить(Результат, ВРег(Подстрока), Замена);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьКартинкуСертификата(НоваяСтрока)
	
	Если НоваяСтрока.Валиден Тогда
		НоваяСтрока.Картинка = 1;
	Иначе
		НоваяСтрока.Картинка = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСертификата(СтрокаСертификата) Экспорт
	
	ПодключенныеОрганизации.Очистить();

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаписатьСертификатВФорму", 
		ЭтотОбъект);
			
	Если ЗначениеЗаполнено(СтрокаСертификата.Контейнер) Тогда
		
		ДвДанныеСертификата = Base64Значение(СтрокаСертификата.Base64);
		
		ДополнительныеПараметры = ОбработкаЗаявленийАбонентаКлиент.ШаблонПаметровПолученияСертификатовСТокена();
		ДополнительныеПараметры.Форма = ЭтотОбъект;
		ДополнительныеПараметры.ОповещениеОЗавершении = ОписаниеОповещения;
			
		ОбработкаЗаявленийАбонентаКлиент.УстановитьСертификатСТокена( 
			СтрокаСертификата.Контейнер, 
			ДополнительныеПараметры);
		
	ИначеЕсли ЭтоВыборСертификатаИзРегистра() Тогда

		Результат = Новый Структура();
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("ВыбранноеЗначение", СтрокаСертификата.Сертификат);
		
		ВходящийКонтекст = Новый Структура();
		ВходящийКонтекст.Вставить("ОповещениеОЗавершении", ОписаниеОповещения);
		ВходящийКонтекст.Вставить("Форма", ЭтотОбъект);

		КонтекстЭДОКлиент.ПослеВыбораЛокальногоСертификатаВЗаявлении(Результат, ВходящийКонтекст);
		
	ИначеЕсли ЭтоВыборСертификатаИзПрограммы() Тогда
		
		ВходящийКонтекст = Новый Структура();
		ВходящийКонтекст.Вставить("ОповещениеОЗавершении", ОписаниеОповещения);
		КонтекстЭДОКлиент.ОткрытьСписокОблачныхСертификатовКалуги_ПослеВыбора(СтрокаСертификата.Сертификат, ВходящийКонтекст);
		
	ИначеЕсли ЭтоВыборСертификатаИзDSS() Тогда
		
		Сертификат = ПолучитьПолноеОписаниеСертификата(СтрокаСертификата.Сертификат);
		
		РезультатВыбора = Новый Структура();
		РезультатВыбора.Вставить("Выполнено", Истина);
		РезультатВыбора.Вставить("Результат", Сертификат);
		
		МестоХраненияКлюча = Новый Структура();
		МестоХраненияКлюча.Вставить("МодельХраненияЗакрытогоКлюча", ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись"));
		МестоХраненияКлюча.Вставить("Пароль", Неопределено);
		МестоХраненияКлюча.Вставить("УчетнаяЗаписьОблачнойПодписи", УчетнаяЗаписьОблачнойПодписи);
		
		ПараметрыЦикла = Новый Структура();
		ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОписаниеОповещения);
		ПараметрыЦикла.Вставить("МестоХраненияКлюча", МестоХраненияКлюча);
		
		КонтекстЭДОКлиент.ОткрытьСписокВключаемыхСертификатовОблачнойПодписи_ПослеВыбора(РезультатВыбора, ПараметрыЦикла);
		
	Иначе
		
		ОткрытьФормуДобавленияОрганизации();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВосстановленияОблачнойУчетнойЗаписи(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		УчетнаяЗаписьОблачнойПодписи = Результат;
		Если ЗначениеЗаполнено(УчетнаяЗаписьОблачнойПодписи) Тогда
			ЗаполнитьТаблицуСырыеДанныеDSSнымиСертификатами(УчетнаяЗаписьОблачнойПодписи);
			Если СертификатыСырыеДанные.Количество() = 0 Тогда
				СообщитьОбОтсутствииПодходящихСертификатов();
			Иначе
				ЗаполнитьИПоказатьТаблицуВыбораСертификатов();
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		СообщитьОбОтсутствииПодходящихСертификатов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСырыеДанныеDSSнымиСертификатами(УчетнаяЗаписьОблачнойПодписи)
	
	МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
	Ответ = МодульСервисКриптографииDSS.ПолучитьСертификатыСервиса(УчетнаяЗаписьОблачнойПодписи);

	Если Ответ.Выполнено Тогда
		
		СырыеДанные = Новый Массив;
		Для каждого Строка Из Ответ.Результат Цикл
			
			Сертификат = Строка.Значение;
			Сертификат.Вставить("Base64", Сертификат.Содержимое);
			Сертификат.Вставить("Отпечаток", Сертификат.Отпечаток);
			
			СырыеДанные.Добавить(Сертификат);
			
		КонецЦикла;
		
		СертификатыСырыеДанные = Новый ФиксированныйМассив(СырыеДанные);
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(Ответ.Ошибка);
		СертификатыСырыеДанные = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПолноеОписаниеСертификата(Отпечаток)
	
	МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
	Возврат МодульСервисКриптографииDSS.НайтиСертификат(Отпечаток);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьСертификатВФорму(Результат, ВходящийКонтекст) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеЗаписиСертификатаВФорму", 
		ЭтотОбъект);
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	
	ОбработкаЗаявленийАбонентаКлиент.ВключаемыйСертификатНажатие_Завершение(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиСертификатаВФорму(Результат, ВходящийКонтекст) Экспорт
	
	ПоказатьСтраницуПоискаПредыдущихПодключений();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПолучитьДанныеУчеткиПоСертификату", ПаузаДляАнимацииЛинейки(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьДанныеУчеткиПоСертификату() Экспорт
	
	ОчиститьСообщения();
	
	ПолучитьДанныеУчеткиПоСертификату();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеУчеткиПоСертификату() Экспорт
	
	Владелец = ДокументооборотСКОКлиентСервер.ВладелецСертификат(ВключаемыйСертификат);
	ИННы     = ДокументооборотСКОКлиентСервер.ИННыИзСертификата(Владелец);
	
	Ответ = ЗапроситьRandomData(ИННы.ЮЛ, ИННы.ФЛ);
	Если Ответ.Выполнено Тогда
		ПодписатьRandomData(Ответ.RandomData);
	Иначе
		ПерейтиНаШагПриОтсутствииСуществующегоПодключения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстВАдресДляПодписания(Текст)
	
	Адрес = ОбработкаЗаявленийАбонента.ТекстВАдресДляПодписания(Текст, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура ПерейтиНаШагПослеВыбораСуществующегоПодключения(ТекущаяСтрока)
	
	СтрокаПоиска = ТекущаяСтрока.ИНН;
	
	ИНН = ТекущаяСтрока.ИНН;
	КПП = ТекущаяСтрока.КПП;
	ПредыдущиеУчетныеЗаписи = ТекущаяСтрока.УчетныеЗаписи;
	ПризнакОбособленногоПодразделения = Ложь;
	
	ОткрытьФормуДобавленияОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаШагПриОтсутствииСуществующегоПодключения()
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ЭтотОбъект);
	
	ОткрытьФормуДобавленияОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьRandomData(RandomData) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодписатьСерийныйНомер_ПослеПодписания", 
		ЭтотОбъект, 
		RandomData);
	
	КриптографияЭДКОКлиент.ПодписатьPKCS7(
		Оповещение, 
		ВключаемыйСертификат,
 		ТекстВАдресДляПодписания(RandomData), 
		Истина, 
		ПоместитьВоВременноеХранилище(, УникальныйИдентификатор),
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьСерийныйНомер_ПослеПодписания(Результат, RandomData) Экспорт
	
	Если Результат.Выполнено Тогда
		
		АдресПодписиRandomData = Результат.ФайлПодписи;
		Ответ = ЗапроситьТокенGetTokenBySignedRandomData(RandomData, АдресПодписиRandomData);
		
		Если Ответ.Выполнено Тогда
			
			ПодписатьСертификат(Ответ.token);
			
		Иначе
			ПерейтиНаШагПриОтсутствииСуществующегоПодключения();
		КонецЕсли;
	Иначе
		ПерейтиНаШагПриОтсутствииСуществующегоПодключения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьСертификат(token) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодписатьСертификат_ПослеПодписания", 
		ЭтотОбъект, 
		token);
	
	КриптографияЭДКОКлиент.ПодписатьPKCS7(
		Оповещение, 
		ВключаемыйСертификат,
 		ПоместитьВоВременноеХранилище(ДвДанныеСертификата, УникальныйИдентификатор), 
		Истина, 
		ПоместитьВоВременноеХранилище(, УникальныйИдентификатор),
		Ложь);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодписатьСертификат_ПослеПодписания(Результат, token) Экспорт
	
	Если Результат.Выполнено Тогда
		
		АдресСертификата = Результат.ФайлПодписи;
		Ответ = ЗапроситьУчеткиGetAccountsByCertificate(token, АдресСертификата);
		
		Если Ответ.Выполнено Тогда
			
			accounts  = Ответ.account;
			ПослеПолученияAccounts(accounts);
			
		Иначе
			ПерейтиНаШагПриОтсутствииСуществующегоПодключения();
		КонецЕсли;
	Иначе
		ПерейтиНаШагПриОтсутствииСуществующегоПодключения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияAccounts(accounts) Экспорт

	ЗаполнитьТаблицуПодключений(accounts);
	
	Количество = ПодключенныеОрганизации.Количество();

	Если Количество = 1 Тогда
		ПерейтиНаШагПослеВыбораСуществующегоПодключения(ПодключенныеОрганизации[0]);
	ИначеЕсли Количество > 1 Тогда
		ПоказатьСтраницуТаблицыПодключений();
	ИначеЕсли Количество = 0 Тогда
		ПерейтиНаШагПриОтсутствииСуществующегоПодключения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПодключений(accounts)
	
	ПодключенныеОрганизации.Очистить();
	
	Идентификаторы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(accounts, ", ", Истина);
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		
		Адрес = РегФайлКАПовтИсп.АдресРегФайлаПоИдентификаторуАбонента(Идентификатор);
		ДокументDOM = РегФайлКА.ФайлАвтонастрокиВФорматеDOMПоАдресу(Адрес);
		
		ОГРН_из_РегФайла = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM, "ОГРН");
		ИНН_из_РегФайла  = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM, "ИНН");
		КПП_из_РегФайла  = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM, "КПП");
			
		Отбор = Новый Структура();
		Отбор.Вставить("ИНН",  ИНН_из_РегФайла);
		Отбор.Вставить("КПП",  КПП_из_РегФайла);
		Отбор.Вставить("ОГРН", ОГРН_из_РегФайла);
		
		НайденныеСтроки = ПодключенныеОрганизации.НайтиСтроки(Отбор);
			
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ПодключенныеОрганизации.Добавить();
			
			НоваяСтрока.Наименование = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM, "КраткоеНаименование");
			НоваяСтрока.ОГРН = ОГРН_из_РегФайла;
			НоваяСтрока.ИНН  = ИНН_из_РегФайла;
			НоваяСтрока.КПП  = КПП_из_РегФайла;
			
			ДобавитьПояснениеКУчетке(НоваяСтрока);
			
		Иначе
			
			НоваяСтрока = НайденныеСтроки[0];
			
		КонецЕсли;
		
		НоваяСтрока.УчетныеЗаписи.Добавить(Адрес, Идентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПояснениеКУчетке(НоваяСтрока)
	
	Пояснение = НоваяСтрока.ИНН;
	ЗаголовокПояснения = НСтр("ru = 'ИНН';
								|en = 'ИНН'");
	
	Если ЗначениеЗаполнено(НоваяСтрока.КПП) Тогда
		Пояснение = СокрЛП(Пояснение + Символы.ПС + НоваяСтрока.КПП);
		ЗаголовокПояснения = СокрЛП(ЗаголовокПояснения + Символы.ПС + НСтр("ru = 'КПП';
																			|en = 'КПП'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ОГРН) Тогда
		
		Если СтрДлина(СокрЛП(НоваяСтрока.ИНН)) = 12 Тогда
			ЗаголовокПояснения = СокрЛП(ЗаголовокПояснения + Символы.ПС + НСтр("ru = 'ОГРНИП';
																				|en = 'ОГРНИП'"));
		Иначе
			ЗаголовокПояснения = СокрЛП(ЗаголовокПояснения + Символы.ПС + НСтр("ru = 'ОГРН';
																				|en = 'ОГРН'"));
		КонецЕсли;
		Пояснение = СокрЛП(Пояснение + Символы.ПС + НоваяСтрока.ОГРН);
		
	КонецЕсли;
	
	НоваяСтрока.ЗаголовокПояснения = ЗаголовокПояснения;
	НоваяСтрока.Пояснение = Пояснение;
	
КонецФункции
	
&НаКлиенте
Процедура ПоказатьСтраницуТаблицыПодключений()
	
	Если ЭтоВебКлиент Тогда
		Элементы.УчетныеЗаписиПояснение.АвтоВысотаЯчейки = Ложь;
		Элементы.УчетныеЗаписиПояснение.Высота = 3;
		Элементы.ПодключенныеОрганизацииЗаголовокПояснения.Шрифт = Новый Шрифт;
	КонецЕсли;
	
	АктивизироватьСтраницуЗапросаУчеток(Элементы.СтраницаЗапросаУчеток_СтраницаВыбораПодключений);
		
КонецПроцедуры

&НаСервере
Функция ЗапроситьУчеткиGetAccountsByCertificate(token, АдресСертификата)
	
	ТелоЗапроса = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:reg=""http://regservice.keydisk.ru/"">
                   |   <soapenv:Header/>
                   |   <soapenv:Body>
                   |      <reg:GetAccountsByCertificate>
                   |         <reg:token>&token</reg:token>
                   |         <reg:certificate>&certificate</reg:certificate>
                   |         <reg:signature>&signature</reg:signature>
                   |      </reg:GetAccountsByCertificate>
                   |   </soapenv:Body>
                   |</soapenv:Envelope>";
	
	ДвДанные  = ПолучитьИзВременногоХранилища(АдресСертификата);
	signature = ДокументооборотСКОКлиентСервер.Base64СтрокаБезПереносов(ДвДанные);
	
	certificate = ДокументооборотСКОКлиентСервер.Base64СтрокаБезПереносов(ДвДанныеСертификата);
	
	ТелоЗапроса = СтрЗаменить(ТелоЗапроса, "&token", XMLСтрока(token));
	ТелоЗапроса = СтрЗаменить(ТелоЗапроса, "&certificate",  XMLСтрока(certificate));
	ТелоЗапроса = СтрЗаменить(ТелоЗапроса, "&signature",  XMLСтрока(signature));
	
	Результат = ВыполнитьМетодВРпоЗапросу(
		ТелоЗапроса, 
		"GetAccountsByCertificate", 
		"Account");
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗапроситьТокенGetTokenBySignedRandomData(RandomData, АдресПодписиRandomData)
	
	ТелоЗапроса = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:reg=""http://regservice.keydisk.ru/"">
                   |   <soapenv:Header/>
                   |   <soapenv:Body>
                   |      <reg:GetTokenBySignedRandomData>
                   |         <reg:randomData>&randomData</reg:randomData>
                   |         <reg:signature>&signature</reg:signature>
                   |      </reg:GetTokenBySignedRandomData>
                   |   </soapenv:Body>
                   |</soapenv:Envelope>";
	
	ДвДанные  = ПолучитьИзВременногоХранилища(АдресПодписиRandomData);
	signature = ДокументооборотСКОКлиентСервер.Base64СтрокаБезПереносов(ДвДанные);
	
	ТелоЗапроса = СтрЗаменить(ТелоЗапроса, "&randomData", XMLСтрока(RandomData));
	ТелоЗапроса = СтрЗаменить(ТелоЗапроса, "&signature",  XMLСтрока(signature));
	
	Результат = ВыполнитьМетодВРпоЗапросу(
		ТелоЗапроса, 
		"GetTokenBySignedRandomData", 
		"token");
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗапроситьRandomData(ИННЮЛ, ИННФЛ)
	
	ТелоЗапроса = "<soap:Envelope xmlns:soap=""http://www.w3.org/2003/05/soap-envelope"" xmlns:reg=""http://regservice.keydisk.ru/"">
        |   <soap:Header/>
        |   <soap:Body>
        |      <reg:GetAuthorizationRandomData>
        |         %ИНН
        |      </reg:GetAuthorizationRandomData>
        |   </soap:Body>
        |</soap:Envelope>";
	
	Если ЗначениеЗаполнено(ИННЮЛ) Тогда
		ПараметрИНН = ?(ЗначениеЗаполнено(ИННЮЛ), "<reg:inn>"+ИННЮЛ+"</reg:inn>", "");
	Иначе
		ПараметрИНН = ?(ЗначениеЗаполнено(ИННФЛ), "<reg:innOwner>"+ИННФЛ+"</reg:innOwner>", ""); 
	КонецЕсли;
		
	ТелоЗапроса = СтрЗаменить(ТелоЗапроса, "%ИНН", ПараметрИНН);
	
	Результат = ВыполнитьМетодВРпоЗапросу(
		ТелоЗапроса, 
		"GetAuthorizationRandomData", 
		"randomData");
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьМетодВРпоЗапросу(ТелоЗапроса, ИмяМетода, ПолеРезультата)
	
	ПрефиксОшибки = НСтр("ru = 'Не удалось получить %1 по причине: ';
						|en = 'Не удалось получить %1 по причине: '");
	ПрефиксОшибки = СтрШаблон(ПрефиксОшибки, ПолеРезультата);
	
	Попытка
	
		Результат = Новый Структура("ИмяМетода, ТелоЗапроса, Выполнено, ОписаниеОшибки, " + ПолеРезультата, Истина, "", "");
		Результат.Выполнено   = Ложь;
		Результат.ИмяМетода   = ИмяМетода;
		Результат.ТелоЗапроса = ТелоЗапроса;
		
		Ответ = Документы.ЗаявлениеАбонентаСпецоператораСвязи.PostЗапросОператору(
			ИмяМетода, 
			ТелоЗапроса,
			Результат.ОписаниеОшибки);
			
		Если Ответ = Неопределено Тогда
			
			Результат.ОписаниеОшибки = 
				ПрефиксОшибки 
				+ Символы.ПС 
				+ Результат.ОписаниеОшибки;
				
			СохранитьРезультатЗапроса(
				ИмяМетода, 
				ТелоЗапроса, 
				Результат.ОписаниеОшибки,
				УровеньЖурналаРегистрации.Ошибка);
		
			Возврат Результат;
			
		Иначе
			
			ДОМ = ДокументооборотСКО.ДваждыРазобратьОтветНаPostЗапрос(Ответ, ИмяМетода + "Result", "utf-8");
			code = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДОМ, "code");
			
			Если code = "0" Тогда
				
				Результат.Выполнено = Истина;
				Результат[ПолеРезультата] = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДОМ, ПолеРезультата);
				
				СохранитьРезультатЗапроса(
					Результат.ИмяМетода, 
					Результат.ТелоЗапроса, 
					Результат[ПолеРезультата],
					УровеньЖурналаРегистрации.Информация);
					
			Иначе
				
				СохранитьОшибку(
					ПрефиксОшибки,
					Результат, 
					ДОМ);
					
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
	Исключение
		
		ДанныеОшибки = ИнформацияОбОшибке();
		
		ДокументооборотСКО.ОбработатьИсключение(
			ДанныеОшибки, 
			ИмяМетода);
			
		ТекстОшибки  = КраткоеПредставлениеОшибки(ДанныеОшибки);
		
		Результат.ОписаниеОшибки = 
			ПрефиксОшибки 
			+ Символы.ПС 
			+ ТекстОшибки;
		
		Возврат Результат;
		
	
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура СохранитьОшибку(Префикс, Результат, ДОМ)
	
	ДокументооборотСКО.СохранитьОшибкуВРвРезультат(Префикс, Результат, ДОМ);
	
	СохранитьРезультатЗапроса(
		Результат.ИмяМетода, 
		Результат.ТелоЗапроса, 
		Результат.ОписаниеОшибки,
		УровеньЖурналаРегистрации.Ошибка);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатЗапроса(ИмяМетода, ТелоЗапроса, ОшибкаИлиОтвет, Уровень)
	
	Представление = ПредставлениеРезультатаЗапроса(
		ИмяМетода, 
		ТелоЗапроса, 
		ОшибкаИлиОтвет);
		
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Облачная 1С-Отчетность. Результат выполнения метода ';
			|en = 'Облачная 1С-Отчетность. Результат выполнения метода '") + ИмяМетода, 
		Уровень,
		,
		,
		Представление);

КонецПроцедуры

&НаСервере
Функция ПредставлениеРезультатаЗапроса(ИмяМетода, ТелоЗапроса, Результат)
	
	Представление = НСтр("ru = 'Метод %1
                          |---------------------------
                          |Запрос: 
                          |%2
                          |---------------------------
                          |Результат: 
                          |%3';
                          |en = 'Метод %1
                          |---------------------------
                          |Запрос: 
                          |%2
                          |---------------------------
                          |Результат: 
                          |%3'");
	
	Представление = СтрШаблон(
		Представление, 
		ИмяМетода, 
		ТелоЗапроса, 
		Результат);
		
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии_ПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт

	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
	
	Если ЗначениеЗаполнено(ПараметрыФормыБыстрыйСтарт) Тогда
		
		ПараметрыВЭлементыФормы();
		ОткрытьНаНужнойСтранице();
		
	ИначеЕсли ЭтоТолькоНастройка Тогда
		
		ОткрытьСтраницуОбъектНастройки();
			
	ИначеЕсли НужноПоказатьСтраницуИТС() Тогда
		
		АктивизироватьСтраницу(
			Элементы.СтраницыПомощника, 
			Элементы.СтраницаИТС);
			
	Иначе
			
		ВернутьсяКВыборуВидаВладельца(Неопределено);
		
	КонецЕсли;
	
	Активизировать();

	Если ПоказатьБыстрыйСтартО1СО() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ДополнительнаяАктивизация", 3, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СброситьМестаХранения() Экспорт

	ХранитсяНаТокенеИлиФлешке = Ложь;
	ХранитсяНаКомпьютере = Ложь;
	ХранитсяВДругомМесте = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуОбъектНастройки() Экспорт
	
	ИзменитьОформлениеСпискаОрганизаций();
	
	АктивизироватьСтраницу(
		Элементы.СтраницыПомощника, 
		Элементы.СтраницаОбъектНастройки);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДополнительнаяАктивизация() Экспорт

	Активизировать();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаНужнойСтранице() Экспорт
	
	Значение = ПолучитьИзВременногоХранилища(ПараметрыФормыБыстрыйСтарт);
	ТекущаяСтраница = Значение.ТекущаяСтраница;
	
	Если ТекущаяСтраница = "СтраницаВыборСертификата" 
		ИЛИ ТекущаяСтраница = "СтраницаЗапросаУчеток" И ПодключенныеОрганизации.Количество() <= 1 Тогда
		
		Если Сертификаты.Количество() = 0 Тогда
			СообщитьОбОтсутствииПодходящихСертификатов();
		Иначе
			ПоказатьТаблицуВыбораСертификатов();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = "СтраницаКтоПодключает"
		ИЛИ ТекущаяСтраница = "СтраницаНастройкаСистемы" Тогда
		
		ВернутьсяКВыборуВидаВладельца(Неопределено);
		
	ИначеЕсли ТекущаяСтраница = "СтраницаЗапросаУчеток" Тогда
		
		ПоказатьСтраницуТаблицыПодключений();

	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ПараметрыФормыБыстрыйСтарт);
	ПараметрыФормыБыстрыйСтарт = "";
	
КонецПроцедуры

&НаСервере
Функция НужноПоказатьСтраницуИТС() 
	
	Результат = ОбработкаЗаявленийАбонентаВызовСервера.ТикетАутентификацииНаПорталеПоддержки();
	
	ПропуститьСтраницуИТС = 
		Результат = Неопределено 
		ИЛИ ЗначениеЗаполнено(Результат.Тикет) 
		ИЛИ Результат.КодОшибки = "ОшибкаПодключения"
		ИЛИ ОбщегоНазначения.РазделениеВключено()
		ИЛИ НеПредлагатьПодключитьИТС()
		ИЛИ ЭтоТолькоНастройка;
		
	НужноПоказать = НЕ ПропуститьСтраницуИТС;
	
	Возврат НужноПоказать;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СменитьТипВладельца(Форма, ЭтоРуководитель)
	
	Элементы = Форма.Элементы;
	
	Элементы.ПодчеркРуководителя.Видимость = ЭтоРуководитель;
	Элементы.ПодчеркСотрудника.Видимость = НЕ ЭтоРуководитель;
	
	Если ЭтоРуководитель Тогда
		Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	Иначе
		Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриВыбореРуководителя(Форма)
	
	Элементы = Форма.Элементы;
	
	СменитьТипВладельца(Форма, Истина);
	
	АктивизироватьСтраницу(
		Элементы.СтраницыПомощника, 
		Элементы.СтраницаКтоПодключает);
	
	АктивизироватьСтраницу(
		Элементы.КтоПодключает_Страницы, 
		Элементы.КтоПодключает_СтраницаРуководитель);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОпределитьНаличиеКомпонентыКриптографии()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОпределитьНаличиеРасширенияРаботыСКриптографиейПлатформы", 
		ЭтотОбъект);
		
	Если ЭтоLinux Тогда
		
		ПутьВК = ДокументооборотСКОКлиент.ПолучитьПутьВК();
		
		НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, ПутьВК, "ЭДОNative");
		
	Иначе
		
		ОбработкаЗаявленийАбонентаКлиент.ЗаполнитьСписокКриптопровайдеров(
			ОписаниеОповещения, 
			КонтекстЭДОКлиент,
			ЭтотОбъект,
			Ложь);
			
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНаличиеРасширенияРаботыСКриптографиейПлатформы(Результат, ВходящийКонтекст) Экспорт
	
	Если ЭтоLinux Тогда
		КомпонентаДляРаботыСКриптографиейПодключена = Результат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОпределитьНаличиеРасширенияРаботыСФайламиПлатформы", 
		ЭтотОбъект); 
		
	НачатьПодключениеРасширенияРаботыСКриптографией(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНаличиеРасширенияРаботыСФайламиПлатформы(Подключено, ВходящийКонтекст) Экспорт
	
	РасширениеРаботыСКриптографиейПлатформыПодключено = Подключено;
	
	Если НЕ РасширенияКриптографииУстановлены() Тогда
		УстановитьРасширениеДляРаботыСКриптографией = 1;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеОпределенияНаличияРасширенияРаботыСФайлами", 
		ЭтотОбъект); 
		
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОпределенияНаличияРасширенияРаботыСФайлами(Подключено, ВходящийКонтекст) Экспорт

	РасширенияРаботыСФайламиПодключено = Подключено;
	
	Если НЕ Подключено Тогда
		УстановитьРасширениеДляРаботыСФайлами = 1;
	КонецЕсли;
	
	Если РасширенияИКомпонентыУстановлены() Тогда
		ПерейтиКОпределениюКриптопровайдераИДрайверов();
	Иначе
		НастройкаТребуется = Истина;
		ОткрытьСтраницуРасширенийИКомпонентовКУстановке();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РасширенияИКомпонентыУстановлены() Экспорт
	
	Установлены = 
		РасширенияРаботыСФайламиПодключено 
		И РасширенияКриптографииУстановлены();
		
	Возврат Установлены;

КонецФункции

&НаКлиенте
Функция РасширенияКриптографииУстановлены() Экспорт
	
	Установлены = 
		КомпонентаДляРаботыСКриптографиейПодключена 
		И РасширениеРаботыСКриптографиейПлатформыПодключено;
		
	Возврат Установлены;

КонецФункции

&НаКлиенте
Функция КриптопровайдерУстановлен() Экспорт
	
	Установлен = CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен;
		
	Возврат Установлен И НЕ ЭтоКонфликтКриптопровайдеров();

КонецФункции

&НаКлиенте
Функция ЭтоКонфликтКриптопровайдеров() Экспорт
	
	ЭтоКонфликт = ViPNetCSPУстановлен И CryptoProCSPУстановлен И НЕ ИгнорироватьКонфликт;
		
	Возврат ЭтоКонфликт;

КонецФункции

&НаКлиенте
Функция ДрайверТокенаУстановлен(СУчетомФлажков = Ложь) Экспорт
	
	Если СУчетомФлажков Тогда
		
		Установлен = 
			УстановитьДрайверТокена
			И (Рутокен_УстановленДрайвер И УстановитьДрайверРутокена ИЛИ НЕ УстановитьДрайверРутокена)
			И (Джакарта_УстановленДрайвер И УстановитьДрайверДжакарта ИЛИ НЕ УстановитьДрайверДжакарта)
			ИЛИ НЕ УстановитьДрайверТокена;
			
	Иначе	
		Установлен = 
			Джакарта_УстановленДрайвер 
			ИЛИ Рутокен_УстановленДрайвер;
	КонецЕсли;
		
	Возврат Установлен ИЛИ ОтказатьсяОтДрайвера();

КонецФункции

&НаКлиенте
Процедура ПерейтиКОпределениюКриптопровайдераИДрайверов()
	
	Если ЭтоЛокальныйКлюч() Тогда
	
		УстановитьДрайверРутокена = Ложь;
		УстановитьДрайверТокена = Ложь;
		
		ОткрытьСтраницуНастройкиСистемы();
				
		ПодключитьОбработчикОжидания("Подключаемый_ОпределитьНаличиеКриптопровайдера", ПаузаОтЗалипания(), Истина);
		
	Иначе
		
		ПерейтиНаШагПослеНастройкиСистемы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЛокальныйКлюч()
	
	Возврат 
		МодельХраненияЗакрытогоКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч")
		ИЛИ ХранитсяНаТокенеИлиФлешке 
		ИЛИ ХранитсяНаКомпьютере;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаШагПослеНастройкиСистемы()
	
	Если ЭтоТолькоНастройка Тогда
		ПоказатьСтраницуУспешнойНастройки();
	ИначеЕсли НетСертификатов Тогда
		ОткрытьФормуДобавленияОрганизации();
	Иначе
		ПерейтиНаСтраницуПоискаСертификата()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОпределитьНаличиеКриптопровайдера()

	Если ЭтоLinux Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьНаличиеКриптопровайдераПослеПроверкиБСП", 
			ЭтотОбъект);
		
		ПроверитьУстановкуПрограммКриптографииБСП(ОписаниеОповещения, Ложь);
		
	Иначе
		ОпределитьНаличиеКриптопровайдераМетодомБРО();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьПутьLinuxНаСервере(Программа, ПутьLinux)
	
	ПерсональныеНастройки = ЭлектроннаяПодпись.ПерсональныеНастройки();
	ПерсональныеНастройки.ПутиКПрограммамЭлектроннойПодписиИШифрования.Вставить(Программа, ПутьLinux);
	Облачная1СОСлужебныйПереопределяемый.СохранитьПерсональныеНастройки(ПерсональныеНастройки);
	
	// Требуется для обновления персональных настроек на клиенте.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНаличиеКриптопровайдераПослеПроверкиБСП(Результат, ВходящийКонтекст) Экспорт
	
	Если ЭтоLinux 
		И Результат.КомпонентаУстановлена
		И Результат.Программы.Количество() > 0 Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьНаличиеКриптопровайдераМетодомБРО", 
			ЭтотОбъект);
		
		ЗаполнитьСписокПрограммИСтандартныеПути(ОписаниеОповещения, Результат.Программы);
		
	Иначе
		
		ОпределитьНаличиеКриптопровайдераМетодомБРО();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПрограммИСтандартныеПути(ОповещениеОЗавершении, Программы) Экспорт
	
	ЗаполнитьСписокПрограммНаСервере(Программы);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Программы", Программы);
	ДополнительныеПараметры.Вставить("Номер", 0);
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	ПолучитьСтандартныеПутиККриптопровайдеру(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтандартныеПутиККриптопровайдеру(Результат, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.Номер = ВходящийКонтекст.Программы.Количество() Тогда
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПолучитьСтандартныеПутиККриптопровайдеру_ПослеПолученияПути", 
			ЭтотОбъект, 
			ВходящийКонтекст); 
			
		КриптографияЭДКОКлиент.ПолучитьПутьККриптоПроНаMacOSиLinux(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтандартныеПутиККриптопровайдеру_ПослеПолученияПути(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат.ПутьКПрограмме) И Результат.Существует Тогда
		Программа = ВходящийКонтекст.Программы[ВходящийКонтекст.Номер];
		СохранитьПутьLinuxНаСервере(Программа.Ссылка, Результат.ПутьКПрограмме);
	КонецЕсли;
		
	ВходящийКонтекст.Номер = ВходящийКонтекст.Номер + 1;
	ПолучитьСтандартныеПутиККриптопровайдеру(Неопределено, ВходящийКонтекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНаличиеКриптопровайдераМетодомБРО(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеОпределенияНаличияКриптопровайдера", 
		ЭтотОбъект);
	
	ОбработкаЗаявленийАбонентаКлиент.ЗаполнитьСписокКриптопровайдеров(
		ОписаниеОповещения, 
		КонтекстЭДОКлиент,
		ЭтотОбъект,
		Ложь);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеОпределенияНаличияКриптопровайдера(Результат, ВходящийКонтекст) Экспорт

	ВывестиРезультатПоискаКриптопровайдера();
	ОпределитьНаличиеТокеновИДрайверов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатПоискаКриптопровайдера() Экспорт
	
	Если НЕ ViPNetCSPУстановлен И НЕ CryptoProCSPУстановлен Тогда
		
		УстановитьКриптопровайдер = Истина;
		ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		
	ИначеЕсли ViPNetCSPУстановлен И CryptoProCSPУстановлен И НЕ ИгнорироватьКонфликт Тогда
		
		ВывестиОшибкуКонфликтаКриптопровайдера();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибкуКонфликтаКриптопровайдера() Экспорт
	
	Ошибка = Новый ФорматированнаяСтрока(НСтр("ru = 'Оставьте только один криптопровайдер. ';
												|en = 'Оставьте только один криптопровайдер. '"),,КрасныйЦветОшибки);
	Ссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее';
												|en = 'Подробнее'"),,,,"Исправить конфликт");
	Ошибка = Новый ФорматированнаяСтрока(Ошибка, Ссылка);
	
	ОтобразитьСостояниеКомпонента(
		"УстановитьКриптопровайдер", 
		,
		Ошибка);
		
	Элементы.КарандашУстановитьКриптопровайдер.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНаличиеТокеновИДрайверов() Экспорт
	
	Если ЭтоВыборСертификатаСТокена(ЭтотОбъект) Тогда
		
		ОпределитьНаличиеТокенов();
		
	ИначеЕсли КриптопровайдерУстановлен() Тогда
		
		ПерейтиНаШагПослеНастройкиСистемы();
		
	Иначе
		
		ОткрытьСтраницуКриптопровайдераИДрайвераКУстановке();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНаличиеТокенов() Экспорт
	
	Если ЭтоLinux Тогда
		Результат = Новый Структура("Выполнено", Ложь);
		ПослеОпределенияВставленныхТокенов(Результат);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеОпределенияВставленныхТокенов", ЭтотОбъект);
		КриптографияЭДКОКлиент.ПолучитьУстройстваUSB(Оповещение);
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеОпределенияВставленныхТокенов(Результат, ВходящийКонтекст = Неопределено) Экспорт
	
	Если Результат.Выполнено Тогда
		
		Если ТипЗнч(Результат.УстройстваUSB) = Тип("Массив") Тогда
			Для каждого УстройствоUSB Из Результат.УстройстваUSB Цикл
				
				// https://dev.rutoken.ru/display/KB/RU1013:
				// VID устройств, производимых Компанией "Актив" - 0A89
				// *Иногда могут отображаться как "USB Smart Card reader", "Rutoken ECP" или "Rutoken Lite"
				Если СтрНайти(ВРег(УстройствоUSB.instance_id), "0A89") 
					ИЛИ СтрНайти(ВРег(УстройствоUSB.device_name), ВРег("Rutoken")) Тогда
					
					Рутокен_ЕстьВКомпьютере = Истина;
					
				КонецЕсли;
				
				// https://www.aladdin-rd.ru/upload/downloads/jacarta_arm_sa/RO_ARM_AB_JaCarta.pdf п. 4.2.3
				// Для изделий АО «Аладдин Р. Д.» VID=24DC
				Если СтрНайти(ВРег(УстройствоUSB.instance_id), "24DC") Тогда
					
					Джакарта_ЕстьВКомпьютере = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОпределитьЧтоУстановленыДрайверыТокенов_ПослеОпределения", 
		ЭтотОбъект);
	
	ОпределитьЧтоУстановленыДрайверыТокенов(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьЧтоУстановленыДрайверыТокенов_ПослеОпределения(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ ДрайверТокенаУстановлен() Тогда
		УстановитьДрайверТокена = Истина;
		
		УстановитьДрайверРутокена = Рутокен_ЕстьВКомпьютере;
		УстановитьДрайверДжакарта = Джакарта_ЕстьВКомпьютере;
		
		УказатьДрайверПоУмолчанию();
	КонецЕсли;
	
	Если КриптопровайдерУстановлен() И ДрайверТокенаУстановлен() Тогда
		ПерейтиНаШагПослеНастройкиСистемы();
	Иначе
		ОткрытьСтраницуКриптопровайдераИДрайвераКУстановке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьЧтоУстановленыДрайверыТокенов(ВыполняемоеОповещение) Экспорт
	
	Если ЭтоLinux Тогда
		
		Рутокен_УстановленДрайвер  = Ложь;
		Джакарта_УстановленДрайвер = Ложь;
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеОпределенияНаличияДрайверовРутокен", 
			ЭтотОбъект,
			ВыполняемоеОповещение);
		
		КриптографияЭДКОКлиент.ПолучитьУстановленныеПрограммы(ОписаниеОповещения, "Драйверы Рутокен");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОпределенияНаличияДрайверовРутокен(Результат, ВыполняемоеОповещение) Экспорт
	
	Рутокен_УстановленДрайвер = Результат.Выполнено И Результат.Программы.Количество() > 0;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеОпределенияНаличияЕдиногоКлиентаJaCarta", 
		ЭтотОбъект,
		ВыполняемоеОповещение);
	
	КриптографияЭДКОКлиент.ПолучитьУстановленныеПрограммы(ОписаниеОповещения, "Единый Клиент JaCarta");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОпределенияНаличияЕдиногоКлиентаJaCarta(Результат, ВыполняемоеОповещение) Экспорт
	
	Джакарта_УстановленДрайвер = Результат.Выполнено И Результат.Программы.Количество() > 0;
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьДрайверПоУмолчанию()
	
	Если НЕ УстановитьДрайверРутокена И НЕ УстановитьДрайверДжакарта Тогда
		УстановитьДрайверРутокена = Истина;
		УстановитьДрайверДжакарта = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуКриптопровайдераИДрайвераКУстановке() Экспорт
	
	НастройкаТребуется = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьСтраницуКриптопровайдераИДрайвераКУстановке_ПослеВключенияПоискаТокена", 
		ЭтотОбъект);
		
	ВключитьПоискТокенов(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуКриптопровайдераИДрайвераКУстановке_ПослеВключенияПоискаТокена(Результат, ВходящийКонтекст) Экспорт
	
	Если ЭтоКонфликтКриптопровайдеров() Тогда
		
		ПоказатьЧтоНадоУстановить("УстановитьКриптопровайдер");
		
	Иначе
		
		Если ЭтоLinux Тогда
			
			СкрытьЕслиУстановлен(
				"УстановитьКриптопровайдерMacOs",
				КриптопровайдерУстановлен());
				
		Иначе
				
			СкрытьЕслиУстановлен(
				"УстановитьКриптопровайдер",
				КриптопровайдерУстановлен());
				
		КонецЕсли;
			
	КонецЕсли;
		
	ЭтоВыборСТокена = ЭтоВыборСертификатаСТокена(ЭтотОбъект);
	
	Если ЭтоВыборСТокена Тогда
		
		Если ЭтоLinux Тогда
			
			СкрытьЕслиУстановлен(
				"УстановитьДрайверТокенаMacOs",
				ДрайверТокенаУстановлен());
				
		Иначе
				
			СкрытьЕслиУстановлен(
				"УстановитьДрайверТокена",
				ДрайверТокенаУстановлен());
				
		КонецЕсли;
			
	Иначе
			
		СкрытьЕслиУстановлен(
			"УстановитьДрайверТокена",
			Истина);	
			
	КонецЕсли;
		
	ИзменитьОформлениеСсылкиКриптопровайдера();
	ИзменитьОформлениеСсылокДрайверов();
	
	Если ЭтоLinux Тогда
		
		ПеренумероватьШагиMacOs();

		Если ЭтоТолькоНастройка Тогда
			Элементы.ПоказатьСертификатыMacOs.Заголовок = НСтр("ru = 'Закрыть';
																|en = 'Закрыть'");
			Элементы.НастройкаСистемы_ЗакрытьШаги3и4MacOs.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.НастройкаСистемы_Подсказка.Заголовок = НСтр("ru = 'Установите компоненты вручную 
	      |(автоматическая установка программ возможна только на Windows). 
	      |Они необходимы для работы с сертификатом.';
	      |en = 'Установите компоненты вручную 
	      |(автоматическая установка программ возможна только на Windows). 
	      |Они необходимы для работы с сертификатом.'");
		
		АктивизироватьСтраницуНастройкиСистемы(Элементы.НастройкаСистемы_СтраницаКомпонентыШаги3и4MacOs);
			
	Иначе
		
		АктивизироватьСтраницуНастройкиСистемы(Элементы.НастройкаСистемы_СтраницаКомпонентыШаги3и4windows);
		ИзменитьОформлениеКнопокНастройкиСистемыШаги3и4();
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьШагиMacOs()

	УстановленШаг1 = КриптопровайдерУстановлен();
	УстановленШаг2 = ДрайверТокенаУстановлен();
	
	// Драйвера. Шаг2 в Шаг1 - серый или зеленый
	Если Элементы.ГруппаУстановитьКриптопровайдерMacOs.Видимость Тогда
		
		Картинка = ?(УстановленШаг1, БиблиотекаКартинок.БСШаг1Зеленый, БиблиотекаКартинок.БСШаг1Серый);
		Элементы.КружокУстановитьКриптопровайдерMacOs.Картинка = Картинка;
		
		// Если криптопровайдер отображается, то драйвера - это шаг 2
		Картинка = ?(УстановленШаг2, БиблиотекаКартинок.БСШаг2Зеленый, БиблиотекаКартинок.БСШаг2Серый);
		Элементы.КружокУстановитьДрайверТокенаMacOs.Картинка = Картинка;
		
		Если УстановленШаг1 И УстановленШаг2 Тогда
			Элементы.ПалочкаУстановитьКриптопровайдерMacOs.Картинка = БиблиотекаКартинок.БСПалочкаЗеленая;
		Иначе
			Элементы.ПалочкаУстановитьКриптопровайдерMacOs.Картинка = БиблиотекаКартинок.БСПалочкаСерая;
		КонецЕсли;
		
	Иначе
		
		// Если криптопровайдер не отображается, то драйвера - это шаг 1
		Картинка = ?(УстановленШаг2, БиблиотекаКартинок.БСШаг1Зеленый, БиблиотекаКартинок.БСШаг1Серый);
		Элементы.КружокУстановитьДрайверТокенаMacOs.Картинка = Картинка;
		
	КонецЕсли;
	
	Элементы.КарандашУстановитьДрайверТокенаMacOs.Видимость = НЕ УстановленШаг2;
	
	// Перезагрузите. Шаг3 в Шаг2 - всегда серый
	Если НЕ Элементы.ГруппаУстановитьКриптопровайдерMacOs.Видимость
		ИЛИ НЕ Элементы.ГруппаУстановитьДрайверТокенаMacOs.Видимость Тогда
		
		Элементы.КартинкаПерезагрузкиMacOs.Картинка = БиблиотекаКартинок.БСШаг2Серый;
		
	Иначе
		
		Элементы.КартинкаПерезагрузкиMacOs.Картинка = БиблиотекаКартинок.БСШаг3Серый;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеСсылкиКриптопровайдера() Экспорт
	
	СсылкаCryptoPro = Новый ФорматированнаяСтрока(НСтр("ru = 'КриптоПро CSP';
														|en = 'КриптоПро CSP'"),,,,"CryptoPro");
	СсылкаVipNet    = Новый ФорматированнаяСтрока(НСтр("ru = 'ViPNet CSP';
														|en = 'ViPNet CSP'"),,,,"VipNet");
	
	Если ЭтоКонфликтКриптопровайдеров() И НЕ ИгнорироватьКонфликт Тогда
		
		Текст = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Установлены оба криптопровайдера: ';
				|en = 'Установлены оба криптопровайдера: '"),
			СсылкаCryptoPro,
			НСтр("ru = ' и ';
				|en = ' и '"),
			СсылкаVipNet,
			".");
			
	ИначеЕсли ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
			
		Текст = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Криптопровайдер ';
				|en = 'Криптопровайдер '"),
			СсылкаCryptoPro,
			".");
			
	ИначеЕсли ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
			
		Текст = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Криптопровайдер ';
				|en = 'Криптопровайдер '"),
			СсылкаVipNet,
			".");
			
	КонецЕсли;
	
	Если ЭтоLinux Тогда
		Элементы.ТекстУстановитьКриптопровайдерMacOs.Заголовок = Текст;
	Иначе
		Элементы.ТекстУстановитьКриптопровайдер.Заголовок = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеСсылокДрайверов() Экспорт
	
	// Настраиваем надпись "Драйвер токена "Рутокен" и "JaCarta""
	СсылкаРутокен = Новый ФорматированнаяСтрока(НСтр("ru = 'Рутокен';
													|en = 'Рутокен'"),,,,"Рутокен");
	СсылкаJaCarta = Новый ФорматированнаяСтрока(НСтр("ru = 'JaCarta';
													|en = 'JaCarta'"),,,,"JaCarta");
	
	Если (УстановитьДрайверРутокена ИЛИ Рутокен_УстановленДрайвер) 
		И (УстановитьДрайверДжакарта ИЛИ Джакарта_УстановленДрайвер) Тогда
		
		Текст = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Драйвер токена ';
				|en = 'Драйвер токена '"),
			СсылкаРутокен,
			НСтр("ru = ' и ';
				|en = ' и '"),
			СсылкаJaCarta,
			".");
			
	ИначеЕсли УстановитьДрайверРутокена ИЛИ Рутокен_УстановленДрайвер Тогда
			
		Текст = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Драйвер токена ';
				|en = 'Драйвер токена '"),
			СсылкаРутокен,
			".");
			
	ИначеЕсли УстановитьДрайверДжакарта ИЛИ Джакарта_УстановленДрайвер Тогда
			
		Текст = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Драйвер токена ';
				|en = 'Драйвер токена '"),
			СсылкаJaCarta,
			".");
			
	Иначе
		
		Текст = НСтр("ru = 'Драйвер токена ';
					|en = 'Драйвер токена '");
		
	КонецЕсли;
	
	Если ЭтоLinux Тогда
		Элементы.ТекстУстановитьДрайверТокенаMacOs.Заголовок = Текст;
	Иначе
		Элементы.ТекстУстановитьДрайверТокена.Заголовок = Текст;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуРасширенийИКомпонентовКУстановке()
	
	СкрытьЕслиУстановлен(
		"УстановитьРасширениеДляРаботыСФайлами",
		РасширенияРаботыСФайламиПодключено);
	
	СкрытьЕслиУстановлен(
		"УстановитьРасширениеДляРаботыСКриптографией",
		РасширенияКриптографииУстановлены());
		
	АктивизироватьСтраницуНастройкиСистемы(Элементы.НастройкаСистемы_СтраницаКомпонентыШаги1и2);
		
	ИзменитьОформлениеКнопокНастройкиСистемыШаги1и2();

КонецПроцедуры

&НаКлиенте
Процедура СкрытьЕслиУстановлен(Имя, Установлен)
	
	Если Установлен Тогда
		СкрытьКомпоненту(Имя);
	Иначе
		ПоказатьЧтоНадоУстановить(Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧтоНадоУстановить(Имя)
	
	ОтобразитьСостояниеКомпонента(Имя, "НадоУстановить");
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьКомпоненту(Имя)
	
	ОтобразитьСостояниеКомпонента(Имя, "Скрыть");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУспешнуюУстановку(Имя)
	
	ОтобразитьСостояниеКомпонента(Имя, "Установлен");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБубликУстановки(Имя)
	
	Элементы.НастройкаСистемы_Подсказка.Заголовок = НСтр("ru = 'Установка необходимых компонент для работы с сертификатом:';
														|en = 'Установка необходимых компонент для работы с сертификатом:'");
	
	ОтобразитьСостояниеКомпонента(Имя, "СтавитсяСейчас");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧасикиУстановки(Имя)
	
	Установить = ЭтотОбъект[Имя];
	
	Если Установить Тогда
		ОтобразитьСостояниеКомпонента(Имя, "НаОчереди");
	Иначе
		СкрытьКомпоненту(Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьКрасныйКрестНаГалку(Имя)
	
	Группа        = Элементы["Группа" + Имя];
	ЭлементОшибка = Элементы["Ошибка" + Имя];
	
	Если Группа.Видимость 
		И ЭлементОшибка.Видимость 
		И ЗначениеЗаполнено(ЭлементОшибка.Заголовок) Тогда
		
		ЭлементКартинка = Элементы["Картинка" + Имя];
		ЭлементКартинка.Видимость = Ложь;
		
		ЭлементФлаг = Элементы["Галка" + Имя];
		ЭлементФлаг.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеКомпонента(Имя, Состояние = "", ТекстОшибки = "")
	
	НадоУстановить = Состояние = "НадоУстановить";
	Установлен     = Состояние = "Установлен";
	НаОчереди      = Состояние = "НаОчереди";
	СтавитсяСейчас = Состояние = "СтавитсяСейчас";
	Скрыть         = Состояние = "Скрыть";
	ВозниклаОшибка = ЗначениеЗаполнено(ТекстОшибки);
	
	Группа = Элементы["Группа" + Имя];
	
	Если Скрыть Тогда
		Группа.Видимость = Ложь;
	ИначеЕсли НадоУстановить Тогда
		Группа.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ Группа.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементКартинка = Элементы.Найти("Картинка" + Имя);
	
	Если ЭлементКартинка <> Неопределено Тогда
		
		ЭлементКартинка.Видимость = Установлен ИЛИ ВозниклаОшибка ИЛИ СтавитсяСейчас ИЛИ НаОчереди;
		
		ЭлементФлаг = Элементы.Найти("Галка" + Имя);
		ЭлементФлаг.Видимость = НЕ ЭлементКартинка.Видимость;
		
		ЭлементОшибка = Элементы.Найти("Ошибка" + Имя);
		ЭлементОшибка.Видимость   = ЗначениеЗаполнено(ТекстОшибки);
		ЭлементОшибка.Заголовок   = ТекстОшибки;
		
		Если СтавитсяСейчас Тогда
			ЭлементКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
		ИначеЕсли Установлен Тогда
			ЭлементКартинка.Картинка = БиблиотекаКартинок.УстановленКомпонент_БРО;
		ИначеЕсли ВозниклаОшибка Тогда
			ЭлементКартинка.Картинка = БиблиотекаКартинок.ОшибкаУстановкиКомпоненты_БРО;
		ИначеЕсли НаОчереди Тогда
			// Если уже установлен, то частики не показываем
			Если ЭлементКартинка.Картинка <> БиблиотекаКартинок.УстановленКомпонент_БРО Тогда
				ЭлементКартинка.Картинка = БиблиотекаКартинок.ВОчередиКУстановке_БРО;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементКарандаш = Элементы.Найти("Карандаш" + Имя);
		Если ЭлементКарандаш <> Неопределено Тогда
			ЭлементКарандаш.Видимость = НадоУстановить ИЛИ ВозниклаОшибка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Форма нужна для вызова из ККМ
&НаКлиенте
Процедура СообщитьОбОтсутствииПодходящихСертификатов(Форма = Неопределено) Экспорт
	
	АктивизироватьСтраницу(
		Элементы.ВыборСертификата_Страницы, 
		Элементы.ВыборСертификата_СтраницаСертификаты);
		
	АктивизироватьСтраницу(
		Элементы.ВыборСертификата_СтраницаРезультатаПоиска, 
		Элементы.ВыборСертификата_СертификатыНеНайдены);
		
	Если НельзяИскатьСертификаты() Тогда
			
		АктивизироватьСтраницу(
			Элементы.ВыборСертификата_СертификатыНеНайдены_Страницы, 
			Элементы.КомпонентыНеУстановлены);
			
	Иначе
		
		АктивизироватьСтраницу(
			Элементы.ВыборСертификата_СертификатыНеНайдены_Страницы, 
			Элементы.СтраницаСертификатыНеНайдены);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НельзяИскатьСертификаты() Экспорт
	
	Возврат НЕ КриптопровайдерУстановлен()
		И (ЭтоВыборСертификатаИзРегистра() ИЛИ ЭтоВыборСертификатаСТокена(ЭтотОбъект)); 
		
КонецФункции

&НаКлиенте
Функция ТребуетсяУстановкаНаШаге3или4()

	Требуется = 
		НЕ ДрайверТокенаУстановлен(Истина) 
		ИЛИ НЕ КриптопровайдерУстановлен() И УстановитьКриптопровайдер;
		
	Возврат Требуется;

КонецФункции

&НаКлиенте
Процедура ИзменитьОформлениеКнопокНастройкиСистемыШаги1и2()
	
	Установлены = РасширенияИКомпонентыУстановлены();
	
	Элементы.УстановитьСейчасШаги1и2.Видимость = НЕ Установлены;
	Элементы.ПродолжитьНастройку.Видимость = Установлены; // Установить криптопровайдер или драйвер
	Элементы.НастройкаСистемы_ЗакрытьШаги1и2.Видимость = НЕ ЭтоТолькоНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеКнопокНастройкиСистемыШаги3и4()
	
	Если ЭтоLinux Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПерезагрузкаПослеУстановки = 
		ЭтоЛокальныйКлюч()
		И (ЭтоВыборСертификатаСТокена(ЭтотОбъект) И ДрайверТокенаУстановлен(Истина) И УстановитьДрайверТокена 
		ИЛИ КриптопровайдерУстановлен() И УстановитьКриптопровайдер);
		
	Элементы.НастройкаСистемы_ПанельУстановкиШаги3и4.Видимость = НЕ ТребуетсяПерезагрузкаПослеУстановки;
	Элементы.НастройкаСистемы_ГруппаПерезагрузки.Видимость = ТребуетсяПерезагрузкаПослеУстановки;
	Элементы.НастройкаСистемы_ОтступСнизуШаги3и4.Видимость = НЕ ТребуетсяПерезагрузкаПослеУстановки;
	Элементы.НастройкаСистемы_КомпонентыШаги3и4.Высота = ?(ТребуетсяПерезагрузкаПослеУстановки, 5, 10);
		
	Если ТребуетсяПерезагрузкаПослеУстановки Тогда
		Элементы.ПерезагрузитьСейчас.Видимость = ОбщегоНазначенияКлиент.ЭтоWindowsКлиент();
	Иначе
		
		ТребуетсяУстановка = ТребуетсяУстановкаНаШаге3или4();
		
		Элементы.УстановитьСейчасШаги3и4.Видимость = ТребуетсяУстановка;
		Элементы.ПоказатьСертификаты.Видимость = НЕ ТребуетсяУстановка;
		Элементы.НастройкаСистемы_ЗакрытьШаги3и4.Видимость = НЕ ЭтоТолькоНастройка;
		
		Если ЭтоТолькоНастройка Тогда
			Элементы.ПоказатьСертификаты.Заголовок = НСтр("ru = 'Закрыть';
															|en = 'Закрыть'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПаузаОтЗалипания()
	
	Возврат 0.3;
	
КонецФункции

&НаКлиенте
Функция ПаузаДляАнимацииЛинейки()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура АктивизироватьСтраницу(МногостраничныйЭлемент, ТекущаяСтраница, МенятьВидимость = Ложь) Экспорт
	
	ДокументооборотСКОКлиентСервер.АктивизироватьСтраницу(
		МногостраничныйЭлемент, 
		ТекущаяСтраница, 
		МенятьВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииКнопкиМестаХранения(Элемент)
	
	ИмяНажатойПлитки = Элемент.Имя;
	
	Кнопки = КнопкиМестХранения();
	Для каждого Кнопка Из Кнопки Цикл
		Если Кнопка = Элемент Тогда
			СменитьЦветРамкиКнопкиМестаХранения(Кнопка);
		Иначе
			Кнопка.ЦветРамки = Новый Цвет();
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьОформлениеКнопок_КтоПодключает_СтраницаСотрудник();
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьЦветРамкиКнопкиМестаХранения(Элемент)
	
	Серый  = Новый Цвет(); // Авто
	
	Если Элемент.ЦветРамки = Серый Тогда
		Элемент.ЦветРамки = ЖелтыйЦветРамки;
	Иначе
		Элемент.ЦветРамки = Серый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьТолстыеРамки()
	
	Кнопки = КнопкиМестХранения();
	Для каждого Кнопка Из Кнопки Цикл
		Кнопка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 2);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КнопкиМестХранения()

	Кнопки = Новый Массив;
	Кнопки.Добавить(Элементы.ХранениеНаТокенеИлиФлешке);
	Кнопки.Добавить(Элементы.ХранениеНаКомпьютере);
	Кнопки.Добавить(Элементы.ХранениеDSS);
	Кнопки.Добавить(Элементы.ХранениеВПрограмме);
	Кнопки.Добавить(Элементы.ХранениеНетСертификата);
	
	Возврат Кнопки;

КонецФункции

&НаСервере
Процедура Инициализация(Параметры)
	
	Параметры.Свойство("ЭтоТолькоНастройка", ЭтоТолькоНастройка);
	Параметры.Свойство("СкрытьНастраиваемыеОрганизации", СкрытьНастраиваемыеОрганизации);
	
	ЖелтыйЦветРамки = Новый Цвет(255, 225, 0);
	КрасныйЦветОшибки = Новый Цвет(204,38,50);
	
	ЭтоВебКлиент = ДокументооборотСКОКлиентСервер.ЭтоВебКлиент();
	ИспользуетсяРежимТестирования = ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования();
	
	ЕстьБИП =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.МодульИнтернетПоддержкаПользователей() <> Неопределено;
		
	ИнициализацияДляОблачнойПодписи();
	ИнициализацияДляЭПВМоделиСервиса();
	
	Обработки.НачалоРаботыОблачной1СО.РазобратьПараметрыФормыПриСозданииНаСервере(
		ЭтотОбъект, 
		Параметры, 
		"ПараметрыФормыБыстрыйСтарт");
		
	Если ЭтоТолькоНастройка Тогда
		Заголовок = НСтр("ru = 'Настройка рабочего места';
						|en = 'Настройка рабочего места'");
		ИнициализироватьНастраиваемыеОрганизации();
		ИзменитьОформлениеСпискаОрганизаций();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДляОблачнойПодписи()
	
	ОбработкаЗаявленийАбонента.ИнициализацияДляОблачнойПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДляЭПВМоделиСервиса() Экспорт
	
	ОбработкаЗаявленийАбонента.ИнициализацияДляЭПВМоделиСервиса(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНажатаяКнопкаМестаХранения()
	
	Кнопки = КнопкиМестХранения();
	Для каждого Кнопка Из Кнопки Цикл
		Если Кнопка.ЦветРамки = ЖелтыйЦветРамки Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьОформлениеКнопок_КтоПодключает_СтраницаСотрудник()
	
	Элементы.ПерейтиКНастройкеСистемыСотрудник.Доступность = ЕстьНажатаяКнопкаМестаХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьНастройкуСистемы()
	
	НастройкаТребуется = Ложь;
	
	Элементы.НастройкаСистемы_Подсказка.Заголовок = НСтр("ru = 'Установите необходимые компоненты для работы с сертификатом:';
														|en = 'Установите необходимые компоненты для работы с сертификатом:'");

	АктивизироватьСтраницу(
		Элементы.СтраницыПомощника, 
		Элементы.СтраницаНастройкаСистемы);
		
	ОткрытьСтраницуНастройкиСистемы();
		
	Если ЭтоLinux Тогда // Обход ошибки платформы
		Элементы.НастройкаСистемы_Линейка.Картинка = БиблиотекаКартинок.БСлинейка1Статика;
	ИначеЕсли ЭтоТолькоНастройка Тогда
		Элементы.НастройкаСистемы_Линейка.Картинка = БиблиотекаКартинок.БСлинейка4Статика;
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("Подключаемый_ОпределитьНаличиеКомпонентыКриптографии", ПаузаДляАнимацииЛинейки(), Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуНастройкиСистемы()
	
	АктивизироватьСтраницуНастройкиСистемы(Элементы.НастройкаСистемы_СтраницаБублик);
		
	Если ЭтоLinux Тогда // Обход ошибки платформы
		Элементы.НастройкаСистемы_Линейка.Картинка = БиблиотекаКартинок.БСлинейка1Статика;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьСтраницуНастройкиСистемы(Страница)

	Элементы.НастройкаСистемы_Подсказка.Видимость = Страница <> Элементы.НастройкаСистемы_СтраницаБублик;
	
	АктивизироватьСтраницу(
		Элементы.НастройкаСистемы_Страницы, 
		Страница);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЛокальныхСертификатовКалуги(ОповещениеОЗавершении) Экспорт
	
	// Форма.СертификатыОрганизацииПоИНН
	СертификатыСырыеДанные = СертификатыОрганизацииПоИНН.Скопировать();
	ЗаполнитьИПоказатьТаблицуВыбораСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуВыбораСертификатов() Экспорт
	
	Сертификаты.Очистить();

	Для каждого Сертификат Из СертификатыСырыеДанные Цикл
		
		Если ТипЗнч(Сертификат) = Тип("ЭлементСпискаЗначений") Тогда 
			Сертификат = Сертификат.Значение;
		КонецЕсли;
		
		Даты = ДокументооборотСКОКлиентСервер.ДатыИзСертификата(Сертификат);
		Валиден = ТекущаяДата() <= Даты.ДатаОкончания;
		
		Если НЕ ПоказыватьПросроченные 
			И НЕ Валиден Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Сертификаты.Добавить();
		
		НоваяСтрока.Сертификат = Сертификат;
		Даты = ДокументооборотСКОКлиентСервер.ДатыИзСертификата(Сертификат);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Даты);
		
		Владелец = ДокументооборотСКОКлиентСервер.ВладелецСертификат(Сертификат);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Сертификат);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Владелец);
		
		ЕстьАдрес = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сертификат, "Адрес");
		Если ЕстьАдрес Тогда
			НоваяСтрока.Base64 = Base64Строка(ПолучитьИзВременногоХранилища(Сертификат.Адрес));
		КонецЕсли;
		
		УказанКонтейнер = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сертификат, "ИмяФайлаКонтейнера");
		Если УказанКонтейнер Тогда
			НоваяСтрока.Контейнер = Новый ФиксированнаяСтруктура(Сертификат);
		КонецЕсли;
		
		УказаноНаименование = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сертификат, "Наименование");
		Если УказаноНаименование И ЗначениеЗаполнено(Сертификат.Наименование) Тогда
			НоваяСтрока.O = Сертификат.Наименование;
		КонецЕсли;
		
		НоваяСтрока.Валиден = Валиден;
		
		ЕстьФИО = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сертификат, "ФИО");
		Если НЕ ЕстьФИО Тогда
			НоваяСтрока.ФИО = ДокументооборотСКОКлиентСервер.ФИОИзСертификата(Владелец);
		КонецЕсли;
		
		ИННы = ДокументооборотСКОКлиентСервер.ИННыИзСертификата(Владелец);
		НоваяСтрока.ИННЮЛ = ИННы.ЮЛ;
		НоваяСтрока.ИННФЛ = ИННы.ФЛ;

		ОпределитьЗаголовокСертификата(НоваяСтрока);
		ОпределитьКартинкуСертификата(НоваяСтрока);
		ОпределитьПояснениеСертификата(НоваяСтрока, Владелец);
		
	КонецЦикла;
	
	Сертификаты.Сортировать("Заголовок");
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПредупредитьОКонфликтеПрограммЗащиты_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ИгнорироватьКонфликт") Тогда
		
		КриптопровайдерПриКонфликте = Результат.КриптопровайдерПриКонфликте;
		ИгнорироватьКонфликт 		= Результат.ИгнорироватьКонфликт;
		
		ТипКриптопровайдера = КриптопровайдерПриКонфликте;
		
		ИзменитьОформлениеСсылкиКриптопровайдера();
		ПоказатьУспешнуюУстановку("УстановитьКриптопровайдер");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВыборСертификатаСТокена(Форма)
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	ЭтоВыборСТокена = 
		ЭтоРуководитель 
		ИЛИ Форма.Элементы.ХранениеНаТокенеИлиФлешке.ЦветРамки = Форма.ЖелтыйЦветРамки
		ИЛИ Форма.ХранитсяНаТокенеИлиФлешке;
		
	Возврат ЭтоВыборСТокена;
	
КонецФункции

&НаКлиенте
Функция ЭтоВыборСертификатаИзПрограммы()
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ЭтотОбъект);
	
	ЭтоВыборИзПрограммы = НЕ ЭтоРуководитель И (Элементы.ХранениеВПрограмме.ЦветРамки = ЖелтыйЦветРамки ИЛИ ХранитсяВДругомМесте);
		
	Возврат ЭтоВыборИзПрограммы;
	
КонецФункции

&НаКлиенте
Функция ЭтоВыборСертификатаИзРегистра()
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ЭтотОбъект);
	
	ЭтоВыборИзРегистра = НЕ ЭтоРуководитель И (Элементы.ХранениеНаКомпьютере.ЦветРамки = ЖелтыйЦветРамки ИЛИ ХранитсяНаКомпьютере);
		
	Возврат ЭтоВыборИзРегистра;
	
КонецФункции

&НаКлиенте
Функция ЭтоВыборСертификатаИзDSS()
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ЭтотОбъект);
	
	ЭтоВыборИзDSS = НЕ ЭтоРуководитель И Элементы.ХранениеDSS.ЦветРамки = ЖелтыйЦветРамки;
		
	Возврат ЭтоВыборИзDSS;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДобавленияОрганизации()
	
	ЗаполнитьИННизСертификата();

	ОткрытьФормуДобавленияОрганизацииПоПараметрам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияОрганизацииПоПараметрам()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыОткрытияЗаявления", ПараметрыОткрытияЗаявления());
	ДополнительныеПараметры.Вставить("ИНН", ИНН);
	ДополнительныеПараметры.Вставить("КПП", КПП);
	ДополнительныеПараметры.Вставить("ЭтоПодразделение", ЭтоПодразделениеИзЕГРЮЛ());
	ДополнительныеПараметры.Вставить("ЭтоВызовИзБыстрогоСтарта", Истина);
	ДополнительныеПараметры.Вставить("ТолькоСозданиеОрганизации", ТолькоСозданиеОрганизации);
	ДополнительныеПараметры.Вставить("ВключаемыйСертификат", ВключаемыйСертификат);
	ДополнительныеПараметры.Вставить("ПараметрыФормыБыстрыйСтарт", ПараметрыФормыБыстрыйСтарт());
	ДополнительныеПараметры.Вставить("ЕстьПредыдущиеУчетныеЗаписи", ПредыдущиеУчетныеЗаписи.Количество() > 0);
	
	Облачная1СОСлужебныйКлиентПереопределяемый.ОткрытьФормуДобавленияОрганизации(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ЭтоПодразделениеИзЕГРЮЛ() Экспорт
	
	Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда
		Данные = ОбработкаЗаявленийАбонента.ПолучитьДанныеИзЕГРЮЛ(ИНН);
		Если Данные <> Неопределено Тогда
			Возврат Данные.КПП <> КПП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Функция ПараметрыФормыБыстрыйСтарт() 
	
	Результат = Обработки.НачалоРаботыОблачной1СО.ПараметрыФормыДляКнопкиНазад(
		ЭтотОбъект, 
		Элементы.СтраницыПомощника.ТекущаяСтраница);
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыВЭлементыФормы()
	
	Результат = Обработки.НачалоРаботыОблачной1СО.ПараметрыВЭлементыФормы(
		ЭтотОбъект, 
		"ПараметрыФормыБыстрыйСтарт");
	
КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияЗаявления()

	ПараметрыФормы = 
		"ЭтоБыстрыйСтарт,
		|Организация,
		|CryptoProCSPУстановлен,
		|ViPNetCSPУстановлен,
		|КомпонентаДляРаботыСКриптографиейПодключена,
		|ИгнорироватьКонфликт,
		|КриптопровайдерПриКонфликте,
		|ВключаемыйСертификат,
		|ЭтоСертификатДругогоУЦ,
		|ВсеСертификаты,
		|ВключаемыйСертификатОблачный";
	
	ПараметрыОткрытия = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЭтотОбъект, ПараметрыФормы); 
	ПараметрыОткрытия.Вставить("ПараметрыФормы_БС", ПараметрыФормы);
	ПараметрыОткрытия.Вставить("ЭтоБыстрыйСтарт", Истина);
	ПараметрыОткрытия.Вставить("ЕстьПредыдущиеУчетныеЗаписи", ПредыдущиеУчетныеЗаписи.Количество() > 0);
	ПараметрыОткрытия.Вставить("ПредыдущиеУчетныеЗаписи", ПредыдущиеУчетныеЗаписи);
	ПараметрыОткрытия.Вставить("НетСертификатов_БС", НетСертификатов);
	ПараметрыОткрытия.Вставить("ВладелецЭЦПТип_БС", ВладелецЭЦПТип);
	ПараметрыОткрытия.Вставить("ЗаблокироватьМодифицированность_БС", Истина);
	ПараметрыОткрытия.Вставить("ПараметрыФормыБыстрыйСтарт", ПараметрыФормыБыстрыйСтарт());
	
	Возврат ПараметрыОткрытия;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьИННизСертификата()
	
	Если ВключаемыйСертификат <> Неопределено Тогда
		
		ЭтоСертификатФизЛица = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоСертификатФизЛица(ВключаемыйСертификат);
		Если НЕ ЭтоСертификатФизЛица Тогда
			Владелец = ДокументооборотСКОКлиентСервер.ВладелецСертификат(ВключаемыйСертификат);
			ИНН = ДокументооборотСКОКлиентСервер.ИННИзСертификата(Владелец);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуПоискаПредыдущихПодключений()
	
	Если ЭтоLinux Тогда // Обход ошибки платформы
		Элементы.НастройкаСистемы_Линейка.Картинка = БиблиотекаКартинок.БСлинейка1Статика;
	КонецЕсли;
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ЭтотОбъект);
	Если ЭтоРуководитель Тогда
		Элементы.СтраницаЗапросаУчеток_Заголовок.Заголовок = НСтр("ru = 'Выбор подразделения';
																	|en = 'Выбор подразделения'");
	КонецЕсли;
	
	АктивизироватьСтраницуЗапросаУчеток(Элементы.СтраницаЗапросаУчеток_СтраницаБублик);
		
КонецПроцедуры
	
&НаКлиенте
Процедура АктивизироватьСтраницуЗапросаУчеток(Страница)
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ЭтотОбъект);
	
	Если Страница = Элементы.СтраницаЗапросаУчеток_СтраницаБублик Тогда
		
		Элементы.СтраницаЗапросаУчеток_Заголовок.Заголовок = НСтр("ru = 'Выбор сертификата';
																	|en = 'Выбор сертификата'");
		Элементы.СтраницаЗапросаУчеток_Подсказка.Видимость = Ложь;
		
	Иначе
	
		Если ЭтоРуководитель Тогда
			Элементы.СтраницаЗапросаУчеток_Заголовок.Заголовок = НСтр("ru = 'Выбор подразделения';
																		|en = 'Выбор подразделения'");
		Иначе
			Элементы.СтраницаЗапросаУчеток_Заголовок.Заголовок = НСтр("ru = 'Выбор организации';
																		|en = 'Выбор организации'");
		КонецЕсли;
		
		Элементы.СтраницаЗапросаУчеток_Подсказка.Видимость = Истина;
		
	КонецЕсли;
	
	АктивизироватьСтраницу(
		Элементы.СтраницыПомощника, 
		Элементы.СтраницаЗапросаУчеток);
		
	АктивизироватьСтраницу(
		Элементы.СтраницаЗапросаУчеток_Страницы, 
		Страница);
		
КонецПроцедуры
	
&НаКлиенте
Процедура СтраницаЗапросаУчеток_Далее(Команда)
	
	ТекущиеДанные = Элементы.ПодключенныеОрганизации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите организацию';
														|en = 'Выберите организацию'"));
		Возврат;
	КонецЕсли;
	
	ПерейтиНаШагПослеВыбораСуществующегоПодключения(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизитыФормы() 

	ОбработкаЗаявленийАбонента.ОчиститьРеквизитыЗаявления(ЭтотОбъект);
	
	ПредыдущиеУчетныеЗаписи = Неопределено; 

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеВладельца() Экспорт // Вызывается из ОМ

	ОбработкаЗаявленийАбонента.ОчиститьДанныеВладельцаВЗаявленииНаПодключение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКСертификатамИлиВладельцу()
	
	Если НельзяИскатьСертификаты() ИЛИ Сертификаты.Количество() <= 1 Тогда
		ТолькоСозданиеОрганизации = Ложь;
		ВернутьсяКВыборуВидаВладельца(Неопределено);
	Иначе
		ПоказатьТаблицуВыбораСертификатов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовОжиданияПодключения(Ожидание)
	
	Элементы.ГруппаПодключиться.Доступность         = НЕ Ожидание;
	Элементы.Подключиться.Видимость                 = НЕ Ожидание;
	Элементы.ПодключитьИТСПозже.Видимость           = НЕ Ожидание;
	Элементы.ГруппаОжиданиеПодключения.Видимость    = Ожидание;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНеПредлагатьПодключитьИТС()
	
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_НеПредлагатьПодключитьИТС", , Истина);
	
КонецПроцедуры

&НаСервере
Функция НеПредлагатьПодключитьИТС()
	
	Результат = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_НеПредлагатьПодключитьИТС");
	Возврат Результат = Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьОтказОтДрайвера(Значение = Истина)
	
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_ОтказатьсяОтДрайвера", , Значение);
	
КонецПроцедуры

&НаСервере
Функция ОтказатьсяОтДрайвера()
	
	Результат = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ОтказатьсяОтДрайвера");
	Возврат Результат = Истина;
	
КонецФункции
	
&НаКлиенте
Процедура ПодключитьИнтернетПоддержку()
	
	УстановитьДоступностьЭлементовОжиданияПодключения(Истина);
	
	Элементы.ГруппаОшибкаПодключения.Видимость = Ложь;
	
	ПодключитсяКИнтернетПоддержкеНаСервере();
	Результат = ОбработкаЗаявленийАбонентаВызовСервера.ТикетАутентификацииНаПорталеПоддержки();
	
	Если Результат = Неопределено Тогда 
		УстановитьДоступностьЭлементовОжиданияПодключения(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда
		УстановитьДоступностьЭлементовОжиданияПодключения(Ложь);
		Элементы.ГруппаОшибкаПодключения.Видимость = Истина;
		Элементы.ТекстОшибкиПодключения.Заголовок = Результат.СообщениеОбОшибке;
		Возврат;;
	КонецЕсли;
	
	ВернутьсяКВыборуВидаВладельца(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ПодключитсяКИнтернетПоддержкеНаСервере()
	
	Если ЕстьБИП Тогда
		
		МодульИнтернетПоддержкаПользователей = 
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		
		ДанныеАутентификации = Новый Структура("Логин, Пароль", ЛогинИнтернетПоддержки, ПарольИнтернетПоддержки);
		УстановитьПривилегированныйРежим(Истина);
		МодульИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(ДанныеАутентификации);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВключитьDSSНаСервере()
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПодключитьПодписьСервисаDSS();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	ОбновитьИнтерфейс = ПередЗакрытиемНаСервере();
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
		Активизировать();
	КонецЕсли;
	
	// После завершения этого метода закрытие произойдет автоматически
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьБольшеНеПоказывать()
	
	ДокументооборотСКОВызовСервера.СохранитьНастройку("Облачная1СО_ЗаблокироватьБыстрыйСтарт", Истина);
	
КонецПроцедуры

&НаСервере
Функция ПередЗакрытиемНаСервере()
	
	ОбновитьИнтерфейс = Ложь;
	
	Если БольшеНеПоказыватьБС = Истина Тогда
		ОбновитьИнтерфейс = УстановитьНастройкиНачалаРаботы();
		СохранитьБольшеНеПоказывать();
	КонецЕсли;
	
	Если ЭтоВыборСертификатаСТокена(ЭтотОбъект) 
		И НЕ УстановитьДрайверТокена
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкаСистемы Тогда
		СохранитьОтказОтДрайвера(Истина);
	КонецЕсли;
	
	Возврат ОбновитьИнтерфейс;
	
КонецФункции

&НаСервере
Функция ПоказатьБыстрыйСтартО1СО()
	
	Возврат ДокументооборотСКО.ПоказатьБыстрыйСтартО1СО();
	
КонецФункции

&НаСервере
Функция УстановитьНастройкиНачалаРаботы() Экспорт
	
	Возврат Обработки.НачалоРаботыОблачной1СО.УстановитьНастройкиНачалаРаботы();
	
КонецФункции

&НаКлиенте
Процедура ВключитьПоискТокенов(ВыполняемоеОповещение)
	
	Если ЭтоLinux Тогда
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		
	Иначе
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ВключитьПоискТокенов_ПослеВключения", ЭтотОбъект, ВыполняемоеОповещение);
		КриптографияЭДКОКлиент.УстановитьОбработчикСобытия(ОписаниеОповещения, "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПоискТокенов_ПослеВключения(Результат, ВыполняемоеОповещение) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Возврат;
	КонецЕсли;
	
	ОтслеживаниеСобытийУстройствUSBвключено = Истина;
	
	// компонента должна быть на стеке, что бы событие обрабатывалось
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификатыMacOs(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьПрограммыБСППередПоказомСертификатов", 
		ЭтотОбъект);
	
	ПроверитьУстановкуПрограммКриптографииБСП(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПрограммыБСППередПоказомСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.КомпонентаУстановлена Тогда
		
		Если Результат.Программы.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолучитьПрограммыБСППередПоказомСертификатов_ПослеПолученияПутей", 
				ЭтотОбъект);
				
			ЗаполнитьСписокПрограммИСтандартныеПути(ОписаниеОповещения, Результат.Программы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПрограммыБСППередПоказомСертификатов_ПослеПолученияПутей(Результат, ВходящийКонтекст) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьПрограммыБРОПередПоказомСертификатов", 
		ЭтотОбъект);
	
	ОбработкаЗаявленийАбонентаКлиент.ЗаполнитьСписокКриптопровайдеров(
		ОписаниеОповещения, 
		КонтекстЭДОКлиент,
		ЭтотОбъект,
		Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПрограммыБРОПередПоказомСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	ПоказатьСертификаты(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкацию(ИмяМакета)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяМакета", ИмяМакета);
	
	ОткрытьФорму("Обработка.НачалоРаботыОблачной1СО.Форма.Инструкция", ДополнительныеПараметры, ЭтотОбъект); 
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьМестаХраненияПоОрганизациям()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВладелецЭЦПТип = Неопределено;
	
	Для каждого Строка Из СписокОрганизаций Цикл
		
		Организация   = Строка.Значение;
		УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
		
		Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		Модель = Мультирежим.СертификатПользователя(УчетнаяЗапись, "МодельХраненияЗакрытогоКлюча").МодельХраненияЗакрытогоКлюча;
		Если Модель = Перечисления.МодельХраненияЗакрытогоКлюча.ВМоделиСервиса 
			ИЛИ Модель = Перечисления.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись Тогда
			
			ХранитсяВДругомМесте = Истина;
			
		ИначеЕсли Модель = Перечисления.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч Тогда
			
			Если Мультирежим.ВладелецЭЦПЭтоРуководитель(Организация) Тогда
				ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
				ХранитсяНаТокенеИлиФлешке = Истина;
			Иначе
				ХранитсяНаКомпьютере = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуУспешнойНастройки()
	
	ПрограммноеЗакрытие = Истина;
	
	АктивизироватьСтраницу(
		Элементы.СтраницыПомощника, 
		Элементы.СтраницаУспешнаяНастройка);
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастраиваемыеОрганизации()
	
	Если СкрытьНастраиваемыеОрганизации Тогда
		Возврат;
	КонецЕсли;

	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	СписокОрганизаций.Очистить();
	
	Если ИспользуетсяОднаОрганизация Тогда
		
		ВсегоОрганизаций = 1;
		
		Организация = ОбработкаЗаявленийАбонента.ОрганизацияПоУмолчанию();
		СписокОрганизаций.Добавить(Организация, Строка(Организация));
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления И Организации.УчетнаяЗаписьОбмена В (&ТекущиеУчетныеЗаписи)";
		
		ТекущиеУчетныеЗаписи = ДокументооборотСКО.ТекущиеУчетныеЗаписиНалогоплательщика();
		Запрос.УстановитьПараметр("ТекущиеУчетныеЗаписи", ТекущиеУчетныеЗаписи);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		ВсегоОрганизаций = Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка, Строка(Выборка.Ссылка));
		КонецЦикла;
		
	КонецЕсли;
	
	ОпределитьМестаХраненияПоОрганизациям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийНажатие_ПослеВыбора(Результат, ВходящийКонтекст) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокОрганизаций.Очистить();
	СписокОрганизаций = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Результат);
	
	ИзменитьОформлениеСпискаОрганизаций();
	
	СброситьМестаХранения();
	ОпределитьМестаХраненияПоОрганизациям();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеСпискаОрганизаций()
	
	Элементы.ГруппаСписокОрганизаций.Видимость = 
		НЕ ИспользуетсяОднаОрганизация 
		И ВсегоОрганизаций > 1 
		И НЕ СкрытьНастраиваемыеОрганизации;

	Если НЕ Элементы.ГруппаСписокОрганизаций.Видимость Тогда
		Элементы.СтраницаОбъектНастройки_Подсказка.Заголовок = НСтр("ru = 'Для точной настройки укажите место хранения ваших сертификатов';
																	|en = 'Для точной настройки укажите место хранения ваших сертификатов'");
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницаОбъектНастройки_Подсказка.Заголовок = НСтр("ru = 'Для точной настройки выберите ваши организации, подключенные к 1С-Отчетности, или укажите место хранения ваших сертификатов';
																|en = 'Для точной настройки выберите ваши организации, подключенные к 1С-Отчетности, или укажите место хранения ваших сертификатов'");
	
	КоличествоВыбранных = СписокОрганизаций.Количество();
	
	Если КоличествоВыбранных = ВсегоОрганизаций Тогда
		Представление  = НСтр("ru = 'Все мои организации';
								|en = 'Все мои организации'");
	ИначеЕсли КоличествоВыбранных = 0 Тогда
		Представление  = НСтр("ru = 'Выбрать';
								|en = 'Выбрать'");
	ИначеЕсли КоличествоВыбранных = 1 Тогда
		Представление  = СписокОрганизаций[0].Представление;
	ИначеЕсли КоличествоВыбранных = 2 Тогда
		Представление  = СписокОрганизаций[0].Представление + НСтр("ru = ' и ';
																	|en = ' и '") + СписокОрганизаций[1].Представление;
	ИначеЕсли КоличествоВыбранных > 2 Тогда
		Представление  = СписокОрганизаций[0].Представление + НСтр("ru = ' и еще ';
																	|en = ' и еще '") + Строка(КоличествоВыбранных - 1);
	КонецЕсли;
	
	Элементы.ПредставлениеСпискаОрганизаций.Заголовок = Представление;
	
	Элементы.СтраницаОбъектНастройки_ГруппаВОблаке.Видимость = 
		ДоступнаЭлектроннаяПодписьВМоделиСервиса 
		ИЛИ ДоступнаЭлектроннаяОблачнаяПодпись;
		
КонецПроцедуры

&НаКлиенте
Процедура НетСертификатаРуководителя_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = НСтр("ru = 'Продолжить без сертификата';
							|en = 'Продолжить без сертификата'") Тогда
		
		ДобавитьОрганизацию(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

