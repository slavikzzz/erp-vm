//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ИмяТекущейСтраницы") Тогда
		ТекущийЭлемент = Элементы[Параметры.ИмяТекущейСтраницы];
	КонецЕсли;
	
	ИнициализацияНастройкиСписков();
	Элементы.ПолучениеИВозврат.ОтборСтрок = Новый ФиксированнаяСтруктура("НеСоответствуетНастройкеСписка", Ложь);
	
	ЗапуститьВыполнениеВФоне = Истина;
	
	УстановитьТекстЗапросаСписокРаспоряженияНаОформление();
	
	ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ПолучениеИВозвратМатериалов", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
		СкорректироватьРеквизитЗаказыПоДату();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства") Тогда
		Элементы.ЗаказыНаПередачуМатериаловСоздать1.Видимость = Ложь;
	Иначе
		Элементы.ЗаказыНаПередачуМатериаловСоздать2.Видимость = Ложь;
	КонецЕсли; 
	
	Элементы.СписокРаспоряженияНаОформлениеСоответствиеОрдера.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДокументыПроизводства,
		"ОперацияПередачаВПроизводство",
		НСтр("ru = 'Передача в производство';
			|en = 'Transfer to production'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДокументыПроизводства,
		"ОперацияВозврат",
		НСтр("ru = 'Возврат из производства';
			|en = 'Return from production'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДокументыПроизводства,
		"ОперацияПеремещение",
		НСтр("ru = 'Перемещение в производстве';
			|en = 'Transfer in production'"));
		
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
		
	ЗаполнитьСпискиВыбораПоСостояниямОтгрузки();
	
	СкрытьЭлементыНедоступныеПоПравам();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	РезультатРасчета = ОбновитьДанныеНаСервере(Ложь);
	
	Если ОбновлятьДанныеАвтоматически Тогда
		
		Элементы.ПолучениеИВозвратОбновлятьДанныеАвтоматически.Пометка = ОбновлятьДанныеАвтоматически;
		Элементы.ПолучениеИВозвратОбновитьДанные.ТолькоВоВсехДействиях = Истина;
	
		Если РезультатРасчета.ЗаданиеВыполнено Тогда
			
			АдресХранилища = РезультатРасчета.АдресХранилища;
			ЗагрузитьДанныеНаСервере();
			
		Иначе
			
			ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
			АдресХранилища       = РезультатРасчета.АдресХранилища;
			
			ОткрытьФормуДлительнойОперацииПриОткрытии = Истина;
			
	    КонецЕсли;
    КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = ЗаказыНаПередачуМатериалов.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокТипов;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ЗаказыНаПередачуМатериаловКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОткрытьФормуДлительнойОперацииПриОткрытии Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуДлительнойОперации", 0.1, Истина);
	КонецЕсли; 
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство"
		ИЛИ ИмяСобытия = "Запись_ЗаказМатериаловВПроизводство"
		ИЛИ ИмяСобытия = "Запись_ПередачаМатериаловВПроизводство"
		ИЛИ ИмяСобытия = "Запись_ВозвратМатериаловИзПроизводства"
		ИЛИ ИмяСобытия = "Запись_ВыпускПродукции"
		ИЛИ ИмяСобытия = "Запись_МаршрутныйЛистПроизводства"
		ИЛИ ИмяСобытия = "Запись_КорректировкаЗаказаМатериаловВПроизводство"
		ИЛИ ИмяСобытия = "Запись_ПеремещениеМатериаловВПроизводстве" Тогда
		
		Если ОбновлятьДанныеАвтоматически Тогда
			Если ВводДоступен() Тогда
				ОбновитьДанные(Ложь);
			Иначе
				ОбновитьДанныеКогдаФормаСтанетАктивной();
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли; 
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоДатуПриИзменении(Элемент)
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНакладнойПриИзменении(Элемент)
	
	СостояниеНакладнойПриИзмененииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОрдераПриИзменении(Элемент)
	
	СостояниеОрдераПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗаказыНаПередачу Тогда
		Элементы.ЗаказыНаПередачуМатериалов.Обновить();
	ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКОформлениюНакладных Тогда
		Элементы.СписокРаспоряженияНаОформление.Обновить();
	ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДокументыПроизводства Тогда
		Элементы.ДокументыПроизводства.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучениеИВозврат

&НаКлиенте
Процедура ПолучениеИВозвратВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//++ НЕ УТКА
	КорректировкаПолученияМатериала();
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыНаПередачуМатериалов

&НаКлиенте
Процедура ЗаказыНаПередачуМатериаловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.ЗаказыНаПередачуМатериалов.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРаспоряженияНаОформление

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыПроизводства

&НаКлиенте
Процедура ДокументыПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.ДокументыПроизводства.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьВозвратИлиПеремещение(Команда)
	
	ТекущиеДанные = Элементы.ДокументыПроизводства.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьВозвратИлиПеремещение(Команда)
	
	ТекущиеДанные = Элементы.ДокументыПроизводства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ Элементы.ДокументыПроизводства.ВыделенныеСтроки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства") Тогда
		ИмяФормыДокумента = "Документ.ВозвратМатериаловИзПроизводства.ФормаОбъекта";
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПередачаМатериаловВПроизводство") Тогда
		ИмяФормыДокумента = "Документ.ПередачаМатериаловВПроизводство.ФормаОбъекта";
	Иначе
		ИмяФормыДокумента = "Документ.ПеремещениеМатериаловВПроизводстве.ФормаОбъекта";
	КонецЕсли; 
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Ссылка);
	
	ОткрытьФорму(ИмяФормыДокумента, ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПометитьНаУдалениеДокументыПроизводства(Команда)
	
	ТекущиеДанные = Элементы.ДокументыПроизводства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для каждого НомерСтроки Из Элементы.ДокументыПроизводства.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДокументыПроизводства.ДанныеСтроки(НомерСтроки);
		Если ТекущиеДанные.ПометкаУдаления 
				И НЕ ДанныеСтроки.ПометкаУдаления
			ИЛИ НЕ ТекущиеДанные.ПометкаУдаления
				И ДанныеСтроки.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
    Если Элементы.ДокументыПроизводства.ВыделенныеСтроки.Количество() = 1 Тогда
        Если НЕ ТекущиеДанные.ПометкаУдаления Тогда
            ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru = 'Пометить ""%1"" на удаление?';
				|en = 'Do you want to mark %1 for deletion?'"),
            Строка(ТекущиеДанные.Ссылка));
        Иначе
            ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru = 'Снять с ""%1"" пометку на удаление?';
				|en = 'Do you want to clear a deletion mark for ""%1""?'"),
            Строка(ТекущиеДанные.Ссылка));
        КонецЕсли; 
    Иначе
        Если НЕ ТекущиеДанные.ПометкаУдаления Тогда
            ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?';
								|en = 'Mark the selected items for deletion?'");
        Иначе
            ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?';
								|en = 'Unmark selected items for deletion?'");
        КонецЕсли; 
    КонецЕсли; 
    
    ДополнительныеПараметрыУдаления = Новый Структура;
    ДополнительныеПараметрыУдаления.Вставить("МассивСсылок", МассивСсылок);
    ДополнительныеПараметрыУдаления.Вставить("УстановитьПометкуУдаления", НЕ ТекущиеДанные.ПометкаУдаления);
    ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеДокументыПроизводстваЗавершение", ЭтотОбъект, ДополнительныеПараметрыУдаления);
    
    ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаПередачуМатериаловПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ОбновитьДанные(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СТРАНИЦА "ПОЛУЧЕНИЕ И ВОЗВРАТ МАТЕРИАЛОВ"

&НаКлиенте
Процедура КомандаЗапланироватьПолучениеМатериалов(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.ЗапланироватьПолучениеМатериалов");
	
	//++ НЕ УТКА
	ЗапланироватьПолучениеМатериалов();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформитьНакладнуюНаОтрицательныйОстатокВПодразделении(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.ОформитьНакладнуюНаОтрицательныйОстатокВПодразделенииКА");
	
	ОформитьНакладнуюНаОтрицательныйОстатокВПодразделении();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформитьВозвратНаТекущийИзлишек(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.ОформитьВозвратНаТекущийИзлишек");
	
	ВернутьИзлишекНаСклад();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформитьНакладную(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.ОформитьНакладную");
	
	ПолучитьСоСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаПередачиМатериалов(Команда)
	
	//++ НЕ УТКА
	
	ВыделенныеСтроки = Элементы.ПолучениеИВозврат.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	ТекущееПодразделение = Неопределено;
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ПолучениеИВозврат.НайтиПоИдентификатору(Идентификатор);
		
		Если ТекущееПодразделение <> Неопределено И ТекущееПодразделение <> ДанныеСтроки.Подразделение Тогда
			ТекстПредупреждения = НСтр("ru = 'Для настройки передачи материалов нужно выбрать материалы одного подразделения.';
										|en = 'To configure transfer of materials, select materials of one business unit.'");
	   		ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли; 
		
		ТекущееПодразделение = ДанныеСтроки.Подразделение;
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		ДанныеНоменклатуры.Вставить("Характеристика", ДанныеСтроки.Характеристика);
		СписокНоменклатуры.Добавить(ДанныеНоменклатуры);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("Подразделение,СписокНоменклатуры", ТекущееПодразделение, СписокНоменклатуры);
	ОткрытьФорму("Обработка.НастройкаПередачиМатериаловВПроизводство.Форма", 
					ПараметрыФормы, 
					ЭтаФорма,,,,, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКорректировкаПолученияМатериала(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.КорректировкаЗаказаМатериалов");
	
	//++ НЕ УТКА
	КорректировкаПолученияМатериала();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтгрузитьСоСклада(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.ОтгрузитьСоСклада");
	
	//++ НЕ УТКА
	ОтгрузитьСоСклада();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформитьЗаказМатериалов(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.ОформитьЗаказМатериалов");
	
	ОформитьЗаказМатериалов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаСпискаПолучениеИВозврат(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемы", АдресСхемыНастройкаСпискаПолучениеИВозврат);
	ПараметрыФормы.Вставить("НастройкиСписка", НастройкиПолучениеИВозврат);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаСпискаПолучениеИВозвратЗавершение", ЭтотОбъект);
	ОткрытьФорму("Отчет.НастройкаСписка.Форма.НастройкаСписка", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьНастройкиСпискаПолучениеИВозврат(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОбъекта", "ПолучениеИВозвратМатериалов");
	ПараметрыФормы.Вставить("КлючНастроек", "НастройкиПолучениеИВозврат");
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНастройкиСпискаПолучениеИВозвратЗавершение", ЭтотОбъект);
	ОткрытьФорму("ФормаСохраненияПользовательскихНастроекДинамическихСписков", 
			ПараметрыФормы,,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьНастройкиСпискаПолучениеИВозврат(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОбъекта", "ПолучениеИВозвратМатериалов");
	ПараметрыФормы.Вставить("КлючНастроек", "НастройкиПолучениеИВозврат");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьНастройкиСпискаПолучениеИВозвратЗавершение", ЭтотОбъект);
	ОткрытьФорму("ФормаЗагрузкиПользовательскихНастроекДинамическихСписков", 
			ПараметрыФормы,,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновлятьДанныеАвтоматически(Команда)
	
	ОбновлятьДанныеАвтоматически = НЕ ОбновлятьДанныеАвтоматически;
	Элементы.ПолучениеИВозвратОбновлятьДанныеАвтоматически.Пометка = ОбновлятьДанныеАвтоматически;
	Элементы.ПолучениеИВозвратОбновитьДанные.ТолькоВоВсехДействиях = ОбновлятьДанныеАвтоматически;
	
	СохранитьПараметрыОтбора();
	
КонецПроцедуры

// СТРАНИЦА "ПЕРЕДАЧИ В ПРОИЗВОДСТВО, ПЕРЕМЕЩЕНИЯ И ВОЗВРАТЫ"

&НаКлиенте
Процедура КомандаСоздатьПередачуВПроизводство(Команда)
	
	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Подразделение", ОтборПодразделение);
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("Основание", РеквизитыШапки);
	
	ОткрытьФорму("Документ.ПередачаМатериаловВПроизводство.ФормаОбъекта", ПараметрыОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПеремещениеВПроизводстве(Команда)
	
	ОткрытьФорму("Документ.ПеремещениеМатериаловВПроизводстве.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьВозврат(Команда)
	
	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Подразделение", ОтборПодразделение);
	РеквизитыШапки.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства"));
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("Основание", РеквизитыШапки);
	
	ОткрытьФорму("Документ.ВозвратМатериаловИзПроизводства.ФормаОбъекта", ПараметрыОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВозвратыКВозврату(Команда)
	
	УстановитьСтатусДокументовПроизводства("КВозврату", Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства"), НСтр("ru = 'К возврату';
																													|en = 'For return'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВозвратыПринято(Команда)
	
	УстановитьСтатусДокументовПроизводства("Принято", Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства"), НСтр("ru = 'Принято';
																													|en = 'Received'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПередачиОтгружено(Команда)
	
	УстановитьСтатусДокументовПроизводства("Отгружено", Тип("ДокументСсылка.ПередачаМатериаловВПроизводство"), НСтр("ru = 'Отгружено';
																													|en = 'Shipped'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПередачиПринято(Команда)
	
	УстановитьСтатусДокументовПроизводства("Принято", Тип("ДокументСсылка.ПередачаМатериаловВПроизводство"), НСтр("ru = 'Принято';
																													|en = 'Received'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПеремещенияКОтгрузке(Команда)
	
	УстановитьСтатусДокументовПроизводства("КОтгрузке", Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве"), НСтр("ru = 'К отгрузке';
																														|en = 'To ship'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПеремещенияОтгружено(Команда)
	
	УстановитьСтатусДокументовПроизводства("Отгружено", Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве"), НСтр("ru = 'Отгружено';
																														|en = 'Shipped'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПеремещенияПринято(Команда)
	
	УстановитьСтатусДокументовПроизводства("Принято", Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве"), НСтр("ru = 'Принято';
																													|en = 'Received'"));
	
КонецПроцедуры

// СТРАНИЦА "К ОФОРМЛЕНИЮ НАКЛАДНЫХ"

&НаКлиенте
Процедура ОформитьПоЗаказам(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.ОформитьПоЗаказам");
	
	ОформитьНакладную(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузке(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПолучениеИВозвратМатериалов.Форма.Команда.ОформитьПоОтгрузке");
	
	ОформитьНакладную(Истина);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ЗаказыНаПередачуМатериалов);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ЗаказыНаПередачуМатериалов, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ЗаказыНаПередачуМатериалов);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанными

&НаКлиенте
Процедура ОбновитьДанные(СохранитьПараметрыОтбора, ИнтерактивныйВызов = Ложь)

	РезультатРасчета = ОбновитьДанныеНаСервере(СохранитьПараметрыОтбора, ИнтерактивныйВызов);
	
	Если РезультатРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		
		АдресХранилища = РезультатРасчета.АдресХранилища;
		ЗагрузитьДанныеНаСервере();
		
	Иначе
		
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища       = РезультатРасчета.АдресХранилища;
		
		ОткрытьФормуДлительнойОперации();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ЗагрузитьДанныеНаСервере();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()

	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	// Уменьшим шаг увеличения времени опроса выполнения задания
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);

КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеНаСервере(СохранитьПараметрыОтбора, ИнтерактивныйВызов = Ложь)

	СкорректироватьРеквизитЗаказыПоДату();
	
	Если СохранитьПараметрыОтбора Тогда
		СохранитьПараметрыОтбора();
	КонецЕсли; 
	
	ОбновитьСписокРаспоряженияНаОформление();
	ОбновитьЗаказыНаПередачу();
	ОбновитьДокументыПроизводства();
	
	Элементы.ДокументыПроизводства.Обновить();
	Элементы.ЗаказыНаПередачуМатериалов.Обновить();
	Элементы.СписокРаспоряженияНаОформление.Обновить();
	
	Если ИнтерактивныйВызов ИЛИ ОбновлятьДанныеАвтоматически Тогда
		РезультатРасчета = ПолучитьДанныеСПомощьюФоновогоЗадания();
	Иначе
		РезультатРасчета = Неопределено;
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСПомощьюФоновогоЗадания()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Подразделение", ОтборПодразделение);
	ПараметрыЗадания.Вставить("Организация",   ОтборОрганизация);
	ПараметрыЗадания.Вставить("Склад",         ОтборСклад);
	ПараметрыЗадания.Вставить("ЗаказыПоДату",  ЗаказыПоДату);
	
	Если ЗапуститьВыполнениеВФоне Тогда
		
		НаименованиеЗадания = НСтр("ru = 'Получение данных о заказе материалов';
									|en = 'Receiving data on order for materials'");
		РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
							УникальныйИдентификатор,
							"Обработки.ПолучениеИВозвратМатериалов.ПолучитьДанные",
							ПараметрыЗадания,
							НаименованиеЗадания);
							
	Иначе
	
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ПолучениеИВозвратМатериалов.ПолучитьДанные(ПараметрыЗадания, АдресХранилища);
		
		РезультатРасчета = Новый Структура;
		РезультатРасчета.Вставить("АдресХранилища",   АдресХранилища);
		РезультатРасчета.Вставить("ЗаданиеВыполнено", Истина);
		
	КонецЕсли; 
	
	Возврат РезультатРасчета;

КонецФункции

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаОформление()

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРаспоряженияНаОформление, "Подразделение", ОтборПодразделение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРаспоряженияНаОформление, "Организация", ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРаспоряженияНаОформление, "Склад", ОтборСклад);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере()
	
	СтруктураПоискаТекущейСтроки = Неопределено;
	Если Элементы.ПолучениеИВозврат.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ПолучениеИВозврат.НайтиПоИдентификатору(Элементы.ПолучениеИВозврат.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			СтруктураПоискаТекущейСтроки = Новый Структура("Номенклатура,Характеристика,Назначение,Подразделение");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаТекущейСтроки, ТекущиеДанные);
		КонецЕсли; 
	КонецЕсли; 
	
	ПолучениеИВозврат.Очистить();
	ТаблицаПолучениеИВозвратМатериалов = ПолучитьИзВременногоХранилища(АдресХранилища);
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ПолучениеИВозврат, ТаблицаПолучениеИВозвратМатериалов);
	
	ПрименитьНастройкуСпискаПолучениеИВозврат();
	
	// Восстановление текущей строки в списке "Получение и возврат".
	Если СтруктураПоискаТекущейСтроки <> Неопределено Тогда
		СписокСтрок = ПолучениеИВозврат.НайтиСтроки(СтруктураПоискаТекущейСтроки);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.ПолучениеИВозврат.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаказыНаПередачу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыНаПередачуМатериалов,
		"Подразделение",
		ОтборПодразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		НЕ ОтборПодразделение.Пустая());

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыНаПередачуМатериалов,
		"Склад",
		ОтборСклад,
		ВидСравненияКомпоновкиДанных.Равно,,
		НЕ ОтборСклад.Пустая());

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаказыНаПередачуМатериалов,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		НЕ ОтборОрганизация.Пустая());
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыПроизводства()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДокументыПроизводства,
		"Подразделение",
		ОтборПодразделение);

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДокументыПроизводства,
		"Склад",
		ОтборСклад);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ДокументыПроизводства,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		НЕ ОтборОрганизация.Пустая());
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКогдаФормаСтанетАктивной()

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной", 0.1, Истина);

КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной()
	
	Если ВводДоступен() Тогда
		ОбновитьДанные(Ложь);
	Иначе
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОформлениеДокументов

&НаКлиенте
Процедура ОформитьНакладнуюНаОтрицательныйОстатокВПодразделении()

	СписокСтрок = ПроверитьИВернутьСписокСтрокДляПередачиМатериалов();
	
	Если СписокСтрок = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЕстьОтрицательныйОстаток = Ложь;
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		Если ДанныеСтроки.Остаток < 0 Тогда
			ЕстьОтрицательныйОстаток = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОтрицательныйОстаток Тогда
		Если СписокСтрок.Количество() = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'По выбранному материалу отсутствует отрицательный остаток в подразделении.';
										|en = 'There is no negative inventory by the selected material in the business unit.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'По выбранным материалам отсутствует отрицательный остаток в подразделении.';
										|en = 'There is no negative inventory by the selected materials in the business unit.'");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОформитьБезРаспоряжений = Истина;
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		Если ДанныеСтроки.КПолучению <> 0 Тогда
			ОформитьБезРаспоряжений = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ОформитьПередачуМатериаловБезРаспоряжений(СписокСтрок, "ОформитьНакладнуюНаОтрицательныйОстатокВПодразделении");

КонецПроцедуры
 
&НаКлиенте
Процедура ВернутьИзлишекНаСклад()

	ВыделенныеСтроки = Элементы.ПолучениеИВозврат.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 ИЛИ НЕ ПравоВводаВозвратаИзПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполненияТовары.Очистить();
	
	ТекущаяОрганизация = Неопределено;
	ТекущийСклад = Неопределено;
	ТекущееПодразделение = Неопределено;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ПолучениеИВозврат.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ДанныеСтроки.ТекущийИзлишекДефицит <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Подразделение и склад должны быть одинаковыми
		Если ТекущаяОрганизация <> Неопределено 
				И ТекущаяОрганизация <> ДанныеСтроки.Организация 
			ИЛИ ТекущееПодразделение <> Неопределено 
				И ТекущееПодразделение <> ДанныеСтроки.Подразделение Тогда
				
			ТекстПредупреждения = НСтр("ru = 'Для оформления возврата необходимо выбрать материалы одной организации,
											|которые передаются из одного подразделения.';
											|en = 'To register the return, select materials of one company
											|that are transferred from one business unit.  '");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		ДанныеДляЗаполнения = ДанныеДляЗаполненияТовары.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, ДанныеСтроки);
		
		ДанныеДляЗаполнения.Количество = ДанныеСтроки.ТекущийИзлишекДефицит;
		ДанныеДляЗаполнения.КоличествоУпаковок = ДанныеДляЗаполнения.Количество;
		
		ТекущаяОрганизация = ДанныеСтроки.Организация;
		ТекущееПодразделение = ДанныеСтроки.Подразделение;
		Если ТекущийСклад = Неопределено Тогда
			ТекущийСклад = ДанныеСтроки.Склад;
		ИначеЕсли ТекущийСклад <> ДанныеСтроки.Склад Тогда
			ТекущийСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;

	Если ДанныеДляЗаполненияТовары.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать материалы, по которым есть излишек.';
									|en = 'Select materials with surplus.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Организация", ТекущаяОрганизация);
	РеквизитыШапки.Вставить("Подразделение", ТекущееПодразделение);
	РеквизитыШапки.Вставить("Склад", ТекущийСклад);
	РеквизитыШапки.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства"));
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("Товары", ДанныеДляЗаполненияТовары);
	ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
	
	ОткрытьФорму("Документ.ВозвратМатериаловИзПроизводства.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСоСклада()

	СписокСтрок = ПроверитьИВернутьСписокСтрокДляПередачиМатериалов();
	
	Если СписокСтрок = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОформитьБезРаспоряжений = Истина;
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		Если ДанныеСтроки.КПолучению <> 0 Тогда
			ОформитьБезРаспоряжений = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ОформитьБезРаспоряжений Тогда
		ОформитьПередачуМатериаловБезРаспоряжений(СписокСтрок);
	Иначе
		ОформитьПередачуМатериаловПоРаспоряжениям(СписокСтрок);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПередачуМатериаловБезРаспоряжений(СписокСтрок, СпособРасчетаКоличества = "")

	ДанныеДляЗаполненияТовары.Очистить();
	
	ТекущаяОрганизация = Неопределено;
	ТекущийСклад = Неопределено;
	ТекущееПодразделение = Неопределено;
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		
		// Подразделение, склад, организация должны быть одинаковыми
		Если ТекущаяОрганизация <> Неопределено 
				И ТекущаяОрганизация <> ДанныеСтроки.Организация
			ИЛИ ТекущийСклад <> Неопределено 
				И ТекущийСклад <> ДанныеСтроки.Склад
			ИЛИ ТекущееПодразделение <> Неопределено 
				И ТекущееПодразделение <> ДанныеСтроки.Подразделение Тогда
				
			ТекстПредупреждения = НСтр("ru = 'Для оформления накладной необходимо выбрать материалы одной организации,
											|которые передаются с одного склада и в одно подразделение.';
											|en = 'To register the invoice, select materials of one company
											|that are transferred from one warehouse and to one business unit.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Если СпособРасчетаКоличества = "ПокрытьДефицит" Тогда
			
			Если ДанныеСтроки.ОжидаемыйИзлишекДефицит < 0 Тогда
				ДанныеДляЗаполнения = ДанныеДляЗаполненияТовары.Добавить();
				ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, ДанныеСтроки);
				
				ДанныеДляЗаполнения.Количество = -ДанныеСтроки.ОжидаемыйИзлишекДефицит;
				ДанныеДляЗаполнения.КоличествоУпаковок = ДанныеДляЗаполнения.Количество;
			КонецЕсли; 
			
		ИначеЕсли СпособРасчетаКоличества = "ОформитьНакладнуюНаОтрицательныйОстатокВПодразделении" Тогда
			
			Если ДанныеСтроки.Остаток < 0 Тогда
				ДанныеДляЗаполнения = ДанныеДляЗаполненияТовары.Добавить();
				ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, ДанныеСтроки);
				
				ДанныеДляЗаполнения.Количество = -ДанныеСтроки.Остаток;
				ДанныеДляЗаполнения.КоличествоУпаковок = ДанныеДляЗаполнения.Количество;
			КонецЕсли; 
			
		Иначе
			
			ДанныеДляЗаполнения = ДанныеДляЗаполненияТовары.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, ДанныеСтроки);
			
		КонецЕсли; 
		
		ТекущийСклад = ДанныеСтроки.Склад;
		ТекущееПодразделение = ДанныеСтроки.Подразделение;
		ТекущаяОрганизация = ДанныеСтроки.Организация;
		
	КонецЦикла;

	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Организация", ТекущаяОрганизация);
	РеквизитыШапки.Вставить("Подразделение", ТекущееПодразделение);
	РеквизитыШапки.Вставить("Склад", ТекущийСклад);
	РеквизитыШапки.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВПроизводство"));
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("Товары",         ДанныеДляЗаполненияТовары);
	ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
	
	ОткрытьФорму("Документ.ПередачаМатериаловВПроизводство.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));

КонецПроцедуры

&НаКлиенте
Процедура ОформитьПередачуМатериаловПоРаспоряжениям(СписокСтрок)

	ДанныеСтрок = Новый Массив;
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		ПараметрыСтроки = Новый Структура("Номенклатура,Характеристика,Назначение,Подразделение");
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ДанныеСтроки);
		ДанныеСтрок.Добавить(ПараметрыСтроки);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокМатериалов", ДанныеСтрок);
	ОткрытьФорму("Обработка.ПолучениеИВозвратМатериалов.Форма.ПолучениеМатериаловВыборРаспоряжения", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьИВернутьСписокСтрокДляПередачиМатериалов()

	ВыделенныеСтроки = Элементы.ПолучениеИВозврат.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 ИЛИ НЕ ПравоВводаПередачиМатериаловВПроизводство Тогда
		Возврат Неопределено;
	КонецЕсли;

	СписокСтрок = Новый Массив;
	
	ТекущийСклад = Неопределено;
	ТекущееПодразделение = Неопределено;
	ТекущаяОрганизация = Неопределено;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ПолучениеИВозврат.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		// Подразделение, склад, организация должны быть одинаковыми
		Если ТекущаяОрганизация <> Неопределено 
				И ТекущаяОрганизация <> ДанныеСтроки.Организация
			ИЛИ ТекущийСклад <> Неопределено 
				И ТекущийСклад <> ДанныеСтроки.Склад
			ИЛИ ТекущееПодразделение <> Неопределено 
				И ТекущееПодразделение <> ДанныеСтроки.Подразделение Тогда
				
			ТекстПредупреждения = НСтр("ru = 'Для оформления накладной необходимо выбрать материалы одной организации,
											|которые передаются с одного склада и в одно подразделение.';
											|en = 'To register the invoice, select materials of one company
											|that are transferred from one warehouse and to one business unit.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат Неопределено;
		КонецЕсли;
		
		СписокСтрок.Добавить(ДанныеСтроки);
		
		ТекущийСклад = ДанныеСтроки.Склад;
		ТекущееПодразделение = ДанныеСтроки.Подразделение;
		ТекущаяОрганизация = ДанныеСтроки.Организация;
	КонецЦикла;

	Возврат СписокСтрок;
	
КонецФункции

&НаКлиенте
Процедура ОформитьЗаказМатериалов()

	СписокСтрок = ПроверитьИВернутьСписокСтрокДляПередачиМатериалов();
	
	Если СписокСтрок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполненияТовары.Очистить();
	
	ТекущийСклад = Неопределено;
	ТекущееПодразделение = Неопределено;
	ТекущаяОрганизация = Неопределено;
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		
		ДанныеДляЗаполнения = ДанныеДляЗаполненияТовары.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, ДанныеСтроки);
		
		Если ДанныеСтроки.ОжидаемыйИзлишекДефицит < 0 Тогда
			КЗаказу = -ДанныеСтроки.ОжидаемыйИзлишекДефицит;
			Если ДанныеСтроки.ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук") Тогда
				КЗаказу = ?(Цел(КЗаказу) <> КЗаказу, Цел(КЗаказу) + 1, КЗаказу);
			КонецЕсли;
			ДанныеДляЗаполнения.Количество = КЗаказу;
			ДанныеДляЗаполнения.КоличествоУпаковок = ДанныеДляЗаполнения.Количество;
		КонецЕсли;
		
		ТекущийСклад = ДанныеСтроки.Склад;
		ТекущееПодразделение = ДанныеСтроки.Подразделение;
		ТекущаяОрганизация = ДанныеСтроки.Организация;
		
	КонецЦикла;

	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Организация", ТекущаяОрганизация);
	РеквизитыШапки.Вставить("Подразделение", ТекущееПодразделение);
	РеквизитыШапки.Вставить("Склад", ТекущийСклад);
	РеквизитыШапки.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВПроизводство"));
	РеквизитыШапки.Вставить("УправлениеПроизводством2_2", Ложь);
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("Товары",         ДанныеДляЗаполненияТовары);
	ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
	
	ОткрытьФорму("Документ.ЗаказМатериаловВПроизводство.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Функция СписокМатериаловДляКорректировки(Действие = Неопределено)

	ВыделенныеСтроки = Элементы.ПолучениеИВозврат.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 ИЛИ НЕ ПравоВводаПередачиМатериаловВПроизводство Тогда
		Возврат Новый Массив;
	КонецЕсли;

	СписокСтрок = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПолучениеИВозврат.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Действие = Неопределено
			ИЛИ Действие = "УстранитьТекущийДефицит" И ДанныеСтроки.ТекущийИзлишекДефицит < 0 
			ИЛИ Действие = "Зарезервировать" И (ДанныеСтроки.ОжидаетсяКПолучению - ДанныеСтроки.ВРезерве) > 0 Тогда
			
			ДанныеПоНоменклатуре = Новый Структура("Номенклатура,Характеристика,Назначение,
													|Подразделение,Организация,Склад,
													|ТекущийИзлишекДефицит,ОжидаетсяКПолучению,ВРезерве");
													
			ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеСтроки);
			СписокСтрок.Добавить(ДанныеПоНоменклатуре);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокСтрок.Количество() = 0 
		И (Действие = "УстранитьТекущийДефицит" 
			ИЛИ Действие = "Зарезервировать") Тогда
			
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			Если Действие = "УстранитьТекущийДефицит" Тогда
				ТекстПредупреждения = НСтр("ru = 'По выбранному материалу отсутствует дефицит.';
											|en = 'No shortage by the selected material.'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Выбранный материал не требуется резервировать.';
											|en = 'It is not required to reserve the selected material. '");
			КонецЕсли; 
		Иначе
			Если Действие = "УстранитьТекущийДефицит" Тогда
				ТекстПредупреждения = НСтр("ru = 'По выбранным материалам отсутствует дефицит.';
											|en = 'No shortage by the selected materials.'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Выбранные материалы не требуется резервировать.';
											|en = 'It is not required to reserve the selected materials.'");
			КонецЕсли;
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат СписокСтрок;

КонецФункции

&НаКлиенте
Процедура ЗапланироватьПолучениеМатериалов()

	СписокНоменклатуры = СписокМатериаловДляКорректировки("Зарезервировать");
	
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаполнятьПоСпискуНоменклатуры", Истина);
	ПараметрыФормы.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	ПараметрыФормы.Вставить("ВыполнитьДействие", "Зарезервировать");
	ПараметрыФормы.Вставить("Подразделение", ОтборПодразделение);
	ПараметрыФормы.Вставить("Организация", ОтборОрганизация);
	ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОтгрузитьСоСклада()

	СписокНоменклатуры = СписокМатериаловДляКорректировки("УстранитьТекущийДефицит");
	
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаполнятьПоСпискуНоменклатуры", Истина);
	ПараметрыФормы.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	ПараметрыФормы.Вставить("ВыполнитьДействие", "УстранитьТекущийДефицит");
	ПараметрыФормы.Вставить("Подразделение", ОтборПодразделение);
	ПараметрыФормы.Вставить("Организация", ОтборОрганизация);
	ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма", ПараметрыФормы);

КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		СсылкаНаДокумент = МассивСсылок[0];
		Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
			Элементы.ЗаказыНаПередачуМатериалов.ТекущаяСтрока = МассивСсылок[0];
		ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПередачаМатериаловВПроизводство") 
			ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства")
			ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве") Тогда
			Элементы.ДокументыПроизводства.ТекущаяСтрока = МассивСсылок[0];
		КонецЕсли; 
		ПоказатьЗначение(,СсылкаНаДокумент);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказМатериаловВПроизводство.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПередачаМатериаловВПроизводство.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ВозвратМатериаловИзПроизводства.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

#КонецОбласти

#Область ОформлениеНакладныхПоОрдерам

&НаСервере
Функция ЗаполнитьСпискиВыбораПоСостояниямОтгрузки()
	
	СписокВыбора = Элементы.ОтборСостояниеНакладной.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0",НСтр("ru = 'Все оформлено';
									|en = 'Fully issued/received'"),Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1",НСтр("ru = 'Создать накладную';
									|en = 'Create invoice'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2",НСтр("ru = 'Дооформить накладную';
									|en = 'Pending issue/receipt'"),Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
	СписокВыбора = Элементы.ОтборСостояниеОрдера.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0",НСтр("ru = 'Соответствуют накладным';
									|en = 'Notes correspond to the invoices'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1",НСтр("ru = 'Не оформлены';
									|en = 'Pending creation'"), Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3",НСтр("ru = 'Не соответствуют накладным';
									|en = 'Received vs invoiced mismatch'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
КонецФункции

&НаСервере
Процедура СостояниеНакладнойПриИзмененииНаСервере()

	СохранитьПараметрыОтбора();
	
	Состояние = ?(ЗначениеЗаполнено(ОтборСостояниеНакладной), Число(ОтборСостояниеНакладной), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СостояниеНакладной",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборСостояниеНакладной));

КонецПроцедуры

&НаСервере
Процедура СостояниеОрдераПриИзмененииНаСервере()
	
	СохранитьПараметрыОтбора();

	Состояние = ?(ЗначениеЗаполнено(ОтборСостояниеОрдера), Число(ОтборСостояниеОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СоответствиеОрдера",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборСостояниеОрдера));

КонецПроцедуры

&НаКлиенте
Процедура ОформитьНакладную(ПоОрдерам)
	
	ОчиститьСообщения();
	
	Список = Элементы.СписокРаспоряженияНаОформление;
	ТипНакладная = Новый ОписаниеТипов("ДокументСсылка.ПередачаМатериаловВПроизводство");
	ДокументыПоВидам = НакладныеКлиент.СсылкиВыделенныхСтрокСпискаПоВидам(Список, ТипНакладная, "Ссылка,Организация,Склад,Подразделение");
	Если ДокументыПоВидам.Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИИмяФормы = ПараметрыИИмяФормыОформленияНакладной(ДокументыПоВидам, ПоОрдерам);
	
	Если ПараметрыИИмяФормы.ЕстьОшибки Тогда
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыИИмяФормы.ТекстОшибки);
	Иначе
		ОткрытьФорму(ПараметрыИИмяФормы.Имя, ПараметрыИИмяФормы.Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыИИмяФормыОформленияНакладной(ДокументыПоВидам, ПоОрдерам)
	
	НастройкиФормы = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.Заголовок = НСтр("ru = 'Переоформление передачи материалов по выбранным распоряжениям';
									|en = 'Reregister material transfer according to the selected references'");
	НастройкиФормы.ИмяФормыНакладной = "Документ.ПередачаМатериаловВПроизводство.ФормаОбъекта";
	
	КонтекстВызова = Новый Структура("ИмяТипаНакладной, НастройкиФормыПереоформления", "ПередачаМатериаловВПроизводство", НастройкиФормы);
	
	ПараметрыВыполненияКоманды = Новый Структура("ДокументыПоВидам, ПоОрдерам, Склад", ДокументыПоВидам, ПоОрдерам, ОтборСклад);
	
	Результат = Обработки.ПолучениеИВозвратМатериалов.ПроверитьВозможностьВыполненияКомандыОформить(КонтекстВызова, ПараметрыВыполненияКоманды);
	Если Не Результат.ЕстьОшибки Тогда
		Результат = Обработки.ПолучениеИВозвратМатериалов.ПараметрыИИмяФормыОформленияНакладной(КонтекстВызова, ПараметрыВыполненияКоманды, Результат.РеквизитыШапки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапросаСписокРаспоряженияНаОформление()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКОформлению.Распоряжение КАК Распоряжение,
	|	ЗаказыКОформлению.Ссылка КАК Ссылка,
	|	ЗаказыКОформлению.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказыКОформлению.Номер КАК Номер,
	|	ЗаказыКОформлению.ДатаДокумента КАК ДатаДокумента,
	|	ЗаказыКОформлению.ТипРаспоряжения КАК ТипРаспоряжения,
	|	ЗаказыКОформлению.Проведен КАК Проведен,
	|	ЗаказыКОформлению.Организация КАК Организация,
	|	ЗаказыКОформлению.Склад,
	|	ЗаказыКОформлению.Подразделение,
	|	ЗаказыКОформлению.Ответственный,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказыКОформлению.КОформлениюРасход) = 0
	|				И СУММА(ЗаказыКОформлению.КОформлениюОстаток) > 0
	|			ТОГДА 1 //Требуется создание накладной
	|		КОГДА СУММА(ЗаказыКОформлению.КОформлениюОстаток) > 0
	|			ТОГДА 2 //Дополнить накладную
	|		ИНАЧЕ 0 //ОК
	|	КОНЕЦ КАК СостояниеНакладной,
	|	МАКСИМУМ(ЗаказыКОформлению.СостояниеОрдера) КАК СоответствиеОрдера
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыМатериалов.Распоряжение КАК Распоряжение,
	|		ЗаказыМатериалов.Распоряжение КАК Ссылка,
	|		ЗаказыМатериалов.Распоряжение.ПометкаУдаления КАК ПометкаУдаления,
	|		ЗаказыМатериалов.Распоряжение.Номер КАК Номер,
	|		ЗаказыМатериалов.Распоряжение.Дата КАК ДатаДокумента,
	|		ТИПЗНАЧЕНИЯ(ЗаказыМатериалов.Распоряжение) КАК ТипРаспоряжения,
	|		ЗаказыМатериалов.Распоряжение.Проведен КАК Проведен,
	|		ЗаказыМатериалов.Распоряжение.Организация КАК Организация,
	|		ЗаказыМатериалов.Распоряжение.Ответственный КАК Ответственный,
	|		ЗаказыМатериалов.Склад КАК Склад,
	|		ЗаказыМатериалов.Подразделение КАК Подразделение,
	|		ЗаказыМатериалов.Номенклатура КАК Номенклатура,
	|		ЗаказыМатериалов.Характеристика КАК ХарактеристикаНоменклатуры,
	|		ЗаказыМатериалов.Серия КАК Серия,
	|		ЗаказыМатериалов.КОформлениюКонечныйОстаток КАК КОформлениюОстаток,
	|		ЗаказыМатериалов.КОформлениюРасход КАК КОформлениюРасход,
	|		0 КАК СостояниеОрдера
	|	ИЗ
	|		РегистрНакопления.ЗаказыМатериаловВПроизводство.ОстаткиИОбороты(
	|					,
	|					,
	|					,
	|					,
	|					(Подразделение = &Подразделение
	|						ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					И (Склад = &Склад
	|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|					И Получатель ССЫЛКА Справочник.СтруктураПредприятия
	//++ НЕ УТКА
	|					И НЕ Распоряжение ССЫЛКА Документ.ЭтапПроизводства2_2
	//-- НЕ УТКА
	|			) КАК ЗаказыМатериалов
	|	ГДЕ
	|		ЗаказыМатериалов.КОформлениюКонечныйОстаток > 0
	|		И (ЗаказыМатериалов.Распоряжение.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|		ТоварыКОтгрузке.ДокументОтгрузки КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).ПометкаУдаления
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаМатериаловВПроизводство).ПометкаУдаления
	//++ НЕ УТКА
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказНаПроизводство).ПометкаУдаления
	//-- НЕ УТКА
	|		КОНЕЦ КАК ПометкаУдаления,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Номер
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаМатериаловВПроизводство).Номер
	//++ НЕ УТКА
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказНаПроизводство).Номер
	//-- НЕ УТКА
	|		КОНЕЦ КАК Номер,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Дата
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаМатериаловВПроизводство).Дата
	//++ НЕ УТКА
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказНаПроизводство).Дата
	//-- НЕ УТКА
	|		КОНЕЦ КАК ДатаДокумента,
	|		ТИПЗНАЧЕНИЯ(ТоварыКОтгрузке.ДокументОтгрузки) КАК ТипРаспоряжения,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Проведен
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаМатериаловВПроизводство).Проведен
	//++ НЕ УТКА
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказНаПроизводство).Проведен
	//-- НЕ УТКА
	|		КОНЕЦ КАК Проведен,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Организация
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаМатериаловВПроизводство).Организация
	//++ НЕ УТКА
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказНаПроизводство).Организация
	//-- НЕ УТКА
	|		КОНЕЦ КАК Организация,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Ответственный
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаМатериаловВПроизводство).Ответственный
	//++ НЕ УТКА
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказНаПроизводство).Ответственный
	//-- НЕ УТКА
	|		КОНЕЦ КАК Ответственный,
	|		ТоварыКОтгрузке.Склад КАК Склад,
	|		ТоварыКОтгрузке.Получатель КАК Подразделение,
	|		ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|		ТоварыКОтгрузке.Характеристика КАК ХарактеристикаНоменклатуры,
	|		ТоварыКОтгрузке.Серия КАК Серия,
	|		0 КАК КОформлениюРасход,
	|		0 КАК КОформлениюОстаток,
	|		ВЫБОР
	|			КОГДА НЕ ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					ИЛИ ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|						И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке > &ТекущаяДата
	|				ТОГДА 0
	|
	|		КОГДА ЕСТЬNULL(ТоварыКОтгрузкеОстаткиИОбороты.СобраноПриход, 0) + ЕСТЬNULL(ТоварыКОтгрузкеОстаткиИОбороты.КОтгрузкеРасход, 0) = 0 
	|			И (ЕСТЬNULL(ТоварыКОтгрузкеОстаткиИОбороты.КОформлениюПриход,0)>0 
	|				ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство) ТОГДА
	|				1 //Ордер не оформлен
	|		КОГДА (ТоварыКОтгрузке.КОформлениюПриход>0 ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг)
	|				И (((ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	//++ НЕ УТКА        	
	|						ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	//-- НЕ УТКА        	
	|						) 
	|						И (ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход) <> ТоварыКОтгрузке.КОформлениюРасход)
	|					ИЛИ (ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство И ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток <> 0)
	|				) ТОГДА 3 //Ордер частично оформлен
	
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СостояниеОрдера
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
	|				,
	|				,
	|				,
	|				,
	|				(Получатель = &Подразделение
	|					ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|				И Получатель ССЫЛКА Справочник.СтруктураПредприятия
	|				И (Склад = &Склад
	|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И (ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	//++ НЕ УТКА
	|					ИЛИ ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	//-- НЕ УТКА
	|					ИЛИ ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство)) КАК ТоварыКОтгрузке
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
	|					,
	|					,
	|					,
	|					,
	|					(Получатель = &Подразделение
	|						ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					И Получатель ССЫЛКА Справочник.СтруктураПредприятия
	|					И (Склад = &Склад
	|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|					И (ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	//++ НЕ УТКА
	|							ИЛИ ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	//-- НЕ УТКА
	|							ИЛИ ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство)) КАК ТоварыКОтгрузкеОстаткиИОбороты
	|			ПО ТоварыКОтгрузке.ДокументОтгрузки = ТоварыКОтгрузкеОстаткиИОбороты.ДокументОтгрузки
	|				И ТоварыКОтгрузке.Склад = ТоварыКОтгрузкеОстаткиИОбороты.Склад
	|				И ТоварыКОтгрузке.Получатель = ТоварыКОтгрузкеОстаткиИОбороты.Получатель
	|	ГДЕ
	|		(ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток - ТоварыКОтгрузке.СобраноКонечныйОстаток > 0
	|				ИЛИ ТоварыКОтгрузке.КОформлениюКонечныйОстаток > 0)
	|		И ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|		И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
	|		И (ВЫБОР
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Организация
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаМатериаловВПроизводство).Организация
	//++ НЕ УТКА
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказНаПроизводство
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказНаПроизводство).Организация
	//-- НЕ УТКА
	|			КОНЕЦ = &Организация
	|		ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|	) КАК ЗаказыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКОформлению.Распоряжение,
	|	ЗаказыКОформлению.Ссылка,
	|	ЗаказыКОформлению.ПометкаУдаления,
	|	ЗаказыКОформлению.Номер,
	|	ЗаказыКОформлению.ДатаДокумента,
	|	ЗаказыКОформлению.ТипРаспоряжения,
	|	ЗаказыКОформлению.Проведен,
	|	ЗаказыКОформлению.Организация,
	|	ЗаказыКОформлению.Склад,
	|	ЗаказыКОформлению.Подразделение,
	|	ЗаказыКОформлению.Ответственный";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, СписокРаспоряженияНаОформление);
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокРаспоряженияНаОформление, СвойстваСписка);

КонецПроцедуры

#КонецОбласти

#Область НастройкаСписков

&НаСервере
Процедура ИнициализацияНастройкиСписков()

	НастройкаПолей = Новый Структура;
	
	НедоступныеПоляДляНастройки = Новый Массив;
	НедоступныеПоляДляНастройки.Добавить("ХарактеристикиИспользуются");
	НастройкаПолей.Вставить("НедоступныеПоля", НедоступныеПоляДляНастройки);
	
	РеквизитыСписка = ПолучитьРеквизиты("ПолучениеИВозврат");
	АдресСхемыНастройкаСпискаПолучениеИВозврат = Отчеты.НастройкаСписка.ИнициализацияНастройки(
															РеквизитыСписка,
															НастройкиПолучениеИВозврат,
															УникальныйИдентификатор,
															НастройкаПолей);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаПолучениеИВозвратЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкаСпискаПолучениеИВозвратНаСервере(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаСпискаПолучениеИВозвратНаСервере(Знач КомпоновщикНастроек)

	НастройкиПолучениеИВозврат.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	НастройкиПолучениеИВозврат.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроек.ПользовательскиеНастройки);
	ПрименитьНастройкуСпискаПолучениеИВозврат();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкуСпискаПолучениеИВозврат()

	Отчеты.НастройкаСписка.ПрименитьНастройкуКСписку(
				ПолучениеИВозврат, 
				АдресСхемыНастройкаСпискаПолучениеИВозврат,
				НастройкиПолучениеИВозврат.ПолучитьНастройки());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройкиСпискаПолучениеИВозвратЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("ВыборНастроек") Тогда
		ВыбратьНастройкиСпискаПолучениеИВозвратНаСервере(РезультатЗакрытия.КлючНастроек);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьНастройкиСпискаПолучениеИВозвратНаСервере(Знач КлючНастроек)
	
	Отчеты.НастройкаСписка.ЗагрузитьНастройкиИзХранилища("ПолучениеИВозвратМатериалов", КлючНастроек, НастройкиПолучениеИВозврат);

	ПрименитьНастройкуСпискаПолучениеИВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиСпискаПолучениеИВозвратЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("ВыборНастроек") Тогда
		СохранитьНастройкиСпискаПолучениеИВозвратНаСервере(РезультатЗакрытия.КлючНастроек);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСпискаПолучениеИВозвратНаСервере(Знач КлючНастроек)

	Отчеты.НастройкаСписка.СохранитьНастройкиВХранилище("ПолучениеИВозвратМатериалов", КлючНастроек, НастройкиПолучениеИВозврат);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Оформление характеристик
	#Область ПолучениеИВозвратХарактеристика
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ПолучениеИВозвратХарактеристика",
																		     "ПолучениеИВозврат.ХарактеристикиИспользуются");
	#КонецОбласти
	
	// НесколькоСкладов
	#Область НесколькоСкладов
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолучениеИВозвратСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолучениеИВозврат.НесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<несколько складов>';
																|en = '<several warehouses>'"));
	#КонецОбласти
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "ЗаказыНаПередачуМатериалов.Дата", Элементы.ЗаказыНаПередачуМатериаловДата.Имя);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокРаспоряженияНаОформление.ДатаДокумента", Элементы.СписокРаспоряженияНаОформлениеДатаДокумента.Имя);
		
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "ДокументыПроизводства.Дата", Элементы.ДокументыПроизводстваДата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьРеквизитЗаказыПоДату()

	Если ЗаказыПоДату <> '000101010000'
		И ЗаказыПоДату < НачалоДня(ТекущаяДатаСеанса()) Тогда
		// Дата не может быть в прошлом
		ЗаказыПоДату = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()

	ПараметрыОтбора = Новый Структура("ОтборПодразделение,ОтборОрганизация,ОтборСклад,ЗаказыПоДату,
	|ОтборСостояниеНакладной,ОтборСостояниеОрдера,ОбновлятьДанныеАвтоматически");

	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("ПолучениеИВозвратМатериалов", "ПараметрыОтбора", ПараметрыОтбора);

КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыНедоступныеПоПравам()

	ПравоВводаЗаказаМатериалов = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказМатериаловВПроизводство);
	ПравоВводаВозвратаИзПроизводства = ПравоДоступа("Добавление", Метаданные.Документы.ВозвратМатериаловИзПроизводства);
	ПравоВводаПередачиМатериаловВПроизводство = ПравоДоступа("Добавление", Метаданные.Документы.ПередачаМатериаловВПроизводство);
	
	Если НЕ ПравоВводаВозвратаИзПроизводства Тогда
		Элементы.ОформитьВозвратНаТекущийИзлишек.Видимость = Ложь;
		Элементы.ДокументыПроизводстваСоздатьВозврат.Видимость = Ложь;
	КонецЕсли; 
	
	Если НЕ ПравоВводаПередачиМатериаловВПроизводство Тогда
		Элементы.ОформитьНакладную.Видимость = Ложь;
		Элементы.ПолучениеИВозвратКонтекстноеМенюОформитьНакладную.Видимость = Ложь;
		Элементы.ОформитьНакладнуюНаОтрицательныйОстатокВПодразделении.Видимость = Ложь;
		Элементы.ДокументыПроизводстваСоздатьПередачуВПроизводство.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоВводаЗаказаМатериалов Тогда
		Элементы.ОформитьЗаказМатериалов.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеДокументыПроизводстваЗавершение(РезультатВопроса, ДополнительныеПараметрыУдаления) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеДокументыНаСервере(ДополнительныеПараметрыУдаления);
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПередачаМатериаловВПроизводство"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве"));
	Оповестить("Запись_ПередачаМатериаловВПроизводство");
	Оповестить("Запись_ПеремещениеМатериаловВПроизводстве");
	
	Элементы.ДокументыПроизводства.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеДокументыНаСервере(ДополнительныеПараметрыУдаления)

	Для каждого ДокументСсылка Из ДополнительныеПараметрыУдаления.МассивСсылок Цикл
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(ДополнительныеПараметрыУдаления.УстановитьПометкуУдаления);
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусДокументовПроизводства(СтатусСтрока, ТипДокумента, ПредставлениеСтатуса = Неопределено)
	
	ВыделенныеСтроки = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.ДокументыПроизводства.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДокументыПроизводства.ДанныеСтроки(ИдентификаторСтроки);
		Если ДанныеСтроки <> Неопределено Тогда
			
			Если ТипЗнч(ДанныеСтроки.Ссылка) = ТипДокумента Тогда
				
				ВыделенныеСтроки.Добавить(ДанныеСтроки.Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта!';
										|en = 'Cannot execute this command for the specified object.'"));
		Возврат;
	КонецЕсли;
	
	ПредставлениеСтатуса = ?(ПредставлениеСтатуса = Неопределено, СтатусСтрока, ПредставлениеСтатуса);
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке документов будет установлен статус ""%ПредставлениеСтатуса%"". Продолжить?';
						|en = 'Status of the documents selected in the list will be set to ""%ПредставлениеСтатуса%"". Continue?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ПредставлениеСтатуса%", ПредставлениеСтатуса);
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да,НСтр("ru = 'Установить статус';
													|en = 'Set status'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет,НСтр("ru = 'Отмена';
														|en = 'Cancel'"));

	ДопПараметры = Новый Структура("ВыделенныеСтроки, ПредставлениеСтатуса, СтатусСтрока", ВыделенныеСтроки, ПредставлениеСтатуса, СтатусСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ПредставлениеСтатуса = ДополнительныеПараметры.ПредставлениеСтатуса;
    СтатусСтрока = ДополнительныеПараметры.СтатусСтрока;
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, СтатусСтрока);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.ДокументыПроизводства, КоличествоОбработанных, ВыделенныеСтроки.Количество(), ПредставлениеСтатуса);

КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура КорректировкаПолученияМатериала()

	СписокНоменклатуры = СписокМатериаловДляКорректировки();
	
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаполнятьПоСпискуНоменклатуры", Истина);
	ПараметрыФормы.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	ПараметрыФормы.Вставить("Подразделение", ОтборПодразделение);
	ПараметрыФормы.Вставить("Организация", ОтборОрганизация);
	ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма", ПараметрыФормы);

КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21
