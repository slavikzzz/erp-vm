#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает параметры проверки правил отражения
//
// Возвращаемое значение:
// 	Структура - Параметры проверки:
// 		* ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - Отбор плана счетов для проверки. Если Неопределено, то по всем.
// 		* Организация - СправочникСсылка.Организации - Отбор организации для проверки. Если Неопределено, то по всем.
// 		* Документ - ДокументСсылка - Отбор документа для проверки. Если Неопределено, то по всем.
//
Функция ПараметрыПроверкиПравилОтражения() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ПланСчетов");
	ПараметрыПроверки.Вставить("Организация");
	ПараметрыПроверки.Вставить("Документ");
	
	Возврат ПараметрыПроверки;
	
КонецФункции


// Выполняет проверку настройки правил отражения в международном учете
//
// Параметры:
// 	 ПараметрыПроверки - См. ПараметрыПроверкиПравилОтражения
//
// Возвращаемое значение:
//	Структура - Структура содержащая:
//		* ХозяйственныеОперацииБезПравилОтражения - См. МеждународныйУчетПоДаннымОперативногоУчета.ПроверитьПравилаОтражения
//		* СчетаБезПравилОтражения - См. МеждународныйУчетПоДаннымРеглУчета.ПроверитьПравилаОтражения
//		* ОбъектыУчетаТребующиеНастройки - См. МеждународныйУчетПоДаннымФинансовыхРегистров.ПроверитьПравилаОтражения
Функция ПроверитьНастройкуПравилОтраженияУчете(ПараметрыПроверки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеДокументов.Регистратор КАК Регистратор,
	|	ОтражениеДокументов.Период КАК Период,
	|	ОтражениеДокументов.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументов.Организация КАК Организация,
	|	ОтражениеДокументов.ДатаОтражения КАК ДатаОтражения,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК ПериодНастройкиФормированияПроводок
	|ПОМЕСТИТЬ ОтражениеДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|		ПО ОтражениеДокументов.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|			И ОтражениеДокументов.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|			И ОтражениеДокументов.ДатаОтражения >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|ГДЕ
	|	(ОтражениеДокументов.Регистратор = &Документ
	|			ИЛИ &Документ = НЕОПРЕДЕЛЕНО)
	|	И (ОтражениеДокументов.ПланСчетов = &ПланСчетов
	|			ИЛИ &ПланСчетов = НЕОПРЕДЕЛЕНО)
	|	И (ОтражениеДокументов.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И ОтражениеДокументов.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете), 
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтражениеДокументов.Регистратор,
	|	ОтражениеДокументов.Период,
	|	ОтражениеДокументов.ПланСчетов,
	|	ОтражениеДокументов.Организация,
	|	ОтражениеДокументов.ДатаОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ПериодНастройкиФормированияПроводок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	ОтражениеДокументов КАК ДокументыКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|		ПО ДокументыКОтражению.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|			И ДокументыКОтражению.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|			И ДокументыКОтражению.ПериодНастройкиФормированияПроводок = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументыКОтражению.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтражениеДокументов";
	Запрос.УстановитьПараметр("ПланСчетов", ПараметрыПроверки.ПланСчетов);
	Запрос.УстановитьПараметр("Организация", ПараметрыПроверки.Организация);
	Запрос.УстановитьПараметр("Документ", ПараметрыПроверки.Документ);
	Запрос.Выполнить();
	
	ОперацииБезПравилОтражения = МеждународныйУчетПоДаннымОперативногоУчета.ПроверитьПравилаОтражения(МенеджерВременныхТаблиц, ПараметрыПроверки);
	СчетаБезПравилОтражения    = МеждународныйУчетПоДаннымРеглУчета.ПроверитьПравилаОтражения(МенеджерВременныхТаблиц, ПараметрыПроверки);
	ОбъектыУчетаТребующиеНастройки = МеждународныйУчетПоДаннымФинансовыхРегистров.ПроверитьПравилаОтражения(МенеджерВременныхТаблиц, ПараметрыПроверки);
	
	Результат = Новый Структура;
	Результат.Вставить("ХозяйственныеОперацииБезПравилОтражения", ОперацииБезПравилОтражения);
	Результат.Вставить("СчетаБезПравилОтражения", СчетаБезПравилОтражения);
	Результат.Вставить("ОбъектыУчетаТребующиеНастройки", ОбъектыУчетаТребующиеНастройки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для подсчета количества проверенных/не проверенных документов
//
// Возвращаемое значение:
// 	Структура - Параметры подсчета количества документов:
// 		* МассивОрганизаций - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации - Отбор по организациям для подсчета.
// 		* ДатаОкончанияПериода - Дата - Отбор по Дате для подсчета
// 		* ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - Отбор плана счетов для подсчета.
// 		* ВидЗадания - ПеречислениеСсылка.СтатусыПроверкиФинансовыхДокументов - вид документов для подсчета ("Проверенные", "НеПроверенные" или "КПовторнойПроверке")
//
Функция ПараметрыПодсчетаКоличестваДокументов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивОрганизаций", Новый Массив);
	Параметры.Вставить("ДатаОкончанияПериода", Дата(1,1,1,0,0,0));
	Параметры.Вставить("ПланСчетов", Справочники.ПланыСчетовМеждународногоУчета.ПустаяСсылка());
	Параметры.Вставить("ВидЗадания", Перечисления.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает массив типов документов для отбора документов в международном учете
//
// Возвращаемое значение:
// 	Массив из Тип - Массив типов документов
//
Функция ТипыДокументовДляОтбора() Экспорт
	
	МассивТиповДокументов = Новый Массив;
	МетаданныеОтражениеДокументовВМеждународномУчете = Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете;
	Для каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		Если НЕ ОбъектМетаданных.Движения.Содержит(МетаданныеОтражениеДокументовВМеждународномУчете) Тогда
			Продолжить;
		КонецЕсли;
		МассивТиповДокументов.Добавить(Тип("ДокументСсылка." + ОбъектМетаданных.Имя));
	КонецЦикла;
	
	Возврат МассивТиповДокументов;
	
КонецФункции

// Считает количество проверенных/не проверенных документов
//
// Параметры:
// 	 Параметры - См. ПараметрыПодсчетаКоличестваДокументов
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат выполнения запроса
Функция СостояниеПроверкиДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ТекстПоляДатаНачала КАК ДатаНачала,
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
	|ГДЕ
	|	СтатусыПроверкиДокументов.Организация В(&МассивОрганизаций)
	|	И СтатусыПроверкиДокументов.Период <= &ДатаОкончания
	|	И СтатусыПроверкиДокументов.СтатусПроверки В (&СтатусПроверки)
	|	И НЕ ТИПЗНАЧЕНИЯ(СтатусыПроверкиДокументов.Документ) В (&ИсключаемыеТипыДляПроверки)";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.МассивОрганизаций);
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(Параметры.ДатаОкончанияПериода), Параметры.ДатаОкончанияПериода, Дата(2399, 1, 1)));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыеТипыДляПроверки", ПроверкаДокументовСервер.ТипыНеПроверяемыхДокументовСтрокой());
	
	Запрос.УстановитьПараметр("СтатусПроверки", Параметры.ВидЗадания);
	
	Если Параметры.ВидЗадания = Перечисления.СтатусыПроверкиФинансовыхДокументов.Проверен Тогда
		
		ТекстПоляДатаНачала = "МАКСИМУМ(СтатусыПроверкиДокументов.Период)";
		
	ИначеЕсли Параметры.ВидЗадания = Перечисления.СтатусыПроверкиФинансовыхДокументов.НеПроверен 
		ИЛИ Параметры.ВидЗадания = Перечисления.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке Тогда
			
		ТекстПоляДатаНачала = "МИНИМУМ(СтатусыПроверкиДокументов.Период)";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляДатаНачала", ТекстПоляДатаНачала);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#КонецЕсли