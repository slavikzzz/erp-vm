#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИспользоватьПроверкуФинансовыхДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов");
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	Элементы.ГруппаКомандПроверкаДокументов.Видимость = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов);
	
	ОбновитьДанныеФормы();
	
	ОбновитьОтборПоТипуДокумента();
	
	#Область ПервоначальноеЗаполнениеПоПараметрам
	
	Если Параметры.Свойство("ДатаОкончанияПериода") И Не Параметры.ДатаОкончанияПериода = '39991231' Тогда
		Период.ДатаОкончания = Параметры.ДатаОкончанияПериода;
		УстановитьОтборПоПериоду(Список, Период);
	КонецЕсли;
	
	Параметры.Отбор.Свойство("Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	
	Параметры.Отбор.Свойство("СтатусОтражения", СтатусОтражения);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусОтражения", СтатусОтражения, , , Не СтатусОтражения.Пустая());
	
	Параметры.Отбор.Свойство("ПланСчетов", ПланСчетов);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПланСчетов", ПланСчетов, ВидСравненияКомпоновкиДанных.Равно, , Не ПланСчетов.Пустая());
	
	#КонецОбласти
	
	#Область УстановкаДоступностиКомандНаОснованииПереданныхОтборов
	
	УстановитьДоступностьЭлементовПоСтатусуОтражения();
	
	#КонецОбласти
	
	Элементы.Организация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.СтатусПроверки.Видимость = ИспользоватьПроверкуФинансовыхДокументов;
	Элементы.ГруппаОтбораВерх.Объединенная = ИспользоватьПроверкуФинансовыхДокументов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОтражениеДокументовВМеждународномУчете"
		ИЛИ ИмяСобытия = "Запись_СтатусПроверкиДокумента" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		Если Источник = "ИспользоватьПроверкуФинансовыхДокументов" Тогда
			ОбновитьДанныеФормы();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		Оповестить("ЗакрытаФормаСпискаДокументов");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
	
	ПодключитьОбработчикОжидания("ПолучитьКомментарий", 0.2, Истина);
	ПодключитьОбработчикОжидания("НастроитьДоступностьКнопокСписка", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтраженияОтборПриИзменении(Элемент)
	
	ВидСравненияСтатусаОтражения = ?(ТипЗнч(СтатусОтражения) = Тип("СписокЗначений"),
		ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусОтражения", СтатусОтражения,
		ВидСравненияСтатусаОтражения, , Не СтатусОтражения.Пустая());
		
	УстановитьДоступностьЭлементовПоСтатусуОтражения();
	ПодключитьОбработчикОжидания("НастроитьДоступностьКнопокСписка", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПланСчетов", ПланСчетов,
		ВидСравненияКомпоновкиДанных.Равно, , Не ПланСчетов.Пустая());
	
	ПодключитьОбработчикОжидания("ПолучитьКомментарий", 0.2, Истина);
	ПодключитьОбработчикОжидания("НастроитьДоступностьКнопокСписка", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаСписка = Элементы.Список.ТекущиеДанные;
	ПоказатьЗначение(Неопределено, СтрокаСписка.Документ);
	
КонецПроцедуры // СписокВыбор()

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПолучитьКомментарий", 0.2, Истина);
	ПодключитьОбработчикОжидания("НастроитьДоступностьКнопокСписка", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтразитьВУчете(Команда)
	
	МассивДокументов = Новый Массив;
	Для каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		Данные = Элементы.Список.ДанныеСтроки(Стр);
		
		Если НЕ Данные.СтатусОтражения = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете")
			И НЕ Данные.СтатусОтражения = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную") Тогда
			
			МассивДокументов.Добавить(Данные.Документ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДлительнаяОперация = НачатьОтражениеДокументовВМеждународномУчете(МассивДокументов, УникальныйИдентификатор);
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Документы", МассивДокументов);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатОтраженияДокументов", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Отражение документов в международном учете';
										|en = 'Record documents in financial accounting'");
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроверку(Команда)
	
	МассивДокументов = Новый Массив;
	Для каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		Данные = Элементы.Список.ДанныеСтроки(СтрокаСписка);
		Если Не Данные.СтатусПроверки.Пустая() Тогда
			МассивДокументов.Добавить(Данные.Документ);
		КонецЕсли;
	КонецЦикла;
	
	СообщениеОбОшибках = УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, Ложь);
	
	Если МассивДокументов.Количество() > 0 Тогда
		Оповестить("Запись_СтатусПроверкиДокумента", МассивДокументов, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибках) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибках);
	КонецЕсли;
	НастроитьДоступностьКнопокСписка();
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтражениеВУчете(Команда)
	
	МассивДокументов = Новый Массив;
	Для Каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Данные = Элементы.Список.ДанныеСтроки(Стр);
		Если Данные.СтатусОтражения = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете") Тогда
			
			МассивДокументов.Добавить(Данные.Документ);
			
		КонецЕсли;
			
	КонецЦикла;
	
	ОтменитьОтражениеДокументовВУчетеНаСервере(МассивДокументов);
	Оповестить("Запись_ОтражениеДокументовВМеждународномУчете", МассивДокументов, ЭтотОбъект);
	
	Элементы.Список.Обновить();
	НастроитьДоступностьКнопокСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	МассивДокументов = Новый Массив;
	Для каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		Данные = Элементы.Список.ДанныеСтроки(СтрокаСписка);
		Если ТипыПроверяемыхДокументов.СодержитТип(ТипЗнч(Данные.Документ)) Тогда
			МассивДокументов.Добавить(Данные.Документ);
		КонецЕсли;
	КонецЦикла;
	
	СообщениеОбОшибках = УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, Истина);
	
	Если МассивДокументов.Количество() > 0 Тогда
		Оповестить("Запись_СтатусПроверкиДокумента", МассивДокументов, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибках) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибках);
	КонецЕсли;
	НастроитьДоступностьКнопокСписка();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииКорректировку(Команда)
	
	МассивДокументов = Новый Массив;
	ТекущаяОрганизация = Организация;
	Для каждого Стр Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Стр);
		Если Не ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ОперацияМеждународный") Тогда
			МассивДокументов.Добавить(ДанныеСтроки.Документ);
		КонецЕсли;
		Если ТекущаяОрганизация.Пустая() Тогда
			ТекущаяОрганизация = ДанныеСтроки.Организация;
		ИначеЕсли Не ТекущаяОрганизация = ДанныеСтроки.Организация Тогда
			ТекстОшибки = НСтр("ru = 'Документ корректировки можно ввести только для документов по одной организации';
								|en = 'You can enter the adjustment document only for the same company documents'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() Тогда
		ПараметрыОперации = Новый Структура("Основание", МассивДокументов);
		ОткрытьФорму("Документ.ОперацияМеждународный.ФормаОбъекта", ПараметрыОперации);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Данную команду нельзя выполнить для операции международного учета.';
														|en = 'Cannot execute this command for the financial accounting transaction.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиДокумента(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ТекущаяСтрока.Документ;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияМеждународный") Тогда
		ПоказатьЗначение(, Документ);
	Иначе
		Отбор = Новый Структура("Регистратор", Документ);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.ПроводкиМеждународногоУчета",
			ПараметрыФормы,
			Команда,
			Документ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчетаУчета(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	АдресРезультатаПроверки = "";
	
	ПараметрыПроверки = Новый Структура;
	
	ПараметрыПроверки.Вставить("ПланСчетов", ТекущаяСтрока.ПланСчетов);
	ПараметрыПроверки.Вставить("Документ", ТекущаяСтрока.Документ);
	
	ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыПроверки);
	
	ПараметрыПроверки.Вставить("Организация");
	
	НеобходимаНастройкаПравил = ПроверитьНастройкуПравилОтраженияВУчетеСервер(АдресРезультатаПроверки, ПараметрыПроверки);
	
	ПараметрыФормы.Вставить("АдресРезультатаПроверки", АдресРезультатаПроверки);
	
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.НеобходимыеПравилаОтражения", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНастройкуПравилОтраженияВУчетеСервер(АдресВоВременномХранилище, ПараметрыПроверки)
	
	РезультатПроверки = Обработки.ОтражениеДокументовВМеждународномУчете.ПроверитьНастройкуПравилОтраженияУчете(ПараметрыПроверки);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РезультатПроверки, УникальныйИдентификатор);
	
	НеобходимаНастройкаПравил = 
		РезультатПроверки.ХозяйственныеОперацииБезПравилОтражения.Количество() 
		Или РезультатПроверки.СчетаБезПравилОтражения.Количество()
		Или РезультатПроверки.ОбъектыУчетаТребующиеНастройки.Количество();
		
	Возврат НеобходимаНастройкаПравил;
	
КонецФункции

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Период, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Период = ВыбранноеЗначение;
	УстановитьОтборПоПериоду(Список, Период);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусПроверки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не проверяется>';
																|en = '<not under check>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументАвтор.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Автор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номер.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Номер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументДоговор.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументКасса.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Касса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументКонтрагент.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументПартнер.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументСклад.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументХозяйственнаяОперация.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументВалюта.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Валюта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументСуммаДокумента.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СуммаДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<отсутствует>';
																|en = '<missing>'"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов") Тогда
		
		ТипыПроверяемыхДокументов = Метаданные.РегистрыСведений["СтатусыПроверкиДокументов"].Измерения.Документ.Тип;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СписокПроверяемыхТипов", ПроверкаДокументовСервер.ПроверяемыеТипыДокументов());
		
		ЕстьБлокировка = НЕ ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеФинансовыеДокументы");
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЕстьБлокировка", ЕстьБлокировка);
	
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СписокПроверяемыхТипов", Новый Массив);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЕстьБлокировка", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПериоду(Список, Период)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "НачалоПериода", Период.ДатаНачала, ЗначениеЗаполнено(Период.ДатаНачала)); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "КонецПериода", Период.ДатаОкончания, ЗначениеЗаполнено(Период.ДатаОкончания)); 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, СтатусПроверки)
	
	СтрокаОшибок = "";
	ДанныеОбОшибках = Новый Соответствие;
	
	РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументов(МассивДокументов, ДанныеОбОшибках, СтатусПроверки);
	
	Если ДанныеОбОшибках.Количество() Тогда
		
		Для каждого Ошибка Из ДанныеОбОшибках Цикл
			СтрокаОшибок = СтрокаОшибок + Ошибка.Значение + ";" + Символы.ПС;
			ИндексОшибочногоДокументаВМассиве = МассивДокументов.Найти(Ошибка.Ключ);
			Если Не ИндексОшибочногоДокументаВМассиве = Неопределено Тогда
				МассивДокументов.Удалить(ИндексОшибочногоДокументаВМассиве);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаОшибок;
	
КонецФункции

&НаСервереБезКонтекста
Функция НачатьОтражениеДокументовВМеждународномУчете(МассивДокументов, ИдентификаторФормы)
	
	ПараметрыОтражения = МеждународныйУчетПроведениеСервер.ПараметрыОтраженияВМеждународномУчете();
	ПараметрыОтражения.Документы = МассивДокументов;
	ПараметрыОтражения.ПроверятьСтатусОтражения = Ложь;
	
	Возврат МеждународныйУчетПроведениеСервер.НачатьОтражениеВМеждународномУчете(ПараметрыОтражения, ИдентификаторФормы);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатОтраженияДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'При отражении в международном учете произошла ошибка:
			|%1';
			|en = 'An error occurred when recording documents in financial accounting:
			|%1'");
		
		Если Результат = Неопределено Тогда
			ТекстРасшифровки = НСтр("ru = 'Не найдено выполняемое задание.';
									|en = 'Job in progress is not found.'");
		ИначеЕсли ЗначениеЗаполнено(Результат.КраткоеПредставлениеОшибки) Тогда
			ТекстРасшифровки = Результат.КраткоеПредставлениеОшибки;
		Иначе
			ТекстРасшифровки = НСтр("ru = 'Подробности см. в Журнале регистрации.';
									|en = 'For more information, see the event log.'");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстРасшифровки);

		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ОбработатьРезультатОтраженияДокументовНаСервере(ДополнительныеПараметры.Документы);
	
	Оповестить("Запись_ОтражениеДокументовВМеждународномУчете", ДополнительныеПараметры.Документы, ЭтотОбъект);
	
	Элементы.Список.Обновить();
	НастроитьДоступностьКнопокСписка();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьРезультатОтраженияДокументовНаСервере(МассивДокументов)
	
	СтатусыОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете;
	СтатусОтбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтатусыОтражения.КОтражениюВУчетеВручную);
	
	МеждународныйУчетПроведениеСервер.ЗаписатьНовыйСтатусОтражения(МассивДокументов, СтатусыОтражения.ОтраженоВУчетеВручную, СтатусОтбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьОтражениеДокументовВУчетеНаСервере(МассивДокументов)
	
	МеждународныйУчетПроведениеСервер.ОтменитьОтражениеДокументовВУчете(МассивДокументов);
	
КонецПроцедуры

#Область ФормированиеЗапроса

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуОтражения()
	
	Элементы.ГруппаКомментарий.Видимость = (СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКнопокСписка()
	
	ОтразитьВУчетеДоступность = Ложь;
	СнятьОтражениеВУчетеДоступность = Ложь;
	
	ПроверитьДоступность = Ложь;
	ОтменитьПроверкуДоступность = Ложь;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
			
			Если Элементы.Список.ДанныеСтроки(СтрокаСписка) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтатусОтраженияВСтроке = Элементы.Список.ДанныеСтроки(СтрокаСписка).СтатусОтражения;
			Если НЕ ОтразитьВУчетеДоступность Тогда
				ОтразитьВУчетеДоступность = 
					НЕ СтатусОтраженияВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете")
					И НЕ СтатусОтраженияВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную")
			КонецЕсли;
			Если НЕ СнятьОтражениеВУчетеДоступность Тогда
				СнятьОтражениеВУчетеДоступность = СтатусОтраженияВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете");
			КонецЕсли;
			ДоступностьКомандСтатусаОтраженияОпределена = ОтразитьВУчетеДоступность И СнятьОтражениеВУчетеДоступность;
			
			Если ИспользоватьПроверкуФинансовыхДокументов Тогда
				СтатусПроверкиВСтроке = Элементы.Список.ДанныеСтроки(СтрокаСписка).СтатусПроверки;
				Если Не ПроверитьДоступность Тогда
					ПроверитьДоступность = 
						НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен")
						И НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка");
				КонецЕсли;
				Если Не ОтменитьПроверкуДоступность Тогда
					ОтменитьПроверкуДоступность = 
						НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке")
						И НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен")
						И НЕ СтатусПроверкиВСтроке = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка");
				КонецЕсли;
				ДоступностьКомандСтатусаПроверкиОпределена = ОтразитьВУчетеДоступность И СнятьОтражениеВУчетеДоступность;
			Иначе
				ДоступностьКомандСтатусаПроверкиОпределена = Истина;
			КонецЕсли;
			
			Если ДоступностьКомандСтатусаОтраженияОпределена И ДоступностьКомандСтатусаПроверкиОпределена Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СписокОтразитьВУчете.Доступность = ОтразитьВУчетеДоступность;
	Элементы.СписокСнятьОтражениеВУчете.Доступность = СнятьОтражениеВУчетеДоступность;
	
	Если ИспользоватьПроверкуФинансовыхДокументов Тогда
		Элементы.СписокПроверить.Доступность = ПроверитьДоступность;
		Элементы.СписокОтменитьПроверку.Доступность = ОтменитьПроверкуДоступность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКомментарий()
	
	Если Не Элементы.ГруппаКомментарий.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьКомментарийСервер(ТекущаяСтрока.Документ, ТекущаяСтрока.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКомментарийСервер(Документ, Организация)
	
	Комментарий = МеждународныйУчетПроведениеСервер.СводныйКомментарийПоДокументу(Документ, Организация);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбновитьОтбор" Тогда
		
		ОбновитьОтборПоТипуДокумента();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НастроитьОтбор" Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
		ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
		ПараметрыФормы.Вставить("ТолькоПоТипамДокументов", Истина);
		ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
		
		ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", 
			ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияГиперссылкиКОформлению()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресХозяйственныхОперацийИДокументов)
	
	ТЗХозОперацииИТипыДокументов = ПолучитьИзВременногоХранилища(АдресХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	ТЗТипыДокументов = ТЗХозОперацииИТипыДокументов.Скопировать(Новый Структура("Отбор", Истина), "ТипДокумента");
	ТЗТипыДокументов.Свернуть("ТипДокумента");
	
	ОтборТипыДокументов.ЗагрузитьЗначения(ТЗТипыДокументов.ВыгрузитьКолонку("ТипДокумента"));
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов)
	
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(ТЗХозОперацииИТипыДокументов,
		КлючНазначенияФормыПоУмолчанию(), НСтр("ru = 'Журнал документов международного учета';
												|en = 'General ledger document journal'"));
	
	Заголовок   = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	ТекущийКлюч = ДанныеРабочегоМеста.КлючНазначенияИспользования;
	
	УстановитьОтборДинамическогоСписка();
	
	ИнформационнаяНадписьОтбор = "";
	
	Если ТЗХозОперацииИТипыДокументов.Количество() = 0 Тогда
		
		ИнформационнаяНадписьОтбор = СтроковыеФункции.ФорматированнаяСтрока(
											НСтр("ru = 'Нет документов для отображения в журнале <a href=""%1"">Обновить</a>';
												|en = 'No documents to record in journal <a href=""%1"">Update</a>'"),
											"ОбновитьОтбор");
	Иначе
		
		ЕстьОтборы = ХозяйственныеОперацииИДокументы.НайтиСтроки(Новый Структура("Отбор",Ложь)).Количество() > 0;
		Если ЕстьОтборы Тогда
			
			КоличествоТипыДокументов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документа';
																									|en = ';%1 document;;%1 documents;%1 documents;%1 documents'"), ОтборТипыДокументов.Количество());
			
			ИнформационнаяНадписьОтбор = СтроковыеФункции.ФорматированнаяСтрока(
												НСтр("ru = 'Показаны %1 <a href=""%2"">Настроить</a>';
													|en = 'Shown %1 <a href=""%2"">Set up</a>'"),
												КоличествоТипыДокументов, "НастроитьОтбор");
			
		Иначе
			
			ИнформационнаяНадписьОтбор = СтроковыеФункции.ФорматированнаяСтрока(
											НСтр("ru = 'Показаны все документы журнала <a href=""%1"">Настроить</a>';
												|en = 'All journal documents are shown <a href=""%1"">Set up</a>'"),
											"НастроитьОтбор");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Элементы.ИнформационнаяНадписьОтбор.Заголовок = ИнформационнаяНадписьОтбор;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ЖурналДокументовМеждународногоУчета";
	
КонецФункции

&НаСервере
Процедура УстановитьОтборДинамическогоСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипДокумента",
		ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборПоТипуДокумента()

	ОтборТипыДокументов.Очистить();
	
	МетаданныеОтражениеДокументовВМеждународномУчете = Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете;
	МассивИменДокументов = Новый Массив;
	Для каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		Если НЕ ОбъектМетаданных.Движения.Содержит(МетаданныеОтражениеДокументовВМеждународномУчете) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ХозяйственныеОперацииИДокументы.Добавить();
		НоваяСтрока.ПолноеИмяДокумента = ОбъектМетаданных.ПолноеИмя();
		НоваяСтрока.Отбор = Истина;
		НоваяСтрока.ТипДокумента = Тип("ДокументСсылка." + ОбъектМетаданных.Имя);
		НоваяСтрока.ДокументПредставление = ОбъектМетаданных.Синоним;
		
		ОтборТипыДокументов.Добавить(НоваяСтрока.ТипДокумента);
		МассивИменДокументов.Добавить(НоваяСтрока.ПолноеИмяДокумента);
	КонецЦикла;
	
	ИдентификаторыОбъектовМетаданных = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(МассивИменДокументов);
	Для каждого СтрокаТаблицы Из ХозяйственныеОперацииИДокументы Цикл
		СтрокаТаблицы.ИдентификаторОбъектаМетаданных = ИдентификаторыОбъектовМетаданных[СтрокаТаблицы.ПолноеИмяДокумента];
	КонецЦикла;
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ХозяйственныеОперацииИДокументы.Выгрузить());
	
КонецПроцедуры

#КонецОбласти
