

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Регистратор") Тогда
		ТекстСообщения = НСтр("ru = 'Непосредственное открытие этой формы не предусмотрено';
								|en = 'Application cannot open this form explicitly.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Документ = Параметры.Отбор.Регистратор;
	
	ИмяПоляОрганизация = "Организация";
	Если ЗначениеЗаполнено(Параметры.ИмяПоляОрганизация) Тогда
		ИмяПоляОрганизация = Параметры.ИмяПоляОрганизация;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата, Проведен," + ИмяПоляОрганизация);
	ДатаДокумента = РеквизитыДокумента.Дата;
	Организация   = РеквизитыДокумента[ИмяПоляОрганизация];
	
	ВидДвиженияДебет = ВидДвиженияБухгалтерии.Дебет;
	ВидДвиженияКредит = ВидДвиженияБухгалтерии.Кредит;
	ПросроченныеДанныеЦвет = ЦветаСтиля.ПросроченныеДанныеЦвет;
	
	ДокументПроводится = (Документ.Метаданные().Проведение <> Метаданные.СвойстваОбъектов.Проведение.Запретить);
	//@skip-warning
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = ДокументПроводится ИЛИ РеквизитыДокумента.Проведен;
	ТолькоПросмотр = НЕ (ДокументПроводится ИЛИ РеквизитыДокумента.Проведен);
	
	ПрочитатьПроводки();
	
	Элементы.АнализПроводокСКорреспонденцией.Доступность = ПравоДоступа("Использование", Метаданные.Отчеты.АнализПроводокОперативногоУчета) И (ДокументПроводится ИЛИ РеквизитыДокумента.Проведен);
	Элементы.АнализПроводокБезКорреспонденции.Доступность = ПравоДоступа("Использование", Метаданные.Отчеты.АнализПроводокОперативногоУчета) И (ДокументПроводится ИЛИ РеквизитыДокумента.Проведен);
	Элементы.СоздатьНаОсновании.Доступность = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ОперацияМеждународный) И (ДокументПроводится ИЛИ РеквизитыДокумента.Проведен);
	Элементы.ФормаГруппаСтандартныеКоманды.Доступность = ДокументПроводится ИЛИ РеквизитыДокумента.Проведен;
	Элементы.РучнаяКорректировкаПроводокСКорреспонденцией.Доступность = ДокументПроводится ИЛИ РеквизитыДокумента.Проведен;
	
	МеждународныйУчетОбщегоНазначения.УстановитьЗаголовкиПодразделения(Элементы.Подразделение, "");
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РегламентнаяОперацияМеждународныйУчет") Тогда
		ТипОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ТипОперации");
		Если ТипОперации = Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления Тогда
			Элементы.Сумма.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтатусыОтраженияВручную.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
	СтатусыОтраженияВручную.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную);
	
	СтатусыТребуетсяАвтоматическоеОтражение.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете);
	СтатусыТребуетсяАвтоматическоеОтражение.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
	СтатусыТребуетсяАвтоматическоеОтражение.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете);
	СтатусыТребуетсяАвтоматическоеОтражение.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров);
	
	ПрефиксИмениСтраницПоПланамСчетов = "ПланСчетов_";
	
	НастроитьФорму();
	
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	ОбновитьДатуЗапретаФормированияПроводок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПовторноеОткрытиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПроводки(ПараметрыЗаписиПроводок)
	
	Если ПараметрыЗаписиПроводок.СформироватьПроводкиАвтоматически Тогда
		НачатьАвтоматическоеФормированиеПроводок(ПараметрыЗаписиПроводок);
	Иначе
		ЗаписатьПроводкиСервер(ПараметрыЗаписиПроводок);
		ПослеЗаписиПроводок(ПараметрыЗаписиПроводок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПроводок(ПараметрыЗаписиПроводок)
	
	Оповестить("Запись_ОтражениеДокументовВМеждународномУчете");
	
	Если ПараметрыЗаписиПроводок.ЗакрытьФорму Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПроводкиСервер(ПараметрыЗаписиПроводок)
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете.ПолноеИмя() + ".НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписейМеждународный = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
		НаборЗаписейМеждународный.ДополнительныеСвойства.Вставить("ЗаписыватьПустойНабор", Истина);
		НаборЗаписейМеждународный.Отбор.Регистратор.Установить(Документ);
		
		НаборЗаписейМеждународныйБезКорреспонденции = РегистрыБухгалтерии.МеждународныйБезКорреспонденции.СоздатьНаборЗаписей();
		НаборЗаписейМеждународныйБезКорреспонденции.ДополнительныеСвойства.Вставить("ЗаписыватьПустойНабор", Истина);
		НаборЗаписейМеждународныйБезКорреспонденции.Отбор.Регистратор.Установить(Документ);
		
		Если ПараметрыЗаписиПроводок.СформироватьПроводкиАвтоматически Тогда
			ПроводкиДокумента = ОтразитьВМеждународномУчетеАвтоматически(ПараметрыЗаписиПроводок);
			МеждународныйСКорреспонденцией.Загрузить(ПроводкиДокумента.СКорреспонденцией);
			МеждународныйБезКорреспонденции.Загрузить(ПроводкиДокумента.БезКорреспонденции);
		ИначеЕсли СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ТребуетсяЗаписьСтатуса", Истина)).Количество() > 0 Тогда
			ЗаписиОтраженияДокумента = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			ЗаписиОтраженияДокумента.Отбор.Регистратор.Установить(Документ);
			ЗаписиОтраженияДокумента.Прочитать();
			
			Для каждого Запись Из ЗаписиОтраженияДокумента Цикл
				ПараметрыОтбора = Новый Структура("ПланСчетов, ТребуетсяЗаписьСтатуса", Запись.ПланСчетов, Истина);
				СтрокиТребуетсяЗаписьСтатуса = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(ПараметрыОтбора);
				Если СтрокиТребуетсяЗаписьСтатуса.Количество() > 0 Тогда
					Запись.Статус = СтрокиТребуетсяЗаписьСтатуса[0].СтатусОтражения;
					Запись.Комментарий = "";
				КонецЕсли;
			КонецЦикла;
			
			ЗаписиОтраженияДокумента.Записать();
		КонецЕсли;
		
		Для каждого Запись Из МеждународныйСКорреспонденцией Цикл
			НоваяЗапись = НаборЗаписейМеждународный.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
			НаборЗаписейМеждународный.УстановитьСубконто(НоваяЗапись, Запись, "Дт");
			НаборЗаписейМеждународный.УстановитьСубконто(НоваяЗапись, Запись, "Кт");
		КонецЦикла;
		
		Для каждого Запись Из МеждународныйБезКорреспонденции Цикл
			НоваяЗапись = НаборЗаписейМеждународныйБезКорреспонденции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
			НаборЗаписейМеждународныйБезКорреспонденции.УстановитьСубконто(НоваяЗапись, Запись);
		КонецЦикла;
		
		НаборЗаписейМеждународный.Записать();
		НаборЗаписейМеждународныйБезКорреспонденции.Записать();
		
		МеждународныйУчетПроведениеСервер.ВернутьКОтражениюДокументыСторно(, Документ);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПрочитатьПроводки();

	Модифицированность = Ложь;
	
	ЗаполнитьВспомогательныеРеквизитыПроводокБезКорреспонденции();
	
	НастроитьФорму();
	
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	ЗаполнитьПредставлениеВидовСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДокументОтраженВМеждународномУчете" И Источник = Документ Тогда
		ПовторноеОткрытиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ПланСчетовИзНастроек = Настройки.Получить("ПланСчетов");
	Если ЗначениеЗаполнено(ПланСчетовИзНастроек)
		И СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетовИзНастроек)).Количество() = 0 Тогда
		Настройки.Удалить("ПланСчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		СтрокаТаблицыСтатусов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов))[0];
		ИдентификаторПланаСчетов = СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		Элементы.ГруппаСтраницыПоПланамСчетов.ТекущаяСтраница = Элементы[ПрефиксИмениСтраницПоПланамСчетов + ИдентификаторПланаСчетов];
		ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РучнаяКорректировкаПроводокПриИзменении(Элемент)
	
	РучнаяКорректировкаПроводокПриИзмененииСервер();

КонецПроцедуры


&НаКлиенте
Процедура ГруппаСтраницыПоПланамСчетовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИдентификаторПланаСчетов = СтрЗаменить(ТекущаяСтраница.Имя, ПрефиксИмениСтраницПоПланамСчетов, "");
	
	Отбор = Новый Структура("ИдентификаторПланаСчетов", ИдентификаторПланаСчетов);
	РезультатОтбораПланыСчетов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Отбор);
	ПланСчетов = РезультатОтбораПланыСчетов[0].ПланСчетов;
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроводокСКорреспонденцией

&НаКлиенте
Процедура НаборЗаписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Не РучнаяКорректировкаПроводок Тогда
		ПутьКДанным = ПутьКДанным(Поле.Имя);
		ЧастиПути = СтрРазделить(ПутьКДанным, ".");
		Значение = Элемент.ТекущиеДанные[ЧастиПути[1]];
		Если ЗначениеЗаполнено(Значение) 
			И ТипЗнч(Значение) <> Тип("Число") 
			И ТипЗнч(Значение) <> Тип("Дата")
			И ТипЗнч(Значение) <> Тип("Булево") Тогда
			ПоказатьЗначение(, Значение);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаборЗаписейПередНачаломИзменения(Элемент, Отказ)
		
	ИзменитьПараметрыВыбораПолейСубконто(Элемент, "Дт");
	ИзменитьПараметрыВыбораПолейСубконто(Элемент, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура НаборЗаписейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Организация = Организация;
		Элемент.ТекущиеДанные.ПланСчетов = ПланСчетов;
		Элемент.ТекущиеДанные.Период = ДатаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваСчета(ТекущиеДанные.СчетДт, "Дт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ТекущиеДанные.Организация);
	ПараметрыФормы.Вставить("ПланСчетов",  ТекущиеДанные.ПланСчетов);
	ПараметрыФормы.Вставить("ВидДвижения", ПредопределенноеЗначение("Перечисление.ВидыДвиженийБухгалтерии.Дебет"));
	ПараметрыФормы.Вставить("Счет",        ТекущиеДанные.СчетДт);
	ОткрытьФорму("ПланСчетов.Международный.Форма.ФормаВыбораСПодборомСчетов", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваСчета(ТекущиеДанные.СчетКт, "Кт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ТекущиеДанные.Организация);
	ПараметрыФормы.Вставить("ПланСчетов",  ТекущиеДанные.ПланСчетов);
	ПараметрыФормы.Вставить("ВидДвижения", ПредопределенноеЗначение("Перечисление.ВидыДвиженийБухгалтерии.Кредит"));
	ПараметрыФормы.Вставить("Счет",        ТекущиеДанные.СчетДт);
	ОткрытьФорму("ПланСчетов.Международный.Форма.ФормаВыбораСПодборомСчетов", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДтПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзмененииКлиент(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКтПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзмененииКлиент(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаДтПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзмененииКлиент(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаКтПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзмененииКлиент(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущаяСтрока = ТаблицаФормы.ТекущиеДанные;
	ТекущаяСтрока.СуммаПредставления
		= РассчитатьСуммуПредставления(ТекущаяСтрока.ПланСчетов, ТекущаяСтрока.Организация, ТекущаяСтрока.Сумма, ТекущаяСтрока.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	НастройкаСчетовУчетаКлиент.ОбработкаПроводокПриИзмененииОрганизации(ТекущиеДанные, ТипыСвязанныеСОрганизацией, "Дт"); 
	НастройкаСчетовУчетаКлиент.ОбработкаПроводокПриИзмененииОрганизации(ТекущиеДанные, ТипыСвязанныеСОрганизацией, "Кт"); 
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроводкиБезКорреспонденции

&НаКлиенте
Процедура МеждународныйБезКорреспонденцииПередНачаломИзменения(Элемент, Отказ)
	
	ИзменитьПараметрыВыбораПолейСубконто(Элемент, "");

КонецПроцедуры

&НаКлиенте
Процедура МеждународныйБезКорреспонденцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МеждународныйБезКорреспонденцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущаяСтрока.Организация = Организация;
		ТекущаяСтрока.ПланСчетов = ПланСчетов;
		ТекущаяСтрока.Период = ДатаДокумента;
		
		Если ИтогСуммаДт >= ИтогСуммаКт Тогда
			ТекущаяСтрока.ВидДвижения = ВидДвиженияКредит;
			ТекущаяСтрока.СуммаКт = ИтогСуммаДт - ИтогСуммаКт;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаКт;
			
			ТекущаяСтрока.СуммаПредставленияКт = РассчитатьСуммуПредставления(ТекущаяСтрока.ПланСчетов, ТекущаяСтрока.Организация, ТекущаяСтрока.Сумма, ТекущаяСтрока.Период);
			ТекущаяСтрока.СуммаПредставления = ТекущаяСтрока.СуммаПредставленияКт;
		Иначе
			ТекущаяСтрока.ВидДвижения = ВидДвиженияДебет;
			ТекущаяСтрока.СуммаДт = ИтогСуммаКт - ИтогСуммаДт;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаДт;
			
			ТекущаяСтрока.СуммаПредставленияДт = РассчитатьСуммуПредставления(ТекущаяСтрока.ПланСчетов, ТекущаяСтрока.Организация, ТекущаяСтрока.Сумма, ТекущаяСтрока.Период);
			ТекущаяСтрока.СуммаПредставления = ТекущаяСтрока.СуммаПредставленияДт;
		КонецЕсли;
		РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтотОбъект);
		ТекущаяСтрока.ВидДвиженияИндекс = 
			ВидДвиженияИндексКартинки(ТекущаяСтрока.ВидДвижения, ТекущаяСтрока.Активность, ТекущаяСтрока.Сумма, ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МеждународныйБезКорреспонденцииПослеУдаления(Элемент)
	РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваСчета(ТекущиеДанные.Счет, ""));
КонецПроцедуры

&НаКлиенте
Процедура СуммаДтПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ТекущиеДанные.ВидДвижения = ВидДвиженияДебет;
	ТекущиеДанные.Сумма = ТекущиеДанные.СуммаДт;
	ТекущиеДанные.СуммаКт = 0;
	
	ТекущиеДанные.СуммаПредставленияДт = РассчитатьСуммуПредставления(ТекущиеДанные.ПланСчетов, ТекущиеДанные.Организация, ТекущиеДанные.Сумма, ТекущиеДанные.Период);
	ТекущиеДанные.СуммаПредставления = ТекущиеДанные.СуммаПредставленияДт;
	ТекущиеДанные.СуммаПредставленияКт = 0;
	
	ТекущиеДанные.ВидДвиженияИндекс = 
		ВидДвиженияИндексКартинки(ТекущиеДанные.ВидДвижения, ТекущиеДанные.Активность, ТекущиеДанные.Сумма, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКтПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ТекущиеДанные.ВидДвижения = ВидДвиженияКредит;
	ТекущиеДанные.Сумма = ТекущиеДанные.СуммаКт;
	ТекущиеДанные.СуммаДт = 0;
	
	ТекущиеДанные.СуммаПредставленияКт = РассчитатьСуммуПредставления(ТекущиеДанные.ПланСчетов, ТекущиеДанные.Организация, ТекущиеДанные.Сумма, ТекущиеДанные.Период);
	ТекущиеДанные.СуммаПредставления = ТекущиеДанные.СуммаПредставленияКт;
	ТекущиеДанные.СуммаПредставленияДт = 0;
	
	ТекущиеДанные.ВидДвиженияИндекс = 
		ВидДвиженияИндексКартинки(ТекущиеДанные.ВидДвижения, ТекущиеДанные.Активность, ТекущиеДанные.Сумма, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура СуммаПредставленияДтПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ТекущиеДанные.СуммаПредставления = ТекущиеДанные.СуммаПредставленияДт;
	ТекущиеДанные.ВидДвижения = ВидДвиженияДебет;
	Если ТекущиеДанные.СуммаКт <> 0 Тогда
		ТекущиеДанные.СуммаКт = 0;
		ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	Если ТекущиеДанные.СуммаПредставленияКт <> 0 Тогда
		ТекущиеДанные.СуммаПредставленияКт = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПредставленияКтПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ТекущиеДанные.СуммаПредставления = ТекущиеДанные.СуммаПредставленияКт;
	ТекущиеДанные.ВидДвижения = ВидДвиженияКредит;
	Если ТекущиеДанные.СуммаДт <> 0 Тогда
		ТекущиеДанные.СуммаДт = 0;
		ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	Если ТекущиеДанные.СуммаПредставленияДт <> 0 Тогда
		ТекущиеДанные.СуммаПредставленияДт = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзмененииКлиент(ТаблицаФормы, "");
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзмененииКлиент(ТаблицаФормы, "");
КонецПроцедуры

&НаКлиенте
Процедура Субконто1ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "");
КонецПроцедуры

&НаКлиенте
Процедура Субконто1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Субконто2ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "");
КонецПроцедуры

&НаКлиенте
Процедура Субконто2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Субконто3ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "");
КонецПроцедуры

&НаКлиенте
Процедура Субконто3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МеждународныйБезКорреспонденцииОрганизацияПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	НастройкаСчетовУчетаКлиент.ОбработкаПроводокПриИзмененииОрганизации(ТекущиеДанные, ТипыСвязанныеСОрганизацией, ""); 
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = ПараметрыЗаписиПроводок();
	ЗаписатьПроводки(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = ПараметрыЗаписиПроводок();
	ПараметрыЗаписи.ЗакрытьФорму = Истина;
	
	ЗаписатьПроводки(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВМеждународномУчете(Команда)
	
	ОчиститьСообщения();
	ПараметрыЗаписи = ПараметрыЗаписиПроводок();
	ПараметрыЗаписи.СформироватьПроводкиАвтоматически = Истина;
	
	ЗаписатьПроводки(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроводкиАвтоматически(Команда)
	
	Если ЕстьПроводкиДокументаПоМеждународномуУчету() Тогда
		ТекстВопроса = НСтр("ru = 'Существующие проводки будут удалены. Продолжить?';
							|en = 'Existing entries will be deleted. Continue?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросПередАвтоматическимЗаполнениемПроводок", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		НачатьАвтоматическоеФормированиеПроводок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьАктуальностьПроводок(Команда)
	
	ПодтвердитьАктуальностьПроводокСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СторнироватьПроводки(Команда)
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Основание", Документ);
	ЗначенияЗаполнения.Вставить("ПланСчетов", ПланСчетов);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ОперацияМеждународный.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОтражения(Команда)
	ОбновитьСостояниеОтраженияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АнализПроводокОперативногоУчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "АнализПроводокОперативногоУчета");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрОтбор = Новый Структура();
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		ПараметрОтбор.Вставить("ПланСчетов", ПланСчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ) Тогда
		ПараметрОтбор.Вставить("Регистратор", Документ);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", ПараметрОтбор);
	
	ЗначенияПользовательскихНастроек = Новый Структура();
	ЗначенияПользовательскихНастроек.Вставить("ПериодОтчета", ВариантСтандартногоПериода.ПроизвольныйПериод);
	ПользовательскиеНастройки = ПользовательскиеНастройкиОтчетаАнализПроводок(
		"АнализПроводокОперативногоУчета", ЗначенияПользовательскихНастроек);
	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму("Отчет.АнализПроводокОперативногоУчета.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаписиПроводок()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("ЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("СформироватьПроводкиАвтоматически", Ложь);
	ПараметрыЗаписи.Вставить("СтатусыОтраженияВУчете", Новый Массив());
	ПараметрыЗаписи.Вставить("АдресТаблицыПроводок", "");
	ПараметрыЗаписи.Вставить("КоличествоПопыток", 3);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

&НаСервере
Процедура УстановитьУстановитьУсловноеОформлениеПроводокСКорреспонденцией(ИдентификаторПланаСчетов)
	
	#Область ОтображениеВалютнаяСумма
		
	ИмяПоляВалютаДт = "ВалютаДт" + ИдентификаторПланаСчетов;
	ИмяВалютнаяСуммаДт = "ВалютнаяСуммаДт" + ИдентификаторПланаСчетов;

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВалютаДт);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВалютнаяСуммаДт);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.ВалютныйДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область ОтображениеКоличество
	ИмяПоляНадписьКоличествоДт = "НадписьКоличествоДт"  + ИдентификаторПланаСчетов;
	ИмяПоляКоличествоДт = "КоличествоДт" + ИдентификаторПланаСчетов;

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляНадписьКоличествоДт);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКоличествоДт);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.КоличественныйДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область ОтображениеКоличество
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляНадписьКоличествоДт);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Кол.:';
																|en = 'Qty:'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоДт1
	
	ИмяПоляПредставлениеВидСубконтоДт1 = "ПредставлениеВидСубконтоДт1" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт1);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СчетДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоДт1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт1);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоДт1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоДт2
		
	ИмяПоляПредставлениеВидСубконтоДт2 = "ПредставлениеВидСубконтоДт2" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт2);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СчетДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоДт2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт2);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоДт2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоДт3
	
	ИмяПоляПредставлениеВидСубконтоДт3 = "ПредставлениеВидСубконтоДт3" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт3);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СчетДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоДт3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт3);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоДт3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВалютнаяСумма
		
	ИмяПоляВалютаКт = "ВалютаКт" + ИдентификаторПланаСчетов;
	ИмяВалютнаяСуммаКт = "ВалютнаяСуммаКт" + ИдентификаторПланаСчетов;

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВалютаКт);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВалютнаяСуммаКт);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.ВалютныйКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область ОтображениеКоличество
	ИмяПоляНадписьКоличествоКт = "НадписьКоличествоКт" + ИдентификаторПланаСчетов;
	ИмяПоляКоличествоКт = "КоличествоКт" + ИдентификаторПланаСчетов;

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляНадписьКоличествоКт);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКоличествоКт);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.КоличественныйКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область ОтображениеКоличество
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляНадписьКоличествоКт);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Кол.:';
																|en = 'Qty:'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти

	#Область ФорматВалютнаяСумма
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВалютнаяСуммаДт);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВалютнаяСуммаКт);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2;");	
	
	#КонецОбласти


	#Область ОтображениеВидаСубконтоКт1
		
	ИмяПоляПредставлениеВидСубконтоКт1 = "ПредставлениеВидСубконтоКт1" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт1);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СчетКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоКт1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт1);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоКт1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоКт2
		
	ИмяПоляПредставлениеВидСубконтоКт2 = "ПредставлениеВидСубконтоКт2" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт2);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СчетКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоКт2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт2);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоКт2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоКт3
		
	ИмяПоляПредставлениеВидСубконтоКт3 = "ПредставлениеВидСубконтоКт3" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт3);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СчетКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоКт3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт3);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СубконтоКт3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ТекстОбычнаяПроводка
		
	ИмяПоляТипПроводки = "ТипПроводки" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляТипПроводки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.ТипПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обычная';
																|en = 'Standard'"));
	#КонецОбласти
	
	#Область ШаблонПроводки
		
	ИмяПоляШаблонПроводки = "ШаблонПроводки" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляШаблонПроводки);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораСоответствий = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораСоответствий.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СоответствиеСчетаДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СоответствиеСчетаКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СоответствиеОборотов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область СоответствияСчетовИОборотов
		
	ИмяПоляСоответствиеСчетаДт = "СоответствиеСчетаДт" + ИдентификаторПланаСчетов;
	ИмяПоляСоответствиеСчетаКт = "СоответствиеСчетаКт" + ИдентификаторПланаСчетов;
	ИмяПоляСоответствиеОборотов = "СоответствиеОборотов" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСоответствиеСчетаДт);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СоответствиеСчетаДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СоответствиеСчетаКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСоответствиеСчетаКт);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СоответствиеСчетаКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СоответствиеСчетаДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСоответствиеОборотов);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйСКорреспонденцией.СоответствиеОборотов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУстановитьУсловноеОформлениеПроводокБезКорреспонденции(ИдентификаторПланаСчетов)
	
	#Область ОтображениеВидаСубконто1
	
	ИмяПоляПредставлениеВидСубконто1 = "ПредставлениеВидСубконто1" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконто1);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Счет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Субконто1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконто1);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Субконто1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	#Область ОтображениеВидаСубконто2
		
	ИмяПоляПредставлениеВидСубконто2 = "ПредставлениеВидСубконто2" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконто2);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Счет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Субконто2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконто2);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Субконто2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВидаСубконто3
	
	ИмяПоляПредставлениеВидСубконто3 = "ПредставлениеВидСубконто3" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконто3);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Счет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Субконто3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконто3);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.Субконто3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ТекстОбычнаяПроводка
		
	ИмяПоляТипПроводки = "МеждународныйБезКорреспонденцииТипПроводки" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляТипПроводки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.ТипПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обычная';
																|en = 'Standard'"));
	#КонецОбласти
	
	#Область ШаблонПроводки
		
	ИмяПоляШаблонПроводки = "ШаблонПроводки" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляШаблонПроводки);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораСоответствий = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораСоответствий.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.СоответствиеСчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.СоответствиеОборотов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область СоответствияСчетовИОборотов
		
	ИмяПоляСоответствиеСчета = "СоответствиеСчета" + ИдентификаторПланаСчетов;
	ИмяПоляСоответствиеОборотов = "СоответствиеОборотов" + ИдентификаторПланаСчетов;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСоответствиеСчета);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.СоответствиеСчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСоответствиеОборотов);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МеждународныйБезКорреспонденции.СоответствиеОборотов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПроводки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(,, Регистратор = &Документ,,) КАК Международный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрБухгалтерии.МеждународныйБезКорреспонденции.ДвиженияССубконто(,, Регистратор = &Документ,,) КАК МеждународныйБезКорреспонденции";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	МеждународныйСКорреспонденцией.Загрузить(РезультатЗапроса[0].Выгрузить());
	МеждународныйБезКорреспонденции.Загрузить(РезультатЗапроса[1].Выгрузить());
	
	ЗаполнитьВспомогательныеРеквизитыПроводокБезКорреспонденции();
	
	МеждународныйСКорреспонденцией.Сортировать(ПоляСортировкиПроводок());
	МеждународныйБезКорреспонденции.Сортировать(ПоляСортировкиПроводок());
	
	ЗаполнитьПредставлениеВидовСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ПовторноеОткрытиеСервер()

	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	УстановитьСвойстваЭлементовТекущейВкладки();
	//@skip-warning
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен");
	Если НЕ ДокументПроведен ИЛИ (ДокументПроведен И НЕ РучнаяКорректировкаПроводок) Тогда
		ПрочитатьПроводки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВопросПередАвтоматическимЗаполнениемПроводок(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НачатьАвтоматическоеФормированиеПроводок();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьАвтоматическоеФормированиеПроводок(ПараметрыЗаписиПроводок = Неопределено)
	
	ДлительнаяОперация = НачатьОтражениеДокументаВМеждународномУчете(Документ, ПараметрыЗаписиПроводок, УникальныйИдентификатор);
	
	ПараметрыОповещения = Новый Структура();
	
	Если ПараметрыЗаписиПроводок = Неопределено Тогда
		ПараметрыОповещения.Вставить("Действие", "АвтоматическоеЗаполнениеПроводок");
	Иначе
		ПараметрыОповещения.Вставить("Действие", "АвтоматическоеОтражениеВУчете");
		ПараметрыОповещения.Вставить("ПараметрыЗаписиПроводок", ПараметрыЗаписиПроводок);
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатОтраженияДокумента", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Автоматическое формирование проводок';
										|en = 'Automatic entry generation'");
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция СтатусОтражения()
	
	СтрокиПоПлануСчетов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	Если СтрокиПоПлануСчетов.Количество() > 0 Тогда
		Возврат СтрокиПоПлануСчетов[0].СтатусОтражения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ВариантФормированияПроводок()
	
	СтрокиПоПлануСчетов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	Если СтрокиПоПлануСчетов.Количество() > 0 Тогда
		Возврат СтрокиПоПлануСчетов[0].ВариантФормированияПроводок;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПодтвердитьАктуальностьПроводокСервер()
	
	СтрокаТаблицыСтатусов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов))[0];
	СтрокаТаблицыСтатусов.СтатусОтражения = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную");
	СтрокаТаблицыСтатусов.ТребуетсяЗаписьСтатуса = Истина;
	
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	УстановитьКартинкуСтатусаОтраженияСервер(СтрокаТаблицыСтатусов);
	
КонецПроцедуры

&НаСервере
Процедура РучнаяКорректировкаПроводокПриИзмененииСервер()

	СтрокаТаблицыСтатусов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов))[0];
	Если РучнаяКорректировкаПроводок 
		И СтатусыОтраженияВручную.НайтиПоЗначению(СтрокаТаблицыСтатусов.СтатусОтражения) = Неопределено Тогда
		СтрокаТаблицыСтатусов.СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную;
		СтрокаТаблицыСтатусов.ТребуетсяЗаписьСтатуса = Истина;
	ИначеЕсли НЕ РучнаяКорректировкаПроводок 
		И СтатусыОтраженияВручную.НайтиПоЗначению(СтрокаТаблицыСтатусов.СтатусОтражения) <> Неопределено Тогда
		СтрокаТаблицыСтатусов.СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете;
		СтрокаТаблицыСтатусов.ТребуетсяЗаписьСтатуса = Истина;
	КонецЕсли;
	
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	УстановитьКартинкуСтатусаОтраженияСервер(СтрокаТаблицыСтатусов);

КонецПроцедуры

&НаСервере
Функция ЭтоРучнаяКорректировкаПроводок(Статус)
	
	Если СтатусыОтраженияВручную.НайтиПоЗначению(Статус) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция Комментарий()
	
	СтрокиПоПлануСчетов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	Если СтрокиПоПлануСчетов.Количество() > 0 Тогда
		Возврат СтрСоединить(СтрокиПоПлануСчетов[0].Комментарии, Символы.ПС);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция НачатьОтражениеДокументаВМеждународномУчете(Документ, ПараметрыЗаписиПроводок, ИдентификаторФормы)
	
	Если ПараметрыЗаписиПроводок <> Неопределено Тогда
		МеждународныйУчетПроведениеСервер.ВыполнитьОффлайновыеРасчеты(,, Документ);
		ПараметрыЗаписиПроводок.СтатусыОтраженияВУчете = СтатусыОтраженияВУчете(Документ);
	КонецЕсли;
	
	ПараметрыОтражения = МеждународныйУчетПроведениеСервер.ПараметрыОтраженияВМеждународномУчете();
	ПараметрыОтражения.Документы = Документ;
	ПараметрыОтражения.ВыполнитьПересчеты = Ложь;
	ПараметрыОтражения.ЗаписыватьПроводки = Ложь;
	ПараметрыОтражения.ПроверятьСтатусОтражения = Ложь;
	
	Возврат МеждународныйУчетПроведениеСервер.НачатьОтражениеВМеждународномУчете(ПараметрыОтражения, ИдентификаторФормы);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатОтраженияДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'При формировании проводок международного учета произошла ошибка:
			|%1';
			|en = 'An error occurred when generating financial accounting entries:
			|%1'");
		
		Если Результат = Неопределено Тогда
			ТекстРасшифровки = НСтр("ru = 'Не найдено выполняемое задание.';
									|en = 'Job in progress is not found.'");
		ИначеЕсли ЗначениеЗаполнено(Результат.КраткоеПредставлениеОшибки) Тогда
			ТекстРасшифровки = Результат.КраткоеПредставлениеОшибки;
		Иначе
			ТекстРасшифровки = НСтр("ru = 'Подробности см. в Журнале регистрации.';
									|en = 'For more information, see the event log.'");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстРасшифровки);

		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Действие = "АвтоматическоеЗаполнениеПроводок" Тогда
		ЗаполнитьПроводкиАвтоматическиСервер(Результат.АдресРезультата);
	ИначеЕсли ДополнительныеПараметры.Действие = "АвтоматическоеОтражениеВУчете" Тогда
		ПараметрыЗаписиПроводок = ДополнительныеПараметры.ПараметрыЗаписиПроводок;
		ПараметрыЗаписиПроводок.АдресТаблицыПроводок = Результат.АдресРезультата;
		
		Если ПараметрыЗаписиПроводок.КоличествоПопыток < 0 Тогда
			ПараметрыЗаписиПроводок.КоличествоПопыток = -ПараметрыЗаписиПроводок.КоличествоПопыток;
			ПовторитьОтражениеДокумента = Ложь;
		Иначе
			ПовторитьОтражениеДокумента = Истина;
		КонецЕсли;
		
		Для НомерПопытки = 1 По ПараметрыЗаписиПроводок.КоличествоПопыток Цикл
			Попытка
				ЗаписатьПроводкиСервер(ПараметрыЗаписиПроводок);
				ПослеЗаписиПроводок(ПараметрыЗаписиПроводок);
				Прервать;
			Исключение
				Если НомерПопытки < ПараметрыЗаписиПроводок.КоличествоПопыток Тогда
				ИначеЕсли ПовторитьОтражениеДокумента Тогда
					ПараметрыЗаписиПроводок.КоличествоПопыток = -ПараметрыЗаписиПроводок.КоличествоПопыток;
					ЗаписатьПроводки(ПараметрыЗаписиПроводок);
				Иначе
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроводкиАвтоматическиСервер(АдресТаблицыПроводок)
	
	ТаблицаПроводок = ПолучитьИзВременногоХранилища(АдресТаблицыПроводок);
	ТаблицаПроводок = МеждународныйУчетПроведениеСервер.ЗаписываемыеПроводки(ТаблицаПроводок, ПланСчетов);
	
	ПараметрыПроводок = МеждународныйУчетПроведениеСервер.НовыеПараметрыФормированияПроводок();
	ВариантФормированияПроводок = ВариантФормированияПроводок();
	
	Если ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
		НаборЗаписей = МеждународныйБезКорреспонденции;
		МеждународныйУчетПроведениеСервер.УдалитьКорреспонденцииПроводок(ТаблицаПроводок, ПараметрыПроводок);
	Иначе
		НаборЗаписей = МеждународныйСКорреспонденцией;
	КонецЕсли;
	
	ЗаписиПоПлануСчетов = НаборЗаписей.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	
	Для каждого ЗаписьПоПлануСчетов Из ЗаписиПоПлануСчетов Цикл
		НаборЗаписей.Удалить(ЗаписьПоПлануСчетов);
	КонецЦикла;
	
	Для Каждого Проводка Из ТаблицаПроводок Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Проводка);
		Запись.Активность = Истина;
	КонецЦикла;
	
	НаборЗаписей.Сортировать(ПоляСортировкиПроводок());
	
	Если ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
		ЗаполнитьВспомогательныеРеквизитыПроводокБезКорреспонденции();
	КонецЕсли;
	
	ЗаполнитьПредставлениеВидовСубконто();
	
КонецПроцедуры

&НаСервере
Функция ОтразитьВМеждународномУчетеАвтоматически(ПараметрыЗаписиПроводок)
	
	ТаблицаПроводок = ПолучитьИзВременногоХранилища(ПараметрыЗаписиПроводок.АдресТаблицыПроводок);
	ПараметрыПроводок = МеждународныйУчетПроведениеСервер.НовыеПараметрыФормированияПроводок();
	
	ПроводкиСКорреспонденцией = ТаблицаПроводок.СкопироватьКолонки();
	ПроводкиБезКорреспонденции = ПроводкиСКорреспонденцией.Скопировать();
	
	ПустойПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.ПустаяСсылка();
	ПустойВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка();
	
	Для каждого СтатусыОтражения Из СтатусыОтраженияПоПланамСчетов Цикл
		СтруктураПоиска = Новый Структура("ПланСчетов", СтатусыОтражения.ПланСчетов);
		
		Если СтатусыОтражения.СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную
		 ИЛИ СтатусыОтражения.СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную Тогда
			
			Если СтатусыОтражения.ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
				ПроводкиСформированныеВручную = МеждународныйБезКорреспонденции.НайтиСтроки(СтруктураПоиска);
				Для каждого Проводка Из ПроводкиСформированныеВручную Цикл
					НоваяСтрока = ПроводкиБезКорреспонденции.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Проводка);
					ЗаполнитьЗначенияНебалансовыхПолей(НоваяСтрока, Проводка, ПараметрыПроводок);
					УстановитьВидыСубконтоПроводки(НоваяСтрока, "Дт", ПустойВидСубконто);
					УстановитьВидыСубконтоПроводки(НоваяСтрока, "Кт", ПустойВидСубконто);
					НоваяСтрока.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную;
				КонецЦикла;
			Иначе
				ПроводкиСформированныеВручную = МеждународныйСКорреспонденцией.НайтиСтроки(СтруктураПоиска);
				Для каждого Проводка Из ПроводкиСформированныеВручную Цикл
					НоваяСтрока = ПроводкиСКорреспонденцией.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Проводка);
					УстановитьВидыСубконтоПроводки(НоваяСтрока, "Дт", ПустойВидСубконто);
					УстановитьВидыСубконтоПроводки(НоваяСтрока, "Кт", ПустойВидСубконто);
					НоваяСтрока.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			ПроводкиСформированныеАвтоматически = ТаблицаПроводок.НайтиСтроки(СтруктураПоиска);
			
			Для каждого Проводка Из ПроводкиСформированныеАвтоматически Цикл
				Если СтатусыОтражения.ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
					НоваяСтрока = ПроводкиБезКорреспонденции.Добавить();
				Иначе
					НоваяСтрока = ПроводкиСКорреспонденцией.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Проводка);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	СтатусыОтражения = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ПараметрыЗаписиПроводок.СтатусыОтраженияВУчете);
	ПроводкиСтатусаОтражения = ПроводкиСКорреспонденцией.Скопировать();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПроводкиБезКорреспонденции, ПроводкиСтатусаОтражения);
	
	Если НЕ МеждународныйУчетПроведениеСервер.ОбновитьСтатусОтраженияДокумента(Документ, СтатусыОтражения, ПроводкиСтатусаОтражения) Тогда
		ТекстСообщения = НСтр("ru = 'Автоматическое отражение не может быть выполнено (возможно документ был изменен или удален)';
								|en = 'Cannot record the document automatically as it might have been changed or deleted'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ПроводкиСКорреспонденцией.Количество() > 0 Тогда
		ПроводкиСКорреспонденцией = МеждународныйУчетПроведениеСервер.ЗаписываемыеПроводки(ПроводкиСКорреспонденцией, ПустойПланСчетов, Ложь);
		ПроводкиСКорреспонденцией.Сортировать(ПоляСортировкиПроводок());
		УстановитьПризнакАктивностиПроводок(ПроводкиСКорреспонденцией);
	КонецЕсли;
	
	Если ПроводкиБезКорреспонденции.Количество() > 0 Тогда
		ПроводкиБезКорреспонденции = МеждународныйУчетПроведениеСервер.ЗаписываемыеПроводки(ПроводкиБезКорреспонденции, ПустойПланСчетов, Ложь);
		МеждународныйУчетПроведениеСервер.УдалитьКорреспонденцииПроводок(ПроводкиБезКорреспонденции, ПараметрыПроводок);
		ПроводкиБезКорреспонденции.Сортировать(ПоляСортировкиПроводок());
		УстановитьПризнакАктивностиПроводок(ПроводкиБезКорреспонденции);
	КонецЕсли;
	
	ПроводкиДокумента = Новый Структура();
	ПроводкиДокумента.Вставить("СКорреспонденцией", ПроводкиСКорреспонденцией);
	ПроводкиДокумента.Вставить("БезКорреспонденции", ПроводкиБезКорреспонденции);
	
	Возврат ПроводкиДокумента;

КонецФункции

&НаСервере
Процедура УстановитьВидыСубконтоПроводки(Проводка, ДтКт, ПустойВидСубконто)
	
	Если ЗначениеЗаполнено(Проводка["Счет" + ДтКт]) Тогда
		СвойстваСчета = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Проводка["Счет" + ДтКт]);
		
		Для НомерСубконто = 1 По МеждународныйУчетСерверПовтИсп.МаксКоличествоСубконто() Цикл
			Проводка["ВидСубконто" + ДтКт + НомерСубконто] = ?(
				СвойстваСчета["ВидСубконто" + НомерСубконто] <> Неопределено,
				СвойстваСчета["ВидСубконто" + НомерСубконто],
				ПустойВидСубконто);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияНебалансовыхПолей(НоваяСтрока, Проводка, ПараметрыПроводок)
	
	Если Проводка.ВидДвижения = ВидДвиженияБухгалтерии.Дебет Тогда
		ДтКт = "Дт";
	ИначеЕсли Проводка.ВидДвижения = ВидДвиженияБухгалтерии.Кредит Тогда
		ДтКт = "Кт";
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяПоля Из ПараметрыПроводок.ИнвертируемыеПоля Цикл
		Если ИмяПоля = "Субконто" ИЛИ ИмяПоля = "ВидСубконто" Тогда
			Для НомерСубконто = 1 По ПараметрыПроводок.КоличествоСубконто Цикл
				НоваяСтрока[ИмяПоля + ДтКт + НомерСубконто] = Проводка[ИмяПоля + НомерСубконто];
			КонецЦикла;
		Иначе
			НоваяСтрока[ИмяПоля + ДтКт] = Проводка[ИмяПоля];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакАктивностиПроводок(ТаблицаПроводок)
	
	ТаблицаПроводок.Колонки.Добавить("Активность", Новый ОписаниеТипов("Булево"));
	ТаблицаПроводок.ЗаполнитьЗначения(Истина, "Активность");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеОтраженияДокументаПоПлануСчетов()

	ДокументыФормируютПроводкиПриПроведении = Новый Соответствие;
	ДокументыФормируютПроводкиПриПроведении.Вставить(Тип("ДокументСсылка.РегламентнаяОперацияМеждународныйУчет"), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ДокументыФормируютПроводкиПриПроведении, МеждународныйУчетПоДаннымДокументов.ТипыДокументовКОтражению());
	
	СтатусОтражения = СтатусОтражения();
	РучнаяКорректировкаПроводок = ЭтоРучнаяКорректировкаПроводок(СтатусОтражения);
	ЕстьПроводки = ЕстьПроводкиДокументаПоМеждународномуУчету();
	Комментарий = Комментарий();
	
	Если СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
			
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Отражен в учете вручную.';
							|en = 'Manually posted to accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете Тогда
		
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Ожидается отражение в регл. учете.';
							|en = 'Recording in local accounting is expected.'"),
						,
						ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров Тогда
		
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Нарушена двойная запись в финансовых регистрах.';
							|en = 'Double entry of financial registers is violated.'"),
						,
						ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете Тогда
		
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Отсутствуют правила отражения в учете.';
							|en = 'No rules of recording in accounting.'"),
						,
						ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете Тогда
		
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Отражен в учете.';
							|en = 'Posted to accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете Тогда
		Если ЕстьПроводки Тогда
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Ожидается повторное отражение в учете. Проводки могут быть неактуальными.';
							|en = 'Re-recording in accounting is pending. Entries may be irrelevant.'"),
						,
						ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет);
		Иначе
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Ожидается отражение в учете';
							|en = 'Awaits recording in accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		КонецЕсли;
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную Тогда
		Если ЕстьПроводки Тогда
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'При необходимости скорректируйте проводки и подтвердите актуальность.';
							|en = 'Correct the entries and confirm relevance, if required.'"),
						,
						ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет);
		Иначе
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Требуется ручное отражение в учете.';
							|en = 'Manual recording in accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		КонецЕсли;
	Иначе
		Если ЕстьПроводки Тогда
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Отражен в учете.';
							|en = 'Posted to accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		ИначеЕсли ДокументыФормируютПроводкиПриПроведении[ТипЗнч(Документ)] <> Неопределено Тогда
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Документ не проведен.';
							|en = 'Document is not posted.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		Иначе
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Документ не отражается в учете или отсутствует настройка для организации..';
							|en = 'The document is not posted to accounting or there is no setting for the company..'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
			
			Элементы.ЗаполнитьАвтоматическиПроводкиСКорреспонденцией.Видимость = Ложь;
			Элементы.РучнаяКорректировкаПроводокСКорреспонденцией.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроводкиМогутИзмениться = "";
	
	Если СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете Тогда
		НевыполненныеЗадания = МеждународныйУчетЗакрытиеМесяца.НевыполненныеОтложенныеЗадания(
			Неопределено, Неопределено, Неопределено, Документ);
		Если НевыполненныеЗадания.Количество() > 0 Тогда
			НевыполненныеЗадания.Добавить(НСтр("ru = 'Проводки документа могут измениться.';
												|en = 'Document entries might change.'"));
			ПроводкиМогутИзмениться = Новый ФорматированнаяСтрока(
				СтрСоединить(НевыполненныеЗадания, " "),,
				ЦветаСтиля.ТекстИнформационнойНадписи);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовШапки();
	УстановитьСвойстваЭлементовТекущейВкладки();
	УстановитьСвойстваЭлементовПодвала();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовШапки()
	
	ЕстьОтражениеВручную = Ложь;
	ТребуетсяАвтоматическоеОтражениеВУчете = Ложь;
	
	Для каждого СтрокаТаблицыСтатусов Из СтатусыОтраженияПоПланамСчетов Цикл
		
		Если СтатусыОтраженияВручную.НайтиПоЗначению(СтрокаТаблицыСтатусов.СтатусОтражения) <> Неопределено Тогда
			ЕстьОтражениеВручную = Истина;
		ИначеЕсли СтатусыТребуетсяАвтоматическоеОтражение.НайтиПоЗначению(СтрокаТаблицыСтатусов.СтатусОтражения) <> Неопределено Тогда
			ТребуетсяАвтоматическоеОтражениеВУчете = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЕстьОтражениеВручную;
	Элементы.ФормаЗаписать.Видимость = ЕстьОтражениеВручную;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ЕстьОтражениеВручную;
	
	Элементы.ФормаОтразитьВМеждународномУчете.Видимость =  ТребуетсяАвтоматическоеОтражениеВУчете Или Не ЕстьОтражениеВручную;
	Элементы.ФормаОтразитьВМеждународномУчете.Доступность = ТребуетсяАвтоматическоеОтражениеВУчете;
	Элементы.ФормаОтразитьВМеждународномУчете.КнопкаПоУмолчанию = ТребуетсяАвтоматическоеОтражениеВУчете;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовТекущейВкладки()
	
	СтатусыОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете;
	
	ТипыДокументовПараллельногоУчета = Метаданные.Обработки.ОтражениеДокументовВМеждународномУчете.Команды.ПроводкиДокументаПараллельногоУчета.ТипПараметраКоманды.Типы();
	ДокументПараллельногоУчета = ТипыДокументовПараллельногоУчета.Найти(ТипЗнч(Документ)) <> Неопределено;
	
	ВариантФормированияПроводок = ВариантФормированияПроводок();
	
	Если ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
		ЭлементРучнаяКорректировкаПроводок = ЭлементФормыДляТекущегоПланаСчетов(Элементы.РучнаяКорректировкаПроводокБезКорреспонденции, ЭтотОбъект);
		ЭлементКомментарий = ЭлементФормыДляТекущегоПланаСчетов(Элементы.КомментарийПроводокБезКорреспонденции, ЭтотОбъект);
		ЭлементПроверитьПравилаОтражения = ЭлементФормыДляТекущегоПланаСчетов(Элементы.ПроверитьПравилаОтраженияПроводкиБезКорреспонденции, ЭтотОбъект);
		ЭлементТаблицаПроводок =  ЭлементФормыДляТекущегоПланаСчетов(Элементы.МеждународныйБезКорреспонденции, ЭтотОбъект);
		ЭлементЗаполнитьАвтоматическиПроводки =  ЭлементФормыДляТекущегоПланаСчетов(Элементы.ЗаполнитьАвтоматическиПроводкиБезКорреспонденции, ЭтотОбъект);
		ЭлементПодтвердитьАктуальностьПроводок = ЭлементФормыДляТекущегоПланаСчетов(Элементы.ПодтвердитьАктуальностьПроводокБезКорреспонденции, ЭтотОбъект);
		ЭлементАнализОперативногоУчета = ЭлементФормыДляТекущегоПланаСчетов(Элементы.АнализПроводокБезКорреспонденции, ЭтотОбъект);
		ЭлементОперацияКорректировкаПроводок = ЭлементФормыДляТекущегоПланаСчетов(Элементы.ФормаКорректировкаПроводокБезКорреспонденции, ЭтотОбъект);
		ЭлементТипПроводки = ЭлементФормыДляТекущегоПланаСчетов(Элементы.МеждународныйБезКорреспонденцииТипПроводки, ЭтотОбъект);
	Иначе
		ЭлементРучнаяКорректировкаПроводок = ЭлементФормыДляТекущегоПланаСчетов(Элементы.РучнаяКорректировкаПроводокСКорреспонденцией, ЭтотОбъект);
		ЭлементКомментарий = ЭлементФормыДляТекущегоПланаСчетов(Элементы.КомментарийПроводокСКорреспонденцией, ЭтотОбъект);
		ЭлементПроверитьПравилаОтражения = ЭлементФормыДляТекущегоПланаСчетов(Элементы.ПроверитьПравилаОтраженияПроводкиСКорреспонденцией, ЭтотОбъект);
		ЭлементТаблицаПроводок =  ЭлементФормыДляТекущегоПланаСчетов(Элементы.МеждународныйСКорреспонденцией, ЭтотОбъект);
		ЭлементЗаполнитьАвтоматическиПроводки =  ЭлементФормыДляТекущегоПланаСчетов(Элементы.ЗаполнитьАвтоматическиПроводкиСКорреспонденцией, ЭтотОбъект);
		ЭлементПодтвердитьАктуальностьПроводок = ЭлементФормыДляТекущегоПланаСчетов(Элементы.ПодтвердитьАктуальностьПроводокСКорреспонденцией, ЭтотОбъект);
		ЭлементАнализОперативногоУчета = ЭлементФормыДляТекущегоПланаСчетов(Элементы.АнализПроводокСКорреспонденцией, ЭтотОбъект);
		ЭлементОперацияКорректировкаПроводок = ЭлементФормыДляТекущегоПланаСчетов(Элементы.ФормаКорректировкаПроводокСКорреспонденцией, ЭтотОбъект);
		ЭлементТипПроводки = ЭлементФормыДляТекущегоПланаСчетов(Элементы.ТипПроводки, ЭтотОбъект);
	КонецЕсли;
	
	ЭлементРучнаяКорректировкаПроводок.Видимость = НЕ ДокументПараллельногоУчета;
	ЭлементКомментарий.Видимость = ЗначениеЗаполнено(Комментарий);
	ЭлементПроверитьПравилаОтражения.Видимость = (СтатусОтражения = СтатусыОтражения.ОтсутствуютПравилаОтраженияВУчете);
	
	ЭлементТаблицаПроводок.ТолькоПросмотр = НЕ РучнаяКорректировкаПроводок;
	ЭлементЗаполнитьАвтоматическиПроводки.Видимость = РучнаяКорректировкаПроводок;
	
	ЭлементПодтвердитьАктуальностьПроводок.Видимость = РучнаяКорректировкаПроводок И СтатусОтражения = СтатусыОтражения.КОтражениюВУчетеВручную;
	
	ЭлементАнализОперативногоУчета.ПоложениеВКоманднойПанели =
		?(СтатусОтражения = СтатусыОтражения.ОтраженоВУчете ИЛИ СтатусОтражения = СтатусыОтражения.ОтраженоВУчетеВручную,
			ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю,
			ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю);
	
	НастройкаФормированияПроводок = МеждународныйУчетСерверПовтИсп.ИспользуемаяНастройкаФормированияПроводок(
		НачалоМесяца(ДатаДокумента), ПланСчетов, Организация);
	СпособАннулированияПроводок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаФормированияПроводок, "СпособАннулированияПроводок");
	
	МеждународныйУчетОбщегоНазначения.ДобавитьТипыАннулирующихПроводок(СпособАннулированияПроводок,
		ЭлементТипПроводки.СписокВыбора);
	
	Если СпособАннулированияПроводок = Перечисления.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками Тогда
		ЭлементОперацияКорректировкаПроводок.Заголовок = НСтр("ru = 'Реверс: Операция (Международный учет)';
																|en = 'Reverse: Transaction (Financial accounting)'");
	Иначе
		ЭлементОперацияКорректировкаПроводок.Заголовок = НСтр("ru = 'Сторно: Операция (Международный учет)';
																|en = 'Storno: Transaction (Financial accounting)'");
	КонецЕсли;
	
	Если ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
		РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПодвала()
	
	Если Элементы.ГруппаСтраницыПоПланамСчетов.ТекущаяСтраница = Элементы.ГруппаНетРегистрацииКОтражению Тогда
		ВидимостьПредупрежденияИзмененияПроводок = Ложь;
	Иначе
		ВидимостьПредупрежденияИзмененияПроводок = ЗначениеЗаполнено(ПроводкиМогутИзмениться);
	КонецЕсли;
	
	Элементы.ГруппаПроводкиМогутИзмениться.Видимость = ВидимостьПредупрежденияИзмененияПроводок;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПроводкиДокументаПоМеждународномуУчету()
	
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		ЗаписиПоПлануСчетов = МеждународныйСКорреспонденцией.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	Иначе
		ЗаписиПоПлануСчетов = МеждународныйСКорреспонденцией;
	КонецЕсли;
	Возврат ЗаписиПоПлануСчетов.Количество() > 0;

КонецФункции

&НаСервереБезКонтекста
Функция СтатусыОтраженияВУчете(Документ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОтражениеДокументовВУчете.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументовВУчете.Организация КАК Организация,
	|	ОтражениеДокументовВУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВУчете.ИдентификаторСтатуса КАК ИдентификаторСтатуса
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВУчете
	|ГДЕ
	|	ОтражениеДокументовВУчете.Регистратор = &Документ
	|";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Результат = Запрос.Выполнить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат.Выгрузить());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПриоритетыСтатусов()

	ПриоритетыСтатусов = Новый Соответствие;
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров"), 0);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете"), 1);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную"), 2);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную"), 3);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете"), 4);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете"), 5);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете"), 6);
	
	Возврат ПриоритетыСтатусов;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементФормыДляТекущегоПланаСчетов(ЭлементФормы, ЭтаФорма)
	
	Возврат ЭтаФорма.Элементы[ЭлементФормы.Имя + ЭтаФорма.ИдентификаторПланаСчетов];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьСтатус(ПриоритетыСтатусов, ТекущийСтатус, НовыйСтатус)

	ПриоритетТекущегоСтатуса = ПриоритетыСтатусов.Получить(ТекущийСтатус);
	ПриоритетНовогоСтатуса = ПриоритетыСтатусов.Получить(НовыйСтатус);
	Возврат ?(ПриоритетТекущегоСтатуса = Неопределено ИЛИ ПриоритетНовогоСтатуса < ПриоритетТекущегоСтатуса, НовыйСтатус, ТекущийСтатус);

КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеВидовСубконто()

	Для каждого Запись Из МеждународныйСКорреспонденцией Цикл
		ЗаполнитьЗначенияСвойств(Запись, СвойстваСчета(Запись.СчетДт, "Дт"));
		ЗаполнитьЗначенияСвойств(Запись, СвойстваСчета(Запись.СчетКт, "Кт"));
	КонецЦикла;
	
	Для каждого Запись Из МеждународныйБезКорреспонденции Цикл
		ЗаполнитьЗначенияСвойств(Запись, СвойстваСчета(Запись.Счет, ""));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СвойстваСчета(Счет, ВидДвижения)

	Результат = Новый Структура;
	
	МаксКоличествоСубконто = МеждународныйУчетСерверПовтИсп.МаксКоличествоСубконто();
	СвойстваСчета = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет);
	
	Результат.Вставить("Количественный" + ВидДвижения, СвойстваСчета.Количественный); 
	Результат.Вставить("Валютный" + ВидДвижения, СвойстваСчета.Валютный); 
	
	Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
		СвойствоВидСубконто = "ВидСубконто" + ВидДвижения + НомерСубконто;
		СвойствоВидСубконтоПредставление = "ПредставлениеВидСубконто" + ВидДвижения + НомерСубконто;
		СвойствоВидСубконтоНаименование = "ВидСубконто" + НомерСубконто + "Наименование";
		
		Если СвойстваСчета[СвойствоВидСубконтоНаименование] <> Неопределено Тогда
			Результат.Вставить(СвойствоВидСубконто, СвойстваСчета["ВидСубконто" + НомерСубконто]);
			Результат.Вставить(СвойствоВидСубконтоПредставление, "<" + СвойстваСчета[СвойствоВидСубконтоНаименование] + ">");
		Иначе
			Результат.Вставить(СвойствоВидСубконтоПредставление, "");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияВопросПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("АвтоматическоеОтражение", Истина);
		Записать(ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("ЗакрыватьПриЗаписи") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуЗапретаФормированияПроводок()

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Документ.Метаданные()) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,"Организация,Дата");
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата");
		Реквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	ДатаЗапрета = МеждународныйУчетОбщегоНазначения.ДатаЗапретаФормированияПроводок(Реквизиты.Организация);
	Элементы.СоздатьНаОсновании.Видимость = Реквизиты.Дата <= ДатаЗапрета И ЗначениеЗаполнено(ДатаЗапрета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравилаОтраженияВУчете(Команда)
	
	АдресРезультатаПроверки = "";
	НеобходимаНастройкаПравил = ПроверитьНастройкуПравилОтраженияВУчетеСервер(АдресРезультатаПроверки);
	
	Если Не НеобходимаНастройкаПравил Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросОтразитьВУчете", ЭтотОбъект);
		ШаблонСообщения = НСтр("ru = 'Настроены все необходимые правила отражения по плану счетов ""%1"". Попробовать отразить документ в учете?';
								|en = 'All the necessary recording rules for the ""%1"" chart of accounts have been configured. Try to record the document in accounting?'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПланСчетов);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПланСчетов", ПланСчетов);
	ПараметрыФормы.Вставить("Документ", Документ);
	ПараметрыФормы.Вставить("АдресРезультатаПроверки", АдресРезультатаПроверки);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОповещенияФормыНеобходимыеПравилаОтраженияВУчете", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.НеобходимыеПравилаОтражения", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНастройкуПравилОтраженияВУчетеСервер(АдресВоВременномХранилище)
	
	ПараметрыПроверки= Обработки.ОтражениеДокументовВМеждународномУчете.ПараметрыПроверкиПравилОтражения();
	ПараметрыПроверки.ПланСчетов = ПланСчетов;
	ПараметрыПроверки.Документ = Документ;
	РезультатПроверки = Обработки.ОтражениеДокументовВМеждународномУчете.ПроверитьНастройкуПравилОтраженияУчете(ПараметрыПроверки);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РезультатПроверки, УникальныйИдентификатор);
	
	НеобходимаНастройкаПравил = 
		РезультатПроверки.ХозяйственныеОперацииБезПравилОтражения.Количество() 
		Или РезультатПроверки.СчетаБезПравилОтражения.Количество()
		Или РезультатПроверки.ОбъектыУчетаТребующиеНастройки.Количество();
		
	Возврат НеобходимаНастройкаПравил;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияВопросОтразитьВУчете(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = ПараметрыЗаписиПроводок();
		ПараметрыЗаписи.СформироватьПроводкиАвтоматически = Истина;
		ЗаписатьПроводки(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияФормыНеобходимыеПравилаОтраженияВУчете(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОтразитьДокументВМеждународномУчете = Ложь;
	Если ТипЗнч(ПараметрыЗакрытия) = Тип("Структура")
		 И ПараметрыЗакрытия.Свойство("ОтразитьДокументВМеждународномУчете") Тогда
		ОтразитьДокументВМеждународномУчете = ПараметрыЗакрытия.ОтразитьДокументВМеждународномУчете; 
	КонецЕсли;
	
	Если ОтразитьДокументВМеждународномУчете Тогда
		ПараметрыЗаписи = ПараметрыЗаписиПроводок();
		ПараметрыЗаписи.СформироватьПроводкиАвтоматически = Истина;
		ЗаписатьПроводки(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеОтраженияНаСервере()
	
	//@skip-warning
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен");
	Если НЕ ДокументПроведен ИЛИ (ДокументПроведен И НЕ РучнаяКорректировкаПроводок) Тогда
		ПрочитатьПроводки();
	КонецЕсли;
	НастроитьФорму();
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииКлиент(ТаблицаФормы, ДтКт)
	
	ТекущаяСтрока = ТаблицаФормы.ТекущиеДанные;
	НаДату = ТекущаяСтрока.Период;
	СуммыПроводки = РассчитатьСуммы(ПланСчетов, ТекущаяСтрока.Организация, ТекущаяСтрока["ВалютнаяСумма"+ДтКт], ТекущаяСтрока["Валюта"+ДтКт], НаДату);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СуммыПроводки);
	Если ДтКт = "" Тогда
		ЗаполнитьВспомогательныеРеквизитыПроводки(ТекущаяСтрока, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммы(ПланСчетов, Организация, ВалютнаяСумма, Валюта, НаДату)
	
	СуммыПроводки = Новый Структура("Сумма,СуммаПредставления",0,0);
	КоэффициентыПересчета = МеждународныйУчетОбщегоНазначения.ПолучитьКоэффициентыПересчетаВалюты(ПланСчетов, Организация, Валюта, НаДату);
	СуммыПроводки.Сумма = ВалютнаяСумма * КоэффициентыПересчета.ВФункциональнуюВалюту;
	СуммыПроводки.СуммаПредставления = ВалютнаяСумма * КоэффициентыПересчета.ВВалютуПредставления;
	
	Возврат СуммыПроводки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма, Дата)
	
	Возврат МеждународныйУчетОбщегоНазначения.РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма, Дата);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, ДтКт="")
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, ТекущиеДанные, ТекущиеДанные.Организация, ДтКт);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПользовательскиеНастройкиОтчетаАнализПроводок(ИмяОтчета, ЗначенияПользовательскихНастроек)
	
	Возврат МеждународныйУчетПоДаннымФинансовыхРегистровВызовСервера.ПользовательскиеНастройкиАнализаОперативногоУчета(
		ИмяОтчета, ЗначенияПользовательскихНастроек);
	
КонецФункции

&НаСервере
Процедура НастроитьФорму()
	
	ЗаполнитьСтатусыОтраженияПоПланамСчетов();
	
	РегистрацияПоНесколькимПланамСчетов = (СтатусыОтраженияПоПланамСчетов.Количество() > 1);
	ЕстьРегистрацияКОтражению = (СтатусыОтраженияПоПланамСчетов.Количество() > 0);
	
	Если ЕстьРегистрацияКОтражению И Не ЗначениеЗаполнено(ПланСчетов) Тогда
		ПланСчетов = СтатусыОтраженияПоПланамСчетов[0].ПланСчетов;
		ИдентификаторПланаСчетов = СтатусыОтраженияПоПланамСчетов[0].ИдентификаторПланаСчетов
	КонецЕсли;
	
	Если ЕстьРегистрацияКОтражению И РегистрацияПоНесколькимПланамСчетов Тогда
		Элементы.ГруппаСтраницыПоПланамСчетов.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаСтраницыПоПланамСчетов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	УсловноеОформление.Элементы.Очистить();
	Для каждого СтрокаТаблицыСтатусов Из СтатусыОтраженияПоПланамСчетов Цикл
		Если СтрокаТаблицыСтатусов.ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
			СоздатьСтраницуПроводокБезКорреспонденции(СтрокаТаблицыСтатусов);
		Иначе
			СоздатьСтраницуПроводокСКорреспонденцией(СтрокаТаблицыСтатусов);
		КонецЕсли
	КонецЦикла;
	
	Элементы.ПроводкиСКорреспонденцией.Видимость = Ложь;
	Элементы.ПроводкиБезКорреспонденции.Видимость = Ложь;
	Элементы.ГруппаНетРегистрацииКОтражению.Видимость = СтатусыОтраженияПоПланамСчетов.Количество() = 0;
	Если Элементы.ГруппаНетРегистрацииКОтражению.Видимость Тогда
		Элементы.ГруппаСтраницыПоПланамСчетов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыОтраженияПоПланамСчетов()

	СтатусыОтраженияПоПланамСчетов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.ПланСчетов КАК ПланСчетов
	|ПОМЕСТИТЬ ПроводкиСКорреспонденцией
	|ИЗ
	|	&ПроводкиСКорреспонденцией КАК Проводки
	|;
	|
	|//////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.ПланСчетов КАК ПланСчетов
	|ПОМЕСТИТЬ ПроводкиБезКорреспонденции
	|ИЗ
	|	&ПроводкиБезКорреспонденции КАК Проводки
	|;
	|
	|/////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОтражения.ПланСчетов КАК ПланСчетов,
	|	СтатусыОтражения.ПланСчетов.ВариантФормированияПроводок КАК ВариантФормированияПроводок,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыОтражения.ПланСчетов) КАК ПланСчетовПредставление,
	|	СтатусыОтражения.Комментарий КАК Комментарий,
	|	СтатусыОтражения.Статус  КАК СтатусОтражения
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|ГДЕ
	|	СтатусыОтражения.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проводки.ПланСчетов КАК ПланСчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыФормированияПроводок.СКорреспонденцией) КАК ВариантФормированияПроводок,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.ПланСчетов) КАК ПланСчетовПредставление,
	|	"""" КАК Комментарий,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете) КАК СтатусОтражения
	|ИЗ
	|	ПроводкиСКорреспонденцией КАК Проводки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|	ПО
	|		Проводки.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		И СтатусыОтражения.Регистратор = &Регистратор
	|ГДЕ
	|	СтатусыОтражения.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проводки.ПланСчетов КАК ПланСчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыФормированияПроводок.БезКорреспонденции) КАК ВариантФормированияПроводок,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.ПланСчетов) КАК ПланСчетовПредставление,
	|	"""" КАК Комментарий,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете) КАК СтатусОтражения
	|ИЗ
	|	ПроводкиБезКорреспонденции КАК Проводки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|	ПО
	|		Проводки.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		И СтатусыОтражения.Регистратор = &Регистратор
	|ГДЕ
	|	СтатусыОтражения.Регистратор ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОтражения.ПланСчетов";
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Запрос.УстановитьПараметр("ПроводкиСКорреспонденцией", МеждународныйСКорреспонденцией.Выгрузить());
	Запрос.УстановитьПараметр("ПроводкиБезКорреспонденции", МеждународныйБезКорреспонденции.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПриоритетыСтатусов = ПриоритетыСтатусов();
	ТекущийПланСчетов = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекущийПланСчетов <> Выборка.ПланСчетов Тогда
			ТекущийПланСчетов = Выборка.ПланСчетов;
			СтрокаТаблицыСтатусов = СтатусыОтраженияПоПланамСчетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСтатусов, Выборка);
			СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов = СтрЗаменить(СтрокаТаблицыСтатусов.ПланСчетов.УникальныйИдентификатор(), "-", "");
			СтрокаТаблицыСтатусов.Комментарии = Новый ФиксированныйМассив(Новый Массив());
		Иначе
			СтрокаТаблицыСтатусов.СтатусОтражения = ОпределитьСтатус(ПриоритетыСтатусов, СтрокаТаблицыСтатусов.СтатусОтражения, Выборка.СтатусОтражения);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
			Комментарии = Новый Массив(СтрокаТаблицыСтатусов.Комментарии);
			КоличествоКомментариев = Комментарии.Количество();
			ДобавитьКомментарий = Истина;
			
			Для ОбратныйИндекс = 1 По КоличествоКомментариев Цикл
				ТекущийИндекс = КоличествоКомментариев - ОбратныйИндекс;
				Если Комментарии[ТекущийИндекс] = Выборка.Комментарий
				 ИЛИ СтрНайти(Комментарии[ТекущийИндекс], Выборка.Комментарий) > 0 Тогда
					ДобавитьКомментарий = Ложь;
					Прервать;
				ИначеЕсли СтрНайти(Выборка.Комментарий, Комментарии[ТекущийИндекс]) > 0 Тогда
					Комментарии.Удалить(ТекущийИндекс);
				КонецЕсли;
			КонецЦикла;
			
			Если ДобавитьКомментарий Тогда
				Комментарии.Добавить(Выборка.Комментарий);
			КонецЕсли;
			
			СтрокаТаблицыСтатусов.Комментарии = Новый ФиксированныйМассив(Комментарии);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтраницуПроводокСКорреспонденцией(СтрокаТаблицыСтатусов)
	
	ИмяГруппы = ПрефиксИмениСтраницПоПланамСчетов + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
	
	Если Элементы.Найти(ИмяГруппы) = Неопределено Тогда
		
		НоваяСтраница = Элементы.Добавить(
								ИмяГруппы, 
								Тип("ГруппаФормы"),
								Элементы.ГруппаСтраницыПоПланамСчетов);
		НоваяСтраница.Вид = ВидГруппыФормы.Страница;
		НоваяСтраница.Заголовок = СтрокаТаблицыСтатусов.ПланСчетовПредставление;
		
		ОбщегоНазначенияУТ.СкопироватьЭлементыФормыРекурсивно(
			ЭтотОбъект,
			Элементы.ПроводкиСКорреспонденцией,
			НоваяСтраница,
			СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов);
		
	КонецЕсли;
	
	ВалютыМеждународногоУчета = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(СтрокаТаблицыСтатусов.ПланСчетов, Организация);
	ВалютыСовпадают = (ВалютыМеждународногоУчета.Представления = ВалютыМеждународногоУчета.Функциональная);
	
	Если ВалютыСовпадают Тогда
		ЗаголовокСуммы = НСтр("ru = 'Сумма (%1)';
								|en = 'Amount (%1)'");
	Иначе
		ЗаголовокСуммы = НСтр("ru = 'Сумма функц. (%1)';
								|en = 'Funct. currency amount (%1)'");
	КонецЕсли;
	ЭлементФормы = Элементы[Элементы.Сумма.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.Заголовок = СтрШаблон(ЗаголовокСуммы, ВалютыМеждународногоУчета.Функциональная);
	
	ЗаголовокСуммыПредставления = НСтр("ru = 'Сумма предст. (%1)';
										|en = 'Present. amount (%1)'");
	ЭлементФормы = Элементы[Элементы.СуммаПредставления.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.Заголовок  = СтрШаблон(ЗаголовокСуммыПредставления, ВалютыМеждународногоУчета.Представления);
	ЭлементФормы.Видимость = НЕ ВалютыСовпадают;
	
	ОтборПоПлануСчетов = Новый ФиксированнаяСтруктура("ПланСчетов", СтрокаТаблицыСтатусов.ПланСчетов);
	ЭлементФормы = Элементы[Элементы.МеждународныйСКорреспонденцией.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.ОтборСтрок = ОтборПоПлануСчетов;
	
	ЭлементФормы = Элементы[Элементы.ТипПроводки.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.РежимВыбораИзСписка = Истина;
	Для Каждого ЭлементСписка Из Элементы.ТипПроводки.СписокВыбора Цикл
		ЭлементФормы.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	УстановитьКартинкуСтатусаОтраженияСервер(СтрокаТаблицыСтатусов);
	
	УстановитьУстановитьУсловноеОформлениеПроводокСКорреспонденцией(СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтраницуПроводокБезКорреспонденции(СтрокаТаблицыСтатусов)
	
	ИмяГруппы = ПрефиксИмениСтраницПоПланамСчетов + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
	
	Если Элементы.Найти(ИмяГруппы) = Неопределено Тогда
		
		НоваяСтраница = Элементы.Добавить(
								ИмяГруппы, 
								Тип("ГруппаФормы"),
								Элементы.ГруппаСтраницыПоПланамСчетов);
		НоваяСтраница.Вид = ВидГруппыФормы.Страница;
		НоваяСтраница.Заголовок = СтрокаТаблицыСтатусов.ПланСчетовПредставление;
		
		ОбщегоНазначенияУТ.СкопироватьЭлементыФормыРекурсивно(
			ЭтотОбъект,
			Элементы.ПроводкиБезКорреспонденции,
			НоваяСтраница,
			СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов);
		
	КонецЕсли;
	
	ВалютыМеждународногоУчета = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(СтрокаТаблицыСтатусов.ПланСчетов, Организация);
	ВалютыСовпадают = (ВалютыМеждународногоУчета.Представления = ВалютыМеждународногоУчета.Функциональная);
	
	Если ВалютыСовпадают Тогда
		ЗаголовокСуммы = НСтр("ru = 'Сумма Дт (%1)';
								|en = 'Dr amount (%1)'")
	Иначе
		ЗаголовокСуммы = НСтр("ru = 'Сумма функц. Дт (%1)';
								|en = 'Dr funct. currency amount (%1)'")
	КонецЕсли;
	ЭлементФормы = Элементы[Элементы.СуммаДт.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.Заголовок = СтрШаблон(ЗаголовокСуммы, ВалютыМеждународногоУчета.Функциональная);
	
	ЗаголовокСуммыПредставления = НСтр("ru = 'Сумма предст. Дт (%1)';
										|en = 'Dr present. amount (%1)'");
	ЭлементФормы = Элементы[Элементы.СуммаПредставленияДт.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.Заголовок  = СтрШаблон(ЗаголовокСуммыПредставления, ВалютыМеждународногоУчета.Представления);
	ЭлементФормы.Видимость = НЕ ВалютыСовпадают;
	
	Если ВалютыСовпадают Тогда
		ЗаголовокСуммы = НСтр("ru = 'Сумма Кт (%1)';
								|en = 'Cr amount (%1)'")
	Иначе
		ЗаголовокСуммы = НСтр("ru = 'Сумма функц. Кт (%1)';
								|en = 'Cr funct. currency amount (%1)'")
	КонецЕсли;
	ЭлементФормы = Элементы[Элементы.СуммаКт.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.Заголовок = СтрШаблон(ЗаголовокСуммы, ВалютыМеждународногоУчета.Функциональная);
	
	ЗаголовокСуммыПредставления = НСтр("ru = 'Сумма предст. Кт (%1)';
										|en = 'Cr present. amount (%1)'");
	ЭлементФормы = Элементы[Элементы.СуммаПредставленияКт.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.Заголовок  = СтрШаблон(ЗаголовокСуммыПредставления, ВалютыМеждународногоУчета.Представления);
	ЭлементФормы.Видимость = НЕ ВалютыСовпадают;
	
	ОтборПоПлануСчетов = Новый ФиксированнаяСтруктура("ПланСчетов", СтрокаТаблицыСтатусов.ПланСчетов);
	ЭлементФормы = Элементы[Элементы.МеждународныйБезКорреспонденции.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.ОтборСтрок = ОтборПоПлануСчетов;
	
	ЭлементФормы = Элементы[Элементы.МеждународныйБезКорреспонденцииТипПроводки.Имя + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов];
	ЭлементФормы.РежимВыбораИзСписка = Истина;
	Для Каждого ЭлементСписка Из Элементы.МеждународныйБезКорреспонденцииТипПроводки.СписокВыбора Цикл
		ЭлементФормы.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	УстановитьКартинкуСтатусаОтраженияСервер(СтрокаТаблицыСтатусов);
	
	УстановитьУстановитьУсловноеОформлениеПроводокБезКорреспонденции(СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуСтатусаОтраженияСервер(СтатусыОтраженияПоПланамСчетов)
	
	КартинкиСтатусов =  КартинкиСтатусов();
	Элементы[ПрефиксИмениСтраницПоПланамСчетов + СтатусыОтраженияПоПланамСчетов.ИдентификаторПланаСчетов].Картинка 
		= КартинкиСтатусов[СтатусыОтраженияПоПланамСчетов.СтатусОтражения];
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкиСтатусов()
	
	КартинкиСтатусов = Новый Соответствие();
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете"),
		БиблиотекаКартинок.ОжидаетВыполнения);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете"),
		БиблиотекаКартинок.Успешно);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете"),
		БиблиотекаКартинок.ОжидаетВыполнения);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную"),
		БиблиотекаКартинок.РучнаяКорректировка32);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете"), 
		БиблиотекаКартинок.ВосклицательныйЗнакКрасный);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную"), 
		БиблиотекаКартинок.РучнаяКорректировка32);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров"),
		БиблиотекаКартинок.ОжидаетВыполнения);
	
	Возврат КартинкиСтатусов;
	
КонецФункции

&НаСервере
Функция ПутьКДанным(ИмяЭлемента) 
	
	Возврат Элементы[ИмяЭлемента].ПутьКДанным;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПараметрыВыбора(Элемент)
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоПроводкамБезКорреспонденции(ЭтаФорма)
	
	Элементы = ЭтаФорма.Элементы;
	
	ЭтаФорма.ИтогСуммаДт = 0;
	ЭтаФорма.ИтогСуммаКт = 0;
	ЭтаФорма.ИтогСуммаПредставленияДт = 0;
	ЭтаФорма.ИтогСуммаПредставленияКт = 0;
	
	ЗаписиПоПлануСчетов = ЭтаФорма.МеждународныйБезКорреспонденции.НайтиСтроки(Новый Структура("ПланСчетов", ЭтаФорма.ПланСчетов));
	
	Для каждого Запись Из ЗаписиПоПлануСчетов Цикл
		ЭтаФорма.ИтогСуммаДт = ЭтаФорма.ИтогСуммаДт + ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияДебет, Запись.Сумма, 0);
		ЭтаФорма.ИтогСуммаКт = ЭтаФорма.ИтогСуммаКт + ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияКредит, Запись.Сумма, 0);
		ЭтаФорма.ИтогСуммаПредставленияДт = ЭтаФорма.ИтогСуммаПредставленияДт + ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияДебет, Запись.СуммаПредставления, 0);
		ЭтаФорма.ИтогСуммаПредставленияКт = ЭтаФорма.ИтогСуммаПредставленияКт + ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияКредит, Запись.СуммаПредставления, 0);
	КонецЦикла;
	
	ЭлементСуммаДт = ЭлементФормыДляТекущегоПланаСчетов(Элементы.СуммаДт, ЭтаФорма);
	ЭлементСуммаКт = ЭлементФормыДляТекущегоПланаСчетов(Элементы.СуммаКт, ЭтаФорма);
	Если ЭтаФорма.ИтогСуммаДт <> ЭтаФорма.ИтогСуммаКт Тогда
		ЭлементСуммаДт.ЦветТекстаПодвала = ЭтаФорма.ПросроченныеДанныеЦвет;
		ЭлементСуммаКт.ЦветТекстаПодвала = ЭтаФорма.ПросроченныеДанныеЦвет;
	Иначе
		ЭлементСуммаДт.ЦветТекстаПодвала = Новый Цвет();
		ЭлементСуммаКт.ЦветТекстаПодвала = Новый Цвет();
	КонецЕсли;
	
	ЭлементСуммаПредставленияДт = ЭлементФормыДляТекущегоПланаСчетов(Элементы.СуммаПредставленияДт, ЭтаФорма);
	ЭлементСуммаПредставленияКт = ЭлементФормыДляТекущегоПланаСчетов(Элементы.СуммаПредставленияКт, ЭтаФорма);
	Если ЭтаФорма.ИтогСуммаПредставленияДт <> ЭтаФорма.ИтогСуммаПредставленияКт Тогда
		ЭлементСуммаПредставленияДт.ЦветТекстаПодвала = ЭтаФорма.ПросроченныеДанныеЦвет;
		ЭлементСуммаПредставленияКт.ЦветТекстаПодвала = ЭтаФорма.ПросроченныеДанныеЦвет;
	Иначе
		ЭлементСуммаПредставленияДт.ЦветТекстаПодвала = Новый Цвет();
		ЭлементСуммаПредставленияКт.ЦветТекстаПодвала = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизитыПроводокБезКорреспонденции()
	
	Для каждого Запись Из МеждународныйБезКорреспонденции Цикл
		
		ЗаполнитьВспомогательныеРеквизитыПроводки(Запись, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВспомогательныеРеквизитыПроводки(Запись, ЭтаФорма)
	Запись.СуммаДт = ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияДебет, Запись.Сумма, 0);
	Запись.СуммаКт = ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияКредит, Запись.Сумма, 0);
	Запись.СуммаПредставленияДт = ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияДебет, Запись.СуммаПредставления, 0);
	Запись.СуммаПредставленияКт = ?(Запись.ВидДвижения = ЭтаФорма.ВидДвиженияКредит, Запись.СуммаПредставления, 0);
	Запись.ВидДвиженияИндекс = ВидДвиженияИндексКартинки(Запись.ВидДвижения, Запись.Активность, Запись.Сумма, ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидДвиженияИндексКартинки(ВидДвижения, Активность, Сумма, ЭтаФормы)
	
	Если ВидДвижения = ЭтаФормы.ВидДвиженияДебет Тогда
		Возврат ?(Активность, 1, 3);
	ИначеЕсли ВидДвижения = ЭтаФормы.ВидДвиженияКредит Тогда
		Возврат ?(Активность, 2, 4);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоляСортировкиПроводок()
	
	Возврат "ПланСчетов, Сторно Убыв, Период, Организация";
	
КонецФункции

#КонецОбласти
