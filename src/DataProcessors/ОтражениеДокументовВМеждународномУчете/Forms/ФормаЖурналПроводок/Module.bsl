#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПланСчетов = Параметры.ПланСчетов;
	Если Не ЗначениеЗаполнено(ПланСчетов) Тогда
		ПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.ПланСчетовПоУмолчанию();
	КонецЕсли;
	
	ПланСчетовПриИзмененииСервер();
	
	УстановитьЗаголовкиКолонок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПланСчетовПриИзменении(Элемент)
	
	ПланСчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПланСчетовПриИзмененииСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПроводкиСКорреспонденцией, "ПланСчетов", ПланСчетов);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПроводкиБезКорреспонденции, "ПланСчетов", ПланСчетов);
	
	ВариантФормированияПроводок = Неопределено;
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		ВариантФормированияПроводок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланСчетов, "ВариантФормированияПроводок");
	КонецЕсли;
	
	Если ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.СКорреспонденцией Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПроводкиСКорреспонденцией;
	ИначеЕсли ВариантФормированияПроводок = Перечисления.ВариантыФормированияПроводок.БезКорреспонденции Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПроводкиБезКорреспонденции;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыберитеПланСчетов;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПроводкиСКорреспонденцией, "Счет", ОтборСчет, ЗначениеЗаполнено(ОтборСчет), ВидСравненияКомпоновкиДанных.ВИерархии);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПроводкиБезКорреспонденции, "Счет", ОтборСчет, ЗначениеЗаполнено(ОтборСчет), ВидСравненияКомпоновкиДанных.ВИерархии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПроводкиСКорреспонденцией, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПроводкиБезКорреспонденции, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРегистраторПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПроводкиСКорреспонденцией, "Регистратор", ОтборРегистратор, ЗначениеЗаполнено(ОтборРегистратор));
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ПроводкиБезКорреспонденции, "Регистратор", ОтборРегистратор, ЗначениеЗаполнено(ОтборРегистратор));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ОперацияМеждународный") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму("Документ.ОперацияМеждународный.ФормаОбъекта",
					Новый Структура("ПараметрТекущаяСтрока, Ключ", Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Регистратор));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереключитьАктивностьПроводок(Команда)
	
	ТекДокумент = ПолучитьДокумент();
	
	Если ТекДокумент <> Неопределено Тогда
		
		ПереключитьАктивностьПроводокСервер(ТекДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПереключитьАктивностьПроводокСервер(Документ)
	
	//@skip-warning
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьАктивностьПроводкиСКорреспонденцией(Документ);
	ПереключитьАктивностьПроводкиБезКорреспонденции(Документ);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьДокумент()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПроводкиСКорреспонденцией Тогда
		ТекДанные = Элементы.ПроводкиСКорреспонденцией.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПроводкиБезКорреспонденции Тогда
		ТекДанные = Элементы.ПроводкиБезКорреспонденции.ТекущиеДанные;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбран документ';
									|en = 'No document is selected'"));
		Возврат Неопределено;
	КонецЕсли;
		
	
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбран документ';
									|en = 'No document is selected'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекДокумент = ТекДанные.Регистратор;
	Если НЕ ЗначениеЗаполнено(ТекДокумент) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбран документ';
									|en = 'No document is selected'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекДокумент;
	
КонецФункции

&НаСервере
Процедура ПереключитьАктивностьПроводкиСКорреспонденцией(Документ)
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрБухгалтерии.Международный.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Документ);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ПроводкиДокумента = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
		ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
		ПроводкиДокумента.Прочитать();
	
		КоличествоПроводок = ПроводкиДокумента.Количество();
		Если НЕ (КоличествоПроводок = 0) Тогда
			
			// Определяем текущую активность проводок по первой проводке
			ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;
	
			// Инвертируем текущую активность проводок
			ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
			ПроводкиДокумента.Записать();
	
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Элементы.ПроводкиСКорреспонденцией.Обновить();
	
КонецПроцедуры


&НаСервере
Процедура ПереключитьАктивностьПроводкиБезКорреспонденции(Документ)
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрБухгалтерии.МеждународныйБезКорреспонденции.НаборЗаписей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Документ);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ПроводкиДокумента = РегистрыБухгалтерии.МеждународныйБезКорреспонденции.СоздатьНаборЗаписей();
		ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
		ПроводкиДокумента.Прочитать();
	
		КоличествоПроводок = ПроводкиДокумента.Количество();
		Если КоличествоПроводок <> 0 Тогда
			
			// Определяем текущую активность проводок по первой проводке
			ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;
	
			// Инвертируем текущую активность проводок
			ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
			ПроводкиДокумента.Записать();
	
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Элементы.ПроводкиБезКорреспонденции.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Регистратор.Заголовок = 
			Элементы.Регистратор.Заголовок + ", " + НСтр("ru = 'Организация';
														|en = 'Company'");
		Элементы.ПроводкиБезКорреспонденцииРегистратор.Заголовок = 
			Элементы.ПроводкиБезКорреспонденцииРегистратор.Заголовок + ", " + НСтр("ru = 'Организация';
																					|en = 'Company'");
	КонецЕсли;
	
	МеждународныйУчетОбщегоНазначения.УстановитьЗаголовкиПодразделения(Элементы.ПодразделениеДт, НСтр("ru = 'Дт';
																										|en = 'Dr'"));
	МеждународныйУчетОбщегоНазначения.УстановитьЗаголовкиПодразделения(Элементы.ПодразделениеКт, НСтр("ru = 'Кт';
																										|en = 'Cr'"));
	МеждународныйУчетОбщегоНазначения.УстановитьЗаголовкиПодразделения(Элементы.Подразделение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ПроводкиСКорреспонденцией

#Область ТекстОбычнаяПроводка
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТипПроводки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.ТипПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обычная';
																|en = 'Standard'"));
#КонецОбласти

#Область ШаблонПроводки
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблонПроводки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораСоответствий = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораСоответствий.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.СоответствиеСчетаДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.СоответствиеСчетаКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.СоответствиеОборотов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
#КонецОбласти

#Область СоответствияСчетовИОборотов
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоответствиеСчетаДт.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.СоответствиеСчетаДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.СоответствиеСчетаКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоответствиеСчетаКт.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.СоответствиеСчетаКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.СоответствиеСчетаДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоответствиеОборотов.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиСКорреспонденцией.СоответствиеОборотов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
#КонецОбласти

#КонецОбласти

#Область ПроводкиБезКорреспонденции

#Область ТекстОбычнаяПроводка
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроводкиБезКорреспонденцииТипПроводки.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиБезКорреспонденции.ТипПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обычная';
																|en = 'Standard'"));
#КонецОбласти

#Область ШаблонПроводки
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроводкиБезКорреспонденцииШаблонПроводки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиБезКорреспонденции.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораСоответствий = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораСоответствий.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиБезКорреспонденции.СоответствиеСчетаДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиБезКорреспонденции.СоответствиеСчетаКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиБезКорреспонденции.СоответствиеОборотов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
#КонецОбласти

#Область СоответствияСчетовИОборотов
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроводкиБезКорреспонденцииСоответствиеСчета.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиБезКорреспонденции.СоответствиеСчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроводкиБезКорреспонденцииСоответствиеОборотов.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкиБезКорреспонденции.СоответствиеОборотов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
#КонецОбласти

#КонецОбласти

КонецПроцедуры

#КонецОбласти
