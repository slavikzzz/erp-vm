#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьТекстЗапросовДинамическихСписков();
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	СписокДетально.Параметры.УстановитьЗначениеПараметра("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ВнеоборотныеАктивыЛокализация.ЗаполнитьСоответствиеДокументовЖурналаОС(СоответствиеДокументов);
	
	Если Не Параметры.Свойство("КлючНазначенияФормы")
		Или ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Обработки.ЖурналДокументовОС2_4.КлючНазначенияФормыПоУмолчанию();
		КлючНастроек = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
		КлючНастроек = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборыФормыСписка") Тогда
		
		ФормыОткрытаПоГиперссылке = Истина;
		ОтборТипыДокументов = Параметры.ОтборыФормыСписка.ОтборТипыДокументов;
		ОтборХозяйственныеОперации = Параметры.ОтборыФормыСписка.ОтборХозяйственныеОперации;
		
		Если КлючНастроек = "ПомощникПерехода" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список,
				"СозданДляПереходаНаВерсию24",
				1,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДетально,
				"СозданДляПереходаНаВерсию24",
				1,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина);
				
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Документы по ОС, созданные для перехода на учет внеоборотных активов версии 2.4';
							|en = 'Fixed assets documents created for migration to fixed asset accounting 2.4'");
			
			Элементы.ОтборОрганизацияАмортизация.Видимость = Ложь;
			Элементы.ОтборОсновноеСредствоАмортизация.Видимость = Ложь;
			Элементы.СписокАмортизация.Видимость = Ложь;
			Элементы.ГруппаПользовательскиеНастройкиСписокАмортизация.Видимость = Ложь;
			Элементы.КОформлению.Видимость = Ложь;
			
		КонецЕсли; 
		
	ИначеЕсли Параметры.Свойство("ОбъектЭксплуатации") Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументыДетально;

		ФормыОткрытаПоГиперссылке = Истина;
		
		ОтборОсновноеСредство = Параметры.ОбъектЭксплуатации;

		ТипОС = Перечисления.ТипыОС.ОбъектЭксплуатации;
		Если ЗначениеЗаполнено(ОтборОсновноеСредство) Тогда
			ТипОС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборОсновноеСредство, "ТипОС");
		КонецЕсли;

		Если ТипОС = Перечисления.ТипыОС.КомпонентАмортизации
			ИЛИ ТипОС = Перечисления.ТипыОС.Узел Тогда
			
			ОСВладелец = Справочники.ОбъектыЭксплуатации.ВладелецУзлаКомпонентаАмортизации(ОтборОсновноеСредство);
		Иначе
			ЗаполнитьОтборПоВладельцуИУзлам();
		КонецЕсли;
		
		Элементы.Список.Видимость = Ложь;
		Элементы.ОтборОрганизация.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьОтбор.Видимость = Ложь;
		Элементы.ОтборОсновноеСредство.Видимость = Ложь;
		Элементы.ОтборОсновноеСредствоАмортизация.Видимость = Ложь;
		Элементы.СписокДетальноОсновноеСредство.Видимость = ЗначениеЗаполнено(ОСВладелец) ИЛИ ОтборПоВладельцуИУзлам.Количество() <> 0;
		Элементы.ГруппаПользовательскиеНастройкиСписок.Видимость = Ложь;
		Элементы.КОформлению.Видимость = Ложь;
		
		УстановитьТекстЗапросовДинамическихСписков();
		
		АвтоЗаголовок = Ложь;
		
		Если ТипОС = Перечисления.ТипыОС.Узел Тогда
			Заголовок = СтрШаблон(НСтр("ru = 'Документы по узлу %1 и его владельцу';
										|en = 'Documents by the %1 node and its owner'"), Строка(ОтборОсновноеСредство));
		ИначеЕсли ТипОС = Перечисления.ТипыОС.КомпонентАмортизации Тогда
			Заголовок = СтрШаблон(НСтр("ru = 'Документы по компоненту амортизации %1 и его владельцу';
										|en = 'Documents by the %1 depreciation component and its owner'"), Строка(ОтборОсновноеСредство));
		ИначеЕсли ОтборПоВладельцуИУзлам.Количество() <> 0 Тогда
			Заголовок = СтрШаблон(НСтр("ru = 'Документы по основному средству %1 и его узлам и компонентам';
										|en = 'Documents of %1 fixed asset and its nodes and components'"), Строка(ОтборОсновноеСредство));
		Иначе
			Заголовок = СтрШаблон(НСтр("ru = 'Документы по основному средству %1';
										|en = '%1 fixed asset documents'"), Строка(ОтборОсновноеСредство));
		КонецЕсли;
		
	Иначе
		ВосстановитьНастройки();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.СписокГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.Список,
		ХозяйственныеОперацииИДокументы);
		
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.СписокАмортизация,
		ХозяйственныеОперацииИДокументыАмортизация);
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, 
		ХозяйственныеОперацииИДокументы, 
		ОтборТипыДокументов, 
		ОтборХозяйственныеОперации);
		
	Если НЕ НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо() Тогда
		Элементы.СписокУУ.Видимость = Ложь;
		Элементы.СписокБУ.Видимость = Ложь;
		Элементы.СписокДетальноОтражатьВУпрУчете.Видимость = Ложь;
		Элементы.СписокДетальноОтражатьВРеглУчете.Видимость = Ложь;
	КонецЕсли;
	
	ИспользуемыеТипыДокументов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументы Цикл
		ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;
	Для каждого СтрокаДокумент Из СоответствиеДокументов Цикл
		ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка." + СтрокаДокумент.СтарыйДокументИмя));
	КонецЦикла;
	ИспользуемыеТипыДокументовАмортизация = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументыАмортизация Цикл
		ИспользуемыеТипыДокументовАмортизация.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "Список";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокДетальноКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокДетально";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументовАмортизация);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокАмортизацияКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокАмортизация";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	НачатьОбновлениеДанныхВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	Если ИмяСобытия = "Запись_Файл" Тогда
		ОбновитьСписки();
	КонецЕсли; 
	
	Если ИмяСобытия = "Запись_ПринятиеКУчетуОС2_4"
		ИЛИ ИмяСобытия = "СписаниеОС2_4" Тогда
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
	НачатьОбновлениеДанныхВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОсновноеСредствоПриИзменении(Элемент)
	
	ОтборОсновноеСредствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
	ПараметрыФормы,,,,,Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПринятиеКУчетуОС" Тогда
		ОткрытьФорму("Документ.ПринятиеКУчетуОС2_4.Форма.ПринятиеКУчетуОС");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#СписаниеОС" Тогда
		ОткрытьФорму("Документ.СписаниеОС2_4.Форма.СписаниеОСПриВыбытииТМЦ");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуСписка(Строки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДетально

&НаКлиенте
Процедура СписокДетальноПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокДетальноГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокДетальноГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокДетальноПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуСписка(Строки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокАмортизация

&НаКлиенте
Процедура СписокАмортизацияПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокАмортизацияГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокАмортизацияГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Список

&НаКлиенте
Процедура СписокУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок);
	ОбновитьДанныеКогдаФормаСтанетАктивной();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок);
	ОбновитьДанныеКогдаФормаСтанетАктивной();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок);
	ОбновитьДанныеКогдаФормаСтанетАктивной();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ОткрытьПроводкиМеждународногоУчета(Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОбновитьДанныеКогдаФормаСтанетАктивной();

КонецПроцедуры

#КонецОбласти

#Область СписокДетально

&НаКлиенте
Процедура СписокДетальноОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокДетально, Заголовок);
	ОбновитьДанныеКогдаФормаСтанетАктивной();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокДетально, Заголовок);
	ОбновитьДанныеКогдаФормаСтанетАктивной();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокДетально);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокДетальноИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокДетально, Заголовок);
	ОбновитьДанныеКогдаФормаСтанетАктивной();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДетальноПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.СписокДетально.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ОткрытьПроводкиМеждународногоУчета(Элементы.СписокДетально.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СписокАмортизация

&НаКлиенте
Процедура СписокАмортизацияОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокАмортизация, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументыВФономЗадании(
		Элементы.СписокАмортизация, "Документ.АмортизацияОС2_4.Форма.РасчетАмортизации");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокАмортизация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокАмортизацияИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокАмортизация, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАмортизацияПроводкиМеждународногоУчета(Команда)
	
	//++ НЕ УТКА
	Если Элементы.СписокАмортизация.ТекущиеДанные <> Неопределено Тогда
		ВнеоборотныеАктивыКлиент.ОткрытьПроводкиМеждународногоУчета(Элементы.СписокАмортизация.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	//-- НЕ УТКА

	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, ОтборыДляСозданияДокумента());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы,
		КлючФормы, КлючНазначенияИспользования, ОтборыДляСозданияДокумента());
		
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийСписок(ЭтаФорма));
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, ТекущийСписок(ЭтаФорма), Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ТекущийСписок(ЭтаФорма));
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ДоступныКомандыЭДО = Истина;
	ЭтоКомандаТекущиеДелаЭДО = СтрНайти(Команда.Имя, "ТекущиеДелаЭДО");
	ЭтоКомандаПроизвольныйДокумент = СтрНайти(Команда.Имя, "ПроизвольныйДокумент");
	Если Не ЭтоКомандаТекущиеДелаЭДО и Не ЭтоКомандаПроизвольныйДокумент Тогда
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			ТекущийДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элементы.Список.ТекущиеДанные, "Ссылка");
			Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
				РезультатыПроверки = ЭлектронноеВзаимодействиеУТВызовСервера.ПроверитьНаличиеПараметровЭДПоИсточнику(ТекущийДокумент);
				ДоступныКомандыЭДО = РезультатыПроверки.Получить("ЕстьЭДО");
				
				Если РезультатыПроверки.Получить("ЕстьЭДО") Тогда
					Если РезультатыПроверки.Получить("Направление") = "Входящий" Тогда
						ОбменСКонтрагентамиУТКлиент.ИзменитьДоступностьКомандыПерезаполнить(ЭтотОбъект, Истина);
					Иначе
						ОбменСКонтрагентамиУТКлиент.ИзменитьДоступностьКомандыПерезаполнить(ЭтотОбъект, Ложь);				
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДоступныКомандыЭДО = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДоступныКомандыЭДО Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для данного типа документов отправка/получение по ЭДО не предусмотрено.';
										|en = 'Sending/receiving via EDI is not available for this document type.'"));
		Возврат;
	КонецЕсли;	
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЖурналДокументовОС2_4.Форма.ДокументыПоОС", КлючНазначенияИспользования);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
	
		СписокИнтервал = Настройки.СписокИнтервал;
		СписокДетальноИнтервал = Настройки.СписокДетальноИнтервал;
		СписокАмортизацияИнтервал = Настройки.СписокАмортизацияИнтервал;
		ОтборОрганизация = Настройки.ОтборОрганизация;
		ОтборОсновноеСредство = Настройки.ОтборОсновноеСредство;
		
		Настройки.Свойство("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
		Настройки.Свойство("ОтборТипыДокументов", ОтборТипыДокументов);
		
		ЗаполнитьОтборПоВладельцуИУзлам();
		
		УстановитьТекстЗапросовДинамическихСписков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"СписокИнтервал,СписокДетальноИнтервал,СписокАмортизацияИнтервал,
		|ОтборОрганизация,
		|ОтборОсновноеСредство,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовОС2_4.Форма.ДокументыПоОС", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	ТаблицаЗначенийДоступно = ИнициализироватьХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы.Выгрузить(),
		ОтборХозяйственныеОперации,
		ОтборТипыДокументов,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаЗначенийДоступно);
	
	//
	ТаблицаЗначенийДоступно = ИнициализироватьХозяйственныеОперацииИДокументыАмортизации(
		ХозяйственныеОперацииИДокументыАмортизация.Выгрузить(),
		ОтборХозяйственныеОперацииАмортизация,
		ОтборТипыДокументовАмортизация,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументыАмортизация.Загрузить(ТаблицаЗначенийДоступно);
	
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	//++ НЕ УТКА
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.ОтражениеДокументовВМеждународномУчете.Команды.ПроводкиДокументаОперативногоУчета) Тогда
		Элементы.СписокПроводкиМеждународногоУчета.Видимость = Ложь;
		Элементы.СписокДетальноПроводкиМеждународногоУчета.Видимость = Ложь;
		Элементы.СписокАмортизацияПроводкиМеждународногоУчета.Видимость = Ложь;
	КонецЕсли;
	//-- НЕ УТКА
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ПолноеИмяДокумента") Тогда
						
			Отбор = Новый Структура();
			Отбор.Вставить("ПолноеИмяДокумента", Параметры.СтруктураБыстрогоОтбора.ПолноеИмяДокумента);
			
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отбор = Истина;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов()
	
	ОбщегоНазначенияУТ.ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(), 
		КлючНазначенияФормыПоУмолчанию(), 
		НСтр("ru = 'все';
			|en = 'all'"));
	
	НастроитьКнопкиУправленияДокументами();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()
	
	ОтборТипыДокументовДляОтбора = ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументов);
	ОтборХозяйственныеОперацииДляОтбора = ДополнитьХозОперацииДляОтбора(ОтборХозяйственныеОперации);
	
	#Область Список
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперацииДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ДополнительнаяЗапись",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ ЗначениеЗаполнено(ОтборОрганизация));
		
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокИнтервал.ДатаНачала);
	
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания),
			КонецДня(СписокИнтервал.ДатаОкончания),
			КонецДня(Дата(3999, 12, 31))));
			
	Элементы.СписокУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания);
	#КонецОбласти
	
	#Область СписокДетально
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперацииДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДетально,
		"ДополнительнаяЗапись",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ ЗначениеЗаполнено(ОтборОрганизация));
		
	Если ЗначениеЗаполнено(ОСВладелец) Тогда
		
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(ОтборОсновноеСредство);
		СписокОтбора.Добавить(ОСВладелец);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДетально,
			"ОсновноеСредство",
			СписокОтбора,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина);
			
	ИначеЕсли ОтборПоВладельцуИУзлам.Количество() <> 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДетально,
			"ОсновноеСредство",
			ОтборПоВладельцуИУзлам,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина);
				
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДетально,
			"ОсновноеСредство",
			ОтборОсновноеСредство,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(ОтборОсновноеСредство));
		
	КонецЕсли;
		
	СписокДетально.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокДетальноИнтервал.ДатаНачала);
	
	СписокДетально.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаОкончания),
			КонецДня(СписокДетальноИнтервал.ДатаОкончания),
			КонецДня(Дата(3999, 12, 31))));
			
	Элементы.СписокДетальноУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокДетальноИнтервал.ДатаОкончания);
	#КонецОбласти
	
	#Область СписокАмортизация
	ОтборТипыДокументовДляОтбора = ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументовАмортизация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокАмортизация,
		"ТипСсылки",
		ОтборТипыДокументовДляОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокАмортизация,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	СписокАмортизация.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокАмортизацияИнтервал.ДатаНачала);
	
	СписокАмортизация.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаОкончания),
			КонецДня(СписокАмортизацияИнтервал.ДатаОкончания),
			КонецДня(Дата(3999, 12, 31))));
			
	Элементы.СписокАмортизацияУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокАмортизацияИнтервал.ДатаОкончания);
	#КонецОбласти

КонецПроцедуры

&НаСервере
Функция ДополнитьТипыДокументовДляОтбора(ОтборТипыДокументовСписка)

	Если СоответствиеДокументов.Количество() = 0 Тогда
		Возврат ОтборТипыДокументовСписка;
	КонецЕсли; 
	
	ОтборТипыДокументовКопия = ОтборТипыДокументовСписка.Скопировать();

	Для каждого ЭлементКоллекции Из ОтборТипыДокументовСписка Цикл
		СтруктураПоиска = Новый Структура("НовыйДокумент", ЭлементКоллекции.Значение);
		СписокСтрок = СоответствиеДокументов.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ОтборТипыДокументовКопия.Добавить(ДанныеСтроки.СтарыйДокумент);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ОтборТипыДокументовКопия;
	
КонецФункции

&НаСервере
Функция ДополнитьХозОперацииДляОтбора(ОтборХозяйственныеОперации)

	ОтборХозяйственныеОперацииКопия = ОтборХозяйственныеОперации.Скопировать();

	Если ОтборХозяйственныеОперацииКопия.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов) <> Неопределено Тогда
		ОтборХозяйственныеОперацииКопия.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	КонецЕсли; 
	Если ОтборХозяйственныеОперацииКопия.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав) <> Неопределено Тогда
		ОтборХозяйственныеОперацииКопия.Добавить(Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
	КонецЕсли;
	Если ОтборХозяйственныеОперацииКопия.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияУслугПоАренде) <> Неопределено Тогда
		ОтборХозяйственныеОперацииКопия.Добавить(Перечисления.ХозяйственныеОперации.РеализацияУслугПоАренде);
	КонецЕсли;
	
	Возврат ОтборХозяйственныеОперацииКопия;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапросовДинамическихСписков()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеестрДокументовПереопределяемый.Ссылка,
	|	РеестрДокументовПереопределяемый.Организация,
	|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
	|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация,
	|	РеестрДокументовПереопределяемый.Подразделение,
	|	РеестрДокументовПереопределяемый.Ответственный,
	|	РеестрДокументовПереопределяемый.Дополнительно,
	|	РеестрДокументовПереопределяемый.Комментарий,
	|	РеестрДокументовПереопределяемый.Проведен,
	|	РеестрДокументовПереопределяемый.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА РеестрДокументовПереопределяемый.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка,
	|	РеестрДокументовПереопределяемый.ДополнительнаяЗапись,
	|	РеестрДокументовПереопределяемый.ТипСсылки,
	|	ЕСТЬNULL(ДокументыПоОСПереопределяемый.ОтражатьВУпрУчете, ЛОЖЬ) КАК ОтражатьВУпрУчете,
	|	ЕСТЬNULL(ДокументыПоОСПереопределяемый.ОтражатьВРеглУчете, ЛОЖЬ) КАК ОтражатьВРеглУчете,
	|	&СтатусПроверки КАК СтатусПроверки,
	|	ВЫРАЗИТЬ(&ИндикаторПроверки КАК БУЛЕВО) КАК ИндикаторПроверки,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументовПереопределяемый.Ссылка) КАК ТипСсылкиДокумента,
	|	ВЫБОР
	|		КОГДА ДокументыПоОСПереопределяемый.ОтражатьВУпрУчете
	|				И РеестрДокументовПереопределяемый.Проведен
	|			ТОГДА 1
	|		КОГДА ДокументыПоОСПереопределяемый.ОтражатьВУпрУчете
	|				И НЕ РеестрДокументовПереопределяемый.Проведен
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтражатьВУпрУчетеКартинка,
	|	ВЫБОР
	|		КОГДА ДокументыПоОСПереопределяемый.ОтражатьВРеглУчете
	|				И РеестрДокументовПереопределяемый.Проведен
	|			ТОГДА 1
	|		КОГДА ДокументыПоОСПереопределяемый.ОтражатьВРеглУчете
	|				И НЕ РеестрДокументовПереопределяемый.Проведен
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтражатьВРеглУчетеКартинка,
	|	ВЫБОР
	|		КОГДА РеестрДокументовПереопределяемый.ДатаДокументаИБ < &ДатаНачалаУчета
	|				И (РеестрДокументовПереопределяемый.Ссылка ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
	|					ИЛИ РеестрДокументовПереопределяемый.Ссылка ССЫЛКА Документ.ИзменениеПараметровОС2_4)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СозданДляПереходаНаВерсию24,
	|	ВЫБОР
	|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы,
	|	ЕСТЬNULL(ДокументыПоОСПереопределяемый.СобытиеОС, ЗНАЧЕНИЕ(Справочник.СобытияОС.ПустаяСсылка)) КАК СобытиеОС
	|
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоОС КАК ДокументыПоОСПереопределяемый
	|		ПО (ДокументыПоОСПереопределяемый.ТипСсылки = РеестрДокументовПереопределяемый.ТипСсылки)
	|			И (ДокументыПоОСПереопределяемый.ХозяйственнаяОперация = РеестрДокументовПереопределяемый.ХозяйственнаяОперация)
	|			И (ДокументыПоОСПереопределяемый.НомерЗаписи = 0)
	|			И (ДокументыПоОСПереопределяемый.ДополнительнаяЗапись = ЛОЖЬ)
	|			И (ДокументыПоОСПереопределяемый.Ссылка = РеестрДокументовПереопределяемый.Ссылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайловПереопределяемый
	|	ПО РеестрДокументовПереопределяемый.Ссылка = НаличиеФайловПереопределяемый.ОбъектСФайлами
	|{ГДЕ
	|	РеестрДокументовПереопределяемый.Ссылка.* КАК Ссылка,
	|	РеестрДокументовПереопределяемый.Организация.* КАК Организация,
	|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
	|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументовПереопределяемый.Подразделение.* КАК Подразделение,
	|	РеестрДокументовПереопределяемый.Ответственный.* КАК Ответственный,
	|	РеестрДокументовПереопределяемый.Дополнительно КАК Дополнительно,
	|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
	|	РеестрДокументовПереопределяемый.Проведен КАК Проведен,
	|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
	|	(РеестрДокументовПереопределяемый.ДатаДокументаИБ МЕЖДУ &НачалоПериода И &КонецПериода)
	|	}";
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаЖурналаОС(ТекстЗапроса);
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Если ОтборОсновноеСредство.Пустая() Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РеестрДокументовПереопределяемый.ТипСсылки КАК ТипСсылки,
		|	ТИПЗНАЧЕНИЯ(РеестрДокументовПереопределяемый.Ссылка) КАК ТипСсылкиДокумента,
		|	РеестрДокументовПереопределяемый.Ссылка КАК Ссылка,
		|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
		|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
		|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
		|	РеестрДокументовПереопределяемый.Проведен КАК Проведен,
		|	РеестрДокументовПереопределяемый.Организация КАК Организация,
		|	ЕСТЬNULL(АмортизацияОС2_4Переопределяемый.НомерПакета, 0) КАК НомерПакета,
		|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
		|	РеестрДокументовПереопределяемый.Ответственный КАК Ответственный,
		|	ВЫБОР
		|		КОГДА РеестрДокументовПереопределяемый.Проведен
		|			ТОГДА 0
		|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК НестандартнаяКартинка,
		|	ВЫБОР
		|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьФайлы
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АмортизацияОС2_4 КАК АмортизацияОС2_4Переопределяемый
		|		ПО (АмортизацияОС2_4Переопределяемый.Ссылка = РеестрДокументовПереопределяемый.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайловПереопределяемый
		|		ПО РеестрДокументовПереопределяемый.Ссылка = НаличиеФайловПереопределяемый.ОбъектСФайлами
		|{ГДЕ
		|	РеестрДокументовПереопределяемый.Ссылка.* КАК Ссылка,
		|	РеестрДокументовПереопределяемый.Организация.* КАК Организация,
		|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
		|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
		|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	РеестрДокументовПереопределяемый.Подразделение.* КАК Подразделение,
		|	РеестрДокументовПереопределяемый.Ответственный.* КАК Ответственный,
		|	РеестрДокументовПереопределяемый.Дополнительно КАК Дополнительно,
		|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
		|	РеестрДокументовПереопределяемый.Проведен КАК Проведен,
		|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
		|	(РеестрДокументовПереопределяемый.ДатаДокументаИБ >= &НачалоПериода
		|		И РеестрДокументовПереопределяемый.ДатаДокументаИБ <= &КонецПериода)}";
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокАмортизация, СвойстваСписка);
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РеестрДокументовПереопределяемый.ТипСсылки КАК ТипСсылки,
		|	ТИПЗНАЧЕНИЯ(РеестрДокументовПереопределяемый.Ссылка) КАК ТипСсылкиДокумента,
		|	РеестрДокументовПереопределяемый.Ссылка КАК Ссылка,
		|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
		|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
		|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
		|	РеестрДокументовПереопределяемый.Проведен КАК Проведен,
		|	РеестрДокументовПереопределяемый.Организация КАК Организация,
		|	ЕСТЬNULL(АмортизацияОС2_4Переопределяемый.НомерПакета, 0) КАК НомерПакета,
		|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
		|	РеестрДокументовПереопределяемый.Ответственный КАК Ответственный,
		|	ВЫБОР
		|		КОГДА РеестрДокументовПереопределяемый.Проведен
		|			ТОГДА 0
		|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК НестандартнаяКартинка,
		|	ВЫБОР
		|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьФайлы
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АмортизацияОС2_4 КАК АмортизацияОС2_4Переопределяемый
		|		ПО (АмортизацияОС2_4Переопределяемый.Ссылка = РеестрДокументовПереопределяемый.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайловПереопределяемый
		|		ПО РеестрДокументовПереопределяемый.Ссылка = НаличиеФайловПереопределяемый.ОбъектСФайлами
		|ГДЕ
		|	РеестрДокументовПереопределяемый.Ссылка В
		|			(ВЫБРАТЬ
		|				РегистрАмортизацияОС.Регистратор
		|			ИЗ
		|				РегистрНакопления.АмортизацияОС КАК РегистрАмортизацияОС
		|			ГДЕ
		|				РегистрАмортизацияОС.ОсновноеСредство = &ОсновноеСредство)
		|{ГДЕ
		|	РеестрДокументовПереопределяемый.Ссылка.* КАК Ссылка,
		|	РеестрДокументовПереопределяемый.Организация.* КАК Организация,
		|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
		|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
		|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	РеестрДокументовПереопределяемый.Подразделение.* КАК Подразделение,
		|	РеестрДокументовПереопределяемый.Ответственный.* КАК Ответственный,
		|	РеестрДокументовПереопределяемый.Дополнительно КАК Дополнительно,
		|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
		|	РеестрДокументовПереопределяемый.Проведен КАК Проведен,
		|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
		|	(РеестрДокументовПереопределяемый.ДатаДокументаИБ >= &НачалоПериода
		|		И РеестрДокументовПереопределяемый.ДатаДокументаИБ <= &КонецПериода)}";
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокАмортизация, СвойстваСписка);
		
		СписокАмортизация.Параметры.УстановитьЗначениеПараметра("ОсновноеСредство", ОтборОсновноеСредство);
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ОтборОсновноеСредствоПриИзмененииНаСервере()

	ЗаполнитьОтборПоВладельцуИУзлам();
	УстановитьТекстЗапросовДинамическихСписков();
	ПриИзмененииОтбора();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыОС";
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокУстановитьПометкуУдаленияКонтекст";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);

	//
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокДетальноГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокДетальноГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокДетальноСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокДетальноСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокДетальноИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокДетальноИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокДетальноПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокДетальноПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокДетальноОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокДетальноОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокДетальноУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокДетальноУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.ПрефиксЭлементов                                    = "СписокДетально";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
	//
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтаФорма;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокАмортизацияГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокАмортизацияГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокАмортизацияСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокАмортизацияСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокАмортизацияИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокАмортизацияИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокАмортизацияПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокАмортизацияПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокАмортизацияОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокАмортизацияОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокАмортизацияУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокАмортизацияУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.ПрефиксЭлементов                                    = "СписокАмортизация";
	СтруктураПараметров.ИмяТаблицыХозяйственныхОперацийИДокументов          = "ХозяйственныеОперацииИДокументыАмортизация";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "СписокДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДетально.Дата", "СписокДетальноДата");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов)
	
	ТаблицаХозяйственныеОперацииИДокументы = ПолучитьИзВременногоХранилища(АдресДоступныхХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(
		ТаблицаХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
	ПриИзмененииОтбора();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписок(Форма)

	Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаДокументыДетально Тогда
		Возврат Форма.Элементы.СписокДетально;
	ИначеЕсли Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаАмортизация Тогда
		Возврат Форма.Элементы.СписокАмортизация;
	Иначе
		Возврат Форма.Элементы.Список;
	КонецЕсли; 

КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь)
	
	ВнеоборотныеАктивыСлужебный.ИнициализироватьХозяйственныеОперацииИДокументыВнеоборотныхАктивов(ХозяйственныеОперацииИДокументы);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности") Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'реализация услуг и прочих активов';
													|en = 'Customer invoice — Services and Assets'");
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25") Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.РеализацияУслугПоАренде;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
		Строка.КлючНазначенияИспользования	= КлючНазначенияИспользования;
		Строка.ЗаголовокРабочегоМеста		= НСтр("ru = 'реализация услуг и прочих активов';
													|en = 'Customer invoice — Services and Assets'");
		Строка.ДобавитьКнопкуСоздать		= Истина;
	КонецЕсли;
	
	#Область ПринятиеКУчетуОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'принятие к учету ОС';
												|en = 'Fixed assets — Initial recognition'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'принятие к учету ОС';
												|en = 'Fixed assets — Initial recognition'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	#КонецОбласти
	
	#Область ПринятиеКУчетуУзловКомпонентовАмортизации
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуУзловКомпонентовАмортизации;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПринятиеКУчетуУзловКомпонентовАмортизации";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'принятие к учету узлов и компонентов амортизации';
												|en = 'recognition of sub-assets and components of depreciation'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	#КонецОбласти
	
	#Область СписаниеОС
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Списание ОС';
												|en = 'Dispose fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеОСЧастичное;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Частичное списание ОС';
												|en = 'Partial fixed assets disposal'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеУзловКомпонентовАмортизации;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "СписаниеОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Полное списание узлов и компонентов';
												|en = 'Complete write-off of sub-assets and components'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	#КонецОбласти
	
	#Область ПеремещениеОС
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'перемещение ОС';
												|en = 'transfer fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеУзлов;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПеремещениеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ПеремещениеУзлов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'перемещение ОС-узлов';
												|en = 'transfer fixed asset sub-assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	#КонецОбласти
	
	#Область Аренда
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗаключениеДоговораАренды;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ЗаключениеДоговораАренды.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ЗаключениеДоговораАренды";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'заключение договоров аренды';
												|en = 'rental contracts signing'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПоступлениеАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПоступлениеАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'поступление арендованных ОС';
												|en = 'receive leased assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВыбытиеАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВыбытиеАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПрекращениеДоговораАренды;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПрекращениеДоговораАренды.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ДосрочноеПрекращениеДоговораАренды;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПрекращениеДоговораАренды.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВыкупАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВыкупАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ДосрочныйВыкупАрендованныхОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВыкупАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеУсловийДоговораАренды;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеУсловийДоговораАренды.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеУсловийПередачиВАренду;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеУсловийПередачиВАренду.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаОСВАренду;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПередачаОСВАренду2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'передача ОС в аренду';
												|en = 'provide assets to lessee'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратОСИзАренды;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВозвратОСИзАренды2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'возврат ОС из аренды';
												|en = 'return assets from lessee'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	#КонецОбласти
	
	#Область Прочее
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеПараметровОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеПараметровОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'изменение параметров ОС';
												|en = 'adjust fixed asset financial details'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.МодернизацияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.МодернизацияОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'модернизация ОС';
												|en = 'Fixed assets — Cost additions'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПереоценкаОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПереоценкаОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'переоценка ОС';
												|en = 'revaluate fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПодготовкаКПередачеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПодготовкаКПередачеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'подготовка к передаче ОС';
												|en = 'preparing for sale of fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.НаработкаОбъектовЭксплуатации;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.НаработкаОбъектовЭксплуатации.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'наработка ОС';
												|en = 'Fixed assets running time'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РазукомплектацияОСПолная;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РазукомплектацияОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'разукомплектация ОС';
												|en = 'split fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РазукомплектацияОСЧастичная;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РазукомплектацияОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'разукомплектация ОС';
												|en = 'split fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РазукомплектацияОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РазукомплектацияОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'разукомплектация ОС';
												|en = 'split fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОбъединениеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ОбъединениеОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПрисоединениеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ОбъединениеОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.КорректировкаСтоимостиИАмортизацииОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОприходованиеПриВыбытииОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'оприходование материалов при выбытии ОС';
												|en = 'record the materials as received upon fixed assets retirement'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	#КонецОбласти
	
	#Область ВводОстатков
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков основных средств';
												|en = 'Enter opening balance of fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков вложений во внеоборотные активы';
												|en = 'OB entry: investments in fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков арендованных ОС (на балансе)';
												|en = 'OB entry: leased fixed assets (on balance sheet)'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков переданных в аренду предметов лизинга на балансе';
												|en = 'OB entry: financial lease items on the balance sheet'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков предметов лизинга за балансом';
												|en = 'OB entry: financial lease items off the balance sheet'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков переданных в аренду основных средств';
												|en = 'OB entry: leased out fixed assets'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСЗаБалансом;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков арендованных ОС (за балансом)';
												|en = 'OB entry: leased fixed assets (off balance sheet)'");
	Строка.ДобавитьКнопкуСоздать        = Ложь;

	#КонецОбласти
	
	#Область Обесценение
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОбесценениеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ОбесценениеВНА.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Обесценение внеоборотных активов';
												|en = 'Fixed asset impairment'");
	Строка.ДобавитьКнопкуСоздать        = Истина;

	#КонецОбласти
	
	ВнеоборотныеАктивыЛокализация.ДополнитьХозяйственныеОперацииИДокументыОС(ХозяйственныеОперацииИДокументы, КлючНазначенияИспользования);
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНазначенияИспользования);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьХозяйственныеОперацииИДокументыАмортизации(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования)
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.АмортизацияОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.АмортизацияОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "АмортизацияОС";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Амортизация';
												|en = 'Depreciation'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНастроек);
								
	Возврат ТаблицаЗначенийДоступно;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеКогдаФормаСтанетАктивной()

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной", 0.8, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной()
	
	Если ВводДоступен() Тогда
		
		ОбновитьСписки();
		НачатьОбновлениеДанныхВФоне();
		
	Иначе
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписки()

	Если Элементы.Список.Видимость Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Если Элементы.СписокДетально.Видимость Тогда
		Элементы.СписокДетально.Обновить();
	КонецЕсли;

	Если Элементы.СписокАмортизация.Видимость Тогда
		Элементы.СписокАмортизация.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтборыДляСозданияДокумента()
	
	СтруктураОтборы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураОтборы.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументыДетально
		И ЗначениеЗаполнено(ОтборОсновноеСредство) Тогда
		СтруктураОтборы.Вставить("ОсновноеСредство", ОтборОсновноеСредство);
	КонецЕсли;
	
	Возврат СтруктураОтборы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтборПоВладельцуИУзлам()

	ОтборПоВладельцуИУзлам.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ОтборОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	УзлыКомпонентыАмортизации.УзелКомпонент КАК УзелКомпонент
	|ИЗ
	|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|ГДЕ
	|	УзлыКомпонентыАмортизации.ОсновноеСредство = &ОсновноеСредство
	|	И УзлыКомпонентыАмортизации.Активность
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОтборОсновноеСредство);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоВладельцуИУзлам.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("УзелКомпонент"));
	ОтборПоВладельцуИУзлам.Добавить(ОтборОсновноеСредство);
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ДанныеПоШтрихКоду = ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());	
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Состояние(НСтр("ru = 'Выполняется поиск документа по штрихкоду...';
					|en = 'Searching for the document by barcode...'"));
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтаФорма, "Список");
	
КонецПроцедуры

#КонецОбласти

#Область ГиперссылкаКОформлению

&НаКлиенте
Процедура НачатьОбновлениеДанныхВФоне()
	
	ДлительнаяОперация = НачатьОбновлениеДанныхВФонеНаСервере();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновлениеДанныхВФонеЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НачатьОбновлениеДанныхВФонеНаСервере()

	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Организация", ОтборОрганизация);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения, "Обработки.ЖурналДокументовОС2_4.ДанныеРабочегоМеста", ПараметрыФункции);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ТекстИдетОбновлениеДанных = НСтр("ru = 'К оформлению: <идет обновление данных>';
										|en = 'To register: <updating data>'");
		КОформлению = Новый ФорматированнаяСтрока(ТекстИдетОбновлениеДанных);
	КонецЕсли;

	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОбновлениеДанныхВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
			
	ОбновлениеДанныхВФонеЗавершениеНаСервере(Результат.АдресРезультата);
	
КонецПроцедуры 

&НаСервере
Процедура ОбновлениеДанныхВФонеЗавершениеНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);

	Если ЗначениеЗаполнено(Результат) Тогда
		КОформлению = Новый ФорматированнаяСтрока(Результат);
		Элементы.КОформлению.Видимость = Элементы.Список.Видимость;
		Элементы.КОформлениюСтраницаДетально.Видимость = Истина;
	Иначе
		Элементы.КОформлению.Видимость = Ложь;
		Элементы.КОформлениюСтраницаДетально.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
