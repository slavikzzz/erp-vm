#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьТипРассылаемогоДокумента(Параметры);
	ЗаполнитьВидЭлектроннойПочты();
	ЗаполнитьРассылаемыеДокументы(Параметры);
	СформироватьЗаголовокФормы();
	
	Если Не РассылкаДокументов.ДоступнаОтправкаПисем() Тогда
		ВызватьИсключение НСтр("ru = 'Отправка писем недоступна';
								|en = 'Sending emails is not available'");
	КонецЕсли;
	
	НастроитьВидимостьЭлементовФормы();
	НастроитьУсловноеОформление();
	
	ЗаполнитьУчетнуюЗапись();
	ЗаполнитьСообщение(Параметры);
	
	УстановитьВидимостьРезультатовОтправки();

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормы = ОбщегоНазначения.ОбщийМодуль("РассылкаПоШаблонамФормы");
		МодульРассылкаПоШаблонамФормы.ФормаРассылкиПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		
		МодульРассылкаОригиналовПервичныхДокументов = ОбщегоНазначения.ОбщийМодуль("РассылкаОригиналовПервичныхДокументов");
		ИспользоватьУчетОригиналовПервичныхДокументов = МодульРассылкаОригиналовПервичныхДокументов.ИспользуетсяУчетОригиналовПервичныхДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ПроверятьУчетныеЗаписиПриОткрытии Тогда
		НачатьПроверкуУчетнойЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана учетная запись электронной почты';
								|en = 'Email account is not specified'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "УчетнаяЗапись", , Отказ);
	КонецЕсли;
	
	Если Не ПолучателиЗаполнены(ЭтотОбъект) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнены получатели писем';
								|en = 'Email recipients are not filled'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Получатели", , Отказ);
	КонецЕсли;
	
	Если ВыбранныеПечатныеФормы().Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны печатные формы';
								|en = 'Print forms are not selected'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ПечатныеФормы", , Отказ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормы = ОбщегоНазначения.ОбщийМодуль("РассылкаПоШаблонамФормы");
		МодульРассылкаПоШаблонамФормы.ФормаРассылкиОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ФизическиеЛица" Тогда
		ЗаполнитьАдресЭлектроннойПочты(Источник);
	КонецЕсли;

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаПоШаблонамФормыКлиент");
		МодульРассылкаПоШаблонамФормыКлиент.ФормаРассылкиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЭлектроннойПочтыПриИзменении(Элемент)
	ВидЭлектроннойПочтыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если УчетнаяЗапись = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;

	УчетнаяЗапись = ВыбранноеЗначение;
	ЗаполнитьПредставлениеОтправителя(ЭтотОбъект);
	
КонецПроцедуры

// ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов

&НаКлиенте
Процедура Подключаемый_РассылкаПоШаблонамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаПоШаблонамФормыКлиент");
		МодульРассылкаПоШаблонамФормыКлиент.ФормаРассылкиВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РассылкаПоШаблонамПриАктивизацииСтроки(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаПоШаблонамФормыКлиент");
		МодульРассылкаПоШаблонамФормыКлиент.ФормаРассылкиПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РассылкаПоШаблонамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаПоШаблонамФормыКлиент");
		МодульРассылкаПоШаблонамФормыКлиент.ФормаРассылкиПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РассылкаПоШаблонамПередНачаломИзменения(Элемент, Отказ)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаПоШаблонамФормыКлиент");
		МодульРассылкаПоШаблонамФормыКлиент.ФормаРассылкиПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РассылкаПоШаблонамПередУдалением(Элемент, Отказ)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаПоШаблонамФормыКлиент");
		МодульРассылкаПоШаблонамФормыКлиент.ФормаРассылкиПередУдалением(ЭтотОбъект, Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РассылкаПоШаблонамВызовСервера(Параметры, ИмяПроцедуры) Экспорт
	РассылкаПоШаблонамВызовСервера(Параметры, ИмяПроцедуры);
КонецПроцедуры

&НаСервере
Процедура РассылкаПоШаблонамВызовСервера(Параметры, ИмяПроцедуры)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормы = ОбщегоНазначения.ОбщийМодуль("РассылкаПоШаблонамФормы");
		МодульРассылкаПоШаблонамФормы.ФормаРассылкиВызовСервера(ЭтотОбъект, Параметры, ИмяПроцедуры);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьРезультатыОтправки(Элемент, Поле, ВыбраннаяСтрока, СтандартнаяОбработка);
	ОткрытьФормуПолучателя(Элемент, Поле, ВыбраннаяСтрока, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПослеУдаления(Элемент)
	УдаленыПолучатели = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПредупреждениеОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	МассивОбъектов = МассивОбъектовКПечати();
	Для Каждого ПечатнаяФорма Из ВыбранныеПечатныеФормы() Цикл
		ПараметрыПечати = ПечатнаяФорма.ДополнительныеПараметры;
		Если ЗначениеЗаполнено(ПечатнаяФорма.ОбработчикПолученияДанных) Тогда
			Если Не УдаленыПолучатели Тогда
				ПараметрыПечати.Вставить("ДанныеПечати", 
					АдресДанныхПечатиБезОтбора(ПечатнаяФорма.ОбработчикПолученияДанных, МассивОбъектов));
			Иначе
				ПараметрыПечати.Вставить("ДанныеПечати", 
					АдресДанныхПечатиСОтбором(ПечатнаяФорма.ОбработчикПолученияДанных));
			КонецЕсли;
		КонецЕсли;
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ПечатнаяФорма.МенеджерПечати, 
			ПечатнаяФорма.Идентификатор, МассивОбъектов, ЭтотОбъект, ПараметрыПечати);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПредупреждениеОтправки();
	
КонецПроцедуры

// ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов

&НаКлиенте
Процедура Подключаемый_РассылкаПоШаблонамВыполнитьКоманду(Команда)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаПоШаблонамФормыКлиент");
		МодульРассылкаПоШаблонамФормыКлиент.ФормаРассылкиВыполнитьКоманду(ЭтотОбъект, Команда);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция МассивОбъектовКПечати()
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(Получатели, "РассылаемыйДокумент", Истина);
КонецФункции

&НаСервереБезКонтекста
Функция АдресДанныхПечатиБезОтбора(Обработчик, МассивОбъектов)
	Возврат ПоместитьВоВременноеХранилище(ДанныеПечатиБезОтбора(Обработчик, МассивОбъектов));
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеПечатиБезОтбора(Обработчик, МассивОбъектов)
	Возврат Обработки.РассылкаПечатныхФорм.ДанныеПечатиБезОтбора(Обработчик, МассивОбъектов);
КонецФункции

&НаСервере
Функция АдресДанныхПечатиСОтбором(Обработчик)
	
	МассивОбъектов = Получатели.Выгрузить().ВыгрузитьКолонку("РассылаемыйДокумент");
	ВсеДанныеПечати = ДанныеПечатиБезОтбора(Обработчик, МассивОбъектов);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ВсеДанныеПечати, "РассылаемыйДокумент, ФизическоеЛицо");

	ДанныеПечати = Новый Массив;
	Для Каждого СтрокаДанных Из ВсеДанныеПечати Цикл
		ОтборСтрок = Новый Структура("РассылаемыйДокумент, ФизическоеЛицо");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДанных);
		Если Получатели.НайтиСтроки(ОтборСтрок).Количество() > 0 Тогда
			ДанныеПечати.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеПечати);
	
КонецФункции

&НаСервере
Процедура УстановитьТипРассылаемогоДокумента(Параметры)
	
	Если Параметры.РассылаемыеДокументы = Неопределено Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Рассылка доступна по команде из формы или списка следующих документов:
				 |%1';
				 |en = 'Distribution is available by command from the form or the list of the following documents:
				 |%1'"),
			СтрСоединить(Метаданные.ОпределяемыеТипы.РассылаемыйДокумент.Тип.Типы(), Символы.ПС));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(Метаданные.Обработки.РассылкаПечатныхФорм.ПолноеИмя(), 
		"РассылаемыеДокументы", Параметры.РассылаемыеДокументы, Новый ОписаниеТипов("Массив"));
	
	Для Каждого ЭлементМассива Из Параметры.РассылаемыеДокументы Цикл
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(Метаданные.Обработки.РассылкаПечатныхФорм.ПолноеИмя(), 
			"РассылаемыеДокументы", ЭлементМассива, Метаданные.ОпределяемыеТипы.РассылаемыйДокумент.Тип);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.Проверить(Параметры.РассылаемыеДокументы.Количество() > 0, 
		НСтр("ru = 'Массив рассылаемых документов не заполнен';
			|en = 'The distributed documents array is not filled in'"), Метаданные.Обработки.РассылкаПечатныхФорм.ПолноеИмя());

	ТипРассылаемогоДокумента = Параметры.РассылаемыеДокументы[0];

	ЗаполнитьПечатныеФормы(Параметры);

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	Если Параметры.Свойство("ЗаголовокФормы") И ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Параметры.ЗаголовокФормы;
		Возврат;
	КонецЕсли;
	
	ШаблонЗаголовка = НСтр("ru = 'Рассылка формы «%1» %2';
							|en = 'Form ""%1"" distribution %2'");
	Если ВыбранныеПечатныеФормы().Количество() > 1 Тогда
		ШаблонЗаголовка = НСтр("ru = 'Рассылка %2';
								|en = 'Distribution %2'");
	КонецЕсли;
	
	ПредставлениеДокумента = СтрШаблон(НСтр("ru = 'документа «%1»';
											|en = 'of document ""%1""'"), РассылаемыеДокументы[0]);
	Если РассылаемыеДокументы.Количество() > 1 Тогда
		ПредставлениеДокумента = СтрШаблон(НСтр("ru = 'документов «%1»';
												|en = 'of documents ""%1""'"), ТипЗнч(РассылаемыеДокументы[0].Значение));
	КонецЕсли;

	Заголовок = СтрШаблон(ШаблонЗаголовка, ВыбранныеПечатныеФормы()[0].Представление, ПредставлениеДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассылаемыеДокументы(Параметры)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РассылаемыеДокументы, Параметры.РассылаемыеДокументы);
	Элементы.ПолучателиРассылаемыйДокумент.Видимость = РассылаемыеДокументы.Количество() > 1;
	
	ЗаполнитьПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатныеФормы(Параметры)
	
	ПечатныеФормы.Очистить();
	Если ТипРассылаемогоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(
		ТипРассылаемогоДокумента.Метаданные().ОсновнаяФормаОбъекта.ПолноеИмя());
	
	НаложитьУсловияВидимостиКомандПечати(КомандыПечати, Параметры.РассылаемыеДокументы);
	
	ОбщегоНазначенияКлиентСервер.Проверить(КомандыПечати.Количество() > 0, 
		СтрШаблон(НСтр("ru = 'У документа типа «%1» не обнаружено команд печати.';
						|en = 'Print commands not found for document type ""%1"".'"), ТипЗнч(ТипРассылаемогоДокумента)));
	
	Если ЗначениеЗаполнено(Параметры.ПечатныеФормы) Тогда
		ЗаполнитьЗаданнымиПечатнымиФормами(Параметры.ПечатныеФормы, КомандыПечати);
		Элементы.ПечатныеФормыГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		ДобавитьПечатнуюФорму(КомандаПечати);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НаложитьУсловияВидимостиКомандПечати(КомандыПечати, РассылаемыеДокументы)
	
	УдалитьКоманды = Новый Массив;
	Для Каждого Команда Из КомандыПечати Цикл
		Видимость = Истина;
		Для Каждого Объект Из РассылаемыеДокументы Цикл
			Если ТипЗнч(Команда.УсловияВидимости) = Тип("Массив")
				И Не УсловияВидимостиКомандыПечатиВыполняются(Команда.УсловияВидимости, Объект) Тогда
				Видимость = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не Видимость Тогда
			УдалитьКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Команда Из УдалитьКоманды Цикл
		КомандыПечати.Удалить(Команда);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УсловияВидимостиКомандыПечатиВыполняются(Условия, РассылаемыйДокумент)
	
	Если Условия.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИменаУсловий = ОбщегоНазначения.ВыгрузитьКолонку(Условия, "Реквизит", Истина);
	
	ИменаРеквизитов = Новый Массив;
	Для Каждого ИмяРеквизита Из ИменаУсловий Цикл
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, РассылаемыйДокумент.Метаданные()) Тогда
			ИменаРеквизитов.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаРеквизитов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РассылаемыйДокумент, ИменаРеквизитов, Истина);
	
	Для Каждого Условие Из Условия Цикл
		ИмяРеквизита = Условие.Реквизит;
		Если Не ЗначенияРеквизитов.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		УсловиеВыполняется = Истина;
		Если Условие.ВидСравнения = ВидСравнения.Равно
			Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			УсловиеВыполняется = ЗначенияРеквизитов[ИмяРеквизита] = Условие.Значение;
		ИначеЕсли Условие.ВидСравнения = ВидСравнения.Больше
			Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
			УсловиеВыполняется = ЗначенияРеквизитов[ИмяРеквизита] > Условие.Значение;
		ИначеЕсли Условие.ВидСравнения = ВидСравнения.БольшеИлиРавно
			Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			УсловиеВыполняется = ЗначенияРеквизитов[ИмяРеквизита] >= Условие.Значение;
		ИначеЕсли Условие.ВидСравнения = ВидСравнения.Меньше
			Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
			УсловиеВыполняется = ЗначенияРеквизитов[ИмяРеквизита] < Условие.Значение;
		ИначеЕсли Условие.ВидСравнения = ВидСравнения.МеньшеИлиРавно
			Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			УсловиеВыполняется = ЗначенияРеквизитов[ИмяРеквизита] <= Условие.Значение;
		ИначеЕсли Условие.ВидСравнения = ВидСравнения.НеРавно
			Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			УсловиеВыполняется = ЗначенияРеквизитов[ИмяРеквизита] <> Условие.Значение;
		ИначеЕсли Условие.ВидСравнения = ВидСравнения.ВСписке
			Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Если ТипЗнч(Условие.Значение) = Тип("СписокЗначений") Тогда
				УсловиеВыполняется = Условие.Значение.НайтиПоЗначению(ЗначенияРеквизитов[ИмяРеквизита]) <> Неопределено;
			Иначе // Массив
				УсловиеВыполняется = Условие.Значение.Найти(ЗначенияРеквизитов[ИмяРеквизита]) <> Неопределено;
			КонецЕсли;
		ИначеЕсли Условие.ВидСравнения = ВидСравнения.НеВСписке
			Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			Если ТипЗнч(Условие.Значение) = Тип("СписокЗначений") Тогда
				УсловиеВыполняется = Условие.Значение.НайтиПоЗначению(ЗначенияРеквизитов[ИмяРеквизита]) = Неопределено;
			Иначе // Массив
				УсловиеВыполняется = Условие.Значение.Найти(ЗначенияРеквизитов[ИмяРеквизита]) = Неопределено;
			КонецЕсли;
		ИначеЕсли Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
			УсловиеВыполняется = ЗначениеЗаполнено(ЗначенияРеквизитов[ИмяРеквизита]);
		ИначеЕсли Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			УсловиеВыполняется = Не ЗначениеЗаполнено(ЗначенияРеквизитов[ИмяРеквизита]);
		КонецЕсли;
		Если Не УсловиеВыполняется Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаданнымиПечатнымиФормами(ЗаданныеПечатныеФормы, КомандыПечати)
	
	Для Каждого ПечатнаяФорма Из РассылкаДокументов.ПечатныеФормыКомандыРассылки(ЗаданныеПечатныеФормы) Цикл
		НайденныеСтроки = КомандыПечати.НайтиСтроки(Новый Структура("Идентификатор", ПечатнаяФорма.Идентификатор));
		ОбщегоНазначенияКлиентСервер.Проверить(НайденныеСтроки.Количество() > 0, 
			СтрШаблон(НСтр("ru = 'Не найдена печатная форма %1 у документа типа «%2».
						   |Проверьте идентификаторы печатных форм, подключаемых к рассылке документов.';
						   |en = 'Cannot find print form %1 for document type ""%2"".
						   |Check the IDs of the print forms attached to the documents distribution.'"),
				ПечатнаяФорма.Идентификатор, ТипЗнч(ТипРассылаемогоДокумента)), "РассылкаДокументов");
		КомандаПечати = НайденныеСтроки[0];
		ДобавитьПечатнуюФорму(КомандаПечати, ПечатнаяФорма);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПечатнуюФорму(КомандаПечати, ДополнительноеОписание = Неопределено)

	Если КомандаПечати.СразуНаПринтер Или КомандаПечати.СкрытаФункциональнымиОпциями Тогда
		Возврат;
	КонецЕсли;

	НоваяСтрока = ПечатныеФормы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КомандаПечати);
	Если ДополнительноеОписание <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительноеОписание);
	КонецЕсли;
	НоваяСтрока.Использовать = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателей()
	
	Получатели.Очистить();
	Если Параметры.Свойство("Получатели") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Параметры.Получатели, Получатели);
	Иначе
		ЗагрузитьПолучателейИзДокументов();
	КонецЕсли;
	ЗаполнитьАдресаЭлектроннойПочты();
	
	ОбновитьРезультатыОтправки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеПолучателей(СтрокиПолучателей)
	
	Для Каждого СтрокаПолучателей Из СтрокиПолучателей Цикл
		СтрокаПолучателей.Представление = ПредставлениеАдресата(
			Строка(СтрокаПолучателей.ФизическоеЛицо), СтрокаПолучателей.Адрес);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПолучателейИзДокументов()
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		Метаданные.ОпределяемыеТипы.ДокументПоФизическомуЛицу.Тип.СодержитТип(ТипЗнч(ТипРассылаемогоДокумента)),
		СтрШаблон(
			НСтр("ru = 'Документ типа «%1» не подключен к составу документов, см. ОпределяемыйТип.%2.';
				|en = 'The document type ""%1"" is not attached to the set of documents, see ОпределяемыйТип.%2.'"),
			ТипЗнч(ТипРассылаемогоДокумента), Метаданные.ОпределяемыеТипы.ДокументПоФизическомуЛицу.Имя));
	
	ФизическиеЛицаДокументы = ЗарплатаКадрыСоставДокументов.ФизическиеЛицаДокументов(РассылаемыеДокументы.ВыгрузитьЗначения());
	ФизическиеЛицаДокументы.Колонки.Документ.Имя = "РассылаемыйДокумент";
	Получатели.Загрузить(ФизическиеЛицаДокументы);
	Получатели.Сортировать("РассылаемыйДокумент, ФизическоеЛицо");
	
	ОбщегоНазначенияКлиентСервер.Проверить(Получатели.Количество() > 0, НСтр("ru = 'В документе не выбраны сотрудники.';
																			|en = 'Employees are not selected in the document.'"));
	
КонецПроцедуры

#Область ВидЭлектроннойПочты

&НаСервере
Процедура ЗаполнитьВидЭлектроннойПочты()

	ВидыЭлектроннойПочты = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(
		Справочники.ФизическиеЛица.ПустаяСсылка(), Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Если ВидыЭлектроннойПочты.Количество() = 1 Тогда
		ВидЭлектроннойПочты = ВидыЭлектроннойПочты[0].Ссылка;
		Элементы.ВидЭлектроннойПочты.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ВидЭлектроннойПочты.Видимость = Истина;
	Элементы.ВидЭлектроннойПочты.СписокВыбора.ЗагрузитьЗначения(ВидыЭлектроннойПочты.ВыгрузитьКолонку("Ссылка"));
	
	Если Элементы.ВидЭлектроннойПочты.СписокВыбора.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Рассылка невозможна, пока не существует ни одного вида электронной почты физических лиц.';
								|en = 'Distribution is not available until there are no individual email types.'");
	КонецЕсли;

	СохраненноеЗначение = ЗначениеПоТипуДокумента(ТипРассылаемогоДокумента, Элементы.ВидЭлектроннойПочты.Имя);
	Если СохраненноеЗначение = Неопределено Тогда
		СохраненноеЗначение = ЗначениеПоВсемДокументам(Элементы.ВидЭлектроннойПочты.Имя);
	КонецЕсли;
	
	Если СохраненноеЗначение <> Неопределено Тогда
		Если Элементы.ВидЭлектроннойПочты.СписокВыбора.НайтиПоЗначению(СохраненноеЗначение) <> Неопределено Тогда
			ВидЭлектроннойПочты = СохраненноеЗначение;
		КонецЕсли;
	КонецЕсли;

	Если СохраненноеЗначение = Неопределено Тогда
		ВидЭлектроннойПочты = Элементы.ВидЭлектроннойПочты.СписокВыбора[0].Значение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидЭлектроннойПочтыПриИзмененииНаСервере()
	
	ЗаполнитьАдресаЭлектроннойПочты();
	
	СохранитьЗначениеПоТипуДокумента(ТипРассылаемогоДокумента, Элементы.ВидЭлектроннойПочты.Имя, ВидЭлектроннойПочты);
	СохранитьЗначениеПоВсемДокументам(Элементы.ВидЭлектроннойПочты.Имя, ВидЭлектроннойПочты);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьАдресЭлектроннойПочты(ФизическоеЛицо)
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;

	НайденныеСтроки = Получатели.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКИ = АдресаЭлектроннойПочты(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо), ВидЭлектроннойПочты);
	ЗаполнитьАдресаЭлектроннойПочтыВСтрокахПолучателей(НайденныеСтроки, ТаблицаКИ);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаЭлектроннойПочты()

	ТаблицаКИ = АдресаЭлектроннойПочты(
		Получатели.Выгрузить(, "ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо"), ВидЭлектроннойПочты);
	
	ЗаполнитьАдресаЭлектроннойПочтыВСтрокахПолучателей(Получатели, ТаблицаКИ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресаЭлектроннойПочты(ФизическиеЛица, ВидПочты)
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ФизическиеЛица, , ВидПочты);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаКИ, "Объект");
	Возврат ТаблицаКИ;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьАдресаЭлектроннойПочтыВСтрокахПолучателей(СтрокиПолучателей, ТаблицаКИ)
	
	Для Каждого СтрокаТаблицы Из СтрокиПолучателей Цикл
		СтрокаТаблицы.Адрес = Неопределено;
		НайденныеСтроки = ТаблицаКИ.НайтиСтроки(Новый Структура("Объект", СтрокаТаблицы.ФизическоеЛицо));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы.Адрес = НайденныеСтроки[0].Представление;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПредставлениеПолучателей(СтрокиПолучателей);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуДокументов()
	
	ДанныеФормСЭЦП = ДанныеПечатныхФормСЭЦП();
	Если ДанныеФормСЭЦП.ФайлыНаПодпись.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыводимыеФайлы", ДанныеФормСЭЦП.ВыводимыеФайлы);
		ДополнительныеПараметры.Вставить("ПечатныеФормыОбъектов", ДанныеФормСЭЦП.ФайлыНаПодпись);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодписанияПечатныхФорм", ЭтотОбъект, ДополнительныеПараметры);
		
		КадровыйЭДОКлиент.ПодписатьФайлы(
			ДанныеФормСЭЦП.ФайлыНаПодпись, Оповещение, ЭтотОбъект, ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.Подписать"));
		
	Иначе
		ОтправитьДокументыНаКлиенте(ДанныеФормСЭЦП.ВыводимыеФайлы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДокументыНаКлиенте(ВыводимыеФайлы)
	ОчиститьРезультатыОтправки();
	
	ДлительнаяОперация = ДлительнаяОперацияОтправкиДокументов(ВыводимыеФайлы);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет отправка документов';
											|en = 'Sending documents'");
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Отправлено';
																|en = 'Sent'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Отправка документов';
															|en = 'Send documents'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьОтправкуДокументов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодписанияПечатныхФорм(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого ОписаниеФайла Из ДополнительныеПараметры.ПечатныеФормыОбъектов Цикл
			ДополнительныеПараметры.ВыводимыеФайлы.Добавить(ОписаниеФайла.ФайлОбъекта);
		КонецЦикла;
		
		ОтправитьДокументыНаКлиенте(ДополнительныеПараметры.ВыводимыеФайлы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияОтправкиДокументов(ВыводимыеФайлы)
	
	ДляОтправки = Новый Структура;
	ДляОтправки.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ДляОтправки.Вставить("ШаблонПисьма", Новый Структура("Тема, Текст", ТемаПисьма, ТекстПисьма));

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормы = ОбщегоНазначения.ОбщийМодуль("РассылкаПоШаблонамФормы");
		МодульРассылкаПоШаблонамФормы.ФормаРассылкиПриЗаполненииПараметровДляОтправки(ЭтотОбъект, ДляОтправки);
	КонецЕсли;
	
	ДляПечати = Новый Структура;
	ДляПечати.Вставить("ПечатныеФормы", ВыбранныеПечатныеФормы());
	ДляПечати.Вставить("УпаковатьВАрхив", УпаковатьВАрхив);
	ДляПечати.Вставить("ВыводимыеФайлы", ВыводимыеФайлы);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Обработки." + Метаданные.Обработки.РассылкаПечатныхФорм.Имя + ".ОтправитьДокументыПолучателям", 
		Получатели.Выгрузить(), ДляПечати, ДляОтправки);
		
КонецФункции

&НаСервере
Функция ВыбранныеПечатныеФормы()
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ПечатныеФормы.Выгрузить(Новый Структура("Использовать", Истина)));
КонецФункции

&НаКлиенте
Процедура ЗавершитьОтправкуДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	СводныйРезультат = РезультатЗавершенияОтправкиДокументовНаСервере(Результат.АдресРезультата);
	
	СообщитьРезультатыОтправки(СводныйРезультат);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонамФормыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаПоШаблонамФормыКлиент");
		МодульРассылкаПоШаблонамФормыКлиент.ФормаРассылкиПриУспешномЗавершенииОтправки(ЭтотОбъект, Результат, ДополнительныеПараметры);
	КонецЕсли;

	Если ИспользоватьУчетОригиналовПервичныхДокументов Тогда
		УстановитьСостояниеПечатныхФормПриУспешномЗавершенииОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьРезультатыОтправки(Результат)
	
	ТекстСообщения = "";
	
	Если Результат.Отправлено = 0 Тогда
		Если Результат.Обработано > 0 Тогда
			Если Результат.Обработано = 1 Тогда
				НакопитьСообщение(ТекстСообщения, НСтр("ru = 'Не удалось отправить сообщение.';
														|en = 'Cannot send the message.'"));
			Иначе
				НакопитьСообщение(ТекстСообщения, НСтр("ru = 'Не удалось отправить ни одного сообщения.';
														|en = 'Could not send any messages.'"));
			КонецЕсли;
			Если Результат.БезАдресов > 0 Тогда
				Если Результат.Ошибок = Результат.БезАдресов Тогда 
					НакопитьСообщение(ТекстСообщения, НСтр("ru = 'У получателей не заполнены адреса электронной почты.';
															|en = 'Email address for recipients are not filled in.'"));
				КонецЕсли;
			КонецЕсли;
			Если Результат.Ошибок = Результат.Обработано Тогда
				НакопитьСообщение(ТекстСообщения, НСтр("ru = 'Проверьте настройки учетной записи.';
														|en = 'Check account settings.'"));
			КонецЕсли;
		КонецЕсли;
		ПоказатьСообщение(ТекстСообщения, НСтр("ru = 'Не отправлено';
												|en = 'Not sent'"), БиблиотекаКартинок.Предупреждение32);
		Возврат;
	КонецЕсли;
	
	Если Результат.Отправлено = Результат.Обработано - Результат.БезАдресов Тогда
		Если Результат.Отправлено = 1 Тогда
			НакопитьСообщение(ТекстСообщения, НСтр("ru = 'Сообщение успешно отправлено.';
													|en = 'Message successfully sent.'"));
		Иначе
			НакопитьСообщение(ТекстСообщения, 
				СтрШаблон(НСтр("ru = 'Все сообщения (%1) успешно отправлены.';
								|en = 'All messages (%1) have been successfully sent.'"), Результат.Отправлено));
		КонецЕсли;
		ПоказатьСообщение(ТекстСообщения, НСтр("ru = 'Успешно отправлено';
												|en = 'Successfully sent'"), БиблиотекаКартинок.Успешно32);
		Возврат;
	КонецЕсли;

	НакопитьСообщение(ТекстСообщения, 
		СтрШаблон(НСтр("ru = 'Не удалось отправить %1 из %2.';
						|en = 'Could not send %1 of %2.'"), 
			Результат.Ошибок, Результат.Обработано - Результат.БезАдресов));

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		НакопитьСообщение(ТекстСообщения, 
			СтрШаблон(НСтр("ru = 'Причины отправки можно увидеть по клику на строке в колонке «%1».';
							|en = 'The reasons for sending can be seen by clicking the line in the column ""%1"".'"), 
				Элементы.ПолучателиДатаОтправления.Заголовок));
	КонецЕсли;

	ПоказатьСообщение(ТекстСообщения, НСтр("ru = 'Ошибки при отправке';
											|en = 'Errors when sending'"), БиблиотекаКартинок.Предупреждение32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщение(ТекстСообщения, ЗаголовокСообщения, Картинка)
	
	ПараметрыСообщения = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыСообщения.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыСообщения.Картинка = Картинка;
	ПараметрыСообщения.Заголовок = ЗаголовокСообщения;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Неопределено, ТекстСообщения, РежимДиалогаВопрос.ОК, ПараметрыСообщения);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НакопитьСообщение(Накопленное, Сообщение)
	
	Если Не ПустаяСтрока(Накопленное) Тогда
		Накопленное = Накопленное + Символы.ПС;
	КонецЕсли;
	
	Накопленное = Накопленное + Сообщение;
	
КонецПроцедуры

&НаСервере
Функция РезультатЗавершенияОтправкиДокументовНаСервере(АдресРезультата)
	
	Если АдресРезультата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СводныйРезультат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если СводныйРезультат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьРезультатыОтправки(СводныйРезультат.Детально);
	
	Возврат СводныйРезультат;
	
КонецФункции

#Область РезультатыОтправки

&НаСервере
Процедура УстановитьВидимостьРезультатовОтправки()

	Элементы.ПолучателиДатаОтправления.Видимость = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		Элементы.ПолучателиДатаОтправления.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРезультатыОтправки()
	
	Если Не ПолучателиЗаполнены(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыОтправки = Неопределено;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРезультатыРассылкиДокументов = ОбщегоНазначения.ОбщийМодуль("РезультатыРассылкиДокументов");
		РезультатыОтправки = МодульРезультатыРассылкиДокументов.РезультатыОтправки(Получатели.Выгрузить());
	КонецЕсли;

	ЗаполнитьРезультатыОтправки(РезультатыОтправки);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРезультатыОтправки()

	Для Каждого СтрокаКоллекции Из Получатели Цикл
		СтрокаКоллекции.Отправлено = Неопределено;
		СтрокаКоллекции.ДатаОтправления = Неопределено;
		СтрокаКоллекции.ОписаниеОшибки = Неопределено;
		СтрокаКоллекции.КартинкаСостояния = КартинкаСостояния(СтрокаКоллекции.Отправлено);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыОтправки(РезультатыОтправки)
	
	Если РезультатыОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, РассылаемыйДокумент");
	Для Каждого СтрокаРезультатов Из РезультатыОтправки Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаРезультатов);
		НайденныеСтроки = Получатели.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ТипЗнч(СтрокаРезультатов.Результат) = Тип("Булево") Тогда
				НайденнаяСтрока.Отправлено = СтрокаРезультатов.Результат;
			Иначе
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаРезультатов.Результат);
			КонецЕсли;
			НайденнаяСтрока.КартинкаСостояния = КартинкаСостояния(НайденнаяСтрока.Отправлено);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КартинкаСостояния(Состояние)

	Если Состояние = Истина Тогда
		Возврат БиблиотекаКартинок.ЗеленыйШар;
	ИначеЕсли Состояние = Ложь Тогда
		Возврат БиблиотекаКартинок.КрасныйШар;
	Иначе
		Возврат БиблиотекаКартинок.СерыйШар;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатыОтправки(Элемент, Поле, ВыбраннаяСтрока, СтандартнаяОбработка)
	
	Если Поле <> Элементы.ПолучателиДатаОтправления Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;

	ДанныеСтроки = Получатели.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФизическоеЛицо", ДанныеСтроки.ФизическоеЛицо);
	ПараметрыФормы.Вставить("Получатель", ДанныеСтроки.ФизическоеЛицо);
	ПараметрыФормы.Вставить("РассылаемыйДокумент", ДанныеСтроки.РассылаемыйДокумент);

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРезультатыРассылкиДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РезультатыРассылкиДокументовКлиент");
		МодульРезультатыРассылкиДокументовКлиент.ПоказатьРезультатыОтправки(ЭтотОбъект, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПолучателя(Элемент, Поле, ВыбраннаяСтрока, СтандартнаяОбработка)
	
	Если Поле <> Элементы.ПолучателиПредставление Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Получатели.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыКлиент.ОткрытьФормуФизическогоЛицаДляРедактирования(
		ДанныеСтроки.ФизическоеЛицо, "АдресЭлектроннойПочты");
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПолучателиЗаполнены(Форма)
	Возврат Форма.Получатели.Количество() > 0;
КонецФункции

#Область УчетнаяЗапись

&НаСервере
Процедура ЗаполнитьУчетнуюЗапись()
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина, , Истина);
	
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		ПроверятьУчетныеЗаписиПриОткрытии = Истина;
		Возврат;
	КонецЕсли;
	
	Если УчетнаяЗапись.Пустая() Тогда
		УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
	КонецЕсли;

	Элементы.ОтправительПредставление.СписокВыбора.Очистить();

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДоступныеУчетныеЗаписи.ВыгрузитьКолонку("Ссылка"), "ИмяПользователя, АдресЭлектроннойПочты");

	Для Каждого СтрокаТаблицы Из ДоступныеУчетныеЗаписи Цикл
		Элементы.ОтправительПредставление.СписокВыбора.Добавить(СтрокаТаблицы.Ссылка, 
			ПредставлениеАдресата(
				ЗначенияРеквизитов[СтрокаТаблицы.Ссылка].ИмяПользователя, 
				ЗначенияРеквизитов[СтрокаТаблицы.Ссылка].АдресЭлектроннойПочты));
	КонецЦикла;

	ЗаполнитьПредставлениеОтправителя(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеАдресата(Имя, Адрес) Экспорт
	
	Если Имя = Адрес Или ПустаяСтрока(Имя) Тогда
		Возврат Адрес;
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес) Или СтрНайти(Имя, Адрес) > 0 Тогда
		Возврат Имя;
	КонецЕсли;
	
	Возврат Имя + " <" + Адрес + ">";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеОтправителя(Форма)

	ЭлементСписка = Форма.Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(Форма.УчетнаяЗапись);
	Если ЭлементСписка <> Неопределено Тогда
		Форма.ОтправительПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуУчетнойЗаписи()
	
	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(
		Новый ОписаниеОповещения("ЗавершитьПроверкуУчетнойЗаписи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверкуУчетнойЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЗаполнитьУчетнуюЗапись();
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗавершитьРаботуФормы", ЭтотОбъект),
		НСтр("ru = 'Для рассылки документов требуется настроенная для отправки учетная запись электронной почты.';
			|en = 'An email account configured for sending is required for sending documents.'"));
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗавершитьРаботуФормы(Результат) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НачатьПредупреждениеОтправки()

	Если ЗначениеПоТипуДокумента(ТипРассылаемогоДокумента, КлючБольшеНеЗадаватьВопросОтправки(), Ложь) Тогда
		НачатьОтправкуДокументов();
		Возврат;
	КонецЕсли;
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Запуск рассылки документов';
										|en = 'Starting documents distribution'");
	
	КнопкиОтвета = Новый СписокЗначений;
	КнопкиОтвета.Добавить(Истина, НСтр("ru = 'Продолжить';
										|en = 'Continue'"));
	КнопкиОтвета.Добавить(Ложь, НСтр("ru = 'Отмена';
									|en = 'Cancel'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Новый ОписаниеОповещения("ЗавершитьПредупреждениеОтправки", ЭтотОбъект), 
		ТекстВопросаПредупрежденияПередОтправкой(), КнопкиОтвета, ПараметрыВопроса);
	
КонецПроцедуры

&НаКлиенте
Функция ТекстВопросаПредупрежденияПередОтправкой()
	
	ТекстВопроса = "";
	
	ВыбранныеФормы = ВыбранныеПечатныеФормы();
	Если ВыбранныеФормы.Количество() = 1 Тогда
		НакопитьСообщение(ТекстВопроса, 
			СтрШаблон(НСтр("ru = 'Форма «%1» документа «%2» будет сформирована отдельно для каждого получателя и направлена ему на указанный адрес электронной почты.';
							|en = 'The ""%1"" form of the ""%2"" document will be generated separately for each recipient and sent to them to the specified email address.'"), 
				ВыбранныеФормы[0].Представление, ТипЗнч(ТипРассылаемогоДокумента)));
	Иначе
		НакопитьСообщение(ТекстВопроса, 
			СтрШаблон(НСтр("ru = 'Ниже перечисленные формы документа «%1» будут сформированы отдельно для каждого получателя и направлены ему на указанный адрес электронной почты.';
							|en = 'The ""%1"" document forms specified below will be generated separately for each recipient and sent to them to the specified email address.'"),
			ТипЗнч(ТипРассылаемогоДокумента)));
		Для Каждого ВыбраннаяФорма Из ВыбранныеФормы Цикл
			НакопитьСообщение(ТекстВопроса, " - " + ВыбраннаяФорма.Представление);
		КонецЦикла;
	КонецЕсли;
	
	НакопитьСообщение(ТекстВопроса, 
		НСтр("ru = 'Получатели без адреса электронной почты будут пропущены.
			 |
			 |Процесс может занять длительное время. Продолжить?';
			 |en = 'Recipients without an email address will be skipped.
			 |
			 |The process may take a long time. Continue?'"));
	
	Возврат ТекстВопроса;
	 
КонецФункции

&НаКлиенте
Процедура ЗавершитьПредупреждениеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.Значение <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.БольшеНеЗадаватьЭтотВопрос Тогда
		СохранитьЗначениеПоТипуДокумента(ТипРассылаемогоДокумента, КлючБольшеНеЗадаватьВопросОтправки(), Истина);
	КонецЕсли;
	
	НачатьОтправкуДокументов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючБольшеНеЗадаватьВопросОтправки()
	Возврат "БольшеНеЗадаватьВопросОтправки";
КонецФункции

#Область ХранилищеНастроек

&НаСервереБезКонтекста
Процедура СохранитьЗначениеПоТипуДокумента(ТипДокумента, Ключ, Значение)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастройкиПоТипуДокумента(ТипДокумента), Ключ, Значение);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьЗначениеПоВсемДокументам(Ключ, Значение)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастройкиПоВсемДокументам(), Ключ, Значение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеПоТипуДокумента(ТипДокумента, Ключ, ЗначениеПоУмолчанию = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючНастройкиПоТипуДокумента(ТипДокумента), Ключ, ЗначениеПоУмолчанию);
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПоВсемДокументам(Ключ, ЗначениеПоУмолчанию = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючНастройкиПоВсемДокументам(), Ключ, ЗначениеПоУмолчанию);
КонецФункции

&НаСервереБезКонтекста
Функция КлючНастройкиПоТипуДокумента(ТипРассылаемогоДокумента)
	Возврат "РассылкаДокументов" + ТипРассылаемогоДокумента.Метаданные().ПолноеИмя();
КонецФункции

&НаСервереБезКонтекста
Функция КлючНастройкиПоВсемДокументам()
	Возврат "РассылкаДокументов";
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСообщение(Параметры)
	
	Если ЗначениеЗаполнено(Параметры.ТекстПисьма) Тогда
		ТемаПисьма = Параметры.ТемаПисьма;
		ТекстПисьма = Параметры.ТекстПисьма;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСообщениеПоУмолчанию();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСообщениеПоУмолчанию()
	
	ТемаПисьма = НСтр("ru = 'Направляются документы';
						|en = 'The documents are being sent'");
	// АПК:374-выкл. Восклицательный знак в тексте письма, а не в сообщении пользователю.
	// АПК:1223-выкл. Использование местоимения в тексте письма, а не в сообщении пользователю.
	ТекстПисьма = 
		НСтр("ru = 'Уважаемые сотрудники!
              |
              |Направляем вам документы.
              |Пожалуйста, распечатайте документы в двух экземплярах, поставьте свою подпись в обозначенных местах и пришлите нам фотографию или скан-копию в ответ на это письмо.
              | 
              |Администрация.';
              |en = 'Dear employees!
              |
              |We are sending you documents.
              |Please print the documents in duplicates, put your signature in the indicated fields and send us a photo or scanned copy in response to this letter.
              |
              |Administration.'");
	// АПК:1223-вкл.
	// АПК:374-вкл.
	
КонецПроцедуры

&НаСервере
Процедура НастроитьУсловноеОформление()

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолучателиПредставление.Имя);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, 
		"Получатели.Адрес", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовФормы()
	
	Элементы.ПолучателиДатаОтправления.Видимость = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		Элементы.ПолучателиДатаОтправления.Видимость = Истина;
		Элементы.Получатели.Подсказка = 
			НСтр("ru = 'Если документы ранее уже направлялись кому-то из получателей, дата отправления покажет, когда именно.';
				|en = 'If the documents have already been sent to any of the recipients, the sending date will show exactly when.'");
	КонецЕсли;
	
	ИспользуетсяЭлектроннаяПодпись = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		ИспользуетсяЭлектроннаяПодпись = МодульЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПодписатьИОтправить",
		"Видимость",
		ИспользуетсяЭлектроннаяПодпись);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПодписатьИОтправитьВДополнительномПодменю",
		"Видимость",
		ИспользуетсяЭлектроннаяПодпись);
	
	Если ИспользуетсяЭлектроннаяПодпись Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаПодписатьИОтправить",
			"КнопкаПоУмолчанию",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаОтправить",
			"ПоложениеВКоманднойПанели",
			ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПечатныхФормСЭЦП()
	
	ДанныеПечатныхФорм = Новый Структура("ВыводимыеФайлы,ФайлыНаПодпись",
		Новый Массив, Новый Соответствие);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Если МодульЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
			
			ВладельцыПечатныхФорм = ОбщегоНазначения.ВыгрузитьКолонку(Получатели, "РассылаемыйДокумент", Истина);
			ИдентификаторыПечатныхФорм = ОбщегоНазначения.ВыгрузитьКолонку(
				ПечатныеФормы.Выгрузить(Новый Структура("Использовать", Истина)), "Идентификатор", Истина);
			
			ОписанияФайловПечатныхФормПоОбъектам = КадровыйЭДО.ОписанияФайловПечатныхФормПоОбъектам(
				ВладельцыПечатныхФорм, ИдентификаторыПечатныхФорм);
			
			ОбъектыИдентификаторов = Новый Соответствие;
			ВсеФайлыПечатныхФорм = Новый Массив;
			Для Каждого ОписанияИдентификаторовПечатныхФормОбъекта Из ОписанияФайловПечатныхФормПоОбъектам.ОригиналыПечатныхФорм Цикл
				
				Для Каждого ОписаниеИдентификатора Из ОписанияИдентификаторовПечатныхФормОбъекта.Значение.Оригиналы Цикл
					
					ОбъектыИдентификатора = ОбъектыИдентификаторов.Получить(ОписанияИдентификаторовПечатныхФормОбъекта.Ключ);
					Если ОбъектыИдентификатора = Неопределено Тогда
						ОбъектыИдентификатора = Новый Массив;
					КонецЕсли;
					
					ОбъектыИдентификатора.Добавить(ОписаниеИдентификатора.Значение.Владелец);
					ОбъектыИдентификаторов.Вставить(ОписанияИдентификаторовПечатныхФормОбъекта.Ключ, ОбъектыИдентификатора);
					ВсеФайлыПечатныхФорм.Добавить(ОписаниеИдентификатора.Значение.ФайлОбъекта);
					
				КонецЦикла;
				
			КонецЦикла;
			
			ДанныеПечатныхФорм.ВыводимыеФайлы = ВсеФайлыПечатныхФорм;
			ДанныеПечатныхФорм.ФайлыНаПодпись = ФайлыНаПодпись(ОбъектыИдентификаторов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПечатныхФорм;
	
КонецФункции

&НаСервере
Функция ФайлыНаПодпись(ОбъектыИдентификаторов)
	
	ФормыНаПодпись = Новый Массив;
	
	ДокументыДляРассылки = ОбщегоНазначения.ВыгрузитьКолонку(Получатели, "РассылаемыйДокумент", Истина);
	ТипыОбъектов = ОбщегоНазначенияБЗК.ОбъектыПоТипам(ДокументыДляРассылки);
	Для Каждого ОписаниеТипаОбъектов Из ТипыОбъектов Цикл
		
		Если Не КадровыйЭДО.ЭтоТипОбъектаСПечатнымиФормами(ОписаниеТипаОбъектов.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		СсылкиНаДокументы = ОписаниеТипаОбъектов.Значение;
		Для Каждого ОписаниеПечатныеФормы Из ПечатныеФормы Цикл
			
			Если Не ОписаниеПечатныеФормы.Использовать Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ОписаниеПечатныеФормы.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектыИдентификатора = ОбъектыИдентификаторов.Получить(ОписаниеПечатныеФормы.Идентификатор);
			Если ОбъектыИдентификатора <> Неопределено Тогда
				СсылкиНаДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СсылкиНаДокументы, ОбъектыИдентификатора);
			КонецЕсли;
			
			Если СсылкиНаДокументы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатВывода = УправлениеПечатью.СформироватьПечатныеФормы(
				ОписаниеПечатныеФормы.МенеджерПечати, ОписаниеПечатныеФормы.Идентификатор,
				СсылкиНаДокументы, ОписаниеПечатныеФормы.ДополнительныеПараметры);
			
			ПечатныеФормыСсылок = Новый Массив;
			Для Каждого СтрокаКоллекции Из РезультатВывода.КоллекцияПечатныхФорм Цикл
				
				ОписаниеФормы = Новый Структура;
				ОписаниеФормы.Вставить("ПечатнаяФорма", СтрокаКоллекции.ТабличныйДокумент);
				ОписаниеФормы.Вставить("ИдентификаторПечатнойФормы", СтрокаКоллекции.ИмяМакета);
				ОписаниеФормы.Вставить("Название", СтрокаКоллекции.СинонимМакета);
				
				ПечатныеФормыСсылок.Добавить(ОписаниеФормы);
				
			КонецЦикла;
			
			ФормыНаПодписьОбъектов = КадровыйЭДОВызовСервера.ПечатныеФормыОбъектов(ПечатныеФормыСсылок,
				РезультатВывода.ОбъектыПечати, ОписаниеПечатныеФормы, УникальныйИдентификатор);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФормыНаПодпись, ФормыНаПодписьОбъектов);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ФормыНаПодпись;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеПечатныхФормПриУспешномЗавершенииОтправки()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеПечатныеФормы = ВыбранныеПечатныеФормы();
	Если ВыбранныеПечатныеФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МодульРассылкаОригиналовПервичныхДокументов = ОбщегоНазначения.ОбщийМодуль("РассылкаОригиналовПервичныхДокументов");
	
	Для Каждого СтрокаПолучателя Из Получатели Цикл
		Для Каждого ПечатнаяФорма Из ВыбранныеПечатныеФормы Цикл
			МодульРассылкаОригиналовПервичныхДокументов.ЗаписатьСостояниеОригиналаДокумента(СтрокаПолучателя.РассылаемыйДокумент, ПечатнаяФорма.Идентификатор, ПечатнаяФорма.Представление);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти