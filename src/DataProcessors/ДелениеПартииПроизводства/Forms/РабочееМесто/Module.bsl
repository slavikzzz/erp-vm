
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьНастройки();
	
	Если ТипЗнч(Параметры.ПартияПроизводства) = Тип("УникальныйИдентификатор") Тогда
		Объект.ПартияПроизводства = Справочники.ПартииПроизводства.ПолучитьСсылку(Параметры.ПартияПроизводства);
	Иначе
		Объект.ПартияПроизводства = Параметры.ПартияПроизводства;
	КонецЕсли;
	
	// Данные партии
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПартииПроизводства.Документ КАК Распоряжение,
		|	ВЫРАЗИТЬ(ПартииПроизводства.Документ КАК Документ.ЗаказНаПроизводство2_2).Номер КАК ДокументНомер,
		|	ЕСТЬNULL(Этапы.НазначениеПродукция, ПартииПроизводства.Назначение) КАК НазначениеПродукция,
		|	ПартииПроизводства.Код КАК Код
		|ИЗ
		|	Справочник.ПартииПроизводства КАК ПартииПроизводства
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Этапы
		|	ПО Этапы.Ссылка = &Этап
		|ГДЕ
		|	ПартииПроизводства.Ссылка = &ПартияПроизводства");
	Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
	Запрос.УстановитьПараметр("Этап", Параметры.Этап);
	ЗначенияРеквизитов = Запрос.Выполнить().Выбрать();
	Если ЗначенияРеквизитов.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов, "Распоряжение, НазначениеПродукция");
		ПредставлениеПартии = ПредставлениеПартии(ЗначенияРеквизитов.Код, ЗначенияРеквизитов.ДокументНомер);
	КонецЕсли;
	
	ДанныеПартии = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводства(
		Объект.Распоряжение,
		Объект.НазначениеПродукция,
		Объект.ПартияПроизводства);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеПартии,
		"Организация,
		|ХозяйственнаяОперация,
		|Партнер,
		|Договор,
		|НаправлениеДеятельности,
		|Спецификация,
		|ТипПроизводственногоПроцесса,
		|ПодразделениеДиспетчер,
		|НачалоПроизводства,
		|ОсновноеИзделиеНоменклатура,
		|ОсновноеИзделиеХарактеристика,
		|Номенклатура,
		|Характеристика,
		|Количество,
		|ДинамическаяСтруктура");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Номенклатура.Представление КАК Представление,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Представление КАК Представление
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка = &Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЭтоИзделиеЗаказа
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК Изделия
		|ГДЕ
		|	Изделия.Ссылка = &Распоряжение
		|	И Изделия.Номенклатура = &Номенклатура
		|	И Изделия.Характеристика = &Характеристика
		|	И НЕ Изделия.Отменено");
	Запрос.УстановитьПараметр("Номенклатура", Объект.ОсновноеИзделиеНоменклатура);
	Запрос.УстановитьПараметр("Характеристика", Объект.ОсновноеИзделиеХарактеристика);
	Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РеквизитыНоменклатуры = МассивРезультатов[0].Выбрать();
	Если РеквизитыНоменклатуры.Следующий() Тогда
		ИзделиеНоменклатураПредставление = РеквизитыНоменклатуры.Представление;
		ИзделиеЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
		ИзделиеТипНоменклатуры = РеквизитыНоменклатуры.ТипНоменклатуры;
		Элементы.УпаковкаПартии.ПодсказкаВвода = ИзделиеЕдиницаИзмерения;
		Элементы.ПростойРежимСократитьУпаковкаПартии.ПодсказкаВвода = ИзделиеЕдиницаИзмерения;
	КонецЕсли;
	
	РеквизитыХарактеристики = МассивРезультатов[1].Выбрать();
	Если РеквизитыХарактеристики.Следующий() Тогда
		ИзделиеХарактеристикаПредставление = РеквизитыХарактеристики.Представление;
	КонецЕсли;
	
	ЭтоИзделиеЗаказа = Не МассивРезультатов[2].Пустой()
		И (Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			Или Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	
	АдресПроизводственныйПроцессПартии = ПроизводственныйПроцессПартииВХранилище(
		Объект.ПартияПроизводства, УникальныйИдентификатор, Ложь);
	
	Если Не Объект.Спецификация.Пустая() Тогда
		АдресПроизводственныйПроцесс = ПроизводственныйПроцессВХранилище(Объект.Спецификация, УникальныйИдентификатор);
	КонецЕсли;
	
	// Установка действия по параметрам
	Если Параметры.СократитьУвеличить Тогда
		Объект.Действие = Действия().Сократить;
	ИначеЕсли Параметры.Отменить Тогда
		Объект.Действие = Действия().Отменить;
	ИначеЕсли Параметры.ОтразитьБрак Тогда
		Объект.Действие = Действия().Брак;
	Иначе
		Объект.Действие = Действия().Разделить;
	КонецЕсли;
	
	// Расчет этапа
	Если Параметры.Этап.Пустая() Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Этапы.Ссылка КАК Этап
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|	ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	Этапы.ПартияПроизводства = &ПартияПроизводства
			|	И Этапы.Проведен
			|	И Этапы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, -Этапы.ДлительностьДоВыпуска)");
		Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Этап = Выборка.Этап;
		КонецЕсли;
	Иначе
		Объект.Этап = Параметры.Этап;
	КонецЕсли;
	
	// Расчет операции
	Если Не Объект.Этап.Пустая() Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Обработки.ДелениеПартииПроизводства.СоздатьВТОчередьОперацийДляДеления(МенеджерВременныхТаблиц, Объект.Этап);
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Очередь.Операция КАК Операция,
			|	Очередь.ИдентификаторОперации КАК ИдентификаторОперации,
			|	НЕ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОчередьОпераций КАК Предшественники
			|		ГДЕ
			|			Предшественники.НомерСледующейОперации = Очередь.НомерОперации) КАК ЭтоПерваяОперация,
			|	Очередь.НомерСледующейОперации = 0 КАК ЭтоПоследняяОперация
			|ИЗ
			|	ВТОчередьОпераций КАК Очередь
			|ГДЕ
			|	(Очередь.ОперацийКНазначению > 0 ИЛИ Очередь.ЕстьБрак)
			|	И НЕ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОчередьОпераций КАК Последователи
			|		ГДЕ
			|			Очередь.НомерСледующейОперации <> 0
			|			И Последователи.НомерОперации >= Очередь.НомерСледующейОперации
			|			И Последователи.Начата
			|	)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Очередь.НомерОперации");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Этап", Объект.Этап);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Операция = Выборка.Операция;
			ЗаполнитьЗначенияСвойств(Объект, Выборка,
				"Операция, ИдентификаторОперации, ЭтоПерваяОперация, ЭтоПоследняяОперация");
		КонецЕсли;
	КонецЕсли;
	
	// Данные этапа
	ДанныеЭтапа = ДанныеЭтапа(Объект, ИзделиеЕдиницаИзмерения);
	Если ДанныеЭтапа = Неопределено Тогда
		Объект.КоличествоУпаковок = Объект.Количество;
	Иначе
		ЗаполнитьПоДаннымЭтапа(ДанныеЭтапа);
		Объект.КоличествоУпаковокБрак = ДанныеЭтапа.КоличествоУпаковокБрак;
	КонецЕсли;
	
	// Параметры распределения затрат
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	МАКСИМУМ(Таблица.СпособРаспределенияЗатратНаВыходныеИзделия) КАК Значение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ПартияПроизводства = &ПартияПроизводства
		|	И НЕ Таблица.ПометкаУдаления
		|	И Таблица.НомерСледующегоЭтапа = 0 //ЭтоВыпускающийЭтап()
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таблица.СпособРаспределенияЗатратНаВыходныеИзделия) = 1");
	Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Выборка.Значение;
	КонецЕсли;
	
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(
		Обработки.ДелениеПартииПроизводства.ПараметрыРедактированияЭтапа());
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(
		Обработки.ДелениеПартииПроизводства.ПараметрыРаспределенияЗатрат(Объект.СпособРаспределенияЗатратНаВыходныеИзделия));
	
	// Параметры указания серий
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ДелениеПартииПроизводства));
		
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	
	Элементы.Назначение.СвязиПараметровВыбора = Элементы.ПартииНазначение.СвязиПараметровВыбора;
	Элементы.Назначение.ПараметрыВыбора = Элементы.ПартииНазначение.ПараметрыВыбора;
	Элементы.Назначение.ФормаВыбора = Элементы.ПартииНазначение.ФормаВыбора;
	
	// Назначения
	Если ДанныеПартии.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		И Объект.ДинамическаяСтруктура Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Изделия.Назначение        КАК Назначение,
			|	СУММА(Изделия.Количество) КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
			|		ПО Изделия.Ссылка = ЭтапПроизводства.Ссылка
			|		И Изделия.Номенклатура = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура
			|		И Изделия.Характеристика = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеХарактеристика
			|ГДЕ
			|	ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
			|	И ЭтапПроизводства.Проведен
			|	И НЕ Изделия.Отменено
			|СГРУППИРОВАТЬ ПО
			|	Изделия.Назначение
			|УПОРЯДОЧИТЬ ПО
			|	МИНИМУМ(Изделия.НомерСтроки)");
		Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
		НазначенияНормативы.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	Элементы.УказатьНазначения.Видимость = НазначенияНормативы.Количество() > 1;
	Элементы.ПартииГруппаНазначения.Видимость = НазначенияНормативы.Количество() > 1;
	
	// Инициализация прочих реквизитов
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Партии);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(
		Объект,
		Обработки.ДелениеПартииПроизводства);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
		Элементы.ПродолжитьСпецификация,
		ПараметрыВыбораСпецификаций);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
		Элементы.ПартииПродолжитьСпецификация,
		ПараметрыВыбораСпецификаций);
	
	ПараметрыВыбораСтатейИАналитик = Обработки.ДелениеПартииПроизводства.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройки = Обработки.ДелениеПартииПроизводства.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	ИспользоватьСписаниеНаРасходы =
		Объект.ХозяйственнаяОперация <> ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
		//++ Устарело_Переработка24
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		//-- Устарело_Переработка24
		И (ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	ИспользоватьУчетПрочихАктивовПассивов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5
		//++ Устарело_Переработка24
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		//-- Устарело_Переработка24
		Или Ложь Тогда
		НазначениеДавальческогоВыпуска = Документы.ЭтапПроизводства2_2.НазначениеПоУмолчаниюДляПобочныхИзделий(Объект.Распоряжение);
	КонецЕсли;
	
	ПрочитатьПараметрыАвтовыбора();
	
	ЦветВыбраннаяСсылка = ЦветаСтиля.ЦветТекстаФормы;
	ЦветНеВыбраннаяСсылка = ЦветаСтиля.ГиперссылкаЦвет;
	
	// Настройка действия по параметрам
	Если Объект.Действие = Действия().Сократить Тогда
		КоличествоПартий = 1;
		ДобавитьПартию(0);
		Объект.Партии[0].КоличествоУпаковокПартии = Параметры.КоличествоУпаковок;
		Объект.Партии[0].УпаковкаПартии = Параметры.Упаковка;
		Объект.Партии[0].КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
			Объект.ОсновноеИзделиеНоменклатура,
			Параметры.Упаковка,
			Параметры.КоличествоУпаковок);
		ОдноДействие = Истина;
		Заголовок = СтрШаблон(НСтр("ru = 'Сокращение партии %1';
									|en = 'Reduce the %1 lot'"), ПредставлениеПартии);
	ИначеЕсли Объект.Действие = Действия().Отменить Тогда
		ОдноДействие = Истина;
		Заголовок = СтрШаблон(НСтр("ru = 'Отмена партии %1';
									|en = 'Cancel the %1 lot'"), ПредставлениеПартии);
	ИначеЕсли Объект.Действие = Действия().Брак Тогда
		ОдноДействие = Истина;
		Заголовок = СтрШаблон(НСтр("ru = 'Отражение брака в партии %1';
									|en = 'Record nonconformity in the %1 lot'"), ПредставлениеПартии);
	Иначе
		Если Параметры.Разделить Тогда
			ОдноДействие = Истина;
			Заголовок = СтрШаблон(НСтр("ru = 'Деление партии %1';
										|en = 'Divide the %1 lot'"), ПредставлениеПартии);
		Иначе
			Заголовок = СтрШаблон(НСтр("ru = 'Изменение партии %1';
										|en = 'Lot change %1'"), ПредставлениеПартии);
		КонецЕсли;
		
		Если ВыпускИзделий.Количество() > 0 Тогда
			КоличествоПартий = ВыпускИзделий.Количество();
			КоличествоПартийРазделить = ВыпускИзделий.Количество();
		Иначе
			КоличествоПартий = 2;
			КоличествоПартийРазделить = 2;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаДействия.Видимость = Не ОдноДействие;
	Элементы.ПростойРежимКоличествоУпаковокБрак.Видимость = ОдноДействие;
	Элементы.ИзделиеУпаковкаПредставление2.Видимость = ОдноДействие;
	
	// Количество партий
	Если КоличествоПартий = 0 Тогда
		КоличествоПартий = 1;
	КонецЕсли;
	Если КоличествоПартийРазделить = 0 Тогда
		КоличествоПартийРазделить = 2;
	КонецЕсли;
	
	ТекущаяПартия = 0;
	ПредыдущаяПартия = ИндексыПартий().Неопределено;
	
	// Режим
	ПростойРежим = Настройки.ПростойРежимПриОткрытии;
	ПростойРежимФорма = ?(ПростойРежим, 1, 0);
	
	// Настройка элементов
	Элементы.Партия100.Гиперссылка = Истина;
	Элементы.Партия100.ЦветТекста = ЦветНеВыбраннаяСсылка;
	Элементы.ПартияОстаток.Гиперссылка = Истина;
	Элементы.ПартияОстаток.ЦветТекста = ЦветНеВыбраннаяСсылка;
	Элементы.ГруппаПростойРежимБракОтменитьИзделиеВЗаказе.Видимость = ЭтоИзделиеЗаказа;
	Элементы.ГруппаПростойРежимОтменитьИзделиеВЗаказе.Видимость = ЭтоИзделиеЗаказа;
	
	НастроитьПартии();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриНачалеРедактированияПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ОбработкаВводаДолиСтоимости(Элементы.Партии.ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Действие не может быть выполнено для заказа с типом производственного процесса ""Без спецификаций""';
				|en = 'The action cannot be executed for an order with ""No BOM"" type of production process.'"),,,,
			Отказ);
		Возврат;
	КонецЕсли;
	
	Действия = Действия();
	
	// Проверка шапки
	Если Объект.Этап.Пустая() Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Этап';
										|en = 'Stage'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ЭтапПредставление", Отказ);
	КонецЕсли;
	
	Если Объект.Действие = Действия.Сократить
		И Не Объект.Операция.Пустая()
		И Не Объект.ЭтоПерваяОперация Тогда
		ТекстСообщения = НСтр("ru = 'Сократить (увеличить) партию можно только с первой операции.';
								|en = 'You can reduce or increase the lot only from the first operation.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ЭтапПредставление", Отказ);
	КонецЕсли;
	
	Если Объект.Действие = Действия.Брак
		И Объект.КоличествоУпаковокБрак = 0 Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Количество бракованных изделий';
										|en = 'Number of nonconforming products'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.КоличествоУпаковокБрак",, Отказ);
	КонецЕсли;
	
	Если Объект.СНачалаПартии И Объект.Действие = Действия.Продолжить Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя оформить выпуск с начала партии.';
								|en = 'You cannot register the release from the beginning of the lot.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ЭтапПредставление", Отказ);
	КонецЕсли;
	
	Если Объект.СНачалаПартии И Объект.Действие = Действия.Брак Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя отразить брак с начала партии.';
								|en = 'You cannot record nonconformity from the beginning of the lot.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ЭтапПредставление", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка реквизитов простого режима
	Если ПростойРежим Тогда
		
		Если Объект.Действие = Действия.Разделить Тогда
			
			Если ПростойРежимКоличествоУпаковок = 0 Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", НСтр("ru = 'Размер партии';
												|en = 'Lot size'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ПростойРежимКоличествоУпаковок", Отказ);
			КонецЕсли;
			
			Если Не Объект.СНачалаПартии
				И ПростойРежимНаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
				И Не ЗначениеЗаполнено(ПростойРежимПолучатель) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", НСтр("ru = 'Получатель';
												|en = 'Recipient'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ПростойРежимПолучатель", Отказ);
			КонецЕсли;
			
		ИначеЕсли Объект.Действие = Действия.Брак
			Или Объект.Действие = Действия.Отменить И Не Объект.СНачалаПартии Тогда
			
			Если ПростойРежимНаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
				И Не ЗначениеЗаполнено(ПростойРежимПолучатель) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", НСтр("ru = 'Получатель';
												|en = 'Recipient'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ПростойРежимПолучатель", Отказ);
			КонецЕсли;
			
			Если ПростойРежимНаправлениеВыпуска = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию
				И Не ЗначениеЗаполнено(Объект.Партии[0].СтатьяРасходов) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", НСтр("ru = 'Статья расходов';
												|en = 'Expense item'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Элементы.Партии.ТекущиеДанные.СтатьяРасходов",, Отказ);
			КонецЕсли;
			
		ИначеЕсли Объект.Действие = Действия.Сократить Тогда
			
			Если ПростойРежимКоличествоУпаковок = 0 Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", НСтр("ru = 'Размер партии';
												|en = 'Lot size'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ПростойРежимКоличествоУпаковок", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Действие = Действия.Разделить
				И ПростойРежимНаправлениеВыпуска <> НаправлениеПродолжитьОбработку()
			Или Объект.Действие = Действия.Брак
			Или Объект.Действие = Действия.Отменить
			Или Объект.Действие = Действия.Сократить
				И Объект.Партии[0].КоличествоПартии < Объект.Количество Тогда
			
			Если ПростойРежимОтменитьИзделиеВЗаказе
				И ПростойРежимПричинаОтменыИзделия.Пустая() Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", НСтр("ru = 'Причина отмены';
												|en = 'Cancellation reason'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ПростойРежимПричинаОтменыИзделия", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка партий
	СообщенияПартии = Новый Массив; // Индекс - индекс партии, Значение - список значений с ошибками по данной партии
	СообщенияТаблица = Новый СписокЗначений;
		
	ИмяСписка = НСтр("ru = 'Партии';
					|en = 'Lots'");
	СтатусыСерияНеУказана = НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана();
	
	Для Индекс = 0 По Объект.Партии.Количество()-1 Цикл
		
		Строка = Объект.Партии[Индекс];
		СообщенияШапка = Новый СписокЗначений;
		
		ЕстьВыпуск = Объект.Действие <> Действия.Сократить
			И Не Объект.СНачалаПартии;
		
		// Номенклатура
		Если Строка.Номенклатура.Пустая()
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "НоменклатураФорма"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Номенклатура';
													|en = 'Items'"), Строка.НомерСтроки, ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.НоменклатураФорма",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номенклатура';
																								|en = 'Items'")));
			
		КонецЕсли;
		
		// Характеристика
		Если Строка.Характеристика.Пустая()
			И Строка.ХарактеристикиИспользуются
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "ХарактеристикаФорма"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Характеристика';
													|en = 'Variant'"), Строка.НомерСтроки, ИмяСписка));
				
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.ХарактеристикаФорма",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Характеристика';
																								|en = 'Variant'")));
				
		КонецЕсли;
		
		// Серии
		Если СтатусыСерияНеУказана.Найти(Строка.СтатусУказанияСерий) <> Неопределено
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "Серия"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Корректность", НСтр("ru = 'Серия';
													|en = 'Batch'"), Строка.НомерСтроки, ИмяСписка));
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.Серия",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru = 'Серия';
																								|en = 'Batch'")));
			
		КонецЕсли;
		
		// Количество упаковок
		Если Строка.КоличествоУпаковок = 0
			И Не Строка.АвторасчетКоличества
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковок"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Количество';
													|en = 'Quantity'"), Строка.НомерСтроки, ИмяСписка));
				
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.КоличествоУпаковок",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Количество';
																								|en = 'Quantity'")));
			
		КонецЕсли;
		
		// Количество
		Если Строка.Количество = 0
			И Строка.КоличествоУпаковок <> 0
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковок"),
				 СтрШаблон(
				 	НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2""';
							|en = 'Zero quantity detected when converted to storage unit in the line%1 of the list ""%2""'"),
					Строка.НомерСтроки,
					ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.КоличествоУпаковок",
				НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения';
					|en = 'Zero quantity is detected when converted to storage unit'"));
			
		КонецЕсли;
		
		// Доля стоимости
		Если Строка.ДоляСтоимости = 0
			И (Объект.Партии.Количество() > 1 И Не Объект.СНачалаПартии
				ИЛИ Объект.Действие = Действия.Брак И Объект.ЭтоПоследнийЭтапИОперация) Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "ДоляСтоимости"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Доля стоимости';
													|en = 'Cost share'"), Строка.НомерСтроки, ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.ДоляСтоимости",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Доля стоимости';
																								|en = 'Cost share'")));
			
		КонецЕсли;
		
		// Получатель
		Если НЕ ЗначениеЗаполнено(Строка.Получатель)
			И НЕ Строка.СписатьНаРасходы
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "Получатель"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Получатель';
													|en = 'Recipient'"), Строка.НомерСтроки, ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.Получатель",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Получатель';
																								|en = 'Recipient'")));
			
		КонецЕсли;
		
		// Статья расходов
		Если НЕ ЗначениеЗаполнено(Строка.СтатьяРасходов)
			И Строка.СписатьНаРасходы
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "СтатьяРасходов"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Статья расходов';
													|en = 'Expense item'"), Строка.НомерСтроки, ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.СтатьяРасходов",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Статья расходов';
																								|en = 'Expense item'")));
			
		КонецЕсли;
		
		// Размер партии (количество упаковок)
		Если Строка.КоличествоУпаковокПартии = 0
			И 	(
				Объект.Действие = Действия.Сократить
				ИЛИ (
					Объект.Действие = Действия.Разделить
					И 	(
						Объект.СНачалаПартии
						ИЛИ Строка.ПродолжитьОбработку
						)
					)
				) Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковокПартии"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Размер партии';
													|en = 'Lot size'"), Строка.НомерСтроки, ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Размер партии';
																								|en = 'Lot size'")));
			
		КонецЕсли;
		
		// Размер партии (количество)
		Если Строка.КоличествоПартии = 0
			И Строка.КоличествоУпаковокПартии <> 0
			И (Объект.Действие = Действия.Сократить
				ИЛИ Объект.Действие = Действия.Разделить) Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковокПартии"),
				 СтрШаблон(
				 	НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2""';
							|en = 'Zero quantity detected when converted to storage unit in the line%1 of the list ""%2""'"),
					Строка.НомерСтроки,
					ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии",
				НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения';
					|en = 'Zero quantity is detected when converted to storage unit'"));
			
		КонецЕсли;
		
		Если Строка.ПродолжитьОбработку
			И (Объект.Действие = Действия.Разделить И Не Объект.СНачалаПартии
				Или Объект.Действие = Действия.Брак
				Или Объект.Действие = Действия.Продолжить) Тогда
			
			// Новое изделие
			Если Строка.ИзменитьВыпускаемоеИзделие
				И Строка.ПродолжитьНоменклатура.Пустая() Тогда
				
				СообщенияТаблица.Добавить(
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Партии", Строка.НомерСтроки, "ПартииНаправлениеВыпускаФорма"),
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Новое изделие';
														|en = 'New finished product'"), Строка.НомерСтроки, ИмяСписка));
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.ПродолжитьНоменклатура",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Новое изделие';
																									|en = 'New finished product'")));
				
			КонецЕсли;
			
			Если Строка.ИзменитьВыпускаемоеИзделие
				И Строка.ПродолжитьХарактеристика.Пустая()
				И Строка.ПродолжитьХарактеристикиИспользуются Тогда
				
				СообщенияТаблица.Добавить(
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Партии", Строка.НомерСтроки, "ПартииНаправлениеВыпускаФорма"),
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Характеристика нового изделия';
														|en = 'Finished product variant'"), Строка.НомерСтроки, ИмяСписка));
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.ПродолжитьХарактеристика",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Характеристика нового изделия';
																									|en = 'Finished product variant'")));
				
			КонецЕсли;
			
			// Продолжить - спецификация
			Если Строка.ПродолжитьСпецификация.Пустая() Тогда
				
				СообщенияТаблица.Добавить(
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Партии", Строка.НомерСтроки, "ПродолжитьСпецификация"),
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Спецификация';
														|en = 'Bill of materials'"), Строка.НомерСтроки, ИмяСписка));
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.ПродолжитьСпецификация",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Спецификация';
																									|en = 'Bill of materials'")));
				
			КонецЕсли;
			
			// Продолжить - этап
			Если Строка.ПродолжитьЭтап.Пустая() Тогда
				
				СообщенияТаблица.Добавить(
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Партии", Строка.НомерСтроки, "ПродолжитьЭтапПредставление"),
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", "Заполнение", НСтр("ru = 'Этап';
														|en = 'Stage'"), Строка.НомерСтроки, ИмяСписка));
				
				СообщенияШапка.Добавить(
					"Элементы.Партии.ТекущиеДанные.ПродолжитьЭтапПредставление",
					ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Этап';
																									|en = 'Stage'")));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Подразделение
		Если Строка.Подразделение.Пустая()
			И ЕстьВыпуск Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "Подразделение"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Подразделение';
													|en = 'Business unit'"), Строка.НомерСтроки, ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.Подразделение",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Подразделение';
																								|en = 'Business unit'")));
			
		КонецЕсли;
		
		// Назначения партии
		Если Строка.ИспользоватьНазначения
			И Строка.ЕстьОшибкиЗаполненияНазначений Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "КоличествоУпаковокПартии"),
				 СтрШаблон(
				 	НСтр("ru = 'Обнаружено расхождение размера и назначений партии в строке %1 списка ""%2""';
							|en = 'A discrepancy of the size and assignments of the lot is found in the %1 line of the ""%2"" list'"),
					Строка.НомерСтроки,
					ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии",
				НСтр("ru = 'Обнаружено расхождение размера и назначений партии';
					|en = 'A discrepancy of the size and assignments of the lot is found'"));
			
		КонецЕсли;
		
		// Причина отмены изделия в заказе
		Если МожноОтменитьИзделиеВЗаказе(ЭтотОбъект, Строка)
			И Строка.ОтменитьИзделиеВЗаказе
			И Строка.ПричинаОтменыИзделия.Пустая() Тогда
			
			СообщенияТаблица.Добавить(
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Партии", Строка.НомерСтроки, "ПартииНаправлениеВыпускаФорма"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Причина отмены';
													|en = 'Cancellation reason'"), Строка.НомерСтроки, ИмяСписка));
			
			СообщенияШапка.Добавить(
				"Элементы.Партии.ТекущиеДанные.ПричинаОтменыИзделия",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Причина отмены';
																								|en = 'Cancellation reason'")));
			
		КонецЕсли;
		
		СообщенияПартии.Вставить(Индекс, СообщенияШапка);
		
	КонецЦикла;
	
	Если ПростойРежим
		И СообщенияТаблица.Количество() <> 0 Тогда
		// Переключение в расширенный режим
		ПростойРежим = Ложь;
		ПростойРежимФорма = 0;
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
	Если ТекущаяПартия = ИндексыПартий().ВсеПартии Тогда
		
		Для каждого Элемент Из СообщенияТаблица Цикл
			ОбщегоНазначения.СообщитьПользователю(Элемент.Представление,, Элемент.Значение,, Отказ);
		КонецЦикла;
		
	ИначеЕсли СообщенияПартии[ТекущаяПартия].Количество() <> 0 Тогда
		
		Для каждого Элемент Из СообщенияПартии[ТекущаяПартия] Цикл
			ОбщегоНазначения.СообщитьПользователю(Элемент.Представление,, Элемент.Значение,, Отказ);
		КонецЦикла;
		
	Иначе
		
		Для Индекс = 0 По СообщенияПартии.ВГраница() Цикл
			
			Если СообщенияПартии[Индекс].Количество() <> 0 Тогда
				
				Для каждого Элемент Из СообщенияПартии[Индекс] Цикл
					ОбщегоНазначения.СообщитьПользователю(Элемент.Представление,, Элемент.Значение,, Отказ);
				КонецЦикла;
				
				// Переключение страницы
				ПредыдущаяПартия = ТекущаяПартия;
				ТекущаяПартия = Индекс;
				НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ТекущаяПартия");
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИзделиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПоказатьИзделие" Тогда
		
		ПоказатьЗначение(, Объект.ОсновноеИзделиеНоменклатура);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ПоказатьХарактеристикуИзделия" Тогда
		
		ПоказатьЗначение(, Объект.ОсновноеИзделиеХарактеристика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЕстьОперации = Ложь;
	АдресПроизводственныйПроцессПартии = ПроизводственныйПроцессПартииВХранилище(
		Объект.ПартияПроизводства, УникальныйИдентификатор, ЕстьОперации);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресВХранилище", АдресПроизводственныйПроцессПартии);
	
	Если Объект.Операция.Пустая() Тогда
		СтруктураПараметров.Вставить("ТекущаяСсылка", Объект.Этап);
	Иначе
		СтруктураПараметров.Вставить("ТекущаяСсылка", Объект.Операция);
		СтруктураПараметров.Вставить("ТекущийИдентификаторОперации", Объект.ИдентификаторОперации);
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый Массив;
	
	Реквизит = Новый Структура;
	Реквизит.Вставить("Имя", "НомерДокумента");
	Реквизит.Вставить("Заголовок", НСтр("ru = 'Номер';
										|en = 'Number'"));
	Реквизит.Вставить("Тип", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
	ДополнительныеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый Структура;
	Реквизит.Вставить("Имя", "Статус");
	Реквизит.Вставить("Заголовок", НСтр("ru = 'Статус';
										|en = 'Status'"));
	Реквизит.Вставить("Тип", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
	ДополнительныеРеквизиты.Добавить(Реквизит);
	
	Если ЕстьОперации Тогда
		Реквизит = Новый Структура;
		Реквизит.Вставить("Имя", "ОперацийКНазначениюПредставление");
		Реквизит.Вставить("Заголовок", НСтр("ru = 'К назначению';
											|en = 'To assign'"));
		Реквизит.Вставить("Тип", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
		ДополнительныеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭлементаПроизводственногоПроцесса",
		СтруктураПараметров,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЭтапПредставлениеВыбор", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеВыбор(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Объект.Этап = РезультатЗакрытия.Этап;
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.Операция) Тогда
			Объект.Операция = РезультатЗакрытия.Операция;
			Объект.ИдентификаторОперации = РезультатЗакрытия.ИдентификаторОперации;
		Иначе
			Объект.Операция = Неопределено;
			Объект.ИдентификаторОперации = 0;
		КонецЕсли;
		
		ЭтапПредставлениеВыборНаСервере(КэшированныеЗначения);
		
		Если ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
			ПриНачалеРедактированияПартии();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭтапПредставлениеВыборНаСервере(КэшированныеЗначения)
	
	Если ЗначениеЗаполнено(Объект.Операция) Тогда
		Дерево = ПолучитьИзВременногоХранилища(АдресПроизводственныйПроцессПартии);
		СтрокаОперация = Дерево.Строки.Найти(Объект.Операция, "Ссылка", Истина);
		Если СтрокаОперация = Неопределено
				Или СтрокаОперация.Родитель = Неопределено Тогда
			Объект.ЭтоПерваяОперация = Ложь;
			Объект.ЭтоПоследняяОперация = Ложь;
		Иначе
			СтрокаРодитель = СтрокаОперация.Родитель; // СтрокаДереваЗначений
			Объект.ЭтоПерваяОперация = СтрокаРодитель.Строки.Индекс(СтрокаОперация) = 0;
			Объект.ЭтоПоследняяОперация = СтрокаОперация.НомерСледующего = 0;
		КонецЕсли;
	Иначе
		Объект.ЭтоПерваяОперация = Ложь;
		Объект.ЭтоПоследняяОперация = Ложь;
	КонецЕсли;
	
	ПриИзмененииЭтапа(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Этап = Неопределено;
	Объект.Операция = Неопределено;
	Объект.ИдентификаторОперации = 0;
	Объект.ЭтоПерваяОперация = Ложь;
	Объект.ЭтоПоследняяОперация = Ложь;
	
	ПриИзмененииЭтапа(КэшированныеЗначения);
	
	Если ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
		ПриНачалеРедактированияПартии();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЭтапа(КэшированныеЗначения)
	
	СписокРеквизитов = "Этап, Операция";
	ДанныеЭтапа = ДанныеЭтапа(Объект, ИзделиеЕдиницаИзмерения);
	Если ДанныеЭтапа <> Неопределено Тогда
		ЗаполнитьПоДаннымЭтапа(ДанныеЭтапа);
		ПрочитатьПараметрыАвтовыбора();
		НастроитьПартии();
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
		
		Если ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
			НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока),
				КэшированныеЗначения,
				ПараметрыУказанияСерий);
		КонецЕсли;
	Иначе
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СписокРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.Этап.Пустая() Тогда
		ПоказатьЗначение(, Объект.Этап);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСократитьПриИзменении(Элемент)
	
	КоличествоПартий = 1;
	ПриИзмененииДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтменитьПриИзменении(Элемент)
	
	КоличествоПартий = 1;
	ПриИзмененииДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРазделитьПриИзменении(Элемент)
	
	КоличествоПартий = КоличествоПартийРазделить;
	ПриИзмененииДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПродолжитьПриИзменении(Элемент)
	
	КоличествоПартий = 1;
	ПриИзмененииДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеБракПриИзменении(Элемент)
	
	ПриИзмененииДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПартийРазделитьПриИзменении(Элемент)
	
	КоличествоПартий = КоличествоПартийРазделить;
	ПриИзмененииДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокБракПриИзменении(Элемент)
	
	ПриИзмененииДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаПартияРазделитьНажатие(Элемент)
	
	ОчиститьСообщения(); // Очистка сообщений проверки заполнения
	
	ПредыдущаяПартия = ТекущаяПартия;
	ТекущаяПартия = Число(Прав(Элемент.Имя, 3));
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ТекущаяПартия");
	
	Если ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
		
		ПриНачалеРедактированияПартии();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаБракНажатие(Элемент)
	
	ОчиститьСообщения(); // Очистка сообщений проверки заполнения
	
	ПредыдущаяПартия = ТекущаяПартия;
	ТекущаяПартия = 0;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ТекущаяПартия");
	ПриНачалеРедактированияПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаБракОстатокНажатие(Элемент)
	
	ОчиститьСообщения(); // Очистка сообщений проверки заполнения
	
	ПредыдущаяПартия = ТекущаяПартия;
	ТекущаяПартия = 1;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ТекущаяПартия");
	ПриНачалеРедактированияПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураФормаОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	Если ТекущиеДанные.АвтовыборНоменклатуры Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.АвтовыборНоменклатурыЭтоРабота
				Или ТекущиеДанные.АвтовыборНоменклатурыЭтоПромежуточноеИзделие Тогда
			ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		ИначеЕсли Объект.Действие = Действия().Брак И ТекущиеДанные.НомерСтроки = 1 Тогда
			// Номенклатура - не годен
			Если ПараметрыАвтовыбора.НоменклатураНеГоден.Пустая() Тогда
				ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
			Иначе
				ПоказатьЗначение(, ПараметрыАвтовыбора.НоменклатураНеГоден);
			КонецЕсли;
		Иначе
			// Номенклатура - ограниченно годен
			Если ПараметрыАвтовыбора.Номенклатура.Пустая() Тогда
				ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
			Иначе
				ПоказатьЗначение(, ПараметрыАвтовыбора.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	// Изменение реквизита в ТЧ см. ПартииХарактеристикаПриИзменении
	
	ТекущаяСтрока = Элементы.Партии.ТекущиеДанные;
	ТекущаяСтрока.Характеристика = ТекущаяСтрока.ХарактеристикаФорма;
	
	РассчитатьПроцентЗатрат = ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
		Элементы.Партии,
		ПараметрыРаспределенияЗатрат,
		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтотОбъект));
	
	ОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ХарактеристикаПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения);
	
	Если РассчитатьПроцентЗатрат Тогда
		РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтотОбъект);
	КонецЕсли;
	
	Если ОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХарактеристикаПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СписокРеквизитов = "";
	
	Если РассчитатьПроцентЗатрат Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "ДоляСтоимостиПроцент";
	КонецЕсли;
	
	Если ОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			Элементы.Партии.ТекущаяСтрока, КэшированныеЗначения);
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "СтатусыУказанияСерий";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СписокРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			Элементы.Партии.ТекущаяСтрока, КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СтатусыУказанияСерий");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	// Изменение реквизита в ТЧ см. ПартииКоличествоУпаковокПриИзменении
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Партии.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьПроцентЗатрат = ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
		Элементы.Партии,
		ПараметрыРаспределенияЗатрат,
		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтотОбъект));
	
	ОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	Если РассчитатьПроцентЗатрат ИЛИ ОбновитьСтатусыСерий Тогда
		
		КоличествоУпаковокПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения);
	
		Если РассчитатьПроцентЗатрат Тогда
			РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтотОбъект);
		КонецЕсли;
		
		Если ОбновитьСтатусыСерий Тогда
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КоличествоУпаковокПриИзмененииНаСервере(РассчитатьПроцентЗатрат, ОбновитьСтатусыСерий, КэшированныеЗначения)
	
	СписокРеквизитов = "";
	
	Если РассчитатьПроцентЗатрат Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "ДоляСтоимостиПроцент";
	КонецЕсли;
	
	Если ОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			Элементы.Партии.ТекущаяСтрока, КэшированныеЗначения);
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "СтатусыУказанияСерий";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СписокРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	// Изменение реквизита в ТЧ см. ПартииПолучательПриИзменении
	
	ОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПолучательПриИзмененииНаСервере(Элементы.Партии.ТекущаяСтрока, ОбновитьСтатусыСерий, КэшированныеЗначения);
	
	Если ОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучательПриИзмененииНаСервере(ТекущаяСтрокаИдентификатор, ОбновитьСтатусыСерий, КэшированныеЗначения)
	
	ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипСклада",
		Новый Структура("Склад, ТипСклада", "Получатель", "ТипСклада"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Получатель, ПараметрыУказанияСерий));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			ТекущиеДанные.ПолучитьИдентификатор(), КэшированныеЗначения);
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СтатусыУказанияСерий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляСтоимостиПроцентНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВводаДолиСтоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОшибкиЗаполненияДолиСтоимостиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВводаДолиСтоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляСтоимостиПриИзменении(Элемент)
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элементы.Партии,
			ПараметрыРаспределенияЗатрат,
			РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтотОбъект)) Тогда
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтотОбъект);
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДоляСтоимостиПроцент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеВыпускаФормаПриИзменении(Элемент)
	
	// Изменение реквизита в ТЧ см. ПартииНаправлениеВыпускаФормаПриИзменении
	
	НаправлениеВыпускаФормаПриИзмененииНаСервере(Истина, КэшированныеЗначения);
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтотОбъект);
		
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеВыпускаФормаПриИзмененииНаСервере(ОбновитьСвязанныеДанные, КэшированныеЗначения)
	
	ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.НаправлениеВыпускаФорма)
		И Элементы.НаправлениеВыпускаФорма.СписокВыбора.Количество() <> 0 Тогда
		ТекущиеДанные.НаправлениеВыпускаФорма = Элементы.НаправлениеВыпускаФорма.СписокВыбора[0].Значение;
	КонецЕсли;
	
	СписокРеквизитов = "НаправлениеВыпускаФорма";
	
	ПриИзмененииНаправленияВыпускаФорма(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения);
	НастроитьАвтовыборНоменклатуры(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения);
	
	Если ОбновитьСвязанныеДанные Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		СписокРеквизитов = СписокРеквизитов + ", ДоляСтоимостиПроцент";
	
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			ТекущиеДанные.ПолучитьИдентификатор(), КэшированныеЗначения);
		СписокРеквизитов = СписокРеквизитов + ", СтатусыУказанияСерий";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СписокРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы.ПартииСтатьяРасходов);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СтатьяРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья",          Элементы.Партии.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОграничениеТипа", Элемент.ОграничениеТипа);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияОперацииНажатие(Элемент, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(
		ЭтотОбъект,
		Элементы.ПартииПредставлениеОтраженияОперации,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПартииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	ТекущиеДанные.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		ТекущиеДанные.УпаковкаПартии,
		ТекущиеДанные.КоличествоУпаковокПартии);
	
	ТекущиеДанные.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ТекущиеДанные);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "КоличествоПартии");
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПартииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	ТекущиеДанные.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		ТекущиеДанные.УпаковкаПартии,
		ТекущиеДанные.КоличествоУпаковокПартии);
	
	ТекущиеДанные.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ТекущиеДанные);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "КоличествоПартии");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	ТекущиеДанные.ПродолжитьЭтап = Неопределено;
	ТекущиеДанные.ПродолжитьЭтапПредставление = "";
	ТекущиеДанные.ПродолжитьЭтапПодразделение = Неопределено;
	ТекущиеДанные.ПродолжитьОперация = Неопределено;
	ТекущиеДанные.ПродолжитьИдентификаторОперации = 0;
	
	Если ТекущиеДанные.ПродолжитьСпецификация.Пустая() Тогда
		ТекущиеДанные.АдресПроизводственныйПроцесс = "";
	ИначеЕсли ТекущиеДанные.ПродолжитьСпецификация = Объект.Спецификация Тогда
		ТекущиеДанные.АдресПроизводственныйПроцесс = АдресПроизводственныйПроцесс;
	Иначе
		ТекущиеДанные.АдресПроизводственныйПроцесс = ПроизводственныйПроцессВХранилище(
			ТекущиеДанные.ПродолжитьСпецификация, УникальныйИдентификатор);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПродолжитьСпецификация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЭтапПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	ТекущиеДанные.ПродолжитьЭтап = Неопределено;
	ТекущиеДанные.ПродолжитьЭтапПредставление = "";
	ТекущиеДанные.ПродолжитьЭтапПодразделение = Неопределено;
	ТекущиеДанные.ПродолжитьОперация = Неопределено;
	ТекущиеДанные.ПродолжитьИдентификаторОперации = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЭтапПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	Если Не ТекущиеДанные.ПродолжитьЭтап.Пустая() Тогда
		ПоказатьЗначение(, ТекущиеДанные.ПродолжитьЭтап);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЭтапПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресВХранилище", ТекущиеДанные.АдресПроизводственныйПроцесс);
	
	Если ТекущиеДанные.ПродолжитьОперация.Пустая() Тогда
		СтруктураПараметров.Вставить("ТекущаяСсылка", ТекущиеДанные.ПродолжитьЭтап);
	Иначе
		СтруктураПараметров.Вставить("ТекущаяСсылка", ТекущиеДанные.ПродолжитьОперация);
		СтруктураПараметров.Вставить("ТекущийИдентификаторОперации", ТекущиеДанные.ПродолжитьИдентификаторОперации);
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭлементаПроизводственногоПроцесса",
		СтруктураПараметров,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПродолжитьЭтапПредставлениеНачалоВыбораЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЭтапПредставлениеНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
		ТекущиеДанные.ПродолжитьЭтап = РезультатЗакрытия.Этап;
		ТекущиеДанные.ПродолжитьЭтапПодразделение = РезультатЗакрытия.Подразделение;
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.Операция) Тогда
			ТекущиеДанные.ПродолжитьЭтапПредставление =
				СтрШаблон("%1 / %2", РезультатЗакрытия.ЭтапПредставление, РезультатЗакрытия.ОперацияПредставление);
			ТекущиеДанные.ПродолжитьОперация = РезультатЗакрытия.Операция;
			ТекущиеДанные.ПродолжитьИдентификаторОперации = РезультатЗакрытия.ИдентификаторОперации;
		Иначе
			ТекущиеДанные.ПродолжитьЭтапПредставление = РезультатЗакрытия.ЭтапПредставление;
			ТекущиеДанные.ПродолжитьОперация = Неопределено;
			ТекущиеДанные.ПродолжитьИдентификаторОперации = 0;
		КонецЕсли;
		
		Если ТекущиеДанные.АвтовыборНоменклатурыЭтоРабота Тогда
			ТекущиеДанные.Получатель = ТекущиеДанные.ПродолжитьЭтапПодразделение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимПриИзменении(Элемент)
	
	ПростойРежим = Булево(ПростойРежимФорма);
	
	Если ПростойРежим Тогда
		НастроитьПартии();
	Иначе
		ПриНачалеРедактированияПартии();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьНастройки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимКоличествоУпаковокРазделитьПриИзменении(Элемент)
	
	ПростойРежимКоличествоУпаковокРазделитьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПростойРежимКоличествоУпаковокРазделитьПриИзмененииНаСервере()
	
	// Настройка партий
	Если ВыпускИзделий.Количество() > 0 Тогда
		ПоследняяПартия = Объект.Партии[Объект.Партии.Количество()-1];
		
		ПоследняяПартия.КоличествоУпаковокПартии = ПростойРежимКоличествоУпаковок;
		ПоследняяПартия.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
			Объект.ОсновноеИзделиеНоменклатура,
			ПоследняяПартия.УпаковкаПартии,
			ПоследняяПартия.КоличествоУпаковокПартии);
		
		Если Не ПоследняяПартия.АвтовыборНоменклатурыЭтоРабота Тогда
			ПоследняяПартия.КоличествоУпаковок = ПоследняяПартия.КоличествоУпаковокПартии;
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПоследняяПартия, СтруктураДействий, Неопределено);
		КонецЕсли;
		
		ПоследняяПартия.ДоляСтоимости = ПоследняяПартия.КоличествоУпаковокПартии;
	Иначе
		ПерваяПартия = Объект.Партии[0];
		ВтораяПартия = Объект.Партии[1];
		
		// Первая партия
		ПерваяПартия.КоличествоУпаковокПартии = Объект.КоличествоУпаковок - ПростойРежимКоличествоУпаковок;
		ПерваяПартия.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
			Объект.ОсновноеИзделиеНоменклатура,
			ПерваяПартия.УпаковкаПартии,
			ПерваяПартия.КоличествоУпаковокПартии);
		
		Если Не ПерваяПартия.АвтовыборНоменклатурыЭтоРабота Тогда
			ПерваяПартия.КоличествоУпаковок = ПерваяПартия.КоличествоУпаковокПартии;
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПерваяПартия, СтруктураДействий, Неопределено);
		КонецЕсли;
		
		ПерваяПартия.ДоляСтоимости = ПерваяПартия.КоличествоУпаковокПартии;
		
		// Вторая партия
		ВтораяПартия.КоличествоУпаковокПартии = ПростойРежимКоличествоУпаковок;
		ВтораяПартия.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
			Объект.ОсновноеИзделиеНоменклатура,
			ВтораяПартия.УпаковкаПартии,
			ВтораяПартия.КоличествоУпаковокПартии);
		
		Если Не ВтораяПартия.АвтовыборНоменклатурыЭтоРабота Тогда
			ВтораяПартия.КоличествоУпаковок = ВтораяПартия.КоличествоУпаковокПартии;
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ВтораяПартия, СтруктураДействий, Неопределено);
		КонецЕсли;
		
		ВтораяПартия.ДоляСтоимости = ВтораяПартия.КоличествоУпаковокПартии;
	КонецЕсли;
	
	// Служебные действия
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимРазделитьПродолжитьПриИзменении(Элемент)
	
	Объект.Партии[Объект.Партии.Количество()-1].НаправлениеВыпускаФорма = ПростойРежимНаправлениеВыпуска;
	ПростойРежимРазделитьНаправлениеВыпускаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимРазделитьНаСкладПриИзменении(Элемент)
	
	Объект.Партии[Объект.Партии.Количество()-1].НаправлениеВыпускаФорма = ПростойРежимНаправлениеВыпуска;
	ПростойРежимРазделитьНаправлениеВыпускаПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПростойРежимРазделитьНаправлениеВыпускаПриИзменении()
	
	ПоследняяПартия = Объект.Партии[Объект.Партии.Количество()-1];
	
	ПриИзмененииНаправленияВыпускаФорма(ПоследняяПартия, "");
	НастроитьАвтовыборНоменклатуры(ПоследняяПартия, "");
	
	Если Не ПоследняяПартия.ПродолжитьОбработку Тогда
		ПоследняяПартия.КоличествоУпаковок = ПростойРежимКоличествоУпаковок;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПоследняяПартия, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПростойРежимПолучатель = ПоследняяПартия.Получатель;
	Элементы.ПростойРежимРазделитьПолучатель.ОграничениеТипа = ОграничениеТипаПолучателя(ПоследняяПартия);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимРазделитьНаправлениеВыпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимРазделитьПолучательПриИзменении(Элемент)
	
	ПоследняяПартия = Объект.Партии[Объект.Партии.Количество()-1];
	ПоследняяПартия.Получатель = ПростойРежимПолучатель;
	
	ПростойРежимРазделитьПолучательПриИзмененииНаСервере(ПоследняяПартия.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ПростойРежимРазделитьПолучательПриИзмененииНаСервере(ТекущаяСтрокаИдентификатор)
	
	ПолучательПриИзмененииНаСервере(ТекущаяСтрокаИдентификатор, Ложь, Неопределено);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракНоменклатураПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПараметрыАвтовыбора.НоменклатураНеГоден.Пустая() Тогда
		ПоказатьЗначение(, ПараметрыАвтовыбора.НоменклатураНеГоден);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимКоличествоУпаковокБракПриИзменении(Элемент)
	
	ПриИзмененииДействияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйРежимКоличествоУпаковокБракПриИзменении(Элемент)
	
	ПриИзмененииДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракНаСкладПриИзменении(Элемент)
	
	Объект.Партии[0].НаправлениеВыпускаФорма = ПростойРежимНаправлениеВыпуска;
	ПростойРежимБракНаправлениеВыпускаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракСписатьПриИзменении(Элемент)
	
	Объект.Партии[0].НаправлениеВыпускаФорма = ПростойРежимНаправлениеВыпуска;
	ПростойРежимБракНаправлениеВыпускаПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПростойРежимБракНаправлениеВыпускаПриИзменении()
	
	ПерваяПартия = Объект.Партии[0];
	
	ПриИзмененииНаправленияВыпускаФорма(ПерваяПартия, "");
	НастроитьАвтовыборНоменклатуры(ПерваяПартия, "");
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПростойРежимПолучатель = ПерваяПартия.Получатель;
	Элементы.ПростойРежимБракПолучатель.ОграничениеТипа = ОграничениеТипаПолучателя(ПерваяПартия);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимБракНаправлениеВыпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракПолучательПриИзменении(Элемент)
	
	ПерваяПартия = Объект.Партии[0];
	ПерваяПартия.Получатель = ПростойРежимПолучатель;
	
	ПростойРежимБракПолучательПриИзмененииНаСервере(ПерваяПартия.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ПростойРежимБракПолучательПриИзмененииНаСервере(ТекущаяСтрокаИдентификатор)
	
	ПолучательПриИзмененииНаСервере(ТекущаяСтрокаИдентификатор, Ложь, Неопределено);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимБракПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы.ПартииСтатьяРасходов);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимБракСтатьяРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерваяПартия = Объект.Партии[0];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья",          ПерваяПартия.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОграничениеТипа", Элемент.ОграничениеТипа);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимОтменитьНоменклатураПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Партии[0].АвтовыборНоменклатурыЭтоПромежуточноеИзделие Тогда
		ПоказатьЗначение(, Объект.ПромежуточноеИзделиеНоменклатура);
	ИначеЕсли Не ПараметрыАвтовыбора.Номенклатура.Пустая() Тогда
		ПоказатьЗначение(, ПараметрыАвтовыбора.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимОтменитьНаСкладПриИзменении(Элемент)
	
	Объект.Партии[0].НаправлениеВыпускаФорма = ПростойРежимНаправлениеВыпуска;
	ПростойРежимОтменитьНаправлениеВыпускаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимОтменитьСписатьПриИзменении(Элемент)
	
	Объект.Партии[0].НаправлениеВыпускаФорма = ПростойРежимНаправлениеВыпуска;
	ПростойРежимОтменитьНаправлениеВыпускаПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПростойРежимОтменитьНаправлениеВыпускаПриИзменении()
	
	ПерваяПартия = Объект.Партии[0];
	
	ПриИзмененииНаправленияВыпускаФорма(ПерваяПартия, "");
	НастроитьАвтовыборНоменклатуры(ПерваяПартия, "");
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПростойРежимПолучатель = ПерваяПартия.Получатель;
	Элементы.ПростойРежимОтменитьПолучатель.ОграничениеТипа = ОграничениеТипаПолучателя(ПерваяПартия);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимОтменитьНаправлениеВыпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимОтменитьПолучательПриИзменении(Элемент)
	
	ПерваяПартия = Объект.Партии[0];
	ПерваяПартия.Получатель = ПростойРежимПолучатель;
	
	ПростойРежимОтменитьПолучательПриИзмененииНаСервере(ПерваяПартия.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ПростойРежимОтменитьПолучательПриИзмененииНаСервере(ТекущаяСтрокаИдентификатор)
	
	ПолучательПриИзмененииНаСервере(ТекущаяСтрокаИдентификатор, Ложь, Неопределено);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимОтменитьПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимОтменитьСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы.ПартииСтатьяРасходов);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимОтменитьСтатьяРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимОтменитьСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерваяПартия = Объект.Партии[0];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья",          ПерваяПартия.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	ПараметрыФормы.Вставить("ОграничениеТипа", Элемент.ОграничениеТипа);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимСократитьКоличествоУпаковокПартииПриИзменении(Элемент)
	
	ПерваяПартия = Объект.Партии[0];
	
	ПерваяПартия.КоличествоУпаковокПартии = ПростойРежимКоличествоУпаковок;
	ПерваяПартия.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		ПерваяПартия.УпаковкаПартии,
		ПерваяПартия.КоличествоУпаковокПартии);
	
	ПерваяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ПерваяПартия);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимКоличествоУпаковок");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимСократитьУпаковкаПартииПриИзменении(Элемент)
	
	ПерваяПартия = Объект.Партии[0];
	
	ПерваяПартия.УпаковкаПартии = ПростойРежимУпаковка;
	ПерваяПартия.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		ПерваяПартия.УпаковкаПартии,
		ПерваяПартия.КоличествоУпаковокПартии);
	
	ПерваяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ПерваяПартия);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимКоличествоУпаковок");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииИзменитьВыпускаемоеИзделиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	Если ТекущиеДанные.ИзменитьВыпускаемоеИзделие Тогда
		ТекущиеДанные.ПродолжитьНоменклатура = Неопределено;
		ТекущиеДанные.ПродолжитьХарактеристика = Неопределено;
	Иначе
		ТекущиеДанные.ПродолжитьНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
		ТекущиеДанные.ПродолжитьХарактеристика = Объект.ОсновноеИзделиеХарактеристика;
		ТекущиеДанные.ОтменитьИзделиеВЗаказе = Ложь;
		ТекущиеДанные.ПричинаОтменыИзделия = Неопределено;
	КонецЕсли;
	
	ТекущиеДанные.ПродолжитьСпецификация = Неопределено;
	ТекущиеДанные.ПродолжитьЭтап = Неопределено;
	ТекущиеДанные.ПродолжитьЭтапПредставление = "";
	ТекущиеДанные.ПродолжитьЭтапПодразделение = Неопределено;
	ТекущиеДанные.ПродолжитьОперация = Неопределено;
	ТекущиеДанные.ПродолжитьИдентификаторОперации = 0;
	ТекущиеДанные.АдресПроизводственныйПроцесс = "";
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,
		"ИзменитьВыпускаемоеИзделие,ПродолжитьНоменклатура,ПродолжитьСпецификация,ОтменитьИзделиеВЗаказе");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьНоменклатураПриИзменении(Элемент)
	
	ПродолжитьНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьНоменклатураПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	
	СтрокаКопия = Новый Структура;
	СтрокаКопия.Вставить("Номенклатура", ТекущиеДанные.ПродолжитьНоменклатура);
	СтрокаКопия.Вставить("Характеристика", ТекущиеДанные.ПродолжитьХарактеристика);
	СтрокаКопия.Вставить("ПродолжитьСпецификация", ТекущиеДанные.ПродолжитьСпецификация);
	СтрокаКопия.Вставить("ХарактеристикиИспользуются", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.ПродолжитьХарактеристика);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСпецификация", "ПродолжитьСпецификация");
	
	ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект, ТекущиеДанные, ПараметрыВыбораСпецификаций, ЭтотОбъект, ДополнительныеПараметры);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКопия, СтруктураДействий, Неопределено);
	
	ТекущиеДанные.ПродолжитьХарактеристика = СтрокаКопия.Характеристика;
	ТекущиеДанные.ПродолжитьХарактеристикиИспользуются = СтрокаКопия.ХарактеристикиИспользуются;
	
	ТекущиеДанные.ПродолжитьСпецификация = СтрокаКопия.ПродолжитьСпецификация;
	ТекущиеДанные.ПродолжитьЭтап = Неопределено;
	ТекущиеДанные.ПродолжитьЭтапПредставление = "";
	ТекущиеДанные.ПродолжитьЭтапПодразделение = Неопределено;
	ТекущиеДанные.ПродолжитьОперация = Неопределено;
	ТекущиеДанные.ПродолжитьИдентификаторОперации = 0;
	ТекущиеДанные.АдресПроизводственныйПроцесс = ПроизводственныйПроцессВХранилище(
		ТекущиеДанные.ПродолжитьСпецификация, УникальныйИдентификатор);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПродолжитьНоменклатура,ПродолжитьСпецификация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзделиеВЗаказеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ОтменитьИзделиеВЗаказе Тогда
		ТекущиеДанные.ПричинаОтменыИзделия = Неопределено;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтменитьИзделиеВЗаказе");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимРазделитьОтменитьИзделиеВЗаказеПриИзменении(Элемент)
	
	ПоследняяПартия = Объект.Партии[Объект.Партии.Количество()-1];
	
	ПоследняяПартия.ОтменитьИзделиеВЗаказе = ПростойРежимОтменитьИзделиеВЗаказе;
	
	Если Не ПростойРежимОтменитьИзделиеВЗаказе Тогда
		ПоследняяПартия.ПричинаОтменыИзделия = Неопределено;
		ПростойРежимПричинаОтменыИзделия = Неопределено;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимРазделитьОтменитьИзделиеВЗаказе");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимРазделитьОтменитьИзделиеВЗаказеЗаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимРазделитьПричинаОтменыИзделияПриИзменении(Элемент)
	
	Объект.Партии[Объект.Партии.Количество()-1].ПричинаОтменыИзделия = ПростойРежимПричинаОтменыИзделия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракОтменитьИзделиеВЗаказеПриИзменении(Элемент)
	
	Объект.Партии[0].ОтменитьИзделиеВЗаказе = ПростойРежимОтменитьИзделиеВЗаказе;
	
	Если Не ПростойРежимОтменитьИзделиеВЗаказе Тогда
		Объект.Партии[0].ПричинаОтменыИзделия = Неопределено;
		ПростойРежимПричинаОтменыИзделия = Неопределено;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимБракОтменитьИзделиеВЗаказе");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракПричинаОтменыИзделияПриИзменении(Элемент)
	
	Объект.Партии[0].ПричинаОтменыИзделия = ПростойРежимПричинаОтменыИзделия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимБракОтменитьИзделиеВЗаказеЗаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимОтменитьИзделиеВЗаказеПриИзменении(Элемент)
	
	Объект.Партии[0].ОтменитьИзделиеВЗаказе = ПростойРежимОтменитьИзделиеВЗаказе;
	
	Если Не ПростойРежимОтменитьИзделиеВЗаказе Тогда
		Объект.Партии[0].ПричинаОтменыИзделия = Неопределено;
		ПростойРежимПричинаОтменыИзделия = Неопределено;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимОтменитьИзделиеВЗаказе");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимПричинаОтменыИзделияПриИзменении(Элемент)
	
	Объект.Партии[0].ПричинаОтменыИзделия = ПростойРежимПричинаОтменыИзделия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимОтменитьИзделиеВЗаказеЗаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимСократитьОтменитьИзделиеВЗаказеПриИзменении(Элемент)
	
	Объект.Партии[0].ОтменитьИзделиеВЗаказе = ПростойРежимОтменитьИзделиеВЗаказе;
	
	Если Не ПростойРежимОтменитьИзделиеВЗаказе Тогда
		Объект.Партии[0].ПричинаОтменыИзделия = Неопределено;
		ПростойРежимПричинаОтменыИзделия = Неопределено;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПростойРежимСократитьОтменитьИзделиеВЗаказе");
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимСократитьПричинаОтменыИзделияПриИзменении(Элемент)
	
	Объект.Партии[0].ПричинаОтменыИзделия = ПростойРежимПричинаОтменыИзделия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимСократитьОтменитьИзделиеВЗаказеЗаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Распоряжение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПартии

&НаКлиенте
Процедура ПартииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	Если (Поле = Элементы.ПартииСерия 
			ИЛИ Поле = Элементы.ПартииСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПодборСерий();
		
	КонецЕсли;
	
	Если (Поле = Элементы.ПартииДоляСтоимостиПроцент
			ИЛИ Поле = Элементы.ПартииЕстьОшибкиЗаполненияДолиСтоимости)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия
			<> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости();
		
	КонецЕсли;
	
	Если Поле = Элементы.ПартииНазначенияПредставление
		И ТекущиеДанные.ИспользоватьНазначения Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПодборНазначений();
		
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияПартии();
	
	Если НоваяСтрока И Копирование Тогда
		
		// Настройка счетов учета.
		НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СписокРеквизитов = "";
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент,
			ПараметрыРаспределенияЗатрат,
			РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Партии, ЭтотОбъект),
			НоваяСтрока) Тогда
			
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "ДоляСтоимостиПроцент";
		
	КонецЕсли;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			Элементы.Партии.ТекущаяСтрока, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
		СписокРеквизитов = СписокРеквизитов
			+ ?(ПустаяСтрока(СписокРеквизитов), "", ",")
			+ "СтатусыУказанияСерий";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СписокРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Партии.ТекущиеДанные;
	ТекущаяСтрока.Номенклатура = ТекущаяСтрока.НоменклатураФорма;
	
	ОбновитьСвязанныеДанные = (ТекущаяПартия <> ИндексыПартий().ВсеПартии);
	
	ПартииНоменклатураФормаПриИзмененииНаСервере(ОбновитьСвязанныеДанные, КэшированныеЗначения);
	
	Если ОбновитьСвязанныеДанные Тогда
		РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Партии, ЭтотОбъект);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Партии, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаправлениеВыпускаФорма();
	
КонецПроцедуры

&НаСервере
Процедура ПартииНоменклатураФормаПриИзмененииНаСервере(ОбновитьСвязанныеДанные, КэшированныеЗначения)
	
	ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	СписокРеквизитов = "Номенклатура";
	
	НастроитьАвтовыборНоменклатуры(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения);
	
	Если Не ТекущиеДанные.НоменклатураФорма.Пустая() Тогда
		ПартииНоменклатураПриИзмененииНаСервере(ТекущиеДанные, КэшированныеЗначения);
		
		// Авторасчет количества
		НастроитьАвторасчетКоличества(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения);
		
		// Направление выпуска (контроль)
		СписокВыбора = СписокВыбораНаправлениеВыпускаФорма(ЭтотОбъект, ТекущиеДанные);
		Если СписокВыбора.НайтиПоЗначению(ТекущиеДанные.НаправлениеВыпускаФорма) = Неопределено Тогда
			Если ТекущиеДанные.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение
				И СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад) <> Неопределено Тогда
				ТекущиеДанные.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
			ИначеЕсли ТекущиеДанные.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
				И СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение) <> Неопределено Тогда
				ТекущиеДанные.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
			Иначе
				ТекущиеДанные.НаправлениеВыпускаФорма = СписокВыбора[0].Значение;
			КонецЕсли;
			ПриИзмененииНаправленияВыпускаФорма(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения);
		Иначе
			Если ПривестиТипПолучателя(ТекущиеДанные) Тогда
				ПолучательПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Ложь, КэшированныеЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьСвязанныеДанные Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		СписокРеквизитов = СписокРеквизитов + ", ДоляСтоимостиПроцент";
	
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			ТекущиеДанные.ПолучитьИдентификатор(), КэшированныеЗначения);
		СписокРеквизитов = СписокРеквизитов + ", СтатусыУказанияСерий";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СписокРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПартииНоменклатураПриИзмененииНаСервере(ТекущиеДанные, КэшированныеЗначения = Неопределено)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", ПараметрДействияЗаполнитьНазначение(ТекущиеДанные));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Получатель, ПараметрыУказанияСерий));
	
	ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
		ТекущиеДанные.Подразделение, СтруктураДействий, "Получатель");
	ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(
		СтруктураДействий, ЭтотОбъект, "Объект.Партии");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущиеДанные.АвтовыборНоменклатуры Тогда
		ТекущиеДанные.ХарактеристикаФорма = ТекущиеДанные.Характеристика;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииНоменклатураФормаОткрытие(Элемент, СтандартнаяОбработка)
	
	НоменклатураФормаОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииХарактеристикаПриИзменении(Элемент)
	
	// Изменение реквизита в шапке см. ХарактеристикаПриИзменении
	
	ТекущаяСтрока = Элементы.Партии.ТекущиеДанные;
	ТекущаяСтрока.Характеристика = ТекущаяСтрока.ХарактеристикаФорма;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииКоличествоУпаковокПриИзменении(Элемент)
	
	// Изменение реквизита в шапке см. КоличествоУпаковокПриИзменении
	
	ТекущаяСтрока = Элементы.Партии.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Партии.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Партии.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Партии.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПолучательПриИзменении(Элемент)
	
	// Изменение реквизита в шапке см. ПолучательПриИзменении
	
	ПолучательПриИзмененииНаСервере(Элементы.Партии.ТекущаяСтрока, Ложь, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииНаправлениеВыпускаФормаПриИзменении(Элемент)
	
	// Изменение реквизита в шапке см. НаправлениеВыпускаФормаПриИзменении
	
	НаправлениеВыпускаФормаПриИзмененииНаСервере(Ложь, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СтатьяРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииКоличествоУпаковокПартииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	ТекущиеДанные.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		ТекущиеДанные.УпаковкаПартии,
		ТекущиеДанные.КоличествоУпаковокПартии);
	
	ТекущиеДанные.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииУпаковкаПартииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	ТекущиеДанные.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
		Объект.ОсновноеИзделиеНоменклатура,
		ТекущиеДанные.УпаковкаПартии,
		ТекущиеДанные.КоличествоУпаковокПартии);
	
	ТекущиеДанные.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПродолжитьСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	ТекущиеДанные.ПродолжитьЭтап = Неопределено;
	ТекущиеДанные.ПродолжитьЭтапПредставление = "";
	ТекущиеДанные.ПродолжитьЭтапПодразделение = Неопределено;
	ТекущиеДанные.ПродолжитьОперация = Неопределено;
	ТекущиеДанные.ПродолжитьИдентификаторОперации = 0;
	
	Если ТекущиеДанные.ПродолжитьСпецификация.Пустая() Тогда
		ТекущиеДанные.АдресПроизводственныйПроцесс = "";
	ИначеЕсли ТекущиеДанные.ПродолжитьСпецификация = Объект.Спецификация Тогда
		ТекущиеДанные.АдресПроизводственныйПроцесс = АдресПроизводственныйПроцесс;
	Иначе
		ТекущиеДанные.АдресПроизводственныйПроцесс = ПроизводственныйПроцессВХранилище(
			ТекущиеДанные.ПродолжитьСпецификация, УникальныйИдентификатор);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ПродолжитьСпецификация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПродолжитьЭтапПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	ТекущиеДанные.ПродолжитьЭтап = Неопределено;
	ТекущиеДанные.ПродолжитьЭтапПредставление = "";
	ТекущиеДанные.ПродолжитьЭтапПодразделение = Неопределено;
	ТекущиеДанные.ПродолжитьОперация = Неопределено;
	ТекущиеДанные.ПродолжитьИдентификаторОперации = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПродолжитьЭтапПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	Если Не ТекущиеДанные.ПродолжитьЭтап.Пустая() Тогда
		ПоказатьЗначение(, ТекущиеДанные.ПродолжитьЭтап);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПродолжитьЭтапПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресВХранилище", ТекущиеДанные.АдресПроизводственныйПроцесс);
	
	Если ТекущиеДанные.ПродолжитьОперация.Пустая() Тогда
		СтруктураПараметров.Вставить("ТекущаяСсылка", ТекущиеДанные.ПродолжитьЭтап);
	Иначе
		СтруктураПараметров.Вставить("ТекущаяСсылка", ТекущиеДанные.ПродолжитьОперация);
		СтруктураПараметров.Вставить("ТекущийИдентификаторОперации", ТекущиеДанные.ПродолжитьИдентификаторОперации);
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭлементаПроизводственногоПроцесса",
		СтруктураПараметров,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПродолжитьЭтапПредставлениеНачалоВыбораЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатВыполнения

&НаКлиенте
Процедура РезультатВыполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РезультатВыполнения.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
		Или ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров")
		Или ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОткрытьФорму("Обработка.ДелениеПартииПроизводства.Форма.Настройки",,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ПриИзмененииНастроек(КэшированныеЗначения);
		ПриНачалеРедактированияПартии();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	ОчиститьСообщения();
	
	ТекущаяПартияКопия = ТекущаяПартия;
	ПростойРежимКопия = ПростойРежим;
	
	НачатьОжидание = ВыполнитьДействиеВФоне();
	
	// При проверке заполнения может быть переключена страница либо режим (с простого в расширенный)
	Если (ТекущаяПартияКопия <> ТекущаяПартия И ТекущаяПартия <> ИндексыПартий().ВсеПартии)
		Или ПростойРежимКопия <> ПростойРежим Тогда
		ПриНачалеРедактированияПартии();
	КонецЕсли;
	
	Если НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьДействиеВФонеЗавершение", ЭтотОбъект),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
			
	ИначеЕсли ДействиеВыполнено Тогда
		
		Оповестить("ИзменениеПоследовательностиЭтапов", Объект.ПартияПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНазначения(Команда)
	
	ОткрытьПодборНазначений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаЭлементов

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Установку оформления элементов таблицы, вынесенных в шапку, см. НастроитьЗависимыеЭлементыФормы
	
	УсловноеОформление.Элементы.Очистить();
	
	// Стандартное оформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект,
		"ПартииНоменклатураЕдиницаИзмерения",
		"Объект.Партии.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект,
		"ПартииНоменклатураПартииЕдиницаИзмерения",
		"Объект.Партии.УпаковкаПартии");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект,
		"РезультатВыполненияНоменклатураПартииЕдиницаИзмерения",
		"РезультатВыполнения.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтотОбъект,
		Элементы.ПартииНазначение.Имя,
		"Объект.Партии.ТипНоменклатуры",
		Ложь);
		
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		Ложь,
		"ПартииСерия",
		"Объект.Партии.СтатусУказанияСерий",
		"Объект.Партии.ТипНоменклатуры");
		
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		ЭтотОбъект,
		Ложь,
		"ПартииСтатусУказанияСерий",
		"Объект.Партии.СтатусУказанияСерий");
		
	//
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(
		ЭтотОбъект,
		"Объект",
		"Партии");
	
	// Назначение не указывается при списании на расходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Назначение не указывается при продолжении обработки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьОбработку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при продолжении обработки>';
																|en = '<not used when continue processing>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Направление выпуска
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНаправлениеВыпускаФорма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НаправлениеПродолжитьОбработку();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Продолжить обработку';
																|en = 'Continue processing'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНаправлениеВыпускаФорма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНаправлениеВыпускаФорма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To business unit'"));

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНаправлениеВыпускаФорма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на расходы';
																|en = 'Expense as'"));
	
	// Аналитика расходов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииСтатьяРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииАналитикаАктивовПассивов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПредставлениеОтраженияОперации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Получатель совпадает с выпускающим подразделением
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Партии.Подразделение"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Получатель отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Получатель.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Получатель.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Продолжить обработку
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтапПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при выпуске на склад>';
																|en = '<not used on release to warehouse>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтапПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при выпуске в подразделение>';
																|en = '<not used on release to business unit>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтапПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииПродолжитьЭтапПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьСпецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите спецификацию>';
																|en = '<select a bill of materials>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Отображение картинки в дереве результатов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РезультатВыполненияНомерКартинки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РезультатВыполнения.СкрыватьКартинку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Размер партии
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииКоличествоУпаковокПартии.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при выпуске на склад>';
																|en = '<not used on release to warehouse>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииКоличествоУпаковокПартии.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при выпуске в подразделение>';
																|en = '<not used on release to business unit>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииКоличествоУпаковокПартии.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.НаправлениеВыпускаФорма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется при списании на расходы>';
																|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииУпаковкаПартии.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНоменклатураПартииЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ПродолжитьОбработку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Документы с ошибками
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.РезультатВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РезультатВыполнения.ЕстьОшибки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Назначения партии
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНазначенияПредставление.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииЕстьОшибкиЗаполненияНазначений.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ИспользоватьНазначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Характеристика (форма)
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		Элементы.ПартииХарактеристикаФорма.Имя,
		"Объект.Партии.ХарактеристикиИспользуются");
	
	// Автовыбор - Номенклатура
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииНоменклатураФорма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.АвтовыборНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Партии.НоменклатураАвтовыбораПредставление"));
	
	// Автовыбор - Характеристика
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииХарактеристикаФорма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.АвтовыборНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Партии.ХарактеристикаАвтовыбораПредставление"));
	
	// Автовыбор - Упаковка
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПартииУпаковка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партии.АвтовыборНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Объект = Форма.Объект; // ОбработкаОбъект.ДелениеПартииПроизводства
	Элементы = Форма.Элементы;
	
	Действия = Действия();
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ИзделиеНоменклатура")
		ИЛИ СтруктураРеквизитов.Свойство("ИзделиеХарактеристика")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоУпаковок")
		ИЛИ Инициализация Тогда
		
		Если Объект.ОсновноеИзделиеНоменклатура.Пустая() Тогда
			Элементы.ИзделиеНадпись.Видимость = Ложь;
		Иначе
			Элементы.ИзделиеНадпись.Видимость = Истина;
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Форма.ИзделиеНоменклатураПредставление,,,, "#ПоказатьИзделие"));
			Если НЕ Объект.ОсновноеИзделиеХарактеристика.Пустая() Тогда
				МассивСтрок.Добавить(" / ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Форма.ИзделиеХарактеристикаПредставление,,,, "#ПоказатьХарактеристикуИзделия"));
			КонецЕсли;
			Если Объект.КоличествоУпаковок <> 0 Тогда
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'Количество';
											|en = 'Quantity'"));
				МассивСтрок.Добавить(": ");
				МассивСтрок.Добавить(Формат(Объект.КоличествоУпаковок, "ЧГ="));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Форма.ИзделиеУпаковкаПредставление);
			КонецЕсли;
			Форма.ИзделиеНадпись = Новый ФорматированнаяСтрока(МассивСтрок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоУпаковок")
		ИЛИ Инициализация Тогда
		
		Элементы.ДействиеПродолжить.СписокВыбора.Очистить();
		Элементы.ДействиеПродолжить.СписокВыбора.Добавить(Действия.Продолжить,
			СтрШаблон(НСтр("ru = 'Оформить выпуск и продолжить обработку %1 %2 новой партией';
							|en = 'Register the release and continue processing %1 %2 of the new lot'"),
				Объект.КоличествоУпаковок,
				Форма.ИзделиеУпаковкаПредставление));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ Инициализация Тогда
		
		Элементы.КоличествоПартийРазделить.Доступность =
			(Объект.Действие = Действия.Разделить)
			И Не Форма.ПростойРежим;
		Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Доступность =
			(Объект.Действие = Действия.Разделить);
		
		Элементы.КоличествоУпаковокБрак.Доступность =
			(Объект.Действие = Действия.Брак);
		Элементы.НаправлениеВыпускаФорма.Доступность =
			(Объект.Действие <> Действия.Продолжить);
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(БиблиотекаКартинок.Информация);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(?(Объект.Действие = Действия.Отменить,
			НСтр("ru = 'Будет создан дополнительный этап для оформления выпуска';
				|en = 'Additional stage for release registration will be created'"),
			НСтр("ru = 'Будет создан дополнительный этап для оформления промежуточного выпуска';
				|en = 'Additional stage for intermediate release registration will be created'")));
		Элементы.ДекорацияБудетСозданЭтап.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Элементы.КоличествоУпаковокБрак.АвтоОтметкаНезаполненного = (Объект.Действие = Действия.Брак);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("ПростойРежим")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаГиперссылкиРазделить.Видимость = 
			(Объект.Действие = Действия.Разделить)
			И Не Форма.ПростойРежим;
		
		Элементы.ГруппаГиперссылкиБрак.Видимость =
			(Объект.Действие = Действия.Брак)
			И Не Форма.ПростойРежим;
		
		Элементы.ДекорацияОтменитьПустая.Видимость = 
			(Объект.Действие = Действия.Отменить)
			И Объект.СНачалаПартии
			И Не Форма.ПростойРежим;
		
		Элементы.ДекорацияПростойРежимОтменитьПустая.Видимость = 
			(Объект.Действие = Действия.Отменить)
			И Объект.СНачалаПартии
			И Форма.ПростойРежим;
		
		Если Объект.Действие = Действия.Разделить Тогда
			Элементы.ГруппаПростойРежим.ТекущаяСтраница = Элементы.СтраницаПростойРежимРазделить;
		ИначеЕсли Объект.Действие = Действия.Брак Тогда
			Элементы.ГруппаПростойРежим.ТекущаяСтраница = Элементы.СтраницаПростойРежимБрак;
		ИначеЕсли Объект.Действие = Действия.Отменить Тогда
			Элементы.ГруппаПростойРежим.ТекущаяСтраница = Элементы.СтраницаПростойРежимОтменить;
			Элементы.ГруппаПростойРежимОтменитьПромежуточныйВыпуск.Видимость = Не Объект.СНачалаПартии;
		ИначеЕсли Объект.Действие = Действия.Сократить Тогда
			Элементы.ГруппаПростойРежим.ТекущаяСтраница = Элементы.СтраницаПростойРежимСократить;
		Иначе
			Элементы.ГруппаПростойРежим.ТекущаяСтраница = Элементы.СтраницаПростойРежимПустая;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоПартий")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаДоляСтоимости.Видимость =
			Объект.Действие = Действия.Разделить
			Или Объект.Действие = Действия.Брак
				И Форма.КоличествоПартий > 1
			ИЛИ Объект.Действие = Действия.Брак
				И Объект.ЭтоПоследнийЭтапИОперация
				И Объект.ВЭтапеЗаполненыДолиСтоимости;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СпособРаспределенияЗатратНаВыходныеИзделия")
		ИЛИ Инициализация Тогда
		
		РаспределениеПоДолям = Объект.СпособРаспределенияЗатратНаВыходныеИзделия
			= ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости");
		
		Элементы.ДоляСтоимости.Видимость = РаспределениеПоДолям;
		
		Элементы.ДоляСтоимостиПроцент.ПоложениеЗаголовка = ?(РаспределениеПоДолям,
			ПоложениеЗаголовкаЭлементаФормы.Нет,
			ПоложениеЗаголовкаЭлементаФормы.Авто);
		Элементы.ДоляСтоимостиПроцент.Гиперссылка = НЕ РаспределениеПоДолям;
		
		Элементы.ЕстьОшибкиЗаполненияДолиСтоимости.ПоложениеЗаголовка = ?(РаспределениеПоДолям,
			ПоложениеЗаголовкаЭлементаФормы.Нет,
			ПоложениеЗаголовкаЭлементаФормы.Авто);
		Элементы.ЕстьОшибкиЗаполненияДолиСтоимости.Гиперссылка = НЕ РаспределениеПоДолям;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоПартийРазделить")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Если Объект.СНачалаПартии Тогда
			
			Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость = Ложь;
			Элементы.ДекорацияКоличествоПартий.Заголовок = 
				ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
					Форма.КоличествоПартийРазделить,
					НСтр("ru = 'партию';
						|en = 'lot'"),
					НСтр("ru = 'партии';
						|en = 'lots'"),
					НСтр("ru = 'партий';
						|en = 'lots'"),
					НСтр("ru = 'ж';
						|en = 'f'"));
			
		Иначе
			
			Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость = Истина;
			Элементы.ДекорацияКоличествоПартий.Заголовок = СтрШаблон(НСтр("ru = '%1, распределить затраты';
																			|en = '%1, allocate costs'"),
				ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
					Форма.КоличествоПартийРазделить,
					НСтр("ru = 'партию';
						|en = 'lot'"),
					НСтр("ru = 'партии';
						|en = 'lots'"),
					НСтр("ru = 'партий';
						|en = 'lots'"),
					НСтр("ru = 'ж';
						|en = 'f'"))
				);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
		ИЛИ Инициализация Тогда
		
		Элементы["Партия" + Формат(Форма.ТекущаяПартия, "ЧЦ=3; ЧН=000; ЧВН=")].Гиперссылка = Ложь;
		Элементы["Партия" + Формат(Форма.ТекущаяПартия, "ЧЦ=3; ЧН=000; ЧВН=")].ЦветТекста = Форма.ЦветВыбраннаяСсылка;
		
		Если Форма.ПредыдущаяПартия <> ИндексыПартий().Неопределено Тогда
			
			Элементы["Партия" + Формат(Форма.ПредыдущаяПартия, "ЧЦ=3; ЧН=000; ЧВН=")].Гиперссылка = Истина;
			Элементы["Партия" + Формат(Форма.ПредыдущаяПартия, "ЧЦ=3; ЧН=000; ЧВН=")].ЦветТекста = Форма.ЦветНеВыбраннаяСсылка;
			Форма.ПредыдущаяПартия = ИндексыПартий().Неопределено;
			
		КонецЕсли;
		
		Элементы.ПартияБракованноеИзделие.Гиперссылка = (Форма.ТекущаяПартия <> 0);
		Элементы.ПартияБракованноеИзделие.ЦветТекста = ?(Форма.ТекущаяПартия <> 0,
			Форма.ЦветНеВыбраннаяСсылка, Форма.ЦветВыбраннаяСсылка);
		
		Элементы.ПартияОстаток.Гиперссылка = (Форма.ТекущаяПартия <> 1);
		Элементы.ПартияОстаток.ЦветТекста = ?(Форма.ТекущаяПартия <> 1,
			Форма.ЦветНеВыбраннаяСсылка, Форма.ЦветВыбраннаяСсылка);
		
		Если Форма.ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
			
			Элементы.Партии.ТекущаяСтрока = Объект.Партии[Форма.ТекущаяПартия].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("КоличествоПартий")
		ИЛИ СтруктураРеквизитов.Свойство("ТекущаяПартия")
		ИЛИ Инициализация Тогда
		
		Если Объект.Действие = Действия.Брак Тогда
			
			Элементы.ГруппаПромежуточныйВыпуск.ОтображатьЗаголовок = (Форма.ТекущаяПартия = 1);
			Элементы.ГруппаПромежуточныйВыпуск.Заголовок = НСтр("ru = 'Промежуточный выпуск';
																|en = 'Intermediate release'");
			
		Иначе
			
			Элементы.ГруппаПромежуточныйВыпуск.ОтображатьЗаголовок = Истина;
			Если Объект.Действие = Действия.Отменить Тогда
				Элементы.ГруппаПромежуточныйВыпуск.Заголовок = НСтр("ru = 'Выпуск';
																	|en = 'Release'");
			Иначе
				Элементы.ГруппаПромежуточныйВыпуск.Заголовок = ?(Форма.КоличествоПартий > 1,
					СтрШаблон(НСтр("ru = 'Промежуточный выпуск %1';
									|en = 'Intermediate release %1'"), Форма.ТекущаяПартия+1),
					НСтр("ru = 'Промежуточный выпуск';
						|en = 'Intermediate release'"));
			КонецЕсли;
			
		КонецЕсли;
		
		ВидимостьБракРасширенныйРежим = Объект.Действие = Действия.Брак
			И Форма.ТекущаяПартия = 0
			И Форма.ОдноДействие;
		Элементы.РасширенныйРежимКоличествоУпаковокБрак.Видимость = ВидимостьБракРасширенныйРежим;
		Элементы.ИзделиеУпаковкаПредставление3.Видимость = ВидимостьБракРасширенныйРежим;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоПартий")
		ИЛИ СтруктураРеквизитов.Свойство("ТекущаяПартия")
		ИЛИ Инициализация Тогда
		
		Элементы.КоличествоУпаковокПартии.Заголовок = ?(Форма.КоличествоПартий > 1,
			СтрШаблон(НСтр("ru = 'Размер партии %1';
							|en = 'Lot size %1'"), Форма.ТекущаяПартия+1),
			НСтр("ru = 'Размер партии';
				|en = 'Lot size'"));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("КоличествоПартий")
		ИЛИ Инициализация Тогда
		
		Элементы.ПартияОстаток.Доступность = Форма.КоличествоПартий >= 2;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ СтруктураРеквизитов.Свойство("СоздатьЭтап")
		ИЛИ Инициализация Тогда
		
		ВидимостьПромежуточныйВыпуск = 
			((Объект.Действие = Действия.Отменить Или Объект.Действие = Действия.Разделить)
				И НЕ Объект.СНачалаПартии)
			Или Объект.Действие = Действия.Продолжить
			Или Объект.Действие = Действия.Брак; // В Продолжить и Брак реквизиты видны всегда, есть контроль в проверке заполнения
		
		Элементы.ГруппаПромежуточныйВыпуск.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ПартииГруппаПромежуточныйВыпуск1.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ПартииГруппаПромежуточныйВыпуск2.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ПартииГруппаПромежуточныйВыпуск3.Видимость = ВидимостьПромежуточныйВыпуск;
		Элементы.ПартииГруппаПромежуточныйВыпуск4.Видимость = ВидимостьПромежуточныйВыпуск;
		
		Элементы.ДекорацияБудетСозданЭтап.Видимость = ВидимостьПромежуточныйВыпуск И Объект.СоздатьЭтап;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ СтруктураРеквизитов.Свойство("ТекущаяПартия")
		ИЛИ Инициализация Тогда
		
		Если Форма.ПростойРежим Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПростойРежим;
		ИначеЕсли Форма.ТекущаяПартия = ИндексыПартий().ВсеПартии Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВсеПартии;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартия;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ДействиеОтменить.СписокВыбора[0].Представление = ?(Объект.СНачалаПартии,
			НСтр("ru = 'Отменить производство';
				|en = 'Cancel production'"),
			НСтр("ru = 'Отменить производство, оформить выпуск';
				|en = 'Stop production and register the release'"));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПараметрыУказанияСерий")
		ИЛИ Инициализация Тогда
		
		Элементы.Серия.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		Элементы.СтатусУказанияСерий.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		Элементы.УказатьСерии.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		
		Элементы.ПартииСерия.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		Элементы.ПартииСтатусУказанияСерий.Видимость = Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ПартииГруппаКонечноеИзделие.ОтображатьВШапке = НЕ Объект.СНачалаПартии;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Этап")
		ИЛИ СтруктураРеквизитов.Свойство("Настройки")
		ИЛИ Инициализация Тогда
		
		ВидимостьПродолжить = НЕ Объект.СНачалаПартии;
		Элементы.ПартииПродолжитьСпецификация.Видимость = ВидимостьПродолжить;
		Элементы.ПартииПродолжитьЭтапПредставление.Видимость = ВидимостьПродолжить;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПараметрыУказанияСерий")
		ИЛИ СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ПартииУказатьСерии.Видимость = НЕ Объект.СНачалаПартии
			И Объект.Действие = Действия.Разделить
			И Форма.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимРазделитьНаправлениеВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("Этап")
		ИЛИ Инициализация Тогда
		
		Элементы.ПростойРежимРазделитьПродолжить.Видимость = НЕ Объект.СНачалаПартии;
		Элементы.ПростойРежимРазделитьНаСклад.Видимость = НЕ Объект.СНачалаПартии;
		Элементы.ПростойРежимРазделитьПолучатель.Видимость = НЕ Объект.СНачалаПартии
			И Форма.ПростойРежимНаправлениеВыпуска <> НаправлениеПродолжитьОбработку();
		Элементы.ГруппаПростойРежимРазделитьОтменитьИзделиеВЗаказе.Видимость = Форма.ЭтоИзделиеЗаказа
			И НЕ Объект.СНачалаПартии
			И Форма.ПростойРежимНаправлениеВыпуска <> НаправлениеПродолжитьОбработку();
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимБракНаправлениеВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ПростойРежимБракСтатьяРасходов")
		ИЛИ Инициализация Тогда
		
		ПерваяПартия = Объект.Партии[0];
		
		Элементы.ПростойРежимБракСтатьяРасходов.Видимость = ПерваяПартия.СписатьНаРасходы;
		
		Элементы.ПростойРежимБракАналитикаРасходов.Видимость = ПерваяПартия.СписатьНаРасходы
			И ТипЗнч(ПерваяПартия.СтатьяРасходов) <> Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
		Элементы.ПростойРежимБракАналитикаРасходов.Доступность = ЗначениеЗаполнено(ПерваяПартия.СтатьяРасходов);
		Элементы.ПростойРежимБракАналитикаРасходов.ПодсказкаВвода = ?(ЗначениеЗаполнено(ПерваяПартия.СтатьяРасходов),
			"",
			НСтр("ru = '<выберите статью расходов>';
				|en = '<select an expense item>'"));
		
		Элементы.ПростойРежимБракАналитикаАктивовПассивов.Видимость = ПерваяПартия.СписатьНаРасходы
			И ТипЗнч(ПерваяПартия.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
		Элементы.ПростойРежимБракАналитикаАктивовПассивов.Доступность = ЗначениеЗаполнено(ПерваяПартия.СтатьяРасходов);
		Элементы.ПростойРежимБракАналитикаАктивовПассивов.ПодсказкаВвода = ?(ЗначениеЗаполнено(ПерваяПартия.СтатьяРасходов),
			"",
			НСтр("ru = '<выберите статью расходов>';
				|en = '<select an expense item>'"));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимБракНаправлениеВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ПростойРежимБракСтатьяРасходов")
		ИЛИ СтруктураРеквизитов.Свойство("ПростойРежимБракПолучатель")
		ИЛИ Инициализация Тогда
		
		ПерваяПартия = Объект.Партии[0];
		
		Если ПерваяПартия.СписатьНаРасходы Тогда
			Элементы.ПростойРежимБракПолучатель.ПодсказкаВвода = ПерваяПартия.Подразделение;
			Элементы.ПростойРежимБракПолучатель.АвтоОтметкаНезаполненного = Ложь;
			Элементы.ПростойРежимБракПолучатель.ОтметкаНезаполненного = Ложь;
		Иначе
			Элементы.ПростойРежимБракПолучатель.ПодсказкаВвода = "";
			Элементы.ПростойРежимБракПолучатель.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимОтменитьНаправлениеВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ПростойРежимОтменитьСтатьяРасходов")
		ИЛИ Инициализация Тогда
		
		ПерваяПартия = Объект.Партии[0];
		
		Элементы.ПростойРежимОтменитьСтатьяРасходов.Видимость = ПерваяПартия.СписатьНаРасходы;
		
		Элементы.ПростойРежимОтменитьАналитикаРасходов.Видимость = ПерваяПартия.СписатьНаРасходы
			И ТипЗнч(ПерваяПартия.СтатьяРасходов) <> Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
		Элементы.ПростойРежимОтменитьАналитикаРасходов.Доступность = ЗначениеЗаполнено(ПерваяПартия.СтатьяРасходов);
		Элементы.ПростойРежимОтменитьАналитикаРасходов.ПодсказкаВвода = ?(ЗначениеЗаполнено(ПерваяПартия.СтатьяРасходов),
			"",
			НСтр("ru = '<выберите статью расходов>';
				|en = '<select an expense item>'"));
		
		Элементы.ПростойРежимОтменитьАналитикаАктивовПассивов.Видимость = ПерваяПартия.СписатьНаРасходы
			И ТипЗнч(ПерваяПартия.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
		Элементы.ПростойРежимОтменитьАналитикаАктивовПассивов.Доступность = ЗначениеЗаполнено(ПерваяПартия.СтатьяРасходов);
		Элементы.ПростойРежимОтменитьАналитикаАктивовПассивов.ПодсказкаВвода = ?(ЗначениеЗаполнено(ПерваяПартия.СтатьяРасходов),
			"",
			НСтр("ru = '<выберите статью расходов>';
				|en = '<select an expense item>'"));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимОтменитьНаправлениеВыпуска")
		ИЛИ СтруктураРеквизитов.Свойство("ПростойРежимОтменитьСтатьяРасходов")
		ИЛИ СтруктураРеквизитов.Свойство("ПростойРежимОтменитьПолучатель")
		ИЛИ Инициализация Тогда
		
		ПерваяПартия = Объект.Партии[0];
		
		Если ПерваяПартия.СписатьНаРасходы Тогда
			Элементы.ПростойРежимОтменитьПолучатель.ПодсказкаВвода = ПерваяПартия.Подразделение;
			Элементы.ПростойРежимОтменитьПолучатель.АвтоОтметкаНезаполненного = Ложь;
			Элементы.ПростойРежимОтменитьПолучатель.ОтметкаНезаполненного = Ложь;
		Иначе
			Элементы.ПростойРежимОтменитьПолучатель.ПодсказкаВвода = "";
			Элементы.ПростойРежимОтменитьПолучатель.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Действие")
		ИЛИ СтруктураРеквизитов.Свойство("ПростойРежимКоличествоУпаковок")
		ИЛИ Инициализация Тогда
		
		ПерваяПартия = Объект.Партии[0];
		
		Элементы.ГруппаПростойРежимСократитьОтменитьИзделиеВЗаказе.Видимость = Форма.ЭтоИзделиеЗаказа
			И Объект.Действие = Действия.Сократить
			И ПерваяПартия.КоличествоПартии < Объект.Количество;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимРазделитьОтменитьИзделиеВЗаказе")
		ИЛИ Инициализация Тогда
		
		ПоследняяПартия = Объект.Партии[Объект.Партии.Количество()-1];
		Элементы.ПростойРежимРазделитьПричинаОтменыИзделия.Доступность = ПоследняяПартия.ОтменитьИзделиеВЗаказе;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимБракОтменитьИзделиеВЗаказе")
		ИЛИ Инициализация Тогда
		
		ПерваяПартия = Объект.Партии[0];
		Элементы.ПростойРежимБракПричинаОтменыИзделия.Доступность = ПерваяПартия.ОтменитьИзделиеВЗаказе;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимОтменитьИзделиеВЗаказе")
		ИЛИ Инициализация Тогда
		
		ПерваяПартия = Объект.Партии[0];
		Элементы.ПростойРежимПричинаОтменыИзделия.Доступность = ПерваяПартия.ОтменитьИзделиеВЗаказе;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПростойРежимСократитьОтменитьИзделиеВЗаказе")
		ИЛИ Инициализация Тогда
		
		ПерваяПартия = Объект.Партии[0];
		Элементы.ПростойРежимСократитьПричинаОтменыИзделия.Доступность = ПерваяПартия.ОтменитьИзделиеВЗаказе;
		
	КонецЕсли;
	
	Если Элементы.Партии.ТекущаяСтрока <> Неопределено
		И Форма.ТекущаяПартия <> ИндексыПартий().ВсеПартии Тогда
		
		ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
		
		// Оформление элементов шапки: Номенклатура, Характеристика, Упаковка
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Номенклатура")
			ИЛИ СтруктураРеквизитов.Свойство("АвтовыборНоменклатуры")
			ИЛИ Инициализация Тогда
			
			Если ТекущиеДанные.АвтовыборНоменклатуры Тогда
				Элементы.НоменклатураФорма.ПодсказкаВвода = ТекущиеДанные.НоменклатураАвтовыбораПредставление;
				Элементы.НоменклатураФорма.АвтоОтметкаНезаполненного = Ложь;
				Элементы.НоменклатураФорма.ОтметкаНезаполненного = Ложь;
			Иначе
				Элементы.НоменклатураФорма.ПодсказкаВвода = "";
				Элементы.НоменклатураФорма.АвтоОтметкаНезаполненного = Истина;
			КонецЕсли;
			
			Элементы.ХарактеристикаФорма.Доступность = ТекущиеДанные.ХарактеристикиИспользуются
				И Не ТекущиеДанные.АвтовыборНоменклатуры;
			
			Если Не ТекущиеДанные.ХарактеристикиИспользуются Тогда
				Элементы.ХарактеристикаФорма.ПодсказкаВвода = НСтр("ru = '<характеристики не используются>';
																	|en = '<variants are not used>'");
			ИначеЕсли ТекущиеДанные.АвтовыборНоменклатуры Тогда
				Элементы.ХарактеристикаФорма.ПодсказкаВвода = ТекущиеДанные.ХарактеристикаАвтовыбораПредставление;
			Иначе
				Элементы.ХарактеристикаФорма.ПодсказкаВвода = "";
			КонецЕсли;
			
			Элементы.Упаковка.Доступность = Не ТекущиеДанные.АвтовыборНоменклатуры;
			Элементы.Упаковка.ПодсказкаВвода = ТекущиеДанные.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьНоменклатура")
			ИЛИ Инициализация Тогда
			
			Элементы.ПродолжитьХарактеристика.Доступность = ТекущиеДанные.ПродолжитьХарактеристикиИспользуются;
			Элементы.ПродолжитьХарактеристика.ПодсказкаВвода = ?(ТекущиеДанные.ПродолжитьХарактеристикиИспользуются, "",
				НСтр("ru = '<характеристики не используются>';
					|en = '<variants are not used>'"));
			
		КонецЕсли;
		
		// Оформление элементов шапки: Назначение
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Номенклатура")
			ИЛИ СтруктураРеквизитов.Свойство("СписатьНаРасходы")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьОбработку")
			ИЛИ Инициализация Тогда
			
			Если ТекущиеДанные.СписатьНаРасходы Тогда
				
				Элементы.Назначение.Доступность = Ложь;
				Элементы.Назначение.ПодсказкаВвода = НСтр("ru = '<не используется при списании на расходы>';
															|en = '<not used while writing off as expenses>'");
				
			ИначеЕсли ТекущиеДанные.ПродолжитьОбработку Тогда
				
				Элементы.Назначение.Доступность = Ложь;
				Элементы.Назначение.ПодсказкаВвода = НСтр("ru = '<не используется при продолжении обработки>';
															|en = '<not used when continue processing>'");
				
			ИначеЕсли ТекущиеДанные.ТипНоменклатуры.Пустая()
				ИЛИ ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
				
				Элементы.Назначение.Доступность = Ложь;
				Элементы.Назначение.ПодсказкаВвода = НСтр("ru = '<для товаров и работ>';
															|en = '<for goods and labor>'");
				
			Иначе
				
				Элементы.Назначение.Доступность = Истина;
				Элементы.Назначение.ПодсказкаВвода = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Серии
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Номенклатура")
			ИЛИ СтруктураРеквизитов.Свойство("СтатусыУказанияСерий")
			ИЛИ Инициализация Тогда
			
			Если ТекущиеДанные.ТипНоменклатуры.Пустая()
				ИЛИ ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				
				Элементы.Серия.Доступность = Ложь;
				Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<для товаров>';
													|en = '<for goods>'");
				Элементы.УказатьСерии.Доступность = Ложь;
				
			ИначеЕсли ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				
				Элементы.Серия.Доступность = Ложь;
				Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<серия не указывается>';
													|en = '<batch is not specified>'");
				Элементы.УказатьСерии.Доступность = Ложь;
				
			ИначеЕсли НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
				ТекущиеДанные.СтатусУказанияСерий,
				Форма.ПараметрыУказанияСерий) Тогда
				
				Элементы.Серия.Доступность = Истина;
				Элементы.Серия.ПодсказкаВвода = "";
				Элементы.УказатьСерии.Доступность = Истина;
				
			Иначе
				
				Элементы.Серия.Доступность = Ложь;
				Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<серия указывается отдельно>';
													|en = '<batch is specified separately>'");
				Элементы.УказатьСерии.Доступность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Доля стоимости
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ДоляСтоимостиПроцент")
			ИЛИ СтруктураРеквизитов.Свойство("Действие")
			ИЛИ СтруктураРеквизитов.Свойство("Этап")
			ИЛИ Инициализация Тогда
			
			ЭтоБракВКонцеПартии = Объект.Действие = Действия.Брак
				И Объект.ЭтоПоследнийЭтапИОперация;
			
			Элементы.ДоляСтоимостиПроцент.Видимость = ЗначениеЗаполнено(ТекущиеДанные.ДоляСтоимостиПроцент)
				И НЕ ЭтоБракВКонцеПартии;
			Элементы.ЕстьОшибкиЗаполненияДолиСтоимости.Видимость = НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоляСтоимостиПроцент)
				И НЕ ЭтоБракВКонцеПартии;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Аналитика расходов
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("СписатьНаРасходы")
			ИЛИ СтруктураРеквизитов.Свойство("СтатьяРасходов")
			ИЛИ Инициализация Тогда
			
			Элементы.СтатьяРасходов.Видимость = ТекущиеДанные.СписатьНаРасходы;
			Элементы.АналитикаРасходов.Видимость = ТекущиеДанные.СписатьНаРасходы
				И ТипЗнч(ТекущиеДанные.СтатьяРасходов) <> Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
			Элементы.АналитикаАктивовПассивов.Видимость = ТекущиеДанные.СписатьНаРасходы
				И ТипЗнч(ТекущиеДанные.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
			
			Если Форма.ИспользоватьУчетПрочихАктивовПассивов Тогда
				Элементы.ПредставлениеОтраженияОперации.Видимость = ТекущиеДанные.СписатьНаРасходы
					И ТипЗнч(ТекущиеДанные.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
			КонецЕсли;
			
			Элементы.Получатель.ПодсказкаВвода = ?(ТекущиеДанные.СписатьНаРасходы, ТекущиеДанные.Подразделение, "");
			
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("СтатьяРасходов")
			ИЛИ Инициализация Тогда
			
			Элементы.АналитикаРасходов.Доступность = ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов);
			Элементы.АналитикаРасходов.ПодсказкаВвода = ?(ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов),
				"",
				НСтр("ru = '<выберите статью расходов>';
					|en = '<select an expense item>'"));
			
			Элементы.АналитикаАктивовПассивов.Доступность = ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов);
			Элементы.АналитикаАктивовПассивов.ПодсказкаВвода = ?(ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов),
				"",
				НСтр("ru = '<выберите статью расходов>';
					|en = '<select an expense item>'"));
			
		КонецЕсли;
		
		// Оформление элементов шапки: Продолжить обработку
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьОбработку")
			ИЛИ СтруктураРеквизитов.Свойство("Действие")
			ИЛИ СтруктураРеквизитов.Свойство("Этап")
			ИЛИ СтруктураРеквизитов.Свойство("Настройки")
			ИЛИ СтруктураРеквизитов.Свойство("ИзменитьВыпускаемоеИзделие")
			ИЛИ Инициализация Тогда
			
			ПоказыватьПродолжениеОбработки = ТекущиеДанные.ПродолжитьОбработку
				И (Объект.Действие = Действия.Разделить И Не Объект.СНачалаПартии
					Или Объект.Действие = Действия.Брак
					Или Объект.Действие = Действия.Продолжить);
			
			Элементы.ГруппаКонечноеИзделие.ОтображатьЗаголовок = ПоказыватьПродолжениеОбработки;
			Элементы.ГруппаНовоеИзделие.Видимость = ПоказыватьПродолжениеОбработки
				И ТекущиеДанные.ИзменитьВыпускаемоеИзделие;
			Элементы.ГруппаПродолжитьСпецификация.Видимость = ПоказыватьПродолжениеОбработки;
			Элементы.ПартииИзменитьВыпускаемоеИзделие.Видимость = ПоказыватьПродолжениеОбработки
				И (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
				ИЛИ Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"));
			
		КонецЕсли;
		
		// Оформление элементов шапки: Размер партии
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Действие")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьОбработку")
			ИЛИ СтруктураРеквизитов.Свойство("Этап")
			ИЛИ Инициализация Тогда
			
			Элементы.ГруппаРазмерПартии.Видимость = 
				Объект.Действие = Действия.Сократить
				ИЛИ (
					Объект.Действие = Действия.Разделить
					И 	(
						Объект.СНачалаПартии
						ИЛИ ТекущиеДанные.ПродолжитьОбработку
						)
					);
			
		КонецЕсли;
		
		// Оформление элементов шапки: Назначения партии
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ИспользоватьНазначения")
			ИЛИ Инициализация Тогда
			
			Элементы.УказатьНазначения.Доступность = ТекущиеДанные.ИспользоватьНазначения;
			Элементы.ЕстьОшибкиЗаполненияНазначений.Видимость = ТекущиеДанные.ИспользоватьНазначения;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Количество промежуточного выпуска
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("АвторасчетКоличества")
			ИЛИ Инициализация Тогда
			
			Элементы.ГруппаКоличество.Видимость = Не ТекущиеДанные.АвторасчетКоличества;
			
		КонецЕсли;
		
		// Оформление элементов шапки: Продолжить этап
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьСпецификация")
			ИЛИ Инициализация Тогда
			
			Элементы.ПродолжитьЭтапПредставление.Доступность = Не ТекущиеДанные.ПродолжитьСпецификация.Пустая();
			Элементы.ПродолжитьЭтапПредставление.ПодсказкаВвода = ?(Не ТекущиеДанные.ПродолжитьСпецификация.Пустая(),
				"",
				НСтр("ru = '<выберите спецификацию>';
					|en = '<select a bill of materials>'"));
			
		КонецЕсли;
		
		// Оформление элементов шапки: Отменить изделие в заказе
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("Действие")
			ИЛИ СтруктураРеквизитов.Свойство("Этап")
			ИЛИ СтруктураРеквизитов.Свойство("ИзменитьВыпускаемоеИзделие")
			ИЛИ СтруктураРеквизитов.Свойство("ПродолжитьОбработку")
			ИЛИ СтруктураРеквизитов.Свойство("КоличествоПартии")
			ИЛИ Инициализация Тогда
			
			МожноОтменитьИзделиеВЗаказе = МожноОтменитьИзделиеВЗаказе(Форма, ТекущиеДанные);
			Элементы.ГруппаОтменитьИзделиеВЗаказе.Видимость = МожноОтменитьИзделиеВЗаказе;
			
			ЭтоИзменениеИзделия = МожноОтменитьИзделиеВЗаказе
				И ТекущиеДанные.ПродолжитьОбработку
				И ТекущиеДанные.ИзменитьВыпускаемоеИзделие;
			
			Шаблон = ?(ЭтоИзменениеИзделия,
				НСтр("ru = 'Изменить изделие в <a href=""%1"">заказе</a> по причине:';
					|en = 'Change the finished product in the <a href=""%1"">order</a>. Reason:'"),
				НСтр("ru = 'Отменить изделие в <a href=""%1"">заказе</a> по причине:';
					|en = 'Cancel the finished product in the <a href=""%1"">order</a>. Reason:'"));
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект.Распоряжение);
			#Если Клиент Тогда
				Элементы.ОтменитьИзделиеВЗаказеЗаголовок.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
					Шаблон, НавигационнаяСсылка);
			#Иначе
				Элементы.ОтменитьИзделиеВЗаказеЗаголовок.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					Шаблон, НавигационнаяСсылка);
			#КонецЕсли
			
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ТекущаяПартия")
			ИЛИ СтруктураРеквизитов.Свойство("ОтменитьИзделиеВЗаказе")
			ИЛИ Инициализация Тогда
			
			Элементы.ПричинаОтменыИзделия.Доступность = ТекущиеДанные.ОтменитьИзделиеВЗаказе;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация Тогда
		Элементы.ПростойРежим.Доступность = Форма.Настройки.ПростойРежимДоступен;
		Элементы.ПростойРежим.ОтображениеПодсказки = ?(Форма.Настройки.ПростойРежимДоступен,
			ОтображениеПодсказки.Нет,
			ОтображениеПодсказки.Кнопка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Партии

&НаКлиенте
Процедура ПриИзмененииДействия()
	
	ПриИзмененииДействияНаСервере();
	ПриНачалеРедактированияПартии();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДействияНаСервере()
	
	ДанныеЭтапа = ДанныеЭтапа(Объект, ИзделиеЕдиницаИзмерения);
	Если ДанныеЭтапа <> Неопределено Тогда
		ЗаполнитьПоДаннымЭтапа(ДанныеЭтапа);
		ПрочитатьПараметрыАвтовыбора();
	КонецЕсли;
	
	НастроитьПартии();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПартии()
	
	Действия = Действия();
	
	// Количество партий
	Если Объект.Действие = Действия().Брак Тогда
		КоличествоПартий = ?(Объект.КоличествоУпаковокБрак < Объект.КоличествоУпаковок И НЕ Объект.ЭтоПоследнийЭтапИОперация, 2, 1);
	ИначеЕсли Объект.Действие = Действия.Разделить
		И ПростойРежим Тогда
		Если ВыпускИзделий.Количество() > 0 Тогда
			КоличествоПартий = ВыпускИзделий.Количество();
			КоличествоПартийРазделить = ВыпускИзделий.Количество();
		Иначе
			КоличествоПартий = 2;
			КоличествоПартийРазделить = 2;
		КонецЕсли;
	КонецЕсли;
	
	// Состав партий
	Если Объект.Партии.Количество() <> КоличествоПартий Тогда
		Если Объект.Партии.Количество() < КоличествоПартий Тогда
			// Добавление партий
			Для Индекс = Объект.Партии.Количество() По КоличествоПартий-1 Цикл
				ДобавитьПартию(Индекс);
				Если Индекс <> 0 Тогда
					НовыйЭлемент = Элементы.Вставить(
						"Партия" + Формат(Индекс, "ЧЦ=3; ЧН=000; ЧВН="),
						Тип("ДекорацияФормы"),
						Элементы.ГруппаГиперссылкиРазделить,
						Элементы.Партия100);
					НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
					НовыйЭлемент.Заголовок = СтрШаблон(НСтр("ru = 'Партия %1';
															|en = 'Lot %1'"), Индекс + 1);
					НовыйЭлемент.Гиперссылка = Истина;
					НовыйЭлемент.ЦветТекста = ЦветНеВыбраннаяСсылка;
					НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_ГиперссылкаПартияРазделитьНажатие");
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Объект.Партии.Количество() > КоличествоПартий Тогда
			// Удаление партий
			Для Индекс = -Объект.Партии.Количество()+1 По -КоличествоПартий Цикл
				Объект.Партии.Удалить(-Индекс);
				
				Для каждого Строка Из Объект.Серии.НайтиСтроки(Новый Структура("ИндексПартии", -Индекс)) Цикл
					Объект.Серии.Удалить(Строка);
				КонецЦикла;
				
				Элементы.Удалить(Элементы["Партия" + Формат(-Индекс, "ЧЦ=3; ЧН=000; ЧВН=")]);
			КонецЦикла;
		КонецЕсли;
		
		Если ТекущаяПартия <> ИндексыПартий().ВсеПартии
			И ТекущаяПартия > КоличествоПартий-1 Тогда
			ТекущаяПартия = КоличествоПартий-1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяПартия = ИндексыПартий().ВсеПартии Тогда
		Если Объект.Действие = Действия.Разделить Тогда
			Если Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока) = Неопределено Тогда
				Элементы.Партии.ТекущаяСтрока = Объект.Партии[КоличествоПартий-1].ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			ТекущаяПартия = 0;
			ПредыдущаяПартия = ИндексыПартий().ВсеПартии;
		КонецЕсли;
	ИначеЕсли ПростойРежим
		И (Объект.Действие = Действия.Брак Или Объект.Действие = Действия.Отменить) Тогда
		ТекущаяПартия = 0;
	КонецЕсли;
	
	// Размер партии, зависящий от действия
	ЭтоДелениеНаНачатойОперации = Ложь;
	Если Объект.Действие = Действия.Продолжить Тогда
		Строка = Объект.Партии[0];
		Строка.УпаковкаПартии = Объект.Упаковка;
		Строка.КоличествоУпаковокПартии = Объект.КоличествоУпаковок;
		Строка.КоличествоПартии = Объект.Количество;
		Строка.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(Строка);
	ИначеЕсли Объект.Действие = Действия.Брак
		И КоличествоПартий = 2 Тогда
		Строка = Объект.Партии[0];
		Строка.УпаковкаПартии = Объект.Упаковка;
		Строка.КоличествоУпаковокПартии = Объект.КоличествоУпаковокБрак;
		Строка.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
			Объект.ОсновноеИзделиеНоменклатура,
			Строка.УпаковкаПартии,
			Строка.КоличествоУпаковокПартии);
		Строка.ДоляСтоимости = Объект.КоличествоУпаковокБрак;
		
		Строка = Объект.Партии[1]; // Остаток партии
		Строка.УпаковкаПартии = Объект.Упаковка;
		Строка.КоличествоУпаковокПартии = Объект.КоличествоУпаковок - Объект.КоличествоУпаковокБрак;
		Строка.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
			Объект.ОсновноеИзделиеНоменклатура,
			Строка.УпаковкаПартии,
			Строка.КоличествоУпаковокПартии);
		Строка.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(Строка);
		Строка.ДоляСтоимости = Строка.КоличествоУпаковокПартии;
		
		// Остаток партии со следуюей операции/этапа
		Если Объект.ИдентификаторОперации <> 0 Тогда
			ДеревоПартии = ПолучитьИзВременногоХранилища(АдресПроизводственныйПроцессПартии); // см. Обработки.ДелениеПартииПроизводства.ДеревоПроизводственногоПроцесса
			ОперацияПартии = ДеревоПартии.Строки.Найти(Объект.ИдентификаторОперации, "ИдентификаторОперации", Истина);
			ОперацияНазначенаПолностью = ОперацияПартии <> Неопределено
				И ОперацияПартии.ОперацийКНазначению = 0;
			
			СледующаяОперация = Неопределено;
			СледующийЭтап = Неопределено;
			НайтиСледующуюТочкуПроизводственногоПроцесса(СледующаяОперация, СледующийЭтап);
			
			Если ОперацияНазначенаПолностью
				И (СледующаяОперация <> Неопределено
					Или СледующийЭтап <> Неопределено) Тогда
				Строка.ПродолжитьСпецификация = Объект.Спецификация;
				Строка.АдресПроизводственныйПроцесс = АдресПроизводственныйПроцесс;
				
				Если СледующаяОперация <> Неопределено Тогда
					Строка.ПродолжитьЭтап = ЭтапСпецификации;
					Строка.ПродолжитьЭтапПредставление = СтрШаблон("%1 / %2", Строка(ЭтапСпецификации), СледующаяОперация.Наименование);
					Строка.ПродолжитьЭтапПодразделение = ЭтапСпецификацииПодразделение;
					Строка.ПродолжитьОперация = СледующаяОперация.Ссылка;
					Строка.ПродолжитьИдентификаторОперации = СледующаяОперация.ИдентификаторОперации;
				Иначе
					Строка.ПродолжитьЭтап = СледующийЭтап.Ссылка;
					Строка.ПродолжитьЭтапПредставление = СледующийЭтап.Наименование;
					Строка.ПродолжитьЭтапПодразделение = СледующийЭтап.Подразделение;
					Строка.ПродолжитьОперация = Неопределено;
					Строка.ПродолжитьИдентификаторОперации = 0;
				КонецЕсли;
				
				Строка.ИзменитьВыпускаемоеИзделие = Ложь;
				Строка.ПродолжитьНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
				Строка.ПродолжитьХарактеристика = Объект.ОсновноеИзделиеХарактеристика;
				Строка.ОтменитьИзделиеВЗаказе = Ложь;
				Строка.ПричинаОтменыИзделия = Неопределено;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.Действие = Действия.Брак
		И Объект.ЭтоПоследнийЭтапИОперация
		И НЕ Объект.ВЭтапеЗаполненыДолиСтоимости
		И НЕ ПростойРежим Тогда
		Объект.Партии[0].ДоляСтоимости = Объект.КоличествоУпаковокБрак * КоэффициентУпаковки;
	ИначеЕсли Объект.Действие = Действия.Разделить
		И КоличествоПартий = 2
		И Объект.ИдентификаторОперации <> 0 Тогда
		ДеревоПартии = ПолучитьИзВременногоХранилища(АдресПроизводственныйПроцессПартии); // см. Обработки.ДелениеПартииПроизводства.ДеревоПроизводственногоПроцесса
		ОперацияПартии = ДеревоПартии.Строки.Найти(Объект.ИдентификаторОперации, "ИдентификаторОперации", Истина);
		ОперацияВыполненаЧастично = ОперацияПартии <> Неопределено
			И ОперацияПартии.ОперацийВсего > ОперацияПартии.ОперацийКНазначению
			И ОперацияПартии.ОперацийКНазначению > 0;
		
		СледующаяОперация = Неопределено;
		СледующийЭтап = Неопределено;
		НайтиСледующуюТочкуПроизводственногоПроцесса(СледующаяОперация, СледующийЭтап);
		
		Если ОперацияВыполненаЧастично
			И (СледующаяОперация <> Неопределено
				Или СледующийЭтап <> Неопределено) Тогда
			ЭтоДелениеНаНачатойОперации = Истина;
			
			// Первая партия - продолжить со следующей операции
			Строка = Объект.Партии[0];
			
			Строка.ПродолжитьСпецификация = Объект.Спецификация;
			Строка.АдресПроизводственныйПроцесс = АдресПроизводственныйПроцесс;
			
			Если СледующаяОперация <> Неопределено Тогда
				Строка.ПродолжитьЭтап = ЭтапСпецификации;
				Строка.ПродолжитьЭтапПредставление = СтрШаблон("%1 / %2", Строка(ЭтапСпецификации), СледующаяОперация.Наименование);
				Строка.ПродолжитьЭтапПодразделение = ЭтапСпецификацииПодразделение;
				Строка.ПродолжитьОперация = СледующаяОперация.Ссылка;
				Строка.ПродолжитьИдентификаторОперации = СледующаяОперация.ИдентификаторОперации;
			Иначе
				Строка.ПродолжитьЭтап = СледующийЭтап.Ссылка;
				Строка.ПродолжитьЭтапПредставление = СледующийЭтап.Наименование;
				Строка.ПродолжитьЭтапПодразделение = СледующийЭтап.Подразделение;
				Строка.ПродолжитьОперация = Неопределено;
				Строка.ПродолжитьИдентификаторОперации = 0;
			КонецЕсли;
			
			Строка.ИзменитьВыпускаемоеИзделие = Ложь;
			Строка.ПродолжитьНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
			Строка.ПродолжитьХарактеристика = Объект.ОсновноеИзделиеХарактеристика;
			Строка.ОтменитьИзделиеВЗаказе = Ложь;
			Строка.ПричинаОтменыИзделия = Неопределено;
			
			Строка.КоличествоУпаковокПартии = Объект.КоличествоУпаковок
				* (ОперацияПартии.ОперацийВсего - ОперацияПартии.ОперацийКНазначению)
				/ ОперацияПартии.ОперацийВсего;
			Строка.УпаковкаПартии = Объект.Упаковка;
			Строка.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
				Объект.ОсновноеИзделиеНоменклатура,
				Строка.УпаковкаПартии,
				Строка.КоличествоУпаковокПартии);
			
			Строка.ДоляСтоимости = Строка.КоличествоУпаковокПартии;
			
			// Вторая партия - продолжить с текущей операции
			Строка = Объект.Партии[1];
			
			Строка.ПродолжитьСпецификация = Объект.Спецификация;
			Строка.ПродолжитьЭтап = ЭтапСпецификации;
			Строка.ПродолжитьЭтапПредставление = ЭтапСпецификацииПредставление;
			Строка.ПродолжитьЭтапПодразделение = ЭтапСпецификацииПодразделение;
			Строка.ПродолжитьОперация = Объект.Операция;
			Строка.ПродолжитьИдентификаторОперации = Объект.ИдентификаторОперации;
			Строка.АдресПроизводственныйПроцесс = АдресПроизводственныйПроцесс;
			
			Строка.ИзменитьВыпускаемоеИзделие = Ложь;
			Строка.ПродолжитьНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
			Строка.ПродолжитьХарактеристика = Объект.ОсновноеИзделиеХарактеристика;
			Строка.ОтменитьИзделиеВЗаказе = Ложь;
			Строка.ПричинаОтменыИзделия = Неопределено;
			
			Строка.КоличествоУпаковокПартии = Объект.КоличествоУпаковок - Объект.Партии[0].КоличествоУпаковокПартии;
			Строка.УпаковкаПартии = Объект.Упаковка;
			Строка.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
				Объект.ОсновноеИзделиеНоменклатура,
				Строка.УпаковкаПартии,
				Строка.КоличествоУпаковокПартии);
			
			Строка.ДоляСтоимости = Строка.КоличествоУпаковокПартии;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Действие = Действия.Разделить
		И КоличествоПартий = ВыпускИзделий.Количество() Тогда
		// Партии заполняются по таблице ВыпускИзделий
		// Последняя строка в таблице - это остаток к производству, данные этой строки редактируются на форме
		Для Индекс = 0 По ВыпускИзделий.Количество()-1 Цикл
			Выпуск = ВыпускИзделий[Индекс];
			Строка = Объект.Партии[Индекс];
			
			Если Выпуск.ПродолжитьОбработку Тогда
				Строка.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку();
				ПриИзмененииНаправленияВыпускаФорма(Строка, "");
				
				Строка.НоменклатураФорма = Неопределено;
				НастроитьАвтовыборНоменклатуры(Строка, "");
				
				Строка.КоличествоУпаковокПартии = Выпуск.КоличествоУпаковок;
				Строка.УпаковкаПартии = Выпуск.Упаковка;
				Строка.КоличествоПартии = Выпуск.Количество;
				
				Если Не Строка.АвтовыборНоменклатурыЭтоРабота Тогда
					Строка.КоличествоУпаковок = Строка.КоличествоУпаковокПартии;
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
				КонецЕсли;
				
				Строка.Назначения.Очистить();
				Строка.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(Строка);
				
				Если Строка.ИзменитьВыпускаемоеИзделие Тогда
					УстановитьОсновноеВыпускаемоеИзделие(Строка);
				КонецЕсли;
				
				Строка.ДоляСтоимости = Строка.КоличествоУпаковокПартии;
			Иначе
				// Номенклатура
				ЗаполнитьЗначенияСвойств(Строка, Выпуск,
					"Номенклатура, Характеристика, Упаковка, Количество, КоличествоУпаковок");
				Строка.НоменклатураФорма = Строка.Номенклатура;
				Строка.ХарактеристикаФорма = Строка.Характеристика;
				Строка.Произведено = Истина;
				НастроитьАвтовыборНоменклатуры(Строка, "");
				ПартииНоменклатураПриИзмененииНаСервере(Строка);
				НастроитьАвторасчетКоличества(Строка, "");
				Строка.Получатель = Выпуск.Получатель;
				
				// Направление выпуска
				СписокВыбора = СписокВыбораНаправлениеВыпускаФорма(ЭтотОбъект, Строка);
				Если СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад) <> Неопределено Тогда
					Строка.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
				Иначе
					Строка.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
				КонецЕсли;
				ПриИзмененииНаправленияВыпускаФорма(Строка, "");
				
				// Прочие реквизиты
				Строка.Назначение = Выпуск.Назначение;
				Строка.Назначения.Очистить();
				Строка.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(Строка);
				Строка.ДоляСтоимости = Строка.КоличествоУпаковок;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Не ПростойРежим Тогда
		// Общая проверка/настройка партий.
		// Не нужна если включен ПростойРежим т.к. в этом случае партии настраиваются в - см. НастроитьПростойРежим.
		Для каждого Строка Из Объект.Партии Цикл
			// Использовать назначения
			Строка.ИспользоватьНазначения = ИспользоватьНазначения(Объект.Действие, Объект.СНачалаПартии, Строка, Настройки);
			
			// Направление выпуска (контроль)
			СписокВыбора = СписокВыбораНаправлениеВыпускаФорма(ЭтотОбъект, Строка);
			Если СписокВыбора.НайтиПоЗначению(Строка.НаправлениеВыпускаФорма) = Неопределено Тогда
				Если Строка.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение
					И СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад) <> Неопределено Тогда
					Строка.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
				ИначеЕсли Строка.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
					И СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение) <> Неопределено Тогда
					Строка.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
				Иначе
					Строка.НаправлениеВыпускаФорма = СписокВыбора[0].Значение;
				КонецЕсли;
				ПриИзмененииНаправленияВыпускаФорма(Строка, "");
			КонецЕсли;
			
			// Автовыбор номенклатуры
			НастроитьАвтовыборНоменклатуры(Строка, "");
			
			// Авторасчет количества
			Если Не Строка.АвтовыборНоменклатуры Тогда
				НастроитьАвторасчетКоличества(Строка, "");
			КонецЕсли;
			
			// Авторасчет количества при Делении
			Если ЭтоДелениеНаНачатойОперации
				И Не Строка.АвтовыборНоменклатурыЭтоРабота Тогда
				Строка.КоличествоУпаковок = Строка.КоличествоУпаковокПартии;
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Настройка простого режима
	Если ПростойРежим Тогда
		НастроитьПростойРежим();
	КонецЕсли;
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексыПартий()
	
	Возврат Новый Структура("ВсеПартии, Неопределено", 100, -1);
	
КонецФункции

&НаСервере
Процедура УстановитьОсновноеВыпускаемоеИзделие(Строка)
	
	Строка.ИзменитьВыпускаемоеИзделие = Ложь;
	Строка.ПродолжитьНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
	Строка.ПродолжитьХарактеристика = Объект.ОсновноеИзделиеХарактеристика;
	
	Строка.ПродолжитьСпецификация = Объект.Спецификация;
	Строка.ПродолжитьЭтап = ЭтапСпецификации;
	Строка.ПродолжитьЭтапПредставление = ЭтапСпецификацииПредставление;
	Строка.ПродолжитьЭтапПодразделение = ЭтапСпецификацииПодразделение;
	Строка.ПродолжитьОперация = Объект.Операция;
	Строка.ПродолжитьИдентификаторОперации = Объект.ИдентификаторОперации;
	Строка.АдресПроизводственныйПроцесс = АдресПроизводственныйПроцесс;
	
	Строка.ОтменитьИзделиеВЗаказе = Ложь;
	Строка.ПричинаОтменыИзделия = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
		ЭтотОбъект, 
		ПараметрыУказанияСерий, 
		Текст, 
		ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Партии.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтотОбъект,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ТекущиеДанныеИдентификатор, 
		ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
				ДополнительныеПараметры.ПараметрыУказанияСерий, 
				ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СтатусыУказанияСерий");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	
	ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	Если Не ТекущиеДанные.АвторасчетКоличества Тогда
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыУказанияСерий, 
		СтруктураДействий);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект, 
		ПараметрыУказанияСерий,
		ТекущаяСтрокаИдентификатор,
		КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ДолиСтоимости

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости()

	Если ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(
			Элементы.Партии.ТекущиеДанные,
			ПараметрыРаспределенияЗатрат) Тогда
		
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормыВводаДолиСтоимости(Элементы.Партии.ТекущиеДанные.ПолучитьИдентификатор()),
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДоляСтоимостиПроцент")
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия()
	
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(
		Обработки.ДелениеПартииПроизводства.ПараметрыРаспределенияЗатрат(Объект.СпособРаспределенияЗатратНаВыходныеИзделия));
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СпособРаспределенияЗатратНаВыходныеИзделия, ДоляСтоимостиПроцент");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	Возврат ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(
		Объект,
		ПараметрыРаспределенияЗатрат,
		ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#Область НаправлениеВыпуска

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНаправлениеВыпускаФорма()
	
	Если Элементы.Партии.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	
	Элементы.НаправлениеВыпускаФорма.СписокВыбора.Очистить();
	Элементы.ПартииНаправлениеВыпускаФорма.СписокВыбора.Очистить();
	
	Для каждого Элемент Из СписокВыбораНаправлениеВыпускаФорма(ЭтотОбъект, ТекущиеДанные) Цикл
		Элементы.НаправлениеВыпускаФорма.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		Элементы.ПартииНаправлениеВыпускаФорма.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораНаправлениеВыпускаФорма(Форма, ТекущиеДанные)
	
	Результат = Новый СписокЗначений;
	Действия = Действия();
	
	ЭтоБракованноеИзделие = (Форма.Объект.Действие = Действия.Брак)
		И ТекущиеДанные.НомерСтроки = 1;
	ЭтоОстатокПослеБрака = (Форма.Объект.Действие = Действия.Брак)
		И ТекущиеДанные.НомерСтроки = 2;
	
	Если Форма.Объект.Действие <> Действия.Отменить
		И Не ЭтоБракованноеИзделие Тогда
		Результат.Добавить(НаправлениеПродолжитьОбработку(), НСтр("ru = 'Продолжить обработку';
																	|en = 'Continue processing'"));
	КонецЕсли;
	
	Если Форма.Объект.Действие <> Действия.Продолжить Тогда
		Для каждого Элемент Из УправлениеПроизводствомКлиентСервер.СписокВыбораНаправлениеВыпуска(ТекущиеДанные, Форма) Цикл
			Если ЭтоОстатокПослеБрака
				И Элемент.Значение = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
				Продолжить;
			ИначеЕсли (Форма.Объект.Действие = Действия.Разделить Или ЭтоОстатокПослеБрака)
				И ТекущиеДанные.АвтовыборНоменклатуры
				И Элемент.Значение = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение") Тогда
				// При авторасчете номенклатуры выпускается товар другого качества на склад, а не работа в подразделение
				// Работа используется только для продолжения обработки
				Результат.Добавить(
					ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад"),
					НСтр("ru = 'На склад';
						|en = 'To warehouse'"));
			Иначе
				Результат.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииНаправленияВыпускаФорма(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения = Неопределено)
	
	Если ТекущиеДанные.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку() Тогда
		Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
		Иначе
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
		КонецЕсли;
		ТекущиеДанные.ПродолжитьОбработку = Истина;
	Иначе
		ТекущиеДанные.НаправлениеВыпуска = ТекущиеДанные.НаправлениеВыпускаФорма;
		ТекущиеДанные.ПродолжитьОбработку = Ложь;
	КонецЕсли;
	
	ТекущиеДанные.СписатьНаРасходы = ТекущиеДанные.НаправлениеВыпуска
		= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию");
	
	ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(ЭтотОбъект, ТекущиеДанные, "Объект.Партии");
	
	Если ПривестиТипПолучателя(ТекущиеДанные) Тогда
		ПолучательПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Ложь, КэшированныеЗначения);
	КонецЕсли;
	
	НазначениеКопия = ТекущиеДанные.Назначение;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", ПараметрДействияЗаполнитьНазначение(ТекущиеДанные));
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	ИзмененоНазначение = (НазначениеКопия <> ТекущиеДанные.Назначение);
	
	ТекущиеДанные.ИспользоватьНазначения = ИспользоватьНазначения(
		Объект.Действие, Объект.СНачалаПартии, ТекущиеДанные, Настройки);
	
	СписокРеквизитов = СписокРеквизитов + ",ПродолжитьОбработку, СписатьНаРасходы, ИспользоватьНазначения";
	
КонецПроцедуры

&НаСервере
Функция ПривестиТипПолучателя(ТекущиеДанные)
	
	ОграничениеТипа = ОграничениеТипаПолучателя(ТекущиеДанные);
	
	ЗначениеДоИзменения = ТекущиеДанные.Получатель;
	ТекущиеДанные.Получатель = ОграничениеТипа.ПривестиЗначение(ТекущиеДанные.Получатель);
	
	Элементы.Получатель.ОграничениеТипа = ОграничениеТипа;
	Элементы.ПартииПолучатель.ОграничениеТипа = ОграничениеТипа;
	
	Возврат ТекущиеДанные.Получатель <> ЗначениеДоИзменения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОграничениеТипаПолучателя(ТекущиеДанные)
	
	ОграничениеТипа = Неопределено;
	Если ТекущиеДанные.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку() Тогда
		ОграничениеТипа = ?(ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"),
			Новый ОписаниеТипов("СправочникСсылка.Склады"),
			Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Иначе
		ОграничениеТипа = ?(ТекущиеДанные.НаправлениеВыпускаФорма = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад"),
			Новый ОписаниеТипов("СправочникСсылка.Склады"),
			Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	Возврат ОграничениеТипа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаправлениеПродолжитьОбработку()
	
	// Ссылка для идентификации действия "продолжить обработку" (отдельная хозяйственная операция отсутствует)
	Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВПроизводство");
	
КонецФункции

#КонецОбласти

#Область ВыполнениеДействий

&НаСервере
Функция ВыполнитьДействиеВФоне()
	
	СоздатьНоменклатуруАвтовыбора();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНазначенияПартий();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ОбработкаОбъект, ПараметрыУказанияСерий);
	
	Партии = ОбработкаОбъект.Партии.Выгрузить();
	Партии.Колонки.Добавить("НазначенияИзделий", Новый ОписаниеТипов("ТаблицаЗначений"));
	Партии.Колонки.Добавить("НазначенияМатериалов", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Для каждого Строка Из Партии Цикл
		СтрокаФормы = Объект.Партии[Строка.НомерСтроки-1];
		
		// Операция (продолжить)
		Если Не Строка.ПродолжитьОперация.Пустая() Тогда
			СвойстваОперации = СвойстваОперацииПроизводственногоПроцесса(
				СтрокаФормы.АдресПроизводственныйПроцесс,
				Строка.ПродолжитьОперация,
				Строка.ПродолжитьИдентификаторОперации);
			Строка.ПродолжитьОперация = СвойстваОперации.Операция;
			Строка.ПродолжитьИдентификаторОперации = СвойстваОперации.ИдентификаторОперации;
			Строка.ПродолжитьЭтоПерваяОперация = СвойстваОперации.ЭтоПерваяОперация;
		КонецЕсли;
		
		// Назначения
		Строка.НазначенияИзделий = СтрокаФормы.Назначения.Выгрузить();
		Строка.НазначенияМатериалов = СтрокаФормы.НазначенияМатериалов.Выгрузить();
		
		// Отменить изделие в заказе
		Если Строка.ОтменитьИзделиеВЗаказе
			И Не МожноОтменитьИзделиеВЗаказе(ЭтотОбъект, Строка) Тогда
			Строка.ОтменитьИзделиеВЗаказе = Ложь;
			Строка.ПричинаОтменыИзделия = Неопределено;
		КонецЕсли;
		
		// С точки зрения документа исходной номенклатурой является промежуточный выпуск (в том числе другого качества)
		Если Не Строка.НоменклатураИсходногоКачества.Пустая()
			И Не Объект.ПромежуточноеИзделиеНоменклатура.Пустая() Тогда
			Строка.НоменклатураИсходногоКачества = Объект.ПромежуточноеИзделиеНоменклатура;
			Строка.ХарактеристикаИсходногоКачества = Объект.ПромежуточноеИзделиеХарактеристика;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Партии", Партии);
	ПараметрыПроцедуры.Вставить("Серии", ОбработкаОбъект.Серии.Выгрузить());
	ПараметрыПроцедуры.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	Для каждого Реквизит Из ОбработкаОбъект.Метаданные().Реквизиты Цикл
		ПараметрыПроцедуры.Вставить(Реквизит.Имя, ОбработкаОбъект[Реквизит.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Настройки Цикл
		ПараметрыПроцедуры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Настройка счетов учета.
	НастройкаСчетовУчетаСервер.ЗаписатьНастройкиСчетовУчетаФормы(ЭтотОбъект);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Деление (сокращение, отмена) партии производства';
															|en = 'Delete (reduce, cancel) production lot'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ДелениеПартииПроизводства.ВыполнитьДействиеВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НачатьОжидание = Истина;
		
	Иначе
		
		ОбработатьВыполнениеДействияВФоне(ДлительнаяОперация);
		
		НачатьОжидание = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат НачатьОжидание;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ОбработатьВыполнениеДействияВФоне(Результат);
		
		Если ДействиеВыполнено Тогда
			Оповестить("ИзменениеПоследовательностиЭтапов", Объект.ПартияПроизводства);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыполнениеДействияВФоне(Результат)
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(РезультатСтруктура) = Тип("Структура") Тогда
		
			Для каждого Сообщение Из РезультатСтруктура.Сообщения Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			КонецЦикла;
			
			Если НЕ РезультатСтруктура.Отказ Тогда
				ДействиеВыполнено = Истина;
				ПоказатьРезультатВыполнения(РезультатСтруктура)
			КонецЕсли;
			
		КонецЕсли;
		
		// Сохранение настроек формы
		Если Настройки.ПростойРежимПриОткрытии <> ПростойРежим Тогда
			ЗначениеНастроек = Новый Структура;
			ЗначениеНастроек.Вставить("ПростойРежимПриОткрытии", ПростойРежим);
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"Обработка.ДелениеПартииПроизводства", "НастройкиФормы", ЗначениеНастроек);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультатВыполнения(Ссылки)
	
	// Выборка данных
	Этапы = Новый ТаблицаЗначений;
	Этапы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Этапы.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Этапы.Колонки.Добавить("Создан", Новый ОписаниеТипов("Булево"));
	Этапы.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));
	
	Если Ссылки.Свойство("ЭтапСоздан") Тогда
		Для каждого Ссылка Из Ссылки.ЭтапСоздан Цикл
			НоваяСтрока = Этапы.Добавить();
			НоваяСтрока.Ссылка = Ссылка;
			НоваяСтрока.Описание = НСтр("ru = 'Создан';
										|en = 'Created'");
			НоваяСтрока.Создан = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если Ссылки.Свойство("ЭтапИзменен") Тогда
		Для каждого Ссылка Из Ссылки.ЭтапИзменен Цикл
			НоваяСтрока = Этапы.Добавить();
			НоваяСтрока.Ссылка = Ссылка;
			НоваяСтрока.Описание = НСтр("ru = 'Изменен';
										|en = 'Changed'");
			НоваяСтрока.Изменен = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если Ссылки.Свойство("ЭтапУдален") Тогда
		Для каждого Ссылка Из Ссылки.ЭтапУдален Цикл
			НоваяСтрока = Этапы.Добавить();
			НоваяСтрока.Ссылка = Ссылка;
			НоваяСтрока.Описание = НСтр("ru = 'Удален';
										|en = 'Removed'");
		КонецЦикла;
	КонецЕсли;
	
	Этапы.Свернуть("Ссылка, Описание, Создан, Изменен");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Этапы.Ссылка   КАК Ссылка,
		|	Этапы.Описание КАК Описание,
		|	Этапы.Создан   КАК Создан,
		|	Этапы.Изменен  КАК Изменен
		|ПОМЕСТИТЬ ВТЭтапы
		|ИЗ
		|	&Этапы КАК Этапы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапПроизводства2_2.ПартияПроизводства           КАК ПартияПроизводства,
		|	ЭтапПроизводства2_2.ПартияПроизводства.Код       КАК КодПартии,
		|	ЭтапПроизводства2_2.ПартияПроизводства.ОсновноеИзделиеНоменклатура КАК НоменклатураПартии,
		|	ЭтапПроизводства2_2.Ссылка                       КАК Ссылка,
		|	ЭтапПроизводства2_2.Статус                       КАК Статус,
		|	ЭтапПроизводства2_2.КоличествоУпаковокПлан       КАК КоличествоУпаковок,
		|	ЭтапПроизводства2_2.УпаковкаПлан                 КАК Упаковка,
		|	ЭтапПроизводства2_2.Номер                        КАК Номер,
		|	ЭтапПроизводства2_2.Распоряжение.Номер           КАК НомерРаспоряжения,
		|	ЭтапПроизводства2_2.НаименованиеЭтапа            КАК НаименованиеЭтапа,
		|	ЕСТЬNULL(ВТЭтапы.Описание, &ОписаниеНеИзменялся) КАК Описание,
		|	ВЫБОР
		|		КОГДА ЭтапПроизводства2_2.ПометкаУдаления
		|			ТОГДА 2
		|		КОГДА ЭтапПроизводства2_2.Проведен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ                                            КАК НомерКартинки,
		|	(ЕСТЬNULL(ВТЭтапы.Создан, ЛОЖЬ)
		|		ИЛИ ЕСТЬNULL(ВТЭтапы.Изменен, ЛОЖЬ))
		|	И (ЭтапПроизводства2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		ИЛИ (НЕ ЭтапПроизводства2_2.Проведен
		|			И НЕ ЭтапПроизводства2_2.ПометкаУдаления)) КАК ЕстьОшибки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЭтапы КАК ВТЭтапы
		|		ПО ЭтапПроизводства2_2.Ссылка = ВТЭтапы.Ссылка
		|ГДЕ
		|	ЭтапПроизводства2_2.ПартияПроизводства В
		|		(ВЫБРАТЬ
		|			ВЫРАЗИТЬ(ВТЭтапы.Ссылка КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|		ИЗ
		|			ВТЭтапы)
		|	И (ЭтапПроизводства2_2.Проведен ИЛИ ВТЭтапы.Ссылка ЕСТЬ НЕ NULL)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	ЭтапПроизводства2_2.НомерЭтапа,
		|	ЭтапПроизводства2_2.НомерСледующегоЭтапа
		|АВТОУПОРЯДОЧИВАНИЕ
		|ИТОГИ ПО
		|	ПартияПроизводства");
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.УстановитьПараметр("ОписаниеНеИзменялся", НСтр("ru = 'Не изменялся';
															|en = 'has not been changed'"));
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Вывод дерева
	РезультатВыполнения.ПолучитьЭлементы().Очистить();
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		СтрокаПартия = РезультатВыполнения.ПолучитьЭлементы().Добавить();
		СтрокаПартия.Ссылка = ВыборкаИтоги.ПартияПроизводства;
		
		СтрокаПартия.СкрыватьКартинку = Истина;
		
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(СтрокаПартия.Представление) Тогда
				СтрокаПартия.Представление = ПредставлениеПартии(Выборка.КодПартии, Выборка.НомерРаспоряжения);
			КонецЕсли;
			
			НоваяСтрока = СтрокаПартия.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,
				"Ссылка, Статус, Описание, НомерКартинки, КоличествоУпаковок, Упаковка, НоменклатураПартии, ЕстьОшибки");
			НоваяСтрока.Представление = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(Выборка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Ссылки.Свойство("КорректировкаСоздана") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			Ссылки.КорректировкаСоздана,
			"Проведен, Представление");
		Для каждого Элемент Из ЗначенияРеквизитов Цикл
			НоваяСтрока = РезультатВыполнения.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ссылка = Элемент.Ключ;
			НоваяСтрока.Представление = Элемент.Значение.Представление;
			НоваяСтрока.НомерКартинки = ?(Элемент.Значение.Проведен, 1, 0);
			НоваяСтрока.Описание = НСтр("ru = 'Создан';
										|en = 'Created'");
			НоваяСтрока.ЕстьОшибки = Не Элемент.Значение.Проведен;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ссылки.Свойство("ЗаказИзменен") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			Ссылки.ЗаказИзменен,
			"Номер, Дата, Проведен, Статус");
		Для каждого Элемент Из ЗначенияРеквизитов Цикл
			НоваяСтрока = РезультатВыполнения.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ссылка = Элемент.Ключ;
			НоваяСтрока.Представление = Документы.ЗаказНаПроизводство2_2.ПредставлениеЗаказа(
				Элемент.Ключ,, Элемент.Значение);
			НоваяСтрока.НомерКартинки = ?(Элемент.Значение.Проведен, 1, 0);
			НоваяСтрока.Описание = НСтр("ru = 'Изменен';
										|en = 'Changed'");
			НоваяСтрока.ЕстьОшибки = Не Элемент.Значение.Проведен;
			НоваяСтрока.Статус = Элемент.Значение.Статус;
		КонецЦикла;
		
	КонецЕсли;
	
	// Настройка формы
	Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.СтраницаРезультаты;
	Элементы.ВыполнитьДействие.Видимость = Ложь;
	Элементы.Закрыть.Видимость = Истина;
	Элементы.ПростойРежим.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область НазначенияПартий

&НаКлиенте
Процедура ОткрытьПодборНазначений()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Объект.ОсновноеИзделиеНоменклатура);
	ПараметрыФормы.Вставить("Упаковка", Элементы.Партии.ТекущиеДанные.УпаковкаПартии);
	ПараметрыФормы.Вставить("КоличествоУпаковок", Элементы.Партии.ТекущиеДанные.КоличествоУпаковокПартии);
	
	АдресаТаблиц = ВыгрузитьТаблицыДляПодбораНазначений(Элементы.Партии.ТекущаяСтрока);
	ПараметрыФормы.Вставить("АдресНормативы", АдресаТаблиц.АдресНормативы);
	ПараметрыФормы.Вставить("АдресПодобрано", АдресаТаблиц.АдресПодобрано);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьНазначенияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ДелениеПартииПроизводства.Форма.ПодборНазначений",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьТаблицыДляПодбораНазначений(ИдентификаторСтроки)
	
	Строка = Объект.Партии.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Результат = Новый Структура;
	Результат.Вставить(
		"АдресНормативы",
		ПоместитьВоВременноеХранилище(НазначенияНормативы.Выгрузить()));
	Результат.Вставить(
		"АдресПодобрано",
		ПоместитьВоВременноеХранилище(Строка.Назначения.Выгрузить()));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УказатьНазначенияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ЗагрузитьРезультатПодбораНазначений(РезультатЗакрытия, Элементы.Партии.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПодбораНазначений(РезультатПодбора, ИдентификаторСтроки)
	
	Строка = Объект.Партии.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если РезультатПодбора.Количество <> 0 Тогда
		Строка.КоличествоУпаковокПартии = РезультатПодбора.КоличествоУпаковок;
		Строка.КоличествоПартии = РезультатПодбора.Количество;
	КонецЕсли;
	Строка.Назначения.Загрузить(ПолучитьИзВременногоХранилища(РезультатПодбора.АдресНазначения));
	Строка.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(Строка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользоватьНазначения(Действие, СНачалаПартии, ТекущиеДанные, Настройки)
	
	Действия = Действия();
	
	Возврат
		Действие = Действия.Разделить
			И (СНачалаПартии ИЛИ ТекущиеДанные.ПродолжитьОбработку И Настройки.ЗаполнитьПоСпецификации)
		ИЛИ Действие = Действия.Сократить И Настройки.ЗаполнитьПоСпецификации;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОшибкиЗаполненияНазначений(ТекущиеДанные)
	
	Если ТекущиеДанные.Назначения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоНазначения = 0;
	Для каждого Строка Из ТекущиеДанные.Назначения Цикл
		КоличествоНазначения = КоличествоНазначения + Строка.Количество;
	КонецЦикла;
	
	Возврат КоличествоНазначения <> ТекущиеДанные.КоличествоПартии;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНазначенияПартий()
	
	Действия = Действия();
	
	Если НазначенияНормативы.Количество() <= 1
		ИЛИ Объект.Действие = Действия.Отменить Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Действие = Действия.Продолжить Тогда
		
		Объект.Партии[0].Назначения.Загрузить(НазначенияНормативы.Выгрузить());
		
	Иначе
		
		Таблица = НазначенияНормативы.Выгрузить();
		Таблица.Индексы.Добавить("Назначение");
		
		Строки = Новый Массив;
		Для каждого Строка Из Объект.Партии Цикл
			Если Не Строка.ИспользоватьНазначения Тогда
				Продолжить;
			ИначеЕсли Строка.Назначения.Количество() = 0 Тогда
				Строки.Добавить(Строка);
			Иначе
				
				Для каждого СтрокаНазначение Из Строка.Назначения Цикл
					НайденнаяСтрока = Таблица.Найти(СтрокаНазначение.Назначение, "Назначение");
					Если НайденнаяСтрока <> Неопределено Тогда
						Если НайденнаяСтрока.Количество <= СтрокаНазначение.Количество Тогда
							Таблица.Удалить(НайденнаяСтрока);
						Иначе
							НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаНазначение.Количество;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Строка Из Строки Цикл
			
			Остаток = Строка.КоличествоПартии;
			
			Для Индекс = 0 По Таблица.Количество()-1 Цикл
				
				СтрокаНорматив = Таблица[Индекс];
				Если СтрокаНорматив.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Строка.Назначения.Добавить();
				НоваяСтрока.Назначение = СтрокаНорматив.Назначение;
				НоваяСтрока.Количество = Мин(СтрокаНорматив.Количество, Остаток);
				
				СтрокаНорматив.Количество = СтрокаНорматив.Количество - НоваяСтрока.Количество;
				Остаток = Остаток - НоваяСтрока.Количество;
				Если Остаток = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Остаток <> 0 Тогда
				СтруктураПоиска = Новый Структура("Назначение", Справочники.Назначения.ПустаяСсылка());
				НайденныеСтроки = Строка.Назначения.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = Строка.Назначения.Добавить();
					НоваяСтрока.Количество = Остаток;
				Иначе
					НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Остаток;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Изделия = Новый ТаблицаЗначений;
	Изделия.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Изделия.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Изделия.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Изделия.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для каждого Строка Из Объект.Партии Цикл
		Если Строка.ИспользоватьНазначения ИЛИ Объект.Действие = Действия.Продолжить Тогда
			
			Для каждого СтрокаНазначение Из Строка.Назначения Цикл
				НоваяСтрока = Изделия.Добавить();
				НоваяСтрока.Номенклатура = Объект.ОсновноеИзделиеНоменклатура;
				НоваяСтрока.Характеристика = Объект.ОсновноеИзделиеХарактеристика;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНазначение, "Назначение, Количество");
			КонецЦикла;
			
			НазначенияМатериалов = ОбеспечениеПроизводства.КоэффицентыНазначенийОбеспеченияВЭтапеПроизводства(Объект, Изделия);
			Если НазначенияМатериалов <> Неопределено Тогда
				Строка.НазначенияМатериалов.Загрузить(НазначенияМатериалов);
			КонецЕсли;
			
			Изделия.Очистить();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АвтовыборНоменклатуры

&НаСервере
Процедура ПрочитатьПараметрыАвтовыбора()
	
	ПараметрыСтруктура = Новый Структура;
	ПараметрыСтруктура.Вставить("ИспользоватьРаботу", Ложь);
	
	// Работа
	ПараметрыСтруктура.Вставить("Работа", Справочники.Номенклатура.ПустаяСсылка());
	ПараметрыСтруктура.Вставить("РаботаПредставление", "");
	ПараметрыСтруктура.Вставить("ХарактеристикаРаботы", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПараметрыСтруктура.Вставить("ХарактеристикаРаботыПредставление", "");
	ПараметрыСтруктура.Вставить("ХарактеристикаРаботыВладелец", Справочники.Номенклатура.ПустаяСсылка());
	
	ПараметрыСтруктура.Вставить("ИспользоватьТоварыДругогоКачества", Ложь);
	
	// Номенклатура - не годен
	ПараметрыСтруктура.Вставить("НоменклатураНеГоден", Справочники.Номенклатура.ПустаяСсылка());
	ПараметрыСтруктура.Вставить("НоменклатураНеГоденПредставление", "");
	
	// Номенклатура - ограниченно годен
	ПараметрыСтруктура.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ПараметрыСтруктура.Вставить("НоменклатураПредставление", "");
	
	// Параметры работы
	Если Настройки.ИспользоватьРаботу Тогда
		ПараметрыСтруктура.ИспользоватьРаботу = Истина;
		ПараметрыСтруктура.Работа = Настройки.Работа;
		ПараметрыСтруктура.РаботаПредставление = Строка(Настройки.Работа);
		ХарактеристикаРаботыВладелец = Неопределено;
		ХарактеристикиИспользуются = Справочники.Номенклатура.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(
			Настройки.Работа, ХарактеристикаРаботыВладелец);
		Если ХарактеристикиИспользуются Тогда
			ПараметрыСтруктура.ХарактеристикаРаботыПредставление = ПредставлениеПартии;
			ПараметрыСтруктура.ХарактеристикаРаботыВладелец = ХарактеристикаРаботыВладелец;
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Таблица.Ссылка КАК Ссылка,
				|	Таблица.Представление КАК Представление
				|ИЗ
				|	Справочник.ХарактеристикиНоменклатуры КАК Таблица
				|ГДЕ
				|	Таблица.Владелец = &Владелец
				|	И НЕ Таблица.ПометкаУдаления");
			Запрос.УстановитьПараметр("Владелец", ХарактеристикаРаботыВладелец);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				// Для функционирования формы используется любая характеристика
				// Новые характеристики будут созданы при выполнении действия
				ПараметрыСтруктура.ХарактеристикаРаботы = Выборка.Ссылка;
			Иначе
				ПараметрыСтруктура.ХарактеристикаРаботы = СоздатьХарактеристикуРаботыАвтовыбора(ПараметрыСтруктура);
				ХарактеристикиРаботыАвтовыбора.Добавить(ПараметрыСтруктура.ХарактеристикаРаботы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПромежуточноеИзделиеНоменклатура.Пустая()
		Или ПромежуточноеИзделиеКачество <> Перечисления.ГрадацииКачества.Новый Тогда
		Номенклатура = Объект.ОсновноеИзделиеНоменклатура;
		ТипНоменклатуры = ИзделиеТипНоменклатуры;
	Иначе
		Номенклатура = Объект.ПромежуточноеИзделиеНоменклатура;
		ТипНоменклатуры = ПромежуточноеИзделиеТипНоменклатуры;
	КонецЕсли;
	
	// Параметры товаров другого качества
	Если Настройки.ИспользоватьТоварыДругогоКачества
		И ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
		ПараметрыСтруктура.ИспользоватьТоварыДругогоКачества = Истина;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА                                  КАК НеГоден,
			|	Качество.НоменклатураБрак               КАК Номенклатура,
			|	Качество.НоменклатураБрак.Представление КАК НоменклатураПредставление
			|ИЗ
			|	РегистрСведений.ТоварыДругогоКачества КАК Качество
			|
			|ГДЕ
			|	Качество.Номенклатура = &Номенклатура
			|	И Качество.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.НеГоден)
			|	И Качество.Номенклатура.ВидНоменклатуры = Качество.НоменклатураБрак.ВидНоменклатуры
			|	И Качество.Номенклатура.ИспользованиеХарактеристик = Качество.НоменклатураБрак.ИспользованиеХарактеристик
			|	И Качество.Номенклатура.ЕдиницаИзмерения = Качество.НоменклатураБрак.ЕдиницаИзмерения
			|	И Качество.Номенклатура.ИспользоватьУпаковки = Качество.НоменклатураБрак.ИспользоватьУпаковки
			|	И НЕ Качество.НоменклатураБрак.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЛОЖЬ                                    КАК НеГоден,
			|	Качество.НоменклатураБрак               КАК Номенклатура,
			|	Качество.НоменклатураБрак.Представление КАК НоменклатураПредставление
			|ИЗ
			|	РегистрСведений.ТоварыДругогоКачества КАК Качество
			|
			|ГДЕ
			|	Качество.Номенклатура = &Номенклатура
			|	И Качество.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ОграниченноГоден)
			|	И Качество.Номенклатура.ВидНоменклатуры = Качество.НоменклатураБрак.ВидНоменклатуры
			|	И Качество.Номенклатура.ИспользованиеХарактеристик = Качество.НоменклатураБрак.ИспользованиеХарактеристик
			|	И Качество.Номенклатура.ЕдиницаИзмерения = Качество.НоменклатураБрак.ЕдиницаИзмерения
			|	И Качество.Номенклатура.ИспользоватьУпаковки = Качество.НоменклатураБрак.ИспользоватьУпаковки
			|	И НЕ Качество.НоменклатураБрак.ПометкаУдаления");
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.НайтиСледующий(Истина, "НеГоден") Тогда
			ПараметрыСтруктура.НоменклатураНеГоден = Выборка.Номенклатура;
			ПараметрыСтруктура.НоменклатураНеГоденПредставление = Выборка.НоменклатураПредставление;
		Иначе
			НоменклатураПредставление = Строка(Номенклатура);
			НоменклатураПредставление = СтрЗаменить(НоменклатураПредставление,
				", " + Строка(Перечисления.ГрадацииКачества.ОграниченноГоден),
				"");
			НоменклатураПредставление = НоменклатураПредставление
				+ ", " + Строка(Перечисления.ГрадацииКачества.НеГоден);
			ПараметрыСтруктура.НоменклатураНеГоденПредставление = НоменклатураПредставление;
		КонецЕсли;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Ложь, "НеГоден") Тогда
			ПараметрыСтруктура.Номенклатура = Выборка.Номенклатура;
			ПараметрыСтруктура.НоменклатураПредставление = Выборка.НоменклатураПредставление;
		Иначе
			НоменклатураПредставление = Строка(Номенклатура);
			КачествоПредставление = ", " + Строка(Перечисления.ГрадацииКачества.ОграниченноГоден);
			Если СтрНайти(НоменклатураПредставление, КачествоПредставление) = 0 Тогда
				НоменклатураПредставление = НоменклатураПредставление + КачествоПредставление;
			КонецЕсли;
			ПараметрыСтруктура.НоменклатураПредставление = НоменклатураПредставление;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыАвтовыбора = Новый ФиксированнаяСтруктура(ПараметрыСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьАвтовыборНоменклатуры(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения = Неопределено)
	
	ТекущиеДанные.АвтовыборНоменклатуры = Ложь;
	ТекущиеДанные.АвтовыборНоменклатурыЭтоРабота = Ложь;
	ТекущиеДанные.АвтовыборНоменклатурыЭтоПромежуточноеИзделие = Ложь;
	ТекущиеДанные.НоменклатураИсходногоКачества = Неопределено;
	ТекущиеДанные.ХарактеристикаИсходногоКачества = Неопределено;
	
	СписокРеквизитов = СписокРеквизитов + ", АвтовыборНоменклатуры";
	
	Если Не ТекущиеДанные.НоменклатураФорма.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураКопия = ТекущиеДанные.Номенклатура;
	ЭтоБракованноеИзделие = Объект.Действие = Действия().Брак И ТекущиеДанные.НомерСтроки = 1;
	ИспользоватьРаботу = ТекущиеДанные.ПродолжитьОбработку
		И (Объект.Действие = Действия().Разделить
			Или Объект.Действие = Действия().Брак);
	
	Если Не Объект.ПромежуточноеИзделиеНоменклатура.Пустая()
		И Не ЭтоБракованноеИзделие 
		И (Объект.СНачалаЭтапа
				И (Не ПроизведеноВПредшественниках Или Не ИспользоватьРаботу)
			Или Не Объект.СНачалаЭтапа
				И ПромежуточноеИзделиеКачество = Перечисления.ГрадацииКачества.ОграниченноГоден) Тогда
		
		// Автовыбор: Промежуточное изделие (номенклатура передаваемая между этапами)
		ТекущиеДанные.АвтовыборНоменклатуры = Истина;
		ТекущиеДанные.АвтовыборНоменклатурыЭтоПромежуточноеИзделие = Истина;
		
		ТекущиеДанные.Номенклатура = Объект.ПромежуточноеИзделиеНоменклатура;
		ТекущиеДанные.НоменклатураАвтовыбораПредставление = ПромежуточноеИзделиеНоменклатураПредставление;
		ТекущиеДанные.Характеристика = Объект.ПромежуточноеИзделиеХарактеристика;
		ТекущиеДанные.ХарактеристикаФорма = Неопределено;
		ТекущиеДанные.ХарактеристикаАвтовыбораПредставление = Строка(Объект.ПромежуточноеИзделиеХарактеристика);
		ТекущиеДанные.Упаковка = Объект.ПромежуточноеИзделиеУпаковка;
		
	ИначеЕсли ИспользоватьРаботу Тогда
		
		// Автовыбор: Работа
		Если ПараметрыАвтовыбора.ИспользоватьРаботу Тогда
			ТекущиеДанные.АвтовыборНоменклатуры = Истина;
			ТекущиеДанные.АвтовыборНоменклатурыЭтоРабота = Истина;
			
			ТекущиеДанные.Номенклатура = ПараметрыАвтовыбора.Работа;
			ТекущиеДанные.НоменклатураАвтовыбораПредставление = ПараметрыАвтовыбора.РаботаПредставление;
			
			ТекущиеДанные.Характеристика = ПараметрыАвтовыбора.ХарактеристикаРаботы;
			ТекущиеДанные.ХарактеристикаФорма = Неопределено;
			ТекущиеДанные.ХарактеристикаАвтовыбораПредставление = ПараметрыАвтовыбора.ХарактеристикаРаботыПредставление;
			
			ТекущиеДанные.Упаковка = Неопределено;
			ТекущиеДанные.КоличествоУпаковок = 1;
		КонецЕсли;
		
	Иначе
		
		// Автовыбор: Товар другого качества
		Если ПараметрыАвтовыбора.ИспользоватьТоварыДругогоКачества Тогда
			ТекущиеДанные.АвтовыборНоменклатуры = Истина;
			
			Если ЭтоБракованноеИзделие Тогда
				ТекущиеДанные.НоменклатураАвтовыбораПредставление = ПараметрыАвтовыбора.НоменклатураНеГоденПредставление;
			Иначе
				ТекущиеДанные.НоменклатураАвтовыбораПредставление = ПараметрыАвтовыбора.НоменклатураПредставление;
			КонецЕсли;
			
			Если Объект.ПромежуточноеИзделиеНоменклатура.Пустая()
				Или ПромежуточноеИзделиеКачество <> Перечисления.ГрадацииКачества.Новый Тогда
				ТекущиеДанные.Номенклатура = Объект.ОсновноеИзделиеНоменклатура;
				ТекущиеДанные.Характеристика = Объект.ОсновноеИзделиеХарактеристика;
				ТекущиеДанные.ХарактеристикаФорма = Неопределено;
				ТекущиеДанные.ХарактеристикаАвтовыбораПредставление = Строка(Объект.ОсновноеИзделиеХарактеристика);
				ТекущиеДанные.Упаковка = Объект.Упаковка;
				ТекущиеДанные.НоменклатураИсходногоКачества = Объект.ОсновноеИзделиеНоменклатура;
				ТекущиеДанные.ХарактеристикаИсходногоКачества = Объект.ОсновноеИзделиеХарактеристика;
			Иначе
				ТекущиеДанные.Номенклатура = Объект.ПромежуточноеИзделиеНоменклатура;
				ТекущиеДанные.Характеристика = Объект.ПромежуточноеИзделиеХарактеристика;
				ТекущиеДанные.ХарактеристикаФорма = Неопределено;
				ТекущиеДанные.ХарактеристикаАвтовыбораПредставление = Строка(Объект.ПромежуточноеИзделиеХарактеристика);
				ТекущиеДанные.Упаковка = Объект.ПромежуточноеИзделиеУпаковка;
				ТекущиеДанные.НоменклатураИсходногоКачества = Объект.ПромежуточноеИзделиеНоменклатура;
				ТекущиеДанные.ХарактеристикаИсходногоКачества = Объект.ПромежуточноеИзделиеХарактеристика;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТекущиеДанные.АвтовыборНоменклатуры Тогда
		ТекущиеДанные.Номенклатура = Неопределено;
	КонецЕсли;
	
	Если НоменклатураКопия <> ТекущиеДанные.Номенклатура Тогда
		СписокРеквизитов = СписокРеквизитов + ", Номенклатура";
		ПартииНоменклатураПриИзмененииНаСервере(ТекущиеДанные, КэшированныеЗначения);
	КонецЕсли;
	
	Если ТекущиеДанные.АвтовыборНоменклатурыЭтоРабота Тогда
		ТекущиеДанные.Получатель = ТекущиеДанные.ПродолжитьЭтапПодразделение;
	КонецЕсли;
	
	// Авторасчет количества
	НастроитьАвторасчетКоличества(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения);
	
	// Направление выпуска (контроль)
	СписокВыбора = СписокВыбораНаправлениеВыпускаФорма(ЭтотОбъект, ТекущиеДанные);
	Если СписокВыбора.НайтиПоЗначению(ТекущиеДанные.НаправлениеВыпускаФорма) = Неопределено Тогда
		Если ТекущиеДанные.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение
			И СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад) <> Неопределено Тогда
			ТекущиеДанные.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		ИначеЕсли ТекущиеДанные.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
			И СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение) <> Неопределено Тогда
			ТекущиеДанные.НаправлениеВыпускаФорма = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
		Иначе
			ТекущиеДанные.НаправлениеВыпускаФорма = СписокВыбора[0].Значение;
		КонецЕсли;
		ПриИзмененииНаправленияВыпускаФорма(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения);
	Иначе
		Если ПривестиТипПолучателя(ТекущиеДанные) Тогда
			ПолучательПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Ложь, КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНоменклатуруАвтовыбора()
	
	СтруктураПоискаСерии = Новый Структура("ИндексПартии");
	
	// Характеристики работы
	Если ЗначениеЗаполнено(ПараметрыАвтовыбора.ХарактеристикаРаботыВладелец) Тогда
		
		Характеристики = ХарактеристикиРаботыАвтовыбора.ВыгрузитьЗначения();
		ИндексХарактеристики = 0;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ 
			|	КОЛИЧЕСТВО(ХарактеристикиНоменклатуры.Ссылка) КАК Количество
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Владелец
			|	И ХарактеристикиНоменклатуры.Наименование ПОДОБНО &Наименование
			|	И НЕ ХарактеристикиНоменклатуры.Ссылка В (&Ссылки)
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(ХарактеристикиНоменклатуры.Ссылка) > 0");
		Запрос.УстановитьПараметр("Ссылки", Характеристики);
		Запрос.УстановитьПараметр("Наименование", ПараметрыАвтовыбора.ХарактеристикаРаботыПредставление + "%");
		Запрос.УстановитьПараметр("Владелец", ПараметрыАвтовыбора.ХарактеристикаРаботыВладелец);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НомерПартии = Выборка.Количество + 1;
		Иначе
			НомерПартии = 1;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("АвтовыборНоменклатурыЭтоРабота", Истина);
		НайденныеСтроки = Объект.Партии.НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из НайденныеСтроки Цикл
			
			Постфикс = ?(НомерПартии = 1 И НайденныеСтроки.Количество() = 1, 0, НомерПартии);
			
			Характеристика = Неопределено;
			Если ИндексХарактеристики <= Характеристики.ВГраница() Тогда
				Характеристика = Характеристики[ИндексХарактеристики];
				ОбновитьХарактеристикуРаботыАвтовыбора(Характеристика, ПараметрыАвтовыбора, Постфикс);
				ИндексХарактеристики = ИндексХарактеристики + 1;
			Иначе
				Характеристика = СоздатьХарактеристикуРаботыАвтовыбора(ПараметрыАвтовыбора, Постфикс);
				ХарактеристикиРаботыАвтовыбора.Добавить(Характеристика);
			КонецЕсли;
			
			Строка.Характеристика = Характеристика;
			
			СтруктураПоискаСерии.ИндексПартии = Строка.ИндексПартии;
			Для каждого СтрокаСерии Из Объект.Серии.НайтиСтроки(СтруктураПоискаСерии) Цикл
				СтрокаСерии.Характеристика = Строка.Характеристика;
			КонецЦикла;
			
			НомерПартии = НомерПартии + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Товары другого качества
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("АвтовыборНоменклатуры", Истина);
	СтруктураПоиска.Вставить("АвтовыборНоменклатурыЭтоПромежуточноеИзделие", Ложь);
	СтруктураПоиска.Вставить("АвтовыборНоменклатурыЭтоРабота", Ложь);
	Для каждого Строка Из Объект.Партии.НайтиСтроки(СтруктураПоиска) Цикл
		
		ЭтоБракованноеИзделие = (Объект.Действие = Действия().Брак И Строка.НомерСтроки = 1);
		НоменклатураСсылка = ?(ЭтоБракованноеИзделие,
			ПараметрыАвтовыбора.НоменклатураНеГоден, ПараметрыАвтовыбора.Номенклатура);
		
		Если НоменклатураСсылка.Пустая() Тогда
			// Создание номенклатуры
			УстановитьПривилегированныйРежим(Истина);
			Номенклатура = Строка.НоменклатураИсходногоКачества.Скопировать();
			Номенклатура.Наименование = Строка.НоменклатураАвтовыбораПредставление;
			Номенклатура.НаименованиеПолное = Строка.НоменклатураАвтовыбораПредставление;
			Номенклатура.Качество = ?(ЭтоБракованноеИзделие,
				Перечисления.ГрадацииКачества.НеГоден,
				Перечисления.ГрадацииКачества.ОграниченноГоден);
			Номенклатура.ФайлКартинки = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
			Номенклатура.ФайлОписанияДляСайта = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
			Номенклатура.Код = "";
			Номенклатура.КодДляПоиска = "";
			Номенклатура.ПометкаУдаления = Ложь;
			Номенклатура.Записать();
			
			РегистрыСведений.ТоварыДругогоКачества.ЗаписатьСвязьСТоваромДругогоКачества(
				Строка.НоменклатураИсходногоКачества, Номенклатура.Ссылка);
			УстановитьПривилегированныйРежим(Ложь);
			
			// Обновление параметров автовыбора
			ПараметрыКопия = Новый Структура(ПараметрыАвтовыбора);
			Если ЭтоБракованноеИзделие Тогда
				ПараметрыКопия.НоменклатураНеГоден = Номенклатура.Ссылка;
			Иначе
				ПараметрыКопия.Номенклатура = Номенклатура.Ссылка;
			КонецЕсли;
			ПараметрыАвтовыбора = Новый ФиксированнаяСтруктура(ПараметрыКопия);
			
			Строка.Номенклатура = Номенклатура.Ссылка;
		Иначе
			Строка.Номенклатура = НоменклатураСсылка;
		КонецЕсли;
		
		// Подбор/создание характеристики и упаковки
		Если ЗначениеЗаполнено(Строка.Характеристика)
			Или ЗначениеЗаполнено(Строка.Упаковка) Тогда
			СтрокаКопия = Новый Структура("НоменклатураИсходногоКачества,
				|ХарактеристикиИспользуются,
				|Номенклатура,
				|Характеристика,
				|Упаковка,
				|Количество,
				|КоличествоУпаковок");
			ЗаполнитьЗначенияСвойств(СтрокаКопия, Строка);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Строка.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", Строка.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			
			Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
				СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", Строка.Характеристика);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", Строка.Упаковка);
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКопия, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(Строка, СтрокаКопия, "Характеристика, Упаковка, Количество");
		КонецЕсли;
		
		// Корректировка серий
		СтруктураПоискаСерии.ИндексПартии = Строка.ИндексПартии;
		Для каждого СтрокаСерии Из Объект.Серии.НайтиСтроки(СтруктураПоискаСерии) Цикл
			ЗаполнитьЗначенияСвойств(СтрокаСерии, Строка, "Номенклатура, Характеристика");
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьХарактеристикуРаботыАвтовыбора(ЗначенияЗаполнения, Постфикс = 0)
	
	Наименование = ?(Постфикс = 0,
		ЗначенияЗаполнения.ХарактеристикаРаботыПредставление,
		СтрШаблон("%1 (%2)", ЗначенияЗаполнения.ХарактеристикаРаботыПредставление, Постфикс));
	
	УстановитьПривилегированныйРежим(Истина);
	Характеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	Характеристика.Владелец = ЗначенияЗаполнения.ХарактеристикаРаботыВладелец;
	Характеристика.Наименование = Наименование;
	Характеристика.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Характеристика.Ссылка;
	
КонецФункции

&НаСервере
Процедура ОбновитьХарактеристикуРаботыАвтовыбора(Ссылка, ЗначенияЗаполнения, Постфикс = 0)
	
	Наименование = ?(Постфикс = 0,
		ЗначенияЗаполнения.ХарактеристикаРаботыПредставление,
		СтрШаблон("%1 (%2)", ЗначенияЗаполнения.ХарактеристикаРаботыПредставление, Постфикс));
	
	НаименованиеТекущее = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование");
	
	Если НаименованиеТекущее <> Наименование Тогда
		УстановитьПривилегированныйРежим(Истина);
		СправочникОбъект = Ссылка.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
		СправочникОбъект.Наименование = Наименование;
		СправочникОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПростойРежим

&НаСервере
Процедура НастроитьПростойРежим()
	
	Действия = Действия();
	
	Если Объект.Действие = Действия.Разделить Тогда
		
		Если ВыпускИзделий.Количество() > 0 Тогда
			// Партии заполнены по таблице ВыпускИзделий - см. НастроитьПартии.
			// Последняя строка в таблице - это остаток к производству, 
			// данные этой строки редактируются на форме - см. ДанныеЭтапа (таблица ВыпускИзделий).
			ПоследняяПартия = Объект.Партии[Объект.Партии.Количество()-1];
			
			Если ПоследняяПартия.УпаковкаПартии = Объект.Упаковка Тогда
				ПростойРежимКоличествоУпаковок = ПоследняяПартия.КоличествоУпаковокПартии;
			Иначе
				ПростойРежимКоличествоУпаковок = 0;
			КонецЕсли;
			
			ПростойРежимНаправлениеВыпуска = ПоследняяПартия.НаправлениеВыпускаФорма;
			ПростойРежимПолучатель = ПоследняяПартия.Получатель;
			Элементы.ПростойРежимРазделитьПолучатель.ОграничениеТипа = ОграничениеТипаПолучателя(ПоследняяПартия);
		Иначе
			// 2 партии: направление первой - продолжить обработку, направление второй настраивается на форме
			ПерваяПартия = Объект.Партии[0];
			ВтораяПартия = Объект.Партии[1];
			
			Если ВтораяПартия.УпаковкаПартии = Объект.Упаковка Тогда
				ПростойРежимКоличествоУпаковок = ВтораяПартия.КоличествоУпаковокПартии;
			Иначе
				ПростойРежимКоличествоУпаковок = 0;
			КонецЕсли;
			
			// Первая партия
			ПерваяПартия.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку();
			ПриИзмененииНаправленияВыпускаФорма(ПерваяПартия, "");
			
			ПерваяПартия.НоменклатураФорма = Неопределено;
			НастроитьАвтовыборНоменклатуры(ПерваяПартия, "");
			
			ПерваяПартия.КоличествоУпаковокПартии = Объект.КоличествоУпаковок - ПростойРежимКоличествоУпаковок;
			ПерваяПартия.УпаковкаПартии = Объект.Упаковка;
			ПерваяПартия.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
				Объект.ОсновноеИзделиеНоменклатура,
				ПерваяПартия.УпаковкаПартии,
				ПерваяПартия.КоличествоУпаковокПартии);
			
			Если Не ПерваяПартия.АвтовыборНоменклатурыЭтоРабота Тогда
				ПерваяПартия.КоличествоУпаковок = ПерваяПартия.КоличествоУпаковокПартии;
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПерваяПартия, СтруктураДействий, Неопределено);
			КонецЕсли;
			
			ПерваяПартия.Назначения.Очистить();
			ПерваяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ПерваяПартия);
			ПерваяПартия.ИспользоватьНазначения = ИспользоватьНазначения(
				Объект.Действие, Объект.СНачалаПартии, ПерваяПартия, Настройки);
			
			Если ПерваяПартия.ИзменитьВыпускаемоеИзделие Тогда
				УстановитьОсновноеВыпускаемоеИзделие(ПерваяПартия);
			КонецЕсли;
			
			ПерваяПартия.ДоляСтоимости = ПерваяПартия.КоличествоУпаковокПартии;
			
			// Вторая партия
			Если ВтораяПартия.НаправлениеВыпускаФорма <> Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
				И ВтораяПартия.НаправлениеВыпускаФорма <> НаправлениеПродолжитьОбработку() Тогда
				ВтораяПартия.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку();
				ПриИзмененииНаправленияВыпускаФорма(ВтораяПартия, "");
			КонецЕсли;
			
			ВтораяПартия.НоменклатураФорма = Неопределено;
			НастроитьАвтовыборНоменклатуры(ВтораяПартия, "");
			
			ВтораяПартия.КоличествоУпаковокПартии = ПростойРежимКоличествоУпаковок;
			ВтораяПартия.УпаковкаПартии = Объект.Упаковка;
			ВтораяПартия.КоличествоПартии = РассчитатьКоличествоЕдиницПартии(
				Объект.ОсновноеИзделиеНоменклатура,
				ВтораяПартия.УпаковкаПартии,
				ВтораяПартия.КоличествоУпаковокПартии);
			
			Если Не ВтораяПартия.АвтовыборНоменклатурыЭтоРабота Тогда
				ВтораяПартия.КоличествоУпаковок = ВтораяПартия.КоличествоУпаковокПартии;
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ВтораяПартия, СтруктураДействий, Неопределено);
			КонецЕсли;
			
			ВтораяПартия.Назначения.Очистить();
			ВтораяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ВтораяПартия);
			ВтораяПартия.ИспользоватьНазначения = ИспользоватьНазначения(
				Объект.Действие, Объект.СНачалаПартии, ВтораяПартия, Настройки);
			
			Если ВтораяПартия.ИзменитьВыпускаемоеИзделие Тогда
				УстановитьОсновноеВыпускаемоеИзделие(ВтораяПартия);
			КонецЕсли;
			
			ВтораяПартия.ДоляСтоимости = ВтораяПартия.КоличествоУпаковокПартии;
			
			// Элементы простого режима
			ПростойРежимНаправлениеВыпуска = ВтораяПартия.НаправлениеВыпускаФорма;
			ПростойРежимПолучатель = ВтораяПартия.Получатель;
			ПростойРежимОтменитьИзделиеВЗаказе = ВтораяПартия.ОтменитьИзделиеВЗаказе;
			ПростойРежимПричинаОтменыИзделия = ВтораяПартия.ПричинаОтменыИзделия;
			Элементы.ПростойРежимРазделитьПолучатель.ОграничениеТипа = ОграничениеТипаПолучателя(ВтораяПартия);
		КонецЕсли;
		
	ИначеЕсли Объект.Действие = Действия.Брак Тогда
		
		// Первая партия
		ПерваяПартия = Объект.Партии[0];
		
		СписокВыбора = СписокВыбораНаправлениеВыпускаФорма(ЭтотОбъект, ПерваяПартия);
		Если СписокВыбора.НайтиПоЗначению(ПерваяПартия.НаправлениеВыпускаФорма) = Неопределено Тогда
			ПерваяПартия.НаправлениеВыпускаФорма = СписокВыбора[0].Значение;
			ПриИзмененииНаправленияВыпускаФорма(ПерваяПартия, "");
		КонецЕсли;
		
		ПерваяПартия.НоменклатураФорма = Неопределено;
		НастроитьАвтовыборНоменклатуры(ПерваяПартия, "");
		
		ПерваяПартия.Назначения.Очистить();
		ПерваяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ПерваяПартия);
		ПерваяПартия.ИспользоватьНазначения = ИспользоватьНазначения(
			Объект.Действие, Объект.СНачалаПартии, ПерваяПартия, Настройки);
		
		Если НЕ Объект.ЭтоПоследнийЭтапИОперация
			ИЛИ НЕ Объект.ВЭтапеЗаполненыДолиСтоимости Тогда
			ПерваяПартия.ДоляСтоимости = Объект.КоличествоУпаковокБрак * КоэффициентУпаковки;
		КонецЕсли;
		
		// Вторая партия
		Если Объект.Партии.Количество() = 2 Тогда
		
			ВтораяПартия = Объект.Партии[1];
			
			ВтораяПартия.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку();
			ПриИзмененииНаправленияВыпускаФорма(ВтораяПартия, "");
			
			ВтораяПартия.НоменклатураФорма = Неопределено;
			НастроитьАвтовыборНоменклатуры(ВтораяПартия, "");
			
			ВтораяПартия.Назначения.Очистить();
			ВтораяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ВтораяПартия);
			ВтораяПартия.ИспользоватьНазначения = ИспользоватьНазначения(
				Объект.Действие, Объект.СНачалаПартии, ВтораяПартия, Настройки);
			
			Если ВтораяПартия.ИзменитьВыпускаемоеИзделие Тогда
				УстановитьОсновноеВыпускаемоеИзделие(ВтораяПартия);
			КонецЕсли;
			
			ВтораяПартия.ДоляСтоимости = (Объект.КоличествоУпаковок - Объект.КоличествоУпаковокБрак) * КоэффициентУпаковки;
			
		КонецЕсли;
		
		// Элементы простого режима
		Элементы.ПростойРежимБракНоменклатураПредставление.Видимость = 
			Не ПустаяСтрока(ПараметрыАвтовыбора.НоменклатураНеГоденПредставление);
		Элементы.ПростойРежимБракНоменклатураПредставление.Гиперссылка =
			Не ПараметрыАвтовыбора.НоменклатураНеГоден.Пустая();
		ПростойРежимНоменклатураАвтовыбораПредставление = ПараметрыАвтовыбора.НоменклатураНеГоденПредставление;
		
		ПростойРежимНаправлениеВыпуска = ПерваяПартия.НаправлениеВыпускаФорма;
		Элементы.ГруппаПростойРежимБракНаправлениеВыпуска.Видимость = СписокВыбора.Количество() > 1;
		
		ПростойРежимПолучатель = ПерваяПартия.Получатель;
		Элементы.ПростойРежимБракПолучатель.ОграничениеТипа = ОграничениеТипаПолучателя(ПерваяПартия);
		
		ПростойРежимОтменитьИзделиеВЗаказе = ПерваяПартия.ОтменитьИзделиеВЗаказе;
		ПростойРежимПричинаОтменыИзделия = ПерваяПартия.ПричинаОтменыИзделия;
		
	ИначеЕсли Объект.Действие = Действия.Отменить Тогда
		
		ПерваяПартия = Объект.Партии[0];
		
		СписокВыбора = СписокВыбораНаправлениеВыпускаФорма(ЭтотОбъект, ПерваяПартия);
		Если СписокВыбора.НайтиПоЗначению(ПерваяПартия.НаправлениеВыпускаФорма) = Неопределено Тогда
			ПерваяПартия.НаправлениеВыпускаФорма = СписокВыбора[0].Значение;
			ПриИзмененииНаправленияВыпускаФорма(ПерваяПартия, "");
		КонецЕсли;
		
		ПерваяПартия.НоменклатураФорма = Неопределено;
		НастроитьАвтовыборНоменклатуры(ПерваяПартия, "");
		
		ЗаполнитьЗначенияСвойств(ПерваяПартия, Объект, "КоличествоУпаковок, Количество");
		
		ПерваяПартия.Назначения.Очистить();
		ПерваяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ПерваяПартия);
		ПерваяПартия.ИспользоватьНазначения = ИспользоватьНазначения(
			Объект.Действие, Объект.СНачалаПартии, ПерваяПартия, Настройки);
		
		// Элементы простого режима
		Если ПерваяПартия.АвтовыборНоменклатурыЭтоПромежуточноеИзделие Тогда
			Элементы.ПростойРежимОтменитьНоменклатураПредставление.Видимость = Истина;
			Элементы.ПростойРежимОтменитьНоменклатураПредставление.Гиперссылка = Истина;
			ПростойРежимНоменклатураАвтовыбораПредставление = ПромежуточноеИзделиеНоменклатураПредставление;
		Иначе
			Элементы.ПростойРежимОтменитьНоменклатураПредставление.Видимость = 
				Не ПустаяСтрока(ПараметрыАвтовыбора.НоменклатураПредставление);
			Элементы.ПростойРежимОтменитьНоменклатураПредставление.Гиперссылка =
				Не ПараметрыАвтовыбора.Номенклатура.Пустая();
			ПростойРежимНоменклатураАвтовыбораПредставление = ПараметрыАвтовыбора.НоменклатураПредставление;
		КонецЕсли;
		
		ПростойРежимНаправлениеВыпуска = ПерваяПартия.НаправлениеВыпускаФорма;
		Элементы.ГруппаПростойРежимОтменитьНаправлениеВыпуска.Видимость = СписокВыбора.Количество() > 1;
		
		ПростойРежимПолучатель = ПерваяПартия.Получатель;
		Элементы.ПростойРежимОтменитьПолучатель.ОграничениеТипа = ОграничениеТипаПолучателя(ПерваяПартия);
		
		ПростойРежимОтменитьИзделиеВЗаказе = ПерваяПартия.ОтменитьИзделиеВЗаказе;
		ПростойРежимПричинаОтменыИзделия = ПерваяПартия.ПричинаОтменыИзделия;
		
	ИначеЕсли Объект.Действие = Действия.Продолжить Тогда
		
		ПерваяПартия = Объект.Партии[0];
		
		ПерваяПартия.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку();
		ПриИзмененииНаправленияВыпускаФорма(ПерваяПартия, "");
		
		ПерваяПартия.НоменклатураФорма = Неопределено;
		НастроитьАвтовыборНоменклатуры(ПерваяПартия, "");
		
		ПерваяПартия.КоличествоУпаковокПартии = Объект.КоличествоУпаковок;
		ПерваяПартия.УпаковкаПартии = Объект.Упаковка;
		ПерваяПартия.КоличествоПартии = Объект.Количество;
		
		ЗаполнитьЗначенияСвойств(ПерваяПартия, Объект, "КоличествоУпаковок, Количество");
		
		ПерваяПартия.Назначения.Очистить();
		ПерваяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ПерваяПартия);
		ПерваяПартия.ИспользоватьНазначения = ИспользоватьНазначения(
			Объект.Действие, Объект.СНачалаПартии, ПерваяПартия, Настройки);
		
		Если ПерваяПартия.ИзменитьВыпускаемоеИзделие Тогда
			УстановитьОсновноеВыпускаемоеИзделие(ПерваяПартия);
		КонецЕсли;
		
		ПростойРежимОтменитьИзделиеВЗаказе = Ложь;
		ПростойРежимПричинаОтменыИзделия = Неопределено;
		
	ИначеЕсли Объект.Действие = Действия.Сократить Тогда
		
		ПерваяПартия = Объект.Партии[0];
		
		ПерваяПартия.Назначения.Очистить();
		ПерваяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ПерваяПартия);
		ПерваяПартия.ИспользоватьНазначения = ИспользоватьНазначения(
			Объект.Действие, Объект.СНачалаПартии, ПерваяПартия, Настройки);
		
		// Элементы простого режима
		ПростойРежимКоличествоУпаковок = ПерваяПартия.КоличествоУпаковокПартии;
		ПростойРежимУпаковка = ПерваяПартия.УпаковкаПартии;
		
		ПростойРежимОтменитьИзделиеВЗаказе = ПерваяПартия.ОтменитьИзделиеВЗаказе;
		ПростойРежимПричинаОтменыИзделия = ПерваяПартия.ПричинаОтменыИзделия;
		
	Иначе
		
		ПерваяПартия = Объект.Партии[0];
		
		ПерваяПартия.Назначения.Очистить();
		ПерваяПартия.ЕстьОшибкиЗаполненияНазначений = ЕстьОшибкиЗаполненияНазначений(ПерваяПартия);
		ПерваяПартия.ИспользоватьНазначения = ИспользоватьНазначения(
			Объект.Действие, Объект.СНачалаПартии, ПерваяПартия, Настройки);
		
		Если ПерваяПартия.ИзменитьВыпускаемоеИзделие Тогда
			УстановитьОсновноеВыпускаемоеИзделие(ПерваяПартия);
		КонецЕсли;
		
		ПростойРежимОтменитьИзделиеВЗаказе = Ложь;
		ПростойРежимПричинаОтменыИзделия = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоПроизводственногоПроцесса

&НаСервереБезКонтекста
Функция ПроизводственныйПроцессВХранилище(Спецификация, УникальныйИдентификатор)
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("ВидЭлемента", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	Дерево.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Дерево.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Дерево.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	Дерево.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Дерево.Колонки.Добавить("НомерСледующего", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Дерево.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Дерево.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров"));
	Дерево.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства, СправочникСсылка.ТехнологическиеОперации"));
	Дерево.Колонки.Добавить("ТехнологическийПроцесс", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеПроцессы"));
	Дерево.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Спецификация", Спецификация);
	ПараметрыПроцедуры.Вставить("ПроизводственныйПроцессДерево", Дерево);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
	
	ДлительныеОперации.ВыполнитьВФоне(
		"РедакторПроизводственногоПроцесса.СтруктураПроизводственногоПроцессаВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

// Возвращает информацию об операции технологического процесса.
// 
// Параметры:
//  АдресПроизводственныйПроцесс - Строка - Адрес производственного процесса во временном хранилище
//  Операция - СправочникСсылка.ТехнологическиеОперации - Операция
//  ИдентификаторОперации - Число - Идентификатор операции
// 
// Возвращаемое значение:
//  Структура:
//   * Операция - СправочникСсылка.ТехнологическиеОперации - Если Операция - это технологический процесс,
//     то возвращается его первая операция, иначе возвращается входящее значение.
//   * ИдентификаторОперации - Число - Заполняется аналогично параметру Операция.
//   * ЭтоПерваяОперация - Булево - Истина если операция первая в этапе.
//
&НаСервереБезКонтекста
Функция СвойстваОперацииПроизводственногоПроцесса(АдресПроизводственныйПроцесс, Операция, ИдентификаторОперации)
	
	Результат = Новый Структура;
	Результат.Вставить("Операция", Операция);
	Результат.Вставить("ИдентификаторОперации", ИдентификаторОперации);
	Результат.Вставить("ЭтоПерваяОперация", Ложь);
	
	Если Не ЭтоАдресВременногоХранилища(АдресПроизводственныйПроцесс) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Дерево = ПолучитьИзВременногоХранилища(АдресПроизводственныйПроцесс); //ДеревоЗначений
	СтрокаОперация = Дерево.Строки.Найти(Операция, "Ссылка", Истина);
	Если СтрокаОперация = Неопределено
			Или СтрокаОперация.Родитель = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаОперация.Родитель.Ссылка) = Тип("СправочникСсылка.ЭтапыПроизводства") Тогда
		Если СтрокаОперация.Строки.Количество() > 0 Тогда
			// Операция - это технологический процесс
			Результат.Операция = СтрокаОперация.Строки[0].Ссылка;
			Результат.ИдентификаторОперации = СтрокаОперация.Строки[0].ИдентификаторОперации;
		КонецЕсли;
		СтрокаЭтап = СтрокаОперация.Родитель;
		Результат.ЭтоПерваяОперация = СтрокаЭтап.Строки.Индекс(СтрокаОперация) = 0;
	ИначеЕсли ТипЗнч(СтрокаОперация.Родитель.Ссылка) = Тип("СправочникСсылка.ТехнологическиеОперации") Тогда
		СтрокаТехнологическийПроцесс = СтрокаОперация.Родитель;
		СтрокаЭтап = СтрокаТехнологическийПроцесс.Родитель;
		Результат.ЭтоПерваяОперация = СтрокаЭтап.Строки.Индекс(СтрокаТехнологическийПроцесс) = 0
			И СтрокаТехнологическийПроцесс.Строки.Индекс(СтрокаОперация) = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроизводственныйПроцессПартииВХранилище(ПартияПроизводства, УникальныйИдентификатор, ЕстьОперации)
	
	Дерево = Обработки.ДелениеПартииПроизводства.ДеревоПроизводственногоПроцесса(ПартияПроизводства, Истина);
	ЕстьОперации = Дерево.Строки.Найти(Ложь, "ЭтоЭтап", Истина) <> Неопределено;
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура НайтиСледующуюТочкуПроизводственногоПроцесса(СледующаяОперация, СледующийЭтап)
	
	ДеревоСпецификации = ПолучитьИзВременногоХранилища(АдресПроизводственныйПроцесс); // ДеревоЗначений
	
	НайденнаяСтрока = ДеревоСпецификации.Строки.Найти(ЭтапСпецификации, "Ссылка", Истина);
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияСпецификации = НайденнаяСтрока.Строки.Найти(Объект.ИдентификаторОперации, "ИдентификаторОперации", Истина);
	Если ОперацияСпецификации <> Неопределено Тогда
		ОперацияСпецификацииИндекс = ОперацияСпецификации.Родитель.Строки.Индекс(ОперацияСпецификации);
		Если ОперацияСпецификацииИндекс <> ОперацияСпецификации.Родитель.Строки.Количество() - 1 Тогда
			СледующаяОперация = ОперацияСпецификации.Родитель.Строки[ОперацияСпецификацииИндекс + 1];
		Иначе
			СтрокаЭтап = Неопределено;
			Если ТипЗнч(ОперацияСпецификации.Родитель.Ссылка) = Тип("СправочникСсылка.ТехнологическиеОперации") Тогда
				СтрокаТехнологическийПроцесс = ОперацияСпецификации.Родитель;
				СтрокаЭтап = СтрокаТехнологическийПроцесс.Родитель;
				ТехнологическийПроцессИндекс = СтрокаЭтап.Строки.Индекс(СтрокаТехнологическийПроцесс);
				Если ТехнологическийПроцессИндекс <> СтрокаЭтап.Строки.Количество() - 1 Тогда
					СледующаяОперация = СтрокаЭтап.Строки[ТехнологическийПроцессИндекс + 1];
				КонецЕсли;
			Иначе
				СтрокаЭтап = ОперацияСпецификации.Родитель;
			КонецЕсли;
			
			Если СледующаяОперация = Неопределено
				И СтрокаЭтап <> Неопределено Тогда
				ЭтапИндекс = ДеревоСпецификации.Строки.Индекс(СтрокаЭтап);
				Если ЭтапИндекс <> ДеревоСпецификации.Строки.Количество() - 1 Тогда
					СледующийЭтап = ДеревоСпецификации.Строки[ЭтапИндекс + 1];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПрочитатьНастройки()
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ИспользоватьРаботу", Ложь);
	НастройкиФормы.Вставить("Работа", Справочники.Номенклатура.ПустаяСсылка());
	НастройкиФормы.Вставить("ИспользоватьТоварыДругогоКачества", Ложь);
	НастройкиФормы.Вставить("ЗаполнитьПоСпецификации", Ложь);
	НастройкиФормы.Вставить("РезервироватьМатериалы", Ложь);
	НастройкиФормы.Вставить("ЗаменятьМатериалыНаАналоги", Ложь);
	НастройкиФормы.Вставить("ПростойРежимДоступен", Ложь);
	НастройкиФормы.Вставить("ПростойРежимПриОткрытии", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеНастроек = Константы.НастройкиДеленияПартийПроизводства.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиФормы, ЗначениеНастроек);
	КонецЕсли;
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ДелениеПартииПроизводства", "");
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиФормы, ЗначениеНастроек);
	КонецЕсли;
	
	НастройкиФормы.ПростойРежимДоступен = НастройкиФормы.ИспользоватьРаботу
		Или НастройкиФормы.ИспользоватьТоварыДругогоКачества;
	
	Если НастройкиФормы.ПростойРежимДоступен Тогда
		ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ДелениеПартииПроизводства", "НастройкиФормы");
		Если ТипЗнч(ЗначениеНастроек) = Тип("Структура")
			И ЗначениеНастроек.Свойство("ПростойРежимПриОткрытии") Тогда
			НастройкиФормы.ПростойРежимПриОткрытии = ЗначениеНастроек.ПростойРежимПриОткрытии;
		КонецЕсли;
	КонецЕсли;
	
	Настройки = Новый ФиксированнаяСтруктура(НастройкиФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастроек(КэшированныеЗначения)
	
	ПрочитатьНастройки();
	ПрочитатьПараметрыАвтовыбора();
	
	Если Не Настройки.ПростойРежимДоступен
		И ПростойРежим Тогда
		ПростойРежим = Ложь;
		ПростойРежимФорма = 0;
	КонецЕсли;
	
	НастроитьПартии();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Действия()
	
	Результат = Новый Структура;
	Результат.Вставить("Сократить", 0);
	Результат.Вставить("Отменить", 1);
	Результат.Вставить("Разделить", 2);
	Результат.Вставить("Продолжить", 3);
	Результат.Вставить("Брак", 5);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеЭтапа(Объект, ИзделиеЕдиницаИзмерения)
	
	Результат = Неопределено;
	
	ПартияПроизводства = Объект.ПартияПроизводства;
	Этап = Объект.Этап;
	Операция = Объект.Операция;
	ЭтоПерваяОперация = Объект.ЭтоПерваяОперация;
	ЭтоПоследняяОперация = Объект.ЭтоПоследняяОперация;
	Действие = Объект.Действие;
	
	Если Этап.Пустая() Тогда
		
		ТекстЗапроса = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Этапы.УпаковкаПлан КАК Упаковка,
			|	ВЫБОР
			|		КОГДА Этапы.УпаковкаПлан = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Этапы.УпаковкаПлан)
			|	КОНЕЦ КАК ИзделиеУпаковкаПредставление,
			|	ЕСТЬNULL(&КоэффициентУпаковки, 1) КАК КоэффициентУпаковки
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	Этапы.ПартияПроизводства = &ПартияПроизводства
			|	И Этапы.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, -Этапы.ДлительностьДоВыпуска)";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&КоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Этапы.УпаковкаПлан",
				"Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Результат = Новый Структура;
			Результат.Вставить("Упаковка", Выборка.Упаковка);
			Результат.Вставить("ИзделиеУпаковкаПредставление", Выборка.ИзделиеУпаковкаПредставление);
			Результат.Вставить("КоэффициентУпаковки", Выборка.КоэффициентУпаковки);
			Результат.Вставить("ЭтапПредставление", "");
			Результат.Вставить("Подразделение", Неопределено);
			Результат.Вставить("Произведено", Ложь);
			Результат.Вставить("СоздатьЭтап", Ложь);
			Результат.Вставить("ЭтапСпецификации", Неопределено);
			Результат.Вставить("ЭтапСпецификацииПредставление", "");
			Результат.Вставить("ЭтапСпецификацииПодразделение", Неопределено);
			Результат.Вставить("СНачалаПартии", Истина);
			Результат.Вставить("СНачалаЭтапа", Истина);
			Результат.Вставить("ПромежуточноеИзделиеНоменклатура", Неопределено);
			Результат.Вставить("ПромежуточноеИзделиеХарактеристика", Неопределено);
			Результат.Вставить("ПромежуточноеИзделиеТипНоменклатуры", Неопределено);
			Результат.Вставить("ПромежуточноеИзделиеУпаковка", Неопределено);
			Результат.Вставить("ПромежуточноеИзделиеНоменклатураПредставление", "");
			Результат.Вставить("ПромежуточноеИзделиеКачество", Неопределено);
			Результат.Вставить("ПроизведеноВПредшественниках", Ложь);
			Результат.Вставить("КоличествоУпаковокБрак", 0);
			Результат.Вставить("ВыпускИзделий", Неопределено);
			Результат.Вставить("ЭтоПоследнийЭтапИОперация", Ложь);
			Результат.Вставить("ВЭтапеЗаполненыДолиСтоимости", Ложь);
			
		КонецЕсли;
		
	Иначе
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Документы.ЭтапПроизводства2_2.СоздатьВТПредшественники(МенеджерВременныхТаблиц, Этап);
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Предшественники.Предшественник) КАК Количество,
			|	МИНИМУМ(Предшественники.Предшественник.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) КАК Завершены,
			|	МИНИМУМ(Предшественники.Предшественник.Подразделение) КАК Подразделение
			|ПОМЕСТИТЬ Предшественники
			|ИЗ
			|	ВТПредшественники КАК Предшественники
			|ГДЕ
			|	Предшественники.Предшественник.ПартияПроизводства = &ПартияПроизводства
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(Предшественники.Предшественник) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ПроизведеноВПредшественниках
			|ПОМЕСТИТЬ ПредшественникиПроизведено
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
			|ГДЕ
			|	ПобочныеИзделия.Ссылка В (
			|		ВЫБРАТЬ
			|			Предшественники.Предшественник КАК Ссылка
			|		ИЗ
			|			ВТПредшественники КАК Предшественники
			|		ГДЕ
			|			Предшественники.Предшественник.ПартияПроизводства = &ПартияПроизводства)
			|	И ПобочныеИзделия.Произведено
			|	И НЕ ПобочныеИзделия.Отменено
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Изделия.Номенклатура КАК Номенклатура,
			|	Изделия.Характеристика КАК Характеристика,
			|	Изделия.Получатель КАК Получатель,
			|	Изделия.Назначение КАК Назначение,
			|	Изделия.Количество КАК Количество,
			|	Изделия.КоличествоУпаковок КАК КоличествоУпаковок,
			|	Изделия.Упаковка КАК Упаковка,
			|	Изделия.Произведено КАК Произведено
			|ПОМЕСТИТЬ Изделия
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
			|ГДЕ
			|	Изделия.Ссылка = &Этап
			|	И НЕ Изделия.Отменено
			|	И Изделия.Номенклатура = Изделия.Ссылка.ПартияПроизводства.ОсновноеИзделиеНоменклатура
			|	И Изделия.Характеристика = Изделия.Ссылка.ПартияПроизводства.ОсновноеИзделиеХарактеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЛОЖЬ КАК ПродолжитьОбработку,
			|	Изделия.Номенклатура КАК Номенклатура,
			|	Изделия.Характеристика КАК Характеристика,
			|	Изделия.Получатель КАК Получатель,
			|	Изделия.Назначение КАК Назначение,
			|	СУММА(Изделия.Количество) КАК Количество,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Изделия.Упаковка) = 1
			|			ТОГДА МИНИМУМ(Изделия.Упаковка)
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК Упаковка,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Изделия.Упаковка) = 1
			|			ТОГДА СУММА(Изделия.КоличествоУпаковок)
			|		ИНАЧЕ СУММА(Изделия.Количество)
			|	КОНЕЦ КАК КоличествоУпаковок
			|ИЗ
			|	Изделия КАК Изделия
			|ГДЕ
			|	Изделия.Произведено
			|	И ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Изделия КАК ИзделияОбратные
			|		ГДЕ
			|			НЕ ИзделияОбратные.Произведено)
			|
			|СГРУППИРОВАТЬ ПО
			|	Изделия.Номенклатура,
			|	Изделия.Характеристика,
			|	Изделия.Получатель,
			|	Изделия.Назначение
			|
			|ИМЕЮЩИЕ
			|	СУММА(Изделия.Количество) > 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА КАК ПродолжитьОбработку,
			|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
			|	НЕОПРЕДЕЛЕНО КАК Характеристика,
			|	НЕОПРЕДЕЛЕНО КАК Получатель,
			|	НЕОПРЕДЕЛЕНО КАК Назначение,
			|	СУММА(Изделия.Количество) КАК Количество,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Изделия.Упаковка) = 1
			|			ТОГДА МИНИМУМ(Изделия.Упаковка)
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК Упаковка,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Изделия.Упаковка) = 1
			|			ТОГДА СУММА(Изделия.КоличествоУпаковок)
			|		ИНАЧЕ СУММА(Изделия.Количество)
			|	КОНЕЦ КАК КоличествоУпаковок
			|ИЗ
			|	Изделия КАК Изделия
			|ГДЕ
			|	НЕ Изделия.Произведено
			|	И ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Изделия КАК ИзделияОбратные
			|		ГДЕ
			|			ИзделияОбратные.Произведено)
			|
			|ИМЕЮЩИЕ
			|	СУММА(Изделия.Количество) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Этапы.Номер                           КАК Номер,
			|	Этапы.НаименованиеЭтапа               КАК НаименованиеЭтапа,
			|	Этапы.Подразделение                   КАК Подразделение,
			|	Этапы.Этап                            КАК Этап,
			|	ПРЕДСТАВЛЕНИЕ(Этапы.Этап)             КАК ЭтапПредставление,
			|	Этапы.Этап.Подразделение              КАК ЭтапПодразделение,
			|	Этапы.КоличествоУпаковокПлан          КАК КоличествоУпаковок,
			|	Этапы.УпаковкаПлан                    КАК Упаковка,
			|	ЕСТЬNULL(&НаименованиеУпаковки, """") КАК ИзделиеУпаковкаПредставление,
			|	ЕСТЬNULL(&КоэффициентУпаковки, 1)     КАК КоэффициентУпаковки,
			|	ЕСТЬNULL(&ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЛОЖЬ) КАК УпаковкаШтучная,
			|	
			|	Этапы.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
			|	ИЛИ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК НазначенныеОперации
			|		ГДЕ
			|			НазначенныеОперации.Этап = &Этап
			|			И НазначенныеОперации.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка))
			|	ИЛИ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Документ.ПроизводственнаяОперация2_2 КАК Операции
			|		ГДЕ
			|			Операции.Этап = &Этап
			|			И Операции.Проведен) КАК ЭтапНачат,
			|	
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			РегистрСведений.ОчередьПроизводственныхОпераций КАК ОчередьОпераций
			|		ГДЕ
			|			ОчередьОпераций.Этап = &Этап)       КАК ЕстьОперации,
			|	
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
			|		ГДЕ
			|			Изделия.Ссылка = &Этап
			|			И НЕ Изделия.Отменено
			|			И Изделия.ДоляСтоимости <> 0)       КАК ВЭтапеЗаполненыДолиСтоимости,
			|	
			|	Предшественники.Количество ЕСТЬ NULL        КАК ЭтоПервыйЭтап,
			|	Этапы.НомерСледующегоЭтапа = 0              КАК ЭтоПоследнийЭтап,
			|	ЕСТЬNULL(Предшественники.Количество, 0) > 1 КАК НесколькоПредшественников,
			|	ЕСТЬNULL(Предшественники.Завершены, ЛОЖЬ)   КАК ПредшественникиЗавершены,
			|	ЕСТЬNULL(Предшественники.Подразделение, НЕОПРЕДЕЛЕНО) КАК ПодразделениеПредшественники,
			|
			|	ЕСТЬNULL(ПредшественникиПроизведено.ПроизведеноВПредшественниках, ЛОЖЬ) КАК ПроизведеноВПредшественниках
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ Предшественники КАК Предшественники
			|	ПО ИСТИНА
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ПредшественникиПроизведено КАК ПредшественникиПроизведено
			|	ПО ИСТИНА
			|ГДЕ
			|	Этапы.Ссылка = &Этап";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&НаименованиеУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Наименование",
				"Этапы.УпаковкаПлан",
				"Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&КоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Этапы.УпаковкаПлан",
				"Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТипУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"ТипИзмеряемойВеличины",
				"Этапы.УпаковкаПлан",
				"Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
		
		Запрос = Новый Запрос(ТекстЗапроса); // Запрос вместе с ВТ и параметрами так же используется ниже для расчета промежуточного изделия
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		Запрос.УстановитьПараметр("Этап", Этап);
		
		УстановитьПривилегированныйРежим(Истина);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		ВыпускИзделий = МассивРезультатов[МассивРезультатов.ВГраница()-1].Выгрузить();
		ВыборкаЭтап = МассивРезультатов[МассивРезультатов.ВГраница()].Выбрать();
		ВыборкаЭтап.Следующий();
		
		СНачалаЭтапа = Не (
			ВыборкаЭтап.ЭтапНачат
			Или Действие = Действия().Брак
			Или (Не Операция.Пустая() И Не ЭтоПерваяОперация)
		);
		СНачалаПартии = ВыборкаЭтап.ЭтоПервыйЭтап И СНачалаЭтапа;
		
		ЭтоПоследнийЭтапИОперация = ?(ВыборкаЭтап.ЕстьОперации,
			ВыборкаЭтап.ЭтоПоследнийЭтап И ЭтоПоследняяОперация,
			ВыборкаЭтап.ЭтоПоследнийЭтап);
		
		ОперацияПредставление = ?(Операция.Пустая(), "", Строка(Операция));
		
		ЭтапПредставление = ?(Операция.Пустая(),
			СтрШаблон("%1 (%2)", ВыборкаЭтап.НаименованиеЭтапа, ВыборкаЭтап.Номер),
			СтрШаблон("%1 / %2 (%3)", ВыборкаЭтап.НаименованиеЭтапа, ОперацияПредставление, ВыборкаЭтап.Номер));
		Если СНачалаПартии Тогда
			ЭтапПредставление = ЭтапПредставление + " - " + НСтр("ru = 'с начала партии';
																|en = 'from the beginning of the lot'");
		КонецЕсли;
		
		ЭтапСпецификацииПредставление = ?(Операция.Пустая(),
			ВыборкаЭтап.ЭтапПредставление,
			СтрШаблон("%1 / %2", ВыборкаЭтап.ЭтапПредставление, ОперацияПредставление));
		
		СоздатьЭтап = Ложь;
		Произведено = Ложь;
		Если Действие = Действия().Брак Тогда
			Произведено = Истина;
		ИначеЕсли Не ВыборкаЭтап.ЭтоПервыйЭтап И СНачалаЭтапа Тогда
			// Промежуточный выпуск будет отражен в этапе предшественнике
			СоздатьЭтап = ВыборкаЭтап.НесколькоПредшественников Или ВыборкаЭтап.ПредшественникиЗавершены;
			Произведено = ВыборкаЭтап.ПредшественникиЗавершены;
		КонецЕсли;
		ПроизведеноВПредшественниках = ВыборкаЭтап.ПроизведеноВПредшественниках; // В предшествующих этапах есть строки с флагом Произведено
		
		Подразделение = ?(Не СНачалаЭтапа Или СоздатьЭтап Или ВыборкаЭтап.ПодразделениеПредшественники = Неопределено,
			ВыборкаЭтап.Подразделение, ВыборкаЭтап.ПодразделениеПредшественники);
		
		// Расчет изделия которое передается между этапами (промежуточное изделие)
		ПромежуточноеИзделиеНоменклатура = Неопределено;
		ПромежуточноеИзделиеХарактеристика = Неопределено;
		ПромежуточноеИзделиеТипНоменклатуры = Неопределено;
		ПромежуточноеИзделиеУпаковка = Неопределено;
		ПромежуточноеИзделиеНоменклатураПредставление = "";
		ПромежуточноеИзделиеКачество = Неопределено;
		Если Не СНачалаПартии Тогда
			Если СНачалаЭтапа Тогда
				// Выпуск - в предшественнике, обеспечение - в точке деления
				ТекстЗапроса = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Выпуск.Номенклатура                 КАК Номенклатура,
					|	Выпуск.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
					|	Выпуск.Номенклатура.Представление   КАК НоменклатураПредставление,
					|	Выпуск.Характеристика               КАК Характеристика,
					|	Выпуск.Упаковка                     КАК Упаковка,
					|	Выпуск.Номенклатура.Качество        КАК Качество
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Выпуск
					|ГДЕ
					|	Выпуск.Ссылка В (
					|		ВЫБРАТЬ
					|			Предшественники.Предшественник КАК Ссылка
					|		ИЗ
					|			ВТПредшественники КАК Предшественники
					|		ГДЕ
					|			Предшественники.Предшественник.ПартияПроизводства = &ПартияПроизводства)
					|	И ИСТИНА В (
					|		ВЫБРАТЬ ПЕРВЫЕ 1
					|			ИСТИНА
					|		ИЗ
					|			Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
					|		ГДЕ
					|			Обеспечение.Ссылка = &Этап
					|			И Обеспечение.Номенклатура = Выпуск.Номенклатура
					|			И Обеспечение.Характеристика = Выпуск.Характеристика
					|			И НЕ Обеспечение.Отменено)
					|	И НЕ Выпуск.Отменено
					|	И Выпуск.Номенклатура.ЕдиницаИзмерения = &ИзделиеЕдиницаИзмерения
					|	И ЕСТЬNULL(&КоэффициентУпаковки, 1) = &ИзделиеКоэффициентУпаковки";
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса,
					"&КоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"Выпуск.Упаковка",
						"Выпуск.Номенклатура"));
				
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("Этап", Этап);
				Запрос.УстановитьПараметр("ИзделиеЕдиницаИзмерения", ИзделиеЕдиницаИзмерения);
				Запрос.УстановитьПараметр("ИзделиеКоэффициентУпаковки", ВыборкаЭтап.КоэффициентУпаковки);
				ВыборкаИзделие = Запрос.Выполнить().Выбрать();
				Если ВыборкаИзделие.Следующий() Тогда
					ПромежуточноеИзделиеНоменклатура = ВыборкаИзделие.Номенклатура;
					ПромежуточноеИзделиеХарактеристика = ВыборкаИзделие.Характеристика;
					ПромежуточноеИзделиеТипНоменклатуры = ВыборкаИзделие.ТипНоменклатуры;
					ПромежуточноеИзделиеУпаковка = ВыборкаИзделие.Упаковка;
					ПромежуточноеИзделиеНоменклатураПредставление = ВыборкаИзделие.НоменклатураПредставление;
					ПромежуточноеИзделиеКачество = ВыборкаИзделие.Качество;
				КонецЕсли;
			Иначе
				// Выпуск - в точке деления, обеспечение - в последователе
				Документы.ЭтапПроизводства2_2.СоздатьВТПоследователи(МенеджерВременныхТаблиц, Этап);
				ТекстЗапроса = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Обеспечение.Номенклатура                 КАК Номенклатура,
					|	Обеспечение.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
					|	Обеспечение.Номенклатура.Представление   КАК НоменклатураПредставление,
					|	Обеспечение.Характеристика               КАК Характеристика,
					|	Обеспечение.Упаковка                     КАК Упаковка,
					|	Обеспечение.Номенклатура.Качество        КАК Качество
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
					|ГДЕ
					|	Обеспечение.Ссылка В (
					|		ВЫБРАТЬ
					|			Последователи.Последователь КАК Ссылка
					|		ИЗ
					|			ВТПоследователи КАК Последователи
					|		ГДЕ
					|			Последователи.Последователь.ПартияПроизводства = &ПартияПроизводства)
					|	И ИСТИНА В (
					|		ВЫБРАТЬ ПЕРВЫЕ 1
					|			ИСТИНА
					|		ИЗ
					|			Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Выпуск
					|		ГДЕ
					|			Выпуск.Ссылка = &Этап
					|			И Выпуск.Номенклатура = Обеспечение.Номенклатура
					|			И Выпуск.Характеристика = Обеспечение.Характеристика
					|			И НЕ Выпуск.Отменено)
					|	И НЕ Обеспечение.Отменено
					|	И Обеспечение.Номенклатура.ЕдиницаИзмерения = &ИзделиеЕдиницаИзмерения
					|	И ЕСТЬNULL(&КоэффициентУпаковки, 1) = &ИзделиеКоэффициентУпаковки";
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса,
					"&КоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"Обеспечение.Упаковка",
						"Обеспечение.Номенклатура"));
				
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("Этап", Этап);
				Запрос.УстановитьПараметр("ИзделиеЕдиницаИзмерения", ИзделиеЕдиницаИзмерения);
				Запрос.УстановитьПараметр("ИзделиеКоэффициентУпаковки", ВыборкаЭтап.КоэффициентУпаковки);
				ВыборкаИзделие = Запрос.Выполнить().Выбрать();
				Если ВыборкаИзделие.Следующий() Тогда
					ПромежуточноеИзделиеНоменклатура = ВыборкаИзделие.Номенклатура;
					ПромежуточноеИзделиеХарактеристика = ВыборкаИзделие.Характеристика;
					ПромежуточноеИзделиеТипНоменклатуры = ВыборкаИзделие.ТипНоменклатуры;
					ПромежуточноеИзделиеУпаковка = ВыборкаИзделие.Упаковка;
					ПромежуточноеИзделиеНоменклатураПредставление = ВыборкаИзделие.НоменклатураПредставление;
					ПромежуточноеИзделиеКачество = ВыборкаИзделие.Качество;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет количества брак
		КоличествоУпаковокБрак = 0;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(Очередь.Брак / Очередь.Требуется) КАК Коэффициент
			|ИЗ
			|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
			|ГДЕ
			|	Очередь.Подразделение = &Подразделение
			|	И Очередь.Этап = &Этап
			|	И Очередь.Брак <> 0
			|	И Очередь.Требуется <> 0
			|ИМЕЮЩИЕ
			|	СУММА(Очередь.Брак / Очередь.Требуется) <= 1";
		Запрос.УстановитьПараметр("Этап", Этап);
		Запрос.УстановитьПараметр("Подразделение", ВыборкаЭтап.Подразделение);
		ВыборкаБрак = Запрос.Выполнить().Выбрать();
		Если ВыборкаБрак.Следующий() Тогда
			КоличествоУпаковокБрак = ВыборкаЭтап.КоличествоУпаковок * ВыборкаБрак.Коэффициент;
			Если Цел(КоличествоУпаковокБрак) <> КоличествоУпаковокБрак
				И ВыборкаЭтап.УпаковкаШтучная
				И Цел(ВыборкаЭтап.КоличествоУпаковок) = ВыборкаЭтап.КоличествоУпаковок Тогда
				КоличествоУпаковокБрак = Цел(КоличествоУпаковокБрак) + 1;
			КонецЕсли;
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("ЭтапПредставление", ЭтапПредставление);
		Результат.Вставить("Подразделение", Подразделение);
		Результат.Вставить("Упаковка", ВыборкаЭтап.Упаковка);
		Результат.Вставить("ИзделиеУпаковкаПредставление", ВыборкаЭтап.ИзделиеУпаковкаПредставление);
		Результат.Вставить("КоэффициентУпаковки", ВыборкаЭтап.КоэффициентУпаковки);
		Результат.Вставить("Произведено", Произведено);
		Результат.Вставить("СоздатьЭтап", СоздатьЭтап);
		Результат.Вставить("ЭтапСпецификации", ВыборкаЭтап.Этап);
		Результат.Вставить("ЭтапСпецификацииПредставление", ЭтапСпецификацииПредставление);
		Результат.Вставить("ЭтапСпецификацииПодразделение", ВыборкаЭтап.ЭтапПодразделение);
		Результат.Вставить("СНачалаПартии", СНачалаПартии);
		Результат.Вставить("СНачалаЭтапа", СНачалаЭтапа);
		Результат.Вставить("ПромежуточноеИзделиеНоменклатура", ПромежуточноеИзделиеНоменклатура);
		Результат.Вставить("ПромежуточноеИзделиеХарактеристика", ПромежуточноеИзделиеХарактеристика);
		Результат.Вставить("ПромежуточноеИзделиеТипНоменклатуры", ПромежуточноеИзделиеТипНоменклатуры);
		Результат.Вставить("ПромежуточноеИзделиеУпаковка", ПромежуточноеИзделиеУпаковка);
		Результат.Вставить("ПромежуточноеИзделиеНоменклатураПредставление", ПромежуточноеИзделиеНоменклатураПредставление);
		Результат.Вставить("ПромежуточноеИзделиеКачество", ПромежуточноеИзделиеКачество);
		Результат.Вставить("ПроизведеноВПредшественниках", ПроизведеноВПредшественниках);
		Результат.Вставить("КоличествоУпаковокБрак", КоличествоУпаковокБрак);
		Результат.Вставить("ВыпускИзделий", ВыпускИзделий);
		Результат.Вставить("ЭтоПоследнийЭтапИОперация", ЭтоПоследнийЭтапИОперация);
		Результат.Вставить("ВЭтапеЗаполненыДолиСтоимости", ВыборкаЭтап.ВЭтапеЗаполненыДолиСтоимости);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоДаннымЭтапа(ДанныеЭтапа)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЭтапа,
		"ЭтапПредставление,
		|ЭтапСпецификации,
		|ЭтапСпецификацииПредставление,
		|ЭтапСпецификацииПодразделение,
		|Произведено,
		|ПроизведеноВПредшественниках,
		|ИзделиеУпаковкаПредставление,
		|ПромежуточноеИзделиеТипНоменклатуры,
		|ПромежуточноеИзделиеНоменклатураПредставление,
		|ПромежуточноеИзделиеКачество,
		|КоэффициентУпаковки");
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЭтапа,
		"Подразделение,
		|СоздатьЭтап,
		|Упаковка,
		|СНачалаПартии,
		|СНачалаЭтапа,
		|ПромежуточноеИзделиеНоменклатура,
		|ПромежуточноеИзделиеХарактеристика,
		|ПромежуточноеИзделиеУпаковка,
		|ЭтоПоследнийЭтапИОперация,
		|ВЭтапеЗаполненыДолиСтоимости");
	
	Объект.КоличествоУпаковок = ?(ДанныеЭтапа.КоэффициентУпаковки <> 0,
		Объект.Количество/ДанныеЭтапа.КоэффициентУпаковки, 0);
	
	Если ТипЗнч(ДанныеЭтапа.ВыпускИзделий) = Тип("ТаблицаЗначений")
		И ДанныеЭтапа.ВыпускИзделий.Количество() > 0 Тогда
		ВыпускИзделий.Загрузить(ДанныеЭтапа.ВыпускИзделий);
	Иначе
		ВыпускИзделий.Очистить();
	КонецЕсли;
	
	Для каждого Строка Из Объект.Партии Цикл
		Строка.Произведено = Произведено;
		Строка.Подразделение = Объект.Подразделение;
		
		Если Строка.ПродолжитьСпецификация = Объект.Спецификация Тогда
			Строка.ПродолжитьЭтап = ЭтапСпецификации;
			Строка.ПродолжитьЭтапПредставление = ЭтапСпецификацииПредставление;
			Строка.ПродолжитьЭтапПодразделение = ЭтапСпецификацииПодразделение;
			Строка.ПродолжитьОперация = Объект.Операция;
			Строка.ПродолжитьИдентификаторОперации = Объект.ИдентификаторОперации;
			Строка.АдресПроизводственныйПроцесс = АдресПроизводственныйПроцесс;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Объект.Серии Цикл
		Строка.Произведено = Произведено;
		Строка.Подразделение = Объект.Подразделение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияПартии()
	
	ЗаполнитьСписокВыбораНаправлениеВыпускаФорма();
	
	ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(Элементы.Партии.ТекущаяСтрока);
	ОграничениеТипа = ОграничениеТипаПолучателя(ТекущиеДанные);
	Элементы.Получатель.ОграничениеТипа = ОграничениеТипа;
	Элементы.ПартииПолучатель.ОграничениеТипа = ОграничениеТипа;
	
	// Кеширование
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(
		Элементы.Партии,
		ЭтотОбъект);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элементы.Партии,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПартию(ИндексПартии)
	
	НоваяСтрока = Объект.Партии.Добавить();
	НоваяСтрока.ИндексПартии = ИндексПартии;
	НоваяСтрока.Произведено = Произведено;
	НоваяСтрока.ДатаПроизводства = ТекущаяДатаСеанса();
	НоваяСтрока.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	НоваяСтрока.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	НоваяСтрока.НаправлениеВыпускаФорма = НаправлениеПродолжитьОбработку();
	НоваяСтрока.ПродолжитьОбработку = Истина;
	НоваяСтрока.ПродолжитьСпецификация = Объект.Спецификация;
	НоваяСтрока.ПродолжитьЭтап = ЭтапСпецификации;
	НоваяСтрока.ПродолжитьЭтапПредставление = ЭтапСпецификацииПредставление;
	НоваяСтрока.ПродолжитьЭтапПодразделение = ЭтапСпецификацииПодразделение;
	НоваяСтрока.ПродолжитьОперация = Объект.Операция;
	НоваяСтрока.ПродолжитьИдентификаторОперации = Объект.ИдентификаторОперации;
	НоваяСтрока.АдресПроизводственныйПроцесс = АдресПроизводственныйПроцесс;
	НоваяСтрока.УпаковкаПартии = Объект.Упаковка;
	НоваяСтрока.НоменклатураПартии = Объект.ОсновноеИзделиеНоменклатура;
	НоваяСтрока.Подразделение = Объект.Подразделение;
	НоваяСтрока.НазначенияПредставление = НСтр("ru = 'Указать назначения';
												|en = 'Specify assignments'");
	НоваяСтрока.ПродолжитьНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
	НоваяСтрока.ПродолжитьХарактеристика = Объект.ОсновноеИзделиеХарактеристика;
	
	СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
		ИспользоватьНесколькоСкладов, 
		СкладПоУмолчанию, 
		НоваяСтрока,
		"Получатель");
	
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(
		ЭтотОбъект,
		НоваяСтрока,
		"Объект.Партии");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеПартии(КодПартии, НомерРаспоряжения)
	
	Возврат СокрЛП(ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерРаспоряжения))
			+ "."
			+ Формат(КодПартии, "ЧГ=0");
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьКоличествоЕдиницПартии(Номенклатура, Упаковка, КоличествоУпаковок)
	
	ДанныеУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(
		Упаковка,
		Номенклатура);
	
	Результат = КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
		
	Если ДанныеУпаковки.НужноОкруглятьКоличество Тогда
		Результат = Окр(Результат, 0 ,РежимОкругления.Окр15как20);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьАвторасчетКоличества(ТекущиеДанные, СписокРеквизитов, КэшированныеЗначения = Неопределено)
	
	СписокРеквизитов = СписокРеквизитов + ", АвторасчетКоличества";
	
	Если Объект.Действие <> Действия().Брак
			Или ТекущиеДанные.АвтовыборНоменклатурыЭтоРабота Тогда
		ТекущиеДанные.АвторасчетКоличества = Ложь;
		Возврат;
	ИначеЕсли ТекущиеДанные.Номенклатура.Пустая() Тогда
		ТекущиеДанные.АвторасчетКоличества = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АвторасчетКоличества = Ложь;
	
	Если Объект.Упаковка.Пустая() Тогда
		Если ИзделиеЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения Тогда
			ТекущиеДанные.АвторасчетКоличества = Истина;
			ТекущиеДанные.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.АвтовыборНоменклатуры Тогда
		ТекущиеДанные.АвторасчетКоличества = Истина;
	Иначе
		// Поиск идентичной упаковки
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	УпаковкаНоменклатуры.Ссылка КАК Упаковка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкаИзделия
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкаНоменклатуры
			|	ПО &ТекстЗапросаКоэффициентУпаковки1 = &ТекстЗапросаКоэффициентУпаковки2
			|		И УпаковкаИзделия.ЕдиницаИзмерения = УпаковкаНоменклатуры.ЕдиницаИзмерения
			|		И УпаковкаИзделия.СкладскаяГруппа = УпаковкаНоменклатуры.СкладскаяГруппа
			|ГДЕ
			|	УпаковкаИзделия.Ссылка = &Ссылка
			|	И УпаковкаНоменклатуры.Владелец = 
			|		ВЫБОР
			|			КОГДА ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
			|				ТОГДА &Номенклатура
			|			ИНАЧЕ ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НаборУпаковок
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	УпаковкаНоменклатуры.Наименование,
			|	УпаковкаНоменклатуры.Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкаИзделия", Неопределено));
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкаНоменклатуры", Неопределено));
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Объект.Упаковка);
		Запрос.УстановитьПараметр("Номенклатура", ТекущиеДанные.Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущиеДанные.АвторасчетКоличества = Истина;
			ТекущиеДанные.Упаковка = Выборка.Упаковка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.АвторасчетКоличества Тогда
		ТекущиеДанные.КоличествоУпаковок = ?(ТекущиеДанные.НомерСтроки = 1,
			Объект.КоличествоУпаковокБрак,
			Объект.КоличествоУпаковок - Объект.КоличествоУпаковокБрак);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрДействияЗаполнитьНазначение(ТекущиеДанные)
	
	Возврат ?(ТекущиеДанные.ПродолжитьОбработку Или ТекущиеДанные.СписатьНаРасходы,
		Справочники.Назначения.ПустаяСсылка(),
		НазначениеДавальческогоВыпуска);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноОтменитьИзделиеВЗаказе(Форма, ТекущиеДанные)
	
	Объект = Форма.Объект; // ОбработкаОбъект.ДелениеПартииПроизводства
	Действия = Действия();
	
	Результат = Ложь;
	
	Если Форма.ЭтоИзделиеЗаказа Тогда
		// Отмена
		Если Объект.Действие = Действия.Брак И ТекущиеДанные.НомерСтроки = 1
			Или Объект.Действие = Действия.Отменить Тогда
			Результат = Истина;
		// Сокращение
		ИначеЕсли Объект.Действие = Действия.Сократить
			И ТекущиеДанные.КоличествоПартии < Объект.Количество Тогда
			Результат = Истина;
		// Деление с отменой
		ИначеЕсли Объект.Действие = Действия.Разделить
			И Не Объект.СНачалаПартии
			И Не ТекущиеДанные.ПродолжитьОбработку Тогда
			Результат = Истина;
		// Изменение изделия
		ИначеЕсли (Объект.Действие = Действия.Разделить И Не Объект.СНачалаПартии
				Или Объект.Действие = Действия.Брак И ТекущиеДанные.НомерСтроки = 2
				Или Объект.Действие = Действия.Продолжить)
			И ТекущиеДанные.ПродолжитьОбработку
			И ТекущиеДанные.ИзменитьВыпускаемоеИзделие Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
