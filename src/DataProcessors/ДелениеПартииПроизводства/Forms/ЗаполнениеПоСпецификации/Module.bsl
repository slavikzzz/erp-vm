
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Партия
	Если ТипЗнч(Параметры.ПартияПроизводства) = Тип("УникальныйИдентификатор") Тогда
		Объект.ПартияПроизводства = Справочники.ПартииПроизводства.ПолучитьСсылку(Параметры.ПартияПроизводства);
	Иначе
		Объект.ПартияПроизводства = Параметры.ПартияПроизводства;
	КонецЕсли;
	
	// Данные партии
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПартияПроизводства,
		"Документ.Номер, Код, Спецификация");
	Объект.Спецификация = ЗначенияРеквизитов.Спецификация;
	
	НомерПартии = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(
		ЗначенияРеквизитов.ДокументНомер);
	ПредставлениеПартии = СтрШаблон("%1.%2",
		СокрЛП(НомерПартии),
		Формат(ЗначенияРеквизитов.Код, "ЧГ=0"));
	Заголовок = СтрШаблон(НСтр("ru = 'Заполнение партии %1';
								|en = 'Fill the %1 lot'"), ПредставлениеПартии);
	
	// Этап
	Если Параметры.Этап.Пустая() Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Этапы.Ссылка КАК Этап
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|	ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	Этапы.ПартияПроизводства = &ПартияПроизводства
			|	И Этапы.Проведен
			|	И Этапы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, -Этапы.ДлительностьДоВыпуска)");
		Запрос.УстановитьПараметр("ПартияПроизводства", Объект.ПартияПроизводства);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Этап = Выборка.Этап;
		КонецЕсли;
	Иначе
		Объект.Этап = Параметры.Этап;
	КонецЕсли;
	
	// Данные этапа
	Если Не Объект.Этап.Пустая() Тогда
		ЗначенияЗаполнения = ЗначенияЗаполненияПоДаннымЭтапа(Объект.Этап);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияЗаполнения, "ЭтапПредставление, ЭтапСпецификации");
	КонецЕсли;
	Если ЭтапСпецификации.Пустая() Тогда
		Элементы.ЭтапСпецификации.Видимость = Истина;
	КонецЕсли;
	
	// Чтение пользовательских настроек
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Обработка.ДелениеПартииПроизводства",
		"ЗаполнениеПоСпецификации");
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначениеНастроек);
	КонецЕсли;
	
	// Настройка элементов
	Элементы.ЗаменятьМатериалыНаАналоги.Доступность = РезервироватьМатериалы;
	Элементы.ГруппаАналоги.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьАналогиМатериалов");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	Если Объект.Этап.Пустая() Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Документ';
										|en = 'Document'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ЭтапПредставление", Отказ);
	КонецЕсли;
	
	Если ЭтапСпецификации.Пустая() Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Этап';
										|en = 'Stage'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "ЭтапСпецификации", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭтапПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.Этап.Пустая() Тогда
		ПоказатьЗначение(, Объект.Этап);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресПроизводственныйПроцессПартии = ПроизводственныйПроцессПартииВХранилище(
		Объект.ПартияПроизводства, УникальныйИдентификатор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресВХранилище", АдресПроизводственныйПроцессПартии);
	СтруктураПараметров.Вставить("ТекущаяСсылка", Объект.Этап);
	
	ДополнительныеРеквизиты = Новый Массив;
	
	Реквизит = Новый Структура;
	Реквизит.Вставить("Имя", "НомерДокумента");
	Реквизит.Вставить("Заголовок", НСтр("ru = 'Номер';
										|en = 'Number'"));
	Реквизит.Вставить("Тип", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
	ДополнительныеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый Структура;
	Реквизит.Вставить("Имя", "Статус");
	Реквизит.Вставить("Заголовок", НСтр("ru = 'Статус';
										|en = 'Status'"));
	Реквизит.Вставить("Тип", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
	ДополнительныеРеквизиты.Добавить(Реквизит);
	
	СтруктураПараметров.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВыбораЭлементаПроизводственногоПроцесса",
		СтруктураПараметров,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЭтапПредставлениеВыбор", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПредставлениеВыбор(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.Этап = РезультатЗакрытия.Этап;
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПоДаннымЭтапа(Объект.Этап);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияЗаполнения, "ЭтапПредставление, ЭтапСпецификации");
		
		Если ЭтапСпецификации.Пустая() Тогда
			Элементы.ЭтапСпецификации.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьМатериалыПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
	Если Не РезервироватьМатериалы Тогда
		ЗаменятьМатериалыНаАналоги = Ложь;
	КонецЕсли;
	
	Элементы.ЗаменятьМатериалыНаАналоги.Доступность = РезервироватьМатериалы;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменятьМатериалыНаАналогиПриИзменении(Элемент)
	
	СохранитьНастройки = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатВыполнения

&НаКлиенте
Процедура РезультатВыполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РезультатВыполнения.ТекущиеДанные;
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	Если ДействиеВыполнено Тогда
		Закрыть();
	Иначе
		ОчиститьСообщения();
		
		НачатьОжидание = ВыполнитьДействиеВФоне();
		
		Если НачатьОжидание Тогда
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Новый ОписаниеОповещения("ВыполнитьДействиеВФонеЗавершение", ЭтотОбъект),
				ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		ИначеЕсли ДействиеВыполнено Тогда
			Оповестить("ИзменениеПоследовательностиЭтапов", Объект.ПартияПроизводства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ОбработатьВыполнениеДействияВФоне(Результат);
		
		Если ДействиеВыполнено Тогда
			Оповестить("ИзменениеПоследовательностиЭтапов", Объект.ПартияПроизводства);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЗначенияЗаполненияПоДаннымЭтапа(Этап)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Номер             КАК Номер,
		|	Документ.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(Документ.Этап.ПометкаУдаления, ЛОЖЬ)
		|			ТОГДА Документ.Этап
		|		ИНАЧЕ ЕСТЬNULL(ЭтапыПроизводства.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка))
		|	КОНЕЦ                      КАК ЭтапСпецификации
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|	ПО Документ.Спецификация = ЭтапыПроизводства.Владелец
		|		И Документ.Этап.Наименование = ЭтапыПроизводства.Наименование
		|		И НЕ ЭтапыПроизводства.ПометкаУдаления
		|ГДЕ
		|	Документ.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Этап);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапПредставление", "");
	Результат.Вставить("ЭтапСпецификации", Справочники.ЭтапыПроизводства.ПустаяСсылка());
	
	Если Выборка.Следующий() Тогда
		Результат.ЭтапПредставление = СтрШаблон("%1 (%2)", Выборка.НаименованиеЭтапа, Выборка.Номер);
		
		Если Выборка.Количество() = 1 Тогда
			Результат.ЭтапСпецификации = Выборка.ЭтапСпецификации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроизводственныйПроцессПартииВХранилище(ПартияПроизводства, УникальныйИдентификатор)
	
	Дерево = Обработки.ДелениеПартииПроизводства.ДеревоПроизводственногоПроцесса(ПартияПроизводства, Ложь);
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ВыполнитьДействиеВФоне()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатВыполнения.Очистить();
	
	// Сохранение настроек
	Если СохранитьНастройки Тогда
		СохранитьНастройки = Ложь;
		
		ЗначениеНастроек = Новый Структура;
		ЗначениеНастроек.Вставить("РезервироватьМатериалы", РезервироватьМатериалы);
		ЗначениеНастроек.Вставить("ЗаменятьМатериалыНаАналоги", ЗаменятьМатериалыНаАналоги);
	
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"Обработка.ДелениеПартииПроизводства",
			"ЗаполнениеПоСпецификации",
			ЗначениеНастроек);
	КонецЕсли;
	
	// Запуск обработки
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Действие", Обработки.ДелениеПартииПроизводства.Действия().Заполнить);
	ПараметрыПроцедуры.Вставить("ПартияПроизводства", Объект.ПартияПроизводства);
	ПараметрыПроцедуры.Вставить("Этап", Объект.Этап);
	ПараметрыПроцедуры.Вставить("ЭтапСпецификации", ЭтапСпецификации);
	ПараметрыПроцедуры.Вставить("РезервироватьМатериалы", РезервироватьМатериалы);
	ПараметрыПроцедуры.Вставить("ЗаменятьМатериалыНаАналоги", ЗаменятьМатериалыНаАналоги);
	ПараметрыПроцедуры.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение партии производства по спецификации';
															|en = 'Fill a production lot based on a bill of materials'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ДелениеПартииПроизводства.ВыполнитьДействиеВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		НачатьОжидание = Истина;
	Иначе
		ОбработатьВыполнениеДействияВФоне(ДлительнаяОперация);
		
		НачатьОжидание = Ложь;
		ДлительнаяОперация = Неопределено;
	КонецЕсли;
	
	Возврат НачатьОжидание;
	
КонецФункции

&НаСервере
Процедура ОбработатьВыполнениеДействияВФоне(Результат)
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(РезультатСтруктура) = Тип("Структура") Тогда
			Для каждого Сообщение Из РезультатСтруктура.Сообщения Цикл
				ОбщегоНазначения.СообщитьПользователю(Сообщение);
			КонецЦикла;
			
			Если Не РезультатСтруктура.Отказ Тогда
				ДействиеВыполнено = Истина;
				
				ВсеЭтапы = Новый Массив;
				Если РезультатСтруктура.Свойство("ЭтапИзменен") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеЭтапы, РезультатСтруктура.ЭтапИзменен);
				КонецЕсли;
				Если РезультатСтруктура.Свойство("ЭтапУдален") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеЭтапы, РезультатСтруктура.ЭтапУдален);
				КонецЕсли;
				Если РезультатСтруктура.Свойство("ЭтапСоздан") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеЭтапы, РезультатСтруктура.ЭтапСоздан);
				КонецЕсли;
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеЭтапы, "Номер,НаименованиеЭтапа");
				
				Если РезультатСтруктура.Свойство("ЭтапИзменен") Тогда
					Для каждого Ссылка Из РезультатСтруктура.ЭтапИзменен Цикл
						НоваяСтрока = РезультатВыполнения.Добавить();
						НоваяСтрока.Ссылка = Ссылка;
						НоваяСтрока.СсылкаПредставление = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(Реквизиты[Ссылка]);
						НоваяСтрока.Действие = НСтр("ru = 'Изменен';
													|en = 'Changed'");
					КонецЦикла;
				КонецЕсли;
				
				Если РезультатСтруктура.Свойство("ЭтапУдален") Тогда
					Для каждого Ссылка Из РезультатСтруктура.ЭтапУдален Цикл
						НоваяСтрока = РезультатВыполнения.Добавить();
						НоваяСтрока.Ссылка = Ссылка;
						НоваяСтрока.СсылкаПредставление = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(Реквизиты[Ссылка]);
						НоваяСтрока.Действие = НСтр("ru = 'Удален';
													|en = 'Deleted'");
					КонецЦикла;
				КонецЕсли;
				
				Если РезультатСтруктура.Свойство("ЭтапСоздан") Тогда
					Для каждого Ссылка Из РезультатСтруктура.ЭтапСоздан Цикл
						НоваяСтрока = РезультатВыполнения.Добавить();
						НоваяСтрока.Ссылка = Ссылка;
						НоваяСтрока.СсылкаПредставление = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(Реквизиты[Ссылка]);
						НоваяСтрока.Действие = НСтр("ru = 'Создан';
													|en = 'Created'");
					КонецЦикла;
				КонецЕсли;
				
				Если РезультатСтруктура.Свойство("КорректировкаСоздана") Тогда
					Для каждого Ссылка Из РезультатСтруктура.КорректировкаСоздана Цикл
						НоваяСтрока = РезультатВыполнения.Добавить();
						НоваяСтрока.Ссылка = Ссылка;
						НоваяСтрока.СсылкаПредставление = Строка(Ссылка);
						НоваяСтрока.Действие = НСтр("ru = 'Создан';
													|en = 'Created'");
					КонецЦикла;
				КонецЕсли;
				
				Элементы.ВыполнитьДействие.Заголовок = НСтр("ru = 'Закрыть';
															|en = 'Close'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
