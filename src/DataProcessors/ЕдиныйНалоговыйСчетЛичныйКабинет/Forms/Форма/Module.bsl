#Если НЕ МобильноеПриложениеСервер И НЕ МобильноеПриложениеКлиент Тогда

#Область ОписаниеПеременных

&НаСервере
Перем КонтекстЭДОСервер;

&НаКлиенте
Перем ШагПрогрессора;

&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем МенеджерКриптографии Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Период = ТекущаяДатаНаСервере();
	
	ИнтервалИсполненияМетодов = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ИнтервалИсполненияМетодов();
	
	МестоХраненияКлюча = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ОпределитьМестоХраненияКлюча();
	
	ТекущаяОрганизация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ГоловнаяОрганизация(Параметры.Организация);
	
	// Определяем организацию по-умолчанию
	Если НЕ ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ТекущаяОрганизация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ОсновнаяОрганизация();
	Иначе
		Объект.Организация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ГоловнаяОрганизация(ТекущаяОрганизация);
	КонецЕсли;
	
	// ЛК предоставляет данные только в целом по головной организации
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		Объект.Организация = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ГоловнаяОрганизация(ТекущаяОрганизация);
		СохранитьПервичнуюНастройкуПодключения();
		ПроверитьДоступностьСервиса(Объект.Организация);
	КонецЕсли;
	
	ТребуетсяОбновлениеДанныхФормы = Истина;
	ОбновлениеДанныхДоступно       = Истина;
	
	ИмяПодсистемы = "РегламентированнаяОтчетность";
	ВерсияПодсистемы = ОбновлениеИнформационнойБазы.ВерсияИБ(ИмяПодсистемы);
	
	ОписаниеПрограммы = Новый Структура;
	ОписаниеПрограммы.Вставить("Имя",              Метаданные.Имя);
	ОписаниеПрограммы.Вставить("Синоним",          Метаданные.Синоним);
	ОписаниеПрограммы.Вставить("Версия",           Метаданные.Версия);
	ОписаниеПрограммы.Вставить("ВерсияПодсистемы", ВерсияПодсистемы);
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		
		МодульОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтотОбъект,
			"Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет",
			"Форма",
			,
			НСтр("ru = 'Новости: Личный кабинет ЕНС';
				|en = 'Новости: Личный кабинет ЕНС'"),
			Ложь,
			Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
			ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
	Если Не ПоказатьСтраницуСРекламойСогласия Тогда
		СобратьВсеДанныеЕдиногоНалоговогоСчета();
		УчетнаяЗаписьОрганизации();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЕдиныйНалоговыйСчетЛичныйКабинет_ОбновленыДанные"
		И Параметр = Объект.Организация И Источник = УникальныйИдентификатор Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияОтветаНаВопросОбОбновленииФормы", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Получены новые данные личного кабинета ЕНС.
			|Обновить данные формы?';
			|en = 'Получены новые данные личного кабинета ЕНС.
			|Обновить данные формы?'"), РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ИмяСобытия = "Завершение отправки в контролирующий орган" 
		И ТипЗнч(Параметр) = Тип("Структура")
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Организация") = Объект.Организация 
		И Параметр.Свойство("Ссылка")
		И ТипЗнч(Параметр.Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		Или (ИмяСобытия = "Неудачная отправка" Или ИмяСобытия = "Успешная отправка")
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ВыполняемоеОповещение")
		И ТипЗнч(Параметр.ВыполняемоеОповещение) = Тип("Структура")
		И Параметр.ВыполняемоеОповещение.Свойство("ДополнительныеПараметры")
		И ТипЗнч(Параметр.ВыполняемоеОповещение.ДополнительныеПараметры) = Тип("Структура")
		И Параметр.ВыполняемоеОповещение.ДополнительныеПараметры.Свойство("ОрганизацияОтчета")
		И Параметр.ВыполняемоеОповещение.ДополнительныеПараметры.ОрганизацияОтчета = Объект.Организация 
		И Параметр.ВыполняемоеОповещение.ДополнительныеПараметры.Свойство("СсылкаНаОтчет")
		И ТипЗнч(Параметр.ВыполняемоеОповещение.ДополнительныеПараметры.СсылкаНаОтчет) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ЕстьСогласиеНаПолучениеДанныхЕНС = СогласиеЕНСОтправлено(Объект.Организация);
		Если ЕстьСогласиеНаПолучениеДанныхЕНС Тогда
			Если РежимРегистрации Тогда
				ЗарегистрироватьсяВСервисеЕНС();
			Иначе
				Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаБыстраяЗагрузкаВключена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибкаНеУдалосьОтправитьСогласие;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	Если Не ПоказатьСтраницуСРекламойСогласия Тогда
		ПереключитьСтраницыПередПолучениемДанных();
		СобратьВсеДанныеЕдиногоНалоговогоСчета();
		УчетнаяЗаписьОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформацияДанныеОтсутствуютОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформацияНеподключеннаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "УстановитьМенеджерКриптографии" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
				КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ОтсуствиеКриптопровайдеров"
				,,,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗаявкаНаПодключение1СОтчетности" Тогда
		СтандартнаяОбработка = Ложь;
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Объект.Организация);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИнтернетПоддержкаИСервисы" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыВыполненияКоманды = Новый Структура;
		ПараметрыВыполненияКоманды.Вставить("Окно", Неопределено);
		ПараметрыВыполненияКоманды.Вставить("Источник", ЭтотОбъект);
		НастройкиПрограммыБИПКлиент.ОткрытьНастройкиИнтернетПоддержкаИСервисы(ПараметрыВыполненияКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДекорацияНесогласиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИспользоватьБТС Тогда
		СообщитьОНекорректныхДанныхЧерезБТС();
	ИначеЕсли ИспользоватьБИП И ПроверитьЗаполнение() Тогда
		СообщитьОНекорректныхДанныхЧерезБИП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДекорацияДанныеНеконсистентныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСверкиПриИзменении(Элемент)
	
	РежимСверкиОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнформацияОшибкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ДатаНачала",               Объект.Период);
	ПараметрыЖурнала.Вставить("ДатаОкончания",            ТекущаяДата());
	ПараметрыЖурнала.Вставить("СобытиеЖурналаРегистрации",ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.СобытиеЖурналаРегистрации());
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСообщитьОбОшибкеНажатие(Элемент)
	Если ИспользоватьБТС Тогда
		СообщитьОбОшибкеЧерезБТС();
		СообщениеОбОшибкеОтправлено = Истина;
	ИначеЕсли ИспользоватьБИП И ПроверитьЗаполнение() Тогда
		СообщитьОбОшибкеЧерезБИП();
		СообщениеОбОшибкеОтправлено = Истина;
	КонецЕсли;
	Если СообщениеОбОшибкеОтправлено Тогда
		УправлениеФормой();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокОшибокНажатие(Элемент)
	ИнформационныйЦентрКлиент.ОткрытьОбращенияВСлужбуПоддержки();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРекламаАвторизацииПоСогласиюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СогласиеНаРаскрытиеНалоговойТайны" Тогда
		СоздатьСогласиеНаРаскрытиеНалоговойТайны();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПреимуществаБыстройЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "СогласиеНаРаскрытиеНалоговойТайны" Тогда
		СоздатьСогласиеНаРаскрытиеНалоговойТайны();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекстРекомендацииОшибкиПоКЭПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "СогласиеНаРаскрытиеНалоговойТайны" Тогда
		СоздатьСогласиеНаРаскрытиеНалоговойТайны();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПослеРегистрации(Команда)
	
	РежимРегистрации = Ложь;
	ПоказатьРегистрацияПрошлаУспешно = Ложь;
	ОбновитьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ОткрытьНастройкиИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПополнитьКошелек(Команда)
	
	Если ПоддерживаетсяВводПлатежныхДокументов Тогда
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиентПереопределяемый.СоздатьПлатежныйДокумент(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеЗаявленияИЗапросы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Сверки"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
		ПараметрыФормы,
		ЭтотОбъект,
		"1С-Отчетность");
	
	Оповестить("Открытие формы 1С-Отчетность", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеУведомления(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
		ПараметрыФормы,
		ЭтотОбъект,
		"1С-Отчетность");
	
	Оповестить("Открытие формы 1С-Отчетность", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаДоступностьСервисаЗакрытьБаннерНажатие(Элемент)
	
	ЗапланированаНедоступностьСервисаБаннерПогашен = Истина;
	Элементы.БаннерДоступностьСервиса.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаОтмену(Команда)
	
	СоздатьУведомлениеОСпецрежимахНалогообложения("ОтменаЗачетаНалога");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОСальдоЕНС(Команда)
	СоздатьЗапросИОН("СправкаОНаличииСальдо");
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОбИсполненииОбязанностей(Команда)
	СоздатьЗапросИОН("ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСправкуОПринадлежностиСуммЕНП(Команда)
	СоздатьЗапросИОН("СправкаОПринадлежностиСумм");
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУведомлениеОбИсчисленныхСУммах(Команда)
	СоздатьУведомлениеОСпецрежимахНалогообложения("ИсчисленныеСуммыНалогов");
КонецПроцедуры

&НаКлиенте
Процедура ЗапросАктаСверки(Команда)
	СоздатьЗапросИОН("ПредставлениеАктовСверкиРасчетов");
КонецПроцедуры

&НаКлиенте
Процедура КнВсеОбязательства(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ВсеОбязательства");
КонецПроцедуры

&НаКлиенте
Процедура КнЗадолженность(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Задолженность");
КонецПроцедуры

&НаКлиенте
Процедура КнПредстоящиеПлатежи(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ПредстоящиеПлатежи");
КонецПроцедуры

&НаКлиенте
Процедура КнЗарезервировано(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Зарезервировано");
КонецПроцедуры

&НаКлиенте
Процедура КнОперацииЕНП(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ОперацииЕНП");
КонецПроцедуры

&НаКлиенте
Процедура КнИсторияЕНС(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ИсторияЕНС");
КонецПроцедуры

&НаКлиенте
Процедура КнПроцедурыВзыскания(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ПроцедурыВзыскания");
КонецПроцедуры

&НаКлиенте
Процедура КнПлатежи(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Платежи");
КонецПроцедуры

&НаКлиенте
Процедура КнОтчеты(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Отчеты");
КонецПроцедуры

&НаКлиенте
Процедура КнНачисления(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("Начисления");
КонецПроцедуры

&НаКлиенте
Процедура КнПениШтрафы(Команда)
	УправлениеПометкойКоманды(Команда.Имя);
	ПереключитьОтображениеПоказателей("ПениШтрафы");
КонецПроцедуры

&НаКлиенте
Процедура РаспорядитьсяСальдо(Команда)
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ЗаявлениеОВозвратеНалога", НСтр("ru = 'Заявление о распоряжении путем возврата';
															|en = 'Заявление о распоряжении путем возврата'"));
	СписокКоманд.Добавить("ЗаявлениеОЗачетеНалога", НСтр("ru = 'Заявление о распоряжении путем зачета в счет предстоящей обязанности';
														|en = 'Заявление о распоряжении путем зачета в счет предстоящей обязанности'"));
	
	Обработчик = Новый ОписаниеОповещения("РаспорядитьсяСальдоЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Обработчик, СписокКоманд, Элементы.РаспорядитьсяСальдо);
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировать(Команда)
	
	Коллекция = ТекущийЭлемент;
	Колонка   = Коллекция.ТекущийЭлемент;
	
	Если СтрНайти(Команда.Имя, "Убыв") > 0 тогда
		СортироватьНаСервере(Коллекция.Имя, Колонка.Имя, "Убыв");
	Иначе
		СортироватьНаСервере(Коллекция.Имя, Колонка.Имя, "Возр");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСогласие(Команда)
	
	СоздатьСогласиеНаРаскрытиеНалоговойТайны();
	ПоказатьСтраницуСРекламойСогласия = Ложь;
	ПереключитьСтраницыПередПолучениемДанных();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	УчетнаяЗаписьОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСКЭП(Команда)
	
	СохранитьНастройкуБольшеНеПоказыватьСтраницуРекламыСогласия(Объект.Организация);
	ПоказатьСтраницуСРекламойСогласия = Ложь;
	ПереключитьСтраницыПередПолучениемДанных();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	УчетнаяЗаписьОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьПозже(Команда)
	
	ПоказатьСтраницуСРекламойСогласия = Ложь;
	ПереключитьСтраницыПередПолучениемДанных();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	УчетнаяЗаписьОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВСервисе(Команда)
	
	РежимРегистрации = Истина;
	Если БыстраяЗагрузкаДанныхЕНС И Не ЕстьСогласиеНаПолучениеДанныхЕНС Тогда
		ОтправитьСогласиеНаРаскрытиеНалоговойТайны();
	Иначе
		ЗарегистрироватьсяВСервисеЕНС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьБыстуюЗагрузку(Команда)
	
	ОтправитьСогласиеНаРаскрытиеНалоговойТайны();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаПлатежи

&НаКлиенте
Процедура ТаблицаПлатежиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПлатежи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаПлатежиВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаПлатежиДокументИсточникГиперссылка"
		И (ЗначениеЗаполнено(ТекущиеДанные.ДокументИсточникСсылка) Или ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчетеСсылка)) Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументИсточникСсылка) И Не ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчетеСсылка) Тогда
			ПоказатьЗначение(, ТекущиеДанные.ДокументИсточникСсылка);
		ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ДокументИсточникСсылка) И ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчетеСсылка) Тогда
			ПоказатьЗначение(, ТекущиеДанные.ДокументОтраженияВУчетеСсылка);
		Иначе
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(ТекущиеДанные.ДокументИсточникСсылка,
				Строка(ТипЗнч(Элементы.ТаблицаПлатежи.ТекущиеДанные.ДокументИсточникСсылка)));
			СписокВыбора.Добавить(ТекущиеДанные.ДокументОтраженияВУчетеСсылка,
				Строка(ТипЗнч(Элементы.ТаблицаПлатежи.ТекущиеДанные.ДокументОтраженияВУчетеСсылка)));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
			
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если (Поле.Имя = "ТаблицаПлатежиСумма"
		Или Поле.Имя = "ТаблицаПлатежиДокументИсточникПредставление")
		И ЗначениеЗаполнено(ТекущиеДанные.ДокументИсточникСсылка) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДокументИсточникСсылка);
	ИначеЕсли (Поле.Имя = "ТаблицаПлатежиДокументОтраженияВУчетеСумма"
		Или Поле.Имя = "ТаблицаПлатежиДокументИсточникПредставление")
		И ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчетеСсылка) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДокументОтраженияВУчетеСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПлатежиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПериодТаблицы",                 ПериодПлатежи);
	ДополнительныеПараметры.Вставить("ИмяТаблицыСИзмененнымПериодом", "ТаблицаПлатежи");
	ДополнительныеПараметры.Вставить("ПредставлениеПериода",          "ПредставлениеПериодаПлатежи");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПериода(Элемент, ПериодПлатежи, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияПлатежиПриИзменении(Элемент)
	
	ПереключениеКомандПлатежиРасхождение(ОтборРасхожденияПлатежи = ВариантОтбораТолькоРасхождения());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаОтчеты

&НаКлиенте
Процедура ТаблицаОтчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтчеты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаОтчетыВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаОтчетыДокументИсточникГиперссылка"
		И ЗначениеЗаполнено(ТекущиеДанные.ДокументРегОтчСсылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ДокументРегОтчСсылка);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОтчетыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПериодТаблицы",                 ПериодОтчеты);
	ДополнительныеПараметры.Вставить("ИмяТаблицыСИзмененнымПериодом", "ТаблицаОтчеты");
	ДополнительныеПараметры.Вставить("ПредставлениеПериода",          "ПредставлениеПериодаОтчеты");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПериода(Элемент, ПериодОтчеты, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияОтчетыПриИзменении(Элемент)
	
	ПереключениеКомандОтчетыРасхождение(ОтборРасхожденияОтчеты = ВариантОтбораТолькоРасхождения());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаНачисления

&НаКлиенте
Процедура ТаблицаНачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНачисления.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаНачисленияВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 на сумму %2';
								|en = '%1 на сумму %2'");
	Если Поле.Имя = "ТаблицаНачисленияПредставлениеОснованияФНСГиперссылка"
			Или Поле.Имя = "ТаблицаНачисленияПредставлениеОснованияУчетГиперссылка" Тогда
		СтандартнаяОбработка = Ложь;
		ЭтоДанныеФНС = (Поле.Имя = "ТаблицаНачисленияПредставлениеОснованияФНСГиперссылка");
		Если Не (ЭтоДанныеФНС Или ТекущиеДанные.НесколькоОснованийУчет) Тогда
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, ЭтоДанныеФНС",
				ТекущиеДанные.ИдентификаторСтроки, ЭтоДанныеФНС);
			НайденныеСтроки = ТаблицаОснованияНачислений.НайтиСтроки(СтруктураПоиска);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				ПоказатьЗначение(, НайденныеСтроки[0].Ссылка);
			КонецЕсли;
		Иначе
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, ЭтоДанныеФНС",
				ТекущиеДанные.ИдентификаторСтроки, ЭтоДанныеФНС);
			НайденныеСтроки = ТаблицаОснованияНачислений.НайтиСтроки(СтруктураПоиска);
			СписокВыбора = Новый СписокЗначений;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СписокВыбора.Добавить(?(ЗначениеЗаполнено(НайденнаяСтрока.Ссылка), НайденнаяСтрока.Ссылка, Неопределено),
					СтрШаблон(ШаблонПредставления, НайденнаяСтрока.Представление, Формат(НайденнаяСтрока.Сумма, "ЧДЦ=2; ЧН=0,00")));
			КонецЦикла;
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ТаблицаНачисленияПредставлениеКБКГиперссылка" Тогда
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
		НайденныеСтроки = ТаблицаКБК.Найтистроки(СтруктураПоиска);
		СписокВыбора = Новый СписокЗначений;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(Неопределено,
				СтрШаблон(ШаблонПредставления, НайденнаяСтрока.Представление, Формат(НайденнаяСтрока.Сумма, "ЧДЦ=2; ЧН=0,00")));
		КонецЦикла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
	ИначеЕсли Поле.Имя = "ТаблицаНачисленияТекстОтразитьВУчете" Тогда
		СтандартнаяОбработка = Ложь;
		Результат = ОтразитьВУчетеНачисления(ТекущиеДанные);
		ОтразитьВУчетеЗавершение(Результат, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПериодТаблицы",                 ПериодНачисления);
	ДополнительныеПараметры.Вставить("ИмяТаблицыСИзмененнымПериодом", "ТаблицаНачисления");
	ДополнительныеПараметры.Вставить("ПредставлениеПериода",          "ПредставлениеПериодаНачисления");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПериода(Элемент, ПериодНачисления, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияНачисленияПриИзменении(Элемент)
	
	ПереключениеКомандНачисленияРасхождение(ОтборРасхожденияНачисления = ВариантОтбораТолькоРасхождения());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицаПениШтрафы

&НаКлиенте
Процедура ТаблицаПениШтрафыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПениШтрафы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетЛичныйКабинетКлиентПереопределяемый.ТаблицаПениШтрафыВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 на сумму %2';
								|en = '%1 на сумму %2'");
	Если Поле.Имя = "ТаблицаПениШтрафыПредставлениеОснованияФНСГиперссылка"
			Или Поле.Имя = "ТаблицаПениШтрафыПредставлениеОснованияУчетГиперссылка" Тогда
		СтандартнаяОбработка = Ложь;
		ЭтоДанныеФНС = (Поле.Имя = "ТаблицаПениШтрафыПредставлениеОснованияФНСГиперссылка");
		Если Не (ЭтоДанныеФНС Или ТекущиеДанные.НесколькоОснованийУчет) Тогда
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, ЭтоДанныеФНС",
				ТекущиеДанные.ИдентификаторСтроки, ЭтоДанныеФНС);
			НайденныеСтроки = ТаблицаОснованияНачислений.НайтиСтроки(СтруктураПоиска);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				ПоказатьЗначение(, НайденныеСтроки[0].Ссылка);
			КонецЕсли;
		Иначе
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, ЭтоДанныеФНС",
				ТекущиеДанные.ИдентификаторСтроки, ЭтоДанныеФНС);
			НайденныеСтроки = ТаблицаОснованияНачислений.НайтиСтроки(СтруктураПоиска);
			СписокВыбора = Новый СписокЗначений;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СписокВыбора.Добавить(?(ЗначениеЗаполнено(НайденнаяСтрока.Ссылка), НайденнаяСтрока.Ссылка, Неопределено),
					СтрШаблон(ШаблонПредставления, НайденнаяСтрока.Представление, Формат(НайденнаяСтрока.Сумма, "ЧДЦ=2; ЧН=0,00")));
			КонецЦикла;
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ТаблицаПениШтрафыПредставлениеКБКГиперссылка" Тогда
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
		НайденныеСтроки = ТаблицаКБК.Найтистроки(СтруктураПоиска);
		СписокВыбора = Новый СписокЗначений;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(Неопределено,
				СтрШаблон(ШаблонПредставления, НайденнаяСтрока.Представление, Формат(НайденнаяСтрока.Сумма, "ЧДЦ=2; ЧН=0,00")));
		КонецЦикла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
	ИначеЕсли Поле.Имя = "ТаблицаПениШтрафыТекстОтразитьВУчете" Тогда
		СтандартнаяОбработка = Ложь;
		Результат = ОтразитьВУчетеПениШтрафы(ТекущиеДанные);
		ОтразитьВУчетеЗавершение(Результат, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасхожденияПениШтрафыПриИзменении(Элемент)
	
	ПереключениеКомандПениШтрафыРасхождение(ОтборРасхожденияПениШтрафы = ВариантОтбораТолькоРасхождения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПениШтрафыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПериодТаблицы",                 ПериодПениШтрафы);
	ДополнительныеПараметры.Вставить("ИмяТаблицыСИзмененнымПериодом", "ТаблицаПениШтрафы");
	ДополнительныеПараметры.Вставить("ПредставлениеПериода",          "ПредставлениеПериодаПениШтрафы");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПериода(Элемент, ПериодПениШтрафы, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОтразитьВУчетеПениШтрафы(ДанныеСтроки)
	
	Данные = НовыйДанныеОтразитьВУчете();
	ЗаполнитьДанныеОтразитьВУчетеПениШтрафы(Данные, ДанныеСтроки, Объект.Организация);
	
	Результат = НовыйРезультатОтразитьВУчете();
	Результат.ИдентификаторСтроки = ДанныеСтроки.ИдентификаторСтроки;
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиентПереопределяемый.ОтразитьВУчетеПениШтрафы(Данные, Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеОтразитьВУчетеПениШтрафы(Результат, ДанныеСтроки, Организация)
	
	Результат.Организация = Организация;
	Результат.Дата = ДанныеСтроки.Дата;
	Результат.ВидНалоговогоОбязательства = ДанныеСтроки.ВидНалоговогоОбязательства;
	Результат.Сумма = ДанныеСтроки.СуммаФНС;
	Результат.ПредставлениеОснования = ДанныеСтроки.ПредставлениеОснованияФНС;
	
КонецПроцедуры

&НаКлиенте
Функция ОтразитьВУчетеНачисления(ДанныеСтроки)
	
	Данные = НовыйДанныеОтразитьВУчете();
	ЗаполнитьДанныеОтразитьВУчетеНачисления(Данные, ДанныеСтроки, Объект.Организация);
	
	Результат = НовыйРезультатОтразитьВУчете();
	Результат.ИдентификаторСтроки = ДанныеСтроки.ИдентификаторСтроки;
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиентПереопределяемый.ОтразитьВУчетеНачисления(Данные, Результат);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеОтразитьВУчетеНачисления(Результат, ДанныеСтроки, Организация)
	
	Результат.Организация = Организация;
	Результат.Дата = ДанныеСтроки.СрокУплаты;
	Результат.ВидНалоговогоОбязательства = ДанныеСтроки.ВидНалоговогоОбязательства;
	Результат.Сумма = ДанныеСтроки.СуммаФНС;
	Результат.ПредставлениеОснования = ДанныеСтроки.ПредставлениеОснованияФНС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеОтразитьВУчете()
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Дата", '00010101');
	Результат.Вставить("ВидНалоговогоОбязательства");
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("ПредставлениеОснования", "");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НовыйРезультатОтразитьВУчете()
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Дата", '00010101');
	Результат.Вставить("Номер", "");
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("Ссылка");
	Результат.Вставить("ИдентификаторСтроки", "");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтразитьВУчетеЗавершение(Результат, ТекущиеДанные)
	
	Если Результат.Успешно Тогда
		
		НоваяСтрока = ТаблицаОснованияНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		НоваяСтрока.Представление = СтрШаблон(НСтр("ru = '%1 №%2 от %3';
													|en = '%1 №%2 от %3'"),
			Строка(ТипЗнч(Результат.Ссылка)), Результат.Номер, Формат(Результат.Дата, "ДЛФ=D"));
		
		ТекущиеДанные.ПредставлениеОснованияУчет = НоваяСтрока.Представление;
		ТекущиеДанные.СуммаУчет = Результат.Сумма;
		ТекущиеДанные.СуммаРасхождение = ТекущиеДанные.СуммаФНС - ТекущиеДанные.СуммаУчет;
		
	ИначеЕсли Не ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
		
		ПоказатьПредупреждение(, Результат.СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Единый налоговый счет';
					|en = 'Единый налоговый счет'");
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Единый налоговый счет (%1)';
																				|en = 'Единый налоговый счет (%1)'"),
			Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	
	ПараметрыОтображения = ДокументооборотСКО.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = Объект.Организация;
	ПараметрыОтображения.Группа = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма = ЭтотОбъект;
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения, 
		Перечисления.ТарифыОператораЭДО.ПромоЕНС);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДокументооборотСКОКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры 

&НаСервере
Функция ПараметрыСбораДанных()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",                   Объект.Организация);
	ПараметрыЗаполнения.Вставить("Период",                        Объект.Период);
	ПараметрыЗаполнения.Вставить("БлижайшийСрокУплаты",           БлижайшийСрокУплаты);
	ПараметрыЗаполнения.Вставить("РежимСверкиДоступен",           РежимСверкиДоступен);
	ПараметрыЗаполнения.Вставить("АдресХранилищаСерверныхДанных", АдресХранилищаСерверныхДанных);
	ПараметрыЗаполнения.Вставить("ИспользоватьСервисДанныхЕНС",   ИспользоватьСервисДанныхЕНС);
	
	Если ИзмененПериодТаблицы Тогда
		ПараметрыЗаполнения.Вставить("СтруктураДанных", СформироватьСтруктуруДанныхПриИзмененииПериода());
	Иначе
		ПараметрыЗаполнения.Вставить("СтруктураДанных", СформироватьСтруктуруДанных());
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция ВыполнитьСборДанныхНаСервере()
	
	Если ИзмененПериодТаблицы Тогда
		ОформитьДоступностьПриОбновленииСверки(Ложь);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Единый налоговый счет: сбор данных';
															|en = 'Единый налоговый счет: сбор данных'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыЗаполнения = ПараметрыСбораДанных();
	
	НаименованиеЗадания = НСтр("ru = 'Единый налоговый счет: сбор данных';
								|en = 'Единый налоговый счет: сбор данных'");
	Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПодготовитьДанные",
		ПараметрыЗаполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруДанных()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаСальдо",              ТаблицаСальдо.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаСальдоКНО",           ДанныеФормыВЗначение(ТаблицаСальдоКНО, Тип("ДеревоЗначений")));
	СтруктураДанных.Вставить("ТаблицаПредстоящиеПлатежи",  ТаблицаПредстоящиеПлатежи.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаЗарезервировано",     ТаблицаЗарезервировано.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаОперацииЕНП",         ТаблицаОперацииЕНП.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаИсторияЕНС",          ТаблицаИсторияЕНС.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаПроцедурыВзыскания",  ТаблицаПроцедурыВзыскания.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаПлатежи",             ТаблицаПлатежи.Выгрузить());
	СтруктураДанных.Вставить("ПериодПлатежи",              ПериодПлатежи);
	СтруктураДанных.Вставить("ТаблицаОтчеты",              ТаблицаОтчеты.Выгрузить());
	СтруктураДанных.Вставить("ПериодОтчеты",               ПериодОтчеты);
	СтруктураДанных.Вставить("ТаблицаНачисления",          ТаблицаНачисления.Выгрузить());
	СтруктураДанных.Вставить("ПериодНачисления",           ПериодНачисления);
	СтруктураДанных.Вставить("ТаблицаПениШтрафы",          ТаблицаПениШтрафы.Выгрузить());
	СтруктураДанных.Вставить("ПериодПениШтрафы",           ПериодПениШтрафы);
	СтруктураДанных.Вставить("ТаблицаОснованияНачислений", ТаблицаОснованияНачислений.Выгрузить());
	СтруктураДанных.Вставить("ТаблицаКБК",                 ТаблицаКБК.Выгрузить());
	СтруктураДанных.Вставить("ДанныеБлижайшегоПлатежа",    ДанныеБлижайшегоПлатежа);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруДанныхПриИзмененииПериода()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(ИмяТаблицыСИзмененнымПериодом, ЭтотОбъект[ИмяТаблицыСИзмененнымПериодом].Выгрузить());
	
	Если ИмяТаблицыСИзмененнымПериодом = "ТаблицаПлатежи" Тогда
		СтруктураДанных.Вставить("ПериодПлатежи", ПериодПлатежи);
	ИначеЕсли ИмяТаблицыСИзмененнымПериодом = "ТаблицаОтчеты" Тогда
		СтруктураДанных.Вставить("ПериодОтчеты", ПериодОтчеты);
	ИначеЕсли ИмяТаблицыСИзмененнымПериодом = "ТаблицаНачисления" Тогда
		СтруктураДанных.Вставить("ПериодНачисления",           ПериодНачисления);
		СтруктураДанных.Вставить("ТаблицаОснованияНачислений", ТаблицаОснованияНачислений.Выгрузить());
		СтруктураДанных.Вставить("ТаблицаКБК",                 ТаблицаКБК.Выгрузить());
		СтруктураДанных.Вставить("ТаблицаПредстоящиеПлатежи",  ТаблицаПредстоящиеПлатежи.Выгрузить());
	ИначеЕсли ИмяТаблицыСИзмененнымПериодом = "ТаблицаПениШтрафы" Тогда
		СтруктураДанных.Вставить("ПериодПениШтрафы",           ПериодПениШтрафы);
		СтруктураДанных.Вставить("ТаблицаОснованияНачислений", ТаблицаОснованияНачислений.Выгрузить());
		СтруктураДанных.Вставить("ТаблицаКБК",                 ТаблицаКБК.Выгрузить());
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура СобратьВсеДанныеЕдиногоНалоговогоСчета() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	Элементы.Настройки.Доступность = Ложь;
	
	АдресХранилищаСерверныхДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Интервал = ?(ЭтоВебКлиент, 1, 0.5);
	ПодключитьОбработчикОжидания("Подключаемый_СобратьДанныеЕдиногоНалоговогоСчета", Интервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СобратьДанныеЕдиногоНалоговогоСчета()
	
	СобратьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеЕдиногоНалоговогоСчета()
	
	ПараметрыЗаданияОпросаСервера = "";
	
	Результат = ВыполнитьСборДанныхНаСервере();
	
	Если Результат.Статус <> "Ошибка" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СобратьДанныеЕдиногоНалоговогоСчетаЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОписаниеОповещения, ПараметрыОжидания);
	Иначе
		// Не смогли прочитать сохраненные данные - очищаем их, данные нужно будет загрузить заново
		ОчиститьСохраненныеДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСохраненныеДанные()
	
	ЕдиныйНалоговыйСчетИнтеграция.ОчиститьДанныеПередЗагрузкой(Объект.Организация);
	
	ТребуетсяОбновлениеДанныхФормы = Ложь;
	ПереключитьСтраницыПередОбработкойДанных();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеЕдиногоНалоговогоСчетаЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		АдресХранилища = ДлительнаяОперация.АдресРезультата;
		Если ИзмененПериодТаблицы Тогда
			ЗагрузитьРезультатНаСервереПриИзмененииПериода();
			ИзмененПериодТаблицы = Ложь;
		Иначе
			ЗагрузитьРезультат();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СброситьДаные();
		
		ЗагрузитьДаные(Результат.СтруктураДанных);
		
		ПолучитьИтоговыеДанныеПоЕдиномуНалоговомуСчету();
		
		ПолучитьДатуПоследнегоОбновления();
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат()
	
	ЗагрузитьРезультатНаСервере();
	ОтрисоватьДерево();
	Если ПоказатьОповещение Тогда
		Пояснение = "";
		Если ДанныеДляЗагрузкиОтсутствуют Тогда
			Пояснение = НСтр("ru = 'Данные для загрузки отсутствуют';
							|en = 'Данные для загрузки отсутствуют'");
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обновление данных ЕНС завершено';
											|en = 'Обновление данных ЕНС завершено'"),
			"e1cib/app/Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет",
			Пояснение);
		ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных';
																						|en = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
			, СтрШаблон(НСтр("ru = 'Обновление данных ЕНС завершено. Организация: %1';
							|en = 'Обновление данных ЕНС завершено. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
		ПоказатьОповещение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатНаСервереПриИзмененииПериода()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	СтруктураДанных = Результат.СтруктураДанных;
	
	ЭтотОбъект[ИмяТаблицыСИзмененнымПериодом].Загрузить(СтруктураДанных[ИмяТаблицыСИзмененнымПериодом]);
	
	Если ИмяТаблицыСИзмененнымПериодом = "ТаблицаНачисления"
			Или ИмяТаблицыСИзмененнымПериодом = "ТаблицаПениШтрафы" Тогда
		ТаблицаОснованияНачислений.Загрузить(СтруктураДанных.ТаблицаОснованияНачислений);
		ТаблицаКБК.Загрузить(СтруктураДанных.ТаблицаКБК);
	КонецЕсли;
	
	Если ИмяТаблицыСИзмененнымПериодом = "ТаблицаНачисления" Тогда
		ЗаполнитьОтражениеВУчетеДоступноНачисления();
	ИначеЕсли ИмяТаблицыСИзмененнымПериодом = "ТаблицаПениШтрафы" Тогда
		ЗаполнитьОтражениеВУчетеДоступноПениШтрафы();
	КонецЕсли;
	
	ОформитьДоступностьПриОбновленииСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтрисоватьДерево()
	
	КоллекцияЭлементовДерева = ТаблицаСальдоКНО.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Если Строка.Развернуть Тогда
			Элементы.ТаблицаСальдоКНОЗадолженность.Развернуть(ИдентификаторСтроки);
			Элементы.ТаблицаСальдоКНО.Развернуть(ИдентификаторСтроки);
		Иначе
			Элементы.ТаблицаСальдоКНОЗадолженность.Свернуть(ИдентификаторСтроки);
			Элементы.ТаблицаСальдоКНО.Свернуть(ИдентификаторСтроки);
			ПодчиненнаяКоллекцияЭлементовДерева = Строка.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из ПодчиненнаяКоллекцияЭлементовДерева Цикл
				ИдентификаторПодчиненнойСтроки = ПодчиненнаяСтрока.ПолучитьИдентификатор();
				Элементы.ТаблицаСальдоКНОЗадолженность.Свернуть(ИдентификаторПодчиненнойСтроки);
				Элементы.ТаблицаСальдоКНО.Свернуть(ИдентификаторПодчиненнойСтроки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьДоступностьПриОбновленииСверки(ДоступностьДанных = Истина)
	
	Элементы.Организация.ТолькоПросмотр = Не ДоступностьДанных;
	Элементы.РежимСверки.ТолькоПросмотр = Не ДоступностьДанных;
	Элементы.Обновить.Доступность       = ДоступностьДанных;
	Элементы.Настройки.Доступность      = ДоступностьДанных;
	
	Элементы.КнПлатежи.Доступность    = ДоступностьДанных;
	Элементы.КнОтчеты.Доступность     = ДоступностьДанных;
	Элементы.КнНачисления.Доступность = ДоступностьДанных;
	Элементы.КнПениШтрафы.Доступность = ДоступностьДанных;
	
	Элементы.СтраницаРасшифровкаПлатежи.ТолькоПросмотр    = Не ДоступностьДанных;
	Элементы.СтраницаРасшифровкаОтчеты.ТолькоПросмотр     = Не ДоступностьДанных;
	Элементы.СтраницаРасшифровкаНачисления.ТолькоПросмотр = Не ДоступностьДанных;
	Элементы.СтраницаРасшифровкаПениШтрафы.ТолькоПросмотр = Не ДоступностьДанных;
	
	Элементы.ДекорацияОжиданиеРасшифровкаПлатежи.Видимость    = Не ДоступностьДанных;
	Элементы.ДекорацияОжиданиеРасшифровкаОтчеты.Видимость     = Не ДоступностьДанных;
	Элементы.ДекорацияОжиданиеРасшифровкаНачисления.Видимость = Не ДоступностьДанных;
	Элементы.ДекорацияОжиданиеРасшифровкаПениШтрафы.Видимость = Не ДоступностьДанных;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУчетеДоступноНачисления()
	
	Если Не ЕдиныйНалоговыйСчетЛичныйКабинет.ДоступноОтражениеВУчетеНачислений() Тогда
		Возврат;
	КонецЕсли;
	
	Данные = НовыйДанныеОтразитьВУчете();
	Для каждого СтрокаТаблицы Из ТаблицаНачисления Цикл
		ЗаполнитьДанныеОтразитьВУчетеНачисления(Данные, СтрокаТаблицы, Объект.Организация);
		СтрокаТаблицы.ОтражениеВУчетеДоступно = ЕдиныйНалоговыйСчетЛичныйКабинет.ОтражениеВУчетеДоступноСтрокаНачисления(Данные);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУчетеДоступноПениШтрафы()
	
	Если Не ЕдиныйНалоговыйСчетЛичныйКабинет.ДоступноОтражениеВУчетеПениШтрафов() Тогда
		Возврат;
	КонецЕсли;
	
	Данные = НовыйДанныеОтразитьВУчете();
	Для каждого СтрокаТаблицы Из ТаблицаПениШтрафы Цикл
		ЗаполнитьДанныеОтразитьВУчетеПениШтрафы(Данные, СтрокаТаблицы, Объект.Организация);
		СтрокаТаблицы.ОтражениеВУчетеДоступно = ЕдиныйНалоговыйСчетЛичныйКабинет.ОтражениеВУчетеДоступноСтрокаПениШтрафы(Данные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеЗакрытияНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеДокументооборотаСФНС()
	
	ПодключенДокументооборотСКонтролирующимОрганом =
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
							Объект.Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС, Истина);
							
	ПодключенДокументооборотСКонтролирующимОрганомДляПользователя =
		ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
							Объект.Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС, Истина, Истина);
							
	ЕстьДоступКЭДО = ПодключенДокументооборотСКонтролирующимОрганомДляПользователя
		И ИнтерфейсыВзаимодействияБРО.УТекущегоПользователяЕстьДоступКЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеИнтеграции()
	
	СостояниеПодключения = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьСостяниеПодключения(Объект.Организация);
	ИнтеграцияПодключена  = СостояниеПодключения.ИнтеграцияПодключена;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОрганизации()
	
	УчетнаяЗапись                             = "";
	ОтпечатокСертификата                      = "";
	ИспользуетсяДоверенностьНаПолучениеДанных = Ложь;
	НомерМашиночитаемойДоверенности           = "";
	ЛицензияПросрочена                        = Ложь;

	Если ПодключенДокументооборотСКонтролирующимОрганом И ЕстьДоступКЭДО Тогда
		УчетнаяЗаписьОтпечатокСертификата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчетнаяЗаписьОтпечатокСертификата()
	
	УчетнаяЗапись = ИнтерфейсыВзаимодействияБРОВызовСервера.УчетнаяЗаписьОрганизации(Объект.Организация,
		ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ДопустимыеОператоры());
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	Если КонтекстЭДОСервер = Неопределено Тогда 
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонецЕсли;
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СертификатПользователя = Мультирежим.СертификатПользователя(УчетнаяЗапись);
	Если СертификатПользователя <> Неопределено Тогда
		ОтпечатокСертификата = СертификатПользователя.Отпечаток;
	КонецЕсли;
	
	ЛицензияПросрочена =
		КонтекстЭДОСервер.ЛицензияПросрочена(УчетнаяЗапись);
		
	Если ЛицензияПросрочена Тогда
		СообщениеОбОшибке = НСтр("ru = 'Просрочена лицензия 1С-Отчетности';
								|en = 'Просрочена лицензия 1С-Отчетности'");
		ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаЛицензия(Объект.Организация, СообщениеОбОшибке);
		ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных';
																						|en = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
			, СтрШаблон(НСтр("ru = 'Просрочена лицензия 1С-Отчетности. Организация: %1';
							|en = 'Просрочена лицензия 1С-Отчетности. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область ВспомогательныеОбработчикиСобытий

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОшибкаРаботыСервиса                 = Ложь;
	ОбслуживаемаяОшибкаРаботыСервиса    = Ложь;
	КодОшибкиОбновлениеДанных           = "";
	ОбновлениеДанныхДоступно            = Истина;
	ДанныеДляЗагрузкиОтсутствуют        = Ложь;
	СообщениеОбОшибкеОтправлено         = Ложь;
	ТребуетсяПодтверждениеУчетнойЗаписи = Ложь;
	РежимРегистрации                    = Ложь;
	ПоказатьРегистрацияПрошлаУспешно    = Ложь;
	
	ПереключитьСтраницыПередОбработкойДанных();
	
	СохранитьПервичнуюНастройкуПодключения();
	
	ПроверитьДоступностьСервиса(Объект.Организация);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияНастройкиНаСервере()
	
	ИзмениласьДатаОбновления = ДатаПоследнегоОбновления <> 
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПолучитьДатуПоследнегоОбновления(Объект.Организация);
	ИзменилсяСпособПолучения = ИспользоватьСервисДанныхЕНС <> 
		РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьИспользоватьСервисДанныхЕНС(Объект.Организация);
	ТребуетсяПереключение = ИзмениласьДатаОбновления Или ИзменилсяСпособПолучения;
	
	Если ТребуетсяПереключение Тогда
		ТребуетсяОбновлениеДанныхФормы = Ложь;
		Если ИзменилсяСпособПолучения Тогда
			ПроверитьДоступностьСервиса(Объект.Организация);
		КонецЕсли;
		ПереключитьСтраницыПередОбработкойДанных();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеРегистрацииНаСервере()
	
	Если ЕстьСогласиеНаПолучениеДанныхЕНС И Не ИспользоватьСервисДанныхЕНС Тогда
		ИспользоватьСервисДанныхЕНС = Истина;
		РегистрыСведений.СостоянияПодключенияЕНС.УстановитьИспользоватьСервисДанныхЕНС(Объект.Организация, ИспользоватьСервисДанныхЕНС);
		ЕдиныйНалоговыйСчетИнтеграция.ОчиститьДанныеПередЗагрузкой(Объект.Организация);
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПрекратитьОбновлениеДанных()
	
	ПереключитьСтраницыПередОбработкойДанных();
	ПодготовитьФормуНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(КонтролироватьНаличиеДанных = Ложь)
	
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Объект.Организация);
	РегистрацияВНалоговомОргане = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ОсновнаяРегистрацияВНалоговомОргане(Объект.Организация);
	ИНН = ?(ЗначениеЗаполнено(Объект.Организация), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ИНН"), "");
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация,
			ОбщегоНазначения.ТекущаяДатаПользователя(),
			"ТипНП,ИННЮЛ,ИННИО,ИННФЛ,КПП,ПризнакНПЛКрупнейший,ОГРН,КодНО,КодНОКрупнейший,Наименование,НаимЮЛСокр,НаимИОПол,ФИО,ТелОрганизации");
		СведенияОбОрганизации.Вставить("ИНН", ИНН);
		Если СведенияОбОрганизации.ТипНП = 5 Тогда
			СведенияОбОрганизации.ИНН = СведенияОбОрганизации.ИННИО;
			СведенияОбОрганизации.Наименование = СведенияОбОрганизации.НаимИОПол;
		ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
			СведенияОбОрганизации.ИНН = СведенияОбОрганизации.ИННФЛ;
			СведенияОбОрганизации.Наименование = СведенияОбОрганизации.ФИО;
		Иначе
			СведенияОбОрганизации.ИНН = СведенияОбОрганизации.ИННЮЛ;
			СведенияОбОрганизации.Наименование = СведенияОбОрганизации.НаимЮЛСокр;
		КонецЕсли;
		Если СведенияОбОрганизации.ПризнакНПЛКрупнейший = Истина И Не ПустаяСтрока(СведенияОбОрганизации.КодНОКрупнейший) Тогда
			СведенияОбОрганизации.КодНО = СведенияОбОрганизации.КодНОКрупнейший;
		КонецЕсли;
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыПереопределяемый.ПоддерживаетсяВводПлатежныхДокументов(
		ПоддерживаетсяВводПлатежныхДокументов, Объект.Организация);
	
	ДанныеОтсутствуют = Истина;
	
	СостяниеПодключения = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьСостяниеПодключения(Объект.Организация);
	ТребуетсяПодтверждениеУчетнойЗаписи = Не СостяниеПодключения.ИнтеграцияПодключена;
	
	ПоддерживаетсяОбработкаДанныхПослеЗагрузки =
		ЕдиныйНалоговыйСчетЛичныйКабинет.ПоддерживаетсяОбработкаДанныхПослеЗагрузки();
	
	РазделениеВключено        = ОбщегоНазначения.РазделениеВключено();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	
	ИспользоватьБИП = ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки")
		И Не ЭтоАвтономноеРабочееМесто
		И Не РазделениеВключено;
	
	ИспользоватьРазделениеПоОбластямДанных = РаботаВМоделиСервиса.РазделениеВключено()
		И РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных();
	
	ДоступнаИнтеграцияСоСлужбойПоддержки = ИспользоватьРазделениеПоОбластямДанных
		И ИнформационныйЦентрСервер.УстановленаИнтеграцияСоСлужбойПоддержки();
	
	ИспользоватьБТС = ДоступнаИнтеграцияСоСлужбойПоддержки;
	
	ИспользоватьСервисДанныхЕНС = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьИспользоватьСервисДанныхЕНС(Объект.Организация);
	УстановитьМетодыЗагрузки();
	
	НастройкаПоказыватьСтраницуРекламыСогласия =  ХранилищеОбщихНастроек.Загрузить("ЕдиныйНалоговыйСчетЛичныйКабинет", ИмяНастройкиПоказыватьСтраницуРекламыСогласия(Объект.Организация));
	ЕстьСогласиеНаПолучениеДанныхЕНС = ЕдиныйНалоговыйСчетЛичныйКабинет.ПроверитьЕстьСогласиеНаПолучениеДанныхЕНС(Объект.Организация);
	
	БыстраяЗагрузкаДанныхЕНС = Не ЕстьСогласиеНаПолучениеДанныхЕНС;
	
	ПоказатьСтраницуСРекламойСогласия = Ложь;
	
	ПроверитьПодключениеДокументооборотаСФНС();
	ПроверитьСостояниеИнтеграции();
	ОбновитьИнформационнуюПанельБРО();
	ЗаполнитьСписокДоступныхОрганизаций();
	УстановитьПодсказкуСообщитьОбОшибке();
	
	Если ПодключенДокументооборотСКонтролирующимОрганом Тогда
		ПолучитьДатуПоследнегоОбновления();
	КонецЕсли;
	Если КонтролироватьНаличиеДанных Тогда
		ДанныеДляЗагрузкиОтсутствуют = Не ЗначениеЗаполнено(ДатаПоследнегоОбновления)
			Или ДатаПоследнегоОбновления = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ДатаНачалаПримененияЕНС();
		Если Не ДанныеДляЗагрузкиОтсутствуют Тогда
			ПереключитьСтраницыПередПолучениемДанных();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	УстановитьПериодыПоУмолчанию();
	
	ОчиститьТаблицыДанных();
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
	УправлениеФормой();
	ОформитьДоступностьПриОбновленииСверки();
	
	ТребуетсяОбновлениеДанныхФормы = Ложь;
	
	АдресХранилищаСерверныхДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПервичнуюНастройкуПодключения()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СостоянияПодключенияЕНС.СохранитьПервичнуюНастройкуПодключения(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхОрганизаций()
	
	Таблица = ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ДоступныеОрганизации();
	
	СписокВыбора = Элементы.Организация.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДатуПоследнегоОбновления()
	
	ДатаПоследнегоОбновления =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПолучитьДатуПоследнегоОбновления(Объект.Организация);
	
	ДатаАктуальности =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПолучитьДатуАктуальности(Объект.Организация);
	
	ДанныеКонсистенты =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ДанныеКонсистенты(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИтоговыеДанныеПоЕдиномуНалоговомуСчету()
	
	ДанныеОтсутствуют = Не ЗначениеЗаполнено(ТаблицаСальдо);
	
	Если Не ДанныеОтсутствуют Тогда
		
		ОсновнаяЗапись = ТаблицаСальдо[0];
		
		ЕстьПениШтрафы           = ОсновнаяЗапись.ПениШтрафы > 0;
		ЕстьПредстоящиеПлатежи   = ОсновнаяЗапись.ПредстоящиеПлатежи > 0;
		ЕстьМерыВзыскания        = ОсновнаяЗапись.ЕстьМерыВзыскания;
		ЕстьЗадолженность        = ОсновнаяЗапись.СальдоЕНС < 0;
		ЕстьРезервы              = ОсновнаяЗапись.Зарезервировано > 0;
		
		БлижайшийСрокУплаты = ДанныеБлижайшегоПлатежа.БлижайшийСрокУплаты;
		БлижайшийПлатеж     = ДанныеБлижайшегоПлатежа.БлижайшийПлатеж;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДаные(СтруктураДанных)
	
	ТаблицаСальдо.Загрузить(СтруктураДанных.ТаблицаСальдо);
	ЗначениеВДанныеФормы(СтруктураДанных.ТаблицаСальдоКНО, ТаблицаСальдоКНО);
	ТаблицаПредстоящиеПлатежи.Загрузить(СтруктураДанных.ТаблицаПредстоящиеПлатежи);
	ТаблицаПредстоящиеПлатежи.Сортировать("СрокУплаты Возр, ВидНалогаКод Возр");
	ТаблицаЗарезервировано.Загрузить(СтруктураДанных.ТаблицаЗарезервировано);
	ТаблицаЗарезервировано.Сортировать("ДатаОперации Возр");
	ТаблицаОперацииЕНП.Загрузить(СтруктураДанных.ТаблицаОперацииЕНП);
	ТаблицаОперацииЕНП.Сортировать("ДатаОперации Убыв, Порядок Возр");
	ТаблицаИсторияЕНС.Загрузить(СтруктураДанных.ТаблицаИсторияЕНС);
	ТаблицаИсторияЕНС.Сортировать("ДатаОбновленияСальдо Убыв");
	ТаблицаПроцедурыВзыскания.Загрузить(СтруктураДанных.ТаблицаПроцедурыВзыскания);
	ТаблицаПроцедурыВзыскания.Сортировать("ДокументОснованиеДата Убыв");
	ТаблицаПлатежи.Загрузить(СтруктураДанных.ТаблицаПлатежи);
	ТаблицаПлатежи.Сортировать("ДатаОперации Убыв");
	ТаблицаОтчеты.Загрузить(СтруктураДанных.ТаблицаОтчеты);
	ТаблицаОтчеты.Сортировать("ДатаОперации Убыв");
	ТаблицаНачисления.Загрузить(СтруктураДанных.ТаблицаНачисления);
	ТаблицаОснованияНачислений.Загрузить(СтруктураДанных.ТаблицаОснованияНачислений);
	ТаблицаПениШтрафы.Загрузить(СтруктураДанных.ТаблицаПениШтрафы);
	ДанныеБлижайшегоПлатежа = СтруктураДанных.ДанныеБлижайшегоПлатежа;
	
	ЗаполнитьОтражениеВУчетеДоступноНачисления();
	ЗаполнитьОтражениеВУчетеДоступноПениШтрафы();
	
	ТребуетсяОбновлениеДанныхФормы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СброситьДаные()
	
	ДанныеОтсутствуют      = Истина;
	ЕстьПредстоящиеПлатежи = Ложь;
	ЕстьМерыВзыскания      = Ложь;
	ЕстьПениШтрафы         = Ложь;
	ЕстьЗадолженность      = Ложь;
	ЕстьРезервы            = Ложь;
	
	ОчиститьТаблицыДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыДанных()
	
	ТаблицаСальдо.Очистить();
	ТаблицаСальдоКНО.ПолучитьЭлементы().Очистить();
	ТаблицаПредстоящиеПлатежи.Очистить();
	ТаблицаЗарезервировано.Очистить();
	ТаблицаОперацииЕНП.Очистить();
	ТаблицаИсторияЕНС.Очистить();
	ТаблицаПроцедурыВзыскания.Очистить();
	ТаблицаПлатежи.Очистить();
	ТаблицаОтчеты.Очистить();
	ТаблицаНачисления.Очистить();
	ТаблицаПениШтрафы.Очистить();
	ТаблицаОснованияНачислений.Очистить();
	ТаблицаКБК.Очистить();
	ДанныеБлижайшегоПлатежа = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницыПередОбработкойДанных()
	
	Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	Элементы.ГруппаДатаАктуальности.Видимость              = Ложь;
	Элементы.Настройки.Доступность                         = Ложь;
	
	Элементы.БаннерОбслуживаемаяОшибкаРаботыСервиса.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтраницыПередПолучениемДанных()
	
	ТребуетсяОбновлениеДанныхФормы = Истина;
	Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаПромежуточная;
	Элементы.ГруппаДатаАктуальности.Видимость     = Ложь;
	Элементы.Настройки.Доступность                = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьОтображениеПоказателей(ИмяРаздела)
	
	ТекущаяСтраницаРасшифровки  = Элементы["СтраницаРасшифровка" + ИмяРаздела];
	Элементы.ГруппаРасшифровкаДанных.ТекущаяСтраница = ТекущаяСтраницаРасшифровки;
	
	Если РежимСверки Тогда
		ПереключениеКомандРасхождение(Неопределено, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьНаСервере(КоллекцияИмя, КолонкаИмя, НаправлениеСортировки) 
	
	КоллекцияПутьКДанным = Элементы[КоллекцияИмя].ПутьКДанным;
	КолонкаПутьКДанным   = СтрРазделить(Элементы[КолонкаИмя].ПутьКДанным, ".", Ложь)[1];
	
	ЭтотОбъект[КоллекцияПутьКДанным].Сортировать(КолонкаПутьКДанным + " " + НаправлениеСортировки);
	
КонецПроцедуры

&НаСервере
Функция ОбновлениеВыполняетсяВПараллельномСеансе()
	
	ОбновлениеВыполняетсяВПараллельномСеансе = Ложь;
	
	ОписаниеКлючаЗаписи = Новый Структура("Организация", Объект.Организация);
	КлючЗаписи = РегистрыСведений.СостоянияОбновленияЕНС.СоздатьКлючЗаписи(ОписаниеКлючаЗаписи);
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи,, УникальныйИдентификатор);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Обновление данных уже производится в параллельном сеансе';
								|en = 'Обновление данных уже производится в параллельном сеансе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных';
																						|en = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
			, СтрШаблон(НСтр("ru = 'Обновление данных уже производится в параллельном сеансе. Организация: %1';
							|en = 'Обновление данных уже производится в параллельном сеансе. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
		ОбновлениеВыполняетсяВПараллельномСеансе = Истина;
	КонецПопытки;
	
	Возврат ОбновлениеВыполняетсяВПараллельномСеансе;
	
КонецФункции

&НаСервере
Процедура СнятьБлокировкуОбновления()
	
	ЕдиныйНалоговыйСчетИнтеграция.СнятьБлокировкуОбновления(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииОбновления()
	
	Оповестить("ЕдиныйНалоговыйСчетЛичныйКабинет_ОбновленыДанные", Новый Структура("Организация", Объект.Организация), УникальныйИдентификатор)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМетодыЗагрузки()
	
	ПоследовательностьМетодов = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ПоследовательностьМетодов(ИспользоватьСервисДанныхЕНС);
	СписокСправочников        = ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СписокСправочниковДляЗагрузки(ИспользоватьСервисДанныхЕНС);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УправлениеФормой()
	
	ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область РегистрацияВСервисе

&НаКлиенте
Процедура ЗарегистрироватьсяВСервисеЕНС()
	
	ШагПрогрессора = 0;
	УстановитьПрогрессор();
	
	ОповещениеПослеПолученияСертификата = Новый ОписаниеОповещения(
		"ПослеПолученияСертификата", ЭтотОбъект);
	ДополнительныеПараметры = Новый Структура("ОповещениеПослеПолученияСертификата", ОповещениеПослеПолученияСертификата);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеСозданияМенеджераКриптографии", ЭтотОбъект, ДополнительныеПараметры);
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь,, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПослеПолученияТребованияРегистрации(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		ДвоичныеДанныеКлюча = ДвоичныеДанныеКлюча(РезультатАвторизации.КлючДоступа);
		
		АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКлюча, Новый УникальныйИдентификатор);
		АдресРезультата   = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура("АдресРезультата, АдресДанных, КлючДоступа", АдресРезультата, АдресДанных, РезультатАвторизации.КлючДоступа);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодписанияИдентификаторЗапросаПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		КриптографияЭДКОКлиент.ПодписатьPKCS7(Оповещение,
			СертификатПодписанта,
			АдресДанных,
			Истина,
			АдресРезультата,
			Истина,
			МенеджерКриптографии,
			,
			"GOST R 34.10-2012-256");
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПодписанияИдентификаторЗапросаПодтверждения(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		КлючДоступа     = ВходящийКонтекст.КлючДоступа;
		ПодписанныйКлюч = ПолучитьИзВременногоХранилища(ВходящийКонтекст.АдресРезультата);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияРегистрацииНаСервисе", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗапроситьПодтверждениеРегистрацииEnsIntegration(Оповещение, ЭтотОбъект, КлючДоступа, ПодписанныйКлюч);
		
	Иначе
		Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			ТекстОбслуживаемойОшибкиРаботыСервиса = СтрЗаменить(Результат.ОписаниеОшибки, Символы.ПС, " ");
			ОбслуживаемаяОшибкаРаботыСервиса = Истина;
			КодОшибкиОбновлениеДанных = "НеУдалосьПодписатьСертификат";
			ОчиститьСообщения();
		КонецЕсли;
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияРегистрацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		ТребуетсяПодтверждениеУчетнойЗаписи = Ложь;
		ПоказатьРегистрацияПрошлаУспешно = Истина;
		РежимРегистрации = Ложь;
		ПослеРегистрацииНаСервере();
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область АвторизацияИПолучениеДанных

&НаКлиенте
Процедура ОбновитьДанныеЕдиногоНалоговогоСчета()
	
	Если Не ДоступноОбновлениеСервиса() Тогда
		Если ЛицензияПросрочена Тогда
			ОформитьОшибкуРаботыСервиса();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ШагПрогрессора = 0;
	УстановитьПрогрессор();
	
	ПоказатьОповещение = Истина;
	ПереключитьСтраницыПередОбработкойДанных();
	
	АдресАрхивнойКопииДанных = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
	АдресАктуальныхПериодов  = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
	
	Для Каждого Метод Из ПоследовательностьМетодов Цикл
		Метод.Пометка = Ложь;
	КонецЦикла;
	
	ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных';
																					|en = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
		, СтрШаблон(НСтр("ru = 'Начало обновления данных ЕНС. Организация: %1';
						|en = 'Начало обновления данных ЕНС. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодготовкиБазыДляОбновления", ЭтотОбъект);
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПередОбновлениемДанныхЕдиногоНалоговогоСчета(Оповещение, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодготовкиБазыДляОбновления(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		Если ИспользоватьСервисДанныхЕНС И НЕ ТребуетсяПодтверждениеУчетнойЗаписи Тогда
			ПослеПолученияСертификата(Результат, ВходящийКонтекст)
		Иначе
			ОповещениеПослеПолученияСертификата = Новый ОписаниеОповещения(
				"ПослеПолученияСертификата", ЭтотОбъект);
			ДополнительныеПараметры = Новый Структура("ОповещениеПослеПолученияСертификата", ОповещениеПослеПолученияСертификата);
			
			Оповещение = Новый ОписаниеОповещения(
				"ПослеСозданияМенеджераКриптографии", ЭтотОбъект, ДополнительныеПараметры);
			КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь,, Истина);
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		МенеджерКриптографии = Результат.МенеджерКриптографии;
		Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
			СертификатНачалоВыбораЗавершение(
				Новый Структура("Выполнено, ВыбранноеЗначение", Истина, ОтпечатокСертификата),
				ВходящийКонтекст);
		Иначе
			ВыбратьСертификатПодписанта(ВходящийКонтекст);
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			ТекстОбслуживаемойОшибкиРаботыСервиса = Результат.ОписаниеОшибки;
			ОбслуживаемаяОшибкаРаботыСервиса = Истина;
			КодОшибкиОбновлениеДанных = "ОшибкаМенеджераКриптографии";
		КонецЕсли;
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатПодписанта(ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"СертификатНачалоВыбораЗавершение", ЭтотОбъект, ВходящийКонтекст);

	КриптографияЭДКОКлиент.ВыбратьСертификат(
		Оповещение, МестоХраненияКлюча, Сертификат, "MY",,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбораЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		Если ТипЗнч(Результат.ВыбранноеЗначение) = Тип("Структура") Тогда
			Сертификат = Результат.ВыбранноеЗначение.Отпечаток;
		ИначеЕсли ТипЗнч(Результат.ВыбранноеЗначение) = Тип("Строка") Тогда
			Сертификат = Результат.ВыбранноеЗначение;
		Иначе
			Для Каждого Стр Из Результат.ВыбранноеЗначение Цикл
				Сертификат = Стр.Отпечаток;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Сертификат",
			Сертификат);
		ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияСертификата",
			ВходящийКонтекст.ОповещениеПослеПолученияСертификата);
		
		Оповещение = Новый ОписаниеОповещения("НайтиСертификатПоОтпечаткуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		КриптографияЭДКОКлиент.НайтиСертификатПоОтпечатку(Оповещение, Сертификат, "MY", Ложь, Ложь, МенеджерКриптографии);
		
	Иначе
		ОбслуживаемаяОшибкаРаботыСервиса = Истина;
		КодОшибкиОбновлениеДанных = "НеВыбранСертификат";
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификатПоОтпечаткуЗавершение(Результат, ВходящийКонтекст) Экспорт 
	
	Если Результат.Выполнено
		И Результат.СертификатНайден Тогда
		
		УстановитьПрогрессор();
		
		СертификатПодписанта = Результат.СвойстваСертификата;
		
		СвойстваВладельца = КонтекстЭДОКлиент.РазобратьСтрокуСубъекта(СертификатПодписанта.Владелец);
		ИспользуетсяДоверенностьНаПолучениеДанных =
			СвойстваВладельца.Получить("OID1_2_643_100_5") = Неопределено И СвойстваВладельца.Получить("OID1_2_643_100_1") = Неопределено
			И СвойстваВладельца.Получить("OGRN") = Неопределено И СвойстваВладельца.Получить("OGRNIP") = Неопределено;
		
		Если Не ИспользуетсяДоверенностьНаПолучениеДанных Тогда
			ИННИзСертификата = ДокументооборотСКОКлиентСервер.ИННИзСертификата(СвойстваВладельца, Истина, ЭтоЮридическоеЛицо);
			Если ИННИзСертификата <> СведенияОбОрганизации.ИНН Тогда
				ОформитьНедоступностьСертификата();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ВладелецЭЦПСНИЛС = СвойстваВладельца.Получить("OID1_2_643_100_3");
		Если Не ЗначениеЗаполнено(ВладелецЭЦПСНИЛС) Тогда
			ВладелецЭЦПСНИЛС = СвойстваВладельца.Получить("SNILS");
		КонецЕсли;
		ПолучитьНомерМашиночитаемойДоверенности(ВладелецЭЦПСНИЛС);
		
		Если ДоступноИспользованиеДоверенности() Тогда
			
			Оповещение = Новый ОписаниеОповещения("ИзвлечьИнформациюСертификата", ЭтотОбъект, ВходящийКонтекст);
			КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(Оповещение,
				СертификатПодписанта,
				Ложь,
				МенеджерКриптографии);
			
		КонецЕсли;
		
	ИначеЕсли Не Результат.СертификатНайден Тогда
		
		ОформитьНедоступностьСертификата();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНомерМашиночитаемойДоверенности(ВладелецЭЦПСНИЛС)
	
	НомерМашиночитаемойДоверенности = "";
	Если Не ИспользуетсяДоверенностьНаПолучениеДанных Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	НомерМашиночитаемойДоверенности =
		ЕдиныйНалоговыйСчетИнтеграцияВнутренний.НомерМашиночитаемойДоверенности(
			Новый Структура("Организация, СНИЛС",
				Объект.Организация, ВладелецЭЦПСНИЛС));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИнформациюСертификата(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		СертификатПодписантаВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СертификатПодписанта);
		СертификатПодписантаВрем.Вставить("Сертификат", Результат.СтрокаBase64);
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(УчетнаяЗапись);
		КриптографияЭДКОКлиентСервер.ЗаполнитьМестоХраненияКлюча(МестоХраненияКлюча, СертификатПодписантаВрем);
		
		СертификатПодписанта = Новый ФиксированнаяСтруктура(СертификатПодписантаВрем);
		
		ПредставлениеСертификата = ТегНачалоСертификата() + Символы.ВК + Результат.СтрокаBase64 + Символы.ВК + ТегКонецСертификата();
		СертификатВФорматеURL_encoded(ПредставлениеСертификата);
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеПослеПолученияСертификата, Результат);
		
	Иначе
		
		ОформитьНедоступностьИнформацииСертификата();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СертификатВФорматеURL_encoded(ПредставлениеСертификата)
	
	СертификатПодписи = КодироватьСтроку(ПредставлениеСертификата, СпособКодированияСтроки.КодировкаURL);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТегНачалоСертификата() Экспорт
	
	Возврат "-----BEGIN CERTIFICATE-----";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТегКонецСертификата() Экспорт
	
	Возврат "-----END CERTIFICATE-----";
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияСертификата(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		УстановитьПрогрессор();
		Оповещение = Новый ОписаниеОповещения("ПослеАвторизацииНаСервисеEnsIntegration", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.АвторизоватьсяНаСервисеEnsIntegration(Оповещение, ЭтотОбъект);
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПослеАвторизацииНаСервисеEnsIntegration(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		ТребуетсяПодтверждениеУчетнойЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ТребуетсяПодтверждениеУчетнойЗаписи", Ложь);
		Если ТребуетсяПодтверждениеУчетнойЗаписи Тогда
			
			Если РежимРегистрации Тогда
				ПослеПолученияТребованияРегистрации(Результат, ВходящийКонтекст);
			Иначе
				УправлениеФормой();
			КонецЕсли;
			
		ИначеЕсли РежимРегистрации Тогда
			
			ПослеПолученияРегистрацииНаСервисе(Результат, ВходящийКонтекст);
			
		Иначе
			
			РезультатАвторизации = Результат.РезультатАвторизации;
			
			УстановитьПрогрессор();
			
			Если ИспользоватьСервисДанныхЕНС <> РезультатАвторизации.ИспользоватьСервисДанныхЕНС Тогда
				ИспользоватьСервисДанныхЕНС = РезультатАвторизации.ИспользоватьСервисДанныхЕНС;
				УстановитьМетодыЗагрузки();
				Если ИспользоватьСервисДанныхЕНС Тогда
					Элементы.БаннерРекламаАвторизацииПоСогласию.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			ИспользуетсяАвторизацияСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатАвторизации, "ТокенПолучен", Ложь);
			Если ИспользуетсяАвторизацияСервиса Тогда
				ПослеПолученияТокенаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
			Иначе
				ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Результат.Свойство("СообщениеОбОшибке") И Результат.СообщениеОбОшибке = "НеверныйЛогинИлиПароль" Тогда
			ОбслуживаемаяОшибкаРаботыСервиса = Истина;
			КодОшибкиОбновлениеДанных = "НеверныйЛогинИлиПароль";
		КонецЕсли;
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		ДвоичныеДанныеКлюча = ДвоичныеДанныеКлюча(РезультатАвторизации.КлючДоступа);
		
		АдресДанных       = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКлюча, Новый УникальныйИдентификатор);
		АдресРезультата   = ПоместитьВоВременноеХранилище(, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура("АдресРезультата, АдресДанных, КлючДоступа", АдресРезультата, АдресДанных, РезультатАвторизации.КлючДоступа);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодписанияКлючаАвторизации", ЭтотОбъект, ДополнительныеПараметры);
		КриптографияЭДКОКлиент.ПодписатьPKCS7(Оповещение,
			СертификатПодписанта,
			АдресДанных,
			Истина,
			АдресРезультата,
			Истина,
			МенеджерКриптографии,
			,
			"GOST R 34.10-2012-256");
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодписанияКлючаАвторизации(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		КлючДоступа     = ВходящийКонтекст.КлючДоступа;
		ПодписанныйКлюч = ПолучитьИзВременногоХранилища(ВходящийКонтекст.АдресРезультата);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияТокенаАвторизацииНаСервисе", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьТокенАвторизацииНаСервисеФНС(Оповещение, ЭтотОбъект, РезультатАвторизации, КлючДоступа, ПодписанныйКлюч);
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияТокенаАвторизацииНаСервисе(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатАвторизации = Результат.РезультатАвторизации;
		
		Если РезультатАвторизации.ТокенПолучен Тогда
			НачатьПолучениеДанныхЕдиногоНалоговогоСчета();
		КонецЕсли;
	
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДвоичныеДанныеКлюча(КлючДоступа)
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, "UTF-8", , Символы.ПС);
	Текст.Записать(КлючДоступа);
	Текст.Закрыть();
	ДвоичныеДанныеКлюча = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанныеКлюча;
	
КонецФункции

&НаКлиенте
Функция НачатьПолучениеДанныхЕдиногоНалоговогоСчета()
	
	ПолучитьДанныеЕдиногоНалоговогоСчета();
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеЕдиногоНалоговогоСчета()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ПараметрыЗаданияОпросаСервера = "";
	ИмяМетода = "";
	Для Каждого Метод Из ПоследовательностьМетодов Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		Если ЕдиныйНалоговыйСчетИнтеграцияВызовСервера.ТребуетсяВызовМетода(Объект.Организация, ИмяМетода, АдресАктуальныхПериодов) Тогда
			ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияДанных", ЭтотОбъект);
			ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКДанным", ЭтотОбъект);
			ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеЕдиногоНалоговогоСчета(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
		Иначе
			ЕдиныйНалоговыйСчетИнтеграцияВызовСервера.УстановитьДатуПоследнегоОбновления(Объект.Организация, Объект.Период, , , ИмяМетода);
			ПослеЗагрузкиФайлаОтвета(Новый Структура("Выполнено, ОбновитьСправочники, ПрекратитьОбновление", Истина, Ложь, Ложь), Новый Структура("ИмяМетода", ИмяМетода));
		КонецЕсли;
	ИначеЕсли Не ИспользоватьСервисДанныхЕНС Тогда
		Если Не ОбновитьСправочники Тогда
			ОбновитьСправочники = СправочникиТребуютОбновления();
		КонецЕсли;
		Если ОбновитьСправочники Тогда
			НачатьПолучениеСправочников();
		Иначе
			ОбработатьДанныеПослеЗагрузки();
		КонецЕсли;
	Иначе
		ОбработатьДанныеПослеЗагрузки();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКДанным(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКДанным", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКДанным() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияДанных(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат.Выполнено Тогда
		Если Результат.ТребуетсяАвторизацияПоКЭП Тогда
			ИспользуетсяАвторизацияСервиса = Ложь;
			// Потребовалась отдельная авторизация
			ПослеПолученияКлючаАвторизацииНаСервисе(Результат, ВходящийКонтекст);
		Иначе
			УстановитьПрогрессор();
			
			РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ИмяМетода", РезультатВыполнения.ИмяМетода);
			
			Если Результат.ФайлПолучен Тогда
				Если РезультатВыполнения.Свойство("ИмяМетода") И РезультатВыполнения.ИмяМетода = "Получение_data" Тогда
					ОтветСервиса = РезультатВыполнения.ОтветСервиса;
					Если РезультатВыполнения.Свойство("checkDate") Тогда
						checkDate = РезультатВыполнения.checkDate;
					КонецЕсли;
					Если РезультатВыполнения.Свойство("updateDate") Тогда
						updateDate = РезультатВыполнения.updateDate;
					КонецЕсли;
					
					Если checkDate = ДатаПоследнегоОбновления И checkDate <> Дата(1, 1, 1) Тогда
						Для Каждого Метод Из ПоследовательностьМетодов Цикл
							Метод.Пометка = Истина;
						КонецЦикла;
						ПодключитьОбработчикОжидания("ПолучитьДанныеЕдиногоНалоговогоСчета",
							1,
							Истина);
						Возврат Неопределено;
					КонецЕсли;
					
					Если updateDate = ДатаАктуальности Тогда
						ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.УстановитьДатыПоследнегоОбновления(Объект.Организация, checkDate);
						Для Каждого Метод Из ПоследовательностьМетодов Цикл
							Метод.Пометка = Истина;
						КонецЦикла;
						ПодключитьОбработчикОжидания("ПолучитьДанныеЕдиногоНалоговогоСчета",
							1,
							Истина);
						Возврат Неопределено;
						
					КонецЕсли;
					
					Если ОтветСервиса.Свойство("status") И ОтветСервиса.status = "READY" Тогда
						Для Каждого Метод Из ПоследовательностьМетодов Цикл
							Если Метод.Значение = РезультатВыполнения.ИмяМетода Тогда
								Метод.Пометка = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						ПодключитьОбработчикОжидания("ПолучитьДанныеЕдиногоНалоговогоСчета",
							1,
							Истина);
						КонецЕсли;
					Если ОтветСервиса.Свойство("status") И ОтветСервиса.status = "NO_DATA" Тогда
						Для Каждого Метод Из ПоследовательностьМетодов Цикл
							Метод.Пометка = Истина;
						КонецЦикла;
						ДанныеДляЗагрузкиОтсутствуют = Истина;
						ДанныеОтсутствуют = Истина;
						УправлениеФормой();
						Возврат Неопределено;
					КонецЕсли;
				Иначе
					Если ИспользуетсяАвторизацияСервиса Тогда
						Результат.Вставить("РасшифрованныйФайл", АдресХранилища);
						ПослеРасшифровкиФайлаОтвета(Результат, ДополнительныеПараметры);
					Иначе
						Оповещение = Новый ОписаниеОповещения("ПослеРасшифровкиФайлаОтвета", ЭтотОбъект, ДополнительныеПараметры);
						КриптографияЭДКОКлиент.РасшифроватьPKCS7(Оповещение,
						АдресХранилища,
							,
							СертификатПодписанта,
							Ложь,
						МенеджерКриптографии);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПослеЗагрузкиФайлаОтвета(Результат, ДополнительныеПараметры)
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеРасшифровкиФайлаОтвета(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
	
		УстановитьПрогрессор();
		
		ИмяМетода = ВходящийКонтекст.ИмяМетода;
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(Результат.РасшифрованныйФайл); 
		Если Результат.Свойство("ИмяМетода")
			 И (Результат.ИмяМетода = "Получение_data_download" Или Результат.ИмяМетода = "Получение_dictionary_download_main") Тогда
			ДанныеОтветСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			Если ДанныеОтветСервиса.Свойство("ОтветСервиса") Тогда
				ДанныеФайла = ПолучитьИзВременногоХранилища(Результат.АдресРезультата).ОтветСервиса;
			КонецЕсли;
		КонецЕсли;
		АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода",          ИмяМетода);
		ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
		ДополнительныеПараметры.Вставить("ДанныеФайла",        ДанныеФайла);
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаОтвета", ЭтотОбъект, ДополнительныеПараметры);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеЕдиногоНалоговогоСчета(Оповещение, ИмяМетода, ЭтотОбъект);
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеЗагрузкиФайлаОтвета(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		Если Результат.ПрекратитьОбновление Тогда
			
			Если Не Результат.СервисДоступен Тогда
				СервисДоступен = Ложь;
				ОбновлениеДанныхДоступно = Ложь;
				УправлениеФормой();
				Возврат Неопределено;
			КонецЕсли;
			ПараметрыЗаданияОпросаСервера = "";
			ПрекратитьОбновлениеДанных();
			СнятьБлокировкуОбновления();
			ОповеститьОЗавершенииОбновления();
			СобратьВсеДанныеЕдиногоНалоговогоСчета();
			
			
		Иначе
		
			ИмяМетода = ВходящийКонтекст.ИмяМетода;
			
			Если ИмяМетода = "Получение_data_download" Тогда
				Для Каждого Метод Из ПоследовательностьМетодов Цикл
					Если Метод.Значение = "Получение_dictionary_download_main" Тогда
						Метод.Пометка = Не СправочникиТребуютОбновления();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Результат.ОбновитьСправочники Тогда
				ОбновитьСправочники = Истина;
			КонецЕсли;
			
			ТекущийИнтервалИсполненияМетодов = ИнтервалИсполненияМетодов;
			Если Не ЕдиныйНалоговыйСчетИнтеграцияВызовСервера.ТребуетсяВызовМетода(Объект.Организация, ИмяМетода, АдресАктуальныхПериодов, Истина) Тогда
				ТекущийИнтервалИсполненияМетодов = 1;
				УстановитьПрогрессор();
				Для Каждого Метод Из ПоследовательностьМетодов Цикл
					Если Метод.Значение = ИмяМетода Тогда
						Метод.Пометка = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("ПолучитьДанныеЕдиногоНалоговогоСчета",
				ТекущийИнтервалИсполненияМетодов,
				Истина);
			
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция НачатьПолучениеСправочников()
	
	Для Каждого Метод Из СписокСправочников Цикл
		Метод.Пометка = Ложь;
	КонецЦикла;
	
	ПолучитьСправочники();
	
КонецФункции

&НаКлиенте
Функция ПолучитьСправочники()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ИмяМетода = "";
	Для Каждого Метод Из СписокСправочников Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияСправочников", ЭтотОбъект);
		ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКСправочникам", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеСправочников(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
	Иначе
		ОбновитьСправочники = Ложь;
		ПараметрыЗаданияОпросаСервера = "";
		ОбработатьДанныеПослеЗагрузки();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКСправочникам(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникам", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникам() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияСправочников(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ИмяМетода = РезультатВыполнения.ИмяМетода;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода", ИмяМетода);
		ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Истина);
		
		Если Результат.ФайлПолучен Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
			АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
			
			ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСправочника", ЭтотОбъект, ДополнительныеПараметры);
			ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеСправочников(Оповещение, ИмяМетода, ЭтотОбъект);
			
		Иначе
			ПараметрыЗаданияОпросаСервера = "";
			ПослеЗагрузкиФайлаСправочника(Результат, ДополнительныеПараметры)
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСправочникиПоОтбору()
	
	АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	
	ИмяМетода = "";
	Для Каждого Метод Из СписокСправочников Цикл
		Если Не Метод.Пометка Тогда
			ИмяМетода = Метод.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрогрессор();
	Если Не ПустаяСтрока(ИмяМетода) Тогда
		ОповещениеПослеВыполненияЗадания = Новый ОписаниеОповещения("ПослеПолученияСправочниковПоОтбору", ЭтотОбъект);
		ОповещениеПрерывания             = Новый ОписаниеОповещения("ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору", ЭтотОбъект);
		ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ПолучитьДанныеСправочниковПоОтбору(ОповещениеПослеВыполненияЗадания, ОповещениеПрерывания, ИмяМетода, ЭтотОбъект);
	Иначе
		ОбновитьСправочники = Ложь;
		ПараметрыЗаданияОпросаСервера = "";
		ОбработатьДанныеПослеЗагрузки();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = Результат;
	ПодключитьОбработчикОжидания("Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ПрерываниеПослеОтправкиЗапросаКСправочникамПоОтбору() Экспорт
	
	ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ОтправитьЗапросНаПолучениеСтатусаЗаданияНаСервисеЕНС(ПараметрыЗаданияОпросаСервера);
	
КонецФункции

&НаКлиенте
Функция ПослеПолученияСправочниковПоОтбору(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ИмяМетода = РезультатВыполнения.ИмяМетода;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяМетода", ИмяМетода);
		
		Если Результат.ФайлПолучен Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
			АдресХранилищаДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
			
			ДополнительныеПараметры.Вставить("РасшифрованныйФайл", АдресХранилищаДвоичныхДанных);
			ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Истина);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСправочника", ЭтотОбъект, ДополнительныеПараметры);
			ЕдиныйНалоговыйСчетИнтеграцияФормыКлиент.ЗагрузитьДанныеСправочников(Оповещение, ИмяМетода, ЭтотОбъект);
			
		Иначе
			ДополнительныеПараметры.Вставить("СправочникТребуетОбновления", Ложь);
			ПослеЗагрузкиФайлаСправочника(Результат, ДополнительныеПараметры)
		КонецЕсли;
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПослеЗагрузкиФайлаСправочника(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыЗаданияОпросаСервера = "";
	
	Если Результат.Выполнено Тогда
		
		УстановитьПрогрессор();
		
		ИмяМетода = ВходящийКонтекст.ИмяМетода;
		
		СправочникТребуетОбновления =
			ЕдиныйНалоговыйСчетИнтеграцияВызовСервера.МетодИспользуетОтбор(ИмяМетода)
			И СправочникТребуетОбновления(ИмяМетода)
			И ВходящийКонтекст.СправочникТребуетОбновления;
		
		Если СправочникТребуетОбновления Тогда
			ПодключитьОбработчикОжидания("ПолучитьСправочникиПоОтбору",
				ИнтервалИсполненияМетодов,
				Истина);
		Иначе
			Для Каждого Метод Из СписокСправочников Цикл
				Если Метод.Значение = ИмяМетода Тогда
					Метод.Пометка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ПодключитьОбработчикОжидания("ПолучитьСправочники",
				1,
				Истина);
		КонецЕсли;
		
	Иначе
		ОформитьОшибкуРаботыСервиса();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СправочникиТребуютОбновления()
	
	Возврат ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СправочникиТребуютОбновления();
	
КонецФункции

&НаСервереБезКонтекста
Функция СправочникТребуетОбновления(ИмяСправочника)
	
	Возврат ЕдиныйНалоговыйСчетИнтеграцияВнутренний.СправочникТребуетОбновления(ИмяСправочника);
	
КонецФункции

&НаКлиенте
Процедура УстановитьПрогрессор()
	
	Если ИспользоватьСервисДанныхЕНС Тогда
		
		КоличествоМетодов = ПоследовательностьМетодов.Количество();
		ВыполненоМетодов = 0;
		Для Каждого Метод Из ПоследовательностьМетодов Цикл
			Если Метод.Пометка Тогда
				ВыполненоМетодов = ВыполненоМетодов + 1;
			КонецЕсли;
		КонецЦикла;
		Если ШагПрогрессора = 0 Тогда
			Прогрессор = 0;
		ИначеЕсли ВыполненоМетодов = 0 Тогда
			Прогрессор = Прогрессор + 4;
		Иначе
			РазмерШага = Цел(70 / КоличествоМетодов);
			Прогрессор = Макс(Мин(Прогрессор + 8, 90), 90 - РазмерШага * (КоличествоМетодов - ВыполненоМетодов));
		КонецЕсли;
		
	Иначе
		
		// Прогрессор неравномерный.
		// 0:   начало
		// 1-9: операции авторизации, выделим под них 5%
		// 10 + количество методов * количество шагов: операции получения данных, выделим под них
		// х: генерация операций, выделим под нее 2%
		// х + 1: отрисовка, выделим под нее 3%
		КоличествоМетодов = ПоследовательностьМетодов.Количество() + СписокСправочников.Количество();
		Если ШагПрогрессора = 0 Тогда
			Прогрессор = 0;
		ИначеЕсли ШагПрогрессора > 0 И ШагПрогрессора <= 9 Тогда
			ВыделенныйРазмер = 5;
			КоличествоШагов  = 9;
			РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 0, РежимОкругления.Окр15как20);
			Прогрессор = Прогрессор + РазмерШага;
		ИначеЕсли ШагПрогрессора > 9 И ШагПрогрессора <= 9 + КоличествоМетодов * 4 Тогда
			ВыделенныйРазмер = 90;
			КоличествоШагов  = КоличествоМетодов * 4;
			РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 2, РежимОкругления.Окр15как20);
			Прогрессор = Прогрессор + РазмерШага;
		ИначеЕсли ШагПрогрессора > 9 + КоличествоМетодов * 4 И ШагПрогрессора <= 9 + КоличествоМетодов * 4 + 1 Тогда
			ВыделенныйРазмер = 2;
			КоличествоШагов  = 2;
			РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 0, РежимОкругления.Окр15как20);
			Прогрессор = Прогрессор + РазмерШага;
		Иначе
			ВыделенныйРазмер = 3;
			КоличествоШагов  = 2;
			РазмерШага = Окр(ВыделенныйРазмер/КоличествоШагов, 0, РежимОкругления.Окр15как20);
			Прогрессор = Прогрессор + РазмерШага;
		КонецЕсли;
		
	КонецЕсли;
	
	ШагПрогрессора = ШагПрогрессора + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПослеЗагрузки()
	
	ПараметрыЗаданияОпросаСервера = "";
	
	Если ПоддерживаетсяОбработкаДанныхПослеЗагрузки Тогда
		Результат = ВыполнитьОбработкуДанныхПослеЗагрузкиНаСервере();
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДанныеПослеЗагрузкиЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОписаниеОповещения, ПараметрыОжидания);
	Иначе
		СнятьБлокировкуОбновления();
		ОповеститьОЗавершенииОбновления();
		СобратьВсеДанныеЕдиногоНалоговогоСчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПослеЗагрузкиЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	СнятьБлокировкуОбновления();
	ОповеститьОЗавершенииОбновления();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОбработкуДанныхПослеЗагрузкиНаСервере()
	
	Если Не ЕдиныйНалоговыйСчетЛичныйКабинет.ПоддерживаетсяОбработкаДанныхПослеЗагрузки() Тогда
		Возврат Новый Структура("Выполнено", Истина);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Единый налоговый счет: обработка после загрузки данных';
															|en = 'Единый налоговый счет: обработка после загрузки данных'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Организация",                 Объект.Организация);
	ПараметрыОбработки.Вставить("Период",                      Объект.Период);
	ПараметрыОбработки.Вставить("ОбработчикЗагрузкиДанных",    Истина);
	ПараметрыОбработки.Вставить("ИспользоватьСервисДанныхЕНС", ИспользоватьСервисДанныхЕНС);
	ПараметрыОбработки.Вставить("СтруктураДанных",
		Новый Структура("ТаблицаОперацииЕНП",
			ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.НовыйТаблицаОперацииЕНП()));
			
	НаименованиеЗадания = НСтр("ru = 'Единый налоговый счет: сбор данных';
								|en = 'Единый налоговый счет: сбор данных'");
	Результат = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
		"ЕдиныйНалоговыйСчетЛичныйКабинетВнутренний.ПослеЗагрузкиДанныхЛичногоКабинета",
		ПараметрыОбработки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДоступноОбновлениеСервиса()
	
	ДоступноОбновлениеСервиса = Истина;
	
	Если ДатаЗавершенияРегламентныхРабот > ТекущаяДатаСеанса() Или Не ПроверитьЗаполнение()
		Или ОбновлениеВыполняетсяВПараллельномСеансе() Или ЛицензияПросрочена Тогда
		ДоступноОбновлениеСервиса = Ложь;
	КонецЕсли;
	
	Возврат ДоступноОбновлениеСервиса;
	
КонецФункции

&НаСервере
Функция ДоступноИспользованиеДоверенности()
	
	ДоступноИспользованиеДоверенности = Истина;
	Если ИспользуетсяДоверенностьНаПолучениеДанных Тогда
		Если Не ЗначениеЗаполнено(НомерМашиночитаемойДоверенности) Тогда
			ДоступноИспользованиеДоверенности = Ложь;
			СообщениеОбОшибке = НСтр("ru = 'Отсутствуют данные о машиночитаемой доверенности';
									|en = 'Отсутствуют данные о машиночитаемой доверенности'");
			ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаМЧД(Объект.Организация, СообщениеОбОшибке);
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			КонецЕсли;
			ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных';
																							|en = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
				, СтрШаблон(НСтр("ru = 'Отсутствуют данные о машиночитаемой доверенности. Организация: %1';
								|en = 'Отсутствуют данные о машиночитаемой доверенности. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
			ОформитьОшибкуРаботыСервиса();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступноИспользованиеДоверенности;
	
КонецФункции

&НаСервере
Процедура ОформитьНедоступностьСертификата()

	СообщениеОбОшибке = НСтр("ru = 'Не найдены данные о сертификате подписи';
							|en = 'Не найдены данные о сертификате подписи'");
	ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаСертификат(Объект.Организация, СообщениеОбОшибке);
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных';
																					|en = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
		, СтрШаблон(НСтр("ru = 'Не найдены данные о сертификате подписи. Организация: %1';
						|en = 'Не найдены данные о сертификате подписи. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
	КодОшибкиОбновлениеДанных = "НеНайденСертификат";
	ОформитьОшибкуРаботыСервиса();

КонецПроцедуры

&НаСервере
Процедура ОформитьНедоступностьИнформацииСертификата()
	
	СообщениеОбОшибке = НСтр("ru = 'Не удалось извлечь информацию из сертификата подписи';
							|en = 'Не удалось извлечь информацию из сертификата подписи'");
	ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаСертификат(Объект.Организация, СообщениеОбОшибке);
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.ОбработатьИнформационноеСообщение(НСтр("ru = 'Запрос к сервису ЛК ЕНС. Обновление данных';
																					|en = 'Запрос к сервису ЛК ЕНС. Обновление данных'")
		, СтрШаблон(НСтр("ru = 'Не удалось извлечь информацию из сертификата подписи. Организация: %1';
						|en = 'Не удалось извлечь информацию из сертификата подписи. Организация: %1'"), Объект.Организация), , Объект.Организация, Ложь);
	КодОшибкиОбновлениеДанных = "НеНайденСертификат";
	ОформитьОшибкуРаботыСервиса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкуБольшеНеПоказыватьСтраницуРекламыСогласия(Организация)
	
	ХранилищеОбщихНастроек.Сохранить("ЕдиныйНалоговыйСчетЛичныйКабинет", ИмяНастройкиПоказыватьСтраницуРекламыСогласия(Организация), Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяНастройкиПоказыватьСтраницуРекламыСогласия(Организация)
	
	Возврат "ПоказыватьСтраницаРекламаАвторизацииПоСогласию" + СтрЗаменить(Строка(Организация), """", "");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура СоздатьУведомлениеОСпецрежимахНалогообложения(ВидУведомления)
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Организация", Объект.Организация);
	
	ПараметрыУведомления.Вставить("ВидУведомления", ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения." + ВидУведомления));
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.ФормаОбъекта",
			ПараметрыУведомления,
			ЭтотОбъект,
			УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапросИОН(ВидУслугиПриИОН)
	
	ЗапросИОН = СоздатьЗапросИОННаСервере(Объект.Организация, РегистрацияВНалоговомОргане, ВидУслугиПриИОН);
	ПоказатьЗначение(, ЗапросИОН);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьЗапросИОННаСервере(Организация, РегистрацияВНалоговомОргане, ВидУслугиПриИОН)

	ЗапросИОН = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.СоздатьДокумент();
	
	ЗапросИОН.Дата          = ТекущаяДатаСеанса();
	ЗапросИОН.Организация   = Организация;
	ЗапросИОН.Получатель    = РегистрацияВНалоговомОргане;
	ЗапросИОН.ВидУслуги     = Перечисления.ВидыУслугПриИОН[ВидУслугиПриИОН];
	ЗапросИОН.ФорматОтвета  = Перечисления.ФорматОтветаНаЗапросИОН.XML;
	ЗапросИОН.ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;

	Если ВидУслугиПриИОН = "ПредставлениеАктовСверкиРасчетов" Или ВидУслугиПриИОН = "СправкаОПринадлежностиСумм" Тогда
		ЗапросИОН.ДатаНачалаПериода = НачалоГода(ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ДатаНачалаПримененияЕНС());
		Если Год(ТекущаяДатаСеанса()) <> Год(ЗапросИОН.ДатаНачалаПериода) Тогда
			ЗапросИОН.ДатаОкончанияПериода = НачалоДня(КонецГода(ЗапросИОН.ДатаНачалаПериода));
		Иначе
			ЗапросИОН.ДатаОкончанияПериода = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
	Иначе
		ЗапросИОН.ДатаНачалаПериода    = НачалоГода(ЗапросИОН.Дата);
		ЗапросИОН.ДатаОкончанияПериода = НачалоДня(ЗапросИОН.Дата);
	КонецЕсли;
	
	Если ВидУслугиПриИОН = "ПредставлениеАктовСверкиРасчетов" Тогда
		ЗапросИОН.КоличествоНалогов = Перечисления.КоличествоЭлементовДляСверкиИОН.Все;
	КонецЕсли;
	
	ЗапросИОН.Записать();
	
	Возврат ЗапросИОН.Ссылка;

КонецФункции

&НаКлиенте
Процедура СоздатьСогласиеНаРаскрытиеНалоговойТайны()
	
	СохранитьНастройкуБольшеНеПоказыватьСтраницуРекламыСогласия(Объект.Организация);
	ЕдиныйНалоговыйСчетИнтеграцияКлиент.СоздатьСогласиеНаРаскрытиеНалоговойТайны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиИнтеграции()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияНастройки", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ОткрытьФорму("Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет.Форма.ФормаНастройкиЛичногоКабинета",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПометкойКоманды(ИмяКоманды)
	
	МассивКоманд = Новый Массив;
	МассивКоманд.Добавить("КнВсеОбязательства");
	МассивКоманд.Добавить("КнЗадолженность");
	МассивКоманд.Добавить("КнПредстоящиеПлатежи");
	МассивКоманд.Добавить("КнЗарезервировано");
	МассивКоманд.Добавить("КнОперацииЕНП");
	МассивКоманд.Добавить("КнИсторияЕНС");
	МассивКоманд.Добавить("КнПроцедурыВзыскания");
	МассивКоманд.Добавить("КнПлатежи");
	МассивКоманд.Добавить("КнОтчеты");
	МассивКоманд.Добавить("КнНачисления");
	МассивКоманд.Добавить("КнПениШтрафы");
	
	Для Каждого ИмяКнопки Из МассивКоманд Цикл
		Элементы[ИмяКнопки].Пометка = Ложь;
	КонецЦикла;
	
	Элементы[ИмяКоманды].Пометка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспорядитьсяСальдоЗавершение(ВыбранныйВариант, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Действие = ВыбранныйВариант.Значение;
	
	СоздатьУведомлениеОСпецрежимахНалогообложения(Действие);
	
КонецПроцедуры

#Область ОбращенияПользователейОПроблемахИОбОшибках

&НаКлиенте
Процедура СообщитьОбОшибкеЧерезБИП()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		
		Вложения = Новый Массив;
		ВложенияКраткаяЗапись = ВложениеЖурналЗагрузкиЕНС(Объект.Организация, Объект.Период, Ложь);
		ЕстьКраткоеВложениеЖурналаЗагрузки = ЗначениеЗаполнено(ВложенияКраткаяЗапись);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Вложения, ВложенияКраткаяЗапись);
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер =
			ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиентСервер");
		ДанныеСообщения = МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
		ДанныеСообщения.Получатель           = "v8";
		ДанныеСообщения.Тема                 = ТемаСообщенияПользователяОбОшибке();
		ДанныеСообщения.Сообщение            = СообщениеПользователяОбОшибке(Истина, Истина, ЕстьКраткоеВложениеЖурналаЗагрузки);
		ДанныеСообщения.ИНН                  = СведенияОбОрганизации.ИНН;
		ДанныеСообщения.ИспользоватьСтандартныйШаблон = Ложь;
		
		ТекущаяДатаСеансаНаСервере = ТекущаяДатаНаСервере();
		
		ПараметрыЖурналаРегистрации = Новый Структура();
		ПараметрыЖурналаРегистрации.Вставить("ДатаНачала",    ТекущаяДатаСеансаНаСервере - 60*60);
		ПараметрыЖурналаРегистрации.Вставить("ДатаОкончания", ТекущаяДатаСеансаНаСервере);
		ПараметрыЖурналаРегистрации.Вставить("События",       ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.СобытиеЖурналаРегистрации()));
		ПараметрыЖурналаРегистрации.Вставить("Метаданные",    Новый Массив());
		ПараметрыЖурналаРегистрации.Вставить("Уровень",       НСтр("ru = 'Ошибка';
																	|en = 'Ошибка'"));
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"СообщенияВСлужбуТехническойПоддержкиКлиент");
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
			ДанныеСообщения,
			Вложения,
			ПараметрыЖурналаРегистрации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеЧерезБТС()
	
	Вложения = Новый Массив;
	ВложенияКраткаяЗапись = ВложениеЖурналЗагрузкиЕНСДляБТС(Объект.Организация, Объект.Период, Ложь);
	ЕстьКраткоеВложениеЖурналаЗагрузки = ЗначениеЗаполнено(ВложенияКраткаяЗапись);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Вложения, ВложенияКраткаяЗапись);
	
	КоличествоВложений = Вложения.Количество();
	ДополнитьВложениеДляБТСЖурналомРегистрации(Вложения);
	ЕстьЗаписиЖурналаРегистраций = Вложения.Количество() > КоличествоВложений;
	
	ПараметрыОбращения          = ИнформационныйЦентрКлиент.НовыеПараметрыОбращенияВСлужбуПоддержки();
	ПараметрыОбращения.Тема     = ТемаСообщенияПользователяОбОшибке();
	ПараметрыОбращения.Текст    = СообщениеПользователяОбОшибке(ЕстьЗаписиЖурналаРегистраций, Ложь, ЕстьКраткоеВложениеЖурналаЗагрузки);
	ПараметрыОбращения.Вложения = Вложения;
	ПараметрыОбращения.ИспользоватьСтандартныйШаблон = Ложь;
	ИнформационныйЦентрКлиент.ОткрытьФормуНовогоОбращенияВСлужбуПоддержки(ПараметрыОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНекорректныхДанныхЧерезБИП()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		
		Вложения = Новый Массив;
		ВложенияКраткаяЗапись = ВложениеЖурналЗагрузкиЕНС(Объект.Организация, Объект.Период, Ложь);
		ЕстьКраткоеВложениеЖурналаЗагрузки = ЗначениеЗаполнено(ВложенияКраткаяЗапись);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Вложения, ВложенияКраткаяЗапись);
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер =
			ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиентСервер");
		ДанныеСообщения = МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
		ДанныеСообщения.Получатель           = "v8";
		ДанныеСообщения.Тема                 = ТемаСообщенияПользователяОНекорректныхДанных();
		ДанныеСообщения.Сообщение            = СообщениеПользователяОбОшибкеВДанных(СведенияОбОрганизации, 
		Истина, ЕстьКраткоеВложениеЖурналаЗагрузки, ОписаниеПрограммы);
		ДанныеСообщения.ИНН                  = СведенияОбОрганизации.ИНН;
		ДанныеСообщения.ИспользоватьСтандартныйШаблон = Ложь;
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"СообщенияВСлужбуТехническойПоддержкиКлиент");
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
			ДанныеСообщения,
			Вложения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНекорректныхДанныхЧерезБТС()
	
	Вложения = Новый Массив;
	ВложенияКраткаяЗапись = ВложениеЖурналЗагрузкиЕНСДляБТС(Объект.Организация, Объект.Период, Ложь);
	ЕстьКраткоеВложениеЖурналаЗагрузки = ЗначениеЗаполнено(ВложенияКраткаяЗапись);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Вложения, ВложенияКраткаяЗапись);
	
	ПараметрыОбращения          = ИнформационныйЦентрКлиент.НовыеПараметрыОбращенияВСлужбуПоддержки();
	ПараметрыОбращения.Тема     = ТемаСообщенияПользователяОНекорректныхДанных();
	ПараметрыОбращения.Текст    = СообщениеПользователяОбОшибкеВДанных(СведенияОбОрганизации,
		Ложь, ЕстьКраткоеВложениеЖурналаЗагрузки, ОписаниеПрограммы);
	ПараметрыОбращения.Вложения = Вложения;
	ПараметрыОбращения.ИспользоватьСтандартныйШаблон = Ложь;
	ИнформационныйЦентрКлиент.ОткрытьФормуНовогоОбращенияВСлужбуПоддержки(ПараметрыОбращения);
	
КонецПроцедуры

&НаКлиенте
Функция ТемаСообщенияПользователяОбОшибке()
	
	Если ИспользоватьСервисДанныхЕНС Тогда
		Возврат НСтр("ru = 'Произошла ошибка при загрузке данных из единого налогового счета через сервис данных';
					|en = 'Произошла ошибка при загрузке данных из единого налогового счета через сервис данных'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Произошла ошибка при загрузке данных из единого налогового счета';
				|en = 'Произошла ошибка при загрузке данных из единого налогового счета'");
	
КонецФункции

&НаКлиенте
Функция ТемаСообщенияПользователяОНекорректныхДанных()
	
	Если ИспользоватьСервисДанныхЕНС Тогда
		Возврат НСтр("ru = 'Обнаружено расхождение данных в личном кабинете ЕНС через сервис данных';
					|en = 'Обнаружено расхождение данных в личном кабинете ЕНС через сервис данных'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Обнаружено расхождение данных в личном кабинете ЕНС';
				|en = 'Обнаружено расхождение данных в личном кабинете ЕНС'");
	
КонецФункции

&НаКлиенте
Функция СообщениеПользователяОбОшибке(ЕстьЗаписиЖурналаРегистраций, ЕстьТехническаяИнформация, ЕстьКраткийЛогЗагрузки)
	
	Сообщение = Новый Массив;
	Сообщение.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = '%8
		|
		|========== Не удаляйте эту часть письма и приложенные файлы ==========
		|#ОшибкаЗагрузки
		|Организация: ""%1"" ИНН: %2 КПП: %3 Код НО: %4
		|Конфигурация: %5, версия %6 (версия подсистемы %7)';
		|en = '%8
		|
		|========== Не удаляйте эту часть письма и приложенные файлы ==========
		|#ОшибкаЗагрузки
		|Организация: ""%1"" ИНН: %2 КПП: %3 Код НО: %4
		|Конфигурация: %5, версия %6 (версия подсистемы %7)'"),
		Объект.Организация,
		СведенияОбОрганизации.ИНН,
		СведенияОбОрганизации.КПП,
		СведенияОбОрганизации.КодНО,
		ОписаниеПрограммы.Синоним,
		ОписаниеПрограммы.Версия,
		ОписаниеПрограммы.ВерсияПодсистемы,
		ТемаСообщенияПользователяОбОшибке()));
		Если ЕстьЗаписиЖурналаРегистраций Или ЕстьТехническаяИнформация Или ЕстьКраткийЛогЗагрузки Тогда
			Сообщение.Добавить(Символы.ПС);
			Сообщение.Добавить(НСтр("ru = 'Приложены файлы:';
									|en = 'Приложены файлы:'"));
		КонецЕсли;
		Если ЕстьКраткийЛогЗагрузки Тогда
			Сообщение.Добавить(Символы.ПС);
			Сообщение.Добавить(НСтр("ru = ' - краткий лог журнала загрузки единого налогового счета';
									|en = ' - краткий лог журнала загрузки единого налогового счета'"));
		КонецЕсли;
		Если ЕстьЗаписиЖурналаРегистраций Тогда
			Сообщение.Добавить(Символы.ПС);
			Сообщение.Добавить(НСтр("ru = ' - информация из журнала регистрации';
									|en = ' - информация из журнала регистрации'"));
		КонецЕсли;
		Если ЕстьТехническаяИнформация Тогда
			Сообщение.Добавить(Символы.ПС);
			Сообщение.Добавить(НСтр("ru = ' - техническая информация';
									|en = ' - техническая информация'"));
		КонецЕсли;
	
	Возврат СтрСоединить(Сообщение);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщениеПользователяОбОшибкеВДанных(СведенияОбОрганизации, ЕстьТехническаяИнформация, ЕстьКраткийЛогЗагрузки, ОписаниеПрограммы)
	
	ДатаСообщения = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Сообщение = Новый Массив;
	Сообщение.Добавить(СтрШаблон(НСтр(
			"ru = 'Напишите ответы на следующие вопросы:
			|
			|1. По какому разделу Личного кабинета ЕНС наблюдаются расхождения?
			|
			|2. Есть ли расхождения в итоговых суммах? Какие суммы вы ожидаете увидеть?
			|
			|3. Каких операций не хватает, в какой таблице? Какие операции лишние?
			|
			|4. Проверьте на сайте ФНС, совпадают ли данные Личного кабинета с данными в программе?
			|
			|Приложите скриншоты, поясняющие ваши ответы.
			|
			|<Укажите ФИО>
			|
			|========== Не удаляйте эту часть письма и приложенные файлы ============
			|#НекорректныеДанные
			|Данные на %4
			|Организация: ""%1"" ИНН: %2 КПП: %5 Код НО: %6 Телефон: %3 
			|Конфигурация: %7, версия %8 (версия подсистемы %9)';
			|en = 'Напишите ответы на следующие вопросы:
			|
			|1. По какому разделу Личного кабинета ЕНС наблюдаются расхождения?
			|
			|2. Есть ли расхождения в итоговых суммах? Какие суммы вы ожидаете увидеть?
			|
			|3. Каких операций не хватает, в какой таблице? Какие операции лишние?
			|
			|4. Проверьте на сайте ФНС, совпадают ли данные Личного кабинета с данными в программе?
			|
			|Приложите скриншоты, поясняющие ваши ответы.
			|
			|<Укажите ФИО>
			|
			|========== Не удаляйте эту часть письма и приложенные файлы ============
			|#НекорректныеДанные
			|Данные на %4
			|Организация: ""%1"" ИНН: %2 КПП: %5 Код НО: %6 Телефон: %3 
			|Конфигурация: %7, версия %8 (версия подсистемы %9)'"),
			СведенияОбОрганизации.Наименование, СведенияОбОрганизации.ИНН, СведенияОбОрганизации.ТелОрганизации, Формат(ДатаСообщения, "ДЛФ=DD"),
			СведенияОбОрганизации.КПП,
			СведенияОбОрганизации.КодНО,
			ОписаниеПрограммы.Синоним,
			ОписаниеПрограммы.Версия,
			ОписаниеПрограммы.ВерсияПодсистемы));
	Если ЕстьТехническаяИнформация Или ЕстьКраткийЛогЗагрузки Тогда
		Сообщение.Добавить(Символы.ПС);
		Сообщение.Добавить(НСтр("ru = 'Приложены файлы:';
								|en = 'Приложены файлы:'"));
	КонецЕсли;
	Если ЕстьКраткийЛогЗагрузки Тогда
		Сообщение.Добавить(Символы.ПС);
		Сообщение.Добавить(НСтр("ru = ' - краткий лог журнала загрузки единого налогового счета';
								|en = ' - краткий лог журнала загрузки единого налогового счета'"));
	КонецЕсли;
	Если ЕстьТехническаяИнформация Тогда
		Сообщение.Добавить(Символы.ПС);
		Сообщение.Добавить(НСтр("ru = ' - техническая информация';
								|en = ' - техническая информация'"));
	КонецЕсли;
	
	Возврат СтрСоединить(Сообщение);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьВложениеДляБТСЖурналомРегистрации(Вложения)
	
	ТекущаяДатаСеансаНаСервере = ТекущаяДатаНаСервере();
	
	ПараметрыЖурналаРегистрации = Новый Структура();
	ПараметрыЖурналаРегистрации.Вставить("ДатаНачала",    ТекущаяДатаСеансаНаСервере - 60*60);
	ПараметрыЖурналаРегистрации.Вставить("ДатаОкончания", ТекущаяДатаСеансаНаСервере);
	ПараметрыЖурналаРегистрации.Вставить("События",       ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЕдиныйНалоговыйСчетИнтеграцияКлиентСервер.СобытиеЖурналаРегистрации()));
	ПараметрыЖурналаРегистрации.Вставить("Метаданные",    Новый Массив());
	ПараметрыЖурналаРегистрации.Вставить("Уровень",       УровеньЖурналаРегистрации.Ошибка);
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
	ИмяФайлаЖурналаРегистрации = ВременныйКаталог + "ЖурналРегистрации";
	УстановитьПривилегированныйРежим(Истина);
	ВыгрузитьЖурналРегистрации(ИмяФайлаЖурналаРегистрации, ПараметрыЖурналаРегистрации);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаЖурналаРегистрации);
	УстановитьПривилегированныйРежим(Ложь);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор());
	
	Вложения.Добавить(
			Новый Структура(
				"ИмяФайла, АдресВоВременномХранилище",
				"ЖурналРегистрации.xml",
				АдресХранилища));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВложениеЖурналЗагрузкиЕНС(Организация, ДатаВыполнения, ПолнаяЗапись = Истина)
	
	ПараметрыЗаписи = РегистрыСведений.ЖурналЗагрузкиЕНС.ПараметрыПолученияЗаписи();
	ПараметрыЗаписи.Организация = Организация;
	ПараметрыЗаписи.ДатаВыполнения = ДатаВыполнения;
	ПараметрыЗаписи.АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор());
	РегистрыСведений.ЖурналЗагрузкиЕНС.ПолучитьЗапись(ПараметрыЗаписи, ПолнаяЗапись);
	
	ЖурналЗагрузкиЕНС = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресХранилища);
	Вложения = Новый Массив;
	Если ЗначениеЗаполнено(ЖурналЗагрузкиЕНС) Тогда
		Вложения.Добавить(
			Новый Структура(
				"Представление, ВидДанных, Данные",
				ПараметрыЗаписи.ИмяФайла,
				"Текст",
				ЖурналЗагрузкиЕНС));
	КонецЕсли;
	
	Возврат Вложения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВложениеЖурналЗагрузкиЕНСДляБТС(Организация, ДатаВыполнения, ПолнаяЗапись = Истина)
	
	ПараметрыЗаписи = РегистрыСведений.ЖурналЗагрузкиЕНС.ПараметрыПолученияЗаписи();
	ПараметрыЗаписи.Организация = Организация;
	ПараметрыЗаписи.ДатаВыполнения = ДатаВыполнения;
	ПараметрыЗаписи.АдресХранилища = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор());
	РегистрыСведений.ЖурналЗагрузкиЕНС.ПолучитьЗапись(ПараметрыЗаписи, ПолнаяЗапись);
	
	ЖурналЗагрузкиЕНС = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресХранилища);
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста.UTF8, , Символы.ПС);
	Текст.Записать(ЖурналЗагрузкиЕНС);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор());
	
	Вложения = Новый Массив;
	Если ЗначениеЗаполнено(ЖурналЗагрузкиЕНС) Тогда
		Вложения.Добавить(
			Новый Структура(
				"ИмяФайла, АдресВоВременномХранилище",
				ПараметрыЗаписи.ИмяФайла,
				АдресХранилища));
	КонецЕсли;
	
	Возврат Вложения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура ОтправитьСогласиеНаРаскрытиеНалоговойТайны()
	
	ЕстьСогласиеНаПолучениеДанныхЕНС = СогласиеЕНСОтправлено(Объект.Организация);
	Если ЕстьСогласиеНаПолучениеДанныхЕНС Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТекстПромежуточная.Заголовок = НСтр("ru = 'Идет отправка согласия для быстрой загрузки данных. Пожалуйста, подождите.';
												|en = 'Идет отправка согласия для быстрой загрузки данных. Пожалуйста, подождите.'");
	Элементы.ГруппаДанныеСтраницы.ТекущаяСтраница = Элементы.СтраницаПромежуточная;
	
	ДлительнаяОтправкаКлиент.ЗапомнитьКонтекстДлительнойОперации(Ложь,
		"БРО.ПодтверждатьОтправку");
	СогласиеЕНС = СоздатьСогласиеЕНС(Объект.Организация);
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
		ЭтотОбъект,
		"ФНС",
		,
		Истина,
		СогласиеЕНС,
		Объект.Организация);
	
	ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации("БРО.ПодтверждатьОтправку");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьСогласиеЕНС(Организация)
	
	Возврат ЕдиныйНалоговыйСчетЛичныйКабинет.НовоеСогласиеНаРаскрытиеНалоговойТайныЕНС(Организация);
	
КонецФункции

&НаСервереБезКонтекста
Функция СогласиеЕНСОтправлено(Организация)
	
	Возврат ЕдиныйНалоговыйСчетЛичныйКабинет.ПроверитьЕстьСогласиеНаПолучениеДанныхЕНС(Организация);
	
КонецФункции

#КонецОбласти

#Область РежимСверки

&НаКлиенте
Процедура РежимСверкиОбработатьИзменение()
	
	Если РежимСверки Тогда
		ИмяРаздела = "Платежи";
	Иначе
		ИмяРаздела = "ВсеОбязательства";
	КонецЕсли;
	
	УправлениеПометкойКоманды("кн" + ИмяРаздела);
	ПереключитьОтображениеПоказателей(ИмяРаздела);
	
	УправлениеФормой();
	
	ПереключениеКомандРасхождение(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандРасхождение(ТолькоРасхождения, ИмяРаздела = "")
	
	Если Не РежимСверки Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Платежи" Или ИмяРаздела = "" Тогда
		ПереключениеКомандПлатежиРасхождение(ТолькоРасхождения);
	КонецЕсли;
	Если ИмяРаздела = "Отчеты" Или ИмяРаздела = "" Тогда
		ПереключениеКомандОтчетыРасхождение(ТолькоРасхождения);
	КонецЕсли;
	Если ИмяРаздела = "Начисления" Или ИмяРаздела = "" Тогда
		ПереключениеКомандНачисленияРасхождение(ТолькоРасхождения);
	КонецЕсли;
	Если ИмяРаздела = "ПениШтрафы" Или ИмяРаздела = "" Тогда
		ПереключениеКомандПениШтрафыРасхождение(ТолькоРасхождения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандПлатежиРасхождение(ТолькоРасхождения)
	
	Если ТолькоРасхождения = Неопределено Тогда
		ТолькоРасхождения = (ОтборРасхожденияПлатежи = ВариантОтбораТолькоРасхождения());
	КонецЕсли;
	
	ОтборРасхожденияПлатежи = ?(ТолькоРасхождения, ВариантОтбораТолькоРасхождения(), ВариантОтбораВсеОперации());
	
	ТаблицаУстановитьОтборВСпискеРасхождения("ТаблицаПлатежи", "ДокументОтраженияВУчетеЕстьРазница", ТолькоРасхождения);
	ЕдиныйНалоговыйСчетЛичныйКабинетПереопределяемый.ПереключениеКомандПлатежиРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандОтчетыРасхождение(ТолькоРасхождения)
	
	Если ТолькоРасхождения = Неопределено Тогда
		ТолькоРасхождения = (ОтборРасхожденияОтчеты = ВариантОтбораТолькоРасхождения());
	КонецЕсли;
	
	ОтборРасхожденияОтчеты = ?(ТолькоРасхождения, ВариантОтбораТолькоРасхождения(), ВариантОтбораВсеОперации());
	
	ТаблицаУстановитьОтборВСпискеРасхождения("ТаблицаОтчеты", "ДокументРегОтчЕстьРазница", ТолькоРасхождения);
	ЕдиныйНалоговыйСчетЛичныйКабинетПереопределяемый.ПереключениеКомандОтчетыРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандНачисленияРасхождение(ТолькоРасхождения)
	
	Если ТолькоРасхождения = Неопределено Тогда
		ТолькоРасхождения = (ОтборРасхожденияНачисления = ВариантОтбораТолькоРасхождения());
	КонецЕсли;
	
	ОтборРасхожденияНачисления = ?(ТолькоРасхождения, ВариантОтбораТолькоРасхождения(), ВариантОтбораВсеОперации());
	
	ТаблицаУстановитьОтборВСпискеРасхождения("ТаблицаНачисления", "ЕстьРасхождение", ТолькоРасхождения);
	ЕдиныйНалоговыйСчетЛичныйКабинетПереопределяемый.ПереключениеКомандНачисленияРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереключениеКомандПениШтрафыРасхождение(ТолькоРасхождения)
	
	Если ТолькоРасхождения = Неопределено Тогда
		ТолькоРасхождения = (ОтборРасхожденияПениШтрафы = ВариантОтбораТолькоРасхождения());
	КонецЕсли;
	
	ОтборРасхожденияПениШтрафы = ?(ТолькоРасхождения, ВариантОтбораТолькоРасхождения(), ВариантОтбораВсеОперации());
	
	ТаблицаУстановитьОтборВСпискеРасхождения("ТаблицаПениШтрафы", "ЕстьРасхождение", ТолькоРасхождения);
	ЕдиныйНалоговыйСчетЛичныйКабинетПереопределяемый.ПереключениеКомандПениШтрафыРасхождение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаУстановитьОтборВСпискеРасхождения(ИмяТаблицы, ИмяКолонкиРазница, ТолькоРасхождения)
	
	Отбор = Неопределено;
	Если ТолькоРасхождения Тогда
		Отбор = Новый ФиксированнаяСтруктура(ИмяКолонкиРазница, ТолькоРасхождения);
	КонецЕсли;
	
	Элементы[ИмяТаблицы].ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Значение) Тогда
		ПоказатьЗначение(, Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтбораВсеОперации()
	
	Возврат "ВсеОперации";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтбораТолькоРасхождения()
	
	Возврат "ТолькоРасхождения";
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодТаблицы        = ДополнительныеПараметры.ПериодТаблицы;
	ПредставлениеПериода = ДополнительныеПараметры.ПредставлениеПериода;
	
	ПериодТаблицы.ДатаНачала    = РезультатВыбора.НачалоПериода;
	ПериодТаблицы.ДатаОкончания = РезультатВыбора.КонецПериода;
	ЭтотОбъект[ПредставлениеПериода] = ПредставлениеПериода(ПериодТаблицы.ДатаНачала,
		ПериодТаблицы.ДатаОкончания, "ФП = Истина");
	
	ИзмененПериодТаблицы = Истина;
	ИмяТаблицыСИзмененнымПериодом = ДополнительныеПараметры.ИмяТаблицыСИзмененнымПериодом;
	
	СобратьДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодыПоУмолчанию()
	
	НачалоГода = НачалоГода(Объект.Период);
	КонецГода  = КонецГода(Объект.Период);
	
	УстановитьПериодТаблицыПоУмолчанию(ПериодПлатежи,    "ПредставлениеПериодаПлатежи");
	УстановитьПериодТаблицыПоУмолчанию(ПериодОтчеты,     "ПредставлениеПериодаОтчеты");
	УстановитьПериодТаблицыПоУмолчанию(ПериодНачисления, "ПредставлениеПериодаНачисления");
	УстановитьПериодТаблицыПоУмолчанию(ПериодПениШтрафы, "ПредставлениеПериодаПениШтрафы");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодТаблицыПоУмолчанию(ПериодТаблицы, ПредставлениеПериода)
	
	НачалоГода = НачалоГода(Объект.Период);
	КонецГода  = КонецГода(Объект.Период);

	ПериодТаблицы.ДатаНачала    = НачалоГода;
	ПериодТаблицы.ДатаОкончания = КонецГода;
	ЭтотОбъект[ПредставлениеПериода] = ПредставлениеПериода(ПериодТаблицы.ДатаНачала,
		ПериодТаблицы.ДатаОкончания, "ФП = Истина");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПериода(Элемент, ПериодТаблицы, ОписаниеОповещения)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода, ОграничениеСнизу",
		ПериодТаблицы.ДатаНачала,
		ПериодТаблицы.ДатаОкончания,
		ЕдиныйНалоговыйСчетЛичныйКабинетКлиентСервер.ДатаНачалаРаботыРежимаСверки());
	ОткрытьФорму("Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет.Форма.ФормаВыбораПериода", ПараметрыВыбора, Элемент, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеПолученияОтветаНаВопросОбОбновленииФормы(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьСтраницыПередПолучениемДанных();
	СобратьВсеДанныеЕдиногоНалоговогоСчета();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьОшибкуРаботыСервиса()
	
	СнятьБлокировкуОбновления();
	
	ПараметрыЗаданияОпросаСервера = "";
	
	ОшибкаРаботыСервиса = Истина;
	ОбновлениеДанныхДоступно = Истина;
	
	СостояниеОбновления = РегистрыСведений.СостоянияОбновленияЕНС.ПолучитьАктуальноеСостояние(Объект.Организация);
	
	Если СостояниеОбновления.Статус = "Ошибка" И ЗначениеЗаполнено(СостояниеОбновления.Описание.КодОшибки) Тогда
		ОбслуживаемаяОшибкаРаботыСервиса = ЕдиныйНалоговыйСчетИнтеграция.ОбслуживаемаяОшибка(СостояниеОбновления.Описание.КодОшибки);
		Если ОбслуживаемаяОшибкаРаботыСервиса Тогда
			КодОшибкиОбновлениеДанных = СостояниеОбновления.Описание.КодОшибки;
		КонецЕсли;
		ИсключаемыеКодыВнутреннихОшибок = ЕдиныйНалоговыйСчетИнтеграция.ИсключаемыеКодыВнутреннихОшибок();
		Если ИсключаемыеКодыВнутреннихОшибок.Найти(СостояниеОбновления.Описание.КодОшибки) <> Неопределено Тогда
			ОшибкаСервисПерегружен = ЕдиныйНалоговыйСчетИнтеграция.ОшибкаСервисПерегружен(СостояниеОбновления.Описание.КодОшибки);
			ОформитьДоступностьСервиса(ОшибкаСервисПерегружен);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбслуживаемаяОшибкаРаботыСервиса Тогда
		ОформитьВнутренниеОшибки(КодОшибкиОбновлениеДанных);
	КонецЕсли;
	
	ЕдиныйНалоговыйСчетИнтеграцияВнутренний.ВосстановитьАрхивнуюКопиюДанных(
		Новый Структура("Организация, АдресАрхивнойКопииДанных, ТекущаяДата",
			Объект.Организация, АдресАрхивнойКопииДанных, ТекущаяДатаСеанса()));
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаМЧД(Организация, СообщениеОбОшибке);
	
	ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка("НеНайденаДоверенность", Организация, СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаСертификат(Организация, СообщениеОбОшибке);
	
	ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка("НеНайденСертификат", Организация, СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_ОшибкаЛицензия(Организация, СообщениеОбОшибке);
	
	ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка("НетПодписки1СОтчетность", Организация, СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСостояниеОбновленияЕНС_Ошибка(ВнутреннийКодОшибки, Организация, СообщениеОбОшибке);
	
	ТекущаяДатаСеанса = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
	
	ОписаниеАктуальногоСостояния = РегистрыСведений.СостоянияОбновленияЕНС.ОписаниеАктуальногоСостояния();
	
	ОписаниеАктуальногоСостояния.Статус = "Ошибка";
	ОписаниеАктуальногоСостояния.Дата   = ТекущаяДатаСеанса;
	
	ОписаниеАктуальногоСостояния.Описание.КодОшибки            = ВнутреннийКодОшибки;
	ОписаниеАктуальногоСостояния.Описание.РасшифровкаСостояния = СообщениеОбОшибке;
	
	РегистрыСведений.СостоянияОбновленияЕНС.УстановитьАктуальноеСостояние(Организация, ОписаниеАктуальногоСостояния);
	
	Если ЕдиныйНалоговыйСчетИнтеграция.ОбслуживаемаяОшибка(ВнутреннийКодОшибки) Тогда
		СообщениеОбОшибке = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьСервиса(Организация)
	
	ИспользоватьСервисДанныхЕНС = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьИспользоватьСервисДанныхЕНС(Организация);
	ЕдиныйНалоговыйСчетИнтеграция.ПроверкаСервиса(Организация, ИспользоватьСервисДанныхЕНС);
	ОформитьДоступностьСервиса();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьДоступностьСервиса(СервисПерегружен = Ложь)
	
	НастройкиДоступностиЛичногоКабинетаЕНС = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"СостояниеДоступностиСервисаЕНС");
	
	НастройкиПлановойДоступностиЛичногоКабинетаЕНС = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"СостояниеПлановойДоступностиСервисаЕНС");
	
	СостояниеИнтернетСоединения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"СостояниеИнтернетСоединения");
	
	СервисДоступен = Истина;
	ЗапланированаНедоступностьСервиса = Ложь;
	
	ДатаЗавершенияРегламентныхРабот = "";
	Если ЗначениеЗаполнено(НастройкиДоступностиЛичногоКабинетаЕНС) Тогда
		
		ПричинаБлокировки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиДоступностиЛичногоКабинетаЕНС, "Причина", 0);
		Если Не ЗначениеЗаполнено(ПричинаБлокировки) Тогда
			
			ВремяЗавершения = "";
			
			УниверсальнаяТекущаяДата = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
			ДатаЗавершения           = НастройкиДоступностиЛичногоКабинетаЕНС.ДатаЗавершения;
			
			ЦелодневнаяНедоступность = ДатаЗавершения = НачалоДня(ДатаЗавершения) Или ДатаЗавершения = КонецДня(ДатаЗавершения);
			Если ЦелодневнаяНедоступность Тогда
				ДатаЗавершения = ДатаЗавершения + 86400;
			КонецЕсли;
			
			СервисДоступен = УниверсальнаяТекущаяДата > ДатаЗавершения;
			
			ДатаЗавершенияПоМоскве = МестноеВремя(ДатаЗавершения, "GMT+3");
			ЦелодневнаяНедоступностьПоМоскве = ДатаЗавершенияПоМоскве = НачалоДня(ДатаЗавершенияПоМоскве) Или ДатаЗавершенияПоМоскве = КонецДня(ДатаЗавершенияПоМоскве);
			
			Если Не СервисПерегружен Тогда
				ШаблонОписанияФакт = НСтр("ru = '%1. Сервис будет доступен ориентировочно %2%3';
											|en = '%1. Сервис будет доступен ориентировочно %2%3'");
				Если Не ЦелодневнаяНедоступность И Не ЦелодневнаяНедоступностьПоМоскве Тогда
					ОписаниеВремени = НСтр("ru = ' после %1:%2 (МСК).';
											|en = ' после %1:%2 (МСК).'");
					ВремяЗавершения = СтрШаблон(ОписаниеВремени,
					Формат(Час(ДатаЗавершенияПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="),
					Формат(Минута(ДатаЗавершенияПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="));
				КонецЕсли;
				
				Если НастройкиДоступностиЛичногоКабинетаЕНС.Источник = "FNS" Тогда
					ОписаниеИсточникаФакт = НСтр("ru = 'Технические работы на стороне ФНС';
												|en = 'Технические работы на стороне ФНС'");
				Иначе
					ОписаниеИсточникаФакт = НСтр("ru = 'Ведутся технические работы';
												|en = 'Ведутся технические работы'");
				КонецЕсли;
			Иначе
				ШаблонОписанияФакт = НСтр("ru = '%1 перегружен. Повторите получение данных позже: %2%3';
											|en = '%1 перегружен. Повторите получение данных позже: %2%3'");
				ОписаниеВремени = НСтр("ru = ' после %1:%2 (МСК).';
										|en = ' после %1:%2 (МСК).'");
				ВремяЗавершения = СтрШаблон(ОписаниеВремени,
				Формат(Час(ДатаЗавершенияПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="),
				Формат(Минута(ДатаЗавершенияПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="));
				
				Если НастройкиДоступностиЛичногоКабинетаЕНС.Источник = "FNS" Тогда
					ОписаниеИсточникаФакт = НСтр("ru = 'Сервис ФНС';
												|en = 'Сервис ФНС'");
				Иначе
					ОписаниеИсточникаФакт = НСтр("ru = 'Сервис';
												|en = 'Сервис'");
				КонецЕсли;
			КонецЕсли;
			
			ЗаголовокТехническиеРаботыФакт = СтрШаблон(ШаблонОписанияФакт, ОписаниеИсточникаФакт, Формат(ДатаЗавершенияПоМоскве, "ДЛФ=DD"), ВремяЗавершения);
			Элементы.ТекстДоступностьСервиса.Заголовок = ЗаголовокТехническиеРаботыФакт;
			Элементы.КартинкаДоступностьСервисаЗакрытьБаннер.Видимость = Ложь;
			
			ДатаЗавершенияРегламентныхРабот = МестноеВремя(ДатаЗавершения, ЧасовойПоясСеанса());
			
			// Если работы более 24 ч., то блокируется обновление
			ОбновлениеДанныхДоступно = НачалоДня(ДатаЗавершенияРегламентныхРабот) <= НачалоДня(ТекущаяДатаСеанса()); 
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиПлановойДоступностиЛичногоКабинетаЕНС) Тогда
		
		ПричинаБлокировки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиПлановойДоступностиЛичногоКабинетаЕНС, "Причина", 0);
		Если Не ЗначениеЗаполнено(ПричинаБлокировки) Тогда
			
			ВремяЗавершения = "";
			
			УниверсальнаяТекущаяДата = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
			ДатаНачала               = НастройкиПлановойДоступностиЛичногоКабинетаЕНС.ДатаНачала;
			ДатаЗавершения           = НастройкиПлановойДоступностиЛичногоКабинетаЕНС.ДатаЗавершения;
			
			Если ДатаНачала > УниверсальнаяТекущаяДата // дата в будущем
				И ДатаНачала - УниверсальнаяТекущаяДата <= 7 * 86400 // не ранее чем за  7 дней
				И НачалоДня(ДатаНачала) <> НачалоДня(УниверсальнаяТекущаяДата) Тогда // не в текущую дату
			
				
				ЦелодневнаяНедоступность = ДатаЗавершения = НачалоДня(ДатаЗавершения) Или ДатаЗавершения = КонецДня(ДатаЗавершения);
				Если ЦелодневнаяНедоступность Тогда
					ДатаЗавершения = ДатаЗавершения + 86400;
				КонецЕсли;
				
				ЗапланированаНедоступностьСервиса = УниверсальнаяТекущаяДата <= ДатаНачала;
				
				ШаблонОписанияПлан = НСтр("ru = '%1. Сервис будет недоступен %2';
											|en = '%1. Сервис будет недоступен %2'");
				
				ДатаНачалаПоМоскве     = МестноеВремя(ДатаНачала, "GMT+3");
				ДатаЗавершенияПоМоскве = МестноеВремя(ДатаЗавершения, "GMT+3");
				ЦелодневнаяНедоступностьПоМоскве = ДатаЗавершенияПоМоскве = НачалоДня(ДатаЗавершенияПоМоскве) Или ДатаЗавершенияПоМоскве = КонецДня(ДатаЗавершенияПоМоскве);
				
				Если НастройкиПлановойДоступностиЛичногоКабинетаЕНС.Источник = "FNS" Тогда
					ОписаниеИсточникаПлан = НСтр("ru = 'Запланированы технические работы на стороне ФНС';
												|en = 'Запланированы технические работы на стороне ФНС'");
				Иначе
					ОписаниеИсточникаПлан = НСтр("ru = 'Запланированы технические работы';
												|en = 'Запланированы технические работы'");
				КонецЕсли;
				
				Если НачалоДня(ДатаНачалаПоМоскве) = НачалоДня(ДатаЗавершенияПоМоскве) Тогда
					Если ЦелодневнаяНедоступность Тогда
						ЦелодневнаяНедоступность = ДатаНачала = НачалоДня(ДатаНачала) Или ДатаНачала = КонецДня(ДатаНачала);
					КонецЕсли;
					Если Не ЦелодневнаяНедоступность Тогда
						ОписаниеВремени = НСтр("ru = '%1:%2';
												|en = '%1:%2'");
						ВремяНачала = СтрШаблон(ОписаниеВремени,
							Формат(Час(ДатаНачалаПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="),
							Формат(Минута(ДатаНачалаПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="));
						ВремяЗавершения = СтрШаблон(ОписаниеВремени,
							Формат(Час(ДатаЗавершенияПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="),
							Формат(Минута(ДатаЗавершенияПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="));
						ОписаниеПериодаПлан = СтрШаблон(НСтр("ru = '%1 с %2 по %3 (МСК).';
															|en = '%1 с %2 по %3 (МСК).'"), Формат(ДатаНачалаПоМоскве, "ДЛФ=DD"), ВремяНачала, ВремяЗавершения);
					Иначе
						ОписаниеПериодаПлан = СтрШаблон(НСтр("ru = '%1';
															|en = '%1'"), Формат(ДатаНачалаПоМоскве, "ДЛФ=DD"));
					КонецЕсли;
				Иначе
					ОписаниеПериодаПлан = СтрШаблон(НСтр("ru = 'с %1 по %2';
														|en = 'с %1 по %2'"), Формат(ДатаНачалаПоМоскве, "ДЛФ=DD"), Формат(ДатаЗавершенияПоМоскве, "ДЛФ=DD"));
				КонецЕсли;
				ЗаголовокТехническиеРаботыПлан = СтрШаблон(ШаблонОписанияПлан, ОписаниеИсточникаПлан, ОписаниеПериодаПлан);
				Элементы.ТекстДоступностьСервиса.Заголовок = ЗаголовокТехническиеРаботыПлан;
				Элементы.КартинкаДоступностьСервисаЗакрытьБаннер.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СервисДоступен И ЗначениеЗаполнено(СостояниеИнтернетСоединения) Тогда
		Если Не СостояниеИнтернетСоединения.ИнтернетСоединениеДоступно Тогда
			КодОшибкиОбновлениеДанных = "ОшибкаМенеджераКриптографии";
			ОформитьВнутренниеОшибки(КодОшибкиОбновлениеДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьВнутренниеОшибки(КодОшибки)
	
	// Коды внутренних ошибок описаны в ЕдиныйНалоговыйСчетИнтеграция.ОбслуживаемыеКодыВнутреннихОшибок()
	// "НеНайденаМЧДВРеестре"
	// "ПревышеноКоличествоЗапросов"
	// "НеНайденаДоверенность"
	// "НеВыбранСертификат"
	// "НеНайденСертификат"
	// "НетПодписки1СОтчетность"
	// "ПопыткаПолучитьДанныеИПпоМЧД"
	// "ОшибкаИнтернета"
	// "НедействительныйКлючАвторизации"
	// "НедействительныйТокенАвторизации"
	// "ОшибкаМенеджераКриптографии"
	// "НеверныйЛогинИлиПароль"
	// "СертификатНеПрошелПроверкуФНС"
	// "ОшибкаАутентификации"
	// "НеУдалосьПодписатьСертификат"
	
	КодОшибкиОбновлениеДанных = КодОшибки;
	
	Если КодОшибки = "ОшибкаИнтернета" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Ошибка работы с Интернет.';
																		|en = 'Ошибка работы с Интернет.'");
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Для устранения проблемы обратитесь к администратору сети.';
																		|en = 'Для устранения проблемы обратитесь к администратору сети.'");
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "НеВыбранСертификат" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Не удалось найти сертификат 1С-Отчетности. Получение данных о состоянии ЕНС недоступно.';
																		|en = 'Не удалось найти сертификат 1С-Отчетности. Получение данных о состоянии ЕНС недоступно.'");
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Необходимо проверить наличие сертификата 1С-Отчетности. ';
																		|en = 'Необходимо проверить наличие сертификата 1С-Отчетности. '");
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "НеНайденСертификат" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Недоступен сертификат 1С-Отчетности. Обновление данных о состоянии ЕНС недоступно.';
																		|en = 'Недоступен сертификат 1С-Отчетности. Обновление данных о состоянии ЕНС недоступно.'");
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Установите сертификат 1С-Отчетности. ';
																		|en = 'Установите сертификат 1С-Отчетности. '");
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "НетПодписки1СОтчетность" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Обновление данных о состоянии ЕНС доступно при подключенном сервисе 1С-Отчетность.';
																		|en = 'Обновление данных о состоянии ЕНС доступно при подключенном сервисе 1С-Отчетность.'");
		ТекстВтораяСтрокаОшибкиРаботыСервиса = Новый Массив;
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Продлите ';
																						|en = 'Продлите '")));
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'договор.';
																						|en = 'договор.'"), , ЦветаСтиля.ЦветГиперссылкиБРО, , "ЗаявкаНаПодключение1СОтчетности"));
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = Новый ФорматированнаяСтрока(ТекстВтораяСтрокаОшибкиРаботыСервиса);
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "НеНайденаМЧДВРеестре" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Машиночитаемая доверенность не найдена в распределенном реестре ФНС. Обновление данных о состоянии ЕНС недоступно.';
																		|en = 'Машиночитаемая доверенность не найдена в распределенном реестре ФНС. Обновление данных о состоянии ЕНС недоступно.'");
		ТекстВтораяСтрокаОшибкиРаботыСервиса = Новый Массив;
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Создайте';
																						|en = 'Создайте'"), , ЦветаСтиля.ЦветГиперссылкиБРО, , "e1cib/list/Справочник.МашиночитаемыеДоверенности"));
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' доверенность и зарегистрируйте в распределенном реестре. ';
																						|en = ' доверенность и зарегистрируйте в распределенном реестре. '")));
		//ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее...'"), , ЦветаСтиля.ЦветГиперссылкиБРО, , "https://buh.ru/articles/kak-v-1s-oformit-mchd-dlya-podklyucheniya-k-lichnomu-kabinetu-fns-v-chasti-ens-.html"));
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = Новый ФорматированнаяСтрока(ТекстВтораяСтрокаОшибкиРаботыСервиса);
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "ПопыткаПолучитьДанныеИПпоМЧД" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Получение данных о состоянии ЕНС для индивидуального предпринимателя недоступно по доверенности (ограничение сервиса ФНС).';
																		|en = 'Получение данных о состоянии ЕНС для индивидуального предпринимателя недоступно по доверенности (ограничение сервиса ФНС).'");
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее...';
																									|en = 'Подробнее...'"), , ЦветаСтиля.ЦветГиперссылкиБРО, ,
			"https://buh.ru/articles/kak-v-1s-oformit-mchd-dlya-podklyucheniya-k-lichnomu-kabinetu-fns-v-chasti-ens-.html");
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "ПревышеноКоличествоЗапросов" Тогда
		
		ОбновлениеДанныхДоступно = Ложь;
		
		НастройкиДоступностиЛичногоКабинетаЕНС = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОтображенияЛичногоКабинетаЕНС",
		"СостояниеДоступностиСервисаЕНС");
		
		ШаблонОписанияПревышеноКоличествоЗапросов = НСтр("ru = 'Обновление данных о состоянии ЕНС для ИНН %1 временно недоступно.';
														|en = 'Обновление данных о состоянии ЕНС для ИНН %1 временно недоступно.'");
		ТекстПерваяСтрокаОшибкиРаботыСервиса =
			СтрШаблон(ШаблонОписанияПревышеноКоличествоЗапросов, ?(ЗначениеЗаполнено(СведенияОбОрганизации), СведенияОбОрганизации.ИНН, ""));
		ТекстВтораяСтрокаОшибкиРаботыСервиса = НСтр("ru = 'Попробуйте позже.';
													|en = 'Попробуйте позже.'");
		Если ЗначениеЗаполнено(НастройкиДоступностиЛичногоКабинетаЕНС) Тогда
		
			ПричинаБлокировки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиДоступностиЛичногоКабинетаЕНС, "Причина", 1);
			Если Не ЗначениеЗаполнено(ПричинаБлокировки) Тогда
				ШаблонКогдаОткроетсяДоступКОбновлению     = НСтр("ru = 'Превышено количество обращений к сервису, ФНС откроет доступ %1.';
																|en = 'Превышено количество обращений к сервису, ФНС откроет доступ %1.'");
				
				УниверсальнаяТекущаяДата = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
				ВремяДоступностиОтФНС    = НастройкиДоступностиЛичногоКабинетаЕНС.ДатаЗавершения;
				
				ОбновлениеДанныхДоступно = УниверсальнаяТекущаяДата > ВремяДоступностиОтФНС;
				ОбновлениеДанныхДоступноПоМоскве = МестноеВремя(ВремяДоступностиОтФНС, "GMT+3");
				
				ОписаниеВремени = НСтр("ru = '%1 в %2:%3 (МСК)';
										|en = '%1 в %2:%3 (МСК)'");
				ВремяЗавершения = СтрШаблон(ОписаниеВремени,
					Формат(ОбновлениеДанныхДоступноПоМоскве, "ДЛФ=ДД"),
					Формат(Час(ОбновлениеДанныхДоступноПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="),
					Формат(Минута(ОбновлениеДанныхДоступноПоМоскве), "ЧЦ=2; ЧН=00; ЧВН="));
				
				ТекстВтораяСтрокаОшибкиРаботыСервиса = СтрШаблон(ШаблонКогдаОткроетсяДоступКОбновлению, ВремяЗавершения);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = ТекстПерваяСтрокаОшибкиРаботыСервиса;
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = ТекстВтораяСтрокаОшибкиРаботыСервиса;
		
	ИначеЕсли КодОшибки = "НеНайденаДоверенность" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Машиночитаемая доверенность отсутствует. Обновление данных о состоянии ЕНС недоступно.';
																		|en = 'Машиночитаемая доверенность отсутствует. Обновление данных о состоянии ЕНС недоступно.'");
		ТекстВтораяСтрокаОшибкиРаботыСервиса = Новый Массив;
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Создайте';
																						|en = 'Создайте'"), , ЦветаСтиля.ЦветГиперссылкиБРО, , "e1cib/list/Справочник.МашиночитаемыеДоверенности"));
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' доверенность и зарегистрируйте в распределенном реестре. ';
																						|en = ' доверенность и зарегистрируйте в распределенном реестре. '")));
		//ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее...'"), , ЦветаСтиля.ЦвеЦветГиперссылкиБРО, , "https://buh.ru/articles/kak-v-1s-oformit-mchd-dlya-podklyucheniya-k-lichnomu-kabinetu-fns-v-chasti-ens-.html"));
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = Новый ФорматированнаяСтрока(ТекстВтораяСтрокаОшибкиРаботыСервиса);
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "ОшибкаМенеджераКриптографии" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = ТекстОбслуживаемойОшибкиРаботыСервиса;
		ТекстВтораяСтрокаОшибкиРаботыСервиса = Новый Массив;
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Установите';
																						|en = 'Установите'"), , ЦветаСтиля.ЦветГиперссылкиБРО, , "УстановитьМенеджерКриптографии"));
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' актуальный менеджер криптографии.';
																						|en = ' актуальный менеджер криптографии.'")));
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = Новый ФорматированнаяСтрока(ТекстВтораяСтрокаОшибкиРаботыСервиса);
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "НеУдалосьПодписатьСертификат" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = ТекстОбслуживаемойОшибкиРаботыСервиса;
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Попробуйте еще раз.';
																		|en = 'Попробуйте еще раз.'");
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Неверный логин или пароль интернет-поддержки';
																		|en = 'Неверный логин или пароль интернет-поддержки'");
		ТекстВтораяСтрокаОшибкиРаботыСервиса = Новый Массив;
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Установите корректный логин и пароль ';
																						|en = 'Установите корректный логин и пароль '")));
		ТекстВтораяСтрокаОшибкиРаботыСервиса.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'интернет-поддержки';
																						|en = 'интернет-поддержки'"), , ЦветаСтиля.ЦветГиперссылкиБРО, , "ИнтернетПоддержкаИСервисы"));
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = Новый ФорматированнаяСтрока(ТекстВтораяСтрокаОшибкиРаботыСервиса);
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "СертификатНеПрошелПроверкуФНС" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Сертификат электронной подписи не прошел проверку у ФНС';
																		|en = 'Сертификат электронной подписи не прошел проверку у ФНС'");
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Проверьте сертификат и попробуйте еще раз';
																		|en = 'Проверьте сертификат и попробуйте еще раз'");
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "ОшибкаАутентификации" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Произошла ошибка аутентификации на Портале 1С:ИТС';
																		|en = 'Произошла ошибка аутентификации на Портале 1С:ИТС'");
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Попробуйте обновить данные ЕНС через некоторое время';
																		|en = 'Попробуйте обновить данные ЕНС через некоторое время'");
		ОбновлениеДанныхДоступно = Ложь;
		
	ИначеЕсли КодОшибки = "НедействительныйКлючАвторизации"
		Или КодОшибки = "НедействительныйТокенАвторизации" Тогда
		
		Элементы.ТекстПерваяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Произошла ошибка авторизации в сервисе';
																		|en = 'Произошла ошибка авторизации в сервисе'");
		Элементы.ТекстВтораяСтрокаОшибкиРаботыСервиса.Заголовок = НСтр("ru = 'Перезапустите приложение и попробуйте еще раз';
																		|en = 'Перезапустите приложение и попробуйте еще раз'");
		ОбновлениеДанныхДоступно = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуСообщитьОбОшибке()
	
	Если ИспользоватьБИП Тогда
		ТекстВерсияПрограммы = 
			НСтр("ru = '
			|
			|Убедитесь, что вы используете последнюю версию программы и в настройках разрешено 
			|автоматически загружать и устанавливать исправления (патчи).';
			|en = '
			|
			|Убедитесь, что вы используете последнюю версию программы и в настройках разрешено 
			|автоматически загружать и устанавливать исправления (патчи).'");
	Иначе
		ТекстВерсияПрограммы = "";
	КонецЕсли;
	
	ТекстПодсказки = 
		НСтр("ru = '
		|Возможно, сервис перегружен.
		|Попробуйте обновить данные ЕНС через некоторое время или завтра.';
		|en = '
		|Возможно, сервис перегружен.
		|Попробуйте обновить данные ЕНС через некоторое время или завтра.'")
		+ ТекстВерсияПрограммы 
		+ НСтр("ru = '
		|
		|Полное обновление данных может занимать длительное время (несколько часов), не прерывайте его.
		|
		|Если ошибка при загрузке данных повторяется, отправьте сообщение в службу технической поддержки.';
		|en = '
		|
		|Полное обновление данных может занимать длительное время (несколько часов), не прерывайте его.
		|
		|Если ошибка при загрузке данных повторяется, отправьте сообщение в службу технической поддержки.'");
	
	Если ИспользоватьБИП Тогда
		Элементы.ДекорацияСообщитьОбОшибке.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		Элементы.ДекорацияСписокОшибок.РасширеннаяПодсказка.Заголовок = "";
	Иначе
		Элементы.ДекорацияСообщитьОбОшибке.РасширеннаяПодсказка.Заголовок = "";
		Элементы.ДекорацияСписокОшибок.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	КонецЕсли;
	
КонецПроцедуры

#Область Новости

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыНовости(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтотОбъект, Команда);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли