
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = Параметры.Организация;
	
	МожноОчиститьДанные = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДанныеЛичногоКабинетаЕНС);
	
	ПрочитатьСостояниеИнтеграции();
	
	Элементы.ГруппаЖурналирование.ТолькоПросмотр = Не ИнтеграцияПодключена;
	Элементы.ГруппаОчисткаДанных.Видимость = ИнтеграцияПодключена И МожноОчиститьДанные;
	
	ИспользоватьСервисДанныхЕНС = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьИспользоватьСервисДанныхЕНС(Объект.Организация);
	
	Если ИнтеграцияПодключена Тогда
		ПрочитатьДатуПоследнегоОбновления();
	КонецЕсли;
	
	Элементы.ОчиститьВсеДанные.Доступность = ЗначениеЗаполнено(ДатаПоследнегоОбновления) И МожноОчиститьДанные;
	Элементы.ИспользоватьЖурналирование.Доступность = МожноОчиститьДанные;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьЖурналированиеПриИзменении(Элемент)
	
	ИспользоватьЖурналированиеПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НаборыДанныхЕНС(Команда)
	
	ОткрытьФорму("Обработка.ЕдиныйНалоговыйСчетЛичныйКабинет.Форма.НаборыДанныхЕНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеЛичногоКабинета(Команда)
	
	Если ЗначениеЗаполнено(ДатаПоследнегоОбновления) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьДанныеПослеПолученияОтвета", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Будут удалены ранее загруженные данные ЕНС.
			|Продолжить?';
			|en = 'Будут удалены ранее загруженные данные ЕНС.
			|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьСостояниеИнтеграции()
	
	СтруктураПараметров = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьСостяниеПодключения(Объект.Организация);
	
	Если Не НастройкиЖурналированияКорректны(СтруктураПараметров) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.СостоянияПодключенияЕНС.ОтключитьЖурналирование(Объект.Организация);
		УстановитьПривилегированныйРежим(Ложь);
		СтруктураПараметров = РегистрыСведений.СостоянияПодключенияЕНС.ПолучитьСостяниеПодключения(Объект.Организация);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеИнтеграции()
	
	СтруктураПараметров = РегистрыСведений.СостоянияПодключенияЕНС.СтруктураПараметровСостоянияПодключения();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	РегистрыСведений.СостоянияПодключенияЕНС.УстановитьСостояниеПодключения(Объект.Организация, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьЖурналированиеПриИзмененииНаСервере()
	
	УстановитьПериодЖурналирования(ИспользоватьЖурналирование);
	УстановитьСостояниеИнтеграции();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодЖурналирования(Использовать)
	
	Если Не Использовать Тогда
		ПредельнаяДатаЖурналирования = Дата(1, 1, 1);
	Иначе
		ПредельнаяДатаЖурналирования = ПредельнаяДатаЖурналирования();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредельнаяДатаЖурналирования()
	
	ТекущаяДатаСеансаПользователя = ТекущаяДатаСеанса();
	ПредельнаяДата = КонецДня(ТекущаяДатаСеансаПользователя + 86400);
	Возврат ПредельнаяДата;
	
КонецФункции

&НаСервере
Функция НастройкиЖурналированияКорректны(СтруктураПараметров)
	
	НастройкиЖурналированияКорректны = Истина;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПредельнаяДатаЖурналирования)
		И Не СтруктураПараметров.ИспользоватьЖурналирование Тогда
		НастройкиЖурналированияКорректны = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметров.ПредельнаяДатаЖурналирования)
		И СтруктураПараметров.ИспользоватьЖурналирование Тогда
		НастройкиЖурналированияКорректны = Ложь;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПредельнаяДатаЖурналирования)
		И СтруктураПараметров.ИспользоватьЖурналирование Тогда
		
		ПредельнаяДата = ПредельнаяДатаЖурналирования();
		НастройкиЖурналированияКорректны =
			КонецДня(СтруктураПараметров.ПредельнаяДатаЖурналирования) = ПредельнаяДата - 86400
			Или КонецДня(СтруктураПараметров.ПредельнаяДатаЖурналирования) = ПредельнаяДата;
		
	КонецЕсли;
		
	Возврат НастройкиЖурналированияКорректны;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДатуПоследнегоОбновления()
	
	ДатаПоследнегоОбновления = РегистрыСведений.ПериодыОбновленияДанныхЕНС.ПолучитьДатуПоследнегоОбновления(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуПоследнегоОбновления()
	
	НаборЗаписей = РегистрыСведений.ПериодыОбновленияДанныхЕНС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	ОчиститьДанныеПослеДатыЗагрузки();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПослеДатыЗагрузки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДанныеЛичногоКабинетаЕНС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ЖурналЗагрузкиЕНС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПослеПолученияОтвета(Результат, ВходящийКонтекст) Экспорт
		
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяДата = Дата(1,1,1);
	Если ДатаПоследнегоОбновления > ПустаяДата Тогда
		ДатаПоследнегоОбновления = ПустаяДата;
		УстановитьДатуПоследнегоОбновления();
		Элементы.ОчиститьВсеДанные.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
