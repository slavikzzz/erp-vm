
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПодсказкиЭлементовПоУмолчанию();

	УчетнаяЗапись = Справочники.УчетныеЗаписиМаркетплейсов.ОсновнаяУчетнаяЗапись(
		ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon"));
	ОбновитьСписокУчетныхЗаписей(УчетнаяЗапись);
	ЗаполнитьДанныеПоТорговойПлощадке();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ ПодключениеКСервисуВыполнено Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуПодключенияКСервису", 0.1, Истина);
	КонецЕсли;

	ОбновитьСчетчики();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_УчетныеЗаписиМаркетплейсов" И Параметр = УчетнаяЗапись Тогда
		ЗаполнитьДанныеПоТорговойПлощадке();

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
	  И (Источник = "ИспользованиеСоглашенийСКлиентами"
			Или Источник = "ИспользоватьКомиссиюПриПродажах"
			Или Источник = "ИспользоватьЗаказыКлиентов"
			Или Источник = "ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
		ОчиститьСообщения();
		ЗаполнитьДанныеПоТорговойПлощадке();

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
	  И Источник = "ИспользоватьНесколькоСкладов" Тогда
		ПолучитьЗначенияФункциональныхОпций();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)

	УчетнаяЗаписьИзНастроек = Настройки.Получить("УчетнаяЗапись");
	Если УчетнаяЗаписьИзНастроек <> Неопределено 
	  И Не ОбщегоНазначения.СсылкаСуществует(УчетнаяЗаписьИзНастроек) Тогда
		Настройки.Удалить("УчетнаяЗапись");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ЗаполнитьДанныеПоТорговойПлощадке();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)

	ОчиститьСообщения();

	ЗаполнитьДанныеПоТорговойПлощадке();

	ОбновитьСчетчики();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область УправлениеОсновнымиНастройками

&НаКлиенте
Процедура ОткрытьНастройкиОбменаДанными(Команда)

	ОчиститьСообщения();

	ПараметрыФормы = Новый Структура("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.НастройкиИнтеграции", ПараметрыФормы);
	Оповестить("ОткрытиеФормыНастроекОбменаOzon", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПубликациюТоваровНаТорговойПлощадке(Команда)

	ОчиститьСообщения();

	ПараметрыФормы = Новый Структура("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПубликацияТоваров", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрайсЛист(Команда)

	ОчиститьСообщения();

	ВидыЦенУчетныхЗаписейOzon = ВидыЦенУчетныхЗаписейOzon();
	Если ВидыЦенУчетныхЗаписейOzon.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В настройках синхронизации с маркетплейсом Ozon не указаны выгружаемые виды цен, а также не созданы виды цен для загрузки данных с маркетплейса Ozon.';
								|en = 'Ozon synchronization settings do not have price types to export and price types to import data from Ozon.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("ВидыЦен", ВидыЦенУчетныхЗаписейOzon);
	ОткрытьФорму("Обработка.ПрайсЛист.Форма.Форма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомандыФормы(Команда)

	ОчиститьСообщения();

	ЗаполнитьДанныеПоТорговойПлощадке();

	ОбновитьСчетчики();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуПринадлежностиТоваровСхемамРаботы(Команда)

	ОчиститьСообщения();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗапись);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.НастройкиПринадлежностиТоваровСхемамРаботы",
		ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область РазделПоставки

&НаКлиенте
Процедура ОткрытьДокументыПоставок(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАнализОстатковИПланированиеПоставокТоваров(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.УправлениеПродажамиНаOzon.Форма.ПланированиеПоставокНаСкладыТорговойПлощадки";

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗапись);

	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаПоставку(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению(Команда)

	ОчиститьСообщения();

	// В заголовке команды счетчик заполняется по алгоритму.
	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокАктыРасхождений(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.АктОРасхожденияхПослеОтгрузки.Форма.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаВозврат(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСпискаДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению(Команда)

	ОчиститьСообщения();

	// В заголовке команды счетчик заполняется по алгоритму.
	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладныхВозвратов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПоставкамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаявкуНаПоставку(Команда)

	ОчиститьСообщения();

	ПараметрыФормы = ИнтеграцияСМаркетплейсамиКлиент.ПараметрыФормыВыгрузкиЗагрузки(УчетнаяЗапись);

	ПараметрыФормы.ЗаголовокФормы          = НСтр("ru = 'Выгрузка заявки на поставку в файл';
													|en = 'Export the shipment request to a file'");

	ПараметрыФормы.ИмяОбъектаМетаданных    = "Обработка.УправлениеПродажамиНаOzon";
	ПараметрыФормы.ИмяТабличнойЧасти       = "ДанныеПоставок";
	ПараметрыФормы.ИмяМакетаСШаблоном      = "ПФ_MXL_ВыгрузкаВФайлЗаявкаНаПоставку";

	ПараметрыФормы.ЭтоЗагрузкаДанных       = Ложь;
	ПараметрыФормы.ВариантВыгрузкиЗагрузки = "ВнешнийФайл";

	ПараметрыФормы.СсылкаНаОбъект          = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
	ПараметрыФормы.СсылкаНаОбъектЗаголовок = НСтр("ru = 'Заявка на поставку';
													|en = 'Shipment request'");

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Организация", "ДанныеТорговойПлощадки.Организация"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Партнер",     "ДанныеТорговойПлощадки.Партнер"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Контрагент",  "ДанныеТорговойПлощадки.Контрагент"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Договор",     "ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки"));

	ПараметрыФормы.СсылкаНаОбъектПараметрыВыбора = ПараметрыВыбора;

	Подсказка =
		НСтр("ru = '	1. В личном кабинете Ozon в разделе ""FBO"" выбрать ""Заявки на поставку"".
					|	2. Использовать команду ""Создать заявку"" или открыть нужную заявку на поставку из списка ""Новые"".
					|	3. В открытой заявке перейти в раздел ""Товары"" с помощью команды ""Назад"", если документ позиционируется на другом разделе.
					|	4. Использовать команду ""Загрузить товары из XLS"", по которой в диалоге выбрать загружаемый файл, ранее сохраненный из учетной системы 1С.
					|	5. Проверить содержимое таблицы на соответствие выгруженным из учетной системы 1С данным или проанализировать выданные ошибки загрузки файла, исправить заявку в учетной системе 1С, повторно сохранить данные в файл и повторить действия с первого пункта.
					|	6. Подтвердить загрузку командой ""Добавить в заявку"".
					|	7. При необходимости скорректировать данные по товарам. В учетной системе 1С данные заявки на поставку будут скорректированы при загрузке поставок.
					|	8. Продолжить оформление заявки на поставку в соответствии с требуемыми шагами.
					|	9. После оформления заявки на поставку ее номер необходимо заполнить реквизит ""Номер по данным клиента"" в соответствующем документе учетной системы 1С.';
					|en = '	1. In your Ozon account, find the FBO section and click Shipment requests.
					|	2. Click Create request or open the required shipment request in the New list.
					|	3. In the request, go to the Goods section. Click Back if the document is located in another section.
					|	4. Click Import goods from XLS. In the dialog box, select a file previously saved from the 1C accounting system to import.
					|	5. Check if the table data complies with the data exported from the 1C accounting system or analyze the file import errors, correct the request in the 1C accounting system, save the data to the file again, and repeat the actions from step 1.
					|	6. Click Add to request.
					|	7. If you want to adjust goods data, in the 1C accounting system, the shipment request data is adjusted when importing shipments.
					|	8. Follow the required steps to continue registering the shipment request.
					|	9. Once you register the shipment request, enter its number in the Number according to customer data attribute of the relevant 1C accounting system document.'")
					+ Символы.ПС + "	<a href=""https://seller-edu.ozon.ru/fbo/process-details""> %1</a>
					|
					|	<a href=""https://seller.ozon.ru/app/supply/orders?filter=New""> %2</a>";

	Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Подсказка,
		НСтр("ru = 'Подробнее о заявках на поставки в базе знаний';
			|en = 'For more information on shipment requests, go to the knowledge base'"),
		НСтр("ru = 'Перейти в раздел документов ""Новые""';
			|en = 'Go to the New document section'"));

	ПараметрыФормы.ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл = Подсказка;

	Пояснение = НСтр("ru = 'В сформированном файле необходимо проверить заполнение колонок ""Артикул"" и ""Количество"".';
					|en = 'Check if the Item ID and Number columns are filled in the created file.'")
		+ Символы.ПС + НСТР("ru = 'В выгружаемом документе необходимо проверить и заполнить реквизит ""Номер по данным клиента"" после оформления заявки на поставку в личном кабинете Ozon.';
							|en = 'Once you registered the shipment request in your Ozon account, check and fill the Number according to customer data attribute in the document to export.'");
	ПараметрыФормы.ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл = Пояснение;

	ИнтеграцияСМаркетплейсамиКлиент.ОткрытьФормуВыгрузкиЗагрузкиДанных(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоставки(Команда)

	ОчиститьСообщения();

	ПараметрыФормы = ИнтеграцияСМаркетплейсамиКлиент.ПараметрыФормыВыгрузкиЗагрузки(УчетнаяЗапись);

	ПараметрыФормы.ЗаголовокФормы               = НСтр("ru = 'Загрузка заявки на поставку и поставок';
														|en = 'Import a shipment request and shipments'");

	ПараметрыФормы.ИмяОбъектаМетаданных         = "Обработка.УправлениеПродажамиНаOzon";
	ПараметрыФормы.ИмяТабличнойЧасти            = "ДанныеПоставок";
	ПараметрыФормы.ИмяМакетаСШаблоном           = "ЗагрузкаИзФайлаЗаявкаНаПоставку";

	ПараметрыФормы.ЭтоЗагрузкаДанных            = Истина;
	ПараметрыФормы.ВариантВыгрузкиЗагрузки      = "ВнешнийФайл";
	ПараметрыФормы.ЗагружатьНезаполненныеСтроки = Истина;

	ПараметрыФормы.СсылкаНаОбъект               = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
	ПараметрыФормы.СсылкаНаОбъектЗаголовок      = НСтр("ru = 'Заявка на поставку';
														|en = 'Shipment request'");

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Организация", "ДанныеТорговойПлощадки.Организация"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Партнер",     "ДанныеТорговойПлощадки.Партнер"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Контрагент",  "ДанныеТорговойПлощадки.Контрагент"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Договор",     "ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки"));

	ПараметрыФормы.СсылкаНаОбъектПараметрыВыбора = ПараметрыВыбора;
	ПараметрыФормы.СсылкаНаОбъектЗаписыватьЗагружаемыйФайл = Истина;

	Подсказка =
		НСтр("ru = '	1. В личном кабинете Ozon в разделе ""FBO"" выбрать ""Заявки на поставку"".
					|	2. Открыть нужную заявку на поставку из списка ""Подготовка к поставкам"".
					|	3. В открытой заявке перейти в раздел ""Товары"".
					|	4. Использовать команду ""Скачать расширенный XLS"", по которой будет сохранен файл с данными по поставкам в каталог скачиваемых файлов, настроенный по умолчанию для используемого браузера.';
					|en = '	1. In the personal Ozon account, find the FBO section and select Shipment requests.
					|	2. In the Shipment preparation list, open the required shipment request.
					|	3. In the opened request, go to the Goods section.
					|	4. Click Download extended XLS to save the shipment data file to the download file directory set up by default for the used browser.'")
					+ Символы.ПС + "	<a href=""https://seller-edu.ozon.ru/fbo/process-details""> %1</a>
					|
					|	<a href=""https://seller.ozon.ru/app/supply/orders?filter=SupplyPreparation""> %2</a>";

	Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Подсказка,
		НСтр("ru = 'Подробнее о заявках на поставки в базе знаний';
			|en = 'For more information on shipment requests, go to the knowledge base'"),
		НСтр("ru = 'Перейти в раздел документов ""Подготовка к поставкам""';
			|en = 'Go to the Shipment preparation document section'"));

	ПараметрыФормы.ПодсказкаВариантаЗагрузкиИзМакета          = Подсказка;
	ПараметрыФормы.ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл = Подсказка;

	ПараметрыФормы.ИмяФормыСопоставленияДанных =
		"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки";
	ПараметрыФормы.ПодсказкаОткрытияФормыСопоставленияДанных =
		НСтр("ru = 'Открывает форму импорта товаров с торговой площадки';
			|en = 'Opens the form for importing trading platform goods'");

	ПараметрыФормы.ИмяФормыДополнительныхНастроек =
		"Обработка.УправлениеПродажамиНаOzon.Форма.ВыгрузкаЗагрузкаДанныхЗаполнениеЗначенийДополнительныхНастроек";

	ЗаголовокФормыПараметров = ?(ЗначенияФункциональныхОпций.ИспользоватьНесколькоСкладов,
								 НСтр("ru = 'Указать номер заявки на поставку и склад отгрузки';
										|en = 'Specify the shipment request number and origin warehouse'"),
								 НСтр("ru = 'Указать номер заявки на поставку';
										|en = 'Specify the shipment request number'"));
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.УчетнаяЗапись = УчетнаяЗапись;
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.ЗаголовокФормы = ЗаголовокФормыПараметров;
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.ВариантНастроек = "ЗагрузкаЗаявкиНаПоставку";

	ИнтеграцияСМаркетплейсамиКлиент.ОткрытьФормуВыгрузкиЗагрузкиДанных(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаявкуНаВозврат(Команда)

	ОчиститьСообщения();

	ПараметрыФормы = ИнтеграцияСМаркетплейсамиКлиент.ПараметрыФормыВыгрузкиЗагрузки(УчетнаяЗапись);

	ПараметрыФормы.ЗаголовокФормы          = НСтр("ru = 'Выгрузка заявки на возврат товара со стока';
													|en = 'Export the request for return of goods from stock'");

	ПараметрыФормы.ИмяОбъектаМетаданных    = "Обработка.УправлениеПродажамиНаOzon";
	ПараметрыФормы.ИмяТабличнойЧасти       = "ДанныеЗаявокНаВозврат";
	ПараметрыФормы.ИмяМакетаСШаблоном      = "ПФ_MXL_ВыгрузкаВФайлЗаявкаНаВозврат";

	ПараметрыФормы.ЭтоЗагрузкаДанных       = Ложь;
	ПараметрыФормы.СсылкаНаОбъект          = ПредопределенноеЗначение("Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка");
	ПараметрыФормы.СсылкаНаОбъектЗаголовок = НСтр("ru = 'Заявка на возврат';
													|en = 'Return request'");

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Организация", "ДанныеТорговойПлощадки.Организация"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Партнер",     "ДанныеТорговойПлощадки.Партнер"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Контрагент",  "ДанныеТорговойПлощадки.Контрагент"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Договор",     "ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки"));

	ПараметрыФормы.СсылкаНаОбъектПараметрыВыбора = ПараметрыВыбора;

	Подсказка =
		НСтр("ru = '	1. В личном кабинете в разделе ""FBO"" в подразделе ""Вывоз и утилизация"" перейти к списку документов ""Со стока"".
					|	2. Используя команду ""Создать заявку"", выберите тип товаров на вывоз ""Со стока"".
					|	3. Выберите склад, откуда нужно вывезти товары.
					|	4. Загрузите файл, сохраненный из учетной системы 1С.
					|	Важно, чтобы в файле была заполнена колонка ""Идентификатор заявки на поставку"".
					|	Данные по этой колонке берутся из файла с остатками на складе Ozon, скачанного в личном кабинете, и используются для создания заявки на поставку в учетной системе 1С путем загрузки из файла.
					|	Файл с остатками при загрузке заявки на возврат из файла сохраняется в присоединенные файлы документа.';
					|en = '	1. In the personal account, go to FBO. Then click Removal and disposal and go to the From stock document list.
					|	2. Click Create request and select an item type to remove From stock.
					|	3. Select a warehouse the goods will be removed from.
					|	4. Import the file saved from the 1C accounting system.
					|	Make sure that the Shipment request ID column is filled in the file.
					|	The column is filled with the data from the Ozon warehouse balance file downloaded in the personal account. This data is used to create a shipment request in the 1C accounting system.
					|	The stock balance file is saved to the document attachments when importing the request for return from file.'")
					+ Символы.ПС + "	<a href=""https://seller-edu.ozon.ru/fbo/warehouses/zabrat-tovary-so-sklada""> %1</a>
					|
					|	<a href=""https://seller.ozon.ru/app/supply/returns?tab=Stock""> %2</a>";

	Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Подсказка,
		НСтр("ru = 'Подробнее о возврате товара со склада Ozon';
			|en = 'More information on the return of goods from the Ozon warehouse'"),
		НСтр("ru = 'Перейти к созданию заявки на возврат товара со стока';
			|en = 'Go to creating a request for return of goods from stock'"));

	Пояснение =
		НСтр("ru = 'В выгружаемом документе необходимо обеспечить наличие присоединенного файла с остатками на складе Ozon. Из этого файла берется информация о договоре, складе и об идентификаторах заявок на поставку.';
			|en = 'Make sure that the document to export has an attachment with the Ozon warehouse stock balance. The file contains the information on the contract, warehouse, and shipment request IDs.'");

	ПараметрыФормы.ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл = Подсказка;
	ПараметрыФормы.ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл = Пояснение;

	ПараметрыФормы.ИмяФормыДополнительныхНастроек =
		"Обработка.УправлениеПродажамиНаOzon.Форма.ВыгрузкаЗагрузкаДанныхЗаполнениеЗначенийДополнительныхНастроек";

	ЗаголовокФормыПараметров = НСтр("ru = 'Выбрать файл с остатками на складе Ozon';
									|en = 'Select the file with Ozon warehouse balance'");
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.УчетнаяЗапись = УчетнаяЗапись;
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.ЗаголовокФормы = ЗаголовокФормыПараметров;
	ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.ВариантНастроек = "ВыгрузкаЗаявкиНаВозврат";

	ИнтеграцияСМаркетплейсамиКлиент.ОткрытьФормуВыгрузкиЗагрузкиДанных(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаявкуНаВозврат(Команда)

	ОчиститьСообщения();

	ПараметрыФормы = ИнтеграцияСМаркетплейсамиКлиент.ПараметрыФормыВыгрузкиЗагрузки(УчетнаяЗапись);

	ПараметрыФормы.ЗаголовокФормы          = НСтр("ru = 'Загрузка заявки на возврат товара со стока';
													|en = 'Import the request for return of goods from stock'");

	ПараметрыФормы.ИмяОбъектаМетаданных    = "Обработка.УправлениеПродажамиНаOzon";
	ПараметрыФормы.ИмяТабличнойЧасти       = "ДанныеЗаявокНаВозврат";
	ПараметрыФормы.ИмяМакетаСШаблоном      = "ЗагрузкаИзФайлаЗаявкаНаВозврат";

	ПараметрыФормы.ЭтоЗагрузкаДанных       = Истина;
	ПараметрыФормы.ВариантВыгрузкиЗагрузки = "ВнешнийФайл";

	ПараметрыФормы.СсылкаНаОбъект          = ПредопределенноеЗначение("Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка");
	ПараметрыФормы.СсылкаНаОбъектЗаголовок = НСтр("ru = 'Заявка на возврат';
													|en = 'Return request'");

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Организация", "ДанныеТорговойПлощадки.Организация"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Партнер",     "ДанныеТорговойПлощадки.Партнер"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Контрагент",  "ДанныеТорговойПлощадки.Контрагент"));
	ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным",
		"Договор",     "ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки"));

	ПараметрыФормы.СсылкаНаОбъектПараметрыВыбора = ПараметрыВыбора;
	ПараметрыФормы.СсылкаНаОбъектЗаписыватьЗагружаемыйФайл = Истина;

	Подсказка =
		НСтр("ru = '	1. В личном кабинете в разделе ""FBO"" в подразделе ""Вывоз и утилизация"" перейти к списку документов ""Со стока"".
					|	2. Используя команду ""Скачать остатки"", выбрать нужный склад и тип стока, после чего использовать команду ""Сформировать файл"".';
					|en = '	1. In your personal account, go to FBO. Then click Removal and disposal and go to the From stock document list.
					|	2. Click Download balance. Select the required warehouse and stock type. Click Generate file.'")
					+ Символы.ПС + "	<a href=""https://seller-edu.ozon.ru/fbo/warehouses/zabrat-tovary-so-sklada""> %1</a>
					|
					|	<a href=""https://seller.ozon.ru/app/supply/returns?tab=Stock""> %2</a>";

	Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Подсказка,
		НСтр("ru = 'Подробнее о возврате товара со склада Ozon';
			|en = 'More information on the return of goods from the Ozon warehouse'"),
		НСтр("ru = 'Перейти к скачиванию остатков для создания заявки на возврат товара со стока';
			|en = 'Go to downloading the balance to create a request for return of goods from stock'"));

	Пояснение = Символы.ПС
		+ НСтр("ru = 'В процессе загрузки необходимо заполнить колонку ""Количество на вывоз"", данные из которой будут загружены в документ учетной системы 1С. Строки с пустым значением в указанной колонке будут пропущены при заполнении документа.
			|Загружаемый файл будет сохранен в присоединенные файлы документа для получения информации об идентификаторе заявки на поставку в случае выполнения обратной выгрузки заявки на возврат в файл.';
			|en = 'Fill the Quantity to ship column when importing. The column data will be imported to the 1C accounting system document. If the column rows are empty, they will be skipped when filling the document.
			|If the return request is exported back to the file, the file to import will be saved to the document attachments to receive the shipment request ID.'");

	ПараметрыФормы.ПодсказкаВариантаЗагрузкиИзМакета          = Подсказка;
	ПараметрыФормы.ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл = Подсказка;
	ПараметрыФормы.ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл = Пояснение;

	ПараметрыФормы.ИмяФормыСопоставленияДанных =
		"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки";
	ПараметрыФормы.ПодсказкаОткрытияФормыСопоставленияДанных =
		НСтр("ru = 'Открывает форму импорта товаров с торговой площадки';
			|en = 'Opens the form for importing trading platform goods'");

	Если ЗначенияФункциональныхОпций.ИспользоватьНесколькоСкладов Тогда
		ПараметрыФормы.ИмяФормыДополнительныхНастроек =
			"Обработка.УправлениеПродажамиНаOzon.Форма.ВыгрузкаЗагрузкаДанныхЗаполнениеЗначенийДополнительныхНастроек";
		ЗаголовокФормыПараметров = НСтр("ru = 'Указать склад приемки';
										|en = 'Specify receiving warehouse'");
		ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.УчетнаяЗапись = УчетнаяЗапись;
		ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.ЗаголовокФормы = ЗаголовокФормыПараметров;
		ПараметрыФормы.ПараметрыФормыДополнительныхНастроек.ВариантНастроек = "ЗагрузкаЗаявкиНаВозврат";
	КонецЕсли;

	ИнтеграцияСМаркетплейсамиКлиент.ОткрытьФормуВыгрузкиЗагрузкиДанных(ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область РазделПродажи

&НаКлиенте
Процедура ОткрытьДокументыПродаж(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажССобственныхСкладовВсеЗаказы(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажССобственныхСкладовКОформлению(Команда)

	ОчиститьСообщения();

	// В заголовке команды счетчик заполняется по алгоритму.
	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажСоСкладовТорговойПлощадкиЗаказы(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.УправлениеПродажамиНаOzon.Форма.СписокЗаказовFBO";

	ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заказы клиентов <%1>';
			|en = 'Sales orders'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьТорговойПлощадки", УчетнаяЗапись);
	ПараметрыФормы.Вставить("ЗаголовокФормы",                ЗаголовокФормы);

	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажЗаявкиНаВозврат(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСпискаДокументов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажЗаявкиНаВозвратКОформлению(Команда)

	ОчиститьСообщения();

	// В заголовке команды счетчик заполняется по алгоритму.
	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладныхВозвратов";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПродажКОформлениюОтчетов(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовОтчетыКомиссионеров.Форма.КОформлениюОтчетовКомиссионеров";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "РаботаСПродажамиOzon")

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОтчетыОРеализациях(Команда)

	ОчиститьСообщения();

	ПараметрыФормы = ИнтеграцияСМаркетплейсамиКлиент.ПараметрыФормыВыгрузкиЗагрузки(УчетнаяЗапись);

	Если ДанныеТорговойПлощадки.ПродажиРазделяютсяПоДоговорам Тогда
		ПараметрыФормы.ЗаголовокФормы = НСтр("ru = 'Загрузка позаказного отчета о реализованных товарах';
											|en = 'Import sales report by orders'");
	Иначе
		ПараметрыФормы.ЗаголовокФормы = НСтр("ru = 'Загрузка отчета о реализованных товарах';
											|en = 'Import sold goods report'");
	КонецЕсли;

	ПараметрыФормы.ИмяОбъектаМетаданных         = "Обработка.УправлениеПродажамиНаOzon";
	ПараметрыФормы.ИмяТабличнойЧасти            = "ДанныеОРеализованныхТоварах";
	ПараметрыФормы.ИмяМакетаСШаблоном           = "ЗагрузкаИзФайлаПозаказныйОтчетОРеализованныхТоварах";

	ПараметрыФормы.ЭтоЗагрузкаДанных            = Истина;
	ПараметрыФормы.ВариантВыгрузкиЗагрузки      = "ВнешнийФайл";
	ПараметрыФормы.ЗагружатьНезаполненныеСтроки = Истина;
	ПараметрыФормы.ДоступныИнтеграционныеМетоды = Не ДанныеТорговойПлощадки.ПродажиРазделяютсяПоДоговорам;

	Если ДанныеТорговойПлощадки.ПродажиРазделяютсяПоДоговорам Тогда
		Подсказка =
			НСтр("ru = '	1. В личном кабинете Ozon в разделе ""Финансы"" в подразделе ""Документы"" активизировать список документов ""Отчеты о реализации"".
						|	2. В списке документов ""Отчеты о реализации"" найти документ ""Позаказный отчет о реализации"" за нужный период.
						|	3. Для выбранного документа нажать пиктограмму загрузки или установить пометку и выполнить команду ""Скачать"".';
						|en = '	1. In your Ozon account, go to Finances. In the Documents subsection, activate the Sales reports document list.
						|	2. In the list, find the Sales report by orders document for the required period.
						|	3. Click the import icon for the selected document or select the checkbox and click Download.'")
						+ Символы.ПС + "	<a href=""https://seller-edu.ozon.ru/finances-documents/documents/otchet-o-realizacii-tovarov-zakazy""> %1</a>
						|
						|	<a href=""https://seller.ozon.ru/app/finances/documents?type=realizationReports""> %2</a>";

		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Подсказка,
			НСтр("ru = 'Подробнее об отчете в базе знаний';
				|en = 'For more information on the report, go to the knowledge base'"),
			НСтр("ru = 'Перейти в раздел документов ""Отчеты о реализации""';
				|en = 'Go to the Sales reports document section'"));
	Иначе
		Подсказка =
			НСтр("ru = '	1. В личном кабинете Ozon в разделе ""Финансы"" в подразделе ""Документы"" активизировать список документов ""Отчеты о реализации"".
						|	2. В списке документов ""Отчеты о реализации"" найти документ ""Отчет о реализации товара"" за нужный период.
						|	3. Для выбранного документа нажать пиктограмму загрузки или установить пометку и выполнить команду ""Скачать"".';
						|en = '	1. In your Ozon account, go to Finances. In the Documents subsection, activate the Sales reports document list.
						|	2. In the list, find the Goods sales report document for the required period.
						|	3. Click the import icon for the selected document or select the checkbox and click Download.'")
						+ Символы.ПС + "	<a href=""https://seller-edu.ozon.ru/finances-documents/documents/otchet-o-realizacii-tovarov""> %1</a>
						|
						|	<a href=""https://seller.ozon.ru/app/finances/documents?type=realizationReports""> %2</a>";

		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Подсказка,
			НСтр("ru = 'Подробнее о позаказном отчете в базе знаний';
				|en = 'For more information on a report by orders, go to the knowledge base'"),
			НСтр("ru = 'Перейти в раздел документов ""Отчеты о реализации""';
				|en = 'Go to the Sales reports document section'"));

		ПояснениеAPI = Символы.ПС
			+ НСтр("ru = 'Данные для загрузки могут отсутствовать, если выбран период, за который еще не сформирован отчетный документ, или торговая площадка не возвращает данные из-за изменений в интеграционных методах.';
					|en = 'There might be no data for import as a reporting document is not created for the selected period yet or the trading platform does not return data due to some changes in integration methods.'");
		ПараметрыФормы.ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI = ПояснениеAPI;
	КонецЕсли;

	ПараметрыФормы.ПодсказкаВариантаЗагрузкиИзМакета          = Подсказка;
	ПараметрыФормы.ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл = Подсказка;

	ПараметрыФормы.ВидПериода   = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"); 
	ПараметрыФормы.ДатаВПериоде = ДобавитьМесяц(ОбщегоНазначенияКлиент.ДатаСеанса(), -1);

	ПараметрыФормы.ИмяФормыСопоставленияДанных =
		"Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки";
	ПараметрыФормы.ПодсказкаОткрытияФормыСопоставленияДанных =
		НСтр("ru = 'Открывает форму импорта товаров с торговой площадки';
			|en = 'Opens the form for importing trading platform goods'");

	ИнтеграцияСМаркетплейсамиКлиент.ОткрытьФормуВыгрузкиЗагрузкиДанных(ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область РазделВзаиморасчеты

&НаКлиенте
Процедура ОткрытьДокументыПриобретенияУслуг(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ПриобретениеУслугПрочихАктивов.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "ВзаиморасчетыOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыВзаимозачетаЗадолженности(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.ВзаимозачетЗадолженности.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "ВзаиморасчетыOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыПлатежей(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "ВзаиморасчетыOzon")

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыСверкиВзаиморасчетов(Команда)

	ОчиститьСообщения();

	ИмяОткрываемойФормы = "Документ.СверкаВзаиморасчетов.ФормаСписка";
	ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, "ВзаиморасчетыOzon")

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьЗначенияФункциональныхОпций()

	ЗначенияФункциональныхОпций = Новый Структура;
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьЗаказыКлиентов",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьКомиссиюПриПродажах",
		ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьСоглашенияСКлиентами",
		ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьНесколькоСкладов",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"));

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокУчетныхЗаписей(УчетнаяЗаписьПоУмолчанию = Неопределено)

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьПоУмолчанию) Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиМаркетплейсов.ОсновнаяУчетнаяЗапись(
			ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon"));
	КонецЕсли;

	ПодключениеКСервисуВыполнено = ЗначениеЗаполнено(УчетнаяЗапись);
	Если Не ПодключениеКСервисуВыполнено Тогда
		СписокНастроекПодключенияКСервису = ИнтеграцияСМаркетплейсомOzonСервер.СписокНастроекПодключенияКСервису();
		ПодключениеКСервисуВыполнено = (СписокНастроекПодключенияКСервису.Количество() > 0);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоТорговойПлощадке()

	ПолучитьЗначенияФункциональныхОпций();

	// Заполнить данные из настроек интеграции.
	РеквизитыУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись, Истина);

	ДанныеТорговойПлощадки = НовыйДанныеТорговойПлощадки();
	ЗаполнитьЗначенияСвойств(ДанныеТорговойПлощадки, РеквизитыУчетнойЗаписи);
	ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы = 
		Строка(РеквизитыУчетнойЗаписи.ИдентификаторКлиента) + ", " + Строка(РеквизитыУчетнойЗаписи.Партнер);
	ДанныеТорговойПлощадки.УникальныйИдентификатор = УчетнаяЗапись.УникальныйИдентификатор();

	Заголовок = НСтр("ru = 'Управление продажами на Ozon';
					|en = 'Sales management on Ozon'");
	Если Не УчетнаяЗапись.Пустая() Тогда
		Заголовок = Заголовок + " - " + УчетнаяЗапись;
	КонецЕсли;

	УстановитьВидимостьДоступностьЭлементов();
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеТорговойПлощадки()

	ДанныеТорговойПлощадки = Новый Структура;
	ДанныеТорговойПлощадки.Вставить("ИдентификаторКлиента",                      "");
	ДанныеТорговойПлощадки.Вставить("Организация",                               ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("Партнер",                                   ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("Контрагент",                                ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("Соглашение",                                ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("ДоговорПродажиЧерезСкладыТорговойПлощадки", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("ДоговорПродажиЧерезСкладыСобственные",      ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ДанныеТорговойПлощадки.Вставить("ПродажиРазделяютсяПоДоговорам",             Ложь);
	ДанныеТорговойПлощадки.Вставить("ПостфиксЗаголовкаФормы",                    "");
	ДанныеТорговойПлощадки.Вставить("УникальныйИдентификатор",                   Неопределено);
	ДанныеТорговойПлощадки.Вставить("ИдентификаторЗадания",                      Неопределено);

	Возврат ДанныеТорговойПлощадки;

КонецФункции

&НаСервере
Процедура ПодсказкиЭлементовПоУмолчанию()

	Для Каждого Команда Из Команды Цикл 
		ПодсказкиЭлементовПоУмолчанию.Добавить(Команда.Имя, Команда.Подсказка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()

	ДоступноИспользованиеПрайсЛиста          = ПравоДоступа("Использование", Метаданные.Обработки.ПрайсЛист);
	ДоступноИспользованиеЖурналаПродаж       = ПравоДоступа("Использование", Метаданные.Обработки.ЖурналДокументовПродажи);
	ДоступенПросмотрЗаказовКлиента           = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента);
	ДоступенПросмотрАктовРасхождений         = ПравоДоступа("Просмотр", Метаданные.Документы.АктОРасхожденияхПослеОтгрузки);
	ДоступенПросмотрЗаявокНаВозврат          = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ДоступноИспользованиеОтчетовКомиссионера = ПравоДоступа("Использование", Метаданные.Обработки.ЖурналДокументовОтчетыКомиссионеров);

	ДоступенПросмотрПриобретенияУслуг        = ПравоДоступа("Просмотр", Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	ДоступенПросмотрВзаимозачета             = ПравоДоступа("Просмотр", Метаданные.Документы.ВзаимозачетЗадолженности);
	ДоступенПросмотрСверокВзаиморасчетов     = ПравоДоступа("Просмотр", Метаданные.Документы.СверкаВзаиморасчетов);
	ДоступноИспользованиеБезналичныхПлатежей = ПравоДоступа("Использование", Метаданные.Обработки.ЖурналДокументовБезналичныеПлатежи);

	ДоступноОформлениеЗаказовКлиентов = ЗначенияФункциональныхОпций.ИспользоватьЗаказыКлиентов;
	ДоступноОформлениеЗаявокНаВозврат = ЗначенияФункциональныхОпций.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов;

	Элементы.ОткрытьНастройкуПринадлежностиТоваровСхемамРаботы.Доступность = Не УчетнаяЗапись.Пустая();

	Элементы.ОткрытьПрайсЛист.Доступность = ДоступноИспользованиеПрайсЛиста;

	Элементы.ОткрытьАнализОстатковИПланированиеПоставокТоваров.Доступность = Не УчетнаяЗапись.Пустая();

	Элементы.ГруппаПоставки.Доступность = Не УчетнаяЗапись.Пустая()
		И ЗначенияФункциональныхОпций.ИспользоватьКомиссиюПриПродажах
		И Не ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки.Пустая();
	Элементы.ОткрытьДокументыПоставок.Доступность                            = ДоступноИспользованиеЖурналаПродаж;
	Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению.Доступность = ДоступноИспользованиеЖурналаПродаж;
	Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению.Доступность  = ДоступноИспользованиеЖурналаПродаж;
	Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставку.Доступность            = ДоступенПросмотрЗаказовКлиента;
	Элементы.ВыгрузитьЗаявкуНаПоставку.Доступность                           = ДоступенПросмотрЗаказовКлиента
																				И ДоступноОформлениеЗаказовКлиентов;
	Элементы.ЗагрузитьПоставки.Доступность                                   = ДоступенПросмотрЗаказовКлиента;
	Элементы.ОткрытьДокументыПоставокАктыРасхождений.Доступность             = ДоступенПросмотрАктовРасхождений;
	Элементы.ОткрытьДокументыПоставокЗаявкиНаВозврат.Доступность             = ДоступенПросмотрЗаявокНаВозврат;
	Элементы.ВыгрузитьЗаявкуНаВозврат.Доступность                            = ДоступенПросмотрЗаявокНаВозврат
																				И ДоступноОформлениеЗаявокНаВозврат;
	Элементы.ЗагрузитьЗаявкуНаВозврат.Доступность                            = ДоступенПросмотрЗаявокНаВозврат
																				И ДоступноОформлениеЗаявокНаВозврат;

	Элементы.ГруппаПродажи.Доступность = Не УчетнаяЗапись.Пустая()
		И ЗначенияФункциональныхОпций.ИспользоватьКомиссиюПриПродажах
		И (Не ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки.Пустая()
			Или Не ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыСобственные.Пустая());
	Элементы.ОткрытьДокументыПродаж.Доступность                               = ДоступноИспользованиеЖурналаПродаж;
	Элементы.ОткрытьДокументыПродажССобственныхСкладовКОформлению.Доступность = ДоступноИспользованиеЖурналаПродаж;
	Элементы.ОткрытьДокументыПродажССобственныхСкладовВсеЗаказы.Доступность   = ДоступенПросмотрЗаказовКлиента;
	Элементы.ОткрытьДокументыПродажКОформлениюОтчетов.Доступность             = ДоступноИспользованиеОтчетовКомиссионера;
	Элементы.ОткрытьДокументыПродажЗаявкиНаВозврат.Доступность                = ДоступенПросмотрЗаявокНаВозврат;
	Элементы.ОткрытьДокументыПродажЗаявкиНаВозвратКОформлению.Доступность     = ДоступноИспользованиеЖурналаПродаж;
	Элементы.ЗагрузитьОтчетОРеализациях.Доступность                           = ДоступноИспользованиеОтчетовКомиссионера;

	Элементы.ОткрытьДокументыПродажСоСкладовТорговойПлощадкиЗаказы.Доступность = Не УчетнаяЗапись.Пустая();

	Элементы.ГруппаВзаиморасчеты.Доступность = Не УчетнаяЗапись.Пустая()
		И ЗначенияФункциональныхОпций.ИспользоватьКомиссиюПриПродажах;
	Элементы.ОткрытьДокументыПриобретенияУслуг.Доступность         = ДоступенПросмотрПриобретенияУслуг;
	Элементы.ОткрытьДокументыВзаимозачетаЗадолженности.Доступность = ДоступенПросмотрВзаимозачета;
	Элементы.ОткрытьДокументыОплаты.Доступность                    = ДоступноИспользованиеБезналичныхПлатежей;
	Элементы.ОткрытьДокументыСверкиВзаиморасчетов.Доступность      = ДоступенПросмотрСверокВзаиморасчетов;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	МассивЭлементовНеактивных = Новый Массив;
	МассивЭлементовПроверкиДоступности = Новый Массив;

	Если Не ЗначенияФункциональныхОпций.ИспользоватьЗаказыКлиентов Тогда
		МассивЭлементовНеактивных.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставку);
		МассивЭлементовНеактивных.Добавить(Элементы.ОткрытьДокументыПродажССобственныхСкладовВсеЗаказы);
	Иначе
		МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставку);
		МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПродажССобственныхСкладовВсеЗаказы);
	КонецЕсли;
	Если Не ЗначенияФункциональныхОпций.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов Тогда
		МассивЭлементовНеактивных.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаВозврат);
		МассивЭлементовНеактивных.Добавить(Элементы.ОткрытьДокументыПродажЗаявкиНаВозврат);
	Иначе
		МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаВозврат);
		МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПродажЗаявкиНаВозврат);
	КонецЕсли;

	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьПрайсЛист);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставок);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ВыгрузитьЗаявкуНаПоставку);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ЗагрузитьПоставки);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПоставокАктыРасхождений);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ВыгрузитьЗаявкуНаВозврат);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ЗагрузитьЗаявкуНаВозврат);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПродаж);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПродажССобственныхСкладовКОформлению);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПродажЗаявкиНаВозвратКОформлению);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПродажКОформлениюОтчетов);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ЗагрузитьОтчетОРеализациях);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыПриобретенияУслуг);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыВзаимозачетаЗадолженности);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыОплаты);
	МассивЭлементовПроверкиДоступности.Добавить(Элементы.ОткрытьДокументыСверкиВзаиморасчетов);

	Для Каждого Элемент Из МассивЭлементовНеактивных Цикл
		Элемент.ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
	КонецЦикла;

	Для Каждого Элемент Из МассивЭлементовПроверкиДоступности Цикл
		Элемент.ЦветТекста = ?(Элемент.Доступность, ЦветаСтиля.ГиперссылкаЦвет, ЦветаСтиля.НезаполненноеПолеТаблицы);
	КонецЦикла;

	МассивЭлементовПодсказки = Новый Массив;
	МассивЭлементовПодсказки.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставку);
	МассивЭлементовПодсказки.Добавить(Элементы.ОткрытьДокументыПродажССобственныхСкладовВсеЗаказы);
	МассивЭлементовПодсказки.Добавить(Элементы.ОткрытьДокументыПоставокЗаявкиНаВозврат);
	МассивЭлементовПодсказки.Добавить(Элементы.ОткрытьДокументыПродажЗаявкиНаВозврат);

	Для Каждого Элемент Из МассивЭлементовПодсказки Цикл
		Команда = Команды.Найти(Элемент.ИмяКоманды);
		Если Команда = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Элемент.ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы Тогда
			Команда.Подсказка = НСтр("ru = 'Использование документов этого вида отключено';
									|en = 'Using documents of this kind is disabled'");
		Иначе
			ЭлементПодсказки = ПодсказкиЭлементовПоУмолчанию.НайтиПоЗначению(Элемент.ИмяКоманды);
			Если ЭлементПодсказки <> Неопределено Тогда
				Команда.Подсказка = ЭлементПодсказки.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчики()

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ДанныеСчетчиков = Новый Структура;

	Если Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению.Доступность Тогда
		ДанныеСчетчиков.Вставить("ОтгрузитьПоставки", 0);
	Иначе
		ДанныеСчетчиков.Вставить("ОтгрузитьПоставки", -1);
	КонецЕсли;

	Если Элементы.ОткрытьДокументыПродажССобственныхСкладовКОформлению.Доступность Тогда
		ДанныеСчетчиков.Вставить("ОтгрузитьПродажи", 0);
	Иначе
		ДанныеСчетчиков.Вставить("ОтгрузитьПродажи", -1);
	КонецЕсли;

	Если Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению.Доступность Тогда
		ДанныеСчетчиков.Вставить("ПринятьВозвратыПоставок", 0);
	Иначе
		ДанныеСчетчиков.Вставить("ПринятьВозвратыПоставок", -1);
	КонецЕсли;

	Если Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению.Доступность Тогда
		ДанныеСчетчиков.Вставить("ПринятьВозвратыПродаж", 0);
	Иначе
		ДанныеСчетчиков.Вставить("ПринятьВозвратыПродаж", -1);
	КонецЕсли;

	ДанныеСчетчиков.Вставить("ИдентификаторЗадания", Новый УникальныйИдентификатор());

	ОбновитьЗаголовкиГиперссылок(ДанныеСчетчиков, Истина);

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьСчетчикиЗавершение", ЭтотОбъект,
		Новый Структура("ИдентификаторЗадания", ДанныеСчетчиков.ИдентификаторЗадания));
	ДлительнаяОперация = ПолучитьСчетчики(ДанныеСчетчиков, ДанныеТорговойПлощадки);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетчики(ДанныеСчетчиков, ДанныеТорговойПлощадки)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(
		ДанныеТорговойПлощадки.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Ozon. Пересчет счетчиков рабочего места управления продажами';
			|en = 'Ozon. Recalculation of sales management workplace counters'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "Обработки.ПанельАдминистрированияПродажиНаOzon.ПолучитьСчетчики";
	Результат = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		ИмяМетода,
		ДанныеСчетчиков,
		ДанныеТорговойПлощадки);

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбновитьСчетчикиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат <> Неопределено
	  И Результат.Статус = "Выполнено"
	  И Результат.Свойство("АдресРезультата") Тогда

		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОперации.ИдентификаторЗадания <> ДополнительныеПараметры.ИдентификаторЗадания Тогда
			Возврат;
		КонецЕсли;

		ОбновитьЗаголовкиГиперссылок(РезультатОперации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиГиперссылок(ДанныеСчетчиков, ЭтоЗапускОбновления = Ложь)

	Если ДанныеСчетчиков.Свойство("ОтгрузитьПоставки") Тогда
		ШаблонЗаголовка = НСтр("ru = 'Отгрузить (%1)';
								|en = 'Ship (%1)'");
		ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;

		Если ЭтоЗапускОбновления Тогда
			ПредставлениеСчетчика = "...";
		Иначе
			ПредставлениеСчетчика = ?(ДанныеСчетчиков.ОтгрузитьПоставки > 1000,
									  Строка(1000) + "+",
									  ДанныеСчетчиков.ОтгрузитьПоставки);

			Если ДанныеСчетчиков.ОтгрузитьПоставки = 0 Тогда
				ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
			КонецЕсли;
		КонецЕсли;

		Элемент = Элементы.ОткрытьДокументыПоставокЗаявкиНаПоставкуКОформлению;
		Элемент.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеСчетчика);
		Элемент.ЦветТекста = ЦветТекста;
	КонецЕсли;

	Если ДанныеСчетчиков.Свойство("ОтгрузитьПродажи") Тогда
		ШаблонЗаголовка = НСтр("ru = 'Отгрузить (%1)';
								|en = 'Ship (%1)'");
		ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;

		Если ЭтоЗапускОбновления Тогда
			ПредставлениеСчетчика = "...";
		Иначе
			ПредставлениеСчетчика = ?(ДанныеСчетчиков.ОтгрузитьПродажи > 1000,
									  Строка(1000) + "+",
									  ДанныеСчетчиков.ОтгрузитьПродажи);

			Если ДанныеСчетчиков.ОтгрузитьПродажи = 0 Тогда
				ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
			КонецЕсли;
		КонецЕсли;

		Элемент = Элементы.ОткрытьДокументыПродажССобственныхСкладовКОформлению;
		Элемент.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеСчетчика);
		Элемент.ЦветТекста = ЦветТекста;
	КонецЕсли;

	Если ДанныеСчетчиков.Свойство("ПринятьВозвратыПоставок") Тогда
		ШаблонЗаголовка = НСтр("ru = 'Принять (%1)';
								|en = 'Accept (%1)'");
		ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;

		Если ЭтоЗапускОбновления Тогда
			ПредставлениеСчетчика = "...";
		Иначе
			ПредставлениеСчетчика = ?(ДанныеСчетчиков.ПринятьВозвратыПоставок > 1000,
									  Строка(1000) + "+",
									  ДанныеСчетчиков.ПринятьВозвратыПоставок);

			Если ДанныеСчетчиков.ПринятьВозвратыПоставок = 0 Тогда
				ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
			КонецЕсли;
		КонецЕсли;

		Элемент = Элементы.ОткрытьДокументыПоставокЗаявкиНаВозвратКОформлению;
		Элемент.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеСчетчика);
		Элемент.ЦветТекста = ЦветТекста;
	КонецЕсли;

	Если ДанныеСчетчиков.Свойство("ПринятьВозвратыПродаж") Тогда
		ШаблонЗаголовка = НСтр("ru = 'Принять (%1)';
								|en = 'Accept (%1)'");
		ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;

		Если ЭтоЗапускОбновления Тогда
			ПредставлениеСчетчика = "...";
		Иначе
			ПредставлениеСчетчика = ?(ДанныеСчетчиков.ПринятьВозвратыПродаж > 1000,
									  Строка(1000) + "+",
									  ДанныеСчетчиков.ПринятьВозвратыПродаж);

			Если ДанныеСчетчиков.ПринятьВозвратыПродаж = 0 Тогда
				ЦветТекста = ЦветаСтиля.НезаполненноеПолеТаблицы;
			КонецЕсли;
		КонецЕсли;

		Элемент = Элементы.ОткрытьДокументыПродажЗаявкиНаВозвратКОформлению;
		Элемент.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеСчетчика);
		Элемент.ЦветТекста = ЦветТекста;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСДополнениемПараметров(ИмяОткрываемойФормы, КлючНазначенияФормы)

	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ДанныеТорговойПлощадки", ДанныеТорговойПлощадки);
	ДополнительныеСвойства.Вставить("КлючНазначенияФормы",    КлючНазначенияФормы);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", Ложь);
	
	ИнтеграцияСМаркетплейсамиКлиент.ДополнитьПараметрыФормы(
		ПараметрыФормы,
		ДополнительныеСвойства,
		ИмяОткрываемойФормы);
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы,, ПараметрыФормы.УникальныйИдентификаторФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенияКСервису()

	ИмяОткрываемойФормы = "Обработка.УправлениеПродажамиНаOzon.Форма.ПодключениеКСервису";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеКСервисуЗавершение", ЭтотОбъект);

	ОткрытьФорму(ИмяОткрываемойФормы,, ЭтотОбъект,,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ПодключениеКСервисуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не ПодключениеКСервисуВыполнено Тогда
		Закрыть();
	Иначе
		ОбновитьСписокУчетныхЗаписей(УчетнаяЗапись);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыЦенУчетныхЗаписейOzon()

	Возврат Справочники.УчетныеЗаписиМаркетплейсов.ВидыЦенУчетныхЗаписейМаркетплейсаOzon();

КонецФункции

#КонецОбласти
