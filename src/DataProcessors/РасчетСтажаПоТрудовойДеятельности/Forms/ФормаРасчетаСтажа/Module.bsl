#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "ФизическоеЛицоСсылка");
	Заголовок = Строка(ФизическоеЛицоСсылка);
	
	ПроинициализироватьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ИзмененныеВиды = Новый Массив;
		Для Каждого СтрокаДанныеРасчетаСтажей Из ДанныеРасчетаСтажей Цикл
			
			Если СтрокаДанныеРасчетаСтажей.Изменен Тогда
				ИзмененныеВиды.Добавить(СтрокаДанныеРасчетаСтажей.ВидСтажа);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзмененныеВиды.Количество() > 0 Тогда
			
			Если ИзмененныеВиды.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru = 'Изменен стаж';
											|en = 'The length of service is changed'") + " - " + ИзмененныеВиды[0];
			Иначе
				
				ТекстПредупреждения = НСтр("ru = 'Изменены стажи';
											|en = 'Lengths of service are changed'") + ":
					| - " + СтрСоединить(ИзмененныеВиды, ";" + Символы.ПС + " - ");
				
			КонецЕсли;
			
			ТекстПредупреждения = ТекстПредупреждения
				+ "." + Символы.ПС + НСтр("ru = 'Продолжить?';
											|en = 'Continue?'");
			
			Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаКалькуляцииСтажейПриИзменении(Элемент)
	
	ОбновитьВсеСтажи();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИспользуетсяПриИзменении(Элемент)
	
	ИндексВидаСтажа = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "СтажИспользуется", ""));
	ЭлементСписка = ВидыСтажей.Получить(ИндексВидаСтажа);
	ЭлементСписка.Пометка = Не ЭлементСписка.Пометка;
	
	УстановитьОтображениеЭлементовФормы(ЭтотОбъект);
	ОбновитьОсобенностиРасчетаСтажа(ЭтотОбъект);
	
	ЭтотОбъект["ПредставлениеСтажа" + ИндексВидаСтажа] = ПредставлениеПродолжительностиСтажа(
		ДанныеРасчетаСтажей[ИндексВидаСтажа].Лет,
		ДанныеРасчетаСтажей[ИндексВидаСтажа].Месяцев,
		ДанныеРасчетаСтажей[ИндексВидаСтажа].Дней);
	
	УстановитьПредставлениеСтажа(ЭтотОбъект, ИндексВидаСтажа, ЭтотОбъект["ПредставлениеСтажа" + ИндексВидаСтажа]);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудоваяДеятельностьФизическихЛиц

&НаКлиенте
Процедура ТрудоваяДеятельностьФизическихЛицПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущиеДанные;
	
	// Запоминание даты начала и окончания текущей строки
	ДатаНачалаТрудовойДеятельности = ТекущиеДанные.ДатаНачала;
	ДатаОкончанияТрудовойДеятельности = ТекущиеДанные.ДатаОкончания;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.ФизическоеЛицо = ФизическоеЛицоСсылка;
		ТекущиеДанные.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		
		// Если добавляется не первая строка, дату начала устанавливается следующим
		// днем за датой окончания предыдущей строки
		
		Если ТрудоваяДеятельностьФизическихЛиц.Количество() > 1 Тогда
			
			ДанныеПредыдущейСтроки = ТрудоваяДеятельностьФизическихЛиц[ТрудоваяДеятельностьФизическихЛиц.Количество() - 2];
			Если Не ЗначениеЗаполнено(ДанныеПредыдущейСтроки.ДатаОкончания) Тогда
				
				ДатаОкончания = НачалоДня(НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) - 1);
				Если ДатаОкончания < ДанныеПредыдущейСтроки.ДатаНачала Тогда
					ДанныеПредыдущейСтроки.ДатаОкончания = ДанныеПредыдущейСтроки.ДатаНачала;
				Иначе
					ДанныеПредыдущейСтроки.ДатаОкончания = ДатаОкончания;
				КонецЕсли;
				
				// После установки даты окончания, необходимо пересчитать стажи предыдущей строки
				ИдентификаторСтрокиТрудовойДеятельности = ДанныеПредыдущейСтроки.ПолучитьИдентификатор();
				ПодключитьОбработчикОжидания("ОбновитьДанныеСтрокиТрудовойДеятельности", 0.1, Истина);
				
			КонецЕсли;
			
			ТекущиеДанные.ДатаНачала = КонецДня(ДанныеПредыдущейСтроки.ДатаОкончания) + 1;
			
		Иначе
			ДанныеПредыдущейСтроки = Неопределено;
			ТекущиеДанные.ДатаНачала = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
		// Взвод флага участия строки в расчете помеченных стажей
		Для Каждого ЭлементСписка Из ВидыСтажей Цикл
			
			ИндексВидаСтажа = ВидыСтажей.Индекс(ЭлементСписка);
			Если ДанныеПредыдущейСтроки = Неопределено Тогда
				
				Если ЭлементСписка.Пометка Тогда
					ТекущиеДанные["Используется" + ИндексВидаСтажа] = 1;
				КонецЕсли;
				
			ИначеЕсли ДанныеПредыдущейСтроки["Используется" + ИндексВидаСтажа] = 1 Тогда
				ТекущиеДанные["Используется" + ИндексВидаСтажа] = 1;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудоваяДеятельностьФизическихЛицПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования
		И ЗначениеЗаполнено(Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущиеДанные.ДатаНачала)
		И Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущиеДанные.ДатаНачала < ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений() Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Укажите правильную дату начала периода работы';
				|en = 'Indicate the correct start date of the work period'"), , , "ТрудоваяДеятельностьФизическихЛиц.ДатаНачала", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудоваяДеятельностьФизическихЛицПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущиеДанные;
	Если Не ОтменаРедактирования
		И (ТекущиеДанные.ДатаНачала <> ДатаНачалаТрудовойДеятельности
			Или ТекущиеДанные.ДатаОкончания <> ДатаОкончанияТрудовойДеятельности) Тогда
		
		// Стажи пересчитываются, только если менялись дата начла или дата окончания периода
		ИдентификаторСтрокиТрудовойДеятельности = Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущаяСтрока;
		ПодключитьОбработчикОжидания("ОбновитьДанныеСтрокиТрудовойДеятельности", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудоваяДеятельностьФизическихЛицПослеУдаления(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеСтажи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудоваяДеятельностьФизическихЛицДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) 
			И ТекущиеДанные.ДатаОкончания < ТекущиеДанные.ДатаНачала Тогда
			
			ТекущиеДанные.ДатаОкончания = ТекущиеДанные.ДатаНачала;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТрудоваяДеятельностьФизическихЛицИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ОбновитьСтажПоПериодам = Истина;
		
		ИндексВидаСтажа = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Используется", ""));
		Если ТекущиеДанные[Элемент.Имя] = 2 Тогда
			
			ТекущиеДанные[Элемент.Имя] = 0;
			
		Иначе
			
			ВидСтажа = ВидыСтажей.Получить(ИндексВидаСтажа).Значение;
			Если ДанныеРасчетаСтажей[ИндексВидаСтажа].Пользовательский Тогда
				
				ОбновитьСтажПоПериодам = Ложь;
				ДополнительныеПараметры = Новый Структура("ИндексВидаСтажа", ИндексВидаСтажа);
				
				Оповещение = Новый ОписаниеОповещения("ИспользованиеПользовательскогоСтажаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Для ""%1"" заданы свои дата отсчета и значение стажа.
					|При выборе, будут добавлены сведения о стаже, рассчитанные по периодам трудовой деятельности.
					|Продолжить?';
					|en = 'For ""%1"" own counting date and the value of the service length are set up.
					| During selection, the information about the length of service will be added calculated using periods of the labour activity.
					|Continue?'"), ВидСтажа);
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбновитьСтажПоПериодам Тогда
			
			Особенность = "";
			ОбновитьСтаж(ЭтотОбъект, ИндексВидаСтажа, Особенность, Истина);
			
			УстановитьОсобенностиРасчетаСтажа(ЭтотОбъект, ИндексВидаСтажа, Особенность);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПользовательскогоСтажаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИндексВидаСтажа") Тогда
		
		ИндексВидаСтажа = ДополнительныеПараметры.ИндексВидаСтажа;
		Если Результат = КодВозвратаДиалога.Да Тогда
			
			ДанныеРасчетаСтажей[ИндексВидаСтажа].Пользовательский = Ложь;
			Для Каждого СтрокаТрудоваяДеятельность Из ТрудоваяДеятельностьФизическихЛиц Цикл
				
				Если СтрокаТрудоваяДеятельность.ПолучитьИдентификатор() = Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущаяСтрока Тогда
					СтрокаТрудоваяДеятельность["Используется" + ИндексВидаСтажа] = 1;
				Иначе
					СтрокаТрудоваяДеятельность["Используется" + ИндексВидаСтажа] = 0;
				КонецЕсли;
				
			КонецЦикла;
			
			Особенность = "";
			ОбновитьСтаж(ЭтотОбъект, ИндексВидаСтажа, Особенность);
			
			УстановитьОсобенностиРасчетаСтажа(ЭтотОбъект, ИндексВидаСтажа, Особенность);
			
		Иначе
			Элементы.ТрудоваяДеятельностьФизическихЛиц.ТекущиеДанные["Используется" + ИндексВидаСтажа] = 2;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Модифицированность Тогда
		ПроверитьИЗакрыть();
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИЗакрыть()
	
	Если ПроверитьЗаполнение() Тогда
		
		Модифицированность = Ложь;
		Закрыть(ВозвращаемыеКоллекции());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВКоллекциюИзПараметров(ИмяРеквизитаКоллекции)
	
	ЗначениеПараметра = Неопределено;
	Если Параметры.Свойство(ИмяРеквизитаКоллекции, ЗначениеПараметра) Тогда
		
		Для Каждого ДанныеЭлементаКоллекции Из ЗначениеПараметра Цикл
			ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяРеквизитаКоллекции].Добавить(), ДанныеЭлементаКоллекции);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДлительностиПериодовТрудовойДеятельности()
	
	ТаблицаСтажей = ТрудоваяДеятельностьФизическихЛиц.Выгрузить(, "ДатаНачала,ДатаОкончания");
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицыСтажей Из ТаблицаСтажей Цикл
		Если СтрокаТаблицыСтажей.ДатаНачала < ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений() Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицыСтажей);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Из расчета стажа исключен период с %1 по %2';
				|en = 'The period from %1 to %2 is excluded from the service length calculation'"),
			Формат(УдаляемаяСтрока.ДатаНачала, "ДЛФ=D; ДП=' " + НСтр("ru = '<пустая дата>';
																	|en = '<empty date>'") + "'"),
			Формат(УдаляемаяСтрока.ДатаОкончания, "ДЛФ=D; ДП=' " + НСтр("ru = '<пустая дата>';
																		|en = '<empty date>'") + "'"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		ТаблицаСтажей.Удалить(УдаляемаяСтрока);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСтажей", ТаблицаСтажей);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаСтажей.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ТекущаяДата
		|		ИНАЧЕ ТаблицаСтажей.ДатаОкончания
		|	КОНЕЦ КАК ДатаРасчетаСтажа,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВидыСтажа.ПустаяСсылка) КАК ВидСтажа,
		|	ТаблицаСтажей.ДатаНачала КАК ДатаОтсчета,
		|	1 КАК РазмерДней,
		|	0 КАК РазмерМесяцев,
		|	ЛОЖЬ КАК Прерван
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ТаблицаСтажей КАК ТаблицаСтажей";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, 
		КадровыйУчетРасширенный.ЗапросВТРасчетСтажа(
			КадровыйУчетРасширенный.ОписательВТИсходныеДанныеДляРасчетаСтажа(),
			""));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокиТрудовойДеятельности = ТрудоваяДеятельностьФизическихЛиц.НайтиСтроки(Новый Структура("ДатаНачала,ДатаОкончания", Выборка.ДатаОтсчета, Выборка.ДатаРасчетаСтажа));
		Если СтрокиТрудовойДеятельности.Количество() > 0 Тогда
			
			СтрокиТрудовойДеятельности[0].ПериодРаботыЛет = Выборка.Лет;
			СтрокиТрудовойДеятельности[0].ПериодРаботыМесяцев = Выборка.Месяцев;
			СтрокиТрудовойДеятельности[0].ПериодРаботыДней = Выборка.Дней;
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ПроинициализироватьФорму()
	
	ЗагрузитьДанныеВКоллекциюИзПараметров("СтажиФизическихЛиц");
	ЗагрузитьДанныеВКоллекциюИзПараметров("ТрудоваяДеятельностьФизическихЛиц");
	ЗагрузитьДанныеВКоллекциюИзПараметров("ВидыСтажаТрудовойДеятельностиФизическихЛиц");
	
	ТрудоваяДеятельностьФизическихЛиц.Сортировать("ДатаНачала,ДатаОкончания,Организация,Должность");
	
	РассчитатьДлительностиПериодовТрудовойДеятельности();
	
	// Определении даты калькуляции стажа
	СтажиПоТрудовойДеятельности = СтажиФизическихЛиц.Выгрузить(Новый Структура("ПоТрудовойДеятельности", Истина));
	Для Каждого СтажПоТрудовойДеятельности Из СтажиПоТрудовойДеятельности Цикл
		
		Если ДатаКалькуляцииСтажей < СтажПоТрудовойДеятельности.ДатаОтсчета Тогда
			ДатаКалькуляцииСтажей = КонецДня(СтажПоТрудовойДеятельности.ДатаОтсчета) + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДатаКалькуляцииСтажей) Тогда
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицоСсылка);
		ПараметрыПолучения.КадровыеДанные = "ДатаПриема,ДатаНачалаУчета,ДатаУвольнения";
		
		УстановитьПривилегированныйРежим(Истина);
		СотрудникиФизическогоЛица = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПерваяДатаНачалаУчета = '00010101';
		Для Каждого СтрокаСотрудник Из СотрудникиФизическогоЛица Цикл
			
			// Определение самой ранней даты начала учета по работающему сотруднику
			Если Не ЗначениеЗаполнено(СтрокаСотрудник.ДатаУвольнения)
				И ДатаКалькуляцииСтажей < СтрокаСотрудник.ДатаНачалаУчета Тогда
				
				ДатаКалькуляцииСтажей = СтрокаСотрудник.ДатаНачалаУчета;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаСотрудник.ДатаПриема)
				И ДатаКалькуляцииСтажей > СтрокаСотрудник.ДатаПриема Тогда
				
				ДатаКалькуляцииСтажей = СтрокаСотрудник.ДатаПриема;
				
			КонецЕсли;
			
			// Самая ранняя дата начала учета по всем сотрудникам
			Если ПерваяДатаНачалаУчета < СтрокаСотрудник.ДатаНачалаУчета Тогда
				ПерваяДатаНачалаУчета = СтрокаСотрудник.ДатаНачалаУчета;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ДатаКалькуляцииСтажей) Тогда
			
			Если ЗначениеЗаполнено(ПерваяДатаНачалаУчета) Тогда
				ДатаКалькуляцииСтажей = ДатаКалькуляцииСтажей;
			Иначе
				ДатаКалькуляцииСтажей = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокВыбранных = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РасчетСтажаПоТрудовойДеятельности", "СписокВыбранныхСтажей", Новый Массив);
	
	УчитываемыеСтажи = Новый Соответствие;
	Если СтажиФизическихЛиц.Количество() = 0 Тогда
		
		ЗадатьВидыСтажейПоУмолчанию = Истина;
		Если ТрудоваяДеятельностьФизическихЛиц.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		
		ЗадатьВидыСтажейПоУмолчанию = Ложь;
		
		Для Каждого СтрокаВидаСтажа Из СтажиФизическихЛиц Цикл
			
			ДатаОтсчета = УчитываемыеСтажи.Получить(СтрокаВидаСтажа.ВидСтажа);
			Если ДатаОтсчета = Неопределено
				Или ДатаОтсчета < СтрокаВидаСтажа.ДатаОтсчета Тогда
				
				УчитываемыеСтажи.Вставить(СтрокаВидаСтажа.ВидСтажа, СтрокаВидаСтажа.ДатаОтсчета)
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыСтажа.Ссылка КАК Ссылка,
		|	ВидыСтажа.КатегорияСтажа КАК КатегорияСтажа,
		|	ВЫБОР
		|		КОГДА ВидыСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Прочее)
		|			ТОГДА ВидыСтажа.Наименование
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВидыСтажа.КатегорияСтажа)
		|	КОНЕЦ КАК Наименование
		|ИЗ
		|	Справочник.ВидыСтажа КАК ВидыСтажа
		|ГДЕ
		|	НЕ ВидыСтажа.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыСтажа.КатегорияСтажа.Порядок";
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ИндексыПомеченныхВидовСтажа = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗадатьВидыСтажейПоУмолчанию Тогда
			
			ДатаОтсчетаСтажа = Неопределено;
			
			Если СписокВыбранных.Количество() > 0 И СписокВыбранных.Найти(Выборка.Ссылка) <> Неопределено Тогда
				Пометка = Истина;
			Иначе
				
				Пометка = (Выборка.КатегорияСтажа = Перечисления.КатегорииСтажа.Общий)
					Или (Выборка.КатегорияСтажа = Перечисления.КатегорииСтажа.Страховой)
					Или (Выборка.КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой);
				
			КонецЕсли;
			
		Иначе
			
			ДатаОтсчетаСтажа = УчитываемыеСтажи.Получить(Выборка.Ссылка);
			Если СписокВыбранных.Количество() > 0 И СписокВыбранных.Найти(Выборка.Ссылка) <> Неопределено Тогда
				Пометка = Истина;
			Иначе
				Пометка = (ДатаОтсчетаСтажа <> Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементСписка = ВидыСтажей.Добавить(Выборка.Ссылка, Выборка.Наименование, Пометка);
		
		СтрокаДанныхРасчетаСтажей = ДанныеРасчетаСтажей.Добавить();
		СтрокаДанныхРасчетаСтажей.ВидСтажа = Выборка.Ссылка;
		
		Если ДатаОтсчетаСтажа <> Неопределено Тогда
			
			СтрокаДанныхРасчетаСтажей.ДатаОтсчета = ДатаОтсчетаСтажа;
			
			Если СтажиПоТрудовойДеятельности.Найти(СтрокаДанныхРасчетаСтажей.ВидСтажа, "ВидСтажа") = Неопределено Тогда
				СтрокаДанныхРасчетаСтажей.Пользовательский = Истина;
			КонецЕсли;
			
			СтрокиСтажа = СтажиФизическихЛиц.НайтиСтроки(Новый Структура("ВидСтажа,ДатаОтсчета", СтрокаДанныхРасчетаСтажей.ВидСтажа, ДатаОтсчетаСтажа));
			Если СтрокиСтажа.Количество() > 0 Тогда
				
				СтрокаСтажа = СтрокиСтажа[0];
				СтрокаДанныхРасчетаСтажей.Лет = Цел(СтрокаСтажа.РазмерМесяцев / 12);
				СтрокаДанныхРасчетаСтажей.Месяцев = СтрокаСтажа.РазмерМесяцев - СтрокаДанныхРасчетаСтажей.Лет * 12;
				СтрокаДанныхРасчетаСтажей.Дней = СтрокаСтажа.РазмерДней;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИндексВидаСтажа = ВидыСтажей.Индекс(ЭлементСписка);
		
		Если Пометка Тогда
			ИндексыПомеченныхВидовСтажа.Добавить(ИндексВидаСтажа);
		КонецЕсли;
		
		РеквизитСтаж = Новый РеквизитФормы("СтажИспользуется" + ИндексВидаСтажа, Новый ОписаниеТипов("Булево"), , , Истина);
		ДобавляемыеРеквизиты.Добавить(РеквизитСтаж);
		
		РеквизитПредставлениеСтажа = Новый РеквизитФормы("ПредставлениеСтажа" + ИндексВидаСтажа, Новый ОписаниеТипов("Строка"), , );
		ДобавляемыеРеквизиты.Добавить(РеквизитПредставлениеСтажа);
		
		РеквизитОсобенностиРасчета = Новый РеквизитФормы("ОсобенностиРасчета" + ИндексВидаСтажа, Новый ОписаниеТипов("Строка"), , );
		ДобавляемыеРеквизиты.Добавить(РеквизитОсобенностиРасчета);
		
		РеквизитИспользуется = Новый РеквизитФормы("Используется" + ИндексВидаСтажа, Новый ОписаниеТипов("Число"), "ТрудоваяДеятельностьФизическихЛиц", НСтр("ru = 'Включен';
																																							|en = 'Enabled'"));
		ДобавляемыеРеквизиты.Добавить(РеквизитИспользуется);
		
	КонецЦикла;
	
	СуществующиеРеквизиты = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, СуществующиеРеквизиты);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтотОбъект, ДобавляемыеРеквизиты, СуществующиеРеквизиты);
	
	Если ЗадатьВидыСтажейПоУмолчанию
		И ИндексыПомеченныхВидовСтажа.Количество() > 0 Тогда
		
		Для Каждого Запись Из ТрудоваяДеятельностьФизическихЛиц Цикл
			
			Для Каждого ИндексВидаСтажа Из ИндексыПомеченныхВидовСтажа Цикл
				Запись["Используется" + ИндексВидаСтажа] = 1;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		РасставитьФлажки();
	КонецЕсли;
	
	// Если видов стажа более 5 - флажки размещаются в 2-е колонки.
	Если ВидыСтажей.Количество() > 5 Тогда
		
		КоличествоСтажейВЛевойГруппе = ВидыСтажей.Количество() / 2;
		Если Цел(КоличествоСтажейВЛевойГруппе) <> КоличествоСтажейВЛевойГруппе Тогда
			КоличествоСтажейВЛевойГруппе = Цел(КоличествоСтажейВЛевойГруппе) + 1;
		КонецЕсли;
		
	Иначе
		КоличествоСтажейВЛевойГруппе = ВидыСтажей.Количество();
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ВидыСтажей Цикл
		
		ИндексВидаСтажа = ВидыСтажей.Индекс(ЭлементСписка);
		
		Если ИндексВидаСтажа < КоличествоСтажейВЛевойГруппе Тогда
			ГруппаВидыСтажа = Элементы.ВидыСтажаЛеваяГруппа;
		Иначе
			ГруппаВидыСтажа = Элементы.ВидыСтажаПраваяГруппа;
		КонецЕсли;
		
		// Устанавливается пометка выбранного стажа
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "СтажИспользуется" + ИндексВидаСтажа, ЭлементСписка.Пометка);
		
		СтажИспользуется = Элементы.Добавить("СтажИспользуется" + ИндексВидаСтажа, Тип("ПолеФормы"), ГруппаВидыСтажа);
		СтажИспользуется.Вид = ВидПоляФормы.ПолеФлажка;
		СтажИспользуется.ПутьКДанным = "СтажИспользуется" + ИндексВидаСтажа;
		СтажИспользуется.Заголовок = ЭлементСписка.Представление;
		СтажИспользуется.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		СтажИспользуется.ТолькоПросмотр = ТолькоПросмотр;
		
		Если ЗначениеЗаполнено(ДанныеРасчетаСтажей[ИндексВидаСтажа].ДатаОтсчета) Тогда
			
			СтажИспользуется.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			СтажИспользуется.Подсказка = НСтр("ru = 'на';
												|en = 'in'") + " " + Формат(ДанныеРасчетаСтажей[ИндексВидаСтажа].ДатаОтсчета, "ДЛФ=D") + " " + НСтр("ru = 'составил';
																																				|en = 'created'") + " "
				+ ПредставлениеПродолжительностиСтажа(ДанныеРасчетаСтажей[ИндексВидаСтажа].Лет, ДанныеРасчетаСтажей[ИндексВидаСтажа].Месяцев, ДанныеРасчетаСтажей[ИндексВидаСтажа].Дней);
			
		КонецЕсли;
		
		СтажИспользуется.УстановитьДействие("ПриИзменении", "Подключаемый_ИспользуетсяПриИзменении");
		
		ГруппаКолонок = Элементы.Вставить("ГруппаКолонок" + ИндексВидаСтажа, Тип("ГруппаФормы"), Элементы.ТрудоваяДеятельностьФизическихЛиц, Элементы.ТрудоваяДеятельностьФизическихЛицОписаниеГруппа);
		ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
		ГруппаКолонок.Заголовок = ЭлементСписка.Представление;
		ГруппаКолонок.ОтображатьВШапке = Истина;
		ГруппаКолонок.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ГруппаКолонок.Ширина = 7;
		
		Колонка = Элементы.Добавить("Используется" + ИндексВидаСтажа, Тип("ПолеФормы"), ГруппаКолонок);
		Колонка.Вид = ВидПоляФормы.ПолеФлажка;
		Колонка.ТриСостояния = Истина;
		Колонка.ОтображатьВШапке = Ложь;
		Колонка.ПутьКДанным = "ТрудоваяДеятельностьФизическихЛиц." + Колонка.Имя;
		Колонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		Колонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		Колонка.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Центр;
		Колонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		Колонка.ПутьКДаннымПодвала = "ПредставлениеСтажа" + ИндексВидаСтажа;
		Колонка.УстановитьДействие("ПриИзменении", "Подключаемый_ТрудоваяДеятельностьФизическихЛицИспользуетсяПриИзменении");
		
	КонецЦикла;
	
	ОбновитьВсеСтажиНаСервере(ЗадатьВидыСтажейПоУмолчанию);
	УстановитьОтображениеЭлементовФормы(ЭтотОбъект);
	
	Если ТолькоПросмотр Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаКалькуляцииСтажей",
			"ТолькоПросмотр",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаОК",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаОтмена",
			"Заголовок",
			НСтр("ru = 'Закрыть';
				|en = 'Close'"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаОтмена",
			"КнопкаПоУмолчанию",
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСтрокиТрудовойДеятельности()
	
	Если ИдентификаторСтрокиТрудовойДеятельности <> Неопределено Тогда
		ОбновитьДанныеСтрокиТрудовойДеятельностиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтрокиТрудовойДеятельностиНаСервере()
	
	ТекущиеДанные = ТрудоваяДеятельностьФизическихЛиц.НайтиПоИдентификатору(ИдентификаторСтрокиТрудовойДеятельности);
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
			ДатаКалькуляции = ТекущиеДанные.ДатаОкончания;
		Иначе
			ДатаКалькуляции = ДатаКалькуляцииСтажей;
		КонецЕсли;
		
		Продолжительность = ПродолжительностьСтажа(ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания, ДатаКалькуляции);
		
		ТекущиеДанные.ПериодРаботыЛет = Продолжительность.Лет;
		ТекущиеДанные.ПериодРаботыМесяцев = Продолжительность.Месяцев;
		ТекущиеДанные.ПериодРаботыДней = Продолжительность.Дней;
		
		ТрудоваяДеятельностьФизическихЛиц.Сортировать("ДатаНачала,ДатаОкончания,Организация,Должность");
		
		ОбновитьВсеСтажиНаСервере();
		
	КонецЕсли;
	
	ИдентификаторСтрокиТрудовойДеятельности = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеСтажи()
	
	ОбновитьВсеСтажиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсеСтажиНаСервере(ОбновитьДанныеРасчетаСтажей = Истина)
	
	Для Каждого ЭлементСписка Из ВидыСтажей Цикл
		
		Если ЭлементСписка.Пометка Тогда
			
			ИндексВидаСтажа = ВидыСтажей.Индекс(ЭлементСписка);
			
			Особенность = "";
			ОбновитьСтаж(ЭтотОбъект, ИндексВидаСтажа, Особенность, ОбновитьДанныеРасчетаСтажей);
			
			УстановитьОсобенностиРасчетаСтажа(ЭтотОбъект, ИндексВидаСтажа, Особенность);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтаж(Форма, ИндексВидаСтажа, Особенность, ОбновитьДанныеРасчетаСтажей = Истина)
	
	Лет = 0;
	Месяцев = 0;
	Дней = 0;
	
	КоличествоПериодов = 0;
	ПредыдущаяЗапись = Неопределено;
	ПредыдущийПериод = Неопределено;
	
	ПредставленияНакопленного = Новый Массив;
	
	Для Каждого Запись Из Форма.ТрудоваяДеятельностьФизическихЛиц Цикл
		
		Если Запись.ДатаНачала < ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений() Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеНакопленного = "";
		Если Запись["Используется" + ИндексВидаСтажа] = 1 Тогда
			
			УчаствуетВРасчете = Истина;
			Если Запись.ДатаНачала > Форма.ДатаКалькуляцииСтажей Тогда
				
				ПредставлениеНакопленного = СтрШаблон(НСтр("ru = 'Период %1-%2 не участвует в расчете';
															|en = 'Period of %1-%2 is not used for calculation'"),
					Формат(Запись.ДатаНачала, "ДЛФ=D"),
					Формат(Запись.ДатаОкончания, "ДЛФ=D"));
				УчаствуетВРасчете = Ложь;
				
			Иначе
				
				Если ЗначениеЗаполнено(Запись.ДатаОкончания)
					И ПредыдущийПериод <> Неопределено
					И (Запись.ДатаОкончания <= ПредыдущийПериод.ДатаОкончания
						Или Не ЗначениеЗаполнено(ПредыдущийПериод.ДатаОкончания)) Тогда
					
					ПериодРаботыЛет = 0;
					ПериодРаботыМесяцев = 0;
					ПериодРаботыДней = 0;
					
					ПредставлениеНакопленного = СтрШаблон(НСтр("ru = 'Период %1-%2 учтен в периоде %3-%4';
																|en = 'Period of %1-%2 is set off in the period of%3-%4'"),
						Формат(Запись.ДатаНачала, "ДЛФ=D"),
						Формат(Запись.ДатаОкончания, "ДЛФ=D"),
						Формат(ПредыдущаяЗапись.ДатаНачала, "ДЛФ=D"),
						Формат(ПредыдущаяЗапись.ДатаОкончания, "ДЛФ=D"));
					УчаствуетВРасчете = Ложь;
					
				ИначеЕсли ПредыдущийПериод <> Неопределено
					И Запись.ДатаНачала <= ПредыдущийПериод.ДатаОкончания Тогда
					
					Продолжительность = ПродолжительностьСтажа(КонецДня(ПредыдущийПериод.ДатаОкончания) + 1, Запись.ДатаОкончания, Форма.ДатаКалькуляцииСтажей);
					
					ПериодРаботыЛет = Продолжительность.Лет;
					ПериодРаботыМесяцев = Продолжительность.Месяцев;
					ПериодРаботыДней = Продолжительность.Дней;
					
					ПредставлениеНакопленного = СтрШаблон(НСтр("ru = 'По периоду %1-%2 учтено %3 после %4-%5';
																|en = 'For the period of %1-%2 set off %3 after %4-%5'"),
						Формат(Запись.ДатаНачала, "ДЛФ=D"),
						Формат(Запись.ДатаОкончания, "ДЛФ=D"),
						ПредставлениеПродолжительностиСтажа(ПериодРаботыЛет, ПериодРаботыМесяцев, ПериодРаботыДней),
						Формат(ПредыдущаяЗапись.ДатаНачала, "ДЛФ=D"),
						Формат(ПредыдущаяЗапись.ДатаОкончания, "ДЛФ=D"));
					
					ИначеЕсли Не ЗначениеЗаполнено(Запись.ДатаОкончания)
						Или Запись.ДатаОкончания > Форма.ДатаКалькуляцииСтажей Тогда
					
					Продолжительность = ПродолжительностьСтажа(Запись.ДатаНачала, Запись.ДатаОкончания, Форма.ДатаКалькуляцииСтажей);
					
					ПериодРаботыЛет = Продолжительность.Лет;
					ПериодРаботыМесяцев = Продолжительность.Месяцев;
					ПериодРаботыДней = Продолжительность.Дней;
					
					ПредставлениеНакопленного = СтрШаблон(НСтр("ru = 'По периоду %1-%2 учтено %3 по %4';
																|en = 'For the period of %1-%2 set off %3 for %4'"),
						Формат(Запись.ДатаНачала, "ДЛФ=D"),
						Формат(Запись.ДатаОкончания, "Л=ru_RU; ДЛФ=D; ДП='<Сегодня>'"),
						ПредставлениеПродолжительностиСтажа(ПериодРаботыЛет, ПериодРаботыМесяцев, ПериодРаботыДней),
						Формат(Форма.ДатаКалькуляцииСтажей, "ДЛФ=D"));
					
				Иначе
					
					ПериодРаботыЛет = Запись.ПериодРаботыЛет;
					ПериодРаботыМесяцев = Запись.ПериодРаботыМесяцев;
					ПериодРаботыДней = Запись.ПериодРаботыДней;
					
				КонецЕсли;
				
				Лет = Лет + ПериодРаботыЛет;
				Месяцев = Месяцев + ПериодРаботыМесяцев;
				Дней = Дней + ПериодРаботыДней;
				
				КоличествоПериодов = КоличествоПериодов + 1;
				Если УчаствуетВРасчете Тогда
					ПредыдущаяЗапись = Запись;
				КонецЕсли;
				
				Если ПредыдущийПериод = Неопределено Тогда
					ПредыдущийПериод = Новый Структура("ДатаНачала,ДатаОкончания", Запись.ДатаНачала, Запись.ДатаОкончания);
				ИначеЕсли Запись.ДатаНачала > ПредыдущийПериод.ДатаОкончания Тогда
					ПредыдущийПериод = Новый Структура("ДатаНачала,ДатаОкончания", Запись.ДатаНачала, Запись.ДатаОкончания);
				ИначеЕсли Запись.ДатаНачала > ПредыдущийПериод.ДатаНачала И Запись.ДатаОкончания > ПредыдущийПериод.ДатаОкончания Тогда
					ПредыдущийПериод.ДатаОкончания = Запись.ДатаОкончания;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеНакопленного) Тогда
			ПредставленияНакопленного.Добавить(ПредставлениеНакопленного);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПериодов > 1 Тогда
		
		Лет = КадровыйУчетРасширенныйКлиентСервер.ЛетПриПодсчетеСтажа(Лет, Месяцев, Дней);
		Месяцев = КадровыйУчетРасширенныйКлиентСервер.МесяцевГодаПриПодсчетеСтажа(Месяцев, Дней);
		Дней = КадровыйУчетРасширенныйКлиентСервер.ДнейМесяцаПриПодсчетеСтажа(Дней);
		
	КонецЕсли;
	
	ДополнениеПредставления = "";
	Если ОбновитьДанныеРасчетаСтажей Тогда
		
		Если (Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Лет <> Лет
			Или Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Месяцев <> Месяцев
			Или Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Дней <> Дней) Тогда
			
			Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Изменен = Истина;
			
			Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Лет = Лет;
			Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Месяцев = Месяцев;
			Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Дней = Дней;
			
		КонецЕсли;
		
	Иначе
		
		Если Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Пользовательский Тогда
			ДополнениеПредставления = НСтр("ru = 'на';
											|en = 'in'") + " " + Формат(Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].ДатаОтсчета, "ДЛФ=D");
		ИначеЕсли (Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Лет <> Лет
			Или Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Месяцев <> Месяцев
			Или Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Дней <> Дней) Тогда
			
			Форма.Модифицированность = Истина;
			Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Изменен = Истина;
			
			Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Лет = Лет;
			Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Месяцев = Месяцев;
			Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Дней = Дней;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеПродолжительности = ПредставлениеПродолжительностиСтажа(
		Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Лет,
		Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Месяцев,
		Форма.ДанныеРасчетаСтажей[ИндексВидаСтажа].Дней);
	
	Если Не ПустаяСтрока(ДополнениеПредставления) Тогда
		
		ПредставлениеПродолжительности = ПредставлениеПродолжительности
			+ " (" + ДополнениеПредставления + ")";
		
	КонецЕсли;
	
	УстановитьПредставлениеСтажа(Форма, ИндексВидаСтажа, ПредставлениеПродолжительности);
	
	Если ПредставленияНакопленного.Количество() > 0 Тогда
		Особенность = Форма.ВидыСтажей[ИндексВидаСтажа].Представление + ": " + СтрСоединить(ПредставленияНакопленного, ", ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПродолжительностьСтажа(Знач ДатаНачала, Знач ДатаОкончания, ДатаРасчетаСтажа, РазмерМесяцев = 0, РазмерДней = 1)
	
	ДанныеСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
	ДанныеСтажа.ДатаОтсчета = ДатаНачала;
	
	ДанныеСтажа.Лет = Цел(РазмерМесяцев / 12);
	
	ДанныеСтажа.РазмерМесяцев = РазмерМесяцев;
	ДанныеСтажа.Месяцев = РазмерМесяцев - ДанныеСтажа.Лет * 12;
	
	ДанныеСтажа.РазмерДней = РазмерДней;
	ДанныеСтажа.Дней = РазмерДней;
	
	Если Не ЗначениеЗаполнено(ДатаОкончания)
		Или ДатаОкончания > ДатаРасчетаСтажа Тогда
		
		ДатаОкончания = НачалоДня(ДатаРасчетаСтажа);
		
	КонецЕсли;
	
	Продолжительность = ЗарплатаКадрыРасширенныйКлиентСервер.ПродолжительностьСтажа(
		ДанныеСтажа, ДатаОкончания);
	
	Возврат Продолжительность;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПродолжительностиСтажа(Лет, Месяцев, Дней)
	
	ПредставлениеСтажа = "";
	
	Если Лет > 0 Тогда
		ПредставлениеСтажа = СтрокаСЧислом(НСтр("ru = ';%1г;;%1г;%1л;%1л';
												|en = ';%1year;;%1year;%1year;%1year'"), Лет, ВидЧисловогоЗначения.Количественное);
	КонецЕсли;
	
	Если Месяцев > 0 Тогда
		ПредставлениеСтажа = ПредставлениеСтажа + Месяцев + НСтр("ru = 'м';
																|en = 'm'");
	КонецЕсли;
	
	Если Дней > 0 Тогда
		ПредставлениеСтажа = ПредставлениеСтажа + Дней + НСтр("ru = 'д';
																|en = 'd'");
	Иначе
		
		Если Лет = 0 И Месяцев = 0 Тогда
			ПредставлениеСтажа = "0" + НСтр("ru = 'д';
											|en = 'd'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеСтажа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеСтажа(Форма, ИндексВидаСтажа, ПредставлениеСтажа)
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма,
		"ПредставлениеСтажа" + ИндексВидаСтажа,
		ПредставлениеСтажа);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовФормы(Форма)
	
	ТекстыПодсказки = Новый Массив;
	Для Каждого ЭлементСписка Из Форма.ВидыСтажей Цикл
		
		ИндексВидаСтажа = Форма.ВидыСтажей.Индекс(ЭлементСписка);
		
		Если ЭлементСписка.Пометка Тогда
			ТекстыПодсказки.Добавить(ЭлементСписка.Представление);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКолонок" + ИндексВидаСтажа,
			"Видимость",
			ЭлементСписка.Пометка);
		
	КонецЦикла;
	
	Если ТекстыПодсказки.Количество() > 0 Тогда
		ТекстПодсказки = НСтр("ru = 'Расчет стажей';
								|en = 'Calculation of service lengths'") + ": " + СтрСоединить(ТекстыПодсказки, ", ");
	Иначе
		ТекстПодсказки = "";
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		"ВидыСтажаГруппа",
		ТекстПодсказки);
	
КонецПроцедуры

&НаСервере
Функция ВозвращаемыеКоллекции()
	
	ВозвращаемоеЗначение = Новый Структура;
	
	СписокВыбранных = Новый Массив;
	Для Каждого ЭлементСписка Из ВидыСтажей Цикл
		
		Если ЭлементСписка.Пометка Тогда
			
			СписокВыбранных.Добавить(ЭлементСписка.Значение);
			
			// Обновляем только если изменяли данные расчета стажа
			ИндексВидаСтажа = ВидыСтажей.Индекс(ЭлементСписка);
			Если Не ДанныеРасчетаСтажей[ИндексВидаСтажа].Изменен Тогда
				Продолжить;
			КонецЕсли;
			
			ВидСтажа = ЭлементСписка.Значение;
			
			// Обновление стажей физических лиц
			ДатаОтсчета = НачалоДня(ДатаКалькуляцииСтажей - 1);
			Для Каждого СтрокаТрудоваяДеятельность Из ТрудоваяДеятельностьФизическихЛиц Цикл
				
				Если СтрокаТрудоваяДеятельность["Используется" + ИндексВидаСтажа] = 1 Тогда
					
					Если ДатаКалькуляцииСтажей >= СтрокаТрудоваяДеятельность.ДатаНачала
						И (ДатаКалькуляцииСтажей <= СтрокаТрудоваяДеятельность.ДатаОкончания
							Или Не ЗначениеЗаполнено(СтрокаТрудоваяДеятельность.ДатаОкончания)) Тогда
						
						ДатаОтсчета = ДатаКалькуляцииСтажей;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Удаление строк стажей с датой отсчета, равной дате калькуляции
			СтрокиСтажа = СтажиФизическихЛиц.НайтиСтроки(Новый Структура("ВидСтажа,ДатаОтсчета", ВидСтажа, ДатаОтсчета));
			Для Каждого УдаляемаяСтрока Из СтрокиСтажа Цикл
				СтажиФизическихЛиц.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			// Сброс признака расчета по рудовой деятельности в строках с другими датами отсчета
			СтрокиСтажаПоТрудовойДеятельности = СтажиФизическихЛиц.НайтиСтроки(Новый Структура("ВидСтажа,ПоТрудовойДеятельности", ВидСтажа, Истина));
			Если СтрокиСтажаПоТрудовойДеятельности.Количество() > 0 Тогда
				СтрокиСтажаПоТрудовойДеятельности[0].ПоТрудовойДеятельности = Ложь;
			КонецЕсли;
			
			// Добавление строки с рассчитанным стажем
			РазмерМесяцев = ДанныеРасчетаСтажей[ИндексВидаСтажа].Месяцев + ДанныеРасчетаСтажей[ИндексВидаСтажа].Лет * 12;
			РазмерДней = ДанныеРасчетаСтажей[ИндексВидаСтажа].Дней;
			Если РазмерМесяцев <> 0 Или РазмерДней <> 0 Тогда
				
				СтрокаСтажа = СтажиФизическихЛиц.Добавить();
				СтрокаСтажа.ФизическоеЛицо = ФизическоеЛицоСсылка;
				СтрокаСтажа.ВидСтажа = ВидСтажа;
				СтрокаСтажа.Период = ДатаОтсчета;
				СтрокаСтажа.ДатаОтсчета = ДатаОтсчета;
				СтрокаСтажа.ПоТрудовойДеятельности = Истина;
				СтрокаСтажа.РазмерМесяцев = РазмерМесяцев;
				СтрокаСтажа.РазмерДней = РазмерДней;
				
			КонецЕсли;
			
			// Обновление признаков учета строки в расчете стажа
			
			СтрокиВидовСтажа = ВидыСтажаТрудовойДеятельностиФизическихЛиц.НайтиСтроки(Новый Структура("ВидСтажа", ВидСтажа));
			Для Каждого СтрокаВидовСтажа Из СтрокиВидовСтажа Цикл
				ВидыСтажаТрудовойДеятельностиФизическихЛиц.Удалить(СтрокаВидовСтажа);
			КонецЦикла;
			
			Для Каждого СтрокаТрудоваяДеятельностьФизическихЛиц Из ТрудоваяДеятельностьФизическихЛиц Цикл
				
				Если СтрокаТрудоваяДеятельностьФизическихЛиц["Используется" + ИндексВидаСтажа] = 1 Тогда
					
					СтрокаВидовСтажа = ВидыСтажаТрудовойДеятельностиФизическихЛиц.Добавить();
					СтрокаВидовСтажа.ФизическоеЛицо = ФизическоеЛицоСсылка;
					СтрокаВидовСтажа.ВидСтажа = ВидСтажа;
					СтрокаВидовСтажа.ИдентификаторЗаписи = СтрокаТрудоваяДеятельностьФизическихЛиц.ИдентификаторЗаписи;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.Вставить("СтажиФизическихЛиц",
		ОбщегоНазначения.ТаблицаЗначенийВМассив(СтажиФизическихЛиц.Выгрузить()));
	
	ВозвращаемоеЗначение.Вставить("ТрудоваяДеятельностьФизическихЛиц",
		ОбщегоНазначения.ТаблицаЗначенийВМассив(ТрудоваяДеятельностьФизическихЛиц.Выгрузить()));
	
	ВозвращаемоеЗначение.Вставить("ВидыСтажаТрудовойДеятельностиФизическихЛиц",
		ОбщегоНазначения.ТаблицаЗначенийВМассив(ВидыСтажаТрудовойДеятельностиФизическихЛиц.Выгрузить()));
	
	Если СписокВыбранных.Количество() > 0 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РасчетСтажаПоТрудовойДеятельности", "СписокВыбранныхСтажей", СписокВыбранных);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура РасставитьФлажки()
	
	Для Каждого ЭлементСписка Из ВидыСтажей Цикл
		
		ВидСтажа = ЭлементСписка.Значение;
		ИндексВидаСтажа = ВидыСтажей.Индекс(ЭлементСписка);
		
		Если ДанныеРасчетаСтажей[ИндексВидаСтажа].Пользовательский Тогда
			
			Для Каждого СтрокаТрудовойДеятельности Из ТрудоваяДеятельностьФизическихЛиц Цикл
				СтрокаТрудовойДеятельности["Используется" + ИндексВидаСтажа] = 2;
			КонецЦикла;
			
		Иначе
			
			СтрокиВидовСтажа = ВидыСтажаТрудовойДеятельностиФизическихЛиц.НайтиСтроки(Новый Структура("ВидСтажа", ВидСтажа));
			Для Каждого СтрокаВидовСтажа Из СтрокиВидовСтажа Цикл
				
				СтрокиТрудовойДеятельности = ТрудоваяДеятельностьФизическихЛиц.НайтиСтроки(Новый Структура("ИдентификаторЗаписи", СтрокаВидовСтажа.ИдентификаторЗаписи));
				Для Каждого СтрокаТрудовойДеятельности Из СтрокиТрудовойДеятельности Цикл
					СтрокаТрудовойДеятельности["Используется" + ИндексВидаСтажа] = 1;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОсобенностиРасчетаСтажа(Форма, ИндексВидаСтажа, Особенность)
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, "ОсобенностиРасчета" + ИндексВидаСтажа, Особенность);
	
	ОбновитьОсобенностиРасчетаСтажа(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОсобенностиРасчетаСтажа(Форма)
	
	Особенности = Новый Массив;
	Для ИндексВидаСтажа = 0 По Форма.ВидыСтажей.Количество() - 1 Цикл
		
		Если Не Форма.ВидыСтажей[ИндексВидаСтажа].Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Особенность = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ОсобенностиРасчета" + ИндексВидаСтажа);
		Если Не ПустаяСтрока(Особенность) Тогда
			Особенности.Добавить(Особенность);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		"ТрудоваяДеятельностьФизическихЛиц",
		СтрСоединить(Особенности, Символы.ПС));
	
КонецПроцедуры

#КонецОбласти
