#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверитьКорректностьВидовЗанятостиСотрудников(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиКорректностиВидовЗанятостиСотрудников(
		ПараметрыПроверки.ДатаНачалаПроверки, ПараметрыПроверки.ЛимитПроблем);
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		ТаблицаПроблем = Результат.Выгрузить();
		
		Регистраторы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПроблем, "Регистратор", Истина);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регистраторы, Null);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регистраторы, Неопределено);
		
		Ответственные = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Регистраторы, "Ответственный");
		
		Для Каждого СтрокаПроблемы Из ТаблицаПроблем Цикл
		
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.Регистратор, ПараметрыПроверки);
			Проблема.Ответственный = Ответственные.получить(СтрокаПроблемы.Регистратор);
			
			Если СтрокаПроблемы.КонфликтыОсновныхВидовЗанятости Тогда
				УточнениеПроблемы = НСтр("ru = 'Зарегистрировано более одного основного вида занятости';
										|en = 'More than one main employment is registered'");
			ИначеЕсли СтрокаПроблемы.НетОсновногоВидаЗанятости Тогда
				УточнениеПроблемы = НСтр("ru = 'Совместительство (или подработка), в отсутствии рабочего места с основным видом занятости';
										|en = 'Secondary employment (or side job) in absence of the work place with the main employment'");
			ИначеЕсли СтрокаПроблемы.НеЗаполненВидЗанятости Тогда
				УточнениеПроблемы = НСтр("ru = 'Не заполнен вид занятости в движениях по регистрам';
										|en = 'Employment type is empty in register records'");
			КонецЕсли;
			
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаПоследовательностиКадровыхСобытийСотрудников(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПроблем = РезультатПроверкиПоследовательностиКадровыхСобытийСотрудников(
		ПараметрыПроверки.ДатаНачалаПроверки, ПараметрыПроверки.ЛимитПроблем);
	Если ТаблицаПроблем.Количество() > 0 Тогда
		
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Регистраторы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПроблем, "Регистратор", Истина);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регистраторы, Null);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регистраторы, Неопределено);
		
		Ответственные = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Регистраторы, "Ответственный");
		
		Для Каждого СтрокаПроблемы Из ТаблицаПроблем Цикл
		
			УточнениеПроблемы = "";
			Если СтрокаПроблемы.СобытияНачалаУчетаПовторяются Тогда
				УточнениеПроблемы = НСтр("ru = 'Дважды зарегистрированы события ""Прием на работу"" (""Начало учета"")';
										|en = '""Hiring"" (""Accounting start"") events are registered two times'");
			ИначеЕсли СтрокаПроблемы.СобытияДоПриемаНаРаботу Тогда
				УточнениеПроблемы = НСтр("ru = 'Зарегистрированы кадровые события до события ""Прием на работу"" или ""Начало учета""';
										|en = 'HR events exist before ""Hiring"" or ""Accounting start"" event'");
			ИначеЕсли СтрокаПроблемы.СобытияПослеУвольнения Тогда
				УточнениеПроблемы = НСтр("ru = 'Зарегистрированы кадровые события после события ""Увольнение""';
										|en = 'HR events exist after ""Dismissal"" event'");
			ИначеЕсли СтрокаПроблемы.СобытиеУвольненияБезПриема Тогда
				УточнениеПроблемы = НСтр("ru = 'Зарегистрировано кадровое событие ""Увольнение"", но нет события ""Прием на работу"" или ""Начало учета""';
										|en = 'HR event ""Dismissal"" has been registered, but there is no ""Hiring"" or ""Accounting start"" event'");
			ИначеЕсли СтрокаПроблемы.СобытиеУвольнениеВДеньНачалаУчета Тогда
				УточнениеПроблемы = НСтр("ru = 'Зарегистрировано кадровое событие ""Увольнение"" в день начала учета документом ""Прием на работу"" (""Начало учета"")';
										|en = 'HR event ""Dismissal"" has been registered in the accounting start date by ""Hiring"" (""Accounting start"") document'");
			КонецЕсли;
			
			Если Не ПустаяСтрока(УточнениеПроблемы) Тогда
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.Регистратор, ПараметрыПроверки);
				Проблема.Ответственный = Ответственные.получить(СтрокаПроблемы.Регистратор);
				Проблема.УточнениеПроблемы = УточнениеПроблемы;
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиДатыРождения(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиДостаточностиВводаПервичнойИнформации();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = "";
			Если Не ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
				УточнениеПроблемы = НСтр("ru = 'Не задана дата рождения';
										|en = 'Date of birth not specified'");
			ИначеЕсли Выборка.ДатаРождения < ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений()
				Или Выборка.ДатаРождения > ДобавитьМесяц(ТекущаяДатаСеанса(), - 120) Тогда
				
				УточнениеПроблемы = СтрШаблон(НСтр("ru = 'Подозрительная дата рождения - %1.';
													|en = 'Suspicious date of birth - %1.'"), Формат(Выборка.ДатаРождения, "ДЛФ=DD"));
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(УточнениеПроблемы) Тогда
				
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = УточнениеПроблемы;
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиИНН(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиДостаточностиВводаПервичнойИнформации();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = "";
			РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Выборка.ИНН, Ложь, УточнениеПроблемы);
			
			Если Не ПустаяСтрока(УточнениеПроблемы) Тогда
				
				Если Не ЗначениеЗаполнено(Выборка.ИНН) Тогда
					УточнениеПроблемы = НСтр("ru = 'Не задан ИНН.';
											|en = 'TIN is not specified.'") + Символы.ПС + УточнениеПроблемы;
				КонецЕсли;
				
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
				Проблема.ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Предупреждение;
				Проблема.УточнениеПроблемы = УточнениеПроблемы;
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиСНИЛС(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиДостаточностиВводаПервичнойИнформации();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = "";
			Если Не ЗначениеЗаполнено(Выборка.СтраховойНомерПФР) Тогда
				УточнениеПроблемы = НСтр("ru = 'Не задан СНИЛС.';
										|en = 'SNILS is not specified.'");
			Иначе
				РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(Выборка.СтраховойНомерПФР, УточнениеПроблемы);
			КонецЕсли;
			
			Если Не ПустаяСтрока(УточнениеПроблемы) Тогда
				
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
				Проблема.ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Предупреждение;
				Проблема.УточнениеПроблемы = УточнениеПроблемы;
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиГражданства(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиЗаполненностиГражданства();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = СтрШаблон(НСтр("ru = 'На дату начала учета (%1) нет сведений о стране гражданства.';
												|en = 'No data of the country of citizenship exist as of the accounting start date (%1).'"), Выборка.Период);
			
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиПаспортныхДанных(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РезультатПроверкиЗаполненностиПаспортныхДанных();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = НСтр("ru = 'Отсутствуют паспортные данные или заполнены не все поля.';
											|en = 'Passport data is missing or not all fields are filled in.'");
		УстановитьПривилегированныйРежим(Истина);
		КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаАктуальностиПаспортныхДанных(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РезультатПроверкиАктуальностиПаспортныхДанных();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Сотрудник Из Результат Цикл
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Сотрудник.Ключ, ПараметрыПроверки);
		Проблема.ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Предупреждение;
		Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По достижении %1 лет не были изменены паспортные данные.';
				|en = 'The passport data has not been changed after reaching %1 years of age.'"),
			Сотрудник.Значение);
		УстановитьПривилегированныйРежим(Истина);
		КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаНаличияСтатусаФизическихЛицКакНалогоплательщиковНДФЛ(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиНаличияСтатусаФизическихЛицКакНалогоплательщиковНДФЛ();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = СтрШаблон(НСтр("ru = 'На дату начала учета (%1) не задан статус налогоплательщика.';
												|en = 'No taxpayer status is set as of the accounting start date (%1).'"), Выборка.Период);
			
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаНаличияСтатусаЗастрахованныхФизическихЛиц(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиНаличияСтатусаЗастрахованныхФизическихЛиц();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = СтрШаблон(НСтр("ru = 'На дату начала учета (%1) не задан страховой статус.';
												|en = 'No insurance status is set as of the accounting start date (%1).'"), Выборка.Период);
			
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаПроведенияИлиУдаленияДокументов(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРасчетныйМесяц = ЗарплатаКадрыБазовый.РасчетныйМесяц(ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = РезультатПроверкиПроведенияИлиУдаленияДокументов(ТекущийРасчетныйМесяц);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка.Метаданные().Проведение <> Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Продолжить;
		КонецЕсли;
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Ссылка, ПараметрыПроверки);
		Проблема.ВажностьПроблемы = Перечисления["ВажностьПроблемыУчета"].Предупреждение;
		Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ в текущем расчетном месяце (%1) не проведен, но и не помечен на удаление.';
				|en = 'Document is neither posted not marked for deletion in the current settlement month (%1).'"),
			ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ТекущийРасчетныйМесяц));
		УстановитьПривилегированныйРежим(Истина);
		КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиПола(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛица КАК ФизическиеЛица";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
		ПараметрыПолучения.ОкончаниеПериода = ТекущаяДатаСеанса();
		ПараметрыПолучения.НачалоПериода = НачалоГода(ПараметрыПолучения.ОкончаниеПериода);
		
		Если Месяц(ПараметрыПолучения.ОкончаниеПериода) < 2 Тогда
			ПараметрыПолучения.НачалоПериода = НачалоГода(ПараметрыПолучения.НачалоПериода - 1);
		КонецЕсли;
		
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолучения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник
			|ИЗ
			|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			УточнениеПроблемы = НСтр("ru = 'У сотрудника не указан пол.';
									|en = 'Gender is not specified for the employee.'");
			
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатПроверкиКорректностиВидовЗанятостиСотрудников(ДатаНачалаПроверки, ЛимитПроблем)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Если ЗначениеЗаполнено(ДатаНачалаПроверки) Тогда
		ДатаНачала = "ДАТАВРЕМЯ(" + Формат(ДатаНачалаПроверки, "ДФ='гггг, ММ, дд, ЧЧ, мм, сс'; ДП=") + ")";
	Иначе
		ДатаНачала = "ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	 
	Запрос.Текст =
		"ВЫБРАТЬ
		|	" + ДатаНачала + " КАК ДатаНачала,
		|	&МаксимальнаяДата КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОтборРегистра";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборРегистра"));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ВидыЗанятостиСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборРегистра"));
	
	ОсновныеВидыЗанятости = Новый Массив;
	ОсновныеВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ОсновныеВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.Совместительство);
	
	Запрос.УстановитьПараметр("ОсновныеВидыЗанятости", ОсновныеВидыЗанятости);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаСОднимСотрудником
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.ФизическоеЛицо
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КадроваяИсторияСотрудников.Сотрудник) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛицаСОднимСотрудником.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаСОднимСотрудникомИНеВернымВидомЗанятости
		|ИЗ
		|	ВТФизическиеЛицаСОднимСотрудником КАК ФизическиеЛицаСОднимСотрудником
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО ФизическиеЛицаСОднимСотрудником.ФизическоеЛицо = ВидыЗанятостиСотрудников.ФизическоеЛицо
		|ГДЕ
		|	НЕ ВидыЗанятостиСотрудников.ВидЗанятости В (&ОсновныеВидыЗанятости)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТФизическиеЛицаСОднимСотрудником.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаИсключаемыеИзПроверки
		|ИЗ
		|	ВТФизическиеЛицаСОднимСотрудником КАК ВТФизическиеЛицаСОднимСотрудником
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСОднимСотрудникомИНеВернымВидомЗанятости КАК ВТФизическиеЛицаСОднимСотрудникомИНеВернымВидомЗанятости
		|		ПО ВТФизическиеЛицаСОднимСотрудником.ФизическоеЛицо = ВТФизическиеЛицаСОднимСотрудникомИНеВернымВидомЗанятости.ФизическоеЛицо
		|ГДЕ
		|	ВТФизическиеЛицаСОднимСотрудникомИНеВернымВидомЗанятости.ФизическоеЛицо ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТВсеПериоды
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсключаемыеИзПроверки КАК ФизическиеЛицаИсключаемыеИзПроверки
		|		ПО КадроваяИсторияСотрудников.ФизическоеЛицо = ФизическиеЛицаИсключаемыеИзПроверки.ФизическоеЛицо
		|ГДЕ
		|	ЕСТЬNULL(КадроваяИсторияСотрудников.ВидСобытия, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НеподтвержденныеДанные)
		|	И ФизическиеЛицаИсключаемыеИзПроверки.ФизическоеЛицо ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыЗанятостиСотрудников.Период,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо,
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.Сотрудник
		|ИЗ
		|	ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсключаемыеИзПроверки КАК ФизическиеЛицаИсключаемыеИзПроверки
		|		ПО ВидыЗанятостиСотрудников.ФизическоеЛицо = ФизическиеЛицаИсключаемыеИзПроверки.ФизическоеЛицо
		|ГДЕ
		|	ФизическиеЛицаИсключаемыеИзПроверки.ФизическоеЛицо ЕСТЬ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПериоды.Период КАК Период,
		|	ВсеПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеПериоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВсеПериоды.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ВидыЗанятостиСотрудников.Период) КАК ПериодВидаЗанятости
		|ПОМЕСТИТЬ ВТВсеПериодыСПериодомВидовЗанятости
		|ИЗ
		|	ВТВсеПериоды КАК ВсеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО ВсеПериоды.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|			И ВсеПериоды.Период >= ВидыЗанятостиСотрудников.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеПериоды.Период,
		|	ВсеПериоды.Сотрудник,
		|	ВсеПериоды.ГоловнаяОрганизация,
		|	ВсеПериоды.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПериоды.Период КАК Период,
		|	ВсеПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеПериоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВсеПериоды.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) > ДАТАВРЕМЯ(1, 1, 1)
		|				И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <= ВсеПериоды.Период
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Уволен,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) > ДАТАВРЕМЯ(1, 1, 1)
		|				И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <= ВсеПериоды.Период
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(ВидыЗанятостиСотрудников.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЗанятости,
		|	ЕСТЬNULL(ВидыЗанятостиСотрудников.Регистратор, КадроваяИсторияСотрудников.Регистратор) КАК Регистратор
		|ПОМЕСТИТЬ ВТВсеПериодыСВидомЗанятости
		|ИЗ
		|	ВТВсеПериодыСПериодомВидовЗанятости КАК ВсеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО ВсеПериоды.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|			И ВсеПериоды.ПериодВидаЗанятости = ВидыЗанятостиСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ВсеПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И ВсеПериоды.Период = КадроваяИсторияСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ВсеПериоды.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И ВсеПериоды.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗанятостиСотрудников.Период КАК Период,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.Сотрудник КАК Сотрудник,
		|	ВидыЗанятостиСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	ЕСТЬNULL(МИНИМУМ(ВидыЗанятостиСотрудниковПериодыИзменений.Период), &МаксимальнаяДата) КАК СледующийПериод
		|ПОМЕСТИТЬ ВТПериодыИзмененияВидовЗанятости
		|ИЗ
		|	ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудниковПериодыИзменений
		|		ПО ВидыЗанятостиСотрудников.Сотрудник = ВидыЗанятостиСотрудниковПериодыИзменений.Сотрудник
		|			И ВидыЗанятостиСотрудников.Период < ВидыЗанятостиСотрудниковПериодыИзменений.Период
		|			И ВидыЗанятостиСотрудников.ВидЗанятости <> ВидыЗанятостиСотрудниковПериодыИзменений.ВидЗанятости
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗанятостиСотрудников.Период,
		|	ВидыЗанятостиСотрудников.Сотрудник,
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо,
		|	ВидыЗанятостиСотрудников.ВидЗанятости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ПериодыИзмененияВидовЗанятости.Период) КАК Период,
		|	ПериодыИзмененияВидовЗанятости.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыИзмененияВидовЗанятости.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыИзмененияВидовЗанятости.Сотрудник КАК Сотрудник,
		|	ПериодыИзмененияВидовЗанятости.ВидЗанятости КАК ВидЗанятости,
		|	ВЫБОР
		|		КОГДА ПериодыИзмененияВидовЗанятости.СледующийПериод = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ПериодыИзмененияВидовЗанятости.СледующийПериод
		|		КОГДА ПериодыИзмененияВидовЗанятости.СледующийПериод = &МаксимальнаяДата
		|			ТОГДА ПериодыИзмененияВидовЗанятости.СледующийПериод
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыИзмененияВидовЗанятости.СледующийПериод, ДЕНЬ, -1)
		|	КОНЕЦ КАК СледующийПериод
		|ПОМЕСТИТЬ ВТПериодыДействияВидовЗанятости
		|ИЗ
		|	ВТПериодыИзмененияВидовЗанятости КАК ПериодыИзмененияВидовЗанятости
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзмененияВидовЗанятости.Сотрудник,
		|	ПериодыИзмененияВидовЗанятости.ГоловнаяОрганизация,
		|	ПериодыИзмененияВидовЗанятости.ФизическоеЛицо,
		|	ПериодыИзмененияВидовЗанятости.ВидЗанятости,
		|	ПериодыИзмененияВидовЗанятости.СледующийПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВсеПериодыСВидомЗанятости.Период КАК Период,
		|	ВсеПериодыСВидомЗанятости.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеПериодыСВидомЗанятости.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВсеПериодыСВидомЗанятости.Сотрудник КАК Сотрудник,
		|	ВсеПериодыСВидомЗанятости.ВидЗанятости КАК ВидЗанятости,
		|	ВсеПериодыСВидомЗанятости.Регистратор КАК Регистратор,
		|	ВЫРАЗИТЬ(NULL КАК ДАТА) КАК СледующийПериод,
		|	ВЫРАЗИТЬ(NULL КАК ДАТА) КАК ПериодКонфликта,
		|	ВЫРАЗИТЬ(NULL КАК Справочник.Сотрудники) КАК СотрудникКонфликта,
		|	ВЫРАЗИТЬ(NULL КАК Перечисление.ВидыЗанятости) КАК ВидЗанятостиКонфликта,
		|	ИСТИНА КАК НеЗаполненВидЗанятости,
		|	ЛОЖЬ КАК КонфликтыОсновныхВидовЗанятости,
		|	ЛОЖЬ КАК НетОсновногоВидаЗанятости
		|ИЗ
		|	ВТВсеПериодыСВидомЗанятости КАК ВсеПериодыСВидомЗанятости
		|ГДЕ
		|	ВсеПериодыСВидомЗанятости.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И НЕ ВсеПериодыСВидомЗанятости.Уволен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыДействияВидовЗанятости.Период,
		|	ПериодыДействияВидовЗанятости.ФизическоеЛицо,
		|	ПериодыДействияВидовЗанятости.ГоловнаяОрганизация,
		|	ПериодыДействияВидовЗанятости.Сотрудник,
		|	ПериодыДействияВидовЗанятости.ВидЗанятости,
		|	ВидыЗанятостиСотрудников.Регистратор,
		|	ПериодыДействияВидовЗанятости.СледующийПериод,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Период,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятостиКонфликтующие
		|		ПО ПериодыДействияВидовЗанятости.ГоловнаяОрганизация = ПериодыДействияВидовЗанятостиКонфликтующие.ГоловнаяОрганизация
		|			И ПериодыДействияВидовЗанятости.ФизическоеЛицо = ПериодыДействияВидовЗанятостиКонфликтующие.ФизическоеЛицо
		|			И ПериодыДействияВидовЗанятости.Сотрудник <> ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник
		|			И (ПериодыДействияВидовЗанятости.Период МЕЖДУ ПериодыДействияВидовЗанятостиКонфликтующие.Период И ПериодыДействияВидовЗанятостиКонфликтующие.СледующийПериод)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудников
		|		ПО (ПериодыДействияВидовЗанятостиКонфликтующие.Период = ВидыЗанятостиСотрудников.Период)
		|			И (ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник)
		|			И (ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости = ВидыЗанятостиСотрудников.ВидЗанятости)
		|ГДЕ
		|	ПериодыДействияВидовЗанятости.ВидЗанятости В(&ОсновныеВидыЗанятости)
		|	И ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости В(&ОсновныеВидыЗанятости)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыДействияВидовЗанятости.Период,
		|	ПериодыДействияВидовЗанятости.ФизическоеЛицо,
		|	ПериодыДействияВидовЗанятости.ГоловнаяОрганизация,
		|	ПериодыДействияВидовЗанятости.Сотрудник,
		|	ПериодыДействияВидовЗанятости.ВидЗанятости,
		|	ВидыЗанятостиСотрудников.Регистратор,
		|	ПериодыДействияВидовЗанятости.СледующийПериод,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Период,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудников
		|		ПО ПериодыДействияВидовЗанятости.Период = ВидыЗанятостиСотрудников.Период
		|			И ПериодыДействияВидовЗанятости.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|			И ПериодыДействияВидовЗанятости.ВидЗанятости = ВидыЗанятостиСотрудников.ВидЗанятости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятостиКонфликтующие
		|		ПО ПериодыДействияВидовЗанятости.ГоловнаяОрганизация <> ПериодыДействияВидовЗанятостиКонфликтующие.ГоловнаяОрганизация
		|			И ПериодыДействияВидовЗанятости.ФизическоеЛицо = ПериодыДействияВидовЗанятостиКонфликтующие.ФизическоеЛицо
		|			И ПериодыДействияВидовЗанятости.Сотрудник <> ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник
		|			И (ПериодыДействияВидовЗанятости.Период МЕЖДУ ПериодыДействияВидовЗанятостиКонфликтующие.Период И ПериодыДействияВидовЗанятостиКонфликтующие.СледующийПериод)
		|ГДЕ
		|	ПериодыДействияВидовЗанятости.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|	И ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыДействияВидовЗанятости.Период,
		|	ПериодыДействияВидовЗанятости.ФизическоеЛицо,
		|	ПериодыДействияВидовЗанятости.ГоловнаяОрганизация,
		|	ПериодыДействияВидовЗанятости.Сотрудник,
		|	ПериодыДействияВидовЗанятости.ВидЗанятости,
		|	ВидыЗанятостиСотрудников.Регистратор,
		|	ПериодыДействияВидовЗанятости.СледующийПериод,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Период,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудников
		|		ПО ПериодыДействияВидовЗанятости.Период = ВидыЗанятостиСотрудников.Период
		|			И ПериодыДействияВидовЗанятости.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|			И ПериодыДействияВидовЗанятости.ВидЗанятости = ВидыЗанятостиСотрудников.ВидЗанятости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятостиКонфликтующие
		|		ПО ПериодыДействияВидовЗанятости.ГоловнаяОрганизация = ПериодыДействияВидовЗанятостиКонфликтующие.ГоловнаяОрганизация
		|			И ПериодыДействияВидовЗанятости.ФизическоеЛицо = ПериодыДействияВидовЗанятостиКонфликтующие.ФизическоеЛицо
		|			И ПериодыДействияВидовЗанятости.Сотрудник <> ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник
		|			И (ПериодыДействияВидовЗанятости.Период МЕЖДУ ПериодыДействияВидовЗанятостиКонфликтующие.Период И ПериодыДействияВидовЗанятостиКонфликтующие.СледующийПериод)
		|			И (ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости В (&ОсновныеВидыЗанятости))
		|ГДЕ
		|	НЕ ПериодыДействияВидовЗанятости.ВидЗанятости В (&ОсновныеВидыЗанятости)
		|	И ПериодыДействияВидовЗанятости.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ГоловнаяОрганизация,
		|	Период,
		|	Сотрудник";
	
	Если ЗначениеЗаполнено(ЛимитПроблем) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(ЛимитПроблем, "ЧГ="));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиПоследовательностиКадровыхСобытийСотрудников(ДатаНачалаПроверки, ЛимитПроблем)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Если ЗначениеЗаполнено(ДатаНачалаПроверки) Тогда
		ДатаНачала = "ДАТАВРЕМЯ(" + Формат(ДатаНачалаПроверки, "ДФ='гггг, ММ, дд, ЧЧ, мм, сс'; ДП=") + ")";
	Иначе
		ДатаНачала = "ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	 
	Запрос.Текст =
		"ВЫБРАТЬ
		|	" + ДатаНачала + " КАК ДатаНачала,
		|	&МаксимальнаяДата КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОтборРегистра";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "<>" , Перечисления.ВидыКадровыхСобытий.НеподтвержденныеДанные);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборРегистра"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОшибкиУчета.Период КАК Период,
		|	ОшибкиУчета.Регистратор КАК Регистратор,
		|	ОшибкиУчета.Сотрудник КАК Сотрудник,
		|	ОшибкиУчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ОшибкиУчета.СобытияДоПриемаНаРаботу) КАК СобытияДоПриемаНаРаботу,
		|	МАКСИМУМ(ОшибкиУчета.СобытияПослеУвольнения) КАК СобытияПослеУвольнения,
		|	МАКСИМУМ(ОшибкиУчета.СобытиеУвольненияБезПриема) КАК СобытиеУвольненияБезПриема,
		|	МАКСИМУМ(ОшибкиУчета.СобытияНачалаУчетаПовторяются) КАК СобытияНачалаУчетаПовторяются,
		|	МАКСИМУМ(ОшибкиУчета.СобытиеУвольнениеВДеньНачалаУчета) КАК СобытиеУвольнениеВДеньНачалаУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период КАК Период,
		|		КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ИСТИНА КАК СобытияДоПриемаНаРаботу,
		|		ЛОЖЬ КАК СобытияПослеУвольнения,
		|		ЛОЖЬ КАК СобытиеУвольненияБезПриема,
		|		ЛОЖЬ КАК СобытияНачалаУчетаПовторяются,
		|		ЛОЖЬ КАК СобытиеУвольнениеВДеньНачалаУчета
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И (НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ) > НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковКонфликтующие.Период, ДЕНЬ))
		|	ГДЕ
		|		НЕ КадроваяИсторияСотрудниковКонфликтующие.Период ЕСТЬ NULL
		|		И КадроваяИсторияСотрудников.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период,
		|		КадроваяИсторияСотрудников.Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И (КадроваяИсторияСотрудников.Период < НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковКонфликтующие.Период, ДЕНЬ))
		|	ГДЕ
		|		КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|		И НЕ КадроваяИсторияСотрудниковКонфликтующие.Период ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период,
		|		КадроваяИсторияСотрудников.Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ,
		|		ЛОЖЬ
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И (КадроваяИсторияСотрудниковКонфликтующие.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
		|	ГДЕ
		|		КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|		И КадроваяИсторияСотрудниковКонфликтующие.Период ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период,
		|		КадроваяИсторияСотрудников.Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И КадроваяИсторияСотрудников.Регистратор <> КадроваяИсторияСотрудниковКонфликтующие.Регистратор
		|				И (КадроваяИсторияСотрудниковКонфликтующие.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
		|	ГДЕ
		|		КадроваяИсторияСотрудников.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период,
		|		КадроваяИсторияСотрудников.Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И (НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковКонфликтующие.Период, ДЕНЬ))
		|				И (КадроваяИсторияСотрудниковКонфликтующие.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
		|	ГДЕ
		|		КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)) КАК ОшибкиУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ОшибкиУчета.Период,
		|	ОшибкиУчета.Регистратор,
		|	ОшибкиУчета.Сотрудник,
		|	ОшибкиУчета.ФизическоеЛицо";
	
	Если ЗначениеЗаполнено(ЛимитПроблем) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(ЛимитПроблем, "ЧГ="));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(ДатаНачалаПроверки) Тогда
		ЛожныеСрабатывания = Новый Соответствие();
		Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
			Если СтрокаРезультата.СобытиеУвольненияБезПриема Тогда
				ЛожныеСрабатывания.Вставить(СтрокаРезультата.Сотрудник, СтрокаРезультата);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ЛожныеСрабатывания) Тогда
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОбщегоНазначения.ВыгрузитьКолонку(ЛожныеСрабатывания, "Ключ"), "ДатаНачалаУчета", ТекущаяДатаСеанса());
			Для Каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
				Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаНачалаУчета) Тогда
					ДанныеПроверки = ЛожныеСрабатывания.Получить(КадровыеДанныеСотрудника.Сотрудник);
					ДанныеПроверки.СобытиеУвольненияБезПриема = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиДостаточностиВводаПервичнойИнформации()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса()) - 1));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ФизическиеЛица.ИНН КАК ИНН,
		|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиЗаполненностиГражданства()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГражданствоФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТРаботающиеСотрудникиФизическихЛиц", "ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Период КАК Период,
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГражданствоФизическихЛицСрезПоследних КАК ГражданствоФизическихЛиц
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = ГражданствоФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	ГражданствоФизическихЛиц.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиЗаполненностиПаспортныхДанных()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ЗарплатаКадрыБазовый.РасчетныйМесяц(ТекущаяДатаСеанса()));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ДокументыФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТРаботающиеСотрудникиФизическихЛиц", "ФизическоеЛицо"));
		
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустаяДата", ДАТА(1, 1, 1));
	Запрос.УстановитьПараметр("ПаспортРФ", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Период КАК Период,
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыФизическихЛицСрезПоследних КАК ДокументыФизическихЛиц
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДокументыФизическихЛиц.Физлицо ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			КОГДА ДокументыФизическихЛиц.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			КОГДА ДокументыФизическихЛиц.ВидДокумента = &ПаспортРФ
		|				ТОГДА ВЫБОР
		|						КОГДА ДокументыФизическихЛиц.Серия = &ПустаяСтрока
		|								ИЛИ ДокументыФизическихЛиц.Номер = &ПустаяСтрока
		|								ИЛИ ДокументыФизическихЛиц.ДатаВыдачи = &ПустаяДата
		|								ИЛИ ДокументыФизическихЛиц.КодПодразделения = &ПустаяСтрока
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиАктуальностиПаспортныхДанных()
	
	ВозрастыЗамены = ОбщегоНазначенияБЗККлиентСервер.ЗначенияВМассиве(45, 20);
	МесяцевНаЗамену = 2;
	НачалоПериода = ТекущаяДатаСеанса();
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыСотрудников.КадровыеДанные = "Возраст, ДатаРождения, ДатаУвольнения";
	ПараметрыСотрудников.НачалоПериода = НачалоПериода;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыСотрудников.Отборы, "Возраст", ">=", 20);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВТ, Истина, ПараметрыСотрудников);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиОрганизации", "Физлицо");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Физлицо", "ФизическоеЛицо");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ДокументыФизическихЛиц",
		МенеджерВТ,
		Ложь,
		ОписаниеФильтра);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПустаяДата", ДАТА(1, 1, 1));
	Запрос.УстановитьПараметр("ПаспортРФ", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиОрганизации.Возраст КАК Возраст,
		|	СотрудникиОрганизации.ДатаРождения КАК ДатаРождения,
		|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
		|	ДокументыФизическихЛиц.ДатаВыдачи КАК ДатаВыдачиПаспорта
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыФизическихЛицСрезПоследних КАК ДокументыФизическихЛиц
		|		ПО СотрудникиОрганизации.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо
		|			И (СотрудникиОрганизации.ДатаРождения <> &ПустаяДата)
		|			И (ДокументыФизическихЛиц.ДатаВыдачи <> &ПустаяДата)
		|			И (ДокументыФизическихЛиц.ВидДокумента = &ПаспортРФ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПроблемныеСотрудники = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Для Каждого ВозрастЗамены Из ВозрастыЗамены Цикл
			Если Выборка.Возраст < ВозрастЗамены Тогда
				Продолжить;
			КонецЕсли;
			ДатаВозрастаЗамены = ДобавитьЛет(Выборка.ДатаРождения, ВозрастЗамены);
			Если ЗначениеЗаполнено(Выборка.ДатаУвольнения) Тогда
				Если Выборка.ДатаУвольнения >= ДатаВозрастаЗамены 
					И Выборка.ДатаВыдачиПаспорта < ДатаВозрастаЗамены 
					И ДатаВозрастаЗамены < НачалоПериода Тогда
					ПроблемныеСотрудники.Вставить(Выборка.Сотрудник, ВозрастЗамены);
				КонецЕсли;
			Иначе
				Если Выборка.ДатаВыдачиПаспорта < ДатаВозрастаЗамены
					И ДобавитьМесяц(ДатаВозрастаЗамены, МесяцевНаЗамену) < НачалоПериода Тогда
					ПроблемныеСотрудники.Вставить(Выборка.Сотрудник, ВозрастЗамены);
				КонецЕсли;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПроблемныеСотрудники;
	
КонецФункции

Функция РезультатПроверкиНаличияСтатусаФизическихЛицКакНалогоплательщиковНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтатусФизическихЛицКакНалогоплательщиковНДФЛ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТРаботающиеСотрудникиФизическихЛиц", "ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Период КАК Период,
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусФизическихЛицКакНалогоплательщиковНДФЛСрезПоследних КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛ
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо
		|ГДЕ
		|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиНаличияСтатусаЗастрахованныхФизическихЛиц()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтатусыЗастрахованныхФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТРаботающиеСотрудникиФизическихЛиц", "ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Период КАК Период,
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусыЗастрахованныхФизическихЛицСрезПоследних КАК СтатусыЗастрахованныхФизическихЛиц
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = СтатусыЗастрахованныхФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	СтатусыЗастрахованныхФизическихЛиц.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиПроведенияИлиУдаленияДокументов(ТекущийРасчетныйМесяц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийРасчетныйМесяц", ТекущийРасчетныйМесяц);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДокументы.Ссылка КАК Ссылка,
		|	КадровыеДокументы.Дата КАК Дата
		|ИЗ
		|	ЖурналДокументов.КадровыеДокументы КАК КадровыеДокументы
		|ГДЕ
		|	(НЕ КадровыеДокументы.ПометкаУдаления
		|			И НЕ КадровыеДокументы.Проведен)
		|	И НАЧАЛОПЕРИОДА(КадровыеДокументы.ДатаСобытия, МЕСЯЦ) = &ТекущийРасчетныйМесяц
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплаты.Ссылка,
		|	НачислениеЗарплаты.Дата
		|ИЗ
		|	ЖурналДокументов.НачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	(НЕ НачислениеЗарплаты.ПометкаУдаления
		|			И НЕ НачислениеЗарплаты.Проведен)
		|	И НачислениеЗарплаты.Месяц = &ТекущийРасчетныйМесяц";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура СоздатьВТРаботающиеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, ДатаНачала = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаФильтра = Новый ТаблицаЗначений;
	ТаблицаФильтра.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтра.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицыФильтра = ТаблицаФильтра.Добавить();
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		СтрокаТаблицыФильтра.ДатаНачала = ДатаНачала;
	КонецЕсли;
	
	СобытияНачалаУчета = Новый Массив;
	СобытияНачалаУчета.Добавить(Перечисления.ВидыКадровыхСобытий.Прием);
	СобытияНачалаУчета.Добавить(Перечисления.ВидыКадровыхСобытий.НачальныеДанные);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "В" , СобытияНачалаУчета);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ЭтоГоловнойСотрудник", "=" , Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтра),
		ПараметрыПостроения,
		"ВТРаботающиеСотрудникиФизическихЛиц");
	
КонецПроцедуры

Функция ДобавитьЛет(Дата, Лет)
	Возврат ДобавитьМесяц(Дата, Лет *12)
КонецФункции

#КонецОбласти

#КонецЕсли