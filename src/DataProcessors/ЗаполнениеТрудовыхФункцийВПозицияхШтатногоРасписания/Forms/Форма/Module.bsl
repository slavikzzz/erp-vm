#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьПозиции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьПозиции();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозицииШтатногоРасписания

&НаКлиенте
Процедура ПозицииШтатногоРасписанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПозицииШтатногоРасписания.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Записать = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииШтатногоРасписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПозицииШтатногоРасписания.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ПозицииШтатногоРасписанияПозиция" Тогда
			ПоказатьЗначение(, ТекущиеДанные.Позиция);
		ИначеЕсли Поле.Имя = "ПозицииШтатногоРасписанияПодразделение" Тогда
			ПоказатьЗначение(, ТекущиеДанные.Подразделение);
		ИначеЕсли Поле.Имя = "ПозицииШтатногоРасписанияДолжность" Тогда
			ПоказатьЗначение(, ТекущиеДанные.Должность);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьПозиции();
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	ЕстьЧтоЗаписывать = Ложь;
	Для Каждого СтрокаПозиции Из ПозицииШтатногоРасписания Цикл
		Если СтрокаПозиции.Записать Тогда
			ЕстьЧтоЗаписывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЧтоЗаписывать Тогда
		Если СохранитьНаСервере() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Сохранение выполнено';
											|en = 'Saved'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось обновить трудовые функции, подробности в журнале регистрации';
											|en = 'Cannot update labor functions, see the event log for details'"));
		КонецЕсли;
		ЗаполнитьПозиции();
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо отметить позиции для записи';
										|en = 'Mark positions for writing'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПозиции()
	
	ПозицииШтатногоРасписания.Очистить();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ШтатноеРасписание.ТрудоваяФункция = ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ПустаяСсылка)
		|				И ШтатноеРасписание.Должность.ТрудоваяФункция <> ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Записать,
		|	ШтатноеРасписание.Ссылка КАК Позиция,
		|	ШтатноеРасписание.Подразделение КАК Подразделение,
		|	ШтатноеРасписание.Должность КАК Должность,
		|	ВЫБОР
		|		КОГДА ШтатноеРасписание.ТрудоваяФункция = ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ПустаяСсылка)
		|			ТОГДА ШтатноеРасписание.Должность.ТрудоваяФункция
		|		ИНАЧЕ ШтатноеРасписание.ТрудоваяФункция
		|	КОНЕЦ КАК ТрудоваяФункция
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	НЕ ШтатноеРасписание.ГруппаПозицийПодразделения
		|	И ШтатноеРасписание.Владелец = &Организация
		|	И ШтатноеРасписание.Подразделение = &Подразделение
		|	И ШтатноеРасписание.Утверждена
		|	И НЕ ШтатноеРасписание.Закрыта";
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.Подразделение = &Подразделение", "(ИСТИНА)");
	КонецЕсли;
	
	ПозицииШтатногоРасписания.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
функция СохранитьНаСервере()
	
	Результат = Истина;
	
	ТрудовыеФункцииПозиций = новый Соответствие;
	Для Каждого СтрокаПозиции Из ПозицииШтатногоРасписания Цикл
		
		Если СтрокаПозиции.Записать Тогда
			
			ТрудовыеФункцииПозиций.Вставить(СтрокаПозиции.Позиция, СтрокаПозиции.ТрудоваяФункция);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтатноеРасписание");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПозиции.Позиция);
				Блокировка.Заблокировать();
				
				ОбъектСправочника = СтрокаПозиции.Позиция.ПолучитьОбъект();
				ОбъектСправочника.ТрудоваяФункция = СтрокаПозиции.ТрудоваяФункция;
				
				ОбъектСправочника.Записать();
				
				Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
					СтрокаПозиции.Записать = Ложь;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				Ошибка = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить трудовую функцию позиции %1: %2';
												|en = 'Cannot update the labor function of the %1 position: %2'"), СтрокаПозиции.Позиция, КраткоеПредставлениеОшибки(Ошибка));
				ОтменитьТранзакцию();
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ИсторияОбновлена = Истина;
		ВсеПозиции = ОбщегоНазначения.ВыгрузитьКолонку(ТрудовыеФункцииПозиций, "Ключ");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПозицииШтатногоРасписания", ВсеПозиции);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТПоследниеДаты
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|ГДЕ
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания В(&ПозицииШтатногоРасписания)
			|	И ТИПЗНАЧЕНИЯ(ИсторияИспользованияШтатногоРасписания.Регистратор) В (ТИП(Документ.ИзменениеШтатногоРасписания), ТИП(Документ.УтверждениеШтатногоРасписания))
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсторияИспользованияШтатногоРасписания.Регистратор КАК Регистратор
			|ИЗ
			|	ВТПоследниеДаты КАК ПоследниеДаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|		ПО ПоследниеДаты.Дата = ИсторияИспользованияШтатногоРасписания.Дата
			|			И ПоследниеДаты.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|ГДЕ
			|	НЕ ИсторияИспользованияШтатногоРасписания.Регистратор ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИсторияИспользованияШтатногоРасписанияИндексации.Регистратор
			|ИЗ
			|	ВТПоследниеДаты КАК ПоследниеДаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписанияИндексации
			|		ПО ПоследниеДаты.Дата < ИсторияИспользованияШтатногоРасписанияИндексации.Дата
			|			И ПоследниеДаты.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписанияИндексации.ПозицияШтатногоРасписания
			|ГДЕ
			|	НЕ ИсторияИспользованияШтатногоРасписанияИндексации.Регистратор ЕСТЬ NULL";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				МетаданныеДокумента = Выборка.Регистратор.Метаданные();
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(МетаданныеДокумента.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИсторияИспользованияШтатногоРасписания.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
				Блокировка.Заблокировать();
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТрудоваяФункция", МетаданныеДокумента.ТабличныеЧасти.Позиции) Тогда
					
					ИмяРеквизитаПозиция = "Позиция";
					Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПозицияШтатногоРасписания", МетаданныеДокумента.ТабличныеЧасти.Позиции) Тогда
						ИмяРеквизитаПозиция = "ПозицияШтатногоРасписания";
					КонецЕсли;
					
					ОбъектДокумента = Выборка.Регистратор.ПолучитьОбъект();
					Для Каждого СтрокаПозиции Из ОбъектДокумента.Позиции Цикл
						
						ТрудоваяФункция = ТрудовыеФункцииПозиций.Получить(СтрокаПозиции[ИмяРеквизитаПозиция]);
						Если ТрудоваяФункция <> Неопределено Тогда
							СтрокаПозиции.ТрудоваяФункция = ТрудоваяФункция;
						КонецЕсли;
						
					КонецЦикла;
					
					ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
					
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				
				Для Каждого СтрокаПозиции Из НаборЗаписей Цикл
					
					ТрудоваяФункция = ТрудовыеФункцииПозиций.Получить(СтрокаПозиции.ПозицияШтатногоРасписания);
					Если ТрудоваяФункция <> Неопределено Тогда
						СтрокаПозиции.ТрудоваяФункция = ТрудоваяФункция;
					КонецЕсли;
					
				КонецЦикла;
				
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ИсторияОбновлена = Ложь;
				Результат = Ложь;
				Ошибка = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить трудовую функцию: %1';
												|en = 'Cannot update labor function: %1'"), КраткоеПредставлениеОшибки(Ошибка));
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(
					"Штатное расписание.Заполнение трудовых функций",
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ТекстСообщения,
					РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
		
		Если ИсторияОбновлена Тогда
			Для Каждого СтрокаПозиции Из ПозицииШтатногоРасписания Цикл
				СтрокаПозиции.Записать = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти



