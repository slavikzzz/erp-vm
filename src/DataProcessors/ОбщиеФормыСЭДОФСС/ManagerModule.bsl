#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	МетаданныеСправочника = Метаданные.Справочники.Организации;
	МетаданныеДокумента = Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия;
	МетаданныеРегистра = Метаданные.РегистрыСведений.ИсторияРегистрацийВОрганеПФР;
	
	Если Не ПравоДоступа("Изменение", МетаданныеСправочника)
		Или Не ПравоДоступа("Изменение", МетаданныеДокумента)
		Или Не ПравоДоступа("Изменение", МетаданныеРегистра) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	Если МетаданныеСправочника.Реквизиты.Найти("РегистрационныйНомерСФР") = Неопределено Тогда
		Возврат; // Нет реквизита.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(МетаданныеДокумента.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Страхователи = СтрахователиДляКоторыхМожноУстановитьРегистрационныеНомераСФР();
	Всего                    = Страхователи.Количество();
	ИмяСправочника           = МетаданныеСправочника.Имя;
	ПолноеИмяСправочника     = МетаданныеСправочника.ПолноеИмя();
	ПредставлениеСписка      = МетаданныеСправочника.ПредставлениеСписка;
	
	Для Каждого Раздел Из Разделы Цикл
		
		ПолноеИмяРаздела = СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяСправочника + "_МожноУстановитьРегномерСФР_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (Всего > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Можно заполнить регистрационный номер СФР';
									|en = 'You can fill the registration number in the Social Insurance Fund of Russia'");
		Дело.Количество     = Всего;
		
		ИдентификаторРодителя = Дело.Идентификатор;
		
		Для Каждого СтрокаТаблицы Из Страхователи Цикл
			ИдентификаторСсылки = Строка(СтрокаТаблицы.Страхователь.УникальныйИдентификатор());
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Страхователь",            СтрокаТаблицы.Страхователь);
			ПараметрыФормы.Вставить("ВходящийДокументОтФонда", СтрокаТаблицы.Ссылка);
			ПараметрыФормы.Вставить("ИдентификаторСообщения",  СтрокаТаблицы.ИдентификаторСообщения);
			ПараметрыФормы.Вставить("ДатаСообщения",           СтрокаТаблицы.ДатаСообщения);
			ПараметрыФормы.Вставить("ТипСообщения",            СтрокаТаблицы.ТипСообщения);
			ПараметрыФормы.Вставить("ПредставлениеТипа",       СтрокаТаблицы.ПредставлениеТипа);
			ПараметрыФормы.Вставить("РегистрационныйНомерСФР", СтрокаТаблицы.РегистрационныйНомерСФР);
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = ИмяСправочника + "_МожноУстановитьРегномерСФР_" + ИдентификаторСсылки;
			Дело.ЕстьДела       = Истина;
			Дело.Важное         = Ложь;
			Дело.Владелец       = ИдентификаторРодителя;
			Дело.Представление  = СтрокаТаблицы.Страхователь;
			Дело.Количество     = 1;
			Дело.ПараметрыФормы = ПараметрыФормы;
			Дело.Форма          = "Обработка.ОбщиеФормыСЭДОФСС.Форма.ОбновлениеРегистрационногоНомераСФР";
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ТекущиеДела

Функция СтрахователиДляКоторыхМожноУстановитьРегистрационныеНомераСФР() Экспорт
	Запрос = Новый Запрос;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетОтчитывающихсяПоВзносамОрганизаций") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация,
		|	Организации.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
		|	ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, Организации.Ссылка) КАК Страхователь
		|ПОМЕСТИТЬ ВсеОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК ОтчитывающиесяПоВзносамОрганизации
		|		ПО Организации.Ссылка = ОтчитывающиесяПоВзносамОрганизации.Организация";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	Организации.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
		|	Организации.Ссылка КАК Страхователь
		|ПОМЕСТИТЬ ВсеОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Страхователи.Страхователь КАК Страхователь,
	|	ДанныеСтрахователей.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР
	|ПОМЕСТИТЬ СтрахователиБезНомеров
	|ИЗ
	|	ВсеОрганизации КАК Страхователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеОрганизации КАК ДанныеСтрахователей
	|		ПО Страхователи.Страхователь = ДанныеСтрахователей.Организация
	|ГДЕ
	|	ДанныеСтрахователей.РегистрационныйНомерСФР = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВсеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Страхователи.Страхователь КАК Страхователь,
	|	ЕСТЬNULL(ВходящийЗапросФССДляРасчетаПособия.РегистрационныйНомерСФР, """") <> """" КАК ЕстьРегномер,
	|	ЕСТЬNULL(ВходящийЗапросФССДляРасчетаПособия.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|	ЕСТЬNULL(ВходящийЗапросФССДляРасчетаПособия.РегистрационныйНомерСФР, """") КАК РегистрационныйНомерСФР
	|ИЗ
	|	СтрахователиБезНомеров КАК Страхователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|		ПО Страхователи.Страхователь = ВходящийЗапросФССДляРасчетаПособия.Страхователь
	|			И (ВходящийЗапросФССДляРасчетаПособия.Ссылка В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка
	|				ИЗ
	|					Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|				ГДЕ
	|					ВходящийЗапросФССДляРасчетаПособия.Страхователь = Страхователи.Страхователь
	|					И ВходящийЗапросФССДляРасчетаПособия.РегистрационныйНомерСФР <> """"
	|				УПОРЯДОЧИТЬ ПО
	|					ВходящийЗапросФССДляРасчетаПособия.ДатаСообщения УБЫВ))
	|			И (ВходящийЗапросФССДляРасчетаПособия.РегистрационныйНомерСФР <> """")";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Фильтр = Новый Структура("ЕстьРегномер", Ложь);
	СтрахователиБезНомеров = КоллекцииБЗК.УникальныеЗначенияКолонкиСФильтром(Таблица, Фильтр, "Страхователь");
	
	Фильтр = Новый Структура("ЕстьРегномер", Истина);
	ТаблицаСРегномерами = Таблица.Скопировать(Фильтр);
	ТаблицаСРегномерами.Колонки.Добавить("ДатаСообщения");
	ТаблицаСРегномерами.Колонки.Добавить("ИдентификаторСообщения");
	ТаблицаСРегномерами.Колонки.Добавить("ТипСообщения");
	ТаблицаСРегномерами.Колонки.Добавить("ПредставлениеТипа");
	
	Если СтрахователиБезНомеров.Количество() > 0 Тогда
		Сообщения = ЭлектронныйДокументооборотСФСС.РегистрационныеНомераСФРПоТранспортнымДаннымСЭДО(СтрахователиБезНомеров);
		Для Каждого СообщениеСЭДО Из Сообщения Цикл
			СтрокаТаблицы = ТаблицаСРегномерами.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СообщениеСЭДО);
			СтрокаТаблицы.ТипСообщения = Формат(СообщениеСЭДО.ТипСообщения, "ЧГ=0");
			СтрокаТаблицы.ПредставлениеТипа = СообщениеСЭДО.ОписаниеТипа;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСРегномерами;
КонецФункции

#КонецОбласти

#Область ПФ_MXL_ЗаявлениеОНазначенииПособияПоУходуЗаРебенком

// См. 2 параметр процедуры НапечататьЗаявлениеОНазначенииПособияПоУходуЗаРебенком.
Функция ПустаяСтруктураДанныхДляПечатиЗаявленияОНазначенииПособияПоУходуЗаРебенком() Экспорт
	ИменаПолей = 
	"Ссылка,
	|УполномоченныйПредставительДолжность,
	|УполномоченныйПредставительФИО,
	|СтраховательНаименование,
	|СНИЛС,
	|Фамилия,
	|Имя,
	|Отчество,
	|ФизическоеЛицо,
	|РебенокФамилия,
	|РебенокИмя,
	|РебенокОтчество,
	|РебенокДатаРождения,
	|РебенокСНИЛС,
	|ДатаНачала,
	|ДатаОкончания,
	|ДатаПодачи";
	Возврат Новый Структура(ИменаПолей);
КонецФункции

// Выводит табличный документ соответствующий макету ПФ_MXL_ЗаявлениеОНазначенииПособияПоУходуЗаРебенком_2024.
Процедура НапечататьЗаявлениеОНазначенииПособияПоУходуЗаРебенком(КонтекстПечати, Данные) Экспорт
	УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
	
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.ВсеДанные);
	Секция    = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "ВсеДанные");
	
	// Представление страхователя.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.СтраховательНаименование, "СтраховательНаименование");
	
	// Данные застрахованного.
	ЧастиИмени = СЭДОФСС.ФИОВРодительномПадеже(Данные.Фамилия, Данные.Имя, Данные.Отчество, Данные.ФизическоеЛицо);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Фамилия,  "ЗаявительФамилияВРодительномПадеже");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Имя,      "ЗаявительИмяВРодительномПадеже");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Отчество, "ЗаявительОтчествоВРодительномПадеже");
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.Фамилия,  "СотрудникФамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.Имя,      "СотрудникИмя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.Отчество, "СотрудникОтчество");
	
	УправлениеПечатьюБЗК.ВывестиСНИЛСПоБуквам(Секция, Данные.СНИЛС, "СотрудникСНИЛС");
	
	// Данные ребенка.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.РебенокФамилия,  "РебенокФамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.РебенокИмя,      "РебенокИмя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.РебенокОтчество, "РебенокОтчество");
	
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Данные.РебенокДатаРождения, "РебенокДатаРождения");
	
	УправлениеПечатьюБЗК.ВывестиСНИЛСПоБуквам(Секция, Данные.РебенокСНИЛС, "РебенокСНИЛС");
	
	// Отпуск.
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Данные.ДатаНачала,    "ОтпускПоУходуДатаНачала");
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Данные.ДатаОкончания, "ОтпускПоУходуДатаОкончания");
	
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Данные.ДатаПодачи, "ДатаПодачи");
	
	// Уполномоченный представитель.
	Параметры.УполномоченныйПредставительДолжность = Строка(Данные.УполномоченныйПредставительДолжность);
	Параметры.УполномоченныйПредставительФИО       = Строка(Данные.УполномоченныйПредставительФИО);
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
	
	УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Данные.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ПФ_MXL_ЗаменаЛетРасчетногоПериода

// См. 2 параметр процедуры НапечататьЗаменуЛет.
Функция ПустаяСтруктураДанныхДляПечатиЗаменыЛет() Экспорт
	ИменаПолей = 
	"Ссылка,
	|УполномоченныйПредставительДолжность,
	|УполномоченныйПредставительФИО,
	|СтраховательНаименование,
	|СНИЛС,
	|Фамилия,
	|Имя,
	|Отчество,
	|ФизическоеЛицо,
	|ПервыйРасчетныйГод,
	|ВторойРасчетныйГод,
	|ПервыйГодПоДатеСобытия,
	|ВторойГодПоДатеСобытия,
	|ДатаНачалаСобытия,
	|ВидПособия,
	|ГодДействия,
	|ДатаПодачи";
	Возврат Новый Структура(ИменаПолей);
КонецФункции

// Выводит табличный документ соответствующий макету ПФ_MXL_ЗаменаЛетРасчетногоПериода_2024.
Процедура НапечататьЗаменуЛет(КонтекстПечати, Данные) Экспорт
	УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
	
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.ВсеДанные);
	Секция    = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "ВсеДанные");
	
	// Представление страхователя.
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.СтраховательНаименование, "СтраховательНаименование");
	
	// ФИО застрахованного.
	ЧастиИмени = СЭДОФСС.ФИОВРодительномПадеже(Данные.Фамилия, Данные.Имя, Данные.Отчество, Данные.ФизическоеЛицо);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Фамилия,  "Заявитель_ФамилияВРодительномПадеже");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Имя,      "Заявитель_ИмяВРодительномПадеже");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Отчество, "Заявитель_ОтчествоВРодительномПадеже");
	
	// СНИЛС застрахованного.
	УправлениеПечатьюБЗК.ВывестиСНИЛСПоБуквам(Секция, Данные.СНИЛС, "СНИЛС");
	
	// Годы.
	ГодыЗаполнены = ГодЗаполнен(Данные.ПервыйРасчетныйГод) И ГодЗаполнен(Данные.ВторойРасчетныйГод);
	Если Не ГодЗаполнен(Данные.ПервыйГодПоДатеСобытия) Или Не ГодЗаполнен(Данные.ВторойГодПоДатеСобытия) Тогда
		Если Не ЗначениеЗаполнено(Данные.ДатаНачалаСобытия) Тогда
			ГодыЗаполнены = Ложь;
		Иначе
			Период = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Данные.ДатаНачалаСобытия);
			Данные.ПервыйГодПоДатеСобытия = Год(Период.ДатаНачала);
			Данные.ВторойГодПоДатеСобытия = Год(Период.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	Если ГодыЗаполнены Тогда
		СортироватьГоды(Данные.ПервыйРасчетныйГод,     Данные.ВторойРасчетныйГод);
		СортироватьГоды(Данные.ПервыйГодПоДатеСобытия, Данные.ВторойГодПоДатеСобытия);
		Если Данные.ПервыйРасчетныйГод <> Данные.ПервыйГодПоДатеСобытия
			Или Данные.ВторойРасчетныйГод <> Данные.ВторойГодПоДатеСобытия Тогда
			УправлениеПечатьюБЗК.ВывестиЧислоПоБуквам(Секция, Данные.ПервыйГодПоДатеСобытия, "ПервыйРасчетныйГод_С");
			УправлениеПечатьюБЗК.ВывестиЧислоПоБуквам(Секция, Данные.ВторойГодПоДатеСобытия, "ВторойРасчетныйГод_С");
			УправлениеПечатьюБЗК.ВывестиЧислоПоБуквам(Секция, Данные.ПервыйРасчетныйГод,     "ПервыйРасчетныйГод_На");
			УправлениеПечатьюБЗК.ВывестиЧислоПоБуквам(Секция, Данные.ВторойРасчетныйГод,     "ВторойРасчетныйГод_На");
		КонецЕсли;
	КонецЕсли;
	
	// Срок действия.
	Если ГодЗаполнен(Данные.ГодДействия) Тогда
		УправлениеПечатьюБЗК.ВключитьФлажок(Секция, "ПоВсемСтраховымСлучаям");
		УправлениеПечатьюБЗК.ВывестиЧислоПоБуквам(Секция, Данные.ГодДействия, "СтраховойСлучайГод");
	ИначеЕсли ЗначениеЗаполнено(Данные.ДатаНачалаСобытия) Тогда
		УправлениеПечатьюБЗК.ВключитьФлажок(Секция, "ПоКонкретномуСтраховомуСлучаю");
		УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Данные.ДатаНачалаСобытия, "СтраховойСлучайДата");
		ВидыПособий = Перечисления.ПособияНазначаемыеФСС;
		Если Данные.ВидПособия = ВидыПособий.ПособиеПоВременнойНетрудоспособности
			Или Данные.ВидПособия = ВидыПособий.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве
			Или Данные.ВидПособия = ВидыПособий.ОтпускСверхЕжегодногоНаПериодЛечения Тогда
			УправлениеПечатьюБЗК.ВключитьФлажок(Секция, "ПособиеПоВременнойНетрудоспособности");
		ИначеЕсли Данные.ВидПособия = ВидыПособий.ПособиеПоБеременностиИРодам
			Или Данные.ВидПособия = ВидыПособий.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки Тогда
			УправлениеПечатьюБЗК.ВключитьФлажок(Секция, "ПособиеПоБеременностиИРодам");
		ИначеЕсли Данные.ВидПособия = ВидыПособий.ЕжемесячноеПособиеПоУходуЗаРебенком Тогда
			УправлениеПечатьюБЗК.ВключитьФлажок(Секция, "ЕжемесячноеПособиеПоУходуЗаРебенком");
		КонецЕсли;
	КонецЕсли;
	
	// Дата подачи.
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Данные.ДатаПодачи, "ДатаПодачи");
	
	// Уполномоченный представитель.
	Параметры.УполномоченныйПредставительДолжность = Строка(Данные.УполномоченныйПредставительДолжность);
	Параметры.УполномоченныйПредставительФИО       = Строка(Данные.УполномоченныйПредставительФИО);
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
	
	УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Данные.Ссылка);
КонецПроцедуры

Процедура СортироватьГоды(ПервыйГод, ВторойГод)
	Если ПервыйГод > ВторойГод Тогда
		БылПервыйГод = ПервыйГод;
		ПервыйГод    = ВторойГод;
		ВторойГод    = БылПервыйГод;
	КонецЕсли;
КонецПроцедуры

Функция ГодЗаполнен(Год)
	Возврат ТипЗнч(Год) = Тип("Число")
		И Год > 1900
		И Год < 4000;
КонецФункции

#КонецОбласти

#Область ПФ_MXL_ЗаявлениеОНазначенииПособияПоУходуЗаРебенком

// См. 2 параметр процедуры НапечататьОтпускНаПериодЛечения.
Функция ПустаяСтруктураДанныхДляПечатиОтпускаНаПериодЛечения() Экспорт
	ИменаПолей = 
	"Ссылка,
	|УполномоченныйПредставительДолжность,
	|УполномоченныйПредставительФИО,
	|СтраховательНаименование,
	|РегистрационныйНомер,
	|ДополнительныйКод,
	|СтраховательИНН,
	|
	|ФизическоеЛицо,
	|СНИЛС,
	|Фамилия,
	|Имя,
	|Отчество,
	|
	|ОтпускНомер,
	|ОтпускДата,
	|ОтпускДатаНачала,
	|ОтпускДатаОкончания,
	|
	|СреднийЗаработок,
	|
	|ИтогоСуммаВыплат,
	|ИтогоКалендарныхДней,
	|ПремияВсего,
	|ЗаработокВключаяПремию,
	|СреднийЗаработокЗаРасчетныйПериод,
	|КоличествоДнейОтпуска,
	|СуммаКВыплатеЗаОтпуск,
	|
	|СпособВыплатыПособия,
	|БанкНаименование,
	|НомерСчета,
	|БанкБИК,
	|КартаМИР,
	|АдресПроживания";
	
	ПустаяСтруктураДанных = Новый Структура(ИменаПолей);
	ПустаяСтруктураДанных.СреднийЗаработок = ПустаяТаблицаСреднегоДляПечатиОтпускаНаПериодЛечения();
	
	Возврат ПустаяСтруктураДанных;
КонецФункции

Функция ПустаяТаблицаСреднегоДляПечатиОтпускаНаПериодЛечения()
	ПустаяТаблицаСреднего = Новый ТаблицаЗначений;
	ПустаяТаблицаСреднего.Колонки.Добавить("Период",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПустаяТаблицаСреднего.Колонки.Добавить("СуммаВыплат",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблицаСреднего.Колонки.Добавить("КалендарныхДней", ОбщегоНазначения.ОписаниеТипаЧисло(8, 2));
	Возврат ПустаяТаблицаСреднего;
КонецФункции

// Выводит табличный документ соответствующий макету ПФ_MXL_ОтпускНаПериодЛечения_2024.
Процедура НапечататьОтпускНаПериодЛечения(КонтекстПечати, Данные) Экспорт
	УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
	
	// Секция "Шапка".
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.Шапка);
	Секция = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "Шапка");
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.СтраховательНаименование, "СтраховательНаименование");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.РегистрационныйНомер,     "РегистрационныйНомер");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.ДополнительныйКод,        "ДополнительныйКод");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.СтраховательИНН,          "ИНН");
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.Фамилия,  "СотрудникФамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.Имя,      "СотрудникИмя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.Отчество, "СотрудникОтчество");
	
	УправлениеПечатьюБЗК.ВывестиСНИЛСПоБуквам(Секция, Данные.СНИЛС, "СотрудникСНИЛС");
	
	Параметры.ОтпускНомер         = Данные.ОтпускНомер;
	Параметры.ОтпускДата          = Формат(Данные.ОтпускДата, "ДЛФ=D");
	Параметры.ОтпускДатаНачала    = Формат(Данные.ОтпускДатаНачала, "ДЛФ=D");
	Параметры.ОтпускДатаОкончания = Формат(Данные.ОтпускДатаОкончания, "ДЛФ=D");
	Параметры.ДнейОтпуска         = Формат(Данные.КоличествоДнейОтпуска, "ЧГ=");
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
	
	// Секция "ТаблицаШапка".
	КонтекстПечати.ТабличныйДокумент.Вывести(КонтекстПечати.Макет.ПолучитьОбласть("ТаблицаШапка"));
	
	// Секция "ТаблицаСтрока".
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.ТаблицаСтрока);
	Секция = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "ТаблицаСтрока");
	Если Данные.СреднийЗаработок.Количество() = 0 Тогда
		Для НомерСтроки = 1 По 12 Цикл
			КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
		КонецЦикла;
	Иначе
		Данные.СреднийЗаработок.Сортировать("Период");
		НомерСтроки = 0;
		Для Каждого СтрокаТаблицы Из Данные.СреднийЗаработок Цикл
			НомерСтроки = НомерСтроки + 1;
			Параметры.НомерСтроки     = НомерСтроки;
			Параметры.Месяц           = Формат(СтрокаТаблицы.Период, "ДФ=MMMM");
			Параметры.Год             = Формат(Год(СтрокаТаблицы.Период), "ЧГ=");
			Параметры.СуммаВыплат     = СтрокаТаблицы.СуммаВыплат;
			Параметры.КалендарныхДней = СтрокаТаблицы.КалендарныхДней;
			Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
			КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
		КонецЦикла;
	КонецЕсли;
	
	// Секция "ТаблицаПодвал".
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.ТаблицаПодвал);
	Параметры.ИтогоСуммаВыплат        = Формат(Данные.ИтогоСуммаВыплат, "ЧГ=");
	Параметры.ИтогоКалендарныхДней    = Формат(Данные.ИтогоКалендарныхДней, "ЧГ=");
	Параметры.ПремияВсего             = Формат(Данные.ПремияВсего, "ЧГ=");
	Параметры.ЗаработокВключаяПремию  = Формат(Данные.ЗаработокВключаяПремию, "ЧГ=");
	Параметры.СреднийДневнойЗаработок = Формат(Данные.СреднийЗаработокЗаРасчетныйПериод, "ЧГ=");
	Параметры.КоличествоДнейОтпуска   = Формат(Данные.КоличествоДнейОтпуска, "ЧГ=");
	Параметры.СуммаКВыплатеЗаОтпуск   = Формат(Данные.СуммаКВыплатеЗаОтпуск, "ЧГ=");
	Секция = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "ТаблицаПодвал");
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
	
	// Разделитель страниц.
	КонтекстПечати.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Секция "СпособВыплатыШапка".
	Секция = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "СпособВыплатыШапка");
	ВыплатаПочтой = (Данные.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом);
	Если Данные.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		УправлениеПечатьюБЗК.ВключитьФлажок(Секция, "ВыплатаЧерезБанк");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.БанкНаименование, "БанкНаименование");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.НомерСчета, "НомерСчета");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.БанкБИК, "БанкБИК");
	ИначеЕсли Данные.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		УправлениеПечатьюБЗК.ВключитьФлажок(Секция, "ВыплатаЧерезБанк");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Данные.КартаМИР, "НомерКартыМИР");
	ИначеЕсли ВыплатаПочтой Тогда
		УправлениеПечатьюБЗК.ВключитьФлажок(Секция, "ВыплатаПочтой");
	КонецЕсли;
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
	
	// Секция "АдресПроживания".
	АдресПроживания = ?(ВыплатаПочтой, Данные.АдресПроживания, "");
	СЭДОФСС.ВывестиАдрес(КонтекстПечати, АдресПроживания, "АдресПроживания");
	
	// Секция "Подвал".
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.Подвал);
	Секция = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "Подвал");
	
	Параметры.УполномоченныйПредставительДолжность = Строка(Данные.УполномоченныйПредставительДолжность);
	Параметры.УполномоченныйПредставительФИО       = Строка(Данные.УполномоченныйПредставительФИО);
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
	
	УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Данные.Ссылка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#КонецЕсли