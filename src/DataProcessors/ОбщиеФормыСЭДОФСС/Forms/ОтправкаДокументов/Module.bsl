#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТаблицаОтправки = Список.Выгрузить();
	
	// Добавление строк в таблицу отправки.
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Соответствие = РазобратьМассивПоТипам(Параметры.МассивСсылок);
	КоличествоВидов = 0;
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Тип              = КлючИЗначение.Ключ;
		МассивСсылок     = КлючИЗначение.Значение;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Менеджер  = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		Менеджер.ПриЗаполненииПараметровОтправки(МассивСсылок, ТаблицаОтправки);
		Найденные = ТаблицаОтправки.НайтиСтроки(Новый Структура("ПолноеИмяДокумента", ""));
		Если Найденные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СтрокаТаблицы.ПолноеИмяДокумента = ПолноеИмя;
		КонецЦикла;
		ПредставлениеТипа = Строка(Тип);
		Представление = СтрШаблон("%1 (%2)", ПредставлениеТипа, Формат(Найденные.Количество(), "ЧГ="));
		Элементы.ПолноеИмяДокумента.СписокВыбора.Добавить(ПолноеИмя, Представление);
		Элементы.СписокПолноеИмяДокумента.СписокВыбора.Добавить(ПолноеИмя, ПредставлениеТипа);
	КонецЦикла;
	Найденные = ТаблицаОтправки.НайтиСтроки(Новый Структура("ДополнительныеПараметры", Неопределено));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		СтрокаТаблицы.ДополнительныеПараметры = Новый Структура;
	КонецЦикла;
	КоличествоВидов = Элементы.ПолноеИмяДокумента.СписокВыбора.Количество();
	Элементы.ПолноеИмяДокумента.Видимость = КоличествоВидов > 1;
	Если КоличествоВидов = 1 Тогда
		Заголовок = Менеджер.ЗаголовокФормыОтправкиСведенийВФСС();
	КонецЕсли;
	Для Каждого Сообщение Из Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	Если ТаблицаОтправки.Количество() = 0 Тогда
		ТекстОшибкиПриОткрытииФормы = НСтр("ru = 'Не выбрано ни одного документа (либо выбранные документы не подготовлены к отправке)';
											|en = 'No documents have been selected, or the selected documents are not ready for sending'");
		Возврат;
	КонецЕсли;
	
	ОформлениеКД = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(ЭтотОбъект, "СписокИндексКартинки, СписокРезультат");
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Видимость", Ложь);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Отображать", Ложь);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(
		ОформлениеКД,
		"Список.Результат",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОформлениеКД = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(ЭтотОбъект, "СписокОтправить");
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Видимость", Ложь);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Отображать", Ложь);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Доступность", Ложь);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ОформлениеКД, "Список.Отправить", "=", Ложь);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(
		ОформлениеКД,
		"Список.Результат",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	// Получение страхователей.
	Организации = КоллекцииБЗК.УникальныеЗначенияКолонки(ТаблицаОтправки, "Организация");
	КоллекцииБЗК.УдалитьПустыеЗначенияМассива(Организации);
	Если Организации.Количество() = 0 Тогда
		ТекстОшибкиПриОткрытииФормы = НСтр("ru = 'В выбранных документах не заполнена организация';
											|en = 'Company is not specified in the selected documents'");
		Возврат;
	ИначеЕсли Организации.Количество() = 1 Тогда
		Элементы.Организация.Видимость = Ложь;
		Страхователь = СЭДОФСС.СтраховательОрганизации(Организации[0]);
		ТаблицаОтправки.ЗаполнитьЗначения(Страхователь, "Страхователь");
	Иначе
		Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(Организации);
		Для Каждого Организация Из Организации Цикл
			Страхователь = СЭДОФСС.СтраховательОрганизации(Организация);
			Найденные = ТаблицаОтправки.НайтиСтроки(Новый Структура("Организация", Организация));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				СтрокаТаблицы.Страхователь = Страхователь;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Список.Загрузить(ТаблицаОтправки);
	
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ТекстОшибкиПриОткрытииФормы) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстОшибкиПриОткрытииФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПередПодготовкойДокументовКОтправке() Тогда
		УдалитьДокументыИзСписка(Параметр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗавершениеРаботы И ТолькоПросмотр Тогда
		Отказ = Истина;
		ПоказатьОповещениеПользователя(, , НСтр("ru = 'Невозможно закрыть форму так как отправка еще не завершена';
												|en = 'Cannot close the form as the documents are not sent'"), БиблиотекаКартинок.Предупреждение24БЗК);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОтборСтрок = Новый Структура;
	Если ЗначениеЗаполнено(ОрганизацияФильтр) Тогда
		ОтборСтрок.Вставить("Организация", ОрганизацияФильтр);
	КонецЕсли;
	Элементы.Список.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	ОбновитьЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокОтправитьПриИзменении(Элемент)
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(ТаблицаФормы, ИдентификаторСтроки, ПолеФормы, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПолеФормы = Элементы.СписокРезультат
		Или ПолеФормы = Элементы.СписокИндексКартинки Тогда
		Если Не СтрокаТаблицы.Отправить И Не СтрокаТаблицы.Доставлен Тогда
			Значение = СтрокаТаблицы.ЗначениеРасшифровки;
		ИначеЕсли Не СтрокаТаблицы.Доставлен И ЗначениеЗаполнено(СтрокаТаблицы.Результат) Тогда
			Значение = СтрокаТаблицы.Результат;
		Иначе
			Значение = СтрокаТаблицы.ЗначениеРасшифровки;
		КонецЕсли;
	Иначе
		Значение = Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Значение = СтрокаТаблицы.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если СтрокаТаблицы.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение() Тогда
				ЗаголовокТекста = НСтр("ru = 'Подробная информация об ошибке';
										|en = 'Detailed error report'");
				Картинка = БиблиотекаКартинок.Предупреждение32;
			Иначе
				ЗаголовокТекста = НСтр("ru = 'Подробная информация';
										|en = 'Detailed information'");
				Картинка = БиблиотекаКартинок.Информация32;
			КонецЕсли;
			ИнформированиеПользователяКлиент.ПоказатьПодробности(Значение, ЗаголовокТекста, Картинка);
		Иначе
			ПолноеИмя = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипЗнч(Значение));
			Если ПолноеИмя = Неопределено Тогда
				ПоказатьЗначение(, Значение);
				Возврат;
			КонецЕсли;
			ИмяФормыОбъекта = ПолноеИмя + ".ФормаОбъекта";
			ПараметрыФормыОбъекта = Новый Структура("Ключ, ПоказатьОшибкиОтправки", Значение, Истина);
			ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормыОбъекта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьФлажки(Команда)
	Для Каждого СтрокаСписка Из Список Цикл
		Если Не ЗначениеЗаполнено(СтрокаСписка.Результат) Тогда
			СтрокаСписка.Отправить = Истина;
		КонецЕсли;
	КонецЦикла;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьФлажки(Команда)
	Для Каждого СтрокаСписка Из Список Цикл
		СтрокаСписка.Отправить = Ложь;
	КонецЦикла;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВФонд(Команда)
	// Подготовка параметров отправки.
	ПодготовитьТаблицуКОтправке(Истина);
	
	// Закрытие формы если нечего отправлять.
	Если Список.Количество() = 0 Тогда
		Закрыть();
		Возврат;
	КонецЕсли;

	// Подготовка итератора по таблице.
	Контекст = Новый Структура("Индекс, ВГраница, Лог, Измененные");
	Контекст.Индекс     = -1;
	Контекст.ВГраница   = Список.Количество() - 1;
	Контекст.Лог        = Новый Массив;
	Контекст.Измененные = Новый Массив;
	
	// Запуск итерации.
	ПродолжитьОтправку(Контекст);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЭлементыФормы()
	Элементы.СписокОрганизация.Видимость = Элементы.Организация.Видимость
		И Не ЗначениеЗаполнено(ОрганизацияФильтр);
	Элементы.СписокПолноеИмяДокумента.Видимость = Элементы.ПолноеИмяДокумента.Видимость
		И Не ЗначениеЗаполнено(ПолноеИмяДокумента);
	Элементы.ОтправитьВФонд.Доступность = Список.НайтиСтроки(Новый Структура("Отправить", Истина)).Количество() > 0;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицуКОтправке(Знач ЭДО)
	РегистрыСведений.ПользователиСЭДО.ДобавитьТекущегоПользователя();
	
	ФайловыйДО = Не ЭДО;
	
	ТаблицаОтправки = Список.Выгрузить(Новый Структура("Отправить", Истина));
	
	// Подготовка прикладных параметров отправки.
	Соответствие = РазобратьМассивПоТипам(ТаблицаОтправки.ВыгрузитьКолонку("Ссылка"));
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Тип              = КлючИЗначение.Ключ;
		МассивСсылок     = КлючИЗначение.Значение;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Менеджер  = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		Менеджер.ПриПодготовкеВыбранныхДокументовКОтправке(МассивСсылок, ТаблицаОтправки);
	КонецЦикла;
	
	// Подготовка БРОшных параметров отправки.
	Если ЭДО Тогда
		Для Каждого СтрокаСписка Из ТаблицаОтправки Цикл
			СтрокаСписка.ПараметрыБРО = ЭлектронныйДокументооборотСФСС.ПараметрыОтправитьСообщениеСЭДО(
				СтрокаСписка.ТипСообщения,
				СтрокаСписка.ТекстXML,
				СтрокаСписка.Страхователь,
				СтрокаСписка.ШаблонОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Список.Загрузить(ТаблицаОтправки);
	Если Список.Количество() = 0 Тогда
		Возврат;
	КОнецЕсли;
	
	// Подготовка элементов формы.
	Элементы.Список.ИзменятьПорядокСтрок = Ложь;
	Элементы.Список.ИзменятьСоставСтрок  = Ложь;
	Элементы.ОтправитьВФонд.Видимость    = Ложь;
	Элементы.ОтправляемыеДокументыВключитьФлажки.Видимость = Ложь;
	Элементы.ОтправляемыеДокументыОтключитьФлажки.Видимость = Ложь;
	ТолькоПросмотр = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправку(Контекст)
	Контекст.Лог.Добавить(СтрШаблон(
		НСтр("ru = 'ПродолжитьОтправку: %1 из %2 (%3)';
			|en = 'ПродолжитьОтправку: %1 out of %2 (%3)'"),
		Контекст.Индекс + 2,
		Контекст.ВГраница + 1,
		Список.Количество()));
	Контекст.Индекс = Контекст.Индекс + 1;
	Если Контекст.Индекс > Контекст.ВГраница Тогда
		Контекст.Лог.Добавить(НСтр("ru = 'Закрыть()';
									|en = 'Close()'"));
		Закрыть();
		Возврат;
	КонецЕсли;
	СтрокаСписка = Список[Контекст.Индекс];
	СтрокаСписка.ДатаОтправки = ОбщегоНазначенияКлиент.ДатаСеанса();
	Обработчик = Новый ОписаниеОповещения("ПослеОтправкиВФонд", ЭтотОбъект, Контекст);
	Контекст.Лог.Добавить(НСтр("ru = 'ЭлектронныйДокументооборотСФССКлиент.ОтправитьСообщениеСЭДО()';
								|en = 'ЭлектронныйДокументооборотСФССКлиент.ОтправитьСообщениеСЭДО()'"));
	ЭлектронныйДокументооборотСФССКлиент.ОтправитьСообщениеСЭДО(Обработчик, СтрокаСписка.ПараметрыБРО, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиВФонд(Результат, Контекст) Экспорт
	Контекст.Лог.Добавить(СтрШаблон(
		НСтр("ru = 'ПослеОтправкиВФонд: %1 из %2 (%3)';
			|en = 'ПослеОтправкиВФонд: %1 out of %2 (%3)'"),
		Контекст.Индекс + 1,
		Контекст.ВГраница + 1,
		Список.Количество()));
	Контекст.Лог.Добавить(СтрШаблон(
		НСтр("ru = 'Выполнено: %1, ИдентификаторЗапроса: %2, ОписаниеОшибки: %3';
			|en = 'Completed: %1, ИдентификаторЗапроса: %2, ОписаниеОшибки: %3%3'"),
		Результат.Выполнено,
		Результат.ИдентификаторЗапроса,
		Результат.ОписаниеОшибки));
	Попытка
		СтрокаСписка = Список[Контекст.Индекс];
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Лог      = НСтр("ru = 'Лог:';
						|en = 'Log:'") + Символы.ПС + СтрСоединить(Контекст.Лог, Символы.ПС);
		Кратко   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = Кратко + Символы.ПС + Лог + Символы.ПС + Символы.ПС + Подробно;
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	СтрокаСписка.Доставлен             = Результат.Выполнено И Не ЗначениеЗаполнено(Результат.ОписаниеОшибки);
	СтрокаСписка.Результат             = Результат.ОписаниеОшибки;
	СтрокаСписка.ОбменЧерезОператора   = ОбщегоНазначенияБЗККлиентСервер.ЗначениеСвойства(Результат, "ОбменЧерезОператора");
	СтрокаСписка.ИдентификаторЗапроса  = Результат.ИдентификаторЗапроса;
	СтрокаСписка.ИдентификаторПакета   = ОбщегоНазначенияБЗККлиентСервер.ЗначениеСвойства(Результат, "ИдентификаторПакета");
	Если СтрокаСписка.Доставлен Или ЗначениеЗаполнено(СтрокаСписка.ИдентификаторЗапроса) Тогда
		СтрокаСписка.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОтправлен();
	Иначе
		ЕстьОшибкиПриОтправке = Истина;
		СтрокаСписка.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение();
	КонецЕсли;
	ПослеОтправкиВФондНаСервере(Контекст.Индекс, Контекст.Измененные);
	Если Контекст.Индекс = Контекст.ВГраница Тогда
		ТолькоПросмотр = Ложь;
		ОповещениеФормОбИзменении = ПодготовитьОповещениеФормОбИзменении(Контекст.Измененные);
		СтандартныеПодсистемыКлиент.ОповеститьФормыОбИзменении(ОповещениеФормОбИзменении);
		Если ЕстьОшибкиПриОтправке Тогда
			Контекст.Лог.Добавить(НСтр("ru = 'ЕстьОшибкиПриОтправке';
										|en = 'ЕстьОшибкиПриОтправке'"));
			Элементы.СписокЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Элементы.СписокЗакрыть.КнопкаПоУмолчанию = Истина;
		Иначе
			Контекст.Лог.Добавить(НСтр("ru = 'Закрыть()';
										|en = 'Закрыть()'"));
			Закрыть();
		КонецЕсли;
	Иначе
		ПродолжитьОтправку(Контекст);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеОтправкиВФондНаСервере(Индекс, Измененные)
	СтрокаОтправки = Список[Индекс];
	
	Успех               = СтрокаОтправки.Доставлен;
	ОтправленоОператору = Успех И СтрокаОтправки.ОбменЧерезОператора;
	ДоставленоФонду     = Успех И Не СтрокаОтправки.ОбменЧерезОператора;
	
	Если Не ЗначениеЗаполнено(СтрокаОтправки.ИдентификаторЗапроса) И Не ЗначениеЗаполнено(СтрокаОтправки.Результат) Тогда
		СтрокаОтправки.Результат =
			НСтр("ru = 'Получен пустой идентификатор сообщения. Необходимо обратиться к администратору для проверки состояние доставки сообщения " +
				"по журналу запросов СЭДО и отсутствию ошибок в журнале регистрации.'");
	КонецЕсли;
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("ПолноеИмяДокумента",     СтрокаОтправки.ПолноеИмяДокумента);
	РезультатОтправки.Вставить("Ссылка",                 СтрокаОтправки.Ссылка);
	РезультатОтправки.Вставить("Страхователь",           СтрокаОтправки.Страхователь);
	РезультатОтправки.Вставить("ГоловнаяОрганизация",    ЗарплатаКадры.ГоловнаяОрганизация(СтрокаОтправки.Страхователь));
	РезультатОтправки.Вставить("ТекстОшибки",            СтрокаОтправки.Результат);
	РезультатОтправки.Вставить("ИдентификаторСообщения", СтрокаОтправки.ИдентификаторЗапроса);
	РезультатОтправки.Вставить("ИдентификаторПакета",    СтрокаОтправки.ИдентификаторПакета);
	РезультатОтправки.Вставить("ОбменЧерезОператора",    СтрокаОтправки.ОбменЧерезОператора);
	РезультатОтправки.Вставить("Успех",                  Успех);
	РезультатОтправки.Вставить("ОтправленоОператору",    ОтправленоОператору);
	РезультатОтправки.Вставить("ДоставленоФонду",        ДоставленоФонду);
	РезультатОтправки.Вставить("ДатаОтправки",           ?(Успех,               СтрокаОтправки.ДатаОтправки, '00010101'));
	РезультатОтправки.Вставить("ДатаОтправкиОператору",  ?(ОтправленоОператору, СтрокаОтправки.ДатаОтправки, '00010101'));
	РезультатОтправки.Вставить("ДатаОтправкиФонду",      ?(ДоставленоФонду,     СтрокаОтправки.ДатаОтправки, '00010101'));
	// Для изменения:
	РезультатОтправки.Вставить("ЗначениеРасшифровки",    СтрокаОтправки.ЗначениеРасшифровки);
	РезультатОтправки.Вставить("Измененные",             Измененные);
	
	СЭДОФСС.ЗарегистрироватьНепосредственныйРезультатОтправкиДокумента(РезультатОтправки);
	
	СтрокаОтправки.ЗначениеРасшифровки = РезультатОтправки.ЗначениеРасшифровки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьОповещениеФормОбИзменении(Знач Измененные)
	Возврат СтандартныеПодсистемыСервер.ПодготовитьОповещениеФормОбИзменении(Измененные);
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьМассивПоТипам(Массив)
	Соответствие = Новый Соответствие;
	Для Каждого Элемент Из Массив Цикл
		Тип = ТипЗнч(Элемент);
		МассивТипа = Соответствие[Тип];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			Соответствие.Вставить(Тип, МассивТипа);
		КонецЕсли;
		ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(МассивТипа, Элемент);
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

&НаКлиенте
Процедура УдалитьДокументыИзСписка(МассивСсылок)
	Если Не Открыта() Или Не Элементы.ОтправитьВФонд.Видимость Или ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Ссылка Из МассивСсылок Цикл
		Фильтр = Новый Структура("Ссылка, Доставлен", Ссылка, Ложь);
		Найденные = ФормыБЗККлиентСервер.НайтиСтроки(Список, Фильтр);
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			Список.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	Если Список.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
