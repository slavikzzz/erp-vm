#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Команда = Метаданные.Обработки.ОбщиеФормыСЭДОФСС.Команды.ТекущиеДелаПоСЭДО;
	НавигационнаяСсылка = "e1cib/command/" + Команда.ПолноеИмя();
	
	ЗаполнитьФорму();
	
	Элементы.ПоказыватьПриНачалеРаботы.Видимость = Не РегистрыСведений.ПользователиСЭДО.ПоказыватьТекущиеДелаПоСЭДО();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДатаПоследнегоОбновления = ТекущаяДата();
	ПодключитьОбработчикОбновленияТекущихДел(60*30);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = СЭДОФССКлиент.ИмяСобытияОбновитьТекущиеДела() Тогда
		ПодключитьОбработчикОбновленияТекущихДел(60);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ОбработчикОбновленияПодключен Тогда
		ОтключитьОбработчикОжидания("ОбновитьТекущиеДелаНаКлиенте");
		ОбработчикОбновленияПодключен = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ОбработатьНажатиеНаГиперссылку(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Идентификатор", Элемент.Имя);
	ПараметрыДела = ПараметрыДел.НайтиСтроки(ПараметрыОтбора)[0];
	
	ОткрытьФорму(ПараметрыДела.Форма, ПараметрыДела.ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНажатияНавигационнойСсылки(Элемент, Ссылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Идентификатор", Ссылка);
	ПараметрыДела = ПараметрыДел.НайтиСтроки(ПараметрыОтбора)[0];
	
	ОткрытьФорму(ПараметрыДела.Форма, ПараметрыДела.ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьНажатиеНаКартинку(Элемент)
	Возврат; // Разворачивать и сворачивать разделы не требуется.
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьИНеПоказывать2Дня(Команда)
	ЗакрытьИНеПоказыватьНаКлиенте(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИНеПоказыватьНеделю(Команда)
	ЗакрытьИНеПоказыватьНаКлиенте(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИНеПоказыватьМесяц(Команда)
	ЗакрытьИНеПоказыватьНаКлиенте(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИНеПоказыватьНикогда(Команда)
	ЗакрытьИНеПоказыватьНаКлиенте(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПриНачалеРаботы(Команда)
	ОбновитьДатуНачалаОтображения(Команда.Имя);
	Элементы.ПоказыватьПриНачалеРаботы.Видимость = Ложь;
	ПоказатьОповещениеПользователя(,, НСтр("ru = 'Показывать текущие дела по СЭДО СФР при начале работы';
											|en = 'Show the current to-do list of the Social Insurance Fund EDI upon start'"), БиблиотекаКартинок.Успешно32);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьФорму();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьФорму()
	ТекущиеДела = ТекущиеДелаДляВыводаВФорме();
	ВывестиТекущиеДела(ТекущиеДела);
	
	ИдентификаторыВладельцев = КоллекцииБЗК.УникальныеЗначенияКолонкиСФильтром(
		ТекущиеДела,
		Новый Структура("ЭтоРаздел", Истина),
		"ИдентификаторВладельца");
	Если ИдентификаторыВладельцев.Количество() = 0 Тогда
		Элементы.СтраницаТекущихДелНет.Видимость = Истина;
	Иначе
		Элементы.СтраницаТекущихДелНет.Видимость = Ложь;
		Если ИдентификаторыВладельцев.Количество() = 1 Тогда
			ИдентификаторВладельца = ИдентификаторыВладельцев[0];
			Элементы["ЗаголовокРаздела" + ИдентификаторВладельца].Видимость = Ложь;
			Элементы["Группа" + ИдентификаторВладельца].Отображение = ОтображениеОбычнойГруппы.Нет;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущиеДелаДляВыводаВФорме()
	// Получение поставщиков.
	ПоставщикиТекущихДел = Новый Массив;
	СЭДОФСС.ПриОпределенииОбработчиковТекущихДел(ПоставщикиТекущихДел);
	
	// Получение дел.
	ТекущиеДела = ТекущиеДелаСервер.ТекущиеДела();
	Для Каждого Поставщик Из ПоставщикиТекущихДел Цикл
		КоличествоДел = ТекущиеДела.Количество();
		Поставщик.ПриЗаполненииСпискаТекущихДел(ТекущиеДела);
		НовоеКоличествоДел = ТекущиеДела.Количество();
		
		Если КоличествоДел <> НовоеКоличествоДел
			И ТипЗнч(Поставщик) <> Тип("ОбщийМодуль") Тогда
			ПолноеИмяПоставщика = Метаданные.НайтиПоТипу(ТипЗнч(Поставщик)).ПолноеИмя();
			Для Индекс = КоличествоДел По НовоеКоличествоДел - 1 Цикл
				Строка = ТекущиеДела[Индекс];
				Строка.ОбъектВладелецДел = ПолноеИмяПоставщика;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка к выводу в форме.
	ТекущиеДела.Колонки.Добавить("ПолноеИмяВладельца", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(250)));
	ТекущиеДела.Колонки.Добавить("ИдентификаторВладельца", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(250)));
	ТекущиеДела.Колонки.Добавить("ЭтоРаздел", Новый ОписаниеТипов("Булево"));
	ТекущиеДела.Колонки.Добавить("ПредставлениеРаздела", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(250)));
	
	УдаляемыеДела = Новый Массив;
	Для Каждого Дело Из ТекущиеДела Цикл
		Если ТипЗнч(Дело.Владелец) = Тип("ОбъектМетаданных") Тогда
			РазделДоступен = ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Дело.Владелец);
			Если Не РазделДоступен Тогда
				УдаляемыеДела.Добавить(Дело);
				Продолжить;
			КонецЕсли;
			Дело.ПолноеИмяВладельца     = Дело.Владелец.ПолноеИмя();
			Дело.ИдентификаторВладельца = СтрЗаменить(Дело.ПолноеИмяВладельца, ".", "");
			Дело.ЭтоРаздел              = Истина;
			Дело.ПредставлениеРаздела   = ?(ЗначениеЗаполнено(Дело.Владелец.Синоним), Дело.Владелец.Синоним, Дело.Владелец.Имя);
		Иначе
			Дело.ПолноеИмяВладельца     = Дело.Владелец; // Неявное преобразование в строку.
			Дело.Идентификатор          = ДопустимоеИмяДляЭлемента(Дело.Идентификатор);
			Дело.ИдентификаторВладельца = ДопустимоеИмяДляЭлемента(Дело.ПолноеИмяВладельца);
			// Необходимо два поиска вложенных, т.к. искомое дело могло пройти через цикл и его идентификатор мог измениться.
			Дело.ЭтоРаздел = (ТекущиеДела.Найти(Дело.ПолноеИмяВладельца, "Идентификатор") = Неопределено
				И ТекущиеДела.Найти(Дело.ИдентификаторВладельца, "Идентификатор") = Неопределено);
			Если Дело.ЭтоРаздел Тогда
				Дело.ПредставлениеРаздела = Дело.ПолноеИмяВладельца;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемоеДело Из УдаляемыеДела Цикл
		ТекущиеДела.Удалить(УдаляемоеДело);
	КонецЦикла;
	ТекущиеДела.Колонки.Удалить("Владелец");
	
	Возврат ТекущиеДела;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДопустимоеИмяДляЭлемента(ИсходноеИмя, НедопустимыеСимволы = """'`/\-[]{}:;|=?*<>,.()+#№@!%^&~ ")
	Имя = СтрСоединить(СтрРазделить(ИсходноеИмя, НедопустимыеСимволы, Истина));
	Если СтрНайти("0123456789", Лев(Имя, 1)) > 0 Тогда
		Имя = "_" + Имя;
	КонецЕсли;
	Возврат Имя;
КонецФункции

&НаСервере
Процедура ВывестиТекущиеДела(ТекущиеДела)
	ТекущиеДела.Сортировать("ЭтоРаздел Убыв, ПредставлениеРаздела Возр, Важное Убыв, Представление");
	
	СохраненныеНастройкиОтображения = Неопределено;
	СвернутыеРазделы          = Новый Соответствие;
	ЗаданнаяВидимостьРазделов = Новый Соответствие;
	ЗаданнаяВидимостьДел      = Новый Соответствие;
	ВыводимыеДелаИРазделы     = Новый Структура;
	РазделыСВажнымиДелами     = Новый Структура;
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	ТаблицаЭлементов = СозданныеЭлементыДел.Выгрузить();
	ТаблицаЭлементов.ЗаполнитьЗначения(Ложь, "Используется");
	СозданныеЭлементыДел.Загрузить(ТаблицаЭлементов);
	
	ТекущаяГруппа = "";
	ТекущаяОбщаяГруппа = "";
	Для Каждого Дело Из ТекущиеДела Цикл
		
		Если Дело.ЭтоРаздел Тогда
			
			// Создание общей группы раздела.
			ИмяОбщейГруппы = "ОбщаяГруппа" + Дело.ИдентификаторВладельца;
			Если ТекущаяОбщаяГруппа <> ИмяОбщейГруппы Тогда
				
				РазделСвернут = СвернутыеРазделы[Дело.ИдентификаторВладельца];
				Если РазделСвернут = Неопределено Тогда
					Если СохраненныеНастройкиОтображения = Неопределено
						И ТекущаяОбщаяГруппа <> "" Тогда
						// Первая группа не сворачивается.
						СвернутыеРазделы.Вставить(Дело.ИдентификаторВладельца, Истина);
						РазделСвернут = Истина;
					Иначе
						СвернутыеРазделы.Вставить(Дело.ИдентификаторВладельца, Ложь);
					КонецЕсли;
					
				КонецЕсли;
				
				ВключенаВидимостьРаздела = ЗаданнаяВидимостьРазделов[Дело.ИдентификаторВладельца];
				Если ВключенаВидимостьРаздела = Неопределено Тогда
					ВключенаВидимостьРаздела = Истина;
				КонецЕсли;
				
				// Создание общей группы, содержащей все элементы для отображения раздела и включенных в него дел.
				ОбщаяГруппа = Группа(ИмяОбщейГруппы,, "ОбщаяГруппа");
				ОбщаяГруппа.Видимость = Ложь;
				// Создание группы заголовка раздела.
				ИмяГруппыЗаголовка = "ЗаголовокРаздела" + Дело.ИдентификаторВладельца;
				ГруппаЗаголовка    = Группа(ИмяГруппыЗаголовка, ОбщаяГруппа, "ЗаголовокРаздела");
				// Создание заголовка раздела.
				СоздатьЗаголовок(Дело, ГруппаЗаголовка, РазделСвернут);
				
				ТекущаяОбщаяГруппа = ИмяОбщейГруппы;
			КонецЕсли;
			
			// Создание группы дел.
			ИмяГруппы = "Группа" + Дело.ИдентификаторВладельца;
			Если ТекущаяГруппа <> ИмяГруппы Тогда
				ТекущаяГруппа = ИмяГруппы;
				Группа        = Группа(ИмяГруппы, ОбщаяГруппа);
				Если ЭтоМобильныйКлиент Тогда
					ВариантОтображения = ОтображениеОбычнойГруппы.Нет;
				Иначе
					ВариантОтображения = ОтображениеОбычнойГруппы.СильноеВыделение;
				КонецЕсли;
				Группа.Отображение = ВариантОтображения;
				
				Если РазделСвернут = Истина Тогда
					Группа.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ВключенаВидимостьДела = ЗаданнаяВидимостьДел[Дело.Идентификатор];
			Если ВключенаВидимостьДела = Неопределено Тогда
				ВключенаВидимостьДела = Истина;
			КонецЕсли;
			
			Если ВключенаВидимостьРаздела И ВключенаВидимостьДела И Дело.ЕстьДела Тогда
				ВыводимыеДелаИРазделы.Вставить(ИмяГруппыЗаголовка);
				ОбщаяГруппа.Видимость = Истина;
			КонецЕсли;
			
			СоздатьДело(Дело, Группа, ВключенаВидимостьДела);
			
			// Включение индикатора наличия важных дел.
			Если Дело.ЕстьДела
				И Дело.Важное
				И ВключенаВидимостьДела Тогда
				
				РазделыСВажнымиДелами.Вставить(Дело.ИдентификаторВладельца, СвернутыеРазделы[Дело.ИдентификаторВладельца]);
			КонецЕсли;
			
		Иначе
			СоздатьДочернееДело(Дело);
		КонецЕсли;
		
		ЗаполнитьПараметрыДела(Дело);
		
	КонецЦикла;
	
	Найденные = СозданныеЭлементыДел.НайтиСтроки(Новый Структура("Используется", Ложь));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Элемент = Элементы[СтрокаТаблицы.ИмяЭлемента];
		Если Элемент.Видимость Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьДелаСОповещением(СохраненныеНастройкиОтображения, ТекущиеДела);
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлемент(ИмяЭлемента, ТипЭлемента, Родитель)
	Найденные = СозданныеЭлементыДел.НайтиСтроки(Новый Структура("ИмяЭлемента", ИмяЭлемента));
	Если Найденные.Количество() > 0 Тогда
		Найденные[0].Используется = Истина;
		Элемент = Элементы[ИмяЭлемента];
		Элементы.Переместить(Элемент, Родитель);
		Если Не Элемент.Видимость Тогда
			Элемент.Видимость = Истина;
		КонецЕсли;
	Иначе
		СтрокаТаблицы = СозданныеЭлементыДел.Добавить();
		СтрокаТаблицы.ИмяЭлемента  = ИмяЭлемента;
		СтрокаТаблицы.Используется = Истина;
		Элемент = Элементы.Добавить(ИмяЭлемента, ТипЭлемента, Родитель);
	КонецЕсли;
	Возврат Элемент;
КонецФункции

&НаСервере
Функция Группа(ИмяГруппы, Родитель = Неопределено, ТипГруппы = "")
	
	Если Родитель = Неопределено Тогда
		Родитель = Элементы.СтраницаДела;
	КонецЕсли;
	
	Группа = ДобавитьЭлемент(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	Если ТипГруппы = "ЗаголовокРаздела" Тогда
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Иначе
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	Группа.ОтображатьЗаголовок = Ложь;
	
	Возврат Группа;
	
КонецФункции

&НаСервере
Процедура СоздатьДело(Дело, Группа, ВключенаВидимостьДела)
	
	ЗаголовокДела = Дело.Представление + ?(Дело.Количество <> 0," (" + Дело.Количество + ")", "");
	
	Элемент = ДобавитьЭлемент(Дело.Идентификатор, Тип("ДекорацияФормы"), Группа); // РасширениеПоляФормыДляПоляНадписи
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элемент.Заголовок = ЗаголовокДела;
	Элемент.Видимость = (ВключенаВидимостьДела И Дело.ЕстьДела);
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.Гиперссылка = ЗначениеЗаполнено(Дело.Форма);
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработатьНажатиеНаГиперссылку");
	
	Если Дело.Важное Тогда
		Элемент.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	КонецЕсли;
	
	// Сброс заголовка подсказки чтобы исключить дубли вложенных дел при перерисовке формы.
	Элемент.РасширеннаяПодсказка.Заголовок = "";
	
	Если ЗначениеЗаполнено(Дело.Подсказка) Тогда
		Подсказка                    = Новый ФорматированнаяСтрока(Дело.Подсказка);
		Элемент.Подсказка            = Подсказка;
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаголовок(Дело, Группа, РазделСвернут)
	
	// Создание картинки сворачивания/разворачивания раздела.
	Элемент = ДобавитьЭлемент("Картинка" + Дело.ИдентификаторВладельца, Тип("ДекорацияФормы"), Группа); // РасширениеПоляФормыДляПоляНадписи
	Элемент.Вид = ВидДекорацииФормы.Картинка;
	Элемент.Гиперссылка = Истина;
	
	Если РазделСвернут = Истина Тогда
		Если Дело.ЕстьДела И Дело.Важное Тогда
			Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправоКраснаяБЗК;
		Иначе
			Элемент.Картинка = БиблиотекаКартинок.СтрелкаВправо;
		КонецЕсли;
	Иначе
		Элемент.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
	Элемент.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	Элемент.Ширина      = 2;
	Элемент.Высота      = 1;
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработатьНажатиеНаКартинку");
	Элемент.Подсказка = НСтр("ru = 'Развернуть/свернуть раздел';
							|en = 'Expand or collapse section'");
	
	// Создание заголовка раздела.
	Элемент = ДобавитьЭлемент("Заголовок" + Дело.ИдентификаторВладельца, Тип("ДекорацияФормы"), Группа);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элемент.Заголовок  = Дело.ПредставлениеРаздела;
	Элемент.Шрифт = ШрифтыСтиля.ТекущиеДелаЗаголовокРазделаШрифт;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДочернееДело(Дело)
	
	Если Не Дело.ЕстьДела Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДелоВладелец = Элементы.Найти(Дело.ИдентификаторВладельца);
	Если ЭлементДелоВладелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементДелоВладелец.ОтображениеПодсказки           = ОтображениеПодсказки.ОтображатьСнизу;
	ЭлементДелоВладелец.РасширеннаяПодсказка.Шрифт     = ШрифтыСтиля.ТекущиеДелаЗаголовокДочернегоДела;
	ЭлементДелоВладелец.РасширеннаяПодсказка.РастягиватьПоГоризонтали = Истина;
	
	ЗаголовокПодчиненногоДела = ЗаголовокПодчиненногоДела(ЭлементДелоВладелец.РасширеннаяПодсказка.Заголовок, Дело);
	
	ЭлементДелоВладелец.РасширеннаяПодсказка.Заголовок = ЗаголовокПодчиненногоДела;
	ЭлементДелоВладелец.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНажатияНавигационнойСсылки");
	ЭлементДелоВладелец.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	
	// Включение индикатора наличия важных дел.
	Если Дело.ЕстьДела
		И Дело.Важное
		И ЭлементДелоВладелец.Видимость Тогда
		
		ИдентификаторРаздела = СтрЗаменить(ЭлементДелоВладелец.Родитель.Имя, "Группа", "");
		РазделыСВажнымиДелами.Вставить(ИдентификаторРаздела, Не ЭлементДелоВладелец.Родитель.Видимость);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокПодчиненногоДела(ТекущийЗаголовок, Дело)
	
	ТекущийЗаголовокПустой = Не ЗначениеЗаполнено(ТекущийЗаголовок);
	ЗаголовокДела = Дело.Представление + ?(Дело.Количество <> 0," (" + Дело.Количество + ")", "");
	СтрокаЗаголовкаДела    = ЗаголовокДела;
	Если Дело.Важное Тогда
		ЦветДела        = ЦветаСтиля.ПросроченныеДанныеЦвет;
	Иначе
		ЦветДела        = ЦветаСтиля.ЗаголовокДелаЦвет;
	КонецЕсли;
	
	ФорматированнаяСтрокаПеренос = Новый ФорматированнаяСтрока(Символы.ПС);
	ФорматированнаяСтрокаОтступ  = Новый ФорматированнаяСтрока(Символы.НПП+Символы.НПП+Символы.НПП);
	
	Если Дело.Важное Тогда
		Если ЗначениеЗаполнено(Дело.Форма) Тогда
			ФорматированнаяСтрокаЗаголовкаДела = Новый ФорматированнаяСтрока(
			                                           СтрокаЗаголовкаДела,,
			                                           ЦветДела,,
			                                           Дело.Идентификатор);
		Иначе
			ФорматированнаяСтрокаЗаголовкаДела = Новый ФорматированнаяСтрока(
			                                           СтрокаЗаголовкаДела,,
			                                           ЦветДела);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Дело.Форма) Тогда
			ФорматированнаяСтрокаЗаголовкаДела = Новый ФорматированнаяСтрока(
			                                           СтрокаЗаголовкаДела,,,,
			                                           Дело.Идентификатор);
		Иначе
			ФорматированнаяСтрокаЗаголовкаДела = Новый ФорматированнаяСтрока(СтрокаЗаголовкаДела,,ЦветДела);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийЗаголовокПустой Тогда
		Возврат Новый ФорматированнаяСтрока(ФорматированнаяСтрокаОтступ, ФорматированнаяСтрокаЗаголовкаДела);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекущийЗаголовок, ФорматированнаяСтрокаПеренос, ФорматированнаяСтрокаОтступ, ФорматированнаяСтрокаЗаголовкаДела);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыДела(Дело)
	
	ЗаполнитьЗначенияСвойств(ПараметрыДел.Добавить(), Дело);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДелаСОповещением(СохраненныеНастройкиОтображения, ТекущиеДела)
	
	ДелаСОповещением.Очистить();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВыводитьВОповещениях", Истина);
	
	Если СохраненныеНастройкиОтображения <> Неопределено
		И СохраненныеНастройкиОтображения.ДеревоДел.Колонки.Найти("ВыводитьВОповещениях") <> Неопределено Тогда
		НайденныеСтроки = СохраненныеНастройкиОтображения.ДеревоДел.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Дело = ТекущиеДела.Найти(Строка.Идентификатор, "Идентификатор");
			
			Если Дело = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Дело <> Неопределено И Не Дело.ЕстьДела Тогда
				Продолжить;
			КонецЕсли;
			
			Если СохраненныеНастройкиОтображения.ВидимостьДел[Строка.Идентификатор] = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			Если Дело.Количество <> 0 Тогда
				Добавка = " (" + Дело.Количество + ")";
			Иначе
				Добавка = "";
			КонецЕсли;
			
			ДелоСОповещением = ДелаСОповещением.Добавить();
			ДелоСОповещением.Идентификатор = Строка.Идентификатор;
			ДелоСОповещением.Описание = Строка.Представление + Добавка;
		КонецЦикла;
	КонецЕсли;
	
	НайденныеСтроки = ТекущиеДела.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если СохраненныеНастройкиОтображения <> Неопределено
			И СохраненныеНастройкиОтображения.ВидимостьДел[Строка.Идентификатор] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Строка.ЕстьДела Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Количество <> 0 Тогда
			Добавка = " (" + Строка.Количество + ")";
		Иначе
			Добавка = "";
		КонецЕсли;
		
		ДелоСОповещением = ДелаСОповещением.Добавить();
		ДелоСОповещением.Идентификатор = Строка.Идентификатор;
		ДелоСОповещением.Описание = Строка.Представление + Добавка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИНеПоказыватьНаКлиенте(ИмяКоманды)
	ОбновитьДатуНачалаОтображения(ИмяКоманды);
	Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДатуНачалаОтображения(Знач ИмяКоманды)
	Если ИмяКоманды = "ЗакрытьИНеПоказывать2Дня" Тогда
		ДатаНачалаОтображения = ТекущаяДатаСеанса() + 2*86400;
	ИначеЕсли ИмяКоманды = "ЗакрытьИНеПоказыватьНеделю" Тогда
		ДатаНачалаОтображения = ТекущаяДатаСеанса() + 7*86400;
	ИначеЕсли ИмяКоманды = "ЗакрытьИНеПоказыватьМесяц" Тогда
		ДатаНачалаОтображения = ДобавитьМесяц(ТекущаяДатаСеанса(), 1);
	ИначеЕсли ИмяКоманды = "ЗакрытьИНеПоказыватьНикогда" Тогда
		ДатаНачалаОтображения = '39991231';
	ИначеЕсли ИмяКоманды = "ПоказыватьПриНачалеРаботы" Тогда
		ДатаНачалаОтображения = '00010101';
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверное имя команды: %1';
										|en = 'Incorrect command name: %1'"), ИмяКоманды);
	КонецЕсли;
	ЗначенияРесурсов = Новый Структура("ТекущиеДелаПоСЭДОДатаНачала", ДатаНачалаОтображения);
	РегистрыСведений.ПользователиСЭДО.ОбновитьЗначенияРесурсов(ЗначенияРесурсов);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОбновленияТекущихДел(ЧастотаОбновления)
	Если ОбработчикОбновленияПодключен Тогда
		ОтключитьОбработчикОжидания("ОбновитьТекущиеДелаНаКлиенте");
		ОбработчикОбновленияПодключен = Ложь;
	КонецЕсли;
	ПрошлоСекунд = ТекущаяДата() - ДатаПоследнегоОбновления;
	ТребуетсяПодождать = Макс(ЧастотаОбновления - ПрошлоСекунд, 5);
	ПодключитьОбработчикОжидания("ОбновитьТекущиеДелаНаКлиенте", ТребуетсяПодождать, Истина);
	ОбработчикОбновленияПодключен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущиеДелаНаКлиенте()
	ОбработчикОбновленияПодключен = Ложь;
	ЗаполнитьФорму();
	ДатаПоследнегоОбновления = ТекущаяДата();
	ПодключитьОбработчикОбновленияТекущихДел(60*30);
КонецПроцедуры

#КонецОбласти
