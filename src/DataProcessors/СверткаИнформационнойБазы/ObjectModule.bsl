#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета, КурсыВалют;
Перем Комментарий_УдалитьПриСверткеБазы, Комментарий_НеУдалятьПриСверткеБазы, Комментарий_СформированСверткойБазы, Комментарий_СкорректированСверткойБазы;
Перем ТаблицаОстаткиНаСкладахПоПомещениям;
Перем ТаблицаОстаткиНаСкладахПоСериям;
Перем ИспользоватьНазначения;
Перем ТаблицаОстаткиНаСкладахПоНазначению;
Перем КоличествоСтрокВДокументеВводаОстатков;
Перем ОтраженоИзменениеДокументов;
Перем СтруктураИспользованиеИтоговРегистровНакопления;
Перем СкладскиеЯчейки_ЗонаПриемки;
Перем НепериодическиеРСПодчиненныеРегистратору;
Перем ИспользоватьУпаковки, ДанныеДляПересчетаВУпаковки;
Перем ТекущийПользователь;
//++ НЕ УТ
Перем ОбъектыПодсистемыЗУП;
Перем ДокументыПодсистемыЗУП;
Перем ТипыПодсистемыЗУП;
//-- НЕ УТ
#Область СлужебныеПроцедурыИФункции

// Функция возвращает список объектов метаданных
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Соответствие - Ключи - названия объектов метаданных, Значения - сами метаданные.
Функция ПолучитьТипыОбъектовМД() 
	
	МассивРез = Новый Структура();
	МассивРез.Вставить("Документ", Метаданные.Документы);
	МассивРез.Вставить("Задача", Метаданные.Задачи);
	МассивРез.Вставить("РегистрНакопления", Метаданные.РегистрыНакопления);
	МассивРез.Вставить("РегистрСведений", Метаданные.РегистрыСведений);
	//++ НЕ УТ
	МассивРез.Вставить("РегистрБухгалтерии", Метаданные.РегистрыБухгалтерии);
	//-- НЕ УТ
	Возврат МассивРез;
	
КонецФункции

//++ НЕ УТ

Процедура ПолучитьОбъектыПодсистемыЗУП()
	ОбъектыПодсистемыЗУП = Новый Массив;
	ДокументыПодсистемыЗУП = Новый Массив;
	ТипыПодсистемыЗУП = Новый Массив;
	МетаДокументы = Метаданные.Документы;
	МетаРегистрыСведений = Метаданные.РегистрыСведений;
	МетаРегистрыНакопления = Метаданные.РегистрыНакопления;
	МетаРегистрыБухгалтерии = Метаданные.РегистрыБухгалтерии;
	Для Каждого ОбъектМД Из Метаданные.Подсистемы.Зарплата.Состав Цикл
		Если МетаДокументы.Содержит(ОбъектМД) Тогда
			// Это исключение.
			Если ОбъектМД = Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете Тогда
				Продолжить;
			КонецЕсли;
			ОбъектыПодсистемыЗУП.Добавить(ОбъектМД);
			ДокументыПодсистемыЗУП.Добавить(ОбъектМД);
			ТипыПодсистемыЗУП.Добавить(Тип("ДокументСсылка." + ОбъектМД.Имя));
		ИначеЕсли МетаРегистрыСведений.Содержит(ОбъектМД) Тогда
			ОбъектыПодсистемыЗУП.Добавить(ОбъектМД);
			ТипыПодсистемыЗУП.Добавить(Тип("РегистрСведенийНаборЗаписей." + ОбъектМД.Имя));
		КонецЕсли;
	КонецЦикла;
	ОбъектыПодсистемыЗУП.Добавить(Метаданные.РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками);
	ОбъектыПодсистемыЗУП.Добавить(Метаданные.РегистрыСведений.ПредельныеСуммыУдержанийСотрудников);
	ТипыПодсистемыЗУП.Добавить(Тип("РегистрСведенийНаборЗаписей.ПредельныеСуммыУдержанийСотрудников"));
	ТипыПодсистемыЗУП.Добавить(Тип("РегистрНакопленияНаборЗаписей.БухгалтерскиеВзаиморасчетыССотрудниками"));

	// Регистры, которые двигаются документом ПереносДанных, все попадают в исключения.
	Для Каждого ОбъектМД Из Метаданные.Документы.ПереносДанных.Движения Цикл
		Если ОбъектыПодсистемыЗУП.Найти(ОбъектМД) = Неопределено Тогда
			ОбъектыПодсистемыЗУП.Добавить(ОбъектМД);
			Если МетаРегистрыСведений.Содержит(ОбъектМД) Тогда
				ТипыПодсистемыЗУП.Добавить(Тип("РегистрСведенийНаборЗаписей." + ОбъектМД.Имя));
			ИначеЕсли МетаРегистрыНакопления.Содержит(ОбъектМД) Тогда
				ТипыПодсистемыЗУП.Добавить(Тип("РегистрНакопленияНаборЗаписей." + ОбъектМД.Имя));
			ИначеЕсли МетаРегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
				ТипыПодсистемыЗУП.Добавить(Тип("РегистрБухгалтерииНаборЗаписей." + ОбъектМД.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	Для Каждого ОбъектМД Из Метаданные.РегистрыРасчета Цикл
		ТипыПодсистемыЗУП.Добавить(Тип("РегистрРасчетаНаборЗаписей." + ОбъектМД.Имя));
	КонецЦикла;

	// Документы Ведомость на выплату зарплаты добавим.
	ОбъектыПодсистемыЗУП.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк);
	ОбъектыПодсистемыЗУП.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу);
	ОбъектыПодсистемыЗУП.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением);
	ОбъектыПодсистемыЗУП.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком);

	ДокументыПодсистемыЗУП.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк);
	ДокументыПодсистемыЗУП.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу);
	ДокументыПодсистемыЗУП.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением);
	ДокументыПодсистемыЗУП.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком);

	ТипыПодсистемыЗУП.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"));
	ТипыПодсистемыЗУП.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу"));
	ТипыПодсистемыЗУП.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением"));
	ТипыПодсистемыЗУП.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком"));
КонецПроцедуры
//-- НЕ УТ

Процедура ПолучитьНепериодическиеРСПодчиненныеРегистратору()
	НепериодическиеРСПодчиненныеРегистратору = Новый Массив;
	Для Каждого РС Из Метаданные.РегистрыСведений Цикл
		Если РС.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический 
			И РС.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		НепериодическиеРСПодчиненныеРегистратору.Добавить(Тип("РегистрСведенийНаборЗаписей." + РС.Имя));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция возвращает способ удаления движений для типа объекта метаданных
//
// Параметры:
//  ТипОбъектаМД - элемент соответствия, полученного функцией ПолчитьМассивТиповОбъектовМД() 
//  ОбъектМД - метаданные, для которых нужно получить способ свертки
//
// Возвращаемое значение:
//  Строка - способ удаления движений для данного объекта
Функция ПолучитьПризнакУдаленияДвижений(ТипОбъектаМД, ОбъектМД)
	УдалятьДвижения = Ложь;
	//Определим способ свертки по типу объекта метаданных
	Если ТипОбъектаМД.Ключ = "РегистрСведений" ТОгда
		Если (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
			УдалятьДвижения = Истина;
		Иначе
			УдалятьДвижения = Ложь;
		КонецЕсли;
	ИначеЕсли ТипОбъектаМД.Ключ = "РегистрНакопления" ТОгда
		УдалятьДвижения = Истина;
	//++ НЕ УТ
	ИначеЕсли ТипОбъектаМД.Ключ = "РегистрБухгалтерии" ТОгда
		УдалятьДвижения = Истина;
	//-- НЕ УТ
	ИначеЕсли ТипОбъектаМД.Ключ = "Задача" ИЛИ ТипОбъектаМД.Ключ = "Документ" ТОгда
		УдалятьДвижения = Истина;
	КонецЕсли;
	
	Возврат УдалятьДвижения;
	
КонецФункции

// Процедура выводит сообщение о ходе процесса свертки
//
// Параметры:
//  ТекстСообщения - Строка
//	ЭтоОшибка - Булево
//	ОписаниеОшибки - Строка
// 
Процедура СообщениеСвертки(ТекстСообщения, ЭтоОшибка = Ложь, ОписаниеОшибки = Неопределено) 
	
	ПараметрыЖурнала = Новый Структура();
	ПараметрыЖурнала.Вставить("ГруппаСобытий", НСтр("ru = 'СверткаИБ';
													|en = 'СверткаИБ'"));
	ПараметрыЖурнала.Вставить("Метаданные", Неопределено);
	ПараметрыЖурнала.Вставить("Данные", Неопределено);
	Если ЭтоОшибка Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала, УровеньЖурнала, ,ТекстСообщения,ОписаниеОшибки);
КонецПроцедуры

//Процедура формирует и выводит сообщение о формировании документов ввода остатков
Процедура ВывестиСообщениеСформированыДокументы(ИмяДокумента, ХозОперация = "", Обработаны = Ложь)
	Если Обработаны Тогда
		ТекстСообщения = НСтр("ru = 'Обработаны документы %1% (%2%)");
	Иначе
		ТекстСообщения = НСтр("ru = 'Сформированы документы %1% %2%';
								|en = 'Documents %1% %2% generated '");
	КонецЕсли;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", Метаданные.Документы[ИмяДокумента].Синоним);
	Если ХозОперация = "" Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%2%)", "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2%", "");
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2%", ХозОперация); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%2%)", ХозОперация);
	КонецЕсли;
	СообщениеСвертки(ТекстСообщения);
КонецПроцедуры

//Получает массив, содержащий имена документов ввода остатков
Функция ТипыДокументовВводаОстатков(ОбрабатыватьЗаказы)
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("УстановкаБлокировокЯчеек");
	МассивТипов.Добавить("УстановкаКвотАссортимента");
	МассивТипов.Добавить("ИзменениеАссортимента");
	МассивТипов.Добавить("РегистрацияЦенНоменклатурыПоставщика");
	МассивТипов.Добавить("УстановкаЦенНоменклатуры");
	
	МассивТипов.Добавить("ВводОстатковВзаиморасчетов");
	МассивТипов.Добавить("ВводОстатковДенежныхСредств");
	МассивТипов.Добавить("ВводОстатковОПродажахЗаПрошлыеПериоды");
	МассивТипов.Добавить("ВводОстатковПоФинансовымИнструментам");
	МассивТипов.Добавить("ВводОстатковПрочиеРасходы");
	МассивТипов.Добавить("ВводОстатковПрочихАктивовПассивов");
	МассивТипов.Добавить("ВводОстатковРасчетовПоЭквайрингу");
	МассивТипов.Добавить("ВводОстатковСПодотчетниками");
	МассивТипов.Добавить("ВводОстатковТоваров");
	МассивТипов.Добавить("ВводОстатковНДСПредъявленного");

	МассивТипов.Добавить("ОтборРазмещениеТоваров");
	МассивТипов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
	МассивТипов.Добавить("БлокировкаВычетаНДС");
	МассивТипов.Добавить("НачислениеИСписаниеБонусныхБаллов");
	МассивТипов.Добавить("ПервичныйДокумент");
	МассивТипов.Добавить("ПриемкаТоваровНаХранение");
	//++ НЕ УТ
	МассивТипов.Добавить("ВводОстатковРасходовПриУСН");
	МассивТипов.Добавить("ВводОстатковТМЦВЭксплуатации");
	МассивТипов.Добавить("УстановкаЗначенийНефинансовыхПоказателей");
	МассивТипов.Добавить("НормативРаспределенияПлановПродажПоКатегориям");
	//++ Устарело_Переработка24
	МассивТипов.Добавить("ПоступлениеОтПереработчика"); 
	//-- Устарело_Переработка24
	МассивТипов.Добавить("ОстаткиЕГАИС"); 
	МассивТипов.Добавить("ВводОстатковВнеоборотныхАктивов2_4");
	МассивТипов.Добавить("УведомлениеОбОстаткахПрослеживаемыхТоваров");
	МассивТипов.Добавить("ВводОстатковВзаиморасчетовПоАренде");
	МассивТипов.Добавить("НаработкаТМЦВЭксплуатации");
	МассивТипов.Добавить("ПараметрыНачисленияЗемельногоНалога");   
	МассивТипов.Добавить("ПараметрыНачисленияНалогаНаИмущество");
    МассивТипов.Добавить("ПараметрыНачисленияТранспортногоНалога");
	МассивТипов.Добавить("ОперацияБух");
	//-- НЕ УТ  
	
	//++ НЕ УТКА
	МассивТипов.Добавить("ВводОстатковНМАМеждународныйУчет");
	МассивТипов.Добавить("ВводОстатковОСМеждународныйУчет");
	МассивТипов.Добавить("РазрешениеНаЗаменуМатериалов");
	МассивТипов.Добавить("УстановкаЗначенийНаработки"); 
	МассивТипов.Добавить("НачальныеОстаткиНЗППоПартиямПроизводства");
	//-- НЕ УТКА

	Если ОбрабатыватьЗаказы Тогда
		МассивТипов.Добавить("ЗаказКлиента");
		МассивТипов.Добавить("ЗаказНаВнутреннееПотребление");
		МассивТипов.Добавить("ЗаказНаПеремещение");
		МассивТипов.Добавить("ЗаказНаСборку");
		МассивТипов.Добавить("ЗаказПоставщику");
		МассивТипов.Добавить("ЗаявкаНаВозвратТоваровОтКлиента");
		//++ НЕ УТ
		МассивТипов.Добавить("ЗаказМатериаловВПроизводство");
		//++ Устарело_Переработка24
		МассивТипов.Добавить("ЗаказПереработчику"); 
		//-- Устарело_Переработка24
		МассивТипов.Добавить("ЗаказПереработчику2_5"); 
		//++ НЕ УТКА
		МассивТипов.Добавить("ЗаказНаПроизводство");
		//++ Устарело_Переработка24
		МассивТипов.Добавить("ЗаказДавальца");
		//-- Устарело_Переработка24
		МассивТипов.Добавить("ЗаказНаРемонт");
		//-- НЕ УТКА   
		
		//-- НЕ УТ
	КонецЕсли;
	Возврат МассивТипов;
КонецФункции

//Функция получает массив документов ввода остатков для последующего проведения, удаления или исключения из списка удаляемых документов
//Параметр - Действие (строка), от него зависит по каким условиям будут отбираться документы
Функция ДокументыВводаОстатковПодлежащиеОбработке(Действие)
	
	Если Действие = "проведение" Тогда
		ДопУсловие = " И НЕ Док.ПометкаУдаления И НЕ Док.Проведен
		| И Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы
		| И Док.Дата >= &НачДата";
	ИначеЕсли Действие = "удаление" Тогда
		ДопУсловие = " И Док.Дата >= &НачДата  И НЕ Док.ПометкаУдаления
		|И Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы";
	ИначеЕсли Действие = "исключение" Тогда
		ДопУсловие = " И (Док.Дата >= &НачДата И Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы ИЛИ
		|Док.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы)";
	КонецЕсли;
	//Документы Заказ и Заявка на возврат обрабатываются только на этапе исключение. 
	//У них не бывает коммента %Сформирован обработкой свертки базы% 
	ОбрабатыватьЗаказы = ?(Действие = "исключение", Истина, Ложь);
	ТипыДокументов = ТипыДокументовВводаОстатков(ОбрабатыватьЗаказы);
	
	ТекстЗапроса = "";
	Для Каждого ИмяДокумента ИЗ ТипыДокументов Цикл
		Если ИмяДокумента = "БлокировкаВычетаНДС" И Действие = "проведение" Тогда
			// Этот тип не проводится.
			Продолжить;
		КонецЕсли;
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		// У некоторых документов реквизит Комментарий отсутствует.
		ДопУсловиеДляВидаДокумента = ДопУсловие;
		Если ИмяДокумента = "ПервичныйДокумент" Тогда
			ДопУсловиеДляВидаДокумента = "";
		//++ НЕ УТКА
		ИначеЕсли ИмяДокумента = "РазрешениеНаЗаменуМатериалов" Тогда
			ДопУсловиеДляВидаДокумента = СтрЗаменить(ДопУсловие, ".Комментарий", ".УказаниеПоПрименению");
		//-- НЕ УТКА
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|Док.Ссылка КАК Ссылка
		|ИЗ Документ."+ИмяДокумента+" КАК Док
		|ГДЕ Док.Дата <= &КонДата "+ ДопУсловиеДляВидаДокумента +"
		|";
	КонецЦикла;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаСверткиИБ));
	ДополнениеДатой = Формат(ДатаСверткиИБ, "ДЛФ=Д");
	
	Запрос.УстановитьПараметр("Комментарий_СформированСверткойБазы", "%"+ ДополнениеДатой + " " + НСтр("ru = 'Сформирован обработкой свертки базы';
																										|en = 'Generated by infobase rollup data processor'")+"%");
	Запрос.УстановитьПараметр("Комментарий_НеУдалятьПриСверткеБазы", "%"+ ДополнениеДатой + " " + НСтр("ru = 'Не удалять при свертке базы';
																										|en = 'Do not delete upon base rollup'")+"%");
	Запрос.УстановитьПараметр("Комментарий_СкорректированСверткойБазы", "%"+ ДополнениеДатой + " " + НСтр("ru = 'Скорректирован обработкой свертки базы';
																											|en = 'Corrected by infobase rollup data processor'"));
	
	
	Результат = Запрос.Выполнить();
	МассивДокументов = Новый Массив;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивДокументов.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	// Добавление документов СФПолуч и СФ на аванс, введенных на основании ввода остатков либо Первичных документов сформированных сверткой
	Если Действие = "проведение" Тогда
		ДопУсловиеСФ = " И НЕ Док.Ссылка.ПометкаУдаления И НЕ Док.Ссылка.Проведен
		| И Док.ДокументОснование.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы
		| И Док.ДокументОснование.Дата >= &НачДата";
	ИначеЕсли Действие = "удаление" Тогда
		ДопУсловиеСФ = " И Док.ДокументОснование.Дата >= &НачДата  И НЕ Док.Ссылка.ПометкаУдаления
		|И Док.ДокументОснование.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы";
	ИначеЕсли Действие = "исключение" Тогда
		ДопУсловиеСФ = " И (Док.ДокументОснование.Дата >= &НачДата И Док.ДокументОснование.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы ИЛИ
		|Док.ДокументОснование.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы)";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка
	|ИЗ Документ.СчетФактураПолученный.ДокументыОснования КАК Док
	|ГДЕ Док.ДокументОснование ССЫЛКА Документ.ПервичныйДокумент
	|	И  Док.ДокументОснование.Дата <= &КонДата " + ДопУсловиеСФ + "
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка
	|ИЗ Документ.СчетФактураПолученныйАванс КАК Док
	|ГДЕ (Док.ДокументОснование ССЫЛКА Документ.ПервичныйДокумент)
	|	И  Док.ДокументОснование.Дата <= &КонДата " + ДопУсловиеСФ + "
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка
	|ИЗ Документ.СчетФактураВыданныйАванс КАК Док
	|ГДЕ (Док.ДокументОснование ССЫЛКА Документ.ПервичныйДокумент)
	|	И  Док.ДокументОснование.Дата <= &КонДата " + ДопУсловиеСФ + "
	|";
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("Комментарий_СформированСверткойБазы", "%"+ ДополнениеДатой + " "+НСтр("ru = 'Сформирован обработкой свертки базы';
																									|en = 'Generated by infobase rollup data processor'")+"%");
	Запрос.УстановитьПараметр("Комментарий_НеУдалятьПриСверткеБазы", "%"+ ДополнениеДатой + " "+НСтр("ru = 'Не удалять при свертке базы';
																									|en = 'Do not delete upon base rollup'")+"%");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
КонецФункции

// Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) 

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

//Процедура записывает в константу параметров свертки факт изменения документов в ходе создания документов ввода остатков
Процедура ЗафиксироватьИзменениеДокументовВПараметрСвертки()
	Если ОтраженоИзменениеДокументов Тогда
		Возврат;
	КонецЕсли;
	УстановитьПараметрСвертки("ИзмененыДокументы");
	ОтраженоИзменениеДокументов = Истина;
КонецПроцедуры

Процедура УстановитьПараметрСвертки(ИмяПараметра, ЗначениеПараметра = Истина) Экспорт
	СтруктураПараметрыСвертки = Константы.ПараметрыСверткиИБ.Получить().Получить();
	Если ТипЗнч(СтруктураПараметрыСвертки) <> Тип("Структура") Тогда
		СтруктураПараметрыСвертки = Новый Структура;
	ИначеЕсли СтруктураПараметрыСвертки.Свойство(ИмяПараметра) Тогда
		//Возможно, уже установлено 
		Если СтруктураПараметрыСвертки[ИмяПараметра] = ЗначениеПараметра Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметрыСвертки.Вставить(ИмяПараметра, ЗначениеПараметра);
	СтруктураПараметрыСверткиХранилище = Новый ХранилищеЗначения(СтруктураПараметрыСвертки);
	Константы.ПараметрыСверткиИБ.Установить(СтруктураПараметрыСверткиХранилище);
КонецПроцедуры

#Область ПроведениеДокументовВводаОстатков

// Процедура проводит документы ввода остатков 
// 
Процедура ПровестиДокументыВводаОстатков() Экспорт
	СообщениеСвертки(НСтр("ru = 'Проведение документов ввода остатков: начато';
							|en = 'Posting documents of entering balance: started'"));
	МассивДокументов = ДокументыВводаОстатковПодлежащиеОбработке("проведение");
	Для каждого ДокСсылка ИЗ МассивДокументов Цикл
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		ДокОбъект.ДополнительныеСвойства.Вставить("СверткаИБ", Истина); 
		Попытка
			//Док ОтборРазмещениеТоваров - особый алгоритм. Последовательное проведение в разных статусах
			Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
				ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
			КонецЕсли;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СообщениеСвертки(НСтр("ru = 'Проведен';
									|en = 'Posted '")+": "+ ДокОбъект.Ссылка);
		Исключение
			СообщениеСвертки(НСтр("ru = 'Не удалось провести документ';
									|en = 'Cannot post the document'")+" :" + ДокОбъект.Ссылка, Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	// Включить обратно контроль остатков, если надо.
	СтруктураПараметрыСвертки = Константы.ПараметрыСверткиИБ.Получить().Получить();
	Если ТипЗнч(СтруктураПараметрыСвертки) = Тип("Структура") Тогда
		Если СтруктураПараметрыСвертки.Свойство("СброшенКонтрольОстатковТоварыОрганизаций")
			И СтруктураПараметрыСвертки.СброшенКонтрольОстатковТоварыОрганизаций Тогда
			Константы.КонтролироватьОстаткиТоваровОрганизаций.Установить(Истина);
			СтруктураПараметрыСвертки.СброшенКонтрольОстатковТоварыОрганизаций = Ложь;
			СтруктураПараметрыСверткиХранилище = Новый ХранилищеЗначения(СтруктураПараметрыСвертки);
			Константы.ПараметрыСверткиИБ.Установить(СтруктураПараметрыСверткиХранилище);
		КонецЕсли; 
	КонецЕсли;
	УдалитьДвиженияРегистровЗадания();
	//++ НЕ УТ
	ПараметрыОтражения = РеглУчетПроведениеСервер.ПараметрыОтраженияВРеглУчете();
	ПараметрыОтражения.ПериодРасчета = КонецДня(ДатаСверткиИБ);
	РеглУчетПроведениеСервер.ОтразитьВсе(ПараметрыОтражения);
	//-- НЕ УТ
    СообщениеСвертки(НСтр("ru = 'Проведение документов ввода остатков: завершено';
							|en = 'Posting documents of entering balance: completed'"));
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыУдаленияОбъектовМетаданныхИДвижений

//Функция определяет, используется ли в итогах хотя бы одно измерение регистра накопления
Функция ИспользуютсяИтогиРегистраНакопления(ИмяРегистра)
	ИспользованиеИтогов = Неопределено;
	СтруктураИспользованиеИтоговРегистровНакопления.Свойство(ИмяРегистра, ИспользованиеИтогов);
	Если ИспользованиеИтогов <> Неопределено Тогда
		Возврат ИспользованиеИтогов;
	КонецЕсли;
	ИспользованиеИтогов = Ложь;
	Для Каждого ИзмерениеРегистра ИЗ Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		Если ИзмерениеРегистра.ИспользованиеВИтогах Тогда
			ИспользованиеИтогов = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтруктураИспользованиеИтоговРегистровНакопления.Вставить(ИмяРегистра,ИспользованиеИтогов);
	Возврат ИспользованиеИтогов;
КонецФункции

// Процедура производит свертку по переданному объекту метаданных
//
Процедура УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов)
		
	СообщениеСвертки(НСтр("ru = 'Начало очистки';
							|en = 'Cleanup start'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД);
	
	Если (ВРЕГ(ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ") Тогда
		ЕстьИтоги = ИспользуютсяИтогиРегистраНакопления(ТекСтрока.ОбъектМД);
		Если ЕстьИтоги Тогда
			РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Ложь);
		КонецЕсли;
		
		Попытка
			УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД,МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		Исключение
			СообщениеСвертки(НСтр("ru = 'Ошибка при очистке';
									|en = 'Cleanup error'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина, ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;	
		Если ЕстьИтоги Тогда
			РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
		КонецЕсли;
	//++ НЕ УТ
	ИначеЕсли (ВРЕГ(ТипОбъектаМД) = "РЕГИСТРБУХГАЛТЕРИИ") Тогда
		Попытка
			УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД,МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		Исключение
			СообщениеСвертки(НСтр("ru = 'Ошибка при очистке';
									|en = 'Cleanup error'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина, ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;	

	//-- НЕ УТ
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		ТекРег = Метаданные.РегистрыСведений.Найти(ТекСтрока.ОбъектМД);
		
		Попытка
			Если (ТекРег.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
				Если ТекРег.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					// Такие движения удаляем при пометке на удаление регистратора.
					Возврат;
				КонецЕсли;
				УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			КонецЕсли;	
			
		Исключение
			СообщениеСвертки(НСтр("ru = 'Ошибка при очистке';
									|en = 'Cleanup error'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина, ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;	
		
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "ДОКУМЕНТ" Тогда
		ПометитьНаУдалениеДокументы(ТекСтрока.ОбъектМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
		
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "ЗАДАЧА" Тогда
		ПометитьНаУдалениеЗадачи(ТекСтрока.ОбъектМД);
	КонецЕсли;
	
	СообщениеСвертки(НСтр("ru = 'Окончание очистки';
							|en = 'Cleanup end'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД);
	
КонецПроцедуры	

// Процедура производит удаление движений по дату свертки
//
// Параметры:
//  ДеревоСпособовСвертки	- дерево значений, содержащее объекты для свертки  
//
Процедура УдалитьДвиженияПоДатуСвертки() Экспорт 
	СообщениеСвертки(НСтр("ru = 'Удаление данных до даты свертки: начато';
							|en = 'Deleting data before rollup date: started'"));

	// Включение специального параметра сеанса, чтобы не срабатывал контроль остатков.
	ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(Новый Структура("РежимВыполнения", "СверткаИБ"));

	ТаблицаУдаленияДвиженийПоОбъектамМетаданных = Новый ТаблицаЗначений;
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Колонки.Добавить("ТипОбъектаМД");
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Колонки.Добавить("ОбъектМД");

	МассивТиповОбъектовМД = ПолучитьТипыОбъектовМД();

	//++ НЕ УТ
	ПолучитьОбъектыПодсистемыЗУП();
	//-- НЕ УТ
	ПолучитьНепериодическиеРСПодчиненныеРегистратору();
	Для Каждого ТипОбъектаМД Из МассивТиповОбъектовМД Цикл
		Для Каждого ОбъектМД из ТипОбъектаМД.Значение Цикл
			//++ НЕ УТ
			Если ОбъектыПодсистемыЗУП.Найти(ОбъектМД) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//-- НЕ УТ
			ПризнакУдаленияДвижений = ПолучитьПризнакУдаленияДвижений(ТипОбъектаМД, ОбъектМД);
			Если ПризнакУдаленияДвижений = Ложь Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрокаОбъектМД = ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Добавить();
			НоваяСтрокаОбъектМД.ТипОбъектаМД = ТипОбъектаМД.Ключ;
			НоваяСтрокаОбъектМД.ОбъектМД = ОбъектМД.Имя;
		КонецЦикла;
	КонецЦикла;
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Сортировать("ТипОбъектаМД, ОбъектМД");
	
	//Получим массив исключаемых документов - некоторые типы документов, 
	//	у которых комментарий содержит строку "Не удалять при свертке базы" либо "Сформирован обработкой свертки базы"
	МассивПропускаемыхДокументов = ДокументыВводаОстатковПодлежащиеОбработке("исключение");
	
	//Получим массив удаляемых документов после даты свертки - таких, у которых 
	//комментарий содержит строку "Удалить при свертке базы"
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("ПриходныйОрдерНаТовары");
	МассивТипов.Добавить("РасходныйОрдерНаТовары");
	МассивТипов.Добавить("ПоступлениеТоваровНаСклад");
	МассивТипов.Добавить("ОтборРазмещениеТоваров");

	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Для Каждого ТипДокумента ИЗ МассивТипов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса <> "", "ОБЪЕДИНИТЬ ВСЕ "," ") + " ВЫБРАТЬ
		|Ссылка
		|ИЗ Документ."+ТипДокумента+"
		|ГДЕ Дата > &КонДата И Комментарий ПОДОБНО &ПодлежитУдалению
		|";
	КонецЦикла;
	Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("ПодлежитУдалению", "%" + НСтр("ru = 'Удалить при свертке базы';
															|en = 'Delete upon base rollup'") + "%");

	Запрос.Текст = ТекстЗапроса;
	МассивУдаляемыхДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Для Каждого ТекСтрока Из ТаблицаУдаленияДвиженийПоОбъектамМетаданных Цикл
		Если (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ДОКУМЕНТ") 
			ИЛИ (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ЗАДАЧА") Тогда
			//Обработаем на 2ой итерации
			
		Иначе

			//Удаляются записи регистров
			УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТекСтрока.ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		КонецЕсли;
		
	КонецЦикла;
	// частный случай - регистр сведений не периодический не подчиненный регистратору но привязанный к документам.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДокументОснование,
	|ИдентификаторЗаписи
	|ИЗ РегистрСведений.ЖурналФискальныхОпераций
	|ГДЕ Дата <= &КонДата";
	Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаСверткиИБ));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЖурналНаборЗаписей = РегистрыСведений.ЖурналФискальныхОпераций.СоздатьНаборЗаписей();
		ЖурналНаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
		ЖурналНаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Выборка.ИдентификаторЗаписи);
		ЖурналНаборЗаписей.Записать();
	КонецЦикла;

	// Явно пометим на удаление документы, которые должны обрабатываться в первую очередь 
	//  От них зависит удаление других документов.
	ПометитьНаУдалениеСчетаФактуры(МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
	//++ НЕ УТКА
	ПометитьНаУдалениеДокументы("ЭтапПроизводства2_2", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
	ПометитьНаУдалениеДокументы("ПроизводственнаяОперация2_2", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
	//-- НЕ УТКА

	Для Каждого ТекСтрока Из ТаблицаУдаленияДвиженийПоОбъектамМетаданных Цикл
		Если (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ДОКУМЕНТ") 
			ИЛИ (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ЗАДАЧА") Тогда
			// Некоторые виды документов не помечаются на удаление по техническим особенностям.
			Если НРег(ТекСтрока.ОбъектМД) = НРег("РегистраторЗапасыИПотребности") Тогда
				Продолжить;
			КонецЕсли;
			
			//Помечаются на удаление документы и задачи
			УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТекСтрока.ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		Иначе	
			//Уже обработано на 1й итерации
			
		КонецЕсли;
		
	КонецЦикла;
	// Перепрописать ссылки на партии в движениях НДС до даты свертки.
	ОбработатьДвиженияНДСДоДатыСвертки();
	
	// Удалить Счета фактуры выданные на аванс, на основании помеченных на удаление документов (т.к. при вводе остатков оформлены новые)
	// СФ выданные на аванс, выписанные до свертки движениями после свертки надо удалять.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка
	|ИЗ Документ.СчетФактураВыданныйАванс КАК Шапка
	|ГДЕ Шапка.Дата <= &ДатаСвертки И Шапка.ПометкаУдаления = ЛОЖЬ
	|И Шапка.ДокументОснование.ПометкаУдаления = ИСТИНА
	|" ;
	Запрос.УстановитьПараметр("ДатаСвертки", КонецДня(ДатаСверткиИБ));
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДок.Следующий() Цикл
		ДокОбъект = ВыборкаДок.Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;

	
	//В процессе удаления движений могли остаться регистры накопления с отключенными итогами. Включим их обратно.
	Для Каждого ТекРегистр Из Метаданные.РегистрыНакопления Цикл
		Если НЕ РегистрыНакопления[ТекРегистр.Имя].ПолучитьИспользованиеИтогов()
			И ИспользуютсяИтогиРегистраНакопления(ТекРегистр.Имя) Тогда
			РегистрыНакопления[ТекРегистр.Имя].УстановитьИспользованиеИтогов(Истина);
		КонецЕсли;
	КонецЦикла;
	// Сброс специального параметра сеанса.
    ОбновлениеИнформационнойБазыСлужебный.УстановкаПараметровСеанса("ПараметрыОбработчикаОбновления", Новый Массив);
    СообщениеСвертки(НСтр("ru = 'Удаление данных до даты свертки: завершено';
							|en = 'Deleting data before rollup date: completed'"));
КонецПроцедуры

// Процедура помечает на удаление документы
//
// Параметры:
//  ИмяДокумента - Строка - строка, содержащая имя документа как оно задано в конфигураторе,
//  МассивПропускаемыхДокументов - Массив из ДокументСсылка - Документы, которые исключены из выборки
//  МассивУдаляемыхДокументов - Массив из ДокументСсылка - документы, которые удаляем
//  КорректировочныеСФ - Булево - Признак того, что обрабатываем корректировочные счета-фактуры
//
Процедура ПометитьНаУдалениеДокументы(ИмяДокумента, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, КорректировочныеСФ = Ложь)
	Если ИмяДокумента = "ЧекККМ" ИЛИ ИмяДокумента = "ЧекККМВозврат" Тогда
		// Чеки ККМ можно удалить только специальной обработкой архивирования и удаления чеков ККМ.
		Возврат;
	КонецЕсли;
	МассивПропускаемыхДокументовИсходный = МассивПропускаемыхДокументов;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекДокумент.Ссылка КАК Документ,
	|	ТекДокумент.Дата КАК Дата
	|ИЗ
	|	#ЭтоЗаменяется КАК ТекДокумент
	|ГДЕ
	|	(НЕ ТекДокумент.ПометкаУдаления) 
	|	И ТекДокумент.Дата <= &ДатаОкончания
	|	И ТекДокумент.Дата <= &ПограничнаяДата
	|	И ТекДокумент.Ссылка НЕ В (&МассивПропускаемыхДокументов)";
	Если МассивУдаляемыхДокументов.Количество() > 0 Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 10000
		|	Свод.Документ,
		|	Свод.Дата
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТекДокумент.Ссылка КАК Документ,
		|		ТекДокумент.Дата КАК Дата
		|	ИЗ
		|		#ЭтоЗаменяется КАК ТекДокумент
		|	ГДЕ
		|		(НЕ ТекДокумент.ПометкаУдаления)
		|		И ТекДокумент.Дата > &ДатаОкончания
		|		И ТекДокумент.Дата <= &ПограничнаяДата
		|		И ТекДокумент.Ссылка В (&МассивУдаляемыхДокументов)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТекДокумент.Ссылка,
		|		ТекДокумент.Дата
		|	ИЗ
		|		#ЭтоЗаменяется КАК ТекДокумент
		|	ГДЕ
		|		(НЕ ТекДокумент.ПометкаУдаления)
		|		И ТекДокумент.Дата <= &ДатаОкончания
		|		И ТекДокумент.Дата <= &ПограничнаяДата
		|		И ТекДокумент.Ссылка НЕ В (&МассивПропускаемыхДокументов)) КАК Свод";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗЛИЧНЫЕ", "РАЗЛИЧНЫЕ ПЕРВЫЕ 10000");
	КонецЕсли;
	ЕстьТЧРасшифровкаПлатежа = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено;
    ЕстьТЧЗадолженность = (ИмяДокумента = "КорректировкаЗадолженности");
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "УПОРЯДОЧИТЬ ПО Дата УБЫВ";
	Если КорректировочныеСФ И (ИмяДокумента = "СчетФактураВыданный" Или ИмяДокумента = "СчетФактураПолученный") Тогда
		// Удаление в 2 захода сначала корректировочные потом все остальные.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(НЕ ТекДокумент.ПометкаУдаления)", "(НЕ ТекДокумент.ПометкаУдаления) И ТекДокумент.Корректировочный = ИСТИНА");
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ЭтоЗаменяется", "Документ" + "." + ИмяДокумента);
	ПограничнаяДата = Неопределено;

	Пока Истина Цикл	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Если ПограничнаяДата = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТекДокумент.Дата <= &ПограничнаяДата", "");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаСверткиИБ));
		Запрос.УстановитьПараметр("МассивПропускаемыхДокументов",    МассивПропускаемыхДокументов);
		Запрос.УстановитьПараметр("МассивУдаляемыхДокументов",    МассивУдаляемыхДокументов);
		Запрос.УстановитьПараметр("ПограничнаяДата", ПограничнаяДата);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;

		ДокВыборка = РезультатЗапроса.Выбрать();
		ПоследнийПроход = ДокВыборка.Количество() < 10000;

		Пока ДокВыборка.Следующий() Цикл
			ФлагНаличияДвижений = Ложь;
			ТекДокумент = ДокВыборка.Документ;
			ДокОбъект = ТекДокумент.ПолучитьОбъект();
			ЕстьДвиженияПоЗУПРегистрам = Ложь;
			Для Каждого ТекДвижение Из ДокОбъект.Движения Цикл
				ТекДвижение.Прочитать();
				Если ТекДвижение.Количество() > 0 Тогда
					ТипДвижения = ТипЗнч(ТекДвижение);

					//++ НЕ УТ
					Если ТипыПодсистемыЗУП.Найти(ТипДвижения) <> Неопределено Тогда
						// Документ содержит движения по ЗУП регистрам.
						// Его не надо удалять.
						ЕстьДвиженияПоЗУПРегистрам = Истина;
						Прервать;
					КонецЕсли;
					//-- НЕ УТ  
					
					// Возможно это не периодический регистр сведений. Такие движения удаляются вместе с документом, их наличие не является ошибкой.
					Если НепериодическиеРСПодчиненныеРегистратору.Найти(ТипДвижения) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					//По документу есть движения
					ФлагНаличияДвижений = Истина;
					// Если дата движений больше чем дата свертки сообщение не выводим - это норма.
					Если ТекДвижение[0].Период < КонецДня(ДатаСверткиИБ) Тогда
						ТекстСообщения = НСтр("ru = 'По документу %Документ% есть движения по регистрам, пометка на удаление не выполнена';
												|en = 'There are register records for the %Документ% document. Cannot mark for deletion'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДокОбъект.Ссылка);

						СообщениеСвертки(ТекстСообщения, Истина, "");
					КонецЕсли;
					Прервать;
					
				КонецЕсли;	
			КонецЦикла;
			Если ЕстьДвиженияПоЗУПРегистрам Или ФлагНаличияДвижений Тогда
				МассивПропускаемыхДокументов.Добавить(ТекДокумент);
				Продолжить;
			КонецЕсли;
		
			ДокОбъект.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
			// Особая логика
			Если ИмяДокумента = "РеализацияПодарочныхСертификатов" И ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
				ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			// Чтобы было меньше перекрестных ссылок друг на друга.
			Если ЕстьТЧРасшифровкаПлатежа Тогда
				ДокОбъект.РасшифровкаПлатежа.Очистить();
			КонецЕсли;
			Если ЕстьТЧЗадолженность Тогда
				ДокОбъект.Задолженность.Очистить();
			КонецЕсли;
			Если ИмяДокумента = "СверкаВзаиморасчетов" Тогда 
				ДокОбъект.ДанныеКонтрагента.Очистить();
				ДокОбъект.ГруппировкиРасчеты.Очистить();
				ДокОбъект.ДетальныеЗаписиРасчеты.Очистить();  
				ДокОбъект.ДетальныеЗаписиРасчеты.Очистить();
				ДокОбъект.ДетальныеЗаписиФинансовыеИнструменты.Очистить();
			КонецЕсли;
			ПометкаУстановлена = Истина;
			Попытка
				ДокОбъект.Проведен = Ложь;
				ДокОбъект.ПометкаУдаления = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение   
				ПометкаУстановлена = Ложь;

				ОписаниеОшибки = ОписаниеОшибки();
				ТекстСообщения = НСтр("ru = 'Не удалось пометить на удаление документ %Документ%';
										|en = 'Cannot mark document %Документ% for deletion'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ТекДокумент); 
			КонецПопытки;
			// Пометка на удаление попытка №2
			Если НЕ ПометкаУстановлена Тогда
				ДокОбъект.ОбменДанными.Загрузка = Истина;
				ПометкаУстановлена = Истина;
				Попытка
					ДокОбъект.Проведен = Ложь;
					ДокОбъект.ПометкаУдаления = Истина;
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					ПометкаУстановлена = Ложь; 
					ТекстСообщения = НСтр("ru = 'Не удалось пометить на удаление документ %Документ%';
											|en = 'Cannot mark document %Документ% for deletion'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ТекДокумент);
					ОписаниеОшибки = ОписаниеОшибки();  
				КонецПопытки;
			КонецЕсли;
			
			Если НЕ ПометкаУстановлена Тогда
				МассивПропускаемыхДокументов.Добавить(ТекДокумент);
				СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки);
			КонецЕсли;
			
		КонецЦикла;
		Если ПоследнийПроход Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	МассивПропускаемыхДокументов = МассивПропускаемыхДокументовИсходный;
КонецПроцедуры

// Процедура помечает на удаление задачи
//
// Параметры:
//  ИмяЗадачи - Строка -  строка, содержащая имя задачи как оно задано в конфигураторе  
//
Процедура ПометитьНаУдалениеЗадачи(ИмяЗадачи)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекЗадача.Ссылка КАК Задача
	|ИЗ
	|	#ЭтоЗаменяется КАК ТекЗадача
	|ГДЕ
	|	(НЕ ТекЗадача.ПометкаУдаления)
	|	И ТекЗадача.Дата <= &ДатаОкончания
	|	И ТекЗадача.Выполнена
	|	И &УсловияПоТипуЗадачи";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ЭтоЗаменяется", "Задача" + "." + ИмяЗадачи);
	УсловияДляЗадачи = "ИСТИНА";
	Если ИмяЗадачи = "ЗадачаИсполнителя" Тогда
		УсловияДляЗадачи = "ТекЗадача.СрокИсполнения <= &ДатаОкончания И ТекЗадача.БизнесПроцесс.Завершен";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловияПоТипуЗадачи", УсловияДляЗадачи);
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаСверткиИБ));
	
	ЗадачаВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ЗадачаВыборка.Следующий() Цикл
		ТекЗадача = ЗадачаВыборка.Задача;
		ЗадачаОбъект = ТекЗадача.ПолучитьОбъект();
		
		Попытка
			ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось пометить на удаление задачу %Документ%';
									|en = 'Cannot mark task %Документ% for deletion'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ЗадачаВыборка.Задача);
			СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());

		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает регистры накопления и регистры сведений, подчиненные регистратору
//
// Параметры:
//  ТипОбъектаМД - строка, содержащая тип объекта метаданных,  
//  ИмяРегистра  - строка, содержащая имя регистра,
//  ДатаНачала 	 - дата, начиная с которой происходит чистка регистра,
//  ДатаОкончания- дата, по которую очищается регистр
//
Процедура УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ИмяРегистра, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов) 
			
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
				|	Регистр.Регистратор КАК Регистратор,
				|	ИСТИНА КАК ДоДатыСвертки
				|ИЗ
				|	" + ТипОбъектаМД + "."+ИмяРегистра+" КАК Регистр
				|ГДЕ
				|	Регистр.Период <= &ДатаКон
				|	И Регистр.Регистратор НЕ В (&МассивПропускаемыхДокументов)"; 
	//++ НЕ УТ
	Если НРег(ТипОбъектаМД) = "регистрсведений" Тогда
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	ИначеЕсли НРег(ТипОбъектаМД) = "регистрнакопления" Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
	ИначеЕсли НРег(ТипОбъектаМД) = "регистрбухгалтерии" Тогда
		МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	КонецЕсли;
	Для Каждого ЗУПОбъект Из ДокументыПодсистемыЗУП Цикл
		Если ЗУПОбъект.Движения.Содержит(МетаданныеРегистра) Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И НЕ (Регистр.Регистратор Ссылка Документ." + ЗУПОбъект.Имя + ")";
		КонецЕсли;
	КонецЦикла;
	//-- НЕ УТ
	Если МассивУдаляемыхДокументов.Количество()>0 Тогда
	   ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ РАЗЛИЧНЫЕ 
				|	Регистр.Регистратор КАК Регистратор,
				|	ЛОЖЬ КАК ДоДатыСвертки
				|ИЗ
				|	" + ТипОбъектаМД + "."+ИмяРегистра+" КАК Регистр
				|ГДЕ
				|	Регистр.Период > &ДатаКон
				| И Регистр.Регистратор В (&МассивУдаляемыхДокументов)
				|";
	КонецЕсли;
	Пока Истина Цикл
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
				
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаСверткиИБ));
		Запрос.УстановитьПараметр("МассивПропускаемыхДокументов", МассивПропускаемыхДокументов);
		Запрос.УстановитьПараметр("МассивУдаляемыхДокументов", МассивУдаляемыхДокументов);

		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Строка = Результат.Выбрать();
		Пока Строка.Следующий() Цикл
			//++ НЕ УТ
			Если ТипыПодсистемыЗУП.Найти(ТипЗнч(Строка.Регистратор)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//-- НЕ УТ
			Если ВРЕГ(ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
				НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			//++ НЕ УТ
			ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
				НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			//-- НЕ УТ
			Иначе
				СообщениеСвертки(НСтр("ru = 'Не известный тип объекта метаданных';
										|en = 'Unknown metadata object type'") + " " + ТипОбъектаМД);
				Возврат;
			КонецЕсли;	
				
			НаборЗаписей.Отбор.Регистратор.Установить(Строка.Регистратор);
			Если Строка.ДоДатыСвертки Тогда
				// У документа могут быть движения после даты свертки, их надо оставить.
				ЗапросЛокальный = Новый Запрос;
				ЗапросЛокальный.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Регистр.Период
				|ИЗ 
				|	" + ТипОбъектаМД + "."+ИмяРегистра+" КАК Регистр
				|ГДЕ
				|	Регистр.Период > &ДатаКон
				| И Регистр.Регистратор = &Регистратор
				|";
				ЗапросЛокальный.УстановитьПараметр("ДатаКон", КонецДня(ДатаСверткиИБ));
				ЗапросЛокальный.УстановитьПараметр("Регистратор", Строка.Регистратор);
				РезультатЛокальный = ЗапросЛокальный.Выполнить();

				Если НЕ РезультатЛокальный.Пустой() Тогда
					МассивЗаписейКУдалению = Новый Массив;
					НаборЗаписей.Прочитать();
					
					Для Каждого ТекЗапись Из НаборЗаписей Цикл
						Если ТекЗапись.Период <= КонецДня(ДатаСверткиИБ) Тогда
							МассивЗаписейКУдалению.Добавить(ТекЗапись);
						КонецЕсли;
					КонецЦикла;
					Для Каждого УдаляемЗапись Из МассивЗаписейКУдалению Цикл
						НаборЗаписей.Удалить(УдаляемЗапись);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			//Чтобы не выполнялись запросы при записи набора записей
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", Ложь);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

Процедура УдалитьДвиженияРегистровЗадания()
	РегистрыКОчистке = Новый Массив;
	РегистрыКОчистке.Добавить("ЗаданияКЗакрытиюМесяца");
	РегистрыКОчистке.Добавить("ЗаданияКРаспределениюРасчетовСКлиентами");
	РегистрыКОчистке.Добавить("ЗаданияКРаспределениюРасчетовСПоставщиками");
	РегистрыКОчистке.Добавить("ЗаданияКРасчетуСебестоимости");
	РегистрыКОчистке.Добавить("ЗаданияКФормированиюДвиженийПоНДС");
	//++ НЕ УТ
	РегистрыКОчистке.Добавить("ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации");
	РегистрыКОчистке.Добавить("ЗаданияКРасчетуАмортизацииНМА");
	РегистрыКОчистке.Добавить("ЗаданияКРасчетуАмортизацииОС");
	РегистрыКОчистке.Добавить("ЗаданияКРасчетуСтоимостиВНА");
	РегистрыКОчистке.Добавить("ЗаданияКФормированиюДвиженийПоВНА");
	//-- НЕ УТ
	Для Каждого ИмяРегистра Из РегистрыКОчистке Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Месяц
		|ИЗ РегистрСведений." + ИмяРегистра + "
		|ГДЕ Месяц <= &ДатаОст";
		ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборКУдалению = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			НаборКУДалению.Отбор.Месяц.Установить(Выборка.Месяц);
			НаборКУДалению.ОбменДанными.Загрузка = Истина;
			НаборКУДалению.Записать();
		КонецЦикла;
	КонецЦикла;
	// Особые случаи.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактура
	|ИЗ РегистрСведений.ЗаданияКФормированиюДвиженийПоНДС
	|ГДЕ СчетФактура.Дата <= &ДатаОст";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборКУдалению = РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьНаборЗаписей();
		НаборКУДалению.Отбор.СчетФактура.Установить(Выборка.СчетФактура);
		НаборКУДалению.ОбменДанными.Загрузка = Истина;
		НаборКУДалению.Записать();
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ
	|ИЗ РегистрСведений.ЗаданияКРаспределениюРасчетов
	|ГДЕ Документ.Дата <= &ДатаОст";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборКУдалению = РегистрыСведений.ЗаданияКРаспределениюРасчетов.СоздатьНаборЗаписей();
		НаборКУДалению.Отбор.Документ.Установить(Выборка.Документ);
		НаборКУДалению.ОбменДанными.Загрузка = Истина;
		НаборКУДалению.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ПометитьНаУдалениеСчетаФактуры(МассивПропускаемыхДокументов, МассивУдаляемыхДокументов)  
	ПометитьНаУдалениеДокументы("СчетФактураПолученный", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Истина);
    ПометитьНаУдалениеДокументы("СчетФактураВыданный", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Истина);
	ПометитьНаУдалениеДокументы("СчетФактураПолученный", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
    ПометитьНаУдалениеДокументы("СчетФактураВыданный", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
	ПометитьНаУдалениеДокументы("СчетФактураВыданныйАванс", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
	ПометитьНаУдалениеДокументы("СчетФактураКомитента", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
	ПометитьНаУдалениеДокументы("СчетФактураКомиссионеру", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
	ПометитьНаУдалениеДокументы("СчетФактураНалоговыйАгент", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
	ПометитьНаУдалениеДокументы("СчетФактураНаНеподтвержденнуюРеализацию0", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
	ПометитьНаУдалениеДокументы("СчетФактураПолученныйАванс", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
	ПометитьНаУдалениеДокументы("СчетФактураПолученныйНалоговыйАгент", МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Ложь);
КонецПроцедуры
#КонецОбласти

#Область ПроцедурыФормированияДокументовВводаОстатков

// Процедура формирует документы ввода остатков 
//
Процедура СформироватьДокументыВводаОстатков(ПовторныйЗапуск = Ложь) Экспорт
	СообщениеСвертки(НСтр("ru = 'Формирование документов ввода остатков: начато';
							|en = 'Generating documents of entering balance: started'"));

	// Добавление даты свертки в служебные комментарии
	ДополнитьКомментарииСвертки();
	
	// Формирование документов запускается повторно после ошибки
	// Надо удалить документы, созданные на предыдущем этапе
	Если ПовторныйЗапуск Тогда
		МассивДокументов = ДокументыВводаОстатковПодлежащиеОбработке("удаление");
		Для каждого ДокСсылка ИЗ МассивДокументов Цикл
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
			ДокОбъект.Удалить();
		КонецЦикла;
	КонецЕсли;
	ОтраженоИзменениеДокументов = Ложь;
	Если Константы.ИспользоватьДатыЗапретаИзменения.Получить() = Истина Тогда
		// Отключение использования даты запрета.
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Ложь);
		УстановитьПараметрСвертки("СброшенаДатаЗапрета");
	КонецЕсли;
	Если Константы.КонтролироватьОстаткиТоваровОрганизаций.Получить() = Истина Тогда
		// Отключение контроля остатков товаров организаций.
		Константы.КонтролироватьОстаткиТоваровОрганизаций.Установить(Ложь);
		УстановитьПараметрСвертки("СброшенКонтрольОстатковТоварыОрганизаций");
	КонецЕсли;
	// Включение специального параметра сеанса, чтобы не срабатывал контроль остатков.
	ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(Новый Структура("РежимВыполнения", "СверткаИБ"));
	// Последовательный вызов процедур формирования документов ввода остатков
	// Себестоимость товаров в возвратах.
	ОбработатьВозвратыТоваровОтКлиентов();

	// 1. Регистры сведений
	СформироватьДокументыВводаОстатковИзменениеАссортимента();
	СформироватьДокументыВводаОстатковКвотыАссортимента();
	СформироватьДокументыВводаОстатковЦеныНоменклатуры();
	СформироватьДокументыВводаОстатковЦеныНоменклатурыПоставщиков();
	ОбработатьБлокировкиСкладскихЯчеек();

	// 2. Регистры накопления

	ОбработатьОстаткиДенежныеСредстваКПоступлениюИСписанию();
	// 2.1 Деньги
	СформироватьДокументыВводаОстатковДенежныеСредства("Безналичные");
	СформироватьДокументыВводаОстатковДенежныеСредства("ВКассахККМ");
	СформироватьДокументыВводаОстатковДенежныеСредства("Наличные");
	СформироватьДокументыВводаОстатковДенежныеСредства("УПодотчетныхЛиц");
	СформироватьДокументыВводаОстатковДенежныеСредстваКВыплате();
	
	// 2.2 Расчеты
	СформироватьДокументыВводаОстатковРасчеты("РасчетыСКлиентами");
	СформироватьДокументыВводаОстатковРасчеты("РасчетыСПоставщиками"); 
	СформироватьСчетаФактурыНаАванс();
	СформироватьДокументыВводаОстатковРасчетыПоЭквайрингу();
	СформироватьДокументыВводаОстатковРасчетыПоКредитамИДепозитам();  
	
	// 2.3 Товары
	// Таблицы остатков на складах используется для разных товаров (и собственных, и комиссионных)
	ПолучитьТаблицыОстатковНаСкладах();
	ОрганизацииУСНФИФО = Новый Массив;
	
	ДатаПереходаНаПартии22 = Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить();
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22()
		И ДатаПереходаНаПартии22 < КонецДня(ДатаСверткиИБ) Тогда

		ВыборкаОрганизации = Справочники.Организации.Выбрать();
		Пока ВыборкаОрганизации.Следующий() Цикл
			Организация = ВыборкаОрганизации.Ссылка;
			
			ПараметрыУчетнойПолитикиНастройкиСистемыНалогообложения = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(
				"НастройкиСистемыНалогообложения",
				Организация,
				КонецДня(ДатаСверткиИБ));
			Если ПараметрыУчетнойПолитикиНастройкиСистемыНалогообложения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РаздельныйУчетТоваров = Ложь;
			Если  ПараметрыУчетнойПолитикиНастройкиСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
				ПараметрыУчетнойПолитикиНастройкиУчетаУСН = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(
					"НастройкиУчетаУСН",
					Организация,
					КонецДня(ДатаСверткиИБ));
				Если ПараметрыУчетнойПолитикиНастройкиУчетаУСН <> Неопределено Тогда
					РаздельныйУчетТоваров = ПараметрыУчетнойПолитикиНастройкиУчетаУСН.РаздельныйУчетТоваров;
				КонецЕсли;
			Иначе
				ПараметрыУчетнойПолитикиНастройкиУчетаНДС = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(
					"НастройкиУчетаНДС",
					Организация,
					КонецДня(ДатаСверткиИБ));
				Если ПараметрыУчетнойПолитикиНастройкиУчетаНДС <> Неопределено Тогда
					РаздельныйУчетТоваров = ПараметрыУчетнойПолитикиНастройкиУчетаНДС.РаздельныйУчетТоваровПоНалогообложениюНДС;
				КонецЕсли;
			КонецЕсли;
	
		    Если РаздельныйУчетТоваров  Тогда
	 			ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(
					"УчетнаяПолитикаФинансовогоУчета",
					Организация,
					КонецДня(ДатаСверткиИБ));
					
				Если ПараметрыУчетнойПолитики <> Неопределено
					И ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
	
					ОрганизацииУСНФИФО.Добавить(ВыборкаОрганизации.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СформироватьДокументыВводаОстатковТоварыСобственные(ОрганизацииУСНФИФО);
	СформироватьДокументыВводаОстатковТоварыКомиссионные(ОрганизацииУСНФИФО);
	СформироватьДокументыВводаОстатковВозвратнаяТара();
	СформироватьДокументыВводаОстатковТоварыВЯчейках();
	СформироватьДокументыВводаОстатковТоварыПринятые();
	
	// 2.4 Заказы
	СформироватьДокументыВводаОстатковЗаказыКлиентов();
	СформироватьДокументыВводаОстатковЗаказыПоставщикам();
	СформироватьДокументыВводаОстатковЗаказыВнутренние("ЗаказыНаВнутреннееПотребление", "ЗаказНаВнутреннееПотребление");
	СформироватьДокументыВводаОстатковЗаказыВнутренние("ЗаказыНаПеремещение", "ЗаказНаПеремещение");
	СформироватьДокументыВводаОстатковЗаказыВнутренние("ЗаказыНаСборку", "ЗаказНаСборку");
	СформироватьДокументыВводаОстатковЗаявкиНаВозврат();
	
	// 2.5 Подарочные сертификаты
	СформироватьДокументыВводаОстатковПодарочныеСертификаты();
	
	// 2.6 Расходы, фин результат, продажи за прошлые периоды
	СформироватьДокументыВводаОстатковПрочиеРасходы();
	СформироватьДокументыВводаОстатковФинансовыйРезультат();
	СформироватьДокументыВводаОстатковПродажи();
	
	// 2.7 Ордерная схема
	ОбработатьОстаткиТоварыКОтгрузке();
	ОбработатьОстаткиТоварыКПоступлению();
	ОбработатьОстаткиТоварыКОтбору();
	ОбработатьОстаткиТоваровУПартнеров();
	

	// 2.9 Бонусные баллы
	СформироватьДокументыВводаОстатковБонусныеБаллы();
	
	// 2.10 Прочие активы и пассивы
	СформироватьДокументыВводаОстатковПрочиеАктивыПассивы();
	
	//++ НЕ УТКА
	СформироватьДокументыВводаОстатковАналогиВПроизводстве();
	СформироватьДокументыВводаОстатковЗаказыНаПроизводство();
	//++ Устарело_Переработка24
	СформироватьДокументыВводаОстатковЗаказыДавальцу();
	//-- Устарело_Переработка24
	СформироватьДокументыВводаОстатковЗаказыНаРемонт();
	СформироватьДокументыОСНМАМеждународныйУчет();
	СформироватьДокументыУстановкаЗначенийНаработки();
	ОбработатьДокументыДоступностьРабочихЦентров();
	СформироватьДокументыВводаОстатковНЗП();
	//-- НЕ УТКА
	//++ НЕ УТ
	СформироватьДокументыВводаОстатковТМЦВЭксплуатации();
	СформироватьДокументыУстановкаЗначенийНефинансовыхПоказателей();
	ОбработатьНормативыРаспределенияПлановПродаж(); 
	ОбработатьПараметрыНачисленияНалогов();
	СформироватьДокументыВводаОстатковЗаказыМатериаловВПроизводство();
	//++ Устарело_Переработка24
	СформироватьДокументыВводаОстатковЗаказыПереработчику();
	СформироватьДокументыВводаОстатковПоступлениеОтПереработчика();
	СформироватьДокументыВводаОстатковПередачаПереработчику(ОрганизацииУСНФИФО);
	//-- Устарело_Переработка24
	СформироватьДокументыВводаОстатковЗаказыПереработчику2_5();
	СформироватьДокументыВводаОстатковМатериалыВПроизводстве();
	СформироватьОстаткиАлкогольнойПродукцииЕГАИС();
	СформироватьДокументыВводаОстатковНДСПредъявленный();
	СформироватьДокументыВводаОстатковРасходыПриУСН();
	СформироватьДокументыВводаОстатковВнеоборотныхАктивов();
	СформироватьДокументыВводаОстатковВзаиморасчетыЛизинг();
	СформироватьДокументыНаработкаТМЦВЭксплуатации();
	СформироватьДокументыПрослеживаемыеТоварыВСоставеОС();
	СформироватьБухОстатки();
	//-- НЕ УТ
	// После всех остальных действий, когда сформированы первичные документы.
	ОбработатьСостоянияБлокировкиВычетаНДС();
	
	// Сброс специального параметра сеанса.
    ОбновлениеИнформационнойБазыСлужебный.УстановкаПараметровСеанса("ПараметрыОбработчикаОбновления", Новый Массив);
    СообщениеСвертки(НСтр("ru = 'Формирование документов ввода остатков: завершено';
							|en = 'Generating documents of entering balance: completed'"));

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСозданияЛокальныхДокументовВводаОстатков

Процедура СформироватьДокументыВводаОстатковИзменениеАссортимента()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.ОбъектПланирования КАК ОбъектПланирования,
	|ТабРег.РольАссортимента КАК РольАссортимента,
	|ТабРег.ВидЦены КАК ВидЦены,
	|ВЫБОР КОГДА ТабРег.РазрешеныЗакупки И ТабРег.РазрешеныПродажи ТОГДА Значение(Перечисление.СтадииАссортимента.РазрешеныЗакупкиИПродажи)
	|	КОГДА ТабРег.РазрешеныЗакупки ТОГДА Значение(Перечисление.СтадииАссортимента.РазрешеныТолькоЗакупки)
	|	КОГДА ТабРег.РазрешеныПродажи ТОГДА Значение(Перечисление.СтадииАссортимента.РазрешеныТолькоПродажи)
	|	ИНАЧЕ Значение(Перечисление.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи)  
	|КОНЕЦ КАК Стадия
	|ИЗ РегистрСведений.Ассортимент.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО ОбъектПланирования, Стадия";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;

	ВыборкаОбъектПланирования = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектПланирования.Следующий() Цикл
		ВыборкаСтадия = ВыборкаОбъектПланирования.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтадия.Следующий() Цикл
			ДокОст = Документы.ИзменениеАссортимента.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаСтадия, Ложь);
			ДокОст.ДатаНачалаДействия = КонецДня(ДатаСверткиИБ);
			ДокОст.Операция = Перечисления.ОперацииИзмененияАссортимента.ИзменениеВАссортименте;

			ВыборкаДетали = ВыборкаСтадия.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				НоваяСтрока = ДокОст.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
				Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
					//Запишем документ ввода остатков и создадим новый
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					РеквизитыШапкиДокумента = Новый Структура("Дата, ДатаНачалаДействия, Операция, Стадия, ОбъектПланирования, Ответственный");
					ЗаполнитьЗначенияСвойств(РеквизитыШапкиДокумента, ДокОст);
					
					ДокОст = Документы.ИзменениеАссортимента.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(ДокОст, РеквизитыШапкиДокумента);
					ДокОст.Комментарий = Комментарий_СформированСверткойБазы + " ["+КоличествоСформированныхДокументов+"]";
				КонецЕсли;
			КонецЦикла;
			Если ДокОст.Товары.Количество() > 0 Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВывестиСообщениеСформированыДокументы("ИзменениеАссортимента");

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковКвотыАссортимента()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|ТабРег.ОбъектПланирования КАК ОбъектПланирования,
	|ТабРег.Марка КАК Марка,
	|ТабРег.Квота КАК Квота,
	|ТабРег.ПроцентОтклонения КАК ПроцентОтклонения,
	|&ДатаОст КАК ДатаНачалаДействия
	|ИЗ РегистрСведений.КвотыАссортимента.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО ОбъектПланирования";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаОбъектПланирования = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектПланирования.Следующий() Цикл
		ДокОст = Документы.УстановкаКвотАссортимента.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОбъектПланирования, Ложь);
		ДокОст.ДатаНачалаДействия = ДокОст.Дата;
		ВыборкаДетали = ВыборкаОбъектПланирования.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			НоваяСтрока = ДокОст.ТоварныеКатегории.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
			Если ДокОст.ТоварныеКатегории.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				//Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				
				ДокОст = Документы.УстановкаКвотАссортимента.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОбъектПланирования, Ложь);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.ТоварныеКатегории.Количество() > 0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("УстановкаКвотАссортимента");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЦеныНоменклатуры()
	Запрос = Новый Запрос;
	ДатаЦен25 = Константы.ДатаПереходаНаЦенообразование25.Получить();
	Цены25 = Ложь;
	Если ЗначениеЗаполнено(ДатаЦен25) И ДатаЦен25 < КонецДня(ДатаСверткиИБ) Тогда  
		Цены25 = Истина;
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Номенклатура КАК Номенклатура,
		|ТабРег.ВидЦены КАК ВидЦены,
		|ТабРег.ХарактеристикаЦО КАК ХарактеристикаЦО, 
		|ТабРег.СерияЦО КАК СерияЦО,
		|ТабРег.Цена КАК Цена, 
		|ТабРег.Валюта КАК Валюта,
		|ТабРег.УпаковкаЦО КАК УпаковкаЦО
		|ИЗ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.Цена <> 0
		|ИТОГИ ПО ВидЦены";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Номенклатура КАК Номенклатура,
		|ТабРег.ВидЦены КАК ВидЦены,
		|ТабРег.Характеристика КАК Характеристика, 
		|ТабРег.Цена КАК Цена, 
		|ТабРег.Валюта КАК Валюта,
		|ТабРег.Упаковка КАК Упаковка
		|ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.Цена <> 0
		|ИТОГИ ПО ВидЦены";
	КонецЕсли;
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаВидЦены = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидЦены.Следующий() Цикл
		ДокОст = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаВидЦены, Ложь);
		ДокОст.Согласован = Истина;
		ДокОст.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован; 
		Если Цены25 Тогда  
			ТЧТовары = ДокОст.Товары2_5;
		Иначе 
			ТЧТовары = ДокОст.Товары;
		КонецЕсли;
		
		СтрокаВидыЦен = ДокОст.ВидыЦен.Добавить();
		СтрокаВидыЦен.ВидЦены = ВыборкаВидЦены.ВидЦены;
		ВыборкаДетали = ВыборкаВидЦены.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			НоваяСтрока = ТЧТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
			Если ТЧТовары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				//Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				
				ДокОст = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаВидЦены, Ложь);
				ДокОст.Согласован = Истина;
				ДокОст.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		  		Если Цены25 Тогда  
					ТЧТовары = ДокОст.Товары2_5;
				Иначе 
					ТЧТовары = ДокОст.Товары;
				КонецЕсли;

				СтрокаВидыЦен = ДокОст.ВидыЦен.Добавить();
				СтрокаВидыЦен.ВидЦены = ВыборкаВидЦены.ВидЦены;
			КонецЕсли;
		КонецЦикла;
		Если ТЧТовары.Количество() > 0 Тогда
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("УстановкаЦенНоменклатуры");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЦеныНоменклатурыПоставщиков()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ТабРег.Характеристика КАК Характеристика,
	|	ТабРег.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	ТабРег.Партнер КАК Партнер,
	|	ТабРег.Цена КАК Цена,
	|	ТабРег.Упаковка КАК Упаковка,
	|	ТабУсловия.УпаковкаЗаказа КАК УпаковкаЗаказа,
	|	ТабУсловия.МинимальнаяПартияПоставки КАК МинимальнаяПартияПоставки
	|ИЗ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияЗакупок.СрезПоследних(&ГраницаОст) КАК ТабУсловия
	|ПО ТабРег.Номенклатура = ТабУсловия.Номенклатура
	|	И ТабРег.Характеристика = ТабУсловия.Характеристика
	|	И ТабРег.ВидЦеныПоставщика = ТабУсловия.ВидЦеныПоставщика
	|ИТОГИ ПО Партнер";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаПартнер = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПартнер.Следующий() Цикл
		ДокОст = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаПартнер, Ложь);
		ВыборкаДетали = ВыборкаПартнер.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			НоваяСтрока = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
			Если ЗначениеЗаполнено(ВыборкаДетали.УпаковкаЗаказа) Или ЗначениеЗаполнено(ВыборкаДетали.МинимальнаяПартияПоставки) Тогда
				НоваяСтрока.УстановкаУсловий = Истина;
			КонецЕсли;
			Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				//Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				
				ДокОст = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаПартнер, Ложь);

			КонецЕсли;
		КонецЦикла;
		Если ДокОст.Товары.Количество() > 0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЕсли;
		
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("РегистрацияЦенНоменклатурыПоставщика");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковДенежныеСредства(ВидДС)
	Запрос = Новый Запрос;
	ИмяДокумента = "ВводОстатковДенежныхСредств";
	Если ВидДС = "Безналичные" Тогда
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Организация КАК Организация,
		|ТабРег.БанковскийСчет КАК БанковскийСчет,
		|ТабРег.СуммаОстаток КАК Сумма,
		|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
		|ТабРег.СуммаРеглОстаток КАК СуммаРегл,
		|ТабРег.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
		|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах) КАК ХозяйственнаяОперация
		|ИЗ РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.СуммаОстаток > 0 
		|ИТОГИ ПО ХозяйственнаяОперация, Организация";
		ИмяТЧ = "БанковскиеСчета";
		ДопИнформация = НСтр("ru = 'денежные средства на банковских счетах';
							|en = 'cash on bank accounts'");
	ИначеЕсли ВидДС = "ВКассахККМ" Тогда
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Организация КАК Организация,
		|ТабРег.КассаККМ КАК КассаККМ,
		|ТабРег.СуммаОстаток КАК Сумма,
		|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
		|ТабРег.СуммаРеглОстаток КАК СуммаРегл,
		|ТабРег.КассаККМ.ВалютаДенежныхСредств КАК Валюта,
		|ВЫБОР КОГДА ТабРег.СуммаОстаток > 0 Тогда
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке)
		|ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах) КОНЕЦ КАК ХозяйственнаяОперация
		|ИЗ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.СуммаОстаток <> 0
		|ИТОГИ ПО ХозяйственнаяОперация, Организация";
		ИмяТЧ = "КассыККМ";
		ДопИнформация = НСтр("ru = 'денежные средства в кассах ККМ';
							|en = 'cash in cash registers'");
	ИначеЕсли ВидДС = "Наличные" Тогда
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Организация КАК Организация,
		|ТабРег.Касса КАК Касса,
		|ТабРег.СуммаОстаток КАК Сумма,
		|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
		|ТабРег.СуммаРеглОстаток КАК СуммаРегл,
		|ТабРег.Касса.ВалютаДенежныхСредств КАК Валюта,
		|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВКассах) КАК ХозяйственнаяОперация
		|ИЗ РегистрНакопления.ДенежныеСредстваНаличные.Остатки(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.СуммаОстаток > 0
		|ИТОГИ ПО ХозяйственнаяОперация, Организация";

		ИмяТЧ = "Кассы";
		ДопИнформация = НСтр("ru = 'денежные средства наличные';
							|en = 'cash-in-hand'");
	ИначеЕсли ВидДС = "УПодотчетныхЛиц" Тогда	
		Запрос.Текст = "ВЫБРАТЬ 
		|ТабРег.Организация КАК Организация,
		|ТабРег.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
		|ТабРег.ЦельВыдачи КАК СтатьяДвиженияДенежныхСредств,
		|ТабРег.СуммаОстаток КАК Сумма,
		|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
		|ТабРег.СуммаРеглОстаток КАК СуммаРегл,
		|ТабРег.Валюта КАК Валюта,
		|ВЫБОР КОГДА ТабРег.СуммаОстаток > 0 Тогда
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПодотчетников)
		|ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПерерасходовПодотчетныхСредств) КОНЕЦ КАК ХозяйственнаяОперация
		|ИЗ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ГраницаОст) КАК ТабРег
		|ГДЕ ТабРег.СуммаОстаток <> 0
		|ИТОГИ ПО ХозяйственнаяОперация, Организация";

		ИмяТЧ = "РасчетыСПодотчетниками";
		ДопИнформация = НСтр("ru = 'денежные средства у подотчетных лиц';
							|en = 'cash of advance holders'");
		ИмяДокумента = "ВводОстатковСПодотчетниками";

	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;

	КоличествоСформированныхДокументов = 1;
	ВыборкаТипОперации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипОперации.Следующий() Цикл
		ВыборкаОрганизация = ВыборкаТипОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизация.Следующий() Цикл
			ДокОст = Документы[ИмяДокумента].СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОрганизация);
			ВыборкаДетали = ВыборкаОрганизация.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				НоваяСтрока = ДокОст[ИмяТЧ].Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
				Если ВыборкаДетали.Сумма < 0 И (ВидДС = "ВКассахККМ" ИЛИ ВидДС = "УПодотчетныхЛиц") Тогда
					НоваяСтрока.Сумма = (-1)*ВыборкаДетали.Сумма;
					НоваяСтрока.СуммаРегл = (-1)*ВыборкаДетали.СуммаРегл;
				КонецЕсли;
				Если НоваяСтрока.СуммаРегл = 0 Тогда
					// Заполнение суммы регл из курсов валют.
					Если ВыборкаДетали.Валюта = ВалютаРегламентированногоУчета Тогда
						НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
					Иначе
						КоэффициентПересчета = КурсыВалют.Получить(ВыборкаДетали.Валюта);
						Если КоэффициентПересчета = Неопределено Тогда
							КоэффициентПересчета = 
								РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
															ВыборкаДетали.Валюта, 
															ВалютаРегламентированногоУчета, ДокОст.Дата);
							КурсыВалют.Вставить(ВыборкаДетали.Валюта, КоэффициентПересчета); 
						КонецЕсли;
						НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Сумма * КоэффициентПересчета, 2, 1);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЦикла;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы(ИмяДокумента, ДопИнформация);
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковРасчеты(ВидРасчетов)
	Запрос = Новый Запрос;
	Если ВидРасчетов = "РасчетыСКлиентами" Тогда
			Запрос.Текст = "ВЫБРАТЬ 
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма
			|ПОМЕСТИТЬ РасчетыСКлиентамиЗадолженность
			|ИЗ РегистрНакопления.РасчетыСКлиентами.Остатки(&ГраницаОст, ) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) > 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов,
			|ТабРег.Валюта
			|;
			|//////////////////////////
		    |ВЫБРАТЬ
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|Максимум(ТабРег.ДатаПлановогоПогашения) КАК Период,
			|Сумма(ТабРег.ДолгОстаток) КАК Долг
		    |ПОМЕСТИТЬ РасчетыСКлиентамиПоСрокам
		    |ИЗ РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ГраницаОст) КАК ТабРег 
		    |ГДЕ ТабРег.ДолгОстаток > 0 
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|(-1)*Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма
			|ПОМЕСТИТЬ РасчетыСКлиентамиАвансы
			|ИЗ РегистрНакопления.РасчетыСКлиентами.Остатки(&ГраницаОст, ) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) < 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|Свод.АналитикаУчетаПоПартнерам.Организация КАК Организация,
			|Свод.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
			|Свод.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|Свод.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
			|Свод.ОбъектРасчетов.Объект КАК ОбъектРасчетов,
			|Свод.ОбъектРасчетов КАК ОбъектРасчетовОтправитель,
			|Свод.ОбъектРасчетов.НомерВходящегоДокумента КАК НомерРасчетногоДокумента,
			|Свод.ОбъектРасчетов.ДатаВходящегоДокумента КАК ДатаРасчетногоДокумента,
			|Свод.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|Свод.Сумма КАК Сумма,
			|Свод.ДатаПлатежа КАК ДатаПлатежа,
			|Свод.ТипОперации КАК ХозяйственнаяОперация
			|ИЗ (
			|	ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ТабРег.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ТабРег.Сумма КАК Сумма,
			|	ТабРегОбороты.Период КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов) КАК ТипОперации
			|	ИЗ РасчетыСКлиентамиЗадолженность КАК ТабРег
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			| 		РасчетыСКлиентамиПоСрокам КАК ТабРегОбороты
			|	ПО 	ТабРег.АналитикаУчетаПоПартнерам = ТабРегОбороты.АналитикаУчетаПоПартнерам  И
			| 		ТабРег.ОбъектРасчетов = ТабРегОбороты.ОбъектРасчетов  И
			| 		ТабРег.ВалютаВзаиморасчетов = ТабРегОбороты.ВалютаВзаиморасчетов 
			|ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам,
			|	ТабРег.ОбъектРасчетов,
			|	ТабРег.ВалютаВзаиморасчетов,
			|	ТабРег.Сумма,
			|	null КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов) КАК ТипОперации
			|	ИЗ РасчетыСКлиентамиАвансы КАК ТабРег
			|	) КАК Свод
			|УПОРЯДОЧИТЬ ПО
			|Свод.ТипОперации, 
			|Свод.АналитикаУчетаПоПартнерам, Свод.ОбъектРасчетов, Свод.ДатаПлатежа УБЫВ
			|";
		ИначеЕсли ВидРасчетов = "РасчетыСПоставщиками" Тогда
			Запрос.Текст = "ВЫБРАТЬ 
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|(-1) * Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма,
			|Сумма(ЕстьNULL(ТабПроценты.СуммаДисконтированияОстаток,0)) КАК СуммаПроцентов
			|ПОМЕСТИТЬ РасчетыСПоставщикамиЗадолженность
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ГраницаОст,) КАК ТабРег
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПроцентныеРасходыДисконтирования.Остатки(&ГраницаОст) КАК ТабПроценты
			|	ПО ТабРег.АналитикаУчетаПоПартнерам = ТабПроценты.АналитикаУчетаПоПартнерам
			|		И ТабРег.ОбъектРасчетов = ТабПроценты.ОбъектРасчетов
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) < 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов,
			|ТабРег.Валюта  
			|;
			|//////////////////////////  
		    |ВЫБРАТЬ
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|Максимум(ТабРег.ДатаПлановогоПогашения) КАК Период,
			|Сумма(ТабРег.ДолгОстаток) КАК Долг
		    |ПОМЕСТИТЬ РасчетыСПоставщикамиПоСрокам
		    |ИЗ РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&ГраницаОст) КАК ТабРег 
		    |ГДЕ ТабРег.ДолгОстаток > 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|ТабРег.Валюта КАК ВалютаВзаиморасчетов,
			|Сумма(ЕстьNULL(ТабРег.СуммаОстаток,0)) КАК Сумма,
			|0  КАК СуммаПроцентов
			|ПОМЕСТИТЬ РасчетыСПоставщикамиАвансы
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ГраницаОст,) КАК ТабРег
			|ГДЕ ЕстьNULL(ТабРег.СуммаОстаток,0) > 0
			|СГРУППИРОВАТЬ ПО
			|ТабРег.АналитикаУчетаПоПартнерам,
			|ТабРег.ОбъектРасчетов,
			|ТабРег.Валюта
			|;
			|//////////////////////////
			|ВЫБРАТЬ
			|Свод.АналитикаУчетаПоПартнерам.Организация КАК Организация,
			|Свод.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
			|Свод.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|Свод.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
			|Свод.ОбъектРасчетов.Объект КАК ОбъектРасчетов,
			|Свод.ОбъектРасчетов КАК ОбъектРасчетовОтправитель,
			|Свод.ОбъектРасчетов.НомерВходящегоДокумента КАК НомерРасчетногоДокумента,
			|Свод.ОбъектРасчетов.ДатаВходящегоДокумента КАК ДатаРасчетногоДокумента, 
			|Свод.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|Свод.Сумма КАК Сумма,
			|Свод.СуммаПроцентов КАК СуммаПроцентов,
			|Свод.ДатаПлатежа КАК ДатаПлатежа,
			|Свод.ТипОперации КАК ХозяйственнаяОперация
			|ИЗ
			|(ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ТабРег.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ТабРег.Сумма КАК Сумма,
			|	ТабРег.СуммаПроцентов КАК СуммаПроцентов,
			|	ТабРегОбороты.Период КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам) КАК ТипОперации
			|	ИЗ РасчетыСПоставщикамиЗадолженность КАК ТабРег
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			| 		РасчетыСПоставщикамиПоСрокам КАК ТабРегОбороты
			|		ПО 	ТабРег.АналитикаУчетаПоПартнерам = ТабРегОбороты.АналитикаУчетаПоПартнерам  И
			| 		ТабРег.ОбъектРасчетов = ТабРегОбороты.ОбъектРасчетов  И
			| 		ТабРег.ВалютаВзаиморасчетов = ТабРегОбороты.ВалютаВзаиморасчетов
			|	ОБЪЕДИНИТЬ ВСЕ
			//АВАНСЫ
			|	ВЫБРАТЬ
			|	ТабРег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	ТабРег.ОбъектРасчетов КАК ОбъектРасчетов,
			|	ТабРег.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ТабРег.Сумма КАК Сумма, 
			|	0 КАК СуммаПроцентов,
			|	null КАК ДатаПлатежа,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам) КАК ТипОперации
			|	ИЗ РасчетыСПоставщикамиАвансы КАК ТабРег
			|) КАК Свод
			|УПОРЯДОЧИТЬ ПО
			|Свод.ТипОперации, 
			|Свод.АналитикаУчетаПоПартнерам.Организация, Свод.АналитикаУчетаПоПартнерам.Партнер, Свод.ОбъектРасчетов, Свод.ДатаПлатежа УБЫВ
			|";
		КонецЕсли;
		ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() ТОгда
			Возврат;
		КонецЕсли;
		//Курсы валют на дату свертки
		КурсыВалют = Новый Соответствие;
		КоличествоСформированныхДокументов = 1;
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ХозяйственнаяОперация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл 

				ДокОст = Документы.ВводОстатковВзаиморасчетов.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
				Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
					ТекущийПартнер = Выборка.Партнер;
					Если ЗначениеЗаполнено(Выборка.Контрагент) И НЕ ЗначениеЗаполнено(ТекущийПартнер) Тогда
						ТекущийПартнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Контрагент, "Партнер");
					КонецЕсли; 

					Пока Выборка.СледующийПоЗначениюПоля("ОбъектРасчетов") Цикл
						НоваяСтрока = ДокОст.РасчетыСПартнерами.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						НоваяСтрока.Партнер = ТекущийПартнер;
						Если Выборка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
							НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
						Иначе
							КоэффициентПересчета = КурсыВалют.Получить(Выборка.ВалютаВзаиморасчетов);
							Если КоэффициентПересчета = Неопределено Тогда
								КоэффициентПересчета = 
									РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
																Выборка.ВалютаВзаиморасчетов, 
																ВалютаРегламентированногоУчета, ДокОст.Дата);
								КурсыВалют.Вставить(Выборка.ВалютаВзаиморасчетов, КоэффициентПересчета); 
							КонецЕсли;
							
							НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Сумма * КоэффициентПересчета, 2, 1);
						КонецЕсли;
						Если Выборка.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
							НоваяСтрока.СуммаУпр = НоваяСтрока.Сумма;
						Иначе
							КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.ВалютаВзаиморасчетов, ВалютаУправленческогоУчета, ДокОст.Дата);
							НоваяСтрока.СуммаУпр = Окр(НоваяСтрока.Сумма * КоэффициентПересчета, 2, 1);
						КонецЕсли;
						// Номер расчетного документа.
						Если СтрДлина(НоваяСтрока.НомерРасчетногоДокумента) > 11 Тогда
							НоваяСтрока.НомерРасчетногоДокумента = Лев(НоваяСтрока.НомерРасчетногоДокумента, 11);
						КонецЕсли; 
						Если ЗначениеЗаполнено(Выборка.ОбъектРасчетов) Тогда
							// Документ расчетов.
							НоваяСтрока.ДокументРасчетов = СоздатьПервичныйДокументДляСтрокиРасчетов(ДокОст, Выборка.ОбъектРасчетов, НоваяСтрока);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(НоваяСтрока.ОбъектРасчетов) Тогда
							РеквизитыОбъекта = Новый Структура("Объект, Контрагент, Организация", НоваяСтрока.ОбъектРасчетов, Выборка.Контрагент, Выборка.Организация);
							РеквизитыОбъекта.Вставить("Партнер", ТекущийПартнер);
							РеквизитыОбъекта.Вставить("ТипРасчетов", Неопределено);
							РеквизитыОбъекта.Вставить("ПометкаУдаления", Ложь);
							РеквизитыОбъекта.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
							РеквизитыОбъекта.Вставить("ТипСсылки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Выборка.ОбъектРасчетов)));

							Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов
								Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов Тогда
								РеквизитыОбъекта.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
							ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам
								Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам Тогда
								РеквизитыОбъекта.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
							КонецЕсли;
							Если ТипЗнч(Выборка.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
								Или ТипЗнч(Выборка.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
								РеквизитыОбъекта.Вставить("Договор", Выборка.ОбъектРасчетов);
							Иначе
								РеквизитыОбъекта.Вставить("Договор", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ДокументРасчетов, "Договор"));
							КонецЕсли;
							НоваяСтрока.ОбъектРасчетовОтправитель = ОбъектыРасчетовСервер.ПроверитьСоздатьОбъектРасчетов(РеквизитыОбъекта);
							ЗаполнитьПДВДокументахОплаты(Выборка.ОбъектРасчетов, НоваяСтрока.ОбъектРасчетовОтправитель);
							
						КонецЕсли;

						//Выборка по дате платежа, Датой платежа устанавливается самая поздняя из платежей
						Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаПлатежа) Тогда
							НоваяСтрока.ДатаПлатежа = Выборка.ДатаПлатежа;
						Иначе
							НоваяСтрока.ДатаПлатежа = ДокОст.Дата;
						КонецЕсли;
						Если ДокОст.РасчетыСПартнерами.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							ДокОст = Документы.ВводОстатковВзаиморасчетов.СоздатьДокумент();
							КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
							ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
						КонецЕсли;
					КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("ОбъектРасчетов") Цикл
				КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
				Если ДокОст.РасчетыСПартнерами.Количество() > 0 Тогда
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				КонецЕсли;
			КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			ВывестиСообщениеСформированыДокументы("ВводОстатковВзаиморасчетов", Выборка.ХозяйственнаяОперация);
		КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("ХозяйственнаяОперация") Цикл
КонецПроцедуры 
	
Процедура СформироватьСчетаФактурыНаАванс()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТабРег.Организация КАК Организация,
	|ТабРег.ДокументОплаты КАК ДокументОплаты, 
	|ТабРег.ДокументОплаты.Дата КАК ДокументОплатыДата,
    |ТабРег.ДокументОплаты.Номер КАК ДокументОплатыНомер,

	|ТабРег.Контрагент КАК Контрагент,  
	|ТабРег.СтавкаНДС КАК СтавкаНДС, 
	|(-1)*ТабРег.СуммаБезНДСОстаток КАК Сумма,
	|(-1)*ТабРег.НДСОстаток КАК НДС,  
	|(-1)*ТабРег.НДСУпрОстаток КАК НДСУпр
    |ИЗ РегистрНакопления.НДСАвансыВыданные.Остатки(&ДатаОст) КАК ТабРег 
    |ГДЕ ТабРег.НДСОстаток < 0
	|";       
	Запрос.УстановитьПараметр("ДатаОст", КонецДня(ДатаСверткиИБ));
	Выборка = Запрос.Выполнить().Выбрать();
	НомерСФПоПорядку = 1;
	Пока Выборка.Следующий() Цикл
		СФАванс = Документы.СчетФактураПолученныйАванс.СоздатьДокумент();
		СФАванс.ДатаСоставления = ДатаСверткиИБ;
		СФАванс.Номер = СокрЛП(НомерСФПоПорядку);
		НомерСФПоПорядку = НомерСФПоПорядку + 1;
		ДокОснование = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументОплаты, Выборка.ДокументОплатыДата,Выборка.ДокументОплатыНомер, Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику, Выборка.Сумма);
		ЗаполнитьСФАванс(СФАванс, Выборка, ДокОснование); 
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТабРег.Организация КАК Организация,
	|ТабРег.ДокументОплаты КАК ДокументОплаты, 
	|ТабРег.ДокументОплаты.Дата КАК ДокументОплатыДата,
    |ТабРег.ДокументОплаты.Номер КАК ДокументОплатыНомер,

	|ТабРег.Контрагент КАК Контрагент,  
	|ТабРег.СтавкаНДС КАК СтавкаНДС, 
	|ТабРег.СуммаБезНДСОстаток КАК Сумма,
	|ТабРег.НДСОстаток КАК НДС,  
	|ТабРег.НДСУпрОстаток КАК НДСУпр
    |ИЗ РегистрНакопления.НДСАвансыПолученные.Остатки(&ДатаОст) КАК ТабРег 
    |ГДЕ ТабРег.НДСОстаток > 0
	|";       
	Запрос.УстановитьПараметр("ДатаОст", КонецДня(ДатаСверткиИБ));
	Выборка = Запрос.Выполнить().Выбрать();
	НомерСФПоПорядку = 1;
	Пока Выборка.Следующий() Цикл 
		СФАванс = Документы.СчетФактураВыданныйАванс.СоздатьДокумент();
		СФАванс.ДатаПлатежноРасчетногоДокумента = Выборка.ДокументОплатыДата;
		СФАванс.НомерПлатежноРасчетногоДокумента = Выборка.ДокументОплатыНомер;
		СФАванс.ДатаВыставления = КонецДня(ДатаСверткиИБ);
		СФАванс.ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца;

		ДокОснование = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументОплаты, Выборка.ДокументОплатыДата,Выборка.ДокументОплатыНомер, Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику, Выборка.Сумма);
		ЗаполнитьСФАванс(СФАванс, Выборка, ДокОснование, Истина); 
	КонецЦикла;	
КонецПроцедуры 

Процедура ЗаполнитьСФАванс(СФАванс, Выборка, ДокОснование, ЭтоСФВыданный = Ложь) 
	СтрокаСФ = СФАванс.Авансы.Добавить();
	СтрокаСФ.СтавкаНДС = Выборка.СтавкаНДС;
	СтрокаСФ.Сумма = Выборка.Сумма;
	СтрокаСФ.СуммаНДС = Выборка.НДС;  
	Если ЭтоСФВыданный Тогда
		СтрокаСФ.ТипЗапасов = Перечисления.ТипыЗапасов.Товар;
	КонецЕсли;
	СФАванс.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	СФАванс.КодВидаОперации = "02";
	СФАванс.Сумма = Выборка.Сумма;
	СФАванс.СуммаНДС = Выборка.НДС;
	СФАванс.Дата = ДатаСверткиИБ;
	СФАванс.ДокументОснование = ДокОснование;
	СФАванс.Организация = Выборка.Организация;
	СФАванс.Комментарий = Комментарий_СформированСверткойБазы;
	СФАванс.Контрагент = Выборка.Контрагент;
	СФАванс.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковРасчетыПоЭквайрингу()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТабРегРасчеты.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|ТабРегРасчеты.Организация КАК Организация,
	|ТабРегРасчеты.Валюта КАК Валюта,
	|ТабРегРасчеты.Договор КАК ДоговорЭквайринга,
	|ТабРегРасчеты.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|ТабРегРасчеты.ЭквайринговыйТерминал.Владелец КАК ЭквайринговыйТерминалДоговор,
	|ТабРегРасчеты.ДатаПлатежа КАК ДатаПлатежа,
	|ТабРегРасчеты.СуммаОстаток КАК Сумма,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера) КАК ХозяйственнаяОперация
	|ИЗ РегистрНакопления.РасчетыПоЭквайрингу.Остатки(&ГраницаОст) КАК ТабРегРасчеты
	|ГДЕ ТабРегРасчеты.СуммаОстаток > 0  
	|УПОРЯДОЧИТЬ ПО
	|	ТабРегРасчеты.Организация";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;

	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		ДокОст = Документы.ВводОстатковРасчетовПоЭквайрингу.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);

		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДокОст.РасчетыПоЭквайрингу.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если НЕ ЗначениеЗаполнено(Выборка.ДоговорЭквайринга) Тогда
				НоваяСтрока.ДоговорЭквайринга = Выборка.ЭквайринговыйТерминалДоговор;
			КонецЕсли;
			// Пересчет сумм.
			Если Выборка.Валюта = ВалютаРегламентированногоУчета Тогда
				НоваяСтрока.СуммаРегл = Выборка.Сумма;
			Иначе
				КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.Валюта, ВалютаРегламентированногоУчета, ДокОст.Дата);
				НоваяСтрока.СуммаРегл = Окр(Выборка.Сумма * КоэффициентПересчета, 2, 1); 
			КонецЕсли;
			Если Выборка.Валюта = ВалютаУправленческогоУчета Тогда
				НоваяСтрока.СуммаУпр = Выборка.Сумма;
			ИначеЕсли  ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
				НоваяСтрока.СуммаУпр = НоваяСтрока.СуммаРегл;
			Иначе
				КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.Валюта, ВалютаУправленческогоУчета, ДокОст.Дата);
				НоваяСтрока.СуммаУпр = Окр(Выборка.Сумма * КоэффициентПересчета, 2, 1); 
			КонецЕсли;
			Если ДокОст.РасчетыПоЭквайрингу.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				ДокОст = Документы.ВводОстатковРасчетовПоЭквайрингу.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.РасчетыПоЭквайрингу.Количество()>0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ВводОстатковРасчетовПоЭквайрингу", Перечисления.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера);
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковРасчетыПоКредитамИДепозитам()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|ТабРег.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|ТабРег.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|ТабРег.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|ТабРег.ТипСуммы КАК ТипСуммы,
	|ТабРег.Договор КАК Договор,
	// Суммы по договорам кредитов и займов полученных делают движения наоборот (> 0 в расход, < 0 в приход)
	|ВЫБОР КОГДА ВЫРАЗИТЬ(ТабРег.Договор КАК Справочник.ДоговорыКредитовИДепозитов).ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм) ТОГДА
	| -1
	|ИНАЧЕ 1 КОНЕЦ КАК Множитель,

	|ТабРег.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|Сумма(ТабРег.СуммаОстаток) КАК Сумма,
	|Сумма(ТабРег.СуммаРеглОстаток) КАК СуммаРегл,
	|Сумма(ТабРег.СуммаУпрОстаток) КАК СуммаУпр,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПоДоговорамКредитовИДепозитов) КАК ХозяйственнаяОперация
	|ИЗ РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(&ГраницаОст, Договор ССЫЛКА Справочник.ДоговорыКредитовИДепозитов) КАК ТабРег
	|СГРУППИРОВАТЬ ПО
	|ТабРег.АналитикаУчетаПоПартнерам.Организация,
	|ТабРег.АналитикаУчетаПоПартнерам.Партнер,
	|ТабРег.АналитикаУчетаПоПартнерам.Контрагент,
	|ТабРег.ТипСуммы,
	|ТабРег.Договор
	|ИМЕЮЩИЕ Сумма(ТабРег.СуммаОстаток) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Организация, Контрагент, Договор";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		ДокОст = Документы.ВводОстатковПоФинансовымИнструментам.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);

		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДокОст.РасчетыПоФинансовымИнструментам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если Выборка.Множитель < 0 Тогда
				НоваяСтрока.Сумма = (-1) * Выборка.Сумма;
				НоваяСтрока.СуммаРегл = (-1) * Выборка.СуммаРегл;
				НоваяСтрока.СуммаУпр = (-1) * Выборка.СуммаУпр;
			КонецЕсли;

			Если ДокОст.РасчетыПоФинансовымИнструментам.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				ДокОст = Документы.ВводОстатковПоФинансовымИнструментам.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.РасчетыПоФинансовымИнструментам.Количество()>0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ВводОстатковПоФинансовымИнструментам", Перечисления.ХозяйственныеОперации.ВводОстатковПоДоговорамКредитовИДепозитов);

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковТоварыСобственные(ОрганизацииУСНФИФО)
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	//Заполнение ключевых временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ДатаПереходаНаПартии22 = Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить();
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22()
		И ДатаПереходаНаПартии22 < КонецДня(ДатаСверткиИБ) Тогда
		Запрос.УстановитьПараметр("ОрганизацииУСНФИФО", ОрганизацииУСНФИФО);
		Запрос.Текст = "ВЫБРАТЬ 
		|ПартииПоСебестоимости.Организация,
		|ПартииПоСебестоимости.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|ПартииПоСебестоимости.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|ПартииПоСебестоимости.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
		|ВЫБОР КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|		ИЛИ СчетФактураПолученный.Ссылка = ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка) ТОГДА ЛОЖЬ 
		|		ИНАЧЕ ИСТИНА КОНЕЦ Как ПредъявленСчетФактура,
		|ВЫБОР КОГДА  ПартииПоСебестоимости.Организация В (&ОрганизацииУСНФИФО) ТОГДА
		|	ПартииПоСебестоимости.Партия
		|ИНАЧЕ NULL КОНЕЦ КАК ДокументПартии,
		|СчетФактураПолученный.Ссылка.Дата КАК ДатаСчетаФактуры,
		|СчетФактураПолученный.Ссылка.Номер КАК НомерСчетаФактуры,
		|СчетФактураПолученный.Ссылка КАК СчетФактура,
		|ПартииПоСебестоимости.ВидЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|ПартииПоСебестоимости.АналитикаУчетаПартий.Поставщик КАК Партнер,
		|ПартииПоСебестоимости.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеНДС,
		|ПартииПоСебестоимости.АналитикаУчетаПартий.СтавкаНДС КАК СтавкаНДС,
		|Сумма(ПартииПоСебестоимости.СтоимостьОстаток + ПартииПоСебестоимости.ДопРасходыОстаток
		//++ НЕ УТ
		|	+ ПартииПоСебестоимости.ТрудозатратыОстаток + ПартииПоСебестоимости.ПостатейныеПостоянныеСНДСОстаток
		|	+ ПартииПоСебестоимости.ПостатейныеПеременныеСНДСОстаток
		//-- НЕ УТ
		|		) КАК Сумма,
		|Сумма(ПартииПоСебестоимости.СтоимостьБезНДСОстаток + ПартииПоСебестоимости.ДопРасходыБезНДСОстаток
		//++ НЕ УТ
		|	+ ПартииПоСебестоимости.ТрудозатратыОстаток + ПартииПоСебестоимости.ПостатейныеПостоянныеБезНДСОстаток
		|	+ ПартииПоСебестоимости.ПостатейныеПеременныеБезНДСОстаток
		//-- НЕ УТ
		|		) КАК СуммаБезНДС,
		|Сумма(ПартииПоСебестоимости.СтоимостьОстаток + ПартииПоСебестоимости.ДопРасходыОстаток
		|	- ПартииПоСебестоимости.СтоимостьБезНДСОстаток - ПартииПоСебестоимости.ДопРасходыБезНДСОстаток
		//++ НЕ УТ
		|	+ ПартииПоСебестоимости.ПостатейныеПостоянныеСНДСОстаток + ПартииПоСебестоимости.ПостатейныеПеременныеСНДСОстаток
		|	- ПартииПоСебестоимости.ПостатейныеПостоянныеБезНДСОстаток - ПартииПоСебестоимости.ПостатейныеПеременныеБезНДСОстаток
		//-- НЕ УТ
		|	) КАК СуммаНДС,
		|0 КАК НДСРегл,
		|Сумма(ПартииПоСебестоимости.СтоимостьРеглОстаток + ПартииПоСебестоимости.ДопРасходыРеглОстаток
		//++ НЕ УТ
		|	+ ПартииПоСебестоимости.ТрудозатратыРеглОстаток + ПартииПоСебестоимости.ПостатейныеПостоянныеРеглОстаток
		|	+ ПартииПоСебестоимости.ПостатейныеПеременныеРеглОстаток
		//-- НЕ УТ
		|		) КАК СуммаРегл,
		|Сумма(ПартииПоСебестоимости.КоличествоОстаток) КАК Количество
		|
		|ПОМЕСТИТЬ ТаблицаОстатковПоПартиям
		
		|ИЗ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, (РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
		//++ НЕ УТ
		|																ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
		//-- НЕ УТ
		|																)
		|					И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)) КАК ПартииПоСебестоимости
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
		|ПО СчетФактураПолученный.ДокументОснование = ПартииПоСебестоимости.Партия
		|		И СчетФактураПолученный.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО ПартииПоСебестоимости.Организация, 
		|	ПартииПоСебестоимости.АналитикаУчетаНоменклатуры, 
		|	ПартииПоСебестоимости.ВидЗапасов.ГруппаФинансовогоУчета,
		|	СчетФактураПолученный.Ссылка, ПартииПоСебестоимости.АналитикаУчетаПартий.НалогообложениеНДС, 
		|	ПартииПоСебестоимости.АналитикаУчетаПартий.СтавкаНДС,
		|	ВЫБОР КОГДА  ПартииПоСебестоимости.Организация В (&ОрганизацииУСНФИФО) ТОГДА
		|		ПартииПоСебестоимости.Партия
		|	ИНАЧЕ NULL КОНЕЦ,
		|	ПартииПоСебестоимости.АналитикаУчетаПартий.Поставщик
		|";
	Иначе	
		Запрос.Текст = "ВЫБРАТЬ 
		|ПартииТоваровОрганизаций.Организация,
		|ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
		|ВЫБОР КОГДА СчетФактураПолученный.Ссылка ЕСТЬ NULL 
		|		ИЛИ СчетФактураПолученный.Ссылка = ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка) ТОГДА ЛОЖЬ 
		|		ИНАЧЕ ИСТИНА КОНЕЦ Как ПредъявленСчетФактура,
		|NULL КАК ДокументПартии,
		|СчетФактураПолученный.Ссылка.Дата КАК ДатаСчетаФактуры,
		|СчетФактураПолученный.Ссылка.Номер КАК НомерСчетаФактуры,
		|СчетФактураПолученный.Ссылка КАК СчетФактура,
		|ПартииТоваровОрганизаций.ВидЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|ПартииТоваровОрганизаций.АналитикаУчетаПартий.Поставщик КАК Партнер,
		|ПартииТоваровОрганизаций.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеНДС,
		|ПартииТоваровОрганизаций.АналитикаУчетаПартий.СтавкаНДС КАК СтавкаНДС,
		|Сумма(ПартииТоваровОрганизаций.СтоимостьОстаток + ЕстьNULL(ПартииРасходов.СтоимостьОстаток, 0)+ ЕстьNULL(ПартииЗатрат.СтоимостьОстаток, 0)) КАК Сумма,
		|Сумма(ПартииТоваровОрганизаций.СтоимостьБезНДСОстаток + ЕстьNULL(ПартииРасходов.СтоимостьБезНДСОстаток, 0)+ ЕстьNULL(ПартииЗатрат.СтоимостьБезНДСОстаток, 0))  КАК СуммаБезНДС,
		|Сумма(ПартииТоваровОрганизаций.СтоимостьОстаток + ЕстьNULL(ПартииРасходов.СтоимостьОстаток, 0) + ЕстьNULL(ПартииЗатрат.СтоимостьОстаток, 0)) -
		|Сумма(ПартииТоваровОрганизаций.СтоимостьБезНДСОстаток + ЕстьNULL(ПартииРасходов.СтоимостьБезНДСОстаток, 0) + ЕстьNULL(ПартииЗатрат.СтоимостьБезНДСОстаток, 0)) КАК СуммаНДС,
		|Сумма(ПартииТоваровОрганизаций.НДСРеглОстаток + ЕстьNULL(ПартииРасходов.НДСРеглОстаток, 0)+ ЕстьNULL(ПартииЗатрат.НДСРеглОстаток, 0)) КАК НДСРегл,
		|Сумма(ПартииТоваровОрганизаций.СтоимостьРеглОстаток + ЕстьNULL(ПартииРасходов.СтоимостьРеглОстаток, 0)+ ЕстьNULL(ПартииЗатрат.СтоимостьРеглОстаток, 0)) КАК СуммаРегл,
		|Сумма(ПартииТоваровОрганизаций.КоличествоОстаток) КАК Количество
		|
		|ПОМЕСТИТЬ ТаблицаОстатковПоПартиям
		
		|ИЗ РегистрНакопления.ПартииТоваровОрганизаций.Остатки(&ГраницаОст, (ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|							И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад))) КАК ПартииТоваровОрганизаций
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
		|ПО СчетФактураПолученный.ДокументОснование = ПартииТоваровОрганизаций.ДокументПоступления
		|		И СчетФактураПолученный.Ссылка.Проведен
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров.Остатки(&ГраницаОст) КАК ПартииРасходов
		|ПО ПартииРасходов.Организация = ПартииТоваровОрганизаций.Организация И
		|		ПартииРасходов.АналитикаУчетаНоменклатуры = ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры И
		|		ПартииРасходов.ВидЗапасов = ПартииТоваровОрганизаций.ВидЗапасов  И
		|		ПартииРАсходов.ДокументПоступления = ПартииТоваровОрганизаций.ДокументПоступления
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииЗатратНаВыпуск.Остатки(&ГраницаОст) КАК ПартииЗатрат
		|ПО ПартииЗатрат.Организация = ПартииТоваровОрганизаций.Организация И
		|		ПартииЗатрат.АналитикаУчетаПродукции = ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры И
		|		ПартииЗатрат.ДокументПоступления = ПартииТоваровОрганизаций.ДокументПоступления
		|СГРУППИРОВАТЬ ПО ПартииТоваровОрганизаций.Организация, 
		|	ПартииТоваровОрганизаций.АналитикаУчетаНоменклатуры, 
		|	ПартииТоваровОрганизаций.ВидЗапасов.ГруппаФинансовогоУчета,
		|	СчетФактураПолученный.Ссылка, ПартииТоваровОрганизаций.АналитикаУчетаПартий.НалогообложениеНДС, 
		|	ПартииТоваровОрганизаций.АналитикаУчетаПартий.СтавкаНДС, 
		|	ПартииТоваровОрганизаций.АналитикаУчетаПартий.Поставщик
		|";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + ";
	|////////////////////////
	|ВЫБРАТЬ
	|ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ТабРег.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|ТабРег.Организация КАК Организация,
	|ТабРег.ВидЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|ТабРег.НомерГТД КАК НомерГТД,
	|Сумма(ТабРег.КоличествоОстаток) КАК Количество, 
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьОстаток, 0) + ЕстьNULL(ТабРегСебестоимость.ДопРасходыОстаток, 0)
	//++ НЕ УТ
	|	+ ЕстьNULL(ТабРегСебестоимость.ТрудозатратыОстаток, 0) + ЕстьNULL(ТабРегСебестоимость.ПостатейныеПостоянныеСНДСОстаток, 0)
	|	+ ЕстьNULL(ТабРегСебестоимость.ПостатейныеПеременныеСНДСОстаток, 0)
	//-- НЕ УТ
	|		) КАК Сумма,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьБезНДСОстаток, 0) + ЕстьNULL(ТабРегСебестоимость.ДопРасходыБезНДСОстаток, 0)
	//++ НЕ УТ
	|	+ ЕстьNULL(ТабРегСебестоимость.ТрудозатратыОстаток, 0) + ЕстьNULL(ТабРегСебестоимость.ПостатейныеПостоянныеБезНДСОстаток, 0)
	|	+ ЕстьNULL(ТабРегСебестоимость.ПостатейныеПеременныеБезНДСОстаток, 0)
	//-- НЕ УТ
	|		) КАК СуммаБезНДС,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьРеглОстаток, 0) + ЕстьNULL(ТабРегСебестоимость.ДопРасходыРеглОстаток, 0)
	//++ НЕ УТ
	|	+ ЕстьNULL(ТабРегСебестоимость.ТрудозатратыРеглОстаток, 0) + ЕстьNULL(ТабРегСебестоимость.ПостатейныеПостоянныеРеглОстаток, 0)
	|	+ ЕстьNULL(ТабРегСебестоимость.ПостатейныеПеременныеРеглОстаток, 0)
	//-- НЕ УТ
	|		) КАК СуммаРегл,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.КоличествоОстаток, 0)) КАК Сумма_Количество,
	|Сумма(ЕстьNULL(ПринятаяТара.КоличествоОстаток, 0)) КАК КоличествоТара
	|
	|ПОМЕСТИТЬ ТаблицаОстатковТовары
	|
	|ИЗ РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст,  
	|								ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|								И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|												) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, 
	|				РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	//++ НЕ УТ
	|				ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	//-- НЕ УТ
	|				) КАК ТабРегСебестоимость
	|ПО 
	|	ТабРег.Организация = ТабРегСебестоимость.Организация  И
	|	(ТабРег.ВидЗапасов = ТабРегСебестоимость.ВидЗапасов)  И
	|	ТабРег.АналитикаУчетаНоменклатуры = ТабРегСебестоимость.АналитикаУчетаНоменклатуры И
	|	ТабРегСебестоимость.СтоимостьОстаток > 0 И ТабРегСебестоимость.КоличествоОстаток > 0
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПринятаяВозвратнаяТара.Остатки(&ГраницаОст) КАК ПринятаяТара
	|	ПО ПринятаяТара.Номенклатура = ТабРег.АналитикаУчетаНоменклатуры.Номенклатура 
	|	И ПринятаяТара.Характеристика = ТабРег.АналитикаУчетаНоменклатуры.Характеристика
	|ГДЕ ТабРег.КоличествоОстаток > 0 И ЕстьNULL(ПринятаяТара.КоличествоОстаток, 0) = 0
	|СГРУППИРОВАТЬ ПО ТабРег.Организация, 
	|	ТабРег.АналитикаУчетаНоменклатуры, 
	|	ТабРег.ВидЗапасов.ГруппаФинансовогоУчета,
	|	ТабРег.НомерГТД
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Склад КАК Склад,
	|ТабРег.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|ТабРег.Организация КАК Организация,
	|ТабРег.НомерГТД КАК НомерГТД,
	|Сумма(ТабРег.Количество) КАК Количество,
	|Сумма(ТабРег.Сумма) КАК Сумма,
	|Сумма(ТабРег.СуммаБезНДС) КАК СуммаБезНДС,
	|Сумма(ТабРег.СуммаРегл) КАК СуммаРегл,
	|Сумма(ТабРег.Сумма_Количество) КАК Сумма_Количество,
	|Сумма(ТабРег.КоличествоТара) КАК КоличествоТара
	|
	|ПОМЕСТИТЬ ТаблицаОстатковТоварыСвод
	|
	|ИЗ ТаблицаОстатковТовары КАК ТабРег 
	|СГРУППИРОВАТЬ ПО 
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Склад,
	|	ТабРег.ГруппаФинансовогоУчета,
	|	ТабРег.Организация,
	|	ТабРег.НомерГТД
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Запрос.Выполнить();
	//1. Остатки в разрезе счетов-фактур - на основе регистра партий
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Запрос.Текст = "ВЫБРАТЬ
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Склад КАК Склад,
	|ТабРег.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|ТабРег.Организация КАК Организация,
	|Сумма(ТабРег.Количество) КАК Количество,
	|Сумма(ТабРег.Сумма) КАК Сумма,
	|Сумма(ТабРег.СуммаБезНДС) КАК СуммаБезНДС,
	|Сумма(ТабРег.СуммаРегл) КАК СуммаРегл,
	|Сумма(ТабРег.Сумма_Количество) КАК Сумма_Количество,
	|Сумма(ТабРег.КоличествоТара) КАК КоличествоТара
	|
	|ПОМЕСТИТЬ ТаблицаОстатковТоварыСводБезГТД
	|
	|ИЗ ТаблицаОстатковТоварыСвод КАК ТабРег 
	|СГРУППИРОВАТЬ ПО 
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Склад,
	|	ТабРег.ГруппаФинансовогоУчета,
	|	ТабРег.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТаблицаОстатковПоПартиям.Организация КАК Организация,
	|ТаблицаОстатковПоПартиям.Склад КАК Склад,
	|ТаблицаОстатковПоПартиям.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|ТаблицаОстатковПоПартиям.Партнер КАК Партнер,
	|ТаблицаОстатковПоПартиям.Номенклатура КАК Номенклатура,
	|ТаблицаОстатковПоПартиям.Характеристика КАК Характеристика,
	|ТаблицаОстатковПоПартиям.НалогообложениеНДС КАК НалогообложениеНДС,
	|ТаблицаОстатковПоПартиям.СтавкаНДС КАК СтавкаНДС,
	|ТаблицаОстатковПоПартиям.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|ТаблицаОстатковПоПартиям.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|ТаблицаОстатковПоПартиям.СчетФактура КАК СчетФактура,
	|ТаблицаОстатковПоПартиям.ДокументПартии КАК ДокументПартии,
	|ТаблицаОстатковПоПартиям.ПредъявленСчетФактура КАК ПредъявленСчетФактура,
	|ТаблицаОстатковПоПартиям.Количество КАК Количество,
	|ЕстьNULL(ТаблицаОстатковТоварыСводБезГТД.Количество,0) КАК КоличествоМаксимум,
	|ТаблицаОстатковПоПартиям.Сумма КАК Сумма,
	|ТаблицаОстатковПоПартиям.СуммаБезНДС КАК СуммаБезНДС,
	|ТаблицаОстатковПоПартиям.СуммаНДС КАК СуммаНДС,
	|ТаблицаОстатковПоПартиям.НДСРегл КАК НДСРегл,
	|ТаблицаОстатковПоПартиям.СуммаРегл КАК СуммаРегл
	|ПОМЕСТИТЬ ТоварыЕстьСчетФактура
	|ИЗ ТаблицаОстатковПоПартиям
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковТоварыСводБезГТД
	|ПО ТаблицаОстатковТоварыСводБезГТД.Организация = ТаблицаОстатковПоПартиям.Организация
	|	И  ТаблицаОстатковТоварыСводБезГТД.Склад = ТаблицаОстатковПоПартиям.Склад
	|	И  (ТаблицаОстатковТоварыСводБезГТД.ГруппаФинансовогоУчета = ТаблицаОстатковПоПартиям.ГруппаФинансовогоУчета)
	|	И  ТаблицаОстатковТоварыСводБезГТД.Номенклатура = ТаблицаОстатковПоПартиям.Номенклатура
	|	И  ТаблицаОстатковТоварыСводБезГТД.Характеристика = ТаблицаОстатковПоПартиям.Характеристика
	|ГДЕ (ТаблицаОстатковПоПартиям.ПредъявленСчетФактура ИЛИ ТаблицаОстатковПоПартиям.ДокументПартии IS NOT NULL)
	|	И ТаблицаОстатковПоПартиям.Количество > 0 
	|	И ЕстьNULL(ТаблицаОстатковТоварыСводБезГТД.Количество,0) > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТаблицаТовары.Организация КАК Организация,
	|ТаблицаТовары.Склад КАК Склад,
	|ТаблицаТовары.Склад.Подразделение КАК Подразделение, 
	|ТаблицаТовары.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|ТаблицаТовары.Партнер КАК Партнер,
	|ТаблицаТовары.Номенклатура КАК Номенклатура,
	|ТаблицаТовары.Характеристика КАК Характеристика,
	|ТаблицаТовары.НалогообложениеНДС КАК НалогообложениеНДС,
	|ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|ТаблицаТовары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|ТаблицаТовары.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|ТаблицаТовары.СчетФактура КАК СчетФактура,
	|ТаблицаТовары.ДокументПартии КАК ДокументПартии,
	|ТаблицаТовары.Количество КАК Количество,
	|ТаблицаТовары.КоличествоМаксимум КАК КоличествоМаксимум,
	|ТаблицаТовары.Сумма КАК Сумма,
	|ТаблицаТовары.СуммаБезНДС КАК СуммаБезНДС,
	|ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|ТаблицаТовары.НДСРегл КАК НДСРегл,
	|ТаблицаТовары.СуммаРегл КАК СуммаРегл,
	|ЕстьNULL(ТаблицаТовары.Склад.ИспользоватьСкладскиеПомещения, ЛОЖЬ) КАК ИспользоватьСкладскиеПомещения,
	|ТаблицаТовары.ПредъявленСчетФактура КАК ПредъявленСчетФактура,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковСобственныхТоваров) КАК ХозяйственнаяОперация
	|ИЗ ТоварыЕстьСчетФактура КАК ТаблицаТовары
	|УПОРЯДОЧИТЬ ПО 
	|	ТаблицаТовары.Организация,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Партнер,
	|	ТаблицаТовары.НалогообложениеНДС,
	|	ТаблицаТовары.ДокументПартии,
	|	ТаблицаТовары.СчетФактура
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Склад КАК Склад,
	|ТабРег.Организация КАК Организация,
	|ТабРег.НомерГТД КАК НомерГТД,
	|Сумма(ТабРег.Количество) КАК Количество
	|ИЗ ТаблицаОстатковТоварыСвод КАК ТабРег
	|ГДЕ ТабРег.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО 
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Склад,
	|	ТабРег.Организация,
	|	ТабРег.НомерГТД
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаОстатковПоГТД = РезультатЗапроса[3].Выгрузить();
	Выборка = РезультатЗапроса[2].Выбрать();
	ОбработатьРезультатЗапросаСобственныеТовары(Выборка, КоличествоСформированныхДокументов, Истина, ТаблицаОстатковПоГТД);
	
	
	//2. Остатки без указания счетов-фактур - на основе регистра ТоварыОрганизаций
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОстатковСвод.Организация КАК Организация,
	|	ТаблицаОстатковСвод.Склад КАК Склад,
	|	ТаблицаОстатковСвод.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковСвод.Характеристика КАК Характеристика,
	|	Сумма(ТаблицаОстатковСвод.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыБезСчетаФактуры
	|ИЗ
	|(ВЫБРАТЬ
	|	ТоварыЕстьСчетФактура.Организация КАК Организация,
	|	ТоварыЕстьСчетФактура.Склад КАК Склад,
	|	ТоварыЕстьСчетФактура.Номенклатура КАК Номенклатура,
	|	ТоварыЕстьСчетФактура.Характеристика КАК Характеристика,
	|	ВЫБОР КОГДА ТоварыЕстьСчетФактура.Количество < ТоварыЕстьСчетФактура.КоличествоМаксимум ТОГДА
	|		(-1) * ТоварыЕстьСчетФактура.Количество
	|	ИНАЧЕ (-1) * ТоварыЕстьСчетФактура.КоличествоМаксимум
	|	КОНЕЦ КАК Количество
	|	ИЗ ТоварыЕстьСчетФактура
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	ТаблицаОстатковТоварыСводБезГТД.Организация КАК Организация,
	|	ТаблицаОстатковТоварыСводБезГТД.Склад КАК Склад,
	|	ТаблицаОстатковТоварыСводБезГТД.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковТоварыСводБезГТД.Характеристика КАК Характеристика,
	|	ТаблицаОстатковТоварыСводБезГТД.Количество КАК Количество
	|	ИЗ ТаблицаОстатковТоварыСводБезГТД) КАК ТаблицаОстатковСвод
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатковСвод.Организация,
	|	ТаблицаОстатковСвод.Склад,
	|	ТаблицаОстатковСвод.Номенклатура,
	|	ТаблицаОстатковСвод.Характеристика
	|;
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Организация,
	|	Максимум(ГруппаФинансовогоУчета) КАК ГруппаФинансовогоУчета
	|ПОМЕСТИТЬ ТаблицаОстатковТоварыСвернутая
	|ИЗ ТаблицаОстатковТовары
	|ГДЕ ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Организация
	|;
	|УНИЧТОЖИТЬ ТаблицаОстатковТовары
	|;
	|ВЫБРАТЬ
	|	Организация, 
	|	Склад, 
	|	Склад.Подразделение КАК Подразделение, 
	|	Номенклатура, 
	|	Характеристика,
	|	ГруппаФинансовогоУчета,
	|	МАКСИМУМ(НалогообложениеНДС) КАК НалогообложениеНДС,
	|	МАКСИМУМ(Партнер) КАК Партнер,
	|	МАКСИМУМ(СтавкаНДС) КАК СтавкаНДС,
	|	Сумма(Сумма) КАК Сумма,
	|	Сумма(СуммаБезНДС) КАК СуммаБезНДС,
	|	Сумма(СуммаНДС) КАК СуммаНДС,
	|	Сумма(НДСРегл) КАК НДСРегл,
	|	Сумма(СуммаРегл) КАК СуммаРегл,
	|	Сумма(Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаОстатковПоПартиямСвернутая
	|ИЗ ТаблицаОстатковПоПартиям
	|ГДЕ ПредъявленСчетФактура = ЛОЖЬ И ДокументПартии IS NULL И
	|	(Организация, Склад, Номенклатура, Характеристика) В (ВЫБРАТЬ Организация, Склад, Номенклатура, Характеристика ИЗ ТоварыБезСчетаФактуры)
	|СГРУППИРОВАТЬ ПО Организация, Склад, Номенклатура, Характеристика, ГруппаФинансовогоУчета
	|;
	|ВЫБРАТЬ
	|ТоварыБезСчетаФактуры.Организация КАК Организация,
	|ТоварыБезСчетаФактуры.Склад КАК Склад,
	|ТоварыБезСчетаФактуры.Склад.Подразделение КАК Подразделение,
	|ВЫБОР КОГДА ТаблицаОстатковТоварыСвернутая.ГруппаФинансовогоУчета ЕСТЬ NULL
	|		ИЛИ ТаблицаОстатковТоварыСвернутая.ГруппаФинансовогоУчета = ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка) ТОГДА
	|		ТаблицаОстатковПоПартиямСвернутая.ГруппаФинансовогоУчета ИНАЧЕ ТаблицаОстатковТоварыСвернутая.ГруппаФинансовогоУчета
	|КОНЕЦ КАК ГруппаФинансовогоУчета,
	|ТаблицаОстатковПоПартиямСвернутая.Партнер КАК Партнер,
	
	|ТоварыБезСчетаФактуры.Номенклатура КАК Номенклатура,
	|ТоварыБезСчетаФактуры.Характеристика КАК Характеристика,
	|ТаблицаОстатковПоПартиямСвернутая.НалогообложениеНДС КАК НалогообложениеНДС,
	|ТаблицаОстатковПоПартиямСвернутая.СтавкаНДС КАК СтавкаНДС,
	|ЕстьNULL(ТоварыБезСчетаФактуры.Склад.ИспользоватьСкладскиеПомещения, ЛОЖЬ) КАК ИспользоватьСкладскиеПомещения,
	
	|ЛОЖЬ КАК ПредъявленСчетФактура,
	|null КАК СчетФактура,
	|null КАК ДокументПартии,
	|ТоварыБезСчетаФактуры.Количество КАК Количество,
	|ТаблицаОстатковТоварыСвод.Сумма КАК Себестоимость_Стоимость,
	|ТаблицаОстатковТоварыСвод.СуммаБезНДС КАК Себестоимость_СтоимостьБезНДС,
	|ТаблицаОстатковТоварыСвод.СуммаРегл КАК Себестоимость_СтоимостьРегл,
	|ТаблицаОстатковТоварыСвод.Сумма_Количество КАК Себестоимость_Количество,
	
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.Сумма,0) КАК Сумма,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.СуммаБезНДС,0) КАК СуммаБезНДС,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.СуммаНДС,0) КАК СуммаНДС,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.НДСРегл,0) КАК НДСРегл,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.СуммаРегл,0) КАК СуммаРегл,
	|ЕстьNULL(ТаблицаОстатковПоПартиямСвернутая.Количество,0) КАК Партии_Количество,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковСобственныхТоваров) КАК ХозяйственнаяОперация

	|ИЗ ТоварыБезСчетаФактуры
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковТоварыСводБезГТД КАК ТаблицаОстатковТоварыСвод
	|ПО ТаблицаОстатковТоварыСвод.Организация = ТоварыБезСчетаФактуры.Организация
	|	И  ТаблицаОстатковТоварыСвод.Склад = ТоварыБезСчетаФактуры.Склад
	|	И  ТаблицаОстатковТоварыСвод.Номенклатура = ТоварыБезСчетаФактуры.Номенклатура
	|	И  ТаблицаОстатковТоварыСвод.Характеристика = ТоварыБезСчетаФактуры.Характеристика
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковТоварыСвернутая
	|ПО ТаблицаОстатковТоварыСвернутая.Организация = ТоварыБезСчетаФактуры.Организация
	|	И  ТаблицаОстатковТоварыСвернутая.Склад = ТоварыБезСчетаФактуры.Склад
	|	И  ТаблицаОстатковТоварыСвернутая.Номенклатура = ТоварыБезСчетаФактуры.Номенклатура
	|	И  ТаблицаОстатковТоварыСвернутая.Характеристика = ТоварыБезСчетаФактуры.Характеристика
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковПоПартиямСвернутая
	|ПО ТоварыБезСчетаФактуры.Организация = ТаблицаОстатковПоПартиямСвернутая.Организация
	|	И  ТоварыБезСчетаФактуры.Склад = ТаблицаОстатковПоПартиямСвернутая.Склад
	|	И  ТоварыБезСчетаФактуры.Номенклатура = ТаблицаОстатковПоПартиямСвернутая.Номенклатура
	|	И  ТоварыБезСчетаФактуры.Характеристика = ТаблицаОстатковПоПартиямСвернутая.Характеристика
	|ГДЕ ТоварыБезСчетаФактуры.Количество > 0
	|УПОРЯДОЧИТЬ ПО 
	|	ТоварыБезСчетаФактуры.Организация,
	|	ТоварыБезСчетаФактуры.Склад,
	|	ТаблицаОстатковПоПартиямСвернутая.Партнер,
	|	ТаблицаОстатковПоПартиямСвернутая.НалогообложениеНДС
	|	";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Выборка = Запрос.Выполнить().Выбрать();
	ОбработатьРезультатЗапросаСобственныеТовары(Выборка, КоличествоСформированныхДокументов, Ложь, ТаблицаОстатковПоГТД);

	ВывестиСообщениеСформированыДокументы("ВводОстатковТоваров", Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров);
	МенеджерВТ = Неопределено;
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковТоварыКомиссионные(ОрганизацииУСНФИФО)
	//1. Товары принятые на комиссию
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ТабРег.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|ТабРег.Организация КАК Организация,
	|ТабСтоимость.Партия КАК ДокументПартии,
	|ТабРег.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|ТабРег.НомерГТД КАК НомерГТД,
	|ТабРег.ВидЗапасов.Контрагент.Партнер КАК Партнер,
	|ТабРег.ВидЗапасов.Контрагент КАК Контрагент,
	|ТабРег.ВидЗапасов.ВладелецТовара КАК Комитент,
	|ТабРег.ВидЗапасов.Соглашение КАК СоглашениеСКомитентом,
	|ТабРег.ВидЗапасов.Валюта КАК Валюта,
	|ТабРег.ВидЗапасов.Договор КАК Договор,
	|ВЫБОР КОГДА ТабСтоимость.ВидДеятельностиНДС IS NOT NULL ТОГДА 
	|	ТабСтоимость.ВидДеятельностиНДС
	|ИНАЧЕ ТабРег.ВидЗапасов.НалогообложениеНДС КОНЕЦ КАК НалогообложениеНДС,
	|ЕстьNULL(ТабРег.АналитикаУчетаНоменклатуры.МестоХранения.ИспользоватьСкладскиеПомещения, ЛОЖЬ) КАК ИспользоватьСкладскиеПомещения,
	|Сумма(ТабРег.КоличествоОстаток) КАК Количество,
	|Сумма(ЕстьNULL(ТабСтоимость.КоличествоОстаток, 0)) КАК КоличествоПоПартии,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьЗабалансоваяОстаток, 0)) КАК Сумма,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьЗабалансоваяОстаток, 0)) КАК СуммаБезНДС,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьЗабалансоваяРеглОстаток, 0)) КАК СуммаРегл,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковТоваровПолученныхНаКомиссию) КАК ХозяйственнаяОперация
	
	|ИЗ РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст, 
	|								ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|								И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)) КАК ТабРег
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, 
	|								РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию) ) КАК ТабСтоимость
	|ПО  ТабРег.АналитикаУчетаНоменклатуры = ТабСтоимость.АналитикаУчетаНоменклатуры
	|	И ТабРег.Организация = ТабСтоимость.Организация
	|	И (ТабРег.ВидЗапасов = ТабСтоимость.ВидЗапасов)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&ДатаОст) КАК СтавкиНДСНоменклатуры
	|ПО ТабРег.АналитикаУчетаНоменклатуры.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|	И ТабРег.Организация.СтранаРегистрации = СтавкиНДСНоменклатуры.Страна
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&ДатаОст) КАК ОсновныеСтавкиНДС
	|ПО ТабРег.Организация.СтранаРегистрации = ОсновныеСтавкиНДС.Страна
	|
	|СГРУППИРОВАТЬ ПО
	|ТабРег.АналитикаУчетаНоменклатуры,
	|ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))),
	|ТабРег.Организация ,
	|ТабРег.НомерГТД ,
	|ТабРег.ВидЗапасов.Контрагент.Партнер ,
	|ТабРег.ВидЗапасов.Контрагент ,
	|ТабРег.ВидЗапасов.ВладелецТовара ,
	|ТабРег.ВидЗапасов.Соглашение ,
	|ТабРег.ВидЗапасов.Валюта ,
	|ТабРег.ВидЗапасов.Договор ,
	|ТабСтоимость.Партия,
	|ЕстьNULL(ТабРег.АналитикаУчетаНоменклатуры.МестоХранения.ИспользоватьСкладскиеПомещения, ЛОЖЬ),
	|ВЫБОР КОГДА ТабСтоимость.ВидДеятельностиНДС IS NOT NULL ТОГДА 
	|	ТабСтоимость.ВидДеятельностиНДС
	|ИНАЧЕ ТабРег.ВидЗапасов.НалогообложениеНДС КОНЕЦ
	|ИМЕЮЩИЕ Сумма(ТабРег.КоличествоОстаток) > 0 
	|УПОРЯДОЧИТЬ ПО Организация, Склад, Партнер, Комитент, НалогообложениеНДС, ДокументПартии";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Комитент") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("ДокументПартии") Цикл
							Если ЗначениеЗаполнено(Выборка.ДокументПартии) И Выборка.КоличествоПоПартии <= 0 Тогда
								// Пропустить партии с пустым количеством.
								Продолжить;
							КонецЕсли;

							ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
							ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
							ДокОст.ОтражатьСебестоимость = Истина;
							Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
								ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
							КонецЕсли;
							ДокОст.ВидДеятельностиНДС = ДокОст.НалогообложениеНДС;
							Если НЕ ЗначениеЗаполнено(ДокОст.Партнер) Тогда
								ДокОст.Партнер = Выборка.Комитент;
								ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер, ДокОст.Контрагент);
							КонецЕсли;
							ТекПартия = Неопределено;
							Если ЗначениеЗаполнено(Выборка.ДокументПартии) Тогда
								ДанныеПервичногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ДокументПартии, "Дата, Номер");
								ДокОст.Партия = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументПартии, ДанныеПервичногоДокумента.Дата, ДанныеПервичногоДокумента.Номер);
								ТекПартия = ДокОст.Партия;
							КонецЕсли;

							ДокОст.ЦенаВключаетНДС = Истина;
							СоответствиеДокументовПоПомещениям = Новый Соответствие();
							Пока Выборка.Следующий() Цикл
								ВыбранныеВариантыПомещений = Новый Массив;
								КоличествоПоСтроке = Выборка.КоличествоПоПартии;

								//Определим помещение
								Если Выборка.ИспользоватьСкладскиеПомещения Тогда
									ПодобратьПодходящиеПомещения(Выборка, ВыбранныеВариантыПомещений, Выборка.Количество);
								КонецЕсли; //Если Выборка.ИспользоватьСкладскиеПомещения Тогда
								
								Если НЕ Выборка.ИспользоватьСкладскиеПомещения ИЛИ ВыбранныеВариантыПомещений.Количество() = 0 Тогда
									ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ДокОст.Склад, ДокОст.Помещение, ДокОст.Дата, Истина);

									Если ИспользоватьАдресноеХранение И НЕ ЗначениеЗаполнено(ДокОст.ЗонаПриемки) Тогда
										ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(ДокОст.Склад, ДокОст.Помещение);
									КонецЕсли;

									НоваяСтрока = ДокОст.Товары.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									НоваяСтрока.Количество = КоличествоПоСтроке;
									ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
								Иначе
									КоличествоРаспределить = КоличествоПоСтроке;
									Цена = Выборка.Сумма / КоличествоПоСтроке;
									ЦенаРегл = Выборка.СуммаРегл / КоличествоПоСтроке;

									Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
										ТекПомещение = СтрокаПомещение.Помещение;
										НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ТекПартия, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
										
										НоваяСтрока = ДокОст.Товары.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

										//Пересчитаем суммы и количества в соответствии с остатком по помещению
										КоличествоПоПомещению = Мин(КоличествоРаспределить, СтрокаПомещение.Количество);
										СтрокаПомещение.Количество = СтрокаПомещение.Количество - КоличествоПоПомещению;
										КоэффициентПересчета = 1;
										Если КоличествоПоПомещению <> НоваяСтрока.Количество Тогда
											КоэффициентПересчета = КоличествоПоПомещению / Выборка.Количество;
											НоваяСтрока.Количество = КоличествоПоПомещению;
										КонецЕсли;
										//Заполним связанные данные
										ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
										НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * Цена,2);
										НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Количество * ЦенаРегл,2);
										КоличествоРаспределить = КоличествоРаспределить - НоваяСтрока.Количество;
										Если КоличествоРаспределить <=0 Тогда
											Прервать;
										КонецЕсли;
									КонецЦикла; //Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
									Если КоличествоРаспределить > 0 Тогда
										//не все распределилось по помещениям
										//Возможно, это товары к поступлению по ордерной схеме
										//Попытка определить помещение
										//Если не нашлось - будет пустое помещение
										ТекПомещение = ПроверитьПоступлениеПоОрдеру(Выборка, КоличествоРаспределить);
										НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ТекПартия, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
										НоваяСтрока = ДокОст.Товары.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
										НоваяСтрока.Количество = КоличествоРаспределить;
										ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
										НоваяСтрока.Сумма = Окр(НоваяСтрока.Количество * Цена,2);
										НоваяСтрока.СуммаРегл = Окр(НоваяСтрока.Количество * ЦенаРегл,2);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;  //Пока Выборка.Следующий() Цикл
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							СоответствиеДокументовПоПомещениям.Вставить(ДокОст.Помещение, ДокОст.Ссылка);
							Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
								ДокОст = ЭлементСоответствия.Значение.ПолучитьОбъект();
								Если ДокОст.Товары.Количество()=0 Тогда
									ДокОст.Удалить();
									Продолжить;
								КонецЕсли;

								Если НЕ ЗначениеЗаполнено(ДокОст.ХозяйственнаяОперация) Тогда
									ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПолученныхНаКомиссию;
								КонецЕсли;
								ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ДокОст.Склад, ДокОст.Помещение, ДокОст.Дата, Истина);
								Если ИспользоватьАдресноеХранение И НЕ ЗначениеЗаполнено(ДокОст.ЗонаПриемки) Тогда
									ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(ДокОст.Склад, ДокОст.Помещение);
								КонецЕсли;
 								Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
									ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
								КонецЕсли;
								ДокОст.ВидДеятельностиНДС = ДокОст.НалогообложениеНДС;
                                ДокОст.Партия = ТекПартия;

								//Заполним серии для тех строк, где это необходимо
								ЗаполнитьСерииТоваров(ДокОст);
								//Заполним назначения товаров если это необходимо
								ЗаполнитьНазначенияТоваров(ДокОст);
								ДокОст.Записать(РежимЗаписиДокумента.Запись);
							КонецЦикла;  //Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
						КонецЦикла; // ДокументПартии
					КонецЦикла; //Налогообложение НДС
				КонецЦикла;   //Пока Выборка.СледующийПоЗначениюПоля("Комитент") Цикл
			КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковТоваров", 
			Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПолученныхНаКомиссию);
	КонецЕсли;

	//2. Товары переданные на комиссию
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацииУСНФИФО", ОрганизацииУСНФИФО);
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|ТабРег.АналитикаУчетаНоменклатуры.Партнер КАК Партнер,
	|ТабРег.Соглашение КАК Соглашение,
	|ТабРег.Организация КАК Организация,
	|ТабРег.НомерГТД КАК НомерГТД,
	|Сумма(ТабРег.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ ТабОстатки	
	|ИЗ РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(&ГраницаОст, ) КАК ТабРег
	|СГРУППИРОВАТЬ ПО
	|ТабРег.АналитикаУчетаНоменклатуры,
	|ТабРег.АналитикаУчетаНоменклатуры.Партнер,
	|ТабРег.Соглашение,
	|ТабРег.Организация,
	|ТабРег.НомерГТД 
	|;
	|ВЫБРАТЬ 
	|ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ТабРег.Партнер КАК Партнер,
	|ТабРег.Соглашение КАК СоглашениеСКомиссионером,
	|ТабРег.Организация КАК Организация,
	|ТабРег.НомерГТД КАК НомерГТД,
	|ВЫБОР КОГДА ТабРег.Организация В (&ОрганизацииУСНФИФО) ТОГДА
	|	ТабРегСебестоимость.Партия
	|ИНАЧЕ NULL КОНЕЦ КАК ДокументПартии,
	|ВЫБОР КОГДА ЕстьNULL(ТабРегСебестоимость.СтоимостьОстаток,0) > 0 ТОГДА
	|	ТабРегСебестоимость.ВидДеятельностиНДС
	|КОГДА ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС IS NULL ТОГДА
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|ИНАЧЕ ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС КОНЕЦ КАК НалогообложениеНДС,
	|Сумма(ТабРег.Количество) КАК Количество,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьОстаток,0) + ЕстьNULL(ТабРегСебестоимость.ДопРасходыОстаток,0)) КАК Сумма,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьБезНДСОстаток,0) + ЕстьNULL(ТабРегСебестоимость.ДопРасходыБезНДСОстаток,0)) КАК СуммаБезНДС,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьОстаток,0) + ЕстьNULL(ТабРегСебестоимость.ДопРасходыОстаток,0) -
	|	(ЕстьNULL(ТабРегСебестоимость.СтоимостьБезНДСОстаток,0) - ЕстьNULL(ТабРегСебестоимость.ДопРасходыБезНДСОстаток,0))) КАК СуммаНДС,
	|Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьРеглОстаток,0)) КАК СуммаРегл,
	|ВЫБОР КОГДА Сумма(ЕстьNULL(ТабРегСебестоимость.КоличествоОстаток,0)) > 0 ТОГДА
	|	 Сумма(ЕстьNULL(ТабРегСебестоимость.СтоимостьОстаток,0)) / Сумма(ТабРегСебестоимость.КоличествоОстаток)
	|ИНАЧЕ 0 КОНЕЦ КАК Цена,
	|Сумма(ЕстьNULL(ТабРегПартии.КоличествоОстаток,0)) КАК КоличествоПартии,
	|Сумма(ЕстьNULL(ТабРегПартии.СтоимостьОстаток,0)) КАК СуммаПартии,
	|Сумма(ЕстьNULL(ТабРегПартии.СтоимостьБезНДСОстаток,0)) КАК СуммаБезНДСПартии,
	|Сумма(ЕстьNULL(ТабРегПартии.СтоимостьОстаток,0) - ЕстьNULL(ТабРегПартии.СтоимостьБезНДСОстаток,0)) КАК НДСПартии,
	|Сумма(ЕстьNULL(ТабРегПартии.СтоимостьРеглОстаток,0)) КАК СуммаРеглПартии,
	|Сумма(ЕстьNULL(ТабРегПартии.НДСРеглОстаток,0)) КАК НДСРеглПартии,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаКомиссию) КАК ХозяйственнаяОперация
	
	|ИЗ ТабОстатки КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию))  КАК ТабРегСебестоимость
	|	ПО ТабРег.Организация = ТабРегСебестоимость.Организация 
	|	И ТабРег.АналитикаУчетаНоменклатуры = ТабРегСебестоимость.АналитикаУчетаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданныеНаКомиссию.Остатки(&ГраницаОст) КАК ТабРегПартии
	|ПО ТабРег.Организация = ТабРегПартии.Организация 
	|	И ТабРег.АналитикаУчетаНоменклатуры = ТабРегПартии.АналитикаУчетаНоменклатуры
	|ГДЕ ТабРег.Количество > 0
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	ТабРег.Партнер,
	|	ТабРег.Соглашение,
	|	ТабРег.Организация,
	|	ВЫБОР КОГДА ТабРег.Организация В (&ОрганизацииУСНФИФО) ТОГДА
	|		ТабРегСебестоимость.Партия
	|	ИНАЧЕ NULL КОНЕЦ,
	|	ВЫБОР КОГДА ЕстьNULL(ТабРегСебестоимость.СтоимостьОстаток,0) > 0 ТОГДА
	|		ТабРегСебестоимость.ВидДеятельностиНДС
	|	КОГДА ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС IS NULL ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|	ИНАЧЕ ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС КОНЕЦ,
	|	ТабРег.НомерГТД
	|УПОРЯДОЧИТЬ ПО 
	|	ТабРег.Организация,
	|	ТабРег.Партнер,
	|	ТабРег.Соглашение,
	|	ВЫБОР КОГДА ЕстьNULL(ТабРегСебестоимость.СтоимостьОстаток,0) > 0 ТОГДА
	|		ТабРегСебестоимость.ВидДеятельностиНДС
	|	КОГДА ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС IS NULL ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|	ИНАЧЕ ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС КОНЕЦ,
	|	ВЫБОР КОГДА ТабРег.Организация В (&ОрганизацииУСНФИФО) ТОГДА
	|		ТабРегСебестоимость.Партия
	|	ИНАЧЕ NULL КОНЕЦ
	|";

	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("СоглашениеСКомиссионером") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ДокументПартии") Цикл
						Если ЗначениеЗаполнено(Выборка.ДокументПартии) И Выборка.КоличествоПартии <= 0 Тогда
							// Пропустить партии с пустым количеством.
							Продолжить;
						КонецЕсли;

						ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
						ДокОст.ЦенаВключаетНДС = Истина;
						ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
						Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
							ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
						КонецЕсли;
						ДокОст.ВидДеятельностиНДС = ДокОст.НалогообложениеНДС;
						ТекПартия = Неопределено;
						Если ЗначениеЗаполнено(Выборка.ДокументПартии) Тогда
							ДанныеПервичногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ДокументПартии, "Дата, Номер");
							ДокОст.Партия = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументПартии, ДанныеПервичногоДокумента.Дата, ДанныеПервичногоДокумента.Номер);
							ТекПартия = ДокОст.Партия;
						КонецЕсли;

						Пока Выборка.Следующий() Цикл
							КоличествоПоСтроке = Выборка.Количество;
							Если  ЗначениеЗаполнено(Выборка.ДокументПартии) Тогда
								КоличествоПоСтроке = Выборка.КоличествоПартии;
							КонецЕсли;

							НоваяСтрока = ДокОст.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							НоваяСтрока.Количество = КоличествоПоСтроке;
							Если НоваяСтрока.Сумма = 0 И Выборка.КоличествоПартии > 0 И Выборка.СуммаПартии Тогда
								//Заполним по данным из регистра партий
								НоваяСтрока.Цена  = Окр(Выборка.СуммаПартии / Выборка.КоличествоПартии, 2);
								КоэффициентПересчета = НоваяСтрока.Количество / Выборка.КоличествоПартии;
								НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.СуммаПартии, 2);
								НоваяСтрока.СуммаБезНДС = Окр(КоэффициентПересчета * Выборка.СуммаБезНДСПартии, 2);
								НоваяСтрока.НДСРегл = Окр(КоэффициентПересчета * Выборка.НДСРеглПартии, 2);
								НоваяСтрока.СуммаНДС = Окр(КоэффициентПересчета * Выборка.НДСПартии, 2);
								НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.СуммаРеглПартии, 2);

							КонецЕсли;
							
							НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
							Если НоваяСтрока.СуммаНДС > 0 Тогда
								НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
								Если НоваяСтрока.НДСРегл = 0 И НоваяСтрока.Сумма <> 0 И НоваяСтрока.СуммаРегл <> 0 Тогда
									НоваяСтрока.НДСРегл = Окр(НоваяСтрока.Сумма*НоваяСтрока.СуммаНДС / НоваяСтрока.СуммаРегл,2);
								КонецЕсли;
							КонецЕсли;
							
							Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
								ДокОст.Записать(РежимЗаписиДокумента.Запись);
								КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
								
								ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
								ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
								ДокОст.ЦенаВключаетНДС = Истина;
								Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
									ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
								КонецЕсли;
								ДокОст.ВидДеятельностиНДС = ДокОст.НалогообложениеНДС;
								Если ЗначениеЗаполнено(Выборка.ДокументПартии) Тогда
									ДокОст.Партия = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументПартии, ДанныеПервичногоДокумента.Дата, ДанныеПервичногоДокумента.Номер);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла; //Пока Выборка.Следующий() Цикл
						Если ДокОст.Товары.Количество() > 0 Тогда
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
						КонецЕсли;
					КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("ДокументПартии") Цикл
				КонецЦикла;   //Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
			КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("СоглашениеСКомиссионером") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
	КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковТоваров", 
											Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаКомиссию);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковВозвратнаяТара()
	//1. Переданная возвратная тара
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.Партнер КАК Партнер,
	|ТабРег.ВидЗапасов КАК ВидЗапасов,
	|ТабРег.ДокументПередачи.Валюта КАК Валюта,
	|ТабРег.КоличествоОстаток КАК Количество,
	|ТабРег.СуммаОстаток КАК Сумма,
	|ТабРег.ВидЗапасов.Организация КАК Организация,
	|ТабРег.НомерГТД КАК НомерГТД,
	|ТабРег.ПредусмотренЗалог КАК ПредусмотренЗалогЗаТару,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПереданнойКлиентам) КАК ХозяйственнаяОперация
	|ИЗ РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.КоличествоОстаток > 0
	|УПОРЯДОЧИТЬ ПО Организация, Партнер";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
			ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);

			Пока Выборка.Следующий() Цикл

				НоваяСтрока = ДокОст.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Если Выборка.Валюта = ВалютаРегламентированногоУчета 
					ИЛИ НЕ ЗначениеЗаполнено(Выборка.Валюта) Тогда
					НоваяСтрока.СуммаРегл = Выборка.Сумма;
					КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета, ДокОст.Дата);
					НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.Сумма, 2);
				ИначеЕсли Выборка.Валюта = ВалютаУправленческогоУчета Тогда
					КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.Валюта, ВалютаРегламентированногоУчета, ДокОст.Дата);
					НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.Сумма, 2);
				Иначе
					КоэффициентПересчетаУпр = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.Валюта, ВалютаУправленческогоУчета, ДокОст.Дата);
					КоэффициентПересчетаРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.Валюта, ВалютаРегламентированногоУчета, ДокОст.Дата);
					НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчетаРегл * Выборка.Сумма, 2);
					НоваяСтрока.Сумма = Окр(КоэффициентПересчетаУпр * Выборка.Сумма, 2);
				КонецЕсли;
				Если НоваяСтрока.Количество > 0 Тогда
					НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество,2)
				КонецЕсли;
				НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;

				Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					
					ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
				КонецЕсли;
			КонецЦикла; //Пока Выборка.Следующий() Цикл
			Если ДокОст.Товары.Количество() > 0 Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковТоваров", 
											Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПереданнойКлиентам);
	КонецЕсли;
	
	//2. Принятая возвратная тара
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ЕстьNULL(ТабРегТовары.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|ТабРег.Партнер КАК Партнер,
	|ЕстьNULL(ТабРегТовары.АналитикаУчетаНоменклатуры.МестоХранения, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|ЕстьNULL(ТабРегТовары.АналитикаУчетаНоменклатуры.МестоХранения.ИспользоватьСкладскиеПомещения, ЛОЖЬ) КАК ИспользоватьСкладскиеПомещения,
	
	|ТабРегТовары.НомерГТД КАК НомерГТД,
	|ТабРегТовары.ВидЗапасов КАК ВидЗапасов,
	|ТабРег.КоличествоОстаток КАК Количество,
	|ЕстьNULL(ТабРегПартии.КоличествоОстаток,0) КАК КоличествоПоПартии,
	|ТабРег.СуммаОстаток КАК Сумма,
	|ТабРег.ПредусмотренЗалог КАК ПредусмотренЗалогЗаТару,
	|ВЫБОР КОГДА ТабРег.КоличествоОстаток > 0 ТОГДА
	|ТабРег.СуммаОстаток / ТабРег.КоличествоОстаток
	|ИНАЧЕ 0 КОНЕЦ КАК Цена,
	|%ТекстНалогообложениеНДС%
	|%ТекстПартия%
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПринятойОтПоставщиков) КАК ХозяйственнаяОперация
	|ИЗ РегистрНакопления.ПринятаяВозвратнаяТара.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст,
	|												АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)) КАК ТабРегТовары
	|	ПО ТабРег.Номенклатура = ТабРегТовары.АналитикаУчетаНоменклатуры.Номенклатура И
	|		ТабРег.Характеристика = ТабРегТовары.АналитикаУчетаНоменклатуры.Характеристика И
	|	    (ТабРег.ДокументПоступления.Организация = ТабРегТовары.Организация ИЛИ
	|		ТабРег.ДокументПоступления.Организация ЕСТЬ NULL)
	|%ТекстЛевоеСоединение% 
	|
	|ГДЕ ТабРег.КоличествоОстаток > 0
	|УПОРЯДОЧИТЬ ПО 
	|	ЕстьNULL(ТабРегТовары.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)), 
	|	Партнер, НалогообложениеНДС, 
	|	ЕстьNULL(ТабРегТовары.АналитикаУчетаНоменклатуры.МестоХранения, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)),
	|	ДокументПартии";
	ДатаПереходаНаПартии22 = Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить();
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22()
		И ДатаПереходаНаПартии22 < КонецДня(ДатаСверткиИБ) Тогда
		ТекстЛевоеСоединение = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст) КАК ТабРегПартии
		|	ПО ТабРегТовары.АналитикаУчетаНоменклатуры = ТабРегПартии.АналитикаУчетаНоменклатуры И
		|		ТабРегТовары.Организация = ТабРегПартии.Организация И 
		|		(ТабРегТовары.ВидЗапасов = ТабРегПартии.ВидЗапасов) И
		|		ТабРег.Партнер = ТабРегПартии.АналитикаУчетаПартий.Поставщик";
		ТекстНалогообложение = "ЕстьNULL(ТабРегПартии.ВидДеятельностиНДС, ТабРегТовары.ВидЗапасов.НалогообложениеНДС) КАК НалогообложениеНДС,";
		ТекстПартия = "ТабРегПартии.Партия КАК ДокументПартии,";
	Иначе
		ТекстЛевоеСоединение = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровОрганизаций.Остатки(&ГраницаОст) КАК ТабРегПартии
		|	ПО ТабРегТовары.АналитикаУчетаНоменклатуры = ТабРегПартии.АналитикаУчетаНоменклатуры И
		|		ТабРегТовары.Организация = ТабРегПартии.Организация И 
		|		ТабРегТовары.ВидЗапасов = ТабРегПартии.ВидЗапасов";
		ТекстНалогообложение = "ЕстьNULL(ТабРегПартии.АналитикаУчетаПартий.НалогообложениеНДС, ТабРегТовары.ВидЗапасов.НалогообложениеНДС) КАК НалогообложениеНДС,";
		ТекстПартия = "ТабРегПартии.ДокументПоступления КАК ДокументПартии,";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ТекстЛевоеСоединение%",ТекстЛевоеСоединение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ТекстНалогообложениеНДС%",ТекстНалогообложение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ТекстПартия%",ТекстПартия);


	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ДокументПартии") Цикл
						Если ЗначениеЗаполнено(Выборка.ДокументПартии) И Выборка.КоличествоПоПартии <= 0 Тогда
							// Пропустить партии с пустым количеством.
							Продолжить;
						КонецЕсли;

						ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
						ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
						Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
							ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
						КонецЕсли;
						ДокОст.ВидДеятельностиНДС = ДокОст.НалогообложениеНДС;
						ТекПартия = Неопределено;
						Если ЗначениеЗаполнено(Выборка.ДокументПартии) Тогда
							ДанныеПервичногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ДокументПартии, "Дата, Номер");
							ДокОст.Партия = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументПартии, ДанныеПервичногоДокумента.Дата, ДанныеПервичногоДокумента.Номер);
							ТекПартия = ДокОст.Партия;
						КонецЕсли;

						СоответствиеДокументовПоПомещениям = Новый Соответствие();

						Пока Выборка.Следующий() Цикл
							ВыбранныеВариантыПомещений = Новый Массив;
							КоличествоПоСтроке = Выборка.Количество;
							Если ЗначениеЗаполнено(Выборка.ДокументПартии) Тогда
								КоличествоПоСтроке = Выборка.КоличествоПоПартии;
							КонецЕсли;

							//Определим помещение
							Если Выборка.ИспользоватьСкладскиеПомещения Тогда
								ПодобратьПодходящиеПомещения(Выборка, ВыбранныеВариантыПомещений, КоличествоПоСтроке);
							КонецЕсли; //Если Выборка.ИспользоватьСкладскиеПомещения Тогда
							Если НЕ Выборка.ИспользоватьСкладскиеПомещения ИЛИ ВыбранныеВариантыПомещений.Количество() = 0 Тогда
								НоваяСтрока = ДокОст.Товары.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								Если Выборка.Количество <> КоличествоПоСтроке Тогда
							    	НоваяСтрока.Количество = КоличествоПоСтроке;
									КоэффициентПересчета = КоличествоПоСтроке / Выборка.Количество;
									НоваяСтрока.Сумма = Окр(Выборка.Сумма * КоэффициентПересчета, 2);
								КонецЕсли;
								НоваяСтрока.КоличествоУпаковок = КоличествоПоСтроке; 
								НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма;
								НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
							Иначе
								КоличествоРаспределить = КоличествоПоСтроке;
								Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
									ТекПомещение = СтрокаПомещение.Помещение;
									НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ТекПартия, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
									
									НоваяСтрока = ДокОст.Товары.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									//Пересчитаем суммы и количества в соответствии с остатком по помещению
									КоличествоПоПомещению = Мин(КоличествоРаспределить, СтрокаПомещение.Количество);
									СтрокаПомещение.Количество = СтрокаПомещение.Количество - КоличествоПоПомещению;
									Если КоличествоПоПомещению <> НоваяСтрока.Количество Тогда
										КоэффициентПересчета = КоличествоПоПомещению / Выборка.Количество;
										НоваяСтрока.Количество = КоличествоПоПомещению;
										НоваяСтрока.Сумма = Окр(Выборка.Сумма * КоэффициентПересчета, 2);
									КонецЕсли;
									//Заполним связанные данные
									НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
									НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма;
									НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;

									КоличествоРаспределить = КоличествоРаспределить - НоваяСтрока.Количество;
									Если КоличествоРаспределить <=0 Тогда
										Прервать;
									КонецЕсли;
								КонецЦикла; //Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
								Если КоличествоРаспределить > 0 Тогда
									ТекПомещение = ПроверитьПоступлениеПоОрдеру(Выборка, КоличествоРаспределить);
									НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ТекПартия, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
									
									НоваяСтрока = ДокОст.Товары.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

									//Пересчитаем суммы и количества в соответствии с остатком по помещению
									КоличествоПоПомещению = КоличествоРаспределить;
									СтрокаПомещение.Количество = СтрокаПомещение.Количество - КоличествоПоПомещению;
									Если КоличествоПоПомещению <> НоваяСтрока.Количество Тогда
										КоэффициентПересчета = КоличествоПоПомещению / Выборка.Количество;
										НоваяСтрока.Количество = КоличествоПоПомещению;
										НоваяСтрока.Сумма = Окр(Выборка.Сумма * КоэффициентПересчета, 2);
									КонецЕсли;
									//Заполним связанные данные
									НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
									НоваяСтрока.СуммаБезНДС = НоваяСтрока.Сумма;
									НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
								КонецЕсли;
								
							КонецЕсли;
						КонецЦикла; //Пока Выборка.Следующий() Цикл
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
						СоответствиеДокументовПоПомещениям.Вставить(ДокОст.Помещение, ДокОст.Ссылка);
						Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
							ДокОст = ЭлементСоответствия.Значение.ПолучитьОбъект();
							Если ДокОст.Товары.Количество()=0 Тогда
								ДокОст.Удалить();
								Продолжить;
							КонецЕсли;
							Если НЕ ЗначениеЗаполнено(ДокОст.ХозяйственнаяОперация) Тогда
								ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПринятойОтПоставщиков;
							КонецЕсли;
							Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
								ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
							КонецЕсли;
							ДокОст.ВидДеятельностиНДС = ДокОст.НалогообложениеНДС; 
							ДокОст.Партия = ТекПартия;
							ДокОст.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер);
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
						КонецЦикла;  //Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
					КонецЦикла; // ДокументПартии
				КонецЦикла; //Склад
			КонецЦикла; //Налогообложение
		КонецЦикла;  //Партнер
	КонецЦикла; //Организация
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковТоваров", 
									Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПринятойОтПоставщиков);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковТоварыВЯчейках()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Серия КАК Серия,
	|	Склад КАК Склад,
	|	Помещение КАК Помещение,
	|	Сумма(ВНаличииОстаток) КАК Количество
	|ПОМЕСТИТЬ ТаблицаНаСкладе
	|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ГраницаОст,)
	|ГДЕ ВНаличииОстаток>0
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Склад,
	|	Помещение
	|;
	|ВЫБРАТЬ 
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.Характеристика КАК Характеристика,
	|	ТабРег.Упаковка КАК Упаковка,
	|	ТабРег.Ячейка КАК Ячейка,
	|	ТабРег.Серия КАК Серия,
	|	ТабРег.Ячейка.Владелец КАК Склад,
	|	ТабРег.Ячейка.Помещение КАК Помещение,
	|	Сумма(ТабРег.ВНаличииОстаток) КАК Количество,
	|	Сумма(ЕстьNULL(ТаблицаНаСкладе.Количество, 0)) КАК Остаток,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) КАК Статус,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Размещение) КАК ВидОперации
	|ИЗ РегистрНакопления.ТоварыВЯчейках.Остатки(&ГраницаОст, ) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНаСкладе
	|ПО ТабРег.Номенклатура = ТаблицаНаСкладе.Номенклатура
	|	И ТабРег.Характеристика = ТаблицаНаСкладе.Характеристика
	|	И ТабРег.Ячейка.Владелец = ТаблицаНаСкладе.Склад
	|	И ТабРег.Серия = ТаблицаНаСкладе.Серия
	|	И ТабРег.Ячейка.Помещение = ТаблицаНаСкладе.Помещение
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Упаковка,
	|	ТабРег.Ячейка,
	|	ТабРег.Серия,
	|	ТабРег.Ячейка.Владелец,
	|	ТабРег.Ячейка.Помещение
	|ИМЕЮЩИЕ Сумма(ТабРег.ВНаличииОстаток) > 0 И Сумма(ЕстьNULL(ТаблицаНаСкладе.Количество, 0)) > 0
	|УПОРЯДОЧИТЬ ПО Склад, Помещение, Номенклатура, Характеристика, Серия";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	
	КоличествоСформированныхДокументов = 1;
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
			ДокОст = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Ложь);
			ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(Выборка.Склад, Выборка.Помещение);
			Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
						КоличествоОстаток = Выборка.Остаток;
						Пока Выборка.Следующий() Цикл
							Если КоличествоОстаток = 0 Тогда
								Прервать;
							КонецЕсли;
							НоваяСтрока = ДокОст.ТоварыРазмещение.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							НоваяСтрока.Количество = Мин(Выборка.Количество, КоличествоОстаток);
							НоваяСтрока.КоличествоРазмещено = НоваяСтрока.Количество;
							НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
							НоваяСтрока.КоличествоУпаковокРазмещено = НоваяСтрока.Количество;
							КоличествоОстаток = КоличествоОстаток - НоваяСтрока.Количество; 
						КонецЦикла;  // Ячейка
					КонецЦикла; // Серия
				КонецЦикла; // Характеристика
			КонецЦикла; // Номенклатура
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокОст, Документы.ОтборРазмещениеТоваров));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокОст,ПараметрыУказанияСерий.Размещение); 
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЦикла;  //Помещение
	КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	ВывестиСообщениеСформированыДокументы("ОтборРазмещениеТоваров");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковДенежныеСредстваКВыплате()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	ТабРег.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ТабРег.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ВЫРАЗИТЬ(ТабРег.Получатель КАК Справочник.Контрагенты).Партнер КАК Партнер,
	|	ВЫРАЗИТЬ(ТабРег.Получатель КАК Справочник.ФизическиеЛица) КАК ФизЛицо,
	|	ТабРег.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ТабРег.СуммаПриход КАК СуммаПриход,
	|	ТабРег.СуммаРасход КАК СуммаРасход
	|ИЗ РегистрНакопления.ДенежныеСредстваКВыплате.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.СуммаКонечныйОстаток>0
	|ИТОГИ Сумма(ТабРег.СуммаКонечныйОстаток), Сумма(ТабРег.СуммаПриход), Сумма(ТабРег.СуммаРасход)
	|ПО ЗаявкаНаРасходованиеДенежныхСредств";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	ТаблицаДетали = Новый ТаблицаЗначений;
	ТаблицаДетали.Колонки.Добавить("БанковскийСчетКасса");
	ТаблицаДетали.Колонки.Добавить("Партнер");
	ТаблицаДетали.Колонки.Добавить("ФизЛицо");
	ТаблицаДетали.Колонки.Добавить("СуммаКонечныйОстаток");
	
	ВыборкаЗаявкаНаРасход = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявкаНаРасход.Следующий() Цикл
		Если ВыборкаЗаявкаНаРасход.СуммаРасход = 0 Тогда
			//По заявке еще не было выполнения. Оставляем исходную заявку, помечаем ее комментарием
			ДокОст = ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьОбъект();
			ДокОст.Комментарий = СокрЛП(ДокОст.Комментарий)+ "#" + Комментарий_НеУдалятьПриСверткеБазы;
			ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина); 
			Попытка
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				СообщениеСвертки(НСтр("ru = 'Ошибка при записи документа';
										|en = 'Error writing document'")+ ": " + ДокОст, Истина, ОписаниеОшибки());
			КонецПопытки;
			Продолжить;
		КонецЕсли;
		//По заявке уже было выполнение. Создаем новую заявку на остаток суммы: копируем существующую и корректируем
		ДокОст = ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств.Скопировать();
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		ТекстКомментария = Комментарий_СформированСверткойБазы + " [" + НСтр("ru = 'Остатки по документу';
																			|en = 'Document balance'")+" %Документ%]";
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%Документ%", 
										ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств);
		ДокОст.Комментарий = ТекстКомментария; 
		ДокОст.Дата = КонецДня(ДатаСверткиИБ);
		ДокОст.СуммаДокумента = ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток;
		Если ТипЗнч(ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда  
			// Свойства которые очищаются при копировании.
			ДанныеЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств, "Статус, ДатаПлатежа, КтоРешил"); 
			ЗаполнитьЗначенияСвойств(ДокОст, ДанныеЗаявки);
			ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			Продолжить;
		КонецЕсли;   
		// Свойства которые очищаются при копировании.
		ДанныеЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств, "Статус, ДатаПлатежа, КтоРешил, КтоЗаявил, ЖелательнаяДатаПлатежа");
		ЗаполнитьЗначенияСвойств(ДокОст, ДанныеЗаявки);
		ДокОст.РаспределениеПоСчетам.Загрузить(ВыборкаЗаявкаНаРасход.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам.Выгрузить());

		Если ДокОст.РаспределениеПоСчетам.Количество() > 1
			Или (ДокОст.РасшифровкаПлатежа.Количество() + ДокОст.ЛицевыеСчетаСотрудников.Количество()) > 1 Тогда
			ВыборкаДетали = ВыборкаЗаявкаНаРасход.Выбрать();
			ТаблицаДетали.Очистить();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТаб = ТаблицаДетали.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаДетали);
			КонецЦикла;
		КонецЕсли;
		
		// Корректировка ТЧ Распределение по счетам
		МассивУдаляемыхСтрок = Новый Массив;
		Если ДокОст.РаспределениеПоСчетам.Количество() = 1 Тогда
			ДокОст.РаспределениеПоСчетам[0].Сумма = ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток;
		Иначе
			ТаблицаРаспределениеПоСчетам = ТаблицаДетали.Скопировать();
			ТаблицаРаспределениеПоСчетам.Свернуть("БанковскийСчетКасса", "СуммаКонечныйОстаток");
			Для Каждого СтрокаТЧ Из ДокОст.РаспределениеПоСчетам Цикл
				СтруктураПоиска = Новый Структура("БанковскийСчетКасса", СтрокаТЧ.БанковскийСчетКасса);
				МассивСтрокДетали = ТаблицаРаспределениеПоСчетам.НайтиСтроки(СтруктураПоиска);
				Если  МассивСтрокДетали.Количество() = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				ИначеЕсли МассивСтрокДетали[0].СуммаКонечныйОстаток = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если СтрокаТЧ.Сумма > МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток;
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				ИначеЕсли СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				Иначе
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = МассивСтрокДетали[0].СуммаКонечныйОстаток - СтрокаТЧ.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Для Ном = 0 ПО МассивУдаляемыхСтрок.Количество()-1 Цикл
			ДокОст.РаспределениеПоСчетам.Удалить(МассивУдаляемыхСтрок[Ном]);
		КонецЦикла;
		// Корректировка ТЧ Расшифровка платежа и Лицевые счета сотрудников
		ТаблицаДеталиКопия = ТаблицаДетали.Скопировать();
		ТаблицаДеталиКопия.Свернуть("Партнер, ФизЛицо", "СуммаКонечныйОстаток");
		МассивУдаляемыхСтрок = Новый Массив;
		Если ДокОст.ЛицевыеСчетаСотрудников.Количество() = 1 И ТаблицаДеталиКопия.Количество() = 1 Тогда
			ДокОст.ЛицевыеСчетаСотрудников[0].Сумма = ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток;
		Иначе
			Для Каждого СтрокаТЧ Из ДокОст.ЛицевыеСчетаСотрудников Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ФизическоеЛицо) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПоиска = Новый Структура("ФизЛицо", СтрокаТЧ.ФизическоеЛицо);
				МассивСтрокДетали = ТаблицаДеталиКопия.НайтиСтроки(СтруктураПоиска);
				Если  МассивСтрокДетали.Количество() = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если МассивСтрокДетали[0].СуммаКонечныйОстаток = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если СтрокаТЧ.Сумма > МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток;
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				ИначеЕсли СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				Иначе
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = МассивСтрокДетали[0].СуммаКонечныйОстаток - СтрокаТЧ.Сумма;
				КонецЕсли;
			КонецЦикла;
			Для Ном = 0 ПО МассивУдаляемыхСтрок.Количество()-1 Цикл
				ДокОст.ЛицевыеСчетаСотрудников.Удалить(МассивУдаляемыхСтрок[Ном]);
			КонецЦикла;
		КонецЕсли;
		
		МассивУдаляемыхСтрок = Новый Массив;

		Если ДокОст.РасшифровкаПлатежа.Количество() = 1 И ТаблицаДеталиКопия.Количество() = 1 Тогда
			//Строка только одна - просто меняем сумму
			//Сумму взаиморасчетов меняем пропорционально измерению суммы
			ДокОст.РасшифровкаПлатежа[0].СуммаВзаиморасчетов = Окр(ДокОст.РасшифровкаПлатежа[0].СуммаВзаиморасчетов * ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток / ДокОст.РасшифровкаПлатежа[0].Сумма, 2);
			ДокОст.РасшифровкаПлатежа[0].Сумма = ВыборкаЗаявкаНаРасход.СуммаКонечныйОстаток;
		Иначе
			//Меняем табличную часть в соответствии с остатками
			
			Для Каждого СтрокаТЧ Из ДокОст.РасшифровкаПлатежа Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Партнер) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПоиска = Новый Структура("Партнер", СтрокаТЧ.Партнер);
				МассивСтрокДетали = ТаблицаДеталиКопия.НайтиСтроки(СтруктураПоиска);
				Если  МассивСтрокДетали.Количество() = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если МассивСтрокДетали[0].СуммаКонечныйОстаток = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					Продолжить;
				КонецЕсли;
				Если СтрокаТЧ.Сумма > МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					УменьшитьСуммуВзаиморасчетов = Окр(СтрокаТЧ.СуммаВзаиморасчетов * МассивСтрокДетали[0].СуммаКонечныйОстаток / СтрокаТЧ.Сумма, 2);
					СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов - УменьшитьСуммуВзаиморасчетов;
					СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток;

					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				ИначеЕсли СтрокаТЧ.Сумма = МассивСтрокДетали[0].СуммаКонечныйОстаток Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = 0;
				Иначе
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					МассивСтрокДетали[0].СуммаКонечныйОстаток = МассивСтрокДетали[0].СуммаКонечныйОстаток - СтрокаТЧ.Сумма;
				КонецЕсли;
			КонецЦикла;
			Для Ном = 0 ПО МассивУдаляемыхСтрок.Количество()-1 Цикл
				ДокОст.РасшифровкаПлатежа.Удалить(МассивУдаляемыхСтрок[Ном]);
			КонецЦикла;
		КонецЕсли; //Если ДокОст.РасшифровкаПлатежа.Количество() = 1 И ТаблицаДетали.Количество() = 1 Тогда
		Попытка
			ДокОст.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось провести документ %1% по причине %2%'. Остатки по денежным средствам к выплате не будут сформированы корректно.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", ДокОст.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2%", ОписаниеОшибки());
			СообщениеСвертки(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ЗаявкаНаРасходованиеДенежныхСредств");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЗаказыВнутренние(ИмяРегистра, ИмяЗаказа)
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ 
	|ТабРег.%1% КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.ЗаказаноКонечныйОстаток КАК КОформлениюКонечныйОстаток,
	|ТабРег.ЗаказаноРасход КАК ЗаказаноРасход
	|ИЗ РегистрНакопления.%2%.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноКонечныйОстаток > 0
	//++ НЕ УТ
	|%3%
	//-- НЕ УТ
	|ИТОГИ Максимум(ТабРег.ЗаказаноКонечныйОстаток), Максимум(ТабРег.ЗаказаноРасход), 
	|	Максимум(КодСтроки), Максимум(Номенклатура), Максимум(Характеристика)
	|ПО Заказ";
	//++ НЕ УТ
	Если ИмяРегистра = "ЗаказыНаВнутреннееПотребление" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%3%", "И ТабРег.%1% ССЫЛКА Документ.ЗаказНаВнутреннееПотребление");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%3%", "");
	КонецЕсли;
	//-- НЕ УТ
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%1%", ИмяЗаказа);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%2%", ИмяРегистра);
	
	СтатусЗакрыт = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	СтатусОткрыт = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;

	Запрос.Текст = ТекстЗапроса;
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	
	МассивРегистров = РегистрыНакопленияДокумента(ИмяЗаказа);
	
	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.ЗаказаноРасход = 0 Тогда
			//Заказ не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				Если ДокОст.Статус = СтатусЗакрыт Тогда
					// Изменить статус иначе не проведется.
					ДокОст.Статус = СтатусОткрыт;
				КонецЕсли;
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
				ПровестиИлиЗаписатьДокумент(ДокОст);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо изменить заказ в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДокОст.Статус = СтатусЗакрыт Тогда
			// Изменить статус иначе не проведется.
			ДокОст.Статус = СтатусОткрыт;
		КонецЕсли;

		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();

		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СтрокиКДобавлению = ДокОст.Товары.Выгрузить();
		СтрокиКДобавлению.Очистить();
		Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток Тогда
					//Строку менять не требуется
				Иначе
					//Разделим строку на две, исполненную часть пометим как отмененную
					//Новая строка - копия старой строки
					НоваяСтрокаТЧ = СтрокиКДобавлению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.КодСтроки = 0;
					НоваяСтрокаТЧ.Отменено = Истина;

					СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Количество / НоваяСтрокаТЧ.Количество;
					
					НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.Количество - СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковок;

				КонецЕсли;
			Иначе
				//Остатка по этой строке нет - отменим строку
				СтрокаТЧ.Отменено = Истина;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		Для Каждого Строка Из СтрокиКДобавлению Цикл
			НоваяСтрокаТЧ = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, Строка);
		КонецЦикла;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков.
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);
		// Очистим движеняи регистра Внутренние заказы по данному заказу, чтобы при проведении не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу(ИмяРегистра, ИмяЗаказа, ВыборкаЗаказ.Заказ);

		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы(ИмяЗаказа,,Истина);
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЗаказыКлиентов()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ЗаказКлиента КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.ЗаказаноКонечныйОстаток КАК ЗаказаноКонечныйОстаток,
	|ТабРег.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|ТабРег.ЗаказаноРасход КАК ЗаказаноРасход
	|ИЗ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(,&ГраницаОст, , , ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента) КАК ТабРег
	|ГДЕ (ТабРег.ЗаказаноКонечныйОстаток>0 ИЛИ ТабРег.ЗаказаноРасход>0) 
	|ИТОГИ Максимум(ТабРег.ЗаказаноКонечныйОстаток), Максимум(ТабРег.СуммаКонечныйОстаток), Максимум(ТабРег.ЗаказаноРасход), 
	|	Максимум(КодСтроки), Максимум(Номенклатура), Максимум(Характеристика)
	|ПО Заказ";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	//Определим причину отмены заказов
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию(НСтр("ru = '#Свертка базы';
																							|en = '#Base rollup'"));
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗаказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = НСтр("ru = '#Свертка базы';
														|en = '#Base rollup'");
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	МассивРегистров = РегистрыНакопленияДокумента("ЗаказКлиента");

	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		//Заказ в целом выполнился - пропускаем
		Если ВыборкаЗаказ.ЗаказаноКонечныйОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗаказ.ЗаказаноРасход = 0 Тогда
			//По заказу есть остатки, он не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				Если ДокОст.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
					// Изменить статус иначе не проведется.
					ДокОст.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
				КонецЕсли;
				ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ПровестиИлиЗаписатьДокумент(ДокОст);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо сформировать остатки в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		Если ДокОст.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			// Изменить статус иначе не проведется.
			ДокОст.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		СтрокиКДобавлению = ДокОст.Товары.Выгрузить();
		СтрокиКДобавлению.Очистить();
		
		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = СтрокаТЧ.Количество Тогда
					//Строку менять не требуется
				ИначеЕсли ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = 0 Тогда
					//Строка выполнена полностью. Ее надо отменить
					СтрокаТЧ.Отменено = Истина;
					СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Иначе
					//Разделим строку на две, исполненную часть пометим как отмененную
					//Новая строка - копия старой строки
					НоваяСтрокаТЧ = СтрокиКДобавлению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.КодСтроки = 0;
					НоваяСтрокаТЧ.КлючСвязи = 0;
					НоваяСтрокаТЧ.Отменено = Истина;
					НоваяСтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;

					КоличествоСтарое = СтрокаТЧ.Количество;
					СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
					КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
					СтрокаТЧ.Сумма = ВыборкаСтрокаЗаказа.СуммаКонечныйОстаток;
					//Пересчитаем другие суммы по количеству
					СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок * КоэффициентПересчета;
					СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
					//Если есть скидки, перезаполним
					Если СтрокаТЧ.СуммаРучнойСкидки > 0 ИЛИ СтрокаТЧ.СуммаАвтоматическойСкидки > 0 Тогда
						СтрокаТЧ.СуммаРучнойСкидки = Окр(СтрокаТЧ.СуммаРучнойСкидки * КоэффициентПересчета,2);
						СтрокаТЧ.СуммаАвтоматическойСкидки = Окр(СтрокаТЧ.СуммаАвтоматическойСкидки * КоэффициентПересчета,2);
						СтрокиСкидки = ДокОст.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
						Для Каждого СтрокаСкидки ИЗ СтрокиСкидки Цикл
							СтрокаСкидки.Сумма = Окр(СтрокаСкидки.Сумма * КоэффициентПересчета,2);
						КонецЦикла;
					КонецЕсли;
					
					//Скорректируем данные новой строки ТЧ
					НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.Количество - СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Сумма - СтрокаТЧ.Сумма;
					НоваяСтрокаТЧ.СуммаНДС = НоваяСтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДС;
					НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковок;
					НоваяСтрокаТЧ.СуммаСНДС = НоваяСтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаСНДС;
					НоваяСтрокаТЧ.СуммаРучнойСкидки = НоваяСтрокаТЧ.СуммаРучнойСкидки - СтрокаТЧ.СуммаРучнойСкидки;
					НоваяСтрокаТЧ.СуммаАвтоматическойСкидки = НоваяСтрокаТЧ.СуммаАвтоматическойСкидки - СтрокаТЧ.СуммаАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				//Остатка по этой строке нет - отменим строку
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		// Добавление строк в заказ (исполненная часть частично выполненных строк)
		Для Каждого Строка Из СтрокиКДобавлению Цикл
			СтрокаТЧ = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
		КонецЦикла;
		//Изменение этапов оплаты
		Если ДокОст.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			Если ДокОст.ЭтапыГрафикаОплаты.Количество()=1 Тогда
				ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ВыборкаЗаказ.СуммаКонечныйОстаток;
			Иначе
				//убираем лишние суммы пропорционально с каждой строки
				Коэффициент = ВыборкаЗаказ.СуммаКонечныйОстаток / ДокОст.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
				ЗаказСумма = ВыборкаЗаказ.СуммаКонечныйОстаток;
				Для каждого СтрокаТЧ Из ДокОст.ЭтапыГрафикаОплаты Цикл
					Если ЗаказСумма = 0 Тогда
						Прервать;
					КонецЕсли;
					СтрокаТЧ.СуммаПлатежа = Окр(СтрокаТЧ.СуммаПлатежа * Коэффициент, 2);
					ЗаказСумма = ЗаказСумма - СтрокаТЧ.СуммаПлатежа;
				КонецЦикла;
				Если ЗаказСумма <> 0 Тогда
					ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа + ЗаказСумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);
		// Очистим движеняи регистра Заказы... по данному заказу, чтобы при проведении не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу("ЗаказыКлиентов", "ЗаказКлиента", ВыборкаЗаказ.Заказ);

		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	
	// Заказы по которым нет остатков но служат разрезом расчетов с контрагентами.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОстРасч.ОбъектРасчетов КАК Заказ,
	|	Сумма(ОстРасч.Сумма) КАК РасчетыОстаток
	|ИЗ Документ.ВводОстатковВзаиморасчетов.РасчетыСПартнерами КАК ОстРасч
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковВзаиморасчетов КАК ШапкаРасч
	|ПО ОстРасч.Ссылка = ШапкаРасч.Ссылка
	|ГДЕ ШапкаРасч.Дата = &ДатаОст И ОстРасч.ОбъектРасчетов ССЫЛКА Документ.ЗаказКлиента
	|	И НЕ (ОстРасч.ОбъектРасчетов.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы)
	|СГРУППИРОВАТЬ ПО
	|	ОстРасч.ОбъектРасчетов";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	ДополнениеДатой = Формат(ДатаСверткиИБ, "ДЛФ=Д");
	Запрос.УстановитьПараметр("Комментарий_НеУдалятьПриСверткеБазы", "%"+ ДополнениеДатой + " " + НСтр("ru = 'Не удалять при свертке базы';
																										|en = 'Не удалять при свертке базы'")+"%");
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаказ.Следующий() Цикл
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		Если ДокОст.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			// Изменить статус иначе не проведется.
			ДокОст.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЧ.Отменено = Истина;
			СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
		КонецЦикла;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);
		// Очистим движеняи регистра Заказы... по данному заказу, чтобы при проведении не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу("ЗаказыКлиентов", "ЗаказКлиента", ВыборкаЗаказ.Заказ);

		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;

	ВывестиСообщениеСформированыДокументы("ЗаказКлиента",,Истина);

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЗаказыПоставщикам()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ЗаказПоставщику КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.Склад КАК Склад,
	|ТабРег.ЗаказаноКонечныйОстаток КАК ЗаказаноКонечныйОстаток,
	|ТабРег.ЗаказаноРасход КАК ЗаказаноРасход
	|ИЗ РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(,&ГраницаОст, , , ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноКонечныйОстаток>0 ИЛИ ТабРег.ЗаказаноРасход > 0
	|ИТОГИ Сумма(ТабРег.ЗаказаноКонечныйОстаток), Сумма(ТабРег.ЗаказаноРасход) 
	|ПО Заказ
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовПоставщикам.НайтиПоНаименованию(НСтр("ru = '#Свертка базы';
																								|en = '#Base rollup'"));
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗаказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовПоставщикам.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = НСтр("ru = '#Свертка базы';
														|en = '#Base rollup'");
		ПричинаОтменыЗаказаОбъект.ИнициаторОтменыЗаказовПоставщикам = 
														Перечисления.ИнициаторОтменыЗаказовПоставщикам.НашеПредприятие;
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	МассивРегистров = РегистрыНакопленияДокумента("ЗаказПоставщику");

	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.ЗаказаноКонечныйОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗаказ.ЗаказаноРасход = 0 Тогда
			//Заказ не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				Если ДокОст.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
					ДокОст.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
				КонецЕсли;
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
				ПровестиИлиЗаписатьДокумент(ДокОст);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо сформировать остатки в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДокОст.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
			ДокОст.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
		КонецЕсли;
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
 		СтрокиКДобавлению = ДокОст.Товары.Выгрузить();
		СтрокиКДобавлению.Очистить();

		СуммаПоЗаказу = 0;
		ТребуетсяКорректировка = Новый Массив;
		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать();
		Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = СтрокаТЧ.Количество Тогда
					//Строка не меняется
					СуммаПоЗаказу = СуммаПоЗаказу + СтрокаТЧ.СуммаСНДС;
				ИначеЕсли ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток <= 0 Тогда
					//Строка отменяется целиком
					СтрокаТЧ.Отменено = Истина;
					СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
					// Если значение отрицательное, нужна корректировка по разрезу номенклатура-характеристика-склад (пересорт по коду строки)
					Если ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток < 0 Тогда
						СтруктураДляКорректировки = Новый Структура("Номенклатура, Характеристика, Склад");
						ЗаполнитьЗначенияСвойств(СтруктураДляКорректировки, СтрокаТЧ);
						ТребуетсяКорректировка.Добавить(СтруктураДляКорректировки);
					КонецЕсли;
				Иначе
					//Разобъем строку на две, исполненную  часть пометим как отмененную
					НоваяСтрокаТЧ = СтрокиКДобавлению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.Отменено = Истина;
					НоваяСтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
					НоваяСтрокаТЧ.КодСтроки = 0;
					
					КоличествоСтарое = СтрокаТЧ.Количество;
					СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
					КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
					Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
						СтрокаТЧ.КоличествоУпаковок = КоэффициентПересчета * СтрокаТЧ.КоличествоУпаковок;
					Иначе
						СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
					КонецЕсли;
					//Пересчет сумм по количеству
					СтрокаТЧ.Сумма = Окр(СтрокаТЧ.Сумма * КоэффициентПересчета,2);
					СтрокаТЧ.СуммаРучнойСкидки = Окр(СтрокаТЧ.СуммаРучнойСкидки * КоэффициентПересчета,2);
					СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
					СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
					СуммаПоЗаказу = СуммаПоЗаказу + СтрокаТЧ.СуммаСНДС;
					
					//Пересчет в новой строке
					НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.Количество - СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковок;
					НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Сумма - СтрокаТЧ.Сумма;
					НоваяСтрокаТЧ.СуммаРучнойСкидки = НоваяСтрокаТЧ.СуммаРучнойСкидки - СтрокаТЧ.СуммаРучнойСкидки;
					НоваяСтрокаТЧ.СуммаНДС = НоваяСтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДС;
					НоваяСтрокаТЧ.СуммаСНДС = НоваяСтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаСНДС;

				КонецЕсли;
			Иначе
				//Остатка по этой строке нет - отменим строку
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла; // Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
		// Корректировка в случае пересорта количества в остатках по кодам строк.
		Если ТребуетсяКорректировка.Количество() > 0 Тогда
			Для Каждого ЭлементКорректировки Из ТребуетсяКорректировка Цикл
				НадоЗаказать = 0;
				ВыборкаСтрокаЗаказа.Сбросить();
				Пока ВыборкаСтрокаЗаказа.НайтиСледующий(ЭлементКорректировки) Цикл
					НадоЗаказать = НадоЗаказать + ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
				КонецЦикла;
				СтрокиЗаказа = ДокОст.Товары.НайтиСтроки(ЭлементКорректировки);
				КоличествоВЗаказе = 0;
				Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
					Если НЕ СтрокаЗаказа.Отменено И СтрокаЗаказа.Количество > 0 Тогда
						КоличествоВЗаказе = КоличествоВЗаказе + СтрокаЗаказа.Количество;
					КонецЕсли;
				КонецЦикла;
				Если КоличествоВЗаказе = НадоЗаказать Тогда
					Продолжить;
				КонецЕсли;
				КоличествоПрибавить = ?(КоличествоВЗаказе < НадоЗаказать,НадоЗаказать - КоличествоВЗаказе,0);
				КоличествоОтнять = ?(КоличествоВЗаказе > НадоЗаказать,КоличествоВЗаказе - НадоЗаказать,0);
				Для Каждого СтрокаТЧ Из СтрокиЗаказа Цикл
					Если НЕ СтрокаТЧ.Отменено И СтрокаТЧ.Количество > 0 Тогда
						КоличествоСтарое = СтрокаТЧ.Количество;
						СуммаСтарая = СтрокаТЧ.СуммаСНДС;
						Если КоличествоПрибавить > 0 Тогда
							СтрокаТЧ.Количество = СтрокаТЧ.Количество + КоличествоПрибавить;
							КоличествоПрибавить = 0;
						ИначеЕсли КоличествоОтнять > СтрокаТЧ.Количество Тогда
							 // Сбросим количество целиком - отменим строку. Остаток количества заберем у следующей строки.
							СтрокаТЧ.Отменено = Истина;
							СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
							СуммаПоЗаказу = СуммаПоЗаказу - СтрокаТЧ.СуммаСНДС;
							КоличествоОтнять = КоличествоОтнять - СтрокаТЧ.Количество;
							Продолжить;
						Иначе
							СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоОтнять;
							КоличествоОтнять = 0;
						КонецЕсли;
						КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
						Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
							СтрокаТЧ.КоличествоУпаковок = КоэффициентПересчета * СтрокаТЧ.КоличествоУпаковок;
						Иначе
							СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
						КонецЕсли;
						//Пересчет сумм по количеству.
						СтрокаТЧ.Сумма = Окр(СтрокаТЧ.Сумма * КоэффициентПересчета,2);
						СтрокаТЧ.СуммаРучнойСкидки = Окр(СтрокаТЧ.СуммаРучнойСкидки * КоэффициентПересчета,2);
						СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
						СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
						СуммаПоЗаказу = СуммаПоЗаказу + СтрокаТЧ.СуммаСНДС - СуммаСтарая;
						
						Если КоличествоПрибавить = 0 И КоличествоОтнять = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;   // Если ТребуетсяКорректировка.Количество() > 0 Тогда
		// Добавление строк в заказ (исполненная часть частично выполненных строк)
		Для Каждого Строка Из СтрокиКДобавлению Цикл
			СтрокаТЧ = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
		КонецЦикла;
		//Изменение этапов оплаты
		Если ДокОст.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			Если ДокОст.ЭтапыГрафикаОплаты.Количество()=1 Тогда
				ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = СуммаПоЗаказу;
			Иначе
				//убираем лишние суммы пропорционально с каждой строки
				Коэффициент = СуммаПоЗаказу / ДокОст.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
				ЗаказСумма = СуммаПоЗаказу;
				Для каждого СтрокаТЧ Из ДокОст.ЭтапыГрафикаОплаты Цикл
					Если ЗаказСумма = 0 Тогда
						Прервать;
					КонецЕсли;
					СтрокаТЧ.СуммаПлатежа = Окр(СтрокаТЧ.СуммаПлатежа * Коэффициент, 2);
					ЗаказСумма = ЗаказСумма - СтрокаТЧ.СуммаПлатежа;
				КонецЦикла;
				Если ЗаказСумма <> 0 Тогда
					ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа + ЗаказСумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков.
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);
		// Удалим движения по регистру ЗаказыПоставщикам по этому заказу до даты свертки, чтобы не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу("ЗаказыПоставщикам", "ЗаказПоставщику",  ВыборкаЗаказ.Заказ);
		
		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла; // Пока ВыборкаЗаказ.Следующий() Цикл
	// Заказы по которым нет остатков но служат разрезом расчетов с контрагентами.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОстРасч.ОбъектРасчетов КАК Заказ,
	|	Сумма(ОстРасч.Сумма) КАК РасчетыОстаток
	|ИЗ Документ.ВводОстатковВзаиморасчетов.РасчетыСПартнерами КАК ОстРасч
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковВзаиморасчетов КАК ШапкаРасч
	|ПО ОстРасч.Ссылка = ШапкаРасч.Ссылка
	|ГДЕ ШапкаРасч.Дата = &ДатаОст И ОстРасч.ОбъектРасчетов ССЫЛКА Документ.ЗаказПоставщику
	|	И НЕ (ОстРасч.ОбъектРасчетов.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы)
	|СГРУППИРОВАТЬ ПО
	|	ОстРасч.ОбъектРасчетов";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	ДополнениеДатой = Формат(ДатаСверткиИБ, "ДЛФ=Д");
	Запрос.УстановитьПараметр("Комментарий_НеУдалятьПриСверткеБазы", "%"+ ДополнениеДатой + " " + НСтр("ru = 'Не удалять при свертке базы';
																										|en = 'Не удалять при свертке базы'")+"%");
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаказ.Следующий() Цикл
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		Если ДокОст.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			// Изменить статус иначе не проведется.
			ДокОст.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		Для Каждого СтрокаТЧ Из ДокОст.Товары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЧ.Отменено = Истина;
			СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
		КонецЦикла;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);
		// Очистим движеняи регистра Заказы... по данному заказу, чтобы при проведении не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу("ЗаказыПоставщикам", "ЗаказПоставщику",  ВыборкаЗаказ.Заказ);

		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ЗаказПоставщику",,Истина);

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковЗаявкиНаВозврат()
	//1. Возвращаемые товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.ЗаявкаНаВозвратТоваровОтКлиента.Комментарий КАК Комментарий,
	|ТабРег.ЗаявленоКонечныйОстаток КАК ЗаявленоКонечныйОстаток,
	|ТабРег.ЗаявленоРасход КАК ЗаявленоРасход
	|ИЗ РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.ЗаявленоКонечныйОстаток>0 ИЛИ ТабРег.ЗаявленоРасход>0
	|ИТОГИ Сумма(ТабРег.ЗаявленоКонечныйОстаток), Сумма(ТабРег.ЗаявленоРасход)
	|ПО Заказ";

	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	МассивРегистров = РегистрыНакопленияДокумента("ЗаявкаНаВозвратТоваровОтКлиента");
	
	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.ЗаявленоКонечныйОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗаказ.ЗаявленоРасход = 0 Тогда
			//Заказ не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
				Попытка
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					СообщениеСвертки(НСтр("ru = 'Ошибка при записи документа';
											|en = 'Error writing document'")+ ": " + ДокОст, Истина, ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо сформировать остатки в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст <> Неопределено Тогда
			Продолжить;
		КонецЕсли;  
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистров, ВыборкаЗаказ.Заказ);

		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать();
		Для Каждого СтрокаТЧ Из ДокОст.ВозвращаемыеТовары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);

			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если ВыборкаСтрокаЗаказа.ЗаявленоКонечныйОстаток = 0 Тогда
					СтрокаТЧ.Отменено = Истина;
					ВыборкаСтрокаЗаказа.Сбросить();
					Продолжить;
				КонецЕсли;
				
				КоличествоСтарое = СтрокаТЧ.Количество;
				СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаявленоКонечныйОстаток;
				КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
				Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
					СтрокаТЧ.КоличествоУпаковок = КоэффициентПересчета * СтрокаТЧ.КоличествоУпаковок;
				Иначе
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
				КонецЕсли;
				//Пересчет сумм по количеству
				СтрокаТЧ.Сумма = Окр(СтрокаТЧ.Сумма * КоэффициентПересчета,2);
				СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
				СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
			Иначе
				//Остатка по этой строке нет - отменим строку
				СтрокаТЧ.Отменено = Истина;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		
		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;

	//2. Заменяющие товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ЗаказКлиента КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.Склад КАК Склад,
	|ТабРег.ЗаказаноКонечныйОстаток КАК ЗаказаноКонечныйОстаток,
	|ТабРег.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|ТабРег.ЗаказаноРасход КАК ЗаказаноРасход
	|ИЗ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ (ТабРег.ЗаказаноКонечныйОстаток>0 ИЛИ ТабРег.ЗаказаноРасход>0) 
	|	И ТабРег.ЗаказКлиента ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|ИТОГИ Максимум(ТабРег.ЗаказаноКонечныйОстаток), Максимум(ТабРег.СуммаКонечныйОстаток), Максимум(ТабРег.ЗаказаноРасход), 
	|	Максимум(КодСтроки), Максимум(Номенклатура), Максимум(Характеристика)
	|ПО Заказ, КодСтроки";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	
	//Определим причину отмены заказов
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию(НСтр("ru = '#Свертка базы';
																							|en = '#Base rollup'"));
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗАказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = НСтр("ru = '#Свертка базы';
														|en = '#Base rollup'");
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.ЗаказаноКонечныйОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаЗаказ.ЗаказаноРасход = 0 Тогда
			//Заказ не начал выполняться. Оставляем его как есть
			ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
			Если ДокОст <> Неопределено Тогда
				ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
				ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
				Попытка
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					СообщениеСвертки(НСтр("ru = 'Ошибка при записи документа';
											|en = 'Error writing document'")+ ": " + ДокОст, Истина, ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		//Заказ начал выполняться. Надо сформировать остатки в соответствии с текущим состоянием заказа
		ДокОст = ВыборкаЗаказ.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
  		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		Для Каждого Рег ИЗ МассивРегистров Цикл
			НаборЗаписей = РегистрыНакопления[Рег].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаказ.Заказ);
			НаборЗаписей.Записать();
		КонецЦикла;
		СтрокиКДобавлению = ДокОст.ЗаменяющиеТовары.Выгрузить();
		СтрокиКДобавлению.Очистить();
		ВыборкаСтрокаЗаказа = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Для Каждого СтрокаТЧ Из ДокОст.ЗаменяющиеТовары Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);

			Если ВыборкаСтрокаЗаказа.НайтиСледующий(СтруктураОтбора) Тогда
				Если ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = СтрокаТЧ.Количество Тогда
					//Заказанное количество не поменялось. Оставляем строку без изменений
				ИначеЕсли ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток = 0 Тогда
					СтрокаТЧ.Отменено = Истина;
					СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Иначе
					//Разделим строку на две, исполненную часть пометим как отмененную
					//Новая строка - копия старой строки
					НоваяСтрокаТЧ = СтрокиКДобавлению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.КодСтроки = 0;
					НоваяСтрокаТЧ.КлючСвязи = 0;
					НоваяСтрокаТЧ.Отменено = Истина;
					НоваяСтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
					
					КоличествоСтарое = СтрокаТЧ.Количество;
					СтрокаТЧ.Количество = ВыборкаСтрокаЗаказа.ЗаказаноКонечныйОстаток;
					КоэффициентПересчета = СтрокаТЧ.Количество / КоличествоСтарое;
					СтрокаТЧ.Сумма = ВыборкаСтрокаЗаказа.СуммаКонечныйОстаток;
					//Пересчитаем другие суммы по количеству
					СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * КоэффициентПересчета,2);
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок * КоэффициентПересчета;
					СтрокаТЧ.СуммаСНДС = Окр(СтрокаТЧ.СуммаСНДС * КоэффициентПересчета,2);
					//Если есть скидки, перезаполним
					Если СтрокаТЧ.СуммаРучнойСкидки > 0 ИЛИ СтрокаТЧ.СуммаАвтоматическойСкидки > 0 Тогда
						СтрокаТЧ.СуммаРучнойСкидки = Окр(СтрокаТЧ.СуммаРучнойСкидки * КоэффициентПересчета,2);
						СтрокаТЧ.СуммаАвтоматическойСкидки = Окр(СтрокаТЧ.СуммаАвтоматическойСкидки * КоэффициентПересчета,2);
						СтрокиСкидки = ДокОст.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
						Для Каждого СтрокаСкидки ИЗ СтрокиСкидки Цикл
							СтрокаСкидки.Сумма = Окр(СтрокаСкидки.Сумма * КоэффициентПересчета,2);
						КонецЦикла;
					КонецЕсли;
					
					//Скорректируем данные новой строки ТЧ
					НоваяСтрокаТЧ.Количество = НоваяСтрокаТЧ.Количество - СтрокаТЧ.Количество;
					НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Сумма - СтрокаТЧ.Сумма;
					НоваяСтрокаТЧ.СуммаНДС = НоваяСтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДС;
					НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковок;
					НоваяСтрокаТЧ.СуммаСНДС = НоваяСтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаСНДС;
					НоваяСтрокаТЧ.СуммаРучнойСкидки = НоваяСтрокаТЧ.СуммаРучнойСкидки - СтрокаТЧ.СуммаРучнойСкидки;
					НоваяСтрокаТЧ.СуммаАвтоматическойСкидки = НоваяСтрокаТЧ.СуммаАвтоматическойСкидки - СтрокаТЧ.СуммаАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				//Остатка по этой строке нет - отменим строку целиком
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
			ВыборкаСтрокаЗаказа.Сбросить();
		КонецЦикла;
		// Добавление строк в заказ (исполненная часть частично выполненных строк)
		Для Каждого Строка Из СтрокиКДобавлению Цикл
			СтрокаТЧ = ДокОст.ЗаменяющиеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
		КонецЦикла;

		//Изменение этапов оплаты
		Если ДокОст.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			Если ДокОст.ЭтапыГрафикаОплаты.Количество()=1 Тогда
				ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ВыборкаЗаказ.СуммаКонечныйОстаток;
			Иначе
				//убираем лишние суммы пропорционально с каждой строки
				Коэффициент = ВыборкаЗаказ.СуммаКонечныйОстаток / ДокОст.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
				ЗаказСумма = ВыборкаЗаказ.СуммаКонечныйОстаток;
				Для каждого СтрокаТЧ Из ДокОст.ЭтапыГрафикаОплаты Цикл
					Если ЗаказСумма = 0 Тогда
						Прервать;
					КонецЕсли;
					СтрокаТЧ.СуммаПлатежа = Окр(СтрокаТЧ.СуммаПлатежа * Коэффициент, 2);
					ЗаказСумма = ЗаказСумма - СтрокаТЧ.СуммаПлатежа;
				КонецЦикла;
				Если ЗаказСумма <> 0 Тогда
					ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа = ДокОст.ЭтапыГрафикаОплаты[0].СуммаПлатежа + ЗаказСумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;

	ВывестиСообщениеСформированыДокументы("ЗаявкаНаВозвратТоваровОтКлиента",,Истина);

КонецПроцедуры

Процедура ОбработатьОстаткиДенежныеСредстваКПоступлениюИСписанию()
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	ТабРег.Организация,
	|	ТабРег.БанковскийСчет,
	|	ТабРег.КЗачислениюОстаток КАК КЗачислениюОстаток,
	|	ТабРег.КСписаниюОстаток КАК КСписаниюОстаток,
	|	ТабРегОбороты.Регистратор КАК Документ,
	|	ВЫБОР КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Дата
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.СписаниеБезналичныхДенежныхСредств).Дата
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).Дата
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.ПриходныйКассовыйОрдер).Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Проведен
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.СписаниеБезналичныхДенежныхСредств).Проведен
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).Проведен
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.ПриходныйКассовыйОрдер).Проведен
	|	КОНЕЦ КАК ДокументПроведен,
	|	ЕстьNULL(ТабРегОбороты.КСписаниюПриход,0) КАК КСписаниюПриход,
	|	ЕстьNULL(ТабРегОбороты.КЗачислениюПриход,0) КАК КЗачислениюПриход
	|ИЗ РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Обороты(,&ГраницаОст,Регистратор) КАК ТабРегОбороты
	|ПО ТабРег.Организация = ТабРегОбороты.Организация
	|И ТабРег.БанковскийСчет = ТабРегОбороты.БанковскийСчет 
	|ГДЕ ТабРегОбороты.Регистратор ЕСТЬ НЕ NULL
	|	И ((ТабРег.КЗачислениюОстаток > 0 И ЕстьNULL(ТабРегОбороты.КЗачислениюПриход,0) > 0) 
	|	ИЛИ (ТабРег.КСписаниюОстаток > 0 И ЕстьNULL(ТабРегОбороты.КСписаниюПриход,0) > 0))
	|УПОРЯДОЧИТЬ ПО 
	|	ВЫБОР КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Дата
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.СписаниеБезналичныхДенежныхСредств).Дата
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).Дата
	|	КОГДА ТабРегОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер ТОГДА
	|		ВЫРАЗИТЬ(ТабРегОбороты.Регистратор КАК Документ.ПриходныйКассовыйОрдер).Дата
	|	КОНЕЦ УБЫВ
	|ИТОГИ
	|	Сумма(ТабРег.КЗачислениюОстаток),
	|	Сумма(ТабРег.КСписаниюОстаток)
	|ПО
	|	ТабРег.Организация,
	|	ТабРег.БанковскийСчет 
	|";

	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	ЗафиксироватьИзменениеДокументовВПараметрСвертки();

	//Документ, сформировавший начальный остаток, надо перенести после даты свертки
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаБанковскийСчет = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаБанковскийСчет.Следующий() Цикл
			СуммаКЗачислению = ВыборкаБанковскийСчет.КЗачислениюОстаток;
			СуммаКСписанию = ВыборкаБанковскийСчет.КСписаниюОстаток;
			Выборка = ВыборкаБанковскийСчет.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СуммаКЗачислению = 0 И СуммаКСписанию = 0 Тогда
					Прервать;
				КонецЕсли;
				ПереноситьДокумент = Ложь;
				Если Выборка.КЗачислениюПриход > 0 Тогда
					Если Выборка.КЗачислениюПриход > СуммаКЗачислению Тогда
						Продолжить;
					КонецЕсли;
					ДокОст = Выборка.Документ.ПолучитьОбъект();
					Если ДокОст = Неопределено тогда
						Продолжить;
					КонецЕсли;
					СуммаКЗачислению = СуммаКЗачислению - Выборка.КЗачислениюПриход;
					ПереноситьДокумент = Истина;
				ИначеЕсли Выборка.КСписаниюПриход > 0 Тогда
					Если Выборка.КСписаниюПриход > СуммаКСписанию Тогда
						Продолжить;
					КонецЕсли;
					ДокОст = Выборка.Документ.ПолучитьОбъект();
					Если ДокОст = Неопределено тогда
						Продолжить;
					КонецЕсли;
					СуммаКСписанию = СуммаКСписанию - Выборка.КСписаниюПриход;
					ПереноситьДокумент = Истина;
				КонецЕсли;
				Если НЕ ПереноситьДокумент Тогда
					Продолжить;
				КонецЕсли;
				ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
				Если Выборка.ДокументПроведен Тогда
					// Сначала записать документ с отменой проведения.
					Попытка
						ДокОст.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Исключение
						ТекстСообщения = НСтр("ru = 'Не удалось отменить проведение документа';
												|en = 'Cannot cancel document posting'") + ": " + СокрЛП(ДокОст.Ссылка);
						СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				ДокОст.Дата = КонецДня(ДатаСверткиИБ) + 1;
				ПроверитьНомерДокумента(ДокОст, Выборка.Дата);
				Если ТипЗнч(Выборка.Документ) <> Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга") Тогда
					ТекстКомментария = НСтр("ru = '[Перенесен обработкой свертки базы][Был %1%]';
											|en = '[Transferred by infobase rollup data processor][%1%]'");
					ТекстКомментария = СтрЗаменить(ТекстКомментария,"%1%", СокрЛП(Выборка.Документ));
					ДокОст.Комментарий = ТекстКомментария;
				КонецЕсли;
				Если Выборка.ДокументПроведен Тогда
					// Проведение измененного документа.
					ПроведенУспешно = Ложь;
					Попытка
						ДокОст.Записать(РежимЗаписиДокумента.Проведение);
						ПроведенУспешно = Истина;
					Исключение
						ТекстСообщения = НСтр("ru = 'Не удалось провести документ';
												|en = 'Cannot post the document'") + ": " + СокрЛП(ДокОст.Ссылка);
						СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());
					КонецПопытки;
					Если НЕ ПроведенУспешно Тогда
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
				Иначе
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = 'Обработаны Денежные средства безналичные к зачислению и Денежные средства безналичные к списанию';
							|en = 'Non-cash to receive and Non-cash to write off are processed'");
	СообщениеСвертки(ТекстСообщения);
КонецПроцедуры

Процедура ОбработатьОстаткиТоварыКОтгрузке()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|ТабРег.ДокументОтгрузки КАК ДокументОтгрузки,
	|ТабРегОбороты.Регистратор КАК ДокументОрдер,
	|ТабРег.КОтгрузкеОстаток КАК КОтгрузке,
	|ТабРегОбороты.КОтгрузкеРасход КАК Отгружено
	|ИЗ РегистрНакопления.ТоварыКОтгрузке.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Обороты(&ГраницаОст,,Регистратор) КАК ТабРегОбороты
	|ПО ТабРегОбороты.ДокументОтгрузки = ТабРег.ДокументОтгрузки 
	|ГДЕ ТабРег.КОтгрузкеОстаток > 0  И ТабРегОбороты.Регистратор ЕСТЬ НЕ NULL
	|";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	МассивОрдеров = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДокОст = Выборка.ДокументОрдер.ПолучитьОбъект();
		Если ДокОст = Неопределено тогда
			Продолжить;
		КонецЕсли;

		ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		Попытка
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СообщениеСвертки(НСтр("ru = 'Ошибка при записи документа';
									|en = 'Error writing document'")+ ": " + ДокОст, Истина, ОписаниеОшибки());
		КонецПопытки;
		МассивОрдеров.Добавить(Выборка.ДокументОрдер);
	КонецЦикла;
	
	//Поиск документов Отбор, размещение товаров оформленных по ордеру
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|Док.Ссылка КАК ДокументОтбора
	|ИЗ Документ.ОтборРазмещениеТоваров КАК Док
	|ГДЕ Док.Распоряжение В (&МассивОрдеров) И НЕ Док.ПометкаУдаления
	|";
	Запрос.УстановитьПараметр("МассивОрдеров", МассивОрдеров);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОст = Выборка.ДокументОтбора.ПолучитьОбъект();
		Если ДокОст = Неопределено тогда
			Продолжить;
		КонецЕсли;

		ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		Попытка
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СообщениеСвертки(НСтр("ru = 'Ошибка при записи документа';
									|en = 'Error writing document'")+ ": " + ДокОст, Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	СообщениеСвертки(НСтр("ru = 'Обработаны Товары к отгрузке';
							|en = 'Goods for shipment are processed'"));

КонецПроцедуры

Процедура ОбработатьОстаткиТоварыКПоступлению()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТабРег.ДокументПоступления КАК ДокументПоступления,
	|	ТабРегОбороты.Регистратор КАК ДокументОрдер,
	|	ТабРег.КОформлениюОрдеровОстаток КАК КПоступлению,
	|	ТабРег.КОформлениюПоступленийПоРаспоряжениюОстаток КАК КОформлению
	|ИЗ РегистрНакопления.ТоварыКПоступлению.Остатки(&ГраницаОст) КАК ТабРег
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Обороты(&ГраницаОст,,Регистратор) КАК ТабРегОбороты
	|ПО ТабРегОбороты.ДокументПоступления = ТабРег.ДокументПоступления 
	|ГДЕ ТабРег.КОформлениюОрдеровОстаток > 0 Или ТабРег.КОформлениюПоступленийПоРаспоряжениюОстаток > 0
	|ИТОГИ Сумма(КПоступлению), Сумма(КОформлению) ПО ДокументПоступления";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДокументПоступления = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументПоступления.Следующий() Цикл
		ТипДокументаПоступления = ТипЗнч(ВыборкаДокументПоступления.ДокументПоступления);
		Если ТипДокументаПоступления = Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ
			ТипДокументаПоступления = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Если Найти(ВыборкаДокументПоступления.ДокументПоступления.Комментарий, Комментарий_НеУдалятьПриСверткеБазы) > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаОрдер = ВыборкаДокументПоступления.Выбрать();
		Пока ВыборкаОрдер.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОрдер.ДокументОрдер) Тогда
				Продолжить;
			КонецЕсли;

			ДокОст = ВыборкаОрдер.ДокументОрдер.ПолучитьОбъект();
			Если ДокОст = Неопределено тогда
				Продолжить;
			КонецЕсли;

			ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
			ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
			Попытка
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				СообщениеСвертки(НСтр("ru = 'Ошибка при записи документа';
										|en = 'Error writing document'")+ ": " + ДокОст, Истина, ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Товары к поступлению';
							|en = 'Goods to receive are processed'"));

КонецПроцедуры

Процедура ОбработатьОстаткиТоварыКОтбору()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|ТабРег.Распоряжение КАК Распоряжение,
	|ТабРегОбороты.Регистратор КАК ДокументОтбор,
	|ТабРег.КОтборуОстаток КАК КОтбору
	|ИЗ РегистрНакопления.ТоварыКОтбору.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтбору.Обороты(&ГраницаОст,,Регистратор) КАК ТабРегОбороты
	|ПО ТабРегОбороты.Распоряжение = ТабРег.Распоряжение 
	|ГДЕ ТабРег.КОтборуОстаток > 0
	|ИТОГИ Максимум(КОтбору) ПО ТабРег.Распоряжение";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРаспоряжение = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРаспоряжение.Следующий() Цикл
		ВыборкаОтбор = ВыборкаРаспоряжение.Выбрать();
		Пока ВыборкаОтбор.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаОтбор.ДокументОтбор) Тогда
				Продолжить;
			КонецЕсли;

			ДокОст = ВыборкаОтбор.ДокументОтбор.ПолучитьОбъект();
			Если ДокОст = Неопределено тогда
				Продолжить;
			КонецЕсли;

			ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
			ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
			Попытка
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				СообщениеСвертки(НСтр("ru = 'Ошибка при записи документа';
										|en = 'Error writing document'")+ ": " + ДокОст, Истина, ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Товары к отбору';
							|en = 'Goods for picking are processed'"));

КонецПроцедуры

Процедура ОбработатьБлокировкиСкладскихЯчеек()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|Регистратор КАК Документ
	|ИЗ РегистрСведений.БлокировкиСкладскихЯчеек
	|ГДЕ Регистратор ССЫЛКА Документ.УстановкаБлокировокЯчеек
	|И Регистратор.Дата <= &ДатаОст";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОст = Выборка.Документ.ПолучитьОбъект();
		Если ДокОст = Неопределено тогда
			Продолжить;
		КонецЕсли;

		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
		ДокОст.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Блокировки складских ячеек';
							|en = 'Storage bin locks are processed'"));

КонецПроцедуры

Процедура ОбработатьСостоянияБлокировкиВычетаНДС()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БлокировкаВычетаНДССчетаФактуры.СчетФактура КАК СчетФактура,
	|	МАКСИМУМ(БлокировкаВычетаНДССчетаФактуры.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СрезПоследнихДокументовБлокировки
	|ИЗ
	|	Документ.БлокировкаВычетаНДС.СчетаФактуры КАК БлокировкаВычетаНДССчетаФактуры
	|ГДЕ
	|	НЕ БлокировкаВычетаНДССчетаФактуры.Ссылка.ПометкаУдаления
	|	И БлокировкаВычетаНДССчетаФактуры.Ссылка.Дата <= &ДатаОст
	|СГРУППИРОВАТЬ ПО
	|	БлокировкаВычетаНДССчетаФактуры.СчетФактура
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаблокированныеСФ.Ссылка.Организация КАК Организация,
	|	ЗаблокированныеСФ.СчетФактура КАК СчетФактура,
	|	ЗаблокированныеСФ.СчетФактура.Дата КАК СчетФактураДата,
	|	ЗаблокированныеСФ.СчетФактура.Номер КАК СчетФактураНомер,
	|	ЗаблокированныеСФ.СрокБлокировки КАК СрокБлокировки,
	|	СУММА(ЗаблокированныеСФ.НДС) КАК НДС
	|ИЗ
	|	Документ.БлокировкаВычетаНДС.СчетаФактуры КАК ЗаблокированныеСФ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СрезПоследнихДокументовБлокировки КАК ВТ_СрезПоследнихДокументовБлокировки
	|	ПО ЗаблокированныеСФ.СчетФактура = ВТ_СрезПоследнихДокументовБлокировки.СчетФактура
	|		И ЗаблокированныеСФ.Ссылка = ВТ_СрезПоследнихДокументовБлокировки.Ссылка
	|ГДЕ
	|	(ЗаблокированныеСФ.СрокБлокировки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИЛИ ЗаблокированныеСФ.СрокБлокировки > &ДатаОст)
	|	И ЗаблокированныеСФ.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБлокировкиВычетаНДС.Установлена)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаблокированныеСФ.Ссылка.Организация,
	|	ЗаблокированныеСФ.СрокБлокировки,
	|	ЗаблокированныеСФ.СчетФактура
	|ИТОГИ ПО
	|	ЗаблокированныеСФ.Ссылка.Организация";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоСформированныхДокументов = 1;
	Пока ВыборкаОрганизация.Следующий() Цикл
		ДокОст = Документы.БлокировкаВычетаНДС.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОрганизация, Ложь);
		ДокОст.Состояние = Перечисления.СостоянияБлокировкиВычетаНДС.Установлена;
		Выборка = ВыборкаОрганизация.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаСФ = ДокОст.СчетаФактуры.Добавить();
			ТипПервичногоДокумента = Неопределено;
			Если ТипЗнч(Выборка.СчетФактура) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
				Или ТипЗнч(Выборка.СчетФактура) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
				ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту;
			КонецЕсли;
			ПервичныйДокумент = ПреобразоватьСсылкуВПервичныйДокумент(Истина, Выборка.СчетФактура, 
								Выборка.СчетФактураДата, Выборка.СчетФактураНомер, ТипПервичногоДокумента);
			Если НЕ ЗначениеЗаполнено(ПервичныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСФ.СчетФактура = ПервичныйДокумент;
			Если ДокОст.СчетаФактуры.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				//Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				ДокОст = Документы.БлокировкаВычетаНДС.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОрганизация, Ложь);
				ДокОст.Состояние = Перечисления.СостоянияБлокировкиВычетаНДС.Установлена;
			КонецЕсли;
			Если ДокОст.СчетаФактуры.Количество() > 0 Тогда
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("БлокировкаВычетаНДС", "");
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПодарочныеСертификаты()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|АктивацияПСРег.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|АктивацияПСРег.Регистратор КАК РегистраторАктивации,
	|АктивацияПСРег.ДатаНачалаДействия КАК ДатаАктивации,
	|АктивацияПСРег.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|АктивацияПСРег.Организация КАК Организация,
	|АктивацияПСРег.ПодарочныйСертификат.Владелец КАК ВидПодарочногоСертификата,
	|АктивацияПСРег.ПодарочныйСертификат.Владелец.Валюта КАК ВалютаПодарочногоСертификата
	|ПОМЕСТИТЬ АктивацияПС
	|ИЗ  РегистрСведений.АктивацияПодарочныхСертификатов КАК АктивацияПСРег
	|ГДЕ
	|	АктивацияПСРег.ДатаНачалаДействия <= &ДатаОст
	|	И НЕ АктивацияПСРег.ПодарочныйСертификат.Владелец.УчетПодарочныхСертификатов2_5
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодарочныйСертификат
	|;
	|ВЫБРАТЬ
	|АктивацияПС.ВидПодарочногоСертификата КАК ВидПодарочногоСертификата,
	|АктивацияПС.ВалютаПодарочногоСертификата КАК ВалютаПодарочногоСертификата,
	|ОстаткиПС.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|ОстаткиПС.ПодарочныйСертификат.Штрихкод КАК Штрихкод,
	|ОстаткиПС.ПодарочныйСертификат.МагнитныйКод КАК МагнитныйКод,
	|ОстаткиПС.ПодарочныйСертификат.Код КАК СерийныйНомер,
	|ОстаткиПС.СуммаОстаток КАК СуммаВВалютеСертификата,
	|АктивацияПС.ДатаАктивации КАК ДатаАктивации,
	|АктивацияПС.Организация КАК Организация,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПодарочныхСертификатов) КАК ХозяйственнаяОперация
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты.Остатки(&ГраницаОст) КАК ОстаткиПС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктивацияПС КАК АктивацияПС
	|	ПО АктивацияПС.ПодарочныйСертификат = ОстаткиПС.ПодарочныйСертификат
	|ГДЕ
	|	ОстаткиПС.СуммаОстаток > 0
	|УПОРЯДОЧИТЬ ПО 
	|	АктивацияПС.Организация, 
	|	ВидПодарочногоСертификата, 
	|	АктивацияПС.ДатаАктивации, 
	|	ПодарочныйСертификат";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидПодарочногоСертификата") Цикл
			ДокОст = Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДокОст.ПодарочныеСертификаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				Если Выборка.ВалютаПодарочногоСертификата = ВалютаРегламентированногоУчета Тогда
					НоваяСтрока.СуммаРегл = Выборка.СуммаВВалютеСертификата;
				Иначе
					КоэффициентПересчета = КурсыВалют.Получить(Выборка.ВалютаПодарочногоСертификата);
					Если КоэффициентПересчета = Неопределено Тогда
						КоэффициентПересчета = 
							РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
														Выборка.ВалютаПодарочногоСертификата, 
														ВалютаРегламентированногоУчета, ДокОст.Дата);
						КурсыВалют.Вставить(Выборка.ВалютаПодарочногоСертификата, КоэффициентПересчета); 
					КонецЕсли;
					
					НоваяСтрока.СуммаРегл = Окр(Выборка.Выборка.СуммаВВалютеСертификата * КоэффициентПересчета, 2, 1);
				КонецЕсли;
				Если Выборка.ВалютаПодарочногоСертификата = ВалютаУправленческогоУчета Тогда
					НоваяСтрока.СуммаУпр = Выборка.СуммаВВалютеСертификата;
				Иначе
					КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.СуммаВВалютеСертификата, ВалютаУправленческогоУчета, ДокОст.Дата);
					НоваяСтрока.СуммаУпр = Окр(Выборка.СуммаВВалютеСертификата * КоэффициентПересчета, 2, 1);
				КонецЕсли;
				
				Если ДокОст.ПодарочныеСертификаты.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					ДокОст = Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
				КонецЕсли;
			КонецЦикла;
			Если ДокОст.ПодарочныеСертификаты.Количество() > 0 Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЕсли;
		КонецЦикла;  //Пока Выборка.СледующийПоЗначениюПоля("ВидПодарочногоСертификата") Цикл
	КонецЦикла;//Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковОПродажахЗаПрошлыеПериоды",Перечисления.ХозяйственныеОперации.ВводОстатковПодарочныхСертификатов);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПрочиеРасходы()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ТабРег.Организация КАК Организация,
	|	ТабРег.Подразделение КАК Подразделение,
	|	ТабРег.СтатьяРасходов КАК СтатьяРасходов,
	|	ТабРег.АналитикаРасходов КАК АналитикаРасходов,
	|	Сумма(ТабРег.СуммаОстаток) КАК Сумма,
	|	Сумма(ТабРег.СуммаУпрОстаток) КАК СуммаУпр,
	|	Сумма(ТабРег.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	Сумма(ТабРег.СуммаРеглОстаток) КАК СуммаРегл,
	|	Сумма(ТабРег.ПостояннаяРазницаОстаток) КАК СуммаПР,
	|	Сумма(ТабРег.ВременнаяРазницаОстаток) КАК СуммаВР,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПрочихРасходов) КАК ХозяйственнаяОперация
	|ИЗ РегистрНакопления.ПрочиеРасходы.Остатки(&ГраницаОст) КАК ТабРег
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.СтатьяРасходов,
	|	ТабРег.АналитикаРасходов
	|ИМЕЮЩИЕ Сумма(ТабРег.СуммаОстаток) > 0
	|	ИЛИ Сумма(ТабРег.СуммаУпрОстаток) > 0
	|	ИЛИ Сумма(ТабРег.СуммаБезНДСОстаток) > 0
	|	ИЛИ Сумма(ТабРег.СуммаРеглОстаток) > 0
	|	ИЛИ Сумма(ТабРег.ПостояннаяРазницаОстаток) > 0
	|	ИЛИ Сумма(ТабРег.ВременнаяРазницаОстаток) > 0
	|УПОРЯДОЧИТЬ ПО Организация, Подразделение";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			ДокОст = Документы.ВводОстатковПрочиеРасходы.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			ДокОст.ОтражатьСебестоимость = Истина;
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДокОст.ПрочиеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.СуммаНДС = Макс(НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС, 0);
				Если НоваяСтрока.СуммаНДС > 0 И НоваяСтрока.СуммаРегл > 0 
					И НоваяСтрока.Сумма > 0 Тогда
					НоваяСтрока.НДСРегл = Окр(НоваяСтрока.СуммаНДС * НоваяСтрока.СуммаРегл / НоваяСтрока.Сумма, 0);
				КонецЕсли;
				ЗаполнитьСтавкуНДСВСтрокеДокумента(НоваяСтрока);
				// Без суммы документ не проведется.
				Если НоваяСтрока.Сумма = 0 Тогда
					НоваяСтрока.Сумма = 0.01;
				КонецЕсли;
			КонецЦикла;
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковПрочиеРасходы", 
									Перечисления.ХозяйственныеОперации.ВводОстатковПрочихРасходов);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковФинансовыйРезультат()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабРег.Организация КАК Организация,
	|	ТабРег.Подразделение КАК Подразделение,
	|	ТабРег.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТабРег.СтатьяРасходов КАК СтатьяРасходов,
	|	ТабРег.СтатьяДоходов КАК СтатьяДоходов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, Месяц) КАК ДатаОтражения,
	|	СУММА(ТабРег.ДоходыОборот) КАК СуммаДоходов,
	|	СУММА(ТабРег.РасходыОборот) КАК СуммаРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковФинансовогоРезультатаЗаПрошлыеПериоды) КАК ХозяйственнаяОперация
	|ИЗ
	|	РегистрНакопления.ФинансовыеРезультаты.Обороты(, &ГраницаОст, Месяц, ) КАК ТабРег
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.НаправлениеДеятельности,
	|	ТабРег.СтатьяРасходов,
	|	ТабРег.СтатьяДоходов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, Месяц)
	|ИМЕЮЩИЕ
	|	(СУММА(ТабРег.ДоходыОборот) > 0
	|		ИЛИ СУММА(ТабРег.РасходыОборот) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Подразделение";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			ДокОст = Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
			Пока Выборка.Следующий() Цикл
				Если Выборка.СуммаДоходов > 0 Тогда
					НоваяСтрока = ДокОст.ФинансовыйРезультатДоходы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;
				Если Выборка.СуммаРасходов > 0 Тогда
					НоваяСтрока = ДокОст.ФинансовыйРезультатРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковОПродажахЗаПрошлыеПериоды", 
									Перечисления.ХозяйственныеОперации.ВводОстатковФинансовогоРезультатаЗаПрошлыеПериоды);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПродажи()
	//Оптовые продажи

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ТабРег.Подразделение КАК Подразделение,
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ЕстьNULL(РегистрАналитикаУчетаНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕстьNULL(РегистрАналитикаУчетаНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ВЫРАЗИТЬ(РегистрАналитикаУчетаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ТабРег.Склад КАК Справочник.Склады) КАК Склад,
	|	ТабРег.Соглашение КАК Соглашение,
	|	ТабРег.Договор КАК Договор,
	|	ТабРег.Менеджер КАК Менеджер,
	|	ТабРег.ВидЗапасов КАК ВидЗапасов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, МЕСЯЦ) КАК ДатаОтражения,
	|	СУММА(ТабРег.КоличествоОборот) КАК Количество,
	|	СУММА(ТабРег.СуммаВыручкиОборот) КАК Сумма,
	|	СУММА(ТабРег.СуммаВыручкиБезНДСОборот) КАК СуммаБезНДС,
	|	СУММА(ТабРег.СуммаВыручкиРеглОборот) КАК СуммаРегл,
	|	СУММА(ТабРег.СуммаВыручкиСНДСРеглОборот) КАК СуммаСНДСРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковОптовыхПродажЗаПрошлыеПериоды) КАК ХозяйственнаяОперация
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, &ГраницаОст, Регистратор,
	|		Склад В (ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.Склады)) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО ТабРег.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	|	ПО ТабРег.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	|ГДЕ
	|	НЕ ТабРег.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И ВЫРАЗИТЬ(ТабРег.Склад КАК Справочник.Склады) <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|	ТабРег.Подразделение,
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)),
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	ЕстьNULL(РегистрАналитикаУчетаНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕстьNULL(РегистрАналитикаУчетаНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|	ВЫРАЗИТЬ(РегистрАналитикаУчетаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).СтавкаНДС,
	|	ТабРег.Склад,
	|	ТабРег.Соглашение,
	|	ТабРег.Договор,
	|	ТабРег.Менеджер,
	|	ТабРег.ВидЗапасов,
	|	КОНЕЦПЕРИОДА(ТабРег.Период, МЕСЯЦ)
	|ИМЕЮЩИЕ
	|	(СУММА(ТабРег.КоличествоОборот) > 0
	|		ИЛИ СУММА(ТабРег.СуммаВыручкиОборот) > 0
	|		ИЛИ СУММА(ТабРег.СуммаВыручкиРеглОборот) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|	ТабРег.Подразделение,
	|	ТабРег.Склад,
	|	ТабРег.Менеджер,
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)),
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	|	ТабРег.Соглашение,
	|	ТабРег.Договор
	|	";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Менеджер") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("Контрагент") Цикл
							Пока Выборка.СледующийПоЗначениюПоля("Соглашение") Цикл
								Пока Выборка.СледующийПоЗначениюПоля("Договор") Цикл
									ДокОст = Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.СоздатьДокумент();
									ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
									Пока Выборка.Следующий() Цикл
										НоваяСтрока = ДокОст.ОптовыеПродажи.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
										НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
										НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
										НоваяСтрока.НДСРегл = Выборка.СуммаСНДСРегл - НоваяСтрока.СуммаРегл;
										Если НоваяСтрока.Количество > 0 Тогда
											НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2);
										КонецЕсли;
										ЗаполнитьСтавкуНДСВСтрокеДокумента(НоваяСтрока);
										
										Если ДокОст.ОптовыеПродажи.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
											//Запишем документ ввода остатков и создадим новый
											ДокОст.Записать(РежимЗаписиДокумента.Запись);
											КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
											
											ДокОст = Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.СоздатьДокумент();
											ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
										КонецЕсли;

									КонецЦикла;
									Если ДокОст.ОптовыеПродажи.Количество() > 0 Тогда
										ДокОст.Записать(РежимЗаписиДокумента.Запись);
										КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
									КонецЕсли;
								КонецЦикла; //Договор
							КонецЦикла; //Соглашение
						КонецЦикла; //Контрагент
					КонецЦикла; //Партнер
				КонецЦикла; //Менеджер
			КонецЦикла; //Склад
		КонецЦикла; //Подразделение
	КонецЦикла; //Организация
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковОПродажахЗаПрошлыеПериоды", 
									Перечисления.ХозяйственныеОперации.ВводОстатковОптовыхПродажЗаПрошлыеПериоды);
	КонецЕсли;
	//Розничные продажи
	ИспользуютсяКартыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	Если НЕ ИспользуютсяКартыЛояльности Тогда
		Возврат;
	КонецЕсли;
	
	// Розничные продажи.
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Запрос.Текст = "ВЫБРАТЬ
	|	Максимум(Владелец.ДатаНачалаДействия) КАК ДатаНачала,
	|	Партнер,
	|	Контрагент
	|ПОМЕСТИТЬ КартыПартнеров
	|ИЗ Справочник.КартыЛояльности
	|ГДЕ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКартЛояльности.Действует)
	|	И Владелец.ДатаНачалаДействия <= &ДатаОст
	|	И Владелец.Персонализирована
	|СГРУППИРОВАТЬ ПО
	|	Партнер,
	|	Контрагент
	|;
	|ВЫБРАТЬ
	|	КартыПартнеров.Партнер,
	|	КартыПартнеров.Контрагент,
	|	КартыЛояльности.Ссылка КАК КартаЛояльности,
	|	КартыЛояльности.Штрихкод,
	|	КартыЛояльности.МагнитныйКод,
	|	КартыЛояльности.Владелец КАК ВидКартыЛояльности
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ КартыПартнеров
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.КартыЛояльности КАК КартыЛояльности
	|ПО КартыПартнеров.Партнер = КартыЛояльности.Партнер
	|	И КартыПартнеров.Контрагент = КартыЛояльности.Контрагент
	|	И КартыПартнеров.ДатаНачала = КартыЛояльности.Владелец.ДатаНачалаДействия
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики  КАК КлючАналитики,
	|	ЕстьNULL(РегистрАналитикаУчетаПоПартнерам.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))  КАК Организация,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	КартыЛояльности.Штрихкод КАК Штрихкод,
	|	КартыЛояльности.МагнитныйКод КАК МагнитныйКод,
	|	КартыЛояльности.КартаЛояльности КАК КартаЛояльности,
	|	КартыЛояльности.ВидКартыЛояльности КАК ВидКартыЛояльности
	|ПОМЕСТИТЬ ТабАналитикиУчетаПоПартнерам
	|ИЗ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КартыЛояльности КАК КартыЛояльности
	|	ПО РегистрАналитикаУчетаПоПартнерам.Партнер = КартыЛояльности.Партнер
	|		И РегистрАналитикаУчетаПоПартнерам.Контрагент = КартыЛояльности.Контрагент";
	
	// Заполнение временных таблиц.
	Запрос.Выполнить();
	
	// Поиск самой ранней даты
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Дата
	|ИЗ Документ.ОтчетОРозничныхПродажах
	|ГДЕ Дата <= &ДатаОст
	|УПОРЯДОЧИТЬ ПО Дата ВОЗР";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаНачалаАнализа = НачалоМесяца(Выборка.Дата);
	Иначе
		Возврат;
	КонецЕсли;


	ТекстЗапроса = "ВЫБРАТЬ 
	|	ТабАналитикиУчетаПоПартнерам.Организация КАК Организация,
	|	ТабРег.Подразделение КАК Подразделение,
	|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ТабРег.Склад КАК Справочник.Склады) КАК Склад,
	|	ТабРег.Менеджер КАК Менеджер,
	|	ТабРег.ВидЗапасов КАК ВидЗапасов,
	|	&КонецПериода КАК ДатаОтражения,
	|	ТабАналитикиУчетаПоПартнерам.Партнер,
	|	ТабАналитикиУчетаПоПартнерам.Контрагент,
	|	ТабАналитикиУчетаПоПартнерам.Штрихкод,
	|	ТабАналитикиУчетаПоПартнерам.МагнитныйКод,
	|	ТабАналитикиУчетаПоПартнерам.КартаЛояльности,
	|	ТабАналитикиУчетаПоПартнерам.ВидКартыЛояльности,
	|	СУММА(ТабРег.КоличествоОборот) КАК Количество,
	|	СУММА(ТабРег.СуммаВыручкиОборот) КАК Сумма,
	|	СУММА(ТабРег.СуммаВыручкиБезНДСОборот) КАК СуммаБезНДС,
	|	СУММА(ТабРег.СуммаВыручкиРеглОборот) КАК СуммаРегл,
	|	СУММА(ТабРег.СуммаВыручкиСНДСРеглОборот) КАК СуммаСНДСРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковРозничныхПродажЗаПрошлыеПериоды) КАК ХозяйственнаяОперация
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода,, 
	|		АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ ТабАналитикиУчетаПоПартнерам)
	|		И Склад В (ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ Справочник.Склады)) КАК ТабРег
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабАналитикиУчетаПоПартнерам КАК ТабАналитикиУчетаПоПартнерам
	|	ПО ТабРег.АналитикаУчетаПоПартнерам = ТабАналитикиУчетаПоПартнерам.КлючАналитики
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	|	ПО ТабРег.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&КонецПериода) КАК СтавкиНДСНоменклатуры
	|	ПО РегистрАналитикаУчетаНоменклатуры.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		И ТабАналитикиУчетаПоПартнерам.Организация.СтранаРегистрации = СтавкиНДСНоменклатуры.Страна
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&КонецПериода) КАК ОсновныеСтавкиНДС
	|	ПО ТабАналитикиУчетаПоПартнерам.Организация.СтранаРегистрации = ОсновныеСтавкиНДС.Страна
	|СГРУППИРОВАТЬ ПО
	|	ТабАналитикиУчетаПоПартнерам.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	РегистрАналитикаУчетаНоменклатуры.Номенклатура,
	|	РегистрАналитикаУчетаНоменклатуры.Характеристика,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))),
	|	ТабАналитикиУчетаПоПартнерам.Партнер,
	|	ТабАналитикиУчетаПоПартнерам.Контрагент,
	|	ТабАналитикиУчетаПоПартнерам.Штрихкод,
	|	ТабАналитикиУчетаПоПартнерам.МагнитныйКод,
	|	ТабАналитикиУчетаПоПартнерам.КартаЛояльности,
	|	ТабАналитикиУчетаПоПартнерам.ВидКартыЛояльности,
	|	ТабРег.Склад,
	|	ТабРег.Менеджер,
	|	ТабРег.ВидЗапасов
	|ИМЕЮЩИЕ
	|	(СУММА(ТабРег.КоличествоОборот) > 0
	|		ИЛИ СУММА(ТабРег.СуммаВыручкиОборот) > 0
	|		ИЛИ СУММА(ТабРег.СуммаВыручкиРеглОборот) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабАналитикиУчетаПоПартнерам.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.Склад,
	|	ТабРег.Менеджер
	|	";
	
	
	ДатаКонцаАнализа = КонецМесяца(ДатаНачалаАнализа);
	КоличествоСформированныхДокументов = 1;
	Пока ДатаКонцаАнализа <= КонецДня(ДатаСверткиИБ) Цикл
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачалаАнализа);
		Запрос.УстановитьПараметр("КонецПериода", ДатаКонцаАнализа);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ДатаНачалаАнализа = ДобавитьМесяц(ДатаНачалаАнализа, 1);
			ДатаКонцаАнализа = КонецМесяца(ДатаНачалаАнализа);
			Продолжить;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Менеджер") Цикл
						ДокОст = Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.СоздатьДокумент();
						ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
						Пока Выборка.Следующий() Цикл
							НоваяСтрока = ДокОст.РозничныеПродажи.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
							НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
							НоваяСтрока.НДСРегл = Выборка.СуммаСНДСРегл - НоваяСтрока.СуммаРегл;
							Если НоваяСтрока.Количество > 0 Тогда
								НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2);
							КонецЕсли;
							ЗаполнитьСтавкуНДСВСтрокеДокумента(НоваяСтрока);
							Если ДокОст.РозничныеПродажи.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
								//Запишем документ ввода остатков и создадим новый
								ДокОст.Записать(РежимЗаписиДокумента.Запись);
								КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
								
								ДокОст = Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.СоздатьДокумент();
								ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
							КонецЕсли; 
						КонецЦикла;
						Если ДокОст.РозничныеПродажи.Количество() > 0 Тогда
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
						КонецЕсли;
					КонецЦикла; //Менеджер
				КонецЦикла; //Склад
			КонецЦикла; //Подразделение
		КонецЦикла; //Организация
		ДатаНачалаАнализа = ДобавитьМесяц(ДатаНачалаАнализа, 1);
		ДатаКонцаАнализа = КонецМесяца(ДатаНачалаАнализа);
	КонецЦикла;

	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковОПродажахЗаПрошлыеПериоды", 
									Перечисления.ХозяйственныеОперации.ВводОстатковРозничныхПродажЗаПрошлыеПериоды);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьВозвратыТоваровОтКлиентов()
	// Обработке подлежат возвраты от клиентов после даты свертки, 
	// документ реализации до даты свертки и себестоимость по данным документа продажи.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Возврат.Ссылка КАК ДокументВозврат,
	|	Возврат.ДокументРеализации КАК ДокументРеализации,
	|	Возврат.КодСтроки КАК КодСтроки,
	|	Возврат.Номенклатура КАК Номенклатура,
	|	Возврат.Характеристика КАК Характеристика, 
	|	Возврат.Количество КАК Количество
	|ПОМЕСТИТЬ ВозвратыКОбработке
	|ИЗ Документ.ВозвратТоваровОтКлиента.Товары КАК Возврат
	|ГДЕ Возврат.Ссылка.Дата > &ДатаОст
	|	И Возврат.СпособОпределенияСебестоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимости.ИзДокументаПродажи)
	|	И (ВЫРАЗИТЬ(Возврат.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).Дата < &ДатаОст
	|		ИЛИ ВЫРАЗИТЬ(Возврат.ДокументРеализации КАК Документ.ОтчетОРозничныхПродажах).Дата < &ДатаОст)
	|	И (ВЫРАЗИТЬ(Возврат.ДокументРеализации КАК Документ.РеализацияТоваровУслуг) <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ВЫРАЗИТЬ(Возврат.ДокументРеализации КАК Документ.ОтчетОРозничныхПродажах) <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка))
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Свод.ДокументВозврат,
	|	Свод.ДокументРеализации,
	|	Свод.КодСтроки,
	|	Свод.Номенклатура,
	|	Свод.Характеристика,
	|	Свод.Количество,
	|	ВЫБОР КОГДА Свод.КоличествоПродажа = 0 ИЛИ Свод.СуммаПродажа = 0 ТОГДА 1
	|	ИНАЧЕ 
	|		Свод.СуммаПродажа / Свод.КоличествоПродажа
	|	КОНЕЦ КАК ЦенаСебестоимость,
	|	ВЫБОР КОГДА Свод.КоличествоПродажа = 0 ИЛИ Свод.СуммаБезНДСПродажа = 0 ТОГДА 1
	|	ИНАЧЕ 
	|		Свод.СуммаБезНДСПродажа / Свод.КоличествоПродажа
	|	КОНЕЦ КАК ЦенаСебестоимостьБезНДС,
	|	ВЫБОР КОГДА Свод.КоличествоПродажа = 0 ИЛИ Свод.СуммаРеглПродажа = 0 ТОГДА 1
	|	ИНАЧЕ 
	|		Свод.СуммаРеглПродажа / Свод.КоличествоПродажа
	|	КОНЕЦ КАК ЦенаСебестоимостьРегл
	|ИЗ
	|(	ВЫБРАТЬ
	|		Возвраты.ДокументВозврат,
	|		Возвраты.ДокументРеализации,
	|		Возвраты.КодСтроки,
	|		Возвраты.Номенклатура,
	|		Возвраты.Характеристика,
	|		МАКСИМУМ(Возвраты.Количество) КАК Количество,
	|		СУММА(ЕстьNULL(Себестоимость.Количество,0)) КАК КоличествоПродажа,
	|		СУММА(ЕстьNULL(Себестоимость.Стоимость,0)) КАК СуммаПродажа,
	|		СУММА(ЕстьNULL(Себестоимость.СтоимостьБезНДС,0)) КАК СуммаБезНДСПродажа,
	|		СУММА(ЕстьNULL(Себестоимость.СтоимостьРегл,0)) КАК СуммаРеглПродажа
	|	ИЗ ВозвратыКОбработке КАК Возвраты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК Себестоимость
	|	ПО Возвраты.ДокументРеализации = Себестоимость.Регистратор
	|		И Возвраты.Номенклатура = Себестоимость.АналитикаУчетаНоменклатуры.Номенклатура
	|		И Возвраты.Характеристика = Себестоимость.АналитикаУчетаНоменклатуры.Характеристика
	|	СГРУППИРОВАТЬ ПО
	|		Возвраты.ДокументВозврат,
	|		Возвраты.ДокументРеализации,
	|		Возвраты.КодСтроки,
	|		Возвраты.Номенклатура,
	|		Возвраты.Характеристика
	|) КАК Свод
	|УПОРЯДОЧИТЬ ПО
	|	Свод.ДокументВозврат";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументВозврат") Цикл
		ДокОст = Выборка.ДокументВозврат.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВозвратПроведен = ДокОст.Проведен;
		ДокументИзменен = Ложь;
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска = Новый Структура("КодСтроки, Номенклатура, Характеристика");
			// Страховка на случай дублей строк с одинаковыми кодами и с разными способами определения.
			СтруктураПоиска.Вставить("СпособОпределенияСебестоимости", Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			СтрокиТовары = ДокОст.Товары.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТовары.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				СтрокаТовары.Себестоимость = Окр(СтрокаТовары.Количество * Выборка.ЦенаСебестоимость, 2);
				СтрокаТовары.СебестоимостьБезНДС = Окр(СтрокаТовары.Количество * Выборка.ЦенаСебестоимостьБезНДС, 2);
				СтрокаТовары.СебестоимостьРегл = Окр(СтрокаТовары.Количество * Выборка.ЦенаСебестоимостьРегл, 2);
				СтрокаТовары.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.Вручную;
				ДокументИзменен = Истина;
			КонецЦикла;
		КонецЦикла;
		Если ДокументИзменен Тогда
			ДокОст.Комментарий = Комментарий_СкорректированСверткойБазы;
			ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
			// Проведение будет выполнено позднее, при проведении документов ввода остатков.
			Если ВозвратПроведен Тогда
				ДокОст.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Возвраты от клиентов с расчетом себестоимости по документу продажи';
							|en = 'Returns from customers with cost calculation by the sales document are processed'"));
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковБонусныеБаллы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|ТабРег.Партнер КАК Партнер,
	|ТабРег.НачисленоОстаток КАК Начислено,
	|ТабРег.КСписаниюОстаток КАК КСписанию
	|ИЗ РегистрНакопления.БонусныеБаллы.Остатки(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО ТабРег.БонуснаяПрограммаЛояльности";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаПрограмма = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПрограмма.Следующий() Цикл
		ДокОст = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
		ДокОст.Дата = КонецДня(ДатаСверткиИБ);
		ДокОст.Комментарий = Комментарий_СформированСверткойБазы+" ["+КоличествоСформированныхДокументов+"]";
		ЗаполнитьЗначенияСвойств(ДокОст, ВыборкаПрограмма);
		ДокОст.ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Начисление;

		ВыборкаПартнеры = ВыборкаПрограмма.Выбрать();
		Пока ВыборкаПартнеры.Следующий() Цикл
			Баллы = ВыборкаПартнеры.Начислено - ВыборкаПартнеры.КСписанию;
			Если Баллы <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаБонусы = ДокОст.Начисление.Добавить();
			СтрокаБонусы.Партнер = ВыборкаПартнеры.Партнер;
			СтрокаБонусы.Баллы = Баллы;
		КонецЦикла;
		КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("НачислениеИСписаниеБонусныхБаллов", 
									"Начисление");
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПрочиеАктивыПассивы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Организация КАК Организация,
	|ТабРег.Подразделение КАК Подразделение,
	|ТабРег.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|ТабРег.Статья КАК Статья,
	|ТабРег.Аналитика КАК Аналитика,
	|ТабРег.СуммаОстаток КАК Сумма
	|ИЗ РегистрНакопления.ПрочиеАктивыПассивы.Остатки(&ГраницаОст) КАК ТабРег
	|ГДЕ ТабРег.СуммаОстаток <> 0
	|ИТОГИ ПО Организация, Подразделение";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделение.Следующий() Цикл
			ДокОст = Документы.ВводОстатковПрочихАктивовПассивов.СоздатьДокумент();
			ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПрочихАктивовПассивов;
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаПодразделение, Ложь);
            ДокОст.ОтражатьВОперативномУчете = Истина;
			Выборка = ВыборкаПодразделение.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрАП = ДокОст.ПрочиеАктивыПассивы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрАП, Выборка);
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковПрочихАктивовПассивов", 
									СокрЛП(Перечисления.ХозяйственныеОперации.ВводОстатковПрочихАктивовПассивов));
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковТоварыПринятые()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабТоварыОрг.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ТабТоварыОрг.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ТабТоварыОрг.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|ТабТоварыОрг.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|ТабТоварыОрг.Организация КАК Организация,
	|ТабТоварыОрг.НомерГТД КАК НомерГТД,
	|ТабТоварыОрг.ВидЗапасов.Контрагент.Партнер КАК Партнер,
	|ТабТоварыОрг.ВидЗапасов.Контрагент КАК Контрагент,
	|ТабТоварыОрг.ВидЗапасов.Договор.ВалютаВзаиморасчетов КАК Валюта,
	|ТабТоварыОрг.ВидЗапасов.Договор КАК Договор,
	|ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|Сумма(ТабТоварыОрг.КоличествоОстаток) КАК КоличествоПоОрганизации,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьЗабалансоваяОстаток, 0)) КАК Сумма,
	|Сумма(ЕстьNULL(ТабСтоимость.СтоимостьЗабалансоваяРеглОстаток, 0)) КАК СуммаРегл,
	|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи) КАК ХозяйственнаяОперация
	|ИЗ РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст, 
	|								ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|					И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)) КАК ТабТоварыОрг
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, 
	|				РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|				ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)) КАК ТабСтоимость
	|ПО  ТабТоварыОрг.АналитикаУчетаНоменклатуры = ТабСтоимость.АналитикаУчетаНоменклатуры
	|	И ТабТоварыОрг.Организация = ТабСтоимость.Организация
	|	И (ТабТоварыОрг.ВидЗапасов = ТабСтоимость.ВидЗапасов)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&ДатаОст) КАК СтавкиНДСНоменклатуры
	|ПО ТабТоварыОрг.АналитикаУчетаНоменклатуры.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|	И ТабТоварыОрг.Организация.СтранаРегистрации = СтавкиНДСНоменклатуры.Страна
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&ДатаОст) КАК ОсновныеСтавкиНДС
	|	ПО ТабТоварыОрг.Организация.СтранаРегистрации = ОсновныеСтавкиНДС.Страна
	|СГРУППИРОВАТЬ ПО
	|ТабТоварыОрг.АналитикаУчетаНоменклатуры.Номенклатура,
	|ТабТоварыОрг.АналитикаУчетаНоменклатуры.Характеристика,
	|ТабТоварыОрг.АналитикаУчетаНоменклатуры.Серия,
	|ТабТоварыОрг.АналитикаУчетаНоменклатуры.МестоХранения,
	|ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))),
	|ТабТоварыОрг.Организация,
	|ТабТоварыОрг.НомерГТД,
	|ТабТоварыОрг.ВидЗапасов.Контрагент.Партнер,
	|ТабТоварыОрг.ВидЗапасов.Контрагент,
	|ТабТоварыОрг.ВидЗапасов.Договор.ВалютаВзаиморасчетов,
	|ТабТоварыОрг.ВидЗапасов.Договор
	|ИМЕЮЩИЕ Сумма(ТабТоварыОрг.КоличествоОстаток) > 0 
	|УПОРЯДОЧИТЬ ПО Организация, Склад, Партнер, Контрагент, Договор";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	КоличествоСформированныхДокументов = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
				// Вид цены первый попавший либо из последнего документа, либо из справочника.
				ЗапросВидЦены = Новый Запрос;
				ЗапросВидЦены.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|Ссылка.ВидЦеныПоставщика КАК ВидЦены
				|ИЗ Документ.ПриемкаТоваровНаХранение
				|ГДЕ Дата < &ДатаОст И Проведен И Партнер = &Партнер";
				ЗапросВидЦены.УстановитьПараметр("Партнер", Выборка.Партнер);
				ЗапросВидЦены.УстановитьПараметр("ДатаОст", НачалоДня(ДатаСверткиИБ)-1);
				ВыборкаВидЦены = ЗапросВидЦены.Выполнить().Выбрать();
				Если ВыборкаВидЦены.Следующий() Тогда
					ВидЦеныПоставщика = ВыборкаВидЦены.ВидЦены;
				Иначе
					ВыборкаВидЦены = Справочники.ВидыЦенПоставщиков.Выбрать(,Выборка.Партнер);
					ВыборкаВидЦены.Следующий();
					ВидЦеныПоставщика = ВыборкаВидЦены.Ссылка;
				КонецЕсли;

				Пока Выборка.СледующийПоЗначениюПоля("Контрагент") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Договор") Цикл
						ДокОст = Документы.ПриемкаТоваровНаХранение.СоздатьДокумент();
						ДокОст.Дата = КонецДня(ДатаСверткиИБ);
						ДокОст.Комментарий = Комментарий_СформированСверткойБазы+" ["+КоличествоСформированныхДокументов+"]";
						ДокОст.Автор =  ПользователиКлиентСервер.ТекущийПользователь();
						ЗаполнитьЗначенияСвойств(ДокОст, Выборка);

						ДокОст.ВидЦеныПоставщика = ВидЦеныПоставщика;
						Пока Выборка.Следующий() Цикл
							НоваяСтрока = ДокОст.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							НоваяСтрока.Количество = Выборка.КоличествоПоОрганизации;
							НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
							Цена = 0; 
							ЦенаРегл = 0;
							Если Выборка.Сумма > 0 Тогда
								Цена = Окр(Выборка.Сумма / Выборка.КоличествоПоОрганизации, 2);
								Если Выборка.Валюта = ВалютаУправленческогоУчета Тогда
									НоваяСтрока.Цена = Цена;
								КонецЕсли;
							КонецЕсли;
							Если Выборка.СуммаРегл > 0 Тогда
								ЦенаРегл = Окр(Выборка.СуммаРегл / Выборка.КоличествоПоОрганизации, 2);
								Если Выборка.Валюта = ВалютаРегламентированногоУчета Тогда
									НоваяСтрока.Цена = ЦенаРегл;
								КонецЕсли;
							КонецЕсли;
							Если НоваяСтрока.Цена = 0 Тогда
								КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ВалютаУправленческогоУчета, Выборка.Валюта, ДокОст.Дата);
								НоваяСтрока.Цена = Окр(Цена * КоэффициентПересчета, 2);
							КонецЕсли;
							НоваяСтрока.Сумма = Окр(НоваяСтрока.Цена * НоваяСтрока.Количество, 2);
						КонецЦикла;  //Пока Выборка.Следующий() Цикл
						
						Если ДокОст.Товары.Количество() > 0 Тогда
							ДокОст.СуммаДокумента = ДокОст.Товары.Итог("Сумма");
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
						КонецЕсли;
					КонецЦикла; //Договор
				КонецЦикла; //Контрагент
			КонецЦикла; // партнер
		КонецЦикла; //Склад
	КонецЦикла; //Организация
	ВывестиСообщениеСформированыДокументы("ПриемкаТоваровНаХранение");

КонецПроцедуры

Процедура ОбработатьОстаткиТоваровУПартнеров()
	// 1. Ситуация документ "Приобретение товаров услуг" до свертки, "Поступление товаров на склад" после свертки.
	// Документ ПоступлениеТоваров, закрывающий положительный остаток по регистру, удаляется.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|ЕстьNULL(ТабРегОбороты.Регистратор, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровНаСклад.ПустаяСсылка)) КАК ДокументПоступление,
	|ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ТабРег.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|ТабРег.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|ТабРег.ВидЗапасов КАК ВидЗапасов,
	|Сумма(ТабРег.КоличествоОстаток) КАК КоличествоПередано,
	|Сумма(ТабРегОбороты.КоличествоРасход) КАК КоличествоПоступило
	|ИЗ РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст, АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента)) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Обороты(&ГраницаОст,,Регистратор,АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента)) КАК ТабРегОбороты
	|ПО ТабРегОбороты.АналитикаУчетаНоменклатуры = ТабРег.АналитикаУчетаНоменклатуры 
	|	И ТабРегОбороты.ВидЗапасов = ТабРег.ВидЗапасов 
	|СГРУППИРОВАТЬ ПО
	|	ТабРегОбороты.Регистратор,
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	ТабРег.ВидЗапасов
	|ИМЕЮЩИЕ Сумма(ТабРег.КоличествоОстаток) > 0  И ТабРегОбороты.Регистратор ЕСТЬ НЕ NULL
	|УПОРЯДОЧИТЬ ПО 
	|	ЕстьNULL(ТабРегОбороты.Регистратор, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровНаСклад.ПустаяСсылка)),
	|	ТабРег.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТабРег.АналитикаУчетаНоменклатуры.Характеристика,
	|	ТабРег.АналитикаУчетаНоменклатуры.Назначение,
	|	ТабРег.АналитикаУчетаНоменклатуры.Серия,
	|	ТабРег.ВидЗапасов";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументПоступление") Цикл
		ДокОст = Выборка.ДокументПоступление.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ДокОст) <> Тип("ДокументОбъект.ПоступлениеТоваровНаСклад") Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрокТоварыКУдалению = Новый Массив;
		МассивСтрокСерииКУдалению = Новый Массив;

		ДокументИзменен = Ложь;
		Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Назначение") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ВидЗапасов") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
							КоличествоТовары = Выборка.КоличествоПередано;
							КоличествоСерии = Выборка.КоличествоПередано;
							
							ПараметрыПоискаСтрок = Новый Структура();
							ПараметрыПоискаСтрок.Вставить("Номенклатура");
							ПараметрыПоискаСтрок.Вставить("Характеристика");
							ПараметрыПоискаСтрок.Вставить("Серия");
							ПараметрыПоискаСтрок.Вставить("Назначение");
							ПараметрыПоискаСтрок.Вставить("ВидЗапасов");
							ЗаполнитьЗначенияСвойств(ПараметрыПоискаСтрок, Выборка);
							
							МассивСтрокТовары = ДокОст.Товары.НайтиСтроки(ПараметрыПоискаСтрок);
							Если МассивСтрокТовары.Количество() = 0 И ЗначениеЗаполнено(Выборка.Серия) Тогда
								// Попытка поиска без учета серии
								ПараметрыПоискаСтрок.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
								МассивСтрокТовары = ДокОст.Товары.НайтиСтроки(ПараметрыПоискаСтрок);
							КонецЕсли;
							СкорректироватьКоличествоВТЧДокумента(МассивСтрокТовары, КоличествоТовары, МассивСтрокТоварыКУдалению, ДокументИзменен);
							Если ДокОст.Серии.Количество() > 0 И ЗначениеЗаполнено(Выборка.Серия) Тогда
								ПараметрыПоискаСтрок = Новый Структура();
								ПараметрыПоискаСтрок.Вставить("Номенклатура");
								ПараметрыПоискаСтрок.Вставить("Характеристика");
								ПараметрыПоискаСтрок.Вставить("Серия");
								ПараметрыПоискаСтрок.Вставить("Назначение");
								МассивСтрокСерии = ДокОст.Серии.НайтиСтроки(ПараметрыПоискаСтрок);
								СкорректироватьКоличествоВТЧДокумента(МассивСтрокСерии, КоличествоСерии, МассивСтрокСерииКУдалению, ДокументИзменен);
							КонецЕсли;
						КонецЦикла;  //Серия
					КонецЦикла;//ВидЗапасов
				КонецЦикла; //Назначение
			КонецЦикла; //Характеристика
		КонецЦикла; //Номенклатура
		Для Каждого СтрокаТовары Из МассивСтрокТоварыКУдалению Цикл
			ДокОст.Товары.Удалить(СтрокаТовары);
			ДокументИзменен = Истина;
		КонецЦикла;
		Для Каждого СтрокаСерии Из МассивСтрокСерииКУдалению Цикл
			ДокОст.Серии.Удалить(СтрокаСерии);
			ДокументИзменен = Истина;
		КонецЦикла;
		Если ДокументИзменен Тогда
			ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
			Если ДокОст.Товары.Количество() = 0 Тогда
				// Документ можно удалить целиком.
				ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокОст.Комментарий = Комментарий_СкорректированСверткойБазы;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// 2. Ситуация документ "Поступление товаров на склад" до свертки, "Приобретение товаров услуг" после свертки.
	// Документ "Поступление товаров на склад" переносится в дату свертки, корректируется в соответствии с остатками.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|ЕстьNULL(ТабРегОбороты.Регистратор, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровНаСклад.ПустаяСсылка)) КАК ДокументПоступление,
	|ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|ТабРег.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|ТабРег.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|ТабРег.ВидЗапасов КАК ВидЗапасов,
	|Сумма(ТабРег.КоличествоОстаток) КАК КоличествоПередано,
	|Сумма(ТабРегОбороты.КоличествоРасход) КАК КоличествоПоступило
	|ИЗ РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаОст,АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента)) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Обороты(,&ГраницаОст,Регистратор,АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента)) КАК ТабРегОбороты
	|ПО ТабРегОбороты.АналитикаУчетаНоменклатуры = ТабРег.АналитикаУчетаНоменклатуры 
	|	И ТабРегОбороты.ВидЗапасов = ТабРег.ВидЗапасов 
	|СГРУППИРОВАТЬ ПО
	|	ТабРегОбороты.Регистратор,
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	ТабРег.ВидЗапасов
	|ИМЕЮЩИЕ Сумма(ТабРег.КоличествоОстаток) < 0  И ТабРегОбороты.Регистратор ЕСТЬ НЕ NULL
	|УПОРЯДОЧИТЬ ПО 
	|	ЕстьNULL(ТабРегОбороты.Регистратор, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровНаСклад.ПустаяСсылка)),
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	ТабРег.ВидЗапасов
	|";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументПоступление") Цикл
		ДокОст = Выборка.ДокументПоступление.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ДокОст) <> Тип("ДокументОбъект.ПоступлениеТоваровНаСклад") Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрокТоварыКУдалению = Новый Массив;
		МассивСтрокСерииКУдалению = Новый Массив;

		ДокументИзменен = Ложь;
		Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Назначение") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ВидЗапасов") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
							КоличествоТовары = (-1) * Выборка.КоличествоПередано;
							КоличествоСерии = (-1) * Выборка.КоличествоПередано;
							
							ПараметрыПоискаСтрок = Новый Структура();
							ПараметрыПоискаСтрок.Вставить("Номенклатура");
							ПараметрыПоискаСтрок.Вставить("Характеристика");
							ПараметрыПоискаСтрок.Вставить("Серия");
							ПараметрыПоискаСтрок.Вставить("Назначение");
							ПараметрыПоискаСтрок.Вставить("ВидЗапасов");
							ЗаполнитьЗначенияСвойств(ПараметрыПоискаСтрок, Выборка);
							
							МассивСтрокТовары = ДокОст.Товары.НайтиСтроки(ПараметрыПоискаСтрок);
							Если МассивСтрокТовары.Количество() = 0 И ЗначениеЗаполнено(Выборка.Серия) Тогда
								// Попытка поиска без учета серии
								ПараметрыПоискаСтрок.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
								МассивСтрокТовары = ДокОст.Товары.НайтиСтроки(ПараметрыПоискаСтрок);
							КонецЕсли;
							СкорректироватьКоличествоВТЧДокумента(МассивСтрокТовары, КоличествоТовары, МассивСтрокТоварыКУдалению, ДокументИзменен);
							Если ДокОст.Серии.Количество() > 0 И ЗначениеЗаполнено(Выборка.Серия) Тогда
								ПараметрыПоискаСтрок = Новый Структура();
								ПараметрыПоискаСтрок.Вставить("Номенклатура");
								ПараметрыПоискаСтрок.Вставить("Характеристика");
								ПараметрыПоискаСтрок.Вставить("Серия");
								ПараметрыПоискаСтрок.Вставить("Назначение");
								МассивСтрокСерии = ДокОст.Серии.НайтиСтроки(ПараметрыПоискаСтрок);
								СкорректироватьКоличествоВТЧДокумента(МассивСтрокСерии, КоличествоСерии, МассивСтрокСерииКУдалению, ДокументИзменен);
							КонецЕсли;
						КонецЦикла;  //Серия
					КонецЦикла;//ВидЗапасов
				КонецЦикла; //Назначение
			КонецЦикла; //Характеристика
		КонецЦикла; //Номенклатура
		Для Каждого СтрокаТовары Из МассивСтрокТоварыКУдалению Цикл
			ДокОст.Товары.Удалить(СтрокаТовары);
			ДокументИзменен = Истина;
		КонецЦикла;
		Для Каждого СтрокаСерии Из МассивСтрокСерииКУдалению Цикл
			ДокОст.Серии.Удалить(СтрокаСерии);
			ДокументИзменен = Истина;
		КонецЦикла;
		Если ДокументИзменен Тогда
			ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
			Если ДокОст.Товары.Количество() = 0 Тогда
				// Документ можно удалить целиком.
				ДокОст.Комментарий = Комментарий_УдалитьПриСверткеБазы;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокОст.Комментарий = Комментарий_СкорректированСверткойБазы;
				ДокОст.Дата = ДатаСверткиИБ;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СообщениеСвертки(НСтр("ru = 'Обработаны Товары у партнеров';
							|en = 'Goods at partners are processed'"));
КонецПроцедуры

Функция ПреобразоватьСсылкуВПервичныйДокумент(ТолькоПоиск, ДокументСсылка, ДокументДата, ДокументНомер, ТипПервичногоДокумента = Неопределено, Сумма = 0, СтрокаРасчетов = Неопределено)
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТипСсылки = ТипЗнч(ДокументСсылка);
	Если ТипСсылки = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		Возврат ДокументСсылка;
	КонецЕсли;
	СведенияКонтрагентДоговор = Неопределено;
	СведенияВходящийДокумент = Неопределено;
	Если ТипПервичногоДокумента = Неопределено Тогда
		Если ТипСсылки = Тип("ДокументСсылка.АктВыполненныхРабот")
			Или ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
			Или ТипСсылки = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			Или ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионера")
			Или ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОСписании")
			Или ТипСсылки = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов")
			Или ТипСсылки = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
			Или ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации")
			Или ТипСсылки = Тип("ДокументСсылка.ЗаказКлиента")
			Или ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			Или ТипСсылки = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда

			ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			Или ТипСсылки = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
			Или ТипСсылки = Тип("ДокументСсылка.ЗаказПоставщику")
			Или ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			Или ТипСсылки = Тип("ДокументСсылка.ОтчетКомитенту")
			Или ТипСсылки = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
			Или ТипСсылки = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")
			Или ТипСсылки = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров") 
			// Интеркампани по умолчанию превращается в документ приобретения.
			// В специальных случаях тип первичного документа задается явно.
			Или ТипСсылки = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			Или ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
			//++ НЕ УТ
			Или ТипСсылки = Тип("ДокументСсылка.ПоступлениеУслугПоАренде")
			//++ Устарело_Переработка24
			Или ТипСсылки = Тип("ДокументСсылка.ПоступлениеОтПереработчика")
			//-- Устарело_Переработка24  
			//-- НЕ УТ
			Или ТипСсылки = Тип("ДокументСсылка.КорректировкаПриобретения")
			Или ТипСсылки = Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика") Тогда

			ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
			ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента;
		Иначе
			ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ВнутренняяНакладная; 
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовШапки = Новый Структура("Организация, ОрганизацияПолучатель, Контрагент, Партнер, Договор, Валюта, ВалютаВзаиморасчетов, ДатаВходящегоДокумента, НомерВходящегоДокумента, СуммаДокумента, СуммаВзаиморасчетов, ПорядокРасчетов, Подразделение, НалогообложениеНДС");
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовШапки,ДокументСсылка);
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовШапки.ДатаВходящегоДокумента) ИЛИ НЕ ЗначениеЗаполнено(СтруктураРеквизитовШапки.НомерВходящегоДокумента) Тогда
		СтруктураРеквизитовШапки.ДатаВходящегоДокумента = НачалоДня(ДокументДата);
		СтруктураРеквизитовШапки.НомерВходящегоДокумента = ДокументНомер;
	КонецЕсли;
	Если СтрокаРасчетов <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаРасчетов.Контрагент) Тогда
			СтруктураРеквизитовШапки.Контрагент = СтрокаРасчетов.Контрагент;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРасчетов.Партнер) Тогда
			СтруктураРеквизитовШапки.Партнер = СтрокаРасчетов.Партнер;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРасчетов.Договор) Тогда
			СтруктураРеквизитовШапки.Договор = СтрокаРасчетов.Договор;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРасчетов.ВалютаВзаиморасчетов) Тогда
			СтруктураРеквизитовШапки.ВалютаВзаиморасчетов = СтрокаРасчетов.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	// Особая логика для типа документа ПередачаТоваров.
	ЭтоПередачаТоваров = Ложь;
	Если ТипСсылки = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		ЭтоПередачаТоваров = Истина;
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовШапки.Контрагент) Тогда
			СтруктураРеквизитовШапки.Контрагент = СтруктураРеквизитовШапки.ОрганизацияПолучатель;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовШапки.Партнер) Тогда
			СтруктураРеквизитовШапки.Партнер = Справочники.Партнеры.НашеПредприятие;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовШапки.Договор = Неопределено Тогда
		СтруктураРеквизитовШапки.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

	ЗапросПД = Новый Запрос;
	ЗапросПД.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ Документ.ПервичныйДокумент
	|ГДЕ ТипПервичногоДокумента = &Тип И Организация = &Организация И Контрагент = &Контрагент И Договор = &Договор
	|	И ДатаВходящегоДокумента = &ДатаВходящегоДокумента И НомерВходящегоДокумента = &НомерВходящегоДокумента
	|	И Валюта = &Валюта";
	ЗапросПД.УстановитьПараметр("Тип", ТипПервичногоДокумента);
	ЗапросПД.УстановитьПараметр("Организация", СтруктураРеквизитовШапки.Организация);
	ЗапросПД.УстановитьПараметр("Контрагент", СтруктураРеквизитовШапки.Контрагент);
	ЗапросПД.УстановитьПараметр("Договор", СтруктураРеквизитовШапки.Договор);
	ЗапросПД.УстановитьПараметр("Валюта", СтруктураРеквизитовШапки.Валюта);
	ЗапросПД.УстановитьПараметр("НомерВходящегоДокумента", СтруктураРеквизитовШапки.НомерВходящегоДокумента);
	ЗапросПД.УстановитьПараметр("ДатаВходящегоДокумента", СтруктураРеквизитовШапки.ДатаВходящегоДокумента);
	Выборка = ЗапросПД.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	ИначеЕсли ТолькоПоиск Тогда
		Возврат Документы.ПервичныйДокумент.ПустаяСсылка();
	КонецЕсли;
	ПервичныйДок = Документы.ПервичныйДокумент.СоздатьДокумент();
	ПервичныйДок.ТипПервичногоДокумента = ТипПервичногоДокумента;
	ЗаполнитьЗначенияСвойств(ПервичныйДок, СтруктураРеквизитовШапки);
	Если НЕ ЗначениеЗаполнено(ПервичныйДок.Партнер) И ЗначениеЗаполнено(ПервичныйДок.Контрагент) Тогда
		ПервичныйДок.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДок.Контрагент,"Партнер");
	КонецЕсли;
	Если ЭтоПередачаТоваров И НЕ ЗначениеЗаполнено(ПервичныйДок.Партнер) Тогда
		ПервичныйДок.Партнер = Справочники.Партнеры.НашеПредприятие;
	КонецЕсли;
	ПервичныйДок.Дата = ДатаСверткиИБ;
	Если НЕ ЗначениеЗаполнено(ПервичныйДок.ВалютаВзаиморасчетов) Тогда
		ПервичныйДок.ВалютаВзаиморасчетов = ПервичныйДок.Валюта;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПервичныйДок.Валюта) Тогда
		ПервичныйДок.Валюта = ПервичныйДок.ВалютаВзаиморасчетов;
	КонецЕсли;
	Если Сумма <> 0 Тогда
		ПервичныйДок.СуммаДокумента = Сумма;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПервичныйДок.СуммаДокумента) И ЗначениеЗаполнено(СтруктураРеквизитовШапки.СуммаВзаиморасчетов) Тогда
		ПервичныйДок.СуммаДокумента = СтруктураРеквизитовШапки.СуммаВзаиморасчетов
	КонецЕсли;
	Если СтрокаРасчетов <> Неопределено Тогда
		Если СтрокаРасчетов.СуммаРегл <> 0 Тогда
			ПервичныйДок.СуммаРегл = СтрокаРасчетов.СуммаРегл;
		КонецЕсли;
		Если СтрокаРасчетов.СуммаУпр <> 0 Тогда
			ПервичныйДок.СуммаУпр = СтрокаРасчетов.СуммаУпр;
		КонецЕсли; 
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервичныйДок.СуммаДокумента) И ЗначениеЗаполнено(ПервичныйДок.Валюта) Тогда
		Если НЕ ЗначениеЗаполнено(ПервичныйДок.СуммаРегл) Тогда
			Если ПервичныйДок.Валюта = ВалютаРегламентированногоУчета Тогда
				ПервичныйДок.СуммаРегл = ПервичныйДок.СуммаДокумента;
			Иначе
				КоэффициентПересчета = КурсыВалют.Получить(ПервичныйДок.Валюта);
				Если КоэффициентПересчета = Неопределено Тогда
					КоэффициентПересчета = 
						РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
													ПервичныйДок.Валюта, 
													ВалютаРегламентированногоУчета, ДатаСверткиИБ);
					КурсыВалют.Вставить(ПервичныйДок.Валюта, КоэффициентПересчета); 
				КонецЕсли;
						
				ПервичныйДок.СуммаРегл = Окр(ПервичныйДок.СуммаДокумента * КоэффициентПересчета, 2, 1);
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПервичныйДок.СуммаУпр) Тогда
			Если ПервичныйДок.Валюта = ВалютаУправленческогоУчета Тогда
				ПервичныйДок.СуммаУпр = ПервичныйДок.СуммаДокумента;
			ИначеЕсли ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
				ПервичныйДок.СуммаУпр = ПервичныйДок.СуммаРегл;
			Иначе
				КоэффициентПересчета = КурсыВалют.Получить(ПервичныйДок.Валюта);
				Если КоэффициентПересчета = Неопределено Тогда
					КоэффициентПересчета = 
						РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
													ПервичныйДок.Валюта, 
													ВалютаУправленческогоУчета, ДатаСверткиИБ);
					КурсыВалют.Вставить(ПервичныйДок.Валюта, КоэффициентПересчета); 
				КонецЕсли;
						
				ПервичныйДок.СуммаУпр = Окр(ПервичныйДок.СуммаДокумента * КоэффициентПересчета, 2, 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПервичныйДок.Комментарий = Комментарий_СформированСверткойБазы+" ["+СокрЛП(ДокументСсылка)+"]";
	ПервичныйДок.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	//++ НЕ УТ
	Если ТипЗнч(ПервичныйДок.Договор) = Тип("СправочникСсылка.ДоговорыАренды") Тогда
		ПервичныйДок.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	КонецЕсли;
	//-- НЕ УТ
	Если НЕ ЗначениеЗаполнено(ПервичныйДок.НалогообложениеНДС) Тогда
		Если ЗначениеЗаполнено(ПервичныйДок.Договор) Тогда
			ПервичныйДок.НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДок.Договор, "НалогообложениеНДС");
		КонецЕсли;
	КонецЕсли;
	ПервичныйДок.ОбменДанными.Загрузка = Истина;
	УдалитьПрефиксИзНомера(ПервичныйДок);

	ПервичныйДок.Записать(РежимЗаписиДокумента.Запись);
	флОтказ = Ложь;
	Документы.ПервичныйДокумент.АктуализироватьОбъектРасчетов(ПервичныйДок, флОтказ);

	// Поиск и переназначения счета-фактуры полученного.
	Если ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика
		Или ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		ЗапросСФ = Новый Запрос;
		ЗапросСФ.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	СФ.Ссылка КАК Ссылка,
		|	ВЫБОР КОГДА НДСПродажи.Регистратор IS NULL ТОГДА
		|		ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьНДСПродажи,
		|	ВЫБОР КОГДА НДСПокупки.Регистратор IS NULL ТОГДА
		|		ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьНДСПокупки		
		|ИЗ Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСПродажи
		|ПО  НДСПродажи.Регистратор = СФ.Ссылка И НДСПродажи.СчетФактура = &ДокСсылка
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСПокупки
		|ПО  НДСПокупки.Регистратор = СФ.Ссылка И НДСПокупки.СчетФактура = &ДокСсылка
		|ГДЕ СФ.ДокументОснование = &ДокСсылка И СФ.Ссылка.Проведен
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	СФ.Ссылка КАК Ссылка,
		|	ВЫБОР КОГДА НДСПродажи.Регистратор IS NULL ТОГДА
		|		ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьНДСПродажи,
		|	ВЫБОР КОГДА НДСПокупки.Регистратор IS NULL ТОГДА
		|		ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьНДСПокупки		
		|ИЗ Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСПродажи
		|ПО  НДСПродажи.Регистратор = СФ.Ссылка И НДСПродажи.СчетФактура = &ДокСсылка
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСПокупки
		|ПО  НДСПокупки.Регистратор = СФ.Ссылка И НДСПокупки.СчетФактура = &ДокСсылка
		|ГДЕ СФ.ДокументОснование = &ДокСсылка И СФ.Ссылка.Проведен
		|";
		ЗапросСФ.УстановитьПараметр("ДокСсылка", ДокументСсылка);
		ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
		Пока ВыборкаСФ.Следующий() Цикл
			Если ЭтоПередачаТоваров Тогда
				// У Передачи товаров пара документов первичных, СФ прицепляются соответсвующему типу.
				Если (ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика
					И ТипЗнч(ВыборкаСФ.Ссылка) <> Тип("ДокументСсылка.СчетФактураПолученный"))
					ИЛИ (ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту
					И ТипЗнч(ВыборкаСФ.Ссылка) <> Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			СФПолученный = ВыборкаСФ.Ссылка;
			СФОбъект = СФПолученный.ПолучитьОбъект();
			СФОбъект.ОбменДанными.Загрузка = Истина;
			Для Каждого ДокОсн Из СФОбъект.ДокументыОснования Цикл
				Если ДокОсн.ДокументОснование = ДокументСсылка Тогда
					ДокОсн.ДокументОснование = ПервичныйДок.Ссылка;
				КонецЕсли;
			КонецЦикла;
			Попытка
				СФОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
			// Замена ссылки в записях регистров накопления НДС 
			// явно нельзя перепроводить, т.к. движения формируются проведением документов в регл учете
			Если ВыборкаСФ.ЕстьНДСПокупки Тогда
				НДСЗакупкиНаборЗаписей = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей();
				НДСЗакупкиНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаСФ.Ссылка);
				НДСЗакупкиНаборЗаписей.Прочитать();
				Для Каждого НДСЗапись Из НДСЗакупкиНаборЗаписей Цикл
					Если НДСЗапись.СчетФактура = ДокументСсылка Тогда
						НДСЗапись.СчетФактура = ПервичныйДок.Ссылка;
					КонецЕсли;
				КонецЦикла;
				Если НДСЗакупкиНаборЗаписей.Модифицированность() Тогда
					НДСЗакупкиНаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
			Если ВыборкаСФ.ЕстьНДСПродажи Тогда
				НДСПродажиНаборЗаписей = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей();
				НДСПродажиНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаСФ.Ссылка);
				НДСПродажиНаборЗаписей.Прочитать();
				Для Каждого НДСЗапись Из НДСПродажиНаборЗаписей Цикл
					Если НДСЗапись.СчетФактура = ДокументСсылка Тогда
						НДСЗапись.СчетФактура = ПервичныйДок.Ссылка;
					КонецЕсли;
				КонецЦикла;
				Если НДСПродажиНаборЗаписей.Модифицированность() Тогда
					НДСПродажиНаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ПервичныйДок.Ссылка;
КонецФункции

// При большом объеме базы нумерации может не хватить.
Процедура УдалитьПрефиксИзНомера(ПервичныйДок)
	ПозицияПрефикса = СтрНайти(ПервичныйДок.Номер,"-");
	Если ПозицияПрефикса > 0 Тогда
		НовыйПрефикс = "";
		Для Сч = 1 По ПозицияПрефикса цикл
			НовыйПрефикс = НовыйПрефикс + "0";
		КонецЦикла;
		ПервичныйДок.Номер = НовыйПрефикс + Сред(ПервичныйДок.Номер, ПозицияПрефикса + 1);
	КонецЕсли;
КонецПроцедуры



//++ НЕ УТКА

Процедура СформироватьДокументыВводаОстатковЗаказыНаПроизводство()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Распоряжение КАК Заказ,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	КодСтроки КАК КодСтроки,
	|	Серия КАК Серия,
	|	Назначение КАК Назначение,
	|	НазначениеОтправителя КАК НазначениеОтправителя,
	|	Получатель КАК Получатель,
	|	ЗаказаноОстаток КАК Количество,
	|	ЛОЖЬ КАК Отражено
	|ПОМЕСТИТЬ Материалы    // ТЧ МатериалыИУслуги
	|ИЗ РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(&ГраницаОст, Распоряжение ССЫЛКА Документ.ЗаказНаПроизводство) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноОстаток > 0 
	|	И Распоряжение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжение КАК Заказ,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик,
	|	Этап,
	|	Подразделение,
	|	ЗапланированоЗаказомОборот КАК ЗапланированоЗаказом,
	|	ВыполненоОборот КАК Выполнено,
	|	БракОборот КАК Брак,
	|	ЗапланированоЗаказомОборот - ВыполненоОборот - БракОборот КАК ОсталосьВыполнить
	|ПОМЕСТИТЬ Этапы    // ТЧ Этапы
	|ИЗ РегистрНакопления.ЭтапыПроизводства.Обороты(,&ГраницаОст) КАК ТабРег
	|ГДЕ (ЗапланированоЗаказомОборот - ВыполненоОборот - БракОборот) > 0 И Распоряжение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство КАК Заказ,
	|	ВидРабот,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик,
	|	Этап,
	|	ПоЗаказуОстаток КАК Количество
	|ПОМЕСТИТЬ Трудозатраты  // ТЧ Трудозатраты
	|ИЗ РегистрНакопления.ЗаказыНаПроизводствоТрудозатраты.Остатки(&ГраницаОст) КАК ТабТрудозатраты
	|ГДЕ ЗаказНаПроизводство.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И ПоЗаказуОстаток > 0
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство КАК Заказ,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик,
	|	ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ Спецификации  
	|ИЗ РегистрНакопления.ЗаказыНаПроизводствоСпецификации.Остатки(&ГраницаОст, ЗаказНаПроизводство ССЫЛКА Документ.ЗаказНаПроизводство) КАК ТабСпецификации
	|ГДЕ ЗаказНаПроизводство.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И ЗаказаноОстаток > 0
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказ
	|ИЗ (
	|ВЫБРАТЬ Заказ
	|ИЗ Материалы
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Заказ
	|ИЗ Этапы
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Заказ
	|ИЗ Трудозатраты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Заказ
	|ИЗ Спецификации
	|) КАК СводЗаказов
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Материалы
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Этапы
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Трудозатраты
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Спецификации
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаЗаказов = Результат[4].Выгрузить();
	Если ТаблицаЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаМатериалы = Результат[5].Выгрузить();
	ТаблицаЭтапы = Результат[6].Выгрузить();
	ТаблицаТрудозатраты = Результат[7].Выгрузить();
	ТаблицаСпецификации = Результат[8].Выгрузить();
	МассивРегистровНакопления = РегистрыНакопленияДокумента("ЗаказНаПроизводство");
	Для Каждого СтрокаЗаказ Из ТаблицаЗаказов Цикл
		Заказ = СтрокаЗаказ.Заказ;
		ДокОст = Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистровНакопления, Заказ);

		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		
		СтруктураПоиска = Новый Структура("Заказ", Заказ);
		СтрокиМатериалы = Неопределено;
		СтрокиТрудозатраты = Неопределено;
		СтрокиЭтапы = Неопределено;
		СтрокиСпецификации = Неопределено;
		Если ТаблицаМатериалы.Количество() > 0 Тогда
			СтрокиМатериалы = ТаблицаМатериалы.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаТрудозатраты.Количество() > 0 Тогда
			СтрокиТрудозатраты = ТаблицаТрудозатраты.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаЭтапы.Количество() > 0 Тогда
			СтрокиЭтапы = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаСпецификации.Количество() > 0 Тогда
			СтрокиСпецификации = ТаблицаСпецификации.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		МассивКодовСтрокКУдалению = Новый Массив;
		Для Каждого СтрокаТЧ Из ДокОст.МатериалыИУслуги Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			КодСтроки = СтрокаТЧ.КодСтроки;
			КодСтрокиНайден = Ложь;
			Если СтрокиМатериалы <> Неопределено Тогда
				Для Каждого СтрокаТаб Из СтрокиМатериалы Цикл
					Если СтрокаТаб.КодСтроки = КодСтроки Тогда
						КодСтрокиНайден = Истина;
						ИзменятьГрафик = (СтрокаТаб.Количество <> СтрокаТЧ.Количество);
						// Перепишем значения реквизитов - возможно они скорректировались.
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаб, "Номенклатура, Характеристика, Количество, Серия, Назначение");
						СтрокаТЧ.Подразделение = СтрокаТаб.Получатель;
						Если ИзменятьГрафик Тогда
							СтрокиГрафик = ДокОст.МатериалыИУслугиГрафик.НайтиСтроки(Новый Структура("КлючСвязиМатериалыИУслуги", СтрокаТЧ.КлючСвязи));
							КоличествоОсталось = СтрокаТаб.Количество;
							Для Каждого СтрокаГрафик Из СтрокиГрафик Цикл
								Если КоличествоОсталось = 0 Тогда
									ДокОст.МатериалыИУслугиГрафик.Удалить(СтрокаГрафик);
									Продолжить;
								КонецЕсли;
								СтрокаГрафик.Количество = Мин(СтрокаГрафик.Количество, КоличествоОсталось);
								КоличествоОсталось = КоличествоОсталось - СтрокаГрафик.Количество;
							КонецЦикла;
						КонецЕсли;
						СтрокаТаб.Отражено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ КодСтрокиНайден Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокиГрафик = ДокОст.МатериалыИУслугиГрафик.НайтиСтроки(Новый Структура("КлючСвязиМатериалыИУслуги", СтрокаТЧ.КлючСвязи));
				Для Каждого СтрокаГрафик Из СтрокиГрафик Цикл
					ДокОст.МатериалыИУслугиГрафик.Удалить(СтрокаГрафик);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла; // ТЧ Материалы обход строк.
		// Возможно следует добавить новые строки.
		Если СтрокиМатериалы <> Неопределено Тогда
			Для Каждого СтрокаТаб Из СтрокиМатериалы Цикл
				Если СтрокаТаб.Отражено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТЧ = ДокОст.МатериалыИУслуги.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаб);
				СтрокаТаб.Отражено = Истина;
			КонецЦикла;
		КонецЕсли;
		// ТЧ Трудозатраты
		МассивСтрокТрудозатратыКУдалению = Новый Массив;
		Для Каждого СтрокаТЧ Из ДокОст.Трудозатраты Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			КодСтрокиНайден = Ложь;
			Если СтрокиТрудозатраты <> Неопределено Тогда
				Для Каждого СтрокаТаб Из СтрокиТрудозатраты Цикл
					Если СтрокаТаб.ВидРабот = СтрокаТЧ.ВидРабот
						И СтрокаТаб.КодСтрокиПродукция = СтрокаТЧ.КлючСвязиПродукция 
						И СтрокаТаб.КодСтрокиЭтапыГрафик = СтрокаТЧ.КлючСвязиЭтапы Тогда
						КодСтрокиНайден = Истина;
						ИзменятьГрафик = Ложь;
						Если СтрокаТЧ.Количество > СтрокаТаб.Количество Тогда
							СтрокаТЧ. Количество = СтрокаТаб.Количество;
							ИзменятьГрафик = Истина;
						КонецЕсли;
						
						Если ИзменятьГрафик Тогда
							СтрокиГрафик = ДокОст.ТрудозатратыГрафик.НайтиСтроки(Новый Структура("КлючСвязиТрудозатраты", СтрокаТЧ.КлючСвязи));
							КоличествоОсталось = СтрокаТаб.Количество;
							Для Каждого СтрокаГрафик Из СтрокиГрафик Цикл
								Если КоличествоОсталось = 0 Тогда
									ДокОст.ТрудозатратыГрафик.Удалить(СтрокаГрафик);
									Продолжить;
								КонецЕсли;
								СтрокаГрафик.Количество = Мин(СтрокаГрафик.Количество, КоличествоОсталось);
								КоличествоОсталось = КоличествоОсталось - СтрокаГрафик.Количество;
							КонецЦикла;
						КонецЕсли;
						СтрокаТаб.Отражено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ КодСтрокиНайден Тогда
				МассивСтрокТрудозатратыКУдалению.Добавить(СтрокаТЧ);
				СтрокиГрафик = ДокОст.ТрудозатратыГрафик.НайтиСтроки(Новый Структура("КлючСвязиТрудозатраты", СтрокаТЧ.КлючСвязи));
				Для Каждого СтрокаГрафик Из СтрокиГрафик Цикл
					ДокОст.ТрудозатратыГрафик.Удалить(СтрокаГрафик);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла; //Для Каждого СтрокаТЧ Из ДокОст.Трудозатраты Цикл
		Для Каждого СтрокаТЧ Из МассивСтрокТрудозатратыКУдалению Цикл
			ДокОст.Трудозатраты.Удалить(СтрокаТЧ);
		КонецЦикла;
		// ТЧ ЭтапыПроизводства
		МассивСтрокЭтапыГрафикКУдалению = Новый Массив;
		Для Каждого СтрокаТЧ Из ДокОст.ЭтапыГрафик Цикл
			КодСтроки = СтрокаТЧ.КодСтроки;
			КодСтрокиНайден = Ложь;
			Если СтрокиЭтапы <> Неопределено Тогда
				Для Каждого СтрокаТаб Из СтрокиЭтапы Цикл
					Если СтрокаТаб.КодСтрокиЭтапыГрафик = КодСтроки
						И СтрокаТаб.КодСтрокиПродукция = СтрокаТЧ.КлючСвязиПродукция Тогда
						КодСтрокиНайден = Истина;
						Если СтрокаТаб.ЗапланированоЗаказом <> СтрокаТаб.ОсталосьВыполнить Тогда
							// Нужна корректировка количества продукции.
							КоличествоОсталось = СтрокаТаб.ОсталосьВыполнить;
							СтрокиПродукция = ДокОст.Продукция.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязиПродукция));
							Для Каждого СтрокаПродукция Из СтрокиПродукция Цикл
								Если КоличествоОсталось = 0 Тогда
									ДокОст.Продукция.Удалить(СтрокаПродукция);
									Продолжить;
								КонецЕсли;
								КоличествоСтроки = Мин(СтрокаПродукция.Количество, КоличествоОсталось);
								СтрокаПродукция.Количество = КоличествоСтроки;
								КоличествоОсталось = КоличествоОсталось - КоличествоСтроки;
							КонецЦикла;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ КодСтрокиНайден Тогда
				МассивСтрокЭтапыГрафикКУдалению.Добавить(СтрокаТЧ);
				СтрокиПродукция = ДокОст.Продукция.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязиПродукция));
				Для Каждого СтрокаПродукция Из СтрокиПродукция Цикл
					ДокОст.Продукция.Удалить(СтрокаПродукция);
				КонецЦикла;
				СтрокиПродукция = ДокОст.ПродукцияГрафик.НайтиСтроки(Новый Структура("КлючСвязиПродукция", СтрокаТЧ.КлючСвязиПродукция));
				Для Каждого СтрокаПродукция Из СтрокиПродукция Цикл
					ДокОст.ПродукцияГрафик.Удалить(СтрокаПродукция);
				КонецЦикла;
				СтрокиЭтапы = ДокОст.Этапы.НайтиСтроки(Новый Структура("КлючСвязиЭтапы, КлючСвязиПродукция", СтрокаТЧ.КлючСвязиЭтапы, СтрокаТЧ.КлючСвязиПродукция));
				Для Каждого СтрокаЭтап Из СтрокиЭтапы Цикл
					ДокОст.Этапы.Удалить(СтрокаЭтап);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаЭтапы ИЗ МассивСтрокЭтапыГрафикКУдалению Цикл
			ДокОст.ЭтапыГрафик.Удалить(СтрокаЭтапы);
		КонецЦикла;
		// ТЧ ВыходныеИзделия
		МассивСтрокВыходныеИзделияКУдалению = Новый Массив;
		Для Каждого СтрокаТЧ Из ДокОст.ВыходныеИзделия Цикл
			КлючНайден = Ложь; 
			Если СтрокиСпецификации <> Неопределено Тогда
				Для Каждого СтрокаТаб Из СтрокиСпецификации Цикл
					Если СтрокаТЧ.КлючСвязиПродукция = СтрокаТаб.КодСтрокиПродукция
						И СтрокаТЧ.КлючСвязиЭтапыГрафик = СтрокаТаб.КодСтрокиЭтапыГрафик Тогда
						КоличествоОсталось = Мин(СтрокаТЧ.Количество, СтрокаТаб.Количество);
						Если СтрокаТЧ.Количество > КоличествоОсталось Тогда
							СтрокаТЧ.Количество = КоличествоОсталось;
							СтрокиГрафик = ДокОст.ВыходныеИзделияГрафик.НайтиСтроки(Новый Структура("КлючСвязиВыходныеИзделия", СтрокаТЧ.КлючСвязи));
							Для Каждого СтрокаГрафик Из СтрокиГрафик Цикл
								Если КоличествоОсталось = 0 Тогда
									ДокОст.ВыходныеИзделияГрафик.Удалить(СтрокаГрафик);
									Продолжить;
								КонецЕсли;
								СтрокаГрафик.Количество = Мин(КоличествоОсталось, СтрокаГрафик.Количество);
								КоличествоОсталось = КоличествоОсталось - СтрокаГрафик.Количество;
							КонецЦикла;
						КонецЕсли;
						КлючНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ КлючНайден Тогда
				МассивСтрокВыходныеИзделияКУдалению.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из МассивСтрокВыходныеИзделияКУдалению Цикл
			СтрокиГрафик = ДокОст.ВыходныеИзделияГрафик.НайтиСтроки(Новый Структура("КлючСвязиВыходныеИзделия", СтрокаТЧ.КлючСвязи));
			Для Каждого СтрокаГрафик Из СтрокиГрафик Цикл
				ДокОст.ВыходныеИзделияГрафик.Удалить(СтрокаГрафик);
			КонецЦикла;
			ДокОст.ВыходныеИзделия.Удалить(СтрокаТЧ);
		КонецЦикла;
		// ТЧ ВозвратныеОтходы
		МассивСтрокВОКУдалению = Новый Массив;
		Для Каждого СтрокаТЧ Из ДокОст.ВозвратныеОтходы Цикл
			КлючНайден = Ложь;
			Если СтрокиСпецификации <> Неопределено Тогда
				Для Каждого СтрокаТаб Из СтрокиСпецификации Цикл
					Если СтрокаТЧ.КлючСвязиПродукция = СтрокаТаб.КодСтрокиПродукция
						И СтрокаТЧ.КлючСвязиЭтапы = СтрокаТаб.КодСтрокиЭтапыГрафик Тогда
						КоличествоОсталось = Мин(СтрокаТЧ.Количество, СтрокаТаб.Количество);
						Если СтрокаТЧ.Количество > КоличествоОсталось Тогда
							СтрокаТЧ.Количество = КоличествоОсталось;
							СтрокиГрафик = ДокОст.ВозвратныеОтходыГрафик.НайтиСтроки(Новый Структура("КлючСвязиВозвратныеОтходы", СтрокаТЧ.КлючСвязи));
							Для Каждого СтрокаГрафик Из СтрокиГрафик Цикл
								Если КоличествоОсталось = 0 Тогда
									ДокОст.ВозвратныеОтходыГрафик.Удалить(СтрокаГрафик);
									Продолжить;
								КонецЕсли;
								СтрокаГрафик.Количество = Мин(КоличествоОсталось, СтрокаГрафик.Количество);
								КоличествоОсталось = КоличествоОсталось - СтрокаГрафик.Количество;
							КонецЦикла;
						КонецЕсли;
						КлючНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ КлючНайден Тогда
				МассивСтрокВОКУдалению.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из МассивСтрокВОКУдалению Цикл
			СтрокиГрафик = ДокОст.ВозвратныеОтходыГрафик.НайтиСтроки(Новый Структура("КлючСвязиВыходныеИзделия", СтрокаТЧ.КлючСвязи));
			Для Каждого СтрокаГрафик Из СтрокиГрафик Цикл
				ДокОст.ВозвратныеОтходыГрафик.Удалить(СтрокаГрафик);
			КонецЦикла;
			ДокОст.ВозвратныеОтходы.Удалить(СтрокаТЧ);
		КонецЦикла;  
		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Заказы на производство';
							|en = 'Production orders are processed'")); 

КонецПроцедуры
//++ Устарело_Переработка24
Процедура СформироватьДокументыВводаОстатковЗаказыДавальцу()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТабРег.ЗаказКлиента КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.Склад КАК Склад,
	|ТабРег.Серия КАК Серия,
	|ТабРег.ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ Продукция
	|ИЗ РегистрНакопления.ЗаказыКлиентов.Остатки(&ГраницаОст, ЗаказКлиента ССЫЛКА Документ.ЗаказДавальца
	|									И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ
	| РегистрНакопления.УслугиДавальцуКОформлению.Остатки(&ГраницаОст, ЗаказДавальца.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) КАК ТабУслуги
	|ПО ТабРег.Номенклатура = ТабУслуги.Номенклатура
	|	И ТабРег.Характеристика = ТабУслуги.Характеристика
	|	И ТабРег.ЗаказКлиента = ТабУслуги.ЗаказДавальца
	|ГДЕ ТабРег.ЗаказаноОстаток>0  
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ТабРег.ЗаказПоставщику КАК Заказ,
	|ТабРег.Номенклатура КАК Номенклатура,
	|ТабРег.Характеристика КАК Характеристика,
	|ТабРег.КодСтроки КАК КодСтроки,
	|ТабРег.Склад КАК Склад,
	|ТабРег.ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ Материалы
	|ИЗ РегистрНакопления.ЗаказыПоставщикам.Остатки(&ГраницаОст, ЗаказПоставщику ССЫЛКА Документ.ЗаказДавальца
	|										И ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноОстаток>0
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказ
	|ИЗ (
	|ВЫБРАТЬ Заказ ИЗ Продукция
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Заказ ИЗ Материалы
	|) КАК Свод
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ИЗ Продукция
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ИЗ Материалы
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаЗаказов = Результат[2].Выгрузить();
	Если ТаблицаЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаПродукция = Результат[3].Выгрузить();
	ТаблицаМатериалы = Результат[4].Выгрузить();
	МассивРегистровНакопления = РегистрыНакопленияДокумента("ЗаказДавальца");
	//Определим причину отмены заказов
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию(НСтр("ru = '#Свертка базы';
																							|en = '#Base rollup'"));
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗАказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = НСтр("ru = '#Свертка базы';
														|en = '#Base rollup'");
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	Для Каждого СтрокаЗаказ Из ТаблицаЗаказов Цикл
		Заказ = СтрокаЗаказ.Заказ;
		ДокОст = Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		
		СтруктураПоиска = Новый Структура("Заказ", Заказ);
		СтрокиМатериалы = Неопределено;
		СтрокиПродукция = Неопределено;
		Если ТаблицаМатериалы.Количество() > 0 Тогда
			СтрокиМатериалы = ТаблицаМатериалы.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаПродукция.Количество() > 0 Тогда
			СтрокиПродукция = ТаблицаПродукция.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		// ТЧ Материалы
		СтрокиКУдалению = Новый Массив;
		Если СтрокиМатериалы <> Неопределено Тогда
			Для Каждого СтрокаТЧ Из ДокОст.Материалы Цикл
				КодСтрокиНайден = Ложь;
				Для Каждого СтрокаТаб Из СтрокиМатериалы Цикл
					Если СтрокаТаб.КодСтроки = СтрокаТЧ.КодСтроки Тогда
						КодСтрокиНайден = Истина;
						Если СтрокаТаб.Количество <> СтрокаТЧ.Количество Тогда
							СтрокаТЧ.Количество = СтрокаТаб.Количество;
							СтрокаТЧ.КоличествоУпаковок = СтрокаТаб.Количество;
							СтрокаТЧ.Сумма = Окр(СтрокаТЧ.Цена * СтрокаТЧ.Количество,2);
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ КодСтрокиНайден Тогда
					СтрокиКУдалению.Добавить(СтрокаТЧ);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаТЧ Из СтрокиКУдалению Цикл
				ДокОст.Материалы.Удалить(СтрокаТЧ);
			КонецЦикла;
		Иначе
			ДокОст.Материалы.Очистить(); 			
		КонецЕсли;
		// ТЧ Продукция
		Для Каждого СтрокаТЧ Из ДокОст.Продукция Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			ИначеЕсли СтрокиПродукция = Неопределено Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Продолжить;
			КонецЕсли;
			КодСтрокиНайден = Ложь;
			Для Каждого СтрокаТаб Из СтрокиПродукция Цикл
				Если СтрокаТаб.КодСтроки = СтрокаТЧ.КодСтроки
					И СтрокаТаб.Номенклатура = СтрокаТЧ.Номенклатура Тогда
					КодСтрокиНайден = Истина;
					Если СтрокаТаб.Количество <> СтрокаТЧ.Количество Тогда
						СтрокаТЧ.Количество = СтрокаТаб.Количество;
							СтрокаТЧ.КоличествоУпаковок = СтрокаТаб.Количество;
							СтрокаТЧ.Сумма = Окр(СтрокаТЧ.Цена * СтрокаТЧ.Количество,2);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КодСтрокиНайден Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
		КонецЦикла;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистровНакопления, Заказ);
		// Очистим движеняи регистра Заказы... по данному заказу, чтобы при проведении не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу("ЗаказыПоставщикам", "ЗаказПоставщику", Заказ);

		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Заказы давальца';
							|en = 'Processed Material provider orders'")); 
КонецПроцедуры
//-- Устарело_Переработка24
Процедура СформироватьДокументыВводаОстатковЗаказыНаРемонт()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПланСрез.ОбъектЭксплуатации КАК Узел,
	|	ПланСрез.ВидРемонта,
	|	ПланСрез.РемонтныйЦикл,
	|	Максимум(ПланТаблица.Период) КАК Период,
	|	Максимум(ПланТаблица.Регистратор) КАК ЗаказНаРемонт
	|ПОМЕСТИТЬ ПланРемонтаПоЗаказам
	|ИЗ РегистрСведений.ПланРемонтов.СрезПоследних(&ГраницаОст) КАК ПланСрез
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланРемонтов КАК ПланТаблица
	|	ПО ПланТаблица.ОбъектЭксплуатации = ПланСрез.ОбъектЭксплуатации
	|		И ПланТаблица.ВидРемонта = ПланСрез.ВидРемонта
	|		И ПланТаблица.РемонтныйЦикл = ПланСрез.РемонтныйЦикл
	|		И ПланТаблица.Период <= &ДатаОст
	|		И ПланТаблица.Регистратор ССЫЛКА Документ.ЗаказНаРемонт
	|СГРУППИРОВАТЬ ПО 
	|	ПланСрез.ОбъектЭксплуатации,
	|	ПланСрез.ВидРемонта,
	|	ПланСрез.РемонтныйЦикл
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаРемонт,
	|	РабочийЦентр,
	|	ДатаНачала,
	|	ДатаЗавершения
	|ПОМЕСТИТЬ РемонтыРабочихЦентров
	|ИЗ РегистрСведений.РемонтыРабочихЦентров
	|ГДЕ ДатаЗавершения > &ДатаОст
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ссылка
	|ПОМЕСТИТЬ АктуальныеЗаказы
	|ИЗ Документ.ЗаказНаРемонт
	|ГДЕ Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт)
	|	И (Ссылка В (ВЫБРАТЬ ЗаказНаРемонт Из ПланРемонтаПоЗаказам)
	|		ИЛИ Ссылка В (ВЫБРАТЬ ЗаказНаРемонт ИЗ РемонтыРабочихЦентров))
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаВнутреннееПотребление КАК ЗаказНаРемонт,
	|	Номенклатура,
	|	Характеристика,
	|	КодСтроки,
	|	Склад,
	|	Серия,
	|	ЗаказаноОстаток КАК Заказано,
	|	КОформлениюОстаток КАК КОформлению
	|ПОМЕСТИТЬ МатериалыИРаботы
	|ИЗ РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(&ГраницаОст,
	|				ЗаказНаВнутреннееПотребление ССЫЛКА Документ.ЗаказНаРемонт) КАК ТабМатериалыИРаботы
	|ГДЕ ЗаказНаВнутреннееПотребление В (ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ АктуальныеЗаказы)
	|	И ЗаказаноОстаток > 0
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжение КАК ЗаказНаРемонт,
	|	ВидРабот,
	|	КодСтрокиРаспоряжения КАК КодСтроки,
	|	КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ Трудозатраты
	|ИЗ РегистрНакопления.ТрудозатратыКОформлению.Остатки(&ГраницаОст,
	|				Распоряжение ССЫЛКА Документ.ЗаказНаРемонт) КАК ТабТрудозатраты
	|ГДЕ Распоряжение В (ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ АктуальныеЗаказы)
	|	И КоличествоОстаток > 0
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ссылка КАК ЗаказНаРемонт
	|ИЗ АктуальныеЗаказы
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ МатериалыИРаботы
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Трудозатраты
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаЗаказовНаРемонт = Результат[5].Выгрузить();
	Если ТаблицаЗаказовНаРемонт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаМатериалыИРаботы = Результат[6].Выгрузить();
	ТаблицаТрудозатраты = Результат[7].Выгрузить();
	МассивРегистровНакопления = РегистрыНакопленияДокумента("ЗаказНаРемонт");
	Для Каждого СтрокаЗаказ Из ТаблицаЗаказовНаРемонт Цикл
		ЗаказНаРемонт = СтрокаЗаказ.ЗаказНаРемонт;
		ДокОст = ЗаказНаРемонт.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();

		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		
		СтруктураПоиска = Новый Структура("ЗаказНаРемонт", ЗаказНаРемонт);
		СтрокиМатериалы = Неопределено;
		СтрокиТрудозатраты = Неопределено;
		Если ТаблицаМатериалыИРаботы.Количество() > 0 Тогда
			СтрокиМатериалы = ТаблицаМатериалыИРаботы.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаТрудозатраты.Количество() > 0 Тогда
			СтрокиТрудозатраты = ТаблицаТрудозатраты.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		// ТЧ МатериалыИРаботы
		Если СтрокиМатериалы <> Неопределено И СтрокиМатериалы.Количество() > 0 Тогда
			СчетчикКодов = ПолучитьМаксимальныйКодСтроки(ДокОст.МатериалыИРаботы);
			Для Каждого СтрокаТЧ Из ДокОст.МатериалыИРаботы Цикл
				Если СтрокаТЧ.Отменено Тогда
					Продолжить;
				КонецЕсли;
				КодСтроки = СтрокаТЧ.КодСтроки;
				КодНайден = Ложь;
				
				Для Каждого СтрокаТаб Из СтрокиМатериалы Цикл
					Если СтрокаТаб.КодСтроки <> КодСтроки Тогда
						Продолжить;
					КонецЕсли;
					КодНайден = Истина;
					Если СтрокаТаб.Заказано < СтрокаТЧ.Количество Тогда
						// Добавляем строку с отмененным количеством
						НовСтрока = ДокОст.МатериалыИРаботы.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТЧ);
						НовСтрока.Количество = СтрокаТЧ.Количество - СтрокаТаб.Заказано;
						НовСтрока.Отменено = Истина;
						НовСтрока.КодСтроки = СчетчикКодов;
						СчетчикКодов = СчетчикКодов + 1;
						// Корректируем реальное количество
						СтрокаТЧ.Количество = СтрокаТаб.Заказано;
					КонецЕсли;
					Прервать;
				КонецЦикла;
				Если НЕ КодНайден Тогда
					СтрокаТЧ.Отменено = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ДокОст.МатериалыИРаботы.Количество() > 0 Тогда
			// Отменить все строки ТЧ
			УстановитьОтменуСтрокТабличнойЧасти(ДокОст, "МатериалыИРаботы");
		КонецЕсли;
		// ТЧ Трудозатраты
		Если СтрокиТрудозатраты <> Неопределено И СтрокиТрудозатраты.Количество() > 0 Тогда
			СчетчикКодов = ПолучитьМаксимальныйКодСтроки(ДокОст.Трудозатраты);
			Для Каждого СтрокаТЧ Из ДокОст.Трудозатраты Цикл
				Если СтрокаТЧ.Отменено Тогда
					Продолжить;
				КонецЕсли;
				КодСтроки = СтрокаТЧ.КодСтроки;
				КодНайден = Ложь;
				Если СтрокиТрудозатраты = Неопределено Тогда
					СтрокаТЧ.Отменено = Истина;
					Продолжить;
				КонецЕсли;
				Для Каждого СтрокаТаб Из СтрокиТрудозатраты Цикл
					Если СтрокаТаб.КодСтроки = КодСтроки Тогда
						КодНайден = Истина;
						Если СтрокаТаб.Количество < СтрокаТЧ.Количество Тогда
							// Добавляем строку с отмененным количеством
							НовСтрока = ДокОст.Трудозатраты.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТЧ);
							НовСтрока.Количество = СтрокаТЧ.Количество - СтрокаТаб.Количество;
							НовСтрока.Отменено = Истина;
							НовСтрока.КодСтроки = СчетчикКодов;
							СчетчикКодов = СчетчикКодов + 1;
							// Корректируем реальное количество
							СтрокаТЧ.Количество = СтрокаТаб.Количество;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ КодНайден Тогда
					СтрокаТЧ.Отменено = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ДокОст.Трудозатраты.Количество() > 0 Тогда
			УстановитьОтменуСтрокТабличнойЧасти(ДокОст, "Трудозатраты");
		КонецЕсли;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистровНакопления, ЗаказНаРемонт);
		// Удалим движения по регистру Заказы... по этому заказу до даты свертки, чтобы не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу("ЗаказыНаВнутреннееПотребление", "ЗаказНаВнутреннееПотребление", ЗаказНаРемонт);

		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Заказы на ремонт';
							|en = 'Processed Repair orders'")); 

КонецПроцедуры

Процедура СформироватьДокументыОСНМАМеждународныйУчет()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СведенияОС.ОсновноеСредство,
	|	ДетальнаяЗапись.Период КАК ДатаПринятияКУчету,
	|	СведенияОС.Организация,
	|	СведенияОС.Подразделение,
	|	СведенияОС.ИнвентарныйНомер,
	|	СведенияОС.СчетУчета,
	|	СведенияОС.ВидАктива,
	|	СведенияОС.ЛиквидационнаяСтоимость,
	|	СведенияОС.ЛиквидационнаяСтоимостьПредставления,
	|	СведенияОС.ПорядокУчета,
	|	СведенияОС.МетодНачисленияАмортизации,
	|	СведенияОС.СчетАмортизации,
	|	СведенияОС.СрокИспользования,
	|	СведенияОС.ПоказательНаработки,
	|	СведенияОС.ОбъемНаработки,
	|	СведенияОС.КоэффициентУскорения,
	|	СведенияОС.СтатьяРасходов,
	|	СведенияОС.АналитикаРасходов
	|ИЗ РегистрСведений.ОсновныеСредстваМеждународныйУчет.СрезПоследних(&ГраницаОст) КАК СведенияОС
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСредстваМеждународныйУчет КАК ДетальнаяЗапись
	|	ПО ДетальнаяЗапись.ОсновноеСредство = СведенияОС.ОсновноеСредство
	|	И (ДетальнаяЗапись.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|		ИЛИ ДетальнаяЗапись.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету))
	|ГДЕ СведенияОС.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|ИТОГИ ПО 
	|	СведенияОС.Организация,
	|	СведенияОС.СчетУчета,
	|	СведенияОС.СчетАмортизации";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	ТекстЗапросаСтоимость = "ВЫБРАТЬ
	   |	МеждународныйОстатки.Субконто1 КАК Объект,
	   |	Сумма(МеждународныйОстатки.СуммаОстатокДт) КАК ПервоначальнаяСтоимость,
	   |	Сумма(МеждународныйОстатки.СуммаОстатокКт) КАК НакопленнаяАмортизация,
	   |	Сумма(МеждународныйОстатки.СуммаПредставленияОстатокДт) КАК ПервоначальнаяСтоимостьПредставления,
	   |	Сумма(МеждународныйОстатки.СуммаПредставленияОстатокКт) КАК НакопленнаяАмортизацияПредставления
	   |ИЗ
	   |	РегистрБухгалтерии.Международный.Остатки(&ГраницаОст, Счет В ИЕРАРХИИ (&СчетУчета)
	   |		ИЛИ Счет В ИЕРАРХИИ (&СчетАмортизации), &ВидыСубконто, 
	   |		Организация = &Организация) КАК МеждународныйОстатки
	   |СГРУППИРОВАТЬ ПО МеждународныйОстатки.Субконто1";
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ОсновныеСредства);
	ВыборкаОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоСформированныхДокументов = 1;
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаСчетДт = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетДт.Следующий() Цикл
			ВыборкаСчетКт = ВыборкаСчетДт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСчетКт.Следующий() Цикл
				ЗапросСтоимость = Новый Запрос;
				ЗапросСтоимость.Текст = ТекстЗапросаСтоимость;
				ЗаполнитьПараметрыЗапросаДатаСвертки(ЗапросСтоимость);
				ЗапросСтоимость.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
				ЗапросСтоимость.УстановитьПараметр("Организация", ВыборкаСчетКт.Организация);
				ЗапросСтоимость.УстановитьПараметр("СчетУчета", ВыборкаСчетКт.СчетУчета);
				ЗапросСтоимость.УстановитьПараметр("СчетАмортизации", ВыборкаСчетКт.СчетАмортизации);
				ТаблицаСтоимость = ЗапросСтоимость.Выполнить().Выгрузить();
				Выборка = ВыборкаСчетКт.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаСтоимость = ТаблицаСтоимость.НайтиСтроки(Новый Структура("Объект", Выборка.ОсновноеСредство));
					Если СтрокаСтоимость.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					ДокОст = Документы.ВводОстатковОСМеждународныйУчет.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Ложь);
					ЗаполнитьЗначенияСвойств(ДокОст, СтрокаСтоимость[0]);
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковОСМеждународныйУчет", "");
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СведенияНМА.НематериальныйАктив,
	|	ДетальнаяЗапись.Период КАК ДатаПринятияКУчету,
	|	СведенияНМА.Организация,
	|	СведенияНМА.Подразделение,
	|	СведенияНМА.СчетУчета,
	|	СведенияНМА.ЛиквидационнаяСтоимость,
	|	СведенияНМА.ЛиквидационнаяСтоимостьПредставления,
	|	СведенияНМА.ПорядокУчета,
	|	СведенияНМА.МетодНачисленияАмортизации,
	|	СведенияНМА.СчетАмортизации,
	|	СведенияНМА.СрокИспользования,
	|	СведенияНМА.ОбъемНаработки,
	|	СведенияНМА.КоэффициентУскорения,
	|	СведенияНМА.СтатьяРасходов,
	|	СведенияНМА.АналитикаРасходов
	|ИЗ РегистрСведений.НематериальныеАктивыМеждународныйУчет.СрезПоследних(&ГраницаОст) КАК СведенияНМА
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НематериальныеАктивыМеждународныйУчет КАК ДетальнаяЗапись
	|	ПО ДетальнаяЗапись.НематериальныйАктив = СведенияНМА.НематериальныйАктив
	|	И ДетальнаяЗапись.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету)
	|ГДЕ СведенияНМА.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
	|ИТОГИ ПО 
	|	СведенияНМА.Организация,
	|	СведенияНМА.СчетУчета,
	|	СведенияНМА.СчетАмортизации";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.НематериальныеАктивы);
	ВыборкаОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоСформированныхДокументов = 1;
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаСчетДт = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчетДт.Следующий() Цикл
			ВыборкаСчетКт = ВыборкаСчетДт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСчетКт.Следующий() Цикл
				ЗапросСтоимость = Новый Запрос;
				ЗапросСтоимость.Текст = ТекстЗапросаСтоимость;
				ЗаполнитьПараметрыЗапросаДатаСвертки(ЗапросСтоимость);
				ЗапросСтоимость.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
				ЗапросСтоимость.УстановитьПараметр("Организация", ВыборкаСчетКт.Организация);
				ЗапросСтоимость.УстановитьПараметр("СчетУчета", ВыборкаСчетКт.СчетУчета);
				ЗапросСтоимость.УстановитьПараметр("СчетАмортизации", ВыборкаСчетКт.СчетАмортизации);
				ТаблицаСтоимость = ЗапросСтоимость.Выполнить().Выгрузить();
				Выборка = ВыборкаСчетКт.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаСтоимость = ТаблицаСтоимость.НайтиСтроки(Новый Структура("Объект", Выборка.НематериальныйАктив));
					Если СтрокаСтоимость.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					ДокОст = Документы.ВводОстатковНМАМеждународныйУчет.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Ложь);
					ЗаполнитьЗначенияСвойств(ДокОст, СтрокаСтоимость[0]);
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковНМАМеждународныйУчет", "");
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыУстановкаЗначенийНаработки()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбъектЭксплуатации,
	|	ПоказательНаработки,
	|	Значение,
	|	СреднесуточноеЗначение
	|ИЗ РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(&ГраницаОст)";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ДокОст = Документы.УстановкаЗначенийНаработки.СоздатьДокумент();
	ДокОст.Дата = КонецДня(ДатаСверткиИБ);
	ДокОст.Комментарий = Комментарий_СформированСверткойБазы;
	ДокОст.Ответственный =  ПользователиКлиентСервер.ТекущийПользователь();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Стр = ДокОст.Наработки.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Выборка);
	КонецЦикла;
	ДокОст.Записать(РежимЗаписиДокумента.Запись);
	ВывестиСообщениеСформированыДокументы("УстановкаЗначенийНаработки");

КонецПроцедуры

Процедура УстановитьОтменуСтрокТабличнойЧасти(ДокОбъект, ИмяТЧ)
	Для Каждого СтрокаТЧ Из ДокОбъект[ИмяТЧ] Цикл
		СтрокаТЧ.Отменено = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковАналогиВПроизводстве()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	// Шапка документа
	|	ЗаказНаПроизводство, 
	|	Спецификация,
	|	Изделие, 
	|	ХарактеристикаИзделия, 
	|	ЗаказКлиента, 
	|	Подразделение, 
	|	ПериодЗавершения КАК ДатаОкончанияДействия, 
	// ТЧ Материалы
	|	Материал,
	|	ХарактеристикаМатериала,
	|	КоличествоУпаковокМатериала,
	|	УпаковкаМатериала, 
	// ТЧ Аналоги
	|	Аналог, 
	|	ХарактеристикаАналога,
	|	УпаковкаАналога, 
	|	КоличествоУпаковокАналога
	|ИЗ
	|	РегистрСведений.АналогиМатериалов.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ГДЕ ПериодЗавершения > &ДатаОст ИЛИ ПериодЗавершения = ДАТАВРЕМЯ(1,1,1)
	|ИТОГИ ПО 
	|	ПериодЗавершения,
	|	ЗаказНаПроизводство, 
	|	ЗаказКлиента, 
	|	Подразделение, 
	|	Изделие, 
	|	ХарактеристикаИзделия, 
	|	Спецификация,
	|	Аналог
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	КоличествоДокументовВводаОстатков = 1;
	ВыборкаПериод = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПериод.Следующий() Цикл
		ВыборкаЗПР = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗПР.Следующий() Цикл
			ВыборкаЗКЛ = ВыборкаЗПР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗКЛ.Следующий() Цикл
				ВыборкаПодр = ВыборкаЗКЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПодр.Следующий() Цикл
					ВыборкаИзд = ВыборкаПодр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаИзд.Следующий() Цикл
						ВыборкаХарИзд = ВыборкаИзд.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
						Пока ВыборкаХарИзд.Следующий() Цикл
							ВыборкаСпец = ВыборкаХарИзд.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаСпец.Следующий() Цикл
								ВыборкаАналог = ВыборкаСпец.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ВыборкаАналог.Следующий() Цикл

									ДокОст = Документы.РазрешениеНаЗаменуМатериалов.СоздатьДокумент();
									ДокОст.Дата = КонецДня(ДатаСверткиИБ);
									ДокОст.ДатаНачалаДействия = КонецДня(ДатаСверткиИБ);
									ДокОст.УказаниеПоПрименению = Комментарий_СформированСверткойБазы+" ["+КоличествоДокументовВводаОстатков+"]";
									ДокОст.Ответственный =  ПользователиКлиентСервер.ТекущийПользователь();
									ДокОст.Статус = Перечисления.СтатусыРазрешенийНаЗаменуМатериалов.Утверждено;
									ЗаполнитьЗначенияСвойств(ДокОст, ВыборкаАналог);
									Выборка = ВыборкаАналог.Выбрать();
									Пока Выборка.Следующий() Цикл
										// Строка Материалы
										Если ЗначениеЗаполнено(Выборка.Материал) Тогда
											СтрокаМатериал = ДокОст.Материалы.Добавить();
											СтрокаМатериал.Номенклатура = Выборка.Материал;
											СтрокаМатериал.Характеристика = Выборка.ХарактеристикаМатериала;
											СтрокаМатериал.КоличествоУпаковок = Выборка.КоличествоУпаковокМатериала;
											СтрокаМатериал.Упаковка = Выборка.УпаковкаМатериала;
										КонецЕсли;
										// Строка Аналоги
										Если ЗначениеЗаполнено(Выборка.Аналог) Тогда
											СтрокаАналог = ДокОст.Аналоги.Добавить();
											СтрокаАналог.КоличествоУпаковок = Выборка.КоличествоУпаковокАналога;
											СтрокаАналог.Номенклатура = Выборка.Аналог;
											СтрокаАналог.Упаковка = Выборка.УпаковкаАналога;
											СтрокаАналог.Характеристика = Выборка.ХарактеристикаАналога;
										КонецЕсли;
									КонецЦикла;
									ДокОст.Записать(РежимЗаписиДокумента.Запись);
									КоличествоДокументовВводаОстатков = КоличествоДокументовВводаОстатков + 1;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоДокументовВводаОстатков > 0 Тогда
		ВывестиСообщениеСформированыДокументы("РазрешениеНаЗаменуМатериалов", 
									"");
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьДокументыДоступностьРабочихЦентров()
	// У документов нет реквизита Комментарий поэтому актуальные документы переносятся после даты свертки.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистратор КАК Ссылка
	|ИЗ РегистрСведений.ДоступностьРабочихЦентров
	|ГДЕ Окончание > &ДатаОст И ВЫРАЗИТЬ(Регистратор КАК Документ.ДоступностьРабочихЦентров).Дата <= &ДатаОст";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
 	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
    Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.Дата = КонецДня(ДатаСверткиИБ) + 1;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись); 
		Исключение
		КонецПопытки
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковНЗП()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Подразделение,
	|	НаправлениеДеятельности,
	|	СтатьяРасходов,
	|   АналитикаРасходов,
	|	ПартияПроизводства,  
	|	СтатьяКалькуляции,
    |	ПравилоОтнесенияНаВыпуск,
	|	СтоимостьОстаток КАК Сумма,
	|	СтоимостьРеглОстаток КАК СуммаРегл,
	|	ПостояннаяРазницаОстаток КАК СуммаПР,
	|	ВременнаяРазницаОстаток КАК СуммаВР
	|ИЗ РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства.Остатки(&ГраницаОст)
	|ГДЕ СтоимостьОстаток > 0
	|ИТОГИ Сумма(СтоимостьОстаток) 
	|ПО 
	|	Организация,
	|	Подразделение,
	|	НаправлениеДеятельности
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделение.Следующий() Цикл
        	ВыборкаНаправление = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНаправление.Следующий() Цикл
				ДокОст = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаНаправление, Ложь);
				ДокОст.СуммаДокумента = ВыборкаНаправление.Сумма;
				Выборка = ВыборкаНаправление.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокаРасходы = ДокОст.ПрочиеРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасходы, Выборка);
					СтрокаРасходы.ПравилоОтнесенияНаВыпускРегл = Выборка.ПравилоОтнесенияНаВыпуск;
					СтрокаРасходы.ПравилоОтнесенияНаВыпускУпр = Выборка.ПравилоОтнесенияНаВыпуск;
				КонецЦикла;
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		СообщениеСвертки(НСтр("ru = 'Сформированы Начальные остатки НЗП по партиям производства (Прочие расходы незавершенного производства)';
								|en = 'Generated Initial WIP balances by production lots (Other WIP expenses)'"));
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Подразделение,
	|	ВидРабот,
	|	ПартияПроизводства,  
	|	СтатьяКалькуляции,
	|	КоличествоОстаток КАК Количество,
	|	СтоимостьОстаток КАК Сумма, 
	|	НормативнаяСтоимостьОстаток КАК НормативнаяСумма,
	|	СтоимостьРеглОстаток КАК СуммаРегл,
	|	ПостояннаяРазницаОстаток КАК СуммаПР,
	|	ВременнаяРазницаОстаток КАК СуммаВР
	|ИЗ РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Остатки(&ГраницаОст)
	|ГДЕ СтоимостьОстаток > 0
	|ИТОГИ Сумма(СтоимостьОстаток) 
	|ПО 
	|	Организация,
	|	Подразделение
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделение.Следующий() Цикл
			ДокОст = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаНаправление, Ложь);
			ДокОст.СуммаДокумента = ВыборкаПодразделение.Сумма;
			Выборка = ВыборкаПодразделение.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаРасходы = ДокОст.Трудозатраты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасходы, Выборка);
				Если Выборка.Количество > 0 Тогда
					СтрокаРасходы.Цена = Окр(Выборка.Сумма / Выборка.Количество, 2);
					СтрокаРасходы.НормативнаяРасценка = Окр(Выборка.НормативнаяСумма / Выборка.Количество, 2);
				КонецЕсли;
			КонецЦикла;
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		СообщениеСвертки(НСтр("ru = 'Сформированы Начальные остатки НЗП по партиям производства (Трудозатраты незавершенного производства)';
								|en = 'Generated Initial WIP balances by production lots (WIP labor costs)'"));
	КонецЕсли;

КонецПроцедуры
//-- НЕ УТКА

//++ НЕ УТ

Процедура СформироватьДокументыВводаОстатковТМЦВЭксплуатации()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	ТабРег.Организация 		КАК Организация,
	|	ТабРег.Подразделение 	КАК Подразделение,
	|	ТабРег.ФизическоеЛицо 	КАК ФизическоеЛицо,
	|	ТабРег.Номенклатура 	КАК Номенклатура,
	|	ТабРег.Характеристика	КАК Характеристика,
	|	ТабРег.Серия			КАК Серия,
	|	ТабРег.Партия 			КАК Партия,
	|	ТабРег.Партия.КатегорияЭксплуатации 	КАК КатегорияЭксплуатации,
	|	ТабРег.Партия.ДатаНачалаЭксплуатации	КАК ДатаНачалаЭксплуатации,
	|	ТабРег.Партия.СтатьяРасходов 			КАК СтатьяРасходов,
	|	ТабРег.Партия.АналитикаРасходов 		КАК АналитикаРасходов, 
	|	ТабРег.ИнвентарныйНомер 			КАК ИнвентарныйНомер,
	|	Сумма(ТабРег.КоличествоОборот) КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковТМЦВЭксплуатации) КАК ХозяйственнаяОперация
	|ИЗ РегистрНакопления.ТМЦВЭксплуатации.Обороты(,&ГраницаОст, ) КАК ТабРег
	|СГРУППИРОВАТЬ ПО
	|	ТабРег.Организация,
	|	ТабРег.Подразделение,
	|	ТабРег.ФизическоеЛицо,
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабРег.Серия,
	|	ТабРег.ИнвентарныйНомер,
	|	ТабРег.Партия
	|ИМЕЮЩИЕ Сумма(ТабРег.КоличествоОборот) > 0
	|УПОРЯДОЧИТЬ ПО Организация, Подразделение, ФизическоеЛицо, Номенклатура, Характеристика, Партия";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() ТОгда
		Возврат;
	КонецЕсли; 
	ИсправленныеКатегории = Новый Массив;
	
	КоличествоСформированныхДокументов = 1;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			ДокОст = Документы.ВводОстатковТМЦВЭксплуатации.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Истина);
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДокОст.ТМЦВЭксплуатации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковТМЦВЭксплуатации", 
									Перечисления.ХозяйственныеОперации.ВводОстатковТМЦВЭксплуатации);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыУстановкаЗначенийНефинансовыхПоказателей()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Сценарий,
	|	Подразделение,
	|	НефинансовыйПоказатель КАК Показатель,
	|	Аналитика1,
	|	Аналитика2,
	|	Аналитика3,
	|	Аналитика4,
	|	Аналитика5,
	|	Аналитика6,
	|	НомерПодПериода,
	|	ЗначениеПоказателя,
	|	Валюта,
	|	ДатаОкончания КАК ОкончаниеПериода
	|ИЗ РегистрСведений.ЗначенияНефинансовыхПоказателей.СрезПоследних(&ГраницаОст)";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	КоличествоДокументовВводаОстатков = 1;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОст = Документы.УстановкаЗначенийНефинансовыхПоказателей.СоздатьДокумент();
		ДокОст.Дата = КонецДня(ДатаСверткиИБ);
		ДокОст.НачалоПериода = КонецДня(ДатаСверткиИБ);
		ДокОст.Комментарий = Комментарий_СформированСверткойБазы+" ["+КоличествоДокументовВводаОстатков+"]";
		ДокОст.Ответственный =  ПользователиКлиентСервер.ТекущийПользователь();
		ДокОст.ВидОперации = Перечисления.ВидыОперацийУстановкиЗначенийНефинансовыхПоказателей.ВводЗначенияПоказателя;
		ЗаполнитьЗначенияСвойств(ДокОст, Выборка);
		СтрЗначение = ДокОст.ЗначенияПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрЗначение, Выборка);
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КоличествоДокументовВводаОстатков = КоличествоДокументовВводаОстатков + 1;
	КонецЦикла;
	// Дата регистратора до даты свертки а дата движения после даты свертки. Такие документы переносятся после даты свертки.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ РегистрСведений.ЗначенияНефинансовыхПоказателей КАК ДанныеРегистра
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаЗначенийНефинансовыхПоказателей КАК ДанныеДокумента
	|ПО ДанныеРегистра.Регистратор = ДанныеДокумента.Ссылка
	|ГДЕ ДанныеДокумента.Дата <= &ДатаОст И ДанныеРегистра.Период > &ДатаОст";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОст = Выборка.Ссылка.ПолучитьОбъект();
		ДокОст.Дата = КонецДня(ДатаСверткиИБ);
		ДокОст.НачалоПериода = КонецДня(ДатаСверткиИБ);
		ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина); 
		ДокОст.Комментарий = Комментарий_СформированСверткойБазы+" ["+КоличествоДокументовВводаОстатков+"]";
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КоличествоДокументовВводаОстатков = КоличествоДокументовВводаОстатков + 1;
	КонецЦикла;
	
	ВывестиСообщениеСформированыДокументы("УстановкаЗначенийНефинансовыхПоказателей", 
									"");

КонецПроцедуры

Процедура ОбработатьНормативыРаспределенияПлановПродаж()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	Норматив,
	|	Норматив.Комментарий КАК Комментарий
	|ИЗ РегистрСведений.НормативыРаспределенияПлановПродажПоКатегориям.СрезПоследних(&ГраницаОст)
	|ГДЕ Действует = Истина";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтрНайти(Выборка.Комментарий, Комментарий_НеУдалятьПриСверткеБазы) Тогда
			Продолжить;
		КонецЕсли;
		ДокОбъект = Выборка.Норматив.ПолучитьОбъект();
		ДополнитьКомментарийДокумента(ДокОбъект,Комментарий_НеУдалятьПриСверткеБазы);
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Нормативы распределения планов продаж по категориям';
							|en = 'Processed Standards of sales plan allocation by categories'")); 
КонецПроцедуры

Функция ПолучитьМаксимальныйКодСтроки(ТабЧасть)
	КодМакс = 0;
	Для Каждого СтрТЧ Из ТабЧасть Цикл
		Если СтрТЧ.КодСтроки > КодМакс Тогда
			КодМакс = СтрТЧ.КодСтроки;
		КонецЕсли;
	КонецЦикла;
	Возврат КодМакс + 1;
КонецФункции

Процедура СформироватьДокументыВводаОстатковЗаказыМатериаловВПроизводство()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Распоряжение КАК Заказ,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	КодСтроки КАК КодСтроки,
	|	Серия КАК Серия,
	|	ЗаказаноОстаток КАК Количество
	|ИЗ РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(&ГраницаОст, Распоряжение ССЫЛКА Документ.ЗаказМатериаловВПроизводство) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноОстаток > 0
	|ИТОГИ ПО Распоряжение";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	МассивРегистровНакопления = РегистрыНакопленияДокумента("ЗаказМатериаловВПроизводство");

	ВыборкаЗаказы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказы.Следующий() Цикл
		ДокОст = ВыборкаЗаказы.Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();

		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		СчетчикКодов = ПолучитьМаксимальныйКодСтроки(ДокОст.Товары);
		Выборка = ВыборкаЗаказы.Выбрать();
		Для Каждого СтрТЧ Из ДокОст.Товары Цикл
			Если СтрТЧ.Отменено Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.НайтиСледующий(Новый Структура("КодСтроки", СтрТЧ.КодСтроки)) Тогда
				Если Выборка.Количество < СтрТЧ.Количество Тогда
					// Новая строка с отмененным количеством.
					НовСтр = ДокОст.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрТЧ);
					НовСтр.Отменено = Истина;
					НовСтр.Количество = СтрТЧ.Количество - Выборка.Количество;
					НовСтр.КодСтроки = СчетчикКодов;
					СчетчикКодов = СчетчикКодов + 1;
					// Корректировка количества в найденной строке.
					СтрТЧ.Количество = Выборка.Количество;
				КонецЕсли;
			Иначе
				СтрТЧ.Отменено = Истина;
			КонецЕсли;
		КонецЦикла;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистровНакопления, ВыборкаЗаказы.Заказ);

		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Заказы материалов в производство';
							|en = 'Processed Orders for materials for production'")); 

КонецПроцедуры

#Область ПередачаВПереработку
//++ Устарело_Переработка24
Процедура СформироватьДокументыВводаОстатковЗаказыПереработчику()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабРег.ЗаказКлиента КАК Заказ,
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.Характеристика КАК Характеристика,
	|	ТабРег.КодСтроки КАК КодСтроки,
	|	ТабРег.Склад КАК Склад,
	|	ТабРег.Серия КАК Серия,
	|	ТабРег.ЗаказаноОстаток КАК Количество,
	|	ТабРег.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ Материалы
	|ИЗ РегистрНакопления.ЗаказыКлиентов.Остатки(&ГраницаОст, ЗаказКлиента ССЫЛКА Документ.ЗаказПереработчику
	|									И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноОстаток>0  
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРег.ЗаказПоставщику КАК Заказ,
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.Характеристика КАК Характеристика,
	|	ТабРег.КодСтроки КАК КодСтроки,
	|	ТабРег.Склад КАК Склад,
	|	ТабРег.ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ ПродукцияРазвернуто
	|ИЗ РегистрНакопления.ЗаказыПоставщикам.Остатки(&ГраницаОст, ЗаказПоставщику ССЫЛКА Документ.ЗаказПереработчику
	|										И ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноОстаток>0 
	|ОБЪЕДИНИТЬ ВСЕ
	// Остатки которые закроются поступлением от переработчика.
	|ВЫБРАТЬ
	|	ТабРег.Распоряжение,
	|	ТабРег.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТабРег.АналитикаУчетаНоменклатуры.Характеристика,
	|	ТабРег.КодСтроки,
	|	ТабРег.АналитикаУчетаНоменклатуры.МестоХранения,
	|	ТабРег.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(&ГраницаОст, Распоряжение ССЫЛКА Документ.ЗаказПереработчику
	|							И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)) КАК ТабРег
	|ГДЕ ТабРег.КоличествоОстаток>0 
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ,
	|	Номенклатура,
	|	Характеристика,
	|	КодСтроки,
	|	Склад,
	|	Сумма(Количество),
	|	ЛОЖЬ КАК Отражено
	|ПОМЕСТИТЬ Продукция
	|ИЗ
	|ПродукцияРазвернуто
	|СГРУППИРОВАТЬ ПО
	|	Заказ,
	|	Номенклатура,
	|	Характеристика,
	|	КодСтроки,
	|	Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПереработчику КАК Заказ,
	|	СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ УслугиПереработчиковКОформлению
	|ИЗ РегистрНакопления.УслугиПереработчиковКОформлению.Остатки(&ГраницаОст, ЗаказПереработчику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказ
	|ИЗ (
	|ВЫБРАТЬ Заказ
	|ИЗ Материалы
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Заказ
	|ИЗ Продукция
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Заказ
	|ИЗ УслугиПереработчиковКОформлению
	|) КАК СводЗаказов
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Материалы
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Продукция
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ УслугиПереработчиковКОформлению 
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаЗаказов = Результат[4].Выгрузить();
	Если ТаблицаЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаМатериалы = Результат[5].Выгрузить();
	ТаблицаПродукция = Результат[6].Выгрузить();
	ТаблицаУслуги = Результат[7].Выгрузить();
	МассивРегистровНакопления = РегистрыНакопленияДокумента("ЗаказПереработчику");
	
	//Определим причину отмены заказов
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию(НСтр("ru = '#Свертка базы';
																							|en = '#Base rollup'"));
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗАказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = НСтр("ru = '#Свертка базы';
														|en = '#Base rollup'");
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	Для Каждого СтрокаЗаказ Из ТаблицаЗаказов Цикл
		Заказ = СтрокаЗаказ.Заказ;
		ДокОст = Заказ.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();

		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		
		СтруктураПоиска = Новый Структура("Заказ", Заказ);
		СтрокиМатериалы = Неопределено;
		СтрокиПродукция = Неопределено;
		СтрокиУслуги = Неопределено;
		СтрокиСпецификации = Неопределено;
		Если ТаблицаМатериалы.Количество() > 0 Тогда
			СтрокиМатериалы = ТаблицаМатериалы.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаПродукция.Количество() > 0 Тогда
			СтрокиПродукция = ТаблицаПродукция.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаУслуги.Количество() > 0 Тогда
			СтрокиУслуги = ТаблицаУслуги.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если СтрокиУслуги = Неопределено Или СтрокиУслуги.Количество() = 0 Тогда
			ДокОст.СуммаДокумента = 0;
		ИначеЕсли СтрокиУслуги[0].Сумма > 0 Тогда
			ДокОст.СуммаДокумента = СтрокиУслуги[0].Сумма;
		КонецЕсли;
		// ТЧ Материалы
		Для Каждого СтрокаТЧ Из ДокОст.Материалы Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			ИначеЕсли СтрокиМатериалы = Неопределено Тогда
				СтрокаТЧ.Отменено = Истина;
				Продолжить;
			КонецЕсли;
			КодСтрокиНайден = Ложь;
			Для Каждого СтрокаТаб Из СтрокиМатериалы Цикл
				Если СтрокаТаб.КодСтроки = СтрокаТЧ.КодСтроки Тогда
					КодСтрокиНайден = Истина;
					Если СтрокаТаб.Количество <> СтрокаТЧ.Количество Тогда
						СтрокаТЧ.Количество = СтрокаТаб.Количество;
						СтрокаТЧ.Сумма = СтрокаТаб.Сумма;
						СтрокаТЧ.Цена = Окр(СтрокаТаб.Сумма / СтрокаТаб.Количество,2);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КодСтрокиНайден Тогда
				СтрокаТЧ.Отменено = Истина;
			КонецЕсли;
		КонецЦикла;
		// ТЧ Продукция
		Для Каждого СтрокаТЧ Из ДокОст.Продукция Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			ИначеЕсли СтрокиПродукция = Неопределено Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Продолжить;
			КонецЕсли;
			КодСтрокиНайден = Ложь;
			Для Каждого СтрокаТаб Из СтрокиПродукция Цикл
				Если СтрокаТаб.КодСтроки = СтрокаТЧ.КодСтроки
					И СтрокаТаб.Номенклатура = СтрокаТЧ.Номенклатура Тогда
					КодСтрокиНайден = Истина;
					Если СтрокаТаб.Количество <> СтрокаТЧ.Количество Тогда
						СтрокаТЧ.Количество = СтрокаТаб.Количество;
					КонецЕсли;
					СтрокаТаб.Отражено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КодСтрокиНайден Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
		КонецЦикла;
		// ТЧ ВозвратныеОтходы
		Для Каждого СтрокаТЧ Из ДокОст.ВозвратныеОтходы Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			ИначеЕсли СтрокиПродукция = Неопределено Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Продолжить;
			КонецЕсли;
			КодСтрокиНайден = Ложь;
			Для Каждого СтрокаТаб Из СтрокиПродукция Цикл
				Если СтрокаТаб.КодСтроки = СтрокаТЧ.КодСтроки
					И СтрокаТаб.Номенклатура = СтрокаТЧ.Номенклатура Тогда
					КодСтрокиНайден = Истина;
					СтрокаТаб.Отражено = Истина;
					Если СтрокаТаб.Количество <> СтрокаТЧ.Количество Тогда
						СтрокаТЧ.Количество = СтрокаТаб.Количество;
						СтрокаТЧ.Сумма = СтрокаТЧ.Цена * СтрокаТЧ.Количество;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КодСтрокиНайден Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
		КонецЦикла;
		// Добавление строк продукции.
		Если СтрокиПродукция <> Неопределено Тогда
			Для Каждого СтрокаТаб Из СтрокиПродукция Цикл
				Если СтрокаТаб.Отражено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТЧ = ДокОст.Продукция.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаб);
				СтрокаТаб.Отражено = Истина;
			КонецЦикла;
		КонецЕсли;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистровНакопления, Заказ);
		// Удалим движения по регистру Заказы... по этому заказу до даты свертки, чтобы не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу("ЗаказыКлиентов", "ЗаказКлиента", Заказ);
		УдалитьДвиженияПоЗаказу("ЗаказыПоставщикам", "ЗаказПоставщику", Заказ);

		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяТолькоПередачаВПереработку2_4") Тогда
		СообщениеСвертки(НСтр("ru = 'Обработаны Заказы переработчику';
								|en = 'Processed Tolling orders'"));
	Иначе
		СообщениеСвертки(НСтр("ru = 'Обработаны Заказы переработчику (2.4)';
								|en = 'Processed Tolling orders (2.4)'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПоступлениеОтПереработчика()
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТабРег.КоличествоОстаток КАК Количество
		|ПОМЕСТИТЬ ОстаткиВсе
		|ИЗ РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(&ГраницаОст)
		|															 КАК ТабРег
		|ГДЕ ТабРег.КоличествоОстаток > 0

		|;
		|//////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРег.Организация КАК Организация,
		|	ВЫБОР КОГДА ТабРег.Распоряжение ССЫЛКА Документ.ЗаказПереработчику Тогда
		|		ТабРег.Распоряжение 
		|	ИНАЧЕ NULL КОНЕЦ КАК ЗаказПереработчику,
		|	ТабРег.КодСтроки,
		|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТабРег.КоличествоОстаток КАК Количество,
		|	ТабРег.Распоряжение.Контрагент КАК Контрагент,
		|	ТабРег.Распоряжение.Партнер КАК Партнер,
		|	ТабРег.Распоряжение.Договор КАК Договор
		|ПОМЕСТИТЬ ОстаткиЗаполненоРаспоряжение
		|ИЗ РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(&ГраницаОст,
		|	 АналитикаУчетаНоменклатуры В (ВЫБРАТЬ АналитикаУчетаНоменклатуры ИЗ ОстаткиВсе) И
		|	(ВЫРАЗИТЬ(Распоряжение КАК Документ.ЗаказПереработчику) <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|		ИЛИ ВЫРАЗИТЬ(Распоряжение КАК Документ.ПоступлениеОтПереработчика) <> ЗНАЧЕНИЕ(Документ.ПоступлениеОтПереработчика.ПустаяСсылка))
		|															) КАК ТабРег
		|ГДЕ ТабРег.КоличествоОстаток > 0
		|;
		|//////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРег.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка) КАК ЗаказПереработчику,
		|	ТабРег.КодСтроки,
		|	ТабРег.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТабРег.КоличествоКонечныйОстаток КАК Количество,
		|	ВЫБОР КОГДА ТабРег.Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика ТОГДА
		|		ВЫРАЗИТЬ(ТабРег.Регистратор КАК Документ.ПоступлениеОтПереработчика).Договор
		|	КОГДА ТабРег.Регистратор ССЫЛКА Документ.ОтчетПереработчика ТОГДА
		|		ВЫРАЗИТЬ(ТабРег.Регистратор КАК Документ.ОтчетПереработчика).Договор
		|	КОНЕЦ КАК Договор,
		|	ВЫБОР КОГДА ТабРег.Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика ТОГДА
		|		ВЫРАЗИТЬ(ТабРег.Регистратор КАК Документ.ПоступлениеОтПереработчика).Контрагент
		|	КОГДА ТабРег.Регистратор ССЫЛКА Документ.ОтчетПереработчика ТОГДА
		|		ВЫРАЗИТЬ(ТабРег.Регистратор КАК Документ.ОтчетПереработчика).Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР КОГДА ТабРег.Регистратор ССЫЛКА Документ.ПоступлениеОтПереработчика ТОГДА
		|		ВЫРАЗИТЬ(ТабРег.Регистратор КАК Документ.ПоступлениеОтПереработчика).Партнер
		|	КОГДА ТабРег.Регистратор ССЫЛКА Документ.ОтчетПереработчика ТОГДА
		|		ВЫРАЗИТЬ(ТабРег.Регистратор КАК Документ.ОтчетПереработчика).Партнер
		|	КОНЕЦ КАК Партнер,
		|	ТабРег.КоличествоПриход КАК КоличествоПриход
		|ПОМЕСТИТЬ ОстаткиПустоеРаспоряжение
		|ИЗ
		|	РегистрНакопления.ТоварыПолученныеОтПереработчика.ОстаткиИОбороты(, &ГраницаОст, Регистратор,,
		|	 АналитикаУчетаНоменклатуры В (ВЫБРАТЬ АналитикаУчетаНоменклатуры ИЗ ОстаткиВсе) И
		|	(ВЫРАЗИТЬ(Распоряжение КАК Документ.ЗаказПереработчику) = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|		И ВЫРАЗИТЬ(Распоряжение КАК Документ.ПоступлениеОтПереработчика) = ЗНАЧЕНИЕ(Документ.ПоступлениеОтПереработчика.ПустаяСсылка))
		|															) КАК ТабРег
		|ГДЕ ТабРег.КоличествоКонечныйОстаток > 0 И ТабРег.КоличествоПриход > 0
		|;
		|//////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организация,
		|	ЗаказПереработчику,
		|	КодСтроки,
		|	АналитикаУчетаНоменклатуры,
		|	Контрагент,
		|	Партнер,
		|	Договор,
		|	Сумма(Количество) КАК Количество
		|ПОМЕСТИТЬ ОстаткиПоКоличеству
		|ИЗ
		|	(ВЫБРАТЬ
		|		Организация,
		|		ЗаказПереработчику,
		|		КодСтроки,
		|		АналитикаУчетаНоменклатуры,
		|		Контрагент,
		|		Партнер,
		|		Договор,
		|		Количество
		|	ИЗ ОстаткиЗаполненоРаспоряжение
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		Организация,
		|		ЗаказПереработчику,
		|		КодСтроки,
		|		АналитикаУчетаНоменклатуры,
		|		Контрагент,
		|		Партнер,
		|		Договор,
		|		Количество
		|	ИЗ ОстаткиПустоеРаспоряжение) КАК Свод
		|СГРУППИРОВАТЬ ПО
		|	Организация,
		|	ЗаказПереработчику,
		|	КодСтроки,
		|	АналитикаУчетаНоменклатуры,
		|	Контрагент,
		|	Партнер,
		|	Договор
		|;
		|//////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРег.Организация,
		|	ТабРег.ЗаказПереработчику,
		|	ТабРег.Контрагент,
		|	ТабРег.Договор,
		|	ВЫРАЗИТЬ(ТабРег.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Склады) КАК Склад,
		|	ТабРег.ЗаказПереработчику.Подразделение КАК Подразделение,
		|	ТабРег.ЗаказПереработчику.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,  
		|	ТабРег.Партнер,
		|	ТабРег.Договор.ВалютаВзаиморасчетов КАК Валюта,
		|	ТабРег.КодСтроки,
		|	ТабРег.АналитикаУчетаНоменклатуры,
		|	ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ВЫБОР КОГДА ЕстьNULL(ТабРегПартии.КоличествоОстаток, 0) = 0 ТОГДА 0 
		|		ИНАЧЕ	ВЫРАЗИТЬ(ТабРегПартии.СтоимостьОстаток / ТабРегПартии.КоличествоОстаток КАК ЧИСЛО(31,2)) 
		|	КОНЕЦ КАК Цена,
		|	ТабРег.Количество
		|	ИЗ ОстаткиПоКоличеству КАК ТабРег
		|ЛЕВОЕ СОЕДИНЕНИЕ #ТекстЛевоеСоединение# КАК ТабРегПартии
		|	ПО ТабРег.АналитикаУчетаНоменклатуры = ТабРегПартии.АналитикаУчетаНоменклатуры И
		|		ТабРег.Организация = ТабРегПартии.Организация И 
		|		ТабРегПартии.ВидЗапасов.Договор = ТабРег.Договор
		|ИТОГИ ПО 
		|	ТабРег.Организация,
		|	ТабРег.ЗаказПереработчику, 
		|	ТабРег.Контрагент, 
		|	ТабРег.Партнер,
		|	ТабРег.Договор, 
		|	ТабРег.АналитикаУчетаНоменклатуры.МестоХранения
		|";
	ДатаПереходаНаПартии22 = Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить();
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22()
		И ДатаПереходаНаПартии22 < КонецДня(ДатаСверткиИБ) Тогда
		ТекстЛевоеСоединение = "РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, (РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
		|																ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
		|																))";
	Иначе
		ТекстЛевоеСоединение = "РегистрНакопления.ПартииТоваровОрганизаций.Остатки(&ГраницаОст)";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТекстЛевоеСоединение#", ТекстЛевоеСоединение);
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаЗаказ = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказ.Следующий() Цикл
			ВыборкаКонтрагент = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагент.Следующий() Цикл
				ВыборкаПартнер = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПартнер.Следующий() Цикл
				ВыборкаДоговор = ВыборкаПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаДоговор.Следующий() Цикл
						ВыборкаСклад = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаСклад.Следующий() Цикл

							ДокОст = Документы.ПоступлениеОтПереработчика.СоздатьДокумент();
							ДокОст.Дата = КонецДня(ДатаСверткиИБ);
							ДокОст.Комментарий = Комментарий_СформированСверткойБазы+" ["+КоличествоСформированныхДокументов+"]";
							ДокОст.Автор =  ПользователиКлиентСервер.ТекущийПользователь();
							ЗаполнитьЗначенияСвойств(ДокОст, ВыборкаСклад);

							ДокОст.ПоступлениеПоЗаказам = ЗначениеЗаполнено(ВыборкаСклад.ЗаказПереработчику);
							Выборка = ВыборкаДоговор.Выбрать();
							Пока Выборка.Следующий() Цикл
								Стр = ДокОст.Товары.Добавить();
								ЗаполнитьЗначенияСвойств(Стр, Выборка);
								Стр.Сумма = Окр(Стр.Количество * Стр.Цена, 2);
								Стр.КоличествоУпаковок = Стр.Количество;
							КонецЦикла;
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
						КонецЦикла; // ВыборкаСклад
					КонецЦикла; // ВыборкаДоговор 
				КонецЦикла; // ВыборкаПартнер 
			КонецЦикла; // ВыборкаКонтрагент
		КонецЦикла; // ВыборкаЗаказ
	КонецЦикла; // ВыборкаОрганизация
	ВывестиСообщениеСформированыДокументы("ПоступлениеОтПереработчика");

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковПередачаПереработчику(ОрганизацииУСНФИФО)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацииУСНФИФО",ОрганизацииУСНФИФО);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабРег.ВидЗапасов.Организация КАК Организация,
	|	ТабСебестоимость.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ВЫРАЗИТЬ(ТабРег.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Партнеры) КАК Партнер,
	|	ТабРег.ВидЗапасов,
	|	ТабРег.АналитикаУчетаНоменклатуры,
	|	ТабРег.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	ТабРег.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ВЫБОР КОГДА ТабРег.ВидЗапасов.Организация В (&ОрганизацииУСНФИФО) ТОГДА
	|		ТабСебестоимость.Партия
	|	ИНАЧЕ NULL КОНЕЦ КАК ДокументПартии,
	|	ВЫБОР КОГДА ЕстьNULL(ТабСебестоимость.КоличествоОстаток, 0) = 0 ТОГДА 0
	|	ИНАЧЕ ВЫРАЗИТЬ(ТабСебестоимость.СтоимостьОстаток / ТабСебестоимость.КоличествоОстаток КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР КОГДА ЕстьNULL(ТабСебестоимость.КоличествоОстаток, 0) = 0 ТОГДА 0
	|	ИНАЧЕ ВЫРАЗИТЬ(ТабСебестоимость.СтоимостьРеглОстаток / ТабСебестоимость.КоличествоОстаток КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК ЦенаРегл,
	|	ВЫБОР КОГДА ЕстьNULL(ТабСебестоимость.КоличествоОстаток, 0) = 0 ТОГДА 0
	|	ИНАЧЕ ВЫРАЗИТЬ(ТабСебестоимость.СтоимостьУпрОстаток / ТабСебестоимость.КоличествоОстаток КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК ЦенаУпр,
	|	ВЫБОР КОГДА ЕстьNULL(ТабСебестоимость.КоличествоОстаток, 0) = 0 ТОГДА 0
	|	ИНАЧЕ ВЫРАЗИТЬ(ТабСебестоимость.СтоимостьБезНДСОстаток / ТабСебестоимость.КоличествоОстаток КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	ТабРег.КоличествоОстаток КАК Количество,
	|	ЕстьNULL(ТабСебестоимость.КоличествоОстаток, 0) КАК КоличествоПартии
	|ИЗ РегистрНакопления.ТоварыПереданныеПереработчику.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, 
	|	РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеПереработчику)) КАК ТабСебестоимость
	|ПО ТабРег.АналитикаУчетаНоменклатуры = ТабСебестоимость.АналитикаУчетаНоменклатуры
	|	И (ТабРег.ВидЗапасов = ТабСебестоимость.ВидЗапасов)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&ДатаОст) КАК СтавкиНДСНоменклатуры
	|ПО ТабРег.АналитикаУчетаНоменклатуры.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|	И ТабРег.ВидЗапасов.Организация.СтранаРегистрации = СтавкиНДСНоменклатуры.Страна
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&ДатаОст) КАК ОсновныеСтавкиНДС
	|ПО ТабРег.ВидЗапасов.Организация.СтранаРегистрации = ОсновныеСтавкиНДС.Страна
	|ГДЕ ТабРег.КоличествоОстаток > 0
	|ИТОГИ Сумма(КоличествоПартии) ПО
	|	ТабРег.ВидЗапасов.Организация,
	|	ТабСебестоимость.ВидДеятельностиНДС,
	|	ВЫРАЗИТЬ(ТабРег.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Партнеры),
	|	ВЫБОР КОГДА ТабРег.ВидЗапасов.Организация В (&ОрганизацииУСНФИФО) ТОГДА
	|		ТабСебестоимость.Партия
	|	ИНАЧЕ NULL КОНЕЦ
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСформированныхДокументов = 1;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаНалогообложение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНалогообложение.Следующий() Цикл
			ВыборкаКонтрагент = ВыборкаНалогообложение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагент.Следующий() Цикл
				ВыборкаПартия = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПартия.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаПартия.ДокументПартии) И ВыборкаПартия.КоличествоПартии <= 0 Тогда
						Продолжить;
					КонецЕсли;

					ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
					
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаКонтрагент);
					Если НЕ ЗначениеЗаполнено(ДокОст.ВидДеятельностиНДС) Тогда
						ПараметрыУчетаПоОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(ДокОст.Организация, ДокОст.Дата);
						ДокОст.ВидДеятельностиНДС = ПараметрыУчетаПоОрганизации.ОсновнойВидДеятельностиНДСЗакупки;
					КонецЕсли;
					ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхПереработчикам;
					ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер, ДокОст.Контрагент, Истина);
					Если ЗначениеЗаполнено(ВыборкаПартия.ДокументПартии) Тогда
						ДанныеПервичногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаПартия.ДокументПартии, "Дата, Номер");
						ДокОст.Партия = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, ВыборкаПартия.ДокументПартии, ДанныеПервичногоДокумента.Дата, ДанныеПервичногоДокумента.Номер);
					КонецЕсли;
					Выборка = ВыборкаПартия.Выбрать();
					Пока Выборка.Следующий() Цикл
						Стр = ДокОст.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(Стр, Выборка);
						КоличествоПоСтроке = Выборка.Количество;
						Если ЗначениеЗаполнено(ВыборкаПартия.ДокументПартии) Тогда
							КоличествоПоСтроке = Выборка.КоличествоПартии;
						ИначеЕсли Выборка.КоличествоПартии < Выборка.Количество
							И Выборка.КоличествоПартии > 0 Тогда
							КоличествоПоСтроке = Выборка.КоличествоПартии;
						КонецЕсли;
						Стр.Количество = КоличествоПоСтроке;
						Стр.КоличествоУпаковок = КоличествоПоСтроке;
						Стр.СуммаБезНДС = ?(Выборка.ЦенаБезНДС > 0, Окр(Выборка.ЦенаБезНДС * КоличествоПоСтроке, 2), 0);
						Стр.Сумма = ?(Выборка.Цена > 0 ,Окр(Выборка.Цена * КоличествоПоСтроке, 2),0);
						Стр.СуммаРегл = ?(Выборка.ЦенаРегл > 0, Окр(Выборка.ЦенаРегл * КоличествоПоСтроке, 2), 0);
						Стр.СуммаНДС = Стр.Сумма - Стр.СуммаБезНДС;
						Стр.НДСРегл = ?(Стр.Сумма = 0, 0, Стр.СуммаНДС * (Стр.СуммаРегл / Стр.Сумма));
					КонецЦикла;
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				КонецЦикла; // ВыборкаПартия
			КонецЦикла;  //ВыборкаКонтрагент
		КонецЦикла;  //ВыборкаНалогообложение
	КонецЦикла;    //ВыборкаОрганизация
	ВывестиСообщениеСформированыДокументы("ВводОстатковТоваров", 
									Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхПереработчикам);

КонецПроцедуры
//-- Устарело_Переработка24
Процедура СформироватьДокументыВводаОстатковЗаказыПереработчику2_5()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабРег.ЗаказКлиента КАК Заказ,
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.Характеристика КАК Характеристика,
	|	ТабРег.КодСтроки КАК КодСтроки,
	|	ТабРег.Склад КАК Склад,
	|	ТабРег.Серия КАК Серия,
	|	ТабРег.ЗаказаноОстаток КАК Количество,
	|	ТабРег.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ Материалы
	|ИЗ РегистрНакопления.ЗаказыКлиентов.Остатки(
	|		&ГраницаОст,
	|		ЗаказКлиента ССЫЛКА Документ.ЗаказПереработчику2_5
	|		И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноОстаток>0  
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРег.ЗаказПоставщику КАК Заказ,
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.Характеристика КАК Характеристика,
	|	ТабРег.КодСтроки КАК КодСтроки,
	|	ТабРег.Склад КАК Склад,
	|	ТабРег.ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ ПродукцияРазвернуто
	|ИЗ РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|		&ГраницаОст,
	|		ЗаказПоставщику ССЫЛКА Документ.ЗаказПереработчику2_5
	|		И ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)) КАК ТабРег
	|ГДЕ ТабРег.ЗаказаноОстаток>0 
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ,
	|	Номенклатура,
	|	Характеристика,
	|	КодСтроки,
	|	Склад,
	|	Сумма(Количество),
	|	ЛОЖЬ КАК Отражено
	|ПОМЕСТИТЬ Продукция
	|ИЗ
	|ПродукцияРазвернуто
	|СГРУППИРОВАТЬ ПО
	|	Заказ,
	|	Номенклатура,
	|	Характеристика,
	|	КодСтроки,
	|	Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщику КАК Заказ,
	|	СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ УслугиПереработчиковКОформлению
	|ИЗ РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|		&ГраницаОст,
	|		ЗаказПоставщику ССЫЛКА Документ.ЗаказПереработчику2_5
	|		И ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказ
	|ИЗ (
	|ВЫБРАТЬ Заказ
	|ИЗ Материалы
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Заказ
	|ИЗ Продукция
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Заказ
	|ИЗ УслугиПереработчиковКОформлению
	|) КАК СводЗаказов
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Материалы
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ Продукция
	|;
	|////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ УслугиПереработчиковКОформлению 
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.ВыполнитьПакет();
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаЗаказов = Результат[4].Выгрузить();
	Если ТаблицаЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаМатериалы = Результат[5].Выгрузить();
	ТаблицаПродукция = Результат[6].Выгрузить();
	ТаблицаУслуги = Результат[7].Выгрузить();
	МассивРегистровНакопления = РегистрыНакопленияДокумента("ЗаказПереработчику2_5");
	
	//Определим причину отмены заказов
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовПоставщикам.НайтиПоНаименованию(НСтр("ru = '#Свертка базы';
																								|en = '#Base rollup'"));
	Если ПричинаОтменыЗаказа = Неопределено ИЛИ ПричинаОтменыЗаказа.Пустая() Тогда
		ПричинаОтменыЗаказаОбъект = Справочники.ПричиныОтменыЗаказовПоставщикам.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = НСтр("ru = '#Свертка базы';
														|en = '#Base rollup'");
		ПричинаОтменыЗаказаОбъект.Записать();
		ПричинаОтменыЗаказа = ПричинаОтменыЗаказаОбъект.Ссылка;
	КонецЕсли;
	
	Для Каждого СтрокаЗаказ Из ТаблицаЗаказов Цикл
		Заказ = СтрокаЗаказ.Заказ; // ДокументСсылка.ЗаказПереработчику2_5
		ДокОст = Заказ.ПолучитьОбъект(); // ДокументОбъект.ЗаказПереработчику2_5
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗафиксироватьИзменениеДокументовВПараметрСвертки();

		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		
		СтруктураПоиска = Новый Структура("Заказ", Заказ);
		СтрокиМатериалы = Неопределено;
		СтрокиПродукция = Неопределено;
		СтрокиУслуги = Неопределено;
		Если ТаблицаМатериалы.Количество() > 0 Тогда
			СтрокиМатериалы = ТаблицаМатериалы.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаПродукция.Количество() > 0 Тогда
			СтрокиПродукция = ТаблицаПродукция.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если ТаблицаУслуги.Количество() > 0 Тогда
			СтрокиУслуги = ТаблицаУслуги.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Если СтрокиУслуги = Неопределено Тогда
			ДокОст.СуммаДокумента = 0;
		Иначе
			ДокОст.СуммаДокумента = СтрокиУслуги[0].Сумма;
		КонецЕсли;
		// ТЧ Материалы
		Для Каждого СтрокаТЧ Из ДокОст.ОбеспечениеМатериаламиИРаботами Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			ИначеЕсли СтрокиМатериалы = Неопределено Тогда
				СтрокаТЧ.Отменено = Истина;
				Продолжить;
			КонецЕсли;
			КодСтрокиНайден = Ложь;
			Для Каждого СтрокаТаб Из СтрокиМатериалы Цикл
				Если СтрокаТаб.КодСтроки = СтрокаТЧ.КодСтроки Тогда
					КодСтрокиНайден = Истина;
					Если СтрокаТаб.Количество <> СтрокаТЧ.Количество Тогда
						СтрокаТЧ.Количество = СтрокаТаб.Количество;
						СтрокаТЧ.Сумма = СтрокаТаб.Сумма;
						СтрокаТЧ.Цена = Окр(СтрокаТаб.Сумма / СтрокаТаб.Количество,2);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КодСтрокиНайден Тогда
				СтрокаТЧ.Отменено = Истина;
			КонецЕсли;
		КонецЦикла;
		// ТЧ Продукция
		Для Каждого СтрокаТЧ Из ДокОст.ВыходныеИзделия Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			ИначеЕсли СтрокиПродукция = Неопределено Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Продолжить;
			КонецЕсли;
			КодСтрокиНайден = Ложь;
			Для Каждого СтрокаТаб Из СтрокиПродукция Цикл
				Если СтрокаТаб.КодСтроки = СтрокаТЧ.КодСтроки
					И СтрокаТаб.Номенклатура = СтрокаТЧ.Номенклатура Тогда
					КодСтрокиНайден = Истина;
					Если СтрокаТаб.Количество <> СтрокаТЧ.Количество Тогда
						СтрокаТЧ.Количество = СтрокаТаб.Количество;
					КонецЕсли;
					СтрокаТаб.Отражено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КодСтрокиНайден Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
		КонецЦикла;
		// ТЧ ВозвратныеОтходы
		Для Каждого СтрокаТЧ Из ДокОст.ПобочныеИзделия Цикл
			Если СтрокаТЧ.Отменено Тогда
				Продолжить;
			ИначеЕсли СтрокиПродукция = Неопределено Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
				Продолжить;
			КонецЕсли;
			КодСтрокиНайден = Ложь;
			Для Каждого СтрокаТаб Из СтрокиПродукция Цикл
				Если СтрокаТаб.КодСтроки = СтрокаТЧ.КодСтроки
					И СтрокаТаб.Номенклатура = СтрокаТЧ.Номенклатура Тогда
					КодСтрокиНайден = Истина;
					СтрокаТаб.Отражено = Истина;
					Если СтрокаТаб.Количество <> СтрокаТЧ.Количество Тогда
						СтрокаТЧ.Количество = СтрокаТаб.Количество;
						СтрокаТЧ.Сумма = СтрокаТЧ.Цена * СтрокаТЧ.Количество;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ КодСтрокиНайден Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = ПричинаОтменыЗаказа;
			КонецЕсли;
		КонецЦикла;
		// Добавление строк продукции.
		Если СтрокиПродукция <> Неопределено Тогда
			Для Каждого СтрокаТаб Из СтрокиПродукция Цикл
				Если СтрокаТаб.Отражено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТЧ = ДокОст.ВыходныеИзделия.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаб);
				СтрокаТаб.Отражено = Истина;
			КонецЦикла;
		КонецЕсли;
		//Очистим движения данного заказа, чтобы при перепроведении не мешал контроль остатков
		ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистровНакопления, Заказ);
		// Удалим движения по регистру Заказы... по этому заказу до даты свертки, чтобы не мешал контроль остатков.
		УдалитьДвиженияПоЗаказу("ЗаказыКлиентов", "ЗаказКлиента", Заказ);
		УдалитьДвиженияПоЗаказу("ЗаказыПоставщикам", "ЗаказПоставщику", Заказ);
		
		ПровестиИлиЗаписатьДокумент(ДокОст);
		
	КонецЦикла;
	
	СообщениеСвертки(НСтр("ru = 'Обработаны Заказы переработчику';
							|en = 'Processed Tolling orders'")); 

КонецПроцедуры

#КонецОбласти

Процедура СформироватьДокументыВводаОстатковМатериалыВПроизводстве()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	ТабРег.Организация,
	|	ТабРег.Номенклатура,
	|	ТабРег.Характеристика,
	|	ТабСтоимость.АналитикаУчетаНоменклатуры,
	|	ТабСтоимость.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ТабРег.Подразделение,
	|	ТабРег.Серия,
	|	ВЫБОР КОГДА ЕстьNULL(ТабСтоимость.КоличествоОстаток, 0) = 0 ТОГДА 0
	|	ИНАЧЕ ВЫРАЗИТЬ(ТабСтоимость.СтоимостьОстаток / ТабСтоимость.КоличествоОстаток КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР КОГДА ЕстьNULL(ТабСтоимость.КоличествоОстаток, 0) = 0 ТОГДА 0
	|	ИНАЧЕ ВЫРАЗИТЬ(ТабСтоимость.СтоимостьРеглОстаток / ТабСтоимость.КоличествоОстаток КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК ЦенаРегл,
	|	ВЫБОР КОГДА ЕстьNULL(ТабСтоимость.КоличествоОстаток, 0) = 0 ТОГДА 0
	|	ИНАЧЕ ВЫРАЗИТЬ(ТабСтоимость.СтоимостьУпрОстаток / ТабСтоимость.КоличествоОстаток КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК ЦенаУпр,
	|	ВЫБОР КОГДА ЕстьNULL(ТабСтоимость.КоличествоОстаток, 0) = 0 ТОГДА 0
	|	ИНАЧЕ ВЫРАЗИТЬ(ТабСтоимость.СтоимостьБезНДСОстаток / ТабСтоимость.КоличествоОстаток КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	ТабРег.КоличествоОстаток КАК Количество,
	|	ЕстьNULL(ТабСтоимость.КоличествоОстаток, 0) КАК КоличествоПартии
	|ИЗ РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(&ГраницаОст, Подразделение ССЫЛКА Справочник.СтруктураПредприятия) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаОст, 
	|				РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|				ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)) КАК ТабСтоимость
	|ПО  ТабРег.Номенклатура = ТабСтоимость.АналитикаУчетаНоменклатуры.Номенклатура
	|	И ТабРег.Организация = ТабСтоимость.Организация
	|	И ТабРег.Характеристика = ТабСтоимость.АналитикаУчетаНоменклатуры.Характеристика
	|	И ТабРег.Подразделение = ТабСтоимость.АналитикаУчетаНоменклатуры.МестоХранения
	|ГДЕ ТабРег.КоличествоОстаток > 0
	|ИТОГИ ПО 
	|	ТабРег.Организация,
	|	ТабСтоимость.ВидДеятельностиНДС,
	|	ТабРег.Подразделение";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаНалогообложение = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНалогообложение.Следующий() Цикл
			ВыборкаПодразделение = ВыборкаНалогообложение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПодразделение.Следующий() Цикл
				ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаПодразделение);
				ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхВПроизводство;
				ДокОст.ОтражатьСебестоимость = Истина;
				Выборка = ВыборкаПодразделение.Выбрать();
				Пока Выборка.Следующий() Цикл
					Стр = ДокОст.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(Стр, Выборка);
					Если Выборка.КоличествоПартии < Выборка.Количество
						И Выборка.КоличествоПартии > 0 Тогда
						Стр.Количество = Выборка.КоличествоПартии;
					КонецЕсли;
					Стр.КоличествоУпаковок = Стр.Количество;
					Стр.СуммаБезНДС = ?(Выборка.ЦенаБезНДС > 0, Окр(Выборка.ЦенаБезНДС * Стр.Количество, 2), 0);
					Стр.Сумма = ?(Выборка.Цена > 0 ,Окр(Выборка.Цена * Стр.Количество, 2),0);
					Стр.СуммаРегл = ?(Выборка.ЦенаРегл > 0, Окр(Выборка.ЦенаРегл * Стр.Количество, 2), 0);
					Стр.СуммаНДС = Стр.Сумма - Стр.СуммаБезНДС;
					Стр.НДСРегл = ?(Стр.Сумма = 0, 0, Стр.СуммаНДС * (Стр.СуммаРегл / Стр.Сумма));
				КонецЦикла;
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ВводОстатковТоваров", 
									Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхВПроизводство);

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковНДСПредъявленный()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.Организация КАК Организация,
	|ТабРег.СчетФактура КАК ДокументПоступления,
	|ТабРег.СчетФактура.Дата КАК ДокументПоступленияДата,
	|ТабРег.СчетФактура.Номер КАК ДокументПоступленияНомер,
	|ТабНДС0.ДокументРеализации	КАК ДокументРеализации,
	|ТабНДС0.ДокументРеализации.Номер	КАК ДокументРеализацииНомер,
	|ТабНДС0.ДокументРеализации.Дата	КАК ДокументРеализацииДата,
	|ТабНДС0.ДатаРеализации				КАК ДатаРеализации,
	|ТабРег.Поставщик КАК Контрагент,
	|ТабРег.Поставщик.Партнер КАК Партнер,
	|ТабРег.ВидЦенности КАК ВидЦенностиНДС,
	|ТабРег.СтавкаНДС КАК СтавкаНДС,
	|ТабРег.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|ТабРег.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|ТабРег.НДСОстаток КАК НДС,
	|ТабРег.НДСУпрОстаток КАК НДСУпр
	|ИЗ РегистрНакопления.НДСПредъявленный.Остатки(&ГраницаОст) КАК ТабРег
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НДССостояниеРеализации0 КАК ТабНДС0
	|	ПО ТабРег.РеализацияЭкспорт = ТабНДС0.ДокументРеализации
	|	И ТабРег.Организация = ТабНДС0.Организация
	|	И ТабНДС0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	|ГДЕ ТабРег.НДСОстаток > 0  ИЛИ ТабРег.НДСУпрОстаток > 0
	|ИТОГИ ПО Организация, ВидЦенностиНДС, ВидДеятельностиНДС";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаВидДеятельности = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидДеятельности.Следующий() Цикл
			ВыборкаВидЦенности = ВыборкаВидДеятельности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВидЦенности.Следующий() Цикл
				ДокОст = Документы.ВводОстатковНДСПредъявленного.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаВидЦенности);
				ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНДСПоПриобретеннымЦенностям;
				
				Выборка = ВыборкаВидЦенности.Выбрать();
				Пока Выборка.Следующий() Цикл
					Стр = ДокОст.НДСПредъявленный.Добавить();
					ЗаполнитьЗначенияСвойств(Стр, Выборка);
					Если ЗначениеЗаполнено(Выборка.ДокументПоступления) Тогда
						Стр.ДокументПоступления = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументПоступления, 
							Выборка.ДокументПоступленияДата, Выборка.ДокументПоступленияНомер, Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика);
					ИначеЕсли ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
						Стр.ДокументРеализации = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументРеализации, 
							Выборка.ДокументРеализацииДата, Выборка.ДокументРеализацииНомер, Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Выборка.Партнер) И ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
						Стр.Партнер = Справочники.Партнеры.НашеПредприятие;
					КонецЕсли; 
				КонецЦикла;
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковНДСПредъявленного", 
									Перечисления.ХозяйственныеОперации.ВводОстатковНДСПоПриобретеннымЦенностям);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковРасходыПриУСН()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	ХозяйственнаяОперация,
	|	ДокументВозникновенияРасходовСсылка,
	|	ДокументВозникновенияРасходовДата,
	|	ДокументВозникновенияРасходовНомер,
	|	Партия,
	|	ВидРасходов,
	|	СтатьяРасходов,
	|	СуммаРасходов,
	|	НДС,
	|	СуммаОплаты,
	|	СуммаОтгрузки
	|ИЗ (
	|ВЫБРАТЬ 
	|	Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковРасходовУСНПоТоварам) КАК ХозяйственнаяОперация,
	|	ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходовСсылка,
	|	ДокументВозникновенияРасходов.Дата КАК ДокументВозникновенияРасходовДата,
	|	ДокументВозникновенияРасходов.Номер КАК ДокументВозникновенияРасходовНомер,
	|	Партия,
	|	ВидРасходов,
	|	NULL КАК СтатьяРасходов,
	|	СуммаРасходовОстаток КАК СуммаРасходов,
	|	НДСОстаток КАК НДС,
	|	СуммаОплатыОстаток КАК СуммаОплаты,
	|	СуммаОтгрузкиОстаток КАК СуммаОтгрузки
	|ИЗ РегистрНакопления.РасходыПриУСНТовары.Остатки(&ГраницаОст)
	|ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковРасходовУСНПоМатериалам) КАК ХозяйственнаяОперация,
	|	ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходовСсылка,
	|	ДокументВозникновенияРасходов.Дата КАК ДокументВозникновенияРасходовДата,
	|	ДокументВозникновенияРасходов.Номер КАК ДокументВозникновенияРасходовНомер,
	|	Партия,
	|	ВидРасходов,
	|	NULL КАК СтатьяРасходов,
	|	СуммаРасходовОстаток КАК СуммаРасходов,
	|	НДСОстаток КАК НДС,
	|	СуммаОплатыОстаток КАК СуммаОплаты,
	|	0 КАК СуммаОтгрузки
	|ИЗ РегистрНакопления.РасходыПриУСНМатериалы.Остатки(&ГраницаОст)
	|ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПрочихРасходовУСН) КАК ХозяйственнаяОперация,
	|	ДокументВозникновенияРасходов КАК ДокументВозникновенияРасходовСсылка,
	|	ДокументВозникновенияРасходов.Дата КАК ДокументВозникновенияРасходовДата,
	|	ДокументВозникновенияРасходов.Номер КАК ДокументВозникновенияРасходовНомер,
	|	NULL,
	|	ВидРасходов,
	|	СтатьяРасходов,
	|	СуммаРасходовОстаток КАК СуммаРасходов,
	|	НДСОстаток КАК НДС,
	|	СуммаОплатыОстаток КАК СуммаОплаты,
	|	0 КАК СуммаОтгрузки
	|ИЗ РегистрНакопления.РасходыПриУСН.Остатки(&ГраницаОст)
	|) КАК Свод
	|ИТОГИ ПО Организация, ХозяйственнаяОперация";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаХозОперации = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХозОперации.Следующий() Цикл
			ДокОст = Документы.ВводОстатковРасходовПриУСН.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаХозОперации, Ложь);
			Выборка = ВыборкаХозОперации.Выбрать();
			Пока Выборка.Следующий() Цикл
				Стр = ДокОст.РасходыПриУСН.Добавить();
				ЗаполнитьЗначенияСвойств(Стр, Выборка);
				Если ЗначениеЗаполнено(Выборка.ДокументВозникновенияРасходовСсылка) Тогда
					Стр.ДокументВозникновенияРасходов = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, Выборка.ДокументВозникновенияРасходовСсылка, Выборка.ДокументВозникновенияРасходовДата, Выборка.ДокументВозникновенияРасходовНомер);
				КонецЕсли;
				СтруктураДанныхКонтрагента = Новый Структура("Контрагент, Партнер");
				Если ЗначениеЗаполнено(Выборка.Партия) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураДанныхКонтрагента, Выборка.Партия);
				ИначеЕсли ЗначениеЗаполнено(Выборка.ДокументВозникновенияРасходовСсылка) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураДанныхКонтрагента, Выборка.ДокументВозникновенияРасходовСсылка);
				Иначе
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Стр, СтруктураДанныхКонтрагента);
			КонецЦикла;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковРасходовПриУСН");
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковВнеоборотныхАктивов()
	Если (Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить() = Истина
		И ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4() > ДатаСверткиИБ)
		ИЛИ Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли;
	// 1. ОС
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организация, 
	|	ОсновноеСредство,
	|	Максимум(СтатьяРасходов) КАК СтатьяРасходов,
	|	Максимум(АналитикаРасходов) КАК АналитикаРасходов
	|ПОМЕСТИТЬ РасходыПоИмуществу
	|ИЗ РегистрСведений.СпособыОтраженияРасходовПоИмущественнымНалогам.СрезПоследних(&ГраницаОст)
	|СГРУППИРОВАТЬ ПО
	|	Организация, 
	|	ОсновноеСредство
	|;
	|///////////////////////////////////////////////////////////////////////////////////////////////////
	// Одно и то же ОС может быть принято к учету как собственное и как забалансовое сразу (аренда собственной организации)
	|ВЫБРАТЬ 
	|	ОсновноеСредство,
	|	ВЫБОР КОГДА Минимум(СостояниеБУ) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|   	ИЛИ Максимум(СостояниеБУ) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЗабалансовыйУчет
	|ПОМЕСТИТЬ ОСПринятыКУчету
	|ИЗ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&ГраницаОст)
	|ГДЕ
	|	СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|			ИЛИ СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету) 
	|СГРУППИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|///////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	// 1. Лизинг
	// Определение вида операции
	|	ВЫБОР КОГДА ПереданныеВАрендуОС.ОсновноеСредство IS NOT NULL ТОГДА
	// Передано в аренду
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС)
	|	КОГДА АрендованныеОС.ОсновноеСредство IS NULL ТОГДА
	// Собственное в организации
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковОсновныхСредств)
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ОСПринятыКУчету.ЗабалансовыйУчет ТОГДА
	|			ВЫБОР КОГДА ВЫРАЗИТЬ(АрендованныеОС.Договор КАК Справочник.ДоговорыАренды) <> ЗНАЧЕНИЕ(Справочник.ДоговорыАренды.ПустаяСсылка) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАрендованныхОСЗаБалансом)
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе)
	|		КОНЕЦ
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	СтоимостьОС.Организация,
	|	СтоимостьОС.ОсновноеСредство,
	|	СтоимостьОС.Подразделение,
	|	СтоимостьОС.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	СтоимостьОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ПереданныеВАрендуОС.ОсновноеСредство IS NOT NULL ТОГДА
	|		ПереданныеВАрендуОС.Контрагент
	|	КОГДА АрендованныеОС.ОсновноеСредство IS NOT NULL ТОГДА
	|		АрендованныеОС.Контрагент
	|	КОГДА ОСПринятыКУчету.ЗабалансовыйУчет ТОГДА
	|		ПервоначальныеСведенияОС.Контрагент
	|	ИНАЧЕ СтоимостьОС.Арендатор 
	|	КОНЕЦ 						КАК Контрагент, 
	|	СтоимостьОС.СтоимостьОстаток КАК ТекущаяСтоимостьУУ,
	|	СтоимостьОС.СтоимостьРеглОстаток КАК ТекущаяСтоимостьБУ,
	|	СтоимостьОС.СтоимостьНУОстаток КАК ТекущаяСтоимостьНУ,
	|	СтоимостьОС.СтоимостьПРОстаток КАК ТекущаяСтоимостьПР,
	|	СтоимостьОС.СтоимостьЦФОстаток КАК ТекущаяСтоимостьБУЦФ,
	|	СтоимостьОС.СтоимостьНУЦФОстаток КАК ТекущаяСтоимостьНУЦФ,
	|	СтоимостьОС.СтоимостьПРЦФОстаток КАК ТекущаяСтоимостьПРЦФ,
	|	СтоимостьОС.АмортизационнаяПремияОстаток КАК СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	СтоимостьОС.РезервПереоценкиСтоимостиОстаток КАК РезервПереоценкиСтоимости,
	|	СтоимостьОС.РезервПереоценкиСтоимостиРеглОстаток КАК РезервПереоценкиСтоимостиРегл,
	|	СтоимостьОС.ЗалоговаяСтоимостьОстаток КАК ЗалоговаяСтоимость,
	|	(-1)*АмортизацияОС.АмортизацияОстаток КАК НакопленнаяАмортизацияУУ,
	|	(-1)*АмортизацияОС.АмортизацияРеглОстаток КАК НакопленнаяАмортизацияБУ,
	|	(-1)*АмортизацияОС.АмортизацияНУОстаток КАК НакопленнаяАмортизацияНУ,
	|	(-1)*АмортизацияОС.АмортизацияПРОстаток КАК НакопленнаяАмортизацияПР,
	|	(-1)*АмортизацияОС.АмортизацияВРОстаток КАК НакопленнаяАмортизацияВР, 
	|	(-1)*АмортизацияОС.АмортизацияЦФОстаток КАК НакопленнаяАмортизацияБУЦФ,
	|	(-1)*АмортизацияОС.АмортизацияНУЦФОстаток КАК НакопленнаяАмортизацияНУЦФ,
	|	(-1)*АмортизацияОС.АмортизацияПРЦФОстаток КАК НакопленнаяАмортизацияПРЦФ,
	|	(-1)*АмортизацияОС.РезервПереоценкиАмортизацииОстаток КАК РезервПереоценкиАмортизации,
	|	(-1)*АмортизацияОС.РезервПереоценкиАмортизацииРеглОстаток КАК РезервПереоценкиАмортизацииРегл,
	|	РасходыПоИмуществу.СтатьяРасходов КАК СтатьяРасходовНалог,
	|	РасходыПоИмуществу.АналитикаРасходов КАК АналитикаРасходовНалог,
	|	МестонахождениеОС.МОЛ КАК МОЛ,
	|	ЕстьNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|	МестонахождениеОС.Арендатор КАК Арендатор,
	|	МестонахождениеОС.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора КАК МОЛАрендатора,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
	|	ПорядокУчетаОС.ГруппаФинансовогоУчета КАК ПорядокУчетаОС_ГруппаФинансовогоУчета,
	|	ПорядокУчетаОС.ПоказательНаработки КАК ПоказательНаработки,
	|	ПорядокУчетаОС.ОбъемНаработки КАК ОбъемНаработки,
	|	ПорядокУчетаОСБУ.СостояниеБУ КАК ПорядокУчетаОСБУ_Состояние,
	|	ЕстьNULL(ПорядокУчетаОСБУ.НачислятьАмортизациюБУ, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	ЕстьNULL(ПорядокУчетаОСБУ.НачислятьАмортизациюНУ, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ПорядокУчетаОСБУ.СтатьяРасходовБУ КАК СтатьяРасходовБУ,
	|	ПорядокУчетаОСБУ.СтатьяРасходовНУ КАК СтатьяРасходовНУ,
	|	ПорядокУчетаОСБУ.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ПорядокУчетаОСБУ.АналитикаРасходовБУ КАК АналитикаРасходовБУ, 
	|	ПорядокУчетаОСБУ.АналитикаРасходовНУ КАК АналитикаРасходовНУ,
	|	ПорядокУчетаОСБУ.СтатьяРасходовАмортизационнойПремии КАК СтатьяРасходовАмортизационнойПремии,
	|	ПорядокУчетаОСБУ.АналитикаРасходовАмортизационнойПремии КАК АналитикаРасходовАмортизационнойПремии,
	|	ЕстьNULL(ПорядокУчетаОСБУ.ПередаватьРасходыВДругуюОрганизацию, ЛОЖЬ) КАК ПорядокУчетаОСБУ_ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаОСБУ.ОрганизацияПолучательРасходов КАК ПорядокУчетаОСБУ_ОрганизацияПолучательРасходов,
	|	ЕстьNULL(ПорядокУчетаОСБУ.НалогообложениеНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)) КАК НалогообложениеНДС,
	|	ПорядокУчетаОСУУ.Состояние КАК ПорядокУчетаОСУУ_Состояние,
	|	ЕстьNULL(ПорядокУчетаОСУУ.НачислятьАмортизациюУУ, ЛОЖЬ) КАК НачислятьАмортизациюУУ,
	|	ПорядокУчетаОСУУ.СпособОтраженияРасходов КАК ПорядокУчетаОСУУ_СпособОтраженияРасходов,
	|	ПорядокУчетаОСУУ.СтатьяРасходов КАК СтатьяРасходовУУ,
	|	ПорядокУчетаОСУУ.АналитикаРасходов КАК АналитикаРасходовУУ,
	|	ЕстьNULL(ПорядокУчетаОСУУ.ПередаватьРасходыВДругуюОрганизацию, ЛОЖЬ) КАК ПорядокУчетаОСУУ_ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаОСУУ.ОрганизацияПолучательРасходов КАК ПорядокУчетаОСУУ_ОрганизацияПолучательРасходов,
	|	ПервоначальныеСведенияОС.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведенияОС.ПорядокУчетаБУ КАК ПорядокУчетаБУ,
	|	ПервоначальныеСведенияОС.ПорядокУчетаНУ КАК ПорядокУчетаНУ,
	|	ПервоначальныеСведенияОС.ПорядокУчетаУУ КАК ПорядокУчетаУУ,
	|	ПервоначальныеСведенияОС.МетодНачисленияАмортизацииБУ КАК МетодНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОС.МетодНачисленияАмортизацииНУ КАК МетодНачисленияАмортизацииНУ,
	|	ПервоначальныеСведенияОС.АмортизацияДо2009 КАК НакопленнаяАмортизацияНУДо2009,
	|	ПервоначальныеСведенияОС.ФактическийСрокИспользованияДо2009 КАК СрокИспользованияНУДо2009,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьУУ КАК ПервоначальнаяСтоимостьУУ,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ВЫБОР КОГДА ПереданныеВАрендуОС.ОсновноеСредство IS NOT NULL ТОГДА
	|		ПереданныеВАрендуОС.Договор
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(АрендованныеОС.Договор КАК Справочник.ДоговорыАренды)
	|	КОНЕЦ КАК Договор,
	|	СоставЕГДС.ЕГДС КАК ЕГДС,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ КАК ДатаПринятияКУчетуБУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ КАК ДатаПринятияКУчетуУУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюНУ КАК ДатаПринятияКУчетуНУ,
	|	ЕстьNULL(ПараметрыЦелевогоФинансированияОС.ПрименениеЦелевогоФинансирования, ЛОЖЬ) КАК ПрименениеЦелевогоФинансирования,
	|	ПараметрыЦелевогоФинансированияОС.СтатьяДоходов КАК СтатьяДоходов,
	|	ПараметрыЦелевогоФинансированияОС.АналитикаДоходов КАК АналитикаДоходов,
	|	ВЫБОР КОГДА ОСПринятыКУчету.ЗабалансовыйУчет ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	КОНЕЦ КАК Состояние,
	|	ПараметрыАмортизацииОСБУ.ГрафикАмортизации КАК ГрафикАмортизации,
	|	ПараметрыАмортизацииОСБУ.КоэффициентАмортизацииБУ КАК КоэффициентАмортизацииБУ,
	|	ПараметрыАмортизацииОСБУ.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияБУОстаточный,
	|	ПараметрыАмортизацииОСБУ.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
	|	ПараметрыАмортизацииОСБУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемНаработкиОстаточныйБУ,
	|	ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ КАК СрокИспользованияБУ,
	|	ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияНУ КАК СрокИспользованияНУ,
	|	ПараметрыАмортизацииОСБУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииОСБУ.СтоимостьДляВычисленияАмортизацииЦФ КАК СтоимостьДляВычисленияАмортизацииЦФ,
	|	ПараметрыАмортизацииОСУУ.КоэффициентУскорения КАК КоэффициентУскоренияУУ,
	|	ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииОСУУ.СрокИспользования КАК СрокИспользованияУУ,
	|	ПараметрыАмортизацииОСУУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияУУОстаточный,
	|	ПараметрыАмортизацииОСУУ.МетодНачисленияАмортизации КАК МетодНачисленияАмортизацииУУ,
	|	ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимостьРегл,
	|	ПараметрыАмортизацииОСУУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемНаработкиОстаточныйУУ,
	|	ПараметрыАмортизацииОСУУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииУУ,
	|	ПараметрыАмортизацииОСБУ.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,
	|	ВЫБОР КОГДА ПорядокУчетаОСУУ.ОсновноеСредство ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражатьВУпрУчете,
	|	ВЫБОР КОГДА ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражатьВРеглУчете,
	|	ВЫБОР КОГДА ПорядокУчетаОСБУ.СостояниеНУ ЕСТЬ NULL 
	|		ИЛИ ПорядокУчетаОСБУ.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|		ИЛИ ПорядокУчетаОСБУ.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражатьВНУ
	|ИЗ РегистрНакопления.СтоимостьОС.Остатки(&ГраницаОст) КАК СтоимостьОС
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОСПринятыКУчету КАК ОСПринятыКУчету
	|	ПО ОСПринятыКУчету.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияОС.Остатки(&ГраницаОст) КАК АмортизацияОС
	|	ПО СтоимостьОС.Организация = АмортизацияОС.Организация
	|	И СтоимостьОС.ОсновноеСредство = АмортизацияОС.ОсновноеСредство
	|	И СтоимостьОС.НаправлениеДеятельности = АмортизацияОС.НаправлениеДеятельности
	|	И СтоимостьОС.Подразделение = АмортизацияОС.Подразделение
	|ЛЕВОЕ СОЕДИНЕНИЕ РасходыПоИмуществу КАК РасходыПоИмуществу
	|ПО РасходыПоИмуществу.Организация = СтоимостьОС.Организация
	|	И РасходыПоИмуществу.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&ГраницаОст) КАК МестонахождениеОС
	|ПО МестонахождениеОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(&ГраницаОст) КАК ПорядокУчетаОС
	|ПО ПорядокУчетаОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&ГраницаОст) КАК ПорядокУчетаОСБУ
	|ПО ПорядокУчетаОСБУ.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|	И (ПорядокУчетаОСБУ.Организация = СтоимостьОС.Организация
	|		ИЛИ ПорядокУчетаОСБУ.Организация = МестонахождениеОС.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(&ГраницаОст) КАК ПорядокУчетаОСУУ
	|ПО ПорядокУчетаОСУУ.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|	И (ПорядокУчетаОСУУ.Организация = СтоимостьОС.Организация
	|		ИЛИ ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&ГраницаОст) КАК ПервоначальныеСведенияОС
	|ПО ПервоначальныеСведенияОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|	И (ПервоначальныеСведенияОС.Организация = СтоимостьОС.Организация
	|		ИЛИ ПервоначальныеСведенияОС.Организация = МестонахождениеОС.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияОС.СрезПоследних(&ГраницаОст) КАК ПараметрыЦелевогоФинансированияОС
	|ПО ПараметрыЦелевогоФинансированияОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(&ГраницаОст) КАК ПараметрыАмортизацииОСБУ
	|ПО ПараметрыАмортизацииОСБУ.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|		И (ПараметрыАмортизацииОСБУ.Организация = СтоимостьОС.Организация
	|			ИЛИ ПараметрыАмортизацииОСБУ.Организация = МестонахождениеОС.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(&ГраницаОст) КАК ПараметрыАмортизацииОСУУ
	|ПО ПараметрыАмортизацииОСУУ.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|		И (ПараметрыАмортизацииОСУУ.Организация = СтоимостьОС.Организация
	|			ИЛИ ПараметрыАмортизацииОСУУ.Организация = МестонахождениеОС.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(&ГраницаОст) КАК АрендованныеОС
	|	ПО АрендованныеОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(&ГраницаОст) КАК ПереданныеВАрендуОС
	|	ПО ПереданныеВАрендуОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|	И ПереданныеВАрендуОС.Организация = СтоимостьОС.Организация
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставЕГДС.СрезПоследних(&ГраницаОст) КАК СоставЕГДС
	|ПО СоставЕГДС.ВнеоборотныйАктив = СтоимостьОС.ОсновноеСредство
	|И СоставЕГДС.Организация = СтоимостьОС.Организация 
	|УПОРЯДОЧИТЬ ПО ХозяйственнаяОперация, 
	|	СтоимостьОС.Организация, СтоимостьОС.ГруппаФинансовогоУчета, 
	|	ВЫБОР КОГДА ПорядокУчетаОСУУ.ОсновноеСредство ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ,
	|	ВЫБОР КОГДА ПорядокУчетаОСБУ.ОсновноеСредство ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ,
	|	ВЫБОР КОГДА ПорядокУчетаОСБУ.СостояниеНУ ЕСТЬ NULL 
	|		ИЛИ ПорядокУчетаОСБУ.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|		ИЛИ ПорядокУчетаОСБУ.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ,
	|	ЕстьNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)), 
	|	Контрагент";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ЗапросМодернизация = Новый Запрос;
		ЗапросМодернизация.Текст = "ВЫБРАТЬ
		|	Организация,
		|	ОсновноеСредство,
		|	Период КАК ДатаМодернизации,
		|	НазваниеДокумента КАК НазваниеДокументаМодернизации,
		|	НомерДокумента КАК НомерДокументаМодернизации,
		|	Событие КАК СобытиеМодернизации
		|ИЗ РегистрСведений.СобытияОСОрганизаций 
		|ГДЕ Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
		|	И Период < &ДатаОст
		|УПОРЯДОЧИТЬ ПО Период УБЫВ";
		ЗаполнитьПараметрыЗапросаДатаСвертки(ЗапросМодернизация);
		ТабМодернизация = ЗапросМодернизация.Выполнить().Выгрузить();
		
		ЗапросПринятиеКУчету = Новый Запрос;
		ЗапросПринятиеКУчету.Текст = "ВЫБРАТЬ
		|	Организация,
		|	ОсновноеСредство,
		|	Период КАК ДатаПринятияКУчету,
		|	НазваниеДокумента КАК НазваниеДокументаПринятияКУчету,
		|	НомерДокумента КАК НомерДокументаПринятияКУчету,
		|	Событие КАК СобытиеПринятияКУчету
		|ИЗ РегистрСведений.СобытияОСОрганизаций 
		|ГДЕ Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
		|	ИЛИ Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию)
		|	И Период < &ДатаОст
		|УПОРЯДОЧИТЬ ПО Период УБЫВ";
		ЗаполнитьПараметрыЗапросаДатаСвертки(ЗапросПринятиеКУчету);
		ТабПринятиеКУчету = ЗапросПринятиеКУчету.Выполнить().Выгрузить();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();

	Пока Выборка.СледующийПоЗначениюПоля("ХозяйственнаяОперация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ГруппаФинансовогоУчета") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("ОтражатьВУпрУчете") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ОтражатьВРеглУчете") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("ОтражатьВНУ") Цикл
							Пока Выборка.СледующийПоЗначениюПоля("Местонахождение") Цикл
								Пока Выборка.СледующийПоЗначениюПоля("Контрагент") Цикл
									ДокОст = Документы.ВводОстатковВнеоборотныхАктивов2_4.СоздатьДокумент();
									ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Ложь);
									ДокОст.ОтражатьВБУиНУ = Выборка.ОтражатьВРеглУчете И Выборка.ОтражатьВНУ;
									ДокОст.ОтражатьВБУ = Выборка.ОтражатьВРеглУчете;
									ДокОст.ОтражатьВНУ = Выборка.ОтражатьВНУ;
									ДокОст.ОтражатьВОперативномУчете = Истина;
									ДокОст.ОтражатьВУУ = Выборка.ОтражатьВУпрУчете;
									ДокОст.ВидАктивов = Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство;
									Пока Выборка.Следующий() Цикл
										// Проверка на пустое ОС
										Если НЕ ЗначениеЗаполнено(Выборка.ОсновноеСредство) Тогда
											Продолжить;
										КонецЕсли;
										ЭтоАрендованноеОС = (Выборка.Состояние = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету);
										Если ЭтоАрендованноеОС Тогда
											Стр = ДокОст.АрендованныеОС.Добавить();
											ЗаполнитьЗначенияСвойств(Стр, Выборка);
											Стр.ДатаПринятияКУчету = Выборка.ДатаПринятияКУчетуБУ;
											Продолжить;
										КонецЕсли;
										Стр = ДокОст.ОС.Добавить();
										ЗаполнитьЗначенияСвойств(Стр, Выборка);
										Если Стр.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОпределяетсяРаспределением Тогда
											Стр.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.Распределение;
										Иначе
											Стр.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
										КонецЕсли;
										// Группа фин учета - может быть в нескольких регистрах.
										Если НЕ ЗначениеЗаполнено(Стр.ГруппаФинансовогоУчета) Тогда
											Стр.ГруппаФинансовогоУчета = Выборка.ПорядокУчетаОС_ГруппаФинансовогоУчета;
										КонецЕсли;
										// Данные модернизации.
										СтрокиМодернизация = ТабМодернизация.НайтиСтроки(Новый Структура("Организация, ОсновноеСредство", Выборка.Организация, Выборка.ОсновноеСредство));
										Если СтрокиМодернизация.Количество() > 0 Тогда
											Стр.ОбъемНаработкиОстаточныйБУ = Выборка.СрокИспользованияБУ;
											Стр.ОбъемНаработкиОстаточныйУУ = Выборка.СрокИспользованияУУ;
											ЗаполнитьЗначенияСвойств(Стр, СтрокиМодернизация[0], "НазваниеДокументаМодернизации, НомерДокументаМодернизации");
										КонецЕсли;
										// Данные принятия к учету.
										СтрокиУчет = ТабПринятиеКУчету.НайтиСтроки(Новый Структура("Организация, ОсновноеСредство", Выборка.Организация, Выборка.ОсновноеСредство));
										Если СтрокиУчет.Количество() > 0 Тогда
											ЗаполнитьЗначенияСвойств(Стр, СтрокиУчет[0], "НазваниеДокументаПринятияКУчету, НомерДокументаПринятияКУчету");
										КонецЕсли;
										Стр.ЕстьРезервПереоценки = (Стр.РезервПереоценкиСтоимости > 0 Или Стр.РезервПереоценкиАмортизации > 0);
										Стр.ЕстьРезервПереоценкиРегл = (Стр.РезервПереоценкиСтоимостиРегл > 0 Или Стр.РезервПереоценкиАмортизацииРегл > 0);
										Стр.ОрганизацияПолучательРасходов = ?(ЗначениеЗаполнено(Выборка.ПорядокУчетаОСБУ_ОрганизацияПолучательРасходов),
												Выборка.ПорядокУчетаОСБУ_ОрганизацияПолучательРасходов, Выборка.ПорядокУчетаОСУУ_ОрганизацияПолучательРасходов);
										Стр.ПередаватьРасходыВДругуюОрганизацию = ?(ЗначениеЗаполнено(Выборка.ПорядокУчетаОСБУ_ПередаватьРасходыВДругуюОрганизацию),
												Выборка.ПорядокУчетаОСБУ_ПередаватьРасходыВДругуюОрганизацию, Выборка.ПорядокУчетаОСУУ_ПередаватьРасходыВДругуюОрганизацию);
									КонецЦикла; //Детали
									Если ДокОст.ОС.Количество() > 0 Тогда
										КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
										ДокОст.Записать(РежимЗаписиДокумента.Запись);
									КонецЕсли;
								КонецЦикла; //Контрагент
							КонецЦикла; // Местонахождение 
						КонецЦикла;
					КонецЦикла; //ОтражатьВРеглУчете
				КонецЦикла; //ОтражатьВУпрУчете
			КонецЦикла; //ГруппаФинансовогоУчета
		КонецЦикла; //Организация
	КонецЦикла; //ХозяйственнаяОперация

	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковВнеоборотныхАктивов2_4", НСтр("ru = 'Остатки основных средств';
																						|en = 'Fixed asset balance'"));
	КонецЕсли;
	// 2. НМА
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтоимостьНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	МестоУчетаНМА.Организация КАК Организация,
	|	МестоУчетаНМА.Подразделение КАК Местонахождение,
	|	СтоимостьНМА.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	СтоимостьНМА.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СтоимостьНМА.СтоимостьОстаток КАК ТекущаяСтоимостьУУ,
	|	СтоимостьНМА.СтоимостьРеглОстаток КАК ТекущаяСтоимостьБУ,
	|	СтоимостьНМА.СтоимостьНУОстаток КАК ТекущаяСтоимостьНУ,
	|	СтоимостьНМА.СтоимостьПРОстаток КАК ТекущаяСтоимостьПР,
	|	СтоимостьНМА.СтоимостьЦФОстаток КАК ТекущаяСтоимостьБУЦФ,
	|	СтоимостьНМА.СтоимостьНУЦФОстаток КАК ТекущаяСтоимостьНУЦФ,
	|	СтоимостьНМА.СтоимостьПРЦФОстаток КАК ТекущаяСтоимостьПРЦФ,
	|	СтоимостьНМА.РезервПереоценкиСтоимостиОстаток КАК РезервПереоценкиСтоимости,
	|	СтоимостьНМА.РезервПереоценкиСтоимостиРеглОстаток КАК РезервПереоценкиСтоимостиРегл,
	
	|	(-1)*АмортизацияНМА.АмортизацияОстаток КАК НакопленнаяАмортизацияУУ,
	|	(-1)*АмортизацияНМА.АмортизацияРеглОстаток КАК НакопленнаяАмортизацияБУ,
	|	(-1)*АмортизацияНМА.АмортизацияНУОстаток КАК НакопленнаяАмортизацияНУ,
	|	(-1)*АмортизацияНМА.АмортизацияПРОстаток КАК НакопленнаяАмортизацияПР,
	|	(-1)*АмортизацияНМА.АмортизацияЦФОстаток КАК НакопленнаяАмортизацияБУЦФ,
	|	(-1)*АмортизацияНМА.АмортизацияНУЦФОстаток КАК НакопленнаяАмортизацияНУЦФ,
	|	(-1)*АмортизацияНМА.АмортизацияПРЦФОстаток КАК НакопленнаяАмортизацияПРЦФ,
	|	(-1)*АмортизацияНМА.РезервПереоценкиАмортизацииОстаток КАК РезервПереоценкиАмортизации,
	|	(-1)*АмортизацияНМА.РезервПереоценкиАмортизацииРеглОстаток КАК РезервПереоценкиАмортизацииРегл,
	
	|	ПервоначальныеСведенияНМА.АмортизацияДо2009 КАК АмортизацияДо2009,
	|	ПервоначальныеСведенияНМА.ФактическийСрокИспользованияДо2009 КАК СрокИспользованияНУДо2009,
	|	ПервоначальныеСведенияНМА.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведенияНМА.ДатаПриобретения КАК ДатаПриобретения,
	|	ПервоначальныеСведенияНМА.ДатаПринятияКУчетуБУ КАК ДатаПринятияКУчетуБУ,
	|	ПервоначальныеСведенияНМА.ДатаПринятияКУчетуУУ КАК ДатаПринятияКУчетуУУ, 
	|	ПервоначальныеСведенияНМА.ДатаПринятияКУчетуУУ КАК ДатаПринятияКУчетуНУ,
	|	ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьУУ КАК ПервоначальнаяСтоимостьУУ,
	|	ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ КАК МетодНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииНУ КАК МетодНачисленияАмортизацииНУ,
	|	СоставЕГДС.ЕГДС 									КАК ЕГДС,
	|	ПараметрыЦФ.СтатьяДоходов КАК СтатьяДоходов,
	|	ПараметрыЦФ.АналитикаДоходов КАК АналитикаДоходов,
	|	ПараметрыЦФ.ПрименениеЦелевогоФинансирования КАК ПрименениеЦелевогоФинансирования,
	
	|	ПорядокУчетаНМА.ОбъемНаработки КАК ОбъемНаработки,
	
	|	ПорядокУчетаНМАУУ.АналитикаРасходов КАК АналитикаРасходовУУ,
	|	ПорядокУчетаНМАУУ.СтатьяРасходов КАК СтатьяРасходовУУ,
	|	ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ КАК НачислятьАмортизациюУУ,
	|	ЕстьNULL(ПорядокУчетаНМАУУ.ПередаватьРасходыВДругуюОрганизацию, ЛОЖЬ) КАК ПередаватьРасходыВДругуюОрганизациюУУ,
	|	ПорядокУчетаНМАУУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходовУУ,
	|	ВЫБОР КОГДА ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию)
	|	КОНЕЦ 						КАК ПорядокУчетаУУ, 
	
	|	ПорядокУчетаНМАБУ.АналитикаРасходовБУ КАК АналитикаРасходовБУ, 
	|	ПорядокУчетаНМАБУ.АналитикаРасходовНУ КАК АналитикаРасходовНУ,
	|	ПорядокУчетаНМАБУ.СтатьяРасходовБУ КАК СтатьяРасходовБУ, 
	|	ПорядокУчетаНМАБУ.СтатьяРасходовНУ КАК СтатьяРасходовНУ,
	|	ЕстьNULL(ПорядокУчетаНМАБУ.ПередаватьРасходыВДругуюОрганизацию, ЛОЖЬ) КАК ПередаватьРасходыВДругуюОрганизациюБУ,
	|	ПорядокУчетаНМАБУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходовБУ,
	|	ПорядокУчетаНМАБУ.НачислятьАмортизациюБУ КАК НачислятьАмортизациюБУ,
	|	ПорядокУчетаНМАБУ.НачислятьАмортизациюНУ КАК НачислятьАмортизациюНУ,
	|	ВЫБОР КОГДА ПорядокУчетаНМАБУ.НачислятьАмортизациюБУ ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию)
	|						КОНЕЦ 						КАК ПорядокУчетаБУ,
	|	ВЫБОР КОГДА ПорядокУчетаНМАБУ.НачислятьАмортизациюНУ ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию)
	|	КОНЕЦ 						КАК ПорядокУчетаНУ,

	
	|	ПараметрыАмортизацииНМАБУ.КоэффициентБУ КАК КоэффициентБУ,
	|	ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияБУ КАК СрокИспользованияБУ,
	|	ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияНУ КАК СрокИспользованияНУ,
	|	ПараметрыАмортизацииНМАБУ.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,

	|	ПараметрыАмортизацииНМАУУ.СрокИспользования КАК СрокИспользованияУУ,
	|	ПараметрыАмортизацииНМАУУ.КоэффициентУскорения КАК КоэффициентУскоренияУУ,
	|	ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации КАК МетодНачисленияАмортизацииУУ,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость, 

	|	ВЫБОР КОГДА ПорядокУчетаНМАУУ.Состояние ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражатьВУпрУчете,
	|	ВЫБОР КОГДА ПорядокУчетаНМАБУ.СостояниеБУ ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражатьВБУ,  
	|	ВЫБОР КОГДА ПорядокУчетаНМАБУ.СостояниеНУ ЕСТЬ NULL
	|		ИЛИ ПорядокУчетаНМАБУ.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражатьВНУ
	|ИЗ РегистрНакопления.СтоимостьНМА.Остатки(&ГраницаОст) КАК СтоимостьНМА
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(&ГраницаОст) КАК МестоУчетаНМА
	|ПО СтоимостьНМА.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияНМА.Остатки(&ГраницаОст) КАК АмортизацияНМА
	|ПО СтоимостьНМА.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив
	|	И (СтоимостьНМА.Организация = АмортизацияНМА.Организация
	|		ИЛИ МестоУчетаНМА.Организация = АмортизацияНМА.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(&ГраницаОст) КАК ПорядокУчетаНМА
	|ПО СтоимостьНМА.НематериальныйАктив = ПорядокУчетаНМА.НематериальныйАктив
	|	И (СтоимостьНМА.Организация = ПорядокУчетаНМА.Организация
	|		ИЛИ МестоУчетаНМА.Организация = ПорядокУчетаНМА.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(&ГраницаОст) КАК ПорядокУчетаНМАУУ
	|ПО СтоимостьНМА.НематериальныйАктив = ПорядокУчетаНМАУУ.НематериальныйАктив
	|	И (СтоимостьНМА.Организация = ПорядокУчетаНМАУУ.Организация
	|		ИЛИ МестоУчетаНМА.Организация = ПорядокУчетаНМАУУ.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(&ГраницаОст) КАК ПорядокУчетаНМАБУ
	|ПО СтоимостьНМА.НематериальныйАктив = ПорядокУчетаНМАБУ.НематериальныйАктив
	|	И (СтоимостьНМА.Организация = ПорядокУчетаНМАБУ.Организация
	|		ИЛИ МестоУчетаНМА.Организация = ПорядокУчетаНМАБУ.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&ГраницаОст) КАК ПервоначальныеСведенияНМА
	|ПО СтоимостьНМА.НематериальныйАктив = ПервоначальныеСведенияНМА.НематериальныйАктив
	|	И (СтоимостьНМА.Организация = ПервоначальныеСведенияНМА.Организация
	|		ИЛИ МестоУчетаНМА.Организация = ПервоначальныеСведенияНМА.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияНМА.СрезПоследних(&ГраницаОст) КАК ПараметрыЦФ
	|ПО СтоимостьНМА.НематериальныйАктив = ПараметрыЦФ.НематериальныйАктив
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииНМАБУ.СрезПоследних(&ГраницаОст) КАК ПараметрыАмортизацииНМАБУ
	|ПО СтоимостьНМА.НематериальныйАктив = ПараметрыАмортизацииНМАБУ.НематериальныйАктив
	|	И (СтоимостьНМА.Организация = ПараметрыАмортизацииНМАБУ.Организация
	|		ИЛИ МестоУчетаНМА.Организация = ПараметрыАмортизацииНМАБУ.Организация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииНМАУУ.СрезПоследних(&ГраницаОст) КАК ПараметрыАмортизацииНМАУУ
	|ПО СтоимостьНМА.НематериальныйАктив = ПараметрыАмортизацииНМАУУ.НематериальныйАктив
	|	И (СтоимостьНМА.Организация = ПараметрыАмортизацииНМАУУ.Организация
	|		ИЛИ МестоУчетаНМА.Организация = ПараметрыАмортизацииНМАУУ.Организация)
    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставЕГДС.СрезПоследних(&ГраницаОст) КАК СоставЕГДС
	|ПО СоставЕГДС.ВнеоборотныйАктив = СтоимостьНМА.НематериальныйАктив
	|И СоставЕГДС.Организация = СтоимостьНМА.Организация 

	|ГДЕ (ПорядокУчетаНМАУУ.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
	|	ИЛИ ПорядокУчетаНМАБУ.СостояниеБУ <> ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан))
	|ИТОГИ ПО
	|	МестоУчетаНМА.Организация,
	|	МестоУчетаНМА.Подразделение,
	|	ВЫБОР КОГДА ПорядокУчетаНМАУУ.Состояние ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ,
	|	ВЫБОР КОГДА ПорядокУчетаНМАБУ.СостояниеБУ ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ,
	|	ВЫБОР КОГДА ПорядокУчетаНМАБУ.СостояниеНУ ЕСТЬ NULL
	|		ИЛИ ПорядокУчетаНМАБУ.СостояниеНУ = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ ИСТИНА КОНЕЦ
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделение.Следующий() Цикл
			ВыборкаУУ = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУУ.Следующий() Цикл
				ВыборкаБУ = ВыборкаУУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаБУ.Следующий() Цикл
					ВыборкаНУ = ВыборкаБУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаНУ.Следующий() Цикл
						ДокОст = Документы.ВводОстатковВнеоборотныхАктивов2_4.СоздатьДокумент();
						ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР;
						ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаНУ, Ложь);
						ДокОст.ОтражатьВБУиНУ = ВыборкаНУ.ОтражатьВБУ И ВыборкаНУ.ОтражатьВНУ;
						ДокОст.ОтражатьВОперативномУчете = Истина;
						ДокОст.ОтражатьВУУ = ВыборкаНУ.ОтражатьВУпрУчете;
						ДокОст.ОтражатьВРеглУчете = ВыборкаНУ.ОтражатьВБУ;
						ДокОст.ОтражатьВУпрУчете = ВыборкаНУ.ОтражатьВУпрУчете;
						ДокОст.ВидАктивов = Перечисления.ВидыВнеоборотныхАктивов.НМА;
						Выборка = ВыборкаНУ.Выбрать();
						Пока Выборка.Следующий() Цикл
							Стр = ДокОст.НМА.Добавить();
							ЗаполнитьЗначенияСвойств(Стр, Выборка);
							Если Выборка.ПередаватьРасходыВДругуюОрганизациюБУ Или Выборка.ПередаватьРасходыВДругуюОрганизациюУУ Тогда
								Стр.ПередаватьРасходыВДругуюОрганизацию = Истина;
								Стр.ОрганизацияПолучательРасходов = ?(ЗначениеЗаполнено(Выборка.ОрганизацияПолучательРасходовБУ),
										Выборка.ОрганизацияПолучательРасходовБУ, Выборка.ОрганизацияПолучательРасходовУУ);
							КонецЕсли;
							Стр.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив;
							Стр.ЕстьРезервПереоценки = Стр.РезервПереоценкиАмортизации > 0 Или Стр.РезервПереоценкиСтоимости > 0;
							Стр.ЕстьРезервПереоценкиРегл = Стр.РезервПереоценкиАмортизацииРегл > 0 Или Стр.РезервПереоценкиСтоимостиРегл > 0;
						КонецЦикла;
						КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
						ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Если КоличествоСформированныхДокументов > 1 Тогда
		ВывестиСообщениеСформированыДокументы("ВводОстатковВнеоборотныхАктивов2_4", НСтр("ru = 'Остатки нематериальных активов';
																						|en = 'Intangible asset balance'"));
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДокументыНаработкаТМЦВЭксплуатации()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабСрез.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТабСрез.Значение КАК ТекущееЗначение,
	|	ТабСрез.ПредельныйОбъем КАК ПредельныйОбъем, 
	|	ТЧДок.Ссылка.Дата КАК Период,
	|	ТЧДок.Ссылка.Организация КАК Организация,
	|	ТЧДок.Ссылка.Подразделение КАК Подразделение
	|ИЗ РегистрСведений.НаработкиТМЦВЭксплуатации.СрезПоследних(&ГраницаОст) КАК ТабСрез
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиТМЦВЭксплуатации КАК ТабРег
	|	ПО ТабСрез.ИнвентарныйНомер = ТабРег.ИнвентарныйНомер И ТабРег.Период < &ДатаОст
	|		И ТабСрез.Значение = ТабРег.Значение И ТабСрез.ПредельныйОбъем = ТабРег.ПредельныйОбъем
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НаработкаТМЦВЭксплуатации.Наработки КАК ТЧДок
	|	ПО ТЧДок.Ссылка = ТабРег.Регистратор И ТЧДок.ИнвентарныйНомер = ТабСрез.ИнвентарныйНомер
	|УПОРЯДОЧИТЬ ПО ТабРег.Период УБЫВ
	|ИТОГИ ПО ТабСрез.ИнвентарныйНомер";
	ТабРезультат = Новый ТаблицаЗначений;
	ТабРезультат.Колонки.Добавить("ИнвентарныйНомер");
	ТабРезультат.Колонки.Добавить("Значение");
	ТабРезультат.Колонки.Добавить("ПредельныйОбъем");
	ТабРезультат.Колонки.Добавить("Организация");
	ТабРезультат.Колонки.Добавить("Подразделение");
	ТабРезультат.Колонки.Добавить("ПартияТМЦВЭксплуатации");

	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаИнвНомер = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИнвНомер.Следующий() Цикл
		Выборка = ВыборкаИнвНомер.Выбрать();
		Если Выборка.Следующий() Тогда
			Стр = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
			Выборка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	ТабРезультат.Сортировать("Организация, Подразделение");
	ТекОрганизация = Неопределено;
	ТекПодразделение = Неопределено;
	ДокОст = Неопределено;
	Для Каждого СтрТаб Из ТабРезультат Цикл
		Если ДокОст = Неопределено Или
			СтрТаб.Организация <> ТекОрганизация Или
			СтрТаб.Подразделение <> ТекПодразделение Тогда
			Если ДокОст <> Неопределено Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЕсли;
			ДокОст = Документы.НаработкаТМЦВЭксплуатации.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, СтрТаб, Ложь);
			ТекОрганизация = СтрТаб.Организация;
			ТекПодразделение = СтрТаб.Подразделение;
		КонецЕсли;
		СтрДок = ДокОст.Наработки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДок, Стр);
	КонецЦикла;
	Если ДокОст <> Неопределено Тогда
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
	КонецЕсли;
	
	ВывестиСообщениеСформированыДокументы("НаработкаТМЦВЭксплуатации");

КонецПроцедуры

Процедура СформироватьБухОстатки()
	СчетаБаланс = Новый Массив;
	//03.04
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходныеВложения);
	//09
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы); 
	//10.11 - больше не формируется документом ввода остатков по ТМЦ в эксплуатации  
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации); 
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
    СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ИнвентарьВЭксплуатации);
	
	//11
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ЖивотныеНаВыращиванииИОткорме);
	//14
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМЦ);
	//15
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ);
	//16
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиМЦ);

	//41.11 41.12 41.ДР
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ДопРасходыТовары);
	//42
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
	//45.04
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	//46
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ВыполненныеЭтапыПоНезавершеннымРаботам);
	//50 отд субсчета
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);
	
	//55 отд субсчета
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.Аккредитивы);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ЧековыеКнижки);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.АккредитивыВал);
	//57
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);

	//58.01, 58.02, 58.04, 58.05 (58.03 вводится другими документами).
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПаиИАкции);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ДолговыеЦенныеБумаги);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ВкладыПоДоговоруПростогоТоварищества);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПриобретенныеПрава);
	
	
	//59
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодОбесценениеФинансовыхВложений);
	
	//60.03, 62.03
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные);

	//63
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	//68
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	//69,70,73
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям);
	//75, 76.01.9
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСУчредителями);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
	//76.04 76.07
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАренде);

	//76.21-76.49
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников);
	//76.НА, 76.ОТ	
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
	//77,79-84,86
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции);	
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РезервныйКапитал);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ДобавочныйКапитал);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансирование);
	//90 субсчетами
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	//субсчет 90.07 формируется в другом месте: документами ввода остатков прочих расходов.
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);

	//91 по субсчетам
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов);
	//94,96.09 (другие субсчета 96 не сворачиваются).
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходовПрочие);
	//98,99
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов);
	СчетаБаланс.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
	// забаланс
	СчетаЗабаланс = Новый Массив;
	//002, 003, 005-009
	СчетаЗабаланс.Добавить(ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);
	СчетаЗабаланс.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку_);
	СчетаЗабаланс.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеПринятоеДляМонтажа);
	СчетаЗабаланс.Добавить(ПланыСчетов.Хозрасчетный.БланкиСтрогойОтчетности);
	СчетаЗабаланс.Добавить(ПланыСчетов.Хозрасчетный.СписаннаяВУбытокЗадолженностьДебиторов);
	СчетаЗабаланс.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствПолученные);
	СчетаЗабаланс.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствВыданные);
	//011
	СчетаЗабаланс.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредстваСданныеВАренду);

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК КорСчет,
	|	ХозрасчетныйОстатки.Счет КАК СчетДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный) КАК СчетКт,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Валюта КАК ВалютаДт,
	|	NULL КАК ВалютаКт,
	|	ХозрасчетныйОстатки.Подразделение КАК ПодразделениеДт,
	|	NULL КАК ПодразделениеКт,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	NULL КАК НаправлениеДеятельностиКт,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК ВалютнаяСумма,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК Количество,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВР,
	|	ХозрасчетныйОстатки.СуммаУУОстатокДт КАК СуммаУУ,
	|	ХозрасчетныйОстатки.СуммаФООстатокДт КАК СуммаФО,
	|	ХозрасчетныйОстатки.Счет.ВидыСубконто.(
	|		ВидСубконто КАК ВидСубконто
	|	) КАК ВидыСубконто
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОст, Счет В ИЕРАРХИИ (&СчетаБаланс)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ЕстьNULL(ХозрасчетныйОстатки.СуммаОстатокДт,0) <> 0 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный),
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Организация,
	|	NULL,
	|	ХозрасчетныйОстатки.Валюта,
	|	NULL,
	|	ХозрасчетныйОстатки.Подразделение,
	|	NULL,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности, 
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт,
	|	ХозрасчетныйОстатки.КоличествоОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаУУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаФООстатокКт,
	|	ХозрасчетныйОстатки.Счет.ВидыСубконто.(
	|		ВидСубконто
	|	)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОст, Счет В ИЕРАРХИИ (&СчетаБаланс)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ЕстьNULL(ХозрасчетныйОстатки.СуммаОстатокКт,0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Счет,
	|	NULL,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Валюта,
	|	NULL,
	|	ХозрасчетныйОстатки.Подразделение,
	|	NULL,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности, 
	|	NULL,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаУУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаФООстатокДт,
	|	ХозрасчетныйОстатки.Счет.ВидыСубконто.(
	|		ВидСубконто КАК ВидСубконто
	|	) КАК ВидыСубконто
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОст, Счет В ИЕРАРХИИ (&СчетаЗабаланс)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ЕстьNULL(ХозрасчетныйОстатки.СуммаОстатокДт,0) <> 0 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	NULL,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Организация,
	|	NULL,
	|	ХозрасчетныйОстатки.Валюта,
	|	NULL,
	|	ХозрасчетныйОстатки.Подразделение,
	|	NULL,
	|	ХозрасчетныйОстатки.НаправлениеДеятельности, 
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт,
	|	ХозрасчетныйОстатки.КоличествоОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаУУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаФООстатокКт,
	|	ХозрасчетныйОстатки.Счет.ВидыСубконто.(
	|		ВидСубконто
	|	)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОст, Счет В ИЕРАРХИИ (&СчетаЗабаланс)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ЕстьNULL(ХозрасчетныйОстатки.СуммаОстатокКт,0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация, КорСчет
	|ИТОГИ ПО
	|	Организация, КорСчет";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Запрос.УстановитьПараметр("СчетаБаланс", СчетаБаланс);
	Запрос.УстановитьПараметр("СчетаЗабаланс", СчетаЗабаланс);
	КоличествоСформированныхДокументов = 1;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаКС = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКС.Следующий() Цикл
			ДокОст = Документы.ОперацияБух.СоздатьДокумент();
			СуммаОперации = 0;
			СуммаОперацииУУ = 0;
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов,ВыборкаКС,Ложь);
			ДокОст.ДополнительныеСвойства.Вставить("СверткаИБ", Истина);
			ДокОст.Записать(РежимЗаписиДокумента.Проведение);
			ДокОстСсылка = ДокОст.Ссылка;
			РБНаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			РБНаборЗаписей.Отбор.Регистратор.Установить(ДокОстСсылка);

			ВыборкаКС = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКС.Следующий() Цикл
				Выборка = ВыборкаКС.Выбрать();
				Пока Выборка.Следующий() Цикл
					Проводка = РБНаборЗаписей.Добавить();
					Проводка.Период = ДокОст.Дата;
					ЗаполнитьЗначенияСвойств(Проводка, Выборка);
					ЗначенияАналитики = Новый Структура("Субконто1, Субконто2, Субконто3");
					ЗаполнитьЗначенияСвойств(ЗначенияАналитики, Выборка);
					Если ЗначениеЗаполнено(Выборка.СчетДт) И
						Выборка.СчетДт <> ПланыСчетов.Хозрасчетный.Вспомогательный Тогда
						ВидыСубконтоДт = Выборка.ВидыСубконто.Выгрузить();
						// Аналитика дебета.
						Для НомерСубконто = 1 По ВидыСубконтоДт.Количество() Цикл
							Проводка.СубконтоДт[ВидыСубконтоДт[НомерСубконто - 1].ВидСубконто] = ЗначенияАналитики["Субконто"+НомерСубконто];
						КонецЦикла;
					КонецЕсли;
					Если ЗначениеЗаполнено(Выборка.СчетКт) И
						Выборка.СчетКт <> ПланыСчетов.Хозрасчетный.Вспомогательный Тогда
						ВидыСубконтоКт = Выборка.ВидыСубконто.Выгрузить();

						// Аналитика кредита.
						Для НомерСубконто = 1 По ВидыСубконтоКт.Количество() Цикл
							Проводка.СубконтоКт[ВидыСубконтоКт[НомерСубконто - 1].ВидСубконто] = ЗначенияАналитики["Субконто"+НомерСубконто];
						КонецЦикла;
					КонецЕсли;
					СуммаОперации = СуммаОперации + Выборка.Сумма;
					СуммаОперацииУУ = СуммаОперацииУУ + Выборка.СуммаУУ;
				КонецЦикла;
				ДокОст.СуммаОперации = СуммаОперации;
				ДокОст.СуммаУУ = СуммаОперацииУУ;
				ДокОст.Записать(РежимЗаписиДокумента.Проведение);
				РБНаборЗаписей.Записать();
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ОперацияБух");

КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковВзаиморасчетыЛизинг()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|ТабРег.Договор КАК Договор,
	|ТабРег.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ ОткрытыеДоговоры
	|ИЗ РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(&ГраницаОст, Договор ССЫЛКА Справочник.ДоговорыАренды) КАК ТабРег
	|;
	|///////////////////////////////////////////
	|ВЫБРАТЬ
	|ТабРег.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|ТабРег.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|ТабРег.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|ТабРег.Договор КАК Договор,
	// Суммы арендных обязательств
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства) ТОГДА
	|	ТабРег.СуммаОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК АрендныеОбязательстваОстаток,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства) ТОГДА
	|	ТабРег.СуммаРеглОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК АрендныеОбязательстваОстатокРегл,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства) ТОГДА
	|	ТабРег.СуммаУпрОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК АрендныеОбязательстваОстатокУпр,
	// Суммы выкупной стоимости
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимость) ТОГДА
	|	ТабРег.СуммаОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК ВыкупнаяСтоимостьОстаток,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимость) ТОГДА
	|	ТабРег.СуммаРеглОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК ВыкупнаяСтоимостьОстатокРегл,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимость) ТОГДА
	|	ТабРег.СуммаУпрОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК ВыкупнаяСтоимостьОстатокУпр,
	// Сумма НДС
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.НДС) ТОГДА
	|	ТабРег.СуммаОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК НДСОстаток,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.НДС) ТОГДА
	|	ТабРег.СуммаРеглОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК НДСОстатокРегл,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.НДС) ТОГДА
	|	ТабРег.СуммаУпрОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК НДСОстатокУпр,
	// Услуги по аренде
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАренде)
	|		ИЛИ ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАрендеАванс) ТОГДА
	|	ТабРег.СуммаОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК УслугаПоАрендеОстаток,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАренде)
	|		ИЛИ ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАрендеАванс) ТОГДА
	|	ТабРег.СуммаРеглОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК УслугаПоАрендеОстатокРегл,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАренде)
	|		ИЛИ ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАрендеАванс) ТОГДА
	|	ТабРег.СуммаУпрОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК УслугаПоАрендеОстатокУпр,
	// Проценты
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.Проценты) ТОГДА
	|	ТабРег.СуммаОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК ПроцентыОстаток,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.Проценты) ТОГДА
	|	ТабРег.СуммаРеглОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК ПроцентыОстатокРегл,
	|ВЫБОР КОГДА ТабРег.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.Проценты) ТОГДА
	|	ТабРег.СуммаУпрОстаток
	|ИНАЧЕ
	|	0
	|КОНЕЦ КАК ПроцентыОстатокУпр
	|ПОМЕСТИТЬ ТабРасчеты
	|ИЗ РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(&ГраницаОст, Договор В (ВЫБРАТЬ Договор ИЗ ОткрытыеДоговоры) И ТипСуммы В (&ТипыСумм)) КАК ТабРег
	|ГДЕ ТабРег.СуммаОстаток <> 0
	|;
	|///////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|ТабРег.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|ТабРег.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|ТабРег.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|ТабРег.Договор КАК Договор,
	|ТабРег.ТипСуммы КАК ТипПлатежа,
	|ТабРег.РасчетныйДокумент КАК РасчетныйДокумент,
	|ТабРег.СуммаОстаток КАК Сумма,
	|ТабРег.СуммаУпрОстаток КАК СуммаУпр,
	|ТабРег.СуммаРеглОстаток КАК СуммаРегл
	|ПОМЕСТИТЬ ТабАвансы
	|ИЗ РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(&ГраницаОст, Договор В (ВЫБРАТЬ Договор ИЗ ОткрытыеДоговоры) И ТипСуммы НЕ В (&ТипыСумм)) КАК ТабРег
	|ГДЕ ТабРег.СуммаОстаток > 0  
	|;
	|///////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|ТабРасчеты.Организация,
	|ТабРасчеты.Партнер,
	|ТабРасчеты.Контрагент,
	|ТабРасчеты.Договор,
	|МАКСИМУМ(УсловияДоговора.ДатаВыкупа) КАК ДатаВыкупа,
	|МАКСИМУМ(УсловияДоговора.ДатаНачалаАренды) КАК ДатаНачалаАренды,
	|МАКСИМУМ(УсловияДоговора.ДатаПервогоПлатежа) КАК ДатаПервогоПлатежа,
	|МАКСИМУМ(УсловияДоговора.ДатаПервогоОбеспечительногоПлатежа) КАК ДатаПервогоОбеспечительногоПлатежа,
	|МАКСИМУМ(УсловияДоговора.СтавкаНДС) КАК СтавкаНДС,
	|МАКСИМУМ(УсловияДоговора.СуммаОбеспечительногоПлатежа) КАК СуммаОбеспечительногоПлатежа,
	|МАКСИМУМ(УсловияДоговора.СуммаУслугПоАренде) КАК СуммаУслугПоАренде,
	|МАКСИМУМ(УсловияДоговора.СуммаВыкупаПредметовАренды) КАК СуммаВыкупаПредметовАренды,
	|МАКСИМУМ(УсловияДоговора.СуммаПроцентов) КАК СуммаПроцентов,  
	|МАКСИМУМ(УсловияДоговора.СтоимостьПредметовАренды) КАК Стоимость,
    |МАКСИМУМ(УсловияДоговора.СуммаНДС) КАК СуммаНДС,
	|МАКСИМУМ(УсловияДоговора.СрокДней) КАК СрокДней,  
	|МАКСИМУМ(УсловияДоговора.СрокЛет) КАК СрокЛет,
	|МАКСИМУМ(УсловияДоговора.СрокМес) КАК СрокМес,
    |МАКСИМУМ(УсловияДоговора.ПроцентнаяСтавка) КАК ПроцентнаяСтавка,
	|МАКСИМУМ(УсловияДоговора.ПериодичностьОплат) КАК ПериодичностьОплат,
	|МАКСИМУМ(УсловияДоговора.ПериодичностьНачислений) КАК ПериодичностьНачислений,   
	|МАКСИМУМ(УсловияДоговора.ОплатаУслугиПоАренде) КАК ОплатаУслугиПоАренде,
    |МАКСИМУМ(УсловияДоговора.НачислениеУслугиПоАренде) КАК НачислениеУслугиПоАренде, 
	|МАКСИМУМ(УсловияДоговора.ГрафикНачисленияПроцентовВведенВручную) КАК ГрафикНачисленияПроцентовВведенВручную,
    |МАКСИМУМ(УсловияДоговора.АктуальныеУсловияДоговора) КАК АктуальныеУсловияДоговора,

	|Сумма(ТабРасчеты.АрендныеОбязательстваОстаток) КАК АрендныеОбязательстваОстаток,
	|Сумма(ТабРасчеты.АрендныеОбязательстваОстатокУпр) КАК АрендныеОбязательстваОстатокУпр,
	|Сумма(ТабРасчеты.АрендныеОбязательстваОстатокРегл) КАК АрендныеОбязательстваОстатокРегл,
	|ИСТИНА КАК АрендныеОбязательстваСальдоДебетовое,
	|Сумма(ТабРасчеты.ВыкупнаяСтоимостьОстаток) КАК ВыкупнаяСтоимостьОстаток,
	|Сумма(ТабРасчеты.ВыкупнаяСтоимостьОстатокУпр) КАК ВыкупнаяСтоимостьОстатокУпр,
	|Сумма(ТабРасчеты.ВыкупнаяСтоимостьОстатокРегл) КАК ВыкупнаяСтоимостьОстатокРегл,
	|ИСТИНА КАК ВыкупнаяСтоимостьСальдоДебетовое,
	|Сумма(ТабРасчеты.НДСОстаток) КАК НДСОстаток,
	|Сумма(ТабРасчеты.НДСОстатокРегл) КАК НДСОстатокРегл,
	|Сумма(ТабРасчеты.НДСОстатокУпр) КАК НДСОстатокУпр,
	|ИСТИНА КАК НДССальдоДебетовое,
	|Сумма(ТабРасчеты.ПроцентыОстаток) КАК ПроцентыОстаток,
	|Сумма(ТабРасчеты.ПроцентыОстатокРегл) КАК ПроцентыОстатокРегл,
	|Сумма(ТабРасчеты.ПроцентыОстатокУпр) КАК ПроцентыОстатокУпр,
	|ИСТИНА КАК ПроцентыСальдоДебетовое,
	|Сумма(ТабРасчеты.УслугаПоАрендеОстаток) КАК УслугаПоАрендеОстаток,
	|Сумма(ТабРасчеты.УслугаПоАрендеОстатокРегл) КАК УслугаПоАрендеОстатокРегл,
	|Сумма(ТабРасчеты.УслугаПоАрендеОстатокУпр) КАК УслугаПоАрендеОстатокУпр,
	|ИСТИНА КАК УслугаПоАрендеСальдоДебетовое,
	|Сумма(IsNULL(ТабАвансы.Сумма, 0)) КАК СуммаАвансы,
	|Сумма(IsNULL(ТабАвансы.СуммаУпр, 0)) КАК СуммаАвансыУпр,
	|Сумма(IsNULL(ТабАвансы.СуммаРегл, 0)) КАК СуммаАвансыРегл,
	|МАКСИМУМ(ТабАвансы.ТипПлатежа) КАК ТипПлатежаАвансы,
	|МАКСИМУМ(ТабАвансы.РасчетныйДокумент) КАК РасчетныйДокументАвансы
	|ИЗ ТабРасчеты КАК ТабРасчеты
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабАвансы
	|ПО ТабРасчеты.Организация = ТабАвансы.Организация И ТабРасчеты.Партнер = ТабАвансы.Партнер И ТабРасчеты.Контрагент = ТабАвансы.Контрагент
	|	И ТабРасчеты.Договор = ТабАвансы.Договор 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды.СрезПоследних(&ГраницаОст) КАК УсловияДоговора
	|ПО УсловияДоговора.Договор = ТабРасчеты.Договор
	|СГРУППИРОВАТЬ ПО
	|	ТабРасчеты.Организация,
	|	ТабРасчеты.Партнер,
	|	ТабРасчеты.Контрагент,
	|	ТабРасчеты.Договор
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	ТипыСумм = Новый Массив;
	ТипыСумм.Добавить(Перечисления.ТипыПлатежейПоАренде.ВыкупнаяСтоимость);
	ТипыСумм.Добавить(Перечисления.ТипыПлатежейПоАренде.Проценты);
	ТипыСумм.Добавить(Перечисления.ТипыПлатежейПоАренде.НДС);
	ТипыСумм.Добавить(Перечисления.ТипыПлатежейПоАренде.УслугаПоАренде);
	ТипыСумм.Добавить(Перечисления.ТипыПлатежейПоАренде.УслугаПоАрендеАванс);
	ТипыСумм.Добавить(Перечисления.ТипыПлатежейПоАренде.АрендныеОбязательства);

	Запрос.УстановитьПараметр("ТипыСумм", ТипыСумм);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	КолонкиСумм = Новый Массив;
	КолонкиСумм.Добавить("АрендныеОбязательстваОстаток");
	КолонкиСумм.Добавить("АрендныеОбязательстваОстатокУпр");
	КолонкиСумм.Добавить("АрендныеОбязательстваОстатокРегл");
	КолонкиСумм.Добавить("ВыкупнаяСтоимостьОстаток");
	КолонкиСумм.Добавить("ВыкупнаяСтоимостьОстатокУпр");
	КолонкиСумм.Добавить("ВыкупнаяСтоимостьОстатокРегл");
	КолонкиСумм.Добавить("НДСОстаток");
	КолонкиСумм.Добавить("НДСОстатокУпр");
	КолонкиСумм.Добавить("НДСОстатокРегл");
	КолонкиСумм.Добавить("ПроцентыОстаток");
	КолонкиСумм.Добавить("ПроцентыОстатокУпр");
	КолонкиСумм.Добавить("ПроцентыОстатокРегл");
	КолонкиСумм.Добавить("УслугаПоАрендеОстаток");
	КолонкиСумм.Добавить("УслугаПоАрендеОстатокУпр");
	КолонкиСумм.Добавить("УслугаПоАрендеОстатокРегл");


	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОст = Документы.ВводОстатковВзаиморасчетовПоАренде.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Истина);
		Для Каждого КолонкаСумм Из КолонкиСумм Цикл
			Если Выборка[КолонкаСумм] < 0 Тогда
				ДокОст[КолонкаСумм] = (-1) * Выборка[КолонкаСумм];
			КонецЕсли;
		КонецЦикла;  
		ПараметрыЗаполнения = Документы.ВводОстатковВзаиморасчетовПоАренде.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ДокОст);

		ДоступныеТипыНалогообложенияЗакупки = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСЗакупки(ПараметрыЗаполнения);
		Если ДоступныеТипыНалогообложенияЗакупки.Количество() > 0 Тогда  
			ДокОст.НалогообложениеНДС =  ДоступныеТипыНалогообложенияЗакупки[0];
		КонецЕсли;
		// Авансы если есть.
		Если Выборка.СуммаАвансы > 0 Или Выборка.СуммаАвансыУпр > 0 Или Выборка.СуммаАвансыРегл > 0 Тогда
			НоваяСтрокаАванс = ДокОст.АвансыПоДоговорамАренды.Добавить();
			НоваяСтрокаАванс.ТипПлатежа = Выборка.ТипПлатежаАвансы;
			НоваяСтрокаАванс.РасчетныйДокумент = Выборка.РасчетныйДокументАвансы;
			НоваяСтрокаАванс.Сумма = Выборка.СуммаАвансы;
			НоваяСтрокаАванс.СуммаРегл = Выборка.СуммаАвансыРегл;
			НоваяСтрокаАванс.СуммаУпр = Выборка.СуммаАвансыУпр;
		КонецЕсли; 
		// Графики заполняются из актуальных условий договора.
		Если ЗначениеЗаполнено(Выборка.АктуальныеУсловияДоговора) И ТипЗнч(Выборка.АктуальныеУсловияДоговора) <> Тип("ДокументСсылка.КорректировкаРегистров") 
			И ТипЗнч(Выборка.АктуальныеУсловияДоговора) <> Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов") Тогда
			Для Каждого СтрГрафик Из Выборка.АктуальныеУсловияДоговора.ГрафикОплатУслуг Цикл
				Если СтрГрафик.Дата <= КонецДня(ДатаСверткиИБ) Тогда
					Продолжить;
				КонецЕсли;
				НовСтрГрафик = ДокОст.ГрафикОплатУслуг.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрГрафик, СтрГрафик);
			КонецЦикла;  
			Для Каждого СтрГрафик Из Выборка.АктуальныеУсловияДоговора.ГрафикНачисленияУслуг Цикл
				Если СтрГрафик.Дата <= КонецДня(ДатаСверткиИБ) Тогда
					Продолжить;
				КонецЕсли;
				НовСтрГрафик = ДокОст.ГрафикНачисленияУслуг.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрГрафик, СтрГрафик);
			КонецЦикла;
  			Для Каждого СтрГрафик Из Выборка.АктуальныеУсловияДоговора.ГрафикНачисленияПроцентов Цикл
				Если СтрГрафик.Дата <= КонецДня(ДатаСверткиИБ) Тогда
					Продолжить;
				КонецЕсли;
				НовСтрГрафик = ДокОст.ГрафикНачисленияПроцентов.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрГрафик, СтрГрафик);
			КонецЦикла; 
		КонецЕсли;	
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ВводОстатковВзаиморасчетовПоАренде", "");

КонецПроцедуры

Процедура СформироватьОстаткиАлкогольнойПродукцииЕГАИС()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ОрганизацияЕГАИС,
	|АлкогольнаяПродукция,
	|Справка2,
	|КоличествоОстаток КАК Количество
	|ИЗ РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(&ГраницаОст)
	|ИТОГИ ПО ОрганизацияЕГАИС";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ДокОст = Документы.ОстаткиЕГАИС.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаОрганизация, Ложь);
		ДокОст.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1;
		Выборка = ВыборкаОрганизация.Выбрать();
		Пока Выборка.Следующий() Цикл
			Стр = ДокОст.ОстаткиПоДаннымЕГАИС.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
		КонецЦикла;
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ОстаткиЕГАИС", "");

КонецПроцедуры

Процедура ОбработатьПараметрыНачисленияНалогов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТабСвод.ОсновноеСредство,
	|ТабСвод.ДокументРегистрации
	|ИЗ
	|(ВЫБРАТЬ
	|	ТабСрез.ОсновноеСредство КАК ОсновноеСредство,
	|	ТабРегистрация.Регистратор КАК ДокументРегистрации
	|ИЗ РегистрСведений.ПараметрыНачисленияЗемельногоНалога.СрезПоследних(&ГраницаОст) КАК ТабСрез
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияЗемельногоНалога КАК ТабРегистрация
	|	ПО ТабРегистрация.Организация = ТабСрез.Организация И ТабРегистрация.ОсновноеСредство = ТабСрез.ОсновноеСредство
	|		И ТабРегистрация.ВидЗаписи = ЗНАЧЕНИЕ(Перечисление.ВидЗаписиОРегистрации.Регистрация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияЗемельногоНалога КАК ТабСнятие
	|	ПО ТабСнятие.Организация = ТабСрез.Организация И ТабСнятие.ОсновноеСредство = ТабСрез.ОсновноеСредство
	|		И ТабСнятие.ВидЗаписи = ЗНАЧЕНИЕ(Перечисление.ВидЗаписиОРегистрации.СнятиеСРегистрационногоУчета)
	|		И ТабСнятие.Период > ТабРегистрация.Период
	|ГДЕ ТабСнятие.Регистратор ЕСТЬ NULL И ТабРегистрация.Регистратор ЕСТЬ НЕ NULL
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабСрез.ОсновноеСредство КАК ОсновноеСредство,
	|	ТабРегистрация.Регистратор КАК ДокументРегистрации
	|ИЗ РегистрСведений.ПараметрыНачисленияТранспортногоНалога.СрезПоследних(&ГраницаОст) КАК ТабСрез
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияТранспортногоНалога КАК ТабРегистрация
	|	ПО ТабРегистрация.Организация = ТабСрез.Организация И ТабРегистрация.ОсновноеСредство = ТабСрез.ОсновноеСредство
	|		И ТабРегистрация.ВидЗаписи = ЗНАЧЕНИЕ(Перечисление.ВидЗаписиОРегистрации.Регистрация)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияТранспортногоНалога КАК ТабСнятие
	|	ПО ТабСнятие.Организация = ТабСрез.Организация И ТабСнятие.ОсновноеСредство = ТабСрез.ОсновноеСредство
	|		И ТабСнятие.ВидЗаписи = ЗНАЧЕНИЕ(Перечисление.ВидЗаписиОРегистрации.СнятиеСРегистрационногоУчета)
	|		И ТабСнятие.Период > ТабРегистрация.Период
	|ГДЕ ТабСнятие.Регистратор ЕСТЬ NULL И ТабРегистрация.Регистратор ЕСТЬ НЕ NULL
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабСрез.ОсновноеСредство,
	|	ТабРегистрация.Регистратор
	|ИЗ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(&ГраницаОст) КАК ТабСрез
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество КАК ТабРегистрация
	|ПО ТабСрез.ОсновноеСредство = ТабРегистрация.ОсновноеСредство
	|	И ТабСрез.Организация = ТабРегистрация.Организация
	|) КАК ТабСвод
	|ИТОГИ ПО ТабСвод.ДокументРегистрации";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументы.Следующий() Цикл
		ДокОст = ВыборкаДокументы.ДокументРегистрации.ПолучитьОбъект();
		Если ДокОст = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДополнитьКомментарийДокумента(ДокОст, Комментарий_НеУдалятьПриСверткеБазы);
		ТипДокументаВводОстатков = ТипЗнч(ДокОст.Ссылка);
		Если (ТипДокументаВводОстатков = Тип("ДокументСсылка.ПараметрыНачисленияЗемельногоНалога")
			Или ТипДокументаВводОстатков = Тип("ДокументСсылка.ПараметрыНачисленияТранспортногоНалога"))Тогда
			ВыборкаОбъекты = ВыборкаДокументы.Выбрать();
			СтруктураПоиска = Новый Структура("ОсновноеСредство");
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаТЧ Из ДокОст.ОС Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
				Если НЕ ВыборкаОбъекты.НайтиСледующий(СтруктураПоиска) Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
				КонецЕсли;
				
				ВыборкаОбъекты.Сбросить();
			КонецЦикла;
			Для Каждого СтрокаУд Из МассивУдаляемыхСтрок Цикл
				ДокОст.ОС.Удалить(СтрокаУд);
			КонецЦикла;
		КонецЕсли;
		ПровестиИлиЗаписатьДокумент(ДокОст);
	КонецЦикла;
	СообщениеСвертки(НСтр("ru = 'Обработаны Параметры начисления налогов (транспортного, земельного, имущественного)';
							|en = 'Processed Financial details of charging taxes (vehicle tax, land value tax, property tax)'")); 


КонецПроцедуры

Процедура СформироватьДокументыПрослеживаемыеТоварыВСоставеОС()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	РНПТ,
	|	КодТНВЭД,
	|	ОсновноеСредство,
	|	КоличествоПоРНПТОстаток КАК КоличествоПоРНПТ
	|ИЗ РегистрНакопления.ПрослеживаемыеТоварыВСоставеОС.Остатки(&ГраницаОст)
	|ГДЕ КоличествоПоРНПТОстаток > 0
	|ИТОГИ ПО Организация, РНПТ, КодТНВЭД";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	КоличествоСформированныхДокументов = 1;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
    ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл 
		ВыборкаРНПТ = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРНПТ.Следующий() Цикл
			ВыборкаКодТНВЭД = ВыборкаРНПТ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКодТНВЭД.Следующий() Цикл
				ДокОст = Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, ВыборкаКодТНВЭД, Ложь);
                Выборка = ВыборкаКодТНВЭД.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрОС = ДокОст.ОсновныеСредства.Добавить();
					ЗаполнитьЗначенияСвойств(СтрОС, Выборка);
				КонецЦикла;
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;	
			КонецЦикла;
 		КонецЦикла;
	КонецЦикла; 
	СообщениеСвертки(НСтр("ru = 'Сформированы УведомлениеОбОстаткахПрослеживаемыхТоваров для регистра ПрослеживаемыеТоварыВСоставеОС';
							|en = 'Generated УведомлениеОбОстаткахПрослеживаемыхТоваров для регистра ПрослеживаемыеТоварыВСоставеОС'"));
КонецПроцедуры
//-- НЕ УТ

Процедура СкорректироватьКоличествоВТЧДокумента(МассивСтрокТЧ, КоличествоПередано, МассивСтрокКУдалению, ДокументИзменен)
	Для Каждого СтрокаТЧ Из МассивСтрокТЧ Цикл
		Если СтрокаТЧ.Количество > КоличествоПередано Тогда
			СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоПередано;
			КоличествоПередано = 0;
			ДокументИзменен = Истина;
		Иначе
			МассивСтрокКУдалению.Добавить(СтрокаТЧ);
			КоличествоПередано = КоличествоПередано - СтрокаТЧ.Количество;
		КонецЕсли;
		Если КоличествоПередано = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СоздатьПервичныйДокументДляСтрокиРасчетов(ДокОст, ОбъектРасчетов, СтрокаРасчетов)
	Если ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		Возврат ОбъектРасчетов;
	КонецЕсли;
	Если ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов Тогда
		ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту;
	ИначеЕсли ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам Тогда
		ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика;
	ИначеЕсли ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
		ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента;
	ИначеЕсли ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
		ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику; 
	КонецЕсли;
	ТипОбъектаДоговор = Ложь;
	ТипОбъектаЗаказ = Ложь;
	ТипОбъектаДоговор = ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями");
	ТипОбъектаЗаказ = ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказКлиента") 
	
		//++ НЕ УТКА      
		
		//++ Устарело_Переработка24
		Или ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказДавальца")
		//-- Устарело_Переработка24
		
		//-- НЕ УТКА
		
		//++ НЕ УТ
		
		//++ Устарело_Переработка24
		Или ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПереработчику")
		//-- Устарело_Переработка24
		
		//-- НЕ УТ       
		
		Или ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику");
	// Попытка создать первичный документ по объекту расчетов
	Если НЕ (ТипОбъектаДоговор Или ТипОбъектаЗаказ) Тогда
		СтруктураРеквизитовШапки = Новый Структура("Дата, Номер");
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитовШапки,ОбъектРасчетов);
		Если ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.Претензии") Тогда
			ДанныеОбъектаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "ДатаРегистрации, Код");
			СтруктураРеквизитовШапки.Дата = ДанныеОбъектаРасчетов.ДатаРегистрации;
			СтруктураРеквизитовШапки.Номер = ДанныеОбъектаРасчетов.Код; 
		ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ПодарочныеСертификаты") Тогда
			Если ЗначениеЗаполнено(СтрокаРасчетов.ДатаРасчетногоДокумента) Тогда
				СтруктураРеквизитовШапки.Дата = СтрокаРасчетов.ДатаРасчетногоДокумента;
			Иначе
				СтруктураРеквизитовШапки.Дата = ДатаСверткиИБ;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаРасчетов.НомерРасчетногоДокумента) Тогда
				СтруктураРеквизитовШапки.Номер = СтрокаРасчетов.НомерРасчетногоДокумента;
			Иначе
				КодОбъектаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Код");
				Если ЗначениеЗаполнено(КодОбъектаРасчетов) Тогда
					СтруктураРеквизитовШапки.Номер = КодОбъектаРасчетов;
				Иначе
					СтруктураРеквизитовШапки.Номер = ""+ДокОст.Номер+"/"+СтрокаРасчетов.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтруктураРеквизитовШапки.Свойство("Дата") И СтруктураРеквизитовШапки.Свойство("Номер") Тогда
			Если ТипЗнч(СтруктураРеквизитовШапки.Дата) <> Тип("Дата") Тогда
				СтруктураРеквизитовШапки.Дата = ДатаСверткиИБ;
			КонецЕсли;
			ПДСсылка = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, ОбъектРасчетов, СтруктураРеквизитовШапки.Дата, СтруктураРеквизитовШапки.Номер, ТипПервичногоДокумента, СтрокаРасчетов.Сумма, СтрокаРасчетов);
			Если ЗначениеЗаполнено(ПДСсылка) Тогда
				// Подменяем объект на первичный документ - убираем ссылку на документ сворачиваемого периода.
				СтрокаРасчетов.ОбъектРасчетов = ПДСсылка;
				Возврат ПДСсылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Создание первичного документа по строке ввода остатков.
	ПервичныйДок = Документы.ПервичныйДокумент.СоздатьДокумент();
	ПервичныйДок.ТипПервичногоДокумента = ТипПервичногоДокумента;
	ПервичныйДок.Дата = ДатаСверткиИБ;
	ЗаполнитьЗначенияСвойств(ПервичныйДок, ДокОст, "Организация");
	ЗаполнитьЗначенияСвойств(ПервичныйДок, СтрокаРасчетов, "Договор, СуммаРегл, Партнер, Контрагент");
	Если ТипОбъектаДоговор Тогда 
		СтрокаРасчетов.Договор = ОбъектРасчетов;
		ПервичныйДок.Договор = ОбъектРасчетов;
	КонецЕсли;
	ПервичныйДок.Валюта = СтрокаРасчетов.ВалютаВзаиморасчетов;
	ПервичныйДок.СуммаДокумента = СтрокаРасчетов.Сумма;
	Если ЗначениеЗаполнено(СтрокаРасчетов.НомерРасчетногоДокумента) Тогда
		ПервичныйДок.НомерВходящегоДокумента = СтрокаРасчетов.НомерРасчетногоДокумента;
	Иначе
		ПервичныйДок.НомерВходящегоДокумента = ""+ДокОст.Номер+"/"+СтрокаРасчетов.НомерСтроки;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРасчетов.ДатаРасчетногоДокумента) Тогда
		ПервичныйДок.ДатаВходящегоДокумента = СтрокаРасчетов.ДатаРасчетногоДокумента;
	Иначе
		ПервичныйДок.ДатаВходящегоДокумента = ПервичныйДок.Дата;
	КонецЕсли;
	ПредставлениеДокументаОстатков = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ввод начальных остатков № %1 от %2 / %3';
																									|en = 'Enter start balance № %1 from %2 / %3'"), ДокОст.Номер, ДокОст.Дата, СтрокаРасчетов.НомерСтроки);
	ПервичныйДок.Комментарий = Комментарий_СформированСверткойБазы+" ["+ПредставлениеДокументаОстатков + "]";
	Если ТипОбъектаДоговор Тогда
		ПервичныйДок.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
		ПервичныйДок.НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов,"НалогообложениеНДС");
	ИначеЕсли ТипОбъектаЗаказ Тогда
		ПервичныйДок.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам;
		ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, "НалогообложениеНДС, Подразделение");
		ПервичныйДок.НалогообложениеНДС = ДанныеЗаказа.НалогообложениеНДС;
		ПервичныйДок.Подразделение = ДанныеЗаказа.Подразделение;
	Иначе
		ПервичныйДок.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
		ДанныеОбъекта = Новый Структура("НалогообложениеНДС, Подразделение");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ОбъектРасчетов);
		ПервичныйДок.НалогообложениеНДС = ДанныеОбъекта.НалогообложениеНДС;
		ПервичныйДок.Подразделение = ДанныеОбъекта.Подразделение;
	КонецЕсли;
	ПервичныйДок.ОбменДанными.Загрузка = Истина; 
	УдалитьПрефиксИзНомера(ПервичныйДок);
	ПервичныйДок.Записать(РежимЗаписиДокумента.Запись);
	флОтказ = Ложь;
	Документы.ПервичныйДокумент.АктуализироватьОбъектРасчетов(ПервичныйДок, флОтказ);
	// Если объект расчетов пуст, подставим туда созданный первичный документ.
	Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.ОбъектРасчетов)
		// Объект расчетов из выборки не подходит по типу к реквизиту табличной части.
		Или СтрокаРасчетов.ОбъектРасчетов <> ОбъектРасчетов Тогда
		СтрокаРасчетов.ОбъектРасчетов = ПервичныйДок.Ссылка;
	КонецЕсли;
	Возврат ПервичныйДок.Ссылка;
КонецФункции

Процедура ЗаполнитьПДВДокументахОплаты(ОбъектРасчетов, ПервичныйДокумент)
	ИскомыйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ОбъектРасчетов);
	Если НЕ ЗначениеЗаполнено(ИскомыйОбъектРасчетов) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоДЗ,
	|	Расшифровка.НомерСтроки КАК НомерСтроки
	|ИЗ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК Шапка
	|ПО Шапка.Ссылка = Расшифровка.Ссылка
	|ГДЕ Шапка.Дата > &ДатаСвертки И Шапка.ПометкаУдаления = ЛОЖЬ
	|И Расшифровка.ОбъектРасчетов = &ОбъектРасчетов
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоДЗ,
	|	Расшифровка.НомерСтроки КАК НомерСтроки
	|ИЗ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК Шапка
	|ПО Шапка.Ссылка = Расшифровка.Ссылка
	|ГДЕ Шапка.Дата > &ДатаСвертки И Шапка.ПометкаУдаления = ЛОЖЬ
	|И Расшифровка.ОбъектРасчетов = &ОбъектРасчетов
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоДЗ,
	|	Расшифровка.НомерСтроки КАК НомерСтроки
	|ИЗ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Шапка
	|ПО Шапка.Ссылка = Расшифровка.Ссылка
	|ГДЕ Шапка.Дата > &ДатаСвертки И Шапка.ПометкаУдаления = ЛОЖЬ
	|И Расшифровка.ОбъектРасчетов = &ОбъектРасчетов
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоДЗ,
	|	Расшифровка.НомерСтроки КАК НомерСтроки
	|ИЗ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК Расшифровка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК Шапка
	|ПО Шапка.Ссылка = Расшифровка.Ссылка
	|ГДЕ Шапка.Дата > &ДатаСвертки И Шапка.ПометкаУдаления = ЛОЖЬ
	|И Расшифровка.ОбъектРасчетов = &ОбъектРасчетов
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоДЗ,
	|	Расшифровка.НомерСтроки КАК НомерСтроки
	|ИЗ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК Расшифровка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК Шапка
	|ПО Шапка.Ссылка = Расшифровка.Ссылка
	|ГДЕ Шапка.Дата > &ДатаСвертки И Шапка.ПометкаУдаления = ЛОЖЬ
	|И Расшифровка.ОбъектРасчетов = &ОбъектРасчетов
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоДЗ,
	|	Расшифровка.НомерСтроки КАК НомерСтроки
	|ИЗ Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК Расшифровка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК Шапка
	|ПО Шапка.Ссылка = Расшифровка.Ссылка
	|ГДЕ Шапка.Дата > &ДатаСвертки И Шапка.ПометкаУдаления = ЛОЖЬ
	|И Расшифровка.ОбъектРасчетов = &ОбъектРасчетов
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЭтоДЗ,
	|	Расшифровка.НомерСтроки КАК НомерСтроки
	|ИЗ Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК Расшифровка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК Шапка
	|ПО Шапка.Ссылка = Расшифровка.Ссылка
	|ГДЕ Шапка.Дата > &ДатаСвертки И Шапка.ПометкаУдаления = ЛОЖЬ
	|И Расшифровка.ОбъектРасчетов = &ОбъектРасчетов
	|ИТОГИ ПО Ссылка";
	Запрос.УстановитьПараметр("ДатаСвертки", КонецДня(ДатаСверткиИБ));
	Запрос.УстановитьПараметр("ОбъектРасчетов", ИскомыйОбъектРасчетов);
	ВыборкаДок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДок.Следующий() Цикл
		ДокОбъект = ВыборкаДок.Ссылка.ПолучитьОбъект();
		Выборка = ВыборкаДок.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(ВыборкаДок.Ссылка) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
				Если Выборка.ЭтоДЗ Тогда
					СтрокаРасчетов = ДокОбъект.ДебиторскаяЗадолженность[Выборка.НомерСтроки-1];
				Иначе
					СтрокаРасчетов = ДокОбъект.КредиторскаяЗадолженность[Выборка.НомерСтроки-1];
				КонецЕсли;
			Иначе
				СтрокаРасчетов = ДокОбъект.РасшифровкаПлатежа[Выборка.НомерСтроки-1];
			КонецЕсли;
			СтрокаРасчетов.ОбъектРасчетов = ПервичныйДокумент;
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыДляФормированияДокументовВводаОстатков

Процедура ПолучитьТаблицыОстатковНаСкладах()
	//Остатки, по которым будут заполняться серии и помещения
	
	//Остатки на складах по помещениям
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ 
	|ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|ТоварыНаСкладах.Характеристика КАК Характеристика,
	|ТоварыНаСкладах.Склад КАК Склад,
	|ТоварыНаСкладах.Помещение КАК Помещение,
	|ТоварыНаСкладах.Назначение КАК Назначение,
	|ТоварыНаСкладах.ВНаличииОстаток КАК Количество
	|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ГраницаОст,  
	|					Склад.ИспользоватьСкладскиеПомещения = Истина
	|				)	КАК ТоварыНаСкладах
	|ГДЕ ВНаличииОстаток>0";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	ТаблицаОстаткиНаСкладахПоПомещениям = Результат.Выгрузить();
	
	ТаблицаОстаткиНаСкладахПоНазначению = Новый ТаблицаЗначений;
	Если ИспользоватьНазначения Тогда
		ТаблицаОстаткиНаСкладахПоНазначению = ТаблицаОстаткиНаСкладахПоПомещениям.Скопировать();
		ТаблицаОстаткиНаСкладахПоНазначению.Индексы.Добавить("Номенклатура, Характеристика, Склад, Помещение");
	КонецЕсли;
	ТаблицаОстаткиНаСкладахПоПомещениям.Индексы.Добавить("Номенклатура, Характеристика, Склад");

	//Остатки по сериям для  стратегии Авторасчет серий по FEFO
	Запрос = Новый Запрос; 

	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Назначение,
	|	Склад,
	|	Помещение,
	|	Сумма(КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиСерийПоFEFO
	|ИЗ (
	|	ВЫБРАТЬ 
	|		ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|		ДвиженияСерийТоваров.Характеристика КАК Характеристика,
	|		ДвиженияСерийТоваров.Серия КАК Серия,
	|		ДвиженияСерийТоваров.Назначение КАК Назначение,
	|		ДвиженияСерийТоваров.Отправитель КАК Склад,
	|		ДвиженияСерийТоваров.ПомещениеОтправителя КАК Помещение,
	|		(-1)*ДвиженияСерийТоваров.Количество КАК КоличествоОстаток
		|ИЗ РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ТЧПолитикаУчетаСерий
	|		ПО ТЧПолитикаУчетаСерий.Склад = ДвиженияСерийТоваров.Отправитель
	|			И ТЧПолитикаУчетаСерий.Ссылка = ДвиженияСерийТоваров.Номенклатура.ВидНоменклатуры
	|	ГДЕ ТЧПолитикаУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий)
	|		И ДвиженияСерийТоваров.Отправитель ССЫЛКА Справочник.Склады
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|		ДвиженияСерийТоваров.Характеристика КАК Характеристика,
	|		ДвиженияСерийТоваров.Серия КАК Серия,
	|		ДвиженияСерийТоваров.Назначение КАК Назначение,
	|		ДвиженияСерийТоваров.Получатель КАК Склад,
	|		ДвиженияСерийТоваров.ПомещениеПолучателя КАК Помещение,
	|		ДвиженияСерийТоваров.Количество КАК КоличествоОстаток
	|	ИЗ РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ТЧПолитикаУчетаСерий
	|		ПО ТЧПолитикаУчетаСерий.Склад = ДвиженияСерийТоваров.Получатель
	|			И ТЧПолитикаУчетаСерий.Ссылка = ДвиженияСерийТоваров.Номенклатура.ВидНоменклатуры
	|	ГДЕ ТЧПолитикаУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий)
	|		И ДвиженияСерийТоваров.Получатель ССЫЛКА Справочник.Склады
	|	) КАК ТабСвод
	|СГРУППИРОВАТЬ ПО 
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Назначение,
	|	Склад,
	|	Помещение
	|;
	|ВЫБРАТЬ 
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	ТоварыНаСкладах.Помещение КАК Помещение,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Серия КАК Серия,
	|	ТоварыНаСкладах.Назначение КАК Назначение,
	|	ОстаткиСерийПоFEFO.Серия КАК СерияПоFEFO,
	|	ЕстьNULL(ОстаткиСерийПоFEFO.КоличествоОстаток,0) КАК КоличествоПоFEFO,
	|	ТоварыНаСкладах.ВНаличииОстаток КАК Количество
	|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ГраницаОст, 
	|							(Склад.ИспользоватьСерииНоменклатуры = Истина 
	|							И Номенклатура.ВидНоменклатуры.ИспользоватьСерии = Истина) 
	|				)	КАК ТоварыНаСкладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСерийПоFEFO 
	|ПО  ТоварыНаСкладах.Номенклатура = ОстаткиСерийПоFEFO.Номенклатура И
	|	ТоварыНаСкладах.Характеристика = ОстаткиСерийПоFEFO.Характеристика И
	|	ТоварыНаСкладах.Склад = ОстаткиСерийПоFEFO.Склад И
	|	ТоварыНаСкладах.Помещение = ОстаткиСерийПоFEFO.Помещение И
	|	ТоварыНаСкладах.Назначение = ОстаткиСерийПоFEFO.Назначение И
	|	ЕстьNULL(ОстаткиСерийПоFEFO.КоличествоОстаток,0) > 0 
	|ГДЕ ВНаличииОстаток>0 
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Помещение,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика,
	|	ТоварыНаСкладах.Серия,
	|	ТоварыНаСкладах.Назначение,
	|	ОстаткиСерийПоFEFO.Серия.ГоденДо Убыв
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаОстаткиНаСкладахПоСериям = Новый ТаблицаЗначений;
	Для Каждого КолонкаТЗ Из ТаблицаОстаткиНаСкладахПоПомещениям.Колонки Цикл
		ТаблицаОстаткиНаСкладахПоСериям.Колонки.Добавить(КолонкаТЗ.Имя, КолонкаТЗ.ТипЗначения);
	КонецЦикла;
	ТаблицаОстаткиНаСкладахПоСериям.Колонки.Добавить("Серия");
	Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("Назначение") Цикл
							Если ЗначениеЗаполнено(Выборка.Серия) Тогда
								НоваяСтрока = ТаблицаОстаткиНаСкладахПоСериям.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								Продолжить;
							КонецЕсли;
							//Серии вычисляем по FEFO
							КоличествоРаспределить = Выборка.Количество;
							Пока Выборка.Следующий() Цикл
								Если Выборка.КоличествоПоFEFO <= 0 ИЛИ НЕ ЗначениеЗаполнено(Выборка.СерияПоFEFO) Тогда
									Продолжить;
								КонецЕсли;
								НоваяСтрока = ТаблицаОстаткиНаСкладахПоСериям.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								НоваяСтрока.Серия = Выборка.СерияПоFEFO;
								НоваяСтрока.Количество = Мин(Выборка.КоличествоПоFEFO, КоличествоРаспределить);
								КоличествоРаспределить = КоличествоРаспределить - НоваяСтрока.Количество;
								Если КоличествоРаспределить = 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если КоличествоРаспределить > 0 Тогда
								//Недостающее запишем с пустой серией
								НоваяСтрока = ТаблицаОстаткиНаСкладахПоСериям.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
								НоваяСтрока.Количество = КоличествоРаспределить;
							КонецЕсли;
						КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Назначение")
					КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
				КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
			КонецЦикла;//Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Помещение") Цикл
	КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	ТаблицаОстаткиНаСкладахПоСериям.Индексы.Добавить("Номенклатура, Характеристика, Склад, Помещение");
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ПорядковыйНомерДокумента, Выборка, ЗаполнятьФлагиОтраженияВУчетах = Истина)
	ДокОст.Дата = КонецДня(ДатаСверткиИБ);
	ДокОст.Комментарий = Комментарий_СформированСверткойБазы+?(ПорядковыйНомерДокумента>0," ["+ПорядковыйНомерДокумента+"]","");
	ДокОст.Ответственный = ТекущийПользователь; 
	
	ВалютаИМенеджер = Новый Структура("Валюта, Менеджер", ВалютаРегламентированногоУчета, ТекущийПользователь);
	ЗаполнитьЗначенияСвойств(ДокОст, ВалютаИМенеджер);
	ЗаполнитьЗначенияСвойств(ДокОст, Выборка);
	Если ЗаполнятьФлагиОтраженияВУчетах Тогда
		ДокОст.ОтражатьВОперативномУчете = Истина;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
			ДокОст.ОтражатьВБУиНУ = Истина;
			ДокОст.ОтражатьВУУ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаСобственныеТовары(Выборка, КоличествоСформированныхДокументов, ЕстьСФ = Ложь, ТаблицаОстатковПоГТД = Неопределено)
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
					Пока Выборка.СледующийПоЗначениюПоля("ДокументПартии") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("СчетФактура") Цикл
							ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
							ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка);
							ДокОст.ОтражатьСебестоимость = Истина;
							ДокОст.Менеджер = ТекущийПользователь;
							Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
								ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
							КонецЕсли;

							ДокОст.ВидДеятельностиНДС = ДокОст.НалогообложениеНДС;
							ДокОст.ЦенаВключаетНДС = Истина;
							ДанныеПартии = Новый Структура("Контрагент, Партнер");
							ДокументПоступленияСсылка = Неопределено;
							Если ЗначениеЗаполнено(Выборка.ДокументПартии) Тогда
								ЗаполнитьЗначенияСвойств(ДанныеПартии, Выборка.ДокументПартии);
								ДокументПоступленияСсылка = Выборка.ДокументПартии;
							ИначеЕсли ЕстьСФ И ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
								ДокОст.Контрагент = Выборка.СчетФактура.Контрагент;
								Если НЕ ЗначениеЗаполнено(ДокОст.Партнер) Тогда
									ДокОст.Партнер = Выборка.СчетФактура.Контрагент.Партнер;
								КонецЕсли;
								// Партия по основанию счета фактуры.
								ДокументПоступленияСсылка = Выборка.СчетФактура.ДокументыОснования[0].ДокументОснование;
							КонецЕсли;
							Если ЗначениеЗаполнено(ДанныеПартии.Контрагент) Тогда
								ДокОст.Контрагент = ДанныеПартии.Контрагент;
								Если ЗначениеЗаполнено(ДанныеПартии.Партнер) Тогда
									ДокОст.Партнер = ДанныеПартии.Партнер;
								Иначе
									ДокОст.Партнер = ДанныеПартии.Контрагент.Партнер;
								КонецЕсли;
							КонецЕсли;
							ТекПартия = Неопределено;
							Если ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
								ДанныеПервичногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата, Номер");
								ДокОст.Партия = ПреобразоватьСсылкуВПервичныйДокумент(Ложь, ДокументПоступленияСсылка, ДанныеПервичногоДокумента.Дата, ДанныеПервичногоДокумента.Номер);
								ТекПартия = ДокОст.Партия;
							КонецЕсли;

							СоответствиеДокументовПоПомещениям = Новый Соответствие();

							Пока Выборка.Следующий() Цикл
								ВыбранныеВариантыПомещений = Новый Массив;
								Если ЕстьСФ Тогда
									КоличествоРаспределить = Мин(Выборка.Количество, Выборка.КоличествоМаксимум);
								Иначе 
									КоличествоРаспределить = Выборка.Количество;
								КонецЕсли;
								
								//Определим помещение
								Если Выборка.ИспользоватьСкладскиеПомещения Тогда
									ПодобратьПодходящиеПомещения(Выборка, ВыбранныеВариантыПомещений, КоличествоРаспределить);
								КонецЕсли; //Если Выборка.ИспользоватьСкладскиеПомещения Тогда
								Если НЕ Выборка.ИспользоватьСкладскиеПомещения ИЛИ ВыбранныеВариантыПомещений.Количество() = 0 Тогда
									ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ДокОст.Склад, ДокОст.Помещение, ДокОст.Дата, Истина);
									Если ИспользоватьАдресноеХранение И НЕ ЗначениеЗаполнено(ДокОст.ЗонаПриемки) Тогда
										ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(ДокОст.Склад, ДокОст.Помещение);
									КонецЕсли;
									НоваяСтрока = ДокОст.Товары.Добавить();
									ЗаполнитьСуммыИКоличестваТабличнойЧасти(НоваяСтрока, Выборка, ЕстьСФ);
								Иначе
									
									Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
										ТекПомещение = СтрокаПомещение.Помещение;
										НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ТекПартия, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);

										НоваяСтрока = ДокОст.Товары.Добавить();
										ЗаполнитьСуммыИКоличестваТабличнойЧасти(НоваяСтрока, Выборка, ЕстьСФ);
										
										//Пересчитаем суммы и количества в соответствии с остатком по помещению
										КоличествоПоПомещению = Мин(КоличествоРаспределить, СтрокаПомещение.Количество);
										СтрокаПомещение.Количество = СтрокаПомещение.Количество - КоличествоПоПомещению;
										Если КоличествоПоПомещению <> НоваяСтрока.Количество Тогда
											КоэффициентПересчета = КоличествоПоПомещению / Выборка.Количество;
											НоваяСтрока.Количество = КоличествоПоПомещению;
											НоваяСтрока.Сумма = ОКР(КоэффициентПересчета * НоваяСтрока.Сумма,2);
											НоваяСтрока.СуммаБезНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаБезНДС,2);
											НоваяСтрока.СуммаСНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаСНДС,2);
											НоваяСтрока.СуммаНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаНДС,2);
											НоваяСтрока.СуммаРегл = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаРегл,2);
											НоваяСтрока.НДСРегл = ОКР(КоэффициентПересчета * НоваяСтрока.НДСРегл,2);
										КонецЕсли;
										//Заполним связанные данные
										ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
										КоличествоРаспределить = КоличествоРаспределить - НоваяСтрока.Количество;
										Если КоличествоРаспределить <=0 Тогда
											Прервать;
										КонецЕсли;
									КонецЦикла; //Для Каждого СтрокаПомещение ИЗ ВыбранныеВариантыПомещений Цикл
									Если КоличествоРаспределить > 0 Тогда
										//не все распределилось по помещениям
										//Возможно, это товары к поступлению по ордерной схеме
										//Попытка определить помещение
										//Если не нашлось - будет пустое помещение
										ТекПомещение = ПроверитьПоступлениеПоОрдеру(Выборка, КоличествоРаспределить);
										НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ТекПартия, ДокОст, СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов);
										НоваяСтрока = ДокОст.Товары.Добавить();
										ЗаполнитьСуммыИКоличестваТабличнойЧасти(НоваяСтрока, Выборка, ЕстьСФ);
										КоэффициентПересчета = КоличествоРаспределить / Выборка.Количество;
										НоваяСтрока.Количество = КоличествоРаспределить;
										НоваяСтрока.Сумма = ОКР(КоэффициентПересчета * НоваяСтрока.Сумма,2);
										НоваяСтрока.СуммаБезНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаБезНДС,2);
										НоваяСтрока.СуммаСНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаСНДС,2);
										НоваяСтрока.СуммаНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаНДС,2);
										НоваяСтрока.СуммаРегл = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаРегл,2);
										НоваяСтрока.НДСРегл = ОКР(КоэффициентПересчета * НоваяСтрока.НДСРегл,2);
										ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
									КонецЕсли;
								КонецЕсли;  //Если НЕ Выборка.ИспользоватьСкладскиеПомещения ИЛИ ВыбранныеВариантыПомещений.Количество() = 0 Тогда
							КонецЦикла; //Пока Выборка.Следующий() Цикл
							ДокОст.Записать(РежимЗаписиДокумента.Запись);
							СоответствиеДокументовПоПомещениям.Вставить(ДокОст.Помещение, ДокОст.Ссылка);
							Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
								ДокОст = ЭлементСоответствия.Значение.ПолучитьОбъект();
								Если ДокОст.Товары.Количество()=0 Тогда
									ДокОст.Удалить();
									Продолжить;
								КонецЕсли;
								Если НЕ ЗначениеЗаполнено(ДокОст.НалогообложениеНДС) Тогда
									ДокОст.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
								КонецЕсли;
								ДокОст.ВидДеятельностиНДС = ДокОст.НалогообложениеНДС;

								ДокОст.ОтражатьСебестоимость = Истина;
                                ДокОст.Партия = ТекПартия;

								Если НЕ ЗначениеЗаполнено(ДокОст.ХозяйственнаяОперация) Тогда
									ДокОст.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров;
								КонецЕсли;
								ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ДокОст.Склад, ДокОст.Помещение, ДокОст.Дата, Истина);
								Если ИспользоватьАдресноеХранение И НЕ ЗначениеЗаполнено(ДокОст.ЗонаПриемки) Тогда
									ДокОст.ЗонаПриемки = ПолучитьЯчейкуЗонаПриемки(ДокОст.Склад, ДокОст.Помещение);
								КонецЕсли;
								// Заполним сведения о ГТД если они есть (для документов, заполняемых на основе данных по партиям).
								Если ТаблицаОстатковПоГТД <> Неопределено И ТаблицаОстатковПоГТД.Количество() > 0 Тогда
									Для Каждого СтрТовары Из ДокОст.Товары Цикл
										ВестиУчетПоГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрТовары.Номенклатура, "ВестиУчетПоГТД");
										Если НЕ ВестиУчетПоГТД Тогда
											Продолжить;
										ИначеЕсли ЗначениеЗаполнено(СтрТовары.НомерГТД) Тогда
											// Уже распределили.
											Продолжить;
										КонецЕсли;
										
										СтруктураПоиска = Новый Структура();
										СтруктураПоиска.Вставить("Организация",      ДокОст.Организация);
										СтруктураПоиска.Вставить("Склад",                   ДокОст.Склад);
										СтруктураПоиска.Вставить("Номенклатура",   СтрТовары.Номенклатура); 
										СтруктураПоиска.Вставить("Характеристика", СтрТовары.Характеристика);

										СтрокиГТД = ТаблицаОстатковПоГТД.НайтиСтроки(СтруктураПоиска);
										Если СтрокиГТД.Количество() = 0 Тогда
											Продолжить;
										КонецЕсли;
										КоличествоРаспределить = СтрТовары.Количество;
										Для Каждого СтрокаГТД Из СтрокиГТД Цикл
											Если КоличествоРаспределить = 0 Тогда
												Прервать;
											ИначеЕсли СтрокаГТД.Количество = 0 Тогда
												Продолжить;
											КонецЕсли;
											Если СтрокаГТД.Количество >= СтрТовары.Количество Тогда
												СтрТовары.НомерГТД = СтрокаГТД.НомерГТД;
												КоличествоРаспределить = 0;
												СтрокаГТД.Количество = СтрокаГТД.Количество - СтрТовары.Количество;
											Иначе
												// Количества по ГТД не хватает на всю строку.
												КоличествоРаспределить = КоличествоРаспределить - СтрокаГТД.Количество;
												// Создаем новую строку с заполненным ГТД на имеющееся количество.
												НоваяСтрока = ДокОст.Товары.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТовары);
												НоваяСтрока.НомерГТД = СтрокаГТД.НомерГТД;
												НоваяСтрока.Количество = СтрокаГТД.Количество;
												КоэффициентПересчета = НоваяСтрока.Количество / СтрТовары.Количество;
												НоваяСтрока.Сумма = ОКР(КоэффициентПересчета * НоваяСтрока.Сумма,2);
												НоваяСтрока.СуммаБезНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаБезНДС,2);
												НоваяСтрока.СуммаСНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаСНДС,2);
												НоваяСтрока.СуммаНДС = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаНДС,2);
												НоваяСтрока.СуммаРегл = ОКР(КоэффициентПересчета * НоваяСтрока.СуммаРегл,2);
												НоваяСтрока.НДСРегл = ОКР(КоэффициентПересчета * НоваяСтрока.НДСРегл,2);
												ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);

												// Уменьшаем количество в текущей строке.
												КоэффициентПересчета = КоличествоРаспределить / СтрТовары.Количество;
												СтрТовары.Количество = КоличествоРаспределить;
												СтрТовары.Сумма = ОКР(КоэффициентПересчета * СтрТовары.Сумма,2);
												СтрТовары.СуммаБезНДС = ОКР(КоэффициентПересчета * СтрТовары.СуммаБезНДС,2);
												СтрТовары.СуммаСНДС = ОКР(КоэффициентПересчета * СтрТовары.СуммаСНДС,2);
												СтрТовары.СуммаНДС = ОКР(КоэффициентПересчета * СтрТовары.СуммаНДС,2);
												СтрТовары.СуммаРегл = ОКР(КоэффициентПересчета * СтрТовары.СуммаРегл,2);
												СтрТовары.НДСРегл = ОКР(КоэффициентПересчета * СтрТовары.НДСРегл,2);
												ЗаполнитьДанныеПоУпаковкам(СтрТовары);

											КонецЕсли;
										КонецЦикла;
										
									КонецЦикла;
								КонецЕсли;
								//Заполним серии для тех строк, где это необходимо
								ЗаполнитьСерииТоваров(ДокОст);
								//Заполним назначения товаров
								ЗаполнитьНазначенияТоваров(ДокОст);
								Если НЕ ЗначениеЗаполнено(ДокОст.Контрагент) И ЗначениеЗаполнено(ДокОст.Партнер) Тогда
									ДокОст.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДокОст.Партнер);
								КонецЕсли;
								ДокОст.Записать(РежимЗаписиДокумента.Запись);
							КонецЦикла;  //Для Каждого ЭлементСоответствия ИЗ СоответствиеДокументовПоПомещениям Цикл
						КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("СчетФактура") Цикл
					КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("ДокументПартии") Цикл
				КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("НалогообложениеНДС") Цикл
			КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Партнер") Цикл
		КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
	КонецЦикла; //Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
КонецПроцедуры

Функция ПроверитьПоступлениеПоОрдеру(Выборка, КоличествоПоступило)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|РегКПоступлению.ДокументПоступления КАК Док
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ РегистрНакопления.ТоварыКПоступлению.Остатки(&ГраницаОст, Номенклатура = &Номенклатура 
	|												И Склад = &Склад 
	|												И Характеристика = &Характеристика) КАК РегКПоступлению
	|ГДЕ КОформлениюОрдеровОстаток > 0 
	|	И НЕ (РегКПоступлению.ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками)
	|	И РегКПоступлению.ДокументПоступления.Организация = &Организация
	|;
	|ВЫБРАТЬ
	|ВЫРАЗИТЬ(РегОбороты.Регистратор КАК ДОкумент.ПриходныйОрдерНаТовары).Помещение КАК Помещение,
	|Сумма(РегОбороты.КОформлениюОрдеровРасход) КАК Количество
	|ИЗ РегистрНакопления.ТоварыКПоступлению.Обороты(&ГраницаОст,,Регистратор,
	|										Номенклатура = &Номенклатура
	|										И Склад = &Склад 
	|										И Характеристика = &Характеристика 
	|										И ДокументПоступления В (ВЫБРАТЬ Док ИЗ Распоряжения)
	|										) КАК РегОбороты
	|ГДЕ РегОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерНаТовары И РегОбороты.КОформлениюОрдеровРасход > 0
	|СГРУППИРОВАТЬ ПО ВЫРАЗИТЬ(РегОбороты.Регистратор КАК ДОкумент.ПриходныйОрдерНаТовары).Помещение
	|";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Запрос.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Выборка.Характеристика);
	Запрос.УстановитьПараметр("Организация", Выборка.Организация);
	Запрос.УстановитьПараметр("Склад", Выборка.Склад);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.СкладскиеПомещения.ПустаяСсылка();
	КонецЕсли;
	ВыборкаПоОрдеру = Результат.Выбрать();
	Пока ВыборкаПоОрдеру.Следующий() Цикл
		Если ВыборкаПоОрдеру.Количество >= КоличествоПоступило Тогда
			Возврат ВыборкаПоОрдеру.Помещение;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.СкладскиеПомещения.ПустаяСсылка();
КонецФункции

Процедура ЗаполнитьСуммыИКоличестваТабличнойЧасти(НоваяСтрока, Выборка, ЕстьСФ)
	// Заполнение через промежуточную структуру чтобы не анализировать какие поля есть в выборке.
	ДанныеВыборки = Новый Структура("Номенклатура, Характеристика, Количество, СтавкаНДС, НомерГТД");
	ЗаполнитьЗначенияСвойств(ДанныеВыборки, Выборка);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеВыборки);
	Если ЗначениеЗаполнено(Выборка.ГруппаФинансовогоУчета) Тогда
		СтруктураРеквизитов = Новый Структура("ГруппаФинансовогоУчета, ТипЗапасов, Организация",Выборка.ГруппаФинансовогоУчета, Перечисления.ТипыЗапасов.Товар, Выборка.Организация);
		НоваяСтрока.ВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(Выборка.Организация, , СтруктураРеквизитов);
	КонецЕсли;
	//Заполнение сумм и количества
	Если ЕстьСФ Тогда
		Если Выборка.Количество <= Выборка.КоличествоМаксимум Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,"Сумма, СуммаБезНДС, СуммаНДС, СуммаРегл, НДСРегл");
		Иначе
			НоваяСтрока.Количество = Выборка.КоличествоМаксимум;
			КоэффициентПересчета = Выборка.КоличествоМаксимум / Выборка.Количество;
			НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.Сумма, 2);
			НоваяСтрока.СуммаБезНДС = Окр(КоэффициентПересчета * Выборка.СуммаБезНДС, 2);
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
			НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.СуммаРегл, 2);
			НоваяСтрока.НДСРегл = Окр(КоэффициентПересчета * Выборка.НДСРегл, 2);
		КонецЕсли;
	Иначе
		Если Выборка.Партии_Количество > 0 И Выборка.Сумма > 0 Тогда
			Если Выборка.Партии_Количество = Выборка.Количество Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,"Сумма, СуммаБезНДС, СуммаНДС, СуммаРегл, НДСРегл");
			Иначе
				КоэффициентПересчета = Выборка.Количество / Выборка.Партии_Количество;
				НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.Сумма, 2);
				НоваяСтрока.СуммаБезНДС = Окр(КоэффициентПересчета * Выборка.СуммаБезНДС, 2);
				НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
				НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.СуммаРегл, 2);
				НоваяСтрока.НДСРегл = Окр(КоэффициентПересчета * Выборка.НДСРегл, 2);
			КонецЕсли;
		ИначеЕсли Выборка.Себестоимость_Стоимость > 0 И Выборка.Себестоимость_Количество > 0 Тогда
			//Суммы заполняем по данным о себестоимости
			КоэффициентПересчета = Выборка.Количество / Выборка.Себестоимость_Количество;
			НоваяСтрока.Сумма = Окр(КоэффициентПересчета * Выборка.Себестоимость_Стоимость, 2);
			НоваяСтрока.СуммаБезНДС = Окр(КоэффициентПересчета * Выборка.Себестоимость_СтоимостьБезНДС, 2);
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
			НоваяСтрока.СуммаРегл = Окр(КоэффициентПересчета * Выборка.Себестоимость_СтоимостьРегл, 2);
			НоваяСтрока.НДСРегл = ?(НоваяСтрока.СуммаНДС = 0, 0, Окр(НоваяСтрока.СуммаРегл * НоваяСтрока.СуммаНДС / НоваяСтрока.Сумма,2));
		КонецЕсли;
	КонецЕсли;
	
	//Заполним связанные данные
	ЗаполнитьДанныеПоУпаковкам(НоваяСтрока);
	Если НоваяСтрока.Количество > 0 Тогда
		НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество,2);
	КонецЕсли;
	Если  НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
		Если НоваяСтрока.СуммаНДС <> 0 Тогда
			НоваяСтрока.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18);
		Иначе
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЕсли;
	Если НоваяСтрока.НДСРегл = 0 И НоваяСтрока.СуммаНДС <> 0 И ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		НоваяСтрока.НДСРегл = НоваяСтрока.СуммаНДС;
	КонецЕсли;

КонецПроцедуры

Процедура ПодобратьПодходящиеПомещения(Выборка, ВыбранныеВариантыПомещений, Количество, УчитыватьСерии = Ложь)
	//Определим помещение
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Склад");
	Если УчитыватьСерии Тогда
		СтруктураОтбора.Вставить("Серия");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
	
	МассивСтрокОстаткиПоПомещениям = ТаблицаОстаткиНаСкладахПоПомещениям.НайтиСтроки(СтруктураОтбора);
	//проход №1 - ищем все количество в одном помещении, берем наименьшее из возможных
	ПодходящиеВарианты = Новый Массив;
	
	Для Каждого СтрокаОстаток ИЗ МассивСтрокОстаткиПоПомещениям Цикл
		Если СтрокаОстаток.Количество < Количество Тогда
			Продолжить;
		КонецЕсли;
		ПодходящиеВарианты.Добавить(СтрокаОстаток);
	КонецЦикла;
	Если ПодходящиеВарианты.Количество() > 0 Тогда
		ОптимальныйВариант = Неопределено;
		Для Каждого СтрокаОстаток ИЗ ПодходящиеВарианты Цикл
			Если ОптимальныйВариант = Неопределено Тогда
				ОптимальныйВариант = СтрокаОстаток;
			ИначеЕсли ОптимальныйВариант.Количество > СтрокаОстаток.Количество Тогда
				ОптимальныйВариант = СтрокаОстаток;
			КонецЕсли;
		КонецЦикла;
		ВыбранныеВариантыПомещений.Добавить(ОптимальныйВариант);
	Иначе
		//Надо распределить количество по нескольким помещениям
		КоличествоРаспределить = Количество;
		Для Каждого СтрокаОстаток ИЗ МассивСтрокОстаткиПоПомещениям Цикл
			Если СтрокаОстаток.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			ВыбранныеВариантыПомещений.Добавить(СтрокаОстаток);
			КоличествоРаспределить = КоличествоРаспределить - СтрокаОстаток.Количество;
			Если КоличествоРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;  //Если ПодходящиеВарианты.Количество() > 0 Тогда

КонецПроцедуры

Процедура НайтиСоздатьДокументОстатковПоПомещению(Выборка, ТекПомещение, ТекПартия, ДокОст, 
													СоответствиеДокументовПоПомещениям, КоличествоСформированныхДокументов)
	Если ТекПомещение = ДокОст.Помещение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокОст.Помещение) И ДокОст.Товары.Количество()=0 Тогда
		ДокОст.Помещение = ТекПомещение;
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		СоответствиеДокументовПоПомещениям.Вставить(ТекПомещение, ДокОст.Ссылка);
		КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
	Иначе
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		СоответствиеДокументовПоПомещениям.Вставить(ДокОст.Помещение, ДокОст.Ссылка);
		
		ДокСсылка = СоответствиеДокументовПоПомещениям.Получить(ТекПомещение);
		Если ДокСсылка = Неопределено Тогда
			
			ДокОст = Документы.ВводОстатковТоваров.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, КоличествоСформированныхДокументов, Выборка, Истина);
			ДокОст.ОтражатьСебестоимость = Истина;
			ДокОст.Партия = ТекПартия;
			ДокОст.Помещение = ТекПомещение;
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			СоответствиеДокументовПоПомещениям.Вставить(ТекПомещение, ДокОст.Ссылка);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		Иначе
			ДокОст = ДокСсылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСерииТоваров(ДокОст)
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокОст, Документы.ВводОстатков));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокОст,ПараметрыУказанияСерий);
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаТовары Из ДокОст.Товары Цикл
		Если СтрокаТовары.СтатусУказанияСерий = 0 Тогда
			Продолжить;
		КонецЕсли;
		СерияВТЧТовары = НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий);
		Если СерияВТЧТовары И ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
			// Уже заполнили.
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Склад, Помещение");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТовары);
		СтруктураОтбора.Склад = ДокОст.Склад;
		СтруктураОтбора.Помещение = ДокОст.Помещение;

		СтрокиСерии = ТаблицаОстаткиНаСкладахПоСериям.НайтиСтроки(СтруктураОтбора);
		Если СтрокиСерии.Количество() > 0 Тогда
			КоличествоРаспределить = СтрокаТовары.Количество;
			Для каждого СтрокаСерии ИЗ СтрокиСерии Цикл
				Если КоличествоРаспределить = 0 Тогда
					Прервать;
				КонецЕсли;
				Если СтрокаСерии.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если  СерияВТЧТовары Тогда
					НоваяСтрокаТовары = ДокОст.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
					НоваяСтрокаТовары.Серия = СтрокаСерии.Серия;
					НоваяСтрокаТовары.Количество = Мин(СтрокаСерии.Количество, КоличествоРаспределить);
					НоваяСтрокаТовары.КоличествоУпаковок = НоваяСтрокаТовары.Количество;
					КоличествоУчтено = НоваяСтрокаТовары.Количество;
					КоэффициентПересчета = КоличествоУчтено / СтрокаТовары.Количество;
					НоваяСтрокаТовары.Сумма = Окр(СтрокаТовары.Сумма * КоэффициентПересчета, 2);
					НоваяСтрокаТовары.СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС * КоэффициентПересчета, 2);
					НоваяСтрокаТовары.СуммаНДС = Окр(СтрокаТовары.СуммаНДС * КоэффициентПересчета, 2);
					НоваяСтрокаТовары.СуммаРегл = Окр(СтрокаТовары.СуммаРегл * КоэффициентПересчета, 2);
					НоваяСтрокаТовары.НДСРегл = Окр(СтрокаТовары.НДСРегл * КоэффициентПересчета, 2);
					НоваяСтрокаТовары.СуммаСНДС = Окр(СтрокаТовары.СуммаСНДС * КоэффициентПересчета, 2);
				Иначе
					НоваяСтрокаСерии = ДокОст.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии);
					НоваяСтрокаСерии.Количество = Мин(СтрокаСерии.Количество, КоличествоРаспределить);
					НоваяСтрокаСерии.КоличествоУпаковок = НоваяСтрокаСерии.Количество;
					КоличествоУчтено = НоваяСтрокаСерии.Количество;
					
				КонецЕсли;
				КоличествоРаспределить = КоличествоРаспределить - КоличествоУчтено;
				СтрокаСерии.Количество = СтрокаСерии.Количество - КоличествоУчтено;
			КонецЦикла;
			Если СерияВТЧТовары Тогда
				Если КоличествоРаспределить = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаТовары);
				Иначе
					// В исходной строке меняем количество и суммы.
					КоэффициентПересчета = КоличествоРаспределить / СтрокаТовары.Количество;
					СтрокаТовары.Количество = КоличествоРаспределить;
					СтрокаТовары.Сумма = Окр(СтрокаТовары.Сумма * КоэффициентПересчета, 2);
					СтрокаТовары.СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС * КоэффициентПересчета, 2);
					СтрокаТовары.СуммаНДС = Окр(СтрокаТовары.СуммаНДС * КоэффициентПересчета, 2);
					СтрокаТовары.СуммаРегл = Окр(СтрокаТовары.СуммаРегл * КоэффициентПересчета, 2);
					СтрокаТовары.НДСРегл = Окр(СтрокаТовары.НДСРегл * КоэффициентПересчета, 2);
					СтрокаТовары.СуммаСНДС = Окр(СтрокаТовары.СуммаСНДС * КоэффициентПересчета, 2);
				КонецЕсли;
			КонецЕсли; 
		Иначе
			СтрокаТовары.СтатусУказанияСерий = 0;
		КонецЕсли;
	КонецЦикла;  //Для Каждого СтрокаТовары Из ДокОст.Товары Цикл
	// Удаление строк с нулевым количеством.
	Для Каждого СтрТовары Из СтрокиКУдалению Цикл
		ДокОст.Товары.Удалить(СтрТовары);
	КонецЦикла; 
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокОст,ПараметрыУказанияСерий); 
КонецПроцедуры

Процедура ЗаполнитьНазначенияТоваров(ДокОст)
	Если НЕ ИспользоватьНазначения Тогда
		Возврат;
	КонецЕсли;
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТовары Из ДокОст.Товары Цикл
		Если СтрокаТовары.Количество = 0 Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Склад, Помещение");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТовары);
		СтруктураОтбора.Склад = ДокОст.Склад;
		СтруктураОтбора.Помещение = ДокОст.Помещение;
		СтрокиНазначение = ТаблицаОстаткиНаСкладахПоНазначению.НайтиСтроки(СтруктураОтбора);
		Если СтрокиНазначение.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли СтрокиНазначение.Количество() = 1 И
			СтрокиНазначение[0].Количество = СтрокаТовары.Количество Тогда
			СтрокаТовары.Назначение = СтрокиНазначение[0].Назначение;
			СтрокиНазначение[0].Количество = 0;
			Продолжить;
		КонецЕсли;
		
		КоличествоРаспределить = СтрокаТовары.Количество;
		Для каждого СтрокаНазначение ИЗ СтрокиНазначение Цикл
			Если КоличествоРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаНазначение.Количество = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокаНазначение.Назначение) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТовары = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
			НоваяСтрокаТовары.Количество = Мин(СтрокаНазначение.Количество, КоличествоРаспределить);
			НоваяСтрокаТовары.КоличествоУпаковок = НоваяСтрокаТовары.Количество;
			НоваяСтрокаТовары.Назначение = СтрокаНазначение.Назначение;
			
			КоличествоРаспределить = КоличествоРаспределить - НоваяСтрокаТовары.Количество;
			СтрокаНазначение.Количество = СтрокаНазначение.Количество - НоваяСтрокаТовары.Количество;
		КонецЦикла;
		Если КоличествоРаспределить = 0 Тогда
			//Удалим старую строку в ТЧ Товары, которая распределилась полностью по назначениям
			МассивСтрокКУдалению.Добавить(СтрокаТовары);
		Иначе
			//Уменьшим количество в старой строке товаров на то, что не удалось распределить
			СтрокаТовары.Количество = КоличествоРаспределить;
			СтрокаТовары.КоличествоУпаковок = КоличествоРаспределить;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКУдалению ИЗ МассивСтрокКУдалению Цикл
		ДокОст.Товары.Удалить(СтрокаКУдалению);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЯчейкуЗонаПриемки(Склад, Помещение)
	ТекЗонаПриемки = Неопределено;
	СтрТаб = СкладскиеЯчейки_ЗонаПриемки.НайтиСтроки(Новый Структура("Склад, Помещение", Склад, Помещение));
	Если СтрТаб.Количество() > 0 Тогда
		ТекЗонаПриемки = СтрТаб[0].ЗонаПриемки;
	КонецЕсли;
	
	Если ТекЗонаПриемки = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ Справочник.СкладскиеЯчейки
		|ГДЕ Владелец = &Склад И ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)
		|	И Помещение = &Помещение
		|	И НЕ ПометкаУдаления";
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Помещение", Помещение);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекЗонаПриемки = Выборка.Ссылка;
		Иначе
			ЯчейкаОбъект = Справочники.СкладскиеЯчейки.СоздатьЭлемент();
			ЯчейкаОбъект.Владелец = Склад;
			ЯчейкаОбъект.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Приемка;
			ЯчейкаОбъект.Помещение = Помещение;
			ЯчейкаОбъект.ИспользованиеПериодичностиИнвентаризацииЯчейки = Перечисления.ВариантыИспользованияПериодическойИнвентаризацииЯчеек.НеИспользовать;
			ЯчейкаОбъект.Код = НСтр("ru = 'Приемка';
									|en = 'Acceptance'");
			ЯчейкаОбъект.Наименование = НСтр("ru = 'Зона приемки';
											|en = 'Inbound area'");
			ЯчейкаОбъект.Записать();
		КонецЕсли;
		СтрТаб = СкладскиеЯчейки_ЗонаПриемки.Добавить();
		СтрТаб.Склад = Склад;
		СтрТаб.Помещение = Помещение;
		СтрТаб.ЗонаПриемки = ТекЗонаПриемки;
	КонецЕсли;
	Возврат ТекЗонаПриемки;
КонецФункции

Процедура ЗаполнитьДанныеПоУпаковкам(СтрокаТЧ)
	ТекНоменклатура = СтрокаТЧ.Номенклатура;
	Если НЕ ЗначениеЗаполнено(ТекНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (ИспользоватьУпаковки И ПересчитыватьКоличествоВУпаковки) Тогда
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		Возврат;
	КонецЕсли;
	// Для разных характеристик может использоваться разная упаковка.
	ТекХарактеристика = СтрокаТЧ.Характеристика;
	Если ЗначениеЗаполнено(ТекХарактеристика) Тогда
		СведенияОбУпаковке = ДанныеДляПересчетаВУпаковки.Получить(ТекХарактеристика);
	Иначе
		СведенияОбУпаковке = ДанныеДляПересчетаВУпаковки.Получить(ТекНоменклатура);
	КонецЕсли;
	Если СведенияОбУпаковке = Неопределено Тогда
		ДанныеУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекНоменклатура, "ИспользоватьУпаковки, НаборУпаковок");
		Если НЕ ДанныеУпаковки.ИспользоватьУпаковки ИЛИ НЕ ЗначениеЗаполнено(ДанныеУпаковки.НаборУпаковок) Тогда
			СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
			Возврат;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2
		|	Ссылка,
		|	Числитель,
		|	Знаменатель
		|ИЗ Справочник.УпаковкиЕдиницыИзмерения
		|ГДЕ Владелец = &Владелец И НЕ ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО Числитель";
		Если ДанныеУпаковки.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			Запрос.УстановитьПараметр("Владелец", ТекНоменклатура);
		Иначе
			Запрос.УстановитьПараметр("Владелец", ДанныеУпаковки.НаборУпаковок);
		КонецЕсли;
		СведенияОбУпаковке = Новый Структура("КоэффициентПересчета, Упаковка", 1, Неопределено);
		ТабУпаковки = Запрос.Выполнить().Выгрузить();
		Если ТабУпаковки.Количество() = 1 Тогда
			Если ТабУпаковки[0].Числитель <> 0 Тогда
				СведенияОбУпаковке.КоэффициентПересчета = ТабУпаковки[0].Знаменатель / ТабУпаковки[0].Числитель;
			КонецЕсли;
			СведенияОбУпаковке.Упаковка = ТабУпаковки[0].Ссылка;
		ИначеЕсли ТабУпаковки.Количество() = 2 Тогда
			// Больше одного возможного варианта, попытаться вычислить используемый в данных ИБ.
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ТоварыВЯчейках.Упаковка КАК Ссылка,
			               |	ЕстьNULL(ТоварыВЯчейках.Упаковка.Числитель,0) КАК Числитель,
			               |	ЕстьNULL(ТоварыВЯчейках.Упаковка.Знаменатель,0) КАК Знаменатель
			               |ИЗ
			               |	РегистрНакопления.ТоварыВЯчейках.Остатки(&ДатаКон,
			               |			Номенклатура = &Номенклатура
			               |				И Характеристика = &Характеристика) КАК ТоварыВЯчейках
			               |ГДЕ ЕстьNULL(ТоварыВЯчейках.Упаковка.Числитель,0) > 0
			               |УПОРЯДОЧИТЬ ПО
			               |	ЕстьNULL(ТоварыВЯчейках.Упаковка.Числитель,0) * ТоварыВЯчейках.ВНаличииОстаток УБЫВ";
			Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаСверткиИБ));
			Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);
			Запрос.УстановитьПараметр("Характеристика", ТекХарактеристика);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Если ТабУпаковки[0].Числитель <> 0 Тогда
					СведенияОбУпаковке.КоэффициентПересчета = ТабУпаковки[0].Знаменатель / ТабУпаковки[0].Числитель;
				КонецЕсли;
				СведенияОбУпаковке.Упаковка = ТабУпаковки[0].Ссылка;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Если Выборка.Числитель <> 0 Тогда
					СведенияОбУпаковке.КоэффициентПересчета = Выборка.Знаменатель / Выборка.Числитель;
				КонецЕсли;
				СведенияОбУпаковке.Упаковка = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекХарактеристика) Тогда
			ДанныеДляПересчетаВУпаковки.Вставить(ТекХарактеристика, СведенияОбУпаковке);
		Иначе
			ДанныеДляПересчетаВУпаковки.Вставить(ТекНоменклатура, СведенияОбУпаковке);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СведенияОбУпаковке) <> Тип("Структура") Тогда
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		Возврат;
	КонецЕсли;
	Если СведенияОбУпаковке.Упаковка = Неопределено Или СведенияОбУпаковке.КоэффициентПересчета = 1 Тогда
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		Возврат;
	КонецЕсли;
	КоличествоУпаковок = Окр(СтрокаТЧ.Количество * СведенияОбУпаковке.КоэффициентПересчета, 3);
	Если КоличествоУпаковок < 1 Или КоличествоУпаковок <> Цел(КоличествоУпаковок) Тогда
		// не целое количество упаковок
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		Возврат;
	КонецЕсли;
	СтрокаТЧ.КоличествоУпаковок = КоличествоУпаковок;
	СтрокаТЧ.Упаковка = СведенияОбУпаковке.Упаковка;
КонецПроцедуры

Процедура ДополнитьКомментарийДокумента(ДокОст, ТекстДополнения)
	Если Найти(СокрЛП(ДокОст.Комментарий), ТекстДополнения) = 0 Тогда
		ДокОст.Комментарий = СокрЛП(ДокОст.Комментарий) + "#" + ТекстДополнения;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос)
	Запрос.УстановитьПараметр("ГраницаОст", Новый Граница(КонецДня(ДатаСверткиИБ),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОст", КонецДня(ДатаСверткиИБ));
КонецПроцедуры

Функция РегистрыНакопленияДокумента(ИмяЗаказа)
	МассивРегистров = Новый Массив;
	Для Каждого Регистр ИЗ Метаданные.Документы[ИмяЗаказа].Движения Цикл
		Если Найти(НРег(Регистр.ПолноеИмя()),"сведений")>0 Тогда
			Продолжить;
		КонецЕсли;
		МассивРегистров.Добавить(Регистр.Имя);
	КонецЦикла;
	Возврат МассивРегистров;
КонецФункции

Процедура ОчиститьНаборыЗаписейДвиженийДокумента(МассивРегистровНакопления, ЗаказСсылка)
	Для Каждого Рег ИЗ МассивРегистровНакопления Цикл
		НаборЗаписей = РегистрыНакопления[Рег].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ЗаказСсылка);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка при очистке движений документа: %ЗаказСсылка%, регистр накопления %ИмяРегистра%';
									|en = 'An error occurred when clearing document register records: %ЗаказСсылка%, accumulation register %ИмяРегистра%'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ЗаказСсылка, Рег);
			СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьДвиженияПоЗаказу(ИмяРегистра, ИмяИзмерения, ЗаказСсылка)
	ЗапросЗаказы = Новый Запрос;
	ЗапросЗаказы.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистратор
	|ИЗ РегистрНакопления."+ИмяРегистра+".Обороты(,&ГраницаОст, Регистратор, "+ИмяИзмерения+" = &Заказ)";
	ЗаполнитьПараметрыЗапросаДатаСвертки(ЗапросЗаказы);
	ЗапросЗаказы.УстановитьПараметр("Заказ", ЗаказСсылка);
	ВыборкаЗаказы = ЗапросЗаказы.Выполнить().Выбрать();
	Пока ВыборкаЗаказы.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаказы.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			СообщениеСвертки(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при очистке регистра %1 по регистратору %2';
																							|en = 'An error occurred when cleaning up register %1 by recorder %2'"), ИмяРегистра, ВыборкаЗаказы.Регистратор), Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ПровестиИлиЗаписатьДокумент(ДокОбъект)
	ЕстьОшибкаПроведения = Ложь;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЕстьОшибкаПроведения = Истина;
		СообщениеСвертки(НСтр("ru = 'Ошибка при проведении документа';
								|en = 'An error occurred while posting the document'")+ ": " + ДокОбъект, Истина, ОписаниеОшибки());
	КонецПопытки;
	Если ЕстьОшибкаПроведения Тогда
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СообщениеСвертки(НСтр("ru = 'Ошибка при записи документа';
									|en = 'Error writing document'")+ ": " + ДокОбъект, Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеДокумента(СтрокаДокумента)
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) Тогда
		СтрокаДокумента.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Если СтрокаДокумента.СуммаНДС > 0 
			И СтрокаДокумента.СуммаБезНДС > 0 Тогда
			СтрокаДокумента.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			КНДС = СтрокаДокумента.Сумма / СтрокаДокумента.СуммаБезНДС;
			Если КНДС > 1.19 Тогда
				СтрокаДокумента.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20);
			ИначеЕсли КНДС > 1.15 Тогда
				СтрокаДокумента.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18);
			ИначеЕсли КНДС > 1.1 Тогда
				 СтрокаДокумента.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18_118);
			ИначеЕсли КНДС > 1.09 Тогда
				СтрокаДокумента.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС10);
			ИначеЕсли КНДС > 1 Тогда
				СтрокаДокумента.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС10_110);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Процедура ОбработатьДвиженияНДСДоДатыСвертки()
	РегистрыКОбработке = Новый Структура;
	РегистрыКОбработке.Вставить("НДСПредъявленный", "СчетФактура");
	РегистрыКОбработке.Вставить("НДСЗаписиКнигиПокупок", "СчетФактура");
	РегистрыКОбработке.Вставить("НДСЗаписиКнигиПродаж", "СчетФактура");
	ДокументыПартийОбработанные = Новый Соответствие;
	Для Каждого РегистрКОбработке Из РегистрыКОбработке Цикл
		ИмяРегистра = РегистрКОбработке.Ключ;
		ИзмеренияРегистра = РегистрКОбработке.Значение;
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистратор,
		|	%ИмяИзмерения% КАК ДокПартии,
		|   %ИмяИзмерения%.Дата КАК ДокПартииДата,
		|   %ИмяИзмерения%.Номер КАК ДокПартииНомер
		|ИЗ РегистрНакопления." + ИмяРегистра + "
		|ГДЕ %ИмяИзмерения%.Дата <= &ДатаОст И %ИмяИзмерения%.ПометкаУдаления = ИСТИНА
		| И Период <= &ДатаОст
		|ИТОГИ ПО Регистратор";
		Запрос = Новый Запрос;
		ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ИмяИзмерения%", ИзмеренияРегистра);
		ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРегистратор.Следующий() Цикл
			ЗаписиККорректировке = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			ЗаписиККорректировке.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			ЗаписиККорректировке.Прочитать();
			ТаблицаККорректировке = ЗаписиККорректировке.Выгрузить();
			Выборка = ВыборкаРегистратор.Выбрать();
			ЕстьЗамещение = Ложь;
			Пока Выборка.Следующий() Цикл
				ПервичныйДокумент = ДокументыПартийОбработанные.Получить(Выборка.ДокПартии);
				Если ПервичныйДокумент = Неопределено Тогда
					ПервичныйДокумент = ПреобразоватьСсылкуВПервичныйДокумент(Истина, Выборка.ДокПартии, 
									Выборка.ДокПартииДата, Выборка.ДокПартииНомер);
					ДокументыПартийОбработанные.Вставить(Выборка.ДокПартии, ПервичныйДокумент);
				КонецЕсли;
				Если ПервичныйДокумент = Неопределено 
					Или ПервичныйДокумент = Документы.ПервичныйДокумент.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				ЗаписиКЗамене = ТаблицаККорректировке.НайтиСтроки(Новый Структура(ИзмеренияРегистра, Выборка.ДокПартии));
				Для Каждого ЗаписьКЗамене ИЗ ЗаписиКЗамене Цикл
					ЗаписьКЗамене[ИзмеренияРегистра] = ПервичныйДокумент;
				КонецЦикла;
				Если НЕ ЕстьЗамещение И ЗаписиКЗамене.Количество() > 0 Тогда
					ЕстьЗамещение = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьЗамещение Тогда
				ЗаписиККорректировке.Загрузить(ТаблицаККорректировке);
				ЗаписиККорректировке.ОбменДанными.Загрузка = Истина;
				ЗаписиККорректировке.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


Процедура ДополнитьКомментарииСвертки()
	ДополнениеДатой = Формат(ДатаСверткиИБ, "ДЛФ=Д");
	Комментарий_УдалитьПриСверткеБазы = НСтр("ru = '[%1% Удалить при свертке базы]';
											|en = '[%1% Delete upon base rollup]'");
	Комментарий_НеУдалятьПриСверткеБазы = НСтр("ru = '[%1% Не удалять при свертке базы]';
												|en = '[%1% Do not delete upon base rollup]'");
	Комментарий_СформированСверткойБазы = НСтр("ru = '[%1% Сформирован обработкой свертки базы]';
												|en = '[%1% Generated by base rollup data processor]'");
	Комментарий_СкорректированСверткойБазы = НСтр("ru = '[%1% Скорректирован обработкой свертки базы]';
													|en = '[%1% Adjusted by base rollup data processor]'");
	Комментарий_УдалитьПриСверткеБазы = СтрЗаменить(Комментарий_УдалитьПриСверткеБазы, "%1%", ДополнениеДатой);
	Комментарий_НеУдалятьПриСверткеБазы = СтрЗаменить(Комментарий_НеУдалятьПриСверткеБазы, "%1%", ДополнениеДатой);	
	Комментарий_СформированСверткойБазы = СтрЗаменить(Комментарий_СформированСверткойБазы, "%1%", ДополнениеДатой);	
	Комментарий_СкорректированСверткойБазы = СтрЗаменить(Комментарий_СкорректированСверткойБазы, "%1%", ДополнениеДатой);	

КонецПроцедуры

ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
ИспользоватьУпаковки = Константы.ИспользоватьУпаковкиНоменклатуры.Получить();
ДанныеДляПересчетаВУпаковки = Новый Соответствие;
ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();


КурсыВалют = Новый Соответствие;
Комментарий_УдалитьПриСверткеБазы = НСтр("ru = '[Удалить при свертке базы]';
										|en = '[Delete upon base rollup]'");
Комментарий_НеУдалятьПриСверткеБазы = НСтр("ru = '[Не удалять при свертке базы]';
											|en = '[Do not delete upon base rollup]'");
Комментарий_СформированСверткойБазы = НСтр("ru = '[Сформирован обработкой свертки базы]';
											|en = '[Generated by infobase rollup data processor]'");
Комментарий_СкорректированСверткойБазы = НСтр("ru = '[Скорректирован обработкой свертки базы]';
												|en = '[Corrected by infobase rollup data processor]'");
КоличествоСтрокВДокументеВводаОстатков = 10000;
ИспользоватьНазначения = Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.Получить();
СкладскиеЯчейки_ЗонаПриемки = Новый ТаблицаЗначений;
СкладскиеЯчейки_ЗонаПриемки.Колонки.Добавить("Склад");
СкладскиеЯчейки_ЗонаПриемки.Колонки.Добавить("Помещение");
СкладскиеЯчейки_ЗонаПриемки.Колонки.Добавить("ЗонаПриемки");
#КонецОбласти
СтруктураИспользованиеИтоговРегистровНакопления = Новый Структура;
#КонецОбласти

#КонецЕсли