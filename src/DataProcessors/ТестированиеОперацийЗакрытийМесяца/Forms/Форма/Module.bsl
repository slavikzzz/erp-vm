#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаЗакрывается;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбменДаннымиУТ.ВЭтомУзлеДоступноВыполнениеОперацийЗакрытияМесяца(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТестирования = Обработки.ТестированиеОперацийЗакрытийМесяца.ПараметрыЗапускаТестирования();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыТестирования);
	РазделыТестирования = Обработки.ТестированиеОперацийЗакрытийМесяца.РазделыТестирования();
	КонтрольныеРегистры.ЗагрузитьЗначения(Обработки.ТестированиеОперацийЗакрытийМесяца.КонтрольныеРегистры());
	КонтрольныеРегистры.ЗаполнитьПометки(Истина);
	
	НовоеДеревоТестирования = РеквизитФормыВЗначение("ДеревоТестирования", Тип("ДеревоЗначений"));
	Для каждого ЭтапТестирования Из ЭтапыТестирования Цикл
		СтрокаЭтапа = НовоеДеревоТестирования.Строки.Добавить();
		СтрокаЭтапа.ИмяУзла = ЭтапТестирования.Значение;
		СтрокаЭтапа.Использование = ЭтапТестирования.Пометка;
		СтрокаЭтапа.АдресХранилищаРасхождений = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		Для каждого РазделТестирования Из РазделыТестирования Цикл
			СтрокаРаздела = СтрокаЭтапа.Строки.Добавить();
			СтрокаРаздела.ИмяУзла = РазделТестирования.Значение;
			СтрокаРаздела.Использование = РазделТестирования.Пометка;
			СтрокаРаздела.АдресХранилищаРасхождений = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			МассивВыбранногоРаздела = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаРаздела.ИмяУзла);
			Для каждого РегистрТестирования Из Обработки.ТестированиеОперацийЗакрытийМесяца.КонтрольныеРегистры(МассивВыбранногоРаздела) Цикл
				СтрокаРегистра = СтрокаРаздела.Строки.Добавить();
				СтрокаРегистра.ИмяУзла = РегистрТестирования;
				СтрокаРегистра.Использование = Истина;
				СтрокаРегистра.АдресХранилищаРасхождений = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(НовоеДеревоТестирования, "ДеревоТестирования");
	
	КаталогОшибок = ?(ЗначениеЗаполнено(КаталогОшибок), КаталогОшибок, КаталогВременныхФайлов());
	РабочийКаталог = ?(ЗначениеЗаполнено(РабочийКаталог), РабочийКаталог, КаталогВременныхФайлов());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	АвтоматическоеТестирование = ЗначениеЗаполнено(ПараметрЗапуска);
	АвтоматическоеТестирование = Ложь;
	
	Если АвтоматическоеТестирование Тогда // это автоматический запуск
		
		ЗапуститьТестирование();
		
	Иначе
		
		НачалоРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(НачалоРасчета);
		КонецРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(КонецРасчета);
		ПредставлениеРазделовДляТестирования = ПредставлениеСписка(РазделыТестирования);
		ПредставлениеРегистровДляТестирования = ПредставлениеСписка(КонтрольныеРегистры);
		ПредставлениеЭтаповТестирования = ПредставлениеСписка(ЭтапыТестирования);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоРасчетаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НачалоРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, "НачалоРасчета");
	ПараметрыФормы 	   = Новый Структура("Значение, РежимВыбораПериода", НачалоРасчета, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор,
		,
		, 
		ОбработчикЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоРасчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачалоРасчета = ДобавитьМесяц(НачалоРасчета, Направление);
	НачалоРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(НачалоРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецРасчетаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КонецРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, "КонецРасчета");
	ПараметрыФормы 	   = Новый Структура("Значение, РежимВыбораПериода", КонецРасчета, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор,
		,
		, 
		ОбработчикЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецРасчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонецРасчета = ДобавитьМесяц(КонецРасчета, Направление);
	КонецРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(КонецРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Выберите каталог для сохранения результатов';
							|en = 'Select a directory to save results'");
	Диалог.Каталог = РабочийКаталог;
	Диалог.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьКаталогЗавершение", ЭтотОбъект, "РабочийКаталог");
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийКаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer " + РабочийКаталог);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОшибокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru = 'Выберите каталог для сохранения файлов ошибок';
							|en = 'Select a directory to save error files'");
	Диалог.Каталог = КаталогОшибок;
	Диалог.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьКаталогЗавершение", ЭтотОбъект, "КаталогОшибок");
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОшибокОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer " + КаталогОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРазделовДляТестированияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбор = Новый ОписаниеОповещения("ПредставлениеСпискаНажатие_Выбор", ЭтотОбъект, Элемент.Имя);
	РазделыТестирования.ПоказатьОтметкуЭлементов(СписокВыбор, НСтр("ru = 'Выберите разделы для тестирования';
																	|en = 'Select sections to test'"));
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРегистровДляТестированияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбор = Новый ОписаниеОповещения("ПредставлениеСпискаНажатие_Выбор", ЭтотОбъект, Элемент.Имя);
	КонтрольныеРегистры.ПоказатьОтметкуЭлементов(СписокВыбор, НСтр("ru = 'Выберите контрольные регистры';
																	|en = 'Select control registers'"));
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭтаповТестированияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбор = Новый ОписаниеОповещения("ПредставлениеСпискаНажатие_Выбор", ЭтотОбъект, Элемент.Имя);
	ЭтапыТестирования.ПоказатьОтметкуЭлементов(СписокВыбор, НСтр("ru = 'Выберите этапы тестирования';
																|en = 'Select testing steps'"));
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестированияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоТестированияНавигационнаяСсылка" И ЗначениеЗаполнено(Элементы.ДеревоТестирования.ТекущиеДанные.ПутьКФайлу) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеТестирования = Новый ДвоичныеДанные(Элементы.ДеревоТестирования.ТекущиеДанные.ПутьКФайлу);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, УникальныйИдентификатор);
		ПараметрыОтчета = Новый Структура("ПутьКФайлу, СформироватьПриОткрытии", АдресХранилища, Истина);
		ОткрытьФорму("Отчет.РезультатыТестирования.Форма.ФормаОтчета", ПараметрыОтчета, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестированияНавигационнаяСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru = 'Выберите файл с расхождениями';
							|en = 'Select a file with discrepancies'");
	Диалог.Каталог = РабочийКаталог;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = "Таблица (*.xml;*.mxl)|*.xml;*.mxl|";
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестированияЭталонныеДанныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru = 'Выберите файл с эталонными данными';
							|en = 'Select a file with reference data'");
	Диалог.Каталог = РабочийКаталог;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = "Таблица (*.json;)|*.json;|";
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Запустить(Команда)
	
	СообщениеОбОшибке.Очистить();
	ЗапуститьТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗадание(Команда)
	ЗаданиеОтменено = ОтменитьФоновоеЗаданиеЗакрытияМесяца();
	Если ЗаданиеОтменено Тогда
		ИдентификаторЗадания = Неопределено;
		ИзмененияВИнтерфейсеПриРаботеВФоне();
		ОтключитьОбработчикОжидания("ПродолжитьТестирование");
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьДействияЗавершение()
	
	ОтключитьОбработчикОжидания("ВыполнитьДействияЗавершение");
	
	ЗагрузитьОшибкиНаСервере();
	СохранитьОшибкиИЗавершитьРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОшибкиИЗавершитьРаботу()
	
	Если Ошибки.Количество() > 0 И ЗначениеЗаполнено(КаталогОшибок) Тогда
		
		Файл = Новый Файл(КаталогОшибок);
		
		Если НЕ Файл.Существует() Тогда
			СоздатьКаталог(КаталогОшибок);
		ИначеЕсли НЕ Файл.ЭтоКаталог() Тогда
			УдалитьФайлы(КаталогОшибок);
			СоздатьКаталог(КаталогОшибок);
		КонецЕсли; 
	
		Для Каждого Ошибка Из Ошибки Цикл
			
			ИмяФайлаОшибки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогОшибок);
			ИмяФайлаОшибки = ИмяФайлаОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                 "%1_%2.xml", Формат(ТекущаяДата(), НСтр("ru = 'ДФ=''yyyyMMddHHmmss';
																	|en = 'DF=''yyyyMMddHHmmss'")), Строка(Новый УникальныйИдентификатор()));
			Результат = Новый ТекстовыйДокумент;
			Результат.УстановитьТекст(Ошибка.Значение);
			Результат.Записать(ИмяФайлаОшибки);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если АвтоматическоеТестирование Тогда
		ПрекратитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестирование()
	
	Ошибки.Очистить();
	
	ЗапуститьТестированиеНаСервере(ПараметрЗапуска);
	Если АвтоматическоеТестирование Тогда
		ОбработатьРезультатТестирования();
	Иначе
		ИзмененияВИнтерфейсеПриРаботеВФоне();
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	Если Ошибки.Количество() Тогда
		ПодключитьОбработчикОжидания("ВыполнитьДействияЗавершение", 30, Истина); // имитируем задержку, так как события в журнал регистрации пишутся с запозданием.
	Иначе
		СохранитьОшибкиИЗавершитьРаботу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатТестирования()
	РезультатТестирования = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если РезультатТестирования.Свойство("ДеревоРезультата") Тогда
		ЗначениеВРеквизитФормы(РезультатТестирования.ДеревоРезультата, "ДеревоТестирования");
		РезультатТестирования.Удалить("ДеревоРезультата");
	КонецЕсли;
	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатТестирования()
	
	РезультатТестирования = ПолучитьРезультатТестирования();
	
	Если РезультатТестирования.Отказ Тогда // критическая ошибка в коде, расчет не произведен.
		Ошибка = СоздатьОписаниеОшибки();
		Ошибка.ТипОшибки = НСтр("ru = 'Ошибка тестирования';
								|en = 'Test error'");
		Ошибка.ПорядокВоспроизведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла критичная ошибка при тестировании.
			|Месяц начала расчета: %1
			|Дата запуска: %2
			|Дата завершения: %3';
			|en = 'A critical error occurred when testing.
			|Calculation start month: %1
			|Start date: %2
			|End date: %3'"),
			НачалоРасчета,
			ДатаНачала,
			ДатаОкончания);
		Ошибка.ИсходнаяИнформация = РезультатТестирования.ИсходнаяИнформация;
		Ошибка.ОбъектМетаданных = РезультатТестирования.ОбъектМетаданных;
		Ошибка.УточнениеРасположения = РезультатТестирования.УточнениеРасположения;
		Ошибки.Добавить(ТекстОшибкиXML(Ошибка));
		
		СообщитьОбОшибке(Ошибка);
	Иначе
		
		СоответствиеЭтаповИФайловРасхождений = Новый Соответствие;
		Для каждого Стр Из ДеревоТестирования.ПолучитьЭлементы() Цикл
			Если Не Стр.Использование Или Стр.КоличествоРасхождений = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для каждого СтрРаздела Из Стр.ПолучитьЭлементы() Цикл
				Если Не СтрРаздела.Использование Или СтрРаздела.КоличествоРасхождений = 0 Тогда
					Продолжить;
				КонецЕсли;
				Для каждого СтрРегистра Из СтрРаздела.ПолучитьЭлементы() Цикл
					Если Не СтрРегистра.Использование Или СтрРегистра.КоличествоРасхождений = 0 Тогда
						Продолжить;
					КонецЕсли;
					ИмяФайла = "%ИмяЭтапа_%ИмяРаздела_%ИмяРегистра.xml";
					ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяЭтапа", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Стр.ИмяУзла));
					ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяРаздела", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтрРаздела.ИмяУзла));
					ИмяРегистра = СтрЗаменить(СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтрРегистра.ИмяУзла), ".", "_");
					ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяРегистра", ИмяРегистра);
					ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог) + ИмяФайла;
					СохранитьФайлНаДиск(СтрРегистра.АдресХранилищаРасхождений, ПутьКФайлу);
					СтрРегистра.ПутьКФайлу = ПутьКФайлу;
					СтрРегистра.НавигационнаяСсылка = СтрШаблон(НСтр("ru = 'Посмотреть %1 расхождения';
																	|en = 'View %1 discrepancies'"), СтрРегистра.КоличествоРасхождений);
				КонецЦикла;
				ИмяФайла = "%ИмяЭтапа_%ИмяРаздела.xml";
				ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяЭтапа", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Стр.ИмяУзла));
				ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяРаздела", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтрРаздела.ИмяУзла));
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог) + ИмяФайла;
				СохранитьФайлНаДиск(СтрРаздела.АдресХранилищаРасхождений, ПутьКФайлу);
				СтрРаздела.ПутьКФайлу = ПутьКФайлу;
				СтрРаздела.НавигационнаяСсылка = СтрШаблон(НСтр("ru = 'Посмотреть %1 расхождения';
																|en = 'View %1 discrepancies'"), СтрРаздела.КоличествоРасхождений);
			КонецЦикла;
			ИмяФайла = "%ИмяЭтапа.xml";
			ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяЭтапа", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Стр.ИмяУзла));
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог) + ИмяФайла;
			СохранитьФайлНаДиск(Стр.АдресХранилищаРасхождений, ПутьКФайлу);
			Стр.ПутьКФайлу = ПутьКФайлу;
			Стр.НавигационнаяСсылка = СтрШаблон(НСтр("ru = 'Посмотреть %1 расхождения';
													|en = 'View %1 discrepancies'"), Стр.КоличествоРасхождений);
		КонецЦикла;
		Возврат;
		
		СтараяВерсияРезультата = Истина;
		
		Для каждого СвойствоРезультата Из РезультатТестирования Цикл
			
			Если СтрНачинаетсяС(СвойствоРезультата.Ключ, "ДанныеРасхождений") Тогда
				
				СтараяВерсияРезультата = Ложь;
				Если СвойствоРезультата.Ключ = "ДанныеРасхождений" Тогда
					ЭтапТестирования = "ПерезакрытьМесяц";
				Иначе
					ЭтапТестирования = СтрЗаменить(СвойствоРезультата.Ключ, "ДанныеРасхождений_", "");
				КонецЕсли;
				
				СоответствиеЭтаповИФайловРасхождений = Новый Соответствие;
				Для каждого Расхождение из СвойствоРезультата.Значение Цикл
					
					Если Расхождение.Ключ <> "КоличествоРасхождений" Тогда
							СоздатьФайлИОшибку(ЭтапТестирования, Расхождение, СоответствиеЭтаповИФайловРасхождений);
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЦикла;
		
		// Старая версия результата:
		Если РезультатТестирования.Свойство("ЕстьРасхождения") И СтараяВерсияРезультата Тогда // расчет произведен, но есть расхождения.
				
			СтарыеДанные = Новый Структура;
			СтарыеДанные.Вставить("АдресХранилища", РезультатТестирования.АдресХранилища);
			СтарыеДанные.Вставить("ОбъектМетаданных", "РегистрыНакопления.СебестоимостьТоваров");
			ДанныеРасхождений = Новый Структура("Себестоимость", СтарыеДанные);
			Для каждого Расхождение Из ДанныеРасхождений Цикл
				СоздатьФайлИОшибку("ПерезакрытьМесяц", Расхождение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыключитьЗапретРедактирования()
	
	ПустыеДатыЗапрета = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПустыеДатыЗапрета);
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьТестированиеНаСервере(ПараметрыЗапуска)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыТеста = Обработки.ТестированиеОперацийЗакрытийМесяца.ПараметрыЗапускаТестирования(ПараметрыЗапуска);
	ПараметрыТеста.АдресХранилища = АдресХранилища;
	
	ПередаваемоеДерево = РеквизитФормыВЗначение("ДеревоТестирования", Тип("ДеревоЗначений"));
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ИмяФайла, ПередаваемоеДерево);
	ПараметрыТеста.Вставить("ДеревоПланаТестирования", ИмяФайла);
	
	ВыключитьЗапретРедактирования();
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если АвтоматическоеТестирование Тогда
		Обработки.ТестированиеОперацийЗакрытийМесяца.Тестирование(ПараметрыТеста);
	Иначе
		Если Не ЕстьАктивноеФоновоеЗадание(ИдентификаторЗадания) Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыТеста, ЭтотОбъект);
			ПараметрыТеста.Разделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(РазделыТестирования);
			ПараметрыТеста.КонтрольныеРегистры = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(КонтрольныеРегистры);
			ИдентификаторЗадания = Обработки.ТестированиеОперацийЗакрытийМесяца.ЗапуститьТестированиеВФоне(ПараметрыТеста);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьАктивноеФоновоеЗадание(ИдентификаторЗадания)
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ПроверитьНаличиеАктивныхРасчетов();
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ОбщегоНазначения.СообщитьПользователю(АктивныеРасчеты.ТекстОшибки);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		СостояниеЗадания = ЗакрытиеМесяцаСервер.ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания);
		Возврат СостояниеЗадания.Активно;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьТестирование()
	
	Если ЕстьАктивноеФоновоеЗадание(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ПродолжитьТестирование");
	// разобрать результаты расчета
	//ДлительностьМс = ТекущаяУниверсальнаяДатаВМиллисекундах() - РасчетМесяцаНачатВ;
	ОбработатьРезультатТестирования();
	ИдентификаторЗадания = Неопределено;
	ИзмененияВИнтерфейсеПриРаботеВФоне();
	
КонецПроцедуры

#Область ОбработчикиЗавершенияДействий

&НаКлиенте
Процедура ВыбратьПериодЗавершение(ВыбранныйПериод, ИмяРеквизита) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = ВыбранныйПериод;
		ЭтотОбъект[ИмяРеквизита + "Строка"] = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ВыбранныйПериод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогЗавершение(Каталог, ИмяРеквизита) Экспорт
	
	Если Каталог <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = Каталог[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаНажатие_Выбор(Список, ИмяПредставления = Неопределено) Экспорт
	Если Список <> Неопределено Тогда
		ЭтотОбъект[ИмяПредставления] = ПредставлениеСписка(Список);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(ПутьКФайлу, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПутьКФайлу <> Неопределено Тогда
		Элементы.ДеревоТестирования.ТекущиеДанные.ПутьКФайлуЭталонныхДанных = ПутьКФайлу;
		ДанныеВыгрузки = Новый ДвоичныеДанные(ПутьКФайлу);
		Элементы.ДеревоТестирования.ТекущиеДанные.ЭталонныеДанные = ПоместитьВоВременноеХранилище(ДанныеВыгрузки, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСписка(Список)
	
	СтрокаВозврата = "";
	Для каждого ЗначениеСписка Из Список Цикл
		Если ЗначениеСписка.Пометка Тогда
			СтрокаВозврата = СтрокаВозврата + ?(СтрокаВозврата = "", "", ", ") +
				?(ЗначениеЗаполнено(ЗначениеСписка.Представление), НРег(ЗначениеСписка.Представление), НРег(ЗначениеСписка.Значение));
		КонецЕсли;
	КонецЦикла;
	
	СтрокаВозврата = СтрокаВозврата + ?(СтрокаВозврата = "", НСтр("ru = '< нет >';
																	|en = '< no >'"), ".");
	
	Возврат СтрокаВозврата;
	
КонецФункции

&НаКлиенте
Процедура ИзмененияВИнтерфейсеПриРаботеВФоне()
	Элементы.ФормаЗапустить.Доступность = Не ЗначениеЗаполнено(ИдентификаторЗадания);
	Элементы.ФормаЗакрыть.Доступность = Не ЗначениеЗаполнено(ИдентификаторЗадания);
	Элементы.ГруппаДлительныеОперации.Видимость = ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДлительныеОперации;
	ИначеЕсли ЗначениеЗаполнено(АдресХранилища) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПараметры;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРегистрацииОшибок

&НаКлиенте
Процедура СоздатьФайлИОшибку(ЭтапТестирования, ДанныеРасхождений, СоответствиеРазделовИФайловРасхождений = Неопределено)
	
	ИмяРаздела = ДанныеРасхождений.Ключ;
	ДанныеРаздела = ДанныеРасхождений.Значение;
	
	ИмяФайла = "%ИмяЭтапа_%ИмяРаздела_%Дата_%Идентификатор.xml";
	ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяЭтапа", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(?(ЭтапТестирования = "ПерезакрытьМесяц", "Complete", ЭтапТестирования)));
	ИмяФайла = СтрЗаменить(ИмяФайла, "%ИмяРаздела", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяРаздела));
	ИмяФайла = СтрЗаменить(ИмяФайла, "%Дата", Формат(ТекущаяДата(), НСтр("ru = 'ДФ=''yyyyMMddHHmmss';
																		|en = 'DF=''yyyyMMddHHmmss'")));
	ИмяФайла = СтрЗаменить(ИмяФайла, "%Идентификатор", Строка(Новый УникальныйИдентификатор()));
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог) + ИмяФайла;
	СохранитьФайлНаДиск(ДанныеРаздела.АдресХранилища, ПутьКФайлу);
	
	Ошибка = СоздатьОписаниеОшибки();
	Ошибка.ТипОшибки = ТипОшибкиПоИмениЭтапа(ИмяРаздела, ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	Ошибка.ПорядокВоспроизведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'После выполнения этапа ""%4"" итоговые данные отличаются от эталонных.
		|Месяц начала расчета: %1
		|Дата запуска: %2
		|Дата завершения: %3';
		|en = 'After performing the ""%4"" step, the resulting data differs from the reference data.
		|Calculation start month: %1
		|Start date: %2
		|End date: %3'"),
		НачалоРасчета,
		ДатаНачала,
		ДатаОкончания,
		ПредставлениеЭтапаТестирования(ЭтапТестирования));
	Ошибка.ОжидаемоеПоведение = НСтр("ru = 'Необходимо проверить, являются ли расхождения ошибками.';
									|en = 'Check whether the discrepancies are errors.'");
	Ошибка.ИменаФайлов.Добавить(ПутьКФайлу);
	Ошибка.ОбъектМетаданных      = ДанныеРаздела.ОбъектМетаданных;
	Ошибка.УточнениеРасположения = СтрШаблон(НСтр("ru = 'См. файл с расхождениями по контрольным регистрам: %1';
													|en = 'See the file with discrepancies by control registers: %1'"), ИмяФайла);
	
	Если СоответствиеРазделовИФайловРасхождений <> Неопределено Тогда
		СоответствиеРазделовИФайловРасхождений.Вставить(ИмяРаздела, ПутьКФайлу);
		ДополнитьОшибкуРасхождениямиВлияющихЭтапов(ИмяРаздела, Ошибка, СоответствиеРазделовИФайловРасхождений);
	КонецЕсли;
	
	Ошибки.Добавить(ТекстОшибкиXML(Ошибка));
	СообщитьОбОшибке(Ошибка);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНаДиск(АдресХранилища, ПутьКФайлу)
	
	ФайлОтчета = ПолучитьИзВременногоХранилища(АдресХранилища);
	ФайлОтчета.Записать(ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(Ошибка)
	
	СообщениеОбОшибке.ДобавитьСтроку(Ошибка.ТипОшибки);
	СообщениеОбОшибке.ДобавитьСтроку(Ошибка.ПорядокВоспроизведения);
	СообщениеОбОшибке.ДобавитьСтроку(Ошибка.ИсходнаяИнформация);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОшибкиНаСервере()
	
	ТаблицаЖурнала = Новый ТаблицаЗначений;
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала",    ДатаНачала);
	Отбор.Вставить("ДатаОкончания", ДатаОкончания);
	Отбор.Вставить("Уровень",       УровеньЖурналаРегистрации.Ошибка);
	
	ВыгрузитьЖурналРегистрации(ТаблицаЖурнала, Отбор,,, 200);
	
	Для Каждого СобытиеЖурнала Из ТаблицаЖурнала Цикл
		
		Ошибка = СоздатьОписаниеОшибки();
		Ошибка.ТипОшибки = ТипОшибкиПоИмениЭтапа(СобытиеЖурнала.Событие, ОбщегоНазначения.КодОсновногоЯзыка());
		Ошибка.ПорядокВоспроизведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При расчете возникла критичная ошибка, Операция тестирования не выполнена.
			|Месяц начала расчета: %1
			|Дата запуска: %2
			|Дата завершения: %3';
			|en = 'A critical error occurred when calculating. Testing is not completed.
			|Calculation start month: %1
			|Start date: %2
			|End date: %3'"),
			НачалоРасчета,
			ДатаНачала,
			ДатаОкончания);
		Ошибка.ИсходнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Событие журнала регистрации: %1
			|Дата: %2
			|Метаданные: %3
			|Комментарий:
			|%4';
			|en = 'Event log event: %1
			|Date: %2
			|Metadata: %3
			|Comment: 
			|%4'"),
			СобытиеЖурнала.Событие,
			СобытиеЖурнала.Дата,
			СобытиеЖурнала.Метаданные,
			СобытиеЖурнала.Комментарий);
		Ошибка.ОбъектМетаданных = СобытиеЖурнала.Метаданные;
		Ошибки.Добавить(ТекстОшибкиXML(Ошибка));
		СообщениеОбОшибке.ДобавитьСтроку(СобытиеЖурнала.Комментарий);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьОписаниеОшибки() Экспорт 

	Ошибка = Новый Структура;
	
	Ошибка.Вставить("ВерсияФормата", "1.1");
	Ошибка.Вставить("УИ", Строка(Новый УникальныйИдентификатор));
	Ошибка.Вставить("ТипОшибки", "");
	Ошибка.Вставить("ИсходнаяИнформация", "");
	Ошибка.Вставить("ПорядокВоспроизведения", "");
	Ошибка.Вставить("ОжидаемоеПоведение", "");
	
	#Если Клиент Или ТолстыйКлиентУправляемоеПриложение Или ТонкийКлиент Или ВебКлиент Тогда
	
		СисИнфо = Новый СистемнаяИнформация;
		Ошибка.Вставить("ВерсияПлатформы", СисИнфо.ВерсияПриложения);
		Ошибка.Вставить("КлиентОперативнаяПамять", СисИнфо.ОперативнаяПамять);
		Ошибка.Вставить("КлиентВерсияОС", СисИнфо.ВерсияОС);
		Ошибка.Вставить("КлиентПроцессор", СисИнфо.Процессор);
		Ошибка.Вставить("КлиентТипПлатформы", Строка(СисИнфо.ТипПлатформы));
		Ошибка.Вставить("КлиентИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
		Ошибка.Вставить("КлиентТекущаяДата", ТекущаяДата());
	
	#КонецЕсли
	
	
	Ошибка.Вставить("ОбъектыМетаданных", Новый Массив); // Возможность добавить массив объектов метаданных
	// Регистрация по одному объекту метаданных
	Ошибка.Вставить("ОбъектМетаданных", "");
	Ошибка.Вставить("УточнениеРасположения", "");
	
	Ошибка.Вставить("ИменаФайлов", Новый Массив);
	
	Возврат Ошибка;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ДополнитьОписаниеОшибкиНаСервере(Ошибка) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Ошибка.Вставить("ВерсияПлатформы", СисИнфо.ВерсияПриложения);
	Ошибка.Вставить("СерверОперативнаяПамять", СисИнфо.ОперативнаяПамять);
	Ошибка.Вставить("СерверВерсияОС", СисИнфо.ВерсияОС);
	Ошибка.Вставить("СерверПроцессор", СисИнфо.Процессор);
	Ошибка.Вставить("СерверТипПлатформы", Строка(СисИнфо.ТипПлатформы));
	Ошибка.Вставить("СерверИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
	
	Ошибка.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Ошибка.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Ошибка.Вставить("ДатаОбнаружения", ТекущаяДатаСеанса());

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ТекстОшибкиXML(Ошибка) Экспорт
	
	ДополнитьОписаниеОшибкиНаСервере(Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка.ОбъектМетаданных) ИЛИ ЗначениеЗаполнено(Ошибка.УточнениеРасположения) Тогда
	
		Ошибка.ОбъектыМетаданных.Добавить(Новый Структура("ОбъектМетаданных, УточнениеРасположения", Ошибка.ОбъектМетаданных, Ошибка.УточнениеРасположения));
	
	КонецЕсли; 
	
	Ошибка.Удалить("ОбъектМетаданных");
	Ошибка.Удалить("УточнениеРасположения");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Ошибка);
	
	Возврат ЗаписьXML.Закрыть()
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипОшибкиПоИмениЭтапа(ИмяРаздела = "Себестоимость", КодОсновногоЯзыка)
	
	СоответствиеТипаОшибкиИмениЭтапа = Новый Соответствие;
	
	СоответствиеТипаОшибкиИмениЭтапа.Вставить("ВзаиморасчетыСПартнерами", НСтр("ru = 'Расхождения при расчете взаиморасчетов с партнерами';
																				|en = 'Discrepancies when calculating AR/AP accounting with partners'", КодОсновногоЯзыка));
	СоответствиеТипаОшибкиИмениЭтапа.Вставить("Себестоимость", НСтр("ru = 'Расхождения при расчете себестоимости';
																	|en = 'Discrepancies when calculating cost'", КодОсновногоЯзыка));
	//++ Локализация
	СоответствиеТипаОшибкиИмениЭтапа.Вставить("НДС", НСтр("ru = 'Расхождения при расчете распределения НДС';
															|en = 'Discrepancies when calculating VAT allocation'", КодОсновногоЯзыка));
	//++ НЕ УТ
	СоответствиеТипаОшибкиИмениЭтапа.Вставить("УСН", НСтр("ru = 'Расхождения при расчете отражения доходов и расходов при УСН';
															|en = 'Discrepancies when calculating records of income and expenses under the simplified taxation system'", КодОсновногоЯзыка));
	СоответствиеТипаОшибкиИмениЭтапа.Вставить("РеглУчет", НСтр("ru = 'Расхождения при отражении документов в регл. учете';
																|en = 'Discrepancies when recording documents in local accounting'", КодОсновногоЯзыка));
	//-- НЕ УТ
	//-- Локализация

	//++ НЕ УТКА
	СоответствиеТипаОшибкиИмениЭтапа.Вставить("МеждународныйУчет", НСтр("ru = 'Расхождения при отражении документов в международном учете';
																		|en = 'Discrepancies when recording documents in financial accounting'", КодОсновногоЯзыка));
	//-- НЕ УТКА

	
	// Так же добавим соответсвия событиям журнала регистрации:
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Расчет себестоимости.';
								|en = 'Cost calculation.'", КодОсновногоЯзыка));
	МассивСтрок.Добавить(НСтр("ru = 'Ошибка';
								|en = 'Error'", КодОсновногоЯзыка));
	СоответствиеТипаОшибкиИмениЭтапа.Вставить(СтрСоединить(МассивСтрок), НСтр("ru = 'Ошибка при расчете себестоимости';
																				|en = 'An error occurred when calculating cost'", КодОсновногоЯзыка));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Расчет партий и себестоимости.';
								|en = 'Lot and cost calculation.'", КодОсновногоЯзыка));
	МассивСтрок.Добавить(НСтр("ru = 'Ошибка';
								|en = 'Error'", КодОсновногоЯзыка));
	СоответствиеТипаОшибкиИмениЭтапа.Вставить(СтрСоединить(МассивСтрок), НСтр("ru = 'Ошибка при расчете себестоимости';
																				|en = 'An error occurred when calculating cost'", КодОсновногоЯзыка));
	
	//++ Локализация
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Закрытие месяца.';
								|en = 'Month-end closing.'", КодОсновногоЯзыка));
	МассивСтрок.Добавить(НСтр("ru = 'Распределение НДС.';
								|en = 'VAT allocation.'", КодОсновногоЯзыка));
	СоответствиеТипаОшибкиИмениЭтапа.Вставить(СтрСоединить(МассивСтрок), НСтр("ru = 'Ошибка при расчете распределения НДС';
																				|en = 'An error occurred when calculating VAT allocation'", КодОсновногоЯзыка));
	
	//++ НЕ УТ
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Формирование КУДиР.';
								|en = 'LIE generation.'", КодОсновногоЯзыка));
	МассивСтрок.Добавить(НСтр("ru = 'Признание расходов.';
								|en = 'Expense recognition.'", КодОсновногоЯзыка));
	СоответствиеТипаОшибкиИмениЭтапа.Вставить(СтрСоединить(МассивСтрок),
		НСтр("ru = 'Ошибка при расчете отражения доходов и расходов при УСН';
			|en = 'An error occurred when calculating records of income and expenses under the simplified taxation system'", КодОсновногоЯзыка));
	
	СоответствиеТипаОшибкиИмениЭтапа.Вставить(НСтр("ru = 'Отражение в регламентированном учете';
													|en = 'Record in local accounting'", КодОсновногоЯзыка),
		НСтр("ru = 'Ошибка при отражении документов в регл. учете';
			|en = 'An error occurred when recording documents in local accounting'", КодОсновногоЯзыка));
	//-- НЕ УТ
	//-- Локализация
	
	//++ НЕ УТКА
	СоответствиеТипаОшибкиИмениЭтапа.Вставить(НСтр("ru = 'Отражение в международном учете';
													|en = 'General ledger posting'", КодОсновногоЯзыка),
		НСтр("ru = 'Ошибка при отражении документов в международном учете';
			|en = 'An error occurred when recording documents in financial accounting'", КодОсновногоЯзыка));
	//-- НЕ УТКА

	ТипОшибки = СоответствиеТипаОшибкиИмениЭтапа.Получить(ИмяРаздела);
	
	Возврат ?(ЗначениеЗаполнено(ТипОшибки), ТипОшибки, ИмяРаздела);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЭтапаТестирования(ЭтапТестирования)
	
	СоответствиеПредставленияЭтапу = Новый Соответствие;
	
	СоответствиеПредставленияЭтапу.Вставить("ПерезакрытьМесяц", НСтр("ru = 'Расчет закрытия месяца';
																	|en = 'Month-end closing calculation'"));
	СоответствиеПредставленияЭтапу.Вставить("ПереходНаНовыеВзаиморасчеты", НСтр("ru = 'Переход на новую архитектура взаиморасчетов';
																				|en = 'Migrate to a new AR/AP configuration'"));
	СоответствиеПредставленияЭтапу.Вставить("ПерезаполнитьНовыеВзаиморасчеты", НСтр("ru = 'Перезаполнение взаиморасчетов по новой архитектуре';
																					|en = 'Refill AR/AP accounting based on the new configuration'"));
	
	Представление = СоответствиеПредставленияЭтапу.Получить(ЭтапТестирования);
	
	Возврат ?(ЗначениеЗаполнено(Представление), Представление, СоответствиеПредставленияЭтапу.Получить("ПерезакрытьМесяц"));
	
КонецФункции

&НаКлиенте
Процедура ДополнитьОшибкуРасхождениямиВлияющихЭтапов(ТекущийЭтап, Ошибка, ДанныеРасхождений)
	
	ДопУточнениеРасположения = "";
	ДопПорядокВоспроизведения = "";
	
	Если ТекущийЭтап = "НДС" Тогда
		РасхожденияВзаиморасчетыСПартнерами = ДанныеРасхождений.Получить("ВзаиморасчетыСПартнерами");
		Если РасхожденияВзаиморасчетыСПартнерами <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияВзаиморасчетыСПартнерами);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Взаиморасчеты с партнерами';
					|en = 'AR/AP accounting with partners'") + ": " + РасхожденияВзаиморасчетыСПартнерами;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Взаиморасчеты с партнерами';
																							|en = 'AR/AP accounting with partners'") + ";";
		КонецЕсли;
		РасхожденияСебестоимость = ДанныеРасхождений.Получить("Себестоимость");
		Если РасхожденияСебестоимость <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияСебестоимость);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Себестоимость';
					|en = 'Cost'") + ": " + РасхожденияСебестоимость;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Себестоимость';
																							|en = 'Cost'") + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийЭтап = "УСН" Тогда
		РасхожденияВзаиморасчетыСПартнерами = ДанныеРасхождений.Получить("ВзаиморасчетыСПартнерами");
		Если РасхожденияВзаиморасчетыСПартнерами <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияВзаиморасчетыСПартнерами);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Взаиморасчеты с партнерами';
					|en = 'AR/AP accounting with partners'") + ": " + РасхожденияВзаиморасчетыСПартнерами;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Взаиморасчеты с партнерами';
																							|en = 'AR/AP accounting with partners'") + ";";
		КонецЕсли;
		РасхожденияСебестоимость = ДанныеРасхождений.Получить("Себестоимость");
		Если РасхожденияСебестоимость <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияСебестоимость);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Себестоимость';
					|en = 'Cost'") + ": " + РасхожденияСебестоимость;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Себестоимость';
																							|en = 'Cost'") + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийЭтап = "РеглУчет" Тогда
		РасхожденияВзаиморасчетыСПартнерами = ДанныеРасхождений.Получить("ВзаиморасчетыСПартнерами");
		Если РасхожденияВзаиморасчетыСПартнерами <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияВзаиморасчетыСПартнерами);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Взаиморасчеты с партнерами';
					|en = 'AR/AP accounting with partners'") + ": " + РасхожденияВзаиморасчетыСПартнерами;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Взаиморасчеты с партнерами';
																							|en = 'AR/AP accounting with partners'") + ";";
		КонецЕсли;
		РасхожденияСебестоимость = ДанныеРасхождений.Получить("Себестоимость");
		Если РасхожденияСебестоимость <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияСебестоимость);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Себестоимость';
					|en = 'Cost'") + ": " + РасхожденияСебестоимость;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Себестоимость';
																							|en = 'Cost'") + ";";
		КонецЕсли;
		РасхожденияНДС = ДанныеРасхождений.Получить("НДС");
		Если РасхожденияНДС <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияНДС);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'НДС';
					|en = 'VAT'") + ": " + РасхожденияНДС;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'НДС';
																							|en = 'VAT'") + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийЭтап = "МеждународныйУчет" Тогда
		РасхожденияВзаиморасчетыСПартнерами = ДанныеРасхождений.Получить("ВзаиморасчетыСПартнерами");
		Если РасхожденияВзаиморасчетыСПартнерами <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияВзаиморасчетыСПартнерами);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Взаиморасчеты с партнерами';
					|en = 'AR/AP accounting with partners'") + ": " + РасхожденияВзаиморасчетыСПартнерами;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Взаиморасчеты с партнерами';
																							|en = 'AR/AP accounting with partners'") + ";";
		КонецЕсли;
		РасхожденияСебестоимость = ДанныеРасхождений.Получить("Себестоимость");
		Если РасхожденияСебестоимость <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияСебестоимость);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Себестоимость';
					|en = 'Cost'") + ": " + РасхожденияСебестоимость;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Себестоимость';
																							|en = 'Cost'") + ";";
		КонецЕсли;
		РасхожденияРеглУчет = ДанныеРасхождений.Получить("РеглУчет");
		Если РасхожденияРеглУчет <> Неопределено Тогда
			Ошибка.ИменаФайлов.Добавить(РасхожденияРеглУчет);
			ДопУточнениеРасположения = ДопУточнениеРасположения + Символы.ПС + "- " +
				НСтр("ru = 'Регл. учет';
					|en = 'Local accounting'") + ": " + РасхожденияРеглУчет;
			ДопПорядокВоспроизведения = ДопПорядокВоспроизведения + Символы.ПС + "- " + НСтр("ru = 'Регл. учет';
																							|en = 'Local accounting'") + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопУточнениеРасположения) Тогда
		Ошибка.УточнениеРасположения = Ошибка.УточнениеРасположения + Символы.ПС +
			НСтр("ru = 'Файлы с расхождениями по дополнительным регистрам:';
				|en = 'Files with discrepancies by additional registers:'") + ДопУточнениеРасположения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПорядокВоспроизведения) Тогда
		Ошибка.ПорядокВоспроизведения = Ошибка.ПорядокВоспроизведения + Символы.ПС +
			НСтр("ru = 'Так же есть отличия по этапам влияющим на текущий:';
				|en = 'There are also differences in steps affecting the current one:'") + ДопПорядокВоспроизведения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт  

	ПараметрыОтчета = Новый Структура("ПутьКФайлу, СформироватьПриОткрытии", Адрес, Истина);
	ОткрытьФорму("Отчет.РезультатыТестирования.Форма.ФормаОтчета", ПараметрыОтчета, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Задание = ПроверитьЗаданиеВыполнено();
	Статус = Задание.Статус;
	
	Если Задание.Прогресс <> Неопределено Тогда
		ПрогрессСтрокой = ПрогрессСтрокой(Задание.Прогресс);
		Если Не ПустаяСтрока(ПрогрессСтрокой) Тогда
			Элементы.ЗаголовокРасчетаВФоне.Заголовок = НСтр("ru = 'Выполняются операции закрытия месяца ....';
															|en = 'Month-end closing operations are in progress...'") + " " + ПрогрессСтрокой;
		КонецЕсли;
	КонецЕсли;
	Если Задание.Сообщения <> Неопределено Тогда
		Если Задание.Прогресс <> Неопределено И Задание.Сообщения.Количество() Тогда
			СообщениеОбОшибке.ДобавитьСтроку(Задание.Прогресс.Текст + ":");
		КонецЕсли;
		Для каждого СообщениеПользователю Из Задание.Сообщения Цикл
			СообщениеОбОшибке.ДобавитьСтроку(СообщениеПользователю.Текст);
		КонецЦикла;
	КонецЕсли;
	
	Если Статус = "Выполнено" Тогда
		
		ОбработатьРезультатТестирования();
		ИдентификаторЗадания = Неопределено;
		ИзмененияВИнтерфейсеПриРаботеВФоне();
		
	ИначеЕсли Статус = "Ошибка" Тогда
		
		Ошибка = СоздатьОписаниеОшибки();
		Ошибка.ТипОшибки = "Ошибка тестирования";
		Ошибка.ПорядокВоспроизведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла критичная ошибка при тестировании.
			|Месяц начала расчета: %1
			|Дата запуска: %2
			|Дата завершения: %3';
			|en = 'A critical error occurred when testing. 
			|Calculation start month: %1
			|Start date: %2
			|End date: %3'"),
			НачалоРасчета,
			ДатаНачала,
			ДатаОкончания);
		Ошибка.ИсходнаяИнформация = Задание.ПодробноеПредставлениеОшибки;
		Ошибка.ОбъектМетаданных = "";
		Ошибка.УточнениеРасположения = "";
		Ошибки.Добавить(ТекстОшибкиXML(Ошибка));
		
		СообщитьОбОшибке(Ошибка);
		ИдентификаторЗадания = Неопределено;
		ИзмененияВИнтерфейсеПриРаботеВФоне();
		
	КонецЕсли;
	
	Если Статус = "Выполняется" Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПрогрессСтрокой(Прогресс)
	
	Результат = "";
	Если Прогресс = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Процент = 0;
	Если Прогресс.Свойство("Процент", Процент) Тогда
		Результат = Строка(Процент) + "%";
	КонецЕсли;
	Текст = 0;
	Если Прогресс.Свойство("Текст", Текст) Тогда
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + " (" + Текст + ")";
		Иначе
			Результат = Текст;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаданиеВыполнено()
	
	Задание = ДлительныеОперации.ОперацияВыполнена(ИдентификаторЗадания);
	
	Возврат Задание;
	
КонецФункции

&НаСервере
Функция ОтменитьФоновоеЗаданиеЗакрытияМесяца()
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Результат = Истина;
	Иначе
		Результат = ЗакрытиеМесяцаСервер.ОтменитьВыполнениеФоновогоЗадания(ИдентификаторЗадания);
		РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ДеревоТестированияНавигационнаяСсылка"].Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ДеревоТестирования.КоличествоРасхождений", 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не найдено';
																|en = 'Not found'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

#КонецОбласти

