//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СменноСуточноеЗадание") Тогда
		
		ТабличныйДокумент = СформироватьСменноСуточноеЗадание(ПараметрыПечати, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
									КоллекцияПечатныхФорм,
									"СменноСуточноеЗадание",
									НСтр("ru = 'Сменно-суточное задание';
										|en = 'Shift-day job'"),
									ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список маршрутных листов для диспетчирования.
//
// Параметры:
//  ПараметрыЗадания - Структура - настройки чтения данных. 
//  АдресХранилища	 - УникальныйИдентификатор, Строка - Уникальный идентификатор формы,
//		во временное хранилище которой надо поместить результат заполнения.
//		Или адрес во временном хранилище, по которому надо поместить результат заполнения.
//
Процедура ОбновитьМаршрутныеЛисты(Знач ПараметрыЗадания, АдресХранилища) Экспорт
	
	ЗаполнитьСписокМаршрутныхЛистов(ПараметрыЗадания);
	ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	
КонецПроцедуры

// Выводит пооперационное расписание производства в диаграмму Ганта.
//
// Параметры:
//  ПараметрыЗадания - Структура - настройки чтения данных. 
//  АдресХранилища	 - УникальныйИдентификатор, Строка - Уникальный идентификатор формы,
//		во временное хранилище которой надо поместить результат заполнения.
//		Или адрес во временном хранилище, по которому надо поместить результат заполнения.
//
Процедура ОбновитьРасписание(Знач ПараметрыЗадания, АдресХранилища) Экспорт
	
	ЗаполнитьРасписаниеПроизводства(ПараметрыЗадания);
	ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	
КонецПроцедуры

// Инициирует формирование маршрутных листов.
//
// Параметры:
//  Параметры		 - Структура - параметры формирования документов.
//  АдресХранилища	 - УникальныйИдентификатор, Строка - Уникальный идентификатор формы,
//		во временное хранилище которой надо поместить результат заполнения.
//		Или адрес во временном хранилище, по которому надо поместить результат формирования.
//
Процедура СформироватьМаршрутныеЛисты(Параметры, АдресХранилища) Экспорт
	
	КлючеваяОперация = "ВнутрицеховоеУправление.ФормированиеМаршрутныхЛистов.ДиспетчированиеПроизводства";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ДанныеДляФормирования = ДанныеДляФормированияМаршрутныхЛистов(Параметры);
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, ДанныеДляФормирования.Количество(), "ДанныеДляФормированияМаршрутныхЛистов");
	
	Результат = СформироватьМаршрутныеЛистыВнутриЗамераВремени(Параметры, ДанныеДляФормирования);
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, Результат.КоличествоОбработанных, "СформироватьМаршрутныеЛистыВнутриЗамераВремени");
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Возвращает данные для формирования сменно-суточных заданий.
//
// Параметры:
//  ПараметрыВыборки - Структура - параметры выбора данных. Описание см. ПараметрыВыборкиСменноСуточныхЗаданий.
// 
// Возвращаемое значение:
//  РезультатЗапроса - выбранные данные.
//
Функция ДанныеСменноСуточныхЗаданий(ПараметрыВыборки) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПооперационноеРасписание.Начало, ДЕНЬ)) КАК ДатаЗадания,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	МАКСИМУМ(ПооперационноеРасписание.Окончание) КАК Окончание,
	|	ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры) КАК РабочийЦентр,
	|	ПооперационноеРасписание.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ПооперационноеРасписание.Штрихкод КАК Штрихкод,
	|	ОперацииМаршрутовПроизводства.Операция
	|ПОМЕСТИТЬ Расписание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|		ПО ПооперационноеРасписание.ИдентификаторОперации = ОперацииМаршрутовПроизводства.ИдентификаторОперации
	|ГДЕ
	|	(&Начало = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ПооперационноеРасписание.МаршрутныйЛист.Окончание >= &Начало)
	|	И (&Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ПооперационноеРасписание.МаршрутныйЛист.Начало <= &Окончание)
	|	И (&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ИЛИ ПооперационноеРасписание.Подразделение = &Подразделение)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры),
	|	ПооперационноеРасписание.МаршрутныйЛист,
	|	ПооперационноеРасписание.Штрихкод,
	|	ОперацииМаршрутовПроизводства.Операция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторОперации,
	|	МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.ДатаЗадания КАК ДатаЗадания,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Бригада КАК Бригада,
	|	МаршрутныйЛистПроизводстваТрудозатраты.ВидРабот,
	|	МаршрутныйЛистПроизводстваТрудозатраты.ВидРабот.Представление,
	|	Расписание.МаршрутныйЛист,
	|	Расписание.Начало КАК Начало,
	|	Расписание.Окончание КАК Окончание,
	|	Расписание.МаршрутныйЛист.Номер КАК Номер,
	|	Расписание.МаршрутныйЛист.Дата КАК Дата,
	|	Расписание.МаршрутныйЛист.Запланировано КАК Запланировано,
	|	Расписание.МаршрутныйЛист.Этап КАК Этап,
	|	Расписание.МаршрутныйЛист.Этап.Представление КАК ЭтапПредставление,
	|	Расписание.МаршрутныйЛист.Спецификация КАК Спецификация,
	|	Расписание.МаршрутныйЛист.Спецификация.Представление КАК СпецификацияПредставление,
	|	Расписание.МаршрутныйЛист.Спецификация.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	Расписание.Операция КАК Операция,
	|	ВЫБОР
	|		КОГДА Расписание.Операция ССЫЛКА Справочник.ТехнологическиеОперации
	|			ТОГДА Расписание.Операция.Представление
	|		ИНАЧЕ Расписание.Операция
	|	КОНЕЦ КАК ОперацияПредставление,
	|	Расписание.РабочийЦентр,
	|	Расписание.РабочийЦентр.Представление,
	|	Расписание.Штрихкод,
	|	Расписание.ИдентификаторОперации
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК МаршрутныйЛистПроизводстваТрудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расписание КАК Расписание
	|		ПО МаршрутныйЛистПроизводстваТрудозатраты.Ссылка = Расписание.МаршрутныйЛист
	|			И МаршрутныйЛистПроизводстваТрудозатраты.КлючСвязиОперации = Расписание.ИдентификаторОперации
	|ГДЕ
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка В
	|			(ВЫБРАТЬ
	|				Расписание.МаршрутныйЛист
	|			ИЗ
	|				Расписание)
	|	И МаршрутныйЛистПроизводстваТрудозатраты.КлючСвязиОперации В
	|			(ВЫБРАТЬ
	|				Расписание.ИдентификаторОперации КАК КлючСвязиОперации
	|			ИЗ
	|				Расписание)
	|	И (НЕ &ОтборДатыЗаданий
	|			ИЛИ Расписание.ДатаЗадания В (&ДатыЗаданий))
	|	И (НЕ &ОтборБригады
	|				И МаршрутныйЛистПроизводстваТрудозатраты.Бригада <> ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистПроизводстваТрудозатраты.Бригада В (&Бригады))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Начало, ДЕНЬ),
	|	МаршрутныйЛистПроизводстваТрудозатраты.Бригада,
	|	МаршрутныйЛистПроизводстваТрудозатраты.ВидРабот,
	|	МаршрутныйЛистПроизводстваТрудозатраты.ВидРабот.Представление,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка,
	|	NULL,
	|	NULL,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Номер,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Дата,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Запланировано,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Этап,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Этап.Представление,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Спецификация,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Спецификация.Представление,
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Спецификация.МногоэтапныйПроизводственныйПроцесс,
	|	ЕСТЬNULL(МаршрутныйЛистПроизводстваОперации.Операция, ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводстваОперации.Операция ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МаршрутныйЛистПроизводстваОперации.Операция ССЫЛКА Справочник.ТехнологическиеОперации
	|					ТОГДА МаршрутныйЛистПроизводстваОперации.Операция.Представление
	|				ИНАЧЕ МаршрутныйЛистПроизводстваОперации.Операция
	|			КОНЕЦ
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК МаршрутныйЛистПроизводстваТрудозатраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	|		ПО МаршрутныйЛистПроизводстваТрудозатраты.Ссылка = МаршрутныйЛистПроизводстваОперации.Ссылка
	|			И МаршрутныйЛистПроизводстваТрудозатраты.КлючСвязиОперации = МаршрутныйЛистПроизводстваОперации.КлючСвязи
	|ГДЕ
	|	(&Начало = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Окончание >= &Начало)
	|	И (&Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Начало <= &Окончание)
	|	И (&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Подразделение = &Подразделение)
	|	И (НЕ &ОтборДатыЗаданий
	|			ИЛИ НАЧАЛОПЕРИОДА(МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Начало, ДЕНЬ) В (&ДатыЗаданий))
	|	И (НЕ &ОтборБригады
	|				И МаршрутныйЛистПроизводстваТрудозатраты.Бригада <> ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистПроизводстваТрудозатраты.Бригада В (&Бригады))
	|	И НЕ МаршрутныйЛистПроизводстваТрудозатраты.КлючСвязиОперации В
	|				(ВЫБРАТЬ
	|					Расписание.ИдентификаторОперации КАК КлючСвязиОперации
	|				ИЗ
	|					Расписание)
	|	И (МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование)
	|	ИЛИ МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций))
	|	И МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Проведен = ИСТИНА
	|	И МаршрутныйЛистПроизводстваТрудозатраты.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗадания,
	|	Бригада,
	|	Начало,
	|	Окончание
	|ИТОГИ ПО
	|	Бригада,
	|	ДатаЗадания");
	
	Запрос.УстановитьПараметр("Начало", ПараметрыВыборки.Начало);
	Запрос.УстановитьПараметр("Окончание", ПараметрыВыборки.Окончание);
	Запрос.УстановитьПараметр("Подразделение", ПараметрыВыборки.Подразделение);
	
	Запрос.УстановитьПараметр("ДатыЗаданий", ПараметрыВыборки.ДатыЗаданий);
	Запрос.УстановитьПараметр("ОтборДатыЗаданий", ЗначениеЗаполнено(ПараметрыВыборки.ДатыЗаданий));
	
	Запрос.УстановитьПараметр("Бригады", ПараметрыВыборки.Бригады);
	Запрос.УстановитьПараметр("ОтборБригады", ЗначениеЗаполнено(ПараметрыВыборки.Бригады));
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция - конструктор параметров, используемых при выборке данных сменно-суточных заданий
// см. метод ДанныеСменноСуточныхЗаданий).
// 
// Возвращаемое значение:
//  Структура - параметры выборки.
//
Функция ПараметрыВыборкиСменноСуточныхЗаданий() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Начало", '00010101');
	Результат.Вставить("Окончание", '00010101');
	Результат.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Результат.Вставить("ДатыЗаданий", Новый Массив);
	Результат.Вставить("Бригады", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция СформироватьСменноСуточноеЗадание(ПараметрыПечати, ОбъектыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ДиспетчированиеПроизводстваПооперационное.ПФ_MXL_СменноСуточноеЗадание");
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПодготовитьДокументДляВыводаЗаданий(ТабличныйДокумент);
	
	ДанныеЗаданий = ДанныеСменноСуточныхЗаданий(ПараметрыПечати);
	ВыборкаБригады = ДанныеЗаданий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаданияВыдал = Пользователи.ТекущийПользователь();
	ПервыйДокумент = Истина;
	
	Пока ВыборкаБригады.Следующий() Цикл
		
		ВыборкаДатыЗаданий = ВыборкаБригады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДатыЗаданий.Следующий() Цикл
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент    = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Вывод заголовка.
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			ОбластьЗаголовок.Параметры.ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = 'Сменно-суточное задание на %1';
																			|en = 'Shift-day job on %1'"),
																		Формат(ВыборкаДатыЗаданий.ДатаЗадания, "ДЛФ=D"));
																		
			ОбластьЗаголовок.Параметры.Бригада = ВыборкаБригады.Бригада;
			ОбластьЗаголовок.Параметры.Выдал   = ЗаданияВыдал;
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			
			СсылкаОбластьПечати = ОбластьЗаголовок.Параметры.ТекстЗаголовка + " (" + ОбластьЗаголовок.Параметры.Бригада + ")";
			
			// Вывод данных.
			ВывестиДанныеЗадания(ТабличныйДокумент, ВыборкаДатыЗаданий, ОбластьШапка, Макет);
			
			// Вывод подвала.
			ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
			ТабличныйДокумент.Вывести(ОбластьПодписи);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаОбластьПечати);
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ПодготовитьДокументДляВыводаЗаданий(ТабличныйДокумент)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СменноСуточноеЗадание";
	
КонецПроцедуры

Процедура ВывестиДанныеЗадания(ТабличныйДокумент, ДанныеЗадания, ОбластьШапка, Макет)
	
	НомерСтраницы = 1;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	НомерСтроки = 0;
	
	СтрокаОперация = ДанныеЗадания.Выбрать();
	Пока СтрокаОперация.Следующий() Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтрока.Параметры.Заполнить(СтрокаОперация);
		
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаОперация.Номер, Ложь, Истина);
		ОбластьСтрока.Параметры.МаршрутныйЛистСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№%1 от %2';
				|en = 'No. %1 from %2'"), 
			НомерНаПечать, 
			Формат(СтрокаОперация.Дата, "ДЛФ=D"));
		
		СпецификацияСтрока = СтрокаОперация.СпецификацияПредставление;
		Если СтрокаОперация.МногоэтапныйПроизводственныйПроцесс Тогда
			СпецификацияСтрока = СпецификацияСтрока + ", " + СтрокаОперация.ЭтапПредставление;
		КонецЕсли;
		ОбластьСтрока.Параметры.СпецификацияСтрока = СпецификацияСтрока;
		ОбластьСтрока.Параметры.НомерСтроки = Формат(НомерСтроки, "ЧГ=");
		
		Если ЗначениеЗаполнено(СтрокаОперация.Операция) И ЗначениеЗаполнено(СтрокаОперация.ВидРабот) Тогда
			ОперацияСтрока = СтрокаОперация.ОперацияПредставление + ", " + СтрокаОперация.ВидРаботПредставление;
		ИначеЕсли ЗначениеЗаполнено(СтрокаОперация.Операция) Тогда
			ОперацияСтрока = СтрокаОперация.ОперацияПредставление;
		ИначеЕсли ЗначениеЗаполнено(СтрокаОперация.ВидРабот) Тогда
			ОперацияСтрока = СтрокаОперация.ВидРаботПредставление;
		Иначе
			ОперацияСтрока = "";
		КонецЕсли;
		ОбластьСтрока.Параметры.Операция = ОперацияСтрока;
		
		ВывестиШтрихкодОперации(ОбластьСтрока, СтрокаОперация);
		
		Если НомерСтроки = 1 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			
			Если НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиШтрихкодОперации(Область, ДанныеОперации)
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Рисунки, "ШтрихкодОперация") Тогда
		
		Рисунок = Область.Рисунки.ШтрихкодОперация;
		Если ЗначениеЗаполнено(ДанныеОперации.Штрихкод) Тогда
			
			Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
			КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
			ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
			ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ДанныеОперации.Штрихкод));
			ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
			ПараметрыШтрихкода.Вставить("ТипКода",          1); // EAN13
			ПараметрыШтрихкода.Вставить("ОтображатьТекст",  Ложь);
			ПараметрыШтрихкода.Вставить("РазмерШрифта",     9);
			
			Рисунок.Картинка = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода).Картинка;
			
		Иначе
			
			Область.Рисунки.Удалить(Рисунок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеДиспетчирования

#Область МаршрутныеЛисты

Процедура ЗаполнитьСписокМаршрутныхЛистов(Параметры)
	
	// Получение данных для заполнения списка маршрутных листов.
	ТаблицаМаршрутныеЛисты = ДанныеДляЗаполненияСпискаМаршрутныхЛистов(Параметры);
	
	НомерВОчереди = 1;
	Для каждого СтрокаМаршрутныйЛист Из ТаблицаМаршрутныеЛисты Цикл
		
		НоваяСтрока = Параметры.СписокМаршрутныхЛистов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМаршрутныйЛист);
		
		НоваяСтрока.НомерВОчереди = НомерВОчереди;
		
		ЗаполнитьСвойствоМЛПредставление(НоваяСтрока, СтрокаМаршрутныйЛист);
		ЗаполнитьСвойствоЗаказПредставление(НоваяСтрока, СтрокаМаршрутныйЛист);
		
		ЗаполнитьПредупрежденияПоМЛ(Параметры, НоваяСтрока, СтрокаМаршрутныйЛист);
		
		НомерВОчереди = НомерВОчереди + 1;
		
	КонецЦикла;
	
	ЗаполнитьСвойствоМЛНеЗавершеныПредыдущиеЭтапы(Параметры);
	ЗаполнитьСвойствоМЛДефицитМатериалов(Параметры);
	
КонецПроцедуры

Функция ДанныеДляЗаполненияСпискаМаршрутныхЛистов(Параметры)
	
	ТекстЗапроса = ТекстЗапросаМаршрутныеЛисты();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачала",    Параметры.Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Параметры.Окончание);
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	Запрос.УстановитьПараметр("СтатусыНеВыполнен", СтатусыМЛБезВыполнен());
	Запрос.УстановитьПараметр("ДатаКонтроля", Параметры.ДатаКонтроля);
	Запрос.УстановитьПараметр("КрайнийСрокНачалаВыполнения", Параметры.КрайнийСрокНачалаВыполнения);
	Запрос.УстановитьПараметр("СписокЭтапов", Параметры.СписокЭтапов);
	Запрос.УстановитьПараметр("ОтборСписокЭтапов", ЗначениеЗаполнено(Параметры.СписокЭтапов));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаМаршрутныеЛисты()
	
	Результат = 
	"ВЫБРАТЬ
	|	СписокЭтапов.Распоряжение,
	|	СписокЭтапов.КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ВТ_СписокЭтапов
	|ИЗ
	|	&СписокЭтапов КАК СписокЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистПроизводства.Ссылка КАК МаршрутныйЛист
	|ПОМЕСТИТЬ ВТ_МаршрутныеЛисты
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Проведен
	|	И (&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистПроизводства.Подразделение = &Подразделение)
	|	И (МаршрутныйЛистПроизводства.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование)
	|			ИЛИ МаршрутныйЛистПроизводства.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций))
	|	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МаршрутныйЛистПроизводства.Окончание >= &ДатаНачала)
	|	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МаршрутныйЛистПроизводства.Начало <= &ДатаОкончания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка КАК МаршрутныйЛист,
	|	МАКСИМУМ(ВложенныйЗапрос.ОформитьВыработку) КАК ОформитьВыработку,
	|	МАКСИМУМ(ВложенныйЗапрос.ОформитьВыпуск) КАК ОформитьВыпуск
	|ПОМЕСТИТЬ ВТ_ВыработкаВыпуск
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТрудозатратыКОформлению.Распоряжение КАК Ссылка,
	|		ИСТИНА КАК ОформитьВыработку,
	|		ЛОЖЬ КАК ОформитьВыпуск
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыКОформлению.Остатки(
	|				,
	|				Распоряжение В
	|					(ВЫБРАТЬ
	|						ВТ_МаршрутныеЛисты.МаршрутныйЛист КАК Распоряжение
	|					ИЗ
	|						ВТ_МаршрутныеЛисты)) КАК ТрудозатратыКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыпускПродукцииКОформлению.Распоряжение,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
	|				,
	|				Распоряжение В
	|					(ВЫБРАТЬ
	|						ВТ_МаршрутныеЛисты.МаршрутныйЛист КАК Распоряжение
	|					ИЗ
	|						ВТ_МаршрутныеЛисты)) КАК ВыпускПродукцииКОформлению) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.МаршрутныйЛист КАК МаршрутныйЛист,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	МАКСИМУМ(ПооперационноеРасписание.Окончание) КАК Окончание,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА (ПооперационноеРасписание.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|					ИЛИ ПооперационноеРасписание.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.РегистрацияФакта)
	|						И ПооперационноеРасписание.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка))
	|					И ПооперационноеРасписание.Начало < &КрайнийСрокНачалаВыполнения
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НарушенСрокНачалаВыполненияОпераций,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА (ПооперационноеРасписание.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.РегистрацияФакта)
	|						И НЕ ПооперационноеРасписание.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|					ИЛИ ПооперационноеРасписание.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.РегистрацияОтклонений)
	|						И НЕ ПооперационноеРасписание.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|						И НЕ ПооперационноеРасписание.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено))
	|					И ПооперационноеРасписание.Окончание < &ДатаКонтроля
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НарушенСрокОкончанияВыполненияОпераций,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПооперационноеРасписание.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ПооперационноеРасписание.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОГДА ПооперационноеРасписание.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.РегистрацияОтклонений)
	|					ИЛИ ПооперационноеРасписание.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ПооперационноеРасписание.Окончание <= &ДатаКонтроля
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОперацииЗавершены
	|ПОМЕСТИТЬ ВТ_Расписание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МаршрутныйЛист В
	|			(ВЫБРАТЬ
	|				ВТ_МаршрутныеЛисты.МаршрутныйЛист
	|			ИЗ
	|				ВТ_МаршрутныеЛисты)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.МаршрутныйЛист
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистПроизводстваОперации.Ссылка КАК МаршрутныйЛист,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|				ТОГДА 0
	|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|				ТОГДА 1
	|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|				ТОГДА 2
	|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодСтатусаВыполнения
	|ПОМЕСТИТЬ ВТ_СтатусыОперацийМЛ
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	|ГДЕ
	|	МаршрутныйЛистПроизводстваОперации.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_МаршрутныеЛисты.МаршрутныйЛист
	|			ИЗ
	|				ВТ_МаршрутныеЛисты)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистПроизводстваОперации.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистПроизводства.Ссылка КАК МаршрутныйЛист,
	|	МаршрутныйЛистПроизводства.Статус КАК Статус,
	|	МаршрутныйЛистПроизводства.Приоритет КАК Приоритет,
	|	МаршрутныйЛистПроизводства.Номер КАК Номер,
	|	МаршрутныйЛистПроизводства.Дата КАК Дата,
	|	МаршрутныйЛистПроизводства.Распоряжение КАК Заказ,
	|	МаршрутныйЛистПроизводства.Распоряжение.Номер КАК ЗаказНомер,
	|	МаршрутныйЛистПроизводства.Распоряжение.Дата КАК ЗаказДата,
	|	МаршрутныйЛистПроизводства.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	МаршрутныйЛистПроизводства.УправлениеМаршрутнымиЛистами,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|			ТОГДА НАЧАЛОПЕРИОДА(МаршрутныйЛистПроизводства.Начало, ЧАС)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(МаршрутныйЛистПроизводства.Начало, ДЕНЬ)
	|	КОНЕЦ КАК НачалоПоГрафику,
	|	ЕСТЬNULL(ВТ_Расписание.Начало, МаршрутныйЛистПроизводства.Начало) КАК НачалоПоРасписанию,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|			ТОГДА КОНЕЦПЕРИОДА(МаршрутныйЛистПроизводства.Окончание, ЧАС)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(МаршрутныйЛистПроизводства.Окончание, ДЕНЬ)
	|	КОНЕЦ КАК ОкончаниеПоГрафику,
	|	ЕСТЬNULL(ВТ_Расписание.Окончание, МаршрутныйЛистПроизводства.Окончание) КАК ОкончаниеПоРасписанию,
	|	МаршрутныйЛистПроизводства.Запланировано,
	|	МаршрутныйЛистПроизводства.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	МаршрутныйЛистПроизводства.СостояниеРасписания,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.СостояниеРасписания <> ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.Сформировано)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяСформироватьРасписание,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.СостояниеРасписания <> ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.Сформировано)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяСформироватьРасписаниеКартинка,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ИЛИ МаршрутныйЛистПроизводства.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ИСТИНА КАК Пометка,
	|	ЕСТЬNULL(ВТ_ВыработкаВыпуск.ОформитьВыработку, ЛОЖЬ) КАК ТребуетсяОформитьВыработкуСотрудников,
	|	ЕСТЬNULL(ВТ_ВыработкаВыпуск.ОформитьВыпуск, ЛОЖЬ) КАК ТребуетсяОформитьВыпуск,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛистПроизводства.ФактическоеОкончание <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗавершеноВыполнениеМаршрутногоЛиста,
	|	МаршрутныйЛистПроизводства.ПланироватьРаботуВидовРабочихЦентров КАК ПланироватьРаботу,
	|	ВТ_Расписание.НарушенСрокНачалаВыполненияОпераций,
	|	ВТ_Расписание.НарушенСрокОкончанияВыполненияОпераций,
	|	ВЫБОР
	|		КОГДА НЕ МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|			ТОГДА ВЫБОР
	|					КОГДА МаршрутныйЛистПроизводства.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование)
	|							И ВТ_Расписание.ОперацииЗавершены
	|						ТОГДА ИСТИНА
	|					КОГДА МаршрутныйЛистПроизводства.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций)
	|							И ВТ_СтатусыОперацийМЛ.КодСтатусаВыполнения = 3
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяОтметитьВыполненным
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыработкаВыпуск КАК ВТ_ВыработкаВыпуск
	|		ПО МаршрутныйЛистПроизводства.Ссылка = ВТ_ВыработкаВыпуск.МаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Расписание КАК ВТ_Расписание
	|		ПО МаршрутныйЛистПроизводства.Ссылка = ВТ_Расписание.МаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыОперацийМЛ КАК ВТ_СтатусыОперацийМЛ
	|		ПО МаршрутныйЛистПроизводства.Ссылка = ВТ_СтатусыОперацийМЛ.МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_МаршрутныеЛисты.МаршрутныйЛист
	|			ИЗ
	|				ВТ_МаршрутныеЛисты)
	|	И (МаршрутныйЛистПроизводства.Статус В (&СтатусыНеВыполнен)
	|			ИЛИ ЕСТЬNULL(ВТ_ВыработкаВыпуск.ОформитьВыработку, ЛОЖЬ) = ИСТИНА
	|			ИЛИ ЕСТЬNULL(ВТ_ВыработкаВыпуск.ОформитьВыпуск, ЛОЖЬ) = ИСТИНА)
	|	И (НЕ &ОтборСписокЭтапов
	|			ИЛИ (МаршрутныйЛистПроизводства.Распоряжение, МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик) В
	|				(ВЫБРАТЬ
	|					ВТ_СписокЭтапов.Распоряжение,
	|					ВТ_СписокЭтапов.КодСтрокиЭтапыГрафик
	|				ИЗ
	|					ВТ_СписокЭтапов))
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйЛист
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив со статусами маршрутного листа, исключая статус "Выполнен".
//
Функция СтатусыМЛБезВыполнен()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан);
	Результат.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.КВыполнению);
	Результат.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСвойствоМЛПредставление(СтрокаМаршрут, ДанныеЗаполнения)
	
	СтрокаМаршрут.МаршрутныйЛистСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '№%1 от %2';
									|en = 'No. %1 from %2'"),
								ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеЗаполнения.Номер, Ложь, Истина),
								Формат(ДанныеЗаполнения.Дата, "ДЛФ=D"));

КонецПроцедуры

Процедура ЗаполнитьСвойствоЗаказПредставление(СтрокаМаршрут, ДанныеЗаполнения)
	
	СтрокаМаршрут.ЗаказСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '№%1 от %2';
									|en = 'No. %1 from %2'"),
								ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеЗаполнения.ЗаказНомер, Ложь, Истина),
								Формат(ДанныеЗаполнения.ЗаказДата, "ДЛФ=D"));

КонецПроцедуры

Процедура ЗаполнитьПредупрежденияПоМЛ(Параметры, СтрокаМаршрут, ДанныеЗаполнения)
	
	ЗаполнитьНарушенСрокГрафика(Параметры, СтрокаМаршрут, ДанныеЗаполнения);
	ЗаполнитьНарушенСрокЗапуска(Параметры, СтрокаМаршрут, ДанныеЗаполнения);
	ЗаполнитьНарушенСрокОкончанияВыполненияМЛ(Параметры, СтрокаМаршрут, ДанныеЗаполнения);
	ЗаполнитьНарушенСрокНачалаВыполненияОпераций(Параметры, СтрокаМаршрут, ДанныеЗаполнения);
	ЗаполнитьНарушенСрокОкончанияВыполненияОпераций(Параметры, СтрокаМаршрут, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьНарушенСрокГрафика(Параметры, СтрокаМаршрут, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
		И НЕ ДанныеЗаполнения.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		
		Если ДанныеЗаполнения.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			ОкончаниеПоРасписанию = КонецЧаса(ДанныеЗаполнения.ОкончаниеПоРасписанию);
			ФорматнаяСтрока = "ДФ='dd.MM.yyyy ЧЧ:мм'";
		Иначе
			ОкончаниеПоРасписанию = КонецДня(ДанныеЗаполнения.ОкончаниеПоРасписанию);
			ФорматнаяСтрока = "ДЛФ=D";
		КонецЕсли;
		
		Если ДанныеЗаполнения.ОкончаниеПоГрафику < ОкончаниеПоРасписанию Тогда
			
			СтрокаМаршрут.НарушенСрокГрафика = Истина;
			СтрокаМаршрут.Предупреждение = Истина;
			
			Текст = НСтр("ru = 'Нарушен срок выполнения этапа графика производства: окончание по графику %1, окончание по расписанию %2.';
						|en = 'Deadline of production schedule stage execution is delayed: end according to schedule %1, end according to timetable %2.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Текст,
				Формат(ДанныеЗаполнения.ОкончаниеПоГрафику, ФорматнаяСтрока),
				Формат(ОкончаниеПоРасписанию, ФорматнаяСтрока));
			
			ДополнитьТекстПредупрежденияМаршрута(СтрокаМаршрут, Текст);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНарушенСрокОкончанияВыполненияМЛ(Параметры, СтрокаМаршрут, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций
		И НЕ ДанныеЗаполнения.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
		И ДанныеЗаполнения.ОкончаниеПоГрафику < ТекущаяДатаСеанса() Тогда
			
		Если ДанныеЗаполнения.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			ФорматнаяСтрока = "ДФ='dd.MM.yyyy ЧЧ:мм'";
		Иначе
			ФорматнаяСтрока = "ДЛФ=D";
		КонецЕсли;
		
		СтрокаМаршрут.НарушенСрокОкончанияВыполненияМЛ = Истина;
		СтрокаМаршрут.Предупреждение = Истина;
		
		Текст = НСтр("ru = 'Нарушен срок окончания выполнения маршрутного листа: плановая дата окончания %1.';
					|en = 'Route sheet completion date is overdue. The scheduled end date is %1.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Текст,
			Формат(ДанныеЗаполнения.ОкончаниеПоГрафику, ФорматнаяСтрока));
		
		ДополнитьТекстПредупрежденияМаршрута(СтрокаМаршрут, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНарушенСрокЗапуска(Параметры, СтрокаМаршрут, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		
		Если ДанныеЗаполнения.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан
			И ДанныеЗаполнения.НачалоПоРасписанию < Параметры.КрайнийСрокНачалаВыполнения Тогда
		
			СтрокаМаршрут.НарушенСрокЗапуска = Истина;
			СтрокаМаршрут.Предупреждение = Истина;
		
		    Текст = НСтр("ru = 'Нарушен срок начала выполнения маршрутного листа: начало выполнения по расписанию %1.';
						|en = 'Route sheet start date is overdue. The scheduled start date is %1.'");
			ФорматнаяСтрока = "ДФ='dd.MM.yyyy ЧЧ:мм'";
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Текст,
				Формат(ДанныеЗаполнения.НачалоПоРасписанию, ФорматнаяСтрока));
				
			ДополнитьТекстПредупрежденияМаршрута(СтрокаМаршрут, Текст);
				
		КонецЕсли;
			
	ИначеЕсли ДанныеЗаполнения.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		
		Если ДанныеЗаполнения.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан
			И ДанныеЗаполнения.НачалоПоГрафику < Параметры.КрайнийСрокНачалаВыполнения Тогда
			
			СтрокаМаршрут.НарушенСрокЗапуска = Истина;
			СтрокаМаршрут.Предупреждение = Истина;
			
			Текст = НСтр("ru = 'Нарушен срок начала выполнения маршрутного листа: плановая дата начала %1.';
						|en = 'Route sheet start date is overdue. The scheduled start date is %1.'");
			Если ДанныеЗаполнения.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
				ФорматнаяСтрока = "ДФ='dd.MM.yyyy ЧЧ:мм'";
			Иначе
				ФорматнаяСтрока = "ДЛФ=D";
			КонецЕсли;
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Текст,
				Формат(ДанныеЗаполнения.НачалоПоГрафику, ФорматнаяСтрока));
				
			ДополнитьТекстПредупрежденияМаршрута(СтрокаМаршрут, Текст);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНарушенСрокНачалаВыполненияОпераций(Параметры, СтрокаМаршрут, ДанныеЗаполнения)
	
	// Реквизит "НарушенСрокНачалаВыполненияОпераций" заполняется при выборке маршрутных листов.
	Если СтрокаМаршрут.НарушенСрокНачалаВыполненияОпераций Тогда
		
		СтрокаМаршрут.Предупреждение = Истина;
		
		Текст = НСтр("ru = 'Нарушен срок начала выполнения операций расписания.';
					|en = 'Timetable operation start date is overdue.'");
		ДополнитьТекстПредупрежденияМаршрута(СтрокаМаршрут, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНарушенСрокОкончанияВыполненияОпераций(Параметры, СтрокаМаршрут, ДанныеЗаполнения)
	
	// Реквизит "НарушенСрокОкончанияВыполненияОпераций" заполняется при выборке маршрутных листов.
	Если СтрокаМаршрут.НарушенСрокОкончанияВыполненияОпераций Тогда
		
		СтрокаМаршрут.Предупреждение = Истина;
		
		Текст = НСтр("ru = 'Нарушен срок окончания выполнения операций расписания.';
					|en = 'Timetable operation completion time has expired.'");
		ДополнитьТекстПредупрежденияМаршрута(СтрокаМаршрут, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстПредупрежденияМаршрута(СтрокаМаршрут, Текст)
	
	СтрокаМаршрут.ПредупреждениеТекст = 
		?(ЗначениеЗаполнено(СтрокаМаршрут.ПредупреждениеТекст),
		СтрокаМаршрут.ПредупреждениеТекст + Символы.ПС + Текст,
		Текст);
	
КонецПроцедуры

Процедура ЗаполнитьСвойствоМЛНеЗавершеныПредыдущиеЭтапы(Параметры)
	
	СписокМаршрутов = Параметры.СписокМаршрутныхЛистов.ВыгрузитьКолонку("МаршрутныйЛист");
	ВыполнениеСмежныхЭтапов = Документы.МаршрутныйЛистПроизводства.ВыполнениеСмежныхЭтапов(СписокМаршрутов);
	
	Для каждого Строка Из Параметры.СписокМаршрутныхЛистов Цикл
		
		ДатаНачалаМЛПройдена = (КонецДня(Строка.НачалоПоГрафику) + 1) <= Параметры.ДатаКонтроля;
		НеЗавершеныПредыдущиеЭтапы = Ложь;
		
		СтруктураПоиска = Новый Структура("Ссылка,ЭтоПредыдущийЭтап", Строка.МаршрутныйЛист, Истина);
		
		ВыполнениеПредыдущихЭтапов = ВыполнениеСмежныхЭтапов.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЭтап Из ВыполнениеПредыдущихЭтапов Цикл
			Если СтрокаЭтап.Произведено = 0 Тогда
				НеЗавершеныПредыдущиеЭтапы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Строка.НеЗавершеныПредыдущиеЭтапы = НеЗавершеныПредыдущиеЭтапы;
		Если НеЗавершеныПредыдущиеЭтапы Тогда
			Если ДатаНачалаМЛПройдена Тогда
				Строка.НеЗавершеныПредыдущиеЭтапыКартинка = 2;
			Иначе
				Строка.НеЗавершеныПредыдущиеЭтапыКартинка = 1;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвойствоМЛДефицитМатериалов(Параметры)
	
	СписокМаршрутов = Параметры.СписокМаршрутныхЛистов.ВыгрузитьКолонку("МаршрутныйЛист");
	ОстаткиМатериалов = Документы.МаршрутныйЛистПроизводства.ОстаткиМатериаловВПодразделенииПоМаршрутнымЛистам(СписокМаршрутов);
	
	Для каждого Строка Из Параметры.СписокМаршрутныхЛистов Цикл
		
		// - дефицит материалов
		СтруктураПоиска = Новый Структура("Ссылка", Строка.МаршрутныйЛист);
		СписокСтрок = ОстаткиМатериалов.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаМатериалМЛ Из СписокСтрок Цикл
			Если СтрокаМатериалМЛ.ДефицитМатериалов = 2 Тогда
				Строка.ДефицитМатериалов = 2;
				Прервать;
			ИначеЕсли СтрокаМатериалМЛ.ДефицитМатериалов = 1 Тогда
				Строка.ДефицитМатериалов = 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасписаниеПроизводства

Процедура ЗаполнитьРасписаниеПроизводства(Параметры)
	
	Отчеты.ДиаграммаПооперационногоРасписания.ВывестиРасписание(Параметры.ПараметрыВыводаРасписания, Параметры.ДиаграммаГанта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

Функция ДанныеДляФормированияМаршрутныхЛистов(Параметры)
	
	ОтборЭтапов = Новый Структура;
	ОтборЭтапов.Вставить("Подразделение", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Подразделение", Неопределено));
	ОтборЭтапов.Вставить("СписокЭтапов", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СписокЭтапов", Неопределено));
	ОтборЭтапов.Вставить("УправлениеМаршрутнымиЛистами", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "УправлениеМаршрутнымиЛистами", Неопределено));
	ДанныеДляФормирования = ОперативныйУчетПроизводстваВызовСервера.ДанныеДляФормированияМаршрутныхЛистов(ОтборЭтапов);
		
	Возврат ДанныеДляФормирования;
	
КонецФункции

Функция СформироватьМаршрутныеЛистыВнутриЗамераВремени(Параметры, ДанныеДляФормирования)
	
	Перем КлючевыеВидыРабочихЦентров;
	Параметры.Свойство("КлючевыеВидыРабочихЦентров", КлючевыеВидыРабочихЦентров);
	
	ДанныеМаршрутныхЛистов = Новый Массив;
	Для каждого ДанныеЗаполнения Из ДанныеДляФормирования Цикл
		// Будем формировать МЛ по этапу если
		// - Начало этапа меньше выбранной даты.
		Если (НЕ ЗначениеЗаполнено(Параметры.Подразделение) 
				ИЛИ ДанныеЗаполнения.Подразделение = Параметры.Подразделение)
			И (ДанныеЗаполнения.Начало <= Параметры.Окончание) Тогда
			
			ДанныеЗаполнения.Вставить("КлючевыеВидыРабочихЦентров", КлючевыеВидыРабочихЦентров);
			ДанныеМаршрутныхЛистов.Добавить(ДанныеЗаполнения);
			
		КонецЕсли;
	КонецЦикла;
	
	КоличествоВсего = ДанныеМаршрутныхЛистов.Количество();
	КоличествоОбработанных = ОперативныйУчетПроизводстваВызовСервера.СформироватьМаршрутныеЛисты(ДанныеМаршрутныхЛистов);
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоВсего", КоличествоВсего);
	Результат.Вставить("КоличествоОбработанных", КоличествоОбработанных);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21