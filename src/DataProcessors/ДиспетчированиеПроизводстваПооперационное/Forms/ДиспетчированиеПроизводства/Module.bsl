//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам");
	ИспользоватьВыпускПоНесколькимРаспоряжениям = ПолучитьФункциональнуюОпцию("ИспользоватьВыпускПоНесколькимРаспоряжениям");
	
	ПрочитатьПараметрыПриСоздании();
	
	ВосстановитьНастройкиФормыПриСоздании();
	
	ИнициализироватьПараметрыРасписанияПроизводства();
	
	МодифицироватьЭлементыФормыПриСоздании();
	
	ОбновитьДанныеПриСозданииНаСервере();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НачатьОжиданиеФоновойОперацииПриОткрытии Тогда
		
		ПодключитьОбработчикОжидания("НачатьОжиданиеФоновойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ ИсточникОповещенияЭтотОбъект(Источник) Тогда
		
		Если ИмяСобытия = "Запись_МаршрутныйЛистПроизводства"
			ИЛИ ИмяСобытия = "Запись_ПередачаМатериаловВПроизводство" 
			ИЛИ ИмяСобытия = "Запись_ВыпускПродукции" 
			ИЛИ ИмяСобытия = "Запись_ВыработкаСотрудников" 
			ИЛИ ИмяСобытия = "Запись_ЗаказНаПроизводство" 
			ИЛИ ИмяСобытия = "Запись_ВозвратМатериаловИзПроизводства" Тогда
			
			ОбновитьДанные(Истина, Ложь);
			
		ИначеЕсли ИмяСобытия = ОперативныйУчетПроизводстваПриПланированииКлиент.ИмяСобытияИзменениеПооперационногоРасписания() Тогда
			
			ОбновитьДанные(Истина, Истина);
			
		ИначеЕсли ИмяСобытия = ОперативныйУчетПроизводстваКлиент.ИмяСобытияИзменениеСтатусаОпераций()
			И ОтображатьРасписаниеПроизводства
			И ВидДиспетчированияРасписания = 0 Тогда
			
			ОбновитьДанные(Ложь, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЗначениеЗаполнено(СписокЭтапов) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОтборПодразделение");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидДиспетчированияРасписанияПриИзменении(Элемент)
	
	ВидДиспетчированияРасписанияПриИзмененииНаСервере();
	ОбновитьДанные(Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Процедура РежимИндикацииПриИзменении(Элемент)
	
	ОбновитьДанные(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСформироватьМаршрутныеЛистыРазвернутаНажатие(Элемент)
	
	СформироватьМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСформироватьМаршрутныеЛистыСвернутаНажатие(Элемент)
	
	СформироватьМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСформироватьРасписаниеРазвернутаНажатие(Элемент)
	
	СформироватьРасписание();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСформироватьРасписаниеСвернутаНажатие(Элемент)
	
	СформироватьРасписание();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивМаршрутныхЛистовРазвернутаНажатие(Элемент)
	
	ОткрытьАрхивМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивМаршрутныхЛистовСвернутаНажатие(Элемент)
	
	ОткрытьАрхивМаршрутныхЛистов();
	
КонецПроцедуры

#Область Отборы

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	СохранитьПараметрыОтбора();
	ОбновитьДанные(Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		
		Методика = ПодразделениеМетодикаУправленияМЛ(ОтборПодразделение);
		
		Если Методика = УправлениеМаршрутнымиЛистами Тогда
			
			ОтборПодразделениеПриИзмененииНаСервере();
			ОбновитьДанные(Истина, Истина);
			
			ОтборПодразделениеДоИзменения = ОтборПодразделение;
			
		Иначе   	
		
			ОтборПодразделение = ОтборПодразделениеДоИзменения;
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В выбранном подразделении используется методика %1.';
					|en = 'Method %1 is used in the selected business unit.'"),
				Методика);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		
		КонецЕсли;
		
	Иначе
		
		ОбновитьДанные(Истина, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеПриИзмененииНаСервере()
	
	НастроитьФормуПоПодразделению();
	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОформитьВыработкуСотрудниковРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОформитьВыработкуСотрудниковСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОформитьВыпускРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОформитьВыпускСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДефицитМатериаловРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДефицитМатериаловСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеЗавершеныПредыдущиеЭтапыРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеЗавершеныПредыдущиеЭтапыСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПередатьКВыполнениюРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьКВыполнениюДатаПриИзменении(Элемент)
	
	ПередатьКВыполнениюДатаПриИзмененииНаСервере();
	
	ОтборПередатьКВыполнению = Истина;
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПередатьКВыполнениюСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокГрафикаРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокЗапускаРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокГрафикаСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокОкончанияВыполненияМЛРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокОкончанияВыполненияМЛСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокЗапускаСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокНачалаВыполненияОперацийРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокНачалаВыполненияОперацийСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокОкончанияВыполненияОперацийРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНарушенСрокОкончанияВыполненияОперацийСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьВыполненнымРазвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьВыполненнымСвернутаПриИзменении(Элемент)
	
	ПриИзмененииИдикаторовУправления();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокМаршрутныхЛистов

&НаКлиенте
Процедура СписокМаршрутныхЛистовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокМаршрутныхЛистов.ТекущиеДанные;
	
	Если Поле.Имя = "СписокМаршрутныхЛистовПредупреждение" Тогда
		
		Если ТекущиеДанные.Предупреждение Тогда
			ВывестиТекстПредупрежденияПоМаршрутномуЛисту(ВыбраннаяСтрока, ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовТребуетсяОформитьВыработкуСотрудников" Тогда
		
		Если ТекущиеДанные.ТребуетсяОформитьВыработкуСотрудников Тогда
			ОформитьВыработкуСотрудников(ВыбраннаяСтрока);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовТребуетсяОформитьВыпуск" Тогда
		
		Если ТекущиеДанные.ТребуетсяОформитьВыпуск Тогда
			ОформитьВыпуск(ВыбраннаяСтрока);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовНеЗавершеныПредыдущиеЭтапыКартинка" Тогда
		
		ПараметрыФормы = Новый Структура("МаршрутныйЛист", ТекущиеДанные.МаршрутныйЛист);
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.ВыполнениеСмежныхЭтапов", ПараметрыФормы);
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовЗаказСтрока" Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Заказ);
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовДефицитМатериалов" Тогда
		
		Если ТекущиеДанные.ДефицитМатериалов <> 0 Тогда
			ОтгрузитьМатериалы(ВыбраннаяСтрока);
		КонецЕсли;
		
	Иначе
		
		ПоказатьЗначение(, ТекущиеДанные.МаршрутныйЛист);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутныхЛистовПриАктивизацииСтроки(Элемент)
	
	Если ОтображатьРасписаниеПроизводства
		И (РежимИндикации = РежимИндикацииОтборКонст() ИЛИ РежимИндикации = РежимИндикацииПодсветкаКонст()) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьРасписаниеПроизводства", 0.5, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутныхЛистовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутныхЛистовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьВыбранныеМаршрутныеЛисты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасписаниеПроизводства

&НаКлиенте
Процедура РасписаниеПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МаршрутныйЛист = Элементы.РасписаниеПроизводства.ДанныеСтроки(ВыбраннаяСтрока).МаршрутныйЛист;
	ПоказатьЗначение(, МаршрутныйЛист);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДиаграммыФормыДиаграммаГанта

&НаКлиенте
Процедура ДиаграммаГантаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	Если ТипЗнч(Расшифровки) = Тип("Массив")
		И ТипЗнч(Расшифровки[1]) = Тип("Структура")
		И Расшифровки[1].Свойство("ПараллельнаяЗагрузка")
		И Расшифровки[1].ПараллельнаяЗагрузка Тогда
		
		ПараметрыФормы = Расшифровки[1];
		ПараметрыФормы.Вставить("ПериодВыборкиНачало", ОтборПериод.ДатаНачала);
		ПараметрыФормы.Вставить("ПериодВыборкиОкончание", ОтборПериод.ДатаОкончания);
		
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			Подразделения = Новый Массив;
			Подразделения.Добавить(ОтборПодразделение);
			ПараметрыФормы.Вставить("Подразделения", Подразделения);
		КонецЕсли;
		
		ОперативныйУчетПроизводстваКлиент.ОбработкаРасшифровкиИнтервалаСПараллельнойЗагрузкой(
			ЭтотОбъект, ПараметрыФормы, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ОбновитьДанные(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьМаршрутныеЛисты(Команда)
	
	СформироватьМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьРасписание(Команда)
	
	СформироватьРасписание();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСменноСуточныхЗаданий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Начало", ОтборПериод.ДатаНачала);
	ПараметрыФормы.Вставить("Окончание", ОтборПериод.ДатаОкончания);
	ПараметрыФормы.Вставить("Подразделение", ОтборПодразделение);
	
	ОперативныйУчетПроизводстваКлиент.ОткрытьФормуДляПечатиСменноСуточныхЗаданий(ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПанельУправления(Команда)
	
	ПанельУправленияСвернута = НЕ ПанельУправленияСвернута;
	
	СохранитьНастройкиФормы();
	
	УстановитьВидимостьПанелейУправления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПанельУправления(Команда)
	
	ПанельУправленияСвернута = НЕ ПанельУправленияСвернута;
	
	СохранитьНастройкиФормы();
	
	УстановитьВидимостьПанелейУправления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьРасписание(Команда)
	
	ОтображатьРасписаниеПроизводства = НЕ ОтображатьРасписаниеПроизводства;
	
	УстановитьВидимостьРасписанияПроизводтсва();
	
	ОбновитьДанные(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивМаршрутныхЛистов(Команда)
	
	ОткрытьАрхивМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьМаршрутныйЛист(Команда)
	
	РазбитьМаршрутныйЛист();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтгрузитьМатериалы(Команда)
	
	ОтгрузитьМатериалы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьМаршрутныйЛист(Команда)
	
	ТекущиеДанные = Элементы.СписокМаршрутныхЛистов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.МаршрутныйЛист);
	Иначе
		ПоказатьПредупреждениеНеВыбранМаршрутныйЛист();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПометитьНаУдалениеМаршрутныеЛисты(Команда)
	
	УдалитьВыбранныеМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодДень(Команда)
	
	УстановитьПериодДеньНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодНеделя(Команда)
	
	УстановитьПериодНеделяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодМесяц(Команда)
	
	УстановитьПериодМесяцНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#Область ОформлениеДокументов

&НаКлиенте
Процедура КомандаОформитьВыработкуСотрудников(Команда)
	
	ОформитьВыработкуСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформитьВыпуск(Команда)
	
	ОформитьВыпуск();
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатусаМЛ

&НаКлиенте
Процедура КомандаПередатьКВыполнению(Команда)
	
	ИзменитьСтатусВыбранныхМаршрутныхЛистов("КВыполнению", НСтр("ru = 'К выполнению';
																|en = 'Ready for fulfillment'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьВыполненным(Команда)
	
	ИзменитьСтатусВыбранныхМаршрутныхЛистов("Выполнен", НСтр("ru = 'Выполнен';
															|en = 'Completed'"));
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатусаОпераций

&НаКлиенте
Процедура ВыполнениеНачато(Команда)
	
	ИзменитьСтатусОпераций(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.Начато"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеНеНачато(Команда)
	
	ИзменитьСтатусОпераций(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.НеНачато"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеЗавершено(Команда)
	
	ИзменитьСтатусОпераций(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.Завершено"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОформлениеДокументов

&НаКлиенте
Процедура ОформитьВыработкуСотрудников(ВыбраннаяСтрока = Неопределено)
	
	МассивСсылок = ВыбранныеМаршрутныеЛисты(ВыбраннаяСтрока);
	Если НЕ МассивСсылок.Количество()=0 Тогда
		Если ПравоВводаВыработкиСотрудников Тогда
			ОперативныйУчетПроизводстваКлиент.ОформитьВыработкуСотрудниковПоРаспоряжениям(МассивСсылок);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждениеНеВыбранМаршрутныйЛист();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВыпуск(ВыбраннаяСтрока = Неопределено)
	
	МассивСсылок = ВыбранныеМаршрутныеЛисты(ВыбраннаяСтрока);
	Если НЕ МассивСсылок.Количество() = 0 Тогда
		Если ПравоВводаВыпускПродукции Тогда
			
			Если МассивСсылок.Количество() > 1 И НЕ ИспользоватьВыпускПоНесколькимРаспоряжениям Тогда
				ТекстПредупреждения = НСтр("ru = 'Оформление одного документа на основании нескольких маршрутных листов отключено.
				|Необходимо выбрать один маршрутный лист.';
				|en = 'Registration of a single document based on multiple route sheets is disabled.
				|Please select one route sheet.'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
			
			ТекстПредупреждения = Неопределено;
			ПараметрыОформления = ПараметрыОформленияВыпуска(МассивСсылок, ОтборПодразделение, ТекстПредупреждения);
			Если ПараметрыОформления = Неопределено Тогда
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
			
			ДанныеРаспоряжений = Новый Массив;
			Для каждого ИдентификаторСтроки Из Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки Цикл
				ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				СтруктураРаспоряжения = Новый Структура("Распоряжение", ДанныеСтроки.МаршрутныйЛист);
				ДанныеРаспоряжений.Добавить(СтруктураРаспоряжения);
			КонецЦикла;
			
			// Откроем форму
			ПараметрыОснования = Новый Структура;
			ПараметрыОснования.Вставить("РеквизитыШапки",     ПараметрыОформления);
			ПараметрыОснования.Вставить("ДанныеРаспоряжений", ДанныеРаспоряжений);
			
			ОткрытьФорму("Документ.ВыпускПродукции.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждениеНеВыбранМаршрутныйЛист();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеМаршрутныеЛисты(ВыбраннаяСтрока = Неопределено)

	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	МассивСсылок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если НЕ ДанныеСтроки = Неопределено Тогда
			МассивСсылок.Добавить(ДанныеСтроки.МаршрутныйЛист);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОформленияВыпуска(Знач МассивСсылок, Знач Подразделение, ТекстПредупреждения)
	
	Возврат Документы.ВыпускПродукции.ПараметрыОформленияВыпуска(МассивСсылок, Подразделение, ТекстПредупреждения);
	
КонецФункции

&НаКлиенте
Процедура ОтгрузитьМатериалы(ВыбраннаяСтрока = Неопределено)

	Если НЕ ПравоКорректировкиЗаказаМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	Если НЕ ВыделенныеСтроки.Количество() = 0 Тогда
		
		МассивСсылок = Новый Массив;
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если НЕ ДанныеСтроки = Неопределено И НЕ ДанныеСтроки.ДефицитМатериалов = 0 Тогда
				МассивСсылок.Добавить(ДанныеСтроки.МаршрутныйЛист);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивСсылок) Тогда
			ПараметрыФормы = Новый Структура("СписокМаршрутныхЛистов", МассивСсылок);
			ПараметрыФормы.Вставить("ЗаполнятьПоСпискуМаршрутныхЛистов", Истина);
			ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма", ПараметрыФормы);
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждениеНеВыбранМаршрутныйЛист();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатусаМЛ

&НаКлиенте
Процедура ИзменитьСтатусВыбранныхМаршрутныхЛистов(ЗначениеСтатуса, ПредставлениеСтатуса)
	
	ВыделенныеСтроки = СписокМаршрутныхЛистовВыделенныеСтроки();
	
	Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства." + ЗначениеСтатуса);
		
		МассивСсылок = Новый Массив;
		Для каждого Строка Из ВыделенныеСтроки Цикл
			Если НЕ Строка.Статус = Статус Тогда
				МассивСсылок.Добавить(Строка.МаршрутныйЛист);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивСсылок) Тогда
			ПоказатьВопросИзменитьСтатусМЛ(ЗначениеСтатуса, ПредставлениеСтатуса, МассивСсылок);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не требуется изменять статус выбранных маршрутных листов.';
										|en = 'It is not required to change statuses of the selected route sheets.'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждениеНеВыбранМаршрутныйЛист();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросИзменитьСтатусМЛ(ЗначениеСтатуса, ПредставлениеСтатуса, МассивСсылок = Неопределено)
	
	Если МассивСсылок = Неопределено Тогда
		МассивСсылок = ВыбранныеМаршрутныеЛисты();
	КонецЕсли;
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      ЗначениеСтатуса);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("МассивСсылок",     	 МассивСсылок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИзменитьСтатусМЛЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'У выбранных документов будет установлен статус ""%1"". Продолжить?';
						|en = 'The ""%1"" status will be set for the selected documents. Continue?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
														|en = 'Continue'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);

КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменитьСтатусМЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьСообщения();
		Если ДополнительныеПараметры.ЗначениеСтатуса = "КВыполнению" Тогда
			КоличествоОбработанных = УстановитьСтатусМЛКВыполнению(
				ДополнительныеПараметры.МассивСсылок, ДополнительныеПараметры.ЗначениеСтатуса);
		ИначеЕсли ДополнительныеПараметры.ЗначениеСтатуса = "Выполнен" Тогда
			КоличествоОбработанных = УстановитьСтатусМЛВыполнен(ДополнительныеПараметры.МассивСсылок);
		КонецЕсли;
		
		Если КоличествоОбработанных <> 0 Тогда
			ОбновитьДанные(Истина, Истина);
			ОповеститьОбИзмененииСтатусаОпераций();
		КонецЕсли;
		
		ОповеститьПользователяОбУстановкеСтатуса(
			КоличествоОбработанных, 
			ДополнительныеПараметры.МассивСсылок.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьСтатусМЛКВыполнению(Знач МассивСсылок, Знач ЗначениеСтатуса)
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
		МассивСсылок, ЗначениеСтатуса);
	
	Возврат КоличествоОбработанных;
	
КонецФункции

&НаСервере
Функция УстановитьСтатусМЛВыполнен(Знач МассивСсылок)
	
	СрокиВыполнения = СрокиВыполненияМаршрутныхЛистов(МассивСсылок);
	
	КоличествоОбработанных = 0;
	Для каждого Ссылка Из МассивСсылок Цикл
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		СтатусДоИзменения = ДокументОбъект.Статус;
		ДокументОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен;
		ДокументОбъект.ПриИзмененииСтатуса(СтатусДоИзменения);
		
		НайденнаяСтрока = СрокиВыполнения.Найти(Ссылка, "МаршрутныйЛист");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ДокументОбъект.ФактическоеНачалоВыполненияОпераций = НайденнаяСтрока.Начало;
			ДокументОбъект.ДатаВыполненияОпераций = НайденнаяСтрока.Окончание;
		КонецЕсли;
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КоличествоОбработанных = КоличествоОбработанных + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

&НаСервере
Функция СрокиВыполненияМаршрутныхЛистов(МассивСсылок)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПооперационноеРасписание.МаршрутныйЛист,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	МАКСИМУМ(ПооперационноеРасписание.Окончание) КАК Окончание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|	И ПооперационноеРасписание.МаршрутныйЛист В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.МаршрутныйЛист");
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, КоличествоВсего, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""';
								|en = 'Status ""%Статус%"" is set for %КоличествоОбработанных% out of %КоличествоВсего% documents selected in the list'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru = 'Статус ""%Статус%"" установлен';
								|en = 'Status ""%Статус%"" is set'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
		ОперативныйУчетПроизводстваКлиент.ОповеститьОЗаписиМаршрутныхЛистов(ЭтотОбъект);

	Иначе
		
		ТекстСообщения = НСтр("ru = 'Статус ""%Статус%"" не установлен ни для одного документа.';
								|en = 'Status ""%Статус%"" is not set for any document.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru = 'Статус ""%Статус%"" не установлен';
								|en = 'Status ""%Статус%"" is not set'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатусаОпераций

&НаКлиенте
Процедура ИзменитьСтатусОпераций(НовыйСтатус)
	
	Если ЗначениеЗаполнено(Элементы.РасписаниеПроизводства.ВыделенныеСтроки) Тогда
		
		Если ТребуетсяВыбратьОперацииССинхроннойЗагрузкой() Тогда
			
			ДополнительныеПараметры = Новый Структура("НовыйСтатус", НовыйСтатус);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВыборОперацийССинхроннойЗагрузкойЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ТекущаяСтрока = Элементы.РасписаниеПроизводства.ДанныеСтроки(Элементы.РасписаниеПроизводства.ВыделенныеСтроки[0]);
			    	
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Начало", ТекущаяСтрока.Начало);
			ПараметрыФормы.Вставить("Окончание", ТекущаяСтрока.Окончание);
			ПараметрыФормы.Вставить("РабочийЦентр", ТекущаяСтрока.РабочийЦентр);
			ПараметрыФормы.Вставить("НовыйСтатус", НовыйСтатус);
			
			ОткрытьФорму("Обработка.ВыполнениеОпераций.Форма.ВыборОперацийССинхроннойЗагрузкой",
				ПараметрыФормы,
				ЭтотОбъект,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			Операции = ВыделенныеОперации();
			ИзменитьСтатусОперацийНаСервере(НовыйСтатус, Операции);
			ОбновитьДанные(Ложь, Истина);
			ОповеститьОбИзмененииСтатусаОпераций();
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо выбрать операцию.';
									|en = 'Select a transaction.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОперацийССинхроннойЗагрузкойЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		ИзменитьСтатусОперацийНаСервере(ДополнительныеПараметры.НовыйСтатус, РезультатЗакрытия);
		ОбновитьДанные(Ложь, Истина);
		ОповеститьОбИзмененииСтатусаОпераций();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеОперации()
	
	Результат = Новый Массив;
	
	Для каждого Строка Из Элементы.РасписаниеПроизводства.ВыделенныеСтроки Цикл
		
		Результат.Добавить(Элементы.РасписаниеПроизводства.ДанныеСтроки(Строка).ИдентификаторОперации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяВыбратьОперацииССинхроннойЗагрузкой()
	
	ВыделенныеСтроки = Элементы.РасписаниеПроизводства.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		
		ТекущаяСтрока = Элементы.РасписаниеПроизводства.ДанныеСтроки(ВыделенныеСтроки[0]);
		Если ТекущаяСтрока.СинхроннаяЗагрузка Тогда
			Результат = МножественнаяЗагрузкаИнтервала(ТекущаяСтрока);
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция МножественнаяЗагрузкаИнтервала(ТекущаяСтрока)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперацииДляДиспетчирования.ИдентификаторОперации
	|ИЗ
	|	РегистрСведений.ОперацииДляДиспетчирования КАК ОперацииДляДиспетчирования
	|ГДЕ
	|	ОперацииДляДиспетчирования.Начало = &Начало
	|	И ОперацииДляДиспетчирования.Окончание = &Окончание
	|	И ОперацииДляДиспетчирования.РабочийЦентр = &РабочийЦентр
	|	И НЕ ОперацииДляДиспетчирования.ИдентификаторОперации = &ИдентификаторОперации");
	
	Запрос.УстановитьПараметр("Начало", ТекущаяСтрока.Начало);
	Запрос.УстановитьПараметр("Окончание", ТекущаяСтрока.Окончание);
	Запрос.УстановитьПараметр("РабочийЦентр", ТекущаяСтрока.РабочийЦентр);
	Запрос.УстановитьПараметр("ИдентификаторОперации", ТекущаяСтрока.ИдентификаторОперации);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьСтатусОперацийНаСервере(НовыйСтатус, Операции)
	
	РегистрыСведений.ПооперационноеРасписание.ИзменитьСтатусОпераций(Операции, НовыйСтатус);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииСтатусаОпераций()
	
	Оповестить(ОперативныйУчетПроизводстваКлиент.ИмяСобытияИзменениеСтатусаОпераций(),, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияДанных

&НаСервере
Процедура ИнициализироватьПараметрыРасписанияПроизводства()
	
	УстановитьПараметрыЗапросаРасписанияПроизводства();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросаРасписанияПроизводства();
	
	РасписаниеПроизводства.Параметры.УстановитьЗначениеПараметра("ДатаКонтроля", ТекущаяДатаСеанса());
	РасписаниеПроизводства.Параметры.УстановитьЗначениеПараметра("КрайнийСрокНачалаВыполнения",
		КрайнийСрокНачалаВыполнения(ОтборПодразделение, ТекущаяДатаСеанса()));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьДанныеПриСозданииНаСервере()
	
	Если ЗначениеЗаполнено(ОтборПодразделение)
		ИЛИ ЗначениеЗаполнено(СписокЭтапов) Тогда
		
		ДатаКонтроля = ТекущаяДатаСеанса();
		КрайнийСрокНачалаВыполнения = КрайнийСрокНачалаВыполнения(ОтборПодразделение, ДатаКонтроля);
		
		Результат = ОбновитьМаршрутныеЛистыВФоновомРежиме(Истина);
		ЗаполнитьРеквизитыФоновойОперации(ЭтотОбъект, Результат);
		
		Если Результат.ЗаданиеВыполнено Тогда
			
			НачатьОжиданиеФоновойОперацииПриОткрытии = Ложь;
			ОбработатьОбновлениеМаршрутныхЛистовНаСервере();
			
			Если ОтображатьРасписаниеПроизводства Тогда
				
				РасписаниеСписком = ВыводитьРасписаниеСписком(ВидДиспетчированияРасписания);
				
				Если РасписаниеСписком Тогда
					ОбновитьРасписаниеПроизводстваСписок();
				Иначе
					Результат = ОбновитьРасписаниеВФоновомРежиме();
					ЗаполнитьРеквизитыФоновойОперации(ЭтотОбъект, Результат);
					
					Если Результат.ЗаданиеВыполнено Тогда
						НачатьОжиданиеФоновойОперацииПриОткрытии = Ложь;
						ОбработатьОбновлениеРасписанияНаСервере();
					Иначе
						НачатьОжиданиеФоновойОперацииПриОткрытии = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			НачатьОжиданиеФоновойОперацииПриОткрытии = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обеспечивает обновление данных в списке маршрутных листов и расписания производства.
//
// Параметры:
//	ОбновитьМЛ - Булево - признак необходимости обновления данных по маршрутным листам.
//	ОбновитьРасписание - Булево - признак необходимости обнвления данных по расписанию производства.
//
&НаКлиенте
Процедура ОбновитьДанные(ОбновитьМЛ, ОбновитьРасписание)
	
	ДатаКонтроля = ОбщегоНазначенияКлиент.ДатаСеанса();
	КрайнийСрокНачалаВыполнения = КрайнийСрокНачалаВыполнения(ОтборПодразделение, ДатаКонтроля);
	
	Если ОбновитьМЛ Тогда
		
		Если ПроверитьЗаполнение() Тогда
			
			Результат = ОбновитьМаршрутныеЛистыВФоновомРежиме(ОбновитьРасписание);
			ЗаполнитьРеквизитыФоновойОперации(ЭтотОбъект, Результат);
			
			Если Результат.ЗаданиеВыполнено Тогда
				ЗавершеноЗаданиеОбновлениеМаршрутныхЛистов();
			Иначе
				НачатьОжиданиеФоновойОперации();
			КонецЕсли;
			
		Иначе
			
			СписокМаршрутныхЛистов.Очистить();
			
			Если ОбновитьРасписание Тогда
				ОбновитьРасписание();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбновитьРасписание Тогда
		
		ОбновитьРасписание();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьМаршрутныеЛистыВФоновомРежиме(ОбновитьРасписание)
	
	ТекущаяФоноваяОперация = "ОбновлениеМаршрутныхЛистов";
	
	ПараметрыЗадания = ПараметрыЗаданияОбновлениеМаршрутныхЛистов(ОбновитьРасписание);
	НаименованиеЗадания = НСтр("ru = 'Обновление данных диспетчирования';
								|en = 'Update dispatching data '");
	
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"Обработки.ДиспетчированиеПроизводстваПооперационное.ОбновитьМаршрутныеЛисты",
						ПараметрыЗадания,
						НаименованиеЗадания);
			
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРасписание()
	
	Если ОтображатьРасписаниеПроизводства Тогда
		
		РасписаниеСписком = ВыводитьРасписаниеСписком(ВидДиспетчированияРасписания);
		
		Если РасписаниеСписком Тогда
			
			ОбновитьРасписаниеПроизводстваСписок();
			
		Иначе
			
			Результат = ОбновитьРасписаниеВФоновомРежиме();
			ЗаполнитьРеквизитыФоновойОперации(ЭтотОбъект, Результат);
			
			Если Результат.ЗаданиеВыполнено Тогда
				ЗавершеноЗаданиеОбновлениеРасписания();
			Иначе
				НачатьОжиданиеФоновойОперации();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьРасписаниеВФоновомРежиме()
	
	ТекущаяФоноваяОперация = "ОбновлениеРасписания";
	
	ПараметрыЗадания = ПараметрыЗаданияОбновлениеРасписания();
	НаименованиеЗадания = НСтр("ru = 'Обновление расписания';
								|en = 'Update schedule'");
	
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"Обработки.ДиспетчированиеПроизводстваПооперационное.ОбновитьРасписание",
						ПараметрыЗадания,
						НаименованиеЗадания);
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаСервере
Функция ПараметрыЗаданияОбновлениеМаршрутныхЛистов(ОбновитьРасписание)
	
	Результат = Новый Структура;
	
	Результат.Вставить("СписокМаршрутныхЛистов", СписокМаршрутныхЛистов.Выгрузить().СкопироватьКолонки());
	Результат.Вставить("ОбновитьРасписание", ОбновитьРасписание);
	Результат.Вставить("Начало", ОтборПериод.ДатаНачала);
	Результат.Вставить("Окончание", ОтборПериод.ДатаОкончания);
	Результат.Вставить("Подразделение", ОтборПодразделение);
	Результат.Вставить("ТекущийМаршрутныйЛист", МаршрутныйЛистПоАктивнойСтроке());
	Результат.Вставить("ДатаКонтроля", ДатаКонтроля);
	Результат.Вставить("КрайнийСрокНачалаВыполнения", КрайнийСрокНачалаВыполнения);
	Результат.Вставить("СписокЭтапов", СписокЭтапов.Выгрузить());
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗаданияОбновлениеРасписания()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДиаграммаГанта", ДиаграммаГанта);
	Результат.Вставить("ПараметрыВыводаРасписания", ПараметрыВыводаРасписания());
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершеноЗаданиеОбновлениеМаршрутныхЛистов()
	
	ОбновитьРасписание = Ложь;
	
	ОбработатьОбновлениеМаршрутныхЛистовНаСервере(ОбновитьРасписание);
	
	Если ОбновитьРасписание Тогда
		ОбновитьРасписание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершеноЗаданиеОбновлениеРасписания()
	
	ОбработатьОбновлениеРасписанияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОбновлениеМаршрутныхЛистовНаСервере(ОбновитьРасписание=Неопределено)
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		
		Результаты = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		СписокМаршрутныхЛистов.Загрузить(Результаты.СписокМаршрутныхЛистов);
		
		УстановитьМаршрутнымЛистамТекущуюСтроку(Результаты.ТекущийМаршрутныйЛист);
		УстановитьМаршрутнымЛистамВидимостьПоИндикаторамУправления();
			
		ОбновитьПанельУправления();
		
		ОбновитьРасписание = Результаты.ОбновитьРасписание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОбновлениеРасписанияНаСервере()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		
		Результаты = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		ДиаграммаГанта = Результаты.ДиаграммаГанта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРасписанияПроизводтсва()
	
	Элементы.ГруппаРасписаниеПроизводства.Видимость = ОтображатьРасписаниеПроизводства;
	Элементы.ФормаПоказатьСкрытьРасписание.Пометка = ОтображатьРасписаниеПроизводства;
	
	Элементы.РежимИндикации.Видимость = ОтображатьРасписаниеПроизводства;
	
	Если ОтображатьРасписаниеПроизводства Тогда
		
		ИнициализироватьРежимыИндикации();
		УстановитьВидимостьСтраницРасписанияПроизводства();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницРасписанияПроизводства()
	
	ВидимыйЭлемент = ?(ВыводитьРасписаниеСписком(ВидДиспетчированияРасписания), "Список", "График");
	
	Элементы.СтраницыКомандыДиспетчирования.ТекущаяСтраница = Элементы["СтраницаКомандыДиспетчирования" + ВидимыйЭлемент];
	Элементы.СтраницыРасписаниеПроизводства.ТекущаяСтраница = Элементы["СтраницаРасписаниеПроизводства" + ВидимыйЭлемент];
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасписаниеПроизводстваСписок()
	
	РасписаниеПроизводстваСписокУстановитьУсловноеОформление();
	РасписаниеПроизводстваСписокУстановитьОтборы();
	
	РасписаниеПроизводства.Параметры.УстановитьЗначениеПараметра("ДатаКонтроля", ДатаКонтроля);
	РасписаниеПроизводства.Параметры.УстановитьЗначениеПараметра("КрайнийСрокНачалаВыполнения", КрайнийСрокНачалаВыполнения);
	
	Элементы.РасписаниеПроизводства.Обновить();
	
КонецПроцедуры

// Устанавливает/снимает отборы динамического списка с операциями, в зависимости
// от значений соответствующих полей ввода.
//
&НаСервере
Процедура РасписаниеПроизводстваСписокУстановитьОтборы()
	
	// Отбор по подразделению.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		РасписаниеПроизводства, 
		"Подразделение", 
		ОтборПодразделение, 
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(ОтборПодразделение));
		
	// Отбор по маршрутным листам, отмеченным пользователем.
	МаршрутныеЛистыОтбор = МаршрутныеЛистыВывестиРасписание();
	Если НЕ ЗначениеЗаполнено(МаршрутныеЛистыОтбор) Тогда
		МаршрутныеЛистыОтбор.Добавить(Документы.МаршрутныйЛистПроизводства.ПустаяСсылка());
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		РасписаниеПроизводства, 
		"МаршрутныйЛист",
		МаршрутныеЛистыОтбор,
		ВидСравненияКомпоновкиДанных.ВСписке,
		, // Представление - автоматически
		ЗначениеЗаполнено(МаршрутныеЛистыОтбор));
	
	// Отбор по периоду.
	Границы = МаршрутныеЛистыГраницыРасписания(МаршрутныеЛистыОтбор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		РасписаниеПроизводства, 
		"Начало",
		Границы.Начало,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		, // Представление - автоматически
		ЗначениеЗаполнено(Границы.Начало));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		РасписаниеПроизводства, 
		"Окончание", 
		Границы.Окончание, 
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		, // Представление - автоматически
		ЗначениеЗаполнено(Границы.Окончание));
	
КонецПроцедуры

&НаСервере
Функция МаршрутныеЛистыВывестиРасписание()
	
	Результат = Новый СписокЗначений;
	
	Если РежимИндикации = РежимИндикацииОтборКонст() Тогда
		
		Результат = ВыделенныеМаршрутныеЛисты();
		
	Иначе
		
		УсловиеПоиска = Новый Структура("ПоказатьВСписке", Истина);
		СтрокиОтбор = СписокМаршрутныхЛистов.НайтиСтроки(УсловиеПоиска);
		
		Для каждого Строка Из СтрокиОтбор Цикл
			Результат.Добавить(Строка.МаршрутныйЛист);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МаршрутныеЛистыСУстановленнойПодсветкой()
	
	Если РежимИндикации = РежимИндикацииПодсветкаКонст() Тогда
		Результат = ВыделенныеМаршрутныеЛисты();
	Иначе
		Результат = Новый СписокЗначений;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыделенныеМаршрутныеЛисты()
	
	Результат = Новый СписокЗначений;
	
	Для каждого Идентификатор Из Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(Идентификатор);
		Если НЕ ДанныеСтроки = Неопределено Тогда
			Результат.Добавить(ДанныеСтроки.МаршрутныйЛист);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МаршрутныйЛистПоАктивнойСтроке()
	
	ТекущийМаршрутныйЛист = Неопределено;
	ТекущаяСтрока = Элементы.СписокМаршрутныхЛистов.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ДанныеСтроки <> Неопределено Тогда
			ТекущийМаршрутныйЛист = ДанныеСтроки.МаршрутныйЛист;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийМаршрутныйЛист;
	
КонецФункции

&НаСервере
Процедура УстановитьМаршрутнымЛистамТекущуюСтроку(ТекущийМаршрутныйЛист)
	
	Если ТекущийМаршрутныйЛист <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("МаршрутныйЛист", ТекущийМаршрутныйЛист);
  		СписокСтрок = СписокМаршрутныхЛистов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
			Элементы.СписокМаршрутныхЛистов.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМаршрутнымЛистамВидимостьПоИндикаторамУправления()
	
	ОтборПоИндикаторам = ОтборПоИндикаторамИспользуется();
	
	Если НЕ ОтборПоИндикаторам Тогда
		
		Для каждого Строка Из СписокМаршрутныхЛистов Цикл
			Строка.ПоказатьВСписке = Истина;
		КонецЦикла;
		
	Иначе
		
		Для каждого Строка Из СписокМаршрутныхЛистов Цикл
			Строка.ПоказатьВСписке = МаршрутныйЛистСоответствуетОтборуПоИндикаторам(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтборПоИндикаторамИспользуется()
	
	Результат = ОтборПередатьКВыполнению
		ИЛИ ОтборОтметитьВыполненным
		ИЛИ ОтборОформитьВыработкуСотрудников
		ИЛИ ОтборОформитьВыпуск
		ИЛИ ОтборДефицитМатериалов
		ИЛИ ОтборНеЗавершеныПредыдущиеЭтапы
		ИЛИ ОтборНарушенСрокГрафика
		ИЛИ ОтборНарушенСрокОкончанияВыполненияМЛ
		ИЛИ ОтборНарушенСрокЗапуска
		ИЛИ ОтборНарушенСрокНачалаВыполненияОпераций
		ИЛИ ОтборНарушенСрокОкончанияВыполненияОпераций;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МаршрутныйЛистСоответствуетОтборуПоИндикаторам(ДанныеМаршрутногоЛиста)
	
	Передача = ОтборПередатьКВыполнению И ТребуетсяПередатьКВыполнению(ДанныеМаршрутногоЛиста);
	ОтметитьВыполненным = ОтборОтметитьВыполненным И ТребуетсяОтметитьВыполненным(ДанныеМаршрутногоЛиста);
	Выработка = ОтборОформитьВыработкуСотрудников И ТребуетсяОформитьВыработку(ДанныеМаршрутногоЛиста);
	Выпуск = ОтборОформитьВыпуск И ТребуетсяОформитьВыпуск(ДанныеМаршрутногоЛиста);
	ДефицитМатериалов = ОтборДефицитМатериалов И ДефицитМатериалов(ДанныеМаршрутногоЛиста);
	НеЗавершеныЭтапы = ОтборНеЗавершеныПредыдущиеЭтапы И НеЗавершеныПредыдущиеЭтапы(ДанныеМаршрутногоЛиста);
	
	НарушенГрафик = ОтборНарушенСрокГрафика И НарушенСрокГрафика(ДанныеМаршрутногоЛиста);
	НарушеноОкончаниеМЛ = ОтборНарушенСрокОкончанияВыполненияМЛ
		И НарушенСрокОкончанияВыполненияМЛ(ДанныеМаршрутногоЛиста);
	НарушенЗапуск = ОтборНарушенСрокЗапуска И НарушенСрокЗапуска(ДанныеМаршрутногоЛиста);
	НарушеноНачалоОперации = ОтборНарушенСрокНачалаВыполненияОпераций
		И НарушенСрокНачалаВыполненияОпераций(ДанныеМаршрутногоЛиста);
	НарушеноОкончаниеОперации = ОтборНарушенСрокОкончанияВыполненияОпераций
		И НарушенСрокОкончанияВыполненияОпераций(ДанныеМаршрутногоЛиста);
	
	Результат = Передача ИЛИ ОтметитьВыполненным ИЛИ Выработка ИЛИ Выпуск ИЛИ ДефицитМатериалов
		ИЛИ НеЗавершеныЭтапы ИЛИ НарушенГрафик ИЛИ НарушеноОкончаниеМЛ ИЛИ НарушенЗапуск
		ИЛИ НарушеноНачалоОперации ИЛИ НарушеноОкончаниеОперации;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТребуетсяПередатьКВыполнению(ДанныеМаршрутногоЛиста)
	
	Результат = (ДанныеМаршрутногоЛиста.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан)
		И (НачалоДня(ДанныеМаршрутногоЛиста.НачалоПоРасписанию) = ДатаПередатьКВыполнению);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТребуетсяОтметитьВыполненным(ДанныеМаршрутногоЛиста)
	
	Возврат ДанныеМаршрутногоЛиста.ТребуетсяОтметитьВыполненным;
	
КонецФункции

&НаСервере
Функция ТребуетсяОформитьВыработку(ДанныеМаршрутногоЛиста)
	
	Возврат ДанныеМаршрутногоЛиста.ТребуетсяОформитьВыработкуСотрудников;
	
КонецФункции

&НаСервере
Функция ТребуетсяОформитьВыпуск(ДанныеМаршрутногоЛиста)
	
	Возврат ДанныеМаршрутногоЛиста.ТребуетсяОформитьВыпуск;
	
КонецФункции

&НаСервере
Функция ДефицитМатериалов(ДанныеМаршрутногоЛиста)
	
	Возврат НЕ ДанныеМаршрутногоЛиста.ДефицитМатериалов = 0;
	
КонецФункции

&НаСервере
Функция НеЗавершеныПредыдущиеЭтапы(ДанныеМаршрутногоЛиста)
	
	Возврат ДанныеМаршрутногоЛиста.НеЗавершеныПредыдущиеЭтапы;
	
КонецФункции

&НаСервере
Функция НарушенСрокГрафика(ДанныеМаршрутногоЛиста)
	
	Возврат ДанныеМаршрутногоЛиста.НарушенСрокГрафика;
	
КонецФункции

&НаСервере
Функция НарушенСрокОкончанияВыполненияМЛ(ДанныеМаршрутногоЛиста)

	Возврат ДанныеМаршрутногоЛиста.НарушенСрокОкончанияВыполненияМЛ;
	
КонецФункции

&НаСервере
Функция НарушенСрокЗапуска(ДанныеМаршрутногоЛиста)
	
	Возврат ДанныеМаршрутногоЛиста.НарушенСрокЗапуска;
	
КонецФункции

&НаСервере
Функция НарушенСрокНачалаВыполненияОпераций(ДанныеМаршрутногоЛиста)
	
	Возврат ДанныеМаршрутногоЛиста.НарушенСрокНачалаВыполненияОпераций;
	
КонецФункции

&НаСервере
Функция НарушенСрокОкончанияВыполненияОпераций(ДанныеМаршрутногоЛиста)
	
	Возврат ДанныеМаршрутногоЛиста.НарушенСрокОкончанияВыполненияОпераций;
	
КонецФункции

#КонецОбласти

#Область ПанельУправления

&НаСервере
Процедура ОбновитьПанельУправления()
	
	ОбновитьНеобходимостьСформироватьМЛ();
	ОбновитьНеобходимостьСформироватьРасписание();
	
	ОбновитьНеобходимостьПередатьКВыполнению();
	ОбновитьНеобходимостьОтметитьВыполненным();
	ОбновитьНеобходимостьОформитьВыработку();
	ОбновитьНеобходимостьОформитьВыпуск();
	
	ОбновитьНаличиеДефицитаМатериалов();
	ОбновитьНаличиеНеЗавершенныхЭтапов();
	
	ОбновитьПредупреждениеНарушенСрокГрафика();
	ОбновитьПредупреждениеНарушенСрокОкончанияВыполненияМЛ();
	ОбновитьПредупреждениеНарушенСрокЗапуска();
	
	ОбновитьПредупреждениеНарушенСрокНачалаВыполненияОпераций();
	ОбновитьПредупреждениеНарушенСрокОкончанияВыполненияОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНеобходимостьСформироватьМЛ()

	КоличествоМЛ = ОперативныйУчетПроизводства.ТребуетсяСформироватьМаршрутныеЛисты(
							ОтборПодразделение,,
							СписокЭтапов.Выгрузить(), 
							УправлениеМаршрутнымиЛистами);
								
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.СформироватьМаршрутныеЛистыРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сформировать маршрутные листы (%1)';
			|en = 'Generate route sheets (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.СформироватьМаршрутныеЛистыСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
	Если КоличествоМЛ = 1 Тогда
		ПодсказкаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Требуется сформировать один маршрутный лист';
										|en = 'It is required to generate one route sheet'"),
									КоличествоМЛСтрокой);
	ИначеЕсли КоличествоМЛ > 1 Тогда
		ПодсказкаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Требуется сформировать %1 маршрутных листов';
										|en = 'It is required to generate %1 route sheets'"),
									КоличествоМЛСтрокой);
	Иначе
		ПодсказкаКоманды = НСтр("ru = 'Формировать маршрутные листы не требуется';
								|en = 'Generation of route sheets is not required'");
	КонецЕсли; 
	
	Элементы.СформироватьМаршрутныеЛистыРазвернута.РасширеннаяПодсказка.Заголовок = ПодсказкаКоманды;
	Элементы.СформироватьМаршрутныеЛистыСвернута.РасширеннаяПодсказка.Заголовок = ПодсказкаКоманды;
	
	Элементы.СформироватьМаршрутныеЛистыРазвернута.Доступность = (КоличествоМЛ <> 0);
	Элементы.СформироватьМаршрутныеЛистыСвернута.Доступность = (КоличествоМЛ <> 0);
	
	Элементы.КартинкаСформироватьМаршрутныеЛистыРазвернута.Доступность = (КоличествоМЛ <> 0);
	Элементы.КартинкаСформироватьМаршрутныеЛистыСвернута.Доступность = (КоличествоМЛ <> 0);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНеобходимостьСформироватьРасписание()
	
	КоличествоМЛ = КоличествоМЛТребуетсяСформироватьРасписание();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.СформироватьРасписаниеРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сформировать расписание (%1)';
			|en = 'Generate timetable (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.СформироватьРасписаниеСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛТребуетсяСформироватьРасписание()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если Строка.ТребуетсяСформироватьРасписание Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьНеобходимостьПередатьКВыполнению()
	
	КоличествоМЛ = КоличествоМЛТребуетсяПередатьКВыполнению();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияПередатьКВыполнениюРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Передать к выполнению (%1)';
			|en = 'Pass for completion (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.ДекорацияПередатьКВыполнениюСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛТребуетсяПередатьКВыполнению()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если ТребуетсяПередатьКВыполнению(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьНеобходимостьОтметитьВыполненным()
	
	КоличествоМЛ = КоличествоМЛТребуетсяОтметитьВыполненным();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияОтметитьВыполненнымРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отметить выполненным (%1)';
			|en = 'Mark as completed (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.ДекорацияОтметитьВыполненнымСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛТребуетсяОтметитьВыполненным()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если ТребуетсяОтметитьВыполненным(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьНеобходимостьОформитьВыработку()
	
	КоличествоМЛ = КоличествоМЛТребуетсяОформитьВыработку();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияОформитьВыработкуРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Оформить выработку сотрудников (%1)';
			|en = 'Register employee output (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.ДекорацияОформитьВыработкуСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛТребуетсяОформитьВыработку()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если ТребуетсяОформитьВыработку(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьНеобходимостьОформитьВыпуск()
	
	КоличествоМЛ = КоличествоМЛТребуетсяОформитьВыпуск();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияОформитьВыпускРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Оформить выпуск или выполнение работ (%1)';
			|en = 'Register release or execution of works (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.ДекорацияОформитьВыпускСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаличиеДефицитаМатериалов()
	
	КоличествоМЛ = КоличествоМЛДефицитМатериалов();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияДефицитМатериаловРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Есть дефицит материалов (%1)';
			|en = 'There is a shortage of materials (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.ДекорацияДефицитМатериаловСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛДефицитМатериалов()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если ДефицитМатериалов(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьНаличиеНеЗавершенныхЭтапов()
	
	КоличествоМЛ = КоличествоМЛНеЗавершеныЭтапы();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияНеЗавершеныПредыдущиеЭтапыРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не завершены предыдущие этапы (%1)';
			|en = 'Previous stages are not completed (%1)'"),
		КоличествоМЛСтрокой);
	Элементы.ДекорацияНеЗавершеныПредыдущиеЭтапыСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛНеЗавершеныЭтапы()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если НеЗавершеныПредыдущиеЭтапы(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КоличествоМЛТребуетсяОформитьВыпуск()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если ТребуетсяОформитьВыпуск(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредупреждениеНарушенСрокГрафика()
	
	КоличествоМЛ = КоличествоМЛНарушенСрокГрафика();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияНарушенСрокГрафикаРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нарушен срок графика производства (%1)';
			|en = 'Production schedule is delayed (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.ДекорацияНарушенСрокГрафикаСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛНарушенСрокГрафика()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если НарушенСрокГрафика(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредупреждениеНарушенСрокОкончанияВыполненияМЛ()
	
	КоличествоМЛ = КоличествоМЛНарушенСрокОкончанияВыполненияМЛ();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияНарушенСрокОкончанияВыполненияМЛРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нарушен срок окончания выполнения (%1)';
			|en = 'Completion time has expired (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.ДекорацияНарушенСрокОкончанияВыполненияМЛСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛНарушенСрокОкончанияВыполненияМЛ()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если НарушенСрокОкончанияВыполненияМЛ(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредупреждениеНарушенСрокЗапуска()
	
	КоличествоМЛ = КоличествоМЛНарушенСрокЗапуска();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияНарушенСрокЗапускаРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нарушен срок запуска маршрутного листа (%1)';
			|en = 'Route sheet start date is overdue (%1)'"),
		КоличествоМЛСтрокой);
	Элементы.ДекорацияНарушенСрокЗапускаСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛНарушенСрокЗапуска()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если НарушенСрокЗапуска(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредупреждениеНарушенСрокНачалаВыполненияОпераций()
	
	КоличествоМЛ = КоличествоМЛНарушенСрокНачалаВыполненияОпераций();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияНарушенСрокНачалаВыполненияОперацийРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нарушен срок начала выполнения операций (%1)';
			|en = 'Operation start date is overdue (%1)'"), 
		КоличествоМЛСтрокой);
	Элементы.ДекорацияНарушенСрокНачалаВыполненияОперацийСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛНарушенСрокНачалаВыполненияОпераций()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если НарушенСрокНачалаВыполненияОпераций(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредупреждениеНарушенСрокОкончанияВыполненияОпераций()
	
	КоличествоМЛ = КоличествоМЛНарушенСрокОкончанияВыполненияОпераций();
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.ДекорацияНарушенСрокОкончанияВыполненияОперацийРазвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нарушен срок окончания выполнения операций (%1)';
			|en = 'Operation completion time has expired (%1)'"),
		КоличествоМЛСтрокой);
	Элементы.ДекорацияНарушенСрокОкончанияВыполненияОперацийСвернута.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '(%1)';
			|en = '(%1)'"), 
		КоличествоМЛСтрокой);
	
КонецПроцедуры

&НаСервере
Функция КоличествоМЛНарушенСрокОкончанияВыполненияОпераций()
	
	Результат = 0;
	
	Для каждого Строка Из СписокМаршрутныхЛистов Цикл
		Если НарушенСрокОкончанияВыполненияОпераций(Строка) Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДиаграммаГанта

&НаСервере
Функция ПараметрыВыводаРасписания()
	
	ПараметрыВывода = Отчеты.ДиаграммаПооперационногоРасписания.ПараметрыВывода();
	ЗаполнитьЗначенияСвойств(ПараметрыВывода, ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		Подразделения = Новый СписокЗначений;
		Подразделения.Добавить(ОтборПодразделение);
		ПараметрыВывода.Вставить("Подразделения", Подразделения);
	КонецЕсли;
	
	МаршрутныеЛистыОтбор = МаршрутныеЛистыВывестиРасписание();
	Если НЕ ЗначениеЗаполнено(МаршрутныеЛистыОтбор) Тогда
		МаршрутныеЛистыОтбор.Добавить(Документы.МаршрутныйЛистПроизводства.ПустаяСсылка());
	КонецЕсли;
	ПараметрыВывода.Вставить("МаршрутныеЛисты", МаршрутныеЛистыОтбор);
	
	МаршрутныеЛистыПодсветка = МаршрутныеЛистыСУстановленнойПодсветкой();
	ПараметрыВывода.Вставить("МаршрутныеЛистыПодсветка", МаршрутныеЛистыПодсветка);
	
	Границы = МаршрутныеЛистыГраницыРасписания(МаршрутныеЛистыОтбор);
	ПараметрыВывода.Начало = Границы.Начало;
	ПараметрыВывода.Окончание = Границы.Окончание;
	
	Возврат ПараметрыВывода;
	
КонецФункции

&НаСервере
Процедура УстановитьПериодДеньНаСервере()
	
	Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День;
	ОбработатьИзменениеПериодичностиОтображения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодНеделяНаСервере()
	
	Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя;
	ОбработатьИзменениеПериодичностиОтображения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодМесяцНаСервере()
	
	Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц;
	ОбработатьИзменениеПериодичностиОтображения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПериодичностиОтображения()
	
	СохранитьНастройкиФормы();
	УстановитьПометкуКнопкамПериодичности();
	УстановитьПериодичность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуКнопкамПериодичности()
	
	ПометкаДень = Ложь;
	ПометкаНеделя = Ложь;
	ПометкаМесяц = Ложь;
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		ПометкаДень = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		ПометкаНеделя = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		ПометкаМесяц = Истина;
	Иначе
		Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя;
		ПометкаНеделя = Истина;
	КонецЕсли;
	
	Элементы.УстановитьПериодДень.Пометка = ПометкаДень;
	Элементы.УстановитьПериодНеделя.Пометка = ПометкаНеделя;
	Элементы.УстановитьПериодМесяц.Пометка = ПометкаМесяц;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодичность()
	
	ПараметрыВывода = ПараметрыВыводаРасписания();
	Отчеты.ДиаграммаПооперационногоРасписания.УстановитьПериодичность(ПараметрыВывода, ДиаграммаГанта);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеОперацийВФоновомРежиме

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыФоновойОперации(Форма, Результат)
	
	Форма.АдресХранилища = Результат.АдресХранилища;
	Форма.ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеФоновойОперации()
	
	ПодключитьОбработчикОжиданияФоновойОперации();
	ОткрытьФормуДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияФоновойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				Если ТекущаяФоноваяОперация = "ФормированиеМаршрутныхЛистов" Тогда
					ЗавершеноЗаданиеСформироватьМаршрутныеЛисты();
				ИначеЕсли ТекущаяФоноваяОперация = "ОбновлениеМаршрутныхЛистов" Тогда
					ЗавершеноЗаданиеОбновлениеМаршрутныхЛистов();
				ИначеЕсли ТекущаяФоноваяОперация = "ОбновлениеРасписания" Тогда
					ЗавершеноЗаданиеОбновлениеРасписания();
				КонецЕсли;
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура МодифицироватьЭлементыФормыПриСоздании()
	
	Отчеты.ДиаграммаПооперационногоРасписания.ДобавитьВФормуОбозначенияДиаграммы(ЭтотОбъект, Истина, Ложь);
	
	ИнициализироватьЭлементыФормы();
	
	СкрытьЭлементыНедоступныеПоПравам();
	
	УстановитьВидимостьПанелейУправления(ЭтотОбъект);
	УстановитьВидимостьРасписанияПроизводтсва();
	
	УстановитьПометкуКнопкамПериодичности();
	
	УстановитьФиксированныйОтборСтрокТаблиц();
	
	НастроитьФормуПоМетодикеУправления();
	НастроитьФормуПоПодразделению();
	НастроитьФормуПоСпискуЭтапов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПанелейУправления(Форма)
	
	Форма.Элементы.ПанельРазвернута.Видимость = НЕ Форма.ПанельУправленияСвернута;
	Форма.Элементы.ПанельСвернута.Видимость = Форма.ПанельУправленияСвернута;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФиксированныйОтборСтрокТаблиц()
	
	Элементы.СписокМаршрутныхЛистов.ОтборСтрок = Новый ФиксированнаяСтруктура("ПоказатьВСписке", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЭлементыФормы()
	
	ДатаПередатьКВыполнению = ТекущаяДатаСеанса();
	ЗаполнитьПодсказкуПередачиКВыполнению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкуПередачиКВыполнению()
	
	ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отобрать маршрутные листы которые необходимо передать к выполнению %1.';
			|en = 'Select route sheets to pass for completion on %1.'"),
		Формат(ДатаПередатьКВыполнению, "ДЛФ=D"));
		
	Элементы.ОтборПередатьКВыполнениюРазвернута.Подсказка = ТекстПодсказки;
	Элементы.ОтборПередатьКВыполнениюСвернута.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыНедоступныеПоПравам()

	ПравоВводаВыпускПродукции = ПравоДоступа("Добавление", Метаданные.Документы.ВыпускПродукции);
	Если НЕ ПравоВводаВыпускПродукции Тогда
		Элементы.СписокМаршрутныхЛистовОформитьВыпуск.Видимость = Ложь;
		Элементы.СписокМаршрутныхЛистовКонтекстноеМенюОформитьВыпуск.Видимость = Ложь;
	КонецЕсли; 
	
	ПравоВводаВыработкиСотрудников = ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников);
	Если НЕ ПравоВводаВыработкиСотрудников Тогда
		Элементы.СписокМаршрутныхЛистовОформитьВыработкуСотрудников.Видимость = Ложь;
		Элементы.СписокМаршрутныхЛистовКонтекстноеМенюОформитьВыработкуСотрудников.Видимость = Ложь;
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство") Тогда
		ПравоКорректировкиЗаказаМатериалов = ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаЗаказаМатериаловВПроизводство);
	Иначе
		ПравоКорректировкиЗаказаМатериалов = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПроизводство);
	КонецЕсли;
	Если НЕ ПравоКорректировкиЗаказаМатериалов Тогда
		Элементы.ОтгрузитьМатериалы.Видимость = Ложь;
		Элементы.СписокМаршрутныхЛистовКонтекстноеМенюОтгрузитьМатериалы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает флаг, обозначающий способ отображения расписания производства:
// в виде списка или в виде графика.
//
// Параметры:
//	ВидДиспетчирования - Число - значение переменной ВидДиспетчированияРасписания,
//		редактируемой в форме. По умолчанию считается, что значение 0 соответствует
//		способу отображения в виде списка, а любое прочее значение - способу
//		отображенифя в виде графика (диаграммы Ганта).
//
// Возвращаемое значение:
//	Булево - значение Истина соответствует способу отображения расписания в виде списка,
//	а значение Ложь соответствует отображению в виде графика (диаграммы Ганта).
//
&НаКлиентеНаСервереБезКонтекста
Функция ВыводитьРасписаниеСписком(ВидДиспетчирования)
	
	Если ВидДиспетчирования = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПараметрыПриСоздании()
	
	Если Параметры.Свойство("СписокЭтапов") Тогда
		Для каждого ДанныеЭтапа Из Параметры.СписокЭтапов Цикл
			ЗаполнитьЗначенияСвойств(СписокЭтапов.Добавить(),ДанныеЭтапа);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") Тогда
		
		ОтборПодразделение = Параметры.Подразделение;
		
	ИначеЕсли Параметры.Свойство("СтруктураБыстрогоОтбора")
		И Параметры.СтруктураБыстрогоОтбора.Свойство("Подразделение") Тогда
		
		ОтборПодразделение = Параметры.СтруктураБыстрогоОтбора.Подразделение;
		
	КонецЕсли;
	
	Если Параметры.Свойство("УправлениеМаршрутнымиЛистами") Тогда
		УправлениеМаршрутнымиЛистами = Параметры.УправлениеМаршрутнымиЛистами;
	Иначе
		
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			УправлениеМаршрутнымиЛистами = ПодразделениеМетодикаУправленияМЛ(ОтборПодразделение);
		Иначе
			УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормыПриСоздании()
	
	Если НЕ ЗначениеЗаполнено(СписокЭтапов) И НЕ ЗначениеЗаполнено(ОтборПодразделение) Тогда
		
		// Параметры отбора.
		ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить(
			"ДиспетчированиеПроизводстваПооперационное", КлючНастроекПараметрыОтбора());
		Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОтбора);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			Методика = ПодразделениеМетодикаУправленияМЛ(ПараметрыОтбора.ОтборПодразделение);
			Если НЕ Методика = УправлениеМаршрутнымиЛистами Тогда
				ОтборПодразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	ОтборПодразделениеДоИзменения = ОтборПодразделение;
	
	// Общие настройки.
	НастройкиФормы = ХранилищеНастроекДанныхФорм.Загрузить(
		"ДиспетчированиеПроизводстваПооперационное", КлючНастроекОбщиеНастройки());
	Если ЗначениеЗаполнено(НастройкиФормы) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КлючНастроекПараметрыОтбора()
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		Результат = "ПараметрыОтбора_ПооперационноеПланирование";
	Иначе
		Результат = "ПараметрыОтбора_РегистрацияОпераций";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КлючНастроекОбщиеНастройки()
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		Результат = "ОбщиеНастройки_ПооперационноеПланирование";
	Иначе
		Результат = "ОбщиеНастройки_РегистрацияОпераций";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет общие настройки формы в хранилище настроек. Помимо общих настроек
// отдельной процедурой выполняется сохранение настроек быстрых отборов.
//
&НаСервере
Процедура СохранитьНастройкиФормы()
	
	СтруктураНастроек = СтруктураНастроекФормы();
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"ДиспетчированиеПроизводстваПооперационное",
		КлючНастроекОбщиеНастройки(),
		СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Функция СтруктураНастроекФормы()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидДиспетчированияРасписания");
	Результат.Вставить("Периодичность");
	Результат.Вставить("ПанельУправленияСвернута");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Установка условного оформления формы.
	
	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект, 
																			 "СписокМаршрутныхЛистовМаршрутныйЛистХарактеристика",
																		     "СписокМаршрутныхЛистов.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаршрутныхЛистовОкончаниеПоРасписанию.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаршрутныхЛистов.СостояниеРасписания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано);
	СписокЗначений.Добавить(Перечисления.СостоянияРасписанияРабочихЦентров.НеАктуально);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаршрутныхЛистовПриоритет.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеМаршрутнымиЛистами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаршрутныхЛистовТребуетсяСформироватьРасписаниеКартинка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеМаршрутнымиЛистами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//


	// Установка условного оформления списка операций расписания производства.
	РасписаниеПроизводстваСписокУстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура РасписаниеПроизводстваСписокУстановитьУсловноеОформление()
	
	РасписаниеПроизводства.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();
	
	ДобавитьЭлементУсловногоОформленияСрокиОперации();
	ДобавитьЭлементУсловногоОформленияПодсветкаОперацийМаршрутов();
	
	ДобавитьЭлементУсловногоОформленияНарушенСрокНачалаВыполнения();
	ДобавитьЭлементУсловногоОформленияНарушенСрокОкончанияВыполнения();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияСрокиОперации()
	
	Элемент = РасписаниеПроизводства.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Начало");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Окончание");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", ИнтервалОперацииФорматнаяСтрока());
	Элемент.Использование = Истина;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияПодсветкаОперацийМаршрутов()
	
	Если РежимИндикации = РежимИндикацииПодсветкаКонст() Тогда
		
		МаршрутыПодсветка = МаршрутныеЛистыСУстановленнойПодсветкой();
		
		Элемент = РасписаниеПроизводства.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МаршрутныйЛист");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = МаршрутыПодсветка;
		ЭлементОтбора.Использование = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);
		
		Элемент.Использование = Истина;
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияНарушенСрокНачалаВыполнения()
	
	Элемент = РасписаниеПроизводства.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Начало");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НарушенСрокНачалаВыполненияОпераций");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблема);
	Элемент.Использование = Истина;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияНарушенСрокОкончанияВыполнения()
	
	Элемент = РасписаниеПроизводства.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Окончание");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НарушенСрокОкончанияВыполненияОпераций");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблема);
	Элемент.Использование = Истина;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

&НаСервере
Функция ИнтервалОперацииФорматнаяСтрока()
	
	Возврат "ДФ='dd.MM.yyyy ЧЧ:мм'";
	
КонецФункции

&НаСервере
Процедура СохранитьПараметрыОтбора()
	
	ПараметрыОтбора = Новый Структура("ОтборПодразделение,ОтборПериод");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтотОбъект);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"ДиспетчированиеПроизводстваПооперационное",
		КлючНастроекПараметрыОтбора(),
		ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьМаршрутныйЛист()
	
	ТекущиеДанные = Элементы.СписокМаршрутныхЛистов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждениеНеВыбранМаршрутныйЛист();
		Возврат;
	ИначеЕсли ТекущиеДанные.Запланировано < 2  Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'По маршрутному листу должно быть запланировано производство не менее двух единиц/партий изделий.';
									|en = 'The route sheet must contain manufacture of at least two units/batches of products.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("МаршрутныйЛист,Количество,ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий", 
					ТекущиеДанные.МаршрутныйЛист, 
					ТекущиеДанные.Запланировано,
					ТекущиеДанные.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
					
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРазбиениеМаршрутногоЛиста", ЭтотОбъект);				
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.РазбиениеМаршрутногоЛиста", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРазбиениеМаршрутногоЛиста(ДанныеМаршрутныйЛист, ДополнительныеПараметры) Экспорт

	Если ДанныеМаршрутныйЛист <> Неопределено Тогда
		ОбновитьДанные(Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодразделениеМетодикаУправленияМЛ(Подразделение)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "УправлениеМаршрутнымиЛистами");
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоМетодикеУправления()
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		ПооперационноеПланирование = Истина;
		Заголовок = НСтр("ru = 'Диспетчирование производства (MES)';
						|en = 'Production dispatching (MES)'");
	Иначе
		ПооперационноеПланирование = Ложь;
		Заголовок = НСтр("ru = 'Диспетчирование производства (регистрация операций)';
						|en = 'Production dispatching (operation registration)'");
	КонецЕсли;
	
	Элементы.ФормаПоказатьСкрытьРасписание.Видимость = ПооперационноеПланирование;
	
	Элементы.КартинкаСформироватьРасписаниеРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.СформироватьРасписаниеРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.КартинкаСформироватьРасписаниеСвернута.Видимость = ПооперационноеПланирование;
	Элементы.СформироватьРасписаниеСвернута.Видимость = ПооперационноеПланирование;
	
	Элементы.ОтборНарушенСрокГрафикаРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.КартинкаНарушенСрокГрафикаРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.ДекорацияНарушенСрокГрафикаРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.ОтборНарушенСрокГрафикаСвернута.Видимость = ПооперационноеПланирование;
	Элементы.КартинкаНарушенСрокГрафикаСвернута.Видимость = ПооперационноеПланирование;
	Элементы.ДекорацияНарушенСрокГрафикаСвернута.Видимость = ПооперационноеПланирование;
	
	Элементы.ОтборНарушенСрокОкончанияВыполненияМЛРазвернута.Видимость = НЕ ПооперационноеПланирование;
	Элементы.КартинкаНарушенСрокОкончанияВыполненияМЛРазвернута.Видимость = НЕ ПооперационноеПланирование;
	Элементы.ДекорацияНарушенСрокОкончанияВыполненияМЛРазвернута.Видимость = НЕ ПооперационноеПланирование;
	Элементы.ОтборНарушенСрокОкончанияВыполненияМЛСвернута.Видимость = НЕ ПооперационноеПланирование;
	Элементы.КартинкаНарушенСрокОкончанияВыполненияМЛСвернута.Видимость = НЕ ПооперационноеПланирование;
	Элементы.ДекорацияНарушенСрокОкончанияВыполненияМЛСвернута.Видимость = НЕ ПооперационноеПланирование;
	
	Элементы.ОтборНарушенСрокНачалаВыполненияОперацийРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.КартинкаНарушенСрокНачалаВыполненияОперацийРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.ДекорацияНарушенСрокНачалаВыполненияОперацийРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.ОтборНарушенСрокНачалаВыполненияОперацийСвернута.Видимость = ПооперационноеПланирование;
	Элементы.КартинкаНарушенСрокНачалаВыполненияОперацийСвернута.Видимость = ПооперационноеПланирование;
	Элементы.ДекорацияНарушенСрокНачалаВыполненияОперацийСвернута.Видимость = ПооперационноеПланирование;
	
	Элементы.ОтборНарушенСрокОкончанияВыполненияОперацийРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.КартинкаНарушенСрокОкончанияВыполненияОперацийРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.ДекорацияНарушенСрокОкончанияВыполненияОперацийРазвернута.Видимость = ПооперационноеПланирование;
	Элементы.ОтборНарушенСрокОкончанияВыполненияОперацийСвернута.Видимость = ПооперационноеПланирование;
	Элементы.КартинкаНарушенСрокОкончанияВыполненияОперацийСвернута.Видимость = ПооперационноеПланирование;
	Элементы.ДекорацияНарушенСрокОкончанияВыполненияОперацийСвернута.Видимость = ПооперационноеПланирование;
	
	Элементы.ФормаПечатьСменноСуточныхЗаданий.Видимость = ПооперационноеПланирование;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПодразделению()
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(ОтборПодразделение);
		
		Если ПараметрыПодразделения.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			Элементы.СписокМаршрутныхЛистовОкончаниеПоРасписанию.Формат = "ДФ='dd.MM.yyyy ЧЧ:мм'";
		Иначе
			Элементы.СписокМаршрутныхЛистовОкончаниеПоРасписанию.Формат = "ДЛФ=D";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоСпискуЭтапов()
	
	Если ЗначениеЗаполнено(СписокЭтапов) Тогда
		
		Элементы.ОтборПодразделение.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ОтборПодразделение.ПодсказкаВвода = НСтр("ru = '<установлен отбор по этапам>';
															|en = '<filter by stages is set>'");
		Элементы.ОтборПодразделение.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьМаршрутныеЛисты()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбратьДату", ОтборПериод.ДатаОкончания);
	ПараметрыФормы.Вставить("Подразделение", ОтборПодразделение);
	ПараметрыФормы.Вставить("УправлениеМаршрутнымиЛистами", УправлениеМаршрутнымиЛистами);
	ПараметрыФормы.Вставить("СписокЭтапов", СписокЭтапов);	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьМаршрутныеЛистыЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.ФормированиеМаршрутныхЛистов", 
					ПараметрыФормы,,,,,
					ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьРасписание()
	
	ПараметрыФормы = Новый Структура("Подразделение", ОтборПодразделение);
	ОткрытьФорму("Обработка.ПооперационноеПланирование.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьМаршрутныеЛистыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Результат = СформироватьМаршрутныеЛистыВФоновомРежиме(РезультатЗакрытия);
	
	ЗаполнитьРеквизитыФоновойОперации(ЭтотОбъект, Результат);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗавершеноЗаданиеСформироватьМаршрутныеЛисты();
	Иначе
		НачатьОжиданиеФоновойОперации();
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьМаршрутныеЛистыВФоновомРежиме(Знач ПараметрыЗадания)
	
	ТекущаяФоноваяОперация = "ФормированиеМаршрутныхЛистов";
	
	ПараметрыЗадания.Вставить("СписокЭтапов", СписокЭтапов.Выгрузить());
	
	НаименованиеЗадания = НСтр("ru = 'Формирование маршрутных листов';
								|en = 'Generate route sheets'");
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"Обработки.ДиспетчированиеПроизводстваПооперационное.СформироватьМаршрутныеЛисты",
						ПараметрыЗадания,
						НаименованиеЗадания);
			
	Возврат РезультатРасчета;
		
КонецФункции

&НаКлиенте
Процедура ЗавершеноЗаданиеСформироватьМаршрутныеЛисты()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОперативныйУчетПроизводстваКлиент.ОповеститьПользователяОФормированииМаршрутныхЛистов(
			Результат.КоличествоОбработанных,
			Результат.КоличествоВсего);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВидДиспетчированияРасписанияПриИзмененииНаСервере()
	
	УстановитьВидимостьСтраницРасписанияПроизводства();
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаСервере
Функция МаршрутныеЛистыГраницыРасписания(МаршрутныеЛисты)
	
	Границы = РегистрыСведений.ПооперационноеРасписание.ГраницыРасписанияМаршрутныхЛистов(МаршрутныеЛисты);
	
	Если Границы = Неопределено Тогда
		Результат = Новый Структура("Начало, Окончание", ОтборПериод.ДатаНачала, ОтборПериод.ДатаОкончания);
	Иначе
		Результат = Границы;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииИдикаторовУправления();
	
	УстановитьМаршрутнымЛистамВидимостьПоИндикаторамУправления();
	
	ОбновитьДанные(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекстПредупрежденияПоМаршрутномуЛисту(ИндексСтроки, ДанныеСтроки)
	
	Поле = "СписокМаршрутныхЛистов[" + ИндексСтроки + "].Предупреждение";
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ДанныеСтроки.ПредупреждениеТекст,
		,
		Поле);
	
КонецПроцедуры

&НаСервере
Процедура ПередатьКВыполнениюДатаПриИзмененииНаСервере()
	
	ОбновитьНеобходимостьПередатьКВыполнению();
	ЗаполнитьПодсказкуПередачиКВыполнению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивМаршрутныхЛистов()

	ПараметрыФормы = Новый Структура("Подразделение,Статус", ОтборПодразделение, ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен"));
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРежимыИндикации()
	
	СписокРежимов = Элементы.РежимИндикации.СписокВыбора;
	Если НЕ ЗначениеЗаполнено(СписокРежимов)  Тогда
		
		СписокРежимов.Добавить(РежимИндикацииНеИспользоватьКонст(), НСтр("ru = 'Без индикации';
																		|en = 'Without indication'"));
		СписокРежимов.Добавить(РежимИндикацииОтборКонст(), НСтр("ru = 'Отбор';
																|en = 'Filter'"));
		СписокРежимов.Добавить(РежимИндикацииПодсветкаКонст(), НСтр("ru = 'Подсветка';
																	|en = 'Light'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимИндикацииНеИспользоватьКонст()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимИндикацииОтборКонст()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимИндикацииПодсветкаКонст()
	
	Возврат 2;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьРасписаниеПроизводства()
	
	ОбновитьДанные(Ложь, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КрайнийСрокНачалаВыполнения(Подразделение, ДатаКонтроля)
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "ВремяНаРегистрациюВыполнения, ВремяНаРегистрациюВыполненияЕдИзм");
		Если ЗначениеЗаполнено(Реквизиты.ВремяНаРегистрациюВыполнения)
			И ЗначениеЗаполнено(Реквизиты.ВремяНаРегистрациюВыполненияЕдИзм) Тогда
			
			КолСекундВЕдинице = ЕдИзмВремениВСекунды(Реквизиты.ВремяНаРегистрациюВыполненияЕдИзм);
			ВремяНаРегистрацию = Реквизиты.ВремяНаРегистрациюВыполнения * КолСекундВЕдинице;
			Результат = ДатаКонтроля - ВремяНаРегистрацию;
			
		Иначе
			
			Результат = ДатаКонтроля;
			
		КонецЕсли;
		
	Иначе
		Результат = ДатаКонтроля;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕдИзмВремениВСекунды(ЕдИзм)
	
	Если ЗначениеЗаполнено(ЕдИзм) Тогда
		Если ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Секунда Тогда
			Результат = 1;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Минута Тогда
			Результат = 60;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
			Результат = 3600;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.День
			ИЛИ ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Сутки Тогда
			Результат = 86400;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Месяц Тогда
			Результат = 86400 * 30;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Год Тогда
			Результат = 86400 * 365;
		Иначе
			Результат = 0;
		КонецЕсли;
	Иначе
		Результат = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьВыбранныеМаршрутныеЛисты()

	ВыделенныеСтроки = СписокМаршрутныхЛистовВыделенныеСтроки();
	
	Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		
		КоличествоВсего = ВыделенныеСтроки.Количество();
		Если КоличествоВсего = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Пометить на удаление?';
								|en = 'Mark for deletion?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить на удаление выбранные документы?';
								|en = 'Mark the selected documents for deletion?'");
		КонецЕсли; 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьВыбранныеМаршрутныеЛистыЗавершение", ЭтотОбъект, КоличествоВсего);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пометить на удаление';
															|en = 'Mark for deletion'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныеМаршрутныеЛистыЗавершение(РезультатВопроса, КоличествоВсего) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = УдалитьВыбранныеМаршрутныеЛистыНаСервере();
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Помечено на удаление %1 из %2 документов';
										|en = '%1 of %2 documents are marked for deletion'"),
									КоличествоОбработанных,
									КоличествоВсего);
		ПоказатьОповещениеПользователя(,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
		ОперативныйУчетПроизводстваКлиент.ОповеститьОЗаписиМаршрутныхЛистов(ЭтотОбъект);
		
		ОбновитьДанные(Истина, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьВыбранныеМаршрутныеЛистыНаСервере()

	КоличествоПомеченныхНаУдаление = 0;
	
	Для каждого ИдентификаторСтроки Из Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если НЕ ДанныеСтроки = Неопределено Тогда
			ДокОбъект = ДанныеСтроки.МаршрутныйЛист.ПолучитьОбъект();
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			КоличествоПомеченныхНаУдаление = КоличествоПомеченныхНаУдаление + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПомеченныхНаУдаление;
	
КонецФункции

&НаКлиенте
Функция СписокМаршрутныхЛистовВыделенныеСтроки()
	
	Результат = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если НЕ ДанныеСтроки = Неопределено Тогда
			Результат.Добавить(ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИсточникОповещенияЭтотОбъект(Источник)
	
	Результат = ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") И Источник = ЭтотОбъект;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПредупреждениеНеВыбранМаршрутныйЛист()
	
	ПоказатьПредупреждение(,НСтр("ru = 'Необходимо выбрать маршрутный лист.';
								|en = 'Select a route sheet.'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21