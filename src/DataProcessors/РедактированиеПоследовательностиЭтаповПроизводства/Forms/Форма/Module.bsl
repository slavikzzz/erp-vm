
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыВстраивания = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Распоряжение) Тогда
		ВызватьИсключение НСтр("ru = 'Для открытия формы необходимо передать параметры.';
								|en = 'To open the form, pass the parameters.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ПартияПроизводства) Тогда
		Если Параметры.Свойство("Назначение") И Не ЗначениеЗаполнено(Параметры.НазначениеПродукция) Тогда
			СхемаОбособления = Документы.ЗаказНаПроизводство2_2.СхемаОбособления(
				Параметры.Распоряжение,
				Параметры.Назначение);
			Параметры.НазначениеПродукция = СхемаОбособления.НазначениеПродукция;
		КонецЕсли;
	Иначе
		Параметры.НазначениеПродукция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПартияПроизводства, "Назначение");
		ПартияПроизводстваДоИзменения = Параметры.ПартияПроизводства;
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	ПараметрыВыбораСтатейИАналитик = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройки = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	НачалоУчетаТрудозатратПоСотрудникам = Дата(1,1,1);
	//++ Локализация
	НачалоУчетаТрудозатратПоСотрудникам = ПолучитьФункциональнуюОпцию("УчетТрудозатратВРазрезеСотрудников");
	//-- Локализация
	
	УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ОповещениеСохранитьИЗакрыть = Новый ОписаниеОповещения(
			"ПередЗакрытиемЗавершение", ЭтотОбъект);
	
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(
			ОповещениеСохранитьИЗакрыть,
			Отказ,
			ЗавершениеРаботы,
			НСтр("ru = 'Данные были изменены. Записать изменения?';
				|en = 'Data has changed. Save the changes?'"));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗаписатьДанные(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверитьРеквизитыШапки(Отказ);
	ПроверитьПроизводственныйПроцесс(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьВыходныеИзделия(МассивНепроверяемыхРеквизитов, Отказ);
	ПроверитьПобочныеИзделия(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьОбеспечениеМатериаламиИРаботами(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьРасходМатериаловИРабот(МассивНепроверяемыхРеквизитов, Отказ);
	ПроверитьЭкономияМатериалов(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьТрудозатраты(МассивНепроверяемыхРеквизитов, Отказ);
	
	Если Не Отказ И Не РеквизитФормыВЗначение("Объект").ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент.ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РазрешениеНаЗаменуМатериалов.Форма.ПодборАналогов" Тогда
		
		ЗаменитьНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий[ВыбранноеЗначение.ИмяТЧ], ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ПодборМатериаловПоСпецификации" Тогда
		
		НачатьОбработкуРезультатаПодбора(ВыбранноеЗначение, "ПодборМатериаловПоСпецификации");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	// Выходные изделия - отмена строк
	ВыходныеИзделияСкрыватьОтмененныеСтроки =  Настройки.Получить("ВыходныеИзделияСкрыватьОтмененныеСтроки");
	
	Если ВыходныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ВыходныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВыходныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВыходныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
	// Побочные изделия - отмена строк
	ПобочныеИзделияСкрыватьОтмененныеСтроки =  Настройки.Получить("ПобочныеИзделияСкрыватьОтмененныеСтроки");
	
	Если ПобочныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ПобочныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ПобочныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПобочныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
	// Обеспечение материалами и работами - отмена строк
	ОбеспечениеСкрыватьОтмененныеСтроки =  Настройки.Получить("ОбеспечениеСкрыватьОтмененныеСтроки");
	
	Если ОбеспечениеСкрыватьОтмененныеСтроки Тогда
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Обеспечение_СкрыватьОтмененныеСтроки.Пометка = ОбеспечениеСкрыватьОтмененныеСтроки;
	
	// Трудозатраты - отмена строк
	ТрудозатратыСкрыватьОтмененныеСтроки =  Настройки.Получить("ТрудозатратыСкрыватьОтмененныеСтроки");
	
	Если ТрудозатратыСкрыватьОтмененныеСтроки Тогда
		Элементы.Трудозатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Трудозатраты.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Трудозатраты_СкрыватьОтмененныеСтроки.Пометка = ТрудозатратыСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Объект.Спецификация.Пустая() Тогда
		Если ПоказатьНормативыМатериалы Тогда
			ПоказатьНормативыМатериалы = Ложь;
		КонецЕсли;
		Если ПоказатьНормативыТрудозатраты Тогда
			ПоказатьНормативыТрудозатраты = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокРеквизитов = "";
	
	Если ПоказатьНормативыМатериалы ИЛИ ПоказатьНормативыТрудозатраты Тогда
		Если ПоказатьНормативыМатериалы
				И Объект.ОбеспечениеМатериаламиИРаботами.Количество() > 0
			ИЛИ ПоказатьНормативыТрудозатраты
				И Объект.Трудозатраты.Количество() > 0 Тогда
			ПоказатьНормативыПриИзмененииНаСервере();
		Иначе
			СписокРеквизитов = 
				СписокРеквизитов + ?(ЗначениеЗаполнено(СписокРеквизитов), ",", "") + "ПоказатьНормативы";
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		
		СписокРеквизитов = 
			СписокРеквизитов + ?(ЗначениеЗаполнено(СписокРеквизитов), ",", "") + "ПоказатьАналоги";
			
		ОтметитьНаличиеАналогов();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ПриИзмененииОсновногоИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	ПриИзмененииОсновногоИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОсновноеИзделиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиКВыпуску" Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыходныеИзделия;
		
		Строки = Объект.ВыходныеИзделия.НайтиСтроки(Новый Структура("Номенклатура", Объект.ОсновноеИзделиеНоменклатура));
		Если Строки.Количество() > 0 Тогда
			Элементы.ВыходныеИзделия.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиКОбеспечению" Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбеспечениеМатериаламиИРаботами;
		
		Строки = Объект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(Новый Структура("Номенклатура", Объект.ОсновноеИзделиеНоменклатура));
		Если Строки.Количество() > 0 Тогда
			Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПродукцияНажатие(Элемент)
	
	ПродукцияСвернута = НЕ ПродукцияСвернута;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ГруппаВыходныеИзделия,
		Элементы.ГиперСсылкаНадписьПродукция, 
		ПродукцияСвернута);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПобочныеИзделияНажатие(Элемент)
	
	ПобочныеИзделияСвернуты = НЕ ПобочныеИзделияСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ПобочныеИзделия, 
		Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
		ПобочныеИзделияСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьРасходМатериаловИРаботНажатие(Элемент)
	
	ИзрасходованныеМатериалыСвернуты = НЕ ИзрасходованныеМатериалыСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.РасходМатериаловИРабот, 
		Элементы.ГиперСсылкаНадписьРасходМатериаловИРабот, 
		ИзрасходованныеМатериалыСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьРЭкономияМатериаловНажатие(Элемент)
	
	НеизрасходованныеМатериалыСвернуты = НЕ НеизрасходованныеМатериалыСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ЭкономияМатериалов, 
		Элементы.ГиперСсылкаНадписьРЭкономияМатериалов, 
		НеизрасходованныеМатериалыСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если (Поле.Имя = Элементы.ЭтапыНомерЭтапа.Имя
		ИЛИ Поле.Имя = Элементы.ЭтапыНомерСледующегоЭтапа.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИспользоватьПооперационноеУправление
		И (Поле.Имя = Элементы.ЭтапыМаршрутнаяКарта.Имя
		ИЛИ Поле.Имя = Элементы.ЭтапыКоэффициентМаршрутнойКарты.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаблокироватьДокументы(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломИзменения(Элемент, Отказ)
	
	ПроверитьЗаблокироватьДокументы(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Этапы);
	
	Если ВыделенныеСтроки.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяЗадатьВопросПередУдалениемЭтапов(ВыделенныеСтроки) Тогда
		
		ЗадатьВопросПередУдалениемЭтапов(ВыделенныеСтроки);
		Возврат;
		
	КонецЕсли;
	
	УдалитьЭтапыИзСписка(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Этапы, ЭтотОбъект);
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Этапы.ТекущиеДанные; 
		ТекущиеДанные.ЭтоНовый = Истина;
		ТекущиеДанные.Ссылка = ПолучитьСсылкуНовогоДокумента();
		ТекущиеДанные.ОсновноеИзделиеНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
		
		ПриДобавленииНовогоДокумента(ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПроизводственныйПроцесс");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЭтапыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	КэшСтроки = РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Этапы, ЭтотОбъект);
	
	Если (КэшСтроки.Подразделение <> ТекущиеДанные.Подразделение
			ИЛИ КэшСтроки.НаименованиеРедактирование <> ТекущиеДанные.НаименованиеРедактирование
			ИЛИ НоваяСтрока) Тогда
		ЗаполнитьСлужебныеРеквизитыПриИзмененииПроизводственногоПроцесса(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ЗаполнитьСсылкуПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыМаршрутнаяКартаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	
	Если ТекущиеДанные.МаршрутнаяКарта.Пустая() Тогда
		
		ТекущиеДанные.КоэффициентМаршрутнойКарты = 0;
		
	ИначеЕсли ТекущиеДанные.КоэффициентМаршрутнойКарты = 0 Тогда
		
		ТекущиеДанные.КоэффициентМаршрутнойКарты = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыУпаковкаПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоНовый Тогда
		ТекущиеДанные.УпаковкаФакт = ТекущиеДанные.УпаковкаПлан;
		ТекущиеДанные.УпаковкаОтменено = ТекущиеДанные.УпаковкаПлан;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТолькоПросмотр ИЛИ ТекущиеДанные.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если (Поле = Элементы.ВыходныеИзделияДоляСтоимостиПроцент
			ИЛИ Поле = Элементы.ВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости)
		И СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
	КонецЕсли;
	
	Если (Поле = Элементы.ВыходныеИзделияСерия 
			ИЛИ Поле = Элементы.ВыходныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ВыходныеИзделия");
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	Если Не ПроверитьСтрокиТабличнойЧастиПередУдалением("ВыходныеИзделия", Отказ) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОбработкаСтрокиПриНачалеРедактирования("ВыходныеИзделия", НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Произведено = Ложь;
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
		
		Если Копирование Тогда
			// Настройка счетов учета.
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
				ЭтаФорма, ТекущиеДанные, "ВыходныеИзделия", НоваяСтрока, Копирование); 
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ВыходныеИзделия, ЭтотОбъект);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий.ВыходныеИзделия);
	
	РассчитатьПроцентРаспределенияЗатрат = ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
		Элемент,
		ПараметрыРаспределенияЗатрат,
		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.ВыходныеИзделия, ЭтотОбъект),
		НоваяСтрока);
	
	ОбновитьПараметрыНазначений = ОбеспечениеПроизводстваКлиентСервер.НеобходимоОбновитьПараметрыЗаполненияНазначенийПриИзмененииИзделий(
		ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка),
		ТекущиеДанные,
		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.ВыходныеИзделия, ЭтотОбъект));
	
	Если ОбновитьСтатусыСерий
		ИЛИ РассчитатьПроцентРаспределенияЗатрат
		ИЛИ ОбновитьПараметрыНазначений Тогда
			
		ВыходныеИзделияПриОкончанииРедактированияНаСервере(
			ТекущиеДанные.ПолучитьИдентификатор(),
			КэшированныеЗначения,
			ОбновитьСтатусыСерий,
			РассчитатьПроцентРаспределенияЗатрат,
			ОбновитьПараметрыНазначений);
		
	КонецЕсли;
	
	Если ОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий.ВыходныеИзделия);
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыходныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыходныеИзделияПриОкончанииРедактированияНаСервере(ИдентификаторСтроки, КэшированныеЗначения, ОбновитьСтатусыСерий, РассчитатьПроцентРаспределенияЗатрат, ОбновитьПараметрыНазначений)
	
	Если ОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			"ВыходныеИзделия",
			ИдентификаторСтроки,
			КэшированныеЗначения);
	КонецЕсли;
	
	Если РассчитатьПроцентРаспределенияЗатрат Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
	Если ОбновитьПараметрыНазначений Тогда
		ЗаполнитьПараметрыВыбораНазначений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ВыходныеИзделия", Элемент);
	ВыходныеИзделияПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыходныеИзделияПослеУдаленияНаСервере()
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	ЗаполнитьПараметрыВыбораНазначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ВыходныеИзделия");

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ВыходныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ВыходныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ВыходныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	Если ТекущиеДанные.ИспользоватьПлановуюСтоимость Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ИзделияЭтапаЦенаПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ИзделияЭтапаСуммаПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если ТекущиеДанные.ИспользоватьПлановуюСтоимость Тогда
		
		Если ТекущиеДанные.Количество > 0 Тогда
			СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущиеДанные.Количество);
		Иначе
			СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ЭтаФорма));
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
	
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПроизведеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	ПроверитьОбработатьИзменениеОтметкиВыполнения(ОбъектЭтап, ТекущиеДанные.Произведено);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("УстановитьПризнакИспользованияПлановойСтоимости",
		Новый Структура("Организация", Объект.Организация));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ОбъектЭтап));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущиеДанные, СтруктураДействий);
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ВыходныеИзделия);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияДатаПроизводстваПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("УстановитьПризнакИспользованияПлановойСтоимости",
		Новый Структура("Организация", Объект.Организация));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ОбъектЭтап));
	СтруктураДействий.Вставить("ПересчитатьСумму");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНаправленияВыпуска(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОбработатьПоСпецификацииПриИзменении(Элемент)
	
	ОбработатьПоСпецификацииПриИзменении("ВыходныеИзделия", Элементы.ВыходныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭтапПотребительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ЭтапПотребительНачалоВыбора(ТекущиеДанные, "ВыходныеИзделия")
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ИзделияОтмененоПриИзменении("ВыходныеИзделия", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСсылкаРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНачалоВыбораЭтапаПроизводстваВСтроке("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСсылкаРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭтапПроизводстваВСтроке("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНазначениеПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	
	//++ Устарело_Переработка24
	ДавальческаяСхемаКлиентСервер.ДобавитьДействиеЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(
		ЭтотОбъект, СтруктураДействий);
	//-- Устарело_Переработка24
	
	Если ЗначениеЗаполнено(СтруктураДействий) Тогда
	
		ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
			
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТолькоПросмотр ИЛИ ТекущиеДанные.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если (Поле = Элементы.ПобочныеИзделияСерия 
			ИЛИ Поле = Элементы.ПобочныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ПобочныеИзделия");
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПередУдалением(Элемент, Отказ)
	
	Если Не ПроверитьСтрокиТабличнойЧастиПередУдалением("ПобочныеИзделия", Отказ) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	ОбработкаСтрокиПриНачалеРедактирования("ПобочныеИзделия", НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.Произведено = Ложь;
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
		
		Если Копирование Тогда
			// Настройка счетов учета.
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		ВнутренняяПереработкаКлиентСервер.ДобавитьДействиеЗаполнитьВладелецИзделияДоступен(ЭтотОбъект, СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
				ЭтотОбъект, ТекущиеДанные, "ПобочныеИзделия", НоваяСтрока, Копирование); 
	
	ЗаполнитьСписокВыбораВладельцевИзделия(ЭтотОбъект);
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ПобочныеИзделия, ЭтотОбъект);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ("ПобочныеИзделия", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия);
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПобочныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ПобочныеИзделия", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ПобочныеИзделия");

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ПобочныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ПобочныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ПобочныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ПобочныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ТекущиеДанные.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущиеДанные.Количество);
	Иначе
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ОбъектЭтап));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПроизведеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	ПроверитьОбработатьИзменениеОтметкиВыполнения(ОбъектЭтап, ТекущиеДанные.Произведено);
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущиеДанные, СтруктураДействий);
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ПобочныеИзделия);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ОбъектЭтап));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ИзделияЭтапаЦенаПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ИзделияЭтапаСуммаПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНаправленияВыпуска(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОбработатьПоСпецификацииПриИзменении(Элемент)
	
	ОбработатьПоСпецификацииПриИзменении("ПобочныеИзделия", Элементы.ПобочныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЭтапПотребительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ЭтапПотребительНачалоВыбора(ТекущиеДанные, "ПобочныеИзделия")
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ИзделияОтмененоПриИзменении("ПобочныеИзделия", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСсылкаРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбработатьНачалоВыбораЭтапаПроизводстваВСтроке("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСсылкаРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭтапПроизводстваВСтроке("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНазначениеПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	
	//++ Устарело_Переработка24
	ДавальческаяСхемаКлиентСервер.ДобавитьДействиеЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(
		ЭтотОбъект, СтруктураДействий);
	//-- Устарело_Переработка24
	
	ВнутренняяПереработкаКлиентСервер.ДобавитьДействиеЗаполнитьВладелецИзделияДоступен(ЭтотОбъект, СтруктураДействий);
	
	Если ЗначениеЗаполнено(СтруктураДействий) Тогда
	
		ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
			
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбеспечение

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Элементы.ОбеспечениеМатериаламиИРаботами.Выбор");
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Поле = Элементы.ОбеспечениеМатериаламиИРаботамиДоступно И НЕ ТолькоПросмотр И НЕ ТекущиеДанные.ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбеспечениеМатериаламиИРаботамиВыборДоступно(ТекущиеДанные);
		
	ИначеЕсли Поле = Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала И НЕ ТолькоПросмотр И НЕ ТекущиеДанные.ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ПроверитьЗаблокироватьДокументы() Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьПодборАналогов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОбеспечениеМатериаламиИРаботами")
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ОбеспечениеМатериаламиИРаботами, ЭтотОбъект);
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ОбработкаСтрокиПриНачалеРедактирования("ОбеспечениеМатериаламиИРаботами", НоваяСтрока, Копирование);
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаПриНачалеРедактирования(
		ЭтаФорма,
		ТекущиеДанные,
		НоваяСтрока,
		Копирование);
	
	СкладыКлиент.ОбновитьКешированныеЗначения(
		Элемент, 
		КэшированныеЗначения, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, 
		Копирование);
	
	СтруктураДействий = Новый Структура();
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"Доступно",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если НоваяСтрока Тогда
		УправлениеДаннымиОбИзделияхКлиент.ОчиститьРеквизитыНабораВСтроке(ТекущиеДанные);
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНазначенийОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ПоказатьНормативыМатериалы И ТекущиеДанные <> Неопределено Тогда
		
		МассивДанных = Новый Массив;
		ДанныеСтроки = Новый Структура("Этап,Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		МассивДанных.Добавить(ДанныеСтроки);
		Нормативы = ПолучитьНормативыПриИзмененииСтрок("ОбеспечениеМатериаламиИРаботами", МассивДанных, АдресХранилищаНормативы);
		ТекущиеДанные.Норматив = Нормативы[0];
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОбеспечениеМатериаламиИРаботами");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПередУдалением(Элемент, Отказ)
	
	Если Не ПроверитьСтрокиТабличнойЧастиПередУдалением("ОбеспечениеМатериаламиИРаботами", Отказ) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПередУдалениемСтрокВходящихВНаборы();
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПослеУдаления(Элемент)
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
			Объект.ОбеспечениеМатериаламиИРаботами, 
			ДатаОтгрузкиОбязательна, 
			СкладОбязателен);
			
	ОбеспечениеМатериаламиИРаботамиПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСкладПриИзменении(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
		
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПроизводитсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	
	ТекущиеДанные.Спецификация = Неопределено;
	Если ТекущиеДанные.Производится Тогда
		СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
			Объект,
			ТекущиеДанные,
			ПараметрыВыбораСпецификаций.ОбеспечениеМатериаламиИРаботами);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	КонецЕсли;
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	
	СтруктураДействий.Вставить(
		"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
		ОбъектЭтап.ПараметрыЗаполненияНазначений);
		
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("ЗаказНаПроизводство",           ОбъектЭтап.Распоряжение);
	ПараметрыМетода.Вставить("Подразделение",                 ОбъектЭтап.Подразделение);
	ПараметрыМетода.Вставить("Ссылка",                        ОбъектЭтап.Ссылка);
	ПараметрыМетода.Вставить("Статус",                        ОбъектЭтап.Статус);
	ПараметрыМетода.Вставить("ЗаказПереработчику",            ОбъектЭтап.ЗаказПереработчику);
	ПараметрыМетода.Вставить("ПараметрыУказанияСерий",        ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	ПараметрыМетода.Вставить("Форма",                         ЭтотОбъект);
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
		СтруктураДействий,
		ПараметрыМетода,
		ТекущиеДанные);
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ЗаполнитьНазначениеОбеспеченияРедактирование(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСпецификацияПриИзменении(
		ЭтотОбъект,
		ОбъектЭтап,
		ТекущиеДанные,
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура();
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСсылкаРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНачалоВыбораЭтапаПроизводстваВСтроке("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСсылкаРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭтапПроизводстваВСтроке("ОбеспечениеМатериаламиИРаботами");
	
	ЗаполнитьСписокВыбораНазначенийОбеспечения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Склад);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияОбработкаВыбора(
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные,
		ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзменении(Элемент)
	
	Перем ПараметрыФормы;
	Если ОбеспечениеВДокументахКлиент.ОткрытьФормуВыбораСкладаИСерий(ЭтотОбъект) Тогда
		ВариантПолученияПараметров = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия();
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ВариантПолученияПараметров); // вызов сервера
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерии",
		Ложь,
		"ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиОбособленноПриИзменении(Элемент)
	
	Строка = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ОбеспечениеВДокументахКлиент.ОбособленноПриИзменении(Строка);
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьНазначениеВЭтапеПроизводства");
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияПриИзменении(Элемент)
	
	Строка = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьНазначениеВЭтапеПроизводства");
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов());
	
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыйМассив = Новый Массив();
	
	НовыйПараметр = Новый ПараметрВыбора("НесколькоСкладов", Истина);
	НовыйМассив.Добавить(НовыйПараметр);
	
	// Недоступен вариант обеспечения Резервировать по мере поступления
	Если Объект.ДинамическаяСтруктура Тогда
		МассивДействий = ОбеспечениеВДокументахКлиентСервер.ДоступныеДействияДляВыбораОбеспеченияВСтрокеПоУмолчанию();
		Индекс = МассивДействий.Найти(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
		Если Индекс <> Неопределено Тогда
			МассивДействий.Удалить(Индекс);
		КонецЕсли;
		
		ДопустимыеДействия = Новый ФиксированныйМассив(МассивДействий);
		НовыйПараметр = Новый ПараметрВыбора("ДопустимыеДействия", ДопустимыеДействия);
		
		НовыйМассив.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактированиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ВыбранноеЗначение = Неопределено
			Или ВыбранноеЗначение = ТекущиеДанные.СсылкаНазначение Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные.НазначениеОбеспечения = ТекущиеДанные.СсылкаНазначение;
		ТекущиеДанные.НазначениеОбеспеченияРедактирование = ТекущиеДанные.НаименованиеЭтапа;
	Иначе
		ТекущиеДанные.НазначениеОбеспечения = ВыбранноеЗначение;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьНазначениеВЭтапеПроизводства");
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ТекущиеДанные.НазначениеОбеспечения = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьНазначениеВЭтапеПроизводства");
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"ДоступноВДругихСтроках",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактированиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Не ТекущиеДанные.НазначениеОбеспечения.Пустая() Тогда
		Если НазначениеСуществует(ТекущиеДанные.НазначениеОбеспечения) Тогда
			ПоказатьЗначение(, ТекущиеДанные.НазначениеОбеспечения);
		Иначе
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Назначение еще не записано.';
																	|en = 'Assignment is not saved.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Для каждого Параметр Из Элементы.ОбеспечениеМатериаламиИРаботамиНазначениеОбеспечения.ПараметрыВыбора Цикл
		ПараметрыФормы.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	Для каждого Связь Из Элементы.ОбеспечениеМатериаламиИРаботамиНазначениеОбеспечения.СвязиПараметровВыбора Цикл
		Значение = ЭтотОбъект;
		Для каждого Поле Из СтрРазделить(Связь.ПутьКДанным, ".") Цикл
			Значение = Значение[Поле];
		КонецЦикла;
		ПараметрыФормы.Вставить(Связь.Имя, Значение);
	КонецЦикла;
	
	ОткрытьФорму("Справочник.Назначения.Форма.ФормаВыбораНазначений", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРаботПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПередУдалением(Элемент, Отказ)
	
	Если Не ПроверитьСтрокиТабличнойЧастиПередУдалением("РасходМатериаловИРабот", Отказ) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбработкаСтрокиПриНачалеРедактирования("РасходМатериаловИРабот", НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	Если Не ОтменаРедактирования Тогда
		ПроверитьОбработатьИзменениеОтметкиВыполнения(ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка), Истина);
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.РасходМатериаловИРабот, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("РасходМатериаловИРабот", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСсылкаРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНачалоВыбораЭтапаПроизводстваВСтроке("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСсылкаРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьЭтапПроизводстваВСтроке("РасходМатериаловИРабот");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭкономияМатериалов

&НаКлиенте
Процедура ЭкономияМатериаловПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если ТолькоПросмотр ИЛИ ТекущиеДанные.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПередУдалением(Элемент, Отказ)
	
	Если Не ПроверитьСтрокиТабличнойЧастиПередУдалением("ЭкономияМатериалов", Отказ) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	ОбработкаСтрокиПриНачалеРедактирования("ЭкономияМатериалов", НоваяСтрока, Копирование);
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	
	УправлениеПроизводствомКлиент.ЭкономияМатериаловПриНачалеРедактирования(
		ЭтаФорма,
		ОбъектЭтап,
		ТекущиеДанные,
		НоваяСтрока,
		Копирование);
	
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ЭкономияМатериалов, Копирование);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			"ЭкономияМатериалов", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ЭкономияМатериалов);
		
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		ПроверитьОбработатьИзменениеОтметкиВыполнения(ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка), Истина);
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭкономияМатериалов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ЭкономияМатериалов", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ЭкономияМатериалов, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ЭкономияМатериалов", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловДействияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ЭкономияМатериаловДействиеПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПолучательПриИзменении(СтрокаТабличнойЧасти)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСсылкаРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНачалоВыбораЭтапаПроизводстваВСтроке("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСсылкаРедактированиеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОчиститьЭтапПроизводстваВСтроке("ЭкономияМатериалов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверитьЗаблокироватьДокументы(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередНачаломИзменения(Элемент, Отказ)
	
	ПроверитьЗаблокироватьДокументы(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередУдалением(Элемент, Отказ)
	
	Если Не ПроверитьСтрокиТабличнойЧастиПередУдалением("Трудозатраты", Отказ) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОбработкаСтрокиПриНачалеРедактирования("Трудозатраты", НоваяСтрока, Копирование);
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
		ТекущиеДанные.КлючВидРабот = Неопределено;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Выполнено = Ложь;
		ТекущиеДанные.ДатаВыполнения = '000101010000';
	КонецЕсли;
	
	ИспользуетсяУчетТрудозатратВРазрезеСотрудников = ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам)
		И (ТекущиеДанные.ДатаВыполнения >= НачалоУчетаТрудозатратПоСотрудникам
		ИЛИ ?(ЗначениеЗаполнено(ОбъектЭтап.ФактическоеНачалоЭтапа), ОбъектЭтап.ФактическоеНачалоЭтапа,
								ОбъектЭтап.Дата) >= НачалоУчетаТрудозатратПоСотрудникам);
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
		ТекущиеДанные.Исполнитель,
		ОбъектЭтап.ИспользоватьБригадныеНаряды,
		ИспользуетсяУчетТрудозатратВРазрезеСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ПоказатьНормативыТрудозатраты И ТекущиеДанные <> Неопределено Тогда
		
		МассивДанных = Новый Массив;
		ДанныеСтроки = Новый Структура("Этап,ВидРабот");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		МассивДанных.Добавить(ДанныеСтроки);
		Нормативы = ПолучитьНормативыПриИзмененииСтрок("Трудозатраты", МассивДанных, АдресХранилищаНормативы);
		ТекущиеДанные.Норматив = Нормативы[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнительНачалоВыбораЗавершение", ЭтотОбъект);

	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		ОбъектЭтап.Организация,
		ТекущиеДанные.Подразделение,
		ТекущиеДанные.Исполнитель,
		ТекущиеДанные.ДатаВыполнения,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
		
		Дата = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаВыполнения), ТекущиеДанные.ДатаВыполнения,
										Макс(ОбъектЭтап.ФактическоеНачалоЭтапа, ОбъектЭтап.Дата));
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, ТекущиеДанные.Подразделение, ОбъектЭтап.Организация, Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
		
		Дата = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаВыполнения), ТекущиеДанные.ДатаВыполнения,
										Макс(ОбъектЭтап.ФактическоеНачалоЭтапа, ОбъектЭтап.Дата));
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, ТекущиеДанные.Подразделение, ОбъектЭтап.Организация, Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыВыполненоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ТрудозатратыВыполненоПриИзмененииНаСервере(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ТрудозатратыВыполненоПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Объект.Трудозатраты.НайтиПоИдентификатору(Идентификатор);
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	
	Если ТекущиеДанные.Выполнено И ЗначениеЗаполнено(ОбъектЭтап.Исполнитель) Тогда
		ТекущиеДанные.Исполнитель = ОбъектЭтап.Исполнитель;
	КонецЕсли;
	
	ПроверитьОбработатьИзменениеОтметкиВыполненияНаСервере(ОбъектЭтап, ТекущиеДанные.Выполнено);

	УправлениеПроизводством.УстановитьДатуВыполненияТрудозатраты(ТекущиеДанные, ОбъектЭтап.ФактическаяДатаПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСсылкаРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНачалоВыбораЭтапаПроизводстваВСтроке("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСсылкаРедактированиеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОчиститьЭтапПроизводстваВСтроке("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено
		И ТекущиеДанные.Выполнено Тогда
		ТекущиеДанные.Выполнено = Ложь;
		ТрудозатратыВыполненоПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если Не ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Основное

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибок заполнения не обнаружено.';
								|en = 'No filling errors were detected.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеречитать(Команда)
	
	Перечитать();
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделия_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПодобратьТовары(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПодборТоваров("ВыходныеИзделия");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыходныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ЗаполнитьПолучателя(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РедактированиеПоследовательностиЭтаповПроизводства.Форма.Форма.Команда.ВыходныеИзделия_ЗаполнитьПолучателя");	
	
	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "ВыходныеИзделия");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ВыходныеИзделия");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Изделия по рассчитываемой стоимости';
													|en = 'Products by calculated cost'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ИзменитьКачество(Команда)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Команда не может быть выполнена для выбранной строки!';
										|en = 'Command cannot be executed for the selected line.'"));
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущиеДанные.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущиеДанные.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущиеДанные,
			"ВыходныеИзделия",
			ЭтотОбъект,
			СтруктураДействий);
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКачествоЗавершение", ЭтотОбъект, ОписаниеОповещения);		
	
	СкладыКлиент.ИзменитьКачество(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ВставитьСтроки(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСтрокиИзБуфераОбмена("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьВыделенныеСтроки("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкрыватьОтмененныеСтроки(Команда)
	
	ВыходныеИзделияСкрыватьОтмененныеСтроки = Не ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
	Если ВыходныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ВыходныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВыходныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВыходныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ИзменитьКачествоОтменитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ВыходныеИзделия, ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ВыходныеИзделия", 
			ЭтотОбъект,
			СтруктураДействий);
			
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ВыходныеИзделия");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ЗаполнитьЦены(Команда)
	
	ЗаполнитьЦеныПоВидуЦен("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ЗаполнитьЦеныПоКалькуляции(Команда)

	ВыделенныеСтроки = ПолучитьВыделенныеВСпискеСтроки("ВыходныеИзделия");
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Идентификаторы = Новый Массив;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.ВыходныеИзделия.НайтиПоИдентификатору(Строка);
		Если (ДанныеСтроки.Произведено ИЛИ ДанныеСтроки.Цена <> 0) 
			И ДанныеСтроки.ИспользоватьПлановуюСтоимость Тогда
			
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
			Идентификаторы.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенных строках отсутствуют позиции, доступные для заполнения по калькуляции.';
								|en = 'There are no items available for population by costing in the selected lines.'");
		ПоказатьПредупреждение( , ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Валюта = Неопределено;
	Для каждого Ссылка Из МассивСсылок Цикл
		
		ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, Ссылка);
		
		Если Валюта = Неопределено Тогда
			Валюта = ОбъектЭтап.Валюта;
			Продолжить;
		КонецЕсли;
		
		Если Валюта <> ОбъектЭтап.Валюта Тогда
			
			ТекстСообщения = НСтр("ru = 'В выделенных строках используются различные валюты, заполнение не возможно.';
									|en = 'Selected lines use different currencies, filling is not possible.'");
			ПоказатьПредупреждение( , ТекстСообщения);
			
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", Идентификаторы);
	ДополнительныеПараметры.Вставить("Валюта", Валюта);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Состояние", 
		ПредопределенноеЗначение("Перечисление.СостоянияРасчетаПлановойКалькуляции.Рассчитана"));
	
	ОткрытьФорму("Документ.ПлановаяКалькуляция2_2.Форма.ФормаВыбора", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("ЗавершениеВыбораПлановойКалькуляции", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделия_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ПодобратьТовары(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПодборТоваров("ПобочныеИзделия");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПобочныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьПолучателя(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РедактированиеПоследовательностиЭтаповПроизводства.Форма.Форма.Команда.ПобочныеИзделия_ЗаполнитьПолучателя");	
	
	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "ПобочныеИзделия");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ПобочныеИзделия");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Побочный и промежуточный выход по фиксированной стоимости';
													|en = 'Side and intermediate product at fixed cost'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ИзменитьКачество(Команда)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Команда не может быть выполнена для выбранной строки!';
										|en = 'Command cannot be executed for the selected line.'"));
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущиеДанные.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущиеДанные.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущиеДанные, 
			"ПобочныеИзделия", 
			ЭтотОбъект,
			СтруктураДействий);
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКачествоЗавершение", ЭтотОбъект, ОписаниеОповещения);		
	
	СкладыКлиент.ИзменитьКачество(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьЦены(Команда)
	
	ЗаполнитьЦеныПоВидуЦен("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ВставитьСтроки(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСтрокиИзБуфераОбмена("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьВыделенныеСтроки("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_СкрыватьОтмененныеСтроки(Команда)
	
	ПобочныеИзделияСкрыватьОтмененныеСтроки = Не ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
	Если ПобочныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ПобочныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ПобочныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПобочныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ИзменитьКачествоОтменитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ПобочныеИзделия, ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ПобочныеИзделия", 
			ЭтотОбъект,
			СтруктураДействий);
			
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ПобочныеИзделия");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("ПобочныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура Обеспечение_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ВставитьСтроки(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСтрокиИзБуфераОбмена("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьПоСпецификации(Команда)

	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбеспечениеМатериаламиИРаботами.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по спецификации?';
							|en = 'Refill the table according to BOM?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Обеспечение_ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		Обеспечение_ЗаполнитьПоСпецификацииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьПоСпецификацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьОбеспечениеПоСпецификацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСкладВВыделенныхСтроках(Команда)

	ВыделенныеСтроки = ПолучитьВыделенныеВСпискеСтроки("ОбеспечениеМатериаламиИРаботами");
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
								Новый Структура("Ссылка", ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка")),
								Объект.ОбеспечениеМатериаламиИРаботами,
								НСтр("ru = 'Обеспечение';
									|en = 'Supply'"),
								ВыделенныеСтроки) Тогда
		
		Отбор = Новый Структура("ЭтоГруппа", Ложь);
		СтруктураПараметров = Новый Структура("Отбор, ВыборГруппИЭлементов", Отбор, ИспользованиеГруппИЭлементов.Элементы);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Обеспечение_ЗаполнитьСкладВВыделенныхСтрокахЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки));
		
		ОткрытьФорму("Справочник.Склады.ФормаВыбора",
			СтруктураПараметров,
			ЭтаФорма,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСкладВВыделенныхСтрокахЗавершение(ВыбранныйСклад, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
		
		ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
		СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьТовары(Команда)

	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПодборТоваров("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьПоСпецификации(Команда)

	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ДанныеПоНоменклатуре = ДанныеПоНоменклатуреКонструктор();
		
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеПартииПроизводства,
		"Распоряжение, НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности, Спецификация, Номенклатура, Характеристика, Количество");
	
	ПараметрыФормы.Вставить("ДанныеПоНоменклатуре", ДанныеПоНоменклатуре);
	
	ПараметрыФормы.Вставить("ПоказыватьКоличествоПодобрано", Истина);
	ПараметрыФормы.Вставить("ЗаголовокКолонкиКоличествоПодобрано", НСтр("ru = 'В этапе';
																		|en = 'In stage'"));
	ПараметрыФормы.Вставить("СтруктураПоискаПодобранныеМатериалы", Новый Структура("Этап,Номенклатура,Характеристика"));
	ПараметрыФормы.Вставить("АдресПодобранныеМатериалы", ПоместитьМатериалыДляПодбораПоСпецификацииВХранилище());
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ИспользоватьПроизводствоПоСпецификации", Не ДанныеПартииПроизводства.ДинамическаяСтруктура);
	ПараметрыФормы.Вставить("ПолучитьДанныеНаборов", Ложь);
	ПараметрыФормы.Вставить("Основание", ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ПолучитьПромежуточныйВыпуск", Истина);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ПодборМатериаловПоСпецификации",
			ПараметрыФормы,
			ЭтотОбъект, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьНормативы(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ПоказатьНормативыМатериалы = НЕ ПоказатьНормативыМатериалы;
	ПоказатьНормативыПриИзмененииНаСервере("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьАналоги(Команда)
	
	ПоказатьАналоги = Не ПоказатьАналоги;
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьАналоги");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьАналоги(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РедактированиеПоследовательностиЭтаповПроизводства.Форма.Форма.Команда.Обеспечение_ПодобратьАналоги");

	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПодборАналогов();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаменитьАналогами(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьНаАналоги();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСерииПоFEFO(Команда)
	
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		
		НоменклатураКлиент.ПредупредитьОбОтсутствииСтрокЗаполняемыхПоFEFO();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		
		НоменклатураКлиент.ПредупредитьОбОтсутствииСтрокЗаполняемыхПоFEFO();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СкрыватьОтмененныеСтроки(Команда)
	
	ОбеспечениеСкрыватьОтмененныеСтроки =  Не ОбеспечениеСкрыватьОтмененныеСтроки;
	
	Если ОбеспечениеСкрыватьОтмененныеСтроки Тогда
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Обеспечение_СкрыватьОтмененныеСтроки.Пометка = ОбеспечениеСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_ОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыключитьОбособленноеОбеспечение(Команда)
	
	ОбеспечениеУстановитьДействие("ФЛАГ_НЕОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиКОбеспечению(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеРезервироватьПоМереПоступления(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНеОбеспечивать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиОтгрузить(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_ОТГРУЗИТЬ_ПРИОРИТЕТНО_ОБОСОБЛЕННО");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиРезервировать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ_ПРИОРИТЕТНО_ОБОСОБЛЕННО");
	
КонецПроцедуры

#КонецОбласти

#Область РасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРабот_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ВставитьСтроки(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСтрокиИзБуфераОбмена("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспечения(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасходМатериаловИРабот.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по данным обеспечения
									|с учетом неизрасходованных материалов?';
									|en = 'Refill the table according to supply data 
									|considering unused materials?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьДатуРасхода(Команда)
	
	ВыделенныеСтроки = ПолучитьВыделенныеВСпискеСтроки("РасходМатериаловИРабот");
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РасходМатериаловИРабот_ЗаполнитьДатуРасходаЗавершение", ЭтотОбъект, ВыделенныеСтроки);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			НачалоДняТекущаяДатаСеанса(), 
			НСтр("ru = 'Введите дату расхода материалов (работ)';
				|en = 'Enter the material (work) consumption date'"), 
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьДатуРасходаЗавершение(ВыбраннаяДата, ВыделенныеСтроки) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = Объект.РасходМатериаловИРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаРасхода = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПодобратьТовары(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПодборТоваров("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ДополнитьПоДаннымОбеспечения(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере(1);
	
КонецПроцедуры


#КонецОбласти

#Область ЭкономияМатериалов

&НаКлиенте
Процедура ЭкономияМатериалов_СкопироватьСтроки(Команда)

	СкопироватьСтрокиТЧ("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ВставитьСтроки(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСтрокиИзБуфераОбмена("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьНеизрасходованными(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭкономияМатериалов.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть?';
							|en = 'Refill the table?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЭкономияМатериалов_ЗаполнитьНеизрасходованнымиМатериаламиЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		ЭкономияМатериалов_ЗаполнитьНеизрасходованнымиМатериаламиЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьНеизрасходованнымиМатериаламиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНеизрасходованнымиМатериаламиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьСтатьюРасходов(Команда)
	
	ВыделенныеСтроки = ПолучитьВыделенныеВСпискеСтроки("ЭкономияМатериалов");
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЭкономияМатериалов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать материалы, для которых требуется заполнить статью расходов.';
									|en = 'Select materials to fill in the expense item for.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.СписатьНаРасходы Тогда
			Идентификаторы.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'В выделенных строках отсутствуют материалы, для которых требуется заполнить статью расходов.';
									|en = 'There are no materials in the selected lines for which expense item population is required.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДоходыИРасходыКлиент.ЗаполнитьСтатьюИАналитикуВВыделенныхСтроках(ЭтотОбъект, Элементы.ЭкономияМатериаловСтатьяРасходов, ВыделенныеСтроки);
	
	Идентификаторы = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.СписатьНаРасходы Тогда
			Идентификаторы.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьДату(Команда)
	
	ВыделенныеСтроки = ПолучитьВыделенныеВСпискеСтроки("ЭкономияМатериалов");
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЭкономияМатериалов_ЗаполнитьДатуЗавершение", ЭтотОбъект, ВыделенныеСтроки);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			НачалоДняТекущаяДатаСеанса(), 
			НСтр("ru = 'Введите дату передачи (списания)';
				|en = 'Enter transfer (write-off) date'"),
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьДатуЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт

	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаОперации = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ЭкономияМатериалов");
	
КонецПроцедуры

#КонецОбласти

#Область Трудозатраты

&НаКлиенте
Процедура Трудозатраты_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ВставитьСтроки(Команда)
	
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьИсполнителейВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = ПолучитьВыделенныеВСпискеСтроки("Трудозатраты");
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.Трудозатраты.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ДанныеСтроки.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("Трудозатраты_ЗаполнитьИсполнителейВВыделенныхСтрокахЗавершение", ЭтотОбъект, Новый Структура("Идентификаторы", ВыделенныеСтроки));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		ОбъектЭтап.Организация,
		ДанныеСтроки.Подразделение,
		ДанныеСтроки.Исполнитель,
		ДанныеСтроки.ДатаВыполнения,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьИсполнителейВВыделенныхСтрокахЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Для каждого ИдентификаторСтроки Из ДополнительныеПараметры.Идентификаторы Цикл
			
			ДанныеСтроки = Объект.Трудозатраты.НайтиПоИдентификатору(ИдентификаторСтроки);
			ДанныеСтроки.Исполнитель = ВыбранноеЗначение;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьСтатьюКалькуляцииВВыделенныхСтроках(Команда)
	
	ЗаполнитьСтатьюКалькуляции("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьПоСпецификации(Команда)

	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Трудозатраты.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по спецификации?';
							|en = 'Refill the table according to BOM?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Трудозатраты_ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		Трудозатраты_ЗаполнитьПоСпецификацииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьПоСпецификацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТрудозатратыПоСпецификацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ПоказатьНормативы(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ПоказатьНормативыТрудозатраты = НЕ ПоказатьНормативыТрудозатраты;
	ПоказатьНормативыПриИзмененииНаСервере("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкрыватьОтмененныеСтроки(Команда)
	
	ТрудозатратыСкрыватьОтмененныеСтроки =  Не ТрудозатратыСкрыватьОтмененныеСтроки;
	
	Если ТрудозатратыСкрыватьОтмененныеСтроки Тогда
		Элементы.Трудозатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Трудозатраты.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Трудозатраты_СкрыватьОтмененныеСтроки.Пометка = ТрудозатратыСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Этапы

&НаСервере
Процедура ПриДобавленииНовогоДокумента(СсылкаНового)
	
	ЗначенияЗаполненияНовогоЭтапа = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
		Объект.Распоряжение,
		Объект.НазначениеПродукция,
		Объект.ПартияПроизводства,
		Объект.ТипПроизводственногоПроцесса,
		Объект.Спецификация);
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СсылкаНового);
	ЗаполнитьЗначенияСвойств(ОбъектЭтап, ЗначенияЗаполненияНовогоЭтапа);
	
	ОбъектЭтап.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	ОбъектЭтап.СпособРаспределенияЗатратНаВыходныеИзделия = СпособРаспределенияЗатратНаВыходныеИзделия;
	ОбъектЭтап.ЕдиницаИзмеренияДлительностиЭтапа = Перечисления.ЕдиницыИзмеренияВремени.День;
	ОбъектЭтап.Назначение = Справочники.Назначения.ПолучитьСсылку();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Объект.ОсновноеИзделиеНоменклатура);
	СтруктураПоиска.Вставить("Характеристика", Объект.ОсновноеИзделиеХарактеристика);
	СтруктураПоиска.Вставить("Отменено", Ложь);
	
	НайденныеСтроки = Новый Массив;
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт
			ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		НайденныеСтроки = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	ИначеЕсли Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		НайденныеСтроки = Объект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Если НайденныеСтроки.ВГраница() <> -1 Тогда
		
		Упаковка = Неопределено;
		Количество = 0;
		КоличествоУпаковок = 0;
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			Если Количество = 0 Тогда
				Упаковка = Строка.Упаковка;
			ИначеЕсли Упаковка <> Неопределено
				И Упаковка <> Строка.Упаковка Тогда
				Упаковка = Неопределено;
			КонецЕсли;
			
			Количество = Количество + Строка.Количество;
			КоличествоУпаковок = КоличествоУпаковок + Строка.КоличествоУпаковок;
			
		КонецЦикла;
		
		ОбъектЭтап.КоличествоУпаковокПлан = ?(Упаковка = Неопределено, Количество, КоличествоУпаковок);
		ОбъектЭтап.УпаковкаПлан = Упаковка;
		ОбъектЭтап.УпаковкаФакт = Упаковка;
		ОбъектЭтап.УпаковкаОтменено = Упаковка;
		
	КонецЕсли;
	
	ПеренумероватьЭтапыПриДобавленииНовойСтроки(
		ОбъектЭтап,
		Объект.Этапы);
	
	ОбъектЭтап.ПараметрыЗаполненияНазначений = ОбеспечениеПроизводства.ПараметрыДействияЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(
		ОбъектЭтап, Объект.ВыходныеИзделия);
	ОбеспечениеПроизводства.ЗаполнитьСписокВыбораНазначенийВЭтапеПроизводства(
		ОбъектЭтап, Объект.ВыходныеИзделия, ОбъектЭтап.СписокВыбораНазначений);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьЭтапыПриДобавленииНовойСтроки(НоваяСтрока, СписокЭтапов)
	
	НовыйНомер = 1;
	Для каждого Строка Из СписокЭтапов Цикл
		НовыйНомер = Макс(НовыйНомер, Строка.НомерЭтапа + 1);
	КонецЦикла;
	
	НоваяСтрока.НомерЭтапа           = НовыйНомер;
	НоваяСтрока.НомерСледующегоЭтапа = ?(НовыйНомер > 1, НовыйНомер + 1, 0);
	
	Если НовыйНомер = 2 И СписокЭтапов.Количество() = 2 Тогда
		Для каждого Строка Из СписокЭтапов Цикл
			Если Строка.НомерЭтапа = 1 И Строка.НомерСледующегоЭтапа = 0 Тогда
				Строка.НомерСледующегоЭтапа = НовыйНомер;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинки(Строка)
	
	Возврат ?(Строка.ЭтоНовый, 0, 1);
	
КонецФункции

&НаСервере
Функция ТребуетсяЗадатьВопросПередУдалениемЭтапов(ВыделенныеСтроки)
	
	СписокТЧ = СписокВложенныхТабличныхЧастей(Ложь);
	
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Этапы.НайтиПоИдентификатору(Идентификатор);
		
		Отбор = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
		
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			
			Если Объект[ИмяТЧ].НайтиСтроки(Отбор).ВГраница() <> -1 Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросПередУдалениемЭтапов(ВыделенныеСтроки)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПередУдалениемЭтапов", ЭтотОбъект, ВыделенныеСтроки);
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Выбранные этапы используются, продолжить?';
							|en = 'Selected stages are used. Continue?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Выбранный этап используется, продолжить?';
							|en = 'The selected stage is in use. Continue?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПередУдалениемЭтапов(ОтветПользователя, ВыделенныеСтроки) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		УдалитьЭтапыИзСписка(ВыделенныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭтапыИзСписка(ВыделенныеСтроки)
	
	Модифицированность = Истина;
	СписокТЧ = СписокВложенныхТабличныхЧастей();
	
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Этапы.НайтиПоИдентификатору(Идентификатор);
		
		Отбор = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
		
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			
			НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Отбор);
			
			Для каждого Строка Из НайденныеСтроки Цикл
				Объект[ИмяТЧ].Удалить(Строка);
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДанныеСтроки.ЭтоНовый Тогда
			Объект.Этапы.Удалить(ДанныеСтроки);
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.ПометкаУдаления = Истина;
		
	КонецЦикла;
	
	ЗаполнитьСсылкуПоУмолчанию();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

&НаСервере
Процедура ПроверитьРеквизитыШапки(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ОсновноеИзделиеХарактеристика)
		И СтруктураДанныхОсновноеИзделие.ХарактеристикиИспользуются Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Характеристика';
																										|en = 'Variant'"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"ОсновноеИзделиеХарактеристика",
			"Объект",
			Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Способ распределения затрат';
																										|en = 'Costs allocation method'"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"СпособРаспределенияЗатратНаВыходныеИзделия",,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПроизводственныйПроцесс(МассивНепроверяемыхРеквизитов, Отказ)
	
	МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	
	ИмяСписка = НСтр("ru = 'Производственный процесс';
					|en = 'Production process'");
	
	Строки = Объект.Этапы.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь));
	
	Для каждого Строка Из Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.НомерЭтапа) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Номер этапа';
																												|en = 'Stage number'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("Этапы", Строка.НомерСтроки, "НомерЭтапа");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
		Если Строка.НомерСледующегоЭтапа <> 0 И Строка.НомерЭтапа >= Строка.НомерСледующегоЭтапа Тогда
			
			ТекстСообщения = НСтр("ru = 'Номер следующего этапа должен быть больше номера этапа.';
									|en = 'Next stage number should be more than the stage number.'");
			Поле = ПутьКТабличнойЧасти("Этапы", Строка.НомерСтроки, "НомерСледующегоЭтапа");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.НаименованиеРедактирование) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Наименование';
																												|en = 'Description'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("Этапы", Строка.НомерСтроки, "НаименованиеРедактирование");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.Подразделение) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Подразделение';
																												|en = 'Business unit'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("Этапы", Строка.НомерСтроки, "Подразделение");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
		Если Строка.ИспользоватьПооперационноеУправление Тогда
			
			Если Не ЗначениеЗаполнено(Строка.КоэффициентМаршрутнойКарты)
				И НЕ Строка.МаршрутнаяКарта.Пустая() Тогда
			
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Коэффициент';
																													|en = 'Coefficient'"), Строка.НомерСтроки, ИмяСписка);
				Поле = ПутьКТабличнойЧасти("Этапы", Строка.НомерСтроки, "КоэффициентМаршрутнойКарты");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					Поле,,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Строка.КоличествоУпаковокПлан = 0
			И Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Запланировано';
																												|en = 'Scheduled'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("Этапы", Строка.НомерСтроки, "КоличествоУпаковокПлан");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьПоследовательностьЭтапов(Отказ);
	
	ПроверитьПорядокВыпускаПромежуточныхПолуфабрикатов(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПоследовательностьЭтапов(Отказ)

	СтруктураПроверок = Новый Структура;
	
	СтруктураПроверок.Вставить("НетПоследнейОперации", НСтр("ru = 'Отсутствует последний этап.';
															|en = 'The last stage is missing.'"));
	СтруктураПроверок.Вставить("НетСледующейОперации", НСтр("ru = 'Этап ""%1"" ссылается на несуществующий этап.';
															|en = 'Stage ""%1"" refers to a non-existing stage.'"));
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт
		Тогда
		СтруктураПроверок.Вставить("НесколькоПоследнихОпераций", НСтр("ru = 'Не может быть несколько последних этапов.';
																		|en = 'There cannot be more than one last stage.'"));
	КонецЕсли;
	
	Отбор = Новый Структура("ПометкаУдаления", Ложь);
	
	ИменаКолонок = "НомерЭтапа, НомерСледующегоЭтапа, НаименованиеРедактирование";
	НовыеИменаКолонок = Новый Структура(ИменаКолонок, "НомерОперации", "НомерСледующейОперации", "Представление");
	
	НовыеКолонки = Новый Структура("Операция, НетСледующейОперации, ПолеНомерСледующейОперации",,Ложь,"");
	
	СписокОпераций = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(Объект.Этапы, Отбор, ИменаКолонок, НовыеКолонки, НовыеИменаКолонок);
	
	Отбор = Новый Структура("НомерОперации");
	
	Для каждого Строка Из СписокОпераций Цикл
		
		Если ЗначениеЗаполнено(Строка.НомерСледующейОперации) Тогда
			
			Отбор.НомерОперации = Строка.НомерСледующейОперации;
			
			Если СписокОпераций.НайтиСтроки(Отбор).ВГраница() = -1 Тогда
				
				Строка.НетСледующейОперации = Истина;
				Строка.ПолеНомерСледующейОперации = "ЦепочкаЭтапов[" + СписокОпераций.Индекс(Строка) + "].НомерСледующегоЭтапа";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОшибки = Не РедакторПроизводственногоПроцесса.ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПорядокВыпускаПромежуточныхПолуфабрикатов(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Этапы.Ссылка КАК Ссылка,
	|	Этапы.НомерЭтапа КАК НомерЭтапа
	|
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	&Этапы КАК Этапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромежуточныеПолуфабрикаты.Ссылка КАК ТекущийЭтап,
	|	ЭтапыПотребители.Ссылка           КАК СледующийЭтап
	|
	|ПОМЕСТИТЬ ВТСвязи
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПромежуточныеПолуфабрикаты
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПотребители
	|			ПО ПромежуточныеПолуфабрикаты.Назначение = ЭтапыПотребители.Назначение
	|
	|ГДЕ
	|	ПромежуточныеПолуфабрикаты.Ссылка.Проведен
	|	
	|	И (ПромежуточныеПолуфабрикаты.Ссылка, ЭтапыПотребители.Ссылка) В
	|		(ВЫБРАТЬ
	|			Т.Ссылка,
	|			Т.Ссылка
	|		ИЗ
	|			ВТЭтапы КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСвязи.ТекущийЭтап КАК Ссылка
	|ИЗ
	|	ВТСвязи КАК ВТСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапы КАК НомераЭтапов
	|			ПО ВТСвязи.ТекущийЭтап = НомераЭтапов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапы КАК НомераСледующихЭтапов
	|			ПО ВТСвязи.СледующийЭтап = НомераСледующихЭтапов.Ссылка
	|ГДЕ
	|	НомераСледующихЭтапов.НомерЭтапа < НомераЭтапов.НомерЭтапа");
	
	СписокЭтапов = Объект.Этапы.Выгрузить(Новый Структура("ЭтоНовый,ПометкаУдаления",Ложь,Ложь), "Ссылка,НомерЭтапа");
	Запрос.УстановитьПараметр("Этапы", СписокЭтапов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Строка = Объект.Этапы.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка))[0];
		
		ТекстСообщения = НСтр("ru = 'Нарушен порядок этапов. Этап, выпускающий полуфабрикаты, расположен после этапа-потребителя.';
								|en = 'Stage sequence is violated. Stage that releases semi-finished products is positioned after the consumer stage.'");
		Поле = СтрШаблон("Объект.Этапы[%1].НомерСледующегоЭтапа", Объект.Этапы.Индекс(Строка));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			Поле,,
			Отказ);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыходныеИзделия(МассивНепроверяемыхРеквизитов, Отказ)
	
	ИмяСписка = Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ТабличныеЧасти.ВыходныеИзделия.Синоним;
	
	Если (Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
			ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт
			ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка)
		И Объект.ВыходныеИзделия.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество() = 0 Тогда
		
		Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%1""';
						|en = 'No line is entered into the ""%1"" list'");
		ТекстСообщения = СтрШаблон(Шаблон, ИмяСписка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"Объект.ВыходныеИзделия",,
			Отказ);
			
		Возврат;
	КонецЕсли;
	
	ВыпускающиеЭтапы = Новый Массив;
	
	Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%1"" по этапу ""%2""';
					|en = 'No lines entered into the ""%1"" list by the ""%2"" stage'");
	Для каждого Строка Из Объект.Этапы Цикл
		
		Если Строка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.НомерСледующегоЭтапа <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура("Ссылка, Отменено", Строка.Ссылка, Ложь);
		
		Если Не Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций
			И Объект.ВыходныеИзделия.НайтиСтроки(ОтборСтрок).ВГраница() = -1 Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ИмяСписка, Строка.НаименованиеРедактирование);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Объект.ВыходныеИзделия",,
				Отказ);
			
		КонецЕсли;
		
		ВыпускающиеЭтапы.Добавить(Строка.Ссылка);
		
	КонецЦикла;
	
	Для каждого Строка Из Объект.ВыходныеИзделия Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Этап производства';
																												|en = 'Production stage'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("ВыходныеИзделия", Строка.НомерСтроки, "Ссылка");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Ссылка) И ВыпускающиеЭтапы.Найти(Строка.Ссылка) = Неопределено Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Этап производства';
																												|en = 'Production stage'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("ВыходныеИзделия", Строка.НомерСтроки, "НаименованиеЭтапа");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьДолиСтоимостиВыходныхИзделий(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПобочныеИзделия(МассивНепроверяемыхРеквизитов, Отказ)
	
	ИмяСписка = Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ТабличныеЧасти.ПобочныеИзделия.Синоним;
	
	Для каждого Строка Из Объект.ПобочныеИзделия Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Этап производства';
																												|en = 'Production stage'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("ПобочныеИзделия", Строка.НомерСтроки, "НаименованиеЭтапа");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбеспечениеМатериаламиИРаботами(МассивНепроверяемыхРеквизитов, Отказ)
	
	ИмяСписка = Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ТабличныеЧасти.ОбеспечениеМатериаламиИРаботами.Синоним;

	Если (Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
			И Объект.ОбеспечениеМатериаламиИРаботами.Количество() = 0) Тогда
		
		Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%1""';
						|en = 'No line is entered into the ""%1"" list'");
		ТекстСообщения = СтрШаблон(Шаблон, ИмяСписка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"Объект.ОбеспечениеМатериаламиИРаботами",,
			Отказ);
			
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Этап производства';
																												|en = 'Production stage'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("ОбеспечениеМатериаламиИРаботами", Строка.НомерСтроки, "НаименованиеЭтапа");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРасходМатериаловИРабот(МассивНепроверяемыхРеквизитов, Отказ)
	
	ИмяСписка = Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ТабличныеЧасти.РасходМатериаловИРабот.Синоним;
	
	Для каждого Строка Из Объект.РасходМатериаловИРабот Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Этап производства';
																												|en = 'Production stage'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("РасходМатериаловИРабот", Строка.НомерСтроки, "НаименованиеЭтапа");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЭкономияМатериалов(МассивНепроверяемыхРеквизитов, Отказ)
	
	ИмяСписка = Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ТабличныеЧасти.ЭкономияМатериалов.Синоним;
	
	Для каждого Строка Из Объект.ЭкономияМатериалов Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Этап производства';
																												|en = 'Production stage'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("ЭкономияМатериалов", Строка.НомерСтроки, "НаименованиеЭтапа");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТрудозатраты(МассивНепроверяемыхРеквизитов, Отказ)
	
	ИмяСписка = Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ТабличныеЧасти.Трудозатраты.Синоним;
	
	Для каждого Строка Из Объект.Трудозатраты Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Этап производства';
																												|en = 'Production stage'"), Строка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "НаименованиеЭтапа");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДолиСтоимостиВыходныхИзделий(Отказ)
	
	Если СпособРаспределенияЗатратНаВыходныеИзделия <> Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСписка = Элементы.ВыходныеИзделия.Заголовок;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.ДоляСтоимости КАК ДоляСтоимости
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	НЕ Таблица.Отменено
	|;
	|////////////////////////////////////////////////////////////////
	|" + ПроизводствоСервер.ТекстЗапросаПроверитьДолиСтоимостиВыходныхИзделий(ПараметрыРаспределенияЗатрат.ПоляСвязи) + "
	|");
	Запрос.УстановитьПараметр("ВыходныеИзделия", Объект.ВыходныеИзделия.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Доля стоимости';
																												|en = 'Cost share'"), Выборка.НомерСтроки, ИмяСписка);
			Поле = ПутьКТабличнойЧасти("ВыходныеИзделия", Выборка.НомерСтроки, "ДоляСтоимости");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				Поле,,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Чтение

&НаСервере
Процедура Перечитать()
	
	Модифицированность = Ложь;
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанные()
	
	ОбработкаОбъект = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.Создать();
	
	ОбработкаОбъект.Прочитать(Параметры);
	
	НеОтгружатьЧастями = Истина;
	ДатаОтгрузки = '00010101';
	Если Параметры.Свойство("Продукция") И Не Параметры.Продукция = Неопределено Тогда
		ПрочитатьПродукцию(ОбработкаОбъект, Параметры);
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ПроизводствоОднойДатой", Ложь);
	ЗначенияЗаполнения.Вставить("ДатаПроизводства", '00010101');
	ЗначенияЗаполнения.Вставить("РасходОднойДатой", Ложь);
	ЗначенияЗаполнения.Вставить("ДатаРасхода", '00010101');
	ЗначенияЗаполнения.Вставить("НеОтгружатьЧастями", Ложь);
	ЗначенияЗаполнения.Вставить("ДатаОтгрузки", '00010101');
	Для каждого Строка Из ОбработкаОбъект.Этапы Цикл
		Если Строка.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
			ИспользуетсяСтатусФормируется = Истина;
			Строка.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строка, ЗначенияЗаполнения);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если Параметры.Свойство("Продукция")
		И Не Параметры.Продукция = Неопределено Тогда
		ЗаполнитьСтатусыУказанияСерийСервер("ВыходныеИзделия,ОбеспечениеМатериаламиИРаботами");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПродукцию(ОбработкаОбъект, ПараметрыФормы)
	
	ИсточникДанных = ПараметрыФормы.Продукция;
	
	Если (ОбработкаОбъект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
			ИЛИ ОбработкаОбъект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт")
			ИЛИ ОбработкаОбъект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций")) Тогда
		Для каждого Строка Из ИсточникДанных Цикл
			ЗаполнитьЗначенияСвойств(ОбработкаОбъект.ВыходныеИзделия.Добавить(), Строка);
		КонецЦикла;
	ИначеЕсли ОбработкаОбъект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
		Для каждого Строка Из ИсточникДанных Цикл
			ЗаполнитьЗначенияСвойств(ОбработкаОбъект.ОбеспечениеМатериаламиИРаботами.Добавить(), Строка);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбработкаОбъект.ОсновноеИзделиеНоменклатура)
		И ИсточникДанных.Количество() > 0 Тогда
		ОбработкаОбъект.ОсновноеИзделиеНоменклатура = ИсточникДанных[0].Номенклатура;
		ОбработкаОбъект.ОсновноеИзделиеХарактеристика = ИсточникДанных[0].Характеристика;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособРаспределенияЗатратНаВыходныеИзделия()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Таблица.СпособРаспределенияЗатратНаВыходныеИзделия) КАК СпособРаспределенияЗатратНаВыходныеИзделия
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	Таблица.ПартияПроизводства = &ПартияПроизводства
	|	И НЕ Таблица.ПометкаУдаления
	|	И Таблица.НомерСледующегоЭтапа = 0 //ЭтоВыпускающийЭтап()
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таблица.СпособРаспределенияЗатратНаВыходныеИзделия) = 1
	|");
	Запрос.УстановитьПараметр("ПартияПроизводства", Параметры.ПартияПроизводства);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СпособРаспределенияЗатратНаВыходныеИзделия = Выборка.СпособРаспределенияЗатратНаВыходныеИзделия;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораНазначений()
	
	КешированныеЗначения1 = Новый Структура;
	КешированныеЗначения2 = Новый Структура;
	Для каждого Этап Из Объект.Этапы Цикл
		Этап.ПараметрыЗаполненияНазначений = ОбеспечениеПроизводства.ПараметрыДействияЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(
			Этап,
			Объект.ВыходныеИзделия,
			КешированныеЗначения1);
		ОбеспечениеПроизводства.ЗаполнитьСписокВыбораНазначенийВЭтапеПроизводства(
			Этап,
			Объект.ВыходныеИзделия,
			Этап.СписокВыбораНазначений,
			КешированныеЗначения2);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Запись

&НаКлиенте
Процедура ЗаписатьДанные(ЗаписатьИЗакрыть = Ложь)
	
	ОчиститьСообщения();
	ЗаписьПередЗакрытием = ЗаписатьИЗакрыть;
	
	Результат = ПроверитьИЗаписать();
	
	Если Результат.ПроверкаВыполнена Тогда
		
		Если Результат.ЗаданиеВыполнено Тогда
			
			НетОшибок = ПроверитьСообщитьОшибкиВыполненияЗадания();
			
			Если НетОшибок Тогда
				
				Если ЗаписьПередЗакрытием Тогда
					Модифицированность = Ложь;
					Закрыть();
				КонецЕсли;
				
				ПослеЗаписиВФоновомРежиме();
				ОповеститьОбИзмененииПоследовательностиЭтапов();
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		Если ЗаписьПередЗакрытием Тогда
			ПодключитьОбработчикОжидания("НачатьОжиданиеФоновойОперации", 0.1, Истина);
		Иначе
			НачатьОжиданиеФоновойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьИЗаписать()
	
	РезультатВыполнения = Новый Структура("ПроверкаВыполнена,ЗаданиеВыполнено", Ложь, Ложь);
	
	Если ПроверитьЗаполнение() Тогда
		
		Если Объект.ПартияПроизводства.Пустая() Тогда
			Объект.ПартияПроизводства = Справочники.ПартииПроизводства.ПолучитьСсылку();
		КонецЕсли;
		
		Действия = Действия();
		
		// Настройка счетов учета.
		НастройкаСчетовУчетаСервер.ЗаписатьНастройкиСчетовУчетаФормы(ЭтотОбъект);
		
		ПараметрыЗапуска = Новый Структура("Распоряжение,ПартияПроизводства,Действия",
			Объект.Распоряжение,
			Объект.ПартияПроизводства, // исходная партия производства
			Действия);
		ПараметрыЗапуска.Вставить("ПоляПартии", ПоляПартии());
		ПараметрыЗапуска.Вставить("ПроводитьБезКонтроляОстатковТоваровОрганизаций",
									ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций);
		
		ИмяЭкспортнойПроцедуры = "Документы.ЭтапПроизводства2_2.РедактированиеЦепочкиЭтаповПроизводства";
		НаименованиеЗадания = НСтр("ru = 'Редактирование этапов партии производства';
									|en = 'Edit production lot stages'");
		
		РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ИмяЭкспортнойПроцедуры,
			ПараметрыЗапуска,
			НаименованиеЗадания);
		
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилищаФоноваяОперация = РезультатРасчета.АдресХранилища;
		
		РезультатВыполнения.ЗаданиеВыполнено = РезультатРасчета.ЗаданиеВыполнено;
		РезультатВыполнения.ПроверкаВыполнена = Истина;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция Действия()
	
	Данные = ВыгрузитьДанныеДляПереносаВДокументы();
	
	// Определим изменненые этапы
	ИзменненныеЭтапы = Новый Массив;
	
	СписокЭтапов = Объект.Этапы.Выгрузить(Новый Структура("ПометкаУдаления, ЭтоНовый", Ложь, Ложь)).ВыгрузитьКолонку("Ссылка");
	ДанныеТаблицДоИзменений = ВременныеТаблицыДанныхОбъекта(СписокЭтапов);
	
	СписокТЧ = СписокВложенныхТабличныхЧастей(Истина, Ложь);
	СписокТЧ.Добавить("Этапы");
	
	Для Каждого	ИмяТЧ из СписокТЧ Цикл 
		ДанныеДоИзменений = ДанныеТаблицДоИзменений.Таблицы[ИмяТЧ].ПолучитьДанные().Выгрузить();
		Результат = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(Данные.ТабличныеЧасти[ИмяТЧ], ДанныеДоИзменений, Ложь);
		Если Результат.Количество()>0 Тогда
			Для Каждого СтрокаТЧ из Результат Цикл
				ИзменненныеЭтапы.Добавить(СтрокаТЧ.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ИзменненныеЭтапы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИзменненныеЭтапы);

	// Определим состав действий с документами
	Действия = Новый Массив;
	Для каждого Строка Из Объект.Этапы Цикл
		
		Ссылка = Строка.Ссылка;
		
		Если Строка.ЭтоНовый Тогда
			Тип = "Создать";
		ИначеЕсли Строка.ПометкаУдаления Тогда
			Тип = "Удалить";
		ИначеЕсли НЕ ИзменненныеЭтапы.Найти(Ссылка) = Неопределено Тогда
			Тип = "Изменить";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗначенияЗаполнения = Неопределено;
		Если НЕ Тип = "Удалить" Тогда 
			ЗначенияЗаполнения = ЗначенияЗаполненияПоЭтапуПроизводства(Строка, Данные);
		КонецЕсли;
		
		НовоеДействие = Новый Структура("Ссылка,Тип,ЗначенияЗаполнения", Ссылка, Тип, ЗначенияЗаполнения);
		Действия.Добавить(НовоеДействие);
		
	КонецЦикла;
	
	Возврат Действия;
	
КонецФункции

&НаСервере
Функция СписокЭтапов()
	
	СписокЭтапов = Объект.Этапы.Выгрузить(Новый Структура("ПометкаУдаления", Ложь));
	
	ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 4, ДопустимыйЗнак.Неотрицательный));
	СписокЭтапов.Колонки.Добавить("ДлительностьВСекундах", ОписаниеТипа);
	СписокЭтапов.Колонки.Добавить("ДлительностьДоВыпуска", ОписаниеТипа);
	
	Для каждого Строка Из СписокЭтапов Цикл
		Строка.ДлительностьВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(Строка.ДлительностьЭтапа, Строка.ЕдиницаИзмеренияДлительностиЭтапа);
	КонецЦикла;
	
	СписокЭтапов.Индексы.Добавить("Ссылка");
	СписокЭтапов.Индексы.Добавить("НомерЭтапа");
	СписокЭтапов.Индексы.Добавить("НомерСледующегоЭтапа");
	
	Документы.ЭтапПроизводства2_2.РассчитатьСдвиги(СписокЭтапов);

	Возврат СписокЭтапов;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДанныеДляПереносаВДокументы()
	
	// Реквизиты
	СписокОбщихРеквизитов = СтрСоединить(Документы.ЭтапПроизводства2_2.ОбщиеРеквизитыЦепочкиЭтапов(Истина), ",");
	Реквизиты = Новый Структура(СписокОбщихРеквизитов);
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	
	// Табличные части
	ТабличныеЧасти = Новый Структура();
	ТабличныеЧасти.Вставить("Этапы", СписокЭтапов());
	СписокТЧ = СписокВложенныхТабличныхЧастей();
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		ТабличнаяЧасть = Объект[ИмяТЧ].Выгрузить();// ТаблицаЗначений - 
		ТабличнаяЧасть.Индексы.Добавить("Ссылка");
		ТабличныеЧасти.Вставить(ИмяТЧ, ТабличнаяЧасть);
	КонецЦикла;
	
	Результат = Новый Структура("Реквизиты,ТабличныеЧасти",Реквизиты,ТабличныеЧасти);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоляПартии()
	
	Партия = Документы.ЭтапПроизводства2_2.ПоляПартии(Объект, СтруктураДанныхОсновноеИзделие, Ложь);
	Возврат Партия;
	
КонецФункции

&НаСервере
Функция РассчитатьЗначенияРеквизитовПоДаннымОбработкиРедактирования(Ссылка, ДанныеОбработки)
	
	Отбор = Новый Структура("Ссылка", Ссылка);
	ЗначенияЗаполнения = Новый Структура;
	
#Область ПроизводствоОднойДатой
	ПроизводствоОднойДатой = Истина;
	ДатаПроизводства = Неопределено;
	НайденныеСтроки = ДанныеОбработки.ТабличныеЧасти["ВыходныеИзделия"].НайтиСтроки(Отбор);
	Для каждого Строка Из НайденныеСтроки Цикл
		Если ДатаПроизводства = Неопределено Тогда
			ДатаПроизводства = Строка.ДатаПроизводства;
			Продолжить;
		КонецЕсли;
		Если ДатаПроизводства <> Строка.ДатаПроизводства Тогда
			ПроизводствоОднойДатой = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроизводствоОднойДатой Тогда
		НайденныеСтроки = ДанныеОбработки.ТабличныеЧасти["ПобочныеИзделия"].НайтиСтроки(Отбор);
		Для каждого Строка Из НайденныеСтроки Цикл
			Если ДатаПроизводства = Неопределено Тогда
				ДатаПроизводства = Строка.ДатаПроизводства;
				Продолжить;
			КонецЕсли;
			Если ДатаПроизводства <> Строка.ДатаПроизводства Тогда
				ПроизводствоОднойДатой = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПроизводствоОднойДатой И ЗначениеЗаполнено(ДатаПроизводства) Тогда
		ЗначенияЗаполнения.Вставить("ПроизводствоОднойДатой", Истина);
		ЗначенияЗаполнения.Вставить("ДатаПроизводства", ДатаПроизводства);
	Иначе
		ЗначенияЗаполнения.Вставить("ПроизводствоОднойДатой", Ложь);
		ЗначенияЗаполнения.Вставить("ДатаПроизводства", '00010101');
	КонецЕсли;
#КонецОбласти
	
	#Область НеОтгружатьЧастями
	НеОтгружатьЧастями = Истина;
	ДатаОтгрузки = Неопределено;
	НайденныеСтроки = ДанныеОбработки.ТабличныеЧасти["ОбеспечениеМатериаламиИРаботами"].НайтиСтроки(Отбор);
	Для каждого Строка Из НайденныеСтроки Цикл
		Если ДатаОтгрузки = Неопределено Тогда
			ДатаОтгрузки = Строка.ДатаОтгрузки;
			Продолжить;
		КонецЕсли;
		Если ДатаОтгрузки <> Строка.ДатаОтгрузки Тогда
			НеОтгружатьЧастями = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НеОтгружатьЧастями И ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ЗначенияЗаполнения.Вставить("НеОтгружатьЧастями", Истина);
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	Иначе
		ЗначенияЗаполнения.Вставить("НеОтгружатьЧастями", Ложь);
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", '00010101');
	КонецЕсли;
	#КонецОбласти
	
	#Область РасходОднойДатой
	РасходОднойДатой = Истина;
	ДатаРасхода = Неопределено;
	НайденныеСтроки = ДанныеОбработки.ТабличныеЧасти["РасходМатериаловИРабот"].НайтиСтроки(Отбор);
	Для каждого Строка Из НайденныеСтроки Цикл
		Если ДатаРасхода = Неопределено Тогда
			ДатаРасхода = Строка.ДатаРасхода;
			Продолжить;
		КонецЕсли;
		Если ДатаРасхода <> Строка.ДатаРасхода Тогда
			РасходОднойДатой = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если РасходОднойДатой Тогда
		НайденныеСтроки = ДанныеОбработки.ТабличныеЧасти["ЭкономияМатериалов"].НайтиСтроки(Отбор);
		Для каждого Строка Из НайденныеСтроки Цикл
			Если ДатаРасхода = Неопределено Тогда
				ДатаРасхода = Строка.ДатаОперации;
				Продолжить;
			КонецЕсли;
			Если ДатаРасхода <> Строка.ДатаОперации Тогда
				РасходОднойДатой = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если РасходОднойДатой И ЗначениеЗаполнено(ДатаРасхода) Тогда
		ЗначенияЗаполнения.Вставить("РасходОднойДатой", Истина);
		ЗначенияЗаполнения.Вставить("ДатаРасхода", ДатаРасхода);
	Иначе
		ЗначенияЗаполнения.Вставить("РасходОднойДатой", Ложь);
		ЗначенияЗаполнения.Вставить("ДатаРасхода", '00010101');
	КонецЕсли;
	#КонецОбласти
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

&НаСервере
Функция ЗначенияЗаполненияПоЭтапуПроизводства(Строка, ДанныеОбработки)
	
	ЭтоВыпускающийЭтап = УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(Строка);
	
	Результат = Новый Структура;
	
	// Реквизиты шапки
	СписокОбщихРеквизитов = СтрСоединить(Документы.ЭтапПроизводства2_2.ОбщиеРеквизитыЦепочкиЭтапов(Истина), ",");
	Реквизиты = Новый Структура(СписокОбщихРеквизитов);
	
	// - общие реквизиты партии должны храниться в шапке обработки
	ЗаполнитьЗначенияСвойств(Реквизиты, ДанныеОбработки.Реквизиты);
	
	// - редактируемые реквизиты
	Реквизиты.Вставить("НомерЭтапа", Строка.НомерЭтапа);
	Реквизиты.Вставить("НомерСледующегоЭтапа", Строка.НомерСледующегоЭтапа);
	Реквизиты.Вставить("НаименованиеЭтапа", Строка.НаименованиеРедактирование);
	Если Не Строка.ТолькоПросмотр Тогда
		Реквизиты.Вставить("Статус", Строка.Статус);
		Реквизиты.Вставить("КоличествоУпаковокПлан", Строка.КоличествоУпаковокПлан);
		Реквизиты.Вставить("УпаковкаПлан", Строка.УпаковкаПлан);
		Реквизиты.Вставить("УпаковкаФакт", Строка.УпаковкаФакт);
		Реквизиты.Вставить("УпаковкаОтменено", Строка.УпаковкаОтменено);
		Реквизиты.Вставить("ФактическоеНачалоЭтапа", Строка.ФактическоеНачалоЭтапа);
		Реквизиты.Вставить("ФактическоеОкончаниеЭтапа", Строка.ФактическоеОкончаниеЭтапа);
		Реквизиты.Вставить("Подразделение", Строка.Подразделение);
		Реквизиты.Вставить("МаршрутнаяКарта", Строка.МаршрутнаяКарта);
		Реквизиты.Вставить("КоэффициентМаршрутнойКарты", Строка.КоэффициентМаршрутнойКарты);
	КонецЕсли;
	
	// - реквизиты не редактируются, заполняются для работоспособности формы
	Реквизиты.Вставить("ВидЦены", Строка.ВидЦены);
	Реквизиты.Вставить("Валюта", Строка.Валюта);
	Реквизиты.Вставить("Организация", Строка.Организация);
	Реквизиты.Вставить("ВыпускПодДеятельность", Строка.ВыпускПодДеятельность);
	
	Если ЭтоВыпускающийЭтап Тогда
		Реквизиты.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	
	// - реквизиты заполняемые автоматически 
	Реквизиты.Вставить("ДлительностьДоВыпуска",  ДанныеОбработки.ТабличныеЧасти.Этапы.Найти(Строка.Ссылка).ДлительностьДоВыпуска);
	ЗначенияЗаполнения = РассчитатьЗначенияРеквизитовПоДаннымОбработкиРедактирования(Строка.Ссылка, ДанныеОбработки);
	Реквизиты.Вставить("ПроизводствоОднойДатой", ЗначенияЗаполнения.ПроизводствоОднойДатой);
	Реквизиты.Вставить("ДатаПроизводства",       ЗначенияЗаполнения.ДатаПроизводства);
	Реквизиты.Вставить("НеОтгружатьЧастями",     ЗначенияЗаполнения.НеОтгружатьЧастями);
	Реквизиты.Вставить("ДатаОтгрузки",           ЗначенияЗаполнения.ДатаОтгрузки);
	Реквизиты.Вставить("РасходОднойДатой",       ЗначенияЗаполнения.РасходОднойДатой);
	Реквизиты.Вставить("ДатаРасхода",            ЗначенияЗаполнения.ДатаРасхода);
	Реквизиты.Вставить("Назначение",             Строка.Назначение);
	
	Результат.Вставить("РеквизитыШапки", Реквизиты);
	
	// Табличные части
	Если Не Строка.ТолькоПросмотр Тогда
		Отбор = Новый Структура("Ссылка", Строка.Ссылка);
		СписокТЧ = СписокВложенныхТабличныхЧастей();
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			ТабличнаяЧасть = ДанныеОбработки.ТабличныеЧасти[ИмяТЧ].Скопировать(Отбор);
			Результат.Вставить(ИмяТЧ, ТабличнаяЧасть);
		КонецЦикла;
	КонецЕсли;
	
	// Последователи
	Последователи = ДанныеОбработки.ТабличныеЧасти.Этапы.Скопировать(
		Новый Структура("НомерЭтапа",Строка.НомерСледующегоЭтапа),
		"Ссылка").ВыгрузитьКолонку(0);
	Результат.Вставить("Последователи", Последователи);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеФоновойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта()
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				НетОшибок = ПроверитьСообщитьОшибкиВыполненияЗадания();
				
				Если НетОшибок Тогда
					
					Если ЗаписьПередЗакрытием Тогда
						Модифицированность = Ложь;
						Закрыть();
					КонецЕсли;
					
					ПослеЗаписиВФоновомРежиме();
					ОповеститьОбИзмененииПоследовательностиЭтапов();
					
				КонецЕсли;
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция ПроверитьСообщитьОшибкиВыполненияЗадания()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаФоноваяОперация);
	
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки Тогда
		Если ЗначениеЗаполнено(Результат.Сообщения) Тогда
			Для каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось записать изменения, подробную информацию см. в журнале регистрации.';
									|en = 'Cannot save changes. For more information, see the event log.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиВФоновомРежиме()
	
	Если ЗначениеЗаполнено(Объект.ПартияПроизводства) Тогда
		ПартияПроизводстваДоИзменения = Объект.ПартияПроизводства;
		Параметры.ПартияПроизводства = Объект.ПартияПроизводства;
	КонецЕсли;
	
	Перечитать();
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииДанных

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ИмяТЧ)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СтрокаТабличнойЧасти.Ссылка);
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СтрокаТабличнойЧасти.Произведено = Ложь;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", НазначениеДавальческогоВыпуска);
	КонецЕсли;
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьКлючСвязиСпецификации");
		Если СтрокаТабличнойЧасти.Производится Тогда
			ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
				Объект, СтрокаТабличнойЧасти, ПараметрыВыбораСпецификаций[ИмяТЧ]);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
		КонецЕсли;
		ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
			СтруктураДействий,
			"ДоступноВДругихСтроках",
			ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
		СтруктураДействий.Вставить(
			"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			ОбъектЭтап.ПараметрыЗаполненияНазначений);
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Получатель;
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Получатель;
	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Подразделение;
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Склад;
	КонецЕсли;
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", СкладДляСерий);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			СтрокаТабличнойЧасти, 
			ИмяТЧ,
			ЭтотОбъект,
			ОбъектЭтап,
			СтруктураДействий);
		
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ДобавитьДействиеЗаполнитьДатуПроизводства(СтрокаТабличнойЧасти, СтруктураДействий);
		ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
			СтрокаТабличнойЧасти.Подразделение, СтруктураДействий, "Получатель");
		//++ Устарело_Переработка24
		ДавальческаяСхемаКлиентСервер.ДобавитьДействиеЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(
			ЭтотОбъект, СтруктураДействий);
		//-- Устарело_Переработка24
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(
			СтруктураДействий,
			ЭтотОбъект,
			"Объект." + ИмяТЧ);
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		ВнутренняяПереработкаКлиентСервер.ДобавитьДействиеЗаполнитьВладелецИзделияДоступен(ЭтотОбъект, СтруктураДействий);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ОбъектЭтап));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		ЗаполнитьСписокВыбораНаправлениеВыпуска(СтрокаТабличнойЧасти, ИмяТЧ);
		
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
				Объект.ОбеспечениеМатериаламиИРаботами, 
				ДатаОтгрузкиОбязательна, 
				СкладОбязателен);
				
		Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий)
				Или ПравоЧтенияАналогов
					И ПоказатьАналоги Тогда
					
					ОбеспечениеМатериаламиИРаботамиПриИзмененииНоменклатурыСервер(Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
					
		КонецЕсли;
		
		ПриИзмененииНоменклатурыХарактеристикиВСтрокеВходящейВНабор();
		
		ЗаполнитьНазначениеОбеспеченияРедактирование(СтрокаТабличнойЧасти);
		
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		УправлениеПроизводствомКлиент.ЭкономияМатериаловЗаполнитьПризнакОбособленно(СтрокаТабличнойЧасти, Объект.ОбеспечениеМатериаламиИРаботами);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииХарактеристики(СтрокаТабличнойЧасти, ИмяТЧ)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СтрокаТабличнойЧасти.Ссылка);
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СтрокаТабличнойЧасти.Произведено = Ложь;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", НазначениеДавальческогоВыпуска);
	КонецЕсли;
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьКлючСвязиСпецификации");
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ОбъектЭтап));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
		
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ДобавитьДействиеЗаполнитьДатуПроизводства(СтрокаТабличнойЧасти, СтруктураДействий);
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
			СтрокаТабличнойЧасти.Подразделение, СтруктураДействий);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	КонецЕсли;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, ИмяТЧ));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий)
				Или ПравоЧтенияАналогов
					И ПоказатьАналоги Тогда
					
					ОбеспечениеМатериаламиИРаботамиПриИзмененииХарактеристикиСервер(Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
					
		КонецЕсли;
		
		ПриИзмененииНоменклатурыХарактеристикиВСтрокеВходящейВНабор();
		
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		УправлениеПроизводствомКлиент.ЭкономияМатериаловЗаполнитьПризнакОбособленно(СтрокаТабличнойЧасти, Объект.ОбеспечениеМатериаламиИРаботами);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, ИмяТЧ)

	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействий);
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
			СтруктураДействий,
			"ДоступноВДругихСтроках",
			ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
			ОбновитьКолонкуДоступноСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПолучателя(СтрокаТабличнойЧасти, ИмяТЧ)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СтрокаТабличнойЧасти.Ссылка);
	
	УправлениеПроизводствомКлиент.ПолучательПриИзменении(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма,
		ОбъектЭтап,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНаправленияВыпуска(СтрокаТабличнойЧасти, ИмяТЧ)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СтрокаТабличнойЧасти.Ссылка);
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаНаправленияВыпускаПриИзменении(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма,
		ОбъектЭтап,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНаправлениеВыпуска(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СписокВыбораЭлемента = УправлениеПроизводствомКлиент.ЗаполнитьСписокВыбораНаправлениеВыпуска(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма);
	
	Если СписокВыбораЭлемента.НайтиПоЗначению(СтрокаТабличнойЧасти.НаправлениеВыпуска) = Неопределено Тогда
		СтрокаТабличнойЧасти.НаправлениеВыпуска = СписокВыбораЭлемента[0].Значение;
		ПриИзмененииНаправленияВыпуска(СтрокаТабличнойЧасти, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПоСпецификацииПриИзменении(ИмяТЧ, ТекущиеДанные)
	
	Если Не ТекущиеДанные.ОбработатьПоСпецификации Тогда
		ТекущиеДанные.Спецификация = Неопределено;
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект,
		ТекущиеДанные,
		ПараметрыВыбораСпецификаций.ВыходныеИзделия,
		Новый Структура("КлючПутейКДанным", "Объект."+ИмяТЧ));
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделияОтмененоПриИзменении(ИмяТЧ, ТекущиеДанные)
	
	Если ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.Произведено = Ложь;
	Иначе
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущиеДанные, СтруктураДействий);
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, ИмяТЧ, Форма, СтруктураДействий)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(Форма, ТекущаяСтрока.Ссылка);
	
	Если НЕ СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус")
		И (ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" ИЛИ ИмяТЧ = "ЭкономияМатериалов") Тогда
		
		ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
		ПараметрыПроверкиСерий.ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий[ИмяТЧ];
		ПараметрыПроверкиСерий.Склад = ?(ТекущаяСтрока <> Неопределено, ТекущаяСтрока.Получатель, Неопределено);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(
			СтруктураДействий,
			Форма,
			"Объект." + ИмяТЧ);
	КонецЕсли;
	
	//++ Устарело_Переработка24
	Если ИмяТЧ = "ВыходныеИзделия" Или ИмяТЧ = "ПобочныеИзделия" Тогда
		
		ДавальческаяСхемаКлиентСервер.ДобавитьДействиеЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(
			Форма, СтруктураДействий);
			
	КонецЕсли;
	//-- Устарело_Переработка24
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		ВнутренняяПереработкаКлиентСервер.ДобавитьДействиеЗаполнитьВладелецИзделияДоступен(Форма, СтруктураДействий);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыЗаполненияЦенВыпуска(ОбъектЭтап));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Если ТекущаяСтрока.Производится Тогда
			ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
				Форма.Объект, ТекущаяСтрока, Форма.ПараметрыВыбораСпецификаций[ИмяТЧ]);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
		КонецЕсли;
		СтруктураДействий.Вставить(
			"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			ОбъектЭтап.ПараметрыЗаполненияНазначений);
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока,
			ИмяТЧ,
			Форма,
			ОбъектЭтап,
			СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивИдентификаторовСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)

	МассивСтрок = Неопределено;
	КоллекцияСтрок = ТаблицаОбъектаПоИмени(Объект, ИмяТЧ);
	Если МассивИдентификаторовСтрок <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
			МассивСтрок.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла; 
		КоллекцияСтрок = МассивСтрок;
	КонецЕсли;
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				ИспользоватьНесколькоСкладов,
				СкладПоУмолчанию,
				КоллекцияСтрок);
				
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
				Объект.ОбеспечениеМатериаламиИРаботами,
				ДатаОтгрузкиОбязательна,
				СкладОбязателен);
		ОбновитьКолонкуДоступноСервер();
		
	КонецЕсли;
	
	Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
		
		Если ТекущиеДанные.Ссылка.Пустая()
			И НЕ СсылкаПоУмолчанию.Пустая() Тогда
			ТекущиеДанные.Ссылка = СсылкаПоУмолчанию;
			ЗаполнитьСлужебныеРеквизитыПоДаннымЭтаповВСтроке(
					ТекущиеДанные,
					ИмяТЧ,
					ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка));
		КонецЕсли;
		
		Если ИмяТЧ = "ЭкономияМатериалов"
			И НЕ ТекущиеДанные.СписатьНаРасходы Тогда
			СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
					ИспользоватьНесколькоСкладов, 
					СкладПоУмолчанию, 
					ТекущиеДанные,
					"Получатель");
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИмяТЧ, МассивСтрок);
	
	Если (ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
			ИЛИ ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ИмяТЧ = "РасходМатериаловИРабот"
			ИЛИ ИмяТЧ = "ЭкономияМатериалов")
		И НЕ СтруктураРанееВыполненныхДействий.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
		ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ);
	КонецЕсли; 
	
	Если (ИмяТЧ = "ВыходныеИзделия"
			Или ИмяТЧ = "ПобочныеИзделия"
			Или ИмяТЧ = "ЭкономияМатериалов"
			Или ИмяТЧ = "ОбеспечениеМатериаламиИРаботами")
		И Не СтруктураРанееВыполненныхДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
			
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();	 
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшируемыеЗначения);
		КонецЦикла;
			
	КонецЕсли;	
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ЗаполнитьПараметрыВыбораНазначений();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Функция СтатусыЭтапов()
	
	СтатусыЭтапов = Новый Соответствие;
	
	Для каждого Строка Из Объект.Этапы Цикл
		Если Строка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		СтатусыЭтапов.Вставить(Строка.Ссылка, Строка.Статус);
	КонецЦикла;
	
	Возврат СтатусыЭтапов;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеСтатусаНаСервере(ИсходныеСтатусы)
	
	СтатусНачат    = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
	СтатусЗавершен = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	ИменаТаблицИзделия = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Произведено", Ложь);
	СтруктураОтбора.Вставить("Ссылка");
	
	Для каждого ОбъектЭтап Из Объект.Этапы Цикл
		
		Если ИсходныеСтатусы[ОбъектЭтап.Ссылка] = Неопределено
			ИЛИ ИсходныеСтатусы[ОбъектЭтап.Ссылка] = ОбъектЭтап.Статус Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектЭтап.НачатоВыполнениеЭтапа    = (ОбъектЭтап.Статус = СтатусНачат ИЛИ ОбъектЭтап.Статус = СтатусЗавершен);
		ОбъектЭтап.ЗавершеноВыполнениеЭтапа = (ОбъектЭтап.Статус = СтатусЗавершен);
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					ОбъектЭтап.НачатоВыполнениеЭтапа,
					ОбъектЭтап.ФактическоеНачалоЭтапа);
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					ОбъектЭтап.ЗавершеноВыполнениеЭтапа,
					ОбъектЭтап.ФактическоеОкончаниеЭтапа,
					,
					ОбъектЭтап.ЗавершеноВыполнениеЭтапа);
		
		Если ОбъектЭтап.Статус = СтатусНачат Тогда
			
			ДанныеЗаполнения = УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса(ОбъектЭтап);
			ПлановаяДатаПоступления = ДанныеЗаполнения.ПлановаяДатаПоступления;
			
			Если ОбъектЭтап.ПроизводствоОднойДатой Тогда
			
				УправлениеПроизводством.УстановитьДатуПоОтметке(
					Истина, 
					ОбъектЭтап.ДатаПроизводства,
					ПлановаяДатаПоступления);
				
			КонецЕсли;
			
			СтруктураОтбора.Ссылка = ОбъектЭтап.Ссылка;
			
			Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
				
				Для Каждого Строка Из Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора) Цикл
					
					УправлениеПроизводством.УстановитьДатуПоОтметке(
						Истина, 
						Строка.ДатаПроизводства,
						ПлановаяДатаПоступления);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПослеИзмененияСтатусаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбработатьИзменениеОтметкиВыполнения(ОбъектЭтап, ОтметкаВыполнения)
	
	Если ЗначениеЗаполнено(ОбъектЭтап.Ссылка) Тогда
		Если ОтметкаВыполнения Тогда
			Если НЕ ОбъектЭтап.НачатоВыполнениеЭтапа Тогда
				ОбъектЭтап.НачатоВыполнениеЭтапа = Истина;
				ОбработатьНачалоВыполненияЭтапа(ОбъектЭтап.Ссылка);
			КонецЕсли;
		Иначе
			Если ОбъектЭтап.ЗавершеноВыполнениеЭтапа Тогда
				ОбъектЭтап.ЗавершеноВыполнениеЭтапа = Ложь;
				ОбработатьЗавершениеВыполненияЭтапа(ОбъектЭтап.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбработатьИзменениеОтметкиВыполненияНаСервере(ОбъектЭтап, ОтметкаВыполнения)
	
	Если ЗначениеЗаполнено(ОбъектЭтап.Ссылка) Тогда
		Если ОтметкаВыполнения Тогда
			Если НЕ ОбъектЭтап.НачатоВыполнениеЭтапа Тогда
				ОбъектЭтап.НачатоВыполнениеЭтапа = Истина;
				ОбработатьНачалоВыполненияЭтапа(ОбъектЭтап.Ссылка);
			КонецЕсли;
		Иначе
			Если ОбъектЭтап.ЗавершеноВыполнениеЭтапа Тогда
				ОбъектЭтап.ЗавершеноВыполнениеЭтапа = Ложь;
				ОбработатьЗавершениеВыполненияЭтапа(ОбъектЭтап.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНачалоВыполненияЭтапа(Ссылка)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, Ссылка);
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				ОбъектЭтап.НачатоВыполнениеЭтапа,
				ОбъектЭтап.ФактическоеНачалоЭтапа);
	
	// в данной обработке других действий не предусмотренно
	
	ОбработатьИзменениеОтметкиВыполнения(ОбъектЭтап);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеВыполненияЭтапа(Ссылка)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, Ссылка);
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				ОбъектЭтап.ЗавершеноВыполнениеЭтапа, 
				ОбъектЭтап.ФактическоеОкончаниеЭтапа,
				,
				Истина);
	
	// в данной обработке других действий не предусмотренно
	
	ОбработатьИзменениеОтметкиВыполнения(ОбъектЭтап);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтметкиВыполнения(ОбъектЭтап)
	
	ОбъектЭтап.Статус = СтатусНачат();
	
	// в данной обработке других действий не предусмотренно
	
	ПослеИзмененияСтатусаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСтатусаНаСервере()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
			НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.РедактированиеПоследовательностиЭтаповПроизводства));
	
	УстановитьВидимостьЭлементовСерий();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия()
	
	Для каждого Строка Из Объект.Этапы Цикл
		Строка.СпособРаспределенияЗатратНаВыходныеИзделия = СпособРаспределенияЗатратНаВыходныеИзделия;
	КонецЦикла;
	
	ПараметрыРаспределенияЗатратСтруктура = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ПараметрыРаспределенияЗатрат(СпособРаспределенияЗатратНаВыходныеИзделия);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНазначениеОбеспеченияРедактирование(Строка, Представления = Неопределено)
	
	Если Строка.НазначениеОбеспечения.Пустая() Тогда
		Строка.НазначениеОбеспеченияРедактирование = "";
	ИначеЕсли Строка.НазначениеОбеспечения = Строка.СсылкаНазначение Тогда
		Строка.НазначениеОбеспеченияРедактирование = Строка.НаименованиеЭтапа;
	ИначеЕсли Представления <> Неопределено Тогда
		Строка.НазначениеОбеспеченияРедактирование = Представления[Строка.НазначениеОбеспечения];
	Иначе
		Строка.НазначениеОбеспеченияРедактирование = Строка.НазначениеОбеспечения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеИзделия

&НаКлиенте
Процедура ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущиеДанные, СтруктураДействий)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	
	Если ОбъектЭтап.Статус = СтатусНачат() ИЛИ ОбъектЭтап.Статус = СтатусЗавершен() ИЛИ ОбъектЭтап.ДинамическаяСтруктура Тогда
		ПараметрыДействия = УправлениеПроизводствомКлиентСервер.ПараметрыДействияЗаполнитьДатуПроизводства(
									ОбъектЭтап.ФактическаяДатаПроизводства,
									ОбъектЭтап.ПлановаяДатаПроизводства);
	Иначе
		ПараметрыДействия = УправлениеПроизводствомКлиентСервер.ПараметрыДействияЗаполнитьДатуПроизводства();
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьДатуПроизводства", ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПроизводстваВСтроке(ТекущаяСтрока)
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущаяСтрока, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	СтараяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	ТаблицаОбъекта = Объект[ИмяТЧ];// ДанныеФормыКоллекция - 
	
	НоваяСтрока = ТаблицаОбъекта.Вставить(ТаблицаОбъекта.Индекс(СтараяСтрока) + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока,, "КодСтроки");
	
	ЗаполнитьЗначенияСвойств(СтараяСтрока, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы[ИмяТЧ], ЭтотОбъект));
	СтараяСтрока.Отменено = Истина;
	ИзделияОтмененоПриИзменении(ИмяТЧ, СтараяСтрока);
	
	ПослеИзменениеКачествоИОтменыСтроки(
		ИмяТЧ, НоваяСтрока.ПолучитьИдентификатор(), СтараяСтрока.ПолучитьИдентификатор());
	
	Элементы[ИмяТЧ].ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыТЧ      = ДополнительныеПараметры.ПараметрыТЧ;
	ВыделенныеСтроки = Элементы[ПараметрыТЧ.ИмяТЧФорма].ВыделенныеСтроки;
	
	ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, Получатель)
	
	ИмяТЧОбъект = ПараметрыТЧ.ИмяТЧОбъект;
	ИмяТЧФорма  = ПараметрыТЧ.ИмяТЧФорма;
	
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыУказанияСерий = ЭтаФорма[ЭтаФорма.ПараметрыРедактированияЭтапа.ИмяРеквизитаПараметрыУказанияСерий];
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад"                    , Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий"   , ПараметрыУказанияСерий[ИмяТЧФорма]);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект[ИмяТЧОбъект].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеСтроки.Получатель = Получатель;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧФорма, ВыделенныеСтроки, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоЗавершение(ТекущаяСтрока, ДополнительныеПараметры) Экспорт

	СтруктураДействий = Новый Структура;
	
	ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
		ТекущаяСтрока.Подразделение, СтруктураДействий, "Получатель");		
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшируемыеЗначения);
	
КонецПроцедуры	

&НаСервере
Процедура ПослеИзменениеКачествоИОтменыСтроки(ИмяТЧ, ИдентификаторыНовойСтроки, ИдентификаторыСтаройСтроки)
	
	СтрокаТаблицы = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторыНовойСтроки);
	
	СтруктураДействий = Новый Структура;
	
	ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
		СтрокаТаблицы.Подразделение, СтруктураДействий, "Получатель");	
		
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшируемыеЗначения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ИдентификаторыНовойСтроки);
	МассивСтрок.Добавить(ИдентификаторыСтаройСтроки);
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок);	
	
КонецПроцедуры		

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспечения(Режим)
	
	ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
		Режим);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ОбеспечениеУстановитьДействие(КодДействия)
	
	Результат = ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата();
	
	Если КодДействия = "ФЛАГ_ОБОСОБЛЕННО" Или КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" Тогда
		
		// Ограничение выбора действий для поизводимых полуфабрикатов.
		Идентификаторы = Новый Массив();
		Для Каждого Идентификатор Из Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки Цикл
			СтрокаТовары = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Идентификатор);
			Если КодДействия = "ФЛАГ_НЕОБОСОБЛЕННО" И СтрокаТовары.Производится Тогда
				Продолжить;
			КонецЕсли;
			Идентификаторы.Добавить(Идентификатор);
		КонецЦикла;
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействиеОбособленно(
			КодДействия,
			ЭтотОбъект,
			Идентификаторы);
			
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("ЗаполнитьНазначениеВЭтапеПроизводства");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		Для каждого Строка Из Изменения.ТаблицаИзменений Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка.Строка, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;
		
		ОбновитьКолонкуДоступноСервер();
		
	Иначе
		
		ИсходныеСтатусы = СтатусыЭтапов();
		
		Изменения = ОбеспечениеВДокументахСервер.УстановитьДействие(
			КодДействия,
			ЭтотОбъект,
			Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Результат, Изменения);
		
		Если Изменения.ТаблицаИзменений <> Неопределено Тогда
			ПослеЗаполненияОбеспечения(
				Изменения.ТаблицаИзменений,
				ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
				Результат);
			ОбработатьИзменениеСтатусаНаСервере(ИсходныеСтатусы);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы)

	Модифицированность = Истина;
	ИсходныеСтатусы = СтатусыЭтапов();
	
	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		ВыбранноеЗначение,
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
		ПараметрыФормы.ЗаполняемыеПоля);
		
	ПослеЗаполненияОбеспечения(Изменения, ПараметрыФормы.Режим);
	ОбработатьИзменениеСтатусаНаСервере(ИсходныеСтатусы);
	
	ТекстОбработаноСтрок = ОбеспечениеВДокументахСервер.ТекстОбработаноСтрок(Изменения.Количество());
	Возврат ТекстОбработаноСтрок;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеЭтапаПроизводстваВСтроках(ВыделенныеСтроки, ИмяТЧ, ЭтапСсылка)
	
	КэшированныеЗначения = Неопределено;
	ТабличнаяЧасть       = Объект[ИмяТЧ];
	ОбъектЭтап           = ОбъектЭтапПоСсылке(ЭтаФорма, ЭтапСсылка);
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ПроверитьВыбратьЭтапВСтрокахНабора(ЭтапСсылка, ВыделенныеСтроки);
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ОбработатьИзменениеЭтапаПроизводстваВСтроке(ТекущиеДанные, ИмяТЧ, ОбъектЭтап, КэшированныеЗначения);
	КонецЦикла;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ОбновитьКолонкуДоступноСервер();
		Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
			ОтметитьНаличиеАналогов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьИзменениеЭтапаПроизводстваВСтроке(Строка, ИмяТЧ, ОбъектЭтап, КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура();
	
	ЗаполнитьСлужебныеРеквизитыПоДаннымЭтаповВСтроке(
		Строка,
		ИмяТЧ,
		ОбъектЭтап);
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		Строка.Произведено = Ложь;
		Строка.ДатаПроизводства = '00010101';
	КонецЕсли;
	
	Если ИмяТЧ = "Трудозатраты" Тогда
		Строка.Выполнено = Ложь;
		Строка.ДатаВыполнения = '00010101';
	КонецЕсли;
	
	Если СтрНайти("ВыходныеИзделия,ПобочныеИзделия,ЭкономияМатериалов,РасходМатериаловИРабот,ОбеспечениеМатериаламиИРаботами", ИмяТЧ) > 0 Тогда
		Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
			СкладДляСерий = Строка.Получатель;
		ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
			СкладДляСерий = Строка.Получатель;
		ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
			СкладДляСерий = Строка.Подразделение;
		ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
			СкладДляСерий = Строка.Склад;
		КонецЕсли;
		ПараметрыПроверкиСерий = Новый Структура;
		ПараметрыПроверкиСерий.Вставить("Склад", СкладДляСерий);
		ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		ПараметрыМетода = Новый Структура();
		ПараметрыМетода.Вставить("ЗаказНаПроизводство",           ОбъектЭтап.Распоряжение);
		ПараметрыМетода.Вставить("Подразделение",                 ОбъектЭтап.Подразделение);
		ПараметрыМетода.Вставить("Ссылка",                        ОбъектЭтап.Ссылка);
		ПараметрыМетода.Вставить("Статус",                        ОбъектЭтап.Статус);
		ПараметрыМетода.Вставить("ЗаказПереработчику",            ОбъектЭтап.ЗаказПереработчику);
		ПараметрыМетода.Вставить("ПараметрыУказанияСерий",        ПараметрыУказанияСерий[ИмяТЧ]);
		ПараметрыМетода.Вставить("Форма",                         ЭтотОбъект);
		
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
			СтруктураДействий,
			ПараметрыМетода,
			Строка);
		
		СтруктураДействий.Вставить(
			"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			ОбъектЭтап.ПараметрыЗаполненияНазначений);
			
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ЗаполнитьНазначениеОбеспеченияРедактирование(Строка);
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьЭтапПроизводстваВСтроке(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	ЭтапСсылка = ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка");
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы[ИмяТЧ].ТекущаяСтрока);
	
	ОбработатьИзменениеЭтапаПроизводстваВСтроках(ВыделенныеСтроки, ИмяТЧ, ЭтапСсылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДокументаДляДействийОбеспечения(Форма)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                              Форма);
	ПараметрыДокумента.Вставить("Коллекция",                          Форма.Объект.ОбеспечениеМатериаламиИРаботами);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", Неопределено);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиВариантОбеспеченияПриИзмененииНаСервере()
	
	ИсходныеСтатусы = СтатусыЭтапов();
	
	Изменения = ОбеспечениеВДокументахСервер.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
		
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействияНепосредственно();
	ПослеЗаполненияОбеспечения(Изменения, Режим, Неопределено);
	ОбработатьИзменениеСтатусаНаСервере(ИсходныеСтатусы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыборДоступно(ТекущиеДанные)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Неопределено);
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ЗапросКоличестваИСерий.Форма", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиПослеУдаленияСервер()
	
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиПриИзмененииНоменклатурыСервер(ТекущаяСтрока)
	
	СтрокаТабличнойЧасти = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ТекущаяСтрока);
	ОбновитьКолонкуДоступноСервер();
	
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеМатериаламиИРаботамиПриИзмененииХарактеристикиСервер(ТекущаяСтрока)
	
	СтрокаТабличнойЧасти = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ТекущаяСтрока);
	ОбновитьКолонкуДоступноСервер();
	
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат)
	
	ИсходныеСтатусы = СтатусыЭтапов();
	
	СтруктураРезультата = ОбеспечениеВДокументахСервер.УстановитьДействиеПослеВопроса(Ответ, Результат, ЭтотОбъект);
	ПослеЗаполненияОбеспечения(
		СтруктураРезультата.ТаблицаИзменений,
		ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
		СтруктураРезультата);
		
	ОбработатьИзменениеСтатусаНаСервере(ИсходныеСтатусы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеУстановитьДействиеСВопросом(КодДействия)
	
	Результат = ОбеспечениеУстановитьДействие(КодДействия);
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросЗаполнятьОбеспечениеЦелымиУпаковками(
		ЭтотОбъект,
		Объект.ОбеспечениеМатериаламиИРаботами,
		Результат,
		"ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками");
	
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатой(
			ЭтотОбъект,
			Объект.ОбеспечениеМатериаламиИРаботами,
			Результат,
			"ПослеВопросаСнятьФлагОтгружатьОднойДатой");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноСервер()
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерии(ВыбранноеЗначение, ПараметрыФормы) Экспорт
	
	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// дополнительных действий не требуется (отгрузка одной датой недоступна)
	
	Оповещение = ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы);
	ТекстОповещения = ОбеспечениеВДокументахКлиент.ТекстОповещенияОбработкиВыборСкладаИСерии(ПараметрыФормы.Режим);
	ПоказатьОповещениеПользователя(ТекстОповещения, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками(Ответ, Результат) Экспорт
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВопроса(
		ЭтотОбъект,
		Объект.ОбеспечениеМатериаламиИРаботами,
		Результат,
		Ответ,
		"ПослеВопросаСнятьФлагОтгружатьОднойДатой");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСнятьФлагОтгружатьОднойДатой(Ответ, Результат) Экспорт
	
	ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОбеспечения(Изменения, Режим = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузки(
		ПараметрыЗаполнения,
		Объект.НеОтгружатьЧастями,
		Объект.ДатаОтгрузки,
		Объект.ОбеспечениеМатериаламиИРаботами,
		"ДатаОтгрузки");
		
	Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
		
		ОбеспечениеВДокументахСервер.ПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(
			Изменения.ВыгрузитьКолонку("Строка"),
			"ДатаОтгрузки",
			Объект.НеОтгружатьЧастями,
			Объект.ДатаОтгрузки);
			
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ПересчитатьКоличествоЕдиниц(Изменения);
	
	НайденныеЭтапы = Новый Соответствие;
	
	СтруктураДействий = Новый Структура();
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
		СтруктураДействий,
		"СкладОбязателен,ДатаОтгрузкиОбязательна",
		ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ЭтоИзменениеВариантаОбеспечения = Изменения.Колонки.Найти("ВариантОбеспечения") <> Неопределено;
	Для Каждого Изменение Из Изменения Цикл
		
		СтрокаОбеспечение = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(Изменение.Идентификатор);
		Если НЕ ЗначениеЗаполнено(СтрокаОбеспечение.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектЭтап = НайденныеЭтапы.Получить(СтрокаОбеспечение.Ссылка);
		Если ОбъектЭтап = Неопределено Тогда
			ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СтрокаОбеспечение.Ссылка);
			НайденныеЭтапы.Вставить(СтрокаОбеспечение.Ссылка, ОбъектЭтап);
		КонецЕсли;
		
		// Обработка строки ТЧ
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
		
		// Учет ограничений указания вариантов обеспечения в этапе - если есть отгрузить, то меняется статус документа.
		Если ЭтоИзменениеВариантаОбеспечения
			И Изменение.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
			И (ОбъектЭтап.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется")
				Или ОбъектЭтап.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован")
				Или ОбъектЭтап.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению")) Тогда
			
			ОбъектЭтап.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийСервер("ОбеспечениеМатериаламиИРаботами");
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНазначенийОбеспечения()
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Элементы.ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактирование.СписокВыбора.Очистить();
	ОтборСсылокВФормеВыбораНазначений.Очистить();
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	Для каждого ЭлементСписка Из ОбъектЭтап.СписокВыбораНазначений Цикл
		Если ЭлементСписка.Значение = ТекущиеДанные.СсылкаНазначение Тогда
			Элементы.ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактирование.СписокВыбора.Добавить(
				Неопределено, ТекущиеДанные.НаименованиеЭтапа);
		Иначе
			Элементы.ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактирование.СписокВыбора.Добавить(
				ЭлементСписка.Значение);
		КонецЕсли;
		ОтборСсылокВФормеВыбораНазначений.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасходМатериаловИРабот

// Заполняет расход материалов и работ по данным обеспечения
//
// Параметры:
//  Режим - см. Документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения.Режим
//
&НаСервере
Процедура ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере(Режим = 0)
	
	МассивСсылок = Новый Массив;
	Для каждого Строка Из Объект.Этапы Цикл
		Если Строка.ПроизводствоНаСтороне ИЛИ Строка.ТолькоПросмотр Тогда
			Продолжить;
		КонецЕсли;
		МассивСсылок.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект, МассивСсылок, Режим);
	ПослеИзмененияСтрокТЧПрограммноНаСервере("РасходМатериаловИРабот");
	
КонецПроцедуры

#КонецОбласти

#Область Экономия

&НаКлиенте
Процедура ЭкономияМатериаловДействиеПриИзменении(СтрокаТабличнойЧасти)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СтрокаТабличнойЧасти.Ссылка);
	
	УправлениеПроизводствомКлиент.ЭкономияМатериаловЭтапаДействиеПриИзменении(
		СтрокаТабличнойЧасти,
		ЭтаФорма,
		ОбъектЭтап,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНеизрасходованнымиМатериаламиНаСервере()
	
	МассивСсылок = Новый Массив;
	Для каждого Строка Из Объект.Этапы Цикл
		Если Строка.ПроизводствоНаСтороне ИЛИ Строка.ТолькоПросмотр Тогда
			Продолжить;
		КонецЕсли;
		МассивСсылок.Добавить(Строка.Ссылка);
	КонецЦикла;
	Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ЗаполнитьНеизрасходованныеМатериалы(Объект, МассивСсылок);
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ЭкономияМатериалов");
	
КонецПроцедуры

#КонецОбласти

#Область Трудозатраты

&НаСервереБезКонтекста
Процедура ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение, Организация, Дата)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Подразделение", Подразделение);
	ПараметрыВыбора.Вставить("Организация", Организация);
	ПараметрыВыбора.Вставить("Дата", Дата);
	
	ПроизводствоСервер.ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда
		
		ТекущиеДанные.Исполнитель = Результат;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Нормативы

&НаСервере
Функция ПолучитьНормативыПоСпецификации(ПолучатьМатериалыПоТребованию, ПереченьДанных = Неопределено)
	
	Возврат Документы.ЭтапПроизводства2_2.ПолучитьНормативыПоСпецификации(
		ДанныеПартииПроизводства,
		ПолучатьМатериалыПоТребованию,
		ПереченьДанных);
	
КонецФункции

&НаСервере
Процедура ПоказатьНормативыПриИзмененииНаСервере(СписокТЧ = Неопределено)
	
	Если (СписокТЧ = Неопределено ИЛИ Найти(СписокТЧ, "ОбеспечениеМатериаламиИРаботами") > 0) Тогда
		
		ЗаполнитьНормативы("ОбеспечениеМатериаламиИРаботами");
	КонецЕсли;
	
	Если (СписокТЧ = Неопределено ИЛИ Найти(СписокТЧ, "Трудозатраты") > 0) Тогда
		
		ЗаполнитьНормативы("Трудозатраты");
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьНормативы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативы(ИмяТЧ, СтрокиЗаполнения = Неопределено)
	
	ТребуетсяЗаполнить = Ложь;
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		МассивСтрок = СтрокиЗаполнения;
	Иначе
		МассивСтрок = Объект[ИмяТЧ];
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
		И ПоказатьНормативыМатериалы Тогда
	
		МассивДанных = Новый Массив;
		Для каждого ТекущиеДанные Из МассивСтрок Цикл
			ДанныеСтроки = Новый Структура("Этап,Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
			МассивДанных.Добавить(ДанныеСтроки);
		КонецЦикла;
		ТребуетсяЗаполнить = Истина;
		
	ИначеЕсли ИмяТЧ = "Трудозатраты"
		И ПоказатьНормативыТрудозатраты Тогда
		
		МассивДанных = Новый Массив;
		Для каждого ТекущиеДанные Из МассивСтрок Цикл
			ДанныеСтроки = Новый Структура("Этап,ВидРабот");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
			МассивДанных.Добавить(ДанныеСтроки);
		КонецЦикла;
		ТребуетсяЗаполнить = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяЗаполнить Тогда
		
		НормативыИзХранилища = ПолучитьНормативыИзВременногоХранилища();
		
		Нормативы = ПолучитьНормативыПриИзмененииСтрок(ИмяТЧ, МассивДанных, НормативыИзХранилища);
		Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
			МассивСтрок[Сч].Норматив = Нормативы[Сч];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНормативыИзВременногоХранилища()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНормативы) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресХранилищаНормативы);
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Структура();
	
	ДанныеСпецификации = ПолучитьНормативыПоСпецификации(Истина, "МатериалыИУслуги,ВходящиеИзделия,Трудозатраты");
	
	Если ДанныеСпецификации <> Неопределено Тогда
		
		Таблица = ДанныеСпецификации.МатериалыИУслуги.Скопировать(, "Этап,Номенклатура,Характеристика,Упаковка,ДанныеУпаковки,КоличествоУпаковок"); // ТаблицаЗначений
		Таблица.Свернуть("Этап,Номенклатура,Характеристика,Упаковка,ДанныеУпаковки", "КоличествоУпаковок");
		Результат.Вставить("ОбеспечениеМатериаламиИРаботами", Таблица);
		
		Таблица = ДанныеСпецификации.Трудозатраты.Скопировать(, "Этап,ВидРабот,Количество");// ТаблицаЗначений - 
		Таблица.Свернуть("Этап,ВидРабот", "Количество");
		Результат.Вставить("Трудозатраты", Таблица);
	
	КонецЕсли;
	
	АдресХранилищаНормативы = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНормативыПриИзмененииСтрок(Знач ИмяТЧ, Знач МассивДанных, Знач АдресИлиНормативы)
	
	Если ЭтоАдресВременногоХранилища(АдресИлиНормативы) Тогда
		НормативыИзХранилища = ПолучитьИзВременногоХранилища(АдресИлиНормативы);
	Иначе
		НормативыИзХранилища = АдресИлиНормативы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НормативыИзХранилища) И НормативыИзХранилища.Свойство(ИмяТЧ) Тогда
		Нормативы = НормативыИзХранилища[ИмяТЧ];
	Иначе
		Нормативы = Неопределено;
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		СтруктураПоиска = Новый Структура("Этап,Номенклатура,Характеристика");
		
		Результат = УправлениеПроизводством.ПолучитьНормативы(
			Нормативы,
			МассивДанных,
			СтруктураПоиска,
			Истина);
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		СтруктураПоиска = Новый Структура("Этап,ВидРабот");
		
		Результат = УправлениеПроизводством.ПолучитьНормативы(
			Нормативы,
			МассивДанных,
			СтруктураПоиска,
			Ложь);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбеспечениеПоСпецификацииНаСервере()
	
	ОчиститьСтрокиТабличнойЧасти("ОбеспечениеМатериаламиИРаботами");
	
	ДанныеСпецификации = ПолучитьНормативыПоСпецификации(Ложь, "МатериалыИУслуги,ВходящиеИзделия");
	Если ДанныеСпецификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЭтапов = СоответствиеЭтаповСпецификацииДокументам();
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого Строка Из ДанныеСпецификации.МатериалыИУслуги Цикл
		
		ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СоответствиеЭтапов[Строка.Этап]);
		
		Если ОбъектЭтап.ТолькоПросмотр Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ОбеспечениеМатериаламиИРаботами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа; 
		НоваяСтрока.Ссылка        = ОбъектЭтап.Ссылка;
		
		НоваяСтрока.КлючСвязиСпецификация = Строка.КлючСвязи;
		НоваяСтрока.ДатаОтгрузки = ТекущаяДатаСеанса();
		
		СтруктураДействий.Вставить(
			"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
			ОбъектЭтап.ПараметрыЗаполненияНазначений);
		СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если ДанныеСпецификации.Свойство("НаборыМатериаловИРабот") Тогда
		Для каждого Строка Из ДанныеСпецификации.НаборыМатериаловИРабот Цикл
			
			ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СоответствиеЭтапов[Строка.Этап]);
			
			Если ОбъектЭтап.ТолькоПросмотр Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.НаборыМатериаловИРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Ссылка = ОбъектЭтап.Ссылка;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
		ОтметитьНаличиеАналогов();
	КонецЕсли;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТрудозатратыПоСпецификацииНаСервере()
	
	ОчиститьСтрокиТабличнойЧасти("Трудозатраты");
	
	ДанныеСпецификации = ПолучитьНормативыПоСпецификации(Ложь, "Трудозатраты");
	Если ДанныеСпецификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЭтапов = СоответствиеЭтаповСпецификацииДокументам();
	
	Для каждого Строка Из ДанныеСпецификации.Трудозатраты Цикл
		
		ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СоответствиеЭтапов[Строка.Этап]);
		
		Если ОбъектЭтап.ТолькоПросмотр Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Трудозатраты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа;
		НоваяСтрока.Ссылка        = ОбъектЭтап.Ссылка;
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область Аналоги

&НаСервере
Процедура ОтметитьНаличиеАналогов()

	ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами";
	АналогиМатериалов.ОтметитьНаличиеАналогов(Объект[ИмяТаблицы], ПараметрыВыбораАналогов(ИмяТаблицы, 0));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборАналогов()
	
	ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами";
	ТекстПредупреждения = "";
	
	ВыделенныеСтроки = Элементы[ИмяТаблицы].ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выделить строку(и)';
									|en = 'Highlight the line(s)'");
	Иначе
		
		ВыделенныеСсылки = Новый Массив;
		
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
				ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки с заполненным этапом производства';
											|en = 'Select lines with the filled production stage'");
				Прервать;
			ИначеЕсли ВыделенныеСсылки.Количество() = 0 Тогда
				ВыделенныеСсылки.Добавить(СтрокаТаблицы.Ссылка);
			ИначеЕсли ВыделенныеСсылки.Найти(СтрокаТаблицы.Ссылка) = Неопределено Тогда
				ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки одного документа';
											|en = 'Select lines of the same document'");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	
	АналогиМатериаловКлиент.ОткрытьПодборАналогов(ПараметрыВыбораАналогов(ИмяТаблицы, 1), ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьНаАналоги(АдресВХранилище = Неопределено)
	
	ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами";
	ДополнительныеПоля = "СтатьяКалькуляции,Ссылка";
	
	Результат = ?(АдресВХранилище = Неопределено,
		АналогиМатериалов.ВыполнитьЗаменуНаАналогиАвтоматически(Объект[ИмяТаблицы], ПараметрыВыбораАналогов(ИмяТаблицы, 2), ДополнительныеПоля, "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ"),
		АналогиМатериалов.ВыполнитьЗаменуНаАналоги(Объект[ИмяТаблицы], АдресВХранилище, ДополнительныеПоля, "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ"));
	
	ИндексыИзмененныхСтрок = Результат.ИндексыИзмененныхСтрок;
	ИндексыНовыхСтрок = Результат.ИндексыНовыхСтрок;
	
	КоличествоПроизведенныхЗамен = ИндексыИзмененныхСтрок.Количество() + ИндексыНовыхСтрок.Количество();
	ТекстСообщения  = СтрШаблон(НСтр("ru = 'Количество проведенных замен: %1';
									|en = 'Number of replacements: %1'"), КоличествоПроизведенныхЗамен);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	Если КоличествоПроизведенныхЗамен = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	
	Модифицированность = Истина;
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТаблицы, ЭтаФорма, СтруктураДействий);
	Для каждого ИндексСтроки Из ИндексыИзмененныхСтрок Цикл
		
		СтрокаТЧ = Объект[ИмяТаблицы][ИндексСтроки];
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
		ИдентификаторыСтрок.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		
	КонецЦикла;	
	
	ДатаОтгрузки = ?(Объект.НеОтгружатьЧастями, Объект.ДатаОтгрузки, Неопределено);
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ВариантОбеспеченияОтгрузить = Перечисления.ВариантыОбеспечения.Отгрузить;
	
	СтруктураДействий.Очистить();
	Для каждого ИндексСтроки Из ИндексыНовыхСтрок Цикл
		
		СтрокаТЧ = Объект[ИмяТаблицы][ИндексСтроки];
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(СтрокаТЧ, ИмяТаблицы, ЭтотОбъект, СтруктураДействий);
			
		ЗаполнитьЗначенияСвойств(
			СтруктураДействий.ПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства, СтрокаТЧ, "ВариантОбеспечения");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
		Если ДатаОтгрузки <> Неопределено Тогда
			
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
			
		ИначеЕсли СтрокаТЧ.ВариантОбеспечения = ВариантОбеспеченияОтгрузить Тогда
			
			СтрокаТЧ.ДатаОтгрузки = ТекущаяДатаСеанса;
			
		КонецЕсли;
		
		ИдентификаторыСтрок.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ОбновитьТаблицуНаборыМатериаловИРабот(Объект);
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТаблицы, ИдентификаторыСтрок, СтруктураДействий);
	
КонецПроцедуры

// Формирует параметры выбора аналогов
//
// Параметры:
//	ИмяТаблицы - Строка - Имя обрабатываемой таблицы
//	Режим      - Число  - 0 - показать аналоги
//                        1 - подобрать аналоги
//                        2 - заменить аналогами
// 
// Возвращаемое значение:
//  Структура - см. АналогиМатериалов.ПараметрыВыбораАналогов
//
&НаСервере
Функция ПараметрыВыбораАналогов(ИмяТаблицы, Режим)
	
	ТипИсточника = Новый ОписаниеТипов("УникальныйИдентификатор");
	ПараметрыФормы = АналогиМатериалов.ПараметрыВыбораАналогов(ТипИсточника);
	
	// ПараметрыОбщие
	ПараметрыФормы.ПараметрыОбщие.ПоказатьОстатки = Истина;
	
	// ПараметрыТоваров
	СтруктураПолей = АналогиМатериалов.СтруктураПолейТаблицыДляЗаменыНаАналоги();
	СтруктураПолей.ОсновныеПоля = СтруктураПолей.ОсновныеПоля;
	СтруктураПолей.ДополнительныеПоля.Вставить("Ссылка", ТипИсточника);
	СтруктураПолей.ПодменяемыеПоля.Вставить("Ссылка", "КлючСвязиНабор");
	
	ДанныеТоваров = АналогиМатериалов.ПолучитьДанныеТоваров(
		ЭтаФорма, "Объект", ИмяТаблицы, Режим, Истина, СтруктураПолей);
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы.ПараметрыТоваров, ДанныеТоваров);
	
	// ПараметрыАналогов
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.КлючСвязи            КАК КлючСвязиНабор,
	|	Т.Спецификация         КАК Спецификация,
	|	Т.СпецификацияРодитель КАК СпецификацияРодитель,
	|	Т.Ссылка               КАК ЭтапСсылка
	|ПОМЕСТИТЬ ВтНаборыМатериаловИРабот
	|ИЗ
	|	&НаборыМатериаловИРабот КАК Т
	|;
	|
	|ВЫБРАТЬ
	|	&ПустойИдентификатор                        КАК Ссылка,
	|	&Спецификация                               КАК Спецификация,
	|	ЭтапПроизводства2_2.Подразделение           КАК Подразделение,
	|	ЭтапПроизводства2_2.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЭтапПроизводства2_2.Этап                    КАК Этап
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтНаборыМатериаловИРабот.КлючСвязиНабор     КАК Ссылка,
	|	ВЫБОР КОГДА ВтНаборыМатериаловИРабот.Спецификация ССЫЛКА Справочник.РесурсныеСпецификации
	|			ТОГДА ВтНаборыМатериаловИРабот.Спецификация
	|		ИНАЧЕ ВтНаборыМатериаловИРабот.СпецификацияРодитель
	|	КОНЕЦ                                       КАК Спецификация,
	|	ЭтапПроизводства2_2.Подразделение           КАК Подразделение,
	|	ЭтапПроизводства2_2.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЭтапПроизводства2_2.Этап                    КАК Этап
	|ИЗ
	|	ВтНаборыМатериаловИРабот КАК ВтНаборыМатериаловИРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ПО ВтНаборыМатериаловИРабот.ЭтапСсылка = ЭтапПроизводства2_2.Ссылка
	|			И ЭтапПроизводства2_2.Ссылка В(&МассивСсылок)
	|";
	
	Если Режим = 1 Тогда// подборать аналоги
		ВыделенныеСтроки = Элементы[ИмяТаблицы].ВыделенныеСтроки;
		СтрокаТаблицы = ТаблицаОбъектаПоИмени(Объект, ИмяТаблицы).НайтиПоИдентификатору(ВыделенныеСтроки[0]);
		Запрос.УстановитьПараметр("МассивСсылок", СтрокаТаблицы.Ссылка);
	Иначе
		Запрос.УстановитьПараметр("МассивСсылок", Объект[ИмяТаблицы].Выгрузить(, "Ссылка"));
	КонецЕсли;
	Запрос.УстановитьПараметр("НаборыМатериаловИРабот", Объект.НаборыМатериаловИРабот.Выгрузить());
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("Спецификация", ДанныеПартииПроизводства.Спецификация);
	
	Результат = Запрос.Выполнить();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаДействияРазрешений", НачалоДняТекущаяДатаСеанса());
	СтруктураДанных.Вставить("ЗаказНаПроизводство", ДанныеПартииПроизводства.Распоряжение);
	СтруктураДанных.Вставить("Изделие", ДанныеПартииПроизводства.Номенклатура);
	СтруктураДанных.Вставить("ХарактеристикаИзделия", ДанныеПартииПроизводства.Характеристика);
	
	ТаблицаПараметров = ПараметрыФормы.ПараметрыАналогов.ТаблицаПараметров;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураДанных);
	КонецЦикла;
	
	ПараметрыФормы.ПараметрыАналогов.ТаблицаПараметров = 
		ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификатор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область НаборыМатериаловИРабот

&НаКлиенте
Процедура ПередУдалениемСтрокВходящихВНаборы()
	
	ВыделенныеСтроки = Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки;
	
	Если УправлениеДаннымиОбИзделияхКлиент.ЕстьСтрокиВходящиеВНабор(Объект, ВыделенныеСтроки) Тогда
		
		ОбработатьУдалениеСтрокВходящихВНаборы(ВыделенныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатурыХарактеристикиВСтрокеВходящейВНабор()
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КлючСвязиНабор) Тогда
		
		ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
		ОбработатьУдалениеСтрокВходящихВНаборы(ИдентификаторыСтрок);
		
		ТекущиеДанные.КлючСвязиНабор = Неопределено;
		ТекущиеДанные.ВходитВНабор   = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУдалениеСтрокВходящихВНаборы(ИдентификаторыСтрок)
	
	УправлениеДаннымиОбИзделиях.ОбработатьУдалениеСтрокВходящихВНаборы(Объект, ИдентификаторыСтрок);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСоставНабора(СтрокаПодбор, ИмяТЧ, ЭтапСсылка)
	
	ДобавленныеСтроки  = Новый Массив;
	
	ДанныеСостава = СтрокаПодбор.ДанныеСостава;
	Если ЗначениеЗаполнено(ДанныеСостава) Тогда
		
		Для каждого Строка Из ДанныеСостава.МатериалыИУслуги Цикл
			
			НоваяСтрока = ТаблицаОбъектаПоИмени(Объект, ИмяТЧ).Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Ссылка = ЭтапСсылка;
			
			ДобавленныеСтроки.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		Для каждого Строка Из ДанныеСостава.НаборыМатериаловИРабот Цикл
			
			НоваяСтрока = Объект.НаборыМатериаловИРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Ссылка = ЭтапСсылка;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось получить состав набора: %1';
										|en = 'Cannot receive the set content: %1'"),
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаПодбор.Номенклатура, СтрокаПодбор.Характеристика));
			
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка);
		
	КонецЕсли;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

&НаСервере
Процедура ПроверитьВыбратьЭтапВСтрокахНабора(ЭтапСсылка, ВыделенныеСтроки)
	
	КлючиСвязиНабор = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(ТекущиеДанные.КлючСвязиНабор)
			И КлючиСвязиНабор.Найти(ТекущиеДанные.КлючСвязиНабор) = Неопределено Тогда
				КлючиСвязиНабор.Добавить(ТекущиеДанные.КлючСвязиНабор);
		КонецЕсли;
	КонецЦикла;
	
	Если КлючиСвязиНабор.Количество() > 0 Тогда
		ПроверитьВыбратьЭтапВСтрокахНабораСервер(ЭтапСсылка, КлючиСвязиНабор, ВыделенныеСтроки)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыбратьЭтапВСтрокахНабораСервер(ЭтапСсылка, КлючиСвязиНабор, ВыделенныеСтроки)
	
	УправлениеДаннымиОбИзделиях.ПолучитьКлючиСвязиНабораРекурсивно(Объект.НаборыМатериаловИРабот, КлючиСвязиНабор);
	
	СтруктураОтбора1 = Новый Структура("КлючСвязиНабор");
	СтруктураОтбора2 = Новый Структура("КлючСвязи");
	
	Для каждого КлючСвязи Из КлючиСвязиНабор Цикл
		
		СтруктураОтбора1.КлючСвязиНабор = КлючСвязи;
		НайденныеСтроки = Объект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураОтбора1);
		Для каждого Строка Из НайденныеСтроки Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Если ВыделенныеСтроки.Найти(ИдентификаторСтроки) = Неопределено Тогда
				Строка.Ссылка = ЭтапСсылка;
				ВыделенныеСтроки.Добавить(ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураОтбора2.КлючСвязи = КлючСвязи;
		НайденныеСтроки = Объект.НаборыМатериаловИРабот.НайтиСтроки(СтруктураОтбора2);
		Для каждого Строка Из НайденныеСтроки Цикл
			Строка.Ссылка = ЭтапСсылка;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРазделениеСтрокиВходящейВНабор(НоваяСтрока)
	
	Если ЗначениеЗаполнено(НоваяСтрока.КлючСвязиНабор) Тогда
		ОбработатьРазделениеСтрокиВходящейВНаборСервер(НоваяСтрока.КлючСвязиНабор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРазделениеСтрокиВходящейВНаборСервер(КлючСвязиНабор)
	
	УправлениеДаннымиОбИзделиях.СкорректироватьТаблицуНаборыМатериаловИРабот(
		Объект.НаборыМатериаловИРабот, КлючСвязиНабор, 1);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "")
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Необходимо выбрать строку для указания серии';
										|en = 'Select a line to specify batch'"));
		Возврат;
	ИначеЕсли ТекущиеДанные.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Команда не может быть выполнена для выбранной строки!';
										|en = 'Command cannot be executed for the selected line.'"));
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" И ТекущиеДанные.СтатусУказанияСерий > 8 Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий());
		Если ПараметрыФормы <> Неопределено Тогда
			
			ОткрытьФорму(
				"Обработка.ЗапросКоличестваИСерий.Форма",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
				
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
							ЭтаФорма, 
							ПараметрыУказанияСерий[ИмяТЧ], 
							Текст, 
							ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТЧ);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
				ДополнительныеПараметры.ПараметрыУказанияСерий, 
				ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ПобочныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ЭкономияМатериалов" Тогда
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ПараметрыУказанияСерий.ИмяТЧТовары, ЭтаФорма, СтруктураДействий);
	КонецЕсли; 
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыУказанияСерий, 
		СтруктураДействий);
		
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ПараметрыУказанияСерий.ИмяТЧТовары,, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
					Объект, 
					ПараметрыУказанияСерий[ИмяТЧ], 
					ТекущиеДанныеИдентификатор, 
					ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(СписокТЧ = Неопределено, ОбновитьПараметрыУказанияСерий = Ложь)
	
	Если ОбновитьПараметрыУказанияСерий Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
			НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.РедактированиеПоследовательностиЭтаповПроизводства));
		УстановитьВидимостьЭлементовСерий();
	КонецЕсли; 
	
	Если СписокТЧ <> Неопределено Тогда
		МассивТЧ = СтрРазделить(СписокТЧ, ",");
		Для каждого ИмяТЧ Из МассивТЧ Цикл
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
		КонецЦикла; 
	Иначе
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ОбеспечениеМатериаламиИРаботамиСерия.Видимость = ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры;
	Элементы.Обеспечение_ЗаполнитьСерииПоFEFO.Видимость = ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры;
	
	Элементы.ЭкономияМатериаловСерия.Видимость = ПараметрыУказанияСерий.ЭкономияМатериалов.ИспользоватьСерииНоменклатуры;
	Элементы.РасходМатериаловИРаботСерия.Видимость = ПараметрыУказанияСерий.РасходМатериаловИРабот.ИспользоватьСерииНоменклатуры;
	
	Элементы.ВыходныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделияСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделия_УказатьСерии.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	
	Элементы.ПобочныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделияСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделия_УказатьСерии.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерии(ИмяТЧ, Элемент)

	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ], Истина);
	
	Если НеобходимоОбновитьСтатусыСерий Тогда

		ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения); // серверный вызов

		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ]);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения)

	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, Неопределено, КэшированныеЗначения);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий[ИмяТЧ], ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.ОбеспечениеМатериаламиИРаботами);

КонецФункции

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.ОбеспечениеМатериаламиИРаботами) Тогда
		
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);	
		ОбновитьКолонкуДоступноСервер();
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(ИмяТЧ)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы[ИмяТЧ]) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ);
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	КоличествоСтрокДоВставки = Объект[ИмяТЧ].Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ);
	
	КоличествоВставленных = Объект[ИмяТЧ].Количество() - КоличествоСтрокДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ)
	
	Перем СоставСтрок, ПараметрыОтбора;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" ИЛИ ИмяТЧ = "РасходМатериаловИРабот" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции";
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		СоставСтрок = "ВидРабот,Количество,СтатьяКалькуляции";
	КонецЕсли;
	
	ПодборТоваров = СтрНайти("ВыходныеИзделия,ПобочныеИзделия,ОбеспечениеМатериаламиИРаботами,РасходМатериаловИРабот,ЭкономияМатериалов", ИмяТЧ) > 0;
	Если ПодборТоваров Тогда
		
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		Если ИмяТЧ <> "ЭкономияМатериалов" Тогда
			МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		КонецЕсли;
		
		ПараметрыОтбора = Новый Соответствие;
		ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", МассивТиповНоменклатуры);
		
	КонецЕсли;
	
	СтрокиИзБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, СоставСтрок);
	
	Если Не ЗначениеЗаполнено(СтрокиИзБуфера) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		ВнутренняяПереработкаКлиентСервер.ДобавитьДействиеЗаполнитьВладелецИзделияДоступен(ЭтотОбъект, СтруктураДействий);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаИзБуфера Из СтрокиИзБуфера Цикл
		
		ТаблицаОбъекта = Объект[ИмяТЧ];// ДанныеФормыКоллекция - 
		
		ТекущаяСтрока = ТаблицаОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИзБуфера);
		
		Если ПодборТоваров Тогда 
			
			ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
					ТекущаяСтрока,
					ИмяТЧ,
					ЭтотОбъект,
					СтруктураДействий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
	
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ДоступностьРеквизитов)
	
	Форма.Элементы.ВыходныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюВыходныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.ПобочныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюПобочныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;

	Форма.Элементы.Обеспечение_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ОбеспечениеМатериаламиИРаботамиКонтекстноеМенюОбеспечение_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.РасходМатериаловИРабот_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.РасходМатериаловИРаботКонтекстноеМенюРасходМатериаловИРабот_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.ЭкономияМатериалов_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ЭкономияМатериаловКонтекстноеМенюЭкономияМатериалов_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.Трудозатраты_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
КонецПроцедуры

#КонецОбласти

#Область ПредопределенныеЗначения

&НаКлиентеНаСервереБезКонтекста
Функция СтатусНачат()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗавершен()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");

КонецФункции

#КонецОбласти

#Область Подбор

&НаКлиенте
Процедура ОткрытьПодборТоваров(ИмяТЧ)
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" ИЛИ ИмяТЧ = "РасходМатериаловИРабот" Тогда
		ПараметрЗаголовок = НСтр("ru = 'Подбор материалов и работ';
								|en = 'Pick materials and works'");
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ПараметрЗаголовок = НСтр("ru = 'Подбор изделий';
								|en = 'Pick finished products'");
	Иначе
		ПараметрЗаголовок = НСтр("ru = 'Подбор';
								|en = 'Pick'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",            Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",   Истина);
	ПараметрыФормы.Вставить("НеРазбиватьНаборыПоКомплектующим",  Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",          Ложь);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",        Ложь);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",   Истина);
	ПараметрыФормы.Вставить("Заголовок",               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Документ",                ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(ТипыНоменклатуры(ИмяТЧ)));
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьПодборТоваровЗавершение",
		ЭтотОбъект,
		ИмяТЧ);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваровЗавершение(ВыбранноеЗначение, ИмяТЧ) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОбработкуРезультатаПодбора(ВыбранноеЗначение.АдресТоваровВХранилище, "ПодборТоваров", ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбработкуРезультатаПодбора(АдресТоваровВХранилище, ВариантПодбора, ИмяТЧ = "ОбеспечениеМатериаламиИРаботами")
	
	НачатьОбработкуРезультатаПодбораНаСервере(АдресТоваровВХранилище, ВариантПодбора, ИмяТЧ);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработкаРезультатаПодбораЗавершение",
			ЭтотОбъект);
			
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
			
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьОбработкуРезультатаПодбораНаСервере(АдресТоваровВХранилище, ВариантПодбора, ИмяТЧ)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
		ДлительнаяОперация = Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище); // ТаблицаЗначений
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоваров.Найти(Перечисления.ТипыНоменклатуры.Набор, "ТипНоменклатуры") <> Неопределено Тогда
		НачатьДобавлениеСоставаНаборовВРезультатПодбора(ТаблицаТоваров, ВариантПодбора, ИмяТЧ);
	ИначеЕсли ВариантПодбора = "ПодборТоваров" Тогда
		ОбработкаВыбораПодборНаСервере(ТаблицаТоваров, ИмяТЧ);
	ИначеЕсли ВариантПодбора = "ПодборМатериаловПоСпецификации" Тогда
		ЗагрузитьРезультатПодбораМатериаловПоСпецификации(ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьДобавлениеСоставаНаборовВРезультатПодбора(ТаблицаТоваров, ВариантПодбора, ИмяТЧ = "ОбеспечениеМатериаламиИРаботами")
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение состава наборов при подборе.';
															|en = 'Get the set content during picking.'");
	
	ПараметрыПолученияСостава = УправлениеДаннымиОбИзделиях.ПараметрыПолученияСоставаНабораВПроизводстве();
	ПараметрыПолученияСостава.Распоряжение             = ДанныеПартииПроизводства.Распоряжение;
	ПараметрыПолученияСостава.НачалоПроизводства       = ДанныеПартииПроизводства.НачалоПроизводства;
	ПараметрыПолученияСостава.ПодразделениеДиспетчер   = ДанныеПартииПроизводства.ПодразделениеДиспетчер;
	ПараметрыПолученияСостава.НаправлениеДеятельности  = ДанныеПартииПроизводства.НаправлениеДеятельности;
	
	Если ВариантПодбора = "ПодборМатериаловПоСпецификации" Тогда
		ТаблицаТоваров.Колонки.Подразделение.Имя = "ПодразделениеИсполнитель";
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ВариантПодбора", ВариантПодбора);
	ПараметрыПроцедуры.Вставить("ИмяТЧ",          ИмяТЧ);
	ПараметрыПроцедуры.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	ПараметрыПроцедуры.Вставить("ПараметрыПолученияСостава", ПараметрыПолученияСостава);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"УправлениеДаннымиОбИзделиях.ДобавитьСоставНаборовВРезультатПодбораВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаПодбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		
		ОбработкаРезультатаПодбораЗавершениеНаСервере(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораЗавершениеНаСервере(ДлительнаяОперация)
	
	Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	ВариантПодбора = Результат.ВариантПодбора;
	ТаблицаТоваров = Результат.ТаблицаТоваров;
	ИмяТЧ = Результат.ИмяТЧ;
	
	Если ВариантПодбора = "ПодборТоваров" Тогда
		ОбработкаВыбораПодборНаСервере(ТаблицаТоваров, ИмяТЧ);
	ИначеЕсли ВариантПодбора = "ПодборМатериаловПоСпецификации" Тогда
		ЗагрузитьРезультатПодбораМатериаловПоСпецификации(ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ТаблицаТоваров, ИмяТЧ)
	
	МассивСтрок = Новый Массив;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий = Новый Структура;
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			
			ДобавленныеСтроки = ДобавитьСоставНабора(Строка, ИмяТЧ, СсылкаПоУмолчанию);
			
		Иначе
			НоваяСтрока = ТаблицаОбъектаПоИмени(Объект, ИмяТЧ).Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Ссылка = СсылкаПоУмолчанию;
			
			ДобавленныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоваяСтрока);
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из ДобавленныеСтроки Цикл
			
			ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
					ТекущаяСтрока,
					ИмяТЧ,
					ЭтотОбъект,
					СтруктураДействий);
					
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПодбораМатериаловПоСпецификации(ТаблицаТоваров)
	
	МассивСтрок = Новый Массив;
	ИмяТЧ = "ОбеспечениеМатериаламиИРаботами";
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СоответствиеЭтапов = СоответствиеЭтаповСпецификацииДокументам();
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, СоответствиеЭтапов[Строка.Этап]);
		Если Не ОбъектЭтап.ТолькоПросмотр Тогда
			ЭтапСсылка = ОбъектЭтап.Ссылка;
		Иначе
			ЭтапСсылка = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		КонецЕсли;
		
		Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			
			ДобавленныеСтроки = ДобавитьСоставНабора(Строка, ИмяТЧ, ЭтапСсылка);
			
		Иначе
			
			НоваяСтрока = Объект.ОбеспечениеМатериаламиИРаботами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Ссылка = ЭтапСсылка;
			
			ДобавленныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоваяСтрока);
			
		КонецЕсли;
		
		Для каждого НоваяСтрока Из ДобавленныеСтроки Цикл
			
			НоваяСтрока.КлючСвязиСпецификация = Строка.КлючСвязи;
			НоваяСтрока.ДатаОтгрузки = ТекущаяДатаСеанса();
			
			СтруктураДействий.Вставить(
				"ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства",
				ОбъектЭтап.ПараметрыЗаполненияНазначений);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьМатериалыДляПодбораПоСпецификацииВХранилище()
	
	Таблица = Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить(, "Этап,Номенклатура,Характеристика,КоличествоУпаковок,Упаковка");
	
	Возврат ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область Прочее

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеЭтапы();
	УстановитьУсловноеОформлениеВыходныеИзделия();
	УстановитьУсловноеОформлениеОбеспечения();
	УстановитьУсловноеОформлениеРасходМатериаловИРабот();
	УстановитьУсловноеОформлениеЭкономияМатериалов();
	УстановитьУсловноеОформлениеТрудозатраты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЭтапы()
	
	// Для ранее созданных документов доступны для редактирования только реквизиты "Номер этапа", "Номер следующего этапа".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыНаименованиеРедактирование.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыПодразделение.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыСтатус.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.ЭтоНовый");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Объединяем статусы <Формируется> и <Сформирован>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыСтатус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуетсяСтатусФормируется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сформирован / Формируется';
																|en = 'Active / Created'"));
	
	// Поддерживаем настройку "Использовать пооперационное управление"
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыМаршрутнаяКарта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.ИспользоватьПооперационноеУправление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыКоэффициентМаршрутнойКарты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.ИспользоватьПооперационноеУправление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыКоэффициентМаршрутнойКарты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.МаршрутнаяКарта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"ЭтапыОсновноеИзделиеНоменклатураЕдиницаИзмерения",
		"Объект.Этапы.УпаковкаПлан");
	
	// Только просмотр 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Этапы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Этапы.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста2);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыходныеИзделия()
	
	#Область ВыходныеИзделия
	
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("ХозяйственнаяОперация",                      "Объект.ХозяйственнаяОперация");
	ПутиКДанным.Вставить("Статус",                                     "Объект.ВыходныеИзделия.Статус");
	ПутиКДанным.Вставить("Подразделение",                              "Объект.ВыходныеИзделия.Подразделение");
	ПутиКДанным.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", "СпособРаспределенияЗатратНаВыходныеИзделия");
	
	ПутиКДанным.Вставить(
		"ОставитьИзделияУПереработчика",
		"Объект.ВыходныеИзделия.ОставитьИзделияУПереработчика");
	
	ИменаЭлементовВыходныеИзделия = Новый Структура;
	ИменаЭлементовВыходныеИзделия.Вставить("НоменклатураЕдиницаИзмерения", Элементы.ВыходныеИзделияНоменклатураЕдиницаИзмерения.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Характеристика", Элементы.ВыходныеИзделияХарактеристика.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Серия", Элементы.ВыходныеИзделияСерия.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("СтатусУказанияСерий", Элементы.ВыходныеИзделияСтатусУказанияСерий.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Назначение", Элементы.ВыходныеИзделияНазначение.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ДатаПроизводства", Элементы.ВыходныеИзделияДатаПроизводства.Имя);
	//++ Устарело_Переработка24
	ИменаЭлементовВыходныеИзделия.Вставить("ОформитьОтчетДавальцу", Элементы.ВыходныеИзделияОформитьОтчетДавальцу.Имя);
	//-- Устарело_Переработка24
	ИменаЭлементовВыходныеИзделия.Вставить("НаправлениеВыпуска", Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("СтатьяРасходов", Элементы.ВыходныеИзделияСтатьяРасходов.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("АналитикаРасходов", Элементы.ВыходныеИзделияАналитикаРасходов.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("АналитикаАктивовПассивов", Элементы.ВыходныеИзделияАналитикаАктивовПассивов.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ПредставлениеОтраженияОперации", Элементы.ВыходныеИзделияПредставлениеОтраженияОперации.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Произведено", Элементы.ВыходныеИзделияПроизведено.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Получатель", Элементы.ВыходныеИзделияПолучатель.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("КоличествоУпаковок", Элементы.ВыходныеИзделияКоличествоУпаковок.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Отменено", Элементы.ВыходныеИзделияОтменено.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ПричинаОтмены", Элементы.ВыходныеИзделияПричинаОтмены.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("Спецификация", Элементы.ВыходныеИзделияСпецификация.Имя);
	ИменаЭлементовВыходныеИзделия.Вставить("ОбработатьПоСпецификации", Элементы.ВыходныеИзделияОбработатьПоСпецификации.Имя);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "Объект", "ВыходныеИзделия", ИменаЭлементовВыходныеИзделия, ПутиКДанным);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеНазначенияВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, ПутиКДанным);
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(
		ЭтаФорма, "Объект", "ВыходныеИзделия",, ПутиКДанным);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(
		ЭтаФорма, "Объект", "ВыходныеИзделия",, ПутиКДанным);
	
	//++ Устарело_Переработка24
	ДавальческаяСхема.УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцу(
		ЭтотОбъект, "Объект", "ВыходныеИзделия");

	ДавальческаяСхема.УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцуОтмененныхСтрок(
		ЭтотОбъект, "Объект", "ВыходныеИзделия");
	//-- Устарело_Переработка24
	
	УстановитьУсловноеОформлениеПоляДатаПроизводства("ВыходныеИзделия");
	
	УстановитьУсловноеОформлениеПоляПроизведено("ВыходныеИзделия");
	
	УстановитьУсловноеОформлениеСлужебныеДанныеТабличныхЧастей("ВыходныеИзделия");
	
	#Область ПлановаяСтоимость
	
	// Видимость полей плановой стоимости.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЦена.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПлановуюСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти

	#КонецОбласти
	
	#Область ПобочныеИзделия
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("ХозяйственнаяОперация",     "Объект.ХозяйственнаяОперация");
	ПутиКДанным.Вставить("Статус",                    "Объект.ПобочныеИзделия.Статус");
	ПутиКДанным.Вставить("Подразделение",             "Объект.ПобочныеИзделия.Подразделение");
	ПутиКДанным.Вставить("ВидЦены",                   "Объект.ПобочныеИзделия.ВидЦены");
	ПутиКДанным.Вставить("ПроизводствоНаСтороне",     "Объект.ПобочныеИзделия.ПроизводствоНаСтороне");
	ПутиКДанным.Вставить("Организация",               "Объект.ПобочныеИзделия.Организация");
	ПутиКДанным.Вставить("ОрганизацияДавалец",        "Объект.ПобочныеИзделия.ОрганизацияДавалец");
	ПутиКДанным.Вставить("ТекстВладелецДавалец",      "Объект.ПобочныеИзделия.ТекстВладелецДавалец");
	ПутиКДанным.Вставить("ТекстВладелецПереработчик", "Объект.ПобочныеИзделия.ТекстВладелецПереработчик");
	
	ПутиКДанным.Вставить(
		"ОставитьИзделияУПереработчика",
		"Объект.ПобочныеИзделия.ОставитьИзделияУПереработчика");
	
	ИменаЭлементовПобочныеИзделия = Новый Структура;
	ИменаЭлементовПобочныеИзделия.Вставить("НоменклатураЕдиницаИзмерения", Элементы.ПобочныеИзделияНоменклатураЕдиницаИзмерения.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Характеристика", Элементы.ПобочныеИзделияХарактеристика.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Серия", Элементы.ПобочныеИзделияСерия.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("СтатусУказанияСерий", Элементы.ПобочныеИзделияСтатусУказанияСерий.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Назначение", Элементы.ПобочныеИзделияНазначение.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ДатаПроизводства", Элементы.ПобочныеИзделияДатаПроизводства.Имя);
	//++ Устарело_Переработка24
	ИменаЭлементовПобочныеИзделия.Вставить("ОформитьОтчетДавальцу", Элементы.ПобочныеИзделияОформитьОтчетДавальцу.Имя);
	//-- Устарело_Переработка24
	ИменаЭлементовПобочныеИзделия.Вставить("НаправлениеВыпуска", Элементы.ПобочныеИзделияНаправлениеВыпуска.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("СтатьяРасходов", Элементы.ПобочныеИзделияСтатьяРасходов.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("АналитикаРасходов", Элементы.ПобочныеИзделияАналитикаРасходов.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("АналитикаАктивовПассивов", Элементы.ПобочныеИзделияАналитикаАктивовПассивов.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ПредставлениеОтраженияОперации", Элементы.ПобочныеИзделияПредставлениеОтраженияОперации.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Произведено", Элементы.ПобочныеИзделияПроизведено.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Получатель", Элементы.ПобочныеИзделияПолучатель.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("КоличествоУпаковок", Элементы.ПобочныеИзделияКоличествоУпаковок.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Отменено", Элементы.ПобочныеИзделияОтменено.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ПричинаОтмены", Элементы.ПобочныеИзделияПричинаОтмены.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("Спецификация", Элементы.ПобочныеИзделияСпецификация.Имя);
	ИменаЭлементовПобочныеИзделия.Вставить("ОбработатьПоСпецификации", Элементы.ПобочныеИзделияОбработатьПоСпецификации.Имя);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия", ИменаЭлементовПобочныеИзделия, ПутиКДанным);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеНазначенияПобочныхИзделийЭтапаПроизводства(
		ЭтаФорма, ПутиКДанным);
	
	ПроизводствоУправлениеФормами.УстановитьУсловноеОформлениеСтатьиКалькуляции(
		ЭтаФорма, "Объект", "ПобочныеИзделия", "ПобочныеИзделияСтатьяКалькуляции", ПутиКДанным, Истина);
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеФиксированнойСтоимостиЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия",, ПутиКДанным);
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(
		ЭтаФорма, "Объект", "ПобочныеИзделия",, ПутиКДанным);
	
	//++ Устарело_Переработка24
	ДавальческаяСхема.УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцу(
		ЭтотОбъект, "Объект", "ПобочныеИзделия");
		
	ДавальческаяСхема.УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцуОтмененныхСтрок(
		ЭтотОбъект, "Объект", "ПобочныеИзделия");
	//-- Устарело_Переработка24
	
	#Область ВнутренняяПереработка
	
	ВнутренняяПереработкаСервер.УстановитьУсловноеОформлениеПоляВладелецИзделия(ЭтотОбъект, "Объект", "ПобочныеИзделия", ПутиКДанным);
	
	// Установка доступности колонки "Владелец изделия" конкретного этапа
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияВладелецИзделия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.ВнутренняяПереработка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",                 НСтр("ru = '<для этапов внутренней переработки>';
																									|en = '<for internal subcontracting stages>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	#КонецОбласти
	
	УстановитьУсловноеОформлениеПоляДатаПроизводства("ПобочныеИзделия");
	
	УстановитьУсловноеОформлениеПоляПроизведено("ПобочныеИзделия");
	
	УстановитьУсловноеОформлениеСлужебныеДанныеТабличныхЧастей("ПобочныеИзделия");
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбеспечения()
	
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("Статус",                   "Объект.ОбеспечениеМатериаламиИРаботами.Статус");
	ПутиКДанным.Вставить("ПроизводствоНаСтороне",    "Объект.ОбеспечениеМатериаламиИРаботами.ПроизводствоНаСтороне");
	ПутиКДанным.Вставить("ПроизводствоНаСтороне2_5", "Объект.ОбеспечениеМатериаламиИРаботами.ПроизводствоНаСтороне2_5");
	
	ИменаЭлементов = ПроизводствоУправлениеФормами.ИменаЭлементовОбеспеченияМатериаламиИРаботами();
	ИменаЭлементов.ИмяТЧ = Элементы.ОбеспечениеМатериаламиИРаботами.Имя;
	ИменаЭлементов.ДатаОтгрузки = "ДатаОтгрузки";
	ИменаЭлементов.ТЧДатаОтгрузки = Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Имя;
	ИменаЭлементов.ТЧКоличествоУпаковок = Элементы.ОбеспечениеМатериаламиИРаботамиКоличествоУпаковок.Имя;
	ИменаЭлементов.ТЧНоменклатураЕдиницаИзмерения = Элементы.ОбеспечениеМатериаламиИРаботамиНоменклатураЕдиницаИзмерения.Имя;
	ИменаЭлементов.ТЧОбособленно = Элементы.ОбеспечениеМатериаламиИРаботамиОбособленно.Имя;
	ИменаЭлементов.ТЧОтменено = Элементы.ОбеспечениеМатериаламиИРаботамиОтменено.Имя;
	ИменаЭлементов.ТЧПричинаОтмены = Элементы.ОбеспечениеМатериаламиИРаботамиПричинаОтмены.Имя;
	ИменаЭлементов.ТЧСерия = Элементы.ОбеспечениеМатериаламиИРаботамиСерия.Имя;
	ИменаЭлементов.ТЧСклад = Элементы.ОбеспечениеМатериаламиИРаботамиСклад.Имя;
	ИменаЭлементов.ТЧСпецификация = Элементы.ОбеспечениеМатериаламиИРаботамиСпецификация.Имя;
	ИменаЭлементов.ТЧСтатьяКалькуляции = Элементы.ОбеспечениеМатериаламиИРаботамиСтатьяКалькуляции.Имя;
	ИменаЭлементов.ТЧХарактеристика = Элементы.ОбеспечениеМатериаламиИРаботамиХарактеристика.Имя;
	ИменаЭлементов.ТЧНазначение = Элементы.ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактирование.Имя;
	ИменаЭлементов.ТЧПроизводится = Элементы.ОбеспечениеМатериаламиИРаботамиПроизводится.Имя;
	
	ПроизводствоУправлениеФормами.УстановитьУсловноеОформлениеОбеспеченияМатериаламиИРаботами(
		ЭтаФорма, "Объект", "ОбеспечениеМатериаламиИРаботами", ИменаЭлементов, ПутиКДанным);
	
	ПроизводствоУправлениеФормами.УстановитьУсловноеОформлениеПолейОбеспечения(
		ЭтаФорма, "Объект", "ОбеспечениеМатериаламиИРаботами", ПутиКДанным);
	
	ПроизводствоУправлениеФормами.УстановитьУсловноеОформлениеДатыОтгрузки(
		ЭтаФорма, "Объект", "ОбеспечениеМатериаламиИРаботами");
	
	УстановитьУсловноеОформлениеСлужебныеДанныеТабличныхЧастей("ОбеспечениеМатериаламиИРаботами");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбеспечениеМатериаламиИРаботамиНазначениеОбеспеченияРедактирование.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОбеспечениеМатериаламиИРаботами.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите этап>';
																|en = '<select a step>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста2);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасходМатериаловИРабот()
	
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("Статус", "Объект.РасходМатериаловИРабот.Статус");

	ИменаЭлементов = УправлениеПроизводством.ИменаЭлементовРасходМатериаловИРаботЭтапаПроизводства();
	ИменаЭлементов.НоменклатураЕдиницаИзмерения = Элементы.РасходМатериаловИРаботНоменклатураЕдиницаИзмерения.Имя;
	ИменаЭлементов.Характеристика               = Элементы.РасходМатериаловИРаботХарактеристика.Имя;
	ИменаЭлементов.Серия                        = Элементы.РасходМатериаловИРаботСерия.Имя;
	ИменаЭлементов.СтатьяКалькуляции            = Элементы.РасходМатериаловИРаботСтатьяКалькуляции.Имя;

	УправлениеПроизводством.УстановитьУсловноеОформлениеРасходМатериаловИРаботЭтапаПроизводства(
		ЭтаФорма, "Объект", "РасходМатериаловИРабот", ИменаЭлементов, ПутиКДанным);
	
	УстановитьУсловноеОформлениеСлужебныеДанныеТабличныхЧастей("РасходМатериаловИРабот");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЭкономияМатериалов()
	
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("Статус",        "Объект.ЭкономияМатериалов.Статус");
	ПутиКДанным.Вставить("Подразделение", "Объект.ЭкономияМатериалов.Подразделение");
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеЭкономияМатериаловЭтапаПроизводства(
		ЭтаФорма, "Объект", ПутиКДанным);
		
	УстановитьУсловноеОформлениеСлужебныеДанныеТабличныхЧастей("ЭкономияМатериалов");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТрудозатраты()
	
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("Статус", "Объект.ОбеспечениеМатериаламиИРаботами.Статус");
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеТрудозатраты(ЭтаФорма, "Объект", "Трудозатраты",, ПутиКДанным);
	
	УстановитьУсловноеОформлениеСлужебныеДанныеТабличныхЧастей("Трудозатраты");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСлужебныеДанныеТабличныхЧастей(ИмяТЧ)

	// Представление ссылки
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазванияЭлементов(ИмяТЧ).СсылкаРедактирование);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".НаименованиеЭтапа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '...';
																|en = '...'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Только просмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ]["Имя"]);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста2);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоляДатаПроизводства(ИмяТЧ)
	
	// Только просмотр, Текст
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазванияЭлементов(ИмяТЧ).ДатаПроизводства);
	
	ОтборЭлемента =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	
	//Собственное производство - Только просмотр, Текст
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазванияЭлементов(ИмяТЧ).ДатаПроизводства);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.ПустаяСсылка());
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	
	
	//Производство на стороне (заказ переработчику не заполнен) - Только просмотр, Текст
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазванияЭлементов(ИмяТЧ).ДатаПроизводства);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоляПроизведено(ИмяТЧ)
	
	//Производство на стороне (заказ переработчику не заполнен) - Только просмотр
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазванияЭлементов(ИмяТЧ).Произведено);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Функция НазванияЭлементов(ИмяТЧ)
	
	СтруктураВозврата = Новый Структура("Произведено, ДатаПроизводства, СсылкаРедактирование");
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураВозврата.Произведено = Элементы.ВыходныеИзделияПроизведено.Имя;
		СтруктураВозврата.ДатаПроизводства = Элементы.ВыходныеИзделияДатаПроизводства.Имя;
		СтруктураВозврата.СсылкаРедактирование = Элементы.ВыходныеИзделияСсылкаРедактирование.Имя;
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураВозврата.Произведено = Элементы.ПобочныеИзделияПроизведено.Имя;
		СтруктураВозврата.ДатаПроизводства = Элементы.ПобочныеИзделияДатаПроизводства.Имя;
		СтруктураВозврата.СсылкаРедактирование = Элементы.ПобочныеИзделияСсылкаРедактирование.Имя;
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		СтруктураВозврата.СсылкаРедактирование = Элементы.ТрудозатратыСсылкаРедактирование.Имя;
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		СтруктураВозврата.СсылкаРедактирование = Элементы.ЭкономияМатериаловСсылкаРедактирование.Имя;
	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		СтруктураВозврата.СсылкаРедактирование = Элементы.РасходМатериаловИРаботСсылкаРедактирование.Имя;
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СтруктураВозврата.СсылкаРедактирование = Элементы.ОбеспечениеМатериаламиИРаботамиСсылкаРедактирование.Имя;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ПобочныеИзделияСвернуты = (Объект.ПобочныеИзделия.Количество() = 0);
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ПобочныеИзделия, 
		Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
		ПобочныеИзделияСвернуты);
	
	НеизрасходованныеМатериалыСвернуты = Истина;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ЭкономияМатериалов, 
		Элементы.ГиперСсылкаНадписьРЭкономияМатериалов,
		НеизрасходованныеМатериалыСвернуты);
	
	#Область Этапы
	
	Элементы.ЭтапыПроизводствоНаСтороне.Формат = СтрШаблон("БЛ=; БИ='%1'", НСтр("ru = 'производство на стороне';
																				|en = 'production by third party'"));
	Элементы.ЭтапыВнутренняяПереработка.Формат = СтрШаблон("БЛ=; БИ='%1'", НСтр("ru = 'внутренняя переработка';
																				|en = 'internal subcontracting'"));
	
	ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ПометкаУдаления", Ложь));
	Элементы.Этапы.ОтборСтрок = ОтборСтрок;
	
	#КонецОбласти
	
	Если Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		Элементы.ВыходныеИзделияОбработатьПоСпецификации.Видимость = Ложь;
		Элементы.ВыходныеИзделияСпецификация.Видимость = Ложь;
		Элементы.ПобочныеИзделияОбработатьПоСпецификации.Видимость = Ложь;
		Элементы.ПобочныеИзделияСпецификация.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		Элементы.ЭтапыКоличествоУпаковокПлан.Видимость = Ложь;
		Элементы.ЭтапыГруппаЕдиницаИзмерения.Видимость = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиПроизводится.Видимость = Ложь;
		Элементы.ОбеспечениеМатериаламиИРаботамиСпецификация.Видимость = Ложь;
	КонецЕсли;
	
	НадписьСпецификация = ФорматированнаяСтрокаСпецификацияЭтап();
	
	Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала.Видимость = 
		ПравоЧтенияАналогов И ПоказатьАналоги;
		
	Элементы.ОбеспечениеМатериаламиИРаботамиГруппаАналоги.Видимость = 
		ПравоЧтенияАналогов;
	
	Если Объект.Спецификация.Пустая() Тогда
		Элементы.Обеспечение_ПоказатьНормативы.Видимость = Ложь;
		Элементы.Обеспечение_ЗаполнитьПоСпецификации.Видимость = Ложь;
		Элементы.Обеспечение_ПодобратьПоСпецификации.Видимость = Ложь;
		Элементы.Трудозатраты_ПоказатьНормативы.Видимость = Ложь;
		Элементы.Трудозатраты_ЗаполнитьПоСпецификации.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2) Тогда
		Элементы.Записать.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ОбеспечениеМатериаламиИРаботамиВходитВНабор.Видимость = ДоступноИспользованиеНаборовВПроизводстве;
	
	Элементы.ОбеспечениеМатериаламиИРаботамиПроизводится.Видимость = Не Объект.ДинамическаяСтруктура;
	Элементы.ОбеспечениеМатериаламиИРаботамиРезервироватьПоМереПоступления.Видимость = Не Объект.ДинамическаяСтруктура;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	ПартияПроизводства = Форма.Параметры.ПартияПроизводства;
	ТипПроизводственногоПроцесса = Объект.ТипПроизводственногоПроцесса;
	
	// Заголовок формы
	#Область ЗаголовокФормы
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		ИЛИ СтруктураРеквизитов.Свойство("ПартияПроизводства")
		ИЛИ Инициализация Тогда
		
		Если Не ЗначениеЗаполнено(ПартияПроизводства) Тогда
			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Создание этапов производства (%1)';
											|en = 'Create production stages (%1)'"), НРег(ТипПроизводственногоПроцесса));
		Иначе
			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Редактирование этапов производства (%1)';
											|en = 'Edit production stages (%1)'"), НРег(ТипПроизводственногоПроцесса));
		КонецЕсли;
	
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = ТекстЗаголовка;
		
	КонецЕсли;
	#КонецОбласти
	
	// Основное изделие
	#Область ОсновноеИзделие
	
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		ИЛИ Инициализация Тогда
		
		Если (Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
				ИЛИ Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций")) Тогда
			Элементы.ГруппаОсновноеИзделие.Заголовок = НСтр("ru = 'Продукция';
															|en = 'Manufactured products'");
		ИначеЕсли Объект.ТипПроизводственногоПроцесса =ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт") Тогда
			Элементы.ГруппаОсновноеИзделие.Заголовок = НСтр("ru = 'Ремонтируемое изделие';
															|en = 'Product under R&M'");
		ИначеЕсли Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
			Элементы.ГруппаОсновноеИзделие.Заголовок = НСтр("ru = 'Разбираемое изделие';
															|en = 'Product being disassembled'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		ИЛИ СтруктураРеквизитов.Свойство("ВыходныеИзделия")
		ИЛИ СтруктураРеквизитов.Свойство("ОбеспечениеМатериаламиИРаботами")
		ИЛИ СтруктураРеквизитов.Свойство("ОсновноеИзделие")
		ИЛИ Инициализация Тогда
		
		Если Форма.СтруктураДанныхОсновноеИзделие.ХарактеристикиИспользуются Тогда
			Элементы.ОсновноеИзделиеХарактеристика.Доступность = Истина;
			Элементы.ОсновноеИзделиеХарактеристика.ПодсказкаВвода = "";
			Элементы.ОсновноеИзделиеХарактеристика.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ОсновноеИзделиеХарактеристика.Доступность = Ложь;
			Элементы.ОсновноеИзделиеХарактеристика.ПодсказкаВвода = НСтр("ru = '<характеристики не используются>';
																		|en = '<variants are not used>'");
			Элементы.ОсновноеИзделиеХарактеристика.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Форма.ИнформационнаяНадписьОсновноеИзделие = Неопределено;
		Элементы.ДекорацияКартинкаВниманиеОсновноеИзделие.Видимость = Ложь;
		Если ЗначениеЗаполнено(Объект.ОсновноеИзделиеНоменклатура) Тогда
			Если (ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
					ИЛИ ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт")
					ИЛИ ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций")
				) Тогда
				Элементы.ДекорацияКартинкаВниманиеОсновноеИзделие.Видимость = ( Объект.ВыходныеИзделия.НайтиСтроки(Новый Структура("Номенклатура", Объект.ОсновноеИзделиеНоменклатура)).Количество() = 0 );
				Форма.ИнформационнаяНадписьОсновноеИзделие = Новый ФорматированнаяСтрока(НСтр("ru = 'перейти к выпуску';
																								|en = 'go to release'"),,,, "ПерейтиКВыпуску");
			ИначеЕсли ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
				Элементы.ДекорацияКартинкаВниманиеОсновноеИзделие.Видимость = ( Объект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(Новый Структура("Номенклатура", Объект.ОсновноеИзделиеНоменклатура)).Количество() = 0 );
				Форма.ИнформационнаяНадписьОсновноеИзделие = Новый ФорматированнаяСтрока(НСтр("ru = 'перейти к обеспечению';
																								|en = 'go to supply'"),,,, "ПерейтиКОбеспечению");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	// Выходные изделия
	#Область ВыходныеИзделия_ПобочныеИзделия
	
	Если СтруктураРеквизитов.Свойство("ВыходныеИзделия")
		ИЛИ СтруктураРеквизитов.Свойство("ПобочныеИзделия") 
		ИЛИ Инициализация Тогда
		
		Форма.ВыходныеИзделияКоличество = Форма.Объект.ВыходныеИзделия.Количество();
		Форма.ПобочныеИзделияКоличество = Форма.Объект.ПобочныеИзделия.Количество();
		
		Если СтруктураРеквизитов.Свойство("ВыходныеИзделия") ИЛИ Инициализация Тогда
			Если Форма.ВыходныеИзделияКоличество > 0 Тогда
				Форма.НадписьПродукция = СтрШаблон("%1 (%2)", Элементы.ВыходныеИзделия.Заголовок, Форма.ВыходныеИзделияКоличество);
			Иначе
				Форма.НадписьПродукция = Элементы.ВыходныеИзделия.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ПобочныеИзделия") ИЛИ Инициализация Тогда
			Если Форма.ПобочныеИзделияКоличество > 0 Тогда
				Форма.НадписьПобочныеИзделия = СтрШаблон("%1 (%2)", Элементы.ПобочныеИзделия.Заголовок, Форма.ПобочныеИзделияКоличество);
			Иначе
				Форма.НадписьПобочныеИзделия = Элементы.ПобочныеИзделия.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Форма.КоличествоСтрокВыходныеИзделия = Форма.ВыходныеИзделияКоличество + Форма.ПобочныеИзделияКоличество;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Обеспечение, Расход, Экономия
	#Область Обеспечение_РасходМатериаловИРабот_ЭкономияМатериалов
	
	Если СтруктураРеквизитов.Свойство("РасходМатериаловИРабот")
		ИЛИ СтруктураРеквизитов.Свойство("ЭкономияМатериалов") 
		ИЛИ Инициализация Тогда
		
		РасходМатериаловИРаботКоличество = Форма.Объект.РасходМатериаловИРабот.Количество();
		ЭкономияМатериаловКоличество = Форма.Объект.ЭкономияМатериалов.Количество();
		
		Если СтруктураРеквизитов.Свойство("РасходМатериаловИРабот") ИЛИ Инициализация Тогда
			Если РасходМатериаловИРаботКоличество > 0 Тогда
				Форма.НадписьРасходМатериаловИРабот = СтрШаблон("%1 (%2)", Элементы.РасходМатериаловИРабот.Заголовок, РасходМатериаловИРаботКоличество);
			Иначе
				Форма.НадписьРасходМатериаловИРабот = Элементы.РасходМатериаловИРабот.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ЭкономияМатериалов") ИЛИ Инициализация Тогда
			Если ЭкономияМатериаловКоличество > 0 Тогда
				Форма.НадписьЭкономияМатериалов = СтрШаблон("%1 (%2)", Элементы.ЭкономияМатериалов.Заголовок, ЭкономияМатериаловКоличество);
			Иначе
				Форма.НадписьЭкономияМатериалов = Элементы.ЭкономияМатериалов.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Форма.КоличествоСтрокРасхода = РасходМатериаловИРаботКоличество + ЭкономияМатериаловКоличество;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Нормативы
	#Область Нормативы
	Если СтруктураРеквизитов.Свойство("ПоказатьНормативы") ИЛИ Инициализация Тогда
		
		Элементы.ОбеспечениеМатериаламиИРаботамиНорматив.Видимость = Форма.ПоказатьНормативыМатериалы;
		Элементы.Обеспечение_ПоказатьНормативы.Пометка = Форма.ПоказатьНормативыМатериалы;
		
		Элементы.ТрудозатратыНорматив.Видимость = Форма.ПоказатьНормативыТрудозатраты;
		Элементы.Трудозатраты_ПоказатьНормативы.Пометка = Форма.ПоказатьНормативыТрудозатраты;
		
	КонецЕсли;
	#КонецОбласти
	
	// Производственный процесс
	#Область ПроизводственныйПроцесс
	Если СтруктураРеквизитов.Свойство("ПроизводственныйПроцесс")
		ИЛИ Инициализация Тогда
		
		Форма.КоличествоСтрокПроизводственныйПроцесс = Объект.Этапы.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь)).Количество();
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ИспользоватьПооперационноеУправление")
		ИЛИ Инициализация Тогда
		
		Элементы.ЭтапыГруппаМаршрутнаяКарта.Видимость =
			Форма.ИспользоватьПооперационноеУправление
			И Форма.ИспользоватьМаршрутныеКарты
			И Не Объект.ТипПроизводственногоПроцесса =
				ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
	КонецЕсли;
	
	#КонецОбласти
	
	// Аналоги
	#Область Аналоги
	
	Если СтруктураРеквизитов.Свойство("ПоказатьАналоги") ИЛИ Инициализация Тогда
		
		Элементы.Обеспечение_ПоказатьАналоги.Пометка = Форма.ПоказатьАналоги;
		Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала.Видимость = Форма.ПоказатьАналоги;
		
	КонецЕсли;	
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыПоИзмененнымРеквизитам(Форма, ИзмененныеРеквизиты)

	Если Не ЗначениеЗаполнено(ИзмененныеРеквизиты)Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = СтрСоединить(ИзмененныеРеквизиты, ",");
	НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	РазблокироватьДокументы();
	
	ПравоЧтенияАналогов = ПолучитьФункциональнуюОпцию("ИспользоватьАналогиМатериалов")
						  И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.АналогиМатериалов);
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	
	ЗаполнитьСпособРаспределенияЗатратНаВыходныеИзделия();
	
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ПараметрыРедактированияЭтапа());
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ПараметрыРаспределенияЗатрат(СпособРаспределенияЗатратНаВыходныеИзделия));
	
	УстановитьПараметрыВыбораСпецификаций();
	
	ИспользоватьМаршрутныеКарты = ПолучитьФункциональнуюОпцию("ИспользоватьМаршрутныеКарты");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.РедактированиеПоследовательностиЭтаповПроизводства));
	
	ПрочитатьДанные();
	
	ИспользоватьСписаниеНаРасходы =
		(ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"))
		//++ Устарело_Переработка24
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		//-- Устарело_Переработка24
		И Объект.ХозяйственнаяОперация <> ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора();
	
	//++ Устарело_Переработка24
	ИспользуетсяДавальческаяСхема =	ДавальческаяСхема.ИспользуетсяДавальческаяСхема(Объект.ХозяйственнаяОперация);
	
	ЗаголовокОформитьОтчетДавальцу = НСтр("ru = 'Оформить отчет давальцу (2.4)';
											|en = 'Register ""Consumption report — Subcontracting services delivered (2.4)""'");
	
	Элементы.ВыходныеИзделияОформитьОтчетДавальцу.Заголовок = ЗаголовокОформитьОтчетДавальцу;
	Элементы.ПобочныеИзделияОформитьОтчетДавальцу.Заголовок = ЗаголовокОформитьОтчетДавальцу;
	//-- Устарело_Переработка24
	
	ИспользоватьВнутреннююПереработку = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннююПереработку");
	
	АдресХранилищаНормативы = "";
	ДанныеПартииПроизводства = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводства(Объект.Распоряжение, Объект.НазначениеПродукция, Объект.ПартияПроизводства);
	
	ПараметрыВыбораСтатейИАналитик = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ПараметрыВыбораСтатейИАналитик(Объект);
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройки = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	СписокРеквизитовРаспоряжения = "НачатьНеРанее,Подразделение";
	ЗаполнитьЗначенияСвойств(
		Объект,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Распоряжение, СписокРеквизитовРаспоряжения),
		СписокРеквизитовРаспоряжения);
	
	ЗаполнитьСлужебныеРеквизиты();
	СписокРаспоряжений = Новый Массив;
	СписокРаспоряжений.Добавить(Параметры.Распоряжение);
	УправлениеПроизводством.ОбновитьПризнакТребуетсяЗаполнитьПолеЭтапПотребитель(ЭтаФорма, СписокРаспоряжений);
	
	Если Объект.ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора()
		//++ Устарело_Переработка24
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		//-- Устарело_Переработка24
		Или Ложь Тогда
		НазначениеДавальческогоВыпуска = Документы.ЭтапПроизводства2_2.НазначениеПоУмолчаниюДляПобочныхИзделий(Объект.Распоряжение);
	КонецЕсли;
	
	ПараметрыВстраивания = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	УстановитьВидимостьЭлементовСерий();
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ВыходныеИзделия);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ПобочныеИзделия);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Этапы);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ОбеспечениеМатериаламиИРаботами);
	
	ЗаполнитьПараметрыВыбораНазначений();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСпецификаций()
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(
		Объект,
		Обработки.РедактированиеПоследовательностиЭтаповПроизводства);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
								Элементы.ОбеспечениеМатериаламиИРаботамиСпецификация,
								ПараметрыВыбораСпецификаций.ОбеспечениеМатериаламиИРаботами);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
								Элементы.ВыходныеИзделияСпецификация,
								ПараметрыВыбораСпецификаций.ВыходныеИзделия);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
								Элементы.ПобочныеИзделияСпецификация,
								ПараметрыВыбораСпецификаций.ВыходныеИзделия);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ДанныеНовогоЭтапаСтруктура = УправлениеПроизводством.РеквизитыДокументаЭтапПроизводства();
	ДанныеНовогоЭтапаСтруктура.Вставить("ТолькоПросмотр", Ложь);
	ДанныеНовогоЭтапаСтруктура.Вставить("НаименованиеРедактирование", "");
	ДанныеНовогоЭтапаСтруктура.Вставить("НачатоВыполнениеЭтапа", Ложь);
	ДанныеНовогоЭтапаСтруктура.Вставить("ИспользоватьПооперационноеУправление", Ложь);
	ДанныеНовогоЭтапаСтруктура.Вставить("ИспользоватьБригадныеНаряды", Ложь);
	ДанныеНовогоЭтапаСтруктура.Вставить("ЗавершеноВыполнениеЭтапа", Ложь);
	ДанныеНовогоЭтапаСтруктура.Вставить("ПлановаяДатаПроизводства", '00010101');
	ДанныеНовогоЭтапаСтруктура.Вставить("ФактическаяДатаПроизводства", '00010101');
	ДанныеНовогоЭтапаСтруктура.Вставить("ПараметрыЗаполненияНазначений", Новый Структура);
	ДанныеНовогоЭтапаСтруктура.Вставить("СписокВыбораНазначений", Новый СписокЗначений);
	ДанныеНовогоЭтапа = Новый ФиксированнаяСтруктура(ДанныеНовогоЭтапаСтруктура);
	
	Для каждого Строка Из Объект.Этапы Цикл
		
		Если Не Строка.ЭтоНовый Тогда
			Строка.НаименованиеРедактирование = Строка.НаименованиеЭтапа;
		КонецЕсли;
		
		Если УправлениеДоступом.ПроизводительныйВариант() Тогда
			РедактированиеЭтапаЗапрещено = НЕ УправлениеДоступом.ИзменениеРазрешено(Строка.Ссылка);
		Иначе
			РедактированиеЭтапаЗапрещено = Ложь;
		КонецЕсли;
		
		Строка.ОсновноеИзделиеНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
		Строка.ТолькоПросмотр = Строка.ПроизводствоНаСтороне И ЗначениеЗаполнено(Строка.ЗаказПереработчику) ИЛИ РедактированиеЭтапаЗапрещено;
		
		Строка.НачатоВыполнениеЭтапа = (Строка.Статус = СтатусНачат())
			ИЛИ (Строка.Статус = СтатусЗавершен());
		Строка.ЗавершеноВыполнениеЭтапа = (Строка.Статус = СтатусЗавершен());
		
		Если Строка.ЗавершеноВыполнениеЭтапа Тогда
			Строка.ФактическаяДатаПроизводства = НачалоДня(Строка.ФактическоеОкончаниеЭтапа);
		Иначе
			Строка.ФактическаяДатаПроизводства = Неопределено;
		КонецЕсли;
		Строка.ПлановаяДатаПроизводства = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступления(Строка.Ссылка);

		Строка.ИндексКартинки = ИндексКартинки(Строка);
		
	КонецЦикла;
	
	ДоступноИспользованиеНаборовВПроизводстве = УправлениеДаннымиОбИзделияхПовтИсп.ДоступноИспользованиеНаборовВПроизводстве();
	
	ЗаполнитьСтруктуруДанныхОсновногоИзделия();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	ЗаполнитьПараметрыПроизводственныхПодразделений();
	
	СоздатьСсылкиНовыхДокументов();
	ЗаполнитьСсылкуПоУмолчанию();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(СписокТЧ = "", СтрокиЗаполнения = Неопределено)
	
	СтруктураТЧ = Новый Структура(СписокТЧ);
	ВсеТЧ = (СтруктураТЧ.Количество() = 0);
	
	Если ВсеТЧ ИЛИ Не ЗначениеЗаполнено(СтрокиЗаполнения) Тогда
		ДанныеЭтапов = ДанныеЭтаповВСоответствие();
	Иначе
		ДанныеЭтапов = Неопределено;
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ВыходныеИзделия") ИЛИ ВсеТЧ Тогда
		ЗаполнитьСлужебныеРеквизитыПоДаннымЭтапов("ВыходныеИзделия", СтрокиЗаполнения, ДанныеЭтапов);
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(Объект.ВыходныеИзделия, СтрокиЗаполнения);
		УправлениеПроизводством.ЗаполнитьНаправлениеВыпускаВТЧ(?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, Объект.ВыходныеИзделия));
		//++ Устарело_Переработка24
		ДавальческаяСхема.ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцуВТаблице(ЭтотОбъект, Объект.ВыходныеИзделия, СтрокиЗаполнения);
		//-- Устарело_Переработка24
		НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтаФорма, "Объект.ВыходныеИзделия");
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ПобочныеИзделия") ИЛИ ВсеТЧ Тогда
		ЗаполнитьСлужебныеРеквизитыПоДаннымЭтапов("ПобочныеИзделия", СтрокиЗаполнения, ДанныеЭтапов);
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(Объект.ПобочныеИзделия, СтрокиЗаполнения);
		УправлениеПроизводством.ЗаполнитьНаправлениеВыпускаВТЧ(?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, Объект.ПобочныеИзделия));
		//++ Устарело_Переработка24
		ДавальческаяСхема.ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцуВТаблице(ЭтотОбъект, Объект.ПобочныеИзделия, СтрокиЗаполнения);
		//-- Устарело_Переработка24
		НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтотОбъект, "Объект.ПобочныеИзделия");
		ВнутренняяПереработкаСервер.ЗаполнитьВладелецИзделияДоступенВТаблице(ЭтотОбъект, Объект.ПобочныеИзделия);
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("РасходМатериаловИРабот") ИЛИ ВсеТЧ Тогда
		
		ЗаполнитьСлужебныеРеквизитыПоДаннымЭтапов("РасходМатериаловИРабот", СтрокиЗаполнения, ДанныеЭтапов);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.РасходМатериаловИРабот,
			СтруктураДействий,
			СтрокиЗаполнения);
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ЭкономияМатериалов") ИЛИ ВсеТЧ Тогда
		
		ЗаполнитьСлужебныеРеквизитыПоДаннымЭтапов("ЭкономияМатериалов", СтрокиЗаполнения, ДанныеЭтапов);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ЭкономияМатериалов,
			СтруктураДействий,
			СтрокиЗаполнения);
			
		КоллекцияСтрок = ?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, Объект.ЭкономияМатериалов);
		Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
			ДанныеСтроки.Действия = ?(ДанныеСтроки.СписатьНаРасходы, 
										Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, 
										Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства);
		КонецЦикла; 
		
		ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.ЭкономияМатериалов, "Получатель",, СтрокиЗаполнения);
		НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтаФорма, "Объект.ЭкономияМатериалов");
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ОбеспечениеМатериаламиИРаботами") ИЛИ ВсеТЧ Тогда
		
		ЗаполнитьСлужебныеРеквизитыПоДаннымЭтапов("ОбеспечениеМатериаламиИРаботами", СтрокиЗаполнения, ДанныеЭтапов);
		
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(
			ЭтотОбъект,
			Объект.ОбеспечениеМатериаламиИРаботами,
			СтрокиЗаполнения);
		
		ЗаполнитьНормативы("ОбеспечениеМатериаламиИРаботами", СтрокиЗаполнения);
		
		Если ПравоЧтенияАналогов И ПоказатьАналоги Тогда
			ОтметитьНаличиеАналогов();
		КонецЕсли;
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьРеквизитВходитВНабор(Объект);
		
		ПредставленияНазначений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить(, "НазначениеОбеспечения").ВыгрузитьКолонку("НазначениеОбеспечения"),
			"Представление");
		Для каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
			ЗаполнитьНазначениеОбеспеченияРедактирование(Строка, ПредставленияНазначений);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("Трудозатраты") ИЛИ ВсеТЧ Тогда
		
		ЗаполнитьСлужебныеРеквизитыПоДаннымЭтапов("Трудозатраты", СтрокиЗаполнения, ДанныеЭтапов);
		
		ЗаполнитьНормативы("Трудозатраты", СтрокиЗаполнения);
		
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет служебные реквизиты по данным этапов.
//
// Параметры:
//  ИмяТЧ            - Строка - имя табличной части.
//  СтрокиЗаполнения - Неопределено, Массив из ДанныеФормыЭлементКоллекции - содержит:
//                                              * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - 
//  ДанныеЭтапов     - см. ДанныеЭтаповВСоответствие
//
&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоДаннымЭтапов(ИмяТЧ, СтрокиЗаполнения = Неопределено, ДанныеЭтапов = Неопределено)
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		МассивСтрок = СтрокиЗаполнения;
	Иначе
		МассивСтрок = Объект[ИмяТЧ];
	КонецЕсли;
	
	Для каждого Строка Из МассивСтрок Цикл
		
		Если ДанныеЭтапов <> Неопределено И ДанныеЭтапов[Строка.Ссылка] <> Неопределено Тогда
			ЗаполнитьСлужебныеРеквизитыПоДаннымЭтаповВСтроке(Строка, ИмяТЧ, ДанныеЭтапов[Строка.Ссылка]);
		Иначе
			ЗаполнитьСлужебныеРеквизитыПоДаннымЭтаповВСтроке(Строка, ИмяТЧ, ОбъектЭтапПоСсылке(ЭтаФорма, Строка.Ссылка));
		КонецЕсли;
		
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			
			ДатаДействия = Строка.ДатаПроизводства;
			ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
				"УчетнаяПолитикаФинансовогоУчета",
				Объект.Организация,
				ДатаДействия);
			
			Если НЕ ПараметрыУчетнойПолитики = Неопределено Тогда
				Строка.ИспользоватьПлановуюСтоимость = ПараметрыУчетнойПолитики.УчетГотовойПродукцииПоПлановойСтоимости;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПриИзмененииПроизводственногоПроцесса(Ссылка)
	
	ИзмененныеРеквизиты = Новый Массив();
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, Ссылка);
	
	ЗаполнитьПараметрыПроизводственныхПодразделений(ИзмененныеРеквизиты);
	
	Отбор = Новый Структура("Ссылка", Ссылка);
	СписокТЧ = СписокВложенныхТабличныхЧастей(Ложь, Ложь);
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Отбор);
		Для каждого Строка Из НайденныеСтроки Цикл
			ЗаполнитьСлужебныеРеквизитыПоДаннымЭтаповВСтроке(Строка, ИмяТЧ, ОбъектЭтап);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийСервер(, Истина);
	
	НастроитьЗависимыеЭлементыФормыПоИзмененнымРеквизитам(ЭтаФорма, ИзмененныеРеквизиты)
	
КонецПроцедуры

// Заполняет служебные реквизиты по по ссылке.
//
// Параметры:
//  Строка     - ДанныеФормыЭлементКоллекции - содержит:
//                * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - 
//  ИмяТЧ      - Строка - имя табличной части.
//
&НаКлиенте
Процедура ЗаполнитьСлужебныеРеквизитыПоСсылке(Строка, ИмяТЧ)
	
	ЗаполнитьСлужебныеРеквизитыПоДаннымЭтаповВСтроке(Строка, ИмяТЧ, ОбъектЭтапПоСсылке(ЭтаФорма, Строка.Ссылка))
	
КонецПроцедуры

// Заполняет служебные реквизиты по данным этапов в строке.
//
// Параметры:
//  Строка     - ДанныеФормыЭлементКоллекции - содержит:
//                * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - 
//  ИмяТЧ      - Строка - имя табличной части.
//  ОбъектЭтап - см. ОбъектЭтапПоСсылке
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыПоДаннымЭтаповВСтроке(Строка, ИмяТЧ, ОбъектЭтап)

	ЗаполнитьЗначенияСвойств(Строка, ОбъектЭтап,
		"Ссылка, Подразделение, Этап, Статус, ПроизводствоНаСтороне, ПроизводствоНаСтороне2_5, ТолькоПросмотр");
	
	Строка.НаименованиеЭтапа = ОбъектЭтап.НаименованиеРедактирование;
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		
		Строка.ВидЦены               = ОбъектЭтап.ВидЦены;
		Строка.Организация           = ОбъектЭтап.Организация;
		Строка.ВнутренняяПереработка = ОбъектЭтап.ВнутренняяПереработка;
		Строка.ОрганизацияДавалец    = ОбъектЭтап.ОрганизацияДавалец;
		
		Если Строка.ВнутренняяПереработка
			И ЗначениеЗаполнено(Строка.ОрганизацияДавалец) Тогда
			Строка.ТекстВладелецДавалец = СтрШаблон(НСтр("ru = 'Давалец: %1';
														|en = 'Material provider: %1'"), Строка.ОрганизацияДавалец);
		Иначе
			Строка.ТекстВладелецДавалец = "";
		КонецЕсли;
		
		Если Строка.ВнутренняяПереработка
			И ЗначениеЗаполнено(Строка.Организация) Тогда
			Строка.ТекстВладелецПереработчик = СтрШаблон(НСтр("ru = 'Переработчик: %1';
																|en = 'Subcontractor: %1'"), Строка.Организация);
		Иначе
			Строка.ТекстВладелецПереработчик = "";
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия"
			Или ИмяТЧ = "ПобочныеИзделия" Тогда
		Строка.ОставитьИзделияУПереработчика = ОбъектЭтап.ОставитьИзделияУПереработчика;
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Строка.СсылкаНазначение = ОбъектЭтап.Назначение;
		ЗаполнитьНазначениеОбеспеченияРедактирование(Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораВладельцевИзделия(Форма)
	
	Элементы = Форма.Элементы;
	
	СписокВыбора = Элементы.ПобочныеИзделияВладелецИзделия.СписокВыбора;
	СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	Если Не ТекущиеДанные.ВнутренняяПереработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекстВладелецДавалец) Тогда
		СписокВыбора.Добавить(ТекущиеДанные.ОрганизацияДавалец, ТекущиеДанные.ТекстВладелецДавалец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекстВладелецПереработчик) Тогда
		СписокВыбора.Добавить(ТекущиеДанные.Организация, ТекущиеДанные.ТекстВладелецПереработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкуПоУмолчанию()
	
	Если Объект.Этапы.Количество() = 1 И (Объект.Этапы[0].НомерСледующегоЭтапа = 0 И Не Объект.Этапы[0].ПроизводствоНаСтороне) Тогда
		СсылкаПоУмолчанию = Объект.Этапы[0].Ссылка;
	Иначе
		СсылкаПоУмолчанию = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает этап по ссылке.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма.
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ.
//
// Возвращаемое значение:
//  - ФиксированнаяСтруктура - 
//  - ДанныеФормыЭлементКоллекции - содержит:
//     * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - 
//
&НаКлиентеНаСервереБезКонтекста
Функция ОбъектЭтапПоСсылке(Форма, Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ТаблицаЭтапов = Форма.Объект.Этапы.НайтиСтроки(Новый Структура("Ссылка", Ссылка));
		Если ТаблицаЭтапов.Количество() = 0 Тогда
			ОбъектЭтап = Форма.ДанныеНовогоЭтапа;
		Иначе
			ОбъектЭтап = ТаблицаЭтапов[0];
		КонецЕсли;
		
	Иначе
		ОбъектЭтап = Форма.ДанныеНовогоЭтапа;
	КонецЕсли;
	
	Возврат ОбъектЭтап;
	
КонецФункции

// Создает соответствие для быстрого обращения к реквизитам этапов
// 
// Возвращаемое значение:
// 	Соответствие - где Ключ - ссылка на этап, Значение - данные этапа
//
&НаСервере
Функция ДанныеЭтаповВСоответствие()
	
	Результат = Новый Соответствие;
	
	Для каждого Строка Из Объект.Этапы Цикл
		
		Результат.Вставить(Строка.Ссылка, Строка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоответствиеЭтаповСпецификацииДокументам()
	
	Результат = Новый Соответствие;
	
	Для каждого Строка Из Объект.Этапы Цикл
		
		Если Строка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(Строка.Этап, Строка.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПроизводственныхПодразделений(ИзмененныеРеквизиты = Неопределено)
	
	МассивСтрок = Новый Массив();
	СписокПодразделений = Новый Массив();
	
	Для каждого Строка Из Объект.Этапы Цикл
		Если Строка.ПометкаУдаления ИЛИ Строка.ПроизводствоНаСтороне Тогда
			Продолжить;
		КонецЕсли;
		СписокПодразделений.Добавить(Строка.Подразделение);
		МассивСтрок.Добавить(Строка);
	КонецЦикла;
	
	ПараметрыПодразделений = ПроизводствоСервер.ПараметрыПроизводственныхПодразделений(СписокПодразделений);
	
	Для каждого Строка Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Строка, ПараметрыПодразделений[Строка.Подразделение]);
	КонецЦикла;
	
	ИспользоватьПооперационноеУправлениеПредыдущееЗначение = ИспользоватьПооперационноеУправление;
	ИспользоватьПооперационноеУправление = ИспользоватьПооперационноеУправлениеПредыдущееЗначение
		ИЛИ Объект.Этапы.НайтиСтроки(Новый Структура("ИспользоватьПооперационноеУправление", Истина)).Количество() > 0;
	
	Если ИспользоватьПооперационноеУправлениеПредыдущееЗначение <> ИспользоватьПооперационноеУправление
		И ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизиты.Добавить("ИспользоватьПооперационноеУправление");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхОсновногоИзделия()
	
	СтруктураДанныхОсновноеИзделие = Новый Структура("Номенклатура, Характеристика, ТипНоменклатуры, ХарактеристикиИспользуются");
	
	СтруктураДанныхОсновноеИзделие.Номенклатура = Объект.ОсновноеИзделиеНоменклатура;
	СтруктураДанныхОсновноеИзделие.Характеристика = Объект.ОсновноеИзделиеХарактеристика;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",            Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(СтруктураДанныхОсновноеИзделие, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОсновногоИзделия()
	
	ЗаполнитьСтруктуруДанныхОсновногоИзделия();
	
	Для каждого Строка Из Объект.Этапы Цикл
		
		Строка.ОсновноеИзделиеНоменклатура = Объект.ОсновноеИзделиеНоменклатура;
		Строка.УпаковкаПлан = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
			Объект.ОсновноеИзделиеНоменклатура,
			Неопределено,
			Строка.УпаковкаПлан).Упаковка;
		Строка.УпаковкаФакт = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
			Объект.ОсновноеИзделиеНоменклатура,
			Неопределено,
			Строка.УпаковкаФакт).Упаковка;
		Строка.УпаковкаОтменено = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
			Объект.ОсновноеИзделиеНоменклатура,
			Неопределено,
			Строка.УпаковкаОтменено).Упаковка;
		
	КонецЦикла;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОсновноеИзделие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииПоследовательностиЭтапов()
	
	Если ПартияПроизводстваДоИзменения <> Неопределено Тогда
		
		Оповестить("ИзменениеПоследовательностиЭтапов", ПартияПроизводстваДоИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокВложенныхТабличныхЧастей(ВключатьСерии = Истина, ВключатьНаборы = Истина)
	
	Список = Новый Массив;
	
	Список.Добавить("ВыходныеИзделия");
	Список.Добавить("ПобочныеИзделия");
	
	Список.Добавить("ОбеспечениеМатериаламиИРаботами");
	Список.Добавить("РасходМатериаловИРабот");
	Список.Добавить("ЭкономияМатериалов");
	
	Список.Добавить("Трудозатраты");
	
	Если ВключатьСерии Тогда
		Список.Добавить("ВыходныеИзделияСерии");
		Список.Добавить("ПобочныеИзделияСерии");
		Список.Добавить("ЭкономияМатериаловСерии");
	КонецЕсли;
	
	Если ВключатьНаборы Тогда
		Список.Добавить("НаборыМатериаловИРабот");
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокДокументовДляБлокировкиДанных(Форма)
	
	СписокДокументов = Новый Массив();
	
	Для каждого Строка Из Форма.Объект.Этапы Цикл
		Если Строка.ЭтоНовый Тогда
			Продолжить;
		КонецЕсли;
		СписокДокументов.Добавить(Новый Структура("Ссылка,ВерсияДанных",Строка.Ссылка,Строка.ВерсияДанных));
	КонецЦикла;
	
	Возврат СписокДокументов;

КонецФункции

&НаКлиенте
Функция ПроверитьЗаблокироватьДокументы(Отказ = Ложь)
	
	Если Не ДокументыЗаблокированы Тогда
		
		СписокДокументов = СписокДокументовДляБлокировкиДанных(ЭтаФорма);
		
		ТекстОшибки = "";
		ДокументыЗаблокированы = ЗаблокироватьДокументыНаСервере(
			СписокДокументов,
			УникальныйИдентификатор,
			ТекстОшибки);
		
		Если Не ДокументыЗаблокированы Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументыЗаблокированы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьДокументыНаСервере(Знач СписокДокументов, Знач УникальныйИдентификатор, ТекстОшибки = "")
	
	ДокументыЗаблокированы = Обработки.РедактированиеПоследовательностиЭтаповПроизводства.ЗаблокироватьДокументы(
		СписокДокументов,
		УникальныйИдентификатор,
		ТекстОшибки);
	
	Возврат ДокументыЗаблокированы;
	
КонецФункции

&НаСервере
Процедура РазблокироватьДокументы()
	
	Если Не ДокументыЗаблокированы Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = СписокДокументовДляБлокировкиДанных(ЭтаФорма);
	Обработки.РедактированиеПоследовательностиЭтаповПроизводства.РазблокироватьДокументы(СписокДокументов, УникальныйИдентификатор);
	
	ДокументыЗаблокированы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСсылкиНовыхДокументов()
	
	СсылкиНовыхДокументов.Очистить();
	
	Для Сч = 0 По 10 Цикл
		СсылкиНовыхДокументов.Добавить(Документы.ЭтапПроизводства2_2.ПолучитьСсылку());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСсылкуНовогоДокумента()
	
	Если СсылкиНовыхДокументов.Количество() > 0 Тогда
		СсылкаНового = СсылкиНовыхДокументов[0].Значение;
		СсылкиНовыхДокументов.Удалить(0);
	Иначе
		СсылкаНового = ПолучитьСсылкуНовогоДокументаНаСервере();
	КонецЕсли;
	
	Возврат СсылкаНового;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНовогоДокументаНаСервере()
	
	Если СсылкиНовыхДокументов.Количество() = 0 Тогда
		СоздатьСсылкиНовыхДокументов();
	КонецЕсли;
	
	СсылкаНового = СсылкиНовыхДокументов[0].Значение;
	СсылкиНовыхДокументов.Удалить(0);
	
	Возврат СсылкаНового;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий(Режим)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
		"ОбеспечениеМатериаламиИРаботами", 
		НСтр("ru = 'Обеспечение';
			|en = 'Supply'"));
		
	ПараметрыПроверки.Поля.Удалить("Склад");
	
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект,
				Объект.ОбеспечениеМатериаламиИРаботами,
				Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
				ПараметрыПроверки,
				Неопределено,
				Режим) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(Режим);
	ПараметрыФормы.ПараметрыУказанияСерий = ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.ОбеспечениеМатериаламиИРаботами, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		
		ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами", МассивВыделенныхСтрок);
		
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(ИмяТЧ)
	
	ВыделенныеСтроки = ПолучитьВыделенныеВСпискеСтроки(ИмяТЧ);
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОткрытьФорму("Справочник.ПричиныОтменыПроизводства.ФормаВыбора",
		,
		,
		,
		,
		,
		Новый ОписаниеОповещения("ОтменитьВыделенныеСтрокиВыборПричиныЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиВыборПричиныЗавершение(ПричинаОтмены, ДополнительныеПараметры) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьВыделенныеСтрокиНаСервере(
		ПричинаОтмены,
		ДополнительныеПараметры.ВыделенныеСтроки,
		ДополнительныеПараметры.ИмяТЧ);
		
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выделенные строки отменены';
										|en = 'Selected lines are canceled'"),,, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиНаСервере(ПричинаОтмены, ВыделенныеСтроки, ИмяТЧ)
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураДействий = Новый Структура;
		
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			
			Строка = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Строка.Отменено = Истина;
			Строка.ПричинаОтмены = ПричинаОтмены;
			Строка.Произведено = Ложь;
			
			ПараметрыПроверкиСерий = Новый Структура;
			ПараметрыПроверкиСерий.Вставить("Склад", Строка.Получатель);
			ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшируемыеЗначения);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			Строка = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ИдентификаторСтроки);
			Строка.Отменено = Истина;
			Строка.ПричинаОтмены = ПричинаОтмены;
		КонецЦикла;
		
		ЗаполнитьСтатусыУказанияСерийСервер("ОбеспечениеМатериаламиИРаботами");
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
			Строка = Объект.Трудозатраты.НайтиПоИдентификатору(ИдентификаторСтроки);
			Строка.Отменено = Истина;
			Строка.ПричинаОтмены = ПричинаОтмены;
			
			Если Строка.Выполнено Тогда
				Строка.Выполнено = Ложь;
				ТрудозатратыВыполненоПриИзмененииНаСервере(ИдентификаторСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ИмяТЧ, ВидЦены, Валюта, Идентификаторы)
	
	СтрокиКОбработке = Новый Массив;
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(Идентификатор);
		Если ДанныеСтроки.Произведено Тогда
			СтрокиКОбработке.Добавить(ДанныеСтроки);
		КонецЕсли;
		ДанныеСтроки.Цена  = 0;
		ДанныеСтроки.Сумма = 0;
	КонецЦикла;
	
	ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенВыпуска(
		ВидЦены,
		Валюта,
		НачалоДняТекущаяДатаСеанса());
		
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	
	ЦеныЗаполнены = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
		Объект[ИмяТЧ], // Табличная часть
		СтрокиКОбработке, // Массив строк или структура отбора
		ПараметрыЗаполнения, // Параметры заполнения
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму",
			"КоличествоУпаковок"));
	
	Возврат ЦеныЗаполнены;
	
КонецФункции

&НаКлиенте
Процедура РазбитьСтрокуТЧ(ИмяТЧ)
	
	ТаблицаФормы  = Элементы[ИмяТЧ];
	ДанныеТаблицы = Объект[ИмяТЧ];
	
	Если Не РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(ТаблицаФормы) Тогда
		Возврат;
	ИначеЕсли ТаблицаФормы.ТекущиеДанные.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Команда не может быть выполнена для выбранной строки!';
										|en = 'Command cannot be executed for the selected line.'"));
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	Если ИмяТЧ = "Трудозатраты" Тогда
		ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru = 'Введите количество в новой строке';
													|en = 'Enter quantity in a new line'");
		ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	КонецЕсли;
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧЗавершение", ЭтотОбъект, ИмяТЧ);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЗавершение(НоваяСтрока, ИмяТЧ) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия"
		ИЛИ ИмяТЧ = "ПобочныеИзделия"
		ИЛИ ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" 
		ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		НоваяСтрока.КодСтроки = 0;
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		НоваяСтрока.КлючНоменклатура = Неопределено;
	КонецЕсли;
	
	Если ИмяТЧ = "Трудозатраты" Тогда
		НоваяСтрока.КлючВидРабот = Неопределено;
	КонецЕсли;
		
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия"
		ИЛИ ИмяТЧ = "ПобочныеИзделия"
		ИЛИ ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
		ИЛИ ИмяТЧ = "ЭкономияМатериалов"
		ИЛИ ИмяТЧ = "РасходМатериаловИРабот" Тогда
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		Если ИмяТЧ = "ПобочныеИзделия" Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(
			СтруктураДействий,
			"ОбновитьКэшНоменклатура",
			ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект));
			
		ОбработатьРазделениеСтрокиВходящейВНабор(НоваяСтрока);
		
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, ТекущиеДанные, СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваСворачиваемойГруппы(ЭлементГруппа, КартинкаГруппы, ГруппаСвернута)

	ЭлементГруппа.Видимость = НЕ ГруппаСвернута;
	
	Если ГруппаСвернута Тогда
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияЦенВыпуска(ОбъектЭтап)
	
	ТекущаяДатаСеанса = НачалоДняТекущаяДатаСеанса();
	
	ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенВыпуска(
		ОбъектЭтап.ВидЦены,
		ОбъектЭтап.Валюта,
		ТекущаяДатаСеанса);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораЭтапаПроизводстваВСтроке(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых будет заполнен этап производства.';
									|en = 'Select lines to fill in a production stage.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура();
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ОтборСтрок.Вставить("НомерСледующегоЭтапа", 0);
	КонецЕсли;
	
	Если ИмяТЧ = "Трудозатраты"
		ИЛИ ИмяТЧ = "РасходМатериаловИРабот"
		ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		ОтборСтрок.Вставить("ПроизводствоНаСтороне", Ложь);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ОтборСтрок);
	ПараметрыФормы.Вставить("АдресСписокЭтапов", СписокЭтаповВХранилище());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЭтапаПроизводства", ЭтотОбъект, ИмяТЧ);
	ОткрытьФорму("Обработка.РедактированиеПоследовательностиЭтаповПроизводства.Форма.ФормаВыбораЭтапа", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЭтапаПроизводства(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, РезультатЗакрытия);
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	ОбработатьИзменениеЭтапаПроизводстваВСтроках(ВыделенныеСтроки, ИмяТЧ, РезультатЗакрытия);
	
	Если ИмяТЧ = "РасходМатериаловИРабот" ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		ПроверитьОбработатьИзменениеОтметкиВыполнения(ОбъектЭтап, Истина);
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ЗаполнитьСписокВыбораНазначенийОбеспечения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокЭтаповВХранилище()
	
	СписокЭтапов = Объект.Этапы.Выгрузить(Новый Структура("ТолькоПросмотр, ПометкаУдаления", Ложь, Ложь));
	
	Адрес = ПоместитьВоВременноеХранилище(СписокЭтапов, ЭтаФорма.УникальныйИдентификатор);
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаСтрокиПриНачалеРедактирования(ИмяТЧ, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
		
		СтруктураДанных = Новый Структура;
		Если Не Копирование И ЗначениеЗаполнено(СсылкаПоУмолчанию)Тогда
			СтруктураДанных.Вставить("Ссылка", СсылкаПоУмолчанию);
		ИначеЕсли Копирование И ТекущиеДанные.ТолькоПросмотр Тогда
			СтруктураДанных.Вставить("Ссылка", Неопределено);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных) Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных, "Ссылка");
		КонецЕсли;
		
		ЗаполнитьСлужебныеРеквизитыПоСсылке(ТекущиеДанные, ИмяТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачалоДняТекущаяДатаСеанса()
	
	#Если Сервер Тогда
	Возврат НачалоДня(ТекущаяДатаСеанса());
	#Иначе
	Возврат НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПутьКТабличнойЧасти(Знач ИмяТабличнойЧасти, Знач НомерСтроки, Знач ИмяРеквизита)

	Возврат "Объект." + ИмяТабличнойЧасти + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяРеквизита;

КонецФункции

&НаКлиенте
Функция ПолучитьВыделенныеВСпискеСтроки(ИмяТЧ, ВыводитьСообщенияОбОшибках = Истина)
	
	МассивСтрок = Новый Массив;
	
	Список = Элементы[ИмяТЧ];
	Если Список.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
			Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(Список.ВыделенныеСтроки[Итератор]);
				Если ДанныеСтроки.ТолькоПросмотр Тогда
					Продолжить;
				КонецЕсли;
				МассивСтрок.Добавить(Список.ВыделенныеСтроки[Итератор]);
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьСообщенияОбОшибках И МассивСтрок.Количество() = 0 Тогда
			Если Список.ВыделенныеСтроки.Количество() > 1 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для выделенных строк!';
												|en = 'Cannot execute the command for the selected lines.'"));
			Иначе
				ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для выделенной строки!';
												|en = 'Cannot execute the command for the selected line.'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВыводитьСообщенияОбОшибках Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения действия необходимо выбрать строки!';
										|en = 'Select lines to perform the action.'"));
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте
Функция ПроверитьСтрокиТабличнойЧастиПередУдалением(ИмяТЧ, Отказ)
	
	Список = Элементы[ИмяТЧ];
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(Список.ВыделенныеСтроки[Итератор]);
			Если ДанныеСтроки.ТолькоПросмотр Тогда
				Отказ = Истина;
				Если Список.ВыделенныеСтроки.Количество() > 1 Тогда
					ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для выделенных строк!';
													|en = 'Cannot execute the command for the selected lines.'"));
				Иначе
					ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для выделенной строки!';
													|en = 'Cannot execute the command for the selected line.'"));
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОчиститьСтрокиТабличнойЧасти(ИмяТЧ)
	
	Для Индекс = -Объект[ИмяТЧ].Количество() + 1 По 0 Цикл
		
		Строка = Объект[ИмяТЧ][-Индекс];
		
		Если Строка.ТолькоПросмотр Тогда
			Продолжить;
		КонецЕсли;
		
		Объект[ИмяТЧ].Удалить(Строка);
		
	КонецЦикла;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		УправлениеДаннымиОбИзделиях.ОбновитьТаблицуНаборыМатериаловИРабот(Объект);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, Форма, СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные)

	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущиеДанные, ПараметрыРаспределенияЗатрат);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПотребительНачалоВыбора(ТекущиеДанные, ИмяТЧ)
	
	ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, ТекущиеДанные.Ссылка);
	ЭлементТабличнаяЧасть = Элементы[ИмяТЧ];//ТаблицаФормы - 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ЭлементТабличнаяЧасть.ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапПотребительНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеПроизводствомКлиент.ОткрытьФормуВыбораЭтапаПотребителя(
		ОбъектЭтап,
		ТекущиеДанные,
		ЭтаФорма,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПотребительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект[Параметры.ИмяТЧ].НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Строка.ЭтапПотребитель = Результат;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПоНоменклатуреКонструктор()
	
	Возврат Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
	
КонецФункции

&НаСервере
Функция ФорматированнаяСтрокаСпецификацияЭтап()
	
	Если НЕ Объект.Спецификация.Пустая() Тогда
		СтрокаСпецификация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Спецификация, "Наименование");
		Результат = Новый ФорматированнаяСтрока(СтрокаСпецификация,,,, ПолучитьНавигационнуюСсылку(Объект.Спецификация));
	Иначе
		СтрокаСпецификация = "<" + НСтр("ru = 'нет спецификации';
										|en = 'no BOM'") + ">";
		Результат = Новый ФорматированнаяСтрока(СтрокаСпецификация);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипыНоменклатуры(ИмяТЧ)
	
	ДоступныНаборы = (ИмяТЧ = "ОбеспечениеМатериаламиИРаботами")
		И ДоступноИспользованиеНаборовВПроизводстве;
	
	МассивТиповНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(ДоступныНаборы);
	
	Возврат МассивТиповНоменклатуры;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаОбъектаПоИмени(Объект, ИмяТаблицы)
	
	Если ИмяТаблицы = "Этап" Тогда
		ТаблицаОбъекта = Объект.Этапы;
	
	ИначеЕсли ИмяТаблицы = "ВыходныеИзделия" Тогда
		ТаблицаОбъекта = Объект.ВыходныеИзделия;
	
	ИначеЕсли ИмяТаблицы = "ПобочныеИзделия" Тогда
		ТаблицаОбъекта = Объект.ПобочныеИзделия;
	
	ИначеЕсли ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами" Тогда
		ТаблицаОбъекта = Объект.ОбеспечениеМатериаламиИРаботами;
	
	ИначеЕсли ИмяТаблицы = "Трудозатраты" Тогда
		ТаблицаОбъекта = Объект.Трудозатраты;
	
	ИначеЕсли ИмяТаблицы = "РасходМатериаловИРабот" Тогда
		ТаблицаОбъекта = Объект.РасходМатериаловИРабот;
	
	ИначеЕсли ИмяТаблицы = "ЭкономияМатериалов" Тогда
		ТаблицаОбъекта = Объект.ЭкономияМатериалов;
	
	ИначеЕсли ИмяТаблицы = "ВыходныеИзделияСерии" Тогда
		ТаблицаОбъекта = Объект.ВыходныеИзделияСерии;
	
	ИначеЕсли ИмяТаблицы = "ПобочныеИзделияСерии" Тогда
		ТаблицаОбъекта = Объект.ПобочныеИзделияСерии;
	
	ИначеЕсли ИмяТаблицы = "ЭкономияМатериаловСерии" Тогда
		ТаблицаОбъекта = Объект.ЭкономияМатериаловСерии;
	
	Иначе
		ТаблицаОбъекта = Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаОбъекта;
	
КонецФункции

&НаСервере
Функция ВременныеТаблицыДанныхОбъекта(СписокЭтапов) 
	
	ТекстыЗапроса = Новый Массив;
	Запрос = Новый Запрос;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Дата КАК Дата,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ВнутренняяПереработка КАК ВнутренняяПереработка,
	|	Таблица.ОрганизацияДавалец КАК ОрганизацияДавалец,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ПартияПроизводства КАК ПартияПроизводства,
	|	Таблица.Распоряжение КАК Распоряжение,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ВыпускПодДеятельность КАК ВыпускПодДеятельность,
	|	Таблица.Статус КАК Статус,
	|	Таблица.ВидЦены КАК ВидЦены,
	|	Таблица.Валюта КАК Валюта,
	|	Таблица.НомерЭтапа КАК НомерЭтапа,
	|	Таблица.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	Таблица.НаименованиеЭтапа КАК НаименованиеЭтапа,
	|
	|	Таблица.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	Таблица.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	|	Таблица.ПроизводствоНаСтороне2_5 КАК ПроизводствоНаСтороне2_5,
	|	Таблица.ЗаказПереработчику КАК ЗаказПереработчику,
	|	
	|	Таблица.ОставитьИзделияУПереработчика КАК ОставитьИзделияУПереработчика,
	|	Таблица.ПроизводствоОднойДатой КАК ПроизводствоОднойДатой,
	|	Таблица.ДатаПроизводства КАК ДатаПроизводства,
	|	Таблица.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
	|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Таблица.РасходОднойДатой КАК РасходОднойДатой,
	|	Таблица.ДатаРасхода КАК ДатаРасхода,
	|	Таблица.ВыполнениеРаботОднойДатой КАК ВыполнениеРаботОднойДатой,
	|	Таблица.ДатаВыполненияРабот КАК ДатаВыполненияРабот, 
	|	Таблица.ДлительностьДоВыпуска КАК ДлительностьДоВыпуска,	
	|
	|	Таблица.ФактическоеНачалоЭтапа КАК ФактическоеНачалоЭтапа,
	|	Таблица.ФактическоеОкончаниеЭтапа КАК ФактическоеОкончаниеЭтапа,
	|
	|	Таблица.Назначение КАК Назначение,
	|
	|	Таблица.КоличествоУпаковокПлан КАК КоличествоУпаковокПлан,
	|	Таблица.УпаковкаПлан КАК УпаковкаПлан,
	|	Таблица.УпаковкаФакт КАК УпаковкаФакт,
	|	Таблица.УпаковкаОтменено КАК УпаковкаОтменено,
	|
	|	Таблица.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	Таблица.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
	|
	|	Таблица.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия
	|
	|ПОМЕСТИТЬ Этапы
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|Где
	|	Таблица.Ссылка в (&ЭтапПроизводства)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.СписатьНаРасходы,
	|	ТабличнаяЧасть.СтатьяРасходов,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.ЭтапПотребитель,
	|	ТабличнаяЧасть.Получатель,
	|	ТабличнаяЧасть.ДатаПроизводства,
	|	ТабличнаяЧасть.ДоляСтоимости,
	|	ТабличнаяЧасть.Произведено,
	|	ТабличнаяЧасть.Отменено,
	|	ТабличнаяЧасть.ПричинаОтмены,
	|	ТабличнаяЧасть.ОбработатьПоСпецификации,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.Цена КАК Цена,
	|	ТабличнаяЧасть.Сумма,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.СтатусУказанияСерий,
	|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
	|	ТабличнаяЧасть.АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов,
	|	ТабличнаяЧасть.НастройкаСчетовУчета,
	|	ТабличнаяЧасть.ИдентификаторСтроки,
	|	ТабличнаяЧасть.КодСтроки,
	|	ТабличнаяЧасть.Подразделение
	|ПОМЕСТИТЬ ВыходныеИзделия
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.СписатьНаРасходы,
	|	ТабличнаяЧасть.СтатьяРасходов,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.ЭтапПотребитель,
	|	ТабличнаяЧасть.Получатель,
	|	ТабличнаяЧасть.Произведено,
	|	ТабличнаяЧасть.ДатаПроизводства,
	|	ТабличнаяЧасть.Отменено,
	|	ТабличнаяЧасть.ПричинаОтмены,
	|	ТабличнаяЧасть.ОбработатьПоСпецификации,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.Цена,
	|	ТабличнаяЧасть.Сумма,
	|	ТабличнаяЧасть.СтатьяКалькуляции,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.СтатусУказанияСерий,
	|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
	|	ТабличнаяЧасть.АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов,
	|	ТабличнаяЧасть.НастройкаСчетовУчета,
	|	ТабличнаяЧасть.ИдентификаторСтроки,
	|	ТабличнаяЧасть.КодСтроки,
	|	ТабличнаяЧасть.Подразделение
	|ПОМЕСТИТЬ ПобочныеИзделия
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.Склад,
	|	ТабличнаяЧасть.ДатаОтгрузки,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.НазначениеОбеспечения,
	|	ТабличнаяЧасть.Производится,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.СтатьяКалькуляции,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.Отменено,
	|	ТабличнаяЧасть.ПричинаОтмены,
	|	ТабличнаяЧасть.СтатусУказанияСерий,
	|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.ВариантОбеспечения,
	|	ТабличнаяЧасть.Обособленно,
	|	ТабличнаяЧасть.ИдентификаторСтроки,
	|	ТабличнаяЧасть.КодСтроки,
	|	ТабличнаяЧасть.Подразделение
	|ПОМЕСТИТЬ ОбеспечениеМатериаламиИРаботами
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.ДатаРасхода,
	|	ТабличнаяЧасть.СтатьяКалькуляции,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.СтатусУказанияСерий,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.ИдентификаторСтроки,
	|	ТабличнаяЧасть.Подразделение
	|ПОМЕСТИТЬ РасходМатериаловИРабот
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.СписатьНаРасходы,
	|	ТабличнаяЧасть.ДатаОперации,
	|	ТабличнаяЧасть.СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов,
	|	ТабличнаяЧасть.Получатель,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.СтатусУказанияСерий,
	|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.СписатьНаРасходы,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов,
	|	ТабличнаяЧасть.НастройкаСчетовУчета,
	|	ТабличнаяЧасть.ИдентификаторСтроки,
	|	ТабличнаяЧасть.Подразделение
	|ПОМЕСТИТЬ ЭкономияМатериалов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.Исполнитель,
	|	ТабличнаяЧасть.Выполнено,
	|	ТабличнаяЧасть.ДатаВыполнения,
	|	ТабличнаяЧасть.СтатьяКалькуляции,
	|	ТабличнаяЧасть.Отменено,
	|	ТабличнаяЧасть.ПричинаОтмены,
	|	ТабличнаяЧасть.КодСтроки,
	|	ТабличнаяЧасть.Подразделение
	|ПОМЕСТИТЬ Трудозатраты
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса); 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Получатель,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.Произведено,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.ДатаПроизводства,
	|	ТабличнаяЧасть.Отменено,
	|	ТабличнаяЧасть.Подразделение
	|ПОМЕСТИТЬ ВыходныеИзделияСерии
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Получатель,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.Произведено,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.ДатаПроизводства, 
	|	ТабличнаяЧасть.Отменено,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.ВладелецИзделия
	|ПОМЕСТИТЬ ПобочныеИзделияСерии
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.Получатель,
	|	ТабличнаяЧасть.ДатаОперации,
	|	ТабличнаяЧасть.Подразделение, 
	|	ТабличнаяЧасть.Назначение
	|ПОМЕСТИТЬ ЭкономияМатериаловСерии
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериаловСерии КАК ТабличнаяЧасть
	|Где
	|	ТабличнаяЧасть.Ссылка в (&ЭтапПроизводства)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЭтапПроизводства", СписокЭтапов);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

&НаСервереБезКонтекста
Функция НазначениеСуществует(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|ГДЕ
		|	Назначения.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить статью калькуляции.';
									|en = 'Select the lines for which it is required to populate the product cost element.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	
	ТипыЗатрат = ПроизводствоКлиент.ТипыЗатратДляВыбораСтатьиКалькуляции(ИмяТЧ);
	Если ТипыЗатрат.ВГраница() <> -1 Тогда
		ПараметрыОтбора.Вставить("ТипЗатрат", ТипыЗатрат);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.СтатьяКалькуляции = РезультатЗакрытия;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(ИмяТЧ)
	
	ОчиститьСообщения();
	ВыделенныеСтроки = ПолучитьВыделенныеВСпискеСтроки(ИмяТЧ);
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	Если Не ПроверитьЗаблокироватьДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Идентификаторы = Новый Массив;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаОбъектаПоИмени(Объект, ИмяТЧ).НайтиПоИдентификатору(Строка);
		Если (ДанныеСтроки.Произведено ИЛИ ДанныеСтроки.Цена <> 0)
			И ДанныеСтроки.ИспользоватьПлановуюСтоимость Тогда
			
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
			Идентификаторы.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенных строках отсутствуют позиции, доступные для заполнения по виду цен.';
								|en = 'There are no items available for population by a price type in the selected lines.'");
		ПоказатьПредупреждение( , ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Валюта = Неопределено;
	ВидЦены = Неопределено;
	Для каждого Ссылка Из МассивСсылок Цикл
		
		ОбъектЭтап = ОбъектЭтапПоСсылке(ЭтаФорма, Ссылка);
		
		Если ВидЦены = Неопределено Или Валюта = Неопределено Тогда
			Валюта = ОбъектЭтап.Валюта;
			ВидЦены = ОбъектЭтап.ВидЦены;
			Продолжить;
		КонецЕсли;
		
		Если ВидЦены <> ОбъектЭтап.ВидЦены Или Валюта <> ОбъектЭтап.Валюта Тогда
			
			ТекстСообщения = НСтр("ru = 'В выделенных строках используются различные виды цен и/или валюты, заполнение не возможно.';
									|en = 'Different price types and/or currency kinds are used in the selected lines. Cannot populate.'");
			ПоказатьПредупреждение( , ТекстСообщения);
			
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенных строках не заполнено поле ""Вид цены""';
								|en = '""Price type"" is required in selected lines'");
		ПоказатьПредупреждение( , ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ИмяТЧ, ВидЦены, Валюта, Идентификаторы);
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПлановойКалькуляции(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПлановыеКалькуляцииИЦеныНаСервере(ДополнительныеПараметры.ИдентификаторыСтрок, 
		Результат,
		ДополнительныеПараметры.Валюта);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлановыеКалькуляцииИЦеныНаСервере(ИдентификаторыСтрок = Неопределено, Калькуляция = Неопределено, Валюта)
	
	Если ИдентификаторыСтрок <> Неопределено Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
			
			СтрокаТовара = Объект.ВыходныеИзделия.НайтиПоИдентификатору(Идентификатор);
			МассивСтрок.Добавить(СтрокаТовара);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ПлановаяКалькуляция2_2.ОписаниеПараметраЗаполненияЦенВКоллекции();
	ПараметрыЗаполнения.ДатаДокумента = ТекущаяДатаСеанса();
	ПараметрыЗаполнения.ВалютаДокумента = Валюта;
	ПараметрыЗаполнения.Калькуляция = Калькуляция;
	
	Документы.ПлановаяКалькуляция2_2.ЗаполнитьЦеныПоКалькуляцииВКоллекции(
		Объект.ВыходныеИзделия,
		МассивСтрок,
		ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти