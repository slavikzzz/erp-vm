
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для администрирования обновления через копию.';
								|en = 'Insufficient rights to manage the update via copy.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ИнициализироватьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеТекущегоСостоянияНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияШапкаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ОбновлениеЧерезКопию", "ОписаниеПолное", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаАсинхронногоОбновленияИБНажатие(Элемент)
	
	ПриостановитьВозобновитьОтправкуДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхВозобновитьНажатие(Элемент)
	
	ПриостановитьВозобновитьОтправкуДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхПриостановитьНажатие(Элемент)
	
	ПриостановитьВозобновитьОтправкуДанных(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТранспортаОбменаНажатие(Элемент)
	
	НастроитьТранспортОбменаВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхРасписаниеНажатие(Элемент)
	
	Расписание = ТекущееРасписаниеРегламентногоЗадания();
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияДиалогаРегламентногоЗадания", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияДиалогаРегламентногоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", Результат);
	
	ИзменитьПараметрыРегламетногоЗаданияОтправкиСообщений(ПараметрыЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриостановитьВозобновитьОтправкуДанных(Использование)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	
	ИзменитьПараметрыРегламетногоЗаданияОтправкиСообщений(ПараметрыЗадания);
	ИспользуетсяРегламентноеЗадание = ПараметрыЗадания.Использование;
	
	НастройкаТранспортаОбменаЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Функция НастройкиПодключенияКонструктор(Корреспондент)
	
	Настройки = Новый Структура;
	Настройки.Вставить("КодУзла", "");
	Настройки.Вставить("КодУзлаКорреспондента", "");
	Настройки.Вставить("ИдентификаторНастройки", "");
	Настройки.Вставить("ИмяПланаОбмена", "ОбновлениеЧерезКопию");
	Настройки.Вставить("ИмяПланаОбменаКорреспондента", "ОбновлениеЧерезКопию");
	Настройки.Вставить("ВариантНастройкиОбмена", "");
	Настройки.Вставить("ФорматОбмена", Неопределено);
	Настройки.Вставить("УзелИнформационнойБазы", Корреспондент);
	Настройки.Вставить("ВариантРаботыМастера", "");
	Настройки.Вставить("СсылкаНового", Неопределено);
	Настройки.Вставить("КодПредопределенногоУзла", "");
	Настройки.Вставить("КодНовогоУзлаВторойБазы", "");
	Настройки.Вставить("НаименованиеЭтойБазы", "");
	Настройки.Вставить("НаименованиеВторойБазы", "");
	Настройки.Вставить("ПрефиксИнформационнойБазыИсточника", "");
	Настройки.Вставить("ПрефиксИнформационнойБазыПриемника", "");
	Настройки.Вставить("ИспользоватьПрефиксыДляНастройкиОбмена", Ложь);
	Настройки.Вставить("ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента", Ложь);
	Настройки.Вставить("ИдентификаторИнформационнойБазыИсточника", "");
	Настройки.Вставить("ИдентификаторИнформационнойБазыПриемника", "");
	Настройки.Вставить("ВерсияФорматаФайлаНастроекОбменаДанными", "");
	Настройки.Вставить("ВерсияФорматаОбмена", "");
	Настройки.Вставить("ВерсииФорматаОбмена", Новый Массив);
	Настройки.Вставить("ПоддерживаемыеОбъектыФормата", Неопределено);
	Настройки.Вставить("ПоддерживаемыеОбъектыФорматаКорреспондента", Неопределено);
	Настройки.Вставить("ИдентификаторТранспорта", "FILE");
	Настройки.Вставить("НастройкиТранспорта", Новый Структура);
	Настройки.Вставить("ДанныеАутентификации", Новый Структура);
	Настройки.Вставить("WSКонечнаяТочкаКорреспондента", "");
	Настройки.Вставить("WSОбластьДанныхКорреспондента", 0);
	Настройки.Вставить("ВосстановлениеНастроекОбмена", "");
	Настройки.Вставить("НомерОтправленного", 0);
	Настройки.Вставить("НомерПринятого", 0);
	Настройки.Вставить("ИсправитьДублированиеНастроекСинхронизации");
	Настройки.Вставить("УзелКорреспондентаЕстьВЭтойБазе");
	Настройки.Вставить("ЭтотУзелЕстьВКорреспонденте");
	
	ЕстьНастройки = ЕстьНастройкаТранспортаОбменаОбновления();
	Если ЕстьНастройки Тогда
		
		Настройки.НастройкиТранспорта = ТранспортСообщенийОбменаВызовСервера.НастройкиТранспорта(Корреспондент, Настройки.ИдентификаторТранспорта);
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Процедура НастроитьТранспортОбменаВыгрузки()
	
	НастройкиПодключения = НастройкиПодключенияКонструктор(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиПодключения", НастройкиПодключения);
	ПараметрыФормы.Вставить("ИдентификаторНастройки", НастройкиПодключения.ИдентификаторНастройки);
	ПараметрыФормы.Вставить("НастройкиТранспорта", НастройкиПодключения.НастройкиТранспорта);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеНастройкиТранспортаСообщений", ЭтотОбъект, НастройкиПодключения);
	
	ПолноеИмяФормыНастройки = ТранспортСообщенийОбменаВызовСервера.ПолноеИмяФормыПервойНастройки(НастройкиПодключения.ИдентификаторТранспорта);
	ОткрытьФорму(ПолноеИмяФормыНастройки, ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиТранспортаСообщений(Результат, НастройкиПодключения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭтоДобавлениеНастроекТранспорта = (НастройкиПодключения.НастройкиТранспорта.Количество() = 0);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ЭтоДобавлениеНастроекТранспорта", ЭтоДобавлениеНастроекТранспорта);
	СтруктураНастроек.Вставить("ИдентификаторТранспорта", НастройкиПодключения.ИдентификаторТранспорта);
	СтруктураНастроек.Вставить("Корреспондент", НастройкиПодключения.УзелИнформационнойБазы);
	СтруктураНастроек.Вставить("НастройкаПоУмолчанию", Истина);
	СтруктураНастроек.Вставить("Настройки", Результат);
	
	ЕстьНастройкаТранспорта = Неопределено;
	ПослеНастройкиТранспортаСообщенийНаСервере(СтруктураНастроек, ЕстьНастройкаТранспорта);
	
	Если ЕстьНастройкаТранспорта = Истина Тогда
		
		НастройкаТранспортаОбменаЭлементыФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекущееРасписаниеРегламентногоЗадания()
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Метаданные", "ОбновлениеЧерезКопиюОтправкаПолучение");
	
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданий);
	Для каждого РегЗадание Из НайденныеЗадания Цикл
		
		Возврат РегЗадание.Расписание;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЕстьПравилаОбменаДанными(ТекущаяВерсия, ОбновляемаяВерсия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена,
	|	ПравилаДляОбменаДанными.ВидПравил,
	|	ПравилаДляОбменаДанными.ИмяМакетаПравил,
	|	ПравилаДляОбменаДанными.ИмяМакетаПравилКорреспондента,
	|	ПравилаДляОбменаДанными.ИмяПланаОбменаИзПравил,
	|	ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиВыгрузки,
	|	ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиЗагрузки,
	|	ПравилаДляОбменаДанными.ИмяФайлаПравил,
	|	ПравилаДляОбменаДанными.ИмяФайлаПротоколаОбмена,
	|	ПравилаДляОбменаДанными.ИнформацияОПравилах,
	|	ПравилаДляОбменаДанными.ИсточникПравил,
	|	ПравилаДляОбменаДанными.НеОстанавливатьПоОшибке,
	|	ПравилаДляОбменаДанными.ПравилаXML,
	|	ПравилаДляОбменаДанными.ПравилаXMLКорреспондента,
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные,
	|	ПравилаДляОбменаДанными.ПравилаЗачитанныеКорреспондента,
	|	ПравилаДляОбменаДанными.РежимОтладки,
	|	ПравилаДляОбменаДанными.РежимОтладкиВыгрузки,
	|	ПравилаДляОбменаДанными.РежимОтладкиЗагрузки,
	|	ПравилаДляОбменаДанными.РежимПротоколированияОбменаДанными,
	|	ПравилаДляОбменаДанными.УдалитьИспользоватьФильтрВыборочнойРегистрацииОбъектов,
	|	ПравилаДляОбменаДанными.ПравилаЗагружены
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = ""ОбновлениеЧерезКопию""
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены = ИСТИНА
	|	И ПравилаДляОбменаДанными.ВидПравил = Значение(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов Тогда
			
			СтруктураПравил = Выборка.ПравилаЗачитанные.Получить().Конвертация;
			СтруктураПравилКорреспондента = Выборка.ПравилаЗачитанныеКорреспондента.Получить().Конвертация;
			
			Если СтруктураПравил.Свойство("Источник")
				И СтруктураПравил.Источник = Метаданные.Имя
				И СтруктураПравилКорреспондента.Свойство("Источник")
				И СтруктураПравилКорреспондента.Источник = Метаданные.Имя
				И СтруктураПравил.ВерсияКонфигурацииИсточника = ТекущаяВерсия 
				И СтруктураПравилКорреспондента.ВерсияКонфигурацииИсточника = ОбновляемаяВерсия Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьВозможностьВключитьИспользованиеРегламентногоЗадания(ТекстОшибки)
	Перем ЭтотУзел;
	
	Результат = Ложь;
	
	ЭтотУзел = ПланыОбмена.ОбновлениеЧерезКопию.ЭтотУзел();
	
	ШаблонТекста = НСтр("ru = 'Нет возможности включить выгрузку данных по причине:
		|	%1.';
		|en = 'Cannot enable data import. Reason:
		|	%1.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если НЕ ЗначениеЗаполнено(ЭтотУзел)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Проблематика = НСтр("ru = 'отсутствует узел обновления.';
							|en = 'update assembly is missing.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтрШаблон(ШаблонТекста, Проблематика);
		
		Возврат Результат;
		
	КонецЕсли;
	
	РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотУзел, "Код, ВерсияКорреспондента");
	
	Если РеквизитыУзлаОбмена.Код <> ТекущаяВерсия Тогда
		
		Если РеквизитыУзлаОбмена.ВерсияКорреспондента = ТекущаяВерсия
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(РеквизитыУзлаОбмена.Код,  РеквизитыУзлаОбмена.ВерсияКорреспондента) < 0 Тогда
			
			ВыполнитьНачальнуюНастройкуВерсийУзловЗагрузки(ЭтотУзел);
			Результат = Истина;
			
		Иначе
			
			Проблематика = НСтр("ru = 'ошибка настройки версий информационных баз.
				|Вероятно, информационная база не обновлена на новую версию либо 
				|команда выполняет в рабочей информационной базе.';
				|en = 'error when configuring infobase versions.
				|The infobase may have not been updated to a new version, or the command is running
				| in the working infobase.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтрШаблон(ШаблонТекста, Проблематика);
			
		КонецЕсли;
		
	ИначеЕсли РеквизитыУзлаОбмена.Код = ТекущаяВерсия Тогда
		
		Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(РеквизитыУзлаОбмена.Код, Объект.Код);
		Если Результат > 0 Тогда
			
			Результат = Истина;
			
		Иначе
			
			Проблематика = НСтр("ru = 'ошибка настройки версий информационных баз.
				|Вероятно, информационная база не обновлена на новую версию либо 
				|команда выполняет в рабочей информационной базе.';
				|en = 'error when configuring infobase versions.
				|The infobase may have not been updated to a new version, or the command is running
				| in the working infobase.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтрШаблон(ШаблонТекста, Проблематика);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЕстьПравилаОбменаДанными(ТекущаяВерсия, РеквизитыУзлаОбмена.ВерсияКорреспондента) Тогда
		
		ЭмулироватьЗагрузкуПравилОбменаДанными(ТекущаяВерсия, РеквизитыУзлаОбмена.ВерсияКорреспондента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЕстьНастройкаТранспортаОбменаОбновления()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Корреспондент", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Справочник.НастройкиТранспортаСообщенийОбмена.Корреспондент
	|ГДЕ
	|	Справочник.НастройкиТранспортаСообщенийОбмена.Корреспондент = &Корреспондент";
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьНастройкаТранспорта = (НЕ РезультатЗапроса.Пустой());
	
	Возврат ЕстьНастройкаТранспорта;
	
КонецФункции

&НаСервере
Функция ИспользуетсяРегламентноеЗаданиеОтправкиДанных()
	
	Если ЕстьНастройкаТранспорта <> Истина 
		ИЛИ ЗагрузкаВозможна <> Истина Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат НайтиПроверитьРегламентноеЗадание();
	
КонецФункции

&НаСервере
Функция НайтиПроверитьРегламентноеЗадание()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", "ОбновлениеЧерезКопиюОтправкаПолучение");
	
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если ТипЗнч(НайденныеЗадания) = Тип("Массив") Тогда // Локальный режим
		
		Для каждого РегЗадание Из  НайденныеЗадания Цикл
			
			Если РегЗадание.Использование = Истина Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе // Таблица значений, режим сервиса
		
		Для каждого СтрокаТаблицы Из  НайденныеЗадания Цикл
			
			Если СтрокаТаблицы.Использование = Истина Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОбновлениеЗавершено()
	
	Возврат Объект.ОбновлениеЗавершено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьНастройкиТранспорта(СтруктураНастроек)
	
	Справочники.НастройкиТранспортаСообщенийОбмена.ОбновитьНастройки(СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	ТекущаяВерсия = Метаданные.Версия;
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Обновление до версии %1';
									|en = 'Updating to version %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ТекущаяВерсия);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЭтапы", "Заголовок", ТекстЗаголовка);
	
	ПодобратьУзелОбмена();
	
	ЕстьНастройкаТранспорта = ЕстьНастройкаТранспортаОбменаОбновления();
	ИспользуетсяРегламентноеЗадание = ИспользуетсяРегламентноеЗаданиеОтправкиДанных();
	
	ОбновлениеЗавершено = ОбновлениеЗавершено();
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьУзелОбмена()
	Перем ЭтотУзел, УзелОбновления;
	
	УзлыОбновлений = ОбновлениеЧерезКопию.АктивныйУзелОбмена();
	УзлыОбновлений.Свойство("УзелОбновленияЭтот", ЭтотУзел);
	УзлыОбновлений.Свойство("УзелОбновленияКорреспондента", УзелОбновления);
	
	Если НЕ ЗначениеЗаполнено(УзелОбновления) Тогда
		
		УзлыОбновлений.Свойство("УзелОбновленияКорреспондентаПервыйЗапуск", УзелОбновления);
		
	КонецЕсли;
	
	Если ЭтотУзел.Код <> ТекущаяВерсия Тогда
		
		ОбновлениеНачато = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(УзелОбновления) Тогда
		
		ОбновлениеНачато = Ложь;
		
	ИначеЕсли УзелОбновления.Код <> ЭтотУзел.ВерсияКорреспондента Тогда
		
		ОбновлениеНачато = Ложь;
		
	Иначе
		
		Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ЭтотУзел.Код, УзелОбновления.Код);
		ОбновлениеНачато = (Результат > 0);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелОбновления) Тогда
		
		ДействиеПриОбмене = ОбновлениеЧерезКопию.ОпределитьВозможноеДействиеПриОбмене(ЭтотУзел, УзелОбновления);
		ЗагрузкаВозможна = (ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		
		УзелОбновленияОбъект = УзелОбновления.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(УзелОбновленияОбъект, "Объект");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Информационная база не является обновляемой копией.';
								|en = 'The infobase is not an updatable copy.'", ОбщегоНазначения.КодОсновногоЯзыка())
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеНастройкиТранспортаСообщенийНаСервере(СтруктураНастроек, ЕстьНастройкаТранспорта)
	
	ОбновитьНастройкиТранспорта(СтруктураНастроек);
	
	ЕстьНастройкаТранспорта = ЕстьНастройкаТранспортаОбменаОбновления();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНачальнуюНастройкуВерсийУзловЗагрузки(ЭтотУзел)
	
	ПрошлаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код");
	ЭмулироватьЗагрузкуПравилОбменаДанными(ТекущаяВерсия, ПрошлаяВерсия);
	
	НачатьТранзакцию();
	Попытка
		
		ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
		ЭтотУзелОбъект.Код = "00000.00000.00000.00001";
		ЭтотУзелОбъект.ОбменДанными.Загрузка = Истина;
		ЭтотУзелОбъект.Записать();
		
		Объект.Код = ПрошлаяВерсия;
		Объект.ВерсияКорреспондента = ТекущаяВерсия;
		Записать();
		
		ЭтотУзелОбъект.Код = ТекущаяВерсия;
		ЭтотУзелОбъект.ВерсияКорреспондента = ПрошлаяВерсия;
		ЭтотУзелОбъект.ОбменДанными.Загрузка = Истина;
		ЭтотУзелОбъект.Записать();
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Объект.Ссылка);
		
		Константы.ОбновлениеЧерезКопиюСостояние.Установить(Перечисления.СостоянияОбновлениеЧерезКопию.ЗагрузкаОбновлениеЧерезКопию);
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Объект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ОбновлениеЧерезКопию.ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЭмулироватьЗагрузкуПравилОбменаДанными(ТекущаяВерсия, ПрошлаяВерсия)
	
	ИмяВременногоКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("Идентификатор", Новый УникальныйИдентификатор());
	ПараметрыЗамены.Вставить("ДатаВремяСоздания", Формат(ТекущаяДатаСеанса(), НСтр("ru = 'ДФ=''yyyy-MM-dd''''T''''hh:mm:ss''';
																					|en = 'DF=''yyyy-MM-dd''''T''''hh:mm:ss'''"))); // 2020-06-08T13:57:00
	ПараметрыЗамены.Вставить("ТекущаяВерсия", ТекущаяВерсия);
	ПараметрыЗамены.Вставить("ПрошлаяВерсия", ПрошлаяВерсия);
	
	// Правила регистрации
	ИмяФайлаРегистрация = ИмяВременногоКаталога + "RegistrationRules.xml";
	ДобавитьВременныйФайлПоШаблону("ПравилаРегистрации", ИмяФайлаРегистрация, ПараметрыЗамены);
	
	// Правила обмена
	ИмяФайлаКонвертация = ИмяВременногоКаталога + "ExchangeRules.xml";
	ДобавитьВременныйФайлПоШаблону("ПравилаОбмена", ИмяФайлаКонвертация, ПараметрыЗамены);
	
	// Правила корреспондента
	ИмяФайлаКорреспондент = ИмяВременногоКаталога + "CorrespondentExchangeRules.xml";
	ДобавитьВременныйФайлПоШаблону("ПравилаОбменаКорреспондента", ИмяФайлаКорреспондент, ПараметрыЗамены);
	
	// Архив
	ИмяФайлаАрхива = СтрШаблон("%1-%2.zip", ПрошлаяВерсия, ТекущаяВерсия);
	ПолноеИмяАрхива = ИмяВременногоКаталога + ИмяФайлаАрхива;
	ЗаписьZipФайла = Новый ЗаписьZipФайла(ПолноеИмяАрхива);
	ЗаписьZipФайла.Добавить(ИмяФайлаРегистрация);
	ЗаписьZipФайла.Добавить(ИмяФайлаКонвертация);
	ЗаписьZipФайла.Добавить(ИмяФайлаКорреспондент);
	ЗаписьZipФайла.Записать();
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяАрхива));
	ЗагрузитьПравилаНаСервере(ПолноеИмяАрхива, ИмяФайлаАрхива, АдресВременногоХранилища, Неопределено);
	
	ФайловаяСистема.УдалитьВременныйКаталог(ИмяВременногоКаталога);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВременныйФайлПоШаблону(ИмяШаблона, ИмяФайла, ПараметрыЗамены)
	
	ВременныйФайл = Новый ЗаписьТекста;
	ВременныйФайл.Открыть(ИмяФайла, КодировкаТекста.UTF8, Символы.ПС, Истина);
	
	МакетПравилРегистрации = ПланыОбмена.ОбновлениеЧерезКопию.ПолучитьМакет(ИмяШаблона);
	Для Итератор = 0 По МакетПравилРегистрации.КоличествоСтрок() Цикл
		
		СтрокаТекста = МакетПравилРегистрации.ПолучитьСтроку(Итератор);
		Для каждого ОписаниеПараметра Из ПараметрыЗамены Цикл
			
			СтрокаТекста = СтрЗаменить(СтрокаТекста, "##" + ОписаниеПараметра.Ключ + "##", ОписаниеПараметра.Значение);
			
		КонецЦикла;
		
		ВременныйФайл.ЗаписатьСтроку(СтрокаТекста);
		
	КонецЦикла;
	ВременныйФайл.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПравилаНаСервере(ПолноеИмяАрхива, ИмяФайлаПравил, АдресВременногоХранилища, ОписаниеОшибки)
	
	ЗаписьПравилКонвертации = РегистрыСведений.ПравилаДляОбменаДанными.СоздатьМенеджерЗаписи();
	ЗаписьПравилКонвертации.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов;
	ЗаписьПравилКонвертации.ИмяПланаОбмена = "ОбновлениеЧерезКопию";
	ЗаписьПравилКонвертации.ИсточникПравил =  Перечисления.ИсточникиПравилДляОбменаДанными.Файл;
	
	ЗаписьПравилРегистрации = РегистрыСведений.ПравилаДляОбменаДанными.СоздатьМенеджерЗаписи();
	ЗаписьПравилРегистрации.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов;
	ЗаписьПравилРегистрации.ИмяПланаОбмена = "ОбновлениеЧерезКопию";
	ЗаписьПравилРегистрации.ИсточникПравил = Перечисления.ИсточникиПравилДляОбменаДанными.Файл;
	
	СтруктураЗаписейРегистра = Новый Структура();
	СтруктураЗаписейРегистра.Вставить("ЗаписьПравилКонвертации", ЗаписьПравилКонвертации);
	СтруктураЗаписейРегистра.Вставить("ЗаписьПравилРегистрации", ЗаписьПравилРегистрации);
	
	Отказ = Ложь;
	РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьКомплектПравил(Отказ, СтруктураЗаписейРегистра, ОписаниеОшибки, АдресВременногоХранилища, ПолноеИмяАрхива);
	
	Если Не Отказ Тогда
		
		ЗаписьПравилКонвертации.ИмяФайлаПравил = ИмяФайлаПравил;
		ЗаписьПравилРегистрации.ИмяФайлаПравил = ИмяФайлаПравил;
		
		ЗаписьПравилКонвертации.Записать();
		ЗаписьПравилРегистрации.Записать();
		
		// Кэш открытых сеансов для механизма регистрации стал неактуальным.
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПараметрыРегламетногоЗаданияОтправкиСообщений(НовыеПараметры)
	
	Если НовыеПараметры.Свойство("Использование")
		И НовыеПараметры.Использование = Истина Тогда
		
		ТекстОшибки = "";
		Если НЕ ЕстьВозможностьВключитьИспользованиеРегламентногоЗадания(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Метаданные", "ОбновлениеЧерезКопиюОтправкаПолучение");
	
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданий);
	
	Для каждого РегЗадание Из НайденныеЗадания Цикл
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, НовыеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЛогикаЭтаповОбновлений

&НаКлиенте
Процедура ОбновитьОтображениеТекущегоСостоянияНастройки()
	
	НастройкаТранспортаОбменаЭлементыФормы();
	
	Если ОбновлениеЗавершено Тогда
		
		ЗавершитьОбновлениеИнформационнойБазыЭлементыФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТранспортаОбменаЭлементыФормы(ПослеИсправленияОшибки = Ложь)
	
	Если ПослеИсправленияОшибки = Истина Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОшибкаОбновленияЧерезКопиюИБ", "Видимость", Ложь);
		
	КонецЕсли;
	
	Если ИспользуетсяРегламентноеЗадание Тогда
		
		КартинкаДекорации = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация48;
		
	Иначе
		
		КартинкаДекорации = БиблиотекаКартинок.СинхронизацияДанныхОтключение;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхПриостановить", "Видимость", ИспользуетсяРегламентноеЗадание);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхВозобновить", "Видимость", НЕ ИспользуетсяРегламентноеЗадание);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НастройкаТранспортаОбмена", "Доступность", НЕ ИспользуетсяРегламентноеЗадание);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхПриостановить", "Доступность", ЕстьНастройкаТранспорта);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхВозобновить", "Доступность", ЕстьНастройкаТранспорта);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхРасписание", "Доступность", НЕ ИспользуетсяРегламентноеЗадание И ЕстьНастройкаТранспорта);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "РазмерКартинки", ПредопределенноеЗначение("РазмерКартинки.Пропорционально"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "Картинка", КартинкаДекорации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбновлениеИнформационнойБазыЭлементыФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхПриостановить", "Доступность", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхВозобновить", "Доступность", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "РазмерКартинки", ПредопределенноеЗначение("РазмерКартинки.РеальныйРазмер"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "Картинка", БиблиотекаКартинок.Успешно);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЗавершение", "Картинка", БиблиотекаКартинок.Успешно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа9", "Видимость", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти