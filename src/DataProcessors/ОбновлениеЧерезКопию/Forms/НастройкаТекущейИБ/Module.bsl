
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбновлениеЧерезКопию.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		
		ТекстСообщения = НСтр("ru = 'В этой информационной базе есть незавершенное обновление. 
			|Обновление через копию необходимо выполнять после окончания монопольной и отложенной части предыдущего обновления';
			|en = 'There is a pending update in this infobase.
			|Update via copy must be performed after the exclusive and deferred portion of the previous update'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для администрирования обновления через копию.';
								|en = 'Insufficient rights to manage the update via copy.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ИнициализироватьДанныеФормы();
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ФоновоеЗаданиеИдентификатор", Неопределено);
	ПараметрыДлительнойОперации.Вставить("ФоновоеЗаданиеРезультат", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеТекущегоСостоянияНастройки();
	СообщитьПользователюООшибках();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияШапкаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ОбновлениеЧерезКопию", "ОписаниеПолное", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаАсинхронногоОбновленияИБНажатие(Элемент)
	
	ЗавершитьЭтап(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПравилаКонвертацииЗагрузитьНажатие(Элемент)
	
	ЗавершитьЭтап(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРегистрациюДанныхНажатие(Элемент)
	
	ЗавершитьЭтап(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КопияТекущейИБНажатие(Элемент)
	
	ЗавершитьЭтап(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхПриостановитьНажатие(Элемент)
	
	ПриостановитьВозобновитьОтправкуДанных(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхВозобновитьНажатие(Элемент)
	
	ПриостановитьВозобновитьОтправкуДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыОтправкиДанныхНажатие(Элемент)
	
	ЗавершитьЭтап(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхРасписаниеНажатие(Элемент)
	
	Расписание = ТекущееРасписаниеРегламентногоЗадания();
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияДиалогаРегламентногоЗадания", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияДиалогаРегламентногоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", Результат);
	
	ИзменитьПараметрыРегламетногоЗаданияОтправкиСообщений(ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбновлениеЧерезКопиюНажатие(Элемент)
	
	ЗавершитьЭтап(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция НастройкиПодключенияКонструктор(Корреспондент)
	
	Настройки = Новый Структура;
	Настройки.Вставить("КодУзла", "");
	Настройки.Вставить("КодУзлаКорреспондента", "");
	Настройки.Вставить("ИдентификаторНастройки", "");
	Настройки.Вставить("ИмяПланаОбмена", "ОбновлениеЧерезКопию");
	Настройки.Вставить("ИмяПланаОбменаКорреспондента", "ОбновлениеЧерезКопию");
	Настройки.Вставить("ВариантНастройкиОбмена", "");
	Настройки.Вставить("ФорматОбмена", Неопределено);
	Настройки.Вставить("УзелИнформационнойБазы", Корреспондент);
	Настройки.Вставить("ВариантРаботыМастера", "");
	Настройки.Вставить("СсылкаНового", Неопределено);
	Настройки.Вставить("КодПредопределенногоУзла", "");
	Настройки.Вставить("КодНовогоУзлаВторойБазы", "");
	Настройки.Вставить("НаименованиеЭтойБазы", "");
	Настройки.Вставить("НаименованиеВторойБазы", "");
	Настройки.Вставить("ПрефиксИнформационнойБазыИсточника", "");
	Настройки.Вставить("ПрефиксИнформационнойБазыПриемника", "");
	Настройки.Вставить("ИспользоватьПрефиксыДляНастройкиОбмена", Ложь);
	Настройки.Вставить("ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента", Ложь);
	Настройки.Вставить("ИдентификаторИнформационнойБазыИсточника", "");
	Настройки.Вставить("ИдентификаторИнформационнойБазыПриемника", "");
	Настройки.Вставить("ВерсияФорматаФайлаНастроекОбменаДанными", "");
	Настройки.Вставить("ВерсияФорматаОбмена", "");
	Настройки.Вставить("ВерсииФорматаОбмена", Новый Массив);
	Настройки.Вставить("ПоддерживаемыеОбъектыФормата", Неопределено);
	Настройки.Вставить("ПоддерживаемыеОбъектыФорматаКорреспондента", Неопределено);
	Настройки.Вставить("ИдентификаторТранспорта", "FILE");
	Настройки.Вставить("НастройкиТранспорта", Новый Структура);
	Настройки.Вставить("ДанныеАутентификации", Новый Структура);
	Настройки.Вставить("WSКонечнаяТочкаКорреспондента", "");
	Настройки.Вставить("WSОбластьДанныхКорреспондента", 0);
	Настройки.Вставить("ВосстановлениеНастроекОбмена", "");
	Настройки.Вставить("НомерОтправленного", 0);
	Настройки.Вставить("НомерПринятого", 0);
	Настройки.Вставить("ИсправитьДублированиеНастроекСинхронизации");
	Настройки.Вставить("УзелКорреспондентаЕстьВЭтойБазе");
	Настройки.Вставить("ЭтотУзелЕстьВКорреспонденте");
	
	ЕстьНастройки = ЕстьНастройкаТранспортаОбменаОбновления();
	Если ЕстьНастройки Тогда
		
		Настройки.НастройкиТранспорта = ТранспортСообщенийОбменаВызовСервера.НастройкиТранспорта(Корреспондент, Настройки.ИдентификаторТранспорта);
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ИнформацияОЗагруженныхПравилах(ЭтоНачалоОбновления)
	
	Информация = Новый Структура;
	Информация.Вставить("ЕстьПравила", Ложь);
	Информация.Вставить("ВерсияТекущая", Неопределено);
	Информация.Вставить("ВерсияКорреспондента", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена,
	|	ПравилаДляОбменаДанными.ВидПравил,
	|	ПравилаДляОбменаДанными.ИмяМакетаПравил,
	|	ПравилаДляОбменаДанными.ИмяМакетаПравилКорреспондента,
	|	ПравилаДляОбменаДанными.ИмяПланаОбменаИзПравил,
	|	ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиВыгрузки,
	|	ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиЗагрузки,
	|	ПравилаДляОбменаДанными.ИмяФайлаПравил,
	|	ПравилаДляОбменаДанными.ИмяФайлаПротоколаОбмена,
	|	ПравилаДляОбменаДанными.ИнформацияОПравилах,
	|	ПравилаДляОбменаДанными.ИсточникПравил,
	|	ПравилаДляОбменаДанными.НеОстанавливатьПоОшибке,
	|	ПравилаДляОбменаДанными.ПравилаXML,
	|	ПравилаДляОбменаДанными.ПравилаXMLКорреспондента,
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные,
	|	ПравилаДляОбменаДанными.ПравилаЗачитанныеКорреспондента,
	|	ПравилаДляОбменаДанными.РежимОтладки,
	|	ПравилаДляОбменаДанными.РежимОтладкиВыгрузки,
	|	ПравилаДляОбменаДанными.РежимОтладкиЗагрузки,
	|	ПравилаДляОбменаДанными.РежимПротоколированияОбменаДанными,
	|	ПравилаДляОбменаДанными.УдалитьИспользоватьФильтрВыборочнойРегистрацииОбъектов,
	|	ПравилаДляОбменаДанными.ПравилаЗагружены
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = ""ОбновлениеЧерезКопию""
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены = ИСТИНА
	|	И ПравилаДляОбменаДанными.ВидПравил = Значение(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов Тогда
			
			СтруктураПравил = Выборка.ПравилаЗачитанные.Получить().Конвертация;	
			СтруктураПравилКорреспондента = Выборка.ПравилаЗачитанныеКорреспондента.Получить().Конвертация;
			
			Если НЕ СтруктураПравил.Свойство("Источник")
				ИЛИ СтруктураПравил.Источник <> Метаданные.Имя
				ИЛИ СтруктураПравил.ВерсияКонфигурацииИсточника <> ТекущаяВерсия Тогда
				
				Возврат Информация;
				
			ИначеЕсли НЕ СтруктураПравилКорреспондента.Свойство("Источник")
				ИЛИ СтруктураПравилКорреспондента.Источник <> Метаданные.Имя Тогда
				
				Возврат Информация;
				
			ИначеЕсли НЕ СтруктураПравил.Свойство("ВерсияКонфигурацииИсточника")
				ИЛИ НЕ СтруктураПравилКорреспондента.Свойство("ВерсияКонфигурацииИсточника")
				ИЛИ ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтруктураПравил.ВерсияКонфигурацииИсточника, СтруктураПравилКорреспондента.ВерсияКонфигурацииИсточника) >= 0 Тогда
				
				Возврат Информация;
				
			Иначе
				
				СтруктураПравил.Свойство("ВерсияКонфигурацииИсточника", Информация.ВерсияТекущая);
				СтруктураПравилКорреспондента.Свойство("ВерсияКонфигурацииИсточника", Информация.ВерсияКорреспондента);
				Информация.ЕстьПравила = (ЭтоНачалоОбновления = Истина) ИЛИ (ОбновлениеНачато = Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Информация;
	
КонецФункции

&НаСервере
Функция ВключенаРегистрацияДанныхОбновленияЧерезКопию()
	
	ТекущееСостояние = Константы.ОбновлениеЧерезКопиюСостояние.Получить();
	Возврат (ТекущееСостояние = Перечисления.СостоянияОбновлениеЧерезКопию.ВыгрузкаОбновлениеЧерезКопию);
	
КонецФункции

&НаСервере
Функция ЕстьНастройкаТранспортаОбменаОбновления()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Корреспондент", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Справочник.НастройкиТранспортаСообщенийОбмена.Корреспондент
	|ГДЕ
	|	Справочник.НастройкиТранспортаСообщенийОбмена.Корреспондент = &Корреспондент";
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьНастройкаТранспорта = (НЕ РезультатЗапроса.Пустой());
	
	Возврат ЕстьНастройкаТранспорта;
	
КонецФункции

&НаСервере
Функция ЕстьВозможностьВключитьИспользованиеРегламентногоЗадания(ТекстОшибки)
	Перем ЭтотУзел, УзелОбновления;
	
	УзлыОбновлений = ОбновлениеЧерезКопию.АктивныйУзелОбмена();
	
	УзлыОбновлений.Свойство("УзелОбновленияЭтот", ЭтотУзел);
	УзлыОбновлений.Свойство("УзелОбновленияКорреспондента", УзелОбновления);
	
	ШаблонТекста = НСтр("ru = 'Нет возможности включить выгрузку данных по причине:
	|	%1.';
	|en = 'Cannot enable data import. Reason:
	|	%1.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если НЕ ЗначениеЗаполнено(ЭтотУзел)
		ИЛИ НЕ ЗначениеЗаполнено(УзелОбновления) Тогда
		
		Проблематика = НСтр("ru = 'отсутствует узел обновления.';
							|en = 'update assembly is missing.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтрШаблон(ШаблонТекста, Проблематика);
		
	ИначеЕсли ЭтотУзел.Код <> ТекущаяВерсия Тогда
		
		Проблематика = НСтр("ru = 'код предопределенного узла указан неверно.';
							|en = 'predefined assembly code is specified incorrectly.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтрШаблон(ШаблонТекста, Проблематика);
		
	ИначеЕсли ЭтотУзел.Код = ТекущаяВерсия Тогда
		
		Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ЭтотУзел.Код, УзелОбновления.Код);
		Если Результат < 0 Тогда
			
			Возврат Истина;
			
		Иначе
			
			Проблематика = НСтр("ru = 'ошибка настройки версий информационных баз.';
								|en = 'error when configuring infobase versions.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтрШаблон(ШаблонТекста, Проблематика);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ИспользуетсяРегламентноеЗаданиеОтправкиДанных()
	
	Если ЕстьНастройкаТранспорта <> Истина
		ИЛИ ВыгрузкаВозможна <> Истина Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат НайтиПроверитьРегламентноеЗадание();
	
КонецФункции

&НаСервере
Функция НайтиПроверитьРегламентноеЗадание()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", "ОбновлениеЧерезКопиюОтправкаПолучение");
	
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если ТипЗнч(НайденныеЗадания) = Тип("Массив") Тогда // Локальный режим
		
		Для каждого РегЗадание Из  НайденныеЗадания Цикл
			
			Если РегЗадание.Использование = Истина Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе // Таблица значений, режим сервиса
		
		Для каждого СтрокаТаблицы Из  НайденныеЗадания Цикл
			
			Если СтрокаТаблицы.Использование = Истина Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ТекущееРасписаниеРегламентногоЗадания()
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Метаданные", "ОбновлениеЧерезКопиюОтправкаПолучение");
	
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданий);
	Для каждого РегЗадание Из НайденныеЗадания Цикл
		
		Возврат РегЗадание.Расписание;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОбновлениеЗавершено()
	
	Возврат Объект.ОбновлениеЗавершено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьНастройкиТранспорта(СтруктураНастроек)
	
	Справочники.НастройкиТранспортаСообщенийОбмена.ОбновитьНастройки(СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьСозданиеКопииИБНаСервере()
	
	НачатьТранзакцию();
	Попытка
		
		Объект.КопияСоздана = Истина;
		Записать();
		
		ОбменДаннымиСервер.ЗавершитьНастройкуСинхронизацииДанных(Объект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	Конецпопытки
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	ТекущаяВерсия = Метаданные.Версия;
	
	ПодобратьУзелОбмена();
	
	ИнформацияОПравилах = ИнформацияОЗагруженныхПравилах(Ложь);
	ЗагруженыПравилаКонвертации = ИнформацияОПравилах.ЕстьПравила;
	ВерсияКорреспондента = ИнформацияОПравилах.ВерсияКорреспондента;
	
	ВключенаРегистрацияДанных = ВключенаРегистрацияДанныхОбновленияЧерезКопию();
	ЕстьНастройкаТранспорта = ЕстьНастройкаТранспортаОбменаОбновления();
	ИспользуетсяРегламентноеЗадание = ИспользуетсяРегламентноеЗаданиеОтправкиДанных();
	ОбновлениеЗавершено = ОбновлениеЗавершено();
	
	ПроверитьНаличиеОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеОшибок()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Для использования этого помощника необходимо включить 
															|опцию ""Использование синхронизации данных"" 
															|раздела НСИ и Администрирование';
															|en = 'To use this wizard, you need to enable the
															|""Using data synchronization"" option
															|in Master data and settings section'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		НоваяСтрока = Ошибки.Добавить();
		НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
		НоваяСтрока.Критичная = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьУзелОбмена()
	Перем ЭтотУзел, УзелОбновления;
	
	УзлыОбновлений = ОбновлениеЧерезКопию.АктивныйУзелОбмена();
	УзлыОбновлений.Свойство("УзелОбновленияЭтот", ЭтотУзел);
	УзлыОбновлений.Свойство("УзелОбновленияКорреспондента", УзелОбновления);
	
	Если НЕ ЗначениеЗаполнено(УзелОбновления) Тогда
		
		УзлыОбновлений.Свойство("УзелОбновленияСвободный", УзелОбновления);
		
	КонецЕсли;
	
	Если ЭтотУзел.Код <> ТекущаяВерсия Тогда
		
		ОбновлениеНачато = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(УзелОбновления) Тогда
		
		ОбновлениеНачато = Ложь;
		
	ИначеЕсли ПустаяСтрока(УзелОбновления.Код) Тогда
		
		ОбновлениеНачато = Ложь;
		
	ИначеЕсли НЕ ОбновлениеЧерезКопию.ЭтоНомерВерсии(ЭтотУзел.Код)
			ИЛИ НЕ ОбновлениеЧерезКопию.ЭтоНомерВерсии(УзелОбновления.Код) Тогда
		
		ОбновлениеНачато = Ложь;
		
	Иначе
		
		Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ЭтотУзел.Код, УзелОбновления.Код);
		ОбновлениеНачато = (Результат < 0);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелОбновления) Тогда
		
		ДействиеПриОбмене = ОбновлениеЧерезКопию.ОпределитьВозможноеДействиеПриОбмене(ЭтотУзел, УзелОбновления);
		ВыгрузкаВозможна = (ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
		
		УзелОбновленияОбъект = УзелОбновления.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(УзелОбновленияОбъект, "Объект");
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗагрузкиКомплектаПравилОбновления()
	
	ИнформацияОПравилах = ИнформацияОЗагруженныхПравилах(Истина);
	
	Если ИнформацияОПравилах.ЕстьПравила = Ложь Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗагруженыПравилаКонвертации = Истина;
	ВерсияКорреспондента = ИнформацияОПравилах.ВерсияКорреспондента;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтотУзелОбъект = ПланыОбмена.ОбновлениеЧерезКопию.ЭтотУзел().ПолучитьОбъект();
		ЭтотУзелОбъект.Код = ТекущаяВерсия;
		ЭтотУзелОбъект.ВерсияКорреспондента = ВерсияКорреспондента;
		ЭтотУзелОбъект.ЗагруженФайлОписанияМетаданных = Ложь;
		ЭтотУзелОбъект.РегистрироватьИзменения = Ложь;
		ЭтотУзелОбъект.КопияСоздана = Ложь;
		ЭтотУзелОбъект.Наименование = ТекущаяВерсия + " >> " + ВерсияКорреспондента;
		ЭтотУзелОбъект.ВерсииПодсистем.Загрузить(ОбновлениеИнформационнойБазы.ВерсииПодсистем());
		ЭтотУзелОбъект.ОбновлениеЗавершено = Ложь;
		ЭтотУзелОбъект.Записать();
		
		Объект.Код = ВерсияКорреспондента;
		Объект.ВерсияКорреспондента = ТекущаяВерсия;
		Объект.ЗагруженФайлОписанияМетаданных = Ложь;
		Объект.РегистрироватьИзменения = Ложь;
		Объект.КопияСоздана = Ложь;
		Объект.Наименование = ВерсияКорреспондента + " << " + ТекущаяВерсия;
		Объект.ВерсииПодсистем.Загрузить(ОбновлениеИнформационнойБазы.ВерсииПодсистем());
		Объект.ОбновлениеЗавершено = Ложь;
		Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ОбновлениеЧерезКопию.ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПослеНастройкиТранспортаСообщенийНаСервере(СтруктураНастроек)
	
	ОбновитьНастройкиТранспорта(СтруктураНастроек);
	
	// Менять использование рег. задания имеет смысл если настроек не было, а мы их добили.
	Если СтруктураНастроек.ЭтоДобавлениеНастроекТранспорта
		И ЕстьНастройкаТранспортаОбменаОбновления() Тогда
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		ИзменитьПараметрыРегламетногоЗаданияОтправкиСообщений(ПараметрыЗадания);
		ИспользуетсяРегламентноеЗадание = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРегистрациюДанныхНаСервере()
	
	ТекущееСостояние = Перечисления.СостоянияОбновлениеЧерезКопию.ВыгрузкаОбновлениеЧерезКопию;
	Константы.ОбновлениеЧерезКопиюСостояние.Установить(ТекущееСостояние);
	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьПараметрыРегламетногоЗаданияОтправкиСообщений(НовыеПараметры)
	
	Если НовыеПараметры.Свойство("Использование")
		И НовыеПараметры.Использование = Истина Тогда
			
		ТекстОшибки = "";
		Если НЕ ЕстьВозможностьВключитьИспользованиеРегламентногоЗадания(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Метаданные", "ОбновлениеЧерезКопиюОтправкаПолучение");
	
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданий);
	
	Для каждого РегЗадание Из НайденныеЗадания Цикл
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, НовыеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьОбновлениеНаСервере()
	
	НачатьТранзакцию();
	Попытка
		
		Объект.КопияСоздана = Истина;
		Объект.ЗагруженФайлОписанияМетаданных = Истина;
		Объект.РегистрироватьИзменения = Истина;
		Объект.ОбновлениеЗавершено = Истина;
		Записать();
		
		Константы.ОбновлениеЧерезКопиюСостояние.Установить(Перечисления.СостоянияОбновлениеЧерезКопию.ОтключеноОбновлениеЧерезКопию);
		
		ИзменитьПараметрыРегламетногоЗаданияОтправкиСообщений(Новый Структура("Использование", Ложь));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ОбновлениеЧерезКопию.ИмяСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ВыполнитьПоследнююИтерациюОбменаВДлительнойОперации();
	
КонецПроцедуры

#Область ДлительнаяОперацияЗавершенияОбновления

&НаКлиенте
Процедура ПослеВыполненияСервереногоМетодаЗавершенияОбновленияЧерезКопию()
	
	Если ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатДлительнойОперациия(ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатДлительнойОперациия", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатДлительнойОперациия(ФоновоеЗаданиеРезультат, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗаданиеРезультат = Неопределено Тогда // Нажали Отмена в длительной операции
		
		Возврат;
		
	КонецЕсли;
	
	Если ФоновоеЗаданиеРезультат.Статус = "Ошибка" Тогда
		
		ДобавитьОшибкуЖурналаРегистрации(ФоновоеЗаданиеРезультат.ПодробноеПредставлениеОшибки);
		ВызватьИсключение ФоновоеЗаданиеРезультат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
	ЗавершитьОбновлениеИнформационнойБазыЭлементыФормы();
	
	ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = Неопределено;
	ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОшибкуЖурналаРегистрации(ПодробноеОписаниеОшибки)
	
	ИмяСобытия = НСтр("ru = 'Обновление через копию';
						|en = 'Update via copy'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоследнююИтерациюОбменаВДлительнойОперации()
	
	Если ЗначениеЗаполнено(ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор);
		ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = Неопределено;
		
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Завершение обновления через копию';
															|en = 'Completing the update via copy'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИмяМетода = "ОбновлениеЧерезКопию.ОтправитьПолучитьДанные";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	ПараметрыДлительнойОперации.ФоновоеЗаданиеРезультат = РезультатФоновогоЗадания;
	ПараметрыДлительнойОперации.ФоновоеЗаданиеИдентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
КонецПроцедуры

#КонецОбласти

#Область ЛогикаЭтаповОбновлений

&НаКлиенте
Процедура ОбновитьОтображениеТекущегоСостоянияНастройки()
	
	Если ЗагруженыПравилаКонвертации <> Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузкаКомплектаПравилОбновленияЭлементыФормы();
	
	Если ОбновлениеЗавершено <> Истина 
		И НЕ ВключенаРегистрацияДанных Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВключитьРегистрациюДанныхЭлементыФормы();
	
	Если ОбновлениеЗавершено <> Истина 
		И НЕ Объект.КопияСоздана Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗафиксироватьСозданиеКопииИБЭлементыФормы();
	
	Если ОбновлениеЗавершено   
		И НЕ ЕстьНастройкаТранспорта Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НастройкаТранспортаОбменаЭлементыФормы();
	
	Если ОбновлениеЗавершено Тогда
		
		ЗавершитьОбновлениеИнформационнойБазыЭлементыФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЭтап(Элемент)
	
	Если Элемент.Имя = "ДекорацияКомплектФайловЗагрузить" Тогда
		
		ЗагрузкаКомплектаПравилОбновления();
		
	ИначеЕсли  Элемент.Имя = "ВключитьРегистрациюДанных" Тогда
		
		ВключитьРегистрациюДанных();
		ВключитьРегистрациюДанныхЭлементыФормы();
		
	ИначеЕсли  Элемент.Имя = "КопияТекущейИБ" Тогда
		
		ЗафиксироватьСозданиеКопииИБ();
		ЗафиксироватьСозданиеКопииИБЭлементыФормы();
		
	ИначеЕсли  Элемент.Имя = "НастройкаТранспортаОбмена" Тогда
		
		НастроитьТранспортОбменаВыгрузки();
		
	ИначеЕсли Элемент.Имя = "ОтправкаДанныхПриостановить" Тогда
		
		ПриостановитьВозобновитьОтправкуДанных(Ложь);
		
	ИначеЕсли Элемент.Имя = "ОтправкаДанныхВозобновить" Тогда
		
		ПриостановитьВозобновитьОтправкуДанных(Истина);
		
	ИначеЕсли Элемент.Имя = "ОшибкаОбновленияЧерезКопиюИБ" Тогда
		
		ПриостановитьВозобновитьОтправкуДанных(Истина);
		
	ИначеЕсли  Элемент.Имя = "ЗавершениеОбновленияЧерезКопиюИБ" Тогда
		
		ЗавершитьОбновлениеИнформационнойБазы();
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКомплектаПравилОбновления()
	
	// Не можем использовать метод:
	// ОбменДаннымиКлиент.ЗагрузитьПравилаСинхронизацииДанных("ОбновлениеЧерезКопию");
	// т.к. отсутствует возможность вернуться и изменить свойства элементов.
	
	ИмяПланаОбмена = "ОбновлениеЧерезКопию";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораКомплектаФайловАсинхронногоОбновления", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("РегистрСведений.ПравилаДляОбменаДанными.Форма.ЗагрузитьПравилаСинхронизацииДанных", ПараметрыФормы, ЭтотОбъект, ИмяПланаОбмена, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКомплектаФайловАсинхронногоОбновления(Результат, ДополнительныеПараметры) Экспорт
	
	ЗагруженыПравилаКонвертации = Ложь;
	ПослеЗагрузкиКомплектаПравилОбновления();
		
	Если ЗагруженыПравилаКонвертации Тогда
		
		ЗагрузкаКомплектаПравилОбновленияЭлементыФормы();
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Правила конвертации отсутствуют или предназначены для других версий.';
									|en = 'Conversion rules are missing or intended for other versions.'",ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 15);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКомплектаПравилОбновленияЭлементыФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКомплектФайловЗагрузить", "Доступность", НЕ ИспользуетсяРегламентноеЗадание И НЕ ОбновлениеЗавершено);
	НоваяВерсия = ?(ПустаяСтрока(ВерсияКорреспондента), "<?>", ВерсияКорреспондента);
	
	Если ЗагруженыПравилаКонвертации Тогда
		
		ТекстПодсказки = Нстр("ru = 'Загружены правила: %1 обновление на %2';
								|en = 'Rules imported: %1 updating to %2'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		ТекстПодсказки = СтрШаблон(ТекстПодсказки, ТекущаяВерсия, НоваяВерсия);
		
	Иначе
		
		ТекстПодсказки = Нстр("ru = 'Правила еще не загружались';
								|en = 'Rules have not been imported yet'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКомплектФайловЗагрузитьРасширеннаяПодсказка", "Заголовок", ТекстПодсказки);
	
	
	НовыйЗаголовок = Нстр("ru = 'Обновление с версии %1 на версию %2 завершено успешно.';
							|en = 'Update from version %1 to version %2 completed successfully.'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	НовыйЗаголовок = СтрШаблон(НовыйЗаголовок, ТекущаяВерсия, НоваяВерсия);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗавершеноОбновлениеЧерезКопиюРасширеннаяПодсказка", "Заголовок", НовыйЗаголовок);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПравилаКонвертации", "Картинка", БиблиотекаКартинок.Успешно);
	
	Если ЗагруженыПравилаКонвертации
		ИЛИ ВключенаРегистрацияДанных = Ложь Тогда // Без использования блокировки данных переход к регистрации
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключитьРегистрациюДанных", "Доступность", Истина);
		
		Если Элементы.ДекорацияРегистрация.Картинка <> БиблиотекаКартинок.Успешно Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияРегистрация", "Картинка", БиблиотекаКартинок.СтартБизнесПроцесса);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРегистрациюДанных()
	
	ВключитьРегистрациюДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРегистрациюДанныхЭлементыФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключитьРегистрациюДанных", "Доступность", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КопияТекущейИБ", "Доступность", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияРегистрация", "Картинка", БиблиотекаКартинок.Успешно);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКопия", "Картинка", БиблиотекаКартинок.СтартБизнесПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьСозданиеКопииИБ()
	
	ЗафиксироватьСозданиеКопииИБНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьСозданиеКопииИБЭлементыФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КопияТекущейИБ", "Доступность", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НастройкаТранспортаОбмена", "Доступность", НЕ ОбновлениеЗавершено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхРасписание", "Доступность", НЕ ИспользуетсяРегламентноеЗадание И НЕ ОбновлениеЗавершено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКопия", "Картинка", БиблиотекаКартинок.Успешно);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "Картинка", БиблиотекаКартинок.СтартБизнесПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТранспортОбменаВыгрузки()
	
	НастройкиПодключения = НастройкиПодключенияКонструктор(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиПодключения", НастройкиПодключения);
	ПараметрыФормы.Вставить("ИдентификаторНастройки", НастройкиПодключения.ИдентификаторНастройки);
	ПараметрыФормы.Вставить("НастройкиТранспорта", НастройкиПодключения.НастройкиТранспорта);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеНастройкиТранспортаСообщений", ЭтотОбъект, НастройкиПодключения);
	
	ПолноеИмяФормыНастройки = ТранспортСообщенийОбменаВызовСервера.ПолноеИмяФормыПервойНастройки(НастройкиПодключения.ИдентификаторТранспорта);
	ОткрытьФорму(ПолноеИмяФормыНастройки, ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиТранспортаСообщений(Результат, НастройкиПодключения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭтоДобавлениеНастроекТранспорта = (НастройкиПодключения.НастройкиТранспорта.Количество() = 0);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ЭтоДобавлениеНастроекТранспорта", ЭтоДобавлениеНастроекТранспорта);
	СтруктураНастроек.Вставить("ИдентификаторТранспорта", НастройкиПодключения.ИдентификаторТранспорта);
	СтруктураНастроек.Вставить("Корреспондент", НастройкиПодключения.УзелИнформационнойБазы);
	СтруктураНастроек.Вставить("НастройкаПоУмолчанию", Истина);
	СтруктураНастроек.Вставить("Настройки", Результат);
	
	ПослеНастройкиТранспортаСообщенийНаСервере(СтруктураНастроек);
	
	НастройкаТранспортаОбменаЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриостановитьВозобновитьОтправкуДанных(Использование)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	
	ИзменитьПараметрыРегламетногоЗаданияОтправкиСообщений(ПараметрыЗадания);
	ИспользуетсяРегламентноеЗадание = Использование;
	
	НастройкаТранспортаОбменаЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТранспортаОбменаЭлементыФормы(ПослеИсправленияОшибки = Ложь)
	
	Если ПослеИсправленияОшибки = Истина Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОшибкаОбновленияЧерезКопиюИБ", "Видимость", Ложь);
		
	КонецЕсли;
	
	Если ИспользуетсяРегламентноеЗадание Тогда
		
		КартинкаДекорации = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация48;
		
	Иначе
		
		КартинкаДекорации = БиблиотекаКартинок.СинхронизацияДанныхОтключение;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхПриостановить", "Видимость", ИспользуетсяРегламентноеЗадание);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхВозобновить", "Видимость", НЕ ИспользуетсяРегламентноеЗадание);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКомплектФайловЗагрузить", "Доступность", НЕ ИспользуетсяРегламентноеЗадание И НЕ ОбновлениеЗавершено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НастройкаТранспортаОбмена", "Доступность", НЕ ИспользуетсяРегламентноеЗадание И НЕ ОбновлениеЗавершено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхПриостановить", "Доступность", ЕстьНастройкаТранспорта);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхВозобновить", "Доступность", ЕстьНастройкаТранспорта);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхРасписание", "Доступность", НЕ ИспользуетсяРегламентноеЗадание И ЕстьНастройкаТранспорта И НЕ ОбновлениеЗавершено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗавершениеОбновленияЧерезКопиюИБ", "Доступность", ЕстьНастройкаТранспорта);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "РазмерКартинки", ПредопределенноеЗначение("РазмерКартинки.Пропорционально"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "Картинка", КартинкаДекорации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбновлениеИнформационнойБазы()
	
	ЗавершитьОбновлениеНаСервере();
	ПослеВыполненияСервереногоМетодаЗавершенияОбновленияЧерезКопию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбновлениеИнформационнойБазыЭлементыФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗавершениеОбновленияЧерезКопиюИБ", "Доступность", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхПриостановить", "Доступность", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхВозобновить", "Доступность", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "РазмерКартинки", ПредопределенноеЗначение("РазмерКартинки.РеальныйРазмер"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтправкаДанных", "Картинка", БиблиотекаКартинок.Успешно);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияЗавершение", "Картинка", БиблиотекаКартинок.Успешно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа9", "Видимость", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователюООшибках()
	
	Если Ошибки.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстОшибок = "";
	ЕстьКритинаяОшибка = Ложь;
	
	Для каждого СтрокаОшибки Из Ошибки Цикл
		
		Если ПустаяСтрока(СтрокаОшибки.ОписаниеОшибки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЕстьКритинаяОшибка = (ЕстьКритинаяОшибка ИЛИ СтрокаОшибки.Критичная);
		
		Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
			
			ТекстОшибок = ТекстОшибок + Символы.ПС;
			
		КонецЕсли;
		
		ТекстОшибок = ТекстОшибок + "•" + Символы.НПП + СтрокаОшибки.ОписаниеОшибки;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОшибки", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОшибкаОбновленияЧерезКопиюГиперссылка", "Видимость", НЕ ЕстьКритинаяОшибка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОшибкаОбновленияЧерезКопиюТекст", "Заголовок", ТекстОшибок);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКомплектФайловЗагрузить", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключитьРегистрациюДанных", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КопияТекущейИБ", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхВозобновить", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхПриостановить", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НастройкаТранспортаОбмена", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправкаДанныхРасписание", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗавершениеОбновленияЧерезКопиюИБ", "Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти