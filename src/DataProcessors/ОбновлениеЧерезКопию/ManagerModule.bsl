#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область БлокировкаДанных

Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Возврат Ложь; // Эмуляция проверки окончания обновления данных. В рабочей программе всегда Ложь.
	
КонецФункции

#КонецОбласти

#Область ЧтениеXML

Функция ЗначениеЭлементаТип(ОбработчикОбновленияТипСтрокой)
	
	Результат = "Монопольно";
	Если ВРег(ОбработчикОбновленияТипСтрокой) = ВРЕГ("Operative") Тогда
		
		Результат = "Оперативно";
		
	ИначеЕсли ВРЕГ(ОбработчикОбновленияТипСтрокой) = ВРЕГ("Backgrounde") Тогда
		
		Результат = "Отложено";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет загрузку описания метаданных, которые необходимо заблокировать.
//
// Параметры:
//   АдресПомещенногоФайла - Строка - Адрес временного хранилища, куда прочиталт описание метаданных 
//                                    обработчиков обновления.
//   УзелОбменаСсылка      - ПланОбменаСсылка - Объект, в табличную часть будут загружены данные из файла.
//   Отказ                 - Булево - Признак ошибки чтения формата потока. 
//                                    Если была обнаружена ошибка возвращает значение ИСТИНА.
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено - возвращается таблица значений с полями, состав которых идентичен табличной части
//                                   ОписаниеМетаданных плана обмена ОбновлениеЧерезКопию. В случае возникновения
//                                   ошибки возвращается Неопределено.
//
Функция ПрочитатьОписаниеБлокируемыхМетаданных(АдресПомещенногоФайла, Отказ = Ложь) Экспорт
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("КонфигурацияИмя", Неопределено);
	СтруктураФайла.Вставить("ВерсияТекущая", Неопределено);
	СтруктураФайла.Вставить("ВерсияНовая", Неопределено);
	СтруктураФайла.Вставить("ТаблицаОписанияМетаданных", ПланыОбмена.ОбновлениеЧерезКопию.СоздатьУзел().ОписаниеМетаданных.Выгрузить());
	
	// Получаем файл архива из двоичных данных.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресПомещенногоФайла);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Не Файл.Существует() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеМетаданных = Новый ЧтениеXML;
	ОписаниеМетаданных.ОткрытьФайл(ИмяВременногоФайла);
	ОписаниеМетаданных.Прочитать();
	
	Если Не ((ОписаниеМетаданных.ЛокальноеИмя = "Configuration") 
		И (ОписаниеМетаданных.ТипУзла = ТипУзлаXML.НачалоЭлемента)) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтруктураФайла.КонфигурацияИмя = ОписаниеМетаданных.ЗначениеАтрибута("Name");
	СтруктураФайла.ВерсияТекущая = ОписаниеМетаданных.ЗначениеАтрибута("VersionCurrent");
	СтруктураФайла.ВерсияНовая = ОписаниеМетаданных.ЗначениеАтрибута("VersionNew");
	
	ОбработчикОбновленияТип = Неопределено;
	ОбработчикОбновленияUID = Неопределено;
	
	Пока ОписаниеМетаданных.Прочитать() Цикл
		
		ИмяУзла = ОписаниеМетаданных.ЛокальноеИмя;
		
		// Реквизиты конвертации
		Если ИмяУзла = "Handler" Тогда
			
			ОбработчикОбновленияТип = ОписаниеМетаданных.ЗначениеАтрибута("Type");
			ОбработчикОбновленияUID = ОписаниеМетаданных.ЗначениеАтрибута("UID");
			
			Пока ОписаниеМетаданных.Прочитать() Цикл
				
				Если ОписаниеМетаданных.ТипУзла = ТипУзлаXML.Текст Тогда
					
					НоваяСтрока = СтруктураФайла.ТаблицаОписанияМетаданных.Добавить();
					НоваяСтрока.ТипОбработчика = ЗначениеЭлементаТип(ОбработчикОбновленияТип);
					НоваяСтрока.ОбработчикОбновленияUID = ОбработчикОбновленияUID;
					НоваяСтрока.ИдентификаторОбъекта =
						ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеМетаданных.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		// Ошибка формата
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем временный файл правил.
	Если Не ПустаяСтрока(ИмяВременногоФайла) Тогда
		
		Попытка
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбновлениеЧерезКопию';
											|en = 'ОбновлениеЧерезКопию'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СтруктураФайла;
	
КонецФункции // ЗагрузитьОписаниеМетаданных()

#КонецОбласти

#Область ИнтерфейсПечати

Функция ПредставлениеПФ(ИмяМакета) Экспорт
	
	Если ИмяМакета = "ОписаниеПолное" Тогда
		
		Возврат НСтр("ru = 'Полная инструкция';
					|en = 'Complete manual'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Иначе
		
		Возврат НСтр("ru = 'Список метаданных обработчиков обновлений';
					|en = 'List of update handler metadata'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;
	
КонецФункции

Функция ПечатнаяФормаПолногоОписания(МассивОбъектов, ОбъектыПечати) Экспорт
	Перем НомерСтрокиНачало;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнструкцияПолная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ОбновлениеЧерезКопию.ПФ_MXL_ОписаниеПолное");
	
	ОбластьМакета =Макет.ПолучитьОбласть("ОписаниеТаблицей");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, МассивОбъектов);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаОписанияМетаданных(МассивОбъектов, ОбъектыПечати) Экспорт
	Перем НомерСтрокиНачало;
	
	ДанныеПечати = Новый Структура;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОписаниеМетаданных";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ОбновлениеЧерезКопию.ПФ_MXL_ОписаниеМетаданных");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для каждого СтрокаТаблицы Из МассивОбъектов.ОписаниеМетаданных Цикл
		
		ДанныеПечати.Вставить("ИмяТаблицы", СтрокаТаблицы.ИдентификаторОбъекта);
		ДанныеПечати.Вставить("Тип", СтрокаТаблицы.ТипОбработчика);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, МассивОбъектов);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОписаниеПолное") Тогда
		
		Синоним = ПредставлениеПФ("ОписаниеПолное");
		ТабличныйДокумент = ПечатнаяФормаПолногоОписания(МассивОбъектов, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "ОписаниеПолное", Синоним, ТабличныйДокумент);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОписаниеМетаданных") Тогда
		
		Синоним = ПредставлениеПФ("ОписаниеМетаданных");
		ТабличныйДокумент = ПечатнаяФормаОписанияМетаданных(МассивОбъектов, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "ОписаниеМетаданных", Синоним, ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли