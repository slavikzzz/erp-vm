#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = НастройкиСистемыПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьОбособленноеОбеспечениеЗаказов");
	ВнешниеРодительскиеКонстанты.Вставить("НоваяАрхитектураВзаиморасчетов");
	ВнешниеРодительскиеКонстанты.Вставить("ФормироватьФинансовыйРезультат");
	
	РежимРаботы = Новый Структура;
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
		
	Элементы.ОперацияКакРаспоряжениеВыработки.Видимость = Ложь;
	
//++ НЕ УТКА
	Элементы.ОперацияКакРаспоряжениеВыработки.Видимость = ЭтапыПроизводстваИспользовалисьРанее();
	
	ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства();
	ОбновитьНастройкиИспользованияОперацииКакРаспоряжениеВыработки();
	
	РемонтИлиРазборкаИспользуется = РемонтИлиРазборкаИспользуется();
	ВариантСтруктурыЗаказаНаПроизводство = Число(НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство);
//-- НЕ УТКА
	
	УстановитьВидимостьЭлементовФормы();
	НастроитьЗависимыеЭлементыФормы();
	НастройкиСистемыЛокализация.ПриСозданииНаСервере_Производство(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
		
		ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
			И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
				Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0)
				
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьУправлениеПроизводством") > 0)
		
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьПартионныйУчет") > 0)
		
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ПартионныйУчетВерсии22") > 0)
			
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьНесколькоВидовЦен") > 0)
		
		//++ НЕ УТКА
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьМаршрутныеКарты") > 0)
		//-- НЕ УТКА
			
		ИЛИ (ТипЗнч(Источник) = Тип("Строка")
			И Найти(Источник, "ИспользоватьДополнительныеРеквизитыИСведения") > 0) Тогда
		
		ЭтаФорма.Прочитать();
		НастроитьЗависимыеЭлементыФормы();
//++ НЕ УТКА
		ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства();
//-- НЕ УТКА
		
	КонецЕсли;
	
	Если Источник = ЭтаФорма Тогда
		Если Параметр.Свойство("Элемент") Тогда
			Подключаемый_ПриИзмененииРеквизита(Параметр.Элемент, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗначенияПоУмолчанию = Новый Структура(
		"МетодикаУправленияПроизводством,ВариантОбособленияМатериаловВПроизводстве,ДинамическаяСтруктураЗаказовНаПроизводство");
	НастройкиСистемыЛокализация.ПриЧтенииНаСервере_Производство(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МетодикаУправленияПроизводствомПриИзменении(Элемент)
	
//++ НЕ УТКА
	Если НаборКонстант.МетодикаУправленияПроизводством.Пустая() Тогда
		ОбщегоНазначенияУТКлиентСервер.ВосстановитьЗначенияДоИзменения(ЭтаФорма, "МетодикаУправленияПроизводством");
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтаФорма, "МетодикаУправленияПроизводством");
//-- НЕ УТКА
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнтервалПланированияЧасПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПараметрыНазначенияСпецификацийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАналогиМатериаловПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатусыДвиженийПродукцииИМатериаловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетГрафикаПроизводстваИспользованиеПриИзменении(Элемент)
	
//++ НЕ УТКА
	УстановитьИспользованиеРегламентногоЗадания();
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбособленияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбособленияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРасценокВидовРаботПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПлановойСтоимостиЗатратПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВидыТехнологическихОперацийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКонтрольВыполненияОперацийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьЗавершениеОперацийПриЗакрытииЭтаповПроизводстваПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияКакРаспоряжениеВыработкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	УстановитьОперациюКакРаспоряжениеВыработки(ИспользуетсяОперацияКакРаспоряжениеВыработки);
	//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетТрудозатратВРазрезеСотрудниковПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВеденияУчетаТрудозатратПоСотрудникамПриИзменении(Элемент)
	
	НаборКонстант.ДатаНачалаВеденияУчетаТрудозатратПоСотрудникам = НачалоМесяца(НаборКонстант.ДатаНачалаВеденияУчетаТрудозатратПоСотрудникам);
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантХраненияОперацийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//++ НЕ УТКА
	
	ОткрытьФорму("Обработка.ПомощникПереносаОперацийВРесурсныеСпецификации.Форма.Форма");
	
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура АналитическийУчетПоГруппамПродукцииПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНаборыВПроизводствеПриИзменении(Элемент)
	
	НаборКонстант.ИсточникСоставаНаборовВПроизводстве = ?(ИспользоватьНаборыВПроизводстве,
		Элементы.ИсточникСоставаНаборовВПроизводстве.СписокВыбора[0].Значение,
		ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.НеИспользовать"));
	
	Подключаемый_ПриИзмененииРеквизита(Элементы.ИсточникСоставаНаборовВПроизводстве);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСоставаНаборовВПроизводствеПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСоставаНаборовВПроизводствеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	Если НаборКонстант.ИсточникСоставаНаборовВПроизводстве = ПредопределенноеЗначение("Перечисление.ИсточникиСоставаНаборовВПроизводстве.Спецификации") Тогда
		ТекстВопроса = Элементы.ИсточникСоставаНаборовВПроизводстве.ПредупреждениеПриРедактировании + НСтр("ru = '
		|Продолжить редактирование?';
		|en = '
		|Continue editing?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ИсточникСоставаНаборовВПроизводствеНачалоВыбораЗавершение", ЭтотОбъект),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ИсточникСоставаНаборовВПроизводствеВыбратьЗначение();
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСтруктурыЗаказаНаПроизводствоПриИзменении(Элемент)

	//++ НЕ УТКА
	Если Булево(ВариантСтруктурыЗаказаНаПроизводство)
		И НаборКонстант.ВариантОбособленияМатериаловВПроизводстве = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьСвязанныеНастройкиПриИзмененииВариантаСтруктурыЗаказаНаПроизводство", ЭтотОбъект, Элемент);
		ТекстВопроса = НСтр("ru = 'Для включения ""динамической"" структуры заказа требуется установить вариант обособления при заказе в производство в значение ""По заказам на производство"". Установить и продолжить?';
							|en = 'To enable the dynamic structure of the order, the assignment option for a production order must have the ""By production orders"" value. Do you want to set the value and continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);  
		Возврат;
		
	КонецЕсли;         
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтаФорма, "ДинамическаяСтруктураЗаказовНаПроизводство");
	//-- НЕ УТКА

	Возврат; // пустой обработчик
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РасчетГрафикаПроизводстваРасписание(Команда)
	
//++ НЕ УТКА
	Если РасчетГрафикаПроизводстваРасписание = Неопределено Тогда
		РасчетГрафикаПроизводстваРасписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("РасчетГрафикаПроизводстваРасписаниеЗавершение", ЭтотОбъект);
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасчетГрафикаПроизводстваРасписание);
	ДиалогРасписания.Показать(ОписаниеОповещения);
//-- НЕ УТКА
	Возврат;
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура РасчетГрафикаПроизводстваРасписаниеЗавершение(Расписание, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РасчетГрафикаПроизводстваРасписание = Расписание;
	
	УстановитьРасписаниеРегламентногоЗадания();
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ИспользоватьПараметрыНазначенияСпецификацийНастройка(Команда)
	
	//++ НЕ УТКА
	ОткрытьФорму("Обработка.ПараметрыНазначенияСпецификаций.Форма.ФормаНастройки");
	//-- НЕ УТКА
	
	Возврат; // в УТ и КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРасчетаСтруктурыЗаказаНаПроизводство(Команда)
	
	//++ НЕ УТКА
	ОткрытьФорму("ОбщаяФорма.НастройкиРасчетаСтруктурыЗаказаНаПроизводство");
	//-- НЕ УТКА
	
	Возврат; // в УТ и КА обработчик пустой

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина, ВнешнееИзменение = Ложь)
	
	Если НЕ ВнешнееИзменение Тогда
		НастройкиСистемыКлиентЛокализация.ПриИзмененииРеквизита_Производство(
			Элемент,
			ЭтаФорма);
	КонецЕсли;
	ИмяЭлемента = Элемент.Имя;
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		КонстантаИмя = ПриИзмененииРеквизитаСервер(ИмяЭлемента);
		
		Если ОбновлятьИнтерфейс Тогда
			ОбновитьИнтерфейс = Истина;
			ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
		КонецЕсли;
		
		Если КонстантаИмя <> "" Тогда
			Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиФормы(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиСистемыКлиентЛокализация.ОбработкаНавигационнойСсылкиФормы_Производство(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	НастроитьЗависимыеЭлементыФормы(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если СтрНачинаетсяС(НРег(РеквизитПутьКДанным), НРег("НаборКонстант.")) Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
		КонстантаИмя = ЧастиИмени[1];
		
//++ НЕ УТКА
	ИначеЕсли РеквизитПутьКДанным = "ВариантСтруктурыЗаказаНаПроизводство" Тогда
		НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство = Булево(ВариантСтруктурыЗаказаНаПроизводство);
		КонстантаИмя = "ДинамическаяСтруктураЗаказовНаПроизводство";
//-- НЕ УТКА
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "УчетТрудозатратВРазрезеСотрудников" Тогда
		КонстантаИмя = "ДатаНачалаВеденияУчетаТрудозатратПоСотрудникам";
	КонецЕсли;
	
//++ НЕ УТКА
	Если КонстантаИмя = "ИспользоватьУправлениеПроизводством" Тогда
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		Если КонстантаЗначение Тогда
			УправлениеДаннымиОбИзделиях.УстановитьПараметрыНазначенияПоПодразделениюДиспетчеру();
		КонецЕсли;
	КонецЕсли;
//-- НЕ УТКА
		
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если НастройкиСистемыПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение)
			ИЛИ СтрНайти(КонстантаИмя, "ИспользоватьПроизводство") > 0
			ИЛИ СтрНайти(КонстантаИмя, "ИспользоватьУправлениеПроизводством") > 0
//++ НЕ УТКА
			ИЛИ КонстантаИмя = "ДинамическаяСтруктураЗаказовНаПроизводство"
//-- НЕ УТКА
			ИЛИ КонстантаИмя = "ИспользоватьЗаказыПереработчикам2_5" Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиСистемыЛокализация.СохранитьЗначениеРеквизита_Производство(КонстантаИмя, КонстантаЗначение, ЭтаФорма);
	
	Возврат КонстантаИмя
	
КонецФункции

#КонецОбласти

#Область Константы

&НаСервере
Функция ИспользуетсяПроизводство()
	
	Возврат НаборКонстант.ИспользоватьПроизводство;
	
КонецФункции

&НаСервере
Функция ИспользуетсяПроизводство22()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством2_2;
	
КонецФункции

//++ НЕ УТКА

&НаСервере
Функция ИспользуетсяПроизводство21()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством;
	
КонецФункции

&НаСервере
Функция ИспользуетсяТолькоПроизводство21()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством
			И НЕ НаборКонстант.ИспользоватьУправлениеПроизводством2_2;
	
КонецФункции

&НаСервере
Функция ИспользуетсяТолькоПроизводство22()
	
	Возврат НаборКонстант.ИспользоватьУправлениеПроизводством2_2
			И НЕ НаборКонстант.ИспользоватьУправлениеПроизводством;
	
КонецФункции

&НаСервере
Функция ИспользуетсяПроизводство21_22()
	
	Возврат ИспользуетсяПроизводство21() И ИспользуетсяПроизводство22();
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#Область НастройкаЭлементов

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	Элементы.ГруппаМежцеховоеУправление.Видимость = УправлениеПредприятием;
	Элементы.ОбособлениеМатериаловВПроизводствеКА.Видимость = НЕ УправлениеПредприятием;
	Элементы.ОбособлениеМатериаловВПроизводствеУП.Видимость = УправлениеПредприятием;
	Элементы.ГруппаПрочее.Видимость = УправлениеПредприятием;
	Элементы.ГруппаСтатусыЛево.Видимость = УправлениеПредприятием;
	Элементы.ГруппаОперации.Видимость = УправлениеПредприятием;
	Элементы.ГруппаИспользоватьАналогиМатериалов.Видимость = УправлениеПредприятием;
	Элементы.ГруппаИспользоватьПараметрыНазначенияСпецификаций.Видимость = УправлениеПредприятием;
	Элементы.ГруппаИспользоватьНаборыВПроизводстве.Видимость = УправлениеПредприятием И ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	Элементы.ГруппаВариантХраненияТехнологическихОпераций.Видимость = Ложь;
	Элементы.ГруппаУчетТрудозатратВРазрезеСотрудников.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормы(РеквизитПутьКДанным = "")
	
	// ИспользоватьПроизводство, ИспользоватьУправлениеПроизводством
	Если РеквизитПутьКДанным = "" 
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0 Тогда
		
		ИспользоватьОбособленноеОбеспечениеЗаказов = Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.Получить();
		Элементы.ВариантОбособленияМатериаловВПроизводствеКА.Видимость = ИспользоватьОбособленноеОбеспечениеЗаказов;
		//++ Устарело_Переработка24
		Элементы.ГруппаВариантОбособленияМатериаловВПереработке.Видимость = ИспользоватьОбособленноеОбеспечениеЗаказов;
		//-- Устарело_Переработка24
		Элементы.ГруппаОбособлениеМатериаловУПереработчика2_5.Видимость = ИспользоватьОбособленноеОбеспечениеЗаказов;
		
		Элементы.ГруппаУчетЗатрат.Доступность = ИспользуетсяПроизводство();
		
		Элементы.ВариантОбособленияМатериаловВПроизводствеКА.Доступность = НаборКонстант.ИспользоватьПроизводство;
		
		ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22();
		Элементы.ИспользоватьПроизводство22.Доступность = ПартионныйУчетВерсии22;
		
		Элементы.ГруппаПредупреждениеИспользованиеПроизводства22.Видимость =
			НЕ ИспользуетсяПроизводство22() И НЕ ПартионныйУчетВерсии22;
			
		Элементы.ИспользоватьПараметрыНазначенияСпецификаций.Доступность = Ложь;
		
//++ НЕ УТКА
		Элементы.ГруппаВариантОбособленияМатериаловВПроизводстве.Видимость = ИспользуетсяПроизводство22();
		Элементы.ГруппаВариантОбособленияМатериаловПриПередачеВКладовую.Видимость = ИспользуетсяПроизводство22();
		Элементы.ГруппаВариантОбособленияМатериаловВПроизводстве21.Видимость = ИспользуетсяТолькоПроизводство21();
		Элементы.ГруппаВариантОбособленияМатериаловПриПередачеВПроизводство.Видимость = ИспользуетсяТолькоПроизводство21();
		Элементы.ГруппаОперации.Видимость = ИспользуетсяПроизводство22();
		Элементы.ГруппаПрочее.Доступность = ИспользуетсяПроизводство();
		
		Элементы.ОбособлениеМатериаловВПроизводствеУП.Видимость = ИспользоватьОбособленноеОбеспечениеЗаказов;
		Элементы.ИспользоватьСтатусыДвиженийПродукцииИМатериалов.Видимость = ИспользуетсяПроизводство22();
		
		Элементы.ИспользоватьПараметрыНазначенияСпецификаций.Доступность = ИспользуетсяТолькоПроизводство22();
		
//-- НЕ УТКА
	КонецЕсли;
	
//++ НЕ УТКА
	Если РеквизитПутьКДанным = "НаборКонстант.ВариантОбособленияМатериаловВПроизводстве" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаКомментарийОграничениеОбособленияВПроизводстве21.Видимость = ИспользуетсяПроизводство21_22()
			И (НаборКонстант.ВариантОбособленияМатериаловВПроизводстве = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство")
				Или НаборКонстант.ВариантОбособленияМатериаловВПроизводстве = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства"));
		
	КонецЕсли;
//-- НЕ УТКА

//++ НЕ УТКА
	Если РеквизитПутьКДанным = ""
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПараметрыНазначенияСпецификаций"
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0 Тогда
		Элементы.ИспользоватьПараметрыНазначенияСпецификацийНастройка.Доступность = НаборКонстант.ИспользоватьПараметрыНазначенияСпецификаций;
	КонецЕсли;
//-- НЕ УТКА

//++ НЕ УТКА

	// Межцеховое управление
	Если РеквизитПутьКДанным = ""
		ИЛИ РеквизитПутьКДанным = "ВариантСтруктурыЗаказаНаПроизводство"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.МетодикаУправленияПроизводством"
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0 Тогда
		
		Элементы.ГруппаМежцеховоеУправление.Видимость = ИспользуетсяПроизводство();
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВариантСтруктурыЗаказаНаПроизводство0, ЭтаФорма.ВариантСтруктурыЗаказаНаПроизводство > 0);
		
		Элементы.НастройкиРасчетаСтруктурыЗаказаНаПроизводство.Видимость = ИспользуетсяТолькоПроизводство22() И НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство;
		
		ГрафикИспользуется = НаборКонстант.ИспользоватьУправлениеПроизводством
			ИЛИ НЕ НаборКонстант.МетодикаУправленияПроизводством = Перечисления.МетодикаУправленияПроизводством.БезПланирования;
		
		Элементы.ПодсказкаМетодикаУправленияПроизводством.Подсказка =
			Перечисления.МетодикаУправленияПроизводством.ПодсказкаПоМетодике(НаборКонстант.МетодикаУправленияПроизводством);
		
		Если Не ГрафикИспользуется И РасчетГрафикаПроизводстваИспользование Тогда
			РасчетГрафикаПроизводстваИспользование = Ложь;
			УстановитьИспользованиеРегламентногоЗадания();
		КонецЕсли;
		
		Элементы.ГруппаРегламентноеЗаданиеРасчетГрафикаПроизводства.Видимость = ГрафикИспользуется;
		Элементы.ИспользоватьИнтервалПланированияЧас.Видимость = ГрафикИспользуется;

//++ Устарело_Производство21
		
		Элементы.ГруппаМежцеховоеУправление.ОтображатьЗаголовок = ИспользуетсяПроизводство22();
		
		Элементы.ГруппаЗаказНаПроизводство.Видимость = ИспользуетсяПроизводство22() И Не ИспользуетсяПроизводство21();
		
		Элементы.ГруппаПорядокРасчетаГрафика.Видимость = ИспользуетсяПроизводство22();
		
		Если ИспользуетсяПроизводство21() И Элементы.ГруппаПорядокРасчетаГрафика.Видимость Тогда
			Элементы.МетодикаУправленияПроизводством.Заголовок = НСтр("ru = 'Методика управления (версия 2.2)';
																		|en = 'Management method (version 2.2)'");
		КонецЕсли;
		
		Элементы.ОтступРегламентноеЗаданиеРасчетГрафикаПроизводства.Видимость = ИспользуетсяПроизводство22();
		
//-- Устарело_Производство21
		
		Элементы.ГруппаПорядокРасчетаГрафика.Доступность =
			ИспользуетсяПроизводство22()
			И НЕ НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство;
			
		Элементы.ГруппаНедоступнаНастройкаМетодикиУправленияПроизводством.Видимость =
			ИспользуетсяПроизводство22()
			И НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = ""
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.МетодикаУправленияПроизводством"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ВариантОбособленияМатериаловВПроизводстве"
		//++ Устарело_Переработка24
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне"
		//-- Устарело_Переработка24
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5"
		ИЛИ РеквизитПутьКДанным = "ВариантСтруктурыЗаказаНаПроизводство"
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0 Тогда
		
		Если НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство Тогда
			НастройкаВариантаФормированияСтруктурыЗаказаДоступна = Истина;
		Иначе
			НастройкаВариантаФормированияСтруктурыЗаказаДоступна =
				НаборКонстант.МетодикаУправленияПроизводством = Перечисления.МетодикаУправленияПроизводством.БезПланирования
				И НЕ РемонтИлиРазборкаИспользуется
				И ИспользуетсяПроизводство22();
		КонецЕсли;
			
		Элементы.ПолуфабрикатыВнутриЗаказаПроизводитьОбособленно.Видимость = НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство;
		
		Элементы.ГруппаВариантыСтруктурыЗаказаНаПроизводство.Доступность = НастройкаВариантаФормированияСтруктурыЗаказаДоступна;
		Элементы.ГруппаНедоступнаНастройкаВариантаФормированияСтруктурыЗаказа.Видимость = НЕ НастройкаВариантаФормированияСтруктурыЗаказаДоступна;
	
	КонецЕсли;
//-- НЕ УТКА
	
	// Обновление вариантов обособления
	Если РеквизитПутьКДанным = ""
		ИЛИ РеквизитПутьКДанным = "ВариантСтруктурыЗаказаНаПроизводство" Тогда
			
		НаправленияДеятельностиИспользуются = Константы.ФормироватьФинансовыйРезультат.Получить();
		
		//++ НЕ УТКА

		// Производство 2.2
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;

		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства"));
		
		Если НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		ИначеЕсли НЕ НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве.СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства"));
		КонецЕсли;
		
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловПриПередачеВКладовую.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловПриПередачеВКладовую.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловПриПередачеВКладовую.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		
		// Производство 2.1
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловВПроизводстве21.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве21.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПроизводстве21.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловПриПередачеВПроизводство.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловПриПередачеВПроизводство.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловПриПередачеВПроизводство.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловПриПередачеВПроизводство.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		//-- НЕ УТКА
		
		//++ Устарело_Переработка24
		
		// Переработка на стороне 2.4
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияМатериаловВПереработке.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияПриПередачеВПереработку.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПереработке.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияПриПередачеВПереработку.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияМатериаловВПереработке.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		//-- Устарело_Переработка24
		
		// Переработка на стороне
		ЭлементСпискаВыбора = Элементы.ВариантОбособленияВПередачеПереработчику2_5.СписокВыбора.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.ВариантыОбособленияПриПередачеВПереработку.НаправлениеДеятельности"));
		
		Если НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора = Неопределено Тогда
			Элементы.ВариантОбособленияВПередачеПереработчику2_5.СписокВыбора.Вставить(0,
				ПредопределенноеЗначение("Перечисление.ВариантыОбособленияПриПередачеВПереработку.НаправлениеДеятельности"));
		ИначеЕсли Не НаправленияДеятельностиИспользуются И ЭлементСпискаВыбора <> Неопределено Тогда
			Элементы.ВариантОбособленияВПередачеПереработчику2_5.СписокВыбора.Удалить(ЭлементСпискаВыбора);
		КонецЕсли;
		
	КонецЕсли;
	
//++ НЕ УТКА
	
	Если РеквизитПутьКДанным = "" 
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		Тогда
		
		КонстантаДоступна = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения
			И ИспользуетсяПроизводство22();
		
		Элементы.ИспользоватьВидыТехнологическихОпераций.Доступность = КонстантаДоступна;
		Элементы.ГруппаКомментарийОграничениеВидыТехнологическихОпераций.Видимость = НЕ КонстантаДоступна;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = ""
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьМаршрутныеКарты") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ХранитьОперацииВРесурсныхСпецификациях") > 0
		Тогда
	
		Элементы.ГруппаВариантХраненияТехнологическихОпераций.Видимость = ИспользуетсяТолькоПроизводство22()
			И ПолучитьФункциональнуюОпцию("ИспользоватьМаршрутныеКарты")
			И НЕ ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях");
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = ""
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИсточникСоставаНаборовВПроизводстве")
		Тогда
		
		Перечисления.ИсточникиСоставаНаборовВПроизводстве.ЗаполнитьСписокВыбораИсточниковСоставаНаборов(
			Элементы.ИсточникСоставаНаборовВПроизводстве.СписокВыбора);
		
		ИспользоватьНаборыВПроизводстве = ЗначениеЗаполнено(НаборКонстант.ИсточникСоставаНаборовВПроизводстве)
			И НЕ (НаборКонстант.ИсточникСоставаНаборовВПроизводстве = Перечисления.ИсточникиСоставаНаборовВПроизводстве.НеИспользовать);
		
		Элементы.ГруппаИспользоватьНаборыВПроизводствеСостав.Видимость = ИспользоватьНаборыВПроизводстве
			И ИспользуетсяТолькоПроизводство22();
		
		ТекстПодсказки = Перечисления.ИсточникиСоставаНаборовВПроизводстве.ПодсказкаПоИсточникуСоставаНаборов(
			НаборКонстант.ИсточникСоставаНаборовВПроизводстве);
		Элементы.ГруппаИсточникСоставаНаборовВПроизводстве.Подсказка = ТекстПодсказки;
		
		Элементы.ИспользоватьНаборыВПроизводстве.ОтображениеПредупрежденияПриРедактировании = ?(
			ИспользоватьНаборыВПроизводстве,
			ОтображениеПредупрежденияПриРедактировании.Отображать,
			ОтображениеПредупрежденияПриРедактировании.НеОтображать);
		
	КонецЕсли;

//-- НЕ УТКА
	
	//ВалютаРасценокВидовРабот
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаРасценокВидовРабот" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаРасценокВидовРабот, ЗначениеЗаполнено(НаборКонстант.ВалютаРасценокВидовРабот));
	КонецЕсли;
	
	// плановые виды цен
	Если СтрНайти(РеквизитПутьКДанным, "ИспользоватьНесколькоВидовЦен") > 0
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ГруппаПояснениеПлановогоВидаЦены.Видимость = Не НаборКонстант.ИспользоватьНесколькоВидовЦен;
		Элементы.ПлановыеЦеныМатериаловРабот.Доступность = НаборКонстант.ИспользоватьНесколькоВидовЦен;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" 
		Или СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		Или СтрНайти(РеквизитПутьКДанным, "ИспользоватьНесколькоВидовЦен") > 0 Тогда
		Элементы.ГруппаВалютаПлановойСтоимости.Видимость = 
			НаборКонстант.ИспользоватьПроизводство И НаборКонстант.ИспользоватьНесколькоВидовЦен;
	КонецЕсли;
	
	//ВалютаПлановойСебестоимостиПродукции
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаПлановойСебестоимостиПродукции" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаПлановойСебестоимостиВыпуска, ЗначениеЗаполнено(НаборКонстант.ВалютаПлановойСебестоимостиПродукции));
	КонецЕсли;
	
	// АналитическийУчетПоГруппамПродукции
	Если РеквизитПутьКДанным = "НаборКонстант.АналитическийУчетПоГруппамПродукции"
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		ИЛИ СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.АналитическийУчетПоГруппамПродукции;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.АналитическийУчетПоГруппамПродукции, ЗначениеКонстанты);
		
		Элементы.ГруппаАналитическийУчетПоГруппамПродукции.Доступность = ИспользуетсяПроизводство();
		Элементы.ГруппаКомментарийВидыПродукции.Видимость = НЕ ИспользуетсяПроизводство();
		
	КонецЕсли;
	
	#Область ПроизводствоНаСтороне
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5"
		//++ НЕ УТКА
		ИЛИ РеквизитПутьКДанным = "ВариантСтруктурыЗаказаНаПроизводство"
		Или СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		Или СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		//-- НЕ УТКА
		Или РеквизитПутьКДанным = "НаборКонстант.НоваяАрхитектураВзаиморасчетов"
		Или РеквизитПутьКДанным = "" Тогда
			
		ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22();
		Элементы.ИспользоватьПроизводствоНаСтороне2_5.Доступность =
			ПартионныйУчетВерсии22
			И НаборКонстант.НоваяАрхитектураВзаиморасчетов;
		
		Элементы.ГруппаКомментарийИспользоватьПроизводствоНаСтороне2_5.Видимость =
			Не ПартионныйУчетВерсии22
			Или Не НаборКонстант.НоваяАрхитектураВзаиморасчетов;
		
		Если Не ПартионныйУчетВерсии22
			Или Не НаборКонстант.НоваяАрхитектураВзаиморасчетов Тогда
			
			ШаблонЗаголовка = НСтр("ru = 'Для использования производства на стороне необходимо включить опции:
									|%1';
									|en = 'To use production by third party, enable the following options:
									|%1'");
			
			Опции = Новый Массив;
			Если Не ПартионныйУчетВерсии22 Тогда
				Опции.Добавить(НСтр("ru = '- ""Партионный учет версии 2.2"" в разделе ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"".';
									|en = '- Lot accounting 2.2 in Master data and settings - Profitability & cost.'"));
			КонецЕсли;
			
			Если Не НаборКонстант.НоваяАрхитектураВзаиморасчетов Тогда
				Опции.Добавить(НСтр("ru = '- ""Взаиморасчеты: Онлайн"" в разделе ""НСИ и администрирование"" - ""Казначейство и взаиморасчеты"".';
									|en = '- AR/AP accounting: Online in Master data and settings - Treasury and AR/AP accounting.'"));
			КонецЕсли;
			
			Элементы.КомментарийИспользоватьПроизводствоНаСтороне2_5.Заголовок =
					СтрШаблон(ШаблонЗаголовка, СтрСоединить(Опции, Символы.ПС));
			
		КонецЕсли;
		
		Элементы.ГруппаПредупреждениеИспользованиеПроизводства22.Видимость =
			Не НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5
			И Не ПартионныйУчетВерсии22;
		
		Элементы.ИспользоватьЗаказыПереработчикам2_5.Доступность =
			НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5;
		
		Элементы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоПередачамПереработчику2_5.Доступность =
			НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5;
		
		Элементы.ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениямОтПереработчика2_5.Доступность =
			НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5;
		
		Элементы.ВариантОбособленияУПереработчика2_5.Доступность =
			НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьПроизводствоНаСтороне2_5,
			НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5"
		//++ НЕ УТКА
		Или СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		Или СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		//-- НЕ УТКА
		Или РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЗаказыПереработчикам2_5"
		Или РеквизитПутьКДанным = "НаборКонстант.НоваяАрхитектураВзаиморасчетов"
		Или РеквизитПутьКДанным = "" Тогда
		
		Элементы.ИспользоватьЗаказыПереработчикам2_5.Доступность =
			//++ НЕ УТКА
			Не НаборКонстант.ИспользоватьПроизводство
			И Не НаборКонстант.ИспользоватьУправлениеПроизводством2_2 И
			//-- НЕ УТКА
			НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5;
		
		Элементы.ИспользоватьСтатусыЗаказовПереработчикам2_5.Доступность =
			//++ НЕ УТКА
			Не НаборКонстант.ИспользоватьПроизводство
			И Не НаборКонстант.ИспользоватьУправлениеПроизводством2_2 И
			//-- НЕ УТКА
			НаборКонстант.ИспользоватьЗаказыПереработчикам2_5;
		
		Элементы.ГруппаКомментарийИспользоватьСтатусыЗаказовПереработчикам2_5.Видимость =
			//++ НЕ УТКА
			НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5
			И (НаборКонстант.ИспользоватьПроизводство
				Или НаборКонстант.ИспользоватьУправлениеПроизводством2_2) Или
			//-- НЕ УТКА
			Ложь;
		
		Элементы.ВариантОбособленияВПередачеПереработчику2_5.Доступность =
			НаборКонстант.ИспользоватьЗаказыПереработчикам2_5;
		
		Элементы.ВариантОбособленияУПереработчика2_5.Доступность =
			НаборКонстант.ИспользоватьЗаказыПереработчикам2_5;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне2_5"
		//++ НЕ УТКА
		Или СтрНайти(РеквизитПутьКДанным, "ИспользоватьПроизводство") > 0
		Или СтрНайти(РеквизитПутьКДанным, "ИспользоватьУправлениеПроизводством") > 0
		//-- НЕ УТКА
		Или РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЗаказыПереработчикам2_5"
		Или РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСтатусыЗаказовПереработчикам2_5"
		Или РеквизитПутьКДанным = "НаборКонстант.НоваяАрхитектураВзаиморасчетов"
		Или РеквизитПутьКДанным = "" Тогда
		
		Элементы.НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки2_5.Доступность =
			НаборКонстант.ИспользоватьСтатусыЗаказовПереработчикам2_5;
		
		Элементы.НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты2_5.Доступность =
			НаборКонстант.ИспользоватьСтатусыЗаказовПереработчикам2_5;
		
		Элементы.ГруппаКомментарийКонтролироватьЗакрытиеЗаказовПереработчикам2_5.Видимость =
			НЕ НаборКонстант.ИспользоватьСтатусыЗаказовПереработчикам2_5;
		
	КонецЕсли;
	
	#КонецОбласти
	
	НастройкиСистемыЛокализация.УстановитьДоступность_Производство(РеквизитПутьКДанным, ЭтаФорма);
	
	ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным);
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным)
	
	СтруктураКонстант = Новый Структура(
		"
		|ИспользоватьЗаказыПереработчикам2_5,
		|ИспользоватьСтатусыЗаказовПереработчикам2_5,
		//++ НЕ УТКА
		|ИспользоватьСтатусыДвиженийПродукцииИМатериалов,
		|ИспользоватьПараметрыНазначенияСпецификаций,
		|ИспользоватьАналогиМатериалов,
		//-- НЕ УТКА
		|АналитическийУчетПоГруппамПродукции");
		
	НастройкиСистемыЛокализация.ОтображениеПредупрежденияПриРедактировании_Производство(СтруктураКонстант);
	
	Для Каждого КлючИЗначение Из СтруктураКонстант Цикл
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы[КлючИЗначение.Ключ],
			НаборКонстант[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область РегламентноеЗадание_РасчетГрафикаПроизводства

&НаСервере
Процедура ОбновитьНастройкиРегламентногоЗаданияРасчетГрафикаПроизводства()
	
	ПроверятьПраваАдминистрированияСистемы = Истина;
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ПроверятьПраваАдминистрированияСистемы = Ложь;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(, ПроверятьПраваАдминистрированияСистемы) Тогда
		Задание = ПланированиеПроизводства.ЗаданиеРасчетГрафикаПроизводства();
		Если Задание <> Неопределено Тогда
			РасчетГрафикаПроизводстваИдентификатор = Задание.УникальныйИдентификатор;
			РасчетГрафикаПроизводстваИспользование = Задание.Использование;
			РасчетГрафикаПроизводстваРасписание    = Задание.Расписание;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписания()
	
	Если РасчетГрафикаПроизводстваИспользование И Не РазделениеВключено Тогда
		
		ПредставлениеРасписания = Строка(РасчетГрафикаПроизводстваРасписание);
		Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
			 ПредставлениеРасписания = НСтр("ru = 'Расписание не задано';
											|en = 'Schedule is not set'");
		КонецЕсли;
		Элементы.РасчетГрафикаПроизводстваРасписание.Заголовок = ПредставлениеРасписания;
		
		Элементы.РасчетГрафикаПроизводстваРасписание.Доступность = Истина;
	Иначе
		
		Элементы.РасчетГрафикаПроизводстваРасписание.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеРегламентногоЗадания()
	
	ПараметрыЗадания = Новый Структура;
	
	ПараметрыЗадания.Вставить("Использование", РасчетГрафикаПроизводстваИспользование);
	
	Если РасчетГрафикаПроизводстваИспользование И РазделениеВключено Тогда
		
		РасчетГрафикаПроизводстваРасписание = ПланированиеПроизводства.ПредопределенноеРасписание();
		
		ПараметрыЗадания.Вставить("Расписание", РасчетГрафикаПроизводстваРасписание);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасчетГрафикаПроизводстваИдентификатор) Тогда
		РегламентныеЗаданияСервер.ИзменитьЗадание(РасчетГрафикаПроизводстваИдентификатор, ПараметрыЗадания);
	Иначе
	
		МетаданныеРасчетГрафикаПроизводства = Метаданные.РегламентныеЗадания.Найти("РасчетГрафикаПроизводства");
		Если МетаданныеРасчетГрафикаПроизводства <> Неопределено Тогда
			
			ПоляЗаполнения = Новый Массив;
			ПоляЗаполнения.Добавить("ИнтервалПовтораПриАварийномЗавершении");
			ПоляЗаполнения.Добавить("КоличествоПовторовПриАварийномЗавершении");
			
			ПараметрыЗадания.Вставить("Метаданные", МетаданныеРасчетГрафикаПроизводства);
			Для каждого Поле Из ПоляЗаполнения Цикл
				ПараметрыЗадания.Вставить(Поле);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ПараметрыЗадания.Метаданные, СтрСоединить(ПоляЗаполнения, ","));
			
			Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			РасчетГрафикаПроизводстваИдентификатор = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
			РасчетГрафикаПроизводстваИспользование = Задание.Использование;
			РасчетГрафикаПроизводстваРасписание    = Задание.Расписание;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗадания()
	
	ПараметрыЗадания = Новый Структура("Расписание", РасчетГрафикаПроизводстваРасписание);
	
	Если ЗначениеЗаполнено(РасчетГрафикаПроизводстваИдентификатор) Тогда
		РегламентныеЗаданияСервер.ИзменитьЗадание(РасчетГрафикаПроизводстваИдентификатор, ПараметрыЗадания);
	Иначе
	
		МетаданныеРасчетГрафикаПроизводства = Метаданные.РегламентныеЗадания.Найти("РасчетГрафикаПроизводства");
		Если МетаданныеРасчетГрафикаПроизводства <> Неопределено Тогда
			
			ПоляЗаполнения = Новый Массив;
			ПоляЗаполнения.Добавить("ИнтервалПовтораПриАварийномЗавершении");
			ПоляЗаполнения.Добавить("КоличествоПовторовПриАварийномЗавершении");
			
			ПараметрыЗадания.Вставить("Метаданные", МетаданныеРасчетГрафикаПроизводства);
			Для каждого Поле Из ПоляЗаполнения Цикл
				ПараметрыЗадания.Вставить(Поле);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ПараметрыЗадания.Метаданные, СтрСоединить(ПоляЗаполнения, ","));
			
			Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			РасчетГрафикаПроизводстваИдентификатор = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
			РасчетГрафикаПроизводстваИспользование = Задание.Использование;
			РасчетГрафикаПроизводстваРасписание    = Задание.Расписание;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТКА
#Область ОперацияКакРаспоряжениеВыработки

&НаСервереБезКонтекста
Функция ЭтапыПроизводстваИспользовалисьРанее()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапПроизводства.Ссылка КАК Ссылка
	|ИЗ 
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|ГДЕ 
	|	НЕ ЭтапПроизводства.ОперацияКакРаспоряжениеВыработки
	|	И НЕ ЭтапПроизводства.ПометкаУдаления");
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьНастройкиИспользованияОперацииКакРаспоряжениеВыработки()
	
	ИспользуетсяОперацияКакРаспоряжениеВыработки = 
		ЗначениеЗаполнено(Константы.ДатаНачалаВеденияУчетаВыработкиПоОперациям.Получить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОперациюКакРаспоряжениеВыработки(ИспользуетсяОперацияКакРаспоряжениеВыработки)
	
	Если ИспользуетсяОперацияКакРаспоряжениеВыработки Тогда
		Дата = ТекущаяДатаСеанса();
	Иначе
		Дата = Неопределено;
	КонецЕсли;
	
	Константы.ДатаНачалаВеденияУчетаВыработкиПоОперациям.Установить(Дата);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

//++ НЕ УТКА
#Область ДинамическаяСтруктура

&НаСервере
Функция РемонтИлиРазборкаИспользуется()
	
	Результат = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Таблица
	|ГДЕ
	|	Таблица.ТипПроизводственногоПроцесса В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|	И НЕ (Таблица.ПометкаУдаления ИЛИ Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Закрыта))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	Таблица.ТипПроизводственногоПроцесса В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|	И НЕ (Таблица.ПометкаУдаления ИЛИ Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт))
	|");
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВопросУстановитьСвязанныеНастройкиПриИзмененииВариантаСтруктурыЗаказаНаПроизводство(ОтветНаВопрос, Элемент) Экспорт

	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда   
		ОбщегоНазначенияУТКлиентСервер.ВосстановитьЗначенияДоИзменения(ЭтаФорма, "ДинамическаяСтруктураЗаказовНаПроизводство");
		ВариантСтруктурыЗаказаНаПроизводство = Число(НаборКонстант.ДинамическаяСтруктураЗаказовНаПроизводство);
		Возврат;
	КонецЕсли; 
	
	УстановитьСвязанныеНастройкиПриИзмененииВариантаСтруктурыЗаказаНаПроизводство();
	
 	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтаФорма, "ДинамическаяСтруктураЗаказовНаПроизводство");

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязанныеНастройкиПриИзмененииВариантаСтруктурыЗаказаНаПроизводство()

	Константы.ВариантОбособленияМатериаловВПроизводстве.Установить(Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство);

КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиенте
Процедура ИсточникСоставаНаборовВПроизводствеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИсточникСоставаНаборовВПроизводствеВыбратьЗначение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСоставаНаборовВПроизводствеВыбратьЗначение()
	
	ОткрытьФорму(
		"Перечисление.ИсточникиСоставаНаборовВПроизводстве.Форма.ВыборИсточникаСоставаНаборовВПроизводстве",
		Новый Структура("ИсточникСоставаНабораВПроизводстве", НаборКонстант.ИсточникСоставаНаборовВПроизводстве),
		Элементы.ИсточникСоставаНаборовВПроизводстве,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти
