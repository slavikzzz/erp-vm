
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ПоказыватьИсполнителей = Не ПустаяСтрока(ТекущийПользовательИБ.Имя);
	
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	Настройки = РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника.Настройки();
	ЗаполнитьЗначенияСвойств(НастройкиПравилОбработкиЗаявок, Настройки);
	ПрежнийКоординатор = НастройкиПравилОбработкиЗаявок.Координатор;
	ВидНастройки = ?(НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям, 1, 0);
	
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	Если ИнтеграцияУправлениеПерсоналом.ДоступенРасширенныйФункционал() Тогда
		ИмяОпции = "СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц";
		ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = Не (ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции));
		ДоступныРасформированныеПодразделения = ПубликоватьСтруктуруЮридическихЛиц Или СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц;
	Иначе
		ДоступныРасформированныеПодразделения = Ложь;
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = Истина;
	КонецЕсли;
	
	РезультатПроверкиСтруктурыПредприятия = ПроверитьСтруктуруПредприятия();
	СтруктураПредприятияДоступна 	= РезультатПроверкиСтруктурыПредприятия.Доступна;
	СтруктураПредприятияПустая 		= РезультатПроверкиСтруктурыПредприятия.Пустая;
	Если (НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям И Не СтруктураПредприятияДоступна) Тогда
		
		// Используется настройка с точностью до структуры предприятия,
		// но пользователю недоступна структура предприятия.
		ТолькоПросмотр = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписатьИЗакрыть", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписать", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаОтчетПоЗадачам", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ВидНастройки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДекорацияОграничениеДоступности", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ПоказыватьРасформированные", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДекорацияПустаяСтруктураПредприятия", "Видимость", Ложь);
		ДоступныРасформированныеПодразделения = Ложь;
		
	Иначе
		
		ТолькоПросмотр = СтруктураПредприятияПустая;
		Если СтруктураПредприятияПустая Тогда
			ДоступныРасформированныеПодразделения = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписатьИЗакрыть", "Доступность", Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписать", "Доступность", Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДекорацияПустаяСтруктураПредприятия", "Видимость", СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаОтчетПоЗадачам", "Видимость", Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ВидНастройки", "Видимость", Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаНастройкаНедоступнаОграничениеДоступа", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДекорацияОграничениеДоступности", "Видимость", Не СтруктураПредприятияДоступна И Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ВидНастройки", "Доступность", 
				СтруктураПредприятияДоступна И Не СтруктураПредприятияПустая);
				
		Если Не СтруктураПредприятияПустая Тогда
			ПрочитатьНастройки();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПоказыватьИсполнителей Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"НастройкиПравилОбработкиЗаявокКоординатор", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"НастройкиПравилПоПодразделениямИсполнители", "Видимость", Ложь);
		Если Не ЗначениеЗаполнено(НастройкиПравилОбработкиЗаявок.Координатор) Тогда
			НастройкиПравилОбработкиЗаявок.Координатор = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов(ЭтаФорма);
	УстановитьУсловноеОформление();
	УстановитьДоступностьПравилСогласованияСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНастройкиПриИзменении(Элемент)
	
	Если ВидНастройки = 0 Тогда
		ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
								|en = 'Подтверждение'");
		ТекстВопроса = НСтр("ru = 'Настройки в разрезе структурных единиц будут очищены. Продолжить?';
							|en = 'Настройки в разрезе структурных единиц будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВидНастройкиПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	Иначе
		ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
								|en = 'Подтверждение'");
		ТекстВопроса = НСтр("ru = 'Будет включена настройка с детализацией до структурных единиц. Продолжить?';
							|en = 'Будет включена настройка с детализацией до структурных единиц. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВидНастройкиПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРасформированныеПриИзменении(Элемент)
	
	Если Модифицированность Тогда
		ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
								|en = 'Подтверждение'");
		ТекстВопроса = НСтр("ru = 'Для изменения настройки необходимо сохранить данные. Продолжить?';
							|en = 'Для изменения настройки необходимо сохранить данные. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказыватьРасформированныеПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	Иначе
		ОбработатьИзменениеПоказыватьРасформированные();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПравил

&НаКлиенте
Процедура НастройкиПравилИсполнителиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиПравил.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Исполнители", ТекущиеДанные.Исполнители.ВыгрузитьЗначения());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиВыборЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПравилОбработкиЗаявокКабинетСотрудника.Форма.ИсполнителиЗаявок", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилИсполнителиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПравил.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиПравилОбработкиЗаявок.Координатор) 
		И ТекущиеДанные.Исполнители.НайтиПоЗначению(НастройкиПравилОбработкиЗаявок.Координатор) = Неопределено Тогда
		ТекущиеДанные.Исполнители.Добавить(НастройкиПравилОбработкиЗаявок.Координатор);
	КонецЕсли;
	ТекущиеДанные.ИзмененыИсполнители = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилДнейНаИсполнениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПравил.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ИзмененыПравила = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилТребуетсяПодписьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПравил.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ИзмененыПравила = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПравилПоПодразделениям

&НаКлиенте
Процедура НастройкиПравилПоПодразделениямПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "НастройкиПравилПоПодразделениямИсполнители" Тогда
		ИсполнителиСтрокиТекущейСтроки = Новый ФиксированныйМассив(Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные.Исполнители.ВыгрузитьЗначения());
		НастройкиПравилПоПодразделениямТекущаяСтрока = Элементы.НастройкиПравилПоПодразделениям.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилПоПодразделениямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИсполнителиСтрокиТекущейСтроки = Неопределено;
	НастройкиПравилПоПодразделениямТекущаяСтрока = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилПоПодразделениямИсполнителиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Исполнители", ТекущиеДанные.Исполнители.ВыгрузитьЗначения());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиВыборЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПравилОбработкиЗаявокКабинетСотрудника.Форма.ИсполнителиЗаявок", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилПоПодразделениямИсполнителиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиПравилОбработкиЗаявок.Координатор) 
		И ТекущиеДанные.Исполнители.НайтиПоЗначению(НастройкиПравилОбработкиЗаявок.Координатор) = Неопределено Тогда
		ТекущиеДанные.Исполнители.Добавить(НастройкиПравилОбработкиЗаявок.Координатор);
	КонецЕсли;
	ТекущиеДанные.ИзмененыИсполнители = Истина;
	
	ОбновитьИсполнителейПодчиненныхСтрок(Элементы.НастройкиПравилПоПодразделениям.ТекущаяСтрока, Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилПоПодразделениямДнейНаИсполнениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ИзмененыПравила = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилПоПодразделениямТребуетсяПодписьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ИзмененыПравила = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьНастройки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаявкам(Команда)
	ОткрытьФорму("Отчет.Задачи.ФормаОбъекта", ПараметрыОткрытияОтчета());
КонецПроцедуры

&НаКлиенте
Процедура ПравилаСогласованияЗаявок(Команда)
	
	ОткрытьФорму("Обработка.НастройкаПравилОбработкиЗаявокКабинетСотрудника.Форма.ПравилаСогласованияВСервисе");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьПравил

&НаКлиенте
Процедура ЗаписатьНастройки(Закрыть = Ложь)
	
	ДлительнаяОперация = ЗаписатьНастройкиНаСервере();
	
	ПараметрыОповещения = Новый Структура("Закрыть", Закрыть);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьНастройкиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНастройкиНаСервере()
	
	НастройкиДляСохранения = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиПравилОбработкиЗаявок,
			Метаданные.РегистрыСведений.НастройкиПравилОбработкиЗаявокКабинетСотрудника);
			
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("НастройкиПравилОбработкиЗаявок", НастройкиДляСохранения);
	ДополнительныеНастройки.Вставить("НастройкиПравил", РеквизитФормыВЗначение("НастройкиПравил"));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "ЗаявкиСотрудников.ЗаписатьНастройкиПравилОбработки", ДополнительныеНастройки);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Модифицированность = Ложь;
		Если ДополнительныеПараметры.Закрыть Тогда
			Закрыть();
		Иначе
			ПрочитатьНастройки();
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'При сохранении настроек правил обработки заявок произошла ошибка:';
								|en = 'При сохранении настроек правил обработки заявок произошла ошибка:'") 
						 + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ИнформированиеПользователяКлиент.Предупредить(ТекстСообщения, Результат.ПодробноеПредставлениеОшибки,);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаписатьНастройки(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеНастроек

&НаСервере
Процедура ПрочитатьНастройки()
	
	НастройкиПравил.Очистить();
	ТаблицаНастроек = РеквизитФормыВЗначение("НастройкиПравил");
	
	СписокРолей = ЗаявкиСотрудников.ДоступныеРолиИсполнителейЗадач();
	ШаблоныДокументов 	= ШаблоныДокументов();
	ПравилаОбработки 	= ПравилаОбработки();
	ДанныеСтруктурыПредприятия = ДанныеСтруктурыПредприятия();
	СтруктураПредприятия = ДанныеСтруктурыПредприятия.СтруктураПредприятияДерево;
	
	ДанныеИсполнителейЗадач = ДанныеИсполнителейЗадач(СписокРолей, ДанныеСтруктурыПредприятия.СтруктураПредприятияМассив);
	ИсполнителиЗадач = ДанныеИсполнителейЗадач.ИсполнителиЗадач;
	ИсполнителиРолей = ДанныеИсполнителейЗадач.ИсполнителиРолей;
	
	// Заполняем таблицу настроек доступными ролями.
	Для каждого РольИсполнителя Из СписокРолей Цикл
		Если РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
			Для каждого ШаблонДокумента Из ШаблоныДокументов Цикл
				НоваяСтрока = ТаблицаНастроек.Добавить();
				НоваяСтрока.РольИсполнителя = РольИсполнителя;
				НоваяСтрока.ШаблонДокумента = ШаблонДокумента;
			КонецЦикла;
		Иначе
			НоваяСтрока = ТаблицаНастроек.Добавить();
			НоваяСтрока.РольИсполнителя = РольИсполнителя;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ТаблицаНастроек Цикл
		
		ПравилаРоли = ПравилаОбработки[СтрокаТЗ.РольИсполнителя];
		
		Если НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям Тогда
			ИсполнителиРоли = ИсполнителиЗадач[СтрокаТЗ.РольИсполнителя];
			Если СтрокаТЗ.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
				ПравилаПодразделений = Новый Соответствие;
				ИсполнителиПодразделений = Новый Соответствие;
				Если ПравилаРоли <> Неопределено Тогда
					ПравилаПодразделений = ПравилаРоли[СтрокаТЗ.ШаблонДокумента];
				КонецЕсли;
				Если ИсполнителиРоли <> Неопределено Тогда
					ИсполнителиПодразделений = ИсполнителиРоли[СтрокаТЗ.ШаблонДокумента];
				КонецЕсли;
				СтрокаТЗ.ПоПодразделениям = ДеревоНастроекПодразделений(СтруктураПредприятия, ПравилаПодразделений, ИсполнителиПодразделений);
			Иначе
				ПравилаПодразделений = Новый Соответствие;
				ИсполнителиПодразделений = Новый Соответствие;
				Если ПравилаРоли <> Неопределено Тогда
					ПравилаПодразделений = ПравилаРоли;
				КонецЕсли;
				Если ИсполнителиРоли <> Неопределено Тогда
					ИсполнителиПодразделений = ИсполнителиРоли;
				КонецЕсли;
				СтрокаТЗ.ПоПодразделениям = ДеревоНастроекПодразделений(СтруктураПредприятия, ПравилаПодразделений, ИсполнителиПодразделений);
			КонецЕсли;
		Иначе
			ИсполнителиРоли = ИсполнителиРолей[СтрокаТЗ.РольИсполнителя];
			Если СтрокаТЗ.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
				Если ПравилаРоли <> Неопределено Тогда
					НастройкиШаблона = ПравилаРоли[СтрокаТЗ.ШаблонДокумента];
					Если НастройкиШаблона <> Неопределено Тогда
						СтрокаТЗ.ДнейНаИсполнение = НастройкиШаблона.ДнейНаИсполнение;
						СтрокаТЗ.ТребуетсяПодпись = НастройкиШаблона.ТребуетсяПодпись;
					КонецЕсли;
				КонецЕсли;
				Если СтрокаТЗ.ДнейНаИсполнение = 0 Тогда
					СтрокаТЗ.ДнейНаИсполнение = НастройкиПравилОбработкиЗаявок.ДнейНаИсполнение;
				КонецЕсли;
				Если ИсполнителиРоли <> Неопределено Тогда
					Исполнители = ИсполнителиРоли[СтрокаТЗ.ШаблонДокумента];
					Если ЗначениеЗаполнено(Исполнители) Тогда
						СтрокаТЗ.Исполнители.ЗагрузитьЗначения(Исполнители);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ПравилаРоли <> Неопределено Тогда
					СтрокаТЗ.ДнейНаИсполнение = ПравилаРоли.ДнейНаИсполнение;
					СтрокаТЗ.ТребуетсяПодпись = ПравилаРоли.ТребуетсяПодпись;
				Иначе
					СтрокаТЗ.ДнейНаИсполнение = НастройкиПравилОбработкиЗаявок.ДнейНаИсполнение;
				КонецЕсли;
				Если ИсполнителиРоли <> Неопределено Тогда
					СтрокаТЗ.Исполнители.ЗагрузитьЗначения(ИсполнителиРоли);
				КонецЕсли;
			КонецЕсли;
			СтрокаТЗ.ПоПодразделениям = ДеревоНастроекПодразделенийПоИсходнойСтроке(СтруктураПредприятия, СтрокаТЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаНастроек, "НастройкиПравил");
	
КонецПроцедуры

&НаСервере
Функция ДеревоНастроекПодразделенийПоИсходнойСтроке(СтруктураПредприятия, ИсходнаяСтрока)

	ДеревоПодразделений = Новый ДеревоЗначений;
	ДеревоПодразделений.Колонки.Добавить("Подразделение");
	ДеревоПодразделений.Колонки.Добавить("ДнейНаИсполнение", Новый ОписаниеТипов("Число"));
	ДеревоПодразделений.Колонки.Добавить("ТребуетсяПодпись", Новый ОписаниеТипов("Булево"));
	ДеревоПодразделений.Колонки.Добавить("Исполнители", Новый ОписаниеТипов("СписокЗначений"));
	
	Для каждого СтрокаДерева Из СтруктураПредприятия.Строки Цикл
	
		НоваяСтрока = ДеревоПодразделений.Строки.Добавить();
		НоваяСтрока.Подразделение = СтрокаДерева.Подразделение;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока, "ТребуетсяПодпись,ДнейНаИсполнение");
		НоваяСтрока.Исполнители.ЗагрузитьЗначения(ИсходнаяСтрока.Исполнители.ВыгрузитьЗначения());
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиДереваПоИсходнойСтроке(НоваяСтрока, СтрокаДерева.Строки, ИсходнаяСтрока);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ДеревоПодразделений;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиДереваПоИсходнойСтроке(СтрокаРодитель, КоллекцияСтрокДерева, ИсходнаяСтрока)
	
	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Подразделение = СтрокаДерева.Подразделение;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока, "ТребуетсяПодпись,ДнейНаИсполнение");
		НоваяСтрока.Исполнители.ЗагрузитьЗначения(ИсходнаяСтрока.Исполнители.ВыгрузитьЗначения());
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиДереваПоИсходнойСтроке(НоваяСтрока, СтрокаДерева.Строки, ИсходнаяСтрока);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДеревоНастроекПодразделений(СтруктураПредприятия, ПравилаОбработки, Исполнители)
	
	ДеревоПодразделений = Новый ДеревоЗначений;
	ДеревоПодразделений.Колонки.Добавить("Подразделение");
	ДеревоПодразделений.Колонки.Добавить("ДнейНаИсполнение", Новый ОписаниеТипов("Число"));
	ДеревоПодразделений.Колонки.Добавить("ТребуетсяПодпись", Новый ОписаниеТипов("Булево"));
	ДеревоПодразделений.Колонки.Добавить("Исполнители", Новый ОписаниеТипов("СписокЗначений"));
	ДеревоПодразделений.Колонки.Добавить("Расформировано", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаДерева Из СтруктураПредприятия.Строки Цикл
	
		НоваяСтрока = ДеревоПодразделений.Строки.Добавить();
		НоваяСтрока.Подразделение = СтрокаДерева.Подразделение;
		НоваяСтрока.Расформировано = СтрокаДерева.Расформировано;
		
		Если ПравилаОбработки <> Неопределено Тогда
			ПравилаПодразделения = ПравилаОбработки[СтрокаДерева.Подразделение];
			Если ПравилаПодразделения <> Неопределено Тогда
				НоваяСтрока.ТребуетсяПодпись = ПравилаПодразделения.ТребуетсяПодпись;
				НоваяСтрока.ДнейНаИсполнение = ПравилаПодразделения.ДнейНаИсполнение;
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрока.ДнейНаИсполнение = 0 Тогда
			НоваяСтрока.ДнейНаИсполнение = НастройкиПравилОбработкиЗаявок.ДнейНаИсполнение;
		КонецЕсли;
		
		Если Исполнители <> Неопределено Тогда
			ИсполнителиПодразделения = Исполнители[СтрокаДерева.Подразделение];
			Если ЗначениеЗаполнено(ИсполнителиПодразделения) Тогда
				НоваяСтрока.Исполнители.ЗагрузитьЗначения(ИсполнителиПодразделения);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиДереваНастроекПодразделения(НоваяСтрока, СтрокаДерева.Строки, ПравилаОбработки, Исполнители);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ДеревоПодразделений;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиДереваНастроекПодразделения(СтрокаРодитель, КоллекцияСтрокДерева, ПравилаОбработки, Исполнители)
	
	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Подразделение = СтрокаДерева.Подразделение;
		НоваяСтрока.Расформировано = СтрокаДерева.Расформировано;
		
		Если ПравилаОбработки <> Неопределено Тогда
			ПравилаПодразделения = ПравилаОбработки[СтрокаДерева.Подразделение];
			Если ПравилаПодразделения <> Неопределено Тогда
				НоваяСтрока.ТребуетсяПодпись 	= ПравилаПодразделения.ТребуетсяПодпись;
				НоваяСтрока.ДнейНаИсполнение 	= ПравилаПодразделения.ДнейНаИсполнение;
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрока.ДнейНаИсполнение = 0 Тогда
			НоваяСтрока.ДнейНаИсполнение = НастройкиПравилОбработкиЗаявок.ДнейНаИсполнение;
		КонецЕсли;
		
		Если Исполнители <> Неопределено Тогда
			ИсполнителиПодразделения = Исполнители[СтрокаДерева.Подразделение];
			Если ЗначениеЗаполнено(ИсполнителиПодразделения) Тогда
				НоваяСтрока.Исполнители.ЗагрузитьЗначения(ИсполнителиПодразделения);
			КонецЕсли;
		КонецЕсли;
	
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиДереваНастроекПодразделения(НоваяСтрока, СтрокаДерева.Строки, ПравилаОбработки, Исполнители);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ШаблоныДокументов()
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблоныДокументов = ЗаявкиСотрудников.ШаблоныДокументов();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ШаблоныДокументов;
	
КонецФункции

// Возвращает правила обработки заявок.
//
// 	Возвращаемое значение:
// 		Соответствие
// 			* Ключ - РольИсполнителя
// 			* Значение - Соответствие
// 				Если РольИсполнителя - ОтветственныйЗаОбращенияСотрудников
// 					* Ключ - ШаблонДокумента
// 					* Значение - Соответствие
// 						* Ключ - Подразделение
// 						* Значение - Структура со свойствами ДнейНаИсполнение,ТребуетсяПодпись
// 				Если РольИсполнителя не ОтветственныйЗаОбращенияСотрудников
// 					* Ключ - Подразделение
// 					* Значение - Структура со свойствами ДнейНаИсполнение,ТребуетсяПодпись.
//
&НаСервере
Функция ПравилаОбработки()
	
	ПравилаОбработки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.РольИсполнителя КАК РольИсполнителя,
	|	Правила.Подразделение КАК Подразделение,
	|	Правила.ШаблонДокумента КАК ШаблонДокумента,
	|	Правила.ДнейНаИсполнение КАК ДнейНаИсполнение,
	|	Правила.ТребуетсяПодпись КАК ТребуетсяПодпись
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокКабинетСотрудника КАК Правила
	|
	|УПОРЯДОЧИТЬ ПО
	|	РольИсполнителя,
	|	ШаблонДокумента,
	|	Подразделение";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПравилаОбработки;
	КонецЕсли;
	
	ТаблицаПравил = РезультатЗапроса.Выгрузить();
	
	Если НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям Тогда
		
		Для каждого СтрокаТЗ Из ТаблицаПравил Цикл
			
			РольИсполнителя = СтрокаТЗ.РольИсполнителя;
			ПравилаРоли = ПравилаОбработки[РольИсполнителя];
			Если ПравилаРоли = Неопределено Тогда
				ПравилаРоли = Новый Соответствие;
			КонецЕсли;
			
			ОписаниеНастроек = Новый Структура("ДнейНаИсполнение,ТребуетсяПодпись");
			ЗаполнитьЗначенияСвойств(ОписаниеНастроек, СтрокаТЗ);
			
			Если РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
				ШаблонДокумента = СтрокаТЗ.ШаблонДокумента;
				ПравилаШаблона = ПравилаРоли[ШаблонДокумента];
				Если ПравилаШаблона = Неопределено Тогда
					ПравилаШаблона = Новый Соответствие;
				КонецЕсли;
				ПравилаШаблона.Вставить(СтрокаТЗ.Подразделение, ОписаниеНастроек);
				ПравилаРоли.Вставить(ШаблонДокумента, ПравилаШаблона);
			Иначе
				ПравилаРоли.Вставить(СтрокаТЗ.Подразделение, ОписаниеНастроек);
			КонецЕсли;
			
			ПравилаОбработки.Вставить(РольИсполнителя, ПравилаРоли);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЗ Из ТаблицаПравил Цикл
			
			РольИсполнителя = СтрокаТЗ.РольИсполнителя;
			ПравилаРоли = ПравилаОбработки[РольИсполнителя];
			Если ПравилаРоли = Неопределено Тогда
				ПравилаРоли = Новый Соответствие;
			КонецЕсли;
			
			ОписаниеНастроек = Новый Структура("ДнейНаИсполнение,ТребуетсяПодпись");
			ЗаполнитьЗначенияСвойств(ОписаниеНастроек, СтрокаТЗ);
			
			Если РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
				ПравилаРоли.Вставить(СтрокаТЗ.ШаблонДокумента, ОписаниеНастроек);
				ПравилаОбработки.Вставить(РольИсполнителя, ПравилаРоли);
			Иначе
				ПравилаОбработки.Вставить(РольИсполнителя, ОписаниеНастроек);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПравилаОбработки;

КонецФункции

// Возвращает исполнителей задач.
//
// 	Возвращаемое значение:
// 		Соответствие
// 			* Ключ - РольИсполнителя
// 			* Значение - Соответствие
// 				Если РольИсполнителя - ОтветственныйЗаОбращенияСотрудников
// 					* Ключ - ДополнительныйОбъектАдресации
// 					* Значение - Соответствие
// 						* Ключ - ОсновнойОбъектАдресации
// 						* Значение - Массив
// 				Если РольИсполнителя не ОтветственныйЗаОбращенияСотрудников
// 					* Ключ - ОсновнойОбъектАдресации
// 					* Значение - Массив.
//
&НаСервере
Функция ДанныеИсполнителейЗадач(СписокРолей, Подразделения)
	
	ИсполнителиЗадач = Новый Соответствие;
	ИсполнителиРолей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РолиИсполнителей", СписокРолей);
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
	|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
	|	ИсполнителиЗадач.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя В(&РолиИсполнителей)
	|	И ИсполнителиЗадач.ОсновнойОбъектАдресации В(&Подразделения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Исполнитель";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Структура("ИсполнителиЗадач,ИсполнителиРолей", ИсполнителиЗадач, ИсполнителиРолей);
	КонецЕсли;
	
	ТаблицаИсполнителиЗадач = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаТЗ Из ТаблицаИсполнителиЗадач Цикл
		
		РольИсполнителя = СтрокаТЗ.РольИсполнителя;
		ИсполнителиРоли = ИсполнителиЗадач[РольИсполнителя];
		Если ИсполнителиРоли = Неопределено Тогда
			ИсполнителиРоли = Новый Соответствие;
		КонецЕсли;
		
		Если РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
			ИсполнителиШаблона = ИсполнителиРоли[СтрокаТЗ.ДополнительныйОбъектАдресации];
			Если ИсполнителиШаблона = Неопределено Тогда
				ИсполнителиШаблона = Новый Соответствие;
			КонецЕсли;
			ИсполнителиПодразделения = ИсполнителиШаблона[СтрокаТЗ.ОсновнойОбъектАдресации];
			Если ИсполнителиПодразделения = Неопределено Тогда
				ИсполнителиПодразделения = Новый Массив;
			КонецЕсли;
			ИсполнителиПодразделения.Добавить(СтрокаТЗ.Исполнитель);
			ИсполнителиШаблона.Вставить(СтрокаТЗ.ОсновнойОбъектАдресации, ИсполнителиПодразделения);
			ИсполнителиРоли.Вставить(СтрокаТЗ.ДополнительныйОбъектАдресации, ИсполнителиШаблона);
		Иначе
			ИсполнителиПодразделения = ИсполнителиРоли[СтрокаТЗ.ОсновнойОбъектАдресации];
			Если ИсполнителиПодразделения = Неопределено Тогда
				ИсполнителиПодразделения = Новый Массив;
			КонецЕсли;
			ИсполнителиПодразделения.Добавить(СтрокаТЗ.Исполнитель);
			ИсполнителиРоли.Вставить(СтрокаТЗ.ОсновнойОбъектАдресации, ИсполнителиПодразделения);
		КонецЕсли;
		
		ИсполнителиЗадач.Вставить(РольИсполнителя, ИсполнителиРоли);
		
	КонецЦикла;
	
	Если Не НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
		|	НЕОПРЕДЕЛЕНО КАК ШаблонДокумента,
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя В(&РолиИсполнителей)
		|	И ИсполнителиЗадач.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
		|	И ИсполнителиЗадач.ОсновнойОбъектАдресации В(&Подразделения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.РольИсполнителя,
		|	ИсполнителиЗадач.ДополнительныйОбъектАдресации,
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя В(&РолиИсполнителей)
		|	И ИсполнителиЗадач.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
		|	И ИсполнителиЗадач.ОсновнойОбъектАдресации В(&Подразделения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РольИсполнителя,
		|	ШаблонДокумента,
		|	Исполнитель";
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("РольИсполнителя") Цикл
			Если Выборка.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников Тогда
				ИсполнителиШаблонов = Новый Соответствие;
				Пока Выборка.СледующийПоЗначениюПоля("ШаблонДокумента") Цикл
					Исполнители = Новый Массив;
					Пока Выборка.Следующий() Цикл
						Исполнители.Добавить(Выборка.Исполнитель);
					КонецЦикла;
					ИсполнителиШаблонов.Вставить(Выборка.ШаблонДокумента, Исполнители);
				КонецЦикла;
				ИсполнителиРолей.Вставить(Выборка.РольИсполнителя, ИсполнителиШаблонов);
			Иначе
				Исполнители = Новый Массив;
				Пока Выборка.Следующий() Цикл
					Исполнители.Добавить(Выборка.Исполнитель);
				КонецЦикла;
				ИсполнителиРолей.Вставить(Выборка.РольИсполнителя, Исполнители);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("ИсполнителиЗадач,ИсполнителиРолей", ИсполнителиЗадач, ИсполнителиРолей);

КонецФункции

&НаСервере
Функция ДанныеСтруктурыПредприятия()
	
	СтруктураПредприятияДерево = Новый ДеревоЗначений;
	СтруктураПредприятияДерево.Колонки.Добавить("Подразделение");
	СтруктураПредприятияДерево.Колонки.Добавить("Расформировано", Новый ОписаниеТипов("Булево"));
	СтруктураПредприятияМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоказыватьРасформированные", ПоказыватьРасформированные);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.Предопределенный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Подразделение,
		|	Подразделения.Владелец КАК Владелец,
		|	Подразделения.Расформировано
		|		И Подразделения.ДатаРасформирования <= &ДатаАктуальности КАК Расформировано
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК Подразделения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
		|		ПО Подразделения.Владелец = Организации.Ссылка
		|ГДЕ
		|	(&ПоказыватьРасформированные
		|			ИЛИ НЕ Подразделения.Расформировано
		|			ИЛИ Подразделения.ДатаРасформирования > &ДатаАктуальности)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделения.Наименование ИЕРАРХИЯ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	ВТОрганизации КАК Организации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Наименование";
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		КоличествоЗапросов = РезультатЗапроса.ВГраница();
		Организации = РезультатЗапроса[КоличествоЗапросов].Выгрузить().ВыгрузитьКолонку("Ссылка");
		ДеревоПодразделений = РезультатЗапроса[КоличествоЗапросов-1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Отбор = Новый Структура("Владелец");
		СтрокиДереваПодразделений = ДеревоПодразделений.Строки;
		Для каждого Организация Из Организации Цикл
			
			НоваяСтрока = СтруктураПредприятияДерево.Строки.Добавить();
			НоваяСтрока.Подразделение = Организация;
			
			Отбор.Владелец = Организация;
			НайденныеСтроки = СтрокиДереваПодразделений.НайтиСтроки(Отбор);
			ЗаполнитьСтрокиДерева(НоваяСтрока, НайденныеСтроки);
			
		КонецЦикла;
		
	Иначе
		
		Если СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТОрганизации
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления
			|	И НЕ Организации.Предопределенный
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Подразделения.Ссылка КАК Ссылка,
			|	Подразделения.Расформировано
			|		И Подразделения.ДатаРасформирования <= &ДатаАктуальности КАК Расформировано
			|ПОМЕСТИТЬ ВТПодразделения
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК Подразделения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
			|		ПО Подразделения.Владелец = Организации.Ссылка
			|ГДЕ
			|	(&ПоказыватьРасформированные
			|			ИЛИ НЕ Подразделения.Расформировано
			|			ИЛИ Подразделения.ДатаРасформирования > &ДатаАктуальности)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Организации.Ссылка,
			|	ЛОЖЬ
			|ИЗ
			|	ВТОрганизации КАК Организации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка КАК Подразделение,
			|	ПодразделенияОрганизаций.Расформировано КАК Расформировано
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ПодразделенияОрганизаций
			|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	СтруктураПредприятия.Наименование ИЕРАРХИЯ";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка КАК Подразделение,
			|	ЛОЖЬ КАК Расформировано
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	НЕ СтруктураПредприятия.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	СтруктураПредприятия.Наименование ИЕРАРХИЯ";
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		СтруктураПредприятияДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Для каждого СтрокаДерева Из СтруктураПредприятияДерево.Строки Цикл
		ЗаполнитьСтруктураПредприятияМассив(СтруктураПредприятияМассив, СтруктураПредприятияДерево.Строки);
	КонецЦикла;
	
	Возврат Новый Структура("СтруктураПредприятияДерево,СтруктураПредприятияМассив", СтруктураПредприятияДерево, СтруктураПредприятияМассив);

КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктураПредприятияМассив(СтруктураПредприятияМассив, КоллекцияСтрокДерева)

	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		СтруктураПредприятияМассив.Добавить(СтрокаДерева.Подразделение);
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтруктураПредприятияМассив(СтруктураПредприятияМассив, СтрокаДерева.Строки)
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДерева(СтрокаРодитель, КоллекцияСтрокДерева)

	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиДерева(НоваяСтрока, СтрокаДерева.Строки);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РедактированиеСпискаИсполнителей

&НаКлиенте
Процедура ИсполнителиВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(НастройкиПравилОбработкиЗаявок.Координатор)
		И Результат.Найти(НастройкиПравилОбработкиЗаявок.Координатор) = Неопределено Тогда
		Результат.Добавить(НастройкиПравилОбработкиЗаявок.Координатор);
	КонецЕсли;
	НовыеИсполнители = Новый Массив;
	Для каждого ЗначениеМассива Из Результат Цикл
		Если ЗначениеЗаполнено(ЗначениеМассива) Тогда
			НовыеИсполнители.Добавить(ЗначениеМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если Не НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям Тогда
		ИсполнителиСтроки = Элементы.НастройкиПравил.ТекущиеДанные.Исполнители;
		ИсполнителиСтроки.ЗагрузитьЗначения(НовыеИсполнители);
		Элементы.НастройкиПравил.ТекущиеДанные.ИзмененыИсполнители = Истина;
	Иначе
		ИсполнителиСтроки = Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные.Исполнители;
		Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные.ИзмененыИсполнители = Истина;
		ИсполнителиСтроки.ЗагрузитьЗначения(НовыеИсполнители);
		ОбновитьИсполнителейПодчиненныхСтрок(Элементы.НастройкиПравилПоПодразделениям.ТекущаяСтрока, Элементы.НастройкиПравилПоПодразделениям.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсполнителейПодчиненныхСтрок(ТекущаяСтрока, ТекущиеДанные)
	
	Если ТекущаяСтрока = НастройкиПравилПоПодразделениямТекущаяСтрока
		И ТекущиеДанные.ПолучитьЭлементы().Количество() > 0
		И ТипЗнч(ИсполнителиСтрокиТекущейСтроки) = Тип("ФиксированныйМассив") Тогда
		НовыеИсполнители = ТекущиеДанные.Исполнители.ВыгрузитьЗначения();
		ДобавленныеИсполнители = ОбщегоНазначенияКлиентСервер.РазностьМассивов(НовыеИсполнители, ИсполнителиСтрокиТекущейСтроки);
		УдаленныеИсполнители = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИсполнителиСтрокиТекущейСтроки, НовыеИсполнители);
		ЗаполнитьИсполнителейПодчиненныхСтрок(ТекущиеДанные.ПолучитьЭлементы(), ДобавленныеИсполнители, УдаленныеИсполнители);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьИсполнителейПодчиненныхСтрок(КоллекцияСтрокДерева, ДобавленныеИсполнители, УдаленныеИсполнители)

	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		Исполнители = СтрокаДерева.Исполнители.ВыгрузитьЗначения();
		ОбновитьИсполнителей = Ложь;
		Для каждого УдаленныйИсполнитель Из УдаленныеИсполнители Цикл
			Индекс = Исполнители.Найти(УдаленныйИсполнитель);
			Если Индекс <> Неопределено Тогда
				Исполнители.Удалить(Индекс);
				ОбновитьИсполнителей = Истина;
			КонецЕсли;
		КонецЦикла;
		Для каждого ДобавленныйИсполнитель Из ДобавленныеИсполнители Цикл
			Индекс = Исполнители.Найти(ДобавленныйИсполнитель);
			Если Индекс = Неопределено Тогда
				Исполнители.Добавить(ДобавленныйИсполнитель);
				ОбновитьИсполнителей = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ОбновитьИсполнителей Тогда
			СтрокаДерева.Исполнители.ЗагрузитьЗначения(Исполнители);
			СтрокаДерева.ИзмененыИсполнители = Истина;
		КонецЕсли;
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьИсполнителейПодчиненныхСтрок(СтрокаДерева.ПолучитьЭлементы(), ДобавленныеИсполнители, УдаленныеИсполнители);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ИзменениеДетализацииНастройки

&НаКлиенте
Процедура ВидНастройкиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		ВидНастройки = ?(ВидНастройки=1,0,1);
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	ВидНастройкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНастройкиПриИзмененииНаСервере()
	
	НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям = ?(ВидНастройки = 1, Истина, Ложь);
	
	УстановитьВидимостьЭлементов(ЭтаФорма);
	
	Если НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям Тогда
		Для каждого СтрокаТЗ Из НастройкиПравил Цикл
			ЗаполнитьНастройкиПоПодразделениямПриИзмененииВидаНастройки(СтрокаТЗ, СтрокаТЗ.ПоПодразделениям.ПолучитьЭлементы());
		КонецЦикла;
	Иначе
		Исполнители = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкиПравилОбработкиЗаявок.Координатор);
		ЗаполнитьИсполнителей = ЗначениеЗаполнено(НастройкиПравилОбработкиЗаявок.Координатор);
		Для каждого СтрокаТЗ Из НастройкиПравил Цикл
			Если ЗаполнитьИсполнителей Тогда
				СтрокаТЗ.Исполнители.ЗагрузитьЗначения(Исполнители);
			Иначе
				СтрокаТЗ.Исполнители.Очистить();
			КонецЕсли;
			СтрокаТЗ.ДнейНаИсполнение 		= НастройкиПравилОбработкиЗаявок.ДнейНаИсполнение;
			СтрокаТЗ.ТребуетсяПодпись 		= Ложь;
			СтрокаТЗ.ИзмененыИсполнители 	= Истина;
			СтрокаТЗ.ИзмененыПравила 		= Истина;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиПоПодразделениямПриИзмененииВидаНастройки(СтрокаТЗ, КоллекцияСтрокДерева)

	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		СтрокаДерева.Исполнители.ЗагрузитьЗначения(СтрокаТЗ.Исполнители.ВыгрузитьЗначения());
		СтрокаДерева.ДнейНаИсполнение 		= СтрокаТЗ.ДнейНаИсполнение;
		СтрокаДерева.ТребуетсяПодпись 		= СтрокаТЗ.ТребуетсяПодпись;
		СтрокаДерева.ИзмененыИсполнители 	= Истина;
		СтрокаДерева.ИзмененыПравила 		= Истина;
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьНастройкиПоПодразделениямПриИзмененииВидаНастройки(СтрокаТЗ, СтрокаДерева.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СменаКоординатор

&НаКлиенте
Процедура НастройкиПравилОбработкиЗаявокКоординаторПриИзменении(Элемент)
	
	КоординаторЗадан = ЗначениеЗаполнено(НастройкиПравилОбработкиЗаявок.Координатор);
	Если НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям Тогда
		Для каждого СтрокаТЗ Из НастройкиПравил Цикл
			ОбработатьИзменениеКоординатора(СтрокаТЗ.ПоПодразделениям.ПолучитьЭлементы());
		КонецЦикла;
	Иначе
		Для каждого СтрокаТЗ Из НастройкиПравил Цикл
			ЭлементСписка = СтрокаТЗ.Исполнители.НайтиПоЗначению(ПрежнийКоординатор);
			Если ЭлементСписка <> Неопределено Тогда
				СтрокаТЗ.Исполнители.Удалить(ЭлементСписка);
			КонецЕсли;
			Если КоординаторЗадан И СтрокаТЗ.Исполнители.НайтиПоЗначению(НастройкиПравилОбработкиЗаявок.Координатор) = Неопределено Тогда
				СтрокаТЗ.Исполнители.Добавить(НастройкиПравилОбработкиЗаявок.Координатор);
			КонецЕсли;
			СтрокаТЗ.ИзмененыИсполнители = Истина;
		КонецЦикла;
	КонецЕсли;
	ПрежнийКоординатор = НастройкиПравилОбработкиЗаявок.Координатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКоординатора(КоллекцияСтрокДерева)
	
	КоординаторЗадан = ЗначениеЗаполнено(НастройкиПравилОбработкиЗаявок.Координатор);
	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		ЭлементСписка = СтрокаДерева.Исполнители.НайтиПоЗначению(ПрежнийКоординатор);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаДерева.Исполнители.Удалить(ЭлементСписка);
		КонецЕсли;
		Если КоординаторЗадан И СтрокаДерева.Исполнители.НайтиПоЗначению(НастройкиПравилОбработкиЗаявок.Координатор) = Неопределено Тогда
			СтрокаДерева.Исполнители.Добавить(НастройкиПравилОбработкиЗаявок.Координатор);
		КонецЕсли;
		СтрокаДерева.ИзмененыИсполнители = Истина;
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ОбработатьИзменениеКоординатора(СтрокаДерева.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПоказыватьРасформированные

&НаКлиенте
Процедура ПоказыватьРасформированныеПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена Тогда
		ПоказыватьРасформированные = Не ПоказыватьРасформированные;
		Возврат;
	КонецЕсли;
	
	ЗаписатьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПоказыватьРасформированные()
	
	НастройкиПравил.Очистить();
	ПрочитатьНастройки();

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПараметрыОткрытияОтчета()
	
	ОтчетОбъект = Отчеты.Задачи.Создать();
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ЭлементОтбора =  КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор();
	ЭлементОтбора.Представление = НСтр("ru = 'Заявки сотрудников';
										|en = 'Заявки сотрудников'");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БизнесПроцесс.ТипЗаявкиКабинетСотрудника");
	ЭлементОтбора.Использование = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Вариант", КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта", "ЗаявкиСотрудника");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПроверитьСтруктуруПредприятия()

	Запрос = Новый Запрос;
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.Предопределенный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	КоличествоДоступныхЗаписей = РезультатЗапроса.Выгрузить().Количество();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	РезультатЗапроса = Запрос.Выполнить();
	КоличествоЗаписей = РезультатЗапроса.Выгрузить().Количество();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Доступна", КоличествоЗаписей = КоличествоДоступныхЗаписей);
	РезультатПроверки.Вставить("Пустая", КоличествоЗаписей = 0);
	
	Возврат РезультатПроверки;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлементы = Элемент.Поля.Элементы.Добавить();
	ПолеЭлементы.Поле = Новый ПолеКомпоновкиДанных("НастройкиПравилРольИсполнителя");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПравил.ШаблонДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый  ПолеКомпоновкиДанных("НастройкиПравил.ШаблонДокумента"));
	
	ТекущийШрифт = Элементы["НастройкиПравилПоПодразделениям"].Шрифт;
	ЗачеркнутыйШрифт 	= Новый Шрифт(ТекущийШрифт, , , , , , Истина);
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПравил.ПоПодразделениям.Расформировано");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НастройкиПравилПоПодразделениямПодразделение");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементов(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"НастройкиПравилПоПодразделениям", "Видимость", Форма.НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"НастройкиПравилИсполнители", "Видимость", Форма.ПоказыватьИсполнителей И Не Форма.НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"НастройкиПравилДнейНаИсполнение", "Видимость", Не Форма.НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"НастройкиПравилТребуетсяПодпись", "Видимость", Форма.ИспользуетсяКадровыйЭДО И Не Форма.НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"НастройкиПравилПоПодразделениямТребуетсяПодпись", "Видимость", Форма.ИспользуетсяКадровыйЭДО);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ЗавершатьЗаявкиСотрудникаПослеПодписанияСправки", "Видимость", Форма.ИспользуетсяКадровыйЭДО);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			"ПоказыватьРасформированные", "Видимость",
			Форма.НастройкиПравилОбработкиЗаявок.ИспользоватьДетализациюПоПодразделениям И Форма.ДоступныРасформированныеПодразделения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПравилСогласованияСервиса()

	Данные = Справочники.ПравилаСогласованияЗаявокКабинетСотрудника.ДанныеДоступныхПравилСогласования();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ПравилаСогласованияЗаявок", "Видимость", ЗначениеЗаполнено(Данные));

КонецПроцедуры

#КонецОбласти