
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РезультатПроверкиНастроек = Параметры.РезультатПроверки;
	Операция = Параметры.Операция;
	
	// Если база файловая, то не показываем ссылки для настроек, так как в них нет смысла.
	// Настраивать можно только для режима клиент-сервер.
	ПоказыватьСсылки = РезультатПроверкиНастроек.РежимРаботы;
	
	ОтобразитьРезультатПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПроверитьНастройкиРегламентныхЗаданий" Тогда
		
		НачатьПроверкуНастроекРегламентныхЗаданий();
		ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияЗаголовокОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СсылкаНаИнструкцию = СинхронизацияЭДОСлужебныйКлиент.СсылкаНаИнструкциюПоНастройкеЭлектронногоДокументооборота();
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаИнструкцию);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСертификатОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПарольСертификатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПроверятьПодписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АктивироватьНастройкуПроверкиПодписиНаСервере();
	ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаСоздаватьПодписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АктивироватьНастройкуСозданияПодписиНаСервере();
	ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьЗадание(Команда)
	
	Оповестить("ПомощникНастроекРегламентныхЗаданийВключитьЗадание", Операция);
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НачатьПроверкуНастроекРегламентныхЗаданий()
	
	ПроверкаНастроек = СинхронизацияЭДО.НачатьПроверкуНастроекРегламентныхЗаданий(
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Проверяется возможность включения регламентного задания.';
											|en = 'Checking the possibility to enable the scheduled job.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиНастроекРегламентныхЗаданий", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ПроверкаНастроек, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиНастроекРегламентныхЗаданий(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(НСтр("ru = 'Автоматическая проверка настроек регламентных заданий';
																		|en = 'Automatic verification of scheduled job settings.'"),
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Результат.ПодробноеПредставлениеОшибки,
				Результат.КраткоеПредставлениеОшибки);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПроверкиНастроек = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОтобразитьРезультатПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСертификатов()
	
	ОткрытьФорму("Обработка.СинхронизацияЭДО.Форма.СписокСертификатов",,
		ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверки()
	
	Операции = СинхронизацияЭДОКлиентСервер.ОперацииПроверкиНастроекРегламентныхЗаданий();
	Заголовки = Новый Структура;
	Заголовки.Вставить(Операции.Отправка, НСтр("ru = 'Автоматическая отправка документов';
												|en = 'Automatic document sending'"));
	Заголовки.Вставить(Операции.Получение,   НСтр("ru = 'Автоматическое получение документов';
													|en = 'Automatic receipt of documents'"));
	Заголовки.Вставить(Операции.ПоУмолчанию, НСтр("ru = 'Автоматическая отправка/получение документов';
													|en = 'Automatic sending/receipt of documents'"));
	
	Заголовок = Заголовки[Операция];
	
	Если РезультатПроверкиНастроек.Успех Тогда
		ЗаголовокПодсказка = НСтр("ru = 'Настройки для автоматической отправки/получения выполнены.';
									|en = 'Automatic sending/receipt configured.'");
	Иначе
		Шаблон = НСтр("ru = 'Для работы с электронными документами в автоматическом режиме требуется дополнительная настройка. <a href = ""ПерейтиВСправкуВИнтернете"">Узнать больше</a>';
						|en = 'Additional setup is required to work with electronic documents in the automatic mode. <a href = ""ПерейтиВСправкуВИнтернете"">Learn more</a>'");
		ЗаголовокПодсказка = СтроковыеФункции.ФорматированнаяСтрока(Шаблон);
	КонецЕсли;
	
	Элементы.ДекорацияЗаголовок.Заголовок = ЗаголовокПодсказка;
	Элементы.ВключитьЗадание.Доступность  = РезультатПроверкиНастроек.Успех;
	
	// Режим работы.
	КартинкаРежимРаботы = ИндексКартинкиСостояния(РезультатПроверкиНастроек.РежимРаботы);
	Описание = ОписаниеСостояния(Элементы.НадписьРежимРаботы, РезультатПроверкиНастроек.РежимРаботы);
	УстановитьТекстЭлемента(Элементы.НадписьРежимРаботы, Описание);
	
	// Наличие криптопровайдера.
	КартинкаКриптоПровайдер = ИндексКартинкиСостояния(РезультатПроверкиНастроек.ЕстьКриптоПровайдер);
	Описание = ОписаниеСостояния(Элементы.НадписьКриптоПровайдер, РезультатПроверкиНастроек.ЕстьКриптоПровайдер);
	УстановитьТекстЭлемента(Элементы.НадписьКриптоПровайдер, Описание);
	
	// Наличие сертификатов.
	КартинкаСертификат = ИндексКартинкиСостояния(РезультатПроверкиНастроек.ЕстьСертификаты);
	Описание = ОписаниеСостояния(Элементы.НадписьСертификат, РезультатПроверкиНастроек.ЕстьСертификаты);
	УстановитьТекстЭлемента(Элементы.НадписьСертификат, Описание);
	
	// Наличие паролей.
	КартинкаПарольСертификата = ИндексКартинкиСостояния(РезультатПроверкиНастроек.ПаролиСохранены);
	Описание = ОписаниеСостояния(Элементы.НадписьПарольСертификата, РезультатПроверкиНастроек.ПаролиСохранены);
	УстановитьТекстЭлемента(Элементы.НадписьПарольСертификата, Описание);
	
	// Проверка подписи на сервере.
	КартинкаПроверкаПодписи = ИндексКартинкиСостояния(РезультатПроверкиНастроек.ПроверкаПодписи);
	Описание = ОписаниеСостояния(Элементы.НадписьПроверятьПодпись, РезультатПроверкиНастроек.ПроверкаПодписи);
	УстановитьТекстЭлемента(Элементы.НадписьПроверятьПодпись, Описание);
	
	// Создание подписи на сервере.
	КартинкаСозданиеПодписи = ИндексКартинкиСостояния(РезультатПроверкиНастроек.СозданиеПодписи);
	Описание = ОписаниеСостояния(Элементы.НадписьСоздаватьПодпись, РезультатПроверкиНастроек.СозданиеПодписи);
	УстановитьТекстЭлемента(Элементы.НадписьСоздаватьПодпись, Описание);
	
КонецПроцедуры

&НаСервере
Функция ИндексКартинкиСостояния(ИндексСостояния)
	
	// Индекс состояния и индекс картинки в коллекции могут не совпадать, необходимо установить соответствие.
	
	// Индексы состояний.
	// 0 - Блокирующая ошибка.
	// 1 - Неблокирующая ошибка.
	// 2 - Ошибок нет.
	
	Индексы = Новый Соответствие; // состояние - индекс картинки в коллекции
	Индексы.Вставить(0, 0);
	Индексы.Вставить(1, 1);
	Индексы.Вставить(2, 3);
	
	Возврат Индексы[ИндексСостояния];
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЭлемента(Элемент, Описание)
	
	Элемент.Заголовок                      = Описание.Заголовок;
	Элемент.РасширеннаяПодсказка.Заголовок = Описание.Подсказка
	
КонецПроцедуры

&НаСервере
Функция ОписаниеСостояния(ЭлементФормы, ИндексСостояния)
	
	// Индексы состояний.
	// 0 - Блокирующая ошибка.
	// 1 - Неблокирующая ошибка.
	// 2 - Ошибок нет.
	
	ОписаниеСостояний = Новый Соответствие;
	ОписаниеПодсказок = Новый Соответствие;
	
	ОписаниеПодсказок.Вставить(2, ""); // если нет ошибок, то подсказку не выводим
	
	Если ЭлементФормы = Элементы.НадписьРежимРаботы Тогда
		
		ОписаниеСостояний.Вставить(0, НСтр("ru = 'Информационная база должна работать в режиме клиент-сервер';
											|en = 'The infobase must operate in client/server mode'"));
		ОписаниеПодсказок.Вставить(0, НСтр("ru = 'Работа регламентных заданий по отправке и получению документов поддерживается только в режиме клиент-сервер.';
											|en = 'Scheduled jobs for sending and receiving documents are supported only in client/server mode.'"));
		
		ОписаниеСостояний.Вставить(2, НСтр("ru = 'Информационная база работает в режиме клиент-сервер';
											|en = 'The infobase is operating in client/server mode'"));
		
	ИначеЕсли ЭлементФормы = Элементы.НадписьКриптоПровайдер Тогда
		
		ОписаниеСостояний.Вставить(0, НСтр("ru = 'Необходимо установить криптопровайдер';
											|en = 'Install cryptographic service provider'"));
		ОписаниеПодсказок.Вставить(0, НСтр("ru = 'Криптопровайдер должен быть установлен на сервере.';
											|en = 'Cryptographic service provider must be installed on the server.'"));
		
		ОписаниеСостояний.Вставить(2, НСтр("ru = 'Криптопровайдер установлен на сервере';
											|en = 'Cryptographic service provider is installed on the server'"));
		
	ИначеЕсли ЭлементФормы = Элементы.НадписьСертификат Тогда
		
		ОписаниеСостояний.Вставить(0, НСтр("ru = 'Нет доступных сертификатов';
											|en = 'There are no available certificates'"));
		ОписаниеПодсказок.Вставить(0, НСтр("ru = 'По каждой учетной записи ЭДО должен быть сертификат, установленный на сервере. Сертификат должен быть установлен для пользователя, от имени которого работает сервер 1с. Значение поля ""Используют"" сертификата должно быть ""Не указаны"".';
											|en = 'Each EDI account must have a certificate set on the server. The certificate must be set for the user under which 1C server is running. The ""Use"" field value of the certificate must be ""Not specified"".'"));
		
		Шаблон = НСтр("ru = 'Не у всех учетных записей есть доступные <a href = ""%1"">сертификаты</a> на сервере.';
						|en = 'Not all the accounts have available <a href = ""%1"">certificates</a> on the server.'");
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Шаблон,
			?(ПоказыватьСсылки, "ОткрытьФормуСертификатов", ""));
		ОписаниеСостояний.Вставить(1, ФорматированнаяСтрока);
		ОписаниеПодсказок.Вставить(1, НСтр("ru = 'Автоматически получать документы можно только по тем учетным записям ЭДО, по которым есть сертификат. Сертификат должен быть установлен для пользователя, от имени которого работает сервер 1с. Значение поля ""Используют"" сертификата должно быть ""Не указаны"".';
											|en = 'You can automatically receive documents only for those EDI accounts that have a certificate. The certificate must be set for the user under which 1C server is running. The ""Use"" field value in the certificate must be ""Not specified"".'"));
		
		ОписаниеСостояний.Вставить(2, НСтр("ru = 'Есть доступные сертификаты на сервере';
											|en = 'There are available certificates on the server'"));
		
	ИначеЕсли ЭлементФормы = Элементы.НадписьПарольСертификата Тогда
		
		Шаблон = НСтр("ru = 'Пароли <a href = ""%1"">сертификатов</a> не сохранены';
						|en = 'Passwords for the <a href = ""%1"">certificates</a> are not saved'");
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Шаблон,
			?(ПоказыватьСсылки, "ОткрытьФормуСертификатов", ""));
		
		ОписаниеСостояний.Вставить(0, ФорматированнаяСтрока);
		ОписаниеПодсказок.Вставить(0, НСтр("ru = 'Пароль для сертификата должен быть сохранен без привязки к пользователю и не должен быть пустым.';
											|en = 'Certificate password must be saved without link to a used and must not be empty.'"));
		
		Шаблон = НСтр("ru = 'Пароли сохранены не для всех <a href = ""%1"">сертификатов</a>';
						|en = 'Passwords are saved not for all <a href = ""%1"">certificates</a>'");
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Шаблон,
			?(ПоказыватьСсылки, "ОткрытьФормуСертификатов", ""));
			
		ОписаниеСостояний.Вставить(1, ФорматированнаяСтрока);
		ОписаниеПодсказок.Вставить(1, НСтр("ru = 'Отправлять/получать документы автоматически можно только по сертификатам с сохраненным паролем.';
											|en = 'You can automatically send/receive documents only by certificates with a saved password.'"));
		
		ОписаниеСостояний.Вставить(2, НСтр("ru = 'Пароли сертификатов сохранены';
											|en = 'Certificate passwords are saved'"));
		
	ИначеЕсли ЭлементФормы = Элементы.НадписьПроверятьПодпись Тогда
		
		ОписаниеСостояний.Вставить(0, НСтр("ru = 'Проверка подписей и сертификатов на сервере';
											|en = 'Check signatures and certificates on the server'"));
		
		Шаблон = НСтр("ru = 'Проверка подписей и сертификатов должна происходить на сервере.';
						|en = 'Signatures and certificates must be checked on the server.'");
		Если ПоказыватьСсылки Тогда
			Шаблон = Шаблон + Символы.ПС
				+ НСтр("ru = '<a href = ""АктивироватьПроверкуНаСервере"">Нажмите, чтобы активировать</a>';
						|en = '<a href = ""АктивироватьПроверкуНаСервере"">Click to activate</a>'");
		КонецЕсли;
		
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Шаблон);
		
		ОписаниеПодсказок.Вставить(0, ФорматированнаяСтрока);
		
		ОписаниеСостояний.Вставить(2, НСтр("ru = 'Проверка подписей и сертификатов выполняется на сервере';
											|en = 'Signatures and certificates are checked on the server'"));
		
	ИначеЕсли ЭлементФормы = Элементы.НадписьСоздаватьПодпись Тогда
		
		ОписаниеСостояний.Вставить(0, НСтр("ru = 'Подпись и шифрование на сервере';
											|en = 'Signature and encryption on server'"));
		
		Шаблон = НСтр("ru = 'Подпись и шифрование должно происходить на сервере.';
						|en = 'Signature and encryption must be carried out on the server.'");
		Если ПоказыватьСсылки Тогда
			Шаблон = Шаблон + Символы.ПС
				+ НСтр("ru = '<a href = ""АктивироватьПроверкуНаСервере"">Нажмите, чтобы активировать</a>';
						|en = '<a href = ""АктивироватьПроверкуНаСервере"">Click to activate</a>'");
		КонецЕсли;
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Шаблон);
			
		ОписаниеПодсказок.Вставить(0, ФорматированнаяСтрока);
		
		ОписаниеСостояний.Вставить(2, НСтр("ru = 'Подпись и шифрование выполняется на сервере';
											|en = 'Signature and encryption are carried out on the server'"));
		
	КонецЕсли;
	
	Возврат
		Новый Структура("Заголовок, Подсказка", ОписаниеСостояний[ИндексСостояния], ОписаниеПодсказок[ИндексСостояния]);
	
КонецФункции

&НаСервере
Процедура АктивироватьНастройкуПроверкиПодписиНаСервере()
	
	КриптографияБЭД.УстановитьНастройкиСервернойКриптографии(, Истина);
	НачатьПроверкуНастроекРегламентныхЗаданий();
	
КонецПроцедуры

&НаСервере
Процедура АктивироватьНастройкуСозданияПодписиНаСервере()
	
	КриптографияБЭД.УстановитьНастройкиСервернойКриптографии(Истина);
	НачатьПроверкуНастроекРегламентныхЗаданий();
	
КонецПроцедуры

#КонецОбласти