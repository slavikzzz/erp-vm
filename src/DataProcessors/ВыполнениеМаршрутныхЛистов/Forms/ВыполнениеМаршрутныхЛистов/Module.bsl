//++ Устарело_Производство21
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПриИзмененииПодразделенияВызовСервера();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПриИзмененииПодразделенияВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПриИзмененииОтборовВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаРабочегоМестаПриАктивизации(Элемент)
	
	ОпределитьТекущийЭлементСхемы();
	ПоказатьОписаниеЭлемента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаРабочегоМестаВыбор(Элемент)
	
	ОбработатьВыборЭлементаСхемы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьДанныеФормы(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаСервере
Процедура ПриИзмененииОтборовВызовСервера()

	ОбновитьДанные();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодразделенияВызовСервера()

	Если НЕ Подразделение.Пустая() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаСхема;
		
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
		
		УправлениеМаршрутнымиЛистами = ПараметрыПодразделения.УправлениеМаршрутнымиЛистами;
		
		Если ПараметрыПодразделения.ГрафикиРаботы.Количество() <> 0 Тогда
			ГрафикРаботы = Строка(ПараметрыПодразделения.ГрафикиРаботы[0]);
		КонецЕсли;
		
		ПриИзмененииОтборовВызовСервера();
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаНеВыбраноПодразделение;
		УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьДанные()

	Если Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = "";
	ОписаниеЭлементовСхемы.Очистить();
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Установим нужную схему
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		ИмяШаблонаМакета = "МетодикаББВ";
	Иначе
		ИмяШаблонаМакета = "ПооперационноеПланирование";
	КонецЕсли;
	СхемаРабочегоМеста = Обработки.ВыполнениеМаршрутныхЛистов.ПолучитьМакет(ИмяШаблонаМакета);
	
	// Определим виды рабочих центров, которые относятся к выбранному РЦ
	Если НЕ ОтборРабочийЦентр.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РабочиеЦентры.ВидРабочегоЦентра
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	РабочиеЦентры.Ссылка В ИЕРАРХИИ(&РабочийЦентр)";
		Запрос.УстановитьПараметр("РабочийЦентр", ОтборРабочийЦентр);
		
		ВидыРабочихЦентров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра");
	Иначе
		ВидыРабочихЦентров = Новый Массив;
	КонецЕсли; 
	
	// Заполним схему данными
	ЗаполнитьФункциюВыработкаСотрудников(ВидыРабочихЦентров);
	ЗаполнитьФункциюВыпускПродукции(ВидыРабочихЦентров);
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		ЗаполнитьФункциюВводДанныхОВыполнении(ВидыРабочихЦентров);
	Иначе
		ЗаполнитьФункциюВыполнениеОпераций();
	КонецЕсли;

	ДобавитьОписаниеЭлементаСхемы("Форма_МаршрутныеЛисты_КВыполнению", 
								НСтр("ru = 'Маршрутные листы переданные к выполнению';
									|en = 'Route sheets transferred for completion'"), 
								НСтр("ru = 'Позволяет открыть список маршрутных листов переданных к выполнению.';
									|en = 'Allows you to open the route sheets transferred for completion.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_МаршрутныеЛисты_Выполнен", 
								НСтр("ru = 'Выполненные маршрутные листы';
									|en = 'Completed route sheets'"), 
								НСтр("ru = 'Позволяет открыть список выполненных маршрутных листов.';
									|en = 'Allows you to open the completed route sheets.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_Бригады", 
								НСтр("ru = 'Бригады';
									|en = 'Teams'"), 
								НСтр("ru = 'Позволяет открыть список бригад.';
									|en = 'Allows you to open a team list.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_ПечатьСуточныеЗадания", 
								НСтр("ru = 'Сменно-суточные задания';
									|en = 'Shift-day jobs'"), 
								НСтр("ru = 'Позволяет сформировать сменно-суточные задания.';
									|en = 'Allows you to generate shift-day jobs.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Данные_Трудозатраты", 
								НСтр("ru = 'Трудозатраты';
									|en = 'Labor costs'"), 
								НСтр("ru = 'Работы выполненные бригадами.';
									|en = 'Works performed by teams.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Данные_ОтклоненияОтРасписания", 
								НСтр("ru = 'Отклонения от расписания';
									|en = 'Timetable variances'"), 
								НСтр("ru = 'При выполнении операций могут возникать отклонения от расписания.
											|При возникновении отклонения требуется перепланировать выполнение операций.';
											|en = 'Timetable variances may occur while executing operations.
											|If a variance occurs, reschedule the operation execution.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Данные_ФактическиеДанныеПоМаршрутномуЛисту", 
								НСтр("ru = 'Фактический расход материалов, выпуск изделий и выполнение работ';
									|en = 'Actual material consumption, product release, and execution of activities'"), 
								НСтр("ru = 'При выполнении операций можно ввести отклонения или фактический расход материалов, выпуск изделий и выполнение работ.';
									|en = 'While executing operations, you can enter variances and actual material consumption, product release and work performance.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_СоставБригад", 
								НСтр("ru = 'Состав бригад';
									|en = 'Team staff'"), 
								НСтр("ru = 'Позволяет сформировать состав бригад.';
									|en = 'Allows you to create teams.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_ВыпускПродукции", 
								НСтр("ru = 'Выпуск продукции';
									|en = 'Product costing method'"), 
								НСтр("ru = 'Позволяет открыть оформленный выпуско продукции.';
									|en = 'Allows you to open registered product release.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Функция_ОтметкаВыполнения", 
								НСтр("ru = 'Отметка выполнения маршрутных листов';
									|en = 'Mark route sheets as completed'"), 
								НСтр("ru = 'Для оформления выпуска продукции и выполнения работ и услуг требуется отметить выполнение маршрутных листов.';
									|en = 'To register released products and performed works/services, mark the route sheets as completed.'"));
								
	ПоказатьОписаниеЭлемента(ЭтаФорма);
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыФункции()

	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ИмяФункции");
	ПараметрыФункции.Вставить("ЗаголовокФункции");
	ПараметрыФункции.Вставить("ОписаниеФункции");
	ПараметрыФункции.Вставить("ШаблонПоказатель1");
	ПараметрыФункции.Вставить("ШаблонПоказатель2");
	ПараметрыФункции.Вставить("ШаблонОписаниеПоказатель1");
	ПараметрыФункции.Вставить("ШаблонОписаниеПоказатель2");
	ПараметрыФункции.Вставить("ШаблонПустойПоказатель", Неопределено);
	ПараметрыФункции.Вставить("Показатель1", Неопределено);
	ПараметрыФункции.Вставить("Показатель2", Неопределено);
	
	Возврат ПараметрыФункции;
	
КонецФункции

&НаСервере
Процедура ДобавитьДанныеФункции(ПараметрыФункции)

	ТекстТекущееСостояние = "";
	ТекстПоказатель1      = "";
	ТекстПоказатель2      = "";
	ТекстПустойПоказатель = "";
	
	Если ЗначениеЗаполнено(ПараметрыФункции.Показатель1) Тогда
		ТекстПоказатель1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыФункции.ШаблонПоказатель1, ПараметрыФункции.Показатель1);
		ТекстТекущееСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыФункции.ШаблонОписаниеПоказатель1, ПараметрыФункции.Показатель1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФункции.Показатель2) Тогда
		ТекстПоказатель2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыФункции.ШаблонПоказатель2, ПараметрыФункции.Показатель2);
		ТекстТекущееСостояние = ТекстТекущееСостояние + ?(ТекстТекущееСостояние = "", "", Символы.ПС)
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыФункции.ШаблонОписаниеПоказатель2, ПараметрыФункции.Показатель2);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыФункции.Показатель1) И  НЕ ЗначениеЗаполнено(ПараметрыФункции.Показатель2) Тогда
		Если ПараметрыФункции.ШаблонПустойПоказатель <> Неопределено Тогда
			ТекстПустойПоказатель = ПараметрыФункции.ШаблонПустойПоказатель;
			ТекстТекущееСостояние = ПараметрыФункции.ШаблонПустойПоказатель;
		Иначе
			ТекстПустойПоказатель = НСтр("ru = '- нет задач';
										|en = '- no tasks'");
			ТекстТекущееСостояние = НСтр("ru = '- нет задач';
										|en = '- no tasks'");
		КонецЕсли; 
	КонецЕсли; 
	
	ЭлементСхемы = СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("Показатель1_" + ПараметрыФункции.ИмяФункции);
	Если ЭлементСхемы <> Неопределено Тогда
		ЭлементСхемы.Наименование = ТекстПоказатель1;
	КонецЕсли; 
	
	ЭлементСхемы = СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("Показатель2_" + ПараметрыФункции.ИмяФункции);
	Если ЭлементСхемы <> Неопределено Тогда
		ЭлементСхемы.Наименование = ТекстПоказатель2;
	КонецЕсли; 
	
	ЭлементСхемы = СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("ПустойПоказатель_" + ПараметрыФункции.ИмяФункции);
	Если ЭлементСхемы <> Неопределено Тогда
		ЭлементСхемы.Наименование = ТекстПустойПоказатель;
	КонецЕсли; 
	
	ШаблонОписания = НСтр("ru = '%1
								|
								|Текущее состояние:
								|%2';
								|en = '%1
								|
								|The current state:
								|%2'");
								
	ОписаниеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания, ПараметрыФункции.ОписаниеФункции, ТекстТекущееСостояние);
											
	ДобавитьОписаниеЭлементаСхемы("Функция_" + ПараметрыФункции.ИмяФункции, ПараметрыФункции.ЗаголовокФункции, ОписаниеЭлемента);

КонецПроцедуры
 
&НаСервере
Процедура ДобавитьОписаниеЭлементаСхемы(ИмяЭлемента, Заголовок, Описание)

	НовоеОписание = ОписаниеЭлементовСхемы.Добавить();
	НовоеОписание.ИмяЭлемента = ИмяЭлемента;
	НовоеОписание.Заголовок = Заголовок;
	НовоеОписание.Описание = Описание;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциюВыработкаСотрудников(ВидыРабочихЦентров)

	Оформить = 0;
	
	Если ОтборРабочийЦентр.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
		|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
		|ИЗ
		|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(, Подразделение = &Подразделение) КАК ТрудозатратыКОформлению";
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Оформить = Запрос.Выполнить().Выгрузить().Количество();
		
	Иначе	
		
		Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
			
			// При ББВ/УББВ отбор по рабочему центру 
			// устанавливается для видов РЦ маршрутного листа.
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
			|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
			|ИЗ
			|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
			|			,
			|			Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
			|				И Подразделение = &Подразделение) КАК ТрудозатратыКОформлению
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводства
			|		ПО (МаршрутныйЛистПроизводства.Ссылка = ТрудозатратыКОформлению.Распоряжение)
			|			И (МаршрутныйЛистПроизводства.ВидРабочегоЦентра В (&ВидыРабочихЦентров))";
			
			Запрос.УстановитьПараметр("Подразделение",      Подразделение);
			Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
			
			Оформить = Запрос.Выполнить().Выгрузить().Количество();
			
		Иначе	
			
			// При пооперационном планировании отбор по рабочему центру 
			// устанавливается для рабочих центров завершенных операций.
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
			|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
			|ИЗ
			|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
			|			,
			|			Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
			|				И Подразделение = &Подразделение) КАК ТрудозатратыКОформлению
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК МаршрутныйЛистПроизводстваТрудозатраты
			|		ПО (МаршрутныйЛистПроизводстваТрудозатраты.Ссылка = ТрудозатратыКОформлению.Распоряжение)
			|			И (МаршрутныйЛистПроизводстваТрудозатраты.НомерСтроки = ТрудозатратыКОформлению.КодСтрокиРаспоряжения)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
			|		ПО (МаршрутныйЛистПроизводстваОперации.Ссылка = МаршрутныйЛистПроизводстваТрудозатраты.Ссылка)
			|			И (МаршрутныйЛистПроизводстваОперации.КлючСвязи = МаршрутныйЛистПроизводстваТрудозатраты.КлючСвязиОперации)
			|			И (МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра В (&ВидыРабочихЦентров))
			|ГДЕ
			|	ВЫБОР
			|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
			|				ТОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеСформировано)
			|					ИЛИ МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеАктуально)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеЗапланировано)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &ОтметкаНаДату
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
			|		КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)";
			
			Запрос.УстановитьПараметр("Подразделение",      Подразделение);
			Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
			Запрос.УстановитьПараметр("ОтметкаНаДату",      ТекущаяДата);
			
			Оформить = Запрос.Выполнить().Выгрузить().Количество();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПараметрыФункции = ПараметрыФункции();
	ПараметрыФункции.ИмяФункции = "ВыработкаСотрудников";
	ПараметрыФункции.ЗаголовокФункции = НСтр("ru = 'Выработка сотрудников';
											|en = 'Timesheets charge'");
	ПараметрыФункции.ОписаниеФункции = НСтр("ru = 'Позволяет оформить выработку сотрудников по выполненным работам.';
											|en = 'Allows you to register employee output by performed works.'");
	ПараметрыФункции.ШаблонПоказатель2 = НСтр("ru = '- оформить %1';
												|en = '- register %1'");
	ПараметрыФункции.ШаблонОписаниеПоказатель2 = НСтр("ru = '- необходимо оформить выработку по %1 видам работ';
														|en = '- it is required to register output by %1 activity kinds'");
	ПараметрыФункции.Показатель2 = Оформить;
	
	ДобавитьДанныеФункции(ПараметрыФункции);
						
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциюВыпускПродукции(ВидыРабочихЦентров)

	Если ОтборРабочийЦентр.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспоряженияНаВыпуск.Распоряжение КАК Распоряжение,
		|	РаспоряженияНаВыпуск.КодСтроки КАК КодСтроки
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
		|			,
		|			(&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|					ИЛИ Распоряжение.Подразделение = &Подразделение)
		|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК РаспоряженияНаВыпуск
		|ГДЕ
		|	РаспоряженияНаВыпуск.КОформлениюОстаток > 0";
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Оформить = Запрос.Выполнить().Выгрузить().Количество();
		
	Иначе	
		
		Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
			
			// При ББВ/УББВ отбор по рабочему центру 
			// устанавливается для видов РЦ маршрутного листа.
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаспоряженияНаВыпуск.Распоряжение КАК Распоряжение,
			|	РаспоряженияНаВыпуск.КодСтроки КАК КодСтроки
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
			|			,
			|			(&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|					ИЛИ Распоряжение.Подразделение = &Подразделение)
			|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК РаспоряженияНаВыпуск
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводства
			|		ПО (МаршрутныйЛистПроизводства.Ссылка = РаспоряженияНаВыпуск.Распоряжение)
			|			И (МаршрутныйЛистПроизводства.ВидРабочегоЦентра В (&ВидыРабочихЦентров))
			|ГДЕ
			|	РаспоряженияНаВыпуск.КОформлениюОстаток > 0";
			
			Запрос.УстановитьПараметр("Подразделение",      Подразделение);
			Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
			
			Оформить = Запрос.Выполнить().Выгрузить().Количество();
			
		Иначе	
			
			// При пооперационном планировании отбор по рабочему центру 
			// устанавливается для рабочих центров завершенных операций.
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаспоряженияНаВыпуск.Распоряжение КАК Распоряжение,
			|	РаспоряженияНаВыпуск.КодСтроки КАК КодСтроки
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
			|			,
			|			(&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|					ИЛИ Распоряжение.Подразделение = &Подразделение)
			|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК РаспоряженияНаВыпуск
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК МаршрутныйЛистПроизводстваВыходныеИзделия
			|		ПО (МаршрутныйЛистПроизводстваВыходныеИзделия.Ссылка = РаспоряженияНаВыпуск.Распоряжение)
			|			И (МаршрутныйЛистПроизводстваВыходныеИзделия.КодСтроки = РаспоряженияНаВыпуск.КодСтроки)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
			|		ПО (МаршрутныйЛистПроизводстваОперации.Ссылка = МаршрутныйЛистПроизводстваВыходныеИзделия.Ссылка)
			|			И (МаршрутныйЛистПроизводстваОперации.КлючСвязи = МаршрутныйЛистПроизводстваВыходныеИзделия.КлючСвязиОперации)
			|			И (МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра В (&ВидыРабочихЦентров))
			|ГДЕ
			|	РаспоряженияНаВыпуск.КОформлениюОстаток > 0
			|	И ВЫБОР
			|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
			|				ТОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеСформировано)
			|					ИЛИ МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеАктуально)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеЗапланировано)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &ОтметкаНаДату
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
			|		КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)";
			
			Запрос.УстановитьПараметр("Подразделение",      Подразделение);
			Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
			Запрос.УстановитьПараметр("ОтметкаНаДату",      ТекущаяДата);
			
			Оформить = Запрос.Выполнить().Выгрузить().Количество();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПараметрыФункции = ПараметрыФункции();
	ПараметрыФункции.ИмяФункции = "ВыпускПродукции";
	ПараметрыФункции.ЗаголовокФункции = НСтр("ru = 'Выпуск продукции';
											|en = 'Product costing method'");
	ПараметрыФункции.ОписаниеФункции = НСтр("ru = 'Позволяет оформить выпуск продукции.';
											|en = 'Allows you to register products release.'");
	ПараметрыФункции.ШаблонПоказатель2 = НСтр("ru = '- оформить %1';
												|en = '- register %1'");
	ПараметрыФункции.ШаблонОписаниеПоказатель2 = НСтр("ru = '- необходимо оформить выпуск по %1 маршрутным листам';
														|en = '- it is required to register release under %1 route sheets'");
	ПараметрыФункции.Показатель2 = Оформить;
	
	ДобавитьДанныеФункции(ПараметрыФункции);
						
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциюВыполнениеОпераций()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало <= &КонецДня
	|					И МаршрутныйЛистПроизводстваОперации.Окончание >= &НачалоДня
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыполнитьНаСегодня,
	|	СУММА(ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &КонецДня
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредстоитВыполнить
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	|		ПО (МаршрутныйЛистПроизводстваОперации.Ссылка = МаршрутныйЛистПроизводства.Ссылка)
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Проведен
	|	И МаршрутныйЛистПроизводства.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется))
	|	И МаршрутныйЛистПроизводства.Подразделение = &Подразделение
	|	И ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|				ТОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеСформировано)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеЗапланировано)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &ОтметкаНаДату
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|		КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато), ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато))
	|	И (&РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|			ИЛИ ВЫБОР
	|				КОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентрПоРасписанию <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|					ТОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентрПоРасписанию
	|				КОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|					ТОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентр
	|				ИНАЧЕ МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра
	|			КОНЕЦ В ИЕРАРХИИ (&РабочийЦентр))";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("РабочийЦентр",  ОтборРабочийЦентр);
	Запрос.УстановитьПараметр("ОтметкаНаДату", ТекущаяДата);
	Запрос.УстановитьПараметр("НачалоДня",     НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("КонецДня",      КонецДня(ТекущаяДата));
	
	ВыполнитьНаСегодня = 0;
	ПредстоитВыполнить = 0;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ВыполнитьНаСегодня = Выборка.ВыполнитьНаСегодня;
		ПредстоитВыполнить = Выборка.ПредстоитВыполнить;
	КонецЕсли; 
	
	ПараметрыФункции = ПараметрыФункции();
	ПараметрыФункции.ИмяФункции = "ВыполнениеОпераций";
	ПараметрыФункции.ЗаголовокФункции = НСтр("ru = 'Выполнение операций';
											|en = 'Operations Management'");
	ПараметрыФункции.ОписаниеФункции = НСтр("ru = 'Позволяет отразить выполнение операций, ввести фактический расход материалов, выпуск изделий и выполнение работ, сформировать сменно-суточные задания.';
											|en = 'Allows you to record operation execution, enter actual material consumption, product release and work performance, generate shift-day jobs.'");
	ПараметрыФункции.ШаблонПоказатель1 = НСтр("ru = '- на сегодня %1';
												|en = '- for today %1'");
	ПараметрыФункции.ШаблонПоказатель2 = НСтр("ru = '- предстоит %1';
												|en = '- %1 awaiting'");
	ПараметрыФункции.ШаблонОписаниеПоказатель1 = НСтр("ru = '- на сегодня запланировано %1 операций';
														|en = '- %1 operations are planned for today'");
	ПараметрыФункции.ШаблонОписаниеПоказатель2 = НСтр("ru = '- в последующие дни предстоит выполнить %1 операций';
														|en = '- %1 operations are to be executed during the next days'");
	ПараметрыФункции.ШаблонПустойПоказатель = НСтр("ru = '- на сегодня нет задач';
													|en = '- there are no tasks for today'");
	ПараметрыФункции.Показатель1 = ВыполнитьНаСегодня;
	ПараметрыФункции.Показатель2 = ПредстоитВыполнить;
	
	ДобавитьДанныеФункции(ПараметрыФункции);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциюВводДанныхОВыполнении(ВидыРабочихЦентров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МаршрутныйЛистПроизводства.Ссылка), 0) КАК Выполняется
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка.Подразделение = &Подразделение
	|	И МаршрутныйЛистПроизводства.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется)
	|	И МаршрутныйЛистПроизводства.Ссылка.Проведен
	|	И (НЕ &ИспользоватьОтборПоВидамРЦ
	|			ИЛИ МаршрутныйЛистПроизводства.ВидРабочегоЦентра В (&ВидыРабочихЦентров))";
	
	Запрос.УстановитьПараметр("Подразделение",      Подразделение);
	Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидамРЦ", НЕ ОтборРабочийЦентр.Пустая());
	
	Выполняется = 0;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Выполняется = Выборка.Выполняется;
	КонецЕсли; 

	ПараметрыФункции = ПараметрыФункции();
	ПараметрыФункции.ИмяФункции = "ВводДанныхОВыполнении";
	ПараметрыФункции.ЗаголовокФункции = НСтр("ru = 'Ввод данных о выполнении';
											|en = 'Enter execution data'");
	ПараметрыФункции.ОписаниеФункции = НСтр("ru = 'Позволяет отметить выполнение маршрутных листов.';
											|en = 'Allows you to mark route sheets as completed.'");
	ПараметрыФункции.ШаблонПоказатель2 = НСтр("ru = '- выполняется %1';
												|en = '- executing %1'");
	ПараметрыФункции.ШаблонОписаниеПоказатель2 = НСтр("ru = '- выполняется %1 маршрутных листов';
														|en = '- %1 route sheets are in progress'");
	ПараметрыФункции.Показатель2 = Выполняется;
	
	ДобавитьДанныеФункции(ПараметрыФункции);
						
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОбработатьВыборЭлементаСхемы()
	
	Если ИмяТекущегоЭлемента = "" ИЛИ Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Подразделение, РабочийЦентр", Подразделение, ОтборРабочийЦентр);
	
	Если СтрНайти(ИмяТекущегоЭлемента, "ВыполнениеОпераций") <> 0 Тогда
		
		ОткрытьФорму("Обработка.ВыполнениеОпераций.Форма", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_ВыработкаСотрудников") <> 0 Тогда
		
		ПараметрыФормы.Вставить("ОтборВидНаряда", ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.ПустаяСсылка"));
		ПараметрыФормы.Вставить("ПерейтиКСписку");
		ОткрытьФорму("Документ.ВыработкаСотрудников.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ВыработкаСотрудников") <> 0 Тогда
		
		ПараметрыФормы.Вставить("ОтборВидНаряда", ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.ПустаяСсылка"));
		ОткрытьФорму("Документ.ВыработкаСотрудников.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ПечатьСуточныеЗадания") <> 0 Тогда
		
		ОперативныйУчетПроизводстваКлиент.ОткрытьФормуДляПечатиСменноСуточныхЗаданий(ЭтаФорма, ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_ВыпускПродукции") <> 0 Тогда
		
		ПараметрыФормы.Вставить("ПерейтиКСписку");
		ОткрытьФорму("Документ.ВыпускПродукции.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ВыпускПродукции") <> 0 Тогда
		
		ОткрытьФорму("Документ.ВыпускПродукции.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ОтметкаВыполнения") <> 0 Тогда
		
		МетодикаУправления = МетодикаУправленияМаршрутнымиЛистами(Подразделение);
		Если МетодикаУправления = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ") Тогда
			ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма", ПараметрыФормы);
		ИначеЕсли МетодикаУправления = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование")
			ИЛИ МетодикаУправления = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций") Тогда
			ОперативныйУчетПроизводстваКлиент.ОткрытьФормуДиспетчированиеПооперационное(МетодикаУправления, Подразделение);
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_МаршрутныеЛисты_КВыполнению") <> 0 Тогда
		
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению"));
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_МаршрутныеЛисты_Выполнен") <> 0 Тогда
		
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен"));
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_Бригады") <> 0 Тогда
		
		ОткрытьФорму("Справочник.Бригады.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ВводДанныхОВыполнении") <> 0 Тогда
		
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется"));
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы);
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьТекущийЭлементСхемы()

	Если Элементы.СхемаРабочегоМеста.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = Элементы.СхемаРабочегоМеста.ТекущийЭлемент.Имя;
	
	// Если выбран показатель, то сделаем активным функцию в которую входит показатель
	Если СтрНайти(ИмяТекущегоЭлемента, "Показатель") <> 0 Тогда
		ИмяТекущегоЭлемента = "Функция" + Сред(ИмяТекущегоЭлемента, СтрНайти(ИмяТекущегоЭлемента, "_"));
		Элементы.СхемаРабочегоМеста.ТекущийЭлемент = СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти(ИмяТекущегоЭлемента);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьОписаниеЭлемента(Форма)
	
	#Если НЕ ВебКлиент Тогда
		
	ТекстЗаголовка = НСтр("ru = 'Подсказка';
							|en = 'Tooltip'");
	ТекстОписание  = НСтр("ru = 'При выборе элемента двойным щелчком открывается рабочее место.
								|При выборе элемента одним щелчком отображается пояснение.';
								|en = 'If you double-click an item, a workplace will be opened.
								|If you click an item, an explanation will be shown.'");
	
	Если Форма.ИмяТекущегоЭлемента <> "" Тогда
		Для каждого ОписаниеЭлемента Из Форма.ОписаниеЭлементовСхемы Цикл
			Если СтрНайти(Форма.ИмяТекущегоЭлемента, ОписаниеЭлемента.ИмяЭлемента) <> 0 Тогда
				ТекстЗаголовка = ОписаниеЭлемента.Заголовок;
				ТекстОписание  = ОписаниеЭлемента.Описание;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	ЭлементСхемы = Форма.СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("ОписаниеФункции_Заголовок");
	ЭлементСхемы.Наименование = ТекстЗаголовка;
	
	ЭлементСхемы = Форма.СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("ОписаниеФункции_Текст");
	ЭлементСхемы.Наименование = ТекстОписание;
	
	#КонецЕсли 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МетодикаУправленияМаршрутнымиЛистами(Подразделение)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "УправлениеМаршрутнымиЛистами");
	
КонецФункции

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21