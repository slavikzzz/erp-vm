#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем БылиОшибки Экспорт;
Перем Таймаут Экспорт;
Перем Приложение Экспорт;
Перем ИменаСобытийЖР Экспорт;

Перем ИдентификаторМенеджера;
Перем ВестиПротокол;
Перем СтруктураURI;
Перем АдресТокена;
Перем HTTPСоединение;
Перем АдресРесурсаAPI;
Перем ОписаниеКлиентскогоПриложения;
Перем ВерсияAPI;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

Процедура Инициализировать(ПриложениеДляОбмена, ПодготовитьДанныеДляТехПоддержки) Экспорт
	
	БылиОшибки 	= Ложь;
	Таймаут 	= 100;
	ВерсияAPI 	= "";
	
	Приложение 		= ПриложениеДляОбмена;
	ВестиПротокол 	= ПодготовитьДанныеДляТехПоддержки Или Константы.РегистрироватьВЖурналеСобытийЗапросы.Получить();
	ИменаСобытийЖР 	= ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	АдресМенеджера 	= ИнтеграцияУправлениеПерсоналомМенеджер.АдресМенеджера(Приложение);
	АдресТокена 	= ИнтеграцияУправлениеПерсоналом.АдресХраненияТокенаМенеджера(Приложение);
	
	АдресРесурсаAPI = АдресРесурсаAPI();
	
	ИдентификаторМенеджера = ИнтеграцияУправлениеПерсоналомМенеджер.ИдентификаторМенеджера(Приложение);
	
	ОписаниеКлиентскогоПриложения = ИнтеграцияУправлениеПерсоналом.ОписаниеКлиентскогоПриложения();
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресМенеджера);
	
	СоздатьНовоеHTTPСоединение();

КонецПроцедуры

Процедура СоздатьНовоеHTTPСоединение()
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Или ВРег(СтруктураURI.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
КонецПроцедуры

#КонецОбласти

#Область АдресаРесурсовAPI

Функция АдресРесурсаAPI()
	
	РесурсAPI = "/api";
	
	Если Не ПустаяСтрока(ВерсияAPI) Тогда
		РесурсAPI = СтрШаблон("%1/v%2", РесурсAPI, ВерсияAPI);
	КонецЕсли;
	
	Возврат РесурсAPI;
	
КонецФункции

Функция РесурсАбонентИПП()

	Возврат "/users/subscribers";

КонецФункции

Функция РесурсПроверкаИмениДомена()

	Возврат "/hostnames/check";

КонецФункции

Функция РесурсАбонент()

	Возврат "/subscribers"

КонецФункции

Функция РесурсПроверкаИмениДоменаАбонента()

	Возврат "/subscribers/hostnames/check"

КонецФункции

Функция РесурсЗапросАбонента()

	Возврат "/subscribers/{ID}";

КонецФункции

Функция РесурсРазвертываниеПриложения()

	Возврат "/deployments";

КонецФункции

Функция РесурсЗапросРазвертыванияПриложения()

	Возврат "/deployments/{ID}";

КонецФункции

Функция РесурсЗапросПриложение()

	Возврат "/applications/{ID}";

КонецФункции

Функция РесурсИзменитьАдминистратора()

	Возврат "/applications/{ID}/administrators";

КонецФункции

Функция РесурсЗапросИнформационнаяСистема()

	Возврат "/information-systems/{ID}";

КонецФункции

#КонецОбласти

#Область Обмен

Функция ТикетАутентификацииИПП() Экспорт

	Результат = Новый Структура("Тикет,СообщениеОбОшибке");
	
	Ответ = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ИдентификаторМенеджера);
	Если ПустаяСтрока(Ответ.КодОшибки) Тогда
		Результат.Тикет = Ответ.Тикет;
	Иначе
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Если Ответ.КодОшибки = "ОшибкаСервиса" Или Ответ.КодОшибки = "ОшибкаПодключения" Или Ответ.КодОшибки = "НеизвестнаяОшибка" Тогда
			Комментарий = СтрШаблон("%1 %2", НСтр("ru = 'Ошибка аутентификации Интернет-поддержки.';
													|en = 'Ошибка аутентификации Интернет-поддержки.'"), Ответ.ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АбонентИПП(Тикет) Экспорт

	Результат = Новый Структура("Абонент, СообщениеОбОшибке");
	
	ПараметрыЗапроса = ПараметрыЗапроса(РесурсАбонентИПП(), "GET",, Тикет);
	
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			СообщениеОбОшибке = НСтр("ru = 'Ошибка чтения JSON.';
									|en = 'Ошибка чтения JSON.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		Результат.Абонент = АбонентИПППоОбъектуDTO(ОбъектDTO);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Тикет ИПП не прошел проверку.
		СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации пользователя интернет-поддержки.';
								|en = 'Ошибка аутентификации пользователя интернет-поддержки.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗарезервироватьИмяДомена(Тикет, ОписаниеДомена) Экспорт

	Результат = Новый Структура("Зарезервировано, Пояснение, СообщениеОбОшибке", Ложь);
	
	ОбъектDTO = ОписаниеДоменаВОбъектDTO(ОписаниеДомена);
	СтрокаТела = ИнтеграцияУправлениеПерсоналом.СформироватьJSON(ОбъектDTO);
	
	Если ЗначениеЗаполнено(Тикет) Тогда
		РесурсРезервированияИмениДомена = РесурсПроверкаИмениДомена();
	Иначе
		РесурсРезервированияИмениДомена = РесурсПроверкаИмениДоменаАбонента();
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапроса(РесурсРезервированияИмениДомена, "POST", СтрокаТела, Тикет);
	
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 201 Тогда
		// Доменное имя доступно.
		Результат.Зарезервировано = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		// Некорректный запрос.
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Токен не прошел проверку.
		СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации.';
								|en = 'Ошибка аутентификации.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 409 Тогда
		// Доменное имя занято.
		Результат.Пояснение = НСтр("ru = 'Это имя домена занято, введите другое имя.';
									|en = 'Это имя домена занято, введите другое имя.'");
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СоздатьАбонента(Тикет, ИдентификаторВладельцы) Экспорт

	Результат = Новый Структура("Абонент,СообщениеОбОшибке");
	
	АдресРесурса = РесурсЗапросАбонента();
	АдресРесурса = СтрЗаменить(АдресРесурса,"{ID}",ИдентификаторВладельцы);
	ПараметрыЗапроса = ПараметрыЗапроса(АдресРесурса, "POST",, Тикет);
	
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 201 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			СообщениеОбОшибке = НСтр("ru = 'Ошибка чтения JSON.';
									|en = 'Ошибка чтения JSON.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		Результат.Абонент = АбонентПоОбъектуDTO(ОбъектDTO);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации пользователя интернет-поддержки.';
								|en = 'Ошибка аутентификации пользователя интернет-поддержки.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Абонент интернет-поддержки не найден.';
								|en = 'Абонент интернет-поддержки не найден.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция РазвернутьПриложение(ОбъектРазвертывания) Экспорт

	Результат = Новый Структура("РезультатПодключения,СообщениеОбОшибке");
	
	ОбъектDTO = ОбъектРазвертыванияВОбъектDTO(ОбъектРазвертывания);
	СтрокаТела = ИнтеграцияУправлениеПерсоналом.СформироватьJSON(ОбъектDTO);
	
	ПараметрыЗапроса = ПараметрыЗапроса(РесурсРазвертываниеПриложения(), "POST", СтрокаТела);
	
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			СообщениеОбОшибке = НСтр("ru = 'Ошибка чтения JSON.';
									|en = 'Ошибка чтения JSON.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		Результат.РезультатПодключения = РезультатПодключенияПоОбъектуDTO(ОбъектDTO);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка создания приложения.';
								|en = 'Ошибка создания приложения.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 409 Тогда
		// Доменное имя не уникально.
		СообщениеОбОшибке = НСтр("ru = 'Это доменное имя занято, укажите другое имя.';
								|en = 'Это доменное имя занято, укажите другое имя.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка создания приложения.';
								|en = 'Ошибка создания приложения.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПроверитьСостояниеПодключения(ИдентификаторЗаявки) Экспорт
	
	Результат = Новый Структура("РезультатПодключения,СообщениеОбОшибке");
	
	АдресРесурса = РесурсЗапросРазвертыванияПриложения();
	АдресРесурса = СтрЗаменить(АдресРесурса,"{ID}",ИдентификаторЗаявки);
	ПараметрыЗапроса = ПараметрыЗапроса(АдресРесурса, "GET");
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			СообщениеОбОшибке = НСтр("ru = 'Ошибка чтения JSON.';
									|en = 'Ошибка чтения JSON.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		Результат.РезультатПодключения = РезультатПодключенияПоОбъектуDTO(ОбъектDTO);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка создания приложения.';
								|en = 'Ошибка создания приложения.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияОПриложении(ИдентификаторПриложения) Экспорт

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	АдресРесурса = РесурсЗапросПриложение();
	АдресРесурса = СтрЗаменить(АдресРесурса,"{ID}",ИдентификаторПриложения);
	ПараметрыЗапроса = ПараметрыЗапроса(АдресРесурса, "GET");
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			СообщениеОбОшибке = НСтр("ru = 'Ошибка чтения JSON.';
									|en = 'Ошибка чтения JSON.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		Результат.ОписаниеПриложения = ПриложениеПоОбъектуDTO(ОбъектDTO);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Приложение с идентификатором %1 не найдено.';
											|en = 'Приложение с идентификатором %1 не найдено.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ИнформацияОбАбоненте() Экспорт

	Результат = Новый Структура("Абонент,СообщениеОбОшибке");
	
	АдресРесурса = РесурсАбонент();
	ПараметрыЗапроса = ПараметрыЗапроса(АдресРесурса, "GET");
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			СообщениеОбОшибке = НСтр("ru = 'Ошибка чтения JSON.';
									|en = 'Ошибка чтения JSON.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		Результат.Абонент = АбонентПоОбъектуDTO(ОбъектDTO);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбновитьАдминистратораПриложения(ИдентификаторПриложения, ОписаниеАдминистратора) Экспорт

	Результат = Новый Структура("АдминистраторИзменен,СообщениеОбОшибке", Ложь);
	
	ОбъектDTO = ОписаниеАдминистратораВОбъектDTO(ОписаниеАдминистратора);
	СтрокаТела = ИнтеграцияУправлениеПерсоналом.СформироватьJSON(ОбъектDTO);
	
	АдресРесурса = РесурсИзменитьАдминистратора();
	АдресРесурса = СтрЗаменить(АдресРесурса,"{ID}",ИдентификаторПриложения);
	ПараметрыЗапроса = ПараметрыЗапроса(АдресРесурса, "PUT", СтрокаТела);
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		Результат.АдминистраторИзменен = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Сервис с идентификатором %1 не найден.';
											|en = 'Сервис с идентификатором %1 не найден.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СменитьАбонентаПриложения(ИдентификаторАбонента, ИдентификаторПриложения) Экспорт

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	ОбъектDTO = Новый Соответствие;
	ОбъектDTO.Вставить("subscriber", ИдентификаторАбонента);
	СтрокаТела = ИнтеграцияУправлениеПерсоналом.СформироватьJSON(ОбъектDTO);
	
	АдресРесурса = РесурсЗапросПриложение();
	АдресРесурса = СтрЗаменить(АдресРесурса,"{ID}",ИдентификаторПриложения);
	ПараметрыЗапроса = ПараметрыЗапроса(АдресРесурса, "PATCH", СтрокаТела); 
	
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения запроса.';
								|en = 'Ошибка выполнения запроса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			СообщениеОбОшибке = НСтр("ru = 'Ошибка чтения JSON.';
									|en = 'Ошибка чтения JSON.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		Результат.ОписаниеПриложения = ПриложениеПоОбъектуDTO(ОбъектDTO);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Некорректный запрос.';
								|en = 'Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Приложение с идентификатором %1 не найдено.';
											|en = 'Приложение с идентификатором %1 не найдено.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Неизвестный ответ сервера.';
								|en = 'Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура УдалитьИнформационнуюСистему(ИдентификаторИС) Экспорт

	АдресРесурса = РесурсЗапросИнформационнаяСистема();
	АдресРесурса = СтрЗаменить(АдресРесурса,"{ID}",ИдентификаторИС);
	ПараметрыЗапроса = ПараметрыЗапроса(АдресРесурса, "DELETE");
	HTTPОтветСервера(ПараметрыЗапроса);

КонецПроцедуры

Функция ПроверитьКлючи(НастройкиПодключения) Экспорт
	
	Результат = Новый Структура("ТокенПолучен,НеактуальныеКлючи",Ложь,Ложь);
	
	АдресМенеджера = НастройкиПодключения.АдресМенеджера;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресМенеджера);
	СоздатьНовоеHTTPСоединение();
	
	Ответ = НовыйТокен(НастройкиПодключения.Ключи);
	Токен = Ответ.Токен;
	Результат.ТокенПолучен 		= ЗначениеЗаполнено(Ответ.Токен);
	Результат.НеактуальныеКлючи = Ответ.НеактуальныеКлючи;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РегистрацияВЖурналеРегистрации

Функция ПодробностиВЖурналеРегистрации()

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.';
				|en = 'Подробности см. в журнале регистрации.'");

КонецФункции

Функция ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос)

	АдресСервера = СтрШаблон("%1://%2", СтруктураURI.Схема, СтруктураURI.ИмяСервера);
	ЗапросТекст = СтрШаблон("%1 %2%3%4", ИмяМетода, АдресСервера, HTTPЗапрос.АдресРесурса);
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "***";
		ИначеЕсли Заголовок.Ключ = "ticket" Тогда
			ЗначениеЗаголовка = "***";
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеЗаголовка) Тогда
			ЗначениеЗаголовка = "<null>";
		КонецЕсли;
		ЗапросТекст = СтрШаблон("%1%2%3: %4",ЗапросТекст, Символы.ПС, Заголовок.Ключ, ЗначениеЗаголовка);
	КонецЦикла;
	
	Возврат ЗапросТекст;

КонецФункции

Функция ОписаниеОтветаЗапросаДляЖР(HTTPОтвет)

	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.';
							|en = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1';
									|en = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(ТелоОтвета) Тогда
			ОтветТекст = СтрШаблон("%1%2%3", ОтветТекст, Символы.ПС, ТелоОтвета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветТекст;

КонецФункции

Процедура ЗаписатьСобытиеЗапросВЖурналРегистрации(ИмяМетода, HTTPЗапрос, ОтправкаФайла)

	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос);
	
	ТелоЗапроса = "";
	Если Не ОтправкаФайла Тогда
		ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Комментарий = СтрШаблон("%1%2%3", ЗапросТекст, Символы.ПС, ТелоЗапроса);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Запрос, УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

Процедура ЗаписатьСобытиеОтветВЖурналРегистрации(ИмяМетода, HTTPЗапрос, HTTPОтвет)

	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос);
	ОтветТекст  = ОписаниеОтветаЗапросаДляЖР(HTTPОтвет);
	
	Комментарий = СтрШаблон("%1%2%3", ЗапросТекст, Символы.ПС, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Ответ, УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуПолученияОтвета(ИмяМетода, HTTPЗапрос, ПодробноеПредставлениеОшибки)
	
	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос);
	ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.';
						|en = 'Не удалось получить ответ от сервера.'");

	ШаблонОписания = "%1
	|%2
	|%3";
	
	Комментарий = СтрШаблон(ШаблонОписания, ЗапросТекст, ОтветТекст, ПодробноеПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВызова(ИмяМетода, HTTPЗапрос, HTTPОтвет)
	
	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос);
	ОтветТекст  = ОписаниеОтветаЗапросаДляЖР(HTTPОтвет);
	Комментарий = СтрШаблон("%1%2%3", ЗапросТекст, Символы.ПС, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуЧтенияJSON(ОтветСтрока, ОписаниеОшибки)

	ШаблонОписания = НСтр(
	"ru = 'Ошибка чтения JSON:
	|Описание ошибки:
	|%1
	|Строка JSON:
	|%2';
	|en = 'Ошибка чтения JSON:
	|Описание ошибки:
	|%1
	|Строка JSON:
	|%2'");
	
	ОтветСтрокаПустой = НСтр("ru = '<пустая строка>';
							|en = '<пустая строка>'");
	ОтветСтрока = ?(Не ЗначениеЗаполнено(ОтветСтрока), ОтветСтрокаПустой, ОтветСтрока);
	Комментарий = СтрШаблон(ШаблонОписания, ОписаниеОшибки, ОтветСтрока);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

#КонецОбласти

#Область ПолучениеТокенаАутентификации

Функция ТокенАутентификации()
	
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		АдресТокена, "Токен,СрокГодностиТокена");
	
	Если ДанныеВБезопасномХранилище.Токен <> Неопределено
		И ДанныеВБезопасномХранилище.СрокГодностиТокена <> Неопределено Тогда
		
		Если ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеВБезопасномХранилище.СрокГодностиТокена Тогда
			Возврат НовыйТокенАутентификации().Токен;
		Иначе
			Возврат ДанныеВБезопасномХранилище.Токен;
		КонецЕсли;
		
	Иначе
		Возврат НовыйТокенАутентификации().Токен;
	КонецЕсли;
	
КонецФункции

Функция НовыйТокенАутентификации()
	
	Результат = Новый Структура("Токен,НеактуальныеКлючи",,Ложь);
	
	КлючиМенеджера = ИнтеграцияУправлениеПерсоналом.КлючиМенеджера(Приложение);
	Если КлючиМенеджера = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заданы ключи менеджера.';
								|en = 'Не заданы ключи менеджера.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Ответ = НовыйТокен(КлючиМенеджера);
	ЗаполнитьЗначенияСвойств(Результат, Ответ);
	Если ЗначениеЗаполнено(Ответ.Токен) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресТокена,Ответ.Токен, "Токен");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресТокена,Ответ.СрокГодностиТокена, "СрокГодностиТокена");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НовыйТокен(КлючиМенеджера)
	
	Результат = Новый Структура("Токен,СрокГодностиТокена,НеактуальныеКлючи",,,Ложь);
	
	СтрокаBase64 = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", КлючиМенеджера.ИдентификаторКлиента, КлючиМенеджера.СекретКлиента)));
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ОписаниеКлиентскогоПриложения);
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", СтрокаBase64));
	
	Запрос = Новый HTTPЗапрос("/auth/oidc/token", Заголовки);
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
	
	Попытка
		Ответ = HTTPСоединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписатьОшибкуПолученияОтвета("POST", Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
		Если РезультатЧтенияJSON.Свойство("id_token") Тогда
			Результат.Токен = РезультатЧтенияJSON["id_token"];
			Результат.СрокГодностиТокена = ТекущаяУниверсальнаяДатаВМиллисекундах() + 3600*100;
		Иначе
			ШаблонТекста = НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2';
				|en = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'");
			Комментарий = СтрШаблон(ШаблонТекста, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ОтветОшибка = ОбъектОтвета["error"];
		Если ОтветОшибка <> Неопределено Тогда
			Сообщение = ОтветОшибка["message"];
			Если Сообщение <> Неопределено И СтрНайти(Сообщение, "User name or password is invalid") > 0 Тогда
				Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.';
									|en = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
				ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
				Результат.НеактуальныеКлючи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Результат.НеактуальныеКлючи Тогда
			ШаблонТекста = НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2';
				|en = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'");
			Комментарий = СтрШаблон(ШаблонТекста, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен,УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 401 Тогда
		
		Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.';
							|en = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен,УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		Результат.НеактуальныеКлючи = Истина;
		
	Иначе
		
		ШаблонТекста = НСтр("ru = 'Не удалось получить токен аутентификации.
			|Сервер вернул код:%1
			|%2';
			|en = 'Не удалось получить токен аутентификации.
			|Сервер вернул код:%1
			|%2'");
		Комментарий = СтрШаблон(ШаблонТекста, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен,УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗапросыКСерверу

Функция ПараметрыЗапроса(АдресРесурса, ИмяМетода, СтрокаТела = "", Тикет = Неопределено)

	ПараметрыЗапроса = Новый Структура("
	|АдресРесурса,
	|ИмяМетода,
	|СтрокаТела,
	|Тикет"); 
	
	ПараметрыЗапроса.АдресРесурса 	= АдресРесурса;
	ПараметрыЗапроса.ИмяМетода 		= ИмяМетода;
	ПараметрыЗапроса.СтрокаТела 	= СтрокаТела;
	ПараметрыЗапроса.Тикет 			= Тикет;
	
	Возврат ПараметрыЗапроса;

КонецФункции

Функция HTTPОтветСервера(ПараметрыЗапроса)
	
	АдресРесурса 	= ПараметрыЗапроса.АдресРесурса;
	ИмяМетода 		= ПараметрыЗапроса.ИмяМетода;
	СтрокаТела 		= ПараметрыЗапроса.СтрокаТела;
	Тикет 			= ПараметрыЗапроса.Тикет;
	
	Ответ = Неопределено;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", 	ОписаниеКлиентскогоПриложения);
	Заголовки.Вставить("Content-Type", 	"application/json");
	
	ЗапросПоТокену = Не ЗначениеЗаполнено(Тикет);
	Если Не ЗапросПоТокену Тогда
		Заголовки.Вставить("ticket", Тикет);
	Иначе
		Токен = ТокенАутентификации();
		Если Не ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	КонецЕсли;
	
	ПолныйАдресРесурса = СтрШаблон("/%1%2%3", СтруктураURI.ПутьНаСервере, АдресРесурсаAPI, АдресРесурса);
	Запрос = Новый HTTPЗапрос(ПолныйАдресРесурса, Заголовки);
	Если ЗначениеЗаполнено(СтрокаТела) Тогда
		Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	КонецЕсли;
	
	Если ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ИмяМетода, Запрос, Ложь);
	КонецЕсли;
	
	Попытка
		Ответ = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуПолученияОтвета(ИмяМетода, Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ = Неопределено;
		БылиОшибки  = Истина;
	КонецПопытки;
	
	Если ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если ЗапросПоТокену И Ответ <> Неопределено И Ответ.КодСостояния = 401 Тогда
		СоздатьНовоеHTTPСоединение();
		Токен = ТокенАутентификации();
		Если Не ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
		Если ВестиПротокол Тогда
			ЗаписатьСобытиеЗапросВЖурналРегистрации(ИмяМетода, Запрос, Ложь);
		КонецЕсли;
		Попытка
			Ответ = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		Исключение
			ЗаписатьОшибкуПолученияОтвета(ИмяМетода, Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Ответ = Неопределено;
		КонецПопытки;
		Если ВестиПротокол Тогда
			ЗаписатьСобытиеОтветВЖурналРегистрации(ИмяМетода, Запрос, Ответ);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния >= 300 Тогда
		ЗаписатьОшибкуВызова(ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

#КонецОбласти

#Область КонструкторыОбъектов

Функция ОписаниеОбъектаАбонент()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"ИдентификаторАбонента");
	СоответствиеПолей.Вставить("userUeid",			"ИдентификаторПользователяИП");
	СоответствиеПолей.Вставить("subscriberUeid",	"ИдентификаторАбонентаИП");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("isTrial",			"ИспользуетсяПробныйПериод");
	СоответствиеПолей.Вставить("trialEndDate",		"ДатаОкончанияПробногоПериода");
	СоответствиеПолей.Вставить("paidLimitAccounts",	"ОплаченоКабинетов");
	СоответствиеПолей.Вставить("paymentEndDate",	"ДатаОкончанияОплаченногоПериода");
	СоответствиеПолей.Вставить("activeAccounts",	"КоличествоАктивированныхКабинетов");
	СоответствиеПолей.Вставить("clientID",			"ИдентификаторКлиента");
	СоответствиеПолей.Вставить("clientSecret",		"СекретКлиента");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция НовоеОписаниеАбонента()

	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторАбонента");
	Описание.Вставить("ИдентификаторПользователяИП");
	Описание.Вставить("ИдентификаторАбонентаИП");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИспользуетсяПробныйПериод");
	Описание.Вставить("ДатаОкончанияПробногоПериода");
	Описание.Вставить("ОплаченоКабинетов");
	Описание.Вставить("ДатаОкончанияОплаченногоПериода");
	Описание.Вставить("КоличествоАктивированныхКабинетов");
	Описание.Вставить("ИдентификаторКлиента");
	Описание.Вставить("СекретКлиента");
	
	Возврат Описание;

КонецФункции

Функция НовоеОписаниеПриложения()
	
	Описание = Новый Структура;
	Описание.Вставить("Идентификатор");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИдентификаторАбонента");
	Описание.Вставить("ИмяДомена");
	Описание.Вставить("АдресПриложения");
	Описание.Вставить("АдресПриложенияПоИмени");
	Описание.Вставить("Статус");
	Описание.Вставить("Версия");
	Описание.Вставить("Администратор", НовоеОписаниеАдминистратора());
	
	Возврат Описание;

КонецФункции

Функция НовоеОписаниеАдминистратора()

	Описание = Новый Структура;
	Описание.Вставить("ФизическоеЛицо");
	Описание.Вставить("Логин");
	Описание.Вставить("Телефон");
	Описание.Вставить("АдресЭлектроннойПочты");
	Описание.Вставить("СсылкаДляАдминистратора");
	
	Возврат Описание;

КонецФункции

Функция ОписаниеОбъектаИнформационнаяСистема()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"Идентификатор");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("clientID",			"ИдентификаторКлиента");
	СоответствиеПолей.Вставить("clientSecret",		"СекретКлиента");
	СоответствиеПолей.Вставить("applicationID", 	"ИдентификаторПриложения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция НовоеОписаниеИнформационнойСистемы()
	
	Описание = Новый Структура;
	Описание.Вставить("Идентификатор");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИдентификаторКлиента");
	Описание.Вставить("СекретКлиента");
	Описание.Вставить("ИдентификаторПриложения");
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область КонвертацияОбъектов

Функция АбонентИПППоОбъектуDTO(ОбъектDTO)
	
	Описание = Новый Структура("Идентификатор,Наименование");
	
	Если ТипЗнч(ОбъектDTO) = Тип("Массив") Тогда
		Описание.Идентификатор 	= ОбъектDTO[0]["ID"];
		Описание.Наименование 	= ОбъектDTO[0]["name"];
	Иначе
		Описание.Идентификатор 	= ОбъектDTO["ID"];
		Описание.Наименование 	= ОбъектDTO["name"];
	КонецЕсли;
	
	Возврат Описание;

КонецФункции

Функция АбонентПоОбъектуDTO(ОбъектDTO)

	ОписаниеОбъекта  = ОписаниеОбъектаАбонент();
	ОписаниеАбонента = НовоеОписаниеАбонента();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОписаниеАбонента[ЭлементКоллекции.Значение] = ОбъектDTO[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	Возврат ОписаниеАбонента;

КонецФункции

Функция ПриложениеПоОбъектуDTO(ОбъектDTO)
	
	НовоеПриложение = НовоеОписаниеПриложения();
	Если ОбъектDTO <> Неопределено Тогда
		
		НовоеПриложение.Идентификатор 			= ОбъектDTO["ID"];
		НовоеПриложение.Наименование 			= ОбъектDTO["name"];
		НовоеПриложение.ИмяДомена 				= ОбъектDTO["hostname"];
		НовоеПриложение.АдресПриложения 		= ОбъектDTO["url"];
		НовоеПриложение.АдресПриложенияПоИмени 	= ОбъектDTO["aliasUrl"];
		НовоеПриложение.Статус 					= ОбъектDTO["status"];
		НовоеПриложение.Версия 					= ОбъектDTO["version"];
		НовоеПриложение.ИдентификаторАбонента 	= ОбъектDTO["subscriber"];
		
		АдминистраторПриложения = ОбъектDTO["administrator"];
		Если АдминистраторПриложения <> Неопределено Тогда
			НовоеПриложение.Администратор.Логин 				  = АдминистраторПриложения["username"];
			НовоеПриложение.Администратор.Телефон 				  = АдминистраторПриложения["phone"];
			НовоеПриложение.Администратор.АдресЭлектроннойПочты   = АдминистраторПриложения["email"];
			НовоеПриложение.Администратор.СсылкаДляАдминистратора = АдминистраторПриложения["logonUrl"];
			НовоеПриложение.Администратор.ФизическоеЛицо 		  = АдминистраторПриложения["personID"];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовоеПриложение;
	
КонецФункции

Функция ИнформационнаяСистемаПоОбъектуDTO(ОбъектDTO)
	
	ОписаниеОбъекта = ОписаниеОбъектаИнформационнаяСистема();
	ОписаниеИС 		= НовоеОписаниеИнформационнойСистемы();
	
	Если ОбъектDTO <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
			ОписаниеИС[ЭлементКоллекции.Значение] = ОбъектDTO[ЭлементКоллекции.Ключ];
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеИС;
	
КонецФункции

Функция РезультатПодключенияПоОбъектуDTO(ОбъектDTO)

	Описание = Новый Структура("ОписаниеПриложения,ОписаниеИС,Статус,ИдентификаторЗаявки");
	Описание.ОписаниеПриложения 	= ПриложениеПоОбъектуDTO(ОбъектDTO["application"]);
	Описание.ОписаниеИС 			= ИнформационнаяСистемаПоОбъектуDTO(ОбъектDTO["informationSystem"]);
	Описание.Статус 				= ОбъектDTO["status"];
	Описание.ИдентификаторЗаявки 	= ОбъектDTO["ID"];
	
	Возврат Описание;

КонецФункции

Функция ОписаниеАдминистратораВОбъектDTO(ОписаниеОбъекта)

	ОбъектАдминистратор = Новый Соответствие;
	ОбъектАдминистратор.Вставить("personID", 	ОписаниеОбъекта.Идентификатор);
	ОбъектАдминистратор.Вставить("username", 	ОписаниеОбъекта.Логин);
	ОбъектАдминистратор.Вставить("phone", 		ОписаниеОбъекта.МобильныйТелефон);
	ОбъектАдминистратор.Вставить("email", 		ОписаниеОбъекта.ЭлектроннаяПочта);
	
	Возврат ОбъектАдминистратор;

КонецФункции

Функция ОписаниеДоменаВОбъектDTO(ОписаниеДомена)

	ОбъектDTO = Новый Соответствие;
	ОбъектDTO.Вставить("hostname", ОписаниеДомена.ИмяДомена);
	ОбъектDTO.Вставить("reserve",  ОписаниеДомена.Резервировать);
	Если ЗначениеЗаполнено(ОписаниеДомена.ИдентификаторВладельца) Тогда
		ОбъектDTO.Вставить("subscriberID", ОписаниеДомена.ИдентификаторВладельца);
	КонецЕсли;
	
	Возврат ОбъектDTO;

КонецФункции

Функция ОбъектРазвертыванияВОбъектDTO(ОписаниеОбъекта)

	ОбъектDTO = Новый Соответствие();
	
	ОбъектАдминистратор = ОписаниеАдминистратораВОбъектDTO(ОписаниеОбъекта.Администратор);
	
	ОписаниеПриложения = Новый Соответствие;
	ОписаниеПриложения.Вставить("name", 	ОписаниеОбъекта.Приложение.Наименование);
	ОписаниеПриложения.Вставить("hostname", ОписаниеОбъекта.Приложение.ИмяДомена);
	
	ОписаниеИС = Новый Соответствие;
	ОписаниеИС.Вставить("name", ОписаниеОбъекта.ИнформационнаяСистема.Наименование);
	
	ОбъектDTO.Вставить("application", 		ОписаниеПриложения);
	ОбъектDTO.Вставить("informationSystem", ОписаниеИС);
	ОбъектDTO.Вставить("administrator", 	ОбъектАдминистратор);
	
	Возврат ОбъектDTO;

КонецФункции

#КонецОбласти

#КонецОбласти 

Функция РесурсДосупен(АдресРесурса) Экспорт

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресРесурса);
	СоздатьНовоеHTTPСоединение();
	
	Ответ = HTTPОтветСервера(ПараметрыЗапроса("/ping", "GET"));
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецЕсли