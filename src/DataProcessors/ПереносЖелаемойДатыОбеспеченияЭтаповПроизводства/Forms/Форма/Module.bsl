
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Распоряжение", Распоряжение) Тогда
		ОбновитьДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		ПодключитьОбработчикОжидания("НачатьОжиданиеДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РаспоряжениеПриИзменении(Элемент)
	
	ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка = Новый Картинка;
	ОтображениеСостояния.Текст = НСтр("ru = 'Данные неактуальны. Нажмите ""Обновить"" для получения данных.';
										|en = 'Irrelevant data. Click Update to receive data.'");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличныйДокумент

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		АдресРасшифровки, ИсточникНастроек);
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РезультатОбработкаРасшифровкиЗавершение", ЭтотОбъект);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(
		ОписаниеОповещения,
		Расшифровка,
		ДоступныеДействия,
		,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ОбновитьДанныеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДатыОбеспечения(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиДатыОбеспеченияНаСервере();
	ОповеститьПользователяОРезультатахОбработки();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеДанных

&НаКлиенте
Процедура ОбновитьДанныеНаКлиенте()
	
	ОбновитьДанныеНаСервере();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		НачатьОжиданиеДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Распоряжение) Тогда
		ТабличныйДокумент.Очистить();
		Возврат;
	КонецЕсли;
	
	ОтменитьДлительнуюОперацию();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Распоряжение", Распоряжение);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Заполнение списка этапов для переноса дат отгрузки материалов';
			|en = 'Populating the list of stages for materials shipment dates transfer'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПереносЖелаемойДатыОбеспеченияЭтаповПроизводства.ПрочитатьИВывестиЭтапыРаспоряжения",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = ОбработчикОбновленияДанных();
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		ОбработатьРезультатОбновленияДанныхВФоне(ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбработчикОбновленияДанных()
	
	Возврат "ОбновитьДанныеВФонеЗавершение";
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ОчиститьТабличныйДокумент();
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатОбновленияДанныхВФоне(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатОбновленияДанныхВФоне(Результат)
	
	ОчиститьТабличныйДокумент();
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			ТабличныйДокумент = ДанныеЗаполнения.ТабличныйДокумент;
			
			АдресСхемы       = ПоместитьВоВременноеХранилище(ДанныеЗаполнения.СхемаКомпоновкиДанных, УникальныйИдентификатор);
			АдресРасшифровки = ПоместитьВоВременноеХранилище(ДанныеЗаполнения.ДанныеРасшифровки, УникальныйИдентификатор);
			
		КонецЕсли;
	
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДанных

&НаСервере
Процедура ПеренестиДатыОбеспеченияНаСервере()
	
	ОтменитьДлительнуюОперацию();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Перенос дат отгрузки материалов в этапах производства';
			|en = 'Materials shipment dates transfer in production stages'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПереносЖелаемойДатыОбеспеченияЭтаповПроизводства.ПеренестиЖелаемыеДатыОбеспечения",
		Распоряжение,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбработчикОжиданияДлительнойОперации = "ПеренестиДатыОбеспеченияВФонеЗавершение";
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		ОбработатьРезультатПереносаДатОбеспеченияВФоне(ЭтотОбъект, ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
		ОбновитьДанныеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьРезультатПереносаДатОбеспеченияВФоне(Форма, Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			КоличествоОбработанных = ДанныеЗаполнения.КоличествоОбработанных;
			
			Если КоличествоОбработанных > 0 Тогда
				
				Форма.ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Обработано %1 из %2 документов';
						|en = 'Processed %1 of %2 documents'"),
					ДанныеЗаполнения.КоличествоОбработанных,
					ДанныеЗаполнения.КоличествоВсего);
				
				Форма.ТекстЗаголовка = НСтр("ru = 'Даты отгрузки изменены';
											|en = 'Shipment dates changed'");
				
			Иначе
				
				Форма.ТекстСообщения = НСтр("ru = 'Отсутствуют документы для обработки';
											|en = 'No documents to process'");
				Форма.ТекстЗаголовка = НСтр("ru = 'Даты отгрузки не изменены';
											|en = 'Shipment dates not changed'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДатыОбеспеченияВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если НЕ Результат = Неопределено Тогда
		
		ОбработатьРезультатПереносаДатОбеспеченияВФоне(ЭтотОбъект, Результат);
		ОповеститьПользователяОРезультатахОбработки();
		
		ОбновитьДанныеНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОРезультатахОбработки()
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		ПоказатьОповещениеПользователя(
			ТекстЗаголовка,
			,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
		ТекстСообщения = "";
		ТекстЗаголовка = "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОчиститьТабличныйДокумент()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ТабличныйДокумент, "НеИспользовать");
	ТабличныйДокумент.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьДлительнуюОперацию()
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперации()
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ОбработчикОжиданияДлительнойОперации, ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	Если ОбработчикОжиданияДлительнойОперации = ОбработчикОбновленияДанных() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ТабличныйДокумент, "ФормированиеОтчета");
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			ОповещениеОЗавершении,
			ПараметрыОжидания);
	
	НачатьОжиданиеДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровкиЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрВыполненногоДействия)
		И ЭтоСсылкаСправочникаДокумента(ПараметрВыполненногоДействия) Тогда
		
		ПоказатьЗначение(, ПараметрВыполненногоДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСсылкаСправочникаДокумента(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗначения);
	
КонецФункции

#КонецОбласти

#КонецОбласти
