#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьНесколькоПлановСчетовВМеждународномУчете = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоПлановСчетовВМеждународномУчете");
	
	Если ИспользоватьНесколькоПлановСчетовВМеждународномУчете Тогда
		
		Параметры.Свойство("ПланСчетов", Объект.ПланСчетов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем текущую таблицу переходов.
	ТаблицаПереходовПоСценарию();
	
	// Позиционируемся на первом шаге помощника.
	УстановитьПорядковыйНомерПерехода(1);
	
	ИтогоСоздано = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстПредупреждения = НСтр("ru = 'Закрыть помощник?';
								|en = 'Do you want to close the wizard?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, "ЗакрытьФормуБезусловно");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораФайлаДляЗагрузки", ЭтотОбъект);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл для загрузки данных';
										|en = 'Select a file to import the data'");
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx|Электронная таблица OpenDocument (*.ods)|*.ods|Табличный документ (*.mxl)|*.mxl';
									|en = 'Microsoft Excel 97 (*.xls)|*.xls|Microsoft Excel 2007 (*.xlsx)|*.xlsx|OpenDocument Spreadsheet (*.ods)|*.ods|Spreadsheet document (*.mxl)|*.mxl'");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораФайлаДляСохраненияШаблона", ЭтотОбъект);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx|Электронная таблица OpenDocument (*.ods)|*.ods|Табличный документ (*.mxl)|*.mxl';
									|en = 'Microsoft Excel 97 (*.xls)|*.xls|Microsoft Excel 2007 (*.xlsx)|*.xlsx|OpenDocument Spreadsheet (*.ods)|*.ods|Spreadsheet document (*.mxl)|*.mxl'");
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Укажите имя файла для сохранения шаблона';
										|en = 'To save the template, specify the file name'");
	ДиалогВыбораФайла.Расширение = "xls";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла = НСтр("ru = 'Шаблон данных плана счетов';
											|en = 'Chart of accounts data template'");
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнаяИнформацияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", СинонимОбработки());
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоСозданоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ТабличныйДокумент, ЭтоОтчетОбОбновленных", ТаблицаСоздано, Ложь);
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиПлановСчетов.Форма.ОтчетСоздано", ПараметрыФормы,,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоОбновленоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ТабличныйДокумент, ЭтоОтчетОбОбновленных", ТаблицаОбновлено, Истина);
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиПлановСчетов.Форма.ОтчетСоздано", ПараметрыФормы,,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоПропущеноНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеПослеЗакрытияОтчетаОПропущенных = Новый ОписаниеОповещения("ПослеЗакрытияОтчетаОПропущенных", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ТабличныйДокумент", ТаблицаПропущено);
	ОткрытьФорму("Обработка.ПомощникВыгрузкиЗагрузкиПлановСчетов.Форма.ОтчетПропущено", ПараметрыФормы,,ЭтотОбъект,,,ОповещениеПослеЗакрытияОтчетаОПропущенных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	РезультатПроверки = ПроверитьЗаполнениеКлиент();
	
	Если РезультатПроверки.ЕстьОшибки Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.';
								|en = 'Page to be displayed is not specified.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.';
								|en = 'Page to be displayed is not specified.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.';
								|en = 'Page to be displayed is not specified.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ЗагрузитьФайл();
	ПерейтиДалее = Ложь;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 1;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНачало";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииНачало";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииНачало";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 2;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНастройка";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 3;
	Переход.ИмяОсновнойСтраницы     = "СтраницаОжидания";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОжидание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ДлительнаяОперация      = Истина;
	Переход.ИмяОбработчикаДлительнойОперации = "СтраницаОжидания_ОбработкаДлительнойОперации";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 4;
	Переход.ИмяОсновнойСтраницы     = "СтраницаЗавершение";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОкончание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииОкончание";
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаДляЗагрузки(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		Объект.ИмяФайла = Результат[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОтчетаОПропущенных(Результат, ДополнительныеПараметры) Экспорт
	
		Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
		
		ТаблицаПропущено = Результат;
		
		ПорядковыйНомерПерехода = 3;
		
		СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
		Если СтрокиПереходаТекущие.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.';
									|en = 'Page to be displayed is not specified.'");
		КонецЕсли;
		
		СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
		
		Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
		Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
		
		Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
			
			Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
			
		КонецЕсли;
		
		// Устанавливаем текущую кнопку по умолчанию.
		КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
		
		Если КнопкаДалее <> Неопределено Тогда
			
			КнопкаДалее.КнопкаПоУмолчанию = Истина;
			
		Иначе
			
			КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
			
			Если КнопкаГотово <> Неопределено Тогда
				
				КнопкаГотово.КнопкаПоУмолчанию = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
			
		Попытка
			
			ЗагрузитьДанные(Ложь);
			
		Исключение
			
			ОбработатьОшибку(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВЖурналРегистрации(Комментарий)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось выгрузить данные плана счетов';
									|en = 'Cannot export the chart of accounts data'", ОбщегоНазначения.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка,,СинонимОбработки(),Комментарий);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СинонимОбработки()
	Возврат Метаданные.Обработки.ПомощникВыгрузкиЗагрузкиПлановСчетов.Синоним;
КонецФункции

#Область ЗагрузкаПланаСчетов

&НаКлиенте
Процедура ЗагрузитьФайл()
	
	Если ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайла", ЭтотОбъект);
		ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
		ПараметрыЗагрузкиФайла.ИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор;
		ПараметрыЗагрузкиФайла.Интерактивно = Ложь;
		
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузкиФайла, Объект.ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайла(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Попытка
		
		ЗагрузитьДанные(Истина, ПомещенныйФайл)
		
	Исключение
		
		ОбработатьОшибку(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(ИзФайла, ПомещенныйФайл = Неопределено)
	
	Если ИзФайла Тогда
		
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ПомещенныйФайл.Имя));
		РезультатВыполнения = ЗапуститьВыполнениеЗагрузкиВФоне(ТаблицаСопоставления, ИзФайла, ПомещенныйФайл.Хранение, РасширениеФайла);
		
	Иначе
		
		РезультатВыполнения = ЗапуститьВыполнениеЗагрузкиВФоне(ТаблицаСопоставления, ИзФайла);
		
	КонецЕсли;
	
	Если РезультатВыполнения.Статус = "Выполнено"
		ИЛИ РезультатВыполнения.Статус = "Ошибка" Тогда
		
		ОбработатьРезультат(РезультатВыполнения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершенииЗагрузкиПланаСчетов = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиПланаСчетов", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершенииЗагрузкиПланаСчетов, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузкиПланаСчетов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ОбработатьРезультат(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыполнениеЗагрузкиВФоне(Знач ТаблицаСопоставления, ЗагружатьИзФайла, АдресВременногоХранилища = Неопределено, Расширение = Неопределено)
	
	ПараметрыОтчета = Обработки.ПомощникВыгрузкиЗагрузкиПлановСчетов.ПараметрыОтчетовЗагрузки();
	
	ПараметрыОтчета.ТаблицаСоздано = ТаблицаСоздано;
	ПараметрыОтчета.ТаблицаОбновлено = ТаблицаОбновлено;
	ПараметрыОтчета.ТаблицаПропущено = ТаблицаПропущено;
	ПараметрыОтчета.ИтогоОбновлено = ИтогоОбновлено;
	ПараметрыОтчета.ИтогоПропущено = ИтогоПропущено;
	ПараметрыОтчета.ИтогоСоздано = ИтогоСоздано;
	
	ПараметрыЗагрузки = Обработки.ПомощникВыгрузкиЗагрузкиПлановСчетов.ПараметрыЗагрузкиПланаСчетов();
	ПараметрыЗагрузки.ТаблицаСопоставления = ТаблицаСопоставления.Выгрузить();
	ПараметрыЗагрузки.ПараметрыОтчета = ПараметрыОтчета;
	ПараметрыЗагрузки.ЗагружатьИзФайла = ЗагружатьИзФайла;
	ПараметрыЗагрузки.ДвоичныеДанные = ?(ЗагружатьИзФайла, ПолучитьИЗВременногоХранилища(АдресВременногоХранилища), Неопределено);
	ПараметрыЗагрузки.Расширение = Расширение; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоПлановСчетовВМеждународномУчете") Тогда
		
		ПараметрыЗагрузки.ПланСчетов = Объект.ПланСчетов;
		
	КонецЕсли;
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияФункции(ЭтотОбъект.УникальныйИдентификатор);
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьФункцию(ПараметрыФоновогоЗадания, "Обработки.ПомощникВыгрузкиЗагрузкиПлановСчетов.ЗагрузитьДанныеИзФайла", ПараметрыЗагрузки);
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультат(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ПараметрыОтчета = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ЗавершитьЗагрузку(ПараметрыОтчета);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьОшибку(Результат.ПодробноеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибку(Комментарий)
	
	ИмяСобытия = НСтр("ru = 'Не удалось загрузить данные плана счетов';
						|en = 'Cannot import the chart of accounts data'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
	ДобавитьЗаписьВЖурналРегистрации(Комментарий);
	
	Элементы.ГруппаИтоговаяИнформация.Видимость = Истина;
	ИтоговаяИнформация = Комментарий;
	
	Если ПорядковыйНомерПерехода = 3 Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗагрузку(ПараметрыОтчета)
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
	
	ИтогоОбновлено = ПараметрыОтчета.ИтогоОбновлено;
	ИтогоПропущено = ПараметрыОтчета.ИтогоПропущено;
	ИтогоСоздано = ПараметрыОтчета.ИтогоСоздано;
	
	ТаблицаСоздано = ПараметрыОтчета.ТаблицаСоздано;
	ТаблицаОбновлено = ПараметрыОтчета.ТаблицаОбновлено;
	ТаблицаПропущено = ПараметрыОтчета.ТаблицаПропущено;
	
	Если ИтогоПропущено > 0 Тогда
		
		ЦветТекстаПроблема = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветТекстаПроблема");
		
		Элементы.ДекорацияЗаголовокЗавершение.Заголовок = НСтр("ru = 'Загрузка данных выполнена не полностью';
																|en = 'Data is not imported completely'");
		Элементы.ДекорацияЗаголовокЗавершение.ЦветТекста = ЦветТекстаПроблема;
		Элементы.ИтогоПропущено.ЦветТекста = ЦветТекстаПроблема;
		
	Иначе
		
		ЦветТекстаФормы = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветТекстаФормы");
		
		Элементы.ДекорацияЗаголовокЗавершение.Заголовок = НСтр("ru = 'Загрузка данных завершена';
																|en = 'Data import completed'");
		Элементы.ДекорацияЗаголовокЗавершение.ЦветТекста = ЦветТекстаФормы;
		Элементы.ИтогоПропущено.ЦветТекста = ЦветТекстаФормы;
		
	КонецЕсли;
	
	Элементы.ИтогоСоздано.Гиперссылка = ИтогоСоздано > 0;
	Элементы.ИтогоПропущено.Гиперссылка = ИтогоПропущено > 0;
	Элементы.ИтогоОбновлено.Гиперссылка = ИтогоОбновлено > 0;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеШаблона

&НаКлиенте
Процедура ПослеВыбораФайлаДляСохраненияШаблона(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		АдресВоВременномХранилище = СформироватьШаблонНаСервере(Результат[0]);
		ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, АдресВоВременномХранилище, Результат[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьШаблонНаСервере(ПолноеИмяФайла)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПомощникВыгрузкиЗагрузкиПлановСчетов.Шаблон");
	
	ОблШапка = Макет.ПолучитьОбласть("Шапка|Данные");
	ТабличныйДокумент.Вывести(ОблШапка);
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла));;
	
	ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Если РасширениеФайла = "xlsx" Тогда
		
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		
	ИначеЕсли РасширениеФайла = "xls" Тогда
		
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
		
	ИначеЕсли РасширениеФайла = "ods" Тогда
		
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.ODS);
		
	Иначе 
		
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
		
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПроверитьЗаполнениеКлиент()
	
	РезультатПроверки = Новый Структура;
	ЕстьОшибки = Ложь;
	ОписаниеОшибки = "";
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаНастройка Тогда
		
		Если ИспользоватьНесколькоПлановСчетовВМеждународномУчете
			И НЕ ЗначениеЗаполнено(Объект.ПланСчетов) Тогда
			
			ЕстьОшибки = Истина;
			ОписаниеОшибки = НСтр("ru = 'Не заполнен план счетов.';
									|en = 'The chart of accounts is not filled.'");
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ИмяФайла) Тогда
			
			ЕстьОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибки + 
				?(ПустаяСтрока(ОписаниеОшибки),"", Символы.ПС) + 
				НСтр("ru = 'Не заполнено имя файла.';
					|en = 'The file name is not filled.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатПроверки.Вставить("ЕстьОшибки", ЕстьОшибки);
	РезультатПроверки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти
