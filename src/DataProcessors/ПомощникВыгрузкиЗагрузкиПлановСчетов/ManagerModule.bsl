#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если ВыбраннаяФорма = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Запуск обработки возможен только из формы ""Плана счетов"" кнопками ""Выгрузить"" или ""Загрузить"".
			|Перейдите в раздел ""Международный финансовый учет""-""Настройки и справочники""-""Планы счетов"".';
			|en = 'To start the data processor, go to General ledger > Settings and catalogs > Charts of accounts
			| and click Export or Import.'");
		КонецЕсли;
	#КонецЕсли
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗагрузкаПланаСчетов

// Возвращает структуру отчетов о загрузке
//
// Возвращаемое значение:
// 	Структура - Параметры проверки:
// 		* ТаблицаСоздано - ТабличныйДокумент - Список с созданными объектами
// 		* ТаблицаОбновлено - ТабличныйДокумент - Список с обновленными объектами
// 		* ТаблицаПропущено - ТабличныйДокумент - Список с пропущенными объектами
// 		* ИтогоОбновлено - Число - Количество обновленных объектов
// 		* ИтогоПропущено - Число - Количество пропущенных объектов
// 		* ИтогоСоздано - Число - Количество созданных объектов
//
Функция ПараметрыОтчетовЗагрузки() Экспорт
	
	ПараметрыОтчетов = Новый Структура;
	
	ПараметрыОтчетов.Вставить("ТаблицаСоздано");
	ПараметрыОтчетов.Вставить("ТаблицаОбновлено");
	ПараметрыОтчетов.Вставить("ТаблицаПропущено");
	ПараметрыОтчетов.Вставить("ИтогоОбновлено");
	ПараметрыОтчетов.Вставить("ИтогоПропущено");
	ПараметрыОтчетов.Вставить("ИтогоСоздано");
	
	Возврат ПараметрыОтчетов;
	
КонецФункции

// Возвращает параметры загрузки плана счетов
//
// Возвращаемое значение:
// 	Структура - Параметры проверки:
// 		* ТаблицаСопоставления - ТаблицаЗначений - Таблица сопоставления ячеек в макете и файле
// 		* ПараметрыОтчета - Структура - Структура с параметрами отчетов и результатами см. ПараметрыОтчетовЗагрузки()
// 		* ЗагружатьИзФайла - Булево - Если истина, то загрузка из файла, иначе из ТаблицыПропущенных
// 		* ДвоичныеДанные - ДвоичныеДанные - Загружаемый файл
// 		* Расширение - Строка - расширение загружаемого файла 
// 		* ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов для загрузки
//
Функция ПараметрыЗагрузкиПланаСчетов() Экспорт
	
	ПараметрыЗагрузки = Новый Структура;
	
	ПараметрыЗагрузки.Вставить("ТаблицаСопоставления");
	ПараметрыЗагрузки.Вставить("ПараметрыОтчета");
	ПараметрыЗагрузки.Вставить("ЗагружатьИзФайла", Ложь);
	ПараметрыЗагрузки.Вставить("ДвоичныеДанные", Неопределено);
	ПараметрыЗагрузки.Вставить("Расширение", Неопределено);
	ПараметрыЗагрузки.Вставить("ПланСчетов", Справочники.ПланыСчетовМеждународногоУчета.ПустаяСсылка());
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Загружает план счетов из файла или табличного документа
//
// Параметры:
// 	 ПараметрыЗагрузки - Структура - см. ПараметрыЗагрузкиПланаСчетов()
//
// Возвращаемое значение:
//	Структура - Структура с параметрами отчетов и результатами см. ПараметрыОтчетовЗагрузки()
//
Функция ЗагрузитьДанныеИзФайла(ПараметрыЗагрузки) Экспорт
	
	ПараметрыОтчета = ПараметрыЗагрузки.ПараметрыОтчета;
	ТаблицаСопоставления = ПараметрыЗагрузки.ТаблицаСопоставления;
	ЗагружатьИзФайла = ПараметрыЗагрузки.ЗагружатьИзФайла;
	ДвоичныеДанные = ПараметрыЗагрузки.ДвоичныеДанные; // ДвоичныеДанные
	Расширение = ПараметрыЗагрузки.Расширение;
	ПланСчетов = ПараметрыЗагрузки.ПланСчетов;
	
	СоответствиеВидСчета = Новый Соответствие;
	Для Каждого ЯзыкКонфигурации Из Метаданные.Языки Цикл
		
		КодЯзыка = ЯзыкКонфигурации.КодЯзыка;
		
		СоответствиеВидСчета.Вставить(Нстр("ru = 'Актив';
											|en = 'Asset'", КодЯзыка), ВидСчета.Активный);
		СоответствиеВидСчета.Вставить(Нстр("ru = 'Пассив';
											|en = 'Liability'", КодЯзыка), ВидСчета.Пассивный);
		СоответствиеВидСчета.Вставить(Нстр("ru = 'Актив/Пассив';
											|en = 'Asset/Liability'", КодЯзыка), ВидСчета.АктивноПассивный);
		
	КонецЦикла;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПомощникВыгрузкиЗагрузкиПлановСчетов.Шаблон");
	
	ОблШапка = Макет.ПолучитьОбласть("Шапка|Данные");
	ОблСтрока = Макет.ПолучитьОбласть("Строка|Данные");
	
	ОблШапкаПропущенные = Макет.ПолучитьОбласть("Шапка");
	ОблСтрокаПропущенные = Макет.ПолучитьОбласть("Строка");
	
	ПараметрыОтчета.Вставить("ОблСтрока", ОблСтрока);
	ПараметрыОтчета.Вставить("ОблСтрокаПропущенные", ОблСтрокаПропущенные);
	
	ЗагруженныйШаблонСДанными = Новый ТабличныйДокумент;	
	Если ЗагружатьИзФайла Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		ЗагруженныйШаблонСДанными.Прочитать(ИмяВременногоФайла);
		
		ПараметрыОтчета.ИтогоОбновлено = 0;
		ПараметрыОтчета.ИтогоПропущено = 0;
		ПараметрыОтчета.ИтогоСоздано = 0;
		
		ПараметрыОтчета.ТаблицаСоздано.Очистить();
		ПараметрыОтчета.ТаблицаОбновлено.Очистить();
		ПараметрыОтчета.ТаблицаПропущено.Очистить();
		
		ПараметрыОтчета.ТаблицаСоздано.Вывести(ОблШапка);
		ПараметрыОтчета.ТаблицаОбновлено.Вывести(ОблШапка);
		ПараметрыОтчета.ТаблицаПропущено.Вывести(ОблШапкаПропущенные);
		
	Иначе
		
		ЗагруженныйШаблонСДанными.Вывести(ПараметрыОтчета.ТаблицаПропущено);
		
		ПараметрыОтчета.ИтогоПропущено = 0;
		ПараметрыОтчета.ТаблицаПропущено.Очистить();
		ПараметрыОтчета.ТаблицаПропущено.Вывести(ОблШапкаПропущенные);
		
	КонецЕсли;
	
	СоответствиеНомераКолонкиВФайлеИИмениРеквизита = ПроверитьШапкуФайлаЗагрузки(ЗагруженныйШаблонСДанными, ЗагружатьИзФайла);
	
	Для НомерСтроки = 2 По ЗагруженныйШаблонСДанными.ВысотаТаблицы Цикл
		
		НомерКолонкиСКодом = СоответствиеНомераКолонкиВФайлеИИмениРеквизита["НомерКолонкиСКодом"];
		ЯчейкаСКодомПланаСчетов = ЗагруженныйШаблонСДанными.ПолучитьОбласть(НомерСтроки, НомерКолонкиСКодом, НомерСтроки, НомерКолонкиСКодом);
		Код = СокрЛП(ЯчейкаСКодомПланаСчетов.ТекущаяОбласть.Текст);
		
		Если ЗначениеЗаполнено(Код) Тогда
			
			НоваяСтрока = ТаблицаСопоставления.Добавить();
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого НомерКолонкиИРеквизит Из СоответствиеНомераКолонкиВФайлеИИмениРеквизита Цикл
			
			Если НомерКолонкиИРеквизит.Ключ = "НомерКолонкиСКодом" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Ячейка = ЗагруженныйШаблонСДанными.ПолучитьОбласть(НомерСтроки, НомерКолонкиИРеквизит.Ключ, НомерСтроки, НомерКолонкиИРеквизит.Ключ);
			ТекстЯчейки = СокрЛП(Ячейка.ТекущаяОбласть.Текст);
			
			Если ТекстЯчейки = "" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НомерКолонкиИРеквизит.Значение = "Вид" Тогда
				
				НоваяСтрока[НомерКолонкиИРеквизит.Значение] = СоответствиеВидСчета[ТекстЯчейки];
				
			Иначе
				
				ТипРеквизита = ТипЗнч(НоваяСтрока[НомерКолонкиИРеквизит.Значение]);
				Если ТипРеквизита = Тип("Булево") Тогда
					
					НоваяСтрока[НомерКолонкиИРеквизит.Значение] = Булево(ТекстЯчейки);
				
				ИначеЕсли ТипРеквизита = тип("Строка")
					ИЛИ ТипРеквизита = Тип("Неопределено") Тогда
					
					НоваяСтрока[НомерКолонкиИРеквизит.Значение] = ТекстЯчейки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Код КАК Код,
	|	ТЗ.КодГруппы КАК КодГруппы
	|ПОМЕСТИТЬ ВТ_ТЗ
	|ИЗ
	|	&ТаблицаСопоставления КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗ.Код КАК Код,
	|	Международный.Ссылка КАК Счет
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Международный КАК Международный
	|		ПО ВТ_ТЗ.Код = Международный.Код
	|			И (Международный.ПланСчетов = &ПланСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТЗ.КодГруппы,
	|	МеждународныйРодители.Ссылка
	|ИЗ
	|	ВТ_ТЗ КАК ВТ_ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Международный КАК МеждународныйРодители
	|		ПО ВТ_ТЗ.КодГруппы = МеждународныйРодители.Код
	|			И (МеждународныйРодители.ПланСчетов = &ПланСчетов)";
	
	Запрос.УстановитьПараметр("ТаблицаСопоставления", ТаблицаСопоставления);
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	
	ТЗЭлементыДляОбновления = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСопоставления Цикл
		
		Если СтрокаТаблицы.Обработан Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Если СтрокаТаблицы.Код = СтрокаТаблицы.КодГруппы Тогда
				
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать элемент с кодом ""%1"", одинаковые код родителя и элемента';
																								|en = 'Cannot save the item with code ""%1"", the parent code and the item code are identical'"), СтрокаТаблицы.Код);
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
			СоздатьСчет(СтрокаТаблицы, ТаблицаСопоставления, ПараметрыОтчета, ТЗЭлементыДляОбновления, ПланСчетов);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если НЕ СтрокаТаблицы.Обработан Тогда
				
				ОблСтрокаПропущенные.Параметры.Заполнить(СтрокаТаблицы);
				ОблСтрокаПропущенные.Параметры.ОписаниеОшибки = ТекстОшибки;
				
				ТабДокПропущено = ПараметрыОтчета.ТаблицаПропущено; // ТабличныйДокумент
				ТабДокПропущено.Вывести(ОблСтрокаПропущенные);
				ТабДокПропущено.Области.Строка.Защита = Ложь;
				ПараметрыОтчета.ИтогоПропущено = ПараметрыОтчета.ИтогоПропущено + 1;
				
				СтрокаТаблицы.Обработан = Истина;
				
			КонецЕсли;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать родителя с кодом %1';
																						|en = 'Cannot save the parent with code %1'"), СтрокаТаблицы.Код);
			НайтиИОтменитьОбработкуПодчиненныхОбъектов(ТаблицаСопоставления, ПараметрыОтчета, СтрокаТаблицы, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаПланаСчетов

// Возвращает Параметры выгрузки плана счетов
//
// Возвращаемое значение:
// 	Структура - Параметры проверки:
// 		* ПланСчетов - ТабличныйДокумент - Список с созданными объектами
// 		* ИмяФайла - ТабличныйДокумент - Список с обновленными объектами
// 		* ТаблицаПропущено - ТабличныйДокумент - Список с пропущенными объектами
// 		* ИтогоОбновлено - Число - Количество обновленных объектов
// 		* ИтогоПропущено - Число - Количество пропущенных объектов
// 		* ИтогоСоздано - Число - Количество созданных объектов
//
Функция ПараметрыВыгрузкиПланаСчетов() Экспорт
	
	ПараметрыВыгрузкиПланаСчетов = Новый Структура;
	
	ПараметрыВыгрузкиПланаСчетов.Вставить("ПланСчетов");
	ПараметрыВыгрузкиПланаСчетов.Вставить("ИмяФайла");
	
	Возврат ПараметрыВыгрузкиПланаСчетов;
	
КонецФункции

// Формирует табличный документ с данными плана счетов
//
// Параметры:
// 	 ПараметрыВыгрузки - Структура - см. ПараметрыВыгрузкиПланаСчетов()
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с данными плана счетов
//
Функция ВыгрузитьДанныеПланаСчетов(ПараметрыВыгрузки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.текст =
	"ВЫБРАТЬ
	|	Международный.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(МеждународныйГруппа.Код, """") КАК КодГруппы,
	|	Международный.Родитель КАК Группа,
	|	Международный.Код КАК Код,
	|	Международный.Наименование КАК Наименование,
	|	Международный.Порядок КАК Порядок,
	|	ВЫБОР Международный.Вид
	|		КОГДА ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА &Актив
	|		КОГДА ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА &Пассив
	|		КОГДА ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|			ТОГДА &АктивПассив
	|	КОНЕЦ КАК Вид,
	|	Международный.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	Международный.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениямДеятельности,
	|	Международный.Забалансовый КАК Забалансовый,
	|	Международный.НаименованиеМеждународное КАК НаименованиеМеждународное,
	|	Международный.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
	|	Международный.Описание КАК Описание,
	|	Международный.Валютный КАК Валютный,
	|	Международный.Количественный КАК Количественный
	|ПОМЕСТИТЬ ВТ_ПланСчетовМеждународный
	|ИЗ
	|	ПланСчетов.Международный КАК Международный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный КАК МеждународныйГруппа
	|		ПО Международный.Родитель = МеждународныйГруппа.Ссылка
	|ГДЕ
	|	&ОтборПоПлануСчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|///////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПланСчетовМеждународный.КодГруппы КАК КодГруппы,
	|	ВТ_ПланСчетовМеждународный.Группа КАК Группа,
	|	ВТ_ПланСчетовМеждународный.Код КАК Код,
	|	ВТ_ПланСчетовМеждународный.Наименование КАК Наименование,
	|	ВТ_ПланСчетовМеждународный.Порядок КАК Порядок,
	|	ВТ_ПланСчетовМеждународный.Вид КАК Вид,
	|	ВТ_ПланСчетовМеждународный.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	ВТ_ПланСчетовМеждународный.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениямДеятельности,
	|	ВТ_ПланСчетовМеждународный.Забалансовый КАК Забалансовый,
	|	ВТ_ПланСчетовМеждународный.НаименованиеМеждународное КАК НаименованиеМеждународное,
	|	ВТ_ПланСчетовМеждународный.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
	|	ВТ_ПланСчетовМеждународный.Описание КАК Описание,
	|	ВТ_ПланСчетовМеждународный.Валютный КАК Валютный,
	|	ВТ_ПланСчетовМеждународный.Количественный КАК Количественный,
	|	ЕСТЬNULL(МеждународныйВидыСубконто1.ВидСубконто.Наименование, """") КАК Субконто1,
	|	ЕСТЬNULL(МеждународныйВидыСубконто1.ТолькоОбороты, ЛОЖЬ) КАК Субконто1ТолькоОбороты,
	|	ЕСТЬNULL(МеждународныйВидыСубконто2.ВидСубконто.Наименование, """") КАК Субконто2,
	|	ЕСТЬNULL(МеждународныйВидыСубконто2.ТолькоОбороты, ЛОЖЬ) КАК Субконто2ТолькоОбороты,
	|	ЕСТЬNULL(МеждународныйВидыСубконто3.ВидСубконто.Наименование, """") КАК Субконто3,
	|	ЕСТЬNULL(МеждународныйВидыСубконто3.ТолькоОбороты, ЛОЖЬ) КАК Субконто3ТолькоОбороты
	|ИЗ
	|	ВТ_ПланСчетовМеждународный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто1
	|		ПО ВТ_ПланСчетовМеждународный.Ссылка = МеждународныйВидыСубконто1.Ссылка
	|		И МеждународныйВидыСубконто1.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто2
	|		ПО ВТ_ПланСчетовМеждународный.Ссылка = МеждународныйВидыСубконто2.Ссылка
	|		И МеждународныйВидыСубконто2.НомерСтроки = 2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто3
	|		ПО ВТ_ПланСчетовМеждународный.Ссылка = МеждународныйВидыСубконто3.Ссылка
	|		И МеждународныйВидыСубконто3.НомерСтроки = 3
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Запрос.УстановитьПараметр("Актив", НСтр("ru = 'Актив';
											|en = 'Asset'"));
	Запрос.УстановитьПараметр("Пассив", НСтр("ru = 'Пассив';
											|en = 'Liability'"));
	Запрос.УстановитьПараметр("АктивПассив", НСтр("ru = 'Актив/Пассив';
													|en = 'Asset/Liability'"));
	
	ТекстОтбораПоПлануСчетов = "ИСТИНА";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоПлановСчетовВМеждународномУчете") Тогда
		
		ТекстОтбораПоПлануСчетов = "Международный.ПланСчетов = &ПланСчетов";
		Запрос.УстановитьПараметр("ПланСчетов", ПараметрыВыгрузки.ПланСчетов)
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.текст, "&ОтборПоПлануСчетов", ТекстОтбораПоПлануСчетов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПомощникВыгрузкиЗагрузкиПлановСчетов.Шаблон");
	
	ОблШапка = Макет.ПолучитьОбласть("Шапка|Данные");
	ОблСтрока = Макет.ПолучитьОбласть("Строка|Данные");
	
	ТабличныйДокумент.Вывести(ОблШапка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОблСтрока.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОблСтрока);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создать счет учета
// 
// Параметры:
//  ДанныеСчета - СтрокаТаблицыЗначений - Содержит поля:
//  	* Вид - ВидСчета -
//  ТаблицаСопоставления - ТаблицаЗначений - 
//  ПараметрыОтчета - Структура - 
//  ТЗЭлементыДляОбновления - ТаблицаЗначений - 
//  ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - 
// 
// Возвращаемое значение:
//  ПланСчетовСсылка.Международный -  Создать счет
Функция СоздатьСчет(ДанныеСчета, ТаблицаСопоставления, ПараметрыОтчета, ТЗЭлементыДляОбновления, ПланСчетов)
	
	НайденныеЭлементы = ТЗЭлементыДляОбновления.НайтиСтроки(Новый Структура("Код", ДанныеСчета.Код));
	Если НайденныеЭлементы.Количество() > 0 Тогда
		
		НовыйЭлемент = НайденныеЭлементы[0].Счет.ПолучитьОбъект();
		ЭтоНовый = Ложь;
		
	Иначе
		
		НовыйЭлемент = ПланыСчетов.Международный.СоздатьСчет();
		ЭтоНовый = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСчета.КодГруппы) Тогда
		
		НайденныеЭлементы = ТЗЭлементыДляОбновления.НайтиСтроки(Новый Структура("Код", ДанныеСчета.КодГруппы));
		Если НайденныеЭлементы.Количество() > 0 Тогда
			
			НовыйЭлемент.Родитель = НайденныеЭлементы[0].Счет;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйЭлемент.Родитель) Тогда
			
			НайденныеСтроки = ТаблицаСопоставления.НайтиСтроки(Новый Структура("Код, Обработан", ДанныеСчета.КодГруппы, Ложь));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Попытка
					
					НовыйЭлемент.Родитель = СоздатьСчет(НайденныеСтроки[0], ТаблицаСопоставления, ПараметрыОтчета, ТЗЭлементыДляОбновления, ПланСчетов);
					
				Исключение
					
					НайденныеСтроки[0].Обработан = Истина;
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать родителя с кодом %1';
																								|en = 'Cannot save the parent with code %1'"), ДанныеСчета.КодГруппы);
					НайтиИОтменитьОбработкуПодчиненныхОбъектов(ТаблицаСопоставления, ПараметрыОтчета, НайденныеСтроки[0], ТекстОшибки);
					
					ВызватьИсключение ТекстОшибки;
					
				КонецПопытки;
				
			Иначе
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать родителя с кодом %1';
																							|en = 'Cannot save the parent with code %1'"), ДанныеСчета.КодГруппы);
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйЭлемент.Код = ДанныеСчета.Код;
	НовыйЭлемент.Валютный = ДанныеСчета.Валютный;
	
	НовыйЭлемент.Наименование = ДанныеСчета.Наименование;
	НовыйЭлемент.Порядок = ДанныеСчета.Порядок;
	НовыйЭлемент.УчетПоПодразделениям = ДанныеСчета.УчетПоПодразделениям;
	НовыйЭлемент.УчетПоНаправлениямДеятельности = ДанныеСчета.УчетПоНаправлениямДеятельности;
	НовыйЭлемент.Забалансовый = ДанныеСчета.Забалансовый;
	НовыйЭлемент.НаименованиеМеждународное = ДанныеСчета.НаименованиеМеждународное;
	НовыйЭлемент.ЗапретитьИспользоватьВПроводках = ДанныеСчета.ЗапретитьИспользоватьВПроводках;
	НовыйЭлемент.Описание = ДанныеСчета.Описание;
	НовыйЭлемент.Валютный = ДанныеСчета.Валютный;
	НовыйЭлемент.Количественный = ДанныеСчета.Количественный;
	НовыйЭлемент.Вид = ДанныеСчета.Вид;
	НовыйЭлемент.ПланСчетов = ПланСчетов;
	
	Если ЗначениеЗаполнено(ДанныеСчета.Субконто1) Тогда
		
		НайтиИДобавитьСубконтоПоИмени(НовыйЭлемент, ДанныеСчета.Субконто1, ДанныеСчета.Субконто1ТолькоОбороты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСчета.Субконто2) Тогда
		
		НайтиИДобавитьСубконтоПоИмени(НовыйЭлемент, ДанныеСчета.Субконто2, ДанныеСчета.Субконто2ТолькоОбороты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСчета.Субконто3) Тогда
		
		НайтиИДобавитьСубконтоПоИмени(НовыйЭлемент, ДанныеСчета.Субконто3, ДанныеСчета.Субконто3ТолькоОбороты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйЭлемент.Ссылка) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("ПланСчетов.Международный");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", НовыйЭлемент.Ссылка);
		Блокировка.Заблокировать();
		
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	НайденныеЭлементы = ТЗЭлементыДляОбновления.НайтиСтроки(Новый Структура("Код", НовыйЭлемент.Код));
	Если НайденныеЭлементы.Количество() = 0 Тогда
		
		НоваяСтрока = ТЗЭлементыДляОбновления.Добавить();
		НоваяСтрока.Код = НовыйЭлемент.Код;
		НоваяСтрока.Счет = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	ОблСтрока = ПараметрыОтчета.ОблСтрока; // ТабличныйДокумент
	ОблСтрока.Параметры.Заполнить(ДанныеСчета);
	ОблСтрока.Параметры.Счет = НовыйЭлемент.Ссылка;
	
	Если ЭтоНовый Тогда
		
		ТабДокСоздано = ПараметрыОтчета.ТаблицаСоздано; // ТабличныйДокумент
		ТабДокСоздано.Вывести(ОблСтрока); 
		ПараметрыОтчета.ИтогоСоздано = ПараметрыОтчета.ИтогоСоздано + 1;
		
	Иначе
		
		ТабДокОбновлено = ПараметрыОтчета.ТаблицаОбновлено; // ТабличныйДокумент
		ТабДокОбновлено.Вывести(ОблСтрока);
		ПараметрыОтчета.ИтогоОбновлено = ПараметрыОтчета.ИтогоОбновлено + 1;
		
	КонецЕсли;
	
	ДанныеСчета.Обработан = Истина;
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Процедура НайтиИОтменитьОбработкуПодчиненныхОбъектов(ТаблицаСопоставления, ПараметрыОтчета, ДанныеСчета, ТекстОшибки)
	
	ОблСтрокаПропущенные = ПараметрыОтчета.ОблСтрокаПропущенные; // ТабличныйДокумент
	ПодчиненныеСтроки = ТаблицаСопоставления.НайтиСтроки(Новый Структура("КодГруппы", ДанныеСчета.Код));
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если НЕ ПодчиненнаяСтрока.Обработан Тогда
			
			ОблСтрокаПропущенные.Параметры.Заполнить(ПодчиненнаяСтрока);
			ОблСтрокаПропущенные.Параметры.ОписаниеОшибки = ТекстОшибки;
			
			ТабДокПропущено = ПараметрыОтчета.ТаблицаПропущено; // ТабличныйДокумент
			ТабДокПропущено.Вывести(ОблСтрокаПропущенные);
			ТабДокПропущено.Области.Строка.Защита = Ложь;
			
			ПараметрыОтчета.ИтогоПропущено = ПараметрыОтчета.ИтогоПропущено + 1;
			ПодчиненнаяСтрока.Обработан = Истина;
			
		КонецЕсли;
		
		ПодчиненныеСтрокиПодчиненнойСтроки = ТаблицаСопоставления.НайтиСтроки(Новый Структура("КодГруппы", ДанныеСчета.Код));
		Для Каждого ПодчиненнаяСтрокаПодчиненнойСтроки Из ПодчиненныеСтрокиПодчиненнойСтроки Цикл
			
			Если ДанныеСчета.Код = ПодчиненнаяСтрокаПодчиненнойСтроки.КодГруппы Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НайтиИОтменитьОбработкуПодчиненныхОбъектов(ТаблицаСопоставления, ПараметрыОтчета, ПодчиненнаяСтрокаПодчиненнойСтроки, ТекстОшибки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиИДобавитьСубконтоПоИмени(НовыйЭлемент, ИмяПВХ, СубконтоТолькоОбороты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСубконтоМеждународные.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоМеждународные КАК ВидыСубконтоМеждународные
	|ГДЕ
	|	ВидыСубконтоМеждународные.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ИмяПВХ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ПВХ = Выборка.Ссылка;
		
	ИначеЕсли НЕ Метаданные.ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ПолучитьИменаПредопределенных().Найти(ИмяПВХ) = Неопределено Тогда
		
		ПВХ = ПланыВидовХарактеристик.ВидыСубконтоМеждународные[ИмяПВХ];
		
	Иначе
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось определить субконто по имени: ""%1""';
																					|en = 'Cannot identify the extra dimension by the name: ""%1""'"), ИмяПВХ);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	НайденныеСтрокиВидовСубконто = НовыйЭлемент.ВидыСубконто.НайтиСтроки(Новый Структура("ВидСубконто", ПВХ));
	Если НайденныеСтрокиВидовСубконто.Количество() = 0 Тогда
		
		СтрокаСубконто = НовыйЭлемент.ВидыСубконто.Добавить();
		СтрокаСубконто.ВидСубконто = ПВХ;
		СтрокаСубконто.ТолькоОбороты = СубконтоТолькоОбороты;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьШапкуФайлаЗагрузки(ЗагруженныйШаблонСДанными, ЗагружатьИзФайла)
	
	СтруктураИменаКолонокШаблона = ПолучитьСвязьРеквизитовИЗаголовковШаблона();
	
	МассивОшибок = Новый Массив;
	СоответствиеНомераКолонкиВФайлеИИмениРеквизита = Новый Соответствие;
	
	Для НомерКолонки = ?(ЗагружатьИзФайла, 1, 2) По ЗагруженныйШаблонСДанными.ШиринаТаблицы Цикл
		
		НайденЗаголовокКолонки = Ложь;
		
		Текст = СокрЛП(ЗагруженныйШаблонСДанными.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки).ТекущаяОбласть.Текст);
		Если ЗначениеЗаполнено(Текст) Тогда
			
			Для Каждого КлючИЗначение Из СтруктураИменаКолонокШаблона Цикл
				
				Для Каждого ЭлементМассива Из КлючИЗначение.Значение Цикл
					
					Если ЭлементМассива = Текст Тогда
						
						СоответствиеНомераКолонкиВФайлеИИмениРеквизита.Вставить(НомерКолонки, КлючИЗначение.Ключ);
						СтруктураИменаКолонокШаблона.Удалить(КлючИЗначение.Ключ);
						НайденЗаголовокКолонки = Истина;
						
						Если КлючИЗначение.Ключ = "Код" Тогда
							
							СоответствиеНомераКолонкиВФайлеИИмениРеквизита.Вставить("НомерКолонкиСКодом", НомерКолонки);
							
						КонецЕсли;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла; 
				
				Если НайденЗаголовокКолонки Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ НайденЗаголовокКолонки Тогда
				
				ТекстОшибки = НСтр("ru = 'Не определено поле в колонке №%1 - ""%2""';
									|en = 'In column #%1, field is not determined - ""%2""'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерКолонки, Текст);
				МассивОшибок.Добавить(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0
		ИЛИ СтруктураИменаКолонокШаблона.Количество() > 0 Тогда
		
		Для Каждого КлючИЗначение Из СтруктураИменаКолонокШаблона Цикл
			
			ТекстОшибки = НСтр("ru = 'Не найдена колонка для реквизита ""%1""';
								|en = 'Column for the ""%1"" attribute is not found'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, КлючИЗначение.Значение[0]);
			МассивОшибок.Добавить(ТекстОшибки);
			
		КонецЦикла;
		
		ВызватьИсключение СтрСоединить(МассивОшибок, Символы.ПС);
		
	КонецЕсли;
	
	Возврат СоответствиеНомераКолонкиВФайлеИИмениРеквизита; 
	
КонецФункции

Функция ПолучитьСвязьРеквизитовИЗаголовковШаблона()
	
	СоответствиеНомеровКолонокРеквизитам = Новый Соответствие;
	СоответствиеНомеровКолонокРеквизитам.Вставить(1, "КодГруппы");
	СоответствиеНомеровКолонокРеквизитам.Вставить(2, "Код");
	СоответствиеНомеровКолонокРеквизитам.Вставить(3, "Порядок");
	СоответствиеНомеровКолонокРеквизитам.Вставить(4, "Наименование");
	СоответствиеНомеровКолонокРеквизитам.Вставить(5, "НаименованиеМеждународное");
	СоответствиеНомеровКолонокРеквизитам.Вставить(6, "Вид");
	СоответствиеНомеровКолонокРеквизитам.Вставить(7, "Валютный");
	СоответствиеНомеровКолонокРеквизитам.Вставить(8, "Количественный");
	СоответствиеНомеровКолонокРеквизитам.Вставить(9, "УчетПоПодразделениям");
	СоответствиеНомеровКолонокРеквизитам.Вставить(10, "УчетПоНаправлениямДеятельности");
	СоответствиеНомеровКолонокРеквизитам.Вставить(11, "Забалансовый");
	СоответствиеНомеровКолонокРеквизитам.Вставить(12, "Субконто1");
	СоответствиеНомеровКолонокРеквизитам.Вставить(13, "Субконто1ТолькоОбороты");
	СоответствиеНомеровКолонокРеквизитам.Вставить(14, "Субконто2");
	СоответствиеНомеровКолонокРеквизитам.Вставить(15, "Субконто2ТолькоОбороты");
	СоответствиеНомеровКолонокРеквизитам.Вставить(16, "Субконто3");
	СоответствиеНомеровКолонокРеквизитам.Вставить(17, "Субконто3ТолькоОбороты");
	СоответствиеНомеровКолонокРеквизитам.Вставить(18, "ЗапретитьИспользоватьВПроводках");
	СоответствиеНомеровКолонокРеквизитам.Вставить(19, "Описание");
	
	МассивКодовЯзыков = Новый Массив;
	Для Каждого ЯзыкКонфигурации Из Метаданные.Языки Цикл
		
		МассивКодовЯзыков.Добавить(ЯзыкКонфигурации.КодЯзыка);
	
	КонецЦикла;
	
	СтруктураИменаКолонокШаблона = Новый Структура();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПомощникВыгрузкиЗагрузкиПлановСчетов.Шаблон");
	ОблШапка = Макет.ПолучитьОбласть("Шапка|Данные");
	
	Для НомерКолонки = 1 По ОблШапка.ШиринаТаблицы Цикл
		
		ИмяРеквизита = СоответствиеНомеровКолонокРеквизитам[НомерКолонки];
		СтруктураИменаКолонокШаблона.Вставить(ИмяРеквизита, Новый Массив);
		
		Для Каждого КодЯзыка Из МассивКодовЯзыков Цикл
			
			ТабДок = ОблШапка.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки);
			ТабДок.КодЯзыка = КодЯзыка;
			
			Текст = СокрЛП(ТабДок.ТекущаяОбласть.Текст);
			Если ЗначениеЗаполнено(Текст) Тогда 
				
				СтруктураИменаКолонокШаблона[ИмяРеквизита].Добавить(Текст);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураИменаКолонокШаблона;
	
КонецФункции

#КонецОбласти

#КонецЕсли