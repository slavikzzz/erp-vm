
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	Объект.РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
		
	ЕстьПраваНаПросмотрЖурналаРегистрации = ПравоДоступа("ЖурналРегистрации", Метаданные);
	ПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	
	СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = МодульОрганизационнаяСтруктура.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц();
	КонецЕсли;
	
	ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
	ЦветСтиляПоясняющийТекст 		= ЦветаСтиля.ПоясняющийТекст;
	ЦветСтиляИнформационнойНадписи  = ЦветаСтиля.ТекстИнформационнойНадписи;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОтключениеИзменениеНастроек", "Видимость",
			ПолноправныйПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПубликуемаяСтруктураПриПодключении", "Видимость",
			Не СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"СоставОтправляемыхДанных", "Видимость",
			ПолноправныйПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ПоказатьСобытияОбмена", "Видимость",
			ЕстьПраваНаПросмотрЖурналаРегистрации);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ПодготовкаДанныхДляТехническойПоддержки", "Видимость",
			ЕстьПраваНаПросмотрЖурналаРегистрации);
			
	ВариантОтключенияОтключить = 1;
	ВариантОтключенияУдалить = 0;
	Если Объект.РазделениеВключено Тогда
		Элементы.ОтключениеИзменениеНастроек.Заголовок = НСтр("ru = 'Отключение приложения';
																|en = 'Отключение приложения'");
	Иначе
		Элементы.ОтключениеИзменениеНастроек.Заголовок = НСтр("ru = 'Отключение приложения, изменение настроек подключения';
																|en = 'Отключение приложения, изменение настроек подключения'");
	КонецЕсли;
	
	УстановитьЗаголовкиСАдресом();
	
	ВыполнитьНачальноеЗаполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриНачалеЗадания();
	Если ТребуетсяОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПодключениеВыполняется Тогда
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Подключение к приложению не завершено.
				|Если программа будет закрыта, подключение к приложению не будет выполнено.';
				|en = 'Подключение к приложению не завершено.
				|Если программа будет закрыта, подключение к приложению не будет выполнено.'");
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ФизическиеЛица" И Источник = Объект.Ответственный Тогда
		ОтветственныйПриИзмененииКлиентСервер(ЭтаФорма, Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяДоменаПриИзменении(Элемент)
	
	Если ИмяДоменаСоответствуетПравилам() И Не ПустаяСтрока(Объект.ИмяДомена) Тогда
		ИмяДоменаЗарезервировано = Ложь;
		Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = НСтр("ru = 'Выполняется проверка уникальности адреса. Пожалуйста подождите ...';
																|en = 'Выполняется проверка уникальности адреса. Пожалуйста подождите ...'");
		НачатьРезервированиеИмениДомена();
		ПриНачалеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяДоменаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ИмяДоменаСоответствуетПравилам(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииКлиентСервер(ЭтаФорма, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЛокальноПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииКлиентСервер(ЭтаФорма, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтключенияОтключитьПриИзменении(Элемент)
	
	ВариантОтключенияУдалить = 0;
	ОбновитьЭУОтключениеПриложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтключенияУдалитьПриИзменении(Элемент)
	
	ВариантОтключенияОтключить = 0;
	ОбновитьЭУОтключениеПриложения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Команда)
	
	ПодключитьИнтернетПоддержкуПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьПриложение(Команда)
	
	Если Объект.ПриложениеВЛокальнойСети Тогда
		Если ЗначениеЗаполнено(Объект.АдресПриложения) 
			И ЗначениеЗаполнено(КлючИдентификаторКлиента)
			И ЗначениеЗаполнено(КлючСекретКлиента) Тогда
			НачатьПодключениеЛокальнойВерсии();
			ПриНачалеЗадания();
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Для подключения заполните данные в форме';
										|en = 'To connect, fill data on the form'");
			ПоказатьПредупреждение( ,ТекстПредупреждения);
		КонецЕсли; 
	Иначе
		Если ИмяДоменаЗарезервировано И ДанныеОтветственногоЗаполнены И ЗначениеЗаполнено(Объект.ИмяПриложения) Тогда
			НачатьПодключение();
			ПриНачалеЗадания();
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Для подключения заполните данные в форме';
										|en = 'To connect, fill data on the form'");
			ПоказатьПредупреждение( ,ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл с настройками подключения к приложению 1С:Персонал';
										|en = 'Select a file with the settings for connection to the 1C:Human Resources application'");
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Файл с настройками (*.json)|*.json';
									|en = 'Settings file (*.json)|*.json'");
	ОбработчикЗавершения = Новый ОписаниеОповещения("ФайлНастроекПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОбработчикЗавершения, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПравилВыгрузки(Команда)
	
	ПараметрыОткрытия = Новый Структура("Приложение", Приложение);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.НастройкаПравилВыгрузки",ПараметрыОткрытия,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиЗаполненияОбъектов(Команда)
	
	ПараметрыОткрытия = Новый Структура("Приложение", Приложение);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ОшибкиЗаполненияОбъектов",ПараметрыОткрытия,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСобытияОбмена(Команда)

	ОтборЖурналаРегистрации = ОтборЖурналаРегистрации(ПредопределенноеЗначение("Перечисление.ВидыСобытийОбменаУправлениеПерсоналом.Обмен"), "");
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналРегистрацииОшибки(Команда)
	
	ОтборЖурналаРегистрации = ОтборЖурналаРегистрации(Неопределено, "Ошибка");
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	Если ОбменВыполняется() Тогда
		ТекстСообщения = НСтр("ru = 'Обмен уже выполняется, повторите попытку позже.';
								|en = 'Exchange is already in progress, try again later.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = ДлительнаяОперацияВыполнитьОбмен();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Обмен выполнен.';
															|en = 'Exchange is executed.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьОбменЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменВыгрузитьЖурнал(Команда)
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
							|en = 'Confirmation'");
	ТекстВопроса = НСтр("ru = 'Подготовка данных для отправки в службу технической поддержки приложения.
		|Обмен будет выполнен с записью событий в журнал регистрации и выгрузкой журнал в файл для отправки в службу технической поддержки.';
		|en = 'Data preparation for sending to the technical support.
		|Upon exchange, events will be recorded to the event log and the log will be exported to a file for sending to the technical support.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьОбменВыгрузитьЖурналПродолжение", ЭтаФорма);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСообщениеРезультатОбмена(Команда)
	ОбновитьРезультатОбменаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидыКонтактнойИнформации(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьВидыКонтактнойИнформацииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ВидКИМобильныйТелефон,ВидКИАдресЭлектроннойПочты", Объект.ВидКИМобильныйТелефон, Объект.ВидКИАдресЭлектроннойПочты);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьВидыКонтактнойИнформации",ПараметрыОткрытия,ЭтаФорма,,,,
			ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПубликуемуюСтруктураКомпании(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьПубликуемуюСтруктураКомпанииЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ПубликоватьСтруктуруЮридическихЛиц", ПубликоватьСтруктуруЮридическихЛиц);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьСтруктуруКомпании",ПараметрыОткрытия,ЭтаФорма,,,,
			ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОтправляемыхДанных(Команда)
	
	ПараметрыОткрытия = Новый Структура("Приложение", Приложение);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.РегистрацияИзмененийДляОбмена",ПараметрыОткрытия,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиПодключения(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьНастройкиПодключенияЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Приложение", Приложение);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьНастройкиПодключения",
		ПараметрыОткрытия,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПриложение(Команда)
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
							|en = 'Confirmation'");
	ШаблонТекстаВопроса = НСтр("ru = 'Отключить приложение 1С:Персонал по адресу %1, данные приложения не будут удалены?';
								|en = 'Отключить приложение 1С:Персонал по адресу %1, данные приложения не будут удалены?'");
	ТекстВопроса = СтрШаблон(ШаблонТекстаВопроса, АдресПриложения(ЭтаФорма));
	
	ДополнительныеПараметры = Новый Структура("РежимОтключенияУдалить", Ложь);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриОтветеНаВопросОтключитьПриложение", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);

КонецПроцедуры 

&НаКлиенте
Процедура УдалитьПриложение(Команда)
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
							|en = 'Подтверждение'");
	ШаблонТекстаВопроса = НСтр("ru = 'Удалить все данные приложения 1С:Персонал по адресу %1?';
								|en = 'Удалить все данные приложения 1С:Персонал по адресу %1?'");
	ТекстВопроса = СтрШаблон(ШаблонТекстаВопроса, АдресПриложения(ЭтаФорма));
	
	ДополнительныеПараметры = Новый Структура("РежимОтключенияУдалить", Истина);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриОтветеНаВопросОтключитьПриложение", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтложенноеПодключение(Команда)
	
	ОчиститьСообщения();
	НачатьПроверкуОтложенногоПодключения();
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеПодключение(Команда)
	
	ПерейтиКНовомуПодключению();
	ПриНачалеЗадания();
	Объект.ИмяДомена = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьАдреса(Команда)
	
	НачатьПроверкуДоступностиАдресаПоИмени();
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтветственногоПриложения(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьОтветственногоПриложенияЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ПриложениеВЛокальнойСети", Объект.ПриложениеВЛокальнойСети);
	
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьДанныеПриложения",
		ПараметрыОткрытия, ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПривязкуАбонента(Команда)
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПодключена();
	Если Не ИнтернетПоддержкаПодключена Тогда
		ПодключитьИнтернетПоддержкуПользователей();
	Иначе
		ИзменитьАбонентаИПП()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиМенеджераИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл с настройками подключения к приложению 1С:Персонал';
										|en = 'Выберите файл с настройками подключения к приложению 1С:Персонал'");
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Файл с настройками (*.json)|*.json';
									|en = 'Файл с настройками (*.json)|*.json'");
	ОбработчикЗавершения = Новый ОписаниеОповещения("ФайлНастроекМенеджераПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОбработчикЗавершения, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКлючиМенеджера(Команда)
	
	Если Не ЗначениеЗаполнено(КлючИдентификаторКлиентаМ)
		Или Не ЗначениеЗаполнено(КлючСекретКлиентаМ) Тогда
		ТекстПредупреждения = НСтр("ru = 'Загрузите настройки из файла';
									|en = 'Загрузите настройки из файла'");
		ПоказатьПредупреждение( ,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуНастроекМенеджера();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеФоновыхЗаданий

&НаКлиенте
Процедура ПриНачалеЗадания()
	
	Если ЗначениеЗаполнено(АктивноеЗадание) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = АктивноеЗадание.ВыводитьОкноОжидания;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			АктивноеЗадание.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект, АктивноеЗадание.ОписаниеЗадания),
			ПараметрыОжидания);
		АктивноеЗадание = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФоновогоЗадания()

	Описание = Новый Структура("ИмяМетода,ИмяЗадания,ИмяДекорации,ВыводитьОкноОжидания,ПараметрыМетода");
	Описание.ВыводитьОкноОжидания 	= Ложь;
	Описание.ИмяДекорации 			= "";
	Описание.ПараметрыМетода 		= Новый Структура("Приложение,ИспользоватьКлючиАбонента", Приложение, Истина);
	
	Возврат Описание;

КонецФункции

&НаСервере
Процедура ЗапуститьФоновоеЗадание(ПараметрыЗадания)
	
	Если ЗначениеЗаполнено(ПараметрыЗадания.ИмяДекорации) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ПараметрыЗадания.ИмяДекорации, "Видимость", Истина);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершения = 0;
	Результат = ДлительныеОперации.ВыполнитьВФоне(ПараметрыЗадания.ИмяМетода, ПараметрыЗадания.ПараметрыМетода, ПараметрыВыполнения);
	
	ОписаниеЗадания = Новый Структура("ИмяЗадания,ИмяДекорации");
	ОписаниеЗадания.ИмяЗадания 		= ПараметрыЗадания.ИмяЗадания;
	ОписаниеЗадания.ИмяДекорации 	= ПараметрыЗадания.ИмяДекорации;
	
	НовоеЗадание = Новый Структура("ОписаниеЗадания,ДлительнаяОперация,ВыводитьОкноОжидания");
	НовоеЗадание.ОписаниеЗадания 		= Новый ФиксированнаяСтруктура(ОписаниеЗадания);
	НовоеЗадание.ДлительнаяОперация 	= Результат;
	НовоеЗадание.ВыводитьОкноОжидания 	= ПараметрыЗадания.ВыводитьОкноОжидания;
	
	АктивноеЗадание = Новый ФиксированнаяСтруктура(НовоеЗадание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗадания(Результат, ОписаниеЗадания) Экспорт
	
	ИмяЗадания 		= ОписаниеЗадания.ИмяЗадания;
	ИмяДекорации 	= ОписаниеЗадания.ИмяДекорации;
	
	Если ЗначениеЗаполнено(ИмяДекорации) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяДекорации, "Видимость", Ложь);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении фонового задания возникла ошибка:';
								|en = 'При выполнении фонового задания возникла ошибка:'") + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
	Если ИмяЗадания = "ПолучениеАбонентаИПП" Тогда
		ПолучениеАбонентаИППЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ЗарезервироватьИмяДомена" Тогда
		РезервированиеИмениДоменаЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ПодключениеПриложения" Тогда
		ПодключениеПриложенияЗавершение(Результат.АдресРезультата);
		Если ПодключениеВыполнено Тогда
			ПриНачалеЗадания();
			ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ПроверкаОтложенногоПодключения" Тогда
		ПроверкаОтложенногоПодключенияЗавершение(Результат.АдресРезультата);
		Если ПодключениеВыполнено Тогда
			ПриНачалеЗадания();
			ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
		КонецЕсли;
	ИначеЕсли ИмяЗадания = "ПроверкаДоступностиАдресаПоИмени" Тогда
		ПроверкаДоступностиАдресаПоИмениЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "УдалениеПриложения" Тогда
		УдалениеПриложенияЗавершение();
	ИначеЕсли ИмяЗадания = "ОбновлениеОтветственного" Тогда
		ОбновлениеОтветственногоЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ПолучениеИнформацииОПриложении" Тогда
		ПолучениеИнформацииОПриложенииЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ИзменениеАбонентаИПП" Тогда
		ИзменениеАбонентаИППЗавершение(Результат.АдресРезультата);
	ИначеЕсли ИмяЗадания = "ПодключениеПриложенияЛокально" Тогда
		ПодключениеПриложенияЛокальноЗавершение(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапускОбработкаЗаданий

#Область ПолучениеАбонентаИПП

&НаСервере
Процедура НачатьПолучениеАбонентаИПП()
	
	ПараметрыЗадания = ПараметрыФоновогоЗадания();
	ПараметрыЗадания.ИмяЗадания = "ПолучениеАбонентаИПП";
	ПараметрыЗадания.ИмяМетода 	= "ИнтеграцияУправлениеПерсоналомМенеджер.ПолучитьАбонентаИнтернетПоддержкиФоновоеЗадание";
	
	ЗапуститьФоновоеЗадание(ПараметрыЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеАбонентаИППЗавершение(АдресРезультата)
	
	Элементы.СтраницыВариантыПодключения.ТекущаяСтраница = Элементы.СтраницаПодключение;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Результат проверки доступности сервиса интернет-поддержки.
	Если Результат.ИнтернетПоддержкаДоступна Или Объект.РазделениеВключено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИнтернетПоддержка", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИнтернетПоддержка", "Видимость", Истина);
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		Если Объект.РазделениеВключено И Не Результат.ИнтернетПоддержкаДоступна Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить подключение в связи с отсутствием прав на использование интернет-поддержки.';
									|en = 'Не удалось выполнить подключение в связи с отсутствием прав на использование интернет-поддержки.'")
				+ Символы.ПС
				+ НСтр("ru = 'По вопросу предоставления таких прав обратитесь к специалистам, осуществляющим обслуживание информационной базы в вашей организации.';
						|en = 'По вопросу предоставления таких прав обратитесь к специалистам, осуществляющим обслуживание информационной базы в вашей организации.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'При получении данных для подключения возникла ошибка:';
									|en = 'При получении данных для подключения возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;	
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат; 
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиПодключения", "Доступность", Истина);
	
	Объект.АбонентИПП 					= Результат.Абонент.Наименование;
	Объект.ИдентификаторАбонентаИПП 	= Результат.Абонент.Идентификатор;
	
	Объект.ИмяПриложения = ИнтеграцияУправлениеПерсоналомМенеджер.ПодобратьИмяПриложения();
	Объект.Ответственный = ИнтеграцияУправлениеПерсоналомМенеджер.ПодобратьОтветственногоЗаПриложение();
	
	ОтветственныйПриИзмененииКлиентСервер(ЭтаФорма, Объект.Ответственный);
	
КонецПроцедуры

#КонецОбласти

#Область РезервированиеИмениДомена

&НаСервере
Процедура НачатьРезервированиеИмениДомена()
	
	ПараметрыЗадания = ПараметрыФоновогоЗадания();
	ПараметрыЗадания.ИмяЗадания 	= "ЗарезервироватьИмяДомена";
	ПараметрыЗадания.ИмяМетода 		= "ИнтеграцияУправлениеПерсоналомМенеджер.ЗарезервироватьИмяДоменаФоновоеЗадание";
	ПараметрыЗадания.ИмяДекорации 	= "ИндикаторДлительнойОперацииРезервированиеИмениДомена";
	
	ПараметрыЗадания.ПараметрыМетода.Вставить("ИмяДомена", 				Объект.ИмяДомена);
	ПараметрыЗадания.ПараметрыМетода.Вставить("ИдентификаторВладельца", Объект.ИдентификаторАбонентаИПП);
	
	ЗапуститьФоновоеЗадание(ПараметрыЗадания);

КонецПроцедуры

&НаСервере
Процедура РезервированиеИмениДоменаЗавершение(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При проверке уникальности адреса возникла ошибка:';
								|en = 'При проверке уникальности адреса возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяДоменаЗарезервировано = Результат.Зарезервировано;
	
	Если ИмяДоменаЗарезервировано Тогда
		ЦветТекстаЭУ 		= ЦветСтиляТекстаПоля;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийТекст;
		СообщениеПроверки = СтрШаблон(
				НСтр("ru = 'адрес ""%1"" зарезервирован для вашего приложения';
					|en = 'адрес ""%1"" зарезервирован для вашего приложения'"),
				СтрокаАдресПриложения());
	Иначе	
		ЦветТекстаЭУ 		= ЦветСтиляПоясняющийОшибкуТекст;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийОшибкуТекст;
		СообщениеПроверки = СтрШаблон(
				НСтр("ru = 'К сожалению, адрес ""%1"" уже занят. Придумайте другой адрес';
					|en = 'К сожалению, адрес ""%1"" уже занят. Придумайте другой адрес'"),
				СтрокаАдресПриложения());
	КонецЕсли;
	
	Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = СообщениеПроверки;
	Элементы.ДекорацияИмяДоменаПояснение.ЦветТекста = ЦветТекстаСообщения;
	Элементы.ИмяДомена.ЦветТекста = ЦветТекстаЭУ;
	
КонецПроцедуры

#КонецОбласти

#Область Подключение

&НаСервере
Процедура НачатьПодключение()
	
	ПараметрыЗадания = ПараметрыФоновогоЗадания();
	ПараметрыЗадания.ИмяЗадания 			= "ПодключениеПриложения";
	ПараметрыЗадания.ИмяМетода 				= "ИнтеграцияУправлениеПерсоналомМенеджер.РазвернутьПриложениеФоновоеЗадание";
	ПараметрыЗадания.ВыводитьОкноОжидания 	= Истина;
	
	ПодключениеВыполняется = Истина;
	УстановитьДоступностьЭУПодключения(Истина);

	ДанныеДляРазвертывания = Новый Структура;
	ДанныеДляРазвертывания.Вставить("ИмяПриложения", 			СОКРЛП(Объект.ИмяПриложения));
	ДанныеДляРазвертывания.Вставить("ИмяДомена", 				СОКРЛП(Объект.ИмяДомена));
	ДанныеДляРазвертывания.Вставить("ИдентификаторАбонентаИПП", СОКРЛП(Объект.ИдентификаторАбонентаИПП));
	ДанныеДляРазвертывания.Вставить("Администратор", 			Объект.Ответственный);
	
	ПараметрыЗадания.ПараметрыМетода.Вставить("ДанныеДляРазвертывания", ДанныеДляРазвертывания);
	
	ЗапуститьФоновоеЗадание(ПараметрыЗадания);

КонецПроцедуры

&НаСервере
Процедура ПодключениеПриложенияЗавершение(АдресРезультата)

	ПодключениеВыполняется = Ложь;
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		ПодключениеВыполнено = Истина;
		СсылкаДляАдминистратора = Результат.СсылкаДляАдминистратора;
		УстановитьЗаголовокДекорацияПереходДляАдминистратора();
		Интеграция1СПерсонал.ВключитьНастройкиПрограммыПослеПодключенияПриложения();
		ВыполнитьНачальноеЗаполнение();
	ИначеЕсли Результат.Заказано Тогда
		ВыполнитьНачальноеЗаполнение();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодключениеЛокальнойВерсии

&НаКлиенте
Процедура НачатьПодключениеЛокальнойВерсии()
	
	ПараметрыЗадания = ПараметрыФоновогоЗадания();
	ПараметрыЗадания.ИмяЗадания 			= "ПодключениеПриложенияЛокально";
	ПараметрыЗадания.ИмяМетода 				= "ИнтеграцияУправлениеПерсоналом.ПодключитьПриложениеЛокальноФоновоеЗадание";
	ПараметрыЗадания.ВыводитьОкноОжидания 	= Истина;
	
	Ключи = Новый Структура("ИдентификаторКлиента,СекретКлиента", КлючИдентификаторКлиента, КлючСекретКлиента);
	
	НастройкиПодключения = Новый Структура("Ответственный,АдресПриложения,Ключи");
	НастройкиПодключения.АдресПриложения 	= Объект.АдресПриложения;
	НастройкиПодключения.Ключи 				= Ключи;
	НастройкиПодключения.Ответственный 		= Объект.Ответственный;
	
	ПараметрыЗадания.ПараметрыМетода.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	ЗапуститьФоновоеЗадание(ПараметрыЗадания);

КонецПроцедуры

&НаСервере
Процедура ПодключениеПриложенияЛокальноЗавершение(АдресРезультата)

	ПодключениеВыполняется = Ложь;
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ПодключениеВыполнено = Истина;
	СсылкаДляАдминистратора = Результат.СсылкаДляАдминистратора;
	УстановитьЗаголовокДекорацияПереходДляАдминистратора();
	Интеграция1СПерсонал.ВключитьНастройкиПрограммыПослеПодключенияПриложения();
	ВыполнитьНачальноеЗаполнение();

КонецПроцедуры

#КонецОбласти

#Область ПроверкаОтложенногоПодключения

&НаСервере
Процедура НачатьПроверкуОтложенногоПодключения()

	СостояниеПодключения = ИнтеграцияУправлениеПерсоналомМенеджер.СостояниеПодключенияПриложения(Приложение);
	Если СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияПриложения.ОжиданиеПодключения Тогда
		ПараметрыЗадания = ПараметрыФоновогоЗадания();
		ПараметрыЗадания.ИмяЗадания 	= "ПроверкаОтложенногоПодключения";
		ПараметрыЗадания.ИмяМетода 		= "ИнтеграцияУправлениеПерсоналомМенеджер.ПроверитьСостояниеПодключенияФоновоеЗадание";
		ПараметрыЗадания.ВыводитьОкноОжидания = Истина;
		ЗапуститьФоновоеЗадание(ПараметрыЗадания);
	ИначеЕсли СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияПриложения.ОшибкаСоздания Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось подключить Приложение. Подробности см. в журнале регистрации.';
								|en = 'Не удалось подключить Приложение. Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ОбновитьЭУОтложенноеПодключение(Истина);
	Иначе
		ВыполнитьНачальноеЗаполнение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверкаОтложенногоПодключенияЗавершение(АдресРезультата)

	ПодключениеВыполняется = Ложь;
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.СообщениеОбОшибке);
		ОбновитьЭУОтложенноеПодключение(Истина);
		Возврат;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		
		ПодключениеВыполняется = Ложь;
		ПодключениеВыполнено = Истина;
		
		СсылкаДляАдминистратора = Результат.СсылкаДляАдминистратора;
		Интеграция1СПерсонал.ВключитьНастройкиПрограммыПослеПодключенияПриложения();
		ВыполнитьНачальноеЗаполнение();
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Подключение еще не выполнено, повторите проверку позже.';
								|en = 'Подключение еще не выполнено, повторите проверку позже.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭУОтложенноеПодключение(ОшибкаСоздания)

	Элементы.СоздатьНовоеПодключение.Видимость = ОшибкаСоздания И ПолноправныйПользователь;
	Элементы.ПроверитьОтложенноеПодключение.Видимость = Не ОшибкаСоздания И ПолноправныйПользователь;
	Если ОшибкаСоздания Тогда
		АдресТехподдержки =  АдресТехподдержки();
		ШаблонЗаголовка = НСтр("ru = 'При подключении возникли ошибки. Подробности в журнале регистрации.
				|Обратитесь в отдел технической поддержки по адресу';
				|en = 'При подключении возникли ошибки. Подробности в журнале регистрации.
				|Обратитесь в отдел технической поддержки по адресу'");
		ТекстЗаголовка = СтрШаблон("%1 %2", ШаблонЗаголовка, АдресТехподдержки);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтложенноеПодключение", "Заголовок", ТекстЗаголовка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаДоступностиАдреса

&НаСервере
Процедура НачатьПроверкуДоступностиАдресаПоИмени()
	
	ПараметрыЗадания = ПараметрыФоновогоЗадания();
	ПараметрыЗадания.ИмяЗадания 	= "ПроверкаДоступностиАдресаПоИмени";
	ПараметрыЗадания.ИмяМетода 		= "ИнтеграцияУправлениеПерсоналомМенеджер.ПроверкаДоступностиАдресаПоИмениФоновоеЗадание";
	ПараметрыЗадания.ВыводитьОкноОжидания = Истина;
	
	ЗапуститьФоновоеЗадание(ПараметрыЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаДоступностиАдресаПоИмениЗавершение(АдресРезультата)
	
	Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
	Объект.АдресПриложенияПоИмениДоступен = Настройки.АдресПриложенияПоИмениДоступен;
	
	УстановитьЗаголовокСостояниеАдресаПоИмени();
	Элементы.ПроверитьДоступностьАдреса.Видимость 			= Не Объект.АдресПриложенияПоИмениДоступен;
	Элементы.ДекорацияАдресПриложения.Доступность 			= Объект.АдресПриложенияПоИмениДоступен;
	Элементы.ДекорацияАдресПриложенияВременный.Видимость 	= Не Объект.АдресПриложенияПоИмениДоступен;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСостояниеАдресаПоИмени()

	Если Объект.АдресПриложенияПоИмениДоступен Тогда
		СтрЗаголовок = НСтр("ru = 'Приложение по этому адресу доступно.';
							|en = 'Приложение по этому адресу доступно.'");
	Иначе
		СтрЗаголовок = НСтр("ru = 'Приложение по этому адресу будет доступно через несколько минут.';
							|en = 'Приложение по этому адресу будет доступно через несколько минут.'");
	КонецЕсли;
	Элементы.ДекорацияСостояниеАдресаПоИмени.Заголовок = СтрЗаголовок;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеИнформацииОПриложении

&НаСервере
Процедура НачатьПолучениеИнформацииОПриложении()
	
	ПараметрыЗадания = ПараметрыФоновогоЗадания();
	ПараметрыЗадания.ИмяЗадания = "ПолучениеИнформацииОПриложении";
	ПараметрыЗадания.ИмяМетода 	= "ИнтеграцияУправлениеПерсоналомМенеджер.ИнформацияОПриложенииФоновоеЗадание";

	ЗапуститьФоновоеЗадание(ПараметрыЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеИнформацииОПриложенииЗавершение(АдресРезультата)

	Элементы.СтраницыОбслуживаниеПриложения.ТекущаяСтраница = Элементы.СтраницаОбслуживаниеПриложения;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При получении информации о приложении возникла ошибка:';
								|en = 'При получении информации о приложении возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Объект.ИмяПриложения = Результат.ОписаниеПриложения.Наименование;
	ОбновитьРеквизитыПоОписаниюАдминистратора(Результат.ОписаниеПриложения.Администратор);
	
	Если Результат.Абонент <> Неопределено Тогда
		НаименованиеАбонента = Результат.Абонент.Наименование;
		ИдентификаторПользователяИП = Результат.Абонент.ИдентификаторПользователяИП;
		Если Не ЗначениеЗаполнено(ИдентификаторПользователяИП) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИзменитьПривязкуАбонента", "Видимость", Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПоОписаниюАдминистратора(ОписаниеАдминистратора)
	
	МобильныйТелефон 	= СОКРЛП(ОписаниеАдминистратора.Телефон);
	ЭлектроннаяПочта 	= СОКРЛП(ОписаниеАдминистратора.АдресЭлектроннойПочты);
	
	Идентификатор = ОписаниеАдминистратора.ФизическоеЛицо;
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор); 
	ПубличныйИдентификаторСсылка = ИнтеграцияУправлениеПерсоналомОбмен.ПубличныйИдентификаторСсылка(Идентификаторы, ТипОбъекта);
	Объект.Ответственный = ПубличныйИдентификаторСсылка[Идентификатор];
	
	СтрокаТелефонПочта = СтрШаблон(НСтр("ru = 'Мобильный телефон и почта, указанные в приложении: %1, %2';
										|en = 'Мобильный телефон и почта, указанные в приложении: %1, %2'"), МобильныйТелефон, ЭлектроннаяПочта);
	Элементы.ДекорацияТелефонПочтаОтветственногоЗаПриложение.Заголовок = СтрокаТелефонПочта;

КонецПроцедуры

#КонецОбласти

#Область ИзменениеОтветственногоЗаПриложение

&НаКлиенте
Процедура ИзменитьОтветственногоПриложенияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Ответственный) Тогда
		НачатьОбновлениеОтветственного(Результат.Ответственный);
		ПриНачалеЗадания();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НачатьОбновлениеОтветственного(Ответственный)

	Если Объект.ПриложениеВЛокальнойСети Тогда
		ПараметрыЗадания = ПараметрыФоновогоЗадания();
		ПараметрыЗадания.ВыводитьОкноОжидания = Истина;
		ПараметрыЗадания.ИмяЗадания = "ОбновлениеОтветственного";
		ПараметрыЗадания.ИмяМетода 	= "ИнтеграцияУправлениеПерсоналом.ОбновлениеОтветственногоФоновоеЗадание";
		ПараметрыЗадания.ПараметрыМетода.Вставить("Ответственный", Ответственный);
	Иначе
		ПараметрыЗадания = ПараметрыФоновогоЗадания();
		ПараметрыЗадания.ВыводитьОкноОжидания = Истина;
		ПараметрыЗадания.ИмяЗадания = "ОбновлениеОтветственного";
		ПараметрыЗадания.ИмяМетода 	= "ИнтеграцияУправлениеПерсоналомМенеджер.ОбновитьАдминистратораПриложенияФоновоеЗадание";
		ПараметрыЗадания.ПараметрыМетода.Вставить("Ответственный", Ответственный);
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание(ПараметрыЗадания);

КонецПроцедуры

&НаСервере
Процедура ОбновлениеОтветственногоЗавершение(АдресРезультата) Экспорт

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При изменении данных возникла ошибка:';
								|en = 'При изменении данных возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе
		Объект.Ответственный = Результат.НовыйОтветственный;
		ОбновитьРеквизитыОтветственныйЗаПриложение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыОтветственныйЗаПриложение()
	
	СтрокаТелефонПочта = "";
	ДанныеОтветственного = ДанныеОтветственного(Объект.Ответственный);
	
	СтрокаТелефонПочта = СтрШаблон(НСтр("ru = 'Мобильный телефон и почта, указанные в приложении: %1, %2';
										|en = 'Мобильный телефон и почта, указанные в приложении: %1, %2'"), ДанныеОтветственного.МобильныйТелефон, ДанныеОтветственного.ЭлектроннаяПочта);
	Элементы.ДекорацияТелефонПочтаОтветственногоЗаПриложение.Заголовок = СтрокаТелефонПочта;

КонецПроцедуры

#КонецОбласти

#Область ИзменениеАбонентаИПП

&НаКлиенте
Процедура ИзменитьАбонентаИПП()
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьАбонентаИПППродолжение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Приложение,ИдентификаторПользователяИП", Приложение, ИдентификаторПользователяИП);
	
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ИзменитьАбонентаИПП",
		ПараметрыОткрытия, ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
&НаКлиенте
Процедура ИзменитьАбонентаИПППродолжение(Результат, Параметры) Экспорт

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	НачатьИзменениеАбонентаИПП();
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИзменениеАбонентаИПП()
	
	ПараметрыЗадания = ПараметрыФоновогоЗадания();
	ПараметрыЗадания.ИмяЗадания = "ИзменениеАбонентаИПП";
	ПараметрыЗадания.ИмяМетода 	= "ИнтеграцияУправлениеПерсоналомМенеджер.ИзменитьАбонентаИППФоновоеЗадание";
	ПараметрыЗадания.ВыводитьОкноОжидания = Истина;
	
	ЗапуститьФоновоеЗадание(ПараметрыЗадания);

КонецПроцедуры

&НаСервере
Процедура ИзменениеАбонентаИППЗавершение(АдресРезультата)

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При изменении данных возникла ошибка:';
								|en = 'При изменении данных возникла ошибка:'") + Символы.ПС + Результат.СообщениеОбОшибке;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НаименованиеАбонента = Результат.Абонент.Наименование;
	ИдентификаторПользователяИП = Результат.Абонент.ИдентификаторПользователяИП;
	
КонецПроцедуры

#КонецОбласти

#Область Отключение

 &НаКлиенте
Процедура ПриОтветеНаВопросОтключитьПриложение(КодВозврата, ДополнительныеПараметры) Экспорт

	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОписаниеСостояния.Доступность 		= Ложь;
	Элементы.ГруппаПриложение.Доступность 	= Ложь;
	
	Если ДополнительныеПараметры.РежимОтключенияУдалить Тогда
		НачатьУдалениеПриложения();
		ПриНачалеЗадания();
	Иначе
		БылиОшибки = ОтключитьПриложениеНаСервере();
		Если БылиОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка при отключении. Подробнее см в Журнале регистрации.';
									|en = 'Ошибка при отключении. Подробнее см в Журнале регистрации.'");
		Иначе
			Элементы.СтраницыВариантыПодключения.Доступность = Ложь;
			ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
			ТекстСообщения = НСтр("ru = 'Приложение 1С:Персонал отключено.';
									|en = 'Приложение 1С:Персонал отключено.'");
		КонецЕсли;
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОтключитьПриложениеНаСервере()
	
	Возврат ИнтеграцияУправлениеПерсоналом.ОчиститьДанныеПриОтключенииПриложения(Приложение, Истина);

КонецФункции

&НаСервере
Функция НачатьУдалениеПриложения()
	
	ПараметрыЗадания = ПараметрыФоновогоЗадания();
	ПараметрыЗадания.ИмяЗадания 			= "УдалениеПриложения";
	ПараметрыЗадания.ИмяМетода 				= "ИнтеграцияУправлениеПерсоналомМенеджер.УдалениеПриложенияФоновоеЗадание";
	ПараметрыЗадания.ВыводитьОкноОжидания 	= Истина;
	
	ЗапуститьФоновоеЗадание(ПараметрыЗадания);

КонецФункции

&НаКлиенте
Процедура УдалениеПриложенияЗавершение()
	
	ОтключитьПриложениеНаСервере();
	ТекстСообщения = НСтр("ru = 'Приложение 1С:Персонал удалено.';
							|en = 'Приложение 1С:Персонал удалено.'");
	ПоказатьПредупреждение(,ТекстСообщения);
	ПодключитьОбработчикОжидания("ОтложенноеОбновлениеИнтерфейса", 0.5, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаНастроекИзФайла

&НаКлиенте
Процедура ФайлНастроекПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда
		
		Объект.АдресПриложения 		= "";
		КлючИдентификаторКлиента 	= "";
		КлючСекретКлиента 			= "";
		
		Обработчик = Новый ОписаниеОповещения("ФайлНастроекПослеВыбораЗавершение", ЭтотОбъект);
		НачатьСозданиеДвоичныхДанныхИзФайла(Обработчик, ВыбранныеФайлы[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНастроекПослеВыбораЗавершение(ДвоичныеДанные, ДополнительныеПараметры) Экспорт

	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	Результат = НастройкиИзФайлаНаСервере(АдресФайла);
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ПоказатьПредупреждение(,Результат.СообщениеОбОшибке);
	Иначе
		Объект.АдресПриложения 		= Результат.Настройки["url"];
		КлючИдентификаторКлиента 	= Результат.Настройки["clientID"];
		КлючСекретКлиента 			= Результат.Настройки["clientSecret"];
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиИзФайлаНаСервере(АдресФайла)
	
	Результат = Новый Структура("Настройки,СообщениеОбОшибке");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	УдалитьИзВременногоХранилища(АдресФайла);
	
	НетНастроек = Ложь;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
		Настройки = ПрочитатьJSON(ЧтениеJSON, Истина);
		Если Не ЗначениеЗаполнено(Настройки["url"]) Или Не ЗначениеЗаполнено(Настройки["clientID"]) Или Не ЗначениеЗаполнено(Настройки["clientSecret"]) Тогда
			НетНастроек = Истина;
		Иначе
			Результат.Настройки = Настройки;
		КонецЕсли;
	Исключение
		НетНастроек = Истина;
	КонецПопытки;
	
	Если НетНастроек Тогда
		СообщениеОбОшибке = НСтр("ru = 'Выбранный файл не содержит настроек подключения к приложению 1С:Персонал.';
								|en = 'The selected file does not contain the settings for connection to 1C:Human Resources.'");
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуПользователей()

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		Модуль.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		Если ФормаВРежимеПодключения Тогда
			НачатьПолучениеАбонентаИПП();
			ПриНачалеЗадания();
		Иначе
			ИзменитьАбонентаИПП();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнтернетПоддержкаПодключена()

	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ДанныеОтветственногоЛица

&НаКлиентеНаСервереБезКонтекста
Процедура ОтветственныйПриИзмененииКлиентСервер(Форма, Ответственный)

	ДанныеОтветственного = ДанныеОтветственного(Ответственный);
	РезультатПроверки = ИнтеграцияУправлениеПерсоналомКлиентСервер.РезультатПроверкиДанныхОтветственного(Ответственный, ДанныеОтветственного);
	ОбновитьЭУОтветственный(Форма, РезультатПроверки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУОтветственный(Форма, РезультатПроверки)
	
	Элементы = Форма.Элементы;
	Форма.ДанныеОтветственногоЗаполнены = РезультатПроверки.ДанныеЗаполнены;
	
	Если Форма.Объект.ПриложениеВЛокальнойСети Тогда
		ДекорацияТелефонПочтаОтветственного 		= Элементы.ДекорацияТелефонПочтаОтветственногоЛокально;
		ДекорацияРеквизитыОтветственногоПояснение 	= Элементы.ДекорацияРеквизитыОтветственногоПояснениеЛокально;
	Иначе
		ДекорацияТелефонПочтаОтветственного 		= Элементы.ДекорацияТелефонПочтаОтветственного;
		ДекорацияРеквизитыОтветственногоПояснение 	= Элементы.ДекорацияРеквизитыОтветственногоПояснение;
	КонецЕсли;
	
	ДекорацияТелефонПочтаОтветственного.Заголовок = РезультатПроверки.СтрокаТелефонПочта;
	ДекорацияРеквизитыОтветственногоПояснение.Заголовок = РезультатПроверки.СтрокаПояснение;
	
	Если РезультатПроверки.ЕстьОшибки Тогда
		ДекорацияРеквизитыОтветственногоПояснение.ЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
	Иначе
		ДекорацияРеквизитыОтветственногоПояснение.ЦветТекста = Форма.ЦветСтиляИнформационнойНадписи;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОтветственного(Ответственный)
	
	ДанныеОтветственного = Новый Структура("МобильныйТелефон,ЭлектроннаяПочта,Пол");
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Возврат ДанныеОтветственного;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеОтветственного.Пол =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ответственный, "Пол");
	КонтактнаяИнформация = ИнтеграцияУправлениеПерсоналом.КонтактнаяИнформацияФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ответственный));
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеОтветственного.МобильныйТелефон = КонтактнаяИнформация.МобильныеТелефоны[Ответственный];
	ДанныеОтветственного.ЭлектроннаяПочта = КонтактнаяИнформация.АдресаПочты[Ответственный];
	
	Возврат ДанныеОтветственного;
	
КонецФункции

#КонецОбласти

#Область Обмен

&НаСервереБезКонтекста
Функция ОбменВыполняется()
	
	Возврат ИнтеграцияУправлениеПерсоналом.ОбменВыполняется(Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом);

КонецФункции

&НаСервере
Функция ДлительнаяОперацияВыполнитьОбмен()
	
	ПараметрыПроцедуры = Новый Структура("ПодготовитьДанныеДляТехПоддержки", Ложь);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтрШаблон(НСтр("ru = 'Выполнение обмена с приложением 1С:Персонал';
						|en = 'Exchange with 1C:Human Resources'")));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Интеграция1СПерсонал.ВыполнитьОбменФоновоеЗадание",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне);
		
	Возврат ДлительнаяОперация;
	
КонецФункции 

&НаКлиенте
Процедура ВыполнитьОбменЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, ДлительнаяОперация.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
	ОбновитьРезультатОбменаНаСервере();

КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьОбменВыгрузитьЖурналПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ВыполнитьОбменСохранитьРезультатВЖурнал();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьОбменСохранитьРезультатВЖурнал()

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьОбменСохранитьРезультатВЖурналЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = ПараметрыОбменаССохранениемРезультата(Приложение);
	ОткрытьФорму("Обработка.ИнтеграцияУправлениеПерсоналом.Форма.ВыполнитьОбменСохранитьРезультат", ПараметрыОткрытия, ЭтаФорма,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПараметрыОбменаССохранениемРезультата(Приложение)
	
	ИмяФайла = СтрШаблон("%1_%2", "EventLogExchange", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("СобытиеОбмена", 		Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен);
	ПараметрыОткрытия.Вставить("Приложение", 			Приложение);
	ПараметрыОткрытия.Вставить("ИмяФайла", 				ИмяФайла);
	ПараметрыОткрытия.Вставить("ИмяМетода", 			"Интеграция1СПерсонал.ВыполнитьОбменФоновоеЗадание");
	
	Возврат ПараметрыОткрытия;

КонецФункции

&НаКлиенте
Процедура ВыполнитьОбменСохранитьРезультатВЖурналЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.РезультатВыполненияОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат.ПолноеИмяФайла) Тогда
		ТекстСообщения = СтрШаблон("%1: %2", НСтр("ru = 'Данные сохранены в';
													|en = 'Data is saved to'"), Результат.ПолноеИмяФайла);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВидыКИ

&НаКлиенте
Процедура ИзменитьВидыКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидКИМобильныйТелефон <> Результат.ВидКИМобильныйТелефон Или Объект.ВидКИАдресЭлектроннойПочты <> Результат.ВидКИАдресЭлектроннойПочты Тогда
		СообщениеОбОшибке = Неопределено;
		СохранитьНовыеВидыКонтактнойИнформации(Результат.ВидКИМобильныйТелефон, Результат.ВидКИАдресЭлектроннойПочты, СообщениеОбОшибке);
		Если СообщениеОбОшибке = Неопределено Тогда
			Оповестить("ОбновитьСписокОшибокЗаполненияИнтеграцияУправлениеПерсоналом");
		Иначе	
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНовыеВидыКонтактнойИнформации(НовыйВидКИМобильныйТелефон, НовыйВидКИАдресЭлектроннойПочты, СообщениеОбОшибке)
	
	УстановитьПривилегированныйРежим(Истина);
	ИнтеграцияУправлениеПерсоналом.СохранитьНовыеВидыКонтактнойИнформации(НовыйВидКИМобильныйТелефон, НовыйВидКИАдресЭлектроннойПочты, СообщениеОбОшибке);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СообщениеОбОшибке = Неопределено Тогда
		Объект.ВидКИМобильныйТелефон 		= НовыйВидКИМобильныйТелефон;
		Объект.ВидКИАдресЭлектроннойПочты 	= НовыйВидКИАдресЭлектроннойПочты;
		ОбновитьОписаниеВидаКонтактнойИнформации();
		Если Не Объект.ПриложениеПодключено Тогда
			ДанныеОтветственного = ДанныеОтветственного(Объект.Ответственный);
			РезультатПроверки = ИнтеграцияУправлениеПерсоналомКлиентСервер.РезультатПроверкиДанныхОтветственного(Объект.Ответственный, ДанныеОтветственного);
			ОбновитьЭУОтветственный(ЭтаФорма, РезультатПроверки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеВидаКонтактнойИнформации()
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Объект.ВидКИМобильныйТелефон);
	ВидыКИ.Добавить(Объект.ВидКИАдресЭлектроннойПочты);
	НаименованиеВидовКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыКИ, "Наименование");
	
	Строка1 = НСтр("ru = 'Виды контактной информации, используемые для работы в приложении,';
					|en = 'Виды контактной информации, используемые для работы в приложении,'");
	Строка2 = НСтр("ru = 'мобильный телефон - ""%1"", адрес электронной почты - ""%2""';
					|en = 'мобильный телефон - ""%1"", адрес электронной почты - ""%2""'");
	Строка2 = СтрШаблон(Строка2,НаименованиеВидовКИ[Объект.ВидКИМобильныйТелефон],НаименованиеВидовКИ[Объект.ВидКИАдресЭлектроннойПочты]);
	
	ТекстЗаголовка = СтрШаблон("%1%2%3",Строка1,Символы.ПС,Строка2);
	Элементы.ДекорацияИзменениеВидаКИПояснение.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияИзменениеВидаКИЛокальноПояснение.Заголовок = ТекстЗаголовка;
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	НаименованиеВидовКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыКИ, "Наименование");
	
	Строка1 = НСтр("ru = 'В приложение 1С:Персонал выгружаются мобильные телефоны и адреса электронной почты сотрудников.';
					|en = 'Employees'' cell phone numbers and email addresses are exported to 1C:Human Resources.'");
	Строка2 = НСтр("ru = 'По умолчанию используются предопределенные значения видов контактной информации: мобильный телефон - ""%1"" и адрес электронной почты - ""%2"". Можно создать собственные виды контактной информации и использовать их для выгрузки контактной информации в приложение.';
					|en = 'Predefined values for contact details kinds are used by default: cell phone - ""%1"" and email address - ""%2"". You can create your own contact details kinds and use them to export the contact details to the application.'");
	Строка2 = СтрШаблон(Строка2,
		НаименованиеВидовКИ[Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица],
		НаименованиеВидовКИ[Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица]);
	ТекстЗаголовка = СтрШаблон("%1%2%3",Строка1,Символы.ПС,Строка2);
	
	Элементы.ДекорацияВидыКонтактнойИнформации.Заголовок = ТекстЗаголовка;

КонецПроцедуры 

#КонецОбласти

#Область СтруктураКомпании

&НаСервере
Процедура ОбновитьОписаниеПубликуемойСтруктуры()

	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТекстЗаголовка = НСтр("ru = 'Структура Компании в приложении 1С:Персонал соответствует Подразделениям организации (структуре юридических лиц).';
								|en = 'The company structure in 1C:Human Resources corresponds to business units (legal entity structure).'");
		ТекстЗаголовкаПриПодключении = НСтр("ru = 'Структура Компании в приложении 1С:Персонал будет соответствовать Подразделениям организации (структуре юридических лиц).';
											|en = 'Структура Компании в приложении 1С:Персонал будет соответствовать Подразделениям организации (структуре юридических лиц).'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Структура Компании в приложении 1С:Персонал соответствует Структуре предприятия.';
								|en = 'The company structure in 1C:Human Resources corresponds to the enterprise structure.'");
		ТекстЗаголовкаПриПодключении = НСтр("ru = 'Структура Компании в приложении 1С:Персонал будет соответствовать Структуре предприятия.';
											|en = 'Структура Компании в приложении 1С:Персонал будет соответствовать Структуре предприятия.'");
	КонецЕсли;
	Элементы.ДекорацияОписаниеПубликуемойСтруктуры.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияПубликуемаяСтруктураПриПодключении.Заголовок = ТекстЗаголовкаПриПодключении;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьПубликуемуюСтруктураКомпанииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПубликоватьСтруктуруЮридическихЛиц <> Результат.ПубликоватьСтруктуруЮридическихЛиц Тогда
		СообщениеОбОшибке = Неопределено;
		СохранитьИзменениеПубликуемойСтруктуры(Результат.ПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке);
		Если СообщениеОбОшибке = Неопределено Тогда
			Оповестить("ИзмененаПубликуемаяСтруктураКомпании");
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменениеПубликуемойСтруктуры(ЗначениеПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке)
	
	УстановитьПривилегированныйРежим(Истина);
	ИнтеграцияУправлениеПерсоналом.СохранитьНастройкуПубликуемойСтруктурыКомпании(ЗначениеПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СообщениеОбОшибке = Неопределено Тогда
		ПубликоватьСтруктуруЮридическихЛиц = ЗначениеПубликоватьСтруктуруЮридическихЛиц;
		ОбновитьОписаниеПубликуемойСтруктуры();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаголовковСАдресом

&НаСервере
Процедура УстановитьЗаголовкиСАдресом()

	ТекстЗаголовка = СтрШаблон(".%1",ПостфиксАдреса());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияАдрес", "Заголовок", ТекстЗаголовка);
	
	АдресТехподдержки =  АдресТехподдержки();
	
	ШаблонЗаголовка = НСтр("ru = '<body>Подключение займет некоторое время, после его завершения вы сможете продолжить.
	|Если при подключении возникли проблемы свяжитесь с нами <a href=""%1"">%2</a></body>';
	|en = '<body>Подключение займет некоторое время, после его завершения вы сможете продолжить.
	|Если при подключении возникли проблемы свяжитесь с нами <a href=""%1"">%2</a></body>'");
	СтрокаЗаголовка = СтрШаблон(ШаблонЗаголовка, АдресТехподдержки.Ссылка, АдресТехподдержки.Адрес);
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовка + "</html>", Новый Структура);
	ТекстЗаголовка = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПодключениеОписание", "Заголовок", ТекстЗаголовка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПодключениеПояснение", "Заголовок", ТекстЗаголовка);
	
	ШаблонЗаголовка = НСтр("ru = '<body>Этот идентификатор нужно указывать при обращении в техническую поддержку <a href=""%1"">%2</a></body>';
							|en = '<body>Этот идентификатор нужно указывать при обращении в техническую поддержку <a href=""%1"">%2</a></body>'");
	СтрокаЗаголовка = СтрШаблон(ШаблонЗаголовка, АдресТехподдержки.Ссылка, АдресТехподдержки.Адрес);
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовка + "</html>", Новый Структура);
	ТекстЗаголовка = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияИдентификаторОписаниеОтложено", "Заголовок", ТекстЗаголовка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияИдентификаторПриложения", "Заголовок", ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АдресТехподдержки()
	
	Возврат Новый Структура("Адрес,Ссылка","https://support.element.1c.ru","https://support.1c.ru/applications/sd");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксАдреса()

	Возврат "1c-hrm.ru";

КонецФункции

&НаСервере
Функция СтрокаАдресПриложения()
	
	ИмяДоменаВАдрес = ?(ПустаяСтрока(Объект.ИмяДомена),"<"+НСтр("ru = 'ваше приложение';
																|en = 'ваше приложение'")+">",СОКРЛП(Объект.ИмяДомена));
	ПостфиксАдреса = ПостфиксАдреса();
	Возврат СтрШаблон("%1.%2", ИмяДоменаВАдрес, ПостфиксАдреса);

КонецФункции

#КонецОбласти

#Область ЗагрузкаНастроекМенеджераИзФайла

&НаКлиенте
Процедура ФайлНастроекМенеджераПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда
		
		КлючИдентификаторКлиентаМ 	= "";
		КлючСекретКлиентаМ 			= "";
		
		Обработчик = Новый ОписаниеОповещения("ФайлНастроекМенеджераПослеВыбораЗавершение", ЭтотОбъект);
		НачатьСозданиеДвоичныхДанныхИзФайла(Обработчик, ВыбранныеФайлы[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНастроекМенеджераПослеВыбораЗавершение(ДвоичныеДанные, ДополнительныеПараметры) Экспорт

	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	Результат = НастройкиМенеджераИзФайлаНаСервере(АдресФайла);
	Если Результат.СообщениеОбОшибке <> Неопределено Тогда
		ПоказатьПредупреждение(,Результат.СообщениеОбОшибке);
	Иначе
		АдресМенеджера 				= Результат.Настройки["hrmUrl"];
		КлючИдентификаторКлиентаМ 	= Результат.Настройки["clientID"];
		КлючСекретКлиентаМ 			= Результат.Настройки["clientSecret"];
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиМенеджераИзФайлаНаСервере(АдресФайла)
	
	Результат = Новый Структура("Настройки,СообщениеОбОшибке");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	УдалитьИзВременногоХранилища(АдресФайла);
	
	НетНастроек = Ложь;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
		Настройки = ПрочитатьJSON(ЧтениеJSON, Истина);
		Если Не ЗначениеЗаполнено(Настройки["hrmUrl"]) Или Не ЗначениеЗаполнено(Настройки["clientID"]) Или Не ЗначениеЗаполнено(Настройки["clientSecret"]) Тогда
			НетНастроек = Истина;
		Иначе
			Результат.Настройки = Настройки;
		КонецЕсли;
	Исключение
		НетНастроек = Истина;
	КонецПопытки;
	
	Если НетНастроек Тогда
		СообщениеОбОшибке = НСтр("ru = 'Выбранный файл не содержит настроек подключения к приложению 1С:Персонал.';
								|en = 'Выбранный файл не содержит настроек подключения к приложению 1С:Персонал.'");
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроверкаЗаписьКлючейМенеджера

&НаКлиенте
Процедура НачатьПроверкуНастроекМенеджера()

	ПроверкаВыполнялась = Истина;
	НастройкиПравильные = Ложь;
	СообщениеПроверки = "";
	
	ДлительнаяОперация = ПроверкаНастроекМенеджераНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Проверка настроек подключения.';
															|en = 'Проверка настроек подключения.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаНастроекМенеджераЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция ПроверкаНастроекМенеджераНаСервере()
	
	Ключи = Новый Структура("ИдентификаторКлиента,СекретКлиента", КлючИдентификаторКлиентаМ, КлючСекретКлиентаМ);
	НастройкиПодключения = Новый Структура("АдресМенеджера,Ключи", СокрЛП(АдресМенеджера), Ключи);
	
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Приложение", Приложение);
	ПараметрыПроверки.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания", НСтр("ru = 'Проверка настроек';
																			|en = 'Проверка настроек'"));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияУправлениеПерсоналомМенеджер.ПроверитьКлючиФоновоеЗадание",
		ПараметрыПроверки,
		ПараметрыВыполненияВФоне);
	
КонецФункции
	
&НаКлиенте
Процедура ПроверкаНастроекМенеджераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		СообщениеПроверки = НСтр("ru = 'Не удалось выполнить проверку настроек  подключения.';
								|en = 'Не удалось выполнить проверку настроек  подключения.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеПроверки);
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		СообщениеПроверки = НСтр("ru = 'При выполнении фонового задания возникла ошибка';
								|en = 'При выполнении фонового задания возникла ошибка'");
		ТекстСообщения = СтрШаблон("%1: %2%3",СообщениеПроверки, Символы.ПС, Результат.КраткоеПредставлениеОшибки) + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПроверкаНастроекМенеджераЗавершениеНаСервере(Результат.АдресРезультата);
	ПриНачалеЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаНастроекМенеджераЗавершениеНаСервере(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ТокенПолучен Тогда
		
		Ключи = Новый Структура("ИдентификаторКлиента,СекретКлиента", КлючИдентификаторКлиентаМ, КлючСекретКлиентаМ);
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияУправлениеПерсоналом.СохранитьКлючиМенеджера(Приложение, Ключи);
		ИнтеграцияУправлениеПерсоналом.УдалитьТокенМенеджера(Приложение);
		Константы.АдресМенеджера1СПерсонал.Установить(СокрЛП(АдресМенеджера));
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Этап0", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкиПодключения", "Доступность", Истина);
		
		НачатьПолучениеАбонентаИПП();
		
	ИначеЕсли Результат.НеактуальныеКлючи Тогда
		
		СообщениеПроверки = НСтр("ru = 'Настройки подключения не актуальны, запросите новые настройки.';
								|en = 'Настройки подключения не актуальны, запросите новые настройки.'");
		ОбщегоНазначения.СообщитьПользователю(СообщениеПроверки);
		
	Иначе
		
		СообщениеПроверки = НСтр("ru = 'Не удалось проверить настройки подключения. Повторите попытку позже.';
								|en = 'Не удалось проверить настройки подключения. Повторите попытку позже.'");
		ОбщегоНазначения.СообщитьПользователю(СообщениеПроверки);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочие

&НаСервере
Процедура ПерейтиКНовомуПодключению()

	ИнтеграцияУправлениеПерсоналомМенеджер.ОчиститьСостояниеПодключенияПриложения(Приложение);
	УстановитьДоступностьЭУПодключения(Ложь);
	ВыполнитьНачальноеЗаполнение();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьНачальноеЗаполнение()
	
	НачатьСценарийПодключения 						= Ложь;
	НачатьПолучениеИнформацииОПриложении 			= Ложь;
	ОтложенноеПодключение 							= Ложь;
	ЗавершитьСценарийОтложенногоПодключения 		= Ложь;
	
	ЕстьКлючиМенеджера = Ложь;
	
	ПрочитатьНастройки();
	ОбновитьОписаниеВидаКонтактнойИнформации();
	ОбновитьОписаниеПубликуемойСтруктуры();
		
	СостояниеПодключения = ИнтеграцияУправлениеПерсоналомМенеджер.СостояниеПодключенияПриложения(Приложение);
	Если ЗначениеЗаполнено(СостояниеПодключения.Состояние) Тогда
		// Используется отложенное подключение.
		Если СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияПриложения.Создано Тогда
			// подключение выполнено
			СсылкаДляАдминистратора = СостояниеПодключения.СсылкаДляАдминистратора;
			УстановитьЗаголовокДекорацияПереходДляАдминистратора();
			Если Не Объект.ПриложениеПодключено Тогда
				ФормаВРежимеПодключения 				= Истина;
				Объект.ПриложениеПодключено 			= Истина;
				ТребуетсяОбновитьИнтерфейс 				= Истина;
				ЗавершитьСценарийОтложенногоПодключения = Истина;
				УстановитьПривилегированныйРежим(Истина);
				Константы.ИспользуетсяПриложение1СПерсонал.Установить(Истина);
				ИнтеграцияУправлениеПерсоналомМенеджер.ОчиститьСостояниеПодключенияПриложения(Приложение);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		Иначе
			Объект.ИдентификаторЗаявки = СостояниеПодключения.ИдентификаторЗаявки;
			ОтложенноеПодключение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗаголовок = НСтр("ru = '1С:Персонал. Подключение';
							|en = '1С:Персонал. Подключение'");
	
	Если Объект.ПриложениеПодключено Тогда
		
		СтрокаЗаголовок = НСтр("ru = '1С:Персонал';
								|en = '1С:Персонал'");
		// Включаем страницу, т.к. могла быть выключена.
		Элементы.СтраницаПриложениеПодключено.Видимость = Истина;
		// Выключаем страницы, чтобы не было полосы прокрутки.
		Элементы.СтраницаПодключениеПриложения.Видимость = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриложениеПодключено;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПодключениеВыполнено", "Видимость", ФормаВРежимеПодключения);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИзменитьПривязкуАбонента", "Видимость", Не Объект.РазделениеВключено);
		
		// Проверка доступности менеджера по наличию ключей при условии работы не в локальном режиме.
		ЕстьКлючиМенеджера = Не Объект.ПриложениеВЛокальнойСети И ИнтеграцияУправлениеПерсоналом.ЕстьКлючиМенеджера(Приложение);
		
		Элементы.СтраницыОбслуживаниеПриложения.ТекущаяСтраница = Элементы.СтраницаОбслуживаниеПриложения;
		Если Объект.ПриложениеВЛокальнойСети Тогда
			Элементы.СтраницыОтключениеПриложения.ТекущаяСтраница = Элементы.СтраницаОтключениеЛокальнаяВерсия;
		Иначе
			Элементы.СтраницыОтключениеПриложения.ТекущаяСтраница = Элементы.СтраницаОтключение;
			НачатьПолучениеИнформацииОПриложении = Истина;
			Если Объект.РазделениеВключено Тогда
				ИнтернетПоддержкаПодключена = Истина;
			Иначе
				ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПодключена();
			КонецЕсли;
		КонецЕсли;
		
		УстановитьЗаголовокДекорацияПереходДляАдминистратора();
		ОбновитьЭУОтключениеПриложения(ЭтаФорма);
		ОбновитьЭУ();
		ОбновитьРезультатОбменаНаСервере();
		УстановитьЗаголовокАдресПриложения();
		
	ИначеЕсли ОтложенноеПодключение Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИндикаторДлительнойОперацииПроверкаПодключения", "Видимость", Ложь);
		
		ФормаВРежимеПодключения = Истина;
		
		// Включаем страницу, т.к. могла быть выключена.
		Элементы.СтраницаПодключениеПриложения.Видимость = Истина;
		// Выключаем страницу, чтобы не было полосы прокрутки.
		Элементы.СтраницаПриложениеПодключено.Видимость = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключениеПриложения;
		Элементы.СтраницыВариантыПодключения.ТекущаяСтраница = Элементы.СтраницаОтложенноеПодключение;
		ОшибкаСоздания = СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияПриложения.ОшибкаСоздания;
		ОбновитьЭУОтложенноеПодключение(ОшибкаСоздания);
		
	ИначеЕсли ПолноправныйПользователь Тогда
		
		// Приложение не подключено, полноправный пользователь.
		ФормаВРежимеПодключения = Истина;
		
		// Включаем страницу, т.к. могла быть выключена.
		Элементы.СтраницаПодключениеПриложения.Видимость = Истина;
		// Выключаем страницы, чтобы не было полосы прокрутки.
		Элементы.СтраницаПриложениеПодключено.Видимость = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключениеПриложения;
		Если Объект.ПриложениеВЛокальнойСети Тогда
			Элементы.СтраницыВариантыПодключения.ТекущаяСтраница = Элементы.СтраницаПодключениеЛокально;
		Иначе
			
			ТребуетсяЗагрузкаНастроек = Не ИнтеграцияУправлениеПерсоналом.ЕстьКлючиМенеджера(Приложение);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Этап0", "Видимость", ТребуетсяЗагрузкаНастроек);
			
			Элементы.СтраницыВариантыПодключения.ТекущаяСтраница = Элементы.СтраницаПодключение;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИнтернетПоддержка", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаНастройкиПодключения", "Доступность", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ИндикаторДлительнойОперацииРезервированиеИмениДомена", "Видимость", Ложь);
			
			Элементы.ДекорацияИмяДоменаПояснение.Заголовок = Объект.ПояснениеИмяДомена;
			
			Если Не Объект.ЭтоАвтономноеРабочееМесто Тогда
				Если Объект.РазделениеВключено Тогда
					НачатьСценарийПодключения = Не ТребуетсяЗагрузкаНастроек;
				Иначе
					ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПодключена();
					Если ИнтернетПоддержкаПодключена Тогда
						НачатьСценарийПодключения = Не ТребуетсяЗагрузкаНастроек;
					Иначе
						ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
							"ИнтернетПоддержка", "Видимость", Истина);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Приложение не подключено, у пользователя нет права на подключение, но есть право на настройку.
		Элементы.СтраницыВариантыПодключения.ТекущаяСтраница = Элементы.СтраницаПодключениеНедоступно;
		
	КонецЕсли;
	
	Заголовок = СтрокаЗаголовок;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаАбонентПриложения", "Видимость", Ложь);
	
	Если НачатьСценарийПодключения Тогда
		Элементы.СтраницыВариантыПодключения.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
		НачатьПолучениеАбонентаИПП();
	ИначеЕсли НачатьПолучениеИнформацииОПриложении И ЕстьКлючиМенеджера Тогда
		Элементы.СтраницыОбслуживаниеПриложения.ТекущаяСтраница = Элементы.СтраницаОбслуживаниеДлительнаяИнформация;
		НачатьПолучениеИнформацииОПриложении();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройки()

	Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
	Объект.ИдентификаторПриложения 			= Настройки.ИдентификаторПриложения;
	Объект.АдресПриложения 					= Настройки.АдресПриложения;
	Объект.АдресПриложенияПоИмени 			= Настройки.АдресПриложенияПоИмени;
	Объект.АдресПриложенияПоИмениДоступен 	= Настройки.АдресПриложенияПоИмениДоступен;
	Объект.Ответственный 					= Настройки.Ответственный;
	
	Объект.ПриложениеПодключено 	= Константы.ИспользуетсяПриложение1СПерсонал.Получить();
	Объект.ПриложениеВЛокальнойСети = Константы.Приложение1СПерсоналВЛокальнойСети.Получить();
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.Настройки();
	Объект.ВидКИМобильныйТелефон 		= Настройки.ВидКИМобильныйТелефон;
	Объект.ВидКИАдресЭлектроннойПочты 	= Настройки.ВидКИАдресЭлектроннойПочты;
	ПубликоватьСтруктуруЮридическихЛиц 	= Настройки.ПубликоватьСтруктуруЮридическихЛиц;
	
	Объект.РазрешенныеСимволыИмениДомена = ИнтеграцияУправлениеПерсоналомМенеджер.РазрешенныеСимволыИмениДомена();
	Объект.ПояснениеИмяДомена = ИнтеграцияУправлениеПерсоналомМенеджер.ПояснениеИмяДомена();
	
	Элементы.ДекорацияТелефонПочтаОтветственногоЗаПриложение.Заголовок = "";
	
	Элементы.ГруппаАбонентПриложения.Видимость 	= Не Объект.ПриложениеВЛокальнойСети;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокАдресПриложения()

	ШаблонЗаголовка = НСтр("ru = '<body>Адрес приложения: <a href=""%1"">%2</a></body>';
							|en = '<body>Application address: <a href=""%1"">%2</a></body>'");
	СтрокаЗаголовка = СтрШаблон(ШаблонЗаголовка, Объект.АдресПриложения, Объект.АдресПриложения);
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовка + "</html>", Новый Структура);
	Элементы.ДекорацияАдресПриложения.Заголовок = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборЖурналаРегистрации(ВидСобытия, Уровень)
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	Отбор = Новый Структура;
	
	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	ИменаСобытий = Новый Массив;
	Для каждого ЭлементКоллекции Из ИменаСобытийЖР Цикл
		ИменаСобытий.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	Отбор.Вставить("СобытиеЖурналаРегистрации", ИменаСобытий);
	
	Если ЗначениеЗаполнено(ВидСобытия) Тогда
		СобытиеОбмена = РегистрыСведений.СобытияОбменаУправлениеПерсоналом.СобытиеОбмена(Приложение, ВидСобытия);
		Отбор.Вставить("ДатаНачала", 	СобытиеОбмена.ДатаНачала);
		Отбор.Вставить("ДатаОкончания", СобытиеОбмена.ДатаОкончания);
	Иначе
		Отбор.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()) - 86400*7);
	КонецЕсли;
	Если ЗначениеЗаполнено(Уровень) Тогда
		Отбор.Вставить("Уровень", Уровень);
	КонецЕсли;
	
	Возврат Отбор;

КонецФункции

&НаСервере
Процедура ОбновитьРезультатОбменаНаСервере()
	
	Событие = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен;
	РезультатОбмена = РегистрыСведений.СобытияОбменаУправлениеПерсоналом.СобытиеОбмена(Приложение, Событие);
	Если Не ЗначениеЗаполнено(РезультатОбмена.ДатаНачала) Тогда
		Элементы.ДекорацияРезультатОбмена.Заголовок = НСтр("ru = 'Обмен с приложением еще не выполнялся';
															|en = 'Exchange with the application has not been performed yet'");
		Элементы.ПоказатьСобытияОбмена.Видимость = Ложь;
	Иначе
		Элементы.ПоказатьСобытияОбмена.Видимость = ЕстьПраваНаПросмотрЖурналаРегистрации;
		СтрокаШаблон = НСтр("ru = 'Обмен выполнен: %1';
							|en = 'Exchange is executed: %1'");
		СтрокаЗаголовок = СтрШаблон(СтрокаШаблон, РезультатОбмена.ДатаОкончания);
		ЦветТекстаСообщения = ЦветСтиляИнформационнойНадписи;
		Если РезультатОбмена.БылиОшибки Тогда
			ЦветТекстаСообщения = ЦветСтиляПоясняющийОшибкуТекст;
			СтрокаБылиОшибки = НСтр("ru = 'При выполнении были ошибки.';
									|en = 'Errors occurred upon execution.'");
			СтрокаЗаголовок = СтрШаблон("%1 %2", СтрокаЗаголовок, СтрокаБылиОшибки);
		КонецЕсли;
		Элементы.ДекорацияРезультатОбмена.ЦветТекста = ЦветТекстаСообщения;
		Элементы.ДекорацияРезультатОбмена.Заголовок = СтрокаЗаголовок;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭУ()
	
	// ЭУ адрес приложения
	ЕстьАдресПриложенияПоИмени = Не ПустаяСтрока(Объект.АдресПриложенияПоИмени);
	ПоказыватьВременныйАдрес = ЕстьАдресПриложенияПоИмени И Не Объект.АдресПриложенияПоИмениДоступен;
	
	Элементы.ДекорацияАдресПриложенияВременный.Видимость 	= ПоказыватьВременныйАдрес;
	Элементы.ГруппаПроверкаДоступностиАдреса.Видимость 		= ПоказыватьВременныйАдрес;
	
	ШаблонЗаголовкаАдресПриложения = НСтр("ru = '<body>Адрес приложения: <a href=""%1"">%2</a></body>';
											|en = '<body>Адрес приложения: <a href=""%1"">%2</a></body>'");
	Если ПоказыватьВременныйАдрес Тогда
		Элементы.ДекорацияАдресПриложения.Доступность = Ложь;
		УстановитьЗаголовокСостояниеАдресаПоИмени();
		СтрокаЗаголовкаДекорацияАдресПриложения = СтрШаблон(ШаблонЗаголовкаАдресПриложения, Объект.АдресПриложенияПоИмени, Объект.АдресПриложенияПоИмени);
		ШаблонЗаголовкаАдресВременный = НСтр("ru = '<body>Приложение доступно по адресу: <a href=""%1"">%2</a></body>';
											|en = '<body>Приложение доступно по адресу: <a href=""%1"">%2</a></body>'");
		СтрокаЗаголовкаАдресВременный = СтрШаблон(ШаблонЗаголовкаАдресВременный, Объект.АдресПриложения, Объект.АдресПриложения);
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовкаАдресВременный + "</html>", Новый Структура);
		Элементы.ДекорацияАдресПриложенияВременный.Заголовок = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	ИначеЕсли ЕстьАдресПриложенияПоИмени Тогда
		СтрокаЗаголовкаДекорацияАдресПриложения = СтрШаблон(ШаблонЗаголовкаАдресПриложения, Объект.АдресПриложенияПоИмени, Объект.АдресПриложенияПоИмени);
	Иначе
		СтрокаЗаголовкаДекорацияАдресПриложения = СтрШаблон(ШаблонЗаголовкаАдресПриложения, Объект.АдресПриложения, Объект.АдресПриложения);
	КонецЕсли;
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовкаДекорацияАдресПриложения + "</html>", Новый Структура);
	Элементы.ДекорацияАдресПриложения.Заголовок = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	// ЭУ адрес приложения
	
	// ЭУ отключение приложения
	ЗаголовокОтключение = НСтр("ru = 'При отключении будут удалены настройки интеграции с приложением 1С:Персонал.
	|Обмен с приложением больше не будет выполняться.';
	|en = 'Upon disconnection, the settings of integration with 1C:Human Resources will be deleted.
	|Data will no longer be exchanged with the application.'");
	Элементы.ДекорацияОтключитьПриложениеПояснение.Заголовок = ЗаголовокОтключение;
	Элементы.ДекорацияОтключитьПриложениеЛокальноПояснение.Заголовок = ЗаголовокОтключение;
	
	ШаблонЗаголовка = НСтр("ru = 'При отключении будет удалено приложение по адресу %1 и все его данные.';
							|en = 'При отключении будет удалено приложение по адресу %1 и все его данные.'");
	ЗаголовокУдалениеПриложения = СтрШаблон(ШаблонЗаголовка, АдресПриложения(ЭтаФорма));
	Элементы.ДекорацияУдалитьПриложениеПояснение.Заголовок = ЗаголовокУдалениеПриложения;
	// ЭУ отключение приложения
	
	ОбновитьРеквизитыОтветственныйЗаПриложение();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПубликуемаяСтруктура", "Видимость",
			ПубликоватьСтруктуруЮридическихЛиц Или Не СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиПодключенияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьНачальноеЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенноеОбновлениеИнтерфейса()

	ОбновитьИнтерфейс();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АдресПриложения(Форма)

	АдресПриложения = Форма.Объект.АдресПриложения;
	Если ЗначениеЗаполнено(Форма.Объект.АдресПриложенияПоИмени) Тогда
		АдресПриложения = Форма.Объект.АдресПриложенияПоИмени;
	КонецЕсли;
	
	Возврат АдресПриложения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭУОтключениеПриложения(Форма)
	
	Форма.Элементы.ГруппаОтключитьПриложениеГоризонтальная.Доступность = Форма.ВариантОтключенияОтключить;
	Форма.Элементы.ГруппаУдалитьПриложениеГоризонтальная.Доступность = Форма.ВариантОтключенияУдалить;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭУПодключения(Выключить)

	Элементы.Ответственный.ТолькоПросмотр 		= Выключить;
	Элементы.ИмяДомена.ТолькоПросмотр 			= Выключить;
	Элементы.ИмяПриложения.ТолькоПросмотр 		= Выключить;
	Элементы.Подключить.Доступность 			= Не Выключить;
	Элементы.НастройкиПубликации.Доступность	 = Не Выключить;
	Элементы.ИзменитьПубликуемуюСтруктураКомпанииПриПодключении.Доступность = Не Выключить;
	Элементы.ИзменитьВидыКонтактнойИнформацииПриПодключении.Доступность 	= Не Выключить;

КонецПроцедуры

&НаКлиенте
Функция ИмяДоменаСоответствуетПравилам(Текст = Неопределено)
	
	РезультатПроверки = ИнтеграцияУправлениеПерсоналомКлиента.ПроверитьИмяДомена(Объект.ИмяДомена, Текст, Объект.РазрешенныеСимволыИмениДомена);
	
	ИмяДоменаСоответствуетПравилам 	= РезультатПроверки.ИмяДоменаСоответствуетПравилам;
	СообщениеПроверкиИмениДомена 	= РезультатПроверки.СообщениеОбОшибке;
	
	Если ПустаяСтрока(СообщениеПроверкиИмениДомена) Тогда
		ЦветТекста 			= ЦветСтиляТекстаПоля;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийТекст;
	Иначе
		ЦветТекста 			= ЦветСтиляПоясняющийОшибкуТекст;
		ЦветТекстаСообщения = ЦветСтиляПоясняющийОшибкуТекст;
	КонецЕсли;
	
	Элементы.ИмяДомена.ЦветТекста 					= ЦветТекста;
	Элементы.ДекорацияИмяДоменаПояснение.Заголовок  = СообщениеПроверкиИмениДомена;
	Элементы.ДекорацияИмяДоменаПояснение.ЦветТекста = ЦветТекстаСообщения;
	
	Возврат ИмяДоменаСоответствуетПравилам;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокДекорацияПереходДляАдминистратора()
	
	ШаблонЗаголовка = НСтр("ru = '<body>Приложение 1С:Персонал подключено.
	|Если вы - %1, тогда <a href=""%2"">%3</a> для авторизации в приложении.</body>';
	|en = '<body>Приложение 1С:Персонал подключено.
	|Если вы - %1, тогда <a href=""%2"">%3</a> для авторизации в приложении.</body>'");
	
	СтрокаЗаголовка = СтрШаблон(ШаблонЗаголовка, Строка(Объект.Ответственный), СсылкаДляАдминистратора, НСтр("ru = 'перейдите сюда';
																											|en = 'перейдите сюда'"));
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML("<html>" + СтрокаЗаголовка + "</html>", Новый Структура);
	Элементы.ДекорацияПереходДляАдминистратора.Заголовок = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти