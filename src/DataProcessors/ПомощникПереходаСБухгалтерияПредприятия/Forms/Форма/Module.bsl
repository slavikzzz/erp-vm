#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ЗначениеПустаяДата Экспорт;

&НаКлиенте
Перем одТипУзлаXML_КонецЭлемента Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.XMLСхема = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2";
	Объект.ВерсияФормата = "1.2";
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	
	Элементы.ДеревоНастроекУчетаОтметка.ТриСостояния = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатусВыполненнойЗагрузки = Ложь;
	
	ТаблицаПереходовПоСценарию();
	
	Если Не ЗначениеЗаполнено(Объект.КаталогПереноса) Тогда
		ПорядковыйНомерПерехода = 2;
		Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаВыбораКаталога;
		Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.ПанельНавигации.ПодчиненныеЭлементы.СтраницаНавигацииНазадДалее;
		Элементы.КомандаДалее2.КнопкаПоУмолчанию = Истина;
	Иначе
		Режим = 1;
		ПорядковыйНомерПерехода = 1;
		УстановитьПорядковыйНомерПерехода(1);
	КонецЕсли;
	
	ВосстановитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыполняетсяЗакрытие Тогда
		Отказ = Истина;
		НСтрока = НСтр("ru = 'Завершить работу с помощником?';
						|en = 'Close the wizard?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ВыполняетсяЗакрытие = Истина;
		Закрыть();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область РазделОбработчиковСобытийПерехода

// Обработчик выполняется при открытии страницы помощника "СтраницаПриветствие"
//
// Параметры:
//
// Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
// ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
// ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
&НаКлиенте
Функция Подключаемый_СтраницаНачало_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;	
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаОжидания"
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
// Логика данного обработчика пропускает отображение
// страницы помощника "СтраницаОжидания", если выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ОбновитьНаКлиенте();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаНачало_ПриПереходеДалее(Отказ)
	
	Если Режим = 1 Тогда
		ИзменитьПорядковыйНомерПерехода(+1);
	КонецЕсли;
	
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаПодключенияНапрямую".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПодключенияНапрямую_ПриПереходеНазад(Отказ)
	
	Объект.ПутьКБазе = "";
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаВыбораКаталога"
//
// Параметры:
//
// Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
// ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
// ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
&НаКлиенте
Функция Подключаемый_СтраницаВыбораКаталога_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.УстановитьЗначенияПараметровУчета.КнопкаПоУмолчанию = Истина;
	СписокЭтаповВыгрузки = Новый СписокЗначений;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаВыбораКаталога".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаВыбораКаталога_ПриПереходеДалее(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.КаталогПереноса) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо выбрать файл для загрузки данных';
													|en = 'Select file to import data'"));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаНастроекУчета_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	СохранитьВХранилищеНаКлиенте("parametres_from_source");
	Если ОтобразитьНастройкиУчета(Истина) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаНастроекУчета_ПриПереходеНазад(Отказ)
	
	ДеревоНастроекУчета.ПолучитьЭлементы().Очистить();
	
КонецФункции

&НаСервере
Функция ВыгрузкаНастроекУчета()
	
	Результат = Ложь;
	
	ФайлыКУдалению = Новый Массив;
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Название");
	Дерево.Колонки.Добавить("Отметка");
	
	Для Каждого Группа Из ДеревоНастроекУчета.ПолучитьЭлементы() Цикл
		ГруппаДерева = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ГруппаДерева, Группа);
		
		Для Каждого Строка Из Группа.ПолучитьЭлементы() Цикл
			СтрокаДерева = ГруппаДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Попытка
		Сериализатор   = Новый СериализаторXDTO(ФабрикаXDTO);
		ОбъектXDTO     = Сериализатор.ЗаписатьXDTO(Дерево);
		ТипОбъектаXDTO = ОбъектXDTO.Тип();
		
		ЗаписьFI       = Новый ЗаписьXML;
		
		ИмяФайла = Объект.КаталогПереноса + "\parametres_from_destination.xml";
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда 
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ФайлыКУдалению.Добавить(ИмяФайла);
		КонецЕсли;
		
		ЗаписьFI.ОткрытьФайл(ИмяФайла);
		ФабрикаXDTO.ЗаписатьXML(ЗаписьFI, ОбъектXDTO);
		ЗаписьFI.Закрыть();
		
		СохранитьВХранилище(ИмяФайла, "parametres_from_destination");
		
		Результат = Истина;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Помощник перехода с Бухгалтерия предприятия 8.Выгрузка настроек учета';
										|en = 'Wizard of migration from 1C:Enterprise Accounting 8.Export accounting settings'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Результат = Ложь;
	КонецПопытки;
	
	// Удаляем временные файлы
	Для Каждого ФайлКУдалению Из ФайлыКУдалению Цикл
		ВыбранныйФайл = Новый Файл(ФайлКУдалению);
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранныйФайл.УстановитьТолькоЧтение(Ложь);
			Попытка
				УдалитьФайлы(ВыбранныйФайл.ПолноеИмя);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Помощник перехода с Бухгалтерия предприятия 8.Удаление временных файлов.';
												|en = 'Wizard of migration from 1C:Enterprise Accounting 8.Delete temporary files'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьВХранилище(ВременныйФайл, ТипФайла)
	
	Файл = Новый Файл(ВременныйФайл);
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() И Файл.Существует() Тогда
		
		АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ВременныйФайл), ЭтаФорма.УникальныйИдентификатор);
		
		УдалитьФайлы(ВременныйФайл);
		
		Если ТипФайла = "parametres_from_destination" Тогда
			АдресХранилищаПараметрыПолучателя = АдресФайла;
		ИначеЕсли ТипФайла = "loading_settings" Тогда
			АдресЗагруженныеНастройки = АдресФайла;
		ИначеЕсли ТипФайла = "current_stage" Тогда
			АдресТекущийЭтап = АдресФайла;
		ИначеЕсли ТипФайла = "settings_period_documents" Тогда
			АдресПериодДокументов = АдресФайла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗагруженныеДляБП()
	
	ФайлыКУдалению = Новый Массив;
	
	Отказ = Ложь;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИмяФайла = Объект.КаталогПереноса + "\data_from_BP.xml";
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() И ЗначениеЗаполнено(АдресДанныеИзБП) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДанныеИзБП);
		ДвоичныеДанные.Записать(ИмяФайла);
		ФайлыКУдалению.Добавить(ИмяФайла);
	КонецЕсли;
	РезультатЗагрузки = Новый Структура("Отказ, СтрокаСообщения, ЕстьПредупреждения", Ложь, "", Ложь);
	ОбработкаОбъект.ЗагрузкаСообщения(ИмяФайла, РезультатЗагрузки);
	Если РезультатЗагрузки.ЕстьПредупреждения Тогда
		Элементы.ГруппаПредупреждения.Видимость = Истина;
	КонецЕсли;
	Если РезультатЗагрузки.Отказ Тогда
		Элементы.ОтчетОЗагрузке.Заголовок = РезультатЗагрузки.СтрокаСообщения;
		Элементы.ОтчетОЗагрузке.ЦветТекста = Новый Цвет(255,0,0);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
	
		НадписьВыгрузки = НСтр("ru = 'Загрузка данных успешно завершена %ДатаВыгрузки%';
								|en = 'Data is successfully imported %ДатаВыгрузки%'");
		НадписьВыгрузки = СтрЗаменить(НадписьВыгрузки, "%ДатаВыгрузки%",
			Формат(ТекущаяДатаСеанса(), "ДЛФ=DD") + " в " + Формат(ТекущаяДатаСеанса(), "ДЛФ=T"));
		Элементы.ОтчетОЗагрузке.Заголовок = НадписьВыгрузки;
		Элементы.ОтчетОЗагрузке.ЦветТекста = Новый Цвет(69, 81, 133);
		
		Попытка
			
			Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
			
			Структура = Новый Структура("Этап", Объект.ЭтапЗагруженныхДанных);
			
			ОбъектXDTO = Сериализатор.ЗаписатьXDTO(Структура);
			ТипОбъектаXDTO = ОбъектXDTO.Тип();
			ЗаписьFI = Новый ЗаписьXML;
			ИмяФайла = Объект.КаталогПереноса + "\loading_settings.xml";
			Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				ФайлыКУдалению.Добавить(ИмяФайла);
			КонецЕсли;
			
			ЗаписьFI.ОткрытьФайл(ИмяФайла);
			ФабрикаXDTO.ЗаписатьXML(ЗаписьFI, ОбъектXDTO);
			ЗаписьFI.Закрыть();
			
			СохранитьВХранилище(ИмяФайла, "loading_settings");
			
		Исключение
			
			НадписьВыгрузки = НадписьВыгрузки + Символы.ПС + НСтр("ru = 'Ошибка при обновлении файла loading_settings';
																	|en = 'An error occurred when updating the loading_settings file'");
			Элементы.ОтчетОЗагрузке.Заголовок = НадписьВыгрузки;
			Элементы.ОтчетОЗагрузке.ЦветТекста = Новый Цвет(255, 0, 0);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Для Каждого ФайлКУдалению Из ФайлыКУдалению Цикл
		ВыбранныйФайл = Новый Файл(ФайлКУдалению);
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранныйФайл.УстановитьТолькоЧтение(Ложь);
			УдалитьФайлы(ВыбранныйФайл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РазделИнициализацииПереходовПомощника

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока().
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаНачало", "СтраницаНавигацииНачало", 
										"СтраницаНачало_ПриОткрытии");
	СтруктураПараметров.ИмяОбработчикаПриПереходеДалее = "СтраницаНачало_ПриПереходеДалее";
	ТаблицаПереходовНоваяСтрока(1, СтруктураПараметров);
								
	СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаВыбораКаталога", "СтраницаНавигацииНазадДалее", 
										"СтраницаВыбораКаталога_ПриОткрытии");
	СтруктураПараметров.ИмяОбработчикаПриПереходеДалее = "СтраницаВыбораКаталога_ПриПереходеДалее";
	ТаблицаПереходовНоваяСтрока(2, СтруктураПараметров);
								
	СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаНастроекУчета", "СтраницаНавигацииУстановитьЗначения", 
										"СтраницаНастроекУчета_ПриОткрытии");
	СтруктураПараметров.ИмяОбработчикаПриПереходеНазад = "СтраницаНастроекУчета_ПриПереходеНазад";
	ТаблицаПереходовНоваяСтрока(3, СтруктураПараметров);
								
	СтруктураПараметров = СоздатьСтруктуруПараметровСтрокиПерехода("СтраницаЗагрузкиДанных", "СтраницаНавигацииЗагрузитьДанные", 
										"СтраницаОжидания_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(4, СтруктураПараметров);

КонецПроцедуры

// Готовит структуру параметров для дальнейшего добавления строки в таблицу переходов.
//
// Параметры:
//
//  	ИмяОсновнойСтраницы - Строка. Имя страницы панели "ПанельОсновная", 
//		которая соответствует текущему номеру перехода.
//
//  	ИмяСтраницыНавигации - Строка. Имя страницы панели "ПанельНавигации", 
//		которая соответствует текущему номеру перехода.
//
//  	ИмяОбработчикаПриОткрытии - Строка. Имя функции-обработчика события открытия текущей страницы 
//  	помощника
&НаКлиенте
Функция СоздатьСтруктуруПараметровСтрокиПерехода(ИмяОсновнойСтраницы, ИмяСтраницыНавигации, ИмяОбработчикаПриОткрытии)
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяОсновнойСтраницы", ИмяОсновнойСтраницы);
	СтруктураПараметров.Вставить("ИмяСтраницыНавигации", ИмяСтраницыНавигации);
	СтруктураПараметров.Вставить("ИмяСтраницыДекорации", "СтраницаДекорации");
	СтруктураПараметров.Вставить("ИмяОбработчикаПриОткрытии", ИмяОбработчикаПриОткрытии);
	СтруктураПараметров.Вставить("ИмяОбработчикаПриПереходеДалее", "");
	СтруктураПараметров.Вставить("ИмяОбработчикаПриПереходеНазад", "");
	Возврат СтруктураПараметров;
КонецФункции

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу 
//  перехода
//  СтруктураПараметров - Структура, содержащая значения колонок в строке таблицы переходов
//  	ИмяОсновнойСтраницы - Строка. Имя страницы панели "ПанельОсновная", 
//		которая соответствует текущему номеру перехода.
//
//  	ИмяСтраницыНавигации - Строка. Имя страницы панели "ПанельНавигации", 
//		которая соответствует текущему номеру перехода.
//
//  	ИмяСтраницыДекорации - Строка. Имя страницы панели "ПанельДекорации", которая соответствует 
//  	текущему номеру перехода.
//
//  	ИмяОбработчикаПриОткрытии - Строка. Имя функции-обработчика события открытия текущей страницы 
//  	помощника
//
//  	ИмяОбработчикаПриПереходеДалее - Строка. Имя функции-обработчика события перехода на следующую 
//  	страницу помощника.
//
//  	ИмяОбработчикаПриПереходеНазад - Строка. Имя функции-обработчика события перехода на предыдущую 
//  	страницу помощника.
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода, СтруктураПараметров)
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее И ПорядковыйНомерПерехода <> 1 Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
															ПорядковыйНомерПерехода - 1));
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			Попытка
				РезультатВычисления = Вычислить(ИмяПроцедуры);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецПопытки;			
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", 
														ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Попытка
				РезультатВычисления = Вычислить(ИмяПроцедуры);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", 
														ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Попытка
			РезультатВычисления = Вычислить(ИмяПроцедуры);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
		КонецПопытки;
		
		Если Отказ <> Неопределено И Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", 
															ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаВыбораКаталога Тогда
		Элементы.КомандаДалее2.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаЗагрузкиДанных Тогда
		Элементы.ЗагрузитьДанные.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаНастроекУчета Тогда		
		Элементы.УстановитьЗначенияПараметровУчета.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Элементы.ОтчетОЗагрузке.Заголовок = "";
	Элементы.ГруппаПредупреждения.Видимость = Ложь;
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	УстановитьДляВсехПометку(1);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	УстановитьДляВсехПометку(0);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПараметровУчета(Команда)
	
	СохранитьВХранилищеНаКлиенте("parametres_from_source");
	УстановитьЗначенияПараметровУчетаСервер();
	СкопироватьНаКлиент("parametres_from_destination");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДляВсехПометку(Пометка)
	
	Для Каждого Строка Из ДеревоНастроекУчета.ПолучитьЭлементы() Цикл
		Если Элементы.ПанельОсновная.ТекущаяСтраница
			<> Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаНастроекУчета Тогда
			Строка.Отметка = Пометка;
		Иначе
			Если Строка.ЗначенияРавны Тогда
				Строка.Отметка = 0;
			ИначеЕсли Строка.ИмяИсточник = "-" Тогда
				Строка.Отметка = 1;
			Иначе
				Строка.Отметка = Пометка;
			КонецЕсли;
		КонецЕсли;
		
		ПроставитьПометкиВниз(Строка, Пометка);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроставитьОтметкиВверхВниз(ТекущиеДанные)
	
	ТекущиеДанные.Отметка = ТекущиеДанные.Отметка % 2;
	
	ПроставитьПометкиВниз(ТекущиеДанные, ТекущиеДанные.Отметка);
	ПроставитьПометкиВверх(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные, Пометка)
	
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Отметка;
	Для Каждого Потомок Из Потомки Цикл
		
		Потомок.Отметка = Пометка;
		
		Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаНастроекУчета 
			 И Потомок.ИмяИсточник = "-" Тогда
			Потомок.Отметка = 1;
		КонецЕсли;
		
		ПроставитьПометкиВниз(Потомок, Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для каждого Потомок Из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.Отметка = 1);
			НеВсеЛожь = НеВсеЛожь ИЛИ Булево(Потомок.Отметка);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.Отметка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.Отметка = 2;
		Иначе
			Родитель.Отметка = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтобразитьНастройкиУчета(ОчиститьИОбновить = Ложь)
	
	Результат = Ложь;
	
	ФайлыКУдалению = Новый Массив;
	
	Если ОчиститьИОбновить Или ДеревоНастроекУчета.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ДеревоНастроекУчета.ПолучитьЭлементы().Очистить();
	
		ИмяФайлаИзУП = Объект.КаталогПереноса + "\parametres_from_source.xml";
		Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() И ЗначениеЗаполнено(АдресФайлаНастройкиИсточника) Тогда
			ИмяФайлаИзУП = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаНастройкиИсточника);
			ДвоичныеДанные.Записать(ИмяФайлаИзУП);
			ФайлыКУдалению.Добавить(ИмяФайлаИзУП);
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаИзУП);
		
		Если Файл.Существует() Тогда
			
			ЧтениеFI = Новый ЧтениеXML;
			ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueTree");

			ЧтениеFI.ОткрытьФайл(ИмяФайлаИзУП);
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеFI,ТипОбъектаXDTO);
			ОбъектXDTO.Проверить();
			Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
			ДеревоНастроек = Сериализатор.ПрочитатьXDTO(ОбъектXDTO);
			ЧтениеFI.Закрыть();
		
			ПроисходитДобавлениеСтрокДерева = Истина;
			
			ТаблицаЗначенийКонстант = ПолучитьЗначенияКонстант(ДеревоНастроек);
			
			ДобавитьСтрокиДереваРекурсивно(ТаблицаЗначенийКонстант, ДеревоНастроекУчета, ДеревоНастроек);
			
			Группа = ДеревоНастроек.Строки.Найти("Организация", "Название");
			
			Если Группа <> Неопределено Тогда
				НоваяСтрока = Группа.Строки.Добавить();
				НоваяСтрока.Название         = НСтр("ru = 'Производство';
													|en = 'Production'");
				НоваяСтрока.ИмяИсточник      = "-";
				НоваяСтрока.ИмяПриемник      = "ИспользоватьПроизводство";
				НоваяСтрока.Отметка          = Истина;
			КонецЕсли;
			
			УстановитьУсловноеОформление();
			
			ПроисходитДобавлениеСтрокДерева = Ложь;
			
			Результат = Ложь;
		Иначе
			Элементы.НадписьОшибкиПерехода.Заголовок = 
				НСтр("ru = 'В выбранном каталоге отсутствует выгрузка настроек из программы 1С:Бухгалтерия предприятия 8';
					|en = 'Exported settings from application 1C:Enterprise Accounting 8 are not found in the selected directory '");
			Результат = Истина;
		КонецЕсли;
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Для Каждого ФайлКУдалению Из ФайлыКУдалению Цикл
		ВыбранныйФайл = Новый Файл(ФайлКУдалению);
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранныйФайл.УстановитьТолькоЧтение(Ложь);
			УдалитьФайлы(ВыбранныйФайл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияКонстант(Дерево)
	
	ЗапросТекст = "";
	
	Для Каждого Группа Из Дерево.Строки Цикл
		Для Каждого Строка Из Группа.Строки Цикл
			
			Имя = Строка.ИмяПриемник;
			Если Метаданные.Константы.Найти(Имя)  = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не КонстантаДоступнаДляИзменения(Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Имя = "ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль" 
				Или Имя = "ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера"
				Или Имя = "ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗапросТекст = "" Тогда
				ЗапросТекст = "ВЫБРАТЬ
					|	" + Имя + ".Значение КАК Значение,
					|	""" + Имя + """ КАК Имя
					|ИЗ
					|	Константа."+Имя+" КАК "+Имя;
			Иначе
					Подзапрос = "
					|	ОБЪЕДИНИТЬ ВСЕ
					|
					|	ВЫБРАТЬ
					|	%1" + Имя + ".Значение%2,
					|	"""+Имя+"""
					|ИЗ
					|	Константа."+Имя+" КАК "+Имя;
					
				Если Имя <> "ЗаголовокСистемы" И Имя <> "СписокЗапрещенныхРасширений" Тогда
					Подзапрос = СтрЗаменить(Подзапрос, "%1", "");
					Подзапрос = СтрЗаменить(Подзапрос, "%2", "");
				Иначе
					Подзапрос = СтрЗаменить(Подзапрос, "%1", " ПОДСТРОКА(");
					Подзапрос = СтрЗаменить(Подзапрос, "%2", ", 1, 500)");
				КонецЕсли;
				
				ЗапросТекст = ЗапросТекст + Подзапрос;

			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

	Если ЗапросТекст = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
		
	Запрос = Новый Запрос(ЗапросТекст);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПриемника(ТаблицаЗначенийКонстант, Имя)
	
	Если Имя = "" Тогда
		Возврат "";
	КонецЕсли;
		
	ПараметрыОтбора = Новый Структура("Имя", Имя);
	НайденныеСтроки = ТаблицаЗначенийКонстант.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Если НайденныеСтроки[0].Значение = Истина Или НайденныеСтроки[0].Значение = Ложь Тогда
			Возврат НайденныеСтроки[0].Значение;
		Иначе
			Возврат СокрЛП(НайденныеСтроки[0].Значение);
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УО = УсловноеОформление.Элементы.Добавить();
	УО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240, 240, 240));
	ЭУ = УО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭУ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНастроекУчета.ИмяИсточник");
	ЭУ.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭУ.ПравоеЗначение = "-";
	ОП = УО.Поля.Элементы.Добавить();
	ОП.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекУчетаНазвание");
	
	ОП2 = УО.Поля.Элементы.Добавить();
	ОП2.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекУчетаЗначениеПриемник");

	ОП3 = УО.Поля.Элементы.Добавить();
	ОП3.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекУчетаЗначениеИсточник");

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиДереваРекурсивно(ТаблицаЗначенийКонстант, ИсходноеДерево, Дерево)
	
	Если ТипЗнч(Дерево) <> Тип("ДеревоЗначений") Тогда
		
		Если Не КонстантаДоступнаДляИзменения(Дерево.ИмяПриемник) Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ИсходноеДерево.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Дерево);
		
		Если СокрЛП(НоваяСтрока.ЗначениеИсточник)="0" Или (НоваяСтрока.ЗначениеИсточник <> Истина И НоваяСтрока.ЗначениеИсточник <> Ложь) Тогда
			НоваяСтрока.ЗначениеИсточник = СокрЛП(НоваяСтрока.ЗначениеИсточникПредставление);
		КонецЕсли;
		Если НоваяСтрока.ИмяИсточник = "-" Тогда
			НоваяСтрока.ЗначениеИсточник = "Да";
		КонецЕсли;
		
		НоваяСтрока.ЗначениеПриемник = ПолучитьЗначениеПриемника(ТаблицаЗначенийКонстант, НоваяСтрока.ИмяПриемник);
		
		Если НоваяСтрока.ЗначениеПриемник = Истина Тогда
			НоваяСтрока.ЗначениеПриемник = "Да";
		ИначеЕсли НоваяСтрока.ЗначениеПриемник = Ложь Тогда
			НоваяСтрока.ЗначениеПриемник = "Нет";
		КонецЕсли;
		Если НоваяСтрока.ЗначениеИсточник = Истина Тогда
			НоваяСтрока.ЗначениеИсточник = "Да";
		ИначеЕсли СокрЛП(НоваяСтрока.ЗначениеИсточник)<>"0" И НоваяСтрока.ЗначениеИсточник = Ложь Тогда
			НоваяСтрока.ЗначениеИсточник = "Нет";
		КонецЕсли;
		
		Если НоваяСтрока.ЗначениеПриемник = НоваяСтрока.ЗначениеИсточник Тогда
			НоваяСтрока.ЗначенияРавны = Истина;
		Иначе
			НоваяСтрока.ЗначенияРавны = Ложь;
		КонецЕсли;
		
		Если НоваяСтрока.ЗначениеИсточник = "Нет" Тогда
			НоваяСтрока.КартинкаИсточник = 1;
			НоваяСтрока.ЗначениеИсточник = "";
		ИначеЕсли НоваяСтрока.ЗначениеИсточник = "Да" Тогда
			НоваяСтрока.КартинкаИсточник = 0;
			НоваяСтрока.ЗначениеИсточник = "";
		Иначе
			НоваяСтрока.КартинкаИсточник = -1;
		КонецЕсли;
		
		Если НоваяСтрока.ЗначениеПриемник = "Нет" Тогда
			НоваяСтрока.КартинкаПриемник = 1;
			НоваяСтрока.ЗначениеПриемник = "";
		ИначеЕсли НоваяСтрока.ЗначениеПриемник = "Да" Тогда
			НоваяСтрока.КартинкаПриемник = 0;
			НоваяСтрока.ЗначениеПриемник = "";
		Иначе
			НоваяСтрока.КартинкаПриемник = -1;
		КонецЕсли;
		
		НоваяСтрока.Отметка = 1;
		
	Иначе
		НоваяСтрока = ИсходноеДерево;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		ДобавитьСтрокиДереваРекурсивно(ТаблицаЗначенийКонстант, НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КонстантаДоступнаДляИзменения(ИмяКонстанты)
	
	// Обеспечение работы в режиме сервиса.
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	КонстантаМетаданные = Метаданные.Константы.Найти(ИмяКонстанты);
	Если КонстантаМетаданные <> Неопределено Тогда
		ПолноеИмя = КонстантаМетаданные.ПолноеИмя();
		Если РазделениеВключено Тогда
			ЭтоРазделенныйОМД = РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ПолноеИмя, РаботаВМоделиСервиса.РазделительОсновныхДанных())
				Или РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ПолноеИмя, РаботаВМоделиСервиса.РазделительВспомогательныхДанных());
			
			Если (ДоступноИспользованиеРазделенныхДанных И Не ЭтоРазделенныйОМД)
				Или (Не ДоступноИспользованиеРазделенныхДанных И ЭтоРазделенныйОМД) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияПараметровУчетаСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КомпонентыОбмена = ОбработкаОбъект.КомпонентыОбмена("Получение");
	
	Для Каждого Группа Из ДеревоНастроекУчета.ПолучитьЭлементы() Цикл
		Для Каждого Строка Из Группа.ПолучитьЭлементы() Цикл
			Имя = Строка.ИмяПриемник;
			
			Если (Строка.ИмяИсточник = "-" Или  Строка.Отметка = 1) 
				 И Не Строка.ЗначенияРавны И Метаданные.Константы.Найти(Имя) <> Неопределено Тогда
				
				Если Строка.КартинкаИсточник = 0 Тогда
					Константы[Имя].Установить(Истина);
				ИначеЕсли Строка.КартинкаИсточник = 1 Тогда
					Константы[Имя].Установить(Ложь);
				ИначеЕсли Строка.КартинкаИсточник = -1 Тогда
					Если ЗначениеЗаполнено(Строка.СериализованноеЗначение) Тогда
						// загрузки из образа XML в эту базу
						ЗначениеИзОбраза = ПолучитьИзФайлаЗначение(КомпонентыОбмена, Строка.СериализованноеЗначение);
						// установка значения константы
						Константы[Имя].Установить(ЗначениеИзОбраза);
					ИначеЕсли Строка.КартинкаПриемник = 1 Тогда
						Константы[Имя].Установить(Истина);
					ИначеЕсли Строка.КартинкаПриемник = -1 Тогда
						Если Имя <> "ДополнительнаяКолонкаПечатныхФормДокументов" Тогда
							Константы[Имя].Установить(Строка.ЗначениеИсточник);
						Иначе
							ЗначенияПеречисления = Новый Соответствие;
							ЗначенияПеречисления.Вставить(НСтр("ru = 'Не выводить';
																|en = 'Do not display'"),
															Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
							ЗначенияПеречисления.Вставить(НСтр("ru = 'Артикул';
																|en = 'Product ID'"), Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул);
							ЗначенияПеречисления.Вставить(НСтр("ru = 'Код';
																|en = 'Code'"), Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код);
							
							Константы[Имя].Установить(ЗначенияПеречисления.Получить(Строка.ЗначениеИсточник));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Принудительное включение некоторых опций.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		Если Не Константы.ИспользоватьСоглашенияСКлиентами.Получить() Тогда
			Константы.ИспользоватьСоглашенияСКлиентами.Установить(Истина);
		КонецЕсли;
		Если Константы.ИспользованиеСоглашенийСКлиентами.Получить() = Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
			Константы.ИспользованиеСоглашенийСКлиентами.Установить(Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПояснениеЗагрузки.Заголовок = НСтр("ru = 'Значения констант и функциональных опций успешно установлены';
												|en = 'Values of constants and functional options are successfully set'");
	
	ВыгрузкаНастроекУчета();
	
	Отказ = ОтобразитьНастройкиУчета(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИзФайлаЗначение(КомпонентыОбмена, СериализованноеЗначение)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если СтрНайти(СериализованноеЗначение, "ТипыЦен") > 0 Тогда
		Возврат ОбработкаОбъект.XMLТекстВДанныеИБ(КомпонентыОбмена, СериализованноеЗначение, "Справочник_ТипыЦен");
	Иначе
		Возврат ОбработкаОбъект.XMLТекстВДанныеИБ(КомпонентыОбмена, СериализованноеЗначение, "Справочник_Валюты");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДеревоНастроекУчетаОтметкаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоНастроекУчета.ТекущиеДанные;
	Если Не ТекущиеДанные.ИмяИсточник = "-" Тогда
		ПроставитьОтметкиВверхВниз(ТекущиеДанные);
	Иначе
		ТекущиеДанные.Отметка = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Элементы.ОтчетОЗагрузке.Заголовок = "";
	Элементы.ГруппаПредупреждения.Видимость = Ложь;
	
	ОбновитьНаКлиенте();
	
	Состояние(НСтр("ru = 'Выполняется загрузка данных из 1С:Бухгалтерия предприятия 8, ред.3.0';
					|en = 'Importing data from 1C:Enterprise Accounting 8 3.0'"));
	
	СохранитьВХранилищеНаКлиенте("data_from_BP");
	
	СохранитьЗагруженныеДляБП();
	
	СкопироватьНаКлиент("loading_settings");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВХранилищеНаКлиенте(ТипФайла)
	
	ИмяФайла = Объект.КаталогПереноса + "\" + ТипФайла + ".xml";
	Если НЕ ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		#Если ВебКлиент Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Объект", Объект);
			ДополнительныеПараметры.Вставить("ТипФайла", ТипФайла);
			ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
			ДополнительныеПараметры.Вставить("Действие", "СохранитьВХранилищеНаКлиенте");

			ПроверитьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры, "ОбработчикПроверкиСуществованияФайла");
		#Иначе
			Файл = Новый Файл(ИмяФайла);
			Если Файл.Существует() Тогда
				Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), ЭтаФорма.УникальныйИдентификатор);
				ОбработатьРезультатПомещенияВХранилище(Адрес, ТипФайла);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПроверкиСуществованияФайла(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	Файл = Новый Файл(ДополнительныеПараметры.ИмяФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверкиСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверкиСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	Если НЕ Существует Тогда
		Возврат;
	КонецЕсли;
	Если ДополнительныеПараметры.Действие = "СохранитьВХранилищеНаКлиенте" Тогда
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла, ""));
		ОписаниеОповещения = Новый ОписаниеОповещения("ПомещениеФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы,,Ложь, ЭтаФорма.УникальныйИдентификатор);
	ИначеЕсли ДополнительныеПараметры.Действие = "ОбновитьНаКлиенте" Тогда
		Файл = Новый Файл(ДополнительныеПараметры.ИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеВремениИзмененияЗавершение", ЭтотОбъект);
		Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайловЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Адрес = ПомещенныеФайлы[0].Хранение;
	ОбработатьРезультатПомещенияВХранилище(Адрес, ДополнительныеПараметры.ТипФайла);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеВремениИзмененияЗавершение(ВремяИзменения, ДополнительныеПараметры) Экспорт
	ОбновитьНаСервере(ВремяИзменения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПомещенияВХранилище(Адрес, ТипФайла)
	Если ТипФайла = "data_from_BP" Тогда
		АдресДанныеИзБП = Адрес;
	ИначеЕсли ТипФайла = "parametres_from_source" Тогда
		АдресФайлаНастройкиИсточника = Адрес;
	ИначеЕсли ТипФайла = "current_stage" Тогда
		АдресТекущийЭтап = Адрес;
	ИначеЕсли ТипФайла = "settings_period_documents" Тогда
		АдресПериодДокументов = Адрес;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки()

	Если ЗначениеЗаполнено(Объект.КаталогПереноса) Тогда
		
		Настройки = Новый Соответствие;

		Настройки.Вставить("КаталогПереноса", Объект.КаталогПереноса);
		
		СохранитьНастройкиНаСервере(Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере(Настройки)
	
	КлючНастроек = "Обработка.ПомощникПереходаСБухгалтерияПредприятия";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПомощникПереходаСБухгалтерияПредприятия", КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиНаСервере()
	
	КлючНастроек = "Обработка.ПомощникПереходаСБухгалтерияПредприятия";
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ПомощникПереходаСБухгалтерияПредприятия", КлючНастроек);
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройки()

	ЗначениеНастроек = ЗагрузитьНастройкиНаСервере();
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		Объект.КаталогПереноса = ЗначениеНастроек.Получить("КаталогПереноса");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиенте()
	
	СохранитьВХранилищеНаКлиенте("current_stage");
	СохранитьВХранилищеНаКлиенте("data_from_BP");
	СохранитьВХранилищеНаКлиенте("settings_period_documents");
	
	ИмяФайла = Объект.КаталогПереноса + "\data_from_BP.xml";
	#Если ВебКлиент Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", Объект);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		ДополнительныеПараметры.Вставить("Действие", "ОбновитьНаКлиенте");
			
		ПроверитьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры, "ОбработчикПроверкиСуществованияФайла");
	#Иначе
		Файл = Новый Файл(ИмяФайла);
		ДатаФайлаДанных = Дата(1,1,1);
		Если Файл.Существует() Тогда
			ДатаФайлаДанных = Файл.ПолучитьВремяИзменения();
		КонецЕсли;
		ОбновитьНаСервере(ДатаФайлаДанных);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере(ДатаФайлаДанных)
	
	ФайлыКУдалению = Новый Массив;
	
	Элементы.ОтчетОЗагрузке.Заголовок = "";
	Элементы.ГруппаПредупреждения.Видимость = Ложь;
	ИмяФайлаНастроек = Объект.КаталогПереноса + "\current_stage.xml";
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() И ЗначениеЗаполнено(АдресТекущийЭтап) Тогда
		ИмяФайлаНастроек = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресТекущийЭтап);
		ДвоичныеДанные.Записать(ИмяФайлаНастроек);
		
		ФайлыКУдалению.Добавить(ИмяФайлаНастроек);
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаНастроек);
	
	Если Файл.Существует() Тогда
		
		ЧтениеFI = Новый ЧтениеXML;
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "Structure");

		ЧтениеFI.ОткрытьФайл(ИмяФайлаНастроек);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеFI, ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
		Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
		СтруктураНастроек = Сериализатор.ПрочитатьXDTO(ОбъектXDTO);
		ЧтениеFI.Закрыть();
		
		Объект.ЭтапЗагруженныхДанных = СтруктураНастроек.Этап;
		
	КонецЕсли;
	
	ИмяФайла = Объект.КаталогПереноса + "\data_from_BP.xml";
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() И ЗначениеЗаполнено(АдресДанныеИзБП) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДанныеИзБП);
		ДвоичныеДанные.Записать(ИмяФайла);
		
		ФайлыКУдалению.Добавить(ИмяФайла);
	КонецЕсли;
	
	ФайлДанных = Новый Файл(ИмяФайла);
	
	Если Не ФайлДанных.Существует() Тогда
		Элементы.ДекорацияТипФайлаДанных.Заголовок = 
			НСтр("ru = 'Файл данных не обнаружен в каталоге переноса. Выгрузите данные из базы ""1С:Бухгалтерия предприятия 8""';
				|en = 'Data file was not found in the transfer directory. Export data from the 1C:Enterprise Accounting 8 infobase'");
		Элементы.ДекорацияДатаВыгрузкиДанных.Заголовок = "";
		Элементы.ДекорацияКоличествоОбъектовФайла.Заголовок = "";
	Иначе
		
		Элементы.ДекорацияДатаВыгрузкиДанных.Заголовок = НСтр("ru = 'Дата выгрузки';
																|en = 'Export date'") + ": " + ДатаФайлаДанных + ";";
		Элементы.ДекорацияКоличествоОбъектовФайла.Заголовок = НСтр("ru = 'Размер файла';
																	|en = 'File size'") + ": " + Окр(ФайлДанных.Размер()/1024,0) + " Кб.";
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайла);
		Текст = ТекстовыйДокумент.ПолучитьТекст();
		
		Если СтруктураНастроек.Этап = 2 Тогда
			Элементы.ДекорацияТипФайлаДанных.Заголовок = НСтр("ru = 'Данные нормативно-справочной информации';
																|en = 'Information of master data'");
		ИначеЕсли СтруктураНастроек.Этап = 3 Тогда
			Элементы.ДекорацияТипФайлаДанных.Заголовок = НСтр("ru = 'Данные остатков по счетам регламентированного учета';
																|en = 'Data on balances of accounts of local accounting'");
		ИначеЕсли СтруктураНастроек.Этап = 4 Тогда
			Элементы.ДекорацияТипФайлаДанных.Заголовок = НСтр("ru = 'Документы по МПЗ, взаиморасчетам, финансам';
																|en = 'Documents on inventory items, mutual settlements, finance'");
			
			ИмяФайлаНастроек = Объект.КаталогПереноса + "\settings_period_documents.xml";
			Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() И ЗначениеЗаполнено(АдресПериодДокументов) Тогда
				ИмяФайлаНастроек = ПолучитьИмяВременногоФайла("xml");
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресПериодДокументов);
				ДвоичныеДанные.Записать(ИмяФайлаНастроек);
				
				ФайлыКУдалению.Добавить(ИмяФайлаНастроек);
			КонецЕсли;
			
			ФайлНастроек = Новый Файл(ИмяФайлаНастроек);
			
			Если ФайлНастроек.Существует() Тогда
			
				ЧтениеFI = Новый ЧтениеXML;
				ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "Structure");

				ЧтениеFI.ОткрытьФайл(ИмяФайлаНастроек);
				ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеFI, ТипОбъектаXDTO);
				ОбъектXDTO.Проверить();
				Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
				СтруктураНастроек = Сериализатор.ПрочитатьXDTO(ОбъектXDTO);
				ЧтениеFI.Закрыть();
				
				Если ЗначениеЗаполнено(СтруктураНастроек.ДатаОстатков) 
					И ЗначениеЗаполнено(СтруктураНастроек.ДатаОкончания) Тогда
					
					Сообщение = " " + НСтр("ru = 'за период с %ДатаНачала% г. по %ДатаОкончания% г.';
											|en = 'for the period from %ДатаНачала% to %ДатаОкончания%'");
					Сообщение = СтрЗаменить(Сообщение, "%ДатаНачала%", 
											Формат(СтруктураНастроек.ДатаОстатков, "ДЛФ=D"));
					Сообщение = СтрЗаменить(Сообщение, "%ДатаОкончания%", 
											Формат(СтруктураНастроек.ДатаОкончания, "ДЛФ=D"));
					Элементы.ДекорацияТипФайлаДанных.Заголовок = Элементы.ДекорацияТипФайлаДанных.Заголовок
					+ Сообщение;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	
	// Удаляем временные файлы
	Для Каждого ФайлКУдалению Из ФайлыКУдалению Цикл
		ВыбранныйФайл = Новый Файл(ФайлКУдалению);
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранныйФайл.УстановитьТолькоЧтение(Ложь);
			Попытка
				УдалитьФайлы(ВыбранныйФайл.ПолноеИмя);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Помощник перехода с Бухгалтерия предприятия 8.Удаление временных файлов.';
												|en = 'Wizard of migration from 1C:Enterprise Accounting 8.Delete temporary files'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНаКлиент(ТипФайла)
	
	Адрес = Неопределено;
	
	Если ТипФайла = "parametres_from_destination" Тогда
		Адрес = АдресХранилищаПараметрыПолучателя;
	ИначеЕсли ТипФайла = "loading_settings" Тогда
		Адрес = АдресЗагруженныеНастройки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КаталогПереноса) И ЗначениеЗаполнено(Адрес) Тогда
		ПолноеИмяФайла = Объект.КаталогПереноса + "\" + ТипФайла + ".xml";
		#Если ВебКлиент Тогда
			ДополнительныеПараметры = Новый Структура("КаталогПереноса, ТипФайла", Объект.КаталогПереноса, ТипФайла);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, Адрес));
			НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ПолноеИмяФайла, Ложь);
		#Иначе
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
			ДвоичныеДанные.Записать(ПолноеИмяФайла);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталоПереносаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.НадписьОшибкиПерехода.Заголовок = "";
	ПараметрыДиалога = Новый Структура("Заголовок, МножественныйВыбор", НСтр("ru = 'Выберите путь к каталогу выгрузки данных из 
			|""1С: Бухгалтерия предприятия 8""';
			|en = 'Select a path to the directory of data export from
			|1C: Enterprise Accounting 8'"), Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтображенияДиалогаВыбораФайла", ЭтотОбъект);

	ОбработчикВыбораФайловогоКаталога("КаталогПереноса", СтандартнаяОбработка, ПараметрыДиалога, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтображенияДиалогаВыбораФайла(Каталог, ДополнительныеПараметры) Экспорт
	ЭтотОбъект.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПредупрежденияРезультатыЗагрузкиНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	МассивУзлов = Новый Массив;
	МассивУзлов.Добавить(ПредопределенноеЗначение("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПустаяСсылка"));
	ПараметрыФормы.Вставить("УзлыОбмена", Неопределено);
	ОткрытьФорму("РегистрСведений.РезультатыОбменаДанными.Форма.Форма", ПараметрыФормы);
КонецПроцедуры

// Открывает диалог для выбора файлового каталога, запрашивая установку расширения для работы с файлами.
//
// Параметры:
//     Объект                - Произвольный       - Объект, в котором будет установлено выбираемое свойство.
//     ИмяСвойства           - Строка             - Имя свойства с именем файла, устанавливаемого в объекте. Источник
//                                                  начального значения.
//     СтандартнаяОбработка  - Булево             - Флаг стандартной обработки, устанавливается в Ложь.
//     ПараметрыДиалога      - Структура          - Необязательные дополнительные параметры диалога выбора каталога.
//     ОповещениеЗавершения  - ОписаниеОповещения - Необязательное оповещение, которое будет вызвано со следующими
//                                                  параметрами:
//                                 Результат               - Строка - Выбранное значение (массив строк, если был
//                                                                    множественный выбор);
//                                 ДополнительныеПараметры - Неопределено.
//
&НаКлиенте
Процедура ОбработчикВыбораФайловогоКаталога(Знач ИмяСвойства, СтандартнаяОбработка = Ложь, Знач ПараметрыДиалога = Неопределено, ОповещениеЗавершения = Неопределено)
	СтандартнаяОбработка = Ложь;
	
	УмолчанияДиалога = Новый Структура;
	УмолчанияДиалога.Вставить("Заголовок", НСтр("ru = 'Укажите каталог';
												|en = 'Select directory'") );
	
	УстановитьЗначенияСтруктурыПоУмолчанию(ПараметрыДиалога, УмолчанияДиалога);
	
	ТекстПредупреждения = НСтр("ru = 'Для данной операции необходимо установить расширение для веб-клиента 1С:Предприятие.';
								|en = 'Install extension for 1C:Enterprise web client for this operation. '");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",               Объект);
	ДополнительныеПараметры.Вставить("ИмяСвойства",          ИмяСвойства);
	ДополнительныеПараметры.Вставить("ПараметрыДиалога",     ПараметрыДиалога);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ПроверитьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры, "ОбработчикВыбораФайловогоКаталогаЗавершение");
КонецПроцедуры

// Добавляет поля в целевую структуру, если их там нет.
//
// Параметры:
//     Результат           - Структура - Целевая структура.
//     ЗначенияПоУмолчанию - Структура - Значения по умолчанию.
//
&НаКлиенте
Процедура УстановитьЗначенияСтруктурыПоУмолчанию(Результат, Знач ЗначенияПоУмолчанию)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ЗначенияПоУмолчанию Цикл
		ИмяСвойства = КлючЗначение.Ключ;
		Если Не Результат.Свойство(ИмяСвойства) Тогда
			Результат.Вставить(ИмяСвойства, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры, ИмяОповещения)
	ТекстПредупреждения = НСтр("ru = 'Для данной операции необходимо установить расширение для веб-клиента 1С:Предприятие.';
								|en = 'Install extension for 1C:Enterprise web client for this operation. '");
	Оповещение = Новый ОписаниеОповещения(ИмяОповещения, ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредупреждения, Ложь);
КонецПроцедуры

// Обработчик немодального завершения диалога выбора каталога.
//
&НаКлиенте
Процедура ОбработчикВыбораФайловогоКаталогаЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства = ДополнительныеПараметры.ИмяСвойства;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ЗаполнитьЗначенияСвойств(Диалог, ДополнительныеПараметры.ПараметрыДиалога);
	
	Диалог.Каталог = Объект[ИмяСвойства];
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКаталогЗавершениеОтображенияДиалогаВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогЗавершениеОтображенияДиалогаВыбораФайла(Каталог, ДополнительныеПараметры) Экспорт
	Если Каталог <> Неопределено Тогда
		Объект[ДополнительныеПараметры.ИмяСвойства] = Каталог[0];
		Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Каталог[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

ВыполняетсяЗакрытие = Ложь;
#КонецОбласти

